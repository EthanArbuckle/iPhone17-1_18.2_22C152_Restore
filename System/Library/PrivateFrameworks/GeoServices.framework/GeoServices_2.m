BOOL GEOPDOrientedPositionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E4F940E8];
  v3 = (int *)MEMORY[0x1E4F940E0];
  v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(void *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14]) {
        v8 = 0;
      }
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
          if (v16 != 1) {
            goto LABEL_28;
          }
          v18 = *v2;
          v19 = *(void *)&a1[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && (v20 = v19 + 8, v20 <= *(void *)&a1[*v3])) {
            *(void *)&a1[v18] = v20;
          }
          else {
            a1[v14] = 1;
          }
          goto LABEL_25;
        default:
          if (!PBReaderSkipValueWithTag())
          {
LABEL_28:
            v21 = 0;
            goto LABEL_27;
          }
LABEL_25:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_26;
          }
          break;
      }
    }
  }
LABEL_26:
  v21 = a1[*v4] == 0;
LABEL_27:
  PBReaderRecallMark();
  return v21;
}

BOOL GEOPDStorefrontPresentationIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  v2 = (int *)MEMORY[0x1E4F940E8];
  v3 = (int *)MEMORY[0x1E4F940E0];
  v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_28;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        unint64_t v10 = *(void *)&a1[v9];
        if (v10 == -1 || v10 >= *(void *)&a1[*v3]) {
          break;
        }
        char v11 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v13 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v14 = v8 & 7;
      if (v13 || v14 == 4) {
        goto LABEL_28;
      }
      unint64_t v16 = v8 >> 3;
      if ((v8 >> 3) == 6) {
        break;
      }
      if (v16 != 5 && v16 != 4) {
        goto LABEL_26;
      }
      if (v14 != 2 || !PBReaderPlaceMark() || !GEOPDStorefrontViewIsValid(a1))
      {
LABEL_29:
        PBReaderRecallMark();
        return 0;
      }
      PBReaderRecallMark();
LABEL_27:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_28;
      }
    }
    if (v14 != 2) {
      goto LABEL_29;
    }
LABEL_26:
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_27;
  }
LABEL_28:
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOPDStorefrontViewIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  v2 = (int *)MEMORY[0x1E4F940E8];
  v3 = (int *)MEMORY[0x1E4F940E0];
  v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        unint64_t v10 = *(void *)&a1[v9];
        if (v10 == -1 || v10 >= *(void *)&a1[*v3]) {
          break;
        }
        char v11 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v13 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v14 = v8 & 7;
      if (v13 || v14 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 2u:
          if (v14 == 2 && PBReaderPlaceMark() && GEOPDPhotoPositionIsValid(a1)) {
            goto LABEL_40;
          }
          goto LABEL_46;
        case 4u:
          if ((v8 & 7) != 0) {
            goto LABEL_46;
          }
          unsigned int v16 = 0;
          break;
        case 5u:
          if (v14 == 2 && PBReaderPlaceMark() && GEOPDOrientedPositionIsValid(a1)) {
            goto LABEL_40;
          }
          goto LABEL_46;
        case 6u:
        case 7u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEOPDGeographicCoordinateIsValid(a1)) {
            goto LABEL_46;
          }
LABEL_40:
          PBReaderRecallMark();
          continue;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_46:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        uint64_t v17 = *v2;
        unint64_t v18 = *(void *)&a1[v17];
        if (v18 == -1 || v18 >= *(void *)&a1[*v3]) {
          break;
        }
        unint64_t v19 = v18 + 1;
        int v20 = *(char *)(*(void *)&a1[*v5] + v18);
        *(void *)&a1[v17] = v19;
        if (v20 < 0 && v16++ <= 8) {
          continue;
        }
        goto LABEL_41;
      }
      a1[*v4] = 1;
LABEL_41:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v22 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v22;
}

BOOL GEOPDGeographicCoordinateIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E4F940E8];
  v3 = (int *)MEMORY[0x1E4F940E0];
  v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      unint64_t v18 = v8 >> 3;
      if ((v8 >> 3) == 3 || v18 == 2 || v18 == 1)
      {
        if (v16 != 1) {
          goto LABEL_31;
        }
        uint64_t v19 = *v2;
        unint64_t v20 = *(void *)&a1[v19];
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t v21 = v20 + 8, v21 <= *(void *)&a1[*v3])) {
          *(void *)&a1[v19] = v21;
        }
        else {
          a1[v14] = 1;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_31:
        BOOL v22 = 0;
        goto LABEL_30;
      }
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v22 = a1[*v4] == 0;
LABEL_30:
  PBReaderRecallMark();
  return v22;
}

BOOL GEOTileCoordinateIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E4F940E8];
  v3 = (int *)MEMORY[0x1E4F940E0];
  v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_48;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      if (v14 || (v8 & 7) == 4) {
        goto LABEL_48;
      }
      unint64_t v16 = v8 >> 3;
      if ((v8 >> 3) == 3) {
        break;
      }
      if (v16 == 2)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_50;
        }
        unsigned int v28 = 0;
        while (1)
        {
          uint64_t v29 = *v2;
          uint64_t v30 = *(void *)&a1[v29];
          unint64_t v31 = v30 + 1;
          if (v30 == -1 || v31 > *(void *)&a1[*v3]) {
            goto LABEL_45;
          }
          int v32 = *(char *)(*(void *)&a1[*v5] + v30);
          *(void *)&a1[v29] = v31;
          if (v32 < 0)
          {
            BOOL v22 = v28++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_47;
        }
      }
      if (v16 == 1)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_50;
        }
        unsigned int v17 = 0;
        while (1)
        {
          uint64_t v18 = *v2;
          uint64_t v19 = *(void *)&a1[v18];
          unint64_t v20 = v19 + 1;
          if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
            break;
          }
          int v21 = *(char *)(*(void *)&a1[*v5] + v19);
          *(void *)&a1[v18] = v20;
          if (v21 < 0)
          {
            BOOL v22 = v17++ > 8;
            if (!v22) {
              continue;
            }
          }
          goto LABEL_47;
        }
LABEL_45:
        a1[*v4] = 1;
        goto LABEL_47;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_50:
        BOOL v33 = 0;
        goto LABEL_49;
      }
LABEL_47:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_48;
      }
    }
    if ((v8 & 7) != 0) {
      goto LABEL_50;
    }
    unsigned int v23 = 0;
    while (1)
    {
      uint64_t v24 = *v2;
      uint64_t v25 = *(void *)&a1[v24];
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
        goto LABEL_45;
      }
      int v27 = *(char *)(*(void *)&a1[*v5] + v25);
      *(void *)&a1[v24] = v26;
      if (v27 < 0)
      {
        BOOL v22 = v23++ > 8;
        if (!v22) {
          continue;
        }
      }
      goto LABEL_47;
    }
  }
LABEL_48:
  BOOL v33 = a1[*v4] == 0;
LABEL_49:
  PBReaderRecallMark();
  return v33;
}

BOOL GEOPDOrientedTilePositionIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E4F940E8];
  v3 = (int *)MEMORY[0x1E4F940E0];
  v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      if (v14 || (v8 & 7) == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_73;
          }
          unsigned int v16 = 0;
          while (1)
          {
            uint64_t v17 = *v2;
            uint64_t v18 = *(void *)&a1[v17];
            unint64_t v19 = v18 + 1;
            if (v18 == -1 || v19 > *(void *)&a1[*v3]) {
              goto LABEL_69;
            }
            int v20 = *(char *)(*(void *)&a1[*v5] + v18);
            *(void *)&a1[v17] = v19;
            if (v20 < 0)
            {
              BOOL v21 = v16++ > 8;
              if (!v21) {
                continue;
              }
            }
            goto LABEL_70;
          }
        case 2u:
          if ((v8 & 7) != 0) {
            goto LABEL_73;
          }
          unsigned int v22 = 0;
          while (1)
          {
            uint64_t v23 = *v2;
            uint64_t v24 = *(void *)&a1[v23];
            unint64_t v25 = v24 + 1;
            if (v24 == -1 || v25 > *(void *)&a1[*v3]) {
              goto LABEL_69;
            }
            int v26 = *(char *)(*(void *)&a1[*v5] + v24);
            *(void *)&a1[v23] = v25;
            if (v26 < 0)
            {
              BOOL v21 = v22++ > 8;
              if (!v21) {
                continue;
              }
            }
            goto LABEL_70;
          }
        case 3u:
          if ((v8 & 7) != 0) {
            goto LABEL_73;
          }
          unsigned int v27 = 0;
          while (1)
          {
            uint64_t v28 = *v2;
            uint64_t v29 = *(void *)&a1[v28];
            unint64_t v30 = v29 + 1;
            if (v29 == -1 || v30 > *(void *)&a1[*v3]) {
              goto LABEL_69;
            }
            int v31 = *(char *)(*(void *)&a1[*v5] + v29);
            *(void *)&a1[v28] = v30;
            if (v31 < 0)
            {
              BOOL v21 = v27++ > 8;
              if (!v21) {
                continue;
              }
            }
            goto LABEL_70;
          }
        case 4u:
          if ((v8 & 7) != 0) {
            goto LABEL_73;
          }
          unsigned int v32 = 0;
          while (1)
          {
            uint64_t v33 = *v2;
            uint64_t v34 = *(void *)&a1[v33];
            unint64_t v35 = v34 + 1;
            if (v34 == -1 || v35 > *(void *)&a1[*v3]) {
              goto LABEL_69;
            }
            int v36 = *(char *)(*(void *)&a1[*v5] + v34);
            *(void *)&a1[v33] = v35;
            if (v36 < 0)
            {
              BOOL v21 = v32++ > 8;
              if (!v21) {
                continue;
              }
            }
            goto LABEL_70;
          }
        case 5u:
          if ((v8 & 7) != 0) {
            goto LABEL_73;
          }
          unsigned int v37 = 0;
          while (1)
          {
            uint64_t v38 = *v2;
            uint64_t v39 = *(void *)&a1[v38];
            unint64_t v40 = v39 + 1;
            if (v39 == -1 || v40 > *(void *)&a1[*v3]) {
              goto LABEL_69;
            }
            int v41 = *(char *)(*(void *)&a1[*v5] + v39);
            *(void *)&a1[v38] = v40;
            if (v41 < 0)
            {
              BOOL v21 = v37++ > 8;
              if (!v21) {
                continue;
              }
            }
            goto LABEL_70;
          }
        case 6u:
          if ((v8 & 7) != 0) {
            goto LABEL_73;
          }
          unsigned int v42 = 0;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_73:
          BOOL v47 = 0;
          goto LABEL_72;
      }
      while (1)
      {
        uint64_t v43 = *v2;
        uint64_t v44 = *(void *)&a1[v43];
        unint64_t v45 = v44 + 1;
        if (v44 == -1 || v45 > *(void *)&a1[*v3]) {
          break;
        }
        int v46 = *(char *)(*(void *)&a1[*v5] + v44);
        *(void *)&a1[v43] = v45;
        if (v46 < 0)
        {
          BOOL v21 = v42++ > 8;
          if (!v21) {
            continue;
          }
        }
        goto LABEL_70;
      }
LABEL_69:
      a1[*v4] = 1;
LABEL_70:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v47 = a1[*v4] == 0;
LABEL_72:
  PBReaderRecallMark();
  return v47;
}

BOOL GEOPDGroundDataBuildIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  v2 = (int *)MEMORY[0x1E4F940E8];
  v3 = (int *)MEMORY[0x1E4F940E0];
  v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        BOOL v13 = v7++ >= 9;
        if (v13)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_122;
          }
          unsigned int v18 = 0;
          while (1)
          {
            uint64_t v19 = *v2;
            uint64_t v20 = *(void *)&a1[v19];
            unint64_t v21 = v20 + 1;
            if (v20 == -1 || v21 > *(void *)&a1[*v3]) {
              goto LABEL_95;
            }
            int v22 = *(char *)(*(void *)&a1[*v5] + v20);
            *(void *)&a1[v19] = v21;
            if (v22 < 0)
            {
              BOOL v23 = v18++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_97;
          }
        case 3u:
          if ((v8 & 7) != 0) {
            goto LABEL_122;
          }
          unsigned int v24 = 0;
          while (1)
          {
            uint64_t v25 = *v2;
            uint64_t v26 = *(void *)&a1[v25];
            unint64_t v27 = v26 + 1;
            if (v26 == -1 || v27 > *(void *)&a1[*v3]) {
              goto LABEL_95;
            }
            int v28 = *(char *)(*(void *)&a1[*v5] + v26);
            *(void *)&a1[v25] = v27;
            if (v28 < 0)
            {
              BOOL v23 = v24++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_97;
          }
        case 5u:
          if ((v8 & 7) != 0) {
            goto LABEL_122;
          }
          unsigned int v29 = 0;
          while (1)
          {
            uint64_t v30 = *v2;
            uint64_t v31 = *(void *)&a1[v30];
            unint64_t v32 = v31 + 1;
            if (v31 == -1 || v32 > *(void *)&a1[*v3]) {
              goto LABEL_95;
            }
            int v33 = *(char *)(*(void *)&a1[*v5] + v31);
            *(void *)&a1[v30] = v32;
            if (v33 < 0)
            {
              BOOL v23 = v29++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_97;
          }
        case 6u:
          if ((v8 & 7) != 0) {
            goto LABEL_122;
          }
          unsigned int v34 = 0;
          while (1)
          {
            uint64_t v35 = *v2;
            uint64_t v36 = *(void *)&a1[v35];
            unint64_t v37 = v36 + 1;
            if (v36 == -1 || v37 > *(void *)&a1[*v3]) {
              goto LABEL_95;
            }
            int v38 = *(char *)(*(void *)&a1[*v5] + v36);
            *(void *)&a1[v35] = v37;
            if (v38 < 0)
            {
              BOOL v23 = v34++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_97;
          }
        case 7u:
          if (v16 != 5) {
            goto LABEL_122;
          }
          uint64_t v39 = *v2;
          unint64_t v40 = *(void *)&a1[v39];
          if (v40 > 0xFFFFFFFFFFFFFFFBLL) {
            goto LABEL_96;
          }
          unint64_t v41 = v40 + 4;
          if (v41 > *(void *)&a1[*v3]) {
            goto LABEL_96;
          }
          *(void *)&a1[v39] = v41;
          goto LABEL_97;
        case 8u:
          if (v16 != 2)
          {
            if ((v8 & 7) != 0) {
              goto LABEL_122;
            }
            while (1)
            {
              uint64_t v42 = *v2;
              uint64_t v43 = *(void *)&a1[v42];
              unint64_t v44 = v43 + 1;
              if (v43 == -1 || v44 > *(void *)&a1[*v3]) {
                goto LABEL_95;
              }
              int v45 = *(char *)(*(void *)&a1[*v5] + v43);
              *(void *)&a1[v42] = v44;
              if (v45 < 0)
              {
                unsigned int v46 = v16++;
                if (v46 <= 8) {
                  continue;
                }
              }
              goto LABEL_97;
            }
          }
          if (!PBReaderPlaceMark()) {
            goto LABEL_122;
          }
LABEL_100:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
          {
            unsigned int v67 = a1[*v4];
            if (a1[*v4]) {
              break;
            }
            while (1)
            {
              uint64_t v68 = *v2;
              uint64_t v69 = *(void *)&a1[v68];
              unint64_t v70 = v69 + 1;
              if (v69 == -1 || v70 > *(void *)&a1[*v3]) {
                break;
              }
              int v71 = *(char *)(*(void *)&a1[*v5] + v69);
              *(void *)&a1[v68] = v70;
              if (v71 < 0)
              {
                BOOL v13 = v67++ >= 9;
                if (!v13) {
                  continue;
                }
              }
              goto LABEL_100;
            }
            a1[*v4] = 1;
          }
          goto LABEL_119;
        case 9u:
          if ((v8 & 7) != 0) {
            goto LABEL_122;
          }
          unsigned int v47 = 0;
          while (1)
          {
            uint64_t v48 = *v2;
            uint64_t v49 = *(void *)&a1[v48];
            unint64_t v50 = v49 + 1;
            if (v49 == -1 || v50 > *(void *)&a1[*v3]) {
              goto LABEL_95;
            }
            int v51 = *(char *)(*(void *)&a1[*v5] + v49);
            *(void *)&a1[v48] = v50;
            if (v51 < 0)
            {
              BOOL v23 = v47++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_97;
          }
        case 0xAu:
          if (v16 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_122:
              PBReaderRecallMark();
              return 0;
            }
LABEL_110:
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
            {
              unsigned int v72 = a1[*v4];
              if (a1[*v4]) {
                break;
              }
              while (1)
              {
                uint64_t v73 = *v2;
                uint64_t v74 = *(void *)&a1[v73];
                unint64_t v75 = v74 + 1;
                if (v74 == -1 || v75 > *(void *)&a1[*v3]) {
                  break;
                }
                int v76 = *(char *)(*(void *)&a1[*v5] + v74);
                *(void *)&a1[v73] = v75;
                if (v76 < 0)
                {
                  BOOL v13 = v72++ >= 9;
                  if (!v13) {
                    continue;
                  }
                }
                goto LABEL_110;
              }
              a1[*v4] = 1;
            }
LABEL_119:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0) {
              goto LABEL_122;
            }
            while (1)
            {
              uint64_t v52 = *v2;
              uint64_t v53 = *(void *)&a1[v52];
              unint64_t v54 = v53 + 1;
              if (v53 == -1 || v54 > *(void *)&a1[*v3]) {
                break;
              }
              int v55 = *(char *)(*(void *)&a1[*v5] + v53);
              *(void *)&a1[v52] = v54;
              if (v55 < 0)
              {
                unsigned int v56 = v16++;
                if (v56 <= 8) {
                  continue;
                }
              }
              goto LABEL_97;
            }
LABEL_95:
            uint64_t v14 = *v4;
LABEL_96:
            a1[v14] = 1;
          }
LABEL_97:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_120;
          }
          break;
        case 0xBu:
          if ((v8 & 7) != 0) {
            goto LABEL_122;
          }
          unsigned int v57 = 0;
          while (1)
          {
            uint64_t v58 = *v2;
            uint64_t v59 = *(void *)&a1[v58];
            unint64_t v60 = v59 + 1;
            if (v59 == -1 || v60 > *(void *)&a1[*v3]) {
              goto LABEL_95;
            }
            int v61 = *(char *)(*(void *)&a1[*v5] + v59);
            *(void *)&a1[v58] = v60;
            if (v61 < 0)
            {
              BOOL v23 = v57++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_97;
          }
        case 0xCu:
          if ((v8 & 7) != 0) {
            goto LABEL_122;
          }
          unsigned int v62 = 0;
          while (1)
          {
            uint64_t v63 = *v2;
            uint64_t v64 = *(void *)&a1[v63];
            unint64_t v65 = v64 + 1;
            if (v64 == -1 || v65 > *(void *)&a1[*v3]) {
              goto LABEL_95;
            }
            int v66 = *(char *)(*(void *)&a1[*v5] + v64);
            *(void *)&a1[v63] = v65;
            if (v66 < 0)
            {
              BOOL v23 = v62++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_97;
          }
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_122;
          }
          goto LABEL_97;
      }
    }
  }
LABEL_120:
  BOOL v77 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v77;
}

void sub_188F51FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose((const void *)(v47 - 240), 8);
  _Block_object_dispose((const void *)(v47 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_188F52508(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F525C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDResultRefinementSectionIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  v2 = (int *)MEMORY[0x1E4F940E8];
  v3 = (int *)MEMORY[0x1E4F940E0];
  v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_31;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_31;
      }
      unint64_t v17 = v8 >> 3;
      if ((v8 >> 3) == 3) {
        break;
      }
      if (v17 != 2)
      {
        if (v17 == 1 && v15 != 2) {
          goto LABEL_32;
        }
        goto LABEL_29;
      }
      if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDResultRefinementIsValid(a1))
      {
LABEL_32:
        PBReaderRecallMark();
        return 0;
      }
      PBReaderRecallMark();
LABEL_30:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_31;
      }
    }
    if (v15 != 2) {
      goto LABEL_32;
    }
LABEL_29:
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_32;
    }
    goto LABEL_30;
  }
LABEL_31:
  BOOL v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

void _GEOPDResultRefinementQueryCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v2 = a1[5];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v17;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(v2);
        }
        -[GEOPDResultRefinement readAll:](*(void *)(*((void *)&v16 + 1) + 8 * v6++), 1);
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v16 objects:v21 count:16];
    }
    while (v4);
  }

  [a1[4] readAll:1];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v7 = a1[3];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v13;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v7);
        }
        -[GEOPDResultRefinementSection readAll:](*(void *)(*((void *)&v12 + 1) + 8 * v11++), 1);
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v20 count:16];
    }
    while (v9);
  }
}

void sub_188F52A54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void ___Z16_factoryInstancev_block_invoke()
{
}

void sub_188F53368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  MEMORY[0x18C11F580](a13, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void sub_188F533F0()
{
}

void sub_188F533F8()
{
}

void sub_188F53400()
{
}

void sub_188F53408()
{
}

uint64_t addr_obj::Debugging::addChar(uint64_t this)
{
  addr_obj::Debugging::addChar_ = this;
  return this;
}

void *addr_obj::Logger::setCallback(void *result)
{
  addr_obj::Logger::callback_ = result;
  return result;
}

std::string *addr_obj::AddressObjectFactory::AddressObjectFactory(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (addr_obj::Logger::isInitialized((addr_obj::Logger *)this))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"input parameters: ", 18);
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"appName", 7);
    id v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"==", 2);
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v9 = *(const std::string::value_type **)a2;
    }
    if (v8 >= 0) {
      uint64_t v10 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v10 = *((void *)a2 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
    std::string::basic_string[abi:ne180100]<0>(v18, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
    std::string::basic_string[abi:ne180100]<0>(v16, "AddressObjectFactory");
    std::stringbuf::str();
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    addr_obj::Logger::log(2, (uint64_t)v18, 56, (uint64_t)v16, (uint64_t)&v14, (uint64_t)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    v20[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v20[1] = MEMORY[0x1E4FBA470] + 16;
    if (v21 < 0) {
      operator delete((void *)v20[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18C11F4F0](&v22);
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1E9116F40, memory_order_acquire) != -1)
  {
    v20[0] = sub_189113F0C;
    v18[0] = v20;
    std::__call_once(&qword_1E9116F40, v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  return this;
}

void sub_188F536B4(void *__p, int a2, int a3, __int16 a4, char a5, char a6, std::string *a7, void *a8, void *__pa, int a10, __int16 a11, char a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,long long a21,std::string::size_type a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (SHIBYTE(a14) < 0) {
    operator delete(__pa);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (SHIBYTE(a22) < 0) {
    operator delete((void *)a21);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  std::ostringstream::~ostringstream((uint64_t)&a30);
  unint64_t v37 = __cxa_begin_catch(__p);
  if (a2 == 2)
  {
    int v38 = v37;
    std::string::basic_string[abi:ne180100]<0>(&a30, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a24, "AddressObjectFactory");
    std::string::basic_string[abi:ne180100]<0>(&a15, "Exception caught during formatting of the log line: ");
    uint64_t v39 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(void *)v38 + 16))(v38);
    unint64_t v40 = std::string::append((std::string *)&a15, v39);
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    a22 = v40->__r_.__value_.__r.__words[2];
    a21 = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(2, (uint64_t)&a30, 56, (uint64_t)&a24, (uint64_t)&a21, (uint64_t)&__pa);
    if (SHIBYTE(a14) < 0) {
      operator delete(__pa);
    }
    if (SHIBYTE(a22) < 0) {
      operator delete((void *)a21);
    }
    if (a20 < 0) {
      operator delete(a15);
    }
    if (a29 < 0) {
      operator delete(a24);
    }
    if (a35 < 0) {
      operator delete(a30);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a30, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a24, "AddressObjectFactory");
    std::string::basic_string[abi:ne180100]<0>(&a21, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a15, "");
    addr_obj::Logger::log(2, (uint64_t)&a30, 56, (uint64_t)&a24, (uint64_t)&a21, (uint64_t)&a15);
    if (a20 < 0) {
      operator delete(a15);
    }
    if (SHIBYTE(a22) < 0) {
      operator delete((void *)a21);
    }
    if (a29 < 0) {
      operator delete(a24);
    }
    if (a35 < 0) {
      operator delete(a30);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x188F5364CLL);
}

void sub_188F53900(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x188F53854);
}

void sub_188F53A10()
{
}

void sub_188F53E34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F53EF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F54118(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F541F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOTileLoaderClientIdentifier(void *a1)
{
  id v1 = a1;
  id v2 = [NSString stringWithFormat:@"<%@: %p>", objc_opt_class(), v1];

  return v2;
}

void sub_188F544A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188F54928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getACAccountStoreClass_block_invoke(uint64_t a1)
{
  AccountsLibrary();
  Class result = objc_getClass("ACAccountStore");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1EB29FCA8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    return (Class)AccountsLibrary();
  }
  return result;
}

uint64_t AccountsLibrary()
{
  uint64_t v0 = AccountsLibraryCore();
  if (!v0)
  {
    id v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void sub_188F54EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AccountsLibraryCore()
{
  if (!AccountsLibraryCore_frameworkLibrary) {
    AccountsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return AccountsLibraryCore_frameworkLibrary;
}

uint64_t AppleAccountLibraryCore()
{
  if (!AppleAccountLibraryCore_frameworkLibrary) {
    AppleAccountLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return AppleAccountLibraryCore_frameworkLibrary;
}

uint64_t AuthKitLibraryCore()
{
  if (!AuthKitLibraryCore_frameworkLibrary) {
    AuthKitLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return AuthKitLibraryCore_frameworkLibrary;
}

void sub_188F55A50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F55B10(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEODynamicContextHyperlinkDetailsIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  id v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  long long v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      if ((v8 >> 3) == 2)
      {
        if (v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_37:
          BOOL v23 = 0;
          goto LABEL_36;
        }
      }
      else if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_37;
        }
        unsigned int v17 = 0;
        while (1)
        {
          uint64_t v18 = *v2;
          uint64_t v19 = *(void *)&a1[v18];
          unint64_t v20 = v19 + 1;
          if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
            break;
          }
          int v21 = *(char *)(*(void *)&a1[*v5] + v19);
          *(void *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8) {
            continue;
          }
          goto LABEL_34;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_37;
      }
LABEL_34:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v23 = a1[*v4] == 0;
LABEL_36:
  PBReaderRecallMark();
  return v23;
}

void sub_188F598E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDPlaceQuestionnaireFilterReadAllFrom(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    long long v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      int v8 = v3[*v6];
      if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
        break;
      }
      if (v3[*v6])
      {
        int v8 = 1;
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *v4;
        uint64_t v13 = *(void *)&v3[v12];
        unint64_t v14 = v13 + 1;
        if (v13 == -1 || v14 > *(void *)&v3[*v5]) {
          break;
        }
        char v15 = *(unsigned char *)(*(void *)&v3[*v7] + v13);
        *(void *)&v3[v12] = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0) {
          goto LABEL_13;
        }
        v9 += 7;
        if (v10++ >= 9)
        {
          char v17 = 0;
          int v8 = v3[*v6];
          goto LABEL_16;
        }
      }
      v3[*v6] = 1;
LABEL_13:
      int v8 = v3[*v6];
      if (v3[*v6]) {
        char v17 = 0;
      }
      else {
        char v17 = v11;
      }
LABEL_16:
      if (v8) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = (v17 & 7) == 4;
      }
      if (v18) {
        break;
      }
      if (!*(void *)(a1 + 8))
      {
        id v19 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        unint64_t v20 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v19;
      }
      if ((PBUnknownFieldAdd() & 1) == 0) {
        goto LABEL_23;
      }
    }
    BOOL v21 = v8 == 0;
  }
  else
  {
LABEL_23:
    BOOL v21 = 0;
  }
  objc_sync_exit(v3);

  return v21;
}

void sub_188F59E08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDPlaceIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  long long v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_133;
          }
          unsigned int v17 = 0;
          while (1)
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *(void *)&a1[v18];
            unint64_t v20 = v19 + 1;
            if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
              goto LABEL_129;
            }
            int v21 = *(char *)(*(void *)&a1[*v5] + v19);
            *(void *)&a1[v18] = v20;
            if (v21 < 0)
            {
              BOOL v22 = v17++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_130;
          }
        case 2u:
          if ((v8 & 7) != 0) {
            goto LABEL_133;
          }
          unsigned int v28 = 0;
          while (1)
          {
            uint64_t v29 = *v2;
            uint64_t v30 = *(void *)&a1[v29];
            unint64_t v31 = v30 + 1;
            if (v30 == -1 || v31 > *(void *)&a1[*v3]) {
              goto LABEL_129;
            }
            int v32 = *(char *)(*(void *)&a1[*v5] + v30);
            *(void *)&a1[v29] = v31;
            if (v32 < 0)
            {
              BOOL v22 = v28++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_130;
          }
        case 3u:
          if ((v8 & 7) != 0) {
            goto LABEL_133;
          }
          unsigned int v33 = 0;
          while (1)
          {
            uint64_t v34 = *v2;
            uint64_t v35 = *(void *)&a1[v34];
            unint64_t v36 = v35 + 1;
            if (v35 == -1 || v36 > *(void *)&a1[*v3]) {
              goto LABEL_129;
            }
            int v37 = *(char *)(*(void *)&a1[*v5] + v35);
            *(void *)&a1[v34] = v36;
            if (v37 < 0)
            {
              BOOL v22 = v33++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_130;
          }
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDComponentIsValid(a1)) {
            goto LABEL_133;
          }
          goto LABEL_117;
        case 5u:
          if ((v8 & 7) != 0) {
            goto LABEL_133;
          }
          unsigned int v38 = 0;
          while (1)
          {
            uint64_t v39 = *v2;
            uint64_t v40 = *(void *)&a1[v39];
            unint64_t v41 = v40 + 1;
            if (v40 == -1 || v41 > *(void *)&a1[*v3]) {
              goto LABEL_129;
            }
            int v42 = *(char *)(*(void *)&a1[*v5] + v40);
            *(void *)&a1[v39] = v41;
            if (v42 < 0)
            {
              BOOL v22 = v38++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_130;
          }
        case 6u:
          if ((v8 & 7) != 0) {
            goto LABEL_133;
          }
          unsigned int v43 = 0;
          while (1)
          {
            uint64_t v44 = *v2;
            uint64_t v45 = *(void *)&a1[v44];
            unint64_t v46 = v45 + 1;
            if (v45 == -1 || v46 > *(void *)&a1[*v3]) {
              goto LABEL_129;
            }
            int v47 = *(char *)(*(void *)&a1[*v5] + v45);
            *(void *)&a1[v44] = v46;
            if (v47 < 0)
            {
              BOOL v22 = v43++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_130;
          }
        case 7u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1)) {
            goto LABEL_133;
          }
          goto LABEL_117;
        case 8u:
          if ((v8 & 7) != 0) {
            goto LABEL_133;
          }
          unsigned int v48 = 0;
          while (1)
          {
            uint64_t v49 = *v2;
            uint64_t v50 = *(void *)&a1[v49];
            unint64_t v51 = v50 + 1;
            if (v50 == -1 || v51 > *(void *)&a1[*v3]) {
              goto LABEL_129;
            }
            int v52 = *(char *)(*(void *)&a1[*v5] + v50);
            *(void *)&a1[v49] = v51;
            if (v52 < 0)
            {
              BOOL v22 = v48++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_130;
          }
        case 9u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlacecardLayoutDataIsValid(a1)) {
            goto LABEL_133;
          }
LABEL_117:
          PBReaderRecallMark();
          continue;
        case 0xAu:
          if ((v8 & 7) != 0) {
            goto LABEL_133;
          }
          unsigned int v53 = 0;
          while (1)
          {
            uint64_t v54 = *v2;
            uint64_t v55 = *(void *)&a1[v54];
            unint64_t v56 = v55 + 1;
            if (v55 == -1 || v56 > *(void *)&a1[*v3]) {
              goto LABEL_129;
            }
            int v57 = *(char *)(*(void *)&a1[*v5] + v55);
            *(void *)&a1[v54] = v56;
            if (v57 < 0)
            {
              BOOL v22 = v53++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_130;
          }
        case 0xBu:
          if ((v8 & 7) != 0) {
            goto LABEL_133;
          }
          unsigned int v58 = 0;
          while (1)
          {
            uint64_t v59 = *v2;
            uint64_t v60 = *(void *)&a1[v59];
            unint64_t v61 = v60 + 1;
            if (v60 == -1 || v61 > *(void *)&a1[*v3]) {
              goto LABEL_129;
            }
            int v62 = *(char *)(*(void *)&a1[*v5] + v60);
            *(void *)&a1[v59] = v61;
            if (v62 < 0)
            {
              BOOL v22 = v58++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_130;
          }
        case 0xCu:
          if (v15 != 2) {
            goto LABEL_133;
          }
LABEL_119:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_133:
          PBReaderRecallMark();
          return 0;
        case 0xDu:
          if ((v8 & 7) != 0) {
            goto LABEL_133;
          }
          unsigned int v63 = 0;
          while (1)
          {
            uint64_t v64 = *v2;
            uint64_t v65 = *(void *)&a1[v64];
            unint64_t v66 = v65 + 1;
            if (v65 == -1 || v66 > *(void *)&a1[*v3]) {
              goto LABEL_129;
            }
            int v67 = *(char *)(*(void *)&a1[*v5] + v65);
            *(void *)&a1[v64] = v66;
            if (v67 < 0)
            {
              BOOL v22 = v63++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_130;
          }
        default:
          switch((v8 >> 3))
          {
            case 0xC8u:
              if ((v8 & 7) != 0) {
                goto LABEL_133;
              }
              unsigned int v23 = 0;
              while (1)
              {
                uint64_t v24 = *v2;
                uint64_t v25 = *(void *)&a1[v24];
                unint64_t v26 = v25 + 1;
                if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
                  goto LABEL_129;
                }
                int v27 = *(char *)(*(void *)&a1[*v5] + v25);
                *(void *)&a1[v24] = v26;
                if (v27 < 0)
                {
                  BOOL v22 = v23++ > 8;
                  if (!v22) {
                    continue;
                  }
                }
                goto LABEL_130;
              }
            case 0xC9u:
              if (v15 == 2 && PBReaderPlaceMark() && GEOMapItemInitialRequestDataIsValid(a1)) {
                goto LABEL_117;
              }
              goto LABEL_133;
            case 0xCAu:
              if (v15 == 2) {
                goto LABEL_119;
              }
              goto LABEL_133;
            case 0xCBu:
              if ((v8 & 7) != 0) {
                goto LABEL_133;
              }
              unsigned int v68 = 0;
              break;
            default:
              goto LABEL_119;
          }
          break;
      }
      while (1)
      {
        uint64_t v69 = *v2;
        uint64_t v70 = *(void *)&a1[v69];
        unint64_t v71 = v70 + 1;
        if (v70 == -1 || v71 > *(void *)&a1[*v3]) {
          break;
        }
        int v72 = *(char *)(*(void *)&a1[*v5] + v70);
        *(void *)&a1[v69] = v71;
        if (v72 < 0)
        {
          BOOL v22 = v68++ > 8;
          if (!v22) {
            continue;
          }
        }
        goto LABEL_130;
      }
LABEL_129:
      a1[*v4] = 1;
LABEL_130:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v73 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v73;
}

BOOL GEOPDComponentIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  long long v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
LABEL_151:
    BOOL v84 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v84;
  }
  uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (a1[*v4]) {
      goto LABEL_151;
    }
    char v6 = 0;
    unsigned int v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *v2;
      uint64_t v10 = *(void *)&a1[v9];
      unint64_t v11 = v10 + 1;
      if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
        break;
      }
      char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
      *(void *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0) {
        goto LABEL_12;
      }
      v6 += 7;
      BOOL v13 = v7++ >= 9;
      if (v13)
      {
        unint64_t v8 = 0;
        uint64_t v14 = *v4;
        int v15 = a1[v14];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    uint64_t v14 = *v4;
    int v15 = a1[v14];
    if (a1[v14]) {
      unint64_t v8 = 0;
    }
LABEL_14:
    int v16 = v8 & 7;
    if (v15 || v16 == 4) {
      goto LABEL_151;
    }
    switch((v8 >> 3))
    {
      case 1u:
        if ((v8 & 7) != 0) {
          goto LABEL_154;
        }
        unsigned int v21 = 0;
        while (1)
        {
          uint64_t v22 = *v2;
          uint64_t v23 = *(void *)&a1[v22];
          unint64_t v24 = v23 + 1;
          if (v23 == -1 || v24 > *(void *)&a1[*v3]) {
            goto LABEL_146;
          }
          int v25 = *(char *)(*(void *)&a1[*v5] + v23);
          *(void *)&a1[v22] = v24;
          if (v25 < 0)
          {
            BOOL v26 = v21++ > 8;
            if (!v26) {
              continue;
            }
          }
          goto LABEL_150;
        }
      case 2u:
        if ((v8 & 7) != 0) {
          goto LABEL_154;
        }
        unsigned int v27 = 0;
        while (1)
        {
          uint64_t v28 = *v2;
          uint64_t v29 = *(void *)&a1[v28];
          unint64_t v30 = v29 + 1;
          if (v29 == -1 || v30 > *(void *)&a1[*v3]) {
            goto LABEL_146;
          }
          int v31 = *(char *)(*(void *)&a1[*v5] + v29);
          *(void *)&a1[v28] = v30;
          if (v31 < 0)
          {
            BOOL v26 = v27++ > 8;
            if (!v26) {
              continue;
            }
          }
          goto LABEL_150;
        }
      case 3u:
        goto LABEL_74;
      case 4u:
        if ((v8 & 7) != 0) {
          goto LABEL_154;
        }
        unsigned int v32 = 0;
        while (1)
        {
          uint64_t v33 = *v2;
          uint64_t v34 = *(void *)&a1[v33];
          unint64_t v35 = v34 + 1;
          if (v34 == -1 || v35 > *(void *)&a1[*v3]) {
            goto LABEL_146;
          }
          int v36 = *(char *)(*(void *)&a1[*v5] + v34);
          *(void *)&a1[v33] = v35;
          if (v36 < 0)
          {
            BOOL v26 = v32++ > 8;
            if (!v26) {
              continue;
            }
          }
          goto LABEL_150;
        }
      case 5u:
        if ((v8 & 7) != 0) {
          goto LABEL_154;
        }
        unsigned int v37 = 0;
        while (1)
        {
          uint64_t v38 = *v2;
          uint64_t v39 = *(void *)&a1[v38];
          unint64_t v40 = v39 + 1;
          if (v39 == -1 || v40 > *(void *)&a1[*v3]) {
            goto LABEL_146;
          }
          int v41 = *(char *)(*(void *)&a1[*v5] + v39);
          *(void *)&a1[v38] = v40;
          if (v41 < 0)
          {
            BOOL v26 = v37++ > 8;
            if (!v26) {
              continue;
            }
          }
          goto LABEL_150;
        }
      case 6u:
        if ((v8 & 7) != 0) {
          goto LABEL_154;
        }
        unsigned int v42 = 0;
        while (1)
        {
          uint64_t v43 = *v2;
          uint64_t v44 = *(void *)&a1[v43];
          unint64_t v45 = v44 + 1;
          if (v44 == -1 || v45 > *(void *)&a1[*v3]) {
            goto LABEL_146;
          }
          int v46 = *(char *)(*(void *)&a1[*v5] + v44);
          *(void *)&a1[v43] = v45;
          if (v46 < 0)
          {
            BOOL v26 = v42++ > 8;
            if (!v26) {
              continue;
            }
          }
          goto LABEL_150;
        }
      case 7u:
      case 0xEu:
        if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDAttributionIsValid(a1)) {
          goto LABEL_154;
        }
        goto LABEL_149;
      case 8u:
        if (v16 == 2 && PBReaderPlaceMark() && GEOPDComponentValueIsValid(a1)) {
          goto LABEL_149;
        }
        goto LABEL_154;
      case 9u:
        if (v16 == 2) {
          goto LABEL_74;
        }
        goto LABEL_154;
      case 0xAu:
        if ((v8 & 7) != 0) {
          goto LABEL_154;
        }
        unsigned int v47 = 0;
        while (1)
        {
          uint64_t v48 = *v2;
          uint64_t v49 = *(void *)&a1[v48];
          unint64_t v50 = v49 + 1;
          if (v49 == -1 || v50 > *(void *)&a1[*v3]) {
            goto LABEL_146;
          }
          int v51 = *(char *)(*(void *)&a1[*v5] + v49);
          *(void *)&a1[v48] = v50;
          if (v51 < 0)
          {
            BOOL v26 = v47++ > 8;
            if (!v26) {
              continue;
            }
          }
          goto LABEL_150;
        }
      case 0xBu:
        if (v16 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_154;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
LABEL_87:
        if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
          goto LABEL_148;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        unint64_t v54 = 0;
        while (1)
        {
          uint64_t v55 = *v2;
          uint64_t v56 = *(void *)&a1[v55];
          unint64_t v57 = v56 + 1;
          if (v56 == -1 || v57 > *(void *)&a1[*v3]) {
            break;
          }
          char v58 = *(unsigned char *)(*(void *)&a1[*v5] + v56);
          *(void *)&a1[v55] = v57;
          v54 |= (unint64_t)(v58 & 0x7F) << v52;
          if ((v58 & 0x80) == 0) {
            goto LABEL_97;
          }
          v52 += 7;
          BOOL v13 = v53++ >= 9;
          if (v13)
          {
            unint64_t v54 = 0;
            int v59 = a1[*v4];
            goto LABEL_99;
          }
        }
        a1[*v4] = 1;
LABEL_97:
        int v59 = a1[*v4];
        if (a1[*v4]) {
          unint64_t v54 = 0;
        }
LABEL_99:
        int v60 = v54 & 7;
        if (v59 || v60 == 4)
        {
LABEL_148:
          int v83 = a1[*v4];
          PBReaderRecallMark();
          if (v83) {
            goto LABEL_154;
          }
LABEL_149:
          PBReaderRecallMark();
LABEL_150:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_151;
          }
          continue;
        }
        unint64_t v62 = v54 >> 3;
        if ((v54 >> 3) == 3)
        {
          if (v60 != 2) {
            goto LABEL_153;
          }
          goto LABEL_117;
        }
        if (v62 == 2)
        {
          if (v60 != 2) {
            goto LABEL_153;
          }
LABEL_117:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_153;
          }
          goto LABEL_87;
        }
        if (v62 != 1)
        {
          if (!PBReaderSkipValueWithTag()) {
            goto LABEL_153;
          }
          goto LABEL_87;
        }
        if ((v54 & 7) == 0)
        {
          unsigned int v63 = 0;
          do
          {
            uint64_t v64 = *v2;
            uint64_t v65 = *(void *)&a1[v64];
            unint64_t v66 = v65 + 1;
            if (v65 == -1 || v66 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
              goto LABEL_87;
            }
            int v67 = *(char *)(*(void *)&a1[*v5] + v65);
            *(void *)&a1[v64] = v66;
            if ((v67 & 0x80000000) == 0) {
              break;
            }
            BOOL v26 = v63++ > 8;
          }
          while (!v26);
          goto LABEL_87;
        }
LABEL_153:
        PBReaderRecallMark();
LABEL_154:
        PBReaderRecallMark();
        return 0;
      case 0xCu:
        if ((v8 & 7) != 0) {
          goto LABEL_154;
        }
        unsigned int v68 = 0;
        while (1)
        {
          uint64_t v69 = *v2;
          uint64_t v70 = *(void *)&a1[v69];
          unint64_t v71 = v70 + 1;
          if (v70 == -1 || v71 > *(void *)&a1[*v3]) {
            goto LABEL_146;
          }
          int v72 = *(char *)(*(void *)&a1[*v5] + v70);
          *(void *)&a1[v69] = v71;
          if (v72 < 0)
          {
            BOOL v26 = v68++ > 8;
            if (!v26) {
              continue;
            }
          }
          goto LABEL_150;
        }
      case 0xDu:
        if ((v8 & 7) != 0) {
          goto LABEL_154;
        }
        unsigned int v73 = 0;
        while (1)
        {
          uint64_t v74 = *v2;
          uint64_t v75 = *(void *)&a1[v74];
          unint64_t v76 = v75 + 1;
          if (v75 == -1 || v76 > *(void *)&a1[*v3]) {
            goto LABEL_146;
          }
          int v77 = *(char *)(*(void *)&a1[*v5] + v75);
          *(void *)&a1[v74] = v76;
          if (v77 < 0)
          {
            BOOL v26 = v73++ > 8;
            if (!v26) {
              continue;
            }
          }
          goto LABEL_150;
        }
      case 0xFu:
        if ((v8 & 7) != 0) {
          goto LABEL_154;
        }
        unsigned int v78 = 0;
        while (1)
        {
          uint64_t v79 = *v2;
          uint64_t v80 = *(void *)&a1[v79];
          unint64_t v81 = v80 + 1;
          if (v80 == -1 || v81 > *(void *)&a1[*v3]) {
            break;
          }
          int v82 = *(char *)(*(void *)&a1[*v5] + v80);
          *(void *)&a1[v79] = v81;
          if (v82 < 0)
          {
            BOOL v26 = v78++ > 8;
            if (!v26) {
              continue;
            }
          }
          goto LABEL_150;
        }
LABEL_146:
        uint64_t v14 = *v4;
        goto LABEL_147;
      default:
        if ((v8 >> 3) == 2000)
        {
          if (v16 != 1) {
            goto LABEL_154;
          }
          uint64_t v18 = *v2;
          unint64_t v19 = *(void *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7 || (unint64_t v20 = v19 + 8, v20 > *(void *)&a1[*v3])) {
LABEL_147:
          }
            a1[v14] = 1;
          else {
            *(void *)&a1[v18] = v20;
          }
        }
        else
        {
LABEL_74:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_154;
          }
        }
        goto LABEL_150;
    }
  }
}

BOOL GEOPDComponentValueIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  long long v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
LABEL_3794:
    BOOL v1517 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v1517;
  }
  uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
  while (1)
  {
    if (a1[*v4]) {
      goto LABEL_3794;
    }
    char v6 = 0;
    unsigned int v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *v2;
      uint64_t v10 = *(void *)&a1[v9];
      unint64_t v11 = v10 + 1;
      if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
        break;
      }
      char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
      *(void *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0) {
        goto LABEL_12;
      }
      v6 += 7;
      BOOL v13 = v7++ >= 9;
      if (v13)
      {
        unint64_t v8 = 0;
        int v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    int v14 = a1[*v4];
    if (a1[*v4]) {
      unint64_t v8 = 0;
    }
LABEL_14:
    int v15 = v8 & 7;
    if (v14 || v15 == 4) {
      goto LABEL_3794;
    }
    switch((v8 >> 3))
    {
      case 1u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDEntityIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 2u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceInfoIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 3u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3776;
            }
            char v17 = 0;
            unsigned int v18 = 0;
            unint64_t v19 = 0;
            while (1)
            {
              uint64_t v20 = *v2;
              uint64_t v21 = *(void *)&a1[v20];
              unint64_t v22 = v21 + 1;
              if (v21 == -1 || v22 > *(void *)&a1[*v3]) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)&a1[*v5] + v21);
              *(void *)&a1[v20] = v22;
              v19 |= (unint64_t)(v23 & 0x7F) << v17;
              if ((v23 & 0x80) == 0) {
                goto LABEL_48;
              }
              v17 += 7;
              BOOL v13 = v18++ >= 9;
              if (v13)
              {
                unint64_t v19 = 0;
                int v24 = a1[*v4];
                goto LABEL_50;
              }
            }
            a1[*v4] = 1;
LABEL_48:
            int v24 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v19 = 0;
            }
LABEL_50:
            int v25 = v19 & 7;
            if (v24 || v25 == 4) {
              goto LABEL_3776;
            }
            if ((v19 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
            break;
          }
          if (v25 == 2 && PBReaderPlaceMark() && GEORoadAccessPointIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 4u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDBoundsIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 5u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_68:
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3366;
            }
            char v27 = 0;
            unsigned int v28 = 0;
            unint64_t v29 = 0;
            while (2)
            {
              uint64_t v30 = *v2;
              uint64_t v31 = *(void *)&a1[v30];
              unint64_t v32 = v31 + 1;
              if (v31 == -1 || v32 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v33 = *(unsigned char *)(*(void *)&a1[*v5] + v31);
                *(void *)&a1[v30] = v32;
                v29 |= (unint64_t)(v33 & 0x7F) << v27;
                if (v33 < 0)
                {
                  v27 += 7;
                  BOOL v13 = v28++ >= 9;
                  if (v13)
                  {
                    unint64_t v29 = 0;
                    int v34 = a1[*v4];
                    goto LABEL_80;
                  }
                  continue;
                }
              }
              break;
            }
            int v34 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v29 = 0;
            }
LABEL_80:
            int v35 = v29 & 7;
            if (v34) {
              BOOL v36 = 1;
            }
            else {
              BOOL v36 = v35 == 4;
            }
            if (v36) {
              goto LABEL_3366;
            }
            switch((v29 >> 3))
            {
              case 1u:
                if (v35 != 2 || !PBReaderPlaceMark() || !GEOPDLocalizedAddressIsValid(a1)) {
                  goto LABEL_3811;
                }
                goto LABEL_133;
              case 2u:
                if (v35 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1)) {
                  goto LABEL_3811;
                }
                goto LABEL_133;
              case 3u:
                if (v35 != 2 || !PBReaderPlaceMark()) {
                  goto LABEL_3811;
                }
                [a1 position];
                [a1 length];
                break;
              case 4u:
                if ((v29 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v47 = 0;
                do
                {
                  uint64_t v48 = *v2;
                  uint64_t v49 = *(void *)&a1[v48];
                  unint64_t v50 = v49 + 1;
                  if (v49 == -1 || v50 > *(void *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                    goto LABEL_68;
                  }
                  int v51 = *(char *)(*(void *)&a1[*v5] + v49);
                  *(void *)&a1[v48] = v50;
                  if ((v51 & 0x80000000) == 0) {
                    break;
                  }
                  BOOL v52 = v47++ > 8;
                }
                while (!v52);
                continue;
              default:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
            }
            break;
          }
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
          {
            char v37 = 0;
            unsigned int v38 = 0;
            unint64_t v39 = 0;
            while (1)
            {
              uint64_t v40 = *v2;
              uint64_t v41 = *(void *)&a1[v40];
              unint64_t v42 = v41 + 1;
              if (v41 == -1 || v42 > *(void *)&a1[*v3]) {
                break;
              }
              char v43 = *(unsigned char *)(*(void *)&a1[*v5] + v41);
              *(void *)&a1[v40] = v42;
              v39 |= (unint64_t)(v43 & 0x7F) << v37;
              if ((v43 & 0x80) == 0) {
                goto LABEL_108;
              }
              v37 += 7;
              BOOL v13 = v38++ >= 9;
              if (v13)
              {
                unint64_t v39 = 0;
                int v44 = a1[*v4];
                goto LABEL_110;
              }
            }
            a1[*v4] = 1;
LABEL_108:
            int v44 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v39 = 0;
            }
LABEL_110:
            int v45 = v39 & 7;
            if (v44 || v45 == 4) {
              break;
            }
            if ((v39 >> 3) == 3)
            {
              if (v45 == 2 && PBReaderPlaceMark() && GEOStructuredAddressIsValid(a1))
              {
                PBReaderRecallMark();
                continue;
              }
              goto LABEL_3796;
            }
            if ((v39 >> 3) == 1 && v45 != 2 || (PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_3796;
            }
          }
          int v53 = a1[*v4];
          PBReaderRecallMark();
          if (!v53)
          {
LABEL_133:
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 6u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDRatingIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 7u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3366;
            }
            char v54 = 0;
            unsigned int v55 = 0;
            unint64_t v56 = 0;
            while (2)
            {
              uint64_t v57 = *v2;
              uint64_t v58 = *(void *)&a1[v57];
              unint64_t v59 = v58 + 1;
              if (v58 == -1 || v59 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v60 = *(unsigned char *)(*(void *)&a1[*v5] + v58);
                *(void *)&a1[v57] = v59;
                v56 |= (unint64_t)(v60 & 0x7F) << v54;
                if (v60 < 0)
                {
                  v54 += 7;
                  BOOL v13 = v55++ >= 9;
                  if (v13)
                  {
                    unint64_t v56 = 0;
                    uint64_t v61 = *v4;
                    int v62 = a1[v61];
                    goto LABEL_154;
                  }
                  continue;
                }
              }
              break;
            }
            uint64_t v61 = *v4;
            int v62 = a1[v61];
            if (a1[v61]) {
              unint64_t v56 = 0;
            }
LABEL_154:
            int v63 = v56 & 7;
            if (v62) {
              BOOL v64 = 1;
            }
            else {
              BOOL v64 = v63 == 4;
            }
            if (v64) {
              goto LABEL_3366;
            }
            switch((v56 >> 3))
            {
              case 1u:
                if (v63 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1)) {
                  goto LABEL_3811;
                }
                goto LABEL_204;
              case 2u:
                if (v63 != 1) {
                  goto LABEL_3811;
                }
                uint64_t v65 = *v2;
                unint64_t v66 = *(void *)&a1[v65];
                if (v66 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t v67 = v66 + 8, v67 <= *(void *)&a1[*v3])) {
                  *(void *)&a1[v65] = v67;
                }
                else {
                  a1[v61] = 1;
                }
                continue;
              case 4u:
                if (v63 != 2 || !PBReaderPlaceMark()) {
                  goto LABEL_3811;
                }
                [a1 position];
                [a1 length];
                break;
              case 5u:
                if (v63 == 2) {
                  goto LABEL_197;
                }
                goto LABEL_3811;
              case 6u:
                if (v63 == 2 && PBReaderPlaceMark() && GEOPDRatingIsValid(a1)) {
                  goto LABEL_204;
                }
                goto LABEL_3811;
              default:
LABEL_197:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
            }
            break;
          }
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
          {
            char v68 = 0;
            unsigned int v69 = 0;
            unint64_t v70 = 0;
            while (1)
            {
              uint64_t v71 = *v2;
              uint64_t v72 = *(void *)&a1[v71];
              unint64_t v73 = v72 + 1;
              if (v72 == -1 || v73 > *(void *)&a1[*v3]) {
                break;
              }
              char v74 = *(unsigned char *)(*(void *)&a1[*v5] + v72);
              *(void *)&a1[v71] = v73;
              v70 |= (unint64_t)(v74 & 0x7F) << v68;
              if ((v74 & 0x80) == 0) {
                goto LABEL_180;
              }
              v68 += 7;
              BOOL v13 = v69++ >= 9;
              if (v13)
              {
                unint64_t v70 = 0;
                int v75 = a1[*v4];
                goto LABEL_182;
              }
            }
            a1[*v4] = 1;
LABEL_180:
            int v75 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v70 = 0;
            }
LABEL_182:
            int v76 = v70 & 7;
            if (v75 || v76 == 4) {
              break;
            }
            if ((v70 >> 3) == 2)
            {
              if (v76 != 2 || !PBReaderPlaceMark() || !GEOPDPhotoIsValid(a1)) {
                goto LABEL_3796;
              }
              PBReaderRecallMark();
            }
            else if ((v70 >> 3) == 1 && v76 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
            {
              goto LABEL_3796;
            }
          }
          int v78 = a1[*v4];
          PBReaderRecallMark();
          if (!v78)
          {
LABEL_204:
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 8u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPhotoIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 9u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDHoursIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0xAu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_217:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_3366;
          }
          char v79 = 0;
          unsigned int v80 = 0;
          unint64_t v81 = 0;
          while (2)
          {
            uint64_t v82 = *v2;
            uint64_t v83 = *(void *)&a1[v82];
            unint64_t v84 = v83 + 1;
            if (v83 == -1 || v84 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v85 = *(unsigned char *)(*(void *)&a1[*v5] + v83);
              *(void *)&a1[v82] = v84;
              v81 |= (unint64_t)(v85 & 0x7F) << v79;
              if (v85 < 0)
              {
                v79 += 7;
                BOOL v13 = v80++ >= 9;
                if (v13)
                {
                  unint64_t v81 = 0;
                  int v86 = a1[*v4];
                  goto LABEL_229;
                }
                continue;
              }
            }
            break;
          }
          int v86 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v81 = 0;
          }
LABEL_229:
          int v87 = v81 & 7;
          if (v86) {
            BOOL v88 = 1;
          }
          else {
            BOOL v88 = v87 == 4;
          }
          if (v88) {
            goto LABEL_3366;
          }
          switch((v81 >> 3))
          {
            case 1u:
              if (v87 != 2 || !PBReaderPlaceMark() || !GEOPBTransitLineIsValid(a1)) {
                goto LABEL_3811;
              }
              goto LABEL_351;
            case 2u:
              if (v87 != 2 || !PBReaderPlaceMark() || !GEOPBTransitSystemIsValid(a1)) {
                goto LABEL_3811;
              }
              goto LABEL_351;
            case 9u:
              if (v87 != 2 || !PBReaderPlaceMark() || !GEOPDTransitLabelIsValid(a1)) {
                goto LABEL_3811;
              }
              goto LABEL_351;
            case 0xAu:
              if (v87 != 2 || !PBReaderPlaceMark()) {
                goto LABEL_3811;
              }
              [a1 position];
              [a1 length];
LABEL_249:
              while (2)
              {
                if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                  goto LABEL_350;
                }
                char v89 = 0;
                unsigned int v90 = 0;
                unint64_t v91 = 0;
                while (2)
                {
                  uint64_t v92 = *v2;
                  uint64_t v93 = *(void *)&a1[v92];
                  unint64_t v94 = v93 + 1;
                  if (v93 == -1 || v94 > *(void *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                  }
                  else
                  {
                    char v95 = *(unsigned char *)(*(void *)&a1[*v5] + v93);
                    *(void *)&a1[v92] = v94;
                    v91 |= (unint64_t)(v95 & 0x7F) << v89;
                    if (v95 < 0)
                    {
                      v89 += 7;
                      BOOL v13 = v90++ >= 9;
                      if (v13)
                      {
                        unint64_t v91 = 0;
                        int v96 = a1[*v4];
                        goto LABEL_261;
                      }
                      continue;
                    }
                  }
                  break;
                }
                int v96 = a1[*v4];
                if (a1[*v4]) {
                  unint64_t v91 = 0;
                }
LABEL_261:
                int v97 = v91 & 7;
                if (v96) {
                  BOOL v98 = 1;
                }
                else {
                  BOOL v98 = v97 == 4;
                }
                if (!v98)
                {
                  switch((v91 >> 3))
                  {
                    case 1u:
                      if ((v91 & 7) != 0) {
                        goto LABEL_3796;
                      }
                      unsigned int v99 = 0;
                      break;
                    case 3u:
                      if (v97 != 2 || !PBReaderPlaceMark() || !GEOPDTransitLabelIsValid(a1)) {
                        goto LABEL_3796;
                      }
                      goto LABEL_284;
                    case 4u:
                      if (v97 == 2) {
                        goto LABEL_279;
                      }
                      goto LABEL_3796;
                    case 5u:
                      if (v97 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1)) {
                        goto LABEL_3796;
                      }
LABEL_284:
                      PBReaderRecallMark();
                      continue;
                    default:
LABEL_279:
                      if ((PBReaderSkipValueWithTag() & 1) == 0) {
                        goto LABEL_3796;
                      }
                      continue;
                  }
                  do
                  {
                    uint64_t v100 = *v2;
                    uint64_t v101 = *(void *)&a1[v100];
                    unint64_t v102 = v101 + 1;
                    if (v101 == -1 || v102 > *(void *)&a1[*v3])
                    {
                      a1[*v4] = 1;
                      goto LABEL_249;
                    }
                    int v103 = *(char *)(*(void *)&a1[*v5] + v101);
                    *(void *)&a1[v100] = v102;
                    if ((v103 & 0x80000000) == 0) {
                      break;
                    }
                    BOOL v52 = v99++ > 8;
                  }
                  while (!v52);
                  continue;
                }
                goto LABEL_350;
              }
            case 0xBu:
              if (v87 == 2) {
                goto LABEL_295;
              }
              goto LABEL_3811;
            case 0xCu:
              if (v87 == 2 && PBReaderPlaceMark() && GEOPDMapsIdentifierIsValid(a1)) {
                goto LABEL_351;
              }
              goto LABEL_3811;
            case 0xDu:
              if (v87 == 2) {
                goto LABEL_295;
              }
              goto LABEL_3811;
            case 0xEu:
              if (v87 == 2) {
                goto LABEL_295;
              }
              goto LABEL_3811;
            case 0xFu:
              if ((v81 & 7) != 0) {
                goto LABEL_3811;
              }
              unsigned int v104 = 0;
              do
              {
                uint64_t v105 = *v2;
                uint64_t v106 = *(void *)&a1[v105];
                unint64_t v107 = v106 + 1;
                if (v106 == -1 || v107 > *(void *)&a1[*v3])
                {
                  a1[*v4] = 1;
                  goto LABEL_217;
                }
                int v108 = *(char *)(*(void *)&a1[*v5] + v106);
                *(void *)&a1[v105] = v107;
                if ((v108 & 0x80000000) == 0) {
                  break;
                }
                BOOL v52 = v104++ > 8;
              }
              while (!v52);
              continue;
            case 0x10u:
              if (v87 != 2 || !PBReaderPlaceMark()) {
                goto LABEL_3811;
              }
              [a1 position];
              [a1 length];
              break;
            default:
LABEL_295:
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
          }
          break;
        }
        while (1)
        {
LABEL_308:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_350;
          }
          char v109 = 0;
          unsigned int v110 = 0;
          unint64_t v111 = 0;
          while (1)
          {
            uint64_t v112 = *v2;
            uint64_t v113 = *(void *)&a1[v112];
            unint64_t v114 = v113 + 1;
            if (v113 == -1 || v114 > *(void *)&a1[*v3]) {
              break;
            }
            char v115 = *(unsigned char *)(*(void *)&a1[*v5] + v113);
            *(void *)&a1[v112] = v114;
            v111 |= (unint64_t)(v115 & 0x7F) << v109;
            if ((v115 & 0x80) == 0) {
              goto LABEL_318;
            }
            v109 += 7;
            BOOL v13 = v110++ >= 9;
            if (v13)
            {
              unint64_t v111 = 0;
              int v116 = a1[*v4];
              goto LABEL_320;
            }
          }
          a1[*v4] = 1;
LABEL_318:
          int v116 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v111 = 0;
          }
LABEL_320:
          int v117 = v111 & 7;
          if (v116 || v117 == 4)
          {
LABEL_350:
            int v130 = a1[*v4];
            PBReaderRecallMark();
            if (!v130)
            {
LABEL_351:
              PBReaderRecallMark();
              goto LABEL_217;
            }
            goto LABEL_3811;
          }
          unint64_t v119 = v111 >> 3;
          if ((v111 >> 3) == 4)
          {
            if (v117 == 2 && PBReaderPlaceMark() && GEOTimezoneIsValid(a1))
            {
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_3796;
          }
          if (v119 == 3) {
            break;
          }
          if (v119 == 1)
          {
            if ((v111 & 7) == 0)
            {
              unsigned int v120 = 0;
              while (1)
              {
                uint64_t v121 = *v2;
                uint64_t v122 = *(void *)&a1[v121];
                unint64_t v123 = v122 + 1;
                if (v122 == -1 || v123 > *(void *)&a1[*v3]) {
                  goto LABEL_347;
                }
                int v124 = *(char *)(*(void *)&a1[*v5] + v122);
                *(void *)&a1[v121] = v123;
                if (v124 < 0)
                {
                  BOOL v52 = v120++ > 8;
                  if (!v52) {
                    continue;
                  }
                }
                goto LABEL_308;
              }
            }
            goto LABEL_3796;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_3796;
          }
        }
        if ((v111 & 7) == 0)
        {
          unsigned int v125 = 0;
          while (1)
          {
            uint64_t v126 = *v2;
            uint64_t v127 = *(void *)&a1[v126];
            unint64_t v128 = v127 + 1;
            if (v127 == -1 || v128 > *(void *)&a1[*v3]) {
              break;
            }
            int v129 = *(char *)(*(void *)&a1[*v5] + v127);
            *(void *)&a1[v126] = v128;
            if (v129 < 0)
            {
              BOOL v52 = v125++ > 8;
              if (!v52) {
                continue;
              }
            }
            goto LABEL_308;
          }
LABEL_347:
          a1[*v4] = 1;
          goto LABEL_308;
        }
        goto LABEL_3796;
      case 0xBu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_356:
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3366;
            }
            char v131 = 0;
            unsigned int v132 = 0;
            unint64_t v133 = 0;
            while (2)
            {
              uint64_t v134 = *v2;
              uint64_t v135 = *(void *)&a1[v134];
              unint64_t v136 = v135 + 1;
              if (v135 == -1 || v136 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v137 = *(unsigned char *)(*(void *)&a1[*v5] + v135);
                *(void *)&a1[v134] = v136;
                v133 |= (unint64_t)(v137 & 0x7F) << v131;
                if (v137 < 0)
                {
                  v131 += 7;
                  BOOL v13 = v132++ >= 9;
                  if (v13)
                  {
                    unint64_t v133 = 0;
                    int v138 = a1[*v4];
                    goto LABEL_368;
                  }
                  continue;
                }
              }
              break;
            }
            int v138 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v133 = 0;
            }
LABEL_368:
            int v139 = v133 & 7;
            if (v138) {
              BOOL v140 = 1;
            }
            else {
              BOOL v140 = v139 == 4;
            }
            if (v140) {
              goto LABEL_3366;
            }
            switch((v133 >> 3))
            {
              case 1u:
                if (v139 != 2 || !PBReaderPlaceMark() || !GEOPDDepartureSequenceIsValid(a1)) {
                  goto LABEL_3811;
                }
                goto LABEL_386;
              case 2u:
              case 3u:
                if (v139 != 2 || !PBReaderPlaceMark() || !GEOPDDeparturePredicateIsValid(a1)) {
                  goto LABEL_3811;
                }
                goto LABEL_386;
              case 4u:
                if (v139 == 2 && PBReaderPlaceMark() && GEOPDTimeRangeIsValid(a1)) {
                  goto LABEL_386;
                }
                goto LABEL_3811;
              case 5u:
                if ((v133 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v141 = 0;
                do
                {
                  uint64_t v142 = *v2;
                  uint64_t v143 = *(void *)&a1[v142];
                  unint64_t v144 = v143 + 1;
                  if (v143 == -1 || v144 > *(void *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                    goto LABEL_356;
                  }
                  int v145 = *(char *)(*(void *)&a1[*v5] + v143);
                  *(void *)&a1[v142] = v144;
                  if ((v145 & 0x80000000) == 0) {
                    break;
                  }
                  BOOL v52 = v141++ > 8;
                }
                while (!v52);
                continue;
              case 6u:
                if (v139 != 2 || !PBReaderPlaceMark()) {
                  goto LABEL_3811;
                }
                [a1 position];
                [a1 length];
                break;
              default:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
            }
            break;
          }
LABEL_398:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_448;
          }
          char v146 = 0;
          unsigned int v147 = 0;
          unint64_t v148 = 0;
          while (1)
          {
            uint64_t v149 = *v2;
            uint64_t v150 = *(void *)&a1[v149];
            unint64_t v151 = v150 + 1;
            if (v150 == -1 || v151 > *(void *)&a1[*v3]) {
              break;
            }
            char v152 = *(unsigned char *)(*(void *)&a1[*v5] + v150);
            *(void *)&a1[v149] = v151;
            v148 |= (unint64_t)(v152 & 0x7F) << v146;
            if ((v152 & 0x80) == 0) {
              goto LABEL_408;
            }
            v146 += 7;
            BOOL v13 = v147++ >= 9;
            if (v13)
            {
              unint64_t v148 = 0;
              int v153 = a1[*v4];
              goto LABEL_410;
            }
          }
          a1[*v4] = 1;
LABEL_408:
          int v153 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v148 = 0;
          }
LABEL_410:
          int v154 = v148 & 7;
          if (v153 || v154 == 4)
          {
LABEL_448:
            int v171 = a1[*v4];
            PBReaderRecallMark();
            if (!v171)
            {
LABEL_386:
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_3811;
          }
          break;
        }
        switch((v148 >> 3))
        {
          case 1u:
            if (v154 == 2)
            {
              if (PBReaderPlaceMark())
              {
                while (1)
                {
LABEL_439:
                  if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || (unsigned int v166 = a1[*v4], a1[*v4]))
                  {
LABEL_425:
                    PBReaderRecallMark();
                    goto LABEL_398;
                  }
                  while (1)
                  {
                    uint64_t v167 = *v2;
                    uint64_t v168 = *(void *)&a1[v167];
                    unint64_t v169 = v168 + 1;
                    if (v168 == -1 || v169 > *(void *)&a1[*v3]) {
                      break;
                    }
                    int v170 = *(char *)(*(void *)&a1[*v5] + v168);
                    *(void *)&a1[v167] = v169;
                    if (v170 < 0)
                    {
                      BOOL v13 = v166++ >= 9;
                      if (!v13) {
                        continue;
                      }
                    }
                    goto LABEL_439;
                  }
                  a1[*v4] = 1;
                }
              }
            }
            else if ((v148 & 7) == 0)
            {
              while (1)
              {
                uint64_t v156 = *v2;
                uint64_t v157 = *(void *)&a1[v156];
                unint64_t v158 = v157 + 1;
                if (v157 == -1 || v158 > *(void *)&a1[*v3]) {
                  break;
                }
                int v159 = *(char *)(*(void *)&a1[*v5] + v157);
                *(void *)&a1[v156] = v158;
                if (v159 < 0)
                {
                  unsigned int v160 = v154++;
                  if (v160 <= 8) {
                    continue;
                  }
                }
                goto LABEL_398;
              }
LABEL_437:
              a1[*v4] = 1;
              goto LABEL_398;
            }
            break;
          case 2u:
            if (v154 == 2 && PBReaderPlaceMark() && GEOPDTransitLabelIsValid(a1)) {
              goto LABEL_425;
            }
            goto LABEL_3796;
          case 3u:
            if ((v148 & 7) != 0) {
              goto LABEL_3796;
            }
            unsigned int v161 = 0;
            while (1)
            {
              uint64_t v162 = *v2;
              uint64_t v163 = *(void *)&a1[v162];
              unint64_t v164 = v163 + 1;
              if (v163 == -1 || v164 > *(void *)&a1[*v3]) {
                goto LABEL_437;
              }
              int v165 = *(char *)(*(void *)&a1[*v5] + v163);
              *(void *)&a1[v162] = v164;
              if (v165 < 0)
              {
                BOOL v52 = v161++ > 8;
                if (!v52) {
                  continue;
                }
              }
              goto LABEL_398;
            }
          case 4u:
            if (v154 == 2) {
              goto LABEL_435;
            }
            goto LABEL_3796;
          default:
LABEL_435:
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_3796;
            }
            goto LABEL_398;
        }
        goto LABEL_3796;
      case 0xCu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_454:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_3776;
          }
          char v172 = 0;
          unsigned int v173 = 0;
          unint64_t v174 = 0;
          while (2)
          {
            uint64_t v175 = *v2;
            uint64_t v176 = *(void *)&a1[v175];
            unint64_t v177 = v176 + 1;
            if (v176 == -1 || v177 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v178 = *(unsigned char *)(*(void *)&a1[*v5] + v176);
              *(void *)&a1[v175] = v177;
              v174 |= (unint64_t)(v178 & 0x7F) << v172;
              if (v178 < 0)
              {
                v172 += 7;
                BOOL v13 = v173++ >= 9;
                if (v13)
                {
                  unint64_t v174 = 0;
                  int v179 = a1[*v4];
                  goto LABEL_466;
                }
                continue;
              }
            }
            break;
          }
          int v179 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v174 = 0;
          }
LABEL_466:
          int v180 = v174 & 7;
          if (v179) {
            BOOL v181 = 1;
          }
          else {
            BOOL v181 = v180 == 4;
          }
          if (!v181)
          {
            switch((v174 >> 3))
            {
              case 1u:
                if ((v174 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v182 = 0;
                while (1)
                {
                  uint64_t v183 = *v2;
                  uint64_t v184 = *(void *)&a1[v183];
                  unint64_t v185 = v184 + 1;
                  if (v184 == -1 || v185 > *(void *)&a1[*v3]) {
                    goto LABEL_517;
                  }
                  int v186 = *(char *)(*(void *)&a1[*v5] + v184);
                  *(void *)&a1[v183] = v185;
                  if (v186 < 0)
                  {
                    BOOL v52 = v182++ > 8;
                    if (!v52) {
                      continue;
                    }
                  }
                  goto LABEL_454;
                }
              case 2u:
                if ((v174 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v187 = 0;
                while (1)
                {
                  uint64_t v188 = *v2;
                  uint64_t v189 = *(void *)&a1[v188];
                  unint64_t v190 = v189 + 1;
                  if (v189 == -1 || v190 > *(void *)&a1[*v3]) {
                    goto LABEL_517;
                  }
                  int v191 = *(char *)(*(void *)&a1[*v5] + v189);
                  *(void *)&a1[v188] = v190;
                  if (v191 < 0)
                  {
                    BOOL v52 = v187++ > 8;
                    if (!v52) {
                      continue;
                    }
                  }
                  goto LABEL_454;
                }
              case 3u:
                if ((v174 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v192 = 0;
                while (1)
                {
                  uint64_t v193 = *v2;
                  uint64_t v194 = *(void *)&a1[v193];
                  unint64_t v195 = v194 + 1;
                  if (v194 == -1 || v195 > *(void *)&a1[*v3]) {
                    goto LABEL_517;
                  }
                  int v196 = *(char *)(*(void *)&a1[*v5] + v194);
                  *(void *)&a1[v193] = v195;
                  if (v196 < 0)
                  {
                    BOOL v52 = v192++ > 8;
                    if (!v52) {
                      continue;
                    }
                  }
                  goto LABEL_454;
                }
              case 4u:
                if ((v174 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v197 = 0;
                while (1)
                {
                  uint64_t v198 = *v2;
                  uint64_t v199 = *(void *)&a1[v198];
                  unint64_t v200 = v199 + 1;
                  if (v199 == -1 || v200 > *(void *)&a1[*v3]) {
                    goto LABEL_517;
                  }
                  int v201 = *(char *)(*(void *)&a1[*v5] + v199);
                  *(void *)&a1[v198] = v200;
                  if (v201 < 0)
                  {
                    BOOL v52 = v197++ > 8;
                    if (!v52) {
                      continue;
                    }
                  }
                  goto LABEL_454;
                }
              case 5u:
                if (v180 != 2 || !PBReaderPlaceMark() || !GEORouteTrafficDetailIsValid(a1)) {
                  goto LABEL_3811;
                }
                goto LABEL_521;
              case 6u:
                if ((v174 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v202 = 0;
                do
                {
                  uint64_t v203 = *v2;
                  uint64_t v204 = *(void *)&a1[v203];
                  unint64_t v205 = v204 + 1;
                  if (v204 == -1 || v205 > *(void *)&a1[*v3])
                  {
LABEL_517:
                    a1[*v4] = 1;
                    goto LABEL_454;
                  }
                  int v206 = *(char *)(*(void *)&a1[*v5] + v204);
                  *(void *)&a1[v203] = v205;
                  if ((v206 & 0x80000000) == 0) {
                    break;
                  }
                  BOOL v52 = v202++ > 8;
                }
                while (!v52);
                break;
              case 7u:
                if (v180 != 2 || !PBReaderPlaceMark() || !GEOETARouteIncidentIsValid(a1)) {
                  goto LABEL_3811;
                }
LABEL_521:
                PBReaderRecallMark();
                continue;
              default:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
            }
            continue;
          }
          goto LABEL_3776;
        }
      case 0xDu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDFlyoverIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0xEu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          if (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
          {
            char v207 = 0;
            unsigned int v208 = 0;
            unint64_t v209 = 0;
            while (1)
            {
              uint64_t v210 = *v2;
              uint64_t v211 = *(void *)&a1[v210];
              unint64_t v212 = v211 + 1;
              if (v211 == -1 || v212 > *(void *)&a1[*v3]) {
                break;
              }
              char v213 = *(unsigned char *)(*(void *)&a1[*v5] + v211);
              *(void *)&a1[v210] = v212;
              v209 |= (unint64_t)(v213 & 0x7F) << v207;
              if ((v213 & 0x80) == 0) {
                goto LABEL_539;
              }
              v207 += 7;
              BOOL v13 = v208++ >= 9;
              if (v13)
              {
                unint64_t v209 = 0;
                int v214 = a1[*v4];
                goto LABEL_541;
              }
            }
            a1[*v4] = 1;
LABEL_539:
            int v214 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v209 = 0;
            }
LABEL_541:
            int v215 = v209 & 7;
            if (!v214 && v215 != 4)
            {
              if ((v209 >> 3) == 2)
              {
                if (v215 != 2) {
                  goto LABEL_3811;
                }
              }
              else
              {
                if ((v209 >> 3) != 1)
                {
                  if (!PBReaderSkipValueWithTag()) {
                    goto LABEL_3811;
                  }
                  continue;
                }
                if (v215 != 2) {
                  goto LABEL_3811;
                }
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
          }
          goto LABEL_3411;
        }
      case 0xFu:
      case 0x4Eu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAmenitiesIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x10u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOStyleAttributesIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x14u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3776;
            }
            char v217 = 0;
            unsigned int v218 = 0;
            unint64_t v219 = 0;
            while (1)
            {
              uint64_t v220 = *v2;
              uint64_t v221 = *(void *)&a1[v220];
              unint64_t v222 = v221 + 1;
              if (v221 == -1 || v222 > *(void *)&a1[*v3]) {
                break;
              }
              char v223 = *(unsigned char *)(*(void *)&a1[*v5] + v221);
              *(void *)&a1[v220] = v222;
              v219 |= (unint64_t)(v223 & 0x7F) << v217;
              if ((v223 & 0x80) == 0) {
                goto LABEL_573;
              }
              v217 += 7;
              BOOL v13 = v218++ >= 9;
              if (v13)
              {
                unint64_t v219 = 0;
                int v224 = a1[*v4];
                goto LABEL_575;
              }
            }
            a1[*v4] = 1;
LABEL_573:
            int v224 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v219 = 0;
            }
LABEL_575:
            int v225 = v219 & 7;
            if (v224 || v225 == 4) {
              goto LABEL_3776;
            }
            if ((v219 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
            break;
          }
          if (v225 == 2 && PBReaderPlaceMark() && GEOPBTransitIncidentIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x15u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_589:
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3411;
            }
            char v227 = 0;
            unsigned int v228 = 0;
            unint64_t v229 = 0;
            while (1)
            {
              uint64_t v230 = *v2;
              uint64_t v231 = *(void *)&a1[v230];
              unint64_t v232 = v231 + 1;
              if (v231 == -1 || v232 > *(void *)&a1[*v3]) {
                break;
              }
              char v233 = *(unsigned char *)(*(void *)&a1[*v5] + v231);
              *(void *)&a1[v230] = v232;
              v229 |= (unint64_t)(v233 & 0x7F) << v227;
              if ((v233 & 0x80) == 0) {
                goto LABEL_599;
              }
              v227 += 7;
              BOOL v13 = v228++ >= 9;
              if (v13)
              {
                unint64_t v229 = 0;
                int v234 = a1[*v4];
                goto LABEL_601;
              }
            }
            a1[*v4] = 1;
LABEL_599:
            int v234 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v229 = 0;
            }
LABEL_601:
            if (v234 || (v229 & 7) == 4) {
              goto LABEL_3411;
            }
            if ((v229 >> 3) != 2)
            {
              if (!PBReaderSkipValueWithTag()) {
                goto LABEL_3811;
              }
              continue;
            }
            break;
          }
          if ((v229 & 7) == 0)
          {
            unsigned int v236 = 0;
            do
            {
              uint64_t v237 = *v2;
              uint64_t v238 = *(void *)&a1[v237];
              unint64_t v239 = v238 + 1;
              if (v238 == -1 || v239 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
                goto LABEL_589;
              }
              int v240 = *(char *)(*(void *)&a1[*v5] + v238);
              *(void *)&a1[v237] = v239;
              if ((v240 & 0x80000000) == 0) {
                break;
              }
              BOOL v52 = v236++ > 8;
            }
            while (!v52);
            continue;
          }
          goto LABEL_3811;
        }
      case 0x16u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          if (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
          {
            char v241 = 0;
            unsigned int v242 = 0;
            unint64_t v243 = 0;
            while (1)
            {
              uint64_t v244 = *v2;
              uint64_t v245 = *(void *)&a1[v244];
              unint64_t v246 = v245 + 1;
              if (v245 == -1 || v246 > *(void *)&a1[*v3]) {
                break;
              }
              char v247 = *(unsigned char *)(*(void *)&a1[*v5] + v245);
              *(void *)&a1[v244] = v246;
              v243 |= (unint64_t)(v247 & 0x7F) << v241;
              if ((v247 & 0x80) == 0) {
                goto LABEL_630;
              }
              v241 += 7;
              BOOL v13 = v242++ >= 9;
              if (v13)
              {
                unint64_t v243 = 0;
                int v248 = a1[*v4];
                goto LABEL_632;
              }
            }
            a1[*v4] = 1;
LABEL_630:
            int v248 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v243 = 0;
            }
LABEL_632:
            int v249 = v243 & 7;
            if (!v248 && v249 != 4)
            {
              unint64_t v251 = v243 >> 3;
              if ((v243 >> 3) == 3)
              {
                if (v249 != 2) {
                  goto LABEL_3811;
                }
              }
              else if (v251 == 2)
              {
                if (v249 != 2) {
                  goto LABEL_3811;
                }
              }
              else
              {
                if (v251 != 1)
                {
                  if (!PBReaderSkipValueWithTag()) {
                    goto LABEL_3811;
                  }
                  continue;
                }
                if (v249 != 2) {
                  goto LABEL_3811;
                }
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
          }
          goto LABEL_3411;
        }
      case 0x17u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDFactoidIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x18u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v252 = 0;
          unsigned int v253 = 0;
          unint64_t v254 = 0;
          while (1)
          {
            uint64_t v255 = *v2;
            uint64_t v256 = *(void *)&a1[v255];
            unint64_t v257 = v256 + 1;
            if (v256 == -1 || v257 > *(void *)&a1[*v3]) {
              break;
            }
            char v258 = *(unsigned char *)(*(void *)&a1[*v5] + v256);
            *(void *)&a1[v255] = v257;
            v254 |= (unint64_t)(v258 & 0x7F) << v252;
            if ((v258 & 0x80) == 0) {
              goto LABEL_665;
            }
            v252 += 7;
            BOOL v13 = v253++ >= 9;
            if (v13)
            {
              unint64_t v254 = 0;
              int v259 = a1[*v4];
              goto LABEL_667;
            }
          }
          a1[*v4] = 1;
LABEL_665:
          int v259 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v254 = 0;
          }
LABEL_667:
          int v260 = v254 & 7;
          if (v259 || v260 == 4) {
            break;
          }
          if ((v254 >> 3) != 1)
          {
            if (!PBReaderSkipValueWithTag()) {
              goto LABEL_3811;
            }
            continue;
          }
          if (v260 != 2 || (PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_3811;
          }
        }
        goto LABEL_3411;
      case 0x19u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDBusinessClaimIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x1Au:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDCaptionedPhotoIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x1Bu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDTransitInfoSnippetIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x1Du:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_692:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_2246;
          }
          char v262 = 0;
          unsigned int v263 = 0;
          unint64_t v264 = 0;
          while (1)
          {
            uint64_t v265 = *v2;
            uint64_t v266 = *(void *)&a1[v265];
            unint64_t v267 = v266 + 1;
            if (v266 == -1 || v267 > *(void *)&a1[*v3]) {
              break;
            }
            char v268 = *(unsigned char *)(*(void *)&a1[*v5] + v266);
            *(void *)&a1[v265] = v267;
            v264 |= (unint64_t)(v268 & 0x7F) << v262;
            if ((v268 & 0x80) == 0) {
              goto LABEL_702;
            }
            v262 += 7;
            BOOL v13 = v263++ >= 9;
            if (v13)
            {
              unint64_t v264 = 0;
              int v269 = a1[*v4];
              goto LABEL_704;
            }
          }
          a1[*v4] = 1;
LABEL_702:
          int v269 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v264 = 0;
          }
LABEL_704:
          int v270 = v264 & 7;
          if (v269 || v270 == 4) {
            goto LABEL_2246;
          }
          if ((v264 >> 3) == 2)
          {
            if (v270 == 2 && PBReaderPlaceMark())
            {
              [a1 position];
              [a1 length];
              while (2)
              {
                if (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
                {
                  char v277 = 0;
                  unsigned int v278 = 0;
                  unint64_t v279 = 0;
                  while (1)
                  {
                    uint64_t v280 = *v2;
                    uint64_t v281 = *(void *)&a1[v280];
                    unint64_t v282 = v281 + 1;
                    if (v281 == -1 || v282 > *(void *)&a1[*v3]) {
                      break;
                    }
                    char v283 = *(unsigned char *)(*(void *)&a1[*v5] + v281);
                    *(void *)&a1[v280] = v282;
                    v279 |= (unint64_t)(v283 & 0x7F) << v277;
                    if ((v283 & 0x80) == 0) {
                      goto LABEL_731;
                    }
                    v277 += 7;
                    BOOL v13 = v278++ >= 9;
                    if (v13)
                    {
                      unint64_t v279 = 0;
                      int v284 = a1[*v4];
                      goto LABEL_733;
                    }
                  }
                  a1[*v4] = 1;
LABEL_731:
                  int v284 = a1[*v4];
                  if (a1[*v4]) {
                    unint64_t v279 = 0;
                  }
LABEL_733:
                  int v285 = v279 & 7;
                  if (v284) {
                    BOOL v286 = 1;
                  }
                  else {
                    BOOL v286 = v285 == 4;
                  }
                  if (!v286)
                  {
                    switch((v279 >> 3))
                    {
                      case 1u:
                        if (v285 == 2) {
                          goto LABEL_747;
                        }
                        goto LABEL_3798;
                      case 2u:
                        if (v285 == 2) {
                          goto LABEL_747;
                        }
                        goto LABEL_3798;
                      case 3u:
                        if (v285 == 2) {
                          goto LABEL_747;
                        }
                        goto LABEL_3798;
                      case 4u:
                        if (v285 != 2) {
                          goto LABEL_3798;
                        }
LABEL_747:
                        if ((PBReaderSkipValueWithTag() & 1) == 0) {
                          goto LABEL_3798;
                        }
                        continue;
                      default:
                        if (!PBReaderSkipValueWithTag()) {
                          goto LABEL_3798;
                        }
                        continue;
                    }
                  }
                }
                break;
              }
              int v287 = a1[*v4];
              PBReaderRecallMark();
              if (!v287)
              {
                PBReaderRecallMark();
                continue;
              }
            }
          }
          else
          {
            if ((v264 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
            if ((v264 & 7) == 0)
            {
              unsigned int v272 = 0;
              do
              {
                uint64_t v273 = *v2;
                uint64_t v274 = *(void *)&a1[v273];
                unint64_t v275 = v274 + 1;
                if (v274 == -1 || v275 > *(void *)&a1[*v3])
                {
                  a1[*v4] = 1;
                  goto LABEL_692;
                }
                int v276 = *(char *)(*(void *)&a1[*v5] + v274);
                *(void *)&a1[v273] = v275;
                if ((v276 & 0x80000000) == 0) {
                  break;
                }
                BOOL v52 = v272++ > 8;
              }
              while (!v52);
              continue;
            }
          }
          goto LABEL_3811;
        }
      case 0x1Eu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
LABEL_757:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_3298;
          }
          char v288 = 0;
          unsigned int v289 = 0;
          unint64_t v290 = 0;
          while (2)
          {
            uint64_t v291 = *v2;
            uint64_t v292 = *(void *)&a1[v291];
            unint64_t v293 = v292 + 1;
            if (v292 == -1 || v293 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v294 = *(unsigned char *)(*(void *)&a1[*v5] + v292);
              *(void *)&a1[v291] = v293;
              v290 |= (unint64_t)(v294 & 0x7F) << v288;
              if (v294 < 0)
              {
                v288 += 7;
                BOOL v13 = v289++ >= 9;
                if (v13)
                {
                  unint64_t v290 = 0;
                  int v295 = a1[*v4];
                  goto LABEL_769;
                }
                continue;
              }
            }
            break;
          }
          int v295 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v290 = 0;
          }
LABEL_769:
          int v296 = v290 & 7;
          if (v295) {
            BOOL v297 = 1;
          }
          else {
            BOOL v297 = v296 == 4;
          }
          if (!v297)
          {
            switch((v290 >> 3))
            {
              case 1u:
                if (v296 == 2) {
                  goto LABEL_783;
                }
                goto LABEL_3811;
              case 2u:
                if (v296 == 2) {
                  goto LABEL_783;
                }
                goto LABEL_3811;
              case 3u:
                if (v296 != 2 || !PBReaderPlaceMark() || !GEOPDRatingIsValid(a1)) {
                  goto LABEL_3811;
                }
                goto LABEL_800;
              case 5u:
                if (v296 == 2) {
                  goto LABEL_783;
                }
                goto LABEL_3811;
              case 6u:
                if ((v290 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v298 = 0;
                do
                {
                  uint64_t v299 = *v2;
                  uint64_t v300 = *(void *)&a1[v299];
                  unint64_t v301 = v300 + 1;
                  if (v300 == -1 || v301 > *(void *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                    goto LABEL_757;
                  }
                  int v302 = *(char *)(*(void *)&a1[*v5] + v300);
                  *(void *)&a1[v299] = v301;
                  if ((v302 & 0x80000000) == 0) {
                    break;
                  }
                  BOOL v52 = v298++ > 8;
                }
                while (!v52);
                continue;
              case 8u:
                if (v296 != 2 || !PBReaderPlaceMark() || !GEOPDChildPlaceIsValid(a1)) {
                  goto LABEL_3811;
                }
                goto LABEL_800;
              case 9u:
                if (v296 == 2 && PBReaderPlaceMark() && GEOPDAdamAppIdentifierIsValid(a1)) {
                  goto LABEL_800;
                }
                goto LABEL_3811;
              case 0xAu:
                if (v296 != 2 || !PBReaderPlaceMark()) {
                  goto LABEL_3811;
                }
                [a1 position];
                [a1 length];
                break;
              default:
LABEL_783:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
            }
            while (1)
            {
LABEL_804:
              if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                goto LABEL_991;
              }
              char v303 = 0;
              unsigned int v304 = 0;
              unint64_t v305 = 0;
              while (1)
              {
                uint64_t v306 = *v2;
                uint64_t v307 = *(void *)&a1[v306];
                unint64_t v308 = v307 + 1;
                if (v307 == -1 || v308 > *(void *)&a1[*v3]) {
                  break;
                }
                char v309 = *(unsigned char *)(*(void *)&a1[*v5] + v307);
                *(void *)&a1[v306] = v308;
                v305 |= (unint64_t)(v309 & 0x7F) << v303;
                if ((v309 & 0x80) == 0) {
                  goto LABEL_814;
                }
                v303 += 7;
                BOOL v13 = v304++ >= 9;
                if (v13)
                {
                  unint64_t v305 = 0;
                  int v310 = a1[*v4];
                  goto LABEL_816;
                }
              }
              a1[*v4] = 1;
LABEL_814:
              int v310 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v305 = 0;
              }
LABEL_816:
              int v311 = v305 & 7;
              if (v310 || v311 == 4)
              {
LABEL_991:
                int v384 = a1[*v4];
                PBReaderRecallMark();
                if (!v384)
                {
LABEL_800:
                  PBReaderRecallMark();
                  goto LABEL_757;
                }
                goto LABEL_3811;
              }
              unint64_t v313 = v305 >> 3;
              if ((v305 >> 3) == 3) {
                break;
              }
              if (v313 == 2)
              {
                if (v311 != 2 || !PBReaderPlaceMark() || !GEOPDChildPlaceIsValid(a1)) {
                  goto LABEL_3802;
                }
                goto LABEL_989;
              }
              if (v313 == 1)
              {
                if ((v305 & 7) == 0)
                {
                  unsigned int v314 = 0;
                  do
                  {
                    uint64_t v315 = *v2;
                    uint64_t v316 = *(void *)&a1[v315];
                    unint64_t v317 = v316 + 1;
                    if (v316 == -1 || v317 > *(void *)&a1[*v3])
                    {
                      a1[*v4] = 1;
                      goto LABEL_804;
                    }
                    int v318 = *(char *)(*(void *)&a1[*v5] + v316);
                    *(void *)&a1[v315] = v317;
                    if ((v318 & 0x80000000) == 0) {
                      break;
                    }
                    BOOL v52 = v314++ > 8;
                  }
                  while (!v52);
                  continue;
                }
                goto LABEL_3802;
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3802;
              }
            }
            if (v311 != 2 || !PBReaderPlaceMark()) {
              goto LABEL_3802;
            }
            [a1 position];
            [a1 length];
LABEL_834:
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
            {
              char v319 = 0;
              unsigned int v320 = 0;
              unint64_t v321 = 0;
              while (1)
              {
                uint64_t v322 = *v2;
                uint64_t v323 = *(void *)&a1[v322];
                unint64_t v324 = v323 + 1;
                if (v323 == -1 || v324 > *(void *)&a1[*v3]) {
                  break;
                }
                char v325 = *(unsigned char *)(*(void *)&a1[*v5] + v323);
                *(void *)&a1[v322] = v324;
                v321 |= (unint64_t)(v325 & 0x7F) << v319;
                if ((v325 & 0x80) == 0) {
                  goto LABEL_844;
                }
                v319 += 7;
                BOOL v13 = v320++ >= 9;
                if (v13)
                {
                  unint64_t v321 = 0;
                  int v326 = a1[*v4];
                  goto LABEL_846;
                }
              }
              a1[*v4] = 1;
LABEL_844:
              int v326 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v321 = 0;
              }
LABEL_846:
              int v327 = v321 & 7;
              if (v326 || v327 == 4) {
                break;
              }
              switch((v321 >> 3))
              {
                case 1u:
                  if ((v321 & 7) != 0) {
                    goto LABEL_3801;
                  }
                  unsigned int v329 = 0;
                  while (1)
                  {
                    uint64_t v330 = *v2;
                    uint64_t v331 = *(void *)&a1[v330];
                    unint64_t v332 = v331 + 1;
                    if (v331 == -1 || v332 > *(void *)&a1[*v3]) {
                      break;
                    }
                    int v333 = *(char *)(*(void *)&a1[*v5] + v331);
                    *(void *)&a1[v330] = v332;
                    if (v333 < 0)
                    {
                      BOOL v52 = v329++ > 8;
                      if (!v52) {
                        continue;
                      }
                    }
                    goto LABEL_834;
                  }
                  a1[*v4] = 1;
                  continue;
                case 2u:
                  if (v327 != 2 || !PBReaderPlaceMark()) {
                    goto LABEL_3801;
                  }
                  [a1 position];
                  [a1 length];
                  while (1)
                  {
                    int v334 = a1[*v4];
                    if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
                      goto LABEL_978;
                    }
                    if (a1[*v4]) {
                      goto LABEL_3800;
                    }
                    char v335 = 0;
                    unsigned int v336 = 0;
                    uint64_t v337 = 0;
                    while (1)
                    {
                      uint64_t v338 = *v2;
                      uint64_t v339 = *(void *)&a1[v338];
                      unint64_t v340 = v339 + 1;
                      if (v339 == -1 || v340 > *(void *)&a1[*v3]) {
                        break;
                      }
                      char v341 = *(unsigned char *)(*(void *)&a1[*v5] + v339);
                      *(void *)&a1[v338] = v340;
                      v337 |= (unint64_t)(v341 & 0x7F) << v335;
                      if ((v341 & 0x80) == 0) {
                        goto LABEL_874;
                      }
                      v335 += 7;
                      BOOL v13 = v336++ >= 9;
                      if (v13)
                      {
                        LOBYTE(v337) = 0;
                        int v334 = a1[*v4];
                        goto LABEL_876;
                      }
                    }
                    a1[*v4] = 1;
LABEL_874:
                    uint64_t v342 = *v4;
                    int v334 = a1[v342];
                    if (a1[v342]) {
                      LOBYTE(v337) = 0;
                    }
LABEL_876:
                    if (v334 || (v337 & 7) == 4) {
                      goto LABEL_978;
                    }
                    if ((PBReaderSkipValueWithTag() & 1) == 0) {
                      goto LABEL_3800;
                    }
                  }
                case 3u:
                  if (v327 != 2 || !PBReaderPlaceMark()) {
                    goto LABEL_3801;
                  }
                  [a1 position];
                  [a1 length];
                  while (1)
                  {
                    int v334 = a1[*v4];
                    if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
                      goto LABEL_978;
                    }
                    if (a1[*v4]) {
                      goto LABEL_3800;
                    }
                    char v344 = 0;
                    unsigned int v345 = 0;
                    uint64_t v346 = 0;
                    while (1)
                    {
                      uint64_t v347 = *v2;
                      uint64_t v348 = *(void *)&a1[v347];
                      unint64_t v349 = v348 + 1;
                      if (v348 == -1 || v349 > *(void *)&a1[*v3]) {
                        break;
                      }
                      char v350 = *(unsigned char *)(*(void *)&a1[*v5] + v348);
                      *(void *)&a1[v347] = v349;
                      v346 |= (unint64_t)(v350 & 0x7F) << v344;
                      if ((v350 & 0x80) == 0) {
                        goto LABEL_895;
                      }
                      v344 += 7;
                      BOOL v13 = v345++ >= 9;
                      if (v13)
                      {
                        LOBYTE(v346) = 0;
                        int v334 = a1[*v4];
                        goto LABEL_897;
                      }
                    }
                    a1[*v4] = 1;
LABEL_895:
                    uint64_t v351 = *v4;
                    int v334 = a1[v351];
                    if (a1[v351]) {
                      LOBYTE(v346) = 0;
                    }
LABEL_897:
                    if (v334 || (v346 & 7) == 4) {
                      goto LABEL_978;
                    }
                    if ((PBReaderSkipValueWithTag() & 1) == 0) {
                      goto LABEL_3800;
                    }
                  }
                case 4u:
                  if (v327 != 2 || !PBReaderPlaceMark()) {
                    goto LABEL_3801;
                  }
                  [a1 position];
                  [a1 length];
                  while (2)
                  {
                    while (2)
                    {
                      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                        goto LABEL_955;
                      }
                      char v353 = 0;
                      unsigned int v354 = 0;
                      unint64_t v355 = 0;
                      while (1)
                      {
                        uint64_t v356 = *v2;
                        uint64_t v357 = *(void *)&a1[v356];
                        unint64_t v358 = v357 + 1;
                        if (v357 == -1 || v358 > *(void *)&a1[*v3]) {
                          break;
                        }
                        char v359 = *(unsigned char *)(*(void *)&a1[*v5] + v357);
                        *(void *)&a1[v356] = v358;
                        v355 |= (unint64_t)(v359 & 0x7F) << v353;
                        if ((v359 & 0x80) == 0) {
                          goto LABEL_916;
                        }
                        v353 += 7;
                        BOOL v13 = v354++ >= 9;
                        if (v13)
                        {
                          unint64_t v355 = 0;
                          int v360 = a1[*v4];
                          goto LABEL_918;
                        }
                      }
                      a1[*v4] = 1;
LABEL_916:
                      int v360 = a1[*v4];
                      if (a1[*v4]) {
                        unint64_t v355 = 0;
                      }
LABEL_918:
                      int v361 = v355 & 7;
                      if (v360 || v361 == 4) {
                        goto LABEL_955;
                      }
                      if ((v355 >> 3) != 1)
                      {
                        if ((PBReaderSkipValueWithTag() & 1) == 0) {
                          goto LABEL_3800;
                        }
                        continue;
                      }
                      break;
                    }
                    if (v361 == 2 && PBReaderPlaceMark() && GEOPDWarsawMerchantIdentifierIsValid(a1))
                    {
                      PBReaderRecallMark();
                      continue;
                    }
                    goto LABEL_3800;
                  }
                case 5u:
                  if (v327 != 2 || !PBReaderPlaceMark()) {
                    goto LABEL_3801;
                  }
                  [a1 position];
                  [a1 length];
                  while (2)
                  {
                    if (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
                    {
                      char v363 = 0;
                      unsigned int v364 = 0;
                      unint64_t v365 = 0;
                      while (1)
                      {
                        uint64_t v366 = *v2;
                        uint64_t v367 = *(void *)&a1[v366];
                        unint64_t v368 = v367 + 1;
                        if (v367 == -1 || v368 > *(void *)&a1[*v3]) {
                          break;
                        }
                        char v369 = *(unsigned char *)(*(void *)&a1[*v5] + v367);
                        *(void *)&a1[v366] = v368;
                        v365 |= (unint64_t)(v369 & 0x7F) << v363;
                        if ((v369 & 0x80) == 0) {
                          goto LABEL_942;
                        }
                        v363 += 7;
                        BOOL v13 = v364++ >= 9;
                        if (v13)
                        {
                          unint64_t v365 = 0;
                          int v370 = a1[*v4];
                          goto LABEL_944;
                        }
                      }
                      a1[*v4] = 1;
LABEL_942:
                      int v370 = a1[*v4];
                      if (a1[*v4]) {
                        unint64_t v365 = 0;
                      }
LABEL_944:
                      int v371 = v365 & 7;
                      if (!v370 && v371 != 4)
                      {
                        if ((v365 >> 3) != 1)
                        {
                          if ((PBReaderSkipValueWithTag() & 1) == 0) {
                            goto LABEL_3800;
                          }
                          continue;
                        }
                        if (v371 == 2 && PBReaderPlaceMark() && GEOPDGuidesLocationEntryIsValid(a1))
                        {
                          PBReaderRecallMark();
                          continue;
                        }
LABEL_3800:
                        PBReaderRecallMark();
LABEL_3801:
                        PBReaderRecallMark();
LABEL_3802:
                        PBReaderRecallMark();
                        goto LABEL_3811;
                      }
                    }
                    break;
                  }
LABEL_955:
                  int v373 = a1[*v4];
                  PBReaderRecallMark();
                  if (v373) {
                    goto LABEL_3801;
                  }
LABEL_979:
                  PBReaderRecallMark();
                  break;
                case 6u:
                  if (v327 != 2 || !PBReaderPlaceMark()) {
                    goto LABEL_3801;
                  }
                  [a1 position];
                  [a1 length];
                  while (1)
                  {
                    int v334 = a1[*v4];
                    if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
                      break;
                    }
                    if (a1[*v4]) {
                      goto LABEL_3800;
                    }
                    char v374 = 0;
                    unsigned int v375 = 0;
                    uint64_t v376 = 0;
                    while (1)
                    {
                      uint64_t v377 = *v2;
                      uint64_t v378 = *(void *)&a1[v377];
                      unint64_t v379 = v378 + 1;
                      if (v378 == -1 || v379 > *(void *)&a1[*v3]) {
                        break;
                      }
                      char v380 = *(unsigned char *)(*(void *)&a1[*v5] + v378);
                      *(void *)&a1[v377] = v379;
                      v376 |= (unint64_t)(v380 & 0x7F) << v374;
                      if ((v380 & 0x80) == 0) {
                        goto LABEL_970;
                      }
                      v374 += 7;
                      BOOL v13 = v375++ >= 9;
                      if (v13)
                      {
                        LOBYTE(v376) = 0;
                        int v334 = a1[*v4];
                        goto LABEL_972;
                      }
                    }
                    a1[*v4] = 1;
LABEL_970:
                    uint64_t v381 = *v4;
                    int v334 = a1[v381];
                    if (a1[v381]) {
                      LOBYTE(v376) = 0;
                    }
LABEL_972:
                    if (v334 || (v376 & 7) == 4) {
                      break;
                    }
                    if ((PBReaderSkipValueWithTag() & 1) == 0) {
                      goto LABEL_3800;
                    }
                  }
LABEL_978:
                  PBReaderRecallMark();
                  if (!v334) {
                    goto LABEL_979;
                  }
                  goto LABEL_3801;
                default:
                  if ((PBReaderSkipValueWithTag() & 1) == 0) {
                    goto LABEL_3801;
                  }
                  continue;
              }
            }
            int v383 = a1[*v4];
            PBReaderRecallMark();
            if (v383) {
              goto LABEL_3802;
            }
LABEL_989:
            PBReaderRecallMark();
            goto LABEL_804;
          }
          goto LABEL_3298;
        }
      case 0x1Fu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAdamAppIdentifierIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x20u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_1000:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_2246;
          }
          char v385 = 0;
          unsigned int v386 = 0;
          unint64_t v387 = 0;
          while (2)
          {
            uint64_t v388 = *v2;
            uint64_t v389 = *(void *)&a1[v388];
            unint64_t v390 = v389 + 1;
            if (v389 == -1 || v390 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v391 = *(unsigned char *)(*(void *)&a1[*v5] + v389);
              *(void *)&a1[v388] = v390;
              v387 |= (unint64_t)(v391 & 0x7F) << v385;
              if (v391 < 0)
              {
                v385 += 7;
                BOOL v13 = v386++ >= 9;
                if (v13)
                {
                  unint64_t v387 = 0;
                  int v392 = a1[*v4];
                  goto LABEL_1012;
                }
                continue;
              }
            }
            break;
          }
          int v392 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v387 = 0;
          }
LABEL_1012:
          int v393 = v387 & 7;
          if (v392) {
            BOOL v394 = 1;
          }
          else {
            BOOL v394 = v393 == 4;
          }
          if (v394) {
            goto LABEL_2246;
          }
          if ((v387 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_3811;
            }
            continue;
          }
          break;
        }
        if (v393 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3811;
        }
        [a1 position];
        [a1 length];
        while (1)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_1047;
          }
          char v395 = 0;
          unsigned int v396 = 0;
          unint64_t v397 = 0;
          while (1)
          {
            uint64_t v398 = *v2;
            uint64_t v399 = *(void *)&a1[v398];
            unint64_t v400 = v399 + 1;
            if (v399 == -1 || v400 > *(void *)&a1[*v3]) {
              break;
            }
            char v401 = *(unsigned char *)(*(void *)&a1[*v5] + v399);
            *(void *)&a1[v398] = v400;
            v397 |= (unint64_t)(v401 & 0x7F) << v395;
            if ((v401 & 0x80) == 0) {
              goto LABEL_1030;
            }
            v395 += 7;
            BOOL v13 = v396++ >= 9;
            if (v13)
            {
              unint64_t v397 = 0;
              int v402 = a1[*v4];
              goto LABEL_1032;
            }
          }
          a1[*v4] = 1;
LABEL_1030:
          int v402 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v397 = 0;
          }
LABEL_1032:
          int v403 = v397 & 7;
          if (v402 || v403 == 4)
          {
LABEL_1047:
            int v405 = a1[*v4];
            PBReaderRecallMark();
            if (!v405)
            {
              PBReaderRecallMark();
              goto LABEL_1000;
            }
            goto LABEL_3811;
          }
          if ((v397 >> 3) == 2) {
            break;
          }
          if ((v397 >> 3) == 1)
          {
            if (v403 != 2) {
              goto LABEL_3798;
            }
LABEL_1041:
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_3798;
            }
          }
          else if (!PBReaderSkipValueWithTag())
          {
            goto LABEL_3798;
          }
        }
        if (v403 != 2) {
          goto LABEL_3798;
        }
        goto LABEL_1041;
      case 0x21u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_1052:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_3366;
          }
          char v406 = 0;
          unsigned int v407 = 0;
          unint64_t v408 = 0;
          while (2)
          {
            uint64_t v409 = *v2;
            uint64_t v410 = *(void *)&a1[v409];
            unint64_t v411 = v410 + 1;
            if (v410 == -1 || v411 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v412 = *(unsigned char *)(*(void *)&a1[*v5] + v410);
              *(void *)&a1[v409] = v411;
              v408 |= (unint64_t)(v412 & 0x7F) << v406;
              if (v412 < 0)
              {
                v406 += 7;
                BOOL v13 = v407++ >= 9;
                if (v13)
                {
                  unint64_t v408 = 0;
                  int v413 = a1[*v4];
                  goto LABEL_1064;
                }
                continue;
              }
            }
            break;
          }
          int v413 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v408 = 0;
          }
LABEL_1064:
          int v414 = v408 & 7;
          if (v413) {
            BOOL v415 = 1;
          }
          else {
            BOOL v415 = v414 == 4;
          }
          if (v415) {
            goto LABEL_3366;
          }
          if ((v408 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_3811;
            }
            continue;
          }
          break;
        }
        if (v414 == 2 && PBReaderPlaceMark())
        {
          [a1 position];
          [a1 length];
          while (1)
          {
            while (1)
            {
LABEL_1072:
              if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                goto LABEL_1117;
              }
              char v416 = 0;
              unsigned int v417 = 0;
              unint64_t v418 = 0;
              while (1)
              {
                uint64_t v419 = *v2;
                uint64_t v420 = *(void *)&a1[v419];
                unint64_t v421 = v420 + 1;
                if (v420 == -1 || v421 > *(void *)&a1[*v3]) {
                  break;
                }
                char v422 = *(unsigned char *)(*(void *)&a1[*v5] + v420);
                *(void *)&a1[v419] = v421;
                v418 |= (unint64_t)(v422 & 0x7F) << v416;
                if ((v422 & 0x80) == 0) {
                  goto LABEL_1082;
                }
                v416 += 7;
                BOOL v13 = v417++ >= 9;
                if (v13)
                {
                  unint64_t v418 = 0;
                  int v423 = a1[*v4];
                  goto LABEL_1084;
                }
              }
              a1[*v4] = 1;
LABEL_1082:
              int v423 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v418 = 0;
              }
LABEL_1084:
              int v424 = v418 & 7;
              if (v423 || v424 == 4)
              {
LABEL_1117:
                int v437 = a1[*v4];
                PBReaderRecallMark();
                if (!v437)
                {
                  PBReaderRecallMark();
                  goto LABEL_1052;
                }
                goto LABEL_3811;
              }
              unint64_t v426 = v418 >> 3;
              if ((v418 >> 3) != 3) {
                break;
              }
              if (v424 == 2)
              {
                if (!PBReaderPlaceMark()) {
                  goto LABEL_3796;
                }
LABEL_1104:
                while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
                {
                  unsigned int v432 = a1[*v4];
                  if (a1[*v4]) {
                    break;
                  }
                  while (1)
                  {
                    uint64_t v433 = *v2;
                    uint64_t v434 = *(void *)&a1[v433];
                    unint64_t v435 = v434 + 1;
                    if (v434 == -1 || v435 > *(void *)&a1[*v3]) {
                      break;
                    }
                    int v436 = *(char *)(*(void *)&a1[*v5] + v434);
                    *(void *)&a1[v433] = v435;
                    if (v436 < 0)
                    {
                      BOOL v13 = v432++ >= 9;
                      if (!v13) {
                        continue;
                      }
                    }
                    goto LABEL_1104;
                  }
                  a1[*v4] = 1;
                }
                PBReaderRecallMark();
              }
              else
              {
                if ((v418 & 7) != 0) {
                  goto LABEL_3796;
                }
                while (1)
                {
                  uint64_t v427 = *v2;
                  uint64_t v428 = *(void *)&a1[v427];
                  unint64_t v429 = v428 + 1;
                  if (v428 == -1 || v429 > *(void *)&a1[*v3]) {
                    break;
                  }
                  int v430 = *(char *)(*(void *)&a1[*v5] + v428);
                  *(void *)&a1[v427] = v429;
                  if (v430 < 0)
                  {
                    unsigned int v431 = v424++;
                    if (v431 <= 8) {
                      continue;
                    }
                  }
                  goto LABEL_1072;
                }
                a1[*v4] = 1;
              }
            }
            if (v426 == 2)
            {
              if (v424 != 2) {
                goto LABEL_3796;
              }
            }
            else if (v426 == 1 && v424 != 2)
            {
              goto LABEL_3796;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_3796;
            }
          }
        }
        goto LABEL_3811;
      case 0x22u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_1122:
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3776;
            }
            char v438 = 0;
            unsigned int v439 = 0;
            unint64_t v440 = 0;
            while (2)
            {
              uint64_t v441 = *v2;
              uint64_t v442 = *(void *)&a1[v441];
              unint64_t v443 = v442 + 1;
              if (v442 == -1 || v443 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v444 = *(unsigned char *)(*(void *)&a1[*v5] + v442);
                *(void *)&a1[v441] = v443;
                v440 |= (unint64_t)(v444 & 0x7F) << v438;
                if (v444 < 0)
                {
                  v438 += 7;
                  BOOL v13 = v439++ >= 9;
                  if (v13)
                  {
                    unint64_t v440 = 0;
                    int v445 = a1[*v4];
                    goto LABEL_1134;
                  }
                  continue;
                }
              }
              break;
            }
            int v445 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v440 = 0;
            }
LABEL_1134:
            int v446 = v440 & 7;
            if (v445) {
              BOOL v447 = 1;
            }
            else {
              BOOL v447 = v446 == 4;
            }
            if (v447) {
              goto LABEL_3776;
            }
            unint64_t v448 = v440 >> 3;
            if ((v440 >> 3) == 3)
            {
              if (v446 != 2)
              {
                if ((v440 & 7) == 0)
                {
                  do
                  {
                    uint64_t v449 = *v2;
                    uint64_t v450 = *(void *)&a1[v449];
                    unint64_t v451 = v450 + 1;
                    if (v450 == -1 || v451 > *(void *)&a1[*v3])
                    {
                      a1[*v4] = 1;
                      goto LABEL_1122;
                    }
                    int v452 = *(char *)(*(void *)&a1[*v5] + v450);
                    *(void *)&a1[v449] = v451;
                    if ((v452 & 0x80000000) == 0) {
                      break;
                    }
                    unsigned int v453 = v446++;
                  }
                  while (v453 <= 8);
                  continue;
                }
                goto LABEL_3811;
              }
              if (!PBReaderPlaceMark()) {
                goto LABEL_3811;
              }
LABEL_1159:
              while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
              {
                unsigned int v454 = a1[*v4];
                if (a1[*v4]) {
                  break;
                }
                while (1)
                {
                  uint64_t v455 = *v2;
                  uint64_t v456 = *(void *)&a1[v455];
                  unint64_t v457 = v456 + 1;
                  if (v456 == -1 || v457 > *(void *)&a1[*v3]) {
                    break;
                  }
                  int v458 = *(char *)(*(void *)&a1[*v5] + v456);
                  *(void *)&a1[v455] = v457;
                  if (v458 < 0)
                  {
                    BOOL v13 = v454++ >= 9;
                    if (!v13) {
                      continue;
                    }
                  }
                  goto LABEL_1159;
                }
                a1[*v4] = 1;
              }
            }
            else if (v448 == 2)
            {
              if (v446 != 2 || !PBReaderPlaceMark() || !GEOPDBoundsIsValid(a1)) {
                goto LABEL_3811;
              }
            }
            else
            {
              if (v448 != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
              }
              if (v446 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1)) {
                goto LABEL_3811;
              }
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 0x24u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_1172:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_3366;
          }
          char v459 = 0;
          unsigned int v460 = 0;
          unint64_t v461 = 0;
          while (2)
          {
            uint64_t v462 = *v2;
            uint64_t v463 = *(void *)&a1[v462];
            unint64_t v464 = v463 + 1;
            if (v463 == -1 || v464 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v465 = *(unsigned char *)(*(void *)&a1[*v5] + v463);
              *(void *)&a1[v462] = v464;
              v461 |= (unint64_t)(v465 & 0x7F) << v459;
              if (v465 < 0)
              {
                v459 += 7;
                BOOL v13 = v460++ >= 9;
                if (v13)
                {
                  unint64_t v461 = 0;
                  uint64_t v466 = *v4;
                  int v467 = a1[v466];
                  goto LABEL_1184;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v466 = *v4;
          int v467 = a1[v466];
          if (a1[v466]) {
            unint64_t v461 = 0;
          }
LABEL_1184:
          int v468 = v461 & 7;
          if (v467) {
            BOOL v469 = 1;
          }
          else {
            BOOL v469 = v468 == 4;
          }
          if (v469) {
            goto LABEL_3366;
          }
          switch((v461 >> 3))
          {
            case 1u:
              if (v468 == 2) {
                goto LABEL_1225;
              }
              goto LABEL_3811;
            case 2u:
              if (v468 != 1) {
                goto LABEL_3811;
              }
              uint64_t v470 = *v2;
              unint64_t v471 = *(void *)&a1[v470];
              if (v471 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t v472 = v471 + 8, v472 <= *(void *)&a1[*v3])) {
                *(void *)&a1[v470] = v472;
              }
              else {
                a1[v466] = 1;
              }
              continue;
            case 3u:
              if (v468 != 2 || !PBReaderPlaceMark()) {
                goto LABEL_3811;
              }
              [a1 position];
              [a1 length];
              break;
            case 4u:
              if (v468 == 2) {
                goto LABEL_1225;
              }
              goto LABEL_3811;
            default:
LABEL_1225:
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
          }
          break;
        }
        do
        {
          while (1)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_1227;
            }
            char v473 = 0;
            unsigned int v474 = 0;
            unint64_t v475 = 0;
            while (1)
            {
              uint64_t v476 = *v2;
              uint64_t v477 = *(void *)&a1[v476];
              unint64_t v478 = v477 + 1;
              if (v477 == -1 || v478 > *(void *)&a1[*v3]) {
                break;
              }
              char v479 = *(unsigned char *)(*(void *)&a1[*v5] + v477);
              *(void *)&a1[v476] = v478;
              v475 |= (unint64_t)(v479 & 0x7F) << v473;
              if ((v479 & 0x80) == 0) {
                goto LABEL_1208;
              }
              v473 += 7;
              BOOL v13 = v474++ >= 9;
              if (v13)
              {
                unint64_t v475 = 0;
                int v480 = a1[*v4];
                goto LABEL_1210;
              }
            }
            a1[*v4] = 1;
LABEL_1208:
            int v480 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v475 = 0;
            }
LABEL_1210:
            int v481 = v475 & 7;
            if (v480 || v481 == 4)
            {
LABEL_1227:
              int v483 = a1[*v4];
              PBReaderRecallMark();
              if (!v483)
              {
                PBReaderRecallMark();
                goto LABEL_1172;
              }
              goto LABEL_3811;
            }
            if ((v475 >> 3) != 2) {
              break;
            }
            if (v481 != 2 || !PBReaderPlaceMark() || !GEOPDPhotoIsValid(a1)) {
              goto LABEL_3796;
            }
            PBReaderRecallMark();
          }
        }
        while (((v475 >> 3) != 1 || v481 == 2) && (PBReaderSkipValueWithTag() & 1) != 0);
        goto LABEL_3796;
      case 0x25u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v484 = 0;
          unsigned int v485 = 0;
          unint64_t v486 = 0;
          while (1)
          {
            uint64_t v487 = *v2;
            uint64_t v488 = *(void *)&a1[v487];
            unint64_t v489 = v488 + 1;
            if (v488 == -1 || v489 > *(void *)&a1[*v3]) {
              break;
            }
            char v490 = *(unsigned char *)(*(void *)&a1[*v5] + v488);
            *(void *)&a1[v487] = v489;
            v486 |= (unint64_t)(v490 & 0x7F) << v484;
            if ((v490 & 0x80) == 0) {
              goto LABEL_1243;
            }
            v484 += 7;
            BOOL v13 = v485++ >= 9;
            if (v13)
            {
              unint64_t v486 = 0;
              int v491 = a1[*v4];
              goto LABEL_1245;
            }
          }
          a1[*v4] = 1;
LABEL_1243:
          int v491 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v486 = 0;
          }
LABEL_1245:
          int v492 = v486 & 7;
          if (v491 || v492 == 4) {
            break;
          }
          if ((v486 >> 3) != 1)
          {
            if (!PBReaderSkipValueWithTag()) {
              goto LABEL_3811;
            }
            continue;
          }
          if (v492 != 2 || (PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_3811;
          }
        }
        goto LABEL_3411;
      case 0x26u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3411;
            }
            char v494 = 0;
            unsigned int v495 = 0;
            unint64_t v496 = 0;
            while (2)
            {
              uint64_t v497 = *v2;
              uint64_t v498 = *(void *)&a1[v497];
              unint64_t v499 = v498 + 1;
              if (v498 == -1 || v499 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v500 = *(unsigned char *)(*(void *)&a1[*v5] + v498);
                *(void *)&a1[v497] = v499;
                v496 |= (unint64_t)(v500 & 0x7F) << v494;
                if (v500 < 0)
                {
                  v494 += 7;
                  BOOL v13 = v495++ >= 9;
                  if (v13)
                  {
                    unint64_t v496 = 0;
                    int v501 = a1[*v4];
                    goto LABEL_1270;
                  }
                  continue;
                }
              }
              break;
            }
            int v501 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v496 = 0;
            }
LABEL_1270:
            int v502 = v496 & 7;
            if (v501) {
              BOOL v503 = 1;
            }
            else {
              BOOL v503 = v502 == 4;
            }
            if (v503) {
              goto LABEL_3411;
            }
            if ((v496 >> 3) == 2)
            {
              if (v502 != 2) {
                goto LABEL_3811;
              }
LABEL_1279:
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
            break;
          }
          if ((v496 >> 3) != 1)
          {
            if (!PBReaderSkipValueWithTag()) {
              goto LABEL_3811;
            }
            continue;
          }
          break;
        }
        if (v502 == 2) {
          goto LABEL_1279;
        }
        goto LABEL_3811;
      case 0x27u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_1286:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_3776;
          }
          char v504 = 0;
          unsigned int v505 = 0;
          unint64_t v506 = 0;
          while (2)
          {
            uint64_t v507 = *v2;
            uint64_t v508 = *(void *)&a1[v507];
            unint64_t v509 = v508 + 1;
            if (v508 == -1 || v509 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v510 = *(unsigned char *)(*(void *)&a1[*v5] + v508);
              *(void *)&a1[v507] = v509;
              v506 |= (unint64_t)(v510 & 0x7F) << v504;
              if (v510 < 0)
              {
                v504 += 7;
                BOOL v13 = v505++ >= 9;
                if (v13)
                {
                  unint64_t v506 = 0;
                  int v511 = a1[*v4];
                  goto LABEL_1298;
                }
                continue;
              }
            }
            break;
          }
          int v511 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v506 = 0;
          }
LABEL_1298:
          int v512 = v506 & 7;
          if (v511) {
            BOOL v513 = 1;
          }
          else {
            BOOL v513 = v512 == 4;
          }
          if (!v513)
          {
            switch((v506 >> 3))
            {
              case 1u:
                if (v512 == 2) {
                  goto LABEL_1335;
                }
                goto LABEL_3811;
              case 2u:
                if (v512 == 2) {
                  goto LABEL_1335;
                }
                goto LABEL_3811;
              case 3u:
                if ((v506 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v514 = 0;
                while (1)
                {
                  uint64_t v515 = *v2;
                  uint64_t v516 = *(void *)&a1[v515];
                  unint64_t v517 = v516 + 1;
                  if (v516 == -1 || v517 > *(void *)&a1[*v3]) {
                    goto LABEL_1331;
                  }
                  int v518 = *(char *)(*(void *)&a1[*v5] + v516);
                  *(void *)&a1[v515] = v517;
                  if (v518 < 0)
                  {
                    BOOL v52 = v514++ > 8;
                    if (!v52) {
                      continue;
                    }
                  }
                  goto LABEL_1286;
                }
              case 4u:
                if (v512 != 2 || !PBReaderPlaceMark() || !GEOPDHoursIsValid(a1)) {
                  goto LABEL_3811;
                }
                goto LABEL_1322;
              case 5u:
                if (v512 != 2 || !PBReaderPlaceMark() || !GEOTimezoneIsValid(a1)) {
                  goto LABEL_3811;
                }
LABEL_1322:
                PBReaderRecallMark();
                continue;
              case 6u:
                if ((v506 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v519 = 0;
                do
                {
                  uint64_t v520 = *v2;
                  uint64_t v521 = *(void *)&a1[v520];
                  unint64_t v522 = v521 + 1;
                  if (v521 == -1 || v522 > *(void *)&a1[*v3])
                  {
LABEL_1331:
                    a1[*v4] = 1;
                    goto LABEL_1286;
                  }
                  int v523 = *(char *)(*(void *)&a1[*v5] + v521);
                  *(void *)&a1[v520] = v522;
                  if ((v523 & 0x80000000) == 0) {
                    break;
                  }
                  BOOL v52 = v519++ > 8;
                }
                while (!v52);
                break;
              case 7u:
                if (v512 == 2) {
                  goto LABEL_1335;
                }
                goto LABEL_3811;
              case 8u:
                if (v512 == 2) {
                  goto LABEL_1335;
                }
                goto LABEL_3811;
              default:
LABEL_1335:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
            }
            continue;
          }
          goto LABEL_3776;
        }
      case 0x28u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3776;
            }
            char v524 = 0;
            unsigned int v525 = 0;
            unint64_t v526 = 0;
            while (2)
            {
              uint64_t v527 = *v2;
              uint64_t v528 = *(void *)&a1[v527];
              unint64_t v529 = v528 + 1;
              if (v528 == -1 || v529 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v530 = *(unsigned char *)(*(void *)&a1[*v5] + v528);
                *(void *)&a1[v527] = v529;
                v526 |= (unint64_t)(v530 & 0x7F) << v524;
                if (v530 < 0)
                {
                  v524 += 7;
                  BOOL v13 = v525++ >= 9;
                  if (v13)
                  {
                    unint64_t v526 = 0;
                    int v531 = a1[*v4];
                    goto LABEL_1352;
                  }
                  continue;
                }
              }
              break;
            }
            int v531 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v526 = 0;
            }
LABEL_1352:
            int v532 = v526 & 7;
            if (v531) {
              BOOL v533 = 1;
            }
            else {
              BOOL v533 = v532 == 4;
            }
            if (v533) {
              goto LABEL_3776;
            }
            if ((v526 >> 3) != 2 && (v526 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
            break;
          }
          if (v532 == 2 && PBReaderPlaceMark() && GEOPDQuickLinkItemIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x29u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDGuideSummaryLayoutMetadataIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x2Au:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3776;
            }
            char v534 = 0;
            unsigned int v535 = 0;
            unint64_t v536 = 0;
            while (2)
            {
              uint64_t v537 = *v2;
              uint64_t v538 = *(void *)&a1[v537];
              unint64_t v539 = v538 + 1;
              if (v538 == -1 || v539 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v540 = *(unsigned char *)(*(void *)&a1[*v5] + v538);
                *(void *)&a1[v537] = v539;
                v536 |= (unint64_t)(v540 & 0x7F) << v534;
                if (v540 < 0)
                {
                  v534 += 7;
                  BOOL v13 = v535++ >= 9;
                  if (v13)
                  {
                    unint64_t v536 = 0;
                    int v541 = a1[*v4];
                    goto LABEL_1383;
                  }
                  continue;
                }
              }
              break;
            }
            int v541 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v536 = 0;
            }
LABEL_1383:
            int v542 = v536 & 7;
            if (v541) {
              BOOL v543 = 1;
            }
            else {
              BOOL v543 = v542 == 4;
            }
            if (v543) {
              goto LABEL_3776;
            }
            unint64_t v544 = v536 >> 3;
            if ((v536 >> 3) != 3 && v544 != 2 && v544 != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
            break;
          }
          if (v542 == 2 && PBReaderPlaceMark() && GEOMapRegionIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x2Bu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_3411;
          }
          char v545 = 0;
          unsigned int v546 = 0;
          unint64_t v547 = 0;
          while (2)
          {
            uint64_t v548 = *v2;
            uint64_t v549 = *(void *)&a1[v548];
            unint64_t v550 = v549 + 1;
            if (v549 == -1 || v550 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v551 = *(unsigned char *)(*(void *)&a1[*v5] + v549);
              *(void *)&a1[v548] = v550;
              v547 |= (unint64_t)(v551 & 0x7F) << v545;
              if (v551 < 0)
              {
                v545 += 7;
                BOOL v13 = v546++ >= 9;
                if (v13)
                {
                  unint64_t v547 = 0;
                  uint64_t v552 = *v4;
                  int v553 = a1[v552];
                  goto LABEL_1411;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v552 = *v4;
          int v553 = a1[v552];
          if (a1[v552]) {
            unint64_t v547 = 0;
          }
LABEL_1411:
          int v554 = v547 & 7;
          if (v553) {
            BOOL v555 = 1;
          }
          else {
            BOOL v555 = v554 == 4;
          }
          if (!v555)
          {
            switch((v547 >> 3))
            {
              case 1u:
                if (v554 == 2) {
                  goto LABEL_1425;
                }
                goto LABEL_3811;
              case 2u:
                if (v554 != 2) {
                  goto LABEL_3811;
                }
LABEL_1425:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
              case 3u:
              case 4u:
                if (v554 != 1) {
                  goto LABEL_3811;
                }
                uint64_t v556 = *v2;
                unint64_t v557 = *(void *)&a1[v556];
                if (v557 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t v558 = v557 + 8, v558 <= *(void *)&a1[*v3])) {
                  *(void *)&a1[v556] = v558;
                }
                else {
                  a1[v552] = 1;
                }
                continue;
              default:
                if (!PBReaderSkipValueWithTag()) {
                  goto LABEL_3811;
                }
                continue;
            }
          }
          goto LABEL_3411;
        }
      case 0x2Cu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_1431:
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3411;
            }
            char v559 = 0;
            unsigned int v560 = 0;
            unint64_t v561 = 0;
            while (2)
            {
              uint64_t v562 = *v2;
              uint64_t v563 = *(void *)&a1[v562];
              unint64_t v564 = v563 + 1;
              if (v563 == -1 || v564 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v565 = *(unsigned char *)(*(void *)&a1[*v5] + v563);
                *(void *)&a1[v562] = v564;
                v561 |= (unint64_t)(v565 & 0x7F) << v559;
                if (v565 < 0)
                {
                  v559 += 7;
                  BOOL v13 = v560++ >= 9;
                  if (v13)
                  {
                    unint64_t v561 = 0;
                    int v566 = a1[*v4];
                    goto LABEL_1443;
                  }
                  continue;
                }
              }
              break;
            }
            int v566 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v561 = 0;
            }
LABEL_1443:
            if (v566) {
              BOOL v567 = 1;
            }
            else {
              BOOL v567 = (v561 & 7) == 4;
            }
            if (v567) {
              goto LABEL_3411;
            }
            if ((v561 >> 3) == 2)
            {
              if ((v561 & 7) != 0) {
                goto LABEL_3811;
              }
              unsigned int v573 = 0;
              while (1)
              {
                uint64_t v574 = *v2;
                uint64_t v575 = *(void *)&a1[v574];
                unint64_t v576 = v575 + 1;
                if (v575 == -1 || v576 > *(void *)&a1[*v3]) {
                  break;
                }
                int v577 = *(char *)(*(void *)&a1[*v5] + v575);
                *(void *)&a1[v574] = v576;
                if (v577 < 0)
                {
                  BOOL v52 = v573++ > 8;
                  if (!v52) {
                    continue;
                  }
                }
                goto LABEL_1431;
              }
LABEL_1465:
              a1[*v4] = 1;
              continue;
            }
            break;
          }
          if ((v561 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_3811;
            }
            continue;
          }
          break;
        }
        if ((v561 & 7) == 0)
        {
          unsigned int v568 = 0;
          while (1)
          {
            uint64_t v569 = *v2;
            uint64_t v570 = *(void *)&a1[v569];
            unint64_t v571 = v570 + 1;
            if (v570 == -1 || v571 > *(void *)&a1[*v3]) {
              goto LABEL_1465;
            }
            int v572 = *(char *)(*(void *)&a1[*v5] + v570);
            *(void *)&a1[v569] = v571;
            if (v572 < 0)
            {
              BOOL v52 = v568++ > 8;
              if (!v52) {
                continue;
              }
            }
            goto LABEL_1431;
          }
        }
        goto LABEL_3811;
      case 0x30u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDVenueInfoIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x32u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_1475:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_3776;
          }
          char v578 = 0;
          unsigned int v579 = 0;
          unint64_t v580 = 0;
          while (2)
          {
            uint64_t v581 = *v2;
            uint64_t v582 = *(void *)&a1[v581];
            unint64_t v583 = v582 + 1;
            if (v582 == -1 || v583 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v584 = *(unsigned char *)(*(void *)&a1[*v5] + v582);
              *(void *)&a1[v581] = v583;
              v580 |= (unint64_t)(v584 & 0x7F) << v578;
              if (v584 < 0)
              {
                v578 += 7;
                BOOL v13 = v579++ >= 9;
                if (v13)
                {
                  unint64_t v580 = 0;
                  int v585 = a1[*v4];
                  goto LABEL_1487;
                }
                continue;
              }
            }
            break;
          }
          int v585 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v580 = 0;
          }
LABEL_1487:
          int v586 = v580 & 7;
          if (v585) {
            BOOL v587 = 1;
          }
          else {
            BOOL v587 = v586 == 4;
          }
          if (!v587)
          {
            switch((v580 >> 3))
            {
              case 1u:
              case 2u:
              case 4u:
                if (v586 != 2 || !PBReaderPlaceMark() || !GEOPDLinkedPlaceIsValid(a1)) {
                  goto LABEL_3811;
                }
                PBReaderRecallMark();
                continue;
              case 3u:
                if ((v580 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v588 = 0;
                break;
              default:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
            }
            do
            {
              uint64_t v589 = *v2;
              uint64_t v590 = *(void *)&a1[v589];
              unint64_t v591 = v590 + 1;
              if (v590 == -1 || v591 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
                goto LABEL_1475;
              }
              int v592 = *(char *)(*(void *)&a1[*v5] + v590);
              *(void *)&a1[v589] = v591;
              if ((v592 & 0x80000000) == 0) {
                break;
              }
              BOOL v52 = v588++ > 8;
            }
            while (!v52);
            continue;
          }
          goto LABEL_3776;
        }
      case 0x33u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_1510:
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3411;
            }
            char v593 = 0;
            unsigned int v594 = 0;
            unint64_t v595 = 0;
            while (2)
            {
              uint64_t v596 = *v2;
              uint64_t v597 = *(void *)&a1[v596];
              unint64_t v598 = v597 + 1;
              if (v597 == -1 || v598 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v599 = *(unsigned char *)(*(void *)&a1[*v5] + v597);
                *(void *)&a1[v596] = v598;
                v595 |= (unint64_t)(v599 & 0x7F) << v593;
                if (v599 < 0)
                {
                  v593 += 7;
                  BOOL v13 = v594++ >= 9;
                  if (v13)
                  {
                    unint64_t v595 = 0;
                    int v600 = a1[*v4];
                    goto LABEL_1522;
                  }
                  continue;
                }
              }
              break;
            }
            int v600 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v595 = 0;
            }
LABEL_1522:
            if (v600) {
              BOOL v601 = 1;
            }
            else {
              BOOL v601 = (v595 & 7) == 4;
            }
            if (v601) {
              goto LABEL_3411;
            }
            unint64_t v602 = v595 >> 3;
            if ((v595 >> 3) == 3)
            {
              if ((v595 & 7) != 0) {
                goto LABEL_3811;
              }
              unsigned int v608 = 0;
              while (1)
              {
                uint64_t v609 = *v2;
                uint64_t v610 = *(void *)&a1[v609];
                unint64_t v611 = v610 + 1;
                if (v610 == -1 || v611 > *(void *)&a1[*v3]) {
                  break;
                }
                int v612 = *(char *)(*(void *)&a1[*v5] + v610);
                *(void *)&a1[v609] = v611;
                if (v612 < 0)
                {
                  BOOL v52 = v608++ > 8;
                  if (!v52) {
                    continue;
                  }
                }
                goto LABEL_1510;
              }
LABEL_1553:
              a1[*v4] = 1;
              continue;
            }
            break;
          }
          if (v602 == 2)
          {
            if ((v595 & 7) != 0) {
              goto LABEL_3811;
            }
            unsigned int v613 = 0;
            while (1)
            {
              uint64_t v614 = *v2;
              uint64_t v615 = *(void *)&a1[v614];
              unint64_t v616 = v615 + 1;
              if (v615 == -1 || v616 > *(void *)&a1[*v3]) {
                goto LABEL_1553;
              }
              int v617 = *(char *)(*(void *)&a1[*v5] + v615);
              *(void *)&a1[v614] = v616;
              if (v617 < 0)
              {
                BOOL v52 = v613++ > 8;
                if (!v52) {
                  continue;
                }
              }
              goto LABEL_1510;
            }
          }
          if (v602 != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_3811;
            }
            continue;
          }
          break;
        }
        if ((v595 & 7) == 0)
        {
          unsigned int v603 = 0;
          while (1)
          {
            uint64_t v604 = *v2;
            uint64_t v605 = *(void *)&a1[v604];
            unint64_t v606 = v605 + 1;
            if (v605 == -1 || v606 > *(void *)&a1[*v3]) {
              goto LABEL_1553;
            }
            int v607 = *(char *)(*(void *)&a1[*v5] + v605);
            *(void *)&a1[v604] = v606;
            if (v607 < 0)
            {
              BOOL v52 = v603++ > 8;
              if (!v52) {
                continue;
              }
            }
            goto LABEL_1510;
          }
        }
LABEL_3811:
        PBReaderRecallMark();
LABEL_3812:
        PBReaderRecallMark();
        return 0;
      case 0x34u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDIconIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x35u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAdamAppIdentifierIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x36u:
      case 0x46u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDSearchBrowseCategorySuggestionResultIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x37u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDStorefrontIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x38u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_1571:
        while (2)
        {
          while (2)
          {
            while (2)
            {
              if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                goto LABEL_2246;
              }
              char v618 = 0;
              unsigned int v619 = 0;
              unint64_t v620 = 0;
              while (2)
              {
                uint64_t v621 = *v2;
                uint64_t v622 = *(void *)&a1[v621];
                unint64_t v623 = v622 + 1;
                if (v622 == -1 || v623 > *(void *)&a1[*v3])
                {
                  a1[*v4] = 1;
                }
                else
                {
                  char v624 = *(unsigned char *)(*(void *)&a1[*v5] + v622);
                  *(void *)&a1[v621] = v623;
                  v620 |= (unint64_t)(v624 & 0x7F) << v618;
                  if (v624 < 0)
                  {
                    v618 += 7;
                    BOOL v13 = v619++ >= 9;
                    if (v13)
                    {
                      unint64_t v620 = 0;
                      int v625 = a1[*v4];
                      goto LABEL_1583;
                    }
                    continue;
                  }
                }
                break;
              }
              int v625 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v620 = 0;
              }
LABEL_1583:
              int v626 = v620 & 7;
              if (v625) {
                BOOL v627 = 1;
              }
              else {
                BOOL v627 = v626 == 4;
              }
              if (v627) {
                goto LABEL_2246;
              }
              if ((v620 >> 3) == 2)
              {
                if (v626 != 2 || !PBReaderPlaceMark()) {
                  goto LABEL_3811;
                }
                [a1 position];
                [a1 length];
                while (2)
                {
                  if (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
                  {
                    char v633 = 0;
                    unsigned int v634 = 0;
                    unint64_t v635 = 0;
                    while (1)
                    {
                      uint64_t v636 = *v2;
                      uint64_t v637 = *(void *)&a1[v636];
                      unint64_t v638 = v637 + 1;
                      if (v637 == -1 || v638 > *(void *)&a1[*v3]) {
                        break;
                      }
                      char v639 = *(unsigned char *)(*(void *)&a1[*v5] + v637);
                      *(void *)&a1[v636] = v638;
                      v635 |= (unint64_t)(v639 & 0x7F) << v633;
                      if ((v639 & 0x80) == 0) {
                        goto LABEL_1610;
                      }
                      v633 += 7;
                      BOOL v13 = v634++ >= 9;
                      if (v13)
                      {
                        unint64_t v635 = 0;
                        uint64_t v640 = *v4;
                        int v641 = a1[v640];
                        goto LABEL_1612;
                      }
                    }
                    a1[*v4] = 1;
LABEL_1610:
                    uint64_t v640 = *v4;
                    int v641 = a1[v640];
                    if (a1[v640]) {
                      unint64_t v635 = 0;
                    }
LABEL_1612:
                    int v642 = v635 & 7;
                    if (v641) {
                      BOOL v643 = 1;
                    }
                    else {
                      BOOL v643 = v642 == 4;
                    }
                    if (!v643)
                    {
                      switch((v635 >> 3))
                      {
                        case 1u:
                          if (v642 == 2) {
                            goto LABEL_1628;
                          }
                          goto LABEL_3798;
                        case 2u:
                          if (v642 == 2) {
                            goto LABEL_1628;
                          }
                          goto LABEL_3798;
                        case 3u:
                        case 4u:
                          if (v642 != 1) {
                            goto LABEL_3798;
                          }
                          uint64_t v644 = *v2;
                          unint64_t v645 = *(void *)&a1[v644];
                          if (v645 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t v646 = v645 + 8, v646 <= *(void *)&a1[*v3])) {
                            *(void *)&a1[v644] = v646;
                          }
                          else {
                            a1[v640] = 1;
                          }
                          continue;
                        case 5u:
                          if (v642 != 2) {
                            goto LABEL_3798;
                          }
LABEL_1628:
                          if ((PBReaderSkipValueWithTag() & 1) == 0) {
                            goto LABEL_3798;
                          }
                          continue;
                        default:
                          if (!PBReaderSkipValueWithTag()) {
                            goto LABEL_3798;
                          }
                          continue;
                      }
                    }
                  }
                  break;
                }
                int v647 = a1[*v4];
                PBReaderRecallMark();
                if (!v647)
                {
                  PBReaderRecallMark();
                  continue;
                }
                goto LABEL_3811;
              }
              break;
            }
            if ((v620 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
            break;
          }
          if ((v620 & 7) == 0)
          {
            unsigned int v628 = 0;
            do
            {
              uint64_t v629 = *v2;
              uint64_t v630 = *(void *)&a1[v629];
              unint64_t v631 = v630 + 1;
              if (v630 == -1 || v631 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
                goto LABEL_1571;
              }
              int v632 = *(char *)(*(void *)&a1[*v5] + v630);
              *(void *)&a1[v629] = v631;
              if ((v632 & 0x80000000) == 0) {
                break;
              }
              BOOL v52 = v628++ > 8;
            }
            while (!v52);
            continue;
          }
          goto LABEL_3811;
        }
      case 0x39u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_1639:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_3652;
          }
          char v648 = 0;
          unsigned int v649 = 0;
          unint64_t v650 = 0;
          while (2)
          {
            uint64_t v651 = *v2;
            uint64_t v652 = *(void *)&a1[v651];
            unint64_t v653 = v652 + 1;
            if (v652 == -1 || v653 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v654 = *(unsigned char *)(*(void *)&a1[*v5] + v652);
              *(void *)&a1[v651] = v653;
              v650 |= (unint64_t)(v654 & 0x7F) << v648;
              if (v654 < 0)
              {
                v648 += 7;
                BOOL v13 = v649++ >= 9;
                if (v13)
                {
                  unint64_t v650 = 0;
                  int v655 = a1[*v4];
                  goto LABEL_1651;
                }
                continue;
              }
            }
            break;
          }
          int v655 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v650 = 0;
          }
LABEL_1651:
          int v656 = v650 & 7;
          if (v655) {
            BOOL v657 = 1;
          }
          else {
            BOOL v657 = v656 == 4;
          }
          if (v657) {
            goto LABEL_3652;
          }
          switch((v650 >> 3))
          {
            case 1u:
              if (v656 == 2) {
                goto LABEL_1657;
              }
              goto LABEL_3811;
            case 2u:
              if (v656 != 2 || !PBReaderPlaceMark()) {
                goto LABEL_3811;
              }
              [a1 position];
              [a1 length];
LABEL_1662:
              while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
              {
                char v658 = 0;
                unsigned int v659 = 0;
                unint64_t v660 = 0;
                while (1)
                {
                  uint64_t v661 = *v2;
                  uint64_t v662 = *(void *)&a1[v661];
                  unint64_t v663 = v662 + 1;
                  if (v662 == -1 || v663 > *(void *)&a1[*v3]) {
                    break;
                  }
                  char v664 = *(unsigned char *)(*(void *)&a1[*v5] + v662);
                  *(void *)&a1[v661] = v663;
                  v660 |= (unint64_t)(v664 & 0x7F) << v658;
                  if ((v664 & 0x80) == 0) {
                    goto LABEL_1672;
                  }
                  v658 += 7;
                  BOOL v13 = v659++ >= 9;
                  if (v13)
                  {
                    unint64_t v660 = 0;
                    int v665 = a1[*v4];
                    goto LABEL_1674;
                  }
                }
                a1[*v4] = 1;
LABEL_1672:
                int v665 = a1[*v4];
                if (a1[*v4]) {
                  unint64_t v660 = 0;
                }
LABEL_1674:
                int v666 = v660 & 7;
                if (v665 || v666 == 4) {
                  break;
                }
                if ((v660 >> 3) == 2)
                {
                  if ((v660 & 7) == 0)
                  {
                    unsigned int v683 = 0;
                    do
                    {
                      uint64_t v684 = *v2;
                      uint64_t v685 = *(void *)&a1[v684];
                      unint64_t v686 = v685 + 1;
                      if (v685 == -1 || v686 > *(void *)&a1[*v3])
                      {
                        a1[*v4] = 1;
                        goto LABEL_1662;
                      }
                      int v687 = *(char *)(*(void *)&a1[*v5] + v685);
                      *(void *)&a1[v684] = v686;
                      if ((v687 & 0x80000000) == 0) {
                        break;
                      }
                      BOOL v52 = v683++ > 8;
                    }
                    while (!v52);
                    continue;
                  }
                  goto LABEL_3807;
                }
                if ((v660 >> 3) == 1)
                {
                  if (v666 == 2 && PBReaderPlaceMark())
                  {
                    [a1 position];
                    [a1 length];
LABEL_1683:
                    while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
                    {
                      char v668 = 0;
                      unsigned int v669 = 0;
                      unint64_t v670 = 0;
                      while (1)
                      {
                        uint64_t v671 = *v2;
                        uint64_t v672 = *(void *)&a1[v671];
                        unint64_t v673 = v672 + 1;
                        if (v672 == -1 || v673 > *(void *)&a1[*v3]) {
                          break;
                        }
                        char v674 = *(unsigned char *)(*(void *)&a1[*v5] + v672);
                        *(void *)&a1[v671] = v673;
                        v670 |= (unint64_t)(v674 & 0x7F) << v668;
                        if ((v674 & 0x80) == 0) {
                          goto LABEL_1693;
                        }
                        v668 += 7;
                        BOOL v13 = v669++ >= 9;
                        if (v13)
                        {
                          unint64_t v670 = 0;
                          int v675 = a1[*v4];
                          goto LABEL_1695;
                        }
                      }
                      a1[*v4] = 1;
LABEL_1693:
                      int v675 = a1[*v4];
                      if (a1[*v4]) {
                        unint64_t v670 = 0;
                      }
LABEL_1695:
                      int v676 = v670 & 7;
                      if (v675 || v676 == 4) {
                        break;
                      }
                      switch((v670 >> 3))
                      {
                        case 1u:
                          if (v676 != 2 || !PBReaderPlaceMark() || !GEOPDPhotoIsValid(a1)) {
                            goto LABEL_3804;
                          }
                          PBReaderRecallMark();
                          continue;
                        case 2u:
                          if (v676 == 2) {
                            goto LABEL_1707;
                          }
                          goto LABEL_3804;
                        case 3u:
                          if (v676 == 2) {
                            goto LABEL_1707;
                          }
                          goto LABEL_3804;
                        case 4u:
                          if ((v670 & 7) != 0) {
                            goto LABEL_3804;
                          }
                          unsigned int v678 = 0;
                          break;
                        default:
LABEL_1707:
                          if ((PBReaderSkipValueWithTag() & 1) == 0) {
                            goto LABEL_3804;
                          }
                          continue;
                      }
                      while (1)
                      {
                        uint64_t v679 = *v2;
                        uint64_t v680 = *(void *)&a1[v679];
                        unint64_t v681 = v680 + 1;
                        if (v680 == -1 || v681 > *(void *)&a1[*v3]) {
                          break;
                        }
                        int v682 = *(char *)(*(void *)&a1[*v5] + v680);
                        *(void *)&a1[v679] = v681;
                        if (v682 < 0)
                        {
                          BOOL v52 = v678++ > 8;
                          if (!v52) {
                            continue;
                          }
                        }
                        goto LABEL_1683;
                      }
                      a1[*v4] = 1;
                    }
                    int v688 = a1[*v4];
                    PBReaderRecallMark();
                    if (!v688)
                    {
                      PBReaderRecallMark();
                      continue;
                    }
                  }
LABEL_3807:
                  PBReaderRecallMark();
                  goto LABEL_3811;
                }
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3807;
                }
              }
              int v734 = a1[*v4];
              PBReaderRecallMark();
              if (v734) {
                goto LABEL_3811;
              }
              goto LABEL_1833;
            case 3u:
              if (v656 != 2 || !PBReaderPlaceMark()) {
                goto LABEL_3811;
              }
              [a1 position];
              [a1 length];
              break;
            case 4u:
              if ((v650 & 7) != 0) {
                goto LABEL_3811;
              }
              unsigned int v729 = 0;
              do
              {
                uint64_t v730 = *v2;
                uint64_t v731 = *(void *)&a1[v730];
                unint64_t v732 = v731 + 1;
                if (v731 == -1 || v732 > *(void *)&a1[*v3])
                {
                  a1[*v4] = 1;
                  goto LABEL_1639;
                }
                int v733 = *(char *)(*(void *)&a1[*v5] + v731);
                *(void *)&a1[v730] = v732;
                if ((v733 & 0x80000000) == 0) {
                  break;
                }
                BOOL v52 = v729++ > 8;
              }
              while (!v52);
              continue;
            default:
LABEL_1657:
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
          }
          break;
        }
        while (1)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_1832;
          }
          char v689 = 0;
          unsigned int v690 = 0;
          unint64_t v691 = 0;
          while (1)
          {
            uint64_t v692 = *v2;
            uint64_t v693 = *(void *)&a1[v692];
            unint64_t v694 = v693 + 1;
            if (v693 == -1 || v694 > *(void *)&a1[*v3]) {
              break;
            }
            char v695 = *(unsigned char *)(*(void *)&a1[*v5] + v693);
            *(void *)&a1[v692] = v694;
            v691 |= (unint64_t)(v695 & 0x7F) << v689;
            if ((v695 & 0x80) == 0) {
              goto LABEL_1744;
            }
            v689 += 7;
            BOOL v13 = v690++ >= 9;
            if (v13)
            {
              unint64_t v691 = 0;
              int v696 = a1[*v4];
              goto LABEL_1746;
            }
          }
          a1[*v4] = 1;
LABEL_1744:
          int v696 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v691 = 0;
          }
LABEL_1746:
          int v697 = v691 & 7;
          if (v696 || v697 == 4)
          {
LABEL_1832:
            int v735 = a1[*v4];
            PBReaderRecallMark();
            if (v735) {
              goto LABEL_3811;
            }
LABEL_1833:
            PBReaderRecallMark();
            goto LABEL_1639;
          }
          if ((v691 >> 3) == 2) {
            break;
          }
          if ((v691 >> 3) == 1)
          {
            if (v697 != 2 || !PBReaderPlaceMark()) {
              goto LABEL_3807;
            }
            [a1 position];
            [a1 length];
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
            {
              char v699 = 0;
              unsigned int v700 = 0;
              unint64_t v701 = 0;
              while (1)
              {
                uint64_t v702 = *v2;
                uint64_t v703 = *(void *)&a1[v702];
                unint64_t v704 = v703 + 1;
                if (v703 == -1 || v704 > *(void *)&a1[*v3]) {
                  break;
                }
                char v705 = *(unsigned char *)(*(void *)&a1[*v5] + v703);
                *(void *)&a1[v702] = v704;
                v701 |= (unint64_t)(v705 & 0x7F) << v699;
                if ((v705 & 0x80) == 0) {
                  goto LABEL_1765;
                }
                v699 += 7;
                BOOL v13 = v700++ >= 9;
                if (v13)
                {
                  unint64_t v701 = 0;
                  int v706 = a1[*v4];
                  goto LABEL_1767;
                }
              }
              a1[*v4] = 1;
LABEL_1765:
              int v706 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v701 = 0;
              }
LABEL_1767:
              int v707 = v701 & 7;
              if (v706 || v707 == 4) {
                break;
              }
              if ((v701 >> 3) == 1)
              {
                if (v707 != 2 || (PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3806;
                }
              }
              else if (!PBReaderSkipValueWithTag())
              {
                goto LABEL_3806;
              }
            }
LABEL_1817:
            int v728 = a1[*v4];
            PBReaderRecallMark();
            if (!v728)
            {
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_3807;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_3807;
          }
        }
        if (v697 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3807;
        }
        [a1 position];
        [a1 length];
        while (1)
        {
          while (1)
          {
LABEL_1780:
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_1817;
            }
            char v709 = 0;
            unsigned int v710 = 0;
            unint64_t v711 = 0;
            while (1)
            {
              uint64_t v712 = *v2;
              uint64_t v713 = *(void *)&a1[v712];
              unint64_t v714 = v713 + 1;
              if (v713 == -1 || v714 > *(void *)&a1[*v3]) {
                break;
              }
              char v715 = *(unsigned char *)(*(void *)&a1[*v5] + v713);
              *(void *)&a1[v712] = v714;
              v711 |= (unint64_t)(v715 & 0x7F) << v709;
              if ((v715 & 0x80) == 0) {
                goto LABEL_1790;
              }
              v709 += 7;
              BOOL v13 = v710++ >= 9;
              if (v13)
              {
                unint64_t v711 = 0;
                int v716 = a1[*v4];
                goto LABEL_1792;
              }
            }
            a1[*v4] = 1;
LABEL_1790:
            int v716 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v711 = 0;
            }
LABEL_1792:
            if (v716 || (v711 & 7) == 4) {
              goto LABEL_1817;
            }
            if ((v711 >> 3) != 2) {
              break;
            }
            if ((v711 & 7) != 0) {
              goto LABEL_3806;
            }
            unsigned int v723 = 0;
            while (1)
            {
              uint64_t v724 = *v2;
              uint64_t v725 = *(void *)&a1[v724];
              unint64_t v726 = v725 + 1;
              if (v725 == -1 || v726 > *(void *)&a1[*v3]) {
                break;
              }
              int v727 = *(char *)(*(void *)&a1[*v5] + v725);
              *(void *)&a1[v724] = v726;
              if (v727 < 0)
              {
                BOOL v52 = v723++ > 8;
                if (!v52) {
                  continue;
                }
              }
              goto LABEL_1780;
            }
LABEL_1814:
            a1[*v4] = 1;
          }
          if ((v711 >> 3) == 1)
          {
            if ((v711 & 7) != 0) {
              goto LABEL_3806;
            }
            unsigned int v718 = 0;
            while (1)
            {
              uint64_t v719 = *v2;
              uint64_t v720 = *(void *)&a1[v719];
              unint64_t v721 = v720 + 1;
              if (v720 == -1 || v721 > *(void *)&a1[*v3]) {
                goto LABEL_1814;
              }
              int v722 = *(char *)(*(void *)&a1[*v5] + v720);
              *(void *)&a1[v719] = v721;
              if (v722 < 0)
              {
                BOOL v52 = v718++ > 8;
                if (!v52) {
                  continue;
                }
              }
              goto LABEL_1780;
            }
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_3806:
            PBReaderRecallMark();
            goto LABEL_3807;
          }
        }
      case 0x3Au:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_1837:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_3366;
          }
          char v736 = 0;
          unsigned int v737 = 0;
          unint64_t v738 = 0;
          while (2)
          {
            uint64_t v739 = *v2;
            uint64_t v740 = *(void *)&a1[v739];
            unint64_t v741 = v740 + 1;
            if (v740 == -1 || v741 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v742 = *(unsigned char *)(*(void *)&a1[*v5] + v740);
              *(void *)&a1[v739] = v741;
              v738 |= (unint64_t)(v742 & 0x7F) << v736;
              if (v742 < 0)
              {
                v736 += 7;
                BOOL v13 = v737++ >= 9;
                if (v13)
                {
                  unint64_t v738 = 0;
                  int v743 = a1[*v4];
                  goto LABEL_1849;
                }
                continue;
              }
            }
            break;
          }
          int v743 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v738 = 0;
          }
LABEL_1849:
          int v744 = v738 & 7;
          if (v743) {
            BOOL v745 = 1;
          }
          else {
            BOOL v745 = v744 == 4;
          }
          if (!v745)
          {
            switch((v738 >> 3))
            {
              case 1u:
              case 4u:
                if (v744 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1)) {
                  goto LABEL_3811;
                }
                goto LABEL_1940;
              case 2u:
                if (v744 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1)) {
                  goto LABEL_3811;
                }
                goto LABEL_1940;
              case 3u:
                if (v744 != 2 || !PBReaderPlaceMark()) {
                  goto LABEL_3811;
                }
                [a1 position];
                [a1 length];
                while (1)
                {
LABEL_1867:
                  if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                    goto LABEL_1939;
                  }
                  char v746 = 0;
                  unsigned int v747 = 0;
                  unint64_t v748 = 0;
                  while (1)
                  {
                    uint64_t v749 = *v2;
                    uint64_t v750 = *(void *)&a1[v749];
                    unint64_t v751 = v750 + 1;
                    if (v750 == -1 || v751 > *(void *)&a1[*v3]) {
                      break;
                    }
                    char v752 = *(unsigned char *)(*(void *)&a1[*v5] + v750);
                    *(void *)&a1[v749] = v751;
                    v748 |= (unint64_t)(v752 & 0x7F) << v746;
                    if ((v752 & 0x80) == 0) {
                      goto LABEL_1877;
                    }
                    v746 += 7;
                    BOOL v13 = v747++ >= 9;
                    if (v13)
                    {
                      unint64_t v748 = 0;
                      int v753 = a1[*v4];
                      goto LABEL_1879;
                    }
                  }
                  a1[*v4] = 1;
LABEL_1877:
                  int v753 = a1[*v4];
                  if (a1[*v4]) {
                    unint64_t v748 = 0;
                  }
LABEL_1879:
                  int v754 = v748 & 7;
                  if (v753 || v754 == 4) {
                    goto LABEL_1939;
                  }
                  if ((v748 >> 3) == 2) {
                    break;
                  }
                  if ((v748 >> 3) == 1)
                  {
                    if ((v748 & 7) == 0)
                    {
                      unsigned int v756 = 0;
                      do
                      {
                        uint64_t v757 = *v2;
                        uint64_t v758 = *(void *)&a1[v757];
                        unint64_t v759 = v758 + 1;
                        if (v758 == -1 || v759 > *(void *)&a1[*v3])
                        {
                          a1[*v4] = 1;
                          goto LABEL_1867;
                        }
                        int v760 = *(char *)(*(void *)&a1[*v5] + v758);
                        *(void *)&a1[v757] = v759;
                        if ((v760 & 0x80000000) == 0) {
                          break;
                        }
                        BOOL v52 = v756++ > 8;
                      }
                      while (!v52);
                      continue;
                    }
                    goto LABEL_3796;
                  }
                  if ((PBReaderSkipValueWithTag() & 1) == 0) {
                    goto LABEL_3796;
                  }
                }
                if (v754 == 2 && PBReaderPlaceMark() && GEOPDCategoryIsValid(a1))
                {
                  PBReaderRecallMark();
                  goto LABEL_1867;
                }
                goto LABEL_3796;
              case 5u:
                if (v744 != 2 || !PBReaderPlaceMark() || !GEOPDDateTimeRangeIsValid(a1)) {
                  goto LABEL_3811;
                }
                goto LABEL_1940;
              case 6u:
                if (v744 == 2 && PBReaderPlaceMark() && GEOTimezoneIsValid(a1)) {
                  goto LABEL_1940;
                }
                goto LABEL_3811;
              case 7u:
                if (v744 != 2 || !PBReaderPlaceMark()) {
                  goto LABEL_3811;
                }
                [a1 position];
                [a1 length];
LABEL_1911:
                if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                  goto LABEL_1939;
                }
                char v761 = 0;
                unsigned int v762 = 0;
                unint64_t v763 = 0;
                break;
              case 8u:
                if ((v738 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v772 = 0;
                do
                {
                  uint64_t v773 = *v2;
                  uint64_t v774 = *(void *)&a1[v773];
                  unint64_t v775 = v774 + 1;
                  if (v774 == -1 || v775 > *(void *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                    goto LABEL_1837;
                  }
                  int v776 = *(char *)(*(void *)&a1[*v5] + v774);
                  *(void *)&a1[v773] = v775;
                  if ((v776 & 0x80000000) == 0) {
                    break;
                  }
                  BOOL v52 = v772++ > 8;
                }
                while (!v52);
                continue;
              default:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
            }
            while (1)
            {
              uint64_t v764 = *v2;
              uint64_t v765 = *(void *)&a1[v764];
              unint64_t v766 = v765 + 1;
              if (v765 == -1 || v766 > *(void *)&a1[*v3]) {
                break;
              }
              char v767 = *(unsigned char *)(*(void *)&a1[*v5] + v765);
              *(void *)&a1[v764] = v766;
              v763 |= (unint64_t)(v767 & 0x7F) << v761;
              if ((v767 & 0x80) == 0) {
                goto LABEL_1921;
              }
              v761 += 7;
              BOOL v13 = v762++ >= 9;
              if (v13)
              {
                unint64_t v763 = 0;
                int v768 = a1[*v4];
                goto LABEL_1923;
              }
            }
            a1[*v4] = 1;
LABEL_1921:
            int v768 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v763 = 0;
            }
LABEL_1923:
            int v769 = v763 & 7;
            if (v768) {
              BOOL v770 = 1;
            }
            else {
              BOOL v770 = v769 == 4;
            }
            if (!v770)
            {
              switch((v763 >> 3))
              {
                case 1u:
                  if (v769 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1)) {
                    goto LABEL_3796;
                  }
                  PBReaderRecallMark();
                  goto LABEL_1911;
                case 2u:
                  if (v769 == 2) {
                    goto LABEL_1937;
                  }
                  goto LABEL_3796;
                case 3u:
                  if (v769 == 2) {
                    goto LABEL_1937;
                  }
                  goto LABEL_3796;
                case 4u:
                  if (v769 == 2) {
                    goto LABEL_1937;
                  }
                  goto LABEL_3796;
                default:
LABEL_1937:
                  if ((PBReaderSkipValueWithTag() & 1) == 0) {
                    goto LABEL_3796;
                  }
                  goto LABEL_1911;
              }
            }
LABEL_1939:
            int v771 = a1[*v4];
            PBReaderRecallMark();
            if (!v771)
            {
LABEL_1940:
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_3811;
          }
          goto LABEL_3366;
        }
      case 0x3Bu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDStorefrontPresentationIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x3Cu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlacecardLayoutConfigurationIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x3Du:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_1961:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_2246;
          }
          char v777 = 0;
          unsigned int v778 = 0;
          unint64_t v779 = 0;
          while (2)
          {
            uint64_t v780 = *v2;
            uint64_t v781 = *(void *)&a1[v780];
            unint64_t v782 = v781 + 1;
            if (v781 == -1 || v782 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v783 = *(unsigned char *)(*(void *)&a1[*v5] + v781);
              *(void *)&a1[v780] = v782;
              v779 |= (unint64_t)(v783 & 0x7F) << v777;
              if (v783 < 0)
              {
                v777 += 7;
                BOOL v13 = v778++ >= 9;
                if (v13)
                {
                  unint64_t v779 = 0;
                  int v784 = a1[*v4];
                  goto LABEL_1973;
                }
                continue;
              }
            }
            break;
          }
          int v784 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v779 = 0;
          }
LABEL_1973:
          int v785 = v779 & 7;
          if (v784) {
            BOOL v786 = 1;
          }
          else {
            BOOL v786 = v785 == 4;
          }
          if (v786) {
            goto LABEL_2246;
          }
          if ((v779 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_3811;
            }
            continue;
          }
          break;
        }
        if (v785 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3811;
        }
        [a1 position];
        [a1 length];
        while (1)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_2011;
          }
          char v787 = 0;
          unsigned int v788 = 0;
          unint64_t v789 = 0;
          while (1)
          {
            uint64_t v790 = *v2;
            uint64_t v791 = *(void *)&a1[v790];
            unint64_t v792 = v791 + 1;
            if (v791 == -1 || v792 > *(void *)&a1[*v3]) {
              break;
            }
            char v793 = *(unsigned char *)(*(void *)&a1[*v5] + v791);
            *(void *)&a1[v790] = v792;
            v789 |= (unint64_t)(v793 & 0x7F) << v787;
            if ((v793 & 0x80) == 0) {
              goto LABEL_1991;
            }
            v787 += 7;
            BOOL v13 = v788++ >= 9;
            if (v13)
            {
              unint64_t v789 = 0;
              int v794 = a1[*v4];
              goto LABEL_1993;
            }
          }
          a1[*v4] = 1;
LABEL_1991:
          int v794 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v789 = 0;
          }
LABEL_1993:
          int v795 = v789 & 7;
          if (v794 || v795 == 4)
          {
LABEL_2011:
            int v798 = a1[*v4];
            PBReaderRecallMark();
            if (!v798)
            {
              PBReaderRecallMark();
              goto LABEL_1961;
            }
            goto LABEL_3811;
          }
          unint64_t v797 = v789 >> 3;
          if ((v789 >> 3) == 3) {
            break;
          }
          if (v797 == 2)
          {
            if (v795 != 2) {
              goto LABEL_3798;
            }
            goto LABEL_2005;
          }
          if (v797 == 1)
          {
            if (v795 != 2) {
              goto LABEL_3798;
            }
LABEL_2005:
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_3798;
            }
          }
          else if (!PBReaderSkipValueWithTag())
          {
            goto LABEL_3798;
          }
        }
        if (v795 != 2) {
          goto LABEL_3798;
        }
        goto LABEL_2005;
      case 0x3Eu:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPBTransitVehiclePositionIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x3Fu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3776;
            }
            char v799 = 0;
            unsigned int v800 = 0;
            unint64_t v801 = 0;
            while (2)
            {
              uint64_t v802 = *v2;
              uint64_t v803 = *(void *)&a1[v802];
              unint64_t v804 = v803 + 1;
              if (v803 == -1 || v804 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v805 = *(unsigned char *)(*(void *)&a1[*v5] + v803);
                *(void *)&a1[v802] = v804;
                v801 |= (unint64_t)(v805 & 0x7F) << v799;
                if (v805 < 0)
                {
                  v799 += 7;
                  BOOL v13 = v800++ >= 9;
                  if (v13)
                  {
                    unint64_t v801 = 0;
                    int v806 = a1[*v4];
                    goto LABEL_2032;
                  }
                  continue;
                }
              }
              break;
            }
            int v806 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v801 = 0;
            }
LABEL_2032:
            int v807 = v801 & 7;
            if (v806) {
              BOOL v808 = 1;
            }
            else {
              BOOL v808 = v807 == 4;
            }
            if (v808) {
              goto LABEL_3776;
            }
            unint64_t v809 = v801 >> 3;
            if ((v801 >> 3) == 3)
            {
              if (v807 != 2 || !PBReaderPlaceMark() || !GEOPDBusinessHoursIsValid(a1)) {
                goto LABEL_3811;
              }
            }
            else if (v809 == 2)
            {
              if (v807 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceInfoIsValid(a1)) {
                goto LABEL_3811;
              }
            }
            else
            {
              if (v809 != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
              }
              if (v807 != 2 || !PBReaderPlaceMark() || !GEOPDEntityIsValid(a1)) {
                goto LABEL_3811;
              }
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 0x40u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDBusinessHoursIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x41u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceCollectionIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x42u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_2064:
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3776;
            }
            char v810 = 0;
            unsigned int v811 = 0;
            unint64_t v812 = 0;
            while (2)
            {
              uint64_t v813 = *v2;
              uint64_t v814 = *(void *)&a1[v813];
              unint64_t v815 = v814 + 1;
              if (v814 == -1 || v815 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v816 = *(unsigned char *)(*(void *)&a1[*v5] + v814);
                *(void *)&a1[v813] = v815;
                v812 |= (unint64_t)(v816 & 0x7F) << v810;
                if (v816 < 0)
                {
                  v810 += 7;
                  BOOL v13 = v811++ >= 9;
                  if (v13)
                  {
                    unint64_t v812 = 0;
                    int v817 = a1[*v4];
                    goto LABEL_2076;
                  }
                  continue;
                }
              }
              break;
            }
            int v817 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v812 = 0;
            }
LABEL_2076:
            int v818 = v812 & 7;
            if (v817) {
              BOOL v819 = 1;
            }
            else {
              BOOL v819 = v818 == 4;
            }
            if (v819) {
              goto LABEL_3776;
            }
            unint64_t v820 = v812 >> 3;
            if ((v812 >> 3) == 3)
            {
              if (v818 == 2)
              {
                if (!PBReaderPlaceMark()) {
                  goto LABEL_3811;
                }
LABEL_2106:
                while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
                {
                  unsigned int v831 = a1[*v4];
                  if (a1[*v4]) {
                    break;
                  }
                  while (1)
                  {
                    uint64_t v832 = *v2;
                    uint64_t v833 = *(void *)&a1[v832];
                    unint64_t v834 = v833 + 1;
                    if (v833 == -1 || v834 > *(void *)&a1[*v3]) {
                      break;
                    }
                    int v835 = *(char *)(*(void *)&a1[*v5] + v833);
                    *(void *)&a1[v832] = v834;
                    if (v835 < 0)
                    {
                      BOOL v13 = v831++ >= 9;
                      if (!v13) {
                        continue;
                      }
                    }
                    goto LABEL_2106;
                  }
                  a1[*v4] = 1;
                }
                goto LABEL_2086;
              }
              if ((v812 & 7) != 0) {
                goto LABEL_3811;
              }
              while (1)
              {
                uint64_t v821 = *v2;
                uint64_t v822 = *(void *)&a1[v821];
                unint64_t v823 = v822 + 1;
                if (v822 == -1 || v823 > *(void *)&a1[*v3]) {
                  break;
                }
                int v824 = *(char *)(*(void *)&a1[*v5] + v822);
                *(void *)&a1[v821] = v823;
                if (v824 < 0)
                {
                  unsigned int v825 = v818++;
                  if (v825 <= 8) {
                    continue;
                  }
                }
                goto LABEL_2064;
              }
            }
            else
            {
              if (v820 != 2)
              {
                if (v820 != 1)
                {
                  if ((PBReaderSkipValueWithTag() & 1) == 0) {
                    goto LABEL_3811;
                  }
                  continue;
                }
                if (v818 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1)) {
                  goto LABEL_3811;
                }
LABEL_2086:
                PBReaderRecallMark();
                continue;
              }
              if ((v812 & 7) != 0) {
                goto LABEL_3811;
              }
              unsigned int v826 = 0;
              while (1)
              {
                uint64_t v827 = *v2;
                uint64_t v828 = *(void *)&a1[v827];
                unint64_t v829 = v828 + 1;
                if (v828 == -1 || v829 > *(void *)&a1[*v3]) {
                  break;
                }
                int v830 = *(char *)(*(void *)&a1[*v5] + v828);
                *(void *)&a1[v827] = v829;
                if (v830 < 0)
                {
                  BOOL v52 = v826++ > 8;
                  if (!v52) {
                    continue;
                  }
                }
                goto LABEL_2064;
              }
            }
            break;
          }
          a1[*v4] = 1;
          continue;
        }
      case 0x43u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3776;
            }
            char v836 = 0;
            unsigned int v837 = 0;
            unint64_t v838 = 0;
            while (2)
            {
              uint64_t v839 = *v2;
              uint64_t v840 = *(void *)&a1[v839];
              unint64_t v841 = v840 + 1;
              if (v840 == -1 || v841 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v842 = *(unsigned char *)(*(void *)&a1[*v5] + v840);
                *(void *)&a1[v839] = v841;
                v838 |= (unint64_t)(v842 & 0x7F) << v836;
                if (v842 < 0)
                {
                  v836 += 7;
                  BOOL v13 = v837++ >= 9;
                  if (v13)
                  {
                    unint64_t v838 = 0;
                    int v843 = a1[*v4];
                    goto LABEL_2130;
                  }
                  continue;
                }
              }
              break;
            }
            int v843 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v838 = 0;
            }
LABEL_2130:
            int v844 = v838 & 7;
            if (v843) {
              BOOL v845 = 1;
            }
            else {
              BOOL v845 = v844 == 4;
            }
            if (v845) {
              goto LABEL_3776;
            }
            if ((v838 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
            break;
          }
          if (v844 == 2 && PBReaderPlaceMark() && GEOPDTransitInfoSnippetIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x44u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3776;
            }
            char v846 = 0;
            unsigned int v847 = 0;
            unint64_t v848 = 0;
            while (2)
            {
              uint64_t v849 = *v2;
              uint64_t v850 = *(void *)&a1[v849];
              unint64_t v851 = v850 + 1;
              if (v850 == -1 || v851 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v852 = *(unsigned char *)(*(void *)&a1[*v5] + v850);
                *(void *)&a1[v849] = v851;
                v848 |= (unint64_t)(v852 & 0x7F) << v846;
                if (v852 < 0)
                {
                  v846 += 7;
                  BOOL v13 = v847++ >= 9;
                  if (v13)
                  {
                    unint64_t v848 = 0;
                    int v853 = a1[*v4];
                    goto LABEL_2156;
                  }
                  continue;
                }
              }
              break;
            }
            int v853 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v848 = 0;
            }
LABEL_2156:
            int v854 = v848 & 7;
            if (v853) {
              BOOL v855 = 1;
            }
            else {
              BOOL v855 = v854 == 4;
            }
            if (v855) {
              goto LABEL_3776;
            }
            if ((v848 >> 3) != 2)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
            break;
          }
          if (v854 == 2 && PBReaderPlaceMark() && GEOPDDepartureSequenceIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x45u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_2170:
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v856 = 0;
          unsigned int v857 = 0;
          unint64_t v858 = 0;
          while (2)
          {
            uint64_t v859 = *v2;
            uint64_t v860 = *(void *)&a1[v859];
            unint64_t v861 = v860 + 1;
            if (v860 == -1 || v861 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v862 = *(unsigned char *)(*(void *)&a1[*v5] + v860);
              *(void *)&a1[v859] = v861;
              v858 |= (unint64_t)(v862 & 0x7F) << v856;
              if (v862 < 0)
              {
                v856 += 7;
                BOOL v13 = v857++ >= 9;
                if (v13)
                {
                  unint64_t v858 = 0;
                  int v863 = a1[*v4];
                  goto LABEL_2182;
                }
                continue;
              }
            }
            break;
          }
          int v863 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v858 = 0;
          }
LABEL_2182:
          int v864 = v858 & 7;
          if (v863) {
            BOOL v865 = 1;
          }
          else {
            BOOL v865 = v864 == 4;
          }
          if (!v865)
          {
            if ((v858 >> 3) == 2)
            {
              if (v864 != 2)
              {
                if ((v858 & 7) == 0)
                {
                  do
                  {
                    uint64_t v881 = *v2;
                    uint64_t v882 = *(void *)&a1[v881];
                    unint64_t v883 = v882 + 1;
                    if (v882 == -1 || v883 > *(void *)&a1[*v3])
                    {
                      a1[*v4] = 1;
                      goto LABEL_2170;
                    }
                    int v884 = *(char *)(*(void *)&a1[*v5] + v882);
                    *(void *)&a1[v881] = v883;
                    if ((v884 & 0x80000000) == 0) {
                      break;
                    }
                    unsigned int v885 = v864++;
                  }
                  while (v885 <= 8);
                  continue;
                }
                goto LABEL_3811;
              }
              if (!PBReaderPlaceMark()) {
                goto LABEL_3811;
              }
LABEL_2235:
              while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
              {
                unsigned int v887 = a1[*v4];
                if (a1[*v4]) {
                  break;
                }
                while (1)
                {
                  uint64_t v888 = *v2;
                  uint64_t v889 = *(void *)&a1[v888];
                  unint64_t v890 = v889 + 1;
                  if (v889 == -1 || v890 > *(void *)&a1[*v3]) {
                    break;
                  }
                  int v891 = *(char *)(*(void *)&a1[*v5] + v889);
                  *(void *)&a1[v888] = v890;
                  if (v891 < 0)
                  {
                    BOOL v13 = v887++ >= 9;
                    if (!v13) {
                      continue;
                    }
                  }
                  goto LABEL_2235;
                }
                a1[*v4] = 1;
              }
            }
            else
            {
              if ((v858 >> 3) != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
              }
              if (v864 != 2 || !PBReaderPlaceMark()) {
                goto LABEL_3811;
              }
              [a1 position];
              [a1 length];
LABEL_2191:
              while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
              {
                char v866 = 0;
                unsigned int v867 = 0;
                unint64_t v868 = 0;
                while (1)
                {
                  uint64_t v869 = *v2;
                  uint64_t v870 = *(void *)&a1[v869];
                  unint64_t v871 = v870 + 1;
                  if (v870 == -1 || v871 > *(void *)&a1[*v3]) {
                    break;
                  }
                  char v872 = *(unsigned char *)(*(void *)&a1[*v5] + v870);
                  *(void *)&a1[v869] = v871;
                  v868 |= (unint64_t)(v872 & 0x7F) << v866;
                  if ((v872 & 0x80) == 0) {
                    goto LABEL_2201;
                  }
                  v866 += 7;
                  BOOL v13 = v867++ >= 9;
                  if (v13)
                  {
                    unint64_t v868 = 0;
                    int v873 = a1[*v4];
                    goto LABEL_2203;
                  }
                }
                a1[*v4] = 1;
LABEL_2201:
                int v873 = a1[*v4];
                if (a1[*v4]) {
                  unint64_t v868 = 0;
                }
LABEL_2203:
                int v874 = v868 & 7;
                if (v873 || v874 == 4) {
                  break;
                }
                if ((v868 >> 3) == 2)
                {
                  if (v874 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
                  {
LABEL_3798:
                    PBReaderRecallMark();
                    goto LABEL_3811;
                  }
                }
                else if ((v868 >> 3) == 1)
                {
                  if ((v868 & 7) != 0) {
                    goto LABEL_3798;
                  }
                  unsigned int v876 = 0;
                  while (1)
                  {
                    uint64_t v877 = *v2;
                    uint64_t v878 = *(void *)&a1[v877];
                    unint64_t v879 = v878 + 1;
                    if (v878 == -1 || v879 > *(void *)&a1[*v3]) {
                      break;
                    }
                    int v880 = *(char *)(*(void *)&a1[*v5] + v878);
                    *(void *)&a1[v877] = v879;
                    if (v880 < 0)
                    {
                      BOOL v52 = v876++ > 8;
                      if (!v52) {
                        continue;
                      }
                    }
                    goto LABEL_2191;
                  }
                  a1[*v4] = 1;
                }
                else if (!PBReaderSkipValueWithTag())
                {
                  goto LABEL_3798;
                }
              }
              int v886 = a1[*v4];
              PBReaderRecallMark();
              if (v886) {
                goto LABEL_3811;
              }
            }
            PBReaderRecallMark();
            continue;
          }
          break;
        }
LABEL_2246:
        int v892 = a1[*v4];
        PBReaderRecallMark();
        if (v892) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x47u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPublisherIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x48u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_2255:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_3366;
          }
          char v893 = 0;
          unsigned int v894 = 0;
          unint64_t v895 = 0;
          while (2)
          {
            uint64_t v896 = *v2;
            uint64_t v897 = *(void *)&a1[v896];
            unint64_t v898 = v897 + 1;
            if (v897 == -1 || v898 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v899 = *(unsigned char *)(*(void *)&a1[*v5] + v897);
              *(void *)&a1[v896] = v898;
              v895 |= (unint64_t)(v899 & 0x7F) << v893;
              if (v899 < 0)
              {
                v893 += 7;
                BOOL v13 = v894++ >= 9;
                if (v13)
                {
                  unint64_t v895 = 0;
                  int v900 = a1[*v4];
                  goto LABEL_2267;
                }
                continue;
              }
            }
            break;
          }
          int v900 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v895 = 0;
          }
LABEL_2267:
          int v901 = v895 & 7;
          if (v900) {
            BOOL v902 = 1;
          }
          else {
            BOOL v902 = v901 == 4;
          }
          if (v902) {
            goto LABEL_3366;
          }
          if ((v895 >> 3) == 2)
          {
            if (v901 != 2) {
              goto LABEL_3811;
            }
          }
          else if ((v895 >> 3) == 1)
          {
            if (v901 != 2 || !PBReaderPlaceMark()) {
              goto LABEL_3811;
            }
            [a1 position];
            [a1 length];
            while (1)
            {
              while (1)
              {
                if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                  goto LABEL_2302;
                }
                char v903 = 0;
                unsigned int v904 = 0;
                unint64_t v905 = 0;
                while (1)
                {
                  uint64_t v906 = *v2;
                  uint64_t v907 = *(void *)&a1[v906];
                  unint64_t v908 = v907 + 1;
                  if (v907 == -1 || v908 > *(void *)&a1[*v3]) {
                    break;
                  }
                  char v909 = *(unsigned char *)(*(void *)&a1[*v5] + v907);
                  *(void *)&a1[v906] = v908;
                  v905 |= (unint64_t)(v909 & 0x7F) << v903;
                  if ((v909 & 0x80) == 0) {
                    goto LABEL_2286;
                  }
                  v903 += 7;
                  BOOL v13 = v904++ >= 9;
                  if (v13)
                  {
                    unint64_t v905 = 0;
                    int v910 = a1[*v4];
                    goto LABEL_2288;
                  }
                }
                a1[*v4] = 1;
LABEL_2286:
                int v910 = a1[*v4];
                if (a1[*v4]) {
                  unint64_t v905 = 0;
                }
LABEL_2288:
                int v911 = v905 & 7;
                if (v910 || v911 == 4)
                {
LABEL_2302:
                  int v913 = a1[*v4];
                  PBReaderRecallMark();
                  if (!v913)
                  {
                    PBReaderRecallMark();
                    goto LABEL_2255;
                  }
                  goto LABEL_3811;
                }
                if ((v905 >> 3) == 1) {
                  break;
                }
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3796;
                }
              }
              if (v911 != 2 || !PBReaderPlaceMark() || !GEOStyleAttributesIsValid(a1)) {
                break;
              }
              PBReaderRecallMark();
            }
LABEL_3796:
            PBReaderRecallMark();
            goto LABEL_3811;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_3811;
          }
          continue;
        }
      case 0x49u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceQuestionnaireResultIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x4Au:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceCollectionItemIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x4Cu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3776;
            }
            char v914 = 0;
            unsigned int v915 = 0;
            unint64_t v916 = 0;
            while (2)
            {
              uint64_t v917 = *v2;
              uint64_t v918 = *(void *)&a1[v917];
              unint64_t v919 = v918 + 1;
              if (v918 == -1 || v919 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v920 = *(unsigned char *)(*(void *)&a1[*v5] + v918);
                *(void *)&a1[v917] = v919;
                v916 |= (unint64_t)(v920 & 0x7F) << v914;
                if (v920 < 0)
                {
                  v914 += 7;
                  BOOL v13 = v915++ >= 9;
                  if (v13)
                  {
                    unint64_t v916 = 0;
                    int v921 = a1[*v4];
                    goto LABEL_2327;
                  }
                  continue;
                }
              }
              break;
            }
            int v921 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v916 = 0;
            }
LABEL_2327:
            int v922 = v916 & 7;
            if (v921) {
              BOOL v923 = 1;
            }
            else {
              BOOL v923 = v922 == 4;
            }
            if (v923) {
              goto LABEL_3776;
            }
            if ((v916 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
            break;
          }
          if (v922 == 2 && PBReaderPlaceMark() && GEOPDMapsIdentifierIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x4Du:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_2341:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_3776;
          }
          char v924 = 0;
          unsigned int v925 = 0;
          unint64_t v926 = 0;
          while (2)
          {
            uint64_t v927 = *v2;
            uint64_t v928 = *(void *)&a1[v927];
            unint64_t v929 = v928 + 1;
            if (v928 == -1 || v929 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v930 = *(unsigned char *)(*(void *)&a1[*v5] + v928);
              *(void *)&a1[v927] = v929;
              v926 |= (unint64_t)(v930 & 0x7F) << v924;
              if (v930 < 0)
              {
                v924 += 7;
                BOOL v13 = v925++ >= 9;
                if (v13)
                {
                  unint64_t v926 = 0;
                  int v931 = a1[*v4];
                  goto LABEL_2353;
                }
                continue;
              }
            }
            break;
          }
          int v931 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v926 = 0;
          }
LABEL_2353:
          int v932 = v926 & 7;
          if (v931) {
            BOOL v933 = 1;
          }
          else {
            BOOL v933 = v932 == 4;
          }
          if (!v933)
          {
            switch((v926 >> 3))
            {
              case 1u:
                if (v932 != 2 || !PBReaderPlaceMark() || !GEOLatLngE7IsValid(a1)) {
                  goto LABEL_3811;
                }
                PBReaderRecallMark();
                continue;
              case 2u:
                if (v932 == 2) {
                  goto LABEL_2365;
                }
                goto LABEL_3811;
              case 3u:
                if (v932 == 2) {
                  goto LABEL_2365;
                }
                goto LABEL_3811;
              case 4u:
                if ((v926 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v934 = 0;
                break;
              default:
LABEL_2365:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
            }
            do
            {
              uint64_t v935 = *v2;
              uint64_t v936 = *(void *)&a1[v935];
              unint64_t v937 = v936 + 1;
              if (v936 == -1 || v937 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
                goto LABEL_2341;
              }
              int v938 = *(char *)(*(void *)&a1[*v5] + v936);
              *(void *)&a1[v935] = v937;
              if ((v938 & 0x80000000) == 0) {
                break;
              }
              BOOL v52 = v934++ > 8;
            }
            while (!v52);
            continue;
          }
          goto LABEL_3776;
        }
      case 0x4Fu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_2379:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_3366;
          }
          char v939 = 0;
          unsigned int v940 = 0;
          unint64_t v941 = 0;
          while (2)
          {
            uint64_t v942 = *v2;
            uint64_t v943 = *(void *)&a1[v942];
            unint64_t v944 = v943 + 1;
            if (v943 == -1 || v944 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v945 = *(unsigned char *)(*(void *)&a1[*v5] + v943);
              *(void *)&a1[v942] = v944;
              v941 |= (unint64_t)(v945 & 0x7F) << v939;
              if (v945 < 0)
              {
                v939 += 7;
                BOOL v13 = v940++ >= 9;
                if (v13)
                {
                  unint64_t v941 = 0;
                  int v946 = a1[*v4];
                  goto LABEL_2391;
                }
                continue;
              }
            }
            break;
          }
          int v946 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v941 = 0;
          }
LABEL_2391:
          int v947 = v941 & 7;
          if (v946) {
            BOOL v948 = 1;
          }
          else {
            BOOL v948 = v947 == 4;
          }
          if (v948) {
            goto LABEL_3366;
          }
          if ((v941 >> 3) != 2)
          {
            if ((v941 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
            if (v947 != 2 || !PBReaderPlaceMark()) {
              goto LABEL_3811;
            }
            [a1 position];
            [a1 length];
            while (1)
            {
              while (1)
              {
LABEL_2400:
                if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                  goto LABEL_2563;
                }
                char v949 = 0;
                unsigned int v950 = 0;
                unint64_t v951 = 0;
                while (1)
                {
                  uint64_t v952 = *v2;
                  uint64_t v953 = *(void *)&a1[v952];
                  unint64_t v954 = v953 + 1;
                  if (v953 == -1 || v954 > *(void *)&a1[*v3]) {
                    break;
                  }
                  char v955 = *(unsigned char *)(*(void *)&a1[*v5] + v953);
                  *(void *)&a1[v952] = v954;
                  v951 |= (unint64_t)(v955 & 0x7F) << v949;
                  if ((v955 & 0x80) == 0) {
                    goto LABEL_2410;
                  }
                  v949 += 7;
                  BOOL v13 = v950++ >= 9;
                  if (v13)
                  {
                    unint64_t v951 = 0;
                    int v956 = a1[*v4];
                    goto LABEL_2412;
                  }
                }
                a1[*v4] = 1;
LABEL_2410:
                int v956 = a1[*v4];
                if (a1[*v4]) {
                  unint64_t v951 = 0;
                }
LABEL_2412:
                int v957 = v951 & 7;
                if (v956 || v957 == 4) {
                  goto LABEL_2563;
                }
                unint64_t v959 = v951 >> 3;
                if ((v951 >> 3) != 3) {
                  break;
                }
                if (v957 != 2 || !PBReaderPlaceMark() || !GEOPBTransitArtworkIsValid(a1)) {
                  goto LABEL_3796;
                }
LABEL_2424:
                PBReaderRecallMark();
              }
              if (v959 == 2)
              {
                if (v957 == 2)
                {
                  if (!PBReaderPlaceMark()) {
                    goto LABEL_3796;
                  }
LABEL_2435:
                  while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
                  {
                    unsigned int v965 = a1[*v4];
                    if (a1[*v4]) {
                      break;
                    }
                    while (1)
                    {
                      uint64_t v966 = *v2;
                      uint64_t v967 = *(void *)&a1[v966];
                      unint64_t v968 = v967 + 1;
                      if (v967 == -1 || v968 > *(void *)&a1[*v3]) {
                        break;
                      }
                      int v969 = *(char *)(*(void *)&a1[*v5] + v967);
                      *(void *)&a1[v966] = v968;
                      if (v969 < 0)
                      {
                        BOOL v13 = v965++ >= 9;
                        if (!v13) {
                          continue;
                        }
                      }
                      goto LABEL_2435;
                    }
                    a1[*v4] = 1;
                  }
                  goto LABEL_2424;
                }
                if ((v951 & 7) != 0) {
                  goto LABEL_3796;
                }
                while (1)
                {
                  uint64_t v960 = *v2;
                  uint64_t v961 = *(void *)&a1[v960];
                  unint64_t v962 = v961 + 1;
                  if (v961 == -1 || v962 > *(void *)&a1[*v3]) {
                    break;
                  }
                  int v963 = *(char *)(*(void *)&a1[*v5] + v961);
                  *(void *)&a1[v960] = v962;
                  if (v963 < 0)
                  {
                    unsigned int v964 = v957++;
                    if (v964 <= 8) {
                      continue;
                    }
                  }
                  goto LABEL_2400;
                }
                a1[*v4] = 1;
              }
              else if (v959 == 1 && v957 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
              {
                goto LABEL_3796;
              }
            }
          }
          break;
        }
        if (v947 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3811;
        }
        [a1 position];
        [a1 length];
        while (1)
        {
LABEL_2448:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_2563;
          }
          char v970 = 0;
          unsigned int v971 = 0;
          unint64_t v972 = 0;
          while (1)
          {
            uint64_t v973 = *v2;
            uint64_t v974 = *(void *)&a1[v973];
            unint64_t v975 = v974 + 1;
            if (v974 == -1 || v975 > *(void *)&a1[*v3]) {
              break;
            }
            char v976 = *(unsigned char *)(*(void *)&a1[*v5] + v974);
            *(void *)&a1[v973] = v975;
            v972 |= (unint64_t)(v976 & 0x7F) << v970;
            if ((v976 & 0x80) == 0) {
              goto LABEL_2458;
            }
            v970 += 7;
            BOOL v13 = v971++ >= 9;
            if (v13)
            {
              unint64_t v972 = 0;
              int v977 = a1[*v4];
              goto LABEL_2460;
            }
          }
          a1[*v4] = 1;
LABEL_2458:
          int v977 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v972 = 0;
          }
LABEL_2460:
          int v978 = v972 & 7;
          if (v977 || v978 == 4)
          {
LABEL_2563:
            int v1035 = a1[*v4];
            PBReaderRecallMark();
            if (!v1035)
            {
              PBReaderRecallMark();
              goto LABEL_2379;
            }
            goto LABEL_3811;
          }
          switch((v972 >> 3))
          {
            case 1u:
              if (v978 == 2) {
                goto LABEL_2521;
              }
              goto LABEL_3796;
            case 2u:
              if ((v972 & 7) != 0) {
                goto LABEL_3796;
              }
              unsigned int v980 = 0;
              while (1)
              {
                uint64_t v981 = *v2;
                uint64_t v982 = *(void *)&a1[v981];
                unint64_t v983 = v982 + 1;
                if (v982 == -1 || v983 > *(void *)&a1[*v3]) {
                  goto LABEL_2531;
                }
                int v984 = *(char *)(*(void *)&a1[*v5] + v982);
                *(void *)&a1[v981] = v983;
                if (v984 < 0)
                {
                  BOOL v52 = v980++ > 8;
                  if (!v52) {
                    continue;
                  }
                }
                goto LABEL_2448;
              }
            case 3u:
              if ((v972 & 7) != 0) {
                goto LABEL_3796;
              }
              unsigned int v985 = 0;
              while (1)
              {
                uint64_t v986 = *v2;
                uint64_t v987 = *(void *)&a1[v986];
                unint64_t v988 = v987 + 1;
                if (v987 == -1 || v988 > *(void *)&a1[*v3]) {
                  goto LABEL_2531;
                }
                int v989 = *(char *)(*(void *)&a1[*v5] + v987);
                *(void *)&a1[v986] = v988;
                if (v989 < 0)
                {
                  BOOL v52 = v985++ > 8;
                  if (!v52) {
                    continue;
                  }
                }
                goto LABEL_2448;
              }
            case 4u:
              if ((v972 & 7) != 0) {
                goto LABEL_3796;
              }
              unsigned int v990 = 0;
              while (1)
              {
                uint64_t v991 = *v2;
                uint64_t v992 = *(void *)&a1[v991];
                unint64_t v993 = v992 + 1;
                if (v992 == -1 || v993 > *(void *)&a1[*v3]) {
                  goto LABEL_2531;
                }
                int v994 = *(char *)(*(void *)&a1[*v5] + v992);
                *(void *)&a1[v991] = v993;
                if (v994 < 0)
                {
                  BOOL v52 = v990++ > 8;
                  if (!v52) {
                    continue;
                  }
                }
                goto LABEL_2448;
              }
            case 5u:
              if ((v972 & 7) != 0) {
                goto LABEL_3796;
              }
              unsigned int v995 = 0;
              while (1)
              {
                uint64_t v996 = *v2;
                uint64_t v997 = *(void *)&a1[v996];
                unint64_t v998 = v997 + 1;
                if (v997 == -1 || v998 > *(void *)&a1[*v3]) {
                  goto LABEL_2531;
                }
                int v999 = *(char *)(*(void *)&a1[*v5] + v997);
                *(void *)&a1[v996] = v998;
                if (v999 < 0)
                {
                  BOOL v52 = v995++ > 8;
                  if (!v52) {
                    continue;
                  }
                }
                goto LABEL_2448;
              }
            case 6u:
              if (v978 != 2)
              {
                if ((v972 & 7) != 0) {
                  goto LABEL_3796;
                }
                while (1)
                {
                  uint64_t v1000 = *v2;
                  uint64_t v1001 = *(void *)&a1[v1000];
                  unint64_t v1002 = v1001 + 1;
                  if (v1001 == -1 || v1002 > *(void *)&a1[*v3]) {
                    goto LABEL_2531;
                  }
                  int v1003 = *(char *)(*(void *)&a1[*v5] + v1001);
                  *(void *)&a1[v1000] = v1002;
                  if (v1003 < 0)
                  {
                    unsigned int v1004 = v978++;
                    if (v1004 <= 8) {
                      continue;
                    }
                  }
                  goto LABEL_2448;
                }
              }
              if (!PBReaderPlaceMark()) {
                goto LABEL_3796;
              }
LABEL_2533:
              while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
              {
                unsigned int v1020 = a1[*v4];
                if (a1[*v4]) {
                  break;
                }
                while (1)
                {
                  uint64_t v1021 = *v2;
                  uint64_t v1022 = *(void *)&a1[v1021];
                  unint64_t v1023 = v1022 + 1;
                  if (v1022 == -1 || v1023 > *(void *)&a1[*v3]) {
                    break;
                  }
                  int v1024 = *(char *)(*(void *)&a1[*v5] + v1022);
                  *(void *)&a1[v1021] = v1023;
                  if (v1024 < 0)
                  {
                    BOOL v13 = v1020++ >= 9;
                    if (!v13) {
                      continue;
                    }
                  }
                  goto LABEL_2533;
                }
                a1[*v4] = 1;
              }
              goto LABEL_2562;
            case 7u:
              if (v978 != 2)
              {
                if ((v972 & 7) != 0) {
                  goto LABEL_3796;
                }
                while (1)
                {
                  uint64_t v1005 = *v2;
                  uint64_t v1006 = *(void *)&a1[v1005];
                  unint64_t v1007 = v1006 + 1;
                  if (v1006 == -1 || v1007 > *(void *)&a1[*v3]) {
                    goto LABEL_2531;
                  }
                  int v1008 = *(char *)(*(void *)&a1[*v5] + v1006);
                  *(void *)&a1[v1005] = v1007;
                  if (v1008 < 0)
                  {
                    unsigned int v1009 = v978++;
                    if (v1009 <= 8) {
                      continue;
                    }
                  }
                  goto LABEL_2448;
                }
              }
              if (!PBReaderPlaceMark()) {
                goto LABEL_3796;
              }
LABEL_2543:
              while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
              {
                unsigned int v1025 = a1[*v4];
                if (a1[*v4]) {
                  break;
                }
                while (1)
                {
                  uint64_t v1026 = *v2;
                  uint64_t v1027 = *(void *)&a1[v1026];
                  unint64_t v1028 = v1027 + 1;
                  if (v1027 == -1 || v1028 > *(void *)&a1[*v3]) {
                    break;
                  }
                  int v1029 = *(char *)(*(void *)&a1[*v5] + v1027);
                  *(void *)&a1[v1026] = v1028;
                  if (v1029 < 0)
                  {
                    BOOL v13 = v1025++ >= 9;
                    if (!v13) {
                      continue;
                    }
                  }
                  goto LABEL_2543;
                }
                a1[*v4] = 1;
              }
              goto LABEL_2562;
            case 8u:
              if (v978 == 2)
              {
                if (!PBReaderPlaceMark()) {
                  goto LABEL_3796;
                }
LABEL_2553:
                while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
                {
                  unsigned int v1030 = a1[*v4];
                  if (a1[*v4]) {
                    break;
                  }
                  while (1)
                  {
                    uint64_t v1031 = *v2;
                    uint64_t v1032 = *(void *)&a1[v1031];
                    unint64_t v1033 = v1032 + 1;
                    if (v1032 == -1 || v1033 > *(void *)&a1[*v3]) {
                      break;
                    }
                    int v1034 = *(char *)(*(void *)&a1[*v5] + v1032);
                    *(void *)&a1[v1031] = v1033;
                    if (v1034 < 0)
                    {
                      BOOL v13 = v1030++ >= 9;
                      if (!v13) {
                        continue;
                      }
                    }
                    goto LABEL_2553;
                  }
                  a1[*v4] = 1;
                }
LABEL_2562:
                PBReaderRecallMark();
              }
              else
              {
                if ((v972 & 7) != 0) {
                  goto LABEL_3796;
                }
                while (1)
                {
                  uint64_t v1010 = *v2;
                  uint64_t v1011 = *(void *)&a1[v1010];
                  unint64_t v1012 = v1011 + 1;
                  if (v1011 == -1 || v1012 > *(void *)&a1[*v3]) {
                    break;
                  }
                  int v1013 = *(char *)(*(void *)&a1[*v5] + v1011);
                  *(void *)&a1[v1010] = v1012;
                  if (v1013 < 0)
                  {
                    unsigned int v1014 = v978++;
                    if (v1014 <= 8) {
                      continue;
                    }
                  }
                  goto LABEL_2448;
                }
LABEL_2531:
                a1[*v4] = 1;
              }
              break;
            case 9u:
              if (v978 == 2) {
                goto LABEL_2521;
              }
              goto LABEL_3796;
            case 0xAu:
              if ((v972 & 7) != 0) {
                goto LABEL_3796;
              }
              unsigned int v1015 = 0;
              while (1)
              {
                uint64_t v1016 = *v2;
                uint64_t v1017 = *(void *)&a1[v1016];
                unint64_t v1018 = v1017 + 1;
                if (v1017 == -1 || v1018 > *(void *)&a1[*v3]) {
                  goto LABEL_2531;
                }
                int v1019 = *(char *)(*(void *)&a1[*v5] + v1017);
                *(void *)&a1[v1016] = v1018;
                if (v1019 < 0)
                {
                  BOOL v52 = v1015++ > 8;
                  if (!v52) {
                    continue;
                  }
                }
                goto LABEL_2448;
              }
            default:
LABEL_2521:
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3796;
              }
              continue;
          }
        }
      case 0x51u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3776;
            }
            char v1036 = 0;
            unsigned int v1037 = 0;
            unint64_t v1038 = 0;
            while (2)
            {
              uint64_t v1039 = *v2;
              uint64_t v1040 = *(void *)&a1[v1039];
              unint64_t v1041 = v1040 + 1;
              if (v1040 == -1 || v1041 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v1042 = *(unsigned char *)(*(void *)&a1[*v5] + v1040);
                *(void *)&a1[v1039] = v1041;
                v1038 |= (unint64_t)(v1042 & 0x7F) << v1036;
                if (v1042 < 0)
                {
                  v1036 += 7;
                  BOOL v13 = v1037++ >= 9;
                  if (v13)
                  {
                    unint64_t v1038 = 0;
                    int v1043 = a1[*v4];
                    goto LABEL_2582;
                  }
                  continue;
                }
              }
              break;
            }
            int v1043 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v1038 = 0;
            }
LABEL_2582:
            int v1044 = v1038 & 7;
            if (v1043) {
              BOOL v1045 = 1;
            }
            else {
              BOOL v1045 = v1044 == 4;
            }
            if (v1045) {
              goto LABEL_3776;
            }
            if ((v1038 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
            break;
          }
          if (v1044 == 2 && PBReaderPlaceMark() && GEOPDStorefrontFaceIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x52u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_2596:
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3776;
            }
            char v1046 = 0;
            unsigned int v1047 = 0;
            unint64_t v1048 = 0;
            while (2)
            {
              uint64_t v1049 = *v2;
              uint64_t v1050 = *(void *)&a1[v1049];
              unint64_t v1051 = v1050 + 1;
              if (v1050 == -1 || v1051 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v1052 = *(unsigned char *)(*(void *)&a1[*v5] + v1050);
                *(void *)&a1[v1049] = v1051;
                v1048 |= (unint64_t)(v1052 & 0x7F) << v1046;
                if (v1052 < 0)
                {
                  v1046 += 7;
                  BOOL v13 = v1047++ >= 9;
                  if (v13)
                  {
                    unint64_t v1048 = 0;
                    int v1053 = a1[*v4];
                    goto LABEL_2608;
                  }
                  continue;
                }
              }
              break;
            }
            int v1053 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v1048 = 0;
            }
LABEL_2608:
            int v1054 = v1048 & 7;
            if (v1053) {
              BOOL v1055 = 1;
            }
            else {
              BOOL v1055 = v1054 == 4;
            }
            if (v1055) {
              goto LABEL_3776;
            }
            unint64_t v1056 = v1048 >> 3;
            if ((v1048 >> 3) == 3)
            {
              if (v1054 != 2 || !PBReaderPlaceMark() || !GEOPDGuideLocationImageIsValid(a1)) {
                goto LABEL_3811;
              }
            }
            else
            {
              if (v1056 == 2)
              {
                if ((v1048 & 7) == 0)
                {
                  unsigned int v1057 = 0;
                  do
                  {
                    uint64_t v1058 = *v2;
                    uint64_t v1059 = *(void *)&a1[v1058];
                    unint64_t v1060 = v1059 + 1;
                    if (v1059 == -1 || v1060 > *(void *)&a1[*v3])
                    {
                      a1[*v4] = 1;
                      goto LABEL_2596;
                    }
                    int v1061 = *(char *)(*(void *)&a1[*v5] + v1059);
                    *(void *)&a1[v1058] = v1060;
                    if ((v1061 & 0x80000000) == 0) {
                      break;
                    }
                    BOOL v52 = v1057++ > 8;
                  }
                  while (!v52);
                  continue;
                }
                goto LABEL_3811;
              }
              if (v1056 != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
              }
              if (v1054 != 2 || !PBReaderPlaceMark() || !GEOPDCaptionedPhotoIsValid(a1)) {
                goto LABEL_3811;
              }
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 0x53u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3776;
            }
            char v1062 = 0;
            unsigned int v1063 = 0;
            unint64_t v1064 = 0;
            while (2)
            {
              uint64_t v1065 = *v2;
              uint64_t v1066 = *(void *)&a1[v1065];
              unint64_t v1067 = v1066 + 1;
              if (v1066 == -1 || v1067 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v1068 = *(unsigned char *)(*(void *)&a1[*v5] + v1066);
                *(void *)&a1[v1065] = v1067;
                v1064 |= (unint64_t)(v1068 & 0x7F) << v1062;
                if (v1068 < 0)
                {
                  v1062 += 7;
                  BOOL v13 = v1063++ >= 9;
                  if (v13)
                  {
                    unint64_t v1064 = 0;
                    int v1069 = a1[*v4];
                    goto LABEL_2649;
                  }
                  continue;
                }
              }
              break;
            }
            int v1069 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v1064 = 0;
            }
LABEL_2649:
            int v1070 = v1064 & 7;
            if (v1069) {
              BOOL v1071 = 1;
            }
            else {
              BOOL v1071 = v1070 == 4;
            }
            if (v1071) {
              goto LABEL_3776;
            }
            if ((v1064 >> 3) == 2)
            {
              if (v1070 != 2 || !PBReaderPlaceMark() || !GEOFormattedStringIsValid(a1)) {
                goto LABEL_3811;
              }
            }
            else
            {
              if ((v1064 >> 3) != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
              }
              if (v1070 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1)) {
                goto LABEL_3811;
              }
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 0x54u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_2668:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_3776;
          }
          char v1072 = 0;
          unsigned int v1073 = 0;
          unint64_t v1074 = 0;
          while (2)
          {
            uint64_t v1075 = *v2;
            uint64_t v1076 = *(void *)&a1[v1075];
            unint64_t v1077 = v1076 + 1;
            if (v1076 == -1 || v1077 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v1078 = *(unsigned char *)(*(void *)&a1[*v5] + v1076);
              *(void *)&a1[v1075] = v1077;
              v1074 |= (unint64_t)(v1078 & 0x7F) << v1072;
              if (v1078 < 0)
              {
                v1072 += 7;
                BOOL v13 = v1073++ >= 9;
                if (v13)
                {
                  unint64_t v1074 = 0;
                  int v1079 = a1[*v4];
                  goto LABEL_2680;
                }
                continue;
              }
            }
            break;
          }
          int v1079 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v1074 = 0;
          }
LABEL_2680:
          int v1080 = v1074 & 7;
          if (v1079) {
            BOOL v1081 = 1;
          }
          else {
            BOOL v1081 = v1080 == 4;
          }
          if (!v1081)
          {
            switch((v1074 >> 3))
            {
              case 1u:
                if (v1080 == 2) {
                  goto LABEL_2686;
                }
                goto LABEL_3811;
              case 2u:
                if (v1080 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1)) {
                  goto LABEL_3811;
                }
                goto LABEL_2695;
              case 3u:
                if (v1080 != 2 || !PBReaderPlaceMark() || !GEOPDCaptionedPhotoIsValid(a1)) {
                  goto LABEL_3811;
                }
LABEL_2695:
                PBReaderRecallMark();
                continue;
              case 4u:
                if ((v1074 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v1082 = 0;
                break;
              default:
LABEL_2686:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
            }
            do
            {
              uint64_t v1083 = *v2;
              uint64_t v1084 = *(void *)&a1[v1083];
              unint64_t v1085 = v1084 + 1;
              if (v1084 == -1 || v1085 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
                goto LABEL_2668;
              }
              int v1086 = *(char *)(*(void *)&a1[*v5] + v1084);
              *(void *)&a1[v1083] = v1085;
              if ((v1086 & 0x80000000) == 0) {
                break;
              }
              BOOL v52 = v1082++ > 8;
            }
            while (!v52);
            continue;
          }
          goto LABEL_3776;
        }
      case 0x55u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDExploreGuidesIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x56u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3776;
            }
            char v1087 = 0;
            unsigned int v1088 = 0;
            unint64_t v1089 = 0;
            while (2)
            {
              uint64_t v1090 = *v2;
              uint64_t v1091 = *(void *)&a1[v1090];
              unint64_t v1092 = v1091 + 1;
              if (v1091 == -1 || v1092 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v1093 = *(unsigned char *)(*(void *)&a1[*v5] + v1091);
                *(void *)&a1[v1090] = v1092;
                v1089 |= (unint64_t)(v1093 & 0x7F) << v1087;
                if (v1093 < 0)
                {
                  v1087 += 7;
                  BOOL v13 = v1088++ >= 9;
                  if (v13)
                  {
                    unint64_t v1089 = 0;
                    int v1094 = a1[*v4];
                    goto LABEL_2724;
                  }
                  continue;
                }
              }
              break;
            }
            int v1094 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v1089 = 0;
            }
LABEL_2724:
            int v1095 = v1089 & 7;
            if (v1094) {
              BOOL v1096 = 1;
            }
            else {
              BOOL v1096 = v1095 == 4;
            }
            if (v1096) {
              goto LABEL_3776;
            }
            if ((v1089 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
            break;
          }
          if (v1095 == 2 && PBReaderPlaceMark() && GEOLocalizedStringIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x57u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_2738:
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3366;
            }
            char v1097 = 0;
            unsigned int v1098 = 0;
            unint64_t v1099 = 0;
            while (2)
            {
              uint64_t v1100 = *v2;
              uint64_t v1101 = *(void *)&a1[v1100];
              unint64_t v1102 = v1101 + 1;
              if (v1101 == -1 || v1102 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v1103 = *(unsigned char *)(*(void *)&a1[*v5] + v1101);
                *(void *)&a1[v1100] = v1102;
                v1099 |= (unint64_t)(v1103 & 0x7F) << v1097;
                if (v1103 < 0)
                {
                  v1097 += 7;
                  BOOL v13 = v1098++ >= 9;
                  if (v13)
                  {
                    unint64_t v1099 = 0;
                    int v1104 = a1[*v4];
                    goto LABEL_2750;
                  }
                  continue;
                }
              }
              break;
            }
            int v1104 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v1099 = 0;
            }
LABEL_2750:
            int v1105 = v1099 & 7;
            if (v1104) {
              BOOL v1106 = 1;
            }
            else {
              BOOL v1106 = v1105 == 4;
            }
            if (v1106) {
              goto LABEL_3366;
            }
            if ((v1099 >> 3) == 2)
            {
              if ((v1099 & 7) == 0)
              {
                unsigned int v1117 = 0;
                do
                {
                  uint64_t v1118 = *v2;
                  uint64_t v1119 = *(void *)&a1[v1118];
                  unint64_t v1120 = v1119 + 1;
                  if (v1119 == -1 || v1120 > *(void *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                    goto LABEL_2738;
                  }
                  int v1121 = *(char *)(*(void *)&a1[*v5] + v1119);
                  *(void *)&a1[v1118] = v1120;
                  if ((v1121 & 0x80000000) == 0) {
                    break;
                  }
                  BOOL v52 = v1117++ > 8;
                }
                while (!v52);
                continue;
              }
              goto LABEL_3811;
            }
            break;
          }
          if ((v1099 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_3811;
            }
            continue;
          }
          break;
        }
        if (v1105 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3811;
        }
        [a1 position];
        [a1 length];
        while (1)
        {
          while (1)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_2792;
            }
            char v1107 = 0;
            unsigned int v1108 = 0;
            unint64_t v1109 = 0;
            while (1)
            {
              uint64_t v1110 = *v2;
              uint64_t v1111 = *(void *)&a1[v1110];
              unint64_t v1112 = v1111 + 1;
              if (v1111 == -1 || v1112 > *(void *)&a1[*v3]) {
                break;
              }
              char v1113 = *(unsigned char *)(*(void *)&a1[*v5] + v1111);
              *(void *)&a1[v1110] = v1112;
              v1109 |= (unint64_t)(v1113 & 0x7F) << v1107;
              if ((v1113 & 0x80) == 0) {
                goto LABEL_2769;
              }
              v1107 += 7;
              BOOL v13 = v1108++ >= 9;
              if (v13)
              {
                unint64_t v1109 = 0;
                int v1114 = a1[*v4];
                goto LABEL_2771;
              }
            }
            a1[*v4] = 1;
LABEL_2769:
            int v1114 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v1109 = 0;
            }
LABEL_2771:
            int v1115 = v1109 & 7;
            if (v1114 || v1115 == 4)
            {
LABEL_2792:
              int v1122 = a1[*v4];
              PBReaderRecallMark();
              if (!v1122)
              {
                PBReaderRecallMark();
                goto LABEL_2738;
              }
              goto LABEL_3811;
            }
            if ((v1109 >> 3) == 1) {
              break;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_3796;
            }
          }
          if (v1115 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1)) {
            goto LABEL_3796;
          }
          PBReaderRecallMark();
        }
      case 0x58u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_2798:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_3776;
          }
          char v1123 = 0;
          unsigned int v1124 = 0;
          unint64_t v1125 = 0;
          while (2)
          {
            uint64_t v1126 = *v2;
            uint64_t v1127 = *(void *)&a1[v1126];
            unint64_t v1128 = v1127 + 1;
            if (v1127 == -1 || v1128 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v1129 = *(unsigned char *)(*(void *)&a1[*v5] + v1127);
              *(void *)&a1[v1126] = v1128;
              v1125 |= (unint64_t)(v1129 & 0x7F) << v1123;
              if (v1129 < 0)
              {
                v1123 += 7;
                BOOL v13 = v1124++ >= 9;
                if (v13)
                {
                  unint64_t v1125 = 0;
                  uint64_t v1130 = *v4;
                  int v1131 = a1[v1130];
                  goto LABEL_2810;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v1130 = *v4;
          int v1131 = a1[v1130];
          if (a1[v1130]) {
            unint64_t v1125 = 0;
          }
LABEL_2810:
          int v1132 = v1125 & 7;
          if (v1131) {
            BOOL v1133 = 1;
          }
          else {
            BOOL v1133 = v1132 == 4;
          }
          if (!v1133)
          {
            switch((v1125 >> 3))
            {
              case 1u:
                if (v1132 != 2)
                {
                  if ((v1125 & 7) == 0)
                  {
                    while (1)
                    {
                      uint64_t v1137 = *v2;
                      uint64_t v1138 = *(void *)&a1[v1137];
                      unint64_t v1139 = v1138 + 1;
                      if (v1138 == -1 || v1139 > *(void *)&a1[*v3]) {
                        break;
                      }
                      int v1140 = *(char *)(*(void *)&a1[*v5] + v1138);
                      *(void *)&a1[v1137] = v1139;
                      if (v1140 < 0)
                      {
                        unsigned int v1141 = v1132++;
                        if (v1141 <= 8) {
                          continue;
                        }
                      }
                      goto LABEL_2798;
                    }
                    uint64_t v1130 = *v4;
LABEL_2844:
                    a1[v1130] = 1;
                    continue;
                  }
                  goto LABEL_3811;
                }
                if (!PBReaderPlaceMark()) {
                  goto LABEL_3811;
                }
                break;
              case 2u:
                if (v1132 != 1) {
                  goto LABEL_3811;
                }
                uint64_t v1134 = *v2;
                unint64_t v1142 = *(void *)&a1[v1134];
                if (v1142 > 0xFFFFFFFFFFFFFFF7) {
                  goto LABEL_2844;
                }
                unint64_t v1136 = v1142 + 8;
                goto LABEL_2830;
              case 3u:
              case 4u:
                if (v1132 != 5) {
                  goto LABEL_3811;
                }
                uint64_t v1134 = *v2;
                unint64_t v1135 = *(void *)&a1[v1134];
                if (v1135 > 0xFFFFFFFFFFFFFFFBLL) {
                  goto LABEL_2844;
                }
                unint64_t v1136 = v1135 + 4;
LABEL_2830:
                if (v1136 > *(void *)&a1[*v3]) {
                  goto LABEL_2844;
                }
                *(void *)&a1[v1134] = v1136;
                continue;
              default:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
            }
            while (1)
            {
LABEL_2833:
              if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || (unsigned int v1143 = a1[*v4], a1[*v4]))
              {
                PBReaderRecallMark();
                goto LABEL_2798;
              }
              while (1)
              {
                uint64_t v1144 = *v2;
                uint64_t v1145 = *(void *)&a1[v1144];
                unint64_t v1146 = v1145 + 1;
                if (v1145 == -1 || v1146 > *(void *)&a1[*v3]) {
                  break;
                }
                int v1147 = *(char *)(*(void *)&a1[*v5] + v1145);
                *(void *)&a1[v1144] = v1146;
                if (v1147 < 0)
                {
                  BOOL v13 = v1143++ >= 9;
                  if (!v13) {
                    continue;
                  }
                }
                goto LABEL_2833;
              }
              a1[*v4] = 1;
            }
          }
          goto LABEL_3776;
        }
      case 0x59u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_2848:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_3366;
          }
          char v1148 = 0;
          unsigned int v1149 = 0;
          unint64_t v1150 = 0;
          while (2)
          {
            uint64_t v1151 = *v2;
            uint64_t v1152 = *(void *)&a1[v1151];
            unint64_t v1153 = v1152 + 1;
            if (v1152 == -1 || v1153 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v1154 = *(unsigned char *)(*(void *)&a1[*v5] + v1152);
              *(void *)&a1[v1151] = v1153;
              v1150 |= (unint64_t)(v1154 & 0x7F) << v1148;
              if (v1154 < 0)
              {
                v1148 += 7;
                BOOL v13 = v1149++ >= 9;
                if (v13)
                {
                  unint64_t v1150 = 0;
                  int v1155 = a1[*v4];
                  goto LABEL_2860;
                }
                continue;
              }
            }
            break;
          }
          int v1155 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v1150 = 0;
          }
LABEL_2860:
          int v1156 = v1150 & 7;
          if (v1155) {
            BOOL v1157 = 1;
          }
          else {
            BOOL v1157 = v1156 == 4;
          }
          if (v1157) {
            goto LABEL_3366;
          }
          unint64_t v1158 = v1150 >> 3;
          if ((v1150 >> 3) != 3)
          {
            if (v1158 == 2)
            {
              if ((v1150 & 7) == 0)
              {
                unsigned int v1193 = 0;
                do
                {
                  uint64_t v1194 = *v2;
                  uint64_t v1195 = *(void *)&a1[v1194];
                  unint64_t v1196 = v1195 + 1;
                  if (v1195 == -1 || v1196 > *(void *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                    goto LABEL_2848;
                  }
                  int v1197 = *(char *)(*(void *)&a1[*v5] + v1195);
                  *(void *)&a1[v1194] = v1196;
                  if ((v1197 & 0x80000000) == 0) {
                    break;
                  }
                  BOOL v52 = v1193++ > 8;
                }
                while (!v52);
                continue;
              }
              goto LABEL_3811;
            }
            if (v1158 != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
            if (v1156 == 2 && PBReaderPlaceMark())
            {
              [a1 position];
              [a1 length];
LABEL_2870:
              while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
              {
                char v1159 = 0;
                unsigned int v1160 = 0;
                unint64_t v1161 = 0;
                while (1)
                {
                  uint64_t v1162 = *v2;
                  uint64_t v1163 = *(void *)&a1[v1162];
                  unint64_t v1164 = v1163 + 1;
                  if (v1163 == -1 || v1164 > *(void *)&a1[*v3]) {
                    break;
                  }
                  char v1165 = *(unsigned char *)(*(void *)&a1[*v5] + v1163);
                  *(void *)&a1[v1162] = v1164;
                  v1161 |= (unint64_t)(v1165 & 0x7F) << v1159;
                  if ((v1165 & 0x80) == 0) {
                    goto LABEL_2880;
                  }
                  v1159 += 7;
                  BOOL v13 = v1160++ >= 9;
                  if (v13)
                  {
                    unint64_t v1161 = 0;
                    int v1166 = a1[*v4];
                    goto LABEL_2882;
                  }
                }
                a1[*v4] = 1;
LABEL_2880:
                int v1166 = a1[*v4];
                if (a1[*v4]) {
                  unint64_t v1161 = 0;
                }
LABEL_2882:
                int v1167 = v1161 & 7;
                if (v1166 || v1167 == 4) {
                  break;
                }
                switch((v1161 >> 3))
                {
                  case 1u:
                    if (v1167 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1)) {
                      goto LABEL_3796;
                    }
                    goto LABEL_2920;
                  case 2u:
                    if ((v1161 & 7) != 0) {
                      goto LABEL_3796;
                    }
                    unsigned int v1169 = 0;
                    break;
                  case 3u:
                    if (v1167 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1)) {
                      goto LABEL_3796;
                    }
                    goto LABEL_2920;
                  case 4u:
                  case 7u:
                    if (v1167 != 2 || !PBReaderPlaceMark() || !GEOPDDataItemIsValid(a1)) {
                      goto LABEL_3796;
                    }
                    goto LABEL_2920;
                  case 5u:
                    if (v1167 != 2 || !PBReaderPlaceMark() || !GEOStyleAttributesIsValid(a1)) {
                      goto LABEL_3796;
                    }
                    goto LABEL_2920;
                  case 6u:
                    if (v1167 != 2 || !PBReaderPlaceMark() || !GEOPDPhotoIsValid(a1)) {
                      goto LABEL_3796;
                    }
                    goto LABEL_2920;
                  case 8u:
                    if (v1167 != 2 || !PBReaderPlaceMark() || !GEOTimezoneIsValid(a1)) {
                      goto LABEL_3796;
                    }
LABEL_2920:
                    PBReaderRecallMark();
                    continue;
                  default:
                    if ((PBReaderSkipValueWithTag() & 1) == 0) {
                      goto LABEL_3796;
                    }
                    continue;
                }
                while (1)
                {
                  uint64_t v1170 = *v2;
                  uint64_t v1171 = *(void *)&a1[v1170];
                  unint64_t v1172 = v1171 + 1;
                  if (v1171 == -1 || v1172 > *(void *)&a1[*v3]) {
                    break;
                  }
                  int v1173 = *(char *)(*(void *)&a1[*v5] + v1171);
                  *(void *)&a1[v1170] = v1172;
                  if (v1173 < 0)
                  {
                    BOOL v52 = v1169++ > 8;
                    if (!v52) {
                      continue;
                    }
                  }
                  goto LABEL_2870;
                }
                a1[*v4] = 1;
              }
              int v1199 = a1[*v4];
              PBReaderRecallMark();
              if (v1199) {
                goto LABEL_3811;
              }
LABEL_2975:
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_3811;
          }
          break;
        }
        if (v1156 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3811;
        }
        [a1 position];
        [a1 length];
        while (1)
        {
          while (1)
          {
LABEL_2925:
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_2972;
            }
            char v1174 = 0;
            unsigned int v1175 = 0;
            unint64_t v1176 = 0;
            while (1)
            {
              uint64_t v1177 = *v2;
              uint64_t v1178 = *(void *)&a1[v1177];
              unint64_t v1179 = v1178 + 1;
              if (v1178 == -1 || v1179 > *(void *)&a1[*v3]) {
                break;
              }
              char v1180 = *(unsigned char *)(*(void *)&a1[*v5] + v1178);
              *(void *)&a1[v1177] = v1179;
              v1176 |= (unint64_t)(v1180 & 0x7F) << v1174;
              if ((v1180 & 0x80) == 0) {
                goto LABEL_2935;
              }
              v1174 += 7;
              BOOL v13 = v1175++ >= 9;
              if (v13)
              {
                unint64_t v1176 = 0;
                int v1181 = a1[*v4];
                goto LABEL_2937;
              }
            }
            a1[*v4] = 1;
LABEL_2935:
            int v1181 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v1176 = 0;
            }
LABEL_2937:
            if (v1181 || (v1176 & 7) == 4)
            {
LABEL_2972:
              int v1198 = a1[*v4];
              PBReaderRecallMark();
              if (v1198) {
                goto LABEL_3811;
              }
              goto LABEL_2975;
            }
            if ((v1176 >> 3) != 2) {
              break;
            }
            if ((v1176 & 7) != 0) {
              goto LABEL_3796;
            }
            unsigned int v1188 = 0;
            while (1)
            {
              uint64_t v1189 = *v2;
              uint64_t v1190 = *(void *)&a1[v1189];
              unint64_t v1191 = v1190 + 1;
              if (v1190 == -1 || v1191 > *(void *)&a1[*v3]) {
                break;
              }
              int v1192 = *(char *)(*(void *)&a1[*v5] + v1190);
              *(void *)&a1[v1189] = v1191;
              if (v1192 < 0)
              {
                BOOL v52 = v1188++ > 8;
                if (!v52) {
                  continue;
                }
              }
              goto LABEL_2925;
            }
LABEL_2959:
            a1[*v4] = 1;
          }
          if ((v1176 >> 3) == 1)
          {
            if ((v1176 & 7) != 0) {
              goto LABEL_3796;
            }
            unsigned int v1183 = 0;
            while (1)
            {
              uint64_t v1184 = *v2;
              uint64_t v1185 = *(void *)&a1[v1184];
              unint64_t v1186 = v1185 + 1;
              if (v1185 == -1 || v1186 > *(void *)&a1[*v3]) {
                goto LABEL_2959;
              }
              int v1187 = *(char *)(*(void *)&a1[*v5] + v1185);
              *(void *)&a1[v1184] = v1186;
              if (v1187 < 0)
              {
                BOOL v52 = v1183++ > 8;
                if (!v52) {
                  continue;
                }
              }
              goto LABEL_2925;
            }
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_3796;
          }
        }
      case 0x5Bu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3776;
            }
            char v1200 = 0;
            unsigned int v1201 = 0;
            unint64_t v1202 = 0;
            while (2)
            {
              uint64_t v1203 = *v2;
              uint64_t v1204 = *(void *)&a1[v1203];
              unint64_t v1205 = v1204 + 1;
              if (v1204 == -1 || v1205 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v1206 = *(unsigned char *)(*(void *)&a1[*v5] + v1204);
                *(void *)&a1[v1203] = v1205;
                v1202 |= (unint64_t)(v1206 & 0x7F) << v1200;
                if (v1206 < 0)
                {
                  v1200 += 7;
                  BOOL v13 = v1201++ >= 9;
                  if (v13)
                  {
                    unint64_t v1202 = 0;
                    uint64_t v1207 = *v4;
                    int v1208 = a1[v1207];
                    goto LABEL_2992;
                  }
                  continue;
                }
              }
              break;
            }
            uint64_t v1207 = *v4;
            int v1208 = a1[v1207];
            if (a1[v1207]) {
              unint64_t v1202 = 0;
            }
LABEL_2992:
            int v1209 = v1202 & 7;
            if (v1208) {
              BOOL v1210 = 1;
            }
            else {
              BOOL v1210 = v1209 == 4;
            }
            if (v1210) {
              goto LABEL_3776;
            }
            unint64_t v1211 = v1202 >> 3;
            if ((v1202 >> 3) == 1)
            {
              if (v1209 != 2 || !PBReaderPlaceMark() || !GEOPBTransitPaymentMethodIsValid(a1)) {
                goto LABEL_3811;
              }
            }
            else
            {
              if (v1211 == 3)
              {
                if (v1209 == 1)
                {
                  uint64_t v1212 = *v2;
                  unint64_t v1213 = *(void *)&a1[v1212];
                  if (v1213 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t v1214 = v1213 + 8, v1214 <= *(void *)&a1[*v3])) {
                    *(void *)&a1[v1212] = v1214;
                  }
                  else {
                    a1[v1207] = 1;
                  }
                  continue;
                }
                goto LABEL_3811;
              }
              if (v1211 != 2)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
              }
              if (v1209 != 2 || !PBReaderPlaceMark() || !GEOPBTransitPaymentMethodSuggestionIsValid(a1)) {
                goto LABEL_3811;
              }
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 0x5Cu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3776;
            }
            char v1215 = 0;
            unsigned int v1216 = 0;
            unint64_t v1217 = 0;
            while (2)
            {
              uint64_t v1218 = *v2;
              uint64_t v1219 = *(void *)&a1[v1218];
              unint64_t v1220 = v1219 + 1;
              if (v1219 == -1 || v1220 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v1221 = *(unsigned char *)(*(void *)&a1[*v5] + v1219);
                *(void *)&a1[v1218] = v1220;
                v1217 |= (unint64_t)(v1221 & 0x7F) << v1215;
                if (v1221 < 0)
                {
                  v1215 += 7;
                  BOOL v13 = v1216++ >= 9;
                  if (v13)
                  {
                    unint64_t v1217 = 0;
                    int v1222 = a1[*v4];
                    goto LABEL_3029;
                  }
                  continue;
                }
              }
              break;
            }
            int v1222 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v1217 = 0;
            }
LABEL_3029:
            int v1223 = v1217 & 7;
            if (v1222) {
              BOOL v1224 = 1;
            }
            else {
              BOOL v1224 = v1223 == 4;
            }
            if (v1224) {
              goto LABEL_3776;
            }
            if ((v1217 >> 3) != 2 && (v1217 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
            break;
          }
          if (v1223 == 2 && PBReaderPlaceMark() && GEOPDCaptionedPhotoIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x5Du:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDEnrichmentInfoIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x5Eu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v1225 = 0;
          unsigned int v1226 = 0;
          unint64_t v1227 = 0;
          while (2)
          {
            uint64_t v1228 = *v2;
            uint64_t v1229 = *(void *)&a1[v1228];
            unint64_t v1230 = v1229 + 1;
            if (v1229 == -1 || v1230 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v1231 = *(unsigned char *)(*(void *)&a1[*v5] + v1229);
              *(void *)&a1[v1228] = v1230;
              v1227 |= (unint64_t)(v1231 & 0x7F) << v1225;
              if (v1231 < 0)
              {
                v1225 += 7;
                BOOL v13 = v1226++ >= 9;
                if (v13)
                {
                  unint64_t v1227 = 0;
                  int v1232 = a1[*v4];
                  goto LABEL_3060;
                }
                continue;
              }
            }
            break;
          }
          int v1232 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v1227 = 0;
          }
LABEL_3060:
          int v1233 = v1227 & 7;
          if (v1232) {
            BOOL v1234 = 1;
          }
          else {
            BOOL v1234 = v1233 == 4;
          }
          if (!v1234)
          {
            switch((v1227 >> 3))
            {
              case 1u:
                if (v1233 == 2 && PBReaderPlaceMark() && GEOLocalizedStringIsValid(a1)) {
                  goto LABEL_3297;
                }
                goto LABEL_3811;
              case 2u:
                if (v1233 == 2) {
                  goto LABEL_3294;
                }
                goto LABEL_3811;
              case 3u:
                if (v1233 != 2 || !PBReaderPlaceMark()) {
                  goto LABEL_3811;
                }
                [a1 position];
                [a1 length];
                break;
              case 4u:
                if (v1233 == 2) {
                  goto LABEL_3294;
                }
                goto LABEL_3811;
              case 5u:
                if (v1233 == 2) {
                  goto LABEL_3294;
                }
                goto LABEL_3811;
              case 6u:
                if (v1233 == 2) {
                  goto LABEL_3294;
                }
                goto LABEL_3811;
              default:
LABEL_3294:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
            }
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
            {
              char v1235 = 0;
              unsigned int v1236 = 0;
              unint64_t v1237 = 0;
              while (1)
              {
                uint64_t v1238 = *v2;
                uint64_t v1239 = *(void *)&a1[v1238];
                unint64_t v1240 = v1239 + 1;
                if (v1239 == -1 || v1240 > *(void *)&a1[*v3]) {
                  break;
                }
                char v1241 = *(unsigned char *)(*(void *)&a1[*v5] + v1239);
                *(void *)&a1[v1238] = v1240;
                v1237 |= (unint64_t)(v1241 & 0x7F) << v1235;
                if ((v1241 & 0x80) == 0) {
                  goto LABEL_3084;
                }
                v1235 += 7;
                BOOL v13 = v1236++ >= 9;
                if (v13)
                {
                  unint64_t v1237 = 0;
                  int v1242 = a1[*v4];
                  goto LABEL_3086;
                }
              }
              a1[*v4] = 1;
LABEL_3084:
              int v1242 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v1237 = 0;
              }
LABEL_3086:
              int v1243 = v1237 & 7;
              if (v1242 || v1243 == 4) {
                break;
              }
              if ((v1237 >> 3) == 2)
              {
                if (v1243 != 2 || !PBReaderPlaceMark()) {
                  goto LABEL_3802;
                }
                [a1 position];
                [a1 length];
LABEL_3097:
                while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
                {
                  char v1245 = 0;
                  unsigned int v1246 = 0;
                  unint64_t v1247 = 0;
                  while (1)
                  {
                    uint64_t v1248 = *v2;
                    uint64_t v1249 = *(void *)&a1[v1248];
                    unint64_t v1250 = v1249 + 1;
                    if (v1249 == -1 || v1250 > *(void *)&a1[*v3]) {
                      break;
                    }
                    char v1251 = *(unsigned char *)(*(void *)&a1[*v5] + v1249);
                    *(void *)&a1[v1248] = v1250;
                    v1247 |= (unint64_t)(v1251 & 0x7F) << v1245;
                    if ((v1251 & 0x80) == 0) {
                      goto LABEL_3107;
                    }
                    v1245 += 7;
                    BOOL v13 = v1246++ >= 9;
                    if (v13)
                    {
                      unint64_t v1247 = 0;
                      int v1252 = a1[*v4];
                      goto LABEL_3109;
                    }
                  }
                  a1[*v4] = 1;
LABEL_3107:
                  int v1252 = a1[*v4];
                  if (a1[*v4]) {
                    unint64_t v1247 = 0;
                  }
LABEL_3109:
                  int v1253 = v1247 & 7;
                  if (v1252 || v1253 == 4) {
                    break;
                  }
                  switch((v1247 >> 3))
                  {
                    case 1u:
                      if ((v1247 & 7) != 0) {
                        goto LABEL_3801;
                      }
                      unsigned int v1255 = 0;
                      while (1)
                      {
                        uint64_t v1256 = *v2;
                        uint64_t v1257 = *(void *)&a1[v1256];
                        unint64_t v1258 = v1257 + 1;
                        if (v1257 == -1 || v1258 > *(void *)&a1[*v3]) {
                          goto LABEL_3284;
                        }
                        int v1259 = *(char *)(*(void *)&a1[*v5] + v1257);
                        *(void *)&a1[v1256] = v1258;
                        if (v1259 < 0)
                        {
                          BOOL v52 = v1255++ > 8;
                          if (!v52) {
                            continue;
                          }
                        }
                        goto LABEL_3097;
                      }
                    case 2u:
                      if (v1253 != 2 || !PBReaderPlaceMark()) {
                        goto LABEL_3801;
                      }
                      [a1 position];
                      [a1 length];
                      while (2)
                      {
                        if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                          goto LABEL_3188;
                        }
                        char v1260 = 0;
                        unsigned int v1261 = 0;
                        unint64_t v1262 = 0;
                        while (1)
                        {
                          uint64_t v1263 = *v2;
                          uint64_t v1264 = *(void *)&a1[v1263];
                          unint64_t v1265 = v1264 + 1;
                          if (v1264 == -1 || v1265 > *(void *)&a1[*v3]) {
                            break;
                          }
                          char v1266 = *(unsigned char *)(*(void *)&a1[*v5] + v1264);
                          *(void *)&a1[v1263] = v1265;
                          v1262 |= (unint64_t)(v1266 & 0x7F) << v1260;
                          if ((v1266 & 0x80) == 0) {
                            goto LABEL_3137;
                          }
                          v1260 += 7;
                          BOOL v13 = v1261++ >= 9;
                          if (v13)
                          {
                            unint64_t v1262 = 0;
                            int v1267 = a1[*v4];
                            goto LABEL_3139;
                          }
                        }
                        a1[*v4] = 1;
LABEL_3137:
                        int v1267 = a1[*v4];
                        if (a1[*v4]) {
                          unint64_t v1262 = 0;
                        }
LABEL_3139:
                        int v1268 = v1262 & 7;
                        if (v1267) {
                          BOOL v1269 = 1;
                        }
                        else {
                          BOOL v1269 = v1268 == 4;
                        }
                        if (!v1269)
                        {
                          switch((v1262 >> 3))
                          {
                            case 1u:
                              if (v1268 == 2) {
                                goto LABEL_3153;
                              }
                              goto LABEL_3800;
                            case 2u:
                              if (v1268 == 2) {
                                goto LABEL_3153;
                              }
                              goto LABEL_3800;
                            case 3u:
                              if (v1268 == 2) {
                                goto LABEL_3153;
                              }
                              goto LABEL_3800;
                            case 4u:
                              if (v1268 != 2) {
                                goto LABEL_3800;
                              }
LABEL_3153:
                              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                                goto LABEL_3800;
                              }
                              continue;
                            default:
                              if (!PBReaderSkipValueWithTag()) {
                                goto LABEL_3800;
                              }
                              continue;
                          }
                        }
                        goto LABEL_3188;
                      }
                    case 3u:
                      if (v1253 != 2 || !PBReaderPlaceMark()) {
                        goto LABEL_3801;
                      }
                      [a1 position];
                      [a1 length];
                      while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
                      {
                        char v1270 = 0;
                        unsigned int v1271 = 0;
                        unint64_t v1272 = 0;
                        while (1)
                        {
                          uint64_t v1273 = *v2;
                          uint64_t v1274 = *(void *)&a1[v1273];
                          unint64_t v1275 = v1274 + 1;
                          if (v1274 == -1 || v1275 > *(void *)&a1[*v3]) {
                            break;
                          }
                          char v1276 = *(unsigned char *)(*(void *)&a1[*v5] + v1274);
                          *(void *)&a1[v1273] = v1275;
                          v1272 |= (unint64_t)(v1276 & 0x7F) << v1270;
                          if ((v1276 & 0x80) == 0) {
                            goto LABEL_3168;
                          }
                          v1270 += 7;
                          BOOL v13 = v1271++ >= 9;
                          if (v13)
                          {
                            unint64_t v1272 = 0;
                            int v1277 = a1[*v4];
                            goto LABEL_3170;
                          }
                        }
                        a1[*v4] = 1;
LABEL_3168:
                        int v1277 = a1[*v4];
                        if (a1[*v4]) {
                          unint64_t v1272 = 0;
                        }
LABEL_3170:
                        int v1278 = v1272 & 7;
                        if (v1277) {
                          BOOL v1279 = 1;
                        }
                        else {
                          BOOL v1279 = v1278 == 4;
                        }
                        if (!v1279)
                        {
                          switch((v1272 >> 3))
                          {
                            case 1u:
                              if (v1278 == 2) {
                                goto LABEL_3186;
                              }
                              goto LABEL_3800;
                            case 2u:
                              if (v1278 == 2) {
                                goto LABEL_3186;
                              }
                              goto LABEL_3800;
                            case 3u:
                              if (v1278 == 2) {
                                goto LABEL_3186;
                              }
                              goto LABEL_3800;
                            case 4u:
                              if (v1278 == 2) {
                                goto LABEL_3186;
                              }
                              goto LABEL_3800;
                            case 5u:
                              if (v1278 != 2) {
                                goto LABEL_3800;
                              }
LABEL_3186:
                              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                                goto LABEL_3800;
                              }
                              continue;
                            default:
                              if (!PBReaderSkipValueWithTag()) {
                                goto LABEL_3800;
                              }
                              continue;
                          }
                        }
                        break;
                      }
LABEL_3188:
                      int v1280 = a1[*v4];
                      PBReaderRecallMark();
                      if (v1280) {
                        goto LABEL_3801;
                      }
                      goto LABEL_3275;
                    case 4u:
                      if (v1253 != 2 || !PBReaderPlaceMark()) {
                        goto LABEL_3801;
                      }
                      [a1 position];
                      [a1 length];
LABEL_3193:
                      while (2)
                      {
                        if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                          goto LABEL_3274;
                        }
                        char v1281 = 0;
                        unsigned int v1282 = 0;
                        unint64_t v1283 = 0;
                        while (1)
                        {
                          uint64_t v1284 = *v2;
                          uint64_t v1285 = *(void *)&a1[v1284];
                          unint64_t v1286 = v1285 + 1;
                          if (v1285 == -1 || v1286 > *(void *)&a1[*v3]) {
                            break;
                          }
                          char v1287 = *(unsigned char *)(*(void *)&a1[*v5] + v1285);
                          *(void *)&a1[v1284] = v1286;
                          v1283 |= (unint64_t)(v1287 & 0x7F) << v1281;
                          if ((v1287 & 0x80) == 0) {
                            goto LABEL_3203;
                          }
                          v1281 += 7;
                          BOOL v13 = v1282++ >= 9;
                          if (v13)
                          {
                            unint64_t v1283 = 0;
                            int v1288 = a1[*v4];
                            goto LABEL_3205;
                          }
                        }
                        a1[*v4] = 1;
LABEL_3203:
                        int v1288 = a1[*v4];
                        if (a1[*v4]) {
                          unint64_t v1283 = 0;
                        }
LABEL_3205:
                        int v1289 = v1283 & 7;
                        if (v1288) {
                          BOOL v1290 = 1;
                        }
                        else {
                          BOOL v1290 = v1289 == 4;
                        }
                        if (!v1290)
                        {
                          switch((v1283 >> 3))
                          {
                            case 1u:
                              if (v1289 == 2) {
                                goto LABEL_3222;
                              }
                              goto LABEL_3800;
                            case 2u:
                              if (v1289 == 2) {
                                goto LABEL_3222;
                              }
                              goto LABEL_3800;
                            case 3u:
                              if (v1289 != 2)
                              {
                                if ((v1283 & 7) == 0)
                                {
                                  do
                                  {
                                    uint64_t v1291 = *v2;
                                    uint64_t v1292 = *(void *)&a1[v1291];
                                    unint64_t v1293 = v1292 + 1;
                                    if (v1292 == -1 || v1293 > *(void *)&a1[*v3])
                                    {
                                      a1[*v4] = 1;
                                      goto LABEL_3193;
                                    }
                                    int v1294 = *(char *)(*(void *)&a1[*v5] + v1292);
                                    *(void *)&a1[v1291] = v1293;
                                    if ((v1294 & 0x80000000) == 0) {
                                      break;
                                    }
                                    unsigned int v1295 = v1289++;
                                  }
                                  while (v1295 <= 8);
                                  continue;
                                }
                                goto LABEL_3800;
                              }
                              if (!PBReaderPlaceMark()) {
                                goto LABEL_3800;
                              }
                              break;
                            case 4u:
                              if (v1289 == 2) {
                                goto LABEL_3222;
                              }
                              goto LABEL_3800;
                            default:
LABEL_3222:
                              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                                goto LABEL_3800;
                              }
                              continue;
                          }
                          while (1)
                          {
LABEL_3225:
                            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]
                              || (unsigned int v1296 = a1[*v4], a1[*v4]))
                            {
                              PBReaderRecallMark();
                              goto LABEL_3193;
                            }
                            while (1)
                            {
                              uint64_t v1297 = *v2;
                              uint64_t v1298 = *(void *)&a1[v1297];
                              unint64_t v1299 = v1298 + 1;
                              if (v1298 == -1 || v1299 > *(void *)&a1[*v3]) {
                                break;
                              }
                              int v1300 = *(char *)(*(void *)&a1[*v5] + v1298);
                              *(void *)&a1[v1297] = v1299;
                              if (v1300 < 0)
                              {
                                BOOL v13 = v1296++ >= 9;
                                if (!v13) {
                                  continue;
                                }
                              }
                              goto LABEL_3225;
                            }
                            a1[*v4] = 1;
                          }
                        }
                        goto LABEL_3274;
                      }
                    case 5u:
                      if (v1253 != 2 || !PBReaderPlaceMark()) {
                        goto LABEL_3801;
                      }
                      [a1 position];
                      [a1 length];
LABEL_3239:
                      while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
                      {
                        char v1301 = 0;
                        unsigned int v1302 = 0;
                        unint64_t v1303 = 0;
                        while (1)
                        {
                          uint64_t v1304 = *v2;
                          uint64_t v1305 = *(void *)&a1[v1304];
                          unint64_t v1306 = v1305 + 1;
                          if (v1305 == -1 || v1306 > *(void *)&a1[*v3]) {
                            break;
                          }
                          char v1307 = *(unsigned char *)(*(void *)&a1[*v5] + v1305);
                          *(void *)&a1[v1304] = v1306;
                          v1303 |= (unint64_t)(v1307 & 0x7F) << v1301;
                          if ((v1307 & 0x80) == 0) {
                            goto LABEL_3249;
                          }
                          v1301 += 7;
                          BOOL v13 = v1302++ >= 9;
                          if (v13)
                          {
                            unint64_t v1303 = 0;
                            int v1308 = a1[*v4];
                            goto LABEL_3251;
                          }
                        }
                        a1[*v4] = 1;
LABEL_3249:
                        int v1308 = a1[*v4];
                        if (a1[*v4]) {
                          unint64_t v1303 = 0;
                        }
LABEL_3251:
                        int v1309 = v1303 & 7;
                        if (v1308) {
                          BOOL v1310 = 1;
                        }
                        else {
                          BOOL v1310 = v1309 == 4;
                        }
                        if (!v1310)
                        {
                          switch((v1303 >> 3))
                          {
                            case 1u:
                              if (v1309 == 2) {
                                goto LABEL_3259;
                              }
                              goto LABEL_3800;
                            case 2u:
                              if (v1309 == 2) {
                                goto LABEL_3259;
                              }
                              goto LABEL_3800;
                            case 3u:
                              if (v1309 != 2 || !PBReaderPlaceMark() || !GEOPDIconIsValid(a1)) {
                                goto LABEL_3800;
                              }
                              PBReaderRecallMark();
                              continue;
                            case 4u:
                              if ((v1303 & 7) != 0) {
                                goto LABEL_3800;
                              }
                              unsigned int v1311 = 0;
                              break;
                            default:
LABEL_3259:
                              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                                goto LABEL_3800;
                              }
                              continue;
                          }
                          do
                          {
                            uint64_t v1312 = *v2;
                            uint64_t v1313 = *(void *)&a1[v1312];
                            unint64_t v1314 = v1313 + 1;
                            if (v1313 == -1 || v1314 > *(void *)&a1[*v3])
                            {
                              a1[*v4] = 1;
                              goto LABEL_3239;
                            }
                            int v1315 = *(char *)(*(void *)&a1[*v5] + v1313);
                            *(void *)&a1[v1312] = v1314;
                            if ((v1315 & 0x80000000) == 0) {
                              break;
                            }
                            BOOL v52 = v1311++ > 8;
                          }
                          while (!v52);
                          continue;
                        }
                        break;
                      }
LABEL_3274:
                      int v1316 = a1[*v4];
                      PBReaderRecallMark();
                      if (v1316) {
                        goto LABEL_3801;
                      }
LABEL_3275:
                      PBReaderRecallMark();
                      continue;
                    case 6u:
                      if ((v1247 & 7) != 0) {
                        goto LABEL_3801;
                      }
                      unsigned int v1317 = 0;
                      break;
                    default:
                      if ((PBReaderSkipValueWithTag() & 1) == 0) {
                        goto LABEL_3801;
                      }
                      continue;
                  }
                  while (1)
                  {
                    uint64_t v1318 = *v2;
                    uint64_t v1319 = *(void *)&a1[v1318];
                    unint64_t v1320 = v1319 + 1;
                    if (v1319 == -1 || v1320 > *(void *)&a1[*v3]) {
                      break;
                    }
                    int v1321 = *(char *)(*(void *)&a1[*v5] + v1319);
                    *(void *)&a1[v1318] = v1320;
                    if (v1321 < 0)
                    {
                      BOOL v52 = v1317++ > 8;
                      if (!v52) {
                        continue;
                      }
                    }
                    goto LABEL_3097;
                  }
LABEL_3284:
                  a1[*v4] = 1;
                }
                int v1322 = a1[*v4];
                PBReaderRecallMark();
                if (v1322) {
                  goto LABEL_3802;
                }
                PBReaderRecallMark();
              }
              else if ((v1237 >> 3) == 1 && v1243 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
              {
                goto LABEL_3802;
              }
            }
            int v1323 = a1[*v4];
            PBReaderRecallMark();
            if (!v1323)
            {
LABEL_3297:
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_3811;
          }
          break;
        }
LABEL_3298:
        int v1324 = a1[*v4];
        PBReaderRecallMark();
        if (!v1324) {
          goto LABEL_3789;
        }
        goto LABEL_3812;
      case 0x5Fu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v1325 = 0;
          unsigned int v1326 = 0;
          unint64_t v1327 = 0;
          while (2)
          {
            uint64_t v1328 = *v2;
            uint64_t v1329 = *(void *)&a1[v1328];
            unint64_t v1330 = v1329 + 1;
            if (v1329 == -1 || v1330 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v1331 = *(unsigned char *)(*(void *)&a1[*v5] + v1329);
              *(void *)&a1[v1328] = v1330;
              v1327 |= (unint64_t)(v1331 & 0x7F) << v1325;
              if (v1331 < 0)
              {
                v1325 += 7;
                BOOL v13 = v1326++ >= 9;
                if (v13)
                {
                  unint64_t v1327 = 0;
                  int v1332 = a1[*v4];
                  goto LABEL_3315;
                }
                continue;
              }
            }
            break;
          }
          int v1332 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v1327 = 0;
          }
LABEL_3315:
          int v1333 = v1327 & 7;
          if (v1332) {
            BOOL v1334 = 1;
          }
          else {
            BOOL v1334 = v1333 == 4;
          }
          if (!v1334)
          {
            if ((v1327 >> 3) == 2)
            {
              if (v1333 != 2) {
                goto LABEL_3811;
              }
            }
            else if ((v1327 >> 3) == 1)
            {
              if (v1333 != 2 || !PBReaderPlaceMark()) {
                goto LABEL_3811;
              }
              [a1 position];
              [a1 length];
LABEL_3324:
              while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
              {
                char v1335 = 0;
                unsigned int v1336 = 0;
                unint64_t v1337 = 0;
                while (1)
                {
                  uint64_t v1338 = *v2;
                  uint64_t v1339 = *(void *)&a1[v1338];
                  unint64_t v1340 = v1339 + 1;
                  if (v1339 == -1 || v1340 > *(void *)&a1[*v3]) {
                    break;
                  }
                  char v1341 = *(unsigned char *)(*(void *)&a1[*v5] + v1339);
                  *(void *)&a1[v1338] = v1340;
                  v1337 |= (unint64_t)(v1341 & 0x7F) << v1335;
                  if ((v1341 & 0x80) == 0) {
                    goto LABEL_3334;
                  }
                  v1335 += 7;
                  BOOL v13 = v1336++ >= 9;
                  if (v13)
                  {
                    unint64_t v1337 = 0;
                    int v1342 = a1[*v4];
                    goto LABEL_3336;
                  }
                }
                a1[*v4] = 1;
LABEL_3334:
                int v1342 = a1[*v4];
                if (a1[*v4]) {
                  unint64_t v1337 = 0;
                }
LABEL_3336:
                int v1343 = v1337 & 7;
                if (v1342 || v1343 == 4) {
                  break;
                }
                switch((v1337 >> 3))
                {
                  case 1u:
                    if (v1343 != 2 || !PBReaderPlaceMark() || !GEOPDEnrichmentInfoIsValid(a1)) {
                      goto LABEL_3796;
                    }
                    PBReaderRecallMark();
                    continue;
                  case 2u:
                    if (v1343 == 2) {
                      goto LABEL_3358;
                    }
                    goto LABEL_3796;
                  case 3u:
                    if (v1343 == 2) {
                      goto LABEL_3358;
                    }
                    goto LABEL_3796;
                  case 4u:
                    if ((v1337 & 7) != 0) {
                      goto LABEL_3796;
                    }
                    unsigned int v1345 = 0;
                    break;
                  case 5u:
                    if (v1343 == 2) {
                      goto LABEL_3358;
                    }
                    goto LABEL_3796;
                  default:
LABEL_3358:
                    if ((PBReaderSkipValueWithTag() & 1) == 0) {
                      goto LABEL_3796;
                    }
                    continue;
                }
                while (1)
                {
                  uint64_t v1346 = *v2;
                  uint64_t v1347 = *(void *)&a1[v1346];
                  unint64_t v1348 = v1347 + 1;
                  if (v1347 == -1 || v1348 > *(void *)&a1[*v3]) {
                    break;
                  }
                  int v1349 = *(char *)(*(void *)&a1[*v5] + v1347);
                  *(void *)&a1[v1346] = v1348;
                  if (v1349 < 0)
                  {
                    BOOL v52 = v1345++ > 8;
                    if (!v52) {
                      continue;
                    }
                  }
                  goto LABEL_3324;
                }
                a1[*v4] = 1;
              }
              int v1350 = a1[*v4];
              PBReaderRecallMark();
              if (!v1350)
              {
                PBReaderRecallMark();
                continue;
              }
              goto LABEL_3811;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_3811;
            }
            continue;
          }
          break;
        }
LABEL_3366:
        int v1351 = a1[*v4];
        PBReaderRecallMark();
        if (!v1351) {
          goto LABEL_3789;
        }
        goto LABEL_3812;
      case 0x60u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_3371:
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v1352 = 0;
          unsigned int v1353 = 0;
          unint64_t v1354 = 0;
          while (2)
          {
            uint64_t v1355 = *v2;
            uint64_t v1356 = *(void *)&a1[v1355];
            unint64_t v1357 = v1356 + 1;
            if (v1356 == -1 || v1357 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v1358 = *(unsigned char *)(*(void *)&a1[*v5] + v1356);
              *(void *)&a1[v1355] = v1357;
              v1354 |= (unint64_t)(v1358 & 0x7F) << v1352;
              if (v1358 < 0)
              {
                v1352 += 7;
                BOOL v13 = v1353++ >= 9;
                if (v13)
                {
                  unint64_t v1354 = 0;
                  int v1359 = a1[*v4];
                  goto LABEL_3383;
                }
                continue;
              }
            }
            break;
          }
          int v1359 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v1354 = 0;
          }
LABEL_3383:
          int v1360 = v1354 & 7;
          if (v1359) {
            BOOL v1361 = 1;
          }
          else {
            BOOL v1361 = v1360 == 4;
          }
          if (!v1361)
          {
            unint64_t v1362 = v1354 >> 3;
            if ((v1354 >> 3) == 3)
            {
              if (v1360 != 2) {
                goto LABEL_3811;
              }
            }
            else
            {
              if (v1362 == 2)
              {
                if ((v1354 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v1368 = 0;
                while (1)
                {
                  uint64_t v1369 = *v2;
                  uint64_t v1370 = *(void *)&a1[v1369];
                  unint64_t v1371 = v1370 + 1;
                  if (v1370 == -1 || v1371 > *(void *)&a1[*v3]) {
                    break;
                  }
                  int v1372 = *(char *)(*(void *)&a1[*v5] + v1370);
                  *(void *)&a1[v1369] = v1371;
                  if (v1372 < 0)
                  {
                    BOOL v52 = v1368++ > 8;
                    if (!v52) {
                      continue;
                    }
                  }
                  goto LABEL_3371;
                }
LABEL_3408:
                a1[*v4] = 1;
                continue;
              }
              if (v1362 == 1)
              {
                if ((v1354 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v1363 = 0;
                while (1)
                {
                  uint64_t v1364 = *v2;
                  uint64_t v1365 = *(void *)&a1[v1364];
                  unint64_t v1366 = v1365 + 1;
                  if (v1365 == -1 || v1366 > *(void *)&a1[*v3]) {
                    goto LABEL_3408;
                  }
                  int v1367 = *(char *)(*(void *)&a1[*v5] + v1365);
                  *(void *)&a1[v1364] = v1366;
                  if (v1367 < 0)
                  {
                    BOOL v52 = v1363++ > 8;
                    if (!v52) {
                      continue;
                    }
                  }
                  goto LABEL_3371;
                }
              }
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_3811;
            }
            continue;
          }
          break;
        }
LABEL_3411:
        int v1373 = a1[*v4];
        PBReaderRecallMark();
        if (v1373) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x61u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_3416:
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v1374 = 0;
          unsigned int v1375 = 0;
          unint64_t v1376 = 0;
          while (2)
          {
            uint64_t v1377 = *v2;
            uint64_t v1378 = *(void *)&a1[v1377];
            unint64_t v1379 = v1378 + 1;
            if (v1378 == -1 || v1379 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v1380 = *(unsigned char *)(*(void *)&a1[*v5] + v1378);
              *(void *)&a1[v1377] = v1379;
              v1376 |= (unint64_t)(v1380 & 0x7F) << v1374;
              if (v1380 < 0)
              {
                v1374 += 7;
                BOOL v13 = v1375++ >= 9;
                if (v13)
                {
                  unint64_t v1376 = 0;
                  int v1381 = a1[*v4];
                  goto LABEL_3428;
                }
                continue;
              }
            }
            break;
          }
          int v1381 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v1376 = 0;
          }
LABEL_3428:
          int v1382 = v1376 & 7;
          if (v1381) {
            BOOL v1383 = 1;
          }
          else {
            BOOL v1383 = v1382 == 4;
          }
          if (!v1383)
          {
            unint64_t v1384 = v1376 >> 3;
            if ((v1376 >> 3) == 3)
            {
              if ((v1376 & 7) == 0)
              {
                unsigned int v1416 = 0;
                do
                {
                  uint64_t v1417 = *v2;
                  uint64_t v1418 = *(void *)&a1[v1417];
                  unint64_t v1419 = v1418 + 1;
                  if (v1418 == -1 || v1419 > *(void *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                    goto LABEL_3416;
                  }
                  int v1420 = *(char *)(*(void *)&a1[*v5] + v1418);
                  *(void *)&a1[v1417] = v1419;
                  if ((v1420 & 0x80000000) == 0) {
                    break;
                  }
                  BOOL v52 = v1416++ > 8;
                }
                while (!v52);
                continue;
              }
              goto LABEL_3811;
            }
            if (v1384 == 2)
            {
              if (v1382 != 2 || !PBReaderPlaceMark() || !GEOPDSSearchTierMetadataIsValid(a1)) {
                goto LABEL_3811;
              }
            }
            else
            {
              if (v1384 != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
              }
              if (v1382 != 2 || !PBReaderPlaceMark()) {
                goto LABEL_3811;
              }
              [a1 position];
              [a1 length];
LABEL_3438:
              while (2)
              {
                if (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
                {
                  char v1385 = 0;
                  unsigned int v1386 = 0;
                  unint64_t v1387 = 0;
                  while (1)
                  {
                    uint64_t v1388 = *v2;
                    uint64_t v1389 = *(void *)&a1[v1388];
                    unint64_t v1390 = v1389 + 1;
                    if (v1389 == -1 || v1390 > *(void *)&a1[*v3]) {
                      break;
                    }
                    char v1391 = *(unsigned char *)(*(void *)&a1[*v5] + v1389);
                    *(void *)&a1[v1388] = v1390;
                    v1387 |= (unint64_t)(v1391 & 0x7F) << v1385;
                    if ((v1391 & 0x80) == 0) {
                      goto LABEL_3448;
                    }
                    v1385 += 7;
                    BOOL v13 = v1386++ >= 9;
                    if (v13)
                    {
                      unint64_t v1387 = 0;
                      int v1392 = a1[*v4];
                      goto LABEL_3450;
                    }
                  }
                  a1[*v4] = 1;
LABEL_3448:
                  int v1392 = a1[*v4];
                  if (a1[*v4]) {
                    unint64_t v1387 = 0;
                  }
LABEL_3450:
                  int v1393 = v1387 & 7;
                  if (!v1392 && v1393 != 4)
                  {
                    switch((v1387 >> 3))
                    {
                      case 1u:
                        if ((v1387 & 7) != 0) {
                          goto LABEL_3810;
                        }
                        unsigned int v1395 = 0;
                        while (1)
                        {
                          uint64_t v1396 = *v2;
                          uint64_t v1397 = *(void *)&a1[v1396];
                          unint64_t v1398 = v1397 + 1;
                          if (v1397 == -1 || v1398 > *(void *)&a1[*v3]) {
                            goto LABEL_3476;
                          }
                          int v1399 = *(char *)(*(void *)&a1[*v5] + v1397);
                          *(void *)&a1[v1396] = v1398;
                          if (v1399 < 0)
                          {
                            BOOL v52 = v1395++ > 8;
                            if (!v52) {
                              continue;
                            }
                          }
                          goto LABEL_3438;
                        }
                      case 2u:
                        if (v1393 == 2) {
                          goto LABEL_3466;
                        }
                        goto LABEL_3810;
                      case 3u:
                        if (v1393 == 2) {
                          goto LABEL_3466;
                        }
                        goto LABEL_3810;
                      case 4u:
                        if ((v1387 & 7) != 0) {
                          goto LABEL_3810;
                        }
                        unsigned int v1400 = 0;
                        while (1)
                        {
                          uint64_t v1401 = *v2;
                          uint64_t v1402 = *(void *)&a1[v1401];
                          unint64_t v1403 = v1402 + 1;
                          if (v1402 == -1 || v1403 > *(void *)&a1[*v3]) {
                            break;
                          }
                          int v1404 = *(char *)(*(void *)&a1[*v5] + v1402);
                          *(void *)&a1[v1401] = v1403;
                          if (v1404 < 0)
                          {
                            BOOL v52 = v1400++ > 8;
                            if (!v52) {
                              continue;
                            }
                          }
                          goto LABEL_3438;
                        }
LABEL_3476:
                        a1[*v4] = 1;
                        continue;
                      case 5u:
                        if (v1393 == 2 && PBReaderPlaceMark() && GEOPDSSearchTierMetadataIsValid(a1)) {
                          goto LABEL_3510;
                        }
                        goto LABEL_3810;
                      case 6u:
                        if (v1393 != 2 || !PBReaderPlaceMark()) {
                          goto LABEL_3810;
                        }
                        [a1 position];
                        [a1 length];
                        break;
                      default:
LABEL_3466:
                        if ((PBReaderSkipValueWithTag() & 1) == 0) {
                          goto LABEL_3810;
                        }
                        continue;
                    }
                    while (1)
                    {
                      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                        goto LABEL_3509;
                      }
                      char v1405 = 0;
                      unsigned int v1406 = 0;
                      unint64_t v1407 = 0;
                      while (1)
                      {
                        uint64_t v1408 = *v2;
                        uint64_t v1409 = *(void *)&a1[v1408];
                        unint64_t v1410 = v1409 + 1;
                        if (v1409 == -1 || v1410 > *(void *)&a1[*v3]) {
                          break;
                        }
                        char v1411 = *(unsigned char *)(*(void *)&a1[*v5] + v1409);
                        *(void *)&a1[v1408] = v1410;
                        v1407 |= (unint64_t)(v1411 & 0x7F) << v1405;
                        if ((v1411 & 0x80) == 0) {
                          goto LABEL_3494;
                        }
                        v1405 += 7;
                        BOOL v13 = v1406++ >= 9;
                        if (v13)
                        {
                          unint64_t v1407 = 0;
                          int v1412 = a1[*v4];
                          goto LABEL_3496;
                        }
                      }
                      a1[*v4] = 1;
LABEL_3494:
                      int v1412 = a1[*v4];
                      if (a1[*v4]) {
                        unint64_t v1407 = 0;
                      }
LABEL_3496:
                      int v1413 = v1407 & 7;
                      if (v1412 || v1413 == 4)
                      {
LABEL_3509:
                        int v1415 = a1[*v4];
                        PBReaderRecallMark();
                        if (v1415)
                        {
LABEL_3810:
                          PBReaderRecallMark();
                          goto LABEL_3811;
                        }
LABEL_3510:
                        PBReaderRecallMark();
                        goto LABEL_3438;
                      }
                      if ((v1407 >> 3) == 2) {
                        break;
                      }
                      if ((v1407 >> 3) == 1)
                      {
                        if (v1413 != 2) {
                          goto LABEL_3809;
                        }
LABEL_3505:
                        if ((PBReaderSkipValueWithTag() & 1) == 0) {
                          goto LABEL_3809;
                        }
                      }
                      else if (!PBReaderSkipValueWithTag())
                      {
LABEL_3809:
                        PBReaderRecallMark();
                        goto LABEL_3810;
                      }
                    }
                    if (v1413 != 2) {
                      goto LABEL_3809;
                    }
                    goto LABEL_3505;
                  }
                }
                break;
              }
              int v1421 = a1[*v4];
              PBReaderRecallMark();
              if (v1421) {
                goto LABEL_3811;
              }
            }
            PBReaderRecallMark();
            continue;
          }
          break;
        }
        int v1516 = a1[*v4];
        PBReaderRecallMark();
        if (v1516) {
          goto LABEL_3812;
        }
LABEL_3789:
        PBReaderRecallMark();
LABEL_3790:
        if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
          goto LABEL_3794;
        }
        break;
      case 0x62u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_3531:
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v1422 = 0;
          unsigned int v1423 = 0;
          unint64_t v1424 = 0;
          while (2)
          {
            uint64_t v1425 = *v2;
            uint64_t v1426 = *(void *)&a1[v1425];
            unint64_t v1427 = v1426 + 1;
            if (v1426 == -1 || v1427 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v1428 = *(unsigned char *)(*(void *)&a1[*v5] + v1426);
              *(void *)&a1[v1425] = v1427;
              v1424 |= (unint64_t)(v1428 & 0x7F) << v1422;
              if (v1428 < 0)
              {
                v1422 += 7;
                BOOL v13 = v1423++ >= 9;
                if (v13)
                {
                  unint64_t v1424 = 0;
                  int v1429 = a1[*v4];
                  goto LABEL_3543;
                }
                continue;
              }
            }
            break;
          }
          int v1429 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v1424 = 0;
          }
LABEL_3543:
          int v1430 = v1424 & 7;
          if (v1429) {
            BOOL v1431 = 1;
          }
          else {
            BOOL v1431 = v1430 == 4;
          }
          if (!v1431)
          {
            switch((v1424 >> 3))
            {
              case 1u:
                if (v1430 != 2 || !PBReaderPlaceMark()) {
                  goto LABEL_3811;
                }
                [a1 position];
                [a1 length];
LABEL_3551:
                if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                  goto LABEL_3650;
                }
                char v1432 = 0;
                unsigned int v1433 = 0;
                unint64_t v1434 = 0;
                while (1)
                {
                  uint64_t v1435 = *v2;
                  uint64_t v1436 = *(void *)&a1[v1435];
                  unint64_t v1437 = v1436 + 1;
                  if (v1436 == -1 || v1437 > *(void *)&a1[*v3]) {
                    break;
                  }
                  char v1438 = *(unsigned char *)(*(void *)&a1[*v5] + v1436);
                  *(void *)&a1[v1435] = v1437;
                  v1434 |= (unint64_t)(v1438 & 0x7F) << v1432;
                  if ((v1438 & 0x80) == 0) {
                    goto LABEL_3561;
                  }
                  v1432 += 7;
                  BOOL v13 = v1433++ >= 9;
                  if (v13)
                  {
                    unint64_t v1434 = 0;
                    int v1439 = a1[*v4];
                    goto LABEL_3563;
                  }
                }
                a1[*v4] = 1;
LABEL_3561:
                int v1439 = a1[*v4];
                if (a1[*v4]) {
                  unint64_t v1434 = 0;
                }
LABEL_3563:
                int v1440 = v1434 & 7;
                if (v1439) {
                  BOOL v1441 = 1;
                }
                else {
                  BOOL v1441 = v1440 == 4;
                }
                if (v1441)
                {
LABEL_3650:
                  int v1468 = a1[*v4];
                  PBReaderRecallMark();
                  if (!v1468)
                  {
LABEL_3651:
                    PBReaderRecallMark();
                    continue;
                  }
                  goto LABEL_3811;
                }
                switch((v1434 >> 3))
                {
                  case 1u:
                    if (v1440 != 2 || !PBReaderPlaceMark() || !GEOPDEntityIsValid(a1)) {
                      goto LABEL_3807;
                    }
                    goto LABEL_3623;
                  case 2u:
                    if (v1440 != 2 || !PBReaderPlaceMark()) {
                      goto LABEL_3807;
                    }
                    [a1 position];
                    [a1 length];
                    break;
                  case 3u:
                    if (v1440 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1)) {
                      goto LABEL_3807;
                    }
                    goto LABEL_3623;
                  case 4u:
                    if (v1440 != 2 || !PBReaderPlaceMark() || !GEOPDPhotoIsValid(a1)) {
                      goto LABEL_3807;
                    }
                    goto LABEL_3623;
                  case 5u:
                    if ((v1434 & 7) != 0) {
                      goto LABEL_3807;
                    }
                    unsigned int v1452 = 0;
                    do
                    {
                      uint64_t v1453 = *v2;
                      uint64_t v1454 = *(void *)&a1[v1453];
                      unint64_t v1455 = v1454 + 1;
                      if (v1454 == -1 || v1455 > *(void *)&a1[*v3])
                      {
                        a1[*v4] = 1;
                        goto LABEL_3551;
                      }
                      int v1456 = *(char *)(*(void *)&a1[*v5] + v1454);
                      *(void *)&a1[v1453] = v1455;
                      if ((v1456 & 0x80000000) == 0) {
                        break;
                      }
                      BOOL v52 = v1452++ > 8;
                    }
                    while (!v52);
                    goto LABEL_3551;
                  case 6u:
                    if (v1440 != 2 || !PBReaderPlaceMark() || !GEOPDHoursIsValid(a1)) {
                      goto LABEL_3807;
                    }
                    goto LABEL_3623;
                  case 7u:
                    if (v1440 == 2 && PBReaderPlaceMark() && GEOPDBusinessHoursIsValid(a1)) {
                      goto LABEL_3623;
                    }
                    goto LABEL_3807;
                  default:
                    if ((PBReaderSkipValueWithTag() & 1) == 0) {
                      goto LABEL_3807;
                    }
                    goto LABEL_3551;
                }
                while (1)
                {
LABEL_3577:
                  if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                    goto LABEL_3624;
                  }
                  char v1442 = 0;
                  unsigned int v1443 = 0;
                  unint64_t v1444 = 0;
                  while (1)
                  {
                    uint64_t v1445 = *v2;
                    uint64_t v1446 = *(void *)&a1[v1445];
                    unint64_t v1447 = v1446 + 1;
                    if (v1446 == -1 || v1447 > *(void *)&a1[*v3]) {
                      break;
                    }
                    char v1448 = *(unsigned char *)(*(void *)&a1[*v5] + v1446);
                    *(void *)&a1[v1445] = v1447;
                    v1444 |= (unint64_t)(v1448 & 0x7F) << v1442;
                    if ((v1448 & 0x80) == 0) {
                      goto LABEL_3587;
                    }
                    v1442 += 7;
                    BOOL v13 = v1443++ >= 9;
                    if (v13)
                    {
                      unint64_t v1444 = 0;
                      int v1449 = a1[*v4];
                      goto LABEL_3589;
                    }
                  }
                  a1[*v4] = 1;
LABEL_3587:
                  int v1449 = a1[*v4];
                  if (a1[*v4]) {
                    unint64_t v1444 = 0;
                  }
LABEL_3589:
                  int v1450 = v1444 & 7;
                  if (v1449 || v1450 == 4)
                  {
LABEL_3624:
                    int v1457 = a1[*v4];
                    PBReaderRecallMark();
                    if (!v1457)
                    {
LABEL_3623:
                      PBReaderRecallMark();
                      goto LABEL_3551;
                    }
                    goto LABEL_3807;
                  }
                  if ((v1444 >> 3) == 1) {
                    break;
                  }
                  if ((PBReaderSkipValueWithTag() & 1) == 0) {
                    goto LABEL_3804;
                  }
                }
                if (v1450 == 2 && PBReaderPlaceMark() && GEOPDFactoidIsValid(a1))
                {
                  PBReaderRecallMark();
                  goto LABEL_3577;
                }
LABEL_3804:
                PBReaderRecallMark();
                goto LABEL_3807;
              case 2u:
                if (v1430 == 2 && PBReaderPlaceMark() && GEOPDMapsIdentifierIsValid(a1)) {
                  goto LABEL_3651;
                }
                goto LABEL_3811;
              case 3u:
                if ((v1424 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v1458 = 0;
                while (1)
                {
                  uint64_t v1459 = *v2;
                  uint64_t v1460 = *(void *)&a1[v1459];
                  unint64_t v1461 = v1460 + 1;
                  if (v1460 == -1 || v1461 > *(void *)&a1[*v3]) {
                    goto LABEL_3649;
                  }
                  int v1462 = *(char *)(*(void *)&a1[*v5] + v1460);
                  *(void *)&a1[v1459] = v1461;
                  if (v1462 < 0)
                  {
                    BOOL v52 = v1458++ > 8;
                    if (!v52) {
                      continue;
                    }
                  }
                  goto LABEL_3531;
                }
              case 4u:
                if ((v1424 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v1463 = 0;
                do
                {
                  uint64_t v1464 = *v2;
                  uint64_t v1465 = *(void *)&a1[v1464];
                  unint64_t v1466 = v1465 + 1;
                  if (v1465 == -1 || v1466 > *(void *)&a1[*v3])
                  {
LABEL_3649:
                    a1[*v4] = 1;
                    goto LABEL_3531;
                  }
                  int v1467 = *(char *)(*(void *)&a1[*v5] + v1465);
                  *(void *)&a1[v1464] = v1466;
                  if ((v1467 & 0x80000000) == 0) {
                    break;
                  }
                  BOOL v52 = v1463++ > 8;
                }
                while (!v52);
                break;
              default:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
            }
            continue;
          }
          break;
        }
LABEL_3652:
        int v1469 = a1[*v4];
        PBReaderRecallMark();
        if (!v1469) {
          goto LABEL_3789;
        }
        goto LABEL_3812;
      case 0x63u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
LABEL_3657:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_3776;
          }
          char v1470 = 0;
          unsigned int v1471 = 0;
          unint64_t v1472 = 0;
          while (2)
          {
            uint64_t v1473 = *v2;
            uint64_t v1474 = *(void *)&a1[v1473];
            unint64_t v1475 = v1474 + 1;
            if (v1474 == -1 || v1475 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v1476 = *(unsigned char *)(*(void *)&a1[*v5] + v1474);
              *(void *)&a1[v1473] = v1475;
              v1472 |= (unint64_t)(v1476 & 0x7F) << v1470;
              if (v1476 < 0)
              {
                v1470 += 7;
                BOOL v13 = v1471++ >= 9;
                if (v13)
                {
                  unint64_t v1472 = 0;
                  int v1477 = a1[*v4];
                  goto LABEL_3669;
                }
                continue;
              }
            }
            break;
          }
          int v1477 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v1472 = 0;
          }
LABEL_3669:
          int v1478 = v1472 & 7;
          if (v1477) {
            BOOL v1479 = 1;
          }
          else {
            BOOL v1479 = v1478 == 4;
          }
          if (!v1479)
          {
            switch((v1472 >> 3))
            {
              case 1u:
              case 2u:
              case 3u:
                if (v1478 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1)) {
                  goto LABEL_3811;
                }
                goto LABEL_3683;
              case 4u:
                if (v1478 != 2 || !PBReaderPlaceMark() || !GEOPDPhotoIsValid(a1)) {
                  goto LABEL_3811;
                }
LABEL_3683:
                PBReaderRecallMark();
                continue;
              case 5u:
                if ((v1472 & 7) != 0) {
                  goto LABEL_3811;
                }
                unsigned int v1480 = 0;
                break;
              default:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_3811;
                }
                continue;
            }
            do
            {
              uint64_t v1481 = *v2;
              uint64_t v1482 = *(void *)&a1[v1481];
              unint64_t v1483 = v1482 + 1;
              if (v1482 == -1 || v1483 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
                goto LABEL_3657;
              }
              int v1484 = *(char *)(*(void *)&a1[*v5] + v1482);
              *(void *)&a1[v1481] = v1483;
              if ((v1484 & 0x80000000) == 0) {
                break;
              }
              BOOL v52 = v1480++ > 8;
            }
            while (!v52);
            continue;
          }
          goto LABEL_3776;
        }
      case 0x64u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3776;
            }
            char v1485 = 0;
            unsigned int v1486 = 0;
            unint64_t v1487 = 0;
            while (2)
            {
              uint64_t v1488 = *v2;
              uint64_t v1489 = *(void *)&a1[v1488];
              unint64_t v1490 = v1489 + 1;
              if (v1489 == -1 || v1490 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v1491 = *(unsigned char *)(*(void *)&a1[*v5] + v1489);
                *(void *)&a1[v1488] = v1490;
                v1487 |= (unint64_t)(v1491 & 0x7F) << v1485;
                if (v1491 < 0)
                {
                  v1485 += 7;
                  BOOL v13 = v1486++ >= 9;
                  if (v13)
                  {
                    unint64_t v1487 = 0;
                    int v1492 = a1[*v4];
                    goto LABEL_3708;
                  }
                  continue;
                }
              }
              break;
            }
            int v1492 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v1487 = 0;
            }
LABEL_3708:
            int v1493 = v1487 & 7;
            if (v1492) {
              BOOL v1494 = 1;
            }
            else {
              BOOL v1494 = v1493 == 4;
            }
            if (v1494) {
              goto LABEL_3776;
            }
            if ((v1487 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
            break;
          }
          if (v1493 == 2 && PBReaderPlaceMark() && GEOPDMapsIdentifierIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x65u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDAddressWithComponentsIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x66u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_3776;
            }
            char v1495 = 0;
            unsigned int v1496 = 0;
            unint64_t v1497 = 0;
            while (2)
            {
              uint64_t v1498 = *v2;
              uint64_t v1499 = *(void *)&a1[v1498];
              unint64_t v1500 = v1499 + 1;
              if (v1499 == -1 || v1500 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v1501 = *(unsigned char *)(*(void *)&a1[*v5] + v1499);
                *(void *)&a1[v1498] = v1500;
                v1497 |= (unint64_t)(v1501 & 0x7F) << v1495;
                if (v1501 < 0)
                {
                  v1495 += 7;
                  BOOL v13 = v1496++ >= 9;
                  if (v13)
                  {
                    unint64_t v1497 = 0;
                    int v1502 = a1[*v4];
                    goto LABEL_3738;
                  }
                  continue;
                }
              }
              break;
            }
            int v1502 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v1497 = 0;
            }
LABEL_3738:
            int v1503 = v1497 & 7;
            if (v1502) {
              BOOL v1504 = 1;
            }
            else {
              BOOL v1504 = v1503 == 4;
            }
            if (v1504) {
              goto LABEL_3776;
            }
            if ((v1497 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
            break;
          }
          if (v1503 == 2 && PBReaderPlaceMark() && GEOPDCaptionedPhotoIsValid(a1))
          {
            PBReaderRecallMark();
            continue;
          }
          goto LABEL_3811;
        }
      case 0x67u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_3812;
        }
        [a1 position];
        [a1 length];
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v1505 = 0;
          unsigned int v1506 = 0;
          unint64_t v1507 = 0;
          while (2)
          {
            uint64_t v1508 = *v2;
            uint64_t v1509 = *(void *)&a1[v1508];
            unint64_t v1510 = v1509 + 1;
            if (v1509 == -1 || v1510 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v1511 = *(unsigned char *)(*(void *)&a1[*v5] + v1509);
              *(void *)&a1[v1508] = v1510;
              v1507 |= (unint64_t)(v1511 & 0x7F) << v1505;
              if (v1511 < 0)
              {
                v1505 += 7;
                BOOL v13 = v1506++ >= 9;
                if (v13)
                {
                  unint64_t v1507 = 0;
                  int v1512 = a1[*v4];
                  goto LABEL_3764;
                }
                continue;
              }
            }
            break;
          }
          int v1512 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v1507 = 0;
          }
LABEL_3764:
          int v1513 = v1507 & 7;
          if (v1512) {
            BOOL v1514 = 1;
          }
          else {
            BOOL v1514 = v1513 == 4;
          }
          if (!v1514)
          {
            if ((v1507 >> 3) != 2 && (v1507 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_3811;
              }
              continue;
            }
            if (v1513 == 2 && PBReaderPlaceMark() && GEOPDMapsIdentifierIsValid(a1))
            {
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_3811;
          }
          break;
        }
LABEL_3776:
        int v1515 = a1[*v4];
        PBReaderRecallMark();
        if (v1515) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x68u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDHikeAssociatedInfoIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x69u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDHikeSummaryIsValid(a1)) {
          goto LABEL_3812;
        }
        goto LABEL_3789;
      case 0x6Au:
        if (v15 == 2 && PBReaderPlaceMark() && GEOPDHikeGeometryIsValid(a1)) {
          goto LABEL_3789;
        }
        goto LABEL_3812;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_3812;
        }
        goto LABEL_3790;
    }
  }
}

BOOL GEOPDGuideSummaryLayoutMetadataIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  id v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  long long v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        unint64_t v10 = *(void *)&a1[v9];
        if (v10 == -1 || v10 >= *(void *)&a1[*v3]) {
          break;
        }
        char v11 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v13 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      if (v13 || (v8 & 7) == 4) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_33;
        }
        unsigned int v15 = 0;
        while (1)
        {
          uint64_t v16 = *v2;
          unint64_t v17 = *(void *)&a1[v16];
          if (v17 == -1 || v17 >= *(void *)&a1[*v3]) {
            break;
          }
          unint64_t v18 = v17 + 1;
          int v19 = *(char *)(*(void *)&a1[*v5] + v17);
          *(void *)&a1[v16] = v18;
          if (v19 < 0 && v15++ <= 8) {
            continue;
          }
          goto LABEL_30;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_33:
        BOOL v21 = 0;
        goto LABEL_32;
      }
LABEL_30:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v21 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v21;
}

BOOL GEOPDAdamAppIdentifierIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  id v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  long long v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_26:
          BOOL v17 = 0;
          goto LABEL_25;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_26;
      }
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v17 = a1[*v4] == 0;
LABEL_25:
  PBReaderRecallMark();
  return v17;
}

BOOL GEOLatLngE7IsValid(char *a1)
{
  v32[1] = *MEMORY[0x1E4F143B8];
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  id v2 = (int *)MEMORY[0x1E4F940E8];
  v32[0] = 0;
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  long long v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_40;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4)
      {
LABEL_40:
        BOOL v29 = HIDWORD(v32[0]) != 0;
        goto LABEL_42;
      }
      if ((v8 >> 3) == 1)
      {
        uint64_t v22 = 0;
        char v23 = 1;
        while (1)
        {
          char v24 = v23;
          int v25 = *((_DWORD *)v32 + v22);
          if (!v25) {
            break;
          }
          if (v25 != 1)
          {
            char v23 = 0;
            uint64_t v22 = 1;
            if (v24) {
              continue;
            }
          }
          goto LABEL_46;
        }
        *((_DWORD *)v32 + v22) = 1;
      }
      else
      {
        if ((v8 >> 3) != 2)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_46;
          }
          goto LABEL_39;
        }
        uint64_t v18 = 0;
        char v19 = 1;
        while (1)
        {
          char v20 = v19;
          int v21 = *((_DWORD *)v32 + v18);
          if (!v21) {
            break;
          }
          if (v21 != 2)
          {
            char v19 = 0;
            uint64_t v18 = 1;
            if (v20) {
              continue;
            }
          }
          goto LABEL_46;
        }
        *((_DWORD *)v32 + v18) = 2;
      }
      if (v16 != 5)
      {
LABEL_46:
        PBReaderRecallMark();
        return 0;
      }
      uint64_t v26 = *v2;
      unint64_t v27 = *(void *)&a1[v26];
      if (v27 <= 0xFFFFFFFFFFFFFFFBLL && (unint64_t v28 = v27 + 4, v28 <= *(void *)&a1[*v3])) {
        *(void *)&a1[v26] = v28;
      }
      else {
        a1[v14] = 1;
      }
LABEL_39:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_40;
      }
    }
  }
  BOOL v29 = 0;
LABEL_42:
  if (a1[*v4]) {
    BOOL v30 = 0;
  }
  else {
    BOOL v30 = v29;
  }
  PBReaderRecallMark();
  return v30;
}

BOOL GEOFormattedStringIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  long long v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 3u:
          if (v15 != 2) {
            goto LABEL_42;
          }
          goto LABEL_26;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOFormatArgumentIsValid(a1)) {
            goto LABEL_42;
          }
          goto LABEL_39;
        case 5u:
          if (v15 == 2) {
            goto LABEL_26;
          }
          goto LABEL_42;
        case 6u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOFormatStyleIsValid(a1)) {
            goto LABEL_42;
          }
          goto LABEL_39;
        case 7u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOConditionalFormattedStringIsValid(a1)) {
            goto LABEL_42;
          }
          goto LABEL_39;
        case 8u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOFormattedStringMetaDataIsValid(a1)) {
            goto LABEL_42;
          }
LABEL_39:
          PBReaderRecallMark();
          goto LABEL_40;
        default:
LABEL_26:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_42:
            PBReaderRecallMark();
            return 0;
          }
LABEL_40:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_41;
          }
          break;
      }
    }
  }
LABEL_41:
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOFormatStyleIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  id v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  long long v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      if ((v8 >> 3) == 2)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_37;
        }
        unsigned int v17 = 0;
        while (1)
        {
          uint64_t v18 = *v2;
          uint64_t v19 = *(void *)&a1[v18];
          unint64_t v20 = v19 + 1;
          if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
            break;
          }
          int v21 = *(char *)(*(void *)&a1[*v5] + v19);
          *(void *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8) {
            continue;
          }
          goto LABEL_34;
        }
        a1[*v4] = 1;
      }
      else if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_37:
          BOOL v23 = 0;
          goto LABEL_36;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_37;
      }
LABEL_34:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v23 = a1[*v4] == 0;
LABEL_36:
  PBReaderRecallMark();
  return v23;
}

BOOL GEORoadAccessPointIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  id v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  long long v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1)) {
            goto LABEL_93;
          }
          PBReaderRecallMark();
          continue;
        case 2u:
          if ((v8 & 7) != 0) {
            goto LABEL_93;
          }
          unsigned int v17 = 0;
          while (1)
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *(void *)&a1[v18];
            unint64_t v20 = v19 + 1;
            if (v19 == -1 || v20 > *(void *)&a1[*v3]) {
              goto LABEL_89;
            }
            int v21 = *(char *)(*(void *)&a1[*v5] + v19);
            *(void *)&a1[v18] = v20;
            if (v21 < 0)
            {
              BOOL v22 = v17++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_90;
          }
        case 3u:
          if ((v8 & 7) != 0) {
            goto LABEL_93;
          }
          unsigned int v23 = 0;
          while (1)
          {
            uint64_t v24 = *v2;
            uint64_t v25 = *(void *)&a1[v24];
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
              goto LABEL_89;
            }
            int v27 = *(char *)(*(void *)&a1[*v5] + v25);
            *(void *)&a1[v24] = v26;
            if (v27 < 0)
            {
              BOOL v22 = v23++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_90;
          }
        case 4u:
          if ((v8 & 7) != 0) {
            goto LABEL_93;
          }
          unsigned int v28 = 0;
          while (1)
          {
            uint64_t v29 = *v2;
            uint64_t v30 = *(void *)&a1[v29];
            unint64_t v31 = v30 + 1;
            if (v30 == -1 || v31 > *(void *)&a1[*v3]) {
              goto LABEL_89;
            }
            int v32 = *(char *)(*(void *)&a1[*v5] + v30);
            *(void *)&a1[v29] = v31;
            if (v32 < 0)
            {
              BOOL v22 = v28++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_90;
          }
        case 5u:
          if ((v8 & 7) != 0) {
            goto LABEL_93;
          }
          unsigned int v33 = 0;
          while (1)
          {
            uint64_t v34 = *v2;
            uint64_t v35 = *(void *)&a1[v34];
            unint64_t v36 = v35 + 1;
            if (v35 == -1 || v36 > *(void *)&a1[*v3]) {
              goto LABEL_89;
            }
            int v37 = *(char *)(*(void *)&a1[*v5] + v35);
            *(void *)&a1[v34] = v36;
            if (v37 < 0)
            {
              BOOL v22 = v33++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_90;
          }
        case 0xBu:
          if ((v8 & 7) != 0) {
            goto LABEL_93;
          }
          unsigned int v38 = 0;
          while (1)
          {
            uint64_t v39 = *v2;
            uint64_t v40 = *(void *)&a1[v39];
            unint64_t v41 = v40 + 1;
            if (v40 == -1 || v41 > *(void *)&a1[*v3]) {
              goto LABEL_89;
            }
            int v42 = *(char *)(*(void *)&a1[*v5] + v40);
            *(void *)&a1[v39] = v41;
            if (v42 < 0)
            {
              BOOL v22 = v38++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_90;
          }
        case 0xCu:
          if ((v8 & 7) != 0) {
            goto LABEL_93;
          }
          unsigned int v43 = 0;
          while (1)
          {
            uint64_t v44 = *v2;
            uint64_t v45 = *(void *)&a1[v44];
            unint64_t v46 = v45 + 1;
            if (v45 == -1 || v46 > *(void *)&a1[*v3]) {
              goto LABEL_89;
            }
            int v47 = *(char *)(*(void *)&a1[*v5] + v45);
            *(void *)&a1[v44] = v46;
            if (v47 < 0)
            {
              BOOL v22 = v43++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_90;
          }
        case 0xDu:
          if ((v8 & 7) != 0) {
            goto LABEL_93;
          }
          unsigned int v48 = 0;
          while (1)
          {
            uint64_t v49 = *v2;
            uint64_t v50 = *(void *)&a1[v49];
            unint64_t v51 = v50 + 1;
            if (v50 == -1 || v51 > *(void *)&a1[*v3]) {
              goto LABEL_89;
            }
            int v52 = *(char *)(*(void *)&a1[*v5] + v50);
            *(void *)&a1[v49] = v51;
            if (v52 < 0)
            {
              BOOL v22 = v48++ > 8;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_90;
          }
        case 0xEu:
          if ((v8 & 7) != 0) {
            goto LABEL_93;
          }
          unsigned int v53 = 0;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_93:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        uint64_t v54 = *v2;
        uint64_t v55 = *(void *)&a1[v54];
        unint64_t v56 = v55 + 1;
        if (v55 == -1 || v56 > *(void *)&a1[*v3]) {
          break;
        }
        int v57 = *(char *)(*(void *)&a1[*v5] + v55);
        *(void *)&a1[v54] = v56;
        if (v57 < 0)
        {
          BOOL v22 = v53++ > 8;
          if (!v22) {
            continue;
          }
        }
        goto LABEL_90;
      }
LABEL_89:
      a1[*v4] = 1;
LABEL_90:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v58 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v58;
}

BOOL GEOPDAttributionIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  id v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  long long v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    uint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2) {
            goto LABEL_33;
          }
          goto LABEL_30;
        case 2u:
          if (v15 == 2) {
            goto LABEL_30;
          }
          goto LABEL_33;
        case 3u:
          if (v15 == 2) {
            goto LABEL_30;
          }
          goto LABEL_33;
        case 4u:
          if (v15 == 2) {
            goto LABEL_30;
          }
          goto LABEL_33;
        case 5u:
          if (v15 != 2) {
            goto LABEL_33;
          }
LABEL_30:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_33:
            BOOL v17 = 0;
            goto LABEL_34;
          }
LABEL_31:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_32;
          }
          break;
        default:
          if (!PBReaderSkipValueWithTag()) {
            goto LABEL_33;
          }
          goto LABEL_31;
      }
    }
  }
LABEL_32:
  BOOL v17 = a1[*v4] == 0;
LABEL_34:
  PBReaderRecallMark();
  return v17;
}

void sub_188F678DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188F67938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188F67A10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _AddressObjectPtrFromLegacy(GEOAddress *a1, GEOLocalizedString *a2, GEOPDLocalizedSpokenStructuredAddress *a3, NSString *a4, NSString *a5, NSString *a6, NSString *a7, NSString *a8, void *a9)
{
  int v16 = a2;
  BOOL v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  unint64_t v20 = a6;
  uint64_t v30 = a7;
  int v21 = a8;
  id v22 = a9;
  long long v47 = 0uLL;
  uint64_t v48 = 0;
  if (v16)
  {
    unsigned int v23 = [(GEOLocalizedString *)v16 data];
    [(NSData *)buf cppData];
    if (SHIBYTE(v48) < 0) {
      operator delete((void *)v47);
    }
    long long v47 = *(_OWORD *)buf;
    uint64_t v48 = v42;
    HIBYTE(v42) = 0;
    buf[0] = 0;

    uint64_t v24 = HIBYTE(v48);
    if (v48 < 0) {
      uint64_t v24 = *((void *)&v47 + 1);
    }
    if (v24)
    {
      addr_obj::SerializedAddress::SerializedAddress(&v46, &v47);
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      if (v17 && [(GEOPDLocalizedSpokenStructuredAddress *)v17 hasStringValue])
      {
        uint64_t v25 = [(GEOPDLocalizedSpokenStructuredAddress *)v17 stringValue];
        [(NSString *)buf stdString];
        if (SHIBYTE(v45) < 0) {
          operator delete((void *)v44);
        }
        long long v44 = *(_OWORD *)buf;
        uint64_t v45 = v42;
        HIBYTE(v42) = 0;
        buf[0] = 0;
      }
      if (SHIBYTE(v48) < 0)
      {
        *(unsigned char *)long long v47 = 0;
        *((void *)&v47 + 1) = 0;
        if (!v18) {
          goto LABEL_23;
        }
      }
      else
      {
        LOBYTE(v47) = 0;
        HIBYTE(v48) = 0;
        if (!v18) {
          goto LABEL_23;
        }
      }
      -[GEOPDLocalizedSpokenStructuredAddress _readSpokenStructuredAddress]((uint64_t)v18);
      if (v18[4])
      {
        int v27 = -[GEOPDLocalizedSpokenStructuredAddress spokenStructuredAddress](v18);
        unsigned int v28 = [v27 data];
        [(NSData *)buf cppData];
        if (SHIBYTE(v48) < 0) {
          operator delete((void *)v47);
        }
        long long v47 = *(_OWORD *)buf;
        uint64_t v48 = v42;
        HIBYTE(v42) = 0;
        buf[0] = 0;
      }
LABEL_23:
      addr_obj::SerializedAddress::SerializedAddress(&v43, &v47);
      [(NSString *)v32 stdString];
      [(NSString *)v39 stdString];
      [(NSString *)__p stdString];
      addr_obj::Localization::Localization(buf, v32, v39, __p);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      if (v33 < 0) {
        operator delete(v32[0]);
      }
      if (_MergedGlobals_335 != -1) {
        dispatch_once(&_MergedGlobals_335, &__block_literal_global_201);
      }
      uint64_t v29 = (addr_obj::Logger *)qword_1EB2A0770;
      if (v19) {
        [(NSString *)v39 stdString];
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(v39, "");
      }
      if (v20) {
        [(NSString *)__p stdString];
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "");
      }
      memset(v36, 0, sizeof(v36));
      std::string::basic_string[abi:ne180100]<0>(&v34, "");
      addr_obj::SerializedAddress::SerializedAddress(&v35, &v34);
      addr_obj::VenueInfo::VenueInfo((addr_obj::VenueInfo *)v32);
      memset(v31, 0, sizeof(v31));
      addr_obj::AddressObjectFactory::fromLegacy(v29, (addr_obj::Localization *)buf, (uint64_t)v39, (unsigned __int8 *)&v46, (uint64_t)__p, (uint64_t)&v44, (unsigned __int8 *)&v43, (uint64_t)v36, (unsigned __int8 *)&v35, (long long **)v32, (uint64_t)v31, 0);
    }
  }
  unint64_t v26 = GEOFindOrCreateLog("com.apple.GeoServices", "GEOAddressObject");
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_188D96000, v26, OS_LOG_TYPE_DEBUG, "Empty localized address, can't create AddressObject", buf, 2u);
  }

  a1->super.super.isa = 0;
  a1->_reader = 0;
  if (SHIBYTE(v48) < 0) {
    operator delete((void *)v47);
  }
}

void sub_188F67EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58)
{
  if (*(char *)(v66 - 137) < 0) {
    operator delete(*(void **)(v66 - 160));
  }
  if (*(char *)(v66 - 113) < 0) {
    operator delete(*(void **)(v66 - 136));
  }
  if (*(char *)(v66 - 89) < 0) {
    operator delete(*(void **)(v66 - 112));
  }

  _Unwind_Resume(a1);
}

void addr_obj::VenueInfo::~VenueInfo(void ***this)
{
  std::unique_ptr<addr_obj::venue::Formatters>::reset[abi:ne180100](this + 3, 0);
  id v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
}

void ***std::unique_ptr<addr_obj::venue::Formatters>::reset[abi:ne180100](void ***result, void **a2)
{
  id v2 = *result;
  *Class result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<addr_obj::venue::Formatter>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x18C11F580](v2, 0x20C40960023A9);
  }
  return result;
}

void std::vector<addr_obj::venue::Formatter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  id v1 = *a1;
  id v2 = (void **)**a1;
  if (v2)
  {
    long long v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        char v6 = v4;
        std::vector<addr_obj::venue::Template>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void addr_obj::AddressObjectFactory::fromLegacy(addr_obj::Logger *a1, addr_obj::Localization *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7, uint64_t a8, unsigned __int8 *a9, long long **a10, uint64_t a11, int a12)
{
  if (addr_obj::Logger::isInitialized(a1))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v83);
    char v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"input parameters: ", 18);
    int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"localization", 12);
    int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
    int v15 = addr_obj::operator<<(v14, a2);
    int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
    BOOL v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"name", 4);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"==", 2);
    int v19 = *(char *)(a3 + 23);
    if (v19 >= 0) {
      uint64_t v20 = a3;
    }
    else {
      uint64_t v20 = *(void *)a3;
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a3 + 8);
    }
    id v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
    unsigned int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"address", 7);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"==", 2);
    unint64_t v26 = addr_obj::operator<<(v25, a4);
    int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", ", 2);
    unsigned int v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"spokenName", 10);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"==", 2);
    int v30 = *(char *)(a5 + 23);
    if (v30 >= 0) {
      uint64_t v31 = a5;
    }
    else {
      uint64_t v31 = *(void *)a5;
    }
    if (v30 >= 0) {
      uint64_t v32 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      uint64_t v32 = *(void *)(a5 + 8);
    }
    char v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
    long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", ", 2);
    std::string v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"spokenAddress", 13);
    unint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"==", 2);
    int v37 = *(char *)(a6 + 23);
    if (v37 >= 0) {
      uint64_t v38 = a6;
    }
    else {
      uint64_t v38 = *(void *)a6;
    }
    if (v37 >= 0) {
      uint64_t v39 = *(unsigned __int8 *)(a6 + 23);
    }
    else {
      uint64_t v39 = *(void *)(a6 + 8);
    }
    char v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v38, v39);
    unint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)", ", 2);
    uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"spokenStructuredAddress", 23);
    std::string v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"==", 2);
    long long v44 = addr_obj::operator<<(v43, a7);
    uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", ", 2);
    std::string v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"phoneticName", 12);
    long long v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"==", 2);
    int v48 = *(char *)(a8 + 23);
    if (v48 >= 0) {
      uint64_t v49 = a8;
    }
    else {
      uint64_t v49 = *(void *)a8;
    }
    if (v48 >= 0) {
      uint64_t v50 = *(unsigned __int8 *)(a8 + 23);
    }
    else {
      uint64_t v50 = *(void *)(a8 + 8);
    }
    unint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
    int v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)", ", 2);
    unsigned int v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"phoneticAddress", 15);
    uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"==", 2);
    uint64_t v55 = addr_obj::operator<<(v54, a9);
    unint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)", ", 2);
    int v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"venueData", 9);
    BOOL v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"==", 2);
    unint64_t v59 = addr_obj::operator<<(v58, a10);
    char v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)", ", 2);
    uint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"locationAddress", 15);
    int v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"==", 2);
    int v63 = *(char *)(a11 + 23);
    if (v63 >= 0) {
      uint64_t v64 = a11;
    }
    else {
      uint64_t v64 = *(void *)a11;
    }
    if (v63 >= 0) {
      uint64_t v65 = *(unsigned __int8 *)(a11 + 23);
    }
    else {
      uint64_t v65 = *(void *)(a11 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, v64, v65);
    std::string::basic_string[abi:ne180100]<0>(v81, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
    std::string::basic_string[abi:ne180100]<0>(v79, "fromLegacy");
    std::stringbuf::str();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    addr_obj::Logger::log(2, (uint64_t)v81, 171, (uint64_t)v79, (uint64_t)&v77, (uint64_t)&__p);
    if (v76 < 0) {
      operator delete(__p);
    }
    if (v78 < 0) {
      operator delete(v77);
    }
    if (SHIBYTE(v80) < 0) {
      operator delete(v79[0]);
    }
    if (SHIBYTE(v82) < 0) {
      operator delete(v81[0]);
    }
    v83[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v83 + *(void *)(v83[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v83[1] = MEMORY[0x1E4FBA470] + 16;
    if (v87 < 0) {
      operator delete(v86);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18C11F4F0](&v88);
  }
  addr_obj::geo3::Address::Address((addr_obj::geo3::Address *)v83);
  v81[0] = 0;
  v81[1] = 0;
  uint64_t v82 = 0;
  addr_obj::parse((addr_obj::Localization *)a4, (uint64_t)v83);
  if ((v85 & 2) != 0)
  {
    uint64_t v66 = v84;
    if (!v84) {
      uint64_t v66 = *(addr_obj **)(addr_obj::geo3::Address::default_instance_(0) + 40);
    }
    addr_obj::getCountryCode(v66, (uint64_t)v79);
    if (SHIBYTE(v82) < 0) {
      operator delete(v81[0]);
    }
    *(_OWORD *)unint64_t v81 = *(_OWORD *)v79;
    uint64_t v82 = v80;
  }
  if (!a12)
  {
    uint64_t v67 = *(unsigned __int8 *)(a11 + 23);
    if ((v67 & 0x80u) != 0) {
      uint64_t v67 = *(void *)(a11 + 8);
    }
    if (!v67 && !addr_obj::Formatting::overrideLegacyShortAddress(a2, (uint64_t)v81)) {
      operator new();
    }
  }
  operator new();
}

void sub_188F68994(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,long long **a29,unsigned __int8 *a30,uint64_t a31,unsigned __int8 *a32,uint64_t a33,uint64_t a34,uint64_t a35,addr_obj::Localization *a36,uint64_t a37,unsigned __int8 *a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  MEMORY[0x18C11F580](v68, 0x10F3C40CF03993ALL);
  if (a67 < 0) {
    operator delete(a62);
  }
  addr_obj::geo3::Address::~Address((addr_obj::geo3::Address *)&a68);
  if (a2 == 3)
  {
    uint64_t v71 = __cxa_begin_catch(a1);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a68);
    uint64_t v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a68, (uint64_t)"; ", 2);
    unint64_t v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"fromLegacy", 10);
    char v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" failed for ", 12);
    int v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"input parameters: ", 18);
    char v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"localization", 12);
    int v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"==", 2);
    char v78 = addr_obj::operator<<(v77, a36);
    char v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)", ", 2);
    uint64_t v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"name", 4);
    unint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"==", 2);
    int v82 = *(char *)(a35 + 23);
    if (v82 >= 0) {
      uint64_t v83 = a35;
    }
    else {
      uint64_t v83 = *(void *)a35;
    }
    if (v82 >= 0) {
      uint64_t v84 = *(unsigned __int8 *)(a35 + 23);
    }
    else {
      uint64_t v84 = *(void *)(a35 + 8);
    }
    char v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, v83, v84);
    int v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)", ", 2);
    char v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"address", 7);
    uint64_t v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"==", 2);
    char v89 = addr_obj::operator<<(v88, a38);
    unsigned int v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)", ", 2);
    unint64_t v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"spokenName", 10);
    uint64_t v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"==", 2);
    int v93 = *(char *)(a34 + 23);
    if (v93 >= 0) {
      uint64_t v94 = a34;
    }
    else {
      uint64_t v94 = *(void *)a34;
    }
    if (v93 >= 0) {
      uint64_t v95 = *(unsigned __int8 *)(a34 + 23);
    }
    else {
      uint64_t v95 = *(void *)(a34 + 8);
    }
    int v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, v94, v95);
    int v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)", ", 2);
    BOOL v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"spokenAddress", 13);
    unsigned int v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"==", 2);
    int v100 = *(char *)(a33 + 23);
    if (v100 >= 0) {
      uint64_t v101 = a33;
    }
    else {
      uint64_t v101 = *(void *)a33;
    }
    if (v100 >= 0) {
      uint64_t v102 = *(unsigned __int8 *)(a33 + 23);
    }
    else {
      uint64_t v102 = *(void *)(a33 + 8);
    }
    int v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, v101, v102);
    unsigned int v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)", ", 2);
    uint64_t v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"spokenStructuredAddress", 23);
    uint64_t v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"==", 2);
    unint64_t v107 = addr_obj::operator<<(v106, a32);
    int v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)", ", 2);
    char v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"phoneticName", 12);
    unsigned int v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"==", 2);
    int v111 = *(char *)(a31 + 23);
    if (v111 >= 0) {
      uint64_t v112 = a31;
    }
    else {
      uint64_t v112 = *(void *)a31;
    }
    if (v111 >= 0) {
      uint64_t v113 = *(unsigned __int8 *)(a31 + 23);
    }
    else {
      uint64_t v113 = *(void *)(a31 + 8);
    }
    unint64_t v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, v112, v113);
    char v115 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)", ", 2);
    int v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"phoneticAddress", 15);
    int v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)"==", 2);
    v118 = addr_obj::operator<<(v117, a30);
    unint64_t v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)", ", 2);
    unsigned int v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"venueData", 9);
    uint64_t v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"==", 2);
    uint64_t v122 = addr_obj::operator<<(v121, a29);
    unint64_t v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)", ", 2);
    int v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)"locationAddress", 15);
    unsigned int v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)"==", 2);
    int v126 = *(char *)(a37 + 23);
    if (v126 >= 0) {
      uint64_t v127 = a37;
    }
    else {
      uint64_t v127 = *(void *)a37;
    }
    if (v126 >= 0) {
      uint64_t v128 = *(unsigned __int8 *)(a37 + 23);
    }
    else {
      uint64_t v128 = *(void *)(a37 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, v127, v128);
    std::stringbuf::str();
    addr_obj::AddressObjectException::operator+=(v71, &a62);
    if (a67 < 0) {
      operator delete(a62);
    }
    std::ostringstream::~ostringstream((uint64_t)&a68);
    __cxa_rethrow();
  }
  int v129 = (addr_obj::Logger *)__cxa_begin_catch(a1);
  if (a2 == 2)
  {
    int v130 = v129;
    if (addr_obj::Logger::isInitialized(v129))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a68);
      char v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a68, (uint64_t)"fromLegacy", 10);
      unsigned int v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)" failed: ", 9);
      unint64_t v133 = (const char *)(*(uint64_t (**)(addr_obj::Logger *))(*(void *)v130 + 16))(v130);
      size_t v134 = strlen(v133);
      uint64_t v135 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)v133, v134);
      unint64_t v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)"; for ", 6);
      char v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"input parameters: ", 18);
      int v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"localization", 12);
      int v139 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"==", 2);
      BOOL v140 = addr_obj::operator<<(v139, a36);
      unsigned int v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)", ", 2);
      uint64_t v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)"name", 4);
      uint64_t v143 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)"==", 2);
      int v144 = *(char *)(a35 + 23);
      if (v144 >= 0) {
        uint64_t v145 = a35;
      }
      else {
        uint64_t v145 = *(void *)a35;
      }
      if (v144 >= 0) {
        uint64_t v146 = *(unsigned __int8 *)(a35 + 23);
      }
      else {
        uint64_t v146 = *(void *)(a35 + 8);
      }
      unsigned int v147 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, v145, v146);
      unint64_t v148 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)", ", 2);
      uint64_t v149 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)"address", 7);
      uint64_t v150 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, (uint64_t)"==", 2);
      unint64_t v151 = addr_obj::operator<<(v150, a38);
      char v152 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)", ", 2);
      int v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)"spokenName", 10);
      int v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)"==", 2);
      int v155 = *(char *)(a34 + 23);
      if (v155 >= 0) {
        uint64_t v156 = a34;
      }
      else {
        uint64_t v156 = *(void *)a34;
      }
      if (v155 >= 0) {
        uint64_t v157 = *(unsigned __int8 *)(a34 + 23);
      }
      else {
        uint64_t v157 = *(void *)(a34 + 8);
      }
      unint64_t v158 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, v156, v157);
      int v159 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)", ", 2);
      unsigned int v160 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)"spokenAddress", 13);
      unsigned int v161 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"==", 2);
      int v162 = *(char *)(a33 + 23);
      if (v162 >= 0) {
        uint64_t v163 = a33;
      }
      else {
        uint64_t v163 = *(void *)a33;
      }
      if (v162 >= 0) {
        uint64_t v164 = *(unsigned __int8 *)(a33 + 23);
      }
      else {
        uint64_t v164 = *(void *)(a33 + 8);
      }
      int v165 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, v163, v164);
      unsigned int v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)", ", 2);
      uint64_t v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)"spokenStructuredAddress", 23);
      uint64_t v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)"==", 2);
      unint64_t v169 = addr_obj::operator<<(v168, a32);
      int v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)", ", 2);
      int v171 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)"phoneticName", 12);
      char v172 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)"==", 2);
      int v173 = *(char *)(a31 + 23);
      if (v173 >= 0) {
        uint64_t v174 = a31;
      }
      else {
        uint64_t v174 = *(void *)a31;
      }
      if (v173 >= 0) {
        uint64_t v175 = *(unsigned __int8 *)(a31 + 23);
      }
      else {
        uint64_t v175 = *(void *)(a31 + 8);
      }
      uint64_t v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v172, v174, v175);
      unint64_t v177 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)", ", 2);
      char v178 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)"phoneticAddress", 15);
      int v179 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)"==", 2);
      int v180 = addr_obj::operator<<(v179, a30);
      BOOL v181 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)", ", 2);
      unsigned int v182 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)"venueData", 9);
      uint64_t v183 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)"==", 2);
      uint64_t v184 = addr_obj::operator<<(v183, a29);
      unint64_t v185 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)", ", 2);
      int v186 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v185, (uint64_t)"locationAddress", 15);
      unsigned int v187 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)"==", 2);
      int v188 = *(char *)(a37 + 23);
      if (v188 >= 0) {
        uint64_t v189 = a37;
      }
      else {
        uint64_t v189 = *(void *)a37;
      }
      if (v188 >= 0) {
        uint64_t v190 = *(unsigned __int8 *)(a37 + 23);
      }
      else {
        uint64_t v190 = *(void *)(a37 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v187, v189, v190);
      std::string::basic_string[abi:ne180100]<0>(&a62, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
      std::string::basic_string[abi:ne180100]<0>(&a55, "fromLegacy");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(&a43, "");
      addr_obj::Logger::log(16, (uint64_t)&a62, 228, (uint64_t)&a55, (uint64_t)&__p, (uint64_t)&a43);
      if (a48 < 0) {
        operator delete(a43);
      }
      if (a54 < 0) {
        operator delete(__p);
      }
      if (a60 < 0) {
        operator delete(a55);
      }
      if (a67 < 0) {
        operator delete(a62);
      }
      std::ostringstream::~ostringstream((uint64_t)&a68);
    }
    __cxa_rethrow();
  }
  if (addr_obj::Logger::isInitialized(v129))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a68);
    int v191 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a68, (uint64_t)"fromLegacy", 10);
    unsigned int v192 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v191, (uint64_t)" failed for ", 12);
    uint64_t v193 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, (uint64_t)"input parameters: ", 18);
    uint64_t v194 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)"localization", 12);
    unint64_t v195 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)"==", 2);
    int v196 = addr_obj::operator<<(v195, a36);
    unsigned int v197 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)", ", 2);
    uint64_t v198 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"name", 4);
    uint64_t v199 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)"==", 2);
    int v200 = *(char *)(a35 + 23);
    if (v200 >= 0) {
      uint64_t v201 = a35;
    }
    else {
      uint64_t v201 = *(void *)a35;
    }
    if (v200 >= 0) {
      uint64_t v202 = *(unsigned __int8 *)(a35 + 23);
    }
    else {
      uint64_t v202 = *(void *)(a35 + 8);
    }
    uint64_t v203 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, v201, v202);
    uint64_t v204 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v203, (uint64_t)", ", 2);
    unint64_t v205 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v204, (uint64_t)"address", 7);
    int v206 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v205, (uint64_t)"==", 2);
    char v207 = addr_obj::operator<<(v206, a38);
    unsigned int v208 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v207, (uint64_t)", ", 2);
    unint64_t v209 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v208, (uint64_t)"spokenName", 10);
    uint64_t v210 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v209, (uint64_t)"==", 2);
    int v211 = *(char *)(a34 + 23);
    if (v211 >= 0) {
      uint64_t v212 = a34;
    }
    else {
      uint64_t v212 = *(void *)a34;
    }
    if (v211 >= 0) {
      uint64_t v213 = *(unsigned __int8 *)(a34 + 23);
    }
    else {
      uint64_t v213 = *(void *)(a34 + 8);
    }
    int v214 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, v212, v213);
    int v215 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v214, (uint64_t)", ", 2);
    v216 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v215, (uint64_t)"spokenAddress", 13);
    char v217 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v216, (uint64_t)"==", 2);
    int v218 = *(char *)(a33 + 23);
    if (v218 >= 0) {
      uint64_t v219 = a33;
    }
    else {
      uint64_t v219 = *(void *)a33;
    }
    if (v218 >= 0) {
      uint64_t v220 = *(unsigned __int8 *)(a33 + 23);
    }
    else {
      uint64_t v220 = *(void *)(a33 + 8);
    }
    uint64_t v221 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v217, v219, v220);
    unint64_t v222 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v221, (uint64_t)", ", 2);
    char v223 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v222, (uint64_t)"spokenStructuredAddress", 23);
    int v224 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"==", 2);
    int v225 = addr_obj::operator<<(v224, a32);
    v226 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v225, (uint64_t)", ", 2);
    char v227 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v226, (uint64_t)"phoneticName", 12);
    unsigned int v228 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v227, (uint64_t)"==", 2);
    int v229 = *(char *)(a31 + 23);
    if (v229 >= 0) {
      uint64_t v230 = a31;
    }
    else {
      uint64_t v230 = *(void *)a31;
    }
    if (v229 >= 0) {
      uint64_t v231 = *(unsigned __int8 *)(a31 + 23);
    }
    else {
      uint64_t v231 = *(void *)(a31 + 8);
    }
    unint64_t v232 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v228, v230, v231);
    char v233 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v232, (uint64_t)", ", 2);
    int v234 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"phoneticAddress", 15);
    v235 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"==", 2);
    unsigned int v236 = addr_obj::operator<<(v235, a30);
    uint64_t v237 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v236, (uint64_t)", ", 2);
    uint64_t v238 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v237, (uint64_t)"venueData", 9);
    unint64_t v239 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v238, (uint64_t)"==", 2);
    int v240 = addr_obj::operator<<(v239, a29);
    char v241 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v240, (uint64_t)", ", 2);
    unsigned int v242 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v241, (uint64_t)"locationAddress", 15);
    unint64_t v243 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v242, (uint64_t)"==", 2);
    int v244 = *(char *)(a37 + 23);
    if (v244 >= 0) {
      uint64_t v245 = a37;
    }
    else {
      uint64_t v245 = *(void *)a37;
    }
    if (v244 >= 0) {
      uint64_t v246 = *(unsigned __int8 *)(a37 + 23);
    }
    else {
      uint64_t v246 = *(void *)(a37 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v243, v245, v246);
    std::string::basic_string[abi:ne180100]<0>(&a62, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a55, "fromLegacy");
    std::stringbuf::str();
    std::string::basic_string[abi:ne180100]<0>(&a43, "");
    addr_obj::Logger::log(16, (uint64_t)&a62, 228, (uint64_t)&a55, (uint64_t)&__p, (uint64_t)&a43);
    if (a48 < 0) {
      operator delete(a43);
    }
    if (a54 < 0) {
      operator delete(__p);
    }
    if (a60 < 0) {
      operator delete(a55);
    }
    if (a67 < 0) {
      operator delete(a62);
    }
    std::ostringstream::~ostringstream((uint64_t)&a68);
  }
  __cxa_rethrow();
}

void sub_188F69D1C(_Unwind_Exception *a1)
{
}

void sub_188F69F0C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  if (a72 < 0) {
    operator delete(*v72);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x188F69F00);
}

void sub_188F6A018()
{
}

void *addr_obj::operator<<(void *a1, unsigned __int8 *a2)
{
  memset(&v9, 0, sizeof(v9));
  addr_obj::Base64::encodeString(a2, &v9);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"SerializedAddress: <", 20);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v4 = &v9;
  }
  else {
    long long v4 = (std::string *)v9.__r_.__value_.__r.__words[0];
  }
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v9.__r_.__value_.__l.__size_;
  }
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, size);
  unsigned int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)">", 1);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  return v7;
}

{
  void *v3;
  std::string *v4;
  std::string::size_type size;
  void *v6;
  void *v7;
  std::string v9;

  memset(&v9, 0, sizeof(v9));
  addr_obj::Base64::encodeString(a2, &v9);
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"SerializedStructuredAddress: <", 30);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v4 = &v9;
  }
  else {
    long long v4 = (std::string *)v9.__r_.__value_.__r.__words[0];
  }
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v9.__r_.__value_.__l.__size_;
  }
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, size);
  unsigned int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)">", 1);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  return v7;
}

void addr_obj::Base64::encodeString(unsigned __int8 *a1, std::string *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  addr_obj::Base64::Internal::encodeString(a1, a2, __s, 0x400uLL);
}

void std::shared_ptr<addr_obj::AddressObject>::shared_ptr[abi:ne180100]<addr_obj::V1AddressObject,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_188F6A2EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_189113EE8(v1);
  }
  _Unwind_Resume(exception_object);
}

void *addr_obj::operator<<(void *a1, long long **this)
{
  addr_obj::VenueInfo::str(this);
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_188F6A374(void *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void addr_obj::VenueInfo::VenueInfo(std::vector<std::string> *this)
{
}

void sub_188F6A5EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v3 = v2;
  std::unique_ptr<addr_obj::venue::Formatters>::reset[abi:ne180100](v3, 0);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<zilch::TrafficDynamicTile::Flow>::__vallocate[abi:ne180100](this, __n);
    std::vector<std::string>::pointer end = this->__end_;
    size_t v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::string>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_188F6A6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<zilch::TrafficDynamicTile::Flow>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  Class result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficDynamicTile::Flow>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

unint64_t addr_obj::VenueInfo::validate(addr_obj::VenueInfo *this)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3) <= 4)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"only <", 6);
    uint64_t v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"> fields are present; at least <",
      32);
    size_t v5 = (void *)std::ostream::operator<<();
    char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"> are required", 14);
    unsigned int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"; library version: ",
           19);
    unsigned __int8 v8 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v8))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
      std::stringbuf::str();
      if ((v39 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if ((v39 & 0x80u) == 0) {
        uint64_t v10 = v39;
      }
      else {
        uint64_t v10 = v38;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)p_p, v10);
      if ((char)v39 < 0) {
        operator delete(__p);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/VenueInfo.cpp");
      std::string::basic_string[abi:ne180100]<0>(v35, "validate");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v32, "");
      addr_obj::Logger::log(16, (uint64_t)&__p, 337, (uint64_t)v35, (uint64_t)&v34, (uint64_t)v32);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
      if ((char)v39 < 0) {
        operator delete(__p);
      }
      std::ostringstream::~ostringstream((uint64_t)v40);
    }
    unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"; at ", 5);
    int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/VenueInfo.cpp", 83);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::logic_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "LogicError");
    std::stringbuf::str();
    addr_obj::Exception<std::logic_error>::Exception(exception, (const void **)v40, (uint64_t)&__p);
  }
  id v2 = (addr_obj::venue::Formatters *)*((void *)this + 3);
  if (!v2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v41);
    unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"the formatters_ must not be empty", 33);
    char v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; library version: ",
            19);
    int v13 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v13))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
      std::stringbuf::str();
      if ((v39 & 0x80u) == 0) {
        int v14 = &__p;
      }
      else {
        int v14 = __p;
      }
      if ((v39 & 0x80u) == 0) {
        uint64_t v15 = v39;
      }
      else {
        uint64_t v15 = v38;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v14, v15);
      if ((char)v39 < 0) {
        operator delete(__p);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/VenueInfo.cpp");
      std::string::basic_string[abi:ne180100]<0>(v35, "validate");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v32, "");
      addr_obj::Logger::log(16, (uint64_t)&__p, 339, (uint64_t)v35, (uint64_t)&v34, (uint64_t)v32);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (v36 < 0) {
        operator delete(v35[0]);
      }
      if ((char)v39 < 0) {
        operator delete(__p);
      }
      std::ostringstream::~ostringstream((uint64_t)v40);
    }
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"; at ", 5);
    int v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/VenueInfo.cpp", 83);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)":", 1);
    std::ostream::operator<<();
    uint64_t v31 = (std::logic_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "LogicError");
    std::stringbuf::str();
    addr_obj::Exception<std::logic_error>::Exception(v31, (const void **)v40, (uint64_t)&__p);
  }
  unint64_t result = addr_obj::venue::Formatters::size(v2);
  if (result)
  {
    unint64_t result = addr_obj::venue::Formatters::size(*((addr_obj::venue::Formatters **)this + 3));
    if (result <= 3)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"only <", 6);
      addr_obj::venue::Formatters::size(*((addr_obj::venue::Formatters **)this + 3));
      int v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"> formatters are present; at least <",
        36);
      BOOL v17 = (void *)std::ostream::operator<<();
      uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"> are expected", 14);
      int v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"; library version: ",
              19);
      uint64_t v20 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"11.3.0", 6);
      if (addr_obj::Logger::isInitialized(v20))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
        std::stringbuf::str();
        if ((v39 & 0x80u) == 0) {
          uint64_t v21 = &__p;
        }
        else {
          uint64_t v21 = __p;
        }
        if ((v39 & 0x80u) == 0) {
          uint64_t v22 = v39;
        }
        else {
          uint64_t v22 = v38;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v21, v22);
        if ((char)v39 < 0) {
          operator delete(__p);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/VenueInfo.cpp");
        std::string::basic_string[abi:ne180100]<0>(v35, "validate");
        std::stringbuf::str();
        std::string::basic_string[abi:ne180100]<0>(v32, "");
        addr_obj::Logger::log(16, (uint64_t)&__p, 344, (uint64_t)v35, (uint64_t)&v34, (uint64_t)v32);
        if (v33 < 0) {
          operator delete(v32[0]);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        if (v36 < 0) {
          operator delete(v35[0]);
        }
        if ((char)v39 < 0) {
          operator delete(__p);
        }
        std::ostringstream::~ostringstream((uint64_t)v40);
      }
      unsigned int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"; at ", 5);
      uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/VenueInfo.cpp", 83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)":", 1);
      std::ostream::operator<<();
      uint64_t v25 = (std::logic_error *)__cxa_allocate_exception(0x28uLL);
      std::string::basic_string[abi:ne180100]<0>(v40, "LogicError");
      std::stringbuf::str();
      addr_obj::Exception<std::logic_error>::Exception(v25, (const void **)v40, (uint64_t)&__p);
    }
  }
  return result;
}

void sub_188F6B83C()
{
}

void sub_188F6B854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
}

unint64_t addr_obj::venue::Formatters::size(addr_obj::venue::Formatters *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
}

void addr_obj::V1AddressObject::V1AddressObject(uint64_t a1, int *a2, long long *a3, long long **a4, int a5, int a6, int a7, int a8, std::string *a9, uint64_t a10, std::string *a11, uint64_t a12)
{
}

{
  void *v13;

  int v13 = (void *)addr_obj::AddressObjectBase::AddressObjectBase(a1, a2, a3, a4);
  *int v13 = &unk_1ED516680;
  v13[31] = 0;
  v13[32] = 0;
  v13[33] = 0;
  addr_obj::geo3::Address::Address((addr_obj::geo3::Address *)(v13 + 34));
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  addr_obj::geo3::StructuredAddress::StructuredAddress((addr_obj::geo3::StructuredAddress *)(a1 + 384));
  *(void *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  addr_obj::geo3::Address::Address((addr_obj::geo3::Address *)(a1 + 656));
  operator new();
}

void addr_obj::getCountryCode(addr_obj *this@<X0>, uint64_t a2@<X8>)
{
}

std::string *addr_obj::Localization::Localization(std::string *this, std::string *__str, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = 0u;
  unsigned int v7 = this + 2;
  unsigned __int8 v8 = this + 1;
  this[2].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this->__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0u;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0 && __str->__r_.__value_.__l.__size_ >= 0x201)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"display language is too long: <", 31);
    uint64_t v10 = (void *)std::ostream::operator<<();
    unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)">", 1);
    char v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; library version: ",
            19);
    int v13 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v13))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v45);
      std::stringbuf::str();
      if ((v44 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if ((v44 & 0x80u) == 0) {
        uint64_t v15 = v44;
      }
      else {
        uint64_t v15 = v43;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)p_p, v15);
      if ((char)v44 < 0) {
        operator delete(__p);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
      std::string::basic_string[abi:ne180100]<0>(v40, "Localization");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v37, "");
      addr_obj::Logger::log(16, (uint64_t)&__p, 19, (uint64_t)v40, (uint64_t)&v39, (uint64_t)v37);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if ((char)v44 < 0) {
        operator delete(__p);
      }
      std::ostringstream::~ostringstream((uint64_t)v45);
    }
    std::string v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"; at ", 5);
    std::string v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v45, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v45, (uint64_t)&__p);
  }
  if (*(char *)(a3 + 23) < 0 && *(void *)(a3 + 8) >= 0x201uLL)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"country name is too long: <", 27);
    int v16 = (void *)std::ostream::operator<<();
    BOOL v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)">", 1);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; library version: ",
            19);
    int v19 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v19))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v45);
      std::stringbuf::str();
      if ((v44 & 0x80u) == 0) {
        uint64_t v20 = &__p;
      }
      else {
        uint64_t v20 = __p;
      }
      if ((v44 & 0x80u) == 0) {
        uint64_t v21 = v44;
      }
      else {
        uint64_t v21 = v43;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v20, v21);
      if ((char)v44 < 0) {
        operator delete(__p);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
      std::string::basic_string[abi:ne180100]<0>(v40, "Localization");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v37, "");
      addr_obj::Logger::log(16, (uint64_t)&__p, 20, (uint64_t)v40, (uint64_t)&v39, (uint64_t)v37);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if ((char)v44 < 0) {
        operator delete(__p);
      }
      std::ostringstream::~ostringstream((uint64_t)v45);
    }
    uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"; at ", 5);
    uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)":", 1);
    std::ostream::operator<<();
    char v33 = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v45, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(v33, (const void **)v45, (uint64_t)&__p);
  }
  if (*(char *)(a4 + 23) < 0 && *(void *)(a4 + 8) >= 0x201uLL)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"phoneticLocale is too long: <", 29);
    uint64_t v22 = (void *)std::ostream::operator<<();
    unsigned int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)">", 1);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"; library version: ",
            19);
    uint64_t v25 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v25))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v45);
      std::stringbuf::str();
      if ((v44 & 0x80u) == 0) {
        unint64_t v26 = &__p;
      }
      else {
        unint64_t v26 = __p;
      }
      if ((v44 & 0x80u) == 0) {
        uint64_t v27 = v44;
      }
      else {
        uint64_t v27 = v43;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v26, v27);
      if ((char)v44 < 0) {
        operator delete(__p);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
      std::string::basic_string[abi:ne180100]<0>(v40, "Localization");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v37, "");
      addr_obj::Logger::log(16, (uint64_t)&__p, 21, (uint64_t)v40, (uint64_t)&v39, (uint64_t)v37);
      if (v38 < 0) {
        operator delete(v37[0]);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      if ((char)v44 < 0) {
        operator delete(__p);
      }
      std::ostringstream::~ostringstream((uint64_t)v45);
    }
    unsigned int v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"; at ", 5);
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)":", 1);
    std::ostream::operator<<();
    int v30 = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v45, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(v30, (const void **)v45, (uint64_t)&__p);
  }
  std::string::operator=(this, __str);
  std::string::operator=(v8, (const std::string *)a3);
  std::string::operator=(v7, (const std::string *)a4);
  return this;
}

void sub_188F6CA1C()
{
}

void sub_188F6CA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  std::ostringstream::~ostringstream((uint64_t)&a54);
  if (*(char *)(v54 + 71) < 0) {
    operator delete(*v56);
  }
  if (*(char *)(v54 + 47) < 0) {
    operator delete(*v55);
  }
  if (*(char *)(v54 + 23) < 0) {
    operator delete(*(void **)v54);
  }
  _Unwind_Resume(a1);
}

void sub_188F6CA44()
{
}

uint64_t *addr_obj::Fingerprints::Fingerprints(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  addr_obj::Fingerprints::add(a1, a2, a3);
  return a1;
}

void sub_188F6CAC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<addr_obj::Fingerprints::Fingerprint>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL addr_obj::Formatting::overrideLegacyShortAddress(addr_obj::Localization *a1, uint64_t a2)
{
  DisplayLanguage = (char *)addr_obj::Localization::getDisplayLanguage(a1);
  sub_189145404(DisplayLanguage, a2);
  return (v4 & 0xFFFFFFFE) == 6;
}

void sub_188F6CBD0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F6D6C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0)
  {
    operator delete(a29);
    if ((v35 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v35)
  {
LABEL_8:
    std::ostringstream::~ostringstream((uint64_t)&v36);
    JUMPOUT(0x188F6D7CCLL);
  }
  __cxa_free_exception(v34);
  goto LABEL_8;
}

void sub_188F6D724()
{
  std::ostringstream::~ostringstream((uint64_t)&v0);
  JUMPOUT(0x188F6D7CCLL);
}

void sub_188F6D748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::unique_ptr<addr_obj::VenueInfo const>::reset[abi:ne180100](v36, 0);
  addr_obj::geo3::Address::~Address(v35);
  if (*(char *)(v31 + 655) < 0) {
    operator delete(*v34);
  }
  addr_obj::geo3::StructuredAddress::~StructuredAddress(v40);
  if (*(char *)(v31 + 383) < 0) {
    operator delete(*v38);
  }
  if (*(char *)(v31 + 359) < 0) {
    operator delete(*v39);
  }
  addr_obj::geo3::Address::~Address(v33);
  if (*(char *)(v31 + 271) < 0) {
    operator delete(*v32);
  }
  addr_obj::AddressObjectBase::~AddressObjectBase((void **)v31);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::parse(addr_obj::Localization *a1, uint64_t a2)
{
  DisplayLanguage = (uint64_t *)addr_obj::Localization::getDisplayLanguage(a1);
  if (!AddrObjGoogle::protobuf::MessageLite::ParseFromString(a2, DisplayLanguage))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
    char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"parsing failed for geo3::Address from ", 38);
    unsigned int v7 = addr_obj::operator<<(v6, (unsigned __int8 *)a1);
    unsigned __int8 v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; library version: ",
           19);
    std::string v9 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v9))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
      std::stringbuf::str();
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v11 = v21;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v10, v11);
      if ((char)v21 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/helpers.cpp");
      std::string::basic_string[abi:ne180100]<0>(v18, "parse");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v15, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 45, (uint64_t)v18, (uint64_t)&v17, (uint64_t)v15);
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      if ((char)v21 < 0) {
        operator delete(__p[0]);
      }
      std::ostringstream::~ostringstream((uint64_t)v22);
    }
    char v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"; at ", 5);
    int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/helpers.cpp", 81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v22, (uint64_t)__p);
  }
  return a2;
}

{
  uint64_t *DisplayLanguage;
  void *v6;
  void *v7;
  void *v8;
  addr_obj::Logger *v9;
  void **v10;
  uint64_t v11;
  void *v12;
  void *v13;
  std::runtime_error *exception;
  void *v15[2];
  char v16;
  std::string v17;
  void *v18[2];
  char v19;
  void *__p[2];
  unsigned __int8 v21;
  void *v22[2];
  void v23[33];

  DisplayLanguage = (uint64_t *)addr_obj::Localization::getDisplayLanguage(a1);
  if (!AddrObjGoogle::protobuf::MessageLite::ParseFromString(a2, DisplayLanguage))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
    char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"parsing failed for geo3::StructuredAddress from ", 48);
    unsigned int v7 = addr_obj::operator<<(v6, (unsigned __int8 *)a1);
    unsigned __int8 v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; library version: ",
           19);
    std::string v9 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v9))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
      std::stringbuf::str();
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v11 = v21;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v10, v11);
      if ((char)v21 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/helpers.cpp");
      std::string::basic_string[abi:ne180100]<0>(v18, "parse");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v15, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 50, (uint64_t)v18, (uint64_t)&v17, (uint64_t)v15);
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      if ((char)v21 < 0) {
        operator delete(__p[0]);
      }
      std::ostringstream::~ostringstream((uint64_t)v22);
    }
    char v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"; at ", 5);
    int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/helpers.cpp", 81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v22, (uint64_t)__p);
  }
  return a2;
}

void sub_188F6DDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&v32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_188F6DE2C(_Unwind_Exception *a1)
{
  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

void addr_obj::VenueInfo::VenueInfo(std::string *this, long long **a2)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  operator new();
}

void sub_188F6DEDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x18C11F580](v2, 0x20C40960023A9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<zilch::TrafficDynamicTile::Flow>::__vallocate[abi:ne180100](result, a4);
    unint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_188F6DF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  int v4 = this;
  uint64_t v11 = this;
  char v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    char v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        int v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      char v6 = (long long *)((char *)v6 + 24);
      char v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_188F6E048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *addr_obj::venue::Formatters::Formatters(std::string *this, addr_obj::venue::Template ***a2)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  std::vector<addr_obj::venue::Formatter>::__init_with_size[abi:ne180100]<addr_obj::venue::Formatter*,addr_obj::venue::Formatter*>(this, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  return this;
}

std::string *std::vector<addr_obj::venue::Formatter>::__init_with_size[abi:ne180100]<addr_obj::venue::Formatter*,addr_obj::venue::Formatter*>(std::string *result, addr_obj::venue::Template **a2, addr_obj::venue::Template **a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<zilch::TrafficDynamicTile::Flow>::__vallocate[abi:ne180100](result, a4);
    unint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<addr_obj::venue::Formatter>,addr_obj::venue::Formatter*,addr_obj::venue::Formatter*,addr_obj::venue::Formatter*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_188F6E114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<addr_obj::venue::Formatter>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_188F6E6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&v32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_188F6E718(_Unwind_Exception *a1)
{
  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

void sub_188F6EA28(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F6EC14(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F6ECD4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F6EF4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F6F024(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

unint64_t GEOPDReverseGeocodingParametersReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDReverseGeocodingParametersReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDReverseGeocodingParametersReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDReverseGeocodingParametersReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDReverseGeocodingParametersReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDReverseGeocodingParametersCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_188F6F3CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDReverseGeocodingParametersReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  char v12 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
  int v13 = ((*(unsigned __int8 *)(a1 + 60) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1);
  while (2)
  {
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v15 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v17 = v13 != 0;
        int v18 = v17 & ~v11 | v9;
        int v19 = v17 | v11;
        if (((v17 | v11) | v7)) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = a3;
        }
        unsigned __int8 v21 = (int *)MEMORY[0x1E4F940E8];
        BOOL v22 = v8 != 0;
        int v23 = 1;
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_87;
        }
        char v64 = v17 & ~(_BYTE)v11 | v9;
        int v66 = v22 | v19 | v18;
        char v67 = (v20 == 0) | v19;
        uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v25 = (int *)MEMORY[0x1E4F940B8];
        char v65 = v17 | v11;
        break;
      default:
        ++v13;
LABEL_7:
        uint64_t v14 = v9;
LABEL_8:
        uint64_t v15 = v10;
        uint64_t v16 = v11;
LABEL_10:
        ++v8;
        uint64_t v9 = v14;
        uint64_t v10 = v15;
        uint64_t v11 = v16;
        continue;
    }
    break;
  }
  while (!*(unsigned char *)(v3 + *v24))
  {
    char v26 = 0;
    unsigned int v27 = 0;
    unint64_t v28 = 0;
    while (1)
    {
      uint64_t v29 = *v21;
      uint64_t v30 = *(void *)(v3 + v29);
      unint64_t v31 = v30 + 1;
      if (v30 == -1 || v31 > *(void *)(v3 + *v6)) {
        break;
      }
      char v32 = *(unsigned char *)(*(void *)(v3 + *v25) + v30);
      *(void *)(v3 + v29) = v31;
      v28 |= (unint64_t)(v32 & 0x7F) << v26;
      if ((v32 & 0x80) == 0) {
        goto LABEL_25;
      }
      v26 += 7;
      BOOL v33 = v27++ >= 9;
      if (v33)
      {
        unint64_t v28 = 0;
        int v34 = *(unsigned __int8 *)(v3 + *v24);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v24) = 1;
LABEL_25:
    int v34 = *(unsigned __int8 *)(v3 + *v24);
    if (*(unsigned char *)(v3 + *v24)) {
      unint64_t v28 = 0;
    }
LABEL_27:
    if (v34 || (v28 & 7) == 4) {
      break;
    }
    unint64_t v36 = v28 >> 3;
    BOOL v37 = v19;
    if ((v67 & 1) == 0)
    {
      char v38 = v20;
      do
      {
        int v40 = *v38++;
        int v39 = v40;
        BOOL v37 = v40 != 0;
        if (v40) {
          BOOL v41 = v39 == v36;
        }
        else {
          BOOL v41 = 1;
        }
      }
      while (!v41);
    }
    switch((int)v36)
    {
      case 1:
        if (!v37 || (*(unsigned char *)(a1 + 60) & 0x10) != 0) {
          goto LABEL_72;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_106;
        }
        uint64_t v42 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v42, (void *)v3)) {
          goto LABEL_105;
        }
        PBReaderRecallMark();
        -[GEOPDReverseGeocodingParameters _addNoFlagsLocation:](a1, v42);
        goto LABEL_71;
      case 2:
        if ((v7 & 1) == 0) {
          goto LABEL_72;
        }
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v47 = 0;
        *(unsigned char *)(a1 + 60) |= 1u;
        while (2)
        {
          uint64_t v48 = *v21;
          uint64_t v49 = *(void *)(v3 + v48);
          unint64_t v50 = v49 + 1;
          if (v49 == -1 || v50 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v51 = *(unsigned char *)(*(void *)(v3 + *v25) + v49);
            *(void *)(v3 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              BOOL v33 = v46++ >= 9;
              if (v33)
              {
                LODWORD(v47) = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          LODWORD(v47) = 0;
        }
LABEL_77:
        *(_DWORD *)(a1 + 52) = v47;
        goto LABEL_82;
      case 3:
        if ((v7 & 1) == 0) {
          goto LABEL_72;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        *(unsigned char *)(a1 + 60) |= 2u;
        while (2)
        {
          uint64_t v55 = *v21;
          uint64_t v56 = *(void *)(v3 + v55);
          unint64_t v57 = v56 + 1;
          if (v56 == -1 || v57 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v24) = 1;
          }
          else
          {
            char v58 = *(unsigned char *)(*(void *)(v3 + *v25) + v56);
            *(void *)(v3 + v55) = v57;
            v54 |= (unint64_t)(v58 & 0x7F) << v52;
            if (v58 < 0)
            {
              v52 += 7;
              BOOL v33 = v53++ >= 9;
              if (v33)
              {
                uint64_t v54 = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v24)) {
          uint64_t v54 = 0;
        }
LABEL_81:
        *(unsigned char *)(a1 + 56) = v54 != 0;
        goto LABEL_82;
      case 4:
        if (!v37 || (*(unsigned char *)(a1 + 60) & 8) != 0) {
          goto LABEL_72;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_106;
        }
        uint64_t v42 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
        {
LABEL_105:

LABEL_106:
          int v23 = 0;
          char v12 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
          LOBYTE(v19) = v65;
          goto LABEL_86;
        }
        PBReaderRecallMark();
        -[GEOPDReverseGeocodingParameters _addNoFlagsExtendedLocation:](a1, v42);
LABEL_71:

        LOBYTE(v19) = v65;
        uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
        goto LABEL_82;
      default:
        if ((v64 & 1) == 0 || (*(unsigned char *)(a1 + 60) & 4) != 0)
        {
LABEL_72:
          int v23 = PBReaderSkipValueWithTag();
          uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
          LOBYTE(v19) = v65;
          if ((v23 & v66 & 1) == 0) {
            goto LABEL_85;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v43 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unsigned __int8 v44 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v43;
          }
          int v23 = PBUnknownFieldAdd();
          LOBYTE(v19) = v65;
          uint64_t v24 = (int *)MEMORY[0x1E4F940C8];
          if (!v23)
          {
            char v12 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
            goto LABEL_88;
          }
LABEL_82:
          if ((v66 & 1) == 0) {
            goto LABEL_84;
          }
        }
        if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v6)) {
          goto LABEL_84;
        }
        break;
    }
  }
LABEL_84:
  int v23 = 1;
LABEL_85:
  char v12 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
LABEL_86:
  LOBYTE(v18) = v64;
LABEL_87:
  if (v18) {
LABEL_88:
  }
    *(unsigned char *)(a1 + v12[531]) |= 4u;
  if (!(v19 & 1 | ((v23 & 1) == 0)))
  {
    if (!v20) {
      goto LABEL_99;
    }
    while (1)
    {
      int v61 = *v20++;
      int v60 = v61;
      if (v61 == 1) {
        break;
      }
      if (v60 == 4)
      {
        char v59 = 8;
LABEL_95:
        *(unsigned char *)(a1 + v12[531]) |= v59;
      }
      else if (!v60)
      {
        goto LABEL_99;
      }
    }
    char v59 = 16;
    goto LABEL_95;
  }
  *(unsigned char *)(a1 + v12[531]) |= 0x10u;
  *(unsigned char *)(a1 + v12[531]) |= 8u;
LABEL_99:
  if (v23)
  {
    unint64_t v3 = *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]) == 0;
    if ((v19 & 1) == 0) {
      return v3;
    }
    goto LABEL_103;
  }
  unint64_t v3 = 0;
  if (v19)
  {
LABEL_103:
    int v62 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

unint64_t GEOLocationReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 132))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOLocationReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 128) = [v8 position];
  *(_DWORD *)(a1 + 132) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOLocationReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOLocationReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOLocationReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    [*(id *)(a1 + 64) readAll:1];
    [*(id *)(a1 + 24) readAll:1];
    [*(id *)(a1 + 72) readAll:1];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
  return Specified;
}

void sub_188F6FC58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocationReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 136));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 132);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 128)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = &OBJC_IVAR___GEOPDSearchViewportInfo__mapRegion;
  char v12 = (const float *)(a1 + 180);
  uint32x4_t v13 = (uint32x4_t)vld1q_dup_f32(v12);
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  unsigned int v15 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_18A63EC30), v14));
  while (2)
  {
    uint64_t v16 = 1;
    uint64_t v17 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v15;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v18 = v15 > 1;
        char v19 = v18 | v10;
        char v153 = v18 & ~(_BYTE)v10 | v9;
        char v155 = v18 | v10 | v153;
        if (((v18 | v10) | v8)) {
          uint64_t v20 = 0;
        }
        else {
          uint64_t v20 = a3;
        }
        char v156 = (v20 == 0) | v19;
        unsigned __int8 v21 = (int *)MEMORY[0x1E4F940E8];
        BOOL v22 = (int *)MEMORY[0x1E4F940C8];
        int v23 = (int *)MEMORY[0x1E4F940B8];
        char v154 = v18 | v10;
        break;
      default:
        ++v15;
LABEL_7:
        uint64_t v16 = v9;
LABEL_8:
        uint64_t v17 = v10;
LABEL_9:
        ++v7;
        uint64_t v9 = v16;
        uint64_t v10 = v17;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v21) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v22)) {
      goto LABEL_273;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v21;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v6)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_24;
      }
      v24 += 7;
      BOOL v31 = v25++ >= 9;
      if (v31)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v22) = 1;
LABEL_24:
    int v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(unsigned char *)(v3 + *v22)) {
      unint64_t v26 = 0;
    }
LABEL_26:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_273:
      int v152 = 1;
      goto LABEL_274;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v19;
    if ((v156 & 1) == 0)
    {
      unint64_t v36 = v20;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if (!v35) {
          goto LABEL_193;
        }
        if ((*(unsigned char *)(a1 + v11[289] + 2) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_295;
          }
          uint64_t v11 = &OBJC_IVAR___GEOPDSearchViewportInfo__mapRegion;
          int v145 = (int)(*(_DWORD *)(a1 + 180) << 8) >> 31;
          goto LABEL_251;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_295;
        }
        int v40 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v40, (void *)v3)) {
          goto LABEL_294;
        }
        PBReaderRecallMark();
        uint64_t v41 = 64;
        goto LABEL_156;
      case 2:
        if ((v8 & 1) == 0) {
          goto LABEL_193;
        }
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v47 = 0;
        *(_DWORD *)(a1 + v11[289]) |= 0x40000u;
        while (2)
        {
          uint64_t v48 = *v21;
          uint64_t v49 = *(void *)(v3 + v48);
          unint64_t v50 = v49 + 1;
          if (v49 == -1 || v50 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v51 = *(unsigned char *)(*(void *)(v3 + *v23) + v49);
            *(void *)(v3 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              BOOL v31 = v46++ >= 9;
              if (v31)
              {
                LODWORD(v47) = 0;
                goto LABEL_198;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v47) = 0;
        }
LABEL_198:
        uint64_t v142 = 172;
        goto LABEL_244;
      case 3:
        if ((v8 & 1) == 0) {
          goto LABEL_193;
        }
        *(_DWORD *)(a1 + v11[289]) |= 0x80u;
        uint64_t v52 = *v21;
        unint64_t v53 = *(void *)(v3 + v52);
        if (v53 <= 0xFFFFFFFFFFFFFFF7 && v53 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v44 = *(void *)(*(void *)(v3 + *v23) + v53);
          *(void *)(v3 + v52) = v53 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v22) = 1;
          uint64_t v44 = 0;
        }
        uint64_t v146 = 104;
        goto LABEL_271;
      case 4:
        if ((v8 & 1) == 0) {
          goto LABEL_193;
        }
        char v54 = 0;
        unsigned int v55 = 0;
        uint64_t v47 = 0;
        *(_DWORD *)(a1 + v11[289]) |= 0x400u;
        while (2)
        {
          uint64_t v56 = *v21;
          uint64_t v57 = *(void *)(v3 + v56);
          unint64_t v58 = v57 + 1;
          if (v57 == -1 || v58 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v59 = *(unsigned char *)(*(void *)(v3 + *v23) + v57);
            *(void *)(v3 + v56) = v58;
            v47 |= (unint64_t)(v59 & 0x7F) << v54;
            if (v59 < 0)
            {
              v54 += 7;
              BOOL v31 = v55++ >= 9;
              if (v31)
              {
                LODWORD(v47) = 0;
                goto LABEL_202;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v47) = 0;
        }
LABEL_202:
        uint64_t v142 = 140;
        goto LABEL_244;
      case 5:
        if ((v8 & 1) == 0) {
          goto LABEL_193;
        }
        *(_DWORD *)(a1 + v11[289]) |= 8u;
        uint64_t v60 = *v21;
        unint64_t v61 = *(void *)(v3 + v60);
        if (v61 <= 0xFFFFFFFFFFFFFFF7 && v61 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v44 = *(void *)(*(void *)(v3 + *v23) + v61);
          *(void *)(v3 + v60) = v61 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v22) = 1;
          uint64_t v44 = 0;
        }
        uint64_t v146 = 56;
        goto LABEL_271;
      case 6:
        if ((v8 & 1) == 0) {
          goto LABEL_193;
        }
        *(_DWORD *)(a1 + v11[289]) |= 0x200u;
        uint64_t v62 = *v21;
        unint64_t v63 = *(void *)(v3 + v62);
        if (v63 <= 0xFFFFFFFFFFFFFFF7 && v63 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v44 = *(void *)(*(void *)(v3 + *v23) + v63);
          *(void *)(v3 + v62) = v63 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v22) = 1;
          uint64_t v44 = 0;
        }
        uint64_t v146 = 120;
        goto LABEL_271;
      case 7:
        if ((v8 & 1) == 0) {
          goto LABEL_193;
        }
        *(_DWORD *)(a1 + v11[289]) |= 0x40u;
        uint64_t v64 = *v21;
        unint64_t v65 = *(void *)(v3 + v64);
        if (v65 <= 0xFFFFFFFFFFFFFFF7 && v65 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v44 = *(void *)(*(void *)(v3 + *v23) + v65);
          *(void *)(v3 + v64) = v65 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v22) = 1;
          uint64_t v44 = 0;
        }
        uint64_t v146 = 96;
        goto LABEL_271;
      case 8:
        if ((v8 & 1) == 0) {
          goto LABEL_193;
        }
        *(_DWORD *)(a1 + v11[289]) |= 4u;
        uint64_t v66 = *v21;
        unint64_t v67 = *(void *)(v3 + v66);
        if (v67 <= 0xFFFFFFFFFFFFFFF7 && v67 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v44 = *(void *)(*(void *)(v3 + *v23) + v67);
          *(void *)(v3 + v66) = v67 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v22) = 1;
          uint64_t v44 = 0;
        }
        uint64_t v146 = 48;
        goto LABEL_271;
      case 9:
        if ((v8 & 1) == 0) {
          goto LABEL_193;
        }
        *(_DWORD *)(a1 + v11[289]) |= 2u;
        uint64_t v68 = *v21;
        unint64_t v69 = *(void *)(v3 + v68);
        if (v69 <= 0xFFFFFFFFFFFFFFF7 && v69 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v44 = *(void *)(*(void *)(v3 + *v23) + v69);
          *(void *)(v3 + v68) = v69 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v22) = 1;
          uint64_t v44 = 0;
        }
        uint64_t v146 = 40;
        goto LABEL_271;
      case 10:
        if ((v8 & 1) == 0) {
          goto LABEL_193;
        }
        char v70 = 0;
        unsigned int v71 = 0;
        uint64_t v47 = 0;
        *(_DWORD *)(a1 + v11[289]) |= 0x2000u;
        while (2)
        {
          uint64_t v72 = *v21;
          uint64_t v73 = *(void *)(v3 + v72);
          unint64_t v74 = v73 + 1;
          if (v73 == -1 || v74 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v22) = 1;
          }
          else
          {
            char v75 = *(unsigned char *)(*(void *)(v3 + *v23) + v73);
            *(void *)(v3 + v72) = v74;
            v47 |= (unint64_t)(v75 & 0x7F) << v70;
            if (v75 < 0)
            {
              v70 += 7;
              BOOL v31 = v71++ >= 9;
              if (v31)
              {
                LODWORD(v47) = 0;
                goto LABEL_206;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v22)) {
          LODWORD(v47) = 0;
        }
LABEL_206:
        uint64_t v142 = 152;
        goto LABEL_244;
      case 11:
        if (!v35) {
          goto LABEL_193;
        }
        if ((*(unsigned char *)(a1 + v11[289] + 2) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_295;
          }
          uint64_t v11 = &OBJC_IVAR___GEOPDSearchViewportInfo__mapRegion;
          int v145 = (int)(*(_DWORD *)(a1 + 180) << 9) >> 31;
          goto LABEL_251;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_295;
        }
        int v40 = objc_alloc_init(GEOCoarseLocationMetadata);
        if (!GEOCoarseLocationMetadataReadAllFrom((uint64_t)v40, (void *)v3)) {
          goto LABEL_294;
        }
        PBReaderRecallMark();
        uint64_t v41 = 24;
        goto LABEL_156;
      case 12:
        if ((v8 & 1) == 0) {
          goto LABEL_193;
        }
        *(_DWORD *)(a1 + v11[289]) |= 1u;
        uint64_t v76 = *v21;
        unint64_t v77 = *(void *)(v3 + v76);
        if (v77 <= 0xFFFFFFFFFFFFFFF7 && v77 + 8 <= *(void *)(v3 + *v6))
        {
          uint64_t v44 = *(void *)(*(void *)(v3 + *v23) + v77);
          *(void *)(v3 + v76) = v77 + 8;
        }
        else
        {
          *(unsigned char *)(v3 + *v22) = 1;
          uint64_t v44 = 0;
        }
        uint64_t v146 = 32;
LABEL_271:
        *(void *)(a1 + v146) = v44;
        goto LABEL_272;
      case 13:
        if (v8)
        {
          char v78 = 0;
          unsigned int v79 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + v11[289]) |= 0x800u;
          while (1)
          {
            uint64_t v80 = *v21;
            uint64_t v81 = *(void *)(v3 + v80);
            unint64_t v82 = v81 + 1;
            if (v81 == -1 || v82 > *(void *)(v3 + *v6)) {
              break;
            }
            char v83 = *(unsigned char *)(*(void *)(v3 + *v23) + v81);
            *(void *)(v3 + v80) = v82;
            v47 |= (unint64_t)(v83 & 0x7F) << v78;
            if ((v83 & 0x80) == 0) {
              goto LABEL_208;
            }
            v78 += 7;
            BOOL v31 = v79++ >= 9;
            if (v31)
            {
              LODWORD(v47) = 0;
              goto LABEL_210;
            }
          }
          *(unsigned char *)(v3 + *v22) = 1;
LABEL_208:
          if (*(unsigned char *)(v3 + *v22)) {
            LODWORD(v47) = 0;
          }
LABEL_210:
          uint64_t v142 = 144;
LABEL_244:
          *(_DWORD *)(a1 + v142) = v47;
        }
        else
        {
LABEL_193:
          char v141 = PBReaderSkipValueWithTag();
          BOOL v22 = (int *)MEMORY[0x1E4F940C8];
          char v19 = v154;
          uint64_t v11 = &OBJC_IVAR___GEOPDSearchViewportInfo__mapRegion;
          if ((v141 & 1) == 0)
          {
            int v152 = 0;
            goto LABEL_274;
          }
        }
        goto LABEL_272;
      default:
        switch((int)v34)
        {
          case 'e':
            if ((v8 & 1) == 0) {
              goto LABEL_193;
            }
            *(_DWORD *)(a1 + v11[289]) |= 0x20u;
            uint64_t v42 = *v21;
            unint64_t v43 = *(void *)(v3 + v42);
            if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(void *)(v3 + *v6))
            {
              uint64_t v44 = *(void *)(*(void *)(v3 + *v23) + v43);
              *(void *)(v3 + v42) = v43 + 8;
            }
            else
            {
              *(unsigned char *)(v3 + *v22) = 1;
              uint64_t v44 = 0;
            }
            uint64_t v146 = 88;
            goto LABEL_271;
          case 'f':
            if ((v8 & 1) == 0) {
              goto LABEL_193;
            }
            char v87 = 0;
            unsigned int v88 = 0;
            uint64_t v89 = 0;
            *(_DWORD *)(a1 + v11[289]) |= 0x80000u;
            while (2)
            {
              uint64_t v90 = *v21;
              uint64_t v91 = *(void *)(v3 + v90);
              unint64_t v92 = v91 + 1;
              if (v91 == -1 || v92 > *(void *)(v3 + *v6))
              {
                *(unsigned char *)(v3 + *v22) = 1;
              }
              else
              {
                char v93 = *(unsigned char *)(*(void *)(v3 + *v23) + v91);
                *(void *)(v3 + v90) = v92;
                v89 |= (unint64_t)(v93 & 0x7F) << v87;
                if (v93 < 0)
                {
                  v87 += 7;
                  BOOL v31 = v88++ >= 9;
                  if (v31)
                  {
                    uint64_t v89 = 0;
                    goto LABEL_214;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(v3 + *v22)) {
              uint64_t v89 = 0;
            }
LABEL_214:
            BOOL v143 = v89 != 0;
            uint64_t v144 = 176;
            goto LABEL_219;
          case 'g':
            if ((v8 & 1) == 0) {
              goto LABEL_193;
            }
            char v94 = 0;
            unsigned int v95 = 0;
            uint64_t v96 = 0;
            *(_DWORD *)(a1 + v11[289]) |= 0x100000u;
            while (2)
            {
              uint64_t v97 = *v21;
              uint64_t v98 = *(void *)(v3 + v97);
              unint64_t v99 = v98 + 1;
              if (v98 == -1 || v99 > *(void *)(v3 + *v6))
              {
                *(unsigned char *)(v3 + *v22) = 1;
              }
              else
              {
                char v100 = *(unsigned char *)(*(void *)(v3 + *v23) + v98);
                *(void *)(v3 + v97) = v99;
                v96 |= (unint64_t)(v100 & 0x7F) << v94;
                if (v100 < 0)
                {
                  v94 += 7;
                  BOOL v31 = v95++ >= 9;
                  if (v31)
                  {
                    uint64_t v96 = 0;
                    goto LABEL_218;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(v3 + *v22)) {
              uint64_t v96 = 0;
            }
LABEL_218:
            BOOL v143 = v96 != 0;
            uint64_t v144 = 177;
LABEL_219:
            *(unsigned char *)(a1 + v144) = v143;
            goto LABEL_272;
          case 'h':
            if ((v8 & 1) == 0) {
              goto LABEL_193;
            }
            char v101 = 0;
            unsigned int v102 = 0;
            uint64_t v103 = 0;
            *(_DWORD *)(a1 + v11[289]) |= 0x100u;
            while (2)
            {
              uint64_t v104 = *v21;
              uint64_t v105 = *(void *)(v3 + v104);
              unint64_t v106 = v105 + 1;
              if (v105 == -1 || v106 > *(void *)(v3 + *v6))
              {
                *(unsigned char *)(v3 + *v22) = 1;
              }
              else
              {
                char v107 = *(unsigned char *)(*(void *)(v3 + *v23) + v105);
                *(void *)(v3 + v104) = v106;
                v103 |= (unint64_t)(v107 & 0x7F) << v101;
                if (v107 < 0)
                {
                  v101 += 7;
                  BOOL v31 = v102++ >= 9;
                  if (v31)
                  {
                    uint64_t v103 = 0;
                    goto LABEL_223;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(v3 + *v22)) {
              uint64_t v103 = 0;
            }
LABEL_223:
            *(void *)(a1 + 112) = v103;
            goto LABEL_272;
          case 'i':
            if ((v8 & 1) == 0) {
              goto LABEL_193;
            }
            char v108 = 0;
            unsigned int v109 = 0;
            uint64_t v47 = 0;
            *(_DWORD *)(a1 + v11[289]) |= 0x8000u;
            while (2)
            {
              uint64_t v110 = *v21;
              uint64_t v111 = *(void *)(v3 + v110);
              unint64_t v112 = v111 + 1;
              if (v111 == -1 || v112 > *(void *)(v3 + *v6))
              {
                *(unsigned char *)(v3 + *v22) = 1;
              }
              else
              {
                char v113 = *(unsigned char *)(*(void *)(v3 + *v23) + v111);
                *(void *)(v3 + v110) = v112;
                v47 |= (unint64_t)(v113 & 0x7F) << v108;
                if (v113 < 0)
                {
                  v108 += 7;
                  BOOL v31 = v109++ >= 9;
                  if (v31)
                  {
                    LODWORD(v47) = 0;
                    goto LABEL_227;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(v3 + *v22)) {
              LODWORD(v47) = 0;
            }
LABEL_227:
            uint64_t v142 = 160;
            goto LABEL_244;
          case 'j':
            if (!v35) {
              goto LABEL_193;
            }
            if (*(unsigned char *)(a1 + v11[289] + 3))
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_295;
              }
              uint64_t v11 = &OBJC_IVAR___GEOPDSearchViewportInfo__mapRegion;
              int v145 = (int)(*(_DWORD *)(a1 + 180) << 7) >> 31;
LABEL_251:
              v7 += v145;
LABEL_252:
              char v19 = v154;
              BOOL v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_272:
              if (!(v155 & 1 | (v7 != 0))) {
                goto LABEL_273;
              }
              continue;
            }
            if ((PBReaderPlaceMark() & 1) == 0) {
              goto LABEL_295;
            }
            int v40 = objc_alloc_init(GEOLatLng);
            if (GEOLatLngReadAllFrom((uint64_t)v40, (void *)v3))
            {
              PBReaderRecallMark();
              uint64_t v41 = 72;
LABEL_156:
              unint64_t v114 = *(void **)(a1 + v41);
              *(void *)(a1 + v41) = v40;

              --v7;
              uint64_t v11 = &OBJC_IVAR___GEOPDSearchViewportInfo__mapRegion;
              goto LABEL_252;
            }
LABEL_294:

LABEL_295:
            int v152 = 0;
            uint64_t v11 = &OBJC_IVAR___GEOPDSearchViewportInfo__mapRegion;
            char v19 = v154;
            BOOL v22 = (int *)MEMORY[0x1E4F940C8];
LABEL_274:
            if (v153) {
LABEL_275:
            }
              *(_DWORD *)(a1 + v11[289]) |= 0x200000u;
            if (v19 & 1 | ((v152 & 1) == 0))
            {
              *(_DWORD *)(a1 + v11[289]) |= 0x800000u;
              *(_DWORD *)(a1 + v11[289]) |= 0x400000u;
              *(_DWORD *)(a1 + v11[289]) |= 0x1000000u;
              goto LABEL_288;
            }
            if (v20)
            {
              while (2)
              {
                while (1)
                {
                  int v148 = *v20++;
                  int v147 = v148;
                  if (v148 > 10) {
                    break;
                  }
                  if (v147 == 1)
                  {
                    int v149 = 0x800000;
LABEL_286:
                    *(_DWORD *)(a1 + v11[289]) |= v149;
                    continue;
                  }
                  if (!v147) {
                    goto LABEL_288;
                  }
                }
                if (v147 == 106)
                {
                  int v149 = 0x1000000;
                }
                else
                {
                  if (v147 != 11) {
                    continue;
                  }
                  int v149 = 0x400000;
                }
                goto LABEL_286;
              }
            }
LABEL_288:
            if (v152)
            {
              unint64_t v3 = *(unsigned char *)(v3 + *v22) == 0;
              if ((v19 & 1) == 0) {
                return v3;
              }
LABEL_292:
              uint64_t v150 = *(void **)(a1 + 8);
              *(void *)(a1 + 8) = 0;
            }
            else
            {
              unint64_t v3 = 0;
              if (v19) {
                goto LABEL_292;
              }
            }
            return v3;
          case 'k':
            if ((v8 & 1) == 0) {
              goto LABEL_193;
            }
            *(_DWORD *)(a1 + v11[289]) |= 0x10u;
            uint64_t v115 = *v21;
            unint64_t v116 = *(void *)(v3 + v115);
            if (v116 <= 0xFFFFFFFFFFFFFFF7 && v116 + 8 <= *(void *)(v3 + *v6))
            {
              uint64_t v44 = *(void *)(*(void *)(v3 + *v23) + v116);
              *(void *)(v3 + v115) = v116 + 8;
            }
            else
            {
              *(unsigned char *)(v3 + *v22) = 1;
              uint64_t v44 = 0;
            }
            uint64_t v146 = 80;
            goto LABEL_271;
          case 'l':
            if ((v8 & 1) == 0) {
              goto LABEL_193;
            }
            char v117 = 0;
            unsigned int v118 = 0;
            uint64_t v47 = 0;
            *(_DWORD *)(a1 + v11[289]) |= 0x4000u;
            while (2)
            {
              uint64_t v119 = *v21;
              uint64_t v120 = *(void *)(v3 + v119);
              unint64_t v121 = v120 + 1;
              if (v120 == -1 || v121 > *(void *)(v3 + *v6))
              {
                *(unsigned char *)(v3 + *v22) = 1;
              }
              else
              {
                char v122 = *(unsigned char *)(*(void *)(v3 + *v23) + v120);
                *(void *)(v3 + v119) = v121;
                v47 |= (unint64_t)(v122 & 0x7F) << v117;
                if (v122 < 0)
                {
                  v117 += 7;
                  BOOL v31 = v118++ >= 9;
                  if (v31)
                  {
                    LODWORD(v47) = 0;
                    goto LABEL_231;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(v3 + *v22)) {
              LODWORD(v47) = 0;
            }
LABEL_231:
            uint64_t v142 = 156;
            goto LABEL_244;
          case 'm':
            if ((v8 & 1) == 0) {
              goto LABEL_193;
            }
            char v123 = 0;
            unsigned int v124 = 0;
            uint64_t v47 = 0;
            *(_DWORD *)(a1 + v11[289]) |= 0x1000u;
            while (2)
            {
              uint64_t v125 = *v21;
              uint64_t v126 = *(void *)(v3 + v125);
              unint64_t v127 = v126 + 1;
              if (v126 == -1 || v127 > *(void *)(v3 + *v6))
              {
                *(unsigned char *)(v3 + *v22) = 1;
              }
              else
              {
                char v128 = *(unsigned char *)(*(void *)(v3 + *v23) + v126);
                *(void *)(v3 + v125) = v127;
                v47 |= (unint64_t)(v128 & 0x7F) << v123;
                if (v128 < 0)
                {
                  v123 += 7;
                  BOOL v31 = v124++ >= 9;
                  if (v31)
                  {
                    LODWORD(v47) = 0;
                    goto LABEL_235;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(v3 + *v22)) {
              LODWORD(v47) = 0;
            }
LABEL_235:
            uint64_t v142 = 148;
            goto LABEL_244;
          case 'n':
            if ((v8 & 1) == 0) {
              goto LABEL_193;
            }
            char v129 = 0;
            unsigned int v130 = 0;
            uint64_t v47 = 0;
            *(_DWORD *)(a1 + v11[289]) |= 0x10000u;
            while (2)
            {
              uint64_t v131 = *v21;
              uint64_t v132 = *(void *)(v3 + v131);
              unint64_t v133 = v132 + 1;
              if (v132 == -1 || v133 > *(void *)(v3 + *v6))
              {
                *(unsigned char *)(v3 + *v22) = 1;
              }
              else
              {
                char v134 = *(unsigned char *)(*(void *)(v3 + *v23) + v132);
                *(void *)(v3 + v131) = v133;
                v47 |= (unint64_t)(v134 & 0x7F) << v129;
                if (v134 < 0)
                {
                  v129 += 7;
                  BOOL v31 = v130++ >= 9;
                  if (v31)
                  {
                    LODWORD(v47) = 0;
                    goto LABEL_239;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(v3 + *v22)) {
              LODWORD(v47) = 0;
            }
LABEL_239:
            uint64_t v142 = 164;
            goto LABEL_244;
          case 'o':
            if ((v8 & 1) == 0) {
              goto LABEL_193;
            }
            char v135 = 0;
            unsigned int v136 = 0;
            uint64_t v47 = 0;
            *(_DWORD *)(a1 + v11[289]) |= 0x20000u;
            while (2)
            {
              uint64_t v137 = *v21;
              uint64_t v138 = *(void *)(v3 + v137);
              unint64_t v139 = v138 + 1;
              if (v138 == -1 || v139 > *(void *)(v3 + *v6))
              {
                *(unsigned char *)(v3 + *v22) = 1;
              }
              else
              {
                char v140 = *(unsigned char *)(*(void *)(v3 + *v23) + v138);
                *(void *)(v3 + v137) = v139;
                v47 |= (unint64_t)(v140 & 0x7F) << v135;
                if (v140 < 0)
                {
                  v135 += 7;
                  BOOL v31 = v136++ >= 9;
                  if (v31)
                  {
                    LODWORD(v47) = 0;
                    goto LABEL_243;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(v3 + *v22)) {
              LODWORD(v47) = 0;
            }
LABEL_243:
            uint64_t v142 = 168;
            goto LABEL_244;
          default:
            if ((v153 & 1) == 0 || (*(unsigned char *)(a1 + v11[289] + 2) & 0x20) != 0) {
              goto LABEL_193;
            }
            if (!*(void *)(a1 + 16))
            {
              id v84 = objc_alloc_init(MEMORY[0x1E4F940B0]);
              char v85 = *(void **)(a1 + 16);
              *(void *)(a1 + 16) = v84;
            }
            int v86 = PBUnknownFieldAdd();
            uint64_t v11 = &OBJC_IVAR___GEOPDSearchViewportInfo__mapRegion;
            char v19 = v154;
            BOOL v22 = (int *)MEMORY[0x1E4F940C8];
            if (v86) {
              goto LABEL_272;
            }
            int v152 = 0;
            goto LABEL_275;
        }
    }
  }
}

BOOL GEOVersionManifestReadAllFrom(void *a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    int v4 = (int *)MEMORY[0x1E4F940E8];
    size_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          unint64_t v12 = *(void *)&v3[v11];
          if (v12 == -1 || v12 >= *(void *)&v3[*v5]) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v15 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v15 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_29;
          }
          uint64_t v17 = objc_alloc_init(GEOServiceVersion);
          if (!GEOServiceVersionReadAllFrom((uint64_t)v17, v3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "addServiceVersion:", v17, 0, 0);
        }
        else
        {
          if (!a1[1])
          {
            id v18 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            char v19 = (void *)a1[1];
            a1[1] = v18;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_29;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v20 = v3[*v6] == 0;
  }
  else
  {
LABEL_29:
    BOOL v20 = 0;
  }
  objc_sync_exit(v3);

  return v20;
}

void sub_188F71208(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOServiceVersionReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    int v4 = (int *)MEMORY[0x1E4F940E8];
    size_t v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          unint64_t v12 = *(void *)&v3[v11];
          if (v12 == -1 || v12 >= *(void *)&v3[*v5]) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v15 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v15 || (v10 & 7) == 4) {
          break;
        }
        if ((v10 >> 3) == 2)
        {
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v21 = *v4;
            unint64_t v22 = *(void *)&v3[v21];
            if (v22 == -1 || v22 >= *(void *)&v3[*v5]) {
              break;
            }
            char v23 = *(unsigned char *)(*(void *)&v3[*v7] + v22);
            *(void *)&v3[v21] = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0) {
              goto LABEL_36;
            }
            v18 += 7;
            BOOL v14 = v19++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_38;
            }
          }
          v3[*v6] = 1;
LABEL_36:
          if (v3[*v6]) {
            LODWORD(v20) = 0;
          }
LABEL_38:
          *(_DWORD *)(a1 + 24) = v20;
        }
        else if ((v10 >> 3) == 1)
        {
          uint64_t v17 = PBReaderReadString();
          if (v17) {
            -[GEOServiceVersion addVersionDomain:](a1, v17);
          }
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v24 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unsigned int v25 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v24;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_41;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v26 = v3[*v6] == 0;
  }
  else
  {
LABEL_41:
    BOOL v26 = 0;
  }
  objc_sync_exit(v3);

  return v26;
}

void sub_188F714BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F71A78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOGetDataSessionProtobufLog()
{
  if (qword_1EB29FDF8 != -1) {
    dispatch_once(&qword_1EB29FDF8, &__block_literal_global_209);
  }
  uint64_t v0 = (void *)qword_1EB29FDF0;

  return v0;
}

BOOL GEOPDPlaceResponseIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    size_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      unint64_t v17 = v8 >> 3;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_85;
          }
          unsigned int v18 = 0;
          while (1)
          {
            uint64_t v19 = *v2;
            uint64_t v20 = *(void *)&a1[v19];
            unint64_t v21 = v20 + 1;
            if (v20 == -1 || v21 > *(void *)&a1[*v3]) {
              goto LABEL_81;
            }
            int v22 = *(char *)(*(void *)&a1[*v5] + v20);
            *(void *)&a1[v19] = v21;
            if (v22 < 0)
            {
              BOOL v23 = v18++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_83;
          }
        case 2u:
          if ((v8 & 7) != 0) {
            goto LABEL_85;
          }
          unsigned int v24 = 0;
          while (1)
          {
            uint64_t v25 = *v2;
            uint64_t v26 = *(void *)&a1[v25];
            unint64_t v27 = v26 + 1;
            if (v26 == -1 || v27 > *(void *)&a1[*v3]) {
              goto LABEL_81;
            }
            int v28 = *(char *)(*(void *)&a1[*v5] + v26);
            *(void *)&a1[v25] = v27;
            if (v28 < 0)
            {
              BOOL v23 = v24++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_83;
          }
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceGlobalResultIsValid(a1)) {
            goto LABEL_85;
          }
          goto LABEL_72;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceIsValid(a1)) {
            goto LABEL_85;
          }
          goto LABEL_72;
        case 5u:
          if (v15 == 2) {
            goto LABEL_82;
          }
          goto LABEL_85;
        case 6u:
          if (v15 == 2) {
            goto LABEL_82;
          }
          goto LABEL_85;
        case 7u:
          if (v15 == 2) {
            goto LABEL_82;
          }
          goto LABEL_85;
        case 8u:
          if (v15 == 2) {
            goto LABEL_82;
          }
          goto LABEL_85;
        case 9u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDDatasetABStatusIsValid(a1)) {
            goto LABEL_85;
          }
          goto LABEL_72;
        case 0xAu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDMapsResultIsValid(a1)) {
            goto LABEL_85;
          }
          goto LABEL_72;
        case 0xBu:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDDotPlaceIsValid(a1)) {
            goto LABEL_85;
          }
          goto LABEL_72;
        case 0xCu:
          if (v15 == 2
            && PBReaderPlaceMark()
            && GEOPDPlacesRequestResponseAnalyticsDataIsValid((unsigned __int8 *)a1))
          {
            goto LABEL_72;
          }
          goto LABEL_85;
        default:
          if (v17 == 1000)
          {
            if ((v8 & 7) != 0) {
              goto LABEL_85;
            }
            unsigned int v29 = 0;
            while (1)
            {
              uint64_t v30 = *v2;
              uint64_t v31 = *(void *)&a1[v30];
              unint64_t v32 = v31 + 1;
              if (v31 == -1 || v32 > *(void *)&a1[*v3]) {
                break;
              }
              int v33 = *(char *)(*(void *)&a1[*v5] + v31);
              *(void *)&a1[v30] = v32;
              if (v33 < 0)
              {
                BOOL v23 = v29++ > 8;
                if (!v23) {
                  continue;
                }
              }
              goto LABEL_83;
            }
LABEL_81:
            a1[*v4] = 1;
          }
          else if (v17 == 1051)
          {
            if (v15 != 2 || !PBReaderPlaceMark() || !GEOClientMetricsIsValid(a1))
            {
LABEL_85:
              PBReaderRecallMark();
              return 0;
            }
LABEL_72:
            PBReaderRecallMark();
          }
          else
          {
LABEL_82:
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_85;
            }
          }
LABEL_83:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_84;
          }
          break;
      }
    }
  }
LABEL_84:
  BOOL v34 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v34;
}

BOOL GEOPDDatasetABStatusIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    size_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        unint64_t v10 = *(void *)&a1[v9];
        if (v10 == -1 || v10 >= *(void *)&a1[*v3]) {
          break;
        }
        char v11 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v13 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      if (v13 || (v8 & 7) == 4) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_33;
        }
        unsigned int v15 = 0;
        while (1)
        {
          uint64_t v16 = *v2;
          unint64_t v17 = *(void *)&a1[v16];
          if (v17 == -1 || v17 >= *(void *)&a1[*v3]) {
            break;
          }
          unint64_t v18 = v17 + 1;
          int v19 = *(char *)(*(void *)&a1[*v5] + v17);
          *(void *)&a1[v16] = v18;
          if (v19 < 0 && v15++ <= 8) {
            continue;
          }
          goto LABEL_30;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_33:
        BOOL v21 = 0;
        goto LABEL_32;
      }
LABEL_30:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v21 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v21;
}

BOOL GEOPDPlaceGlobalResultIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
LABEL_2686:
    BOOL v1115 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v1115;
  }
  size_t v5 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (a1[*v4]) {
      goto LABEL_2686;
    }
    char v6 = 0;
    unsigned int v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *v2;
      uint64_t v10 = *(void *)&a1[v9];
      unint64_t v11 = v10 + 1;
      if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
        break;
      }
      char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
      *(void *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0) {
        goto LABEL_12;
      }
      v6 += 7;
      BOOL v13 = v7++ >= 9;
      if (v13)
      {
        unint64_t v8 = 0;
        int v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    int v14 = a1[*v4];
    if (a1[*v4]) {
      unint64_t v8 = 0;
    }
LABEL_14:
    int v15 = v8 & 7;
    if (v14 || v15 == 4) {
      goto LABEL_2686;
    }
    switch((v8 >> 3))
    {
      case 1u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        [a1 position];
        [a1 length];
LABEL_22:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_2248;
          }
          char v17 = 0;
          unsigned int v18 = 0;
          unint64_t v19 = 0;
          while (2)
          {
            uint64_t v20 = *v2;
            uint64_t v21 = *(void *)&a1[v20];
            unint64_t v22 = v21 + 1;
            if (v21 == -1 || v22 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v23 = *(unsigned char *)(*(void *)&a1[*v5] + v21);
              *(void *)&a1[v20] = v22;
              v19 |= (unint64_t)(v23 & 0x7F) << v17;
              if (v23 < 0)
              {
                v17 += 7;
                BOOL v13 = v18++ >= 9;
                if (v13)
                {
                  unint64_t v19 = 0;
                  int v24 = a1[*v4];
                  goto LABEL_34;
                }
                continue;
              }
            }
            break;
          }
          int v24 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v19 = 0;
          }
LABEL_34:
          int v25 = v19 & 7;
          if (v24) {
            BOOL v26 = 1;
          }
          else {
            BOOL v26 = v25 == 4;
          }
          if (v26) {
            goto LABEL_2248;
          }
          switch((v19 >> 3))
          {
            case 1u:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOMapRegionIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 2u:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDMultiLocalizedStringIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 3u:
              if ((v19 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v27 = 0;
              while (1)
              {
                uint64_t v28 = *v2;
                uint64_t v29 = *(void *)&a1[v28];
                unint64_t v30 = v29 + 1;
                if (v29 == -1 || v30 > *(void *)&a1[*v3]) {
                  goto LABEL_229;
                }
                int v31 = *(char *)(*(void *)&a1[*v5] + v29);
                *(void *)&a1[v28] = v30;
                if (v31 < 0)
                {
                  BOOL v32 = v27++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_22;
              }
            case 4u:
            case 7u:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDWarsawMerchantIdentifierIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 5u:
              if ((v19 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v33 = 0;
              while (1)
              {
                uint64_t v34 = *v2;
                uint64_t v35 = *(void *)&a1[v34];
                unint64_t v36 = v35 + 1;
                if (v35 == -1 || v36 > *(void *)&a1[*v3]) {
                  goto LABEL_229;
                }
                int v37 = *(char *)(*(void *)&a1[*v5] + v35);
                *(void *)&a1[v34] = v36;
                if (v37 < 0)
                {
                  BOOL v32 = v33++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_22;
              }
            case 6u:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              goto LABEL_203;
            case 8u:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDSearchClientBehaviorIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 9u:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDResultDetourInfoIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 0xAu:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDDirectionIntentIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 0xBu:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDSearchRelatedCategoryIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 0xCu:
              if (v25 != 2 || !PBReaderPlaceMark()) {
                goto LABEL_2687;
              }
              uint64_t v1119 = [a1 position];
              uint64_t v1120 = [a1 length];
LABEL_88:
              if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                goto LABEL_242;
              }
              char v38 = 0;
              unsigned int v39 = 0;
              unint64_t v40 = 0;
              while (1)
              {
                uint64_t v41 = *v2;
                uint64_t v42 = *(void *)&a1[v41];
                unint64_t v43 = v42 + 1;
                if (v42 == -1 || v43 > *(void *)&a1[*v3]) {
                  break;
                }
                char v44 = *(unsigned char *)(*(void *)&a1[*v5] + v42);
                *(void *)&a1[v41] = v43;
                v40 |= (unint64_t)(v44 & 0x7F) << v38;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v38 += 7;
                BOOL v13 = v39++ >= 9;
                if (v13)
                {
                  unint64_t v40 = 0;
                  int v45 = a1[*v4];
                  goto LABEL_100;
                }
              }
              a1[*v4] = 1;
LABEL_98:
              int v45 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v40 = 0;
              }
LABEL_100:
              int v46 = v40 & 7;
              if (v45 || v46 == 4)
              {
LABEL_242:
                int v94 = a1[*v4];
                PBReaderRecallMark();
                if (!v94)
                {
LABEL_241:
                  PBReaderRecallMark();
                  continue;
                }
                goto LABEL_2687;
              }
              unint64_t v48 = v40 >> 3;
              if ((v40 >> 3) != 3)
              {
                if (v48 == 2)
                {
                  if (v46 != 2) {
                    goto LABEL_2690;
                  }
                }
                else if (v48 == 1)
                {
                  if ((v40 & 7) == 0)
                  {
                    unsigned int v49 = 0;
                    do
                    {
                      uint64_t v50 = *v2;
                      uint64_t v51 = *(void *)&a1[v50];
                      unint64_t v52 = v51 + 1;
                      if (v51 == -1 || v52 > *(void *)&a1[*v3])
                      {
                        a1[*v4] = 1;
                        goto LABEL_88;
                      }
                      int v53 = *(char *)(*(void *)&a1[*v5] + v51);
                      *(void *)&a1[v50] = v52;
                      if ((v53 & 0x80000000) == 0) {
                        break;
                      }
                      BOOL v32 = v49++ > 8;
                    }
                    while (!v32);
                    goto LABEL_88;
                  }
                  goto LABEL_2690;
                }
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_2690;
                }
                goto LABEL_88;
              }
              if (v46 == 2)
              {
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (PBReaderPlaceMark())
                {
                  if (GEOPDWarsawMerchantIdentifierIsValid(a1))
                  {
                    PBReaderRecallMark();
                    goto LABEL_88;
                  }
                }
              }
              break;
            case 0xDu:
              if ((v19 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v54 = 0;
              while (1)
              {
                uint64_t v55 = *v2;
                uint64_t v56 = *(void *)&a1[v55];
                unint64_t v57 = v56 + 1;
                if (v56 == -1 || v57 > *(void *)&a1[*v3]) {
                  goto LABEL_229;
                }
                int v58 = *(char *)(*(void *)&a1[*v5] + v56);
                *(void *)&a1[v55] = v57;
                if (v58 < 0)
                {
                  BOOL v32 = v54++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_22;
              }
            case 0xEu:
              if ((v19 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v59 = 0;
              while (1)
              {
                uint64_t v60 = *v2;
                uint64_t v61 = *(void *)&a1[v60];
                unint64_t v62 = v61 + 1;
                if (v61 == -1 || v62 > *(void *)&a1[*v3]) {
                  goto LABEL_229;
                }
                int v63 = *(char *)(*(void *)&a1[*v5] + v61);
                *(void *)&a1[v60] = v62;
                if (v63 < 0)
                {
                  BOOL v32 = v59++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_22;
              }
            case 0xFu:
              if ((v19 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v64 = 0;
              while (1)
              {
                uint64_t v65 = *v2;
                uint64_t v66 = *(void *)&a1[v65];
                unint64_t v67 = v66 + 1;
                if (v66 == -1 || v67 > *(void *)&a1[*v3]) {
                  goto LABEL_229;
                }
                int v68 = *(char *)(*(void *)&a1[*v5] + v66);
                *(void *)&a1[v65] = v67;
                if (v68 < 0)
                {
                  BOOL v32 = v64++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_22;
              }
            case 0x10u:
              if ((v19 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v69 = 0;
              while (1)
              {
                uint64_t v70 = *v2;
                uint64_t v71 = *(void *)&a1[v70];
                unint64_t v72 = v71 + 1;
                if (v71 == -1 || v72 > *(void *)&a1[*v3]) {
                  goto LABEL_229;
                }
                int v73 = *(char *)(*(void *)&a1[*v5] + v71);
                *(void *)&a1[v70] = v72;
                if (v73 < 0)
                {
                  BOOL v32 = v69++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_22;
              }
            case 0x11u:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDRetainedSearchMetadataIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 0x12u:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDSSearchResultSectionIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 0x13u:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDRelatedEntitySectionIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 0x14u:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDSSearchTierMetadataIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 0x15u:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDResultRefinementGroupIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 0x16u:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDSSearchAutoRedoThresholdIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 0x17u:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDPlaceSummaryLayoutMetadataIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 0x18u:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDSearchSectionListIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 0x19u:
              if ((v19 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v74 = 0;
              while (1)
              {
                uint64_t v75 = *v2;
                uint64_t v76 = *(void *)&a1[v75];
                unint64_t v77 = v76 + 1;
                if (v76 == -1 || v77 > *(void *)&a1[*v3]) {
                  goto LABEL_229;
                }
                int v78 = *(char *)(*(void *)&a1[*v5] + v76);
                *(void *)&a1[v75] = v77;
                if (v78 < 0)
                {
                  BOOL v32 = v74++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_22;
              }
            case 0x1Au:
              if ((v19 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v79 = 0;
              while (1)
              {
                uint64_t v80 = *v2;
                uint64_t v81 = *(void *)&a1[v80];
                unint64_t v82 = v81 + 1;
                if (v81 == -1 || v82 > *(void *)&a1[*v3]) {
                  goto LABEL_229;
                }
                int v83 = *(char *)(*(void *)&a1[*v5] + v81);
                *(void *)&a1[v80] = v82;
                if (v83 < 0)
                {
                  BOOL v32 = v79++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_22;
              }
            case 0x1Cu:
              if ((v19 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v84 = 0;
              while (1)
              {
                uint64_t v85 = *v2;
                uint64_t v86 = *(void *)&a1[v85];
                unint64_t v87 = v86 + 1;
                if (v86 == -1 || v87 > *(void *)&a1[*v3]) {
                  goto LABEL_229;
                }
                int v88 = *(char *)(*(void *)&a1[*v5] + v86);
                *(void *)&a1[v85] = v87;
                if (v88 < 0)
                {
                  BOOL v32 = v84++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_22;
              }
            case 0x1Du:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDSSearchSessionDataIsValid((unsigned __int8 *)a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 0x1Eu:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 0x1Fu:
              if ((v19 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v89 = 0;
              do
              {
                uint64_t v90 = *v2;
                uint64_t v91 = *(void *)&a1[v90];
                unint64_t v92 = v91 + 1;
                if (v91 == -1 || v92 > *(void *)&a1[*v3])
                {
LABEL_229:
                  a1[*v4] = 1;
                  goto LABEL_22;
                }
                int v93 = *(char *)(*(void *)&a1[*v5] + v91);
                *(void *)&a1[v90] = v92;
                if ((v93 & 0x80000000) == 0) {
                  break;
                }
                BOOL v32 = v89++ > 8;
              }
              while (!v32);
              continue;
            case 0x20u:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDGuideSummaryLayoutMetadataIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 0x21u:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDPaginationInfoIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            case 0x22u:
              if (v25 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDSSearchRedoButtonThresholdIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_241;
            default:
LABEL_203:
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2687;
              }
              continue;
          }
          goto LABEL_2690;
        }
      case 2u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_2602;
            }
            char v95 = 0;
            unsigned int v96 = 0;
            unint64_t v97 = 0;
            while (1)
            {
              uint64_t v98 = *v2;
              uint64_t v99 = *(void *)&a1[v98];
              unint64_t v100 = v99 + 1;
              if (v99 == -1 || v100 > *(void *)&a1[*v3]) {
                break;
              }
              char v101 = *(unsigned char *)(*(void *)&a1[*v5] + v99);
              *(void *)&a1[v98] = v100;
              v97 |= (unint64_t)(v101 & 0x7F) << v95;
              if ((v101 & 0x80) == 0) {
                goto LABEL_257;
              }
              v95 += 7;
              BOOL v13 = v96++ >= 9;
              if (v13)
              {
                unint64_t v97 = 0;
                int v102 = a1[*v4];
                goto LABEL_259;
              }
            }
            a1[*v4] = 1;
LABEL_257:
            int v102 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v97 = 0;
            }
LABEL_259:
            int v103 = v97 & 7;
            if (v102 || v103 == 4) {
              goto LABEL_2602;
            }
            if ((v97 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2687;
              }
              continue;
            }
            break;
          }
          if (v103 == 2)
          {
            uint64_t v1117 = 0;
            uint64_t v1118 = 0;
            if (PBReaderPlaceMark())
            {
              if (GEOPDMultiLocalizedStringIsValid(a1))
              {
                PBReaderRecallMark();
                continue;
              }
            }
          }
          goto LABEL_2687;
        }
      case 3u:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (1)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v106 = 0;
          unsigned int v107 = 0;
          uint64_t v108 = 0;
          while (1)
          {
            uint64_t v109 = *v2;
            uint64_t v110 = *(void *)&a1[v109];
            unint64_t v111 = v110 + 1;
            if (v110 == -1 || v111 > *(void *)&a1[*v3]) {
              break;
            }
            char v112 = *(unsigned char *)(*(void *)&a1[*v5] + v110);
            *(void *)&a1[v109] = v111;
            v108 |= (unint64_t)(v112 & 0x7F) << v106;
            if ((v112 & 0x80) == 0) {
              goto LABEL_283;
            }
            v106 += 7;
            BOOL v13 = v107++ >= 9;
            if (v13)
            {
              LOBYTE(v108) = 0;
              int v105 = a1[*v4];
              goto LABEL_285;
            }
          }
          a1[*v4] = 1;
LABEL_283:
          uint64_t v113 = *v4;
          int v105 = a1[v113];
          if (a1[v113]) {
            LOBYTE(v108) = 0;
          }
LABEL_285:
          if (v105 || (v108 & 7) == 4) {
            goto LABEL_2293;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_2687;
          }
        }
      case 4u:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (1)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v115 = 0;
          unsigned int v116 = 0;
          uint64_t v117 = 0;
          while (1)
          {
            uint64_t v118 = *v2;
            uint64_t v119 = *(void *)&a1[v118];
            unint64_t v120 = v119 + 1;
            if (v119 == -1 || v120 > *(void *)&a1[*v3]) {
              break;
            }
            char v121 = *(unsigned char *)(*(void *)&a1[*v5] + v119);
            *(void *)&a1[v118] = v120;
            v117 |= (unint64_t)(v121 & 0x7F) << v115;
            if ((v121 & 0x80) == 0) {
              goto LABEL_304;
            }
            v115 += 7;
            BOOL v13 = v116++ >= 9;
            if (v13)
            {
              LOBYTE(v117) = 0;
              int v105 = a1[*v4];
              goto LABEL_306;
            }
          }
          a1[*v4] = 1;
LABEL_304:
          uint64_t v122 = *v4;
          int v105 = a1[v122];
          if (a1[v122]) {
            LOBYTE(v117) = 0;
          }
LABEL_306:
          if (v105 || (v117 & 7) == 4) {
            goto LABEL_2293;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_2687;
          }
        }
      case 5u:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (1)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v124 = 0;
          unsigned int v125 = 0;
          uint64_t v126 = 0;
          while (1)
          {
            uint64_t v127 = *v2;
            uint64_t v128 = *(void *)&a1[v127];
            unint64_t v129 = v128 + 1;
            if (v128 == -1 || v129 > *(void *)&a1[*v3]) {
              break;
            }
            char v130 = *(unsigned char *)(*(void *)&a1[*v5] + v128);
            *(void *)&a1[v127] = v129;
            v126 |= (unint64_t)(v130 & 0x7F) << v124;
            if ((v130 & 0x80) == 0) {
              goto LABEL_325;
            }
            v124 += 7;
            BOOL v13 = v125++ >= 9;
            if (v13)
            {
              LOBYTE(v126) = 0;
              int v105 = a1[*v4];
              goto LABEL_327;
            }
          }
          a1[*v4] = 1;
LABEL_325:
          uint64_t v131 = *v4;
          int v105 = a1[v131];
          if (a1[v131]) {
            LOBYTE(v126) = 0;
          }
LABEL_327:
          if (v105 || (v126 & 7) == 4) {
            goto LABEL_2293;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_2687;
          }
        }
      case 6u:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1119 = 0;
        uint64_t v1120 = 0;
        if (!PBReaderPlaceMark() || !GEOPDMerchantLookupResultIsValid(a1)) {
          goto LABEL_2688;
        }
        goto LABEL_2603;
      case 7u:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (1)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v133 = 0;
          unsigned int v134 = 0;
          uint64_t v135 = 0;
          while (1)
          {
            uint64_t v136 = *v2;
            uint64_t v137 = *(void *)&a1[v136];
            unint64_t v138 = v137 + 1;
            if (v137 == -1 || v138 > *(void *)&a1[*v3]) {
              break;
            }
            char v139 = *(unsigned char *)(*(void *)&a1[*v5] + v137);
            *(void *)&a1[v136] = v138;
            v135 |= (unint64_t)(v139 & 0x7F) << v133;
            if ((v139 & 0x80) == 0) {
              goto LABEL_350;
            }
            v133 += 7;
            BOOL v13 = v134++ >= 9;
            if (v13)
            {
              LOBYTE(v135) = 0;
              int v105 = a1[*v4];
              goto LABEL_352;
            }
          }
          a1[*v4] = 1;
LABEL_350:
          uint64_t v140 = *v4;
          int v105 = a1[v140];
          if (a1[v140]) {
            LOBYTE(v135) = 0;
          }
LABEL_352:
          if (v105 || (v135 & 7) == 4) {
            goto LABEL_2293;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_2687;
          }
        }
      case 8u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
LABEL_361:
        while (2)
        {
          while (2)
          {
            while (2)
            {
              if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                goto LABEL_2602;
              }
              char v142 = 0;
              unsigned int v143 = 0;
              unint64_t v144 = 0;
              while (1)
              {
                uint64_t v145 = *v2;
                uint64_t v146 = *(void *)&a1[v145];
                unint64_t v147 = v146 + 1;
                if (v146 == -1 || v147 > *(void *)&a1[*v3]) {
                  break;
                }
                char v148 = *(unsigned char *)(*(void *)&a1[*v5] + v146);
                *(void *)&a1[v145] = v147;
                v144 |= (unint64_t)(v148 & 0x7F) << v142;
                if ((v148 & 0x80) == 0) {
                  goto LABEL_371;
                }
                v142 += 7;
                BOOL v13 = v143++ >= 9;
                if (v13)
                {
                  unint64_t v144 = 0;
                  int v149 = a1[*v4];
                  goto LABEL_373;
                }
              }
              a1[*v4] = 1;
LABEL_371:
              int v149 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v144 = 0;
              }
LABEL_373:
              int v150 = v144 & 7;
              if (v149 || v150 == 4) {
                goto LABEL_2602;
              }
              unint64_t v152 = v144 >> 3;
              if ((v144 >> 3) == 3)
              {
                if ((v144 & 7) == 0)
                {
                  unsigned int v153 = 0;
                  do
                  {
                    uint64_t v154 = *v2;
                    uint64_t v155 = *(void *)&a1[v154];
                    unint64_t v156 = v155 + 1;
                    if (v155 == -1 || v156 > *(void *)&a1[*v3])
                    {
                      a1[*v4] = 1;
                      goto LABEL_361;
                    }
                    int v157 = *(char *)(*(void *)&a1[*v5] + v155);
                    *(void *)&a1[v154] = v156;
                    if ((v157 & 0x80000000) == 0) {
                      break;
                    }
                    BOOL v32 = v153++ > 8;
                  }
                  while (!v32);
                  continue;
                }
                goto LABEL_2687;
              }
              break;
            }
            if (v152 == 2)
            {
              if (v150 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1117 = 0;
              uint64_t v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDResultDetourInfoIsValid(a1)) {
                goto LABEL_2687;
              }
            }
            else
            {
              if (v152 != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_2687;
                }
                continue;
              }
              if (v150 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1117 = 0;
              uint64_t v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDMultiLocalizedStringIsValid(a1)) {
                goto LABEL_2687;
              }
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 9u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_2602;
            }
            char v158 = 0;
            unsigned int v159 = 0;
            unint64_t v160 = 0;
            while (1)
            {
              uint64_t v161 = *v2;
              uint64_t v162 = *(void *)&a1[v161];
              unint64_t v163 = v162 + 1;
              if (v162 == -1 || v163 > *(void *)&a1[*v3]) {
                break;
              }
              char v164 = *(unsigned char *)(*(void *)&a1[*v5] + v162);
              *(void *)&a1[v161] = v163;
              v160 |= (unint64_t)(v164 & 0x7F) << v158;
              if ((v164 & 0x80) == 0) {
                goto LABEL_412;
              }
              v158 += 7;
              BOOL v13 = v159++ >= 9;
              if (v13)
              {
                unint64_t v160 = 0;
                int v165 = a1[*v4];
                goto LABEL_414;
              }
            }
            a1[*v4] = 1;
LABEL_412:
            int v165 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v160 = 0;
            }
LABEL_414:
            int v166 = v160 & 7;
            if (v165 || v166 == 4) {
              goto LABEL_2602;
            }
            unint64_t v168 = v160 >> 3;
            if ((v160 >> 3) == 3)
            {
              if (v166 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1117 = 0;
              uint64_t v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDPaginationInfoIsValid(a1)) {
                goto LABEL_2687;
              }
            }
            else if (v168 == 2)
            {
              if (v166 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1117 = 0;
              uint64_t v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDMultiLocalizedStringIsValid(a1)) {
                goto LABEL_2687;
              }
            }
            else
            {
              if (v168 != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_2687;
                }
                continue;
              }
              if (v166 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1117 = 0;
              uint64_t v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOMapRegionIsValid(a1)) {
                goto LABEL_2687;
              }
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 0xAu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        [a1 position];
        [a1 length];
LABEL_438:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_2248;
          }
          char v169 = 0;
          unsigned int v170 = 0;
          unint64_t v171 = 0;
          while (2)
          {
            uint64_t v172 = *v2;
            uint64_t v173 = *(void *)&a1[v172];
            unint64_t v174 = v173 + 1;
            if (v173 == -1 || v174 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v175 = *(unsigned char *)(*(void *)&a1[*v5] + v173);
              *(void *)&a1[v172] = v174;
              v171 |= (unint64_t)(v175 & 0x7F) << v169;
              if (v175 < 0)
              {
                v169 += 7;
                BOOL v13 = v170++ >= 9;
                if (v13)
                {
                  unint64_t v171 = 0;
                  int v176 = a1[*v4];
                  goto LABEL_450;
                }
                continue;
              }
            }
            break;
          }
          int v176 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v171 = 0;
          }
LABEL_450:
          int v177 = v171 & 7;
          if (v176) {
            BOOL v178 = 1;
          }
          else {
            BOOL v178 = v177 == 4;
          }
          if (v178) {
            goto LABEL_2248;
          }
          switch((v171 >> 3))
          {
            case 1u:
              if (v177 != 2 || !PBReaderPlaceMark()) {
                goto LABEL_2687;
              }
              uint64_t v1119 = [a1 position];
              uint64_t v1120 = [a1 length];
LABEL_458:
              if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                goto LABEL_756;
              }
              char v179 = 0;
              unsigned int v180 = 0;
              unint64_t v181 = 0;
              while (2)
              {
                uint64_t v182 = *v2;
                uint64_t v183 = *(void *)&a1[v182];
                unint64_t v184 = v183 + 1;
                if (v183 == -1 || v184 > *(void *)&a1[*v3])
                {
                  a1[*v4] = 1;
                }
                else
                {
                  char v185 = *(unsigned char *)(*(void *)&a1[*v5] + v183);
                  *(void *)&a1[v182] = v184;
                  v181 |= (unint64_t)(v185 & 0x7F) << v179;
                  if (v185 < 0)
                  {
                    v179 += 7;
                    BOOL v13 = v180++ >= 9;
                    if (v13)
                    {
                      unint64_t v181 = 0;
                      int v186 = a1[*v4];
                      goto LABEL_470;
                    }
                    continue;
                  }
                }
                break;
              }
              int v186 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v181 = 0;
              }
LABEL_470:
              int v187 = v181 & 7;
              if (v186) {
                BOOL v188 = 1;
              }
              else {
                BOOL v188 = v187 == 4;
              }
              if (v188)
              {
LABEL_756:
                int v340 = a1[*v4];
                PBReaderRecallMark();
                if (v340) {
                  goto LABEL_2687;
                }
LABEL_720:
                PBReaderRecallMark();
                continue;
              }
              break;
            case 2u:
              if ((v171 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v259 = 0;
              while (1)
              {
                uint64_t v260 = *v2;
                uint64_t v261 = *(void *)&a1[v260];
                unint64_t v262 = v261 + 1;
                if (v261 == -1 || v262 > *(void *)&a1[*v3]) {
                  goto LABEL_753;
                }
                int v263 = *(char *)(*(void *)&a1[*v5] + v261);
                *(void *)&a1[v260] = v262;
                if (v263 < 0)
                {
                  BOOL v32 = v259++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_438;
              }
            case 3u:
              if ((v171 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v264 = 0;
              while (1)
              {
                uint64_t v265 = *v2;
                uint64_t v266 = *(void *)&a1[v265];
                unint64_t v267 = v266 + 1;
                if (v266 == -1 || v267 > *(void *)&a1[*v3]) {
                  goto LABEL_753;
                }
                int v268 = *(char *)(*(void *)&a1[*v5] + v266);
                *(void *)&a1[v265] = v267;
                if (v268 < 0)
                {
                  BOOL v32 = v264++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_438;
              }
            case 4u:
              if ((v171 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v269 = 0;
              while (1)
              {
                uint64_t v270 = *v2;
                uint64_t v271 = *(void *)&a1[v270];
                unint64_t v272 = v271 + 1;
                if (v271 == -1 || v272 > *(void *)&a1[*v3]) {
                  goto LABEL_753;
                }
                int v273 = *(char *)(*(void *)&a1[*v5] + v271);
                *(void *)&a1[v270] = v272;
                if (v273 < 0)
                {
                  BOOL v32 = v269++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_438;
              }
            case 5u:
              if ((v171 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v274 = 0;
              while (1)
              {
                uint64_t v275 = *v2;
                uint64_t v276 = *(void *)&a1[v275];
                unint64_t v277 = v276 + 1;
                if (v276 == -1 || v277 > *(void *)&a1[*v3]) {
                  goto LABEL_753;
                }
                int v278 = *(char *)(*(void *)&a1[*v5] + v276);
                *(void *)&a1[v275] = v277;
                if (v278 < 0)
                {
                  BOOL v32 = v274++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_438;
              }
            case 6u:
              if (v177 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1117 = 0;
              uint64_t v1118 = 0;
              if (!PBReaderPlaceMark()) {
                goto LABEL_2687;
              }
              uint64_t v1119 = [a1 position];
              uint64_t v1120 = [a1 length];
LABEL_633:
              while (2)
              {
                if (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
                {
                  char v279 = 0;
                  unsigned int v280 = 0;
                  unint64_t v281 = 0;
                  while (1)
                  {
                    uint64_t v282 = *v2;
                    uint64_t v283 = *(void *)&a1[v282];
                    unint64_t v284 = v283 + 1;
                    if (v283 == -1 || v284 > *(void *)&a1[*v3]) {
                      break;
                    }
                    char v285 = *(unsigned char *)(*(void *)&a1[*v5] + v283);
                    *(void *)&a1[v282] = v284;
                    v281 |= (unint64_t)(v285 & 0x7F) << v279;
                    if ((v285 & 0x80) == 0) {
                      goto LABEL_643;
                    }
                    v279 += 7;
                    BOOL v13 = v280++ >= 9;
                    if (v13)
                    {
                      unint64_t v281 = 0;
                      int v286 = a1[*v4];
                      goto LABEL_645;
                    }
                  }
                  a1[*v4] = 1;
LABEL_643:
                  int v286 = a1[*v4];
                  if (a1[*v4]) {
                    unint64_t v281 = 0;
                  }
LABEL_645:
                  if (!v286 && (v281 & 7) != 4)
                  {
                    unint64_t v288 = v281 >> 3;
                    if ((v281 >> 3) == 3)
                    {
                      if ((v281 & 7) != 0) {
                        goto LABEL_2690;
                      }
                      unsigned int v294 = 0;
                      while (1)
                      {
                        uint64_t v295 = *v2;
                        uint64_t v296 = *(void *)&a1[v295];
                        unint64_t v297 = v296 + 1;
                        if (v296 == -1 || v297 > *(void *)&a1[*v3]) {
                          break;
                        }
                        int v298 = *(char *)(*(void *)&a1[*v5] + v296);
                        *(void *)&a1[v295] = v297;
                        if (v298 < 0)
                        {
                          BOOL v32 = v294++ > 8;
                          if (!v32) {
                            continue;
                          }
                        }
                        goto LABEL_633;
                      }
                    }
                    else if (v288 == 2)
                    {
                      if ((v281 & 7) != 0) {
                        goto LABEL_2690;
                      }
                      unsigned int v299 = 0;
                      while (1)
                      {
                        uint64_t v300 = *v2;
                        uint64_t v301 = *(void *)&a1[v300];
                        unint64_t v302 = v301 + 1;
                        if (v301 == -1 || v302 > *(void *)&a1[*v3]) {
                          break;
                        }
                        int v303 = *(char *)(*(void *)&a1[*v5] + v301);
                        *(void *)&a1[v300] = v302;
                        if (v303 < 0)
                        {
                          BOOL v32 = v299++ > 8;
                          if (!v32) {
                            continue;
                          }
                        }
                        goto LABEL_633;
                      }
                    }
                    else
                    {
                      if (v288 != 1)
                      {
                        if ((PBReaderSkipValueWithTag() & 1) == 0) {
                          goto LABEL_2690;
                        }
                        continue;
                      }
                      if ((v281 & 7) != 0) {
                        goto LABEL_2690;
                      }
                      unsigned int v289 = 0;
                      while (1)
                      {
                        uint64_t v290 = *v2;
                        uint64_t v291 = *(void *)&a1[v290];
                        unint64_t v292 = v291 + 1;
                        if (v291 == -1 || v292 > *(void *)&a1[*v3]) {
                          break;
                        }
                        int v293 = *(char *)(*(void *)&a1[*v5] + v291);
                        *(void *)&a1[v290] = v292;
                        if (v293 < 0)
                        {
                          BOOL v32 = v289++ > 8;
                          if (!v32) {
                            continue;
                          }
                        }
                        goto LABEL_633;
                      }
                    }
                    a1[*v4] = 1;
                    continue;
                  }
                }
                break;
              }
              int v339 = a1[*v4];
              PBReaderRecallMark();
              if (v339) {
                goto LABEL_2687;
              }
              goto LABEL_720;
            case 7u:
              if ((v171 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v304 = 0;
              while (1)
              {
                uint64_t v305 = *v2;
                uint64_t v306 = *(void *)&a1[v305];
                unint64_t v307 = v306 + 1;
                if (v306 == -1 || v307 > *(void *)&a1[*v3]) {
                  goto LABEL_753;
                }
                int v308 = *(char *)(*(void *)&a1[*v5] + v306);
                *(void *)&a1[v305] = v307;
                if (v308 < 0)
                {
                  BOOL v32 = v304++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_438;
              }
            case 0xFu:
              if (v177 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDClientRankingFeatureMetadataIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_720;
            case 0x10u:
              if ((v171 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v309 = 0;
              while (1)
              {
                uint64_t v310 = *v2;
                uint64_t v311 = *(void *)&a1[v310];
                unint64_t v312 = v311 + 1;
                if (v311 == -1 || v312 > *(void *)&a1[*v3]) {
                  goto LABEL_753;
                }
                int v313 = *(char *)(*(void *)&a1[*v5] + v311);
                *(void *)&a1[v310] = v312;
                if (v313 < 0)
                {
                  BOOL v32 = v309++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_438;
              }
            case 0x11u:
              if (v177 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDAutocompleteSessionDataIsValid((unsigned __int8 *)a1)) {
                goto LABEL_2687;
              }
              goto LABEL_720;
            case 0x12u:
              if (v177 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (!PBReaderPlaceMark() || !GEOPDZoomInfoIsValid(a1)) {
                goto LABEL_2687;
              }
              goto LABEL_720;
            case 0x13u:
              if ((v171 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v314 = 0;
              while (1)
              {
                uint64_t v315 = *v2;
                uint64_t v316 = *(void *)&a1[v315];
                unint64_t v317 = v316 + 1;
                if (v316 == -1 || v317 > *(void *)&a1[*v3]) {
                  goto LABEL_753;
                }
                int v318 = *(char *)(*(void *)&a1[*v5] + v316);
                *(void *)&a1[v315] = v317;
                if (v318 < 0)
                {
                  BOOL v32 = v314++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_438;
              }
            case 0x14u:
              if (v177 == 2)
              {
                uint64_t v1119 = 0;
                uint64_t v1120 = 0;
                if (PBReaderPlaceMark())
                {
                  if (GEOPDPlaceSummaryLayoutMetadataIsValid(a1)) {
                    goto LABEL_720;
                  }
                }
              }
              goto LABEL_2687;
            case 0x15u:
              if ((v171 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v319 = 0;
              while (1)
              {
                uint64_t v320 = *v2;
                uint64_t v321 = *(void *)&a1[v320];
                unint64_t v322 = v321 + 1;
                if (v321 == -1 || v322 > *(void *)&a1[*v3]) {
                  goto LABEL_753;
                }
                int v323 = *(char *)(*(void *)&a1[*v5] + v321);
                *(void *)&a1[v320] = v322;
                if (v323 < 0)
                {
                  BOOL v32 = v319++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_438;
              }
            case 0x16u:
              if ((v171 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v324 = 0;
              while (1)
              {
                uint64_t v325 = *v2;
                uint64_t v326 = *(void *)&a1[v325];
                unint64_t v327 = v326 + 1;
                if (v326 == -1 || v327 > *(void *)&a1[*v3]) {
                  goto LABEL_753;
                }
                int v328 = *(char *)(*(void *)&a1[*v5] + v326);
                *(void *)&a1[v325] = v327;
                if (v328 < 0)
                {
                  BOOL v32 = v324++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_438;
              }
            case 0x17u:
              if ((v171 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v329 = 0;
              while (1)
              {
                uint64_t v330 = *v2;
                uint64_t v331 = *(void *)&a1[v330];
                unint64_t v332 = v331 + 1;
                if (v331 == -1 || v332 > *(void *)&a1[*v3]) {
                  goto LABEL_753;
                }
                int v333 = *(char *)(*(void *)&a1[*v5] + v331);
                *(void *)&a1[v330] = v332;
                if (v333 < 0)
                {
                  BOOL v32 = v329++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_438;
              }
            case 0x18u:
              if ((v171 & 7) != 0) {
                goto LABEL_2687;
              }
              unsigned int v334 = 0;
              do
              {
                uint64_t v335 = *v2;
                uint64_t v336 = *(void *)&a1[v335];
                unint64_t v337 = v336 + 1;
                if (v336 == -1 || v337 > *(void *)&a1[*v3])
                {
LABEL_753:
                  a1[*v4] = 1;
                  goto LABEL_438;
                }
                int v338 = *(char *)(*(void *)&a1[*v5] + v336);
                *(void *)&a1[v335] = v337;
                if ((v338 & 0x80000000) == 0) {
                  break;
                }
                BOOL v32 = v334++ > 8;
              }
              while (!v32);
              continue;
            default:
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2687;
              }
              continue;
          }
          break;
        }
        switch((v181 >> 3))
        {
          case 1u:
            if ((v181 & 7) != 0) {
              goto LABEL_2690;
            }
            unsigned int v189 = 0;
            while (1)
            {
              uint64_t v190 = *v2;
              uint64_t v191 = *(void *)&a1[v190];
              unint64_t v192 = v191 + 1;
              if (v191 == -1 || v192 > *(void *)&a1[*v3]) {
                goto LABEL_567;
              }
              int v193 = *(char *)(*(void *)&a1[*v5] + v191);
              *(void *)&a1[v190] = v192;
              if (v193 < 0)
              {
                BOOL v32 = v189++ > 8;
                if (!v32) {
                  continue;
                }
              }
              goto LABEL_458;
            }
          case 2u:
            if (v187 == 2) {
              goto LABEL_484;
            }
            goto LABEL_2690;
          case 3u:
            if (v187 == 2)
            {
              uint64_t v1117 = 0;
              uint64_t v1118 = 0;
              if (PBReaderPlaceMark())
              {
                if (GEOPDAutocompleteEntryIsValid(a1)) {
                  break;
                }
              }
            }
            goto LABEL_2690;
          case 4u:
            if ((v181 & 7) != 0) {
              goto LABEL_2690;
            }
            unsigned int v194 = 0;
            while (1)
            {
              uint64_t v195 = *v2;
              uint64_t v196 = *(void *)&a1[v195];
              unint64_t v197 = v196 + 1;
              if (v196 == -1 || v197 > *(void *)&a1[*v3]) {
                goto LABEL_567;
              }
              int v198 = *(char *)(*(void *)&a1[*v5] + v196);
              *(void *)&a1[v195] = v197;
              if (v198 < 0)
              {
                BOOL v32 = v194++ > 8;
                if (!v32) {
                  continue;
                }
              }
              goto LABEL_458;
            }
          case 5u:
            if ((v181 & 7) != 0) {
              goto LABEL_2690;
            }
            unsigned int v199 = 0;
            while (1)
            {
              uint64_t v200 = *v2;
              uint64_t v201 = *(void *)&a1[v200];
              unint64_t v202 = v201 + 1;
              if (v201 == -1 || v202 > *(void *)&a1[*v3]) {
                goto LABEL_567;
              }
              int v203 = *(char *)(*(void *)&a1[*v5] + v201);
              *(void *)&a1[v200] = v202;
              if (v203 < 0)
              {
                BOOL v32 = v199++ > 8;
                if (!v32) {
                  continue;
                }
              }
              goto LABEL_458;
            }
          case 6u:
            if ((v181 & 7) != 0) {
              goto LABEL_2690;
            }
            unsigned int v204 = 0;
            while (1)
            {
              uint64_t v205 = *v2;
              uint64_t v206 = *(void *)&a1[v205];
              unint64_t v207 = v206 + 1;
              if (v206 == -1 || v207 > *(void *)&a1[*v3]) {
                goto LABEL_567;
              }
              int v208 = *(char *)(*(void *)&a1[*v5] + v206);
              *(void *)&a1[v205] = v207;
              if (v208 < 0)
              {
                BOOL v32 = v204++ > 8;
                if (!v32) {
                  continue;
                }
              }
              goto LABEL_458;
            }
          case 7u:
            if ((v181 & 7) != 0) {
              goto LABEL_2690;
            }
            unsigned int v209 = 0;
            while (1)
            {
              uint64_t v210 = *v2;
              uint64_t v211 = *(void *)&a1[v210];
              unint64_t v212 = v211 + 1;
              if (v211 == -1 || v212 > *(void *)&a1[*v3]) {
                goto LABEL_567;
              }
              int v213 = *(char *)(*(void *)&a1[*v5] + v211);
              *(void *)&a1[v210] = v212;
              if (v213 < 0)
              {
                BOOL v32 = v209++ > 8;
                if (!v32) {
                  continue;
                }
              }
              goto LABEL_458;
            }
          case 8u:
            if ((v181 & 7) != 0) {
              goto LABEL_2690;
            }
            unsigned int v214 = 0;
            while (1)
            {
              uint64_t v215 = *v2;
              uint64_t v216 = *(void *)&a1[v215];
              unint64_t v217 = v216 + 1;
              if (v216 == -1 || v217 > *(void *)&a1[*v3]) {
                goto LABEL_567;
              }
              int v218 = *(char *)(*(void *)&a1[*v5] + v216);
              *(void *)&a1[v215] = v217;
              if (v218 < 0)
              {
                BOOL v32 = v214++ > 8;
                if (!v32) {
                  continue;
                }
              }
              goto LABEL_458;
            }
          case 9u:
            if ((v181 & 7) != 0) {
              goto LABEL_2690;
            }
            unsigned int v219 = 0;
            while (1)
            {
              uint64_t v220 = *v2;
              uint64_t v221 = *(void *)&a1[v220];
              unint64_t v222 = v221 + 1;
              if (v221 == -1 || v222 > *(void *)&a1[*v3]) {
                goto LABEL_567;
              }
              int v223 = *(char *)(*(void *)&a1[*v5] + v221);
              *(void *)&a1[v220] = v222;
              if (v223 < 0)
              {
                BOOL v32 = v219++ > 8;
                if (!v32) {
                  continue;
                }
              }
              goto LABEL_458;
            }
          case 0xAu:
            if ((v181 & 7) != 0) {
              goto LABEL_2690;
            }
            unsigned int v224 = 0;
            while (1)
            {
              uint64_t v225 = *v2;
              uint64_t v226 = *(void *)&a1[v225];
              unint64_t v227 = v226 + 1;
              if (v226 == -1 || v227 > *(void *)&a1[*v3]) {
                goto LABEL_567;
              }
              int v228 = *(char *)(*(void *)&a1[*v5] + v226);
              *(void *)&a1[v225] = v227;
              if (v228 < 0)
              {
                BOOL v32 = v224++ > 8;
                if (!v32) {
                  continue;
                }
              }
              goto LABEL_458;
            }
          case 0xBu:
            if (v187 != 2)
            {
              if ((v181 & 7) == 0)
              {
                while (1)
                {
                  uint64_t v229 = *v2;
                  uint64_t v230 = *(void *)&a1[v229];
                  unint64_t v231 = v230 + 1;
                  if (v230 == -1 || v231 > *(void *)&a1[*v3]) {
                    goto LABEL_567;
                  }
                  int v232 = *(char *)(*(void *)&a1[*v5] + v230);
                  *(void *)&a1[v229] = v231;
                  if (v232 < 0)
                  {
                    unsigned int v233 = v187++;
                    if (v233 <= 8) {
                      continue;
                    }
                  }
                  goto LABEL_458;
                }
              }
LABEL_2690:
              PBReaderRecallMark();
              goto LABEL_2687;
            }
            uint64_t v1117 = 0;
            uint64_t v1118 = 0;
            if (!PBReaderPlaceMark()) {
              goto LABEL_2690;
            }
LABEL_569:
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
            {
              unsigned int v244 = a1[*v4];
              if (a1[*v4]) {
                break;
              }
              while (1)
              {
                uint64_t v245 = *v2;
                uint64_t v246 = *(void *)&a1[v245];
                unint64_t v247 = v246 + 1;
                if (v246 == -1 || v247 > *(void *)&a1[*v3]) {
                  break;
                }
                int v248 = *(char *)(*(void *)&a1[*v5] + v246);
                *(void *)&a1[v245] = v247;
                if (v248 < 0)
                {
                  BOOL v13 = v244++ >= 9;
                  if (!v13) {
                    continue;
                  }
                }
                goto LABEL_569;
              }
              a1[*v4] = 1;
            }
            break;
          case 0xCu:
            if (v187 != 2)
            {
              if ((v181 & 7) != 0) {
                goto LABEL_2690;
              }
              while (1)
              {
                uint64_t v234 = *v2;
                uint64_t v235 = *(void *)&a1[v234];
                unint64_t v236 = v235 + 1;
                if (v235 == -1 || v236 > *(void *)&a1[*v3]) {
                  break;
                }
                int v237 = *(char *)(*(void *)&a1[*v5] + v235);
                *(void *)&a1[v234] = v236;
                if (v237 < 0)
                {
                  unsigned int v238 = v187++;
                  if (v238 <= 8) {
                    continue;
                  }
                }
                goto LABEL_458;
              }
LABEL_567:
              a1[*v4] = 1;
              goto LABEL_458;
            }
            uint64_t v1117 = 0;
            uint64_t v1118 = 0;
            if (!PBReaderPlaceMark()) {
              goto LABEL_2690;
            }
LABEL_579:
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
            {
              unsigned int v249 = a1[*v4];
              if (a1[*v4]) {
                break;
              }
              while (1)
              {
                uint64_t v250 = *v2;
                uint64_t v251 = *(void *)&a1[v250];
                unint64_t v252 = v251 + 1;
                if (v251 == -1 || v252 > *(void *)&a1[*v3]) {
                  break;
                }
                int v253 = *(char *)(*(void *)&a1[*v5] + v251);
                *(void *)&a1[v250] = v252;
                if (v253 < 0)
                {
                  BOOL v13 = v249++ >= 9;
                  if (!v13) {
                    continue;
                  }
                }
                goto LABEL_579;
              }
              a1[*v4] = 1;
            }
            break;
          case 0xDu:
            if (v187 != 2)
            {
              if ((v181 & 7) != 0) {
                goto LABEL_2690;
              }
              while (1)
              {
                uint64_t v239 = *v2;
                uint64_t v240 = *(void *)&a1[v239];
                unint64_t v241 = v240 + 1;
                if (v240 == -1 || v241 > *(void *)&a1[*v3]) {
                  goto LABEL_567;
                }
                int v242 = *(char *)(*(void *)&a1[*v5] + v240);
                *(void *)&a1[v239] = v241;
                if (v242 < 0)
                {
                  unsigned int v243 = v187++;
                  if (v243 <= 8) {
                    continue;
                  }
                }
                goto LABEL_458;
              }
            }
            uint64_t v1117 = 0;
            uint64_t v1118 = 0;
            if (!PBReaderPlaceMark()) {
              goto LABEL_2690;
            }
LABEL_589:
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
            {
              unsigned int v254 = a1[*v4];
              if (a1[*v4]) {
                break;
              }
              while (1)
              {
                uint64_t v255 = *v2;
                uint64_t v256 = *(void *)&a1[v255];
                unint64_t v257 = v256 + 1;
                if (v256 == -1 || v257 > *(void *)&a1[*v3]) {
                  break;
                }
                int v258 = *(char *)(*(void *)&a1[*v5] + v256);
                *(void *)&a1[v255] = v257;
                if (v258 < 0)
                {
                  BOOL v13 = v254++ >= 9;
                  if (!v13) {
                    continue;
                  }
                }
                goto LABEL_589;
              }
              a1[*v4] = 1;
            }
            break;
          default:
LABEL_484:
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2690;
            }
            goto LABEL_458;
        }
        PBReaderRecallMark();
        goto LABEL_458;
      case 0xBu:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1119 = 0;
        uint64_t v1120 = 0;
        if (!PBReaderPlaceMark() || !GEOPDSearchBrowseCategorySuggestionResultIsValid(a1)) {
          goto LABEL_2688;
        }
        goto LABEL_2603;
      case 0xCu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
LABEL_765:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_2602;
          }
          char v341 = 0;
          unsigned int v342 = 0;
          unint64_t v343 = 0;
          while (2)
          {
            uint64_t v344 = *v2;
            uint64_t v345 = *(void *)&a1[v344];
            unint64_t v346 = v345 + 1;
            if (v345 == -1 || v346 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v347 = *(unsigned char *)(*(void *)&a1[*v5] + v345);
              *(void *)&a1[v344] = v346;
              v343 |= (unint64_t)(v347 & 0x7F) << v341;
              if (v347 < 0)
              {
                v341 += 7;
                BOOL v13 = v342++ >= 9;
                if (v13)
                {
                  unint64_t v343 = 0;
                  int v348 = a1[*v4];
                  goto LABEL_777;
                }
                continue;
              }
            }
            break;
          }
          int v348 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v343 = 0;
          }
LABEL_777:
          int v349 = v343 & 7;
          if (v348) {
            BOOL v350 = 1;
          }
          else {
            BOOL v350 = v349 == 4;
          }
          if (!v350)
          {
            switch((v343 >> 3))
            {
              case 1u:
                if (v349 != 2) {
                  goto LABEL_2687;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOMapRegionIsValid(a1)) {
                  goto LABEL_2687;
                }
                goto LABEL_896;
              case 2u:
                if ((v343 & 7) != 0) {
                  goto LABEL_2687;
                }
                unsigned int v351 = 0;
                while (1)
                {
                  uint64_t v352 = *v2;
                  uint64_t v353 = *(void *)&a1[v352];
                  unint64_t v354 = v353 + 1;
                  if (v353 == -1 || v354 > *(void *)&a1[*v3]) {
                    goto LABEL_884;
                  }
                  int v355 = *(char *)(*(void *)&a1[*v5] + v353);
                  *(void *)&a1[v352] = v354;
                  if (v355 < 0)
                  {
                    BOOL v32 = v351++ > 8;
                    if (!v32) {
                      continue;
                    }
                  }
                  goto LABEL_765;
                }
              case 3u:
              case 5u:
                if (v349 != 2) {
                  goto LABEL_2687;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDWarsawMerchantIdentifierIsValid(a1)) {
                  goto LABEL_2687;
                }
                goto LABEL_896;
              case 4u:
                if (v349 != 2) {
                  goto LABEL_2687;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDResultDetourInfoIsValid(a1)) {
                  goto LABEL_2687;
                }
                goto LABEL_896;
              case 6u:
                if (v349 != 2) {
                  goto LABEL_2687;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDSearchClientBehaviorIsValid(a1)) {
                  goto LABEL_2687;
                }
                goto LABEL_896;
              case 7u:
                if ((v343 & 7) != 0) {
                  goto LABEL_2687;
                }
                unsigned int v356 = 0;
                while (1)
                {
                  uint64_t v357 = *v2;
                  uint64_t v358 = *(void *)&a1[v357];
                  unint64_t v359 = v358 + 1;
                  if (v358 == -1 || v359 > *(void *)&a1[*v3]) {
                    goto LABEL_884;
                  }
                  int v360 = *(char *)(*(void *)&a1[*v5] + v358);
                  *(void *)&a1[v357] = v359;
                  if (v360 < 0)
                  {
                    BOOL v32 = v356++ > 8;
                    if (!v32) {
                      continue;
                    }
                  }
                  goto LABEL_765;
                }
              case 8u:
                if (v349 != 2) {
                  goto LABEL_2687;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDBrowseCategoryIsValid(a1)) {
                  goto LABEL_2687;
                }
                goto LABEL_896;
              case 9u:
                if (v349 != 2) {
                  goto LABEL_2687;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDSCategorySearchResultSectionIsValid(a1)) {
                  goto LABEL_2687;
                }
                goto LABEL_896;
              case 0xAu:
                if (v349 != 2) {
                  goto LABEL_2687;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDRelatedEntitySectionIsValid(a1)) {
                  goto LABEL_2687;
                }
                goto LABEL_896;
              case 0xBu:
                if (v349 != 2) {
                  goto LABEL_2687;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDSSearchTierMetadataIsValid(a1)) {
                  goto LABEL_2687;
                }
                goto LABEL_896;
              case 0xCu:
                if (v349 != 2) {
                  goto LABEL_2687;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDResultRefinementGroupIsValid(a1)) {
                  goto LABEL_2687;
                }
                goto LABEL_896;
              case 0xDu:
                if (v349 != 2) {
                  goto LABEL_2687;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDSSearchAutoRedoThresholdIsValid(a1)) {
                  goto LABEL_2687;
                }
                goto LABEL_896;
              case 0xEu:
                if (v349 != 2) {
                  goto LABEL_2687;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDPlaceSummaryLayoutMetadataIsValid(a1)) {
                  goto LABEL_2687;
                }
                goto LABEL_896;
              case 0xFu:
                if (v349 != 2) {
                  goto LABEL_2687;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDSearchSectionListIsValid(a1)) {
                  goto LABEL_2687;
                }
                goto LABEL_896;
              case 0x10u:
                if ((v343 & 7) != 0) {
                  goto LABEL_2687;
                }
                unsigned int v361 = 0;
                while (1)
                {
                  uint64_t v362 = *v2;
                  uint64_t v363 = *(void *)&a1[v362];
                  unint64_t v364 = v363 + 1;
                  if (v363 == -1 || v364 > *(void *)&a1[*v3]) {
                    goto LABEL_884;
                  }
                  int v365 = *(char *)(*(void *)&a1[*v5] + v363);
                  *(void *)&a1[v362] = v364;
                  if (v365 < 0)
                  {
                    BOOL v32 = v361++ > 8;
                    if (!v32) {
                      continue;
                    }
                  }
                  goto LABEL_765;
                }
              case 0x11u:
                if ((v343 & 7) != 0) {
                  goto LABEL_2687;
                }
                unsigned int v366 = 0;
                while (1)
                {
                  uint64_t v367 = *v2;
                  uint64_t v368 = *(void *)&a1[v367];
                  unint64_t v369 = v368 + 1;
                  if (v368 == -1 || v369 > *(void *)&a1[*v3]) {
                    goto LABEL_884;
                  }
                  int v370 = *(char *)(*(void *)&a1[*v5] + v368);
                  *(void *)&a1[v367] = v369;
                  if (v370 < 0)
                  {
                    BOOL v32 = v366++ > 8;
                    if (!v32) {
                      continue;
                    }
                  }
                  goto LABEL_765;
                }
              case 0x13u:
                if ((v343 & 7) != 0) {
                  goto LABEL_2687;
                }
                unsigned int v371 = 0;
                while (1)
                {
                  uint64_t v372 = *v2;
                  uint64_t v373 = *(void *)&a1[v372];
                  unint64_t v374 = v373 + 1;
                  if (v373 == -1 || v374 > *(void *)&a1[*v3]) {
                    goto LABEL_884;
                  }
                  int v375 = *(char *)(*(void *)&a1[*v5] + v373);
                  *(void *)&a1[v372] = v374;
                  if (v375 < 0)
                  {
                    BOOL v32 = v371++ > 8;
                    if (!v32) {
                      continue;
                    }
                  }
                  goto LABEL_765;
                }
              case 0x14u:
                if (v349 != 2) {
                  goto LABEL_2687;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDSSearchSessionDataIsValid((unsigned __int8 *)a1)) {
                  goto LABEL_2687;
                }
                goto LABEL_896;
              case 0x15u:
                if ((v343 & 7) != 0) {
                  goto LABEL_2687;
                }
                unsigned int v376 = 0;
                do
                {
                  uint64_t v377 = *v2;
                  uint64_t v378 = *(void *)&a1[v377];
                  unint64_t v379 = v378 + 1;
                  if (v378 == -1 || v379 > *(void *)&a1[*v3])
                  {
LABEL_884:
                    a1[*v4] = 1;
                    goto LABEL_765;
                  }
                  int v380 = *(char *)(*(void *)&a1[*v5] + v378);
                  *(void *)&a1[v377] = v379;
                  if ((v380 & 0x80000000) == 0) {
                    break;
                  }
                  BOOL v32 = v376++ > 8;
                }
                while (!v32);
                break;
              case 0x16u:
                if (v349 != 2) {
                  goto LABEL_2687;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDGuideSummaryLayoutMetadataIsValid(a1)) {
                  goto LABEL_2687;
                }
                goto LABEL_896;
              case 0x17u:
                if (v349 != 2) {
                  goto LABEL_2687;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDPaginationInfoIsValid(a1)) {
                  goto LABEL_2687;
                }
                goto LABEL_896;
              case 0x18u:
                if (v349 != 2) {
                  goto LABEL_2687;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDSSearchRedoButtonThresholdIsValid(a1)) {
                  goto LABEL_2687;
                }
LABEL_896:
                PBReaderRecallMark();
                continue;
              default:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_2687;
                }
                continue;
            }
            continue;
          }
          goto LABEL_2602;
        }
      case 0xDu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
LABEL_900:
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_2602;
            }
            char v381 = 0;
            unsigned int v382 = 0;
            unint64_t v383 = 0;
            while (1)
            {
              uint64_t v384 = *v2;
              uint64_t v385 = *(void *)&a1[v384];
              unint64_t v386 = v385 + 1;
              if (v385 == -1 || v386 > *(void *)&a1[*v3]) {
                break;
              }
              char v387 = *(unsigned char *)(*(void *)&a1[*v5] + v385);
              *(void *)&a1[v384] = v386;
              v383 |= (unint64_t)(v387 & 0x7F) << v381;
              if ((v387 & 0x80) == 0) {
                goto LABEL_910;
              }
              v381 += 7;
              BOOL v13 = v382++ >= 9;
              if (v13)
              {
                unint64_t v383 = 0;
                int v388 = a1[*v4];
                goto LABEL_912;
              }
            }
            a1[*v4] = 1;
LABEL_910:
            int v388 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v383 = 0;
            }
LABEL_912:
            int v389 = v383 & 7;
            if (v388 || v389 == 4) {
              goto LABEL_2602;
            }
            unint64_t v391 = v383 >> 3;
            if ((v383 >> 3) != 3)
            {
              if (v391 == 2)
              {
                if (v389 != 2) {
                  goto LABEL_2687;
                }
              }
              else if (v391 == 1)
              {
                if (v389 == 2)
                {
                  uint64_t v1117 = 0;
                  uint64_t v1118 = 0;
                  if (PBReaderPlaceMark())
                  {
                    if (GEOMapRegionIsValid(a1))
                    {
                      PBReaderRecallMark();
                      continue;
                    }
                  }
                }
                goto LABEL_2687;
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2687;
              }
              continue;
            }
            break;
          }
          if ((v383 & 7) == 0)
          {
            unsigned int v392 = 0;
            do
            {
              uint64_t v393 = *v2;
              uint64_t v394 = *(void *)&a1[v393];
              unint64_t v395 = v394 + 1;
              if (v394 == -1 || v395 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
                goto LABEL_900;
              }
              int v396 = *(char *)(*(void *)&a1[*v5] + v394);
              *(void *)&a1[v393] = v395;
              if ((v396 & 0x80000000) == 0) {
                break;
              }
              BOOL v32 = v392++ > 8;
            }
            while (!v32);
            continue;
          }
          goto LABEL_2687;
        }
      case 0xEu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        [a1 position];
        [a1 length];
LABEL_938:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_2248;
          }
          char v397 = 0;
          unsigned int v398 = 0;
          unint64_t v399 = 0;
          while (2)
          {
            uint64_t v400 = *v2;
            uint64_t v401 = *(void *)&a1[v400];
            unint64_t v402 = v401 + 1;
            if (v401 == -1 || v402 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v403 = *(unsigned char *)(*(void *)&a1[*v5] + v401);
              *(void *)&a1[v400] = v402;
              v399 |= (unint64_t)(v403 & 0x7F) << v397;
              if (v403 < 0)
              {
                v397 += 7;
                BOOL v13 = v398++ >= 9;
                if (v13)
                {
                  unint64_t v399 = 0;
                  int v404 = a1[*v4];
                  goto LABEL_950;
                }
                continue;
              }
            }
            break;
          }
          int v404 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v399 = 0;
          }
LABEL_950:
          int v405 = v399 & 7;
          if (v404) {
            BOOL v406 = 1;
          }
          else {
            BOOL v406 = v405 == 4;
          }
          if (v406) {
            goto LABEL_2248;
          }
          if ((v399 >> 3) != 2)
          {
            if ((v399 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2687;
              }
              continue;
            }
            if (v405 == 2)
            {
              uint64_t v1119 = 0;
              uint64_t v1120 = 0;
              if (PBReaderPlaceMark())
              {
                if (GEOPDBrowseCategoryIsValid(a1)) {
                  goto LABEL_1022;
                }
              }
            }
            goto LABEL_2687;
          }
          break;
        }
        if (v405 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2687;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (1)
        {
          while (1)
          {
LABEL_963:
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_1021;
            }
            char v407 = 0;
            unsigned int v408 = 0;
            unint64_t v409 = 0;
            while (1)
            {
              uint64_t v410 = *v2;
              uint64_t v411 = *(void *)&a1[v410];
              unint64_t v412 = v411 + 1;
              if (v411 == -1 || v412 > *(void *)&a1[*v3]) {
                break;
              }
              char v413 = *(unsigned char *)(*(void *)&a1[*v5] + v411);
              *(void *)&a1[v410] = v412;
              v409 |= (unint64_t)(v413 & 0x7F) << v407;
              if ((v413 & 0x80) == 0) {
                goto LABEL_973;
              }
              v407 += 7;
              BOOL v13 = v408++ >= 9;
              if (v13)
              {
                unint64_t v409 = 0;
                int v414 = a1[*v4];
                goto LABEL_975;
              }
            }
            a1[*v4] = 1;
LABEL_973:
            int v414 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v409 = 0;
            }
LABEL_975:
            int v415 = v409 & 7;
            if (v414 || v415 == 4)
            {
LABEL_1021:
              int v438 = a1[*v4];
              PBReaderRecallMark();
              if (!v438)
              {
LABEL_1022:
                PBReaderRecallMark();
                goto LABEL_938;
              }
              goto LABEL_2687;
            }
            unint64_t v417 = v409 >> 3;
            if ((v409 >> 3) == 3) {
              break;
            }
            if (v417 == 2)
            {
              if ((v409 & 7) != 0) {
                goto LABEL_2690;
              }
              unsigned int v428 = 0;
              while (1)
              {
                uint64_t v429 = *v2;
                uint64_t v430 = *(void *)&a1[v429];
                unint64_t v431 = v430 + 1;
                if (v430 == -1 || v431 > *(void *)&a1[*v3]) {
                  break;
                }
                int v432 = *(char *)(*(void *)&a1[*v5] + v430);
                *(void *)&a1[v429] = v431;
                if (v432 < 0)
                {
                  BOOL v32 = v428++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_963;
              }
LABEL_1005:
              a1[*v4] = 1;
            }
            else
            {
              if (v417 == 1)
              {
                if ((v409 & 7) != 0) {
                  goto LABEL_2690;
                }
                unsigned int v418 = 0;
                while (1)
                {
                  uint64_t v419 = *v2;
                  uint64_t v420 = *(void *)&a1[v419];
                  unint64_t v421 = v420 + 1;
                  if (v420 == -1 || v421 > *(void *)&a1[*v3]) {
                    goto LABEL_1005;
                  }
                  int v422 = *(char *)(*(void *)&a1[*v5] + v420);
                  *(void *)&a1[v419] = v421;
                  if (v422 < 0)
                  {
                    BOOL v32 = v418++ > 8;
                    if (!v32) {
                      continue;
                    }
                  }
                  goto LABEL_963;
                }
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2690;
              }
            }
          }
          if (v415 != 2)
          {
            if ((v409 & 7) != 0) {
              goto LABEL_2690;
            }
            while (1)
            {
              uint64_t v423 = *v2;
              uint64_t v424 = *(void *)&a1[v423];
              unint64_t v425 = v424 + 1;
              if (v424 == -1 || v425 > *(void *)&a1[*v3]) {
                goto LABEL_1005;
              }
              int v426 = *(char *)(*(void *)&a1[*v5] + v424);
              *(void *)&a1[v423] = v425;
              if (v426 < 0)
              {
                unsigned int v427 = v415++;
                if (v427 <= 8) {
                  continue;
                }
              }
              goto LABEL_963;
            }
          }
          uint64_t v1117 = 0;
          uint64_t v1118 = 0;
          if (!PBReaderPlaceMark()) {
            goto LABEL_2690;
          }
LABEL_1009:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
          {
            unsigned int v433 = a1[*v4];
            if (a1[*v4]) {
              break;
            }
            while (1)
            {
              uint64_t v434 = *v2;
              uint64_t v435 = *(void *)&a1[v434];
              unint64_t v436 = v435 + 1;
              if (v435 == -1 || v436 > *(void *)&a1[*v3]) {
                break;
              }
              int v437 = *(char *)(*(void *)&a1[*v5] + v435);
              *(void *)&a1[v434] = v436;
              if (v437 < 0)
              {
                BOOL v13 = v433++ >= 9;
                if (!v13) {
                  continue;
                }
              }
              goto LABEL_1009;
            }
            a1[*v4] = 1;
          }
          PBReaderRecallMark();
        }
      case 0xFu:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v439 = 0;
          unsigned int v440 = 0;
          unint64_t v441 = 0;
          while (1)
          {
            uint64_t v442 = *v2;
            uint64_t v443 = *(void *)&a1[v442];
            unint64_t v444 = v443 + 1;
            if (v443 == -1 || v444 > *(void *)&a1[*v3]) {
              break;
            }
            char v445 = *(unsigned char *)(*(void *)&a1[*v5] + v443);
            *(void *)&a1[v442] = v444;
            v441 |= (unint64_t)(v445 & 0x7F) << v439;
            if ((v445 & 0x80) == 0) {
              goto LABEL_1036;
            }
            v439 += 7;
            BOOL v13 = v440++ >= 9;
            if (v13)
            {
              unint64_t v441 = 0;
              int v446 = a1[*v4];
              goto LABEL_1038;
            }
          }
          a1[*v4] = 1;
LABEL_1036:
          int v446 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v441 = 0;
          }
LABEL_1038:
          int v447 = v441 & 7;
          if (v446 || v447 == 4) {
            break;
          }
          if ((v441 >> 3) != 1)
          {
            if (!PBReaderSkipValueWithTag()) {
              goto LABEL_2687;
            }
            continue;
          }
          if (v447 != 2 || (PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_2687;
          }
        }
        goto LABEL_2292;
      case 0x10u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        [a1 position];
        [a1 length];
LABEL_1051:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_2165;
          }
          char v449 = 0;
          unsigned int v450 = 0;
          unint64_t v451 = 0;
          while (2)
          {
            uint64_t v452 = *v2;
            uint64_t v453 = *(void *)&a1[v452];
            unint64_t v454 = v453 + 1;
            if (v453 == -1 || v454 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v455 = *(unsigned char *)(*(void *)&a1[*v5] + v453);
              *(void *)&a1[v452] = v454;
              v451 |= (unint64_t)(v455 & 0x7F) << v449;
              if (v455 < 0)
              {
                v449 += 7;
                BOOL v13 = v450++ >= 9;
                if (v13)
                {
                  unint64_t v451 = 0;
                  int v456 = a1[*v4];
                  goto LABEL_1063;
                }
                continue;
              }
            }
            break;
          }
          int v456 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v451 = 0;
          }
LABEL_1063:
          int v457 = v451 & 7;
          if (v456) {
            BOOL v458 = 1;
          }
          else {
            BOOL v458 = v457 == 4;
          }
          if (v458) {
            goto LABEL_2165;
          }
          if ((v451 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2687;
            }
            continue;
          }
          break;
        }
        if (v457 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2687;
        }
        [a1 position];
        [a1 length];
        do
        {
          while (1)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_1099;
            }
            char v459 = 0;
            unsigned int v460 = 0;
            unint64_t v461 = 0;
            while (1)
            {
              uint64_t v462 = *v2;
              uint64_t v463 = *(void *)&a1[v462];
              unint64_t v464 = v463 + 1;
              if (v463 == -1 || v464 > *(void *)&a1[*v3]) {
                break;
              }
              char v465 = *(unsigned char *)(*(void *)&a1[*v5] + v463);
              *(void *)&a1[v462] = v464;
              v461 |= (unint64_t)(v465 & 0x7F) << v459;
              if ((v465 & 0x80) == 0) {
                goto LABEL_1081;
              }
              v459 += 7;
              BOOL v13 = v460++ >= 9;
              if (v13)
              {
                unint64_t v461 = 0;
                int v466 = a1[*v4];
                goto LABEL_1083;
              }
            }
            a1[*v4] = 1;
LABEL_1081:
            int v466 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v461 = 0;
            }
LABEL_1083:
            int v467 = v461 & 7;
            if (v466 || v467 == 4)
            {
LABEL_1099:
              int v470 = a1[*v4];
              PBReaderRecallMark();
              if (!v470)
              {
                PBReaderRecallMark();
                goto LABEL_1051;
              }
              goto LABEL_2687;
            }
            if ((v461 >> 3) != 3) {
              break;
            }
            if (v467 != 2) {
              goto LABEL_2693;
            }
            if (!PBReaderPlaceMark()) {
              goto LABEL_2693;
            }
            uint64_t v1119 = [a1 position];
            uint64_t v1120 = [a1 length];
            uint64_t v1117 = 0;
            uint64_t v1118 = 0;
            int AllFrom = GEOPDLitePlaceResultReadAllFrom((uint64_t)&v1117, (uint64_t)a1);
            PBReaderRecallMark();
            if (!AllFrom) {
              goto LABEL_2693;
            }
            PBReaderRecallMark();
          }
        }
        while (((v461 >> 3) != 1 || v467 == 2) && (PBReaderSkipValueWithTag() & 1) != 0);
        goto LABEL_2693;
      case 0x11u:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v471 = 0;
          unsigned int v472 = 0;
          uint64_t v473 = 0;
          while (2)
          {
            uint64_t v474 = *v2;
            uint64_t v475 = *(void *)&a1[v474];
            unint64_t v476 = v475 + 1;
            if (v475 == -1 || v476 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v477 = *(unsigned char *)(*(void *)&a1[*v5] + v475);
              *(void *)&a1[v474] = v476;
              v473 |= (unint64_t)(v477 & 0x7F) << v471;
              if (v477 < 0)
              {
                v471 += 7;
                BOOL v13 = v472++ >= 9;
                if (v13)
                {
                  LOBYTE(v473) = 0;
                  int v105 = a1[*v4];
                  goto LABEL_1116;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v478 = *v4;
          int v105 = a1[v478];
          if (a1[v478]) {
            LOBYTE(v473) = 0;
          }
LABEL_1116:
          if (v105) {
            BOOL v479 = 1;
          }
          else {
            BOOL v479 = (v473 & 7) == 4;
          }
          if (!v479)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2687;
            }
            continue;
          }
          goto LABEL_2293;
        }
      case 0x12u:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v480 = 0;
          unsigned int v481 = 0;
          uint64_t v482 = 0;
          while (2)
          {
            uint64_t v483 = *v2;
            uint64_t v484 = *(void *)&a1[v483];
            unint64_t v485 = v484 + 1;
            if (v484 == -1 || v485 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v486 = *(unsigned char *)(*(void *)&a1[*v5] + v484);
              *(void *)&a1[v483] = v485;
              v482 |= (unint64_t)(v486 & 0x7F) << v480;
              if (v486 < 0)
              {
                v480 += 7;
                BOOL v13 = v481++ >= 9;
                if (v13)
                {
                  LOBYTE(v482) = 0;
                  int v105 = a1[*v4];
                  goto LABEL_1137;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v487 = *v4;
          int v105 = a1[v487];
          if (a1[v487]) {
            LOBYTE(v482) = 0;
          }
LABEL_1137:
          if (v105) {
            BOOL v488 = 1;
          }
          else {
            BOOL v488 = (v482 & 7) == 4;
          }
          if (!v488)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2687;
            }
            continue;
          }
          goto LABEL_2293;
        }
      case 0x13u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_2602;
            }
            char v489 = 0;
            unsigned int v490 = 0;
            unint64_t v491 = 0;
            while (2)
            {
              uint64_t v492 = *v2;
              uint64_t v493 = *(void *)&a1[v492];
              unint64_t v494 = v493 + 1;
              if (v493 == -1 || v494 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v495 = *(unsigned char *)(*(void *)&a1[*v5] + v493);
                *(void *)&a1[v492] = v494;
                v491 |= (unint64_t)(v495 & 0x7F) << v489;
                if (v495 < 0)
                {
                  v489 += 7;
                  BOOL v13 = v490++ >= 9;
                  if (v13)
                  {
                    unint64_t v491 = 0;
                    int v496 = a1[*v4];
                    goto LABEL_1158;
                  }
                  continue;
                }
              }
              break;
            }
            int v496 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v491 = 0;
            }
LABEL_1158:
            int v497 = v491 & 7;
            if (v496) {
              BOOL v498 = 1;
            }
            else {
              BOOL v498 = v497 == 4;
            }
            if (v498) {
              goto LABEL_2602;
            }
            if ((v491 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2687;
              }
              continue;
            }
            break;
          }
          if (v497 == 2)
          {
            uint64_t v1117 = 0;
            uint64_t v1118 = 0;
            if (PBReaderPlaceMark())
            {
              if (GEOPDMultiLocalizedStringIsValid(a1))
              {
                PBReaderRecallMark();
                continue;
              }
            }
          }
          goto LABEL_2687;
        }
      case 0x14u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        [a1 position];
        [a1 length];
LABEL_1172:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_2248;
          }
          char v499 = 0;
          unsigned int v500 = 0;
          unint64_t v501 = 0;
          while (2)
          {
            uint64_t v502 = *v2;
            uint64_t v503 = *(void *)&a1[v502];
            unint64_t v504 = v503 + 1;
            if (v503 == -1 || v504 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v505 = *(unsigned char *)(*(void *)&a1[*v5] + v503);
              *(void *)&a1[v502] = v504;
              v501 |= (unint64_t)(v505 & 0x7F) << v499;
              if (v505 < 0)
              {
                v499 += 7;
                BOOL v13 = v500++ >= 9;
                if (v13)
                {
                  unint64_t v501 = 0;
                  int v506 = a1[*v4];
                  goto LABEL_1184;
                }
                continue;
              }
            }
            break;
          }
          int v506 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v501 = 0;
          }
LABEL_1184:
          int v507 = v501 & 7;
          if (v506) {
            BOOL v508 = 1;
          }
          else {
            BOOL v508 = v507 == 4;
          }
          if (v508) {
            goto LABEL_2248;
          }
          if ((v501 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2687;
            }
            continue;
          }
          break;
        }
        if (v507 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2687;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (1)
        {
          while (1)
          {
LABEL_1192:
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_1236;
            }
            char v509 = 0;
            unsigned int v510 = 0;
            unint64_t v511 = 0;
            while (1)
            {
              uint64_t v512 = *v2;
              uint64_t v513 = *(void *)&a1[v512];
              unint64_t v514 = v513 + 1;
              if (v513 == -1 || v514 > *(void *)&a1[*v3]) {
                break;
              }
              char v515 = *(unsigned char *)(*(void *)&a1[*v5] + v513);
              *(void *)&a1[v512] = v514;
              v511 |= (unint64_t)(v515 & 0x7F) << v509;
              if ((v515 & 0x80) == 0) {
                goto LABEL_1202;
              }
              v509 += 7;
              BOOL v13 = v510++ >= 9;
              if (v13)
              {
                unint64_t v511 = 0;
                int v516 = a1[*v4];
                goto LABEL_1204;
              }
            }
            a1[*v4] = 1;
LABEL_1202:
            int v516 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v511 = 0;
            }
LABEL_1204:
            int v517 = v511 & 7;
            if (v516 || v517 == 4)
            {
LABEL_1236:
              int v529 = a1[*v4];
              PBReaderRecallMark();
              if (!v529)
              {
                PBReaderRecallMark();
                goto LABEL_1172;
              }
              goto LABEL_2687;
            }
            if ((v511 >> 3) == 2) {
              break;
            }
            if ((v511 >> 3) == 1)
            {
              if (v517 != 2) {
                goto LABEL_2690;
              }
              uint64_t v1117 = 0;
              uint64_t v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDBrowseCategoryIsValid(a1)) {
                goto LABEL_2690;
              }
LABEL_1213:
              PBReaderRecallMark();
            }
            else if ((PBReaderSkipValueWithTag() & 1) == 0)
            {
              goto LABEL_2690;
            }
          }
          if (v517 == 2)
          {
            uint64_t v1117 = 0;
            uint64_t v1118 = 0;
            if (!PBReaderPlaceMark()) {
              goto LABEL_2690;
            }
LABEL_1224:
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
            {
              unsigned int v524 = a1[*v4];
              if (a1[*v4]) {
                break;
              }
              while (1)
              {
                uint64_t v525 = *v2;
                uint64_t v526 = *(void *)&a1[v525];
                unint64_t v527 = v526 + 1;
                if (v526 == -1 || v527 > *(void *)&a1[*v3]) {
                  break;
                }
                int v528 = *(char *)(*(void *)&a1[*v5] + v526);
                *(void *)&a1[v525] = v527;
                if (v528 < 0)
                {
                  BOOL v13 = v524++ >= 9;
                  if (!v13) {
                    continue;
                  }
                }
                goto LABEL_1224;
              }
              a1[*v4] = 1;
            }
            goto LABEL_1213;
          }
          if ((v511 & 7) != 0) {
            goto LABEL_2690;
          }
          while (1)
          {
            uint64_t v519 = *v2;
            uint64_t v520 = *(void *)&a1[v519];
            unint64_t v521 = v520 + 1;
            if (v520 == -1 || v521 > *(void *)&a1[*v3]) {
              break;
            }
            int v522 = *(char *)(*(void *)&a1[*v5] + v520);
            *(void *)&a1[v519] = v521;
            if (v522 < 0)
            {
              unsigned int v523 = v517++;
              if (v523 <= 8) {
                continue;
              }
            }
            goto LABEL_1192;
          }
          a1[*v4] = 1;
        }
      case 0x15u:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v530 = 0;
          unsigned int v531 = 0;
          unint64_t v532 = 0;
          while (1)
          {
            uint64_t v533 = *v2;
            uint64_t v534 = *(void *)&a1[v533];
            unint64_t v535 = v534 + 1;
            if (v534 == -1 || v535 > *(void *)&a1[*v3]) {
              break;
            }
            char v536 = *(unsigned char *)(*(void *)&a1[*v5] + v534);
            *(void *)&a1[v533] = v535;
            v532 |= (unint64_t)(v536 & 0x7F) << v530;
            if ((v536 & 0x80) == 0) {
              goto LABEL_1251;
            }
            v530 += 7;
            BOOL v13 = v531++ >= 9;
            if (v13)
            {
              unint64_t v532 = 0;
              int v537 = a1[*v4];
              goto LABEL_1253;
            }
          }
          a1[*v4] = 1;
LABEL_1251:
          int v537 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v532 = 0;
          }
LABEL_1253:
          int v538 = v532 & 7;
          if (v537 || v538 == 4) {
            break;
          }
          if ((v532 >> 3) != 1)
          {
            if (!PBReaderSkipValueWithTag()) {
              goto LABEL_2687;
            }
            continue;
          }
          if (v538 != 2 || (PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_2687;
          }
        }
        goto LABEL_2292;
      case 0x16u:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v540 = 0;
          unsigned int v541 = 0;
          uint64_t v542 = 0;
          while (2)
          {
            uint64_t v543 = *v2;
            uint64_t v544 = *(void *)&a1[v543];
            unint64_t v545 = v544 + 1;
            if (v544 == -1 || v545 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v546 = *(unsigned char *)(*(void *)&a1[*v5] + v544);
              *(void *)&a1[v543] = v545;
              v542 |= (unint64_t)(v546 & 0x7F) << v540;
              if (v546 < 0)
              {
                v540 += 7;
                BOOL v13 = v541++ >= 9;
                if (v13)
                {
                  LOBYTE(v542) = 0;
                  int v105 = a1[*v4];
                  goto LABEL_1278;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v547 = *v4;
          int v105 = a1[v547];
          if (a1[v547]) {
            LOBYTE(v542) = 0;
          }
LABEL_1278:
          if (v105) {
            BOOL v548 = 1;
          }
          else {
            BOOL v548 = (v542 & 7) == 4;
          }
          if (!v548)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2687;
            }
            continue;
          }
          goto LABEL_2293;
        }
      case 0x17u:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v549 = 0;
          unsigned int v550 = 0;
          uint64_t v551 = 0;
          while (2)
          {
            uint64_t v552 = *v2;
            uint64_t v553 = *(void *)&a1[v552];
            unint64_t v554 = v553 + 1;
            if (v553 == -1 || v554 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v555 = *(unsigned char *)(*(void *)&a1[*v5] + v553);
              *(void *)&a1[v552] = v554;
              v551 |= (unint64_t)(v555 & 0x7F) << v549;
              if (v555 < 0)
              {
                v549 += 7;
                BOOL v13 = v550++ >= 9;
                if (v13)
                {
                  LOBYTE(v551) = 0;
                  int v105 = a1[*v4];
                  goto LABEL_1299;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v556 = *v4;
          int v105 = a1[v556];
          if (a1[v556]) {
            LOBYTE(v551) = 0;
          }
LABEL_1299:
          if (v105) {
            BOOL v557 = 1;
          }
          else {
            BOOL v557 = (v551 & 7) == 4;
          }
          if (!v557)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2687;
            }
            continue;
          }
          goto LABEL_2293;
        }
      case 0x19u:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v558 = 0;
          unsigned int v559 = 0;
          uint64_t v560 = 0;
          while (2)
          {
            uint64_t v561 = *v2;
            uint64_t v562 = *(void *)&a1[v561];
            unint64_t v563 = v562 + 1;
            if (v562 == -1 || v563 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v564 = *(unsigned char *)(*(void *)&a1[*v5] + v562);
              *(void *)&a1[v561] = v563;
              v560 |= (unint64_t)(v564 & 0x7F) << v558;
              if (v564 < 0)
              {
                v558 += 7;
                BOOL v13 = v559++ >= 9;
                if (v13)
                {
                  LOBYTE(v560) = 0;
                  int v105 = a1[*v4];
                  goto LABEL_1322;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v565 = *v4;
          int v105 = a1[v565];
          if (a1[v565]) {
            LOBYTE(v560) = 0;
          }
LABEL_1322:
          if (v105) {
            BOOL v566 = 1;
          }
          else {
            BOOL v566 = (v560 & 7) == 4;
          }
          if (!v566)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2687;
            }
            continue;
          }
          goto LABEL_2293;
        }
      case 0x1Eu:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v567 = 0;
          unsigned int v568 = 0;
          uint64_t v569 = 0;
          while (2)
          {
            uint64_t v570 = *v2;
            uint64_t v571 = *(void *)&a1[v570];
            unint64_t v572 = v571 + 1;
            if (v571 == -1 || v572 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v573 = *(unsigned char *)(*(void *)&a1[*v5] + v571);
              *(void *)&a1[v570] = v572;
              v569 |= (unint64_t)(v573 & 0x7F) << v567;
              if (v573 < 0)
              {
                v567 += 7;
                BOOL v13 = v568++ >= 9;
                if (v13)
                {
                  LOBYTE(v569) = 0;
                  int v105 = a1[*v4];
                  goto LABEL_1343;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v574 = *v4;
          int v105 = a1[v574];
          if (a1[v574]) {
            LOBYTE(v569) = 0;
          }
LABEL_1343:
          if (v105) {
            BOOL v575 = 1;
          }
          else {
            BOOL v575 = (v569 & 7) == 4;
          }
          if (!v575)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2687;
            }
            continue;
          }
          goto LABEL_2293;
        }
      case 0x20u:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v576 = 0;
          unsigned int v577 = 0;
          uint64_t v578 = 0;
          while (2)
          {
            uint64_t v579 = *v2;
            uint64_t v580 = *(void *)&a1[v579];
            unint64_t v581 = v580 + 1;
            if (v580 == -1 || v581 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v582 = *(unsigned char *)(*(void *)&a1[*v5] + v580);
              *(void *)&a1[v579] = v581;
              v578 |= (unint64_t)(v582 & 0x7F) << v576;
              if (v582 < 0)
              {
                v576 += 7;
                BOOL v13 = v577++ >= 9;
                if (v13)
                {
                  LOBYTE(v578) = 0;
                  int v105 = a1[*v4];
                  goto LABEL_1364;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v583 = *v4;
          int v105 = a1[v583];
          if (a1[v583]) {
            LOBYTE(v578) = 0;
          }
LABEL_1364:
          if (v105) {
            BOOL v584 = 1;
          }
          else {
            BOOL v584 = (v578 & 7) == 4;
          }
          if (!v584)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2687;
            }
            continue;
          }
          goto LABEL_2293;
        }
      case 0x22u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
LABEL_1373:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_2602;
          }
          char v585 = 0;
          unsigned int v586 = 0;
          unint64_t v587 = 0;
          while (2)
          {
            uint64_t v588 = *v2;
            uint64_t v589 = *(void *)&a1[v588];
            unint64_t v590 = v589 + 1;
            if (v589 == -1 || v590 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v591 = *(unsigned char *)(*(void *)&a1[*v5] + v589);
              *(void *)&a1[v588] = v590;
              v587 |= (unint64_t)(v591 & 0x7F) << v585;
              if (v591 < 0)
              {
                v585 += 7;
                BOOL v13 = v586++ >= 9;
                if (v13)
                {
                  unint64_t v587 = 0;
                  int v592 = a1[*v4];
                  goto LABEL_1385;
                }
                continue;
              }
            }
            break;
          }
          int v592 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v587 = 0;
          }
LABEL_1385:
          int v593 = v587 & 7;
          if (v592) {
            BOOL v594 = 1;
          }
          else {
            BOOL v594 = v593 == 4;
          }
          if (!v594)
          {
            switch((v587 >> 3))
            {
              case 1u:
                if ((v587 & 7) != 0) {
                  goto LABEL_2687;
                }
                unsigned int v595 = 0;
                break;
              case 2u:
                if (v593 == 2) {
                  goto LABEL_1407;
                }
                goto LABEL_2687;
              case 3u:
                if (v593 != 2) {
                  goto LABEL_2687;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOLatLngIsValid(a1)) {
                  goto LABEL_2687;
                }
                PBReaderRecallMark();
                continue;
              case 4u:
                if (v593 == 2) {
                  goto LABEL_1407;
                }
                goto LABEL_2687;
              case 5u:
                if (v593 == 2) {
                  goto LABEL_1407;
                }
                goto LABEL_2687;
              default:
LABEL_1407:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_2687;
                }
                continue;
            }
            do
            {
              uint64_t v596 = *v2;
              uint64_t v597 = *(void *)&a1[v596];
              unint64_t v598 = v597 + 1;
              if (v597 == -1 || v598 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
                goto LABEL_1373;
              }
              int v599 = *(char *)(*(void *)&a1[*v5] + v597);
              *(void *)&a1[v596] = v598;
              if ((v599 & 0x80000000) == 0) {
                break;
              }
              BOOL v32 = v595++ > 8;
            }
            while (!v32);
            continue;
          }
          goto LABEL_2602;
        }
      case 0x23u:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v600 = 0;
          unsigned int v601 = 0;
          uint64_t v602 = 0;
          while (2)
          {
            uint64_t v603 = *v2;
            uint64_t v604 = *(void *)&a1[v603];
            unint64_t v605 = v604 + 1;
            if (v604 == -1 || v605 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v606 = *(unsigned char *)(*(void *)&a1[*v5] + v604);
              *(void *)&a1[v603] = v605;
              v602 |= (unint64_t)(v606 & 0x7F) << v600;
              if (v606 < 0)
              {
                v600 += 7;
                BOOL v13 = v601++ >= 9;
                if (v13)
                {
                  LOBYTE(v602) = 0;
                  int v105 = a1[*v4];
                  goto LABEL_1425;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v607 = *v4;
          int v105 = a1[v607];
          if (a1[v607]) {
            LOBYTE(v602) = 0;
          }
LABEL_1425:
          if (v105) {
            BOOL v608 = 1;
          }
          else {
            BOOL v608 = (v602 & 7) == 4;
          }
          if (!v608)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2687;
            }
            continue;
          }
          goto LABEL_2293;
        }
      case 0x24u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        [a1 position];
        [a1 length];
LABEL_1434:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_2248;
          }
          char v609 = 0;
          unsigned int v610 = 0;
          unint64_t v611 = 0;
          while (2)
          {
            uint64_t v612 = *v2;
            uint64_t v613 = *(void *)&a1[v612];
            unint64_t v614 = v613 + 1;
            if (v613 == -1 || v614 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v615 = *(unsigned char *)(*(void *)&a1[*v5] + v613);
              *(void *)&a1[v612] = v614;
              v611 |= (unint64_t)(v615 & 0x7F) << v609;
              if (v615 < 0)
              {
                v609 += 7;
                BOOL v13 = v610++ >= 9;
                if (v13)
                {
                  unint64_t v611 = 0;
                  int v616 = a1[*v4];
                  goto LABEL_1446;
                }
                continue;
              }
            }
            break;
          }
          int v616 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v611 = 0;
          }
LABEL_1446:
          int v617 = v611 & 7;
          if (v616) {
            BOOL v618 = 1;
          }
          else {
            BOOL v618 = v617 == 4;
          }
          if (v618) {
            goto LABEL_2248;
          }
          unint64_t v619 = v611 >> 3;
          if ((v611 >> 3) != 3)
          {
            if (v619 != 2)
            {
              if (v619 != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_2687;
                }
                continue;
              }
              if ((v611 & 7) == 0)
              {
                unsigned int v620 = 0;
                do
                {
                  uint64_t v621 = *v2;
                  uint64_t v622 = *(void *)&a1[v621];
                  unint64_t v623 = v622 + 1;
                  if (v622 == -1 || v623 > *(void *)&a1[*v3])
                  {
                    a1[*v4] = 1;
                    goto LABEL_1434;
                  }
                  int v624 = *(char *)(*(void *)&a1[*v5] + v622);
                  *(void *)&a1[v621] = v623;
                  if ((v624 & 0x80000000) == 0) {
                    break;
                  }
                  BOOL v32 = v620++ > 8;
                }
                while (!v32);
                continue;
              }
              goto LABEL_2687;
            }
            if (v617 != 2 || !PBReaderPlaceMark()) {
              goto LABEL_2687;
            }
            uint64_t v1119 = [a1 position];
            uint64_t v1120 = [a1 length];
            while (1)
            {
              while (1)
              {
LABEL_1505:
                if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                  goto LABEL_1543;
                }
                char v641 = 0;
                unsigned int v642 = 0;
                unint64_t v643 = 0;
                while (1)
                {
                  uint64_t v644 = *v2;
                  uint64_t v645 = *(void *)&a1[v644];
                  unint64_t v646 = v645 + 1;
                  if (v645 == -1 || v646 > *(void *)&a1[*v3]) {
                    break;
                  }
                  char v647 = *(unsigned char *)(*(void *)&a1[*v5] + v645);
                  *(void *)&a1[v644] = v646;
                  v643 |= (unint64_t)(v647 & 0x7F) << v641;
                  if ((v647 & 0x80) == 0) {
                    goto LABEL_1515;
                  }
                  v641 += 7;
                  BOOL v13 = v642++ >= 9;
                  if (v13)
                  {
                    unint64_t v643 = 0;
                    int v648 = a1[*v4];
                    goto LABEL_1517;
                  }
                }
                a1[*v4] = 1;
LABEL_1515:
                int v648 = a1[*v4];
                if (a1[*v4]) {
                  unint64_t v643 = 0;
                }
LABEL_1517:
                int v649 = v643 & 7;
                if (v648 || v649 == 4) {
                  goto LABEL_1543;
                }
                unint64_t v651 = v643 >> 3;
                if ((v643 >> 3) != 3) {
                  break;
                }
                if (v649 != 2) {
                  goto LABEL_2690;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOMapRegionIsValid(a1)) {
                  goto LABEL_2690;
                }
LABEL_1539:
                PBReaderRecallMark();
              }
              if (v651 == 2)
              {
                if (v649 != 2) {
                  goto LABEL_2690;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDSpatialPlaceLookupResponseIsValid(a1)) {
                  goto LABEL_2690;
                }
                goto LABEL_1539;
              }
              if (v651 == 1)
              {
                if ((v643 & 7) != 0) {
                  goto LABEL_2690;
                }
                unsigned int v652 = 0;
                while (1)
                {
                  uint64_t v653 = *v2;
                  uint64_t v654 = *(void *)&a1[v653];
                  unint64_t v655 = v654 + 1;
                  if (v654 == -1 || v655 > *(void *)&a1[*v3]) {
                    break;
                  }
                  int v656 = *(char *)(*(void *)&a1[*v5] + v654);
                  *(void *)&a1[v653] = v655;
                  if (v656 < 0)
                  {
                    BOOL v32 = v652++ > 8;
                    if (!v32) {
                      continue;
                    }
                  }
                  goto LABEL_1505;
                }
                a1[*v4] = 1;
              }
              else if ((PBReaderSkipValueWithTag() & 1) == 0)
              {
                goto LABEL_2690;
              }
            }
          }
          break;
        }
        if (v617 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2687;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (1)
        {
          while (1)
          {
LABEL_1464:
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_1543;
            }
            char v625 = 0;
            unsigned int v626 = 0;
            unint64_t v627 = 0;
            while (1)
            {
              uint64_t v628 = *v2;
              uint64_t v629 = *(void *)&a1[v628];
              unint64_t v630 = v629 + 1;
              if (v629 == -1 || v630 > *(void *)&a1[*v3]) {
                break;
              }
              char v631 = *(unsigned char *)(*(void *)&a1[*v5] + v629);
              *(void *)&a1[v628] = v630;
              v627 |= (unint64_t)(v631 & 0x7F) << v625;
              if ((v631 & 0x80) == 0) {
                goto LABEL_1474;
              }
              v625 += 7;
              BOOL v13 = v626++ >= 9;
              if (v13)
              {
                unint64_t v627 = 0;
                int v632 = a1[*v4];
                goto LABEL_1476;
              }
            }
            a1[*v4] = 1;
LABEL_1474:
            int v632 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v627 = 0;
            }
LABEL_1476:
            int v633 = v627 & 7;
            if (v632 || v633 == 4)
            {
LABEL_1543:
              int v657 = a1[*v4];
              PBReaderRecallMark();
              if (!v657)
              {
                PBReaderRecallMark();
                goto LABEL_1434;
              }
              goto LABEL_2687;
            }
            unint64_t v635 = v627 >> 3;
            if ((v627 >> 3) != 3) {
              break;
            }
            if (v633 != 2) {
              goto LABEL_2690;
            }
            uint64_t v1117 = 0;
            uint64_t v1118 = 0;
            if (!PBReaderPlaceMark() || !GEOMapRegionIsValid(a1)) {
              goto LABEL_2690;
            }
LABEL_1498:
            PBReaderRecallMark();
          }
          if (v635 == 2)
          {
            if (v633 != 2) {
              goto LABEL_2690;
            }
            uint64_t v1117 = 0;
            uint64_t v1118 = 0;
            if (!PBReaderPlaceMark() || !GEOPDSpatialEventLookupResponseIsValid(a1)) {
              goto LABEL_2690;
            }
            goto LABEL_1498;
          }
          if (v635 == 1)
          {
            if ((v627 & 7) != 0) {
              goto LABEL_2690;
            }
            unsigned int v636 = 0;
            while (1)
            {
              uint64_t v637 = *v2;
              uint64_t v638 = *(void *)&a1[v637];
              unint64_t v639 = v638 + 1;
              if (v638 == -1 || v639 > *(void *)&a1[*v3]) {
                break;
              }
              int v640 = *(char *)(*(void *)&a1[*v5] + v638);
              *(void *)&a1[v637] = v639;
              if (v640 < 0)
              {
                BOOL v32 = v636++ > 8;
                if (!v32) {
                  continue;
                }
              }
              goto LABEL_1464;
            }
            a1[*v4] = 1;
          }
          else if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
            goto LABEL_2690;
          }
        }
      case 0x25u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_2602;
            }
            char v658 = 0;
            unsigned int v659 = 0;
            unint64_t v660 = 0;
            while (2)
            {
              uint64_t v661 = *v2;
              uint64_t v662 = *(void *)&a1[v661];
              unint64_t v663 = v662 + 1;
              if (v662 == -1 || v663 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v664 = *(unsigned char *)(*(void *)&a1[*v5] + v662);
                *(void *)&a1[v661] = v663;
                v660 |= (unint64_t)(v664 & 0x7F) << v658;
                if (v664 < 0)
                {
                  v658 += 7;
                  BOOL v13 = v659++ >= 9;
                  if (v13)
                  {
                    unint64_t v660 = 0;
                    int v665 = a1[*v4];
                    goto LABEL_1563;
                  }
                  continue;
                }
              }
              break;
            }
            int v665 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v660 = 0;
            }
LABEL_1563:
            int v666 = v660 & 7;
            if (v665) {
              BOOL v667 = 1;
            }
            else {
              BOOL v667 = v666 == 4;
            }
            if (v667) {
              goto LABEL_2602;
            }
            if ((v660 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2687;
              }
              continue;
            }
            break;
          }
          if (v666 == 2)
          {
            uint64_t v1117 = 0;
            uint64_t v1118 = 0;
            if (PBReaderPlaceMark())
            {
              if (GEOPDPlaceContextMetadataIsValid(a1))
              {
                PBReaderRecallMark();
                continue;
              }
            }
          }
          goto LABEL_2687;
        }
      case 0x26u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_2602;
            }
            char v668 = 0;
            unsigned int v669 = 0;
            unint64_t v670 = 0;
            while (2)
            {
              uint64_t v671 = *v2;
              uint64_t v672 = *(void *)&a1[v671];
              unint64_t v673 = v672 + 1;
              if (v672 == -1 || v673 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v674 = *(unsigned char *)(*(void *)&a1[*v5] + v672);
                *(void *)&a1[v671] = v673;
                v670 |= (unint64_t)(v674 & 0x7F) << v668;
                if (v674 < 0)
                {
                  v668 += 7;
                  BOOL v13 = v669++ >= 9;
                  if (v13)
                  {
                    unint64_t v670 = 0;
                    int v675 = a1[*v4];
                    goto LABEL_1589;
                  }
                  continue;
                }
              }
              break;
            }
            int v675 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v670 = 0;
            }
LABEL_1589:
            int v676 = v670 & 7;
            if (v675) {
              BOOL v677 = 1;
            }
            else {
              BOOL v677 = v676 == 4;
            }
            if (v677) {
              goto LABEL_2602;
            }
            if ((v670 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2687;
              }
              continue;
            }
            break;
          }
          if (v676 == 2)
          {
            uint64_t v1117 = 0;
            uint64_t v1118 = 0;
            if (PBReaderPlaceMark())
            {
              if (GEOPDComponentIsValid(a1))
              {
                PBReaderRecallMark();
                continue;
              }
            }
          }
          goto LABEL_2687;
        }
      case 0x27u:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v678 = 0;
          unsigned int v679 = 0;
          uint64_t v680 = 0;
          while (2)
          {
            uint64_t v681 = *v2;
            uint64_t v682 = *(void *)&a1[v681];
            unint64_t v683 = v682 + 1;
            if (v682 == -1 || v683 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v684 = *(unsigned char *)(*(void *)&a1[*v5] + v682);
              *(void *)&a1[v681] = v683;
              v680 |= (unint64_t)(v684 & 0x7F) << v678;
              if (v684 < 0)
              {
                v678 += 7;
                BOOL v13 = v679++ >= 9;
                if (v13)
                {
                  LOBYTE(v680) = 0;
                  int v105 = a1[*v4];
                  goto LABEL_1615;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v685 = *v4;
          int v105 = a1[v685];
          if (a1[v685]) {
            LOBYTE(v680) = 0;
          }
LABEL_1615:
          if (v105) {
            BOOL v686 = 1;
          }
          else {
            BOOL v686 = (v680 & 7) == 4;
          }
          if (!v686)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2687;
            }
            continue;
          }
          goto LABEL_2293;
        }
      case 0x28u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        [a1 position];
        [a1 length];
LABEL_1624:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_2248;
          }
          char v687 = 0;
          unsigned int v688 = 0;
          unint64_t v689 = 0;
          while (2)
          {
            uint64_t v690 = *v2;
            uint64_t v691 = *(void *)&a1[v690];
            unint64_t v692 = v691 + 1;
            if (v691 == -1 || v692 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v693 = *(unsigned char *)(*(void *)&a1[*v5] + v691);
              *(void *)&a1[v690] = v692;
              v689 |= (unint64_t)(v693 & 0x7F) << v687;
              if (v693 < 0)
              {
                v687 += 7;
                BOOL v13 = v688++ >= 9;
                if (v13)
                {
                  unint64_t v689 = 0;
                  int v694 = a1[*v4];
                  goto LABEL_1636;
                }
                continue;
              }
            }
            break;
          }
          int v694 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v689 = 0;
          }
LABEL_1636:
          int v695 = v689 & 7;
          if (v694) {
            BOOL v696 = 1;
          }
          else {
            BOOL v696 = v695 == 4;
          }
          if (v696) {
            goto LABEL_2248;
          }
          if ((v689 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2687;
            }
            continue;
          }
          break;
        }
        if (v695 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2687;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (1)
        {
          while (1)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_1674;
            }
            char v697 = 0;
            unsigned int v698 = 0;
            unint64_t v699 = 0;
            while (1)
            {
              uint64_t v700 = *v2;
              uint64_t v701 = *(void *)&a1[v700];
              unint64_t v702 = v701 + 1;
              if (v701 == -1 || v702 > *(void *)&a1[*v3]) {
                break;
              }
              char v703 = *(unsigned char *)(*(void *)&a1[*v5] + v701);
              *(void *)&a1[v700] = v702;
              v699 |= (unint64_t)(v703 & 0x7F) << v697;
              if ((v703 & 0x80) == 0) {
                goto LABEL_1654;
              }
              v697 += 7;
              BOOL v13 = v698++ >= 9;
              if (v13)
              {
                unint64_t v699 = 0;
                int v704 = a1[*v4];
                goto LABEL_1656;
              }
            }
            a1[*v4] = 1;
LABEL_1654:
            int v704 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v699 = 0;
            }
LABEL_1656:
            int v705 = v699 & 7;
            if (v704 || v705 == 4)
            {
LABEL_1674:
              int v707 = a1[*v4];
              PBReaderRecallMark();
              if (!v707)
              {
                PBReaderRecallMark();
                goto LABEL_1624;
              }
              goto LABEL_2687;
            }
            if ((v699 >> 3) != 2) {
              break;
            }
            if (v705 != 2) {
              goto LABEL_2690;
            }
            uint64_t v1117 = 0;
            uint64_t v1118 = 0;
            if (!PBReaderPlaceMark() || !GEOPDCategoryInformationIsValid(a1)) {
              goto LABEL_2690;
            }
LABEL_1669:
            PBReaderRecallMark();
          }
          if ((v699 >> 3) == 1)
          {
            if (v705 != 2) {
              goto LABEL_2690;
            }
            uint64_t v1117 = 0;
            uint64_t v1118 = 0;
            if (!PBReaderPlaceMark() || !GEOPDCategoryLookupParametersIsValid(a1)) {
              goto LABEL_2690;
            }
            goto LABEL_1669;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_2690;
          }
        }
      case 0x29u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        [a1 position];
        [a1 length];
LABEL_1679:
        while (2)
        {
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
            goto LABEL_2248;
          }
          char v708 = 0;
          unsigned int v709 = 0;
          unint64_t v710 = 0;
          while (2)
          {
            uint64_t v711 = *v2;
            uint64_t v712 = *(void *)&a1[v711];
            unint64_t v713 = v712 + 1;
            if (v712 == -1 || v713 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v714 = *(unsigned char *)(*(void *)&a1[*v5] + v712);
              *(void *)&a1[v711] = v713;
              v710 |= (unint64_t)(v714 & 0x7F) << v708;
              if (v714 < 0)
              {
                v708 += 7;
                BOOL v13 = v709++ >= 9;
                if (v13)
                {
                  unint64_t v710 = 0;
                  int v715 = a1[*v4];
                  goto LABEL_1691;
                }
                continue;
              }
            }
            break;
          }
          int v715 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v710 = 0;
          }
LABEL_1691:
          int v716 = v710 & 7;
          if (v715) {
            BOOL v717 = 1;
          }
          else {
            BOOL v717 = v716 == 4;
          }
          if (v717) {
            goto LABEL_2248;
          }
          if ((v710 >> 3) != 2)
          {
            if ((v710 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2687;
              }
              continue;
            }
            if ((v710 & 7) == 0)
            {
              unsigned int v718 = 0;
              do
              {
                uint64_t v719 = *v2;
                uint64_t v720 = *(void *)&a1[v719];
                unint64_t v721 = v720 + 1;
                if (v720 == -1 || v721 > *(void *)&a1[*v3])
                {
                  a1[*v4] = 1;
                  goto LABEL_1679;
                }
                int v722 = *(char *)(*(void *)&a1[*v5] + v720);
                *(void *)&a1[v719] = v721;
                if ((v722 & 0x80000000) == 0) {
                  break;
                }
                BOOL v32 = v718++ > 8;
              }
              while (!v32);
              continue;
            }
            goto LABEL_2687;
          }
          break;
        }
        if (v716 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2687;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (1)
        {
          while (1)
          {
LABEL_1708:
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_1743;
            }
            char v723 = 0;
            unsigned int v724 = 0;
            unint64_t v725 = 0;
            while (1)
            {
              uint64_t v726 = *v2;
              uint64_t v727 = *(void *)&a1[v726];
              unint64_t v728 = v727 + 1;
              if (v727 == -1 || v728 > *(void *)&a1[*v3]) {
                break;
              }
              char v729 = *(unsigned char *)(*(void *)&a1[*v5] + v727);
              *(void *)&a1[v726] = v728;
              v725 |= (unint64_t)(v729 & 0x7F) << v723;
              if ((v729 & 0x80) == 0) {
                goto LABEL_1718;
              }
              v723 += 7;
              BOOL v13 = v724++ >= 9;
              if (v13)
              {
                unint64_t v725 = 0;
                int v730 = a1[*v4];
                goto LABEL_1720;
              }
            }
            a1[*v4] = 1;
LABEL_1718:
            int v730 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v725 = 0;
            }
LABEL_1720:
            int v731 = v725 & 7;
            if (v730 || v731 == 4)
            {
LABEL_1743:
              int v738 = a1[*v4];
              PBReaderRecallMark();
              if (!v738)
              {
                PBReaderRecallMark();
                goto LABEL_1679;
              }
              goto LABEL_2687;
            }
            if ((v725 >> 3) == 2) {
              break;
            }
            if ((v725 >> 3) == 1)
            {
              if ((v725 & 7) != 0) {
                goto LABEL_2690;
              }
              unsigned int v733 = 0;
              while (1)
              {
                uint64_t v734 = *v2;
                uint64_t v735 = *(void *)&a1[v734];
                unint64_t v736 = v735 + 1;
                if (v735 == -1 || v736 > *(void *)&a1[*v3]) {
                  break;
                }
                int v737 = *(char *)(*(void *)&a1[*v5] + v735);
                *(void *)&a1[v734] = v736;
                if (v737 < 0)
                {
                  BOOL v32 = v733++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_1708;
              }
              a1[*v4] = 1;
            }
            else if ((PBReaderSkipValueWithTag() & 1) == 0)
            {
              goto LABEL_2690;
            }
          }
          if (v731 != 2) {
            goto LABEL_2690;
          }
          uint64_t v1117 = 0;
          uint64_t v1118 = 0;
          if (!PBReaderPlaceMark() || !GEOPDMerchantBrandLookupResponseIsValid(a1)) {
            goto LABEL_2690;
          }
          PBReaderRecallMark();
        }
      case 0x2Au:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v739 = 0;
          unsigned int v740 = 0;
          uint64_t v741 = 0;
          while (2)
          {
            uint64_t v742 = *v2;
            uint64_t v743 = *(void *)&a1[v742];
            unint64_t v744 = v743 + 1;
            if (v743 == -1 || v744 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v745 = *(unsigned char *)(*(void *)&a1[*v5] + v743);
              *(void *)&a1[v742] = v744;
              v741 |= (unint64_t)(v745 & 0x7F) << v739;
              if (v745 < 0)
              {
                v739 += 7;
                BOOL v13 = v740++ >= 9;
                if (v13)
                {
                  LOBYTE(v741) = 0;
                  int v105 = a1[*v4];
                  goto LABEL_1761;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v746 = *v4;
          int v105 = a1[v746];
          if (a1[v746]) {
            LOBYTE(v741) = 0;
          }
LABEL_1761:
          if (v105) {
            BOOL v747 = 1;
          }
          else {
            BOOL v747 = (v741 & 7) == 4;
          }
          if (!v747)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2687;
            }
            continue;
          }
          goto LABEL_2293;
        }
      case 0x2Bu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_2165;
            }
            char v748 = 0;
            unsigned int v749 = 0;
            unint64_t v750 = 0;
            while (2)
            {
              uint64_t v751 = *v2;
              uint64_t v752 = *(void *)&a1[v751];
              unint64_t v753 = v752 + 1;
              if (v752 == -1 || v753 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v754 = *(unsigned char *)(*(void *)&a1[*v5] + v752);
                *(void *)&a1[v751] = v753;
                v750 |= (unint64_t)(v754 & 0x7F) << v748;
                if (v754 < 0)
                {
                  v748 += 7;
                  BOOL v13 = v749++ >= 9;
                  if (v13)
                  {
                    unint64_t v750 = 0;
                    int v755 = a1[*v4];
                    goto LABEL_1782;
                  }
                  continue;
                }
              }
              break;
            }
            int v755 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v750 = 0;
            }
LABEL_1782:
            int v756 = v750 & 7;
            if (v755) {
              BOOL v757 = 1;
            }
            else {
              BOOL v757 = v756 == 4;
            }
            if (v757) {
              goto LABEL_2165;
            }
            if ((v750 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2687;
              }
              continue;
            }
            break;
          }
          if (v756 == 2 && PBReaderPlaceMark())
          {
            [a1 position];
            [a1 length];
LABEL_1790:
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
            {
              char v758 = 0;
              unsigned int v759 = 0;
              unint64_t v760 = 0;
              while (1)
              {
                uint64_t v761 = *v2;
                uint64_t v762 = *(void *)&a1[v761];
                unint64_t v763 = v762 + 1;
                if (v762 == -1 || v763 > *(void *)&a1[*v3]) {
                  break;
                }
                char v764 = *(unsigned char *)(*(void *)&a1[*v5] + v762);
                *(void *)&a1[v761] = v763;
                v760 |= (unint64_t)(v764 & 0x7F) << v758;
                if ((v764 & 0x80) == 0) {
                  goto LABEL_1800;
                }
                v758 += 7;
                BOOL v13 = v759++ >= 9;
                if (v13)
                {
                  unint64_t v760 = 0;
                  int v765 = a1[*v4];
                  goto LABEL_1802;
                }
              }
              a1[*v4] = 1;
LABEL_1800:
              int v765 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v760 = 0;
              }
LABEL_1802:
              int v766 = v760 & 7;
              if (v765 || v766 == 4) {
                break;
              }
              switch((v760 >> 3))
              {
                case 1u:
                  if ((v760 & 7) != 0) {
                    goto LABEL_2693;
                  }
                  unsigned int v768 = 0;
                  while (1)
                  {
                    uint64_t v769 = *v2;
                    uint64_t v770 = *(void *)&a1[v769];
                    unint64_t v771 = v770 + 1;
                    if (v770 == -1 || v771 > *(void *)&a1[*v3]) {
                      break;
                    }
                    int v772 = *(char *)(*(void *)&a1[*v5] + v770);
                    *(void *)&a1[v769] = v771;
                    if (v772 < 0)
                    {
                      BOOL v32 = v768++ > 8;
                      if (!v32) {
                        continue;
                      }
                    }
                    goto LABEL_1790;
                  }
                  a1[*v4] = 1;
                  continue;
                case 2u:
                  if (v766 == 2) {
                    goto LABEL_1816;
                  }
                  goto LABEL_2693;
                case 3u:
                  if (v766 != 2) {
                    goto LABEL_2693;
                  }
                  uint64_t v1119 = 0;
                  uint64_t v1120 = 0;
                  if (!PBReaderPlaceMark() || !GEOPDSearchBrowseCategorySuggestionResultIsValid(a1)) {
                    goto LABEL_2693;
                  }
                  goto LABEL_1886;
                case 4u:
                  if (v766 != 2) {
                    goto LABEL_2693;
                  }
                  uint64_t v1119 = 0;
                  uint64_t v1120 = 0;
                  if (!PBReaderPlaceMark() || !GEOPDCollectionSuggestionResultIsValid(a1)) {
                    goto LABEL_2693;
                  }
                  goto LABEL_1886;
                case 5u:
                  if (v766 == 2)
                  {
                    uint64_t v1119 = 0;
                    uint64_t v1120 = 0;
                    if (PBReaderPlaceMark())
                    {
                      if (GEOPDPublisherSuggestionResultIsValid(a1)) {
                        goto LABEL_1886;
                      }
                    }
                  }
                  goto LABEL_2693;
                case 6u:
                  if (v766 != 2 || !PBReaderPlaceMark()) {
                    goto LABEL_2693;
                  }
                  uint64_t v1119 = [a1 position];
                  uint64_t v1120 = [a1 length];
                  while (1)
                  {
LABEL_1833:
                    if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                      goto LABEL_1885;
                    }
                    char v773 = 0;
                    unsigned int v774 = 0;
                    unint64_t v775 = 0;
                    while (1)
                    {
                      uint64_t v776 = *v2;
                      uint64_t v777 = *(void *)&a1[v776];
                      unint64_t v778 = v777 + 1;
                      if (v777 == -1 || v778 > *(void *)&a1[*v3]) {
                        break;
                      }
                      char v779 = *(unsigned char *)(*(void *)&a1[*v5] + v777);
                      *(void *)&a1[v776] = v778;
                      v775 |= (unint64_t)(v779 & 0x7F) << v773;
                      if ((v779 & 0x80) == 0) {
                        goto LABEL_1843;
                      }
                      v773 += 7;
                      BOOL v13 = v774++ >= 9;
                      if (v13)
                      {
                        unint64_t v775 = 0;
                        int v780 = a1[*v4];
                        goto LABEL_1845;
                      }
                    }
                    a1[*v4] = 1;
LABEL_1843:
                    int v780 = a1[*v4];
                    if (a1[*v4]) {
                      unint64_t v775 = 0;
                    }
LABEL_1845:
                    int v781 = v775 & 7;
                    if (v780 || v781 == 4) {
                      goto LABEL_1885;
                    }
                    if ((v775 >> 3) == 1) {
                      break;
                    }
                    if ((PBReaderSkipValueWithTag() & 1) == 0) {
                      goto LABEL_2692;
                    }
                  }
                  if (v781 == 2)
                  {
                    uint64_t v1117 = 0;
                    uint64_t v1118 = 0;
                    if (PBReaderPlaceMark())
                    {
                      if (GEOPDMapsIdentifierIsValid(a1))
                      {
                        PBReaderRecallMark();
                        goto LABEL_1833;
                      }
                    }
                  }
                  goto LABEL_2692;
                case 7u:
                  if (v766 != 2 || !PBReaderPlaceMark()) {
                    goto LABEL_2693;
                  }
                  uint64_t v1119 = [a1 position];
                  uint64_t v1120 = [a1 length];
                  break;
                default:
LABEL_1816:
                  if ((PBReaderSkipValueWithTag() & 1) == 0) {
                    goto LABEL_2693;
                  }
                  continue;
              }
              while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
              {
                char v783 = 0;
                unsigned int v784 = 0;
                unint64_t v785 = 0;
                while (1)
                {
                  uint64_t v786 = *v2;
                  uint64_t v787 = *(void *)&a1[v786];
                  unint64_t v788 = v787 + 1;
                  if (v787 == -1 || v788 > *(void *)&a1[*v3]) {
                    break;
                  }
                  char v789 = *(unsigned char *)(*(void *)&a1[*v5] + v787);
                  *(void *)&a1[v786] = v788;
                  v785 |= (unint64_t)(v789 & 0x7F) << v783;
                  if ((v789 & 0x80) == 0) {
                    goto LABEL_1869;
                  }
                  v783 += 7;
                  BOOL v13 = v784++ >= 9;
                  if (v13)
                  {
                    unint64_t v785 = 0;
                    int v790 = a1[*v4];
                    goto LABEL_1871;
                  }
                }
                a1[*v4] = 1;
LABEL_1869:
                int v790 = a1[*v4];
                if (a1[*v4]) {
                  unint64_t v785 = 0;
                }
LABEL_1871:
                int v791 = v785 & 7;
                if (v790 || v791 == 4) {
                  break;
                }
                unint64_t v793 = v785 >> 3;
                if ((v785 >> 3) == 3)
                {
                  if (v791 != 2) {
                    goto LABEL_2692;
                  }
                }
                else if (v793 == 2 || v793 == 1)
                {
                  if (v791 == 2)
                  {
                    uint64_t v1117 = 0;
                    uint64_t v1118 = 0;
                    if (PBReaderPlaceMark())
                    {
                      if (GEOPDGuidesLocationEntryIsValid(a1))
                      {
                        PBReaderRecallMark();
                        continue;
                      }
                    }
                  }
LABEL_2692:
                  PBReaderRecallMark();
LABEL_2693:
                  PBReaderRecallMark();
                  goto LABEL_2687;
                }
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_2692;
                }
              }
LABEL_1885:
              int v794 = a1[*v4];
              PBReaderRecallMark();
              if (v794) {
                goto LABEL_2693;
              }
LABEL_1886:
              PBReaderRecallMark();
            }
            int v795 = a1[*v4];
            PBReaderRecallMark();
            if (!v795)
            {
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_2687;
          }
          goto LABEL_2687;
        }
      case 0x2Cu:
        if (v15 == 2)
        {
          uint64_t v1119 = 0;
          uint64_t v1120 = 0;
          if (PBReaderPlaceMark())
          {
            if (GEOPDCollectionSuggestionResultIsValid(a1)) {
              goto LABEL_2603;
            }
          }
        }
        goto LABEL_2688;
      case 0x2Du:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_2602;
            }
            char v796 = 0;
            unsigned int v797 = 0;
            unint64_t v798 = 0;
            while (2)
            {
              uint64_t v799 = *v2;
              uint64_t v800 = *(void *)&a1[v799];
              unint64_t v801 = v800 + 1;
              if (v800 == -1 || v801 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v802 = *(unsigned char *)(*(void *)&a1[*v5] + v800);
                *(void *)&a1[v799] = v801;
                v798 |= (unint64_t)(v802 & 0x7F) << v796;
                if (v802 < 0)
                {
                  v796 += 7;
                  BOOL v13 = v797++ >= 9;
                  if (v13)
                  {
                    unint64_t v798 = 0;
                    int v803 = a1[*v4];
                    goto LABEL_1911;
                  }
                  continue;
                }
              }
              break;
            }
            int v803 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v798 = 0;
            }
LABEL_1911:
            int v804 = v798 & 7;
            if (v803) {
              BOOL v805 = 1;
            }
            else {
              BOOL v805 = v804 == 4;
            }
            if (v805) {
              goto LABEL_2602;
            }
            if ((v798 >> 3) == 2)
            {
              if (v804 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1117 = 0;
              uint64_t v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1)) {
                goto LABEL_2687;
              }
            }
            else
            {
              if ((v798 >> 3) != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_2687;
                }
                continue;
              }
              if (v804 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1117 = 0;
              uint64_t v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDAllCollectionsViewResultFilterIsValid(a1)) {
                goto LABEL_2687;
              }
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 0x2Eu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_2602;
            }
            char v806 = 0;
            unsigned int v807 = 0;
            unint64_t v808 = 0;
            while (2)
            {
              uint64_t v809 = *v2;
              uint64_t v810 = *(void *)&a1[v809];
              unint64_t v811 = v810 + 1;
              if (v810 == -1 || v811 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v812 = *(unsigned char *)(*(void *)&a1[*v5] + v810);
                *(void *)&a1[v809] = v811;
                v808 |= (unint64_t)(v812 & 0x7F) << v806;
                if (v812 < 0)
                {
                  v806 += 7;
                  BOOL v13 = v807++ >= 9;
                  if (v13)
                  {
                    unint64_t v808 = 0;
                    int v813 = a1[*v4];
                    goto LABEL_1942;
                  }
                  continue;
                }
              }
              break;
            }
            int v813 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v808 = 0;
            }
LABEL_1942:
            int v814 = v808 & 7;
            if (v813) {
              BOOL v815 = 1;
            }
            else {
              BOOL v815 = v814 == 4;
            }
            if (v815) {
              goto LABEL_2602;
            }
            unint64_t v816 = v808 >> 3;
            if ((v808 >> 3) == 3)
            {
              if (v814 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1117 = 0;
              uint64_t v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1)) {
                goto LABEL_2687;
              }
            }
            else if (v816 == 2)
            {
              if (v814 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1117 = 0;
              uint64_t v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDAllCollectionsViewResultFilterIsValid(a1)) {
                goto LABEL_2687;
              }
            }
            else
            {
              if (v816 != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_2687;
                }
                continue;
              }
              if (v814 != 2) {
                goto LABEL_2687;
              }
              uint64_t v1117 = 0;
              uint64_t v1118 = 0;
              if (!PBReaderPlaceMark() || !GEOPDPublisherSuggestionResultIsValid(a1)) {
                goto LABEL_2687;
              }
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 0x2Fu:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v817 = 0;
          unsigned int v818 = 0;
          uint64_t v819 = 0;
          while (2)
          {
            uint64_t v820 = *v2;
            uint64_t v821 = *(void *)&a1[v820];
            unint64_t v822 = v821 + 1;
            if (v821 == -1 || v822 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v823 = *(unsigned char *)(*(void *)&a1[*v5] + v821);
              *(void *)&a1[v820] = v822;
              v819 |= (unint64_t)(v823 & 0x7F) << v817;
              if (v823 < 0)
              {
                v817 += 7;
                BOOL v13 = v818++ >= 9;
                if (v13)
                {
                  LOBYTE(v819) = 0;
                  int v105 = a1[*v4];
                  goto LABEL_1978;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v824 = *v4;
          int v105 = a1[v824];
          if (a1[v824]) {
            LOBYTE(v819) = 0;
          }
LABEL_1978:
          if (v105) {
            BOOL v825 = 1;
          }
          else {
            BOOL v825 = (v819 & 7) == 4;
          }
          if (!v825)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2687;
            }
            continue;
          }
          goto LABEL_2293;
        }
      case 0x30u:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v826 = 0;
          unsigned int v827 = 0;
          uint64_t v828 = 0;
          while (2)
          {
            uint64_t v829 = *v2;
            uint64_t v830 = *(void *)&a1[v829];
            unint64_t v831 = v830 + 1;
            if (v830 == -1 || v831 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v832 = *(unsigned char *)(*(void *)&a1[*v5] + v830);
              *(void *)&a1[v829] = v831;
              v828 |= (unint64_t)(v832 & 0x7F) << v826;
              if (v832 < 0)
              {
                v826 += 7;
                BOOL v13 = v827++ >= 9;
                if (v13)
                {
                  LOBYTE(v828) = 0;
                  int v105 = a1[*v4];
                  goto LABEL_1999;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v833 = *v4;
          int v105 = a1[v833];
          if (a1[v833]) {
            LOBYTE(v828) = 0;
          }
LABEL_1999:
          if (v105) {
            BOOL v834 = 1;
          }
          else {
            BOOL v834 = (v828 & 7) == 4;
          }
          if (!v834)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2687;
            }
            continue;
          }
          goto LABEL_2293;
        }
      case 0x31u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        [a1 position];
        [a1 length];
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_2248;
            }
            char v835 = 0;
            unsigned int v836 = 0;
            unint64_t v837 = 0;
            while (2)
            {
              uint64_t v838 = *v2;
              uint64_t v839 = *(void *)&a1[v838];
              unint64_t v840 = v839 + 1;
              if (v839 == -1 || v840 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v841 = *(unsigned char *)(*(void *)&a1[*v5] + v839);
                *(void *)&a1[v838] = v840;
                v837 |= (unint64_t)(v841 & 0x7F) << v835;
                if (v841 < 0)
                {
                  v835 += 7;
                  BOOL v13 = v836++ >= 9;
                  if (v13)
                  {
                    unint64_t v837 = 0;
                    int v842 = a1[*v4];
                    goto LABEL_2020;
                  }
                  continue;
                }
              }
              break;
            }
            int v842 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v837 = 0;
            }
LABEL_2020:
            int v843 = v837 & 7;
            if (v842) {
              BOOL v844 = 1;
            }
            else {
              BOOL v844 = v843 == 4;
            }
            if (v844) {
              goto LABEL_2248;
            }
            if ((v837 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2687;
              }
              continue;
            }
            break;
          }
          if (v843 == 2 && PBReaderPlaceMark())
          {
            uint64_t v1119 = [a1 position];
            uint64_t v1120 = [a1 length];
LABEL_2028:
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
            {
              char v845 = 0;
              unsigned int v846 = 0;
              unint64_t v847 = 0;
              while (1)
              {
                uint64_t v848 = *v2;
                uint64_t v849 = *(void *)&a1[v848];
                unint64_t v850 = v849 + 1;
                if (v849 == -1 || v850 > *(void *)&a1[*v3]) {
                  break;
                }
                char v851 = *(unsigned char *)(*(void *)&a1[*v5] + v849);
                *(void *)&a1[v848] = v850;
                v847 |= (unint64_t)(v851 & 0x7F) << v845;
                if ((v851 & 0x80) == 0) {
                  goto LABEL_2038;
                }
                v845 += 7;
                BOOL v13 = v846++ >= 9;
                if (v13)
                {
                  unint64_t v847 = 0;
                  int v852 = a1[*v4];
                  goto LABEL_2040;
                }
              }
              a1[*v4] = 1;
LABEL_2038:
              int v852 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v847 = 0;
              }
LABEL_2040:
              int v853 = v847 & 7;
              if (v852 || v853 == 4) {
                break;
              }
              switch((v847 >> 3))
              {
                case 1u:
                  if ((v847 & 7) != 0) {
                    goto LABEL_2690;
                  }
                  unsigned int v855 = 0;
                  break;
                case 2u:
                  if (v853 == 2) {
                    goto LABEL_2064;
                  }
                  goto LABEL_2690;
                case 3u:
                  if (v853 != 2) {
                    goto LABEL_2690;
                  }
                  uint64_t v1117 = 0;
                  uint64_t v1118 = 0;
                  if (!PBReaderPlaceMark() || !GEOPDCollectionSuggestionResultIsValid(a1)) {
                    goto LABEL_2690;
                  }
                  goto LABEL_2062;
                case 4u:
                  if (v853 != 2) {
                    goto LABEL_2690;
                  }
                  uint64_t v1117 = 0;
                  uint64_t v1118 = 0;
                  if (!PBReaderPlaceMark() || !GEOPDGuidesLocationEntryIsValid(a1)) {
                    goto LABEL_2690;
                  }
LABEL_2062:
                  PBReaderRecallMark();
                  continue;
                case 5u:
                  if (v853 == 2) {
                    goto LABEL_2064;
                  }
                  goto LABEL_2690;
                default:
LABEL_2064:
                  if ((PBReaderSkipValueWithTag() & 1) == 0) {
                    goto LABEL_2690;
                  }
                  continue;
              }
              while (1)
              {
                uint64_t v856 = *v2;
                uint64_t v857 = *(void *)&a1[v856];
                unint64_t v858 = v857 + 1;
                if (v857 == -1 || v858 > *(void *)&a1[*v3]) {
                  break;
                }
                int v859 = *(char *)(*(void *)&a1[*v5] + v857);
                *(void *)&a1[v856] = v858;
                if (v859 < 0)
                {
                  BOOL v32 = v855++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_2028;
              }
              a1[*v4] = 1;
            }
            int v860 = a1[*v4];
            PBReaderRecallMark();
            if (!v860)
            {
              PBReaderRecallMark();
              continue;
            }
            goto LABEL_2687;
          }
          goto LABEL_2687;
        }
      case 0x32u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        [a1 position];
        [a1 length];
LABEL_2074:
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v861 = 0;
          unsigned int v862 = 0;
          unint64_t v863 = 0;
          while (2)
          {
            uint64_t v864 = *v2;
            uint64_t v865 = *(void *)&a1[v864];
            unint64_t v866 = v865 + 1;
            if (v865 == -1 || v866 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v867 = *(unsigned char *)(*(void *)&a1[*v5] + v865);
              *(void *)&a1[v864] = v866;
              v863 |= (unint64_t)(v867 & 0x7F) << v861;
              if (v867 < 0)
              {
                v861 += 7;
                BOOL v13 = v862++ >= 9;
                if (v13)
                {
                  unint64_t v863 = 0;
                  int v868 = a1[*v4];
                  goto LABEL_2086;
                }
                continue;
              }
            }
            break;
          }
          int v868 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v863 = 0;
          }
LABEL_2086:
          int v869 = v863 & 7;
          if (v868) {
            BOOL v870 = 1;
          }
          else {
            BOOL v870 = v869 == 4;
          }
          if (!v870)
          {
            if ((v863 >> 3) != 2)
            {
              if ((v863 >> 3) == 1 && v869 != 2 || (PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2687;
              }
              continue;
            }
            if (v869 != 2 || !PBReaderPlaceMark()) {
              goto LABEL_2687;
            }
            [a1 position];
            [a1 length];
            while (1)
            {
LABEL_2097:
              if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                goto LABEL_2163;
              }
              char v871 = 0;
              unsigned int v872 = 0;
              unint64_t v873 = 0;
              while (1)
              {
                uint64_t v874 = *v2;
                uint64_t v875 = *(void *)&a1[v874];
                unint64_t v876 = v875 + 1;
                if (v875 == -1 || v876 > *(void *)&a1[*v3]) {
                  break;
                }
                char v877 = *(unsigned char *)(*(void *)&a1[*v5] + v875);
                *(void *)&a1[v874] = v876;
                v873 |= (unint64_t)(v877 & 0x7F) << v871;
                if ((v877 & 0x80) == 0) {
                  goto LABEL_2107;
                }
                v871 += 7;
                BOOL v13 = v872++ >= 9;
                if (v13)
                {
                  unint64_t v873 = 0;
                  int v878 = a1[*v4];
                  goto LABEL_2109;
                }
              }
              a1[*v4] = 1;
LABEL_2107:
              int v878 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v873 = 0;
              }
LABEL_2109:
              int v879 = v873 & 7;
              if (v878 || v879 == 4)
              {
LABEL_2163:
                int v898 = a1[*v4];
                PBReaderRecallMark();
                if (!v898)
                {
                  PBReaderRecallMark();
                  goto LABEL_2074;
                }
                goto LABEL_2687;
              }
              if ((v873 >> 3) == 2)
              {
                if (v879 != 2) {
                  goto LABEL_2693;
                }
                uint64_t v1119 = 0;
                uint64_t v1120 = 0;
                if (!PBReaderPlaceMark() || !GEOPDGuidesLocationEntryIsValid(a1)) {
                  goto LABEL_2693;
                }
                goto LABEL_2160;
              }
              if ((v873 >> 3) == 1) {
                break;
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2693;
              }
            }
            if (v879 != 2 || !PBReaderPlaceMark()) {
              goto LABEL_2693;
            }
            uint64_t v1119 = [a1 position];
            uint64_t v1120 = [a1 length];
            while (1)
            {
              while (1)
              {
LABEL_2118:
                if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                  goto LABEL_2159;
                }
                char v881 = 0;
                unsigned int v882 = 0;
                unint64_t v883 = 0;
                while (1)
                {
                  uint64_t v884 = *v2;
                  uint64_t v885 = *(void *)&a1[v884];
                  unint64_t v886 = v885 + 1;
                  if (v885 == -1 || v886 > *(void *)&a1[*v3]) {
                    break;
                  }
                  char v887 = *(unsigned char *)(*(void *)&a1[*v5] + v885);
                  *(void *)&a1[v884] = v886;
                  v883 |= (unint64_t)(v887 & 0x7F) << v881;
                  if ((v887 & 0x80) == 0) {
                    goto LABEL_2128;
                  }
                  v881 += 7;
                  BOOL v13 = v882++ >= 9;
                  if (v13)
                  {
                    unint64_t v883 = 0;
                    int v888 = a1[*v4];
                    goto LABEL_2130;
                  }
                }
                a1[*v4] = 1;
LABEL_2128:
                int v888 = a1[*v4];
                if (a1[*v4]) {
                  unint64_t v883 = 0;
                }
LABEL_2130:
                int v889 = v883 & 7;
                if (v888 || v889 == 4)
                {
LABEL_2159:
                  int v897 = a1[*v4];
                  PBReaderRecallMark();
                  if (v897) {
                    goto LABEL_2693;
                  }
LABEL_2160:
                  PBReaderRecallMark();
                  goto LABEL_2097;
                }
                unint64_t v891 = v883 >> 3;
                if ((v883 >> 3) != 3) {
                  break;
                }
                if (v889 != 2) {
                  goto LABEL_2692;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1)) {
                  goto LABEL_2692;
                }
                PBReaderRecallMark();
              }
              if (v891 == 2) {
                break;
              }
              if (v891 == 1)
              {
                if ((v883 & 7) != 0) {
                  goto LABEL_2692;
                }
                unsigned int v892 = 0;
                while (1)
                {
                  uint64_t v893 = *v2;
                  uint64_t v894 = *(void *)&a1[v893];
                  unint64_t v895 = v894 + 1;
                  if (v894 == -1 || v895 > *(void *)&a1[*v3]) {
                    break;
                  }
                  int v896 = *(char *)(*(void *)&a1[*v5] + v894);
                  *(void *)&a1[v893] = v895;
                  if (v896 < 0)
                  {
                    BOOL v32 = v892++ > 8;
                    if (!v32) {
                      continue;
                    }
                  }
                  goto LABEL_2118;
                }
                a1[*v4] = 1;
              }
              else
              {
LABEL_2150:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_2692;
                }
              }
            }
            if (v889 != 2) {
              goto LABEL_2692;
            }
            goto LABEL_2150;
          }
          break;
        }
LABEL_2165:
        int v899 = a1[*v4];
        PBReaderRecallMark();
        if (v899) {
          goto LABEL_2688;
        }
        goto LABEL_2603;
      case 0x33u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        [a1 position];
        [a1 length];
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v900 = 0;
          unsigned int v901 = 0;
          unint64_t v902 = 0;
          while (2)
          {
            uint64_t v903 = *v2;
            uint64_t v904 = *(void *)&a1[v903];
            unint64_t v905 = v904 + 1;
            if (v904 == -1 || v905 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v906 = *(unsigned char *)(*(void *)&a1[*v5] + v904);
              *(void *)&a1[v903] = v905;
              v902 |= (unint64_t)(v906 & 0x7F) << v900;
              if (v906 < 0)
              {
                v900 += 7;
                BOOL v13 = v901++ >= 9;
                if (v13)
                {
                  unint64_t v902 = 0;
                  int v907 = a1[*v4];
                  goto LABEL_2182;
                }
                continue;
              }
            }
            break;
          }
          int v907 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v902 = 0;
          }
LABEL_2182:
          int v908 = v902 & 7;
          if (v907) {
            BOOL v909 = 1;
          }
          else {
            BOOL v909 = v908 == 4;
          }
          if (!v909)
          {
            unint64_t v910 = v902 >> 3;
            if ((int)(v902 >> 3) > 2)
            {
              if (v910 != 3)
              {
                if (v910 != 50) {
                  goto LABEL_2244;
                }
                if (v908 != 2 || !PBReaderPlaceMark()) {
                  goto LABEL_2687;
                }
                uint64_t v1119 = [a1 position];
                uint64_t v1120 = [a1 length];
LABEL_2195:
                while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
                {
                  char v911 = 0;
                  unsigned int v912 = 0;
                  unint64_t v913 = 0;
                  while (1)
                  {
                    uint64_t v914 = *v2;
                    uint64_t v915 = *(void *)&a1[v914];
                    unint64_t v916 = v915 + 1;
                    if (v915 == -1 || v916 > *(void *)&a1[*v3]) {
                      break;
                    }
                    char v917 = *(unsigned char *)(*(void *)&a1[*v5] + v915);
                    *(void *)&a1[v914] = v916;
                    v913 |= (unint64_t)(v917 & 0x7F) << v911;
                    if ((v917 & 0x80) == 0) {
                      goto LABEL_2205;
                    }
                    v911 += 7;
                    BOOL v13 = v912++ >= 9;
                    if (v13)
                    {
                      unint64_t v913 = 0;
                      int v918 = a1[*v4];
                      goto LABEL_2207;
                    }
                  }
                  a1[*v4] = 1;
LABEL_2205:
                  int v918 = a1[*v4];
                  if (a1[*v4]) {
                    unint64_t v913 = 0;
                  }
LABEL_2207:
                  int v919 = v913 & 7;
                  if (v918 || v919 == 4) {
                    break;
                  }
                  switch((v913 >> 3))
                  {
                    case 1u:
                      if ((v913 & 7) != 0) {
                        goto LABEL_2690;
                      }
                      unsigned int v921 = 0;
                      while (1)
                      {
                        uint64_t v922 = *v2;
                        uint64_t v923 = *(void *)&a1[v922];
                        unint64_t v924 = v923 + 1;
                        if (v923 == -1 || v924 > *(void *)&a1[*v3]) {
                          goto LABEL_2239;
                        }
                        int v925 = *(char *)(*(void *)&a1[*v5] + v923);
                        *(void *)&a1[v922] = v924;
                        if (v925 < 0)
                        {
                          BOOL v32 = v921++ > 8;
                          if (!v32) {
                            continue;
                          }
                        }
                        goto LABEL_2195;
                      }
                    case 2u:
                      if (v919 == 2) {
                        goto LABEL_2225;
                      }
                      goto LABEL_2690;
                    case 3u:
                    case 4u:
                      if (v919 != 2) {
                        goto LABEL_2690;
                      }
                      uint64_t v1117 = 0;
                      uint64_t v1118 = 0;
                      if (!PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1)) {
                        goto LABEL_2690;
                      }
                      goto LABEL_2230;
                    case 5u:
                      if (v919 != 2) {
                        goto LABEL_2690;
                      }
                      uint64_t v1117 = 0;
                      uint64_t v1118 = 0;
                      if (!PBReaderPlaceMark() || !GEOPDGuidesLocationEntryIsValid(a1)) {
                        goto LABEL_2690;
                      }
LABEL_2230:
                      PBReaderRecallMark();
                      continue;
                    case 6u:
                      if ((v913 & 7) != 0) {
                        goto LABEL_2690;
                      }
                      unsigned int v926 = 0;
                      break;
                    default:
LABEL_2225:
                      if ((PBReaderSkipValueWithTag() & 1) == 0) {
                        goto LABEL_2690;
                      }
                      continue;
                  }
                  while (1)
                  {
                    uint64_t v927 = *v2;
                    uint64_t v928 = *(void *)&a1[v927];
                    unint64_t v929 = v928 + 1;
                    if (v928 == -1 || v929 > *(void *)&a1[*v3]) {
                      break;
                    }
                    int v930 = *(char *)(*(void *)&a1[*v5] + v928);
                    *(void *)&a1[v927] = v929;
                    if (v930 < 0)
                    {
                      BOOL v32 = v926++ > 8;
                      if (!v32) {
                        continue;
                      }
                    }
                    goto LABEL_2195;
                  }
LABEL_2239:
                  a1[*v4] = 1;
                }
                int v931 = a1[*v4];
                PBReaderRecallMark();
                if (v931) {
                  goto LABEL_2687;
                }
LABEL_2247:
                PBReaderRecallMark();
                continue;
              }
            }
            else if (v910 != 1 && v910 != 2)
            {
LABEL_2244:
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2687;
              }
              continue;
            }
            if (v908 != 2) {
              goto LABEL_2687;
            }
            uint64_t v1119 = 0;
            uint64_t v1120 = 0;
            if (!PBReaderPlaceMark() || !GEOPDGuidesHomeFixedSectionIsValid(a1)) {
              goto LABEL_2687;
            }
            goto LABEL_2247;
          }
          break;
        }
LABEL_2248:
        int v932 = a1[*v4];
        PBReaderRecallMark();
        if (v932) {
          goto LABEL_2688;
        }
        goto LABEL_2603;
      case 0x36u:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
LABEL_2253:
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v933 = 0;
          unsigned int v934 = 0;
          unint64_t v935 = 0;
          while (2)
          {
            uint64_t v936 = *v2;
            uint64_t v937 = *(void *)&a1[v936];
            unint64_t v938 = v937 + 1;
            if (v937 == -1 || v938 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v939 = *(unsigned char *)(*(void *)&a1[*v5] + v937);
              *(void *)&a1[v936] = v938;
              v935 |= (unint64_t)(v939 & 0x7F) << v933;
              if (v939 < 0)
              {
                v933 += 7;
                BOOL v13 = v934++ >= 9;
                if (v13)
                {
                  unint64_t v935 = 0;
                  int v940 = a1[*v4];
                  goto LABEL_2265;
                }
                continue;
              }
            }
            break;
          }
          int v940 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v935 = 0;
          }
LABEL_2265:
          int v941 = v935 & 7;
          if (v940) {
            BOOL v942 = 1;
          }
          else {
            BOOL v942 = v941 == 4;
          }
          if (!v942)
          {
            unint64_t v943 = v935 >> 3;
            if ((v935 >> 3) != 3)
            {
              if (v943 == 2)
              {
                if (v941 != 2) {
                  goto LABEL_2687;
                }
              }
              else if (v943 == 1)
              {
                if ((v935 & 7) != 0) {
                  goto LABEL_2687;
                }
                unsigned int v944 = 0;
                while (1)
                {
                  uint64_t v945 = *v2;
                  uint64_t v946 = *(void *)&a1[v945];
                  unint64_t v947 = v946 + 1;
                  if (v946 == -1 || v947 > *(void *)&a1[*v3]) {
                    goto LABEL_2288;
                  }
                  int v948 = *(char *)(*(void *)&a1[*v5] + v946);
                  *(void *)&a1[v945] = v947;
                  if (v948 < 0)
                  {
                    BOOL v32 = v944++ > 8;
                    if (!v32) {
                      continue;
                    }
                  }
                  goto LABEL_2253;
                }
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2687;
              }
              continue;
            }
            if ((v935 & 7) != 0) {
              goto LABEL_2687;
            }
            unsigned int v949 = 0;
            while (1)
            {
              uint64_t v950 = *v2;
              uint64_t v951 = *(void *)&a1[v950];
              unint64_t v952 = v951 + 1;
              if (v951 == -1 || v952 > *(void *)&a1[*v3]) {
                break;
              }
              int v953 = *(char *)(*(void *)&a1[*v5] + v951);
              *(void *)&a1[v950] = v952;
              if (v953 < 0)
              {
                BOOL v32 = v949++ > 8;
                if (!v32) {
                  continue;
                }
              }
              goto LABEL_2253;
            }
LABEL_2288:
            a1[*v4] = 1;
            continue;
          }
          break;
        }
LABEL_2292:
        int v105 = a1[*v4];
LABEL_2293:
        PBReaderRecallMark();
        if (v105) {
          goto LABEL_2688;
        }
        goto LABEL_2603;
      case 0x37u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
LABEL_2298:
        if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
          goto LABEL_2684;
        }
        char v954 = 0;
        unsigned int v955 = 0;
        unint64_t v956 = 0;
        while (2)
        {
          uint64_t v957 = *v2;
          uint64_t v958 = *(void *)&a1[v957];
          unint64_t v959 = v958 + 1;
          if (v958 == -1 || v959 > *(void *)&a1[*v3])
          {
            a1[*v4] = 1;
          }
          else
          {
            char v960 = *(unsigned char *)(*(void *)&a1[*v5] + v958);
            *(void *)&a1[v957] = v959;
            v956 |= (unint64_t)(v960 & 0x7F) << v954;
            if (v960 < 0)
            {
              v954 += 7;
              BOOL v13 = v955++ >= 9;
              if (v13)
              {
                unint64_t v956 = 0;
                int v961 = a1[*v4];
                goto LABEL_2310;
              }
              continue;
            }
          }
          break;
        }
        int v961 = a1[*v4];
        if (a1[*v4]) {
          unint64_t v956 = 0;
        }
LABEL_2310:
        int v962 = v956 & 7;
        if (v961) {
          BOOL v963 = 1;
        }
        else {
          BOOL v963 = v962 == 4;
        }
        if (v963)
        {
LABEL_2684:
          int v1114 = a1[*v4];
          PBReaderRecallMark();
          if (v1114) {
            goto LABEL_2688;
          }
LABEL_2603:
          PBReaderRecallMark();
LABEL_2604:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2686;
          }
          continue;
        }
        if ((v956 >> 3) == 2)
        {
          if (v962 != 2 || !PBReaderPlaceMark()) {
            goto LABEL_2687;
          }
          [a1 position];
          [a1 length];
          while (1)
          {
            while (1)
            {
              if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                goto LABEL_2532;
              }
              char v964 = 0;
              unsigned int v965 = 0;
              unint64_t v966 = 0;
              while (1)
              {
                uint64_t v967 = *v2;
                uint64_t v968 = *(void *)&a1[v967];
                unint64_t v969 = v968 + 1;
                if (v968 == -1 || v969 > *(void *)&a1[*v3]) {
                  break;
                }
                char v970 = *(unsigned char *)(*(void *)&a1[*v5] + v968);
                *(void *)&a1[v967] = v969;
                v966 |= (unint64_t)(v970 & 0x7F) << v964;
                if ((v970 & 0x80) == 0) {
                  goto LABEL_2333;
                }
                v964 += 7;
                BOOL v13 = v965++ >= 9;
                if (v13)
                {
                  unint64_t v966 = 0;
                  int v971 = a1[*v4];
                  goto LABEL_2335;
                }
              }
              a1[*v4] = 1;
LABEL_2333:
              int v971 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v966 = 0;
              }
LABEL_2335:
              int v972 = v966 & 7;
              if (v971 || v972 == 4)
              {
LABEL_2532:
                int v1049 = a1[*v4];
                PBReaderRecallMark();
                if (v1049) {
                  goto LABEL_2687;
                }
LABEL_2533:
                PBReaderRecallMark();
                goto LABEL_2298;
              }
              if ((v966 >> 3) == 1) {
                break;
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2702;
              }
            }
            if (v972 != 2 || !PBReaderPlaceMark()) {
              goto LABEL_2702;
            }
            [a1 position];
            [a1 length];
LABEL_2343:
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
            {
              char v974 = 0;
              unsigned int v975 = 0;
              unint64_t v976 = 0;
              while (1)
              {
                uint64_t v977 = *v2;
                uint64_t v978 = *(void *)&a1[v977];
                unint64_t v979 = v978 + 1;
                if (v978 == -1 || v979 > *(void *)&a1[*v3]) {
                  break;
                }
                char v980 = *(unsigned char *)(*(void *)&a1[*v5] + v978);
                *(void *)&a1[v977] = v979;
                v976 |= (unint64_t)(v980 & 0x7F) << v974;
                if ((v980 & 0x80) == 0) {
                  goto LABEL_2353;
                }
                v974 += 7;
                BOOL v13 = v975++ >= 9;
                if (v13)
                {
                  unint64_t v976 = 0;
                  int v981 = a1[*v4];
                  goto LABEL_2355;
                }
              }
              a1[*v4] = 1;
LABEL_2353:
              int v981 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v976 = 0;
              }
LABEL_2355:
              int v982 = v976 & 7;
              if (v981 || v982 == 4) {
                break;
              }
              unint64_t v984 = v976 >> 3;
              if ((v976 >> 3) == 3)
              {
                if (v982 != 2 || !PBReaderPlaceMark()) {
                  goto LABEL_2701;
                }
                [a1 position];
                [a1 length];
                while (1)
                {
                  while (1)
                  {
                    if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                      goto LABEL_2522;
                    }
                    char v990 = 0;
                    unsigned int v991 = 0;
                    unint64_t v992 = 0;
                    while (1)
                    {
                      uint64_t v993 = *v2;
                      uint64_t v994 = *(void *)&a1[v993];
                      unint64_t v995 = v994 + 1;
                      if (v994 == -1 || v995 > *(void *)&a1[*v3]) {
                        break;
                      }
                      char v996 = *(unsigned char *)(*(void *)&a1[*v5] + v994);
                      *(void *)&a1[v993] = v995;
                      v992 |= (unint64_t)(v996 & 0x7F) << v990;
                      if ((v996 & 0x80) == 0) {
                        goto LABEL_2383;
                      }
                      v990 += 7;
                      BOOL v13 = v991++ >= 9;
                      if (v13)
                      {
                        unint64_t v992 = 0;
                        int v997 = a1[*v4];
                        goto LABEL_2385;
                      }
                    }
                    a1[*v4] = 1;
LABEL_2383:
                    int v997 = a1[*v4];
                    if (a1[*v4]) {
                      unint64_t v992 = 0;
                    }
LABEL_2385:
                    int v998 = v992 & 7;
                    if (v997 || v998 == 4)
                    {
LABEL_2522:
                      int v1047 = a1[*v4];
                      PBReaderRecallMark();
                      if (v1047) {
                        goto LABEL_2701;
                      }
                      goto LABEL_2525;
                    }
                    if ((v992 >> 3) == 1) {
                      break;
                    }
                    if ((PBReaderSkipValueWithTag() & 1) == 0) {
                      goto LABEL_2700;
                    }
                  }
                  if (v998 != 2 || !PBReaderPlaceMark()) {
                    goto LABEL_2700;
                  }
                  uint64_t v1117 = [a1 position];
                  uint64_t v1118 = [a1 length];
LABEL_2393:
                  if (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
                  {
                    char v1000 = 0;
                    unsigned int v1001 = 0;
                    unint64_t v1002 = 0;
                    while (1)
                    {
                      uint64_t v1003 = *v2;
                      uint64_t v1004 = *(void *)&a1[v1003];
                      unint64_t v1005 = v1004 + 1;
                      if (v1004 == -1 || v1005 > *(void *)&a1[*v3]) {
                        break;
                      }
                      char v1006 = *(unsigned char *)(*(void *)&a1[*v5] + v1004);
                      *(void *)&a1[v1003] = v1005;
                      v1002 |= (unint64_t)(v1006 & 0x7F) << v1000;
                      if ((v1006 & 0x80) == 0) {
                        goto LABEL_2403;
                      }
                      v1000 += 7;
                      BOOL v13 = v1001++ >= 9;
                      if (v13)
                      {
                        unint64_t v1002 = 0;
                        int v1007 = a1[*v4];
                        goto LABEL_2405;
                      }
                    }
                    a1[*v4] = 1;
LABEL_2403:
                    int v1007 = a1[*v4];
                    if (a1[*v4]) {
                      unint64_t v1002 = 0;
                    }
LABEL_2405:
                    int v1008 = v1002 & 7;
                    if (!v1007 && v1008 != 4) {
                      break;
                    }
                  }
                  int v1036 = a1[*v4];
                  PBReaderRecallMark();
                  if (v1036) {
                    goto LABEL_2700;
                  }
                  PBReaderRecallMark();
                }
                switch((v1002 >> 3))
                {
                  case 1u:
                    if ((v1002 & 7) != 0) {
                      goto LABEL_2699;
                    }
                    unsigned int v1010 = 0;
                    while (1)
                    {
                      uint64_t v1011 = *v2;
                      uint64_t v1012 = *(void *)&a1[v1011];
                      unint64_t v1013 = v1012 + 1;
                      if (v1012 == -1 || v1013 > *(void *)&a1[*v3]) {
                        goto LABEL_2454;
                      }
                      int v1014 = *(char *)(*(void *)&a1[*v5] + v1012);
                      *(void *)&a1[v1011] = v1013;
                      if (v1014 < 0)
                      {
                        BOOL v32 = v1010++ > 8;
                        if (!v32) {
                          continue;
                        }
                      }
                      goto LABEL_2393;
                    }
                  case 2u:
                    if (v1008 == 2) {
                      goto LABEL_2462;
                    }
                    goto LABEL_2699;
                  case 3u:
                    if (v1008 == 2) {
                      goto LABEL_2462;
                    }
                    goto LABEL_2699;
                  case 4u:
                    if (v1008 == 2)
                    {
                      uint64_t v1119 = 0;
                      uint64_t v1120 = 0;
                      if (PBReaderPlaceMark())
                      {
                        if (GEOLocalizedStringIsValid(a1)) {
                          goto LABEL_2433;
                        }
                      }
                    }
                    goto LABEL_2699;
                  case 5u:
                    if (v1008 == 2) {
                      goto LABEL_2462;
                    }
                    goto LABEL_2699;
                  case 6u:
                    if (v1008 == 2) {
                      goto LABEL_2462;
                    }
                    goto LABEL_2699;
                  case 7u:
                    if ((v1002 & 7) != 0) {
                      goto LABEL_2699;
                    }
                    unsigned int v1015 = 0;
                    while (1)
                    {
                      uint64_t v1016 = *v2;
                      uint64_t v1017 = *(void *)&a1[v1016];
                      unint64_t v1018 = v1017 + 1;
                      if (v1017 == -1 || v1018 > *(void *)&a1[*v3]) {
                        goto LABEL_2454;
                      }
                      int v1019 = *(char *)(*(void *)&a1[*v5] + v1017);
                      *(void *)&a1[v1016] = v1018;
                      if (v1019 < 0)
                      {
                        BOOL v32 = v1015++ > 8;
                        if (!v32) {
                          continue;
                        }
                      }
                      goto LABEL_2393;
                    }
                  case 8u:
                    if ((v1002 & 7) != 0) {
                      goto LABEL_2699;
                    }
                    unsigned int v1020 = 0;
                    while (1)
                    {
                      uint64_t v1021 = *v2;
                      uint64_t v1022 = *(void *)&a1[v1021];
                      unint64_t v1023 = v1022 + 1;
                      if (v1022 == -1 || v1023 > *(void *)&a1[*v3]) {
                        break;
                      }
                      int v1024 = *(char *)(*(void *)&a1[*v5] + v1022);
                      *(void *)&a1[v1021] = v1023;
                      if (v1024 < 0)
                      {
                        BOOL v32 = v1020++ > 8;
                        if (!v32) {
                          continue;
                        }
                      }
                      goto LABEL_2393;
                    }
LABEL_2454:
                    a1[*v4] = 1;
                    goto LABEL_2393;
                  case 9u:
                    if (v1008 == 2) {
                      goto LABEL_2462;
                    }
                    goto LABEL_2699;
                  case 0xAu:
                  case 0xFu:
                    if (v1008 != 2) {
                      goto LABEL_2699;
                    }
                    uint64_t v1119 = 0;
                    uint64_t v1120 = 0;
                    if (!PBReaderPlaceMark() || !GEOPDMultiLocalizedStringIsValid(a1)) {
                      goto LABEL_2699;
                    }
                    goto LABEL_2433;
                  case 0xBu:
                  case 0xEu:
                    if (v1008 != 2) {
                      goto LABEL_2699;
                    }
                    uint64_t v1119 = 0;
                    uint64_t v1120 = 0;
                    if (!PBReaderPlaceMark() || !GEOPDIconMappingIsValid(a1)) {
                      goto LABEL_2699;
                    }
                    goto LABEL_2433;
                  case 0xCu:
                    if (v1008 == 2) {
                      goto LABEL_2462;
                    }
                    goto LABEL_2699;
                  case 0xDu:
                    if (v1008 == 2) {
                      goto LABEL_2462;
                    }
                    goto LABEL_2699;
                  case 0x10u:
                    if (v1008 == 2) {
                      goto LABEL_2462;
                    }
                    goto LABEL_2699;
                  case 0x11u:
                    if (v1008 != 2 || !PBReaderPlaceMark()) {
                      goto LABEL_2699;
                    }
                    uint64_t v1119 = [a1 position];
                    uint64_t v1120 = [a1 length];
                    break;
                  default:
LABEL_2462:
                    if ((PBReaderSkipValueWithTag() & 1) == 0) {
                      goto LABEL_2699;
                    }
                    goto LABEL_2393;
                }
                while (1)
                {
LABEL_2467:
                  if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                    goto LABEL_2492;
                  }
                  char v1025 = 0;
                  unsigned int v1026 = 0;
                  unint64_t v1027 = 0;
                  while (1)
                  {
                    uint64_t v1028 = *v2;
                    uint64_t v1029 = *(void *)&a1[v1028];
                    unint64_t v1030 = v1029 + 1;
                    if (v1029 == -1 || v1030 > *(void *)&a1[*v3]) {
                      break;
                    }
                    char v1031 = *(unsigned char *)(*(void *)&a1[*v5] + v1029);
                    *(void *)&a1[v1028] = v1030;
                    v1027 |= (unint64_t)(v1031 & 0x7F) << v1025;
                    if ((v1031 & 0x80) == 0) {
                      goto LABEL_2477;
                    }
                    v1025 += 7;
                    BOOL v13 = v1026++ >= 9;
                    if (v13)
                    {
                      unint64_t v1027 = 0;
                      int v1032 = a1[*v4];
                      goto LABEL_2479;
                    }
                  }
                  a1[*v4] = 1;
LABEL_2477:
                  int v1032 = a1[*v4];
                  if (a1[*v4]) {
                    unint64_t v1027 = 0;
                  }
LABEL_2479:
                  int v1033 = v1027 & 7;
                  if (v1032 || v1033 == 4)
                  {
LABEL_2492:
                    int v1035 = a1[*v4];
                    PBReaderRecallMark();
                    if (v1035) {
                      goto LABEL_2699;
                    }
LABEL_2433:
                    PBReaderRecallMark();
                    goto LABEL_2393;
                  }
                  if ((v1027 >> 3) == 2) {
                    break;
                  }
                  if ((v1027 >> 3) == 1)
                  {
                    if (v1033 != 2) {
                      goto LABEL_2698;
                    }
                    goto LABEL_2488;
                  }
                  if (!PBReaderSkipValueWithTag())
                  {
LABEL_2698:
                    PBReaderRecallMark();
LABEL_2699:
                    PBReaderRecallMark();
LABEL_2700:
                    PBReaderRecallMark();
LABEL_2701:
                    PBReaderRecallMark();
LABEL_2702:
                    PBReaderRecallMark();
                    goto LABEL_2687;
                  }
                }
                if (v1033 != 2) {
                  goto LABEL_2698;
                }
LABEL_2488:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_2698;
                }
                goto LABEL_2467;
              }
              if (v984 == 2)
              {
                if (v982 != 2) {
                  goto LABEL_2701;
                }
                uint64_t v1117 = 0;
                uint64_t v1118 = 0;
                if (!PBReaderPlaceMark()) {
                  goto LABEL_2701;
                }
                uint64_t v1119 = [a1 position];
                uint64_t v1120 = [a1 length];
                while (1)
                {
                  int v1037 = a1[*v4];
                  if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
                    break;
                  }
                  if (a1[*v4]) {
                    goto LABEL_2700;
                  }
                  char v1038 = 0;
                  unsigned int v1039 = 0;
                  uint64_t v1040 = 0;
                  while (1)
                  {
                    uint64_t v1041 = *v2;
                    uint64_t v1042 = *(void *)&a1[v1041];
                    unint64_t v1043 = v1042 + 1;
                    if (v1042 == -1 || v1043 > *(void *)&a1[*v3]) {
                      break;
                    }
                    char v1044 = *(unsigned char *)(*(void *)&a1[*v5] + v1042);
                    *(void *)&a1[v1041] = v1043;
                    v1040 |= (unint64_t)(v1044 & 0x7F) << v1038;
                    if ((v1044 & 0x80) == 0) {
                      goto LABEL_2511;
                    }
                    v1038 += 7;
                    BOOL v13 = v1039++ >= 9;
                    if (v13)
                    {
                      LOBYTE(v1040) = 0;
                      int v1037 = a1[*v4];
                      goto LABEL_2513;
                    }
                  }
                  a1[*v4] = 1;
LABEL_2511:
                  uint64_t v1045 = *v4;
                  int v1037 = a1[v1045];
                  if (a1[v1045]) {
                    LOBYTE(v1040) = 0;
                  }
LABEL_2513:
                  if (v1037 || (v1040 & 7) == 4) {
                    break;
                  }
                  if ((PBReaderSkipValueWithTag() & 1) == 0) {
                    goto LABEL_2700;
                  }
                }
                PBReaderRecallMark();
                if (v1037) {
                  goto LABEL_2701;
                }
LABEL_2525:
                PBReaderRecallMark();
              }
              else if (v984 == 1)
              {
                if ((v976 & 7) != 0) {
                  goto LABEL_2701;
                }
                unsigned int v985 = 0;
                while (1)
                {
                  uint64_t v986 = *v2;
                  uint64_t v987 = *(void *)&a1[v986];
                  unint64_t v988 = v987 + 1;
                  if (v987 == -1 || v988 > *(void *)&a1[*v3]) {
                    break;
                  }
                  int v989 = *(char *)(*(void *)&a1[*v5] + v987);
                  *(void *)&a1[v986] = v988;
                  if (v989 < 0)
                  {
                    BOOL v32 = v985++ > 8;
                    if (!v32) {
                      continue;
                    }
                  }
                  goto LABEL_2343;
                }
                a1[*v4] = 1;
              }
              else if ((PBReaderSkipValueWithTag() & 1) == 0)
              {
                goto LABEL_2701;
              }
            }
            int v1048 = a1[*v4];
            PBReaderRecallMark();
            if (v1048) {
              goto LABEL_2702;
            }
            PBReaderRecallMark();
          }
        }
        if ((v956 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_2687;
          }
          goto LABEL_2298;
        }
        if (v962 == 2)
        {
          uint64_t v1119 = 0;
          uint64_t v1120 = 0;
          if (PBReaderPlaceMark())
          {
            if (GEOPDSearchQueryIntentIsValid(a1)) {
              goto LABEL_2533;
            }
          }
        }
LABEL_2687:
        PBReaderRecallMark();
LABEL_2688:
        PBReaderRecallMark();
        return 0;
      case 0x38u:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v1050 = 0;
          unsigned int v1051 = 0;
          uint64_t v1052 = 0;
          while (2)
          {
            uint64_t v1053 = *v2;
            uint64_t v1054 = *(void *)&a1[v1053];
            unint64_t v1055 = v1054 + 1;
            if (v1054 == -1 || v1055 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v1056 = *(unsigned char *)(*(void *)&a1[*v5] + v1054);
              *(void *)&a1[v1053] = v1055;
              v1052 |= (unint64_t)(v1056 & 0x7F) << v1050;
              if (v1056 < 0)
              {
                v1050 += 7;
                BOOL v13 = v1051++ >= 9;
                if (v13)
                {
                  LOBYTE(v1052) = 0;
                  int v105 = a1[*v4];
                  goto LABEL_2549;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v1057 = *v4;
          int v105 = a1[v1057];
          if (a1[v1057]) {
            LOBYTE(v1052) = 0;
          }
LABEL_2549:
          if (v105) {
            BOOL v1058 = 1;
          }
          else {
            BOOL v1058 = (v1052 & 7) == 4;
          }
          if (!v1058)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2687;
            }
            continue;
          }
          goto LABEL_2293;
        }
      case 0x3Au:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v1059 = 0;
          unsigned int v1060 = 0;
          uint64_t v1061 = 0;
          while (2)
          {
            uint64_t v1062 = *v2;
            uint64_t v1063 = *(void *)&a1[v1062];
            unint64_t v1064 = v1063 + 1;
            if (v1063 == -1 || v1064 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v1065 = *(unsigned char *)(*(void *)&a1[*v5] + v1063);
              *(void *)&a1[v1062] = v1064;
              v1061 |= (unint64_t)(v1065 & 0x7F) << v1059;
              if (v1065 < 0)
              {
                v1059 += 7;
                BOOL v13 = v1060++ >= 9;
                if (v13)
                {
                  LOBYTE(v1061) = 0;
                  int v105 = a1[*v4];
                  goto LABEL_2570;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v1066 = *v4;
          int v105 = a1[v1066];
          if (a1[v1066]) {
            LOBYTE(v1061) = 0;
          }
LABEL_2570:
          if (v105) {
            BOOL v1067 = 1;
          }
          else {
            BOOL v1067 = (v1061 & 7) == 4;
          }
          if (!v1067)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2687;
            }
            continue;
          }
          goto LABEL_2293;
        }
      case 0x3Bu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v1068 = 0;
          unsigned int v1069 = 0;
          unint64_t v1070 = 0;
          while (2)
          {
            uint64_t v1071 = *v2;
            uint64_t v1072 = *(void *)&a1[v1071];
            unint64_t v1073 = v1072 + 1;
            if (v1072 == -1 || v1073 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v1074 = *(unsigned char *)(*(void *)&a1[*v5] + v1072);
              *(void *)&a1[v1071] = v1073;
              v1070 |= (unint64_t)(v1074 & 0x7F) << v1068;
              if (v1074 < 0)
              {
                v1068 += 7;
                BOOL v13 = v1069++ >= 9;
                if (v13)
                {
                  unint64_t v1070 = 0;
                  int v1075 = a1[*v4];
                  goto LABEL_2591;
                }
                continue;
              }
            }
            break;
          }
          int v1075 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v1070 = 0;
          }
LABEL_2591:
          int v1076 = v1070 & 7;
          if (v1075) {
            BOOL v1077 = 1;
          }
          else {
            BOOL v1077 = v1076 == 4;
          }
          if (!v1077)
          {
            if ((v1070 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2687;
              }
              continue;
            }
            if (v1076 == 2)
            {
              uint64_t v1117 = 0;
              uint64_t v1118 = 0;
              if (PBReaderPlaceMark())
              {
                if (GEOLocalizedStringIsValid(a1))
                {
                  PBReaderRecallMark();
                  continue;
                }
              }
            }
            goto LABEL_2687;
          }
          break;
        }
LABEL_2602:
        int v1078 = a1[*v4];
        PBReaderRecallMark();
        if (v1078) {
          goto LABEL_2688;
        }
        goto LABEL_2603;
      case 0x3Cu:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1117 = [a1 position];
        uint64_t v1118 = [a1 length];
LABEL_2609:
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v1079 = 0;
          unsigned int v1080 = 0;
          unint64_t v1081 = 0;
          while (2)
          {
            uint64_t v1082 = *v2;
            uint64_t v1083 = *(void *)&a1[v1082];
            unint64_t v1084 = v1083 + 1;
            if (v1083 == -1 || v1084 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v1085 = *(unsigned char *)(*(void *)&a1[*v5] + v1083);
              *(void *)&a1[v1082] = v1084;
              v1081 |= (unint64_t)(v1085 & 0x7F) << v1079;
              if (v1085 < 0)
              {
                v1079 += 7;
                BOOL v13 = v1080++ >= 9;
                if (v13)
                {
                  unint64_t v1081 = 0;
                  int v1086 = a1[*v4];
                  goto LABEL_2621;
                }
                continue;
              }
            }
            break;
          }
          int v1086 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v1081 = 0;
          }
LABEL_2621:
          int v1087 = v1081 & 7;
          if (v1086) {
            BOOL v1088 = 1;
          }
          else {
            BOOL v1088 = v1087 == 4;
          }
          if (!v1088)
          {
            if ((v1081 >> 3) != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_2687;
              }
              continue;
            }
            if (v1087 == 2 && PBReaderPlaceMark())
            {
              uint64_t v1119 = [a1 position];
              uint64_t v1120 = [a1 length];
              while (1)
              {
                while (1)
                {
LABEL_2629:
                  if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                    goto LABEL_2659;
                  }
                  char v1089 = 0;
                  unsigned int v1090 = 0;
                  unint64_t v1091 = 0;
                  while (1)
                  {
                    uint64_t v1092 = *v2;
                    uint64_t v1093 = *(void *)&a1[v1092];
                    unint64_t v1094 = v1093 + 1;
                    if (v1093 == -1 || v1094 > *(void *)&a1[*v3]) {
                      break;
                    }
                    char v1095 = *(unsigned char *)(*(void *)&a1[*v5] + v1093);
                    *(void *)&a1[v1092] = v1094;
                    v1091 |= (unint64_t)(v1095 & 0x7F) << v1089;
                    if ((v1095 & 0x80) == 0) {
                      goto LABEL_2639;
                    }
                    v1089 += 7;
                    BOOL v13 = v1090++ >= 9;
                    if (v13)
                    {
                      unint64_t v1091 = 0;
                      int v1096 = a1[*v4];
                      goto LABEL_2641;
                    }
                  }
                  a1[*v4] = 1;
LABEL_2639:
                  int v1096 = a1[*v4];
                  if (a1[*v4]) {
                    unint64_t v1091 = 0;
                  }
LABEL_2641:
                  if (v1096 || (v1091 & 7) == 4)
                  {
LABEL_2659:
                    int v1103 = a1[*v4];
                    PBReaderRecallMark();
                    if (!v1103)
                    {
                      PBReaderRecallMark();
                      goto LABEL_2609;
                    }
                    goto LABEL_2687;
                  }
                  if ((v1091 >> 3) != 1) {
                    break;
                  }
                  if ((v1091 & 7) != 0) {
                    goto LABEL_2695;
                  }
                  unsigned int v1098 = 0;
                  while (1)
                  {
                    uint64_t v1099 = *v2;
                    uint64_t v1100 = *(void *)&a1[v1099];
                    unint64_t v1101 = v1100 + 1;
                    if (v1100 == -1 || v1101 > *(void *)&a1[*v3]) {
                      break;
                    }
                    int v1102 = *(char *)(*(void *)&a1[*v5] + v1100);
                    *(void *)&a1[v1099] = v1101;
                    if (v1102 < 0)
                    {
                      BOOL v32 = v1098++ > 8;
                      if (!v32) {
                        continue;
                      }
                    }
                    goto LABEL_2629;
                  }
                  a1[*v4] = 1;
                }
                if (!PBReaderSkipValueWithTag())
                {
LABEL_2695:
                  PBReaderRecallMark();
                  goto LABEL_2687;
                }
              }
            }
            goto LABEL_2687;
          }
          break;
        }
        int v1113 = a1[*v4];
        PBReaderRecallMark();
        if (v1113) {
          goto LABEL_2688;
        }
        goto LABEL_2603;
      case 0x3Eu:
        if (v15 != 2) {
          goto LABEL_2688;
        }
        uint64_t v1117 = 0;
        uint64_t v1118 = 0;
        if (!PBReaderPlaceMark()) {
          goto LABEL_2688;
        }
        uint64_t v1119 = [a1 position];
        uint64_t v1120 = [a1 length];
        while (2)
        {
          int v105 = a1[*v4];
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_2293;
          }
          if (a1[*v4]) {
            goto LABEL_2687;
          }
          char v1104 = 0;
          unsigned int v1105 = 0;
          uint64_t v1106 = 0;
          while (2)
          {
            uint64_t v1107 = *v2;
            uint64_t v1108 = *(void *)&a1[v1107];
            unint64_t v1109 = v1108 + 1;
            if (v1108 == -1 || v1109 > *(void *)&a1[*v3])
            {
              a1[*v4] = 1;
            }
            else
            {
              char v1110 = *(unsigned char *)(*(void *)&a1[*v5] + v1108);
              *(void *)&a1[v1107] = v1109;
              v1106 |= (unint64_t)(v1110 & 0x7F) << v1104;
              if (v1110 < 0)
              {
                v1104 += 7;
                BOOL v13 = v1105++ >= 9;
                if (v13)
                {
                  LOBYTE(v1106) = 0;
                  int v105 = a1[*v4];
                  goto LABEL_2676;
                }
                continue;
              }
            }
            break;
          }
          uint64_t v1111 = *v4;
          int v105 = a1[v1111];
          if (a1[v1111]) {
            LOBYTE(v1106) = 0;
          }
LABEL_2676:
          if (v105) {
            BOOL v1112 = 1;
          }
          else {
            BOOL v1112 = (v1106 & 7) == 4;
          }
          if (!v1112)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_2687;
            }
            continue;
          }
          goto LABEL_2293;
        }
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_2688;
        }
        goto LABEL_2604;
    }
  }
}

BOOL GEOPDMapsResultIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
LABEL_153:
    BOOL v67 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v67;
  }
  size_t v5 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (a1[*v4]) {
      goto LABEL_153;
    }
    char v6 = 0;
    unsigned int v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *v2;
      uint64_t v10 = *(void *)&a1[v9];
      unint64_t v11 = v10 + 1;
      if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
        break;
      }
      char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
      *(void *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0) {
        goto LABEL_12;
      }
      v6 += 7;
      BOOL v13 = v7++ >= 9;
      if (v13)
      {
        unint64_t v8 = 0;
        int v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    int v14 = a1[*v4];
    if (a1[*v4]) {
      unint64_t v8 = 0;
    }
LABEL_14:
    int v15 = v8 & 7;
    if (v14 || v15 == 4) {
      goto LABEL_153;
    }
    unint64_t v17 = v8 >> 3;
    switch((v8 >> 3))
    {
      case 1u:
        if ((v8 & 7) != 0) {
          goto LABEL_155;
        }
        unsigned int v18 = 0;
        do
        {
          uint64_t v19 = *v2;
          uint64_t v20 = *(void *)&a1[v19];
          unint64_t v21 = v20 + 1;
          if (v20 == -1 || v21 > *(void *)&a1[*v3])
          {
            a1[*v4] = 1;
            goto LABEL_148;
          }
          int v22 = *(char *)(*(void *)&a1[*v5] + v20);
          *(void *)&a1[v19] = v21;
          if ((v22 & 0x80000000) == 0) {
            break;
          }
          BOOL v23 = v18++ > 8;
        }
        while (!v23);
        goto LABEL_148;
      case 2u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceIsValid(a1)) {
          goto LABEL_155;
        }
        goto LABEL_147;
      case 3u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_155;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
LABEL_63:
        while (2)
        {
          while (2)
          {
            if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
              goto LABEL_142;
            }
            char v34 = 0;
            unsigned int v35 = 0;
            unint64_t v36 = 0;
            while (1)
            {
              uint64_t v37 = *v2;
              uint64_t v38 = *(void *)&a1[v37];
              unint64_t v39 = v38 + 1;
              if (v38 == -1 || v39 > *(void *)&a1[*v3]) {
                break;
              }
              char v40 = *(unsigned char *)(*(void *)&a1[*v5] + v38);
              *(void *)&a1[v37] = v39;
              v36 |= (unint64_t)(v40 & 0x7F) << v34;
              if ((v40 & 0x80) == 0) {
                goto LABEL_73;
              }
              v34 += 7;
              BOOL v13 = v35++ >= 9;
              if (v13)
              {
                unint64_t v36 = 0;
                int v41 = a1[*v4];
                goto LABEL_75;
              }
            }
            a1[*v4] = 1;
LABEL_73:
            int v41 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v36 = 0;
            }
LABEL_75:
            int v42 = v36 & 7;
            if (v41 || v42 == 4) {
              goto LABEL_142;
            }
            unint64_t v44 = v36 >> 3;
            if ((v36 >> 3) == 3)
            {
              if (v42 != 2 || !PBReaderPlaceMark() || !GEOPDComponentIsValid(a1)) {
                goto LABEL_154;
              }
            }
            else
            {
              if (v44 == 2)
              {
                if ((v36 & 7) == 0)
                {
                  unsigned int v45 = 0;
                  do
                  {
                    uint64_t v46 = *v2;
                    uint64_t v47 = *(void *)&a1[v46];
                    unint64_t v48 = v47 + 1;
                    if (v47 == -1 || v48 > *(void *)&a1[*v3])
                    {
                      a1[*v4] = 1;
                      goto LABEL_63;
                    }
                    int v49 = *(char *)(*(void *)&a1[*v5] + v47);
                    *(void *)&a1[v46] = v48;
                    if ((v49 & 0x80000000) == 0) {
                      break;
                    }
                    BOOL v23 = v45++ > 8;
                  }
                  while (!v23);
                  continue;
                }
                goto LABEL_154;
              }
              if (v44 != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_154;
                }
                continue;
              }
              if (v42 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1)) {
                goto LABEL_154;
              }
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 4u:
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_155;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
LABEL_104:
        while (2)
        {
          while (2)
          {
            while (2)
            {
              if (*(void *)&a1[*v2] >= *(void *)&a1[*v3] || a1[*v4]) {
                goto LABEL_142;
              }
              char v50 = 0;
              unsigned int v51 = 0;
              unint64_t v52 = 0;
              while (1)
              {
                uint64_t v53 = *v2;
                uint64_t v54 = *(void *)&a1[v53];
                unint64_t v55 = v54 + 1;
                if (v54 == -1 || v55 > *(void *)&a1[*v3]) {
                  break;
                }
                char v56 = *(unsigned char *)(*(void *)&a1[*v5] + v54);
                *(void *)&a1[v53] = v55;
                v52 |= (unint64_t)(v56 & 0x7F) << v50;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_114;
                }
                v50 += 7;
                BOOL v13 = v51++ >= 9;
                if (v13)
                {
                  unint64_t v52 = 0;
                  int v57 = a1[*v4];
                  goto LABEL_116;
                }
              }
              a1[*v4] = 1;
LABEL_114:
              int v57 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v52 = 0;
              }
LABEL_116:
              int v58 = v52 & 7;
              if (v57 || v58 == 4) {
                goto LABEL_142;
              }
              unint64_t v60 = v52 >> 3;
              if ((v52 >> 3) == 3)
              {
                if (v58 != 2 || !PBReaderPlaceMark() || !GEOPDComponentIsValid(a1)) {
                  goto LABEL_154;
                }
                goto LABEL_130;
              }
              if (v60 == 2)
              {
                if ((v52 & 7) == 0)
                {
                  unsigned int v61 = 0;
                  do
                  {
                    uint64_t v62 = *v2;
                    uint64_t v63 = *(void *)&a1[v62];
                    unint64_t v64 = v63 + 1;
                    if (v63 == -1 || v64 > *(void *)&a1[*v3])
                    {
                      a1[*v4] = 1;
                      goto LABEL_104;
                    }
                    int v65 = *(char *)(*(void *)&a1[*v5] + v63);
                    *(void *)&a1[v62] = v64;
                    if ((v65 & 0x80000000) == 0) {
                      break;
                    }
                    BOOL v23 = v61++ > 8;
                  }
                  while (!v23);
                  continue;
                }
                goto LABEL_154;
              }
              break;
            }
            if (v60 != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_154;
              }
              continue;
            }
            break;
          }
          if (v58 == 2 && PBReaderPlaceMark() && GEOPDMapsIdentifierIsValid(a1))
          {
LABEL_130:
            PBReaderRecallMark();
            continue;
          }
          break;
        }
LABEL_154:
        PBReaderRecallMark();
LABEL_155:
        PBReaderRecallMark();
        return 0;
      default:
        if (v17 == 100)
        {
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceQuestionnaireResultIsValid(a1)) {
            goto LABEL_155;
          }
LABEL_147:
          PBReaderRecallMark();
          goto LABEL_148;
        }
        if (v17 == 101)
        {
          if (v15 != 2 || !PBReaderPlaceMark()) {
            goto LABEL_155;
          }
          objc_msgSend(a1, "position", 0, 0);
          [a1 length];
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
          {
            char v24 = 0;
            unsigned int v25 = 0;
            unint64_t v26 = 0;
            while (1)
            {
              uint64_t v27 = *v2;
              uint64_t v28 = *(void *)&a1[v27];
              unint64_t v29 = v28 + 1;
              if (v28 == -1 || v29 > *(void *)&a1[*v3]) {
                break;
              }
              char v30 = *(unsigned char *)(*(void *)&a1[*v5] + v28);
              *(void *)&a1[v27] = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if ((v30 & 0x80) == 0) {
                goto LABEL_42;
              }
              v24 += 7;
              BOOL v13 = v25++ >= 9;
              if (v13)
              {
                unint64_t v26 = 0;
                int v31 = a1[*v4];
                goto LABEL_44;
              }
            }
            a1[*v4] = 1;
LABEL_42:
            int v31 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v26 = 0;
            }
LABEL_44:
            int v32 = v26 & 7;
            if (v31 || v32 == 4) {
              break;
            }
            if ((v26 >> 3) == 2 || (v26 >> 3) == 1)
            {
              if (v32 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceIsValid(a1)) {
                goto LABEL_154;
              }
              PBReaderRecallMark();
            }
            else if ((PBReaderSkipValueWithTag() & 1) == 0)
            {
              goto LABEL_154;
            }
          }
LABEL_142:
          int v66 = a1[*v4];
          PBReaderRecallMark();
          if (v66) {
            goto LABEL_155;
          }
          goto LABEL_147;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_155;
        }
LABEL_148:
        if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
          goto LABEL_153;
        }
        continue;
    }
  }
}

void sub_188F7BC24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F7BCF0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDBoundsIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    size_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        BOOL v13 = v7++ >= 9;
        if (v13)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
        case 2u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOMapRegionIsValid(a1)) {
            goto LABEL_97;
          }
          goto LABEL_90;
        case 3u:
        case 4u:
          if (v16 != 5) {
            goto LABEL_97;
          }
          uint64_t v18 = *v2;
          unint64_t v19 = *(void *)&a1[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFFBLL && (unint64_t v20 = v19 + 4, v20 <= *(void *)&a1[*v3])) {
            *(void *)&a1[v18] = v20;
          }
          else {
            a1[v14] = 1;
          }
          continue;
        case 5u:
          if (v16 != 2 || !PBReaderPlaceMark()) {
            goto LABEL_97;
          }
          objc_msgSend(a1, "position", 0, 0);
          [a1 length];
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_97;
          }
          continue;
      }
      while (2)
      {
        if (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v21 = 0;
          unsigned int v22 = 0;
          unint64_t v23 = 0;
          while (1)
          {
            uint64_t v24 = *v2;
            uint64_t v25 = *(void *)&a1[v24];
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
              break;
            }
            char v27 = *(unsigned char *)(*(void *)&a1[*v5] + v25);
            *(void *)&a1[v24] = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if ((v27 & 0x80) == 0) {
              goto LABEL_42;
            }
            v21 += 7;
            BOOL v13 = v22++ >= 9;
            if (v13)
            {
              unint64_t v23 = 0;
              uint64_t v28 = *v4;
              int v29 = a1[v28];
              goto LABEL_44;
            }
          }
          a1[*v4] = 1;
LABEL_42:
          uint64_t v28 = *v4;
          int v29 = a1[v28];
          if (a1[v28]) {
            unint64_t v23 = 0;
          }
LABEL_44:
          int v30 = v23 & 7;
          if (!v29 && v30 != 4)
          {
            switch((v23 >> 3))
            {
              case 1u:
                if (v30 != 2 || !PBReaderPlaceMark() || !GEOPDGeographicCoordinateIsValid(a1)) {
                  goto LABEL_96;
                }
                goto LABEL_87;
              case 2u:
              case 3u:
              case 4u:
                if (v30 != 5) {
                  goto LABEL_96;
                }
                uint64_t v32 = *v2;
                unint64_t v33 = *(void *)&a1[v32];
                if (v33 <= 0xFFFFFFFFFFFFFFFBLL && (unint64_t v34 = v33 + 4, v34 <= *(void *)&a1[*v3])) {
                  *(void *)&a1[v32] = v34;
                }
                else {
                  a1[v28] = 1;
                }
                continue;
              case 5u:
                if (v30 != 2 || !PBReaderPlaceMark()) {
                  goto LABEL_96;
                }
                [a1 position];
                [a1 length];
                break;
              default:
                if (PBReaderSkipValueWithTag()) {
                  continue;
                }
                goto LABEL_96;
            }
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
            {
              char v35 = 0;
              unsigned int v36 = 0;
              unint64_t v37 = 0;
              while (1)
              {
                uint64_t v38 = *v2;
                uint64_t v39 = *(void *)&a1[v38];
                unint64_t v40 = v39 + 1;
                if (v39 == -1 || v40 > *(void *)&a1[*v3]) {
                  break;
                }
                char v41 = *(unsigned char *)(*(void *)&a1[*v5] + v39);
                *(void *)&a1[v38] = v40;
                v37 |= (unint64_t)(v41 & 0x7F) << v35;
                if ((v41 & 0x80) == 0) {
                  goto LABEL_72;
                }
                v35 += 7;
                BOOL v13 = v36++ >= 9;
                if (v13)
                {
                  unint64_t v37 = 0;
                  int v42 = a1[*v4];
                  goto LABEL_74;
                }
              }
              a1[*v4] = 1;
LABEL_72:
              int v42 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v37 = 0;
              }
LABEL_74:
              int v43 = v37 & 7;
              if (v42 || v43 == 4) {
                break;
              }
              if ((v37 >> 3) == 2 || (v37 >> 3) == 1)
              {
                if (v43 != 2 || !PBReaderPlaceMark() || !GEOPDGeographicCoordinateIsValid(a1))
                {
LABEL_95:
                  PBReaderRecallMark();
                  goto LABEL_96;
                }
                PBReaderRecallMark();
              }
              else if ((PBReaderSkipValueWithTag() & 1) == 0)
              {
                goto LABEL_95;
              }
            }
            int v45 = a1[*v4];
            PBReaderRecallMark();
            if (!v45)
            {
LABEL_87:
              PBReaderRecallMark();
              continue;
            }
LABEL_96:
            PBReaderRecallMark();
LABEL_97:
            PBReaderRecallMark();
            return 0;
          }
        }
        break;
      }
      int v46 = a1[*v4];
      PBReaderRecallMark();
      if (v46) {
        goto LABEL_97;
      }
LABEL_90:
      PBReaderRecallMark();
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v47 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v47;
}

BOOL GEOMapRegionIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    size_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 5u:
        case 6u:
        case 7u:
        case 8u:
          if (v16 != 1) {
            goto LABEL_42;
          }
          uint64_t v18 = *v2;
          unint64_t v19 = *(void *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_38;
          }
          unint64_t v20 = v19 + 8;
          if (v20 > *(void *)&a1[*v3]) {
            goto LABEL_38;
          }
          *(void *)&a1[v18] = v20;
          continue;
        case 9u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1)) {
            goto LABEL_42;
          }
          PBReaderRecallMark();
          continue;
        case 0xAu:
          if ((v8 & 7) != 0) {
            goto LABEL_42;
          }
          unsigned int v21 = 0;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
LABEL_42:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        uint64_t v22 = *v2;
        uint64_t v23 = *(void *)&a1[v22];
        unint64_t v24 = v23 + 1;
        if (v23 == -1 || v24 > *(void *)&a1[*v3]) {
          break;
        }
        int v25 = *(char *)(*(void *)&a1[*v5] + v23);
        *(void *)&a1[v22] = v24;
        if (v25 < 0 && v21++ <= 8) {
          continue;
        }
        goto LABEL_39;
      }
      uint64_t v14 = *v4;
LABEL_38:
      a1[v14] = 1;
LABEL_39:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v27 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v27;
}

id GEOCalculateChangedKeys(void *a1, void *a2, void *a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  char v41 = v6;
  int v42 = v5;
  unint64_t v40 = v7;
  if ([v7 length])
  {
    id v8 = (id)[v5 mutableCopy];
    [v8 setObject:0 forKeyedSubscript:@"CountryProviders"];
    uint64_t v9 = [v5 objectForKeyedSubscript:@"CountryProviders"];
    uint64_t v10 = [v9 objectForKeyedSubscript:v7];

    [v8 addEntriesFromDictionary:v10];
    id v11 = (id)[v6 mutableCopy];
    [v11 setObject:0 forKeyedSubscript:@"CountryProviders"];
    char v12 = [v6 objectForKeyedSubscript:@"CountryProviders"];
    BOOL v13 = [v12 objectForKeyedSubscript:v7];

    [v11 addEntriesFromDictionary:v13];
  }
  else
  {
    id v8 = v5;
    id v11 = v6;
  }
  uint64_t v14 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v15 = [v8 allKeys];
  int v16 = (void *)v15;
  uint64_t v17 = MEMORY[0x1E4F1CBF0];
  if (v15) {
    uint64_t v18 = v15;
  }
  else {
    uint64_t v18 = MEMORY[0x1E4F1CBF0];
  }
  unint64_t v19 = [v14 setWithArray:v18];

  unint64_t v20 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v21 = [v11 allKeys];
  uint64_t v22 = (void *)v21;
  if (v21) {
    uint64_t v23 = v21;
  }
  else {
    uint64_t v23 = v17;
  }
  unint64_t v24 = [v20 setWithArray:v23];

  int v25 = objc_msgSend(MEMORY[0x1E4F1CA80], "setWithCapacity:", objc_msgSend(v24, "count"));
  unint64_t v26 = (void *)[v19 mutableCopy];
  [v26 minusSet:v24];
  [v25 unionSet:v26];

  BOOL v27 = (void *)[v24 mutableCopy];
  [v27 minusSet:v19];
  [v25 unionSet:v27];

  uint64_t v38 = v24;
  uint64_t v28 = (void *)[v24 mutableCopy];
  uint64_t v39 = v19;
  [v28 intersectSet:v19];
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id v29 = v28;
  uint64_t v30 = [v29 countByEnumeratingWithState:&v43 objects:v47 count:16];
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = *(void *)v44;
    do
    {
      for (uint64_t i = 0; i != v31; ++i)
      {
        if (*(void *)v44 != v32) {
          objc_enumerationMutation(v29);
        }
        uint64_t v34 = *(void *)(*((void *)&v43 + 1) + 8 * i);
        char v35 = [v8 objectForKeyedSubscript:v34];
        unsigned int v36 = [v11 objectForKeyedSubscript:v34];
        if (([v35 isEqual:v36] & 1) == 0) {
          [v25 addObject:v34];
        }
      }
      uint64_t v31 = [v29 countByEnumeratingWithState:&v43 objects:v47 count:16];
    }
    while (v31);
  }

  return v25;
}

void sub_188F7D494(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceCollectionItemReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 96));
  id v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 92);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 88)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = ((*(unsigned __int16 *)(a1 + 104) >> 2) & 1)
      + ((*(unsigned __int16 *)(a1 + 104) >> 3) & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 104)), (uint16x4_t)0xFFF6FFFAFFF9FFF8), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 104) >> 9) & 1)+ ((*(_WORD *)(a1 + 104) >> 4) & 1)+ ((*(_WORD *)(a1 + 104) >> 5) & 1));
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 5;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v70 = v17;
        char v71 = v18 | v17;
        char v69 = v8;
        if ((v18 | v8)) {
          unint64_t v19 = 0;
        }
        else {
          unint64_t v19 = a3;
        }
        unint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        char v72 = (v19 == 0) | v18;
        BOOL v73 = v18;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_122;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      BOOL v30 = v24++ >= 9;
      if (v30)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_122:
      int v68 = 1;
      goto LABEL_123;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v73;
    if ((v72 & 1) == 0)
    {
      char v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34) {
          goto LABEL_102;
        }
        if ((*(_WORD *)(a1 + 104) & 0x80) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_144;
          }
          uint64_t v39 = objc_alloc_init(GEOPDMapsIdentifier);
          if (GEOPDMapsIdentifierReadAllFrom((uint64_t)v39, (void *)v3))
          {
            PBReaderRecallMark();
            uint64_t v40 = 56;
            goto LABEL_92;
          }
          goto LABEL_143;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_144;
        }
        __int16 v63 = *(_WORD *)(a1 + 104) << 8;
        goto LABEL_119;
      case 2:
        if (!v34 || (*(_WORD *)(a1 + 104) & 0x100) != 0) {
          goto LABEL_102;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_144;
        }
        uint64_t v39 = objc_alloc_init(GEOPDCaptionedPhoto);
        if (!GEOPDCaptionedPhotoReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1)) {
          goto LABEL_143;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollectionItem _addNoFlagsPhoto:](a1, v39);
        goto LABEL_86;
      case 3:
        if (!v34 || (*(_WORD *)(a1 + 104) & 0x40) != 0) {
          goto LABEL_102;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_144;
        }
        uint64_t v39 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1)) {
          goto LABEL_143;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollectionItem _addNoFlagsItemDescription:](a1, v39);
        goto LABEL_86;
      case 4:
        if (!v34) {
          goto LABEL_102;
        }
        if ((*(_WORD *)(a1 + 104) & 0x400) == 0)
        {
          uint64_t v44 = PBReaderReadString();
          long long v45 = *(void **)(a1 + 80);
          *(void *)(a1 + 80) = v44;
          goto LABEL_93;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_144;
        }
        __int16 v63 = 32 * *(_WORD *)(a1 + 104);
        goto LABEL_119;
      case 5:
        if ((v69 & 1) == 0) {
          goto LABEL_102;
        }
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        *(_WORD *)(a1 + 104) |= 2u;
        while (2)
        {
          uint64_t v49 = *v20;
          uint64_t v50 = *(void *)(v3 + v49);
          unint64_t v51 = v50 + 1;
          if (v50 == -1 || v51 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v52 = *(unsigned char *)(*(void *)(v3 + *v22) + v50);
            *(void *)(v3 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              BOOL v30 = v47++ >= 9;
              if (v30)
              {
                uint64_t v48 = 0;
                goto LABEL_107;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v48 = 0;
        }
LABEL_107:
        BOOL v61 = v48 != 0;
        uint64_t v62 = 101;
        goto LABEL_112;
      case 6:
        if (!v34 || (*(_WORD *)(a1 + 104) & 0x200) != 0) {
          goto LABEL_102;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_144;
        }
        uint64_t v39 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1)) {
          goto LABEL_143;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollectionItem _addNoFlagsPunchOutText:](a1, v39);
        goto LABEL_86;
      case 7:
        if (!v34 || (*(_WORD *)(a1 + 104) & 0x10) != 0) {
          goto LABEL_102;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_144;
        }
        uint64_t v39 = objc_alloc_init(GEOLocalizedBytes);
        if (!GEOLocalizedBytesReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1)) {
          goto LABEL_143;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollectionItem _addNoFlagsItemDescriptionBytes:](a1, v39);
        goto LABEL_86;
      case 8:
        if (!v34 || (*(_WORD *)(a1 + 104) & 0x20) != 0) {
          goto LABEL_102;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_144;
        }
        uint64_t v39 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1)) {
          goto LABEL_143;
        }
        PBReaderRecallMark();
        -[GEOPDPlaceCollectionItem _addNoFlagsItemDescriptionHtml:](a1, v39);
LABEL_86:

        goto LABEL_120;
      case 9:
        if (!v34) {
          goto LABEL_102;
        }
        if ((*(_WORD *)(a1 + 104) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_144;
          }
          __int16 v63 = *(_WORD *)(a1 + 104) << 12;
LABEL_119:
          v7 += v63 >> 15;
          goto LABEL_120;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_144;
        }
        uint64_t v39 = objc_alloc_init(GEOPDQuickLinkItem);
        if (GEOPDQuickLinkItemReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          uint64_t v40 = 24;
LABEL_92:
          long long v45 = *(void **)(a1 + v40);
          *(void *)(a1 + v40) = v39;
LABEL_93:

          --v7;
LABEL_120:
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
LABEL_121:
          if (!(v71 & 1 | (v7 != 0))) {
            goto LABEL_122;
          }
          continue;
        }
LABEL_143:

LABEL_144:
        int v68 = 0;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_123:
        if (v70) {
LABEL_124:
        }
          *(_WORD *)(a1 + 104) |= 4u;
        if (v73 || (v68 & 1) == 0)
        {
          *(_WORD *)(a1 + 104) |= 0x80u;
          *(_WORD *)(a1 + 104) |= 0x100u;
          *(_WORD *)(a1 + 104) |= 0x40u;
          *(_WORD *)(a1 + 104) |= 0x400u;
          *(_WORD *)(a1 + 104) |= 0x200u;
          *(_WORD *)(a1 + 104) |= 0x10u;
          *(_WORD *)(a1 + 104) |= 0x20u;
          *(_WORD *)(a1 + 104) |= 8u;
        }
        else if (v19)
        {
          while (1)
          {
            int v64 = *v19++;
            __int16 v65 = 128;
            switch(v64)
            {
              case 0:
                goto LABEL_137;
              case 1:
                goto LABEL_136;
              case 2:
                __int16 v65 = 256;
                goto LABEL_136;
              case 3:
                __int16 v65 = 64;
                goto LABEL_136;
              case 4:
                __int16 v65 = 1024;
                goto LABEL_136;
              case 6:
                __int16 v65 = 512;
                goto LABEL_136;
              case 7:
                __int16 v65 = 16;
                goto LABEL_136;
              case 8:
                __int16 v65 = 32;
                goto LABEL_136;
              case 9:
                __int16 v65 = 8;
LABEL_136:
                *(_WORD *)(a1 + 104) |= v65;
                break;
              default:
                continue;
            }
          }
        }
LABEL_137:
        if (v68) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v73)
        {
          int v66 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 10:
        if ((v69 & 1) == 0) {
          goto LABEL_102;
        }
        char v53 = 0;
        unsigned int v54 = 0;
        uint64_t v55 = 0;
        *(_WORD *)(a1 + 104) |= 1u;
        while (2)
        {
          uint64_t v56 = *v20;
          uint64_t v57 = *(void *)(v3 + v56);
          unint64_t v58 = v57 + 1;
          if (v57 == -1 || v58 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v21) = 1;
          }
          else
          {
            char v59 = *(unsigned char *)(*(void *)(v3 + *v22) + v57);
            *(void *)(v3 + v56) = v58;
            v55 |= (unint64_t)(v59 & 0x7F) << v53;
            if (v59 < 0)
            {
              v53 += 7;
              BOOL v30 = v54++ >= 9;
              if (v30)
              {
                uint64_t v55 = 0;
                goto LABEL_111;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v21)) {
          uint64_t v55 = 0;
        }
LABEL_111:
        BOOL v61 = v55 != 0;
        uint64_t v62 = 100;
LABEL_112:
        *(unsigned char *)(a1 + v62) = v61;
        goto LABEL_121;
      default:
        if ((v70 & 1) == 0 || (*(_WORD *)(a1 + 104) & 4) != 0)
        {
LABEL_102:
          char v60 = PBReaderSkipValueWithTag();
          uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v60 & 1) == 0)
          {
            int v68 = 0;
            goto LABEL_123;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int v42 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v41;
          }
          int v43 = PBUnknownFieldAdd();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
          if (!v43)
          {
            int v68 = 0;
            goto LABEL_124;
          }
        }
        goto LABEL_121;
    }
  }
}

void GEOPDTransitNearbyPaymentMethodLookupOriginClearSensitiveFields(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 && a3)
  {
    id v5 = *(void **)(a1 + 16);
    if (v5)
    {
      id v6 = v5;
      unsigned int v7 = GEOWaypointTypedHasSensitiveFields(v6);

      if (v7)
      {
        id v8 = *(id *)(a1 + 16);
        id v11 = (id)[v8 copy];

        uint64_t v9 = [v11 waypointLocation];
        [v9 clearSensitiveFields:a2];

        -[GEOPDTransitNearbyPaymentMethodLookupOrigin setWaypointTyped:](a1, v11);
        goto LABEL_9;
      }
    }
  }
  else if (!a1)
  {
    id v10 = 0;
    goto LABEL_8;
  }
  id v10 = *(id *)(a1 + 16);
LABEL_8:
  id v11 = v10;
  [v10 clearSensitiveFields:a2];
LABEL_9:
}

void GEOETARequestRemoveFieldsForSendingRequest(void *a1)
{
  id v1 = a1;
  if (GEOETARequestHasSensitiveFields((uint64_t)v1)) {
    [v1 clearSensitiveFields:0];
  }
}

void GEOETARequestClearSensitiveFields(id *a1, uint64_t a2, int a3)
{
  if (a3
    && [a1 hasOrigin]
    && ([a1 origin],
        id v6 = objc_claimAutoreleasedReturnValue(),
        int HasSensitiveFields = GEOWaypointHasSensitiveFields(v6),
        v6,
        HasSensitiveFields))
  {
    id v8 = [a1 origin];
    uint64_t v9 = (void *)[v8 copy];

    GEOWaypointClearSensitiveFields(v9, a2, 0);
    [a1 setOrigin:v9];
  }
  else
  {
    uint64_t v9 = [a1 origin];
    [v9 clearSensitiveFields:a2];
  }

  -[GEOETARequest _readDestinations]((uint64_t)a1);
  if ([a1[15] count])
  {
    unint64_t v10 = 0;
    do
    {
      id v11 = [a1[15] objectAtIndexedSubscript:v10];
      unsigned int v12 = v11;
      if (a3 && GEOWaypointHasSensitiveFields(v11))
      {
        uint64_t v13 = (void *)[v12 copy];
        GEOWaypointClearSensitiveFields(v13, a2, 0);
        [a1[15] replaceObjectAtIndex:v10 withObject:v13];
      }
      else
      {
        [v12 clearSensitiveFields:a2];
      }

      ++v10;
    }
    while (v10 < [a1[15] count]);
  }
  if ((a3 & 1) != 0
    && [a1 hasOriginWaypointTyped]
    && ([a1 originWaypointTyped],
        uint64_t v14 = objc_claimAutoreleasedReturnValue(),
        unsigned int v15 = GEOWaypointTypedHasSensitiveFields(v14),
        v14,
        v15))
  {
    BOOL v16 = [a1 originWaypointTyped];
    char v17 = (void *)[v16 copy];

    unsigned __int8 v18 = [v17 waypointLocation];
    [v18 clearSensitiveFields:a2];

    [a1 setOriginWaypointTyped:v17];
  }
  else
  {
    char v17 = [a1 originWaypointTyped];
    [v17 clearSensitiveFields:a2];
  }

  -[GEOETARequest _readDestinationWaypointTypeds]((uint64_t)a1);
  if ([a1[14] count])
  {
    unint64_t v19 = 0;
    do
    {
      unint64_t v20 = [a1[14] objectAtIndexedSubscript:v19];
      uint64_t v21 = v20;
      if (a3 && GEOWaypointTypedHasSensitiveFields(v20))
      {
        uint64_t v22 = (void *)[v21 copy];
        char v23 = [v22 waypointLocation];
        [v23 clearSensitiveFields:a2];

        [a1[14] replaceObjectAtIndex:v19 withObject:v22];
      }
      else
      {
        [v21 clearSensitiveFields:a2];
      }

      ++v19;
    }
    while (v19 < [a1[14] count]);
  }
  -[GEOETARequest _readIntermediateWaypointTypeds]((uint64_t)a1);
  if ([a1[17] count])
  {
    unint64_t v24 = 0;
    do
    {
      unint64_t v25 = [a1[17] objectAtIndexedSubscript:v24];
      uint64_t v26 = v25;
      if (a3 && GEOWaypointTypedHasSensitiveFields(v25))
      {
        uint64_t v27 = (void *)[v26 copy];
        unint64_t v28 = [v27 waypointLocation];
        [v28 clearSensitiveFields:a2];

        [a1[17] replaceObjectAtIndex:v24 withObject:v27];
      }
      else
      {
        [v26 clearSensitiveFields:a2];
      }

      ++v24;
    }
    while (v24 < [a1[17] count]);
  }
  -[GEOETARequest _readDeviceHistoricalLocations]((uint64_t)a1);
  if ([a1[16] count])
  {
    unint64_t v29 = 0;
    do
    {
      uint64_t v30 = [a1[16] objectAtIndexedSubscript:v29];
      int v31 = (void *)v30;
      if (a3 && GEOLocationHasSensitiveFields(v30))
      {
        uint64_t v32 = (_DWORD *)[v31 copy];
        GEOLocationClearSensitiveFields(v32);
        [a1[16] replaceObjectAtIndex:v29 withObject:v32];
      }
      else
      {
        [v31 clearSensitiveFields:a2];
      }

      ++v29;
    }
    while (v29 < [a1[16] count]);
  }
  if ((a3 & 1) != 0
    && [a1 hasLastKnownRoadLocation]
    && ([a1 lastKnownRoadLocation],
        unint64_t v33 = objc_claimAutoreleasedReturnValue(),
        int v34 = GEOLocationHasSensitiveFields((uint64_t)v33),
        v33,
        v34))
  {
    char v35 = [a1 lastKnownRoadLocation];
    int v36 = (_DWORD *)[v35 copy];

    GEOLocationClearSensitiveFields(v36);
    [a1 setLastKnownRoadLocation:v36];
  }
  else
  {
    int v36 = [a1 lastKnownRoadLocation];
    [v36 clearSensitiveFields:a2];
  }
}

void *GEOWaypointTypedHasSensitiveFields(void *result)
{
  if (result)
  {
    id v1 = [result waypointLocation];
    uint64_t v2 = GEOWaypointLocationHasSensitiveFields(v1);

    return v2;
  }
  return result;
}

void sub_188F7EF2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *GEOWaypointLocationHasSensitiveFields(void *result)
{
  if (result)
  {
    id v1 = [result location];
    uint64_t HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v1);

    return (void *)HasSensitiveFields;
  }
  return result;
}

void sub_188F7F094(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void GEOWaypointTypedClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  if (a3
    && [a1 hasWaypointLocation]
    && ([a1 waypointLocation],
        id v5 = objc_claimAutoreleasedReturnValue(),
        unsigned int v6 = GEOWaypointLocationHasSensitiveFields(v5),
        v5,
        v6))
  {
    unsigned int v7 = [a1 waypointLocation];
    id v9 = (id)[v7 copy];

    id v8 = [v9 location];
    [v8 clearSensitiveFields:a2];

    [a1 setWaypointLocation:v9];
  }
  else
  {
    id v9 = [a1 waypointLocation];
    [v9 clearSensitiveFields:a2];
  }
}

void GEOWaypointLocationClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  if (a3
    && [a1 hasLocation]
    && ([a1 location],
        id v5 = objc_claimAutoreleasedReturnValue(),
        int HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v5),
        v5,
        HasSensitiveFields))
  {
    unsigned int v7 = [a1 location];
    id v8 = (_DWORD *)[v7 copy];

    GEOLocationClearSensitiveFields(v8);
    [a1 setLocation:v8];
  }
  else
  {
    id v8 = [a1 location];
    [v8 clearSensitiveFields:a2];
  }
}

uint64_t GEOETARequestHasSensitiveFields(uint64_t result)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    id v1 = (void *)result;
    uint64_t v2 = [(id)result origin];
    if (GEOWaypointHasSensitiveFields(v2))
    {
LABEL_5:

      return 1;
    }
    unint64_t v3 = [v1 originWaypointTyped];
    if (GEOWaypointTypedHasSensitiveFields(v3))
    {

      goto LABEL_5;
    }
    int v4 = [v1 lastKnownRoadLocation];
    char HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v4);

    if (HasSensitiveFields) {
      return 1;
    }
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    uint64_t v2 = [v1 destinations];
    uint64_t v6 = [v2 countByEnumeratingWithState:&v35 objects:v42 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v36;
LABEL_11:
      uint64_t v9 = 0;
      while (1)
      {
        if (*(void *)v36 != v8) {
          objc_enumerationMutation(v2);
        }
        if (GEOWaypointHasSensitiveFields(*(void **)(*((void *)&v35 + 1) + 8 * v9))) {
          goto LABEL_5;
        }
        if (v7 == ++v9)
        {
          uint64_t v7 = [v2 countByEnumeratingWithState:&v35 objects:v42 count:16];
          if (v7) {
            goto LABEL_11;
          }
          break;
        }
      }
    }

    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    uint64_t v2 = [v1 destinationWaypointTypeds];
    uint64_t v10 = [v2 countByEnumeratingWithState:&v31 objects:v41 count:16];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)v32;
LABEL_19:
      uint64_t v13 = 0;
      while (1)
      {
        if (*(void *)v32 != v12) {
          objc_enumerationMutation(v2);
        }
        if (GEOWaypointTypedHasSensitiveFields(*(void **)(*((void *)&v31 + 1) + 8 * v13))) {
          goto LABEL_5;
        }
        if (v11 == ++v13)
        {
          uint64_t v11 = [v2 countByEnumeratingWithState:&v31 objects:v41 count:16];
          if (v11) {
            goto LABEL_19;
          }
          break;
        }
      }
    }

    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    uint64_t v2 = [v1 intermediateWaypointTypeds];
    uint64_t v14 = [v2 countByEnumeratingWithState:&v27 objects:v40 count:16];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v28;
LABEL_27:
      uint64_t v17 = 0;
      while (1)
      {
        if (*(void *)v28 != v16) {
          objc_enumerationMutation(v2);
        }
        if (GEOWaypointTypedHasSensitiveFields(*(void **)(*((void *)&v27 + 1) + 8 * v17))) {
          goto LABEL_5;
        }
        if (v15 == ++v17)
        {
          uint64_t v15 = [v2 countByEnumeratingWithState:&v27 objects:v40 count:16];
          if (v15) {
            goto LABEL_27;
          }
          break;
        }
      }
    }

    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    unsigned __int8 v18 = objc_msgSend(v1, "deviceHistoricalLocations", 0);
    uint64_t v19 = [v18 countByEnumeratingWithState:&v23 objects:v39 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)v24;
      while (2)
      {
        uint64_t v22 = 0;
        do
        {
          if (*(void *)v24 != v21) {
            objc_enumerationMutation(v18);
          }
          if (GEOLocationHasSensitiveFields(*(void *)(*((void *)&v23 + 1) + 8 * v22)))
          {

            return 1;
          }
          ++v22;
        }
        while (v20 != v22);
        uint64_t v20 = [v18 countByEnumeratingWithState:&v23 objects:v39 count:16];
        if (v20) {
          continue;
        }
        break;
      }
    }

    return 0;
  }
  return result;
}

void sub_188F7F6A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOWaypointHasSensitiveFields(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = [a1 placeSearchRequest];
  if (GEOPlaceSearchRequestHasSensitiveFields(v2))
  {
    uint64_t HasSensitiveFields = 1;
  }
  else
  {
    int v4 = [a1 location];
    uint64_t HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v4);
  }
  return HasSensitiveFields;
}

void sub_188F7FA28(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F7FCCC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F7FE90(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F7FF60(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F80030(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F80100(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F803D0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F8049C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOWaypointTypedIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  unsigned int v2 = *(unsigned __int16 *)(a1 + 96);
  if ((v2 & 0x1000) != 0) {
    return 1;
  }
  if ((v2 & 0x100) != 0)
  {
    if (GEOWaypointIDIsDirty(*(void *)(a1 + 32))) {
      return 1;
    }
    unsigned int v2 = *(unsigned __int16 *)(a1 + 96);
  }
  if ((v2 & 0x800) == 0) {
    goto LABEL_8;
  }
  if (GEOWaypointPlaceIsDirty(*(void *)(a1 + 56))) {
    return 1;
  }
  unsigned int v2 = *(unsigned __int16 *)(a1 + 96);
LABEL_8:
  if ((v2 & 0x600) != 0) {
    return 1;
  }
  return (v2 >> 7) & 1;
}

void sub_188F806C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F807B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F808BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F80BA8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void GEOConfigSetBOOL(int a1, uint64_t a2)
{
  objc_msgSend(NSNumber, "numberWithBool:");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 0);
}

void sub_188F80F64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_188F81228(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F82394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_188F82598(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F82670(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void geo::codec::VectorTile::~VectorTile(geo::codec::VectorTile *this, GeoCodecsCurveVertexPool *a2)
{
  unsigned int v2 = this;
  if (*((void *)this + 17))
  {
    uint64_t v3 = geo::codec::Allocator::instance(this);
    this = (geo::codec::VectorTile *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v3 + 40))(v3, *((void *)v2 + 17), 0);
  }
  if (*((void *)v2 + 32))
  {
    uint64_t v4 = geo::codec::Allocator::instance(this);
    this = (geo::codec::VectorTile *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v4 + 40))(v4, *((void *)v2 + 32), 0);
  }
  if (*((void *)v2 + 34))
  {
    uint64_t v5 = geo::codec::Allocator::instance(this);
    this = (geo::codec::VectorTile *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v5 + 40))(v5, *((void *)v2 + 34), 0);
  }
  if (*((void *)v2 + 83))
  {
    uint64_t v6 = geo::codec::Allocator::instance(this);
    this = (geo::codec::VectorTile *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v6 + 40))(v6, *((void *)v2 + 83), 0);
  }
  if (*((void *)v2 + 86))
  {
    uint64_t v7 = geo::codec::Allocator::instance(this);
    this = (geo::codec::VectorTile *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v7 + 40))(v7, *((void *)v2 + 86), 0);
  }
  if (*((void *)v2 + 89))
  {
    uint64_t v8 = geo::codec::Allocator::instance(this);
    this = (geo::codec::VectorTile *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v8 + 40))(v8, *((void *)v2 + 89), 0);
  }
  if (*((void *)v2 + 91))
  {
    uint64_t v9 = geo::codec::Allocator::instance(this);
    this = (geo::codec::VectorTile *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v9 + 40))(v9, *((void *)v2 + 91), 0);
  }
  if (*((void *)v2 + 94))
  {
    uint64_t v10 = geo::codec::Allocator::instance(this);
    (*(void (**)(uint64_t, void, void))(*(void *)v10 + 40))(v10, *((void *)v2 + 94), 0);
  }
  uint64_t v11 = geo::codec::CurveVertexPoolDealloc(*((geo::codec::Allocator **)v2 + 96), a2);
  if (*((void *)v2 + 97))
  {
    uint64_t v13 = geo::codec::Allocator::instance(v11);
    (*(void (**)(uint64_t, void, void))(*(void *)v13 + 40))(v13, *((void *)v2 + 97), 0);
  }
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 99), v12);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 100), v14);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 101), v15);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 102), v16);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 103), v17);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 104), v18);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 105), v19);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 440), v20);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 382), v21);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 396), v22);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 410), v23);
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 424), v24);
  long long v26 = geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 461), v25);
  if (*((void *)v2 + 111))
  {
    unint64_t v28 = *((void *)v2 + 112);
    if (v28)
    {
      unint64_t v29 = 0;
      uint64_t v30 = 16;
      do
      {
        long long v26 = *(geo::codec::Allocator **)(*((void *)v2 + 111) + v30);
        if (v26)
        {
          free(v26);
          unint64_t v28 = *((void *)v2 + 112);
        }
        ++v29;
        v30 += 24;
      }
      while (v29 < v28);
    }
    uint64_t v31 = geo::codec::Allocator::instance(v26);
    long long v26 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v31 + 40))(v31, *((void *)v2 + 111), 0);
  }
  if (*((void *)v2 + 131))
  {
    uint64_t v32 = geo::codec::Allocator::instance(v26);
    long long v26 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v32 + 40))(v32, *((void *)v2 + 131), 0);
  }
  if (*((void *)v2 + 133))
  {
    uint64_t v33 = geo::codec::Allocator::instance(v26);
    long long v26 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v33 + 40))(v33, *((void *)v2 + 133), 0);
  }
  if (*((void *)v2 + 150))
  {
    uint64_t v34 = geo::codec::Allocator::instance(v26);
    long long v26 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v34 + 40))(v34, *((void *)v2 + 150), 0);
  }
  if (*((void *)v2 + 152))
  {
    uint64_t v35 = geo::codec::Allocator::instance(v26);
    long long v26 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v35 + 40))(v35, *((void *)v2 + 152), 0);
  }
  if (*((void *)v2 + 154))
  {
    uint64_t v36 = geo::codec::Allocator::instance(v26);
    long long v26 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v36 + 40))(v36, *((void *)v2 + 154), 0);
  }
  if (*((void *)v2 + 156))
  {
    uint64_t v37 = geo::codec::Allocator::instance(v26);
    long long v26 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v37 + 40))(v37, *((void *)v2 + 156), 0);
  }
  if (*((void *)v2 + 159))
  {
    uint64_t v38 = geo::codec::Allocator::instance(v26);
    long long v26 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v38 + 40))(v38, *((void *)v2 + 159), 0);
  }
  if (*((void *)v2 + 172))
  {
    uint64_t v39 = geo::codec::Allocator::instance(v26);
    long long v26 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v39 + 40))(v39, *((void *)v2 + 172), 0);
  }
  if (*((void *)v2 + 173))
  {
    uint64_t v40 = geo::codec::Allocator::instance(v26);
    (*(void (**)(uint64_t, void, void))(*(void *)v40 + 40))(v40, *((void *)v2 + 173), 0);
  }
  id v41 = geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 175), v27);
  if (*((void *)v2 + 180))
  {
    uint64_t v43 = geo::codec::Allocator::instance(v41);
    (*(void (**)(uint64_t, void, void))(*(void *)v43 + 40))(v43, *((void *)v2 + 180), 0);
  }
  uint64_t v44 = geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 182), v42);
  if (*((void *)v2 + 187))
  {
    uint64_t v45 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v45 + 40))(v45, *((void *)v2 + 187), 0);
  }
  if (*((void *)v2 + 189))
  {
    uint64_t v46 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v46 + 40))(v46, *((void *)v2 + 189), 0);
  }
  if (*((void *)v2 + 191))
  {
    uint64_t v47 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v47 + 40))(v47, *((void *)v2 + 191), 0);
  }
  if (*((void *)v2 + 192))
  {
    uint64_t v48 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v48 + 40))(v48, *((void *)v2 + 192), 0);
  }
  if (*((void *)v2 + 193))
  {
    uint64_t v49 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v49 + 40))(v49, *((void *)v2 + 193), 0);
  }
  if (*((void *)v2 + 199))
  {
    uint64_t v50 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v50 + 40))(v50, *((void *)v2 + 199), 0);
  }
  if (*((void *)v2 + 200))
  {
    uint64_t v51 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v51 + 40))(v51, *((void *)v2 + 200), 0);
  }
  if (*((void *)v2 + 202))
  {
    uint64_t v52 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v52 + 40))(v52, *((void *)v2 + 202), 0);
  }
  if (*((void *)v2 + 203))
  {
    uint64_t v53 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v53 + 40))(v53, *((void *)v2 + 203), 0);
  }
  if (*((void *)v2 + 205))
  {
    uint64_t v54 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v54 + 40))(v54, *((void *)v2 + 205), 0);
  }
  if (*((void *)v2 + 207))
  {
    uint64_t v55 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v55 + 40))(v55, *((void *)v2 + 207), 0);
  }
  if (*((void *)v2 + 208))
  {
    uint64_t v56 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v56 + 40))(v56, *((void *)v2 + 208), 0);
  }
  if (*((void *)v2 + 210))
  {
    uint64_t v57 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v57 + 40))(v57, *((void *)v2 + 210), 0);
  }
  if (*((void *)v2 + 212))
  {
    uint64_t v58 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v58 + 40))(v58, *((void *)v2 + 212), 0);
  }
  if (*((void *)v2 + 219))
  {
    uint64_t v59 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v59 + 40))(v59, *((void *)v2 + 219), 0);
  }
  if (*((void *)v2 + 221))
  {
    uint64_t v60 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v60 + 40))(v60, *((void *)v2 + 221), 0);
  }
  if (*((void *)v2 + 222))
  {
    uint64_t v61 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v61 + 40))(v61, *((void *)v2 + 222), 0);
  }
  if (*((void *)v2 + 224))
  {
    uint64_t v62 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v62 + 40))(v62, *((void *)v2 + 224), 0);
  }
  if (*((void *)v2 + 226))
  {
    uint64_t v63 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v63 + 40))(v63, *((void *)v2 + 226), 0);
  }
  if (*((void *)v2 + 228))
  {
    uint64_t v64 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v64 + 40))(v64, *((void *)v2 + 228), 0);
  }
  if (*((void *)v2 + 230))
  {
    uint64_t v65 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v65 + 40))(v65, *((void *)v2 + 230), 0);
  }
  if (*((void *)v2 + 232))
  {
    uint64_t v66 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v66 + 40))(v66, *((void *)v2 + 232), 0);
  }
  if (*((void *)v2 + 234))
  {
    uint64_t v67 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v67 + 40))(v67, *((void *)v2 + 234), 0);
  }
  if (*((void *)v2 + 236))
  {
    uint64_t v68 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v68 + 40))(v68, *((void *)v2 + 236), 0);
  }
  if (*((void *)v2 + 85))
  {
    uint64_t v69 = geo::codec::Allocator::instance(v44);
    uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v69 + 40))(v69, *((void *)v2 + 85), 0);
  }
  if (*((void *)v2 + 93))
  {
    uint64_t v70 = geo::codec::Allocator::instance(v44);
    (*(void (**)(uint64_t, void, void))(*(void *)v70 + 40))(v70, *((void *)v2 + 93), 0);
  }
  DebugBlobDealloc = geo::codec::VectorTile::DaVinciReadDebugBlobDealloc((geo::codec::Allocator **)v2);
  if (*((void *)v2 + 360))
  {
    uint64_t v73 = geo::codec::Allocator::instance(DebugBlobDealloc);
    DebugBlobDealloc = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v73 + 40))(v73, *((void *)v2 + 360), 0);
  }
  uint64_t v74 = *((void *)v2 + 279);
  if (v74)
  {
    uint64_t v75 = geo::codec::Allocator::instance(DebugBlobDealloc);
    uint64_t v76 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v75 + 40))(v75, *(void *)(v74 + 24), 0);
    uint64_t v77 = geo::codec::Allocator::instance(v76);
    int v78 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v77 + 40))(v77, *(void *)(v74 + 16), 0);
    uint64_t v79 = geo::codec::Allocator::instance(v78);
    DebugBlobDealloc = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 40))(v79, v74, 0);
  }
  if (*((void *)v2 + 280))
  {
    DebugBlobDealloc = (geo::codec::Allocator *)geo::codec::Allocator::instance(DebugBlobDealloc);
    uint64_t v80 = *((void *)v2 + 280);
    if (v80)
    {
      uint64_t v81 = DebugBlobDealloc;
      std::__tree<std::__value_type<unsigned char,std::vector<unsigned long long>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned long long>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned long long>>>>::destroy(v80 + 24, *(void **)(v80 + 32));
      std::__tree<std::__value_type<unsigned char,std::vector<unsigned long long>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned long long>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned long long>>>>::destroy(v80, *(void **)(v80 + 8));
      DebugBlobDealloc = (geo::codec::Allocator *)(*(uint64_t (**)(geo::codec::Allocator *, uint64_t, uint64_t))(*(void *)v81 + 40))(v81, v80, 48);
    }
  }
  if (*((void *)v2 + 373))
  {
    uint64_t v82 = geo::codec::Allocator::instance(DebugBlobDealloc);
    DebugBlobDealloc = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v82 + 40))(v82, *((void *)v2 + 373), 0);
  }
  if (*((unsigned char *)v2 + 3004))
  {
    uint64_t v83 = geo::codec::Allocator::instance(DebugBlobDealloc);
    DebugBlobDealloc = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v83 + 40))(v83, *((void *)v2 + 376), 0);
    *((unsigned char *)v2 + 3004) = 0;
  }
  if (*((void *)v2 + 75))
  {
    uint64_t v84 = geo::codec::Allocator::instance(DebugBlobDealloc);
    DebugBlobDealloc = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v84 + 40))(v84, *((void *)v2 + 75), 0);
  }
  if (*((void *)v2 + 82))
  {
    uint64_t v85 = geo::codec::Allocator::instance(DebugBlobDealloc);
    (*(void (**)(uint64_t, void, void))(*(void *)v85 + 40))(v85, *((void *)v2 + 82), 0);
  }
  geo::codec::VertexPoolDealloc(*((geo::codec::Allocator **)v2 + 106), v72);
  uint64_t v86 = *((void *)v2 + 147);
  for (uint64_t i = *((void *)v2 + 146); v86 != i; v86 -= 16)
  {
    int v88 = *(std::__shared_weak_count **)(v86 - 8);
    if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  *((void *)v2 + 147) = i;
  uint64_t v89 = *((void *)v2 + 63);
  uint64_t v90 = *((void *)v2 + 64);
  if (v90 != v89)
  {
    while (1)
    {
      uint64_t v91 = *(std::__shared_weak_count **)(v90 - 192);
      if (v91)
      {
        if (!atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      unint64_t v92 = *(std::__shared_weak_count **)(v90 - 216);
      if (v92) {
        goto LABEL_125;
      }
LABEL_121:
      v90 -= 224;
      if (v90 == v89) {
        goto LABEL_128;
      }
    }
    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
    std::__shared_weak_count::__release_weak(v91);
    unint64_t v92 = *(std::__shared_weak_count **)(v90 - 216);
    if (!v92) {
      goto LABEL_121;
    }
LABEL_125:
    std::__shared_weak_count::__release_weak(v92);
    goto LABEL_121;
  }
LABEL_128:
  *((void *)v2 + 64) = v89;
  if (*((void *)v2 + 465))
  {
    int v93 = (void *)*((void *)v2 + 464);
    if (v93)
    {
      do
      {
        int v94 = (void *)*v93;
        operator delete(v93);
        int v93 = v94;
      }
      while (v94);
    }
    *((void *)v2 + 464) = 0;
    uint64_t v95 = *((void *)v2 + 463);
    if (v95)
    {
      for (uint64_t j = 0; j != v95; ++j)
        *(void *)(*((void *)v2 + 462) + 8 * j) = 0;
    }
    *((void *)v2 + 465) = 0;
  }
  uint64_t v97 = *((void *)v2 + 472);
  if (v97)
  {
    *((void *)v2 + 473) = v97;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 475) + 40))(*((void *)v2 + 475), v97, *((void *)v2 + 474) - v97);
  }
  uint64_t v98 = *((void *)v2 + 468);
  if (v98)
  {
    uint64_t v99 = *((void *)v2 + 469);
    uint64_t v100 = *((void *)v2 + 468);
    if (v99 != v98)
    {
      do
        GeoCodecsRunningTrack::~GeoCodecsRunningTrack((GeoCodecsRunningTrack *)(v99 - 128));
      while (v99 != v98);
      uint64_t v100 = *((void *)v2 + 468);
    }
    *((void *)v2 + 469) = v98;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 471) + 40))(*((void *)v2 + 471), v100, *((void *)v2 + 470) - v100);
  }
  char v101 = (void *)*((void *)v2 + 464);
  if (v101)
  {
    do
    {
      int v102 = (void *)*v101;
      operator delete(v101);
      char v101 = v102;
    }
    while (v102);
  }
  int v103 = (void *)*((void *)v2 + 462);
  *((void *)v2 + 462) = 0;
  if (v103) {
    operator delete(v103);
  }
  uint64_t v104 = (void *)*((void *)v2 + 458);
  if (v104)
  {
    *((void *)v2 + 459) = v104;
    operator delete(v104);
  }
  int v105 = (void *)*((void *)v2 + 455);
  if (v105)
  {
    *((void *)v2 + 456) = v105;
    operator delete(v105);
  }
  char v106 = (void *)*((void *)v2 + 452);
  if (v106)
  {
    *((void *)v2 + 453) = v106;
    operator delete(v106);
  }
  unsigned int v107 = (void *)*((void *)v2 + 449);
  if (v107)
  {
    *((void *)v2 + 450) = v107;
    operator delete(v107);
  }
  uint64_t v108 = (void *)*((void *)v2 + 446);
  if (v108)
  {
    *((void *)v2 + 447) = v108;
    operator delete(v108);
  }
  uint64_t v109 = *((void *)v2 + 441);
  if (v109)
  {
    *((void *)v2 + 442) = v109;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 444) + 40))(*((void *)v2 + 444), v109, *((void *)v2 + 443) - v109);
  }
  uint64_t v110 = *((void *)v2 + 436);
  if (v110)
  {
    uint64_t v111 = *((void *)v2 + 437);
    uint64_t v112 = *((void *)v2 + 436);
    if (v111 != v110)
    {
      do
        GeoCodecsMultiPolygonFeature::~GeoCodecsMultiPolygonFeature((GeoCodecsMultiPolygonFeature *)(v111 - 128));
      while (v111 != v110);
      uint64_t v112 = *((void *)v2 + 436);
    }
    *((void *)v2 + 437) = v110;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 439) + 40))(*((void *)v2 + 439), v112, *((void *)v2 + 438) - v112);
  }
  uint64_t v113 = *((void *)v2 + 430);
  if (v113)
  {
    *((void *)v2 + 431) = v113;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 433) + 40))(*((void *)v2 + 433), v113, *((void *)v2 + 432) - v113);
  }
  uint64_t v114 = *((void *)v2 + 426);
  if (v114)
  {
    *((void *)v2 + 427) = v114;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 429) + 40))(*((void *)v2 + 429), v114, *((void *)v2 + 428) - v114);
  }
  int v286 = (uint64_t *)((char *)v2 + 3360);
  std::vector<GeoCodecsContourLinesFeature,geo::StdAllocator<GeoCodecsContourLinesFeature,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100](&v286);
  uint64_t v115 = *((void *)v2 + 416);
  if (v115)
  {
    *((void *)v2 + 417) = v115;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 419) + 40))(*((void *)v2 + 419), v115, *((void *)v2 + 418) - v115);
  }
  uint64_t v116 = *((void *)v2 + 412);
  if (v116)
  {
    *((void *)v2 + 413) = v116;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 415) + 40))(*((void *)v2 + 415), v116, *((void *)v2 + 414) - v116);
  }
  int v286 = (uint64_t *)((char *)v2 + 3248);
  std::vector<GeoCodecsContourLinesFeature,geo::StdAllocator<GeoCodecsContourLinesFeature,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100](&v286);
  uint64_t v117 = *((void *)v2 + 402);
  if (v117)
  {
    *((void *)v2 + 403) = v117;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 405) + 40))(*((void *)v2 + 405), v117, *((void *)v2 + 404) - v117);
  }
  uint64_t v118 = *((void *)v2 + 398);
  if (v118)
  {
    *((void *)v2 + 399) = v118;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 401) + 40))(*((void *)v2 + 401), v118, *((void *)v2 + 400) - v118);
  }
  int v286 = (uint64_t *)((char *)v2 + 3136);
  std::vector<GeoCodecsContourLinesFeature,geo::StdAllocator<GeoCodecsContourLinesFeature,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100](&v286);
  uint64_t v119 = *((void *)v2 + 388);
  if (v119)
  {
    *((void *)v2 + 389) = v119;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 391) + 40))(*((void *)v2 + 391), v119, *((void *)v2 + 390) - v119);
  }
  uint64_t v120 = *((void *)v2 + 384);
  if (v120)
  {
    *((void *)v2 + 385) = v120;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 387) + 40))(*((void *)v2 + 387), v120, *((void *)v2 + 386) - v120);
  }
  int v286 = (uint64_t *)((char *)v2 + 3024);
  std::vector<GeoCodecsContourLinesFeature,geo::StdAllocator<GeoCodecsContourLinesFeature,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100](&v286);
  uint64_t v121 = *((void *)v2 + 369);
  if (v121)
  {
    *((void *)v2 + 370) = v121;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 372) + 40))(*((void *)v2 + 372), v121, *((void *)v2 + 371) - v121);
  }
  uint64_t v122 = *((void *)v2 + 365);
  if (v122)
  {
    uint64_t v123 = *((void *)v2 + 366);
    uint64_t v124 = *((void *)v2 + 365);
    if (v123 != v122)
    {
      do
      {
        uint64_t v125 = *(void *)(v123 - 32);
        if (v125)
        {
          *(void *)(v123 - 24) = v125;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v123 - 8) + 40))(*(void *)(v123 - 8), v125, *(void *)(v123 - 16) - v125);
        }
        v123 -= 40;
      }
      while (v123 != v122);
      uint64_t v124 = *((void *)v2 + 365);
    }
    *((void *)v2 + 366) = v122;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 368) + 40))(*((void *)v2 + 368), v124, *((void *)v2 + 367) - v124);
  }
  uint64_t v126 = *((void *)v2 + 364);
  *((void *)v2 + 364) = 0;
  if (v126) {
    MEMORY[0x18C11F580](v126, 0x1000C40504FFAC1);
  }
  uint64_t v127 = (void *)*((void *)v2 + 361);
  if (v127)
  {
    *((void *)v2 + 362) = v127;
    operator delete(v127);
  }
  std::mutex::~mutex((std::mutex *)((char *)v2 + 2728));
  uint64_t v128 = *((void *)v2 + 337);
  if (v128)
  {
    uint64_t v129 = *((void *)v2 + 338);
    uint64_t v130 = *((void *)v2 + 337);
    if (v129 != v128)
    {
      uint64_t v131 = *((void *)v2 + 338);
      do
      {
        uint64_t v133 = *(void *)(v131 - 32);
        v131 -= 32;
        uint64_t v132 = v133;
        if (v133)
        {
          *(void *)(v129 - 24) = v132;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v129 - 8) + 40))(*(void *)(v129 - 8), v132, *(void *)(v129 - 16) - v132);
        }
        uint64_t v129 = v131;
      }
      while (v131 != v128);
      uint64_t v130 = *((void *)v2 + 337);
    }
    *((void *)v2 + 338) = v128;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 340) + 40))(*((void *)v2 + 340), v130, *((void *)v2 + 339) - v130);
  }
  uint64_t v134 = *((void *)v2 + 333);
  if (v134)
  {
    uint64_t v135 = *((void *)v2 + 334);
    uint64_t v136 = *((void *)v2 + 333);
    if (v135 != v134)
    {
      uint64_t v137 = *((void *)v2 + 334);
      do
      {
        uint64_t v139 = *(void *)(v137 - 32);
        v137 -= 32;
        uint64_t v138 = v139;
        if (v139)
        {
          *(void *)(v135 - 24) = v138;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v135 - 8) + 40))(*(void *)(v135 - 8), v138, *(void *)(v135 - 16) - v138);
        }
        uint64_t v135 = v137;
      }
      while (v137 != v134);
      uint64_t v136 = *((void *)v2 + 333);
    }
    *((void *)v2 + 334) = v134;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 336) + 40))(*((void *)v2 + 336), v136, *((void *)v2 + 335) - v136);
  }
  uint64_t v140 = *((void *)v2 + 329);
  if (v140)
  {
    uint64_t v141 = *((void *)v2 + 330);
    uint64_t v142 = *((void *)v2 + 329);
    if (v141 != v140)
    {
      uint64_t v143 = *((void *)v2 + 330);
      do
      {
        uint64_t v145 = *(void *)(v143 - 32);
        v143 -= 32;
        uint64_t v144 = v145;
        if (v145)
        {
          *(void *)(v141 - 24) = v144;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v141 - 8) + 40))(*(void *)(v141 - 8), v144, *(void *)(v141 - 16) - v144);
        }
        uint64_t v141 = v143;
      }
      while (v143 != v140);
      uint64_t v142 = *((void *)v2 + 329);
    }
    *((void *)v2 + 330) = v140;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 332) + 40))(*((void *)v2 + 332), v142, *((void *)v2 + 331) - v142);
  }
  uint64_t v146 = *((void *)v2 + 325);
  if (v146)
  {
    uint64_t v147 = *((void *)v2 + 326);
    uint64_t v148 = *((void *)v2 + 325);
    if (v147 != v146)
    {
      uint64_t v149 = *((void *)v2 + 326);
      do
      {
        uint64_t v151 = *(void *)(v149 - 32);
        v149 -= 32;
        uint64_t v150 = v151;
        if (v151)
        {
          *(void *)(v147 - 24) = v150;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v147 - 8) + 40))(*(void *)(v147 - 8), v150, *(void *)(v147 - 16) - v150);
        }
        uint64_t v147 = v149;
      }
      while (v149 != v146);
      uint64_t v148 = *((void *)v2 + 325);
    }
    *((void *)v2 + 326) = v146;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 328) + 40))(*((void *)v2 + 328), v148, *((void *)v2 + 327) - v148);
  }
  uint64_t v152 = *((void *)v2 + 321);
  if (v152)
  {
    uint64_t v153 = *((void *)v2 + 322);
    uint64_t v154 = *((void *)v2 + 321);
    if (v153 != v152)
    {
      uint64_t v155 = *((void *)v2 + 322);
      do
      {
        uint64_t v157 = *(void *)(v155 - 32);
        v155 -= 32;
        uint64_t v156 = v157;
        if (v157)
        {
          *(void *)(v153 - 24) = v156;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v153 - 8) + 40))(*(void *)(v153 - 8), v156, *(void *)(v153 - 16) - v156);
        }
        uint64_t v153 = v155;
      }
      while (v155 != v152);
      uint64_t v154 = *((void *)v2 + 321);
    }
    *((void *)v2 + 322) = v152;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 324) + 40))(*((void *)v2 + 324), v154, *((void *)v2 + 323) - v154);
  }
  uint64_t v158 = *((void *)v2 + 317);
  if (v158)
  {
    uint64_t v159 = *((void *)v2 + 318);
    uint64_t v160 = *((void *)v2 + 317);
    if (v159 != v158)
    {
      uint64_t v161 = *((void *)v2 + 318);
      do
      {
        uint64_t v163 = *(void *)(v161 - 32);
        v161 -= 32;
        uint64_t v162 = v163;
        if (v163)
        {
          *(void *)(v159 - 24) = v162;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v159 - 8) + 40))(*(void *)(v159 - 8), v162, *(void *)(v159 - 16) - v162);
        }
        uint64_t v159 = v161;
      }
      while (v161 != v158);
      uint64_t v160 = *((void *)v2 + 317);
    }
    *((void *)v2 + 318) = v158;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 320) + 40))(*((void *)v2 + 320), v160, *((void *)v2 + 319) - v160);
  }
  uint64_t v164 = *((void *)v2 + 313);
  if (v164)
  {
    uint64_t v165 = *((void *)v2 + 314);
    uint64_t v166 = *((void *)v2 + 313);
    if (v165 != v164)
    {
      uint64_t v167 = *((void *)v2 + 314);
      do
      {
        uint64_t v169 = *(void *)(v167 - 32);
        v167 -= 32;
        uint64_t v168 = v169;
        if (v169)
        {
          *(void *)(v165 - 24) = v168;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v165 - 8) + 40))(*(void *)(v165 - 8), v168, *(void *)(v165 - 16) - v168);
        }
        uint64_t v165 = v167;
      }
      while (v167 != v164);
      uint64_t v166 = *((void *)v2 + 313);
    }
    *((void *)v2 + 314) = v164;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 316) + 40))(*((void *)v2 + 316), v166, *((void *)v2 + 315) - v166);
  }
  unsigned int v170 = (void *)*((void *)v2 + 307);
  if (v170)
  {
    *((void *)v2 + 308) = v170;
    operator delete(v170);
  }
  uint64_t v171 = *((void *)v2 + 303);
  if (v171)
  {
    *((void *)v2 + 304) = v171;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 306) + 40))(*((void *)v2 + 306), v171, *((void *)v2 + 305) - v171);
  }
  uint64_t v172 = (void *)*((void *)v2 + 300);
  if (v172)
  {
    do
    {
      uint64_t v173 = (void *)*v172;
      operator delete(v172);
      uint64_t v172 = v173;
    }
    while (v173);
  }
  unint64_t v174 = (void *)*((void *)v2 + 298);
  *((void *)v2 + 298) = 0;
  if (v174) {
    operator delete(v174);
  }
  uint64_t v175 = *((void *)v2 + 294);
  if (v175)
  {
    *((void *)v2 + 295) = v175;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 297) + 40))(*((void *)v2 + 297), v175, *((void *)v2 + 296) - v175);
  }
  uint64_t v176 = *((void *)v2 + 290);
  if (v176)
  {
    uint64_t v177 = *((void *)v2 + 291);
    uint64_t v178 = *((void *)v2 + 290);
    if (v177 != v176)
    {
      do
      {
        char v179 = *(std::__shared_weak_count **)(v177 - 32);
        if (v179 && !atomic_fetch_add(&v179->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v179->__on_zero_shared)(v179, v178);
          std::__shared_weak_count::__release_weak(v179);
        }
        v177 -= 40;
      }
      while (v177 != v176);
      uint64_t v178 = *((void *)v2 + 290);
    }
    *((void *)v2 + 291) = v176;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 293) + 40))(*((void *)v2 + 293), v178, *((void *)v2 + 292) - v178);
  }
  uint64_t v180 = *((void *)v2 + 282);
  if (v180)
  {
    *((void *)v2 + 283) = v180;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 285) + 40))(*((void *)v2 + 285), v180, *((void *)v2 + 284) - v180);
  }
  uint64_t v181 = *((void *)v2 + 275);
  if (v181)
  {
    uint64_t v182 = *((void *)v2 + 276);
    uint64_t v183 = *((void *)v2 + 275);
    if (v182 != v181)
    {
      do
      {
        unint64_t v184 = *(std::__shared_weak_count **)(v182 - 16);
        if (v184 && !atomic_fetch_add(&v184->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v184->__on_zero_shared)(v184, v183);
          std::__shared_weak_count::__release_weak(v184);
        }
        v182 -= 72;
      }
      while (v182 != v181);
      uint64_t v183 = *((void *)v2 + 275);
    }
    *((void *)v2 + 276) = v181;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 278) + 40))(*((void *)v2 + 278), v183, *((void *)v2 + 277) - v183);
  }
  uint64_t v185 = *((void *)v2 + 263);
  if (v185)
  {
    *((void *)v2 + 264) = v185;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 266) + 40))(*((void *)v2 + 266), v185, *((void *)v2 + 265) - v185);
  }
  uint64_t v186 = *((void *)v2 + 259);
  if (v186)
  {
    uint64_t v187 = *((void *)v2 + 260);
    uint64_t v188 = *((void *)v2 + 259);
    if (v187 != v186)
    {
      do
      {
        uint64_t v190 = *(void *)(v187 - 32);
        if (v190)
        {
          uint64_t v191 = *(void *)(v187 - 24);
          uint64_t v189 = *(void *)(v187 - 32);
          if (v191 != v190)
          {
            do
            {
              unint64_t v192 = *(std::__shared_weak_count **)(v191 - 8);
              if (v192 && !atomic_fetch_add(&v192->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *, uint64_t))v192->__on_zero_shared)(v192, v189);
                std::__shared_weak_count::__release_weak(v192);
              }
              v191 -= 32;
            }
            while (v191 != v190);
            uint64_t v189 = *(void *)(v187 - 32);
          }
          *(void *)(v187 - 24) = v190;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v187 - 8) + 40))(*(void *)(v187 - 8), v189, *(void *)(v187 - 16) - v189);
        }
        v187 -= 40;
      }
      while (v187 != v186);
      uint64_t v188 = *((void *)v2 + 259);
    }
    *((void *)v2 + 260) = v186;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 262) + 40))(*((void *)v2 + 262), v188, *((void *)v2 + 261) - v188);
  }
  uint64_t v193 = *((void *)v2 + 246);
  if (v193)
  {
    *((void *)v2 + 247) = v193;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 249) + 40))(*((void *)v2 + 249), v193, *((void *)v2 + 248) - v193);
  }
  unsigned int v194 = (void *)*((void *)v2 + 241);
  if (v194)
  {
    do
    {
      uint64_t v195 = (void *)*v194;
      operator delete(v194);
      unsigned int v194 = v195;
    }
    while (v195);
  }
  uint64_t v196 = (void *)*((void *)v2 + 239);
  *((void *)v2 + 239) = 0;
  if (v196) {
    operator delete(v196);
  }
  uint64_t v197 = *((void *)v2 + 215);
  if (v197)
  {
    uint64_t v198 = *((void *)v2 + 216);
    uint64_t v199 = *((void *)v2 + 215);
    if (v198 != v197)
    {
      do
      {
        uint64_t v200 = *(std::__shared_weak_count **)(v198 - 8);
        if (v200 && !atomic_fetch_add(&v200->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v200->__on_zero_shared)(v200, v199);
          std::__shared_weak_count::__release_weak(v200);
        }
        v198 -= 16;
      }
      while (v198 != v197);
      uint64_t v199 = *((void *)v2 + 215);
    }
    *((void *)v2 + 216) = v197;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 218) + 40))(*((void *)v2 + 218), v199, *((void *)v2 + 217) - v199);
  }
  uint64_t v201 = *((void *)v2 + 195);
  if (!v201) {
    goto LABEL_323;
  }
  uint64_t v202 = *((void *)v2 + 196);
  uint64_t v203 = *((void *)v2 + 195);
  if (v202 == v201) {
    goto LABEL_322;
  }
  do
  {
    unsigned int v204 = *(std::__shared_weak_count **)(v202 - 216);
    if (!v204 || atomic_fetch_add(&v204->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v205 = *(std::__shared_weak_count **)(v202 - 240);
      if (!v205) {
        goto LABEL_314;
      }
LABEL_318:
      std::__shared_weak_count::__release_weak(v205);
      goto LABEL_314;
    }
    ((void (*)(std::__shared_weak_count *, uint64_t))v204->__on_zero_shared)(v204, v203);
    std::__shared_weak_count::__release_weak(v204);
    uint64_t v205 = *(std::__shared_weak_count **)(v202 - 240);
    if (v205) {
      goto LABEL_318;
    }
LABEL_314:
    v202 -= 248;
  }
  while (v202 != v201);
  uint64_t v203 = *((void *)v2 + 195);
LABEL_322:
  *((void *)v2 + 196) = v201;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 198) + 40))(*((void *)v2 + 198), v203, *((void *)v2 + 197) - v203);
LABEL_323:
  uint64_t v206 = *((void *)v2 + 183);
  if (!v206) {
    goto LABEL_335;
  }
  uint64_t v207 = *((void *)v2 + 184);
  uint64_t v208 = *((void *)v2 + 183);
  if (v207 == v206) {
    goto LABEL_334;
  }
  while (2)
  {
    unsigned int v209 = *(std::__shared_weak_count **)(v207 - 72);
    if (v209 && !atomic_fetch_add(&v209->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, uint64_t))v209->__on_zero_shared)(v209, v208);
      std::__shared_weak_count::__release_weak(v209);
      uint64_t v210 = *(std::__shared_weak_count **)(v207 - 96);
      if (v210) {
LABEL_330:
      }
        std::__shared_weak_count::__release_weak(v210);
    }
    else
    {
      uint64_t v210 = *(std::__shared_weak_count **)(v207 - 96);
      if (v210) {
        goto LABEL_330;
      }
    }
    v207 -= 104;
    if (v207 != v206) {
      continue;
    }
    break;
  }
  uint64_t v208 = *((void *)v2 + 183);
LABEL_334:
  *((void *)v2 + 184) = v206;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 186) + 40))(*((void *)v2 + 186), v208, *((void *)v2 + 185) - v208);
LABEL_335:
  uint64_t v211 = (std::__shared_weak_count **)*((void *)v2 + 176);
  if (!v211) {
    goto LABEL_347;
  }
  unint64_t v212 = (std::__shared_weak_count **)*((void *)v2 + 177);
  uint64_t v213 = *((void *)v2 + 176);
  if (v212 == v211) {
    goto LABEL_346;
  }
  unsigned int v214 = v212 - 42;
  while (2)
  {
    uint64_t v216 = v214[3];
    if (v216 && !atomic_fetch_add(&v216->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, uint64_t))v216->__on_zero_shared)(v216, v213);
      std::__shared_weak_count::__release_weak(v216);
      unint64_t v217 = *v214;
      if (*v214) {
LABEL_342:
      }
        std::__shared_weak_count::__release_weak(v217);
    }
    else
    {
      unint64_t v217 = *v214;
      if (*v214) {
        goto LABEL_342;
      }
    }
    uint64_t v215 = v214 - 1;
    v214 -= 43;
    if (v215 != v211) {
      continue;
    }
    break;
  }
  uint64_t v213 = *((void *)v2 + 176);
LABEL_346:
  *((void *)v2 + 177) = v211;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 179) + 40))(*((void *)v2 + 179), v213, *((void *)v2 + 178) - v213);
LABEL_347:
  uint64_t v218 = *((void *)v2 + 168);
  if (v218)
  {
    uint64_t v219 = *((void *)v2 + 169);
    uint64_t v220 = *((void *)v2 + 168);
    if (v219 != v218)
    {
      do
      {
        uint64_t v221 = *(std::__shared_weak_count **)(v219 - 176);
        if (v221) {
          std::__shared_weak_count::__release_weak(v221);
        }
        v219 -= 184;
      }
      while (v219 != v218);
      uint64_t v220 = *((void *)v2 + 168);
    }
    *((void *)v2 + 169) = v218;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 171) + 40))(*((void *)v2 + 171), v220, *((void *)v2 + 170) - v220);
  }
  uint64_t v222 = *((void *)v2 + 164);
  if (v222)
  {
    uint64_t v223 = *((void *)v2 + 165);
    uint64_t v224 = *((void *)v2 + 164);
    if (v223 != v222)
    {
      do
      {
        uint64_t v225 = *(std::__shared_weak_count **)(v223 - 40);
        if (v225 && !atomic_fetch_add(&v225->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v225->__on_zero_shared)(v225, v224);
          std::__shared_weak_count::__release_weak(v225);
        }
        v223 -= 72;
      }
      while (v223 != v222);
      uint64_t v224 = *((void *)v2 + 164);
    }
    *((void *)v2 + 165) = v222;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 167) + 40))(*((void *)v2 + 167), v224, *((void *)v2 + 166) - v224);
  }
  uint64_t v226 = *((void *)v2 + 160);
  if (!v226) {
    goto LABEL_376;
  }
  uint64_t v227 = *((void *)v2 + 161);
  uint64_t v228 = *((void *)v2 + 160);
  if (v227 == v226) {
    goto LABEL_375;
  }
  while (2)
  {
    uint64_t v229 = *(std::__shared_weak_count **)(v227 - 72);
    if (v229 && !atomic_fetch_add(&v229->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, uint64_t))v229->__on_zero_shared)(v229, v228);
      std::__shared_weak_count::__release_weak(v229);
      uint64_t v230 = *(std::__shared_weak_count **)(v227 - 96);
      if (v230) {
LABEL_371:
      }
        std::__shared_weak_count::__release_weak(v230);
    }
    else
    {
      uint64_t v230 = *(std::__shared_weak_count **)(v227 - 96);
      if (v230) {
        goto LABEL_371;
      }
    }
    v227 -= 104;
    if (v227 != v226) {
      continue;
    }
    break;
  }
  uint64_t v228 = *((void *)v2 + 160);
LABEL_375:
  *((void *)v2 + 161) = v226;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 163) + 40))(*((void *)v2 + 163), v228, *((void *)v2 + 162) - v228);
LABEL_376:
  uint64_t v231 = *((void *)v2 + 146);
  if (v231)
  {
    uint64_t v232 = *((void *)v2 + 147);
    uint64_t v233 = *((void *)v2 + 146);
    if (v232 != v231)
    {
      do
      {
        uint64_t v234 = *(std::__shared_weak_count **)(v232 - 8);
        if (v234 && !atomic_fetch_add(&v234->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v234->__on_zero_shared)(v234, v233);
          std::__shared_weak_count::__release_weak(v234);
        }
        v232 -= 16;
      }
      while (v232 != v231);
      uint64_t v233 = *((void *)v2 + 146);
    }
    *((void *)v2 + 147) = v231;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 149) + 40))(*((void *)v2 + 149), v233, *((void *)v2 + 148) - v233);
  }
  FeatureStyleAttributesSet::~FeatureStyleAttributesSet((geo::codec::VectorTile *)((char *)v2 + 1112));
  uint64_t v235 = *((void *)v2 + 135);
  if (v235)
  {
    *((void *)v2 + 136) = v235;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 138) + 40))(*((void *)v2 + 138), v235, *((void *)v2 + 137) - v235);
  }
  uint64_t v236 = *((void *)v2 + 127);
  if (v236)
  {
    *((void *)v2 + 128) = v236;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 130) + 40))(*((void *)v2 + 130), v236, *((void *)v2 + 129) - v236);
  }
  if (*((char *)v2 + 1015) < 0)
  {
    operator delete(*((void **)v2 + 124));
    if (*((char *)v2 + 991) < 0) {
      goto LABEL_394;
    }
LABEL_391:
    uint64_t v237 = *((void *)v2 + 117);
    if (v237)
    {
LABEL_395:
      *((void *)v2 + 118) = v237;
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 120) + 40))(*((void *)v2 + 120), v237, *((void *)v2 + 119) - v237);
    }
  }
  else
  {
    if ((*((char *)v2 + 991) & 0x80000000) == 0) {
      goto LABEL_391;
    }
LABEL_394:
    operator delete(*((void **)v2 + 121));
    uint64_t v237 = *((void *)v2 + 117);
    if (v237) {
      goto LABEL_395;
    }
  }
  uint64_t v238 = *((void *)v2 + 113);
  if (v238)
  {
    *((void *)v2 + 114) = v238;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 116) + 40))(*((void *)v2 + 116), v238, *((void *)v2 + 115) - v238);
  }
  uint64_t v239 = *((void *)v2 + 107);
  if (v239)
  {
    *((void *)v2 + 108) = v239;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 110) + 40))(*((void *)v2 + 110), v239, *((void *)v2 + 109) - v239);
  }
  uint64_t v240 = (void *)*((void *)v2 + 79);
  if (v240)
  {
    do
    {
      unint64_t v247 = (void *)*v240;
      int v248 = (void *)v240[3];
      if (v248 != (void *)v240[5]) {
        free(v248);
      }
      operator delete(v240);
      uint64_t v240 = v247;
    }
    while (v247);
  }
  unint64_t v241 = (void *)*((void *)v2 + 77);
  *((void *)v2 + 77) = 0;
  if (v241) {
    operator delete(v241);
  }
  uint64_t v242 = *((void *)v2 + 71);
  if (v242)
  {
    *((void *)v2 + 72) = v242;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 74) + 40))(*((void *)v2 + 74), v242, *((void *)v2 + 73) - v242);
  }
  uint64_t v243 = *((void *)v2 + 67);
  if (v243)
  {
    *((void *)v2 + 68) = v243;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 70) + 40))(*((void *)v2 + 70), v243, *((void *)v2 + 69) - v243);
  }
  uint64_t v244 = *((void *)v2 + 63);
  if (!v244) {
    goto LABEL_422;
  }
  uint64_t v245 = *((void *)v2 + 64);
  uint64_t v246 = *((void *)v2 + 63);
  if (v245 == v244) {
    goto LABEL_421;
  }
  while (2)
  {
    unsigned int v249 = *(std::__shared_weak_count **)(v245 - 192);
    if (v249 && !atomic_fetch_add(&v249->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, uint64_t))v249->__on_zero_shared)(v249, v246);
      std::__shared_weak_count::__release_weak(v249);
      uint64_t v250 = *(std::__shared_weak_count **)(v245 - 216);
      if (v250) {
LABEL_417:
      }
        std::__shared_weak_count::__release_weak(v250);
    }
    else
    {
      uint64_t v250 = *(std::__shared_weak_count **)(v245 - 216);
      if (v250) {
        goto LABEL_417;
      }
    }
    v245 -= 224;
    if (v245 != v244) {
      continue;
    }
    break;
  }
  uint64_t v246 = *((void *)v2 + 63);
LABEL_421:
  *((void *)v2 + 64) = v244;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 66) + 40))(*((void *)v2 + 66), v246, *((void *)v2 + 65) - v246);
LABEL_422:
  uint64_t v251 = *((void *)v2 + 59);
  if (v251)
  {
    std::vector<GeoCodecs3DBuildingFeature,geo::StdAllocator<GeoCodecs3DBuildingFeature,geo::codec::Allocator>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2 + 472, v251);
    (*(void (**)(void, void, void))(**((void **)v2 + 62) + 40))(*((void *)v2 + 62), *((void *)v2 + 59), *((void *)v2 + 61) - *((void *)v2 + 59));
  }
  uint64_t v252 = *((void *)v2 + 55);
  if (v252)
  {
    std::vector<GeoCodecs3DBuildingFeature,geo::StdAllocator<GeoCodecs3DBuildingFeature,geo::codec::Allocator>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2 + 440, v252);
    (*(void (**)(void, void, void))(**((void **)v2 + 58) + 40))(*((void *)v2 + 58), *((void *)v2 + 55), *((void *)v2 + 57) - *((void *)v2 + 55));
  }
  int v286 = (uint64_t *)((char *)v2 + 408);
  std::vector<GeoCodecsBuildingFootprintFeature,geo::StdAllocator<GeoCodecsBuildingFootprintFeature,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100](&v286);
  int v286 = (uint64_t *)((char *)v2 + 376);
  std::vector<GeoCodecsBuildingFootprintFeature,geo::StdAllocator<GeoCodecsBuildingFootprintFeature,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100](&v286);
  uint64_t v253 = *((void *)v2 + 43);
  if (v253)
  {
    *((void *)v2 + 44) = v253;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 46) + 40))(*((void *)v2 + 46), v253, *((void *)v2 + 45) - v253);
  }
  uint64_t v254 = *((void *)v2 + 39);
  if (v254)
  {
    *((void *)v2 + 40) = v254;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 42) + 40))(*((void *)v2 + 42), v254, *((void *)v2 + 41) - v254);
  }
  int v286 = (uint64_t *)((char *)v2 + 280);
  std::vector<GeoCodecsBuildingFootprintFeature,geo::StdAllocator<GeoCodecsBuildingFootprintFeature,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100](&v286);
  uint64_t v255 = *((void *)v2 + 27);
  if (!v255) {
    goto LABEL_442;
  }
  uint64_t v256 = *((void *)v2 + 28);
  uint64_t v257 = *((void *)v2 + 27);
  if (v256 == v255) {
    goto LABEL_441;
  }
  while (2)
  {
    int v258 = *(std::__shared_weak_count **)(v256 - 120);
    if (v258 && !atomic_fetch_add(&v258->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, uint64_t))v258->__on_zero_shared)(v258, v257);
      std::__shared_weak_count::__release_weak(v258);
      unsigned int v259 = *(std::__shared_weak_count **)(v256 - 144);
      if (v259) {
LABEL_437:
      }
        std::__shared_weak_count::__release_weak(v259);
    }
    else
    {
      unsigned int v259 = *(std::__shared_weak_count **)(v256 - 144);
      if (v259) {
        goto LABEL_437;
      }
    }
    v256 -= 152;
    if (v256 != v255) {
      continue;
    }
    break;
  }
  uint64_t v257 = *((void *)v2 + 27);
LABEL_441:
  *((void *)v2 + 28) = v255;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 30) + 40))(*((void *)v2 + 30), v257, *((void *)v2 + 29) - v257);
LABEL_442:
  uint64_t v260 = *((void *)v2 + 23);
  if (!v260) {
    goto LABEL_454;
  }
  uint64_t v261 = *((void *)v2 + 24);
  uint64_t v262 = *((void *)v2 + 23);
  if (v261 == v260) {
    goto LABEL_453;
  }
  while (2)
  {
    int v263 = *(std::__shared_weak_count **)(v261 - 112);
    if (v263 && !atomic_fetch_add(&v263->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, uint64_t))v263->__on_zero_shared)(v263, v262);
      std::__shared_weak_count::__release_weak(v263);
      unsigned int v264 = *(std::__shared_weak_count **)(v261 - 136);
      if (v264) {
LABEL_449:
      }
        std::__shared_weak_count::__release_weak(v264);
    }
    else
    {
      unsigned int v264 = *(std::__shared_weak_count **)(v261 - 136);
      if (v264) {
        goto LABEL_449;
      }
    }
    v261 -= 144;
    if (v261 != v260) {
      continue;
    }
    break;
  }
  uint64_t v262 = *((void *)v2 + 23);
LABEL_453:
  *((void *)v2 + 24) = v260;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 26) + 40))(*((void *)v2 + 26), v262, *((void *)v2 + 25) - v262);
LABEL_454:
  uint64_t v265 = *((void *)v2 + 19);
  if (!v265) {
    goto LABEL_466;
  }
  uint64_t v266 = *((void *)v2 + 20);
  uint64_t v267 = *((void *)v2 + 19);
  if (v266 == v265) {
    goto LABEL_465;
  }
  while (2)
  {
    int v268 = *(std::__shared_weak_count **)(v266 - 144);
    if (v268 && !atomic_fetch_add(&v268->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, uint64_t))v268->__on_zero_shared)(v268, v267);
      std::__shared_weak_count::__release_weak(v268);
      unsigned int v269 = *(std::__shared_weak_count **)(v266 - 168);
      if (v269) {
LABEL_461:
      }
        std::__shared_weak_count::__release_weak(v269);
    }
    else
    {
      unsigned int v269 = *(std::__shared_weak_count **)(v266 - 168);
      if (v269) {
        goto LABEL_461;
      }
    }
    v266 -= 176;
    if (v266 != v265) {
      continue;
    }
    break;
  }
  uint64_t v267 = *((void *)v2 + 19);
LABEL_465:
  *((void *)v2 + 20) = v265;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 22) + 40))(*((void *)v2 + 22), v267, *((void *)v2 + 21) - v267);
LABEL_466:
  uint64_t v270 = *((void *)v2 + 12);
  if (!v270) {
    goto LABEL_478;
  }
  uint64_t v271 = *((void *)v2 + 13);
  uint64_t v272 = *((void *)v2 + 12);
  if (v271 == v270) {
    goto LABEL_477;
  }
  while (2)
  {
    int v273 = *(std::__shared_weak_count **)(v271 - 96);
    if (v273 && !atomic_fetch_add(&v273->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, uint64_t))v273->__on_zero_shared)(v273, v272);
      std::__shared_weak_count::__release_weak(v273);
      unsigned int v274 = *(std::__shared_weak_count **)(v271 - 120);
      if (v274) {
LABEL_473:
      }
        std::__shared_weak_count::__release_weak(v274);
    }
    else
    {
      unsigned int v274 = *(std::__shared_weak_count **)(v271 - 120);
      if (v274) {
        goto LABEL_473;
      }
    }
    v271 -= 128;
    if (v271 != v270) {
      continue;
    }
    break;
  }
  uint64_t v272 = *((void *)v2 + 12);
LABEL_477:
  *((void *)v2 + 13) = v270;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 15) + 40))(*((void *)v2 + 15), v272, *((void *)v2 + 14) - v272);
LABEL_478:
  uint64_t v275 = *((void *)v2 + 8);
  if (!v275) {
    goto LABEL_490;
  }
  uint64_t v276 = *((void *)v2 + 9);
  uint64_t v277 = *((void *)v2 + 8);
  if (v276 == v275) {
    goto LABEL_489;
  }
  while (2)
  {
    int v278 = *(std::__shared_weak_count **)(v276 - 72);
    if (v278 && !atomic_fetch_add(&v278->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, uint64_t))v278->__on_zero_shared)(v278, v277);
      std::__shared_weak_count::__release_weak(v278);
      char v279 = *(std::__shared_weak_count **)(v276 - 96);
      if (v279) {
LABEL_485:
      }
        std::__shared_weak_count::__release_weak(v279);
    }
    else
    {
      char v279 = *(std::__shared_weak_count **)(v276 - 96);
      if (v279) {
        goto LABEL_485;
      }
    }
    v276 -= 104;
    if (v276 != v275) {
      continue;
    }
    break;
  }
  uint64_t v277 = *((void *)v2 + 8);
LABEL_489:
  *((void *)v2 + 9) = v275;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 11) + 40))(*((void *)v2 + 11), v277, *((void *)v2 + 10) - v277);
LABEL_490:
  uint64_t v280 = *((void *)v2 + 4);
  if (!v280) {
    goto LABEL_502;
  }
  uint64_t v281 = *((void *)v2 + 5);
  uint64_t v282 = *((void *)v2 + 4);
  if (v281 == v280) {
    goto LABEL_501;
  }
  while (2)
  {
    uint64_t v283 = *(std::__shared_weak_count **)(v281 - 136);
    if (v283 && !atomic_fetch_add(&v283->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, uint64_t))v283->__on_zero_shared)(v283, v282);
      std::__shared_weak_count::__release_weak(v283);
      unint64_t v284 = *(std::__shared_weak_count **)(v281 - 160);
      if (v284) {
LABEL_497:
      }
        std::__shared_weak_count::__release_weak(v284);
    }
    else
    {
      unint64_t v284 = *(std::__shared_weak_count **)(v281 - 160);
      if (v284) {
        goto LABEL_497;
      }
    }
    v281 -= 168;
    if (v281 != v280) {
      continue;
    }
    break;
  }
  uint64_t v282 = *((void *)v2 + 4);
LABEL_501:
  *((void *)v2 + 5) = v280;
  (*(void (**)(void, uint64_t, uint64_t))(**((void **)v2 + 7) + 40))(*((void *)v2 + 7), v282, *((void *)v2 + 6) - v282);
LABEL_502:
  char v285 = (std::__shared_weak_count *)*((void *)v2 + 3);
  if (v285)
  {
    if (!atomic_fetch_add(&v285->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
      std::__shared_weak_count::__release_weak(v285);
    }
  }
}

geo::codec::Allocator *geo::codec::VertexPoolDealloc(geo::codec::Allocator *this, GeoCodecsVertexPool *a2)
{
  if (this)
  {
    unsigned int v2 = this;
    uint64_t v3 = geo::codec::Allocator::instance(this);
    uint64_t v4 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v3 + 40))(v3, *((void *)v2 + 1), 0);
    uint64_t v5 = geo::codec::Allocator::instance(v4);
    uint64_t v6 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v5 + 40))(v5, *((void *)v2 + 4), 0);
    if (*((void *)v2 + 3))
    {
      uint64_t v7 = geo::codec::Allocator::instance(v6);
      uint64_t v6 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v7 + 40))(v7, *((void *)v2 + 3), 0);
    }
    if (*((void *)v2 + 7))
    {
      uint64_t v8 = geo::codec::Allocator::instance(v6);
      uint64_t v6 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v8 + 40))(v8, *((void *)v2 + 7), 0);
    }
    if (*((void *)v2 + 8))
    {
      uint64_t v9 = geo::codec::Allocator::instance(v6);
      uint64_t v6 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v9 + 40))(v9, *((void *)v2 + 8), 0);
    }
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)geo::codec::Allocator::instance(v6) + 40);
    return (geo::codec::Allocator *)v10();
  }
  return this;
}

uint64_t **std::vector<GeoCodecsContourLinesFeature,geo::StdAllocator<GeoCodecsContourLinesFeature,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  id v1 = *result;
  uint64_t v2 = **result;
  if (!v2) {
    return result;
  }
  uint64_t v3 = v1[1];
  uint64_t v4 = **result;
  uint64_t v5 = *result;
  if (v3 == v2) {
    goto LABEL_12;
  }
  uint64_t v6 = result;
  do
  {
    uint64_t v7 = *(std::__shared_weak_count **)(v3 - 16);
    if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v8 = *(std::__shared_weak_count **)(v3 - 48);
      if (!v8) {
        goto LABEL_4;
      }
LABEL_8:
      std::__shared_weak_count::__release_weak(v8);
      goto LABEL_4;
    }
    ((void (*)(std::__shared_weak_count *, uint64_t))v7->__on_zero_shared)(v7, v4);
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v8 = *(std::__shared_weak_count **)(v3 - 48);
    if (v8) {
      goto LABEL_8;
    }
LABEL_4:
    v3 -= 56;
  }
  while (v3 != v2);
  uint64_t v5 = *v6;
  uint64_t v4 = **v6;
LABEL_12:
  v1[1] = v2;
  return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[3] + 40))(v5[3], v4, v5[2] - v4);
}

uint64_t **std::vector<GeoCodecsBuildingFootprintFeature,geo::StdAllocator<GeoCodecsBuildingFootprintFeature,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  id v1 = *result;
  uint64_t v2 = **result;
  if (!v2) {
    return result;
  }
  uint64_t v3 = v1[1];
  uint64_t v4 = **result;
  uint64_t v5 = *result;
  if (v3 == v2) {
    goto LABEL_12;
  }
  uint64_t v6 = result;
  do
  {
    uint64_t v7 = *(std::__shared_weak_count **)(v3 - 104);
    if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      uint64_t v8 = *(std::__shared_weak_count **)(v3 - 128);
      if (!v8) {
        goto LABEL_4;
      }
LABEL_8:
      std::__shared_weak_count::__release_weak(v8);
      goto LABEL_4;
    }
    ((void (*)(std::__shared_weak_count *, uint64_t))v7->__on_zero_shared)(v7, v4);
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v8 = *(std::__shared_weak_count **)(v3 - 128);
    if (v8) {
      goto LABEL_8;
    }
LABEL_4:
    v3 -= 136;
  }
  while (v3 != v2);
  uint64_t v5 = *v6;
  uint64_t v4 = **v6;
LABEL_12:
  v1[1] = v2;
  return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[3] + 40))(v5[3], v4, v5[2] - v4);
}

geo::codec::Allocator *geo::codec::CurveVertexPoolDealloc(geo::codec::Allocator *this, GeoCodecsCurveVertexPool *a2)
{
  if (this)
  {
    uint64_t v2 = this;
    uint64_t v3 = geo::codec::Allocator::instance(this);
    uint64_t v4 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v3 + 40))(v3, *((void *)v2 + 1), 0);
    uint64_t v5 = geo::codec::Allocator::instance(v4);
    uint64_t v6 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v5 + 40))(v5, *((void *)v2 + 4), 0);
    if (*((void *)v2 + 3))
    {
      uint64_t v7 = geo::codec::Allocator::instance(v6);
      uint64_t v6 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v7 + 40))(v7, *((void *)v2 + 3), 0);
    }
    uint64_t v8 = *(uint64_t (**)(void))(*(void *)geo::codec::Allocator::instance(v6) + 40);
    return (geo::codec::Allocator *)v8();
  }
  return this;
}

void sub_188F85A18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F85AEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABAssignmentResponseReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 116))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOABAssignmentResponseReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 112) = [v8 position];
  *(_DWORD *)(a1 + 116) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOABAssignmentResponseReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOABAssignmentResponseReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOABAssignmentResponseReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOABAssignmentResponseCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
  return Specified;
}

void sub_188F85C84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F85D4C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABAssignmentResponseReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 116);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 112)];
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = *(unsigned __int16 *)(a1 + 128);
  unsigned int v14 = ((v13 >> 5) & 1)
      + ((v13 >> 13) & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(v13), (uint16x4_t)0xFFF7FFF9FFF5FFFALL), (int8x8_t)0x1000100010001))+ ((v13 >> 12) & 1)+ ((v13 >> 10) & 1)+ ((v13 >> 8) & 1));
  while (2)
  {
    uint64_t v15 = 1;
    uint64_t v16 = 1;
    uint64_t v17 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v14;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v16 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v18 = v14 > 5;
        char v19 = v18 & ~(_BYTE)v12 | v10;
        unsigned __int8 v20 = v18 | v12;
        char v90 = v19;
        char v91 = v20 | v19;
        if ((v20 | v9)) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = a3;
        }
        uint64_t v22 = (int *)MEMORY[0x1E4F940E8];
        char v92 = (v21 == 0) | v20;
        BOOL v93 = v20;
        long long v23 = (int *)MEMORY[0x1E4F940C8];
        long long v24 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v14;
LABEL_7:
        uint64_t v15 = v10;
LABEL_8:
        uint64_t v16 = v11;
        uint64_t v17 = v12;
LABEL_10:
        ++v8;
        uint64_t v10 = v15;
        uint64_t v11 = v16;
        uint64_t v12 = v17;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v22) >= *(void *)(v3 + *v7) || *(unsigned char *)(v3 + *v23)) {
      goto LABEL_162;
    }
    char v25 = 0;
    unsigned int v26 = 0;
    unint64_t v27 = 0;
    while (1)
    {
      uint64_t v28 = *v22;
      uint64_t v29 = *(void *)(v3 + v28);
      unint64_t v30 = v29 + 1;
      if (v29 == -1 || v30 > *(void *)(v3 + *v7)) {
        break;
      }
      char v31 = *(unsigned char *)(*(void *)(v3 + *v24) + v29);
      *(void *)(v3 + v28) = v30;
      v27 |= (unint64_t)(v31 & 0x7F) << v25;
      if ((v31 & 0x80) == 0) {
        goto LABEL_25;
      }
      v25 += 7;
      BOOL v32 = v26++ >= 9;
      if (v32)
      {
        unint64_t v27 = 0;
        int v33 = *(unsigned __int8 *)(v3 + *v23);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v23) = 1;
LABEL_25:
    int v33 = *(unsigned __int8 *)(v3 + *v23);
    if (*(unsigned char *)(v3 + *v23)) {
      unint64_t v27 = 0;
    }
LABEL_27:
    if (v33 || (v27 & 7) == 4)
    {
LABEL_162:
      int v89 = 1;
      goto LABEL_163;
    }
    unint64_t v35 = v27 >> 3;
    BOOL v36 = v93;
    if ((v92 & 1) == 0)
    {
      uint64_t v37 = v21;
      do
      {
        int v39 = *v37++;
        int v38 = v39;
        BOOL v36 = v39 != 0;
        if (v39) {
          BOOL v40 = v38 == v35;
        }
        else {
          BOOL v40 = 1;
        }
      }
      while (!v40);
    }
    switch((int)v35)
    {
      case 1:
        if (!v36) {
          goto LABEL_122;
        }
        if ((*(_WORD *)(a1 + 128) & 0x800) == 0)
        {
          uint64_t v41 = PBReaderReadString();
          uint64_t v42 = 80;
          goto LABEL_47;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_186;
        }
        __int16 v83 = 16 * *(_WORD *)(a1 + 128);
        goto LABEL_156;
      case 2:
        if (!v36 || (*(_WORD *)(a1 + 128) & 0x40) != 0) {
          goto LABEL_122;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_186;
        }
        uint64_t v44 = objc_alloc_init(GEOABExperimentAssignment);
        if (!GEOABExperimentAssignmentReadAllFrom((uint64_t)v44, (void *)v3, v11 & 1)) {
          goto LABEL_185;
        }
        PBReaderRecallMark();
        -[GEOABAssignmentResponse _addNoFlagsAssignment:](a1, v44);

        goto LABEL_157;
      case 3:
        if ((v9 & 1) == 0) {
          goto LABEL_122;
        }
        char v45 = 0;
        unsigned int v46 = 0;
        uint64_t v47 = 0;
        *(_WORD *)(a1 + 128) |= 0x10u;
        while (2)
        {
          uint64_t v48 = *v22;
          uint64_t v49 = *(void *)(v3 + v48);
          unint64_t v50 = v49 + 1;
          if (v49 == -1 || v50 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v51 = *(unsigned char *)(*(void *)(v3 + *v24) + v49);
            *(void *)(v3 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              BOOL v32 = v46++ >= 9;
              if (v32)
              {
                uint64_t v47 = 0;
                goto LABEL_127;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          uint64_t v47 = 0;
        }
LABEL_127:
        BOOL v80 = v47 != 0;
        uint64_t v81 = 125;
        goto LABEL_132;
      case 4:
        if ((v9 & 1) == 0) {
          goto LABEL_122;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        *(_WORD *)(a1 + 128) |= 8u;
        while (2)
        {
          uint64_t v55 = *v22;
          uint64_t v56 = *(void *)(v3 + v55);
          unint64_t v57 = v56 + 1;
          if (v56 == -1 || v57 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v58 = *(unsigned char *)(*(void *)(v3 + *v24) + v56);
            *(void *)(v3 + v55) = v57;
            v54 |= (unint64_t)(v58 & 0x7F) << v52;
            if (v58 < 0)
            {
              v52 += 7;
              BOOL v32 = v53++ >= 9;
              if (v32)
              {
                uint64_t v54 = 0;
                goto LABEL_131;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          uint64_t v54 = 0;
        }
LABEL_131:
        BOOL v80 = v54 != 0;
        uint64_t v81 = 124;
LABEL_132:
        *(unsigned char *)(a1 + v81) = v80;
        goto LABEL_158;
      case 5:
        if ((v9 & 1) == 0) {
          goto LABEL_122;
        }
        char v59 = 0;
        unsigned int v60 = 0;
        uint64_t v61 = 0;
        *(_WORD *)(a1 + 128) |= 2u;
        while (2)
        {
          uint64_t v62 = *v22;
          uint64_t v63 = *(void *)(v3 + v62);
          unint64_t v64 = v63 + 1;
          if (v63 == -1 || v64 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v65 = *(unsigned char *)(*(void *)(v3 + *v24) + v63);
            *(void *)(v3 + v62) = v64;
            v61 |= (unint64_t)(v65 & 0x7F) << v59;
            if (v65 < 0)
            {
              v59 += 7;
              BOOL v32 = v60++ >= 9;
              if (v32)
              {
                uint64_t v61 = 0;
                goto LABEL_136;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          uint64_t v61 = 0;
        }
LABEL_136:
        uint64_t v82 = 72;
        goto LABEL_141;
      case 6:
        if (!v36) {
          goto LABEL_122;
        }
        if ((*(_WORD *)(a1 + 128) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_186;
          }
          __int16 v83 = *(_WORD *)(a1 + 128) << 8;
          goto LABEL_156;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_186;
        }
        uint64_t v44 = objc_alloc_init(GEOABClientConfig);
        if (!GEOABClientConfigReadAllFrom((uint64_t)v44, (void *)v3, v11 & 1)) {
          goto LABEL_185;
        }
        PBReaderRecallMark();
        uint64_t v66 = 40;
        goto LABEL_102;
      case 7:
        if (!v36) {
          goto LABEL_122;
        }
        if ((*(_WORD *)(a1 + 128) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_186;
          }
          __int16 v83 = *(_WORD *)(a1 + 128) << 6;
          goto LABEL_156;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_186;
        }
        uint64_t v44 = objc_alloc_init(GEOABSecondPartyPlaceRequestClientMetaData);
        if (!GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom((uint64_t)v44, (void *)v3, v11 & 1)) {
          goto LABEL_185;
        }
        PBReaderRecallMark();
        uint64_t v66 = 56;
        goto LABEL_102;
      case 8:
        if (!v36) {
          goto LABEL_122;
        }
        if ((*(_WORD *)(a1 + 128) & 0x1000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_186;
          }
          __int16 v83 = 8 * *(_WORD *)(a1 + 128);
          goto LABEL_156;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_186;
        }
        uint64_t v44 = objc_alloc_init(GEOABSecondPartyPlaceRequestClientMetaData);
        if (!GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom((uint64_t)v44, (void *)v3, v11 & 1)) {
          goto LABEL_185;
        }
        PBReaderRecallMark();
        uint64_t v66 = 88;
        goto LABEL_102;
      case 9:
        if (!v36) {
          goto LABEL_122;
        }
        if ((*(_WORD *)(a1 + 128) & 0x400) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_186;
          }
          __int16 v83 = 32 * *(_WORD *)(a1 + 128);
          goto LABEL_156;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_186;
        }
        uint64_t v44 = objc_alloc_init(GEOABSecondPartyPlaceRequestClientMetaData);
        if (!GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom((uint64_t)v44, (void *)v3, v11 & 1)) {
          goto LABEL_185;
        }
        PBReaderRecallMark();
        uint64_t v66 = 64;
        goto LABEL_102;
      case 10:
        if (!v36) {
          goto LABEL_122;
        }
        if ((*(_WORD *)(a1 + 128) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_186;
          }
          __int16 v83 = *(_WORD *)(a1 + 128) << 7;
LABEL_156:
          v8 += v83 >> 15;
          goto LABEL_157;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_186;
        }
        uint64_t v44 = objc_alloc_init(GEOABSecondPartyPlaceRequestClientMetaData);
        if (GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom((uint64_t)v44, (void *)v3, v11 & 1))
        {
          PBReaderRecallMark();
          uint64_t v66 = 48;
LABEL_102:
          uint64_t v43 = *(void **)(a1 + v66);
          *(void *)(a1 + v66) = v44;
LABEL_103:

          --v8;
LABEL_157:
          long long v23 = (int *)MEMORY[0x1E4F940C8];
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          long long v24 = (int *)MEMORY[0x1E4F940B8];
LABEL_158:
          if (!(v91 & 1 | (v8 != 0))) {
            goto LABEL_162;
          }
          continue;
        }
LABEL_185:

LABEL_186:
        int v89 = 0;
        long long v23 = (int *)MEMORY[0x1E4F940C8];
LABEL_163:
        if (v90) {
LABEL_164:
        }
          *(_WORD *)(a1 + 128) |= 0x20u;
        if (v93 || (v89 & 1) == 0)
        {
          *(_WORD *)(a1 + 128) |= 0x800u;
          *(_WORD *)(a1 + 128) |= 0x40u;
          *(_WORD *)(a1 + 128) |= 0x80u;
          *(_WORD *)(a1 + 128) |= 0x200u;
          *(_WORD *)(a1 + 128) |= 0x1000u;
          *(_WORD *)(a1 + 128) |= 0x400u;
          *(_WORD *)(a1 + 128) |= 0x100u;
          *(_WORD *)(a1 + 128) |= 0x2000u;
        }
        else if (v21)
        {
          while (1)
          {
            int v86 = *v21++;
            int v85 = v86;
            __int16 v84 = 2048;
            switch(v86)
            {
              case 0:
                goto LABEL_179;
              case 1:
                goto LABEL_177;
              case 2:
                __int16 v84 = 64;
                goto LABEL_177;
              case 3:
              case 4:
              case 5:
                continue;
              case 6:
                __int16 v84 = 128;
                goto LABEL_177;
              case 7:
                __int16 v84 = 512;
                goto LABEL_177;
              case 8:
                __int16 v84 = 4096;
                goto LABEL_177;
              case 9:
                __int16 v84 = 1024;
                goto LABEL_177;
              case 10:
                __int16 v84 = 256;
                goto LABEL_177;
              default:
                if (v85 != 101) {
                  continue;
                }
                __int16 v84 = 0x2000;
LABEL_177:
                *(_WORD *)(a1 + 128) |= v84;
                break;
            }
          }
        }
LABEL_179:
        if (v89) {
          unint64_t v3 = *(unsigned char *)(v3 + *v23) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v93)
        {
          unint64_t v87 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      case 11:
        if ((v9 & 1) == 0) {
          goto LABEL_122;
        }
        char v67 = 0;
        unsigned int v68 = 0;
        uint64_t v61 = 0;
        *(_WORD *)(a1 + 128) |= 1u;
        while (2)
        {
          uint64_t v69 = *v22;
          uint64_t v70 = *(void *)(v3 + v69);
          unint64_t v71 = v70 + 1;
          if (v70 == -1 || v71 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v23) = 1;
          }
          else
          {
            char v72 = *(unsigned char *)(*(void *)(v3 + *v24) + v70);
            *(void *)(v3 + v69) = v71;
            v61 |= (unint64_t)(v72 & 0x7F) << v67;
            if (v72 < 0)
            {
              v67 += 7;
              BOOL v32 = v68++ >= 9;
              if (v32)
              {
                uint64_t v61 = 0;
                goto LABEL_140;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v23)) {
          uint64_t v61 = 0;
        }
LABEL_140:
        uint64_t v82 = 32;
LABEL_141:
        *(void *)(a1 + v82) = v61;
        goto LABEL_158;
      default:
        if (v35 == 100)
        {
          if (v9)
          {
            *(_WORD *)(a1 + 128) |= 4u;
            uint64_t v73 = *v22;
            unint64_t v74 = *(void *)(v3 + v73);
            if (v74 <= 0xFFFFFFFFFFFFFFF7 && v74 + 8 <= *(void *)(v3 + *v7))
            {
              uint64_t v75 = *(void *)(*(void *)(v3 + *v24) + v74);
              *(void *)(v3 + v73) = v74 + 8;
            }
            else
            {
              *(unsigned char *)(v3 + *v23) = 1;
              uint64_t v75 = 0;
            }
            *(void *)(a1 + 104) = v75;
            goto LABEL_158;
          }
LABEL_122:
          char v79 = PBReaderSkipValueWithTag();
          long long v24 = (int *)MEMORY[0x1E4F940B8];
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          long long v23 = (int *)MEMORY[0x1E4F940C8];
          if ((v79 & 1) == 0)
          {
            int v89 = 0;
            goto LABEL_163;
          }
          goto LABEL_158;
        }
        if (v35 == 101)
        {
          if (!v36) {
            goto LABEL_122;
          }
          if ((*(_WORD *)(a1 + 128) & 0x2000) == 0)
          {
            uint64_t v41 = PBReaderReadString();
            uint64_t v42 = 96;
LABEL_47:
            uint64_t v43 = *(void **)(a1 + v42);
            *(void *)(a1 + v42) = v41;
            goto LABEL_103;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_186;
          }
          __int16 v83 = 4 * *(_WORD *)(a1 + 128);
          goto LABEL_156;
        }
        if ((v90 & 1) == 0 || (*(_WORD *)(a1 + 128) & 0x20) != 0) {
          goto LABEL_122;
        }
        if (!*(void *)(a1 + 16))
        {
          id v76 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          uint64_t v77 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v76;
        }
        int v78 = PBUnknownFieldAdd();
        long long v23 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
        long long v24 = (int *)MEMORY[0x1E4F940B8];
        if (!v78)
        {
          int v89 = 0;
          goto LABEL_164;
        }
        goto LABEL_158;
    }
  }
}

unint64_t GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOABSecondPartyPlaceRequestClientMetaDataReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOABSecondPartyPlaceRequestClientMetaDataCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_188F86B84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABSecondPartyPlaceRequestClientMetaDataReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + (*(unsigned char *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 1;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v51 = v17;
        char v52 = v18 | v17;
        if ((v18 | v8)) {
          char v19 = 0;
        }
        else {
          char v19 = a3;
        }
        unsigned __int8 v20 = (int *)MEMORY[0x1E4F940E8];
        char v53 = (v19 == 0) | v18;
        BOOL v54 = v18;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_69;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_69:
      int v49 = 1;
      goto LABEL_70;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v54;
    if ((v53 & 1) == 0)
    {
      unint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 != 5) {
      break;
    }
    if (v34)
    {
      if ((*(unsigned char *)(a1 + 60) & 4) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_87;
        }
        v7 += *(unsigned __int8 *)(a1 + 60) << 29 >> 31;
      }
      else
      {
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_87;
        }
        int v39 = objc_alloc_init(GEOPDABClientDatasetMetadata);
        if (!GEOPDABClientDatasetMetadataReadAllFrom((uint64_t)v39, (void *)v3)) {
          goto LABEL_86;
        }
        PBReaderRecallMark();
        BOOL v40 = *(void **)(a1 + 32);
        *(void *)(a1 + 32) = v39;

        --v7;
      }
      goto LABEL_67;
    }
LABEL_63:
    char v44 = PBReaderSkipValueWithTag();
    uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
    if ((v44 & 1) == 0)
    {
      int v49 = 0;
LABEL_70:
      unint64_t v50 = &OBJC_IVAR___GEOPDSearchViewportInfo__mapRegion;
      goto LABEL_71;
    }
LABEL_68:
    if (!(v52 & 1 | (v7 != 0))) {
      goto LABEL_69;
    }
  }
  if (v33 != 2)
  {
    if (v33 == 1)
    {
      if (v34 && (*(unsigned char *)(a1 + 60) & 8) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_87;
        }
        int v39 = objc_alloc_init(GEOABExperimentAssignment);
        if (!GEOABExperimentAssignmentReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1)) {
          goto LABEL_86;
        }
        PBReaderRecallMark();
        -[GEOABSecondPartyPlaceRequestClientMetaData _addNoFlagsServerAbAssignment:](a1, v39);
LABEL_56:

LABEL_67:
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        goto LABEL_68;
      }
    }
    else if ((v51 & 1) != 0 && (*(unsigned char *)(a1 + 60) & 1) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        uint64_t v42 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v41;
      }
      int v43 = PBUnknownFieldAdd();
      uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
      if (!v43)
      {
        int v49 = 0;
        unint64_t v50 = &OBJC_IVAR___GEOPDSearchViewportInfo__mapRegion;
        goto LABEL_72;
      }
      goto LABEL_68;
    }
    goto LABEL_63;
  }
  if (!v34 || (*(unsigned char *)(a1 + 60) & 2) != 0) {
    goto LABEL_63;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_87;
  }
  int v39 = objc_alloc_init(GEOABClientConfig);
  if (GEOABClientConfigReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    -[GEOABSecondPartyPlaceRequestClientMetaData _addNoFlagsClientConfig:](a1, v39);
    goto LABEL_56;
  }
LABEL_86:

LABEL_87:
  int v49 = 0;
  unint64_t v50 = &OBJC_IVAR___GEOPDSearchViewportInfo__mapRegion;
  uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_71:
  if ((v51 & 1) == 0) {
    goto LABEL_73;
  }
LABEL_72:
  *(unsigned char *)(a1 + v50[441]) |= 1u;
LABEL_73:
  if (v54 || (v49 & 1) == 0)
  {
    *(unsigned char *)(a1 + v50[441]) |= 8u;
    *(unsigned char *)(a1 + v50[441]) |= 2u;
    *(unsigned char *)(a1 + v50[441]) |= 4u;
  }
  else if (v19)
  {
    while (1)
    {
      int v45 = *v19++;
      char v46 = 8;
      switch(v45)
      {
        case 0:
          goto LABEL_80;
        case 1:
          goto LABEL_79;
        case 2:
          char v46 = 2;
          goto LABEL_79;
        case 5:
          char v46 = 4;
LABEL_79:
          *(unsigned char *)(a1 + v50[441]) |= v46;
          break;
        default:
          continue;
      }
    }
  }
LABEL_80:
  if (v49) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v54)
  {
    uint64_t v47 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

unint64_t GEOABClientConfigReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOABClientConfigReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOABClientConfigReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOABClientConfigReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOABClientConfigReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOABClientConfigCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_188F87368(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABClientConfigReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + (*(unsigned char *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 > 1;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v52 = v17;
        char v53 = v18 | v17;
        if ((v18 | v8)) {
          char v19 = 0;
        }
        else {
          char v19 = a3;
        }
        char v54 = (v19 == 0) | v18;
        BOOL v55 = v18;
        unsigned __int8 v20 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_67;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_67:
      int v50 = 1;
      goto LABEL_68;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v55;
    if ((v54 & 1) == 0)
    {
      unint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 3) {
      break;
    }
    if (v33 == 2)
    {
      if (v34)
      {
        if ((*(unsigned char *)(a1 + 60) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_85;
          }
          v7 += *(unsigned __int8 *)(a1 + 60) << 30 >> 31;
        }
        else
        {
          uint64_t v40 = PBReaderReadString();
          id v41 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = v40;

          --v7;
        }
        goto LABEL_65;
      }
    }
    else if (v33 == 1)
    {
      if (v34 && (*(unsigned char *)(a1 + 60) & 4) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_85;
        }
        int v39 = objc_alloc_init(GEOABConfigKeyValuePair);
        if (!GEOABConfigKeyValuePairReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1)) {
          goto LABEL_84;
        }
        PBReaderRecallMark();
        -[GEOABClientConfig _addNoFlagsConfigKeyValue:](a1, v39);
LABEL_51:

LABEL_65:
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        goto LABEL_66;
      }
    }
    else if ((v52 & 1) != 0 && (*(unsigned char *)(a1 + 60) & 1) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v42 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        int v43 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v42;
      }
      int v44 = PBUnknownFieldAdd();
      uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
      if (!v44)
      {
        int v50 = 0;
        char v51 = &OBJC_IVAR___GEOPDSearchViewportInfo__mapRegion;
        goto LABEL_70;
      }
      goto LABEL_66;
    }
LABEL_61:
    char v45 = PBReaderSkipValueWithTag();
    uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
    if ((v45 & 1) == 0)
    {
      int v50 = 0;
LABEL_68:
      char v51 = &OBJC_IVAR___GEOPDSearchViewportInfo__mapRegion;
      goto LABEL_69;
    }
LABEL_66:
    if (!(v53 & 1 | (v7 != 0))) {
      goto LABEL_67;
    }
  }
  if (!v34 || (*(unsigned char *)(a1 + 60) & 8) != 0) {
    goto LABEL_61;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_85;
  }
  int v39 = objc_alloc_init(GEOABClientDebugPanelExperimentBranch);
  if (GEOABClientDebugPanelExperimentBranchReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    -[GEOABClientConfig _addNoFlagsDebugExperimentBranch:](a1, v39);
    goto LABEL_51;
  }
LABEL_84:

LABEL_85:
  int v50 = 0;
  char v51 = &OBJC_IVAR___GEOPDSearchViewportInfo__mapRegion;
  uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_69:
  if ((v52 & 1) == 0) {
    goto LABEL_71;
  }
LABEL_70:
  *(unsigned char *)(a1 + v51[430]) |= 1u;
LABEL_71:
  if (v55 || (v50 & 1) == 0)
  {
    *(unsigned char *)(a1 + v51[430]) |= 4u;
    *(unsigned char *)(a1 + v51[430]) |= 2u;
    *(unsigned char *)(a1 + v51[430]) |= 8u;
  }
  else if (v19)
  {
    while (1)
    {
      int v46 = *v19++;
      char v47 = 4;
      switch(v46)
      {
        case 0:
          goto LABEL_78;
        case 1:
          goto LABEL_77;
        case 2:
          char v47 = 2;
          goto LABEL_77;
        case 3:
          char v47 = 8;
LABEL_77:
          *(unsigned char *)(a1 + v51[430]) |= v47;
          break;
        default:
          continue;
      }
    }
  }
LABEL_78:
  if (v50) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v55)
  {
    uint64_t v48 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

uint64_t _GEOABClientConfigIsDirty(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  if ((*(unsigned char *)(a1 + 60) & 0x1E) != 0) {
    return 1;
  }
  if ((*(unsigned char *)(a1 + 60) & 8) == 0) {
    return 0;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v3 = *(id *)(a1 + 40);
  uint64_t v2 = [v3 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v2)
  {
    uint64_t v4 = *(void *)v8;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v3);
        }
        if ((GEOABClientDebugPanelExperimentBranchIsDirty(*(os_unfair_lock_s **)(*((void *)&v7 + 1)
                                                                                                 + 8 * i)) & 1) != 0)
        {
          uint64_t v2 = 1;
          goto LABEL_15;
        }
      }
      uint64_t v2 = [v3 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_15:

  return v2;
}

BOOL GEOPDABClientDatasetMetadataReadAllFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    uint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      long long v7 = (int *)MEMORY[0x1E4F940B8];
      while (1)
      {
        if (v3[*v6]) {
          goto LABEL_49;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          unint64_t v12 = *(void *)&v3[v11];
          if (v12 == -1 || v12 >= *(void *)&v3[*v5]) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v15 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v15 || (v10 & 7) == 4) {
          goto LABEL_49;
        }
        if ((v10 >> 3) == 2) {
          break;
        }
        if ((v10 >> 3) == 1)
        {
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 24) |= 1u;
          while (1)
          {
            uint64_t v20 = *v4;
            unint64_t v21 = *(void *)&v3[v20];
            if (v21 == -1 || v21 >= *(void *)&v3[*v5])
            {
              unsigned int v24 = &OBJC_IVAR___GEOPDABClientDatasetMetadata__bucketId;
              goto LABEL_41;
            }
            char v22 = *(unsigned char *)(*(void *)&v3[*v7] + v21);
            *(void *)&v3[v20] = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              break;
            }
            v17 += 7;
            BOOL v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              unsigned int v24 = &OBJC_IVAR___GEOPDABClientDatasetMetadata__bucketId;
              goto LABEL_44;
            }
          }
          unsigned int v24 = &OBJC_IVAR___GEOPDABClientDatasetMetadata__bucketId;
LABEL_42:
          if (v3[*v6]) {
            LODWORD(v19) = 0;
          }
LABEL_44:
          *(_DWORD *)(a1 + *v24) = v19;
          goto LABEL_45;
        }
        if (!*(void *)(a1 + 8))
        {
          id v30 = objc_alloc_init(MEMORY[0x1E4F940B0]);
          int v31 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v30;
        }
        if ((PBUnknownFieldAdd() & 1) == 0) {
          goto LABEL_50;
        }
LABEL_45:
        if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
          goto LABEL_49;
        }
      }
      char v25 = 0;
      unsigned int v26 = 0;
      uint64_t v19 = 0;
      *(unsigned char *)(a1 + 24) |= 2u;
      while (1)
      {
        uint64_t v27 = *v4;
        unint64_t v28 = *(void *)&v3[v27];
        if (v28 == -1 || v28 >= *(void *)&v3[*v5]) {
          break;
        }
        char v29 = *(unsigned char *)(*(void *)&v3[*v7] + v28);
        *(void *)&v3[v27] = v28 + 1;
        v19 |= (unint64_t)(v29 & 0x7F) << v25;
        if ((v29 & 0x80) == 0)
        {
          unsigned int v24 = &OBJC_IVAR___GEOPDABClientDatasetMetadata__datasetId;
          goto LABEL_42;
        }
        v25 += 7;
        BOOL v23 = v26++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          unsigned int v24 = &OBJC_IVAR___GEOPDABClientDatasetMetadata__datasetId;
          goto LABEL_44;
        }
      }
      unsigned int v24 = &OBJC_IVAR___GEOPDABClientDatasetMetadata__datasetId;
LABEL_41:
      v3[*v6] = 1;
      goto LABEL_42;
    }
LABEL_49:
    BOOL v32 = v3[*v6] == 0;
  }
  else
  {
LABEL_50:
    BOOL v32 = 0;
  }
  objc_sync_exit(v3);

  return v32;
}

void sub_188F87E0C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::V2AddressObjectProto::SerializeWithCachedSizesToArray(addr_obj::V2AddressObjectProto *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  id v3 = a2;
  int v5 = *((_DWORD *)this + 35);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 5);
    *a2 = 10;
    long long v7 = a2 + 1;
    if (*(char *)(v6 + 23) < 0) {
      char v8 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v6 + 8);
    }
    else {
      char v8 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v6 + 23);
    }
    if (v8 > 0x7F)
    {
      unsigned int v9 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v8, v7, a3);
    }
    else
    {
      v3[1] = v8;
      unsigned int v9 = v3 + 2;
    }
    int v10 = *(char *)(v6 + 23);
    if (v10 >= 0) {
      uint64_t v11 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v6;
    }
    else {
      uint64_t v11 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v6;
    }
    if (v10 >= 0) {
      unint64_t v12 = (const void *)*(unsigned __int8 *)(v6 + 23);
    }
    else {
      unint64_t v12 = (const void *)*(unsigned int *)(v6 + 8);
    }
    id v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v11, v12, v9, v3);
    int v5 = *((_DWORD *)this + 35);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_40;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v13 = *((void *)this + 6);
  unsigned __int8 *v3 = 18;
  if (*(char *)(v13 + 23) < 0) {
    uint64_t v14 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v13 + 8);
  }
  else {
    uint64_t v14 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v13 + 23);
  }
  if (v14 > 0x7F)
  {
    int v15 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v14, v3 + 1, a3);
  }
  else
  {
    v3[1] = v14;
    int v15 = v3 + 2;
  }
  int v16 = *(char *)(v13 + 23);
  if (v16 >= 0) {
    char v17 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v13;
  }
  else {
    char v17 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v13;
  }
  if (v16 >= 0) {
    unsigned int v18 = (const void *)*(unsigned __int8 *)(v13 + 23);
  }
  else {
    unsigned int v18 = (const void *)*(unsigned int *)(v13 + 8);
  }
  id v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v17, v18, v15, v3);
  int v5 = *((_DWORD *)this + 35);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_53;
  }
LABEL_40:
  uint64_t v19 = *((void *)this + 7);
  unsigned __int8 *v3 = 26;
  if (*(char *)(v19 + 23) < 0) {
    uint64_t v20 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v19 + 8);
  }
  else {
    uint64_t v20 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v19 + 23);
  }
  if (v20 > 0x7F)
  {
    unint64_t v21 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v20, v3 + 1, a3);
  }
  else
  {
    v3[1] = v20;
    unint64_t v21 = v3 + 2;
  }
  int v22 = *(char *)(v19 + 23);
  if (v22 >= 0) {
    BOOL v23 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v19;
  }
  else {
    BOOL v23 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v19;
  }
  if (v22 >= 0) {
    unsigned int v24 = (const void *)*(unsigned __int8 *)(v19 + 23);
  }
  else {
    unsigned int v24 = (const void *)*(unsigned int *)(v19 + 8);
  }
  id v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v23, v24, v21, v3);
  int v5 = *((_DWORD *)this + 35);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_66;
  }
LABEL_53:
  uint64_t v25 = *((void *)this + 8);
  unsigned __int8 *v3 = 34;
  if (*(char *)(v25 + 23) < 0) {
    unsigned int v26 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v25 + 8);
  }
  else {
    unsigned int v26 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v25 + 23);
  }
  if (v26 > 0x7F)
  {
    uint64_t v27 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v26, v3 + 1, a3);
  }
  else
  {
    v3[1] = v26;
    uint64_t v27 = v3 + 2;
  }
  int v28 = *(char *)(v25 + 23);
  if (v28 >= 0) {
    char v29 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v25;
  }
  else {
    char v29 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v25;
  }
  if (v28 >= 0) {
    id v30 = (const void *)*(unsigned __int8 *)(v25 + 23);
  }
  else {
    id v30 = (const void *)*(unsigned int *)(v25 + 8);
  }
  id v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v29, v30, v27, v3);
  int v5 = *((_DWORD *)this + 35);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_79;
  }
LABEL_66:
  uint64_t v31 = *((void *)this + 10);
  unsigned __int8 *v3 = 42;
  if (*(char *)(v31 + 23) < 0) {
    BOOL v32 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v31 + 8);
  }
  else {
    BOOL v32 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v31 + 23);
  }
  if (v32 > 0x7F)
  {
    unint64_t v33 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v32, v3 + 1, a3);
  }
  else
  {
    v3[1] = v32;
    unint64_t v33 = v3 + 2;
  }
  int v34 = *(char *)(v31 + 23);
  if (v34 >= 0) {
    unint64_t v35 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v31;
  }
  else {
    unint64_t v35 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v31;
  }
  if (v34 >= 0) {
    int v36 = (const void *)*(unsigned __int8 *)(v31 + 23);
  }
  else {
    int v36 = (const void *)*(unsigned int *)(v31 + 8);
  }
  id v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v35, v36, v33, v3);
  int v5 = *((_DWORD *)this + 35);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_92;
  }
LABEL_79:
  uint64_t v37 = *((void *)this + 11);
  unsigned __int8 *v3 = 50;
  if (*(char *)(v37 + 23) < 0) {
    BOOL v38 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v37 + 8);
  }
  else {
    BOOL v38 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v37 + 23);
  }
  if (v38 > 0x7F)
  {
    int v39 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v38, v3 + 1, a3);
  }
  else
  {
    v3[1] = v38;
    int v39 = v3 + 2;
  }
  int v40 = *(char *)(v37 + 23);
  if (v40 >= 0) {
    id v41 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v37;
  }
  else {
    id v41 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v37;
  }
  if (v40 >= 0) {
    id v42 = (const void *)*(unsigned __int8 *)(v37 + 23);
  }
  else {
    id v42 = (const void *)*(unsigned int *)(v37 + 8);
  }
  id v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v41, v42, v39, v3);
  int v5 = *((_DWORD *)this + 35);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_105;
  }
LABEL_92:
  uint64_t v43 = *((void *)this + 12);
  unsigned __int8 *v3 = 58;
  if (*(char *)(v43 + 23) < 0) {
    int v44 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v43 + 8);
  }
  else {
    int v44 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v43 + 23);
  }
  if (v44 > 0x7F)
  {
    char v45 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v44, v3 + 1, a3);
  }
  else
  {
    v3[1] = v44;
    char v45 = v3 + 2;
  }
  int v46 = *(char *)(v43 + 23);
  if (v46 >= 0) {
    char v47 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v43;
  }
  else {
    char v47 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v43;
  }
  if (v46 >= 0) {
    uint64_t v48 = (const void *)*(unsigned __int8 *)(v43 + 23);
  }
  else {
    uint64_t v48 = (const void *)*(unsigned int *)(v43 + 8);
  }
  id v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v47, v48, v45, v3);
  int v5 = *((_DWORD *)this + 35);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_118;
  }
LABEL_105:
  uint64_t v49 = *((void *)this + 9);
  unsigned __int8 *v3 = 66;
  if (*(char *)(v49 + 23) < 0) {
    int v50 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v49 + 8);
  }
  else {
    int v50 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v49 + 23);
  }
  if (v50 > 0x7F)
  {
    char v51 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v50, v3 + 1, a3);
  }
  else
  {
    v3[1] = v50;
    char v51 = v3 + 2;
  }
  int v52 = *(char *)(v49 + 23);
  if (v52 >= 0) {
    char v53 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v49;
  }
  else {
    char v53 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v49;
  }
  if (v52 >= 0) {
    char v54 = (const void *)*(unsigned __int8 *)(v49 + 23);
  }
  else {
    char v54 = (const void *)*(unsigned int *)(v49 + 8);
  }
  id v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v53, v54, v51, v3);
  int v5 = *((_DWORD *)this + 35);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_131;
  }
LABEL_118:
  uint64_t v55 = *((void *)this + 13);
  unsigned __int8 *v3 = 74;
  if (*(char *)(v55 + 23) < 0) {
    uint64_t v56 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v55 + 8);
  }
  else {
    uint64_t v56 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v55 + 23);
  }
  if (v56 > 0x7F)
  {
    unint64_t v57 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v56, v3 + 1, a3);
  }
  else
  {
    v3[1] = v56;
    unint64_t v57 = v3 + 2;
  }
  int v58 = *(char *)(v55 + 23);
  if (v58 >= 0) {
    char v59 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v55;
  }
  else {
    char v59 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v55;
  }
  if (v58 >= 0) {
    unsigned int v60 = (const void *)*(unsigned __int8 *)(v55 + 23);
  }
  else {
    unsigned int v60 = (const void *)*(unsigned int *)(v55 + 8);
  }
  id v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v59, v60, v57, v3);
  int v5 = *((_DWORD *)this + 35);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_144;
  }
LABEL_131:
  uint64_t v61 = *((void *)this + 14);
  unsigned __int8 *v3 = 82;
  if (*(char *)(v61 + 23) < 0) {
    uint64_t v62 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v61 + 8);
  }
  else {
    uint64_t v62 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v61 + 23);
  }
  if (v62 > 0x7F)
  {
    uint64_t v63 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v62, v3 + 1, a3);
  }
  else
  {
    v3[1] = v62;
    uint64_t v63 = v3 + 2;
  }
  int v64 = *(char *)(v61 + 23);
  if (v64 >= 0) {
    char v65 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v61;
  }
  else {
    char v65 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v61;
  }
  if (v64 >= 0) {
    uint64_t v66 = (const void *)*(unsigned __int8 *)(v61 + 23);
  }
  else {
    uint64_t v66 = (const void *)*(unsigned int *)(v61 + 8);
  }
  id v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v65, v66, v63, v3);
  int v5 = *((_DWORD *)this + 35);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_170;
    }
    goto LABEL_157;
  }
LABEL_144:
  uint64_t v67 = *((void *)this + 15);
  unsigned __int8 *v3 = 90;
  if (*(char *)(v67 + 23) < 0) {
    unsigned int v68 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v67 + 8);
  }
  else {
    unsigned int v68 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v67 + 23);
  }
  if (v68 > 0x7F)
  {
    uint64_t v69 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v68, v3 + 1, a3);
  }
  else
  {
    v3[1] = v68;
    uint64_t v69 = v3 + 2;
  }
  int v70 = *(char *)(v67 + 23);
  if (v70 >= 0) {
    unint64_t v71 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v67;
  }
  else {
    unint64_t v71 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v67;
  }
  if (v70 >= 0) {
    char v72 = (const void *)*(unsigned __int8 *)(v67 + 23);
  }
  else {
    char v72 = (const void *)*(unsigned int *)(v67 + 8);
  }
  id v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v71, v72, v69, v3);
  if ((*((_DWORD *)this + 35) & 0x800) != 0)
  {
LABEL_157:
    uint64_t v73 = *((void *)this + 16);
    unsigned __int8 *v3 = 98;
    if (*(char *)(v73 + 23) < 0) {
      unint64_t v74 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v73 + 8);
    }
    else {
      unint64_t v74 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v73 + 23);
    }
    if (v74 > 0x7F)
    {
      uint64_t v75 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v74, v3 + 1, a3);
    }
    else
    {
      v3[1] = v74;
      uint64_t v75 = v3 + 2;
    }
    int v76 = *(char *)(v73 + 23);
    if (v76 >= 0) {
      uint64_t v77 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v73;
    }
    else {
      uint64_t v77 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v73;
    }
    if (v76 >= 0) {
      int v78 = (const void *)*(unsigned __int8 *)(v73 + 23);
    }
    else {
      int v78 = (const void *)*(unsigned int *)(v73 + 8);
    }
    id v3 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v77, v78, v75, v3);
  }
LABEL_170:
  unint64_t result = (const AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::ExtensionSet::SerializeWithCachedSizesToArray((addr_obj::V2AddressObjectProto *)((char *)this + 8), 100, 200, v3);
  __int16 v84 = (void *)*((void *)this + 4);
  __int16 v83 = (uint64_t **)((char *)this + 32);
  uint64_t v82 = v84;
  if (v84 && *v82 != v82[1])
  {
    return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v83, result, v80, v81);
  }
  return result;
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::AddressObjectProto::SerializeWithCachedSizesToArray(unint64_t this, AddrObjGoogle::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v4 = a2;
  unint64_t v5 = this;
  if (*(unsigned char *)(this + 88))
  {
    this = *(int *)(this + 80);
    *(unsigned char *)a2 = 8;
    uint64_t v6 = (char *)a2 + 1;
    if ((this & 0x80000000) != 0)
    {
      this = (unint64_t)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(this, v6, a3);
    }
    else
    {
      if (this <= 0x7F)
      {
        *((unsigned char *)v4 + 1) = this;
        uint64_t v4 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)v4 + 2);
        goto LABEL_8;
      }
      this = (unint64_t)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray((AddrObjGoogle::protobuf::io::CodedOutputStream *)this, v6, a3);
    }
    uint64_t v4 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)this;
  }
LABEL_8:
  int v7 = *(_DWORD *)(v5 + 88);
  if ((v7 & 2) != 0)
  {
    uint64_t v8 = *(void *)(v5 + 16);
    *(unsigned char *)uint64_t v4 = 18;
    if (*(char *)(v8 + 23) < 0) {
      unsigned int v9 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v8 + 8);
    }
    else {
      unsigned int v9 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v8 + 23);
    }
    if (v9 > 0x7F)
    {
      int v10 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v9, (unsigned char *)v4 + 1, a3);
    }
    else
    {
      *((unsigned char *)v4 + 1) = (_BYTE)v9;
      int v10 = (char *)v4 + 2;
    }
    int v11 = *(char *)(v8 + 23);
    if (v11 >= 0) {
      unint64_t v12 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v8;
    }
    else {
      unint64_t v12 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v8;
    }
    if (v11 >= 0) {
      uint64_t v13 = (const void *)*(unsigned __int8 *)(v8 + 23);
    }
    else {
      uint64_t v13 = (const void *)*(unsigned int *)(v8 + 8);
    }
    this = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v12, v13, v10, a4);
    uint64_t v4 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)this;
    int v7 = *(_DWORD *)(v5 + 88);
  }
  if ((v7 & 4) != 0)
  {
    uint64_t v14 = *(unsigned int **)(v5 + 24);
    if (!v14) {
      uint64_t v14 = *(unsigned int **)(addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)this) + 24);
    }
    *(unsigned char *)uint64_t v4 = 26;
    int v15 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v14[10];
    if (v15 > 0x7F)
    {
      int v16 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v15, (unsigned char *)v4 + 1, a3);
    }
    else
    {
      *((unsigned char *)v4 + 1) = (_BYTE)v15;
      int v16 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)v4 + 2);
    }
    this = (unint64_t)addr_obj::LocalizationProto::SerializeWithCachedSizesToArray((addr_obj::LocalizationProto *)v14, v16, a3, a4);
    uint64_t v4 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)this;
  }
  if (*(int *)(v5 + 40) >= 1)
  {
    uint64_t v17 = 0;
    do
    {
      unsigned int v18 = *(unsigned int **)(*(void *)(v5 + 32) + 8 * v17);
      *(unsigned char *)uint64_t v4 = 34;
      uint64_t v19 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v18[12];
      if (v19 > 0x7F)
      {
        uint64_t v20 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v19, (unsigned char *)v4 + 1, a3);
      }
      else
      {
        *((unsigned char *)v4 + 1) = (_BYTE)v19;
        uint64_t v20 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)v4 + 2);
      }
      this = (unint64_t)addr_obj::FingerprintProto::SerializeWithCachedSizesToArray((addr_obj::FingerprintProto *)v18, v20, a3, a4);
      uint64_t v4 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)this;
      ++v17;
    }
    while (v17 < *(int *)(v5 + 40));
  }
  int v21 = *(_DWORD *)(v5 + 88);
  if ((v21 & 0x40) != 0)
  {
    int v22 = *(unsigned int **)(v5 + 72);
    if (!v22) {
      int v22 = *(unsigned int **)(addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)this) + 72);
    }
    *(unsigned char *)uint64_t v4 = 42;
    BOOL v23 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v22[16];
    if (v23 > 0x7F)
    {
      unsigned int v24 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v23, (unsigned char *)v4 + 1, a3);
    }
    else
    {
      *((unsigned char *)v4 + 1) = (_BYTE)v23;
      unsigned int v24 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)v4 + 2);
    }
    this = (unint64_t)addr_obj::VenueInfoProto::SerializeWithCachedSizesToArray((addr_obj::VenueInfoProto *)v22, v24, a3, a4);
    uint64_t v4 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)this;
    int v21 = *(_DWORD *)(v5 + 88);
    if ((v21 & 0x10) == 0)
    {
LABEL_37:
      if ((v21 & 0x20) == 0) {
        goto LABEL_57;
      }
      goto LABEL_51;
    }
  }
  else if ((v21 & 0x10) == 0)
  {
    goto LABEL_37;
  }
  uint64_t v25 = *(unsigned int **)(v5 + 56);
  if (!v25) {
    uint64_t v25 = *(unsigned int **)(addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)this) + 56);
  }
  *(_WORD *)uint64_t v4 = 1698;
  unsigned int v26 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v25[22];
  if (v26 > 0x7F)
  {
    uint64_t v27 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v26, (unsigned char *)v4 + 2, a3);
  }
  else
  {
    *((unsigned char *)v4 + 2) = (_BYTE)v26;
    uint64_t v27 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)v4 + 3);
  }
  this = (unint64_t)addr_obj::V0AddressObjectProto::SerializeWithCachedSizesToArray((addr_obj::V0AddressObjectProto *)v25, v27, a3, a4);
  uint64_t v4 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)this;
  if ((*(_DWORD *)(v5 + 88) & 0x20) != 0)
  {
LABEL_51:
    int v28 = *(unsigned int **)(v5 + 64);
    if (!v28) {
      int v28 = *(unsigned int **)(addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)this) + 64);
    }
    *(_WORD *)uint64_t v4 = 1706;
    char v29 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v28[24];
    if (v29 > 0x7F)
    {
      id v30 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v29, (unsigned char *)v4 + 2, a3);
    }
    else
    {
      *((unsigned char *)v4 + 2) = (_BYTE)v29;
      id v30 = (unsigned __int8 *)v4 + 3;
    }
    uint64_t v4 = addr_obj::V1AddressObjectProto::SerializeWithCachedSizesToArray((addr_obj::V1AddressObjectProto *)v28, v30, a3, a4);
  }
LABEL_57:
  unint64_t v33 = *(void **)(v5 + 8);
  BOOL v32 = (uint64_t **)(v5 + 8);
  uint64_t v31 = v33;
  if (!v33 || *v31 == v31[1]) {
    return v4;
  }

  return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v32, v4, a3, a4);
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::V1AddressObjectProto::SerializeWithCachedSizesToArray(addr_obj::V1AddressObjectProto *this, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v4 = a2;
  unint64_t v5 = this;
  int v6 = *((_DWORD *)this + 25);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 5);
    *a2 = 10;
    uint64_t v8 = a2 + 1;
    if (*(char *)(v7 + 23) < 0) {
      unsigned int v9 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v7 + 8);
    }
    else {
      unsigned int v9 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v7 + 23);
    }
    if (v9 > 0x7F)
    {
      int v10 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v9, v8, a3);
    }
    else
    {
      v4[1] = v9;
      int v10 = v4 + 2;
    }
    int v11 = *(char *)(v7 + 23);
    if (v11 >= 0) {
      unint64_t v12 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v7;
    }
    else {
      unint64_t v12 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v7;
    }
    if (v11 >= 0) {
      uint64_t v13 = (const void *)*(unsigned __int8 *)(v7 + 23);
    }
    else {
      uint64_t v13 = (const void *)*(unsigned int *)(v7 + 8);
    }
    this = (addr_obj::V1AddressObjectProto *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v12, v13, v10, a4);
    uint64_t v4 = (unsigned __int8 *)this;
    int v6 = *((_DWORD *)v5 + 25);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v14 = (unsigned int *)*((void *)v5 + 6);
  if (!v14) {
    uint64_t v14 = *(unsigned int **)(addr_obj::V1AddressObjectProto::default_instance_(this) + 48);
  }
  unsigned __int8 *v4 = 18;
  int v15 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v14[13];
  if (v15 > 0x7F)
  {
    int v16 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v15, v4 + 1, a3);
  }
  else
  {
    v4[1] = v15;
    int v16 = (AddrObjGoogle::protobuf::UnknownFieldSet *)(v4 + 2);
  }
  this = addr_obj::geo3::Address::SerializeWithCachedSizesToArray((addr_obj::geo3::Address *)v14, v16, a3, a4);
  uint64_t v4 = (unsigned __int8 *)this;
  int v6 = *((_DWORD *)v5 + 25);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_41;
  }
LABEL_28:
  uint64_t v17 = *((void *)v5 + 7);
  unsigned __int8 *v4 = 26;
  if (*(char *)(v17 + 23) < 0) {
    unsigned int v18 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v17 + 8);
  }
  else {
    unsigned int v18 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v17 + 23);
  }
  if (v18 > 0x7F)
  {
    uint64_t v19 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v18, v4 + 1, a3);
  }
  else
  {
    v4[1] = v18;
    uint64_t v19 = v4 + 2;
  }
  int v20 = *(char *)(v17 + 23);
  if (v20 >= 0) {
    int v21 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v17;
  }
  else {
    int v21 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v17;
  }
  if (v20 >= 0) {
    int v22 = (const void *)*(unsigned __int8 *)(v17 + 23);
  }
  else {
    int v22 = (const void *)*(unsigned int *)(v17 + 8);
  }
  this = (addr_obj::V1AddressObjectProto *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v21, v22, v19, a4);
  uint64_t v4 = (unsigned __int8 *)this;
  int v6 = *((_DWORD *)v5 + 25);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_54;
  }
LABEL_41:
  uint64_t v23 = *((void *)v5 + 8);
  unsigned __int8 *v4 = 34;
  if (*(char *)(v23 + 23) < 0) {
    unsigned int v24 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v23 + 8);
  }
  else {
    unsigned int v24 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v23 + 23);
  }
  if (v24 > 0x7F)
  {
    uint64_t v25 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v24, v4 + 1, a3);
  }
  else
  {
    v4[1] = v24;
    uint64_t v25 = v4 + 2;
  }
  int v26 = *(char *)(v23 + 23);
  if (v26 >= 0) {
    uint64_t v27 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v23;
  }
  else {
    uint64_t v27 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v23;
  }
  if (v26 >= 0) {
    int v28 = (const void *)*(unsigned __int8 *)(v23 + 23);
  }
  else {
    int v28 = (const void *)*(unsigned int *)(v23 + 8);
  }
  this = (addr_obj::V1AddressObjectProto *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v27, v28, v25, a4);
  uint64_t v4 = (unsigned __int8 *)this;
  int v6 = *((_DWORD *)v5 + 25);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_60:
    uint64_t v32 = *((void *)v5 + 10);
    unsigned __int8 *v4 = 50;
    if (*(char *)(v32 + 23) < 0) {
      unint64_t v33 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v32 + 8);
    }
    else {
      unint64_t v33 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v32 + 23);
    }
    if (v33 > 0x7F)
    {
      int v34 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v33, v4 + 1, a3);
    }
    else
    {
      v4[1] = v33;
      int v34 = v4 + 2;
    }
    int v35 = *(char *)(v32 + 23);
    if (v35 >= 0) {
      int v36 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v32;
    }
    else {
      int v36 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v32;
    }
    if (v35 >= 0) {
      uint64_t v37 = (const void *)*(unsigned __int8 *)(v32 + 23);
    }
    else {
      uint64_t v37 = (const void *)*(unsigned int *)(v32 + 8);
    }
    this = (addr_obj::V1AddressObjectProto *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v36, v37, v34, a4);
    uint64_t v4 = (unsigned __int8 *)this;
    if ((*((_DWORD *)v5 + 25) & 0x40) == 0) {
      goto LABEL_79;
    }
    goto LABEL_73;
  }
LABEL_54:
  char v29 = (unsigned int *)*((void *)v5 + 9);
  if (!v29) {
    char v29 = *(unsigned int **)(addr_obj::V1AddressObjectProto::default_instance_(this) + 72);
  }
  unsigned __int8 *v4 = 42;
  id v30 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v29[60];
  if (v30 > 0x7F)
  {
    uint64_t v31 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v30, v4 + 1, a3);
  }
  else
  {
    v4[1] = v30;
    uint64_t v31 = (AddrObjGoogle::protobuf::UnknownFieldSet *)(v4 + 2);
  }
  this = addr_obj::geo3::StructuredAddress::SerializeWithCachedSizesToArray((addr_obj::geo3::StructuredAddress *)v29, v31, a3, a4);
  uint64_t v4 = (unsigned __int8 *)this;
  int v6 = *((_DWORD *)v5 + 25);
  if ((v6 & 0x20) != 0) {
    goto LABEL_60;
  }
LABEL_7:
  if ((v6 & 0x40) == 0) {
    goto LABEL_79;
  }
LABEL_73:
  BOOL v38 = (unsigned int *)*((void *)v5 + 11);
  if (!v38) {
    BOOL v38 = *(unsigned int **)(addr_obj::V1AddressObjectProto::default_instance_(this) + 88);
  }
  unsigned __int8 *v4 = 58;
  int v39 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v38[13];
  if (v39 > 0x7F)
  {
    int v40 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v39, v4 + 1, a3);
  }
  else
  {
    v4[1] = v39;
    int v40 = (AddrObjGoogle::protobuf::UnknownFieldSet *)(v4 + 2);
  }
  uint64_t v4 = (unsigned __int8 *)addr_obj::geo3::Address::SerializeWithCachedSizesToArray((addr_obj::geo3::Address *)v38, v40, a3, a4);
LABEL_79:
  unint64_t result = (const AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::ExtensionSet::SerializeWithCachedSizesToArray((addr_obj::V1AddressObjectProto *)((char *)v5 + 8), 100, 200, v4);
  int v46 = (void *)*((void *)v5 + 4);
  char v45 = (uint64_t **)((char *)v5 + 32);
  int v44 = v46;
  if (v46 && *v44 != v44[1])
  {
    return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v45, result, v42, v43);
  }
  return result;
}

unsigned __int8 *AddrObjGoogle::protobuf::internal::ExtensionSet::SerializeWithCachedSizesToArray(AddrObjGoogle::protobuf::internal::ExtensionSet *this, int a2, int a3, unsigned __int8 *a4)
{
  unint64_t v5 = (char *)this + 8;
  uint64_t v4 = (char *)*((void *)this + 1);
  if (v4)
  {
    uint64_t v7 = (char *)this + 8;
    do
    {
      int v8 = *((_DWORD *)v4 + 8);
      BOOL v9 = v8 < a2;
      if (v8 >= a2) {
        int v10 = (char **)v4;
      }
      else {
        int v10 = (char **)(v4 + 8);
      }
      if (!v9) {
        uint64_t v7 = v4;
      }
      uint64_t v4 = *v10;
    }
    while (*v10);
    if (v7 != v5)
    {
      do
      {
        int v11 = *((_DWORD *)v7 + 8);
        if (v11 >= a3) {
          break;
        }
        a4 = AddrObjGoogle::protobuf::internal::ExtensionSet::Extension::SerializeFieldWithCachedSizesToArray((AddrObjGoogle::protobuf::internal::ExtensionSet::Extension *)(v7 + 40), v11, a4, a4);
        unint64_t v12 = (char *)*((void *)v7 + 1);
        if (v12)
        {
          do
          {
            uint64_t v13 = v12;
            unint64_t v12 = *(char **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v13 = (char *)*((void *)v7 + 2);
            BOOL v14 = *(void *)v13 == (void)v7;
            uint64_t v7 = v13;
          }
          while (!v14);
        }
        uint64_t v7 = v13;
      }
      while (v13 != v5);
    }
  }
  return a4;
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::LocalizationProto::SerializeWithCachedSizesToArray(addr_obj::LocalizationProto *this, AddrObjGoogle::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 11);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v14 = *((void *)this + 3);
    *(unsigned char *)uint64_t v4 = 18;
    if (*(char *)(v14 + 23) < 0) {
      int v15 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v14 + 8);
    }
    else {
      int v15 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v14 + 23);
    }
    if (v15 > 0x7F)
    {
      int v16 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v15, (unsigned char *)v4 + 1, a3);
    }
    else
    {
      *((unsigned char *)v4 + 1) = (_BYTE)v15;
      int v16 = (char *)v4 + 2;
    }
    int v17 = *(char *)(v14 + 23);
    if (v17 >= 0) {
      unsigned int v18 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v14;
    }
    else {
      unsigned int v18 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v14;
    }
    if (v17 >= 0) {
      uint64_t v19 = (const void *)*(unsigned __int8 *)(v14 + 23);
    }
    else {
      uint64_t v19 = (const void *)*(unsigned int *)(v14 + 8);
    }
    uint64_t v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v18, v19, v16, a4);
    if ((*((_DWORD *)this + 11) & 4) == 0) {
      goto LABEL_44;
    }
    goto LABEL_31;
  }
  uint64_t v7 = *((void *)this + 2);
  *(unsigned char *)a2 = 10;
  int v8 = (char *)a2 + 1;
  if (*(char *)(v7 + 23) < 0) {
    BOOL v9 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v7 + 8);
  }
  else {
    BOOL v9 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v7 + 23);
  }
  if (v9 > 0x7F)
  {
    int v10 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v9, v8, a3);
  }
  else
  {
    *((unsigned char *)v4 + 1) = (_BYTE)v9;
    int v10 = (char *)v4 + 2;
  }
  int v11 = *(char *)(v7 + 23);
  if (v11 >= 0) {
    unint64_t v12 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v7;
  }
  else {
    unint64_t v12 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v7;
  }
  if (v11 >= 0) {
    uint64_t v13 = (const void *)*(unsigned __int8 *)(v7 + 23);
  }
  else {
    uint64_t v13 = (const void *)*(unsigned int *)(v7 + 8);
  }
  uint64_t v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v12, v13, v10, a4);
  int v6 = *((_DWORD *)this + 11);
  if ((v6 & 2) != 0) {
    goto LABEL_18;
  }
LABEL_3:
  if ((v6 & 4) != 0)
  {
LABEL_31:
    uint64_t v20 = *((void *)this + 4);
    *(unsigned char *)uint64_t v4 = 26;
    if (*(char *)(v20 + 23) < 0) {
      int v21 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v20 + 8);
    }
    else {
      int v21 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v20 + 23);
    }
    if (v21 > 0x7F)
    {
      int v22 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v21, (unsigned char *)v4 + 1, a3);
    }
    else
    {
      *((unsigned char *)v4 + 1) = (_BYTE)v21;
      int v22 = (char *)v4 + 2;
    }
    int v23 = *(char *)(v20 + 23);
    if (v23 >= 0) {
      unsigned int v24 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v20;
    }
    else {
      unsigned int v24 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v20;
    }
    if (v23 >= 0) {
      uint64_t v25 = (const void *)*(unsigned __int8 *)(v20 + 23);
    }
    else {
      uint64_t v25 = (const void *)*(unsigned int *)(v20 + 8);
    }
    uint64_t v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v24, v25, v22, a4);
  }
LABEL_44:
  int v28 = (void *)*((void *)this + 1);
  uint64_t v27 = (uint64_t **)((char *)this + 8);
  int v26 = v28;
  if (!v28 || *v26 == v26[1]) {
    return v4;
  }

  return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v27, v4, a3, a4);
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::FingerprintProto::SerializeWithCachedSizesToArray(addr_obj::FingerprintProto *this, AddrObjGoogle::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 13);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 2);
    *(unsigned char *)a2 = 10;
    int v8 = (char *)a2 + 1;
    if (*(char *)(v7 + 23) < 0) {
      BOOL v9 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v7 + 8);
    }
    else {
      BOOL v9 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v7 + 23);
    }
    if (v9 > 0x7F)
    {
      int v10 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v9, v8, a3);
    }
    else
    {
      *((unsigned char *)v4 + 1) = (_BYTE)v9;
      int v10 = (char *)v4 + 2;
    }
    int v11 = *(char *)(v7 + 23);
    if (v11 >= 0) {
      unint64_t v12 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v7;
    }
    else {
      unint64_t v12 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v7;
    }
    if (v11 >= 0) {
      uint64_t v13 = (const void *)*(unsigned __int8 *)(v7 + 23);
    }
    else {
      uint64_t v13 = (const void *)*(unsigned int *)(v7 + 8);
    }
    uint64_t v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v12, v13, v10, a4);
    int v6 = *((_DWORD *)this + 13);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_20:
      uint64_t v15 = *((void *)this + 4);
      *(unsigned char *)uint64_t v4 = 26;
      if (*(char *)(v15 + 23) < 0) {
        int v16 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v15 + 8);
      }
      else {
        int v16 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v15 + 23);
      }
      if (v16 > 0x7F)
      {
        int v17 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v16, (unsigned char *)v4 + 1, a3);
      }
      else
      {
        *((unsigned char *)v4 + 1) = (_BYTE)v16;
        int v17 = (char *)v4 + 2;
      }
      int v18 = *(char *)(v15 + 23);
      if (v18 >= 0) {
        uint64_t v19 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v15;
      }
      else {
        uint64_t v19 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v15;
      }
      if (v18 >= 0) {
        uint64_t v20 = (const void *)*(unsigned __int8 *)(v15 + 23);
      }
      else {
        uint64_t v20 = (const void *)*(unsigned int *)(v15 + 8);
      }
      uint64_t v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v19, v20, v17, a4);
      if ((*((_DWORD *)this + 13) & 8) == 0) {
        goto LABEL_46;
      }
      goto LABEL_33;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v14 = *((void *)this + 3);
  *(unsigned char *)uint64_t v4 = 16;
  uint64_t v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray((2 * v14) ^ (v14 >> 63), (unsigned char *)v4 + 1, a3);
  int v6 = *((_DWORD *)this + 13);
  if ((v6 & 4) != 0) {
    goto LABEL_20;
  }
LABEL_4:
  if ((v6 & 8) != 0)
  {
LABEL_33:
    uint64_t v21 = *((void *)this + 5);
    *(unsigned char *)uint64_t v4 = 34;
    if (*(char *)(v21 + 23) < 0) {
      int v22 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v21 + 8);
    }
    else {
      int v22 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v21 + 23);
    }
    if (v22 > 0x7F)
    {
      int v23 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v22, (unsigned char *)v4 + 1, a3);
    }
    else
    {
      *((unsigned char *)v4 + 1) = (_BYTE)v22;
      int v23 = (char *)v4 + 2;
    }
    int v24 = *(char *)(v21 + 23);
    if (v24 >= 0) {
      uint64_t v25 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v21;
    }
    else {
      uint64_t v25 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v21;
    }
    if (v24 >= 0) {
      int v26 = (const void *)*(unsigned __int8 *)(v21 + 23);
    }
    else {
      int v26 = (const void *)*(unsigned int *)(v21 + 8);
    }
    uint64_t v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v25, v26, v23, a4);
  }
LABEL_46:
  char v29 = (void *)*((void *)this + 1);
  int v28 = (uint64_t **)((char *)this + 8);
  uint64_t v27 = v29;
  if (!v29 || *v27 == v27[1]) {
    return v4;
  }

  return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v28, v4, a3, a4);
}

unsigned char *AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(unint64_t this, unsigned char *a2, unsigned __int8 *a3)
{
  unint64_t v3 = this >> 28;
  if (HIBYTE(this))
  {
    if (HIBYTE(this) >= 0x80)
    {
      a2[9] = -127;
      unsigned int v4 = 10;
    }
    else
    {
      unsigned int v4 = 9;
    }
    a2[8] = HIBYTE(this) | 0x80;
    goto LABEL_10;
  }
  if (v3)
  {
    if (!(v3 >> 14))
    {
      if (v3 < 0x80)
      {
        unsigned int v4 = 5;
LABEL_13:
        a2[4] = v3 | 0x80;
        goto LABEL_14;
      }
      unsigned int v4 = 6;
LABEL_12:
      a2[5] = (this >> 35) | 0x80;
      goto LABEL_13;
    }
    if (v3 < 0x200000)
    {
      unsigned int v4 = 7;
      goto LABEL_11;
    }
    unsigned int v4 = 8;
LABEL_10:
    a2[7] = (this >> 49) | 0x80;
LABEL_11:
    a2[6] = (this >> 42) | 0x80;
    goto LABEL_12;
  }
  if (this >> 14)
  {
    if (this < 0x200000)
    {
      unsigned int v4 = 3;
      goto LABEL_15;
    }
    unsigned int v4 = 4;
LABEL_14:
    a2[3] = (this >> 21) | 0x80;
LABEL_15:
    a2[2] = (this >> 14) | 0x80;
    goto LABEL_16;
  }
  if (this < 0x80)
  {
    unsigned int v4 = 1;
    goto LABEL_17;
  }
  unsigned int v4 = 2;
LABEL_16:
  a2[1] = (this >> 7) | 0x80;
LABEL_17:
  *a2 = this | 0x80;
  a2[v4 - 1] &= ~0x80u;
  return &a2[v4];
}

unsigned __int8 *AddrObjGoogle::protobuf::internal::ExtensionSet::Extension::SerializeFieldWithCachedSizesToArray(AddrObjGoogle::protobuf::internal::ExtensionSet::Extension *this, int a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned int v4 = a3;
  if (*((unsigned char *)this + 9))
  {
    if (*((unsigned char *)this + 11))
    {
      if (*((_DWORD *)this + 3))
      {
        int v6 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 2u);
        if (v6 > 0x7F)
        {
          if (v6 >> 14)
          {
            uint64_t v7 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v6, a3, a3);
          }
          else
          {
            *a3 = (8 * a2) | 0x82;
            a3[1] = (8 * a2) >> 7;
            uint64_t v7 = a3 + 2;
          }
        }
        else
        {
          *a3 = (8 * a2) | 2;
          uint64_t v7 = a3 + 1;
        }
        unint64_t v18 = *((int *)this + 3);
        if ((v18 & 0x80000000) != 0)
        {
          uint64_t v19 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v18, v7, a3);
        }
        else
        {
          if (v18 <= 0x7F)
          {
            *uint64_t v7 = v18;
            unsigned int v4 = v7 + 1;
            goto LABEL_29;
          }
          uint64_t v19 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray((AddrObjGoogle::protobuf::io::CodedOutputStream *)v18, v7, a3);
        }
        unsigned int v4 = v19;
LABEL_29:
        switch(*((unsigned char *)this + 8))
        {
          case 1:
            char v45 = *(void **)this;
            if (*(int *)(*(void *)this + 8) >= 1)
            {
              uint64_t v46 = 0;
              do
              {
                *(void *)unsigned int v4 = *(void *)(*v45 + 8 * v46);
                v4 += 8;
                ++v46;
                char v45 = *(void **)this;
              }
              while (v46 < *(int *)(*(void *)this + 8));
            }
            return v4;
          case 2:
            char v47 = *(void **)this;
            if (*(int *)(*(void *)this + 8) >= 1)
            {
              uint64_t v48 = 0;
              do
              {
                *(_DWORD *)unsigned int v4 = *(_DWORD *)(*v47 + 4 * v48);
                v4 += 4;
                ++v48;
                char v47 = *(void **)this;
              }
              while (v48 < *(int *)(*(void *)this + 8));
            }
            return v4;
          case 3:
            uint64_t v49 = *(void **)this;
            if (*(int *)(*(void *)this + 8) >= 1)
            {
              uint64_t v50 = 0;
              do
              {
                unsigned int v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(*(void *)(*v49 + 8 * v50++), v4, a3);
                uint64_t v49 = *(void **)this;
              }
              while (v50 < *(int *)(*(void *)this + 8));
            }
            return v4;
          case 4:
            char v51 = *(void **)this;
            if (*(int *)(*(void *)this + 8) >= 1)
            {
              uint64_t v52 = 0;
              do
              {
                unsigned int v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(*(void *)(*v51 + 8 * v52++), v4, a3);
                char v51 = *(void **)this;
              }
              while (v52 < *(int *)(*(void *)this + 8));
            }
            return v4;
          case 5:
            unint64_t v33 = *(void **)this;
            if (*(int *)(*(void *)this + 8) < 1) {
              return v4;
            }
            uint64_t v34 = 0;
            while (1)
            {
              unint64_t v35 = *(int *)(*v33 + 4 * v34);
              if ((v35 & 0x80000000) != 0) {
                break;
              }
              if (v35 > 0x7F)
              {
                int v36 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray((AddrObjGoogle::protobuf::io::CodedOutputStream *)v35, v4, a3);
                goto LABEL_50;
              }
              *v4++ = v35;
LABEL_51:
              ++v34;
              unint64_t v33 = *(void **)this;
              if (v34 >= *(int *)(*(void *)this + 8)) {
                return v4;
              }
            }
            int v36 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v35, v4, a3);
LABEL_50:
            unsigned int v4 = v36;
            goto LABEL_51;
          case 6:
            char v53 = *(void **)this;
            if (*(int *)(*(void *)this + 8) >= 1)
            {
              uint64_t v54 = 0;
              do
              {
                *(void *)unsigned int v4 = *(void *)(*v53 + 8 * v54);
                v4 += 8;
                ++v54;
                char v53 = *(void **)this;
              }
              while (v54 < *(int *)(*(void *)this + 8));
            }
            return v4;
          case 7:
            uint64_t v55 = *(void **)this;
            if (*(int *)(*(void *)this + 8) >= 1)
            {
              uint64_t v56 = 0;
              do
              {
                *(_DWORD *)unsigned int v4 = *(_DWORD *)(*v55 + 4 * v56);
                v4 += 4;
                ++v56;
                uint64_t v55 = *(void **)this;
              }
              while (v56 < *(int *)(*(void *)this + 8));
            }
            return v4;
          case 8:
            unint64_t v57 = *(void **)this;
            if (*(int *)(*(void *)this + 8) >= 1)
            {
              uint64_t v58 = 0;
              do
              {
                v4[v58] = *(unsigned char *)(*v57 + v58);
                ++v58;
                unint64_t v57 = *(void **)this;
              }
              while (v58 < *(int *)(*(void *)this + 8));
              v4 += v58;
            }
            return v4;
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v226, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/extension_set_heavy.cc", 409);
            uint64_t v20 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v226, "Non-primitive types can't be packed.");
            AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v225, (AddrObjGoogle::protobuf::internal::LogMessage *)v20);
            AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v226[0].__r_.__value_.__l.__data_);
            return v4;
          case 0xD:
            uint64_t v37 = *(void **)this;
            if (*(int *)(*(void *)this + 8) >= 1)
            {
              uint64_t v38 = 0;
              do
              {
                int v39 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)(*v37 + 4 * v38);
                if (v39 > 0x7F) {
                  unsigned int v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v39, v4, a3);
                }
                else {
                  *v4++ = v39;
                }
                ++v38;
                uint64_t v37 = *(void **)this;
              }
              while (v38 < *(int *)(*(void *)this + 8));
            }
            return v4;
          case 0xE:
            char v59 = *(void **)this;
            if (*(int *)(*(void *)this + 8) < 1) {
              return v4;
            }
            uint64_t v60 = 0;
            break;
          case 0xF:
            int v40 = *(void **)this;
            if (*(int *)(*(void *)this + 8) >= 1)
            {
              uint64_t v41 = 0;
              do
              {
                *(_DWORD *)unsigned int v4 = *(_DWORD *)(*v40 + 4 * v41);
                v4 += 4;
                ++v41;
                int v40 = *(void **)this;
              }
              while (v41 < *(int *)(*(void *)this + 8));
            }
            return v4;
          case 0x10:
            uint64_t v63 = *(void **)this;
            if (*(int *)(*(void *)this + 8) >= 1)
            {
              uint64_t v64 = 0;
              do
              {
                *(void *)unsigned int v4 = *(void *)(*v63 + 8 * v64);
                v4 += 8;
                ++v64;
                uint64_t v63 = *(void **)this;
              }
              while (v64 < *(int *)(*(void *)this + 8));
            }
            return v4;
          case 0x11:
            id v42 = *(void **)this;
            if (*(int *)(*(void *)this + 8) >= 1)
            {
              uint64_t v43 = 0;
              do
              {
                int v44 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((2 * *(_DWORD *)(*v42 + 4 * v43)) ^ (*(int *)(*v42 + 4 * v43) >> 31));
                if (v44 > 0x7F) {
                  unsigned int v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v44, v4, a3);
                }
                else {
                  *v4++ = (2 * *(unsigned char *)(*v42 + 4 * v43)) ^ (*(int *)(*v42 + 4 * v43) >> 31);
                }
                ++v43;
                id v42 = *(void **)this;
              }
              while (v43 < *(int *)(*(void *)this + 8));
            }
            return v4;
          case 0x12:
            char v65 = *(void **)this;
            if (*(int *)(*(void *)this + 8) >= 1)
            {
              uint64_t v66 = 0;
              do
              {
                unsigned int v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray((2 * *(void *)(*v65 + 8 * v66)) ^ (*(uint64_t *)(*v65 + 8 * v66) >> 63), v4, a3);
                ++v66;
                char v65 = *(void **)this;
              }
              while (v66 < *(int *)(*(void *)this + 8));
            }
            return v4;
          default:
            return v4;
        }
        while (1)
        {
          unint64_t v61 = *(int *)(*v59 + 4 * v60);
          if ((v61 & 0x80000000) != 0) {
            break;
          }
          if (v61 > 0x7F)
          {
            uint64_t v62 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray((AddrObjGoogle::protobuf::io::CodedOutputStream *)v61, v4, a3);
            goto LABEL_106;
          }
          *v4++ = v61;
LABEL_107:
          ++v60;
          char v59 = *(void **)this;
          if (v60 >= *(int *)(*(void *)this + 8)) {
            return v4;
          }
        }
        uint64_t v62 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v61, v4, a3);
LABEL_106:
        unsigned int v4 = v62;
        goto LABEL_107;
      }
      return v4;
    }
    switch(*((unsigned char *)this + 8))
    {
      case 1:
        int v11 = *(void **)this;
        if (*(int *)(*(void *)this + 8) >= 1)
        {
          uint64_t v12 = 0;
          uint64_t v13 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 1u);
          unsigned __int8 v14 = (8 * a2) | 0x81;
          unsigned int v15 = (8 * a2) >> 7;
          do
          {
            uint64_t v16 = *(void *)(*v11 + 8 * v12);
            if (v13 > 0x7F)
            {
              if (v13 >> 14)
              {
                int v17 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v13, v4, a3);
              }
              else
              {
                unsigned __int8 *v4 = v14;
                v4[1] = v15;
                int v17 = v4 + 2;
              }
            }
            else
            {
              unsigned __int8 *v4 = v13;
              int v17 = v4 + 1;
            }
            *(void *)int v17 = v16;
            unsigned int v4 = v17 + 8;
            ++v12;
            int v11 = *(void **)this;
          }
          while (v12 < *(int *)(*(void *)this + 8));
        }
        return v4;
      case 2:
        uint64_t v67 = *(void **)this;
        if (*(int *)(*(void *)this + 8) >= 1)
        {
          uint64_t v68 = 0;
          uint64_t v69 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 5u);
          unsigned __int8 v70 = (8 * a2) | 0x85;
          unsigned int v71 = (8 * a2) >> 7;
          do
          {
            int v72 = *(_DWORD *)(*v67 + 4 * v68);
            if (v69 > 0x7F)
            {
              if (v69 >> 14)
              {
                uint64_t v73 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v69, v4, a3);
              }
              else
              {
                unsigned __int8 *v4 = v70;
                v4[1] = v71;
                uint64_t v73 = v4 + 2;
              }
            }
            else
            {
              unsigned __int8 *v4 = v69;
              uint64_t v73 = v4 + 1;
            }
            *(_DWORD *)uint64_t v73 = v72;
            unsigned int v4 = v73 + 4;
            ++v68;
            uint64_t v67 = *(void **)this;
          }
          while (v68 < *(int *)(*(void *)this + 8));
        }
        return v4;
      case 3:
        unint64_t v74 = *(void **)this;
        if (*(int *)(*(void *)this + 8) >= 1)
        {
          uint64_t v75 = 0;
          int v76 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
          unsigned __int8 v77 = (8 * a2) | 0x80;
          do
          {
            unint64_t v78 = *(void *)(*v74 + 8 * v75);
            if (v76 > 0x7F)
            {
              if (v76 >> 14)
              {
                char v79 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v76, v4, a3);
              }
              else
              {
                unsigned __int8 *v4 = v77;
                v4[1] = v76 >> 7;
                char v79 = v4 + 2;
              }
            }
            else
            {
              unsigned __int8 *v4 = v76;
              char v79 = v4 + 1;
            }
            unsigned int v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v78, v79, a3);
            ++v75;
            unint64_t v74 = *(void **)this;
          }
          while (v75 < *(int *)(*(void *)this + 8));
        }
        return v4;
      case 4:
        BOOL v80 = *(void **)this;
        if (*(int *)(*(void *)this + 8) >= 1)
        {
          uint64_t v81 = 0;
          uint64_t v82 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
          unsigned __int8 v83 = (8 * a2) | 0x80;
          do
          {
            unint64_t v84 = *(void *)(*v80 + 8 * v81);
            if (v82 > 0x7F)
            {
              if (v82 >> 14)
              {
                int v85 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v82, v4, a3);
              }
              else
              {
                unsigned __int8 *v4 = v83;
                v4[1] = v82 >> 7;
                int v85 = v4 + 2;
              }
            }
            else
            {
              unsigned __int8 *v4 = v82;
              int v85 = v4 + 1;
            }
            unsigned int v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v84, v85, a3);
            ++v81;
            BOOL v80 = *(void **)this;
          }
          while (v81 < *(int *)(*(void *)this + 8));
        }
        return v4;
      case 5:
        int v86 = *(void **)this;
        if (*(int *)(*(void *)this + 8) < 1) {
          return v4;
        }
        uint64_t v87 = 0;
        int v88 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
        unsigned __int8 v89 = (8 * a2) | 0x80;
        while (1)
        {
          unint64_t v90 = *(int *)(*v86 + 4 * v87);
          if (v88 > 0x7F)
          {
            if (v88 >> 14)
            {
              char v91 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v88, v4, a3);
              if ((v90 & 0x80000000) != 0)
              {
LABEL_155:
                char v92 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v90, v91, a3);
                goto LABEL_156;
              }
            }
            else
            {
              unsigned __int8 *v4 = v89;
              v4[1] = v88 >> 7;
              char v91 = v4 + 2;
              if ((v90 & 0x80000000) != 0) {
                goto LABEL_155;
              }
            }
          }
          else
          {
            unsigned __int8 *v4 = v88;
            char v91 = v4 + 1;
            if ((v90 & 0x80000000) != 0) {
              goto LABEL_155;
            }
          }
          if (v90 > 0x7F)
          {
            char v92 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray((AddrObjGoogle::protobuf::io::CodedOutputStream *)v90, v91, a3);
LABEL_156:
            unsigned int v4 = v92;
            goto LABEL_157;
          }
          *char v91 = v90;
          unsigned int v4 = v91 + 1;
LABEL_157:
          ++v87;
          int v86 = *(void **)this;
          if (v87 >= *(int *)(*(void *)this + 8)) {
            return v4;
          }
        }
      case 6:
        BOOL v93 = *(void **)this;
        if (*(int *)(*(void *)this + 8) >= 1)
        {
          uint64_t v94 = 0;
          uint64_t v95 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 1u);
          unsigned __int8 v96 = (8 * a2) | 0x81;
          unsigned int v97 = (8 * a2) >> 7;
          do
          {
            uint64_t v98 = *(void *)(*v93 + 8 * v94);
            if (v95 > 0x7F)
            {
              if (v95 >> 14)
              {
                uint64_t v99 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v95, v4, a3);
              }
              else
              {
                unsigned __int8 *v4 = v96;
                v4[1] = v97;
                uint64_t v99 = v4 + 2;
              }
            }
            else
            {
              unsigned __int8 *v4 = v95;
              uint64_t v99 = v4 + 1;
            }
            *(void *)uint64_t v99 = v98;
            unsigned int v4 = v99 + 8;
            ++v94;
            BOOL v93 = *(void **)this;
          }
          while (v94 < *(int *)(*(void *)this + 8));
        }
        return v4;
      case 7:
        uint64_t v100 = *(void **)this;
        if (*(int *)(*(void *)this + 8) >= 1)
        {
          uint64_t v101 = 0;
          int v102 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 5u);
          unsigned __int8 v103 = (8 * a2) | 0x85;
          unsigned int v104 = (8 * a2) >> 7;
          do
          {
            int v105 = *(_DWORD *)(*v100 + 4 * v101);
            if (v102 > 0x7F)
            {
              if (v102 >> 14)
              {
                char v106 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v102, v4, a3);
              }
              else
              {
                unsigned __int8 *v4 = v103;
                v4[1] = v104;
                char v106 = v4 + 2;
              }
            }
            else
            {
              unsigned __int8 *v4 = v102;
              char v106 = v4 + 1;
            }
            *(_DWORD *)char v106 = v105;
            unsigned int v4 = v106 + 4;
            ++v101;
            uint64_t v100 = *(void **)this;
          }
          while (v101 < *(int *)(*(void *)this + 8));
        }
        return v4;
      case 8:
        unsigned int v107 = *(void **)this;
        if (*(int *)(*(void *)this + 8) >= 1)
        {
          uint64_t v108 = 0;
          uint64_t v109 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
          unsigned __int8 v110 = (8 * a2) | 0x80;
          do
          {
            char v111 = *(unsigned char *)(*v107 + v108);
            if (v109 > 0x7F)
            {
              if (v109 >> 14)
              {
                uint64_t v112 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v109, v4, a3);
              }
              else
              {
                unsigned __int8 *v4 = v110;
                v4[1] = v109 >> 7;
                uint64_t v112 = v4 + 2;
              }
            }
            else
            {
              unsigned __int8 *v4 = v109;
              uint64_t v112 = v4 + 1;
            }
            *uint64_t v112 = v111;
            unsigned int v4 = v112 + 1;
            ++v108;
            unsigned int v107 = *(void **)this;
          }
          while (v108 < *(int *)(*(void *)this + 8));
        }
        return v4;
      case 9:
        uint64_t v113 = *(void **)this;
        if (*(int *)(*(void *)this + 8) >= 1)
        {
          uint64_t v114 = 0;
          uint64_t v115 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 2u);
          unsigned __int8 v116 = (8 * a2) | 0x82;
          unsigned int v117 = (8 * a2) >> 7;
          do
          {
            uint64_t v118 = *(void *)(*v113 + 8 * v114);
            if (v115 > 0x7F)
            {
              if (v115 >> 14)
              {
                uint64_t v119 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v115, v4, a3);
              }
              else
              {
                unsigned __int8 *v4 = v116;
                v4[1] = v117;
                uint64_t v119 = v4 + 2;
              }
            }
            else
            {
              unsigned __int8 *v4 = v115;
              uint64_t v119 = v4 + 1;
            }
            if (*(char *)(v118 + 23) < 0) {
              uint64_t v120 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v118 + 8);
            }
            else {
              uint64_t v120 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v118 + 23);
            }
            if (v120 > 0x7F)
            {
              uint64_t v121 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v120, v119, a3);
            }
            else
            {
              *uint64_t v119 = (_BYTE)v120;
              uint64_t v121 = v119 + 1;
            }
            int v122 = *(char *)(v118 + 23);
            if (v122 >= 0) {
              uint64_t v123 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v118;
            }
            else {
              uint64_t v123 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v118;
            }
            if (v122 >= 0) {
              uint64_t v124 = (const void *)*(unsigned __int8 *)(v118 + 23);
            }
            else {
              uint64_t v124 = (const void *)*(unsigned int *)(v118 + 8);
            }
            unsigned int v4 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v123, v124, v121, a4);
            ++v114;
            uint64_t v113 = *(void **)this;
          }
          while (v114 < *(int *)(*(void *)this + 8));
        }
        return v4;
      case 0xA:
        uint64_t v125 = *(void **)this;
        if (*(int *)(*(void *)this + 8) >= 1)
        {
          uint64_t v126 = 0;
          uint64_t v127 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 3u);
          unsigned __int8 v224 = (8 * a2) | 0x83;
          uint64_t v128 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 4u);
          unsigned int v129 = (8 * a2) >> 7;
          char v130 = (8 * a2) | 0x84;
          do
          {
            uint64_t v131 = *(void *)(*v125 + 8 * v126);
            if (v127 > 0x7F)
            {
              if (v127 >> 14)
              {
                uint64_t v132 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v127, v4, a3);
              }
              else
              {
                unsigned __int8 *v4 = v224;
                v4[1] = v129;
                uint64_t v132 = v4 + 2;
              }
            }
            else
            {
              unsigned __int8 *v4 = v127;
              uint64_t v132 = v4 + 1;
            }
            uint64_t v133 = (unsigned char *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v131 + 88))(v131, v132);
            if (v128 > 0x7F)
            {
              if (v128 >> 14)
              {
                unsigned int v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v128, v133, a3);
              }
              else
              {
                *uint64_t v133 = v130;
                v133[1] = v129;
                unsigned int v4 = v133 + 2;
              }
            }
            else
            {
              *uint64_t v133 = (_BYTE)v128;
              unsigned int v4 = v133 + 1;
            }
            ++v126;
            uint64_t v125 = *(void **)this;
          }
          while (v126 < *(int *)(*(void *)this + 8));
        }
        return v4;
      case 0xB:
        uint64_t v134 = *(void **)this;
        if (*(int *)(*(void *)this + 8) >= 1)
        {
          uint64_t v135 = 0;
          uint64_t v136 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 2u);
          unsigned __int8 v137 = (8 * a2) | 0x82;
          unsigned int v138 = (8 * a2) >> 7;
          do
          {
            uint64_t v139 = *(void *)(*v134 + 8 * v135);
            if (v136 > 0x7F)
            {
              if (v136 >> 14)
              {
                uint64_t v140 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v136, v4, a3);
              }
              else
              {
                unsigned __int8 *v4 = v137;
                v4[1] = v138;
                uint64_t v140 = v4 + 2;
              }
            }
            else
            {
              unsigned __int8 *v4 = v136;
              uint64_t v140 = v4 + 1;
            }
            uint64_t v141 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(*(uint64_t (**)(uint64_t))(*(void *)v139 + 96))(v139);
            if (v141 > 0x7F)
            {
              uint64_t v143 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v141, v140, v142);
            }
            else
            {
              *uint64_t v140 = (_BYTE)v141;
              uint64_t v143 = v140 + 1;
            }
            unsigned int v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v139 + 88))(v139, v143);
            ++v135;
            uint64_t v134 = *(void **)this;
          }
          while (v135 < *(int *)(*(void *)this + 8));
        }
        return v4;
      case 0xC:
        uint64_t v144 = *(void **)this;
        if (*(int *)(*(void *)this + 8) >= 1)
        {
          uint64_t v145 = 0;
          uint64_t v146 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 2u);
          unsigned __int8 v147 = (8 * a2) | 0x82;
          unsigned int v148 = (8 * a2) >> 7;
          do
          {
            uint64_t v149 = *(void *)(*v144 + 8 * v145);
            if (v146 > 0x7F)
            {
              if (v146 >> 14)
              {
                uint64_t v150 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v146, v4, a3);
              }
              else
              {
                unsigned __int8 *v4 = v147;
                v4[1] = v148;
                uint64_t v150 = v4 + 2;
              }
            }
            else
            {
              unsigned __int8 *v4 = v146;
              uint64_t v150 = v4 + 1;
            }
            if (*(char *)(v149 + 23) < 0) {
              uint64_t v151 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v149 + 8);
            }
            else {
              uint64_t v151 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v149 + 23);
            }
            if (v151 > 0x7F)
            {
              uint64_t v152 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v151, v150, a3);
            }
            else
            {
              *uint64_t v150 = (_BYTE)v151;
              uint64_t v152 = v150 + 1;
            }
            int v153 = *(char *)(v149 + 23);
            if (v153 >= 0) {
              uint64_t v154 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v149;
            }
            else {
              uint64_t v154 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v149;
            }
            if (v153 >= 0) {
              uint64_t v155 = (const void *)*(unsigned __int8 *)(v149 + 23);
            }
            else {
              uint64_t v155 = (const void *)*(unsigned int *)(v149 + 8);
            }
            unsigned int v4 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v154, v155, v152, a4);
            ++v145;
            uint64_t v144 = *(void **)this;
          }
          while (v145 < *(int *)(*(void *)this + 8));
        }
        return v4;
      case 0xD:
        uint64_t v156 = *(void **)this;
        if (*(int *)(*(void *)this + 8) >= 1)
        {
          uint64_t v157 = 0;
          uint64_t v158 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
          unsigned __int8 v159 = (8 * a2) | 0x80;
          do
          {
            uint64_t v160 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)(*v156 + 4 * v157);
            if (v158 > 0x7F)
            {
              if (v158 >> 14)
              {
                uint64_t v161 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v158, v4, a3);
              }
              else
              {
                unsigned __int8 *v4 = v159;
                v4[1] = v158 >> 7;
                uint64_t v161 = v4 + 2;
              }
            }
            else
            {
              unsigned __int8 *v4 = v158;
              uint64_t v161 = v4 + 1;
            }
            if (v160 > 0x7F)
            {
              unsigned int v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v160, v161, a3);
            }
            else
            {
              *uint64_t v161 = (_BYTE)v160;
              unsigned int v4 = v161 + 1;
            }
            ++v157;
            uint64_t v156 = *(void **)this;
          }
          while (v157 < *(int *)(*(void *)this + 8));
        }
        return v4;
      case 0xE:
        uint64_t v162 = *(void **)this;
        if (*(int *)(*(void *)this + 8) < 1) {
          return v4;
        }
        uint64_t v163 = 0;
        uint64_t v164 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
        unsigned __int8 v165 = (8 * a2) | 0x80;
        break;
      case 0xF:
        uint64_t v169 = *(void **)this;
        if (*(int *)(*(void *)this + 8) >= 1)
        {
          uint64_t v170 = 0;
          uint64_t v171 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 5u);
          unsigned __int8 v172 = (8 * a2) | 0x85;
          unsigned int v173 = (8 * a2) >> 7;
          do
          {
            int v174 = *(_DWORD *)(*v169 + 4 * v170);
            if (v171 > 0x7F)
            {
              if (v171 >> 14)
              {
                uint64_t v175 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v171, v4, a3);
              }
              else
              {
                unsigned __int8 *v4 = v172;
                v4[1] = v173;
                uint64_t v175 = v4 + 2;
              }
            }
            else
            {
              unsigned __int8 *v4 = v171;
              uint64_t v175 = v4 + 1;
            }
            *(_DWORD *)uint64_t v175 = v174;
            unsigned int v4 = v175 + 4;
            ++v170;
            uint64_t v169 = *(void **)this;
          }
          while (v170 < *(int *)(*(void *)this + 8));
        }
        return v4;
      case 0x10:
        uint64_t v176 = *(void **)this;
        if (*(int *)(*(void *)this + 8) >= 1)
        {
          uint64_t v177 = 0;
          uint64_t v178 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 1u);
          unsigned __int8 v179 = (8 * a2) | 0x81;
          unsigned int v180 = (8 * a2) >> 7;
          do
          {
            uint64_t v181 = *(void *)(*v176 + 8 * v177);
            if (v178 > 0x7F)
            {
              if (v178 >> 14)
              {
                uint64_t v182 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v178, v4, a3);
              }
              else
              {
                unsigned __int8 *v4 = v179;
                v4[1] = v180;
                uint64_t v182 = v4 + 2;
              }
            }
            else
            {
              unsigned __int8 *v4 = v178;
              uint64_t v182 = v4 + 1;
            }
            *(void *)uint64_t v182 = v181;
            unsigned int v4 = v182 + 8;
            ++v177;
            uint64_t v176 = *(void **)this;
          }
          while (v177 < *(int *)(*(void *)this + 8));
        }
        return v4;
      case 0x11:
        uint64_t v183 = *(void **)this;
        if (*(int *)(*(void *)this + 8) >= 1)
        {
          uint64_t v184 = 0;
          uint64_t v185 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
          unsigned __int8 v186 = (8 * a2) | 0x80;
          do
          {
            int v187 = *(_DWORD *)(*v183 + 4 * v184);
            if (v185 > 0x7F)
            {
              if (v185 >> 14)
              {
                uint64_t v188 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v185, v4, a3);
              }
              else
              {
                unsigned __int8 *v4 = v186;
                v4[1] = v185 >> 7;
                uint64_t v188 = v4 + 2;
              }
            }
            else
            {
              unsigned __int8 *v4 = v185;
              uint64_t v188 = v4 + 1;
            }
            uint64_t v189 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((2 * v187) ^ (v187 >> 31));
            if (v189 > 0x7F)
            {
              unsigned int v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v189, v188, a3);
            }
            else
            {
              *uint64_t v188 = (2 * v187) ^ (v187 >> 31);
              unsigned int v4 = v188 + 1;
            }
            ++v184;
            uint64_t v183 = *(void **)this;
          }
          while (v184 < *(int *)(*(void *)this + 8));
        }
        return v4;
      case 0x12:
        uint64_t v190 = *(void **)this;
        if (*(int *)(*(void *)this + 8) >= 1)
        {
          uint64_t v191 = 0;
          unint64_t v192 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
          unsigned __int8 v193 = (8 * a2) | 0x80;
          do
          {
            uint64_t v194 = *(void *)(*v190 + 8 * v191);
            if (v192 > 0x7F)
            {
              if (v192 >> 14)
              {
                uint64_t v195 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v192, v4, a3);
              }
              else
              {
                unsigned __int8 *v4 = v193;
                v4[1] = v192 >> 7;
                uint64_t v195 = v4 + 2;
              }
            }
            else
            {
              unsigned __int8 *v4 = v192;
              uint64_t v195 = v4 + 1;
            }
            unsigned int v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray((2 * v194) ^ (v194 >> 63), v195, a3);
            ++v191;
            uint64_t v190 = *(void **)this;
          }
          while (v191 < *(int *)(*(void *)this + 8));
        }
        return v4;
      default:
        return v4;
    }
    while (1)
    {
      unint64_t v166 = *(int *)(*v162 + 4 * v163);
      if (v164 > 0x7F)
      {
        if (v164 >> 14)
        {
          uint64_t v167 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v164, v4, a3);
          if ((v166 & 0x80000000) != 0)
          {
LABEL_277:
            uint64_t v168 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v166, v167, a3);
            goto LABEL_278;
          }
        }
        else
        {
          unsigned __int8 *v4 = v165;
          v4[1] = v164 >> 7;
          uint64_t v167 = v4 + 2;
          if ((v166 & 0x80000000) != 0) {
            goto LABEL_277;
          }
        }
      }
      else
      {
        unsigned __int8 *v4 = v164;
        uint64_t v167 = v4 + 1;
        if ((v166 & 0x80000000) != 0) {
          goto LABEL_277;
        }
      }
      if (v166 > 0x7F)
      {
        uint64_t v168 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray((AddrObjGoogle::protobuf::io::CodedOutputStream *)v166, v167, a3);
LABEL_278:
        unsigned int v4 = v168;
        goto LABEL_279;
      }
      *uint64_t v167 = v166;
      unsigned int v4 = v167 + 1;
LABEL_279:
      ++v163;
      uint64_t v162 = *(void **)this;
      if (v163 >= *(int *)(*(void *)this + 8)) {
        return v4;
      }
    }
  }
  if (*((unsigned char *)this + 10)) {
    return v4;
  }
  switch(*((unsigned char *)this + 8))
  {
    case 1:
    case 6:
    case 0x10:
      uint64_t v8 = *(void *)this;
      BOOL v9 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 1u);
      if (v9 > 0x7F)
      {
        if (v9 >> 14)
        {
          int v10 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v9, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x81;
          a3[1] = (8 * a2) >> 7;
          int v10 = a3 + 2;
        }
      }
      else
      {
        *a3 = (8 * a2) | 1;
        int v10 = a3 + 1;
      }
      *(void *)int v10 = v8;
      return v10 + 8;
    case 2:
    case 7:
    case 0xF:
      int v21 = *(_DWORD *)this;
      int v22 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 5u);
      if (v22 > 0x7F)
      {
        if (v22 >> 14)
        {
          int v23 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v22, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x85;
          a3[1] = (8 * a2) >> 7;
          int v23 = a3 + 2;
        }
      }
      else
      {
        *a3 = (8 * a2) | 5;
        int v23 = a3 + 1;
      }
      *(_DWORD *)int v23 = v21;
      return v23 + 4;
    case 3:
    case 4:
      unint64_t v24 = *(void *)this;
      uint64_t v25 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
      if (v25 > 0x7F)
      {
        if (v25 >> 14)
        {
          int v26 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v25, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x80;
          a3[1] = v25 >> 7;
          int v26 = a3 + 2;
        }
      }
      else
      {
        *a3 = 8 * a2;
        int v26 = a3 + 1;
      }
      unint64_t v213 = v24;
      goto LABEL_398;
    case 5:
    case 0xE:
      uint64_t v27 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)this;
      int v28 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
      if (v28 > 0x7F)
      {
        if (v28 >> 14)
        {
          char v29 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v28, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x80;
          a3[1] = v28 >> 7;
          char v29 = a3 + 2;
        }
      }
      else
      {
        *a3 = 8 * a2;
        char v29 = a3 + 1;
      }
      return AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32SignExtendedToArray(v27, v29, a3);
    case 8:
      LOBYTE(v196) = *(unsigned char *)this;
      uint64_t v197 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
      if (v197 > 0x7F)
      {
        if (v197 >> 14)
        {
          uint64_t v198 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v197, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x80;
          a3[1] = v197 >> 7;
          uint64_t v198 = a3 + 2;
        }
      }
      else
      {
        *a3 = 8 * a2;
        uint64_t v198 = a3 + 1;
      }
      goto LABEL_387;
    case 9:
    case 0xC:
      uint64_t v30 = *(void *)this;
      uint64_t v31 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 2u);
      if (v31 > 0x7F)
      {
        if (v31 >> 14)
        {
          uint64_t v32 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v31, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x82;
          a3[1] = (8 * a2) >> 7;
          uint64_t v32 = a3 + 2;
        }
      }
      else
      {
        *a3 = (8 * a2) | 2;
        uint64_t v32 = a3 + 1;
      }
      if (*(char *)(v30 + 23) < 0) {
        unsigned int v214 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v30 + 8);
      }
      else {
        unsigned int v214 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v30 + 23);
      }
      if (v214 > 0x7F)
      {
        uint64_t v215 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v214, v32, a3);
      }
      else
      {
        *uint64_t v32 = v214;
        uint64_t v215 = v32 + 1;
      }
      int v216 = *(char *)(v30 + 23);
      if (v216 >= 0) {
        unint64_t v217 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v30;
      }
      else {
        unint64_t v217 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v30;
      }
      if (v216 >= 0) {
        uint64_t v218 = (const void *)*(unsigned __int8 *)(v30 + 23);
      }
      else {
        uint64_t v218 = (const void *)*(unsigned int *)(v30 + 8);
      }
      return (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v217, v218, v215, a4);
    case 0xA:
      uint64_t v199 = *(void *)this;
      unsigned int v200 = 8 * a2;
      uint64_t v201 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 3u);
      if (v201 > 0x7F)
      {
        if (v201 >> 14)
        {
          uint64_t v202 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v201, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x83;
          a3[1] = v200 >> 7;
          uint64_t v202 = a3 + 2;
        }
      }
      else
      {
        *a3 = (8 * a2) | 3;
        uint64_t v202 = a3 + 1;
      }
      uint64_t v198 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v199 + 88))(v199, v202);
      uint64_t v219 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(v200 | 4);
      if (v219 <= 0x7F) {
        goto LABEL_391;
      }
      if (v219 >> 14) {
        goto LABEL_393;
      }
      *uint64_t v198 = v200 | 0x84;
      v198[1] = v200 >> 7;
      return v198 + 2;
    case 0xB:
      uint64_t v203 = *(void *)this;
      if ((*((unsigned char *)this + 10) & 0x10) != 0)
      {
        uint64_t v211 = *(uint64_t (**)(uint64_t))(*(void *)v203 + 112);
        return (unsigned __int8 *)v211(v203);
      }
      else
      {
        unsigned int v204 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * a2) | 2u);
        if (v204 > 0x7F)
        {
          if (v204 >> 14)
          {
            uint64_t v205 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v204, a3, a3);
          }
          else
          {
            *a3 = (8 * a2) | 0x82;
            a3[1] = (8 * a2) >> 7;
            uint64_t v205 = a3 + 2;
          }
        }
        else
        {
          *a3 = (8 * a2) | 2;
          uint64_t v205 = a3 + 1;
        }
        uint64_t v220 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(*(uint64_t (**)(uint64_t))(*(void *)v203 + 96))(v203);
        if (v220 > 0x7F)
        {
          uint64_t v222 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v220, v205, v221);
        }
        else
        {
          *uint64_t v205 = v220;
          uint64_t v222 = v205 + 1;
        }
        uint64_t v223 = *(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v203 + 88);
        return (unsigned __int8 *)v223(v203, v222);
      }
    case 0xD:
      uint64_t v196 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)this;
      uint64_t v206 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
      if (v206 > 0x7F)
      {
        if (v206 >> 14)
        {
          uint64_t v198 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v206, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x80;
          a3[1] = v206 >> 7;
          uint64_t v198 = a3 + 2;
        }
      }
      else
      {
        *a3 = 8 * a2;
        uint64_t v198 = a3 + 1;
      }
      if (v196 <= 0x7F)
      {
LABEL_387:
        *uint64_t v198 = v196;
        return v198 + 1;
      }
      uint64_t v219 = v196;
LABEL_393:
      unint64_t result = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v219, v198, a3);
      break;
    case 0x11:
      int v207 = *(_DWORD *)this;
      uint64_t v208 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
      if (v208 > 0x7F)
      {
        if (v208 >> 14)
        {
          uint64_t v198 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v208, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x80;
          a3[1] = v208 >> 7;
          uint64_t v198 = a3 + 2;
        }
      }
      else
      {
        *a3 = 8 * a2;
        uint64_t v198 = a3 + 1;
      }
      uint64_t v219 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((2 * v207) ^ (v207 >> 31));
      if (v219 > 0x7F) {
        goto LABEL_393;
      }
LABEL_391:
      *uint64_t v198 = v219;
      return v198 + 1;
    case 0x12:
      uint64_t v209 = *(void *)this;
      uint64_t v210 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
      if (v210 > 0x7F)
      {
        if (v210 >> 14)
        {
          int v26 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v210, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x80;
          a3[1] = v210 >> 7;
          int v26 = a3 + 2;
        }
      }
      else
      {
        *a3 = 8 * a2;
        int v26 = a3 + 1;
      }
      unint64_t v213 = (2 * v209) ^ (v209 >> 63);
LABEL_398:
      return AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v213, v26, a3);
    default:
      return v4;
  }
  return result;
}

void sub_188F8A8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::V2AddressObjectProto::GetCachedSize(addr_obj::V2AddressObjectProto *this)
{
  return *((unsigned int *)this + 34);
}

void sub_188F8ABD8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDClientMetadataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 276))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDClientMetadataReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 280));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 272) = [v8 position];
  *(_DWORD *)(a1 + 276) = [v8 length];
  if (a3) {
    BOOL v9 = (int *)&GEOPDClientMetadataReadAllFrom_recursiveTag;
  }
  else {
    BOOL v9 = (int *)&GEOPDClientMetadataReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDClientMetadataReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDClientMetadataCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 280));
  return Specified;
}

void sub_188F8ADE8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDClientMetadataReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 280));
  int v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 276);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 272)];
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v13 = *(_DWORD *)(a1 + 316);
  uint32x4_t v14 = (uint32x4_t)vdupq_n_s32(v13);
  v15.i64[0] = 0x100000001;
  v15.i64[1] = 0x100000001;
  unsigned int v16 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A63B600), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A63B610), v15)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A63B5E0), v15), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A63B5F0), v15))), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A63B620), v15)))+ ((v13 >> 10) & 1)+ (v13 >> 31);
  while (2)
  {
    uint64_t v17 = 1;
    uint64_t v18 = 1;
    uint64_t v19 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v16;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v18 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v20 = v16 > 0xF;
        char v21 = v20 & ~(_BYTE)v12 | v10;
        char v22 = v20 | v12;
        if (((v20 | v12) | v9)) {
          int v23 = 0;
        }
        else {
          int v23 = a3;
        }
        unint64_t v24 = (int *)MEMORY[0x1E4F940E8];
        int v214 = 1;
        uint64_t v25 = (int *)MEMORY[0x1E4F940C8];
        char v26 = v21;
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_399;
        }
        char v213 = v21;
        char v215 = v22 | v21;
        char v217 = (v23 == 0) | v22;
        uint64_t v27 = (int *)MEMORY[0x1E4F940B8];
        char v216 = v22;
        break;
      default:
        ++v16;
LABEL_7:
        uint64_t v17 = v10;
LABEL_8:
        uint64_t v18 = v11;
        uint64_t v19 = v12;
LABEL_10:
        ++v8;
        uint64_t v10 = v17;
        uint64_t v11 = v18;
        uint64_t v12 = v19;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(unsigned char *)(v3 + *v25)) {
      goto LABEL_394;
    }
    char v28 = 0;
    unsigned int v29 = 0;
    unint64_t v30 = 0;
    while (1)
    {
      uint64_t v31 = *v24;
      uint64_t v32 = *(void *)(v3 + v31);
      unint64_t v33 = v32 + 1;
      if (v32 == -1 || v33 > *(void *)(v3 + *v7)) {
        break;
      }
      char v34 = *(unsigned char *)(*(void *)(v3 + *v27) + v32);
      *(void *)(v3 + v31) = v33;
      v30 |= (unint64_t)(v34 & 0x7F) << v28;
      if ((v34 & 0x80) == 0) {
        goto LABEL_25;
      }
      v28 += 7;
      BOOL v35 = v29++ >= 9;
      if (v35)
      {
        unint64_t v30 = 0;
        int v36 = *(unsigned __int8 *)(v3 + *v25);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v25) = 1;
LABEL_25:
    int v36 = *(unsigned __int8 *)(v3 + *v25);
    if (*(unsigned char *)(v3 + *v25)) {
      unint64_t v30 = 0;
    }
LABEL_27:
    int v37 = v30 & 7;
    if (v36 || v37 == 4)
    {
LABEL_394:
      int v214 = 1;
      goto LABEL_398;
    }
    unint64_t v39 = v30 >> 3;
    BOOL v40 = v22;
    if ((v217 & 1) == 0)
    {
      uint64_t v41 = v23;
      do
      {
        int v43 = *v41++;
        int v42 = v43;
        BOOL v40 = v43 != 0;
        if (v43) {
          BOOL v44 = v42 == v39;
        }
        else {
          BOOL v44 = 1;
        }
      }
      while (!v44);
    }
    switch((int)v39)
    {
      case 1:
        if (!v40) {
          goto LABEL_279;
        }
        if ((*(unsigned char *)(a1 + 318) & 0x20) == 0)
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 184;
          goto LABEL_230;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_436;
        }
        uint64_t v172 = *(void *)(a1 + 316) << 42;
        goto LABEL_351;
      case 2:
      case 6:
      case 7:
      case 14:
        goto LABEL_49;
      case 3:
        if (!v40) {
          goto LABEL_279;
        }
        if ((*(unsigned char *)(a1 + 318) & 0x40) == 0)
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 192;
          goto LABEL_230;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_436;
        }
        uint64_t v172 = *(void *)(a1 + 316) << 41;
        goto LABEL_351;
      case 4:
        if (!v40) {
          goto LABEL_279;
        }
        if ((*(unsigned char *)(a1 + 319) & 2) == 0)
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 216;
          goto LABEL_230;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_436;
        }
        uint64_t v172 = *(void *)(a1 + 316) << 38;
        goto LABEL_351;
      case 5:
        if (!v40) {
          goto LABEL_279;
        }
        if ((*(unsigned char *)(a1 + 319) & 8) == 0)
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 232;
          goto LABEL_230;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_436;
        }
        uint64_t v172 = *(void *)(a1 + 316) << 36;
        goto LABEL_351;
      case 8:
        if ((v9 & 1) == 0) {
          goto LABEL_279;
        }
        char v52 = 0;
        unsigned int v53 = 0;
        uint64_t v54 = 0;
        *(void *)(a1 + 316) |= 0x40uLL;
        while (2)
        {
          uint64_t v55 = *v24;
          uint64_t v56 = *(void *)(v3 + v55);
          unint64_t v57 = v56 + 1;
          if (v56 == -1 || v57 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v25) = 1;
          }
          else
          {
            char v58 = *(unsigned char *)(*(void *)(v3 + *v27) + v56);
            *(void *)(v3 + v55) = v57;
            v54 |= (unint64_t)(v58 & 0x7F) << v52;
            if (v58 < 0)
            {
              v52 += 7;
              BOOL v35 = v53++ >= 9;
              if (v35)
              {
                LODWORD(v54) = 0;
                goto LABEL_284;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v25)) {
          LODWORD(v54) = 0;
        }
LABEL_284:
        uint64_t v169 = 308;
        goto LABEL_322;
      case 9:
        if (!v40) {
          goto LABEL_279;
        }
        if ((*(unsigned char *)(a1 + 318) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_436;
          }
          uint64_t v172 = *(void *)(a1 + 316) << 45;
          goto LABEL_351;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_436;
        }
        char v47 = objc_alloc_init(GEOAdditionalEnabledMarkets);
        if (!GEOAdditionalEnabledMarketsReadAllFrom((uint64_t)v47, (void *)v3, v11 & 1)) {
          goto LABEL_435;
        }
        PBReaderRecallMark();
        uint64_t v48 = 160;
        goto LABEL_268;
      case 10:
        if ((v9 & 1) == 0) {
          goto LABEL_279;
        }
        char v59 = 0;
        unsigned int v60 = 0;
        uint64_t v54 = 0;
        *(void *)(a1 + 316) |= 0x20uLL;
        while (2)
        {
          uint64_t v61 = *v24;
          uint64_t v62 = *(void *)(v3 + v61);
          unint64_t v63 = v62 + 1;
          if (v62 == -1 || v63 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v25) = 1;
          }
          else
          {
            char v64 = *(unsigned char *)(*(void *)(v3 + *v27) + v62);
            *(void *)(v3 + v61) = v63;
            v54 |= (unint64_t)(v64 & 0x7F) << v59;
            if (v64 < 0)
            {
              v59 += 7;
              BOOL v35 = v60++ >= 9;
              if (v35)
              {
                LODWORD(v54) = 0;
                goto LABEL_288;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v25)) {
          LODWORD(v54) = 0;
        }
LABEL_288:
        uint64_t v169 = 304;
        goto LABEL_322;
      case 11:
        if ((v9 & 1) == 0) {
          goto LABEL_279;
        }
        char v65 = 0;
        unsigned int v66 = 0;
        uint64_t v54 = 0;
        *(void *)(a1 + 316) |= 4uLL;
        while (2)
        {
          uint64_t v67 = *v24;
          uint64_t v68 = *(void *)(v3 + v67);
          unint64_t v69 = v68 + 1;
          if (v68 == -1 || v69 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v25) = 1;
          }
          else
          {
            char v70 = *(unsigned char *)(*(void *)(v3 + *v27) + v68);
            *(void *)(v3 + v67) = v69;
            v54 |= (unint64_t)(v70 & 0x7F) << v65;
            if (v70 < 0)
            {
              v65 += 7;
              BOOL v35 = v66++ >= 9;
              if (v35)
              {
                LODWORD(v54) = 0;
                goto LABEL_292;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v25)) {
          LODWORD(v54) = 0;
        }
LABEL_292:
        uint64_t v169 = 292;
        goto LABEL_322;
      case 12:
        if ((v9 & 1) == 0) {
          goto LABEL_279;
        }
        char v71 = 0;
        unsigned int v72 = 0;
        uint64_t v54 = 0;
        *(void *)(a1 + 316) |= 2uLL;
        while (2)
        {
          uint64_t v73 = *v24;
          uint64_t v74 = *(void *)(v3 + v73);
          unint64_t v75 = v74 + 1;
          if (v74 == -1 || v75 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v25) = 1;
          }
          else
          {
            char v76 = *(unsigned char *)(*(void *)(v3 + *v27) + v74);
            *(void *)(v3 + v73) = v75;
            v54 |= (unint64_t)(v76 & 0x7F) << v71;
            if (v76 < 0)
            {
              v71 += 7;
              BOOL v35 = v72++ >= 9;
              if (v35)
              {
                LODWORD(v54) = 0;
                goto LABEL_296;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v25)) {
          LODWORD(v54) = 0;
        }
LABEL_296:
        uint64_t v169 = 288;
        goto LABEL_322;
      case 13:
        if (!v40) {
          goto LABEL_279;
        }
        if ((*(unsigned char *)(a1 + 318) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_436;
          }
          uint64_t v172 = *(void *)(a1 + 316) << 40;
          goto LABEL_351;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_436;
        }
        char v47 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v47, (void *)v3, v11 & 1)) {
          goto LABEL_435;
        }
        PBReaderRecallMark();
        uint64_t v48 = 200;
        goto LABEL_268;
      case 15:
        if (!v40 || (*(unsigned char *)(a1 + 319) & 1) != 0) {
          goto LABEL_273;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_436;
        }
        char v47 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v47, (void *)v3, v11 & 1)) {
          goto LABEL_435;
        }
        PBReaderRecallMark();
        -[GEOPDClientMetadata _addNoFlagsDeviceHistoricalLocation:](a1, v47);
        goto LABEL_164;
      case 16:
        if ((v9 & 1) == 0) {
          goto LABEL_279;
        }
        char v77 = 0;
        unsigned int v78 = 0;
        uint64_t v54 = 0;
        *(void *)(a1 + 316) |= 0x10uLL;
        while (2)
        {
          uint64_t v79 = *v24;
          uint64_t v80 = *(void *)(v3 + v79);
          unint64_t v81 = v80 + 1;
          if (v80 == -1 || v81 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v25) = 1;
          }
          else
          {
            char v82 = *(unsigned char *)(*(void *)(v3 + *v27) + v80);
            *(void *)(v3 + v79) = v81;
            v54 |= (unint64_t)(v82 & 0x7F) << v77;
            if (v82 < 0)
            {
              v77 += 7;
              BOOL v35 = v78++ >= 9;
              if (v35)
              {
                LODWORD(v54) = 0;
                goto LABEL_300;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v25)) {
          LODWORD(v54) = 0;
        }
LABEL_300:
        uint64_t v169 = 300;
        goto LABEL_322;
      case 17:
        if (!v40) {
          goto LABEL_279;
        }
        if ((*(unsigned char *)(a1 + 318) & 0x10) == 0)
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 176;
          goto LABEL_230;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_436;
        }
        uint64_t v172 = *(void *)(a1 + 316) << 43;
        goto LABEL_351;
      case 18:
        if (!v40 || (*(unsigned char *)(a1 + 317) & 0x10) != 0) {
          goto LABEL_279;
        }
        if (v37 != 2)
        {
          char v173 = 0;
          unsigned int v174 = 0;
          uint64_t v175 = 0;
          while (1)
          {
            uint64_t v176 = *v24;
            uint64_t v177 = *(void *)(v3 + v176);
            unint64_t v178 = v177 + 1;
            if (v177 == -1 || v178 > *(void *)(v3 + *v7)) {
              goto LABEL_392;
            }
            char v179 = *(unsigned char *)(*(void *)(v3 + *v27) + v177);
            *(void *)(v3 + v176) = v178;
            v175 |= (unint64_t)(v179 & 0x7F) << v173;
            if (v179 < 0)
            {
              v173 += 7;
              BOOL v35 = v174++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_393;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_436;
        }
        while (1)
        {
          unsigned __int8 v83 = (int *)MEMORY[0x1E4F940E0];
          unint64_t v84 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v24) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_278;
          }
          char v85 = 0;
          unsigned int v86 = 0;
          uint64_t v87 = 0;
          int v88 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v89 = *v24;
            uint64_t v90 = *(void *)(v3 + v89);
            unint64_t v91 = v90 + 1;
            if (v90 == -1 || v91 > *(void *)(v3 + *v83)) {
              break;
            }
            char v92 = *(unsigned char *)(*(void *)(v3 + *v88) + v90);
            *(void *)(v3 + v89) = v91;
            v87 |= (unint64_t)(v92 & 0x7F) << v85;
            if (v92 < 0)
            {
              v85 += 7;
              BOOL v35 = v86++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_136;
          }
          *(unsigned char *)(v3 + *v84) = 1;
LABEL_136:
          PBRepeatedInt32Add();
        }
      case 19:
        if ((v9 & 1) == 0) {
          goto LABEL_279;
        }
        char v93 = 0;
        unsigned int v94 = 0;
        uint64_t v95 = 0;
        *(void *)(a1 + 316) |= 0x80uLL;
        while (2)
        {
          uint64_t v96 = *v24;
          uint64_t v97 = *(void *)(v3 + v96);
          unint64_t v98 = v97 + 1;
          if (v97 == -1 || v98 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v25) = 1;
          }
          else
          {
            char v99 = *(unsigned char *)(*(void *)(v3 + *v27) + v97);
            *(void *)(v3 + v96) = v98;
            v95 |= (unint64_t)(v99 & 0x7F) << v93;
            if (v99 < 0)
            {
              v93 += 7;
              BOOL v35 = v94++ >= 9;
              if (v35)
              {
                uint64_t v95 = 0;
                goto LABEL_304;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v25)) {
          uint64_t v95 = 0;
        }
LABEL_304:
        BOOL v170 = v95 != 0;
        uint64_t v171 = 312;
        goto LABEL_317;
      case 20:
        if (!v40 || (*(unsigned char *)(a1 + 317) & 0x20) != 0) {
          goto LABEL_279;
        }
        if (v37 != 2)
        {
          char v180 = 0;
          unsigned int v181 = 0;
          uint64_t v182 = 0;
          while (1)
          {
            uint64_t v183 = *v24;
            uint64_t v184 = *(void *)(v3 + v183);
            unint64_t v185 = v184 + 1;
            if (v184 == -1 || v185 > *(void *)(v3 + *v7)) {
              goto LABEL_392;
            }
            char v186 = *(unsigned char *)(*(void *)(v3 + *v27) + v184);
            *(void *)(v3 + v183) = v185;
            v182 |= (unint64_t)(v186 & 0x7F) << v180;
            if (v186 < 0)
            {
              v180 += 7;
              BOOL v35 = v181++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_393;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_436;
        }
        while (1)
        {
          uint64_t v100 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v101 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v24) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_278;
          }
          char v102 = 0;
          unsigned int v103 = 0;
          uint64_t v104 = 0;
          int v105 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v106 = *v24;
            uint64_t v107 = *(void *)(v3 + v106);
            unint64_t v108 = v107 + 1;
            if (v107 == -1 || v108 > *(void *)(v3 + *v100)) {
              break;
            }
            char v109 = *(unsigned char *)(*(void *)(v3 + *v105) + v107);
            *(void *)(v3 + v106) = v108;
            v104 |= (unint64_t)(v109 & 0x7F) << v102;
            if (v109 < 0)
            {
              v102 += 7;
              BOOL v35 = v103++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_159;
          }
          *(unsigned char *)(v3 + *v101) = 1;
LABEL_159:
          PBRepeatedInt32Add();
        }
      case 21:
        if (v40 && (*(unsigned char *)(a1 + 318) & 8) == 0)
        {
          PBReaderReadString();
          char v47 = (GEOAdditionalEnabledMarkets *)objc_claimAutoreleasedReturnValue();
          if (v47) {
            -[GEOPDClientMetadata _addNoFlagsBusinessChatPreflightIdentifier:](a1, v47);
          }
LABEL_164:

          goto LABEL_352;
        }
LABEL_273:
        char v167 = PBReaderSkipValueWithTag();
        uint64_t v25 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
        uint64_t v27 = (int *)MEMORY[0x1E4F940B8];
        if ((v167 & 1) == 0) {
          goto LABEL_396;
        }
        goto LABEL_354;
      case 22:
        if ((v9 & 1) == 0) {
          goto LABEL_279;
        }
        char v110 = 0;
        unsigned int v111 = 0;
        uint64_t v54 = 0;
        *(void *)(a1 + 316) |= 1uLL;
        while (2)
        {
          uint64_t v112 = *v24;
          uint64_t v113 = *(void *)(v3 + v112);
          unint64_t v114 = v113 + 1;
          if (v113 == -1 || v114 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v25) = 1;
          }
          else
          {
            char v115 = *(unsigned char *)(*(void *)(v3 + *v27) + v113);
            *(void *)(v3 + v112) = v114;
            v54 |= (unint64_t)(v115 & 0x7F) << v110;
            if (v115 < 0)
            {
              v110 += 7;
              BOOL v35 = v111++ >= 9;
              if (v35)
              {
                LODWORD(v54) = 0;
                goto LABEL_308;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v25)) {
          LODWORD(v54) = 0;
        }
LABEL_308:
        uint64_t v169 = 284;
        goto LABEL_322;
      case 23:
        if (!v40) {
          goto LABEL_279;
        }
        if ((*(unsigned char *)(a1 + 319) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_436;
          }
          uint64_t v172 = *(void *)(a1 + 316) << 34;
          goto LABEL_351;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_436;
        }
        char v47 = objc_alloc_init(GEOLocalizationCapabilities);
        if (!GEOLocalizationCapabilitiesReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_435;
        }
        PBReaderRecallMark();
        uint64_t v48 = 248;
        goto LABEL_268;
      case 24:
        if (!v40) {
          goto LABEL_279;
        }
        if ((*(unsigned char *)(a1 + 319) & 4) == 0)
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 224;
          goto LABEL_230;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_436;
        }
        uint64_t v172 = *(void *)(a1 + 316) << 37;
        goto LABEL_351;
      case 25:
        if ((v9 & 1) == 0) {
          goto LABEL_279;
        }
        char v116 = 0;
        unsigned int v117 = 0;
        uint64_t v118 = 0;
        *(void *)(a1 + 316) |= 0x100uLL;
        while (2)
        {
          uint64_t v119 = *v24;
          uint64_t v120 = *(void *)(v3 + v119);
          unint64_t v121 = v120 + 1;
          if (v120 == -1 || v121 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v25) = 1;
          }
          else
          {
            char v122 = *(unsigned char *)(*(void *)(v3 + *v27) + v120);
            *(void *)(v3 + v119) = v121;
            v118 |= (unint64_t)(v122 & 0x7F) << v116;
            if (v122 < 0)
            {
              v116 += 7;
              BOOL v35 = v117++ >= 9;
              if (v35)
              {
                uint64_t v118 = 0;
                goto LABEL_312;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v25)) {
          uint64_t v118 = 0;
        }
LABEL_312:
        BOOL v170 = v118 != 0;
        uint64_t v171 = 313;
        goto LABEL_317;
      case 26:
        if (!v40 || (*(unsigned char *)(a1 + 317) & 0x80) != 0) {
          goto LABEL_279;
        }
        if (v37 != 2)
        {
          char v187 = 0;
          unsigned int v188 = 0;
          uint64_t v189 = 0;
          while (1)
          {
            uint64_t v190 = *v24;
            uint64_t v191 = *(void *)(v3 + v190);
            unint64_t v192 = v191 + 1;
            if (v191 == -1 || v192 > *(void *)(v3 + *v7)) {
              goto LABEL_392;
            }
            char v193 = *(unsigned char *)(*(void *)(v3 + *v27) + v191);
            *(void *)(v3 + v190) = v192;
            v189 |= (unint64_t)(v193 & 0x7F) << v187;
            if (v193 < 0)
            {
              v187 += 7;
              BOOL v35 = v188++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_393;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_436;
        }
        while (1)
        {
          uint64_t v123 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v124 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v24) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_278;
          }
          char v125 = 0;
          unsigned int v126 = 0;
          uint64_t v127 = 0;
          uint64_t v128 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v129 = *v24;
            uint64_t v130 = *(void *)(v3 + v129);
            unint64_t v131 = v130 + 1;
            if (v130 == -1 || v131 > *(void *)(v3 + *v123)) {
              break;
            }
            char v132 = *(unsigned char *)(*(void *)(v3 + *v128) + v130);
            *(void *)(v3 + v129) = v131;
            v127 |= (unint64_t)(v132 & 0x7F) << v125;
            if (v132 < 0)
            {
              v125 += 7;
              BOOL v35 = v126++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_203;
          }
          *(unsigned char *)(v3 + *v124) = 1;
LABEL_203:
          PBRepeatedInt32Add();
        }
      case 27:
        if (!v40) {
          goto LABEL_279;
        }
        if ((*(unsigned char *)(a1 + 319) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_436;
          }
          uint64_t v172 = *(void *)(a1 + 316) << 33;
          goto LABEL_351;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_436;
        }
        char v47 = objc_alloc_init(GEOPDMapsSuggestionsTouristInfo);
        if (!GEOPDMapsSuggestionsTouristInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_435;
        }
        PBReaderRecallMark();
        uint64_t v48 = 256;
        goto LABEL_268;
      case 28:
        if (!v40 || (*(unsigned char *)(a1 + 317) & 8) != 0) {
          goto LABEL_279;
        }
        if (v37 != 2)
        {
          char v194 = 0;
          unsigned int v195 = 0;
          uint64_t v196 = 0;
          while (1)
          {
            uint64_t v197 = *v24;
            uint64_t v198 = *(void *)(v3 + v197);
            unint64_t v199 = v198 + 1;
            if (v198 == -1 || v199 > *(void *)(v3 + *v7)) {
              goto LABEL_392;
            }
            char v200 = *(unsigned char *)(*(void *)(v3 + *v27) + v198);
            *(void *)(v3 + v197) = v199;
            v196 |= (unint64_t)(v200 & 0x7F) << v194;
            if (v200 < 0)
            {
              v194 += 7;
              BOOL v35 = v195++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_393;
          }
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_436;
        }
        while (1)
        {
          uint64_t v133 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v134 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v24) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            goto LABEL_278;
          }
          char v135 = 0;
          unsigned int v136 = 0;
          uint64_t v137 = 0;
          unsigned int v138 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v139 = *v24;
            uint64_t v140 = *(void *)(v3 + v139);
            unint64_t v141 = v140 + 1;
            if (v140 == -1 || v141 > *(void *)(v3 + *v133)) {
              break;
            }
            char v142 = *(unsigned char *)(*(void *)(v3 + *v138) + v140);
            *(void *)(v3 + v139) = v141;
            v137 |= (unint64_t)(v142 & 0x7F) << v135;
            if (v142 < 0)
            {
              v135 += 7;
              BOOL v35 = v136++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_223;
          }
          *(unsigned char *)(v3 + *v134) = 1;
LABEL_223:
          PBRepeatedInt32Add();
        }
      case 29:
        if (!v40) {
          goto LABEL_279;
        }
        if ((*(unsigned char *)(a1 + 319) & 0x80) == 0)
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 264;
          goto LABEL_230;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_436;
        }
        uint64_t v172 = *(void *)(a1 + 316) << 32;
        goto LABEL_351;
      case 30:
        if (!v40) {
          goto LABEL_279;
        }
        if ((*(unsigned char *)(a1 + 319) & 0x10) == 0)
        {
          uint64_t v45 = PBReaderReadString();
          uint64_t v46 = 240;
LABEL_230:
          uint64_t v143 = *(void **)(a1 + v46);
          *(void *)(a1 + v46) = v45;
          goto LABEL_269;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_436;
        }
        uint64_t v172 = *(void *)(a1 + 316) << 35;
        goto LABEL_351;
      case 31:
        if ((v9 & 1) == 0) {
          goto LABEL_279;
        }
        char v144 = 0;
        unsigned int v145 = 0;
        uint64_t v146 = 0;
        *(void *)(a1 + 316) |= 0x200uLL;
        while (2)
        {
          uint64_t v147 = *v24;
          uint64_t v148 = *(void *)(v3 + v147);
          unint64_t v149 = v148 + 1;
          if (v148 == -1 || v149 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v25) = 1;
          }
          else
          {
            char v150 = *(unsigned char *)(*(void *)(v3 + *v27) + v148);
            *(void *)(v3 + v147) = v149;
            v146 |= (unint64_t)(v150 & 0x7F) << v144;
            if (v150 < 0)
            {
              v144 += 7;
              BOOL v35 = v145++ >= 9;
              if (v35)
              {
                uint64_t v146 = 0;
                goto LABEL_316;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v25)) {
          uint64_t v146 = 0;
        }
LABEL_316:
        BOOL v170 = v146 != 0;
        uint64_t v171 = 314;
LABEL_317:
        *(unsigned char *)(a1 + v171) = v170;
        goto LABEL_354;
      case 32:
        if ((v9 & 1) == 0) {
          goto LABEL_279;
        }
        char v151 = 0;
        unsigned int v152 = 0;
        uint64_t v54 = 0;
        *(void *)(a1 + 316) |= 8uLL;
        while (2)
        {
          uint64_t v153 = *v24;
          uint64_t v154 = *(void *)(v3 + v153);
          unint64_t v155 = v154 + 1;
          if (v154 == -1 || v155 > *(void *)(v3 + *v7))
          {
            *(unsigned char *)(v3 + *v25) = 1;
          }
          else
          {
            char v156 = *(unsigned char *)(*(void *)(v3 + *v27) + v154);
            *(void *)(v3 + v153) = v155;
            v54 |= (unint64_t)(v156 & 0x7F) << v151;
            if (v156 < 0)
            {
              v151 += 7;
              BOOL v35 = v152++ >= 9;
              if (v35)
              {
                LODWORD(v54) = 0;
                goto LABEL_321;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v25)) {
          LODWORD(v54) = 0;
        }
LABEL_321:
        uint64_t v169 = 296;
LABEL_322:
        *(_DWORD *)(a1 + v169) = v54;
        goto LABEL_354;
      case 33:
        if (!v40 || (*(unsigned char *)(a1 + 317) & 0x40) != 0) {
          goto LABEL_279;
        }
        if (v37 != 2)
        {
          char v201 = 0;
          unsigned int v202 = 0;
          uint64_t v203 = 0;
          while (1)
          {
            uint64_t v204 = *v24;
            uint64_t v205 = *(void *)(v3 + v204);
            unint64_t v206 = v205 + 1;
            if (v205 == -1 || v206 > *(void *)(v3 + *v7)) {
              break;
            }
            char v207 = *(unsigned char *)(*(void *)(v3 + *v27) + v205);
            *(void *)(v3 + v204) = v206;
            v203 |= (unint64_t)(v207 & 0x7F) << v201;
            if (v207 < 0)
            {
              v201 += 7;
              BOOL v35 = v202++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_393;
          }
LABEL_392:
          *(unsigned char *)(v3 + *v25) = 1;
LABEL_393:
          PBRepeatedInt32Add();
          goto LABEL_352;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_436;
        }
        while (1)
        {
          uint64_t v157 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v158 = (int *)MEMORY[0x1E4F940C8];
          if (*(void *)(v3 + *v24) >= *(void *)(v3 + (int)*MEMORY[0x1E4F940E0])
            || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8]))
          {
            break;
          }
          char v159 = 0;
          unsigned int v160 = 0;
          uint64_t v161 = 0;
          uint64_t v162 = (int *)MEMORY[0x1E4F940B8];
          while (1)
          {
            uint64_t v163 = *v24;
            uint64_t v164 = *(void *)(v3 + v163);
            unint64_t v165 = v164 + 1;
            if (v164 == -1 || v165 > *(void *)(v3 + *v157)) {
              break;
            }
            char v166 = *(unsigned char *)(*(void *)(v3 + *v162) + v164);
            *(void *)(v3 + v163) = v165;
            v161 |= (unint64_t)(v166 & 0x7F) << v159;
            if (v166 < 0)
            {
              v159 += 7;
              BOOL v35 = v160++ >= 9;
              if (!v35) {
                continue;
              }
            }
            goto LABEL_261;
          }
          *(unsigned char *)(v3 + *v158) = 1;
LABEL_261:
          PBRepeatedInt32Add();
        }
LABEL_278:
        PBReaderRecallMark();
        uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
        uint64_t v25 = (int *)MEMORY[0x1E4F940C8];
        goto LABEL_353;
      default:
        if (v39 != 100)
        {
          if (v39 == 101)
          {
            if (v40)
            {
              if ((*(unsigned char *)(a1 + 318) & 1) == 0)
              {
                if ((PBReaderPlaceMark() & 1) == 0) {
                  goto LABEL_436;
                }
                char v47 = objc_alloc_init(GEOABBranchInfo);
                if (!GEOABBranchInfoReadAllFrom((uint64_t)v47, (void *)v3, v11 & 1)) {
                  goto LABEL_435;
                }
                PBReaderRecallMark();
                uint64_t v48 = 144;
LABEL_268:
                uint64_t v143 = *(void **)(a1 + v48);
                *(void *)(a1 + v48) = v47;
LABEL_269:

                --v8;
LABEL_352:
                uint64_t v25 = (int *)MEMORY[0x1E4F940C8];
                uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
LABEL_353:
                uint64_t v27 = (int *)MEMORY[0x1E4F940B8];
                goto LABEL_354;
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_436;
              }
              uint64_t v172 = *(void *)(a1 + 316) << 47;
LABEL_351:
              v8 += v172 >> 63;
              goto LABEL_352;
            }
          }
          else
          {
LABEL_49:
            if ((v213 & 1) != 0 && (*(unsigned char *)(a1 + 317) & 4) == 0)
            {
              if (!*(void *)(a1 + 16))
              {
                id v49 = objc_alloc_init(MEMORY[0x1E4F940B0]);
                uint64_t v50 = *(void **)(a1 + 16);
                *(void *)(a1 + 16) = v49;
              }
              int v51 = PBUnknownFieldAdd();
              uint64_t v25 = (int *)MEMORY[0x1E4F940C8];
              uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
              uint64_t v27 = (int *)MEMORY[0x1E4F940B8];
              if (!v51)
              {
                int v214 = 0;
                char v22 = v216;
                goto LABEL_400;
              }
              goto LABEL_354;
            }
          }
LABEL_279:
          char v168 = PBReaderSkipValueWithTag();
          uint64_t v27 = (int *)MEMORY[0x1E4F940B8];
          uint64_t v7 = (int *)MEMORY[0x1E4F940E0];
          uint64_t v25 = (int *)MEMORY[0x1E4F940C8];
          if ((v168 & 1) == 0)
          {
LABEL_396:
            int v214 = 0;
            goto LABEL_397;
          }
LABEL_354:
          if (!(v215 & 1 | (v8 != 0)))
          {
            int v214 = 1;
LABEL_397:
            char v22 = v216;
            goto LABEL_398;
          }
          char v22 = v216;
          if (*(void *)(v3 + *v24) >= *(void *)(v3 + *v7)) {
            goto LABEL_394;
          }
          continue;
        }
        if (!v40) {
          goto LABEL_279;
        }
        if ((*(unsigned char *)(a1 + 318) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_436;
          }
          uint64_t v172 = *(void *)(a1 + 316) << 46;
          goto LABEL_351;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_436;
        }
        char v47 = objc_alloc_init(GEOABSecondPartyPlaceRequestClientMetaData);
        if (GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom((uint64_t)v47, (void *)v3, v11 & 1))
        {
          PBReaderRecallMark();
          uint64_t v48 = 152;
          goto LABEL_268;
        }
LABEL_435:

LABEL_436:
        int v214 = 0;
        char v22 = v216;
        uint64_t v25 = (int *)MEMORY[0x1E4F940C8];
LABEL_398:
        char v26 = v213;
LABEL_399:
        if (v26) {
LABEL_400:
        }
          *(void *)(a1 + 316) |= 0x400uLL;
        if (v22 & 1 | ((v214 & 1) == 0))
        {
          *(void *)(a1 + 316) |= 0xFFFFF800uLL;
          goto LABEL_429;
        }
        if (v23)
        {
          while (1)
          {
            int v210 = *v23++;
            int v209 = v210;
            uint64_t v208 = 0x200000;
            switch(v210)
            {
              case 0:
                goto LABEL_429;
              case 1:
                goto LABEL_427;
              case 2:
              case 6:
              case 7:
              case 8:
              case 10:
              case 11:
              case 12:
              case 14:
              case 16:
              case 19:
              case 22:
              case 25:
              case 31:
              case 32:
                continue;
              case 3:
                uint64_t v208 = 0x400000;
                goto LABEL_427;
              case 4:
                uint64_t v208 = 0x2000000;
                goto LABEL_427;
              case 5:
                uint64_t v208 = 0x8000000;
                goto LABEL_427;
              case 9:
                uint64_t v208 = 0x40000;
                goto LABEL_427;
              case 13:
                uint64_t v208 = 0x800000;
                goto LABEL_427;
              case 15:
                uint64_t v208 = 0x1000000;
                goto LABEL_427;
              case 17:
                uint64_t v208 = 0x100000;
                goto LABEL_427;
              case 18:
                uint64_t v208 = 4096;
                goto LABEL_427;
              case 20:
                uint64_t v208 = 0x2000;
                goto LABEL_427;
              case 21:
                uint64_t v208 = 0x80000;
                goto LABEL_427;
              case 23:
                uint64_t v208 = 0x20000000;
                goto LABEL_427;
              case 24:
                uint64_t v208 = 0x4000000;
                goto LABEL_427;
              case 26:
                uint64_t v208 = 0x8000;
                goto LABEL_427;
              case 27:
                uint64_t v208 = 0x40000000;
                goto LABEL_427;
              case 28:
                uint64_t v208 = 2048;
                goto LABEL_427;
              case 29:
                uint64_t v208 = 0x80000000;
                goto LABEL_427;
              case 30:
                uint64_t v208 = 0x10000000;
                goto LABEL_427;
              case 33:
                uint64_t v208 = 0x4000;
                goto LABEL_427;
              default:
                if (v209 == 100)
                {
                  uint64_t v208 = 0x20000;
LABEL_427:
                  *(void *)(a1 + 316) |= v208;
                }
                else if (v209 == 101)
                {
                  uint64_t v208 = 0x10000;
                  goto LABEL_427;
                }
                break;
            }
          }
        }
LABEL_429:
        if (v214)
        {
          unint64_t v3 = *(unsigned char *)(v3 + *v25) == 0;
          if ((v22 & 1) == 0) {
            return v3;
          }
LABEL_433:
          uint64_t v211 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          unint64_t v3 = 0;
          if (v22) {
            goto LABEL_433;
          }
        }
        return v3;
    }
  }
}

unint64_t GEOAdditionalEnabledMarketsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 44))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOAdditionalEnabledMarketsReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = [v8 position];
  *(_DWORD *)(a1 + 44) = [v8 length];
  if (a3) {
    char v9 = (int *)&GEOAdditionalEnabledMarketsReadAllFrom_recursiveTag;
  }
  else {
    char v9 = (int *)&GEOAdditionalEnabledMarketsReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOAdditionalEnabledMarketsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_188F8CB9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAdditionalEnabledMarketsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  int v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        uint64_t v12 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 != 0;
        int v15 = v14 | v7;
        int v16 = v14 & ~v7 | v8;
        if (((v14 | v7) | v9)) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = a3;
        }
        BOOL v18 = v10 != 0;
        uint64_t v19 = (int *)MEMORY[0x1E4F940E8];
        int v20 = 1;
        char v21 = (int *)MEMORY[0x1E4F940C8];
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_58;
        }
        char v47 = v16;
        int v48 = v15 | v18 | v16;
        char v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
        uint64_t v13 = v8;
LABEL_8:
        ++v10;
        uint64_t v7 = v12;
        uint64_t v8 = v13;
        continue;
    }
    break;
  }
  do
  {
    if (*(unsigned char *)(v3 + *v21)) {
      break;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v19;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_23;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_23:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_25:
    if (v31 || (v25 & 7) == 4) {
      break;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v15;
    if (!((v17 == 0) | v15 & 1))
    {
      BOOL v35 = v17;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 2)
    {
      if (!v34 || (*(unsigned char *)(a1 + 52) & 2) != 0)
      {
LABEL_54:
        int v20 = PBReaderSkipValueWithTag();
        char v21 = (int *)MEMORY[0x1E4F940C8];
        if ((v20 & v48 & 1) == 0) {
          goto LABEL_57;
        }
        continue;
      }
      unint64_t v39 = PBReaderReadString();
      if (v39) {
        -[GEOAdditionalEnabledMarkets _addNoFlagsOfflineMarket:](a1, v39);
      }
      goto LABEL_46;
    }
    if (v33 == 1)
    {
      if (!v34 || (*(unsigned char *)(a1 + 52) & 4) != 0) {
        goto LABEL_54;
      }
      unint64_t v39 = PBReaderReadString();
      if (v39) {
        -[GEOAdditionalEnabledMarkets _addNoFlagsTransitMarket:](a1, v39);
      }
LABEL_46:

      char v21 = (int *)MEMORY[0x1E4F940C8];
      goto LABEL_52;
    }
    if (v47 & 1) == 0 || (*(unsigned char *)(a1 + 52)) {
      goto LABEL_54;
    }
    if (!*(void *)(a1 + 16))
    {
      id v40 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      uint64_t v41 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v40;
    }
    char v42 = PBUnknownFieldAdd();
    char v21 = (int *)MEMORY[0x1E4F940C8];
    if ((v42 & 1) == 0)
    {
      int v20 = 0;
      goto LABEL_59;
    }
LABEL_52:
    if ((v48 & 1) == 0) {
      break;
    }
  }
  while (*(void *)(v3 + *v19) < *(void *)(v3 + *v6));
  int v20 = 1;
LABEL_57:
  LOBYTE(v16) = v47;
LABEL_58:
  if (v16) {
LABEL_59:
  }
    *(unsigned char *)(a1 + 52) |= 1u;
  if (v15 & 1 | ((v20 & 1) == 0))
  {
    *(unsigned char *)(a1 + 52) |= 4u;
    *(unsigned char *)(a1 + 52) |= 2u;
    goto LABEL_69;
  }
  if (v17)
  {
    while (2)
    {
      while (1)
      {
        int v44 = *v17++;
        int v43 = v44;
        if (v44 == 1) {
          break;
        }
        if (v43 == 2) {
          goto LABEL_68;
        }
        if (!v43) {
          goto LABEL_69;
        }
      }
      LOBYTE(v43) = 4;
LABEL_68:
      *(unsigned char *)(a1 + 52) |= v43;
      continue;
    }
  }
LABEL_69:
  if (v20)
  {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
    if ((v15 & 1) == 0) {
      return v3;
    }
LABEL_73:
    uint64_t v45 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    unint64_t v3 = 0;
    if (v15) {
      goto LABEL_73;
    }
  }
  return v3;
}

BOOL GEOLocalizationCapabilitiesReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    unsigned int v4 = (int *)MEMORY[0x1E4F940E8];
    unint64_t v5 = (int *)MEMORY[0x1E4F940E0];
    int v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          uint64_t v12 = *(void *)&v3[v11];
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v16 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        int v17 = v10 & 7;
        if (v16 || v17 == 4) {
          break;
        }
        if ((v10 >> 3) == 2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          *(unsigned char *)(a1 + 44) |= 1u;
          while (1)
          {
            uint64_t v29 = *v4;
            uint64_t v30 = *(void *)&v3[v29];
            unint64_t v31 = v30 + 1;
            if (v30 == -1 || v31 > *(void *)&v3[*v5]) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)&v3[*v7] + v30);
            *(void *)&v3[v29] = v31;
            v28 |= (unint64_t)(v32 & 0x7F) << v26;
            if ((v32 & 0x80) == 0) {
              goto LABEL_46;
            }
            v26 += 7;
            BOOL v15 = v27++ >= 9;
            if (v15)
            {
              uint64_t v28 = 0;
              goto LABEL_48;
            }
          }
          v3[*v6] = 1;
LABEL_46:
          if (v3[*v6]) {
            uint64_t v28 = 0;
          }
LABEL_48:
          *(unsigned char *)(a1 + 40) = v28 != 0;
        }
        else if ((v10 >> 3) == 1)
        {
          if (v17 == 2)
          {
            if (!PBReaderPlaceMark()) {
              goto LABEL_61;
            }
            while (*(void *)&v3[*v4] < *(void *)&v3[*v5] && !v3[*v6])
            {
              char v19 = 0;
              unsigned int v20 = 0;
              uint64_t v21 = 0;
              while (1)
              {
                uint64_t v22 = *v4;
                uint64_t v23 = *(void *)&v3[v22];
                unint64_t v24 = v23 + 1;
                if (v23 == -1 || v24 > *(void *)&v3[*v5]) {
                  break;
                }
                char v25 = *(unsigned char *)(*(void *)&v3[*v7] + v23);
                *(void *)&v3[v22] = v24;
                v21 |= (unint64_t)(v25 & 0x7F) << v19;
                if (v25 < 0)
                {
                  v19 += 7;
                  BOOL v15 = v20++ >= 9;
                  if (!v15) {
                    continue;
                  }
                }
                goto LABEL_33;
              }
              v3[*v6] = 1;
LABEL_33:
              PBRepeatedInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            char v35 = 0;
            unsigned int v36 = 0;
            uint64_t v37 = 0;
            while (1)
            {
              uint64_t v38 = *v4;
              uint64_t v39 = *(void *)&v3[v38];
              unint64_t v40 = v39 + 1;
              if (v39 == -1 || v40 > *(void *)&v3[*v5]) {
                break;
              }
              char v41 = *(unsigned char *)(*(void *)&v3[*v7] + v39);
              *(void *)&v3[v38] = v40;
              v37 |= (unint64_t)(v41 & 0x7F) << v35;
              if (v41 < 0)
              {
                v35 += 7;
                BOOL v15 = v36++ >= 9;
                if (!v15) {
                  continue;
                }
              }
              goto LABEL_58;
            }
            v3[*v6] = 1;
LABEL_58:
            PBRepeatedInt32Add();
          }
        }
        else
        {
          if (!*(void *)(a1 + 8))
          {
            id v33 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            BOOL v34 = *(void **)(a1 + 8);
            *(void *)(a1 + 8) = v33;
          }
          if (!PBUnknownFieldAdd()) {
            goto LABEL_61;
          }
        }
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v42 = v3[*v6] == 0;
  }
  else
  {
LABEL_61:
    BOOL v42 = 0;
  }
  objc_sync_exit(v3);

  return v42;
}

void sub_188F8D434(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDCollectionSuggestionResultIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    unint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_30;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_30;
      }
      if ((v8 >> 3) == 2) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1)) {
          goto LABEL_31;
        }
LABEL_27:
        PBReaderRecallMark();
        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_31;
      }
LABEL_29:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_30;
      }
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDExploreGuidesIsValid(a1))
    {
LABEL_31:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_27;
  }
LABEL_30:
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOPDPlaceInfoIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    unint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        BOOL v13 = v7++ >= 9;
        if (v13)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
        case 8u:
        case 9u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOLatLngIsValid(a1)) {
            goto LABEL_32;
          }
          goto LABEL_82;
        case 2u:
          if (v16 != 1) {
            goto LABEL_82;
          }
          uint64_t v18 = *v2;
          unint64_t v19 = *(void *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_50;
          }
          unint64_t v20 = v19 + 8;
          if (v20 > *(void *)&a1[*v3]) {
            goto LABEL_50;
          }
          *(void *)&a1[v18] = v20;
          continue;
        case 4u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOTimezoneIsValid(a1)) {
            goto LABEL_32;
          }
          goto LABEL_82;
        case 5u:
          if ((v8 & 7) != 0) {
            goto LABEL_82;
          }
          unsigned int v21 = 0;
          while (1)
          {
            uint64_t v22 = *v2;
            uint64_t v23 = *(void *)&a1[v22];
            unint64_t v24 = v23 + 1;
            if (v23 == -1 || v24 > *(void *)&a1[*v3]) {
              goto LABEL_49;
            }
            int v25 = *(char *)(*(void *)&a1[*v5] + v23);
            *(void *)&a1[v22] = v24;
            if (v25 < 0)
            {
              BOOL v26 = v21++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_51;
          }
        case 6u:
          if ((v8 & 7) != 0) {
            goto LABEL_82;
          }
          unsigned int v27 = 0;
          while (1)
          {
            uint64_t v28 = *v2;
            uint64_t v29 = *(void *)&a1[v28];
            unint64_t v30 = v29 + 1;
            if (v29 == -1 || v30 > *(void *)&a1[*v3]) {
              break;
            }
            int v31 = *(char *)(*(void *)&a1[*v5] + v29);
            *(void *)&a1[v28] = v30;
            if (v31 < 0)
            {
              BOOL v26 = v27++ > 8;
              if (!v26) {
                continue;
              }
            }
            goto LABEL_51;
          }
LABEL_49:
          uint64_t v14 = *v4;
LABEL_50:
          a1[v14] = 1;
          continue;
        case 7u:
          if (v16 != 2 || !PBReaderPlaceMark()) {
            goto LABEL_82;
          }
          objc_msgSend(a1, "position", 0, 0);
          [a1 length];
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_82;
          }
          continue;
      }
      while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
      {
        char v32 = 0;
        unsigned int v33 = 0;
        unint64_t v34 = 0;
        while (1)
        {
          uint64_t v35 = *v2;
          uint64_t v36 = *(void *)&a1[v35];
          unint64_t v37 = v36 + 1;
          if (v36 == -1 || v37 > *(void *)&a1[*v3]) {
            break;
          }
          char v38 = *(unsigned char *)(*(void *)&a1[*v5] + v36);
          *(void *)&a1[v35] = v37;
          v34 |= (unint64_t)(v38 & 0x7F) << v32;
          if ((v38 & 0x80) == 0) {
            goto LABEL_66;
          }
          v32 += 7;
          BOOL v13 = v33++ >= 9;
          if (v13)
          {
            unint64_t v34 = 0;
            int v39 = a1[*v4];
            goto LABEL_68;
          }
        }
        a1[*v4] = 1;
LABEL_66:
        int v39 = a1[*v4];
        if (a1[*v4]) {
          unint64_t v34 = 0;
        }
LABEL_68:
        int v40 = v34 & 7;
        if (v39 || v40 == 4) {
          break;
        }
        if ((v34 >> 3) == 1)
        {
          if (v40 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_81:
            PBReaderRecallMark();
            goto LABEL_82;
          }
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_81;
        }
      }
      int v42 = a1[*v4];
      PBReaderRecallMark();
      if (v42)
      {
LABEL_82:
        PBReaderRecallMark();
        return 0;
      }
LABEL_32:
      PBReaderRecallMark();
LABEL_51:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v43 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v43;
}

uint64_t GEOTimezoneIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = 0;
  }
  else
  {
    int v5 = 0;
    char v6 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v7 = 0;
      unsigned int v8 = 0;
      unint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *v2;
        uint64_t v11 = *(void *)&a1[v10];
        unint64_t v12 = v11 + 1;
        if (v11 == -1 || v12 > *(void *)&a1[*v3]) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)&a1[*v6] + v11);
        *(void *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v7 += 7;
        if (v8++ >= 9)
        {
          unint64_t v9 = 0;
          int v15 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v15 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v9 = 0;
      }
LABEL_14:
      int v16 = v9 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      if ((v9 >> 3) == 1)
      {
        uint64_t v18 = 0;
        if (v5 || v16 != 2) {
          goto LABEL_33;
        }
        int v5 = 1;
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_34:
          uint64_t v18 = 0;
          goto LABEL_33;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_34;
      }
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  if (a1[*v4]) {
    BOOL v19 = 1;
  }
  else {
    BOOL v19 = v5 == 0;
  }
  uint64_t v18 = !v19;
LABEL_33:
  PBReaderRecallMark();
  return v18;
}

BOOL GEOPDPlaceCollectionIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        BOOL v13 = v7++ >= 9;
        if (v13)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
        case 2u:
        case 7u:
        case 0xAu:
        case 0xBu:
        case 0x14u:
        case 0x15u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x1Bu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1)) {
            goto LABEL_197;
          }
          goto LABEL_77;
        case 3u:
        case 0x11u:
        case 0x1Au:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDCaptionedPhotoIsValid(a1)) {
            goto LABEL_197;
          }
          goto LABEL_77;
        case 4u:
        case 5u:
        case 8u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1)) {
            goto LABEL_197;
          }
          goto LABEL_77;
        case 6u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceCollectionItemIsValid(a1)) {
            goto LABEL_197;
          }
          goto LABEL_77;
        case 9u:
          if ((v8 & 7) != 0) {
            goto LABEL_197;
          }
          unsigned int v18 = 0;
          while (1)
          {
            uint64_t v19 = *v2;
            uint64_t v20 = *(void *)&a1[v19];
            unint64_t v21 = v20 + 1;
            if (v20 == -1 || v21 > *(void *)&a1[*v3]) {
              goto LABEL_72;
            }
            int v22 = *(char *)(*(void *)&a1[*v5] + v20);
            *(void *)&a1[v19] = v21;
            if (v22 < 0)
            {
              BOOL v23 = v18++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_78;
          }
        case 0xCu:
          if (v16 != 1) {
            goto LABEL_197;
          }
          uint64_t v24 = *v2;
          unint64_t v25 = *(void *)&a1[v24];
          if (v25 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_73;
          }
          unint64_t v26 = v25 + 8;
          if (v26 > *(void *)&a1[*v3]) {
            goto LABEL_73;
          }
          *(void *)&a1[v24] = v26;
          continue;
        case 0xDu:
          if (v16 == 2) {
            goto LABEL_50;
          }
          goto LABEL_197;
        case 0xEu:
          if (v16 == 2) {
            goto LABEL_50;
          }
          goto LABEL_197;
        case 0xFu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDPublisherIsValid(a1)) {
            goto LABEL_197;
          }
          goto LABEL_77;
        case 0x10u:
          if ((v8 & 7) != 0) {
            goto LABEL_197;
          }
          unsigned int v27 = 0;
          while (1)
          {
            uint64_t v28 = *v2;
            uint64_t v29 = *(void *)&a1[v28];
            unint64_t v30 = v29 + 1;
            if (v29 == -1 || v30 > *(void *)&a1[*v3]) {
              goto LABEL_72;
            }
            int v31 = *(char *)(*(void *)&a1[*v5] + v29);
            *(void *)&a1[v28] = v30;
            if (v31 < 0)
            {
              BOOL v23 = v27++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_78;
          }
        case 0x12u:
          if ((v8 & 7) != 0) {
            goto LABEL_197;
          }
          unsigned int v32 = 0;
          while (1)
          {
            uint64_t v33 = *v2;
            uint64_t v34 = *(void *)&a1[v33];
            unint64_t v35 = v34 + 1;
            if (v34 == -1 || v35 > *(void *)&a1[*v3]) {
              break;
            }
            int v36 = *(char *)(*(void *)&a1[*v5] + v34);
            *(void *)&a1[v33] = v35;
            if (v36 < 0)
            {
              BOOL v23 = v32++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_78;
          }
LABEL_72:
          uint64_t v14 = *v4;
LABEL_73:
          a1[v14] = 1;
          continue;
        case 0x13u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOLocalizedBytesIsValid(a1)) {
            goto LABEL_77;
          }
          goto LABEL_197;
        case 0x19u:
          if (v16 != 2 || !PBReaderPlaceMark()) {
            goto LABEL_197;
          }
          objc_msgSend(a1, "position", 0, 0);
          [a1 length];
          break;
        default:
LABEL_50:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_197;
          }
          continue;
      }
LABEL_83:
      while (2)
      {
        if (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v37 = 0;
          unsigned int v38 = 0;
          unint64_t v39 = 0;
          while (1)
          {
            uint64_t v40 = *v2;
            uint64_t v41 = *(void *)&a1[v40];
            unint64_t v42 = v41 + 1;
            if (v41 == -1 || v42 > *(void *)&a1[*v3]) {
              break;
            }
            char v43 = *(unsigned char *)(*(void *)&a1[*v5] + v41);
            *(void *)&a1[v40] = v42;
            v39 |= (unint64_t)(v43 & 0x7F) << v37;
            if ((v43 & 0x80) == 0) {
              goto LABEL_93;
            }
            v37 += 7;
            BOOL v13 = v38++ >= 9;
            if (v13)
            {
              unint64_t v39 = 0;
              int v44 = a1[*v4];
              goto LABEL_95;
            }
          }
          a1[*v4] = 1;
LABEL_93:
          int v44 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v39 = 0;
          }
LABEL_95:
          int v45 = v39 & 7;
          if (!v44 && v45 != 4)
          {
            switch((v39 >> 3))
            {
              case 1u:
                if (v45 != 2) {
                  goto LABEL_196;
                }
                goto LABEL_103;
              case 2u:
                if (v45 == 2) {
                  goto LABEL_103;
                }
                goto LABEL_196;
              case 3u:
                if ((v39 & 7) != 0) {
                  goto LABEL_196;
                }
                unsigned int v47 = 0;
                while (1)
                {
                  uint64_t v48 = *v2;
                  uint64_t v49 = *(void *)&a1[v48];
                  unint64_t v50 = v49 + 1;
                  if (v49 == -1 || v50 > *(void *)&a1[*v3]) {
                    goto LABEL_121;
                  }
                  int v51 = *(char *)(*(void *)&a1[*v5] + v49);
                  *(void *)&a1[v48] = v50;
                  if (v51 < 0)
                  {
                    BOOL v23 = v47++ > 8;
                    if (!v23) {
                      continue;
                    }
                  }
                  goto LABEL_83;
                }
              case 4u:
                if ((v39 & 7) != 0) {
                  goto LABEL_196;
                }
                unsigned int v52 = 0;
                do
                {
                  uint64_t v53 = *v2;
                  uint64_t v54 = *(void *)&a1[v53];
                  unint64_t v55 = v54 + 1;
                  if (v54 == -1 || v55 > *(void *)&a1[*v3])
                  {
LABEL_121:
                    a1[*v4] = 1;
                    goto LABEL_83;
                  }
                  int v56 = *(char *)(*(void *)&a1[*v5] + v54);
                  *(void *)&a1[v53] = v55;
                  if ((v56 & 0x80000000) == 0) {
                    break;
                  }
                  BOOL v23 = v52++ > 8;
                }
                while (!v23);
                continue;
              case 5u:
                if (v45 != 2 || !PBReaderPlaceMark()) {
                  goto LABEL_196;
                }
                [a1 position];
                [a1 length];
                while (2)
                {
                  if (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
                  {
                    char v57 = 0;
                    unsigned int v58 = 0;
                    unint64_t v59 = 0;
                    while (1)
                    {
                      uint64_t v60 = *v2;
                      uint64_t v61 = *(void *)&a1[v60];
                      unint64_t v62 = v61 + 1;
                      if (v61 == -1 || v62 > *(void *)&a1[*v3]) {
                        break;
                      }
                      char v63 = *(unsigned char *)(*(void *)&a1[*v5] + v61);
                      *(void *)&a1[v60] = v62;
                      v59 |= (unint64_t)(v63 & 0x7F) << v57;
                      if ((v63 & 0x80) == 0) {
                        goto LABEL_135;
                      }
                      v57 += 7;
                      BOOL v13 = v58++ >= 9;
                      if (v13)
                      {
                        unint64_t v59 = 0;
                        int v64 = a1[*v4];
                        goto LABEL_137;
                      }
                    }
                    a1[*v4] = 1;
LABEL_135:
                    int v64 = a1[*v4];
                    if (a1[*v4]) {
                      unint64_t v59 = 0;
                    }
LABEL_137:
                    int v65 = v59 & 7;
                    if (!v64 && v65 != 4)
                    {
                      if ((v59 >> 3) == 2)
                      {
                        if (v65 != 2) {
                          goto LABEL_195;
                        }
                      }
                      else
                      {
                        if ((v59 >> 3) != 1)
                        {
                          if (!PBReaderSkipValueWithTag()) {
                            goto LABEL_195;
                          }
                          continue;
                        }
                        if (v65 != 2) {
                          goto LABEL_195;
                        }
                      }
                      if ((PBReaderSkipValueWithTag() & 1) == 0) {
                        goto LABEL_195;
                      }
                      continue;
                    }
                  }
                  goto LABEL_190;
                }
              case 6u:
                if (v45 != 2 || !PBReaderPlaceMark()) {
                  goto LABEL_196;
                }
                [a1 position];
                [a1 length];
                break;
              default:
LABEL_103:
                if ((PBReaderSkipValueWithTag() & 1) == 0) {
                  goto LABEL_196;
                }
                continue;
            }
LABEL_153:
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
            {
              char v67 = 0;
              unsigned int v68 = 0;
              unint64_t v69 = 0;
              while (1)
              {
                uint64_t v70 = *v2;
                uint64_t v71 = *(void *)&a1[v70];
                unint64_t v72 = v71 + 1;
                if (v71 == -1 || v72 > *(void *)&a1[*v3]) {
                  break;
                }
                char v73 = *(unsigned char *)(*(void *)&a1[*v5] + v71);
                *(void *)&a1[v70] = v72;
                v69 |= (unint64_t)(v73 & 0x7F) << v67;
                if ((v73 & 0x80) == 0) {
                  goto LABEL_163;
                }
                v67 += 7;
                BOOL v13 = v68++ >= 9;
                if (v13)
                {
                  unint64_t v69 = 0;
                  int v74 = a1[*v4];
                  goto LABEL_165;
                }
              }
              a1[*v4] = 1;
LABEL_163:
              int v74 = a1[*v4];
              if (a1[*v4]) {
                unint64_t v69 = 0;
              }
LABEL_165:
              if (v74 || (v69 & 7) == 4) {
                break;
              }
              if ((v69 >> 3) == 2)
              {
                if ((v69 & 7) == 0)
                {
                  unsigned int v81 = 0;
                  while (1)
                  {
                    uint64_t v82 = *v2;
                    uint64_t v83 = *(void *)&a1[v82];
                    unint64_t v84 = v83 + 1;
                    if (v83 == -1 || v84 > *(void *)&a1[*v3]) {
                      break;
                    }
                    int v85 = *(char *)(*(void *)&a1[*v5] + v83);
                    *(void *)&a1[v82] = v84;
                    if (v85 < 0)
                    {
                      BOOL v23 = v81++ > 8;
                      if (!v23) {
                        continue;
                      }
                    }
                    goto LABEL_153;
                  }
LABEL_187:
                  a1[*v4] = 1;
                  continue;
                }
                goto LABEL_195;
              }
              if ((v69 >> 3) == 1)
              {
                if ((v69 & 7) == 0)
                {
                  unsigned int v76 = 0;
                  while (1)
                  {
                    uint64_t v77 = *v2;
                    uint64_t v78 = *(void *)&a1[v77];
                    unint64_t v79 = v78 + 1;
                    if (v78 == -1 || v79 > *(void *)&a1[*v3]) {
                      goto LABEL_187;
                    }
                    int v80 = *(char *)(*(void *)&a1[*v5] + v78);
                    *(void *)&a1[v77] = v79;
                    if (v80 < 0)
                    {
                      BOOL v23 = v76++ > 8;
                      if (!v23) {
                        continue;
                      }
                    }
                    goto LABEL_153;
                  }
                }
LABEL_195:
                PBReaderRecallMark();
                goto LABEL_196;
              }
              if ((PBReaderSkipValueWithTag() & 1) == 0) {
                goto LABEL_195;
              }
            }
LABEL_190:
            int v86 = a1[*v4];
            PBReaderRecallMark();
            if (!v86)
            {
              PBReaderRecallMark();
              continue;
            }
LABEL_196:
            PBReaderRecallMark();
LABEL_197:
            PBReaderRecallMark();
            return 0;
          }
        }
        break;
      }
      int v87 = a1[*v4];
      PBReaderRecallMark();
      if (v87) {
        goto LABEL_197;
      }
LABEL_77:
      PBReaderRecallMark();
LABEL_78:
      ;
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v88 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v88;
}

BOOL GEOPDMapsIdentifierIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDShardedIdIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOPDShardedIdIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] >= *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
LABEL_78:
    BOOL v49 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v49;
  }
  int v5 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (a1[*v4]) {
      goto LABEL_78;
    }
    char v6 = 0;
    unsigned int v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = *v2;
      uint64_t v10 = *(void *)&a1[v9];
      unint64_t v11 = v10 + 1;
      if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
        break;
      }
      char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
      *(void *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0) {
        goto LABEL_12;
      }
      v6 += 7;
      if (v7++ >= 9)
      {
        unint64_t v8 = 0;
        int v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    int v14 = a1[*v4];
    if (a1[*v4]) {
      unint64_t v8 = 0;
    }
LABEL_14:
    int v15 = v8 & 7;
    if (v14 || v15 == 4) {
      goto LABEL_78;
    }
    unint64_t v17 = v8 >> 3;
    switch((v8 >> 3))
    {
      case 1u:
        if ((v8 & 7) != 0) {
          goto LABEL_77;
        }
        unsigned int v18 = 0;
        while (1)
        {
          uint64_t v19 = *v2;
          uint64_t v20 = *(void *)&a1[v19];
          unint64_t v21 = v20 + 1;
          if (v20 == -1 || v21 > *(void *)&a1[*v3]) {
            goto LABEL_73;
          }
          int v22 = *(char *)(*(void *)&a1[*v5] + v20);
          *(void *)&a1[v19] = v21;
          if (v22 < 0)
          {
            BOOL v23 = v18++ > 8;
            if (!v23) {
              continue;
            }
          }
          goto LABEL_74;
        }
      case 2u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1)) {
          goto LABEL_77;
        }
        PBReaderRecallMark();
        goto LABEL_74;
      case 3u:
        if ((v8 & 7) != 0) {
          goto LABEL_77;
        }
        unsigned int v29 = 0;
        while (1)
        {
          uint64_t v30 = *v2;
          uint64_t v31 = *(void *)&a1[v30];
          unint64_t v32 = v31 + 1;
          if (v31 == -1 || v32 > *(void *)&a1[*v3]) {
            goto LABEL_73;
          }
          int v33 = *(char *)(*(void *)&a1[*v5] + v31);
          *(void *)&a1[v30] = v32;
          if (v33 < 0)
          {
            BOOL v23 = v29++ > 8;
            if (!v23) {
              continue;
            }
          }
          goto LABEL_74;
        }
      case 4u:
        if ((v8 & 7) != 0) {
          goto LABEL_77;
        }
        unsigned int v34 = 0;
        while (1)
        {
          uint64_t v35 = *v2;
          uint64_t v36 = *(void *)&a1[v35];
          unint64_t v37 = v36 + 1;
          if (v36 == -1 || v37 > *(void *)&a1[*v3]) {
            goto LABEL_73;
          }
          int v38 = *(char *)(*(void *)&a1[*v5] + v36);
          *(void *)&a1[v35] = v37;
          if (v38 < 0)
          {
            BOOL v23 = v34++ > 8;
            if (!v23) {
              continue;
            }
          }
          goto LABEL_74;
        }
      case 5u:
        if ((v8 & 7) != 0) {
          goto LABEL_77;
        }
        unsigned int v39 = 0;
        while (1)
        {
          uint64_t v40 = *v2;
          uint64_t v41 = *(void *)&a1[v40];
          unint64_t v42 = v41 + 1;
          if (v41 == -1 || v42 > *(void *)&a1[*v3]) {
            goto LABEL_73;
          }
          int v43 = *(char *)(*(void *)&a1[*v5] + v41);
          *(void *)&a1[v40] = v42;
          if (v43 < 0)
          {
            BOOL v23 = v39++ > 8;
            if (!v23) {
              continue;
            }
          }
          goto LABEL_74;
        }
      default:
        if (v17 == 50)
        {
          if ((v8 & 7) != 0) {
            goto LABEL_77;
          }
          unsigned int v44 = 0;
          while (1)
          {
            uint64_t v45 = *v2;
            uint64_t v46 = *(void *)&a1[v45];
            unint64_t v47 = v46 + 1;
            if (v46 == -1 || v47 > *(void *)&a1[*v3]) {
              goto LABEL_73;
            }
            int v48 = *(char *)(*(void *)&a1[*v5] + v46);
            *(void *)&a1[v45] = v47;
            if (v48 < 0)
            {
              BOOL v23 = v44++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_74;
          }
        }
        if (v17 == 51)
        {
          if ((v8 & 7) != 0) {
            goto LABEL_77;
          }
          unsigned int v24 = 0;
          while (1)
          {
            uint64_t v25 = *v2;
            uint64_t v26 = *(void *)&a1[v25];
            unint64_t v27 = v26 + 1;
            if (v26 == -1 || v27 > *(void *)&a1[*v3]) {
              break;
            }
            int v28 = *(char *)(*(void *)&a1[*v5] + v26);
            *(void *)&a1[v25] = v27;
            if (v28 < 0)
            {
              BOOL v23 = v24++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_74;
          }
LABEL_73:
          a1[*v4] = 1;
LABEL_74:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_78;
          }
          continue;
        }
        if (PBReaderSkipValueWithTag()) {
          goto LABEL_74;
        }
LABEL_77:
        PBReaderRecallMark();
        return 0;
    }
  }
}

BOOL GEOLatLngIsValid(char *a1)
{
  v39[1] = *MEMORY[0x1E4F143B8];
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  v39[0] = 0;
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_60;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4)
      {
LABEL_60:
        BOOL v36 = HIDWORD(v39[0]) != 0;
        goto LABEL_54;
      }
      unint64_t v18 = v8 >> 3;
      if ((int)(v8 >> 3) > 2)
      {
        if (v18 != 3)
        {
          if (v18 != 100)
          {
LABEL_41:
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              goto LABEL_58;
            }
            goto LABEL_50;
          }
          if ((v8 & 7) != 0) {
            goto LABEL_58;
          }
          unsigned int v23 = 0;
          while (1)
          {
            uint64_t v24 = *v2;
            uint64_t v25 = *(void *)&a1[v24];
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)&a1[*v3]) {
              break;
            }
            int v27 = *(char *)(*(void *)&a1[*v5] + v25);
            *(void *)&a1[v24] = v26;
            if (v27 < 0 && v23++ <= 8) {
              continue;
            }
            goto LABEL_50;
          }
          uint64_t v14 = *v4;
          goto LABEL_49;
        }
      }
      else if (v18 == 1)
      {
        uint64_t v29 = 0;
        char v30 = 1;
        while (1)
        {
          char v31 = v30;
          int v32 = *((_DWORD *)v39 + v29);
          if (!v32) {
            break;
          }
          if (v32 != 1)
          {
            char v30 = 0;
            uint64_t v29 = 1;
            if (v31) {
              continue;
            }
          }
          goto LABEL_58;
        }
        *((_DWORD *)v39 + v29) = 1;
      }
      else
      {
        if (v18 != 2) {
          goto LABEL_41;
        }
        uint64_t v19 = 0;
        char v20 = 1;
        while (1)
        {
          char v21 = v20;
          int v22 = *((_DWORD *)v39 + v19);
          if (!v22) {
            break;
          }
          if (v22 != 2)
          {
            char v20 = 0;
            uint64_t v19 = 1;
            if (v21) {
              continue;
            }
          }
          goto LABEL_58;
        }
        *((_DWORD *)v39 + v19) = 2;
      }
      if (v16 != 1)
      {
LABEL_58:
        PBReaderRecallMark();
        return 0;
      }
      uint64_t v33 = *v2;
      unint64_t v34 = *(void *)&a1[v33];
      if (v34 <= 0xFFFFFFFFFFFFFFF7)
      {
        unint64_t v35 = v34 + 8;
        if (v35 <= *(void *)&a1[*v3])
        {
          *(void *)&a1[v33] = v35;
          goto LABEL_50;
        }
      }
LABEL_49:
      a1[v14] = 1;
LABEL_50:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_60;
      }
    }
  }
  BOOL v36 = 0;
LABEL_54:
  if (a1[*v4]) {
    BOOL v37 = 0;
  }
  else {
    BOOL v37 = v36;
  }
  PBReaderRecallMark();
  return v37;
}

BOOL GEOPDEntityIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        BOOL v13 = v7++ >= 9;
        if (v13)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0) {
            goto LABEL_240;
          }
          unsigned int v18 = 0;
          while (1)
          {
            uint64_t v19 = *v2;
            uint64_t v20 = *(void *)&a1[v19];
            unint64_t v21 = v20 + 1;
            if (v20 == -1 || v21 > *(void *)&a1[*v3]) {
              goto LABEL_210;
            }
            int v22 = *(char *)(*(void *)&a1[*v5] + v20);
            *(void *)&a1[v19] = v21;
            if (v22 < 0)
            {
              BOOL v23 = v18++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_216;
          }
        case 2u:
          if (v16 == 2) {
            goto LABEL_181;
          }
          goto LABEL_240;
        case 3u:
          if (v16 == 2) {
            goto LABEL_181;
          }
          goto LABEL_240;
        case 4u:
          if (v16 == 2) {
            goto LABEL_181;
          }
          goto LABEL_240;
        case 5u:
          if (v16 == 2) {
            goto LABEL_181;
          }
          goto LABEL_240;
        case 6u:
          if (v16 == 2) {
            goto LABEL_181;
          }
          goto LABEL_240;
        case 7u:
          if (v16 == 2) {
            goto LABEL_181;
          }
          goto LABEL_240;
        case 8u:
          if ((v8 & 7) != 0) {
            goto LABEL_240;
          }
          unsigned int v24 = 0;
          while (1)
          {
            uint64_t v25 = *v2;
            uint64_t v26 = *(void *)&a1[v25];
            unint64_t v27 = v26 + 1;
            if (v26 == -1 || v27 > *(void *)&a1[*v3]) {
              goto LABEL_210;
            }
            int v28 = *(char *)(*(void *)&a1[*v5] + v26);
            *(void *)&a1[v25] = v27;
            if (v28 < 0)
            {
              BOOL v23 = v24++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_216;
          }
        case 9u:
          if ((v8 & 7) != 0) {
            goto LABEL_240;
          }
          unsigned int v29 = 0;
          while (1)
          {
            uint64_t v30 = *v2;
            uint64_t v31 = *(void *)&a1[v30];
            unint64_t v32 = v31 + 1;
            if (v31 == -1 || v32 > *(void *)&a1[*v3]) {
              goto LABEL_210;
            }
            int v33 = *(char *)(*(void *)&a1[*v5] + v31);
            *(void *)&a1[v30] = v32;
            if (v33 < 0)
            {
              BOOL v23 = v29++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_216;
          }
        case 0xAu:
        case 0xBu:
        case 0x17u:
        case 0x18u:
        case 0x1Du:
        case 0x29u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1)) {
            goto LABEL_240;
          }
          goto LABEL_215;
        case 0xCu:
        case 0x22u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDCategoryIsValid(a1)) {
            goto LABEL_240;
          }
          goto LABEL_215;
        case 0xEu:
          if ((v8 & 7) != 0) {
            goto LABEL_240;
          }
          unsigned int v34 = 0;
          while (1)
          {
            uint64_t v35 = *v2;
            uint64_t v36 = *(void *)&a1[v35];
            unint64_t v37 = v36 + 1;
            if (v36 == -1 || v37 > *(void *)&a1[*v3]) {
              goto LABEL_210;
            }
            int v38 = *(char *)(*(void *)&a1[*v5] + v36);
            *(void *)&a1[v35] = v37;
            if (v38 < 0)
            {
              BOOL v23 = v34++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_216;
          }
        case 0xFu:
          if ((v8 & 7) != 0) {
            goto LABEL_240;
          }
          unsigned int v39 = 0;
          while (1)
          {
            uint64_t v40 = *v2;
            uint64_t v41 = *(void *)&a1[v40];
            unint64_t v42 = v41 + 1;
            if (v41 == -1 || v42 > *(void *)&a1[*v3]) {
              goto LABEL_210;
            }
            int v43 = *(char *)(*(void *)&a1[*v5] + v41);
            *(void *)&a1[v40] = v42;
            if (v43 < 0)
            {
              BOOL v23 = v39++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_216;
          }
        case 0x10u:
          if ((v8 & 7) != 0) {
            goto LABEL_240;
          }
          unsigned int v44 = 0;
          while (1)
          {
            uint64_t v45 = *v2;
            uint64_t v46 = *(void *)&a1[v45];
            unint64_t v47 = v46 + 1;
            if (v46 == -1 || v47 > *(void *)&a1[*v3]) {
              goto LABEL_210;
            }
            int v48 = *(char *)(*(void *)&a1[*v5] + v46);
            *(void *)&a1[v45] = v47;
            if (v48 < 0)
            {
              BOOL v23 = v44++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_216;
          }
        case 0x11u:
          if ((v8 & 7) != 0) {
            goto LABEL_240;
          }
          unsigned int v49 = 0;
          while (1)
          {
            uint64_t v50 = *v2;
            uint64_t v51 = *(void *)&a1[v50];
            unint64_t v52 = v51 + 1;
            if (v51 == -1 || v52 > *(void *)&a1[*v3]) {
              goto LABEL_210;
            }
            int v53 = *(char *)(*(void *)&a1[*v5] + v51);
            *(void *)&a1[v50] = v52;
            if (v53 < 0)
            {
              BOOL v23 = v49++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_216;
          }
        case 0x12u:
          if ((v8 & 7) != 0) {
            goto LABEL_240;
          }
          unsigned int v54 = 0;
          while (1)
          {
            uint64_t v55 = *v2;
            uint64_t v56 = *(void *)&a1[v55];
            unint64_t v57 = v56 + 1;
            if (v56 == -1 || v57 > *(void *)&a1[*v3]) {
              goto LABEL_210;
            }
            int v58 = *(char *)(*(void *)&a1[*v5] + v56);
            *(void *)&a1[v55] = v57;
            if (v58 < 0)
            {
              BOOL v23 = v54++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_216;
          }
        case 0x13u:
          if ((v8 & 7) != 0) {
            goto LABEL_240;
          }
          unsigned int v59 = 0;
          while (1)
          {
            uint64_t v60 = *v2;
            uint64_t v61 = *(void *)&a1[v60];
            unint64_t v62 = v61 + 1;
            if (v61 == -1 || v62 > *(void *)&a1[*v3]) {
              goto LABEL_210;
            }
            int v63 = *(char *)(*(void *)&a1[*v5] + v61);
            *(void *)&a1[v60] = v62;
            if (v63 < 0)
            {
              BOOL v23 = v59++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_216;
          }
        case 0x14u:
          if ((v8 & 7) != 0) {
            goto LABEL_240;
          }
          unsigned int v64 = 0;
          while (1)
          {
            uint64_t v65 = *v2;
            uint64_t v66 = *(void *)&a1[v65];
            unint64_t v67 = v66 + 1;
            if (v66 == -1 || v67 > *(void *)&a1[*v3]) {
              goto LABEL_210;
            }
            int v68 = *(char *)(*(void *)&a1[*v5] + v66);
            *(void *)&a1[v65] = v67;
            if (v68 < 0)
            {
              BOOL v23 = v64++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_216;
          }
        case 0x15u:
          if ((v8 & 7) != 0) {
            goto LABEL_240;
          }
          unsigned int v69 = 0;
          while (1)
          {
            uint64_t v70 = *v2;
            uint64_t v71 = *(void *)&a1[v70];
            unint64_t v72 = v71 + 1;
            if (v71 == -1 || v72 > *(void *)&a1[*v3]) {
              goto LABEL_210;
            }
            int v73 = *(char *)(*(void *)&a1[*v5] + v71);
            *(void *)&a1[v70] = v72;
            if (v73 < 0)
            {
              BOOL v23 = v69++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_216;
          }
        case 0x16u:
          if (v16 != 2)
          {
            if ((v8 & 7) != 0) {
              goto LABEL_240;
            }
            while (1)
            {
              uint64_t v74 = *v2;
              uint64_t v75 = *(void *)&a1[v74];
              unint64_t v76 = v75 + 1;
              if (v75 == -1 || v76 > *(void *)&a1[*v3]) {
                goto LABEL_210;
              }
              int v77 = *(char *)(*(void *)&a1[*v5] + v75);
              *(void *)&a1[v74] = v76;
              if (v77 < 0)
              {
                unsigned int v78 = v16++;
                if (v78 <= 8) {
                  continue;
                }
              }
              goto LABEL_216;
            }
          }
          if (!PBReaderPlaceMark()) {
            goto LABEL_240;
          }
LABEL_219:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
          {
            unsigned int v117 = a1[*v4];
            if (a1[*v4]) {
              break;
            }
            while (1)
            {
              uint64_t v118 = *v2;
              uint64_t v119 = *(void *)&a1[v118];
              unint64_t v120 = v119 + 1;
              if (v119 == -1 || v120 > *(void *)&a1[*v3]) {
                break;
              }
              int v121 = *(char *)(*(void *)&a1[*v5] + v119);
              *(void *)&a1[v118] = v120;
              if (v121 < 0)
              {
                BOOL v13 = v117++ >= 9;
                if (!v13) {
                  continue;
                }
              }
              goto LABEL_219;
            }
            a1[*v4] = 1;
          }
          goto LABEL_215;
        case 0x19u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOStyleAttributesIsValid(a1)) {
            goto LABEL_240;
          }
          goto LABEL_215;
        case 0x1Au:
          if (v16 == 2) {
            goto LABEL_181;
          }
          goto LABEL_240;
        case 0x1Bu:
          if (v16 == 2) {
            goto LABEL_181;
          }
          goto LABEL_240;
        case 0x1Cu:
          if ((v8 & 7) != 0) {
            goto LABEL_240;
          }
          unsigned int v79 = 0;
          while (1)
          {
            uint64_t v80 = *v2;
            uint64_t v81 = *(void *)&a1[v80];
            unint64_t v82 = v81 + 1;
            if (v81 == -1 || v82 > *(void *)&a1[*v3]) {
              goto LABEL_210;
            }
            int v83 = *(char *)(*(void *)&a1[*v5] + v81);
            *(void *)&a1[v80] = v82;
            if (v83 < 0)
            {
              BOOL v23 = v79++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_216;
          }
        case 0x1Eu:
          if ((v8 & 7) != 0) {
            goto LABEL_240;
          }
          unsigned int v84 = 0;
          while (1)
          {
            uint64_t v85 = *v2;
            uint64_t v86 = *(void *)&a1[v85];
            unint64_t v87 = v86 + 1;
            if (v86 == -1 || v87 > *(void *)&a1[*v3]) {
              goto LABEL_210;
            }
            int v88 = *(char *)(*(void *)&a1[*v5] + v86);
            *(void *)&a1[v85] = v87;
            if (v88 < 0)
            {
              BOOL v23 = v84++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_216;
          }
        case 0x1Fu:
          if ((v8 & 7) != 0) {
            goto LABEL_240;
          }
          unsigned int v89 = 0;
          while (1)
          {
            uint64_t v90 = *v2;
            uint64_t v91 = *(void *)&a1[v90];
            unint64_t v92 = v91 + 1;
            if (v91 == -1 || v92 > *(void *)&a1[*v3]) {
              goto LABEL_210;
            }
            int v93 = *(char *)(*(void *)&a1[*v5] + v91);
            *(void *)&a1[v90] = v92;
            if (v93 < 0)
            {
              BOOL v23 = v89++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_216;
          }
        case 0x20u:
          if ((v8 & 7) != 0) {
            goto LABEL_240;
          }
          unsigned int v94 = 0;
          while (1)
          {
            uint64_t v95 = *v2;
            uint64_t v96 = *(void *)&a1[v95];
            unint64_t v97 = v96 + 1;
            if (v96 == -1 || v97 > *(void *)&a1[*v3]) {
              goto LABEL_210;
            }
            int v98 = *(char *)(*(void *)&a1[*v5] + v96);
            *(void *)&a1[v95] = v97;
            if (v98 < 0)
            {
              BOOL v23 = v94++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_216;
          }
        case 0x21u:
          if (v16 == 2) {
            goto LABEL_181;
          }
          goto LABEL_240;
        case 0x23u:
          if (v16 != 5) {
            goto LABEL_240;
          }
          uint64_t v99 = *v2;
          unint64_t v100 = *(void *)&a1[v99];
          if (v100 > 0xFFFFFFFFFFFFFFFBLL) {
            goto LABEL_211;
          }
          unint64_t v101 = v100 + 4;
          if (v101 > *(void *)&a1[*v3]) {
            goto LABEL_211;
          }
          *(void *)&a1[v99] = v101;
          goto LABEL_216;
        case 0x24u:
          if (v16 == 2) {
            goto LABEL_181;
          }
          goto LABEL_240;
        case 0x25u:
          if ((v8 & 7) != 0) {
            goto LABEL_240;
          }
          unsigned int v102 = 0;
          while (1)
          {
            uint64_t v103 = *v2;
            uint64_t v104 = *(void *)&a1[v103];
            unint64_t v105 = v104 + 1;
            if (v104 == -1 || v105 > *(void *)&a1[*v3]) {
              goto LABEL_210;
            }
            int v106 = *(char *)(*(void *)&a1[*v5] + v104);
            *(void *)&a1[v103] = v105;
            if (v106 < 0)
            {
              BOOL v23 = v102++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_216;
          }
        case 0x26u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDInlineRapEnablementIsValid(a1)) {
            goto LABEL_240;
          }
          goto LABEL_215;
        case 0x27u:
          if ((v8 & 7) != 0) {
            goto LABEL_240;
          }
          unsigned int v107 = 0;
          while (1)
          {
            uint64_t v108 = *v2;
            uint64_t v109 = *(void *)&a1[v108];
            unint64_t v110 = v109 + 1;
            if (v109 == -1 || v110 > *(void *)&a1[*v3]) {
              goto LABEL_210;
            }
            int v111 = *(char *)(*(void *)&a1[*v5] + v109);
            *(void *)&a1[v108] = v110;
            if (v111 < 0)
            {
              BOOL v23 = v107++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_216;
          }
        case 0x28u:
          if (v16 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_240:
              PBReaderRecallMark();
              return 0;
            }
LABEL_229:
            while (*(void *)&a1[*v2] < *(void *)&a1[*v3])
            {
              unsigned int v122 = a1[*v4];
              if (a1[*v4]) {
                break;
              }
              while (1)
              {
                uint64_t v123 = *v2;
                uint64_t v124 = *(void *)&a1[v123];
                unint64_t v125 = v124 + 1;
                if (v124 == -1 || v125 > *(void *)&a1[*v3]) {
                  break;
                }
                int v126 = *(char *)(*(void *)&a1[*v5] + v124);
                *(void *)&a1[v123] = v125;
                if (v126 < 0)
                {
                  BOOL v13 = v122++ >= 9;
                  if (!v13) {
                    continue;
                  }
                }
                goto LABEL_229;
              }
              a1[*v4] = 1;
            }
LABEL_215:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0) {
              goto LABEL_240;
            }
            while (1)
            {
              uint64_t v112 = *v2;
              uint64_t v113 = *(void *)&a1[v112];
              unint64_t v114 = v113 + 1;
              if (v113 == -1 || v114 > *(void *)&a1[*v3]) {
                break;
              }
              int v115 = *(char *)(*(void *)&a1[*v5] + v113);
              *(void *)&a1[v112] = v114;
              if (v115 < 0)
              {
                unsigned int v116 = v16++;
                if (v116 <= 8) {
                  continue;
                }
              }
              goto LABEL_216;
            }
LABEL_210:
            uint64_t v14 = *v4;
LABEL_211:
            a1[v14] = 1;
          }
LABEL_216:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_238;
          }
          break;
        case 0x2Au:
          if (v16 == 2 && PBReaderPlaceMark() && GEOPDURLDataIsValid(a1)) {
            goto LABEL_215;
          }
          goto LABEL_240;
        default:
LABEL_181:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_240;
          }
          goto LABEL_216;
      }
    }
  }
LABEL_238:
  BOOL v127 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v127;
}

BOOL GEOLocalizedStringIsValid(char *a1)
{
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_27;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_27;
      }
      if ((v8 >> 3) == 3) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2) {
          goto LABEL_29;
        }
        goto LABEL_23;
      }
      if (!PBReaderSkipValueWithTag())
      {
LABEL_29:
        BOOL v17 = 0;
        goto LABEL_28;
      }
LABEL_26:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_27;
      }
    }
    if (v15 != 2) {
      goto LABEL_29;
    }
LABEL_23:
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_26;
  }
LABEL_27:
  BOOL v17 = a1[*v4] == 0;
LABEL_28:
  PBReaderRecallMark();
  return v17;
}

BOOL GEOPDCaptionedPhotoIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = (int *)MEMORY[0x1E4F940B8];
    while (!a1[*v4])
    {
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        BOOL v13 = v7++ >= 9;
        if (v13)
        {
          unint64_t v8 = 0;
          uint64_t v14 = *v4;
          int v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      uint64_t v14 = *v4;
      int v15 = a1[v14];
      if (a1[v14]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v16 = v8 & 7;
      if (v15 || v16 == 4) {
        break;
      }
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 != 2) {
            goto LABEL_138;
          }
          goto LABEL_26;
        case 2u:
          if (v16 == 2) {
            goto LABEL_26;
          }
          goto LABEL_138;
        case 3u:
          if (v16 == 2) {
            goto LABEL_26;
          }
          goto LABEL_138;
        case 4u:
          if (v16 == 2) {
            goto LABEL_26;
          }
          goto LABEL_138;
        case 5u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDPhotoIsValid(a1)) {
            goto LABEL_138;
          }
          goto LABEL_133;
        case 6u:
          if ((v8 & 7) != 0) {
            goto LABEL_138;
          }
          unsigned int v18 = 0;
          while (1)
          {
            uint64_t v19 = *v2;
            uint64_t v20 = *(void *)&a1[v19];
            unint64_t v21 = v20 + 1;
            if (v20 == -1 || v21 > *(void *)&a1[*v3]) {
              goto LABEL_130;
            }
            int v22 = *(char *)(*(void *)&a1[*v5] + v20);
            *(void *)&a1[v19] = v21;
            if (v22 < 0)
            {
              BOOL v23 = v18++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_134;
          }
        case 7u:
          if ((v8 & 7) != 0) {
            goto LABEL_138;
          }
          unsigned int v24 = 0;
          while (1)
          {
            uint64_t v25 = *v2;
            uint64_t v26 = *(void *)&a1[v25];
            unint64_t v27 = v26 + 1;
            if (v26 == -1 || v27 > *(void *)&a1[*v3]) {
              goto LABEL_130;
            }
            int v28 = *(char *)(*(void *)&a1[*v5] + v26);
            *(void *)&a1[v25] = v27;
            if (v28 < 0)
            {
              BOOL v23 = v24++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_134;
          }
        case 8u:
          if ((v8 & 7) != 0) {
            goto LABEL_138;
          }
          unsigned int v29 = 0;
          while (1)
          {
            uint64_t v30 = *v2;
            uint64_t v31 = *(void *)&a1[v30];
            unint64_t v32 = v31 + 1;
            if (v31 == -1 || v32 > *(void *)&a1[*v3]) {
              goto LABEL_130;
            }
            int v33 = *(char *)(*(void *)&a1[*v5] + v31);
            *(void *)&a1[v30] = v32;
            if (v33 < 0)
            {
              BOOL v23 = v29++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_134;
          }
        case 9u:
          if ((v8 & 7) != 0) {
            goto LABEL_138;
          }
          unsigned int v34 = 0;
          while (1)
          {
            uint64_t v35 = *v2;
            uint64_t v36 = *(void *)&a1[v35];
            unint64_t v37 = v36 + 1;
            if (v36 == -1 || v37 > *(void *)&a1[*v3]) {
              goto LABEL_130;
            }
            int v38 = *(char *)(*(void *)&a1[*v5] + v36);
            *(void *)&a1[v35] = v37;
            if (v38 < 0)
            {
              BOOL v23 = v34++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_134;
          }
        case 0xAu:
          if ((v8 & 7) != 0) {
            goto LABEL_138;
          }
          unsigned int v39 = 0;
          while (1)
          {
            uint64_t v40 = *v2;
            uint64_t v41 = *(void *)&a1[v40];
            unint64_t v42 = v41 + 1;
            if (v41 == -1 || v42 > *(void *)&a1[*v3]) {
              goto LABEL_130;
            }
            int v43 = *(char *)(*(void *)&a1[*v5] + v41);
            *(void *)&a1[v40] = v42;
            if (v43 < 0)
            {
              BOOL v23 = v39++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_134;
          }
        case 0xBu:
          if (v16 != 2 || !PBReaderPlaceMark()) {
            goto LABEL_138;
          }
          objc_msgSend(a1, "position", 0, 0);
          [a1 length];
LABEL_75:
          while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
          {
            char v44 = 0;
            unsigned int v45 = 0;
            unint64_t v46 = 0;
            while (2)
            {
              uint64_t v47 = *v2;
              uint64_t v48 = *(void *)&a1[v47];
              unint64_t v49 = v48 + 1;
              if (v48 == -1 || v49 > *(void *)&a1[*v3])
              {
                a1[*v4] = 1;
              }
              else
              {
                char v50 = *(unsigned char *)(*(void *)&a1[*v5] + v48);
                *(void *)&a1[v47] = v49;
                v46 |= (unint64_t)(v50 & 0x7F) << v44;
                if (v50 < 0)
                {
                  v44 += 7;
                  BOOL v13 = v45++ >= 9;
                  if (v13)
                  {
                    unint64_t v46 = 0;
                    int v51 = a1[*v4];
                    goto LABEL_87;
                  }
                  continue;
                }
              }
              break;
            }
            int v51 = a1[*v4];
            if (a1[*v4]) {
              unint64_t v46 = 0;
            }
LABEL_87:
            int v52 = v46 & 7;
            if (v51) {
              BOOL v53 = 1;
            }
            else {
              BOOL v53 = v52 == 4;
            }
            if (!v53)
            {
              switch((v46 >> 3))
              {
                case 1u:
                  if (v52 != 2) {
                    goto LABEL_137;
                  }
                  goto LABEL_103;
                case 2u:
                  if (v52 == 2) {
                    goto LABEL_103;
                  }
                  goto LABEL_137;
                case 3u:
                  if (v52 == 2) {
                    goto LABEL_103;
                  }
                  goto LABEL_137;
                case 4u:
                  if (v52 == 2) {
                    goto LABEL_103;
                  }
                  goto LABEL_137;
                case 5u:
                  if (v52 != 2) {
                    goto LABEL_137;
                  }
LABEL_103:
                  if (PBReaderSkipValueWithTag()) {
                    continue;
                  }
LABEL_137:
                  PBReaderRecallMark();
                  goto LABEL_138;
                case 6u:
                  if ((v46 & 7) != 0) {
                    goto LABEL_137;
                  }
                  unsigned int v54 = 0;
                  break;
                default:
                  if (PBReaderSkipValueWithTag()) {
                    continue;
                  }
                  goto LABEL_137;
              }
              do
              {
                uint64_t v55 = *v2;
                uint64_t v56 = *(void *)&a1[v55];
                unint64_t v57 = v56 + 1;
                if (v56 == -1 || v57 > *(void *)&a1[*v3])
                {
                  a1[*v4] = 1;
                  goto LABEL_75;
                }
                int v58 = *(char *)(*(void *)&a1[*v5] + v56);
                *(void *)&a1[v55] = v57;
                if ((v58 & 0x80000000) == 0) {
                  break;
                }
                BOOL v23 = v54++ > 8;
              }
              while (!v23);
              continue;
            }
            break;
          }
          int v67 = a1[*v4];
          PBReaderRecallMark();
          if (v67)
          {
LABEL_138:
            PBReaderRecallMark();
            return 0;
          }
LABEL_133:
          PBReaderRecallMark();
LABEL_134:
          if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
            goto LABEL_135;
          }
          break;
        case 0xCu:
          if (v16 == 2 && PBReaderPlaceMark() && GEOPDAttributionIsValid(a1)) {
            goto LABEL_133;
          }
          goto LABEL_138;
        case 0xDu:
          if (v16 != 1) {
            goto LABEL_138;
          }
          uint64_t v59 = *v2;
          unint64_t v60 = *(void *)&a1[v59];
          if (v60 > 0xFFFFFFFFFFFFFFF7) {
            goto LABEL_131;
          }
          unint64_t v61 = v60 + 8;
          if (v61 > *(void *)&a1[*v3]) {
            goto LABEL_131;
          }
          *(void *)&a1[v59] = v61;
          goto LABEL_134;
        case 0xEu:
          if ((v8 & 7) != 0) {
            goto LABEL_138;
          }
          unsigned int v62 = 0;
          while (1)
          {
            uint64_t v63 = *v2;
            uint64_t v64 = *(void *)&a1[v63];
            unint64_t v65 = v64 + 1;
            if (v64 == -1 || v65 > *(void *)&a1[*v3]) {
              break;
            }
            int v66 = *(char *)(*(void *)&a1[*v5] + v64);
            *(void *)&a1[v63] = v65;
            if (v66 < 0)
            {
              BOOL v23 = v62++ > 8;
              if (!v23) {
                continue;
              }
            }
            goto LABEL_134;
          }
LABEL_130:
          uint64_t v14 = *v4;
LABEL_131:
          a1[v14] = 1;
          goto LABEL_134;
        default:
LABEL_26:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_138;
          }
          goto LABEL_134;
      }
    }
  }
LABEL_135:
  BOOL v68 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v68;
}

BOOL GEOPDPhotoIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (a1[*v4]) {
        break;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        BOOL v13 = v7++ >= 9;
        if (v13)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        break;
      }
      if ((v8 >> 3) == 2)
      {
        if (v15 != 2 || !PBReaderPlaceMark()) {
          goto LABEL_77;
        }
        objc_msgSend(a1, "position", 0, 0);
        [a1 length];
LABEL_25:
        while (*(void *)&a1[*v2] < *(void *)&a1[*v3] && !a1[*v4])
        {
          char v17 = 0;
          unsigned int v18 = 0;
          unint64_t v19 = 0;
          while (1)
          {
            uint64_t v20 = *v2;
            uint64_t v21 = *(void *)&a1[v20];
            unint64_t v22 = v21 + 1;
            if (v21 == -1 || v22 > *(void *)&a1[*v3]) {
              break;
            }
            char v23 = *(unsigned char *)(*(void *)&a1[*v5] + v21);
            *(void *)&a1[v20] = v22;
            v19 |= (unint64_t)(v23 & 0x7F) << v17;
            if ((v23 & 0x80) == 0) {
              goto LABEL_35;
            }
            v17 += 7;
            BOOL v13 = v18++ >= 9;
            if (v13)
            {
              unint64_t v19 = 0;
              int v24 = a1[*v4];
              goto LABEL_37;
            }
          }
          a1[*v4] = 1;
LABEL_35:
          int v24 = a1[*v4];
          if (a1[*v4]) {
            unint64_t v19 = 0;
          }
LABEL_37:
          int v25 = v19 & 7;
          if (v24 || v25 == 4) {
            break;
          }
          switch((v19 >> 3))
          {
            case 1u:
              if ((v19 & 7) != 0) {
                goto LABEL_76;
              }
              unsigned int v27 = 0;
              while (1)
              {
                uint64_t v28 = *v2;
                uint64_t v29 = *(void *)&a1[v28];
                unint64_t v30 = v29 + 1;
                if (v29 == -1 || v30 > *(void *)&a1[*v3]) {
                  goto LABEL_69;
                }
                int v31 = *(char *)(*(void *)&a1[*v5] + v29);
                *(void *)&a1[v28] = v30;
                if (v31 < 0)
                {
                  BOOL v32 = v27++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_25;
              }
            case 2u:
              if ((v19 & 7) != 0) {
                goto LABEL_76;
              }
              unsigned int v33 = 0;
              while (1)
              {
                uint64_t v34 = *v2;
                uint64_t v35 = *(void *)&a1[v34];
                unint64_t v36 = v35 + 1;
                if (v35 == -1 || v36 > *(void *)&a1[*v3]) {
                  goto LABEL_69;
                }
                int v37 = *(char *)(*(void *)&a1[*v5] + v35);
                *(void *)&a1[v34] = v36;
                if (v37 < 0)
                {
                  BOOL v32 = v33++ > 8;
                  if (!v32) {
                    continue;
                  }
                }
                goto LABEL_25;
              }
            case 3u:
              if (v25 == 2) {
                goto LABEL_59;
              }
              goto LABEL_76;
            case 4u:
              if ((v19 & 7) != 0) {
                goto LABEL_76;
              }
              unsigned int v38 = 0;
              break;
            default:
LABEL_59:
              if (PBReaderSkipValueWithTag()) {
                continue;
              }
LABEL_76:
              PBReaderRecallMark();
              goto LABEL_77;
          }
          while (1)
          {
            uint64_t v39 = *v2;
            uint64_t v40 = *(void *)&a1[v39];
            unint64_t v41 = v40 + 1;
            if (v40 == -1 || v41 > *(void *)&a1[*v3]) {
              break;
            }
            int v42 = *(char *)(*(void *)&a1[*v5] + v40);
            *(void *)&a1[v39] = v41;
            if (v42 < 0)
            {
              BOOL v32 = v38++ > 8;
              if (!v32) {
                continue;
              }
            }
            goto LABEL_25;
          }
LABEL_69:
          a1[*v4] = 1;
        }
        int v43 = a1[*v4];
        PBReaderRecallMark();
        if (v43)
        {
LABEL_77:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v8 >> 3) == 1 && v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_77;
      }
    }
    while (*(void *)&a1[*v2] < *(void *)&a1[*v3]);
  }
  BOOL v44 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v44;
}

void sub_188F94B0C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F94C34(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F94E2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F95034(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F9517C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *_GEOAutomobileOptionsIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  if ((*(unsigned char *)(a1 + 60) & 0x50) != 0) {
    return (os_unfair_lock_s *)1;
  }
  if ((*(unsigned char *)(a1 + 60) & 0x20) == 0) {
    return 0;
  }
  unint64_t v3 = *(os_unfair_lock_s **)(a1 + 32);

  return GEOVehicleSpecificationsIsDirty(v3);
}

void sub_188F957FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F958D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDViewportInfoIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  unsigned int v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    int v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_44;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_44;
      }
      unint64_t v17 = v8 >> 3;
      if ((v8 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        if ((v8 & 7) != 0) {
          goto LABEL_46;
        }
        unsigned int v24 = 0;
        while (1)
        {
          uint64_t v25 = *v2;
          uint64_t v26 = *(void *)&a1[v25];
          unint64_t v27 = v26 + 1;
          if (v26 == -1 || v27 > *(void *)&a1[*v3]) {
            goto LABEL_41;
          }
          int v28 = *(char *)(*(void *)&a1[*v5] + v26);
          *(void *)&a1[v25] = v27;
          if (v28 < 0)
          {
            BOOL v23 = v24++ > 8;
            if (!v23) {
              continue;
            }
          }
          goto LABEL_43;
        }
      }
      if (v17 == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapRegionIsValid(a1))
        {
LABEL_46:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_46;
      }
LABEL_43:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_44;
      }
    }
    if ((v8 & 7) != 0) {
      goto LABEL_46;
    }
    unsigned int v18 = 0;
    while (1)
    {
      uint64_t v19 = *v2;
      uint64_t v20 = *(void *)&a1[v19];
      unint64_t v21 = v20 + 1;
      if (v20 == -1 || v21 > *(void *)&a1[*v3]) {
        break;
      }
      int v22 = *(char *)(*(void *)&a1[*v5] + v20);
      *(void *)&a1[v19] = v21;
      if (v22 < 0)
      {
        BOOL v23 = v18++ > 8;
        if (!v23) {
          continue;
        }
      }
      goto LABEL_43;
    }
LABEL_41:
    a1[*v4] = 1;
    goto LABEL_43;
  }
LABEL_44:
  BOOL v29 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v29;
}

unint64_t GEOPDQueryUnderstandingTaxonomyLookupParametersReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        uint64_t v12 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 != 0;
        int v15 = v14 | v7;
        int v16 = v14 & ~v7 | v8;
        if (((v14 | v7) | v9)) {
          unint64_t v17 = 0;
        }
        else {
          unint64_t v17 = a3;
        }
        BOOL v18 = v10 != 0;
        uint64_t v19 = (int *)MEMORY[0x1E4F940E8];
        int v20 = 1;
        unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6)) {
          goto LABEL_58;
        }
        char v48 = v16;
        int v22 = v15 | v18 | v16;
        BOOL v23 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
        uint64_t v13 = v8;
LABEL_8:
        ++v10;
        uint64_t v7 = v12;
        uint64_t v8 = v13;
        continue;
    }
    break;
  }
  do
  {
    if (*(unsigned char *)(v3 + *v21)) {
      break;
    }
    char v24 = 0;
    unsigned int v25 = 0;
    unint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = *v19;
      uint64_t v28 = *(void *)(v3 + v27);
      unint64_t v29 = v28 + 1;
      if (v28 == -1 || v29 > *(void *)(v3 + *v6)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(v3 + *v23) + v28);
      *(void *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0) {
        goto LABEL_23;
      }
      v24 += 7;
      if (v25++ >= 9)
      {
        unint64_t v26 = 0;
        int v32 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_23:
    int v32 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v26 = 0;
    }
LABEL_25:
    if (v32 || (v26 & 7) == 4) {
      break;
    }
    unint64_t v34 = v26 >> 3;
    BOOL v35 = v15;
    if (!((v17 == 0) | v15 & 1))
    {
      unint64_t v36 = v17;
      do
      {
        int v38 = *v36++;
        int v37 = v38;
        BOOL v35 = v38 != 0;
        if (v38) {
          BOOL v39 = v37 == v34;
        }
        else {
          BOOL v39 = 1;
        }
      }
      while (!v39);
    }
    if (v34 == 2)
    {
      if (!v35 || (*(unsigned char *)(a1 + 52) & 2) != 0)
      {
LABEL_54:
        int v20 = PBReaderSkipValueWithTag();
        unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        if ((v20 & v22 & 1) == 0) {
          goto LABEL_57;
        }
        continue;
      }
      uint64_t v40 = PBReaderReadString();
      if (v40) {
        -[GEOPDQueryUnderstandingTaxonomyLookupParameters _addNoFlagsCategoryBranch:](a1, v40);
      }
      goto LABEL_46;
    }
    if (v34 == 1)
    {
      if (!v35 || (*(unsigned char *)(a1 + 52) & 4) != 0) {
        goto LABEL_54;
      }
      uint64_t v40 = PBReaderReadString();
      if (v40) {
        -[GEOPDQueryUnderstandingTaxonomyLookupParameters _addNoFlagsIdentifier:](a1, v40);
      }
LABEL_46:

      unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
      goto LABEL_52;
    }
    if (v48 & 1) == 0 || (*(unsigned char *)(a1 + 52)) {
      goto LABEL_54;
    }
    if (!*(void *)(a1 + 16))
    {
      id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      int v42 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v41;
    }
    char v43 = PBUnknownFieldAdd();
    unint64_t v21 = (int *)MEMORY[0x1E4F940C8];
    if ((v43 & 1) == 0)
    {
      int v20 = 0;
      goto LABEL_59;
    }
LABEL_52:
    if ((v22 & 1) == 0) {
      break;
    }
  }
  while (*(void *)(v3 + *v19) < *(void *)(v3 + *v6));
  int v20 = 1;
LABEL_57:
  LOBYTE(v16) = v48;
LABEL_58:
  if (v16) {
LABEL_59:
  }
    *(unsigned char *)(a1 + 52) |= 1u;
  if (v15 & 1 | ((v20 & 1) == 0))
  {
    *(unsigned char *)(a1 + 52) |= 4u;
    *(unsigned char *)(a1 + 52) |= 2u;
    goto LABEL_69;
  }
  if (v17)
  {
    while (2)
    {
      while (1)
      {
        int v45 = *v17++;
        int v44 = v45;
        if (v45 == 1) {
          break;
        }
        if (v44 == 2) {
          goto LABEL_68;
        }
        if (!v44) {
          goto LABEL_69;
        }
      }
      LOBYTE(v44) = 4;
LABEL_68:
      *(unsigned char *)(a1 + 52) |= v44;
      continue;
    }
  }
LABEL_69:
  if (v20)
  {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
    if ((v15 & 1) == 0) {
      return v3;
    }
LABEL_73:
    unint64_t v46 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    unint64_t v3 = 0;
    if (v15) {
      goto LABEL_73;
    }
  }
  return v3;
}

unint64_t GEOTFRoadSpeedReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 124);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 120)];
  uint64_t v7 = 0;
  char v8 = 0;
  int v9 = 0;
  unsigned int v10 = (unsigned __int16)(vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 160)), (uint16x4_t)0xFFF7FFF8FFF5FFF4) & 0xFF01FF01FF01FF01))+ ((*(_WORD *)(a1 + 160) >> 7) & 1)+ ((*(_WORD *)(a1 + 160) >> 10) & 1));
  while (1)
  {
    unsigned int v11 = a3[v7];
    if (v11 >= 0xFFFFFFFE)
    {
      int v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3) {
      break;
    }
    char v8 = 1;
LABEL_9:
    ++v7;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  int v12 = v9 | (v10 > 3);
  if ((v12 | v8)) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = a3;
  }
  LODWORD(v14) = v12;
  int v15 = (int *)MEMORY[0x1E4F940E8];
  int v16 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(v3 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(v3 + *v6))
  {
LABEL_194:
    if (v14)
    {
      char v109 = 1;
      goto LABEL_196;
    }
    if (v13)
    {
      while (1)
      {
        int v110 = *v13++;
        __int16 v111 = 2048;
        switch(v110)
        {
          case 0:
            goto LABEL_207;
          case 6:
            goto LABEL_206;
          case 9:
            __int16 v111 = 4096;
            goto LABEL_206;
          case 12:
            __int16 v111 = 256;
            goto LABEL_206;
          case 13:
            __int16 v111 = 512;
            goto LABEL_206;
          case 14:
            __int16 v111 = 128;
            goto LABEL_206;
          case 15:
            __int16 v111 = 1024;
LABEL_206:
            *(_WORD *)(a1 + 160) |= v111;
            break;
          default:
            continue;
        }
      }
    }
    goto LABEL_207;
  }
  char v115 = (v13 == 0) | v12;
  unint64_t v17 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(v3 + *v16)) {
      goto LABEL_194;
    }
    char v18 = 0;
    unsigned int v19 = 0;
    unint64_t v20 = 0;
    while (1)
    {
      uint64_t v21 = *v15;
      uint64_t v22 = *(void *)(v3 + v21);
      unint64_t v23 = v22 + 1;
      if (v22 == -1 || v23 > *(void *)(v3 + *v6)) {
        break;
      }
      char v24 = *(unsigned char *)(*(void *)(v3 + *v17) + v22);
      *(void *)(v3 + v21) = v23;
      v20 |= (unint64_t)(v24 & 0x7F) << v18;
      if ((v24 & 0x80) == 0) {
        goto LABEL_24;
      }
      v18 += 7;
      BOOL v25 = v19++ >= 9;
      if (v25)
      {
        unint64_t v20 = 0;
        uint64_t v26 = *v16;
        int v27 = *(unsigned __int8 *)(v3 + v26);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v16) = 1;
LABEL_24:
    uint64_t v26 = *v16;
    int v27 = *(unsigned __int8 *)(v3 + v26);
    if (*(unsigned char *)(v3 + v26)) {
      unint64_t v20 = 0;
    }
LABEL_26:
    int v28 = v20 & 7;
    if (v27 || v28 == 4) {
      goto LABEL_194;
    }
    unint64_t v30 = v20 >> 3;
    BOOL v31 = (char)v14;
    if ((v115 & 1) == 0)
    {
      int v32 = v13;
      do
      {
        int v34 = *v32++;
        int v33 = v34;
        BOOL v31 = v34 != 0;
        if (v34) {
          BOOL v35 = v33 == v30;
        }
        else {
          BOOL v35 = 1;
        }
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_141;
        }
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v38 = 0;
        while (1)
        {
          uint64_t v39 = *v15;
          uint64_t v40 = *(void *)(v3 + v39);
          unint64_t v41 = v40 + 1;
          if (v40 == -1 || v41 > *(void *)(v3 + *v6)) {
            break;
          }
          char v42 = *(unsigned char *)(*(void *)(v3 + *v17) + v40);
          *(void *)(v3 + v39) = v41;
          v38 |= (unint64_t)(v42 & 0x7F) << v36;
          if ((v42 & 0x80) == 0) {
            goto LABEL_145;
          }
          v36 += 7;
          BOOL v25 = v37++ >= 9;
          if (v25)
          {
            uint64_t v38 = 0;
            goto LABEL_147;
          }
        }
        *(unsigned char *)(v3 + *v16) = 1;
LABEL_145:
        if (*(unsigned char *)(v3 + *v16)) {
          uint64_t v38 = 0;
        }
LABEL_147:
        *(void *)(a1 + 88) = -(v38 & 1) ^ (v38 >> 1);
        goto LABEL_192;
      case 3:
        if ((v8 & 1) == 0) {
          goto LABEL_141;
        }
        *(_WORD *)(a1 + 160) |= 0x20u;
        uint64_t v44 = *v15;
        unint64_t v45 = *(void *)(v3 + v44);
        if (v45 <= 0xFFFFFFFFFFFFFFFBLL && v45 + 4 <= *(void *)(v3 + *v6))
        {
          int v46 = *(_DWORD *)(*(void *)(v3 + *v17) + v45);
          *(void *)(v3 + v44) = v45 + 4;
        }
        else
        {
          *(unsigned char *)(v3 + *v16) = 1;
          int v46 = 0;
        }
        uint64_t v99 = 152;
        goto LABEL_176;
      case 4:
        if ((v8 & 1) == 0) {
          goto LABEL_141;
        }
        *(_WORD *)(a1 + 160) |= 8u;
        uint64_t v47 = *v15;
        unint64_t v48 = *(void *)(v3 + v47);
        if (v48 <= 0xFFFFFFFFFFFFFFFBLL && v48 + 4 <= *(void *)(v3 + *v6))
        {
          int v46 = *(_DWORD *)(*(void *)(v3 + *v17) + v48);
          *(void *)(v3 + v47) = v48 + 4;
        }
        else
        {
          *(unsigned char *)(v3 + *v16) = 1;
          int v46 = 0;
        }
        uint64_t v99 = 144;
        goto LABEL_176;
      case 5:
        if ((v8 & 1) == 0) {
          goto LABEL_141;
        }
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v51 = 0;
        *(_WORD *)(a1 + 160) |= 0x40u;
        while (2)
        {
          uint64_t v52 = *v15;
          uint64_t v53 = *(void *)(v3 + v52);
          unint64_t v54 = v53 + 1;
          if (v53 == -1 || v54 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v16) = 1;
          }
          else
          {
            char v55 = *(unsigned char *)(*(void *)(v3 + *v17) + v53);
            *(void *)(v3 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              BOOL v25 = v50++ >= 9;
              if (v25)
              {
                uint64_t v51 = 0;
                goto LABEL_151;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v16)) {
          uint64_t v51 = 0;
        }
LABEL_151:
        *(unsigned char *)(a1 + 156) = v51 != 0;
        goto LABEL_192;
      case 6:
        if (!v31 || (*(_WORD *)(a1 + 160) & 0x800) != 0) {
          goto LABEL_141;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_211;
        }
        int v114 = (int)v14;
        BOOL v14 = objc_alloc_init(GEOTFPredictedSpeed);
        if (GEOTFPredictedSpeedReadAllFrom((uint64_t)v14, (void *)v3))
        {
          PBReaderRecallMark();
          -[GEOTFRoadSpeed _addNoFlagsPredictedSpeed:](a1, v14);

          LODWORD(v14) = v114;
LABEL_191:
          int v16 = (int *)MEMORY[0x1E4F940C8];
LABEL_192:
          if (!(v14 & 1 | (v7 != 0)) || *(void *)(v3 + *v15) >= *(void *)(v3 + *v6)) {
            goto LABEL_194;
          }
          continue;
        }

        char v109 = 0;
        LOBYTE(v14) = v114;
LABEL_212:
        int v16 = (int *)MEMORY[0x1E4F940C8];
LABEL_196:
        *(_WORD *)(a1 + 160) |= 0x800u;
        *(_WORD *)(a1 + 160) |= 0x1000u;
        *(_WORD *)(a1 + 160) |= 0x100u;
        *(_WORD *)(a1 + 160) |= 0x200u;
        *(_WORD *)(a1 + 160) |= 0x80u;
        *(_WORD *)(a1 + 160) |= 0x400u;
        if (v109)
        {
LABEL_207:
          unint64_t v3 = *(unsigned char *)(v3 + *v16) == 0;
          if (v14) {
            goto LABEL_208;
          }
          return v3;
        }
        unint64_t v3 = 0;
        if ((v14 & 1) == 0) {
          return v3;
        }
LABEL_208:
        uint64_t v112 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = 0;

        return v3;
      case 7:
        if ((v8 & 1) == 0) {
          goto LABEL_141;
        }
        char v56 = 0;
        unsigned int v57 = 0;
        uint64_t v58 = 0;
        *(_WORD *)(a1 + 160) |= 1u;
        while (2)
        {
          uint64_t v59 = *v15;
          uint64_t v60 = *(void *)(v3 + v59);
          unint64_t v61 = v60 + 1;
          if (v60 == -1 || v61 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v16) = 1;
          }
          else
          {
            char v62 = *(unsigned char *)(*(void *)(v3 + *v17) + v60);
            *(void *)(v3 + v59) = v61;
            v58 |= (unint64_t)(v62 & 0x7F) << v56;
            if (v62 < 0)
            {
              v56 += 7;
              BOOL v25 = v57++ >= 9;
              if (v25)
              {
                LODWORD(v58) = 0;
                goto LABEL_155;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v16)) {
          LODWORD(v58) = 0;
        }
LABEL_155:
        uint64_t v97 = 132;
        goto LABEL_164;
      case 8:
        if ((v8 & 1) == 0) {
          goto LABEL_141;
        }
        char v63 = 0;
        unsigned int v64 = 0;
        uint64_t v58 = 0;
        *(_WORD *)(a1 + 160) |= 0x10u;
        while (2)
        {
          uint64_t v65 = *v15;
          uint64_t v66 = *(void *)(v3 + v65);
          unint64_t v67 = v66 + 1;
          if (v66 == -1 || v67 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v16) = 1;
          }
          else
          {
            char v68 = *(unsigned char *)(*(void *)(v3 + *v17) + v66);
            *(void *)(v3 + v65) = v67;
            v58 |= (unint64_t)(v68 & 0x7F) << v63;
            if (v68 < 0)
            {
              v63 += 7;
              BOOL v25 = v64++ >= 9;
              if (v25)
              {
                LODWORD(v58) = 0;
                goto LABEL_159;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v16)) {
          LODWORD(v58) = 0;
        }
LABEL_159:
        uint64_t v97 = 148;
        goto LABEL_164;
      case 9:
        if (!v31) {
          goto LABEL_141;
        }
        if ((*(_WORD *)(a1 + 160) & 0x1000) == 0)
        {
          uint64_t v69 = PBReaderReadData();
          uint64_t v70 = 112;
          goto LABEL_140;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_211;
        }
        __int16 v98 = 8 * *(_WORD *)(a1 + 160);
        goto LABEL_169;
      case 10:
        if ((v8 & 1) == 0) {
          goto LABEL_141;
        }
        char v71 = 0;
        unsigned int v72 = 0;
        uint64_t v58 = 0;
        *(_WORD *)(a1 + 160) |= 4u;
        while (2)
        {
          uint64_t v73 = *v15;
          uint64_t v74 = *(void *)(v3 + v73);
          unint64_t v75 = v74 + 1;
          if (v74 == -1 || v75 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v16) = 1;
          }
          else
          {
            char v76 = *(unsigned char *)(*(void *)(v3 + *v17) + v74);
            *(void *)(v3 + v73) = v75;
            v58 |= (unint64_t)(v76 & 0x7F) << v71;
            if (v76 < 0)
            {
              v71 += 7;
              BOOL v25 = v72++ >= 9;
              if (v25)
              {
                LODWORD(v58) = 0;
                goto LABEL_163;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v16)) {
          LODWORD(v58) = 0;
        }
LABEL_163:
        uint64_t v97 = 140;
LABEL_164:
        *(_DWORD *)(a1 + v97) = v58;
        goto LABEL_192;
      case 11:
        if ((v8 & 1) == 0) {
          goto LABEL_141;
        }
        *(_WORD *)(a1 + 160) |= 2u;
        uint64_t v77 = *v15;
        unint64_t v78 = *(void *)(v3 + v77);
        if (v78 <= 0xFFFFFFFFFFFFFFFBLL && v78 + 4 <= *(void *)(v3 + *v6))
        {
          int v46 = *(_DWORD *)(*(void *)(v3 + *v17) + v78);
          *(void *)(v3 + v77) = v78 + 4;
        }
        else
        {
          *(unsigned char *)(v3 + *v16) = 1;
          int v46 = 0;
        }
        uint64_t v99 = 136;
LABEL_176:
        *(_DWORD *)(a1 + v99) = v46;
        goto LABEL_192;
      case 12:
        if (!v31 || (*(_WORD *)(a1 + 160) & 0x100) != 0) {
          goto LABEL_141;
        }
        if (v28 != 2) {
          goto LABEL_177;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_211;
        }
        while (1)
        {
          unsigned int v79 = (unint64_t *)(v3 + *v15);
          unint64_t v80 = *v79;
          unint64_t v81 = *(void *)(v3 + *v6);
          if (*v79 >= v81) {
            break;
          }
          uint64_t v82 = (int)*MEMORY[0x1E4F940C8];
          if (*(unsigned char *)(v3 + v82)) {
            break;
          }
          if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > v81) {
            *(unsigned char *)(v3 + v82) = 1;
          }
          else {
            *unsigned int v79 = v80 + 4;
          }
          PBRepeatedFloatAdd();
        }
        goto LABEL_143;
      case 13:
        if (!v31 || (*(_WORD *)(a1 + 160) & 0x200) != 0) {
          goto LABEL_141;
        }
        if (v28 != 2)
        {
LABEL_177:
          uint64_t v100 = *v15;
          unint64_t v101 = *(void *)(v3 + v100);
          if (v101 <= 0xFFFFFFFFFFFFFFFBLL && v101 + 4 <= *(void *)(v3 + *v6)) {
            *(void *)(v3 + v100) = v101 + 4;
          }
          else {
            *(unsigned char *)(v3 + v26) = 1;
          }
          PBRepeatedFloatAdd();
          goto LABEL_191;
        }
        if (!PBReaderPlaceMark()) {
          goto LABEL_211;
        }
        while (1)
        {
          int v83 = (unint64_t *)(v3 + *v15);
          unint64_t v84 = *v83;
          unint64_t v85 = *(void *)(v3 + *v6);
          if (*v83 >= v85) {
            break;
          }
          uint64_t v86 = (int)*MEMORY[0x1E4F940C8];
          if (*(unsigned char *)(v3 + v86)) {
            break;
          }
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > v85) {
            *(unsigned char *)(v3 + v86) = 1;
          }
          else {
            *int v83 = v84 + 4;
          }
          PBRepeatedFloatAdd();
        }
        goto LABEL_143;
      case 14:
        if (!v31 || (*(_WORD *)(a1 + 160) & 0x80) != 0) {
          goto LABEL_141;
        }
        if (v28 == 2)
        {
          if (!PBReaderPlaceMark()) {
            goto LABEL_211;
          }
          while (1)
          {
            unint64_t v87 = (int *)MEMORY[0x1E4F940C8];
            if (*(void *)(v3 + *v15) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + (int)*MEMORY[0x1E4F940C8])) {
              break;
            }
            char v88 = 0;
            unsigned int v89 = 0;
            uint64_t v90 = 0;
            while (1)
            {
              uint64_t v91 = *v15;
              uint64_t v92 = *(void *)(v3 + v91);
              unint64_t v93 = v92 + 1;
              if (v92 == -1 || v93 > *(void *)(v3 + *v6)) {
                break;
              }
              char v94 = *(unsigned char *)(*(void *)(v3 + *v17) + v92);
              *(void *)(v3 + v91) = v93;
              v90 |= (unint64_t)(v94 & 0x7F) << v88;
              if (v94 < 0)
              {
                v88 += 7;
                BOOL v25 = v89++ >= 9;
                if (!v25) {
                  continue;
                }
              }
              goto LABEL_136;
            }
            *(unsigned char *)(v3 + *v87) = 1;
LABEL_136:
            PBRepeatedInt64Add();
          }
LABEL_143:
          PBReaderRecallMark();
        }
        else
        {
          char v102 = 0;
          unsigned int v103 = 0;
          uint64_t v104 = 0;
          while (1)
          {
            uint64_t v105 = *v15;
            uint64_t v106 = *(void *)(v3 + v105);
            unint64_t v107 = v106 + 1;
            if (v106 == -1 || v107 > *(void *)(v3 + *v6)) {
              break;
            }
            char v108 = *(unsigned char *)(*(void *)(v3 + *v17) + v106);
            *(void *)(v3 + v105) = v107;
            v104 |= (unint64_t)(v108 & 0x7F) << v102;
            if (v108 < 0)
            {
              v102 += 7;
              BOOL v25 = v103++ >= 9;
              if (!v25) {
                continue;
              }
            }
            goto LABEL_188;
          }
          *(unsigned char *)(v3 + *v16) = 1;
LABEL_188:
          PBRepeatedInt64Add();
        }
        goto LABEL_191;
      case 15:
        if (v31)
        {
          if ((*(_WORD *)(a1 + 160) & 0x400) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
            {
LABEL_211:
              char v109 = 0;
              goto LABEL_212;
            }
            __int16 v98 = 32 * *(_WORD *)(a1 + 160);
LABEL_169:
            v7 += v98 >> 15;
          }
          else
          {
            uint64_t v69 = PBReaderReadData();
            uint64_t v70 = 96;
LABEL_140:
            uint64_t v95 = *(void **)(a1 + v70);
            *(void *)(a1 + v70) = v69;

            --v7;
          }
          goto LABEL_191;
        }
LABEL_141:
        char v96 = PBReaderSkipValueWithTag();
        int v16 = (int *)MEMORY[0x1E4F940C8];
        if ((v96 & 1) == 0)
        {
LABEL_210:
          char v109 = 0;
          goto LABEL_196;
        }
        goto LABEL_192;
      default:
        int v43 = PBReaderSkipValueWithTag();
        int v16 = (int *)MEMORY[0x1E4F940C8];
        if (!v43) {
          goto LABEL_210;
        }
        goto LABEL_192;
    }
  }
}

void sub_188F96FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL16GEOGetAlmanacLogv_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.GeoServices", "Almanac");
  id v1 = (void *)_MergedGlobals_318;
  _MergedGlobals_318 = (uint64_t)v0;
}

void __GEOGetTileServerRemoteProxyLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.GeoServices", "TileServerRemoteProxy");
  id v1 = (void *)_MergedGlobals_9;
  _MergedGlobals_9 = (uint64_t)v0;
}

void __GEOGetSignedResourcesLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.GeoServices", "SignedResources");
  id v1 = (void *)qword_1EB29F550;
  qword_1EB29F550 = (uint64_t)v0;
}

void __GEOGetReferenceTimeManagerLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.GeoServices", "ReferenceTimeManager");
  id v1 = (void *)qword_1EB29FF50;
  qword_1EB29FF50 = (uint64_t)v0;
}

void __GEOGetNetworkStatusLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.GeoServices", "NetworkStatus");
  id v1 = (void *)qword_1EB29FC88;
  qword_1EB29FC88 = (uint64_t)v0;
}

void __GEOGetGEOPrivacyManagerLog_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.GeoServices", "GEOPrivacyManager");
  id v1 = (void *)qword_1EB29FCE8;
  qword_1EB29FCE8 = (uint64_t)v0;
}

unint64_t GEOURLInfoSetReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 476))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOURLInfoSetReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unsigned int v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 480));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 472) = [v8 position];
  *(_DWORD *)(a1 + 476) = [v8 length];
  if (a3) {
    int v9 = (int *)&GEOURLInfoSetReadAllFrom_recursiveTag;
  }
  else {
    int v9 = (int *)&GEOURLInfoSetReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOURLInfoSetReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOURLInfoSetCallReadAllRecursiveWithoutSynchronized((id *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 480));
  return Specified;
}

void sub_188F98104(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOURLInfoSetReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 480));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 476);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 472)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = *(void *)(a1 + 488);
  uint64x2_t v12 = (uint64x2_t)vdupq_n_s64(v11);
  v13.i64[0] = 0x100000001;
  v13.i64[1] = 0x100000001;
  uint32x4_t v14 = (uint32x4_t)vdupq_n_s32(v11);
  *(int32x2_t *)v12.i8 = vadd_s32(vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A632430)), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)__PAIR64__(v11 >> 46, v11 >> 22), (int8x8_t)0x100000001)), vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)__PAIR64__(v11 >> 55, v11 >> 25), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8,
                                                            (uint32x2_t)0xFFFFFFF4FFFFFFEFLL),
                                                (int8x8_t)0x100000001)),
                                 vadd_s32((int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A632450)), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFF8FFFFFFFDLL), (int8x8_t)0x100000001)))), vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFF6FFFFFFFBLL), (int8x8_t)0x100000001), (int32x2_t)vand_s8(
                                                (int8x8_t)__PAIR64__(v11 >> 9, v11 >> 41),
                                                (int8x8_t)0x100000001)),
                                 vadd_s32((int32x2_t)vand_s8((int8x8_t)__PAIR64__(v11 >> 54, v11 >> 11), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)__PAIR64__(HIBYTE(v11), v11 >> 23), (int8x8_t)0x100000001))), vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFFAFFFFFFFELL), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A632460)), (int8x8_t)0x100000001)), vadd_s32(
                                   (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFF3FFFFFFEBLL), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFFCFFFFFFE3), (int8x8_t)0x100000001))))), vadd_s32((int32x2_t)__PAIR64__((v11 >> 18) & 1, vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v12,
                                                                                       (uint64x2_t)xmmword_18A632320),
                                                                          (int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A6323E0)), v13), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A6323F0), v13), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_18A632400), v13))), (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A632420), (int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A632410)), v13)))),
                             (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_18A632440)), (int8x8_t)0x100000001)));
  unsigned int v15 = vadd_s32(*(int32x2_t *)v12.i8, vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0]
      + ((v11 >> 39) & 1)
      + (BYTE3(v11) & 1)
      + ((v11 >> 53) & 1)
      + (WORD1(v11) & 1)
      + ((v11 >> 33) & 1)
      + ((v11 >> 35) & 1)
      + ((v11 >> 34) & 1)
      + ((v11 >> 19) & 1)
      + ((v11 >> 1) & 1)
      + (v11 >> 31);
  while (2)
  {
    uint64_t v16 = 1;
    uint64_t v17 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v15;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v18 = v15 > 0x2B;
        char v57 = v18 & ~(_BYTE)v10 | v9;
        char v58 = v18 | v10 | v57;
        if (((v18 | v10) | v8)) {
          unsigned int v19 = 0;
        }
        else {
          unsigned int v19 = a3;
        }
        unint64_t v20 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
        char v59 = (v19 == 0) | v18 | v10;
        char v60 = v18 | v10;
        uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v15;
LABEL_7:
        uint64_t v16 = v9;
LABEL_8:
        uint64_t v17 = v10;
LABEL_9:
        ++v7;
        uint64_t v9 = v16;
        uint64_t v10 = v17;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_452;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      unint64_t v27 = *(void *)(v3 + v26);
      if (v27 == -1 || v27 >= *(void *)(v3 + *v6)) {
        break;
      }
      char v28 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v27 + 1;
      v25 |= (unint64_t)(v28 & 0x7F) << v23;
      if ((v28 & 0x80) == 0) {
        goto LABEL_24;
      }
      v23 += 7;
      BOOL v29 = v24++ >= 9;
      if (v29)
      {
        unint64_t v25 = 0;
        int v30 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_24:
    int v30 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_26:
    if (v30 || (v25 & 7) == 4)
    {
LABEL_452:
      int v56 = 1;
      goto LABEL_453;
    }
    unint64_t v32 = v25 >> 3;
    BOOL v33 = v60;
    if ((v59 & 1) == 0)
    {
      int v34 = v19;
      do
      {
        int v36 = *v34++;
        int v35 = v36;
        BOOL v33 = v36 != 0;
        if (v36) {
          BOOL v37 = v35 == v32;
        }
        else {
          BOOL v37 = 1;
        }
      }
      while (!v37);
    }
    switch((int)v32)
    {
      case 1:
        if ((v8 & 1) == 0) {
          goto LABEL_333;
        }
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v40 = 0;
        *(void *)(a1 + 488) |= 1uLL;
        while (1)
        {
          uint64_t v41 = *v20;
          unint64_t v42 = *(void *)(v3 + v41);
          if (v42 == -1 || v42 >= *(void *)(v3 + *v6)) {
            break;
          }
          char v43 = *(unsigned char *)(*(void *)(v3 + *v22) + v42);
          *(void *)(v3 + v41) = v42 + 1;
          v40 |= (unint64_t)(v43 & 0x7F) << v38;
          if ((v43 & 0x80) == 0) {
            goto LABEL_336;
          }
          v38 += 7;
          BOOL v29 = v39++ >= 9;
          if (v29)
          {
            LODWORD(v40) = 0;
            goto LABEL_338;
          }
        }
        *(unsigned char *)(v3 + *v21) = 1;
LABEL_336:
        if (*(unsigned char *)(v3 + *v21)) {
          LODWORD(v40) = 0;
        }
LABEL_338:
        *(_DWORD *)(a1 + 484) = v40;
        goto LABEL_451;
      case 2:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 493) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 16;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 384;
        goto LABEL_332;
      case 3:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 494) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 14;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 400;
        goto LABEL_332;
      case 4:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 490) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 41;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 184;
        goto LABEL_332;
      case 5:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 491) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 38;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 208;
        goto LABEL_332;
      case 6:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 490) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 46;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 144;
        goto LABEL_332;
      case 7:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 494) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 13;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 408;
        goto LABEL_332;
      case 8:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 488) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 60;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 32;
        goto LABEL_332;
      case 9:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 488) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 58;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 48;
        goto LABEL_332;
      case 10:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 492) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 26;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 304;
        goto LABEL_332;
      case 11:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 493) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 19;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 360;
        goto LABEL_332;
      case 12:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 493) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 20;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 352;
        goto LABEL_332;
      case 13:
        if (!v33) {
          goto LABEL_333;
        }
        if (*(unsigned char *)(a1 + 494))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 15;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 392;
        goto LABEL_332;
      case 14:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 493) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 22;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 336;
        goto LABEL_332;
      case 15:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 489) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 52;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 96;
        goto LABEL_332;
      case 16:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 490) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 40;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 192;
        goto LABEL_332;
      case 17:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 493) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 21;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 344;
        goto LABEL_332;
      case 18:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 488) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 61;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 24;
        goto LABEL_332;
      case 19:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 490) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 42;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 176;
        goto LABEL_332;
      case 20:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 491) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 34;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 240;
        goto LABEL_332;
      case 21:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 494) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 12;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 416;
        goto LABEL_332;
      case 22:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 493) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 17;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 376;
        goto LABEL_332;
      case 23:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 490) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 45;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 152;
        goto LABEL_332;
      case 24:
        if (!v33) {
          goto LABEL_333;
        }
        if (*(unsigned char *)(a1 + 493))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 23;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 328;
        goto LABEL_332;
      case 25:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 491) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 33;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 248;
        goto LABEL_332;
      case 26:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 489) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 49;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 120;
        goto LABEL_332;
      case 27:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 490) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 43;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 168;
        goto LABEL_332;
      case 28:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 489) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 48;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 128;
        goto LABEL_332;
      case 29:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 494) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 8;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 448;
        goto LABEL_332;
      case 30:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 491) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 32;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 256;
        goto LABEL_332;
      case 31:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 489) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 51;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 104;
        goto LABEL_332;
      case 32:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 495) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 6;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 464;
        goto LABEL_332;
      case 33:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 491) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 36;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 224;
        goto LABEL_332;
      case 34:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 491) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 37;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 216;
        goto LABEL_332;
      case 35:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 491) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 35;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 232;
        goto LABEL_332;
      case 36:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 488) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 56;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 64;
        goto LABEL_332;
      case 37:
        if (!v33) {
          goto LABEL_333;
        }
        if (*(unsigned char *)(a1 + 489))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 55;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 72;
        goto LABEL_332;
      case 38:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 489) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 53;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 88;
        goto LABEL_332;
      case 39:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 489) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 54;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 80;
        goto LABEL_332;
      case 40:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 494) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 9;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 440;
        goto LABEL_332;
      case 41:
        if (!v33) {
          goto LABEL_333;
        }
        if (*(unsigned char *)(a1 + 495))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 7;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 456;
        goto LABEL_332;
      case 42:
        if (!v33 || (*(unsigned char *)(a1 + 488) & 0x40) != 0) {
          goto LABEL_333;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        -[GEOURLInfoSet _addNoFlagsAlternateResourcesURL:](a1, v47);

        goto LABEL_450;
      case 43:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 494) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 11;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 424;
        goto LABEL_332;
      case 44:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 489) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 50;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 112;
        goto LABEL_332;
      case 45:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 488) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 59;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 40;
        goto LABEL_332;
      case 46:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 492) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 24;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 320;
        goto LABEL_332;
      case 47:
        if (!v33) {
          goto LABEL_333;
        }
        if (*(unsigned char *)(a1 + 491))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 39;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 200;
        goto LABEL_332;
      case 48:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 494) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 10;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 432;
        goto LABEL_332;
      case 49:
        if (!v33) {
          goto LABEL_333;
        }
        if (*(unsigned char *)(a1 + 490))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 47;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 136;
        goto LABEL_332;
      case 50:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 492) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 25;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 312;
        goto LABEL_332;
      case 51:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 492) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 27;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 296;
        goto LABEL_332;
      case 52:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 493) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 18;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 368;
        goto LABEL_332;
      case 53:
        if (!v33) {
          goto LABEL_333;
        }
        if (*(unsigned char *)(a1 + 492))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 31;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 264;
        goto LABEL_332;
      case 54:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 492) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 30;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 272;
        goto LABEL_332;
      case 55:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 492) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 28;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 288;
        goto LABEL_332;
      case 56:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 492) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 29;
          goto LABEL_449;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (!GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3)) {
          goto LABEL_522;
        }
        PBReaderRecallMark();
        uint64_t v48 = 280;
        goto LABEL_332;
      case 57:
        if (!v33) {
          goto LABEL_333;
        }
        if ((*(unsigned char *)(a1 + 490) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_523;
          }
          uint64_t v51 = *(void *)(a1 + 488) << 44;
LABEL_449:
          v7 += v51 >> 63;
LABEL_450:
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_451:
          uint64_t v22 = (int *)MEMORY[0x1E4F940B8];
          if (!(v58 & 1 | (v7 != 0))) {
            goto LABEL_452;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_523;
        }
        uint64_t v47 = objc_alloc_init(GEOURLInfo);
        if (GEOURLInfoReadAllFrom((uint64_t)v47, (void *)v3))
        {
          PBReaderRecallMark();
          uint64_t v48 = 160;
LABEL_332:
          char v49 = *(void **)(a1 + v48);
          *(void *)(a1 + v48) = v47;

          --v7;
          goto LABEL_450;
        }
LABEL_522:

LABEL_523:
        int v56 = 0;
        uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_453:
        if (v57) {
LABEL_454:
        }
          *(void *)(a1 + 488) |= 2uLL;
        if (v60 & 1 | ((v56 & 1) == 0))
        {
          *(void *)(a1 + 488) |= 0x3FFFFFFFFFFFFFCuLL;
        }
        else if (v19)
        {
          while (1)
          {
            int v53 = *v19++;
            uint64_t v52 = 0x800000000000;
            switch(v53)
            {
              case 0:
                goto LABEL_516;
              case 2:
                goto LABEL_514;
              case 3:
                uint64_t v52 = 0x2000000000000;
                goto LABEL_514;
              case 4:
                uint64_t v52 = 0x400000;
                goto LABEL_514;
              case 5:
                uint64_t v52 = 0x2000000;
                goto LABEL_514;
              case 6:
                uint64_t v52 = 0x20000;
                goto LABEL_514;
              case 7:
                uint64_t v52 = 0x4000000000000;
                goto LABEL_514;
              case 8:
                uint64_t v52 = 8;
                goto LABEL_514;
              case 9:
                uint64_t v52 = 32;
                goto LABEL_514;
              case 10:
                uint64_t v52 = 0x2000000000;
                goto LABEL_514;
              case 11:
                uint64_t v52 = 0x100000000000;
                goto LABEL_514;
              case 12:
                uint64_t v52 = 0x80000000000;
                goto LABEL_514;
              case 13:
                uint64_t v52 = 0x1000000000000;
                goto LABEL_514;
              case 14:
                uint64_t v52 = 0x20000000000;
                goto LABEL_514;
              case 15:
                uint64_t v52 = 2048;
                goto LABEL_514;
              case 16:
                uint64_t v52 = 0x800000;
                goto LABEL_514;
              case 17:
                uint64_t v52 = 0x40000000000;
                goto LABEL_514;
              case 18:
                uint64_t v52 = 4;
                goto LABEL_514;
              case 19:
                uint64_t v52 = 0x200000;
                goto LABEL_514;
              case 20:
                uint64_t v52 = 0x20000000;
                goto LABEL_514;
              case 21:
                uint64_t v52 = 0x8000000000000;
                goto LABEL_514;
              case 22:
                uint64_t v52 = 0x400000000000;
                goto LABEL_514;
              case 23:
                uint64_t v52 = 0x40000;
                goto LABEL_514;
              case 24:
                uint64_t v52 = 0x10000000000;
                goto LABEL_514;
              case 25:
                uint64_t v52 = 0x40000000;
                goto LABEL_514;
              case 26:
                uint64_t v52 = 0x4000;
                goto LABEL_514;
              case 27:
                uint64_t v52 = 0x100000;
                goto LABEL_514;
              case 28:
                uint64_t v52 = 0x8000;
                goto LABEL_514;
              case 29:
                uint64_t v52 = 0x80000000000000;
                goto LABEL_514;
              case 30:
                uint64_t v52 = 0x80000000;
                goto LABEL_514;
              case 31:
                uint64_t v52 = 4096;
                goto LABEL_514;
              case 32:
                uint64_t v52 = 0x200000000000000;
                goto LABEL_514;
              case 33:
                uint64_t v52 = 0x8000000;
                goto LABEL_514;
              case 34:
                uint64_t v52 = 0x4000000;
                goto LABEL_514;
              case 35:
                uint64_t v52 = 0x10000000;
                goto LABEL_514;
              case 36:
                uint64_t v52 = 128;
                goto LABEL_514;
              case 37:
                uint64_t v52 = 256;
                goto LABEL_514;
              case 38:
                uint64_t v52 = 1024;
                goto LABEL_514;
              case 39:
                uint64_t v52 = 512;
                goto LABEL_514;
              case 40:
                uint64_t v52 = 0x40000000000000;
                goto LABEL_514;
              case 41:
                uint64_t v52 = 0x100000000000000;
                goto LABEL_514;
              case 42:
                uint64_t v52 = 64;
                goto LABEL_514;
              case 43:
                uint64_t v52 = 0x10000000000000;
                goto LABEL_514;
              case 44:
                uint64_t v52 = 0x2000;
                goto LABEL_514;
              case 45:
                uint64_t v52 = 16;
                goto LABEL_514;
              case 46:
                uint64_t v52 = 0x8000000000;
                goto LABEL_514;
              case 47:
                uint64_t v52 = 0x1000000;
                goto LABEL_514;
              case 48:
                uint64_t v52 = 0x20000000000000;
                goto LABEL_514;
              case 49:
                uint64_t v52 = 0x10000;
                goto LABEL_514;
              case 50:
                uint64_t v52 = 0x4000000000;
                goto LABEL_514;
              case 51:
                uint64_t v52 = 0x1000000000;
                goto LABEL_514;
              case 52:
                uint64_t v52 = 0x200000000000;
                goto LABEL_514;
              case 53:
                uint64_t v52 = 0x100000000;
                goto LABEL_514;
              case 54:
                uint64_t v52 = 0x200000000;
                goto LABEL_514;
              case 55:
                uint64_t v52 = 0x800000000;
                goto LABEL_514;
              case 56:
                uint64_t v52 = 0x400000000;
                goto LABEL_514;
              case 57:
                uint64_t v52 = 0x80000;
LABEL_514:
                *(void *)(a1 + 488) |= v52;
                break;
              default:
                continue;
            }
          }
        }
LABEL_516:
        if (v56) {
          unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v60)
        {
          unint64_t v54 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if ((v57 & 1) == 0 || (*(unsigned char *)(a1 + 488) & 2) != 0)
        {
LABEL_333:
          char v50 = PBReaderSkipValueWithTag();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if ((v50 & 1) == 0)
          {
            int v56 = 0;
            goto LABEL_453;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v44 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            unint64_t v45 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v44;
          }
          int v46 = PBUnknownFieldAdd();
          uint64_t v21 = (int *)MEMORY[0x1E4F940C8];
          if (!v46)
          {
            int v56 = 0;
            goto LABEL_454;
          }
        }
        goto LABEL_451;
    }
  }
}

BOOL GEOURLInfoReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    unsigned int v4 = (int *)MEMORY[0x1E4F940E8];
    int v5 = (int *)MEMORY[0x1E4F940E0];
    char v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v3[*v6]) {
          break;
        }
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v4;
          unint64_t v12 = *(void *)&v3[v11];
          if (v12 == -1 || v12 >= *(void *)&v3[*v5]) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
          *(void *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_13;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        int v15 = v3[*v6];
        if (v3[*v6]) {
          unint64_t v10 = 0;
        }
LABEL_15:
        if (v15 || (v10 & 7) == 4) {
          break;
        }
        switch((v10 >> 3))
        {
          case 1u:
            uint64_t v17 = PBReaderReadString();
            BOOL v18 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v17;

            continue;
          case 2u:
            char v21 = 0;
            unsigned int v22 = 0;
            uint64_t v23 = 0;
            *(unsigned char *)(a1 + 32) |= 4u;
            while (1)
            {
              uint64_t v24 = *v4;
              unint64_t v25 = *(void *)&v3[v24];
              if (v25 == -1 || v25 >= *(void *)&v3[*v5]) {
                break;
              }
              char v26 = *(unsigned char *)(*(void *)&v3[*v7] + v25);
              *(void *)&v3[v24] = v25 + 1;
              v23 |= (unint64_t)(v26 & 0x7F) << v21;
              if ((v26 & 0x80) == 0) {
                goto LABEL_47;
              }
              v21 += 7;
              BOOL v14 = v22++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_49;
              }
            }
            v3[*v6] = 1;
LABEL_47:
            if (v3[*v6]) {
              uint64_t v23 = 0;
            }
LABEL_49:
            BOOL v39 = v23 != 0;
            uint64_t v40 = 29;
            goto LABEL_54;
          case 3u:
            char v27 = 0;
            unsigned int v28 = 0;
            uint64_t v29 = 0;
            *(unsigned char *)(a1 + 32) |= 2u;
            while (2)
            {
              uint64_t v30 = *v4;
              unint64_t v31 = *(void *)&v3[v30];
              if (v31 == -1 || v31 >= *(void *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                char v32 = *(unsigned char *)(*(void *)&v3[*v7] + v31);
                *(void *)&v3[v30] = v31 + 1;
                v29 |= (unint64_t)(v32 & 0x7F) << v27;
                if (v32 < 0)
                {
                  v27 += 7;
                  BOOL v14 = v28++ >= 9;
                  if (v14)
                  {
                    uint64_t v29 = 0;
                    goto LABEL_53;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6]) {
              uint64_t v29 = 0;
            }
LABEL_53:
            BOOL v39 = v29 != 0;
            uint64_t v40 = 28;
LABEL_54:
            *(unsigned char *)(a1 + v40) = v39;
            continue;
          case 4u:
            char v33 = 0;
            unsigned int v34 = 0;
            uint64_t v35 = 0;
            *(unsigned char *)(a1 + 32) |= 1u;
            break;
          default:
            if (!*(void *)(a1 + 8))
            {
              id v19 = objc_alloc_init(MEMORY[0x1E4F940B0]);
              unint64_t v20 = *(void **)(a1 + 8);
              *(void *)(a1 + 8) = v19;
            }
            if (!PBUnknownFieldAdd()) {
              goto LABEL_61;
            }
            continue;
        }
        while (1)
        {
          uint64_t v36 = *v4;
          unint64_t v37 = *(void *)&v3[v36];
          if (v37 == -1 || v37 >= *(void *)&v3[*v5]) {
            break;
          }
          char v38 = *(unsigned char *)(*(void *)&v3[*v7] + v37);
          *(void *)&v3[v36] = v37 + 1;
          v35 |= (unint64_t)(v38 & 0x7F) << v33;
          if ((v38 & 0x80) == 0) {
            goto LABEL_56;
          }
          v33 += 7;
          BOOL v14 = v34++ >= 9;
          if (v14)
          {
            LODWORD(v35) = 0;
            goto LABEL_58;
          }
        }
        v3[*v6] = 1;
LABEL_56:
        if (v3[*v6]) {
          LODWORD(v35) = 0;
        }
LABEL_58:
        *(_DWORD *)(a1 + 24) = v35;
      }
      while (*(void *)&v3[*v4] < *(void *)&v3[*v5]);
    }
    BOOL v41 = v3[*v6] == 0;
  }
  else
  {
LABEL_61:
    BOOL v41 = 0;
  }
  objc_sync_exit(v3);

  return v41;
}

void sub_188F9AD3C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readTransitSystems(geo::codec::Allocator *a1, uint64_t *a2)
{
  uint64_t v283 = *MEMORY[0x1E4F143B8];
  uint64_t v275 = v276;
  memset(v276, 0, 40);
  v276[5] = geo::codec::Allocator::instance(a1);
  uint64_t v4 = *a2;
  unint64_t v5 = *((void *)a1 + 1);
  if (!v5)
  {
LABEL_5:
    uint64_t v8 = 0;
    uint64_t v271 = "ChapterTransitSystems";
    uint64_t v272 = v4;
    uint64_t v9 = a2[1];
    int v273 = (std::__shared_weak_count *)v9;
    if (!v9) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v6 = 0;
  unsigned int v7 = 0;
  while (*(_WORD *)(*(void *)a1 + 16 * v6) != 128)
  {
    uint64_t v6 = ++v7;
    if (v5 <= v7) {
      goto LABEL_5;
    }
  }
  uint64_t v8 = geo::codec::chapterAt((uint64_t)a1, v7, 128, v4 + 1912);
  uint64_t v4 = *a2;
  uint64_t v271 = "ChapterTransitSystems";
  uint64_t v272 = v4;
  uint64_t v9 = a2[1];
  int v273 = (std::__shared_weak_count *)v9;
  if (v9) {
LABEL_6:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
LABEL_7:
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v10.__d_.__rep_;
  if (!v8)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v16 = v10.__d_.__rep_;
    uint64_t v17 = 1;
    v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v277 = "ChapterTransitSystems";
    if (!"ChapterTransitSystems") {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  unint64_t v12 = *(void *)(v8 + 48);
  unint64_t v11 = *(void *)(v8 + 56);
  unint64_t v13 = v11 - v12;
  if (v11 >= v12)
  {
    unint64_t v14 = 0;
    *(unsigned char *)(v8 + 32) = 1;
    unint64_t v19 = *(void *)(v8 + 40) + v12;
    *(void *)(v8 + 16) = v13;
    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 8) = v19;
    unint64_t v15 = 8 * v13;
    if (8 * v13 < 5)
    {
LABEL_21:
      char v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5930;
      goto LABEL_22;
    }
  }
  else
  {
    unint64_t v14 = *(void *)(v8 + 24);
    unint64_t v15 = 8 * *(void *)(v8 + 16);
    if (v14 + 5 > v15) {
      goto LABEL_21;
    }
  }
  int v20 = 0;
  char v21 = (uint64_t *)(v8 + 8);
  uint64_t v22 = *(void *)(v8 + 8);
  unint64_t v23 = 5;
  do
  {
    unint64_t v24 = 8 - (v14 & 7);
    if (v23 < v24) {
      unint64_t v24 = v23;
    }
    int v20 = (*(unsigned __int8 *)(v22 + (v14 >> 3)) >> (8 - (v14 & 7) - v24)) & ~(-1 << v24) | (v20 << v24);
    v14 += v24;
    *(void *)(v8 + 24) = v14;
    v23 -= v24;
  }
  while (v23);
  unint64_t v25 = (v20 + 1);
  if (v14 + v25 > v15) {
    goto LABEL_21;
  }
  unsigned int v34 = 0;
  if (v20 != -1)
  {
    do
    {
      unint64_t v35 = 8 - (v14 & 7);
      if (v25 < v35) {
        unint64_t v35 = v25;
      }
      unsigned int v34 = (*(unsigned __int8 *)(v22 + (v14 >> 3)) >> (8 - (v14 & 7) - v35)) & ~(-1 << v35) | (v34 << v35);
      v14 += v35;
      *(void *)(v8 + 24) = v14;
      v25 -= v35;
    }
    while (v25);
  }
  uint64_t v36 = *a2;
  uint64_t v37 = v34;
  uint64_t v38 = *(void *)(*a2 + 1320);
  uint64_t v39 = *(void *)(*a2 + 1312);
  unint64_t v40 = 0x8E38E38E38E38E39 * ((v38 - v39) >> 3);
  unint64_t v41 = v34 - v40;
  if (v34 <= v40)
  {
    if (v34 >= v40) {
      goto LABEL_71;
    }
    for (uint64_t i = v39 + 72 * v34; v38 != i; v38 -= 72)
    {
      int v53 = *(std::__shared_weak_count **)(v38 - 40);
      if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    goto LABEL_58;
  }
  uint64_t v42 = *(void *)(v36 + 1328);
  if (0x8E38E38E38E38E39 * ((v42 - v38) >> 3) >= v41)
  {
    uint64_t i = v38 + 72 * v41;
    uint64_t v54 = 72 * v34 - 8 * ((v38 - v39) >> 3);
    do
    {
      if (v38)
      {
        *(void *)(v38 + 64) = 0;
        *(_OWORD *)(v38 + 32) = 0uLL;
        *(_OWORD *)(v38 + 48) = 0uLL;
        *(_OWORD *)uint64_t v38 = 0uLL;
        *(_OWORD *)(v38 + 16) = 0uLL;
      }
      v38 += 72;
      v54 -= 72;
    }
    while (v54);
LABEL_58:
    *(void *)(v36 + 1320) = i;
    goto LABEL_71;
  }
  unint64_t v43 = 0x8E38E38E38E38E39 * ((v42 - v39) >> 3);
  uint64_t v44 = 2 * v43;
  if (2 * v43 <= v34) {
    uint64_t v44 = v34;
  }
  if (v43 >= 0x1C71C71C71C71C7) {
    uint64_t v45 = 0x38E38E38E38E38ELL;
  }
  else {
    uint64_t v45 = v44;
  }
  uint64_t v46 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v36 + 1336) + 16))(*(void *)(v36 + 1336), 72 * v45, 8);
  unint64_t v47 = v46 + 72 * v40;
  uint64_t v48 = v46 + 72 * v37;
  uint64_t v49 = 72 * v37 - 72 * v40;
  __n128 v50 = 0uLL;
  unint64_t v51 = v47;
  do
  {
    if (v51)
    {
      *(void *)(v51 + 64) = 0;
      *(_OWORD *)(v51 + 32) = 0uLL;
      *(_OWORD *)(v51 + 48) = 0uLL;
      *(_OWORD *)unint64_t v51 = 0uLL;
      *(_OWORD *)(v51 + 16) = 0uLL;
    }
    v51 += 72;
    v49 -= 72;
  }
  while (v49);
  uint64_t v55 = v46 + 72 * v45;
  uint64_t v56 = *(void *)(v36 + 1320);
  uint64_t v57 = *(void *)(v36 + 1312);
  if (v56 == v57)
  {
    *(void *)(v36 + 1312) = v47;
    *(void *)(v36 + 1320) = v48;
    uint64_t v63 = *(void *)(v36 + 1328);
    *(void *)(v36 + 1328) = v55;
  }
  else
  {
    uint64_t v58 = 0;
    do
    {
      uint64_t v59 = v47 + v58;
      uint64_t v60 = v56 + v58;
      long long v61 = *(_OWORD *)(v56 + v58 - 72);
      *(void *)(v59 - 56) = *(void *)(v56 + v58 - 56);
      *(_OWORD *)(v59 - 72) = v61;
      *(_OWORD *)(v59 - 48) = *(_OWORD *)(v56 + v58 - 48);
      *(void *)(v60 - 48) = 0;
      *(void *)(v60 - 40) = 0;
      __n128 v50 = *(__n128 *)(v56 + v58 - 32);
      *(_OWORD *)(v59 - 20) = *(_OWORD *)(v56 + v58 - 20);
      *(__n128 *)(v59 - 32) = v50;
      v58 -= 72;
    }
    while (v56 + v58 != v57);
    uint64_t v56 = *(void *)(v36 + 1312);
    uint64_t v62 = *(void *)(v36 + 1320);
    *(void *)(v36 + 1312) = v47 + v58;
    *(void *)(v36 + 1320) = v48;
    uint64_t v63 = *(void *)(v36 + 1328);
    for (*(void *)(v36 + 1328) = v55; v62 != v56; v62 -= 72)
    {
      unsigned int v64 = *(std::__shared_weak_count **)(v62 - 40);
      if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
  }
  if (v56) {
    (*(void (**)(void, uint64_t, uint64_t, __n128))(**(void **)(v36 + 1336) + 40))(*(void *)(v36 + 1336), v56, v63 - v56, v50);
  }
LABEL_71:
  uint64_t v65 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(*a2 + 1320) - *(void *)(*a2 + 1312)) >> 3);
  v281[0] = &unk_1ED517B80;
  v281[1] = a2;
  uint64_t v282 = v281;
  int TransitSystemsChapterIDSet = geo::codec::_readTransitSystemsChapterIDSet((uint64_t *)(v8 + 8), v65, (uint64_t)v281);
  if (v282 == v281)
  {
    (*(void (**)(void *))(v281[0] + 32))(v281);
    if (TransitSystemsChapterIDSet) {
      goto LABEL_75;
    }
LABEL_92:
    char v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5935;
    goto LABEL_22;
  }
  if (v282) {
    (*(void (**)(void))(*v282 + 40))();
  }
  if (!TransitSystemsChapterIDSet) {
    goto LABEL_92;
  }
LABEL_75:
  uint64_t v67 = *a2;
  uint64_t v68 = *(void *)(*a2 + 1320);
  uint64_t v69 = *(void *)(*a2 + 1312);
  uint64_t v70 = v68 - v69;
  if (v68 == v69)
  {
    unsigned int v72 = 0;
  }
  else
  {
    uint64_t v71 = 0;
    unsigned int v72 = 0;
    unint64_t v73 = v70 / 72;
    unint64_t v74 = *(void *)(v8 + 24);
    unint64_t v75 = 8 * *(void *)(v8 + 16);
    if (v73 <= 1) {
      unint64_t v73 = 1;
    }
    do
    {
      if (v74 + 5 > v75) {
        goto LABEL_93;
      }
      int v77 = 0;
      uint64_t v78 = *v21;
      unint64_t v79 = 5;
      do
      {
        unint64_t v80 = 8 - (v74 & 7);
        if (v79 < v80) {
          unint64_t v80 = v79;
        }
        int v77 = (*(unsigned __int8 *)(v78 + (v74 >> 3)) >> (8 - (v74 & 7) - v80)) & ~(-1 << v80) | (v77 << v80);
        v74 += v80;
        *(void *)(v8 + 24) = v74;
        v79 -= v80;
      }
      while (v79);
      unint64_t v81 = (v77 + 1);
      if (v74 + v81 > v75)
      {
LABEL_93:
        char v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 5940;
        goto LABEL_22;
      }
      unsigned int v82 = 0;
      if (v81)
      {
        do
        {
          unint64_t v83 = 8 - (v74 & 7);
          if (v81 < v83) {
            unint64_t v83 = v81;
          }
          unsigned int v82 = (*(unsigned __int8 *)(v78 + (v74 >> 3)) >> (8 - (v74 & 7) - v83)) & ~(-1 << v83) | (v82 << v83);
          v74 += v83;
          *(void *)(v8 + 24) = v74;
          v81 -= v83;
        }
        while (v81);
      }
      char v76 = (void *)(v69 + 72 * v71);
      *char v76 = v72;
      v76[1] = v82;
      v72 += v82;
      ++v71;
    }
    while (v71 != v73);
  }
  unint64_t v84 = v72;
  uint64_t v85 = *(void *)(v67 + 1288);
  uint64_t v86 = *(void *)(v67 + 1280);
  unint64_t v87 = 0x4EC4EC4EC4EC4EC5 * ((v85 - v86) >> 3);
  unint64_t v88 = v84 - v87;
  if (v84 <= v87)
  {
    if (v84 >= v87) {
      goto LABEL_135;
    }
    for (uint64_t j = v86 + 104 * v84; v85 != j; v85 -= 104)
    {
      uint64_t v99 = *(std::__shared_weak_count **)(v85 - 72);
      if (v99 && !atomic_fetch_add(&v99->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
      uint64_t v100 = *(std::__shared_weak_count **)(v85 - 96);
      if (v100) {
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    goto LABEL_119;
  }
  uint64_t v89 = *(void *)(v67 + 1296);
  if (0x4EC4EC4EC4EC4EC5 * ((v89 - v85) >> 3) >= v88)
  {
    uint64_t j = v85 + 104 * v88;
    uint64_t v101 = 104 * v84 - 8 * ((v85 - v86) >> 3);
    do
    {
      if (v85)
      {
        *(void *)(v85 + 96) = 0;
        *(_OWORD *)(v85 + 64) = 0uLL;
        *(_OWORD *)(v85 + 80) = 0uLL;
        *(_OWORD *)(v85 + 32) = 0uLL;
        *(_OWORD *)(v85 + 48) = 0uLL;
        *(_OWORD *)uint64_t v85 = 0uLL;
        *(_OWORD *)(v85 + 16) = 0uLL;
      }
      v85 += 104;
      v101 -= 104;
    }
    while (v101);
LABEL_119:
    *(void *)(v67 + 1288) = j;
    goto LABEL_135;
  }
  unint64_t v90 = 0x4EC4EC4EC4EC4EC5 * ((v89 - v86) >> 3);
  uint64_t v91 = 2 * v90;
  if (2 * v90 <= v84) {
    uint64_t v91 = v84;
  }
  if (v90 >= 0x13B13B13B13B13BLL) {
    uint64_t v92 = 0x276276276276276;
  }
  else {
    uint64_t v92 = v91;
  }
  uint64_t v93 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v67 + 1304) + 16))(*(void *)(v67 + 1304), 104 * v92, 8);
  unint64_t v94 = v93 + 104 * v87;
  uint64_t v95 = v93 + 104 * v84;
  uint64_t v96 = 104 * v84 - 104 * v87;
  unint64_t v97 = v94;
  do
  {
    if (v97)
    {
      *(void *)(v97 + 96) = 0;
      *(_OWORD *)(v97 + 64) = 0uLL;
      *(_OWORD *)(v97 + 80) = 0uLL;
      *(_OWORD *)(v97 + 32) = 0uLL;
      *(_OWORD *)(v97 + 48) = 0uLL;
      *(_OWORD *)unint64_t v97 = 0uLL;
      *(_OWORD *)(v97 + 16) = 0uLL;
    }
    v97 += 104;
    v96 -= 104;
  }
  while (v96);
  uint64_t v102 = v93 + 104 * v92;
  uint64_t v103 = *(void *)(v67 + 1288);
  uint64_t v104 = *(void *)(v67 + 1280);
  if (v103 == v104)
  {
    *(void *)(v67 + 1280) = v94;
    *(void *)(v67 + 1288) = v95;
    uint64_t v112 = *(void *)(v67 + 1296);
    *(void *)(v67 + 1296) = v102;
  }
  else
  {
    uint64_t v105 = 0;
    do
    {
      uint64_t v106 = v94 + v105;
      uint64_t v107 = v103 + v105;
      *(_OWORD *)(v106 - 104) = *(_OWORD *)(v103 + v105 - 104);
      *(void *)(v107 - 104) = 0;
      *(void *)(v107 - 96) = 0;
      *(_OWORD *)(v106 - 88) = *(_OWORD *)(v103 + v105 - 88);
      *(void *)(v106 - 72) = *(void *)(v103 + v105 - 72);
      *(void *)(v107 - 80) = 0;
      *(void *)(v107 - 72) = 0;
      long long v108 = *(_OWORD *)(v103 + v105 - 64);
      long long v109 = *(_OWORD *)(v103 + v105 - 48);
      *(_DWORD *)(v106 - 32) = *(_DWORD *)(v103 + v105 - 32);
      *(_OWORD *)(v106 - 64) = v108;
      *(_OWORD *)(v106 - 48) = v109;
      long long v110 = *(_OWORD *)(v103 + v105 - 24);
      *(void *)(v106 - 8) = *(void *)(v103 + v105 - 8);
      *(_OWORD *)(v106 - 24) = v110;
      v105 -= 104;
    }
    while (v103 + v105 != v104);
    uint64_t v103 = *(void *)(v67 + 1280);
    uint64_t v111 = *(void *)(v67 + 1288);
    *(void *)(v67 + 1280) = v94 + v105;
    *(void *)(v67 + 1288) = v95;
    uint64_t v112 = *(void *)(v67 + 1296);
    *(void *)(v67 + 1296) = v102;
    if (v111 != v103)
    {
      uint64_t v260 = v112;
      do
      {
        uint64_t v113 = *(std::__shared_weak_count **)(v111 - 72);
        if (v113 && !atomic_fetch_add(&v113->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
        int v114 = *(std::__shared_weak_count **)(v111 - 96);
        if (v114) {
          std::__shared_weak_count::__release_weak(v114);
        }
        v111 -= 104;
      }
      while (v111 != v103);
      uint64_t v112 = v260;
    }
  }
  if (v103) {
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v67 + 1304) + 40))(*(void *)(v67 + 1304), v103, v112 - v103);
  }
LABEL_135:
  uint64_t v115 = *a2;
  uint64_t v116 = *(void *)(*a2 + 1312);
  uint64_t v117 = 954437177 * ((unint64_t)(*(void *)(*a2 + 1320) - v116) >> 3);
  if (v117)
  {
    for (uint64_t k = 0; k != v117; ++k)
    {
      uint64_t v119 = (uint64_t *)(v116 + 72 * k);
      uint64_t v120 = v119[1];
      if (v120)
      {
        uint64_t v121 = *v119;
        uint64_t v122 = *(void *)(v115 + 1280);
        if (v120 == 1)
        {
          unint64_t v123 = 0;
        }
        else
        {
          unint64_t v123 = v120 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v124 = (_DWORD *)(v122 + 104 * v121 + 188);
          unint64_t v125 = v120 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            *(v124 - 26) = k;
            *uint64_t v124 = k;
            v124 += 52;
            v125 -= 2;
          }
          while (v125);
          if (v120 == v123) {
            continue;
          }
        }
        uint64_t v126 = v120 - v123;
        BOOL v127 = (_DWORD *)(v122 + 104 * (v123 + v121) + 84);
        do
        {
          *BOOL v127 = k;
          v127 += 26;
          --v126;
        }
        while (v126);
      }
    }
  }
  uint64_t v128 = *(void *)(v115 + 1280);
  if (*(void *)(v115 + 1288) != v128)
  {
    uint64_t v129 = 0;
    unint64_t v130 = 0;
    do
    {
      uint64_t v131 = a2[1];
      if (v131) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v131 + 16), 1uLL, memory_order_relaxed);
      }
      char v132 = (uint64_t *)(v128 + v129);
      uint64_t v133 = (std::__shared_weak_count *)v132[1];
      *char v132 = v115;
      v132[1] = v131;
      if (v133) {
        std::__shared_weak_count::__release_weak(v133);
      }
      uint64_t v115 = *a2;
      uint64_t v128 = *(void *)(*a2 + 1280);
      *(void *)(v128 + v129 + 92) = -1;
      ++v130;
      v129 += 104;
    }
    while (v130 < 0x4EC4EC4EC4EC4EC5 * ((*(void *)(v115 + 1288) - v128) >> 3));
  }
  uint64_t v134 = *a2;
  if (v84)
  {
    uint64_t v135 = 0;
    unint64_t v136 = *(void *)(v8 + 24);
    unint64_t v137 = 8 * *(void *)(v8 + 16);
    do
    {
      if (v136 + 8 > v137)
      {
        char v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 5965;
        goto LABEL_22;
      }
      int v138 = 0;
      uint64_t v139 = *v21;
      unint64_t v140 = 8;
      do
      {
        unint64_t v141 = 8 - (v136 & 7);
        if (v140 < v141) {
          unint64_t v141 = v140;
        }
        int v138 = (*(unsigned __int8 *)(v139 + (v136 >> 3)) >> (8 - (v136 & 7) - v141)) & ~(-1 << v141) | (v138 << v141);
        v136 += v141;
        *(void *)(v8 + 24) = v136;
        v140 -= v141;
      }
      while (v140);
      if (v136 + 8 > v137)
      {
        char v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 5966;
        goto LABEL_22;
      }
      int v142 = 0;
      unint64_t v143 = 8;
      do
      {
        unint64_t v144 = 8 - (v136 & 7);
        if (v143 < v144) {
          unint64_t v144 = v143;
        }
        int v142 = (*(unsigned __int8 *)(v139 + (v136 >> 3)) >> (8 - (v136 & 7) - v144)) & ~(-1 << v144) | (v142 << v144);
        v136 += v144;
        *(void *)(v8 + 24) = v136;
        v143 -= v144;
      }
      while (v143);
      if (v136 + 8 > v137)
      {
        char v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 5967;
        goto LABEL_22;
      }
      int v145 = 0;
      unint64_t v146 = 8;
      do
      {
        unint64_t v147 = 8 - (v136 & 7);
        if (v146 < v147) {
          unint64_t v147 = v146;
        }
        int v145 = (*(unsigned __int8 *)(v139 + (v136 >> 3)) >> (8 - (v136 & 7) - v147)) & ~(-1 << v147) | (v145 << v147);
        v136 += v147;
        *(void *)(v8 + 24) = v136;
        v146 -= v147;
      }
      while (v146);
      uint64_t v148 = *(void *)(v134 + 1280);
      unint64_t v149 = (unsigned char *)(v148 + 104 * v135);
      v149[80] = v138;
      v149[81] = v142;
      v149[82] = v145;
      v149[83] = -1;
      ++v135;
    }
    while (v135 != v84);
  }
  else
  {
    uint64_t v148 = *(void *)(v134 + 1280);
  }
  if (!geo::codec::decodeAttributeSet<GeoCodecsFeature>(1, (uint64_t *)(v8 + 8), -991146299 * ((unint64_t)(*(void *)(v134 + 1288) - v148) >> 3), (uint64_t)&v275, v148, 104))
  {
    char v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5977;
    goto LABEL_22;
  }
  uint64_t v150 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(*a2 + 1288) - *(void *)(*a2 + 1280)) >> 3);
  v280[0] = &unk_1ED517BD8;
  v280[1] = a2;
  v280[3] = v280;
  char TransitSystemsChapterLabelSet = geo::codec::_readTransitSystemsChapterLabelSet((uint64_t *)(v8 + 8), v150, (uint64_t)v280, a2);
  std::function<void ()(unsigned long,unsigned long,char const*)>::~function(v280);
  if ((TransitSystemsChapterLabelSet & 1) == 0)
  {
    char v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5983;
    goto LABEL_22;
  }
  uint64_t v152 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(*a2 + 1288) - *(void *)(*a2 + 1280)) >> 3);
  v279[0] = &unk_1ED517C30;
  v279[1] = a2;
  v279[3] = v279;
  char v153 = geo::codec::_readTransitSystemsChapterIDSet((uint64_t *)(v8 + 8), v152, (uint64_t)v279);
  std::function<void ()(unsigned long,unsigned long long const*)>::~function(v279);
  if ((v153 & 1) == 0)
  {
    char v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5987;
    goto LABEL_22;
  }
  if ((geo::codec::_convertTransitLineKeys((geo::codec::Allocator *)(*a2 + 1616), *(void *)(*a2 + 1632), (geo::codec::Allocator **)(*a2 + 1624), a2) & 1) == 0)
  {
    char v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5990;
    goto LABEL_22;
  }
  if ((geo::codec::_convertTransitLineKeys((geo::codec::Allocator *)(*a2 + 1592), *(void *)(*a2 + 1608), (geo::codec::Allocator **)(*a2 + 1600), a2) & 1) == 0)
  {
    char v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5992;
    goto LABEL_22;
  }
  unint64_t v154 = *(void *)(v8 + 24);
  unint64_t v155 = v154 + 1;
  unint64_t v156 = 8 * *(void *)(v8 + 16);
  if (v154 + 1 > v156)
  {
    char v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5995;
    goto LABEL_22;
  }
  unsigned int v157 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v154 >> 3));
  *(void *)(v8 + 24) = v155;
  if ((v157 >> (~(_BYTE)v154 & 7)))
  {
    LODWORD(v277) = 0;
    if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v277, 5uLL))
    {
      char v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5998;
      goto LABEL_22;
    }
    unsigned int v270 = 0;
    if ((BitstreamUnpackVar32((uint64_t *)(v8 + 8), (int *)&v270) & 1) == 0)
    {
      char v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 6001;
      goto LABEL_22;
    }
    v267[0] = 0;
    if (!geo::codec::_makeSpaceForShields((geo::codec::Allocator *)v270, v267, a2))
    {
      char v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 6005;
      goto LABEL_22;
    }
    uint64_t v158 = v267[0];
    char v159 = (void *)*a2;
    uint64_t v160 = *(void *)(*a2 + 1280);
    if (*(void *)(*a2 + 1288) != v160)
    {
      uint64_t v161 = 0;
      unint64_t v162 = 0;
      unint64_t v163 = v277;
      do
      {
        unint64_t v164 = *(void *)(v8 + 24);
        if (v164 + 1 > 8 * *(void *)(v8 + 16))
        {
          char v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 6009;
          goto LABEL_22;
        }
        unsigned int v165 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v164 >> 3));
        *(void *)(v8 + 24) = v164 + 1;
        if ((v165 >> (~(_BYTE)v164 & 7)))
        {
          unsigned int v269 = 0;
          if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v269, v163))
          {
            int v27 = 6012;
            goto LABEL_267;
          }
          char v159 = (void *)*a2;
          if ((unint64_t)v158 >= *(void *)(*a2 + 1072))
          {
            int v27 = 6013;
            goto LABEL_267;
          }
          uint64_t v166 = v160 + v161;
          *(unsigned char *)(v166 + 72) = 1;
          *(_DWORD *)(v166 + 60) = v158;
          *(void *)(v159[133] + 32 * (void)v158 + 24) = v269;
          uint64_t v158 = (uint64_t *)((char *)v158 + 1);
        }
        else
        {
          char v159 = (void *)*a2;
        }
        ++v162;
        uint64_t v160 = v159[160];
        v161 += 104;
      }
      while (v162 < 0x4EC4EC4EC4EC4EC5 * ((v159[161] - v160) >> 3));
    }
    if (v158 != (uint64_t *)v159[134])
    {
      char v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 6020;
      goto LABEL_22;
    }
    uint64_t v167 = v159[107];
    uint64_t v168 = v159[108];
    unsigned int v269 = 0;
    if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v269, 5uLL))
    {
      char v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 6026;
      goto LABEL_22;
    }
    uint64_t v169 = *(void *)(*a2 + 1280);
    if (*(void *)(*a2 + 1288) != v169)
    {
      uint64_t v170 = 0;
      unint64_t v171 = 0;
      unint64_t v172 = v168 - v167;
      unint64_t v173 = v269;
      while (1)
      {
        unint64_t v175 = *(void *)(v8 + 24);
        if (v175 + 1 > 8 * *(void *)(v8 + 16)) {
          break;
        }
        unsigned int v176 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v175 >> 3));
        *(void *)(v8 + 24) = v175 + 1;
        if ((v176 >> (~(_BYTE)v175 & 7)))
        {
          unsigned int v268 = 0;
          if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v268, v173))
          {
            int v27 = 6034;
            goto LABEL_267;
          }
          uint64_t v177 = v268;
          if (v172 <= v268)
          {
            int v27 = 6035;
            goto LABEL_267;
          }
          if (!*(unsigned char *)(v169 + v170 + 72))
          {
            int v27 = 6036;
            goto LABEL_267;
          }
          uint64_t v178 = *(unsigned int *)(v169 + v170 + 60);
          uint64_t v179 = *a2;
          *(void *)(*(void *)(*a2 + 1064) + 32 * v178) = v167 + v268;
          char v180 = geo::codec::langLocaleForOffset(v177, *(const void **)(v179 + 888), *(void *)(v179 + 896));
          uint64_t v174 = *a2;
          *(void *)(*(void *)(*a2 + 1064) + 32 * v178 + 8) = v180;
        }
        else
        {
          uint64_t v174 = *a2;
        }
        ++v171;
        uint64_t v169 = *(void *)(v174 + 1280);
        v170 += 104;
        if (v171 >= 0x4EC4EC4EC4EC4EC5 * ((*(void *)(v174 + 1288) - v169) >> 3)) {
          goto LABEL_222;
        }
      }
      char v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 6031;
LABEL_22:
      uint64_t v28 = fprintf(v26, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v27);
      uint64_t v17 = 0;
      if (!a1) {
        goto LABEL_26;
      }
      goto LABEL_23;
    }
LABEL_222:
    unint64_t v155 = *(void *)(v8 + 24);
    unint64_t v156 = 8 * *(void *)(v8 + 16);
  }
  if (v155 + 1 > v156)
  {
    char v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 6047;
    goto LABEL_22;
  }
  unsigned int v181 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v155 >> 3));
  *(void *)(v8 + 24) = v155 + 1;
  if ((v181 >> (~(_BYTE)v155 & 7)))
  {
    LODWORD(v267[0]) = 0;
    if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)v267, 5uLL))
    {
      char v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 6050;
      goto LABEL_22;
    }
    if (*(void *)(*a2 + 1288) != *(void *)(*a2 + 1280))
    {
      unint64_t v182 = 0;
      unint64_t v183 = (LODWORD(v267[0]) + 1);
      uint64_t v184 = 88;
      do
      {
        unint64_t v187 = *(void *)(v8 + 24);
        if (v187 + 1 > 8 * *(void *)(v8 + 16))
        {
          char v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 6054;
          goto LABEL_22;
        }
        unsigned int v188 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v187 >> 3));
        *(void *)(v8 + 24) = v187 + 1;
        if ((v188 >> (~(_BYTE)v187 & 7)))
        {
          LODWORD(v277) = 0;
          if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v277, v183))
          {
            char v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 6057;
            goto LABEL_22;
          }
          uint64_t v185 = *a2;
          uint64_t v186 = *(void *)(*a2 + 1280);
          *(float *)(v186 + v184) = (float)v277 * 0.1;
        }
        else
        {
          uint64_t v185 = *a2;
          uint64_t v186 = *(void *)(*a2 + 1280);
        }
        ++v182;
        v184 += 104;
      }
      while (v182 < 0x4EC4EC4EC4EC4EC5 * ((*(void *)(v185 + 1288) - v186) >> 3));
    }
  }
  if (*(_DWORD *)(v8 + 64) >= 0x15u)
  {
    uint64_t v189 = *a2;
    uint64_t v190 = *(void *)(*a2 + 1312);
    if (*(void *)(*a2 + 1320) != v190)
    {
      unint64_t v191 = 0;
      while (1)
      {
        unint64_t v192 = *(void *)(v8 + 24);
        if (v192 + 1 > 8 * *(void *)(v8 + 16))
        {
          char v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 6068;
          goto LABEL_22;
        }
        unsigned int v193 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v192 >> 3));
        *(void *)(v8 + 24) = v192 + 1;
        if ((v193 >> (~(_BYTE)v192 & 7)))
        {
          char v194 = (void *)(v190 + 72 * v191);
          unint64_t v195 = v194[1];
          if (v195) {
            break;
          }
        }
LABEL_240:
        ++v191;
        uint64_t v190 = *(void *)(v189 + 1312);
        if (v191 >= 0x8E38E38E38E38E39 * ((*(void *)(v189 + 1320) - v190) >> 3)) {
          goto LABEL_251;
        }
      }
      uint64_t v196 = 0;
      while (1)
      {
        unint64_t v197 = *(void *)(v8 + 24);
        if (v197 + 1 > 8 * *(void *)(v8 + 16)) {
          break;
        }
        unsigned int v198 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v197 >> 3));
        *(void *)(v8 + 24) = v197 + 1;
        if ((v198 >> (~(_BYTE)v197 & 7)))
        {
          LODWORD(v267[0]) = 0;
          if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)v267, 8uLL))
          {
            char v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 6076;
            goto LABEL_22;
          }
          *(unsigned char *)(*(void *)(*a2 + 1280) + 104 * (v196 + *v194) + 83) = v267[0];
          unint64_t v195 = v194[1];
        }
        if (++v196 >= v195)
        {
          uint64_t v189 = *a2;
          goto LABEL_240;
        }
      }
      char v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 6073;
      goto LABEL_22;
    }
  }
LABEL_251:
  unint64_t v199 = *(void *)(v8 + 24);
  if (v199 + 1 > 8 * *(void *)(v8 + 16))
  {
    int v27 = 6086;
    goto LABEL_267;
  }
  unsigned int v200 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v199 >> 3));
  *(void *)(v8 + 24) = v199 + 1;
  if (((v200 >> (~(_BYTE)v199 & 7)) & 1) != 0
    && !geo::codec::decodeAttributeSet<GeoCodecsPBTransitSystemInfo>(-1, (uint64_t *)(v8 + 8), 954437177 * ((*(void *)(*a2 + 1320) - *(void *)(*a2 + 1312)) >> 3), *a2 + 1112, *(void *)(*a2 + 1312), 72))
  {
    int v27 = 6088;
    goto LABEL_267;
  }
  uint64_t v201 = *a2;
  uint64_t v202 = *(void *)(*a2 + 1312);
  if (*(void *)(*a2 + 1320) != v202)
  {
    unint64_t v203 = 0;
    while (1)
    {
      uint64_t v205 = (void *)(v202 + 72 * v203);
      if (v205[1]) {
        break;
      }
LABEL_257:
      ++v203;
      uint64_t v202 = *(void *)(v201 + 1312);
      unint64_t v204 = 0x8E38E38E38E38E39 * ((*(void *)(v201 + 1320) - v202) >> 3);
      if (v203 >= v204) {
        goto LABEL_269;
      }
    }
    uint64_t v206 = 0;
    char v207 = (uint64_t **)(v202 + 72 * v203 + 24);
    while (1)
    {
      uint64_t v208 = *a2;
      uint64_t v209 = v206 + *v205;
      uint64_t v210 = *(void *)(*a2 + 1280);
      v267[0] = 0;
      v267[1] = 0;
      BOOL appended = geo::codec::appendStyleAttributes(v267, v207, v210 + 104 * v209 + 24, v208 + 1112);
      std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)v267);
      if (!appended) {
        break;
      }
      if ((unint64_t)++v206 >= v205[1])
      {
        uint64_t v201 = *a2;
        goto LABEL_257;
      }
    }
    char v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 6097;
    goto LABEL_22;
  }
  unint64_t v204 = 0;
LABEL_269:
  v278[0] = &unk_1ED517C88;
  v278[1] = a2;
  v278[3] = v278;
  char v212 = geo::codec::_readTransitSystemsChapterLabelSet((uint64_t *)(v8 + 8), v204, (uint64_t)v278, a2);
  std::function<void ()(unsigned long,unsigned long,char const*)>::~function(v278);
  if ((v212 & 1) == 0)
  {
    char v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 6107;
    goto LABEL_22;
  }
  unint64_t v213 = *(void *)(v8 + 24);
  if (v213 + 1 > 8 * *(void *)(v8 + 16))
  {
    char v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 6114;
    goto LABEL_22;
  }
  unsigned int v214 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v213 >> 3));
  *(void *)(v8 + 24) = v213 + 1;
  if ((v214 >> (~(_BYTE)v213 & 7)))
  {
    LODWORD(v277) = 0;
    if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v277, 5uLL))
    {
      char v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 6117;
      goto LABEL_22;
    }
    unsigned int v270 = 0;
    if ((BitstreamUnpackVar32((uint64_t *)(v8 + 8), (int *)&v270) & 1) == 0)
    {
      char v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 6120;
      goto LABEL_22;
    }
    v267[0] = 0;
    if ((geo::codec::_makeSpaceForLabels((geo::codec::Allocator *)v270, v267, a2) & 1) == 0)
    {
      char v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 6123;
      goto LABEL_22;
    }
    uint64_t v215 = *a2;
    char v216 = v267[0];
    uint64_t v217 = *(void *)(*a2 + 1280);
    if (*(void *)(*a2 + 1288) != v217)
    {
      unint64_t v218 = 0;
      uint64_t v219 = *(void *)(v215 + 856);
      unint64_t v261 = *(void *)(v215 + 864) - v219;
      unint64_t v220 = v277;
      uint64_t v221 = 92;
      do
      {
        unint64_t v223 = *(void *)(v8 + 24);
        if (v223 + 1 > 8 * *(void *)(v8 + 16))
        {
          char v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 6130;
          goto LABEL_22;
        }
        unsigned int v224 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v223 >> 3));
        *(void *)(v8 + 24) = v223 + 1;
        if ((v224 >> (~(_BYTE)v223 & 7)))
        {
          unsigned int v269 = 0;
          if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v269, v220))
          {
            int v27 = 6133;
            goto LABEL_267;
          }
          uint64_t v225 = v269;
          if (v261 <= v269)
          {
            int v27 = 6134;
            goto LABEL_267;
          }
          *(_DWORD *)(v217 + v221) = v216;
          uint64_t v226 = *a2;
          *(void *)(*(void *)(*a2 + 1048) + 24 * (void)v216) = v219 + v225;
          uint64_t v227 = geo::codec::langLocaleForOffset(v225, *(const void **)(v226 + 888), *(void *)(v226 + 896));
          uint64_t v215 = *a2;
          *(void *)(*(void *)(*a2 + 1048) + 24 * (void)v216 + 8) = v227;
          char v216 = (uint64_t *)((char *)v216 + 1);
        }
        else
        {
          uint64_t v215 = *a2;
        }
        ++v218;
        uint64_t v217 = *(void *)(v215 + 1280);
        v221 += 104;
      }
      while (v218 < 0x4EC4EC4EC4EC4EC5 * ((*(void *)(v215 + 1288) - v217) >> 3));
    }
    if (v216 != *(uint64_t **)(v215 + 1056))
    {
      char v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 6142;
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v215 = *a2;
  }
  uint64_t v28 = geo::codec::_convertTransitLineKeys((geo::codec::Allocator *)(v215 + 1376), *(void *)(v215 + 1392), (geo::codec::Allocator **)(v215 + 1384), a2);
  if ((v28 & 1) == 0)
  {
    char v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 6147;
    goto LABEL_22;
  }
  if (*(_DWORD *)(v8 + 64) >= 0x2Cu)
  {
    LODWORD(v267[0]) = 0;
    if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), v267, 5uLL))
    {
      char v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 6151;
      goto LABEL_22;
    }
    LODWORD(v277) = 0;
    uint64_t v28 = BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v277, 5uLL);
    if ((v28 & 1) == 0)
    {
      char v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 6154;
      goto LABEL_22;
    }
    unint64_t v222 = *(void *)(v8 + 24);
    if (v222 + 1 > 8 * *(void *)(v8 + 16))
    {
      char v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 6157;
      goto LABEL_22;
    }
    unsigned int v228 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v222 >> 3));
    *(void *)(v8 + 24) = v222 + 1;
    if ((v228 >> (~(_BYTE)v222 & 7)))
    {
      unsigned int v270 = 0;
      if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v270, 5uLL))
      {
        char v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 6161;
        goto LABEL_22;
      }
      unsigned int v269 = 0;
      if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v269, 5uLL))
      {
        char v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 6164;
        goto LABEL_22;
      }
      unsigned int v268 = 0;
      uint64_t v28 = BitstreamUnpackVar32((uint64_t *)(v8 + 8), (int *)&v268);
      if (!v28)
      {
        char v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 6167;
        goto LABEL_22;
      }
      unsigned int v257 = v268;
      if (v268)
      {
        int v258 = 0;
        unint64_t v262 = v270;
        unint64_t v259 = v269;
        unint64_t v229 = LODWORD(v267[0]);
        unint64_t v230 = v277;
        while (1)
        {
          int v266 = 0;
          if (!BitstreamUnpack((uint64_t *)(v8 + 8), &v266, v262))
          {
            int v27 = 6171;
            goto LABEL_267;
          }
          int v231 = v266;
          if (v266 == -1)
          {
            int v27 = 6172;
            goto LABEL_267;
          }
          int v265 = 0;
          uint64_t v28 = BitstreamUnpack((uint64_t *)(v8 + 8), &v265, v259);
          if (!v28)
          {
            char v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 6175;
            goto LABEL_22;
          }
          int v232 = v265;
          if (v265) {
            break;
          }
LABEL_328:
          if (++v258 == v257) {
            goto LABEL_329;
          }
        }
        while (1)
        {
          unsigned int v264 = 0;
          if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v264, v229))
          {
            int v27 = 6179;
            goto LABEL_267;
          }
          unsigned int v233 = v264;
          uint64_t v234 = *(void *)(*a2 + 1312);
          if (0x8E38E38E38E38E39 * ((*(void *)(*a2 + 1320) - v234) >> 3) <= v264)
          {
            int v27 = 6180;
            goto LABEL_267;
          }
          unsigned int v263 = 0;
          uint64_t v28 = BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v263, v230);
          if (!v28)
          {
            int v27 = 6185;
            goto LABEL_267;
          }
          uint64_t v235 = (void *)(v234 + 72 * v233);
          if (v235[1] <= (unint64_t)v263) {
            break;
          }
          uint64_t v236 = *(void *)(*a2 + 1280) + 104 * (*v235 + v263);
          int v239 = *(_DWORD *)(v236 + 96);
          uint64_t v237 = (int *)(v236 + 96);
          int v238 = v239;
          if (v239 != -1 && v238 != v231)
          {
            int v27 = 6189;
            goto LABEL_267;
          }
          *uint64_t v237 = v231;
          if (!--v232) {
            goto LABEL_328;
          }
        }
        int v27 = 6186;
LABEL_267:
        char v26 = (FILE *)*MEMORY[0x1E4F143C8];
        goto LABEL_22;
      }
    }
LABEL_329:
    if (*(_DWORD *)(v8 + 64) >= 0x2Eu)
    {
      LODWORD(v267[0]) = 0;
      uint64_t v28 = BitstreamUnpackBitcount((uint64_t *)(v8 + 8), v267, 5uLL);
      if ((v28 & 1) == 0)
      {
        char v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 6199;
        goto LABEL_22;
      }
      unint64_t v241 = *(void *)(v8 + 24);
      if (v241 + 1 > 8 * *(void *)(v8 + 16))
      {
        char v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 6202;
        goto LABEL_22;
      }
      unsigned int v242 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v241 >> 3));
      *(void *)(v8 + 24) = v241 + 1;
      if ((v242 >> (~(_BYTE)v241 & 7)))
      {
        uint64_t v243 = *a2;
        uint64_t v244 = *(void *)(*a2 + 1312);
        if (*(void *)(*a2 + 1320) != v244)
        {
          unint64_t v245 = 0;
          unint64_t v246 = LODWORD(v267[0]);
          while (1)
          {
            unint64_t v247 = (void *)(v244 + 72 * v245);
            if (v247[1]) {
              break;
            }
LABEL_342:
            ++v245;
            uint64_t v244 = *(void *)(v243 + 1312);
            if (v245 >= 0x8E38E38E38E38E39 * ((*(void *)(v243 + 1320) - v244) >> 3)) {
              goto LABEL_348;
            }
          }
          uint64_t v248 = 0;
          while (1)
          {
            LODWORD(v277) = 0;
            uint64_t v28 = BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v277, v246);
            if (!v28) {
              break;
            }
            uint64_t v243 = *a2;
            *(_DWORD *)(*(void *)(*a2 + 1280) + 104 * (v248 + *v247) + 100) = v277;
            if ((unint64_t)++v248 >= v247[1]) {
              goto LABEL_342;
            }
          }
          char v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 6209;
          goto LABEL_22;
        }
      }
LABEL_348:
      if (*(_DWORD *)(v8 + 64) >= 0x30u)
      {
        unint64_t v249 = *(void *)(v8 + 24);
        if (v249 + 1 > 8 * *(void *)(v8 + 16))
        {
          char v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 6220;
          goto LABEL_22;
        }
        unsigned int v250 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v249 >> 3));
        *(void *)(v8 + 24) = v249 + 1;
        if ((v250 >> (~(_BYTE)v249 & 7)))
        {
          LODWORD(v267[0]) = 0;
          uint64_t v28 = BitstreamUnpackBitcount((uint64_t *)(v8 + 8), v267, 5uLL);
          if (!v28)
          {
            char v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 6224;
            goto LABEL_22;
          }
          if (*(void *)(*a2 + 1320) != *(void *)(*a2 + 1312))
          {
            unint64_t v251 = 0;
            unint64_t v252 = LODWORD(v267[0]);
            uint64_t v253 = 64;
            while (1)
            {
              LODWORD(v277) = 0;
              uint64_t v28 = BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v277, v252);
              if (!v28) {
                break;
              }
              uint64_t v254 = *a2;
              uint64_t v255 = *(void *)(*a2 + 1312);
              *(_DWORD *)(v255 + v253) = v277;
              ++v251;
              v253 += 72;
              if (v251 >= 0x8E38E38E38E38E39 * ((*(void *)(v254 + 1320) - v255) >> 3)) {
                goto LABEL_360;
              }
            }
            char v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 6228;
            goto LABEL_22;
          }
        }
      }
    }
  }
LABEL_360:
  uint64_t v256 = *(void *)(v8 + 48) + (*(void *)(v8 + 24) >> 3);
  if ((*(void *)(v8 + 24) & 7) != 0) {
    ++v256;
  }
  *(void *)(v8 + 48) = v256;
  *(unsigned char *)(v8 + 32) = 0;
  uint64_t v17 = 1;
  if (a1)
  {
LABEL_23:
    if (*(unsigned char *)v8)
    {
      uint64_t v29 = geo::codec::Allocator::instance((geo::codec::Allocator *)v28);
      uint64_t v28 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v29 + 40))(v29, *(void *)(v8 + 40), 0);
    }
    uint64_t v30 = geo::codec::Allocator::instance((geo::codec::Allocator *)v28);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v30 + 40))(v30, v8, 0);
  }
LABEL_26:
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v16 = rep;
  unint64_t v31 = v271;
  uint64_t v4 = v272;
  v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v277 = v31;
  if (v31)
  {
LABEL_27:
    v267[0] = (uint64_t *)&v277;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v4 + 1912, (uint64_t *)&v277, (uint64_t)&std::piecewise_construct, v267)+ 4) = (double)((v18.__d_.__rep_ - v16) / 1000) * 0.001;
  }
LABEL_28:
  char v32 = v273;
  if (v273 && !atomic_fetch_add(&v273->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  FeatureStyleAttributesSet::~FeatureStyleAttributesSet((FeatureStyleAttributesSet *)&v275);
  return v17;
}

void sub_188F9CFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  FeatureStyleAttributesSet::~FeatureStyleAttributesSet((FeatureStyleAttributesSet *)va1);
  _Unwind_Resume(a1);
}

void FeatureStyleAttributesSet::~FeatureStyleAttributesSet(FeatureStyleAttributesSet *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = *((void *)this + 3);
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *((void *)this + 3);
    }
    *((void *)this + 4) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 6) + 40))(*((void *)this + 6), v4, *((void *)this + 5) - v4);
  }
  std::__tree<std::shared_ptr<FeatureStyleAttributes const>,FeatureStyleAttributesSet::FeatureStyleAttributesCompare,std::allocator<std::shared_ptr<FeatureStyleAttributes const>>>::destroy((uint64_t)this, *((void **)this + 1));
}

void std::__tree<std::shared_ptr<FeatureStyleAttributes const>,FeatureStyleAttributesSet::FeatureStyleAttributesCompare,std::allocator<std::shared_ptr<FeatureStyleAttributes const>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::shared_ptr<FeatureStyleAttributes const>,FeatureStyleAttributesSet::FeatureStyleAttributesCompare,std::allocator<std::shared_ptr<FeatureStyleAttributes const>>>::destroy(a1, *a2);
    std::__tree<std::shared_ptr<FeatureStyleAttributes const>,FeatureStyleAttributesSet::FeatureStyleAttributesCompare,std::allocator<std::shared_ptr<FeatureStyleAttributes const>>>::destroy(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[5];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      unint64_t v5 = a2;
    }
    else
    {
      unint64_t v5 = a2;
    }
    operator delete(v5);
  }
}

id GEOGetGEOPrivacyManagerLog()
{
  if (qword_1EB29FCF0 != -1) {
    dispatch_once(&qword_1EB29FCF0, &__block_literal_global_102);
  }
  os_log_t v0 = (void *)qword_1EB29FCE8;

  return v0;
}

void sub_188F9D874(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188F9DA30(_Unwind_Exception *exception_object)
{
}

unint64_t GEOPDTextBlockReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 52))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDTextBlockReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::chrono::steady_clock::time_point v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = [v8 position];
  *(_DWORD *)(a1 + 52) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDTextBlockReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDTextBlockReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDTextBlockReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_188F9DBC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDTextBlockReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 52);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 48)];
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + (*(unsigned char *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        uint64_t v12 = v7;
        goto LABEL_8;
      case -3:
        char v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        BOOL v14 = v11 > 1;
        char v15 = v14 & ~(_BYTE)v7;
        unsigned __int8 v16 = v14 | v7;
        char v48 = v15 | v8;
        if ((v16 | v9)) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = a3;
        }
        BOOL v51 = v16;
        char v49 = v16 | v15 | v8;
        char v50 = (v17 == 0) | v16;
        uint64_t v18 = (int *)MEMORY[0x1E4F940E8];
        unint64_t v19 = (int *)MEMORY[0x1E4F940C8];
        int v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
        uint64_t v13 = v8;
LABEL_8:
        ++v10;
        uint64_t v7 = v12;
        uint64_t v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_65;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_23;
      }
      v21 += 7;
      if (v22++ >= 9)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_23:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_65:
      int v47 = 1;
      goto LABEL_66;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v51;
    if ((v50 & 1) == 0)
    {
      char v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    if (v31 == 3)
    {
      if (!v32) {
        goto LABEL_55;
      }
      if ((*(unsigned char *)(a1 + 60) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_81;
        }
        char v42 = *(unsigned char *)(a1 + 60) << 6;
        goto LABEL_63;
      }
      uint64_t v37 = PBReaderReadString();
      uint64_t v38 = 24;
      goto LABEL_48;
    }
    if (v31 == 2) {
      break;
    }
    if (v31 == 1)
    {
      if (!v32) {
        goto LABEL_55;
      }
      if ((*(unsigned char *)(a1 + 60) & 8) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_81;
        }
        char v42 = 16 * *(unsigned char *)(a1 + 60);
        goto LABEL_63;
      }
      uint64_t v37 = PBReaderReadString();
      uint64_t v38 = 40;
      goto LABEL_48;
    }
    if (v48 & 1) == 0 || (*(unsigned char *)(a1 + 60))
    {
LABEL_55:
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_81;
      }
      goto LABEL_64;
    }
    if (!*(void *)(a1 + 16))
    {
      id v40 = objc_alloc_init(MEMORY[0x1E4F940B0]);
      unint64_t v41 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v40;
    }
    if (!PBUnknownFieldAdd())
    {
      int v47 = 0;
      unint64_t v19 = (int *)MEMORY[0x1E4F940C8];
      goto LABEL_67;
    }
LABEL_64:
    unint64_t v19 = (int *)MEMORY[0x1E4F940C8];
    if (!(v49 & 1 | (v10 != 0))) {
      goto LABEL_65;
    }
  }
  if (!v32) {
    goto LABEL_55;
  }
  if ((*(unsigned char *)(a1 + 60) & 4) == 0)
  {
    uint64_t v37 = PBReaderReadString();
    uint64_t v38 = 32;
LABEL_48:
    uint64_t v39 = *(void **)(a1 + v38);
    *(void *)(a1 + v38) = v37;

    --v10;
    goto LABEL_64;
  }
  if (PBReaderSkipValueWithTag())
  {
    char v42 = 32 * *(unsigned char *)(a1 + 60);
LABEL_63:
    v10 += v42 >> 7;
    goto LABEL_64;
  }
LABEL_81:
  int v47 = 0;
  unint64_t v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_66:
  if ((v48 & 1) == 0) {
    goto LABEL_68;
  }
LABEL_67:
  *(unsigned char *)(a1 + 60) |= 1u;
LABEL_68:
  if (v51 || (v47 & 1) == 0)
  {
    *(unsigned char *)(a1 + 60) |= 8u;
    *(unsigned char *)(a1 + 60) |= 4u;
    *(unsigned char *)(a1 + 60) |= 2u;
  }
  else if (v17)
  {
    while (1)
    {
      int v43 = *v17++;
      char v44 = 8;
      switch(v43)
      {
        case 0:
          goto LABEL_75;
        case 1:
          goto LABEL_74;
        case 2:
          char v44 = 4;
          goto LABEL_74;
        case 3:
          char v44 = 2;
LABEL_74:
          *(unsigned char *)(a1 + 60) |= v44;
          break;
        default:
          continue;
      }
    }
  }
LABEL_75:
  if (v47) {
    unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v51)
  {
    uint64_t v45 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

uint64_t geo::codec::decodeIntCompressorArray<unsigned int>(void *a1, uint64_t *a2, char a3, char a4, unint64_t a5, int8x16_t *a6)
{
  int v17 = 0;
  if (!a2) {
    return 0;
  }
  uint64_t result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v17);
  if (result)
  {
    uint64_t v13 = v17;
    uint64_t v14 = a1[6];
    unint64_t v15 = v14 + v17;
    if (v15 <= a1[7])
    {
      unsigned __int8 v16 = (unsigned __int8 *)(a1[5] + v14);
      a1[6] = v15;
      return mgcl::ints::IntDecompressor<unsigned int>::decompress(a2, v16, v13, a3, a4, a5, a6) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::decodeIntCompressorArray<unsigned int>(void *a1, uint64_t *a2, char a3, char a4, uint64_t a5)
{
  unint64_t v5 = *(int8x16_t **)a5;
  uint64_t v6 = *(void *)(a5 + 8);
  int v16 = 0;
  if (!a2) {
    return 0;
  }
  uint64_t result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v16);
  if (result)
  {
    uint64_t v12 = v16;
    uint64_t v13 = a1[6];
    unint64_t v14 = v13 + v16;
    if (v14 <= a1[7])
    {
      unint64_t v15 = (unsigned __int8 *)(a1[5] + v13);
      a1[6] = v14;
      return mgcl::ints::IntDecompressor<unsigned int>::decompress(a2, v15, v12, a3, a4, (v6 - (uint64_t)v5) >> 2, v5) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mgcl::ints::IntDecompressor<unsigned int>::decompress(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, char a4, char a5, unint64_t a6, int8x16_t *a7)
{
  uint64_t v375 = *MEMORY[0x1E4F143B8];
  if (!a6) {
    return 0;
  }
  unint64_t v354 = 4 * a6;
  bzero(a7, 4 * a6);
  size_t v12 = *a2;
  if ((v12 - 66) < 0xFFFFFFBF) {
    return 3;
  }
  if (v12 <= 0x40) {
    size_t v14 = 65 - v12;
  }
  else {
    size_t v14 = 0;
  }
  bzero(&__dst[v12], v14);
  memcpy(__dst, a2 + 1, v12);
  uint64_t v15 = 0;
  uint64_t v16 = v12 + 1;
  unint64_t v350 = a6 & 0xFFFFFFFFFFFFFFF0;
  unint64_t __sz = 8 * a6;
  uint64_t v359 = 8 * a3 - 24;
  uint64_t v348 = -(uint64_t)(a6 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v349 = a6 & 0xFFFFFFFFFFFFFFF8;
  int v360 = a1;
  unsigned int v361 = a2;
  unint64_t v362 = a6;
  int v17 = a2;
  size_t v357 = v12;
  while (2)
  {
    uint64_t v363 = v15;
    uint64_t v364 = v16;
    unsigned int v19 = __dst[v15];
    char v20 = 0;
    unint64_t v21 = 0;
    unint64_t v22 = 0;
    unint64_t v23 = &v17[v16 + 1];
    uint64_t v24 = 1;
    if (__dst[v15])
    {
      uint64_t v25 = v359 - 8 * v16;
      do
      {
        uint64_t v26 = v24;
        uint64_t v27 = v25;
        int v28 = (char)v23[v21];
        v22 |= (unint64_t)(v23[v21] & 0x7F) << v20;
        if (v21 > 8) {
          break;
        }
        ++v21;
        v20 += 7;
        ++v24;
        v25 -= 8;
      }
      while (v28 < 0);
      char v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      BOOL v32 = &v17[v16];
      do
      {
        int v33 = (char)v32[v26 + 1];
        v31 |= (unint64_t)(v32[++v26] & 0x7F) << v29;
        if (v30 > 8) {
          break;
        }
        ++v30;
        v29 += 7;
        v27 -= 8;
      }
      while (v33 < 0);
      switch(v17[v16])
      {
        case 1u:
          if (!a1[3]) {
            operator new();
          }
          BOOL v34 = v19 == 1;
          unsigned int v35 = v31 - 2;
          if (v31 < 2) {
            return 3;
          }
          BOOL v36 = &v17[v16 + v26];
          unsigned int v37 = v36[1];
          int v38 = v36[2];
          uint64_t v40 = *a1;
          uint64_t v39 = (char *)a1[1];
          unint64_t v41 = &v39[-*a1];
          if (v19 == 1)
          {
            LODWORD(v42) = v362;
            size_t v43 = v362 - (void)v41;
            if (v362 <= (unint64_t)v41)
            {
              char v50 = v360;
              if (v362 < (unint64_t)v41) {
                v360[1] = v40 + v362;
              }
LABEL_277:
              uint64_t v260 = *v50;
              unint64_t v261 = *(uint64_t **)v50[3];
              LODWORD(v365) = 0;
              BYTE4(v365) = a4;
              BYTE5(v365) = a5;
              WORD3(v365) = 0;
              uint64_t v366 = 1;
              __int16 v367 = 0;
              char v368 = v34;
              int v369 = 0;
              if (v37 >= 4) {
                char v262 = 1;
              }
              else {
                char v262 = v37;
              }
              char v370 = v262;
              if (v38 == 2) {
                char v263 = 4;
              }
              else {
                char v263 = 1;
              }
              if (!v38) {
                char v263 = 0;
              }
              char v371 = v263;
              *((void *)&v365 + 1) = __PAIR64__(v42, v35);
              uint64_t v264 = *v261;
              uint64_t v372 = (uint64_t)&v361[v364 + 3 + v26];
              uint64_t v373 = v35;
              uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v264, (uint64_t)&v372, v260, 0, &v365);
              if (result) {
                goto LABEL_322;
              }
              if (v362 < 8)
              {
                unint64_t v266 = 0;
                a1 = v360;
                int v17 = v361;
LABEL_298:
                unint64_t v315 = v362 - v266;
                uint64_t v316 = &a7->i32[v266];
                unint64_t v317 = (char *)(v260 + v266);
                do
                {
                  char v318 = *v317++;
                  *uint64_t v316 = ((_BYTE)v22 + v318) & 1 | (2 * *v316);
                  ++v316;
                  --v315;
                }
                while (v315);
                goto LABEL_320;
              }
              uint64x2_t v267 = (uint64x2_t)vdupq_n_s64(v22);
              a1 = v360;
              int v17 = v361;
              if (v362 >= 0x10)
              {
                unint64_t v286 = v350;
                int v287 = a7;
                unint64_t v288 = (int8x16_t *)v260;
                do
                {
                  int8x16_t v289 = *v288++;
                  uint32x4_t v290 = (uint32x4_t)vqtbl1q_s8(v289, (int8x16_t)xmmword_18A643780);
                  uint32x4_t v291 = (uint32x4_t)vqtbl1q_s8(v289, (int8x16_t)xmmword_18A643790);
                  uint32x4_t v292 = (uint32x4_t)vqtbl1q_s8(v289, (int8x16_t)xmmword_18A643770);
                  uint32x4_t v293 = (uint32x4_t)vqtbl1q_s8(v289, (int8x16_t)xmmword_18A643760);
                  int8x16_t v295 = v287[2];
                  int8x16_t v294 = v287[3];
                  int8x16_t v297 = *v287;
                  int8x16_t v296 = v287[1];
                  int32x2_t v298 = (int32x2_t)vextq_s8(v297, v297, 8uLL).u64[0];
                  int32x2_t v299 = (int32x2_t)vextq_s8(v296, v296, 8uLL).u64[0];
                  int32x2_t v300 = (int32x2_t)vextq_s8(v295, v295, 8uLL).u64[0];
                  int32x2_t v301 = (int32x2_t)vextq_s8(v294, v294, 8uLL).u64[0];
                  int32x2_t v302 = vadd_s32(v301, v301);
                  v303.i64[0] = v302.u32[0];
                  v303.i64[1] = v302.u32[1];
                  int8x16_t v304 = v303;
                  *(int32x2_t *)v294.i8 = vadd_s32(*(int32x2_t *)v294.i8, *(int32x2_t *)v294.i8);
                  v303.i64[0] = v294.u32[0];
                  v303.i64[1] = v294.u32[1];
                  int8x16_t v305 = v303;
                  int32x2_t v306 = vadd_s32(v300, v300);
                  v303.i64[0] = v306.u32[0];
                  v303.i64[1] = v306.u32[1];
                  int8x16_t v307 = v303;
                  *(int32x2_t *)v295.i8 = vadd_s32(*(int32x2_t *)v295.i8, *(int32x2_t *)v295.i8);
                  v303.i64[0] = v295.u32[0];
                  v303.i64[1] = v295.u32[1];
                  int8x16_t v308 = v303;
                  *(int32x2_t *)v296.i8 = vadd_s32(*(int32x2_t *)v296.i8, *(int32x2_t *)v296.i8);
                  v303.i64[0] = v296.u32[0];
                  v303.i64[1] = v296.u32[1];
                  int8x16_t v309 = v303;
                  int32x2_t v310 = vadd_s32(v299, v299);
                  v303.i64[0] = v310.u32[0];
                  v303.i64[1] = v310.u32[1];
                  int8x16_t v311 = v303;
                  *(int32x2_t *)v297.i8 = vadd_s32(*(int32x2_t *)v297.i8, *(int32x2_t *)v297.i8);
                  v303.i64[0] = v297.u32[0];
                  v303.i64[1] = v297.u32[1];
                  int8x16_t v312 = v303;
                  int32x2_t v313 = vadd_s32(v298, v298);
                  v303.i64[0] = v313.u32[0];
                  v303.i64[1] = v313.u32[1];
                  int8x16_t v314 = (int8x16_t)vdupq_n_s64(1uLL);
                  *(int32x4_t *)int v287 = vuzp1q_s32((int32x4_t)vorrq_s8(v312, vandq_s8((int8x16_t)vaddw_u32(v267, *(uint32x2_t *)v290.i8), v314)), (int32x4_t)vorrq_s8(v303, vandq_s8((int8x16_t)vaddw_high_u32(v267, v290), v314)));
                  v287[1] = (int8x16_t)vuzp1q_s32((int32x4_t)vorrq_s8(v309, vandq_s8((int8x16_t)vaddw_u32(v267, *(uint32x2_t *)v291.i8), v314)), (int32x4_t)vorrq_s8(v311, vandq_s8((int8x16_t)vaddw_high_u32(v267, v291), v314)));
                  int8x16_t v265 = (int8x16_t)vuzp1q_s32((int32x4_t)vorrq_s8(v305, vandq_s8((int8x16_t)vaddw_u32(v267, *(uint32x2_t *)v293.i8), v314)), (int32x4_t)vorrq_s8(v304, vandq_s8((int8x16_t)vaddw_high_u32(v267, v293), v314)));
                  v287[2] = (int8x16_t)vuzp1q_s32((int32x4_t)vorrq_s8(v308, vandq_s8((int8x16_t)vaddw_u32(v267, *(uint32x2_t *)v292.i8), v314)), (int32x4_t)vorrq_s8(v307, vandq_s8((int8x16_t)vaddw_high_u32(v267, v292), v314)));
                  v287[3] = v265;
                  v287 += 4;
                  v286 -= 16;
                }
                while (v286);
                if (v350 == v362) {
                  goto LABEL_320;
                }
                unint64_t v266 = v350;
                unint64_t v268 = v350;
                if ((v362 & 8) == 0) {
                  goto LABEL_298;
                }
              }
              else
              {
                unint64_t v268 = 0;
              }
              unsigned int v269 = (uint64_t *)(v260 + v268);
              unsigned int v270 = (int8x16_t *)((char *)a7 + 4 * v268);
              unint64_t v271 = v348 + v268;
              do
              {
                uint64_t v272 = *v269++;
                v265.i64[0] = v272;
                uint32x4_t v273 = (uint32x4_t)vqtbl1q_s8(v265, (int8x16_t)xmmword_18A643780);
                uint32x4_t v274 = (uint32x4_t)vqtbl1q_s8(v265, (int8x16_t)xmmword_18A643790);
                int8x16_t v276 = *v270;
                int8x16_t v275 = v270[1];
                int32x2_t v277 = (int32x2_t)vextq_s8(v276, v276, 8uLL).u64[0];
                int32x2_t v278 = (int32x2_t)vextq_s8(v275, v275, 8uLL).u64[0];
                *(int32x2_t *)v275.i8 = vadd_s32(*(int32x2_t *)v275.i8, *(int32x2_t *)v275.i8);
                v279.i64[0] = v275.u32[0];
                v279.i64[1] = v275.u32[1];
                int8x16_t v280 = v279;
                int32x2_t v281 = vadd_s32(v278, v278);
                v279.i64[0] = v281.u32[0];
                v279.i64[1] = v281.u32[1];
                int8x16_t v282 = v279;
                *(int32x2_t *)v276.i8 = vadd_s32(*(int32x2_t *)v276.i8, *(int32x2_t *)v276.i8);
                v279.i64[0] = v276.u32[0];
                v279.i64[1] = v276.u32[1];
                int8x16_t v283 = v279;
                int32x2_t v284 = vadd_s32(v277, v277);
                v279.i64[0] = v284.u32[0];
                v279.i64[1] = v284.u32[1];
                int8x16_t v285 = (int8x16_t)vdupq_n_s64(1uLL);
                int8x16_t v265 = (int8x16_t)vuzp1q_s32((int32x4_t)vorrq_s8(v280, vandq_s8((int8x16_t)vaddw_u32(v267, *(uint32x2_t *)v274.i8), v285)), (int32x4_t)vorrq_s8(v282, vandq_s8((int8x16_t)vaddw_high_u32(v267, v274), v285)));
                *(int32x4_t *)unsigned int v270 = vuzp1q_s32((int32x4_t)vorrq_s8(v283, vandq_s8((int8x16_t)vaddw_u32(v267, *(uint32x2_t *)v273.i8), v285)), (int32x4_t)vorrq_s8(v279, vandq_s8((int8x16_t)vaddw_high_u32(v267, v273), v285)));
                v270[1] = v265;
                v270 += 2;
                v271 += 8;
              }
              while (v271);
              unint64_t v266 = v349;
              if (v349 != v362) {
                goto LABEL_298;
              }
LABEL_320:
              uint64_t v16 = v364 + v31 + v26 + 1;
LABEL_8:
              size_t v12 = v357;
LABEL_9:
              uint64_t v18 = v363;
              goto LABEL_10;
            }
            uint64_t v44 = v360[2];
            if (v44 - (uint64_t)v39 >= v43)
            {
              unint64_t v346 = &v39[v43];
              int v159 = v38;
              BOOL v160 = v34;
              unsigned int v161 = v37;
              bzero(v39, v362 - (void)v41);
              unsigned int v37 = v161;
              BOOL v34 = v160;
              int v38 = v159;
              unsigned int v35 = v31 - 2;
              v360[1] = (uint64_t)v346;
              char v50 = v360;
              LODWORD(v42) = v362;
              goto LABEL_277;
            }
            unsigned int v336 = v37;
            BOOL v339 = v19 == 1;
            int v341 = v38;
            if ((v362 & 0x8000000000000000) != 0) {
              goto LABEL_325;
            }
            unint64_t v45 = (unint64_t)v41;
            unint64_t v46 = v44 - v40;
            uint64_t v47 = 2 * v46;
            if (2 * v46 <= v362) {
              uint64_t v47 = v362;
            }
            if (v46 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v48 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v48 = v47;
            }
            size_t v49 = v48;
            int v333 = (char *)operator new(v48);
            uint64_t v331 = &v333[v45];
            bzero(&v333[v45], v43);
            if (v39 == (char *)v40)
            {
              char v50 = v360;
              unint64_t v42 = v362;
              unsigned int v35 = v31 - 2;
              int v38 = v341;
              BOOL v34 = v339;
              unsigned int v37 = v336;
              unint64_t v172 = v331;
              BOOL v51 = v333;
              goto LABEL_275;
            }
            if (v45 < 8)
            {
              char v50 = v360;
              unint64_t v42 = v362;
              unsigned int v35 = v31 - 2;
              int v38 = v341;
              BOOL v34 = v339;
              unsigned int v37 = v336;
              uint64_t v52 = v331;
              BOOL v51 = v333;
              goto LABEL_272;
            }
            unint64_t v183 = v45;
            uint64_t v52 = &v333[v45];
            BOOL v51 = v333;
            char v50 = v360;
            unint64_t v42 = v362;
            unsigned int v35 = v31 - 2;
            int v38 = v341;
            BOOL v34 = v339;
            unsigned int v37 = v336;
            if ((unint64_t)(v40 - (void)v333) >= 0x20)
            {
              if (v183 < 0x20)
              {
                unint64_t v184 = 0;
                goto LABEL_213;
              }
              unint64_t v184 = v183 & 0xFFFFFFFFFFFFFFE0;
              uint64_t v219 = &v333[v183 - 16];
              unint64_t v220 = v39 - 16;
              unint64_t v221 = v183 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v222 = *(_OWORD *)v220;
                *((_OWORD *)v219 - 1) = *((_OWORD *)v220 - 1);
                *(_OWORD *)uint64_t v219 = v222;
                v219 -= 32;
                v220 -= 32;
                v221 -= 32;
              }
              while (v221);
              if (v183 == v184) {
                goto LABEL_274;
              }
              if ((v183 & 0x18) != 0)
              {
LABEL_213:
                uint64_t v52 = &v331[-(v183 & 0xFFFFFFFFFFFFFFF8)];
                unint64_t v223 = &v39[-v184 - v40 - 8 + (void)v333];
                unsigned int v224 = &v39[-v184 - 8];
                unint64_t v225 = v184 - (v183 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v226 = *(void *)v224;
                  v224 -= 8;
                  *(void *)unint64_t v223 = v226;
                  v223 -= 8;
                  v225 += 8;
                }
                while (v225);
                v39 -= v183 & 0xFFFFFFFFFFFFFFF8;
                if (v183 == (v183 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_274;
                }
                goto LABEL_272;
              }
              uint64_t v52 = &v331[-v184];
              v39 -= v184;
            }
LABEL_272:
            int v258 = v52 - 1;
            do
            {
              char v259 = *--v39;
              *v258-- = v259;
            }
            while (v39 != (char *)v40);
LABEL_274:
            uint64_t v39 = (char *)v40;
            unint64_t v172 = v51;
LABEL_275:
            *char v50 = (uint64_t)v172;
            v50[1] = (uint64_t)&v51[v42];
            v50[2] = (uint64_t)&v51[v49];
            if (v39)
            {
              operator delete(v39);
              unsigned int v37 = v336;
              BOOL v34 = v339;
              int v38 = v341;
              unsigned int v35 = v31 - 2;
            }
            goto LABEL_277;
          }
          size_t v144 = v354 - (void)v41;
          if (v354 <= (unint64_t)v41)
          {
            uint64_t v150 = v360;
            unsigned int v151 = v362;
            if (v354 < (unint64_t)v41) {
              v360[1] = v40 + v354;
            }
            goto LABEL_307;
          }
          uint64_t v145 = v360[2];
          if (v145 - (uint64_t)v39 >= v144)
          {
            char v347 = &v39[v144];
            unint64_t v162 = v39;
            int v163 = v38;
            unsigned int v164 = v37;
            bzero(v162, v354 - (void)v41);
            unsigned int v37 = v164;
            BOOL v34 = v19 == 1;
            int v38 = v163;
            unsigned int v35 = v31 - 2;
            v360[1] = (uint64_t)v347;
            uint64_t v150 = v360;
            unsigned int v151 = v362;
LABEL_307:
            uint64_t v321 = (int32x4_t *)*v150;
            unint64_t v322 = *(uint64_t **)v150[3];
            LODWORD(v365) = 0;
            BYTE4(v365) = a4;
            BYTE5(v365) = a5;
            WORD3(v365) = 0;
            uint64_t v366 = 1;
            __int16 v367 = 0;
            char v368 = v34;
            int v369 = 0;
            if (v37 >= 4) {
              char v323 = 1;
            }
            else {
              char v323 = v37;
            }
            char v370 = v323;
            if (v38 == 2) {
              char v324 = 4;
            }
            else {
              char v324 = 1;
            }
            if (!v38) {
              char v324 = 0;
            }
            char v371 = v324;
            *((void *)&v365 + 1) = __PAIR64__(v151, v35);
            uint64_t v325 = *v322;
            uint64_t v372 = (uint64_t)&v361[v364 + 3 + v26];
            uint64_t v373 = v35;
            uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v325, (uint64_t)&v372, v321, 0, &v365);
            if (result) {
              goto LABEL_322;
            }
            uint64_t v326 = a7;
            int v17 = v361;
            unint64_t v327 = v362;
            a1 = v360;
            do
            {
              while (1)
              {
                __int32 v328 = v321->i32[0];
                uint64_t v321 = (int32x4_t *)((char *)v321 + 4);
                int v329 = v22 + v328;
                if (v19 >= 0x40) {
                  break;
                }
                v326->i32[0] = ((unint64_t)v326->u32[0] << v19) | v329 & ~(-1 << v19);
                uint64_t v326 = (int8x16_t *)((char *)v326 + 4);
                if (!--v327) {
                  goto LABEL_320;
                }
              }
              v326->i32[0] = v329;
              uint64_t v326 = (int8x16_t *)((char *)v326 + 4);
              --v327;
            }
            while (v327);
            goto LABEL_320;
          }
          unsigned int v338 = v37;
          int v345 = v38;
          if ((v354 & 0x8000000000000000) != 0) {
LABEL_325:
          }
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          unint64_t v146 = (unint64_t)v41;
          unint64_t v147 = v145 - v40;
          uint64_t v148 = 2 * v147;
          if (2 * v147 <= v354) {
            uint64_t v148 = v354;
          }
          if (v147 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v149 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v149 = v148;
          }
          size_t v335 = v149;
          unint64_t v332 = (char *)operator new(v149);
          uint64_t v330 = &v332[v146];
          bzero(&v332[v146], v144);
          if (v39 == (char *)v40)
          {
            uint64_t v150 = v360;
            unsigned int v151 = v362;
            unsigned int v35 = v31 - 2;
            int v38 = v345;
            BOOL v34 = v19 == 1;
            unsigned int v37 = v338;
            char v153 = v332;
            size_t v152 = v335;
            uint64_t v174 = v330;
            goto LABEL_305;
          }
          if (v146 < 8)
          {
            uint64_t v150 = v360;
            unsigned int v151 = v362;
            unsigned int v35 = v31 - 2;
            int v38 = v345;
            BOOL v34 = v19 == 1;
            unsigned int v37 = v338;
            char v153 = v332;
            size_t v152 = v335;
            unint64_t v154 = v330;
            goto LABEL_302;
          }
          unint64_t v185 = v146;
          char v153 = v332;
          size_t v152 = v335;
          uint64_t v150 = v360;
          unsigned int v151 = v362;
          unsigned int v35 = v31 - 2;
          int v38 = v345;
          BOOL v34 = v19 == 1;
          unsigned int v37 = v338;
          unint64_t v154 = v330;
          if ((unint64_t)(v40 - (void)v332) < 0x20) {
            goto LABEL_302;
          }
          if (v185 >= 0x20)
          {
            unint64_t v186 = v185 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v227 = &v332[v185 - 16];
            unsigned int v228 = v39 - 16;
            unint64_t v229 = v185 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v230 = *(_OWORD *)v228;
              *((_OWORD *)v227 - 1) = *((_OWORD *)v228 - 1);
              *(_OWORD *)uint64_t v227 = v230;
              v227 -= 32;
              v228 -= 32;
              v229 -= 32;
            }
            while (v229);
            if (v185 == v186) {
              goto LABEL_304;
            }
            if ((v185 & 0x18) == 0)
            {
              unint64_t v154 = &v330[-v186];
              v39 -= v186;
LABEL_302:
              unsigned int v319 = v154 - 1;
              do
              {
                char v320 = *--v39;
                *v319-- = v320;
              }
              while (v39 != (char *)v40);
LABEL_304:
              uint64_t v39 = (char *)v40;
              uint64_t v174 = v153;
LABEL_305:
              *uint64_t v150 = (uint64_t)v174;
              v150[1] = (uint64_t)&v153[v354];
              v150[2] = (uint64_t)&v153[v152];
              if (v39)
              {
                operator delete(v39);
                unsigned int v37 = v338;
                BOOL v34 = v19 == 1;
                int v38 = v345;
                unsigned int v35 = v31 - 2;
              }
              goto LABEL_307;
            }
          }
          else
          {
            unint64_t v186 = 0;
          }
          unint64_t v154 = &v330[-(v185 & 0xFFFFFFFFFFFFFFF8)];
          int v231 = &v39[-v186 - v40 - 8 + (void)v332];
          int v232 = &v39[-v186 - 8];
          unint64_t v233 = v186 - (v185 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v234 = *(void *)v232;
            v232 -= 8;
            *(void *)int v231 = v234;
            v231 -= 8;
            v233 += 8;
          }
          while (v233);
          v39 -= v185 & 0xFFFFFFFFFFFFFFF8;
          if (v185 == (v185 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_304;
          }
          goto LABEL_302;
        case 2u:
          uint64_t v100 = (char *)*a1;
          uint64_t v99 = (char *)a1[1];
          uint64_t v101 = &v99[-*a1];
          size_t v102 = __sz - (void)v101;
          if (__sz <= (unint64_t)v101)
          {
            unint64_t v108 = v362;
            if (__sz < (unint64_t)v101) {
              a1[1] = (uint64_t)&v100[__sz];
            }
LABEL_233:
            uint64_t v237 = (uint64_t *)*a1;
            uint64_t result = mgcl::muid::decompress((mgcl::muid *)&v361[v364 + 1 + v26], (const char *)v31, 0, 0, *a1, (unint64_t *)8, v108);
            if (result) {
              return result;
            }
            int v238 = a7;
            int v17 = v361;
            unint64_t v239 = v362;
            do
            {
              while (1)
              {
                uint64_t v240 = *v237++;
                int v241 = v240 + v22;
                if (v19 >= 0x40) {
                  break;
                }
                v238->i32[0] = ((unint64_t)v238->u32[0] << v19) | v241 & ~(-1 << v19);
                int v238 = (int8x16_t *)((char *)v238 + 4);
                if (!--v239) {
                  goto LABEL_238;
                }
              }
              v238->i32[0] = v241;
              int v238 = (int8x16_t *)((char *)v238 + 4);
              --v239;
            }
            while (v239);
LABEL_238:
            uint64_t v16 = v364 + v31 + v26 + 1;
            a1 = v360;
            goto LABEL_8;
          }
          uint64_t v103 = a1[2];
          if (v103 - (uint64_t)v99 >= v102)
          {
            bzero((void *)a1[1], __sz - (void)v101);
            a1[1] = (uint64_t)&v99[v102];
            unint64_t v108 = v362;
            goto LABEL_233;
          }
          unint64_t v352 = (unint64_t)&v99[-*a1];
          if ((__sz & 0x8000000000000000) != 0) {
            goto LABEL_325;
          }
          unint64_t v104 = v103 - (void)v100;
          uint64_t v105 = 2 * v104;
          if (2 * v104 <= __sz) {
            uint64_t v105 = __sz;
          }
          if (v104 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v106 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v106 = v105;
          }
          unint64_t v343 = (char *)operator new(v106);
          int v340 = &v343[v352];
          bzero(&v343[v352], v102);
          size_t v107 = v106;
          if (v99 == v100)
          {
            a1 = v360;
            unint64_t v108 = v362;
            unsigned int v165 = &v343[v352];
            long long v109 = v343;
            goto LABEL_231;
          }
          if (v352 < 8)
          {
            a1 = v360;
            unint64_t v108 = v362;
            long long v110 = &v343[v352];
            long long v109 = v343;
            goto LABEL_228;
          }
          long long v110 = &v343[v352];
          long long v109 = v343;
          a1 = v360;
          unint64_t v108 = v362;
          if ((unint64_t)(v100 - v343) < 0x20) {
            goto LABEL_228;
          }
          if (v352 >= 0x20)
          {
            unint64_t v167 = v352 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v195 = &v343[v352 - 16];
            uint64_t v196 = v99 - 16;
            unint64_t v197 = v352 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v198 = *(_OWORD *)v196;
              *((_OWORD *)v195 - 1) = *((_OWORD *)v196 - 1);
              *(_OWORD *)unint64_t v195 = v198;
              v195 -= 32;
              v196 -= 32;
              v197 -= 32;
            }
            while (v197);
            if (v352 == v167) {
              goto LABEL_230;
            }
            if ((v352 & 0x18) == 0)
            {
              long long v110 = &v340[-v167];
              v99 -= v167;
LABEL_228:
              uint64_t v235 = v110 - 1;
              do
              {
                char v236 = *--v99;
                *v235-- = v236;
              }
              while (v99 != v100);
LABEL_230:
              uint64_t v99 = v100;
              unsigned int v165 = v109;
LABEL_231:
              *a1 = (uint64_t)v165;
              a1[1] = (uint64_t)&v109[__sz];
              a1[2] = (uint64_t)&v109[v107];
              if (v99) {
                operator delete(v99);
              }
              goto LABEL_233;
            }
          }
          else
          {
            unint64_t v167 = 0;
          }
          long long v110 = &v340[-(v352 & 0xFFFFFFFFFFFFFFF8)];
          unint64_t v199 = &v343[&v99[-v167] - v100 - 8];
          unsigned int v200 = &v99[-v167 - 8];
          unint64_t v201 = v167 - (v352 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v202 = *(void *)v200;
            v200 -= 8;
            *(void *)unint64_t v199 = v202;
            v199 -= 8;
            v201 += 8;
          }
          while (v201);
          v99 -= v352 & 0xFFFFFFFFFFFFFFF8;
          if (v352 == (v352 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_230;
          }
          goto LABEL_228;
        case 3u:
          unint64_t v79 = (char *)*a1;
          unint64_t v80 = (char *)a1[1];
          if (v80 != (char *)*a1)
          {
            a1[1] = (uint64_t)v79;
            unint64_t v80 = v79;
          }
          if (a1[2] - (uint64_t)v79 >= __sz) {
            goto LABEL_67;
          }
          if ((__sz & 0x8000000000000000) != 0) {
            goto LABEL_325;
          }
          unint64_t v81 = operator new(__sz);
          unint64_t v82 = v80 - v79;
          unint64_t v83 = &v81[v80 - v79];
          unint64_t v84 = v83;
          a1 = v360;
          int v17 = v361;
          if (v80 == v79) {
            goto LABEL_65;
          }
          unint64_t v84 = v81;
          if (v82 < 8 || (unint64_t)(v79 - v81) < 0x20)
          {
            uint64_t v85 = v80;
            uint64_t v86 = &v81[v80 - v79];
            goto LABEL_63;
          }
          if (v82 >= 0x20)
          {
            unint64_t v166 = v82 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v175 = &v81[v82 - 16];
            unsigned int v176 = (long long *)(v80 - 16);
            unint64_t v177 = v82 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v178 = *v176;
              *(v175 - 1) = *(v176 - 1);
              *unint64_t v175 = v178;
              v175 -= 2;
              v176 -= 2;
              v177 -= 32;
            }
            while (v177);
            if (v82 == v166)
            {
LABEL_65:
              *int v360 = (uint64_t)v84;
              v360[1] = (uint64_t)v83;
              v360[2] = (uint64_t)&v81[__sz];
              if (v79) {
                operator delete(v79);
              }
LABEL_67:
              uint64_t v89 = 0;
              uint64_t v90 = v364 + v26 + 1;
              size_t v12 = v357;
              do
              {
                while (1)
                {
                  char v91 = 0;
                  unint64_t v92 = 0;
                  uint64_t v93 = 0;
                  uint64_t v94 = v90;
                  uint64_t v95 = &v17[v90];
                  do
                  {
                    int v96 = (char)v95[v92];
                    v93 |= (unint64_t)(v95[v92] & 0x7F) << v91;
                    unint64_t v97 = v92 + 1;
                    if (v92 > 8) {
                      break;
                    }
                    v91 += 7;
                    ++v92;
                  }
                  while (v96 < 0);
                  __int32 v98 = v93 + v22;
                  if (v19 >= 0x40) {
                    break;
                  }
                  a7->i32[v89] = ((unint64_t)a7->u32[v89] << v19) | v98 & ~(-1 << v19);
                  uint64_t v90 = v94 + v97;
                  if (++v89 == v362) {
                    goto LABEL_74;
                  }
                }
                a7->i32[v89] = v98;
                uint64_t v90 = v94 + v97;
                ++v89;
              }
              while (v89 != v362);
LABEL_74:
              uint64_t v16 = v94 + v97;
              goto LABEL_9;
            }
            if ((v82 & 0x18) == 0)
            {
              uint64_t v86 = &v83[-v166];
              uint64_t v85 = &v80[-v166];
LABEL_63:
              unint64_t v87 = v86 - 1;
              do
              {
                char v88 = *--v85;
                *v87-- = v88;
              }
              while (v85 != v79);
              goto LABEL_65;
            }
          }
          else
          {
            unint64_t v166 = 0;
          }
          uint64_t v85 = &v80[-(v82 & 0xFFFFFFFFFFFFFFF8)];
          uint64_t v86 = &v83[-(v82 & 0xFFFFFFFFFFFFFFF8)];
          uint64_t v179 = &v81[&v80[-v166] - v79 - 8];
          char v180 = (uint64_t *)&v80[-v166 - 8];
          unint64_t v181 = v166 - (v82 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v182 = *v180--;
            *v179-- = v182;
            v181 += 8;
          }
          while (v181);
          if (v82 != (v82 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_63;
          }
          goto LABEL_65;
        case 4u:
          operator new();
        default:
          return 3;
      }
    }
    uint64_t v53 = v359 - 8 * v16;
    do
    {
      uint64_t v54 = v24;
      uint64_t v55 = v53;
      int v56 = (char)v23[v21];
      v22 |= (unint64_t)(v23[v21] & 0x7F) << v20;
      if (v21 > 8) {
        break;
      }
      ++v21;
      v20 += 7;
      ++v24;
      v53 -= 8;
    }
    while (v56 < 0);
    char v57 = 0;
    unint64_t v58 = 0;
    unint64_t v59 = 0;
    uint64_t v60 = &v17[v16];
    do
    {
      int v61 = (char)v60[v54 + 1];
      v59 |= (unint64_t)(v60[++v54] & 0x7F) << v57;
      if (v58 > 8) {
        break;
      }
      ++v58;
      v57 += 7;
      v55 -= 8;
    }
    while (v61 < 0);
    switch(v17[v16])
    {
      case 1u:
        if (!a1[3]) {
          operator new();
        }
        unsigned int v62 = v59 - 2;
        if (v59 < 2) {
          return 3;
        }
        uint64_t v63 = &v17[v16 + v54];
        unsigned int v64 = v63[1];
        int v65 = v63[2];
        uint64_t v67 = *a1;
        uint64_t v66 = (char *)a1[1];
        unint64_t v68 = (unint64_t)&v66[-*a1];
        unint64_t v69 = (unint64_t)a1;
        size_t v70 = v362 - v68;
        if (v362 > v68)
        {
          uint64_t v71 = *(void *)(v69 + 16);
          if (v71 - (uint64_t)v66 >= v70)
          {
            unint64_t v155 = &v66[v70];
            unint64_t v156 = v66;
            int v157 = v65;
            unsigned int v158 = v64;
            bzero(v156, v362 - v68);
            unsigned int v62 = v59 - 2;
            unsigned int v64 = v158;
            int v65 = v157;
            *(void *)(v69 + 8) = v155;
            char v76 = (uint64_t *)v69;
            LODWORD(v69) = v362;
            goto LABEL_257;
          }
          unsigned int v342 = v64;
          int v351 = v65;
          if ((v362 & 0x8000000000000000) != 0) {
            goto LABEL_326;
          }
          unint64_t v72 = v71 - v67;
          uint64_t v73 = 2 * v72;
          if (2 * v72 <= v362) {
            uint64_t v73 = v362;
          }
          if (v72 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v74 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v74 = v73;
          }
          unint64_t v337 = (char *)operator new(v74);
          unsigned int v334 = &v337[v68];
          bzero(&v337[v68], v70);
          size_t v75 = v74;
          if (v66 == (char *)v67)
          {
            char v76 = v360;
            unint64_t v69 = v362;
            int v65 = v351;
            unsigned int v64 = v342;
            uint64_t v169 = &v337[v68];
            int v77 = v337;
            goto LABEL_255;
          }
          if (v68 < 8)
          {
            char v76 = v360;
            unint64_t v69 = v362;
            int v65 = v351;
            unsigned int v64 = v342;
            uint64_t v78 = &v337[v68];
            int v77 = v337;
            goto LABEL_252;
          }
          uint64_t v78 = &v337[v68];
          int v77 = v337;
          char v76 = v360;
          unint64_t v69 = v362;
          int v65 = v351;
          unsigned int v64 = v342;
          if ((unint64_t)(v67 - (void)v337) >= 0x20)
          {
            if (v68 < 0x20)
            {
              unint64_t v173 = 0;
              goto LABEL_205;
            }
            unint64_t v173 = v68 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v211 = &v337[v68 - 16];
            char v212 = v66 - 16;
            unint64_t v213 = v68 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v214 = *(_OWORD *)v212;
              *((_OWORD *)v211 - 1) = *((_OWORD *)v212 - 1);
              *(_OWORD *)uint64_t v211 = v214;
              v211 -= 32;
              v212 -= 32;
              v213 -= 32;
            }
            while (v213);
            if (v68 == v173) {
              goto LABEL_254;
            }
            if ((v68 & 0x18) != 0)
            {
LABEL_205:
              uint64_t v78 = &v334[-(v68 & 0xFFFFFFFFFFFFFFF8)];
              uint64_t v215 = &v66[-v173 - v67 - 8 + (void)v337];
              char v216 = &v66[-v173 - 8];
              unint64_t v217 = v173 - (v68 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v218 = *(void *)v216;
                v216 -= 8;
                *(void *)uint64_t v215 = v218;
                v215 -= 8;
                v217 += 8;
              }
              while (v217);
              v66 -= v68 & 0xFFFFFFFFFFFFFFF8;
              if (v68 == (v68 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_254;
              }
              goto LABEL_252;
            }
            uint64_t v78 = &v334[-v173];
            v66 -= v173;
          }
LABEL_252:
          uint64_t v248 = v78 - 1;
          do
          {
            char v249 = *--v66;
            *v248-- = v249;
          }
          while (v66 != (char *)v67);
LABEL_254:
          uint64_t v66 = (char *)v67;
          uint64_t v169 = v77;
LABEL_255:
          unsigned int v62 = v59 - 2;
          *char v76 = (uint64_t)v169;
          v76[1] = (uint64_t)&v77[v69];
          v76[2] = (uint64_t)&v77[v75];
          if (v66)
          {
            operator delete(v66);
            unsigned int v62 = v59 - 2;
            unsigned int v64 = v342;
            int v65 = v351;
          }
          goto LABEL_257;
        }
        char v76 = (uint64_t *)v69;
        LODWORD(v69) = v362;
        if (v362 < v68) {
          v76[1] = v67 + v362;
        }
LABEL_257:
        unsigned int v250 = (unsigned __int8 *)*v76;
        unint64_t v251 = *(uint64_t **)v76[3];
        LODWORD(v365) = 0;
        BYTE4(v365) = a4;
        BYTE5(v365) = a5;
        WORD3(v365) = 0;
        uint64_t v366 = 1;
        __int16 v367 = 0;
        char v368 = 1;
        int v369 = 0;
        if (v64 >= 4) {
          char v252 = 1;
        }
        else {
          char v252 = v64;
        }
        char v370 = v252;
        if (v65 == 2) {
          char v253 = 4;
        }
        else {
          char v253 = 1;
        }
        if (!v65) {
          char v253 = 0;
        }
        char v371 = v253;
        *((void *)&v365 + 1) = __PAIR64__(v69, v62);
        uint64_t v254 = *v251;
        uint64_t v372 = (uint64_t)&v361[v364 + 3 + v54];
        uint64_t v373 = v62;
        uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v254, (uint64_t)&v372, (uint64_t)v250, 0, &v365);
        size_t v12 = v357;
        if (!result)
        {
          uint64_t v255 = a7;
          int v17 = v361;
          unint64_t v256 = v362;
          do
          {
            unsigned int v257 = *v250++;
            if (v22 + v257) {
              v255->i32[0] = -v255->i32[0];
            }
            uint64_t v255 = (int8x16_t *)((char *)v255 + 4);
            --v256;
          }
          while (v256);
          uint64_t v16 = v364 + v59 + v54 + 1;
          a1 = v360;
          goto LABEL_9;
        }
LABEL_322:
        if ((result - 1) >= 4) {
          return 5;
        }
        return result;
      case 2u:
        uint64_t v131 = *a1;
        unint64_t v130 = (char *)a1[1];
        unint64_t v132 = (unint64_t)&v130[-*a1];
        uint64_t v133 = a1;
        size_t v134 = __sz - v132;
        if (__sz > v132)
        {
          uint64_t v135 = v133[2];
          if (v135 - (uint64_t)v130 >= v134)
          {
            bzero(v130, __sz - v132);
            v133[1] = (uint64_t)&v130[v134];
            unint64_t v140 = v133;
            unint64_t v141 = v362;
            goto LABEL_245;
          }
          if ((__sz & 0x8000000000000000) != 0) {
LABEL_326:
          }
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          unint64_t v136 = v135 - v131;
          uint64_t v137 = 2 * v136;
          if (2 * v136 <= __sz) {
            uint64_t v137 = __sz;
          }
          if (v136 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v138 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v138 = v137;
          }
          uint64_t v353 = (char *)operator new(v138);
          uint64_t v344 = &v353[v132];
          bzero(&v353[v132], v134);
          size_t v139 = v138;
          if (v130 == (char *)v131)
          {
            unint64_t v140 = v360;
            unint64_t v141 = v362;
            int v142 = v353;
            uint64_t v168 = &v353[v132];
          }
          else
          {
            if (v132 < 8)
            {
              unint64_t v140 = v360;
              unint64_t v141 = v362;
              int v142 = v353;
              unint64_t v143 = &v353[v132];
              goto LABEL_240;
            }
            int v142 = v353;
            unint64_t v140 = v360;
            unint64_t v141 = v362;
            unint64_t v143 = &v353[v132];
            if ((unint64_t)(v131 - (void)v353) < 0x20) {
              goto LABEL_240;
            }
            if (v132 >= 0x20)
            {
              unint64_t v171 = v132 & 0xFFFFFFFFFFFFFFE0;
              unint64_t v203 = &v353[v132 - 16];
              unint64_t v204 = v130 - 16;
              unint64_t v205 = v132 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v206 = *(_OWORD *)v204;
                *((_OWORD *)v203 - 1) = *((_OWORD *)v204 - 1);
                *(_OWORD *)unint64_t v203 = v206;
                v203 -= 32;
                v204 -= 32;
                v205 -= 32;
              }
              while (v205);
              if (v132 != v171)
              {
                if ((v132 & 0x18) == 0)
                {
                  unint64_t v143 = &v344[-v171];
                  v130 -= v171;
                  goto LABEL_240;
                }
                goto LABEL_197;
              }
            }
            else
            {
              unint64_t v171 = 0;
LABEL_197:
              unint64_t v143 = &v344[-(v132 & 0xFFFFFFFFFFFFFFF8)];
              char v207 = &v130[-v171 - v131 - 8 + (void)v353];
              uint64_t v208 = &v130[-v171 - 8];
              unint64_t v209 = v171 - (v132 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v210 = *(void *)v208;
                v208 -= 8;
                *(void *)char v207 = v210;
                v207 -= 8;
                v209 += 8;
              }
              while (v209);
              v130 -= v132 & 0xFFFFFFFFFFFFFFF8;
              if (v132 != (v132 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_240:
                unsigned int v242 = v143 - 1;
                do
                {
                  char v243 = *--v130;
                  *v242-- = v243;
                }
                while (v130 != (char *)v131);
              }
            }
            unint64_t v130 = (char *)v131;
            uint64_t v168 = v142;
          }
          *unint64_t v140 = (uint64_t)v168;
          v140[1] = (uint64_t)&v142[__sz];
          v140[2] = (uint64_t)&v142[v139];
          if (v130) {
            operator delete(v130);
          }
          goto LABEL_245;
        }
        unint64_t v140 = v133;
        unint64_t v141 = v362;
        if (__sz < v132) {
          v140[1] = v131 + __sz;
        }
LABEL_245:
        uint64_t v244 = (uint64_t *)*v140;
        uint64_t result = mgcl::muid::decompress((mgcl::muid *)&v361[v364 + 1 + v54], (const char *)v59, 0, 0, *v140, (unint64_t *)8, v141);
        if (result) {
          return result;
        }
        unint64_t v245 = a7;
        int v17 = v361;
        unint64_t v246 = v362;
        size_t v12 = v357;
        uint64_t v18 = v363;
        do
        {
          uint64_t v247 = *v244++;
          if (v247 != -(uint64_t)v22) {
            v245->i32[0] = -v245->i32[0];
          }
          unint64_t v245 = (int8x16_t *)((char *)v245 + 4);
          --v246;
        }
        while (v246);
        uint64_t v16 = v364 + v59 + v54 + 1;
        a1 = v360;
LABEL_10:
        uint64_t v15 = v18 + 1;
        if (v15 == v12) {
          return 0;
        }
        continue;
      case 3u:
        uint64_t v111 = (char *)*a1;
        uint64_t v112 = (char *)a1[1];
        if (v112 != (char *)*a1)
        {
          a1[1] = (uint64_t)v111;
          uint64_t v112 = v111;
        }
        if (a1[2] - (uint64_t)v111 >= __sz) {
          goto LABEL_99;
        }
        if ((__sz & 0x8000000000000000) != 0) {
          goto LABEL_326;
        }
        uint64_t v113 = operator new(__sz);
        unint64_t v114 = v112 - v111;
        uint64_t v115 = &v113[v112 - v111];
        uint64_t v116 = v115;
        a1 = v360;
        int v17 = v361;
        size_t v12 = v357;
        if (v112 == v111) {
          goto LABEL_97;
        }
        uint64_t v116 = v113;
        if (v114 < 8 || (unint64_t)(v111 - v113) < 0x20)
        {
          uint64_t v117 = v112;
          uint64_t v118 = &v113[v112 - v111];
          goto LABEL_95;
        }
        if (v114 >= 0x20)
        {
          unint64_t v170 = v114 & 0xFFFFFFFFFFFFFFE0;
          unint64_t v187 = &v113[v114 - 16];
          unsigned int v188 = (long long *)(v112 - 16);
          unint64_t v189 = v114 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v190 = *v188;
            *(v187 - 1) = *(v188 - 1);
            *unint64_t v187 = v190;
            v187 -= 2;
            v188 -= 2;
            v189 -= 32;
          }
          while (v189);
          if (v114 == v170)
          {
LABEL_97:
            *int v360 = (uint64_t)v116;
            v360[1] = (uint64_t)v115;
            v360[2] = (uint64_t)&v113[__sz];
            if (v111) {
              operator delete(v111);
            }
LABEL_99:
            uint64_t v121 = 0;
            uint64_t v18 = v363;
            uint64_t v122 = v364 + v54 + 1;
            do
            {
              char v123 = 0;
              unint64_t v124 = 0;
              uint64_t v125 = 0;
              uint64_t v126 = v122;
              BOOL v127 = &v17[v122];
              do
              {
                int v128 = (char)v127[v124];
                v125 |= (unint64_t)(v127[v124] & 0x7F) << v123;
                unint64_t v129 = v124 + 1;
                if (v124 > 8) {
                  break;
                }
                v123 += 7;
                ++v124;
              }
              while (v128 < 0);
              if (v125 != -(uint64_t)v22) {
                a7->i32[v121] = -a7->i32[v121];
              }
              uint64_t v122 = v126 + v129;
              ++v121;
            }
            while (v121 != v362);
            uint64_t v16 = v126 + v129;
            goto LABEL_10;
          }
          if ((v114 & 0x18) == 0)
          {
            uint64_t v118 = &v115[-v170];
            uint64_t v117 = &v112[-v170];
LABEL_95:
            uint64_t v119 = v118 - 1;
            do
            {
              char v120 = *--v117;
              *v119-- = v120;
            }
            while (v117 != v111);
            goto LABEL_97;
          }
        }
        else
        {
          unint64_t v170 = 0;
        }
        uint64_t v117 = &v112[-(v114 & 0xFFFFFFFFFFFFFFF8)];
        uint64_t v118 = &v115[-(v114 & 0xFFFFFFFFFFFFFFF8)];
        unint64_t v191 = &v113[&v112[-v170] - v111 - 8];
        unint64_t v192 = (uint64_t *)&v112[-v170 - 8];
        unint64_t v193 = v170 - (v114 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v194 = *v192--;
          *v191-- = v194;
          v193 += 8;
        }
        while (v193);
        if (v114 != (v114 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_95;
        }
        goto LABEL_97;
      case 4u:
        operator new();
      default:
        return 3;
    }
  }
}

void sub_188FA1330(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v2, 0x20C4093837F09);
  MEMORY[0x18C11F580](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t gcl::polyline::DecoderImpl::decompressAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  AttributeInfo = *(unsigned __int8 **)a2;
  if (!*(void *)a2) {
    return 5;
  }
  uint64_t result = 5;
  if (a3)
  {
    uint64_t v10 = *(void *)(a2 + 8);
    if ((v10 & 0x8000000000000000) == 0)
    {
      if (a5)
      {
        long long v12 = *a5;
        long long v13 = a5[1];
        *(_WORD *)(a1 + 76) = *((_WORD *)a5 + 16);
        *(_OWORD *)(a1 + 60) = v13;
        *(_OWORD *)(a1 + 44) = v12;
      }
      else
      {
        AttributeInfo = (unsigned __int8 *)gcl::polyline::DecoderImpl::getAttributeInfo((uint64_t)AttributeInfo, v10, a1 + 44);
        uint64_t result = 3;
        if (!AttributeInfo || v10 < 0) {
          return result;
        }
      }
      uint64_t v14 = *(unsigned int *)(a1 + 52);
      uint64_t v15 = *(unsigned __int8 **)a2;
      unint64_t v16 = *(void *)a2 + v14;
      if (*(void *)a2) {
        uint64_t v17 = *(void *)a2 + v14;
      }
      else {
        uint64_t v17 = *(unsigned int *)(a1 + 52);
      }
      uint64_t result = 3;
      uint64_t v18 = *(void *)(a2 + 8) - v14;
      *(void *)a2 = v17;
      *(void *)(a2 + 8) = v18;
      if (v18 >= 0
        && v15
        && &AttributeInfo[v10] >= v15
        && (unint64_t)AttributeInfo <= v16
        && (uint64_t)(v16 - (void)AttributeInfo) >= 0)
      {
        if (*(unsigned char *)(a1 + 48) || *(unsigned __int8 *)(a1 + 49) - 1 > 1)
        {
          return 4;
        }
        else if (*(unsigned __int8 *)(a1 + 77) - 1 >= 4 {
               && (*(unsigned __int8 *)(a1 + 76) | 2) != 2
        }
               && *(unsigned char *)(a1 + 70) == 1
               && (a4 || !*(unsigned char *)(a1 + 69)))
        {
          return gcl::polyline::DecoderImpl::decodeAttributes(a1, AttributeInfo, v16 - (void)AttributeInfo, a3, a4);
        }
      }
    }
  }
  return result;
}

uint64_t gcl::polyline::DecoderImpl::decodeAttributes(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __b[3] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 48) || *(unsigned char *)(a1 + 49) != 1)
  {
    LODWORD(v7) = a3 & ~(a3 >> 63);
  }
  else
  {
    BOOL v57 = a3 < 4;
    a3 -= 4;
    if (v57) {
      return 3;
    }
    if (a2 == (unsigned __int8 *)-4) {
      return 3;
    }
    unint64_t v7 = *(unsigned int *)a2;
    if (a3 < v7) {
      return 3;
    }
    a2 += 4;
  }
  if (a3 >= v7) {
    char v9 = a2;
  }
  else {
    char v9 = 0;
  }
  if (a3 >= v7) {
    unint64_t v10 = v7;
  }
  else {
    unint64_t v10 = 0;
  }
  *(_DWORD *)(a1 + 128) = v10;
  *(void *)(a1 + 136) = v9;
  *(void *)&long long v11 = 0xFFFF000000000000;
  *((void *)&v11 + 1) = 0xFFFF000000000000;
  *(_OWORD *)(a1 + 152) = v11;
  *(void *)(a1 + 168) = 16;
  if (!v10)
  {
    int v12 = -16777216;
    goto LABEL_20;
  }
  int v12 = *v9 << 24;
  *(_DWORD *)(a1 + 160) = v12;
  if (v10 == 1)
  {
LABEL_20:
    int v13 = v12 | 0xFF0000;
    goto LABEL_21;
  }
  int v13 = v12 | (v9[1] << 16);
  *(_DWORD *)(a1 + 160) = v13;
  if (v10 <= 2)
  {
LABEL_21:
    int v14 = v13 | 0xFF00;
    goto LABEL_22;
  }
  int v14 = v13 | (v9[2] << 8);
  *(_DWORD *)(a1 + 160) = v14;
  if (v10 == 3)
  {
LABEL_22:
    int v15 = 255;
    goto LABEL_23;
  }
  int v15 = v9[3];
LABEL_23:
  unsigned int v16 = v15 | v14;
  *(_DWORD *)(a1 + 160) = v15 | v14;
  unint64_t v17 = 3;
  *(void *)(a1 + 144) = 3;
  memcpy((void *)(a1 + 176), &gcl::ArithmeticDecoder::probUpdateLutInterleaved, 0x400uLL);
  int v83 = *(unsigned __int8 *)(a1 + 69);
  if (v83 != 1)
  {
    unsigned int v20 = -65536;
    int v21 = 16;
    goto LABEL_49;
  }
  memset_pattern16(__b, &unk_18A643070, 4uLL);
  uint64_t v18 = *(unsigned int *)(a1 + 56);
  if ((int)v18 < 1)
  {
    unsigned int v20 = -65536;
    int v21 = 16;
    unint64_t v17 = 3;
    if (*(unsigned char *)(a1 + 77)) {
      return 5;
    }
    goto LABEL_52;
  }
  uint64_t v19 = 0;
  unsigned int v20 = -65536;
  int v21 = 16;
  unint64_t v17 = 3;
  do
  {
    if (v19)
    {
      uint64_t v28 = *(unsigned __int8 *)(v19 + a5 - 1);
      if (v20 < 0x40000001) {
        goto LABEL_42;
      }
      goto LABEL_26;
    }
    uint64_t v28 = 0;
    if (v20 < 0x40000001)
    {
      while (1)
      {
LABEL_42:
        v16 *= 2;
        *(_DWORD *)(a1 + 168) = --v21;
        if (v21) {
          goto LABEL_41;
        }
        *(void *)(a1 + 144) = v17 + 1;
        if (v17 + 1 >= v10)
        {
          int v30 = 65280;
          v17 += 2;
          *(void *)(a1 + 144) = v17;
          if (v17 >= v10)
          {
LABEL_47:
            int v29 = 255;
            goto LABEL_40;
          }
        }
        else
        {
          int v30 = v9[v17 + 1] << 8;
          v17 += 2;
          *(void *)(a1 + 144) = v17;
          if (v17 >= v10) {
            goto LABEL_47;
          }
        }
        int v29 = v9[v17];
LABEL_40:
        v16 |= v30 | v29;
        int v21 = 16;
        *(_DWORD *)(a1 + 168) = 16;
LABEL_41:
        unsigned int v22 = 2 * v20;
        BOOL v55 = v20 >= 0x20000001;
        v20 *= 2;
        if (v55) {
          goto LABEL_27;
        }
      }
    }
LABEL_26:
    unsigned int v22 = v20;
LABEL_27:
    unsigned int v23 = *((unsigned __int16 *)__b + v28);
    unsigned int v24 = (HIWORD(v22) * v23) & 0xFFFF0000;
    unsigned int v25 = v22 - v24;
    BOOL v26 = v16 >= v24;
    *((_WORD *)__b + v28) = *(_WORD *)(a1 + 2 * ((v23 >> 7) & 0x1FE | v26) + 176) + v23;
    if (v16 < v24) {
      unsigned int v20 = v24;
    }
    else {
      unsigned int v20 = v25;
    }
    if (v16 < v24) {
      unsigned int v27 = 0;
    }
    else {
      unsigned int v27 = v24;
    }
    v16 -= v27;
    *(_DWORD *)(a1 + 156) = v20;
    *(_DWORD *)(a1 + 160) = v16;
    *(unsigned char *)(a5 + v19++) = v26;
  }
  while (v19 != v18);
LABEL_49:
  if (*(unsigned char *)(a1 + 77)) {
    return 5;
  }
LABEL_52:
  uint64_t v32 = *(unsigned int *)(a1 + 56);
  uint64_t v31 = *(unsigned int *)(a1 + 60);
  int v33 = *(unsigned __int8 *)(a1 + 76);
  if (v33 == 1)
  {
    memset(__b, 0, 24);
    if (!v31) {
      return 0;
    }
    uint64_t v81 = a5;
    if ((v31 & 0x80000000) != 0) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    size_t v70 = (unsigned __int16 *)operator new(2 * (int)v31);
    memset_pattern16(v70, &unk_18A643070, 2 * (int)v31);
    if ((int)v32 < 1)
    {
LABEL_163:
      operator delete(v70);
      return 0;
    }
    uint64_t v71 = 0;
    while (v83 && !*(unsigned char *)(v81 + v71))
    {
LABEL_141:
      if (++v71 == v32) {
        goto LABEL_163;
      }
    }
    uint64_t v72 = 0;
    while (v20 >= 0x40000001)
    {
      unsigned int v78 = v20;
LABEL_145:
      unsigned int v73 = v70[v72];
      unsigned int v74 = (HIWORD(v78) * v73) & 0xFFFF0000;
      unsigned int v75 = v78 - v74;
      BOOL v76 = v16 >= v74;
      v70[v72] = *(_WORD *)(a1 + 2 * ((v73 >> 7) & 0x1FE | v76) + 176) + v73;
      if (v16 < v74) {
        unsigned int v20 = v74;
      }
      else {
        unsigned int v20 = v75;
      }
      if (v16 < v74) {
        unsigned int v77 = 0;
      }
      else {
        unsigned int v77 = v74;
      }
      v16 -= v77;
      *(_DWORD *)(a1 + 156) = v20;
      *(_DWORD *)(a1 + 160) = v16;
      *(unsigned char *)(a4 + v71 * (int)v31 + v72++) = v76;
      if (v72 == v31) {
        goto LABEL_141;
      }
    }
    while (1)
    {
      v16 *= 2;
      *(_DWORD *)(a1 + 168) = --v21;
      if (v21) {
        goto LABEL_156;
      }
      *(void *)(a1 + 144) = v17 + 1;
      if (v17 + 1 >= v10)
      {
        int v80 = 65280;
        v17 += 2;
        *(void *)(a1 + 144) = v17;
        if (v17 >= v10)
        {
LABEL_162:
          int v79 = 255;
          goto LABEL_155;
        }
      }
      else
      {
        int v80 = v9[v17 + 1] << 8;
        v17 += 2;
        *(void *)(a1 + 144) = v17;
        if (v17 >= v10) {
          goto LABEL_162;
        }
      }
      int v79 = v9[v17];
LABEL_155:
      v16 |= v80 | v79;
      int v21 = 16;
      *(_DWORD *)(a1 + 168) = 16;
LABEL_156:
      unsigned int v78 = 2 * v20;
      BOOL v55 = v20 >= 0x20000001;
      v20 *= 2;
      if (v55) {
        goto LABEL_145;
      }
    }
  }
  if (v33 == 3)
  {
    memset_pattern16(v84, &unk_18A643070, 4uLL);
    int v34 = v83;
    __b[0] = 0;
    if ((int)v31 >= 1 && (int)v32 >= 1)
    {
      uint64_t v35 = 0;
      int v36 = -1;
      char v37 = 1;
      char v38 = 1;
      do
      {
        for (uint64_t i = 0; i != v32; ++i)
        {
          if (!v34 || *(unsigned char *)(a5 + i))
          {
            if ((v36 & 0x80000000) == 0) {
              goto LABEL_62;
            }
            if ((v38 & 1) == 0)
            {
              v37 ^= 1u;
              goto LABEL_86;
            }
            if (v20 >= 0x40000001)
            {
              unsigned int v41 = v20;
LABEL_70:
              unsigned int v42 = (v41 >> 1) & 0x7FFF0000;
              unsigned int v43 = v41 - v42;
              char v37 = v16 >= v42;
              if (v16 < v42) {
                unsigned int v20 = v42;
              }
              else {
                unsigned int v20 = v43;
              }
              if (v16 < v42) {
                unsigned int v42 = 0;
              }
              v16 -= v42;
              *(_DWORD *)(a1 + 156) = v20;
              *(_DWORD *)(a1 + 160) = v16;
LABEL_86:
              int v46 = 0;
              uint64_t v47 = v37 & 1;
              int v48 = *(_DWORD *)((unint64_t)__b & 0xFFFFFFFFFFFFFFFBLL | (4 * v47));
              unsigned int v49 = (unsigned __int16)v84[v47];
              int v50 = v48;
              if (v20 < 0x40000001) {
                goto LABEL_107;
              }
LABEL_87:
              unsigned int v51 = v20;
LABEL_88:
              unsigned int v52 = (HIWORD(v51) * (unsigned __int16)v49) & 0xFFFF0000;
              unsigned int v53 = v51 - v52;
              if (v16 < v52) {
                unsigned int v54 = 0;
              }
              else {
                unsigned int v54 = v52;
              }
              BOOL v55 = v16 >= v52;
              v16 -= v54;
              int v56 = v55;
              v49 += *(unsigned __int16 *)(a1 + 2 * ((v49 >> 7) & 0x1FE | v56) + 176);
              if (v55) {
                unsigned int v20 = v53;
              }
              else {
                unsigned int v20 = v52;
              }
              *(_DWORD *)(a1 + 156) = v20;
              *(_DWORD *)(a1 + 160) = v16;
              BOOL v57 = v55 && v50 < 31;
              if (!v57)
              {
                v84[v47] = v49;
                int v61 = 0;
                if (!v50)
                {
LABEL_114:
                  int v36 = v61 + v46;
                  int v62 = v36 >> v48;
                  if (v48 && !v62)
                  {
                    int v40 = -1;
                    goto LABEL_60;
                  }
                  if (v62 < 2)
                  {
                    char v38 = 0;
                  }
                  else
                  {
                    int v40 = 1;
LABEL_60:
                    char v38 = 0;
                    *(_DWORD *)((unint64_t)__b | (4 * v47)) = v40 + v48;
                  }
                  int v34 = v83;
LABEL_62:
                  *(unsigned char *)(a4 + v35 + i * v31) = v37 & 1;
                  --v36;
                  continue;
                }
                while (v20 >= 0x40000001)
                {
                  unsigned int v67 = v20;
LABEL_118:
                  unsigned int v63 = (v67 >> 1) & 0x7FFF0000;
                  unsigned int v64 = v67 - v63;
                  int v65 = v16 >= v63;
                  if (v16 < v63) {
                    unsigned int v20 = v63;
                  }
                  else {
                    unsigned int v20 = v64;
                  }
                  if (v16 < v63) {
                    unsigned int v66 = 0;
                  }
                  else {
                    unsigned int v66 = v63;
                  }
                  v16 -= v66;
                  *(_DWORD *)(a1 + 156) = v20;
                  *(_DWORD *)(a1 + 160) = v16;
                  v61 |= v65 << --v50;
                  if (!v50) {
                    goto LABEL_114;
                  }
                }
                while (2)
                {
                  v16 *= 2;
                  *(_DWORD *)(a1 + 168) = --v21;
                  if (v21) {
                    goto LABEL_129;
                  }
                  *(void *)(a1 + 144) = v17 + 1;
                  if (v17 + 1 >= v10)
                  {
                    int v69 = 65280;
                    v17 += 2;
                    *(void *)(a1 + 144) = v17;
                    if (v17 >= v10) {
                      goto LABEL_135;
                    }
                  }
                  else
                  {
                    int v69 = v9[v17 + 1] << 8;
                    v17 += 2;
                    *(void *)(a1 + 144) = v17;
                    if (v17 >= v10)
                    {
LABEL_135:
                      int v68 = 255;
LABEL_128:
                      v16 |= v69 | v68;
                      int v21 = 16;
                      *(_DWORD *)(a1 + 168) = 16;
LABEL_129:
                      unsigned int v67 = 2 * v20;
                      BOOL v55 = v20 >= 0x20000001;
                      v20 *= 2;
                      if (v55) {
                        goto LABEL_118;
                      }
                      continue;
                    }
                  }
                  break;
                }
                int v68 = v9[v17];
                goto LABEL_128;
              }
              int v58 = 1 << v50++;
              v46 |= v58;
              if (v20 >= 0x40000001) {
                goto LABEL_87;
              }
LABEL_107:
              while (2)
              {
                v16 *= 2;
                *(_DWORD *)(a1 + 168) = --v21;
                if (v21) {
                  goto LABEL_106;
                }
                *(void *)(a1 + 144) = v17 + 1;
                if (v17 + 1 >= v10)
                {
                  int v60 = 65280;
                  v17 += 2;
                  *(void *)(a1 + 144) = v17;
                  if (v17 >= v10) {
                    goto LABEL_112;
                  }
                }
                else
                {
                  int v60 = v9[v17 + 1] << 8;
                  v17 += 2;
                  *(void *)(a1 + 144) = v17;
                  if (v17 >= v10)
                  {
LABEL_112:
                    int v59 = 255;
LABEL_105:
                    v16 |= v60 | v59;
                    int v21 = 16;
                    *(_DWORD *)(a1 + 168) = 16;
LABEL_106:
                    unsigned int v51 = 2 * v20;
                    BOOL v55 = v20 >= 0x20000001;
                    v20 *= 2;
                    if (v55) {
                      goto LABEL_88;
                    }
                    continue;
                  }
                }
                break;
              }
              int v59 = v9[v17];
              goto LABEL_105;
            }
            while (2)
            {
              v16 *= 2;
              *(_DWORD *)(a1 + 168) = --v21;
              if (v21) {
                goto LABEL_78;
              }
              *(void *)(a1 + 144) = v17 + 1;
              if (v17 + 1 >= v10)
              {
                int v45 = 65280;
                v17 += 2;
                *(void *)(a1 + 144) = v17;
                if (v17 >= v10) {
                  goto LABEL_84;
                }
              }
              else
              {
                int v45 = v9[v17 + 1] << 8;
                v17 += 2;
                *(void *)(a1 + 144) = v17;
                if (v17 >= v10)
                {
LABEL_84:
                  int v44 = 255;
LABEL_77:
                  v16 |= v45 | v44;
                  int v21 = 16;
                  *(_DWORD *)(a1 + 168) = 16;
LABEL_78:
                  unsigned int v41 = 2 * v20;
                  BOOL v55 = v20 >= 0x20000001;
                  v20 *= 2;
                  if (v55) {
                    goto LABEL_70;
                  }
                  continue;
                }
              }
              break;
            }
            int v44 = v9[v17];
            goto LABEL_77;
          }
        }
        ++v35;
      }
      while (v35 != v31);
    }
  }
  return 0;
}

void sub_188FA1D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t GEORPSearchFeedbackContextReadFrom(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_sync_enter(v3);
  unint64_t AllFrom = GEORPSearchFeedbackContextReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_188FA2410(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPTdmFraudRequestInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 76);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 72)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int v11 = (vaddv_s16((int16x4_t)(*(void *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 84)), (uint16x4_t)0xFFFEFFFFFFFCFFFALL) & 0xFF01FF01FF01FF01))+ (*(unsigned char *)(a1 + 84) & 1)+ ((*(unsigned char *)(a1 + 84) & 8) != 0)+ ((*(unsigned char *)(a1 + 84) & 0x20) != 0));
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 > 3;
        char v15 = v14 & ~(_BYTE)v10 | v9;
        unsigned __int8 v16 = v14 | v10;
        char v51 = v15;
        char v52 = v16 | v15;
        if ((v16 | v8)) {
          unint64_t v17 = 0;
        }
        else {
          unint64_t v17 = a3;
        }
        char v53 = (v17 == 0) | v16;
        BOOL v54 = v16;
        uint64_t v18 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
        unsigned int v20 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v9;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v7;
        uint64_t v9 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v18) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v19)) {
      goto LABEL_83;
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v23 = 0;
    while (1)
    {
      uint64_t v24 = *v18;
      uint64_t v25 = *(void *)(v3 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(v3 + *v6)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(v3 + *v20) + v25);
      *(void *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0) {
        goto LABEL_24;
      }
      v21 += 7;
      if (v22++ >= 9)
      {
        unint64_t v23 = 0;
        int v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v19) = 1;
LABEL_24:
    int v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(unsigned char *)(v3 + *v19)) {
      unint64_t v23 = 0;
    }
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_83:
      int v50 = 1;
      goto LABEL_84;
    }
    unint64_t v31 = v23 >> 3;
    BOOL v32 = v54;
    if ((v53 & 1) == 0)
    {
      int v33 = v17;
      do
      {
        int v35 = *v33++;
        int v34 = v35;
        BOOL v32 = v35 != 0;
        if (v35) {
          BOOL v36 = v34 == v31;
        }
        else {
          BOOL v36 = 1;
        }
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32) {
          goto LABEL_66;
        }
        if ((*(unsigned char *)(a1 + 84) & 0x10) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 48;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_104;
        }
        char v45 = 8 * *(unsigned char *)(a1 + 84);
        goto LABEL_80;
      case 2:
        if (!v32) {
          goto LABEL_66;
        }
        if ((*(unsigned char *)(a1 + 84) & 0x40) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 64;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_104;
        }
        char v45 = 2 * *(unsigned char *)(a1 + 84);
        goto LABEL_80;
      case 3:
        if (!v32) {
          goto LABEL_66;
        }
        if ((*(unsigned char *)(a1 + 84) & 2) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 24;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_104;
        }
        char v45 = *(unsigned char *)(a1 + 84) << 6;
        goto LABEL_80;
      case 4:
        if (!v32) {
          goto LABEL_66;
        }
        if ((*(unsigned char *)(a1 + 84) & 4) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 32;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_104;
        }
        char v45 = 32 * *(unsigned char *)(a1 + 84);
        goto LABEL_80;
      case 5:
        if (!v32) {
          goto LABEL_66;
        }
        if ((*(unsigned char *)(a1 + 84) & 8) == 0)
        {
          uint64_t v37 = PBReaderReadString();
          uint64_t v38 = 40;
LABEL_59:
          unsigned int v42 = *(void **)(a1 + v38);
          *(void *)(a1 + v38) = v37;
          goto LABEL_60;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_104;
        }
        char v45 = 16 * *(unsigned char *)(a1 + 84);
        goto LABEL_80;
      case 6:
        if (!v32) {
          goto LABEL_66;
        }
        if ((*(unsigned char *)(a1 + 84) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_104;
          }
          char v45 = 4 * *(unsigned char *)(a1 + 84);
LABEL_80:
          v7 += v45 >> 7;
          goto LABEL_81;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_104;
        }
        unsigned int v43 = objc_alloc_init(GEORPTdmUserMapsStatus);
        if (GEORPTdmUserMapsStatusReadAllFrom((uint64_t)v43, (void *)v3))
        {
          PBReaderRecallMark();
          unsigned int v42 = *(void **)(a1 + 56);
          *(void *)(a1 + 56) = v43;
LABEL_60:

          --v7;
LABEL_81:
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_82:
          if (!(v52 & 1 | (v7 != 0))) {
            goto LABEL_83;
          }
          continue;
        }

LABEL_104:
        int v50 = 0;
        uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
LABEL_84:
        if (v51) {
LABEL_85:
        }
          *(unsigned char *)(a1 + 84) |= 1u;
        if (v54 || (v50 & 1) == 0)
        {
          *(unsigned char *)(a1 + 84) |= 0x10u;
          *(unsigned char *)(a1 + 84) |= 0x40u;
          *(unsigned char *)(a1 + 84) |= 2u;
          *(unsigned char *)(a1 + 84) |= 4u;
          *(unsigned char *)(a1 + 84) |= 8u;
          *(unsigned char *)(a1 + 84) |= 0x20u;
        }
        else if (v17)
        {
          while (1)
          {
            int v47 = *v17++;
            char v46 = 16;
            switch(v47)
            {
              case 0:
                goto LABEL_97;
              case 1:
                goto LABEL_95;
              case 2:
                char v46 = 64;
                goto LABEL_95;
              case 3:
                char v46 = 2;
                goto LABEL_95;
              case 4:
                char v46 = 4;
                goto LABEL_95;
              case 5:
                char v46 = 8;
                goto LABEL_95;
              case 6:
                char v46 = 32;
LABEL_95:
                *(unsigned char *)(a1 + 84) |= v46;
                break;
              default:
                continue;
            }
          }
        }
LABEL_97:
        if (v50) {
          unint64_t v3 = *(unsigned char *)(v3 + *v19) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v54)
        {
          int v48 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if (v51 & 1) == 0 || (*(unsigned char *)(a1 + 84))
        {
LABEL_66:
          char v44 = PBReaderSkipValueWithTag();
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          if ((v44 & 1) == 0)
          {
            int v50 = 0;
            goto LABEL_84;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v39 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int v40 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v39;
          }
          int v41 = PBUnknownFieldAdd();
          uint64_t v19 = (int *)MEMORY[0x1E4F940C8];
          if (!v41)
          {
            int v50 = 0;
            goto LABEL_85;
          }
        }
        goto LABEL_82;
    }
  }
}

BOOL GEORPSearchFeedbackIsValid(char *a1)
{
  [a1 position];
  [a1 length];
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v3 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v4 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)&a1[*MEMORY[0x1E4F940E8]] < *(void *)&a1[*MEMORY[0x1E4F940E0]])
  {
    unint64_t v5 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (a1[*v4]) {
        goto LABEL_30;
      }
      char v6 = 0;
      unsigned int v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *v2;
        uint64_t v10 = *(void *)&a1[v9];
        unint64_t v11 = v10 + 1;
        if (v10 == -1 || v11 > *(void *)&a1[*v3]) {
          break;
        }
        char v12 = *(unsigned char *)(*(void *)&a1[*v5] + v10);
        *(void *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0) {
          goto LABEL_12;
        }
        v6 += 7;
        if (v7++ >= 9)
        {
          unint64_t v8 = 0;
          int v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      int v14 = a1[*v4];
      if (a1[*v4]) {
        unint64_t v8 = 0;
      }
LABEL_14:
      int v15 = v8 & 7;
      if (v14 || v15 == 4) {
        goto LABEL_30;
      }
      if ((v8 >> 3) == 2) {
        break;
      }
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEORPSearchFeedbackContextIsValid(a1)) {
          goto LABEL_31;
        }
LABEL_27:
        PBReaderRecallMark();
        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        goto LABEL_31;
      }
LABEL_29:
      if (*(void *)&a1[*v2] >= *(void *)&a1[*v3]) {
        goto LABEL_30;
      }
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEORPSearchFeedbackCorrectionsIsValid(a1))
    {
LABEL_31:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_27;
  }
LABEL_30:
  BOOL v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_188FA2ECC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

double GEOCoordinateRegionMakeWithDistance(double a1)
{
  long double v2 = a1 * 0.0174532925;
  cos(v2 + v2);
  cos(v2 * 4.0);
  cos(v2 * 6.0);
  cos(v2);
  cos(v2 * 3.0);
  cos(v2 * 5.0);
  return a1;
}

void sub_188FA31A0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

void sub_188FA33A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t GEOPDCategorizedPhotosFilterReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 60))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDCategorizedPhotosFilterReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = [v8 position];
  *(_DWORD *)(a1 + 60) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDCategorizedPhotosFilterReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDCategorizedPhotosFilterReadAllFrom_initialTag;
  }
  uint64_t Specified = GEOPDCategorizedPhotosFilterReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_188FA3588(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDCategorizedPhotosFilterReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  char v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 60);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 56)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = ((*(unsigned __int8 *)(a1 + 80) >> 5) & 1)
      + ((*(unsigned __int8 *)(a1 + 80) >> 6) & 1)
      + ((*(unsigned __int8 *)(a1 + 80) >> 4) & 1);
  while (2)
  {
    uint64_t v12 = 1;
    uint64_t v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        BOOL v14 = v11 != 0;
        char v15 = v14 | v10;
        char v80 = v14 & ~(_BYTE)v10 | v7;
        char v82 = v14 | v10 | v80;
        if (((v14 | v10) | v8)) {
          unsigned __int8 v16 = 0;
        }
        else {
          unsigned __int8 v16 = a3;
        }
        char v83 = (v16 == 0) | v15;
        BOOL v17 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
        uint64_t v19 = (int *)MEMORY[0x1E4F940B8];
        char v81 = v14 | v10;
        break;
      default:
        ++v11;
LABEL_7:
        uint64_t v12 = v7;
LABEL_8:
        uint64_t v13 = v10;
LABEL_9:
        ++v9;
        uint64_t v7 = v12;
        uint64_t v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v17) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v18)) {
      goto LABEL_110;
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v22 = 0;
    while (1)
    {
      uint64_t v23 = *v17;
      uint64_t v24 = *(void *)(v3 + v23);
      unint64_t v25 = v24 + 1;
      if (v24 == -1 || v25 > *(void *)(v3 + *v6)) {
        break;
      }
      char v26 = *(unsigned char *)(*(void *)(v3 + *v19) + v24);
      *(void *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0) {
        goto LABEL_24;
      }
      v20 += 7;
      BOOL v27 = v21++ >= 9;
      if (v27)
      {
        unint64_t v22 = 0;
        int v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_26;
      }
    }
    *(unsigned char *)(v3 + *v18) = 1;
LABEL_24:
    int v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(unsigned char *)(v3 + *v18)) {
      unint64_t v22 = 0;
    }
LABEL_26:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_110:
      int v78 = 1;
LABEL_111:
      int v79 = &OBJC_IVAR___GEOXPCReply__error;
      goto LABEL_112;
    }
    unint64_t v30 = v22 >> 3;
    BOOL v31 = v15;
    if ((v83 & 1) == 0)
    {
      BOOL v32 = v16;
      do
      {
        int v34 = *v32++;
        int v33 = v34;
        BOOL v31 = v34 != 0;
        if (v34) {
          BOOL v35 = v33 == v30;
        }
        else {
          BOOL v35 = 1;
        }
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (v31 && (*(unsigned char *)(a1 + 80) & 0x20) == 0)
        {
          if (PBReaderPlaceMark())
          {
            -[GEOPDCategorizedPhotosFilter _reservePhotoSizeFilters:](a1, 1uLL);
            if (GEOPDPhotoSizeFilterValueReadAllFrom(*(void *)(a1 + 24) + 12 * *(void *)(a1 + 32), v3))
            {
              PBReaderRecallMark();
              ++*(void *)(a1 + 32);
              goto LABEL_108;
            }
          }
          goto LABEL_131;
        }
        char v68 = PBReaderSkipValueWithTag();
        char v15 = v81;
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
        if (v68) {
          goto LABEL_109;
        }
        goto LABEL_130;
      case 2:
        if (!v31) {
          goto LABEL_86;
        }
        if ((*(unsigned char *)(a1 + 80) & 0x40) == 0)
        {
          uint64_t v39 = PBReaderReadString();
          int v40 = *(void **)(a1 + 48);
          *(void *)(a1 + 48) = v39;

          --v9;
LABEL_108:
          char v15 = v81;
          uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
          goto LABEL_109;
        }
        if (PBReaderSkipValueWithTag())
        {
          v9 += *(unsigned __int8 *)(a1 + 80) << 25 >> 31;
          goto LABEL_108;
        }
LABEL_131:
        int v78 = 0;
        int v79 = &OBJC_IVAR___GEOXPCReply__error;
        char v15 = v81;
        uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
LABEL_112:
        if (v80) {
LABEL_113:
        }
          *(unsigned char *)(a1 + v79[691]) |= 0x10u;
        if (v15 & 1 | ((v78 & 1) == 0))
        {
          *(unsigned char *)(a1 + v79[691]) |= 0x20u;
          *(unsigned char *)(a1 + v79[691]) |= 0x40u;
          goto LABEL_124;
        }
        if (v16)
        {
          while (1)
          {
            int v75 = *v16++;
            int v74 = v75;
            if (v75 == 1) {
              break;
            }
            if (v74 == 2)
            {
              char v73 = 64;
LABEL_120:
              *(unsigned char *)(a1 + v79[691]) |= v73;
            }
            else if (!v74)
            {
              goto LABEL_124;
            }
          }
          char v73 = 32;
          goto LABEL_120;
        }
LABEL_124:
        if (v78)
        {
          uint64_t v3 = *(unsigned char *)(v3 + *v18) == 0;
          if ((v15 & 1) == 0) {
            return v3;
          }
LABEL_128:
          BOOL v76 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          uint64_t v3 = 0;
          if (v15) {
            goto LABEL_128;
          }
        }
        return v3;
      case 3:
        if ((v8 & 1) == 0) {
          goto LABEL_86;
        }
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v43 = 0;
        *(unsigned char *)(a1 + 80) |= 2u;
        while (2)
        {
          uint64_t v44 = *v17;
          uint64_t v45 = *(void *)(v3 + v44);
          unint64_t v46 = v45 + 1;
          if (v45 == -1 || v46 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v18) = 1;
          }
          else
          {
            char v47 = *(unsigned char *)(*(void *)(v3 + *v19) + v45);
            *(void *)(v3 + v44) = v46;
            v43 |= (unint64_t)(v47 & 0x7F) << v41;
            if (v47 < 0)
            {
              v41 += 7;
              BOOL v27 = v42++ >= 9;
              if (v27)
              {
                LODWORD(v43) = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v18)) {
          LODWORD(v43) = 0;
        }
LABEL_91:
        uint64_t v70 = 72;
        goto LABEL_96;
      case 4:
        if ((v8 & 1) == 0) {
          goto LABEL_86;
        }
        char v48 = 0;
        unsigned int v49 = 0;
        uint64_t v43 = 0;
        *(unsigned char *)(a1 + 80) |= 1u;
        while (2)
        {
          uint64_t v50 = *v17;
          uint64_t v51 = *(void *)(v3 + v50);
          unint64_t v52 = v51 + 1;
          if (v51 == -1 || v52 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v18) = 1;
          }
          else
          {
            char v53 = *(unsigned char *)(*(void *)(v3 + *v19) + v51);
            *(void *)(v3 + v50) = v52;
            v43 |= (unint64_t)(v53 & 0x7F) << v48;
            if (v53 < 0)
            {
              v48 += 7;
              BOOL v27 = v49++ >= 9;
              if (v27)
              {
                LODWORD(v43) = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v18)) {
          LODWORD(v43) = 0;
        }
LABEL_95:
        uint64_t v70 = 68;
LABEL_96:
        *(_DWORD *)(a1 + v70) = v43;
        goto LABEL_109;
      case 5:
        if ((v8 & 1) == 0) {
          goto LABEL_86;
        }
        char v54 = 0;
        unsigned int v55 = 0;
        uint64_t v56 = 0;
        *(unsigned char *)(a1 + 80) |= 8u;
        while (2)
        {
          uint64_t v57 = *v17;
          uint64_t v58 = *(void *)(v3 + v57);
          unint64_t v59 = v58 + 1;
          if (v58 == -1 || v59 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v18) = 1;
          }
          else
          {
            char v60 = *(unsigned char *)(*(void *)(v3 + *v19) + v58);
            *(void *)(v3 + v57) = v59;
            v56 |= (unint64_t)(v60 & 0x7F) << v54;
            if (v60 < 0)
            {
              v54 += 7;
              BOOL v27 = v55++ >= 9;
              if (v27)
              {
                uint64_t v56 = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v18)) {
          uint64_t v56 = 0;
        }
LABEL_100:
        BOOL v71 = v56 != 0;
        uint64_t v72 = 77;
        goto LABEL_105;
      case 6:
        if ((v8 & 1) == 0) {
          goto LABEL_86;
        }
        char v61 = 0;
        unsigned int v62 = 0;
        uint64_t v63 = 0;
        *(unsigned char *)(a1 + 80) |= 4u;
        while (2)
        {
          uint64_t v64 = *v17;
          uint64_t v65 = *(void *)(v3 + v64);
          unint64_t v66 = v65 + 1;
          if (v65 == -1 || v66 > *(void *)(v3 + *v6))
          {
            *(unsigned char *)(v3 + *v18) = 1;
          }
          else
          {
            char v67 = *(unsigned char *)(*(void *)(v3 + *v19) + v65);
            *(void *)(v3 + v64) = v66;
            v63 |= (unint64_t)(v67 & 0x7F) << v61;
            if (v67 < 0)
            {
              v61 += 7;
              BOOL v27 = v62++ >= 9;
              if (v27)
              {
                uint64_t v63 = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(v3 + *v18)) {
          uint64_t v63 = 0;
        }
LABEL_104:
        BOOL v71 = v63 != 0;
        uint64_t v72 = 76;
LABEL_105:
        *(unsigned char *)(a1 + v72) = v71;
        goto LABEL_109;
      default:
        if ((v80 & 1) == 0 || (*(unsigned char *)(a1 + 80) & 0x10) != 0)
        {
LABEL_86:
          char v69 = PBReaderSkipValueWithTag();
          uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
          char v15 = v81;
          if ((v69 & 1) == 0)
          {
LABEL_130:
            int v78 = 0;
            goto LABEL_111;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v36 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            uint64_t v37 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v36;
          }
          int v38 = PBUnknownFieldAdd();
          char v15 = v81;
          uint64_t v18 = (int *)MEMORY[0x1E4F940C8];
          if (!v38)
          {
            int v78 = 0;
            int v79 = &OBJC_IVAR___GEOXPCReply__error;
            goto LABEL_113;
          }
        }
LABEL_109:
        if (!(v82 & 1 | (v9 != 0))) {
          goto LABEL_110;
        }
        continue;
    }
  }
}

void sub_188FA4164(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t __GetSubscriptionSizeForOfflineLayer_block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v6 + 40);
  int v7 = [v4 bindInt64Parameter:"@subscription_pk" toValue:v5 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7) {
    return 0;
  }
  char v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(unsigned int *)(a1 + 72);
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  id v23 = *(id *)(v10 + 40);
  int v11 = [v8 bindIntParameter:"@layer" toValue:v9 inStatement:a2 error:&v23];
  objc_storeStrong((id *)(v10 + 40), v23);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *(void **)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
  id v22 = *(id *)(v14 + 40);
  int v15 = [v12 bindInt64Parameter:"@version" toValue:v13 inStatement:a2 error:&v22];
  objc_storeStrong((id *)(v14 + 40), v22);
  if (!v15) {
    return 0;
  }
  uint64_t v16 = sqlite3_step(a2);
  uint64_t v17 = 1;
  while (v16 == 100)
  {
    [*(id *)(a1 + 32) int64ForColumn:0 inStatment:a2];
    [*(id *)(a1 + 32) intForColumn:1 inStatment:a2];
    if (!(*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))()) {
      return v17;
    }
    uint64_t v16 = sqlite3_step(a2);
  }
  if (v16 != 101)
  {
    uint64_t v18 = *(void **)(a1 + 32);
    uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 8);
    id v21 = *(id *)(v19 + 40);
    [v18 reportSQLiteErrorCode:v16 method:@"step" error:&v21];
    objc_storeStrong((id *)(v19 + 40), v21);
    return 0;
  }
  return 1;
}

uint64_t __ListAllShiftEntries_block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = sqlite3_step(a2);
  uint64_t v5 = 1;
  while (v4 == 100)
  {
    [*(id *)(a1 + 32) int64ForColumn:0 inStatment:a2];
    [*(id *)(a1 + 32) doubleForColumn:1 inStatment:a2];
    double v7 = v6;
    [*(id *)(a1 + 32) doubleForColumn:2 inStatment:a2];
    double v9 = v8;
    [*(id *)(a1 + 32) doubleForColumn:3 inStatment:a2];
    if (!(*(unsigned int (**)(double, double, double))(*(void *)(a1 + 40) + 16))(v7, v9, v10)) {
      return v5;
    }
    uint64_t v4 = sqlite3_step(a2);
  }
  if (v4 == 101) {
    return 1;
  }
  int v11 = *(void **)(a1 + 32);
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v12 + 40);
  [v11 reportSQLiteErrorCode:v4 method:@"step" error:&obj];
  objc_storeStrong((id *)(v12 + 40), obj);
  return 0;
}

BOOL GEOBZ2Compress(char *a1, unint64_t a2, char **a3, void *a4)
{
  if (a2 <= 0x400000)
  {
    unsigned int v7 = a2;
    unint64_t v9 = (unint64_t)(float)((float)a2 * 1.01);
    double v10 = (char *)malloc_type_malloc(v9 + 604, 0x3E9104E2uLL);
    *a3 = v10;
    *(_DWORD *)double v10 = v7;
    unsigned int destLen = v9 + 600;
    int v11 = BZ2_bzBuffToBuffCompress(v10 + 4, &destLen, a1, v7, 1, 0, 0);
    BOOL v6 = v11 == 0;
    if (v11) {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "Bzip2 compress returned %d\n", v11);
    }
    *a4 = destLen + 4;
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "Refusing to compress with Bzip2 more than %d bytes\n", 0x400000);
    BOOL v6 = 0;
    *a3 = 0;
    *a4 = 0;
  }
  return v6;
}

void sub_188FA4F44(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FA5048(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void SearchFoundationLibrary()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  if (!SearchFoundationLibraryCore_frameworkLibrary)
  {
    v1[1] = MEMORY[0x1E4F143A8];
    v1[2] = 3221225472;
    v1[3] = __SearchFoundationLibraryCore_block_invoke;
    v1[4] = &__block_descriptor_40_e5_v8__0l;
    v1[5] = v1;
    long long v2 = xmmword_1E53F6CC8;
    uint64_t v3 = 0;
    SearchFoundationLibraryCore_frameworkLibrary = _sl_dlopen();
    os_log_t v0 = (void *)v1[0];
    if (SearchFoundationLibraryCore_frameworkLibrary)
    {
      if (!v1[0]) {
        return;
      }
    }
    else
    {
      os_log_t v0 = (void *)abort_report_np();
    }
    free(v0);
  }
}

id _geo_URLForDictionary(int a1, void *a2, unint64_t a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v44 = objc_alloc_init(MEMORY[0x1E4F29088]);
  switch(a1)
  {
    case 0:
    case 1:
      [v44 setHost:&stru_1ED51F370];
      [v44 setScheme:@"maps"];
      break;
    case 2:
      BOOL v6 = v44;
      [v44 setScheme:@"https"];
      unsigned int v7 = @"maps.apple.com";
      goto LABEL_6;
    case 3:
      BOOL v6 = v44;
      [v44 setScheme:@"https"];
      [v44 setHost:@"maps.apple.com"];
      double v8 = @"/place";
      goto LABEL_7;
    case 4:
      BOOL v6 = v44;
      [v44 setScheme:@"https"];
      unsigned int v7 = @"guides.apple.com";
LABEL_6:
      [v6 setHost:v7];
      double v8 = @"/";
LABEL_7:
      unint64_t v9 = v6;
      goto LABEL_12;
    case 5:
      [v44 setScheme:@"https"];
      [v44 setHost:@"maps.apple.com"];
      if (a3 > 7) {
        double v8 = @"/directions";
      }
      else {
        double v8 = off_1E53DF160[a3];
      }
      unint64_t v9 = v44;
LABEL_12:
      [v9 setPath:v8];
      break;
    default:
      break;
  }
  uint64_t v45 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v5, "count"));
  double v10 = [v5 allKeys];
  uint64_t v43 = [v10 sortedArrayUsingComparator:&__block_literal_global_50];

  if (a1 == 4)
  {
    id v22 = [MEMORY[0x1E4F28B88] URLQueryAllowedCharacterSet];
    uint64_t v12 = (void (**)(void, void, void, void))[v22 mutableCopy];

    [v12 removeCharactersInString:@"+/="];
    id v23 = [MEMORY[0x1E4F28E78] stringWithString:&stru_1ED51F370];
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    id v24 = v43;
    uint64_t v25 = [v24 countByEnumeratingWithState:&v46 objects:v65 count:16];
    if (v25)
    {
      uint64_t v26 = *(void *)v47;
      do
      {
        for (uint64_t i = 0; i != v25; ++i)
        {
          if (*(void *)v47 != v26) {
            objc_enumerationMutation(v24);
          }
          int v28 = *(void **)(*((void *)&v46 + 1) + 8 * i);
          int v29 = [v5 objectForKey:v28];
          unint64_t v30 = [v29 stringByAddingPercentEncodingWithAllowedCharacters:v12];

          [v23 appendFormat:@"%@=%@", v28, v30];
          BOOL v31 = [v24 lastObject];
          LOBYTE(v28) = v31 == v28;

          if ((v28 & 1) == 0) {
            [v23 appendString:@"&"];
          }
        }
        uint64_t v25 = [v24 countByEnumeratingWithState:&v46 objects:v65 count:16];
      }
      while (v25);
    }

    [v44 setPercentEncodedQuery:v23];
  }
  else if (a1 == 5)
  {
    int v11 = [MEMORY[0x1E4F28B88] URLQueryAllowedCharacterSet];
    uint64_t v12 = (void (**)(void, void, void, void))[v11 mutableCopy];

    [v12 removeCharactersInString:@":,[]="];
    if (a3 == 6) {
      [v12 removeCharactersInString:@"+/"];
    }
    uint64_t v13 = [MEMORY[0x1E4F28E78] stringWithString:&stru_1ED51F370];
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    id v14 = v43;
    uint64_t v15 = [v14 countByEnumeratingWithState:&v61 objects:v67 count:16];
    if (v15)
    {
      uint64_t v16 = *(void *)v62;
      do
      {
        for (uint64_t j = 0; j != v15; ++j)
        {
          if (*(void *)v62 != v16) {
            objc_enumerationMutation(v14);
          }
          uint64_t v18 = *(void **)(*((void *)&v61 + 1) + 8 * j);
          uint64_t v19 = [v5 objectForKey:v18];
          char v20 = [v19 stringByAddingPercentEncodingWithAllowedCharacters:v12];

          [v13 appendFormat:@"%@=%@", v18, v20];
          id v21 = [v14 lastObject];
          LOBYTE(v18) = v21 == v18;

          if ((v18 & 1) == 0) {
            [v13 appendString:@"&"];
          }
        }
        uint64_t v15 = [v14 countByEnumeratingWithState:&v61 objects:v67 count:16];
      }
      while (v15);
    }

    [v44 setPercentEncodedQuery:v13];
  }
  else
  {
    uint64_t v55 = 0;
    uint64_t v56 = &v55;
    uint64_t v57 = 0x3032000000;
    uint64_t v58 = __Block_byref_object_copy__23;
    unint64_t v59 = __Block_byref_object_dispose__23;
    id v60 = 0;
    v54[0] = MEMORY[0x1E4F143A8];
    v54[1] = 3221225472;
    v54[2] = ___geo_URLForDictionary_block_invoke_450;
    v54[3] = &unk_1E53DF140;
    v54[4] = &v55;
    uint64_t v12 = (void (**)(void, void, void, void))MEMORY[0x18C120660](v54);
    uint64_t v32 = MEMORY[0x18C120660]();
    int v33 = (void *)v56[5];
    v56[5] = v32;

    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    id v34 = v43;
    uint64_t v35 = [v34 countByEnumeratingWithState:&v50 objects:v66 count:16];
    if (v35)
    {
      uint64_t v36 = *(void *)v51;
      do
      {
        for (uint64_t k = 0; k != v35; ++k)
        {
          if (*(void *)v51 != v36) {
            objc_enumerationMutation(v34);
          }
          uint64_t v38 = *(void *)(*((void *)&v50 + 1) + 8 * k);
          uint64_t v39 = [v5 objectForKey:v38];
          ((void (**)(void, uint64_t, void *, void *))v12)[2](v12, v38, v39, v45);
        }
        uint64_t v35 = [v34 countByEnumeratingWithState:&v50 objects:v66 count:16];
      }
      while (v35);
    }

    int v40 = (void *)v56[5];
    v56[5] = 0;

    [v44 setQueryItems:v45];
    _Block_object_dispose(&v55, 8);
  }
  char v41 = [v44 URL];

  return v41;
}

void sub_188FA5FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

unint64_t GEOPDTransitNearbyScheduleLookupParametersReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  BOOL v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 44);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 40)];
  char v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v12 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(unsigned char *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    uint64_t v13 = 1;
    uint64_t v14 = 1;
    uint64_t v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        char v7 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v16 = v12 != 0;
        char v17 = v16 & ~(_BYTE)v11 | v9;
        unsigned __int8 v18 = v16 | v11;
        char v52 = v17;
        char v53 = v18 | v17;
        if ((v18 | v7)) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = a3;
        }
        char v54 = (v19 == 0) | v18;
        BOOL v55 = v18;
        char v20 = (int *)MEMORY[0x1E4F940E8];
        id v21 = (int *)MEMORY[0x1E4F940C8];
        id v22 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v12;
LABEL_7:
        uint64_t v13 = v9;
LABEL_8:
        uint64_t v14 = v10;
        uint64_t v15 = v11;
LABEL_10:
        ++v8;
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        uint64_t v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(void *)(v3 + *v20) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v21)) {
      goto LABEL_62;
    }
    char v23 = 0;
    unsigned int v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = *v20;
      uint64_t v27 = *(void *)(v3 + v26);
      unint64_t v28 = v27 + 1;
      if (v27 == -1 || v28 > *(void *)(v3 + *v6)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(v3 + *v22) + v27);
      *(void *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0) {
        goto LABEL_25;
      }
      v23 += 7;
      if (v24++ >= 9)
      {
        unint64_t v25 = 0;
        int v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v21) = 1;
LABEL_25:
    int v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(unsigned char *)(v3 + *v21)) {
      unint64_t v25 = 0;
    }
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_62:
      int v50 = 1;
      goto LABEL_63;
    }
    unint64_t v33 = v25 >> 3;
    BOOL v34 = v55;
    if ((v54 & 1) == 0)
    {
      uint64_t v35 = v19;
      do
      {
        int v37 = *v35++;
        int v36 = v37;
        BOOL v34 = v37 != 0;
        if (v37) {
          BOOL v38 = v36 == v33;
        }
        else {
          BOOL v38 = 1;
        }
      }
      while (!v38);
    }
    if (v33 == 2) {
      break;
    }
    if (v33 == 1)
    {
      if (v34 && (*(unsigned char *)(a1 + 52) & 2) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_83;
        }
        uint64_t v39 = objc_alloc_init(GEOPDTransitNearbyScheduleLookupOrigin);
        if (!GEOPDTransitNearbyScheduleLookupOriginReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1)) {
          goto LABEL_82;
        }
        PBReaderRecallMark();
        -[GEOPDTransitNearbyScheduleLookupParameters _addNoFlagsTransitNearbyScheduleLookupOrigin:](a1, v39);

        goto LABEL_60;
      }
    }
    else if ((v52 & 1) != 0 && (*(unsigned char *)(a1 + 52) & 1) == 0)
    {
      if (!*(void *)(a1 + 16))
      {
        id v41 = objc_alloc_init(MEMORY[0x1E4F940B0]);
        unsigned int v42 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v41;
      }
      int v43 = PBUnknownFieldAdd();
      id v21 = (int *)MEMORY[0x1E4F940C8];
      if (!v43)
      {
        int v50 = 0;
        long long v51 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
        goto LABEL_65;
      }
      goto LABEL_61;
    }
LABEL_56:
    char v44 = PBReaderSkipValueWithTag();
    id v21 = (int *)MEMORY[0x1E4F940C8];
    if ((v44 & 1) == 0)
    {
      int v50 = 0;
LABEL_63:
      long long v51 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
      goto LABEL_64;
    }
LABEL_61:
    if (!(v53 & 1 | (v8 != 0))) {
      goto LABEL_62;
    }
  }
  if (!v34) {
    goto LABEL_56;
  }
  if ((*(unsigned char *)(a1 + 52) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      goto LABEL_83;
    }
    v8 += *(unsigned __int8 *)(a1 + 52) << 29 >> 31;
    goto LABEL_60;
  }
  if ((PBReaderPlaceMark() & 1) == 0) {
    goto LABEL_83;
  }
  uint64_t v39 = objc_alloc_init(GEOWaypointTyped);
  if (GEOWaypointTypedReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    int v40 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v39;

    --v8;
LABEL_60:
    id v21 = (int *)MEMORY[0x1E4F940C8];
    goto LABEL_61;
  }
LABEL_82:

LABEL_83:
  int v50 = 0;
  long long v51 = &OBJC_IVAR___GEOMapDataSubscriptionDownloadGroup__completedSubscriptions;
  id v21 = (int *)MEMORY[0x1E4F940C8];
LABEL_64:
  if ((v52 & 1) == 0) {
    goto LABEL_66;
  }
LABEL_65:
  *(unsigned char *)(a1 + v51[647]) |= 1u;
LABEL_66:
  if (v55 || (v50 & 1) == 0)
  {
    *(unsigned char *)(a1 + v51[647]) |= 2u;
    *(unsigned char *)(a1 + v51[647]) |= 4u;
    goto LABEL_76;
  }
  if (v19)
  {
    while (1)
    {
      int v47 = *v19++;
      int v46 = v47;
      if (v47 == 1) {
        break;
      }
      if (v46 == 2)
      {
        char v45 = 4;
LABEL_72:
        *(unsigned char *)(a1 + v51[647]) |= v45;
      }
      else if (!v46)
      {
        goto LABEL_76;
      }
    }
    char v45 = 2;
    goto LABEL_72;
  }
LABEL_76:
  if (v50) {
    unint64_t v3 = *(unsigned char *)(v3 + *v21) == 0;
  }
  else {
    unint64_t v3 = 0;
  }
  if (v55)
  {
    long long v48 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
  }
  return v3;
}

void sub_188FA700C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188FA711C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL GEOActiveResourceFilterReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
    id v5 = (int *)MEMORY[0x1E4F940E0];
    BOOL v6 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v3[*MEMORY[0x1E4F940E8]] < *(void *)&v3[*MEMORY[0x1E4F940E0]])
    {
      char v7 = (int *)MEMORY[0x1E4F940B8];
      while (2)
      {
        if (!v3[*v6])
        {
          char v8 = 0;
          unsigned int v9 = 0;
          unint64_t v10 = 0;
          while (1)
          {
            uint64_t v11 = *v4;
            uint64_t v12 = *(void *)&v3[v11];
            unint64_t v13 = v12 + 1;
            if (v12 == -1 || v13 > *(void *)&v3[*v5]) {
              break;
            }
            char v14 = *(unsigned char *)(*(void *)&v3[*v7] + v12);
            *(void *)&v3[v11] = v13;
            v10 |= (unint64_t)(v14 & 0x7F) << v8;
            if ((v14 & 0x80) == 0) {
              goto LABEL_13;
            }
            v8 += 7;
            BOOL v15 = v9++ >= 9;
            if (v15)
            {
              unint64_t v10 = 0;
              int v16 = v3[*v6];
              goto LABEL_15;
            }
          }
          v3[*v6] = 1;
LABEL_13:
          int v16 = v3[*v6];
          if (v3[*v6]) {
            unint64_t v10 = 0;
          }
LABEL_15:
          if (v16) {
            BOOL v17 = 1;
          }
          else {
            BOOL v17 = (v10 & 7) == 4;
          }
          if (!v17)
          {
            switch((v10 >> 3))
            {
              case 1u:
                *(unsigned char *)(a1 + 40) |= 1u;
                uint64_t v18 = *v4;
                unint64_t v19 = *(void *)&v3[v18];
                if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)&v3[*v5])
                {
                  uint64_t v20 = *(void *)(*(void *)&v3[*v7] + v19);
                  *(void *)&v3[v18] = v19 + 8;
                }
                else
                {
                  v3[*v6] = 1;
                  uint64_t v20 = 0;
                }
                *(void *)(a1 + 16) = v20;
                goto LABEL_54;
              case 2u:
                [(id)a1 resetFilter];
                char v23 = 0;
                unsigned int v24 = 0;
                uint64_t v25 = 0;
                while (2)
                {
                  uint64_t v26 = *v4;
                  uint64_t v27 = *(void *)&v3[v26];
                  unint64_t v28 = v27 + 1;
                  if (v27 == -1 || v28 > *(void *)&v3[*v5])
                  {
                    v3[*v6] = 1;
                  }
                  else
                  {
                    char v29 = *(unsigned char *)(*(void *)&v3[*v7] + v27);
                    *(void *)&v3[v26] = v28;
                    v25 |= (unint64_t)(v29 & 0x7F) << v23;
                    if (v29 < 0)
                    {
                      v23 += 7;
                      BOOL v15 = v24++ >= 9;
                      if (v15)
                      {
                        LODWORD(v25) = 0;
                        goto LABEL_46;
                      }
                      continue;
                    }
                  }
                  break;
                }
                if (v3[*v6]) {
                  LODWORD(v25) = 0;
                }
LABEL_46:
                *(_DWORD *)(a1 + 32) = v25;
                *(void *)(a1 + 48) = 1;
LABEL_54:
                if (*(void *)&v3[*v4] >= *(void *)&v3[*v5]) {
                  goto LABEL_55;
                }
                continue;
              case 3u:
                [(id)a1 resetFilter];
                char v30 = 0;
                unsigned int v31 = 0;
                uint64_t v32 = 0;
                break;
              case 4u:
                [(id)a1 resetFilter];
                uint64_t v37 = PBReaderReadString();
                BOOL v38 = *(void **)(a1 + 24);
                *(void *)(a1 + 24) = v37;

                if (*(void *)(a1 + 24))
                {
                  uint64_t v39 = 3;
LABEL_51:
                  *(void *)(a1 + 48) = v39;
                }
                goto LABEL_54;
              default:
                if (!*(void *)(a1 + 8))
                {
                  id v21 = objc_alloc_init(MEMORY[0x1E4F940B0]);
                  id v22 = *(void **)(a1 + 8);
                  *(void *)(a1 + 8) = v21;
                }
                if (!PBUnknownFieldAdd()) {
                  goto LABEL_56;
                }
                goto LABEL_54;
            }
            while (1)
            {
              uint64_t v33 = *v4;
              uint64_t v34 = *(void *)&v3[v33];
              unint64_t v35 = v34 + 1;
              if (v34 == -1 || v35 > *(void *)&v3[*v5]) {
                break;
              }
              char v36 = *(unsigned char *)(*(void *)&v3[*v7] + v34);
              *(void *)&v3[v33] = v35;
              v32 |= (unint64_t)(v36 & 0x7F) << v30;
              if ((v36 & 0x80) == 0) {
                goto LABEL_48;
              }
              v30 += 7;
              BOOL v15 = v31++ >= 9;
              if (v15)
              {
                LODWORD(v32) = 0;
                goto LABEL_50;
              }
            }
            v3[*v6] = 1;
LABEL_48:
            if (v3[*v6]) {
              LODWORD(v32) = 0;
            }
LABEL_50:
            *(_DWORD *)(a1 + 36) = v32;
            uint64_t v39 = 2;
            goto LABEL_51;
          }
        }
        break;
      }
    }
LABEL_55:
    BOOL v40 = v3[*v6] == 0;
  }
  else
  {
LABEL_56:
    BOOL v40 = 0;
  }
  objc_sync_exit(v3);

  return v40;
}

void sub_188FA7608(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188FA7708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ClearXPCValue(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  uint64_t v14 = 0;
  BOOL v15 = &v14;
  uint64_t v16 = 0x3032000000;
  BOOL v17 = __Block_byref_object_copy_;
  uint64_t v18 = __Block_byref_object_dispose_;
  id v19 = 0;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __ClearXPCValue_block_invoke;
  v10[3] = &unk_1E53D7A50;
  id v6 = v5;
  uint64_t v12 = &v14;
  uint64_t v13 = a3;
  id v11 = v6;
  uint64_t v7 = [v6 executeStatement:@"ClearXPCValue" statementBlock:v10];
  if (a2)
  {
    char v8 = (void *)v15[5];
    if (v8) {
      *a2 = v8;
    }
  }

  _Block_object_dispose(&v14, 8);
  return v7;
}

void sub_188FA7CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188FA802C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t __ClearSubscriptionDataStatesNotMatchingVersions_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  obuint64_t j = *(id *)(v6 + 40);
  int v7 = [v5 bindIntParameter:"@data_type" toValue:v4 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 68);
  unsigned int v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  id v23 = *(id *)(v10 + 40);
  int v11 = [v9 bindIntParameter:"@data_subtype" toValue:v8 inStatement:a2 error:&v23];
  objc_storeStrong((id *)(v10 + 40), v23);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void **)(a1 + 32);
  uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8);
  id v22 = *(id *)(v14 + 40);
  int v15 = [v13 bindInt64Parameter:"@versionA" toValue:v12 inStatement:a2 error:&v22];
  objc_storeStrong((id *)(v14 + 40), v22);
  if (!v15) {
    return 0;
  }
  uint64_t v16 = *(void *)(a1 + 56);
  BOOL v17 = *(void **)(a1 + 32);
  uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8);
  id v21 = *(id *)(v18 + 40);
  uint64_t v19 = [v17 bindInt64Parameter:"@versionB" toValue:v16 inStatement:a2 error:&v21];
  objc_storeStrong((id *)(v18 + 40), v21);
  return v19;
}

uint64_t __GetSubscriptionDownloadState_block_invoke(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v6 + 40);
  int v7 = [v4 bindInt64Parameter:"@subscription_pk" toValue:v5 inStatement:a2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (v7)
  {
    while (1)
    {
      uint64_t v8 = sqlite3_step(a2);
      uint64_t v9 = v8;
      if (v8 != 100) {
        break;
      }
      [*(id *)(a1 + 32) intForColumn:0 inStatment:a2];
      if (!(*(unsigned int (**)(void))(*(void *)(a1 + 40) + 16))()) {
        return 1;
      }
    }
    if (v8 == 101) {
      return 1;
    }
    int v11 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
    id v13 = *(id *)(v12 + 40);
    [v11 reportSQLiteErrorCode:v9 method:@"step" error:&v13];
    objc_storeStrong((id *)(v12 + 40), v13);
  }
  return 0;
}

BOOL GEOMapItemInitialRequestDataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    uint64_t v6 = (int *)MEMORY[0x1E4F940E8];
    int v7 = (int *)MEMORY[0x1E4F940E0];
    uint64_t v8 = (int *)MEMORY[0x1E4F940C8];
    if (*(void *)&v5[*MEMORY[0x1E4F940E8]] < *(void *)&v5[*MEMORY[0x1E4F940E0]])
    {
      uint64_t v9 = (int *)MEMORY[0x1E4F940B8];
      do
      {
        if (v5[*v8]) {
          break;
        }
        char v10 = 0;
        unsigned int v11 = 0;
        unint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = *v6;
          unint64_t v14 = *(void *)&v5[v13];
          if (v14 == -1 || v14 >= *(void *)&v5[*v7]) {
            break;
          }
          char v15 = *(unsigned char *)(*(void *)&v5[*v9] + v14);
          *(void *)&v5[v13] = v14 + 1;
          v12 |= (unint64_t)(v15 & 0x7F) << v10;
          if ((v15 & 0x80) == 0) {
            goto LABEL_13;
          }
          v10 += 7;
          BOOL v16 = v11++ >= 9;
          if (v16)
          {
            unint64_t v12 = 0;
            int v17 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        int v17 = v5[*v8];
        if (v5[*v8]) {
          unint64_t v12 = 0;
        }
LABEL_15:
        if (v17 || (v12 & 7) == 4) {
          break;
        }
        if ((v12 >> 3) == 2)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_40;
          }
          uint64_t v25 = objc_alloc_init(GEOPDPlaceRequestParameters);
          if (!GEOPDPlaceRequestParametersReadAllFrom((uint64_t)v25, v5, a3))
          {

            goto LABEL_40;
          }
          PBReaderRecallMark();
          uint64_t v26 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v25;
        }
        else if ((v12 >> 3) == 1)
        {
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 20) |= 1u;
          while (1)
          {
            uint64_t v22 = *v6;
            unint64_t v23 = *(void *)&v5[v22];
            if (v23 == -1 || v23 >= *(void *)&v5[*v7]) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)&v5[*v9] + v23);
            *(void *)&v5[v22] = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              goto LABEL_34;
            }
            v19 += 7;
            BOOL v16 = v20++ >= 9;
            if (v16)
            {
              LODWORD(v21) = 0;
              goto LABEL_36;
            }
          }
          v5[*v8] = 1;
LABEL_34:
          if (v5[*v8]) {
            LODWORD(v21) = 0;
          }
LABEL_36:
          *(_DWORD *)(a1 + 16) = v21;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_40;
        }
      }
      while (*(void *)&v5[*v6] < *(void *)&v5[*v7]);
    }
    BOOL v27 = v5[*v8] == 0;
  }
  else
  {
LABEL_40:
    BOOL v27 = 0;
  }
  objc_sync_exit(v5);

  return v27;
}

void sub_188FA8508(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceRequestParametersReadAllFrom(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 468))
  {
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3C8] format:@"GEOPDPlaceRequestParametersReadAllFrom can only be called once per object"];
    return 0;
  }
  if ((unint64_t)[a2 position] >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)char v10 = 0;
      _os_log_fault_impl(&dword_188D96000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 472));
  id v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 464) = [v8 position];
  *(_DWORD *)(a1 + 468) = [v8 length];
  if (a3) {
    uint64_t v9 = (int *)&GEOPDPlaceRequestParametersReadAllFrom_recursiveTag;
  }
  else {
    uint64_t v9 = (int *)&GEOPDPlaceRequestParametersReadAllFrom_initialTag;
  }
  unint64_t Specified = GEOPDPlaceRequestParametersReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3) {
    _GEOPDPlaceRequestParametersCallReadAllRecursiveWithoutSynchronized(a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 472));
  return Specified;
}

void sub_188FA86A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceRequestParametersReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 472));
  uint64_t v6 = (int *)MEMORY[0x1E4F940E0];
  *(void *)(v3 + (int)*MEMORY[0x1E4F940E0]) = *(unsigned int *)(a1 + 468);
  [(id)v3 seekToOffset:*(unsigned int *)(a1 + 464)];
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = *(void *)(a1 + 476);
  v13.i64[0] = 0x100000001;
  v13.i64[1] = 0x100000001;
  uint64x2_t v14 = (uint64x2_t)vdupq_n_s64(v12);
  uint32x4_t v15 = (uint32x4_t)vdupq_n_s32(v12);
  unsigned int v16 = vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v14, (uint64x2_t)xmmword_18A62F790), (int32x4_t)vshlq_u64(v14, (uint64x2_t)xmmword_18A62F780)), v13), (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v14, (uint64x2_t)xmmword_18A62F750), (int32x4_t)vshlq_u64(v14, (uint64x2_t)xmmword_18A62F740)), v13)))+ ((v12 >> 2) & 1)+ ((v12 >> 3) & 1)+ ((v12 >> 4) & 1)+ ((v12 >> 39) & 1)+ ((v12 >> 34) & 1)+ ((v12 >> 28) & 1)+ ((v12 >> 52) & 1)+ (BYTE4(v12) & 1)
      + ((v12 >> 53) & 1)
      + ((v12 >> 11) & 1)
      + ((v12 >> 22) & 1)
      + (BYTE3(v12) & 1)
      + ((v12 >> 55) & 1)
      + ((v12 >> 12) & 1)
      + ((v12 >> 47) & 1)
      + vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v15, (uint32x4_t)xmmword_18A62F6C0), v13))
      + (v12 >> 31)
      + ((v12 >> 1) & 1)
      + ((v12 >> 30) & 1)
      + ((v12 >> 54) & 1)
      + ((v12 >> 9) & 1)
      + ((v12 >> 35) & 1)
      + ((v12 >> 29) & 1)
      + ((v12 >> 33) & 1)
      + ((v12 >> 42) & 1)
      + ((v12 >> 14) & 1)
      + ((v12 >> 45) & 1)
      + ((v12 >> 21) & 1)
      + (v12 & 1)
      + vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v14, (uint64x2_t)xmmword_18A62F700), (int32x4_t)vshlq_u64(v14, (uint64x2_t)xmmword_18A62F770)), v13), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v15, (uint32x4_t)xmmword_18A62F6E0), v13)), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v15, (uint32x4_t)xmmword_18A62F760), v13), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v15, (uint32x4_t)xmmword_18A62F690), v13))));
  while (2)
  {
    uint64_t v17 = 1;
    uint64_t v18 = 1;
    uint64_t v19 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v16;
        goto LABEL_8;
      case -3:
        char v8 = 1;
        goto LABEL_7;
      case -2:
        uint64_t v18 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        BOOL v20 = v16 > 0x2B;
        char v21 = v20 & ~(_BYTE)v11;
        unsigned __int8 v22 = v20 | v11;
        char v56 = v21 | v9;
        char v57 = v22 | v21 | v9;
        if ((v22 | v8)) {
          unint64_t v23 = 0;
        }
        else {
          unint64_t v23 = a3;
        }
        char v24 = (int *)MEMORY[0x1E4F940E8];
        uint64_t v25 = (int *)MEMORY[0x1E4F940C8];
        char v58 = (v23 == 0) | v22;
        BOOL v59 = v22;
        uint64_t v26 = (int *)MEMORY[0x1E4F940B8];
        break;
      default:
        ++v16;
LABEL_7:
        uint64_t v17 = v9;
LABEL_8:
        uint64_t v18 = v10;
        uint64_t v19 = v11;
LABEL_10:
        ++v7;
        uint64_t v9 = v17;
        uint64_t v10 = v18;
        uint64_t v11 = v19;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(void *)(v3 + *v24) >= *(void *)(v3 + *v6) || *(unsigned char *)(v3 + *v25)) {
      goto LABEL_436;
    }
    char v27 = 0;
    unsigned int v28 = 0;
    unint64_t v29 = 0;
    while (1)
    {
      uint64_t v30 = *v24;
      uint64_t v31 = *(void *)(v3 + v30);
      unint64_t v32 = v31 + 1;
      if (v31 == -1 || v32 > *(void *)(v3 + *v6)) {
        break;
      }
      char v33 = *(unsigned char *)(*(void *)(v3 + *v26) + v31);
      *(void *)(v3 + v30) = v32;
      v29 |= (unint64_t)(v33 & 0x7F) << v27;
      if ((v33 & 0x80) == 0) {
        goto LABEL_25;
      }
      v27 += 7;
      if (v28++ >= 9)
      {
        unint64_t v29 = 0;
        int v35 = *(unsigned __int8 *)(v3 + *v25);
        goto LABEL_27;
      }
    }
    *(unsigned char *)(v3 + *v25) = 1;
LABEL_25:
    int v35 = *(unsigned __int8 *)(v3 + *v25);
    if (*(unsigned char *)(v3 + *v25)) {
      unint64_t v29 = 0;
    }
LABEL_27:
    if (v35 || (v29 & 7) == 4)
    {
LABEL_436:
      int v55 = 1;
      goto LABEL_437;
    }
    unint64_t v37 = v29 >> 3;
    BOOL v38 = v59;
    if ((v58 & 1) == 0)
    {
      uint64_t v39 = v23;
      do
      {
        int v41 = *v39++;
        int v40 = v41;
        BOOL v38 = v41 != 0;
        if (v41) {
          BOOL v42 = v40 == v37;
        }
        else {
          BOOL v42 = 1;
        }
      }
      while (!v42);
    }
    switch((int)v37)
    {
      case 1:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 481) & 0x20) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0) {
            goto LABEL_505;
          }
          int v43 = objc_alloc_init(GEOPDSearchParameters);
          if (GEOPDSearchParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1))
          {
            PBReaderRecallMark();
            uint64_t v44 = 376;
            goto LABEL_320;
          }
          goto LABEL_504;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          goto LABEL_505;
        }
        uint64_t v50 = *(void *)(a1 + 476) << 18;
        goto LABEL_433;
      case 2:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 478) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 42;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDGeocodingParameters);
        if (!GEOPDGeocodingParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 184;
        goto LABEL_320;
      case 3:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 477) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 49;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDCanonicalLocationSearchParameters);
        if (!GEOPDCanonicalLocationSearchParametersReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 128;
        goto LABEL_320;
      case 4:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 481) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 21;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDReverseGeocodingParameters);
        if (!GEOPDReverseGeocodingParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 352;
        goto LABEL_320;
      case 5:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 480) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 30;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDPlaceLookupParameters);
        if (!GEOPDPlaceLookupParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 280;
        goto LABEL_320;
      case 6:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 479) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 34;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDMerchantLookupParameters);
        if (!GEOPDMerchantLookupParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 248;
        goto LABEL_320;
      case 7:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 480) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 28;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDPlaceRefinementParameters);
        if (!GEOPDPlaceRefinementParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 296;
        goto LABEL_320;
      case 8:
        if (!v38) {
          goto LABEL_321;
        }
        if (*(unsigned char *)(a1 + 482))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 15;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDSiriSearchParameters);
        if (!GEOPDSiriSearchParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 400;
        goto LABEL_320;
      case 9:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 479) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 38;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDLocationDirectedSearchParameters);
        if (!GEOPDLocationDirectedSearchParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 216;
        goto LABEL_320;
      case 10:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 476) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 57;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDAutocompleteParameters);
        if (!GEOPDAutocompleteParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 64;
        goto LABEL_320;
      case 11:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 477) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 50;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDSearchBrowseCategorySuggestionParameters);
        if (!GEOPDSearchBrowseCategorySuggestionParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 120;
        goto LABEL_320;
      case 12:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 477) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 48;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDCategorySearchParameters);
        if (!GEOPDCategorySearchParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 136;
        goto LABEL_320;
      case 13:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 480) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 25;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDPopularNearbySearchParameters);
        if (!GEOPDPopularNearbySearchParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 320;
        goto LABEL_320;
      case 14:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 481) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 17;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDSearchZeroKeywordCategorySuggestionParameters);
        if (!GEOPDSearchZeroKeywordCategorySuggestionParametersReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 384;
        goto LABEL_320;
      case 15:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 481) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 19;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDSearchFieldPlaceholderParameters);
        if (!GEOPDSearchFieldPlaceholderParametersReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 368;
        goto LABEL_320;
      case 16:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 477) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 54;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDBatchPopularNearbySearchParameters);
        if (!GEOPDBatchPopularNearbySearchParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 88;
        goto LABEL_320;
      case 17:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 482) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 9;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDVendorSpecificPlaceRefinementParameters);
        if (!GEOPDVendorSpecificPlaceRefinementParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 448;
        goto LABEL_320;
      case 18:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 479) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 33;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDNearbySearchParameters);
        if (!GEOPDNearbySearchParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 256;
        goto LABEL_320;
      case 19:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 476) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 62;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDAddressObjectGeocodingParameters);
        if (!GEOPDAddressObjectGeocodingParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 24;
        goto LABEL_320;
      case 20:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 481) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 16;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDSearchZeroKeywordWithSearchResultsSuggestionParameters);
        if (!GEOPDSearchZeroKeywordWithSearchResultsSuggestionParametersReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 392;
        goto LABEL_320;
      case 21:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 478) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 44;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDExternalTransitLookupParameters);
        if (!GEOPDExternalTransitLookupParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 168;
        goto LABEL_320;
      case 22:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 478) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 43;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDFeatureIdGeocodingParameters);
        if (!GEOPDFeatureIdGeocodingParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 176;
        goto LABEL_320;
      case 23:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 479) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 36;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDMapsIdentifierPlaceLookupParameters);
        if (!GEOPDMapsIdentifierPlaceLookupParametersReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 232;
        goto LABEL_320;
      case 25:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 477) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 53;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDBatchReverseGeocodingParameters);
        if (!GEOPDBatchReverseGeocodingParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 96;
        goto LABEL_320;
      case 30:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 477) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 51;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDBrandLookupParameters);
        if (!GEOPDBrandLookupParametersReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 112;
        goto LABEL_320;
      case 32:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 482) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 8;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDWifiFingerprintParameters);
        if (!GEOPDWifiFingerprintParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 456;
        goto LABEL_320;
      case 34:
        if (!v38) {
          goto LABEL_321;
        }
        if (*(unsigned char *)(a1 + 479))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 39;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDIpGeoLookupParameters);
        if (!GEOPDIpGeoLookupParametersReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 208;
        goto LABEL_320;
      case 35:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 478) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 41;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDGroundViewLabelParameters);
        if (!GEOPDGroundViewLabelParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 192;
        goto LABEL_320;
      case 36:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 477) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 52;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDBatchSpatialLookupParameters);
        if (!GEOPDBatchSpatialLookupParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 104;
        goto LABEL_320;
      case 37:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 482) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 10;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDTransitVehiclePositionParameters);
        if (!GEOPDTransitVehiclePositionParametersReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 440;
        goto LABEL_320;
      case 38:
        if (!v38) {
          goto LABEL_321;
        }
        if (*(unsigned char *)(a1 + 480))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 31;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDPlaceCollectionLookupParameters);
        if (!GEOPDPlaceCollectionLookupParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 272;
        goto LABEL_320;
      case 39:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 482) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 11;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPBTransitScheduleLookupParameters);
        if (!GEOPBTransitScheduleLookupParametersReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 432;
        goto LABEL_320;
      case 40:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 476) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 56;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDBatchCategoryLookupParameters);
        if (!GEOPDBatchCategoryLookupParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 72;
        goto LABEL_320;
      case 41:
        if (!v38) {
          goto LABEL_321;
        }
        if (*(unsigned char *)(a1 + 477))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 55;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDBatchMerchantLookupBrandParameters);
        if (!GEOPDBatchMerchantLookupBrandParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 80;
        goto LABEL_320;
      case 42:
        if (!v38) {
          goto LABEL_321;
        }
        if (*(unsigned char *)(a1 + 478))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 47;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDChildPlaceLookupByCategoryParameters);
        if (!GEOPDChildPlaceLookupByCategoryParametersReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 144;
        goto LABEL_320;
      case 43:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 478) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 46;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDCollectionSuggestionParameters);
        if (!GEOPDCollectionSuggestionParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 152;
        goto LABEL_320;
      case 44:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 479) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 35;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDMapsSearchHomeParameters);
        if (!GEOPDMapsSearchHomeParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 240;
        goto LABEL_320;
      case 45:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 480) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 29;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDPlaceQuestionnaireLookupParameters);
        if (!GEOPDPlaceQuestionnaireLookupParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 288;
        goto LABEL_320;
      case 46:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 480) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 24;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDPublisherViewParameters);
        if (!GEOPDPublisherViewParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 328;
        goto LABEL_320;
      case 47:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 476) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 59;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDAllCollectionsViewParameters);
        if (!GEOPDAllCollectionsViewParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 48;
        goto LABEL_320;
      case 48:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 476) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 60;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDAirportEntityPlaceLookupParameters);
        if (!GEOPDAirportEntityPlaceLookupParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 40;
        goto LABEL_320;
      case 49:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 482) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 14;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDTerritoryLookupParameters);
        if (!GEOPDTerritoryLookupParametersReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 408;
        goto LABEL_320;
      case 50:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 482) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 12;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDTransitNearbyScheduleLookupParameters);
        if (!GEOPDTransitNearbyScheduleLookupParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 424;
        goto LABEL_320;
      case 51:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 479) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 37;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDMapsHomeParameters);
        if (!GEOPDMapsHomeParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 224;
        goto LABEL_320;
      case 52:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 476) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 58;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDAllGuidesLocationsViewParameters);
        if (!GEOPDAllGuidesLocationsViewParametersReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 56;
        goto LABEL_320;
      case 53:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 478) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 40;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDGuidesHomeParameters);
        if (!GEOPDGuidesHomeParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 200;
        goto LABEL_320;
      case 54:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 478) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 45;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDExtendedGeoLookupParameters);
        if (!GEOPDExtendedGeoLookupParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 160;
        goto LABEL_320;
      case 55:
        if (!v38) {
          goto LABEL_321;
        }
        if (*(unsigned char *)(a1 + 481))
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 23;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDQueryUnderstandingParameters);
        if (!GEOPDQueryUnderstandingParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 336;
        goto LABEL_320;
      case 56:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 480) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 26;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDPoiAtAddressLookupParameters);
        if (!GEOPDPoiAtAddressLookupParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 312;
        goto LABEL_320;
      case 57:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 482) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 13;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDTransitNearbyPaymentMethodLookupParameters);
        if (!GEOPDTransitNearbyPaymentMethodLookupParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 416;
        goto LABEL_320;
      case 58:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 480) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 27;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDPlacecardEnrichmentParameters);
        if (!GEOPDPlacecardEnrichmentParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 304;
        goto LABEL_320;
      case 59:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 479) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 32;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDOfflineRegionNameParameters);
        if (!GEOPDOfflineRegionNameParametersReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 264;
        goto LABEL_320;
      case 60:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 481) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 20;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDSearchCapabilitiesParameters);
        if (!GEOPDSearchCapabilitiesParametersReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 360;
        goto LABEL_320;
      case 61:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 481) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 22;
          goto LABEL_433;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDRefreshIdLookUpParameters);
        if (!GEOPDRefreshIdLookUpParametersReadAllFrom((uint64_t)v43, (void *)v3)) {
          goto LABEL_504;
        }
        PBReaderRecallMark();
        uint64_t v44 = 344;
        goto LABEL_320;
      case 62:
        if (!v38) {
          goto LABEL_321;
        }
        if ((*(unsigned char *)(a1 + 476) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            goto LABEL_505;
          }
          uint64_t v50 = *(void *)(a1 + 476) << 61;
LABEL_433:
          v7 += v50 >> 63;
LABEL_434:
          uint64_t v25 = (int *)MEMORY[0x1E4F940C8];
LABEL_435:
          uint64_t v26 = (int *)MEMORY[0x1E4F940B8];
          if (!(v57 & 1 | (v7 != 0))) {
            goto LABEL_436;
          }
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0) {
          goto LABEL_505;
        }
        int v43 = objc_alloc_init(GEOPDAddressRecommendationParameters);
        if (GEOPDAddressRecommendationParametersReadAllFrom((uint64_t)v43, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          uint64_t v44 = 32;
LABEL_320:
          long long v48 = *(void **)(a1 + v44);
          *(void *)(a1 + v44) = v43;

          --v7;
          goto LABEL_434;
        }
LABEL_504:

LABEL_505:
        int v55 = 0;
        uint64_t v25 = (int *)MEMORY[0x1E4F940C8];
LABEL_437:
        if (v56) {
LABEL_438:
        }
          *(void *)(a1 + 476) |= 1uLL;
        if (v59 || (v55 & 1) == 0)
        {
          *(void *)(a1 + 476) |= 0xFFFFFFFFFFFFFEuLL;
        }
        else if (v23)
        {
          while (1)
          {
            int v51 = *v23++;
            uint64_t v52 = 0x200000000000;
            switch(v51)
            {
              case 0:
                goto LABEL_498;
              case 1:
                goto LABEL_497;
              case 2:
                uint64_t v52 = 0x200000;
                goto LABEL_497;
              case 3:
                uint64_t v52 = 0x4000;
                goto LABEL_497;
              case 4:
                uint64_t v52 = 0x40000000000;
                goto LABEL_497;
              case 5:
                uint64_t v52 = 0x200000000;
                goto LABEL_497;
              case 6:
                uint64_t v52 = 0x20000000;
                goto LABEL_497;
              case 7:
                uint64_t v52 = 0x800000000;
                goto LABEL_497;
              case 8:
                uint64_t v52 = 0x1000000000000;
                goto LABEL_497;
              case 9:
                uint64_t v52 = 0x2000000;
                goto LABEL_497;
              case 10:
                uint64_t v52 = 64;
                goto LABEL_497;
              case 11:
                uint64_t v52 = 0x2000;
                goto LABEL_497;
              case 12:
                uint64_t v52 = 0x8000;
                goto LABEL_497;
              case 13:
                uint64_t v52 = 0x4000000000;
                goto LABEL_497;
              case 14:
                uint64_t v52 = 0x400000000000;
                goto LABEL_497;
              case 15:
                uint64_t v52 = 0x100000000000;
                goto LABEL_497;
              case 16:
                uint64_t v52 = 512;
                goto LABEL_497;
              case 17:
                uint64_t v52 = 0x40000000000000;
                goto LABEL_497;
              case 18:
                uint64_t v52 = 0x40000000;
                goto LABEL_497;
              case 19:
                uint64_t v52 = 2;
                goto LABEL_497;
              case 20:
                uint64_t v52 = 0x800000000000;
                goto LABEL_497;
              case 21:
                uint64_t v52 = 0x80000;
                goto LABEL_497;
              case 22:
                uint64_t v52 = 0x100000;
                goto LABEL_497;
              case 23:
                uint64_t v52 = 0x8000000;
                goto LABEL_497;
              case 25:
                uint64_t v52 = 1024;
                goto LABEL_497;
              case 30:
                uint64_t v52 = 4096;
                goto LABEL_497;
              case 32:
                uint64_t v52 = 0x80000000000000;
                goto LABEL_497;
              case 34:
                uint64_t v52 = 0x1000000;
                goto LABEL_497;
              case 35:
                uint64_t v52 = 0x400000;
                goto LABEL_497;
              case 36:
                uint64_t v52 = 2048;
                goto LABEL_497;
              case 37:
                uint64_t v52 = 0x20000000000000;
                goto LABEL_497;
              case 38:
                uint64_t v52 = 0x100000000;
                goto LABEL_497;
              case 39:
                uint64_t v52 = 0x10000000000000;
                goto LABEL_497;
              case 40:
                uint64_t v52 = 128;
                goto LABEL_497;
              case 41:
                uint64_t v52 = 256;
                goto LABEL_497;
              case 42:
                uint64_t v52 = 0x10000;
                goto LABEL_497;
              case 43:
                uint64_t v52 = 0x20000;
                goto LABEL_497;
              case 44:
                uint64_t v52 = 0x10000000;
                goto LABEL_497;
              case 45:
                uint64_t v52 = 0x400000000;
                goto LABEL_497;
              case 46:
                uint64_t v52 = 0x8000000000;
                goto LABEL_497;
              case 47:
                uint64_t v52 = 16;
                goto LABEL_497;
              case 48:
                uint64_t v52 = 8;
                goto LABEL_497;
              case 49:
                uint64_t v52 = 0x2000000000000;
                goto LABEL_497;
              case 50:
                uint64_t v52 = 0x8000000000000;
                goto LABEL_497;
              case 51:
                uint64_t v52 = 0x4000000;
                goto LABEL_497;
              case 52:
                uint64_t v52 = 32;
                goto LABEL_497;
              case 53:
                uint64_t v52 = 0x800000;
                goto LABEL_497;
              case 54:
                uint64_t v52 = 0x40000;
                goto LABEL_497;
              case 55:
                uint64_t v52 = 0x10000000000;
                goto LABEL_497;
              case 56:
                uint64_t v52 = 0x2000000000;
                goto LABEL_497;
              case 57:
                uint64_t v52 = 0x4000000000000;
                goto LABEL_497;
              case 58:
                uint64_t v52 = 0x1000000000;
                goto LABEL_497;
              case 59:
                uint64_t v52 = 0x80000000;
                goto LABEL_497;
              case 60:
                uint64_t v52 = 0x80000000000;
                goto LABEL_497;
              case 61:
                uint64_t v52 = 0x20000000000;
                goto LABEL_497;
              case 62:
                uint64_t v52 = 4;
LABEL_497:
                *(void *)(a1 + 476) |= v52;
                break;
              default:
                continue;
            }
          }
        }
LABEL_498:
        if (v55) {
          unint64_t v3 = *(unsigned char *)(v3 + *v25) == 0;
        }
        else {
          unint64_t v3 = 0;
        }
        if (v59)
        {
          char v53 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = 0;
        }
        return v3;
      default:
        if (v56 & 1) == 0 || (*(unsigned char *)(a1 + 476))
        {
LABEL_321:
          char v49 = PBReaderSkipValueWithTag();
          uint64_t v25 = (int *)MEMORY[0x1E4F940C8];
          if ((v49 & 1) == 0)
          {
            int v55 = 0;
            goto LABEL_437;
          }
        }
        else
        {
          if (!*(void *)(a1 + 16))
          {
            id v45 = objc_alloc_init(MEMORY[0x1E4F940B0]);
            int v46 = *(void **)(a1 + 16);
            *(void *)(a1 + 16) = v45;
          }
          int v47 = PBUnknownFieldAdd();
          uint64_t v25 = (int *)MEMORY[0x1E4F940C8];
          if (!v47)
          {
            int v55 = 0;
            goto LABEL_438;
          }
        }
        goto LABEL_435;
    }
  }
}

uint64_t gcl::polyline::DecoderImpl::decompressPositions(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6)
{
  uint64_t v6 = (int *)*a2;
  if (!*a2) {
    return 5;
  }
  uint64_t result = 5;
  if (!a3) {
    return result;
  }
  unint64_t v10 = a2[1];
  if ((v10 & 0x8000000000000000) != 0) {
    return result;
  }
  if (a6)
  {
    long long v11 = *a6;
    *(_OWORD *)(a1 + 26) = *(long long *)((char *)a6 + 14);
    *(_OWORD *)(a1 + 12) = v11;
    unsigned int v12 = *(_DWORD *)(a1 + 20);
  }
  else
  {
    if (v10 < 4) {
      return 3;
    }
    unint64_t v20 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v10 & 0xFFFFFFFFFFFFFFFCLL) == 4 || v10 == 8 || v10 == 9) {
      return 3;
    }
    uint64_t result = 3;
    if ((v10 & 0xFFFFFFFFFFFFFFFELL) == 0xA) {
      return result;
    }
    switch(v20)
    {
      case 0xCuLL:
        return result;
      case 0x10uLL:
        return result;
      case 0x14uLL:
        return result;
      case 0x18uLL:
        return result;
    }
    if (v10 == 28) {
      return result;
    }
    if (v10 == 29) {
      return result;
    }
    BOOL v21 = v10 >= 0x20;
    v10 -= 32;
    if (!v21 || *v6 != -294009975) {
      return result;
    }
    int v22 = v6[1];
    char v23 = *((unsigned char *)v6 + 8);
    char v24 = *((unsigned char *)v6 + 9);
    __int16 v25 = *((_WORD *)v6 + 5);
    unsigned int v12 = v6[3];
    int v26 = v6[4] & 0x7FFFFFFF;
    int v27 = v6[5] & 0x7FFFFFFF;
    int v28 = v6[6] & 0x7FFFFFFF;
    char v29 = *((unsigned char *)v6 + 28);
    char v30 = *((unsigned char *)v6 + 29);
    *(_DWORD *)(a1 + 12) = 0;
    *(unsigned char *)(a1 + 16) = v23;
    *(unsigned char *)(a1 + 17) = v24;
    *(_WORD *)(a1 + 18) = v25;
    *(_DWORD *)(a1 + 20) = v12;
    *(_DWORD *)(a1 + 24) = v26;
    *(_DWORD *)(a1 + 28) = v27;
    *(_DWORD *)(a1 + 32) = v28;
    *(_DWORD *)(a1 + 36) = v22;
    *(unsigned char *)(a1 + 40) = v29;
    *(unsigned char *)(a1 + 41) = v30;
    v6 += 8;
    if (!v6) {
      return 3;
    }
  }
  unint64_t v13 = v12;
  uint64x2_t v14 = (int *)*a2;
  unint64_t v15 = *a2 + v12;
  if (*a2) {
    unint64_t v16 = v15;
  }
  else {
    unint64_t v16 = v13;
  }
  uint64_t result = 3;
  uint64_t v17 = a2[1] - v13;
  *a2 = v16;
  a2[1] = v17;
  if (v17 < 0) {
    return result;
  }
  if (!v14) {
    return result;
  }
  if ((int *)((char *)v6 + v10) < v14) {
    return result;
  }
  if ((unint64_t)v6 > v15) {
    return result;
  }
  unint64_t v18 = v15 - (void)v6;
  if ((uint64_t)(v15 - (void)v6) < 0) {
    return result;
  }
  if (*(unsigned char *)(a1 + 16) || *(unsigned __int8 *)(a1 + 17) - 1 > 1) {
    return 4;
  }
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    char v19 = *(unsigned char *)(a1 + 41);
    if (!v19) {
      goto LABEL_40;
    }
    return 3;
  }
  if (result == 3) {
    return result;
  }
  char v19 = *(unsigned char *)(a1 + 41) == 4;
LABEL_40:
  uint64_t result = 3;
  if (v18 >= 4
    && (v19 & 1) == 0
    && (v18 & 0xFFFFFFFFFFFFFFFCLL) != 4
    && (v18 & 0xFFFFFFFFFFFFFFFCLL) != 8
    && v18 != 12
    && v18 != 13
    && v18 != 14)
  {
    uint64_t v31 = (unsigned __int8 *)v6 + 15;
    if (v6 != (int *)-15)
    {
      unsigned int v32 = *((unsigned __int8 *)v6 + 12);
      unsigned int v33 = *((unsigned __int8 *)v6 + 13);
      unsigned int v34 = *((unsigned __int8 *)v6 + 14);
      unsigned int v35 = (int)v32 <= (int)v33 ? *((unsigned __int8 *)v6 + 13) : *((unsigned __int8 *)v6 + 12);
      int v36 = v32 <= v33 ? *((unsigned __int8 *)v6 + 13) : *((unsigned __int8 *)v6 + 12);
      unsigned int v37 = v35 >= v34 ? v36 : *((unsigned __int8 *)v6 + 14);
      if (v37 <= 0x1C)
      {
        int v38 = *v6;
        int v39 = v6[1];
        int v40 = v6[2];
        uint64_t v41 = v18 - 15;
        *(_DWORD *)a1 = v32;
        *(_DWORD *)(a1 + 4) = v33;
        *(_DWORD *)(a1 + 8) = v34;
        std::vector<gcl::Vector3<int>>::resize((void *)(a1 + 80), *(int *)(a1 + 24));
        uint64_t result = gcl::polyline::DecoderImpl::decompressPositions(a1, v31, v41, *(int32x2_t **)(a1 + 80), a4, a5);
        if (!result)
        {
          int v42 = *(_DWORD *)(a1 + 24);
          if (!v38 && !v39 && !v40)
          {
            if (v42 >= 1)
            {
              uint64_t v43 = 0;
              uint64_t v44 = 0;
              do
              {
                uint64_t result = 0;
                id v45 = (uint64_t *)(*(void *)(a1 + 80) + v43);
                uint64_t v46 = a3 + v43;
                uint64_t v47 = *v45;
                *(_DWORD *)(v46 + 8) = *((_DWORD *)v45 + 2);
                *(void *)uint64_t v46 = v47;
                ++v44;
                v43 += 12;
              }
              while (v44 < *(int *)(a1 + 24));
              return result;
            }
            return 0;
          }
          if (v42 < 1) {
            return 0;
          }
          uint64_t v48 = 0;
          uint64_t v49 = 0;
          do
          {
            uint64_t result = 0;
            uint64_t v50 = (_DWORD *)(*(void *)(a1 + 80) + v48);
            int v51 = *v50 + v38;
            int v52 = v50[1] + v39;
            LODWORD(v50) = v50[2] + v40;
            char v53 = (_DWORD *)(a3 + v48);
            *char v53 = v51;
            v53[1] = v52;
            v53[2] = v50;
            ++v49;
            v48 += 12;
          }
          while (v49 < *(int *)(a1 + 24));
        }
      }
    }
  }
  return result;
}

uint64_t gcl::tmesh::DecoderImpl::decompressPositionsAndConnectivity(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, int *a7, int16x8_t a8)
{
  *(_DWORD *)(a1 + 3872) = 0;
  if (!a5 || !a6) {
    goto LABEL_59;
  }
  unint64_t v15 = (_DWORD *)gcl::tmesh::DecoderImpl::parsePositionsAndConnectivityInfo(a2, a3, a1 + 3776, a8);
  if (!v15) {
    goto LABEL_16;
  }
  if (v16 < 0) {
    goto LABEL_16;
  }
  uint64_t v17 = *(unsigned int *)(a1 + 3784);
  if (a3 - v17 < 0) {
    goto LABEL_16;
  }
  if (!a2) {
    goto LABEL_16;
  }
  if ((unint64_t)v15 + v16 < a2) {
    goto LABEL_16;
  }
  unint64_t v18 = a2 + v17;
  if (v18 < (unint64_t)v15) {
    goto LABEL_16;
  }
  uint64_t v19 = v18 - (void)v15;
  if (v19 < 0) {
    goto LABEL_16;
  }
  if (*(unsigned char *)(a1 + 3780)
    || (char v20 = *(unsigned char *)(a1 + 3781), (v20 & 0xFC) != 4)
    || (int v21 = *(_DWORD *)(a1 + 3808), (v20 & 0xFE) == 4) && (v21 | 4) != 4 && *(unsigned char *)(a1 + 3800))
  {
    uint64_t result = 4;
    goto LABEL_60;
  }
  if ((*(_DWORD *)(a1 + 3812) - 3) < 2 || (v21 | 2) == 3)
  {
LABEL_16:
    uint64_t result = 3;
LABEL_60:
    *(_DWORD *)(a1 + 3872) = result;
    return result;
  }
  if ((unint64_t)v19 >= 4)
  {
    int v24 = *v15;
    if ((v19 & 0xFFFFFFFFFFFFFFFCLL) == 4)
    {
      int v23 = 0;
      int v25 = 0;
      uint64_t v26 = 0;
      int v27 = 0;
      unsigned int v28 = *(unsigned __int8 *)(a1 + 3820);
      if (!*(unsigned char *)(a1 + 3820)) {
        goto LABEL_21;
      }
    }
    else
    {
      int v23 = v15[1];
      if ((v19 & 0xFFFFFFFFFFFFFFFCLL) == 8)
      {
        int v25 = 0;
        uint64_t v26 = 0;
        int v27 = 0;
        unsigned int v28 = *(unsigned __int8 *)(a1 + 3820);
        if (!*(unsigned char *)(a1 + 3820)) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v26 = v19 - 12;
        int v27 = (unsigned __int8 *)(v15 + 3);
        int v25 = v15[2];
        unsigned int v28 = *(unsigned __int8 *)(a1 + 3820);
        if (!*(unsigned char *)(a1 + 3820)) {
          goto LABEL_21;
        }
      }
    }
  }
  else
  {
    int v23 = 0;
    int v24 = 0;
    int v25 = 0;
    uint64_t v26 = 0;
    int v27 = 0;
    unsigned int v28 = *(unsigned __int8 *)(a1 + 3820);
    if (!*(unsigned char *)(a1 + 3820))
    {
LABEL_21:
      unsigned int v29 = 0;
      unsigned int v30 = 0;
      goto LABEL_36;
    }
  }
  if (v26)
  {
    unsigned int v28 = *v27;
    if (v26 == 1)
    {
      unsigned int v29 = 0;
    }
    else
    {
      unsigned int v29 = v27[1];
      if (v26 != 2)
      {
        v26 -= 3;
        unsigned int v30 = v27[2];
        v27 += 3;
        goto LABEL_36;
      }
    }
    unsigned int v30 = 0;
    uint64_t v26 = 0;
    int v27 = 0;
  }
  else
  {
    unsigned int v29 = 0;
    unsigned int v28 = 0;
    unsigned int v30 = 0;
    int v27 = 0;
  }
LABEL_36:
  if (!v27) {
    goto LABEL_16;
  }
  unsigned int v31 = (int)v28 <= (int)v29 ? v29 : v28;
  int v32 = v28 <= v29 ? v29 : v28;
  unsigned int v33 = v31 >= v30 ? v32 : v30;
  if (v33 >= 0x1D) {
    goto LABEL_16;
  }
  *(_DWORD *)(a1 + 2688) = v28;
  *(_DWORD *)(a1 + 2692) = v29;
  *(_DWORD *)(a1 + 2696) = v30;
  gcl::tmesh::DecoderImpl::init((gcl::tmesh::DecoderImpl *)a1, *(_DWORD *)(a1 + 3788), *(_DWORD *)(a1 + 3792));
  inited = gcl::tmesh::DecoderImpl::initArithmeticDecoder(a1, v27, v26);
  if (!inited) {
    goto LABEL_16;
  }
  uint64_t v36 = v35;
  if (v35 < 0) {
    goto LABEL_16;
  }
  unsigned int v37 = inited;
  uint64_t v38 = a6;
  if (*(unsigned char *)(a1 + 3800)) {
    uint64_t v38 = *(void *)(a1 + 128);
  }
  uint64_t v39 = *(void *)(a1 + 104);
  if (*(unsigned char *)(a1 + 3816)) {
    gcl::tmesh::DecoderImpl::decompressAdaptiveTraversal((_DWORD *)a1, v39, v38);
  }
  else {
    gcl::tmesh::DecoderImpl::decompress(a1, v39, v38);
  }
  if (!*(unsigned char *)(a1 + 3800))
  {
    std::vector<int>::resize((std::vector<int> *)(a1 + 56), 2uLL);
    uint64_t v41 = *(_DWORD **)(a1 + 56);
    *uint64_t v41 = 0;
    v41[1] = *(_DWORD *)(a1 + 3792);
    goto LABEL_63;
  }
  if (!a7)
  {
LABEL_59:
    uint64_t result = 5;
    goto LABEL_60;
  }
  if (!gcl::tmesh::DecoderImpl::initArithmeticDecoder(a1, v37, v36) || v40 < 0) {
    goto LABEL_16;
  }
  gcl::tmesh::DecoderImpl::decompressTriangleOrder((gcl::tmesh::DecoderImpl *)a1, a7);
  gcl::tmesh::DecoderImpl::updateMappingInformation((std::vector<int> *)a1, a7, a6);
LABEL_63:
  uint64_t result = *(unsigned int *)(a1 + 3872);
  if (!result)
  {
    if (*(int *)(a1 + 3792) >= 1)
    {
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      do
      {
        uint64_t v44 = *(void *)(a1 + 128) + v42;
        uint64_t v45 = *(void *)(a6 + v42);
        *(_DWORD *)(v44 + 8) = *(_DWORD *)(a6 + v42 + 8);
        *(void *)uint64_t v44 = v45;
        ++v43;
        v42 += 12;
      }
      while (v43 < *(int *)(a1 + 3792));
    }
    int v46 = *(_DWORD *)(a1 + 3788);
    if (v24 || v23 || v25)
    {
      if (v46 >= 1)
      {
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        do
        {
          char v54 = (_DWORD *)(*(void *)(a1 + 104) + v52);
          int v55 = *v54 + v24;
          int v56 = v54[1] + v23;
          LODWORD(v54) = v54[2] + v25;
          char v57 = (_DWORD *)(a5 + v52);
          *char v57 = v55;
          v57[1] = v56;
          v57[2] = v54;
          ++v53;
          v52 += 12;
        }
        while (v53 < *(int *)(a1 + 3788));
      }
    }
    else if (v46 >= 1)
    {
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      do
      {
        uint64_t v49 = (uint64_t *)(*(void *)(a1 + 104) + v47);
        uint64_t v50 = a5 + v47;
        uint64_t v51 = *v49;
        *(_DWORD *)(v50 + 8) = *((_DWORD *)v49 + 2);
        *(void *)uint64_t v50 = v51;
        ++v48;
        v47 += 12;
      }
      while (v48 < *(int *)(a1 + 3788));
    }
    uint64_t result = 0;
    *a4 = *(unsigned int *)(a1 + 3784);
  }
  return result;
}

unsigned __int8 *gcl::tmesh::DecoderImpl::initArithmeticDecoder(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (a3 < 4) {
    return 0;
  }
  unsigned int v10 = *a2;
  char v8 = (unsigned __int8 *)(a2 + 1);
  uint64_t v9 = (unsigned __int8 *)v10;
  if (v8)
  {
    long long v11 = &v9[(void)v8];
    if (!&v9[(void)v8]) {
      return 0;
    }
  }
  else
  {
    long long v11 = v9;
    char v8 = 0;
    if (!v9) {
      return 0;
    }
  }
  if (a3 - 4 - (void)v9 < 0) {
    return 0;
  }
  *(_DWORD *)(a1 + 2704) = v9;
  *(void *)(a1 + 2712) = v8;
  *(void *)&long long v3 = 0xFFFF000000000000;
  *((void *)&v3 + 1) = 0xFFFF000000000000;
  *(_OWORD *)(a1 + 2728) = v3;
  *(void *)(a1 + 2744) = 16;
  if (!v9)
  {
    int v4 = -16777216;
    goto LABEL_13;
  }
  int v4 = *v8 << 24;
  *(_DWORD *)(a1 + 2736) = v4;
  if (v9 == 1)
  {
LABEL_13:
    int v5 = v4 | 0xFF0000;
    goto LABEL_14;
  }
  int v5 = v4 | (v8[1] << 16);
  *(_DWORD *)(a1 + 2736) = v5;
  if (v9 <= 2)
  {
LABEL_14:
    int v6 = v5 | 0xFF00;
    goto LABEL_15;
  }
  int v6 = v5 | (v8[2] << 8);
  *(_DWORD *)(a1 + 2736) = v6;
  if (v9 == 3)
  {
LABEL_15:
    int v7 = 255;
    goto LABEL_16;
  }
  int v7 = v8[3];
LABEL_16:
  *(_DWORD *)(a1 + 2736) = v7 | v6;
  *(void *)(a1 + 2720) = 3;
  memcpy((void *)(a1 + 2752), &gcl::ArithmeticDecoder::probUpdateLutInterleaved, 0x400uLL);
  return v11;
}

void geo::codec::decompressBinaryBlob(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7 = *a6;
  for (uint64_t i = a6[1]; i != v7; i -= 72)
  {
    uint64_t v9 = *(void *)(i - 32);
    if (v9)
    {
      *(void *)(i - 24) = v9;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(i - 8) + 40))(*(void *)(i - 8), v9, *(void *)(i - 16) - v9);
    }
    uint64_t v10 = *(void *)(i - 64);
    if (v10)
    {
      *(void *)(i - 56) = v10;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(i - 40) + 40))(*(void *)(i - 40), v10, *(void *)(i - 48) - v10);
    }
  }
  a6[1] = v7;
  operator new();
}

void sub_188FABCDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t gcl::hls::checkBitstream(_DWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (!a1 || a2 < 0 || (unint64_t)a2 < 4) {
    return 3;
  }
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 4 || (unint64_t)a2 < 0x10 || a1 == (_DWORD *)-16 || !a4) {
    return 3;
  }
  int v4 = (unsigned __int8 *)(a1 + 2);
  uint64_t v5 = 4 * a4;
  unint64_t v6 = a1[3];
  while (*a3 != *a1)
  {
    ++a3;
    v5 -= 4;
    if (!v5) {
      return 3;
    }
  }
  uint64_t v8 = 16;
  if (a2 > 16) {
    uint64_t v8 = a2;
  }
  BOOL v9 = (a2 & (unint64_t)~(a2 >> 63)) - v8 + 16 > v6 || a2 < (uint64_t)v6;
  if (v9 || a1 == (_DWORD *)-8 || (unsigned __int8 *)((char *)a1 + v6) < v4) {
    return 3;
  }
  unsigned int v10 = -1;
  for (unint64_t i = v6 - 8; i; --i)
  {
    int v12 = *v4++;
    unsigned int v10 = __const__ZN3gcl12computeCRC32EPKhm_table[v12 ^ HIBYTE(v10)] ^ (v10 << 8);
  }
  if (a1[1] == v10) {
    return 0;
  }
  else {
    return 3;
  }
}

uint64_t gcl::tmesh::DecoderImpl::parsePositionsAndConnectivityInfo(uint64_t a1, uint64_t a2, uint64_t a3, int16x8_t a4)
{
  if (a2 < 4) {
    return 0;
  }
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 4
    || a2 == 8
    || a2 == 9
    || (a2 & 0xFFFFFFFFFFFFFFFELL) == 0xA
    || v4 == 12
    || v4 == 16
    || v4 == 20
    || a2 == 24
    || a2 == 25
    || a2 == 26
    || a2 == 27)
  {
    return 0;
  }
  if ((unint64_t)a2 < 0x20) {
    return 0;
  }
  if (*(_DWORD *)a1 != -90009999) {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 4);
  char v7 = *(unsigned char *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 9);
  __int16 v9 = *(_WORD *)(a1 + 10);
  int v10 = *(_DWORD *)(a1 + 12);
  int v11 = *(_DWORD *)(a1 + 16) & 0x7FFFFFFF;
  int v12 = *(_DWORD *)(a1 + 20) & 0x7FFFFFFF;
  int v13 = *(unsigned __int8 *)(a1 + 24);
  int v14 = *(unsigned __int8 *)(a1 + 25);
  unsigned int v15 = *(unsigned __int8 *)(a1 + 26);
  int v16 = *(unsigned __int8 *)(a1 + 27);
  *(uint16x4_t *)a4.i8 = vshl_u16((uint16x4_t)vdup_n_s16(v15), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL);
  *(_DWORD *)a3 = 0;
  *(unsigned char *)(a3 + 4) = v7;
  *(unsigned char *)(a3 + 5) = v8;
  *(_WORD *)(a3 + 6) = v9;
  *(_DWORD *)(a3 + 8) = v10;
  *(_DWORD *)(a3 + 12) = v11;
  *(_DWORD *)(a3 + 16) = v12;
  *(_DWORD *)(a3 + 20) = v16;
  *(unsigned char *)(a3 + 24) = v15 & 1;
  *(_DWORD *)(a3 + 28) = v6;
  *(_DWORD *)(a3 + 32) = v13;
  *(_DWORD *)(a3 + 36) = v14;
  a4.i32[0] &= 0xFF01FF01;
  a4.i16[2] &= 0xFF01u;
  a4.i16[3] &= 0xFF01u;
  *(_DWORD *)(a3 + 40) = vmovn_s16(a4).u32[0];
  *(unsigned char *)(a3 + 44) = (v15 & 0x20) != 0;
  return a1 + 32;
}

uint64_t std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  uint64_t v5 = *(unsigned char **)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      int v11 = &v5[a2];
      do
      {
        if (v5) {
          unsigned char *v5 = 0;
        }
        ++v5;
        --v2;
      }
      while (v2);
      uint64_t v5 = v11;
    }
    *(void *)(result + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(void *)result;
    char v7 = &v5[-*(void *)result];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v4 - v6;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), v10, 1);
    }
    else {
      uint64_t result = 0;
    }
    int v12 = &v7[result];
    int v13 = &v7[result + v2];
    int v14 = &v7[result];
    do
    {
      if (v14) {
        *int v14 = 0;
      }
      ++v14;
      --v2;
    }
    while (v2);
    uint64_t v16 = *(void *)v3;
    uint64_t v15 = *(void *)(v3 + 8);
    unint64_t v17 = v15 - *(void *)v3;
    if (v15 != *(void *)v3)
    {
      if (v17 < 0x20) {
        goto LABEL_36;
      }
      if ((unint64_t)(v6 - (void)&v5[result] + v15) < 0x20) {
        goto LABEL_36;
      }
      v12 -= v17 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v18 = &v7[result - 16];
      uint64_t v19 = (long long *)(v15 - 16);
      unint64_t v20 = v17 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *unint64_t v18 = v21;
        v18 -= 2;
        v19 -= 2;
        v20 -= 32;
      }
      while (v20);
      v15 -= v17 & 0xFFFFFFFFFFFFFFE0;
      if (v17 != (v17 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_36:
        do
        {
          char v22 = *(unsigned char *)--v15;
          *--int v12 = v22;
        }
        while (v15 != v16);
      }
      uint64_t v15 = *(void *)v3;
    }
    *(void *)uint64_t v3 = v12;
    *(void *)(v3 + 8) = v13;
    uint64_t v23 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = result + v10;
    if (v15) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v15, v23 - v15);
    }
  }
  return result;
}

uint64_t gcl::tmesh::Decoder::getAttributeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 < 4) {
    return 3;
  }
  uint64_t result = 3;
  if (a2 != 8)
  {
    uint64_t v5 = a2 & 0x7FFFFFFFFFFFFFFCLL;
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != 4
      && a2 != 9
      && (a2 & 0xFFFFFFFFFFFFFFFELL) != 0xA
      && v5 != 12
      && v5 != 16
      && (unint64_t)(a2 - 20) >= 5
      && (unint64_t)a2 >= 0x1C
      && a1 != -32
      && (unint64_t)a2 >= 0x20
      && *(_DWORD *)a1 == -290009985)
    {
      uint64_t result = 0;
      char v6 = *(unsigned char *)(a1 + 8);
      char v7 = *(unsigned char *)(a1 + 9);
      __int16 v8 = *(_WORD *)(a1 + 10);
      int v9 = *(_DWORD *)(a1 + 12);
      int v10 = *(_DWORD *)(a1 + 16);
      int v11 = *(unsigned __int8 *)(a1 + 20);
      int v12 = *(unsigned __int8 *)(a1 + 21);
      int v13 = *(unsigned __int8 *)(a1 + 22);
      int v14 = *(unsigned __int8 *)(a1 + 26);
      int v15 = *(unsigned __int8 *)(a1 + 27);
      *(unsigned char *)(a3 + 4) = v6;
      *(_DWORD *)a3 = 0;
      *(unsigned char *)(a3 + 5) = v7;
      *(_WORD *)(a3 + 6) = v8;
      *(_DWORD *)(a3 + 8) = v9;
      *(_DWORD *)(a3 + 12) = v10 & 0x7FFFFFFF;
      *(_DWORD *)(a3 + 16) = v13;
      *(_DWORD *)(a3 + 20) = v12;
      *(_DWORD *)(a3 + 24) = v15;
      *(_DWORD *)(a3 + 28) = v11;
      *(_DWORD *)(a3 + 32) = v14;
    }
  }
  return result;
}

void gcl::tmesh::DecoderImpl::~DecoderImpl(gcl::tmesh::DecoderImpl *this)
{
  unint64_t v2 = (void *)*((void *)this + 333);
  if (v2)
  {
    *((void *)this + 334) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 330);
  if (v3)
  {
    *((void *)this + 331) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 327);
  if (v4)
  {
    *((void *)this + 328) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 324);
  if (v5)
  {
    *((void *)this + 325) = v5;
    operator delete(v5);
  }
  char v6 = (void *)*((void *)this + 321);
  if (v6)
  {
    *((void *)this + 322) = v6;
    operator delete(v6);
  }
  char v7 = (void *)*((void *)this + 318);
  if (v7)
  {
    *((void *)this + 319) = v7;
    operator delete(v7);
  }
  __int16 v8 = (void *)*((void *)this + 315);
  if (v8)
  {
    *((void *)this + 316) = v8;
    operator delete(v8);
  }
  int v9 = (void *)*((void *)this + 312);
  if (v9)
  {
    *((void *)this + 313) = v9;
    operator delete(v9);
  }
  int v10 = (void *)*((void *)this + 309);
  if (v10)
  {
    *((void *)this + 310) = v10;
    operator delete(v10);
  }
  int v11 = (void *)*((void *)this + 306);
  if (v11)
  {
    *((void *)this + 307) = v11;
    operator delete(v11);
  }
  int v12 = (void *)*((void *)this + 303);
  if (v12)
  {
    *((void *)this + 304) = v12;
    operator delete(v12);
  }
  uint64_t v13 = 1536;
  do
  {
    int v14 = *(void **)((char *)this + v13 + 232);
    if (v14)
    {
      *(void *)((char *)this + v13 + 240) = v14;
      operator delete(v14);
    }
    v13 -= 24;
  }
  while (v13);
  int v15 = (void *)*((void *)this + 28);
  if (v15)
  {
    *((void *)this + 29) = v15;
    operator delete(v15);
  }
  uint64_t v16 = (void *)*((void *)this + 25);
  if (v16)
  {
    *((void *)this + 26) = v16;
    operator delete(v16);
  }
  unint64_t v17 = (void *)*((void *)this + 22);
  if (v17)
  {
    *((void *)this + 23) = v17;
    operator delete(v17);
  }
  unint64_t v18 = (void *)*((void *)this + 19);
  if (v18)
  {
    *((void *)this + 20) = v18;
    operator delete(v18);
  }
  uint64_t v19 = (void *)*((void *)this + 16);
  if (v19)
  {
    *((void *)this + 17) = v19;
    operator delete(v19);
  }
  unint64_t v20 = (void *)*((void *)this + 13);
  if (v20)
  {
    *((void *)this + 14) = v20;
    operator delete(v20);
  }
  long long v21 = (void *)*((void *)this + 10);
  if (v21)
  {
    *((void *)this + 11) = v21;
    operator delete(v21);
  }
  char v22 = (void *)*((void *)this + 7);
  if (v22)
  {
    *((void *)this + 8) = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)*((void *)this + 4);
  if (v23)
  {
    *((void *)this + 5) = v23;
    operator delete(v23);
  }
  int v24 = (void *)*((void *)this + 1);
  if (v24)
  {
    *((void *)this + 2) = v24;
    operator delete(v24);
  }
}

gcl::tmesh::DecoderImpl *gcl::tmesh::DecoderImpl::DecoderImpl(gcl::tmesh::DecoderImpl *this)
{
  *(_OWORD *)((char *)this + 236) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 63) = -1;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  bzero((char *)this + 256, 0x700uLL);
  memset_pattern16((char *)this + 2048, &memset_pattern_21, 0xAuLL);
  *((_WORD *)this + 1029) = 0x8000;
  memset_pattern16((char *)this + 2060, &memset_pattern_22, 0x50uLL);
  memset_pattern16((char *)this + 2140, &memset_pattern_23, 0x60uLL);
  *((_DWORD *)this + 559) = -2147450880;
  memset_pattern16((char *)this + 2240, &memset_pattern_24, 0x20uLL);
  *((void *)this + 284) = 0x8000800080008000;
  memset_pattern16((char *)this + 2280, &memset_pattern_25, 0x80uLL);
  memset_pattern16((char *)this + 2408, &memset_pattern_26, 6uLL);
  *((_WORD *)this + 1207) = 0x8000;
  memset_pattern16((char *)this + 2416, &memset_pattern_27, 6uLL);
  *((void *)this + 339) = 0;
  *((void *)this + 472) = 0;
  *((void *)this + 474) = 0;
  *((void *)this + 473) = 0;
  *((unsigned char *)this + 3800) = 0;
  *((_DWORD *)this + 951) = 0;
  *(_OWORD *)((char *)this + 2424) = 0u;
  *(_OWORD *)((char *)this + 2440) = 0u;
  *(_OWORD *)((char *)this + 2456) = 0u;
  *(_OWORD *)((char *)this + 2472) = 0u;
  *(_OWORD *)((char *)this + 2488) = 0u;
  *(_OWORD *)((char *)this + 2504) = 0u;
  *(_OWORD *)((char *)this + 2520) = 0u;
  *(_OWORD *)((char *)this + 2536) = 0u;
  *(_OWORD *)((char *)this + 2552) = 0u;
  *(_OWORD *)((char *)this + 2568) = 0u;
  *(_OWORD *)((char *)this + 2584) = 0u;
  *(_OWORD *)((char *)this + 2600) = 0u;
  *(_OWORD *)((char *)this + 2616) = 0u;
  *(_OWORD *)((char *)this + 2632) = 0u;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *(_OWORD *)((char *)this + 2664) = 0u;
  *((void *)this + 335) = 0;
  *((void *)this + 476) = 0x200000004;
  *((_DWORD *)this + 954) = 16843009;
  *((unsigned char *)this + 3820) = 1;
  *((_OWORD *)this + 239) = 0u;
  *((_OWORD *)this + 240) = 0u;
  *((void *)this + 482) = 0;
  *((void *)this + 483) = 0x200000004;
  *((_DWORD *)this + 968) = 6;
  return this;
}

void gcl::tmesh::DecoderImpl::init(gcl::tmesh::DecoderImpl *this, int a2, int a3)
{
  uint64_t v7 = *((void *)this + 13);
  uint64_t v8 = *((void *)this + 14);
  char v6 = (char *)this + 104;
  unint64_t v9 = a2;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 2);
  BOOL v11 = a2 >= v10;
  unint64_t v12 = a2 - v10;
  if (v12 != 0 && v11)
  {
    std::vector<gcl::Vector3<int>>::__append((uint64_t)v6, v12);
  }
  else if (!v11)
  {
    *((void *)this + 14) = v7 + 12 * (int)v9;
  }
  *(void *)this = 0;
  uint64_t v13 = *((void *)this + 7);
  if (*((void *)this + 8) != v13) {
    *((void *)this + 8) = v13;
  }
  uint64_t v14 = *((void *)this + 16);
  *(void *)((char *)this + 3836) = 0;
  *((_DWORD *)this + 947) = a2;
  *((_DWORD *)this + 948) = a3;
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 17) - v14) >> 2);
  if (a3 <= v15)
  {
    if (a3 < v15) {
      *((void *)this + 17) = v14 + 12 * a3;
    }
  }
  else
  {
    std::vector<gcl::Vector3<int>>::__append((uint64_t)this + 128, a3 - v15);
  }
  unint64_t v17 = (char *)*((void *)this + 4);
  uint64_t v16 = (char *)*((void *)this + 5);
  unint64_t v18 = v16 - v17;
  if ((unint64_t)(v16 - v17) <= 0x3F)
  {
    uint64_t v19 = *((void *)this + 6);
    if (v19 - (uint64_t)v16 >= 64 - v18)
    {
      bzero(*((void **)this + 5), 64 - v18);
      *((void *)this + 5) = v17 + 64;
      goto LABEL_41;
    }
    unint64_t v20 = v19 - (void)v17;
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= 0x40) {
      uint64_t v21 = 64;
    }
    if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v22 = v21;
    }
    uint64_t v23 = (char *)operator new(v22);
    int v24 = &v23[v18];
    int v25 = &v23[v22];
    bzero(&v23[v18], 64 - v18);
    if (v16 == v17) {
      goto LABEL_39;
    }
    if (v18 >= 8 && (unint64_t)(v17 - v23) >= 0x20)
    {
      if (v18 < 0x20)
      {
        unint64_t v26 = 0;
        goto LABEL_31;
      }
      unint64_t v26 = v18 & 0xFFFFFFFFFFFFFFE0;
      int v27 = v16 - 16;
      unsigned int v28 = &v23[v16 - 16 - v17];
      unint64_t v29 = v18 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v30 = *(_OWORD *)v27;
        *((_OWORD *)v28 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)unsigned int v28 = v30;
        v28 -= 32;
        v27 -= 32;
        v29 -= 32;
      }
      while (v29);
      if (v18 == v26) {
        goto LABEL_38;
      }
      if ((v18 & 0x18) != 0)
      {
LABEL_31:
        v24 -= v18 & 0xFFFFFFFFFFFFFFF8;
        unsigned int v31 = &v16[-v26 - 8];
        int v32 = (char *)(v31 - v17);
        unint64_t v33 = v26 - (v18 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v34 = *(void *)v31;
          v31 -= 8;
          *(void *)&v32[(void)v23] = v34;
          v32 -= 8;
          v33 += 8;
        }
        while (v33);
        v16 -= v18 & 0xFFFFFFFFFFFFFFF8;
        if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_38;
        }
        goto LABEL_36;
      }
      v24 -= v26;
      v16 -= v26;
    }
LABEL_36:
    uint64_t v35 = v24 - 1;
    do
    {
      char v36 = *--v16;
      *v35-- = v36;
    }
    while (v16 != v17);
LABEL_38:
    uint64_t v16 = v17;
    int v24 = v23;
LABEL_39:
    *((void *)this + 4) = v24;
    *((void *)this + 5) = v23 + 64;
    *((void *)this + 6) = v25;
    if (v16) {
      operator delete(v16);
    }
    goto LABEL_41;
  }
  if (v18 != 64) {
    *((void *)this + 5) = v17 + 64;
  }
LABEL_41:
  uint64_t v37 = *((void *)this + 1);
  unint64_t v38 = *((void *)this + 2) - v37;
  if (v38 > 0xFF)
  {
    if (v38 != 256) {
      *((void *)this + 2) = v37 + 256;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<int> *)((char *)this + 8), 64 - (v38 >> 2));
  }
  uint64_t v40 = (char *)*((void *)this + 19);
  uint64_t v39 = (char *)*((void *)this + 20);
  unint64_t v41 = (v39 - v40) >> 4;
  unint64_t v42 = v9 - v41;
  if (v9 <= v41)
  {
    if (v9 < v41)
    {
      uint64_t v39 = &v40[16 * v9];
      *((void *)this + 20) = v39;
    }
  }
  else
  {
    uint64_t v43 = *((void *)this + 21);
    if (v42 <= (v43 - (uint64_t)v39) >> 4)
    {
      bzero(*((void **)this + 20), 16 * v42);
      uint64_t v51 = &v39[16 * v42];
      *((void *)this + 20) = v51;
    }
    else
    {
      if (a2 < 0) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v44 = v43 - (void)v40;
      uint64_t v45 = v44 >> 3;
      if (v44 >> 3 <= v9) {
        uint64_t v45 = v9;
      }
      BOOL v11 = (unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0;
      unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
      if (!v11) {
        unint64_t v46 = v45;
      }
      if (v46 >> 60) {
        goto LABEL_130;
      }
      uint64_t v47 = 16 * v46;
      uint64_t v48 = (char *)operator new(16 * v46);
      uint64_t v49 = &v48[16 * v41];
      uint64_t v50 = &v48[v47];
      bzero(v49, 16 * v42);
      uint64_t v51 = &v49[16 * v42];
      if (v39 != v40)
      {
        do
        {
          *((_OWORD *)v49 - 1) = *((_OWORD *)v39 - 1);
          v49 -= 16;
          v39 -= 16;
        }
        while (v39 != v40);
        uint64_t v39 = (char *)*((void *)this + 19);
      }
      *((void *)this + 19) = v49;
      *((void *)this + 20) = v51;
      *((void *)this + 21) = v50;
      if (v39)
      {
        operator delete(v39);
        uint64_t v51 = (char *)*((void *)this + 20);
      }
    }
    uint64_t v40 = (char *)*((void *)this + 19);
    uint64_t v39 = v51;
  }
  if (v40 != v39) {
    memset(v40, 255, (v39 - v40) & 0xFFFFFFFFFFFFFFF0);
  }
  uint64_t v52 = (char *)*((void *)this + 22);
  uint64_t v53 = (char *)*((void *)this + 23);
  unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 2);
  if (v9 <= v54)
  {
    if (v9 < v54)
    {
      uint64_t v53 = &v52[12 * (int)v9];
      *((void *)this + 23) = v53;
    }
  }
  else
  {
    std::vector<gcl::Vector3<int>>::__append((uint64_t)this + 176, v9 - v54);
    uint64_t v52 = (char *)*((void *)this + 22);
    uint64_t v53 = (char *)*((void *)this + 23);
  }
  if (v53 - v52 >= 1) {
    memset(v52, 255, 12 * ((v53 - v52) / 0xCuLL - ((unint64_t)(v53 - v52) > 0xB)) + 12);
  }
  int v55 = (char *)*((void *)this + 25);
  int v56 = (char *)*((void *)this + 26);
  unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v55) >> 2);
  if (v9 <= v57)
  {
    if (v9 < v57)
    {
      int v56 = &v55[12 * (int)v9];
      *((void *)this + 26) = v56;
    }
  }
  else
  {
    std::vector<gcl::Vector3<int>>::__append((uint64_t)this + 200, v9 - v57);
    int v55 = (char *)*((void *)this + 25);
    int v56 = (char *)*((void *)this + 26);
  }
  if (v56 - v55 >= 1) {
    memset(v55, 255, 12 * ((v56 - v55) / 0xCuLL - ((unint64_t)(v56 - v55) > 0xB)) + 12);
  }
  if (!*((unsigned char *)this + 3817) || !*((unsigned char *)this + 3816))
  {
    char v58 = (char *)*((void *)this + 10);
    BOOL v59 = (char *)*((void *)this + 11);
    unint64_t v60 = (v59 - v58) >> 2;
    if (v9 <= v60)
    {
      if (v9 < v60)
      {
        BOOL v59 = &v58[4 * v9];
        *((void *)this + 11) = v59;
      }
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 80), v9 - v60);
      char v58 = (char *)*((void *)this + 10);
      BOOL v59 = (char *)*((void *)this + 11);
    }
    if (v59 - v58 >= 1) {
      bzero(v58, 4 * (((unint64_t)(v59 - v58) >> 2) - ((unint64_t)(v59 - v58) > 3)) + 4);
    }
  }
  if (*((unsigned char *)this + 3816))
  {
    long long v62 = (char *)*((void *)this + 28);
    long long v61 = (char *)*((void *)this + 29);
    long long v63 = (char *)(v61 - v62);
    unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((v61 - v62) >> 2);
    unint64_t v65 = v9 - v64;
    if (v9 <= v64)
    {
      if (v9 >= v64)
      {
LABEL_113:
        uint64_t v85 = (const void **)((char *)this + 256);
        while (1)
        {
          char v88 = *v85;
          unint64_t v87 = v85[1];
          size_t v89 = v87 - (unsigned char *)*v85;
          if (v87 == *v85)
          {
            char v91 = 0;
            uint64_t v90 = 0;
          }
          else
          {
            if ((v89 & 0x8000000000000000) != 0) {
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v90 = (char *)operator new(v87 - (unsigned char *)*v85);
            memcpy(v90, v88, v89);
            if (v89 > 0x1FF)
            {
              uint64_t v86 = v90;
              goto LABEL_115;
            }
            v89 >>= 3;
            char v91 = &v90[8 * v89];
          }
          unint64_t v92 = (char *)operator new(0x200uLL);
          if (v91 != v90)
          {
            unint64_t v93 = (v91 - 8 - v90) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v86 = &v92[8 * v89 - v93 - 8];
            memcpy(v86, &v91[-v93 - 8], v93 + 8);
            if (!v90) {
              goto LABEL_115;
            }
LABEL_125:
            operator delete(v90);
            goto LABEL_115;
          }
          uint64_t v86 = &v92[8 * v89];
          if (v90) {
            goto LABEL_125;
          }
LABEL_115:
          operator delete(v86);
          v85 += 3;
          if (v85 == (const void **)((char *)this + 1792)) {
            goto LABEL_126;
          }
        }
      }
      char v80 = &v62[12 * (int)v9];
    }
    else
    {
      uint64_t v66 = *((void *)this + 30);
      if (0xAAAAAAAAAAAAAAABLL * ((v66 - (uint64_t)v61) >> 2) < v65)
      {
        if (a2 < 0) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((v66 - (uint64_t)v62) >> 2);
        unint64_t v68 = 0x5555555555555556 * ((v66 - (uint64_t)v62) >> 2);
        if (v68 <= v9) {
          unint64_t v68 = v9;
        }
        if (v67 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v69 = 0x1555555555555555;
        }
        else {
          unint64_t v69 = v68;
        }
        if (v69 <= 0x1555555555555555)
        {
          uint64_t v70 = (char *)operator new(12 * v69);
          BOOL v71 = &v70[4 * ((v61 - v62) >> 2)];
          uint64_t v72 = &v70[12 * v9];
          unint64_t v73 = 12 * v9 - (void)v63 - 12;
          int v74 = v71;
          if (v73 < 0x54) {
            goto LABEL_135;
          }
          unint64_t v75 = v73 / 0xC + 1;
          int v74 = &v71[12 * (v75 & 0x3FFFFFFFFFFFFFF8)];
          uint64_t v76 = v75 & 0x3FFFFFFFFFFFFFF8;
          unsigned int v77 = &v70[4 * ((v61 - v62) >> 2)];
          do
          {
            *(_OWORD *)unsigned int v77 = xmmword_18A6434F0;
            *((_OWORD *)v77 + 1) = xmmword_18A6434E0;
            *((_OWORD *)v77 + 4) = xmmword_18A6434E0;
            *((_OWORD *)v77 + 5) = xmmword_18A627C30;
            *((_OWORD *)v77 + 2) = xmmword_18A627C30;
            *((_OWORD *)v77 + 3) = xmmword_18A6434F0;
            v77 += 96;
            v76 -= 8;
          }
          while (v76);
          if (v75 != (v75 & 0x3FFFFFFFFFFFFFF8))
          {
LABEL_135:
            do
            {
              *(void *)int v74 = 0xFFFFFFFF00000000;
              *((_DWORD *)v74 + 2) = -1;
              v74 += 12;
            }
            while (v74 != v72);
          }
          if (v61 != v62)
          {
            do
            {
              uint64_t v78 = *(void *)(v61 - 12);
              v61 -= 12;
              int v79 = *((_DWORD *)v61 + 2);
              *(void *)(v71 - 12) = v78;
              v71 -= 12;
              *((_DWORD *)v71 + 2) = v79;
            }
            while (v61 != v62);
            long long v61 = (char *)*((void *)this + 28);
          }
          *((void *)this + 28) = v71;
          *((void *)this + 29) = v72;
          *((void *)this + 30) = &v70[12 * v69];
          if (v61) {
            operator delete(v61);
          }
          goto LABEL_113;
        }
LABEL_130:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v80 = &v61[12 * v65];
      unint64_t v81 = 12 * (int)v9 - (void)v63 - 12;
      if (v81 >= 0x54)
      {
        unint64_t v83 = v81 / 0xC + 1;
        char v82 = &v61[12 * (v83 & 0x3FFFFFFFFFFFFFF8)];
        uint64_t v84 = v83 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          *(_OWORD *)long long v61 = xmmword_18A6434F0;
          *((_OWORD *)v61 + 1) = xmmword_18A6434E0;
          *((_OWORD *)v61 + 4) = xmmword_18A6434E0;
          *((_OWORD *)v61 + 5) = xmmword_18A627C30;
          *((_OWORD *)v61 + 2) = xmmword_18A627C30;
          *((_OWORD *)v61 + 3) = xmmword_18A6434F0;
          v61 += 96;
          v84 -= 8;
        }
        while (v84);
        if (v83 == (v83 & 0x3FFFFFFFFFFFFFF8)) {
          goto LABEL_112;
        }
      }
      else
      {
        char v82 = (char *)*((void *)this + 29);
      }
      do
      {
        *(void *)char v82 = 0xFFFFFFFF00000000;
        *((_DWORD *)v82 + 2) = -1;
        v82 += 12;
      }
      while (v82 != v80);
    }
LABEL_112:
    *((void *)this + 29) = v80;
    goto LABEL_113;
  }
LABEL_126:
  memset_pattern16((char *)this + 2048, &memset_pattern_27, 0xAuLL);
  *((_WORD *)this + 1029) = 0x8000;
  memset_pattern16((char *)this + 2060, &memset_pattern_27, 0x10uLL);
  memset_pattern16((char *)this + 2076, &memset_pattern_27, 0x10uLL);
  memset_pattern16((char *)this + 2092, &memset_pattern_27, 0x10uLL);
  memset_pattern16((char *)this + 2108, &memset_pattern_27, 0x10uLL);
  memset_pattern16((char *)this + 2124, &memset_pattern_27, 0x10uLL);
  memset_pattern16((char *)this + 2140, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2146, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2152, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2158, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2164, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2170, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2176, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2182, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2188, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2194, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2200, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2206, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2212, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2218, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2224, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2230, &memset_pattern_27, 6uLL);
  memset_pattern16((char *)this + 2240, &memset_pattern_27, 0x20uLL);
  *((_DWORD *)this + 559) = -2147450880;
  *((void *)this + 284) = 0x8000800080008000;
  memset_pattern16((char *)this + 2416, &memset_pattern_27, 6uLL);
  gcl::tmesh::ACContext::init((std::vector<int> *)this + 101, 3);

  gcl::tmesh::ACContext::init((std::vector<int> *)this + 106, 3);
}

void sub_188FACFE8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<gcl::Vector3<int>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  char v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(v5, v13);
      char v6 = &v5[v13];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    uint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2) + a2;
    if (v9 > 0x1555555555555555) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v7) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v12 = (char *)operator new(12 * v11);
    }
    else
    {
      unint64_t v12 = 0;
    }
    uint64_t v14 = &v12[4 * (v8 >> 2)];
    unint64_t v15 = &v12[12 * v11];
    size_t v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    unint64_t v17 = &v14[v16];
    if (v5 == v7)
    {
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v15;
      if (!v7) {
        return;
      }
      goto LABEL_28;
    }
    unint64_t v18 = v5 - v7 - 12;
    if (v18 < 0xB4) {
      goto LABEL_25;
    }
    unint64_t v19 = v18 / 0xC;
    if (&v12[v8 - 12 * v19 - 12] < v5 && &v5[-12 * v19 - 12] < v14) {
      goto LABEL_25;
    }
    unint64_t v21 = v19 + 1;
    uint64_t v22 = (v19 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    char v6 = &v5[-12 * v22];
    uint64_t v23 = &v14[-12 * v22];
    int v24 = (const float *)(v5 - 48);
    int v25 = (float *)(v14 - 48);
    uint64_t v26 = v22;
    do
    {
      float32x4x3_t v29 = vld3q_f32(v24);
      vst3q_f32(v25, v29);
      v25 -= 12;
      v24 -= 12;
      v26 -= 4;
    }
    while (v26);
    v14 -= 12 * v22;
    if (v21 != v22)
    {
LABEL_25:
      uint64_t v23 = v14;
      do
      {
        int v27 = *((_DWORD *)v6 - 3);
        v6 -= 12;
        *((_DWORD *)v23 - 3) = v27;
        v23 -= 12;
        *((_DWORD *)v23 + 1) = *((_DWORD *)v6 + 1);
        *((_DWORD *)v23 + 2) = *((_DWORD *)v6 + 2);
      }
      while (v6 != v7);
    }
    *(void *)a1 = v23;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v15;
    if (v7)
    {
LABEL_28:
      operator delete(v7);
    }
  }
}

void gcl::tmesh::DecoderImpl::decompressTriangleOrder(gcl::tmesh::DecoderImpl *this, int *a2)
{
  uint64_t v276 = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)this + 952))
  {
    memset_pattern16(__b, &memset_pattern_27, 0x80uLL);
    __int16 v274 = 0x8000;
    uint64_t v135 = a2;
    if (*((int *)this + 948) < 1) {
      return;
    }
    uint64_t v136 = 0;
    int v137 = 0;
    unsigned int v138 = __b[0];
    unsigned int v139 = 0x8000;
    unsigned int v140 = 0x8000;
    while (1)
    {
      unsigned int v142 = *((_DWORD *)this + 683);
      unsigned int v143 = *((_DWORD *)this + 684);
      if (v142 < 0x40000001)
      {
        int v144 = *((_DWORD *)this + 686);
        while (1)
        {
          v143 *= 2;
          *((_DWORD *)this + 686) = --v144;
          if (v144) {
            goto LABEL_167;
          }
          uint64_t v147 = *((void *)this + 340);
          *((void *)this + 340) = v147 + 1;
          unint64_t v148 = *((unsigned int *)this + 676);
          if (v147 + 1 >= v148)
          {
            int v149 = 65280;
            unint64_t v150 = v147 + 2;
            *((void *)this + 340) = v150;
            if (v150 >= v148)
            {
LABEL_173:
              int v145 = 255;
              goto LABEL_166;
            }
          }
          else
          {
            int v149 = *(unsigned __int8 *)(*((void *)this + 339) + v147 + 1) << 8;
            unint64_t v150 = v147 + 2;
            *((void *)this + 340) = v150;
            if (v150 >= v148) {
              goto LABEL_173;
            }
          }
          int v145 = *(unsigned __int8 *)(*((void *)this + 339) + v150);
LABEL_166:
          v143 |= v149 | v145;
          int v144 = 16;
          *((_DWORD *)this + 686) = 16;
LABEL_167:
          unsigned int v146 = 2 * v142;
          BOOL v23 = v142 >= 0x20000001;
          v142 *= 2;
          if (v23) {
            goto LABEL_175;
          }
        }
      }
      unsigned int v146 = *((_DWORD *)this + 683);
LABEL_175:
      unsigned int v151 = (HIWORD(v146) * (unsigned __int16)v140) & 0xFFFF0000;
      if (v143 < v151) {
        unsigned int v152 = 0;
      }
      else {
        unsigned int v152 = (HIWORD(v146) * (unsigned __int16)v140) & 0xFFFF0000;
      }
      unsigned int v153 = v143 - v152;
      *((_DWORD *)this + 684) = v143 - v152;
      BOOL v154 = v143 >= v151;
      unsigned int v155 = (v140 >> 7) & 0x1FE | (v143 >= v151);
      unsigned int v156 = v146 - v151;
      int v157 = *((unsigned __int16 *)this + v155 + 1376);
      if (v154) {
        unsigned int v151 = v146 - v151;
      }
      *((_DWORD *)this + 683) = v151;
      if (v154) {
        break;
      }
      int v141 = 0;
LABEL_162:
      v140 += v157;
      v137 += v141;
      v135[v136++] = v137;
      if (v136 >= *((int *)this + 948)) {
        return;
      }
    }
    if (v156 < 0x40000001)
    {
      int v158 = *((_DWORD *)this + 686);
      while (1)
      {
        v153 *= 2;
        *((_DWORD *)this + 686) = --v158;
        if (v158) {
          goto LABEL_186;
        }
        uint64_t v161 = *((void *)this + 340);
        *((void *)this + 340) = v161 + 1;
        unint64_t v162 = *((unsigned int *)this + 676);
        if (v161 + 1 >= v162)
        {
          int v163 = 65280;
          unint64_t v164 = v161 + 2;
          *((void *)this + 340) = v164;
          if (v164 >= v162)
          {
LABEL_192:
            int v159 = 255;
            goto LABEL_185;
          }
        }
        else
        {
          int v163 = *(unsigned __int8 *)(*((void *)this + 339) + v161 + 1) << 8;
          unint64_t v164 = v161 + 2;
          *((void *)this + 340) = v164;
          if (v164 >= v162) {
            goto LABEL_192;
          }
        }
        int v159 = *(unsigned __int8 *)(*((void *)this + 339) + v164);
LABEL_185:
        v153 |= v163 | v159;
        int v158 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_186:
        unsigned int v160 = 2 * v156;
        BOOL v23 = v156 >= 0x20000001;
        v156 *= 2;
        if (v23) {
          goto LABEL_194;
        }
      }
    }
    unsigned int v160 = v156;
LABEL_194:
    unsigned int v165 = (HIWORD(v160) * (unsigned __int16)v139) & 0xFFFF0000;
    int v166 = *((unsigned __int16 *)this + ((v139 >> 7) & 0x1FE | (v153 >= v165)) + 1376);
    if (v153 < v165) {
      unsigned int v167 = (HIWORD(v160) * (unsigned __int16)v139) & 0xFFFF0000;
    }
    else {
      unsigned int v167 = v160 - v165;
    }
    if (v153 < v165) {
      unsigned int v168 = 0;
    }
    else {
      unsigned int v168 = (HIWORD(v160) * (unsigned __int16)v139) & 0xFFFF0000;
    }
    unsigned int v169 = v153 - v168;
    *((_DWORD *)this + 683) = v167;
    *((_DWORD *)this + 684) = v169;
    if (v167 < 0x40000001)
    {
      int v170 = *((_DWORD *)this + 686);
      while (1)
      {
        v169 *= 2;
        *((_DWORD *)this + 686) = --v170;
        if (v170) {
          goto LABEL_204;
        }
        uint64_t v173 = *((void *)this + 340);
        *((void *)this + 340) = v173 + 1;
        unint64_t v174 = *((unsigned int *)this + 676);
        if (v173 + 1 >= v174)
        {
          int v175 = 65280;
          unint64_t v176 = v173 + 2;
          *((void *)this + 340) = v176;
          if (v176 >= v174)
          {
LABEL_210:
            int v171 = 255;
            goto LABEL_203;
          }
        }
        else
        {
          int v175 = *(unsigned __int8 *)(*((void *)this + 339) + v173 + 1) << 8;
          unint64_t v176 = v173 + 2;
          *((void *)this + 340) = v176;
          if (v176 >= v174) {
            goto LABEL_210;
          }
        }
        int v171 = *(unsigned __int8 *)(*((void *)this + 339) + v176);
LABEL_203:
        v169 |= v175 | v171;
        int v170 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_204:
        unsigned int v172 = 2 * v167;
        BOOL v23 = v167 >= 0x20000001;
        v167 *= 2;
        if (v23) {
          goto LABEL_212;
        }
      }
    }
    unsigned int v172 = v167;
LABEL_212:
    unsigned int v177 = (HIWORD(v172) * (unsigned __int16)v138) & 0xFFFF0000;
    unsigned int v178 = v172 - v177;
    BOOL v179 = v169 >= v177;
    int v180 = *((unsigned __int16 *)this + ((v138 >> 7) & 0x1FE | v179) + 1376);
    if (v169 < v177) {
      unsigned int v181 = v177;
    }
    else {
      unsigned int v181 = v178;
    }
    if (v169 < v177) {
      unsigned int v182 = 0;
    }
    else {
      unsigned int v182 = v177;
    }
    if (v169 < v177) {
      uint64_t v183 = 1;
    }
    else {
      uint64_t v183 = 2;
    }
    unsigned int v184 = v169 - v182;
    *((_DWORD *)this + 683) = v181;
    *((_DWORD *)this + 684) = v184;
    unsigned int v185 = (unsigned __int16)__b[v183];
    if (v181 < 0x40000001)
    {
      int v186 = *((_DWORD *)this + 686);
      while (1)
      {
        v184 *= 2;
        *((_DWORD *)this + 686) = --v186;
        if (v186) {
          goto LABEL_225;
        }
        uint64_t v189 = *((void *)this + 340);
        *((void *)this + 340) = v189 + 1;
        unint64_t v190 = *((unsigned int *)this + 676);
        if (v189 + 1 >= v190)
        {
          int v191 = 65280;
          unint64_t v192 = v189 + 2;
          *((void *)this + 340) = v192;
          if (v192 >= v190)
          {
LABEL_231:
            int v187 = 255;
            goto LABEL_224;
          }
        }
        else
        {
          int v191 = *(unsigned __int8 *)(*((void *)this + 339) + v189 + 1) << 8;
          unint64_t v192 = v189 + 2;
          *((void *)this + 340) = v192;
          if (v192 >= v190) {
            goto LABEL_231;
          }
        }
        int v187 = *(unsigned __int8 *)(*((void *)this + 339) + v192);
LABEL_224:
        v184 |= v191 | v187;
        int v186 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_225:
        unsigned int v188 = 2 * v181;
        BOOL v23 = v181 >= 0x20000001;
        v181 *= 2;
        if (v23) {
          goto LABEL_233;
        }
      }
    }
    unsigned int v188 = v181;
LABEL_233:
    unsigned int v193 = (HIWORD(v188) * v185) & 0xFFFF0000;
    unsigned int v194 = v188 - v193;
    BOOL v195 = v184 >= v193;
    __b[v183] = *((_WORD *)this + ((v185 >> 7) & 0x1FE | v195) + 1376) + v185;
    if (v184 < v193) {
      unsigned int v196 = v193;
    }
    else {
      unsigned int v196 = v194;
    }
    if (v184 < v193) {
      unsigned int v197 = 0;
    }
    else {
      unsigned int v197 = v193;
    }
    unsigned int v198 = v184 - v197;
    *((_DWORD *)this + 683) = v196;
    *((_DWORD *)this + 684) = v198;
    int v199 = v179 | (2 * v195);
    uint64_t v200 = (v199 + 3);
    unsigned int v201 = (unsigned __int16)__b[v200];
    if (v196 < 0x40000001)
    {
      int v202 = *((_DWORD *)this + 686);
      while (1)
      {
        v198 *= 2;
        *((_DWORD *)this + 686) = --v202;
        if (v202) {
          goto LABEL_243;
        }
        uint64_t v205 = *((void *)this + 340);
        *((void *)this + 340) = v205 + 1;
        unint64_t v206 = *((unsigned int *)this + 676);
        if (v205 + 1 >= v206)
        {
          int v207 = 65280;
          unint64_t v208 = v205 + 2;
          *((void *)this + 340) = v208;
          if (v208 >= v206)
          {
LABEL_249:
            int v203 = 255;
            goto LABEL_242;
          }
        }
        else
        {
          int v207 = *(unsigned __int8 *)(*((void *)this + 339) + v205 + 1) << 8;
          unint64_t v208 = v205 + 2;
          *((void *)this + 340) = v208;
          if (v208 >= v206) {
            goto LABEL_249;
          }
        }
        int v203 = *(unsigned __int8 *)(*((void *)this + 339) + v208);
LABEL_242:
        v198 |= v207 | v203;
        int v202 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_243:
        unsigned int v204 = 2 * v196;
        BOOL v23 = v196 >= 0x20000001;
        v196 *= 2;
        if (v23) {
          goto LABEL_251;
        }
      }
    }
    unsigned int v204 = v196;
LABEL_251:
    unsigned int v209 = (HIWORD(v204) * v201) & 0xFFFF0000;
    unsigned int v210 = v204 - v209;
    BOOL v211 = v198 >= v209;
    __b[v200] = *((_WORD *)this + ((v201 >> 7) & 0x1FE | v211) + 1376) + v201;
    if (v198 < v209) {
      unsigned int v212 = v209;
    }
    else {
      unsigned int v212 = v210;
    }
    if (v198 < v209) {
      unsigned int v213 = 0;
    }
    else {
      unsigned int v213 = v209;
    }
    unsigned int v214 = v198 - v213;
    *((_DWORD *)this + 683) = v212;
    *((_DWORD *)this + 684) = v214;
    int v215 = v199 | (4 * v211);
    uint64_t v216 = (v215 + 7);
    unsigned int v217 = (unsigned __int16)__b[v216];
    if (v212 < 0x40000001)
    {
      int v218 = *((_DWORD *)this + 686);
      while (1)
      {
        v214 *= 2;
        *((_DWORD *)this + 686) = --v218;
        if (v218) {
          goto LABEL_261;
        }
        uint64_t v221 = *((void *)this + 340);
        *((void *)this + 340) = v221 + 1;
        unint64_t v222 = *((unsigned int *)this + 676);
        if (v221 + 1 >= v222)
        {
          int v223 = 65280;
          unint64_t v224 = v221 + 2;
          *((void *)this + 340) = v224;
          if (v224 >= v222)
          {
LABEL_267:
            int v219 = 255;
            goto LABEL_260;
          }
        }
        else
        {
          int v223 = *(unsigned __int8 *)(*((void *)this + 339) + v221 + 1) << 8;
          unint64_t v224 = v221 + 2;
          *((void *)this + 340) = v224;
          if (v224 >= v222) {
            goto LABEL_267;
          }
        }
        int v219 = *(unsigned __int8 *)(*((void *)this + 339) + v224);
LABEL_260:
        v214 |= v223 | v219;
        int v218 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_261:
        unsigned int v220 = 2 * v212;
        BOOL v23 = v212 >= 0x20000001;
        v212 *= 2;
        if (v23) {
          goto LABEL_269;
        }
      }
    }
    unsigned int v220 = v212;
LABEL_269:
    unsigned int v225 = (HIWORD(v220) * v217) & 0xFFFF0000;
    unsigned int v226 = v220 - v225;
    BOOL v227 = v214 >= v225;
    __b[v216] = *((_WORD *)this + ((v217 >> 7) & 0x1FE | v227) + 1376) + v217;
    if (v214 < v225) {
      unsigned int v228 = v225;
    }
    else {
      unsigned int v228 = v226;
    }
    if (v214 < v225) {
      unsigned int v229 = 0;
    }
    else {
      unsigned int v229 = v225;
    }
    unsigned int v230 = v214 - v229;
    *((_DWORD *)this + 683) = v228;
    *((_DWORD *)this + 684) = v230;
    int v231 = v215 | (8 * v227);
    uint64_t v232 = (v231 + 15);
    unsigned int v233 = (unsigned __int16)__b[v232];
    if (v228 < 0x40000001)
    {
      int v234 = *((_DWORD *)this + 686);
      while (1)
      {
        v230 *= 2;
        *((_DWORD *)this + 686) = --v234;
        if (v234) {
          goto LABEL_279;
        }
        uint64_t v237 = *((void *)this + 340);
        *((void *)this + 340) = v237 + 1;
        unint64_t v238 = *((unsigned int *)this + 676);
        if (v237 + 1 >= v238)
        {
          int v239 = 65280;
          unint64_t v240 = v237 + 2;
          *((void *)this + 340) = v240;
          if (v240 >= v238)
          {
LABEL_285:
            int v235 = 255;
            goto LABEL_278;
          }
        }
        else
        {
          int v239 = *(unsigned __int8 *)(*((void *)this + 339) + v237 + 1) << 8;
          unint64_t v240 = v237 + 2;
          *((void *)this + 340) = v240;
          if (v240 >= v238) {
            goto LABEL_285;
          }
        }
        int v235 = *(unsigned __int8 *)(*((void *)this + 339) + v240);
LABEL_278:
        v230 |= v239 | v235;
        int v234 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_279:
        unsigned int v236 = 2 * v228;
        BOOL v23 = v228 >= 0x20000001;
        v228 *= 2;
        if (v23) {
          goto LABEL_287;
        }
      }
    }
    unsigned int v236 = v228;
LABEL_287:
    unsigned int v241 = (HIWORD(v236) * v233) & 0xFFFF0000;
    unsigned int v242 = v236 - v241;
    BOOL v243 = v230 >= v241;
    __b[v232] = *((_WORD *)this + ((v233 >> 7) & 0x1FE | v243) + 1376) + v233;
    if (v230 < v241) {
      unsigned int v244 = v241;
    }
    else {
      unsigned int v244 = v242;
    }
    if (v230 < v241) {
      unsigned int v245 = 0;
    }
    else {
      unsigned int v245 = v241;
    }
    unsigned int v246 = v230 - v245;
    *((_DWORD *)this + 683) = v244;
    *((_DWORD *)this + 684) = v246;
    int v247 = v231 | (16 * v243);
    uint64_t v248 = (v247 + 31);
    unsigned int v249 = (unsigned __int16)__b[v248];
    if (v244 >= 0x40000001)
    {
      unsigned int v252 = v244;
LABEL_305:
      unsigned int v257 = (HIWORD(v252) * v249) & 0xFFFF0000;
      unsigned int v258 = v252 - v257;
      BOOL v259 = v246 >= v257;
      __b[v248] = *((_WORD *)this + ((v249 >> 7) & 0x1FE | v259) + 1376) + v249;
      if (v246 < v257) {
        unsigned int v260 = v257;
      }
      else {
        unsigned int v260 = v258;
      }
      if (v246 < v257) {
        unsigned int v261 = 0;
      }
      else {
        unsigned int v261 = v257;
      }
      *((_DWORD *)this + 683) = v260;
      *((_DWORD *)this + 684) = v246 - v261;
      int v262 = v247 | (32 * v259);
      if (v262 == 63)
      {
        uint64_t v272 = v136;
        unsigned int v263 = v139;
        unsigned int v270 = v138;
        int v264 = v157;
        unsigned int v265 = v165;
        int v266 = v137;
        int v267 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)this + 676, 6, &v274);
        int v137 = v266;
        unsigned int v165 = v265;
        int v157 = v264;
        unsigned int v139 = v263;
        uint64_t v136 = v272;
        uint64_t v135 = a2;
        int v262 = v267 + 63;
        unsigned int v138 = v270;
      }
      v139 += v166;
      v138 += v180;
      int v141 = ~v262;
      if (v153 >= v165) {
        int v141 = v262 + 1;
      }
      goto LABEL_162;
    }
    int v250 = *((_DWORD *)this + 686);
    while (1)
    {
      v246 *= 2;
      *((_DWORD *)this + 686) = --v250;
      if (v250) {
        goto LABEL_297;
      }
      uint64_t v253 = *((void *)this + 340);
      *((void *)this + 340) = v253 + 1;
      unint64_t v254 = *((unsigned int *)this + 676);
      if (v253 + 1 >= v254)
      {
        int v255 = 65280;
        unint64_t v256 = v253 + 2;
        *((void *)this + 340) = v256;
        if (v256 >= v254)
        {
LABEL_303:
          int v251 = 255;
          goto LABEL_296;
        }
      }
      else
      {
        int v255 = *(unsigned __int8 *)(*((void *)this + 339) + v253 + 1) << 8;
        unint64_t v256 = v253 + 2;
        *((void *)this + 340) = v256;
        if (v256 >= v254) {
          goto LABEL_303;
        }
      }
      int v251 = *(unsigned __int8 *)(*((void *)this + 339) + v256);
LABEL_296:
      v246 |= v255 | v251;
      int v250 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_297:
      unsigned int v252 = 2 * v244;
      BOOL v23 = v244 >= 0x20000001;
      v244 *= 2;
      if (v23) {
        goto LABEL_305;
      }
    }
  }
  memset_pattern16(__b, &memset_pattern_27, 0x80uLL);
  __int16 v274 = 0x8000;
  uint64_t v3 = a2;
  if (*((int *)this + 948) >= 1)
  {
    uint64_t v4 = 0;
    int v5 = 0;
    unsigned int v6 = __b[0];
    unsigned int v7 = 0x8000;
    int v8 = 6;
    unsigned int v9 = 0x8000;
    while (1)
    {
      unsigned int v11 = *((_DWORD *)this + 683);
      unsigned int v12 = *((_DWORD *)this + 684);
      if (v11 < 0x40000001)
      {
        int v13 = *((_DWORD *)this + 686);
        while (1)
        {
          v12 *= 2;
          *((_DWORD *)this + 686) = --v13;
          if (v13) {
            goto LABEL_9;
          }
          uint64_t v16 = *((void *)this + 340);
          *((void *)this + 340) = v16 + 1;
          unint64_t v17 = *((unsigned int *)this + 676);
          if (v16 + 1 >= v17)
          {
            int v18 = 65280;
            unint64_t v19 = v16 + 2;
            *((void *)this + 340) = v19;
            if (v19 >= v17)
            {
LABEL_15:
              int v14 = 255;
              goto LABEL_8;
            }
          }
          else
          {
            int v18 = *(unsigned __int8 *)(*((void *)this + 339) + v16 + 1) << 8;
            unint64_t v19 = v16 + 2;
            *((void *)this + 340) = v19;
            if (v19 >= v17) {
              goto LABEL_15;
            }
          }
          int v14 = *(unsigned __int8 *)(*((void *)this + 339) + v19);
LABEL_8:
          v12 |= v18 | v14;
          int v13 = 16;
          *((_DWORD *)this + 686) = 16;
LABEL_9:
          unsigned int v15 = 2 * v11;
          BOOL v23 = v11 >= 0x20000001;
          v11 *= 2;
          if (v23) {
            goto LABEL_17;
          }
        }
      }
      unsigned int v15 = *((_DWORD *)this + 683);
LABEL_17:
      unsigned int v20 = (HIWORD(v15) * (unsigned __int16)v9) & 0xFFFF0000;
      if (v12 < v20) {
        unsigned int v21 = 0;
      }
      else {
        unsigned int v21 = (HIWORD(v15) * (unsigned __int16)v9) & 0xFFFF0000;
      }
      unsigned int v22 = v12 - v21;
      *((_DWORD *)this + 684) = v12 - v21;
      BOOL v23 = v12 >= v20;
      unsigned int v24 = (v9 >> 7) & 0x1FE | (v12 >= v20);
      unsigned int v25 = v15 - v20;
      int v26 = *((unsigned __int16 *)this + v24 + 1376);
      if (v23) {
        unsigned int v20 = v15 - v20;
      }
      *((_DWORD *)this + 683) = v20;
      if (v23) {
        break;
      }
      int v10 = 0;
LABEL_4:
      v9 += v26;
      v5 += v10;
      v3[v4++] = v5;
      if (v4 >= *((int *)this + 948)) {
        return;
      }
    }
    if (v25 < 0x40000001)
    {
      int v27 = *((_DWORD *)this + 686);
      while (1)
      {
        v22 *= 2;
        *((_DWORD *)this + 686) = --v27;
        if (v27) {
          goto LABEL_28;
        }
        uint64_t v30 = *((void *)this + 340);
        *((void *)this + 340) = v30 + 1;
        unint64_t v31 = *((unsigned int *)this + 676);
        if (v30 + 1 >= v31)
        {
          int v32 = 65280;
          unint64_t v33 = v30 + 2;
          *((void *)this + 340) = v33;
          if (v33 >= v31)
          {
LABEL_34:
            int v28 = 255;
            goto LABEL_27;
          }
        }
        else
        {
          int v32 = *(unsigned __int8 *)(*((void *)this + 339) + v30 + 1) << 8;
          unint64_t v33 = v30 + 2;
          *((void *)this + 340) = v33;
          if (v33 >= v31) {
            goto LABEL_34;
          }
        }
        int v28 = *(unsigned __int8 *)(*((void *)this + 339) + v33);
LABEL_27:
        v22 |= v32 | v28;
        int v27 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_28:
        unsigned int v29 = 2 * v25;
        BOOL v23 = v25 >= 0x20000001;
        v25 *= 2;
        if (v23) {
          goto LABEL_36;
        }
      }
    }
    unsigned int v29 = v25;
LABEL_36:
    unsigned int v34 = (HIWORD(v29) * (unsigned __int16)v7) & 0xFFFF0000;
    unsigned int v35 = v29 - v34;
    int v36 = *((unsigned __int16 *)this + ((v7 >> 7) & 0x1FE | (v22 >= v34)) + 1376);
    if (v22 >= v34)
    {
      unsigned int v37 = (HIWORD(v29) * (unsigned __int16)v7) & 0xFFFF0000;
    }
    else
    {
      unsigned int v35 = (HIWORD(v29) * (unsigned __int16)v7) & 0xFFFF0000;
      unsigned int v37 = 0;
    }
    unsigned int v38 = v22 - v37;
    *((_DWORD *)this + 683) = v35;
    *((_DWORD *)this + 684) = v38;
    if (v35 < 0x40000001)
    {
      int v39 = *((_DWORD *)this + 686);
      while (1)
      {
        v38 *= 2;
        *((_DWORD *)this + 686) = --v39;
        if (v39) {
          goto LABEL_43;
        }
        uint64_t v42 = *((void *)this + 340);
        *((void *)this + 340) = v42 + 1;
        unint64_t v43 = *((unsigned int *)this + 676);
        if (v42 + 1 >= v43)
        {
          int v44 = 65280;
          unint64_t v45 = v42 + 2;
          *((void *)this + 340) = v45;
          if (v45 >= v43)
          {
LABEL_49:
            int v40 = 255;
            goto LABEL_42;
          }
        }
        else
        {
          int v44 = *(unsigned __int8 *)(*((void *)this + 339) + v42 + 1) << 8;
          unint64_t v45 = v42 + 2;
          *((void *)this + 340) = v45;
          if (v45 >= v43) {
            goto LABEL_49;
          }
        }
        int v40 = *(unsigned __int8 *)(*((void *)this + 339) + v45);
LABEL_42:
        v38 |= v44 | v40;
        int v39 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_43:
        unsigned int v41 = 2 * v35;
        BOOL v23 = v35 >= 0x20000001;
        v35 *= 2;
        if (v23) {
          goto LABEL_51;
        }
      }
    }
    unsigned int v41 = v35;
LABEL_51:
    unsigned int v46 = (HIWORD(v41) * (unsigned __int16)v6) & 0xFFFF0000;
    unsigned int v47 = v41 - v46;
    BOOL v48 = v38 >= v46;
    int v49 = *((unsigned __int16 *)this + ((v6 >> 7) & 0x1FE | v48) + 1376);
    if (v38 < v46) {
      unsigned int v50 = v46;
    }
    else {
      unsigned int v50 = v47;
    }
    if (v38 < v46) {
      unsigned int v46 = 0;
    }
    unsigned int v51 = v38 - v46;
    *((_DWORD *)this + 683) = v50;
    *((_DWORD *)this + 684) = v51;
    uint64_t v52 = (v48 & 0x7FFFFFFu) + 1;
    unsigned int v53 = (unsigned __int16)__b[v52];
    if (v50 < 0x40000001)
    {
      int v54 = *((_DWORD *)this + 686);
      while (1)
      {
        v51 *= 2;
        *((_DWORD *)this + 686) = --v54;
        if (v54) {
          goto LABEL_60;
        }
        uint64_t v57 = *((void *)this + 340);
        *((void *)this + 340) = v57 + 1;
        unint64_t v58 = *((unsigned int *)this + 676);
        if (v57 + 1 >= v58)
        {
          int v59 = 65280;
          unint64_t v60 = v57 + 2;
          *((void *)this + 340) = v60;
          if (v60 >= v58)
          {
LABEL_66:
            int v55 = 255;
            goto LABEL_59;
          }
        }
        else
        {
          int v59 = *(unsigned __int8 *)(*((void *)this + 339) + v57 + 1) << 8;
          unint64_t v60 = v57 + 2;
          *((void *)this + 340) = v60;
          if (v60 >= v58) {
            goto LABEL_66;
          }
        }
        int v55 = *(unsigned __int8 *)(*((void *)this + 339) + v60);
LABEL_59:
        v51 |= v59 | v55;
        int v54 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_60:
        unsigned int v56 = 2 * v50;
        BOOL v23 = v50 >= 0x20000001;
        v50 *= 2;
        if (v23) {
          goto LABEL_68;
        }
      }
    }
    unsigned int v56 = v50;
LABEL_68:
    int v61 = 32 * v48;
    unsigned int v62 = (HIWORD(v56) * v53) & 0xFFFF0000;
    BOOL v63 = v51 >= v62;
    __b[v52] = *((_WORD *)this + ((v53 >> 7) & 0x1FE | v63) + 1376) + v53;
    if (v51 < v62) {
      unsigned int v64 = (HIWORD(v56) * v53) & 0xFFFF0000;
    }
    else {
      unsigned int v64 = v56 - v62;
    }
    if (v51 < v62) {
      unsigned int v65 = 0;
    }
    else {
      unsigned int v65 = (HIWORD(v56) * v53) & 0xFFFF0000;
    }
    unsigned int v66 = v51 - v65;
    *((_DWORD *)this + 683) = v64;
    *((_DWORD *)this + 684) = v66;
    unsigned int v67 = v61 | (16 * v63);
    uint64_t v68 = (v67 >> 4) + 3;
    unsigned int v69 = (unsigned __int16)__b[v68];
    if (v64 < 0x40000001)
    {
      int v70 = *((_DWORD *)this + 686);
      while (1)
      {
        v66 *= 2;
        *((_DWORD *)this + 686) = --v70;
        if (v70) {
          goto LABEL_78;
        }
        uint64_t v73 = *((void *)this + 340);
        *((void *)this + 340) = v73 + 1;
        unint64_t v74 = *((unsigned int *)this + 676);
        if (v73 + 1 >= v74)
        {
          int v75 = 65280;
          unint64_t v76 = v73 + 2;
          *((void *)this + 340) = v76;
          if (v76 >= v74)
          {
LABEL_84:
            int v71 = 255;
            goto LABEL_77;
          }
        }
        else
        {
          int v75 = *(unsigned __int8 *)(*((void *)this + 339) + v73 + 1) << 8;
          unint64_t v76 = v73 + 2;
          *((void *)this + 340) = v76;
          if (v76 >= v74) {
            goto LABEL_84;
          }
        }
        int v71 = *(unsigned __int8 *)(*((void *)this + 339) + v76);
LABEL_77:
        v66 |= v75 | v71;
        int v70 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_78:
        unsigned int v72 = 2 * v64;
        BOOL v23 = v64 >= 0x20000001;
        v64 *= 2;
        if (v23) {
          goto LABEL_86;
        }
      }
    }
    unsigned int v72 = v64;
LABEL_86:
    unsigned int v77 = (HIWORD(v72) * v69) & 0xFFFF0000;
    BOOL v78 = v66 >= v77;
    __b[v68] = *((_WORD *)this + ((v69 >> 7) & 0x1FE | v78) + 1376) + v69;
    if (v66 < v77) {
      unsigned int v79 = (HIWORD(v72) * v69) & 0xFFFF0000;
    }
    else {
      unsigned int v79 = v72 - v77;
    }
    if (v66 < v77) {
      unsigned int v80 = 0;
    }
    else {
      unsigned int v80 = (HIWORD(v72) * v69) & 0xFFFF0000;
    }
    unsigned int v81 = v66 - v80;
    *((_DWORD *)this + 683) = v79;
    *((_DWORD *)this + 684) = v81;
    unsigned int v82 = v67 | (8 * v78);
    uint64_t v83 = (v82 >> 3) + 7;
    unsigned int v84 = (unsigned __int16)__b[v83];
    if (v79 < 0x40000001)
    {
      int v85 = *((_DWORD *)this + 686);
      while (1)
      {
        v81 *= 2;
        *((_DWORD *)this + 686) = --v85;
        if (v85) {
          goto LABEL_96;
        }
        uint64_t v88 = *((void *)this + 340);
        *((void *)this + 340) = v88 + 1;
        unint64_t v89 = *((unsigned int *)this + 676);
        if (v88 + 1 >= v89)
        {
          int v90 = 65280;
          unint64_t v91 = v88 + 2;
          *((void *)this + 340) = v91;
          if (v91 >= v89)
          {
LABEL_102:
            int v86 = 255;
            goto LABEL_95;
          }
        }
        else
        {
          int v90 = *(unsigned __int8 *)(*((void *)this + 339) + v88 + 1) << 8;
          unint64_t v91 = v88 + 2;
          *((void *)this + 340) = v91;
          if (v91 >= v89) {
            goto LABEL_102;
          }
        }
        int v86 = *(unsigned __int8 *)(*((void *)this + 339) + v91);
LABEL_95:
        v81 |= v90 | v86;
        int v85 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_96:
        unsigned int v87 = 2 * v79;
        BOOL v23 = v79 >= 0x20000001;
        v79 *= 2;
        if (v23) {
          goto LABEL_104;
        }
      }
    }
    unsigned int v87 = v79;
LABEL_104:
    unsigned int v92 = (HIWORD(v87) * v84) & 0xFFFF0000;
    BOOL v93 = v81 >= v92;
    __b[v83] = *((_WORD *)this + ((v84 >> 7) & 0x1FE | v93) + 1376) + v84;
    if (v81 < v92) {
      unsigned int v94 = (HIWORD(v87) * v84) & 0xFFFF0000;
    }
    else {
      unsigned int v94 = v87 - v92;
    }
    if (v81 < v92) {
      unsigned int v95 = 0;
    }
    else {
      unsigned int v95 = (HIWORD(v87) * v84) & 0xFFFF0000;
    }
    unsigned int v96 = v81 - v95;
    *((_DWORD *)this + 683) = v94;
    *((_DWORD *)this + 684) = v96;
    unsigned int v97 = v82 | (4 * v93);
    uint64_t v98 = (v97 >> 2) + 15;
    unsigned int v99 = (unsigned __int16)__b[v98];
    if (v94 < 0x40000001)
    {
      int v100 = *((_DWORD *)this + 686);
      while (1)
      {
        v96 *= 2;
        *((_DWORD *)this + 686) = --v100;
        if (v100) {
          goto LABEL_114;
        }
        uint64_t v103 = *((void *)this + 340);
        *((void *)this + 340) = v103 + 1;
        unint64_t v104 = *((unsigned int *)this + 676);
        if (v103 + 1 >= v104)
        {
          int v105 = 65280;
          unint64_t v106 = v103 + 2;
          *((void *)this + 340) = v106;
          if (v106 >= v104)
          {
LABEL_120:
            int v101 = 255;
            goto LABEL_113;
          }
        }
        else
        {
          int v105 = *(unsigned __int8 *)(*((void *)this + 339) + v103 + 1) << 8;
          unint64_t v106 = v103 + 2;
          *((void *)this + 340) = v106;
          if (v106 >= v104) {
            goto LABEL_120;
          }
        }
        int v101 = *(unsigned __int8 *)(*((void *)this + 339) + v106);
LABEL_113:
        v96 |= v105 | v101;
        int v100 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_114:
        unsigned int v102 = 2 * v94;
        BOOL v23 = v94 >= 0x20000001;
        v94 *= 2;
        if (v23) {
          goto LABEL_122;
        }
      }
    }
    unsigned int v102 = v94;
LABEL_122:
    unsigned int v107 = (HIWORD(v102) * v99) & 0xFFFF0000;
    BOOL v108 = v96 >= v107;
    __b[v98] = *((_WORD *)this + ((v99 >> 7) & 0x1FE | v108) + 1376) + v99;
    if (v96 < v107) {
      unsigned int v109 = (HIWORD(v102) * v99) & 0xFFFF0000;
    }
    else {
      unsigned int v109 = v102 - v107;
    }
    if (v96 < v107) {
      unsigned int v110 = 0;
    }
    else {
      unsigned int v110 = (HIWORD(v102) * v99) & 0xFFFF0000;
    }
    unsigned int v111 = v96 - v110;
    *((_DWORD *)this + 683) = v109;
    *((_DWORD *)this + 684) = v111;
    unsigned int v112 = v97 | (2 * v108);
    uint64_t v113 = (v112 >> 1) + 31;
    unsigned int v114 = (unsigned __int16)__b[v113];
    if (v109 >= 0x40000001)
    {
      unsigned int v117 = v109;
LABEL_140:
      unsigned int v122 = (HIWORD(v117) * v114) & 0xFFFF0000;
      unsigned int v123 = v117 - v122;
      BOOL v124 = v111 >= v122;
      __b[v113] = *((_WORD *)this + ((v114 >> 7) & 0x1FE | v124) + 1376) + v114;
      if (v111 < v122) {
        unsigned int v125 = v122;
      }
      else {
        unsigned int v125 = v123;
      }
      if (v111 < v122) {
        unsigned int v126 = 0;
      }
      else {
        unsigned int v126 = v122;
      }
      *((_DWORD *)this + 683) = v125;
      *((_DWORD *)this + 684) = v111 - v126;
      int v127 = v112 | v124;
      if (v127 == 63)
      {
        int v268 = v49;
        int v269 = v36;
        unsigned int v271 = v9;
        uint64_t v128 = v4;
        int v129 = v26;
        unsigned int v130 = v7;
        int v131 = v8;
        int v132 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)this + 676, v8, &v274);
        int v127 = v132 + 63;
        int v133 = -63 - v132;
        if (v132 >= -63) {
          int v133 = v132 + 63;
        }
        int v134 = v133 >> v131;
        if (!v131 || v134)
        {
          if (v134 <= 1) {
            int v8 = v131;
          }
          else {
            int v8 = v131 + 1;
          }
        }
        else
        {
          int v8 = v131 - 1;
        }
        uint64_t v3 = a2;
        unsigned int v7 = v130;
        int v26 = v129;
        uint64_t v4 = v128;
        int v36 = v269;
        unsigned int v9 = v271;
        int v49 = v268;
      }
      v7 += v36;
      v6 += v49;
      int v10 = ~v127;
      if (v22 >= v34) {
        int v10 = v127 + 1;
      }
      goto LABEL_4;
    }
    int v115 = *((_DWORD *)this + 686);
    while (1)
    {
      v111 *= 2;
      *((_DWORD *)this + 686) = --v115;
      if (v115) {
        goto LABEL_132;
      }
      uint64_t v118 = *((void *)this + 340);
      *((void *)this + 340) = v118 + 1;
      unint64_t v119 = *((unsigned int *)this + 676);
      if (v118 + 1 >= v119)
      {
        int v120 = 65280;
        unint64_t v121 = v118 + 2;
        *((void *)this + 340) = v121;
        if (v121 >= v119)
        {
LABEL_138:
          int v116 = 255;
          goto LABEL_131;
        }
      }
      else
      {
        int v120 = *(unsigned __int8 *)(*((void *)this + 339) + v118 + 1) << 8;
        unint64_t v121 = v118 + 2;
        *((void *)this + 340) = v121;
        if (v121 >= v119) {
          goto LABEL_138;
        }
      }
      int v116 = *(unsigned __int8 *)(*((void *)this + 339) + v121);
LABEL_131:
      v111 |= v120 | v116;
      int v115 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_132:
      unsigned int v117 = 2 * v109;
      BOOL v23 = v109 >= 0x20000001;
      v109 *= 2;
      if (v23) {
        goto LABEL_140;
      }
    }
  }
}

void std::vector<gcl::Vector3<int>>::resize(void *a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<gcl::Vector3<int>>::__append((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 12 * a2;
  }
}

void gcl::tmesh::DecoderImpl::decompressAdaptiveTraversal(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3 = a1[948];
  uint64_t v205 = 0;
  int v4 = a1[947];
  if (v4 >= 1)
  {
    uint64_t v5 = (uint64_t)a1;
    uint64_t v6 = 0;
    int v196 = v3 + 1;
    int v199 = a1 + 62;
    LODWORD(v7) = -1;
    do
    {
      if (v6 == HIDWORD(v205))
      {
        ++HIDWORD(v205);
        if (*(unsigned char *)(v5 + 3820)) {
          int v8 = -1;
        }
        else {
          int v8 = v7;
        }
        *(_DWORD *)(*(void *)(v5 + 176) + 12 * v6) = v8;
        gcl::tmesh::DecoderImpl::decompressGeometry(v5, v6, a2);
        gcl::MutableApproximatePriorityQueue<gcl::tmesh::VertexPriority,64>::insert(v199, (int *)(*(void *)(v5 + 224) + 12 * v6));
        int v9 = *(_DWORD *)(v5 + 248);
        if (v9)
        {
          uint64_t v193 = v6;
          while (1)
          {
            unsigned int v10 = *(_DWORD *)(v5 + 252);
            if ((v10 & 0x80000000) != 0)
            {
              uint64_t v13 = 0;
            }
            else
            {
              *(_DWORD *)(v5 + 248) = --v9;
              uint64_t v11 = v5 + 248 + 24 * v10;
              uint64_t v12 = *(void *)(v11 + 16);
              uint64_t v13 = *(void *)(v12 - 8);
              *(void *)(v11 + 16) = v12 - 8;
              *(_DWORD *)(v13 + 8) = -1;
              if (v9)
              {
                do
                {
                  if (*(void *)(v5 + 24 * v10 + 256) != *(void *)(v5 + 24 * v10 + 264)) {
                    break;
                  }
                  *(_DWORD *)(v5 + 252) = v10 - 1;
                  BOOL v14 = (int)v10-- <= 0;
                }
                while (!v14);
              }
              else
              {
                *(_DWORD *)(v5 + 252) = -1;
              }
            }
            unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *(void *)(v5 + 224)) >> 2);
            unint64_t v17 = (int *)(*(void *)(v5 + 152)
                        + ((uint64_t)(0xAAAAAAAB00000000 * ((v13 - *(void *)(v5 + 224)) >> 2)) >> 28));
            int v15 = *v17;
            int v16 = v17[1];
            BOOL v18 = *v17 != -1;
            BOOL v19 = v16 == *v17 && v15 != -1;
            unsigned int v20 = (v18 | (2 * (v16 != -1))) + v19;
            uint64_t v21 = v5 + 2 * v20;
            unsigned int v22 = *(unsigned __int16 *)(v21 + 2048);
            unsigned int v23 = *(_DWORD *)(v5 + 2732);
            unsigned int v24 = *(_DWORD *)(v5 + 2736);
            if (v23 < 0x40000001)
            {
              int v25 = *(_DWORD *)(v5 + 2744);
              while (1)
              {
                v24 *= 2;
                *(_DWORD *)(v5 + 2744) = --v25;
                if (v25) {
                  goto LABEL_27;
                }
                uint64_t v28 = *(void *)(v5 + 2720);
                *(void *)(v5 + 2720) = v28 + 1;
                unint64_t v29 = *(unsigned int *)(v5 + 2704);
                if (v28 + 1 >= v29)
                {
                  int v30 = 65280;
                  unint64_t v31 = v28 + 2;
                  *(void *)(v5 + 2720) = v31;
                  if (v31 >= v29)
                  {
LABEL_33:
                    int v26 = 255;
                    goto LABEL_26;
                  }
                }
                else
                {
                  int v30 = *(unsigned __int8 *)(*(void *)(v5 + 2712) + v28 + 1) << 8;
                  unint64_t v31 = v28 + 2;
                  *(void *)(v5 + 2720) = v31;
                  if (v31 >= v29) {
                    goto LABEL_33;
                  }
                }
                int v26 = *(unsigned __int8 *)(*(void *)(v5 + 2712) + v31);
LABEL_26:
                v24 |= v30 | v26;
                int v25 = 16;
                *(_DWORD *)(v5 + 2744) = 16;
LABEL_27:
                unsigned int v27 = 2 * v23;
                BOOL v41 = v23 >= 0x20000001;
                v23 *= 2;
                if (v41) {
                  goto LABEL_35;
                }
              }
            }
            unsigned int v27 = *(_DWORD *)(v5 + 2732);
LABEL_35:
            int v32 = (_WORD *)(v21 + 2048);
            unsigned int v33 = (HIWORD(v27) * v22) & 0xFFFF0000;
            unsigned int v34 = v27 - v33;
            unsigned int v35 = v24 < v33 ? 0 : (HIWORD(v27) * v22) & 0xFFFF0000;
            *(_DWORD *)(v5 + 2736) = v24 - v35;
            *int v32 = *(_WORD *)(v5 + 2 * ((v22 >> 7) & 0x1FE | (v24 >= v33)) + 2752) + v22;
            unsigned int v36 = v24 < v33 ? v33 : v34;
            *(_DWORD *)(v5 + 2732) = v36;
            if (v24 >= v33) {
              break;
            }
LABEL_11:
            if (!v9) {
              goto LABEL_3;
            }
          }
          uint64_t v194 = (int)v7;
          int v195 = v7;
          unsigned int v198 = (_DWORD *)(a2 + 12 * (int)v7);
          while (2)
          {
            int v204 = 0;
            int v43 = gcl::tmesh::DecoderImpl::decompressTFanConnectivity((gcl::tmesh::DecoderImpl *)v5, v7, v20, a3, &v204, (_DWORD *)&v205 + 1, &v205);
            if (v43 < 0 || (int v44 = v43, v43 > v196))
            {
LABEL_273:
              *(_DWORD *)(v5 + 3872) = 3;
              return;
            }
            BOOL v45 = v204 == 3 || v204 == 5;
            if (v45)
            {
              if (v43)
              {
                unint64_t v46 = v43 + 1;
                do
                {
                  uint64_t v47 = (v46 - 2);
                  if (*(unsigned char *)(*(void *)(v5 + 32) + v47)) {
                    gcl::tmesh::DecoderImpl::decompressGeometry(v5, *(_DWORD *)(*(void *)(v5 + 8) + 4 * v47), a2);
                  }
                  --v46;
                }
                while (v46 > 1);
                goto LABEL_69;
              }
            }
            else if (v43)
            {
              uint64_t v48 = 0;
              do
              {
                if (*(unsigned char *)(*(void *)(v5 + 32) + v48)) {
                  gcl::tmesh::DecoderImpl::decompressGeometry(v5, *(_DWORD *)(*(void *)(v5 + 8) + 4 * v48), a2);
                }
                ++v48;
              }
              while (v44 != v48);
LABEL_69:
              if (v44 > 1)
              {
                if (*(unsigned char *)(v5 + 3818))
                {
                  uint64_t v49 = *(void *)(v5 + 224);
                  uint64_t v50 = v44 - 1;
                  unsigned int v51 = (int *)(*(void *)(v5 + 8) + 4);
                  while (1)
                  {
                    int v53 = *(v51 - 1);
                    int v52 = *v51;
                    int v54 = (_DWORD *)(a2 + 12 * v53);
                    int v55 = (int *)(a2 + 12 * *v51);
                    int v57 = *v55;
                    int v56 = v55[1];
                    int v58 = v54[1];
                    int v59 = *v55 - *v54;
                    int v60 = v56 - v58;
                    int v61 = v55[2];
                    int v62 = v54[2];
                    int v63 = v61 - v62;
                    int v64 = v198[1];
                    int v65 = *v198 - *v54;
                    int v66 = v64 - v58;
                    int v67 = v198[2];
                    int v68 = v67 - v62;
                    if (v59 >= 0) {
                      unsigned int v69 = v59;
                    }
                    else {
                      unsigned int v69 = -v59;
                    }
                    if (v60 >= 0) {
                      unsigned int v70 = v60;
                    }
                    else {
                      unsigned int v70 = -v60;
                    }
                    if (v63 >= 0) {
                      unsigned int v71 = v63;
                    }
                    else {
                      unsigned int v71 = -v63;
                    }
                    BOOL v74 = v69 < 0x1000 && v70 < 0x1000 && v71 < 0x1000;
                    if (v65 >= 0) {
                      unsigned int v75 = v65;
                    }
                    else {
                      unsigned int v75 = -v65;
                    }
                    if (v66 >= 0) {
                      unsigned int v76 = v66;
                    }
                    else {
                      unsigned int v76 = -v66;
                    }
                    if (v68 >= 0) {
                      unsigned int v77 = v68;
                    }
                    else {
                      unsigned int v77 = -v68;
                    }
                    if (v74 && v75 <= 0xFFF && v76 <= 0xFFF && v77 <= 0xFFF)
                    {
                      int v78 = v65 * v59 + v66 * v60 + v68 * v63;
                      if (!v78) {
                        goto LABEL_145;
                      }
                      int v79 = v68 * v60 - v66 * v63;
                      if (v79 < 0) {
                        int v79 = v66 * v63 - v68 * v60;
                      }
                      int v80 = v65 * v63 - v68 * v59;
                      if (v80 < 0) {
                        int v80 = -v80;
                      }
                      int v81 = v66 * v59 - v65 * v60;
                      if (v81 < 0) {
                        int v81 = -v81;
                      }
                      int v82 = v79 + v80;
                      if (v80 < v81)
                      {
                        int v83 = v81;
                      }
                      else
                      {
                        int v82 = v79 + v81;
                        int v83 = v80;
                      }
                      BOOL v84 = v79 >= v80 && v79 >= v81;
                      if (v84) {
                        unsigned int v85 = v80 + v81;
                      }
                      else {
                        unsigned int v85 = v82;
                      }
                      if (v84) {
                        int v86 = v79;
                      }
                      else {
                        int v86 = v83;
                      }
                      unsigned int v87 = v86 + (v85 >> 2);
                      if (v78 < 0) {
                        LODWORD(v88) = -16 * v78 / (int)(v87 - v78) + 16;
                      }
                      else {
                        LODWORD(v88) = (int)(16 * v87) / (int)(v87 + v78);
                      }
                    }
                    else
                    {
                      uint64_t v89 = v66 * (uint64_t)v60 + v65 * (uint64_t)v59 + v68 * (uint64_t)v63;
                      if (!v89)
                      {
LABEL_145:
                        LODWORD(v88) = 16;
                        goto LABEL_148;
                      }
                      uint64_t v90 = v68 * (uint64_t)v60 - v66 * (uint64_t)v63;
                      if (v90 < 0) {
                        uint64_t v90 = v66 * (uint64_t)v63 - v68 * (uint64_t)v60;
                      }
                      uint64_t v91 = v65 * (uint64_t)v63 - v68 * (uint64_t)v59;
                      if (v91 < 0) {
                        uint64_t v91 = -v91;
                      }
                      uint64_t v92 = v66 * (uint64_t)v59 - v65 * (uint64_t)v60;
                      if (v92 < 0) {
                        uint64_t v92 = -v92;
                      }
                      uint64_t v93 = v90 + v91;
                      if (v91 < (unint64_t)v92)
                      {
                        uint64_t v94 = v92;
                      }
                      else
                      {
                        uint64_t v93 = v90 + v92;
                        uint64_t v94 = v91;
                      }
                      BOOL v95 = v90 >= (unint64_t)v91 && v90 >= (unint64_t)v92;
                      if (v95) {
                        unint64_t v96 = v91 + v92;
                      }
                      else {
                        unint64_t v96 = v93;
                      }
                      if (v95) {
                        uint64_t v97 = v90;
                      }
                      else {
                        uint64_t v97 = v94;
                      }
                      uint64_t v88 = v97 + (v96 >> 2);
                      if (v89 < 0) {
                        LODWORD(v88) = -16 * v89 / (v88 - v89) + 16;
                      }
                      else {
                        uint64_t v88 = 16 * v88 / (v88 + v89);
                      }
                    }
LABEL_148:
                    int v98 = *v198 - v57;
                    int v99 = v64 - v56;
                    int v100 = v67 - v61;
                    int v101 = -v59;
                    int v102 = -v60;
                    int v103 = -v63;
                    if (v98 >= 0) {
                      unsigned int v104 = v98;
                    }
                    else {
                      unsigned int v104 = -v98;
                    }
                    BOOL v105 = v104 < 0x1000 && v74;
                    if (v99 >= 0) {
                      unsigned int v106 = v99;
                    }
                    else {
                      unsigned int v106 = -v99;
                    }
                    if (v100 >= 0) {
                      unsigned int v107 = v100;
                    }
                    else {
                      unsigned int v107 = -v100;
                    }
                    if (!v105 || v106 > 0xFFF || v107 > 0xFFF)
                    {
                      uint64_t v113 = v99 * (uint64_t)v102 + v98 * (uint64_t)v101 + v100 * (uint64_t)v103;
                      if (v113)
                      {
                        int v114 = -v59;
                        uint64_t v115 = v100 * (uint64_t)v102 - v99 * (uint64_t)v103;
                        if (v115 < 0) {
                          uint64_t v115 = v99 * (uint64_t)v103 - v100 * (uint64_t)v102;
                        }
                        uint64_t v116 = v98 * (uint64_t)v103 - v100 * (uint64_t)v114;
                        if (v116 < 0) {
                          uint64_t v116 = -v116;
                        }
                        uint64_t v117 = v99 * (uint64_t)v114 - v98 * (uint64_t)v102;
                        if (v117 < 0) {
                          uint64_t v117 = -v117;
                        }
                        uint64_t v118 = v115 + v116;
                        if (v116 < (unint64_t)v117)
                        {
                          uint64_t v119 = v117;
                        }
                        else
                        {
                          uint64_t v118 = v115 + v117;
                          uint64_t v119 = v116;
                        }
                        BOOL v120 = v115 >= (unint64_t)v116 && v115 >= (unint64_t)v117;
                        if (v120) {
                          unint64_t v121 = v116 + v117;
                        }
                        else {
                          unint64_t v121 = v118;
                        }
                        if (v120) {
                          uint64_t v122 = v115;
                        }
                        else {
                          uint64_t v122 = v119;
                        }
                        unint64_t v123 = v122 + (v121 >> 2);
                        if (v113 < 0) {
                          LODWORD(v113) = -16 * v113 / (uint64_t)(v123 - v113) + 16;
                        }
                        else {
                          uint64_t v113 = (uint64_t)(16 * v123) / (uint64_t)(v123 + v113);
                        }
                        goto LABEL_202;
                      }
LABEL_195:
                      LODWORD(v113) = 16;
                      goto LABEL_202;
                    }
                    int v108 = v98 * v101 + v99 * v102 + v100 * v103;
                    if (!v108) {
                      goto LABEL_195;
                    }
                    int v109 = v99 * v63 + v100 * v102;
                    if (v109 < 0) {
                      int v109 = -v109;
                    }
                    int v110 = v98 * v103 + v100 * v59;
                    if (v110 < 0) {
                      int v110 = -v110;
                    }
                    int v111 = v98 * v60 + v99 * v101;
                    if (v111 < 0) {
                      int v111 = -v111;
                    }
                    if (v109 < v110 || v109 < v111)
                    {
                      unsigned int v124 = v109 + v110;
                      int v125 = v109 + v111;
                      if (v110 < v111)
                      {
                        int v126 = v111;
                      }
                      else
                      {
                        unsigned int v124 = v125;
                        int v126 = v110;
                      }
                      unsigned int v112 = v126 + (v124 >> 2);
                      if (v108 < 0)
                      {
LABEL_173:
                        LODWORD(v113) = -16 * v108 / (int)(v112 - v108) + 16;
                        goto LABEL_202;
                      }
                    }
                    else
                    {
                      unsigned int v112 = v109 + ((v110 + v111) >> 2);
                      if (v108 < 0) {
                        goto LABEL_173;
                      }
                    }
                    LODWORD(v113) = (int)(16 * v112) / (int)(v112 + v108);
LABEL_202:
                    uint64_t v127 = 12 * v53;
                    *(_DWORD *)(v49 + v127) += v88;
                    uint64_t v128 = 12 * v52;
                    int v129 = *(_DWORD *)(v49 + v128) + v113;
                    *(_DWORD *)(v49 + v128) = v129;
                    if ((*(_DWORD *)(v49 + v127) & 0x80000000) != 0 || v129 < 0) {
                      goto LABEL_273;
                    }
                    if (*(_DWORD *)(v5 + 3872)) {
                      return;
                    }
                    ++v51;
                    if (!--v50) {
                      goto LABEL_209;
                    }
                  }
                }
                uint64_t v130 = *(void *)(v5 + 224);
                uint64_t v131 = v44 - 1;
                int v132 = (int *)(*(void *)(v5 + 8) + 4);
                do
                {
                  int v133 = *v132;
                  *(_DWORD *)(v130 + 12 * *(v132 - 1)) += 8;
                  *(_DWORD *)(v130 + 12 * v133) += 8;
                  ++v132;
                  --v131;
                }
                while (v131);
              }
LABEL_209:
              if (v44 >= 1)
              {
                uint64_t v134 = 0;
                uint64_t v135 = v44;
                uint64_t v200 = v44;
                while (1)
                {
                  int v139 = *(_DWORD *)(*(void *)(v5 + 8) + 4 * v134);
                  uint64_t v140 = *(void *)(v5 + 224);
                  if (*(unsigned char *)(*(void *)(v5 + 32) + v134))
                  {
                    int v141 = *(_DWORD *)(v5 + 252);
                    goto LABEL_218;
                  }
                  uint64_t v158 = *(unsigned int *)(v140 + 12 * v139 + 8);
                  if ((v158 & 0x80000000) == 0) {
                    break;
                  }
LABEL_215:
                  if (++v134 == v135) {
                    goto LABEL_258;
                  }
                }
                uint64_t v159 = v5 + 24 * *(int *)(v140 + 12 * v139 + 4);
                unsigned int v160 = (uint64_t *)(v159 + 264);
                uint64_t v163 = v159 + 256;
                uint64_t v161 = *(void *)(v159 + 256);
                uint64_t v162 = *(void *)(v163 + 8);
                int v164 = ((unint64_t)(v162 - v161) >> 3) - 1;
                if (v158 != v164)
                {
                  uint64_t v165 = 8 * v164;
                  uint64_t v166 = *(void *)(v161 + 8 * v158);
                  *(void *)(v161 + 8 * v158) = *(void *)(v161 + v165);
                  *(void *)(v161 + v165) = v166;
                  *(_DWORD *)(*(void *)(v161 + 8 * v158) + 8) = v158;
                  *(_DWORD *)(v166 + 8) = v164;
                  uint64_t v162 = *v160;
                }
                uint64_t v167 = *(void *)(v162 - 8);
                *unsigned int v160 = v162 - 8;
                *(_DWORD *)(v167 + 8) = -1;
                BOOL v45 = (*v199)-- == 1;
                if (v45)
                {
                  int v141 = -1;
                  *(_DWORD *)(v5 + 252) = -1;
                }
                else
                {
                  unsigned int v168 = *(_DWORD *)(v5 + 252);
                  int v141 = v168;
                  if ((v168 & 0x80000000) == 0)
                  {
                    while (*(void *)(v5 + 24 * v168 + 256) == *(void *)(v5 + 24 * v168 + 264))
                    {
                      int v141 = v168 - 1;
                      *(_DWORD *)(v5 + 252) = v168 - 1;
                      BOOL v14 = (int)v168-- <= 0;
                      if (v14)
                      {
                        if (v167) {
                          goto LABEL_218;
                        }
                        goto LABEL_215;
                      }
                    }
                    int v141 = v168;
                    if (v167) {
                      goto LABEL_218;
                    }
                    goto LABEL_215;
                  }
                }
LABEL_218:
                unsigned int v142 = (int *)(v140 + 12 * v139);
                if (*v142 >= 63) {
                  int v143 = 63;
                }
                else {
                  int v143 = *v142;
                }
                if (v143 <= v141) {
                  int v144 = v141;
                }
                else {
                  int v144 = v143;
                }
                *(_DWORD *)(v5 + 252) = v144;
                int v145 = (void *)(v5 + 24 * v143);
                unsigned int v146 = (int ***)(v145 + 32);
                uint64_t v147 = v145 + 33;
                unint64_t v148 = (char *)v145[32];
                int v149 = (int **)v145[33];
                uint64_t v150 = ((char *)v149 - v148) >> 3;
                uint64_t v151 = v140 + 12 * v139;
                *(_DWORD *)(v151 + 4) = v143;
                *(_DWORD *)(v151 + 8) = v150;
                unint64_t v152 = v145[34];
                if ((unint64_t)v149 >= v152)
                {
                  unint64_t v153 = v150 + 1;
                  if ((unint64_t)(v150 + 1) >> 61) {
                    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v154 = v152 - (void)v148;
                  if (v154 >> 2 > v153) {
                    unint64_t v153 = v154 >> 2;
                  }
                  if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v153 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  unint64_t v202 = v153;
                  if (v153)
                  {
                    if (v153 >> 61) {
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    }
                    unsigned int v155 = operator new(8 * v153);
                    unsigned int v146 = (int ***)(v145 + 32);
                    uint64_t v147 = v145 + 33;
                    uint64_t v5 = (uint64_t)a1;
                    unsigned int v156 = (int **)&v155[8 * v150];
                    *unsigned int v156 = v142;
                    uint64_t v136 = (uint64_t)(v156 + 1);
                    int v157 = (char *)((char *)v149 - v148);
                    if (v149 == (int **)v148)
                    {
LABEL_252:
                      *unsigned int v146 = v156;
                      *uint64_t v147 = v136;
                      v145[34] = &v155[8 * v202];
                      if (v149)
                      {
                        unsigned int v178 = v146;
                        BOOL v179 = v147;
                        operator delete(v149);
                        uint64_t v147 = v179;
                        uint64_t v5 = (uint64_t)a1;
                        unsigned int v146 = v178;
                      }
                      uint64_t v135 = v200;
                      goto LABEL_212;
                    }
                  }
                  else
                  {
                    unsigned int v155 = 0;
                    unsigned int v156 = (int **)(8 * v150);
                    *(void *)(8 * v150) = v142;
                    uint64_t v136 = 8 * v150 + 8;
                    int v157 = (char *)((char *)v149 - v148);
                    if (v149 == (int **)v148) {
                      goto LABEL_252;
                    }
                  }
                  unint64_t v169 = (unint64_t)(v157 - 8);
                  if (v169 < 0x58) {
                    goto LABEL_279;
                  }
                  if ((char *)v149 - v155 - (((char *)v149 - v148) & 0xFFFFFFFFFFFFFFF8) < 0x20) {
                    goto LABEL_279;
                  }
                  uint64_t v170 = (v169 >> 3) + 1;
                  uint64_t v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
                  unsigned int v172 = &v149[v171 / 0xFFFFFFFFFFFFFFF8];
                  unsigned int v156 = (int **)((char *)v156 - v171);
                  uint64_t v173 = &v155[8 * v150 - 16];
                  unint64_t v174 = v149 - 2;
                  uint64_t v175 = v170 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v176 = *(_OWORD *)v174;
                    *(v173 - 1) = *((_OWORD *)v174 - 1);
                    *uint64_t v173 = v176;
                    v173 -= 2;
                    v174 -= 4;
                    v175 -= 4;
                  }
                  while (v175);
                  int v149 = v172;
                  if (v170 != (v170 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_279:
                    do
                    {
                      unsigned int v177 = *--v149;
                      *--unsigned int v156 = v177;
                    }
                    while (v149 != (int **)v148);
                  }
                  int v149 = *v146;
                  goto LABEL_252;
                }
                *int v149 = v142;
                uint64_t v136 = (uint64_t)(v149 + 1);
LABEL_212:
                *uint64_t v147 = v136;
                ++*(_DWORD *)(v5 + 248);
                uint64_t v137 = v5 + 248 + 4 * v143;
                unint64_t v138 = (unint64_t)(v136 - (void)*v146) >> 3;
                if (*(_DWORD *)(v137 + 1544) > (int)v138) {
                  LODWORD(v138) = *(_DWORD *)(v137 + 1544);
                }
                *(_DWORD *)(v137 + 1544) = v138;
                goto LABEL_215;
              }
            }
LABEL_258:
            if (*(_DWORD *)(v5 + 3872)) {
              return;
            }
            int v180 = *(_DWORD *)(*(void *)(v5 + 152) + 16 * v194);
            int v181 = *(_DWORD *)(*(void *)(v5 + 152) + 16 * v194 + 4);
            BOOL v182 = v181 != -1;
            BOOL v183 = v180 != -1;
            BOOL v184 = v181 == v180 && v180 != -1;
            unsigned int v185 = *(_DWORD *)(v5 + 2732);
            unsigned int v186 = *(_DWORD *)(v5 + 2736);
            if (v185 < 0x40000001)
            {
              int v187 = *(_DWORD *)(v5 + 2744);
              LODWORD(v7) = v195;
              while (2)
              {
                v186 *= 2;
                *(_DWORD *)(v5 + 2744) = --v187;
                if (v187) {
                  goto LABEL_266;
                }
                uint64_t v189 = *(void *)(v5 + 2720);
                *(void *)(v5 + 2720) = v189 + 1;
                unint64_t v190 = *(unsigned int *)(v5 + 2704);
                if (v189 + 1 >= v190)
                {
                  int v191 = 65280;
                  unint64_t v192 = v189 + 2;
                  *(void *)(v5 + 2720) = v192;
                  if (v192 >= v190) {
                    goto LABEL_272;
                  }
                }
                else
                {
                  int v191 = *(unsigned __int8 *)(*(void *)(v5 + 2712) + v189 + 1) << 8;
                  unint64_t v192 = v189 + 2;
                  *(void *)(v5 + 2720) = v192;
                  if (v192 >= v190)
                  {
LABEL_272:
                    int v188 = 255;
LABEL_265:
                    v186 |= v191 | v188;
                    int v187 = 16;
                    *(_DWORD *)(v5 + 2744) = 16;
LABEL_266:
                    unsigned int v37 = 2 * v185;
                    BOOL v41 = v185 >= 0x20000001;
                    v185 *= 2;
                    if (v41) {
                      goto LABEL_44;
                    }
                    continue;
                  }
                }
                break;
              }
              int v188 = *(unsigned __int8 *)(*(void *)(v5 + 2712) + v192);
              goto LABEL_265;
            }
            unsigned int v37 = *(_DWORD *)(v5 + 2732);
            LODWORD(v7) = v195;
LABEL_44:
            unsigned int v20 = (v183 | (2 * v182)) + v184;
            unsigned int v38 = *(unsigned __int16 *)(v5 + 2058);
            unsigned int v39 = (HIWORD(v37) * v38) & 0xFFFF0000;
            if (v186 < v39) {
              unsigned int v40 = 0;
            }
            else {
              unsigned int v40 = (HIWORD(v37) * v38) & 0xFFFF0000;
            }
            *(_DWORD *)(v5 + 2736) = v186 - v40;
            BOOL v41 = v186 >= v39;
            *(_WORD *)(v5 + 2058) = *(_WORD *)(v5 + 2 * ((v38 >> 7) & 0x1FE | (v186 >= v39)) + 2752) + v38;
            if (v186 < v39) {
              unsigned int v42 = (HIWORD(v37) * v38) & 0xFFFF0000;
            }
            else {
              unsigned int v42 = v37 - v39;
            }
            *(_DWORD *)(v5 + 2732) = v42;
            if (!v41)
            {
              int v9 = *v199;
              uint64_t v6 = v193;
              goto LABEL_11;
            }
            continue;
          }
        }
LABEL_3:
        int v4 = *(_DWORD *)(v5 + 3788);
      }
      ++v6;
    }
    while (v6 < v4);
  }
}

void gcl::MutableApproximatePriorityQueue<gcl::tmesh::VertexPriority,64>::insert(_DWORD *a1, int *a2)
{
  if (*a2 >= 63) {
    int v4 = 63;
  }
  else {
    int v4 = *a2;
  }
  int v5 = a1[1];
  if (v4 > v5) {
    int v5 = v4;
  }
  a1[1] = v5;
  uint64_t v6 = &a1[6 * v4];
  int v9 = (char *)*((void *)v6 + 1);
  unint64_t v7 = (int ***)(v6 + 2);
  int v8 = v9;
  unsigned int v10 = (uint64_t *)(v7 + 1);
  uint64_t v11 = (char *)v7[1];
  uint64_t v12 = v11;
  unint64_t v13 = v11 - v9;
  uint64_t v14 = (v11 - v9) >> 3;
  a2[1] = v4;
  a2[2] = v14;
  int v16 = v7 + 2;
  unint64_t v15 = (unint64_t)v7[2];
  if ((unint64_t)v11 < v15)
  {
    *(void *)uint64_t v11 = a2;
    uint64_t v17 = (uint64_t)(v11 + 8);
    goto LABEL_28;
  }
  unint64_t v18 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 61) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v19 = v15 - (void)v8;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v21 = operator new(8 * v20);
    int v16 = v7 + 2;
    unsigned int v10 = (uint64_t *)(v7 + 1);
    unsigned int v22 = (int **)&v21[8 * v14];
    unsigned int v23 = &v21[8 * v20];
    *unsigned int v22 = a2;
    uint64_t v17 = (uint64_t)(v22 + 1);
    unsigned int v24 = (char *)(v11 - v8);
    if (v11 == v8) {
      goto LABEL_26;
    }
    goto LABEL_19;
  }
  uint64_t v21 = 0;
  unsigned int v22 = (int **)(8 * v14);
  unsigned int v23 = 0;
  *(void *)(8 * v14) = a2;
  uint64_t v17 = 8 * v14 + 8;
  unsigned int v24 = (char *)(v11 - v8);
  if (v11 != v8)
  {
LABEL_19:
    unint64_t v25 = (unint64_t)(v24 - 8);
    if (v25 < 0x58) {
      goto LABEL_35;
    }
    if (v11 - v21 - (v13 & 0xFFFFFFFFFFFFFFF8) < 0x20) {
      goto LABEL_35;
    }
    uint64_t v26 = (v25 >> 3) + 1;
    uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v12 = &v11[-v27];
    unsigned int v22 = (int **)((char *)v22 - v27);
    uint64_t v28 = &v21[8 * v14 - 16];
    unint64_t v29 = v11 - 16;
    uint64_t v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *uint64_t v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 4;
    }
    while (v30);
    if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_35:
      do
      {
        int v32 = (int *)*((void *)v12 - 1);
        v12 -= 8;
        *--unsigned int v22 = v32;
      }
      while (v12 != v8);
    }
    uint64_t v12 = (char *)*v7;
  }
LABEL_26:
  *unint64_t v7 = v22;
  *unsigned int v10 = v17;
  *int v16 = v23;
  if (v12)
  {
    unsigned int v33 = v12;
    unsigned int v34 = v10;
    operator delete(v33);
    unsigned int v10 = v34;
  }
LABEL_28:
  *unsigned int v10 = v17;
  ++*a1;
  unsigned int v35 = &a1[v4];
  unint64_t v36 = (unint64_t)(v17 - (void)*v7) >> 3;
  if (v35[386] > (int)v36) {
    LODWORD(v36) = v35[386];
  }
  v35[386] = v36;
}

void __certsForType_block_invoke_3()
{
  os_log_t v0 = +[GEOPlatform sharedPlatform];
  int v1 = [v0 isInternalInstall];

  if (!v1
    || (_loadCertsFromFile((uint64_t)RAPProductionCert, (uint64_t)off_1E910E6C8, &qword_1EB29F520, &qword_1EB29F528) & 1) == 0)
  {
    qword_1EB29F520 = (uint64_t)&RAPProductionCert;
    qword_1EB29F528 = 1;
  }
}

void sub_188FAFD5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void geo::codec::initWithVMP4AndLocData(const char *a1@<X0>, unint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const std::string *a6@<X6>, geo::codec::VectorTile **a7@<X8>)
{
  if (a4 + a2 > a6[1].__r_.__value_.__r.__words[0])
  {
    int v9 = (FILE *)*MEMORY[0x1E4F143C8];
    if (a5) {
      fprintf(v9, "%s:%d VMP4 Parse: The VectorTile (%d, %d, %d) is too big too parse.\n");
    }
    else {
      fprintf(v9, "%s:%d VMP4 Parse: The VectorTile has no GeoCodecsTileKey\n");
    }
    goto LABEL_8;
  }
  if (a2 < 4 || (unint64_t v15 = (geo::codec::Allocator *)strncmp(a1, "VMP4", 4uLL), v15))
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Trying to initialize VectorTile (%d, %d, %d) with non-VMP4 data.\n");
LABEL_8:
    *a7 = 0;
    a7[1] = 0;
    return;
  }
  __str = (std::string *)a6;
  uint64_t v16 = geo::codec::Allocator::instance(v15);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 16))(v16, 3840, 8);
  *(void *)uint64_t v17 = &unk_1ED5187F0;
  *(void *)(v17 + 8) = 0;
  *(void *)(v17 + 16) = 0;
  *(void *)(v17 + 24) = v16;
  bzero((void *)(v17 + 32), 0xEE0uLL);
  *(_DWORD *)(v17 + 32) = -1;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(void *)(v17 + 80) = 0;
  uint64_t v19 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v18);
  *(void *)(v17 + 88) = v19;
  *(void *)(v17 + 96) = 0;
  *(void *)(v17 + 104) = 0;
  *(void *)(v17 + 112) = 0;
  unint64_t v20 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v19);
  *(void *)(v17 + 120) = v20;
  *(void *)(v17 + 128) = 0;
  *(void *)(v17 + 136) = 0;
  *(void *)(v17 + 144) = 0;
  uint64_t v21 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v20);
  *(void *)(v17 + 152) = v21;
  *(_OWORD *)(v17 + 160) = 0u;
  *(_OWORD *)(v17 + 176) = 0u;
  *(_OWORD *)(v17 + 192) = 0u;
  unsigned int v22 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v21);
  *(void *)(v17 + 208) = v22;
  *(void *)(v17 + 216) = 0;
  *(void *)(v17 + 224) = 0;
  *(void *)(v17 + 232) = 0;
  unsigned int v23 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v22);
  *(void *)(v17 + 240) = v23;
  *(void *)(v17 + 248) = 0;
  *(void *)(v17 + 256) = 0;
  *(void *)(v17 + 264) = 0;
  unsigned int v24 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v23);
  *(void *)(v17 + 272) = v24;
  *(void *)(v17 + 328) = 0;
  *(_OWORD *)(v17 + 280) = 0u;
  *(_OWORD *)(v17 + 296) = 0u;
  *(_OWORD *)(v17 + 312) = 0u;
  unint64_t v25 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v24);
  *(void *)(v17 + 336) = v25;
  *(void *)(v17 + 344) = 0;
  *(void *)(v17 + 352) = 0;
  *(void *)(v17 + 360) = 0;
  uint64_t v26 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v25);
  *(void *)(v17 + 368) = v26;
  *(void *)(v17 + 376) = 0;
  *(void *)(v17 + 384) = 0;
  *(void *)(v17 + 392) = 0;
  uint64_t v27 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v26);
  *(void *)(v17 + 400) = v27;
  *(void *)(v17 + 408) = 0;
  *(void *)(v17 + 416) = 0;
  *(void *)(v17 + 424) = 0;
  uint64_t v28 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v27);
  *(void *)(v17 + 432) = v28;
  *(void *)(v17 + 440) = 0;
  *(void *)(v17 + 448) = 0;
  *(void *)(v17 + 456) = 0;
  unint64_t v29 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v28);
  *(void *)(v17 + 464) = v29;
  *(void *)(v17 + 472) = 0;
  *(void *)(v17 + 480) = 0;
  *(void *)(v17 + 488) = 0;
  uint64_t v30 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v29);
  *(void *)(v17 + 496) = v30;
  *(void *)(v17 + 504) = 0;
  *(void *)(v17 + 520) = 0;
  *(void *)(v17 + 512) = 0;
  long long v31 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v30);
  *(void *)(v17 + 528) = v31;
  *(void *)(v17 + 536) = 0;
  *(void *)(v17 + 552) = 0;
  *(void *)(v17 + 544) = 0;
  int v32 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v31);
  *(void *)(v17 + 560) = v32;
  *(void *)(v17 + 568) = 0;
  *(void *)(v17 + 584) = 0;
  *(void *)(v17 + 576) = 0;
  unsigned int v33 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v32);
  *(void *)(v17 + 592) = v33;
  *(void *)(v17 + 600) = 0;
  *(void *)(v17 + 616) = 0;
  *(void *)(v17 + 608) = 0;
  unsigned int v34 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v33);
  *(void *)(v17 + 624) = v34;
  *(void *)(v17 + 632) = 0;
  *(_DWORD *)(v17 + 640) = 0;
  *(_OWORD *)(v17 + 648) = 0u;
  *(_OWORD *)(v17 + 664) = 0u;
  *(_DWORD *)(v17 + 680) = 1065353216;
  *(_OWORD *)(v17 + 688) = 0u;
  *(_DWORD *)(v17 + 704) = 0;
  *(void *)(v17 + 712) = 0;
  *(void *)(v17 + 728) = 0;
  *(void *)(v17 + 720) = 0;
  *(void *)(v17 + 904) = 0;
  *(_OWORD *)(v17 + 744) = 0u;
  *(_OWORD *)(v17 + 760) = 0u;
  *(_OWORD *)(v17 + 776) = 0u;
  *(_OWORD *)(v17 + 792) = 0u;
  *(_OWORD *)(v17 + 808) = 0u;
  *(_OWORD *)(v17 + 824) = 0u;
  *(_OWORD *)(v17 + 840) = 0u;
  *(_OWORD *)(v17 + 856) = 0u;
  *(_OWORD *)(v17 + 872) = 0u;
  *(_OWORD *)(v17 + 888) = 0u;
  unsigned int v35 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v34);
  *(void *)(v17 + 912) = v35;
  *(void *)(v17 + 952) = 0;
  *(_OWORD *)(v17 + 920) = 0u;
  *(_OWORD *)(v17 + 936) = 0u;
  unint64_t v36 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v35);
  *(void *)(v17 + 960) = v36;
  *(void *)(v17 + 968) = 0;
  *(void *)(v17 + 984) = 0;
  *(void *)(v17 + 976) = 0;
  unsigned int v37 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v36);
  *(void *)(v17 + 992) = v37;
  *(void *)(v17 + 1064) = 0;
  *(_OWORD *)(v17 + 1000) = 0u;
  *(_OWORD *)(v17 + 1016) = 0u;
  *(_OWORD *)(v17 + 1032) = 0u;
  *(_OWORD *)(v17 + 1048) = 0u;
  unsigned int v38 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v37);
  *(void *)(v17 + 1072) = v38;
  *(void *)(v17 + 1128) = 0;
  *(_OWORD *)(v17 + 1080) = 0u;
  *(_OWORD *)(v17 + 1096) = 0u;
  *(_OWORD *)(v17 + 1112) = 0u;
  unsigned int v39 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v38);
  *(void *)(v17 + 1136) = v39;
  *(void *)(v17 + 1152) = 0;
  *(void *)(v17 + 1168) = 0;
  *(void *)(v17 + 1160) = 0;
  *(void *)(v17 + 1144) = v17 + 1152;
  *(void *)(v17 + 1184) = 0;
  *(void *)(v17 + 1176) = 0;
  unsigned int v40 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v39);
  *(void *)(v17 + 1192) = v40;
  *(void *)(v17 + 1200) = 0;
  *(void *)(v17 + 1216) = 0;
  *(void *)(v17 + 1208) = 0;
  BOOL v41 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v40);
  *(void *)(v17 + 1224) = v41;
  *(_OWORD *)(v17 + 1232) = 0u;
  *(_OWORD *)(v17 + 1248) = 0u;
  *(_OWORD *)(v17 + 1264) = 0u;
  *(_OWORD *)(v17 + 1280) = 0u;
  *(_OWORD *)(v17 + 1296) = 0u;
  *(_OWORD *)(v17 + 1312) = 0u;
  *(void *)(v17 + 1328) = 0;
  unsigned int v42 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v41);
  *(void *)(v17 + 1336) = v42;
  *(void *)(v17 + 1344) = 0;
  *(void *)(v17 + 1360) = 0;
  *(void *)(v17 + 1352) = 0;
  int v43 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v42);
  *(void *)(v17 + 1368) = v43;
  *(void *)(v17 + 1376) = 0;
  *(void *)(v17 + 1392) = 0;
  *(void *)(v17 + 1384) = 0;
  int v44 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v43);
  *(void *)(v17 + 1400) = v44;
  *(_OWORD *)(v17 + 1408) = 0u;
  *(_OWORD *)(v17 + 1424) = 0u;
  *(_OWORD *)(v17 + 1440) = 0u;
  *(void *)(v17 + 1456) = 0;
  BOOL v45 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v44);
  *(void *)(v17 + 1464) = v45;
  *(_OWORD *)(v17 + 1472) = 0u;
  *(_OWORD *)(v17 + 1488) = 0u;
  *(_OWORD *)(v17 + 1504) = 0u;
  unint64_t v46 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v45);
  *(void *)(v17 + 1520) = v46;
  *(void *)(v17 + 1608) = 0;
  *(_OWORD *)(v17 + 1528) = 0u;
  *(_OWORD *)(v17 + 1544) = 0u;
  *(_OWORD *)(v17 + 1560) = 0u;
  *(_OWORD *)(v17 + 1576) = 0u;
  *(_OWORD *)(v17 + 1592) = 0u;
  uint64_t v47 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v46);
  *(void *)(v17 + 1616) = v47;
  *(void *)(v17 + 1752) = 0;
  *(void *)(v17 + 1768) = 0;
  *(void *)(v17 + 1760) = 0;
  *(_OWORD *)(v17 + 1624) = 0u;
  *(_OWORD *)(v17 + 1640) = 0u;
  *(_OWORD *)(v17 + 1656) = 0u;
  *(_OWORD *)(v17 + 1672) = 0u;
  *(_OWORD *)(v17 + 1688) = 0u;
  *(_OWORD *)(v17 + 1704) = 0u;
  *(_OWORD *)(v17 + 1720) = 0u;
  *(_OWORD *)(v17 + 1729) = 0u;
  uint64_t v48 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v47);
  *(void *)(v17 + 1776) = v48;
  *(void *)(v17 + 1856) = 0;
  *(_DWORD *)(v17 + 1864) = 0;
  *(void *)(v17 + 1872) = 0;
  *(_DWORD *)(v17 + 1880) = 0;
  *(void *)(v17 + 1888) = 0;
  *(_DWORD *)(v17 + 1896) = 0;
  *(void *)(v17 + 1904) = 0;
  *(_DWORD *)(v17 + 1912) = 0;
  *(_DWORD *)(v17 + 1848) = 0;
  *(_OWORD *)(v17 + 1784) = 0u;
  *(_OWORD *)(v17 + 1800) = 0u;
  *(_OWORD *)(v17 + 1816) = 0u;
  *(_OWORD *)(v17 + 1832) = 0u;
  *(_OWORD *)(v17 + 1920) = 0u;
  *(_OWORD *)(v17 + 1936) = 0u;
  *(_OWORD *)(v17 + 1952) = 0u;
  *(void *)(v17 + 1968) = 0;
  *(_DWORD *)(v17 + 1976) = 1065353216;
  *(_DWORD *)(v17 + 1984) = 0;
  *(unsigned char *)(v17 + 1988) = 0;
  *(_DWORD *)(v17 + 1992) = 0;
  *(void *)(v17 + 2016) = 0;
  *(_OWORD *)(v17 + 2000) = 0u;
  uint64_t v49 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v48);
  *(void *)(v17 + 2024) = v49;
  *(_WORD *)(v17 + 2032) = 0;
  *(void *)(v17 + 2040) = 0;
  *(_WORD *)(v17 + 2048) = 0;
  *(void *)(v17 + 2056) = 0;
  *(_DWORD *)(v17 + 2064) = 0;
  *(void *)(v17 + 2072) = 0;
  *(_WORD *)(v17 + 2080) = 0;
  *(void *)(v17 + 2120) = 0;
  *(_OWORD *)(v17 + 2088) = 0u;
  *(_OWORD *)(v17 + 2104) = 0u;
  uint64_t v50 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v49);
  *(void *)(v17 + 2128) = v50;
  *(void *)(v17 + 2136) = 0;
  *(void *)(v17 + 2152) = 0;
  *(void *)(v17 + 2144) = 0;
  unsigned int v51 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v50);
  *(void *)(v17 + 2160) = v51;
  *(_WORD *)(v17 + 2168) = 0;
  *(void *)(v17 + 2176) = 0;
  *(_WORD *)(v17 + 2184) = 0;
  *(void *)(v17 + 2192) = 0;
  *(_WORD *)(v17 + 2200) = 0;
  *(void *)(v17 + 2208) = 0;
  *(_WORD *)(v17 + 2216) = 0;
  *(_OWORD *)(v17 + 2224) = 0u;
  *(_OWORD *)(v17 + 2240) = 0u;
  int v52 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v51);
  *(void *)(v17 + 2256) = v52;
  *(_OWORD *)(v17 + 2264) = 0u;
  *(_OWORD *)(v17 + 2280) = 0u;
  *(_OWORD *)(v17 + 2296) = 0u;
  int v53 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v52);
  *(void *)(v17 + 2312) = v53;
  *(_WORD *)(v17 + 2320) = 0;
  *(void *)(v17 + 2328) = 0;
  *(_WORD *)(v17 + 2336) = 0;
  *(_OWORD *)(v17 + 2344) = 0u;
  *(_OWORD *)(v17 + 2360) = 0u;
  int v54 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v53);
  *(void *)(v17 + 2376) = v54;
  *(void *)(v17 + 2384) = 0;
  *(void *)(v17 + 2400) = 0;
  *(void *)(v17 + 2392) = 0;
  int v55 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v54);
  *(void *)(v17 + 2408) = v55;
  *(_OWORD *)(v17 + 2416) = 0u;
  *(_OWORD *)(v17 + 2432) = 0u;
  *(_DWORD *)(v17 + 2448) = 1065353216;
  *(void *)(v17 + 2456) = 0;
  *(void *)(v17 + 2472) = 0;
  *(void *)(v17 + 2464) = 0;
  int v56 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v55);
  *(void *)(v17 + 2480) = v56;
  *(void *)(v17 + 2488) = 0;
  *(void *)(v17 + 2504) = 0;
  *(void *)(v17 + 2496) = 0;
  *(_OWORD *)(v17 + 2512) = xmmword_18A62BFC0;
  *(unsigned char *)(v17 + 2528) = 0;
  *(void *)(v17 + 2536) = 0;
  *(void *)(v17 + 2552) = 0;
  *(void *)(v17 + 2544) = 0;
  int v57 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v56);
  *(void *)(v17 + 2560) = v57;
  *(void *)(v17 + 2568) = 0;
  *(void *)(v17 + 2584) = 0;
  *(void *)(v17 + 2576) = 0;
  int v58 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v57);
  *(void *)(v17 + 2592) = v58;
  *(void *)(v17 + 2600) = 0;
  *(void *)(v17 + 2616) = 0;
  *(void *)(v17 + 2608) = 0;
  int v59 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v58);
  *(void *)(v17 + 2624) = v59;
  *(void *)(v17 + 2632) = 0;
  *(void *)(v17 + 2648) = 0;
  *(void *)(v17 + 2640) = 0;
  int v60 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v59);
  *(void *)(v17 + 2656) = v60;
  *(void *)(v17 + 2664) = 0;
  *(void *)(v17 + 2680) = 0;
  *(void *)(v17 + 2672) = 0;
  int v61 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v60);
  *(void *)(v17 + 2688) = v61;
  *(void *)(v17 + 2696) = 0;
  *(void *)(v17 + 2712) = 0;
  *(void *)(v17 + 2704) = 0;
  int v62 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v61);
  *(void *)(v17 + 2720) = v62;
  *(void *)(v17 + 2728) = 0;
  *(void *)(v17 + 2744) = 0;
  *(void *)(v17 + 2736) = 0;
  int v63 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v62);
  *(void *)(v17 + 2752) = v63;
  *(void *)(v17 + 2760) = 850045863;
  *(void *)(v17 + 2880) = 0;
  *(_WORD *)(v17 + 2888) = 0;
  *(_OWORD *)(v17 + 2768) = 0u;
  *(_OWORD *)(v17 + 2784) = 0u;
  *(_OWORD *)(v17 + 2800) = 0u;
  *(_OWORD *)(v17 + 2816) = 0u;
  *(_WORD *)(v17 + 2832) = 0;
  *(_WORD *)(v17 + 2872) = 0;
  *(_OWORD *)(v17 + 2840) = 0u;
  *(_OWORD *)(v17 + 2856) = 0u;
  *(void *)(v17 + 2892) = 0;
  *(void *)(v17 + 2898) = 0;
  *(_DWORD *)(v17 + 2972) = 0;
  *(_OWORD *)(v17 + 2908) = 0u;
  *(_OWORD *)(v17 + 2924) = 0u;
  *(_OWORD *)(v17 + 2940) = 0u;
  *(_OWORD *)(v17 + 2956) = 0u;
  int v64 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v63);
  *(void *)(v17 + 2976) = v64;
  *(void *)(v17 + 2984) = 0;
  *(void *)(v17 + 3000) = 0;
  *(void *)(v17 + 2992) = 0;
  int v65 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v64);
  *(void *)(v17 + 3008) = v65;
  *(void *)(v17 + 3016) = 0;
  *(_DWORD *)(v17 + 3024) = 0;
  *(_DWORD *)(v17 + 3032) = 0;
  *(unsigned char *)(v17 + 3036) = 0;
  *(unsigned char *)(v17 + 3048) = 6;
  *(void *)(v17 + 3056) = 0;
  *(void *)(v17 + 3072) = 0;
  *(void *)(v17 + 3064) = 0;
  int v66 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v65);
  *(void *)(v17 + 3080) = v66;
  *(void *)(v17 + 3088) = 0;
  *(_DWORD *)(v17 + 3096) = 0;
  *(void *)(v17 + 3104) = 0;
  *(void *)(v17 + 3120) = 0;
  *(void *)(v17 + 3112) = 0;
  int v67 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v66);
  *(void *)(v17 + 3128) = v67;
  *(void *)(v17 + 3136) = 0;
  *(void *)(v17 + 3152) = 0;
  *(void *)(v17 + 3144) = 0;
  int v68 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v67);
  *(void *)(v17 + 3160) = v68;
  *(void *)(v17 + 3168) = 0;
  *(void *)(v17 + 3184) = 0;
  *(void *)(v17 + 3176) = 0;
  unsigned int v69 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v68);
  *(void *)(v17 + 3192) = v69;
  *(void *)(v17 + 3200) = 0;
  *(_DWORD *)(v17 + 3208) = 0;
  *(void *)(v17 + 3216) = 0;
  *(void *)(v17 + 3232) = 0;
  *(void *)(v17 + 3224) = 0;
  unsigned int v70 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v69);
  *(void *)(v17 + 3240) = v70;
  *(void *)(v17 + 3248) = 0;
  *(void *)(v17 + 3264) = 0;
  *(void *)(v17 + 3256) = 0;
  unsigned int v71 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v70);
  *(void *)(v17 + 3272) = v71;
  *(void *)(v17 + 3280) = 0;
  *(void *)(v17 + 3296) = 0;
  *(void *)(v17 + 3288) = 0;
  unsigned int v72 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v71);
  *(void *)(v17 + 3304) = v72;
  *(void *)(v17 + 3312) = 0;
  *(_DWORD *)(v17 + 3320) = 0;
  *(void *)(v17 + 3328) = 0;
  *(void *)(v17 + 3344) = 0;
  *(void *)(v17 + 3336) = 0;
  uint64_t v73 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v72);
  *(void *)(v17 + 3352) = v73;
  *(void *)(v17 + 3360) = 0;
  *(void *)(v17 + 3376) = 0;
  *(void *)(v17 + 3368) = 0;
  BOOL v74 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v73);
  *(void *)(v17 + 3384) = v74;
  *(void *)(v17 + 3392) = 0;
  *(void *)(v17 + 3408) = 0;
  *(void *)(v17 + 3400) = 0;
  unsigned int v75 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v74);
  *(void *)(v17 + 3416) = v75;
  *(void *)(v17 + 3424) = 0;
  *(_DWORD *)(v17 + 3432) = 0;
  *(void *)(v17 + 3440) = 0;
  *(void *)(v17 + 3456) = 0;
  *(void *)(v17 + 3448) = 0;
  unsigned int v76 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v75);
  *(void *)(v17 + 3464) = v76;
  *(void *)(v17 + 3472) = 0;
  *(void *)(v17 + 3488) = 0;
  *(void *)(v17 + 3480) = 0;
  unsigned int v77 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v76);
  *(void *)(v17 + 3496) = v77;
  *(void *)(v17 + 3504) = 0;
  *(unsigned char *)(v17 + 3512) = 0;
  *(void *)(v17 + 3520) = 0;
  *(void *)(v17 + 3536) = 0;
  *(void *)(v17 + 3528) = 0;
  int v78 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v77);
  *(void *)(v17 + 3544) = v78;
  *(_OWORD *)(v17 + 3552) = 0u;
  *(_OWORD *)(v17 + 3568) = 0u;
  int v79 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v78);
  *(void *)(v17 + 3584) = v79;
  *(_DWORD *)(v17 + 3592) = 0;
  *(_OWORD *)(v17 + 3600) = 0u;
  *(_OWORD *)(v17 + 3616) = 0u;
  *(_OWORD *)(v17 + 3632) = 0u;
  *(_OWORD *)(v17 + 3648) = 0u;
  *(_OWORD *)(v17 + 3664) = 0u;
  *(_OWORD *)(v17 + 3680) = 0u;
  *(_OWORD *)(v17 + 3696) = 0u;
  *(_OWORD *)(v17 + 3712) = 0u;
  *(_OWORD *)(v17 + 3728) = 0u;
  *(_OWORD *)(v17 + 3744) = 0u;
  *(_DWORD *)(v17 + 3760) = 1065353216;
  *(void *)(v17 + 3776) = 0;
  *(void *)(v17 + 3792) = 0;
  *(void *)(v17 + 3784) = 0;
  int v80 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v79);
  *(void *)(v17 + 3800) = v80;
  *(void *)(v17 + 3808) = 0;
  *(void *)(v17 + 3824) = 0;
  *(void *)(v17 + 3816) = 0;
  *(void *)(v17 + 3832) = geo::codec::Allocator::instance(v80);
  v166[0] = (geo::codec::VectorTile *)(v17 + 32);
  v166[1] = (geo::codec::VectorTile *)v17;
  v81.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v81.__d_.__rep_;
  int v82 = *(_DWORD *)(a5 + 7);
  *(void *)(v17 + 36) = *(void *)a5;
  *(_DWORD *)(v17 + 43) = v82;
  if (!a4)
  {
    std::string::operator=((std::string *)(v17 + 1000), a6);
    std::string::operator=((std::string *)((char *)v166[0] + 992), a6);
    goto LABEL_55;
  }
  uint64_t v170 = 0;
  uint64_t v171 = 0;
  uint64_t v172 = 0;
  uint64_t v83 = geo::codec::Allocator::instance((geo::codec::Allocator *)v81.__d_.__rep_);
  uint64_t v173 = v83;
  if (a4 >= 1)
  {
    BOOL v84 = v171;
    if (v172 - (uint64_t)v171 < a4)
    {
      int64_t v85 = (char *)v171 - (char *)v170;
      uint64_t v86 = (char *)v171 - (char *)v170 + a4;
      if (v86 < 0) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v163 = v170;
      unint64_t v87 = v172 - (void)v170;
      if (2 * (v172 - (uint64_t)v170) > (unint64_t)v86) {
        uint64_t v86 = 2 * v87;
      }
      if (v87 >= 0x3FFFFFFFFFFFFFFFLL) {
        uint64_t v88 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v88 = v86;
      }
      if (v88)
      {
        uint64_t v89 = v88;
        uint64_t v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v83 + 16))(v83, v88, 1);
      }
      else
      {
        uint64_t v89 = 0;
        uint64_t v90 = 0;
      }
      BOOL v95 = (uint64_t *)(v90 + v85);
      unint64_t v96 = (uint64_t *)(v90 + v85 + a4);
      uint64_t v97 = a4;
      int v98 = (unsigned char *)(v90 + v85);
      do
      {
        if (v98) {
          *int v98 = *a3;
        }
        ++v98;
        ++a3;
        --v97;
      }
      while (v97);
      int v99 = v170;
      if (v170 == v84) {
        goto LABEL_40;
      }
      int64_t v100 = (char *)v84 - (char *)v170;
      if ((unint64_t)((char *)v84 - (char *)v170) >= 0x20)
      {
        int v101 = v84;
        if ((unint64_t)v163 - v90 >= 0x20)
        {
          int v101 = (uint64_t *)((char *)v84 - (v100 & 0xFFFFFFFFFFFFFFE0));
          BOOL v95 = (uint64_t *)((char *)v95 - (v100 & 0xFFFFFFFFFFFFFFE0));
          int v102 = v84 - 2;
          int v103 = (_OWORD *)(v90 + (char *)(v84 - 2) - (char *)v163);
          unint64_t v104 = v100 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v105 = *(_OWORD *)v102;
            *(v103 - 1) = *((_OWORD *)v102 - 1);
            *int v103 = v105;
            v103 -= 2;
            v102 -= 4;
            v104 -= 32;
          }
          while (v104);
          if (v100 == (v100 & 0xFFFFFFFFFFFFFFE0)) {
            goto LABEL_40;
          }
        }
      }
      else
      {
        int v101 = v84;
      }
      do
      {
        char v106 = *((unsigned char *)v101 - 1);
        int v101 = (uint64_t *)((char *)v101 - 1);
        *((unsigned char *)v95 - 1) = v106;
        BOOL v95 = (uint64_t *)((char *)v95 - 1);
      }
      while (v101 != v99);
LABEL_40:
      unsigned int v107 = v171;
      unint64_t v108 = (char *)v171 - (char *)v84;
      if (v171 != v84)
      {
        if (v108 < 0x20) {
          goto LABEL_233;
        }
        if ((unint64_t)(v90 + a4 - (void)v163) < 0x20) {
          goto LABEL_233;
        }
        unint64_t v96 = (uint64_t *)((char *)v96 + (v108 & 0xFFFFFFFFFFFFFFE0));
        int v109 = (_OWORD *)((char *)v84 + a4 - (char *)v163 + v90 + 16);
        int v110 = (long long *)(v84 + 2);
        unint64_t v111 = v108 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v112 = *v110;
          *(v109 - 1) = *(v110 - 1);
          *int v109 = v112;
          v109 += 2;
          v110 += 2;
          v111 -= 32;
        }
        while (v111);
        BOOL v84 = (uint64_t *)((char *)v84 + (v108 & 0xFFFFFFFFFFFFFFE0));
        if (v108 != (v108 & 0xFFFFFFFFFFFFFFE0))
        {
LABEL_233:
          do
          {
            char v113 = *(unsigned char *)v84;
            BOOL v84 = (uint64_t *)((char *)v84 + 1);
            *(unsigned char *)unint64_t v96 = v113;
            unint64_t v96 = (uint64_t *)((char *)v96 + 1);
          }
          while (v84 != v107);
        }
      }
      int v114 = v170;
      uint64_t v115 = v172;
      uint64_t v170 = v95;
      uint64_t v171 = v96;
      uint64_t v172 = v90 + v89;
      if (v114) {
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v173 + 40))(v173, v114, v115 - (void)v114);
      }
      goto LABEL_49;
    }
    uint64_t v91 = v171;
    uint64_t v92 = a4;
    uint64_t v93 = a3;
    uint64_t v94 = v171;
    do
    {
      if (v94) {
        *(unsigned char *)uint64_t v94 = *v93;
      }
      ++v93;
      uint64_t v94 = (uint64_t *)((char *)v94 + 1);
      uint64_t v91 = (uint64_t *)((char *)v91 + 1);
      --v92;
    }
    while (v92);
    uint64_t v171 = v94;
  }
LABEL_49:
  uint64_t v116 = geo::codec::decodeLocalizations();
  if ((v116 & 1) == 0)
  {
    uint64_t v116 = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 253);
    int v117 = 12;
    uint64_t v118 = v170;
    if (!v170) {
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  int v117 = 0;
  uint64_t v118 = v170;
  if (v170)
  {
LABEL_53:
    uint64_t v171 = v118;
    uint64_t v116 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v173 + 40))(v173, v118, v172 - (void)v118);
  }
LABEL_54:
  if (v117) {
    goto LABEL_221;
  }
LABEL_55:
  if (geo::codec::initTile((uint64_t *)&v167, (uint64_t)a1, a2))
  {
    uint64_t v119 = v166[0];
    *((void *)v166[0] + 237) = a2;
    if (*((void *)&v167 + 1))
    {
      uint64_t v120 = 0;
      unsigned int v121 = 0;
      while (*(_WORD *)(v167 + 16 * v120) != 1)
      {
        uint64_t v120 = ++v121;
        if (*((void *)&v167 + 1) <= (unint64_t)v121) {
          goto LABEL_60;
        }
      }
      uint64_t v122 = geo::codec::chapterAt((uint64_t)&v167, v121, 1, (uint64_t)v119 + 1912);
      uint64_t v119 = v166[0];
    }
    else
    {
LABEL_60:
      uint64_t v122 = 0;
    }
    uint64_t v175 = "ChapterGlobal";
    long long v176 = v119;
    unint64_t v123 = (std::__shared_weak_count *)v166[1];
    unsigned int v177 = v166[1];
    if (v166[1]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v166[1] + 1, 1uLL, memory_order_relaxed);
    }
    v124.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v178 = v124.__d_.__rep_;
    if (!v122)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 406);
      int v131 = 0;
      goto LABEL_77;
    }
    uint64_t VarUint32 = geo::codec::chapterReadVarUint32((void *)v122, (unsigned int *)(v122 + 64));
    if ((VarUint32 & 1) == 0)
    {
      int v132 = (FILE *)*MEMORY[0x1E4F143C8];
      int v130 = 408;
      goto LABEL_74;
    }
    DWORD1(v168) = *(_DWORD *)(v122 + 64);
    unint64_t v127 = *(void *)(v122 + 48);
    unint64_t v126 = *(void *)(v122 + 56);
    BOOL v128 = v126 >= v127;
    unint64_t v129 = v126 - v127;
    if (!v128)
    {
      int v130 = 411;
LABEL_73:
      int v132 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_74;
    }
    unint64_t v133 = *(void *)(v122 + 40) + v127;
    *(void *)(v122 + 8) = v133;
    *(unsigned char *)(v122 + 32) = 1;
    *(void *)(v122 + 16) = v129;
    *(void *)(v122 + 24) = 0;
    unint64_t v134 = 8 * v129;
    if (v134 < 0x1A)
    {
      int v130 = 414;
      goto LABEL_73;
    }
    unint64_t v147 = 0;
    unint64_t v148 = 26;
    do
    {
      unint64_t v149 = 8 - (v147 & 7);
      if (v148 < v149) {
        unint64_t v149 = v148;
      }
      v147 += v149;
      v148 -= v149;
    }
    while (v148);
    *(void *)(v122 + 24) = v147;
    if (v147 + 26 > v134)
    {
      int v132 = (FILE *)*MEMORY[0x1E4F143C8];
      int v130 = 415;
      goto LABEL_74;
    }
    unint64_t v150 = 26;
    do
    {
      unint64_t v151 = 8 - (v147 & 7);
      if (v150 < v151) {
        unint64_t v151 = v150;
      }
      v147 += v151;
      v150 -= v151;
    }
    while (v150);
    *(void *)(v122 + 24) = v147;
    if (v147 + 8 > v134)
    {
      int v132 = (FILE *)*MEMORY[0x1E4F143C8];
      int v130 = 416;
      goto LABEL_74;
    }
    unint64_t v152 = 8;
    do
    {
      unint64_t v153 = 8 - (v147 & 7);
      if (v152 < v153) {
        unint64_t v153 = v152;
      }
      v147 += v153;
      v152 -= v153;
    }
    while (v152);
    *(void *)(v122 + 24) = v147;
    unint64_t v154 = v147 + 1;
    if (v147 + 1 > v134)
    {
      int v132 = (FILE *)*MEMORY[0x1E4F143C8];
      int v130 = 420;
      goto LABEL_74;
    }
    unsigned int v155 = *(unsigned __int8 *)(v133 + (v147 >> 3));
    *(void *)(v122 + 24) = v154;
    if ((v155 >> (~(_BYTE)v147 & 7)))
    {
      LODWORD(v170) = 0;
      if (!BitstreamUnpack((uint64_t *)(v122 + 8), (int *)&v170, 5uLL))
      {
        int v132 = (FILE *)*MEMORY[0x1E4F143C8];
        int v130 = 423;
        goto LABEL_74;
      }
      uint64_t VarUint32 = BitstreamUnpack((uint64_t *)(v122 + 8), (int *)&v179, (v170 + 1));
      if ((VarUint32 & 1) == 0)
      {
        int v132 = (FILE *)*MEMORY[0x1E4F143C8];
        int v130 = 426;
        goto LABEL_74;
      }
      unint64_t v154 = *(void *)(v122 + 24) + 1;
      unint64_t v134 = 8 * *(void *)(v122 + 16);
      if (v154 > v134)
      {
        int v132 = (FILE *)*MEMORY[0x1E4F143C8];
        int v130 = 428;
        goto LABEL_74;
      }
      *(void *)(v122 + 24) = v154;
    }
    unint64_t v156 = v154 + 1;
    if (v154 + 1 <= v134)
    {
      unsigned int v157 = *(unsigned __int8 *)(*(void *)(v122 + 8) + (v154 >> 3));
      *(void *)(v122 + 24) = v156;
      if ((v157 >> (~(_BYTE)v154 & 7)))
      {
        uint64_t v170 = 0;
        uint64_t v171 = 0;
        uint64_t v173 = 0;
        uint64_t v174 = 0;
        if (!geo::codec::decodeAttributeSet<GeoCodecsFeature>(-1, (uint64_t *)(v122 + 8), 1u, (uint64_t)v166[0] + 1112, (uint64_t)&v170, 0))
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 435);
          GeoCodecsFeature::~GeoCodecsFeature((GeoCodecsFeature *)&v170);
          int v131 = 0;
          if (!*(unsigned char *)v122) {
            goto LABEL_76;
          }
          goto LABEL_75;
        }
        std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]((void *)v166[0] + 2, v173, v174);
        GeoCodecsFeature::~GeoCodecsFeature((GeoCodecsFeature *)&v170);
        unint64_t v156 = *(void *)(v122 + 24);
      }
      unint64_t v158 = *(void *)(v122 + 48) + (v156 >> 3);
      if ((v156 & 7) != 0) {
        ++v158;
      }
      *(void *)(v122 + 48) = v158;
      *(unsigned char *)(v122 + 32) = 0;
      int v131 = 1;
      if (!*(unsigned char *)v122) {
        goto LABEL_76;
      }
LABEL_75:
      uint64_t v135 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
      uint64_t VarUint32 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v135 + 40))(v135, *(void *)(v122 + 40), 0);
      goto LABEL_76;
    }
    int v132 = (FILE *)*MEMORY[0x1E4F143C8];
    int v130 = 432;
LABEL_74:
    uint64_t VarUint32 = fprintf(v132, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v130);
    int v131 = 0;
    if (!*(unsigned char *)v122)
    {
LABEL_76:
      uint64_t v136 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v136 + 40))(v136, v122, 0);
LABEL_77:
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v137 = std::chrono::steady_clock::now().__d_.__rep_;
      BOOL v179 = "ChapterGlobal";
      uint64_t v170 = (uint64_t *)&v179;
      *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>((uint64_t)v119 + 1912, (uint64_t *)&v179, (uint64_t)&std::piecewise_construct, &v170)+ 4) = (double)((v137 - v124.__d_.__rep_) / 1000) * 0.001;
      if (v123 && !atomic_fetch_add(&v123->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
      if (v131)
      {
        if (geo::codec::_readLabels(&v167, v166))
        {
          if (geo::codec::_readPois(&v167, (uint64_t)__str, (uint64_t *)v166))
          {
            if (geo::codec::_readPoisAddendum(&v167, (uint64_t *)v166))
            {
              if (geo::codec::_readLines(&v167, (uint64_t *)v166))
              {
                if (geo::codec::_readPolygons((uint64_t *)&v167, (uint64_t *)v166))
                {
                  if (geo::codec::_readVenues(&v167, (void *)a5, v166))
                  {
                    if (geo::codec::_readCoastlines((uint64_t)&v167, v166))
                    {
                      if (geo::codec::_readChapter3DBuildings(&v167, 39, (uint64_t)v166[0] + 440, (uint64_t *)v166))
                      {
                        if (geo::codec::_readChapter3DBuildings(&v167, 140, (uint64_t)v166[0] + 472, (uint64_t *)v166))
                        {
                          if (geo::codec::_readModernBuildings(&v167, 139, (geo::codec::Allocator **)v166[0] + 103, (unint64_t *)v166[0] + 47, v166))
                          {
                            if (geo::codec::_readModernBuildings(&v167, 96, (geo::codec::Allocator **)v166[0] + 104, (unint64_t *)v166[0] + 51, v166))
                            {
                              if (geo::codec::_readTileReferences(&v167, a5, v166))
                              {
                                if (geo::codec::_readLinesExtendedChapter(&v167, (uint64_t *)v166))
                                {
                                  if (geo::codec::_readTransitNetwork(&v167, (void *)a5, (uint64_t *)v166))
                                  {
                                    if (geo::codec::_readTransitSystems((geo::codec::Allocator *)&v167, (uint64_t *)v166))
                                    {
                                      if (geo::codec::_populateTransitNodeStyleAttributes((uint64_t *)v166))
                                      {
                                        if (geo::codec::_readTransitMZROverride(&v167, v166))
                                        {
                                          if (geo::codec::_readVenueMZROverride(&v167, (uint64_t *)v166))
                                          {
                                            if (geo::codec::_readPOIMzrOverrides(&v167, v166))
                                            {
                                              if (geo::codec::_readCoverage(&v167, v166))
                                              {
                                                if (geo::codec::_readLabelPlacementMetadata(&v167, v166))
                                                {
                                                  if (geo::codec::_readRoadNetwork(&v167, (void *)a5, (uint64_t *)v166))
                                                  {
                                                    if (geo::codec::_readStorefronts(&v167, v166))
                                                    {
                                                      if (geo::codec::_readElevationRaster(&v167, v166))
                                                      {
                                                        if (geo::codec::_readDTMRaster(&v167, (uint64_t *)v166))
                                                        {
                                                          if (geo::codec::_readMaterialRasters(&v167, (uint64_t *)v166))
                                                          {
                                                            if (geo::codec::_readStyleAttributeRasters((geo::codec::Allocator *)&v167, (uint64_t *)v166, *((_WORD *)v166[0] + 1428) != 0))
                                                            {
                                                              if (geo::codec::_readDebugBlob(&v167, (uint64_t *)v166))
                                                              {
                                                                if (geo::codec::_readDaVinciBuildings(&v167, v166))
                                                                {
                                                                  if (geo::codec::_readDaVinciLandmarks(&v167, (uint64_t *)v166))
                                                                  {
                                                                    if (geo::codec::_readDaVinciMetadata(&v167, v166))
                                                                    {
                                                                      if (geo::codec::_readDaVinciTrafficSkeleton(&v167, (unint64_t *)a5, v166))
                                                                      {
                                                                        if (geo::codec::_readDaVinciTrafficSkeletonOld(&v167, (unint64_t *)a5, v166))
                                                                        {
                                                                          if (geo::codec::_readLineAttributes(&v167, v166))
                                                                          {
                                                                            if (geo::codec::_readLineAttributesOld(&v167, (uint64_t *)a5, v166))
                                                                            {
                                                                              if (geo::codec::_readAnnotationLabels(&v167, (uint64_t *)v166))
                                                                              {
                                                                                if (geo::codec::_readDaVinciAssetMetadata(&v167, v166))
                                                                                {
                                                                                  if (geo::codec::_readRunningTracks(&v167, v166))
                                                                                  {
                                                                                    if (geo::codec::_readHillShadeRaster(&v167, (uint64_t *)v166))
                                                                                    {
                                                                                      if (geo::codec::_readContourLines(&v167, (uint64_t *)v166, 0, 0))
                                                                                      {
                                                                                        if (geo::codec::_readContourLines(&v167, (uint64_t *)v166, 1, 0))
                                                                                        {
                                                                                          if (geo::codec::_readContourLines(&v167, (uint64_t *)v166, 0, 1))
                                                                                          {
                                                                                            if (geo::codec::_readContourLines(&v167, (uint64_t *)v166, 1, 1))
                                                                                            {
                                                                                              if (geo::codec::_readLiveFeatures(&v167, v166))
                                                                                              {
                                                                                                if (geo::codec::_readLiveFeaturesMetadatas(&v167, v166))
                                                                                                {
                                                                                                  if (geo::codec::_readRegionMetadata(&v167, (uint64_t)v166))
                                                                                                  {
                                                                                                    if (geo::codec::_readCompressedPolygons(&v167, (uint64_t)v166))
                                                                                                    {
                                                                                                      if (geo::codec::_readSupplementalFeatureIDs(&v167, (uint64_t *)v166))
                                                                                                      {
                                                                                                        if (geo::codec::_readPOIUpdates(&v167, (uint64_t *)v166))
                                                                                                        {
                                                                                                          if (__str[1].__r_.__value_.__s.__data_[8]) {
                                                                                                            int v145 = geo::codec::_postDecoding((geo::codec::Allocator *)v166);
                                                                                                          }
                                                                                                          else {
                                                                                                            int v145 = 1;
                                                                                                          }
                                                                                                          uint64_t v116 = (uint64_t)geo::codec::VectorTile::buildingTileIntersectionInfo((void **)v166[0], v138, v139, v140, v141, v142, v143, v144);
                                                                                                          goto LABEL_222;
                                                                                                        }
                                                                                                        int v146 = 327;
                                                                                                      }
                                                                                                      else
                                                                                                      {
                                                                                                        int v146 = 326;
                                                                                                      }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      int v146 = 325;
                                                                                                    }
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    int v146 = 324;
                                                                                                  }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  int v146 = 322;
                                                                                                }
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                int v146 = 321;
                                                                                              }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              int v146 = 318;
                                                                                            }
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            int v146 = 317;
                                                                                          }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          int v146 = 314;
                                                                                        }
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        int v146 = 313;
                                                                                      }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      int v146 = 312;
                                                                                    }
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    int v146 = 309;
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  int v146 = 307;
                                                                                }
                                                                              }
                                                                              else
                                                                              {
                                                                                int v146 = 306;
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              int v146 = 305;
                                                                            }
                                                                          }
                                                                          else
                                                                          {
                                                                            int v146 = 304;
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          int v146 = 303;
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        int v146 = 302;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      int v146 = 301;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    int v146 = 300;
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  int v146 = 299;
                                                                }
                                                              }
                                                              else
                                                              {
                                                                int v146 = 298;
                                                              }
                                                            }
                                                            else
                                                            {
                                                              int v146 = 297;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            int v146 = 296;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          int v146 = 295;
                                                        }
                                                      }
                                                      else
                                                      {
                                                        int v146 = 294;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      int v146 = 292;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    int v146 = 290;
                                                  }
                                                }
                                                else
                                                {
                                                  int v146 = 289;
                                                }
                                              }
                                              else
                                              {
                                                int v146 = 288;
                                              }
                                            }
                                            else
                                            {
                                              int v146 = 287;
                                            }
                                          }
                                          else
                                          {
                                            int v146 = 286;
                                          }
                                        }
                                        else
                                        {
                                          int v146 = 285;
                                        }
                                      }
                                      else
                                      {
                                        int v146 = 284;
                                      }
                                    }
                                    else
                                    {
                                      int v146 = 282;
                                    }
                                  }
                                  else
                                  {
                                    int v146 = 281;
                                  }
                                }
                                else
                                {
                                  int v146 = 279;
                                }
                              }
                              else
                              {
                                int v146 = 278;
                              }
                            }
                            else
                            {
                              int v146 = 277;
                            }
                          }
                          else
                          {
                            int v146 = 276;
                          }
                        }
                        else
                        {
                          int v146 = 275;
                        }
                      }
                      else
                      {
                        int v146 = 274;
                      }
                    }
                    else
                    {
                      int v146 = 273;
                    }
                  }
                  else
                  {
                    int v146 = 272;
                  }
                }
                else
                {
                  int v146 = 271;
                }
              }
              else
              {
                int v146 = 270;
              }
            }
            else
            {
              int v146 = 269;
            }
          }
          else
          {
            int v146 = 268;
          }
        }
        else
        {
          int v146 = 267;
        }
      }
      else
      {
        int v146 = 266;
      }
      uint64_t v116 = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v146);
LABEL_221:
      int v145 = 0;
LABEL_222:
      if ((void)v167)
      {
        uint64_t v159 = geo::codec::Allocator::instance((geo::codec::Allocator *)v116);
        (*(void (**)(uint64_t, void, void))(*(void *)v159 + 40))(v159, v167, 0);
      }
      long long v168 = 0u;
      long long v169 = 0u;
      long long v167 = 0u;
      if (v145)
      {
        v160.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        long long v161 = *(_OWORD *)v166;
        *((double *)v166[0] + 238) = (double)((v160.__d_.__rep_ - rep) / 1000) * 0.001;
        *(_OWORD *)a7 = v161;
        a7 = v166;
      }
      goto LABEL_226;
    }
    goto LABEL_75;
  }
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Could not read header\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 260);
LABEL_226:
  *a7 = 0;
  a7[1] = 0;
  uint64_t v162 = (std::__shared_weak_count *)v166[1];
  if (v166[1] && !atomic_fetch_add((atomic_ullong *volatile)v166[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
    std::__shared_weak_count::__release_weak(v162);
  }
}

void sub_188FB158C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  GeoCodecsFeature::~GeoCodecsFeature((GeoCodecsFeature *)&a26);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v26 - 136));
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_188FB15B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void sub_188FB15E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v9 - 136));
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_188FB16E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readContourLines(void *a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a2 + 3360;
  if (a3)
  {
    int v7 = 172;
  }
  else
  {
    uint64_t v6 = *a2 + 3248;
    int v7 = 171;
  }
  uint64_t v8 = v5 + 3136;
  if (a3)
  {
    int v9 = 164;
  }
  else
  {
    uint64_t v8 = v5 + 3024;
    int v9 = 161;
  }
  if (a4) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = v8;
  }
  if (a4) {
    int v11 = v7;
  }
  else {
    int v11 = v9;
  }
  unint64_t v12 = a1[1];
  if (!v12) {
    goto LABEL_26;
  }
  uint64_t v13 = 0;
  unsigned int v14 = 0;
  while (*(unsigned __int16 *)(*a1 + 16 * v13) != v11)
  {
    uint64_t v13 = ++v14;
    if (v12 <= v14) {
      goto LABEL_26;
    }
  }
  unint64_t v15 = (void *)geo::codec::chapterAt((uint64_t)a1, v14, v11, v5 + 1912);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v29 = 0;
    uint64_t v28 = 0;
    uint64_t v27 = 0;
    uint64_t v26 = 0;
    if (geo::codec::chapterReadVarUint32(v15, (unsigned int *)&v29 + 1))
    {
      if (geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v29))
      {
        if (geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v28 + 1))
        {
          if ((BYTE4(v28) & 1) == a3)
          {
            if (geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v28))
            {
              uint64_t v17 = v16[6];
              if ((unint64_t)(v17 + 8) <= v16[7])
              {
                v16[6] = v17 + 8;
                if (geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v27 + 1))
                {
                  *(_DWORD *)(v10 + 40) = v28;
                  if (geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v26)) {
                    mgcl::polyline::Decoder::Decoder((mgcl::polyline::Decoder *)&v25);
                  }
                  unint64_t v18 = (FILE *)*MEMORY[0x1E4F143C8];
                  int v19 = 1640;
                }
                else
                {
                  unint64_t v18 = (FILE *)*MEMORY[0x1E4F143C8];
                  int v19 = 1637;
                }
              }
              else
              {
                unint64_t v18 = (FILE *)*MEMORY[0x1E4F143C8];
                int v19 = 1636;
              }
            }
            else
            {
              unint64_t v18 = (FILE *)*MEMORY[0x1E4F143C8];
              int v19 = 1635;
            }
          }
          else
          {
            unint64_t v18 = (FILE *)*MEMORY[0x1E4F143C8];
            int v19 = 1633;
          }
        }
        else
        {
          unint64_t v18 = (FILE *)*MEMORY[0x1E4F143C8];
          int v19 = 1630;
        }
      }
      else
      {
        unint64_t v18 = (FILE *)*MEMORY[0x1E4F143C8];
        int v19 = 1629;
      }
    }
    else
    {
      unint64_t v18 = (FILE *)*MEMORY[0x1E4F143C8];
      int v19 = 1628;
    }
    unsigned int v22 = (geo::codec::Allocator *)fprintf(v18, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v19);
    char v20 = 0;
    if (*(unsigned char *)v16)
    {
      uint64_t v23 = geo::codec::Allocator::instance(v22);
      unsigned int v22 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v23 + 40))(v23, v16[5], 0);
    }
    uint64_t v24 = geo::codec::Allocator::instance(v22);
    (*(void (**)(uint64_t, void *, void))(*(void *)v24 + 40))(v24, v16, 0);
  }
  else
  {
LABEL_26:
    char v20 = 1;
  }
  return v20 & 1;
}

void sub_188FB275C(_Unwind_Exception *a1)
{
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 240));
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 208));
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_188FB2780(_Unwind_Exception *a1)
{
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 208));
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_188FB27AC(_Unwind_Exception *a1)
{
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_188FB27C0()
{
}

void sub_188FB27C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x188FB2810);
}

void sub_188FB27DC()
{
}

void sub_188FB27E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](&a35);
  mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)&a39);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v39 - 240));
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v39 - 208));
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v39 - 176));
  mgcl::iarray::Decoder::~Decoder((mgcl::iarray::Decoder *)&a27);
  _Unwind_Resume(a1);
}

void sub_188FB2804()
{
}

void sub_188FB280C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  std::vector<std::shared_ptr<FeatureStyleAttributes>>::~vector[abi:ne180100](&a20);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a23);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a27);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a31);
  mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)&a35);
  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100](&a39);
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v39 - 240));
  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v39 - 208));
  std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v39 - 176));
  _Unwind_Resume(a1);
}

void sub_188FB2868(_Unwind_Exception *a1)
{
  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 208));
  std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_188FB2884(_Unwind_Exception *a1)
{
  std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_188FB2898()
{
}

void sub_188FB28CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v27 - 176));
  mgcl::iarray::Decoder::~Decoder((mgcl::iarray::Decoder *)&a27);
  _Unwind_Resume(a1);
}

void sub_188FB28E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_188FB28FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t geo::codec::_readChapter3DBuildings(void *a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    while (*(unsigned __int16 *)(*a1 + 16 * v10) != a2)
    {
      uint64_t v10 = ++v11;
      if (v9 <= v11) {
        goto LABEL_5;
      }
    }
    unint64_t v12 = (void *)geo::codec::chapterAt((uint64_t)a1, v11, a2, v8 + 1912);
    uint64_t v8 = *a4;
  }
  else
  {
LABEL_5:
    unint64_t v12 = 0;
  }
  uint64_t v13 = chapterTypeAsString(a2);
  uint64_t v92 = v13;
  uint64_t v93 = v8;
  unsigned int v14 = (std::__shared_weak_count *)a4[1];
  uint64_t v94 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v15.__d_.__rep_;
  if (!v12)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v33 = v15.__d_.__rep_;
    uint64_t v34 = 1;
    v35.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(void *)&long long v89 = v13;
    if (!v13) {
      goto LABEL_102;
    }
    goto LABEL_101;
  }
  long long v91 = 0uLL;
  unsigned int v90 = 0;
  uint64_t v16 = geo::codec::chapterReadVarUint32(v12, &v90);
  if ((v16 & 1) == 0)
  {
    unint64_t v36 = (FILE *)*MEMORY[0x1E4F143C8];
    int v37 = 4345;
    goto LABEL_94;
  }
  uint64_t v17 = v90;
  if (v90 >= 0x10000)
  {
    unint64_t v36 = (FILE *)*MEMORY[0x1E4F143C8];
    int v37 = 4347;
    goto LABEL_94;
  }
  uint64_t v18 = *(void *)a3;
  uint64_t v19 = *(void *)(a3 + 8);
  unint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((v19 - *(void *)a3) >> 4);
  unint64_t v21 = v90 - v20;
  if (v90 <= v20)
  {
    if (v90 < v20) {
      std::vector<GeoCodecs3DBuildingFeature,geo::StdAllocator<GeoCodecs3DBuildingFeature,geo::codec::Allocator>>::__base_destruct_at_end[abi:ne180100](a3, v18 + 112 * v90);
    }
  }
  else
  {
    uint64_t v22 = *(void *)(a3 + 16);
    if (0x6DB6DB6DB6DB6DB7 * ((v22 - v19) >> 4) >= v21)
    {
      uint64_t v38 = v19 + 112 * v21;
      uint64_t v39 = 112 * v90 - 16 * ((v19 - *(void *)a3) >> 4);
      do
      {
        if (v19)
        {
          *(_OWORD *)(v19 + 80) = 0u;
          *(_OWORD *)(v19 + 96) = 0u;
          *(_OWORD *)(v19 + 48) = 0u;
          *(_OWORD *)(v19 + 64) = 0u;
          *(_OWORD *)(v19 + 16) = 0u;
          *(_OWORD *)(v19 + 32) = 0u;
          *(_OWORD *)uint64_t v19 = 0u;
          uint64_t v16 = geo::codec::Allocator::instance((geo::codec::Allocator *)v16);
          *(void *)(v19 + 104) = v16;
        }
        v19 += 112;
        v39 -= 112;
      }
      while (v39);
      *(void *)(a3 + 8) = v38;
    }
    else
    {
      unint64_t v23 = 0x6DB6DB6DB6DB6DB7 * ((v22 - v18) >> 4);
      uint64_t v24 = 2 * v23;
      if (2 * v23 <= v90) {
        uint64_t v24 = v90;
      }
      if (v23 >= 0x124924924924924) {
        uint64_t v25 = 0x249249249249249;
      }
      else {
        uint64_t v25 = v24;
      }
      uint64_t v26 = (geo::codec::Allocator *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 24) + 16))(*(void *)(a3 + 24), 112 * v25, 8);
      uint64_t v27 = 112 * v20;
      uint64_t v28 = (char *)v26 + 112 * v20;
      uint64_t v29 = (char *)v26 + 112 * v25;
      uint64_t v30 = (char *)v26 + 112 * v17;
      uint64_t v31 = 112 * v17 - v27;
      int v32 = v28;
      do
      {
        if (v32)
        {
          *((_OWORD *)v32 + 5) = 0u;
          *((_OWORD *)v32 + 6) = 0u;
          *((_OWORD *)v32 + 3) = 0u;
          *((_OWORD *)v32 + 4) = 0u;
          *((_OWORD *)v32 + 1) = 0u;
          *((_OWORD *)v32 + 2) = 0u;
          *(_OWORD *)int v32 = 0u;
          uint64_t v26 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v26);
          *((void *)v32 + 13) = v26;
        }
        v32 += 112;
        v31 -= 112;
      }
      while (v31);
      uint64_t v40 = *(void *)a3;
      uint64_t v41 = *(void *)(a3 + 8);
      if (v41 == *(void *)a3)
      {
        *(void *)a3 = v28;
        *(void *)(a3 + 8) = v30;
        uint64_t v49 = *(void *)(a3 + 16);
        *(void *)(a3 + 16) = v29;
      }
      else
      {
        uint64_t v42 = 0;
        do
        {
          uint64_t v43 = v41 + v42;
          int v44 = &v28[v42];
          *((_OWORD *)v44 - 7) = *(_OWORD *)(v41 + v42 - 112);
          *(void *)(v43 - 112) = 0;
          *(void *)(v43 - 104) = 0;
          *((_OWORD *)v44 - 6) = *(_OWORD *)(v41 + v42 - 96);
          *((void *)v44 - 10) = *(void *)(v41 + v42 - 80);
          long long v45 = *(_OWORD *)(v41 + v42 - 72);
          long long v46 = *(_OWORD *)(v41 + v42 - 56);
          int v47 = *(_DWORD *)(v41 + v42 - 40);
          *(void *)(v43 - 88) = 0;
          *(void *)(v43 - 80) = 0;
          *((_DWORD *)v44 - 10) = v47;
          *(_OWORD *)(v44 - 56) = v46;
          *((void *)v44 - 3) = 0;
          *((void *)v44 - 2) = 0;
          *((void *)v44 - 4) = 0;
          *(_OWORD *)(v44 - 72) = v45;
          *((void *)v44 - 1) = *(void *)(v41 + v42 - 8);
          *((_OWORD *)v44 - 2) = *(_OWORD *)(v41 + v42 - 32);
          *((void *)v44 - 2) = *(void *)(v41 + v42 - 16);
          *(void *)(v43 - 32) = 0;
          *(void *)(v43 - 24) = 0;
          *(void *)(v43 - 16) = 0;
          v42 -= 112;
        }
        while (v41 + v42 != v40);
        uint64_t v41 = *(void *)a3;
        uint64_t v48 = *(void *)(a3 + 8);
        *(void *)a3 = &v28[v42];
        *(void *)(a3 + 8) = v30;
        uint64_t v49 = *(void *)(a3 + 16);
        for (*(void *)(a3 + 16) = v29; v48 != v41; v48 -= 112)
        {
          uint64_t v50 = *(void *)(v48 - 32);
          if (v50)
          {
            *(void *)(v48 - 24) = v50;
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v48 - 8) + 40))(*(void *)(v48 - 8), v50, *(void *)(v48 - 16) - v50);
          }
          unsigned int v51 = *(std::__shared_weak_count **)(v48 - 80);
          if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
          int v52 = *(std::__shared_weak_count **)(v48 - 104);
          if (v52) {
            std::__shared_weak_count::__release_weak(v52);
          }
        }
      }
      if (v41) {
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a3 + 24) + 40))(*(void *)(a3 + 24), v41, v49 - v41);
      }
    }
  }
  _ZNSt3__115allocate_sharedB8ne180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v89);
  long long v53 = v89;
  uint64_t v54 = v89;
  **(void **)long long v89 = 0x400000005;
  *(_WORD *)(v54 + 33) = 1025;
  long long v89 = 0uLL;
  int v55 = (std::__shared_weak_count *)*((void *)&v91 + 1);
  long long v91 = v53;
  if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  int v56 = (std::__shared_weak_count *)*((void *)&v89 + 1);
  if (*((void *)&v89 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v89 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  uint64_t v57 = (uint64_t)FeatureStyleAttributesSet::insert(*a4 + 1112, (uint64_t *)&v91);
  uint64_t v59 = *(void *)v57;
  uint64_t v58 = *(void *)(v57 + 8);
  if (v58) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
  }
  int v60 = (std::__shared_weak_count *)*((void *)&v91 + 1);
  *(void *)&long long v91 = v59;
  *((void *)&v91 + 1) = v58;
  if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  if (v90)
  {
    uint64_t v61 = 0;
    unint64_t v62 = 0;
    while (1)
    {
      uint64_t v63 = *(void *)a3;
      uint64_t v65 = *a4;
      uint64_t v64 = a4[1];
      if (v64) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 16), 1uLL, memory_order_relaxed);
      }
      int v66 = (void *)(v63 + v61);
      int v67 = *(std::__shared_weak_count **)(v63 + v61 + 8);
      *int v66 = v65;
      v66[1] = v64;
      if (v67) {
        std::__shared_weak_count::__release_weak(v67);
      }
      LODWORD(v89) = 0;
      uint64_t v68 = v12[6];
      if ((unint64_t)(v68 + 8) > v12[7])
      {
        int v37 = 4361;
        goto LABEL_93;
      }
      uint64_t v69 = *(void *)(v12[5] + v68);
      v12[6] = v68 + 8;
      if (!geo::codec::chapterReadVarUint32(v12, (unsigned int *)&v89))
      {
        int v37 = 4362;
        goto LABEL_93;
      }
      unint64_t v70 = v89;
      if (v89 >> 18)
      {
        int v37 = 4364;
        goto LABEL_93;
      }
      uint64_t v71 = v63 + v61;
      *(void *)(v63 + v61 + 40) = v69;
      unsigned int v72 = *(char **)(v63 + v61 + 80);
      uint64_t v73 = *(char **)(v63 + v61 + 88);
      if (v70 <= v73 - v72)
      {
        if (v70 < v73 - v72)
        {
          uint64_t v73 = &v72[v70];
          *(void *)(v71 + 88) = &v72[v70];
        }
      }
      else
      {
        std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::__append(v63 + v61 + 80, v70 - (v73 - v72));
        unsigned int v72 = *(char **)(v63 + v61 + 80);
        uint64_t v73 = *(char **)(v71 + 88);
      }
      size_t v74 = v73 - v72;
      uint64_t v75 = v12[6];
      if (v75 + v74 > v12[7])
      {
        int v37 = 4369;
        goto LABEL_93;
      }
      uint64_t v57 = (uint64_t)memcpy(v72, (const void *)(v12[5] + v75), v74);
      unint64_t v76 = v12[7];
      size_t v77 = v12[6] + v74;
      v12[6] = v77;
      size_t v78 = v77 + 1;
      if (v77 + 1 > v76) {
        break;
      }
      int v79 = *(unsigned __int8 *)(v12[5] + v77);
      v12[6] = v78;
      if (v79)
      {
        uint64_t v57 = geo::codec::accumulateStyleAttributes(*a4 + 1112, (uint64_t *)&v91, v12, v63 + v61);
        if ((v57 & 1) == 0)
        {
          int v37 = 4378;
          goto LABEL_93;
        }
      }
      else
      {
        long long v80 = v91;
        if (*((void *)&v91 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v91 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        std::chrono::steady_clock::time_point v81 = *(std::__shared_weak_count **)(v63 + v61 + 32);
        *(_OWORD *)(v63 + v61 + 24) = v80;
        if (v81 && !atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      ++v62;
      v61 += 112;
      uint64_t v34 = 1;
      if (v62 >= v90) {
        goto LABEL_86;
      }
    }
    int v37 = 4372;
LABEL_93:
    unint64_t v36 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_94:
    uint64_t v57 = fprintf(v36, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v37);
    uint64_t v34 = 0;
    if (!a1) {
      goto LABEL_98;
    }
    goto LABEL_95;
  }
  uint64_t v34 = 1;
LABEL_86:
  if (a1)
  {
LABEL_95:
    if (*(unsigned char *)v12)
    {
      uint64_t v82 = geo::codec::Allocator::instance((geo::codec::Allocator *)v57);
      uint64_t v57 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v82 + 40))(v82, v12[5], 0);
    }
    uint64_t v83 = geo::codec::Allocator::instance((geo::codec::Allocator *)v57);
    (*(void (**)(uint64_t, void *, void))(*(void *)v83 + 40))(v83, v12, 0);
  }
LABEL_98:
  BOOL v84 = (std::__shared_weak_count *)*((void *)&v91 + 1);
  if (*((void *)&v91 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v91 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
    uint64_t v88 = v92;
    uint64_t v8 = v93;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v33 = rep;
    v35.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    *(void *)&long long v89 = v88;
    if (!v88) {
      goto LABEL_102;
    }
    goto LABEL_101;
  }
  int64_t v85 = v92;
  uint64_t v8 = v93;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v33 = rep;
  v35.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  *(void *)&long long v89 = v85;
  if (v85)
  {
LABEL_101:
    *(void *)&long long v91 = &v89;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v8 + 1912, (uint64_t *)&v89, (uint64_t)&std::piecewise_construct, (uint64_t **)&v91)+ 4) = (double)((v35.__d_.__rep_ - v33) / 1000) * 0.001;
  }
LABEL_102:
  uint64_t v86 = v94;
  if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
  }
  return v34;
}

void sub_188FB3224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va1);
  _Unwind_Resume(a1);
}

const char *chapterTypeAsString(int a1)
{
  int v1 = a1 - 32;
  uint64_t result = "ChapterPolygonFeatures";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "ChapterBuildingFeatures";
      break;
    case 2:
      uint64_t result = "ChapterCoastlineFeatures";
      break;
    case 6:
      uint64_t result = "ChapterWrappingCoastlineFeatures";
      break;
    case 7:
      uint64_t result = "ChapterBuildingMeshes";
      break;
    case 19:
      uint64_t result = "ChapterLinePointCharacteristics";
      break;
    case 20:
      uint64_t result = "ChapterPolygonPointCharacteristics";
      break;
    case 23:
      uint64_t result = "ChapterPolygonPointLabelPositions";
      break;
    case 28:
      uint64_t result = "ChapterConnectivity";
      break;
    case 48:
      uint64_t result = "ChapterGeoIDSegments";
      break;
    case 58:
      uint64_t result = "ChapterAddressRanges";
      break;
    case 61:
      uint64_t result = "ChapterTileReferences";
      break;
    case 64:
      uint64_t result = "ChapterHighResBuildings";
      break;
    case 68:
      uint64_t result = "ChapterDebugBlob";
      break;
    case 69:
      uint64_t result = "ChapterElevationRaster";
      break;
    case 70:
      uint64_t result = "ChapterStyleAttributeRaster";
      break;
    case 71:
      uint64_t result = "ChapterDaVinciMetadata";
      break;
    case 72:
      uint64_t result = "ChapterLowResBuildings";
      break;
    case 80:
      uint64_t result = "ChapterTransitMZROverride";
      break;
    case 87:
      uint64_t result = "ChapterCoverage";
      break;
    case 96:
      uint64_t result = "ChapterTransitSystems";
      break;
    case 97:
      uint64_t result = "ChapterTransitNetwork";
      break;
    case 103:
      uint64_t result = "ChapterRoadNetwork";
      break;
    case 104:
      uint64_t result = "ChapterVenueMZROverride";
      break;
    case 105:
      uint64_t result = "ChapterVenues";
      break;
    case 106:
      uint64_t result = "ChapterStorefronts";
      break;
    case 107:
      uint64_t result = "ChapterLowResBorderBuildings";
      break;
    case 108:
      uint64_t result = "ChapterBorderBuildingMeshes";
      break;
    default:
      uint64_t result = "unknonwn";
      break;
  }
  return result;
}

uint64_t geo::codec::_readModernBuildings(void *a1, int a2, geo::codec::Allocator **a3, unint64_t *a4, void *a5)
{
  if (!a3) {
    return 0;
  }
  unint64_t v5 = a1[1];
  if (!v5) {
    return 1;
  }
  uint64_t v10 = 0;
  unsigned int v11 = 0;
  while (*(unsigned __int16 *)(*a1 + 16 * v10) != a2)
  {
    uint64_t v10 = ++v11;
    if (v5 <= v11) {
      return 1;
    }
  }
  uint64_t v13 = geo::codec::chapterAt((uint64_t)a1, v11, a2, *a5 + 1912);
  if (!v13) {
    return 1;
  }
  uint64_t v14 = v13;
  std::chrono::steady_clock::time_point v15 = chapterTypeAsString(a2);
  uint64_t v17 = *a5;
  uint64_t v16 = (std::__shared_weak_count *)a5[1];
  uint64_t v135 = v15;
  uint64_t v136 = v17;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v137 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v133 = 0;
  unint64_t v134 = 0;
  unint64_t v19 = *(void *)(v14 + 48);
  unint64_t v18 = *(void *)(v14 + 56);
  BOOL v20 = v18 >= v19;
  unint64_t v21 = v18 - v19;
  if (v20)
  {
    *(unsigned char *)(v14 + 32) = 1;
    unint64_t v22 = *(void *)(v14 + 40) + v19;
    *(void *)(v14 + 16) = v21;
    *(void *)(v14 + 24) = 0;
    *(void *)(v14 + 8) = v22;
  }
  if ((geo::codec::decodeSectionEncoding((geo::codec::Allocator *)(v14 + 8), a3, 0, 0, 0) & 1) == 0)
  {
    uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
    int v31 = 3012;
    goto LABEL_25;
  }
  unint64_t v23 = *(void *)(v14 + 24);
  unint64_t v24 = 8 * *(void *)(v14 + 16);
  if (v23 + 5 > v24) {
    goto LABEL_21;
  }
  int v25 = 0;
  uint64_t v26 = *(void *)(v14 + 8);
  unint64_t v27 = 5;
  do
  {
    unint64_t v28 = 8 - (v23 & 7);
    if (v27 < v28) {
      unint64_t v28 = v27;
    }
    int v25 = (*(unsigned __int8 *)(v26 + (v23 >> 3)) >> (8 - (v23 & 7) - v28)) & ~(-1 << v28) | (v25 << v28);
    v23 += v28;
    *(void *)(v14 + 24) = v23;
    v27 -= v28;
  }
  while (v27);
  unint64_t v29 = (v25 + 1);
  if (v23 + v29 > v24)
  {
LABEL_21:
    uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
    int v31 = 3013;
    goto LABEL_25;
  }
  int v42 = 0;
  if (v25 != -1)
  {
    do
    {
      unint64_t v43 = 8 - (v23 & 7);
      if (v29 < v43) {
        unint64_t v43 = v29;
      }
      int v42 = (*(unsigned __int8 *)(v26 + (v23 >> 3)) >> (8 - (v23 & 7) - v43)) & ~(-1 << v43) | (v42 << v43);
      v23 += v43;
      *(void *)(v14 + 24) = v23;
      v29 -= v43;
    }
    while (v29);
  }
  if (v23 + 5 > v24) {
    goto LABEL_45;
  }
  int v44 = 0;
  unint64_t v45 = 5;
  do
  {
    unint64_t v46 = 8 - (v23 & 7);
    if (v45 < v46) {
      unint64_t v46 = v45;
    }
    int v44 = (*(unsigned __int8 *)(v26 + (v23 >> 3)) >> (8 - (v23 & 7) - v46)) & ~(-1 << v46) | (v44 << v46);
    v23 += v46;
    *(void *)(v14 + 24) = v23;
    v45 -= v46;
  }
  while (v45);
  unint64_t v47 = (v44 + 1);
  if (v23 + v47 > v24)
  {
LABEL_45:
    uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
    int v31 = 3014;
    goto LABEL_25;
  }
  unsigned int v48 = 0;
  if (v44 != -1)
  {
    do
    {
      unint64_t v49 = 8 - (v23 & 7);
      if (v47 < v49) {
        unint64_t v49 = v47;
      }
      unsigned int v48 = (*(unsigned __int8 *)(v26 + (v23 >> 3)) >> (8 - (v23 & 7) - v49)) & ~(-1 << v49) | (v48 << v49);
      v23 += v49;
      *(void *)(v14 + 24) = v23;
      v47 -= v49;
    }
    while (v47);
    if (v48 >= 0x10000)
    {
      uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
      int v31 = 3017;
      goto LABEL_25;
    }
  }
  unint64_t v50 = a4[1];
  unint64_t v51 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v50 - *a4) >> 3);
  uint64_t v126 = v48;
  unint64_t v52 = v48 - v51;
  if (v48 <= v51)
  {
    if (v48 < v51)
    {
      for (uint64_t i = *a4 + 136 * v48; v50 != i; v50 -= 136)
      {
        uint64_t v54 = *(std::__shared_weak_count **)(v50 - 104);
        if (v54 && !atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v54->__on_zero_shared)(v54, v52);
          std::__shared_weak_count::__release_weak(v54);
        }
        int v55 = *(std::__shared_weak_count **)(v50 - 128);
        if (v55) {
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      a4[1] = i;
    }
  }
  else
  {
    std::vector<GeoCodecsBuildingFootprintFeature,geo::StdAllocator<GeoCodecsBuildingFootprintFeature,geo::codec::Allocator>>::__append(a4, v52);
  }
  int v56 = *a3;
  unint64_t v57 = *((void *)*a3 + 5);
  uint64_t v58 = 4 * v57;
  uint64_t v59 = (uint64_t *)(*a5 + 312);
  uint64_t v60 = *v59;
  uint64_t v61 = *(void *)(*a5 + 320);
  if (*v59 == v61)
  {
    std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::resize((uint64_t)v59, 4 * v57);
    uint64_t v63 = 0;
  }
  else
  {
    unint64_t v62 = v61 - v60;
    std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::resize((uint64_t)v59, v61 - v60 + v58);
    uint64_t v63 = v62 >> 2;
  }
  uint64_t v64 = *a5;
  uint64_t v65 = *(void *)(*a5 + 312);
  if (!v65)
  {
    uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
    int v31 = 3034;
    goto LABEL_25;
  }
  uint64_t v66 = v64 + 344;
  uint64_t v68 = *(void *)(v64 + 344);
  uint64_t v67 = *(void *)(v64 + 352);
  uint64_t v125 = v63;
  if (v68 == v67)
  {
    std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::resize(v66, 4 * v57);
    unint64_t v70 = 0;
  }
  else
  {
    unint64_t v69 = v67 - v68;
    std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::resize(v66, v67 - v68 + v58);
    unint64_t v70 = v69 >> 2;
  }
  uint64_t v71 = *(void *)(*a5 + 344);
  if (!v71)
  {
    uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
    int v31 = 3044;
    goto LABEL_25;
  }
  uint64_t v131 = 0;
  uint64_t v132 = 0;
  unsigned int v130 = 0;
  if (!BitstreamUnpack((uint64_t *)(v14 + 8), (int *)&v132 + 1, 4uLL))
  {
    uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
    int v31 = 3055;
    goto LABEL_25;
  }
  if (!BitstreamUnpack((uint64_t *)(v14 + 8), (int *)&v132, 4uLL))
  {
    uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
    int v31 = 3056;
    goto LABEL_25;
  }
  if (!BitstreamUnpack((uint64_t *)(v14 + 8), (int *)&v131 + 1, 4uLL))
  {
    uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
    int v31 = 3057;
    goto LABEL_25;
  }
  if (!BitstreamUnpack((uint64_t *)(v14 + 8), (int *)&v131, 4uLL))
  {
    uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
    int v31 = 3058;
    goto LABEL_25;
  }
  unint64_t v124 = v70;
  if (!BitstreamUnpack((uint64_t *)(v14 + 8), (int *)&v130, 4uLL))
  {
    uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
    int v31 = 3059;
    goto LABEL_25;
  }
  unint64_t v72 = *(void *)(v14 + 24);
  unint64_t v73 = v72 + 1;
  unint64_t v74 = 8 * *(void *)(v14 + 16);
  if (v72 + 1 > v74)
  {
    uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
    int v31 = 3060;
    goto LABEL_25;
  }
  uint64_t v75 = *(void *)(v14 + 8);
  int v76 = *(unsigned __int8 *)(v75 + (v72 >> 3));
  *(void *)(v14 + 24) = v73;
  unint64_t v77 = v72 + 2;
  if (v72 + 2 > v74)
  {
    uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
    int v31 = 3061;
    goto LABEL_25;
  }
  int v78 = *(unsigned __int8 *)(v75 + (v73 >> 3));
  *(void *)(v14 + 24) = v77;
  unint64_t v79 = v72 + 3;
  if (v72 + 3 > v74)
  {
    uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
    int v31 = 3062;
    goto LABEL_25;
  }
  int v80 = *(unsigned __int8 *)(v75 + (v77 >> 3));
  *(void *)(v14 + 24) = v79;
  unint64_t v81 = v72 + 4;
  if (v72 + 4 > v74)
  {
    uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
    int v31 = 3063;
    goto LABEL_25;
  }
  int v82 = *(unsigned __int8 *)(v75 + (v79 >> 3));
  *(void *)(v14 + 24) = v81;
  if (!v126)
  {
LABEL_137:
    unint64_t v101 = *(void *)(v14 + 48) + (v81 >> 3);
    if ((v81 & 7) != 0) {
      ++v101;
    }
    *(void *)(v14 + 48) = v101;
    *(unsigned char *)(v14 + 32) = 0;
    _ZNSt3__115allocate_sharedB8ne180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v128);
    uint64_t v102 = v128;
    **(void **)long long v128 = 0x400000005;
    *(_WORD *)(v102 + 33) = 1025;
    std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]<FeatureStyleAttributes,void>((uint64_t)&v133, &v128);
    std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&v128);
    int v103 = FeatureStyleAttributesSet::insert(*a5 + 1112, (uint64_t *)&v133);
    uint64_t v104 = v103[1];
    v127[0] = *v103;
    v127[1] = v104;
    if (v104) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v104 + 8), 1uLL, memory_order_relaxed);
    }
    std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)v127);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v33 = (geo::codec::Allocator *)geo::codec::decodeAttributeSet<GeoCodecsFeature>(4, (uint64_t *)(v14 + 8), v126, *a5 + 1112, *a4, 136);
    if ((v33 & 1) == 0)
    {
      uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
      int v31 = 3141;
      goto LABEL_25;
    }
    uint64_t v12 = 1;
    if (*(unsigned char *)v14) {
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  uint64_t v116 = 0;
  unint64_t v120 = 0;
  int v111 = (1 << (~(_BYTE)v72 & 7)) & v76;
  int v109 = (1 << (~(_BYTE)v73 & 7)) & v78;
  int v107 = (1 << (~(_BYTE)v77 & 7)) & v80;
  unint64_t v110 = v131;
  unint64_t v122 = v130;
  unint64_t v112 = HIDWORD(v132);
  unint64_t v119 = v132;
  int v106 = (1 << (~(_BYTE)v79 & 7)) & v82;
  unint64_t v115 = HIDWORD(v131);
  while (1)
  {
    unint64_t v83 = *a4;
    uint64_t v117 = *a4 + 136 * v116;
    *(void *)(v117 + 112) = 0;
    unint64_t v114 = v83;
    uint64_t v85 = *a5;
    uint64_t v84 = a5[1];
    if (v84) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v84 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v86 = *(std::__shared_weak_count **)(v117 + 8);
    *(void *)uint64_t v117 = v85;
    *(void *)(v117 + 8) = v84;
    if (v86) {
      std::__shared_weak_count::__release_weak(v86);
    }
    *(_OWORD *)(v117 + 80) = xmmword_18A62BFC0;
    if (v42)
    {
      LODWORD(v128) = 0;
      if (!BitstreamUnpack((uint64_t *)(v14 + 8), (int *)&v128, v110))
      {
        uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
        int v31 = 3076;
        goto LABEL_25;
      }
      for (int j = v128; j; --j)
      {
        if (!BitstreamUnpack((uint64_t *)(v14 + 8), &v129, v122))
        {
          uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
          int v31 = 3079;
          goto LABEL_25;
        }
      }
    }
    LODWORD(v128) = 0;
    if (!BitstreamUnpack((uint64_t *)(v14 + 8), (int *)&v128, v112))
    {
      uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
      int v31 = 3084;
      goto LABEL_25;
    }
    uint64_t v123 = v128;
    unint64_t v108 = v120 + v128;
    if (v108 > v57)
    {
      uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
      int v31 = 3085;
      goto LABEL_25;
    }
    *(_DWORD *)(v117 + 96) = v120;
    *(_DWORD *)(v117 + 100) = v123;
    *(void *)(v117 + 112) = v125;
    if (v111)
    {
      int v88 = v123;
      for (uint64_t k = v125; v88; --v88)
      {
        int v129 = 0;
        if (!BitstreamUnpack((uint64_t *)(v14 + 8), &v129, v119))
        {
          uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
          int v31 = 3094;
          goto LABEL_25;
        }
        *(float *)(v65 + 4 * v125) = (float)v129 / (float)~(-1 << *(unsigned char *)v56);
        uint64_t k = ++v125;
      }
    }
    else
    {
      if (v123)
      {
        uint64_t v113 = 4 * v123;
        bzero((void *)(v65 + 4 * v125), 4 * v123);
        uint64_t v105 = (v123 - 1);
        uint64_t k = v125 + v105 + 1;
        *(void *)(v114 + 136 * v116 + 120) = v124;
        if (v109) {
          goto LABEL_119;
        }
        goto LABEL_125;
      }
      uint64_t k = v125;
    }
    *(void *)(v114 + 136 * v116 + 120) = v124;
    if (v109)
    {
      if (v123)
      {
        while (1)
        {
LABEL_119:
          unint64_t v93 = *(void *)(v14 + 24);
          if (v93 + 1 > 8 * *(void *)(v14 + 16))
          {
            uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
            int v31 = 3107;
            goto LABEL_25;
          }
          unsigned int v94 = *(unsigned __int8 *)(*(void *)(v14 + 8) + (v93 >> 3));
          *(void *)(v14 + 24) = v93 + 1;
          int v129 = 0;
          if ((v94 >> (~(_BYTE)v93 & 7)))
          {
            if (!BitstreamUnpack((uint64_t *)(v14 + 8), &v129, v115))
            {
              uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
              int v31 = 3110;
              goto LABEL_25;
            }
            int v89 = v129;
          }
          else
          {
            int v89 = 0;
          }
          float v90 = (float)v89 / (float)~(-1 << *(unsigned char *)v56);
          unint64_t v91 = v124 + 1;
          *(float *)(v71 + 4 * v124) = v90;
          BOOL v92 = v123 == 1;
          LODWORD(v123) = v123 - 1;
          ++v124;
          if (v92)
          {
            unint64_t v124 = v91;
            uint64_t v125 = k;
            goto LABEL_128;
          }
        }
      }
      goto LABEL_126;
    }
    if (v123)
    {
      uint64_t v113 = 4 * v123;
      uint64_t v105 = (v123 - 1);
LABEL_125:
      bzero((void *)(v71 + 4 * v124), v113);
      v124 += v105 + 1;
    }
LABEL_126:
    uint64_t v125 = k;
LABEL_128:
    unint64_t v95 = v114 + 136 * v116;
    *(unsigned char *)(v95 + 128) = 0;
    unint64_t v96 = (unsigned char *)(v95 + 128);
    if (v107)
    {
      unint64_t v97 = *(void *)(v14 + 24);
      if (v97 + 1 > 8 * *(void *)(v14 + 16))
      {
        uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
        int v31 = 3123;
        goto LABEL_25;
      }
      unsigned int v98 = *(unsigned __int8 *)(*(void *)(v14 + 8) + (v97 >> 3));
      *(void *)(v14 + 24) = v97 + 1;
      *unint64_t v96 = (v98 >> (~(_BYTE)v97 & 7)) & 1;
    }
    *(void *)(v117 + 40) = 0;
    uint64_t v118 = (unint64_t *)(v117 + 40);
    if (v106)
    {
      unint64_t v99 = *(void *)(v14 + 24);
      if (v99 + 1 > 8 * *(void *)(v14 + 16))
      {
        int v31 = 3130;
        goto LABEL_155;
      }
      unsigned int v100 = *(unsigned __int8 *)(*(void *)(v14 + 8) + (v99 >> 3));
      *(void *)(v14 + 24) = v99 + 1;
      if (((v100 >> (~(_BYTE)v99 & 7)) & 1) != 0 && !BitstreamUnpack64((uint64_t *)(v14 + 8), v118, 0x40uLL)) {
        break;
      }
    }
    unint64_t v120 = v108;
    if (++v116 == v126)
    {
      unint64_t v81 = *(void *)(v14 + 24);
      goto LABEL_137;
    }
  }
  int v31 = 3132;
LABEL_155:
  uint64_t v30 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_25:
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v33 = (geo::codec::Allocator *)fprintf(v30, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v31);
  uint64_t v12 = 0;
  if (!*(unsigned char *)v14) {
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v34 = geo::codec::Allocator::instance(v33);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v33 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v34 + 40))(v34, *(void *)(v14 + 40), 0);
LABEL_27:
  uint64_t v35 = geo::codec::Allocator::instance(v33);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v35 + 40))(v35, v14, 0);
  unint64_t v36 = v134;
  if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  uint64_t v38 = v135;
  uint64_t v37 = v136;
  v39.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v40 = rep;
  *(void *)&long long v128 = v38;
  if (v38)
  {
    unint64_t v133 = &v128;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v37 + 1912, (uint64_t *)&v128, (uint64_t)&std::piecewise_construct, (uint64_t **)&v133)+ 4) = (double)((v39.__d_.__rep_ - v40) / 1000) * 0.001;
  }
  uint64_t v41 = v137;
  if (v137 && !atomic_fetch_add(&v137->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  return v12;
}

void sub_188FB412C(_Unwind_Exception *a1)
{
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100](v1 - 136);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::initTile(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  long long v4 = 0uLL;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  char v26 = 0;
  uint64_t v27 = a2;
  unint64_t v29 = a3;
  if (a3 < 4) {
    goto LABEL_33;
  }
  if (a3 < 6) {
    goto LABEL_33;
  }
  if (*(_DWORD *)a2 != 877677910) {
    goto LABEL_33;
  }
  *((_WORD *)a1 + 8) = *(_WORD *)(a2 + 4);
  if (a3 < 8) {
    goto LABEL_33;
  }
  uint64_t v7 = *(unsigned __int16 *)(a2 + 6);
  if (!*(_WORD *)(a2 + 6))
  {
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_20;
  }
  a1[1] = v7;
  uint64_t v8 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  uint64_t v9 = 16 * v7;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 16))(v8, 16 * v7, 8);
  long long v4 = 0uLL;
  *a1 = result;
  if (result)
  {
    uint64_t v11 = 0;
    uint64_t v12 = (unsigned int *)(result + 4);
    unsigned int v13 = -1;
    do
    {
      if (v11 + 10 > a3) {
        goto LABEL_32;
      }
      *((_WORD *)v12 - 2) = *(_WORD *)(a2 + v11 + 8);
      if (v11 + 14 > a3) {
        goto LABEL_32;
      }
      unsigned int v14 = *(_DWORD *)(a2 + v11 + 10);
      *uint64_t v12 = v14;
      if (v11 + 18 > a3) {
        goto LABEL_32;
      }
      v12[1] = *(_DWORD *)(a2 + v11 + 14);
      if (v14 < v13) {
        unsigned int v13 = v14;
      }
      v11 += 10;
      v12 += 4;
    }
    while (10 * v7 != v11);
    uint64_t v28 = v11 + 8;
    if (v11 + 8 < (unint64_t)v13)
    {
      uint64_t v15 = 0;
      while (1)
      {
        uint64_t result = geo::codec::chapterReadVarUint32(v25, (unsigned int *)(*a1 + v15 + 12));
        if ((result & 1) == 0) {
          break;
        }
        v15 += 16;
        if (v9 == v15) {
          goto LABEL_20;
        }
      }
      long long v4 = 0uLL;
      if (!*a1) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
    if (v7 < 2)
    {
      uint64_t v19 = 0;
LABEL_37:
      uint64_t v23 = v7 - v19;
      unint64_t v24 = (_DWORD *)(result + 16 * v19 + 12);
      do
      {
        *unint64_t v24 = -1;
        v24 += 4;
        --v23;
      }
      while (v23);
      goto LABEL_20;
    }
    uint64_t v19 = (unsigned __int16)v7 & 0xFFFE;
    unint64_t v21 = (_DWORD *)(result + 28);
    uint64_t v22 = v19;
    do
    {
      *(v21 - 4) = -1;
      *unint64_t v21 = -1;
      v21 += 8;
      v22 -= 2;
    }
    while (v22);
    if (v19 != v7) {
      goto LABEL_37;
    }
LABEL_20:
    a1[3] = a2;
    a1[4] = a3;
    *((_DWORD *)a1 + 5) = 70;
    uint64_t v16 = a1[1];
    if (!v16) {
      return 1;
    }
    uint64_t v17 = (_DWORD *)(*a1 + 8);
    uint64_t result = 1;
    while (*v17 && (*v17 + *(v17 - 1)) <= a3)
    {
      v17 += 4;
      if (!--v16) {
        return result;
      }
    }
LABEL_32:
    uint64_t v20 = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v20 + 40))(v20, *a1, 0);
    long long v4 = 0uLL;
  }
LABEL_33:
  uint64_t result = 0;
  *((_OWORD *)a1 + 1) = v4;
  *((_OWORD *)a1 + 2) = v4;
  *(_OWORD *)a1 = v4;
  return result;
}

uint64_t geo::codec::_populateTransitNodeStyleAttributes(uint64_t *a1)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(*a1 + 1408);
  uint64_t v3 = *(void *)(*a1 + 1416) - v2;
  if (!v3) {
    return 1;
  }
  unint64_t v5 = 0;
  unint64_t v6 = v3 / 344;
  if (v6 <= 1) {
    unint64_t v6 = 1;
  }
  uint64_t v7 = (void *)(v2 + 312);
  do
  {
    unint64_t v8 = v5;
    uint64_t v9 = *(v7 - 10);
    *(v7 - 1) = v5;
    *uint64_t v7 = v9;
    v5 += v9;
    v7 += 43;
    --v6;
  }
  while (v6);
  if (!v5) {
    return 1;
  }
  uint64_t v10 = *(void **)(v1 + 1728);
  uint64_t v11 = *(void *)(v1 + 1720);
  unint64_t v12 = ((uint64_t)v10 - v11) >> 4;
  unint64_t v13 = v5 - v12;
  if (v5 > v12)
  {
    uint64_t v14 = *(void *)(v1 + 1736);
    if (v13 > (v14 - (uint64_t)v10) >> 4)
    {
      if (v5 >> 60) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v14 - v11;
      uint64_t v16 = v15 >> 3;
      if (v15 >> 3 <= v5) {
        uint64_t v16 = v5;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
        uint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v17 = v16;
      }
      uint64_t v18 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v1 + 1744) + 16))(*(void *)(v1 + 1744), 16 * v17, 8);
      uint64_t v19 = (void *)(v18 + 16 * v12);
      unint64_t v20 = v18 + 16 * v5;
      uint64_t v21 = 16 * (v8 + v9) - 16 * v12;
      uint64_t v22 = v19;
      do
      {
        if (v22)
        {
          *uint64_t v22 = 0;
          v22[1] = 0;
        }
        v22 += 2;
        v21 -= 16;
      }
      while (v21);
      uint64_t v27 = v18 + 16 * v17;
      uint64_t v28 = *(void **)(v1 + 1728);
      unint64_t v29 = *(void **)(v1 + 1720);
      if (v28 == v29)
      {
        *(void *)(v1 + 1720) = v19;
        *(void *)(v1 + 1728) = v20;
        uint64_t v32 = *(void *)(v1 + 1736);
        *(void *)(v1 + 1736) = v27;
      }
      else
      {
        do
        {
          long long v30 = *((_OWORD *)v28 - 1);
          v28 -= 2;
          *((_OWORD *)v19 - 1) = v30;
          v19 -= 2;
          *uint64_t v28 = 0;
          v28[1] = 0;
        }
        while (v28 != v29);
        uint64_t v28 = *(void **)(v1 + 1720);
        int v31 = *(void **)(v1 + 1728);
        *(void *)(v1 + 1720) = v19;
        *(void *)(v1 + 1728) = v20;
        uint64_t v32 = *(void *)(v1 + 1736);
        for (*(void *)(v1 + 1736) = v27; v31 != v28; v31 -= 2)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v33 = (std::__shared_weak_count *)*(v31 - 1);
          if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
      }
      if (v28) {
        (*(void (**)(void, void *, uint64_t))(**(void **)(v1 + 1744) + 40))(*(void *)(v1 + 1744), v28, v32 - (void)v28);
      }
      goto LABEL_43;
    }
    uint64_t v26 = 16 * v13;
    uint64_t i = &v10[2 * v13];
    do
    {
      if (v10)
      {
        *uint64_t v10 = 0;
        v10[1] = 0;
      }
      v10 += 2;
      v26 -= 16;
    }
    while (v26);
    goto LABEL_31;
  }
  if (v5 < v12)
  {
    for (uint64_t i = (void *)(v11 + 16 * v5); v10 != i; v10 -= 2)
    {
      int v25 = (std::__shared_weak_count *)*(v10 - 1);
      if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
LABEL_31:
    *(void *)(v1 + 1728) = i;
  }
LABEL_43:
  uint64_t v34 = *a1;
  uint64_t v35 = *(void *)(*a1 + 1408);
  if (*(void *)(*a1 + 1416) == v35) {
    return 1;
  }
  unint64_t v36 = 0;
  while (1)
  {
    uint64_t v37 = (void *)(v35 + 344 * v36);
    std::chrono::steady_clock::time_point v39 = v37 + 29;
    unint64_t v38 = v37[29];
    if (v38) {
      break;
    }
LABEL_87:
    ++v36;
    uint64_t v35 = *(void *)(v34 + 1408);
    uint64_t result = 1;
    if (v36 >= 0x82FA0BE82FA0BE83 * ((*(void *)(v34 + 1416) - v35) >> 3)) {
      return result;
    }
  }
  unint64_t v40 = 0;
  uint64_t v41 = v35 + 344 * v36;
  uint64_t v63 = (void *)(v41 + 224);
  uint64_t v64 = (void *)(v41 + 304);
  while (v38 > v40)
  {
    int v42 = (std::__shared_weak_count *)v37[1];
    if (!v42) {
      break;
    }
    unint64_t v43 = std::__shared_weak_count::lock(v42);
    if (!v43) {
      break;
    }
    int v44 = v43;
    unint64_t v45 = (void *)*v37;
    if (*v37)
    {
      unint64_t v46 = *(void *)(v45[180] + 8 * (*v63 + v40));
      uint64_t v47 = v45[165];
      uint64_t v48 = v45[164];
      unint64_t v49 = 0x8E38E38E38E38E39 * ((v47 - v48) >> 3);
      uint64_t v50 = v48 + 72 * v46;
      if (v46 >= v49) {
        uint64_t v51 = 0;
      }
      else {
        uint64_t v51 = v50;
      }
      if (!atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_55:
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    else
    {
      uint64_t v51 = 0;
      if (!atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_55;
      }
    }
    if (!v51) {
      break;
    }
    uint64_t v52 = *(void *)(v51 + 24);
    long long v53 = *(std::__shared_weak_count **)(v51 + 32);
    uint64_t v69 = v52;
    unint64_t v70 = v53;
    if (v53) {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v54 = v37[3];
    uint64_t v71 = v54;
    int v55 = (std::__shared_weak_count *)v37[4];
    unint64_t v72 = v55;
    if (v55) {
      atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = geo::codec::Allocator::instance((geo::codec::Allocator *)v43);
    int v56 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v68 + 16))(v68, 32, 8);
    uint64_t v65 = v56;
    uint64_t v66 = v56;
    uint64_t v67 = v56 + 4;
    if (v56)
    {
      *int v56 = v52;
      v56[1] = v53;
      if (v53) {
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    v56[2] = v54;
    v56[3] = v55;
    if (v55)
    {
      atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v66 = v56 + 4;
      if (!atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    else
    {
      uint64_t v66 = v56 + 4;
    }
    unint64_t v57 = v70;
    if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
    char v58 = geo::codec::unionStyleAttributes((uint64_t *)&v65, (uint64_t *)(*(void *)(*a1 + 1720) + 16 * (*v64 + v40)), *a1 + 1112);
    if ((v58 & 1) == 0) {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 6375);
    }
    uint64_t v59 = (uint64_t)v65;
    if (v65)
    {
      uint64_t v60 = v66;
      uint64_t v61 = (uint64_t)v65;
      if (v66 != v65)
      {
        do
        {
          unint64_t v62 = (std::__shared_weak_count *)*(v60 - 1);
          if (v62)
          {
            if (!atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, uint64_t))v62->__on_zero_shared)(v62, v61);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          v60 -= 2;
        }
        while (v60 != (void *)v59);
        uint64_t v61 = (uint64_t)v65;
      }
      uint64_t v66 = (void *)v59;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v68 + 40))(v68, v61, (uint64_t)v67 - v61);
    }
    if ((v58 & 1) == 0) {
      return 0;
    }
    ++v40;
    unint64_t v38 = *v39;
    if (v40 >= *v39)
    {
      uint64_t v34 = *a1;
      goto LABEL_87;
    }
  }
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 6372);
  return 0;
}

void sub_188FB4B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t geo::codec::_readDaVinciTrafficSkeletonOld(void *a1, unint64_t *a2, void *a3)
{
  uint64_t v243 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a3;
  unint64_t v7 = a1[1];
  if (!v7)
  {
LABEL_5:
    uint64_t v10 = 0;
    int v234 = "ChapterTrafficSkeleton1";
    uint64_t v235 = v6;
    uint64_t v11 = (std::__shared_weak_count *)a3[1];
    unsigned int v236 = v11;
    if (!v11) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v8 = 0;
  unsigned int v9 = 0;
  while (*(_WORD *)(*a1 + 16 * v8) != 146)
  {
    uint64_t v8 = ++v9;
    if (v7 <= v9) {
      goto LABEL_5;
    }
  }
  uint64_t v10 = geo::codec::chapterAt((uint64_t)a1, v9, 146, v6 + 1912);
  uint64_t v6 = *a3;
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  int v234 = "ChapterTrafficSkeleton1";
  uint64_t v235 = v6;
  unsigned int v236 = v11;
  if (v11) {
LABEL_6:
  }
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v12.__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v237 = v12.__d_.__rep_;
  if (!v10)
  {
    char v14 = 1;
    goto LABEL_29;
  }
  if (*(void *)(*a3 + 2928) != *(void *)(*a3 + 2920))
  {
    char v14 = 1;
    goto LABEL_25;
  }
  v12.__d_.__rep_ = geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)(v10 + 64));
  if ((v12.__d_.__rep_ & 1) == 0)
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 10526;
    goto LABEL_23;
  }
  if (*(_DWORD *)(v10 + 64) != 1)
  {
LABEL_24:
    char v14 = 0;
LABEL_25:
    if (a1)
    {
      if (*(unsigned char *)v10)
      {
        uint64_t v21 = geo::codec::Allocator::instance((geo::codec::Allocator *)v12.__d_.__rep_);
        v12.__d_.__rep_ = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v21 + 40))(v21, *(void *)(v10 + 40), 0);
      }
      uint64_t v22 = geo::codec::Allocator::instance((geo::codec::Allocator *)v12.__d_.__rep_);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v22 + 40))(v22, v10, 0);
    }
    goto LABEL_29;
  }
  unsigned int v233 = 0;
  if ((geo::codec::chapterReadVarUint32((void *)v10, &v233) & 1) == 0)
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 10533;
    goto LABEL_23;
  }
  unsigned int v232 = 0;
  uint64_t v231 = 0;
  unsigned int v230 = 0;
  if ((geo::codec::chapterReadVarUint32((void *)v10, &v232) & 1) == 0)
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 10540;
    goto LABEL_23;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v231 + 1) & 1) == 0)
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 10541;
    goto LABEL_23;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v231) & 1) == 0)
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 10542;
    goto LABEL_23;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v10, &v230) & 1) == 0)
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 10543;
    goto LABEL_23;
  }
  unint64_t v16 = *(void *)(v10 + 48);
  unint64_t v15 = *(void *)(v10 + 56);
  _CF = v15 >= v16;
  unint64_t v18 = v15 - v16;
  if (!_CF)
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 10544;
LABEL_23:
    v12.__d_.__rep_ = fprintf(v19, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v20);
    goto LABEL_24;
  }
  *(void *)(v10 + 8) = *(void *)(v10 + 40) + v16;
  *(unsigned char *)(v10 + 32) = 1;
  *(void *)(v10 + 16) = v18;
  *(void *)(v10 + 24) = 0;
  int v229 = 0;
  int v228 = 0;
  if (!BitstreamUnpack((uint64_t *)(v10 + 8), &v229, 5uLL))
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 10551;
    goto LABEL_23;
  }
  char v193 = ++v229;
  BOOL v25 = BitstreamUnpack((uint64_t *)(v10 + 8), &v228, 5uLL);
  if (!v25)
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 10553;
    goto LABEL_23;
  }
  char v190 = ++v228;
  uint64_t v188 = *a3;
  unint64_t v224 = 0;
  uint64_t v225 = 0;
  uint64_t v226 = 0;
  BOOL v227 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)v25);
  unint64_t v220 = 0;
  uint64_t v221 = 0;
  uint64_t v222 = 0;
  int v223 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v227);
  unint64_t v216 = 0;
  uint64_t v217 = 0;
  uint64_t v218 = 0;
  int v219 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v223);
  unint64_t v212 = 0;
  uint64_t v213 = 0;
  uint64_t v214 = 0;
  uint64_t v215 = geo::codec::Allocator::instance(v219);
  if ((geo::codec::adaptiveDeltaEncoderDecode((geo::codec::Allocator *)(v10 + 8), v232, (uint64_t)&v224) & 1) == 0)
  {
    long long v168 = (FILE *)*MEMORY[0x1E4F143C8];
    int v169 = 10578;
LABEL_176:
    fprintf(v168, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v169);
    char v14 = 0;
    int v170 = 2;
    goto LABEL_177;
  }
  if ((geo::codec::adaptiveDeltaEncoderDecode((geo::codec::Allocator *)(v10 + 8), HIDWORD(v231), (uint64_t)&v220) & 1) == 0)
  {
    long long v168 = (FILE *)*MEMORY[0x1E4F143C8];
    int v169 = 10579;
    goto LABEL_176;
  }
  if ((geo::codec::adaptiveDeltaEncoderDecode((geo::codec::Allocator *)(v10 + 8), v231, (uint64_t)&v216) & 1) == 0)
  {
    long long v168 = (FILE *)*MEMORY[0x1E4F143C8];
    int v169 = 10580;
    goto LABEL_176;
  }
  uint64_t v26 = geo::codec::adaptiveDeltaEncoderDecode((geo::codec::Allocator *)(v10 + 8), v230, (uint64_t)&v212);
  if ((v26 & 1) == 0)
  {
    long long v168 = (FILE *)*MEMORY[0x1E4F143C8];
    int v169 = 10581;
    goto LABEL_176;
  }
  if (v224 != v225)
  {
    uint64_t v27 = (void *)(v225 - 8);
    if (v225 - 8 > v224)
    {
      unint64_t v28 = v224 + 8;
      do
      {
        uint64_t v29 = *(void *)(v28 - 8);
        *(void *)(v28 - 8) = *v27;
        *v27-- = v29;
        _CF = v28 >= (unint64_t)v27;
        v28 += 8;
      }
      while (!_CF);
    }
  }
  long long v30 = (void *)(v221 - 8);
  BOOL v31 = v220 != v221 && (unint64_t)v30 > v220;
  if (v31)
  {
    unint64_t v32 = v220 + 8;
    do
    {
      uint64_t v33 = *(void *)(v32 - 8);
      *(void *)(v32 - 8) = *v30;
      *v30-- = v33;
      _CF = v32 >= (unint64_t)v30;
      v32 += 8;
    }
    while (!_CF);
  }
  uint64_t v34 = (void *)(v217 - 8);
  if (v216 != v217 && (unint64_t)v34 > v216)
  {
    unint64_t v36 = v216 + 8;
    do
    {
      uint64_t v37 = *(void *)(v36 - 8);
      *(void *)(v36 - 8) = *v34;
      *v34-- = v37;
      _CF = v36 >= (unint64_t)v34;
      v36 += 8;
    }
    while (!_CF);
  }
  unint64_t v38 = (void *)(v213 - 8);
  if (v212 != v213 && (unint64_t)v38 > v212)
  {
    unint64_t v40 = v212 + 8;
    do
    {
      uint64_t v41 = *(void *)(v40 - 8);
      *(void *)(v40 - 8) = *v38;
      *v38-- = v41;
      _CF = v40 >= (unint64_t)v38;
      v40 += 8;
    }
    while (!_CF);
  }
  uint64_t v208 = 0;
  uint64_t v209 = 0;
  uint64_t v210 = 0;
  BOOL v211 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)v26);
  int v204 = 0;
  uint64_t v205 = 0;
  uint64_t v206 = 0;
  int v207 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v211);
  memset(v203, 0, 24);
  int v42 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v207);
  v203[3] = v42;
  if (!v232)
  {
    int v196 = 0;
    char v14 = 1;
    goto LABEL_188;
  }
  uint64_t v173 = (uint64_t *)(v188 + 2920);
  uint64_t v175 = *(void *)(*a3 + 792);
  uint64_t v176 = 0;
  uint64_t v174 = *(void *)(v175 + 32);
  uint64_t v189 = *(void *)(*a3 + 32);
  uint64_t v177 = ~(-1 << v193);
  uint64_t v178 = *(void *)(*a3 + 40);
  double v43 = 1.0 / (double)v177;
  __asm { FMOV            V9.2S, #1.0 }
  double v47 = 1.0 / (double)~(-1 << v190);
LABEL_75:
  uint64_t v199 = 0;
  uint64_t v200 = 0;
  uint64_t v201 = 0;
  uint64_t v202 = geo::codec::Allocator::instance(v42);
  unsigned int v191 = *(_DWORD *)(v225 - 8);
  v225 -= 8;
  if (v178 == v189)
  {
    unsigned int v194 = 0;
  }
  else
  {
    uint64_t v48 = 0;
    unsigned int v194 = 0;
    unsigned int v49 = v191;
    while (1)
    {
      unsigned int v50 = *(_DWORD *)(v189 + 168 * v48 + 100);
      unsigned int v191 = v49;
      unsigned int v51 = v49 - v50;
      if (v49 < v50) {
        break;
      }
      uint64_t v48 = ++v194;
      unsigned int v49 = v51;
      if (0xCF3CF3CF3CF3CF3DLL * ((v178 - v189) >> 3) <= v194)
      {
        unsigned int v194 = 0;
        unsigned int v191 = v51;
        break;
      }
    }
  }
  unsigned int v198 = (const char *)__PAIR64__(v191, v194);
  unint64_t v52 = *(void *)(v10 + 24);
  unint64_t v53 = v52 + 1;
  unint64_t v54 = 8 * *(void *)(v10 + 16);
  if (v52 + 1 > v54)
  {
    uint64_t v171 = (FILE *)*MEMORY[0x1E4F143C8];
    int v172 = 10615;
    goto LABEL_187;
  }
  uint64_t v55 = *(void *)(v10 + 8);
  int v56 = *(unsigned __int8 *)(v55 + (v52 >> 3));
  *(void *)(v10 + 24) = v53;
  int v185 = (1 << (~(_BYTE)v52 & 7)) & v56;
  if (v185)
  {
    unint64_t v57 = v52 + 2;
    if (v57 > v54)
    {
      uint64_t v171 = (FILE *)*MEMORY[0x1E4F143C8];
      int v172 = 10618;
      goto LABEL_187;
    }
    unsigned int v58 = *(unsigned __int8 *)(v55 + (v53 >> 3));
    *(void *)(v10 + 24) = v57;
    int v183 = (v58 >> (~(_BYTE)v53 & 7)) & 1;
    unint64_t v53 = v57;
  }
  else
  {
    LOBYTE(v183) = 0;
  }
  unint64_t v59 = v53 + 1;
  if (v53 + 1 > v54)
  {
    uint64_t v171 = (FILE *)*MEMORY[0x1E4F143C8];
    int v172 = 10622;
    goto LABEL_187;
  }
  int v60 = *(unsigned __int8 *)(v55 + (v53 >> 3));
  *(void *)(v10 + 24) = v59;
  int log = (1 << (~(_BYTE)v53 & 7)) & v60;
  if (log)
  {
    unint64_t v61 = v53 + 2;
    if (v61 > v54)
    {
      uint64_t v171 = (FILE *)*MEMORY[0x1E4F143C8];
      int v172 = 10625;
      goto LABEL_187;
    }
    unsigned int v62 = *(unsigned __int8 *)(v55 + (v59 >> 3));
    *(void *)(v10 + 24) = v61;
    int v179 = (v62 >> (~(_BYTE)v59 & 7)) & 1;
  }
  else
  {
    LOBYTE(v179) = 0;
  }
  if (v209 != v208) {
    uint64_t v209 = v208;
  }
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::resize((uint64_t)&v204, 0);
  while (1)
  {
    uint64_t v63 = *(void *)(v221 - 8);
    v221 -= 8;
    *(void *)buf = v63;
    std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::emplace_back<long long>((uint64_t)&v208, buf);
    unint64_t v65 = *(void *)(v10 + 24);
    unint64_t v66 = v65 + 1;
    unint64_t v67 = 8 * *(void *)(v10 + 16);
    if (v65 + 1 > v67)
    {
      uint64_t v171 = (FILE *)*MEMORY[0x1E4F143C8];
      int v172 = 10634;
      goto LABEL_187;
    }
    if ((*(unsigned __int8 *)(*(void *)(v10 + 8) + (v65 >> 3)) >> (~(_BYTE)v65 & 7))) {
      break;
    }
LABEL_111:
    if (v66 > v67)
    {
      uint64_t v171 = (FILE *)*MEMORY[0x1E4F143C8];
      int v172 = 10673;
      goto LABEL_187;
    }
    *(void *)(v10 + 24) = v66;
    if (*(void *)(v209 - 8) >= v177)
    {
      uint64_t v87 = v200;
      uint64_t v184 = v199;
      unint64_t v186 = (v200 - v199) >> 5;
      if (v200 != v199)
      {
        int v88 = v204;
        uint64_t v89 = (v205 - (uint64_t)v204) >> 2;
        uint64_t v90 = v208;
        unint64_t v91 = (v209 - v208) >> 3;
        uint64_t v92 = (v200 - v199) >> 5;
        if (v186 <= 1) {
          uint64_t v92 = 1;
        }
        unint64_t v93 = (float *)(v199 + 4);
        do
        {
          if (!v89) {
            std::vector<zilch::GeoCoordinates>::__throw_out_of_range[abi:ne180100]();
          }
          unint64_t v94 = *v88;
          if (v91 <= v94) {
            std::vector<zilch::GeoCoordinates>::__throw_out_of_range[abi:ne180100]();
          }
          float v95 = (double)*(uint64_t *)(v90 + 8 * v94) * v43;
          *unint64_t v93 = v95;
          v93 += 8;
          ++v88;
          --v89;
          --v92;
        }
        while (v92);
      }
      unint64_t v96 = (uint64_t *)(v174 + 16 * (*(_DWORD *)(v189 + 168 * v194 + 96) + v191));
      uint64_t v97 = *(void *)(v175 + 8);
      uint64_t v99 = *v96;
      uint64_t v98 = v96[1];
      unint64_t v192 = (float32x2_t *)(v97 + 8 * *v96);
      unint64_t v100 = v98 - 1;
      if (v98 == 1)
      {
        double v103 = 0.0;
      }
      else
      {
        float32x2_t v101 = *v192;
        int v102 = v98 - 1;
        double v103 = 0.0;
        if ((v98 - 1) >= 8
          && ((unint64_t v104 = v98 - 2, _ZF = v104 == -1, v105 = HIDWORD(v104), !_ZF) ? (_ZF = v105 == 0) : (_ZF = 0), _ZF))
        {
          unsigned int v107 = v102 & 0xFFFFFFF8;
          v64.u64[1] = (unint64_t)*v192;
          int8x16_t v151 = (int8x16_t)vdupq_lane_s32((int32x2_t)v101, 0);
          unint64_t v152 = (int32x4_t *)(v97 + 8 * v99 + 40);
          float64x2_t v153 = 0uLL;
          unsigned int v154 = v102 & 0xFFFFFFF8;
          float64x2_t v155 = 0uLL;
          float64x2_t v156 = 0uLL;
          float64x2_t v157 = 0uLL;
          do
          {
            i32 = (const float *)v152[-2].i32;
            float32x4x2_t v244 = vld2q_f32(i32);
            int32x4_t v160 = *v152;
            int32x4_t v159 = v152[1];
            v152 += 4;
            float32x4_t v161 = (float32x4_t)vuzp1q_s32(v160, v159);
            float32x4_t v162 = (float32x4_t)vuzp2q_s32(v160, v159);
            float32x4_t v163 = vsubq_f32((float32x4_t)vextq_s8(v151, (int8x16_t)v244.val[0], 0xCuLL), v244.val[0]);
            float32x4_t v164 = vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v244.val[0], (int8x16_t)v161, 0xCuLL), v161);
            float32x4_t v165 = vsubq_f32((float32x4_t)vextq_s8(v64, (int8x16_t)v244.val[1], 0xCuLL), v244.val[1]);
            v244.val[0] = vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v244.val[1], (int8x16_t)v162, 0xCuLL), v162);
            float32x4_t v166 = vsqrtq_f32(vmlaq_f32(vmulq_f32(v163, v163), v165, v165));
            float32x4_t v167 = vsqrtq_f32(vmlaq_f32(vmulq_f32(v164, v164), v244.val[0], v244.val[0]));
            float64x2_t v155 = vaddq_f64(v155, vcvt_hight_f64_f32(v166));
            float64x2_t v153 = vaddq_f64(v153, vcvtq_f64_f32(*(float32x2_t *)v166.f32));
            float64x2_t v157 = vaddq_f64(v157, vcvt_hight_f64_f32(v167));
            float64x2_t v156 = vaddq_f64(v156, vcvtq_f64_f32(*(float32x2_t *)v167.f32));
            int8x16_t v64 = (int8x16_t)v162;
            int8x16_t v151 = (int8x16_t)v161;
            v154 -= 8;
          }
          while (v154);
          double v103 = vaddvq_f64(vaddq_f64(vaddq_f64(v156, v153), vaddq_f64(v157, v155)));
          if (v102 != v107)
          {
            float32x2_t v101 = (float32x2_t)vextq_s8((int8x16_t)v159, (int8x16_t)v159, 8uLL).u64[0];
            goto LABEL_127;
          }
        }
        else
        {
          unsigned int v107 = 0;
LABEL_127:
          unsigned int v108 = v107 + 1;
          do
          {
            float32x2_t v109 = v192[v108];
            float32x2_t v110 = vsub_f32(v101, v109);
            double v103 = v103 + sqrtf(vaddv_f32(vmul_f32(v110, v110)));
            BOOL v31 = v100 > v108++;
            float32x2_t v101 = v109;
          }
          while (v31);
        }
      }
      if (v87 != v184)
      {
        unint64_t v195 = 0;
        unsigned int v111 = 0;
        double v112 = 0.0;
        while (1)
        {
          int v187 = (float *)(v184 + 32 * v195);
          float v114 = *v187;
          BOOL v115 = *v187 >= 0.0 && v114 <= 1.0;
          if (!v115 || ((float v116 = v187[1], v116 >= 0.0) ? (v117 = v116 <= 1.0) : (v117 = 0), !v117))
          {
            if (qword_1EB2A09B0 != -1) {
              dispatch_once(&qword_1EB2A09B0, &__block_literal_global_218);
            }
            loga = _MergedGlobals_355;
            BOOL v118 = os_log_type_enabled((os_log_t)_MergedGlobals_355, OS_LOG_TYPE_ERROR);
            float v114 = *v187;
            if (v118)
            {
              double v119 = *(float *)(v184 + 32 * v195 + 4);
              int v120 = *((unsigned __int16 *)a2 + 4);
              unint64_t v121 = *a2;
              uint64_t v122 = (*a2 >> 14) & 0x3FFFFFF;
              *(_DWORD *)buf = 134219008;
              *(double *)&buf[4] = v114;
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = v119;
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)int v239 = v122;
              *(_WORD *)&v239[4] = 1024;
              *(_DWORD *)unint64_t v240 = ((v121 >> 40) | (v120 << 24)) & 0x3FFFFFF;
              *(_WORD *)&v240[4] = 1024;
              *(_DWORD *)&v240[6] = (v121 >> 8) & 0x3F;
              _os_log_impl(&dword_188D96000, loga, OS_LOG_TYPE_ERROR, "SectionBegin/SectionEnd outside of range: SectionBegin = %f, SectionEnd = %f, in Traffic Skeleton (%d, %d, %d).", buf, 0x28u);
              float v114 = *v187;
            }
          }
          double v123 = -(v112 - v103 * v114);
          float32x2_t v124 = v192[v111 + 1];
          float32x2_t v125 = vsub_f32(v192[v111], v124);
          double v126 = sqrtf(vaddv_f32(vmul_f32(v125, v125)));
          if (v123 > v126)
          {
            unsigned int v127 = v111;
            do
            {
              double v123 = v123 - v126;
              double v112 = v112 + v126;
              unsigned int v111 = v127 + 1;
              float32x2_t v128 = v192[v127 + 2];
              float32x2_t v129 = vsub_f32(v124, v128);
              double v126 = sqrtf(vaddv_f32(vmul_f32(v129, v129)));
              ++v127;
              float32x2_t v124 = v128;
            }
            while (v123 > v126);
          }
          double v130 = (double)v111;
          double v131 = v123 / v126 + (double)v111;
          if (v131 >= 0.0) {
            goto LABEL_154;
          }
          if (qword_1EB2A09B0 != -1) {
            break;
          }
          logb = _MergedGlobals_355;
          if (os_log_type_enabled((os_log_t)_MergedGlobals_355, OS_LOG_TYPE_ERROR)) {
            goto LABEL_153;
          }
LABEL_154:
          float v138 = v131;
          *int v187 = v138;
          uint64_t v139 = v184 + 32 * v195;
          float v141 = *(float *)(v139 + 4);
          float32x4_t v140 = (float *)(v139 + 4);
          double v142 = -(v112 - v103 * v141);
          float32x2_t v143 = v192[v111 + 1];
          float32x2_t v144 = vsub_f32(v192[v111], v143);
          double v145 = sqrtf(vaddv_f32(vmul_f32(v144, v144)));
          if (v142 > v145)
          {
            do
            {
              double v142 = v142 - v145;
              double v112 = v112 + v145;
              unsigned int v146 = v111 + 2;
              ++v111;
              float32x2_t v147 = vsub_f32(v143, v192[v146]);
              double v145 = sqrtf(vaddv_f32(vmul_f32(v147, v147)));
              float32x2_t v143 = v192[v146];
            }
            while (v142 > v145);
            double v130 = (double)v111;
          }
          float v113 = v130 - v138 + v142 / v145;
          *float32x4_t v140 = v113;
          ++v195;
          uint64_t v184 = v199;
          unint64_t v186 = (v200 - v199) >> 5;
          if (v195 >= v186) {
            goto LABEL_159;
          }
        }
        dispatch_once(&qword_1EB2A09B0, &__block_literal_global_218);
        logb = _MergedGlobals_355;
        if (!os_log_type_enabled((os_log_t)_MergedGlobals_355, OS_LOG_TYPE_ERROR)) {
          goto LABEL_154;
        }
LABEL_153:
        int v132 = *((unsigned __int16 *)a2 + 4);
        unint64_t v133 = *a2;
        uint64_t v134 = (*a2 >> 14) & 0x3FFFFFF;
        float v135 = *v187;
        float v136 = *(float *)(v184 + 32 * v195 + 4);
        unint64_t v137 = *a2 >> 40;
        *(_DWORD *)buf = 134219264;
        *(double *)&buf[4] = v131;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v134;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = (v137 | (v132 << 24)) & 0x3FFFFFF;
        *(_WORD *)int v239 = 1024;
        *(_DWORD *)&v239[2] = (v133 >> 8) & 0x3F;
        *(_WORD *)unint64_t v240 = 2048;
        *(double *)&v240[2] = v135;
        __int16 v241 = 2048;
        double v242 = v136;
        _os_log_impl(&dword_188D96000, logb, OS_LOG_TYPE_ERROR, "Vertex Offset is negative (%f) in Traffic Skeleton (%d, %d, %d). Original sectionBegin = %f, sectionEng = %f)", buf, 0x32u);
        goto LABEL_154;
      }
LABEL_159:
      if (v186)
      {
        uint64_t v148 = 0;
        do
        {
          unint64_t v149 = (float32x2_t *)(v199 + v148);
          if (!*(unsigned char *)(v199 + v148 + 25))
          {
            *(void *)&buf[8] = -*(void *)&v149[1];
            float v150 = v149->f32[1];
            *(float *)buf = v150 + v149->f32[0];
            *(float *)&buf[4] = -v150;
            *(_WORD *)int v239 = v149[3].i8[0] == 0;
            *(int32x2_t *)&uint8_t buf[16] = vrev64_s32((int32x2_t)vsub_f32(_D9, v149[2]));
            v239[3] = 0;
            std::vector<GeoCodecsTrafficSkeletonRecord,geo::StdAllocator<GeoCodecsTrafficSkeletonRecord,geo::codec::Allocator>>::emplace_back<GeoCodecsTrafficSkeletonRecord&>((uint64_t)&v199, buf);
          }
          v148 += 32;
          --v186;
        }
        while (v186);
      }
      std::vector<GeoCodecsTrafficSkeleton,geo::StdAllocator<GeoCodecsTrafficSkeleton,geo::codec::Allocator>>::emplace_back<GeoCodecsTrafficSkeleton&>(v173, &v198);
      GeoCodecsTrafficSkeleton::~GeoCodecsTrafficSkeleton((GeoCodecsTrafficSkeleton *)&v198);
      int v196 = 0;
      char v14 = 1;
      if (++v176 >= (unint64_t)v232) {
        goto LABEL_188;
      }
      goto LABEL_75;
    }
  }
  while (1)
  {
    std::vector<GeoCodecsTrafficSkeletonRecord,geo::StdAllocator<GeoCodecsTrafficSkeletonRecord,geo::codec::Allocator>>::emplace_back<>((uint64_t)&v199);
    uint64_t v68 = v200;
    float v69 = (double)*(uint64_t *)(v209 - 8) * v43;
    *(float *)(v200 - 32) = v69;
    *(_DWORD *)buf = 0;
    if ((BitstreamUnpackUnary((uint64_t *)(v10 + 8), buf) & 1) == 0)
    {
      uint64_t v171 = (FILE *)*MEMORY[0x1E4F143C8];
      int v172 = 10640;
      goto LABEL_187;
    }
    int v197 = *(_DWORD *)buf + ((unint64_t)(v209 - v208) >> 3) - 1;
    std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::emplace_back<unsigned int>((uint64_t)&v204, &v197);
    LOBYTE(v70) = v183;
    if (!v185)
    {
      unint64_t v71 = *(void *)(v10 + 24);
      if (v71 + 1 > 8 * *(void *)(v10 + 16))
      {
        uint64_t v171 = (FILE *)*MEMORY[0x1E4F143C8];
        int v172 = 10645;
        goto LABEL_187;
      }
      unsigned int v72 = *(unsigned __int8 *)(*(void *)(v10 + 8) + (v71 >> 3));
      *(void *)(v10 + 24) = v71 + 1;
      int v70 = (v72 >> (~(_BYTE)v71 & 7)) & 1;
    }
    uint64_t v73 = *(void *)(v217 - 8);
    v217 -= 8;
    *(void *)(v68 - 24) = v73;
    LOBYTE(v74) = v179;
    if (!log) {
      break;
    }
LABEL_103:
    *(unsigned char *)(v68 - 8) = v70;
    *(_DWORD *)(v68 - 16) = 0;
    unint64_t v77 = *(void *)(v10 + 24);
    unint64_t v78 = v77 + 1;
    unint64_t v67 = 8 * *(void *)(v10 + 16);
    if (v77 + 1 > v67)
    {
      int v172 = 10659;
      goto LABEL_186;
    }
    uint64_t v79 = *(void *)(v10 + 8);
    unsigned int v80 = *(unsigned __int8 *)(v79 + (v77 >> 3));
    *(void *)(v10 + 24) = v78;
    if ((v80 >> (~(_BYTE)v77 & 7)))
    {
      uint64_t v81 = *(void *)(v213 - 8);
      v213 -= 8;
      float v82 = (double)v81 * v47;
      *(float *)(v68 - 16) = v82;
    }
    *(_DWORD *)(v68 - 12) = 1065353216;
    unint64_t v83 = v77 + 2;
    if (v77 + 2 > v67)
    {
      int v172 = 10665;
      goto LABEL_186;
    }
    unsigned int v84 = *(unsigned __int8 *)(v79 + (v78 >> 3));
    *(void *)(v10 + 24) = v83;
    if ((v84 >> (~(_BYTE)v78 & 7)))
    {
      uint64_t v85 = *(void *)(v213 - 8);
      v213 -= 8;
      float v86 = (double)v85 * v47;
      *(float *)(v68 - 12) = v86;
    }
    *(unsigned char *)(v68 - 7) = v74;
    *(unsigned char *)(v68 - 5) = 0;
    unint64_t v66 = v77 + 3;
    if (v77 + 3 > v67)
    {
      int v172 = 10671;
      goto LABEL_186;
    }
    if (((*(unsigned __int8 *)(v79 + (v83 >> 3)) >> (~(_BYTE)v83 & 7)) & 1) == 0) {
      goto LABEL_111;
    }
  }
  unint64_t v75 = *(void *)(v10 + 24);
  if (v75 + 1 <= 8 * *(void *)(v10 + 16))
  {
    unsigned int v76 = *(unsigned __int8 *)(*(void *)(v10 + 8) + (v75 >> 3));
    *(void *)(v10 + 24) = v75 + 1;
    int v74 = (v76 >> (~(_BYTE)v75 & 7)) & 1;
    goto LABEL_103;
  }
  int v172 = 10651;
LABEL_186:
  uint64_t v171 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_187:
  fprintf(v171, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v172);
  GeoCodecsTrafficSkeleton::~GeoCodecsTrafficSkeleton((GeoCodecsTrafficSkeleton *)&v198);
  char v14 = 0;
  int v196 = 2;
LABEL_188:
  std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t)v203);
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v204);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&v208);
  int v170 = v196;
LABEL_177:
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v212);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v216);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v220);
  v12.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v224);
  if ((v170 | 2) == 2) {
    goto LABEL_25;
  }
LABEL_29:
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = std::chrono::steady_clock::now().__d_.__rep_;
  unsigned int v198 = "ChapterTrafficSkeleton1";
  *(void *)buf = &v198;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v6 + 1912, (uint64_t *)&v198, (uint64_t)&std::piecewise_construct, (uint64_t **)buf)+ 4) = (double)((v23 - rep) / 1000) * 0.001;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v14 & 1;
}

void sub_188FB5E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  GeoCodecsTrafficSkeleton::~GeoCodecsTrafficSkeleton((GeoCodecsTrafficSkeleton *)&a32);
  std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t)&a37);
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100](&a41);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a45);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a49);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a53);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a57);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a61);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v61 - 256));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readSupplementalFeatureIDs(void *a1, uint64_t *a2)
{
  unint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    while (*(_WORD *)(*a1 + 16 * v4) != 162)
    {
      uint64_t v4 = ++v5;
      if (v2 <= v5) {
        goto LABEL_14;
      }
    }
    uint64_t v6 = (void *)geo::codec::chapterAt((uint64_t)a1, v5, 162, *a2 + 1912);
    if (v6)
    {
      unint64_t v7 = v6;
      uint64_t v95 = 0;
      *(void *)unint64_t v96 = 0;
      unsigned int v94 = 0;
      if (geo::codec::chapterReadVarUint32(v6, &v96[1]))
      {
        if (geo::codec::chapterReadVarUint32(v7, v96))
        {
          if (geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v95 + 1))
          {
            if (geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v95))
            {
              if (geo::codec::chapterReadVarUint32(v7, &v94))
              {
                unsigned int v9 = v94;
                int v8 = v95;
                memset(v93, 0, 32);
                memset(v92, 0, sizeof(v92));
                memset(v91, 0, sizeof(v91));
                size_t v10 = HIDWORD(v95);
                int v88 = 0;
                uint64_t v89 = 0;
                __p = 0;
                if (HIDWORD(v95))
                {
                  uint64_t v11 = (char *)operator new(HIDWORD(v95));
                  std::chrono::steady_clock::time_point v12 = &v11[v10];
                  __p = v11;
                  uint64_t v89 = &v11[v10];
                  bzero(v11, v10);
                  int v88 = &v11[v10];
                }
                else
                {
                  uint64_t v11 = 0;
                  std::chrono::steady_clock::time_point v12 = 0;
                }
                uint64_t v90 = 0;
                if (v12 - v11 == v10)
                {
                  if (geo::codec::decodeIntCompressorArray<unsigned char>(v7, v93, v96[1], v96[0], (uint64_t)&__p))
                  {
                    uint64_t v19 = HIDWORD(v95);
                    unsigned int v84 = 0;
                    uint64_t v85 = 0;
                    unint64_t v83 = 0;
                    if (HIDWORD(v95))
                    {
                      int v20 = (char *)operator new(4 * HIDWORD(v95));
                      uint64_t v21 = &v20[4 * v19];
                      unint64_t v83 = v20;
                      uint64_t v85 = v21;
                      bzero(v20, 4 * v19);
                      unsigned int v84 = v21;
                    }
                    else
                    {
                      int v20 = 0;
                      uint64_t v21 = 0;
                    }
                    uint64_t v86 = 0;
                    if (v19 == (v21 - v20) >> 2)
                    {
                      if (geo::codec::decodeIntCompressorArray<unsigned int>(v7, v92, v96[1], v96[0], (uint64_t)&v83))
                      {
                        uint64_t v25 = HIDWORD(v95);
                        unsigned int v80 = 0;
                        uint64_t v81 = 0;
                        uint64_t v79 = 0;
                        if (HIDWORD(v95))
                        {
                          uint64_t v26 = (char *)operator new(4 * HIDWORD(v95));
                          uint64_t v27 = &v26[4 * v25];
                          uint64_t v79 = v26;
                          uint64_t v81 = v27;
                          bzero(v26, 4 * v25);
                          unsigned int v80 = v27;
                        }
                        else
                        {
                          uint64_t v26 = 0;
                          uint64_t v27 = 0;
                        }
                        uint64_t v82 = 0;
                        if (v25 == (v27 - v26) >> 2)
                        {
                          if (geo::codec::decodeIntCompressorArray<unsigned int>(v7, v92, v96[1], v96[0], (uint64_t)&v79))
                          {
                            unint64_t v75 = 0;
                            unsigned int v76 = 0;
                            unint64_t v77 = 0;
                            unint64_t v30 = v9 + v8;
                            if (v30)
                            {
                              BOOL v31 = (char *)operator new(4 * v30);
                              unint64_t v32 = &v31[4 * v30];
                              unint64_t v75 = v31;
                              unint64_t v77 = v32;
                              bzero(v31, 4 * v30);
                              unsigned int v76 = v32;
                            }
                            else
                            {
                              BOOL v31 = 0;
                              unint64_t v32 = 0;
                            }
                            unint64_t v78 = 0;
                            if (v30 == (v32 - v31) >> 2)
                            {
                              if (geo::codec::decodeIntCompressorArray<unsigned int>(v7, v92, v96[1], v96[0], (uint64_t)&v75))
                              {
                                uint64_t v35 = v95;
                                unsigned int v72 = 0;
                                uint64_t v73 = 0;
                                unint64_t v71 = 0;
                                if (v95)
                                {
                                  unint64_t v36 = (char *)operator new(8 * v95);
                                  uint64_t v37 = &v36[8 * v35];
                                  unint64_t v71 = v36;
                                  uint64_t v73 = v37;
                                  bzero(v36, 8 * v35);
                                  unsigned int v72 = v37;
                                }
                                else
                                {
                                  unint64_t v36 = 0;
                                  uint64_t v37 = 0;
                                }
                                unint64_t v74 = 0;
                                if (v35 == (v37 - v36) >> 3)
                                {
                                  if (geo::codec::decodeIntCompressorArray<unsigned long long>(v7, v91, v96[1], v96[0], (uint64_t)&v71))
                                  {
                                    uint64_t v40 = v94;
                                    uint64_t v68 = 0;
                                    float v69 = 0;
                                    unint64_t v67 = 0;
                                    if (v94)
                                    {
                                      uint64_t v41 = (char *)operator new(8 * v94);
                                      int v42 = &v41[8 * v40];
                                      unint64_t v67 = v41;
                                      float v69 = v42;
                                      bzero(v41, 8 * v40);
                                      uint64_t v68 = v42;
                                    }
                                    else
                                    {
                                      uint64_t v41 = 0;
                                      int v42 = 0;
                                    }
                                    unint64_t v70 = 0;
                                    if (v40 != (v42 - v41) >> 3)
                                    {
                                      unsigned int v62 = (FILE *)*MEMORY[0x1E4F143C8];
                                      int v63 = 12244;
                                      goto LABEL_110;
                                    }
                                    if ((geo::codec::decodeIntCompressorArray<unsigned long long>(v7, v91, v96[1], v96[0], (uint64_t)&v67) & 1) == 0)
                                    {
                                      unsigned int v62 = (FILE *)*MEMORY[0x1E4F143C8];
                                      int v63 = 12245;
                                      goto LABEL_110;
                                    }
                                    uint64_t v45 = *a2;
                                    uint64_t v46 = *a2 + 3528;
                                    std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::reserve(v46, v30);
                                    if (HIDWORD(v95))
                                    {
                                      uint64_t v47 = 0;
                                      while (1)
                                      {
                                        uint64_t v48 = v90++;
                                        int v49 = *((unsigned __int8 *)__p + v48);
                                        uint64_t v50 = v86++;
                                        unint64_t v51 = *((unsigned int *)v83 + v50);
                                        uint64_t v52 = *(void *)(v45 + 3536);
                                        uint64_t v53 = v82++;
                                        uint64_t v64 = *(void *)(v45 + 3528);
                                        uint64_t v65 = v52;
                                        int v54 = *((_DWORD *)v79 + v53);
                                        if (v54)
                                        {
                                          for (uint64_t i = *((unsigned int *)v79 + v53); i; --i)
                                          {
                                            unint64_t v56 = v78;
                                            if (v78 >= (v76 - (unsigned char *)v75) >> 2)
                                            {
                                              int v63 = 12259;
                                              goto LABEL_109;
                                            }
                                            ++v78;
                                            if (*((_DWORD *)v75 + v56))
                                            {
                                              unint64_t v57 = v70;
                                              unsigned int v58 = v67;
                                              if (v70 >= (v68 - (unsigned char *)v67) >> 3)
                                              {
                                                int v63 = 12261;
                                                goto LABEL_109;
                                              }
                                              ++v70;
                                            }
                                            else
                                            {
                                              unint64_t v57 = v74;
                                              unsigned int v58 = v71;
                                              if (v74 >= (v72 - (unsigned char *)v71) >> 3)
                                              {
                                                int v63 = 12263;
                                                goto LABEL_109;
                                              }
                                              ++v74;
                                            }
                                            uint64_t v66 = v58[v57];
                                            std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::push_back[abi:ne180100](v46, &v66);
                                          }
                                        }
                                        if (!v49) {
                                          break;
                                        }
                                        if (v49 == 1)
                                        {
                                          uint64_t v59 = *(void *)(*a2 + 32);
                                          if (0xCF3CF3CF3CF3CF3DLL * ((*(void *)(*a2 + 40) - v59) >> 3) <= v51)
                                          {
                                            int v63 = 12271;
                                            goto LABEL_109;
                                          }
                                          unsigned int v60 = 168;
LABEL_98:
                                          uint64_t v61 = v59 + v51 * (unint64_t)v60;
                                          if (v61)
                                          {
                                            *(_DWORD *)(v61 + 64) = (unint64_t)(v65 - v64) >> 3;
                                            *(unsigned char *)(v61 + 74) = v54;
                                          }
                                        }
                                        if (++v47 >= (unint64_t)HIDWORD(v95)) {
                                          goto LABEL_101;
                                        }
                                      }
                                      uint64_t v59 = *(void *)(*a2 + 504);
                                      if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(*a2 + 512) - v59) >> 5) <= v51)
                                      {
                                        int v63 = 12276;
LABEL_109:
                                        unsigned int v62 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_110:
                                        fprintf(v62, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v63);
                                        int v24 = 6;
                                        goto LABEL_111;
                                      }
                                      unsigned int v60 = 224;
                                      goto LABEL_98;
                                    }
LABEL_101:
                                    if (v30 != (uint64_t)(*(void *)(v45 + 3536) - *(void *)(v45 + 3528)) >> 3)
                                    {
                                      unsigned int v62 = (FILE *)*MEMORY[0x1E4F143C8];
                                      int v63 = 12290;
                                      goto LABEL_110;
                                    }
                                    int v24 = 0;
LABEL_111:
                                    if (v67)
                                    {
                                      uint64_t v68 = v67;
                                      operator delete(v67);
                                    }
                                    goto LABEL_76;
                                  }
                                  double v43 = (FILE *)*MEMORY[0x1E4F143C8];
                                  int v44 = 12241;
                                }
                                else
                                {
                                  double v43 = (FILE *)*MEMORY[0x1E4F143C8];
                                  int v44 = 12240;
                                }
                                fprintf(v43, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v44);
                                int v24 = 6;
LABEL_76:
                                if (v71)
                                {
                                  unsigned int v72 = v71;
                                  operator delete(v71);
                                }
                                goto LABEL_66;
                              }
                              unint64_t v38 = (FILE *)*MEMORY[0x1E4F143C8];
                              int v39 = 12237;
                            }
                            else
                            {
                              unint64_t v38 = (FILE *)*MEMORY[0x1E4F143C8];
                              int v39 = 12236;
                            }
                            fprintf(v38, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v39);
                            int v24 = 6;
LABEL_66:
                            if (v75)
                            {
                              unsigned int v76 = v75;
                              operator delete(v75);
                            }
                            goto LABEL_56;
                          }
                          uint64_t v33 = (FILE *)*MEMORY[0x1E4F143C8];
                          int v34 = 12233;
                        }
                        else
                        {
                          uint64_t v33 = (FILE *)*MEMORY[0x1E4F143C8];
                          int v34 = 12232;
                        }
                        fprintf(v33, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v34);
                        int v24 = 6;
LABEL_56:
                        if (v79)
                        {
                          unsigned int v80 = v79;
                          operator delete(v79);
                        }
                        goto LABEL_46;
                      }
                      unint64_t v28 = (FILE *)*MEMORY[0x1E4F143C8];
                      int v29 = 12229;
                    }
                    else
                    {
                      unint64_t v28 = (FILE *)*MEMORY[0x1E4F143C8];
                      int v29 = 12228;
                    }
                    fprintf(v28, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v29);
                    int v24 = 6;
LABEL_46:
                    if (v83)
                    {
                      unsigned int v84 = v83;
                      operator delete(v83);
                    }
LABEL_33:
                    if (__p)
                    {
                      int v88 = (char *)__p;
                      operator delete(__p);
                    }
                    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v91);
                    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v92);
                    uint64_t v16 = mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)v93);
                    if (v24 != 6)
                    {
                      char v13 = 1;
                      if (!*(unsigned char *)v7) {
                        goto LABEL_24;
                      }
                      goto LABEL_23;
                    }
LABEL_22:
                    char v13 = 0;
                    if (!*(unsigned char *)v7)
                    {
LABEL_24:
                      uint64_t v18 = geo::codec::Allocator::instance((geo::codec::Allocator *)v16);
                      (*(void (**)(uint64_t, void *, void))(*(void *)v18 + 40))(v18, v7, 0);
                      return v13 & 1;
                    }
LABEL_23:
                    uint64_t v17 = geo::codec::Allocator::instance((geo::codec::Allocator *)v16);
                    uint64_t v16 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v17 + 40))(v17, v7[5], 0);
                    goto LABEL_24;
                  }
                  uint64_t v22 = (FILE *)*MEMORY[0x1E4F143C8];
                  int v23 = 12225;
                }
                else
                {
                  uint64_t v22 = (FILE *)*MEMORY[0x1E4F143C8];
                  int v23 = 12224;
                }
                fprintf(v22, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v23);
                int v24 = 6;
                goto LABEL_33;
              }
              int v15 = 12216;
            }
            else
            {
              int v15 = 12215;
            }
          }
          else
          {
            int v15 = 12214;
          }
        }
        else
        {
          int v15 = 12213;
        }
      }
      else
      {
        int v15 = 12212;
      }
      uint64_t v16 = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v15);
      goto LABEL_22;
    }
  }
LABEL_14:
  char v13 = 1;
  return v13 & 1;
}

void sub_188FB6754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  if (a15)
  {
    operator delete(a15);
    int v39 = __p;
    if (!__p)
    {
LABEL_6:
      uint64_t v37 = a23;
      if (!a23)
      {
LABEL_7:
        uint64_t v40 = a27;
        if (!a27) {
          goto LABEL_8;
        }
        goto LABEL_14;
      }
LABEL_13:
      operator delete(v37);
      uint64_t v40 = a27;
      if (!a27)
      {
LABEL_8:
        uint64_t v41 = a31;
        if (!a31) {
          goto LABEL_9;
        }
        goto LABEL_15;
      }
LABEL_14:
      operator delete(v40);
      uint64_t v41 = a31;
      if (!a31)
      {
LABEL_9:
        int v42 = a35;
        if (!a35)
        {
LABEL_17:
          mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v36 - 224);
          mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v36 - 192);
          mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor(v36 - 160);
          _Unwind_Resume(a1);
        }
LABEL_16:
        operator delete(v42);
        goto LABEL_17;
      }
LABEL_15:
      operator delete(v41);
      int v42 = a35;
      if (!a35) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  else
  {
    int v39 = __p;
    if (!__p) {
      goto LABEL_6;
    }
  }
  operator delete(v39);
  uint64_t v37 = a23;
  if (!a23) {
    goto LABEL_7;
  }
  goto LABEL_13;
}

BOOL geo::codec::_readStyleAttributeRasters(geo::codec::Allocator *a1, uint64_t *a2, char a3)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v52 = a1;
  char v51 = a3;
  unsigned __int8 v50 = 1;
  unint64_t v5 = *((void *)a1 + 1);
  if (!v5)
  {
    uint64_t v9 = 0;
    unint64_t v57 = a1;
    char v56 = a3;
    goto LABEL_40;
  }
  uint64_t v6 = *(void *)a1;
  if (v5 == 1)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
LABEL_12:
    unint64_t v17 = v5 - v7;
    uint64_t v18 = (unsigned __int16 *)(v6 + 16 * v7);
    do
    {
      int v19 = *v18;
      v18 += 8;
      if (v19 == 154) {
        ++v8;
      }
      --v17;
    }
    while (v17);
    goto LABEL_16;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFELL;
  std::chrono::steady_clock::time_point v12 = (unsigned __int16 *)(v6 + 16);
  unint64_t v13 = v5 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    int v14 = *(v12 - 8);
    int v16 = *v12;
    v12 += 16;
    int v15 = v16;
    if (v14 == 154) {
      ++v10;
    }
    if (v15 == 154) {
      ++v11;
    }
    v13 -= 2;
  }
  while (v13);
  uint64_t v8 = v11 + v10;
  if (v5 != v7) {
    goto LABEL_12;
  }
LABEL_16:
  uint64_t v49 = v8;
  if (v8)
  {
    *(_WORD *)(*a2 + 2840) = 0;
    uint64_t v20 = geo::codec::Allocator::instance(a1);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20 + 24))(v20, v8, 24);
    uint64_t v22 = *a2;
    *(void *)(*a2 + 2832) = v21;
    uint64_t v58 = v21;
    int v23 = operator new(0x38uLL);
    int v24 = (void (**)(void *))&unk_1ED517E40;
    *int v23 = &unk_1ED517E40;
    v23[1] = a2;
    v23[2] = &v58;
    v23[3] = &v49;
    v23[4] = &v51;
    v23[5] = &v52;
    v23[6] = &v50;
    unsigned int v60 = v23;
    unint64_t v25 = *((void *)a1 + 1);
    if (v25)
    {
      uint64_t v26 = 0;
      for (i = 0; i < v25; uint64_t v26 = ++i)
      {
        if (*(_WORD *)(*(void *)a1 + 16 * v26) == 154)
        {
          v61[0] = geo::codec::chapterAt((uint64_t)a1, i, 154, v22 + 1912);
          if (!v60) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(void *, void *))(*v60 + 48))(v60, v61);
          unint64_t v25 = *((void *)a1 + 1);
        }
      }
      int v23 = v60;
      if (v60 == v59)
      {
        (*(void (**)(void *))(v59[0] + 32))(v59);
        goto LABEL_53;
      }
      if (!v60)
      {
LABEL_53:
        int v47 = v50;
        return v47 != 0;
      }
      int v24 = (void (**)(void *))*v60;
    }
    v24[5](v23);
    goto LABEL_53;
  }
  unint64_t v57 = a1;
  char v56 = a3;
  if (v5 < 2)
  {
    unint64_t v28 = 0;
    uint64_t v9 = 0;
LABEL_36:
    unint64_t v36 = v5 - v28;
    uint64_t v37 = (unsigned __int16 *)(v6 + 16 * v28);
    do
    {
      int v38 = *v37;
      v37 += 8;
      if (v38 == 102) {
        ++v9;
      }
      --v36;
    }
    while (v36);
    goto LABEL_40;
  }
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v28 = v5 & 0xFFFFFFFFFFFFFFFELL;
  BOOL v31 = (unsigned __int16 *)(v6 + 16);
  unint64_t v32 = v5 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    int v33 = *(v31 - 8);
    int v35 = *v31;
    v31 += 16;
    int v34 = v35;
    if (v33 == 102) {
      ++v29;
    }
    if (v34 == 102) {
      ++v30;
    }
    v32 -= 2;
  }
  while (v32);
  uint64_t v9 = v30 + v29;
  if (v5 != v28) {
    goto LABEL_36;
  }
LABEL_40:
  uint64_t v55 = v9;
  *(_WORD *)(*a2 + 2840) = 0;
  uint64_t v39 = geo::codec::Allocator::instance(a1);
  uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v39 + 24))(v39, v9, 24);
  uint64_t v41 = *a2;
  *(void *)(*a2 + 2832) = v40;
  unsigned __int8 v54 = 1;
  uint64_t v53 = v40;
  int v42 = operator new(0x38uLL);
  double v43 = (void (**)(void *))&unk_1ED517E98;
  *int v42 = &unk_1ED517E98;
  v42[1] = a2;
  v42[2] = &v53;
  v42[3] = &v55;
  v42[4] = &v56;
  v42[5] = &v57;
  v42[6] = &v54;
  unsigned int v62 = v42;
  unint64_t v44 = *((void *)a1 + 1);
  if (v44)
  {
    uint64_t v45 = 0;
    for (j = 0; j < v44; uint64_t v45 = ++j)
    {
      if (*(_WORD *)(*(void *)a1 + 16 * v45) == 102)
      {
        uint64_t v58 = geo::codec::chapterAt((uint64_t)a1, j, 102, v41 + 1912);
        if (!v62) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(void *, uint64_t *))(*v62 + 48))(v62, &v58);
        unint64_t v44 = *((void *)a1 + 1);
      }
    }
    int v42 = v62;
    if (v62 == v61)
    {
      (*(void (**)(void *))(v61[0] + 32))(v61);
    }
    else if (v62)
    {
      double v43 = (void (**)(void *))*v62;
      goto LABEL_49;
    }
    int v47 = v54;
    return v47 != 0;
  }
LABEL_49:
  v43[5](v42);
  int v47 = v54;
  return v47 != 0;
}

void sub_188FB6D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::function<void ()(VMP4Chapter *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_188FB6D88(_Unwind_Exception *a1)
{
  std::function<void ()(VMP4Chapter *)>::~function((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readLiveFeaturesMetadatas(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    goto LABEL_15;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 165)
  {
    uint64_t v4 = ++v5;
    if (v2 <= v5) {
      goto LABEL_15;
    }
  }
  uint64_t v6 = geo::codec::chapterAt((uint64_t)a1, v5, 165, *a2 + 1912);
  if (!v6)
  {
LABEL_15:
    char v14 = 1;
    return v14 & 1;
  }
  unint64_t v7 = (void *)v6;
  uint64_t v9 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  v161[1] = "ChapterLiveFeaturesMetadatas";
  v161[2] = v9;
  v161[3] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v161[4] = v10.__d_.__rep_;
  v161[0] = 0;
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)v161 + 1) & 1) == 0)
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 11756;
LABEL_21:
    uint64_t v18 = (uint8x8_t *)fprintf(v16, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v17);
    goto LABEL_22;
  }
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)v161) & 1) == 0)
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 11757;
    goto LABEL_21;
  }
  uint64_t v160 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v160 + 1) & 1) == 0)
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 11761;
    goto LABEL_21;
  }
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v160) & 1) == 0)
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 11762;
    goto LABEL_21;
  }
  size_t v11 = HIDWORD(v160);
  if (HIDWORD(v160))
  {
    std::chrono::steady_clock::time_point v12 = (uint8x8_t *)operator new(HIDWORD(v160));
    unint64_t v13 = (char *)v12 + v11;
    __p = v12;
    bzero(v12, v11);
  }
  else
  {
    unint64_t v13 = 0;
    __p = 0;
  }
  long long v158 = 0u;
  long long v159 = 0u;
  char v32 = v161[0];
  char v31 = BYTE4(v161[0]);
  LODWORD(v145) = 0;
  if (!geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v145)
    || (uint64_t v33 = v145, v34 = v7[6], v35 = v34 + v145, v35 > v7[7])
    || (unint64_t v36 = (unsigned __int8 *)(v7[5] + v34),
        v7[6] = v35,
        mgcl::ints::IntDecompressor<unsigned char>::decompress((uint64_t *)&v158, v36, v33, v31, v32, v13 - (char *)__p, __p)))
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11767);
    int v37 = 6;
    goto LABEL_46;
  }
  uint64_t v44 = HIDWORD(v160);
  float64x2_t v155 = 0;
  float64x2_t v156 = 0;
  unsigned int v154 = 0;
  if (HIDWORD(v160))
  {
    size_t v45 = 2 * HIDWORD(v160);
    unsigned int v154 = (char *)operator new(v45);
    uint64_t v46 = &v154[2 * v44];
    float64x2_t v156 = v46;
    bzero(v154, v45);
    float64x2_t v155 = v46;
  }
  uint64_t v157 = 0;
  memset(v153, 0, sizeof(v153));
  if (geo::codec::decodeIntCompressorArray<unsigned short>(v7, v153, SBYTE4(v161[0]), v161[0], (uint64_t)&v154))
  {
    unint64_t v47 = HIDWORD(v160);
    float v150 = 0;
    unint64_t v151 = 0;
    unint64_t v149 = 0;
    if (HIDWORD(v160))
    {
      size_t v48 = 2 * HIDWORD(v160);
      unint64_t v149 = (char *)operator new(v48);
      unint64_t v47 = (unint64_t)&v149[2 * v47];
      unint64_t v151 = v47;
      bzero(v149, v48);
      float v150 = (char *)v47;
    }
    uint64_t v152 = 0;
    if (geo::codec::decodeIntCompressorArray<unsigned short>(v7, v153, SBYTE4(v161[0]), v161[0], (uint64_t)&v149))
    {
      unsigned int v148 = 0;
      if (geo::codec::chapterReadVarUint32(v7, &v148))
      {
        long long v145 = 0u;
        long long v146 = 0u;
        float v147 = 1.0;
        if (v148)
        {
          int v49 = 0;
          while (1)
          {
            int v125 = v49;
            uint64_t v52 = v7[6];
            if ((unint64_t)(v52 + 4) > v7[7])
            {
              uint64_t v85 = (FILE *)*MEMORY[0x1E4F143C8];
              int v86 = 11784;
              goto LABEL_173;
            }
            int v53 = *(_DWORD *)(v7[5] + v52);
            v7[6] = v52 + 4;
            LODWORD(v141) = 0;
            if (!geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v141))
            {
              uint64_t v85 = (FILE *)*MEMORY[0x1E4F143C8];
              int v86 = 11787;
              goto LABEL_173;
            }
            if (v141) {
              break;
            }
LABEL_74:
            int v49 = v125 + 1;
            if (v125 + 1 >= v148) {
              goto LABEL_174;
            }
          }
          int v126 = 0;
          while (1)
          {
            LODWORD(v137) = 0;
            if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v137) & 1) == 0) {
              break;
            }
            unint64_t v127 = v137;
            unint64_t v54 = *((void *)&v145 + 1);
            if (*((void *)&v145 + 1))
            {
              uint8x8_t v55 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v145 + 8));
              v55.i16[0] = vaddlv_u8(v55);
              if (v55.u32[0] > 1uLL)
              {
                unint64_t v47 = v137;
                if (*((void *)&v145 + 1) <= (unint64_t)v137) {
                  unint64_t v47 = (unint64_t)v137 % *((void *)&v145 + 1);
                }
              }
              else
              {
                unint64_t v47 = (DWORD2(v145) - 1) & v137;
              }
              char v56 = *(void ***)(v145 + 8 * v47);
              if (v56)
              {
                unint64_t v57 = *v56;
                if (*v56)
                {
                  if (v55.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v59 = v57[1];
                      if (v59 == v137)
                      {
                        if (*((_DWORD *)v57 + 4) == v137) {
                          goto LABEL_159;
                        }
                      }
                      else if ((v59 & (*((void *)&v145 + 1) - 1)) != v47)
                      {
                        goto LABEL_100;
                      }
                      unint64_t v57 = (void *)*v57;
                      if (!v57) {
                        goto LABEL_100;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v58 = v57[1];
                    if (v58 == v137)
                    {
                      if (*((_DWORD *)v57 + 4) == v137) {
                        goto LABEL_159;
                      }
                    }
                    else
                    {
                      if (v58 >= *((void *)&v145 + 1)) {
                        v58 %= *((void *)&v145 + 1);
                      }
                      if (v58 != v47) {
                        break;
                      }
                    }
                    unint64_t v57 = (void *)*v57;
                  }
                  while (v57);
                }
              }
            }
LABEL_100:
            unint64_t v57 = operator new(0x18uLL);
            *unint64_t v57 = 0;
            v57[1] = v127;
            v57[2] = v127;
            float v60 = (float)(unint64_t)(*((void *)&v146 + 1) + 1);
            if (!v54 || (float)(v147 * (float)v54) < v60)
            {
              BOOL v61 = (v54 & (v54 - 1)) != 0;
              if (v54 < 3) {
                BOOL v61 = 1;
              }
              unint64_t v62 = v61 | (2 * v54);
              unint64_t v63 = vcvtps_u32_f32(v60 / v147);
              if (v62 <= v63) {
                size_t prime = v63;
              }
              else {
                size_t prime = v62;
              }
              if (prime == 1)
              {
                size_t prime = 2;
              }
              else if ((prime & (prime - 1)) != 0)
              {
                size_t prime = std::__next_prime(prime);
                unint64_t v54 = *((void *)&v145 + 1);
              }
              if (prime <= v54)
              {
                if (prime < v54)
                {
                  unint64_t v75 = vcvtps_u32_f32((float)*((unint64_t *)&v146 + 1) / v147);
                  if (v54 < 3
                    || (uint8x8_t v76 = (uint8x8_t)vcnt_s8((int8x8_t)v54), v76.i16[0] = vaddlv_u8(v76), v76.u32[0] > 1uLL))
                  {
                    unint64_t v75 = std::__next_prime(v75);
                  }
                  else
                  {
                    uint64_t v77 = 1 << -(char)__clz(v75 - 1);
                    if (v75 >= 2) {
                      unint64_t v75 = v77;
                    }
                  }
                  if (prime <= v75) {
                    size_t prime = v75;
                  }
                  if (prime >= v54)
                  {
                    unint64_t v54 = *((void *)&v145 + 1);
                  }
                  else
                  {
                    if (prime) {
                      goto LABEL_112;
                    }
                    unsigned int v84 = (void *)v145;
                    *(void *)&long long v145 = 0;
                    if (v84) {
                      operator delete(v84);
                    }
                    unint64_t v54 = 0;
                    *((void *)&v145 + 1) = 0;
                  }
                }
LABEL_145:
                unint64_t v47 = v127;
                if ((v54 & (v54 - 1)) != 0)
                {
                  if (v54 <= v127) {
                    unint64_t v47 = v127 % v54;
                  }
                }
                else
                {
                  unint64_t v47 = (v54 - 1) & v127;
                }
                goto LABEL_149;
              }
LABEL_112:
              if (prime >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v65 = operator new(8 * prime);
              uint64_t v66 = (void *)v145;
              *(void *)&long long v145 = v65;
              if (v66) {
                operator delete(v66);
              }
              uint64_t v67 = 0;
              *((void *)&v145 + 1) = prime;
              do
                *(void *)(v145 + 8 * v67++) = 0;
              while (prime != v67);
              uint64_t v68 = (void **)v146;
              if (!(void)v146) {
                goto LABEL_144;
              }
              size_t v69 = *(void *)(v146 + 8);
              size_t v70 = prime - 1;
              if ((prime & (prime - 1)) == 0)
              {
                size_t v71 = v69 & v70;
                *(void *)(v145 + 8 * v71) = &v146;
                for (unsigned int i = *v68; *v68; unsigned int i = *v68)
                {
                  size_t v73 = i[1] & v70;
                  if (v73 == v71)
                  {
                    uint64_t v68 = (void **)i;
                  }
                  else if (*(void *)(v145 + 8 * v73))
                  {
                    *uint64_t v68 = (void *)*i;
                    uint64_t v74 = 8 * v73;
                    *unsigned int i = **(void **)(v145 + v74);
                    **(void **)(v145 + v74) = i;
                  }
                  else
                  {
                    *(void *)(v145 + 8 * v73) = v68;
                    uint64_t v68 = (void **)i;
                    size_t v71 = v73;
                  }
                }
                goto LABEL_144;
              }
              if (v69 >= prime) {
                v69 %= prime;
              }
              *(void *)(v145 + 8 * v69) = &v146;
              unint64_t v78 = *v68;
              if (!*v68)
              {
LABEL_144:
                unint64_t v54 = prime;
                goto LABEL_145;
              }
              while (1)
              {
LABEL_139:
                size_t v80 = v78[1];
                if (v80 >= prime) {
                  v80 %= prime;
                }
                if (v80 == v69) {
                  goto LABEL_138;
                }
                if (*(void *)(v145 + 8 * v80)) {
                  break;
                }
                *(void *)(v145 + 8 * v80) = v68;
                uint64_t v68 = (void **)v78;
                unint64_t v78 = (void *)*v78;
                size_t v69 = v80;
                if (!v78) {
                  goto LABEL_144;
                }
              }
              *uint64_t v68 = (void *)*v78;
              uint64_t v79 = 8 * v80;
              *unint64_t v78 = **(void **)(v145 + v79);
              **(void **)(v145 + v79) = v78;
              unint64_t v78 = v68;
LABEL_138:
              uint64_t v68 = (void **)v78;
              unint64_t v78 = (void *)*v78;
              if (!v78) {
                goto LABEL_144;
              }
              goto LABEL_139;
            }
LABEL_149:
            uint64_t v81 = v145;
            uint64_t v82 = *(void **)(v145 + 8 * v47);
            if (v82)
            {
              *unint64_t v57 = *v82;
            }
            else
            {
              *unint64_t v57 = v146;
              *(void *)&long long v146 = v57;
              *(void *)(v81 + 8 * v47) = &v146;
              if (!*v57) {
                goto LABEL_158;
              }
              unint64_t v83 = *(void *)(*v57 + 8);
              if ((v54 & (v54 - 1)) != 0)
              {
                if (v83 >= v54) {
                  v83 %= v54;
                }
              }
              else
              {
                v83 &= v54 - 1;
              }
              uint64_t v82 = (void *)(v145 + 8 * v83);
            }
            *uint64_t v82 = v57;
LABEL_158:
            ++*((void *)&v146 + 1);
LABEL_159:
            *((_DWORD *)v57 + 5) = v53;
            if (++v126 >= v141) {
              goto LABEL_74;
            }
          }
          uint64_t v85 = (FILE *)*MEMORY[0x1E4F143C8];
          int v86 = 11791;
LABEL_173:
          fprintf(v85, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v86);
          int v37 = 6;
          goto LABEL_215;
        }
LABEL_174:
        uint64_t v87 = HIDWORD(v160);
        double v142 = 0;
        float32x2_t v143 = 0;
        float v141 = 0;
        if (HIDWORD(v160))
        {
          size_t v88 = 2 * HIDWORD(v160);
          uint64_t v89 = (char *)operator new(v88);
          uint64_t v90 = &v89[2 * v87];
          float v141 = v89;
          float32x2_t v143 = v90;
          bzero(v89, v88);
          double v142 = v90;
        }
        uint64_t v144 = 0;
        if ((geo::codec::decodeIntCompressorArray<unsigned short>(v7, v153, SBYTE4(v161[0]), v161[0], (uint64_t)&v141) & 1) == 0)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11797);
          int v102 = 6;
LABEL_212:
          if (v141)
          {
            double v142 = v141;
            operator delete(v141);
          }
          int v37 = v102;
LABEL_215:
          std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table((uint64_t)&v145);
LABEL_216:
          if (v149)
          {
            float v150 = v149;
            operator delete(v149);
          }
          goto LABEL_218;
        }
        uint64_t v91 = v160;
        float v138 = 0;
        uint64_t v139 = 0;
        unint64_t v137 = 0;
        if (v160)
        {
          size_t v92 = 8 * v160;
          unint64_t v93 = (char *)operator new(v92);
          unsigned int v94 = &v93[8 * v91];
          unint64_t v137 = v93;
          uint64_t v139 = v94;
          bzero(v93, v92);
          float v138 = v94;
        }
        uint64_t v140 = 0;
        memset(v136, 0, sizeof(v136));
        if ((geo::codec::decodeIntCompressorArray<unsigned long long>(v7, (uint64_t *)v136, SBYTE4(v161[0]), v161[0], (uint64_t)&v137) & 1) == 0)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11801);
          int v102 = 6;
          goto LABEL_210;
        }
        uint64_t v95 = v160;
        unint64_t v133 = 0;
        uint64_t v134 = 0;
        int v132 = 0;
        if (v160)
        {
          size_t v96 = 8 * v160;
          int v132 = operator new(v96);
          uint64_t v134 = (char *)v132 + 8 * v95;
          bzero(v132, v96);
          unint64_t v133 = v134;
        }
        uint64_t v135 = 0;
        uint64_t v97 = geo::codec::decodeIntCompressorArray<unsigned long long>(v7, (uint64_t *)v136, SBYTE4(v161[0]), v161[0], (uint64_t)&v132);
        if (v97)
        {
          uint64_t v98 = geo::codec::Allocator::instance((geo::codec::Allocator *)v97);
          uint64_t v99 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v98 + 16))(v98, 16 * v160, 8);
          *(void *)(*a2 + 656) = v99;
          if (v99)
          {
            unsigned int v100 = HIDWORD(v160);
            if (HIDWORD(v160))
            {
              uint64_t v101 = 0;
              unsigned int v128 = 0;
              while (1)
              {
                int v103 = __p->u8[v101];
                uint64_t v104 = v157++;
                if (v103 == 1)
                {
                  uint64_t v105 = *(unsigned __int16 *)&v154[2 * v104];
                  if (*(_DWORD *)(*a2 + 608) <= v105)
                  {
                    uint64_t v122 = (FILE *)*MEMORY[0x1E4F143C8];
                    int v123 = 11815;
                    goto LABEL_207;
                  }
                  int v106 = std::__hash_table<std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t *)(*a2 + 616), *(void *)(*(void *)(*a2 + 600) + 8 * v105), (void *)(*(void *)(*a2 + 600) + 8 * v105));
                  uint64_t v107 = v152++;
                  unsigned __int16 v108 = *(_WORD *)&v149[2 * v107];
                  float32x2_t v109 = std::unordered_map<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>::find[abi:ne180100](v145, *((unint64_t *)&v145 + 1), v108);
                  if (v109) {
                    float v110 = *((float *)v109 + 5);
                  }
                  else {
                    float v110 = 1.0;
                  }
                  LOBYTE(v130) = v108;
                  uint64_t v111 = v144++;
                  unsigned __int16 v131 = *((_WORD *)v141 + v111);
                  uint64_t v112 = v131;
                  HIDWORD(v130) = v128;
                  if (v131)
                  {
                    uint64_t v113 = 0;
                    uint64_t v114 = *a2;
                    uint64_t v115 = 16 * v128;
                    LODWORD(v116) = v160 - v128;
                    if (v160 >= v128) {
                      uint64_t v116 = v116;
                    }
                    else {
                      uint64_t v116 = 0;
                    }
                    BOOL v117 = (char *)v132 + 8 * v135;
                    uint64_t v118 = v135 + 1;
                    double v119 = (char *)v137 + 8 * v140;
                    uint64_t v120 = v140 + 1;
                    while (v116 != v113)
                    {
                      uint64_t v121 = *(void *)(v114 + 656) + v115;
                      uint64_t v140 = v120 + v113;
                      *(void *)uint64_t v121 = *(void *)&v119[8 * v113];
                      uint64_t v135 = v118 + v113;
                      *(float *)(v121 + 8) = v110 * (float)*(unint64_t *)&v117[8 * v113++];
                      v115 += 16;
                      if (v112 == v113) {
                        goto LABEL_201;
                      }
                    }
                    uint64_t v122 = (FILE *)*MEMORY[0x1E4F143C8];
                    int v123 = 11829;
                    goto LABEL_207;
                  }
LABEL_201:
                  geo::small_vector_base<GeoCodecsMetadata>::emplace_back<GeoCodecsMetadata&>((uint64_t)(v106 + 3), &v130);
                  v128 += v112;
                  unsigned int v100 = HIDWORD(v160);
                }
                int v102 = 0;
                if (v100 <= ++v101) {
                  goto LABEL_208;
                }
              }
            }
            int v102 = 0;
            float32x2_t v124 = (char *)v132;
            if (!v132) {
              goto LABEL_210;
            }
LABEL_209:
            unint64_t v133 = v124;
            operator delete(v124);
LABEL_210:
            mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v136);
            if (v137)
            {
              float v138 = v137;
              operator delete(v137);
            }
            goto LABEL_212;
          }
          uint64_t v122 = (FILE *)*MEMORY[0x1E4F143C8];
          int v123 = 11807;
        }
        else
        {
          uint64_t v122 = (FILE *)*MEMORY[0x1E4F143C8];
          int v123 = 11804;
        }
LABEL_207:
        fprintf(v122, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v123);
        int v102 = 6;
LABEL_208:
        float32x2_t v124 = (char *)v132;
        if (!v132) {
          goto LABEL_210;
        }
        goto LABEL_209;
      }
      unsigned __int8 v50 = (FILE *)*MEMORY[0x1E4F143C8];
      int v51 = 11780;
    }
    else
    {
      unsigned __int8 v50 = (FILE *)*MEMORY[0x1E4F143C8];
      int v51 = 11774;
    }
    fprintf(v50, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v51);
    int v37 = 6;
    goto LABEL_216;
  }
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11771);
  int v37 = 6;
LABEL_218:
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v153);
  if (v154)
  {
    float64x2_t v155 = v154;
    operator delete(v154);
  }
LABEL_46:
  int v38 = (void **)*((void *)&v159 + 1);
  *((void *)&v159 + 1) = 0;
  if (v38)
  {
    uint64_t v39 = *v38;
    *int v38 = 0;
    if (v39)
    {
      int v40 = v37;
      uint64_t v41 = (void *)*v39;
      *uint64_t v39 = 0;
      if (v41)
      {
        int v42 = (void *)v41[13];
        if (v42)
        {
          v41[14] = v42;
          operator delete(v42);
        }
        double v43 = (void *)v41[10];
        if (v43)
        {
          v41[11] = v43;
          operator delete(v43);
        }
        MEMORY[0x18C11F580](v41, 0x1070C40ADA6D0DELL);
      }
      MEMORY[0x18C11F580](v39, 0x20C4093837F09);
      int v37 = v40;
    }
    MEMORY[0x18C11F580](v38, 0x20C4093837F09);
  }
  if ((void)v158)
  {
    *((void *)&v158 + 1) = v158;
    operator delete((void *)v158);
  }
  uint64_t v18 = __p;
  if (__p) {
    operator delete(__p);
  }
  if (v37 != 6)
  {
    char v19 = 1;
    if (!*(unsigned char *)v7) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_22:
  char v19 = 0;
  if (*(unsigned char *)v7)
  {
LABEL_23:
    uint64_t v20 = geo::codec::Allocator::instance((geo::codec::Allocator *)v18);
    uint64_t v18 = (uint8x8_t *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v20 + 40))(v20, v7[5], 0);
  }
LABEL_24:
  uint64_t v21 = geo::codec::Allocator::instance((geo::codec::Allocator *)v18);
  uint64_t v22 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void *, void))(*(void *)v21 + 40))(v21, v7, 0);
  if (v19)
  {
    char v14 = 1;
  }
  else
  {
    int v23 = (void *)*a2;
    if (*(void *)(*a2 + 640))
    {
      int v24 = (void *)v23[79];
      if (v24)
      {
        do
        {
          unint64_t v28 = (void *)*v24;
          uint64_t v29 = (void *)v24[3];
          if (v29 != (void *)v24[5]) {
            free(v29);
          }
          operator delete(v24);
          int v24 = v28;
        }
        while (v28);
      }
      v23[79] = 0;
      uint64_t v25 = v23[78];
      if (v25)
      {
        for (uint64_t j = 0; j != v25; ++j)
          *(void *)(v23[77] + 8 * j) = 0;
      }
      v23[80] = 0;
      int v23 = (void *)*a2;
    }
    if (v23[82])
    {
      uint64_t v27 = geo::codec::Allocator::instance(v22);
      (*(void (**)(uint64_t, void, void))(*(void *)v27 + 40))(v27, *(void *)(*a2 + 656), 0);
      char v14 = 0;
      *(void *)(*a2 + 656) = 0;
    }
    else
    {
      char v14 = 0;
    }
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  *(void *)&long long v158 = "ChapterLiveFeaturesMetadatas";
  *(void *)&long long v145 = &v158;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v9 + 1912, (uint64_t *)&v158, (uint64_t)&std::piecewise_construct, (uint64_t **)&v145)+ 4) = (double)((rep - v10.__d_.__rep_) / 1000) * 0.001;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v14 & 1;
}

void sub_188FB7CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (__p)
  {
    operator delete(__p);
    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a23);
    int v38 = a27;
    if (!a27)
    {
LABEL_3:
      uint64_t v39 = a31;
      if (!a31)
      {
LABEL_8:
        std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table((uint64_t)&a35);
        int v40 = (void *)v35[10];
        if (v40)
        {
          v35[11] = v40;
          operator delete(v40);
          mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v36 - 256);
          uint64_t v41 = (void *)v35[18];
          if (!v41)
          {
LABEL_10:
            mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor(v36 - 192);
            if (!a16) {
              goto LABEL_11;
            }
            goto LABEL_14;
          }
        }
        else
        {
          mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v36 - 256);
          uint64_t v41 = (void *)v35[18];
          if (!v41) {
            goto LABEL_10;
          }
        }
        v35[19] = v41;
        operator delete(v41);
        mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor(v36 - 192);
        if (!a16)
        {
LABEL_11:
          geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v36 - 144));
          _Unwind_Resume(a1);
        }
LABEL_14:
        operator delete(a16);
        geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v36 - 144));
        _Unwind_Resume(a1);
      }
LABEL_7:
      a32 = (uint64_t)v39;
      operator delete(v39);
      goto LABEL_8;
    }
  }
  else
  {
    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a23);
    int v38 = a27;
    if (!a27) {
      goto LABEL_3;
    }
  }
  a28 = (uint64_t)v38;
  operator delete(v38);
  uint64_t v39 = a31;
  if (!a31) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_188FB7ED4(_Unwind_Exception *a1)
{
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readLinesExtendedChapter(void *a1, uint64_t *a2)
{
  v131[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  unint64_t v5 = a1[1];
  if (!v5)
  {
LABEL_5:
    uint64_t v8 = 0;
    int v126 = "ChapterLinesExtended";
    uint64_t v127 = v4;
    uint64_t v9 = a2[1];
    unsigned int v128 = (std::__shared_weak_count *)v9;
    if (!v9) {
      goto LABEL_7;
    }
LABEL_6:
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    goto LABEL_7;
  }
  uint64_t v6 = 0;
  unsigned int v7 = 0;
  while (*(_WORD *)(*a1 + 16 * v6) != 145)
  {
    uint64_t v6 = ++v7;
    if (v5 <= v7) {
      goto LABEL_5;
    }
  }
  uint64_t v8 = geo::codec::chapterAt((uint64_t)a1, v7, 145, v4 + 1912);
  uint64_t v4 = *a2;
  int v126 = "ChapterLinesExtended";
  uint64_t v127 = v4;
  uint64_t v9 = a2[1];
  unsigned int v128 = (std::__shared_weak_count *)v9;
  if (v9) {
    goto LABEL_6;
  }
LABEL_7:
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v10.__d_.__rep_;
  if (!v8) {
    goto LABEL_26;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v8, (unsigned int *)(v8 + 64)) & 1) == 0)
  {
    size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    int v12 = 1427;
    goto LABEL_16;
  }
  unsigned int v125 = 0;
  if ((geo::codec::chapterReadVarUint32((void *)v8, &v125) & 1) == 0)
  {
    size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    int v12 = 1430;
    goto LABEL_16;
  }
  if (*(_DWORD *)(v8 + 64) < v125)
  {
    size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    int v12 = 1431;
    goto LABEL_16;
  }
  if (v125 != 1)
  {
LABEL_26:
    uint64_t v14 = 1;
    v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v118 = "ChapterLinesExtended";
    if (!"ChapterLinesExtended") {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  unsigned int v124 = 0;
  if ((geo::codec::chapterReadVarUint32((void *)v8, &v124) & 1) == 0)
  {
    size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    int v12 = 1437;
    goto LABEL_16;
  }
  std::vector<GeoCodecsPhysicalFeature,geo::StdAllocator<GeoCodecsPhysicalFeature,geo::codec::Allocator>>::resize((uint64_t *)(*a2 + 152), v124);
  uint64_t v19 = *a2;
  uint64_t v20 = *(void *)(*a2 + 160);
  if (v20 == *(void *)(*a2 + 152))
  {
    uint64_t v25 = *(void *)(*a2 + 160);
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    uint64_t v20 = *(void *)(*a2 + 152);
    do
    {
      uint64_t v26 = a2[1];
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v27 = (uint64_t *)(v20 + v21);
      unint64_t v28 = (std::__shared_weak_count *)v27[1];
      *uint64_t v27 = v19;
      v27[1] = v26;
      if (v28) {
        std::__shared_weak_count::__release_weak(v28);
      }
      ++v22;
      uint64_t v19 = *a2;
      uint64_t v20 = *(void *)(*a2 + 152);
      uint64_t v25 = *(void *)(*a2 + 160);
      v21 += 176;
    }
    while (v22 < 0x2E8BA2E8BA2E8BA3 * ((v25 - v20) >> 4));
  }
  unint64_t v29 = *(void *)(v8 + 48);
  unint64_t v30 = *(void *)(v8 + 56);
  BOOL v31 = v30 >= v29;
  unint64_t v32 = v30 - v29;
  if (!v31)
  {
    size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    int v12 = 1445;
    goto LABEL_16;
  }
  uint64_t v33 = (char *)(*(void *)(v8 + 40) + v29);
  *(void *)(v8 + 8) = v33;
  *(unsigned char *)(v8 + 32) = 1;
  *(void *)(v8 + 16) = v32;
  *(void *)(v8 + 24) = 0;
  if ((v32 & 0x1FFFFFFFFFFFFFFFLL) == 0)
  {
    size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    int v12 = 1449;
    goto LABEL_16;
  }
  int v34 = *v33;
  *(void *)(v8 + 24) = 1;
  if (v34 < 0)
  {
    LODWORD(v120) = 0;
    if (BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v120, 5uLL))
    {
      uint64_t v19 = *a2;
      uint64_t v38 = *(void *)(*a2 + 152);
      uint64_t v39 = *(void *)(*a2 + 160) - v38;
      if (!v39) {
        goto LABEL_66;
      }
      unint64_t v40 = v39 / 176;
      uint64_t v41 = v120;
      unint64_t v42 = *(void *)(v8 + 24);
      unint64_t v43 = 8 * *(void *)(v8 + 16);
      if (v120)
      {
        uint64_t v44 = 0;
        int v45 = 0;
        if (v40 <= 1) {
          unint64_t v40 = 1;
        }
        while (1)
        {
          uint64_t v46 = v38 + 176 * v44;
          *(_DWORD *)(v46 + 96) = v45;
          if (v42 + v41 > v43) {
            break;
          }
          int v47 = 0;
          uint64_t v48 = *(void *)(v8 + 8);
          unint64_t v49 = v41;
          do
          {
            unint64_t v50 = 8 - (v42 & 7);
            if (v49 < v50) {
              unint64_t v50 = v49;
            }
            int v47 = (*(unsigned __int8 *)(v48 + (v42 >> 3)) >> (8 - (v42 & 7) - v50)) & ~(-1 << v50) | (v47 << v50);
            v42 += v50;
            *(void *)(v8 + 24) = v42;
            v49 -= v50;
          }
          while (v49);
          *(_DWORD *)(v46 + 100) = v47;
          v45 += v47;
          if (++v44 == v40) {
            goto LABEL_66;
          }
        }
      }
      else
      {
        if (v42 <= v43)
        {
          if (v40 <= 1) {
            unint64_t v64 = 1;
          }
          else {
            unint64_t v64 = v40;
          }
          if (v64 >= 2)
          {
            unint64_t v65 = v64 & 0xFFFFFFFFFFFFFFFELL;
            uint64_t v66 = (void *)(v38 + 272);
            unint64_t v67 = v64 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              *(v66 - 22) = 0;
              *uint64_t v66 = 0;
              v66 += 44;
              v67 -= 2;
            }
            while (v67);
            if (v64 == v65) {
              goto LABEL_66;
            }
          }
          else
          {
            unint64_t v65 = 0;
          }
          uint64_t v68 = (void *)(v38 + 176 * v65 + 96);
          unint64_t v69 = v64 - v65;
          do
          {
            *uint64_t v68 = 0;
            v68 += 22;
            --v69;
          }
          while (v69);
          goto LABEL_66;
        }
        *(_DWORD *)(v38 + 96) = 0;
      }
      int v12 = 1456;
    }
    else
    {
      int v12 = 1452;
    }
LABEL_82:
    size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_16;
  }
  uint64_t v35 = v25 - v20;
  if (!v35) {
    goto LABEL_66;
  }
  unint64_t v36 = v35 / 176;
  if (v36 <= 1) {
    unint64_t v36 = 1;
  }
  if (v36 < 2)
  {
    unint64_t v37 = 0;
LABEL_64:
    int v53 = (_DWORD *)(v20 + 176 * v37 + 100);
    do
    {
      *(v53 - 1) = v37;
      *int v53 = 1;
      v53 += 44;
      ++v37;
    }
    while (v36 != v37);
    goto LABEL_66;
  }
  uint64_t v51 = 0;
  unint64_t v37 = v36 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v52 = (_DWORD *)(v20 + 276);
  do
  {
    *(v52 - 1) = v51 + 1;
    *uint64_t v52 = 1;
    *(v52 - 45) = v51;
    *(v52 - 44) = 1;
    v51 += 2;
    v52 += 88;
  }
  while (v37 != v51);
  if (v36 != v37) {
    goto LABEL_64;
  }
LABEL_66:
  if ((geo::codec::decodeSectionEncoding((geo::codec::Allocator *)(v8 + 8), (geo::codec::Allocator **)(v19 + 848), 0, 0, 0) & 1) == 0)
  {
    size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    int v12 = 1467;
    goto LABEL_16;
  }
  if ((geo::codec::decodeSectionZEncoding((geo::codec::Allocator *)(v8 + 8), *(void **)(*a2 + 848)) & 1) == 0)
  {
    size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    int v12 = 1468;
    goto LABEL_16;
  }
  unint64_t v54 = *(void *)(v8 + 24);
  unint64_t v55 = v54 + 1;
  unint64_t v56 = 8 * *(void *)(v8 + 16);
  if (v54 + 1 > v56)
  {
    size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    int v12 = 1471;
    goto LABEL_16;
  }
  unsigned int v57 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v54 >> 3));
  *(void *)(v8 + 24) = v55;
  if ((v57 >> (~(_BYTE)v54 & 7)))
  {
    LODWORD(v118) = 0;
    if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v118, 2uLL))
    {
      size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
      int v12 = 1474;
      goto LABEL_16;
    }
    LODWORD(v117[0]) = 0;
    if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), v117, 5uLL))
    {
      size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
      int v12 = 1476;
      goto LABEL_16;
    }
    uint64_t v120 = 0;
    if ((geo::codec::_makeSpaceForLabels((geo::codec::Allocator *)(0x2E8BA2E8BA2E8BA3* ((uint64_t)(*(void *)(*a2 + 160) - *(void *)(*a2 + 152)) >> 4)), &v120, a2) & 1) == 0)
    {
      size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
      int v12 = 1479;
      goto LABEL_16;
    }
    unint64_t v58 = (void *)*a2;
    if (*(void *)(*a2 + 160) != *(void *)(*a2 + 152))
    {
      unint64_t v59 = 0;
      uint64_t v116 = v58[107];
      unint64_t v60 = v58[108] - v116;
      BOOL v61 = v120;
      unint64_t v62 = v118;
      unint64_t v63 = LODWORD(v117[0]);
      do
      {
        unint64_t v70 = *(void *)(v8 + 24);
        if (v70 + 1 > 8 * *(void *)(v8 + 16))
        {
          size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
          int v12 = 1484;
          goto LABEL_16;
        }
        unsigned int v71 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v70 >> 3));
        *(void *)(v8 + 24) = v70 + 1;
        if ((v71 >> (~(_BYTE)v70 & 7)))
        {
          unsigned int v123 = 0;
          if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v123, v62))
          {
            size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
            int v12 = 1487;
            goto LABEL_16;
          }
          uint64_t v72 = v123;
          if (v123)
          {
            unsigned int v122 = 0;
            if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v122, v63))
            {
              uint64_t v120 = v61;
              int v12 = 1492;
              goto LABEL_82;
            }
            uint64_t v73 = v122;
            if (v60 <= v122)
            {
              uint64_t v120 = v61;
              int v12 = 1493;
              goto LABEL_82;
            }
            uint64_t v74 = *a2;
            if ((unint64_t)v61 >= *(void *)(*a2 + 1056))
            {
              uint64_t v120 = v61;
              int v12 = 1494;
              goto LABEL_82;
            }
            uint64_t v75 = *(void *)(v74 + 1048) + 24 * (void)v61;
            *(void *)uint64_t v75 = v116 + v122;
            *(_DWORD *)(v75 + 16) = 0;
            uint8x8_t v76 = geo::codec::langLocaleForOffset(v73, *(const void **)(v74 + 888), *(void *)(v74 + 896));
            uint64_t v77 = *a2;
            unint64_t v78 = (void *)(*(void *)(*a2 + 1048) + 24 * (void)v61);
            v78[1] = v76;
            uint64_t v79 = *(void *)(v77 + 152) + 176 * v59;
            *(unsigned char *)(v79 + 73) = 1;
            *(_DWORD *)(v79 + 56) = v61;
            *(void *)(v79 + 16) = *v78;
            BOOL v61 = (const char **)((char *)v61 + 1);
            if (v72 >= 2)
            {
              uint64_t v80 = v72 - 1;
              do
              {
                unsigned int v122 = 0;
                if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v122, v63))
                {
                  uint64_t v120 = v61;
                  int v12 = 1510;
                  goto LABEL_82;
                }
                if (v60 <= v122)
                {
                  int v12 = 1511;
                  goto LABEL_82;
                }
                --v80;
              }
              while (v80);
            }
          }
          unint64_t v58 = (void *)*a2;
        }
        ++v59;
      }
      while (v59 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v58[20] - v58[19]) >> 4));
    }
    unint64_t v55 = *(void *)(v8 + 24);
    unint64_t v56 = 8 * *(void *)(v8 + 16);
  }
  if (v55 + 1 > v56)
  {
    size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    int v12 = 1518;
    goto LABEL_16;
  }
  unsigned int v81 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v55 >> 3));
  *(void *)(v8 + 24) = v55 + 1;
  if ((v81 >> (~(_BYTE)v55 & 7)))
  {
    if (!geo::codec::decodeAttributeSet<GeoCodecsFeature>(21, (uint64_t *)(v8 + 8), -1171354717 * ((*(void *)(*a2 + 160) - *(void *)(*a2 + 152)) >> 4), *a2 + 1112, *(void *)(*a2 + 152), 176))
    {
      size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
      int v12 = 1521;
      goto LABEL_16;
    }
  }
  else
  {
    _ZNSt3__115allocate_sharedB8ne180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v120);
    uint64_t v82 = v120;
    *(void *)*uint64_t v120 = 0x1500000005;
    *(_WORD *)((char *)v82 + 33) = 5377;
    v117[0] = (uint64_t)v82;
    v117[1] = v121;
    if (v121) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v121 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v83 = FeatureStyleAttributesSet::insert(*a2 + 1112, v117);
    uint64_t v84 = v83[1];
    uint64_t v118 = (const char *)*v83;
    uint64_t v119 = v84;
    if (v84) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v84 + 8), 1uLL, memory_order_relaxed);
    }
    std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)v117);
    uint64_t v85 = *(void *)(*a2 + 152);
    if (*(void *)(*a2 + 160) != v85)
    {
      unint64_t v86 = 0;
      uint64_t v87 = 24;
      do
      {
        std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]((void *)(v85 + v87), (uint64_t)v118, v119);
        ++v86;
        uint64_t v85 = *(void *)(*a2 + 152);
        v87 += 176;
      }
      while (v86 < 0x2E8BA2E8BA2E8BA3 * ((*(void *)(*a2 + 160) - v85) >> 4));
    }
    std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&v118);
    std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&v120);
  }
  unint64_t v88 = *(void *)(v8 + 24);
  if (v88 + 1 > 8 * *(void *)(v8 + 16))
  {
    size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    int v12 = 1532;
    goto LABEL_16;
  }
  unsigned int v89 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v88 >> 3));
  *(void *)(v8 + 24) = v88 + 1;
  char v90 = ~(_BYTE)v88 & 7;
  uint64_t v91 = *a2;
  if ((v89 >> v90))
  {
    uint64_t v92 = *(void *)(v91 + 160);
    if (v92 != *(void *)(v91 + 152))
    {
      unint64_t v93 = 0;
      uint64_t v94 = 40;
      uint64_t v92 = *(void *)(v91 + 152);
      while (1)
      {
        unint64_t v96 = *(void *)(v8 + 24);
        if (v96 + 1 > 8 * *(void *)(v8 + 16))
        {
          int v12 = 1536;
          goto LABEL_82;
        }
        unsigned int v97 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v96 >> 3));
        *(void *)(v8 + 24) = v96 + 1;
        if ((v97 >> (~(_BYTE)v96 & 7)))
        {
          if (!BitstreamUnpack64((uint64_t *)(v8 + 8), (unint64_t *)(v92 + v94), 0x40uLL))
          {
            int v12 = 1538;
            goto LABEL_82;
          }
          uint64_t v91 = *a2;
        }
        ++v93;
        uint64_t v92 = *(void *)(v91 + 152);
        uint64_t v95 = *(void *)(v91 + 160);
        v94 += 176;
        if (v93 >= 0x2E8BA2E8BA2E8BA3 * ((v95 - v92) >> 4)) {
          goto LABEL_139;
        }
      }
    }
    uint64_t v95 = *(void *)(v91 + 160);
  }
  else
  {
    uint64_t v92 = *(void *)(v91 + 152);
    uint64_t v95 = *(void *)(v91 + 160);
  }
LABEL_139:
  v131[0] = &unk_1ED517D38;
  v131[1] = a2;
  v131[3] = v131;
  geo::codec::decodeZoomRanks((uint64_t *)(v8 + 8), 0x2E8BA2E8BA2E8BA3 * ((v95 - v92) >> 4), (uint64_t)v131);
  std::function<void ()(unsigned long,float)>::~function(v131);
  uint64_t v98 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(*a2 + 160) - *(void *)(*a2 + 152)) >> 4);
  v130[0] = &unk_1ED517D90;
  v130[1] = a2;
  v130[3] = v130;
  geo::codec::decodeZoomRanks((uint64_t *)(v8 + 8), v98, (uint64_t)v130);
  unint64_t v13 = (geo::codec::Allocator *)std::function<void ()(unsigned long,float)>::~function(v130);
  unint64_t v99 = *(void *)(v8 + 24);
  unint64_t v100 = v99 + 1;
  unint64_t v101 = 8 * *(void *)(v8 + 16);
  if (v99 + 1 > v101)
  {
    size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    int v12 = 1554;
    goto LABEL_16;
  }
  uint64_t v102 = *(void *)(v8 + 8);
  unsigned int v103 = *(unsigned __int8 *)(v102 + (v99 >> 3));
  *(void *)(v8 + 24) = v100;
  if (((v103 >> (~(_BYTE)v99 & 7)) & 1) == 0)
  {
LABEL_166:
    BOOL v114 = (v100 & 7) == 0;
    unint64_t v115 = *(void *)(v8 + 48) + (v100 >> 3);
    if (!v114) {
      ++v115;
    }
    *(void *)(v8 + 48) = v115;
    *(unsigned char *)(v8 + 32) = 0;
    uint64_t v14 = 1;
    if (a1) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }
  LODWORD(v120) = 1;
  unint64_t v104 = v99 + 2;
  if (v104 > v101)
  {
    int v12 = 1558;
    goto LABEL_82;
  }
  unsigned int v105 = *(unsigned __int8 *)(v102 + (v100 >> 3));
  *(void *)(v8 + 24) = v104;
  if (((v105 >> (~(_BYTE)v100 & 7)) & 1) != 0 && !BitstreamUnpackVar32((uint64_t *)(v8 + 8), (int *)&v120))
  {
    int v12 = 1560;
    goto LABEL_82;
  }
  LODWORD(v118) = 0;
  unint64_t v13 = (geo::codec::Allocator *)BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v118, 5uLL);
  if (!v13)
  {
    size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
    int v12 = 1564;
    goto LABEL_16;
  }
  uint64_t v106 = *a2;
  if (*(void *)(*a2 + 160) == *(void *)(*a2 + 152))
  {
LABEL_165:
    unint64_t v100 = *(void *)(v8 + 24);
    goto LABEL_166;
  }
  unint64_t v107 = 0;
  unint64_t v108 = v118;
  int v109 = (int)v120;
  uint64_t v110 = 168;
  while (1)
  {
    unint64_t v112 = *(void *)(v8 + 24);
    if (v112 + 1 > 8 * *(void *)(v8 + 16))
    {
      size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
      int v12 = 1567;
      goto LABEL_16;
    }
    unsigned int v113 = *(unsigned __int8 *)(*(void *)(v8 + 8) + (v112 >> 3));
    *(void *)(v8 + 24) = v112 + 1;
    if ((v113 >> (~(_BYTE)v112 & 7))) {
      break;
    }
    uint64_t v111 = *(void *)(v106 + 152);
LABEL_153:
    ++v107;
    v110 += 176;
    if (v107 >= 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v106 + 160) - v111) >> 4)) {
      goto LABEL_165;
    }
  }
  LODWORD(v117[0]) = 0;
  unint64_t v13 = (geo::codec::Allocator *)BitstreamUnpack((uint64_t *)(v8 + 8), (int *)v117, v108);
  if (v13)
  {
    uint64_t v106 = *a2;
    uint64_t v111 = *(void *)(*a2 + 152);
    *(float *)(v111 + v110) = (float)(LODWORD(v117[0]) * v109);
    goto LABEL_153;
  }
  size_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
  int v12 = 1570;
LABEL_16:
  unint64_t v13 = (geo::codec::Allocator *)fprintf(v11, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v12);
  uint64_t v14 = 0;
  if (a1)
  {
LABEL_17:
    if (*(unsigned char *)v8)
    {
      uint64_t v15 = geo::codec::Allocator::instance(v13);
      unint64_t v13 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v15 + 40))(v15, *(void *)(v8 + 40), 0);
    }
    uint64_t v16 = geo::codec::Allocator::instance(v13);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v16 + 40))(v16, v8, 0);
  }
LABEL_20:
  int v17 = v126;
  uint64_t v4 = v127;
  v10.__d_.__rep_ = rep;
  v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v118 = v17;
  if (v17)
  {
LABEL_27:
    uint64_t v120 = &v118;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v4 + 1912, (uint64_t *)&v118, (uint64_t)&std::piecewise_construct, (uint64_t **)&v120)+ 4) = (double)((v18.__d_.__rep_ - v10.__d_.__rep_) / 1000) * 0.001;
  }
LABEL_28:
  int v23 = v128;
  if (v128 && !atomic_fetch_add(&v128->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  return v14;
}

void sub_188FB8D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  std::function<void ()(unsigned long,float)>::~function((uint64_t *)va1);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readDaVinciAssetMetadata(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    goto LABEL_31;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 156)
  {
    uint64_t v4 = ++v5;
    if (v2 <= v5) {
      goto LABEL_31;
    }
  }
  uint64_t v6 = (geo::codec::Allocator *)geo::codec::chapterAt((uint64_t)a1, v5, 156, *a2 + 1912);
  if (!v6)
  {
LABEL_31:
    char v22 = 1;
    return v22 & 1;
  }
  unsigned int v7 = v6;
  uint64_t v8 = geo::codec::Allocator::instance(v6);
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 16))(v8, 48, 48);
  if (v9)
  {
    v9[1] = 0;
    *uint64_t v9 = v9 + 1;
    v9[5] = 0;
    v9[4] = 0;
    v9[2] = 0;
    void v9[3] = v9 + 4;
  }
  uint64_t v10 = *a2;
  *(void *)(v10 + 2240) = v9;
  long long v146 = "ChapterDaVinciAssetMetadata";
  uint64_t v147 = v10;
  size_t v11 = (std::__shared_weak_count *)a2[1];
  unsigned int v148 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  unsigned int v145 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v145) & 1) == 0)
  {
    int v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 10316;
LABEL_38:
    uint64_t v26 = (geo::codec::Allocator *)fprintf(v24, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v25);
    goto LABEL_39;
  }
  uint64_t v144 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v144 + 1) & 1) == 0)
  {
    int v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 10320;
    goto LABEL_38;
  }
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v144) & 1) == 0)
  {
    int v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 10321;
    goto LABEL_38;
  }
  unsigned int v143 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v143) & 1) == 0)
  {
    int v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 10324;
    goto LABEL_38;
  }
  unsigned int v142 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v142) & 1) == 0)
  {
    int v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 10328;
    goto LABEL_38;
  }
  uint64_t v12 = v142;
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  float v138 = 0;
  if (v142)
  {
    size_t v13 = 8 * v142;
    float v138 = (uint64_t *)operator new(v13);
    uint64_t v140 = &v138[v12];
    bzero(v138, v13);
    uint64_t v139 = v140;
  }
  uint64_t v141 = 0;
  memset(v137, 0, 32);
  if ((geo::codec::decodeIntCompressorArray<unsigned long long>(v7, v137, SBYTE4(v144), v144, (uint64_t)&v138) & 1) == 0)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 10332);
    int v40 = 6;
    goto LABEL_156;
  }
  uint64_t v14 = v143;
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  unint64_t v133 = 0;
  if (v143)
  {
    size_t v15 = 2 * v143;
    unint64_t v133 = operator new(v15);
    uint64_t v135 = (char *)v133 + 2 * v14;
    bzero(v133, v15);
    uint64_t v134 = v135;
  }
  uint64_t v136 = 0;
  memset(v132, 0, sizeof(v132));
  if (geo::codec::decodeIntCompressorArray<unsigned short>(v7, (uint64_t *)v132, SBYTE4(v144), v144, (uint64_t)&v133))
  {
    memset(v131, 0, sizeof(v131));
    uint64_t v16 = v143;
    __p[1] = 0;
    *(void *)&long long v130 = 0;
    __p[0] = 0;
    if (v143)
    {
      size_t v17 = 2 * v143;
      __p[0] = operator new(v17);
      *(void *)&long long v130 = (char *)__p[0] + 2 * v16;
      bzero(__p[0], v17);
      __p[1] = (void *)v130;
    }
    *((void *)&v130 + 1) = 0;
    if (geo::codec::decodeIntCompressorArray<unsigned short>(v7, (uint64_t *)v132, SBYTE4(v144), v144, (uint64_t)__p))
    {
      unsigned int v128 = 0;
      if (geo::codec::chapterReadVarUint32(v7, &v128))
      {
        uint64_t v18 = v128;
        unsigned int v125 = 0;
        int v126 = 0;
        unsigned int v124 = 0;
        if (v128)
        {
          size_t v19 = 2 * v128;
          unsigned int v124 = operator new(v19);
          int v126 = (char *)v124 + 2 * v18;
          bzero(v124, v19);
          unsigned int v125 = v126;
        }
        uint64_t v127 = 0;
        if (geo::codec::decodeIntCompressorArray<unsigned short>(v7, (uint64_t *)v132, SBYTE4(v144), v144, (uint64_t)&v124))
        {
          std::vector<std::vector<unsigned short>>::resize((uint64_t)v131, v143);
          if (!v143)
          {
            int v40 = 0;
            uint64_t v120 = v124;
            if (!v124) {
              goto LABEL_58;
            }
            goto LABEL_148;
          }
          uint64_t v20 = 0;
          unint64_t v21 = 0;
          while (1)
          {
            unint64_t v113 = *((unsigned __int16 *)__p[0] + v20);
            BOOL v114 = (char **)((char *)v131[0] + 24 * v20);
            std::vector<unsigned short>::resize(v114, v113);
            if (v113) {
              break;
            }
LABEL_137:
            int v40 = 0;
            if (++v20 >= (unint64_t)v143) {
              goto LABEL_147;
            }
          }
          uint64_t v115 = 0;
          unint64_t v116 = (v125 - (unsigned char *)v124) >> 1;
          BOOL v117 = v116 >= v21;
          unint64_t v118 = v116 - v21;
          if (!v117) {
            unint64_t v118 = 0;
          }
          uint64_t v119 = (char *)v124 + 2 * v21;
          while (v118 != v115)
          {
            *(_WORD *)&(*v114)[2 * v115] = *(_WORD *)&v119[2 * v115];
            if (v113 == ++v115)
            {
              v21 += v115;
              goto LABEL_137;
            }
          }
          int v112 = 10358;
        }
        else
        {
          int v112 = 10349;
        }
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v112);
        int v40 = 6;
LABEL_147:
        uint64_t v120 = v124;
        if (!v124) {
          goto LABEL_58;
        }
LABEL_148:
        unsigned int v125 = v120;
        operator delete(v120);
        goto LABEL_58;
      }
      uint64_t v41 = (FILE *)*MEMORY[0x1E4F143C8];
      int v42 = 10346;
    }
    else
    {
      uint64_t v41 = (FILE *)*MEMORY[0x1E4F143C8];
      int v42 = 10343;
    }
    fprintf(v41, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v42);
    int v40 = 6;
LABEL_58:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (!v40)
    {
      *(_OWORD *)__p = 0u;
      long long v130 = 0u;
      size_t v43 = v143;
      unsigned int v125 = 0;
      int v126 = 0;
      unsigned int v124 = 0;
      if (v143)
      {
        uint64_t v44 = (char *)operator new(v143);
        int v45 = &v44[v43];
        unsigned int v124 = v44;
        int v126 = &v44[v43];
        bzero(v44, v43);
        unsigned int v125 = v45;
      }
      uint64_t v127 = 0;
      if (!geo::codec::decodeIntCompressorArray<unsigned char>(v7, (uint64_t *)__p, SBYTE4(v144), v144, (uint64_t)&v124))
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 10366);
        int v40 = 6;
        goto LABEL_150;
      }
      if (v143)
      {
        uint64_t v121 = v7;
        uint64_t v46 = 0;
        while (1)
        {
          uint64_t v47 = v138[*((unsigned __int16 *)v133 + v46)];
          uint64_t v122 = v46;
          unsigned int v48 = *((unsigned __int8 *)v124 + v46);
          unint64_t v49 = v131[0];
          unint64_t v50 = *(uint64_t ***)(*a2 + 2240);
          uint64_t v52 = v50 + 1;
          uint64_t v51 = v50[1];
          if (v51)
          {
            while (1)
            {
              while (1)
              {
                int v53 = (uint64_t **)v51;
                unsigned int v54 = *((unsigned __int8 *)v51 + 32);
                if (v48 >= v54) {
                  break;
                }
                uint64_t v51 = *v53;
                uint64_t v52 = v53;
                if (!*v53) {
                  goto LABEL_74;
                }
              }
              if (v54 >= v48) {
                break;
              }
              uint64_t v51 = v53[1];
              if (!v51)
              {
                uint64_t v52 = v53 + 1;
                goto LABEL_74;
              }
            }
            unint64_t v55 = v53;
          }
          else
          {
            int v53 = v50 + 1;
LABEL_74:
            unint64_t v55 = operator new(0x40uLL);
            v55[32] = v48;
            *((void *)v55 + 6) = 0;
            *((void *)v55 + 7) = 0;
            *((void *)v55 + 5) = 0;
            *(void *)unint64_t v55 = 0;
            *((void *)v55 + 1) = 0;
            *((void *)v55 + 2) = v53;
            *uint64_t v52 = (uint64_t *)v55;
            unint64_t v56 = (uint64_t *)**v50;
            unsigned int v57 = (uint64_t *)v55;
            if (v56)
            {
              *unint64_t v50 = v56;
              unsigned int v57 = *v52;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v50[1], v57);
            v50[2] = (uint64_t *)((char *)v50[2] + 1);
          }
          unint64_t v59 = (char *)*((void *)v55 + 6);
          unint64_t v58 = *((void *)v55 + 7);
          if ((unint64_t)v59 >= v58)
          {
            unint64_t v63 = (char *)*((void *)v55 + 5);
            uint64_t v64 = (v59 - v63) >> 3;
            unint64_t v65 = v64 + 1;
            if ((unint64_t)(v64 + 1) >> 61) {
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v66 = v58 - (void)v63;
            if (v66 >> 2 > v65) {
              unint64_t v65 = v66 >> 2;
            }
            if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v67 = v65;
            }
            if (v67)
            {
              if (v67 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v68 = operator new(8 * v67);
              uint64_t v69 = v47;
              BOOL v61 = v49;
            }
            else
            {
              uint64_t v69 = v47;
              BOOL v61 = v49;
              uint64_t v68 = 0;
            }
            unint64_t v70 = (uint64_t *)&v68[8 * v64];
            *unint64_t v70 = v69;
            unint64_t v62 = v70 + 1;
            if (v59 != v63)
            {
              unint64_t v71 = v59 - v63 - 8;
              if (v71 < 0x58) {
                goto LABEL_169;
              }
              if ((unint64_t)(v63 - v68) < 0x20) {
                goto LABEL_169;
              }
              uint64_t v72 = (v71 >> 3) + 1;
              uint64_t v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v74 = &v59[-v73];
              unint64_t v70 = (uint64_t *)((char *)v70 - v73);
              uint64_t v75 = &v68[8 * v64 - 16];
              uint8x8_t v76 = v59 - 16;
              uint64_t v77 = v72 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v78 = *(_OWORD *)v76;
                *(v75 - 1) = *((_OWORD *)v76 - 1);
                *uint64_t v75 = v78;
                v75 -= 2;
                v76 -= 32;
                v77 -= 4;
              }
              while (v77);
              unint64_t v59 = v74;
              if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_169:
                do
                {
                  uint64_t v79 = *((void *)v59 - 1);
                  v59 -= 8;
                  *--unint64_t v70 = v79;
                }
                while (v59 != v63);
              }
            }
            *((void *)v55 + 5) = v70;
            *((void *)v55 + 6) = v62;
            *((void *)v55 + 7) = &v68[8 * v67];
            if (v63) {
              operator delete(v63);
            }
          }
          else
          {
            uint64_t v60 = v47;
            BOOL v61 = v49;
            *(void *)unint64_t v59 = v60;
            unint64_t v62 = v59 + 8;
          }
          uint64_t v80 = v61;
          *((void *)v55 + 6) = v62;
          unsigned int v81 = (unsigned __int16 *)v61[3 * v122];
          uint64_t v82 = (unsigned __int16 *)v80[3 * v122 + 1];
          unsigned int v123 = v82;
          while (v81 != v82)
          {
            uint64_t v84 = v138[*v81];
            uint64_t v85 = *(void *)(*a2 + 2240);
            uint64_t v87 = (uint64_t **)(v85 + 32);
            unint64_t v86 = *(uint64_t **)(v85 + 32);
            if (v86)
            {
              while (1)
              {
                while (1)
                {
                  unint64_t v88 = (uint64_t **)v86;
                  unsigned int v89 = *((unsigned __int8 *)v86 + 32);
                  if (v48 >= v89) {
                    break;
                  }
                  unint64_t v86 = *v88;
                  uint64_t v87 = v88;
                  if (!*v88) {
                    goto LABEL_110;
                  }
                }
                if (v89 >= v48) {
                  break;
                }
                unint64_t v86 = v88[1];
                if (!v86)
                {
                  uint64_t v87 = v88 + 1;
                  goto LABEL_110;
                }
              }
              char v90 = v88;
              uint64_t v94 = v88[6];
              unint64_t v93 = (unint64_t)v88[7];
              if ((unint64_t)v94 < v93)
              {
LABEL_100:
                *uint64_t v94 = v84;
                uint64_t v83 = (uint64_t)(v94 + 1);
                goto LABEL_101;
              }
            }
            else
            {
              unint64_t v88 = (uint64_t **)(v85 + 32);
LABEL_110:
              char v90 = operator new(0x40uLL);
              v90[32] = v48;
              *((void *)v90 + 6) = 0;
              *((void *)v90 + 7) = 0;
              *((void *)v90 + 5) = 0;
              *(void *)char v90 = 0;
              *((void *)v90 + 1) = 0;
              *((void *)v90 + 2) = v88;
              *uint64_t v87 = (uint64_t *)v90;
              uint64_t v91 = **(void **)(v85 + 24);
              uint64_t v92 = (uint64_t *)v90;
              if (v91)
              {
                *(void *)(v85 + 24) = v91;
                uint64_t v92 = *v87;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v85 + 32), v92);
              ++*(void *)(v85 + 40);
              uint64_t v94 = (uint64_t *)*((void *)v90 + 6);
              unint64_t v93 = *((void *)v90 + 7);
              if ((unint64_t)v94 < v93) {
                goto LABEL_100;
              }
            }
            uint64_t v95 = (uint64_t *)*((void *)v90 + 5);
            uint64_t v96 = v94 - v95;
            unint64_t v97 = v96 + 1;
            if ((unint64_t)(v96 + 1) >> 61) {
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v98 = v93 - (void)v95;
            if (v98 >> 2 > v97) {
              unint64_t v97 = v98 >> 2;
            }
            if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v99 = v97;
            }
            if (v99)
            {
              if (v99 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v100 = operator new(8 * v99);
              unint64_t v101 = (uint64_t *)&v100[8 * v96];
              *unint64_t v101 = v84;
              uint64_t v83 = (uint64_t)(v101 + 1);
              int64_t v102 = (char *)v94 - (char *)v95;
              if (v94 == v95) {
                goto LABEL_132;
              }
LABEL_126:
              unint64_t v103 = v102 - 8;
              if (v103 < 0x58) {
                goto LABEL_170;
              }
              if ((unint64_t)((char *)v95 - v100) < 0x20) {
                goto LABEL_170;
              }
              uint64_t v104 = (v103 >> 3) + 1;
              uint64_t v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v106 = &v94[v105 / 0xFFFFFFFFFFFFFFF8];
              unint64_t v101 = (uint64_t *)((char *)v101 - v105);
              unint64_t v107 = &v100[8 * v96 - 16];
              unint64_t v108 = v94 - 2;
              uint64_t v109 = v104 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v110 = *(_OWORD *)v108;
                *(v107 - 1) = *((_OWORD *)v108 - 1);
                *unint64_t v107 = v110;
                v107 -= 2;
                v108 -= 4;
                v109 -= 4;
              }
              while (v109);
              uint64_t v94 = v106;
              if (v104 != (v104 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_170:
                do
                {
                  uint64_t v111 = *--v94;
                  *--unint64_t v101 = v111;
                }
                while (v94 != v95);
              }
              goto LABEL_132;
            }
            unint64_t v100 = 0;
            unint64_t v101 = (uint64_t *)(8 * v96);
            *(void *)(8 * v96) = v84;
            uint64_t v83 = 8 * v96 + 8;
            int64_t v102 = (char *)v94 - (char *)v95;
            if (v94 != v95) {
              goto LABEL_126;
            }
LABEL_132:
            *((void *)v90 + 5) = v101;
            *((void *)v90 + 6) = v83;
            *((void *)v90 + 7) = &v100[8 * v99];
            if (v95) {
              operator delete(v95);
            }
LABEL_101:
            *((void *)v90 + 6) = v83;
            ++v81;
            uint64_t v82 = v123;
          }
          uint64_t v46 = v122 + 1;
          if (v122 + 1 >= (unint64_t)v143)
          {
            int v40 = 0;
            unsigned int v7 = v121;
            goto LABEL_150;
          }
        }
      }
      int v40 = 0;
LABEL_150:
      if (v124)
      {
        unsigned int v125 = v124;
        operator delete(v124);
      }
      mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)__p);
    }
    std::vector<std::vector<unsigned short>>::~vector[abi:ne180100](v131);
    goto LABEL_154;
  }
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 10337);
  int v40 = 6;
LABEL_154:
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v132);
  if (v133)
  {
    uint64_t v134 = v133;
    operator delete(v133);
  }
LABEL_156:
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v137);
  uint64_t v26 = (geo::codec::Allocator *)v138;
  if (v138)
  {
    uint64_t v139 = v138;
    operator delete(v138);
  }
  if (v40 != 6)
  {
    char v27 = 1;
    if (!*(unsigned char *)v7) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
LABEL_39:
  char v27 = 0;
  if (*(unsigned char *)v7)
  {
LABEL_40:
    uint64_t v28 = geo::codec::Allocator::instance(v26);
    uint64_t v26 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v28 + 40))(v28, *((void *)v7 + 5), 0);
  }
LABEL_41:
  uint64_t v29 = geo::codec::Allocator::instance(v26);
  unint64_t v30 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v29 + 40))(v29, v7, 0);
  if (v27)
  {
    char v22 = 1;
  }
  else if (*(void *)(*a2 + 2240))
  {
    uint64_t v31 = geo::codec::Allocator::instance(v30);
    uint64_t v32 = *a2;
    uint64_t v33 = *(void *)(*a2 + 2240);
    if (v33)
    {
      uint64_t v34 = v31;
      std::__tree<std::__value_type<unsigned char,std::vector<unsigned long long>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned long long>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned long long>>>>::destroy(v33 + 24, *(void **)(v33 + 32));
      std::__tree<std::__value_type<unsigned char,std::vector<unsigned long long>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned long long>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned long long>>>>::destroy(v33, *(void **)(v33 + 8));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v34 + 40))(v34, v33, 48);
      uint64_t v32 = *a2;
    }
    char v22 = 0;
    *(void *)(v32 + 2240) = 0;
  }
  else
  {
    char v22 = 0;
  }
  uint64_t v36 = (uint64_t)v146;
  uint64_t v35 = v147;
  v37.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v38 = rep;
  v137[0] = v36;
  if (v36)
  {
    float v138 = v137;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v35 + 1912, v137, (uint64_t)&std::piecewise_construct, &v138)+ 4) = (double)((v37.__d_.__rep_ - v38) / 1000) * 0.001;
  }
  uint64_t v39 = v148;
  if (v148 && !atomic_fetch_add(&v148->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  return v22 & 1;
}

void sub_188FB99A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (__p) {
    operator delete(__p);
  }
  std::vector<std::vector<unsigned short>>::~vector[abi:ne180100](&a24);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a27);
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a35);
    std::chrono::steady_clock::time_point v37 = *(void **)(v35 - 184);
    if (!v37)
    {
LABEL_5:
      geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v35 - 128));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a35);
    std::chrono::steady_clock::time_point v37 = *(void **)(v35 - 184);
    if (!v37) {
      goto LABEL_5;
    }
  }
  *(void *)(v35 - 176) = v37;
  operator delete(v37);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v35 - 128));
  _Unwind_Resume(a1);
}

void sub_188FB9AE4(_Unwind_Exception *a1)
{
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readTransitMZROverride(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 1;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 112)
  {
    uint64_t v4 = ++v5;
    if (v2 <= v5) {
      return 1;
    }
  }
  uint64_t v6 = geo::codec::chapterAt((uint64_t)a1, v5, 112, *a2 + 1912);
  if (!v6) {
    return 1;
  }
  uint64_t v7 = v6;
  uint64_t v9 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v74 = "ChapterTransitMZROverride";
  uint64_t v75 = v9;
  uint8x8_t v76 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v10.__d_.__rep_;
  unint64_t v12 = *(void *)(v7 + 48);
  unint64_t v11 = *(void *)(v7 + 56);
  unint64_t v13 = v11 - v12;
  if (v11 >= v12)
  {
    unint64_t v14 = 0;
    *(unsigned char *)(v7 + 32) = 1;
    unint64_t v18 = *(void *)(v7 + 40) + v12;
    *(void *)(v7 + 16) = v13;
    *(void *)(v7 + 24) = 0;
    *(void *)(v7 + 8) = v18;
    unint64_t v15 = 8 * v13;
    if (8 * v13 < 5)
    {
LABEL_20:
      int v24 = (FILE *)*MEMORY[0x1E4F143C8];
      int v25 = 6397;
      goto LABEL_21;
    }
  }
  else
  {
    unint64_t v14 = *(void *)(v7 + 24);
    unint64_t v15 = 8 * *(void *)(v7 + 16);
    if (v14 + 5 > v15) {
      goto LABEL_20;
    }
  }
  int v19 = 0;
  uint64_t v20 = *(void *)(v7 + 8);
  unint64_t v21 = 5;
  do
  {
    unint64_t v22 = 8 - (v14 & 7);
    if (v21 < v22) {
      unint64_t v22 = v21;
    }
    int v19 = (*(unsigned __int8 *)(v20 + (v14 >> 3)) >> (8 - (v14 & 7) - v22)) & ~(-1 << v22) | (v19 << v22);
    v14 += v22;
    *(void *)(v7 + 24) = v14;
    v21 -= v22;
  }
  while (v21);
  unint64_t v23 = (v19 + 1);
  if (v14 + v23 > v15) {
    goto LABEL_20;
  }
  int v30 = 0;
  if (v19 != -1)
  {
    do
    {
      unint64_t v31 = 8 - (v14 & 7);
      if (v23 < v31) {
        unint64_t v31 = v23;
      }
      int v30 = (*(unsigned __int8 *)(v20 + (v14 >> 3)) >> (8 - (v14 & 7) - v31)) & ~(-1 << v31) | (v30 << v31);
      v14 += v31;
      *(void *)(v7 + 24) = v14;
      v23 -= v31;
    }
    while (v23);
  }
  if (v14 + 5 > v15)
  {
    int v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 6400;
    goto LABEL_21;
  }
  int v32 = 0;
  unint64_t v33 = 5;
  do
  {
    unint64_t v34 = 8 - (v14 & 7);
    if (v33 < v34) {
      unint64_t v34 = v33;
    }
    int v32 = (*(unsigned __int8 *)(v20 + (v14 >> 3)) >> (8 - (v14 & 7) - v34)) & ~(-1 << v34) | (v32 << v34);
    v14 += v34;
    *(void *)(v7 + 24) = v14;
    v33 -= v34;
  }
  while (v33);
  if (v14 + 5 > v15)
  {
    int v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 6404;
    goto LABEL_21;
  }
  int v35 = 0;
  unint64_t v36 = (v32 + 1);
  unint64_t v37 = 5;
  do
  {
    unint64_t v38 = 8 - (v14 & 7);
    if (v37 < v38) {
      unint64_t v38 = v37;
    }
    int v35 = (*(unsigned __int8 *)(v20 + (v14 >> 3)) >> (8 - (v14 & 7) - v38)) & ~(-1 << v38) | (v35 << v38);
    v14 += v38;
    *(void *)(v7 + 24) = v14;
    v37 -= v38;
  }
  while (v37);
  if (v14 + 5 > v15) {
    goto LABEL_48;
  }
  int v39 = 0;
  unint64_t v40 = (v35 + 1);
  unint64_t v41 = 5;
  do
  {
    unint64_t v42 = 8 - (v14 & 7);
    if (v41 < v42) {
      unint64_t v42 = v41;
    }
    int v39 = (*(unsigned __int8 *)(v20 + (v14 >> 3)) >> (8 - (v14 & 7) - v42)) & ~(-1 << v42) | (v39 << v42);
    v14 += v42;
    *(void *)(v7 + 24) = v14;
    v41 -= v42;
  }
  while (v41);
  unint64_t v43 = (v39 + 1);
  if (v14 + v43 > v15)
  {
LABEL_48:
    int v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 6408;
    goto LABEL_21;
  }
  if (v39 == -1) {
    goto LABEL_62;
  }
  unsigned int v44 = 0;
  do
  {
    unint64_t v45 = 8 - (v14 & 7);
    if (v43 < v45) {
      unint64_t v45 = v43;
    }
    unsigned int v44 = (*(unsigned __int8 *)(v20 + (v14 >> 3)) >> (8 - (v14 & 7) - v45)) & ~(-1 << v45) | (v44 << v45);
    v14 += v45;
    *(void *)(v7 + 24) = v14;
    v43 -= v45;
  }
  while (v43);
  if (!v44)
  {
LABEL_62:
    int v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 6409;
    goto LABEL_21;
  }
  if (v14 + 5 > v15) {
    goto LABEL_61;
  }
  int v46 = 0;
  float v47 = (float)v44;
  unint64_t v48 = 5;
  do
  {
    unint64_t v49 = 8 - (v14 & 7);
    if (v48 < v49) {
      unint64_t v49 = v48;
    }
    int v46 = (*(unsigned __int8 *)(v20 + (v14 >> 3)) >> (8 - (v14 & 7) - v49)) & ~(-1 << v49) | (v46 << v49);
    v14 += v49;
    *(void *)(v7 + 24) = v14;
    v48 -= v49;
  }
  while (v48);
  unint64_t v50 = (v46 + 1);
  if (v14 + v50 > v15)
  {
LABEL_61:
    int v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 6413;
    goto LABEL_21;
  }
  unint64_t v72 = v40;
  int v51 = 0;
  if (v46 != -1)
  {
    do
    {
      unint64_t v52 = 8 - (v14 & 7);
      if (v50 < v52) {
        unint64_t v52 = v50;
      }
      int v51 = (*(unsigned __int8 *)(v20 + (v14 >> 3)) >> (8 - (v14 & 7) - v52)) & ~(-1 << v52) | (v51 << v52);
      v14 += v52;
      *(void *)(v7 + 24) = v14;
      v50 -= v52;
    }
    while (v50);
  }
  int v73 = 0;
  uint64_t v26 = (geo::codec::Allocator *)BitstreamUnpack((uint64_t *)(v7 + 8), &v73, 5uLL);
  if ((v26 & 1) == 0)
  {
    int v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 6416;
LABEL_21:
    uint64_t v26 = (geo::codec::Allocator *)fprintf(v24, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v25);
    uint64_t v16 = 0;
    if (!*(unsigned char *)v7) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v70 = v9;
  unint64_t v71 = ++v73;
  unint64_t v53 = v72;
  if (!v30)
  {
LABEL_92:
    uint64_t v67 = *(void *)(v7 + 48) + (*(void *)(v7 + 24) >> 3);
    if ((*(void *)(v7 + 24) & 7) != 0) {
      ++v67;
    }
    *(void *)(v7 + 48) = v67;
    *(unsigned char *)(v7 + 32) = 0;
    uint64_t v16 = 1;
    goto LABEL_103;
  }
  int v54 = 0;
  float v55 = 1.0 / v47;
  while (1)
  {
    unint64_t v56 = *(void *)(v7 + 24);
    unint64_t v57 = v56 + 1;
    unint64_t v58 = 8 * *(void *)(v7 + 16);
    if (v56 + 1 > v58)
    {
      uint64_t v68 = (FILE *)*MEMORY[0x1E4F143C8];
      int v69 = 6425;
      goto LABEL_102;
    }
    unsigned int v59 = *(unsigned __int8 *)(*(void *)(v7 + 8) + (v56 >> 3));
    *(void *)(v7 + 24) = v57;
    if (((v59 >> (~(_BYTE)v56 & 7)) & 1) == 0) {
      break;
    }
    if (v57 + v53 > v58)
    {
      uint64_t v68 = (FILE *)*MEMORY[0x1E4F143C8];
      int v69 = 6428;
      goto LABEL_102;
    }
    if (v53)
    {
      unint64_t v60 = v53;
      do
      {
        unint64_t v61 = 8 - (v57 & 7);
        if (v60 < v61) {
          unint64_t v61 = v60;
        }
        v57 += v61;
        v60 -= v61;
      }
      while (v60);
      uint64_t v62 = 0;
      *(void *)(v7 + 24) = v57;
    }
    else
    {
      uint64_t v62 = 0;
    }
LABEL_84:
    if (v57 + 1 > v58)
    {
      uint64_t v68 = (FILE *)*MEMORY[0x1E4F143C8];
      int v69 = 6440;
      goto LABEL_102;
    }
    unsigned int v64 = *(unsigned __int8 *)(*(void *)(v7 + 8) + (v57 >> 3));
    *(void *)(v7 + 24) = v57 + 1;
    if ((v64 >> (~(_BYTE)v57 & 7)))
    {
      uint64_t v65 = v62;
      LODWORD(v79) = 0;
      uint64_t v26 = (geo::codec::Allocator *)BitstreamUnpack((uint64_t *)(v7 + 8), (int *)&v79, v71);
      if (!v26)
      {
        uint64_t v68 = (FILE *)*MEMORY[0x1E4F143C8];
        int v69 = 6443;
        goto LABEL_102;
      }
      float v66 = (float)(v79 + v51) * v55;
      unint64_t v53 = v72;
      uint64_t v62 = v65;
    }
    else
    {
      float v66 = 100.0;
    }
    if (v62) {
      *(float *)(v62 + 160) = v66;
    }
    if (++v54 == v30) {
      goto LABEL_92;
    }
  }
  LODWORD(v79) = 0;
  uint64_t v26 = (geo::codec::Allocator *)BitstreamUnpack((uint64_t *)(v7 + 8), (int *)&v79, v36);
  if (!v26)
  {
    int v69 = 6433;
    goto LABEL_101;
  }
  uint64_t v63 = *(void *)(*a2 + 504);
  if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(*a2 + 512) - v63) >> 5) > (unint64_t)v79)
  {
    uint64_t v62 = v63 + 224 * v79;
    unint64_t v57 = *(void *)(v7 + 24);
    unint64_t v58 = 8 * *(void *)(v7 + 16);
    unint64_t v53 = v72;
    goto LABEL_84;
  }
  int v69 = 6434;
LABEL_101:
  uint64_t v68 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_102:
  uint64_t v26 = (geo::codec::Allocator *)fprintf(v68, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v69);
  uint64_t v16 = 0;
LABEL_103:
  uint64_t v9 = v70;
  if (*(unsigned char *)v7)
  {
LABEL_22:
    uint64_t v27 = geo::codec::Allocator::instance(v26);
    uint64_t v26 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v27 + 40))(v27, *(void *)(v7 + 40), 0);
  }
LABEL_23:
  uint64_t v28 = geo::codec::Allocator::instance(v26);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v28 + 40))(v28, v7, 0);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v29 = std::chrono::steady_clock::now().__d_.__rep_;
  long long v78 = "ChapterTransitMZROverride";
  uint64_t v79 = &v78;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v9 + 1912, (uint64_t *)&v78, (uint64_t)&std::piecewise_construct, (uint64_t **)&v79)+ 4) = (double)((v29 - v10.__d_.__rep_) / 1000) * 0.001;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v16;
}

void sub_188FBA358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readLineAttributesOld(void *a1, uint64_t *a2, void *a3)
{
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a3;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    while (*(_WORD *)(*a1 + 16 * v8) != 148)
    {
      uint64_t v8 = ++v9;
      if (v7 <= v9) {
        goto LABEL_5;
      }
    }
    uint64_t v10 = geo::codec::chapterAt((uint64_t)a1, v9, 148, v6 + 1912);
    uint64_t v6 = *a3;
    unint64_t v11 = (std::__shared_weak_count *)a3[1];
    unsigned int v124 = "ChapterLineWidths1";
    uint64_t v125 = v6;
    int v126 = v11;
    if (!v11) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v10 = 0;
  unsigned int v124 = "ChapterLineWidths1";
  uint64_t v125 = v6;
  unint64_t v11 = (std::__shared_weak_count *)a3[1];
  int v126 = v11;
  if (v11) {
LABEL_6:
  }
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v12.__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v127 = v12.__d_.__rep_;
  if (!v10) {
    goto LABEL_34;
  }
  if (*(void *)(*a3 + 2960) != *(void *)(*a3 + 2952))
  {
    uint64_t v14 = 1;
    goto LABEL_19;
  }
  unsigned int v123 = 0;
  if ((geo::codec::chapterReadVarUint32((void *)v10, &v123) & 1) == 0)
  {
    unint64_t v15 = (FILE *)*MEMORY[0x1E4F143C8];
    int v16 = 10980;
    goto LABEL_18;
  }
  unsigned int v122 = 0;
  if ((geo::codec::chapterReadVarUint32((void *)v10, &v122) & 1) == 0)
  {
    unint64_t v15 = (FILE *)*MEMORY[0x1E4F143C8];
    int v16 = 10982;
    goto LABEL_18;
  }
  if (v123 < v122)
  {
    unint64_t v15 = (FILE *)*MEMORY[0x1E4F143C8];
    int v16 = 10983;
LABEL_18:
    v12.__d_.__rep_ = fprintf(v15, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v16);
    uint64_t v14 = 0;
    goto LABEL_19;
  }
  if (v122 != 2)
  {
LABEL_34:
    uint64_t v14 = 1;
    goto LABEL_35;
  }
  unsigned int v121 = 0;
  if ((geo::codec::chapterReadVarUint32((void *)v10, &v121) & 1) == 0)
  {
    unint64_t v15 = (FILE *)*MEMORY[0x1E4F143C8];
    int v16 = 10988;
    goto LABEL_18;
  }
  uint64_t v120 = 0;
  uint64_t v119 = 0;
  unsigned int v118 = 0;
  uint64_t v117 = 0;
  if ((geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v120 + 1) & 1) == 0)
  {
    unint64_t v15 = (FILE *)*MEMORY[0x1E4F143C8];
    int v16 = 10998;
    goto LABEL_18;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v120) & 1) == 0)
  {
    unint64_t v15 = (FILE *)*MEMORY[0x1E4F143C8];
    int v16 = 10999;
    goto LABEL_18;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v119 + 1) & 1) == 0)
  {
    unint64_t v15 = (FILE *)*MEMORY[0x1E4F143C8];
    int v16 = 11000;
    goto LABEL_18;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v119) & 1) == 0)
  {
    unint64_t v15 = (FILE *)*MEMORY[0x1E4F143C8];
    int v16 = 11001;
    goto LABEL_18;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v10, &v118) & 1) == 0)
  {
    unint64_t v15 = (FILE *)*MEMORY[0x1E4F143C8];
    int v16 = 11002;
    goto LABEL_18;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v117 + 1) & 1) == 0)
  {
    unint64_t v15 = (FILE *)*MEMORY[0x1E4F143C8];
    int v16 = 11003;
    goto LABEL_18;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v117) & 1) == 0)
  {
    unint64_t v15 = (FILE *)*MEMORY[0x1E4F143C8];
    int v16 = 11004;
    goto LABEL_18;
  }
  uint64_t v95 = v6;
  unint64_t v20 = *(void *)(v10 + 48);
  unint64_t v19 = *(void *)(v10 + 56);
  BOOL v21 = v19 >= v20;
  unint64_t v22 = v19 - v20;
  if (v21)
  {
    *(void *)(v10 + 8) = *(void *)(v10 + 40) + v20;
    *(unsigned char *)(v10 + 32) = 1;
    *(void *)(v10 + 16) = v22;
    *(void *)(v10 + 24) = 0;
    int v116 = 0;
    BOOL v27 = BitstreamUnpack((uint64_t *)(v10 + 8), &v116, 5uLL);
    if (v27)
    {
      char v28 = ++v116;
      int v112 = 0;
      unint64_t v113 = 0;
      uint64_t v114 = 0;
      uint64_t v115 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)v27);
      unint64_t v108 = 0;
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      uint64_t v111 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v115);
      unint64_t v104 = 0;
      uint64_t v105 = 0;
      uint64_t v106 = 0;
      unint64_t v107 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v111);
      unint64_t v100 = 0;
      uint64_t v101 = 0;
      uint64_t v102 = 0;
      unint64_t v103 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v107);
      unint64_t v96 = 0;
      uint64_t v97 = 0;
      uint64_t v98 = 0;
      uint64_t v99 = geo::codec::Allocator::instance(v103);
      if ((geo::codec::adaptiveDeltaEncoderDecode((geo::codec::Allocator *)(v10 + 8), v120, (uint64_t)&v112) & 1) == 0)
      {
        int v51 = (FILE *)*MEMORY[0x1E4F143C8];
        int v52 = 11023;
        goto LABEL_99;
      }
      if ((geo::codec::adaptiveDeltaEncoderDecode((geo::codec::Allocator *)(v10 + 8), HIDWORD(v119), (uint64_t)&v108) & 1) == 0)
      {
        int v51 = (FILE *)*MEMORY[0x1E4F143C8];
        int v52 = 11024;
        goto LABEL_99;
      }
      if ((geo::codec::adaptiveDeltaEncoderDecode((geo::codec::Allocator *)(v10 + 8), v119, (uint64_t)&v104) & 1) == 0)
      {
        int v51 = (FILE *)*MEMORY[0x1E4F143C8];
        int v52 = 11025;
        goto LABEL_99;
      }
      if ((geo::codec::adaptiveDeltaEncoderDecode((geo::codec::Allocator *)(v10 + 8), v118, (uint64_t)&v100) & 1) == 0)
      {
        int v51 = (FILE *)*MEMORY[0x1E4F143C8];
        int v52 = 11026;
        goto LABEL_99;
      }
      if ((geo::codec::adaptiveDeltaEncoderDecode((geo::codec::Allocator *)(v10 + 8), HIDWORD(v117), (uint64_t)&v96) & 1) == 0)
      {
        int v51 = (FILE *)*MEMORY[0x1E4F143C8];
        int v52 = 11027;
        goto LABEL_99;
      }
      if (v112 != v113)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v29 = (char *)(v113 - 8);
        if (v113 - 8 > v112)
        {
          int v30 = v112 + 8;
          do
          {
            uint64_t v31 = *((void *)v30 - 1);
            *((void *)v30 - 1) = *(void *)v29;
            *(void *)std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v29 = v31;
            v29 -= 8;
            BOOL v21 = v30 >= v29;
            v30 += 8;
          }
          while (!v21);
        }
      }
      int v32 = (void *)(v109 - 8);
      if (v108 != v109 && (unint64_t)v32 > v108)
      {
        unint64_t v34 = v108 + 8;
        do
        {
          uint64_t v35 = *(void *)(v34 - 8);
          *(void *)(v34 - 8) = *v32;
          *v32-- = v35;
          BOOL v21 = v34 >= (unint64_t)v32;
          v34 += 8;
        }
        while (!v21);
      }
      unint64_t v36 = (void *)(v105 - 8);
      if (v104 != v105 && (unint64_t)v36 > v104)
      {
        unint64_t v38 = v104 + 8;
        do
        {
          uint64_t v39 = *(void *)(v38 - 8);
          *(void *)(v38 - 8) = *v36;
          *v36-- = v39;
          BOOL v21 = v38 >= (unint64_t)v36;
          v38 += 8;
        }
        while (!v21);
      }
      unint64_t v40 = (void *)(v101 - 8);
      if (v100 != v101 && (unint64_t)v40 > v100)
      {
        unint64_t v42 = v100 + 8;
        do
        {
          uint64_t v43 = *(void *)(v42 - 8);
          *(void *)(v42 - 8) = *v40;
          *v40-- = v43;
          BOOL v21 = v42 >= (unint64_t)v40;
          v42 += 8;
        }
        while (!v21);
      }
      unsigned int v44 = (void *)(v97 - 8);
      if (v96 != v97 && (unint64_t)v44 > v96)
      {
        unint64_t v46 = v96 + 8;
        do
        {
          uint64_t v47 = *(void *)(v46 - 8);
          *(void *)(v46 - 8) = *v44;
          *v44-- = v47;
          BOOL v21 = v46 >= (unint64_t)v44;
          v46 += 8;
        }
        while (!v21);
      }
      uint64_t v94 = *(void **)(*a3 + 792);
      std::vector<GeoCodecsRoadOffsets,geo::StdAllocator<GeoCodecsRoadOffsets,geo::codec::Allocator>>::reserve(*a3 + 2952, v94[2]);
      uint64_t v48 = *a3;
      unint64_t v92 = *(void *)(*a3 + 32);
      if ((uint64_t)(*(void *)(*a3 + 40) - v92) < 1)
      {
        uint64_t v53 = 1;
      }
      else
      {
        double v49 = (double)~(-1 << v28);
        double v50 = 1.0 / v49;
        do
        {
          uint64_t v54 = *(unsigned int *)(v92 + 96);
          if (v54 < *(_DWORD *)(v92 + 100) + (int)v54)
          {
            float v55 = (void *)(v94[4] + 16 * v54);
            do
            {
              unint64_t v56 = *(void *)(v10 + 24);
              unint64_t v57 = v56 + 1;
              unint64_t v58 = 8 * *(void *)(v10 + 16);
              if (v56 + 1 > v58)
              {
                int v51 = (FILE *)*MEMORY[0x1E4F143C8];
                int v52 = 11051;
                goto LABEL_99;
              }
              uint64_t v59 = *(void *)(v10 + 8);
              unsigned int v60 = *(unsigned __int8 *)(v59 + (v56 >> 3));
              *(void *)(v10 + 24) = v57;
              if ((v60 >> (~(_BYTE)v56 & 7)))
              {
                uint64_t v61 = *((void *)v113 - 1);
                v113 -= 8;
                uint64_t v62 = v55[1];
                if (v61 != v62)
                {
                  if (qword_1EB2A09B0 == -1)
                  {
                    uint64_t v87 = _MergedGlobals_355;
                    if (!os_log_type_enabled((os_log_t)_MergedGlobals_355, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_100;
                    }
                  }
                  else
                  {
                    dispatch_once(&qword_1EB2A09B0, &__block_literal_global_218);
                    uint64_t v87 = _MergedGlobals_355;
                    if (!os_log_type_enabled((os_log_t)_MergedGlobals_355, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_100;
                    }
                  }
                  int v88 = *((unsigned __int16 *)a2 + 4);
                  unint64_t v89 = *a2;
                  uint64_t v90 = ((unint64_t)*a2 >> 14) & 0x3FFFFFF;
                  unint64_t v91 = (unint64_t)*a2 >> 40;
                  LODWORD(buf) = 67110144;
                  DWORD1(buf) = v90;
                  WORD4(buf) = 1024;
                  *(_DWORD *)((char *)&buf + 10) = (v91 | (v88 << 24)) & 0x3FFFFFF;
                  HIWORD(buf) = 1024;
                  unsigned int v129 = (v89 >> 8) & 0x3F;
                  __int16 v130 = 2048;
                  uint64_t v131 = v62;
                  __int16 v132 = 2048;
                  uint64_t v133 = v61;
                  _os_log_impl(&dword_188D96000, v87, OS_LOG_TYPE_ERROR, "Line Width decoding, section length doesn't match pointCount (%d, %d, %d). Section Length = %lld, Point Count = %lld)", (uint8_t *)&buf, 0x28u);
                  goto LABEL_100;
                }
                unint64_t v63 = v56 + 2;
                if (v56 + 2 > v58)
                {
                  int v51 = (FILE *)*MEMORY[0x1E4F143C8];
                  int v52 = 11062;
                  goto LABEL_99;
                }
                int v64 = *(unsigned __int8 *)(v59 + (v57 >> 3));
                *(void *)(v10 + 24) = v63;
                unint64_t v65 = v56 + 3;
                if (v56 + 3 > v58)
                {
                  int v51 = (FILE *)*MEMORY[0x1E4F143C8];
                  int v52 = 11064;
                  goto LABEL_99;
                }
                int v66 = *(unsigned __int8 *)(v59 + (v63 >> 3));
                *(void *)(v10 + 24) = v65;
                unint64_t v67 = v56 + 4;
                if (v67 > v58)
                {
                  int v51 = (FILE *)*MEMORY[0x1E4F143C8];
                  int v52 = 11066;
LABEL_99:
                  fprintf(v51, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v52);
LABEL_100:
                  uint64_t v53 = 0;
                  goto LABEL_101;
                }
                int v68 = *(unsigned __int8 *)(v59 + (v65 >> 3));
                *(void *)(v10 + 24) = v67;
                if (*v55 < *v55 + v61)
                {
                  int v69 = (1 << (~(_BYTE)v57 & 7)) & v64;
                  int v70 = (1 << (~(_BYTE)v63 & 7)) & v66;
                  int v93 = (1 << (~(_BYTE)v65 & 7)) & v68;
                  for (unint64_t i = v94[1] + 8 * *v55; i < v94[1] + 8 * (v55[1] + *v55); i += 8)
                  {
                    long long buf = 0uLL;
                    if (v69) {
                      goto LABEL_119;
                    }
                    unint64_t v72 = *(void *)(v10 + 24);
                    if (v72 + 1 > 8 * *(void *)(v10 + 16))
                    {
                      int v51 = (FILE *)*MEMORY[0x1E4F143C8];
                      int v52 = 11072;
                      goto LABEL_99;
                    }
                    unsigned int v73 = *(unsigned __int8 *)(*(void *)(v10 + 8) + (v72 >> 3));
                    *(void *)(v10 + 24) = v72 + 1;
                    if ((v73 >> (~(_BYTE)v72 & 7)))
                    {
LABEL_119:
                      uint64_t v74 = *(void *)(v109 - 8);
                      v109 -= 8;
                      LODWORD(v49) = v117;
                      double v75 = (double)*(unint64_t *)&v49;
                      double v76 = (double)*(unint64_t *)&v49 * v50;
                      float v77 = 0.0;
                      float v78 = 0.0;
                      if (v70)
                      {
                        uint64_t v79 = *(void *)(v105 - 8);
                        v105 -= 8;
                        float v78 = (double)v79 * v76;
                      }
                      float v80 = v76 * (double)v74;
                      if (!v93)
                      {
                        uint64_t v81 = *(void *)(v101 - 8);
                        v101 -= 8;
                        if (v70)
                        {
                          uint64_t v82 = *(void *)(v97 - 8);
                          v97 -= 8;
                          float v83 = (double)v82 * v75 * v50;
                        }
                        else
                        {
                          float v83 = 0.0;
                        }
                        float v84 = v78 + v80;
                        float v80 = (double)v81 * v76;
                        float v77 = v84 * 0.5;
                        *(float *)&long long buf = v84 * 0.5;
                        float v78 = v83;
                      }
                      *((float *)&buf + 1) = v77;
                      *((float *)&buf + 2) = (float)(v78 + v80) * 0.5;
                      *((float *)&buf + 3) = *((float *)&buf + 2);
                    }
                    std::vector<GeoCodecsRoadOffsets,geo::StdAllocator<GeoCodecsRoadOffsets,geo::codec::Allocator>>::emplace_back<GeoCodecsRoadOffsets&>(*a3 + 2952, &buf);
                  }
                }
              }
              else if (*v55 < v55[1] + *v55)
              {
                unint64_t v85 = v94[1] + 8 * *v55;
                do
                {
                  uint64_t v86 = *a3 + 2952;
                  long long buf = 0uLL;
                  std::vector<GeoCodecsRoadOffsets,geo::StdAllocator<GeoCodecsRoadOffsets,geo::codec::Allocator>>::emplace_back<GeoCodecsRoadOffsets>(v86, &buf);
                  v85 += 8;
                }
                while (v85 < v94[1] + 8 * (v55[1] + *v55));
              }
              v55 += 2;
            }
            while ((unint64_t)v55 < v94[4]
                                          + 16
                                          * (unint64_t)(*(_DWORD *)(v92 + 100)
                                                                           + *(_DWORD *)(v92 + 96)));
            uint64_t v48 = *a3;
          }
          uint64_t v53 = 1;
          v92 += 168;
        }
        while (v92 < *(void *)(v48 + 40));
      }
LABEL_101:
      std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v96);
      std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v100);
      std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v104);
      std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v108);
      v12.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v112);
      uint64_t v14 = v53;
      uint64_t v6 = v95;
      goto LABEL_19;
    }
    unint64_t v23 = (FILE *)*MEMORY[0x1E4F143C8];
    int v24 = 11011;
  }
  else
  {
    unint64_t v23 = (FILE *)*MEMORY[0x1E4F143C8];
    int v24 = 11005;
  }
  v12.__d_.__rep_ = fprintf(v23, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v24);
  uint64_t v14 = 0;
LABEL_19:
  if (a1)
  {
    if (*(unsigned char *)v10)
    {
      uint64_t v17 = geo::codec::Allocator::instance((geo::codec::Allocator *)v12.__d_.__rep_);
      v12.__d_.__rep_ = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v17 + 40))(v17, *(void *)(v10 + 40), 0);
    }
    uint64_t v18 = geo::codec::Allocator::instance((geo::codec::Allocator *)v12.__d_.__rep_);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v18 + 40))(v18, v10, 0);
  }
LABEL_35:
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = std::chrono::steady_clock::now().__d_.__rep_;
  int v112 = "ChapterLineWidths1";
  *(void *)&long long buf = &v112;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v6 + 1912, (uint64_t *)&v112, (uint64_t)&std::piecewise_construct, (uint64_t **)&buf)+ 4) = (double)((v25 - rep) / 1000) * 0.001;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  return v14;
}

void sub_188FBAEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a15);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a19);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a23);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a27);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a31);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v31 - 192));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readVenueMZROverride(void *a1, uint64_t *a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 1;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 136)
  {
    uint64_t v4 = ++v5;
    if (v2 <= v5) {
      return 1;
    }
  }
  uint64_t v6 = geo::codec::chapterAt((uint64_t)a1, v5, 136, *a2 + 1912);
  if (!v6) {
    return 1;
  }
  uint64_t v7 = v6;
  uint64_t v9 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v11 = *(void *)(v7 + 48);
  unint64_t v12 = *(void *)(v7 + 56);
  unint64_t v13 = v12 - v11;
  if (v12 >= v11)
  {
    unint64_t v14 = 0;
    *(unsigned char *)(v7 + 32) = 1;
    unint64_t v18 = *(void *)(v7 + 40) + v11;
    *(void *)(v7 + 16) = v13;
    *(void *)(v7 + 24) = 0;
    *(void *)(v7 + 8) = v18;
    unint64_t v15 = 8 * v13;
    if (v15 < 5)
    {
LABEL_20:
      int v24 = 6476;
      goto LABEL_21;
    }
  }
  else
  {
    unint64_t v14 = *(void *)(v7 + 24);
    unint64_t v15 = 8 * *(void *)(v7 + 16);
    if (v14 + 5 > v15) {
      goto LABEL_20;
    }
  }
  int v19 = 0;
  uint64_t v20 = *(void *)(v7 + 8);
  unint64_t v21 = 5;
  do
  {
    unint64_t v22 = 8 - (v14 & 7);
    if (v21 < v22) {
      unint64_t v22 = v21;
    }
    int v19 = (*(unsigned __int8 *)(v20 + (v14 >> 3)) >> (8 - (v14 & 7) - v22)) & ~(-1 << v22) | (v19 << v22);
    v14 += v22;
    *(void *)(v7 + 24) = v14;
    v21 -= v22;
  }
  while (v21);
  unint64_t v23 = (v19 + 1);
  if (v14 + v23 > v15) {
    goto LABEL_20;
  }
  int v29 = 0;
  if (v23)
  {
    do
    {
      unint64_t v30 = 8 - (v14 & 7);
      if (v23 < v30) {
        unint64_t v30 = v23;
      }
      int v29 = (*(unsigned __int8 *)(v20 + (v14 >> 3)) >> (8 - (v14 & 7) - v30)) & ~(-1 << v30) | (v29 << v30);
      v14 += v30;
      *(void *)(v7 + 24) = v14;
      v23 -= v30;
    }
    while (v23);
  }
  if (v14 + 5 > v15)
  {
    int v24 = 6479;
    goto LABEL_21;
  }
  int v31 = 0;
  unint64_t v32 = 5;
  do
  {
    unint64_t v33 = 8 - (v14 & 7);
    if (v32 < v33) {
      unint64_t v33 = v32;
    }
    uint64_t v25 = (-1 << v33);
    int v31 = (*(unsigned __int8 *)(v20 + (v14 >> 3)) >> (8 - (v14 & 7) - v33)) & ~v25 | (v31 << v33);
    v14 += v33;
    *(void *)(v7 + 24) = v14;
    v32 -= v33;
  }
  while (v32);
  if (!v29)
  {
LABEL_51:
    unint64_t v43 = v11 + (v14 >> 3);
    if ((v14 & 7) != 0) {
      ++v43;
    }
    *(void *)(v7 + 48) = v43;
    *(unsigned char *)(v7 + 32) = 0;
    uint64_t v16 = 1;
    if (!*(unsigned char *)v7) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v34 = *a2;
  BOOL v35 = __CFADD__(v31, 1);
  unint64_t v36 = (v31 + 1);
  if (!v35)
  {
    int v37 = 0;
    uint64_t v25 = 0x6DB6DB6DB6DB6DB7;
    while (v14 + v36 <= v15)
    {
      LODWORD(v38) = 0;
      unint64_t v39 = v36;
      do
      {
        unint64_t v40 = 8 - (v14 & 7);
        if (v39 < v40) {
          unint64_t v40 = v39;
        }
        unint64_t v38 = (*(unsigned __int8 *)(v20 + (v14 >> 3)) >> (8 - (v14 & 7) - v40)) & ~(-1 << v40) | (v38 << v40);
        v14 += v40;
        *(void *)(v7 + 24) = v14;
        v39 -= v40;
      }
      while (v39);
      uint64_t v41 = *(void *)(v34 + 504);
      if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(v34 + 512) - v41) >> 5) <= v38) {
        goto LABEL_55;
      }
      *(unsigned char *)(v41 + 224 * v38 + 211) = 1;
      if (++v37 == v29) {
        goto LABEL_51;
      }
    }
    goto LABEL_40;
  }
  if (v14 + v36 > v15)
  {
LABEL_40:
    int v24 = 6483;
    goto LABEL_21;
  }
  uint64_t v42 = *(void *)(v34 + 504);
  if (*(void *)(v34 + 512) != v42)
  {
    *(unsigned char *)(v42 + 211) = 1;
    goto LABEL_51;
  }
LABEL_55:
  int v24 = 6484;
LABEL_21:
  uint64_t v25 = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v24);
  uint64_t v16 = 0;
  if (*(unsigned char *)v7)
  {
LABEL_22:
    uint64_t v26 = geo::codec::Allocator::instance((geo::codec::Allocator *)v25);
    uint64_t v25 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v26 + 40))(v26, *(void *)(v7 + 40), 0);
  }
LABEL_23:
  uint64_t v27 = geo::codec::Allocator::instance((geo::codec::Allocator *)v25);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v27 + 40))(v27, v7, 0);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  unsigned int v44 = "ChapterVenueMZROverride";
  unint64_t v45 = &v44;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v9 + 1912, (uint64_t *)&v44, (uint64_t)&std::piecewise_construct, (uint64_t **)&v45)+ 4) = (double)((rep - v10.__d_.__rep_) / 1000) * 0.001;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v16;
}

void sub_188FBB3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readDaVinciLandmarks(void *a1, uint64_t *a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    goto LABEL_11;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 147)
  {
    uint64_t v4 = ++v5;
    if (v2 <= v5) {
      goto LABEL_11;
    }
  }
  uint64_t v6 = geo::codec::chapterAt((uint64_t)a1, v5, 147, *a2 + 1912);
  if (!v6)
  {
LABEL_11:
    char v15 = 1;
    return v15 & 1;
  }
  uint64_t v7 = v6;
  uint64_t v9 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  int v68 = "ChapterDaVinciLandmarks";
  uint64_t v69 = v9;
  int v70 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v10.__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v71 = v10.__d_.__rep_;
  memset(v66, 0, sizeof(v66));
  int v67 = 1065353216;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)int v64 = 0u;
  int v65 = 1065353216;
  uint64_t v12 = *(void *)(v7 + 48);
  uint64_t v13 = v12 + 4;
  if ((unint64_t)(v12 + 4) > *(void *)(v7 + 56))
  {
    int v14 = 9291;
    goto LABEL_17;
  }
  unsigned int v17 = *(_DWORD *)(*(void *)(v7 + 40) + v12);
  *(void *)(v7 + 48) = v13;
  if (v17 < 0x10)
  {
    int v14 = 9292;
    goto LABEL_17;
  }
  uint64_t v59 = 0;
  unsigned int v60 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = geo::codec::Allocator::instance((geo::codec::Allocator *)v10.__d_.__rep_);
  uint64_t v58 = 0;
  uint64_t v18 = *a2;
  *(_WORD *)(v18 + 2798) = 0;
  uint64_t v19 = geo::codec::_decodeDaVinciRenderables((geo::codec::Allocator *)v7, v66, (uint64_t)__p, (uint64_t *)(v18 + 2192), (_WORD *)(v18 + 2184), (uint64_t)&v59, &v58);
  if (v19)
  {
    uint64_t v20 = v59;
    size_t v21 = v60 - (unsigned char *)v59;
    *(_WORD *)(*a2 + 2798) += (v60 - v59) >> 3;
    uint64_t v22 = geo::codec::Allocator::instance((geo::codec::Allocator *)v19);
    unint64_t v23 = (void *)(*(uint64_t (**)(uint64_t, size_t, uint64_t))(*(void *)v22 + 16))(v22, v21, 8);
    *(void *)(*a2 + 2816) = v23;
    uint64_t v24 = (uint64_t)memcpy(v23, v20, v21);
    int v25 = 0;
  }
  else
  {
    uint64_t v24 = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 9300);
    int v25 = 6;
    uint64_t v20 = v59;
  }
  if (v20)
  {
    unsigned int v60 = v20;
    uint64_t v24 = (*(uint64_t (**)(uint64_t, const void *, uint64_t))(*(void *)v62 + 40))(v62, v20, v61 - (void)v20);
  }
  if (v25 == 6) {
    goto LABEL_18;
  }
  if (*(_DWORD *)(v7 + 64) < 0x14u) {
    goto LABEL_88;
  }
  uint64_t v24 = geo::codec::_decodeMaterialModifiers((void *)v7, a2);
  if (!v24)
  {
    int v14 = 9308;
    goto LABEL_17;
  }
  unint64_t v33 = (void *)*(unsigned __int16 *)(*a2 + 2184);
  if (!*(_WORD *)(*a2 + 2184) || (int8x8_t v34 = (int8x8_t)__p[1], !__p[1]))
  {
LABEL_88:
    char v15 = 1;
    if (*(unsigned char *)v7) {
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  unint64_t v35 = 0;
LABEL_38:
  uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34);
  v36.i16[0] = vaddlv_u8(v36);
  if (v36.u32[0] > 1uLL)
  {
    unint64_t v37 = v35;
    if (*(void *)&v34 <= v35) {
      unint64_t v37 = v35 % *(void *)&v34;
    }
  }
  else
  {
    unint64_t v37 = (*(void *)&v34 + 0xFFFFLL) & v35;
  }
  unint64_t v38 = (uint64_t **)*((void *)__p[0] + v37);
  if (!v38 || (unint64_t v39 = *v38) == 0)
  {
LABEL_85:
    while ((void *)++v35 != v33)
    {
      int8x8_t v34 = (int8x8_t)__p[1];
      if (__p[1]) {
        goto LABEL_38;
      }
    }
    goto LABEL_88;
  }
  if (v36.u32[0] < 2uLL)
  {
    uint64_t v40 = *(void *)&v34 - 1;
    while (1)
    {
      unint64_t v42 = v39[1];
      if (v42 == v35)
      {
        if (*((_DWORD *)v39 + 4) == v35) {
          goto LABEL_58;
        }
      }
      else if ((v42 & v40) != v37)
      {
        goto LABEL_85;
      }
      unint64_t v39 = (uint64_t *)*v39;
      if (!v39) {
        goto LABEL_85;
      }
    }
  }
  while (1)
  {
    unint64_t v41 = v39[1];
    if (v41 == v35) {
      break;
    }
    if (v41 >= *(void *)&v34) {
      v41 %= *(void *)&v34;
    }
    if (v41 != v37) {
      goto LABEL_85;
    }
LABEL_47:
    unint64_t v39 = (uint64_t *)*v39;
    if (!v39) {
      goto LABEL_85;
    }
  }
  if (*((_DWORD *)v39 + 4) != v35) {
    goto LABEL_47;
  }
LABEL_58:
  uint64_t v43 = *(void *)(*a2 + 2192);
  uint64_t v44 = v43 + 48 * v35;
  int v47 = *(unsigned __int16 *)(v44 + 42);
  unint64_t v45 = (unsigned __int16 *)(v44 + 42);
  unsigned __int16 v46 = v47;
  if (!v47) {
    goto LABEL_85;
  }
  uint64_t v48 = 0;
  double v49 = (void *)(v43 + 48 * v35 + 8);
  while (2)
  {
    if (!__p[1]) {
      goto LABEL_92;
    }
    uint8x8_t v50 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v50.i16[0] = vaddlv_u8(v50);
    if (v50.u32[0] > 1uLL)
    {
      unint64_t v51 = v35;
      if (__p[1] <= (void *)v35) {
        unint64_t v51 = v35 % (unint64_t)__p[1];
      }
    }
    else
    {
      unint64_t v51 = ((unint64_t)__p[1] + 0xFFFF) & v35;
    }
    int v52 = (uint64_t *)*((void *)__p[0] + v51);
    if (!v52 || (uint64_t v24 = *v52) == 0) {
LABEL_92:
    }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (v50.u32[0] < 2uLL)
    {
      while (1)
      {
        unint64_t v54 = *(void *)(v24 + 8);
        if (v54 == v35)
        {
          if (*(_DWORD *)(v24 + 16) == v35) {
            goto LABEL_81;
          }
        }
        else if ((v54 & ((unint64_t)__p[1] - 1)) != v51)
        {
          goto LABEL_92;
        }
        uint64_t v24 = *(void *)v24;
        if (!v24) {
          goto LABEL_92;
        }
      }
    }
    while (2)
    {
      unint64_t v53 = *(void *)(v24 + 8);
      if (v53 != v35)
      {
        if ((void *)v53 >= __p[1]) {
          v53 %= (unint64_t)__p[1];
        }
        if (v53 != v51) {
          goto LABEL_92;
        }
        goto LABEL_71;
      }
      if (*(_DWORD *)(v24 + 16) != v35)
      {
LABEL_71:
        uint64_t v24 = *(void *)v24;
        if (!v24) {
          goto LABEL_92;
        }
        continue;
      }
      break;
    }
LABEL_81:
    int v55 = *(_DWORD *)(*(void *)(v24 + 24) + 4 * v48);
    if (!v55) {
      goto LABEL_60;
    }
    unint64_t v56 = (v55 - 1);
    uint64_t v57 = *(void *)(*a2 + 2104);
    uint64_t v24 = *(void *)(*a2 + 2112) - v57;
    if (v56 < v24 >> 4)
    {
      if (*(unsigned char *)(v57 + 16 * v56 + 12))
      {
        *(unsigned char *)(*v49 + v48) |= 1u;
        unsigned __int16 v46 = *v45;
      }
LABEL_60:
      if (++v48 >= (unint64_t)v46) {
        goto LABEL_85;
      }
      continue;
    }
    break;
  }
  int v14 = 9321;
LABEL_17:
  uint64_t v24 = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v14);
LABEL_18:
  char v15 = 0;
  if (*(unsigned char *)v7)
  {
LABEL_19:
    uint64_t v26 = geo::codec::Allocator::instance((geo::codec::Allocator *)v24);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v26 + 40))(v26, *(void *)(v7 + 40), 0);
  }
LABEL_20:
  uint64_t v27 = geo::codec::Allocator::instance((geo::codec::Allocator *)v24);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v27 + 40))(v27, v7, 0);
  char v28 = (void **)v64[0];
  if (v64[0])
  {
    do
    {
      int v31 = (void **)*v28;
      unint64_t v32 = v28[3];
      if (v32)
      {
        v28[4] = v32;
        (*(void (**)(void *, void *, int64_t))(*(void *)v28[6] + 40))(v28[6], v32, (unsigned char *)v28[5] - (unsigned char *)v32);
      }
      operator delete(v28);
      char v28 = v31;
    }
    while (v31);
  }
  int v29 = __p[0];
  __p[0] = 0;
  if (v29) {
    operator delete(v29);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v30 = std::chrono::steady_clock::now().__d_.__rep_;
  __p[0] = "ChapterDaVinciLandmarks";
  *(void *)&v66[0] = __p;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v9 + 1912, (uint64_t *)__p, (uint64_t)&std::piecewise_construct, (uint64_t **)v66)+ 4) = (double)((v30 - rep) / 1000) * 0.001;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v15 & 1;
}

void sub_188FBBA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  std::unordered_map<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  std::unordered_map<unsigned int,std::vector<geo::Transform<float>,geo::StdAllocator<geo::Transform<float>,geo::codec::Allocator>>>::~unordered_map[abi:ne180100]((uint64_t)va2);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v5 - 112));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readDaVinciBuildings(void *a1, geo::codec::VectorTile **a2)
{
  uint64_t v175 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = a1[1];
  if (!v2) {
    return 1;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 142)
  {
    uint64_t v4 = ++v5;
    if (v2 <= v5) {
      return 1;
    }
  }
  uint64_t v6 = geo::codec::chapterAt((uint64_t)a1, v5, 142, (uint64_t)*a2 + 1912);
  if (!v6) {
    return 1;
  }
  uint64_t v7 = (void *)v6;
  uint64_t v9 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  unsigned int v154 = "ChapterDaVinciBuildings";
  float64x2_t v155 = v9;
  float64x2_t v156 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v10.__d_.__rep_;
  unsigned int v153 = 0;
  char v152 = 0;
  uint64_t v142 = 0;
  uint64_t v143 = 0;
  uint64_t v144 = 0;
  unsigned int v145 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)v10.__d_.__rep_);
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  uint64_t v141 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v145);
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  uint64_t v137 = geo::codec::Allocator::instance(v141);
  uint64_t v11 = v7[6];
  if ((unint64_t)(v11 + 4) > v7[7])
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 9240;
    goto LABEL_105;
  }
  unsigned int v16 = *(_DWORD *)(v7[5] + v11);
  v7[6] = v11 + 4;
  if (v16 - 16 >= 5)
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 9241;
    goto LABEL_105;
  }
  if ((geo::codec::MercatorDequantizer::readInfo((uint64_t)&v146, v7) & 1) == 0)
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 9243;
    goto LABEL_105;
  }
  if ((geo::codec::chapterReadVarUint32(v7, &v153) & 1) == 0)
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 9245;
    goto LABEL_105;
  }
  BOOL v17 = v16 > 0x13;
  unsigned int v128 = v7;
  unsigned int v129 = a2;
  uint64_t v18 = *a2;
  char v19 = v17;
  *((unsigned char *)v18 + 2496) = v19;
  uint64_t v20 = v7[5];
  uint64_t v21 = v7[6];
  uint64_t v22 = v153;
  int v168 = 16843009;
  unsigned __int8 v169 = 0;
  long long v166 = 0uLL;
  uint64_t v167 = 0;
  int v165 = 0;
  float32x4_t v162 = 0;
  float32x4_t v163 = 0;
  uint64_t v164 = 0;
  long long v159 = 0;
  uint64_t v160 = 0;
  uint64_t v161 = 0;
  int v158 = 0;
  unint64_t v23 = (geo::codec::Allocator *)operator new(0x40uLL);
  *(void *)unint64_t v23 = &unk_1ED517DE8;
  *((void *)v23 + 1) = (char *)&v158 + 3;
  *((void *)v23 + 2) = (char *)&v158 + 2;
  *((void *)v23 + 3) = (char *)&v158 + 1;
  *((void *)v23 + 4) = (char *)v18 + 2352;
  *((void *)v23 + 5) = &v162;
  *((void *)v23 + 6) = &v158;
  *((void *)v23 + 7) = &v159;
  uint64_t v174 = v23;
  int v25 = mgcl::bldg::decompress((unsigned __int8 *)(v20 + v21), v22, (uint64_t)&v168, &v166, &v165);
  uint64_t v26 = v174;
  uint64_t v7 = v128;
  uint64_t v27 = a2;
  if (v174 == (geo::codec::Allocator *)&v172)
  {
    uint64_t v26 = (geo::codec::Allocator *)(*(uint64_t (**)(long long *))(v172 + 32))(&v172);
  }
  else if (v174)
  {
    uint64_t v26 = (geo::codec::Allocator *)(*(uint64_t (**)(void))(*(void *)v174 + 40))();
  }
  if (BYTE2(v158))
  {
    if (!HIBYTE(v158))
    {
      uint64_t v28 = *((void *)v18 + 294);
      *((void *)v18 + 295) = v28;
      uint64_t v29 = *((void *)v18 + 296);
      uint64_t v24 = v29 - v28;
      if (v29 != v28)
      {
        *((void *)v18 + 294) = 0;
        *((void *)v18 + 295) = 0;
        *((void *)v18 + 296) = 0;
        if (v28) {
          uint64_t v26 = (geo::codec::Allocator *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v18 + 297)
        }
                                                                                             + 40))(*((void *)v18 + 297), v28, v24);
      }
    }
  }
  if (!v25)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v30 = *a2;
    uint64_t v31 = *((void *)*a2 + 291);
    uint64_t v32 = *((void *)*v129 + 290);
    unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((v31 - v32) >> 3);
    unint64_t v34 = v165 - v33;
    if (v165 <= v33)
    {
      if (v165 < v33)
      {
        for (uint64_t i = v32 + 40 * v165; v31 != i; v31 -= 40)
        {
          uint8x8_t v36 = *(std::__shared_weak_count **)(v31 - 32);
          if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, unint64_t, uint64_t))v36->__on_zero_shared)(v36, v34, v24);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        *((void *)v30 + 291) = i;
      }
    }
    else
    {
      std::vector<GeoCodecsDaVinciBuilding,geo::StdAllocator<GeoCodecsDaVinciBuilding,geo::codec::Allocator>>::__append((unint64_t *)v30 + 290, v34);
    }
    unsigned int v123 = v9;
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v124 = v10.__d_.__rep_;
    unint64_t v133 = *((void *)&v166 + 1);
    unint64_t v37 = (unsigned int *)v166;
    uint64_t v38 = *((void *)&v166 + 1) - v166;
    if ((uint64_t)(*((void *)&v166 + 1) - v166) < 1)
    {
      int v41 = 0;
      int v40 = 0;
      int v39 = 0;
    }
    else
    {
      int v39 = 0;
      int v40 = 0;
      int v41 = 0;
      unint64_t v42 = (int *)v166;
      do
      {
        int v44 = *v42;
        v42 += 6;
        int v43 = v44;
        if (v44 >= 1)
        {
          int v45 = 0;
          do
          {
            int v47 = *v42;
            v42 += 4;
            int v46 = v47;
            if ((v47 & 0x80000000) == 0)
            {
              int v48 = v46 + 1;
              do
              {
                int v49 = *v42;
                v42 += 3 * *v42 + 1;
                v41 += v49;
                --v48;
              }
              while (v48);
            }
            v40 += v46 + 1;
            ++v45;
          }
          while (v45 != v43);
        }
        v39 += v43;
      }
      while ((unint64_t)v42 < *((void *)&v166 + 1));
    }
    int v127 = v39;
    uint64_t v125 = v8;
    uint64_t v50 = geo::codec::Allocator::instance(v26);
    unint64_t v51 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v50 + 24))(v50, 20, v127);
    uint64_t v52 = geo::codec::Allocator::instance(v51);
    unint64_t v53 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v52 + 24))(v52, 8, v40);
    long long v172 = 0uLL;
    uint64_t v173 = 0;
    uint64_t v54 = geo::codec::Allocator::instance(v53);
    uint64_t v174 = (geo::codec::Allocator *)v54;
    int v170 = &v172;
    char v171 = 0;
    if (v41)
    {
      if (v41 < 0) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v55 = 12 * v41;
      uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v54 + 16))(v54, v55, 4);
      uint64_t v57 = v56 + v55;
      *(void *)&long long v172 = v56;
      uint64_t v173 = v56 + v55;
      do
      {
        if (v56)
        {
          *(_DWORD *)(v56 + 8) = 0;
          *(void *)uint64_t v56 = 0;
        }
        v56 += 12;
        v55 -= 12;
      }
      while (v55);
      *((void *)&v172 + 1) = v57;
    }
    int v58 = v169;
    int v126 = *v129;
    *((unsigned char *)*v129 + 3480) = v169;
    if (v38 >= 1)
    {
      unsigned int v59 = 0;
      int v60 = 0;
      int v61 = 0;
      int v62 = 0;
      uint64_t v131 = v162;
      uint64_t v132 = *((void *)v126 + 290);
      __int16 v130 = v159;
      uint64_t v63 = v151;
      double v64 = v149;
      double v65 = v150[1] * (double)(v148 - v147);
      double v66 = (double)v147;
      uint64x2_t v67 = (uint64x2_t)vdupq_n_s64(v151);
      float64x2_t v68 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v66, 0);
      do
      {
        uint64_t v69 = v59;
        uint64_t v70 = *v37;
        uint64_t v71 = *((void *)v37 + 1);
        uint64_t v72 = v132 + 40 * v59;
        *(unsigned char *)(v72 + 36) = 0;
        unsigned int v73 = (char *)(v72 + 36);
        *(void *)(v73 - 12) = v71;
        *(void *)(v73 - 20) = *((unsigned __int16 *)v37 + 8);
        *((_WORD *)v73 - 1) = v70;
        *((_WORD *)v73 - 2) = v62;
        if (BYTE1(v158) && v131[v69])
        {
          *unsigned int v73 = 1;
          char v74 = 5;
          if (!(_BYTE)v158) {
            goto LABEL_70;
          }
        }
        else
        {
          char v74 = 4;
          if (!(_BYTE)v158) {
            goto LABEL_70;
          }
        }
        if (v130[v69]) {
          *unsigned int v73 = v74;
        }
LABEL_70:
        v37 += 6;
        if ((int)v70 >= 1)
        {
          uint64_t v75 = 0;
          while (1)
          {
            uint64_t v76 = v75 + v62;
            float v77 = (float *)((char *)v51 + 20 * v76);
            *((unsigned char *)v77 + 1) = 0;
            *(unsigned char *)float v77 = *((unsigned char *)v37 + 4);
            float v78 = (v66 + v65 * (double)((unint64_t)v37[2] + v63)) * v64;
            v77[1] = v78;
            if (!v58) {
              break;
            }
            float v79 = (v66 + v65 * (double)((unint64_t)v37[3] + v63)) * v64;
            float v80 = (float *)((char *)v51 + 20 * v76);
            v80[2] = v79;
            *((_DWORD *)v80 + 3) = v61;
            unsigned int v82 = *v37;
            v37 += 4;
            uint64_t v81 = v82;
            *((_WORD *)v80 + 8) = v82;
            if ((v82 & 0x80000000) == 0) {
              goto LABEL_77;
            }
LABEL_72:
            v61 += v81 + 1;
            if (++v75 == v70) {
              goto LABEL_62;
            }
          }
          float v83 = (char *)v51 + 20 * v76;
          *((_DWORD *)v83 + 2) = 0;
          *((_DWORD *)v83 + 3) = v61;
          unsigned int v84 = *v37;
          v37 += 4;
          uint64_t v81 = v84;
          *((_WORD *)v83 + 8) = v84;
          if ((v84 & 0x80000000) != 0) {
            goto LABEL_72;
          }
LABEL_77:
          uint64_t v85 = 0;
          uint64_t v86 = v172;
          uint64_t v87 = (const float *)&v146 + 1;
          int v88 = v150;
          int32x4_t v89 = (int32x4_t)vld1q_dup_f32(v87);
          float64x2_t v90 = vld1q_dup_f64(v88);
          while (2)
          {
            uint64_t v91 = (int)*v37;
            unint64_t v92 = (char *)v53 + 8 * v85 + 8 * v61;
            uint64_t v93 = *v37;
            *((_WORD *)v92 + 2) = v91;
            *(_DWORD *)unint64_t v92 = v60;
            if ((int)v91 > 0)
            {
              if (v91 < 4)
              {
                uint64_t v94 = 0;
                goto LABEL_85;
              }
              uint64_t v94 = v93 & 0xFFFFFFFC;
              uint64_t v95 = (float *)(v86 + 12 * v60);
              uint64_t v96 = v94;
              uint64_t v97 = (const float *)(v37 + 1);
              do
              {
                float32x4x3_t v176 = vld3q_f32(v97);
                v97 += 12;
                float32x4_t v98 = vcvtq_f32_s32(vaddq_s32((int32x4_t)v176.val[0], v89));
                v177.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v90, vcvtq_f64_f32(*(float32x2_t *)v98.f32))), vmulq_f64(v90, vcvt_hight_f64_f32(v98)));
                float32x4_t v99 = vcvtq_f32_s32(vaddq_s32((int32x4_t)v176.val[1], v89));
                v177.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v90, vcvtq_f64_f32(*(float32x2_t *)v99.f32))), vmulq_f64(v90, vcvt_hight_f64_f32(v99)));
                v177.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vmlaq_n_f64(v68, vcvtq_f64_u64(vaddw_u32(v67, *(uint32x2_t *)v176.val[2].f32)), v65), v64)), vmulq_n_f64(vmlaq_n_f64(v68, vcvtq_f64_u64(vaddw_high_u32(v67, (uint32x4_t)v176.val[2])), v65), v64));
                vst3q_f32(v95, v177);
                v95 += 12;
                v96 -= 4;
              }
              while (v96);
              uint64_t v91 = v93;
              if (v94 != v93)
              {
LABEL_85:
                uint64_t v100 = v93 - v94;
                uint64_t v101 = &v37[3 * v94 + 3];
                uint64_t v102 = (float *)(v86 + 8 + 12 * (v94 + v60));
                do
                {
                  *((float32x2_t *)v102 - 1) = vcvt_f32_f64(vmulq_f64(v90, vcvtq_f64_f32(vcvt_f32_s32(vadd_s32(*(int32x2_t *)(v101 - 2), *(int32x2_t *)v89.i8)))));
                  unsigned int v103 = *v101;
                  v101 += 3;
                  float v104 = (v66 + v65 * (double)((unint64_t)v103 + v63)) * v64;
                  *uint64_t v102 = v104;
                  v102 += 3;
                  --v100;
                }
                while (v100);
                uint64_t v91 = v93;
              }
            }
            v60 += v93;
            v37 += 3 * v91 + 1;
            if (++v85 == v81 + 1) {
              goto LABEL_72;
            }
            continue;
          }
        }
LABEL_62:
        v62 += v70;
        unsigned int v59 = v69 + 1;
      }
      while ((unint64_t)v37 < v133);
    }
    uint64_t v105 = v126;
    *((void *)v126 + 289) = v51;
    *((_WORD *)v126 + 1152) = v127;
    *((void *)v126 + 287) = v53;
    *((_WORD *)v126 + 1144) = v40;
    uint64_t v106 = *((void *)v126 + 282);
    v10.__d_.__rep_ = v124;
    uint64_t v8 = v125;
    uint64_t v9 = v123;
    uint64_t v27 = v129;
    int v25 = 0;
    if (v106)
    {
      *((void *)v126 + 283) = v106;
      (*(void (**)(void, uint64_t, uint64_t))(**((void **)v126 + 285) + 40))(*((void *)v126 + 285), v106, *((void *)v126 + 284) - v106);
      *((void *)v126 + 282) = 0;
      *((void *)v126 + 283) = 0;
      *((void *)v126 + 284) = 0;
      uint64_t v105 = v126;
    }
    *((_OWORD *)v105 + 141) = v172;
    *((void *)v105 + 284) = v173;
    *((_DWORD *)*v129 + 563) = v41;
    uint64_t v7 = v128;
  }
  if (v159)
  {
    uint64_t v160 = v159;
    operator delete(v159);
  }
  if (v162)
  {
    float32x4_t v163 = v162;
    operator delete(v162);
  }
  if ((void)v166) {
    operator delete((void *)v166);
  }
  if (v25)
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 9251;
  }
  else
  {
    v7[6] += v153;
    if (geo::codec::_readMaterials((uint64_t)v7, (uint64_t)&v134, (uint64_t)&v138, &v142, (uint64_t)*v27 + 1112, 1))
    {
      uint64_t v114 = *v27;
      uint64_t v115 = *((void *)*v27 + 290);
      uint64_t v116 = (unsigned __int16)(-13107 * ((*((_DWORD *)*v27 + 582) - v115) >> 3));
      if (-13107 * (unsigned __int16)((*((_DWORD *)*v27 + 582) - v115) >> 3))
      {
        uint64_t v117 = v138;
        unsigned int v118 = (void *)(v115 + 16);
        do
        {
          void *v118 = *(void *)(v117 + 16 * *(unsigned __int16 *)v118);
          v118 += 5;
          --v116;
        }
        while (v116);
      }
      geo::codec::VectorTile::calculateBuildingTileBound(v114, v107, v108, v109, v110, v111, v112, v113);
      *((double *)*v27 + 434) = v149;
      uint64_t v14 = 1;
      goto LABEL_106;
    }
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 9255;
  }
LABEL_105:
  uint64_t v119 = (geo::codec::Allocator *)fprintf(v12, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v13);
  uint64_t v14 = 0;
LABEL_106:
  if (*(unsigned char *)v7)
  {
    uint64_t v120 = geo::codec::Allocator::instance(v119);
    uint64_t v119 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v120 + 40))(v120, v7[5], 0);
  }
  uint64_t v121 = geo::codec::Allocator::instance(v119);
  (*(void (**)(uint64_t, void *, void))(*(void *)v121 + 40))(v121, v7, 0);
  if (v134)
  {
    uint64_t v135 = v134;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v137 + 40))(v137, v134, v136 - v134);
  }
  if (v138)
  {
    uint64_t v139 = v138;
    (*(void (**)(geo::codec::Allocator *, uint64_t, uint64_t))(*(void *)v141 + 40))(v141, v138, v140 - v138);
  }
  if (v142)
  {
    uint64_t v143 = v142;
    (*(void (**)(geo::codec::Allocator *, uint64_t, uint64_t))(*(void *)v145 + 40))(v145, v142, v144 - v142);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v122 = std::chrono::steady_clock::now().__d_.__rep_;
  *(void *)&long long v172 = "ChapterDaVinciBuildings";
  long long v146 = &v172;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>((uint64_t)v9 + 1912, (uint64_t *)&v172, (uint64_t)&std::piecewise_construct, (uint64_t **)&v146)+ 4) = (double)((v122 - v10.__d_.__rep_) / 1000) * 0.001;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v14;
}

void sub_188FBC6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  int v47 = *(void **)(v45 - 232);
  if (v47)
  {
    *(void *)(v45 - 224) = v47;
    operator delete(v47);
    int v48 = *(void **)(v45 - 208);
    if (!v48)
    {
LABEL_3:
      int v49 = *(void **)(v45 - 176);
      if (!v49)
      {
LABEL_8:
        std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a25);
        std::vector<VMP4Material,geo::StdAllocator<VMP4Material,geo::codec::Allocator>>::~vector[abi:ne180100](&a29);
        std::vector<unsigned long,geo::StdAllocator<unsigned long,geo::codec::Allocator>>::~vector[abi:ne180100](&a33);
        geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&a45);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(v49);
      goto LABEL_8;
    }
  }
  else
  {
    int v48 = *(void **)(v45 - 208);
    if (!v48) {
      goto LABEL_3;
    }
  }
  *(void *)(v45 - 200) = v48;
  operator delete(v48);
  int v49 = *(void **)(v45 - 176);
  if (!v49) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t geo::codec::_readAnnotationLabels(void *a1, uint64_t *a2)
{
  unint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    while (*(_WORD *)(*a1 + 16 * v4) != 160)
    {
      uint64_t v4 = ++v5;
      if (v2 <= v5) {
        goto LABEL_18;
      }
    }
    uint64_t v6 = (void *)geo::codec::chapterAt((uint64_t)a1, v5, 160, *a2 + 1912);
    if (v6)
    {
      uint64_t v7 = v6;
      *(void *)uint64_t v201 = 0;
      if (geo::codec::chapterReadVarUint32(v6, &v201[1]))
      {
        if (geo::codec::chapterReadVarUint32(v7, v201))
        {
          unsigned int v200 = 0;
          if (geo::codec::chapterReadVarUint32(v7, &v200))
          {
            unsigned int v199 = 0;
            if (geo::codec::chapterReadVarUint32(v7, &v199))
            {
              unsigned int v198 = 0;
              if (geo::codec::chapterReadVarUint32(v7, &v198))
              {
                std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::codec::Allocator>>::vector((uint64_t *)&v196, v198);
                uint64_t v8 = v196;
                uint64_t v9 = v197;
                if (0xAAAAAAAAAAAAAAABLL * (v197 - v196) == v198)
                {
                  if (v196 != v197)
                  {
                    unsigned int v10 = 0;
                    while (1)
                    {
                      *uint64_t v8 = v10;
                      uint64_t v11 = v8 + 1;
                      if ((geo::codec::chapterReadVarUint32(v7, v11) & 1) == 0) {
                        break;
                      }
                      unsigned int v12 = *v11;
                      uint64_t v8 = v11 + 2;
                      v10 += v12;
                      if (v8 == v9) {
                        goto LABEL_31;
                      }
                    }
                    int v20 = 11510;
                    goto LABEL_40;
                  }
                  unsigned int v10 = 0;
LABEL_31:
                  unsigned int v195 = 0;
                  if ((geo::codec::chapterReadVarUint32(v7, &v195) & 1) == 0)
                  {
                    int v25 = (FILE *)*MEMORY[0x1E4F143C8];
                    int v20 = 11515;
                    goto LABEL_41;
                  }
                  unsigned int v194 = 0;
                  if (geo::codec::chapterReadVarUint32(v7, &v194))
                  {
                    unsigned int v21 = v194;
                    if (v194)
                    {
                      memset(v193, 0, sizeof(v193));
                      memset(v192, 0, sizeof(v192));
                      memset(v191, 0, sizeof(v191));
                      memset(v190, 0, sizeof(v190));
                      uint64_t v22 = v200;
                      int v187 = 0;
                      uint64_t v188 = 0;
                      __p = 0;
                      if (v200)
                      {
                        unint64_t v23 = (char *)operator new(2 * v200);
                        uint64_t v24 = &v23[2 * v22];
                        __p = v23;
                        uint64_t v188 = v24;
                        bzero(v23, 2 * v22);
                        int v187 = v24;
                      }
                      else
                      {
                        unint64_t v23 = 0;
                        uint64_t v24 = 0;
                      }
                      uint64_t v189 = 0;
                      if (v22 == (v24 - v23) >> 1)
                      {
                        if (geo::codec::decodeIntCompressorArray<unsigned short>(v7, v192, v201[1], v201[0], (uint64_t)&__p))
                        {
                          uint64_t v26 = v200;
                          int v183 = 0;
                          uint64_t v184 = 0;
                          BOOL v182 = 0;
                          if (v200)
                          {
                            uint64_t v27 = (char *)operator new(4 * v200);
                            uint64_t v28 = &v27[4 * v26];
                            BOOL v182 = v27;
                            uint64_t v184 = v28;
                            bzero(v27, 4 * v26);
                            int v183 = v28;
                          }
                          else
                          {
                            uint64_t v27 = 0;
                            uint64_t v28 = 0;
                          }
                          uint64_t v185 = 0;
                          if (v26 == (v28 - v27) >> 2)
                          {
                            if (geo::codec::decodeIntCompressorArray<unsigned int>(v7, v191, v201[1], v201[0], (uint64_t)&v182))
                            {
                              size_t v32 = v200;
                              int v179 = 0;
                              int v180 = 0;
                              uint64_t v178 = 0;
                              if (v200)
                              {
                                unint64_t v33 = (char *)operator new(v200);
                                unint64_t v34 = &v33[v32];
                                uint64_t v178 = v33;
                                int v180 = &v33[v32];
                                bzero(v33, v32);
                                int v179 = &v33[v32];
                              }
                              else
                              {
                                unint64_t v33 = 0;
                                unint64_t v34 = 0;
                              }
                              uint64_t v181 = 0;
                              if (v34 - v33 == v32)
                              {
                                if (geo::codec::decodeIntCompressorArray<unsigned char>(v7, v193, v201[1], v201[0], (uint64_t)&v178))
                                {
                                  size_t v37 = v199;
                                  uint64_t v175 = 0;
                                  float32x4x3_t v176 = 0;
                                  uint64_t v174 = 0;
                                  if (v199)
                                  {
                                    uint64_t v38 = (char *)operator new(v199);
                                    int v39 = &v38[v37];
                                    uint64_t v174 = v38;
                                    float32x4x3_t v176 = &v38[v37];
                                    bzero(v38, v37);
                                    uint64_t v175 = &v38[v37];
                                  }
                                  else
                                  {
                                    uint64_t v38 = 0;
                                    int v39 = 0;
                                  }
                                  unint64_t v177 = 0;
                                  if (v39 - v38 == v37)
                                  {
                                    if (geo::codec::decodeIntCompressorArray<unsigned char>(v7, v193, v201[1], v201[0], (uint64_t)&v174))
                                    {
                                      uint64_t v42 = v199;
                                      char v171 = 0;
                                      long long v172 = 0;
                                      int v170 = 0;
                                      if (v199)
                                      {
                                        int v43 = (char *)operator new(4 * v199);
                                        int v44 = &v43[4 * v42];
                                        int v170 = v43;
                                        long long v172 = v44;
                                        bzero(v43, 4 * v42);
                                        char v171 = v44;
                                      }
                                      else
                                      {
                                        int v43 = 0;
                                        int v44 = 0;
                                      }
                                      uint64_t v173 = 0;
                                      if (v42 == (v44 - v43) >> 2)
                                      {
                                        if (geo::codec::decodeIntCompressorArray<unsigned int>(v7, v191, v201[1], v201[0], (uint64_t)&v170))
                                        {
                                          size_t v47 = v199;
                                          uint64_t v167 = 0;
                                          int v168 = 0;
                                          long long v166 = 0;
                                          if (v199)
                                          {
                                            int v48 = (char *)operator new(v199);
                                            int v49 = &v48[v47];
                                            long long v166 = v48;
                                            int v168 = &v48[v47];
                                            bzero(v48, v47);
                                            uint64_t v167 = &v48[v47];
                                          }
                                          else
                                          {
                                            int v48 = 0;
                                            int v49 = 0;
                                          }
                                          uint64_t v169 = 0;
                                          if (v49 - v48 == v47)
                                          {
                                            if (geo::codec::decodeIntCompressorArray<unsigned char>(v7, v193, v201[1], v201[0], (uint64_t)&v166))
                                            {
                                              size_t v52 = v195;
                                              float32x4_t v163 = 0;
                                              uint64_t v164 = 0;
                                              float32x4_t v162 = 0;
                                              if (v195)
                                              {
                                                unint64_t v53 = (char *)operator new(v195);
                                                uint64_t v54 = &v53[v52];
                                                float32x4_t v162 = v53;
                                                uint64_t v164 = &v53[v52];
                                                bzero(v53, v52);
                                                float32x4_t v163 = &v53[v52];
                                              }
                                              else
                                              {
                                                unint64_t v53 = 0;
                                                uint64_t v54 = 0;
                                              }
                                              uint64_t v165 = 0;
                                              if (v54 - v53 == v52)
                                              {
                                                if (geo::codec::decodeIntCompressorArray<unsigned char>(v7, v193, v201[1], v201[0], (uint64_t)&v162))
                                                {
                                                  uint64_t v57 = v195;
                                                  long long v159 = 0;
                                                  uint64_t v160 = 0;
                                                  int v158 = 0;
                                                  if (v195)
                                                  {
                                                    int v58 = (char *)operator new(4 * v195);
                                                    unsigned int v59 = &v58[4 * v57];
                                                    int v158 = v58;
                                                    uint64_t v160 = v59;
                                                    bzero(v58, 4 * v57);
                                                    long long v159 = v59;
                                                  }
                                                  else
                                                  {
                                                    int v58 = 0;
                                                    unsigned int v59 = 0;
                                                  }
                                                  uint64_t v161 = 0;
                                                  if (v57 == (v59 - v58) >> 2)
                                                  {
                                                    if (geo::codec::decodeIntCompressorArray<unsigned int>(v7, v191, v201[1], v201[0], (uint64_t)&v158))
                                                    {
                                                      uint64_t v62 = v195;
                                                      float64x2_t v155 = 0;
                                                      float64x2_t v156 = 0;
                                                      unsigned int v154 = 0;
                                                      if (v195)
                                                      {
                                                        uint64_t v63 = (char *)operator new(2 * v195);
                                                        double v64 = &v63[2 * v62];
                                                        unsigned int v154 = v63;
                                                        float64x2_t v156 = v64;
                                                        bzero(v63, 2 * v62);
                                                        float64x2_t v155 = v64;
                                                      }
                                                      else
                                                      {
                                                        uint64_t v63 = 0;
                                                        double v64 = 0;
                                                      }
                                                      uint64_t v157 = 0;
                                                      if (v62 == (v64 - v63) >> 1)
                                                      {
                                                        if (geo::codec::decodeIntCompressorArray<unsigned short>(v7, v192, v201[1], v201[0], (uint64_t)&v154))
                                                        {
                                                          std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::vector((geo::codec::Allocator *)v153, v10);
                                                          if (v10 != (v153[1] - v153[0]) >> 3)
                                                          {
                                                            unsigned int v82 = (FILE *)*MEMORY[0x1E4F143C8];
                                                            int v83 = 11563;
LABEL_149:
                                                            fprintf(v82, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v83);
                                                            int v31 = 6;
LABEL_153:
                                                            std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](v153);
LABEL_154:
                                                            if (v154)
                                                            {
                                                              float64x2_t v155 = v154;
                                                              operator delete(v154);
                                                            }
                                                            goto LABEL_124;
                                                          }
                                                          uint64x2_t v67 = v196;
                                                          float64x2_t v68 = v197;
                                                          if (v196 != v197)
                                                          {
                                                            while ((geo::codec::decodeIntCompressorArray<long long>(v7, v190, v201[1], v201[0], v67[1], (uint64x2_t *)(v153[0] + 8 * *v67)) & 1) != 0)
                                                            {
                                                              v67 += 3;
                                                              if (v67 == v68) {
                                                                goto LABEL_133;
                                                              }
                                                            }
                                                            unsigned int v82 = (FILE *)*MEMORY[0x1E4F143C8];
                                                            int v83 = 11565;
                                                            goto LABEL_149;
                                                          }
LABEL_133:
                                                          std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)v152, v200);
                                                          uint64_t v69 = (v152[1] - v152[0]) >> 2;
                                                          if (v69 == v200)
                                                          {
                                                            uint64_t v151 = 0;
                                                            if (geo::codec::_makeSpaceForLabels((geo::codec::Allocator *)v69, &v151, a2))
                                                            {
                                                              unsigned int v70 = v200;
                                                              if (v200)
                                                              {
                                                                unint64_t v71 = 0;
                                                                uint64_t v72 = *(void *)(*a2 + 856);
                                                                unint64_t v149 = *(void *)(*a2 + 864) - v72;
                                                                uint64_t v73 = v151;
                                                                uint64_t v74 = 24 * v151;
                                                                while (1)
                                                                {
                                                                  uint64_t v75 = v185++;
                                                                  unint64_t v76 = *((unsigned int *)v182 + v75);
                                                                  if (v149 <= v76)
                                                                  {
                                                                    unsigned int v84 = (FILE *)*MEMORY[0x1E4F143C8];
                                                                    int v85 = 11578;
                                                                    goto LABEL_151;
                                                                  }
                                                                  uint64_t v77 = *a2;
                                                                  if (v73 + v71 >= *(void *)(*a2 + 1056)) {
                                                                    break;
                                                                  }
                                                                  uint64_t v78 = *(void *)(v77 + 1048) + v74;
                                                                  *(void *)uint64_t v78 = v72 + v76;
                                                                  *(_DWORD *)(v78 + 16) = 0;
                                                                  *(void *)(v78 + 8) = geo::codec::langLocaleForOffset(v76, *(const void **)(v77 + 888), *(void *)(v77 + 896));
                                                                  *(_DWORD *)(v152[0] + 4 * v71) = v73 + v71;
                                                                  ++v71;
                                                                  unsigned int v70 = v200;
                                                                  v74 += 24;
                                                                  if (v71 >= v200) {
                                                                    goto LABEL_140;
                                                                  }
                                                                }
                                                                unsigned int v84 = (FILE *)*MEMORY[0x1E4F143C8];
                                                                int v85 = 11579;
                                                                goto LABEL_151;
                                                              }
LABEL_140:
                                                              std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::codec::Allocator>>::vector(v150, v70);
                                                              if (0xCCCCCCCCCCCCCCCDLL * ((v150[1] - v150[0]) >> 3) != v200)
                                                              {
                                                                int v86 = 11590;
                                                                goto LABEL_206;
                                                              }
                                                              if (v200)
                                                              {
                                                                for (unint64_t i = 0; i < v200; ++i)
                                                                {
                                                                  uint64_t v87 = (char *)v150[0] + 40 * i;
                                                                  uint64_t v88 = v189++;
                                                                  *((_WORD *)v87 + 2) = *((_WORD *)__p + v88);
                                                                  *(_DWORD *)uint64_t v87 = *(_DWORD *)(v152[0] + 4 * i);
                                                                  uint64_t v89 = v181++;
                                                                  unint64_t v90 = *((unsigned __int8 *)v178 + v89);
                                                                  uint64_t v91 = (uint64_t *)(v87 + 8);
                                                                  std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplateValue,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplateValue,geo::codec::Allocator>>::resize((uint64_t)(v87 + 8), v90);
                                                                  uint64_t v92 = *v91;
                                                                  uint64_t v93 = v91[1];
                                                                  if (v90 != (v93 - *v91) >> 3)
                                                                  {
                                                                    int v86 = 11597;
                                                                    goto LABEL_206;
                                                                  }
                                                                  if (v92 != v93)
                                                                  {
                                                                    uint64_t v94 = 0;
                                                                    unsigned int v95 = v198;
                                                                    unint64_t v96 = v177;
                                                                    uint64_t v97 = v169;
                                                                    if (v177 <= v175 - (unsigned char *)v174) {
                                                                      unint64_t v98 = v175 - (unsigned char *)v174;
                                                                    }
                                                                    else {
                                                                      unint64_t v98 = v177;
                                                                    }
                                                                    float32x4_t v99 = (char *)v166 + v169;
                                                                    uint64_t v100 = (char *)v170 + 4 * v173;
                                                                    uint64_t v101 = v173 + 1;
                                                                    uint64_t v102 = (char *)v174 + v177;
                                                                    unint64_t v103 = v177 - v98;
                                                                    do
                                                                    {
                                                                      if (!(v103 + v94))
                                                                      {
                                                                        int v86 = 11599;
                                                                        goto LABEL_206;
                                                                      }
                                                                      unint64_t v177 = v96 + v94 + 1;
                                                                      *(unsigned char *)(v92 + 1) = v102[v94];
                                                                      uint64_t v173 = v101 + v94;
                                                                      *(_DWORD *)(v92 + 4) = *(_DWORD *)&v100[4 * v94];
                                                                      uint64_t v169 = v97 + v94 + 1;
                                                                      unsigned int v104 = v99[v94];
                                                                      *(unsigned char *)uint64_t v92 = v104;
                                                                      if (v95 <= v104)
                                                                      {
                                                                        int v86 = 11603;
                                                                        goto LABEL_206;
                                                                      }
                                                                      v92 += 8;
                                                                      ++v94;
                                                                    }
                                                                    while (v92 != v93);
                                                                  }
                                                                }
                                                              }
                                                              std::vector<GeoCodecsAnnotation,geo::StdAllocator<GeoCodecsAnnotation,geo::codec::Allocator>>::resize(*a2 + 536, v195);
                                                              if (v195 != (uint64_t)(*(void *)(*a2 + 544)
                                                                                   - *(void *)(*a2 + 536)) >> 4)
                                                              {
                                                                int v86 = 11608;
                                                                goto LABEL_206;
                                                              }
                                                              std::vector<GeoCodecsAnnotationValue,geo::StdAllocator<GeoCodecsAnnotationValue,geo::codec::Allocator>>::resize(*a2 + 568, v10);
                                                              uint64_t v106 = (void *)*a2;
                                                              uint64_t v107 = *(void *)(*a2 + 568);
                                                              if (v10 != (*(void *)(*a2 + 576) - v107) >> 4)
                                                              {
                                                                int v86 = 11611;
                                                                goto LABEL_206;
                                                              }
                                                              unsigned int v108 = v195;
                                                              if (!v195)
                                                              {
LABEL_194:
                                                                if (v108 != v10)
                                                                {
                                                                  int v86 = 11663;
                                                                  goto LABEL_206;
                                                                }
                                                                int v31 = 0;
LABEL_207:
                                                                std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)v150);
                                                                goto LABEL_152;
                                                              }
                                                              unint64_t v109 = 0;
                                                              unsigned int v108 = 0;
                                                              uint64_t v110 = v106[67];
                                                              float32x4_t v111 = v150[0];
                                                              uint64_t v112 = (uint64_t)v196;
                                                              uint64_t v114 = v161;
                                                              float32x4_t v113 = (unsigned __int8 *)v162;
                                                              uint64_t v115 = v165;
                                                              uint64_t v117 = v157;
                                                              uint64_t v116 = (unsigned int *)v158;
                                                              unsigned int v118 = (unsigned __int16 *)v154;
                                                              uint64_t v119 = v107 + 8;
                                                              double v120 = 1.0 / (double)v21;
                                                              while (1)
                                                              {
                                                                uint64_t v121 = v115 + 1;
                                                                uint64_t v165 = v115 + 1;
                                                                int v122 = v113[v115];
                                                                uint64_t v123 = v114 + 1;
                                                                uint64_t v161 = v114 + 1;
                                                                unint64_t v124 = v116[v114];
                                                                if (v122 == 1)
                                                                {
                                                                  uint64_t v130 = v106[4];
                                                                  if (0xCF3CF3CF3CF3CF3DLL * ((v106[5] - v130) >> 3) <= v124)
                                                                  {
                                                                    int v86 = 11634;
                                                                    goto LABEL_206;
                                                                  }
                                                                  uint64_t v131 = v130 + 168 * v124;
                                                                  int v132 = *(unsigned __int8 *)(v131 + 150);
                                                                  int v127 = (unsigned char *)(v131 + 150);
                                                                  char v128 = v132;
                                                                  if (!v132) {
                                                                    *(_DWORD *)(v130 + 168 * v124 + 140) = v109;
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  if (v122) {
                                                                    goto LABEL_183;
                                                                  }
                                                                  uint64_t v125 = v106[63];
                                                                  if (0x6DB6DB6DB6DB6DB7 * ((v106[64] - v125) >> 5) <= v124)
                                                                  {
                                                                    int v86 = 11623;
                                                                    goto LABEL_206;
                                                                  }
                                                                  uint64_t v126 = v125 + 224 * v124;
                                                                  int v129 = *(unsigned __int8 *)(v126 + 204);
                                                                  int v127 = (unsigned char *)(v126 + 204);
                                                                  char v128 = v129;
                                                                  if (!v129) {
                                                                    *(_DWORD *)(v125 + 224 * v124 + 200) = v109;
                                                                  }
                                                                }
                                                                *int v127 = v128 + 1;
LABEL_183:
                                                                uint64_t v133 = v117 + 1;
                                                                uint64_t v157 = v117 + 1;
                                                                unsigned int v134 = v118[v117];
                                                                if (v200 <= v134)
                                                                {
                                                                  int v86 = 11648;
                                                                  goto LABEL_206;
                                                                }
                                                                uint64_t v135 = (char *)v111 + 40 * v134;
                                                                *(_DWORD *)(v110 + 16 * v109) = *(_DWORD *)v135;
                                                                int v136 = *((unsigned __int16 *)v135 + 2);
                                                                uint64_t v137 = v110 + 16 * v109;
                                                                uint64_t v138 = (unsigned __int8 *)*((void *)v135 + 1);
                                                                uint64_t v139 = *((void *)v135 + 2) - (void)v138;
                                                                *(unsigned char *)(v137 + 12) = (unint64_t)v139 >> 3;
                                                                uint64_t v140 = (unsigned __int8 *)(v137 + 12);
                                                                *((_DWORD *)v140 - 2) = v136;
                                                                *((_DWORD *)v140 - 1) = v108;
                                                                if (v139)
                                                                {
                                                                  unint64_t v141 = v139 >> 3;
                                                                  uint64_t v142 = v153[0];
                                                                  if (v141 <= 1) {
                                                                    uint64_t v143 = 1;
                                                                  }
                                                                  else {
                                                                    uint64_t v143 = v141;
                                                                  }
                                                                  uint64_t v144 = (double *)(v119 + 16 * v108);
                                                                  while (1)
                                                                  {
                                                                    *((unsigned char *)v144 - 8) = v138[1];
                                                                    unsigned int v145 = (int *)(v112 + 12 * *v138);
                                                                    unsigned int v146 = v145[2];
                                                                    if (v146 >= v145[1]) {
                                                                      break;
                                                                    }
                                                                    int v147 = *v145;
                                                                    *(_DWORD *)(v112 + 12 * *v138 + 8) = v146 + 1;
                                                                    LODWORD(v105) = *((_DWORD *)v138 + 1);
                                                                    double v105 = 1000.0
                                                                         * (double)*(unint64_t *)&v105
                                                                         * v120;
                                                                    *uint64_t v144 = (double)*(uint64_t *)(v142
                                                                                               + 8 * (v147 + v146))
                                                                          * v105;
                                                                    v144 += 2;
                                                                    v138 += 8;
                                                                    if (!--v143)
                                                                    {
                                                                      int v148 = *v140;
                                                                      goto LABEL_193;
                                                                    }
                                                                  }
                                                                  int v86 = 11658;
LABEL_206:
                                                                  fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v86);
                                                                  int v31 = 6;
                                                                  goto LABEL_207;
                                                                }
                                                                int v148 = 0;
LABEL_193:
                                                                v108 += v148;
                                                                ++v109;
                                                                uint64_t v117 = v133;
                                                                uint64_t v114 = v123;
                                                                uint64_t v115 = v121;
                                                                if (v109 >= v195) {
                                                                  goto LABEL_194;
                                                                }
                                                              }
                                                            }
                                                            unsigned int v84 = (FILE *)*MEMORY[0x1E4F143C8];
                                                            int v85 = 11572;
                                                          }
                                                          else
                                                          {
                                                            unsigned int v84 = (FILE *)*MEMORY[0x1E4F143C8];
                                                            int v85 = 11570;
                                                          }
LABEL_151:
                                                          fprintf(v84, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v85);
                                                          int v31 = 6;
LABEL_152:
                                                          std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100](v152);
                                                          goto LABEL_153;
                                                        }
                                                        float v80 = (FILE *)*MEMORY[0x1E4F143C8];
                                                        int v81 = 11560;
                                                      }
                                                      else
                                                      {
                                                        float v80 = (FILE *)*MEMORY[0x1E4F143C8];
                                                        int v81 = 11559;
                                                      }
                                                      fprintf(v80, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v81);
                                                      int v31 = 6;
                                                      goto LABEL_154;
                                                    }
                                                    double v65 = (FILE *)*MEMORY[0x1E4F143C8];
                                                    int v66 = 11556;
                                                  }
                                                  else
                                                  {
                                                    double v65 = (FILE *)*MEMORY[0x1E4F143C8];
                                                    int v66 = 11555;
                                                  }
                                                  fprintf(v65, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v66);
                                                  int v31 = 6;
LABEL_124:
                                                  if (v158)
                                                  {
                                                    long long v159 = v158;
                                                    operator delete(v158);
                                                  }
                                                  goto LABEL_114;
                                                }
                                                int v60 = (FILE *)*MEMORY[0x1E4F143C8];
                                                int v61 = 11552;
                                              }
                                              else
                                              {
                                                int v60 = (FILE *)*MEMORY[0x1E4F143C8];
                                                int v61 = 11551;
                                              }
                                              fprintf(v60, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v61);
                                              int v31 = 6;
LABEL_114:
                                              if (v162)
                                              {
                                                float32x4_t v163 = (char *)v162;
                                                operator delete(v162);
                                              }
                                              goto LABEL_104;
                                            }
                                            uint64_t v55 = (FILE *)*MEMORY[0x1E4F143C8];
                                            int v56 = 11548;
                                          }
                                          else
                                          {
                                            uint64_t v55 = (FILE *)*MEMORY[0x1E4F143C8];
                                            int v56 = 11547;
                                          }
                                          fprintf(v55, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v56);
                                          int v31 = 6;
LABEL_104:
                                          if (v166)
                                          {
                                            uint64_t v167 = (char *)v166;
                                            operator delete(v166);
                                          }
                                          goto LABEL_94;
                                        }
                                        uint64_t v50 = (FILE *)*MEMORY[0x1E4F143C8];
                                        int v51 = 11544;
                                      }
                                      else
                                      {
                                        uint64_t v50 = (FILE *)*MEMORY[0x1E4F143C8];
                                        int v51 = 11543;
                                      }
                                      fprintf(v50, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v51);
                                      int v31 = 6;
LABEL_94:
                                      if (v170)
                                      {
                                        char v171 = v170;
                                        operator delete(v170);
                                      }
                                      goto LABEL_84;
                                    }
                                    uint64_t v45 = (FILE *)*MEMORY[0x1E4F143C8];
                                    int v46 = 11540;
                                  }
                                  else
                                  {
                                    uint64_t v45 = (FILE *)*MEMORY[0x1E4F143C8];
                                    int v46 = 11539;
                                  }
                                  fprintf(v45, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v46);
                                  int v31 = 6;
LABEL_84:
                                  if (v174)
                                  {
                                    uint64_t v175 = (char *)v174;
                                    operator delete(v174);
                                  }
                                  goto LABEL_74;
                                }
                                int v40 = (FILE *)*MEMORY[0x1E4F143C8];
                                int v41 = 11536;
                              }
                              else
                              {
                                int v40 = (FILE *)*MEMORY[0x1E4F143C8];
                                int v41 = 11535;
                              }
                              fprintf(v40, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v41);
                              int v31 = 6;
LABEL_74:
                              if (v178)
                              {
                                int v179 = (char *)v178;
                                operator delete(v178);
                              }
                              goto LABEL_64;
                            }
                            unint64_t v35 = (FILE *)*MEMORY[0x1E4F143C8];
                            int v36 = 11532;
                          }
                          else
                          {
                            unint64_t v35 = (FILE *)*MEMORY[0x1E4F143C8];
                            int v36 = 11531;
                          }
                          fprintf(v35, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v36);
                          int v31 = 6;
LABEL_64:
                          if (v182)
                          {
                            int v183 = v182;
                            operator delete(v182);
                          }
LABEL_51:
                          if (__p)
                          {
                            int v187 = __p;
                            operator delete(__p);
                          }
                          mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v190);
                          mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v191);
                          mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v192);
                          mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)v193);
                          BOOL v17 = std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v196);
                          if (v31 != 6)
                          {
                            char v13 = 1;
                            if (!*(unsigned char *)v7) {
                              goto LABEL_28;
                            }
                            goto LABEL_27;
                          }
LABEL_26:
                          char v13 = 0;
                          if (!*(unsigned char *)v7)
                          {
LABEL_28:
                            uint64_t v19 = geo::codec::Allocator::instance((geo::codec::Allocator *)v17);
                            (*(void (**)(uint64_t, void *, void))(*(void *)v19 + 40))(v19, v7, 0);
                            return v13 & 1;
                          }
LABEL_27:
                          uint64_t v18 = geo::codec::Allocator::instance((geo::codec::Allocator *)v17);
                          BOOL v17 = (uint64_t *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v18 + 40))(v18, v7[5], 0);
                          goto LABEL_28;
                        }
                        uint64_t v29 = (FILE *)*MEMORY[0x1E4F143C8];
                        int v30 = 11528;
                      }
                      else
                      {
                        uint64_t v29 = (FILE *)*MEMORY[0x1E4F143C8];
                        int v30 = 11527;
                      }
                      fprintf(v29, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v30);
                      int v31 = 6;
                      goto LABEL_51;
                    }
                    int v20 = 11518;
                  }
                  else
                  {
                    int v20 = 11517;
                  }
                }
                else
                {
                  int v20 = 11506;
                }
LABEL_40:
                int v25 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_41:
                fprintf(v25, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v20);
                BOOL v17 = std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v196);
                char v13 = 0;
                if (!*(unsigned char *)v7) {
                  goto LABEL_28;
                }
                goto LABEL_27;
              }
              uint64_t v15 = (FILE *)*MEMORY[0x1E4F143C8];
              int v16 = 11504;
            }
            else
            {
              uint64_t v15 = (FILE *)*MEMORY[0x1E4F143C8];
              int v16 = 11500;
            }
          }
          else
          {
            uint64_t v15 = (FILE *)*MEMORY[0x1E4F143C8];
            int v16 = 11498;
          }
        }
        else
        {
          uint64_t v15 = (FILE *)*MEMORY[0x1E4F143C8];
          int v16 = 11495;
        }
      }
      else
      {
        uint64_t v15 = (FILE *)*MEMORY[0x1E4F143C8];
        int v16 = 11494;
      }
      BOOL v17 = (uint64_t *)fprintf(v15, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v16);
      goto LABEL_26;
    }
  }
LABEL_18:
  char v13 = 1;
  return v13 & 1;
}

void sub_188FBD7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::codec::Allocator>>::~vector[abi:ne180100](&a12);
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100](&a17);
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](&a21);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v63 = a29;
    if (!a29)
    {
LABEL_3:
      double v64 = a33;
      if (!a33) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v63 = a29;
    if (!a29) {
      goto LABEL_3;
    }
  }
  a30 = (uint64_t)v63;
  operator delete(v63);
  double v64 = a33;
  if (!a33)
  {
LABEL_4:
    double v65 = a37;
    if (!a37) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  a34 = (uint64_t)v64;
  operator delete(v64);
  double v65 = a37;
  if (!a37)
  {
LABEL_5:
    int v66 = a41;
    if (!a41) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  a38 = (uint64_t)v65;
  operator delete(v65);
  int v66 = a41;
  if (!a41)
  {
LABEL_6:
    uint64x2_t v67 = a45;
    if (!a45) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  a42 = (uint64_t)v66;
  operator delete(v66);
  uint64x2_t v67 = a45;
  if (!a45)
  {
LABEL_7:
    float64x2_t v68 = a49;
    if (!a49) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  a46 = (uint64_t)v67;
  operator delete(v67);
  float64x2_t v68 = a49;
  if (!a49)
  {
LABEL_8:
    uint64_t v69 = a53;
    if (!a53) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  a50 = (uint64_t)v68;
  operator delete(v68);
  uint64_t v69 = a53;
  if (!a53)
  {
LABEL_9:
    unsigned int v70 = a57;
    if (!a57)
    {
LABEL_20:
      mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a61);
      mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v61 - 256);
      mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v61 - 224);
      mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor(v61 - 192);
      std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v61 - 152));
      _Unwind_Resume(a1);
    }
LABEL_19:
    a58 = (uint64_t)v70;
    operator delete(v70);
    goto LABEL_20;
  }
LABEL_18:
  a54 = (uint64_t)v69;
  operator delete(v69);
  unsigned int v70 = a57;
  if (!a57) {
    goto LABEL_20;
  }
  goto LABEL_19;
}

void sub_188FBDA18(_Unwind_Exception *a1)
{
  std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_188FBDA2C(_Unwind_Exception *a1)
{
  std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_188FBDA40(_Unwind_Exception *a1)
{
  std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 152));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readPOIMzrOverrides(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    goto LABEL_8;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 151)
  {
    uint64_t v4 = ++v5;
    if (v2 <= v5) {
      goto LABEL_8;
    }
  }
  uint64_t v6 = geo::codec::chapterAt((uint64_t)a1, v5, 151, *a2 + 1912);
  if (!v6 || (uint64_t v7 = (void *)v6, *(_DWORD *)(v6 + 64) < 2u))
  {
LABEL_8:
    char v8 = 1;
    return v8 & 1;
  }
  uint64_t v11 = *a2;
  unsigned int v10 = (std::__shared_weak_count *)a2[1];
  *(void *)&__sz[1] = "ChapterPOIMzrOverrides";
  uint64_t v97 = v11;
  unint64_t v98 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v12.__d_.__rep_;
  LODWORD(v100) = 0;
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v100) & 1) == 0)
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 6508;
    goto LABEL_129;
  }
  __sz[0] = 0;
  if ((geo::codec::chapterReadVarUint32(v7, __sz) & 1) == 0)
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 6511;
    goto LABEL_129;
  }
  unsigned int v94 = 0;
  unsigned int v95 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v95) & 1) == 0)
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 6515;
    goto LABEL_129;
  }
  if ((geo::codec::chapterReadVarUint32(v7, &v94) & 1) == 0)
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 6516;
    goto LABEL_129;
  }
  unsigned int v93 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v93) & 1) == 0)
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 6519;
    goto LABEL_129;
  }
  if (!v93) {
    goto LABEL_47;
  }
  unsigned int v92 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v92) & 1) == 0)
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 6523;
    goto LABEL_129;
  }
  uint64_t v13 = v92;
  uint64_t v14 = v7[6];
  unint64_t v15 = v14 + v92;
  if (v15 > v7[7])
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 6526;
LABEL_129:
    uint64_t v32 = fprintf(v16, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v17);
    goto LABEL_130;
  }
  uint64_t v18 = (void *)v7[5];
  v7[6] = v15;
  size_t v19 = __sz[0];
  if (__sz[0])
  {
    __pc = v18;
    int v20 = (int8x16_t *)operator new(__sz[0]);
    bzero(v20, v19);
    unsigned int v21 = v20;
    uint64_t v18 = __pc;
  }
  else
  {
    unsigned int v21 = 0;
  }
  long long v90 = 0u;
  long long v91 = 0u;
  uint64_t v22 = v21;
  if (mgcl::ints::IntDecompressor<BOOL>::decompress((uint64_t *)&v90, (unsigned __int8 *)v18 + v14, v13, v95, v94, v19, v21))
  {
    int v23 = 6531;
    goto LABEL_43;
  }
  uint64_t v24 = __sz[0];
  uint64_t v25 = *(void *)(*a2 + 504);
  if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(*a2 + 512) - v25) >> 5) != __sz[0])
  {
    int v23 = 6533;
LABEL_43:
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v23);
    int v31 = 6;
    uint64_t v32 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v90);
    if (!v22) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  if (__sz[0])
  {
    if (__sz[0] < 0x10
      || v25 + 168 < (unint64_t)v22->u64 + __sz[0]
      && (unint64_t)v22 < v25 + 224 * (unint64_t)__sz[0] - 52)
    {
      uint64_t v26 = 0;
LABEL_38:
      uint64_t v27 = v24 - v26;
      uint64_t v28 = (_DWORD *)(v25 + 224 * v26 + 168);
      uint64_t v29 = &v22->u8[v26];
      do
      {
        if (*v29++) {
          *uint64_t v28 = 1120403456;
        }
        v28 += 56;
        --v27;
      }
      while (v27);
LABEL_104:
      mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v90);
      int v31 = 0;
      goto LABEL_44;
    }
    uint64_t v26 = __sz[0] & 0xFFFFFFF8;
    uint64_t v50 = (int8x8_t *)v22;
    uint64_t v51 = v26;
    size_t v52 = *(_DWORD **)(*a2 + 504);
    while (1)
    {
      int8x8_t v53 = vtst_s8(*v50, *v50);
      if (v53.i8[0])
      {
        v52[42] = 1120403456;
        if ((v53.i8[1] & 1) == 0) {
          goto LABEL_88;
        }
      }
      else if ((v53.i8[1] & 1) == 0)
      {
LABEL_88:
        if (v53.i8[2]) {
          goto LABEL_89;
        }
        goto LABEL_97;
      }
      v52[98] = 1120403456;
      if (v53.i8[2])
      {
LABEL_89:
        v52[154] = 1120403456;
        if ((v53.i8[3] & 1) == 0) {
          goto LABEL_90;
        }
        goto LABEL_98;
      }
LABEL_97:
      if ((v53.i8[3] & 1) == 0)
      {
LABEL_90:
        if (v53.i8[4]) {
          goto LABEL_91;
        }
        goto LABEL_99;
      }
LABEL_98:
      v52[210] = 1120403456;
      if (v53.i8[4])
      {
LABEL_91:
        v52[266] = 1120403456;
        if ((v53.i8[5] & 1) == 0) {
          goto LABEL_92;
        }
        goto LABEL_100;
      }
LABEL_99:
      if ((v53.i8[5] & 1) == 0)
      {
LABEL_92:
        if (v53.i8[6]) {
          goto LABEL_93;
        }
        goto LABEL_101;
      }
LABEL_100:
      v52[322] = 1120403456;
      if (v53.i8[6])
      {
LABEL_93:
        v52[378] = 1120403456;
        if (v53.i8[7]) {
          goto LABEL_102;
        }
        goto LABEL_85;
      }
LABEL_101:
      if (v53.i8[7]) {
LABEL_102:
      }
        v52[434] = 1120403456;
LABEL_85:
      v52 += 448;
      ++v50;
      v51 -= 8;
      if (!v51)
      {
        if (v26 == v24) {
          goto LABEL_104;
        }
        goto LABEL_38;
      }
    }
  }
  int v31 = 0;
  uint64_t v32 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v90);
  if (v22) {
LABEL_44:
  }
    operator delete(v22);
LABEL_45:
  if (v31) {
    goto LABEL_130;
  }
LABEL_47:
  unsigned int v89 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v89) & 1) == 0)
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 6543;
    goto LABEL_129;
  }
  if (!v89) {
    goto LABEL_73;
  }
  unsigned int v92 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v92) & 1) == 0)
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 6547;
    goto LABEL_129;
  }
  uint64_t v33 = v7[6];
  unint64_t v34 = v33 + v92;
  if (v34 > v7[7])
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 6550;
    goto LABEL_129;
  }
  uint64_t __p = v92;
  uint64_t v35 = v7[5];
  v7[6] = v34;
  unint64_t v81 = __sz[0];
  if (__sz[0])
  {
    size_t v36 = 2 * __sz[0];
    size_t v37 = (uint16x8_t *)operator new(v36);
    bzero(v37, v36);
  }
  else
  {
    size_t v37 = 0;
  }
  long long v90 = 0u;
  long long v91 = 0u;
  if (mgcl::ints::IntDecompressor<unsigned short>::decompress((uint64_t *)&v90, (unsigned __int8 *)(v35 + v33), __p, v95, v94, v81, v37))
  {
    int v38 = 6555;
    goto LABEL_69;
  }
  uint64_t v39 = __sz[0];
  uint64_t v40 = *(void *)(*a2 + 504);
  if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(*a2 + 512) - v40) >> 5) != __sz[0])
  {
    int v38 = 6557;
LABEL_69:
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v38);
    int v44 = 6;
    uint64_t v32 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v90);
    if (!v37) {
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  if (__sz[0])
  {
    int v41 = (float *)(v40 + 168);
    uint64_t v42 = v37;
    float v43 = 1.0 / (float)v100;
    do
    {
      if (*v41 != 100.0 && v42->i16[0]) {
        *int v41 = (float)v42->u16[0] * v43;
      }
      uint64_t v42 = (uint16x8_t *)((char *)v42 + 2);
      v41 += 56;
      --v39;
    }
    while (v39);
  }
  int v44 = 0;
  uint64_t v32 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v90);
  if (v37) {
LABEL_70:
  }
    operator delete(v37);
LABEL_71:
  if (v44) {
    goto LABEL_130;
  }
LABEL_73:
  unsigned int v88 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v88) & 1) == 0)
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 6567;
    goto LABEL_129;
  }
  if (!v88) {
    goto LABEL_122;
  }
  unsigned int v92 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v92) & 1) == 0)
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 6571;
    goto LABEL_129;
  }
  uint64_t v45 = v92;
  uint64_t v46 = v7[6];
  unint64_t v47 = v46 + v92;
  if (v47 > v7[7])
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 6574;
    goto LABEL_129;
  }
  uint64_t v48 = v7[5];
  v7[6] = v47;
  size_t v49 = __sz[0];
  if (__sz[0])
  {
    __pa = (int8x16_t *)operator new(__sz[0]);
    bzero(__pa, v49);
  }
  else
  {
    __pa = 0;
  }
  long long v90 = 0u;
  long long v91 = 0u;
  if (mgcl::ints::IntDecompressor<BOOL>::decompress((uint64_t *)&v90, (unsigned __int8 *)(v48 + v46), v45, v95, v94, v49, __pa))
  {
    int v54 = 6579;
    goto LABEL_119;
  }
  uint64_t v55 = __sz[0];
  uint64_t v56 = *(void *)(*a2 + 504);
  if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(*a2 + 512) - v56) >> 5) != __sz[0])
  {
    int v54 = 6581;
LABEL_119:
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v54);
    int v62 = 6;
    uint64_t v32 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v90);
    if (!__pa) {
      goto LABEL_121;
    }
    goto LABEL_120;
  }
  if (__sz[0])
  {
    if (__sz[0] < 0x10
      || v56 + 172 < (unint64_t)__pa->u64 + __sz[0]
      && (unint64_t)__pa < v56 + 224 * (unint64_t)__sz[0] - 48)
    {
      uint64_t v57 = 0;
LABEL_114:
      uint64_t v58 = v55 - v57;
      unsigned int v59 = (_DWORD *)(v56 + 224 * v57 + 172);
      int v60 = &__pa->u8[v57];
      do
      {
        if (*v60++) {
          *unsigned int v59 = 1120403456;
        }
        v59 += 56;
        --v58;
      }
      while (v58);
LABEL_177:
      mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v90);
      int v62 = 0;
      goto LABEL_120;
    }
    uint64_t v57 = __sz[0] & 0xFFFFFFF8;
    uint64_t v77 = (int8x8_t *)__pa;
    uint64_t v78 = v57;
    float v79 = *(_DWORD **)(*a2 + 504);
    while (1)
    {
      int8x8_t v80 = vtst_s8(*v77, *v77);
      if (v80.i8[0])
      {
        v79[43] = 1120403456;
        if ((v80.i8[1] & 1) == 0) {
          goto LABEL_161;
        }
      }
      else if ((v80.i8[1] & 1) == 0)
      {
LABEL_161:
        if (v80.i8[2]) {
          goto LABEL_162;
        }
        goto LABEL_170;
      }
      v79[99] = 1120403456;
      if (v80.i8[2])
      {
LABEL_162:
        v79[155] = 1120403456;
        if ((v80.i8[3] & 1) == 0) {
          goto LABEL_163;
        }
        goto LABEL_171;
      }
LABEL_170:
      if ((v80.i8[3] & 1) == 0)
      {
LABEL_163:
        if (v80.i8[4]) {
          goto LABEL_164;
        }
        goto LABEL_172;
      }
LABEL_171:
      v79[211] = 1120403456;
      if (v80.i8[4])
      {
LABEL_164:
        v79[267] = 1120403456;
        if ((v80.i8[5] & 1) == 0) {
          goto LABEL_165;
        }
        goto LABEL_173;
      }
LABEL_172:
      if ((v80.i8[5] & 1) == 0)
      {
LABEL_165:
        if (v80.i8[6]) {
          goto LABEL_166;
        }
        goto LABEL_174;
      }
LABEL_173:
      v79[323] = 1120403456;
      if (v80.i8[6])
      {
LABEL_166:
        v79[379] = 1120403456;
        if (v80.i8[7]) {
          goto LABEL_175;
        }
        goto LABEL_158;
      }
LABEL_174:
      if (v80.i8[7]) {
LABEL_175:
      }
        v79[435] = 1120403456;
LABEL_158:
      v79 += 448;
      ++v77;
      v78 -= 8;
      if (!v78)
      {
        if (v57 == v55) {
          goto LABEL_177;
        }
        goto LABEL_114;
      }
    }
  }
  int v62 = 0;
  uint64_t v32 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v90);
  if (__pa) {
LABEL_120:
  }
    operator delete(__pa);
LABEL_121:
  if (v62) {
    goto LABEL_130;
  }
LABEL_122:
  unsigned int v87 = 0;
  uint64_t v32 = geo::codec::chapterReadVarUint32(v7, &v87);
  if ((v32 & 1) == 0)
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 6591;
    goto LABEL_129;
  }
  if (!v87)
  {
LABEL_153:
    char v8 = 1;
    if (!*(unsigned char *)v7) {
      goto LABEL_132;
    }
    goto LABEL_131;
  }
  unsigned int v92 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, &v92) & 1) == 0)
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 6595;
    goto LABEL_129;
  }
  uint64_t v63 = v92;
  uint64_t v64 = v7[6];
  unint64_t v65 = v64 + v92;
  if (v65 > v7[7])
  {
    int v16 = (FILE *)*MEMORY[0x1E4F143C8];
    int v17 = 6598;
    goto LABEL_129;
  }
  uint64_t v82 = v7[5];
  v7[6] = v65;
  unint64_t v69 = __sz[0];
  if (__sz[0])
  {
    __pb = (uint16x8_t *)operator new(2 * __sz[0]);
    bzero(__pb, 2 * v69);
  }
  else
  {
    __pb = 0;
  }
  long long v90 = 0u;
  long long v91 = 0u;
  if (mgcl::ints::IntDecompressor<unsigned short>::decompress((uint64_t *)&v90, (unsigned __int8 *)(v82 + v64), v63, v95, v94, v69, __pb))
  {
    int v70 = 6603;
    goto LABEL_150;
  }
  uint64_t v71 = __sz[0];
  uint64_t v72 = *(void *)(*a2 + 504);
  if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(*a2 + 512) - v72) >> 5) != __sz[0])
  {
    int v70 = 6605;
LABEL_150:
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v70);
    int v76 = 6;
    uint64_t v32 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v90);
    if (!__pb) {
      goto LABEL_152;
    }
    goto LABEL_151;
  }
  if (__sz[0])
  {
    uint64_t v73 = (float *)(v72 + 172);
    uint64_t v74 = __pb;
    float v75 = 1.0 / (float)v100;
    do
    {
      if (*v73 != 100.0 && v74->i16[0]) {
        *uint64_t v73 = (float)v74->u16[0] * v75;
      }
      uint64_t v74 = (uint16x8_t *)((char *)v74 + 2);
      v73 += 56;
      --v71;
    }
    while (v71);
  }
  int v76 = 0;
  uint64_t v32 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v90);
  if (__pb) {
LABEL_151:
  }
    operator delete(__pb);
LABEL_152:
  if (!v76) {
    goto LABEL_153;
  }
LABEL_130:
  char v8 = 0;
  if (*(unsigned char *)v7)
  {
LABEL_131:
    uint64_t v66 = geo::codec::Allocator::instance((geo::codec::Allocator *)v32);
    uint64_t v32 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v66 + 40))(v66, v7[5], 0);
  }
LABEL_132:
  uint64_t v67 = geo::codec::Allocator::instance((geo::codec::Allocator *)v32);
  (*(void (**)(uint64_t, void *, void))(*(void *)v67 + 40))(v67, v7, 0);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v68 = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v100 = "ChapterPOIMzrOverrides";
  *(void *)&long long v90 = &v100;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v11 + 1912, (uint64_t *)&v100, (uint64_t)&std::piecewise_construct, (uint64_t **)&v90)+ 4) = (double)((v68 - v12.__d_.__rep_) / 1000) * 0.001;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v8 & 1;
}

void sub_188FBE654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

BOOL geo::codec::_readMaterialRasters(void *a1, uint64_t *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v31 = a1;
  BOOL result = 1;
  char v30 = 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    uint64_t v6 = *a1;
    if (v4 == 1)
    {
      unint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v11 = (unsigned __int16 *)(v6 + 16);
      unint64_t v12 = v4 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        int v13 = *(v11 - 8);
        int v15 = *v11;
        v11 += 16;
        int v14 = v15;
        if (v13 == 155) {
          ++v9;
        }
        if (v14 == 155) {
          ++v10;
        }
        v12 -= 2;
      }
      while (v12);
      uint64_t v8 = v10 + v9;
      if (v4 == v7)
      {
LABEL_15:
        uint64_t v29 = v8;
        if (!v8) {
          return 1;
        }
        *(_WORD *)(*a2 + 2856) = 0;
        uint64_t v19 = geo::codec::Allocator::instance((geo::codec::Allocator *)1);
        uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 24))(v19, v8, 80);
        uint64_t v21 = *a2;
        *(void *)(*a2 + 2848) = v20;
        uint64_t v28 = v20;
        uint64_t v22 = operator new(0x30uLL);
        uint64_t v24 = (void (**)(void *, uint64_t))&unk_1ED517CE0;
        *uint64_t v22 = &unk_1ED517CE0;
        v22[1] = a2;
        v22[2] = &v28;
        v22[3] = &v29;
        v22[4] = &v30;
        v22[5] = &v31;
        unint64_t v34 = v22;
        unint64_t v25 = a1[1];
        if (v25)
        {
          uint64_t v26 = 0;
          for (i = 0; i < v25; uint64_t v26 = ++i)
          {
            if (*(_WORD *)(*a1 + 16 * v26) == 155)
            {
              uint64_t v32 = geo::codec::chapterAt((uint64_t)a1, i, 155, v21 + 1912);
              if (!v34) {
                std::__throw_bad_function_call[abi:ne180100]();
              }
              (*(void (**)(void *, uint64_t *))(*v34 + 48))(v34, &v32);
              unint64_t v25 = a1[1];
            }
          }
          uint64_t v22 = v34;
          if (v34 == v33)
          {
            (*(void (**)(void *))(v33[0] + 32))(v33);
            return v30 != 0;
          }
          if (!v34) {
            return v30 != 0;
          }
          uint64_t v24 = (void (**)(void *, uint64_t))*v34;
        }
        v24[5](v22, v23);
        return v30 != 0;
      }
    }
    uint64_t v16 = v4 - v7;
    int v17 = (unsigned __int16 *)(v6 + 16 * v7);
    do
    {
      int v18 = *v17;
      v17 += 8;
      if (v18 == 155) {
        ++v8;
      }
      --v16;
    }
    while (v16);
    goto LABEL_15;
  }
  return result;
}

void sub_188FBE998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(VMP4Chapter *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_188FBE9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::function<void ()(VMP4Chapter *)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readHillShadeRaster(void *a1, uint64_t *a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 1;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 158)
  {
    uint64_t v4 = ++v5;
    if (v2 <= v5) {
      return 1;
    }
  }
  uint64_t v6 = (void *)geo::codec::chapterAt((uint64_t)a1, v5, 158, *a2 + 1912);
  if (!v6) {
    return 1;
  }
  unint64_t v7 = v6;
  LODWORD(__n) = 0;
  uint64_t v8 = v6[6];
  if ((unint64_t)(v8 + 1) <= v6[7])
  {
    int v12 = *(unsigned __int8 *)(v6[5] + v8);
    v6[6] = v8 + 1;
    if (!geo::codec::chapterReadVarUint32(v6, (unsigned int *)(*a2 + 3000)))
    {
      int v9 = 1849;
      goto LABEL_19;
    }
    uint64_t VarUint32 = geo::codec::chapterReadVarUint32(v7, (unsigned int *)&__n);
    if (!VarUint32)
    {
      int v9 = 1850;
      goto LABEL_19;
    }
    if (__n)
    {
      uint64_t v14 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
      int v15 = (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v14 + 16))(v14, __n, 8);
      if (!v15)
      {
        int v9 = 1854;
        goto LABEL_19;
      }
      uint64_t v16 = __n;
      uint64_t v17 = v7[6];
      if (v17 + (unint64_t)__n > v7[7])
      {
        int v9 = 1855;
        goto LABEL_19;
      }
      uint64_t v20 = v15;
      uint64_t VarUint32 = (uint64_t)memcpy(v15, (const void *)(v7[5] + v17), __n);
      v7[6] += v16;
      uint64_t v21 = *a2;
      *(unsigned char *)(v21 + 3004) = __n;
      *(void *)(v21 + 3008) = v20;
    }
    if ((v12 | 2) == 2)
    {
      uint64_t v10 = 1;
      goto LABEL_20;
    }
    unsigned int v29 = 0;
    if (geo::codec::chapterReadVarUint32(v7, &v29))
    {
      uint64_t v22 = v7[6];
      if ((unint64_t)(v22 + 1) <= v7[7])
      {
        unsigned int v23 = *(unsigned __int8 *)(v7[5] + v22);
        v7[6] = v22 + 1;
        uint64_t VarUint32 = geo::codec::chapterReadVarUint32(v7, (unsigned int *)(*a2 + 2992));
        if (VarUint32)
        {
          *(unsigned char *)(*a2 + 3016) = v23;
          uint64_t v10 = 1;
          if (v23 > 5 || ((1 << v23) & 0x2A) == 0) {
            goto LABEL_20;
          }
          uint64_t v24 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
          unint64_t v25 = (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v24 + 16))(v24, *(unsigned int *)(*a2 + 2992), 8);
          uint64_t v26 = *a2;
          *(void *)(*a2 + 2984) = v25;
          if (v25)
          {
            size_t v27 = *(unsigned int *)(v26 + 2992);
            uint64_t v28 = v7[6];
            if (v28 + v27 <= v7[7])
            {
              uint64_t VarUint32 = (uint64_t)memcpy(v25, (const void *)(v7[5] + v28), v27);
              v7[6] += v27;
              goto LABEL_20;
            }
            int v9 = 1886;
          }
          else
          {
            int v9 = 1885;
          }
        }
        else
        {
          int v9 = 1875;
        }
      }
      else
      {
        int v9 = 1874;
      }
    }
    else
    {
      int v9 = 1873;
    }
  }
  else
  {
    int v9 = 1848;
  }
LABEL_19:
  uint64_t VarUint32 = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v9);
  uint64_t v10 = 0;
LABEL_20:
  if (*(unsigned char *)v7)
  {
    uint64_t v18 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
    uint64_t VarUint32 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v18 + 40))(v18, v7[5], 0);
  }
  uint64_t v19 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
  (*(void (**)(uint64_t, void *, void))(*(void *)v19 + 40))(v19, v7, 0);
  return v10;
}

uint64_t geo::codec::_readElevationRaster(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a1[1];
  if (!v5)
  {
LABEL_5:
    uint64_t v8 = 0;
    int v9 = (std::__shared_weak_count *)a2[1];
    if (!v9) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v6 = 0;
  unsigned int v7 = 0;
  while (*(_WORD *)(*a1 + 16 * v6) != 101)
  {
    uint64_t v6 = ++v7;
    if (v5 <= v7) {
      goto LABEL_5;
    }
  }
  uint64_t v8 = geo::codec::chapterAt((uint64_t)a1, v7, 101, v4 + 1912);
  uint64_t v4 = *a2;
  int v9 = (std::__shared_weak_count *)a2[1];
  if (v9) {
LABEL_6:
  }
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v10.__d_.__rep_;
  if (!v8)
  {
    uint64_t v16 = 1;
    goto LABEL_21;
  }
  uint64_t v12 = *(void *)(v8 + 48);
  unint64_t v13 = *(void *)(v8 + 56);
  uint64_t v14 = v12 + 4;
  if (v12 + 4 > v13)
  {
    int v15 = 1905;
    goto LABEL_17;
  }
  uint64_t v17 = *(void *)(v8 + 40);
  unsigned int v18 = *(_DWORD *)(v17 + v12);
  *(_DWORD *)(v8 + 64) = v18;
  *(void *)(v8 + 48) = v14;
  if (v18 < 0x10)
  {
    int v15 = 1907;
    goto LABEL_17;
  }
  uint64_t v19 = v12 + 6;
  if (v12 + 6 > v13)
  {
    int v15 = 1909;
    goto LABEL_17;
  }
  uint64_t v25 = *a2;
  *(_WORD *)(*a2 + 2866) = *(_WORD *)(v17 + v14);
  *(void *)(v8 + 48) = v19;
  uint64_t v26 = v12 + 8;
  if (v12 + 8 > v13)
  {
    int v15 = 1910;
    goto LABEL_17;
  }
  *(_WORD *)(v25 + 2864) = *(_WORD *)(v17 + v19);
  *(void *)(v8 + 48) = v26;
  if (v12 + 12 > v13)
  {
    int v15 = 1911;
    goto LABEL_17;
  }
  *(_DWORD *)(v25 + 2868) = *(_DWORD *)(v17 + v26);
  uint64_t v27 = *(void *)(v8 + 48);
  unint64_t v28 = *(void *)(v8 + 56);
  *(void *)(v8 + 48) = v27 + 4;
  uint64_t v29 = v27 + 6;
  if (v27 + 6 > v28)
  {
    int v15 = 1912;
    goto LABEL_17;
  }
  uint64_t v30 = *a2;
  uint64_t v31 = *(void *)(v8 + 40);
  *(_WORD *)(*a2 + 2872) = *(_WORD *)(v31 + v27 + 4);
  *(void *)(v8 + 48) = v29;
  unint64_t v32 = v27 + 10;
  if (v32 > v28)
  {
    int v15 = 1913;
    goto LABEL_17;
  }
  *(_DWORD *)(v30 + 2876) = *(_DWORD *)(v31 + v29);
  *(void *)(v8 + 48) = v32;
  uint64_t v33 = geo::codec::Allocator::instance((geo::codec::Allocator *)v10.__d_.__rep_);
  unint64_t v34 = (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v33 + 16))(v33, *(unsigned int *)(*a2 + 2876), 8);
  uint64_t v35 = *a2;
  *(void *)(v35 + 2880) = v34;
  size_t v36 = *(unsigned int *)(v35 + 2876);
  uint64_t v37 = *(void *)(v8 + 48);
  if (v37 + v36 > *(void *)(v8 + 56))
  {
    int v15 = 1916;
LABEL_17:
    uint64_t v20 = (geo::codec::Allocator *)fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v15);
    uint64_t v16 = 0;
    if (!a1) {
      goto LABEL_21;
    }
    goto LABEL_18;
  }
  uint64_t v20 = (geo::codec::Allocator *)memcpy(v34, (const void *)(*(void *)(v8 + 40) + v37), v36);
  *(void *)(v8 + 48) += v36;
  uint64_t v16 = 1;
  if (!a1) {
    goto LABEL_21;
  }
LABEL_18:
  if (*(unsigned char *)v8)
  {
    uint64_t v21 = geo::codec::Allocator::instance(v20);
    uint64_t v20 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v21 + 40))(v21, *(void *)(v8 + 40), 0);
  }
  uint64_t v22 = geo::codec::Allocator::instance(v20);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v22 + 40))(v22, v8, 0);
LABEL_21:
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = std::chrono::steady_clock::now().__d_.__rep_;
  int v38 = "ChapterElevationRaster";
  uint64_t v39 = &v38;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v4 + 1912, (uint64_t *)&v38, (uint64_t)&std::piecewise_construct, (uint64_t **)&v39)+ 4) = (double)((v23 - rep) / 1000) * 0.001;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v16;
}

void sub_188FBF07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readDaVinciMetadata(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 1;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 103)
  {
    uint64_t v4 = ++v5;
    if (v2 <= v5) {
      return 1;
    }
  }
  uint64_t v6 = (void *)geo::codec::chapterAt((uint64_t)a1, v5, 103, *a2 + 1912);
  if (!v6) {
    return 1;
  }
  unsigned int v7 = v6;
  uint64_t v8 = v6[6];
  if ((unint64_t)(v8 + 4) > v6[7]) {
    return 1;
  }
  unsigned int v11 = *(_DWORD *)(v6[5] + v8);
  v6[6] = v8 + 4;
  uint64_t v12 = (std::__shared_weak_count *)a2[1];
  uint64_t v84 = *a2;
  int v85 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v86.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v13 = geo::codec::Allocator::instance((geo::codec::Allocator *)v86.__d_.__rep_);
  uint64_t v14 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 24))(v13, 1, 32);
  *(void *)(*a2 + 2232) = v14;
  if (v11 == 68)
  {
    if ((v11 & 0xFF00) == 0x5600)
    {
      if ((v11 & 0xFF0000) == 0x650000)
      {
        if (HIBYTE(v11) == 109)
        {
          uint64_t v15 = v7[6];
          unint64_t v16 = v7[7];
          uint64_t v17 = v15 + 4;
          if (v15 + 4 <= v16)
          {
            uint64_t v20 = v7[5];
            unsigned int v21 = *(_DWORD *)(v20 + v15);
            *((_DWORD *)v7 + 16) = v21;
            v7[6] = v17;
            if (v21 <= 0xF)
            {
              unsigned int v18 = (FILE *)*MEMORY[0x1E4F143C8];
              int v19 = 10237;
            }
            else if (v15 + 8 <= v16)
            {
              *(_DWORD *)uint64_t v14 = *(_DWORD *)(v20 + v17);
              uint64_t v22 = v7[6];
              unint64_t v23 = v7[7];
              v7[6] = v22 + 4;
              if (v22 + 8 <= v23)
              {
                *(_DWORD *)(*(void *)(*a2 + 2232) + 4) = *(_DWORD *)(v7[5] + v22 + 4);
                uint64_t v24 = v7[6];
                unint64_t v25 = v7[7];
                uint64_t v26 = v24 + 4;
                v7[6] = v24 + 4;
                unint64_t v27 = v24 + 6;
                if (v27 <= v25)
                {
                  uint64_t v45 = *(unsigned __int16 *)(v7[5] + v26);
                  *(_WORD *)(*(void *)(*a2 + 2232) + 8) = v45;
                  v7[6] = v27;
                  uint64_t v46 = geo::codec::Allocator::instance(v14);
                  unint64_t v47 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v46 + 16))(v46, 2 * (v45 * v45), 8);
                  uint64_t v29 = v47;
                  *(void *)(*(void *)(*a2 + 2232) + 16) = v47;
                  if (v45)
                  {
                    unsigned int v48 = 0;
                    size_t v49 = v47;
LABEL_43:
                    unsigned int v50 = 0;
                    while (1)
                    {
                      uint64_t v51 = v7[6];
                      unint64_t v52 = v7[7];
                      uint64_t v53 = v51 + 1;
                      if (v51 + 1 > v52)
                      {
                        int v80 = 10255;
                        goto LABEL_65;
                      }
                      uint64_t v54 = v7[5];
                      char v55 = *(unsigned char *)(v54 + v51);
                      v7[6] = v53;
                      unint64_t v56 = v51 + 2;
                      if (v56 > v52) {
                        break;
                      }
                      char v57 = *(unsigned char *)(v54 + v53);
                      v7[6] = v56;
                      uint64_t v58 = (geo::codec::Allocator *)((char *)v49 + 2);
                      *(unsigned char *)size_t v49 = v55;
                      *((unsigned char *)v49 + 1) = v57;
                      ++v50;
                      size_t v49 = (geo::codec::Allocator *)((char *)v49 + 2);
                      if (v50 >= v45)
                      {
                        ++v48;
                        size_t v49 = v58;
                        if (v48 < v45) {
                          goto LABEL_43;
                        }
                        goto LABEL_48;
                      }
                    }
                    int v80 = 10256;
LABEL_65:
                    uint64_t v28 = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v80);
                    uint64_t v30 = 0;
                    uint64_t v9 = 0;
                    if (*(unsigned char *)v7) {
                      goto LABEL_31;
                    }
                    goto LABEL_32;
                  }
LABEL_48:
                  unint64_t v60 = v7[6];
                  unint64_t v59 = v7[7];
                  BOOL v61 = v59 >= v60;
                  unint64_t v62 = v59 - v60;
                  if (v61)
                  {
                    *((unsigned char *)v7 + 32) = 1;
                    unint64_t v63 = v7[5] + v60;
                    v7[2] = v62;
                    v7[3] = 0;
                    v7[1] = v63;
                  }
                  uint64_t v64 = geo::codec::Allocator::instance(v47);
                  uint64_t v28 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v64 + 24))(v64, (v45 * v45), 1);
                  uint64_t v30 = v28;
                  *(void *)(*(void *)(*a2 + 2232) + 24) = v28;
                  if (v45)
                  {
                    uint64_t v65 = 0;
                    unint64_t v66 = v7[3];
                    unint64_t v67 = 8 * v7[2];
                    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v68 = (unsigned char *)v28;
LABEL_53:
                    unint64_t v69 = v68;
                    uint64_t v70 = v45;
                    unint64_t v71 = v66;
                    while (1)
                    {
                      unint64_t v66 = v71 + 1;
                      if (v71 + 1 > v67) {
                        break;
                      }
                      uint64_t v72 = v7[1];
                      unsigned int v73 = *(unsigned __int8 *)(v72 + (v71 >> 3));
                      v7[3] = v66;
                      *v69++ |= (v73 >> (~(_BYTE)v71++ & 7)) & 1;
                      if (!--v70)
                      {
                        ++v65;
                        v68 += v45;
                        if (v65 != v45) {
                          goto LABEL_53;
                        }
                        uint64_t v74 = 0;
                        float v75 = (unsigned char *)v28;
                        while (2)
                        {
                          int v76 = v75;
                          uint64_t v77 = v45;
                          unint64_t v78 = v66;
                          do
                          {
                            unint64_t v66 = v78 + 1;
                            if (v78 + 1 > v67)
                            {
                              unint64_t v81 = (FILE *)*MEMORY[0x1E4F143C8];
                              int v82 = 10279;
                              goto LABEL_68;
                            }
                            unsigned int v79 = *(unsigned __int8 *)(v72 + (v78 >> 3));
                            v7[3] = v66;
                            *v76++ |= 2 * ((v79 >> (~(_BYTE)v78++ & 7)) & 1);
                            --v77;
                          }
                          while (v77);
                          ++v74;
                          v75 += v45;
                          if (v74 != v45) {
                            continue;
                          }
                          goto LABEL_71;
                        }
                      }
                    }
                    unint64_t v81 = (FILE *)*MEMORY[0x1E4F143C8];
                    int v82 = 10271;
LABEL_68:
                    uint64_t v28 = fprintf(v81, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v82);
                    uint64_t v9 = 0;
                    if (*(unsigned char *)v7) {
                      goto LABEL_31;
                    }
                    goto LABEL_32;
                  }
                  unint64_t v66 = v7[3];
LABEL_71:
                  unint64_t v83 = v7[6] + (v66 >> 3);
                  if ((v66 & 7) != 0) {
                    ++v83;
                  }
                  v7[6] = v83;
                  *((unsigned char *)v7 + 32) = 0;
                  uint64_t v9 = 1;
                  if (!*(unsigned char *)v7) {
                    goto LABEL_32;
                  }
                  goto LABEL_31;
                }
                unsigned int v18 = (FILE *)*MEMORY[0x1E4F143C8];
                int v19 = 10242;
              }
              else
              {
                unsigned int v18 = (FILE *)*MEMORY[0x1E4F143C8];
                int v19 = 10240;
              }
            }
            else
            {
              unsigned int v18 = (FILE *)*MEMORY[0x1E4F143C8];
              int v19 = 10239;
            }
          }
          else
          {
            unsigned int v18 = (FILE *)*MEMORY[0x1E4F143C8];
            int v19 = 10236;
          }
        }
        else
        {
          unsigned int v18 = (FILE *)*MEMORY[0x1E4F143C8];
          int v19 = 10234;
        }
      }
      else
      {
        unsigned int v18 = (FILE *)*MEMORY[0x1E4F143C8];
        int v19 = 10233;
      }
    }
    else
    {
      unsigned int v18 = (FILE *)*MEMORY[0x1E4F143C8];
      int v19 = 10232;
    }
  }
  else
  {
    unsigned int v18 = (FILE *)*MEMORY[0x1E4F143C8];
    int v19 = 10231;
  }
  uint64_t v28 = fprintf(v18, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v19);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v9 = 0;
  if (*(unsigned char *)v7)
  {
LABEL_31:
    uint64_t v31 = geo::codec::Allocator::instance((geo::codec::Allocator *)v28);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v31 + 40))(v31, v7[5], 0);
  }
LABEL_32:
  uint64_t v32 = geo::codec::Allocator::instance((geo::codec::Allocator *)v28);
  uint64_t v33 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void *, void))(*(void *)v32 + 40))(v32, v7, 0);
  if ((v9 & 1) == 0)
  {
    uint64_t v34 = *a2;
    uint64_t v35 = *(void *)(*a2 + 2232);
    if (v35)
    {
      uint64_t v36 = geo::codec::Allocator::instance(v33);
      uint64_t v37 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v36 + 40))(v36, *(void *)(v35 + 24), 0);
      uint64_t v38 = geo::codec::Allocator::instance(v37);
      uint64_t v39 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v38 + 40))(v38, *(void *)(v35 + 16), 0);
      uint64_t v40 = geo::codec::Allocator::instance(v39);
      uint64_t v33 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v40 + 40))(v40, v35, 0);
      uint64_t v34 = *a2;
    }
    *(void *)(v34 + 2232) = 0;
    uint64_t v41 = geo::codec::Allocator::instance(v33);
    uint64_t v42 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v41 + 40))(v41, v29, 0);
    uint64_t v43 = geo::codec::Allocator::instance(v42);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v43 + 40))(v43, v30, 0);
  }
  v44.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unsigned int v87 = "ChapterDaVinciMetadata";
  if ("ChapterDaVinciMetadata")
  {
    unsigned int v88 = &v87;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v84 + 1912, (uint64_t *)&v87, (uint64_t)&std::piecewise_construct, (uint64_t **)&v88)+ 4) = (double)((v44.__d_.__rep_ - v86.__d_.__rep_) / 1000) * 0.001;
  }
  if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
  }
  return v9;
}

void sub_188FBF818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

void sub_188FBF82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

void sub_188FBF844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

void sub_188FBF858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readTransitNetwork(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v1176 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a1[1];
  if (!v3) {
    return 1;
  }
  uint64_t v6 = 0;
  unsigned int v7 = 0;
  while (*(_WORD *)(*a1 + 16 * v6) != 129)
  {
    uint64_t v6 = ++v7;
    if (v3 <= v7) {
      return 1;
    }
  }
  uint64_t v8 = geo::codec::chapterAt((uint64_t)a1, v7, 129, *a3 + 1912);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = v8;
  std::chrono::steady_clock::time_point v10 = (std::__shared_weak_count *)a3[1];
  uint64_t v1155 = *a3;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v11.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v13 = *(void *)(v9 + 48);
  unint64_t v12 = *(void *)(v9 + 56);
  unint64_t v14 = v12 - v13;
  if (v12 >= v13)
  {
    unint64_t v15 = 0;
    *(unsigned char *)(v9 + 32) = 1;
    unint64_t v19 = *(void *)(v9 + 40) + v13;
    *(void *)(v9 + 16) = v14;
    *(void *)(v9 + 24) = 0;
    *(void *)(v9 + 8) = v19;
    unint64_t v16 = 8 * v14;
    if (8 * v14 < 5)
    {
LABEL_20:
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4460;
      goto LABEL_21;
    }
  }
  else
  {
    unint64_t v15 = *(void *)(v9 + 24);
    unint64_t v16 = 8 * *(void *)(v9 + 16);
    if (v15 + 5 > v16) {
      goto LABEL_20;
    }
  }
  int v20 = 0;
  unsigned int v21 = (unint64_t *)(v9 + 24);
  uint64_t v22 = *(void *)(v9 + 8);
  unint64_t v23 = 5;
  do
  {
    unint64_t v24 = 8 - (v15 & 7);
    if (v23 < v24) {
      unint64_t v24 = v23;
    }
    int v20 = (*(unsigned __int8 *)(v22 + (v15 >> 3)) >> (8 - (v15 & 7) - v24)) & ~(-1 << v24) | (v20 << v24);
    v15 += v24;
    *unsigned int v21 = v15;
    v23 -= v24;
  }
  while (v23);
  unint64_t v25 = (v20 + 1);
  if (v15 + v25 > v16) {
    goto LABEL_20;
  }
  unsigned int v29 = 0;
  if (v20 != -1)
  {
    do
    {
      unint64_t v30 = 8 - (v15 & 7);
      if (v25 < v30) {
        unint64_t v30 = v25;
      }
      unsigned int v29 = (*(unsigned __int8 *)(v22 + (v15 >> 3)) >> (8 - (v15 & 7) - v30)) & ~(-1 << v30) | (v29 << v30);
      v15 += v30;
      *unsigned int v21 = v15;
      v25 -= v30;
    }
    while (v25);
  }
  if (v15 + 5 > v16) {
    goto LABEL_38;
  }
  int v31 = 0;
  unint64_t v32 = 5;
  do
  {
    unint64_t v33 = 8 - (v15 & 7);
    if (v32 < v33) {
      unint64_t v33 = v32;
    }
    int v31 = (*(unsigned __int8 *)(v22 + (v15 >> 3)) >> (8 - (v15 & 7) - v33)) & ~(-1 << v33) | (v31 << v33);
    v15 += v33;
    *unsigned int v21 = v15;
    v32 -= v33;
  }
  while (v32);
  unint64_t v34 = (v31 + 1);
  if (v15 + v34 > v16)
  {
LABEL_38:
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 4461;
    goto LABEL_21;
  }
  unsigned int v35 = 0;
  if (v31 != -1)
  {
    do
    {
      unint64_t v36 = 8 - (v15 & 7);
      if (v34 < v36) {
        unint64_t v36 = v34;
      }
      unsigned int v35 = (*(unsigned __int8 *)(v22 + (v15 >> 3)) >> (8 - (v15 & 7) - v36)) & ~(-1 << v36) | (v35 << v36);
      v15 += v36;
      *unsigned int v21 = v15;
      v34 -= v36;
    }
    while (v34);
  }
  char v1154 = (uint64_t *)(v9 + 8);
  if ((geo::codec::decodeSectionEncoding((geo::codec::Allocator *)(v9 + 8), (geo::codec::Allocator **)(*a3 + 1400), 1, a2, 0) & 1) == 0)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 4463;
    goto LABEL_21;
  }
  unint64_t v38 = *(void *)(v9 + 24);
  unint64_t v39 = 8 * *(void *)(v9 + 16);
  if (v38 + 5 > v39)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 4466;
    goto LABEL_21;
  }
  int v40 = 0;
  uint64_t v41 = (uint64_t *)(v9 + 8);
  uint64_t v42 = *v1154;
  unint64_t v43 = 5;
  do
  {
    unint64_t v44 = 8 - (v38 & 7);
    if (v43 < v44) {
      unint64_t v44 = v43;
    }
    int v40 = (*(unsigned __int8 *)(v42 + (v38 >> 3)) >> (8 - (v38 & 7) - v44)) & ~(-1 << v44) | (v40 << v44);
    v38 += v44;
    *unsigned int v21 = v38;
    v43 -= v44;
  }
  while (v43);
  if (v38 + 5 > v39)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 4468;
    goto LABEL_21;
  }
  int v45 = 0;
  unint64_t v46 = (v40 + 1);
  unint64_t v47 = 5;
  do
  {
    unint64_t v48 = 8 - (v38 & 7);
    if (v47 < v48) {
      unint64_t v48 = v47;
    }
    int v45 = (*(unsigned __int8 *)(v42 + (v38 >> 3)) >> (8 - (v38 & 7) - v48)) & ~(-1 << v48) | (v45 << v48);
    v38 += v48;
    *unsigned int v21 = v38;
    v47 -= v48;
  }
  while (v47);
  if (v38 + 5 > v39)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 4470;
    goto LABEL_21;
  }
  int v49 = 0;
  unint64_t v1152 = (v45 + 1);
  unint64_t v50 = 5;
  do
  {
    unint64_t v51 = 8 - (v38 & 7);
    if (v50 < v51) {
      unint64_t v51 = v50;
    }
    int v49 = (*(unsigned __int8 *)(v42 + (v38 >> 3)) >> (8 - (v38 & 7) - v51)) & ~(-1 << v51) | (v49 << v51);
    v38 += v51;
    *unsigned int v21 = v38;
    v50 -= v51;
  }
  while (v50);
  unint64_t v1150 = (v49 + 1);
  unint64_t v1129 = v46;
  if (v29)
  {
    uint64_t v52 = *(void *)(*a3 + 1352);
    uint64_t v53 = *(void *)(*a3 + 1344);
    unint64_t v54 = 0xD37A6F4DE9BD37A7 * ((v52 - v53) >> 3);
    uint64_t v1132 = *a3;
    unint64_t v55 = v29 - v54;
    if (v29 <= v54)
    {
      if (v29 >= v54)
      {
LABEL_135:
        unint64_t v129 = *(void *)(v9 + 24);
        unint64_t v130 = 8 * *(void *)(v9 + 16);
        if (v129 + 5 > v130)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 4476;
          goto LABEL_21;
        }
        int v131 = 0;
        uint64_t v132 = *v41;
        unint64_t v133 = 5;
        do
        {
          unint64_t v134 = 8 - (v129 & 7);
          if (v133 < v134) {
            unint64_t v134 = v133;
          }
          int v131 = (*(unsigned __int8 *)(v132 + (v129 >> 3)) >> (8 - (v129 & 7) - v134)) & ~(-1 << v134) | (v131 << v134);
          v129 += v134;
          *unsigned int v21 = v129;
          v133 -= v134;
        }
        while (v133);
        if (v129 + 5 > v130)
        {
          int v27 = 4478;
          goto LABEL_157;
        }
        int v135 = 0;
        unint64_t v136 = (v131 + 1);
        unint64_t v137 = 5;
        do
        {
          unint64_t v138 = 8 - (v129 & 7);
          if (v137 < v138) {
            unint64_t v138 = v137;
          }
          int v135 = (*(unsigned __int8 *)(v132 + (v129 >> 3)) >> (8 - (v129 & 7) - v138)) & ~(-1 << v138) | (v135 << v138);
          v129 += v138;
          *unsigned int v21 = v129;
          v137 -= v138;
        }
        while (v137);
        uint64_t v139 = 0;
        unsigned int v140 = 0;
        unint64_t v141 = (v135 + 1);
        uint64_t v142 = *a3;
        do
        {
          if (v129 + v136 > v130)
          {
            int v27 = 4482;
            goto LABEL_157;
          }
          int v144 = 0;
          if (v136)
          {
            unint64_t v145 = v136;
            do
            {
              unint64_t v146 = 8 - (v129 & 7);
              if (v145 < v146) {
                unint64_t v146 = v145;
              }
              int v144 = (*(unsigned __int8 *)(v132 + (v129 >> 3)) >> (8 - (v129 & 7) - v146)) & ~(-1 << v146) | (v144 << v146);
              v129 += v146;
              *unsigned int v21 = v129;
              v145 -= v146;
            }
            while (v145);
          }
          uint64_t v143 = *(void *)(v142 + 1344) + 184 * v139;
          *(_DWORD *)(v143 + 16) = v140;
          *(_DWORD *)(v143 + 20) = v144;
          v140 += v144;
          ++v139;
        }
        while (v139 != v29);
        unsigned int v1130 = v140;
        if (v129 + v141 > v130)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 4489;
          goto LABEL_21;
        }
        if (v141)
        {
          LODWORD(v147) = 0;
          do
          {
            unint64_t v148 = 8 - (v129 & 7);
            if (v141 < v148) {
              unint64_t v148 = v141;
            }
            uint64_t v147 = (*(unsigned __int8 *)(v132 + (v129 >> 3)) >> (8 - (v129 & 7) - v148)) & ~(-1 << v148) | (v147 << v148);
            v129 += v148;
            *unsigned int v21 = v129;
            v141 -= v148;
          }
          while (v141);
          *(void *)(*a3 + 1392) = v147;
          if (v147)
          {
            {
              operator new();
            }
            uint64_t v149 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                                + 16))(geo::codec::Allocator::instance(void)::alloc, 8 * *(void *)(*a3 + 1392), 8, v37);
            *(void *)(*a3 + 1376) = v149;
            if (!v149)
            {
              uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
              int v27 = 4494;
              goto LABEL_21;
            }
          }
        }
        else
        {
          *(void *)(*a3 + 1392) = 0;
        }
        uint64_t v171 = 0;
        uint64_t v1135 = 0;
        if (v29 <= 1) {
          uint64_t v172 = 1;
        }
        else {
          uint64_t v172 = v29;
        }
        uint64_t v1123 = v172;
        do
        {
          uint64_t v173 = *a3;
          uint64_t v174 = a3[1];
          uint64_t v175 = *(void *)(*a3 + 1344);
          if (v174) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v174 + 16), 1uLL, memory_order_relaxed);
          }
          float32x4x3_t v176 = (uint64_t *)(v175 + 184 * v171);
          unint64_t v177 = (std::__shared_weak_count *)v176[1];
          *float32x4x3_t v176 = v173;
          v176[1] = v174;
          if (v177) {
            std::__shared_weak_count::__release_weak(v177);
          }
          unint64_t v178 = *(void *)(v9 + 24);
          unint64_t v179 = 8 * *(void *)(v9 + 16);
          if (v178 + v1129 > v179)
          {
            uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 4502;
            goto LABEL_21;
          }
          int v180 = 0;
          if (v1129)
          {
            uint64_t v181 = *v1154;
            unint64_t v182 = v1129;
            do
            {
              unint64_t v183 = 8 - (v178 & 7);
              if (v182 < v183) {
                unint64_t v183 = v182;
              }
              int v180 = (*(unsigned __int8 *)(v181 + (v178 >> 3)) >> (8 - (v178 & 7) - v183)) & ~(-1 << v183) | (v180 << v183);
              v178 += v183;
              *unsigned int v21 = v178;
              v182 -= v183;
            }
            while (v182);
            if (v180)
            {
              int v184 = v180 + v1135;
              uint64_t v185 = *a3;
              if (v1152)
              {
                uint64_t v186 = v1135;
                while (v178 + v1152 <= v179)
                {
                  int v187 = 0;
                  unint64_t v188 = v1152;
                  do
                  {
                    unint64_t v189 = 8 - (v178 & 7);
                    if (v188 < v189) {
                      unint64_t v189 = v188;
                    }
                    int v187 = (*(unsigned __int8 *)(v181 + (v178 >> 3)) >> (8 - (v178 & 7) - v189)) & ~(-1 << v189) | (v187 << v189);
                    v178 += v189;
                    *unsigned int v21 = v178;
                    v188 -= v189;
                  }
                  while (v188);
                  uint64_t v190 = *(void *)(v185 + 1376);
                  *(_DWORD *)(v190 + 8 * v186) = v187;
                  if (v178 + v1150 > v179) {
                    goto LABEL_253;
                  }
                  int v191 = 0;
                  if (v1150)
                  {
                    unint64_t v192 = v1150;
                    do
                    {
                      unint64_t v193 = 8 - (v178 & 7);
                      if (v192 < v193) {
                        unint64_t v193 = v192;
                      }
                      int v191 = (*(unsigned __int8 *)(v181 + (v178 >> 3)) >> (8 - (v178 & 7) - v193)) & ~(-1 << v193) | (v191 << v193);
                      v178 += v193;
                      *unsigned int v21 = v178;
                      v192 -= v193;
                    }
                    while (v192);
                  }
                  *(_DWORD *)(v190 + 8 * v186++ + 4) = v191;
                  if (v184 == v186) {
                    goto LABEL_239;
                  }
                }
              }
              else
              {
                uint64_t v186 = v1135;
                while (v178 + v1152 <= v179)
                {
                  uint64_t v195 = *(void *)(v185 + 1376);
                  *(_DWORD *)(v195 + 8 * v186) = 0;
                  if (v178 + v1150 > v179)
                  {
LABEL_253:
                    int v27 = 4508;
                    goto LABEL_157;
                  }
                  int v196 = 0;
                  if (v1150)
                  {
                    unint64_t v197 = v1150;
                    do
                    {
                      unint64_t v198 = 8 - (v178 & 7);
                      if (v197 < v198) {
                        unint64_t v198 = v197;
                      }
                      int v196 = (*(unsigned __int8 *)(v181 + (v178 >> 3)) >> (8 - (v178 & 7) - v198)) & ~(-1 << v198) | (v196 << v198);
                      v178 += v198;
                      *unsigned int v21 = v178;
                      v197 -= v198;
                    }
                    while (v197);
                  }
                  *(_DWORD *)(v195 + 8 * v186++ + 4) = v196;
                  if (v184 == v186) {
                    goto LABEL_239;
                  }
                }
              }
              int v27 = 4506;
              goto LABEL_157;
            }
          }
          uint64_t v186 = v1135;
LABEL_239:
          uint64_t v194 = *(void *)(*a3 + 1344) + 184 * v171;
          *(void *)(v194 + 24) = v1135;
          *(void *)(v194 + 32) = v186 - v1135;
          if (v186 - v1135 != v180)
          {
            uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 4513;
            goto LABEL_21;
          }
          ++v171;
          uint64_t v1135 = v186;
        }
        while (v171 != v1123);
        uint64_t v41 = (uint64_t *)(v9 + 8);
        uint64_t v64 = *a3;
        if (!v35) {
          goto LABEL_257;
        }
        goto LABEL_75;
      }
      uint64_t v80 = v53 + 184 * v29;
      if (v52 != v80)
      {
        do
        {
          unint64_t v81 = *(std::__shared_weak_count **)(v52 - 176);
          if (v81) {
            std::__shared_weak_count::__release_weak(v81);
          }
          v52 -= 184;
        }
        while (v52 != v80);
        uint64_t v52 = v80;
      }
      uint64_t v41 = (uint64_t *)(v9 + 8);
    }
    else
    {
      uint64_t v56 = *(void *)(*a3 + 1360);
      if (0xD37A6F4DE9BD37A7 * ((v56 - v52) >> 3) < v55)
      {
        unint64_t v57 = 0xD37A6F4DE9BD37A7 * ((v56 - v53) >> 3);
        uint64_t v58 = 2 * v57;
        if (2 * v57 <= v29) {
          uint64_t v58 = v29;
        }
        if (v57 >= 0xB21642C8590B21) {
          uint64_t v58 = 0x1642C8590B21642;
        }
        uint64_t v1120 = v58;
        uint64_t v59 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v1132 + 1368) + 16))(*(void *)(v1132 + 1368), 184 * v58, 8);
        unint64_t v60 = v59 + 184 * v54;
        uint64_t v61 = v59 + 184 * v29;
        uint64_t v62 = 184 * v29 - 184 * v54;
        __n128 v37 = 0uLL;
        unint64_t v63 = v60;
        do
        {
          if (v63)
          {
            *(void *)(v63 + 176) = 0;
            *(_OWORD *)(v63 + 144) = 0uLL;
            *(_OWORD *)(v63 + 160) = 0uLL;
            *(_OWORD *)(v63 + 112) = 0uLL;
            *(_OWORD *)(v63 + 128) = 0uLL;
            *(_OWORD *)(v63 + 80) = 0uLL;
            *(_OWORD *)(v63 + 96) = 0uLL;
            *(_OWORD *)(v63 + 48) = 0uLL;
            *(_OWORD *)(v63 + 64) = 0uLL;
            *(_OWORD *)(v63 + 16) = 0uLL;
            *(_OWORD *)(v63 + 32) = 0uLL;
            *(_OWORD *)unint64_t v63 = 0uLL;
          }
          v63 += 184;
          v62 -= 184;
        }
        while (v62);
        uint64_t v84 = v59 + 184 * v1120;
        uint64_t v85 = *(void *)(v1132 + 1352);
        uint64_t v86 = *(void *)(v1132 + 1344);
        if (v85 == v86)
        {
          *(void *)(v1132 + 1344) = v60;
          *(void *)(v1132 + 1352) = v61;
          uint64_t v1122 = *(void *)(v1132 + 1360);
          *(void *)(v1132 + 1360) = v84;
        }
        else
        {
          do
          {
            long long v87 = *(_OWORD *)(v85 - 184);
            v85 -= 184;
            *(_OWORD *)(v60 - 184) = v87;
            v60 -= 184;
            *(void *)uint64_t v85 = 0;
            *(void *)(v85 + 8) = 0;
            long long v88 = *(_OWORD *)(v85 + 112);
            long long v90 = *(_OWORD *)(v85 + 64);
            long long v89 = *(_OWORD *)(v85 + 80);
            *(_OWORD *)(v60 + 96) = *(_OWORD *)(v85 + 96);
            *(_OWORD *)(v60 + 112) = v88;
            *(_OWORD *)(v60 + 64) = v90;
            *(_OWORD *)(v60 + 80) = v89;
            long long v92 = *(_OWORD *)(v85 + 144);
            long long v91 = *(_OWORD *)(v85 + 160);
            long long v93 = *(_OWORD *)(v85 + 128);
            *(void *)(v60 + 176) = *(void *)(v85 + 176);
            *(_OWORD *)(v60 + 144) = v92;
            *(_OWORD *)(v60 + 160) = v91;
            *(_OWORD *)(v60 + 128) = v93;
            __n128 v37 = *(__n128 *)(v85 + 48);
            long long v94 = *(_OWORD *)(v85 + 16);
            *(_OWORD *)(v60 + 32) = *(_OWORD *)(v85 + 32);
            *(__n128 *)(v60 + 48) = v37;
            *(_OWORD *)(v60 + 16) = v94;
          }
          while (v85 != v86);
          uint64_t v85 = *(void *)(v1132 + 1344);
          uint64_t v95 = *(void *)(v1132 + 1352);
          *(void *)(v1132 + 1344) = v60;
          *(void *)(v1132 + 1352) = v61;
          uint64_t v1122 = *(void *)(v1132 + 1360);
          *(void *)(v1132 + 1360) = v84;
          while (v95 != v85)
          {
            unint64_t v96 = *(std::__shared_weak_count **)(v95 - 176);
            if (v96) {
              std::__shared_weak_count::__release_weak(v96);
            }
            v95 -= 184;
          }
        }
        uint64_t v41 = (uint64_t *)(v9 + 8);
        if (v85)
        {
          (*(void (**)(void, uint64_t, uint64_t, __n128))(**(void **)(v1132 + 1368) + 40))(*(void *)(v1132 + 1368), v85, v1122 - v85, v37);
          uint64_t v41 = (uint64_t *)(v9 + 8);
        }
        goto LABEL_135;
      }
      uint64_t v82 = v52 + 184 * v55;
      uint64_t v83 = 184 * v29 - 184 * v54;
      __n128 v37 = 0uLL;
      do
      {
        if (v52)
        {
          *(void *)(v52 + 176) = 0;
          *(_OWORD *)(v52 + 144) = 0uLL;
          *(_OWORD *)(v52 + 160) = 0uLL;
          *(_OWORD *)(v52 + 112) = 0uLL;
          *(_OWORD *)(v52 + 128) = 0uLL;
          *(_OWORD *)(v52 + 80) = 0uLL;
          *(_OWORD *)(v52 + 96) = 0uLL;
          *(_OWORD *)(v52 + 48) = 0uLL;
          *(_OWORD *)(v52 + 64) = 0uLL;
          *(_OWORD *)(v52 + 16) = 0uLL;
          *(_OWORD *)(v52 + 32) = 0uLL;
          *(_OWORD *)uint64_t v52 = 0uLL;
        }
        v52 += 184;
        v83 -= 184;
      }
      while (v83);
      uint64_t v52 = v82;
    }
    *(void *)(v1132 + 1352) = v52;
    goto LABEL_135;
  }
  uint64_t v64 = *a3;
  unsigned int v1130 = 0;
  if (!v35)
  {
LABEL_257:
    uint64_t v164 = *(void *)(v64 + 1416);
    uint64_t v161 = *(void *)(v64 + 1408);
    goto LABEL_258;
  }
LABEL_75:
  uint64_t v65 = v35;
  unint64_t v66 = *(std::__shared_weak_count ***)(v64 + 1416);
  uint64_t v67 = *(void *)(v64 + 1408);
  unint64_t v68 = 0x82FA0BE82FA0BE83 * (((uint64_t)v66 - v67) >> 3);
  unint64_t v69 = v35 - v68;
  uint64_t v1121 = v64;
  if (v35 > v68)
  {
    uint64_t v70 = *(void *)(v64 + 1424);
    if (0x82FA0BE82FA0BE83 * ((v70 - (uint64_t)v66) >> 3) < v69)
    {
      unint64_t v71 = 0x82FA0BE82FA0BE83 * ((v70 - v67) >> 3);
      unint64_t v72 = 0x5F417D05F417D06 * ((v70 - v67) >> 3);
      if (v72 <= v35) {
        unint64_t v72 = v35;
      }
      if (v71 >= 0x5F417D05F417D0) {
        uint64_t v73 = 0xBE82FA0BE82FA0;
      }
      else {
        uint64_t v73 = v72;
      }
      uint64_t v74 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v64 + 1432) + 16))(*(void *)(v64 + 1432), 344 * v73, 8);
      unint64_t v75 = v74 + 344 * v68;
      uint64_t v76 = v74 + 344 * v35;
      uint64_t v77 = 344 * v35 - 344 * v68;
      __n128 v78 = 0uLL;
      unint64_t v79 = v75;
      do
      {
        if (v79)
        {
          *(void *)(v79 + 336) = 0;
          *(_OWORD *)(v79 + 304) = 0uLL;
          *(_OWORD *)(v79 + 320) = 0uLL;
          *(_OWORD *)(v79 + 272) = 0uLL;
          *(_OWORD *)(v79 + 288) = 0uLL;
          *(_OWORD *)(v79 + 240) = 0uLL;
          *(_OWORD *)(v79 + 256) = 0uLL;
          *(_OWORD *)(v79 + 208) = 0uLL;
          *(_OWORD *)(v79 + 224) = 0uLL;
          *(_OWORD *)(v79 + 176) = 0uLL;
          *(_OWORD *)(v79 + 192) = 0uLL;
          *(_OWORD *)(v79 + 144) = 0uLL;
          *(_OWORD *)(v79 + 160) = 0uLL;
          *(_OWORD *)(v79 + 112) = 0uLL;
          *(_OWORD *)(v79 + 128) = 0uLL;
          *(_OWORD *)(v79 + 80) = 0uLL;
          *(_OWORD *)(v79 + 96) = 0uLL;
          *(_OWORD *)(v79 + 48) = 0uLL;
          *(_OWORD *)(v79 + 64) = 0uLL;
          *(_OWORD *)(v79 + 16) = 0uLL;
          *(_OWORD *)(v79 + 32) = 0uLL;
          *(_OWORD *)unint64_t v79 = 0uLL;
        }
        v79 += 344;
        v77 -= 344;
      }
      while (v77);
      uint64_t v102 = v74 + 344 * v73;
      unint64_t v103 = *(std::__shared_weak_count ***)(v1121 + 1408);
      uint64_t v1134 = *(std::__shared_weak_count ***)(v1121 + 1416);
      if (v1134 == v103)
      {
        *(void *)(v1121 + 1408) = v75;
        *(void *)(v1121 + 1416) = v76;
        uint64_t v1111 = *(void *)(v1121 + 1424);
        *(void *)(v1121 + 1424) = v102;
      }
      else
      {
        uint64_t v104 = 0;
        do
        {
          unint64_t v105 = v75 + v104 * 8;
          uint64_t v106 = &v1134[v104 - 43];
          *(_OWORD *)(v75 + v104 * 8 - 344) = *(_OWORD *)v106;
          v1134[v104 - 42] = 0;
          long long v107 = *(_OWORD *)&v1134[v104 - 41];
          *uint64_t v106 = 0;
          *(_OWORD *)(v75 + v104 * 8 - 328) = v107;
          unsigned int v108 = &v1134[v104 - 39];
          *(void *)(v75 + v104 * 8 - 312) = *v108;
          *unsigned int v108 = 0;
          uint64_t v109 = v75 + v104 * 8 - 304;
          long long v110 = *(_OWORD *)&v1134[v104 - 38];
          long long v111 = *(_OWORD *)&v1134[v104 - 36];
          LODWORD(v108) = v1134[v104 - 34];
          v1134[v104 - 40] = 0;
          *(_DWORD *)(v109 + 32) = v108;
          *(_OWORD *)uint64_t v109 = v110;
          *(_OWORD *)(v109 + 16) = v111;
          long long v112 = *(_OWORD *)&v1134[v104 - 29];
          long long v113 = *(_OWORD *)&v1134[v104 - 27];
          long long v114 = *(_OWORD *)&v1134[v104 - 25];
          *(_OWORD *)(v105 - 248) = *(_OWORD *)&v1134[v104 - 31];
          *(_OWORD *)(v105 - 200) = v114;
          *(_OWORD *)(v105 - 216) = v113;
          *(_OWORD *)(v105 - 232) = v112;
          long long v115 = *(_OWORD *)&v1134[v104 - 21];
          long long v116 = *(_OWORD *)&v1134[v104 - 19];
          long long v117 = *(_OWORD *)((char *)&v1134[v104 - 17] - 7);
          *(_OWORD *)(v105 - 184) = *(_OWORD *)&v1134[v104 - 23];
          *(_OWORD *)(v105 - 143) = v117;
          *(_OWORD *)(v105 - 152) = v116;
          *(_OWORD *)(v105 - 168) = v115;
          *(_OWORD *)(v75 + v104 * 8 - 264) = *(_OWORD *)&v1134[v104 - 33];
          long long v118 = *(_OWORD *)&v1134[v104 - 15];
          long long v119 = *(_OWORD *)&v1134[v104 - 13];
          long long v120 = *(_OWORD *)&v1134[v104 - 11];
          *(_OWORD *)(v105 - 72) = *(_OWORD *)&v1134[v104 - 9];
          *(_OWORD *)(v105 - 88) = v120;
          *(_OWORD *)(v105 - 104) = v119;
          *(_OWORD *)(v105 - 120) = v118;
          __n128 v78 = *(__n128 *)&v1134[v104 - 7];
          long long v121 = *(_OWORD *)&v1134[v104 - 5];
          long long v122 = *(_OWORD *)&v1134[v104 - 3];
          *(void *)(v105 - 8) = v1134[v104 - 1];
          *(_OWORD *)(v105 - 24) = v122;
          *(_OWORD *)(v105 - 40) = v121;
          *(__n128 *)(v105 - 56) = v78;
          v104 -= 43;
        }
        while (&v1134[v104] != v103);
        uint64_t v123 = *(std::__shared_weak_count ***)(v1121 + 1408);
        unint64_t v124 = *(std::__shared_weak_count ***)(v1121 + 1416);
        *(void *)(v1121 + 1408) = v75 + v104 * 8;
        *(void *)(v1121 + 1416) = v76;
        uint64_t v1111 = *(void *)(v1121 + 1424);
        *(void *)(v1121 + 1424) = v102;
        uint64_t v1134 = v123;
        if (v124 != v123)
        {
          uint64_t v125 = v124 - 42;
          uint64_t v126 = v123;
          do
          {
            char v128 = v125[3];
            if (v128 && !atomic_fetch_add(&v128->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
              uint64_t v126 = v1134;
            }
            if (*v125)
            {
              std::__shared_weak_count::__release_weak(*v125);
              uint64_t v126 = v1134;
            }
            int v127 = v125 - 1;
            v125 -= 43;
          }
          while (v127 != v126);
        }
      }
      uint64_t v41 = (uint64_t *)(v9 + 8);
      if (v1134)
      {
        (*(void (**)(void, std::__shared_weak_count **, uint64_t, __n128))(**(void **)(v1121 + 1432) + 40))(*(void *)(v1121 + 1432), v1134, v1111 - (void)v1134, v78);
        uint64_t v41 = (uint64_t *)(v9 + 8);
      }
      goto LABEL_175;
    }
    uint64_t v100 = &v66[43 * v69];
    uint64_t v101 = 344 * v35 - 344 * v68;
    do
    {
      if (v66)
      {
        v66[42] = 0;
        *((_OWORD *)v66 + 19) = 0uLL;
        *((_OWORD *)v66 + 20) = 0uLL;
        *((_OWORD *)v66 + 17) = 0uLL;
        *((_OWORD *)v66 + 18) = 0uLL;
        *((_OWORD *)v66 + 15) = 0uLL;
        *((_OWORD *)v66 + 16) = 0uLL;
        *((_OWORD *)v66 + 13) = 0uLL;
        *((_OWORD *)v66 + 14) = 0uLL;
        *((_OWORD *)v66 + 11) = 0uLL;
        *((_OWORD *)v66 + 12) = 0uLL;
        *((_OWORD *)v66 + 9) = 0uLL;
        *((_OWORD *)v66 + 10) = 0uLL;
        *((_OWORD *)v66 + 7) = 0uLL;
        *((_OWORD *)v66 + 8) = 0uLL;
        *((_OWORD *)v66 + 5) = 0uLL;
        *((_OWORD *)v66 + 6) = 0uLL;
        *((_OWORD *)v66 + 3) = 0uLL;
        *((_OWORD *)v66 + 4) = 0uLL;
        *((_OWORD *)v66 + 1) = 0uLL;
        *((_OWORD *)v66 + 2) = 0uLL;
        *(_OWORD *)unint64_t v66 = 0uLL;
      }
      v66 += 43;
      v101 -= 344;
    }
    while (v101);
    unint64_t v66 = v100;
    goto LABEL_170;
  }
  if (v35 < v68)
  {
    BOOL v1133 = (std::__shared_weak_count **)(v67 + 344 * v35);
    if (v66 == v1133)
    {
LABEL_171:
      *(void *)(v1121 + 1416) = v66;
      goto LABEL_175;
    }
    uint64_t v97 = v66 - 42;
    do
    {
      float32x4_t v99 = v97[3];
      if (v99 && !atomic_fetch_add(&v99->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
      if (*v97) {
        std::__shared_weak_count::__release_weak(*v97);
      }
      unint64_t v98 = v97 - 1;
      v97 -= 43;
    }
    while (v98 != v1133);
    unint64_t v66 = v1133;
LABEL_170:
    uint64_t v41 = (uint64_t *)(v9 + 8);
    goto LABEL_171;
  }
LABEL_175:
  uint64_t v150 = 0;
  unsigned int v151 = v1130;
  do
  {
    unint64_t v152 = *(void *)(v9 + 24);
    if (v152 + 1 > 8 * *(void *)(v9 + 16))
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4526;
      goto LABEL_21;
    }
    unsigned int v153 = *(unsigned __int8 *)(*v41 + (v152 >> 3));
    *unsigned int v21 = v152 + 1;
    char v154 = ~(_BYTE)v152 & 7;
    uint64_t v155 = *a3;
    if ((v153 >> v154))
    {
      uint64_t v156 = 16 * v151;
      *(void *)(*(void *)(v155 + 1408) + v150 + 88) = *(void *)(*(void *)(*(void *)(v155 + 1400) + 8)
                                                                    + 8
                                                                    * *(void *)(*(void *)(*(void *)(v155 + 1400)
                                                                                            + 32)
                                                                                + v156));
      uint64_t v155 = *a3;
      if (*(void *)(*(void *)(*(void *)(*a3 + 1400) + 32) + v156 + 8) != 1)
      {
        uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 4529;
        goto LABEL_21;
      }
      ++v151;
      uint64_t v157 = *(void *)(v155 + 1408);
    }
    else
    {
      uint64_t v157 = *(void *)(v155 + 1408);
      *(unsigned char *)(v157 + v150 + 321) = 1;
    }
    uint64_t v158 = a3[1];
    if (v158) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v158 + 16), 1uLL, memory_order_relaxed);
    }
    long long v159 = (uint64_t *)(v157 + v150);
    uint64_t v160 = (std::__shared_weak_count *)v159[1];
    *long long v159 = v155;
    v159[1] = v158;
    if (v160) {
      std::__shared_weak_count::__release_weak(v160);
    }
    v150 += 344;
    --v65;
    uint64_t v41 = (uint64_t *)(v9 + 8);
  }
  while (v65);
  if (!geo::codec::decodeAttributeSet<GeoCodecsFeature>(3, v1154, v35, *a3 + 1112, *(void *)(*a3 + 1408), 344))
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 4537;
    goto LABEL_21;
  }
  uint64_t v161 = *(void *)(*a3 + 1408);
  if (*(void *)(*a3 + 1416) != v161)
  {
    unint64_t v162 = 0;
    while (1)
    {
      uint64_t v165 = *(void *)(v161 + 24);
      if (v165)
      {
        unint64_t v166 = *(unsigned __int8 *)(v165 + 33);
        if (*(unsigned char *)(v165 + 33))
        {
          uint64_t v167 = *(_DWORD **)v165;
          if (*v167 == 42)
          {
            int v168 = v167 + 1;
LABEL_196:
            int v163 = *v168;
            goto LABEL_191;
          }
          unint64_t v169 = 0;
          int v168 = v167 + 1;
          while (v166 - 1 != v169)
          {
            int v170 = v168[1];
            v168 += 2;
            ++v169;
            if (v170 == 42)
            {
              if (v169 >= v166) {
                break;
              }
              goto LABEL_196;
            }
          }
        }
      }
      LOBYTE(v163) = -1;
LABEL_191:
      *(unsigned char *)(v161 + 272) = v163;
      ++v162;
      v161 += 344;
      uint64_t v164 = *(void *)(*a3 + 1416);
      if (v162 >= 0x82FA0BE82FA0BE83 * ((v164 - *(void *)(*a3 + 1408)) >> 3))
      {
        uint64_t v161 = *(void *)(*a3 + 1408);
        goto LABEL_206;
      }
    }
  }
  uint64_t v164 = *(void *)(*a3 + 1408);
LABEL_206:
  uint64_t v41 = (uint64_t *)(v9 + 8);
LABEL_258:
  if ((geo::codec::_decodeTransitLabelsFromStream(v41, 0x82FA0BE82FA0BE83 * ((v164 - v161) >> 3), v161, 344, a3) & 1) == 0)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 4551;
    goto LABEL_21;
  }
  unint64_t v199 = *(void *)(v9 + 24);
  unint64_t v200 = v199 + 1;
  unint64_t v201 = 8 * *(void *)(v9 + 16);
  if (v199 + 1 > v201)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 4554;
    goto LABEL_21;
  }
  uint64_t v202 = *v1154;
  unsigned int v203 = *(unsigned __int8 *)(*v1154 + (v199 >> 3));
  *unsigned int v21 = v200;
  if ((v203 >> (~(_BYTE)v199 & 7)))
  {
    if (v199 + 7 > v201)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4557;
      goto LABEL_21;
    }
    int v204 = 0;
    unint64_t v205 = 6;
    do
    {
      unint64_t v206 = 8 - (v200 & 7);
      if (v205 < v206) {
        unint64_t v206 = v205;
      }
      int v204 = (*(unsigned __int8 *)(v202 + (v200 >> 3)) >> (8 - (v200 & 7) - v206)) & ~(-1 << v206) | (v204 << v206);
      v200 += v206;
      *unsigned int v21 = v200;
      v205 -= v206;
    }
    while (v205);
    uint64_t v207 = *(void *)(*a3 + 1416);
    uint64_t v208 = *(void *)(*a3 + 1408);
    uint64_t v209 = v207 - v208;
    if (v207 != v208)
    {
      unint64_t v210 = 0;
      unint64_t v211 = (v204 + 1);
      unint64_t v212 = 0x82FA0BE82FA0BE83 * (v209 >> 3);
      do
      {
        if (v200 + v211 > v201)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 4559;
          goto LABEL_21;
        }
        unint64_t v214 = 0;
        if (v211)
        {
          unint64_t v215 = v211;
          do
          {
            unint64_t v216 = 8 - (v200 & 7);
            if (v215 < v216) {
              unint64_t v216 = v215;
            }
            unint64_t v214 = (*(unsigned __int8 *)(v202 + (v200 >> 3)) >> (8 - (v200 & 7) - v216)) & (unint64_t)~(-1 << v216) | (v214 << v216);
            v200 += v216;
            *unsigned int v21 = v200;
            v215 -= v216;
          }
          while (v215);
        }
        *(void *)(v208 + 344 * v210 + 40) = v214;
        uint64_t v213 = v208 + 344 * v210;
        *(unsigned char *)(v213 + 75) = 1;
        *(void *)(v213 + 48) = *(void *)(v213 + 40);
        ++v210;
      }
      while (v210 < v212);
    }
  }
  unint64_t v217 = v200 + 1;
  if (v200 + 1 > v201)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 4567;
    goto LABEL_21;
  }
  unsigned int v218 = *(unsigned __int8 *)(v202 + (v200 >> 3));
  *unsigned int v21 = v217;
  if ((v218 >> (~(_BYTE)v200 & 7)))
  {
    if (v200 + 7 > v201)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4570;
      goto LABEL_21;
    }
    int v219 = 0;
    unint64_t v220 = 6;
    do
    {
      unint64_t v221 = 8 - (v217 & 7);
      if (v220 < v221) {
        unint64_t v221 = v220;
      }
      int v219 = (*(unsigned __int8 *)(v202 + (v217 >> 3)) >> (8 - (v217 & 7) - v221)) & ~(-1 << v221) | (v219 << v221);
      v217 += v221;
      *unsigned int v21 = v217;
      v220 -= v221;
    }
    while (v220);
    if (v217 + 5 > v201)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4572;
      goto LABEL_21;
    }
    int v222 = 0;
    unint64_t v223 = (v219 + 1);
    unint64_t v224 = 5;
    do
    {
      unint64_t v225 = 8 - (v217 & 7);
      if (v224 < v225) {
        unint64_t v225 = v224;
      }
      int v222 = (*(unsigned __int8 *)(v202 + (v217 >> 3)) >> (8 - (v217 & 7) - v225)) & ~(-1 << v225) | (v222 << v225);
      v217 += v225;
      *unsigned int v21 = v217;
      v224 -= v225;
    }
    while (v224);
    if (v217 + 5 > v201) {
      goto LABEL_301;
    }
    int v226 = 0;
    unint64_t v227 = (v222 + 1);
    unint64_t v228 = 5;
    do
    {
      unint64_t v229 = 8 - (v217 & 7);
      if (v228 < v229) {
        unint64_t v229 = v228;
      }
      int v226 = (*(unsigned __int8 *)(v202 + (v217 >> 3)) >> (8 - (v217 & 7) - v229)) & ~(-1 << v229) | (v226 << v229);
      v217 += v229;
      *unsigned int v21 = v217;
      v228 -= v229;
    }
    while (v228);
    unint64_t v230 = (v226 + 1);
    if (v217 + v230 > v201)
    {
LABEL_301:
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4575;
      goto LABEL_21;
    }
    if (v226 == -1) {
      goto LABEL_311;
    }
    LODWORD(v231) = 0;
    do
    {
      unint64_t v232 = 8 - (v217 & 7);
      if (v230 < v232) {
        unint64_t v232 = v230;
      }
      uint64_t v231 = (*(unsigned __int8 *)(v202 + (v217 >> 3)) >> (8 - (v217 & 7) - v232)) & ~(-1 << v232) | (v231 << v232);
      v217 += v232;
      *unsigned int v21 = v217;
      v230 -= v232;
    }
    while (v230);
    if (!v231)
    {
LABEL_311:
      int v234 = (void *)*a3;
    }
    else
    {
      {
        operator new();
      }
      uint64_t v233 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                  + 16))(geo::codec::Allocator::instance(void)::alloc, 8 * v231, 8);
      int v234 = (void *)*a3;
      v234[208] = v233;
      v234[209] = v231;
      if (!v233)
      {
        uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 4579;
        goto LABEL_21;
      }
    }
    if (v234[174])
    {
      {
        operator new();
      }
      uint64_t v235 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                  + 16))(geo::codec::Allocator::instance(void)::alloc, 16 * *(void *)(*a3 + 1392), 8);
      unsigned int v236 = (void *)*a3;
      v236[210] = v235;
      v236[211] = 2 * v236[174];
      if (!v235)
      {
        uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 4586;
        goto LABEL_21;
      }
    }
    {
      operator new();
    }
    uint64_t v237 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                + 16))(geo::codec::Allocator::instance(void)::alloc, 2 * *(void *)(*a3 + 1392), 8);
    uint64_t v238 = *a3;
    *(void *)(*a3 + 1768) = v237;
    if (!v237)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4591;
      goto LABEL_21;
    }
    uint64_t v239 = *(void *)(v238 + 1352);
    uint64_t v240 = *(void *)(v238 + 1344);
    unint64_t v217 = *(void *)(v9 + 24);
    unint64_t v201 = 8 * *(void *)(v9 + 16);
    if (v239 != v240)
    {
      unint64_t v241 = 0;
      uint64_t v1136 = 0;
      uint64_t v1112 = 0;
      uint64_t v242 = 0;
      do
      {
        unint64_t v243 = v217 + 1;
        if (v217 + 1 > v201)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 4602;
          goto LABEL_21;
        }
        uint64_t v1124 = *(void *)(*a3 + 1344);
        uint64_t v244 = *v1154;
        unsigned int v245 = *(unsigned __int8 *)(*v1154 + (v217 >> 3));
        *unsigned int v21 = v243;
        if ((v245 >> (~(_BYTE)v217 & 7)))
        {
          if (v243 + v227 > v201)
          {
            int v27 = 4605;
            goto LABEL_157;
          }
          unsigned int v246 = 0;
          if (v227)
          {
            unint64_t v247 = v227;
            do
            {
              unint64_t v248 = 8 - (v243 & 7);
              if (v247 < v248) {
                unint64_t v248 = v247;
              }
              unsigned int v246 = (*(unsigned __int8 *)(v244 + (v243 >> 3)) >> (8 - (v243 & 7) - v248)) & ~(-1 << v248) | (v246 << v248);
              v243 += v248;
              *unsigned int v21 = v243;
              v247 -= v248;
            }
            while (v247);
          }
          unint64_t v249 = v246;
          int v250 = (void *)*a3;
          uint64_t v251 = *(void *)(*a3 + 1408);
          if (0x82FA0BE82FA0BE83 * ((*(void *)(*a3 + 1416) - v251) >> 3) <= v249)
          {
            int v27 = 4606;
            goto LABEL_157;
          }
          uint64_t v252 = v251 + 344 * v249;
          uint64_t v253 = v250[168];
          *(void *)(v253 + 184 * v241 + 56) = *(void *)(v252 + 40);
        }
        else
        {
          if (v243 + v223 > v201)
          {
            uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 4614;
            goto LABEL_21;
          }
          int v250 = (void *)*a3;
          uint64_t v254 = *(void *)(*a3 + 1344);
          unint64_t v255 = 0;
          if (v223)
          {
            unint64_t v256 = v223;
            do
            {
              unint64_t v257 = 8 - (v243 & 7);
              if (v256 < v257) {
                unint64_t v257 = v256;
              }
              unint64_t v255 = (*(unsigned __int8 *)(v244 + (v243 >> 3)) >> (8 - (v243 & 7) - v257)) & (unint64_t)~(-1 << v257) | (v255 << v257);
              v243 += v257;
              *unsigned int v21 = v243;
              v256 -= v257;
            }
            while (v256);
            int v250 = (void *)*a3;
            uint64_t v253 = *(void *)(*a3 + 1344);
          }
          else
          {
            uint64_t v253 = *(void *)(*a3 + 1344);
          }
          uint64_t v252 = 0;
          *(void *)(v254 + 184 * v241 + 56) = v255;
        }
        *(void *)(v253 + 184 * v241 + 40) = v252;
        unint64_t v217 = v243 + 1;
        if (v243 + 1 > v201)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 4619;
          goto LABEL_21;
        }
        unsigned int v258 = *(unsigned __int8 *)(v244 + (v243 >> 3));
        *unsigned int v21 = v217;
        if ((v258 >> (~(_BYTE)v243 & 7)))
        {
          if (v217 + v227 > v201)
          {
            int v27 = 4622;
            goto LABEL_157;
          }
          unsigned int v259 = 0;
          if (v227)
          {
            unint64_t v260 = v227;
            do
            {
              unint64_t v261 = 8 - (v217 & 7);
              if (v260 < v261) {
                unint64_t v261 = v260;
              }
              unsigned int v259 = (*(unsigned __int8 *)(v244 + (v217 >> 3)) >> (8 - (v217 & 7) - v261)) & ~(-1 << v261) | (v259 << v261);
              v217 += v261;
              *unsigned int v21 = v217;
              v260 -= v261;
            }
            while (v260);
          }
          unint64_t v262 = v259;
          uint64_t v263 = v250[176];
          if (0x82FA0BE82FA0BE83 * ((v250[177] - v263) >> 3) <= v262)
          {
            int v27 = 4623;
            goto LABEL_157;
          }
          uint64_t v264 = v263 + 344 * v262;
          *(void *)(v253 + 184 * v241 + 64) = *(void *)(v264 + 40);
        }
        else
        {
          if (v217 + v223 > v201)
          {
            uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 4631;
            goto LABEL_21;
          }
          unint64_t v265 = 0;
          if (v223)
          {
            unint64_t v266 = v223;
            do
            {
              unint64_t v267 = 8 - (v217 & 7);
              if (v266 < v267) {
                unint64_t v267 = v266;
              }
              unint64_t v265 = (*(unsigned __int8 *)(v244 + (v217 >> 3)) >> (8 - (v217 & 7) - v267)) & (unint64_t)~(-1 << v267) | (v265 << v267);
              v217 += v267;
              *unsigned int v21 = v217;
              v266 -= v267;
            }
            while (v266);
          }
          uint64_t v264 = 0;
          *(void *)(v253 + 184 * v241 + 64) = v265;
        }
        *(void *)(v253 + 184 * v241 + 48) = v264;
        uint64_t v268 = v1124 + 184 * v241;
        *(void *)(v268 + 104) = v1136;
        unint64_t v269 = *(void *)(v268 + 32);
        if (v269)
        {
          unint64_t v270 = 0;
          uint64_t v271 = v1124 + 184 * v241;
          uint64_t v1099 = (unint64_t *)(v271 + 56);
          uint64_t v1093 = (unint64_t *)(v271 + 64);
          uint64_t v272 = v1136;
          do
          {
            unint64_t v275 = v217 + 1;
            if (v217 + 1 > v201)
            {
              int v27 = 4638;
              goto LABEL_157;
            }
            uint64_t v276 = *v1154;
            unsigned int v277 = *(unsigned __int8 *)(*v1154 + (v217 >> 3));
            *unsigned int v21 = v275;
            char v278 = (v277 >> (~(_BYTE)v217 & 7)) & 1;
            int8x16_t v279 = (void *)*a3;
            uint64_t v280 = *(void *)(*a3 + 1768);
            *(unsigned char *)(v280 + v242) = v278;
            unint64_t v281 = v217 + 2;
            if (v217 + 2 > v201)
            {
              int v27 = 4640;
              goto LABEL_157;
            }
            unsigned int v282 = *(unsigned __int8 *)(v276 + (v275 >> 3));
            *unsigned int v21 = v281;
            *(unsigned char *)(v242 + v280 + 1) = (v282 >> (~(_BYTE)v275 & 7)) & 1;
            unint64_t v283 = v217 + 3;
            if (v217 + 3 > v201)
            {
              uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
              int v27 = 4644;
              goto LABEL_21;
            }
            unsigned int v284 = *(unsigned __int8 *)(v276 + (v281 >> 3));
            *unsigned int v21 = v283;
            if ((v284 >> (~(_BYTE)v281 & 7)))
            {
              unint64_t v285 = v217 + 4;
              if (v285 > v201)
              {
                uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
                int v27 = 4647;
                goto LABEL_21;
              }
              unsigned int v286 = *(unsigned __int8 *)(v276 + (v283 >> 3));
              *unsigned int v21 = v285;
              if ((v286 >> (~(_BYTE)v283 & 7)))
              {
                if (v285 + v227 > v201)
                {
                  uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
                  int v27 = 4650;
                  goto LABEL_21;
                }
                unsigned int v287 = 0;
                if (v227)
                {
                  unint64_t v288 = v227;
                  do
                  {
                    unint64_t v289 = 8 - (v285 & 7);
                    if (v288 < v289) {
                      unint64_t v289 = v288;
                    }
                    unsigned int v287 = (*(unsigned __int8 *)(v276 + (v285 >> 3)) >> (8 - (v285 & 7) - v289)) & ~(-1 << v289) | (v287 << v289);
                    v285 += v289;
                    *unsigned int v21 = v285;
                    v288 -= v289;
                  }
                  while (v288);
                }
                uint32x4_t v290 = (unint64_t *)(v279[176] + 344 * v287 + 40);
              }
              else
              {
                if (v285 + v223 > v201)
                {
                  uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
                  int v27 = 4653;
                  goto LABEL_21;
                }
                uint64_t v291 = v279[208];
                unint64_t v292 = 0;
                if (v223)
                {
                  unint64_t v293 = v223;
                  do
                  {
                    unint64_t v294 = 8 - (v285 & 7);
                    if (v293 < v294) {
                      unint64_t v294 = v293;
                    }
                    unint64_t v292 = (*(unsigned __int8 *)(v276 + (v285 >> 3)) >> (8 - (v285 & 7) - v294)) & (unint64_t)~(-1 << v294) | (v292 << v294);
                    v285 += v294;
                    *unsigned int v21 = v285;
                    v293 -= v294;
                  }
                  while (v293);
                }
                uint32x4_t v290 = (unint64_t *)(v291 + 8 * v1112);
                *uint32x4_t v290 = v292;
                ++v1112;
              }
              unint64_t v283 = v285;
            }
            else
            {
              uint32x4_t v290 = v1099;
            }
            *(void *)(v279[210] + 8 * v272) = v290;
            unint64_t v217 = v283 + 1;
            if (v283 + 1 > v201)
            {
              uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
              int v27 = 4661;
              goto LABEL_21;
            }
            uint64_t v295 = *v1154;
            unsigned int v296 = *(unsigned __int8 *)(*v1154 + (v283 >> 3));
            *unsigned int v21 = v217;
            if ((v296 >> (~(_BYTE)v283 & 7)))
            {
              unint64_t v297 = v283 + 2;
              if (v283 + 2 > v201)
              {
                uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
                int v27 = 4664;
                goto LABEL_21;
              }
              unsigned int v298 = *(unsigned __int8 *)(v295 + (v217 >> 3));
              *unsigned int v21 = v297;
              if ((v298 >> (~(_BYTE)v217 & 7)))
              {
                if (v297 + v227 > v201)
                {
                  uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
                  int v27 = 4667;
                  goto LABEL_21;
                }
                unsigned int v299 = 0;
                if (v227)
                {
                  unint64_t v300 = v227;
                  do
                  {
                    unint64_t v301 = 8 - (v297 & 7);
                    if (v300 < v301) {
                      unint64_t v301 = v300;
                    }
                    unsigned int v299 = (*(unsigned __int8 *)(v295 + (v297 >> 3)) >> (8 - (v297 & 7) - v301)) & ~(-1 << v301) | (v299 << v301);
                    v297 += v301;
                    *unsigned int v21 = v297;
                    v300 -= v301;
                  }
                  while (v300);
                }
                uint64_t v273 = *a3;
                __int16 v274 = (unint64_t *)(*(void *)(*a3 + 1408) + 344 * v299 + 40);
                unint64_t v217 = v297;
              }
              else
              {
                if (v297 + v223 > v201)
                {
                  uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
                  int v27 = 4670;
                  goto LABEL_21;
                }
                uint64_t v273 = *a3;
                uint64_t v302 = *(void *)(*a3 + 1664);
                unint64_t v303 = 0;
                if (v223)
                {
                  unint64_t v304 = v223;
                  do
                  {
                    unint64_t v305 = 8 - (v297 & 7);
                    if (v304 < v305) {
                      unint64_t v305 = v304;
                    }
                    unint64_t v303 = (*(unsigned __int8 *)(v295 + (v297 >> 3)) >> (8 - (v297 & 7) - v305)) & (unint64_t)~(-1 << v305) | (v303 << v305);
                    v297 += v305;
                    *unsigned int v21 = v297;
                    v304 -= v305;
                  }
                  while (v304);
                }
                __int16 v274 = (unint64_t *)(v302 + 8 * v1112);
                *__int16 v274 = v303;
                ++v1112;
                unint64_t v217 = v297;
              }
            }
            else
            {
              uint64_t v273 = *a3;
              __int16 v274 = v1093;
            }
            v242 += 2;
            *(void *)(*(void *)(v273 + 1680) + 8 * (v272 + 1)) = v274;
            v272 += 2;
            ++v270;
          }
          while (v270 < v269);
          int v250 = (void *)*a3;
        }
        else
        {
          uint64_t v272 = v1136;
        }
        *(void *)(v1124 + 184 * v241++ + 112) = v272 - v1136;
        uint64_t v1136 = v272;
      }
      while (v241 < 0xD37A6F4DE9BD37A7 * ((uint64_t)(v250[169] - v250[168]) >> 3));
    }
  }
  unint64_t v306 = v217 + 1;
  if (v217 + 1 > v201)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 4683;
    goto LABEL_21;
  }
  uint64_t v307 = *v1154;
  unsigned int v308 = *(unsigned __int8 *)(*v1154 + (v217 >> 3));
  *unsigned int v21 = v306;
  if ((v308 >> (~(_BYTE)v217 & 7)))
  {
    if (v217 + 6 > v201)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4686;
      goto LABEL_21;
    }
    int v309 = 0;
    unint64_t v310 = 5;
    do
    {
      unint64_t v311 = 8 - (v306 & 7);
      if (v310 < v311) {
        unint64_t v311 = v310;
      }
      int v309 = (*(unsigned __int8 *)(v307 + (v306 >> 3)) >> (8 - (v306 & 7) - v311)) & ~(-1 << v311) | (v309 << v311);
      v306 += v311;
      *unsigned int v21 = v306;
      v310 -= v311;
    }
    while (v310);
    if (v306 + 5 > v201)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4688;
      goto LABEL_21;
    }
    int v312 = 0;
    unint64_t v313 = (v309 + 1);
    unint64_t v314 = 5;
    do
    {
      unint64_t v315 = 8 - (v306 & 7);
      if (v314 < v315) {
        unint64_t v315 = v314;
      }
      int v312 = (*(unsigned __int8 *)(v307 + (v306 >> 3)) >> (8 - (v306 & 7) - v315)) & ~(-1 << v315) | (v312 << v315);
      v306 += v315;
      *unsigned int v21 = v306;
      v314 -= v315;
    }
    while (v314);
    if (v306 + 5 > v201)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4690;
      goto LABEL_21;
    }
    int v316 = 0;
    unint64_t v317 = (v312 + 1);
    unint64_t v318 = 5;
    do
    {
      unint64_t v319 = 8 - (v306 & 7);
      if (v318 < v319) {
        unint64_t v319 = v318;
      }
      int v316 = (*(unsigned __int8 *)(v307 + (v306 >> 3)) >> (8 - (v306 & 7) - v319)) & ~(-1 << v319) | (v316 << v319);
      v306 += v319;
      *unsigned int v21 = v306;
      v318 -= v319;
    }
    while (v318);
    unint64_t v320 = (v316 + 1);
    if (v306 + v320 > v201)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4693;
      goto LABEL_21;
    }
    if (v316 == -1)
    {
      uint64_t v323 = *a3;
      *(void *)(*a3 + 1448) = 0;
    }
    else
    {
      LODWORD(v321) = 0;
      do
      {
        unint64_t v322 = 8 - (v306 & 7);
        if (v320 < v322) {
          unint64_t v322 = v320;
        }
        uint64_t v321 = (*(unsigned __int8 *)(v307 + (v306 >> 3)) >> (8 - (v306 & 7) - v322)) & ~(-1 << v322) | (v321 << v322);
        v306 += v322;
        *unsigned int v21 = v306;
        v320 -= v322;
      }
      while (v320);
      uint64_t v323 = *a3;
      *(void *)(*a3 + 1448) = v321;
      if (v321)
      {
        {
          operator new();
        }
        uint64_t v324 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                   + 24))(geo::codec::Allocator::instance(void)::alloc, *(void *)(*a3 + 1448), 8);
        uint64_t v323 = *a3;
        *(void *)(*a3 + 1440) = v324;
        if (!v324)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 4698;
          goto LABEL_21;
        }
      }
    }
    if (*(void *)(v323 + 1416) != *(void *)(v323 + 1408))
    {
      unint64_t v325 = 0;
      uint64_t v326 = 0;
      uint64_t v327 = *a3;
      do
      {
        unint64_t v328 = *(void *)(v9 + 24);
        if (v328 + v313 > 8 * *(void *)(v9 + 16))
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 4704;
          goto LABEL_21;
        }
        unsigned int v329 = 0;
        if (v313)
        {
          uint64_t v330 = *v1154;
          unint64_t v331 = v313;
          do
          {
            unint64_t v332 = 8 - (v328 & 7);
            if (v331 < v332) {
              unint64_t v332 = v331;
            }
            unsigned int v329 = (*(unsigned __int8 *)(v330 + (v328 >> 3)) >> (8 - (v328 & 7) - v332)) & ~(-1 << v332) | (v329 << v332);
            v328 += v332;
            *unsigned int v21 = v328;
            v331 -= v332;
          }
          while (v331);
          uint64_t v333 = *(void *)(v327 + 1408);
          *(void *)(v333 + 344 * v325 + 224) = v326;
          if (v329)
          {
            unsigned int v334 = (void *)*a3;
            if (v317)
            {
              int v335 = v329 + v326;
              while (1)
              {
                unint64_t v336 = *(void *)(v9 + 24);
                if (v336 + v317 > 8 * *(void *)(v9 + 16)) {
                  break;
                }
                LODWORD(v337) = 0;
                unint64_t v338 = v317;
                do
                {
                  unint64_t v339 = 8 - (v336 & 7);
                  if (v338 < v339) {
                    unint64_t v339 = v338;
                  }
                  uint64_t v337 = (*(unsigned __int8 *)(v330 + (v336 >> 3)) >> (8 - (v336 & 7) - v339)) & ~(-1 << v339) | (v337 << v339);
                  v336 += v339;
                  *unsigned int v21 = v336;
                  v338 -= v339;
                }
                while (v338);
                uint64_t v340 = v326 + 1;
                *(void *)(v334[180] + 8 * v326) = v337;
                uint64_t v326 = v340;
                if (v335 == v340) {
                  goto LABEL_465;
                }
              }
LABEL_498:
              uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
              int v27 = 4708;
              goto LABEL_21;
            }
            unsigned int v342 = v329;
            do
            {
              if (*(void *)(v9 + 24) + v317 > 8 * *(void *)(v9 + 16)) {
                goto LABEL_498;
              }
              uint64_t v340 = v326 + 1;
              *(void *)(v334[180] + 8 * v326++) = 0;
              --v342;
            }
            while (v342);
LABEL_465:
            uint64_t v333 = v334[176];
            uint64_t v341 = *(void *)(v333 + 344 * v325 + 224);
            uint64_t v326 = v340;
            goto LABEL_466;
          }
        }
        else
        {
          uint64_t v333 = *(void *)(v327 + 1408);
          *(void *)(v333 + 344 * v325 + 224) = v326;
        }
        uint64_t v341 = v326;
        unsigned int v334 = (void *)v327;
LABEL_466:
        *(void *)(v333 + 344 * v325 + 232) = v329;
        if (v341 + (unint64_t)v329 > v334[181])
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 4712;
          goto LABEL_21;
        }
        ++v325;
      }
      while (v325 < 0x82FA0BE82FA0BE83 * ((v334[177] - v333) >> 3));
    }
  }
  unint64_t v343 = *(void *)(v9 + 24);
  if (*(_DWORD *)(v9 + 64) >= 9u)
  {
    if (v343 + 1 > 8 * *(void *)(v9 + 16))
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4723;
      goto LABEL_21;
    }
    unsigned int v344 = *(unsigned __int8 *)(*v1154 + (v343 >> 3));
    *unsigned int v21 = v343 + 1;
    unsigned int v345 = v344 >> (~(_BYTE)v343++ & 7);
    if (v345)
    {
      {
        operator new();
      }
      uint64_t v1125 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                   + 16))(geo::codec::Allocator::instance(void)::alloc, 4 * *(void *)(*a3 + 1392), 8);
      unint64_t v1094 = (void *)*a3;
      *(void *)(*a3 + 1528) = v1125;
      if (!v1125)
      {
        uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 4726;
        goto LABEL_21;
      }
      unint64_t v343 = *(void *)(v9 + 24);
      unint64_t v1113 = 8 * *(void *)(v9 + 16);
      if (v343 + 5 > v1113)
      {
        int v27 = 4729;
        goto LABEL_157;
      }
      int v346 = 0;
      uint64_t v347 = *v1154;
      unint64_t v348 = 5;
      do
      {
        unint64_t v349 = 8 - (v343 & 7);
        if (v348 < v349) {
          unint64_t v349 = v348;
        }
        int v346 = (*(unsigned __int8 *)(v347 + (v343 >> 3)) >> (8 - (v343 & 7) - v349)) & ~(-1 << v349) | (v346 << v349);
        v343 += v349;
        *unsigned int v21 = v343;
        v348 -= v349;
      }
      while (v348);
      uint64_t v1087 = v1094[168];
      uint64_t v350 = v1094[169] - v1087;
      if (v350)
      {
        uint64_t v1100 = 0;
        uint64_t v351 = 0;
        unint64_t v1137 = (v346 + 1);
        uint64_t v352 = v350 / 184;
        if ((unint64_t)(v350 / 184) <= 1) {
          uint64_t v352 = 1;
        }
        unint64_t v1081 = (std::__shared_weak_count *)v352;
        do
        {
          if (*(void *)(v1087 + 184 * (void)v1100 + 32))
          {
            uint64_t v353 = *(void *)(v1087 + 184 * (void)v1100 + 32);
            if (v1137)
            {
              uint64_t v354 = v351 + v353;
              do
              {
                if (v343 + v1137 > v1113) {
                  goto LABEL_499;
                }
                int v355 = 0;
                unint64_t v356 = v1137;
                do
                {
                  unint64_t v357 = 8 - (v343 & 7);
                  if (v356 < v357) {
                    unint64_t v357 = v356;
                  }
                  int v355 = (*(unsigned __int8 *)(v347 + (v343 >> 3)) >> (8 - (v343 & 7) - v357)) & ~(-1 << v357) | (v355 << v357);
                  v343 += v357;
                  *unsigned int v21 = v343;
                  v356 -= v357;
                }
                while (v356);
                *(_DWORD *)(v1125 + 4 * v351++) = v355;
              }
              while (v351 != v354);
              uint64_t v351 = v354;
            }
            else
            {
              if (v343 + v1137 > v1113)
              {
LABEL_499:
                int v27 = 4736;
                goto LABEL_157;
              }
              uint64_t v1073 = v351;
              uint64_t v1076 = *(void *)(v1087 + 184 * (void)v1100 + 32);
              bzero((void *)(v1125 + 4 * v351), 4 * v353);
              uint64_t v351 = v1073 + v1076;
            }
          }
          uint64_t v1100 = (std::__shared_weak_count *)((char *)v1100 + 1);
        }
        while (v1100 != v1081);
      }
      else
      {
        uint64_t v351 = 0;
      }
      if (v351 != v1094[174])
      {
        int v27 = 4739;
        goto LABEL_157;
      }
    }
  }
  uint64_t v358 = *a3;
  if (*(void *)(*a3 + 1352) != *(void *)(*a3 + 1344))
  {
    if (v343 + 1 > 8 * *(void *)(v9 + 16))
    {
      int v27 = 4745;
      goto LABEL_157;
    }
    unsigned int v359 = *(unsigned __int8 *)(*v1154 + (v343 >> 3));
    *unsigned int v21 = v343 + 1;
    unsigned int v360 = v359 >> (~(_BYTE)v343++ & 7);
    if (v360)
    {
      int v27 = 4746;
      goto LABEL_157;
    }
  }
  if (*(_DWORD *)(v9 + 64) < 0xCu)
  {
    unsigned int v1126 = 0;
  }
  else
  {
    unint64_t v361 = v343 + 1;
    unint64_t v362 = 8 * *(void *)(v9 + 16);
    if (v343 + 1 > v362)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4752;
      goto LABEL_21;
    }
    uint64_t v368 = *v1154;
    unsigned int v369 = *(unsigned __int8 *)(*v1154 + (v343 >> 3));
    *unsigned int v21 = v361;
    if ((v369 >> (~(_BYTE)v343 & 7)))
    {
      if (v343 + 6 > v362) {
        goto LABEL_523;
      }
      int v370 = 0;
      unint64_t v371 = 5;
      do
      {
        unint64_t v372 = 8 - (v361 & 7);
        if (v371 < v372) {
          unint64_t v372 = v371;
        }
        int v370 = (*(unsigned __int8 *)(v368 + (v361 >> 3)) >> (8 - (v361 & 7) - v372)) & ~(-1 << v372) | (v370 << v372);
        v361 += v372;
        *unsigned int v21 = v361;
        v371 -= v372;
      }
      while (v371);
      unint64_t v373 = (v370 + 1);
      if (v361 + v373 > v362)
      {
LABEL_523:
        uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 4755;
        goto LABEL_21;
      }
      unsigned int v386 = 0;
      if (v373)
      {
        do
        {
          unint64_t v387 = 8 - (v361 & 7);
          if (v373 < v387) {
            unint64_t v387 = v373;
          }
          unsigned int v386 = (*(unsigned __int8 *)(v368 + (v361 >> 3)) >> (8 - (v361 & 7) - v387)) & ~(-1 << v387) | (v386 << v387);
          v361 += v387;
          *unsigned int v21 = v361;
          v373 -= v387;
        }
        while (v373);
      }
      uint64_t v388 = *(void *)(v358 + 1568);
      uint64_t v389 = *(void *)(v358 + 1560);
      unint64_t v390 = 0xEF7BDEF7BDEF7BDFLL * ((v388 - v389) >> 3);
      uint64_t v1127 = v386;
      unint64_t v391 = v386 - v390;
      if (v386 <= v390)
      {
        if (v386 >= v390)
        {
LABEL_672:
          unint64_t v467 = *(void *)(v9 + 24);
          unint64_t v468 = 8 * *(void *)(v9 + 16);
          if (v467 + 6 > v468)
          {
            uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 4759;
            goto LABEL_21;
          }
          int v469 = 0;
          uint64_t v470 = *v1154;
          unint64_t v471 = 6;
          do
          {
            unint64_t v472 = 8 - (v467 & 7);
            if (v471 < v472) {
              unint64_t v472 = v471;
            }
            int v469 = (*(unsigned __int8 *)(v470 + (v467 >> 3)) >> (8 - (v467 & 7) - v472)) & ~(-1 << v472) | (v469 << v472);
            v467 += v472;
            *unsigned int v21 = v467;
            v471 -= v472;
          }
          while (v471);
          if (v467 + 5 > v468)
          {
            uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 4762;
            goto LABEL_21;
          }
          int v473 = 0;
          unint64_t v474 = (v469 + 1);
          unint64_t v475 = 5;
          do
          {
            unint64_t v476 = 8 - (v467 & 7);
            if (v475 < v476) {
              unint64_t v476 = v475;
            }
            int v473 = (*(unsigned __int8 *)(v470 + (v467 >> 3)) >> (8 - (v467 & 7) - v476)) & ~(-1 << v476) | (v473 << v476);
            v467 += v476;
            *unsigned int v21 = v467;
            v475 -= v476;
          }
          while (v475);
          if (v467 + 6 > v468)
          {
            uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 4765;
            goto LABEL_21;
          }
          int v477 = 0;
          unint64_t v1140 = (v473 + 1);
          unint64_t v478 = 6;
          do
          {
            unint64_t v479 = 8 - (v467 & 7);
            if (v478 < v479) {
              unint64_t v479 = v478;
            }
            int v477 = (*(unsigned __int8 *)(v470 + (v467 >> 3)) >> (8 - (v467 & 7) - v479)) & ~(-1 << v479) | (v477 << v479);
            v467 += v479;
            *unsigned int v21 = v467;
            v478 -= v479;
          }
          while (v478);
          if (v467 + 5 > v468)
          {
            uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 4768;
            goto LABEL_21;
          }
          int v480 = 0;
          unint64_t v1115 = (v477 + 1);
          unint64_t v481 = 5;
          do
          {
            unint64_t v482 = 8 - (v467 & 7);
            if (v481 < v482) {
              unint64_t v482 = v481;
            }
            int v480 = (*(unsigned __int8 *)(v470 + (v467 >> 3)) >> (8 - (v467 & 7) - v482)) & ~(-1 << v482) | (v480 << v482);
            v467 += v482;
            *unsigned int v21 = v467;
            v481 -= v482;
          }
          while (v481);
          __p[0] = 0;
          if ((geo::codec::decodeSectionEncoding((geo::codec::Allocator *)v1154, (geo::codec::Allocator **)__p, 0, 0, 0) & 1) == 0)
          {
            int v27 = 4771;
            goto LABEL_157;
          }
          if (!__p[0]
            || !*((void *)__p[0] + 1)
            || (uint64_t v483 = *(void *)(*a3 + 1560),
                *((void *)__p[0] + 2) != 0xEF7BDEF7BDEF7BDFLL * ((*(void *)(*a3 + 1568) - v483) >> 3)))
          {
            int v27 = 4772;
            goto LABEL_157;
          }
          if (!geo::codec::decodeAttributeSet<GeoCodecsFeature>(3, v1154, v1127, *a3 + 1112, v483, 248))
          {
            int v27 = 4773;
            goto LABEL_157;
          }
          uint64_t v484 = __p[0];
          if (__p[0]) {
            unsigned int v1126 = *(unsigned __int8 *)__p[0];
          }
          else {
            unsigned int v1126 = 0;
          }
          uint64_t v501 = *(void *)(*a3 + 1560);
          if (*(void *)(*a3 + 1568) != v501)
          {
            unint64_t v1102 = 0;
            do
            {
              *(void *)(v501 + 248 * v1102 + 88) = *(void *)(*((void *)__p[0] + 1) + 8 * v1102);
              uint64_t v502 = *a3;
              uint64_t v503 = a3[1];
              uint64_t v504 = *(void *)(*a3 + 1560);
              if (v503) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v503 + 16), 1uLL, memory_order_relaxed);
              }
              char v505 = (uint64_t *)(v504 + 248 * v1102);
              int v506 = (std::__shared_weak_count *)v505[1];
              *char v505 = v502;
              v505[1] = v503;
              if (v506) {
                std::__shared_weak_count::__release_weak(v506);
              }
              unint64_t v507 = *(void *)(v9 + 24);
              unint64_t v508 = 8 * *(void *)(v9 + 16);
              if (v507 + v474 > v508)
              {
                int v27 = 4779;
                goto LABEL_157;
              }
              char v509 = (void *)*a3;
              uint64_t v501 = *(void *)(*a3 + 1560);
              unint64_t v510 = 0;
              if (v474)
              {
                uint64_t v511 = *v1154;
                unint64_t v512 = v474;
                do
                {
                  unint64_t v513 = 8 - (v507 & 7);
                  if (v512 < v513) {
                    unint64_t v513 = v512;
                  }
                  unint64_t v510 = (*(unsigned __int8 *)(v511 + (v507 >> 3)) >> (8 - (v507 & 7) - v513)) & (unint64_t)~(-1 << v513) | (v510 << v513);
                  v507 += v513;
                  *unsigned int v21 = v507;
                  v512 -= v513;
                }
                while (v512);
              }
              uint64_t v514 = v501 + 248 * v1102;
              *(void *)(v514 + 40) = v510;
              *(unsigned char *)(v514 + 75) = 1;
              *(void *)(v514 + 48) = v510;
              unint64_t v515 = v507 + 1;
              if (v507 + 1 > v508)
              {
                int v27 = 4784;
                goto LABEL_157;
              }
              uint64_t v516 = *v1154;
              unsigned int v517 = *(unsigned __int8 *)(*v1154 + (v507 >> 3));
              *unsigned int v21 = v515;
              if ((v517 >> (~(_BYTE)v507 & 7)))
              {
                if (v515 + v1140 > v508)
                {
                  int v27 = 4787;
                  goto LABEL_157;
                }
                if (v1140)
                {
                  unsigned int v518 = 0;
                  unint64_t v519 = v1140;
                  do
                  {
                    unint64_t v520 = 8 - (v515 & 7);
                    if (v519 < v520) {
                      unint64_t v520 = v519;
                    }
                    unsigned int v518 = (*(unsigned __int8 *)(v516 + (v515 >> 3)) >> (8 - (v515 & 7) - v520)) & ~(-1 << v520) | (v518 << v520);
                    v515 += v520;
                    *unsigned int v21 = v515;
                    v519 -= v520;
                  }
                  while (v519);
                }
                else
                {
                  unsigned int v518 = 0;
                }
                unint64_t v526 = v518;
                uint64_t v527 = v509[176];
                if (0x82FA0BE82FA0BE83 * ((v509[177] - v527) >> 3) <= v526)
                {
                  int v27 = 4788;
                  goto LABEL_157;
                }
                *(void *)(v501 + 248 * v1102 + 224) = *(void *)(v527 + 344 * v526 + 40);
                unint64_t v525 = v515 + 1;
                if (v515 + 1 > v508)
                {
LABEL_809:
                  int v27 = 4794;
                  goto LABEL_157;
                }
              }
              else
              {
                if (v515 + v1115 > v508)
                {
                  int v27 = 4791;
                  goto LABEL_157;
                }
                unint64_t v521 = (unint64_t *)(v501 + 248 * v1102 + 224);
                if (v1115)
                {
                  unint64_t v522 = 0;
                  unint64_t v523 = v1115;
                  do
                  {
                    unint64_t v524 = 8 - (v515 & 7);
                    if (v523 < v524) {
                      unint64_t v524 = v523;
                    }
                    unint64_t v522 = (*(unsigned __int8 *)(v516 + (v515 >> 3)) >> (8 - (v515 & 7) - v524)) & (unint64_t)~(-1 << v524) | (v522 << v524);
                    v515 += v524;
                    *unsigned int v21 = v515;
                    v523 -= v524;
                  }
                  while (v523);
                  *unint64_t v521 = v522;
                  unint64_t v525 = v515 + 1;
                  if (v515 + 1 > v508) {
                    goto LABEL_809;
                  }
                }
                else
                {
                  *unint64_t v521 = 0;
                  unint64_t v525 = v515 + 1;
                  if (v515 + 1 > v508) {
                    goto LABEL_809;
                  }
                }
              }
              unsigned int v528 = *(unsigned __int8 *)(v516 + (v515 >> 3));
              *unsigned int v21 = v525;
              unint64_t v529 = v515 + 2;
              if (v515 + 2 > v508)
              {
                int v27 = 4795;
                goto LABEL_157;
              }
              char v530 = ~(_BYTE)v515 & 7;
              int v531 = *(unsigned __int8 *)(v516 + (v525 >> 3));
              *unsigned int v21 = v529;
              if ((v528 >> v530)) {
                *(unsigned char *)(v501 + 248 * v1102 + 232) |= 1u;
              }
              if (((1 << (~(_BYTE)v525 & 7)) & v531) != 0) {
                *(unsigned char *)(v501 + 248 * v1102 + 232) |= 2u;
              }
              if (v529 + (v480 + 1) > v508)
              {
                int v27 = 4801;
                goto LABEL_157;
              }
              if (v480 == -1)
              {
                unsigned int v532 = 0;
              }
              else
              {
                unsigned int v532 = 0;
                unint64_t v533 = (v480 + 1);
                do
                {
                  unint64_t v534 = 8 - (v529 & 7);
                  if (v533 < v534) {
                    unint64_t v534 = v533;
                  }
                  unsigned int v532 = (*(unsigned __int8 *)(v516 + (v529 >> 3)) >> (8 - (v529 & 7) - v534)) & ~(-1 << v534) | (v532 << v534);
                  v529 += v534;
                  *unsigned int v21 = v529;
                  v533 -= v534;
                }
                while (v533);
              }
              *(float *)(v501 + 248 * v1102 + 236) = (float)v532 * 0.1;
              unint64_t v535 = v529 + 1;
              if (v529 + 1 > v508)
              {
                int v27 = 4804;
                goto LABEL_157;
              }
              unsigned int v536 = *(unsigned __int8 *)(v516 + (v529 >> 3));
              *unsigned int v21 = v535;
              if ((v536 >> (~(_BYTE)v529 & 7)))
              {
                if (v529 + 5 > v508)
                {
                  int v27 = 4807;
                  goto LABEL_157;
                }
                int v537 = 0;
                unint64_t v538 = 4;
                do
                {
                  unint64_t v539 = 8 - (v535 & 7);
                  if (v538 < v539) {
                    unint64_t v539 = v538;
                  }
                  int v537 = (*(unsigned __int8 *)(v516 + (v535 >> 3)) >> (8 - (v535 & 7) - v539)) & ~(-1 << v539) | (v537 << v539);
                  v535 += v539;
                  *unsigned int v21 = v535;
                  v538 -= v539;
                }
                while (v538);
                unint64_t v540 = (v537 + 1);
                if (v535 + v540 > v508)
                {
                  int v27 = 4810;
                  goto LABEL_157;
                }
                int v541 = 0;
                if (v537 != -1)
                {
                  do
                  {
                    unint64_t v542 = 8 - (v535 & 7);
                    if (v540 < v542) {
                      unint64_t v542 = v540;
                    }
                    int v541 = (*(unsigned __int8 *)(v516 + (v535 >> 3)) >> (8 - (v535 & 7) - v542)) & ~(-1 << v542) | (v541 << v542);
                    v535 += v542;
                    *unsigned int v21 = v535;
                    v540 -= v542;
                  }
                  while (v540);
                }
                *(_WORD *)(v501 + 248 * v1102 + 240) = v541;
              }
              ++v1102;
            }
            while (v1102 < 0xEF7BDEF7BDEF7BDFLL * ((v509[196] - v501) >> 3));
            uint64_t v484 = __p[0];
          }
          if (v484)
          {
            if (v484[1])
            {
              {
                operator new();
              }
              (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                              + 40))(geo::codec::Allocator::instance(void)::alloc, *((void *)__p[0] + 1), 0);
              uint64_t v484 = __p[0];
            }
            if (v484[4])
            {
              {
                operator new();
              }
              (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                              + 40))(geo::codec::Allocator::instance(void)::alloc, *((void *)__p[0] + 4), 0);
            }
            {
              operator new();
            }
            (*(void (**)(uint64_t, void *, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                            + 40))(geo::codec::Allocator::instance(void)::alloc, __p[0], 0);
          }
          unint64_t v343 = *v21;
          goto LABEL_511;
        }
        uint64_t v1138 = v389 + 248 * v386;
        if (v388 != v1138)
        {
          do
          {
            uint64_t v401 = *(std::__shared_weak_count **)(v388 - 216);
            if (v401 && !atomic_fetch_add(&v401->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
              std::__shared_weak_count::__release_weak(v401);
            }
            unint64_t v402 = *(std::__shared_weak_count **)(v388 - 240);
            if (v402) {
              std::__shared_weak_count::__release_weak(v402);
            }
            v388 -= 248;
          }
          while (v388 != v1138);
          uint64_t v388 = v1138;
        }
      }
      else
      {
        uint64_t v392 = *(void *)(v358 + 1576);
        if (0xEF7BDEF7BDEF7BDFLL * ((v392 - v388) >> 3) < v391)
        {
          unint64_t v393 = 0xEF7BDEF7BDEF7BDFLL * ((v392 - v389) >> 3);
          uint64_t v394 = 2 * v393;
          if (2 * v393 <= v386) {
            uint64_t v394 = v386;
          }
          if (v393 >= 0x84210842108421) {
            uint64_t v395 = 0x108421084210842;
          }
          else {
            uint64_t v395 = v394;
          }
          uint64_t v396 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v358 + 1584) + 16))(*(void *)(v358 + 1584), 248 * v395, 8);
          unint64_t v397 = v396 + 248 * v390;
          uint64_t v398 = v396 + 248 * v1127;
          uint64_t v399 = 248 * v1127 - 248 * v390;
          unint64_t v400 = v397;
          do
          {
            if (v400)
            {
              *(void *)(v400 + 240) = 0;
              *(_OWORD *)(v400 + 208) = 0uLL;
              *(_OWORD *)(v400 + 224) = 0uLL;
              *(_OWORD *)(v400 + 176) = 0uLL;
              *(_OWORD *)(v400 + 192) = 0uLL;
              *(_OWORD *)(v400 + 144) = 0uLL;
              *(_OWORD *)(v400 + 160) = 0uLL;
              *(_OWORD *)(v400 + 112) = 0uLL;
              *(_OWORD *)(v400 + 128) = 0uLL;
              *(_OWORD *)(v400 + 80) = 0uLL;
              *(_OWORD *)(v400 + 96) = 0uLL;
              *(_OWORD *)(v400 + 48) = 0uLL;
              *(_OWORD *)(v400 + 64) = 0uLL;
              *(_OWORD *)(v400 + 16) = 0uLL;
              *(_OWORD *)(v400 + 32) = 0uLL;
              *(_OWORD *)unint64_t v400 = 0uLL;
            }
            v400 += 248;
            v399 -= 248;
          }
          while (v399);
          uint64_t v415 = v396 + 248 * v395;
          uint64_t v416 = *(void *)(v358 + 1560);
          uint64_t i = *(void *)(v358 + 1568);
          if (i == v416)
          {
            *(void *)(v358 + 1560) = v397;
            *(void *)(v358 + 1568) = v398;
            uint64_t v1114 = *(void *)(v358 + 1576);
            *(void *)(v358 + 1576) = v415;
          }
          else
          {
            uint64_t v417 = 0;
            do
            {
              uint64_t v418 = v397 + v417;
              uint64_t v419 = i + v417;
              *(_OWORD *)(v418 - 248) = *(_OWORD *)(i + v417 - 248);
              long long v420 = *(_OWORD *)(i + v417 - 232);
              *(void *)(v419 - 248) = 0;
              *(void *)(v419 - 240) = 0;
              *(_OWORD *)(v418 - 232) = v420;
              *(void *)(v418 - 216) = *(void *)(i + v417 - 216);
              *(void *)(v419 - 224) = 0;
              *(void *)(v419 - 216) = 0;
              long long v421 = *(_OWORD *)(i + v417 - 208);
              long long v422 = *(_OWORD *)(i + v417 - 192);
              *(_DWORD *)(v418 - 176) = *(_DWORD *)(i + v417 - 176);
              *(_OWORD *)(v418 - 208) = v421;
              *(_OWORD *)(v418 - 192) = v422;
              long long v423 = *(_OWORD *)(i + v417 - 136);
              long long v424 = *(_OWORD *)(i + v417 - 120);
              long long v425 = *(_OWORD *)(i + v417 - 104);
              *(_OWORD *)(v418 - 152) = *(_OWORD *)(i + v417 - 152);
              *(_OWORD *)(v418 - 104) = v425;
              *(_OWORD *)(v418 - 120) = v424;
              *(_OWORD *)(v418 - 136) = v423;
              long long v426 = *(_OWORD *)(i + v417 - 72);
              long long v427 = *(_OWORD *)(i + v417 - 56);
              long long v428 = *(_OWORD *)(i + v417 - 47);
              *(_OWORD *)(v418 - 88) = *(_OWORD *)(i + v417 - 88);
              *(_OWORD *)(v418 - 47) = v428;
              *(_OWORD *)(v418 - 56) = v427;
              *(_OWORD *)(v418 - 72) = v426;
              *(_OWORD *)(v418 - 168) = *(_OWORD *)(i + v417 - 168);
              long long v429 = *(_OWORD *)(i + v417 - 24);
              *(void *)(v418 - 8) = *(void *)(i + v417 - 8);
              *(_OWORD *)(v418 - 24) = v429;
              v417 -= 248;
            }
            while (i + v417 != v416);
            uint64_t v430 = *(void *)(v358 + 1560);
            uint64_t v431 = *(void *)(v358 + 1568);
            *(void *)(v358 + 1560) = v397 + v417;
            *(void *)(v358 + 1568) = v398;
            uint64_t v1114 = *(void *)(v358 + 1576);
            *(void *)(v358 + 1576) = v415;
            for (uint64_t i = v430; v431 != i; v431 -= 248)
            {
              int v432 = *(std::__shared_weak_count **)(v431 - 216);
              if (v432 && !atomic_fetch_add(&v432->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
                std::__shared_weak_count::__release_weak(v432);
              }
              unsigned int v433 = *(std::__shared_weak_count **)(v431 - 240);
              if (v433) {
                std::__shared_weak_count::__release_weak(v433);
              }
            }
          }
          if (i) {
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v358 + 1584) + 40))(*(void *)(v358 + 1584), i, v1114 - i);
          }
          goto LABEL_672;
        }
        uint64_t v413 = v388 + 248 * v391;
        uint64_t v414 = 248 * v386 - 248 * v390;
        do
        {
          if (v388)
          {
            *(void *)(v388 + 240) = 0;
            *(_OWORD *)(v388 + 208) = 0uLL;
            *(_OWORD *)(v388 + 224) = 0uLL;
            *(_OWORD *)(v388 + 176) = 0uLL;
            *(_OWORD *)(v388 + 192) = 0uLL;
            *(_OWORD *)(v388 + 144) = 0uLL;
            *(_OWORD *)(v388 + 160) = 0uLL;
            *(_OWORD *)(v388 + 112) = 0uLL;
            *(_OWORD *)(v388 + 128) = 0uLL;
            *(_OWORD *)(v388 + 80) = 0uLL;
            *(_OWORD *)(v388 + 96) = 0uLL;
            *(_OWORD *)(v388 + 48) = 0uLL;
            *(_OWORD *)(v388 + 64) = 0uLL;
            *(_OWORD *)(v388 + 16) = 0uLL;
            *(_OWORD *)(v388 + 32) = 0uLL;
            *(_OWORD *)uint64_t v388 = 0uLL;
          }
          v388 += 248;
          v414 -= 248;
        }
        while (v414);
        uint64_t v388 = v413;
      }
      *(void *)(v358 + 1568) = v388;
      goto LABEL_672;
    }
    unsigned int v1126 = 0;
    ++v343;
  }
LABEL_511:
  unint64_t v363 = v343 + 1;
  uint64_t v364 = *(void *)(v9 + 16);
  unint64_t v365 = 8 * v364;
  if (v343 + 1 > 8 * v364)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 4828;
    goto LABEL_21;
  }
  uint64_t v366 = *v1154;
  unsigned int v367 = *(unsigned __int8 *)(*v1154 + (v343 >> 3));
  *unsigned int v21 = v363;
  if ((v367 >> (~(_BYTE)v343 & 7)))
  {
    if (v343 + 7 > v365)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4831;
      goto LABEL_21;
    }
    int v374 = 0;
    unint64_t v375 = 6;
    do
    {
      unint64_t v376 = 8 - (v363 & 7);
      if (v375 < v376) {
        unint64_t v376 = v375;
      }
      int v374 = (*(unsigned __int8 *)(v366 + (v363 >> 3)) >> (8 - (v363 & 7) - v376)) & ~(-1 << v376) | (v374 << v376);
      v363 += v376;
      *unsigned int v21 = v363;
      v375 -= v376;
    }
    while (v375);
    if (v363 + 5 > v365)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4834;
      goto LABEL_21;
    }
    int v377 = 0;
    uint64_t v378 = (v374 + 1);
    unint64_t v379 = 5;
    do
    {
      unint64_t v380 = 8 - (v363 & 7);
      if (v379 < v380) {
        unint64_t v380 = v379;
      }
      int v377 = (*(unsigned __int8 *)(v366 + (v363 >> 3)) >> (8 - (v363 & 7) - v380)) & ~(-1 << v380) | (v377 << v380);
      v363 += v380;
      *unsigned int v21 = v363;
      v379 -= v380;
    }
    while (v379);
    if (v363 + 5 > v365) {
      goto LABEL_545;
    }
    int v381 = 0;
    uint64_t v382 = (v377 + 1);
    unint64_t v383 = 5;
    do
    {
      unint64_t v384 = 8 - (v363 & 7);
      if (v383 < v384) {
        unint64_t v384 = v383;
      }
      int v381 = (*(unsigned __int8 *)(v366 + (v363 >> 3)) >> (8 - (v363 & 7) - v384)) & ~(-1 << v384) | (v381 << v384);
      v363 += v384;
      *unsigned int v21 = v363;
      v383 -= v384;
    }
    while (v383);
    unint64_t v385 = (v381 + 1);
    if (v363 + v385 > v365)
    {
LABEL_545:
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4837;
      goto LABEL_21;
    }
    if (v381 != -1)
    {
      LODWORD(v403) = 0;
      do
      {
        unint64_t v404 = 8 - (v363 & 7);
        if (v385 < v404) {
          unint64_t v404 = v385;
        }
        uint64_t v403 = (*(unsigned __int8 *)(v366 + (v363 >> 3)) >> (8 - (v363 & 7) - v404)) & ~(-1 << v404) | (v403 << v404);
        v363 += v404;
        *unsigned int v21 = v363;
        v385 -= v404;
      }
      while (v385);
      if (v403)
      {
        {
          operator new();
        }
        uint64_t v405 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                    + 16))(geo::codec::Allocator::instance(void)::alloc, 8 * v403, 8);
        uint64_t v406 = *a3;
        *(void *)(v406 + 1544) = v405;
        *(void *)(v406 + 1552) = v403;
        if (!v405)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 4841;
          goto LABEL_21;
        }
        uint64_t v407 = 0;
        uint64_t v408 = *(void *)(*a3 + 1544);
        uint64_t v364 = *(void *)(v9 + 16);
        unint64_t v363 = *(void *)(v9 + 24);
        do
        {
          if (v363 + v378 > 8 * v364)
          {
            uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 4843;
            goto LABEL_21;
          }
          unint64_t v409 = 0;
          if (v378)
          {
            uint64_t v410 = *v1154;
            unint64_t v411 = v378;
            do
            {
              unint64_t v412 = 8 - (v363 & 7);
              if (v411 < v412) {
                unint64_t v412 = v411;
              }
              unint64_t v409 = (*(unsigned __int8 *)(v410 + (v363 >> 3)) >> (8 - (v363 & 7) - v412)) & (unint64_t)~(-1 << v412) | (v409 << v412);
              v363 += v412;
              *unsigned int v21 = v363;
              v411 -= v412;
            }
            while (v411);
          }
          *(void *)(v408 + 8 * v407++) = v409;
        }
        while (v407 != v403);
      }
    }
    uint64_t v434 = *a3;
    uint64_t v435 = *(void *)(*a3 + 1416);
    uint64_t v436 = *(void *)(*a3 + 1408);
    unint64_t v365 = 8 * v364;
    uint64_t v437 = v435 - v436;
    if (v435 != v436)
    {
      unint64_t v438 = 0;
      unint64_t v439 = 0x82FA0BE82FA0BE83 * (v437 >> 3);
      do
      {
        unint64_t v440 = v363 + 1;
        if (v363 + 1 > v365)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 4848;
          goto LABEL_21;
        }
        uint64_t v441 = *v1154;
        unsigned int v442 = *(unsigned __int8 *)(*v1154 + (v363 >> 3));
        *unsigned int v21 = v440;
        if (((v442 >> (~(_BYTE)v363 & 7)) & 1) == 0)
        {
LABEL_620:
          unint64_t v363 = v440;
          goto LABEL_621;
        }
        unint64_t v443 = v363 + 2;
        if (v443 > 8 * v364)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 4851;
          goto LABEL_21;
        }
        int v444 = *(unsigned __int8 *)(v441 + (v440 >> 3));
        *unsigned int v21 = v443;
        if (v443 + v382 > 8 * v364)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 4853;
          goto LABEL_21;
        }
        unsigned int v445 = 0;
        if (v382)
        {
          unint64_t v446 = v382;
          do
          {
            unint64_t v447 = 8 - (v443 & 7);
            if (v446 < v447) {
              unint64_t v447 = v446;
            }
            unsigned int v445 = (*(unsigned __int8 *)(v441 + (v443 >> 3)) >> (8 - (v443 & 7) - v447)) & ~(-1 << v447) | (v445 << v447);
            v443 += v447;
            *unsigned int v21 = v443;
            v446 -= v447;
          }
          while (v446);
        }
        if (((1 << (~(_BYTE)v440 & 7)) & v444) != 0)
        {
          uint64_t v448 = v436 + 344 * v445;
          *(void *)(v436 + 344 * v438 + 248) = v448;
          uint64_t v449 = v448 + 40;
        }
        else
        {
          uint64_t v450 = *(void *)(v434 + 1544);
          if (!v450) {
            goto LABEL_636;
          }
          uint64_t v449 = v450 + 8 * v445;
        }
        *(void *)(v436 + 344 * v438 + 256) = v449;
LABEL_636:
        unint64_t v440 = v443 + 1;
        if (v443 + 1 > 8 * v364)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 4862;
          goto LABEL_21;
        }
        unsigned int v451 = *(unsigned __int8 *)(v441 + (v443 >> 3));
        *unsigned int v21 = v440;
        if (((v451 >> (~(_BYTE)v443 & 7)) & 1) == 0) {
          goto LABEL_620;
        }
        unint64_t v363 = v443 + 2;
        if (v363 > 8 * v364)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 4865;
          goto LABEL_21;
        }
        int v452 = *(unsigned __int8 *)(v441 + (v440 >> 3));
        *unsigned int v21 = v363;
        if (v363 + v382 > v365)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 4867;
          goto LABEL_21;
        }
        unsigned int v453 = 0;
        if (v382)
        {
          unint64_t v454 = v382;
          do
          {
            unint64_t v455 = 8 - (v363 & 7);
            if (v454 < v455) {
              unint64_t v455 = v454;
            }
            unsigned int v453 = (*(unsigned __int8 *)(v441 + (v363 >> 3)) >> (8 - (v363 & 7) - v455)) & ~(-1 << v455) | (v453 << v455);
            v363 += v455;
            *unsigned int v21 = v363;
            v454 -= v455;
          }
          while (v454);
        }
        if (((1 << (~(_BYTE)v440 & 7)) & v452) != 0)
        {
          uint64_t v456 = v436 + 344 * v453 + 40;
LABEL_649:
          *(void *)(v436 + 344 * v438 + 264) = v456;
          goto LABEL_621;
        }
        uint64_t v457 = *(void *)(v434 + 1544);
        if (v457)
        {
          uint64_t v456 = v457 + 8 * v453;
          goto LABEL_649;
        }
LABEL_621:
        ++v438;
      }
      while (v438 < v439);
    }
  }
  if (v363 + 1 > v365)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 4882;
    goto LABEL_21;
  }
  unsigned int v458 = *(unsigned __int8 *)(*v1154 + (v363 >> 3));
  *unsigned int v21 = v363 + 1;
  if ((v458 >> (~(_BYTE)v363 & 7)))
  {
    uint64_t v459 = *(void *)(*a3 + 1416) - *(void *)(*a3 + 1408);
    if (v459)
    {
      v1174[0] = &unk_1ED517918;
      v1174[1] = a3;
      unsigned int v1175 = v1174;
      geo::codec::decodeZoomRanks(v1154, 0x82FA0BE82FA0BE83 * (v459 >> 3), (uint64_t)v1174);
      if (v1175 == v1174)
      {
        (*(void (**)(void *))(v1174[0] + 32))(v1174);
      }
      else if (v1175)
      {
        (*(void (**)(void))(*v1175 + 40))();
      }
    }
  }
  if (*(_DWORD *)(v9 + 64) >= 0x11u)
  {
    unint64_t v460 = *(void *)(v9 + 24);
    unint64_t v461 = v460 + 1;
    unint64_t v462 = 8 * *(void *)(v9 + 16);
    if (v460 + 1 > v462)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4897;
      goto LABEL_21;
    }
    uint64_t v463 = *v1154;
    unsigned int v464 = *(unsigned __int8 *)(*v1154 + (v460 >> 3));
    *unsigned int v21 = v461;
    if ((v464 >> (~(_BYTE)v460 & 7)))
    {
      uint64_t v465 = *a3;
      if (*(void *)(*a3 + 1456) || (uint64_t v466 = *(void *)(v465 + 1464), v466 != *(void *)(v465 + 1472)))
      {
        uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 4900;
        goto LABEL_21;
      }
      if (v460 + 6 > v462)
      {
        uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 4902;
        goto LABEL_21;
      }
      int v485 = 0;
      unint64_t v486 = 5;
      do
      {
        unint64_t v487 = 8 - (v461 & 7);
        if (v486 < v487) {
          unint64_t v487 = v486;
        }
        int v485 = (*(unsigned __int8 *)(v463 + (v461 >> 3)) >> (8 - (v461 & 7) - v487)) & ~(-1 << v487) | (v485 << v487);
        v461 += v487;
        *unsigned int v21 = v461;
        v486 -= v487;
      }
      while (v486);
      if (v461 + 5 > v462)
      {
        uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 4905;
        goto LABEL_21;
      }
      int v488 = 0;
      unint64_t v1116 = (v485 + 1);
      unint64_t v489 = 5;
      do
      {
        unint64_t v490 = 8 - (v461 & 7);
        if (v489 < v490) {
          unint64_t v490 = v489;
        }
        int v488 = (*(unsigned __int8 *)(v463 + (v461 >> 3)) >> (8 - (v461 & 7) - v490)) & ~(-1 << v490) | (v488 << v490);
        v461 += v490;
        *unsigned int v21 = v461;
        v489 -= v490;
      }
      while (v489);
      if (v461 + 6 > v462)
      {
        uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 4908;
        goto LABEL_21;
      }
      int v491 = 0;
      unint64_t v1088 = (v488 + 1);
      unint64_t v492 = 6;
      do
      {
        unint64_t v493 = 8 - (v461 & 7);
        if (v492 < v493) {
          unint64_t v493 = v492;
        }
        int v491 = (*(unsigned __int8 *)(v463 + (v461 >> 3)) >> (8 - (v461 & 7) - v493)) & ~(-1 << v493) | (v491 << v493);
        v461 += v493;
        *unsigned int v21 = v461;
        v492 -= v493;
      }
      while (v492);
      if (v461 + 5 > v462)
      {
        uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 4911;
        goto LABEL_21;
      }
      int v494 = 0;
      unint64_t v1095 = (v491 + 1);
      unint64_t v495 = 5;
      do
      {
        unint64_t v496 = 8 - (v461 & 7);
        if (v495 < v496) {
          unint64_t v496 = v495;
        }
        int v494 = (*(unsigned __int8 *)(v463 + (v461 >> 3)) >> (8 - (v461 & 7) - v496)) & ~(-1 << v496) | (v494 << v496);
        v461 += v496;
        *unsigned int v21 = v461;
        v495 -= v496;
      }
      while (v495);
      if (v461 + 5 > v462) {
        goto LABEL_744;
      }
      int v497 = 0;
      unint64_t v1101 = (v494 + 1);
      unint64_t v498 = 5;
      do
      {
        unint64_t v499 = 8 - (v461 & 7);
        if (v498 < v499) {
          unint64_t v499 = v498;
        }
        int v497 = (*(unsigned __int8 *)(v463 + (v461 >> 3)) >> (8 - (v461 & 7) - v499)) & ~(-1 << v499) | (v497 << v499);
        v461 += v499;
        *unsigned int v21 = v461;
        v498 -= v499;
      }
      while (v498);
      unint64_t v500 = (v497 + 1);
      if (v461 + v500 > v462)
      {
LABEL_744:
        uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 4914;
        goto LABEL_21;
      }
      if (v497 == -1) {
        goto LABEL_826;
      }
      LODWORD(v1141) = 0;
      do
      {
        unint64_t v543 = 8 - (v461 & 7);
        if (v500 < v543) {
          unint64_t v543 = v500;
        }
        unint64_t v1141 = (*(unsigned __int8 *)(v463 + (v461 >> 3)) >> (8 - (v461 & 7) - v543)) & ~(-1 << v543) | (v1141 << v543);
        v461 += v543;
        *unsigned int v21 = v461;
        v500 -= v543;
      }
      while (v500);
      if (!v1141)
      {
LABEL_826:
        LODWORD(v1141) = 0;
      }
      else
      {
        unint64_t v544 = 0x4EC4EC4EC4EC4EC5 * ((*(void *)(v465 + 1480) - v466) >> 3);
        if (v544 >= v1141)
        {
          uint64_t v551 = v466 + 104 * v1141;
          uint64_t v552 = 104 * v1141;
          do
          {
            if (v466)
            {
              *(void *)(v466 + 96) = 0;
              *(_OWORD *)(v466 + 64) = 0uLL;
              *(_OWORD *)(v466 + 80) = 0uLL;
              *(_OWORD *)(v466 + 32) = 0uLL;
              *(_OWORD *)(v466 + 48) = 0uLL;
              *(_OWORD *)uint64_t v466 = 0uLL;
              *(_OWORD *)(v466 + 16) = 0uLL;
            }
            v466 += 104;
            v552 -= 104;
          }
          while (v552);
          *(void *)(v465 + 1472) = v551;
        }
        else
        {
          unint64_t v545 = 0x9D89D89D89D89D8ALL * ((*(void *)(v465 + 1480) - v466) >> 3);
          if (2 * v544 <= v1141) {
            unint64_t v545 = v1141;
          }
          if (v544 >= 0x13B13B13B13B13BLL) {
            uint64_t v546 = 0x276276276276276;
          }
          else {
            uint64_t v546 = v545;
          }
          uint64_t v547 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v465 + 1488) + 16))(*(void *)(v465 + 1488), 104 * v546, 8);
          uint64_t v548 = 0;
          uint64_t v549 = v547 + 104 * v1141;
          do
          {
            uint64_t v550 = v547 + v548;
            if (v547 + v548)
            {
              *(void *)(v550 + 96) = 0;
              *(_OWORD *)(v550 + 64) = 0uLL;
              *(_OWORD *)(v550 + 80) = 0uLL;
              *(_OWORD *)(v550 + 32) = 0uLL;
              *(_OWORD *)(v550 + 48) = 0uLL;
              *(_OWORD *)uint64_t v550 = 0uLL;
              *(_OWORD *)(v550 + 16) = 0uLL;
            }
            v548 += 104;
          }
          while (104 * v1141 != v548);
          uint64_t v553 = v547 + 104 * v546;
          unint64_t v554 = *(std::__shared_weak_count **)(v465 + 1464);
          uint64_t v1082 = *(std::__shared_weak_count **)(v465 + 1472);
          if (v1082 == v554)
          {
            *(void *)(v465 + 1464) = v547;
            *(void *)(v465 + 1472) = v549;
            uint64_t v1077 = *(void *)(v465 + 1480);
            *(void *)(v465 + 1480) = v553;
          }
          else
          {
            uint64_t v555 = 0;
            do
            {
              uint64_t v556 = v547 + v555;
              BOOL v557 = (char *)v1082 + v555;
              *(_OWORD *)(v556 - 104) = *(_OWORD *)((char *)&v1082[-4] + v555 - 8);
              *((void *)v557 - 13) = 0;
              *((void *)v557 - 12) = 0;
              *(_OWORD *)(v556 - 88) = *(_OWORD *)((char *)&v1082[-3] + v555 - 16);
              *(void *)(v556 - 72) = *(std::__shared_weak_count_vtbl **)((char *)&v1082[-3].__vftable + v555);
              *((void *)v557 - 10) = 0;
              *((void *)v557 - 9) = 0;
              long long v558 = *(_OWORD *)((char *)&v1082[-2] + v555 - 16);
              long long v559 = *(long long *)((char *)&v1082[-2].std::__shared_count + v555);
              *(_DWORD *)(v556 - 32) = *(_DWORD *)((char *)&v1082[-1] + v555 - 8);
              *(_OWORD *)(v556 - 64) = v558;
              *(_OWORD *)(v556 - 48) = v559;
              long long v560 = *(long long *)((char *)&v1082[-1].std::__shared_count + v555);
              *(_DWORD *)(v556 - 8) = *(_DWORD *)((char *)v1082 + v555 - 8);
              *(_OWORD *)(v556 - 24) = v560;
              v555 -= 104;
            }
            while ((std::__shared_weak_count *)((char *)v1082 + v555) != v554);
            uint64_t v561 = *(std::__shared_weak_count **)(v465 + 1464);
            uint64_t v562 = *(std::__shared_weak_count **)(v465 + 1472);
            *(void *)(v465 + 1464) = v547 + v555;
            *(void *)(v465 + 1472) = v549;
            uint64_t v1077 = *(void *)(v465 + 1480);
            uint64_t v1082 = v561;
            for (*(void *)(v465 + 1480) = v553; v562 != v1082; uint64_t v562 = (std::__shared_weak_count *)((char *)v562 - 104))
            {
              unint64_t v563 = (std::__shared_weak_count *)v562[-3].__vftable;
              if (v563 && !atomic_fetch_add(&v563->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v563->__on_zero_shared)(v563);
                std::__shared_weak_count::__release_weak(v563);
              }
              char v564 = (std::__shared_weak_count *)v562[-4].__vftable;
              if (v564) {
                std::__shared_weak_count::__release_weak(v564);
              }
            }
          }
          if (v1082) {
            (*(void (**)(void, std::__shared_weak_count *, uint64_t))(**(void **)(v465 + 1488) + 40))(*(void *)(v465 + 1488), v1082, v1077 - (void)v1082);
          }
        }
      }
      uint64_t v565 = *a3;
      uint64_t v566 = *(void *)(*a3 + 1464);
      if (*(void *)(*a3 + 1472) != v566)
      {
        uint64_t v567 = 0;
        unsigned int v1083 = 0;
        while (1)
        {
          uint64_t v569 = *a3;
          uint64_t v568 = a3[1];
          if (v568) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v568 + 16), 1uLL, memory_order_relaxed);
          }
          uint64_t v570 = (uint64_t *)(v566 + 104 * v567);
          uint64_t v571 = (std::__shared_weak_count *)v570[1];
          *uint64_t v570 = v569;
          v570[1] = v568;
          if (v571) {
            std::__shared_weak_count::__release_weak(v571);
          }
          unint64_t v572 = *(void *)(v9 + 24);
          unint64_t v573 = 8 * *(void *)(v9 + 16);
          if (v572 + v1116 > v573)
          {
            uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 4920;
            goto LABEL_21;
          }
          int v574 = v1116;
          if (v1116)
          {
            int v574 = 0;
            uint64_t v575 = *v1154;
            unint64_t v576 = v1116;
            do
            {
              unint64_t v577 = 8 - (v572 & 7);
              if (v576 < v577) {
                unint64_t v577 = v576;
              }
              int v574 = (*(unsigned __int8 *)(v575 + (v572 >> 3)) >> (8 - (v572 & 7) - v577)) & ~(-1 << v577) | (v574 << v577);
              v572 += v577;
              *unsigned int v21 = v572;
              v576 -= v577;
            }
            while (v576);
          }
          if (v572 + v1088 > v573)
          {
            uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 4922;
            goto LABEL_21;
          }
          if (v1088)
          {
            unsigned int v578 = 0;
            uint64_t v579 = *v1154;
            unint64_t v580 = v1088;
            do
            {
              unint64_t v581 = 8 - (v572 & 7);
              if (v580 < v581) {
                unint64_t v581 = v580;
              }
              unsigned int v578 = (*(unsigned __int8 *)(v579 + (v572 >> 3)) >> (8 - (v572 & 7) - v581)) & ~(-1 << v581) | (v578 << v581);
              v572 += v581;
              *unsigned int v21 = v572;
              v580 -= v581;
            }
            while (v580);
          }
          else
          {
            unsigned int v578 = 0;
          }
          uint64_t v565 = *a3;
          uint64_t v566 = *(void *)(*a3 + 1464);
          uint64_t v582 = v566 + 104 * v567;
          *(void *)(v582 + 80) = v1083;
          *(void *)(v582 + 88) = v578;
          if (v574) {
            break;
          }
LABEL_868:
          v1083 += v578;
          if (++v567 >= (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(void *)(v565 + 1472) - v566) >> 3))) {
            goto LABEL_908;
          }
        }
        int v583 = 0;
        while (1)
        {
          unint64_t v584 = v572 + 1;
          if (v572 + 1 > v573)
          {
            uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 4928;
            goto LABEL_21;
          }
          unsigned int v585 = *(unsigned __int8 *)(*v1154 + (v572 >> 3));
          *unsigned int v21 = v584;
          if ((v585 >> (~(_BYTE)v572 & 7)))
          {
            if (v584 + v1101 > v573)
            {
              uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
              int v27 = 4931;
              goto LABEL_21;
            }
            if (!v1101) {
              goto LABEL_890;
            }
            unint64_t v586 = v1101;
            do
            {
              unint64_t v587 = 8 - (v584 & 7);
              if (v586 < v587) {
                unint64_t v587 = v586;
              }
              v584 += v587;
              v586 -= v587;
            }
            while (v586);
          }
          else
          {
            if (v584 + v1095 > v573)
            {
              uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
              int v27 = 4934;
              goto LABEL_21;
            }
            if (!v1095) {
              goto LABEL_890;
            }
            unint64_t v588 = v1095;
            do
            {
              unint64_t v589 = 8 - (v584 & 7);
              if (v588 < v589) {
                unint64_t v589 = v588;
              }
              v584 += v589;
              v588 -= v589;
            }
            while (v588);
          }
          *unsigned int v21 = v584;
LABEL_890:
          ++v583;
          unint64_t v572 = v584;
          if (v583 == v574) {
            goto LABEL_868;
          }
        }
      }
      unsigned int v1083 = 0;
LABEL_908:
      if ((geo::codec::decodeSectionEncoding((geo::codec::Allocator *)v1154, (geo::codec::Allocator **)(v565 + 1456), 0, 0, 0) & 1) == 0)
      {
        uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 4938;
        goto LABEL_21;
      }
      uint64_t v590 = *a3;
      uint64_t v591 = *(void *)(*a3 + 1456);
      if (!v591 || *(void *)(v591 + 40) != v1083)
      {
        uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 4939;
        goto LABEL_21;
      }
      unint64_t v592 = *(void *)(v9 + 24);
      if (v592 + 1 > 8 * *(void *)(v9 + 16))
      {
        int v27 = 4942;
        goto LABEL_157;
      }
      unsigned int v593 = *(unsigned __int8 *)(*v1154 + (v592 >> 3));
      *unsigned int v21 = v592 + 1;
      if (((v593 >> (~(_BYTE)v592 & 7)) & 1) != 0
        && !geo::codec::decodeAttributeSet<GeoCodecsFeature>(1, v1154, v1141, v590 + 1112, *(void *)(v590 + 1464), 104))
      {
        int v27 = 4944;
        goto LABEL_157;
      }
    }
  }
  uint64_t v594 = *(void *)(*a3 + 1344);
  if (v594 == *(void *)(*a3 + 1352)) {
    goto LABEL_1070;
  }
  uint64_t v595 = 0;
  unint64_t v1142 = 0;
  *(_OWORD *)uint64_t __p = 0u;
  *(_OWORD *)unsigned int v1160 = 0u;
  int v1161 = 1065353216;
  do
  {
    uint64_t v596 = std::__hash_table<std::__hash_value_type<unsigned long long,JunctionInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,JunctionInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,JunctionInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,JunctionInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t *)__p, *(void *)(v594 + v595 + 56), (void *)(v594 + v595 + 56));
    std::__hash_table<GeoCodecsTransitLink *,std::hash<GeoCodecsTransitLink *>,std::equal_to<GeoCodecsTransitLink *>,std::allocator<GeoCodecsTransitLink *>>::__emplace_unique_key_args<GeoCodecsTransitLink *,GeoCodecsTransitLink *&>((float *)v596 + 16, v594 + v595, v594 + v595);
    uint64_t v597 = std::__hash_table<std::__hash_value_type<unsigned long long,JunctionInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,JunctionInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,JunctionInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,JunctionInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t *)__p, *(void *)(v594 + v595 + 64), (void *)(v594 + v595 + 64));
    std::__hash_table<GeoCodecsTransitLink *,std::hash<GeoCodecsTransitLink *>,std::equal_to<GeoCodecsTransitLink *>,std::allocator<GeoCodecsTransitLink *>>::__emplace_unique_key_args<GeoCodecsTransitLink *,GeoCodecsTransitLink *&>((float *)v597 + 6, v594 + v595, v594 + v595);
    uint64_t v594 = *(void *)(*a3 + 1344);
    v595 += 184;
    ++v1142;
  }
  while (v1142 < 0xD37A6F4DE9BD37A7 * ((*(void *)(*a3 + 1352) - v594) >> 3));
  char v1096 = 1;
  uint64_t v1117 = (char *)v1160[0];
  if (!v1160[0]) {
    goto LABEL_1066;
  }
  uint64_t v1078 = 0;
  unint64_t v1084 = 0;
  float v598 = 1.0 / (float)(1 << **(unsigned char **)(*a3 + 1400));
  do
  {
    v1117[104] = 1;
    uint64_t v599 = *((void *)v1117 + 6);
    if (v599)
    {
      char v600 = (void *)*((void *)v1117 + 5);
      char v1089 = v1117 + 40;
      uint64_t v601 = *(void *)(v600[2] + 48);
      BOOL v602 = v600 == 0;
    }
    else
    {
      char v600 = (void *)*((void *)v1117 + 5);
      char v1089 = v1117 + 40;
      uint64_t v603 = (void *)*((void *)v1117 + 10);
      char v1074 = v1117 + 80;
      uint64_t v601 = *(void *)(v603[2] + 40);
      if (!v600)
      {
        BOOL v602 = 1;
LABEL_943:
        unint64_t v605 = v603;
        while (*(void *)(v605[2] + 40) == v601)
        {
          unint64_t v605 = (void *)*v605;
          if (!v605) {
            goto LABEL_946;
          }
        }
LABEL_1065:
        char v1096 = 0;
        goto LABEL_1066;
      }
      BOOL v602 = 0;
    }
    uint64_t v604 = v600;
    do
    {
      if (*(void *)(v604[2] + 48) != v601) {
        goto LABEL_1065;
      }
      uint64_t v604 = (void *)*v604;
    }
    while (v604);
    uint64_t v603 = (void *)*((void *)v1117 + 10);
    char v1074 = v1117 + 80;
    if (v603) {
      goto LABEL_943;
    }
    LOBYTE(v605) = 1;
LABEL_946:
    if (v601)
    {
      if (!*(unsigned char *)(v601 + 321)) {
        goto LABEL_1055;
      }
      v1117[104] = 0;
      if (!v602)
      {
        do
        {
          *(void *)(v600[2] + 48) = 0;
          char v600 = (void *)*v600;
        }
        while (v600);
      }
      if ((v605 & 1) == 0)
      {
        do
        {
          *(void *)(v603[2] + 40) = 0;
          uint64_t v603 = (void *)*v603;
        }
        while (v603);
      }
      goto LABEL_1056;
    }
    if (v599)
    {
      uint64_t v606 = v600[2];
      uint64_t v607 = *(unsigned int *)(v606 + 20);
      if (v607)
      {
        uint64_t v608 = 16 * v607;
        while (1)
        {
          if (*(_DWORD *)(v606 + 20))
          {
            char v609 = *(std::__shared_weak_count **)(v606 + 8);
            if (v609)
            {
              unsigned int v610 = std::__shared_weak_count::lock(v609);
              if (v610)
              {
                unint64_t v611 = v610;
                if (*(void *)v606 && (uint64_t v612 = *(void *)(*(void *)v606 + 1400)) != 0)
                {
                  uint64_t v613 = *(void *)(v612 + 32) + 16 * *(unsigned int *)(v606 + 16) + v608;
                  uint64_t v1143 = *(void *)(v613 - 8);
                  uint64_t v1103 = *(void *)(v612 + 8) + 8 * *(void *)(v613 - 16);
                }
                else
                {
                  uint64_t v1143 = 0;
                  uint64_t v1103 = 0;
                }
                if (!atomic_fetch_add(&v610->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
                  std::__shared_weak_count::__release_weak(v611);
                }
                if (v1143) {
                  break;
                }
              }
            }
          }
          v608 -= 16;
          if (!v608)
          {
            uint64_t v1071 = 0;
            goto LABEL_986;
          }
        }
        uint64_t v1071 = (float *)(v1103 + 8 * v1143 - 8);
      }
      else
      {
        uint64_t v1071 = 0;
      }
    }
    else
    {
      uint64_t v614 = v603[2];
      if (*(_DWORD *)(v614 + 20))
      {
        char v615 = *(std::__shared_weak_count **)(v614 + 8);
        if (v615)
        {
          uint64_t v1144 = 0;
          unint64_t v616 = 1;
          while (1)
          {
            int v617 = std::__shared_weak_count::lock(v615);
            if (v617)
            {
              BOOL v618 = v617;
              if (*(void *)v614 && (uint64_t v619 = *(void *)(*(void *)v614 + 1400)) != 0)
              {
                unsigned int v620 = (void *)(*(void *)(v619 + 32) + 16 * *(unsigned int *)(v614 + 16) + v1144);
                uint64_t v1104 = v620[1];
                uint64_t v1071 = (float *)(*(void *)(v619 + 8) + 8 * *v620);
              }
              else
              {
                uint64_t v1104 = 0;
                uint64_t v1071 = 0;
              }
              if (!atomic_fetch_add(&v617->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v617->__on_zero_shared)(v617);
                std::__shared_weak_count::__release_weak(v618);
              }
              if (v1104) {
                break;
              }
            }
            do
            {
              if (v616 >= *(unsigned int *)(v614 + 20))
              {
                uint64_t v1071 = 0;
                goto LABEL_986;
              }
              char v615 = *(std::__shared_weak_count **)(v614 + 8);
              ++v616;
              v1144 += 16;
            }
            while (!v615);
          }
        }
        else
        {
          uint64_t v1071 = 0;
        }
      }
      else
      {
        uint64_t v1071 = 0;
      }
    }
LABEL_986:
    while (1)
    {
      char v1089 = (void *)*v1089;
      if (!v1089) {
        break;
      }
      uint64_t v1145 = v1089[2];
      if (!*(_DWORD *)(v1145 + 20)) {
        goto LABEL_1021;
      }
      uint64_t v621 = *(std::__shared_weak_count **)(v1145 + 8);
      if (!v621) {
        goto LABEL_1021;
      }
      uint64_t v622 = 8;
      unint64_t v623 = 1;
LABEL_991:
      int v624 = std::__shared_weak_count::lock(v621);
      if (!v624)
      {
        unint64_t v627 = *(unsigned int *)(v1145 + 20);
        goto LABEL_1001;
      }
      char v625 = v624;
      if (*(void *)v1145 && (uint64_t v626 = *(void *)(*(void *)v1145 + 1400)) != 0) {
        uint64_t v1105 = *(void *)(*(void *)(v626 + 32) + 16 * *(unsigned int *)(v1145 + 16) + v622);
      }
      else {
        uint64_t v1105 = 0;
      }
      if (!atomic_fetch_add(&v624->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v624->__on_zero_shared)(v624);
        std::__shared_weak_count::__release_weak(v625);
      }
      unint64_t v627 = *(unsigned int *)(v1145 + 20);
      if (!v1105)
      {
LABEL_1001:
        while (v623 < v627)
        {
          uint64_t v621 = *(std::__shared_weak_count **)(v1145 + 8);
          ++v623;
          v622 += 16;
          if (v621) {
            goto LABEL_991;
          }
        }
LABEL_1021:
        v1117[104] = 0;
        goto LABEL_1056;
      }
      if (!*(_DWORD *)(v1145 + 20)) {
        goto LABEL_1017;
      }
      uint64_t v628 = 16 * v627;
LABEL_1006:
      uint64_t v629 = *(std::__shared_weak_count **)(v1145 + 8);
      if (!v629) {
        goto LABEL_1825;
      }
      unint64_t v630 = std::__shared_weak_count::lock(v629);
      if (!v630) {
        goto LABEL_1825;
      }
      char v631 = v630;
      if (*(void *)v1145 && (uint64_t v632 = *(void *)(*(void *)v1145 + 1400)) != 0)
      {
        uint64_t v633 = *(void *)(v632 + 32) + 16 * *(unsigned int *)(v1145 + 16) + v628;
        uint64_t v634 = *(void *)(v633 - 8);
        uint64_t v1106 = *(void *)(v632 + 8) + 8 * *(void *)(v633 - 16);
      }
      else
      {
        uint64_t v634 = 0;
        uint64_t v1106 = 0;
      }
      if (!atomic_fetch_add(&v630->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v630->__on_zero_shared)(v630);
        std::__shared_weak_count::__release_weak(v631);
      }
      if (!v634)
      {
LABEL_1825:
        while (1)
        {
          v628 -= 16;
          if (!v628) {
            break;
          }
          if (*(_DWORD *)(v1145 + 20)) {
            goto LABEL_1006;
          }
        }
        unint64_t v627 = 0;
LABEL_1017:
        if (vabds_f32(*(float *)v627, *v1071) >= v598) {
          goto LABEL_1021;
        }
        goto LABEL_1018;
      }
      uint64_t v635 = v1106 + 8 * v634;
      float v636 = *(float *)(v635 - 8);
      unint64_t v627 = v635 - 8;
      if (vabds_f32(v636, *v1071) >= v598) {
        goto LABEL_1021;
      }
LABEL_1018:
      if (vabds_f32(*(float *)(v627 + 4), v1071[1]) >= v598) {
        goto LABEL_1021;
      }
    }
    if (v1117[104])
    {
      while (1)
      {
        char v1074 = (void *)*v1074;
        if (!v1074) {
          break;
        }
        uint64_t v1146 = v1074[2];
        if (!*(_DWORD *)(v1146 + 20)) {
          goto LABEL_1021;
        }
        uint64_t v637 = *(std::__shared_weak_count **)(v1146 + 8);
        if (!v637) {
          goto LABEL_1021;
        }
        uint64_t v638 = 8;
        unint64_t v639 = 1;
LABEL_1028:
        int v640 = std::__shared_weak_count::lock(v637);
        if (!v640) {
          goto LABEL_1036;
        }
        char v641 = v640;
        if (*(void *)v1146 && (uint64_t v642 = *(void *)(*(void *)v1146 + 1400)) != 0) {
          uint64_t v1107 = *(void *)(*(void *)(v642 + 32) + 16 * *(unsigned int *)(v1146 + 16) + v638);
        }
        else {
          uint64_t v1107 = 0;
        }
        if (!atomic_fetch_add(&v640->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v640->__on_zero_shared)(v640);
          std::__shared_weak_count::__release_weak(v641);
        }
        if (!v1107)
        {
LABEL_1036:
          while (v639 < *(unsigned int *)(v1146 + 20))
          {
            uint64_t v637 = *(std::__shared_weak_count **)(v1146 + 8);
            ++v639;
            v638 += 16;
            if (v637) {
              goto LABEL_1028;
            }
          }
          goto LABEL_1021;
        }
        unint64_t v643 = *(std::__shared_weak_count **)(v1146 + 8);
        if (!v643)
        {
          for (uint64_t j = 1; ; ++j)
            ;
        }
        uint64_t v644 = 0;
        for (uint64_t k = 1; ; ++k)
        {
          if (v643)
          {
            unint64_t v646 = std::__shared_weak_count::lock(v643);
            if (v646)
            {
              char v647 = v646;
              if (*(void *)v1146 && (uint64_t v648 = *(void *)(*(void *)v1146 + 1400)) != 0)
              {
                int v649 = (void *)(*(void *)(v648 + 32) + 16 * *(unsigned int *)(v1146 + 16) + v644);
                uint64_t v1108 = v649[1];
                unsigned int v1090 = (float *)(*(void *)(v648 + 8) + 8 * *v649);
              }
              else
              {
                uint64_t v1108 = 0;
                unsigned int v1090 = 0;
              }
              if (!atomic_fetch_add(&v646->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v646->__on_zero_shared)(v646);
                std::__shared_weak_count::__release_weak(v647);
              }
              if (v1108) {
                break;
              }
            }
          }
          unint64_t v643 = *(std::__shared_weak_count **)(v1146 + 8);
          v644 += 16;
        }
        if (vabds_f32(*v1090, *v1071) >= v598 || vabds_f32(v1090[1], v1071[1]) >= v598) {
          goto LABEL_1021;
        }
      }
      if (!v1117[104]) {
        goto LABEL_1056;
      }
      uint64_t v599 = *((void *)v1117 + 6);
LABEL_1055:
      v1078 += v599 + *((void *)v1117 + 11);
      unint64_t v1084 = (std::__shared_weak_count *)((char *)v1084 + 1);
    }
LABEL_1056:
    uint64_t v1117 = *(char **)v1117;
  }
  while (v1117);
  char v1096 = 1;
  if (v1084 && v1078)
  {
    uint64_t v650 = *a3;
    *(void *)(v650 + 1504) = v1084;
    *(void *)(v650 + 1520) = v1078;
    {
      operator new();
    }
    *(void *)(*a3 + 1496) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                                   + 16))(geo::codec::Allocator::instance(void)::alloc, 32 * *(void *)(*a3 + 1504), 8);
    {
      operator new();
    }
    uint64_t v651 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                + 16))(geo::codec::Allocator::instance(void)::alloc, 16 * *(void *)(*a3 + 1520), 8);
    char v1096 = 0;
    unsigned int v652 = (void *)*a3;
    v652[189] = v651;
    if (v652[187])
    {
      if (v651)
      {
        unint64_t v1091 = v1160[0];
        if (v1160[0])
        {
          unsigned int v1147 = 0;
          unsigned int v653 = 0;
          do
          {
            if (*((unsigned char *)v1091 + 104))
            {
              uint64_t v681 = *(void *)(*a3 + 1496) + 32 * v1147;
              v1091[14] = v681;
              *(void *)(v681 + 8) = 0;
              uint64_t v1119 = (_DWORD *)v681;
              *(_DWORD *)(v681 + 4) = v653;
              char v1079 = (_DWORD *)(v681 + 4);
              for (m = (void *)v1091[5]; m; ++v653)
              {
                uint64_t v689 = *a3;
                uint64_t v1110 = *(void *)(*a3 + 1512);
                uint64_t v690 = (unsigned int *)(v1110 + 16 * v653);
                *uint64_t v690 = v1147;
                uint64_t v691 = m[2];
                v690[1] = -373475417 * ((unint64_t)(v691 - *(void *)(v689 + 1344)) >> 3);
                LODWORD(v689) = *(_DWORD *)(v691 + 20);
                uint64_t v1097 = (v689 - 1);
                v690[2] = v1097;
                if (v689
                  && (unint64_t v692 = *(std::__shared_weak_count **)(v691 + 8)) != 0
                  && (char v693 = std::__shared_weak_count::lock(v692)) != 0)
                {
                  if (*(void *)v691 && (uint64_t v694 = *(void *)(*(void *)v691 + 1400)) != 0) {
                    uint64_t v688 = *(void *)(*(void *)(v694 + 32) + 16 * *(unsigned int *)(v691 + 16) + 16 * v1097 + 8);
                  }
                  else {
                    LODWORD(v688) = 0;
                  }
                  if (!atomic_fetch_add(&v693->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    char v1085 = v693;
                    ((void (*)(std::__shared_weak_count *))v693->__on_zero_shared)(v693);
                    std::__shared_weak_count::__release_weak(v1085);
                  }
                }
                else
                {
                  LODWORD(v688) = 0;
                }
                *(_DWORD *)(v1110 + 16 * v653 + 12) = v688 - 1;
                *(void *)(m[2] + 48) = v1119;
                m = (void *)*m;
              }
              unint64_t v683 = (void *)v1091[10];
              if (v683)
              {
                uint64_t v684 = *(void *)(*a3 + 1512);
                uint64_t v685 = *(void *)(*a3 + 1344);
                do
                {
                  uint64_t v686 = v684 + 16 * v653;
                  *(_DWORD *)uint64_t v686 = v1147;
                  uint64_t v687 = v683[2];
                  ++v653;
                  *(void *)(v686 + 8) = 0;
                  *(_DWORD *)(v686 + 4) = -373475417 * ((unint64_t)(v687 - v685) >> 3);
                  *(void *)(v687 + 40) = v1119;
                  unint64_t v683 = (void *)*v683;
                }
                while (v683);
              }
              *uint64_t v1119 = v653 - *v1079;
              ++v1147;
            }
            unint64_t v1091 = (void *)*v1091;
          }
          while (v1091);
          unsigned int v652 = (void *)*a3;
        }
        uint64_t v705 = v652[177];
        uint64_t v706 = v652[176];
        uint64_t v707 = v705 - v706;
        if (v705 == v706 || (unint64_t v708 = (unint64_t)__p[1]) == 0)
        {
          char v1096 = 1;
        }
        else
        {
          uint64_t v709 = 0;
          uint64_t v710 = v707 / 344;
          uint8x8_t v711 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
          v711.i16[0] = vaddlv_u8(v711);
          unint64_t v712 = (unint64_t)__p[1] - 1;
          if ((unint64_t)(v707 / 344) <= 1) {
            uint64_t v710 = 1;
          }
          do
          {
            unint64_t v713 = *(void *)(v706 + 344 * v709 + 40);
            if (v711.u32[0] > 1uLL)
            {
              unint64_t v714 = *(void *)(v706 + 344 * v709 + 40);
              if (v713 >= v708) {
                unint64_t v714 = v713 % v708;
              }
            }
            else
            {
              unint64_t v714 = v713 & v712;
            }
            int v715 = (uint64_t **)*((void *)__p[0] + v714);
            if (v715)
            {
              int v716 = *v715;
              if (v716)
              {
                if (v711.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v717 = v716[1];
                    if (v717 == v713)
                    {
                      if (v716[2] == v713) {
                        goto LABEL_1174;
                      }
                    }
                    else if ((v717 & v712) != v714)
                    {
                      goto LABEL_1153;
                    }
                    int v716 = (uint64_t *)*v716;
                    if (!v716) {
                      goto LABEL_1153;
                    }
                  }
                }
                do
                {
                  unint64_t v718 = v716[1];
                  if (v718 == v713)
                  {
                    if (v716[2] == v713)
                    {
LABEL_1174:
                      if (*((unsigned char *)v716 + 104)) {
                        *(void *)(v706 + 344 * v709 + 240) = v716[14];
                      }
                      break;
                    }
                  }
                  else
                  {
                    if (v718 >= v708) {
                      v718 %= v708;
                    }
                    if (v718 != v714) {
                      break;
                    }
                  }
                  int v716 = (uint64_t *)*v716;
                }
                while (v716);
              }
            }
LABEL_1153:
            ++v709;
            char v1096 = 1;
          }
          while (v709 != v710);
        }
      }
    }
  }
LABEL_1066:
  uint64_t v654 = v1160[0];
  if (v1160[0])
  {
    do
    {
      unsigned int v659 = (void *)*v654;
      unint64_t v660 = (void *)v654[10];
      if (v660)
      {
        do
        {
          uint64_t v661 = (void *)*v660;
          operator delete(v660);
          unint64_t v660 = v661;
        }
        while (v661);
      }
      uint64_t v662 = (void *)v654[8];
      v654[8] = 0;
      if (v662) {
        operator delete(v662);
      }
      unint64_t v663 = (void *)v654[5];
      if (v663)
      {
        do
        {
          char v664 = (void *)*v663;
          operator delete(v663);
          unint64_t v663 = v664;
        }
        while (v664);
      }
      int v665 = (void *)v654[3];
      v654[3] = 0;
      if (v665) {
        operator delete(v665);
      }
      operator delete(v654);
      uint64_t v654 = v659;
    }
    while (v659);
  }
  unint64_t v655 = __p[0];
  __p[0] = 0;
  if (v655) {
    operator delete(v655);
  }
  if ((v1096 & 1) == 0)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 4949;
    goto LABEL_21;
  }
LABEL_1070:
  unint64_t v656 = *(void *)(v9 + 24);
  unint64_t v657 = v656 + 1;
  unint64_t v658 = 8 * *(void *)(v9 + 16);
  if (v656 + 1 > v658)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 4979;
    goto LABEL_21;
  }
  uint64_t v666 = *v1154;
  unsigned int v667 = *(unsigned __int8 *)(*v1154 + (v656 >> 3));
  *unsigned int v21 = v657;
  if ((v667 >> (~(_BYTE)v656 & 7)))
  {
    if (v656 + 6 > v658)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4982;
      goto LABEL_21;
    }
    int v668 = 0;
    unint64_t v669 = 5;
    do
    {
      unint64_t v670 = 8 - (v657 & 7);
      if (v669 < v670) {
        unint64_t v670 = v669;
      }
      int v668 = (*(unsigned __int8 *)(v666 + (v657 >> 3)) >> (8 - (v657 & 7) - v670)) & ~(-1 << v670) | (v668 << v670);
      v657 += v670;
      *unsigned int v21 = v657;
      v669 -= v670;
    }
    while (v669);
    if (v657 + 5 > v658)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4985;
      goto LABEL_21;
    }
    int v671 = 0;
    unint64_t v1148 = (v668 + 1);
    unint64_t v672 = 5;
    do
    {
      unint64_t v673 = 8 - (v657 & 7);
      if (v672 < v673) {
        unint64_t v673 = v672;
      }
      int v671 = (*(unsigned __int8 *)(v666 + (v657 >> 3)) >> (8 - (v657 & 7) - v673)) & ~(-1 << v673) | (v671 << v673);
      v657 += v673;
      *unsigned int v21 = v657;
      v672 -= v673;
    }
    while (v672);
    if (v657 + 5 > v658)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4988;
      goto LABEL_21;
    }
    int v674 = 0;
    unint64_t v1118 = (v671 + 1);
    unint64_t v675 = 5;
    do
    {
      unint64_t v676 = 8 - (v657 & 7);
      if (v675 < v676) {
        unint64_t v676 = v675;
      }
      int v674 = (*(unsigned __int8 *)(v666 + (v657 >> 3)) >> (8 - (v657 & 7) - v676)) & ~(-1 << v676) | (v674 << v676);
      v657 += v676;
      *unsigned int v21 = v657;
      v675 -= v676;
    }
    while (v675);
    if (v657 + 5 > v658) {
      goto LABEL_1107;
    }
    int v677 = 0;
    unint64_t v1109 = (v674 + 1);
    unint64_t v678 = 5;
    do
    {
      unint64_t v679 = 8 - (v657 & 7);
      if (v678 < v679) {
        unint64_t v679 = v678;
      }
      int v677 = (*(unsigned __int8 *)(v666 + (v657 >> 3)) >> (8 - (v657 & 7) - v679)) & ~(-1 << v679) | (v677 << v679);
      v657 += v679;
      *unsigned int v21 = v657;
      v678 -= v679;
    }
    while (v678);
    unint64_t v680 = (v677 + 1);
    if (v657 + v680 > v658)
    {
LABEL_1107:
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 4991;
      goto LABEL_21;
    }
    unsigned int v695 = 0;
    if (v677 != -1)
    {
      do
      {
        unint64_t v696 = 8 - (v657 & 7);
        if (v680 < v696) {
          unint64_t v696 = v680;
        }
        unsigned int v695 = (*(unsigned __int8 *)(v666 + (v657 >> 3)) >> (8 - (v657 & 7) - v696)) & ~(-1 << v696) | (v695 << v696);
        v657 += v696;
        *unsigned int v21 = v657;
        v680 -= v696;
      }
      while (v680);
    }
    if (v657 + 5 > v658) {
      goto LABEL_1137;
    }
    int v697 = 0;
    unint64_t v698 = 5;
    do
    {
      unint64_t v699 = 8 - (v657 & 7);
      if (v698 < v699) {
        unint64_t v699 = v698;
      }
      int v697 = (*(unsigned __int8 *)(v666 + (v657 >> 3)) >> (8 - (v657 & 7) - v699)) & ~(-1 << v699) | (v697 << v699);
      v657 += v699;
      *unsigned int v21 = v657;
      v698 -= v699;
    }
    while (v698);
    unint64_t v700 = (v697 + 1);
    if (v657 + v700 > v658)
    {
LABEL_1137:
      int v27 = 4994;
      goto LABEL_157;
    }
    if (v697 == -1)
    {
      uint64_t v703 = *a3;
      *(void *)(*a3 + 1632) = 0;
    }
    else
    {
      LODWORD(v701) = 0;
      do
      {
        unint64_t v702 = 8 - (v657 & 7);
        if (v700 < v702) {
          unint64_t v702 = v700;
        }
        uint64_t v701 = (*(unsigned __int8 *)(v666 + (v657 >> 3)) >> (8 - (v657 & 7) - v702)) & ~(-1 << v702) | (v701 << v702);
        v657 += v702;
        *unsigned int v21 = v657;
        v700 -= v702;
      }
      while (v700);
      uint64_t v703 = *a3;
      *(void *)(*a3 + 1632) = v701;
      if (v701)
      {
        {
          operator new();
        }
        uint64_t v704 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                    + 16))(geo::codec::Allocator::instance(void)::alloc, 8 * v701, 8);
        uint64_t v703 = *a3;
        *(void *)(*a3 + 1616) = v704;
        if (!v704)
        {
          int v27 = 4999;
          goto LABEL_157;
        }
      }
    }
    uint64_t v1080 = *(void *)(v703 + 856);
    uint64_t v719 = *(void *)(v703 + 864);
    uint64_t v720 = *a3;
    uint64_t v1098 = *(void *)(*a3 + 1056);
    if (v695)
    {
      *(void *)(v720 + 1056) = v1098 + v695;
      uint64_t v721 = *(void *)(v720 + 1048);
      {
        operator new();
      }
      uint64_t v722 = *a3;
      if (v721)
      {
        uint64_t v723 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                   + 32))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v722 + 1048), 24 * *(void *)(v722 + 1056));
        if (v723)
        {
          *(void *)(*a3 + 1048) = v723;
          bzero((void *)(v723 + 24 * v1098), 24 * v695);
          uint64_t v724 = *(void *)(*a3 + 1048);
          goto LABEL_1184;
        }
        {
          operator new();
        }
        (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(*a3 + 1048), 0);
        *(void *)(*a3 + 1048) = 0;
LABEL_1414:
        uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 5006;
        goto LABEL_21;
      }
      uint64_t v724 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                 + 24))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v722 + 1056), 24);
      *(void *)(*a3 + 1048) = v724;
LABEL_1184:
      if (!v724) {
        goto LABEL_1414;
      }
    }
    if (v35)
    {
      uint64_t v1092 = 0;
      unsigned int v1075 = 0;
      unint64_t v1072 = v719 - v1080;
      uint64_t v725 = *(void *)(v9 + 16);
      unint64_t v726 = *(void *)(v9 + 24);
      uint64_t v1070 = v35;
      do
      {
        unint64_t v727 = 8 * v725;
        if (v726 + 2 > 8 * v725)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 5014;
          goto LABEL_21;
        }
        int v728 = 0;
        uint64_t v729 = *a3;
        int v1086 = *(std::__shared_weak_count **)(*a3 + 1408);
        uint64_t v730 = *v1154;
        unint64_t v731 = 2;
        do
        {
          unint64_t v732 = 8 - (v726 & 7);
          if (v731 < v732) {
            unint64_t v732 = v731;
          }
          int v728 = (*(unsigned __int8 *)(v730 + (v726 >> 3)) >> (8 - (v726 & 7) - v732)) & ~(-1 << v732) | (v728 << v732);
          v726 += v732;
          *unsigned int v21 = v726;
          v731 -= v732;
        }
        while (v731);
        *((unsigned char *)&v1086[11].__shared_owners_ + 344 * v1092 + 1) = v728;
        unint64_t v733 = v726 + 1;
        if (v726 + 1 > v727)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 5020;
          goto LABEL_21;
        }
        unsigned int v734 = *(unsigned __int8 *)(v730 + (v726 >> 3));
        *unsigned int v21 = v733;
        char v735 = ~(_BYTE)v726 & 7;
        unint64_t v736 = &v1086[11].__shared_weak_owners_ + 43 * v1092;
        if ((v734 >> v735))
        {
          *unint64_t v736 = v1098;
          if (v733 + v1148 > v727)
          {
            int v27 = 5025;
            goto LABEL_157;
          }
          if (v1148)
          {
            unsigned int v737 = 0;
            unint64_t v738 = v1148;
            do
            {
              unint64_t v739 = 8 - (v733 & 7);
              if (v738 < v739) {
                unint64_t v739 = v738;
              }
              unsigned int v737 = (*(unsigned __int8 *)(v730 + (v733 >> 3)) >> (8 - (v733 & 7) - v739)) & ~(-1 << v739) | (v737 << v739);
              v733 += v739;
              *unsigned int v21 = v733;
              v738 -= v739;
            }
            while (v738);
          }
          else
          {
            unsigned int v737 = 0;
          }
          uint64_t v740 = v737;
          if (v1072 <= v737)
          {
            int v27 = 5026;
            goto LABEL_157;
          }
          if (v733 + v1148 > v727)
          {
            int v27 = 5029;
            goto LABEL_157;
          }
          if (v1148)
          {
            unsigned int v741 = 0;
            unint64_t v742 = v1148;
            do
            {
              unint64_t v743 = 8 - (v733 & 7);
              if (v742 < v743) {
                unint64_t v743 = v742;
              }
              unsigned int v741 = (*(unsigned __int8 *)(v730 + (v733 >> 3)) >> (8 - (v733 & 7) - v743)) & ~(-1 << v743) | (v741 << v743);
              v733 += v743;
              *unsigned int v21 = v733;
              v742 -= v743;
            }
            while (v742);
          }
          else
          {
            unsigned int v741 = 0;
          }
          uint64_t v744 = v741;
          if (v1072 <= v741)
          {
            int v27 = 5030;
            goto LABEL_157;
          }
          if (v733 + v1148 > v727)
          {
            int v27 = 5033;
            goto LABEL_157;
          }
          if (v1148)
          {
            unsigned int v745 = 0;
            unint64_t v746 = v1148;
            do
            {
              unint64_t v747 = 8 - (v733 & 7);
              if (v746 < v747) {
                unint64_t v747 = v746;
              }
              unsigned int v745 = (*(unsigned __int8 *)(v730 + (v733 >> 3)) >> (8 - (v733 & 7) - v747)) & ~(-1 << v747) | (v745 << v747);
              v733 += v747;
              *unsigned int v21 = v733;
              v746 -= v747;
            }
            while (v746);
          }
          else
          {
            unsigned int v745 = 0;
          }
          uint64_t v748 = v745;
          if (v1072 <= v745)
          {
            int v27 = 5034;
            goto LABEL_157;
          }
          uint64_t v749 = *(void *)(v729 + 1048) + 24 * v1098;
          *(void *)uint64_t v749 = v1080 + v740;
          *(_DWORD *)(v749 + 16) = 0;
          unint64_t v750 = geo::codec::langLocaleForOffset(v740, *(const void **)(v729 + 888), *(void *)(v729 + 896));
          uint64_t v751 = *a3;
          uint64_t v752 = *(void *)(*a3 + 1048) + 24 * v1098;
          *(void *)(v752 + 8) = v750;
          *(void *)(v752 + 24) = v1080 + v744;
          *(_DWORD *)(v752 + 40) = 0;
          unint64_t v753 = geo::codec::langLocaleForOffset(v744, *(const void **)(v751 + 888), *(void *)(v751 + 896));
          uint64_t v754 = *a3;
          uint64_t v755 = *(void *)(*a3 + 1048);
          *(void *)(v755 + 24 * (v1098 + 1) + 8) = v753;
          uint64_t v756 = v755 + 24 * (v1098 + 2);
          *(void *)uint64_t v756 = v1080 + v748;
          *(_DWORD *)(v756 + 16) = 0;
          *(void *)(*(void *)(*a3 + 1048) + 24 * (v1098 + 2) + 8) = geo::codec::langLocaleForOffset(v748, *(const void **)(v754 + 888), *(void *)(v754 + 896));
          uint64_t v725 = *(void *)(v9 + 16);
          unint64_t v733 = *(void *)(v9 + 24);
          unint64_t v727 = 8 * v725;
        }
        else
        {
          *unint64_t v736 = 255;
        }
        if (v733 + v1118 > v727)
        {
          int v27 = 5057;
          goto LABEL_157;
        }
        int v757 = v1118;
        if (v1118)
        {
          int v757 = 0;
          uint64_t v758 = *v1154;
          unint64_t v759 = v1118;
          do
          {
            unint64_t v760 = 8 - (v733 & 7);
            if (v759 < v760) {
              unint64_t v760 = v759;
            }
            int v757 = (*(unsigned __int8 *)(v758 + (v733 >> 3)) >> (8 - (v733 & 7) - v760)) & ~(-1 << v760) | (v757 << v760);
            v733 += v760;
            *unsigned int v21 = v733;
            v759 -= v760;
          }
          while (v759);
        }
        uint64_t v761 = (char *)v1086 + 344 * v1092;
        *((_DWORD *)v761 + 73) = v1075;
        v761[274] = v757;
        if (*(void *)(*a3 + 1632) < (unint64_t)(v757 + v1075))
        {
          int v27 = 5062;
          goto LABEL_157;
        }
        if (v757)
        {
          int v762 = 0;
          unint64_t v763 = (int *)(*(void *)(*a3 + 1616) + 8 * v1075);
          do
          {
            if (v733 + v1152 > v727)
            {
              int v27 = 5066;
              goto LABEL_157;
            }
            if (v1152)
            {
              int v765 = 0;
              unint64_t v766 = v1152;
              uint64_t v767 = *v1154;
              do
              {
                unint64_t v768 = 8 - (v733 & 7);
                if (v766 < v768) {
                  unint64_t v768 = v766;
                }
                int v765 = (*(unsigned __int8 *)(v767 + (v733 >> 3)) >> (8 - (v733 & 7) - v768)) & ~(-1 << v768) | (v765 << v768);
                v733 += v768;
                *unsigned int v21 = v733;
                v766 -= v768;
              }
              while (v766);
            }
            else
            {
              int v765 = 0;
            }
            *unint64_t v763 = v765;
            if (v733 + v1150 > v727)
            {
              int v27 = 5067;
              goto LABEL_157;
            }
            if (v1150)
            {
              int v764 = 0;
              uint64_t v769 = *v1154;
              unint64_t v770 = v1150;
              do
              {
                unint64_t v771 = 8 - (v733 & 7);
                if (v770 < v771) {
                  unint64_t v771 = v770;
                }
                int v764 = (*(unsigned __int8 *)(v769 + (v733 >> 3)) >> (8 - (v733 & 7) - v771)) & ~(-1 << v771) | (v764 << v771);
                v733 += v771;
                *unsigned int v21 = v733;
                v770 -= v771;
              }
              while (v770);
            }
            else
            {
              int v764 = 0;
            }
            v763[1] = v764;
            ++v762;
            v763 += 2;
          }
          while (v762 != v757);
          v1075 += v757;
        }
        unint64_t v726 = v733 + 1;
        if (v733 + 1 > v727)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 5071;
          goto LABEL_21;
        }
        uint64_t v772 = *v1154;
        unsigned int v773 = *(unsigned __int8 *)(*v1154 + (v733 >> 3));
        *unsigned int v21 = v726;
        if ((v773 >> (~(_BYTE)v733 & 7)))
        {
          if (v726 + v1109 > v727)
          {
            uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 5074;
            goto LABEL_21;
          }
          int v774 = v1109;
          if (v1109)
          {
            int v774 = 0;
            unint64_t v775 = v1109;
            do
            {
              unint64_t v776 = 8 - (v726 & 7);
              if (v775 < v776) {
                unint64_t v776 = v775;
              }
              int v774 = (*(unsigned __int8 *)(v772 + (v726 >> 3)) >> (8 - (v726 & 7) - v776)) & ~(-1 << v776) | (v774 << v776);
              v726 += v776;
              *unsigned int v21 = v726;
              v775 -= v776;
            }
            while (v775);
          }
          if (v726 + v1118 > v727)
          {
            uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 5077;
            goto LABEL_21;
          }
          LOBYTE(v777) = v1118;
          if (v1118)
          {
            int v777 = 0;
            unint64_t v778 = v1118;
            do
            {
              unint64_t v779 = 8 - (v726 & 7);
              if (v778 < v779) {
                unint64_t v779 = v778;
              }
              int v777 = (*(unsigned __int8 *)(v772 + (v726 >> 3)) >> (8 - (v726 & 7) - v779)) & ~(-1 << v779) | (v777 << v779);
              v726 += v779;
              *unsigned int v21 = v726;
              v778 -= v779;
            }
            while (v778);
          }
          *((_DWORD *)&v1086[12].__shared_owners_ + 86 * v1092) = v774;
        }
        else
        {
          *((_DWORD *)&v1086[12].__shared_owners_ + 86 * v1092) = -1;
          LOBYTE(v777) = -1;
        }
        v1098 += 3;
        *((unsigned char *)&v1086[11].__shared_owners_ + 344 * v1092++ + 3) = v777;
      }
      while (v1092 != v1070);
    }
    else
    {
      unsigned int v1075 = 0;
    }
    if (*(void *)(*a3 + 1632) != v1075)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5087;
      goto LABEL_21;
    }
    unint64_t v657 = *(void *)(v9 + 24);
    unint64_t v658 = 8 * *(void *)(v9 + 16);
  }
  unint64_t v780 = v657 + 1;
  if (v657 + 1 > v658)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5094;
    goto LABEL_21;
  }
  uint64_t v781 = *v1154;
  unsigned int v782 = *(unsigned __int8 *)(*v1154 + (v657 >> 3));
  *unsigned int v21 = v780;
  if ((v782 >> (~(_BYTE)v657 & 7)))
  {
    if (v657 + 6 > v658) {
      goto LABEL_1280;
    }
    int v783 = 0;
    unint64_t v784 = 5;
    do
    {
      unint64_t v785 = 8 - (v780 & 7);
      if (v784 < v785) {
        unint64_t v785 = v784;
      }
      int v783 = (*(unsigned __int8 *)(v781 + (v780 >> 3)) >> (8 - (v780 & 7) - v785)) & ~(-1 << v785) | (v783 << v785);
      v780 += v785;
      *unsigned int v21 = v780;
      v784 -= v785;
    }
    while (v784);
    unint64_t v786 = (v783 + 1);
    if (v780 + v786 > v658)
    {
LABEL_1280:
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5098;
      goto LABEL_21;
    }
    LODWORD(v787) = 0;
    if (v783 != -1)
    {
      do
      {
        unint64_t v788 = 8 - (v780 & 7);
        if (v786 < v788) {
          unint64_t v788 = v786;
        }
        uint64_t v787 = (*(unsigned __int8 *)(v781 + (v780 >> 3)) >> (8 - (v780 & 7) - v788)) & ~(-1 << v788) | (v787 << v788);
        v780 += v788;
        *unsigned int v21 = v780;
        v786 -= v788;
      }
      while (v786);
      if (v787)
      {
        {
          operator new();
        }
        uint64_t v789 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                    + 16))(geo::codec::Allocator::instance(void)::alloc, 8 * v787, 8);
        uint64_t v790 = *a3;
        *(void *)(*a3 + 1640) = v789;
        if (!v789)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 5102;
          goto LABEL_21;
        }
        *(void *)(v790 + 1648) = v787;
      }
    }
    uint64_t v791 = *a3;
    uint64_t v792 = *(void *)(*a3 + 1352);
    uint64_t v793 = *(void *)(*a3 + 1344);
    uint64_t v794 = v792 - v793;
    if (v792 == v793)
    {
      unsigned int v796 = 0;
    }
    else
    {
      uint64_t v795 = 0;
      unsigned int v796 = 0;
      unint64_t v797 = v794 / 184;
      if (v797 <= 1) {
        unint64_t v797 = 1;
      }
      do
      {
        unint64_t v799 = *(void *)(v9 + 24);
        unint64_t v800 = v799 + 1;
        unint64_t v801 = 8 * *(void *)(v9 + 16);
        if (v799 + 1 > v801)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 5109;
          goto LABEL_21;
        }
        uint64_t v802 = *v1154;
        unsigned int v803 = *(unsigned __int8 *)(*v1154 + (v799 >> 3));
        *unsigned int v21 = v800;
        if ((v803 >> (~(_BYTE)v799 & 7)))
        {
          if (v800 + v1129 > v801)
          {
            uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 5112;
            goto LABEL_21;
          }
          if (v1129)
          {
            LODWORD(v804) = 0;
            unint64_t v805 = v1129;
            do
            {
              unint64_t v806 = 8 - (v800 & 7);
              if (v805 < v806) {
                unint64_t v806 = v805;
              }
              uint64_t v804 = (*(unsigned __int8 *)(v802 + (v800 >> 3)) >> (8 - (v800 & 7) - v806)) & ~(-1 << v806) | (v804 << v806);
              v800 += v806;
              *unsigned int v21 = v800;
              v805 -= v806;
            }
            while (v805);
            uint64_t v807 = v793 + 184 * v795;
            *(void *)(v807 + 88) = v796;
            *(void *)(v807 + 96) = v804;
            if (v804)
            {
              unsigned int v808 = v804 + v796;
              do
              {
                unint64_t v809 = *(void *)(v9 + 24);
                if (v809 + v1129 > 8 * *(void *)(v9 + 16))
                {
                  uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
                  int v27 = 5119;
                  goto LABEL_21;
                }
                LODWORD(v810) = 0;
                unint64_t v811 = v1129;
                do
                {
                  unint64_t v812 = 8 - (v809 & 7);
                  if (v811 < v812) {
                    unint64_t v812 = v811;
                  }
                  uint64_t v810 = (*(unsigned __int8 *)(v802 + (v809 >> 3)) >> (8 - (v809 & 7) - v812)) & ~(-1 << v812) | (v810 << v812);
                  v809 += v812;
                  *unsigned int v21 = v809;
                  v811 -= v812;
                }
                while (v811);
                *(void *)(*(void *)(v791 + 1640) + 8 * v796++) = v810;
              }
              while (v796 != v808);
              unsigned int v796 = v808;
            }
          }
          else
          {
            uint64_t v798 = v793 + 184 * v795;
            *(void *)(v798 + 88) = v796;
            *(void *)(v798 + 96) = 0;
          }
        }
        ++v795;
      }
      while (v795 != v797);
    }
    if (v796 != v787)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5124;
      goto LABEL_21;
    }
  }
  uint64_t v813 = 0x82FA0BE82FA0BE83 * ((uint64_t)(*(void *)(*a3 + 1416) - *(void *)(*a3 + 1408)) >> 3);
  v1172[0] = &unk_1ED517970;
  v1172[1] = a3;
  int v1173 = v1172;
  char v814 = geo::codec::decodeZoomRanks(v1154, v813, (uint64_t)v1172);
  if (v1173 == v1172)
  {
    (*(void (**)(void *))(v1172[0] + 32))(v1172);
  }
  else if (v1173)
  {
    (*(void (**)(void))(*v1173 + 40))();
  }
  if ((v814 & 1) == 0)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5132;
    goto LABEL_21;
  }
  uint64_t v815 = *(void *)(v9 + 16);
  unint64_t v816 = *(void *)(v9 + 24);
  unint64_t v817 = v816 + 1;
  unint64_t v818 = 8 * v815;
  if (v816 + 1 > 8 * v815)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5138;
    goto LABEL_21;
  }
  unsigned int v819 = *(unsigned __int8 *)(*v1154 + (v816 >> 3));
  *unsigned int v21 = v817;
  if ((v819 >> (~(_BYTE)v816 & 7)))
  {
    uint64_t v820 = *a3;
    if (*(void *)(*a3 + 1392))
    {
      {
        operator new();
      }
      uint64_t v821 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                 + 24))(geo::codec::Allocator::instance(void)::alloc, 1, *(void *)(*a3 + 1392));
      uint64_t v820 = *a3;
      *(void *)(*a3 + 1656) = v821;
      if (!v821)
      {
        uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 5142;
        goto LABEL_21;
      }
      uint64_t v815 = *(void *)(v9 + 16);
      unint64_t v817 = *(void *)(v9 + 24);
    }
    uint64_t v822 = *(void *)(v820 + 1352);
    uint64_t v823 = *(void *)(v820 + 1344);
    unint64_t v818 = 8 * v815;
    if (v822 != v823)
    {
      unint64_t v824 = 0;
      BOOL v825 = (void *)*a3;
      do
      {
        unint64_t v826 = v817 + 1;
        if (v817 + 1 > v818)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 5146;
          goto LABEL_21;
        }
        uint64_t v827 = *v1154;
        unsigned int v828 = *(unsigned __int8 *)(*v1154 + (v817 >> 3));
        *unsigned int v21 = v826;
        uint64_t v829 = v825[168];
        if (((v828 >> (~(_BYTE)v817 & 7)) & 1) != 0 && (uint64_t v830 = v829 + 184 * v824, (v831 = *(void *)(v830 + 32)) != 0))
        {
          uint64_t v832 = 0;
          uint64_t v833 = (void *)(v830 + 24);
          unint64_t v834 = (v818 - v817) >> 1;
          do
          {
            if (v834 == v832)
            {
              int v27 = 5151;
              goto LABEL_157;
            }
            int v835 = *(unsigned __int8 *)(v827 + (v826 >> 3));
            *unsigned int v21 = v826 + 1;
            unint64_t v817 = v826 + 2;
            if (v826 + 2 > v818)
            {
              int v27 = 5152;
              goto LABEL_157;
            }
            int v836 = (1 << (~(_BYTE)v826 & 7)) & v835;
            int v837 = (1 << (~(v826 + 1) & 7)) & *(unsigned __int8 *)(v827 + ((v826 + 1) >> 3));
            *unsigned int v21 = v817;
            if (!(v836 | v837))
            {
              int v27 = 5153;
              goto LABEL_157;
            }
            char v838 = v837 == 0;
            if (!v836) {
              char v838 = 2;
            }
            *(unsigned char *)(v825[207] + *v833 + v832++) = v838;
            unint64_t v826 = v817;
          }
          while (v831 != v832);
        }
        else
        {
          ++v817;
        }
        ++v824;
      }
      while (v824 < 0xD37A6F4DE9BD37A7 * ((v825[169] - v829) >> 3));
    }
  }
  if (v817 + 1 > v818)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5185;
    goto LABEL_21;
  }
  unsigned int v839 = *(unsigned __int8 *)(*v1154 + (v817 >> 3));
  *unsigned int v21 = v817 + 1;
  if ((v839 >> (~(_BYTE)v817 & 7)))
  {
    {
      operator new();
    }
    uint64_t v840 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                               + 24))(geo::codec::Allocator::instance(void)::alloc, v1130, 8);
    uint64_t v841 = *a3;
    *(void *)(v841 + 1696) = v840;
    *(void *)(v841 + 1704) = v1130;
    if (!v840)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5189;
      goto LABEL_21;
    }
    if (v1130)
    {
      if (v1130 == 1)
      {
        uint64_t v842 = 0;
        goto LABEL_1363;
      }
      uint64_t v842 = v1130 & 0xFFFFFFFE;
      int v843 = (_DWORD *)(v840 + 12);
      uint64_t v844 = v842;
      do
      {
        *(v843 - 2) = 1065353216;
        *int v843 = 1065353216;
        v843 += 4;
        v844 -= 2;
      }
      while (v844);
      if (v842 != v1130)
      {
LABEL_1363:
        uint64_t v845 = v1130 - v842;
        unsigned int v846 = (_DWORD *)(v840 + 8 * v842 + 4);
        do
        {
          *unsigned int v846 = 1065353216;
          v846 += 2;
          --v845;
        }
        while (v845);
      }
    }
    unint64_t v847 = *(void *)(v9 + 24);
    if (v847 + 5 > 8 * *(void *)(v9 + 16))
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5195;
      goto LABEL_21;
    }
    int v848 = 0;
    uint64_t v849 = *v1154;
    unint64_t v850 = 5;
    do
    {
      unint64_t v851 = 8 - (v847 & 7);
      if (v850 < v851) {
        unint64_t v851 = v850;
      }
      int v848 = (*(unsigned __int8 *)(v849 + (v847 >> 3)) >> (8 - (v847 & 7) - v851)) & ~(-1 << v851) | (v848 << v851);
      v847 += v851;
      *unsigned int v21 = v847;
      v850 -= v851;
    }
    while (v850);
    unint64_t v852 = (v848 + 1);
    float v853 = __exp10f(floorf((float)v852 * 0.30103));
    uint64_t v854 = *a3;
    uint64_t v855 = *(void *)(*a3 + 1352);
    uint64_t v856 = *(void *)(*a3 + 1344);
    uint64_t v857 = v855 - v856;
    if (v855 != v856)
    {
      uint64_t v858 = 0;
      unint64_t v859 = v857 / 184;
      unint64_t v860 = *(void *)(v9 + 24);
      unint64_t v861 = 8 * *(void *)(v9 + 16);
      if (v859 <= 1) {
        unint64_t v859 = 1;
      }
      float v862 = 1.0 / v853;
      do
      {
        unint64_t v863 = v860 + 1;
        if (v860 + 1 > v861)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 5202;
          goto LABEL_21;
        }
        uint64_t v864 = *v1154;
        unsigned int v865 = *(unsigned __int8 *)(*v1154 + (v860 >> 3));
        *unsigned int v21 = v863;
        if ((v865 >> (~(_BYTE)v860 & 7)))
        {
          uint64_t v866 = v856 + 184 * v858;
          uint64_t v868 = *(unsigned int *)(v866 + 16);
          int v867 = *(_DWORD *)(v866 + 20);
          if (v867 + (int)v868 > v1130)
          {
            uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 5205;
            goto LABEL_21;
          }
          if (v867)
          {
            int v869 = 0;
            BOOL v870 = (float *)(*(void *)(v854 + 1696) + 8 * v868);
            do
            {
              unint64_t v871 = v863 + 1;
              if (v863 + 1 > v861)
              {
                uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
                int v27 = 5209;
                goto LABEL_21;
              }
              unsigned int v872 = *(unsigned __int8 *)(v864 + (v863 >> 3));
              *unsigned int v21 = v871;
              if ((v872 >> (~(_BYTE)v863 & 7)))
              {
                if (v871 + v852 > v861)
                {
                  uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
                  int v27 = 5212;
                  goto LABEL_21;
                }
                unsigned int v873 = 0;
                if (v852)
                {
                  unint64_t v874 = v852;
                  do
                  {
                    unint64_t v875 = 8 - (v871 & 7);
                    if (v874 < v875) {
                      unint64_t v875 = v874;
                    }
                    unsigned int v873 = (*(unsigned __int8 *)(v864 + (v871 >> 3)) >> (8 - (v871 & 7) - v875)) & ~(-1 << v875) | (v873 << v875);
                    v871 += v875;
                    *unsigned int v21 = v871;
                    v874 -= v875;
                  }
                  while (v874);
                }
                *BOOL v870 = v862 * (float)v873;
              }
              unint64_t v863 = v871 + 1;
              if (v871 + 1 > v861)
              {
                uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
                int v27 = 5216;
                goto LABEL_21;
              }
              unsigned int v876 = *(unsigned __int8 *)(v864 + (v871 >> 3));
              *unsigned int v21 = v863;
              if ((v876 >> (~(_BYTE)v871 & 7)))
              {
                if (v863 + v852 > v861)
                {
                  uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
                  int v27 = 5219;
                  goto LABEL_21;
                }
                unsigned int v877 = 0;
                if (v852)
                {
                  unint64_t v878 = v852;
                  do
                  {
                    unint64_t v879 = 8 - (v863 & 7);
                    if (v878 < v879) {
                      unint64_t v879 = v878;
                    }
                    unsigned int v877 = (*(unsigned __int8 *)(v864 + (v863 >> 3)) >> (8 - (v863 & 7) - v879)) & ~(-1 << v879) | (v877 << v879);
                    v863 += v879;
                    *unsigned int v21 = v863;
                    v878 -= v879;
                  }
                  while (v878);
                }
                v870[1] = v862 * (float)v877;
              }
              ++v869;
              v870 += 2;
            }
            while (v869 != v867);
          }
        }
        ++v858;
        unint64_t v860 = v863;
      }
      while (v858 != v859);
    }
  }
  if ((geo::codec::_decodeTransitLabelsFromStream(v1154, 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(*a3 + 1568) - *(void *)(*a3 + 1560)) >> 3), *(void *)(*a3 + 1560), 248, a3) & 1) == 0)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5230;
    goto LABEL_21;
  }
  int v880 = *(unsigned __int8 **)(*a3 + 1400);
  if (v880) {
    LODWORD(v880) = *v880;
  }
  if ((geo::codec::_decodeLabelTextPlacementsFromStream(v1154, 0x82FA0BE82FA0BE83 * ((uint64_t)(*(void *)(*a3 + 1416) - *(void *)(*a3 + 1408)) >> 3), *(void *)(*a3 + 1408), 344, v880, a3) & 1) == 0)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5236;
    goto LABEL_21;
  }
  unint64_t v881 = geo::codec::_decodeLabelTextPlacementsFromStream(v1154, 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(*a3 + 1568) - *(void *)(*a3 + 1560)) >> 3), *(void *)(*a3 + 1560), 248, v1126, a3);
  if ((v881 & 1) == 0)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5241;
    goto LABEL_21;
  }
  if (*(_DWORD *)(v9 + 64) >= 0x1Fu)
  {
    uint64_t v882 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(*a3 + 1472) - *(void *)(*a3 + 1464)) >> 3);
    v1170[0] = &unk_1ED5179C8;
    v1170[1] = a3;
    uint64_t v1171 = v1170;
    geo::codec::decodeZoomRanks(v1154, v882, (uint64_t)v1170);
    if (v1171 == v1170)
    {
      (*(void (**)(void *))(v1170[0] + 32))(v1170);
    }
    else if (v1171)
    {
      (*(void (**)(void))(*v1171 + 40))();
    }
    uint64_t v884 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(*a3 + 1472) - *(void *)(*a3 + 1464)) >> 3);
    v1168[0] = &unk_1ED517A20;
    v1168[1] = a3;
    unsigned int v1169 = v1168;
    geo::codec::decodeZoomRanks(v1154, v884, (uint64_t)v1168);
    unint64_t v881 = (unint64_t)v1169;
    if (v1169 == v1168)
    {
      unint64_t v881 = (*(uint64_t (**)(void *))(v1168[0] + 32))(v1168);
    }
    else if (v1169)
    {
      unint64_t v881 = (*(uint64_t (**)(void))(*v1169 + 40))();
    }
    if (*(_DWORD *)(v9 + 64) >= 0x20u)
    {
      uint64_t v885 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(*a3 + 1568) - *(void *)(*a3 + 1560)) >> 3);
      v1166[0] = &unk_1ED517A78;
      v1166[1] = a3;
      int v1167 = v1166;
      geo::codec::decodeZoomRanks(v1154, v885, (uint64_t)v1166);
      if (v1167 == v1166)
      {
        (*(void (**)(void *))(v1166[0] + 32))(v1166);
      }
      else if (v1167)
      {
        (*(void (**)(void))(*v1167 + 40))();
      }
      uint64_t v886 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(*a3 + 1568) - *(void *)(*a3 + 1560)) >> 3);
      v1164[0] = &unk_1ED517AD0;
      v1164[1] = a3;
      char v1165 = v1164;
      geo::codec::decodeZoomRanks(v1154, v886, (uint64_t)v1164);
      unint64_t v881 = (unint64_t)v1165;
      if (v1165 == v1164)
      {
        unint64_t v881 = (*(uint64_t (**)(void *))(v1164[0] + 32))(v1164);
      }
      else if (v1165)
      {
        unint64_t v881 = (*(uint64_t (**)(void))(*v1165 + 40))();
      }
    }
  }
  unint64_t v887 = *(void *)(v9 + 24);
  unint64_t v888 = v887 + 1;
  unint64_t v889 = 8 * *(void *)(v9 + 16);
  if (v887 + 1 > v889)
  {
    int v27 = 5264;
    goto LABEL_157;
  }
  uint64_t v890 = *v1154;
  unsigned int v891 = *(unsigned __int8 *)(*v1154 + (v887 >> 3));
  *unsigned int v21 = v888;
  if (((v891 >> (~(_BYTE)v887 & 7)) & 1) == 0
    || (uint64_t v892 = *(void *)(*a3 + 1416), v893 = *(void *)(*a3 + 1408), v892 == v893))
  {
    unint64_t v896 = v887 + 1;
  }
  else
  {
    unint64_t v894 = (v892 - v893) / 344;
    if (v894 <= 1) {
      unint64_t v894 = 1;
    }
    unint64_t v895 = (unsigned char *)(v893 + 320);
    do
    {
      unint64_t v896 = v888 + 1;
      if (v888 + 1 > v889)
      {
        int v27 = 5267;
        goto LABEL_157;
      }
      unsigned int v897 = *(unsigned __int8 *)(v890 + (v888 >> 3));
      *unsigned int v21 = v896;
      *unint64_t v895 = (v897 >> (~(_BYTE)v888 & 7)) & 1;
      v895 += 344;
      ++v888;
      --v894;
    }
    while (v894);
  }
  unint64_t v898 = v896 + 1;
  if (v896 + 1 > v889)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5275;
    goto LABEL_21;
  }
  unsigned int v899 = *(unsigned __int8 *)(v890 + (v896 >> 3));
  *unsigned int v21 = v898;
  if ((v899 >> (~(_BYTE)v896 & 7)))
  {
    if (v896 + 6 > v889)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5278;
      goto LABEL_21;
    }
    int v900 = 0;
    unint64_t v901 = 5;
    do
    {
      unint64_t v902 = 8 - (v898 & 7);
      if (v901 < v902) {
        unint64_t v902 = v901;
      }
      int v900 = (*(unsigned __int8 *)(v890 + (v898 >> 3)) >> (8 - (v898 & 7) - v902)) & ~(-1 << v902) | (v900 << v902);
      v898 += v902;
      *unsigned int v21 = v898;
      v901 -= v902;
    }
    while (v901);
    if (v898 + 5 > v889)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5281;
      goto LABEL_21;
    }
    int v903 = 0;
    unint64_t v1149 = (v900 + 1);
    unint64_t v904 = 5;
    do
    {
      unint64_t v905 = 8 - (v898 & 7);
      if (v904 < v905) {
        unint64_t v905 = v904;
      }
      int v903 = (*(unsigned __int8 *)(v890 + (v898 >> 3)) >> (8 - (v898 & 7) - v905)) & ~(-1 << v905) | (v903 << v905);
      v898 += v905;
      *unsigned int v21 = v898;
      v904 -= v905;
    }
    while (v904);
    if (v898 + 5 > v889) {
      goto LABEL_1493;
    }
    int v906 = 0;
    unint64_t v1131 = (v903 + 1);
    unint64_t v907 = 5;
    do
    {
      unint64_t v908 = 8 - (v898 & 7);
      if (v907 < v908) {
        unint64_t v908 = v907;
      }
      int v906 = (*(unsigned __int8 *)(v890 + (v898 >> 3)) >> (8 - (v898 & 7) - v908)) & ~(-1 << v908) | (v906 << v908);
      v898 += v908;
      *unsigned int v21 = v898;
      v907 -= v908;
    }
    while (v907);
    unint64_t v909 = (v906 + 1);
    if (v898 + v909 > v889)
    {
LABEL_1493:
      int v27 = 5284;
      goto LABEL_157;
    }
    if (v906 == -1) {
      goto LABEL_1504;
    }
    LODWORD(v910) = 0;
    do
    {
      unint64_t v911 = 8 - (v898 & 7);
      if (v909 < v911) {
        unint64_t v911 = v909;
      }
      uint64_t v910 = (*(unsigned __int8 *)(v890 + (v898 >> 3)) >> (8 - (v898 & 7) - v911)) & ~(-1 << v911) | (v910 << v911);
      v898 += v911;
      *unsigned int v21 = v898;
      v909 -= v911;
    }
    while (v909);
    if (!v910)
    {
LABEL_1504:
      int v27 = 5285;
      goto LABEL_157;
    }
    uint64_t v912 = *a3;
    uint64_t v1128 = *(void *)(*a3 + 856);
    uint64_t v913 = *(void *)(*a3 + 864);
    unint64_t v914 = *(void *)(*a3 + 1072);
    *(void *)(v912 + 1072) = v914 + v910;
    uint64_t v915 = *(void *)(v912 + 1064);
    {
      operator new();
    }
    uint64_t v916 = *a3;
    if (v915)
    {
      uint64_t v917 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                 + 32))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v916 + 1064), 32 * *(void *)(v916 + 1072));
      if (v917)
      {
        *(void *)(*a3 + 1064) = v917;
        bzero((void *)(v917 + 32 * v914), 32 * v910);
        unint64_t v881 = *(void *)(*a3 + 1064);
        goto LABEL_1508;
      }
      {
        operator new();
      }
      (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(*a3 + 1064), 0);
      *(void *)(*a3 + 1064) = 0;
LABEL_1579:
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5290;
      goto LABEL_21;
    }
    unint64_t v881 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                               + 24))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v916 + 1072), 32);
    *(void *)(*a3 + 1064) = v881;
LABEL_1508:
    if (!v881) {
      goto LABEL_1579;
    }
    uint64_t v918 = *a3;
    uint64_t v919 = *(void *)(*a3 + 1560);
    if (*(void *)(*a3 + 1568) != v919)
    {
      unint64_t v920 = 0;
      do
      {
        unint64_t v921 = *(void *)(v9 + 24);
        unint64_t v922 = v921 + 1;
        unint64_t v923 = 8 * *(void *)(v9 + 16);
        if (v921 + 1 > v923)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 5294;
          goto LABEL_21;
        }
        uint64_t v924 = *v1154;
        unsigned int v925 = *(unsigned __int8 *)(*v1154 + (v921 >> 3));
        *unsigned int v21 = v922;
        if ((v925 >> (~(_BYTE)v921 & 7)))
        {
          if (v922 + v1149 > v923)
          {
            int v27 = 5297;
            goto LABEL_157;
          }
          if (v1149)
          {
            unsigned int v926 = 0;
            unint64_t v927 = v1149;
            do
            {
              unint64_t v928 = 8 - (v922 & 7);
              if (v927 < v928) {
                unint64_t v928 = v927;
              }
              unsigned int v926 = (*(unsigned __int8 *)(v924 + (v922 >> 3)) >> (8 - (v922 & 7) - v928)) & ~(-1 << v928) | (v926 << v928);
              v922 += v928;
              *unsigned int v21 = v922;
              v927 -= v928;
            }
            while (v927);
          }
          else
          {
            unsigned int v926 = 0;
          }
          uint64_t v929 = *a3;
          if (v914 >= *(void *)(*a3 + 1072))
          {
            int v27 = 5298;
            goto LABEL_157;
          }
          *(unsigned char *)(v919 + 72) = 1;
          *(_DWORD *)(v919 + 60) = v914;
          uint64_t v930 = v926;
          uint64_t v931 = *(void *)(v929 + 1064);
          *(void *)(v931 + 32 * v914 + 24) = v930;
          unint64_t v932 = v922 + 1;
          if (v922 + 1 > v923)
          {
            uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
            int v27 = 5305;
            goto LABEL_21;
          }
          unsigned int v933 = *(unsigned __int8 *)(v924 + (v922 >> 3));
          *unsigned int v21 = v932;
          if ((v933 >> (~(_BYTE)v922 & 7)))
          {
            if (v932 + v1131 > v923)
            {
              int v27 = 5308;
              goto LABEL_157;
            }
            if (v1131)
            {
              unsigned int v934 = 0;
              unint64_t v935 = v1131;
              do
              {
                unint64_t v936 = 8 - (v932 & 7);
                if (v935 < v936) {
                  unint64_t v936 = v935;
                }
                unsigned int v934 = (*(unsigned __int8 *)(v924 + (v932 >> 3)) >> (8 - (v932 & 7) - v936)) & ~(-1 << v936) | (v934 << v936);
                v932 += v936;
                *unsigned int v21 = v932;
                v935 -= v936;
              }
              while (v935);
            }
            else
            {
              unsigned int v934 = 0;
            }
            if (v913 - v1128 <= (unint64_t)v934)
            {
              int v27 = 5309;
              goto LABEL_157;
            }
            *(void *)(v931 + 32 * v914) = v1128 + v934;
            unint64_t v881 = (unint64_t)geo::codec::langLocaleForOffset(v934, *(const void **)(v929 + 888), *(void *)(v929 + 896));
            *(void *)(*(void *)(*a3 + 1064) + 32 * v914 + 8) = v881;
          }
          ++v914;
        }
        ++v920;
        v919 += 248;
        uint64_t v918 = *a3;
      }
      while (v920 < 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(*a3 + 1568) - *(void *)(*a3 + 1560)) >> 3));
    }
    if (v914 != *(void *)(v918 + 1072))
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5316;
      goto LABEL_21;
    }
    unint64_t v898 = *(void *)(v9 + 24);
    unint64_t v889 = 8 * *(void *)(v9 + 16);
  }
  unint64_t v937 = v898 + 1;
  if (v898 + 1 > v889)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5341;
    goto LABEL_21;
  }
  uint64_t v938 = *v1154;
  unsigned int v939 = *(unsigned __int8 *)(*v1154 + (v898 >> 3));
  *unsigned int v21 = v937;
  if ((v939 >> (~(_BYTE)v898 & 7)))
  {
    if (v898 + 7 > v889)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5344;
      goto LABEL_21;
    }
    int v940 = 0;
    unint64_t v941 = 6;
    do
    {
      unint64_t v942 = 8 - (v937 & 7);
      if (v941 < v942) {
        unint64_t v942 = v941;
      }
      int v940 = (*(unsigned __int8 *)(v938 + (v937 >> 3)) >> (8 - (v937 & 7) - v942)) & ~(-1 << v942) | (v940 << v942);
      v937 += v942;
      *unsigned int v21 = v937;
      v941 -= v942;
    }
    while (v941);
    if (v937 + 5 > v889)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5347;
      goto LABEL_21;
    }
    int v943 = 0;
    unint64_t v944 = (v940 + 1);
    unint64_t v945 = 5;
    do
    {
      unint64_t v946 = 8 - (v937 & 7);
      if (v945 < v946) {
        unint64_t v946 = v945;
      }
      int v943 = (*(unsigned __int8 *)(v938 + (v937 >> 3)) >> (8 - (v937 & 7) - v946)) & ~(-1 << v946) | (v943 << v946);
      v937 += v946;
      *unsigned int v21 = v937;
      v945 -= v946;
    }
    while (v945);
    if (v937 + 6 > v889)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5350;
      goto LABEL_21;
    }
    int v947 = 0;
    unint64_t v948 = (v943 + 1);
    unint64_t v949 = 6;
    do
    {
      unint64_t v950 = 8 - (v937 & 7);
      if (v949 < v950) {
        unint64_t v950 = v949;
      }
      int v947 = (*(unsigned __int8 *)(v938 + (v937 >> 3)) >> (8 - (v937 & 7) - v950)) & ~(-1 << v950) | (v947 << v950);
      v937 += v950;
      *unsigned int v21 = v937;
      v949 -= v950;
    }
    while (v949);
    if (v937 + 5 > v889) {
      goto LABEL_1565;
    }
    int v951 = 0;
    unint64_t v952 = (v947 + 1);
    unint64_t v953 = 5;
    do
    {
      unint64_t v954 = 8 - (v937 & 7);
      if (v953 < v954) {
        unint64_t v954 = v953;
      }
      int v951 = (*(unsigned __int8 *)(v938 + (v937 >> 3)) >> (8 - (v937 & 7) - v954)) & ~(-1 << v954) | (v951 << v954);
      v937 += v954;
      *unsigned int v21 = v937;
      v953 -= v954;
    }
    while (v953);
    unint64_t v955 = (v951 + 1);
    if (v937 + v955 > v889)
    {
LABEL_1565:
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5353;
      goto LABEL_21;
    }
    int v956 = 0;
    if (v951 != -1)
    {
      do
      {
        unint64_t v957 = 8 - (v937 & 7);
        if (v955 < v957) {
          unint64_t v957 = v955;
        }
        int v956 = (*(unsigned __int8 *)(v938 + (v937 >> 3)) >> (8 - (v937 & 7) - v957)) & ~(-1 << v957) | (v956 << v957);
        v937 += v957;
        *unsigned int v21 = v937;
        v955 -= v957;
      }
      while (v955);
    }
    if (v937 + 5 > v889) {
      goto LABEL_1576;
    }
    int v958 = 0;
    unint64_t v959 = 5;
    do
    {
      unint64_t v960 = 8 - (v937 & 7);
      if (v959 < v960) {
        unint64_t v960 = v959;
      }
      int v958 = (*(unsigned __int8 *)(v938 + (v937 >> 3)) >> (8 - (v937 & 7) - v960)) & ~(-1 << v960) | (v958 << v960);
      v937 += v960;
      *unsigned int v21 = v937;
      v959 -= v960;
    }
    while (v959);
    unint64_t v961 = (v958 + 1);
    if (v937 + v961 > v889)
    {
LABEL_1576:
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5356;
      goto LABEL_21;
    }
    unsigned int v962 = 0;
    if (v958 != -1)
    {
      do
      {
        unint64_t v963 = 8 - (v937 & 7);
        if (v961 < v963) {
          unint64_t v963 = v961;
        }
        unsigned int v962 = (*(unsigned __int8 *)(v938 + (v937 >> 3)) >> (8 - (v937 & 7) - v963)) & ~(-1 << v963) | (v962 << v963);
        v937 += v963;
        *unsigned int v21 = v937;
        v961 -= v963;
      }
      while (v961);
    }
    {
      operator new();
    }
    unint64_t v881 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                + 16))(geo::codec::Allocator::instance(void)::alloc, 8 * v962, 8);
    char v964 = (void *)*a3;
    *(void *)(*a3 + 1752) = v881;
    if (!v881)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5359;
      goto LABEL_21;
    }
    v964[220] = v962;
    unint64_t v937 = *(void *)(v9 + 24);
    unint64_t v889 = 8 * *(void *)(v9 + 16);
    if (v956)
    {
      int v965 = 0;
      unsigned int v966 = 0;
      do
      {
        if (v937 + v948 > v889)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 5366;
          goto LABEL_21;
        }
        unsigned int v967 = 0;
        if (v948)
        {
          uint64_t v968 = *v1154;
          unint64_t v969 = v948;
          do
          {
            unint64_t v970 = 8 - (v937 & 7);
            if (v969 < v970) {
              unint64_t v970 = v969;
            }
            unsigned int v967 = (*(unsigned __int8 *)(v968 + (v937 >> 3)) >> (8 - (v937 & 7) - v970)) & ~(-1 << v970) | (v967 << v970);
            v937 += v970;
            *unsigned int v21 = v937;
            v969 -= v970;
          }
          while (v969);
        }
        if (v937 + v952 > v889)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 5368;
          goto LABEL_21;
        }
        unsigned int v971 = 0;
        if (v952)
        {
          uint64_t v972 = *v1154;
          unint64_t v973 = v952;
          do
          {
            unint64_t v974 = 8 - (v937 & 7);
            if (v973 < v974) {
              unint64_t v974 = v973;
            }
            unsigned int v971 = (*(unsigned __int8 *)(v972 + (v937 >> 3)) >> (8 - (v937 & 7) - v974)) & ~(-1 << v974) | (v971 << v974);
            v937 += v974;
            *unsigned int v21 = v937;
            v973 -= v974;
          }
          while (v973);
        }
        unint64_t v975 = v967;
        uint64_t v976 = v964[176];
        unint64_t v977 = 0x82FA0BE82FA0BE83 * ((v964[177] - v976) >> 3);
        if (v977 <= v975)
        {
          uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
          int v27 = 5369;
          goto LABEL_21;
        }
        uint64_t v978 = v976 + 344 * v975;
        *(void *)(v978 + 328) = v966;
        *(void *)(v978 + 336) = v971;
        if (v971)
        {
          unsigned int v979 = v971 + v966;
          do
          {
            unint64_t v980 = v937 + 1;
            if (v937 + 1 > v889)
            {
              uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
              int v27 = 5375;
              goto LABEL_21;
            }
            uint64_t v981 = *v1154;
            unsigned int v982 = *(unsigned __int8 *)(*v1154 + (v937 >> 3));
            *unsigned int v21 = v980;
            if ((v982 >> (~(_BYTE)v937 & 7)))
            {
              if (v980 + v948 > v889)
              {
                int v27 = 5378;
                goto LABEL_157;
              }
              unsigned int v983 = 0;
              if (v948)
              {
                unint64_t v984 = v948;
                do
                {
                  unint64_t v985 = 8 - (v980 & 7);
                  if (v984 < v985) {
                    unint64_t v985 = v984;
                  }
                  unsigned int v983 = (*(unsigned __int8 *)(v981 + (v980 >> 3)) >> (8 - (v980 & 7) - v985)) & ~(-1 << v985) | (v983 << v985);
                  v980 += v985;
                  *unsigned int v21 = v980;
                  v984 -= v985;
                }
                while (v984);
              }
              if (v977 <= v983)
              {
                int v27 = 5379;
                goto LABEL_157;
              }
              *(void *)(v881 + 8 * v966) = *(void *)(v976 + 344 * v983 + 40);
            }
            else
            {
              if (v980 + v944 > v889)
              {
                uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
                int v27 = 5382;
                goto LABEL_21;
              }
              if (v944)
              {
                unint64_t v986 = 0;
                unint64_t v987 = v944;
                do
                {
                  unint64_t v988 = 8 - (v980 & 7);
                  if (v987 < v988) {
                    unint64_t v988 = v987;
                  }
                  unint64_t v986 = (*(unsigned __int8 *)(v981 + (v980 >> 3)) >> (8 - (v980 & 7) - v988)) & (unint64_t)~(-1 << v988) | (v986 << v988);
                  v980 += v988;
                  *unsigned int v21 = v980;
                  v987 -= v988;
                }
                while (v987);
                *(void *)(v881 + 8 * v966) = v986;
              }
              else
              {
                *(void *)(v881 + 8 * v966) = 0;
              }
            }
            unint64_t v937 = v980;
            ++v966;
          }
          while (v966 != v979);
          unsigned int v966 = v979;
        }
        ++v965;
      }
      while (v965 != v956);
    }
  }
  unint64_t v989 = v937 + 1;
  if (v937 + 1 > v889)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5403;
    goto LABEL_21;
  }
  uint64_t v990 = *v1154;
  unsigned int v991 = *(unsigned __int8 *)(*v1154 + (v937 >> 3));
  *unsigned int v21 = v989;
  if ((v991 >> (~(_BYTE)v937 & 7)))
  {
    if (v937 + 6 > v889)
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5406;
      goto LABEL_21;
    }
    int v992 = 0;
    unint64_t v993 = 5;
    do
    {
      unint64_t v994 = 8 - (v989 & 7);
      if (v993 < v994) {
        unint64_t v994 = v993;
      }
      int v992 = (*(unsigned __int8 *)(v990 + (v989 >> 3)) >> (8 - (v989 & 7) - v994)) & ~(-1 << v994) | (v992 << v994);
      v989 += v994;
      *unsigned int v21 = v989;
      v993 -= v994;
    }
    while (v993);
    if (v989 + 5 > v889) {
      goto LABEL_1641;
    }
    int v995 = 0;
    unint64_t v996 = (v992 + 1);
    unint64_t v997 = 5;
    do
    {
      unint64_t v998 = 8 - (v989 & 7);
      if (v997 < v998) {
        unint64_t v998 = v997;
      }
      int v995 = (*(unsigned __int8 *)(v990 + (v989 >> 3)) >> (8 - (v989 & 7) - v998)) & ~(-1 << v998) | (v995 << v998);
      v989 += v998;
      *unsigned int v21 = v989;
      v997 -= v998;
    }
    while (v997);
    unint64_t v999 = (v995 + 1);
    if (v989 + v999 > v889)
    {
LABEL_1641:
      int v27 = 5409;
      goto LABEL_157;
    }
    LODWORD(v1000) = 0;
    if (v995 == -1)
    {
      unint64_t v1002 = (void *)*a3;
      *(void *)(*a3 + 1608) = 0;
    }
    else
    {
      do
      {
        unint64_t v1001 = 8 - (v989 & 7);
        if (v999 < v1001) {
          unint64_t v1001 = v999;
        }
        uint64_t v1000 = (*(unsigned __int8 *)(v990 + (v989 >> 3)) >> (8 - (v989 & 7) - v1001)) & ~(-1 << v1001) | (v1000 << v1001);
        v989 += v1001;
        *unsigned int v21 = v989;
        v999 -= v1001;
      }
      while (v999);
      unint64_t v1002 = (void *)*a3;
      *(void *)(*a3 + 1608) = v1000;
      if (v1000)
      {
        {
          operator new();
        }
        unint64_t v881 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                    + 16))(geo::codec::Allocator::instance(void)::alloc, 8 * v1000, 8);
        unint64_t v1002 = (void *)*a3;
        *(void *)(*a3 + 1592) = v881;
        if (!v881)
        {
          int v27 = 5414;
          goto LABEL_157;
        }
      }
    }
    uint64_t v1003 = v1002[176];
    if (v1002[177] != v1003)
    {
      unint64_t v1004 = 0;
      unsigned int v1005 = 0;
      char v1006 = (int *)v1002[199];
      unint64_t v1007 = *(void *)(v9 + 24);
      unint64_t v1008 = 8 * *(void *)(v9 + 16);
      uint64_t v1009 = *a3;
      while (1)
      {
        unint64_t v1022 = v1007 + 1;
        if (v1007 + 1 > v1008)
        {
          int v27 = 5423;
          goto LABEL_157;
        }
        uint64_t v1023 = *v1154;
        unsigned int v1024 = *(unsigned __int8 *)(*v1154 + (v1007 >> 3));
        *unsigned int v21 = v1022;
        if ((v1024 >> (~(_BYTE)v1007 & 7)))
        {
          if (v1022 + v996 > v1008)
          {
            int v27 = 5425;
            goto LABEL_157;
          }
          if (v996)
          {
            int v1025 = 0;
            unint64_t v1026 = v996;
            do
            {
              unint64_t v1027 = 8 - (v1022 & 7);
              if (v1026 < v1027) {
                unint64_t v1027 = v1026;
              }
              int v1025 = (*(unsigned __int8 *)(v1023 + (v1022 >> 3)) >> (8 - (v1022 & 7) - v1027)) & ~(-1 << v1027) | (v1025 << v1027);
              v1022 += v1027;
              *unsigned int v21 = v1022;
              v1026 -= v1027;
            }
            while (v1026);
            unsigned int v1028 = v1025 + v1005;
            if (v1025 + v1005 > v1000)
            {
LABEL_1766:
              int v27 = 5426;
              goto LABEL_157;
            }
            *(_DWORD *)(v1003 + 288) = v1005;
            *(_WORD *)(v1003 + 276) = v1025;
            if (v1025)
            {
              int v1029 = 0;
              while (v1022 + v1152 <= v1008)
              {
                int v1030 = v1152;
                if (v1152)
                {
                  int v1030 = 0;
                  unint64_t v1031 = v1152;
                  do
                  {
                    unint64_t v1032 = 8 - (v1022 & 7);
                    if (v1031 < v1032) {
                      unint64_t v1032 = v1031;
                    }
                    int v1030 = (*(unsigned __int8 *)(v1023 + (v1022 >> 3)) >> (8 - (v1022 & 7) - v1032)) & ~(-1 << v1032) | (v1030 << v1032);
                    v1022 += v1032;
                    *unsigned int v21 = v1022;
                    v1031 -= v1032;
                  }
                  while (v1031);
                }
                *char v1006 = v1030;
                if (v1022 + v1150 > v1008)
                {
                  int v27 = 5432;
                  goto LABEL_157;
                }
                int v1033 = v1150;
                if (v1150)
                {
                  int v1033 = 0;
                  unint64_t v1034 = v1150;
                  do
                  {
                    unint64_t v1035 = 8 - (v1022 & 7);
                    if (v1034 < v1035) {
                      unint64_t v1035 = v1034;
                    }
                    int v1033 = (*(unsigned __int8 *)(v1023 + (v1022 >> 3)) >> (8 - (v1022 & 7) - v1035)) & ~(-1 << v1035) | (v1033 << v1035);
                    v1022 += v1035;
                    *unsigned int v21 = v1022;
                    v1034 -= v1035;
                  }
                  while (v1034);
                }
                v1006[1] = v1033;
                ++v1029;
                v1006 += 2;
                if (v1029 == v1025)
                {
                  unsigned int v1005 = v1028;
                  goto LABEL_1679;
                }
              }
              int v27 = 5431;
LABEL_157:
              uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
              goto LABEL_21;
            }
          }
          else
          {
            if (v1005 > v1000) {
              goto LABEL_1766;
            }
            *(_DWORD *)(v1003 + 288) = v1005;
            *(_WORD *)(v1003 + 276) = 0;
          }
        }
LABEL_1679:
        ++v1004;
        v1003 += 344;
        unint64_t v881 = 0x82FA0BE82FA0BE83 * ((uint64_t)(*(void *)(v1009 + 1416) - *(void *)(v1009 + 1408)) >> 3);
        unint64_t v1007 = v1022;
        if (v1004 >= v881) {
          goto LABEL_1654;
        }
      }
    }
    unsigned int v1005 = 0;
LABEL_1654:
    if (v1005 != v1000)
    {
      int v27 = 5436;
      goto LABEL_157;
    }
    unint64_t v989 = *(void *)(v9 + 24);
    unint64_t v889 = 8 * *(void *)(v9 + 16);
  }
  unint64_t v1010 = v989 + 1;
  if (v989 + 1 > v889)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5448;
    goto LABEL_21;
  }
  uint64_t v1011 = *v1154;
  unsigned int v1012 = *(unsigned __int8 *)(*v1154 + (v989 >> 3));
  *unsigned int v21 = v1010;
  if (((v1012 >> (~(_BYTE)v989 & 7)) & 1) == 0
    || (uint64_t v1013 = *(void *)(*a3 + 1416), v1014 = *(void *)(*a3 + 1408), v1013 == v1014))
  {
    unint64_t v1017 = v989 + 1;
  }
  else
  {
    unint64_t v1015 = (v1013 - v1014) / 344;
    if (v1015 <= 1) {
      unint64_t v1015 = 1;
    }
    uint64_t v1016 = (BOOL *)(v1014 + 322);
    do
    {
      unint64_t v1017 = v1010 + 1;
      if (v1010 + 1 > v889)
      {
        uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
        int v27 = 5452;
        goto LABEL_21;
      }
      unsigned int v1018 = *(unsigned __int8 *)(v1011 + (v1010 >> 3));
      *unsigned int v21 = v1017;
      *uint64_t v1016 = ((v1018 >> (~(_BYTE)v1010 & 7)) & 1) == 0;
      v1016 += 344;
      ++v1010;
      --v1015;
    }
    while (v1015);
  }
  unsigned int v1019 = *(_DWORD *)(v9 + 64);
  if (v1019 < 0x32)
  {
LABEL_1796:
    unint64_t v1064 = *(void *)(v9 + 48) + (v1017 >> 3);
    if ((v1017 & 7) != 0) {
      ++v1064;
    }
    *(void *)(v9 + 48) = v1064;
    *(unsigned char *)(v9 + 32) = 0;
    uint64_t v17 = 1;
    if (*(unsigned char *)v9) {
      goto LABEL_22;
    }
    goto LABEL_24;
  }
  unint64_t v1020 = v1017 + 1;
  if (v1017 + 1 > v889)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5485;
    goto LABEL_21;
  }
  unsigned int v1021 = *(unsigned __int8 *)(v1011 + (v1017 >> 3));
  *unsigned int v21 = v1020;
  if (((v1021 >> (~(_BYTE)v1017 & 7)) & 1) == 0)
  {
LABEL_1792:
    if (v1019 < 0x40)
    {
      unint64_t v1017 = v1020;
    }
    else
    {
      unint64_t v1017 = v1020 + 1;
      if (v1020 + 1 > 8 * *(void *)(v9 + 16))
      {
        int v27 = 5560;
        goto LABEL_157;
      }
      unsigned int v1065 = *(unsigned __int8 *)(*v1154 + (v1020 >> 3));
      *unsigned int v21 = v1017;
      if ((v1065 >> (~(_BYTE)v1020 & 7)))
      {
        uint64_t v1066 = geo::codec::Allocator::instance((geo::codec::Allocator *)v881);
        uint64_t v1067 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v1066 + 24))(v1066, *(void *)(*a3 + 1392), 4);
        uint64_t v1068 = *a3;
        *(void *)(*a3 + 1536) = v1067;
        if (!v1067)
        {
          int v27 = 5563;
          goto LABEL_157;
        }
        uint64_t v1069 = *(void *)(v1068 + 1392);
        v1163[0] = &unk_1ED517B28;
        v1163[1] = a3;
        v1163[3] = v1163;
        geo::codec::decodeZoomRanks(v1154, v1069, (uint64_t)v1163);
        std::function<void ()(unsigned long,float)>::~function(v1163);
        unint64_t v1017 = *v21;
      }
    }
    goto LABEL_1796;
  }
  if (v1017 + 6 > v889)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5489;
    goto LABEL_21;
  }
  int v1036 = 0;
  unint64_t v1037 = 5;
  do
  {
    unint64_t v1038 = 8 - (v1020 & 7);
    if (v1037 < v1038) {
      unint64_t v1038 = v1037;
    }
    int v1036 = (*(unsigned __int8 *)(v1011 + (v1020 >> 3)) >> (8 - (v1020 & 7) - v1038)) & ~(-1 << v1038) | (v1036 << v1038);
    v1020 += v1038;
    *unsigned int v21 = v1020;
    v1037 -= v1038;
  }
  while (v1037);
  if (v1020 + 5 > v889)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5492;
    goto LABEL_21;
  }
  int v1039 = 0;
  unint64_t v1040 = (v1036 + 1);
  unint64_t v1041 = 5;
  do
  {
    unint64_t v1042 = 8 - (v1020 & 7);
    if (v1041 < v1042) {
      unint64_t v1042 = v1041;
    }
    int v1039 = (*(unsigned __int8 *)(v1011 + (v1020 >> 3)) >> (8 - (v1020 & 7) - v1042)) & ~(-1 << v1042) | (v1039 << v1042);
    v1020 += v1042;
    *unsigned int v21 = v1020;
    v1041 -= v1042;
  }
  while (v1041);
  LODWORD(v1162) = 0;
  if (!BitstreamUnpackBitcount(v1154, &v1162, 6uLL))
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5495;
    goto LABEL_21;
  }
  unsigned int v1158 = 0;
  if ((BitstreamUnpackVar32(v1154, (int *)&v1158) & 1) == 0)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5498;
    goto LABEL_21;
  }
  *(void *)(*a3 + 1784) = v1158;
  unsigned int v1157 = 0;
  uint64_t v1043 = BitstreamUnpackVar32(v1154, (int *)&v1157);
  if ((v1043 & 1) == 0)
  {
    uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
    int v27 = 5502;
    goto LABEL_21;
  }
  *(void *)(*a3 + 1800) = v1157;
  uint64_t v1044 = geo::codec::Allocator::instance((geo::codec::Allocator *)v1043);
  uint64_t v1045 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1044 + 16))(v1044, 8 * *(void *)(*a3 + 1784), 8);
  *(void *)(*a3 + 1776) = v1045;
  uint64_t v1046 = geo::codec::Allocator::instance(v1045);
  unint64_t v881 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1046 + 16))(v1046, 8 * *(void *)(*a3 + 1800), 8);
  int v1047 = (void *)*a3;
  v1047[224] = v881;
  if (v1047[169] == v1047[168])
  {
    unint64_t v1050 = 0;
    unint64_t v1049 = 0;
LABEL_1789:
    if (v1050 != *(void *)(*a3 + 1784))
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5550;
      goto LABEL_21;
    }
    if (v1049 != *(void *)(*a3 + 1800))
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5551;
      goto LABEL_21;
    }
    unsigned int v1019 = *(_DWORD *)(v9 + 64);
    unint64_t v1020 = *(void *)(v9 + 24);
    goto LABEL_1792;
  }
  uint64_t v1048 = 0;
  unint64_t v1049 = 0;
  unint64_t v1050 = 0;
  unint64_t v1151 = (v1039 + 1);
  unint64_t v1153 = v1162;
  while (1)
  {
    unint64_t v1051 = *(void *)(v9 + 24);
    if (v1051 + 1 > 8 * *(void *)(v9 + 16))
    {
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5513;
      goto LABEL_21;
    }
    unsigned int v1052 = *(unsigned __int8 *)(*v1154 + (v1051 >> 3));
    *unsigned int v21 = v1051 + 1;
    if (((v1052 >> (~(_BYTE)v1051 & 7)) & 1) == 0)
    {
      unint64_t v1055 = (void *)*a3;
      goto LABEL_1753;
    }
    int v1156 = 0;
    if (!BitstreamUnpack(v1154, &v1156, v1151)) {
      goto LABEL_1817;
    }
    uint64_t v1053 = *(void *)(*a3 + 1344) + 184 * v1048;
    *(void *)(v1053 + 120) = v1050;
    *(void *)(v1053 + 152) = v1049;
    int v1054 = v1156;
    if (v1156) {
      break;
    }
LABEL_1731:
    int v1156 = 0;
    unint64_t v881 = BitstreamUnpack(v1154, &v1156, v1151);
    if (!v881)
    {
LABEL_1817:
      uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
      int v27 = 5521;
      goto LABEL_21;
    }
    unint64_t v1055 = (void *)*a3;
    uint64_t v1056 = *(void *)(*a3 + 1344) + 184 * v1048;
    *(void *)(v1056 + 136) = v1050;
    *(void *)(v1056 + 168) = v1049;
    int v1057 = v1156;
    if (v1156)
    {
      while (1)
      {
        unint64_t v1058 = *(void *)(v9 + 24);
        if (v1058 + 1 > 8 * *(void *)(v9 + 16)) {
          goto LABEL_1818;
        }
        unsigned int v1059 = *(unsigned __int8 *)(*v1154 + (v1058 >> 3));
        *unsigned int v21 = v1058 + 1;
        if ((v1059 >> (~(_BYTE)v1058 & 7)))
        {
          LODWORD(__p[0]) = 0;
          unint64_t v881 = BitstreamUnpack(v1154, (int *)__p, v1040);
          if (!v881) {
            goto LABEL_1806;
          }
          unint64_t v1055 = (void *)*a3;
          if (v1050 >= *(void *)(*a3 + 1784)) {
            goto LABEL_1819;
          }
          *(void *)(v1055[222] + 8 * v1050++) = LODWORD(__p[0]);
          ++*(void *)(v1055[168] + 184 * v1048 + 144);
          if (!--v1057) {
            break;
          }
        }
        else
        {
          __p[0] = 0;
          unint64_t v881 = BitstreamUnpack64(v1154, (unint64_t *)__p, v1153);
          if (!v881) {
            goto LABEL_1807;
          }
          unint64_t v1055 = (void *)*a3;
          if (v1049 >= *(void *)(*a3 + 1800)) {
            goto LABEL_1820;
          }
          *(void **)(v1055[224] + 8 * v1049++) = __p[0];
          ++*(void *)(v1055[168] + 184 * v1048 + 176);
          if (!--v1057) {
            break;
          }
        }
      }
    }
LABEL_1753:
    if (++v1048 >= 0xD37A6F4DE9BD37A7 * ((uint64_t)(v1055[169] - v1055[168]) >> 3)) {
      goto LABEL_1789;
    }
  }
  while (1)
  {
    unint64_t v1060 = *(void *)(v9 + 24);
    if (v1060 + 1 > 8 * *(void *)(v9 + 16)) {
      break;
    }
    unsigned int v1061 = *(unsigned __int8 *)(*v1154 + (v1060 >> 3));
    *unsigned int v21 = v1060 + 1;
    if ((v1061 >> (~(_BYTE)v1060 & 7)))
    {
      LODWORD(__p[0]) = 0;
      if (!BitstreamUnpack(v1154, (int *)__p, v1040))
      {
LABEL_1806:
        int v27 = 5532;
        goto LABEL_157;
      }
      uint64_t v1062 = *a3;
      if (v1050 >= *(void *)(*a3 + 1784))
      {
LABEL_1819:
        int v27 = 5533;
        goto LABEL_157;
      }
      *(void *)(*(void *)(v1062 + 1776) + 8 * v1050++) = LODWORD(__p[0]);
      ++*(void *)(*(void *)(v1062 + 1344) + 184 * v1048 + 128);
    }
    else
    {
      __p[0] = 0;
      if (!BitstreamUnpack64(v1154, (unint64_t *)__p, v1153))
      {
LABEL_1807:
        int v27 = 5540;
        goto LABEL_157;
      }
      uint64_t v1063 = *a3;
      if (v1049 >= *(void *)(*a3 + 1800))
      {
LABEL_1820:
        int v27 = 5541;
        goto LABEL_157;
      }
      *(void **)(*(void *)(v1063 + 1792) + 8 * v1049++) = __p[0];
      ++*(void *)(*(void *)(v1063 + 1344) + 184 * v1048 + 160);
    }
    if (!--v1054) {
      goto LABEL_1731;
    }
  }
LABEL_1818:
  uint64_t v26 = (FILE *)*MEMORY[0x1E4F143C8];
  int v27 = 5528;
LABEL_21:
  fprintf(v26, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v27);
  uint64_t v17 = 0;
  if (*(unsigned char *)v9)
  {
LABEL_22:
    {
      operator new();
    }
    (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v9 + 40), 0);
  }
LABEL_24:
  {
    operator new();
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, v9, 0);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v1162 = "ChapterTransitNetwork";
  __p[0] = &v1162;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v1155 + 1912, (uint64_t *)&v1162, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)+ 4) = (double)((rep - v11.__d_.__rep_) / 1000) * 0.001;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v17;
}

void sub_188FC9160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, geo::read_write_lock *a20,geo::read_write_lock *a21,uint64_t a22,uint64_t a23,geo::read_write_lock *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,char a31,const char **__p,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,const char *a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  MEMORY[0x18C11F580](v49, 0x10F1C40DA10AB66);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  a38 = "ChapterTransitNetwork";
  uint64_t __p = &a38;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(a28 + 1912, (uint64_t *)&a38, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p)+ 4) = (double)((rep - v48) / 1000) * 0.001;
  if (v47)
  {
    if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readTileReferences(void *a1, uint64_t a2, void *a3)
{
  unint64_t v3 = a1[1];
  if (!v3) {
    return 1;
  }
  uint64_t v6 = 0;
  unsigned int v7 = 0;
  while (*(_WORD *)(*a1 + 16 * v6) != 93)
  {
    uint64_t v6 = ++v7;
    if (v3 <= v7) {
      return 1;
    }
  }
  uint64_t v8 = geo::codec::chapterAt((uint64_t)a1, v7, 93, *a3 + 1912);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = v8;
  uint64_t v11 = *a3;
  std::chrono::steady_clock::time_point v10 = (std::__shared_weak_count *)a3[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  LODWORD(v45) = 0;
  uint64_t VarUint32 = geo::codec::chapterReadVarUint32((void *)v9, (unsigned int *)&v45);
  if ((VarUint32 & 1) == 0)
  {
    int v18 = 4419;
    goto LABEL_15;
  }
  unint64_t v15 = *(void *)(v9 + 48);
  unint64_t v14 = *(void *)(v9 + 56);
  BOOL v16 = v14 >= v15;
  unint64_t v17 = v14 - v15;
  if (!v16)
  {
    int v18 = 4420;
    goto LABEL_15;
  }
  *(unsigned char *)(v9 + 32) = 1;
  uint64_t v25 = *(void *)(v9 + 40);
  *(void *)(v9 + 16) = v17;
  *(void *)(v9 + 24) = 0;
  *(void *)(v9 + 8) = v25 + v15;
  *(void *)(*a3 + 1264) = v45;
  uint64_t v26 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v26 + 16))(v26, 11 * *(void *)(*a3 + 1264), 8);
  *(void *)(*a3 + 1272) = v21;
  if (!v45)
  {
LABEL_41:
    uint64_t v19 = 1;
    if (*(unsigned char *)v9) {
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  uint64_t v27 = 0;
  while (1)
  {
    unint64_t v34 = *(void *)(v9 + 24);
    unint64_t v35 = 8 * *(void *)(v9 + 16);
    if (v34 + 5 > v35)
    {
      int v18 = 4429;
      goto LABEL_15;
    }
    LODWORD(v36) = 0;
    uint64_t v37 = *(void *)(v9 + 8);
    unint64_t v38 = 5;
    do
    {
      unint64_t v39 = 8 - (v34 & 7);
      if (v38 < v39) {
        unint64_t v39 = v38;
      }
      uint64_t v21 = (-1 << v39);
      unint64_t v36 = (*(unsigned __int8 *)(v37 + (v34 >> 3)) >> (8 - (v34 & 7) - v39)) & ~v21 | (v36 << v39);
      v34 += v39;
      *(void *)(v9 + 24) = v34;
      v38 -= v39;
    }
    while (v38);
    if (v34 + v36 > v35)
    {
      int v18 = 4430;
      goto LABEL_15;
    }
    if (v36) {
      break;
    }
    uint64_t v28 = 0;
    int v29 = 0;
LABEL_23:
    char v30 = *(unsigned char *)(a2 + 10);
    unsigned int v31 = *(_WORD *)(a2 + 8) & 0xFFFC | BYTE3(v28) & 3;
    unint64_t v32 = (*(_DWORD *)a2 & 0x7F | ((v36 & 0x3F) << 8)) & 0xFFFFFF0000003FFFLL | ((unint64_t)(v29 & 0x3FFFFFF) << 14) | (v28 << 40);
    uint64_t v33 = *(void *)(*a3 + 1272) + 11 * v27;
    *(void *)uint64_t v33 = v32;
    *(_WORD *)(v33 + 8) = v31;
    *(unsigned char *)(v33 + 10) = v30;
    if (++v27 >= (unint64_t)v45) {
      goto LABEL_41;
    }
  }
  int v29 = 0;
  unint64_t v40 = v36;
  do
  {
    unint64_t v41 = 8 - (v34 & 7);
    if (v40 < v41) {
      unint64_t v41 = v40;
    }
    int v29 = (*(unsigned __int8 *)(v37 + (v34 >> 3)) >> (8 - (v34 & 7) - v41)) & ~(-1 << v41) | (v29 << v41);
    v34 += v41;
    *(void *)(v9 + 24) = v34;
    v40 -= v41;
  }
  while (v40);
  if (v34 + v36 <= v35)
  {
    LODWORD(v28) = 0;
    unint64_t v42 = v36;
    do
    {
      unint64_t v43 = 8 - (v34 & 7);
      if (v42 < v43) {
        unint64_t v43 = v42;
      }
      uint64_t v21 = (*(unsigned __int8 *)(v37 + (v34 >> 3)) >> (8 - (v34 & 7) - v43)) & ~(-1 << v43);
      uint64_t v28 = v21 | (v28 << v43);
      v34 += v43;
      *(void *)(v9 + 24) = v34;
      v42 -= v43;
    }
    while (v42);
    goto LABEL_23;
  }
  int v18 = 4431;
LABEL_15:
  uint64_t v21 = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v18);
  uint64_t v19 = 0;
  if (*(unsigned char *)v9)
  {
LABEL_16:
    uint64_t v22 = geo::codec::Allocator::instance((geo::codec::Allocator *)v21);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v22 + 40))(v22, *(void *)(v9 + 40), 0);
  }
LABEL_17:
  uint64_t v23 = geo::codec::Allocator::instance((geo::codec::Allocator *)v21);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v23 + 40))(v23, v9, 0);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v44 = "ChapterTileReferences";
  int v45 = &v44;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v11 + 1912, (uint64_t *)&v44, (uint64_t)&std::piecewise_construct, (uint64_t **)&v45)+ 4) = (double)((rep - v12.__d_.__rep_) / 1000) * 0.001;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v19;
}

void sub_188FC9AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readRegionMetadata(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    goto LABEL_58;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 168)
  {
    uint64_t v4 = ++v5;
    if (v2 <= v5) {
      goto LABEL_58;
    }
  }
  uint64_t v6 = (geo::codec::Allocator *)geo::codec::chapterAt((uint64_t)a1, v5, 168, *(void *)a2 + 1912);
  if (!v6)
  {
LABEL_58:
    char v41 = 1;
    return v41 & 1;
  }
  unsigned int v7 = v6;
  uint64_t v87 = 0;
  uint64_t v86 = 0;
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v82 = geo::codec::Allocator::instance(v6);
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v87 + 1) & 1) == 0)
  {
    unint64_t v43 = (FILE *)*MEMORY[0x1E4F143C8];
    int v44 = 11873;
LABEL_64:
    uint64_t v28 = fprintf(v43, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v44);
    goto LABEL_65;
  }
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v87) & 1) == 0)
  {
    unint64_t v43 = (FILE *)*MEMORY[0x1E4F143C8];
    int v44 = 11874;
    goto LABEL_64;
  }
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v86 + 1) & 1) == 0)
  {
    unint64_t v43 = (FILE *)*MEMORY[0x1E4F143C8];
    int v44 = 11876;
    goto LABEL_64;
  }
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v86) & 1) == 0)
  {
    unint64_t v43 = (FILE *)*MEMORY[0x1E4F143C8];
    int v44 = 11878;
    goto LABEL_64;
  }
  unsigned int v8 = v86;
  if (!v86) {
    goto LABEL_81;
  }
  uint64_t v9 = (char *)operator new(24 * v86);
  uint64_t v10 = 0;
  uint64_t v83 = v9;
  uint64_t v84 = v9;
  uint64_t v85 = &v9[24 * v8];
  unsigned int v78 = 0;
  while (1)
  {
    if ((geo::codec::chapterReadVarUint32(v7, &v78) & 1) == 0)
    {
      uint64_t v28 = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11884);
      goto LABEL_65;
    }
    *(_OWORD *)uint64_t __p = 0u;
    long long v77 = 0u;
    unint64_t v11 = v78;
    if (v78)
    {
      size_t v12 = 8 * v78;
      unint64_t v13 = (uint64x2_t *)operator new(v12);
      unint64_t v14 = (uint64x2_t *)((char *)v13 + 8 * v11);
      bzero(v13, 8 * v11);
      unint64_t v15 = (uint64x2_t *)((char *)v13 + v12);
    }
    else
    {
      unint64_t v13 = 0;
      unint64_t v15 = 0;
      unint64_t v14 = 0;
    }
    char v17 = v87;
    char v16 = BYTE4(v87);
    unsigned int v88 = 0;
    if (geo::codec::chapterReadVarUint32(v7, &v88)
      && (uint64_t v18 = v88, v19 = *((void *)v7 + 6), v19 + (unint64_t)v88 <= *((void *)v7 + 7))
      && (int v20 = (unsigned __int8 *)(*((void *)v7 + 5) + v19),
          *((void *)v7 + 6) = v19 + v88,
          !mgcl::ints::IntDecompressor<unsigned long long>::decompress((uint64_t *)__p, v20, v18, v16, v17, v11, v13)))
    {
      if (v9 >= v85)
      {
        char v30 = (char *)v83;
        unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (unsigned char *)v83) >> 3);
        unint64_t v32 = v31 + 1;
        if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((v85 - (unsigned char *)v83) >> 3) > v32) {
          unint64_t v32 = 0x5555555555555556 * ((v85 - (unsigned char *)v83) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v85 - (unsigned char *)v83) >> 3) >= 0x555555555555555) {
          unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v34 = (char *)operator new(24 * v33);
        unint64_t v35 = (uint64x2_t **)&v34[24 * v31];
        *unint64_t v35 = v13;
        v35[1] = v15;
        v35[2] = v14;
        int v29 = (char *)(v35 + 3);
        if (v9 == v30)
        {
          uint64_t v83 = &v34[24 * v31];
          uint64_t v84 = (char *)(v35 + 3);
          uint64_t v85 = &v34[24 * v33];
        }
        else
        {
          do
          {
            long long v36 = *(_OWORD *)(v9 - 24);
            v9 -= 24;
            *(_OWORD *)(v35 - 3) = v36;
            v35 -= 3;
            v35[2] = (uint64x2_t *)*((void *)v9 + 2);
            *(void *)uint64_t v9 = 0;
            *((void *)v9 + 1) = 0;
            *((void *)v9 + 2) = 0;
          }
          while (v9 != v30);
          uint64_t v9 = (char *)v83;
          uint64_t v37 = v84;
          uint64_t v83 = v35;
          uint64_t v84 = v29;
          uint64_t v85 = &v34[24 * v33];
          if (v37 != v9)
          {
            unint64_t v38 = v37;
            do
            {
              unint64_t v40 = (void *)*((void *)v38 - 3);
              v38 -= 24;
              unint64_t v39 = v40;
              if (v40)
              {
                *((void *)v37 - 2) = v39;
                operator delete(v39);
              }
              uint64_t v37 = v38;
            }
            while (v38 != v9);
          }
        }
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        *(void *)uint64_t v9 = v13;
        *((void *)v9 + 1) = v15;
        int v29 = v9 + 24;
        *((void *)v9 + 2) = v14;
      }
      int v22 = 0;
      uint64_t v84 = v29;
      char v21 = 1;
      uint64_t v9 = v29;
      uint64_t v23 = (void **)*((void *)&v77 + 1);
      *((void *)&v77 + 1) = 0;
      if (v23)
      {
LABEL_23:
        unint64_t v24 = *v23;
        *uint64_t v23 = 0;
        if (v24)
        {
          uint64_t v25 = (void *)*v24;
          *unint64_t v24 = 0;
          if (v25)
          {
            uint64_t v26 = (void *)v25[13];
            if (v26)
            {
              v25[14] = v26;
              operator delete(v26);
            }
            uint64_t v27 = (void *)v25[10];
            if (v27)
            {
              v25[11] = v27;
              operator delete(v27);
            }
            MEMORY[0x18C11F580](v25, 0x1070C40ADA6D0DELL);
          }
          MEMORY[0x18C11F580](v24, 0x20C4093837F09);
        }
        MEMORY[0x18C11F580](v23, 0x20C4093837F09);
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11887);
      if (v13) {
        operator delete(v13);
      }
      char v21 = 0;
      int v22 = 6;
      uint64_t v23 = (void **)*((void *)&v77 + 1);
      *((void *)&v77 + 1) = 0;
      if (v23) {
        goto LABEL_23;
      }
    }
    uint64_t v28 = (uint64_t)__p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((v21 & 1) == 0) {
      break;
    }
    if (++v10 >= (unint64_t)v86) {
      goto LABEL_81;
    }
  }
  if (v22) {
    goto LABEL_65;
  }
LABEL_81:
  unint64_t v55 = HIDWORD(v86);
  if (HIDWORD(v86))
  {
    uint64_t v56 = (uint64x2_t *)operator new(8 * HIDWORD(v86));
    bzero(v56, 8 * v55);
    unint64_t v57 = &v56->i8[8 * v55];
  }
  else
  {
    unint64_t v55 = 0;
    uint64_t v56 = 0;
    unint64_t v57 = 0;
  }
  if (v55 != (v57 - (__int8 *)v56) >> 3)
  {
    uint64_t v28 = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11895);
    int v74 = 6;
    goto LABEL_107;
  }
  *(_OWORD *)uint64_t __p = 0u;
  long long v77 = 0u;
  if (!geo::codec::decodeIntCompressorArray<unsigned long long>(v7, (uint64_t *)__p, SBYTE4(v87), v87, v55, v56))
  {
    int v75 = 11897;
LABEL_104:
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v75);
    int v74 = 6;
    goto LABEL_106;
  }
  std::vector<GeoCodecsMultiPolygonFeature,geo::StdAllocator<GeoCodecsMultiPolygonFeature,geo::codec::Allocator>>::resize((uint64_t)&v79, HIDWORD(v86));
  uint64_t v58 = v79;
  uint64_t v59 = (v80 - v79) >> 7;
  if (v59 != HIDWORD(v86))
  {
    int v75 = 11900;
    goto LABEL_104;
  }
  if (HIDWORD(v86))
  {
    uint64_t v60 = v86;
    if (v86)
    {
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      uint64_t v65 = v83;
      unint64_t v66 = (char *)v83 + 48;
      uint64_t v67 = (char *)v83 + 24;
      do
      {
        uint64_t v68 = 0;
        uint64_t v69 = v56->i64[v61];
        uint64_t v70 = v58 + (v61 << 7);
        do
        {
          if ((v69 & (1 << v68)) != 0)
          {
            switch(v68)
            {
              case 0:
                uint64_t v71 = v64++;
                unint64_t v72 = v65;
                uint64_t v73 = (void *)(v58 + (v61 << 7));
                goto LABEL_93;
              case 1:
                uint64_t v71 = v63++;
                unint64_t v72 = v67;
                uint64_t v73 = (void *)(v70 + 8);
LABEL_93:
                *uint64_t v73 = *(void *)(*v72 + 8 * v71);
                break;
              case 2:
                uint64_t v71 = v62++;
                unint64_t v72 = v66;
                uint64_t v73 = (void *)(v70 + 16);
                goto LABEL_93;
            }
          }
          ++v68;
        }
        while (v60 != v68);
        ++v61;
      }
      while (v61 != v59);
    }
  }
  int v74 = 0;
LABEL_106:
  uint64_t v28 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)__p);
LABEL_107:
  if (v56) {
    operator delete(v56);
  }
  if (v74 == 6)
  {
LABEL_65:
    char v41 = 0;
    if (!*(unsigned char *)v7) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  uint64_t v28 = (uint64_t)std::vector<GeoCodecsMultiPolygonFeature,geo::StdAllocator<GeoCodecsMultiPolygonFeature,geo::codec::Allocator>>::operator=[abi:ne180100]((uint64_t *)(*(void *)a2 + 3488), (uint64_t)&v79);
  char v41 = 1;
  if (*(unsigned char *)v7)
  {
LABEL_66:
    uint64_t v45 = geo::codec::Allocator::instance((geo::codec::Allocator *)v28);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v45 + 40))(v45, *((void *)v7 + 5), 0);
  }
LABEL_67:
  uint64_t v46 = geo::codec::Allocator::instance((geo::codec::Allocator *)v28);
  (*(void (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v46 + 40))(v46, v7, 0);
  uint64_t v47 = v79;
  if (v79)
  {
    uint64_t v48 = v80;
    uint64_t v49 = v79;
    if (v80 != v79)
    {
      do
        GeoCodecsMultiPolygonFeature::~GeoCodecsMultiPolygonFeature((GeoCodecsMultiPolygonFeature *)(v48 - 128));
      while (v48 != v47);
      uint64_t v49 = v79;
    }
    uint64_t v80 = v47;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v82 + 40))(v82, v49, v81 - v49);
  }
  unint64_t v50 = (char *)v83;
  if (v83)
  {
    unint64_t v51 = v84;
    if (v84 != v83)
    {
      uint64_t v52 = v84;
      do
      {
        unint64_t v54 = (void *)*((void *)v52 - 3);
        v52 -= 24;
        uint64_t v53 = v54;
        if (v54)
        {
          *((void *)v51 - 2) = v53;
          operator delete(v53);
        }
        unint64_t v51 = v52;
      }
      while (v52 != v50);
    }
    operator delete(v50);
  }
  return v41 & 1;
}

void sub_188FCA29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::vector<GeoCodecsMultiPolygonFeature,geo::StdAllocator<GeoCodecsMultiPolygonFeature,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  std::vector<std::vector<unsigned short>>::~vector[abi:ne180100]((void **)va1);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readLineAttributes(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a1[1];
  if (!v5)
  {
LABEL_5:
    unsigned int v8 = 0;
    unint64_t v124 = "ChapterLineWidths2";
    uint64_t v125 = v4;
    uint64_t v9 = (std::__shared_weak_count *)a2[1];
    uint64_t v126 = v9;
    if (!v9) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v6 = 0;
  unsigned int v7 = 0;
  while (*(_WORD *)(*a1 + 16 * v6) != 153)
  {
    uint64_t v6 = ++v7;
    if (v5 <= v7) {
      goto LABEL_5;
    }
  }
  unsigned int v8 = (void *)geo::codec::chapterAt((uint64_t)a1, v7, 153, v4 + 1912);
  uint64_t v4 = *a2;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  unint64_t v124 = "ChapterLineWidths2";
  uint64_t v125 = v4;
  uint64_t v126 = v9;
  if (v9) {
LABEL_6:
  }
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v10.__d_.__rep_;
  if (!v8)
  {
    char v14 = 1;
    goto LABEL_25;
  }
  uint64_t v123 = 0;
  uint64_t v11 = v8[6];
  if ((unint64_t)(v11 + 8) > v8[7])
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 11138;
LABEL_20:
    int v20 = (geo::codec::Allocator *)fprintf(v12, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v13);
    goto LABEL_21;
  }
  double v15 = *(double *)(v8[5] + v11);
  v8[6] = v11 + 8;
  if ((geo::codec::chapterReadVarUint32(v8, (unsigned int *)&v123 + 1) & 1) == 0)
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 11139;
    goto LABEL_20;
  }
  if ((geo::codec::chapterReadVarUint32(v8, (unsigned int *)&v123) & 1) == 0)
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 11140;
    goto LABEL_20;
  }
  long long v121 = 0u;
  long long v122 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  unsigned int v118 = 0;
  if ((geo::codec::chapterReadVarUint32(v8, &v118) & 1) == 0)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11146);
    int v25 = 2;
    goto LABEL_39;
  }
  uint64_t v16 = v118;
  if (v118)
  {
    size_t v17 = 4 * v118;
    uint64_t v18 = (int8x16_t *)operator new(v17);
    uint64_t v19 = &v18->i8[4 * v16];
    uint64_t __p = v18;
    bzero(v18, v17);
  }
  else
  {
    uint64_t __p = 0;
    uint64_t v19 = 0;
  }
  char v27 = v123;
  char v26 = BYTE4(v123);
  LODWORD(v113) = 0;
  if (!geo::codec::chapterReadVarUint32(v8, (unsigned int *)&v113)
    || (uint64_t v28 = v113, v29 = v8[6], v30 = v29 + v113, v30 > v8[7])
    || (unint64_t v31 = (unsigned __int8 *)(v8[5] + v29),
        v8[6] = v30,
        mgcl::ints::IntDecompressor<unsigned int>::decompress((uint64_t *)&v121, v31, v28, v26, v27, (v19 - (__int8 *)__p) >> 2, __p)))
  {
    unint64_t v32 = (FILE *)*MEMORY[0x1E4F143C8];
    int v33 = 11148;
LABEL_35:
    fprintf(v32, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v33);
    int v25 = 2;
LABEL_36:
    unint64_t v34 = __p;
    goto LABEL_37;
  }
  unsigned int v117 = 0;
  if ((geo::codec::chapterReadVarUint32(v8, &v117) & 1) == 0)
  {
    unint64_t v32 = (FILE *)*MEMORY[0x1E4F143C8];
    int v33 = 11151;
    goto LABEL_35;
  }
  uint64_t v45 = v117;
  long long v114 = 0;
  long long v115 = 0;
  long long v113 = 0;
  if (v117)
  {
    size_t v46 = 4 * v117;
    uint64_t v47 = (char *)operator new(v46);
    uint64_t v48 = &v47[4 * v45];
    long long v113 = v47;
    long long v115 = v48;
    bzero(v47, v46);
    long long v114 = v48;
  }
  uint64_t v116 = 0;
  if ((geo::codec::decodeIntCompressorArray<unsigned int>(v8, (uint64_t *)&v121, SBYTE4(v123), v123, (uint64_t)&v113) & 1) == 0)
  {
    uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
    int v60 = 11153;
LABEL_91:
    fprintf(v59, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v60);
    int v25 = 2;
LABEL_92:
    unint64_t v34 = __p;
    goto LABEL_93;
  }
  unsigned int v112 = 0;
  if ((geo::codec::chapterReadVarUint32(v8, &v112) & 1) == 0)
  {
    uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
    int v60 = 11156;
    goto LABEL_91;
  }
  uint64_t v49 = v112;
  uint64_t v109 = 0;
  long long v110 = 0;
  unsigned int v108 = 0;
  if (v112)
  {
    size_t v50 = 4 * v112;
    unsigned int v108 = operator new(v50);
    long long v110 = (char *)v108 + 4 * v49;
    bzero(v108, v50);
    uint64_t v109 = v110;
  }
  uint64_t v111 = 0;
  if ((geo::codec::decodeIntCompressorArray<int>(v8, (uint64_t *)&v119, SBYTE4(v123), v123, (uint64_t)&v108) & 1) == 0)
  {
    uint64_t v61 = (FILE *)*MEMORY[0x1E4F143C8];
    int v62 = 11158;
LABEL_97:
    fprintf(v61, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v62);
    int v25 = 2;
    goto LABEL_98;
  }
  unsigned int v107 = 0;
  if ((geo::codec::chapterReadVarUint32(v8, &v107) & 1) == 0)
  {
    uint64_t v61 = (FILE *)*MEMORY[0x1E4F143C8];
    int v62 = 11161;
    goto LABEL_97;
  }
  uint64_t v51 = v107;
  uint64_t v104 = 0;
  unint64_t v105 = 0;
  unint64_t v103 = 0;
  if (v107)
  {
    size_t v52 = 4 * v107;
    unint64_t v103 = operator new(v52);
    unint64_t v105 = (char *)v103 + 4 * v51;
    bzero(v103, v52);
    uint64_t v104 = v105;
  }
  uint64_t v106 = 0;
  if (geo::codec::decodeIntCompressorArray<int>(v8, (uint64_t *)&v119, SBYTE4(v123), v123, (uint64_t)&v103))
  {
    unsigned int v102 = 0;
    if (geo::codec::chapterReadVarUint32(v8, &v102))
    {
      uint64_t v53 = v102;
      float32x4_t v99 = 0;
      uint64_t v100 = 0;
      unint64_t v98 = 0;
      if (v102)
      {
        size_t v54 = 4 * v102;
        unint64_t v98 = operator new(v54);
        uint64_t v100 = (char *)v98 + 4 * v53;
        bzero(v98, v54);
        float32x4_t v99 = v100;
      }
      uint64_t v101 = 0;
      if (geo::codec::decodeIntCompressorArray<int>(v8, (uint64_t *)&v119, SBYTE4(v123), v123, (uint64_t)&v98))
      {
        unsigned int v97 = 0;
        if (geo::codec::chapterReadVarUint32(v8, &v97))
        {
          uint64_t v55 = v97;
          long long v94 = 0;
          uint64_t v95 = 0;
          long long v93 = 0;
          if (v97)
          {
            size_t v56 = 4 * v97;
            long long v93 = operator new(v56);
            uint64_t v95 = (char *)v93 + 4 * v55;
            bzero(v93, v56);
            long long v94 = v95;
          }
          uint64_t v96 = 0;
          if (geo::codec::decodeIntCompressorArray<int>(v8, (uint64_t *)&v119, SBYTE4(v123), v123, (uint64_t)&v93))
          {
            unint64_t v86 = *(void *)(*a2 + 40);
            if ((uint64_t)(v86 - *(void *)(*a2 + 32)) >= 1)
            {
              uint64_t v57 = 0;
              uint64_t v87 = *(void *)(*(void *)(*a2 + 792) + 32);
              unint64_t v58 = *(void *)(*a2 + 32);
              while (!*(_DWORD *)(v58 + 100))
              {
LABEL_100:
                v58 += 168;
                if (v58 >= v86) {
                  goto LABEL_133;
                }
              }
              uint64_t v63 = 0;
              unint64_t v88 = v58;
              while (1)
              {
                uint64_t v89 = v63;
                uint64_t v90 = v57;
                __int32 v64 = __p->i32[v57];
                uint64_t v65 = v87 + 16 * *(unsigned int *)(v58 + 96);
                long long v92 = 0uLL;
                if ((v64 & 1) == 0)
                {
                  uint64_t v66 = v65 + 16 * v63;
                  uint64_t v68 = *(void *)(v66 + 8);
                  uint64_t v67 = (unint64_t *)(v66 + 8);
                  if (v68)
                  {
                    unint64_t v69 = 0;
                    do
                    {
                      std::vector<GeoCodecsRoadOffsets,geo::StdAllocator<GeoCodecsRoadOffsets,geo::codec::Allocator>>::emplace_back<GeoCodecsRoadOffsets&>(*a2 + 2952, &v92);
                      ++v69;
                    }
                    while (v69 < *v67);
                  }
                  goto LABEL_103;
                }
                ++v116;
                uint64_t v70 = v65 + 16 * v63;
                uint64_t v72 = *(void *)(v70 + 8);
                uint64_t v71 = (void *)(v70 + 8);
                if (v72) {
                  break;
                }
LABEL_103:
                uint64_t v57 = v90 + 1;
                uint64_t v63 = v89 + 1;
                unint64_t v58 = v88;
                if (v89 + 1 >= (unint64_t)*(unsigned int *)(v88 + 100)) {
                  goto LABEL_100;
                }
              }
              uint64_t v73 = 0;
              while (1)
              {
                if ((v64 & 2) != 0)
                {
                  uint64_t v76 = v111++;
                  float v77 = v15 * (double)*((int *)v108 + v76);
                  *(float *)&long long v92 = v77;
                  if ((v64 & 4) == 0)
                  {
LABEL_113:
                    if ((v64 & 8) != 0) {
                      goto LABEL_120;
                    }
                    goto LABEL_114;
                  }
                }
                else if ((v64 & 4) == 0)
                {
                  goto LABEL_113;
                }
                uint64_t v78 = v106++;
                float v79 = v15 * (double)*((int *)v103 + v78);
                *((float *)&v92 + 2) = v79;
                if ((v64 & 8) != 0)
                {
LABEL_120:
                  uint64_t v80 = v101++;
                  float v81 = v15 * (double)*((int *)v98 + v80);
                  *((float *)&v92 + 1) = v81;
                  if ((v64 & 0x10) == 0) {
                    goto LABEL_116;
                  }
LABEL_115:
                  uint64_t v74 = v96++;
                  float v75 = v15 * (double)*((int *)v93 + v74);
                  *((float *)&v92 + 3) = v75;
                  goto LABEL_116;
                }
LABEL_114:
                if ((v64 & 0x10) != 0) {
                  goto LABEL_115;
                }
LABEL_116:
                std::vector<GeoCodecsRoadOffsets,geo::StdAllocator<GeoCodecsRoadOffsets,geo::codec::Allocator>>::emplace_back<GeoCodecsRoadOffsets&>(*a2 + 2952, &v92);
                if ((unint64_t)++v73 >= *v71) {
                  goto LABEL_103;
                }
              }
            }
LABEL_133:
            int v25 = 0;
          }
          else
          {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11173);
            int v25 = 2;
          }
          if (v93)
          {
            long long v94 = v93;
            operator delete(v93);
          }
          goto LABEL_130;
        }
        uint64_t v84 = (FILE *)*MEMORY[0x1E4F143C8];
        int v85 = 11171;
      }
      else
      {
        uint64_t v84 = (FILE *)*MEMORY[0x1E4F143C8];
        int v85 = 11168;
      }
      fprintf(v84, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v85);
      int v25 = 2;
LABEL_130:
      if (v98)
      {
        float32x4_t v99 = v98;
        operator delete(v98);
      }
      goto LABEL_125;
    }
    uint64_t v82 = (FILE *)*MEMORY[0x1E4F143C8];
    int v83 = 11166;
  }
  else
  {
    uint64_t v82 = (FILE *)*MEMORY[0x1E4F143C8];
    int v83 = 11163;
  }
  fprintf(v82, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v83);
  int v25 = 2;
LABEL_125:
  if (v103)
  {
    uint64_t v104 = v103;
    operator delete(v103);
  }
LABEL_98:
  unint64_t v34 = __p;
  if (v108)
  {
    uint64_t v109 = v108;
    operator delete(v108);
    goto LABEL_92;
  }
LABEL_93:
  if (v113)
  {
    long long v114 = v113;
    operator delete(v113);
    goto LABEL_36;
  }
LABEL_37:
  if (v34) {
    operator delete(v34);
  }
LABEL_39:
  unint64_t v35 = (void **)*((void *)&v120 + 1);
  *((void *)&v120 + 1) = 0;
  if (v35)
  {
    long long v36 = *v35;
    *unint64_t v35 = 0;
    if (v36)
    {
      uint64_t v37 = (void *)*v36;
      *long long v36 = 0;
      if (v37)
      {
        unint64_t v38 = (void *)v37[13];
        if (v38)
        {
          v37[14] = v38;
          operator delete(v38);
        }
        unint64_t v39 = (void *)v37[10];
        if (v39)
        {
          v37[11] = v39;
          operator delete(v39);
        }
        MEMORY[0x18C11F580](v37, 0x1070C40ADA6D0DELL);
      }
      MEMORY[0x18C11F580](v36, 0x20C4093837F09);
    }
    MEMORY[0x18C11F580](v35, 0x20C4093837F09);
  }
  if ((void)v119)
  {
    *((void *)&v119 + 1) = v119;
    operator delete((void *)v119);
  }
  unint64_t v40 = (void **)*((void *)&v122 + 1);
  *((void *)&v122 + 1) = 0;
  if (v40)
  {
    char v41 = *v40;
    *unint64_t v40 = 0;
    if (v41)
    {
      unint64_t v42 = (void *)*v41;
      *char v41 = 0;
      if (v42)
      {
        unint64_t v43 = (void *)v42[13];
        if (v43)
        {
          v42[14] = v43;
          operator delete(v43);
        }
        int v44 = (void *)v42[10];
        if (v44)
        {
          v42[11] = v44;
          operator delete(v44);
        }
        MEMORY[0x18C11F580](v42, 0x1070C40ADA6D0DELL);
      }
      MEMORY[0x18C11F580](v41, 0x20C4093837F09);
    }
    MEMORY[0x18C11F580](v40, 0x20C4093837F09);
  }
  int v20 = (geo::codec::Allocator *)v121;
  if ((void)v121)
  {
    *((void *)&v121 + 1) = v121;
    operator delete((void *)v121);
  }
  if (v25 == 2)
  {
LABEL_21:
    char v14 = 0;
    if (!a1) {
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  char v14 = 1;
  if (!a1) {
    goto LABEL_25;
  }
LABEL_22:
  if (*(unsigned char *)v8)
  {
    uint64_t v21 = geo::codec::Allocator::instance(v20);
    int v20 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v21 + 40))(v21, v8[5], 0);
  }
  uint64_t v22 = geo::codec::Allocator::instance(v20);
  (*(void (**)(uint64_t, void *, void))(*(void *)v22 + 40))(v22, v8, 0);
LABEL_25:
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = std::chrono::steady_clock::now().__d_.__rep_;
  *(void *)&long long v119 = "ChapterLineWidths2";
  *(void *)&long long v121 = &v119;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v4 + 1912, (uint64_t *)&v119, (uint64_t)&std::piecewise_construct, (uint64_t **)&v121)+ 4) = (double)((v23 - v10.__d_.__rep_) / 1000) * 0.001;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v14 & 1;
}

void sub_188FCADB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v43 = a30;
    if (!a30)
    {
LABEL_3:
      int v44 = a35;
      if (!a35) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v43 = a30;
    if (!a30) {
      goto LABEL_3;
    }
  }
  operator delete(v43);
  int v44 = a35;
  if (!a35)
  {
LABEL_4:
    uint64_t v45 = a40;
    if (!a40) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v44);
  uint64_t v45 = a40;
  if (!a40)
  {
LABEL_5:
    if (!a17)
    {
LABEL_12:
      mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor(v41 - 224);
      mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v41 - 192);
      geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v41 - 144));
      _Unwind_Resume(a1);
    }
LABEL_11:
    operator delete(a17);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(v45);
  if (!a17) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void sub_188FCAF6C(_Unwind_Exception *a1)
{
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readRunningTracks(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a1[1];
  if (!v5)
  {
LABEL_5:
    uint64_t v8 = 0;
    float v75 = "ChapterLineWidths2";
    uint64_t v76 = v4;
    uint64_t v9 = (std::__shared_weak_count *)a2[1];
    float v77 = v9;
    if (!v9) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v6 = 0;
  unsigned int v7 = 0;
  while (*(_WORD *)(*a1 + 16 * v6) != 157)
  {
    uint64_t v6 = ++v7;
    if (v5 <= v7) {
      goto LABEL_5;
    }
  }
  uint64_t v8 = geo::codec::chapterAt((uint64_t)a1, v7, 157, v4 + 1912);
  uint64_t v4 = *a2;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  float v75 = "ChapterLineWidths2";
  uint64_t v76 = v4;
  float v77 = v9;
  if (v9) {
LABEL_6:
  }
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v10.__d_.__rep_;
  if (!v8)
  {
    char v14 = 1;
    *(_DWORD *)(*a2 + 3736) = 1;
    goto LABEL_24;
  }
  uint64_t v74 = 0;
  if ((geo::codec::chapterReadVarUint32((void *)v8, (unsigned int *)&v74 + 1) & 1) == 0)
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 11242;
    goto LABEL_19;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v8, (unsigned int *)&v74) & 1) == 0)
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 11243;
    goto LABEL_19;
  }
  unsigned int v73 = 0;
  if ((geo::codec::chapterReadVarUint32((void *)v8, &v73) & 1) == 0)
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 11246;
    goto LABEL_19;
  }
  uint64_t v11 = *(void *)(v8 + 48);
  if ((unint64_t)(v11 + 8) > *(void *)(v8 + 56))
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 11249;
LABEL_19:
    uint64_t v15 = fprintf(v12, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v13);
    goto LABEL_20;
  }
  uint64_t v20 = *(void *)(*(void *)(v8 + 40) + v11);
  *(void *)(v8 + 48) = v11 + 8;
  if (*(_DWORD *)(v8 + 64) >= 4u)
  {
    LODWORD(v70) = 0;
    if ((geo::codec::chapterReadVarUint32((void *)v8, (unsigned int *)&v70) & 1) == 0)
    {
      int v13 = 11253;
      goto LABEL_35;
    }
    int v21 = (int)v70;
    if (!v70)
    {
      int v13 = 11254;
      goto LABEL_35;
    }
    int v22 = 2 * v70;
    LODWORD(v70) = 2 * v70;
    if ((~v21 & 3) == 0)
    {
      int v13 = 11260;
LABEL_35:
      uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_19;
    }
    *(_DWORD *)(*a2 + 3736) = v22;
  }
  unsigned int v72 = 0;
  uint64_t v15 = geo::codec::chapterReadVarUint32((void *)v8, &v72);
  if ((v15 & 1) == 0)
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 11266;
    goto LABEL_19;
  }
  if (v72)
  {
    unsigned int v71 = 0;
    if ((geo::codec::chapterReadVarUint32((void *)v8, &v71) & 1) == 0)
    {
      uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
      int v13 = 11272;
      goto LABEL_19;
    }
    std::vector<GeoCodecsRunningTrack,geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>>::vector((geo::codec::Allocator **)&v70, v72);
    memset(v69, 0, sizeof(v69));
    uint64_t v23 = v72;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v65 = 0;
    if (v72)
    {
      size_t v24 = 8 * v72;
      uint64_t v65 = (char *)operator new(v24);
      uint64_t v67 = &v65[8 * v23];
      bzero(v65, v24);
      uint64_t v66 = v67;
    }
    uint64_t v68 = 0;
    if ((geo::codec::decodeIntCompressorArray<unsigned long long>((void *)v8, (uint64_t *)v69, SBYTE4(v74), v74, (uint64_t)&v65) & 1) == 0)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11278);
LABEL_83:
      if (v65)
      {
        uint64_t v66 = v65;
        operator delete(v65);
      }
      mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v69);
      uint64_t v15 = (uint64_t)std::vector<GeoCodecsRunningTrack,geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v70);
LABEL_20:
      char v14 = 0;
      if (!a1) {
        goto LABEL_24;
      }
      goto LABEL_21;
    }
    memset(v64, 0, sizeof(v64));
    size_t v25 = v72;
    uint64_t v61 = 0;
    int v62 = 0;
    int v60 = 0;
    if (v72)
    {
      char v26 = (char *)operator new(v72);
      char v27 = &v26[v25];
      int v60 = v26;
      int v62 = &v26[v25];
      bzero(v26, v25);
      uint64_t v61 = v27;
    }
    uint64_t v63 = 0;
    if (geo::codec::decodeIntCompressorArray<unsigned char>((void *)v8, (uint64_t *)v64, SBYTE4(v74), v74, (uint64_t)&v60))
    {
      if (*(_DWORD *)(v8 + 64) <= 3u)
      {
        v56[1] = 0;
        if ((geo::codec::chapterReadVarUint32((void *)v8, &v56[1]) & 1) == 0)
        {
          uint64_t v29 = (FILE *)*MEMORY[0x1E4F143C8];
          int v30 = 11287;
          goto LABEL_56;
        }
        unint64_t v28 = *(void *)(v8 + 48) + v56[1];
        if (v28 > *(void *)(v8 + 56))
        {
          uint64_t v29 = (FILE *)*MEMORY[0x1E4F143C8];
          int v30 = 11290;
LABEL_56:
          fprintf(v29, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v30);
LABEL_80:
          if (v60)
          {
            uint64_t v61 = v60;
            operator delete(v60);
          }
          mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)v64);
          goto LABEL_83;
        }
        *(void *)(v8 + 48) = v28;
      }
      size_t v31 = v71;
      uint64_t v57 = 0;
      unint64_t v58 = 0;
      *(void *)&v56[1] = 0;
      if (v71)
      {
        unint64_t v32 = (char *)operator new(v71);
        int v33 = &v32[v31];
        *(void *)&v56[1] = v32;
        unint64_t v58 = &v32[v31];
        bzero(v32, v31);
        uint64_t v57 = v33;
      }
      uint64_t v59 = 0;
      if (geo::codec::decodeIntCompressorArray<unsigned char>((void *)v8, (uint64_t *)v64, SBYTE4(v74), v74, (uint64_t)&v56[1]))
      {
        if (v72)
        {
          uint64_t v34 = 0;
          uint64_t v36 = *(void *)(v8 + 48);
          unint64_t v35 = *(void *)(v8 + 56);
          uint64_t v37 = v70;
          unint64_t v38 = (uint64_t *)v65;
          unint64_t v39 = v60;
          uint64_t v40 = 32 * v72;
          char v41 = v73;
          while (1)
          {
            uint64_t v42 = v36 + v34;
            unint64_t v43 = v36 + v34 + 8;
            if (v43 > v35)
            {
              int v54 = 11301;
              goto LABEL_77;
            }
            uint64_t v44 = *(void *)(v8 + 40);
            uint64_t v45 = *(void *)(v42 + v44);
            *(void *)(v8 + 48) = v43;
            if (v42 + 16 > v35)
            {
              int v54 = 11302;
              goto LABEL_77;
            }
            uint64_t v46 = v36 + v34 + v44;
            uint64_t v47 = *(void *)(v46 + 8);
            *(void *)(v8 + 48) = v42 + 16;
            unint64_t v48 = v36 + v34 + 24;
            if (v48 > v35)
            {
              int v54 = 11303;
              goto LABEL_77;
            }
            uint64_t v49 = *(void *)(v46 + 16);
            *(void *)(v8 + 48) = v48;
            unint64_t v50 = v36 + v34 + 32;
            if (v50 > v35) {
              break;
            }
            uint64_t v51 = *(void *)(v44 + v36 + v34 + 24);
            *(void *)(v8 + 48) = v50;
            uint64_t v52 = *v38++;
            *uint64_t v37 = v52;
            LOBYTE(v52) = *v39++;
            *((unsigned char *)v37 + 8) = v52;
            v37[2] = v45;
            v37[3] = v49;
            v37[4] = v47;
            v37[5] = v51;
            *((unsigned char *)v37 + 80) = v41;
            v37[11] = v20;
            v34 += 32;
            v37 += 16;
            if (v40 == v34) {
              goto LABEL_69;
            }
          }
          int v54 = 11304;
LABEL_77:
          uint64_t v53 = (FILE *)*MEMORY[0x1E4F143C8];
        }
        else
        {
LABEL_69:
          v56[0] = 0;
          if (geo::codec::chapterReadVarUint32((void *)v8, v56)) {
            mgcl::polyline::Decoder::Decoder((mgcl::polyline::Decoder *)v55);
          }
          uint64_t v53 = (FILE *)*MEMORY[0x1E4F143C8];
          int v54 = 11315;
        }
      }
      else
      {
        uint64_t v53 = (FILE *)*MEMORY[0x1E4F143C8];
        int v54 = 11294;
      }
      fprintf(v53, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v54);
      if (*(void *)&v56[1])
      {
        uint64_t v57 = *(char **)&v56[1];
        operator delete(*(void **)&v56[1]);
      }
      goto LABEL_80;
    }
    uint64_t v29 = (FILE *)*MEMORY[0x1E4F143C8];
    int v30 = 11283;
    goto LABEL_56;
  }
  if (*(_DWORD *)(v8 + 64) <= 3u)
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 11268;
    goto LABEL_19;
  }
  char v14 = 1;
  if (!a1) {
    goto LABEL_24;
  }
LABEL_21:
  if (*(unsigned char *)v8)
  {
    uint64_t v16 = geo::codec::Allocator::instance((geo::codec::Allocator *)v15);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v16 + 40))(v16, *(void *)(v8 + 40), 0);
  }
  uint64_t v17 = geo::codec::Allocator::instance((geo::codec::Allocator *)v15);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v17 + 40))(v17, v8, 0);
LABEL_24:
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v18 = std::chrono::steady_clock::now().__d_.__rep_;
  *(void *)&v69[0] = "ChapterLineWidths2";
  uint64_t v70 = (uint64_t *)v69;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v4 + 1912, (uint64_t *)v69, (uint64_t)&std::piecewise_construct, &v70)+ 4) = (double)((v18 - v10.__d_.__rep_) / 1000) * 0.001;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v14 & 1;
}

void sub_188FCBE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](&a19);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](&a23);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](&a27);
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a39);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](&a44);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](&a48);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](&a52);
  mgcl::iarray::Decoder::~Decoder((mgcl::iarray::Decoder *)&a59);
  if (a61)
  {
    a62 = (uint64_t)a61;
    operator delete(a61);
  }
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)&a69);
  unsigned int v71 = *(void **)(v69 - 256);
  if (v71)
  {
    *(void *)(v69 - 248) = v71;
    operator delete(v71);
  }
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v69 - 224);
  std::vector<GeoCodecsRunningTrack,geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v69 - 192));
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v69 - 136));
  _Unwind_Resume(a1);
}

void sub_188FCBF90(_Unwind_Exception *a1)
{
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_188FCBFA4(_Unwind_Exception *a1)
{
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_188FCBFB8(_Unwind_Exception *a1)
{
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_188FCBFD0(_Unwind_Exception *a1)
{
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 136));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readLiveFeatures(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 1;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 159)
  {
    uint64_t v4 = ++v5;
    if (v2 <= v5) {
      return 1;
    }
  }
  uint64_t v6 = geo::codec::chapterAt((uint64_t)a1, v5, 159, *a2 + 1912);
  if (!v6) {
    return 1;
  }
  unsigned int v7 = (void *)v6;
  uint64_t v9 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v36 = "ChapterLiveFeatures";
  uint64_t v37 = v9;
  unint64_t v38 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v10.__d_.__rep_;
  LODWORD(v40) = 0;
  int v35 = 0;
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v40) & 1) == 0)
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 11685;
    goto LABEL_17;
  }
  if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v35) & 1) == 0)
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 11686;
    goto LABEL_17;
  }
  unint64_t v11 = v7[6] + 4;
  if (v11 > v7[7])
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 11689;
    goto LABEL_17;
  }
  v7[6] = v11;
  unsigned int v34 = 0;
  if (!geo::codec::chapterReadVarUint32(v7, &v34))
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 11692;
    goto LABEL_17;
  }
  if (!v34) {
    goto LABEL_20;
  }
  unsigned int v24 = 0;
  LODWORD(v25) = 0;
  do
  {
    LODWORD(v32[0]) = 0;
    int v33 = 0;
    if ((geo::codec::chapterReadVarUint32(v7, (unsigned int *)v32) & 1) == 0)
    {
      int v13 = 11700;
      goto LABEL_40;
    }
    if (!geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v33))
    {
      int v13 = 11701;
      goto LABEL_40;
    }
    unint64_t v25 = (v33 + v25);
    ++v24;
  }
  while (v24 < v34);
  if (!v25) {
    goto LABEL_20;
  }
  *(_DWORD *)(*a2 + 608) = v25;
  int v33 = 0;
  uint64_t VarUint32 = geo::codec::chapterReadVarUint32(v7, (unsigned int *)&v33);
  if ((VarUint32 & 1) == 0)
  {
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    int v13 = 11713;
LABEL_17:
    uint64_t v16 = fprintf(v12, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v13);
    char v17 = 0;
    if (!*(unsigned char *)v7) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v27 = v7[6];
  unint64_t v28 = v27 + v33;
  if (v28 > v7[7])
  {
    int v13 = 11716;
LABEL_40:
    uint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_17;
  }
  uint64_t v29 = v7[5];
  v7[6] = v28;
  uint64_t v30 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
  size_t v31 = (uint64x2_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v30 + 16))(v30, 8 * v25, 8);
  *(void *)(*a2 + 600) = v31;
  if (!v31)
  {
    int v13 = 11719;
    goto LABEL_40;
  }
  memset(v32, 0, sizeof(v32));
  if (mgcl::ints::IntDecompressor<unsigned long long>::decompress((uint64_t *)v32, (unsigned __int8 *)(v29 + v27), v33, (char)v40, v35, v25, v31))
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11722);
    uint64_t v16 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v32);
    char v17 = 0;
    if (!*(unsigned char *)v7) {
      goto LABEL_19;
    }
LABEL_18:
    uint64_t v18 = geo::codec::Allocator::instance((geo::codec::Allocator *)v16);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v18 + 40))(v18, v7[5], 0);
    goto LABEL_19;
  }
  uint64_t v16 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v32);
  char v17 = 1;
  if (*(unsigned char *)v7) {
    goto LABEL_18;
  }
LABEL_19:
  uint64_t v19 = geo::codec::Allocator::instance((geo::codec::Allocator *)v16);
  uint64_t v20 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void *, void))(*(void *)v19 + 40))(v19, v7, 0);
  if (v17)
  {
LABEL_20:
    uint64_t v14 = 1;
    goto LABEL_24;
  }
  uint64_t v21 = *a2;
  *(_DWORD *)(v21 + 608) = 0;
  if (*(void *)(v21 + 600))
  {
    uint64_t v22 = geo::codec::Allocator::instance(v20);
    (*(void (**)(uint64_t, void, void))(*(void *)v22 + 40))(v22, *(void *)(*a2 + 600), 0);
    uint64_t v14 = 0;
    *(void *)(*a2 + 600) = 0;
  }
  else
  {
    uint64_t v14 = 0;
  }
LABEL_24:
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v40 = "ChapterLiveFeatures";
  *(void *)&v32[0] = &v40;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v9 + 1912, (uint64_t *)&v40, (uint64_t)&std::piecewise_construct, (uint64_t **)v32)+ 4) = (double)((v23 - v10.__d_.__rep_) / 1000) * 0.001;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v14;
}

void sub_188FCC470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)va);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va1);
  _Unwind_Resume(a1);
}

void sub_188FCC48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

void sub_188FCC4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

void sub_188FCC4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

void sub_188FCC4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readStorefronts(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 1;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 138)
  {
    uint64_t v4 = ++v5;
    if (v2 <= v5) {
      return 1;
    }
  }
  uint64_t v6 = geo::codec::chapterAt((uint64_t)a1, v5, 138, *a2 + 1912);
  if (!v6) {
    return 1;
  }
  uint64_t v7 = v6;
  uint64_t v9 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v70 = "ChapterStorefronts";
  uint64_t v71 = v9;
  unsigned int v72 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v10.__d_.__rep_;
  LODWORD(v75[0]) = 0;
  if ((geo::codec::chapterReadVarUint32((void *)v7, (unsigned int *)v75) & 1) == 0)
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 9354;
    goto LABEL_80;
  }
  if (!LODWORD(v75[0]))
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 9355;
    goto LABEL_80;
  }
  unsigned int v69 = 0;
  uint64_t v11 = geo::codec::chapterReadVarUint32((void *)v7, &v69);
  if ((v11 & 1) == 0)
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 9358;
    goto LABEL_80;
  }
  *(_DWORD *)(*a2 + 1864) = v69;
  uint64_t v12 = geo::codec::Allocator::instance((geo::codec::Allocator *)v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v12 + 24))(v12, 8, v69);
  *(void *)(*a2 + 1872) = v13;
  if (!v13)
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 9361;
    goto LABEL_80;
  }
  uint64_t v15 = *(void *)(v7 + 48);
  unint64_t v14 = *(void *)(v7 + 56);
  uint64_t v16 = v15 + 8;
  BOOL v17 = v14 >= v15 + 8;
  unint64_t v18 = v14 - (v15 + 8);
  if (!v17)
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 9364;
    goto LABEL_80;
  }
  uint64_t v23 = *(void *)(v7 + 40);
  unint64_t v24 = *(void *)(v23 + v15);
  *(void *)(v7 + 8) = v23 + v16;
  *(void *)(v7 + 48) = v16;
  *(unsigned char *)(v7 + 32) = 1;
  *(void *)(v7 + 16) = v18;
  *(void *)(v7 + 24) = 0;
  if ((v18 & 0x1FFFFFFFFFFFFFFFLL) == 0)
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 9370;
    goto LABEL_80;
  }
  unint64_t v25 = *(unsigned __int8 *)(v23 + v16);
  *(void *)(v7 + 24) = 5;
  unsigned int v68 = 0;
  if (!BitstreamUnpackBitcount((uint64_t *)(v7 + 8), &v68, 5uLL))
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 9372;
    goto LABEL_80;
  }
  unsigned int v67 = 0;
  char v26 = (uint64_t *)BitstreamUnpackBitcount((uint64_t *)(v7 + 8), &v67, 6uLL);
  if (!v26)
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 9374;
    goto LABEL_80;
  }
  if (!LODWORD(v75[0]))
  {
    if (v69) {
      goto LABEL_79;
    }
LABEL_64:
    uint64_t v54 = *(void *)(v7 + 48) + (*(void *)(v7 + 24) >> 3);
    if ((*(void *)(v7 + 24) & 7) != 0) {
      ++v54;
    }
    *(void *)(v7 + 48) = v54;
    *(unsigned char *)(v7 + 32) = 0;
    uint64_t v21 = 1;
    if (*(unsigned char *)v7) {
      goto LABEL_81;
    }
    goto LABEL_82;
  }
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  uint64_t v29 = (v25 >> 3) + 1;
  unint64_t v63 = v67;
  unint64_t v64 = v68;
  char v26 = (uint64_t *)(v7 + 8);
  uint64_t v60 = v29;
  unint64_t v61 = v24;
  int64x2_t v62 = vdupq_n_s64(v24);
  do
  {
    unsigned int v65 = v27;
    unint64_t v30 = *(void *)(v7 + 24);
    if (v30 + v29 > 8 * *(void *)(v7 + 16))
    {
      uint64_t v55 = (FILE *)*MEMORY[0x1E4F143C8];
      int v56 = 9380;
      goto LABEL_73;
    }
    LODWORD(v31) = 0;
    uint64_t v32 = *v26;
    unint64_t v33 = v29;
    do
    {
      unint64_t v34 = 8 - (v30 & 7);
      if (v33 < v34) {
        unint64_t v34 = v33;
      }
      unint64_t v31 = (*(unsigned __int8 *)(v32 + (v30 >> 3)) >> (8 - (v30 & 7) - v34)) & ~(-1 << v34) | (v31 << v34);
      v30 += v34;
      *(void *)(v7 + 24) = v30;
      v33 -= v34;
    }
    while (v33);
    uint64_t v35 = *(void *)(*a2 + 504);
    if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(*a2 + 512) - v35) >> 5) <= v31)
    {
      uint64_t v55 = (FILE *)*MEMORY[0x1E4F143C8];
      int v56 = 9381;
      goto LABEL_73;
    }
    uint64_t v66 = *(void *)(*a2 + 504);
    uint64_t v36 = v35 + 224 * v31;
    int v38 = *(unsigned __int8 *)(v36 + 206);
    uint64_t v37 = (unsigned char *)(v36 + 206);
    if (v38)
    {
      uint64_t v55 = (FILE *)*MEMORY[0x1E4F143C8];
      int v56 = 9383;
LABEL_73:
      char v26 = (uint64_t *)fprintf(v55, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v56);
      uint64_t v21 = 0;
      if (*(unsigned char *)v7) {
        goto LABEL_81;
      }
      goto LABEL_82;
    }
    LODWORD(v74) = 0;
    if (!BitstreamUnpack(v26, (int *)&v74, v64))
    {
      int v20 = 9386;
      goto LABEL_69;
    }
    unsigned int v39 = v74;
    if (v74 > 0xFE)
    {
      int v20 = 9387;
      goto LABEL_69;
    }
    *uint64_t v37 = (_BYTE)v74;
    char v26 = (uint64_t *)(v7 + 8);
    *(_DWORD *)(v66 + 224 * v31 + 188) = v28;
    unsigned int v40 = v39 + v28;
    unsigned int v41 = v69;
    if (v39 + v28 > v69)
    {
      int v20 = 9390;
      goto LABEL_69;
    }
    if (!v39) {
      goto LABEL_46;
    }
    unint64_t v42 = *(void *)(v7 + 24);
    unint64_t v43 = 8 * *(void *)(v7 + 16);
    uint64_t v44 = *a2;
    if (v63)
    {
      while (v42 + v63 <= v43)
      {
        unint64_t v45 = 0;
        uint64_t v46 = *(void *)(v7 + 8);
        unint64_t v47 = v63;
        do
        {
          if (v47 >= 8 - (v42 & 7)) {
            uint64_t v48 = 8 - (v42 & 7);
          }
          else {
            uint64_t v48 = v47;
          }
          unint64_t v45 = (*(unsigned __int8 *)(v46 + (v42 >> 3)) >> (8 - (v42 & 7) - v48)) & (unint64_t)~(-1 << v48) | (v45 << v48);
          v42 += v48;
          *(void *)(v7 + 24) = v42;
          v47 -= v48;
        }
        while (v47);
        *(void *)(*(void *)(v44 + 1872) + 8 * v28++) = v45 + v61;
        if (v28 == v40) {
          goto LABEL_45;
        }
      }
LABEL_68:
      int v20 = 9394;
LABEL_69:
      uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
      goto LABEL_80;
    }
    if (v42 + v63 > v43) {
      goto LABEL_68;
    }
    uint64_t v50 = *(void *)(v44 + 1872);
    if (v39 < 8 || __CFADD__(v28, v39 - 1))
    {
      unsigned int v51 = v28;
    }
    else
    {
      unsigned int v51 = v28 + (v39 & 0xFFFFFFFC);
      unsigned int v52 = v39 & 0xFFFFFFFC;
      do
      {
        uint64_t v53 = (int64x2_t *)(v50 + 8 * v28);
        *uint64_t v53 = v62;
        v53[1] = v62;
        v28 += 4;
        v52 -= 4;
      }
      while (v52);
      if (v39 == (v39 & 0xFFFFFFFC))
      {
LABEL_45:
        unsigned int v28 = v40;
LABEL_46:
        unsigned int v49 = v65;
        uint64_t v29 = v60;
        goto LABEL_55;
      }
    }
    unsigned int v49 = v65;
    uint64_t v29 = v60;
    do
      *(void *)(v50 + 8 * v51++) = v61;
    while (v40 != v51);
    unsigned int v28 = v40;
LABEL_55:
    unsigned int v27 = v49 + 1;
  }
  while (v27 < LODWORD(v75[0]));
  if (v28 == v41) {
    goto LABEL_64;
  }
LABEL_79:
  uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
  int v20 = 9399;
LABEL_80:
  char v26 = (uint64_t *)fprintf(v19, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v20);
  uint64_t v21 = 0;
  if (*(unsigned char *)v7)
  {
LABEL_81:
    uint64_t v57 = geo::codec::Allocator::instance((geo::codec::Allocator *)v26);
    char v26 = (uint64_t *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v57 + 40))(v57, *(void *)(v7 + 40), 0);
  }
LABEL_82:
  uint64_t v58 = geo::codec::Allocator::instance((geo::codec::Allocator *)v26);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v58 + 40))(v58, v7, 0);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v59 = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v74 = "ChapterStorefronts";
  v75[0] = (uint64_t *)&v74;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v9 + 1912, (uint64_t *)&v74, (uint64_t)&std::piecewise_construct, v75)+ 4) = (double)((v59 - v10.__d_.__rep_) / 1000) * 0.001;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v21;
}

void sub_188FCCBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readRoadNetwork(void *a1, void *a2, uint64_t *a3)
{
  unint64_t v3 = a1[1];
  if (!v3) {
    goto LABEL_13;
  }
  uint64_t v7 = 0;
  unsigned int v8 = 0;
  while (*(_WORD *)(*a1 + 16 * v7) != 135)
  {
    uint64_t v7 = ++v8;
    if (v3 <= v8) {
      goto LABEL_13;
    }
  }
  uint64_t v9 = geo::codec::chapterAt((uint64_t)a1, v8, 135, *a3 + 1912);
  if (!v9)
  {
LABEL_13:
    char v21 = 1;
    return v21 & 1;
  }
  uint64_t v10 = v9;
  uint64_t v12 = (void *)*a3;
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  unint64_t v325 = "ChapterRoadNetwork";
  uint64_t v326 = v12;
  uint64_t v327 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  long long v324 = 0uLL;
  uint64_t v323 = 0;
  uint64_t v13 = (void *)*a3;
  unint64_t v14 = (uint64_t *)(*a3 + 1200);
  unsigned int v322 = 0;
  if ((geo::codec::decodePointCharacteristics(a1, 51, v14, v13 + 151, v13 + 154, v13 + 155, (uint64_t)(v13 + 239)) & 1) == 0)
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 6969;
    goto LABEL_17;
  }
  if ((geo::codec::chapterReadVarUint32((void *)v10, (unsigned int *)&v323 + 1) & 1) == 0)
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 6971;
    goto LABEL_17;
  }
  unint64_t v16 = *(void *)(v10 + 48);
  unint64_t v15 = *(void *)(v10 + 56);
  BOOL v17 = v15 >= v16;
  unint64_t v18 = v15 - v16;
  if (!v17)
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 6973;
LABEL_17:
    uint64_t Connectivity = fprintf(v19, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v20);
    uint64_t v24 = 0;
LABEL_18:
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
LABEL_19:
    char v21 = 0;
    goto LABEL_20;
  }
  *(void *)(v10 + 8) = *(void *)(v10 + 40) + v16;
  uint64_t v44 = (geo::codec::Allocator *)(v10 + 8);
  *(unsigned char *)(v10 + 32) = 1;
  *(void *)(v10 + 16) = v18;
  *(void *)(v10 + 24) = 0;
  uint64_t v45 = *a3;
  uint64_t v46 = *(void *)(*a3 + 32);
  uint64_t v47 = *(void *)(*a3 + 40);
  unint64_t v48 = 0xCF3CF3CF3CF3CF3DLL * ((v47 - v46) >> 3);
  unint64_t v49 = HIDWORD(v323) - v48;
  uint64_t v310 = v10;
  if (HIDWORD(v323) <= v48)
  {
    if (HIDWORD(v323) < v48)
    {
      for (uint64_t i = v46 + 168 * HIDWORD(v323); v47 != i; v47 -= 168)
      {
        unsigned int v51 = *(std::__shared_weak_count **)(v47 - 136);
        if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v51->__on_zero_shared)(v51, v49);
          std::__shared_weak_count::__release_weak(v51);
        }
        unsigned int v52 = *(std::__shared_weak_count **)(v47 - 160);
        if (v52) {
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      *(void *)(v45 + 40) = i;
      uint64_t v10 = v310;
    }
  }
  else
  {
    std::vector<GeoCodecsRoadFeature,geo::StdAllocator<GeoCodecsRoadFeature,geo::codec::Allocator>>::__append((unint64_t *)(*a3 + 32), v49);
  }
  _ZNSt3__115allocate_sharedB8ne180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v314);
  long long v53 = *(_OWORD *)v314;
  uint64_t v54 = v314[0];
  **(void **)v314[0] = 0x100000005;
  *(_WORD *)((char *)v54 + 33) = 257;
  v314[0] = 0;
  v314[1] = 0;
  uint64_t v55 = (std::__shared_weak_count *)*((void *)&v324 + 1);
  long long v324 = v53;
  if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  int v56 = (std::__shared_weak_count *)v314[1];
  if (v314[1] && !atomic_fetch_add((atomic_ullong *volatile)v314[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  uint64_t v57 = *a3 + 1112;
  *(_OWORD *)unint64_t v314 = v324;
  if (*((void *)&v324 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v324 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v58 = FeatureStyleAttributesSet::insert(v57, (uint64_t *)v314);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v59 = (std::__shared_weak_count *)v314[1];
  if (v314[1] && !atomic_fetch_add((atomic_ullong *volatile)v314[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
  }
  unint64_t v60 = *(void *)(v10 + 24);
  if (v60 + 5 > 8 * *(void *)(v10 + 16))
  {
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 6982;
    goto LABEL_17;
  }
  int v61 = 0;
  uint64_t v62 = *(void *)v44;
  unint64_t v63 = 5;
  do
  {
    unint64_t v64 = 8 - (v60 & 7);
    if (v63 < v64) {
      unint64_t v64 = v63;
    }
    int v61 = (*(unsigned __int8 *)(v62 + (v60 >> 3)) >> (8 - (v60 & 7) - v64)) & ~(-1 << v64) | (v61 << v64);
    v60 += v64;
    *(void *)(v10 + 24) = v60;
    v63 -= v64;
  }
  while (v63);
  uint64_t v307 = a1;
  unsigned int v308 = v44;
  int v309 = a3;
  if (HIDWORD(v323))
  {
    unsigned int v65 = 0;
    int v66 = 0;
    unint64_t v67 = 0;
    unint64_t v68 = (v61 + 1);
    while (1)
    {
      unint64_t v69 = *(void *)(v10 + 24);
      if (v69 + v68 > 8 * *(void *)(v10 + 16)) {
        break;
      }
      int v70 = 0;
      if (v68)
      {
        uint64_t v71 = *(void *)v308;
        unint64_t v72 = v68;
        do
        {
          unint64_t v73 = 8 - (v69 & 7);
          if (v72 < v73) {
            unint64_t v73 = v72;
          }
          int v70 = (*(unsigned __int8 *)(v71 + (v69 >> 3)) >> (8 - (v69 & 7) - v73)) & ~(-1 << v73) | (v70 << v73);
          v69 += v73;
          *(void *)(v10 + 24) = v69;
          v72 -= v73;
        }
        while (v72);
      }
      uint64_t v74 = *v309;
      uint64_t v75 = *(void *)(*v309 + 32) + 168 * v67;
      *(unsigned char *)(v75 + 154) = 1;
      uint64_t v76 = v309[1];
      if (v76) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v76 + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v58 = *(uint64_t **)(v75 + 8);
      *(void *)uint64_t v75 = v74;
      *(void *)(v75 + 8) = v76;
      if (v58) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v58);
      }
      long long v77 = v324;
      if (*((void *)&v324 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v324 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v78 = *(std::__shared_weak_count **)(v75 + 32);
      *(_OWORD *)(v75 + 24) = v77;
      if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
      *(_DWORD *)(v75 + 96) = v66;
      *(_DWORD *)(v75 + 100) = v70;
      v66 += v70;
      v65 += v70;
      ++v67;
      uint64_t v10 = v310;
      if (v67 >= HIDWORD(v323)) {
        goto LABEL_78;
      }
    }
    uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
    int v20 = 6986;
    goto LABEL_17;
  }
  unsigned int v65 = 0;
LABEL_78:
  uint64_t v79 = geo::codec::Allocator::instance((geo::codec::Allocator *)v58);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v79 + 24))(v79, v65, 8);
  if (!v24)
  {
    int v83 = (FILE *)*MEMORY[0x1E4F143C8];
    int v84 = 7001;
    goto LABEL_85;
  }
  if ((geo::codec::decodeSectionEncoding(v308, (geo::codec::Allocator **)(*v309 + 792), 0, a2, v24) & 1) == 0)
  {
    int v83 = (FILE *)*MEMORY[0x1E4F143C8];
    int v84 = 7002;
    goto LABEL_85;
  }
  unint64_t v80 = *(void *)(v10 + 24);
  unint64_t v81 = v80 + 1;
  unint64_t v82 = 8 * *(void *)(v10 + 16);
  if (v80 + 1 > v82)
  {
    int v83 = (FILE *)*MEMORY[0x1E4F143C8];
    int v84 = 7004;
LABEL_85:
    uint64_t Connectivity = fprintf(v83, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v84);
    goto LABEL_18;
  }
  int v85 = *(unsigned __int8 *)(*(void *)(v10 + 8) + (v80 >> 3));
  *(void *)(v10 + 24) = v81;
  LOBYTE(v86) = 1;
  int v87 = (1 << (~(_BYTE)v80 & 7)) & v85;
  if (!v87)
  {
    BOOL v98 = 0;
    uint64_t v27 = 0;
    unint64_t v99 = v80 + 2;
    if (v81 + 1 <= v82) {
      goto LABEL_118;
    }
LABEL_97:
    uint64_t v96 = (FILE *)*MEMORY[0x1E4F143C8];
    int v97 = 7050;
    goto LABEL_169;
  }
  if (!BitstreamUnpack((uint64_t *)v308, (int *)&v323, 3uLL))
  {
    int v83 = (FILE *)*MEMORY[0x1E4F143C8];
    int v84 = 7007;
    goto LABEL_85;
  }
  LODWORD(v323) = v323 + 1;
  unint64_t v88 = v323;
  if (!BitstreamUnpack((uint64_t *)v308, (int *)&v322, v323))
  {
    int v83 = (FILE *)*MEMORY[0x1E4F143C8];
    int v84 = 7010;
    goto LABEL_85;
  }
  uint64_t v89 = ++v322;
  LODWORD(v314[0]) = 0;
  BOOL v90 = BitstreamUnpack((uint64_t *)v308, (int *)v314, 4uLL);
  if (!v90)
  {
    uint64_t Connectivity = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 7014);
    uint64_t v27 = 0;
LABEL_170:
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    goto LABEL_19;
  }
  int v91 = (int)v314[0];
  uint64_t v92 = geo::codec::Allocator::instance((geo::codec::Allocator *)v90);
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v92 + 16))(v92, 4 * v89, 8);
  if (v89)
  {
    uint64_t v93 = 0;
    uint64_t v94 = 4 * v89;
    while (1)
    {
      LODWORD(__p) = 0;
      if (!BitstreamUnpack((uint64_t *)v308, (int *)&__p, (v91 + 1))) {
        break;
      }
      *(_DWORD *)(v27 + v93) = __p;
      v93 += 4;
      if (v94 == v93) {
        goto LABEL_94;
      }
    }
    uint64_t v104 = (FILE *)*MEMORY[0x1E4F143C8];
    int v105 = 7020;
    goto LABEL_105;
  }
LABEL_94:
  uint64_t v10 = v310;
  unint64_t v95 = *(void *)(v310 + 24);
  unint64_t v81 = v95 + 1;
  unint64_t v82 = 8 * *(void *)(v310 + 16);
  if (v95 + 1 > v82)
  {
    uint64_t v96 = (FILE *)*MEMORY[0x1E4F143C8];
    int v97 = 7024;
    goto LABEL_169;
  }
  uint64_t v100 = *(void *)(v310 + 8);
  int v101 = *(unsigned __int8 *)(v100 + (v95 >> 3));
  *(void *)(v310 + 24) = v81;
  LOBYTE(v86) = 1;
  int v102 = (1 << (~(_BYTE)v95 & 7)) & v101;
  if (v102)
  {
    unint64_t v103 = v95 + 2;
    if (v103 > v82)
    {
      uint64_t v104 = (FILE *)*MEMORY[0x1E4F143C8];
      int v105 = 7026;
LABEL_105:
      uint64_t Connectivity = fprintf(v104, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v105);
      uint64_t v10 = v310;
      goto LABEL_170;
    }
    unsigned int v106 = *(unsigned __int8 *)(v100 + (v81 >> 3));
    *(void *)(v310 + 24) = v103;
    int v86 = (v106 >> (~(_BYTE)v81 & 7)) & 1;
    unint64_t v81 = v103;
  }
  if (HIDWORD(v323))
  {
    uint64_t v107 = 0;
    unint64_t v108 = 0;
    uint64_t v10 = v310;
    do
    {
      LODWORD(__p) = 0;
      if (!BitstreamUnpack((uint64_t *)v308, (int *)&__p, v88))
      {
        uint64_t v96 = (FILE *)*MEMORY[0x1E4F143C8];
        int v97 = 7031;
        goto LABEL_169;
      }
      char v110 = (char)__p;
      LOBYTE(v111) = v86;
      if (!v102)
      {
        LOBYTE(v111) = v86;
        if (*(_DWORD *)(v27 + 4 * __p))
        {
          unint64_t v112 = *(void *)(v310 + 24);
          if (v112 + 1 > 8 * *(void *)(v310 + 16))
          {
            uint64_t v96 = (FILE *)*MEMORY[0x1E4F143C8];
            int v97 = 7037;
            goto LABEL_169;
          }
          unsigned int v113 = *(unsigned __int8 *)(*(void *)(v310 + 8) + (v112 >> 3));
          *(void *)(v310 + 24) = v112 + 1;
          int v111 = (v113 >> (~(_BYTE)v112 & 7)) & 1;
        }
      }
      uint64_t v109 = (unsigned char *)(*(void *)(*v309 + 32) + v107);
      v109[158] = v110;
      v109[161] = v110;
      v109[159] = v111;
      v109[162] = v111;
      ++v108;
      v107 += 168;
    }
    while (v108 < HIDWORD(v323));
    unint64_t v81 = *(void *)(v310 + 24);
    unint64_t v82 = 8 * *(void *)(v310 + 16);
  }
  uint64_t v10 = v310;
  BOOL v98 = v102 != 0;
  unint64_t v99 = v81 + 1;
  if (v81 + 1 > v82) {
    goto LABEL_97;
  }
LABEL_118:
  unsigned int v114 = *(unsigned __int8 *)(*(void *)(v10 + 8) + (v81 >> 3));
  *(void *)(v10 + 24) = v99;
  if ((v114 >> (~(_BYTE)v81 & 7)))
  {
    LODWORD(v314[0]) = 0;
    if (!BitstreamUnpack((uint64_t *)v308, (int *)v314, 5uLL))
    {
      uint64_t v96 = (FILE *)*MEMORY[0x1E4F143C8];
      int v97 = 7053;
      goto LABEL_169;
    }
    if (HIDWORD(v323))
    {
      unint64_t v115 = 0;
      unint64_t v116 = (LODWORD(v314[0]) + 1);
      uint64_t v117 = 148;
      while (1)
      {
        LODWORD(__p) = 0;
        if (!BitstreamUnpack((uint64_t *)v308, (int *)&__p, v116)) {
          break;
        }
        *(_WORD *)(*(void *)(*v309 + 32) + v117) = (_WORD)__p;
        ++v115;
        v117 += 168;
        if (v115 >= HIDWORD(v323)) {
          goto LABEL_124;
        }
      }
      uint64_t v96 = (FILE *)*MEMORY[0x1E4F143C8];
      int v97 = 7058;
      goto LABEL_169;
    }
LABEL_124:
    unint64_t v99 = *(void *)(v10 + 24);
    unint64_t v82 = 8 * *(void *)(v10 + 16);
  }
  unint64_t v118 = v99 + 1;
  if (v99 + 1 > v82)
  {
    uint64_t v96 = (FILE *)*MEMORY[0x1E4F143C8];
    int v97 = 7065;
    goto LABEL_169;
  }
  BOOL v305 = v98;
  unsigned int v119 = *(unsigned __int8 *)(*(void *)(v10 + 8) + (v99 >> 3));
  *(void *)(v10 + 24) = v118;
  unsigned int v120 = HIDWORD(v323);
  if (((v119 >> (~(_BYTE)v99 & 7)) & 1) != 0 && HIDWORD(v323))
  {
    unint64_t v121 = 0;
    uint64_t v122 = 153;
    do
    {
      LODWORD(v314[0]) = 0;
      if (!BitstreamUnpack((uint64_t *)v308, (int *)v314, 2uLL))
      {
        uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
        int v126 = 7069;
        goto LABEL_149;
      }
      if (LODWORD(v314[0]) >= 4) {
        char v123 = -1;
      }
      else {
        char v123 = 0x20106u >> (8 * LOBYTE(v314[0]));
      }
      *(unsigned char *)(*(void *)(*v309 + 32) + v122) = v123;
      ++v121;
      unsigned int v120 = HIDWORD(v323);
      v122 += 168;
    }
    while (v121 < HIDWORD(v323));
    unint64_t v118 = *(void *)(v310 + 24);
    unint64_t v82 = 8 * *(void *)(v310 + 16);
  }
  unint64_t v124 = v118 + 1;
  if (v118 + 1 > v82)
  {
    uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
    int v126 = 7093;
    goto LABEL_149;
  }
  unsigned int v127 = *(unsigned __int8 *)(*(void *)(v310 + 8) + (v118 >> 3));
  *(void *)(v310 + 24) = v124;
  if (((v127 >> (~(_BYTE)v118 & 7)) & 1) != 0 && v120)
  {
    uint64_t v128 = 0;
    unint64_t v129 = 0;
    uint64_t v10 = v310;
    while (1)
    {
      unint64_t v130 = *(void *)(v310 + 24);
      if (v130 + 1 > 8 * *(void *)(v310 + 16)) {
        break;
      }
      unsigned int v131 = *(unsigned __int8 *)(*(void *)(v310 + 8) + (v130 >> 3));
      *(void *)(v310 + 24) = v130 + 1;
      geo::codec::accumulateStyleAttributeValue(*v309 + 1112, (uint64_t *)(*(void *)(*v309 + 32) + v128 + 24), *(void *)(*v309 + 32) + v128, 24, (v131 >> (~(_BYTE)v130 & 7)) & 1);
      ++v129;
      unsigned int v120 = HIDWORD(v323);
      v128 += 168;
      if (v129 >= HIDWORD(v323))
      {
        unint64_t v124 = *(void *)(v310 + 24);
        unint64_t v82 = 8 * *(void *)(v310 + 16);
        goto LABEL_145;
      }
    }
    uint64_t v96 = (FILE *)*MEMORY[0x1E4F143C8];
    int v97 = 7097;
LABEL_169:
    uint64_t Connectivity = fprintf(v96, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v97);
    goto LABEL_170;
  }
LABEL_145:
  unint64_t v132 = v124 + 1;
  if (v124 + 1 > v82)
  {
    uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
    int v126 = 7105;
    goto LABEL_149;
  }
  unsigned int v133 = *(unsigned __int8 *)(*(void *)(v310 + 8) + (v124 >> 3));
  *(void *)(v310 + 24) = v132;
  if ((v133 >> (~(_BYTE)v124 & 7)))
  {
    LODWORD(v314[0]) = 0;
    if (!BitstreamUnpack((uint64_t *)v308, (int *)v314, 2uLL))
    {
      uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
      int v126 = 7108;
      goto LABEL_149;
    }
    unsigned int v120 = HIDWORD(v323);
    if (HIDWORD(v323))
    {
      unint64_t v134 = 0;
      unint64_t v135 = (LODWORD(v314[0]) + 1);
      do
      {
        unint64_t v136 = *(void *)(v310 + 24);
        if (v136 + 1 > 8 * *(void *)(v310 + 16))
        {
          uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
          int v126 = 7113;
          goto LABEL_149;
        }
        unsigned int v137 = *(unsigned __int8 *)(*(void *)(v310 + 8) + (v136 >> 3));
        *(void *)(v310 + 24) = v136 + 1;
        if ((v137 >> (~(_BYTE)v136 & 7)))
        {
          LODWORD(__p) = 0;
          if (!BitstreamUnpack((uint64_t *)v308, (int *)&__p, v135))
          {
            uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
            int v126 = 7116;
            goto LABEL_149;
          }
          uint64_t v138 = (__p + 1);
          if (__p != -1)
          {
            uint64_t v139 = *(void *)(*v309 + 32) + 168 * v134;
            do
            {
              v313[0] = 0;
              if (!BitstreamUnpack((uint64_t *)v308, v313, v135))
              {
                uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
                int v126 = 7123;
                goto LABEL_149;
              }
              if (!v313[0]) {
                geo::codec::accumulateStyleAttributeValue(*v309 + 1112, (uint64_t *)(v139 + 24), v139, 12, 0);
              }
              --v138;
            }
            while (v138);
          }
          unsigned int v120 = HIDWORD(v323);
        }
        ++v134;
      }
      while (v134 < v120);
    }
    unint64_t v132 = *(void *)(v310 + 24);
    unint64_t v82 = 8 * *(void *)(v310 + 16);
  }
  unint64_t v140 = v132 + 1;
  if (v132 + 1 > v82)
  {
    uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
    int v126 = 7137;
    goto LABEL_149;
  }
  unsigned int v141 = *(unsigned __int8 *)(*(void *)(v310 + 8) + (v132 >> 3));
  *(void *)(v310 + 24) = v140;
  if ((v141 >> (~(_BYTE)v132 & 7)))
  {
    LODWORD(__p) = 0;
    if (!BitstreamUnpack((uint64_t *)v308, (int *)&__p, 2uLL))
    {
      uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
      int v126 = 7140;
      goto LABEL_149;
    }
    int v142 = (int)__p;
    v313[0] = 0;
    if (!BitstreamUnpack((uint64_t *)v308, v313, 5uLL))
    {
      uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
      int v126 = 7144;
      goto LABEL_149;
    }
    unsigned int v120 = HIDWORD(v323);
    if (HIDWORD(v323))
    {
      unint64_t v143 = 0;
      unint64_t v301 = (v142 + 1);
      unint64_t v303 = (v313[0] + 1);
      do
      {
        unint64_t v144 = *(void *)(v310 + 24);
        if (v144 + 1 > 8 * *(void *)(v310 + 16))
        {
          uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
          int v126 = 7149;
          goto LABEL_149;
        }
        unsigned int v145 = *(unsigned __int8 *)(*(void *)(v310 + 8) + (v144 >> 3));
        *(void *)(v310 + 24) = v144 + 1;
        if ((v145 >> (~(_BYTE)v144 & 7)))
        {
          unsigned int v321 = 0;
          if (!BitstreamUnpack((uint64_t *)v308, (int *)&v321, v301))
          {
            uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
            int v126 = 7152;
            goto LABEL_149;
          }
          v314[0] = 0;
          uint64_t v146 = v321;
          if ((geo::codec::_makeSpaceForLabels((geo::codec::Allocator *)v321, v314, v309) & 1) == 0)
          {
            uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
            int v126 = 7155;
            goto LABEL_149;
          }
          if (v146)
          {
            uint64_t v147 = *(void *)(*v309 + 856);
            uint64_t v148 = *(void *)(*v309 + 864);
            unint64_t v149 = (unint64_t)v314[0];
            unsigned int v320 = 0;
            if (!BitstreamUnpack((uint64_t *)v308, (int *)&v320, v303)) {
              goto LABEL_224;
            }
            unint64_t v150 = v148 - v147;
            uint64_t v151 = v320;
            if (v150 <= v320)
            {
LABEL_225:
              int v126 = 7163;
              goto LABEL_228;
            }
            uint64_t v152 = *v309;
            if (v149 >= *(void *)(*v309 + 1056))
            {
LABEL_227:
              int v126 = 7164;
              goto LABEL_228;
            }
            uint64_t v153 = *(void *)(v152 + 1048) + 24 * v149;
            *(void *)uint64_t v153 = v147 + v320;
            *(_DWORD *)(v153 + 16) = 0;
            char v154 = geo::codec::langLocaleForOffset(v151, *(const void **)(v152 + 888), *(void *)(v152 + 896));
            uint64_t v155 = *v309;
            uint64_t v156 = (void *)(*(void *)(*v309 + 1048) + 24 * v149);
            v156[1] = v154;
            uint64_t v157 = *(void *)(v155 + 32) + 168 * v143;
            *(unsigned char *)(v157 + 73) = 1;
            *(_DWORD *)(v157 + 56) = v149;
            *(void *)(v157 + 16) = *v156;
            if (v146 != 1)
            {
              uint64_t v158 = v146 - 1;
              uint64_t v159 = 24 * v149;
              uint64_t v160 = (char *)(v149 + 1);
              while (1)
              {
                unsigned int v320 = 0;
                if (!BitstreamUnpack((uint64_t *)v308, (int *)&v320, v303)) {
                  break;
                }
                uint64_t v161 = v320;
                if (v150 <= v320) {
                  goto LABEL_225;
                }
                uint64_t v162 = *v309;
                if ((unint64_t)v160 >= *(void *)(*v309 + 1056)) {
                  goto LABEL_227;
                }
                uint64_t v163 = *(void *)(v162 + 1048) + v159;
                *(void *)(v163 + 24) = v147 + v320;
                *(_DWORD *)(v163 + 40) = 0;
                *(void *)(*(void *)(*v309 + 1048) + v159 + 32) = geo::codec::langLocaleForOffset(v161, *(const void **)(v162 + 888), *(void *)(v162 + 896));
                v159 += 24;
                ++v160;
                if (!--v158) {
                  goto LABEL_181;
                }
              }
LABEL_224:
              int v126 = 7162;
LABEL_228:
              uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_149:
              uint64_t Connectivity = fprintf(v125, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v126);
              uint64_t v25 = 0;
              uint64_t v26 = 0;
              goto LABEL_150;
            }
          }
LABEL_181:
          unsigned int v120 = HIDWORD(v323);
        }
        ++v143;
      }
      while (v143 < v120);
    }
    unint64_t v140 = *(void *)(v310 + 24);
    unint64_t v82 = 8 * *(void *)(v310 + 16);
  }
  unint64_t v164 = v140 + 1;
  if (v140 + 1 > v82)
  {
    uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
    int v126 = 7185;
    goto LABEL_149;
  }
  unsigned int v165 = *(unsigned __int8 *)(*(void *)(v310 + 8) + (v140 >> 3));
  *(void *)(v310 + 24) = v164;
  if ((v165 >> (~(_BYTE)v140 & 7)))
  {
    LODWORD(v314[0]) = 0;
    if (!BitstreamUnpack((uint64_t *)v308, (int *)v314, 3uLL))
    {
      uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
      int v126 = 7188;
      goto LABEL_149;
    }
    if (HIDWORD(v323))
    {
      unint64_t v166 = 0;
      unint64_t v167 = (LODWORD(v314[0]) + 1);
      uint64_t v168 = 151;
      while (1)
      {
        LODWORD(__p) = 0;
        if (!BitstreamUnpack((uint64_t *)v308, (int *)&__p, v167)) {
          break;
        }
        *(unsigned char *)(*(void *)(*v309 + 32) + v168) = (_BYTE)__p;
        ++v166;
        unsigned int v120 = HIDWORD(v323);
        v168 += 168;
        if (v166 >= HIDWORD(v323)) {
          goto LABEL_213;
        }
      }
      uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
      int v126 = 7193;
      goto LABEL_149;
    }
    unsigned int v120 = 0;
LABEL_213:
    unint64_t v164 = *(void *)(v310 + 24);
    unint64_t v82 = 8 * *(void *)(v310 + 16);
  }
  if (v164 + 1 > v82)
  {
    uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
    int v126 = 7200;
    goto LABEL_149;
  }
  unsigned int v169 = *(unsigned __int8 *)(*(void *)(v310 + 8) + (v164 >> 3));
  *(void *)(v310 + 24) = v164 + 1;
  if ((v169 >> (~(_BYTE)v164 & 7)))
  {
    LODWORD(v314[0]) = 0;
    if (!BitstreamUnpack((uint64_t *)v308, (int *)v314, 3uLL))
    {
      uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
      int v126 = 7203;
      goto LABEL_149;
    }
    if (HIDWORD(v323))
    {
      unint64_t v170 = 0;
      unint64_t v171 = (LODWORD(v314[0]) + 1);
      uint64_t v172 = 152;
      while (1)
      {
        LODWORD(__p) = 0;
        if (!BitstreamUnpack((uint64_t *)v308, (int *)&__p, v171)) {
          break;
        }
        *(unsigned char *)(*(void *)(*v309 + 32) + v172) = (_BYTE)__p;
        ++v170;
        unsigned int v120 = HIDWORD(v323);
        v172 += 168;
        if (v170 >= HIDWORD(v323)) {
          goto LABEL_231;
        }
      }
      uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
      int v126 = 7208;
      goto LABEL_149;
    }
    unsigned int v120 = 0;
  }
LABEL_231:
  unsigned int v173 = *(_DWORD *)(v310 + 64);
  if (v173 < 0x34) {
    goto LABEL_239;
  }
  unint64_t v174 = *(void *)(v310 + 24);
  if (v174 + 1 > 8 * *(void *)(v310 + 16))
  {
    uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
    int v126 = 7217;
    goto LABEL_149;
  }
  unsigned int v175 = *(unsigned __int8 *)(*(void *)(v310 + 8) + (v174 >> 3));
  *(void *)(v310 + 24) = v174 + 1;
  if ((v175 >> (~(_BYTE)v174 & 7)))
  {
    geo::codec::decodeAttributeSet<GeoCodecsFeature>(1, (uint64_t *)v308, v120, *v309 + 1112, *(void *)(*v309 + 32), 168);
    unsigned int v173 = *(_DWORD *)(v310 + 64);
  }
  if (v173 < 0x35)
  {
LABEL_239:
    uint64_t v26 = 0;
  }
  else
  {
    unint64_t v176 = *(void *)(v310 + 24);
    if (v176 + 1 > 8 * *(void *)(v310 + 16))
    {
      uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
      int v126 = 7225;
      goto LABEL_149;
    }
    unsigned int v197 = *(unsigned __int8 *)(*(void *)(v310 + 8) + (v176 >> 3));
    *(void *)(v310 + 24) = v176 + 1;
    if ((v197 >> (~(_BYTE)v176 & 7)))
    {
      LODWORD(__p) = 0;
      if (!BitstreamUnpack((uint64_t *)v308, (int *)&__p, 5uLL))
      {
        uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
        int v126 = 7228;
        goto LABEL_149;
      }
      int v198 = (int)__p;
      v313[0] = 0;
      if (!BitstreamUnpack((uint64_t *)v308, v313, 5uLL))
      {
        uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
        int v126 = 7232;
        goto LABEL_149;
      }
      int v199 = v313[0];
      unsigned int v321 = 0;
      if (!BitstreamUnpack((uint64_t *)v308, (int *)&v321, 5uLL))
      {
        uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
        int v126 = 7236;
        goto LABEL_149;
      }
      unint64_t v200 = v321 + 1;
      unsigned int v320 = 0;
      if (!BitstreamUnpack((uint64_t *)v308, (int *)&v320, v200))
      {
        uint64_t v125 = (FILE *)*MEMORY[0x1E4F143C8];
        int v126 = 7240;
        goto LABEL_149;
      }
      unsigned int v201 = v320;
      int v319 = 0;
      BOOL v202 = BitstreamUnpack((uint64_t *)v308, &v319, 5uLL);
      if (!v202)
      {
        uint64_t Connectivity = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 7244);
        uint64_t v26 = 0;
        goto LABEL_350;
      }
      int v203 = v319;
      uint64_t v204 = geo::codec::Allocator::instance((geo::codec::Allocator *)v202);
      uint64_t v302 = v201 + 1;
      uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v204 + 16))(v204, 4 * v302, 8);
      if (!v26)
      {
        int v191 = (FILE *)*MEMORY[0x1E4F143C8];
        int v192 = 7248;
        goto LABEL_349;
      }
      if (v302)
      {
        uint64_t v205 = 0;
        do
        {
          LODWORD(v314[0]) = 0;
          if (!BitstreamUnpack((uint64_t *)v308, (int *)v314, (v203 + 1)))
          {
            int v191 = (FILE *)*MEMORY[0x1E4F143C8];
            int v192 = 7251;
            goto LABEL_349;
          }
          *(_DWORD *)(v26 + v205) = v314[0];
          v205 += 4;
        }
        while (4 * v302 != v205);
      }
      unint64_t v206 = HIDWORD(v323);
      if (HIDWORD(v323))
      {
        unint64_t v297 = (v198 + 1);
        unint64_t v298 = 0;
        unint64_t v304 = (v199 + 1);
        uint64_t v299 = *(void *)(*v309 + 856);
        unint64_t v300 = *(void *)(*v309 + 864) - v299;
        do
        {
          unint64_t v241 = *(void *)(v310 + 24);
          if (v241 + 1 > 8 * *(void *)(v310 + 16))
          {
            int v191 = (FILE *)*MEMORY[0x1E4F143C8];
            int v192 = 7260;
            goto LABEL_349;
          }
          unsigned int v242 = *(unsigned __int8 *)(*(void *)(v310 + 8) + (v241 >> 3));
          *(void *)(v310 + 24) = v241 + 1;
          if ((v242 >> (~(_BYTE)v241 & 7)))
          {
            uint64_t v243 = *(void *)(*v309 + 32);
            unsigned int v318 = 0;
            if (!BitstreamUnpack((uint64_t *)v308, (int *)&v318, v297))
            {
              int v191 = (FILE *)*MEMORY[0x1E4F143C8];
              int v192 = 7265;
              goto LABEL_349;
            }
            v314[0] = 0;
            unsigned int v244 = v318;
            if ((geo::codec::_makeSpaceForShields((geo::codec::Allocator *)v318, v314, v309) & 1) == 0)
            {
              int v191 = (FILE *)*MEMORY[0x1E4F143C8];
              int v192 = 7268;
              goto LABEL_349;
            }
            unsigned int v245 = v314[0];
            uint64_t v246 = v243 + 168 * v298;
            *(_DWORD *)(v246 + 60) = v314[0];
            *(unsigned char *)(v246 + 72) = v244;
            if (v244)
            {
              uint64_t v247 = 32 * (void)v245;
              while (1)
              {
                unsigned int v317 = 0;
                if (!BitstreamUnpack((uint64_t *)v308, (int *)&v317, v304))
                {
                  int v192 = 7275;
                  goto LABEL_348;
                }
                if (v300 <= v317)
                {
                  int v192 = 7276;
                  goto LABEL_348;
                }
                uint64_t v248 = v317;
                unsigned int v316 = 0;
                if (!BitstreamUnpack((uint64_t *)v308, (int *)&v316, v200))
                {
                  int v192 = 7279;
                  goto LABEL_348;
                }
                uint64_t v249 = v316;
                if (v316 >= v302) {
                  break;
                }
                uint64_t v250 = *v309;
                uint64_t v251 = *(void *)(*v309 + 1064) + v247;
                *(void *)uint64_t v251 = v299 + v248;
                *(_DWORD *)(v251 + 16) = 0;
                uint64_t v252 = geo::codec::langLocaleForOffset(v248, *(const void **)(v250 + 888), *(void *)(v250 + 896));
                uint64_t v253 = *(void *)(*v309 + 1064) + v247;
                *(void *)(v253 + 8) = v252;
                *(void *)(v253 + 24) = *(unsigned int *)(v26 + 4 * v249);
                v247 += 32;
                if (!--v244) {
                  goto LABEL_352;
                }
              }
              int v192 = 7280;
LABEL_348:
              int v191 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_349:
              uint64_t Connectivity = fprintf(v191, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v192);
LABEL_350:
              uint64_t v25 = 0;
LABEL_150:
              char v21 = 0;
              uint64_t v10 = v310;
              goto LABEL_20;
            }
LABEL_352:
            unint64_t v206 = HIDWORD(v323);
          }
          ++v298;
        }
        while (v298 < v206);
      }
      unsigned int v173 = *(_DWORD *)(v310 + 64);
      if (!v87) {
        goto LABEL_240;
      }
      goto LABEL_285;
    }
    uint64_t v26 = 0;
    if (v87)
    {
LABEL_285:
      if (v173 >= 0x37)
      {
        unint64_t v211 = *(void *)(v310 + 24);
        unint64_t v212 = v211 + 1;
        unint64_t v213 = 8 * *(void *)(v310 + 16);
        if (v211 + 1 > v213)
        {
          int v191 = (FILE *)*MEMORY[0x1E4F143C8];
          int v192 = 7297;
          goto LABEL_349;
        }
        unsigned int v225 = *(unsigned __int8 *)(*(void *)(v310 + 8) + (v211 >> 3));
        *(void *)(v310 + 24) = v212;
        if ((v225 >> (~(_BYTE)v211 & 7)))
        {
          unint64_t v226 = HIDWORD(v323);
          if (HIDWORD(v323))
          {
            uint64_t v227 = 0;
            unint64_t v228 = 0;
            unsigned int v230 = v322;
            unint64_t v229 = v323;
            while (1)
            {
              unint64_t v234 = *(void *)(v310 + 24);
              if (v234 + 1 > 8 * *(void *)(v310 + 16)) {
                break;
              }
              unsigned int v235 = *(unsigned __int8 *)(*(void *)(v310 + 8) + (v234 >> 3));
              *(void *)(v310 + 24) = v234 + 1;
              if ((v235 >> (~(_BYTE)v234 & 7)))
              {
                LODWORD(v314[0]) = 0;
                if (!BitstreamUnpack((uint64_t *)v308, (int *)v314, v229))
                {
                  int v192 = 7304;
                  goto LABEL_348;
                }
                char v236 = (char)v314[0];
                if (LODWORD(v314[0]) >= v230)
                {
                  int v192 = 7305;
                  goto LABEL_348;
                }
                LOBYTE(v232) = v86;
                if (!v305)
                {
                  LOBYTE(v232) = v86;
                  if (*(_DWORD *)(v27 + 4 * LODWORD(v314[0])))
                  {
                    unint64_t v237 = *(void *)(v310 + 24);
                    if (v237 + 1 > 8 * *(void *)(v310 + 16))
                    {
                      int v191 = (FILE *)*MEMORY[0x1E4F143C8];
                      int v192 = 7311;
                      goto LABEL_349;
                    }
                    unsigned int v231 = *(unsigned __int8 *)(*(void *)(v310 + 8) + (v237 >> 3));
                    *(void *)(v310 + 24) = v237 + 1;
                    int v232 = (v231 >> (~(_BYTE)v237 & 7)) & 1;
                  }
                }
                uint64_t v233 = *(void *)(*v309 + 32) + v227;
                *(unsigned char *)(v233 + 161) = v236;
                *(unsigned char *)(v233 + 162) = v232;
                unint64_t v226 = HIDWORD(v323);
              }
              ++v228;
              v227 += 168;
              if (v228 >= v226)
              {
                unint64_t v212 = *(void *)(v310 + 24);
                unint64_t v213 = 8 * *(void *)(v310 + 16);
                goto LABEL_336;
              }
            }
            int v191 = (FILE *)*MEMORY[0x1E4F143C8];
            int v192 = 7301;
            goto LABEL_349;
          }
        }
LABEL_336:
        if (v212 + 1 > v213)
        {
          int v191 = (FILE *)*MEMORY[0x1E4F143C8];
          int v192 = 7323;
          goto LABEL_349;
        }
        unsigned int v240 = *(unsigned __int8 *)(*(void *)(v310 + 8) + (v212 >> 3));
        *(void *)(v310 + 24) = v212 + 1;
        if ((v240 >> (~(_BYTE)v212 & 7)))
        {
          LODWORD(v314[0]) = 0;
          if (!BitstreamUnpack((uint64_t *)v308, (int *)v314, v323))
          {
            int v192 = 7326;
            goto LABEL_348;
          }
          if (LODWORD(v314[0]) >= v322)
          {
            int v192 = 7327;
            goto LABEL_348;
          }
          *(_DWORD *)(v27 + 4 * LODWORD(v314[0])) = -1;
        }
      }
    }
  }
LABEL_240:
  if (!v87) {
    goto LABEL_245;
  }
  uint64_t v177 = HIDWORD(v323);
  if (HIDWORD(v323))
  {
    unint64_t v178 = (unsigned char *)(*(void *)(*v309 + 32) + 161);
    do
    {
      int v179 = *(_DWORD *)(v27 + 4 * *(v178 - 3));
      *(v178 - 4) = v179 != -1;
      *(v178 - 3) = v179;
      int v180 = *(_DWORD *)(v27 + 4 * *v178);
      *(v178 - 1) = v180 != -1;
      *unint64_t v178 = v180;
      v178 += 168;
      --v177;
    }
    while (v177);
  }
  if (*(_DWORD *)(v310 + 64) < 0x3Bu) {
    goto LABEL_245;
  }
  unint64_t v188 = *(void *)(v310 + 24);
  unint64_t v189 = v188 + 1;
  unint64_t v190 = 8 * *(void *)(v310 + 16);
  if (v188 + 1 > v190)
  {
    int v191 = (FILE *)*MEMORY[0x1E4F143C8];
    int v192 = 7346;
    goto LABEL_349;
  }
  uint64_t v194 = *(void *)(v310 + 8);
  unsigned int v195 = *(unsigned __int8 *)(v194 + (v188 >> 3));
  *(void *)(v310 + 24) = v189;
  if (((v195 >> (~(_BYTE)v188 & 7)) & 1) == 0)
  {
LABEL_245:
    uint64_t v306 = 0;
LABEL_246:
    uint64_t v181 = v309;
    uint64_t v10 = v310;
    if ((*(void *)(v310 + 24) & 7) != 0) {
      uint64_t v182 = *(void *)(v310 + 48) + (*(void *)(v310 + 24) >> 3) + 1;
    }
    else {
      uint64_t v182 = *(void *)(v310 + 48) + (*(void *)(v310 + 24) >> 3);
    }
    *(void *)(v310 + 48) = v182;
    *(unsigned char *)(v310 + 32) = 0;
    uint64_t v25 = v306;
    unint64_t v183 = v307;
    if (*(_DWORD *)(v310 + 64) < 0x48u) {
      goto LABEL_407;
    }
    uint64_t v184 = v182 + 1;
    unint64_t v185 = *(void *)(v310 + 56);
    if (v182 + 1 > v185)
    {
      uint64_t v186 = (FILE *)*MEMORY[0x1E4F143C8];
      int v187 = 7394;
      goto LABEL_397;
    }
    int v193 = *(unsigned __int8 *)(*(void *)(v310 + 40) + v182);
    *(void *)(v310 + 48) = v184;
    if (v193)
    {
      if (v182 + 9 <= v185)
      {
        *(void *)(v310 + 48) = v182 + 9;
        if (v182 + 10 <= v185)
        {
          *(void *)(v310 + 48) = v182 + 10;
          unsigned int v321 = 0;
          if (geo::codec::chapterReadVarUint32((void *)v310, &v321))
          {
            unsigned int v320 = 0;
            if (geo::codec::chapterReadVarUint32((void *)v310, &v320))
            {
              unint64_t v214 = *(void *)(v310 + 48) + v320;
              if (v214 <= *(void *)(v310 + 56))
              {
                *(void *)(v310 + 48) = v214;
                unint64_t v239 = *(void *)(*(void *)(*v309 + 792) + 16);
                uint64_t __p = 0;
                v313[0] = 0;
                std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)v314, v239, v313);
                mgcl::iarray::Decoder::Decoder((mgcl::iarray::Decoder *)v313);
              }
              uint64_t v186 = (FILE *)*MEMORY[0x1E4F143C8];
              int v187 = 7411;
            }
            else
            {
              uint64_t v186 = (FILE *)*MEMORY[0x1E4F143C8];
              int v187 = 7408;
            }
          }
          else
          {
            uint64_t v186 = (FILE *)*MEMORY[0x1E4F143C8];
            int v187 = 7403;
          }
        }
        else
        {
          uint64_t v186 = (FILE *)*MEMORY[0x1E4F143C8];
          int v187 = 7400;
        }
      }
      else
      {
        uint64_t v186 = (FILE *)*MEMORY[0x1E4F143C8];
        int v187 = 7397;
      }
      goto LABEL_397;
    }
    uint64_t v254 = v182 + 2;
    if (v184 + 1 > v185)
    {
      uint64_t v186 = (FILE *)*MEMORY[0x1E4F143C8];
      int v187 = 7434;
      goto LABEL_397;
    }
    int v255 = *(unsigned __int8 *)(*(void *)(v310 + 40) + v184);
    *(void *)(v310 + 48) = v254;
    if (v255)
    {
      unsigned int v321 = 0;
      uint64_t v256 = geo::codec::chapterReadVarUint32((void *)v310, &v321);
      if ((v256 & 1) == 0)
      {
        uint64_t v186 = (FILE *)*MEMORY[0x1E4F143C8];
        int v187 = 7437;
        goto LABEL_397;
      }
      uint64_t v257 = *(void *)(v310 + 48);
      unint64_t v258 = v257 + v321;
      if (v258 > *(void *)(v310 + 56))
      {
        uint64_t v186 = (FILE *)*MEMORY[0x1E4F143C8];
        int v187 = 7440;
        goto LABEL_397;
      }
      uint64_t v259 = *(void *)(v310 + 40);
      *(void *)(v310 + 48) = v258;
      v314[0] = 0;
      v314[1] = 0;
      *(void *)&long long v315 = 0;
      *((void *)&v315 + 1) = geo::codec::Allocator::instance((geo::codec::Allocator *)v256);
      std::vector<GeoCodecsVectorTileRawPoint,geo::StdAllocator<GeoCodecsVectorTileRawPoint,geo::codec::Allocator>>::reserve((uint64_t)v314, 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(*v309 + 40) - *(void *)(*v309 + 32)) >> 3));
      uint64_t v260 = *(void *)(*v309 + 32);
      if (*(void *)(*v309 + 40) == v260)
      {
        unint64_t v263 = 0;
      }
      else
      {
        unint64_t v261 = 0;
        uint64_t v262 = 96;
        do
        {
          std::vector<GeoCodecsVectorTileRawPoint,geo::StdAllocator<GeoCodecsVectorTileRawPoint,geo::codec::Allocator>>::push_back[abi:ne180100]((uint64_t)v314, (void *)(v24 + 8 * *(unsigned int *)(v260 + v262)));
          ++v261;
          uint64_t v260 = *(void *)(*v309 + 32);
          unint64_t v263 = 0xCF3CF3CF3CF3CF3DLL * ((*(void *)(*v309 + 40) - v260) >> 3);
          v262 += 168;
        }
        while (v261 < v263);
      }
      *(void *)unint64_t v313 = 0;
      std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&__p, v263, v313);
      int v264 = mgcl::muid::decompress((mgcl::muid *)(v259 + v257), (const char *)v321, (uint64_t)v314[0], (const int *)8, (uint64_t)__p, (unint64_t *)8, (v312 - (unsigned char *)__p) >> 3);
      if (v264)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 7454);
        int v265 = 6;
      }
      else
      {
        uint64_t v267 = *(void *)(*v309 + 32);
        uint64_t v266 = *(void *)(*v309 + 40);
        if (v266 != v267)
        {
          unint64_t v268 = (v266 - v267) / 168;
          unint64_t v269 = (uint64_t *)__p;
          if (v268 <= 1) {
            unint64_t v268 = 1;
          }
          unint64_t v270 = (void *)(v267 + 104);
          do
          {
            uint64_t v271 = *v269++;
            *unint64_t v270 = v271;
            v270 += 21;
            --v268;
          }
          while (v268);
        }
        int v265 = 0;
      }
      std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&__p);
      uint64_t Connectivity = (uint64_t)std::vector<GeoCodecsVectorTileRawPoint,geo::StdAllocator<GeoCodecsVectorTileRawPoint,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)v314);
      if (v264) {
        goto LABEL_405;
      }
    }
    uint64_t v181 = v309;
    uint64_t v10 = v310;
    uint64_t v25 = v306;
    unint64_t v183 = v307;
    if (*(_DWORD *)(v310 + 64) < 0x49u)
    {
LABEL_407:
      uint64_t Connectivity = geo::codec::_readConnectivity(v183, v181);
      char v21 = Connectivity;
      goto LABEL_20;
    }
    v313[0] = 0;
    unsigned int v321 = 0;
    if ((geo::codec::chapterReadVarUint32((void *)v310, (unsigned int *)v313) & 1) == 0)
    {
      int v187 = 7466;
      goto LABEL_396;
    }
    if (!geo::codec::chapterReadVarUint32((void *)v310, &v321))
    {
      int v187 = 7467;
      goto LABEL_396;
    }
    uint64_t v272 = *(void *)(v310 + 48);
    uint64_t v273 = v272 + 1;
    if ((unint64_t)(v272 + 1) > *(void *)(v310 + 56))
    {
      __int16 v274 = (FILE *)*MEMORY[0x1E4F143C8];
      int v275 = 7470;
LABEL_404:
      uint64_t Connectivity = fprintf(v274, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v275);
      int v265 = 6;
LABEL_405:
      if (v265 == 6) {
        goto LABEL_398;
      }
      uint64_t v25 = v306;
      unint64_t v183 = v307;
      uint64_t v181 = v309;
      uint64_t v10 = v310;
      goto LABEL_407;
    }
    int v276 = *(unsigned __int8 *)(*(void *)(v310 + 40) + v272);
    *(void *)(v310 + 48) = v273;
    if (!v276)
    {
LABEL_434:
      uint64_t v25 = v306;
      unint64_t v183 = v307;
      uint64_t v181 = v309;
      uint64_t v10 = v310;
      goto LABEL_407;
    }
    unsigned int v320 = 0;
    if ((geo::codec::chapterReadVarUint32((void *)v310, &v320) & 1) == 0)
    {
      __int16 v274 = (FILE *)*MEMORY[0x1E4F143C8];
      int v275 = 7473;
      goto LABEL_404;
    }
    uint64_t v277 = *(void *)(v310 + 48);
    unint64_t v278 = v277 + v320;
    if (v278 > *(void *)(v310 + 56))
    {
      __int16 v274 = (FILE *)*MEMORY[0x1E4F143C8];
      int v275 = 7476;
      goto LABEL_404;
    }
    uint64_t v279 = *(void *)(v310 + 40);
    *(void *)(v310 + 48) = v278;
    uint64_t v281 = *(void *)(*v309 + 32);
    uint64_t v280 = *(void *)(*v309 + 40);
    unint64_t v282 = 0xCF3CF3CF3CF3CF3DLL * ((v280 - v281) >> 3);
    v314[0] = 0;
    std::vector<unsigned long long>::vector((int64x2_t **)&__p, v282, (unint64_t *)v314);
    *(_OWORD *)unint64_t v314 = 0u;
    long long v315 = 0u;
    int v283 = mgcl::ints::IntDecompressor<unsigned long long>::decompress((uint64_t *)v314, (unsigned __int8 *)(v279 + v277), v320, v313[0], v321, v282, (uint64x2_t *)__p);
    if (v283)
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 7483);
      int v265 = 6;
      goto LABEL_431;
    }
    if (v280 != v281)
    {
      unsigned int v284 = (char *)__p;
      uint64_t v285 = *(void *)(*v309 + 32);
      if (v282 <= 1) {
        unint64_t v286 = 1;
      }
      else {
        unint64_t v286 = 0xCF3CF3CF3CF3CF3DLL * ((v280 - v281) >> 3);
      }
      if (v286 >= 2)
      {
        unint64_t v287 = v286 & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v288 = (char *)__p + 8;
        unint64_t v289 = (unsigned char *)(v285 + 323);
        unint64_t v290 = v286 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          char v291 = *(v288 - 8);
          char v292 = *v288;
          v288 += 16;
          *(v289 - 168) = v291 & 1;
          *unint64_t v289 = v292 & 1;
          v289 += 336;
          v290 -= 2;
        }
        while (v290);
        if (v286 == v287) {
          goto LABEL_430;
        }
      }
      else
      {
        unint64_t v287 = 0;
      }
      unint64_t v293 = v286 - v287;
      unint64_t v294 = (unsigned char *)(v285 + 168 * v287 + 155);
      uint64_t v295 = &v284[8 * v287];
      do
      {
        char v296 = *v295;
        v295 += 8;
        *unint64_t v294 = v296 & 1;
        v294 += 168;
        --v293;
      }
      while (v293);
    }
LABEL_430:
    int v265 = 0;
LABEL_431:
    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v314);
    uint64_t Connectivity = (uint64_t)__p;
    if (__p)
    {
      int v312 = __p;
      operator delete(__p);
    }
    if (v283) {
      goto LABEL_405;
    }
    goto LABEL_434;
  }
  unint64_t v196 = v188 + 2;
  if (v196 > v190)
  {
    int v191 = (FILE *)*MEMORY[0x1E4F143C8];
    int v192 = 7349;
    goto LABEL_349;
  }
  unsigned int v207 = *(unsigned __int8 *)(v194 + (v189 >> 3));
  *(void *)(v310 + 24) = v196;
  if ((v207 >> (~(_BYTE)v189 & 7)))
  {
    LODWORD(v314[0]) = 0;
    if (!BitstreamUnpackVar32((uint64_t *)v308, (int *)v314))
    {
      int v191 = (FILE *)*MEMORY[0x1E4F143C8];
      int v192 = 7352;
      goto LABEL_349;
    }
    if (HIDWORD(v323))
    {
      unint64_t v208 = 0;
      int v209 = (int)v314[0];
      unint64_t v210 = (_DWORD *)(*(void *)(*v309 + 32) + 128);
      do
      {
        *unint64_t v210 = v209;
        v210 += 42;
        ++v208;
      }
      while (v208 < HIDWORD(v323));
    }
    goto LABEL_245;
  }
  LODWORD(v314[0]) = 0;
  if (!BitstreamUnpackBitcount((uint64_t *)v308, v314, 5uLL))
  {
    int v191 = (FILE *)*MEMORY[0x1E4F143C8];
    int v192 = 7362;
    goto LABEL_349;
  }
  LODWORD(__p) = 0;
  if (!BitstreamUnpackBitcount((uint64_t *)v308, &__p, 5uLL))
  {
    int v191 = (FILE *)*MEMORY[0x1E4F143C8];
    int v192 = 7364;
    goto LABEL_349;
  }
  v313[0] = 0;
  unint64_t v215 = LODWORD(v314[0]);
  BOOL v216 = BitstreamUnpack((uint64_t *)v308, v313, LODWORD(v314[0]));
  if (!v216)
  {
    uint64_t Connectivity = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 7367);
    uint64_t v306 = 0;
    goto LABEL_398;
  }
  uint64_t v217 = geo::codec::Allocator::instance((geo::codec::Allocator *)v216);
  unsigned int v218 = v313[0];
  uint64_t v219 = 4 * v313[0];
  uint64_t v306 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v217 + 16))(v217, v219, 8);
  if (v218)
  {
    uint64_t v220 = 0;
    unint64_t v221 = __p;
    do
    {
      if (!BitstreamUnpack((uint64_t *)v308, (int *)(v306 + v220), v221))
      {
        uint64_t v186 = (FILE *)*MEMORY[0x1E4F143C8];
        int v187 = 7371;
        goto LABEL_397;
      }
      v220 += 4;
    }
    while (v219 != v220);
  }
  unint64_t v222 = HIDWORD(v323);
  if (!HIDWORD(v323)) {
    goto LABEL_246;
  }
  uint64_t v223 = 0;
  unint64_t v224 = 0;
  while (1)
  {
    uint64_t v238 = *(void *)(*v309 + 32);
    if (*(unsigned __int8 *)(v238 + v223 + 157) | *(unsigned __int8 *)(v238 + v223 + 160)) {
      break;
    }
LABEL_322:
    ++v224;
    v223 += 168;
    if (v224 >= v222) {
      goto LABEL_246;
    }
  }
  unsigned int v321 = 0;
  if (!BitstreamUnpack((uint64_t *)v308, (int *)&v321, v215))
  {
    int v187 = 7378;
    goto LABEL_396;
  }
  if (v321 <= v218)
  {
    if (v321 < v218) {
      *(_DWORD *)(v238 + v223 + 128) = *(_DWORD *)(v306 + 4 * v321);
    }
    unint64_t v222 = HIDWORD(v323);
    goto LABEL_322;
  }
  int v187 = 7379;
LABEL_396:
  uint64_t v186 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_397:
  uint64_t Connectivity = fprintf(v186, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v187);
LABEL_398:
  char v21 = 0;
  uint64_t v25 = v306;
  uint64_t v10 = v310;
LABEL_20:
  uint64_t v28 = geo::codec::Allocator::instance((geo::codec::Allocator *)Connectivity);
  uint64_t v29 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v28 + 40))(v28, v27, 0);
  uint64_t v30 = geo::codec::Allocator::instance(v29);
  unint64_t v31 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v30 + 40))(v30, v26, 0);
  uint64_t v32 = geo::codec::Allocator::instance(v31);
  unint64_t v33 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v32 + 40))(v32, v25, 0);
  uint64_t v34 = geo::codec::Allocator::instance(v33);
  uint64_t v35 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v34 + 40))(v34, v24, 0);
  if (*(unsigned char *)v10)
  {
    uint64_t v36 = geo::codec::Allocator::instance(v35);
    uint64_t v35 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v36 + 40))(v36, *(void *)(v10 + 40), 0);
  }
  uint64_t v37 = geo::codec::Allocator::instance(v35);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v37 + 40))(v37, v10, 0);
  int v38 = (std::__shared_weak_count *)*((void *)&v324 + 1);
  if (*((void *)&v324 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v324 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  unsigned int v40 = (char *)v325;
  unsigned int v39 = v326;
  v41.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v42 = rep;
  uint64_t __p = v40;
  if (v40)
  {
    v314[0] = (int *)&__p;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>((uint64_t)(v39 + 239), (uint64_t *)&__p, (uint64_t)&std::piecewise_construct, (uint64_t **)v314)+ 4) = (double)((v41.__d_.__rep_ - v42) / 1000) * 0.001;
  }
  unint64_t v43 = v327;
  if (v327 && !atomic_fetch_add(&v327->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  return v21 & 1;
}

void sub_188FCF280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32)
{
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a30);
  if (__p)
  {
    operator delete(__p);
    std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100](v32 - 144);
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v32 - 120));
    _Unwind_Resume(a1);
  }
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100](v32 - 144);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v32 - 120));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readPOIUpdates(void *a1, uint64_t *a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 1;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 166)
  {
    uint64_t v4 = ++v5;
    if (v2 <= v5) {
      return 1;
    }
  }
  uint64_t v6 = (void *)geo::codec::chapterAt((uint64_t)a1, v5, 166, *a2 + 1912);
  if (!v6) {
    return 1;
  }
  uint64_t v7 = v6;
  uint64_t v49 = 0;
  unsigned int v48 = 0;
  if ((geo::codec::chapterReadVarInt64(v6, &v49) & 1) == 0)
  {
    uint64_t v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 12311;
LABEL_67:
    uint64_t v8 = fprintf(v24, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v25);
    uint64_t v22 = 0;
    goto LABEL_68;
  }
  uint64_t v8 = geo::codec::chapterReadVarUint32(v7, &v48);
  if ((v8 & 1) == 0)
  {
    uint64_t v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 12313;
    goto LABEL_67;
  }
  uint64_t v9 = *a2;
  uint64_t v10 = v48;
  uint64_t v11 = *(void **)(*a2 + 3784);
  uint64_t v12 = *(void *)(*a2 + 3776);
  unint64_t v13 = ((uint64_t)v11 - v12) >> 4;
  unint64_t v14 = v48 - v13;
  if (v48 <= v13)
  {
    if (v48 < v13)
    {
      uint64_t v11 = (void *)(v12 + 16 * v48);
      *(void *)(v9 + 3784) = v11;
    }
  }
  else
  {
    uint64_t v15 = *(void *)(v9 + 3792);
    if (v14 <= (v15 - (uint64_t)v11) >> 4)
    {
      uint64_t v19 = &v11[2 * v14];
      uint64_t v26 = 16 * v48 - 16 * v13;
      do
      {
        if (v11)
        {
          *uint64_t v11 = 0;
          v11[1] = 0;
        }
        v11 += 2;
        v26 -= 16;
      }
      while (v26);
      *(void *)(v9 + 3784) = v19;
    }
    else
    {
      unint64_t v16 = (v15 - v12) >> 3;
      if (v16 <= v48) {
        unint64_t v16 = v48;
      }
      if ((unint64_t)(v15 - v12) >= 0x7FFFFFFFFFFFFFF0) {
        uint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v17 = v16;
      }
      uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v9 + 3800) + 16))(*(void *)(v9 + 3800), 16 * v17, 8);
      unint64_t v18 = (void *)(v8 + 16 * v13);
      uint64_t v19 = (void *)(v8 + 16 * v10);
      uint64_t v20 = 16 * v10 - 16 * v13;
      char v21 = v18;
      do
      {
        if (v21)
        {
          *char v21 = 0;
          v21[1] = 0;
        }
        v21 += 2;
        v20 -= 16;
      }
      while (v20);
      uint64_t v27 = *(void *)(v9 + 3784);
      uint64_t v28 = *(void *)(v9 + 3776);
      if (v27 != v28)
      {
        do
        {
          *((_OWORD *)v18 - 1) = *(_OWORD *)(v27 - 16);
          v18 -= 2;
          v27 -= 16;
        }
        while (v27 != v28);
        uint64_t v27 = *(void *)(v9 + 3776);
      }
      *(void *)(v9 + 3776) = v18;
      *(void *)(v9 + 3784) = v19;
      uint64_t v29 = *(void *)(v9 + 3792);
      *(void *)(v9 + 3792) = v8 + 16 * v17;
      if (v27)
      {
        uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v9 + 3800) + 40))(*(void *)(v9 + 3800), v27, v29 - v27);
        uint64_t v19 = *(void **)(v9 + 3784);
      }
    }
    uint64_t v12 = *(void *)(v9 + 3776);
    uint64_t v10 = v48;
    uint64_t v11 = v19;
  }
  if (v10 != ((uint64_t)v11 - v12) >> 4)
  {
    uint64_t v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 12316;
    goto LABEL_67;
  }
  if (v10)
  {
    uint64_t v30 = 0;
    uint64_t v32 = v7[6];
    unint64_t v31 = v7[7];
    while (1)
    {
      uint64_t v33 = v32 + 8;
      if (v32 + 8 > v31) {
        break;
      }
      uint64_t v34 = *(void *)(v7[5] + v32);
      v7[6] = v33;
      *(void *)(*(void *)(v9 + 3776) + v30) = v34;
      v30 += 16;
      uint64_t v32 = v33;
      if (16 * v10 == v30) {
        goto LABEL_42;
      }
    }
    uint64_t v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 12320;
    goto LABEL_67;
  }
LABEL_42:
  uint64_t v35 = *(void *)(*a2 + 504);
  uint64_t v36 = *(void *)(*a2 + 512);
  uint64_t v37 = (v36 - v35) / 224;
  if (*((_DWORD *)v7 + 16) < 2u)
  {
    if (v10)
    {
      uint64_t v38 = v10;
      unsigned int v39 = (void *)(*(void *)(v9 + 3776) + 8);
      do
      {
        *unsigned int v39 = v49;
        v39 += 2;
        --v38;
      }
      while (v38);
    }
    if (v36 != v35)
    {
      unsigned int v40 = (void *)(v35 + 176);
      do
      {
        *unsigned int v40 = v49;
        v40 += 28;
        --v37;
      }
      while (v37);
    }
    goto LABEL_49;
  }
  if (v10)
  {
    unint64_t v41 = 0;
    uint64_t v42 = 8;
    while (1)
    {
      uint64_t v47 = 0;
      if (!geo::codec::chapterReadVarInt64(v7, &v47)) {
        break;
      }
      *(void *)(*(void *)(v9 + 3776) + v42) = v47;
      ++v41;
      v42 += 16;
      if (v41 >= v48) {
        goto LABEL_55;
      }
    }
    uint64_t v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 12337;
    goto LABEL_67;
  }
LABEL_55:
  unsigned int v46 = 0;
  uint64_t v8 = geo::codec::chapterReadVarUint32(v7, &v46);
  if ((v8 & 1) == 0)
  {
    uint64_t v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 12342;
    goto LABEL_67;
  }
  if (v37 != v46)
  {
    uint64_t v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 12343;
    goto LABEL_67;
  }
  if (v36 != v35)
  {
    unint64_t v43 = (void *)(v35 + 176);
    while (1)
    {
      uint64_t v47 = 0;
      uint64_t v8 = geo::codec::chapterReadVarInt64(v7, &v47);
      if (!v8) {
        break;
      }
      *unint64_t v43 = v47;
      v43 += 28;
      if (!--v37) {
        goto LABEL_49;
      }
    }
    uint64_t v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = 12346;
    goto LABEL_67;
  }
LABEL_49:
  uint64_t v22 = 1;
LABEL_68:
  if (*(unsigned char *)v7)
  {
    uint64_t v44 = geo::codec::Allocator::instance((geo::codec::Allocator *)v8);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v44 + 40))(v44, v7[5], 0);
  }
  uint64_t v45 = geo::codec::Allocator::instance((geo::codec::Allocator *)v8);
  (*(void (**)(uint64_t, void *, void))(*(void *)v45 + 40))(v45, v7, 0);
  return v22;
}

uint64_t geo::codec::_readCoastlines(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  unint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    goto LABEL_28;
  }
  uint64_t v5 = 0;
  unsigned int v6 = 0;
  uint64_t v7 = *a2;
  while (*(_WORD *)(*(void *)a1 + 16 * v5) != 38)
  {
    uint64_t v5 = ++v6;
    if (v3 <= v6) {
      goto LABEL_5;
    }
  }
  a1 = geo::codec::chapterAt(a1, v6, 38, *a2 + 1912);
  if (!a1)
  {
    unint64_t v3 = *(void *)(v2 + 8);
    if (!v3) {
      goto LABEL_28;
    }
    uint64_t v7 = *a2;
LABEL_5:
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    while (*(_WORD *)(*(void *)v2 + 16 * v8) != 34)
    {
      uint64_t v8 = ++v9;
      if (v3 <= v9) {
        goto LABEL_28;
      }
    }
    a1 = geo::codec::chapterAt(v2, v9, 34, v7 + 1912);
    if (a1)
    {
      unint64_t v16 = (void *)a1;
      uint64_t v194 = 0;
      unsigned int v195 = 0;
      long long v193 = 0uLL;
      unsigned int v192 = 0;
      unsigned int v191 = 0;
      uint64_t v17 = (std::__shared_weak_count *)a2[1];
      uint64_t v188 = *a2;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if ((geo::codec::chapterReadVarUint32(v16, &v192) & 1) == 0)
      {
        uint64_t LOD = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 4201);
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v20 = 0;
LABEL_59:
        char v42 = 0;
LABEL_60:
        if (v195)
        {
          uint64_t v43 = geo::codec::Allocator::instance((geo::codec::Allocator *)LOD);
          uint64_t v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v43 + 40))(v43, *((void *)v195 + 1), 0);
          uint64_t v45 = geo::codec::Allocator::instance(v44);
          unsigned int v46 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v45 + 40))(v45, *((void *)v195 + 4), 0);
          uint64_t v47 = geo::codec::Allocator::instance(v46);
          uint64_t LOD = (*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v47 + 40))(v47, v195, 0);
        }
        if (v194)
        {
          uint64_t v48 = geo::codec::Allocator::instance((geo::codec::Allocator *)LOD);
          uint64_t v49 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v48 + 40))(v48, *((void *)v194 + 1), 0);
          uint64_t v50 = geo::codec::Allocator::instance(v49);
          unsigned int v51 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v50 + 40))(v50, *((void *)v194 + 4), 0);
          uint64_t v52 = geo::codec::Allocator::instance(v51);
          uint64_t LOD = (*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v52 + 40))(v52, v194, 0);
        }
        if (v29)
        {
          uint64_t v53 = geo::codec::Allocator::instance((geo::codec::Allocator *)LOD);
          uint64_t v54 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v53 + 40))(v53, *((void *)v29 + 1), 0);
          uint64_t v55 = geo::codec::Allocator::instance(v54);
          int v56 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v55 + 40))(v55, *((void *)v29 + 4), 0);
          uint64_t v57 = geo::codec::Allocator::instance(v56);
          uint64_t LOD = (*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v57 + 40))(v57, v29, 0);
        }
        if (v28)
        {
          uint64_t v58 = geo::codec::Allocator::instance((geo::codec::Allocator *)LOD);
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v59 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v58 + 40))(v58, *((void *)v28 + 1), 0);
          uint64_t v60 = geo::codec::Allocator::instance(v59);
          int v61 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v60 + 40))(v60, *((void *)v28 + 4), 0);
          uint64_t v62 = geo::codec::Allocator::instance(v61);
          uint64_t LOD = (*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v62 + 40))(v62, v28, 0);
        }
        if (v20)
        {
          if (*(unsigned char *)v20)
          {
            uint64_t v63 = geo::codec::Allocator::instance((geo::codec::Allocator *)LOD);
            uint64_t LOD = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v63 + 40))(v63, *(void *)(v20 + 40), 0);
          }
          uint64_t v64 = geo::codec::Allocator::instance((geo::codec::Allocator *)LOD);
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v64 + 40))(v64, v20, 0);
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
        v196[0] = (uint64_t)"ChapterCoastlineFeatures";
        *(void *)&long long v190 = v196;
        a1 = (uint64_t)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v188 + 1912, v196, (uint64_t)&std::piecewise_construct, (uint64_t **)&v190);
        *(double *)(a1 + 32) = (double)((rep - v18.__d_.__rep_) / 1000) * 0.001;
        if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        int v66 = (std::__shared_weak_count *)*((void *)&v193 + 1);
        if (*((void *)&v193 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v193 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
        uint64_t v10 = 0;
        if (v42)
        {
          uint64_t v27 = 1;
LABEL_82:
          if (*(unsigned char *)v16)
          {
            uint64_t v67 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
            a1 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v67 + 40))(v67, v16[5], 0);
          }
          uint64_t v68 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
          a1 = (*(uint64_t (**)(uint64_t, void *, void))(*(void *)v68 + 40))(v68, v16, 0);
          goto LABEL_85;
        }
        int v33 = 4024;
LABEL_81:
        a1 = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v33);
        uint64_t v27 = 0;
        if (!v16) {
          goto LABEL_85;
        }
        goto LABEL_82;
      }
      uint64_t v19 = geo::codec::chapterAt(v2, v192, 20, *a2 + 1912);
      uint64_t v20 = v19;
      if (v19)
      {
        if (geo::codec::decodeVertices(v19, &v195, (uint64_t *)&v194, *(_DWORD *)(v19 + 64) > 0x43u))
        {
          uint64_t LOD = geo::codec::chapterReadVarUint32(v16, &v191);
          if (LOD)
          {
            if (!v191)
            {
              uint64_t v28 = 0;
              uint64_t v29 = 0;
              char v42 = 1;
              goto LABEL_60;
            }
            uint64_t v22 = *a2;
            uint64_t v23 = (std::__shared_weak_count *)(*a2 + 64);
            uint64_t v24 = *(void *)(*a2 + 72);
            unint64_t v25 = 0x4EC4EC4EC4EC4EC5 * ((int64_t)(v24 - (unint64_t)v23->__vftable) >> 3);
            unint64_t v26 = v191 - v25;
            if (v191 <= v25)
            {
              if (v191 < v25)
              {
                for (uint64_t i = (uint64_t)v23->__vftable + 104 * v191; v24 != i; v24 -= 104)
                {
                  unint64_t v73 = *(std::__shared_weak_count **)(v24 - 72);
                  if (v73 && !atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *, unint64_t))v73->__on_zero_shared)(v73, v26);
                    std::__shared_weak_count::__release_weak(v73);
                  }
                  uint64_t v23 = *(std::__shared_weak_count **)(v24 - 96);
                  if (v23) {
                    std::__shared_weak_count::__release_weak(v23);
                  }
                }
                *(void *)(v22 + 72) = i;
              }
            }
            else
            {
              std::vector<GeoCodecsMultiSectionFeature,geo::StdAllocator<GeoCodecsMultiSectionFeature,geo::codec::Allocator>>::__append((uint64_t *)v23, v26);
            }
            if (v195)
            {
              uint64_t v74 = geo::codec::Allocator::instance((geo::codec::Allocator *)v23);
              uint64_t v75 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v74 + 24))(v74, 1, 48);
              uint64_t v29 = v75;
              if (v75)
              {
                uint64_t v76 = geo::codec::Allocator::instance(v75);
                long long v77 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v76 + 24))(v76, *((void *)v195 + 2), 12);
                *((void *)v29 + 1) = v77;
                uint64_t v78 = geo::codec::Allocator::instance(v77);
                uint64_t v79 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v78 + 24))(v78, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(*a2 + 72) - *(void *)(*a2 + 64)) >> 3), 16);
                *((void *)v29 + 4) = v79;
                if (*((void *)v29 + 1))
                {
                  if (v79)
                  {
                    uint64_t v28 = 0;
                    unint64_t v80 = v195;
                    goto LABEL_113;
                  }
                  unint64_t v112 = (FILE *)*MEMORY[0x1E4F143C8];
                  int v113 = 4226;
                }
                else
                {
                  unint64_t v112 = (FILE *)*MEMORY[0x1E4F143C8];
                  int v113 = 4225;
                }
              }
              else
              {
                unint64_t v112 = (FILE *)*MEMORY[0x1E4F143C8];
                int v113 = 4222;
              }
LABEL_164:
              uint64_t LOD = fprintf(v112, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v113);
              uint64_t v28 = 0;
              goto LABEL_59;
            }
            uint64_t v81 = geo::codec::Allocator::instance((geo::codec::Allocator *)v23);
            unint64_t v82 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v81 + 24))(v81, 1, 72);
            uint64_t v28 = v82;
            if (v82)
            {
              uint64_t v83 = geo::codec::Allocator::instance(v82);
              int v84 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v83 + 24))(v83, *((void *)v194 + 2), 8);
              *((void *)v28 + 1) = v84;
              uint64_t v85 = geo::codec::Allocator::instance(v84);
              uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v85 + 24))(v85, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(*a2 + 72) - *(void *)(*a2 + 64)) >> 3), 16);
              *((void *)v28 + 4) = v86;
              if (v86)
              {
                uint64_t v29 = 0;
                unint64_t v80 = v194;
LABEL_113:
                unint64_t v186 = *((void *)v80 + 2);
                _ZNSt3__115allocate_sharedB8ne180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v190);
                long long v87 = v190;
                uint64_t v88 = v190;
                **(void **)long long v190 = 0x500000005;
                *(_WORD *)(v88 + 33) = 1281;
                long long v190 = 0uLL;
                uint64_t v89 = (std::__shared_weak_count *)*((void *)&v193 + 1);
                long long v193 = v87;
                if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                  std::__shared_weak_count::__release_weak(v89);
                }
                BOOL v90 = (std::__shared_weak_count *)*((void *)&v190 + 1);
                if (*((void *)&v190 + 1)
                  && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v190 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                  std::__shared_weak_count::__release_weak(v90);
                }
                uint64_t LOD = (uint64_t)FeatureStyleAttributesSet::insert(*a2 + 1112, (uint64_t *)&v193);
                uint64_t v92 = *(void *)LOD;
                uint64_t v91 = *(void *)(LOD + 8);
                if (v91) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v91 + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v93 = (std::__shared_weak_count *)*((void *)&v193 + 1);
                *(void *)&long long v193 = v92;
                *((void *)&v193 + 1) = v91;
                if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                  std::__shared_weak_count::__release_weak(v93);
                }
                uint64_t v94 = *a2;
                uint64_t v95 = *(void *)(*a2 + 64);
                if (*(void *)(*a2 + 72) != v95)
                {
                  uint64_t v96 = 0;
                  uint64_t v97 = 0;
                  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v185 = v18.__d_.__rep_;
                  while (1)
                  {
                    uint64_t v187 = v97;
                    uint64_t v98 = a2[1];
                    if (v98) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v98 + 16), 1uLL, memory_order_relaxed);
                    }
                    unint64_t v99 = (void *)(v95 + v96);
                    uint64_t v100 = *(std::__shared_weak_count **)(v95 + v96 + 8);
                    *unint64_t v99 = v94;
                    v99[1] = v98;
                    if (v100) {
                      std::__shared_weak_count::__release_weak(v100);
                    }
                    uint64_t v101 = v95 + v96;
                    *(_OWORD *)(v101 + 80) = xmmword_18A62BFC0;
                    *(_DWORD *)(v101 + 100) = 1;
                    unsigned int v189 = 0;
                    LODWORD(v190) = 0;
                    LODWORD(v196[0]) = 0;
                    if ((geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v190) & 1) == 0)
                    {
                      int v119 = 4251;
                      goto LABEL_166;
                    }
                    if (!geo::codec::chapterReadVarUint32(v16, (unsigned int *)v196))
                    {
                      int v119 = 4252;
                      goto LABEL_166;
                    }
                    if (!geo::codec::chapterReadVarUint32(v16, &v189))
                    {
                      int v119 = 4253;
                      goto LABEL_166;
                    }
                    uint64_t v102 = v190;
                    uint64_t v103 = LODWORD(v196[0]);
                    if (v186 < (LODWORD(v196[0]) + v190)) {
                      break;
                    }
                    uint64_t v104 = v195;
                    if (v195)
                    {
                      uint64_t v105 = *((void *)v29 + 5);
                      unsigned int v106 = (void *)(*((void *)v29 + 4) + 16 * v105);
                      *unsigned int v106 = *((void *)v29 + 2);
                      v106[1] = v103;
                      uint64_t LOD = (uint64_t)memcpy((void *)(*((void *)v29 + 1) + 12 * *((void *)v29 + 2)), (const void *)(*((void *)v104 + 1) + 12 * v102), 12 * v103);
                      unint64_t v108 = (void *)((char *)v29 + 16);
                      uint64_t v107 = (void *)((char *)v29 + 40);
                    }
                    else
                    {
                      uint64_t v105 = *((void *)v28 + 5);
                      uint64_t v109 = (void *)(*((void *)v28 + 4) + 16 * v105);
                      *uint64_t v109 = *((void *)v28 + 2);
                      v109[1] = v103;
                      uint64_t LOD = (uint64_t)memcpy((void *)(*((void *)v28 + 1) + 8 * *((void *)v28 + 2)), (const void *)(*((void *)v194 + 1) + 8 * v102), 8 * v103);
                      unint64_t v108 = (void *)((char *)v28 + 16);
                      uint64_t v107 = (void *)((char *)v28 + 40);
                    }
                    *v108 += LODWORD(v196[0]);
                    ++*v107;
                    *(_DWORD *)(v95 + v96 + 96) = v105;
                    if (v189)
                    {
                      v18.__d_.__rep_ = v185;
                      uint64_t LOD = geo::codec::accumulateStyleAttributes(*a2 + 1112, (uint64_t *)&v193, v16, v95 + v96);
                      if ((LOD & 1) == 0)
                      {
                        int v119 = 4278;
                        goto LABEL_166;
                      }
                    }
                    else
                    {
                      long long v110 = v193;
                      v18.__d_.__rep_ = v185;
                      if (*((void *)&v193 + 1)) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v193 + 1) + 8), 1uLL, memory_order_relaxed);
                      }
                      *(void *)(v95 + v96 + 24) = v110;
                      int v111 = *(std::__shared_weak_count **)(v95 + v96 + 32);
                      *(void *)(v95 + v96 + 32) = *((void *)&v110 + 1);
                      if (v111 && !atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                        std::__shared_weak_count::__release_weak(v111);
                      }
                    }
                    uint64_t v97 = v187 + 1;
                    uint64_t v94 = *a2;
                    uint64_t v95 = *(void *)(*a2 + 64);
                    v96 += 104;
                    if (v187 + 1 >= (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((*(void *)(*a2 + 72) - v95) >> 3))) {
                      goto LABEL_149;
                    }
                  }
                  int v119 = 4255;
LABEL_166:
                  uint64_t LOD = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v119);
                  goto LABEL_59;
                }
LABEL_149:
                if (!v29 || v28)
                {
                  *(void *)(v94 + 808) = v28;
                  char v42 = 1;
                  uint64_t v28 = 0;
                  goto LABEL_60;
                }
                uint64_t v114 = geo::codec::Allocator::instance((geo::codec::Allocator *)LOD);
                unint64_t v115 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v114 + 24))(v114, 1, 72);
                uint64_t v116 = *a2;
                *(void *)(*a2 + 808) = v115;
                if (v115)
                {
                  v115[5] = *((void *)v29 + 5);
                  uint64_t LOD = geo::codec::_createLOD(v29, v115, 0, (*(void *)(v116 + 4) & 0x3F00uLL) > 0xE00, 0, 0, 0, 0);
                  uint64_t v28 = 0;
                  char v42 = 1;
                  goto LABEL_60;
                }
                unint64_t v112 = (FILE *)*MEMORY[0x1E4F143C8];
                int v113 = 4286;
                goto LABEL_164;
              }
              uint64_t v117 = (FILE *)*MEMORY[0x1E4F143C8];
              int v118 = 4234;
            }
            else
            {
              uint64_t v117 = (FILE *)*MEMORY[0x1E4F143C8];
              int v118 = 4230;
            }
            uint64_t LOD = fprintf(v117, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v118);
            goto LABEL_58;
          }
          uint64_t v34 = (FILE *)*MEMORY[0x1E4F143C8];
          int v35 = 4207;
        }
        else
        {
          uint64_t v34 = (FILE *)*MEMORY[0x1E4F143C8];
          int v35 = 4205;
        }
      }
      else
      {
        uint64_t v34 = (FILE *)*MEMORY[0x1E4F143C8];
        int v35 = 4203;
      }
      uint64_t LOD = fprintf(v34, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v35);
      uint64_t v28 = 0;
LABEL_58:
      uint64_t v29 = 0;
      goto LABEL_59;
    }
LABEL_28:
    uint64_t v10 = 0;
    goto LABEL_29;
  }
  uint64_t v10 = (void *)a1;
  uint64_t v12 = *a2;
  uint64_t v11 = (std::__shared_weak_count *)a2[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  long long v193 = 0uLL;
  LODWORD(v196[0]) = 0;
  LODWORD(v195) = 0;
  LODWORD(v194) = 0;
  if ((geo::codec::chapterReadVarUint32(v10, (unsigned int *)v196) & 1) == 0)
  {
    unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
    int v15 = 4045;
    goto LABEL_34;
  }
  if (LODWORD(v196[0]) != *(_DWORD *)(v2 + 40))
  {
    unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
    int v15 = 4050;
    goto LABEL_34;
  }
  if (*(unsigned char *)(v2 + 44))
  {
    unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
    int v15 = 4051;
LABEL_34:
    fprintf(v14, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v15);
    char v30 = 0;
    goto LABEL_35;
  }
  uint64_t v36 = *(void *)(*a2 + 800);
  if (!v36)
  {
    unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
    int v15 = 4052;
    goto LABEL_34;
  }
  if (!*(void *)(v36 + 8))
  {
    unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
    int v15 = 4053;
    goto LABEL_34;
  }
  if (!*(void *)(v36 + 32))
  {
    unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
    int v15 = 4054;
    goto LABEL_34;
  }
  if ((geo::codec::chapterReadVarUint32(v10, (unsigned int *)&v194) & 1) == 0)
  {
    unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
    int v15 = 4056;
    goto LABEL_34;
  }
  if ((geo::codec::chapterReadVarUint32(v10, (unsigned int *)&v195) & 1) == 0)
  {
    unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
    int v15 = 4057;
    goto LABEL_34;
  }
  char v30 = 1;
  if (v194 && v195)
  {
    if (v194 >= 0x40000)
    {
      unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
      int v15 = 4063;
    }
    else if (v195 >= 0x10000)
    {
      unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
      int v15 = 4064;
    }
    else
    {
      uint64_t v37 = *a2;
      uint64_t v38 = (std::__shared_weak_count *)(*a2 + 64);
      uint64_t v39 = *(void *)(*a2 + 72);
      unint64_t v40 = 0x4EC4EC4EC4EC4EC5 * ((int64_t)(v39 - (unint64_t)v38->__vftable) >> 3);
      unint64_t v41 = v195 - v40;
      if (v195 <= v40)
      {
        if (v195 < v40)
        {
          uint64_t v120 = (uint64_t)v38->__vftable + 104 * v195;
          while (v39 != v120)
          {
            unint64_t v121 = *(std::__shared_weak_count **)(v39 - 72);
            if (v121 && !atomic_fetch_add(&v121->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v121->__on_zero_shared)(v121, v41);
              std::__shared_weak_count::__release_weak(v121);
            }
            uint64_t v38 = *(std::__shared_weak_count **)(v39 - 96);
            if (v38) {
              std::__shared_weak_count::__release_weak(v38);
            }
            v39 -= 104;
          }
          *(void *)(v37 + 72) = v120;
        }
      }
      else
      {
        std::vector<GeoCodecsMultiSectionFeature,geo::StdAllocator<GeoCodecsMultiSectionFeature,geo::codec::Allocator>>::__append((uint64_t *)v38, v41);
      }
      uint64_t v122 = geo::codec::Allocator::instance((geo::codec::Allocator *)v38);
      char v123 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v122 + 24))(v122, 1, 72);
      *(void *)(*a2 + 808) = v123;
      if (v123)
      {
        *((void *)v123 + 2) = v194;
        uint64_t v124 = geo::codec::Allocator::instance(v123);
        uint64_t v125 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v124 + 24))(v124, v194, 8);
        uint64_t v126 = *(void *)(*a2 + 808);
        *(void *)(v126 + 8) = v125;
        if (v125)
        {
          *(void *)(v126 + 40) = v195;
          uint64_t v127 = geo::codec::Allocator::instance(v125);
          uint64_t v128 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v127 + 24))(v127, v195, 16);
          *(void *)(*(void *)(*a2 + 808) + 32) = v128;
          if (v128)
          {
            _ZNSt3__115allocate_sharedB8ne180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v190);
            long long v129 = v190;
            uint64_t v130 = v190;
            **(void **)long long v190 = 0x500000005;
            *(_WORD *)(v130 + 33) = 1281;
            long long v190 = 0uLL;
            unsigned int v131 = (std::__shared_weak_count *)*((void *)&v193 + 1);
            long long v193 = v129;
            if (v131 && !atomic_fetch_add(&v131->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
            unint64_t v132 = (std::__shared_weak_count *)*((void *)&v190 + 1);
            if (*((void *)&v190 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v190 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
              std::__shared_weak_count::__release_weak(v132);
            }
            unsigned int v133 = FeatureStyleAttributesSet::insert(*a2 + 1112, (uint64_t *)&v193);
            uint64_t v135 = *v133;
            uint64_t v134 = v133[1];
            if (v134) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v134 + 8), 1uLL, memory_order_relaxed);
            }
            unint64_t v136 = (std::__shared_weak_count *)*((void *)&v193 + 1);
            *(void *)&long long v193 = v135;
            *((void *)&v193 + 1) = v134;
            if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
            }
            *(void *)(*(void *)(*a2 + 808) + 48) = 0;
            uint64_t v137 = geo::codec::Allocator::instance((geo::codec::Allocator *)v133);
            uint64_t v138 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v137 + 24))(v137, 0x9D89D89D89D89D8ALL* ((uint64_t)(*(void *)(*a2 + 72) - *(void *)(*a2 + 64)) >> 3), 32);
            *(void *)(*(void *)(*a2 + 808) + 56) = v138;
            if (v138)
            {
              uint64_t v139 = geo::codec::Allocator::instance(v138);
              uint64_t v140 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v139 + 24))(v139, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(*a2 + 72) - *(void *)(*a2 + 64)) >> 3), 16);
              unsigned int v141 = (void *)*a2;
              uint64_t v142 = *(void *)(*a2 + 808);
              *(void *)(v142 + 64) = v140;
              if (v140)
              {
                uint64_t v143 = v141[8];
                if (v141[9] != v143)
                {
                  unint64_t v144 = 0;
                  unint64_t v145 = 0;
                  while (1)
                  {
                    uint64_t v146 = a2[1];
                    if (v146) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v146 + 16), 1uLL, memory_order_relaxed);
                    }
                    uint64_t v147 = v143 + 104 * v145;
                    uint64_t v148 = *(std::__shared_weak_count **)(v147 + 8);
                    *(void *)uint64_t v147 = v141;
                    *(void *)(v147 + 8) = v146;
                    if (v148) {
                      std::__shared_weak_count::__release_weak(v148);
                    }
                    uint64_t v149 = v143 + 104 * v145;
                    *(_OWORD *)(v149 + 80) = xmmword_18A62BFC0;
                    *(_DWORD *)(v149 + 96) = v145;
                    *(_DWORD *)(v149 + 100) = 1;
                    unsigned int v189 = 0;
                    LODWORD(v190) = 0;
                    unsigned int v192 = 0;
                    unsigned int v191 = 0;
                    if ((geo::codec::chapterReadVarUint32(v10, (unsigned int *)&v190) & 1) == 0) {
                      break;
                    }
                    if (!geo::codec::chapterReadVarUint32(v10, &v192))
                    {
                      int v15 = 4097;
                      goto LABEL_256;
                    }
                    if (!geo::codec::chapterReadVarUint32(v10, &v191))
                    {
                      int v15 = 4098;
                      goto LABEL_256;
                    }
                    uint64_t v140 = geo::codec::chapterReadVarUint32(v10, &v189);
                    if (!v140)
                    {
                      int v15 = 4099;
                      goto LABEL_256;
                    }
                    uint64_t v150 = v190;
                    uint64_t v151 = *a2;
                    uint64_t v152 = *(void **)(*a2 + 800);
                    if (v152[5] <= (unint64_t)v190)
                    {
                      int v15 = 4101;
                      goto LABEL_256;
                    }
                    uint64_t v153 = (uint64_t *)(v152[4] + 16 * v190);
                    uint64_t v155 = *v153;
                    unint64_t v154 = v153[1];
                    if (v154 + v155 > v152[2])
                    {
                      int v15 = 4104;
                      goto LABEL_256;
                    }
                    unint64_t v156 = v192;
                    if (v154 <= v192)
                    {
                      int v15 = 4105;
                      goto LABEL_256;
                    }
                    unint64_t v157 = v191;
                    unint64_t v158 = v144 + v191;
                    if (v158 > v194)
                    {
                      int v15 = 4106;
                      goto LABEL_256;
                    }
                    uint64_t v159 = (unint64_t *)(*(void *)(*(void *)(v151 + 808) + 32) + 16 * v145);
                    *uint64_t v159 = v144;
                    v159[1] = v157;
                    if (v157)
                    {
                      uint64_t v160 = 8 * v144;
                      unint64_t v161 = v157;
                      do
                      {
                        uint64_t v140 = *(void *)(*(void *)(*a2 + 808) + 8);
                        *(void *)(v140 + v160) = *(void *)(*(void *)(*(void *)(*a2 + 800) + 8)
                                                             + 8 * ((v156 - 1 + v161) % v154 + v155));
                        v160 += 8;
                        --v161;
                      }
                      while (v161);
                      uint64_t v151 = *a2;
                      uint64_t v152 = *(void **)(*a2 + 800);
                      unint64_t v144 = v158;
                    }
                    uint64_t v162 = v152[8];
                    if (v162)
                    {
                      uint64_t v163 = *(void *)(v162 + 16 * v150 + 8);
                      uint64_t v164 = 16 * v150;
                      if (v163)
                      {
                        uint64_t v165 = v152[7] + 32 * *(void *)(v162 + 16 * v150);
                        while (*(void *)(v165 + 24) != v156 % v154)
                        {
                          v165 += 32;
                          if (!--v163) {
                            goto LABEL_216;
                          }
                        }
                        uint64_t v167 = *(void *)(*(void *)(v151 + 808) + 56)
                             + 32 * *(void *)(*(void *)(v151 + 808) + 48);
                        long long v168 = *(_OWORD *)(v165 + 16);
                        *(_OWORD *)uint64_t v167 = *(_OWORD *)v165;
                        *(_OWORD *)(v167 + 16) = v168;
                        *(void *)(v167 + 8) = v145;
                        *(void *)(v167 + 16) = 0;
                        *(void *)(v167 + 24) = (v157 - 1);
                        uint64_t v151 = *a2;
                        ++*(void *)(*(void *)(*a2 + 808) + 48);
                        uint64_t v166 = 1;
                      }
                      else
                      {
LABEL_216:
                        uint64_t v166 = 0;
                      }
                      uint64_t v169 = *(void *)(v151 + 800);
                      uint64_t v170 = *(void *)(v169 + 64);
                      if (v170)
                      {
                        uint64_t v171 = *(void *)(v170 + 16 * v150 + 8);
                        if (v171)
                        {
                          unint64_t v172 = (v156 + v157 - 1) % v154;
                          uint64_t v173 = *(void *)(v169 + 56) + 32 * *(void *)(v170 + v164);
                          while (*(void *)(v173 + 24) != v172)
                          {
                            v173 += 32;
                            if (!--v171) {
                              goto LABEL_226;
                            }
                          }
                          ++v166;
                          uint64_t v174 = *(void *)(*(void *)(v151 + 808) + 56)
                               + 32 * *(void *)(*(void *)(v151 + 808) + 48);
                          long long v175 = *(_OWORD *)(v173 + 16);
                          *(_OWORD *)uint64_t v174 = *(_OWORD *)v173;
                          *(_OWORD *)(v174 + 16) = v175;
                          *(void *)(v174 + 16) = 0;
                          *(void *)(v174 + 24) = 0;
                          *(void *)(v174 + 8) = v145;
                          uint64_t v151 = *a2;
                          ++*(void *)(*(void *)(*a2 + 808) + 48);
                        }
                      }
                    }
                    else
                    {
                      uint64_t v166 = 0;
                    }
LABEL_226:
                    uint64_t v176 = *(void *)(v151 + 808);
                    uint64_t v177 = *(void *)(v176 + 48) - v166;
                    unint64_t v178 = (uint64_t *)(*(void *)(v176 + 64) + 16 * v145);
                    *unint64_t v178 = v177;
                    v178[1] = v166;
                    if (v189)
                    {
                      uint64_t v140 = geo::codec::accumulateStyleAttributes(v151 + 1112, (uint64_t *)&v193, v10, v143 + 104 * v145);
                      if ((v140 & 1) == 0)
                      {
                        int v15 = 4158;
                        goto LABEL_256;
                      }
                    }
                    else
                    {
                      long long v179 = v193;
                      if (*((void *)&v193 + 1)) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v193 + 1) + 8), 1uLL, memory_order_relaxed);
                      }
                      int v180 = *(std::__shared_weak_count **)(v147 + 32);
                      *(_OWORD *)(v147 + 24) = v179;
                      if (v180 && !atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                        std::__shared_weak_count::__release_weak(v180);
                      }
                    }
                    ++v145;
                    unsigned int v141 = (void *)*a2;
                    uint64_t v143 = *(void *)(*a2 + 64);
                    if (v145 >= 0x4EC4EC4EC4EC4EC5 * ((*(void *)(*a2 + 72) - v143) >> 3))
                    {
                      if (*(void *)(v141[101] + 48)) {
                        goto LABEL_241;
                      }
LABEL_251:
                      uint64_t v182 = geo::codec::Allocator::instance((geo::codec::Allocator *)v140);
                      unint64_t v183 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v182 + 40))(v182, *(void *)(*(void *)(*a2 + 808) + 56), 0);
                      *(void *)(*(void *)(*a2 + 808) + 56) = 0;
                      uint64_t v184 = geo::codec::Allocator::instance(v183);
                      (*(void (**)(uint64_t, void, void))(*(void *)v184 + 40))(v184, *(void *)(*(void *)(*a2 + 808) + 64), 0);
                      *(void *)(*(void *)(*a2 + 808) + 64) = 0;
                      goto LABEL_252;
                    }
                  }
                  int v15 = 4096;
LABEL_256:
                  unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
                  goto LABEL_34;
                }
                unint64_t v144 = 0;
                if (!*(void *)(v142 + 48)) {
                  goto LABEL_251;
                }
LABEL_241:
                uint64_t v181 = geo::codec::Allocator::instance((geo::codec::Allocator *)v140);
                *(void *)(*(void *)(*a2 + 808) + 56) = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v181 + 32))(v181, *(void *)(*(void *)(*a2 + 808) + 56), 32 * *(void *)(*(void *)(*a2 + 808) + 48));
LABEL_252:
                if (v144 == v194)
                {
                  char v30 = 1;
                  goto LABEL_35;
                }
                unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
                int v15 = 4175;
              }
              else
              {
                unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
                int v15 = 4086;
              }
            }
            else
            {
              unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
              int v15 = 4084;
            }
          }
          else
          {
            unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
            int v15 = 4075;
          }
        }
        else
        {
          unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
          int v15 = 4072;
        }
      }
      else
      {
        unint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
        int v15 = 4069;
      }
    }
    goto LABEL_34;
  }
LABEL_35:
  unint64_t v31 = (std::__shared_weak_count *)*((void *)&v193 + 1);
  if (*((void *)&v193 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v193 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v32 = std::chrono::steady_clock::now().__d_.__rep_;
  *(void *)&long long v190 = "ChapterWrappingCoastlineFeatures";
  *(void *)&long long v193 = &v190;
  a1 = (uint64_t)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v12 + 1912, (uint64_t *)&v190, (uint64_t)&std::piecewise_construct, (uint64_t **)&v193);
  *(double *)(a1 + 32) = (double)((v32 - v13.__d_.__rep_) / 1000) * 0.001;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if ((v30 & 1) == 0)
  {
    unint64_t v16 = 0;
    int v33 = 4020;
    goto LABEL_81;
  }
LABEL_29:
  uint64_t v27 = 1;
  if (v2)
  {
LABEL_85:
    if (v10)
    {
      if (*(unsigned char *)v10)
      {
        uint64_t v69 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
        a1 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v69 + 40))(v69, v10[5], 0);
      }
      uint64_t v70 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
      (*(void (**)(uint64_t, void *, void))(*(void *)v70 + 40))(v70, v10, 0);
    }
  }
  return v27;
}

void sub_188FD1258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,const char *a25)
{
  char v30 = *(std::__shared_weak_count **)(v28 - 136);
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  a25 = "ChapterWrappingCoastlineFeatures";
  *(void *)(v28 - 144) = &a25;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v27 + 1912, (uint64_t *)&a25, (uint64_t)&std::piecewise_construct, (uint64_t **)(v28 - 144))+ 4) = (double)((rep - v26) / 1000) * 0.001;
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readDTMRaster(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a1[1];
  if (!v4)
  {
LABEL_5:
    uint64_t v7 = 0;
    unint64_t v16 = "ChapterDTMRaster";
    uint64_t v17 = v3;
    uint64_t v8 = (std::__shared_weak_count *)a2[1];
    std::chrono::steady_clock::time_point v18 = v8;
    if (!v8) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v5 = 0;
  unsigned int v6 = 0;
  while (*(_WORD *)(*a1 + 16 * v5) != 170)
  {
    uint64_t v5 = ++v6;
    if (v4 <= v6) {
      goto LABEL_5;
    }
  }
  uint64_t v7 = geo::codec::chapterAt((uint64_t)a1, v6, 170, v3 + 1912);
  uint64_t v3 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  unint64_t v16 = "ChapterDTMRaster";
  uint64_t v17 = v3;
  std::chrono::steady_clock::time_point v18 = v8;
  if (v8) {
LABEL_6:
  }
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  v9.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v9.__d_.__rep_;
  if (v7)
  {
    int v15 = 0;
    size_t __n = 0;
    operator new();
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10 = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v12 = "ChapterDTMRaster";
  *(void *)&long long v13 = &v12;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v3 + 1912, (uint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v13)+ 4) = (double)((v10 - v9.__d_.__rep_) / 1000) * 0.001;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return 1;
}

void sub_188FD1E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (a7) {
    MEMORY[0x18C11F560](a7, 0x1000C8052888210);
  }
  mgcl::raster::PolygonRasterDecoder<unsigned char>::~PolygonRasterDecoder((uint64_t)va);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v7 - 112));
  _Unwind_Resume(a1);
}

void sub_188FD1E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (a7) {
    MEMORY[0x18C11F560](a7, 0x1000C80BDFB0063);
  }
  mgcl::raster::PolygonRasterDecoder<unsigned char>::~PolygonRasterDecoder((uint64_t)va);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v7 - 112));
  _Unwind_Resume(a1);
}

void sub_188FD1E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (a7) {
    MEMORY[0x18C11F560](a7, 0x1000C8077774924);
  }
  mgcl::raster::PolygonRasterDecoder<unsigned char>::~PolygonRasterDecoder((uint64_t)va);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v7 - 112));
  _Unwind_Resume(a1);
}

void sub_188FD1EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)va);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v7 - 112));
  _Unwind_Resume(a1);
}

void sub_188FD1EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)va);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v7 - 112));
  _Unwind_Resume(a1);
}

void sub_188FD1EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)va);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v7 - 112));
  _Unwind_Resume(a1);
}

void sub_188FD1F14(_Unwind_Exception *a1)
{
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_188FD1F2C(_Unwind_Exception *a1)
{
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readCoverage(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 1;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 119)
  {
    uint64_t v4 = ++v5;
    if (v2 <= v5) {
      return 1;
    }
  }
  uint64_t v6 = geo::codec::chapterAt((uint64_t)a1, v5, 119, *a2 + 1912);
  if (!v6) {
    return 1;
  }
  uint64_t v7 = v6;
  uint64_t v9 = *a2;
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v10.__d_.__rep_;
  unint64_t v12 = *(void *)(v7 + 48);
  unint64_t v13 = *(void *)(v7 + 56);
  BOOL v14 = v13 >= v12;
  unint64_t v15 = v13 - v12;
  if (v14)
  {
    *(unsigned char *)(v7 + 32) = 1;
    uint64_t v19 = (unsigned __int8 *)(*(void *)(v7 + 40) + v12);
    *(void *)(v7 + 16) = v15;
    *(void *)(v7 + 24) = 0;
    *(void *)(v7 + 8) = v19;
    if ((v15 & 0x1FFFFFFFFFFFFFFFLL) != 0)
    {
      unsigned int v20 = *v19;
      uint64_t v17 = 1;
      *(void *)(v7 + 24) = 1;
      *(unsigned char *)(*a2 + 1712) = v20 >> 7;
      *(void *)(v7 + 48) = v12 + 1;
      *(unsigned char *)(v7 + 32) = 0;
      if (!*(unsigned char *)v7) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    int v16 = 6636;
  }
  else
  {
    int v16 = 6632;
  }
  v10.__d_.__rep_ = fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v16);
  uint64_t v17 = 0;
  if (*(unsigned char *)v7)
  {
LABEL_18:
    uint64_t v21 = geo::codec::Allocator::instance((geo::codec::Allocator *)v10.__d_.__rep_);
    v10.__d_.__rep_ = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v21 + 40))(v21, *(void *)(v7 + 40), 0);
  }
LABEL_19:
  uint64_t v22 = geo::codec::Allocator::instance((geo::codec::Allocator *)v10.__d_.__rep_);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v22 + 40))(v22, v7, 0);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v24 = "ChapterCoverage";
  unint64_t v25 = &v24;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v9 + 1912, (uint64_t *)&v24, (uint64_t)&std::piecewise_construct, (uint64_t **)&v25)+ 4) = (double)((v23 - rep) / 1000) * 0.001;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v17;
}

void sub_188FD21B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readVenues(void *a1, void *a2, void *a3)
{
  unint64_t v3 = a1[1];
  if (!v3) {
    return 1;
  }
  uint64_t v6 = 0;
  unsigned int v7 = 0;
  while (*(_WORD *)(*a1 + 16 * v6) != 137)
  {
    uint64_t v6 = ++v7;
    if (v3 <= v7) {
      return 1;
    }
  }
  uint64_t v8 = geo::codec::chapterAt((uint64_t)a1, v7, 137, *a3 + 1912);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = v8;
  std::chrono::steady_clock::time_point v10 = (std::__shared_weak_count *)a3[1];
  uint64_t v704 = *a3;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v11.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v11.__d_.__rep_;
  unint64_t v13 = *(void *)(v9 + 48);
  unint64_t v14 = *(void *)(v9 + 56);
  unint64_t v15 = v14 - v13;
  if (v14 < v13)
  {
    int v16 = 3378;
LABEL_17:
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v16);
    uint64_t v17 = 0;
    goto LABEL_18;
  }
  uint64_t v19 = *a3;
  uint64_t v20 = *(void *)(*a3 + 856);
  uint64_t v21 = *(void *)(*a3 + 864);
  uint64_t v22 = (unsigned __int8 *)(*(void *)(v9 + 40) + v13);
  *(void *)(v9 + 8) = v22;
  *(unsigned char *)(v9 + 32) = 1;
  *(void *)(v9 + 24) = 0;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = (unint64_t *)(v9 + 24);
  *(void *)(v9 + 16) = v15;
  unint64_t v24 = 8 * v15;
  if (!v24)
  {
    int v16 = 3382;
    goto LABEL_17;
  }
  unint64_t v25 = *v22;
  *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = 5;
  unint64_t v26 = v25 >> 3;
  if (v26 + 6 > v24)
  {
    int v16 = 3385;
    goto LABEL_17;
  }
  unsigned int v695 = a2;
  uint64_t v696 = v20;
  LODWORD(v28) = 0;
  unint64_t v697 = v21 - v20;
  unint64_t v29 = v26 + 1;
  unint64_t v30 = 5;
  unint64_t v700 = v26 + 1;
  uint64_t v701 = (geo::codec::Allocator *)(v9 + 8);
  do
  {
    unint64_t v31 = 8 - (v30 & 7);
    if (v29 < v31) {
      unint64_t v31 = v29;
    }
    unint64_t v28 = (v22[v30 >> 3] >> (8 - (v30 & 7) - v31)) & ~(-1 << v31) | (v28 << v31);
    v30 += v31;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v30;
    v29 -= v31;
  }
  while (v29);
  uint64_t v32 = *(void *)(v19 + 184);
  int v33 = *(_OWORD **)(v19 + 192);
  unint64_t v34 = 0x8E38E38E38E38E39 * (((uint64_t)v33 - v32) >> 4);
  unint64_t v35 = v28 - v34;
  if (v28 <= v34)
  {
    if (v28 >= v34) {
      goto LABEL_71;
    }
    uint64_t v45 = (_OWORD *)(v32 + 144 * v28);
    if (v33 != v45)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v693 = v11.__d_.__rep_;
      do
      {
        unsigned int v46 = (std::__shared_weak_count *)*((void *)v33 - 14);
        if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
        uint64_t v47 = (std::__shared_weak_count *)*((void *)v33 - 17);
        if (v47) {
          std::__shared_weak_count::__release_weak(v47);
        }
        v33 -= 9;
      }
      while (v33 != v45);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v693;
    }
LABEL_65:
    *(void *)(v19 + 192) = v45;
    goto LABEL_71;
  }
  uint64_t v36 = *(void *)(v19 + 200);
  if (0x8E38E38E38E38E39 * ((v36 - (uint64_t)v33) >> 4) >= v35)
  {
    uint64_t v45 = &v33[9 * v35];
    uint64_t v48 = -16 * (((uint64_t)v33 - v32) >> 4) + 144 * v28;
    do
    {
      if (v33)
      {
        v33[7] = 0uLL;
        v33[8] = 0uLL;
        v33[5] = 0uLL;
        v33[6] = 0uLL;
        void v33[3] = 0uLL;
        v33[4] = 0uLL;
        v33[1] = 0uLL;
        v33[2] = 0uLL;
        *int v33 = 0uLL;
      }
      v33 += 9;
      v48 -= 144;
    }
    while (v48);
    goto LABEL_65;
  }
  unint64_t v37 = 0x8E38E38E38E38E39 * ((v36 - v32) >> 4);
  uint64_t v38 = 2 * v37;
  if (2 * v37 <= v28) {
    uint64_t v38 = v28;
  }
  if (v37 >= 0xE38E38E38E38E3) {
    uint64_t v39 = 0x1C71C71C71C71C7;
  }
  else {
    uint64_t v39 = v38;
  }
  uint64_t v40 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v19 + 208) + 16))(*(void *)(v19 + 208), 144 * v39, 8);
  unint64_t v41 = (_OWORD *)(v40 + 144 * v34);
  unint64_t v42 = v40 + 144 * v28;
  uint64_t v43 = 144 * v28 - 144 * v34;
  uint64_t v44 = v41;
  do
  {
    if (v44)
    {
      v44[7] = 0uLL;
      v44[8] = 0uLL;
      v44[5] = 0uLL;
      v44[6] = 0uLL;
      v44[3] = 0uLL;
      v44[4] = 0uLL;
      v44[1] = 0uLL;
      v44[2] = 0uLL;
      *uint64_t v44 = 0uLL;
    }
    v44 += 9;
    v43 -= 144;
  }
  while (v43);
  uint64_t v49 = v40 + 144 * v39;
  uint64_t v50 = *(void *)(v19 + 184);
  uint64_t v51 = *(void *)(v19 + 192);
  if (v51 == v50)
  {
    *(void *)(v19 + 184) = v41;
    *(void *)(v19 + 192) = v42;
    uint64_t v61 = *(void *)(v19 + 200);
    *(void *)(v19 + 200) = v49;
  }
  else
  {
    unint64_t v698 = v10;
    unint64_t v52 = 0;
    do
    {
      uint64_t v53 = &v41[v52 / 0x10];
      uint64_t v54 = v51 + v52;
      *(v53 - 9) = *(_OWORD *)(v51 + v52 - 144);
      *(void *)(v54 - 144) = 0;
      *(void *)(v54 - 136) = 0;
      *(v53 - 8) = *(_OWORD *)(v51 + v52 - 128);
      *((void *)v53 - 14) = *(void *)(v51 + v52 - 112);
      *(void *)(v54 - 120) = 0;
      *(void *)(v54 - 112) = 0;
      long long v55 = *(_OWORD *)(v51 + v52 - 104);
      long long v56 = *(_OWORD *)(v51 + v52 - 88);
      *((_DWORD *)v53 - 18) = *(_DWORD *)(v51 + v52 - 72);
      *(_OWORD *)((char *)v53 - 88) = v56;
      *(_OWORD *)((char *)v53 - 104) = v55;
      long long v57 = *(_OWORD *)(v51 + v52 - 64);
      *((void *)v53 - 6) = *(void *)(v51 + v52 - 48);
      *(v53 - 4) = v57;
      long long v58 = *(_OWORD *)(v51 + v52 - 40);
      long long v59 = *(_OWORD *)(v51 + v52 - 24);
      *((void *)v53 - 1) = *(void *)(v51 + v52 - 8);
      *(_OWORD *)((char *)v53 - 24) = v59;
      *(_OWORD *)((char *)v53 - 40) = v58;
      v52 -= 144;
    }
    while (v51 + v52 != v50);
    uint64_t v51 = *(void *)(v19 + 184);
    uint64_t v60 = *(void *)(v19 + 192);
    *(void *)(v19 + 184) = &v41[v52 / 0x10];
    *(void *)(v19 + 192) = v42;
    uint64_t v61 = *(void *)(v19 + 200);
    *(void *)(v19 + 200) = v49;
    if (v60 == v51)
    {
      std::chrono::steady_clock::time_point v10 = v698;
    }
    else
    {
      do
      {
        uint64_t v62 = *(std::__shared_weak_count **)(v60 - 112);
        if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
        uint64_t v63 = *(std::__shared_weak_count **)(v60 - 136);
        if (v63) {
          std::__shared_weak_count::__release_weak(v63);
        }
        v60 -= 144;
      }
      while (v60 != v51);
      std::chrono::steady_clock::time_point v10 = v698;
    }
  }
  if (v51) {
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v19 + 208) + 40))(*(void *)(v19 + 208), v51, v61 - v51);
  }
LABEL_71:
  {
    operator new();
  }
  uint64_t v702 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                              + 16))(geo::codec::Allocator::instance(void)::alloc, 0x71C71C71C71C71C8 * ((uint64_t)(*(void *)(*a3 + 192) - *(void *)(*a3 + 184)) >> 4), 8);
  {
    operator new();
  }
  uint64_t v703 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                              + 16))(geo::codec::Allocator::instance(void)::alloc, 0x71C71C71C71C71C8 * ((uint64_t)(*(void *)(*a3 + 192) - *(void *)(*a3 + 184)) >> 4), 8);
  if (!v702)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 3389);
    uint64_t v17 = 0;
    uint64_t v94 = 0;
    uint64_t v95 = 0;
    goto LABEL_138;
  }
  if (!v703)
  {
    uint64_t v96 = (FILE *)*MEMORY[0x1E4F143C8];
    int v97 = 3390;
    goto LABEL_135;
  }
  unint64_t v699 = v10;
  if (v28)
  {
    uint64_t v65 = 0;
    while (1)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v68 = rep;
      uint64_t v69 = *a3;
      uint64_t v70 = a3[1];
      uint64_t v71 = *(void *)(*a3 + 184);
      if (v70) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 16), 1uLL, memory_order_relaxed);
      }
      unint64_t v72 = (void *)(v71 + 144 * v65);
      unint64_t v73 = (std::__shared_weak_count *)v72[1];
      *unint64_t v72 = v69;
      v72[1] = v70;
      if (v73) {
        std::__shared_weak_count::__release_weak(v73);
      }
      unint64_t v74 = *(void *)(v9 + 24);
      unint64_t v75 = 8 * *(void *)(v9 + 16);
      if (v74 + 64 > v75)
      {
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 3397);
        uint64_t v17 = 0;
        uint64_t v94 = 0;
        uint64_t v95 = 0;
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v68;
        goto LABEL_136;
      }
      unint64_t v76 = 0;
      uint64_t v77 = *(void *)v701;
      unint64_t v78 = 64;
      do
      {
        unint64_t v79 = 8 - (v74 & 7);
        if (v78 < v79) {
          unint64_t v79 = v78;
        }
        unint64_t v76 = (*(unsigned __int8 *)(v77 + (v74 >> 3)) >> (8 - (v74 & 7) - v79)) & (unint64_t)~(-1 << v79) | (v76 << v79);
        v74 += v79;
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v74;
        v78 -= v79;
      }
      while (v78);
      *(void *)(v71 + 144 * v65 + 104) = v76;
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v68;
      if (v74 + 5 > v75) {
        break;
      }
      int v80 = 0;
      unint64_t v81 = 5;
      do
      {
        unint64_t v82 = 8 - (v74 & 7);
        if (v81 < v82) {
          unint64_t v82 = v81;
        }
        int v80 = (*(unsigned __int8 *)(v77 + (v74 >> 3)) >> (8 - (v74 & 7) - v82)) & ~(-1 << v82) | (v80 << v82);
        v74 += v82;
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v74;
        v81 -= v82;
      }
      while (v81);
      unint64_t v83 = (v80 + 1);
      if (v74 + v83 > v75) {
        break;
      }
      if (v80 != -1)
      {
        int v84 = 0;
        do
        {
          unint64_t v85 = 8 - (v74 & 7);
          if (v83 < v85) {
            unint64_t v85 = v83;
          }
          int v84 = (*(unsigned __int8 *)(v77 + (v74 >> 3)) >> (8 - (v74 & 7) - v85)) & ~(-1 << v85) | (v84 << v85);
          v74 += v85;
          *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v74;
          v83 -= v85;
        }
        while (v83);
        if (v84)
        {
          if (v74 + 1 > v75) {
            break;
          }
          unsigned int v86 = *(unsigned __int8 *)(v77 + (v74 >> 3));
          *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v74 + 1;
          if ((v86 >> (~(_BYTE)v74 & 7))) {
            LODWORD(v83) = -v84;
          }
          else {
            LODWORD(v83) = v84;
          }
          ++v74;
        }
        else
        {
          LODWORD(v83) = 0;
        }
      }
      if (v74 + 5 > v75) {
        goto LABEL_134;
      }
      int v87 = 0;
      unint64_t v88 = 5;
      do
      {
        unint64_t v89 = 8 - (v74 & 7);
        if (v88 < v89) {
          unint64_t v89 = v88;
        }
        int v87 = (*(unsigned __int8 *)(v77 + (v74 >> 3)) >> (8 - (v74 & 7) - v89)) & ~(-1 << v89) | (v87 << v89);
        v74 += v89;
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v74;
        v88 -= v89;
      }
      while (v88);
      unint64_t v90 = (v87 + 1);
      if (v74 + v90 > v75)
      {
LABEL_134:
        uint64_t v96 = (FILE *)*MEMORY[0x1E4F143C8];
        int v97 = 3401;
        goto LABEL_135;
      }
      if (v87 == -1) {
        goto LABEL_77;
      }
      int v91 = 0;
      do
      {
        unint64_t v92 = 8 - (v74 & 7);
        if (v90 < v92) {
          unint64_t v92 = v90;
        }
        int v91 = (*(unsigned __int8 *)(v77 + (v74 >> 3)) >> (8 - (v74 & 7) - v92)) & ~(-1 << v92) | (v91 << v92);
        v74 += v92;
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v74;
        v90 -= v92;
      }
      while (v90);
      if (!v91)
      {
LABEL_77:
        int v66 = 0;
      }
      else
      {
        if (v74 + 1 > v75) {
          goto LABEL_134;
        }
        unsigned int v93 = *(unsigned __int8 *)(v77 + (v74 >> 3));
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v74 + 1;
        if ((v93 >> (~(_BYTE)v74 & 7))) {
          int v66 = -v91;
        }
        else {
          int v66 = v91;
        }
        ++v74;
      }
      uint64_t v67 = 8 * v65;
      *(void *)(v702 + v67) = (int)v83;
      ++v65;
      *(void *)(v703 + v67) = v66;
      if (v65 == v28) {
        goto LABEL_126;
      }
    }
    uint64_t v96 = (FILE *)*MEMORY[0x1E4F143C8];
    int v97 = 3400;
LABEL_135:
    fprintf(v96, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v97);
    uint64_t v17 = 0;
    uint64_t v94 = 0;
    uint64_t v95 = 0;
    goto LABEL_136;
  }
  unint64_t v74 = *(void *)(v9 + 24);
  unint64_t v75 = 8 * *(void *)(v9 + 16);
LABEL_126:
  if (v74 + 5 > v75) {
    goto LABEL_132;
  }
  int v98 = 0;
  uint64_t v99 = *(void *)v701;
  unint64_t v100 = 5;
  do
  {
    unint64_t v101 = 8 - (v74 & 7);
    if (v100 < v101) {
      unint64_t v101 = v100;
    }
    int v98 = (*(unsigned __int8 *)(v99 + (v74 >> 3)) >> (8 - (v74 & 7) - v101)) & ~(-1 << v101) | (v98 << v101);
    v74 += v101;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v74;
    v100 -= v101;
  }
  while (v100);
  unint64_t v102 = (v98 + 1);
  if (v74 + v102 > v75)
  {
LABEL_132:
    uint64_t v96 = (FILE *)*MEMORY[0x1E4F143C8];
    int v97 = 3407;
    goto LABEL_135;
  }
  int v103 = 0;
  if (v102)
  {
    do
    {
      unint64_t v104 = 8 - (v74 & 7);
      if (v102 < v104) {
        unint64_t v104 = v102;
      }
      int v103 = (*(unsigned __int8 *)(v99 + (v74 >> 3)) >> (8 - (v74 & 7) - v104)) & ~(-1 << v104) | (v103 << v104);
      v74 += v104;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v74;
      v102 -= v104;
    }
    while (v102);
  }
  if (v74 + 5 > v75)
  {
    uint64_t v96 = (FILE *)*MEMORY[0x1E4F143C8];
    int v97 = 3410;
    goto LABEL_135;
  }
  int v105 = 0;
  unint64_t v106 = 5;
  do
  {
    unint64_t v107 = 8 - (v74 & 7);
    if (v106 < v107) {
      unint64_t v107 = v106;
    }
    int v105 = (*(unsigned __int8 *)(v99 + (v74 >> 3)) >> (8 - (v74 & 7) - v107)) & ~(-1 << v107) | (v105 << v107);
    v74 += v107;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v74;
    v106 -= v107;
  }
  while (v106);
  if (v74 + 5 > v75)
  {
    uint64_t v96 = (FILE *)*MEMORY[0x1E4F143C8];
    int v97 = 3412;
    goto LABEL_135;
  }
  int v108 = 0;
  unint64_t v109 = (v105 + 1);
  unint64_t v110 = 5;
  do
  {
    unint64_t v111 = 8 - (v74 & 7);
    if (v110 < v111) {
      unint64_t v111 = v110;
    }
    int v108 = (*(unsigned __int8 *)(v99 + (v74 >> 3)) >> (8 - (v74 & 7) - v111)) & ~(-1 << v111) | (v108 << v111);
    v74 += v111;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v74;
    v110 -= v111;
  }
  while (v110);
  if (v103)
  {
    int v112 = 0;
    while (1)
    {
      unint64_t v113 = *(void *)(v9 + 24);
      unint64_t v114 = 8 * *(void *)(v9 + 16);
      if (v113 + v700 > v114)
      {
        int v97 = 3418;
        goto LABEL_210;
      }
      LODWORD(v115) = 0;
      uint64_t v116 = *(void *)v701;
      unint64_t v117 = v700;
      do
      {
        unint64_t v118 = 8 - (v113 & 7);
        if (v117 < v118) {
          unint64_t v118 = v117;
        }
        unint64_t v115 = (*(unsigned __int8 *)(v116 + (v113 >> 3)) >> (8 - (v113 & 7) - v118)) & ~(-1 << v118) | (v115 << v118);
        v113 += v118;
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v113;
        v117 -= v118;
      }
      while (v117);
      if (v113 + v109 > v114)
      {
        int v97 = 3419;
        goto LABEL_210;
      }
      unsigned int v119 = 0;
      if (v109)
      {
        uint64_t v120 = *(void *)v701;
        unint64_t v121 = v109;
        do
        {
          unint64_t v122 = 8 - (v113 & 7);
          if (v121 < v122) {
            unint64_t v122 = v121;
          }
          unsigned int v119 = (*(unsigned __int8 *)(v120 + (v113 >> 3)) >> (8 - (v113 & 7) - v122)) & ~(-1 << v122) | (v119 << v122);
          v113 += v122;
          *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v113;
          v121 -= v122;
        }
        while (v121);
      }
      uint64_t v123 = *a3;
      uint64_t v124 = *(void *)(*a3 + 184);
      if (0x8E38E38E38E38E39 * ((*(void *)(*a3 + 192) - v124) >> 4) <= v115)
      {
        int v97 = 3420;
        goto LABEL_210;
      }
      uint64_t v126 = v123 + 504;
      uint64_t v125 = *(void *)(v123 + 504);
      if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(v126 + 8) - v125) >> 5) <= (unint64_t)v119) {
        break;
      }
      uint64_t v127 = v124 + 144 * v115;
      uint64_t v128 = v125 + 224 * v119;
      *(void *)(v128 + 120) = *(void *)(v127 + 104);
      *(void *)(v127 + 112) = *(void *)(v128 + 88);
      if (++v112 == v103)
      {
        unint64_t v74 = *(void *)(v9 + 24);
        unint64_t v75 = 8 * *(void *)(v9 + 16);
        goto LABEL_181;
      }
    }
    int v97 = 3421;
LABEL_210:
    uint64_t v96 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_135;
  }
LABEL_181:
  if (v74 + 5 > v75)
  {
    uint64_t v96 = (FILE *)*MEMORY[0x1E4F143C8];
    int v97 = 3430;
    goto LABEL_135;
  }
  unint64_t v688 = v109;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v694 = rep;
  int v129 = 0;
  unint64_t v686 = (v108 + 1);
  uint64_t v130 = *(void *)v701;
  unint64_t v131 = 5;
  do
  {
    unint64_t v132 = 8 - (v74 & 7);
    if (v131 < v132) {
      unint64_t v132 = v131;
    }
    int v129 = (*(unsigned __int8 *)(v130 + (v74 >> 3)) >> (8 - (v74 & 7) - v132)) & ~(-1 << v132) | (v129 << v132);
    v74 += v132;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v74;
    v131 -= v132;
  }
  while (v131);
  unint64_t v133 = (v129 + 1);
  if (v74 + v133 > v75)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 3433);
    uint64_t v17 = 0;
    uint64_t v94 = 0;
    uint64_t v95 = 0;
    goto LABEL_136;
  }
  unint64_t v687 = v133;
  unsigned int v134 = 0;
  if (v133)
  {
    unint64_t v135 = v133;
    do
    {
      unint64_t v136 = 8 - (v74 & 7);
      if (v135 < v136) {
        unint64_t v136 = v135;
      }
      unsigned int v134 = (*(unsigned __int8 *)(v130 + (v74 >> 3)) >> (8 - (v74 & 7) - v136)) & ~(-1 << v136) | (v134 << v136);
      v74 += v136;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v74;
      v135 -= v136;
    }
    while (v135);
  }
  uint64_t v137 = *a3;
  unint64_t v138 = v134;
  uint64_t v139 = *(void *)(*a3 + 216);
  uint64_t v140 = *(void *)(*a3 + 224);
  unint64_t v141 = 0x86BCA1AF286BCA1BLL * ((v140 - v139) >> 3);
  _CF = v134 >= v141;
  unint64_t v143 = v134 - v141;
  if (v143 != 0 && _CF)
  {
    uint64_t v144 = *(void *)(v137 + 232);
    if (0x86BCA1AF286BCA1BLL * ((v144 - v140) >> 3) < v143)
    {
      unint64_t v145 = 0x86BCA1AF286BCA1BLL * ((v144 - v139) >> 3);
      uint64_t v146 = 2 * v145;
      if (2 * v145 <= v138) {
        uint64_t v146 = v138;
      }
      if (v145 >= 0xD79435E50D7943) {
        uint64_t v147 = 0x1AF286BCA1AF286;
      }
      else {
        uint64_t v147 = v146;
      }
      uint64_t v148 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v137 + 240) + 16))(*(void *)(v137 + 240), 152 * v147, 8);
      unint64_t v149 = v148 + 152 * v141;
      uint64_t v150 = v148 + 152 * v138;
      uint64_t v151 = 152 * v138 - 152 * v141;
      __n128 v64 = 0uLL;
      unint64_t v152 = v149;
      do
      {
        if (v152)
        {
          *(void *)(v152 + 144) = 0;
          *(_OWORD *)(v152 + 112) = 0uLL;
          *(_OWORD *)(v152 + 128) = 0uLL;
          *(_OWORD *)(v152 + 80) = 0uLL;
          *(_OWORD *)(v152 + 96) = 0uLL;
          *(_OWORD *)(v152 + 48) = 0uLL;
          *(_OWORD *)(v152 + 64) = 0uLL;
          *(_OWORD *)(v152 + 16) = 0uLL;
          *(_OWORD *)(v152 + 32) = 0uLL;
          *(_OWORD *)unint64_t v152 = 0uLL;
        }
        v152 += 152;
        v151 -= 152;
      }
      while (v151);
      uint64_t v158 = v148 + 152 * v147;
      uint64_t v159 = *(void *)(v137 + 216);
      uint64_t v160 = *(void *)(v137 + 224);
      if (v160 == v159)
      {
        *(void *)(v137 + 216) = v149;
        *(void *)(v137 + 224) = v150;
        uint64_t v169 = *(void *)(v137 + 232);
        *(void *)(v137 + 232) = v158;
      }
      else
      {
        uint64_t v161 = 0;
        do
        {
          uint64_t v162 = v149 + v161;
          uint64_t v163 = v160 + v161;
          *(_OWORD *)(v162 - 152) = *(_OWORD *)(v160 + v161 - 152);
          *(void *)(v163 - 152) = 0;
          *(void *)(v163 - 144) = 0;
          *(_OWORD *)(v162 - 136) = *(_OWORD *)(v160 + v161 - 136);
          *(void *)(v162 - 120) = *(void *)(v160 + v161 - 120);
          *(void *)(v163 - 128) = 0;
          *(void *)(v163 - 120) = 0;
          long long v164 = *(_OWORD *)(v160 + v161 - 112);
          long long v165 = *(_OWORD *)(v160 + v161 - 96);
          *(_DWORD *)(v162 - 80) = *(_DWORD *)(v160 + v161 - 80);
          *(_OWORD *)(v162 - 112) = v164;
          *(_OWORD *)(v162 - 96) = v165;
          long long v166 = *(_OWORD *)(v160 + v161 - 72);
          *(void *)(v162 - 56) = *(void *)(v160 + v161 - 56);
          *(_OWORD *)(v162 - 72) = v166;
          __n128 v64 = *(__n128 *)(v160 + v161 - 48);
          long long v167 = *(_OWORD *)(v160 + v161 - 16);
          *(_OWORD *)(v162 - 32) = *(_OWORD *)(v160 + v161 - 32);
          *(_OWORD *)(v162 - 16) = v167;
          *(__n128 *)(v162 - 48) = v64;
          v161 -= 152;
        }
        while (v160 + v161 != v159);
        uint64_t v160 = *(void *)(v137 + 216);
        uint64_t v168 = *(void *)(v137 + 224);
        *(void *)(v137 + 216) = v149 + v161;
        *(void *)(v137 + 224) = v150;
        uint64_t v169 = *(void *)(v137 + 232);
        for (*(void *)(v137 + 232) = v158; v168 != v160; v168 -= 152)
        {
          uint64_t v170 = *(std::__shared_weak_count **)(v168 - 120);
          if (v170 && !atomic_fetch_add(&v170->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
            std::__shared_weak_count::__release_weak(v170);
          }
          uint64_t v171 = *(std::__shared_weak_count **)(v168 - 144);
          if (v171) {
            std::__shared_weak_count::__release_weak(v171);
          }
        }
      }
      if (v160) {
        (*(void (**)(void, uint64_t, uint64_t, __n128))(**(void **)(v137 + 240) + 40))(*(void *)(v137 + 240), v160, v169 - v160, v64);
      }
      goto LABEL_241;
    }
    uint64_t v156 = v140 + 152 * v143;
    uint64_t v157 = 152 * v138 - 152 * v141;
    __n128 v64 = 0uLL;
    do
    {
      if (v140)
      {
        *(void *)(v140 + 144) = 0;
        *(_OWORD *)(v140 + 112) = 0uLL;
        *(_OWORD *)(v140 + 128) = 0uLL;
        *(_OWORD *)(v140 + 80) = 0uLL;
        *(_OWORD *)(v140 + 96) = 0uLL;
        *(_OWORD *)(v140 + 48) = 0uLL;
        *(_OWORD *)(v140 + 64) = 0uLL;
        *(_OWORD *)(v140 + 16) = 0uLL;
        *(_OWORD *)(v140 + 32) = 0uLL;
        *(_OWORD *)uint64_t v140 = 0uLL;
      }
      v140 += 152;
      v157 -= 152;
    }
    while (v157);
    uint64_t v140 = v156;
  }
  else
  {
    if (_CF) {
      goto LABEL_241;
    }
    uint64_t v153 = v139 + 152 * v138;
    if (v140 != v153)
    {
      do
      {
        unint64_t v154 = *(std::__shared_weak_count **)(v140 - 120);
        if (v154 && !atomic_fetch_add(&v154->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
        uint64_t v155 = *(std::__shared_weak_count **)(v140 - 144);
        if (v155) {
          std::__shared_weak_count::__release_weak(v155);
        }
        v140 -= 152;
      }
      while (v140 != v153);
      uint64_t v140 = v153;
    }
  }
  *(void *)(v137 + 224) = v140;
LABEL_241:
  {
    operator new();
  }
  uint64_t v690 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                      + 16))(geo::codec::Allocator::instance(void)::alloc, 0x1AF286BCA1AF286CLL * ((uint64_t)(*(void *)(*a3 + 224) - *(void *)(*a3 + 216)) >> 3), 8, v64);
  {
    operator new();
  }
  uint64_t v689 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                              + 16))(geo::codec::Allocator::instance(void)::alloc, 0x1AF286BCA1AF286CLL * ((uint64_t)(*(void *)(*a3 + 224) - *(void *)(*a3 + 216)) >> 3), 8);
  uint64_t v172 = *a3;
  uint64_t v173 = *(void *)(*a3 + 216);
  if (*(void *)(*a3 + 224) != v173)
  {
    uint64_t v174 = 0;
    unsigned int v691 = 0;
    while (1)
    {
      uint64_t v175 = a3[1];
      if (v175) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v175 + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v176 = (void *)(v173 + 152 * v174);
      uint64_t v177 = (std::__shared_weak_count *)v176[1];
      *uint64_t v176 = v172;
      v176[1] = v175;
      if (v177) {
        std::__shared_weak_count::__release_weak(v177);
      }
      unint64_t v178 = *(void *)(v9 + 24);
      unint64_t v179 = v700;
      unint64_t v180 = 8 * *(void *)(v9 + 16);
      if (v178 + v700 > v180)
      {
        int v218 = 3444;
        goto LABEL_357;
      }
      LODWORD(v181) = 0;
      uint64_t v182 = *(void *)v701;
      do
      {
        unint64_t v183 = 8 - (v178 & 7);
        if (v179 < v183) {
          unint64_t v183 = v179;
        }
        uint64_t v181 = (*(unsigned __int8 *)(v182 + (v178 >> 3)) >> (8 - (v178 & 7) - v183)) & ~(-1 << v183) | (v181 << v183);
        v178 += v183;
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v178;
        v179 -= v183;
      }
      while (v179);
      uint64_t v184 = v173 + 152 * v174;
      *(void *)(v184 + 144) = v181;
      if (v178 + 64 > v180)
      {
        int v218 = 3447;
        goto LABEL_357;
      }
      unint64_t v185 = 0;
      unint64_t v186 = (unint64_t *)(v184 + 104);
      uint64_t v187 = *(void *)v701;
      unint64_t v188 = 64;
      do
      {
        unint64_t v189 = 8 - (v178 & 7);
        if (v188 < v189) {
          unint64_t v189 = v188;
        }
        unint64_t v185 = (*(unsigned __int8 *)(v187 + (v178 >> 3)) >> (8 - (v178 & 7) - v189)) & (unint64_t)~(-1 << v189) | (v185 << v189);
        v178 += v189;
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v178;
        v188 -= v189;
      }
      while (v188);
      *unint64_t v186 = v185;
      if (v178 + 64 > v180)
      {
        int v218 = 3448;
        goto LABEL_357;
      }
      unint64_t v190 = 0;
      unint64_t v191 = 64;
      do
      {
        unint64_t v192 = 8 - (v178 & 7);
        if (v191 < v192) {
          unint64_t v192 = v191;
        }
        unint64_t v190 = (*(unsigned __int8 *)(v187 + (v178 >> 3)) >> (8 - (v178 & 7) - v192)) & (unint64_t)~(-1 << v192) | (v190 << v192);
        v178 += v192;
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v178;
        v191 -= v192;
      }
      while (v191);
      *(void *)(v173 + 152 * v174 + 112) = v190;
      if (v178 + 5 > v180) {
        break;
      }
      int v193 = 0;
      unint64_t v194 = 5;
      do
      {
        unint64_t v195 = 8 - (v178 & 7);
        if (v194 < v195) {
          unint64_t v195 = v194;
        }
        int v193 = (*(unsigned __int8 *)(v187 + (v178 >> 3)) >> (8 - (v178 & 7) - v195)) & ~(-1 << v195) | (v193 << v195);
        v178 += v195;
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v178;
        v194 -= v195;
      }
      while (v194);
      unint64_t v196 = (v193 + 1);
      if (v178 + v196 > v180) {
        break;
      }
      int v197 = 0;
      if (v196)
      {
        do
        {
          unint64_t v198 = 8 - (v178 & 7);
          if (v196 < v198) {
            unint64_t v198 = v196;
          }
          int v197 = (*(unsigned __int8 *)(v187 + (v178 >> 3)) >> (8 - (v178 & 7) - v198)) & ~(-1 << v198) | (v197 << v198);
          v178 += v198;
          *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v178;
          v196 -= v198;
        }
        while (v196);
        if (v197)
        {
          if (v178 + 1 > v180) {
            break;
          }
          unsigned int v199 = *(unsigned __int8 *)(v187 + (v178 >> 3));
          *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v178 + 1;
          if ((v199 >> (~(_BYTE)v178 & 7))) {
            int v197 = -v197;
          }
          ++v178;
          if (v197 > 32766)
          {
            int v218 = 3451;
            goto LABEL_357;
          }
        }
      }
      *(_WORD *)(v173 + 152 * v174 + 120) = v197;
      if (v178 + 5 > v180) {
        goto LABEL_310;
      }
      int v200 = 0;
      unint64_t v201 = 5;
      do
      {
        unint64_t v202 = 8 - (v178 & 7);
        if (v201 < v202) {
          unint64_t v202 = v201;
        }
        int v200 = (*(unsigned __int8 *)(v187 + (v178 >> 3)) >> (8 - (v178 & 7) - v202)) & ~(-1 << v202) | (v200 << v202);
        v178 += v202;
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v178;
        v201 -= v202;
      }
      while (v201);
      unint64_t v203 = (v200 + 1);
      if (v178 + v203 > v180)
      {
LABEL_310:
        int v218 = 3453;
        goto LABEL_357;
      }
      int v204 = 0;
      if (v203)
      {
        do
        {
          unint64_t v205 = 8 - (v178 & 7);
          if (v203 < v205) {
            unint64_t v205 = v203;
          }
          int v204 = (*(unsigned __int8 *)(v187 + (v178 >> 3)) >> (8 - (v178 & 7) - v205)) & ~(-1 << v205) | (v204 << v205);
          v178 += v205;
          *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v178;
          v203 -= v205;
        }
        while (v203);
      }
      *(_DWORD *)(v690 + 4 * v174) = v204;
      if (v178 + 5 > v180) {
        goto LABEL_335;
      }
      int v206 = 0;
      unint64_t v207 = 5;
      do
      {
        unint64_t v208 = 8 - (v178 & 7);
        if (v207 < v208) {
          unint64_t v208 = v207;
        }
        int v206 = (*(unsigned __int8 *)(v187 + (v178 >> 3)) >> (8 - (v178 & 7) - v208)) & ~(-1 << v208) | (v206 << v208);
        v178 += v208;
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v178;
        v207 -= v208;
      }
      while (v207);
      unint64_t v209 = (v206 + 1);
      if (v178 + v209 > v180)
      {
LABEL_335:
        int v218 = 3454;
        goto LABEL_357;
      }
      int v210 = 0;
      if (v209)
      {
        do
        {
          unint64_t v211 = 8 - (v178 & 7);
          if (v209 < v211) {
            unint64_t v211 = v209;
          }
          int v210 = (*(unsigned __int8 *)(v187 + (v178 >> 3)) >> (8 - (v178 & 7) - v211)) & ~(-1 << v211) | (v210 << v211);
          v178 += v211;
          *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v178;
          v209 -= v211;
        }
        while (v209);
      }
      *(_DWORD *)(v689 + 4 * v174) = v210;
      uint64_t v172 = *a3;
      uint64_t v173 = *(void *)(*a3 + 216);
      uint64_t v174 = ++v691;
      if (0x86BCA1AF286BCA1BLL * ((*(void *)(*a3 + 224) - v173) >> 3) <= v691) {
        goto LABEL_302;
      }
    }
    int v218 = 3450;
LABEL_357:
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_358;
  }
  unint64_t v178 = *(void *)(v9 + 24);
  unint64_t v180 = 8 * *(void *)(v9 + 16);
LABEL_302:
  if (v178 + 5 > v180) {
    goto LABEL_308;
  }
  int v212 = 0;
  uint64_t v213 = *(void *)v701;
  unint64_t v214 = 5;
  do
  {
    unint64_t v215 = 8 - (v178 & 7);
    if (v214 < v215) {
      unint64_t v215 = v214;
    }
    int v212 = (*(unsigned __int8 *)(v213 + (v178 >> 3)) >> (8 - (v178 & 7) - v215)) & ~(-1 << v215) | (v212 << v215);
    v178 += v215;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v178;
    v214 -= v215;
  }
  while (v214);
  unint64_t v216 = (v212 + 1);
  if (v178 + v216 > v180)
  {
LABEL_308:
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3458;
    goto LABEL_358;
  }
  if (v216)
  {
    int v219 = 0;
    do
    {
      unint64_t v220 = 8 - (v178 & 7);
      if (v216 < v220) {
        unint64_t v220 = v216;
      }
      int v219 = (*(unsigned __int8 *)(v213 + (v178 >> 3)) >> (8 - (v178 & 7) - v220)) & ~(-1 << v220) | (v219 << v220);
      v178 += v220;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v178;
      v216 -= v220;
    }
    while (v216);
    if (v219)
    {
      int v221 = 0;
      unint64_t v222 = (void *)*a3;
      while (v178 + v687 <= v180)
      {
        unsigned int v223 = v687;
        if (v687)
        {
          unsigned int v223 = 0;
          unint64_t v224 = v687;
          do
          {
            unint64_t v225 = 8 - (v178 & 7);
            if (v224 < v225) {
              unint64_t v225 = v224;
            }
            unsigned int v223 = (*(unsigned __int8 *)(v213 + (v178 >> 3)) >> (8 - (v178 & 7) - v225)) & ~(-1 << v225) | (v223 << v225);
            v178 += v225;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v178;
            v224 -= v225;
          }
          while (v224);
        }
        if (v178 + v688 > v180)
        {
          int v218 = 3464;
          goto LABEL_357;
        }
        unsigned int v226 = v688;
        if (v688)
        {
          unsigned int v226 = 0;
          unint64_t v227 = v688;
          do
          {
            unint64_t v228 = 8 - (v178 & 7);
            if (v227 < v228) {
              unint64_t v228 = v227;
            }
            unsigned int v226 = (*(unsigned __int8 *)(v213 + (v178 >> 3)) >> (8 - (v178 & 7) - v228)) & ~(-1 << v228) | (v226 << v228);
            v178 += v228;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v178;
            v227 -= v228;
          }
          while (v227);
        }
        uint64_t v229 = v222[27];
        if (0x86BCA1AF286BCA1BLL * ((v222[28] - v229) >> 3) <= v223)
        {
          int v218 = 3465;
          goto LABEL_357;
        }
        uint64_t v230 = v222[63];
        if (0x6DB6DB6DB6DB6DB7 * ((v222[64] - v230) >> 5) <= (unint64_t)v226)
        {
          int v218 = 3466;
          goto LABEL_357;
        }
        uint64_t v231 = v229 + 152 * v223;
        uint64_t v232 = v230 + 224 * v226;
        *(void *)(v232 + 128) = *(void *)(v231 + 104);
        *(void *)(v232 + 120) = *(void *)(v222[23] + 144 * *(void *)(v231 + 144) + 104);
        if (++v221 == v219) {
          goto LABEL_333;
        }
      }
      int v218 = 3463;
      goto LABEL_357;
    }
  }
LABEL_333:
  if (v178 + 5 > v180)
  {
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3474;
    goto LABEL_358;
  }
  int v233 = 0;
  unint64_t v234 = 5;
  do
  {
    unint64_t v235 = 8 - (v178 & 7);
    if (v234 < v235) {
      unint64_t v235 = v234;
    }
    int v233 = (*(unsigned __int8 *)(v213 + (v178 >> 3)) >> (8 - (v178 & 7) - v235)) & ~(-1 << v235) | (v233 << v235);
    v178 += v235;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v178;
    v234 -= v235;
  }
  while (v234);
  unint64_t v692 = (v233 + 1);
  if (v178 + v692 > v180)
  {
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3478;
    goto LABEL_358;
  }
  if (v233 == -1)
  {
    int v239 = 0;
    unsigned int v236 = 0;
  }
  else
  {
    unsigned int v236 = 0;
    unint64_t v237 = (v233 + 1);
    do
    {
      unint64_t v238 = 8 - (v178 & 7);
      if (v237 < v238) {
        unint64_t v238 = v237;
      }
      unsigned int v236 = (*(unsigned __int8 *)(v213 + (v178 >> 3)) >> (8 - (v178 & 7) - v238)) & ~(-1 << v238) | (v236 << v238);
      v178 += v238;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v178;
      v237 -= v238;
    }
    while (v237);
    if (v178 + v692 > v180)
    {
      uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
      int v218 = 3479;
      goto LABEL_358;
    }
    int v239 = 0;
    unint64_t v240 = (v233 + 1);
    do
    {
      unint64_t v241 = 8 - (v178 & 7);
      if (v240 < v241) {
        unint64_t v241 = v240;
      }
      int v239 = (*(unsigned __int8 *)(v213 + (v178 >> 3)) >> (8 - (v178 & 7) - v241)) & ~(-1 << v241) | (v239 << v241);
      v178 += v241;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v178;
      v240 -= v241;
    }
    while (v240);
  }
  *(void *)(*a3 + 248) = v236 + v239;
  {
    operator new();
  }
  uint64_t v242 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                             + 24))(geo::codec::Allocator::instance(void)::alloc, *(void *)(*a3 + 248), 64);
  uint64_t v246 = (void *)*a3;
  *(void *)(*a3 + 256) = v242;
  if (!v242)
  {
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3482;
    goto LABEL_358;
  }
  unint64_t v247 = *(void *)(v9 + 24);
  unint64_t v248 = 8 * *(void *)(v9 + 16);
  if (v247 + 5 > v248)
  {
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3484;
    goto LABEL_358;
  }
  int v249 = 0;
  uint64_t v250 = *(void *)v701;
  unint64_t v251 = 5;
  do
  {
    unint64_t v252 = 8 - (v247 & 7);
    if (v251 < v252) {
      unint64_t v252 = v251;
    }
    int v249 = (*(unsigned __int8 *)(v250 + (v247 >> 3)) >> (8 - (v247 & 7) - v252)) & ~(-1 << v252) | (v249 << v252);
    v247 += v252;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v247;
    v251 -= v252;
  }
  while (v251);
  unint64_t v685 = (v249 + 1);
  if (v236)
  {
    uint64_t v253 = 0;
    unint64_t v254 = v236;
    uint64_t v243 = 32766;
    unint64_t v244 = (unint64_t)"";
    while (1)
    {
      if (v247 + v700 > v248)
      {
        int v218 = 3491;
        goto LABEL_357;
      }
      LODWORD(v255) = 0;
      unint64_t v256 = v700;
      do
      {
        unint64_t v257 = 8 - (v247 & 7);
        if (v256 < v257) {
          unint64_t v257 = v256;
        }
        unint64_t v255 = (*(unsigned __int8 *)(v250 + (v247 >> 3)) >> (8 - (v247 & 7) - v257)) & ~(-1 << v257) | (v255 << v257);
        v247 += v257;
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v247;
        v256 -= v257;
      }
      while (v256);
      if (0x8E38E38E38E38E39 * ((uint64_t)(v246[24] - v246[23]) >> 4) <= v255)
      {
        int v218 = 3492;
        goto LABEL_357;
      }
      uint64_t v258 = v242 + (v253 << 6);
      *(void *)(v258 + 48) = v255;
      *(unsigned char *)(v258 + 13) = 1;
      if (v247 + 64 > v248)
      {
        int v218 = 3496;
        goto LABEL_357;
      }
      unint64_t v259 = 0;
      unint64_t v260 = 64;
      do
      {
        unint64_t v261 = 8 - (v247 & 7);
        if (v260 < v261) {
          unint64_t v261 = v260;
        }
        unint64_t v259 = (*(unsigned __int8 *)(v250 + (v247 >> 3)) >> (8 - (v247 & 7) - v261)) & (unint64_t)~(-1 << v261) | (v259 << v261);
        v247 += v261;
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v247;
        v260 -= v261;
      }
      while (v260);
      *(void *)(v242 + (v253 << 6)) = v259;
      if (v247 + 5 > v248) {
        break;
      }
      int v262 = 0;
      unint64_t v263 = 5;
      do
      {
        unint64_t v264 = 8 - (v247 & 7);
        if (v263 < v264) {
          unint64_t v264 = v263;
        }
        int v262 = (*(unsigned __int8 *)(v250 + (v247 >> 3)) >> (8 - (v247 & 7) - v264)) & ~(-1 << v264) | (v262 << v264);
        v247 += v264;
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v247;
        v263 -= v264;
      }
      while (v263);
      unint64_t v265 = (v262 + 1);
      if (v247 + v265 > v248) {
        break;
      }
      int v266 = 0;
      if (v265)
      {
        do
        {
          unint64_t v267 = 8 - (v247 & 7);
          if (v265 < v267) {
            unint64_t v267 = v265;
          }
          int v266 = (*(unsigned __int8 *)(v250 + (v247 >> 3)) >> (8 - (v247 & 7) - v267)) & ~(-1 << v267) | (v266 << v267);
          v247 += v267;
          *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v247;
          v265 -= v267;
        }
        while (v265);
        if (v266)
        {
          if (v247 + 1 > v248) {
            break;
          }
          unsigned int v268 = *(unsigned __int8 *)(v250 + (v247 >> 3));
          *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v247 + 1;
          if ((v268 >> (~(_BYTE)v247 & 7))) {
            int v266 = -v266;
          }
          ++v247;
          if (v266 > 32766)
          {
            int v218 = 3499;
            goto LABEL_357;
          }
        }
      }
      *(_DWORD *)(v242 + (v253 << 6) + 8) = v266;
      unint64_t v269 = v247 + 1;
      if (v247 + 1 > v248)
      {
        uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
        int v218 = 3503;
        goto LABEL_358;
      }
      unsigned int v270 = *(unsigned __int8 *)(v250 + (v247 >> 3));
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v269;
      if ((v270 >> (~(_BYTE)v247 & 7)))
      {
        if (v269 + v685 > v248)
        {
          int v218 = 3507;
          goto LABEL_357;
        }
        unsigned int v271 = v685;
        if (v685)
        {
          unsigned int v271 = 0;
          unint64_t v272 = v685;
          do
          {
            unint64_t v273 = 8 - (v269 & 7);
            if (v272 < v273) {
              unint64_t v273 = v272;
            }
            unsigned int v271 = (*(unsigned __int8 *)(v250 + (v269 >> 3)) >> (8 - (v269 & 7) - v273)) & ~(-1 << v273) | (v271 << v273);
            v269 += v273;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v269;
            v272 -= v273;
          }
          while (v272);
          if (v269 + v685 > v248)
          {
            int v218 = 3508;
            goto LABEL_357;
          }
          unsigned int v274 = 0;
          unint64_t v275 = v685;
          do
          {
            unint64_t v276 = 8 - (v269 & 7);
            if (v275 < v276) {
              unint64_t v276 = v275;
            }
            unsigned int v274 = (*(unsigned __int8 *)(v250 + (v269 >> 3)) >> (8 - (v269 & 7) - v276)) & ~(-1 << v276) | (v274 << v276);
            v269 += v276;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v269;
            v275 -= v276;
          }
          while (v275);
        }
        else
        {
          unsigned int v274 = 0;
        }
        if (v697 <= v271)
        {
          int v218 = 3509;
          goto LABEL_357;
        }
        if (v697 <= v274)
        {
          int v218 = 3510;
          goto LABEL_357;
        }
        *(void *)(v242 + (v253 << 6) + 32) = v696 + v271;
        uint64_t v277 = (const char *)(v696 + v274);
      }
      else
      {
        *(void *)(v242 + (v253 << 6) + 32) = "";
        uint64_t v277 = "";
      }
      unint64_t v247 = v269;
      unsigned int v245 = (const char *)(v242 + (v253 << 6));
      *((void *)v245 + 3) = v277;
      if (++v253 == v236) {
        goto LABEL_428;
      }
    }
    int v218 = 3498;
    goto LABEL_357;
  }
  unint64_t v254 = 0;
LABEL_428:
  unint64_t v278 = v246[31];
  if (v278 > v254)
  {
    uint64_t v243 = 7;
    unint64_t v244 = 32766;
    unsigned int v245 = "";
    while (1)
    {
      if (v247 + v687 > v248)
      {
        int v218 = 3521;
        goto LABEL_357;
      }
      if (v687)
      {
        unsigned int v279 = 0;
        unint64_t v280 = v687;
        do
        {
          unint64_t v281 = 8 - (v247 & 7);
          if (v280 < v281) {
            unint64_t v281 = v280;
          }
          unsigned int v279 = (*(unsigned __int8 *)(v250 + (v247 >> 3)) >> (8 - (v247 & 7) - v281)) & ~(-1 << v281) | (v279 << v281);
          v247 += v281;
          *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v247;
          v280 -= v281;
        }
        while (v280);
      }
      else
      {
        unsigned int v279 = 0;
      }
      unint64_t v282 = v279;
      uint64_t v283 = v246[27];
      if (0x86BCA1AF286BCA1BLL * ((v246[28] - v283) >> 3) <= v282)
      {
        int v218 = 3522;
        goto LABEL_357;
      }
      uint64_t v284 = v242 + (v254 << 6);
      *(void *)(v284 + 56) = v282;
      *(void *)(v284 + 48) = *(void *)(v283 + 152 * v282 + 144);
      *(unsigned char *)(v284 + 13) = 0;
      if (v247 + 64 > v248)
      {
        int v218 = 3527;
        goto LABEL_357;
      }
      unint64_t v285 = 0;
      unint64_t v286 = 64;
      do
      {
        unint64_t v287 = 8 - (v247 & 7);
        if (v286 < v287) {
          unint64_t v287 = v286;
        }
        unint64_t v285 = (*(unsigned __int8 *)(v250 + (v247 >> 3)) >> (8 - (v247 & 7) - v287)) & (unint64_t)~(-1 << v287) | (v285 << v287);
        v247 += v287;
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v247;
        v286 -= v287;
      }
      while (v286);
      *(void *)(v242 + (v254 << 6)) = v285;
      if (v247 + 5 > v248) {
        break;
      }
      int v288 = 0;
      unint64_t v289 = 5;
      do
      {
        unint64_t v290 = 8 - (v247 & 7);
        if (v289 < v290) {
          unint64_t v290 = v289;
        }
        int v288 = (*(unsigned __int8 *)(v250 + (v247 >> 3)) >> (8 - (v247 & 7) - v290)) & ~(-1 << v290) | (v288 << v290);
        v247 += v290;
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v247;
        v289 -= v290;
      }
      while (v289);
      unint64_t v291 = (v288 + 1);
      if (v247 + v291 > v248) {
        break;
      }
      int v292 = 0;
      if (v291)
      {
        do
        {
          unint64_t v293 = 8 - (v247 & 7);
          if (v291 < v293) {
            unint64_t v293 = v291;
          }
          int v292 = (*(unsigned __int8 *)(v250 + (v247 >> 3)) >> (8 - (v247 & 7) - v293)) & ~(-1 << v293) | (v292 << v293);
          v247 += v293;
          *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v247;
          v291 -= v293;
        }
        while (v291);
        if (v292)
        {
          if (v247 + 1 > v248) {
            break;
          }
          unsigned int v294 = *(unsigned __int8 *)(v250 + (v247 >> 3));
          *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v247 + 1;
          if ((v294 >> (~(_BYTE)v247 & 7))) {
            int v292 = -v292;
          }
          ++v247;
          if (v292 > 32766)
          {
            int v218 = 3530;
            goto LABEL_357;
          }
        }
      }
      *(_DWORD *)(v242 + (v254 << 6) + 8) = v292;
      unint64_t v295 = v247 + 1;
      if (v247 + 1 > v248)
      {
        uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
        int v218 = 3534;
        goto LABEL_358;
      }
      unsigned int v296 = *(unsigned __int8 *)(v250 + (v247 >> 3));
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v295;
      if ((v296 >> (~(_BYTE)v247 & 7)))
      {
        if (v295 + v685 > v248)
        {
          int v218 = 3538;
          goto LABEL_357;
        }
        unsigned int v297 = v685;
        if (v685)
        {
          unsigned int v297 = 0;
          unint64_t v298 = v685;
          do
          {
            unint64_t v299 = 8 - (v295 & 7);
            if (v298 < v299) {
              unint64_t v299 = v298;
            }
            unsigned int v297 = (*(unsigned __int8 *)(v250 + (v295 >> 3)) >> (8 - (v295 & 7) - v299)) & ~(-1 << v299) | (v297 << v299);
            v295 += v299;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v295;
            v298 -= v299;
          }
          while (v298);
          if (v295 + v685 > v248)
          {
            int v218 = 3539;
            goto LABEL_357;
          }
          unsigned int v300 = 0;
          unint64_t v301 = v685;
          do
          {
            unint64_t v302 = 8 - (v295 & 7);
            if (v301 < v302) {
              unint64_t v302 = v301;
            }
            unsigned int v300 = (*(unsigned __int8 *)(v250 + (v295 >> 3)) >> (8 - (v295 & 7) - v302)) & ~(-1 << v302) | (v300 << v302);
            v295 += v302;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v295;
            v301 -= v302;
          }
          while (v301);
        }
        else
        {
          unsigned int v300 = 0;
        }
        if (v697 <= v297)
        {
          int v218 = 3540;
          goto LABEL_357;
        }
        if (v697 <= v300)
        {
          int v218 = 3541;
          goto LABEL_357;
        }
        *(void *)(v242 + (v254 << 6) + 32) = v696 + v297;
        unint64_t v303 = (const char *)(v696 + v300);
      }
      else
      {
        *(void *)(v242 + (v254 << 6) + 32) = "";
        unint64_t v303 = "";
      }
      *(void *)(v242 + (v254 << 6) + 24) = v303;
      unint64_t v247 = v295;
      unint64_t v254 = ++v236;
      if (v278 <= v236) {
        goto LABEL_481;
      }
    }
    int v218 = 3529;
    goto LABEL_357;
  }
  unint64_t v295 = v247;
LABEL_481:
  if (v295 + 5 > v248) {
    goto LABEL_487;
  }
  int v304 = 0;
  unint64_t v305 = 5;
  do
  {
    unint64_t v306 = 8 - (v295 & 7);
    if (v305 < v306) {
      unint64_t v306 = v305;
    }
    int v304 = (*(unsigned __int8 *)(v250 + (v295 >> 3)) >> (8 - (v295 & 7) - v306)) & ~(-1 << v306) | (v304 << v306);
    v295 += v306;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v295;
    v305 -= v306;
  }
  while (v305);
  unint64_t v307 = (v304 + 1);
  if (v295 + v307 > v248)
  {
LABEL_487:
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3551;
    goto LABEL_358;
  }
  if (v304 != -1)
  {
    int v308 = 0;
    do
    {
      unint64_t v309 = 8 - (v295 & 7);
      if (v307 < v309) {
        unint64_t v309 = v307;
      }
      int v308 = (*(unsigned __int8 *)(v250 + (v295 >> 3)) >> (8 - (v295 & 7) - v309)) & ~(-1 << v309) | (v308 << v309);
      v295 += v309;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v295;
      v307 -= v309;
    }
    while (v307);
    if (v308)
    {
      int v310 = 0;
      while (v295 + v692 <= v248)
      {
        unsigned int v311 = v692;
        if (v692)
        {
          unsigned int v311 = 0;
          unint64_t v312 = v692;
          do
          {
            unint64_t v313 = 8 - (v295 & 7);
            if (v312 < v313) {
              unint64_t v313 = v312;
            }
            unsigned int v311 = (*(unsigned __int8 *)(v250 + (v295 >> 3)) >> (8 - (v295 & 7) - v313)) & ~(-1 << v313) | (v311 << v313);
            v295 += v313;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v295;
            v312 -= v313;
          }
          while (v312);
        }
        if (v278 <= v311)
        {
          int v218 = 3555;
          goto LABEL_357;
        }
        if (v295 + v686 > v248)
        {
          int v218 = 3557;
          goto LABEL_357;
        }
        if (v686)
        {
          unsigned int v314 = 0;
          unint64_t v315 = v686;
          do
          {
            unint64_t v316 = 8 - (v295 & 7);
            if (v315 < v316) {
              unint64_t v316 = v315;
            }
            unsigned int v314 = (*(unsigned __int8 *)(v250 + (v295 >> 3)) >> (8 - (v295 & 7) - v316)) & ~(-1 << v316) | (v314 << v316);
            v295 += v316;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v295;
            v315 -= v316;
          }
          while (v315);
        }
        else
        {
          unsigned int v314 = 0;
        }
        unint64_t v244 = v314;
        unsigned int v245 = (const char *)v246[12];
        if (v244 >= (uint64_t)(v246[13] - (void)v245) >> 7)
        {
          int v218 = 3558;
          goto LABEL_357;
        }
        unint64_t v317 = v242 + ((unint64_t)v311 << 6);
        *(unsigned char *)(v317 + 12) = 1;
        *(void *)(v317 + 16) = v244;
        uint64_t v243 = (uint64_t)&v245[128 * v244];
        *(unsigned char *)(v243 + 127) = 3;
        *(_DWORD *)(v243 + 120) = v311;
        if (++v310 == v308) {
          goto LABEL_529;
        }
      }
      int v218 = 3554;
      goto LABEL_357;
    }
  }
LABEL_529:
  if (v295 + 5 > v248) {
    goto LABEL_535;
  }
  int v318 = 0;
  unint64_t v319 = 5;
  do
  {
    unint64_t v320 = 8 - (v295 & 7);
    if (v319 < v320) {
      unint64_t v320 = v319;
    }
    int v318 = (*(unsigned __int8 *)(v250 + (v295 >> 3)) >> (8 - (v295 & 7) - v320)) & ~(-1 << v320) | (v318 << v320);
    v295 += v320;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v295;
    v319 -= v320;
  }
  while (v319);
  unint64_t v321 = (v318 + 1);
  if (v295 + v321 > v248)
  {
LABEL_535:
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3567;
    goto LABEL_358;
  }
  if (v318 != -1)
  {
    int v322 = 0;
    do
    {
      unint64_t v323 = 8 - (v295 & 7);
      if (v321 < v323) {
        unint64_t v323 = v321;
      }
      int v322 = (*(unsigned __int8 *)(v250 + (v295 >> 3)) >> (8 - (v295 & 7) - v323)) & ~(-1 << v323) | (v322 << v323);
      v295 += v323;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v295;
      v321 -= v323;
    }
    while (v321);
    if (v322)
    {
      int v324 = 0;
      uint64_t v243 = 0xFFFFFFFFLL;
      while (v295 + v692 <= v248)
      {
        if (v692)
        {
          unsigned int v325 = 0;
          unint64_t v326 = v692;
          do
          {
            unint64_t v327 = 8 - (v295 & 7);
            if (v326 < v327) {
              unint64_t v327 = v326;
            }
            unsigned int v325 = (*(unsigned __int8 *)(v250 + (v295 >> 3)) >> (8 - (v295 & 7) - v327)) & ~(-1 << v327) | (v325 << v327);
            v295 += v327;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v295;
            v326 -= v327;
          }
          while (v326);
        }
        else
        {
          unsigned int v325 = 0;
        }
        uint64_t v328 = v325;
        if (v278 <= v325)
        {
          int v218 = 3571;
          goto LABEL_357;
        }
        if (v295 + v688 > v248)
        {
          int v218 = 3573;
          goto LABEL_357;
        }
        if (v688)
        {
          unsigned int v329 = 0;
          unint64_t v330 = v688;
          do
          {
            unint64_t v331 = 8 - (v295 & 7);
            if (v330 < v331) {
              unint64_t v331 = v330;
            }
            unsigned int v329 = (*(unsigned __int8 *)(v250 + (v295 >> 3)) >> (8 - (v295 & 7) - v331)) & ~(-1 << v331) | (v329 << v331);
            v295 += v331;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v295;
            v330 -= v331;
          }
          while (v330);
        }
        else
        {
          unsigned int v329 = 0;
        }
        unint64_t v332 = v329;
        uint64_t v333 = v246[63];
        if (0x6DB6DB6DB6DB6DB7 * ((v246[64] - v333) >> 5) <= v332)
        {
          int v218 = 3574;
          goto LABEL_357;
        }
        uint64_t v334 = v242 + (v328 << 6);
        uint64_t v335 = *(void *)(v334 + 56);
        uint64_t v336 = v246[27];
        unsigned int v245 = (const char *)(v333 + 224 * v332);
        *((void *)v245 + 17) = *(void *)v334;
        *((_WORD *)v245 + 76) = *(_DWORD *)(v334 + 8);
        uint64_t v337 = v336 + 152 * v335;
        *((void *)v245 + 16) = *(void *)(v337 + 104);
        unint64_t v244 = *(void *)(v246[23] + 144 * *(void *)(v337 + 144) + 104);
        *((void *)v245 + 15) = v244;
        if (++v324 == v322) {
          goto LABEL_575;
        }
      }
      int v218 = 3570;
      goto LABEL_357;
    }
  }
LABEL_575:
  if (v295 + 5 > v248) {
    goto LABEL_581;
  }
  int v338 = 0;
  unint64_t v339 = 5;
  do
  {
    unint64_t v340 = 8 - (v295 & 7);
    if (v339 < v340) {
      unint64_t v340 = v339;
    }
    int v338 = (*(unsigned __int8 *)(v250 + (v295 >> 3)) >> (8 - (v295 & 7) - v340)) & ~(-1 << v340) | (v338 << v340);
    v295 += v340;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v295;
    v339 -= v340;
  }
  while (v339);
  unint64_t v341 = (v338 + 1);
  if (v295 + v341 > v248)
  {
LABEL_581:
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3586;
    goto LABEL_358;
  }
  unsigned int v342 = 0;
  if (v338 != -1)
  {
    do
    {
      unint64_t v343 = 8 - (v295 & 7);
      if (v341 < v343) {
        unint64_t v343 = v341;
      }
      unsigned int v342 = (*(unsigned __int8 *)(v250 + (v295 >> 3)) >> (8 - (v295 & 7) - v343)) & ~(-1 << v343) | (v342 << v343);
      v295 += v343;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v295;
      v341 -= v343;
    }
    while (v341);
  }
  v246[33] = v342;
  {
    operator new();
  }
  uint64_t v344 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, unint64_t, const char *))(*(void *)geo::codec::Allocator::instance(void)::alloc + 24))(geo::codec::Allocator::instance(void)::alloc, *(void *)(*a3 + 264), 56, v243, v244, v245);
  uint64_t v345 = *a3;
  *(void *)(*a3 + 272) = v344;
  unint64_t v346 = *(void *)(v9 + 24);
  unint64_t v347 = 8 * *(void *)(v9 + 16);
  if (v346 + 5 > v347)
  {
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3593;
    goto LABEL_358;
  }
  int v348 = 0;
  uint64_t v349 = *(void *)v701;
  unint64_t v350 = 5;
  do
  {
    unint64_t v351 = 8 - (v346 & 7);
    if (v350 < v351) {
      unint64_t v351 = v350;
    }
    int v348 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v351)) & ~(-1 << v351) | (v348 << v351);
    v346 += v351;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
    v350 -= v351;
  }
  while (v350);
  unint64_t v352 = (v348 + 1);
  if (v346 + v352 > v347)
  {
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3596;
    goto LABEL_358;
  }
  LODWORD(v353) = 0;
  if (v352)
  {
    unint64_t v354 = v352;
    do
    {
      unint64_t v355 = 8 - (v346 & 7);
      if (v354 < v355) {
        unint64_t v355 = v354;
      }
      uint64_t v353 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v355)) & ~(-1 << v355) | (v353 << v355);
      v346 += v355;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
      v354 -= v355;
    }
    while (v354);
    if (v353)
    {
      unint64_t v356 = 0;
      while (v346 + v692 <= v347)
      {
        if (v692)
        {
          unsigned int v357 = 0;
          unint64_t v358 = v692;
          do
          {
            unint64_t v359 = 8 - (v346 & 7);
            if (v358 < v359) {
              unint64_t v359 = v358;
            }
            unsigned int v357 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v359)) & ~(-1 << v359) | (v357 << v359);
            v346 += v359;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
            v358 -= v359;
          }
          while (v358);
        }
        else
        {
          unsigned int v357 = 0;
        }
        if (*(void *)(v345 + 248) <= (unint64_t)v357)
        {
          int v218 = 3600;
          goto LABEL_357;
        }
        if (*(void *)(v345 + 264) <= v356)
        {
          int v218 = 3601;
          goto LABEL_357;
        }
        uint64_t v360 = v344 + 56 * v356;
        *(unsigned char *)(v360 + 8) = 1;
        *(void *)(v360 + 48) = v357;
        *(unsigned char *)(v360 + 32) = 0;
        if (v346 + 64 > v347)
        {
          int v218 = 3606;
          goto LABEL_357;
        }
        unint64_t v361 = 0;
        unint64_t v362 = 64;
        do
        {
          unint64_t v363 = 8 - (v346 & 7);
          if (v362 < v363) {
            unint64_t v363 = v362;
          }
          unint64_t v361 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v363)) & (unint64_t)~(-1 << v363) | (v361 << v363);
          v346 += v363;
          *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
          v362 -= v363;
        }
        while (v362);
        *(void *)uint64_t v360 = v361;
        if (++v356 == v353) {
          goto LABEL_628;
        }
      }
      int v218 = 3599;
      goto LABEL_357;
    }
  }
LABEL_628:
  if (v346 + 5 > v347) {
    goto LABEL_634;
  }
  int v364 = 0;
  unint64_t v365 = 5;
  do
  {
    unint64_t v366 = 8 - (v346 & 7);
    if (v365 < v366) {
      unint64_t v366 = v365;
    }
    int v364 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v366)) & ~(-1 << v366) | (v364 << v366);
    v346 += v366;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
    v365 -= v366;
  }
  while (v365);
  unint64_t v367 = (v364 + 1);
  if (v346 + v367 > v347)
  {
LABEL_634:
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3610;
    goto LABEL_358;
  }
  if (v364 != -1)
  {
    int v368 = 0;
    do
    {
      unint64_t v369 = 8 - (v346 & 7);
      if (v367 < v369) {
        unint64_t v369 = v367;
      }
      int v368 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v369)) & ~(-1 << v369) | (v368 << v369);
      v346 += v369;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
      v367 -= v369;
    }
    while (v367);
    if (v368)
    {
      int v370 = 0;
      while (v346 + v352 <= v347)
      {
        unsigned int v371 = 0;
        if (v352)
        {
          unint64_t v372 = v352;
          do
          {
            unint64_t v373 = 8 - (v346 & 7);
            if (v372 < v373) {
              unint64_t v373 = v372;
            }
            unsigned int v371 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v373)) & ~(-1 << v373) | (v371 << v373);
            v346 += v373;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
            v372 -= v373;
          }
          while (v372);
        }
        if (v346 + v686 > v347)
        {
          int v218 = 3616;
          goto LABEL_357;
        }
        unsigned int v374 = v686;
        if (v686)
        {
          unsigned int v374 = 0;
          unint64_t v375 = v686;
          do
          {
            unint64_t v376 = 8 - (v346 & 7);
            if (v375 < v376) {
              unint64_t v376 = v375;
            }
            unsigned int v374 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v376)) & ~(-1 << v376) | (v374 << v376);
            v346 += v376;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
            v375 -= v376;
          }
          while (v375);
        }
        if (v371 >= v353)
        {
          int v218 = 3617;
          goto LABEL_357;
        }
        uint64_t v377 = *(void *)(v345 + 96);
        if (v374 >= (unint64_t)((*(void *)(v345 + 104) - v377) >> 7))
        {
          int v218 = 3618;
          goto LABEL_357;
        }
        uint64_t v378 = v377 + ((unint64_t)v374 << 7);
        *(unsigned char *)(v378 + 127) = 2;
        *(_DWORD *)(v378 + 120) = v371;
        if (++v370 == v368) {
          goto LABEL_661;
        }
      }
      int v218 = 3615;
      goto LABEL_357;
    }
  }
LABEL_661:
  if (v346 + 5 > v347)
  {
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3625;
    goto LABEL_358;
  }
  int v379 = 0;
  unint64_t v380 = 5;
  do
  {
    unint64_t v381 = 8 - (v346 & 7);
    if (v380 < v381) {
      unint64_t v381 = v380;
    }
    int v379 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v381)) & ~(-1 << v381) | (v379 << v381);
    v346 += v381;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
    v380 -= v381;
  }
  while (v380);
  unint64_t v382 = (v379 + 1);
  if (v346 + v382 > v347)
  {
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3628;
    goto LABEL_358;
  }
  unsigned int v383 = 0;
  if (v379 != -1)
  {
    unint64_t v384 = (v379 + 1);
    do
    {
      unint64_t v385 = 8 - (v346 & 7);
      if (v384 < v385) {
        unint64_t v385 = v384;
      }
      unsigned int v383 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v385)) & ~(-1 << v385) | (v383 << v385);
      v346 += v385;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
      v384 -= v385;
    }
    while (v384);
    if (v383)
    {
      int v386 = 0;
      unsigned int v387 = v353;
      while (v346 + v692 <= v347)
      {
        if (v692)
        {
          unsigned int v388 = 0;
          unint64_t v389 = v692;
          do
          {
            unint64_t v390 = 8 - (v346 & 7);
            if (v389 < v390) {
              unint64_t v390 = v389;
            }
            unsigned int v388 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v390)) & ~(-1 << v390) | (v388 << v390);
            v346 += v390;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
            v389 -= v390;
          }
          while (v389);
        }
        else
        {
          unsigned int v388 = 0;
        }
        if (*(void *)(v345 + 248) <= (unint64_t)v388)
        {
          int v218 = 3632;
          goto LABEL_357;
        }
        if (*(void *)(v345 + 264) <= (unint64_t)v387)
        {
          int v218 = 3633;
          goto LABEL_357;
        }
        uint64_t v391 = v344 + 56 * v387;
        *(unsigned char *)(v391 + 8) = 2;
        *(void *)(v391 + 48) = v388;
        *(unsigned char *)(v391 + 32) = 0;
        if (v346 + 64 > v347)
        {
          int v218 = 3638;
          goto LABEL_357;
        }
        unint64_t v392 = 0;
        unint64_t v393 = 64;
        do
        {
          unint64_t v394 = 8 - (v346 & 7);
          if (v393 < v394) {
            unint64_t v394 = v393;
          }
          unint64_t v392 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v394)) & (unint64_t)~(-1 << v394) | (v392 << v394);
          v346 += v394;
          *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
          v393 -= v394;
        }
        while (v393);
        *(void *)uint64_t v391 = v392;
        ++v386;
        ++v387;
        if (v386 == v383) {
          goto LABEL_698;
        }
      }
      int v218 = 3631;
      goto LABEL_357;
    }
  }
  unsigned int v387 = v353;
LABEL_698:
  if (v346 + 5 > v347) {
    goto LABEL_704;
  }
  int v395 = 0;
  unint64_t v396 = 5;
  do
  {
    unint64_t v397 = 8 - (v346 & 7);
    if (v396 < v397) {
      unint64_t v397 = v396;
    }
    int v395 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v397)) & ~(-1 << v397) | (v395 << v397);
    v346 += v397;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
    v396 -= v397;
  }
  while (v396);
  unint64_t v398 = (v395 + 1);
  if (v346 + v398 > v347)
  {
LABEL_704:
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3642;
    goto LABEL_358;
  }
  if (v395 != -1)
  {
    int v399 = 0;
    do
    {
      unint64_t v400 = 8 - (v346 & 7);
      if (v398 < v400) {
        unint64_t v400 = v398;
      }
      int v399 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v400)) & ~(-1 << v400) | (v399 << v400);
      v346 += v400;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
      v398 -= v400;
    }
    while (v398);
    if (v399)
    {
      int v401 = 0;
      while (v346 + v382 <= v347)
      {
        unsigned int v402 = 0;
        if (v382)
        {
          unint64_t v403 = v382;
          do
          {
            unint64_t v404 = 8 - (v346 & 7);
            if (v403 < v404) {
              unint64_t v404 = v403;
            }
            unsigned int v402 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v404)) & ~(-1 << v404) | (v402 << v404);
            v346 += v404;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
            v403 -= v404;
          }
          while (v403);
        }
        if (v346 + v688 > v347)
        {
          int v218 = 3648;
          goto LABEL_357;
        }
        if (v688)
        {
          unsigned int v405 = 0;
          unint64_t v406 = v688;
          do
          {
            unint64_t v407 = 8 - (v346 & 7);
            if (v406 < v407) {
              unint64_t v407 = v406;
            }
            unsigned int v405 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v407)) & ~(-1 << v407) | (v405 << v407);
            v346 += v407;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
            v406 -= v407;
          }
          while (v406);
        }
        else
        {
          unsigned int v405 = 0;
        }
        if (v402 >= v383)
        {
          int v218 = 3649;
          goto LABEL_357;
        }
        uint64_t v408 = *(void *)(v345 + 504);
        if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(v345 + 512) - v408) >> 5) <= (unint64_t)v405)
        {
          int v218 = 3650;
          goto LABEL_357;
        }
        uint64_t v409 = v344 + 56 * v353 + 56 * v402;
        *(unsigned char *)(v409 + 32) = 1;
        *(void *)(v409 + 40) = v405;
        uint64_t v410 = *(void *)(v345 + 256) + (*(void *)(v409 + 48) << 6);
        uint64_t v411 = *(void *)(v345 + 216) + 152 * *(void *)(v410 + 56);
        uint64_t v412 = v408 + 224 * v405;
        *(void *)(v412 + 120) = *(void *)(*(void *)(v345 + 184) + 144 * *(void *)(v411 + 144) + 104);
        *(void *)(v412 + 128) = *(void *)(v411 + 104);
        *(void *)(v412 + 136) = *(void *)v410;
        *(void *)(v412 + 144) = *(void *)v409;
        *(_WORD *)(v412 + 152) = *(_DWORD *)(v410 + 8);
        *(unsigned char *)(v412 + 156) = 2;
        if (++v401 == v399) {
          goto LABEL_735;
        }
      }
      int v218 = 3647;
      goto LABEL_357;
    }
  }
LABEL_735:
  if (v346 + 5 > v347) {
    goto LABEL_741;
  }
  int v413 = 0;
  unint64_t v414 = 5;
  do
  {
    unint64_t v415 = 8 - (v346 & 7);
    if (v414 < v415) {
      unint64_t v415 = v414;
    }
    int v413 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v415)) & ~(-1 << v415) | (v413 << v415);
    v346 += v415;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
    v414 -= v415;
  }
  while (v414);
  unint64_t v416 = (v413 + 1);
  if (v346 + v416 > v347)
  {
LABEL_741:
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3667;
    goto LABEL_358;
  }
  if (v413 != -1)
  {
    int v417 = 0;
    do
    {
      unint64_t v418 = 8 - (v346 & 7);
      if (v416 < v418) {
        unint64_t v418 = v416;
      }
      int v417 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v418)) & ~(-1 << v418) | (v417 << v418);
      v346 += v418;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
      v416 -= v418;
    }
    while (v416);
    if (v417)
    {
      int v419 = 0;
      while (v346 + v382 <= v347)
      {
        unsigned int v420 = 0;
        if (v382)
        {
          unint64_t v421 = v382;
          do
          {
            unint64_t v422 = 8 - (v346 & 7);
            if (v421 < v422) {
              unint64_t v422 = v421;
            }
            unsigned int v420 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v422)) & ~(-1 << v422) | (v420 << v422);
            v346 += v422;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
            v421 -= v422;
          }
          while (v421);
        }
        if (v346 + v686 > v347)
        {
          int v218 = 3673;
          goto LABEL_357;
        }
        unsigned int v423 = v686;
        if (v686)
        {
          unsigned int v423 = 0;
          unint64_t v424 = v686;
          do
          {
            unint64_t v425 = 8 - (v346 & 7);
            if (v424 < v425) {
              unint64_t v425 = v424;
            }
            unsigned int v423 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v425)) & ~(-1 << v425) | (v423 << v425);
            v346 += v425;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
            v424 -= v425;
          }
          while (v424);
        }
        if (v420 >= v383)
        {
          int v218 = 3674;
          goto LABEL_357;
        }
        uint64_t v426 = *(void *)(v345 + 96);
        if (v423 >= (unint64_t)((*(void *)(v345 + 104) - v426) >> 7))
        {
          int v218 = 3675;
          goto LABEL_357;
        }
        uint64_t v427 = v426 + ((unint64_t)v423 << 7);
        *(unsigned char *)(v427 + 127) = 2;
        *(_DWORD *)(v427 + 120) = v420 + v353;
        if (++v419 == v417) {
          goto LABEL_768;
        }
      }
      int v218 = 3672;
      goto LABEL_357;
    }
  }
LABEL_768:
  if (v346 + 5 > v347)
  {
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3682;
    goto LABEL_358;
  }
  int v428 = 0;
  unint64_t v429 = 5;
  do
  {
    unint64_t v430 = 8 - (v346 & 7);
    if (v429 < v430) {
      unint64_t v430 = v429;
    }
    int v428 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v430)) & ~(-1 << v430) | (v428 << v430);
    v346 += v430;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
    v429 -= v430;
  }
  while (v429);
  unint64_t v431 = (v428 + 1);
  if (v346 + v431 > v347)
  {
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3685;
    goto LABEL_358;
  }
  unsigned int v432 = 0;
  if (v428 != -1)
  {
    unint64_t v433 = (v428 + 1);
    do
    {
      unint64_t v434 = 8 - (v346 & 7);
      if (v433 < v434) {
        unint64_t v434 = v433;
      }
      unsigned int v432 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v434)) & ~(-1 << v434) | (v432 << v434);
      v346 += v434;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
      v433 -= v434;
    }
    while (v433);
    if (v432)
    {
      int v435 = 0;
      unsigned int v436 = v387;
      while (v346 + v692 <= v347)
      {
        if (v692)
        {
          unsigned int v437 = 0;
          unint64_t v438 = v692;
          do
          {
            unint64_t v439 = 8 - (v346 & 7);
            if (v438 < v439) {
              unint64_t v439 = v438;
            }
            unsigned int v437 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v439)) & ~(-1 << v439) | (v437 << v439);
            v346 += v439;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
            v438 -= v439;
          }
          while (v438);
        }
        else
        {
          unsigned int v437 = 0;
        }
        if (*(void *)(v345 + 248) <= (unint64_t)v437)
        {
          int v218 = 3689;
          goto LABEL_357;
        }
        if (*(void *)(v345 + 264) <= (unint64_t)v436)
        {
          int v218 = 3690;
          goto LABEL_357;
        }
        uint64_t v440 = v344 + 56 * v436;
        *(unsigned char *)(v440 + 8) = 3;
        *(void *)(v440 + 48) = v437;
        *(unsigned char *)(v440 + 32) = 0;
        if (v346 + 64 > v347)
        {
          int v218 = 3695;
          goto LABEL_357;
        }
        unint64_t v441 = 0;
        unint64_t v442 = 64;
        do
        {
          unint64_t v443 = 8 - (v346 & 7);
          if (v442 < v443) {
            unint64_t v443 = v442;
          }
          unint64_t v441 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v443)) & (unint64_t)~(-1 << v443) | (v441 << v443);
          v346 += v443;
          *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
          v442 -= v443;
        }
        while (v442);
        *(void *)uint64_t v440 = v441;
        ++v435;
        ++v436;
        if (v435 == v432) {
          goto LABEL_805;
        }
      }
      int v218 = 3688;
      goto LABEL_357;
    }
  }
  unsigned int v436 = v387;
LABEL_805:
  if (v346 + 5 > v347) {
    goto LABEL_811;
  }
  int v444 = 0;
  unint64_t v445 = 5;
  do
  {
    unint64_t v446 = 8 - (v346 & 7);
    if (v445 < v446) {
      unint64_t v446 = v445;
    }
    int v444 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v446)) & ~(-1 << v446) | (v444 << v446);
    v346 += v446;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
    v445 -= v446;
  }
  while (v445);
  unint64_t v447 = (v444 + 1);
  if (v346 + v447 > v347)
  {
LABEL_811:
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3699;
    goto LABEL_358;
  }
  if (v444 != -1)
  {
    int v448 = 0;
    do
    {
      unint64_t v449 = 8 - (v346 & 7);
      if (v447 < v449) {
        unint64_t v449 = v447;
      }
      int v448 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v449)) & ~(-1 << v449) | (v448 << v449);
      v346 += v449;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
      v447 -= v449;
    }
    while (v447);
    if (v448)
    {
      int v450 = 0;
      while (v346 + v431 <= v347)
      {
        unsigned int v451 = 0;
        if (v431)
        {
          unint64_t v452 = v431;
          do
          {
            unint64_t v453 = 8 - (v346 & 7);
            if (v452 < v453) {
              unint64_t v453 = v452;
            }
            unsigned int v451 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v453)) & ~(-1 << v453) | (v451 << v453);
            v346 += v453;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
            v452 -= v453;
          }
          while (v452);
        }
        if (v346 + v688 > v347)
        {
          int v218 = 3705;
          goto LABEL_357;
        }
        if (v688)
        {
          unsigned int v454 = 0;
          unint64_t v455 = v688;
          do
          {
            unint64_t v456 = 8 - (v346 & 7);
            if (v455 < v456) {
              unint64_t v456 = v455;
            }
            unsigned int v454 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v456)) & ~(-1 << v456) | (v454 << v456);
            v346 += v456;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
            v455 -= v456;
          }
          while (v455);
        }
        else
        {
          unsigned int v454 = 0;
        }
        if (v451 >= v432)
        {
          int v218 = 3706;
          goto LABEL_357;
        }
        uint64_t v457 = *(void *)(v345 + 504);
        if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(v345 + 512) - v457) >> 5) <= (unint64_t)v454)
        {
          int v218 = 3707;
          goto LABEL_357;
        }
        uint64_t v458 = v344 + 56 * v387 + 56 * v451;
        *(unsigned char *)(v458 + 32) = 1;
        *(void *)(v458 + 40) = v454;
        uint64_t v459 = *(void *)(v345 + 256) + (*(void *)(v458 + 48) << 6);
        uint64_t v460 = *(void *)(v345 + 216) + 152 * *(void *)(v459 + 56);
        uint64_t v461 = v457 + 224 * v454;
        *(void *)(v461 + 120) = *(void *)(*(void *)(v345 + 184) + 144 * *(void *)(v460 + 144) + 104);
        *(void *)(v461 + 128) = *(void *)(v460 + 104);
        *(void *)(v461 + 136) = *(void *)v459;
        *(void *)(v461 + 144) = *(void *)v458;
        *(_WORD *)(v461 + 152) = *(_DWORD *)(v459 + 8);
        *(unsigned char *)(v461 + 156) = 3;
        if (++v450 == v448) {
          goto LABEL_840;
        }
      }
      int v218 = 3704;
      goto LABEL_357;
    }
  }
LABEL_840:
  if (v346 + 5 > v347) {
    goto LABEL_846;
  }
  int v462 = 0;
  unint64_t v463 = 5;
  do
  {
    unint64_t v464 = 8 - (v346 & 7);
    if (v463 < v464) {
      unint64_t v464 = v463;
    }
    int v462 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v464)) & ~(-1 << v464) | (v462 << v464);
    v346 += v464;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
    v463 -= v464;
  }
  while (v463);
  unint64_t v465 = (v462 + 1);
  if (v346 + v465 > v347)
  {
LABEL_846:
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3724;
    goto LABEL_358;
  }
  if (v462 != -1)
  {
    int v466 = 0;
    do
    {
      unint64_t v467 = 8 - (v346 & 7);
      if (v465 < v467) {
        unint64_t v467 = v465;
      }
      int v466 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v467)) & ~(-1 << v467) | (v466 << v467);
      v346 += v467;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
      v465 -= v467;
    }
    while (v465);
    if (v466)
    {
      int v468 = 0;
      while (v346 + v431 <= v347)
      {
        unsigned int v469 = 0;
        if (v431)
        {
          unint64_t v470 = v431;
          do
          {
            unint64_t v471 = 8 - (v346 & 7);
            if (v470 < v471) {
              unint64_t v471 = v470;
            }
            unsigned int v469 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v471)) & ~(-1 << v471) | (v469 << v471);
            v346 += v471;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
            v470 -= v471;
          }
          while (v470);
        }
        if (v346 + v686 > v347)
        {
          int v218 = 3730;
          goto LABEL_357;
        }
        unsigned int v472 = v686;
        if (v686)
        {
          unsigned int v472 = 0;
          unint64_t v473 = v686;
          do
          {
            unint64_t v474 = 8 - (v346 & 7);
            if (v473 < v474) {
              unint64_t v474 = v473;
            }
            unsigned int v472 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v474)) & ~(-1 << v474) | (v472 << v474);
            v346 += v474;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
            v473 -= v474;
          }
          while (v473);
        }
        if (v469 >= v432)
        {
          int v218 = 3731;
          goto LABEL_357;
        }
        uint64_t v475 = *(void *)(v345 + 96);
        if (v472 >= (unint64_t)((*(void *)(v345 + 104) - v475) >> 7))
        {
          int v218 = 3732;
          goto LABEL_357;
        }
        uint64_t v476 = v475 + ((unint64_t)v472 << 7);
        *(unsigned char *)(v476 + 127) = 2;
        *(_DWORD *)(v476 + 120) = v469 + v387;
        if (++v468 == v466) {
          goto LABEL_873;
        }
      }
      int v218 = 3729;
      goto LABEL_357;
    }
  }
LABEL_873:
  if (v346 + 5 > v347)
  {
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3739;
    goto LABEL_358;
  }
  int v477 = 0;
  unint64_t v478 = 5;
  do
  {
    unint64_t v479 = 8 - (v346 & 7);
    if (v478 < v479) {
      unint64_t v479 = v478;
    }
    int v477 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v479)) & ~(-1 << v479) | (v477 << v479);
    v346 += v479;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
    v478 -= v479;
  }
  while (v478);
  unint64_t v480 = (v477 + 1);
  if (v346 + v480 > v347)
  {
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3742;
    goto LABEL_358;
  }
  unsigned int v481 = 0;
  if (v477 != -1)
  {
    unint64_t v482 = (v477 + 1);
    do
    {
      unint64_t v483 = 8 - (v346 & 7);
      if (v482 < v483) {
        unint64_t v483 = v482;
      }
      unsigned int v481 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v483)) & ~(-1 << v483) | (v481 << v483);
      v346 += v483;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
      v482 -= v483;
    }
    while (v482);
    if (v481)
    {
      int v484 = 0;
      unsigned int v485 = v436;
      while (v346 + v692 <= v347)
      {
        if (v692)
        {
          unsigned int v486 = 0;
          unint64_t v487 = v692;
          do
          {
            unint64_t v488 = 8 - (v346 & 7);
            if (v487 < v488) {
              unint64_t v488 = v487;
            }
            unsigned int v486 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v488)) & ~(-1 << v488) | (v486 << v488);
            v346 += v488;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
            v487 -= v488;
          }
          while (v487);
        }
        else
        {
          unsigned int v486 = 0;
        }
        if (*(void *)(v345 + 248) <= (unint64_t)v486)
        {
          int v218 = 3746;
          goto LABEL_357;
        }
        if (*(void *)(v345 + 264) <= (unint64_t)v485)
        {
          int v218 = 3747;
          goto LABEL_357;
        }
        uint64_t v489 = v344 + 56 * v485;
        *(unsigned char *)(v489 + 8) = 4;
        *(void *)(v489 + 48) = v486;
        *(unsigned char *)(v489 + 32) = 0;
        if (v346 + 64 > v347)
        {
          int v218 = 3752;
          goto LABEL_357;
        }
        unint64_t v490 = 0;
        unint64_t v491 = 64;
        do
        {
          unint64_t v492 = 8 - (v346 & 7);
          if (v491 < v492) {
            unint64_t v492 = v491;
          }
          unint64_t v490 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v492)) & (unint64_t)~(-1 << v492) | (v490 << v492);
          v346 += v492;
          *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
          v491 -= v492;
        }
        while (v491);
        *(void *)uint64_t v489 = v490;
        ++v484;
        ++v485;
        if (v484 == v481) {
          goto LABEL_910;
        }
      }
      int v218 = 3745;
      goto LABEL_357;
    }
  }
LABEL_910:
  if (v346 + 5 > v347) {
    goto LABEL_916;
  }
  int v493 = 0;
  unint64_t v494 = 5;
  do
  {
    unint64_t v495 = 8 - (v346 & 7);
    if (v494 < v495) {
      unint64_t v495 = v494;
    }
    int v493 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v495)) & ~(-1 << v495) | (v493 << v495);
    v346 += v495;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
    v494 -= v495;
  }
  while (v494);
  unint64_t v496 = (v493 + 1);
  if (v346 + v496 > v347)
  {
LABEL_916:
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3756;
    goto LABEL_358;
  }
  if (v493 != -1)
  {
    int v497 = 0;
    do
    {
      unint64_t v498 = 8 - (v346 & 7);
      if (v496 < v498) {
        unint64_t v498 = v496;
      }
      int v497 = (*(unsigned __int8 *)(v349 + (v346 >> 3)) >> (8 - (v346 & 7) - v498)) & ~(-1 << v498) | (v497 << v498);
      v346 += v498;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
      v496 -= v498;
    }
    while (v496);
    if (v497)
    {
      int v499 = 0;
      while (v346 + v480 <= v347)
      {
        unsigned int v500 = 0;
        if (v480)
        {
          uint64_t v501 = *(void *)v701;
          unint64_t v502 = v480;
          do
          {
            unint64_t v503 = 8 - (v346 & 7);
            if (v502 < v503) {
              unint64_t v503 = v502;
            }
            unsigned int v500 = (*(unsigned __int8 *)(v501 + (v346 >> 3)) >> (8 - (v346 & 7) - v503)) & ~(-1 << v503) | (v500 << v503);
            v346 += v503;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
            v502 -= v503;
          }
          while (v502);
        }
        if (v346 + v688 > v347)
        {
          int v218 = 3762;
          goto LABEL_357;
        }
        unsigned int v504 = v688;
        if (v688)
        {
          unsigned int v504 = 0;
          uint64_t v505 = *(void *)v701;
          unint64_t v506 = v688;
          do
          {
            unint64_t v507 = 8 - (v346 & 7);
            if (v506 < v507) {
              unint64_t v507 = v506;
            }
            unsigned int v504 = (*(unsigned __int8 *)(v505 + (v346 >> 3)) >> (8 - (v346 & 7) - v507)) & ~(-1 << v507) | (v504 << v507);
            v346 += v507;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
            v506 -= v507;
          }
          while (v506);
        }
        if (v500 >= v481)
        {
          int v218 = 3763;
          goto LABEL_357;
        }
        uint64_t v508 = *(void *)(v345 + 504);
        if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(v345 + 512) - v508) >> 5) <= (unint64_t)v504)
        {
          int v218 = 3764;
          goto LABEL_357;
        }
        uint64_t v509 = v344 + 56 * v436 + 56 * v500;
        *(unsigned char *)(v509 + 32) = 1;
        *(void *)(v509 + 40) = v504;
        uint64_t v510 = *(void *)(v345 + 256) + (*(void *)(v509 + 48) << 6);
        uint64_t v511 = *(void *)(v345 + 216) + 152 * *(void *)(v510 + 56);
        uint64_t v512 = v508 + 224 * v504;
        *(void *)(v512 + 120) = *(void *)(*(void *)(v345 + 184) + 144 * *(void *)(v511 + 144) + 104);
        *(void *)(v512 + 128) = *(void *)(v511 + 104);
        *(void *)(v512 + 136) = *(void *)v510;
        *(void *)(v512 + 144) = *(void *)v509;
        *(_WORD *)(v512 + 152) = *(_DWORD *)(v510 + 8);
        *(unsigned char *)(v512 + 156) = 4;
        if (++v499 == v497) {
          goto LABEL_943;
        }
      }
      int v218 = 3761;
      goto LABEL_357;
    }
  }
LABEL_943:
  if (v346 + 5 > v347) {
    goto LABEL_949;
  }
  int v513 = 0;
  uint64_t v514 = *(void *)v701;
  unint64_t v515 = 5;
  do
  {
    unint64_t v516 = 8 - (v346 & 7);
    if (v515 < v516) {
      unint64_t v516 = v515;
    }
    int v513 = (*(unsigned __int8 *)(v514 + (v346 >> 3)) >> (8 - (v346 & 7) - v516)) & ~(-1 << v516) | (v513 << v516);
    v346 += v516;
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
    v515 -= v516;
  }
  while (v515);
  unint64_t v517 = (v513 + 1);
  if (v346 + v517 > v347)
  {
LABEL_949:
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3781;
    goto LABEL_358;
  }
  if (v517)
  {
    int v518 = 0;
    do
    {
      unint64_t v519 = 8 - (v346 & 7);
      if (v517 < v519) {
        unint64_t v519 = v517;
      }
      int v518 = (*(unsigned __int8 *)(v514 + (v346 >> 3)) >> (8 - (v346 & 7) - v519)) & ~(-1 << v519) | (v518 << v519);
      v346 += v519;
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
      v517 -= v519;
    }
    while (v517);
    if (v518)
    {
      int v520 = 0;
      while (v346 + v480 <= v347)
      {
        unsigned int v521 = 0;
        if (v480)
        {
          unint64_t v522 = v480;
          do
          {
            unint64_t v523 = 8 - (v346 & 7);
            if (v522 < v523) {
              unint64_t v523 = v522;
            }
            unsigned int v521 = (*(unsigned __int8 *)(v514 + (v346 >> 3)) >> (8 - (v346 & 7) - v523)) & ~(-1 << v523) | (v521 << v523);
            v346 += v523;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
            v522 -= v523;
          }
          while (v522);
        }
        if (v346 + v686 > v347)
        {
          int v218 = 3787;
          goto LABEL_357;
        }
        unsigned int v524 = v686;
        if (v686)
        {
          unsigned int v524 = 0;
          unint64_t v525 = v686;
          do
          {
            unint64_t v526 = 8 - (v346 & 7);
            if (v525 < v526) {
              unint64_t v526 = v525;
            }
            unsigned int v524 = (*(unsigned __int8 *)(v514 + (v346 >> 3)) >> (8 - (v346 & 7) - v526)) & ~(-1 << v526) | (v524 << v526);
            v346 += v526;
            *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
            v525 -= v526;
          }
          while (v525);
        }
        if (v521 >= v481)
        {
          int v218 = 3788;
          goto LABEL_357;
        }
        uint64_t v527 = *(void *)(v345 + 96);
        if (v524 >= (unint64_t)((*(void *)(v345 + 104) - v527) >> 7))
        {
          int v218 = 3789;
          goto LABEL_357;
        }
        uint64_t v528 = v527 + ((unint64_t)v524 << 7);
        *(unsigned char *)(v528 + 127) = 2;
        *(_DWORD *)(v528 + 120) = v521 + v436;
        if (++v520 == v518) {
          goto LABEL_976;
        }
      }
      int v218 = 3786;
      goto LABEL_357;
    }
  }
LABEL_976:
  if (*(void *)(v345 + 192) == *(void *)(v345 + 184))
  {
    int v531 = 0;
  }
  else
  {
    uint64_t v529 = 0;
    unsigned int v530 = 0;
    int v531 = 0;
    unint64_t v532 = 8 * *(void *)(v9 + 16);
    uint64_t v345 = *a3;
    do
    {
      if (v346 + 5 > v532) {
        goto LABEL_1013;
      }
      int v535 = 0;
      unint64_t v536 = 5;
      do
      {
        unint64_t v537 = 8 - (v346 & 7);
        if (v536 < v537) {
          unint64_t v537 = v536;
        }
        int v535 = (*(unsigned __int8 *)(v514 + (v346 >> 3)) >> (8 - (v346 & 7) - v537)) & ~(-1 << v537) | (v535 << v537);
        v346 += v537;
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
        v536 -= v537;
      }
      while (v536);
      unint64_t v538 = (v535 + 1);
      if (v346 + v538 > v532)
      {
LABEL_1013:
        uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
        int v218 = 3796;
        goto LABEL_358;
      }
      int v539 = 0;
      if (v538)
      {
        do
        {
          unint64_t v540 = 8 - (v346 & 7);
          if (v538 < v540) {
            unint64_t v540 = v538;
          }
          int v539 = (*(unsigned __int8 *)(v514 + (v346 >> 3)) >> (8 - (v346 & 7) - v540)) & ~(-1 << v540) | (v539 << v540);
          v346 += v540;
          *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
          v538 -= v540;
        }
        while (v538);
      }
      uint64_t v533 = *(void *)(v345 + 184);
      uint64_t v534 = v533 + 144 * v529;
      *(_DWORD *)(v534 + 96) = v531;
      *(_DWORD *)(v534 + 100) = v539;
      v531 += v539;
      uint64_t v529 = ++v530;
    }
    while (0x8E38E38E38E38E39 * ((*(void *)(v345 + 192) - v533) >> 4) > v530);
  }
  if (*(void *)(v345 + 224) != *(void *)(v345 + 216))
  {
    uint64_t v541 = 0;
    unsigned int v542 = 0;
    unint64_t v543 = 8 * *(void *)(v9 + 16);
    uint64_t v345 = *a3;
    do
    {
      if (v346 + 5 > v543) {
        goto LABEL_1076;
      }
      int v546 = 0;
      unint64_t v547 = 5;
      do
      {
        unint64_t v548 = 8 - (v346 & 7);
        if (v547 < v548) {
          unint64_t v548 = v547;
        }
        int v546 = (*(unsigned __int8 *)(v514 + (v346 >> 3)) >> (8 - (v346 & 7) - v548)) & ~(-1 << v548) | (v546 << v548);
        v346 += v548;
        *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
        v547 -= v548;
      }
      while (v547);
      unint64_t v549 = (v546 + 1);
      if (v346 + v549 > v543)
      {
LABEL_1076:
        uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
        int v218 = 3803;
        goto LABEL_358;
      }
      int v550 = 0;
      if (v549)
      {
        do
        {
          unint64_t v551 = 8 - (v346 & 7);
          if (v549 < v551) {
            unint64_t v551 = v549;
          }
          int v550 = (*(unsigned __int8 *)(v514 + (v346 >> 3)) >> (8 - (v346 & 7) - v551)) & ~(-1 << v551) | (v550 << v551);
          v346 += v551;
          *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v346;
          v549 -= v551;
        }
        while (v549);
      }
      uint64_t v544 = *(void *)(v345 + 216);
      uint64_t v545 = v544 + 152 * v541;
      *(_DWORD *)(v545 + 96) = v531;
      *(_DWORD *)(v545 + 100) = v550;
      v531 += v550;
      uint64_t v541 = ++v542;
    }
    while (0x86BCA1AF286BCA1BLL * ((*(void *)(v345 + 224) - v544) >> 3) > v542);
  }
  if (!geo::codec::decodeSectionEncoding(v701, (geo::codec::Allocator **)(v345 + 840), 0, v695, 0))
  {
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3809;
    goto LABEL_358;
  }
  uint64_t v552 = (void *)*a3;
  uint64_t v554 = *(void *)(*a3 + 184);
  uint64_t v553 = *(void *)(*a3 + 192);
  unint64_t v555 = 0x8E38E38E38E38E39 * ((v553 - v554) >> 4);
  if (v553 != v554)
  {
    unint64_t v556 = 0;
    unsigned int v557 = 1;
    do
    {
      if (*(void *)(v552[105] + 40) < (unint64_t)(*(_DWORD *)(v554 + 144 * v556 + 100)
                                                                          + *(_DWORD *)(v554 + 144 * v556 + 96)))
      {
        uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
        int v218 = 3812;
        goto LABEL_358;
      }
      unint64_t v556 = v557++;
    }
    while (v555 > v556);
  }
  uint64_t v558 = v552[27];
  uint64_t v559 = v552[28];
  unint64_t v560 = (v559 - v558) / 152;
  if (v559 != v558)
  {
    unint64_t v561 = 0;
    unsigned int v562 = 1;
    do
    {
      if (*(void *)(v552[105] + 40) < (unint64_t)(*(_DWORD *)(v558 + 152 * v561 + 100)
                                                                          + *(_DWORD *)(v558 + 152 * v561 + 96)))
      {
        uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
        int v218 = 3815;
        goto LABEL_358;
      }
      unint64_t v561 = v562++;
    }
    while (v560 > v561);
  }
  __asm { FMOV            V0.2D, #1.0 }
  if (v553 != v554)
  {
    uint64_t v566 = 0;
    uint64_t v567 = v552[105];
    float64x2_t v568 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)~(-1 << *(unsigned char *)v567)), 0));
    while (1)
    {
      uint64_t v569 = v554 + 144 * v566;
      uint64_t v570 = *(unsigned int *)(v569 + 100);
      if (v570) {
        break;
      }
LABEL_1047:
      if (++v566 >= v555) {
        goto LABEL_1048;
      }
    }
    v571.i64[0] = *(void *)(v702 + 8 * v566);
    v571.i64[1] = *(void *)(v703 + 8 * v566);
    float32x2_t v572 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_s64(v571), v568));
    unint64_t v573 = *(unsigned int *)(v569 + 96);
    unint64_t v574 = v570 + v573;
    unint64_t v575 = *(void *)(v567 + 40);
    if (v575 <= v573) {
      unint64_t v575 = v573;
    }
    float32x4_t v576 = (float32x4_t)vdupq_lane_s32((int32x2_t)v572, 0);
    float32x4_t v577 = (float32x4_t)vdupq_lane_s32((int32x2_t)v572, 1);
    while (1)
    {
      if (v573 == v575
        || (uint64_t v578 = *(void *)(v567 + 32), v579 = *(void *)(v578 + 16 * v573), v579 >= *(void *)(v567 + 16)))
      {
        uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
        int v218 = 3831;
        goto LABEL_358;
      }
      unint64_t v580 = *(void *)(v578 + 16 * v573 + 8);
      if (!v580) {
        goto LABEL_1046;
      }
      uint64_t v581 = *(void *)(v567 + 8);
      if (v580 >= 0x10
        && ((unint64_t v582 = v581 + 8 * v579,
             uint64_t v583 = 8 * (v580 - 1),
             unint64_t v584 = v582 + v583,
             unint64_t v585 = v582,
             unint64_t v586 = v582 + 4 + v583,
             v584 >= v582)
          ? (BOOL v587 = v586 >= v582 + 4)
          : (BOOL v587 = 0),
            v587 ? (_ZF = (v580 - 1) >> 61 == 0) : (_ZF = 0),
            _ZF))
      {
        unint64_t v589 = v580 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v590 = (float *)(v585 + 32);
        unint64_t v591 = v580 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          unint64_t v592 = v590 - 8;
          float32x4x2_t v709 = vld2q_f32(v592);
          float32x4x2_t v711 = vld2q_f32(v590);
          v713.val[0] = vaddq_f32(v709.val[0], v576);
          v713.val[1] = vaddq_f32(v709.val[1], v577);
          v709.val[0] = vaddq_f32(v711.val[0], v576);
          v709.val[1] = vaddq_f32(v711.val[1], v577);
          vst2q_f32(v592, v713);
          vst2q_f32(v590, v709);
          v590 += 16;
          v591 -= 8;
        }
        while (v591);
        if (v580 == v589) {
          goto LABEL_1046;
        }
      }
      else
      {
        unint64_t v589 = 0;
      }
      unint64_t v593 = v580 - v589;
      uint64_t v594 = (float32x2_t *)(v581 + 8 * v589 + 8 * v579);
      do
      {
        *uint64_t v594 = vadd_f32(*v594, v572);
        ++v594;
        --v593;
      }
      while (v593);
LABEL_1046:
      if (++v573 >= v574) {
        goto LABEL_1047;
      }
    }
  }
LABEL_1048:
  if (v559 != v558)
  {
    uint64_t v595 = 0;
    uint64_t v596 = v552[105];
    double v597 = (double)~(-1 << *(unsigned char *)v596);
    if (v560 <= 1) {
      unint64_t v560 = 1;
    }
    float64x2_t v598 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v597, 0));
    double v599 = 1.0 / v597;
    while (1)
    {
      uint64_t v603 = v558 + 152 * v595;
      uint64_t v604 = 8 * *(void *)(v603 + 144);
      uint64_t v605 = *(void *)(v702 + v604);
      uint64_t v606 = *(void *)(v703 + v604);
      uint64_t v607 = *(unsigned int *)(v603 + 100);
      if (v607)
      {
        uint64_t v608 = *(void *)(v596 + 32);
        if (v608) {
          break;
        }
      }
LABEL_1052:
      float v600 = (double)(v605 + *(unsigned int *)(v690 + 4 * v595)) * v599;
      float v601 = (double)(v606 + *(unsigned int *)(v689 + 4 * v595)) * v599;
      uint64_t v602 = v558 + 152 * v595;
      *(float *)(v602 + 124) = v600;
      *(float *)(v602 + 128) = v601;
      if (++v595 == v560) {
        goto LABEL_1081;
      }
    }
    v609.i64[0] = v605;
    v609.i64[1] = v606;
    float32x2_t v610 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_s64(v609), v598));
    unint64_t v611 = *(unsigned int *)(v603 + 96);
    unint64_t v612 = v607 + v611;
    unint64_t v613 = *(void *)(v596 + 40);
    float32x4_t v614 = (float32x4_t)vdupq_lane_s32((int32x2_t)v610, 0);
    float32x4_t v615 = (float32x4_t)vdupq_lane_s32((int32x2_t)v610, 1);
    while (1)
    {
      if (v613 <= v611) {
        goto LABEL_1056;
      }
      unint64_t v616 = *(void *)(v608 + 16 * v611);
      if (v616 >= *(void *)(v596 + 16)) {
        goto LABEL_1056;
      }
      unint64_t v617 = *(void *)(v608 + 16 * v611 + 8);
      if (!v617) {
        goto LABEL_1056;
      }
      uint64_t v618 = *(void *)(v596 + 8);
      if (v617 >= 0x10
        && ((unint64_t v619 = v618 + 8 * v616,
             uint64_t v620 = 8 * (v617 - 1),
             unint64_t v621 = v619 + v620,
             unint64_t v622 = v619,
             unint64_t v623 = v619 + 4 + v620,
             v621 >= v619)
          ? (BOOL v624 = v623 >= v619 + 4)
          : (BOOL v624 = 0),
            v624 ? (BOOL v625 = (v617 - 1) >> 61 == 0) : (BOOL v625 = 0),
            v625))
      {
        unint64_t v626 = v617 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v629 = (float *)(v622 + 32);
        unint64_t v630 = v617 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          char v631 = v629 - 8;
          float32x4x2_t v710 = vld2q_f32(v631);
          float32x4x2_t v712 = vld2q_f32(v629);
          v714.val[0] = vaddq_f32(v710.val[0], v614);
          v714.val[1] = vaddq_f32(v710.val[1], v615);
          v710.val[0] = vaddq_f32(v712.val[0], v614);
          v710.val[1] = vaddq_f32(v712.val[1], v615);
          vst2q_f32(v631, v714);
          vst2q_f32(v629, v710);
          v629 += 16;
          v630 -= 8;
        }
        while (v630);
        if (v617 == v626) {
          goto LABEL_1056;
        }
      }
      else
      {
        unint64_t v626 = 0;
      }
      unint64_t v627 = v617 - v626;
      uint64_t v628 = (float32x2_t *)(v618 + 8 * v626 + 8 * v616);
      do
      {
        *uint64_t v628 = vadd_f32(*v628, v610);
        ++v628;
        --v627;
      }
      while (v627);
LABEL_1056:
      if (++v611 >= v612) {
        goto LABEL_1052;
      }
    }
  }
LABEL_1081:
  if (v553 != v554)
  {
    unint64_t v632 = 0;
    uint64_t v633 = 128;
    do
    {
      unint64_t v634 = *(void *)(v9 + 24);
      if (v634 + 1 > 8 * *(void *)(v9 + 16))
      {
        uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
        int v218 = 3872;
        goto LABEL_358;
      }
      unsigned int v635 = *(unsigned __int8 *)(*(void *)v701 + (v634 >> 3));
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v634 + 1;
      if ((v635 >> (~(_BYTE)v634 & 7)))
      {
        LODWORD(v708[0]) = 0;
        if (!BitstreamUnpack((uint64_t *)v701, (int *)v708, v685))
        {
          int v218 = 3875;
          goto LABEL_357;
        }
        if (v697 <= LODWORD(v708[0]))
        {
          int v218 = 3876;
          goto LABEL_357;
        }
        uint64_t v636 = *a3;
        uint64_t v637 = *(void *)(*a3 + 184);
        *(void *)(v637 + v633) = v696 + LODWORD(v708[0]);
      }
      else
      {
        uint64_t v636 = *a3;
        uint64_t v637 = *(void *)(*a3 + 184);
      }
      ++v632;
      v633 += 144;
    }
    while (v632 < 0x8E38E38E38E38E39 * ((*(void *)(v636 + 192) - v637) >> 4));
  }
  int v706 = 0;
  if (!BitstreamUnpackVar32((uint64_t *)v701, &v706))
  {
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3882;
    goto LABEL_358;
  }
  int v638 = v706;
  if (v706)
  {
    while (1)
    {
      LODWORD(v708[0]) = 0;
      LODWORD(v707) = 0;
      if (!BitstreamUnpack((uint64_t *)v701, (int *)v708, v692)) {
        break;
      }
      int v639 = (int)v708[0];
      if (*(void *)(*a3 + 248) <= (unint64_t)LODWORD(v708[0]))
      {
        int v218 = 3887;
        goto LABEL_357;
      }
      if (!BitstreamUnpack((uint64_t *)v701, (int *)&v707, v686))
      {
        int v218 = 3888;
        goto LABEL_357;
      }
      uint64_t v640 = *(void *)(*a3 + 96);
      if (v707 >= (unint64_t)((*(void *)(*a3 + 104) - v640) >> 7))
      {
        int v218 = 3889;
        goto LABEL_357;
      }
      uint64_t v641 = v640 + ((unint64_t)v707 << 7);
      *(unsigned char *)(v641 + 127) = 3;
      *(_DWORD *)(v641 + 120) = v639;
      if (!--v638) {
        goto LABEL_1097;
      }
    }
    int v218 = 3886;
    goto LABEL_357;
  }
LABEL_1097:
  unsigned int v642 = *(_DWORD *)(v9 + 64);
  if (v642 < 0x3C) {
    goto LABEL_1176;
  }
  unint64_t v643 = (void *)*a3;
  uint64_t v644 = *(void *)(*a3 + 192);
  if (v644 != *(void *)(*a3 + 184))
  {
    unint64_t v645 = 0;
    uint64_t v646 = 136;
    while (1)
    {
      unint64_t v647 = *(void *)(v9 + 24);
      if (v647 + 1 > 8 * *(void *)(v9 + 16))
      {
        uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
        int v218 = 3897;
        goto LABEL_358;
      }
      unsigned int v648 = *(unsigned __int8 *)(*(void *)v701 + (v647 >> 3));
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v647 + 1;
      if ((v648 >> (~(_BYTE)v647 & 7)))
      {
        LODWORD(v708[0]) = 0;
        if (!BitstreamUnpack((uint64_t *)v701, (int *)v708, v685))
        {
          int v218 = 3900;
          goto LABEL_357;
        }
        if (v697 <= LODWORD(v708[0]))
        {
          int v218 = 3901;
          goto LABEL_357;
        }
        unint64_t v643 = (void *)*a3;
        uint64_t v644 = *(void *)(*a3 + 184);
        *(void *)(v644 + v646) = v696 + LODWORD(v708[0]);
      }
      else
      {
        unint64_t v643 = (void *)*a3;
        uint64_t v644 = *(void *)(*a3 + 184);
      }
      ++v645;
      uint64_t v649 = v643[24];
      v646 += 144;
      if (v645 >= 0x8E38E38E38E38E39 * ((v649 - v644) >> 4))
      {
        unsigned int v642 = *(_DWORD *)(v9 + 64);
        goto LABEL_1117;
      }
    }
  }
  uint64_t v649 = *(void *)(*a3 + 192);
LABEL_1117:
  if (v642 < 0x3D) {
    goto LABEL_1176;
  }
  if (v649 != v644)
  {
    unint64_t v650 = 0;
    uint64_t v651 = 75;
    while (1)
    {
      unint64_t v652 = *(void *)(v9 + 24);
      if (v652 + 1 > 8 * *(void *)(v9 + 16)) {
        break;
      }
      unsigned int v653 = *(unsigned __int8 *)(*(void *)v701 + (v652 >> 3));
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v652 + 1;
      if ((v653 >> (~(_BYTE)v652 & 7)))
      {
        uint64_t v654 = *(void *)(*a3 + 184);
        *(unsigned char *)(v654 + v651) = 1;
        if (!BitstreamUnpack64((uint64_t *)v701, (unint64_t *)(v654 + v651 - 27), 0x40uLL))
        {
          int v218 = 3914;
          goto LABEL_357;
        }
      }
      ++v650;
      unint64_t v643 = (void *)*a3;
      v651 += 144;
      if (v650 >= 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(*a3 + 192) - *(void *)(*a3 + 184)) >> 4)) {
        goto LABEL_1124;
      }
    }
    int v218 = 3910;
    goto LABEL_357;
  }
LABEL_1124:
  if (v643[28] != v643[27])
  {
    unint64_t v655 = 0;
    uint64_t v656 = 75;
    while (1)
    {
      unint64_t v657 = *(void *)(v9 + 24);
      if (v657 + 1 > 8 * *(void *)(v9 + 16)) {
        break;
      }
      unsigned int v658 = *(unsigned __int8 *)(*(void *)v701 + (v657 >> 3));
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v657 + 1;
      if ((v658 >> (~(_BYTE)v657 & 7)))
      {
        uint64_t v659 = *(void *)(*a3 + 216);
        *(unsigned char *)(v659 + v656) = 1;
        if (!BitstreamUnpack64((uint64_t *)v701, (unint64_t *)(v659 + v656 - 27), 0x40uLL))
        {
          int v218 = 3924;
          goto LABEL_357;
        }
      }
      ++v655;
      v656 += 152;
      if (v655 >= 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(*a3 + 224) - *(void *)(*a3 + 216)) >> 3)) {
        goto LABEL_1130;
      }
    }
    int v218 = 3920;
    goto LABEL_357;
  }
LABEL_1130:
  if (*(_DWORD *)(v9 + 64) < 0x43u) {
    goto LABEL_1176;
  }
  LODWORD(v708[0]) = 0;
  if (!BitstreamUnpackVar32((uint64_t *)v701, (int *)v708))
  {
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3931;
    goto LABEL_358;
  }
  int v660 = (int)v708[0];
  if (LODWORD(v708[0]))
  {
    while (1)
    {
      LODWORD(v707) = 0;
      if (!BitstreamUnpack((uint64_t *)v701, (int *)&v707, v688)) {
        break;
      }
      unsigned int v661 = v707;
      uint64_t v662 = *(void *)(*a3 + 504);
      if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(*a3 + 512) - v662) >> 5) <= (unint64_t)v707)
      {
        int v218 = 3935;
        goto LABEL_357;
      }
      int v705 = 0;
      if (!BitstreamUnpackSignedVar32((uint64_t *)v701, &v705))
      {
        int v218 = 3939;
        goto LABEL_357;
      }
      if ((v705 + 0x7FFF) >= 0xFFFE)
      {
        int v218 = 3940;
        goto LABEL_357;
      }
      uint64_t v663 = v662 + 224 * v661;
      *(_WORD *)(v663 + 154) = v705;
      *(unsigned char *)(v663 + 216) = 1;
      if (!--v660) {
        goto LABEL_1138;
      }
    }
    int v218 = 3934;
    goto LABEL_357;
  }
LABEL_1138:
  if (*(_DWORD *)(v9 + 64) < 0x45u) {
    goto LABEL_1176;
  }
  unint64_t v664 = *(void *)(v9 + 24);
  if (v664 + 1 > 8 * *(void *)(v9 + 16))
  {
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3948;
    goto LABEL_358;
  }
  unsigned int v665 = *(unsigned __int8 *)(*(void *)v701 + (v664 >> 3));
  *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v664 + 1;
  if (((v665 >> (~(_BYTE)v664 & 7)) & 1) == 0) {
    goto LABEL_1176;
  }
  LODWORD(v708[0]) = 0;
  if (!BitstreamUnpackVar32((uint64_t *)v701, (int *)v708))
  {
    uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
    int v218 = 3951;
    goto LABEL_358;
  }
  uint64_t v666 = (void *)*a3;
  if (*(void *)(*a3 + 192) != *(void *)(*a3 + 184))
  {
    unint64_t v667 = 0;
    unsigned int v668 = 1;
    float v669 = 1.0 / (float)LODWORD(v708[0]);
    do
    {
      unint64_t v670 = *(void *)(v9 + 24);
      if (v670 + 1 > 8 * *(void *)(v9 + 16))
      {
        uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
        int v218 = 3954;
        goto LABEL_358;
      }
      unsigned int v671 = *(unsigned __int8 *)(*(void *)v701 + (v670 >> 3));
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v670 + 1;
      if ((v671 >> (~(_BYTE)v670 & 7)))
      {
        uint64_t v672 = *(void *)(*a3 + 184);
        *(unsigned char *)(v672 + 144 * v667 + 120) = 1;
        LODWORD(v707) = 0;
        if (!BitstreamUnpackSignedVar32((uint64_t *)v701, (int *)&v707))
        {
          uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
          int v218 = 3960;
          goto LABEL_358;
        }
        *(float *)(v672 + 144 * v667 + 124) = (float)(int)v707 * v669;
      }
      unint64_t v667 = v668;
      uint64_t v666 = (void *)*a3;
      ++v668;
    }
    while (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(*a3 + 192) - *(void *)(*a3 + 184)) >> 4) > v667);
  }
  if (v666[28] != v666[27])
  {
    uint64_t v673 = 0;
    unint64_t v674 = 0;
    float v675 = 1.0 / (float)LODWORD(v708[0]);
    do
    {
      unint64_t v676 = *(void *)(v9 + 24);
      if (v676 + 1 > 8 * *(void *)(v9 + 16))
      {
        uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
        int v218 = 3967;
        goto LABEL_358;
      }
      unsigned int v677 = *(unsigned __int8 *)(*(void *)v701 + (v676 >> 3));
      *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v676 + 1;
      if ((v677 >> (~(_BYTE)v676 & 7)))
      {
        uint64_t v678 = *(void *)(*a3 + 216) + v673;
        *(unsigned char *)(v678 + 132) = 1;
        LODWORD(v707) = 0;
        if (!BitstreamUnpackSignedVar32((uint64_t *)v701, (int *)&v707))
        {
          uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
          int v218 = 3973;
          goto LABEL_358;
        }
        *(float *)(v678 + 136) = (float)(int)v707 * v675;
      }
      ++v674;
      uint64_t v666 = (void *)*a3;
      v673 += 152;
    }
    while (v674 < 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(*a3 + 224) - *(void *)(*a3 + 216)) >> 3));
  }
  if (!v666[31])
  {
LABEL_1176:
    uint64_t v17 = 1;
    goto LABEL_359;
  }
  unint64_t v679 = 0;
  unsigned int v680 = 1;
  float v681 = 1.0 / (float)LODWORD(v708[0]);
  while (1)
  {
    unint64_t v682 = *(void *)(v9 + 24);
    if (v682 + 1 > 8 * *(void *)(v9 + 16))
    {
      uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
      int v218 = 3980;
      goto LABEL_358;
    }
    unsigned int v683 = *(unsigned __int8 *)(*(void *)v701 + (v682 >> 3));
    *std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23 = v682 + 1;
    if ((v683 >> (~(_BYTE)v682 & 7))) {
      break;
    }
LABEL_1175:
    unint64_t v679 = v680++;
    if (*(void *)(*a3 + 248) <= v679) {
      goto LABEL_1176;
    }
  }
  uint64_t v684 = *(void *)(*a3 + 256) + (v679 << 6);
  *(unsigned char *)(v684 + 40) = 1;
  LODWORD(v707) = 0;
  if (BitstreamUnpackSignedVar32((uint64_t *)v701, (int *)&v707))
  {
    *(float *)(v684 + 44) = (float)(int)v707 * v681;
    goto LABEL_1175;
  }
  uint64_t v217 = (FILE *)*MEMORY[0x1E4F143C8];
  int v218 = 3986;
LABEL_358:
  fprintf(v217, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v218);
  uint64_t v17 = 0;
LABEL_359:
  std::chrono::steady_clock::time_point v10 = v699;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v694;
  uint64_t v95 = v689;
  uint64_t v94 = v690;
LABEL_136:
  {
    operator new();
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, v702, 0);
LABEL_138:
  if (v703)
  {
    {
      operator new();
    }
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, v703, 0);
  }
  if (v94)
  {
    {
      operator new();
    }
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, v94, 0);
  }
  if (v95)
  {
    {
      operator new();
    }
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, v95, 0);
  }
LABEL_18:
  if (*(unsigned char *)v9)
  {
    {
      operator new();
    }
    (*(void (**)(uint64_t, void, void))(*(void *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, *(void *)(v9 + 40), 0);
  }
  {
    operator new();
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)geo::codec::Allocator::instance(void)::alloc + 40))(geo::codec::Allocator::instance(void)::alloc, v9, 0);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v27 = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v707 = "ChapterVenues";
  v708[0] = (uint64_t *)&v707;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v704 + 1912, (uint64_t *)&v707, (uint64_t)&std::piecewise_construct, v708)+ 4) = (double)((v27 - rep) / 1000) * 0.001;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return v17;
}