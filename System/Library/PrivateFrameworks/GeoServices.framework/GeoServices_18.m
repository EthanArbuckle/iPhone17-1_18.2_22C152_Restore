uint64_t gcl::polyline::EncoderImpl::compressAttributes(gcl::ArithmeticEncoder *this, uint64_t a2, unsigned __int8 *a3, char a4, unint64_t a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t *a10, unsigned __int8 *a11, char a12)
{
  uint64_t result;
  int v15;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  long long v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  int v49;
  unsigned __int16 v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  __int16 v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  unsigned __int16 *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unint64_t v83;
  unsigned int v84;
  unsigned __int16 v85;
  unsigned __int16 v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  _WORD *v94;
  int i;
  int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  BOOL v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  _WORD v112[2];
  __int16 v113;
  void __b[4];

  __b[3] = *MEMORY[0x1E4F143B8];
  result = 5;
  if (a5 > 0xFF) {
    return result;
  }
  if (!a2) {
    return result;
  }
  v15 = a7;
  if ((unint64_t)(a7 - 256) < 0xFFFFFFFFFFFFFF01
    || a11[5] - 1 < 4
    || (a11[4] | 2) == 2
    || !a3 && a11[6])
  {
    return result;
  }
  v19 = a9;
  v20 = a8;
  if (a12)
  {
    if ((uint64_t)a9 < 4) {
      goto LABEL_23;
    }
    *(_DWORD *)a8 = -1214009963;
    if (a9 < 9) {
      goto LABEL_23;
    }
    *(unsigned char *)(a8 + 8) = 0;
    if (a9 == 9) {
      goto LABEL_23;
    }
    *(unsigned char *)(a8 + 9) = 2;
    if (((a9 - 8) & 0xFFFFFFFFFFFFFFFELL) == 2) {
      goto LABEL_23;
    }
    *(_WORD *)(a8 + 10) = 0;
    if (a9 < 0x14) {
      goto LABEL_23;
    }
    *(_DWORD *)(a8 + 16) = a6;
    if (a9 == 20
      || (*(unsigned char *)(a8 + 20) = a4, a9 == 21)
      || (*(unsigned char *)(a8 + 21) = a5, a9 == 22)
      || (*(unsigned char *)(a8 + 22) = a7, a9 == 23)
      || (*(unsigned char *)(a8 + 23) = a11[4], a9 == 24)
      || (*(unsigned char *)(a8 + 24) = a11[5], a9 == 25)
      || (*(unsigned char *)(a8 + 25) = a11[6], a9 == 26)
      || (*(unsigned char *)(a8 + 26) = 1, a9 == 27))
    {
LABEL_23:
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v19 = a9 - 28;
      v20 = a8 + 28;
      *(unsigned char *)(a8 + 27) = 0;
    }
  }
  v21 = 0;
  v110 = v19;
  v111 = v20;
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 1) = v19 & ~(v19 >> 63);
  *(void *)&v22 = 0xFFFF00000000;
  *((void *)&v22 + 1) = 0xFFFF00000000;
  *(_OWORD *)((char *)this + 24) = v22;
  *((void *)this + 1) = v20;
  *((void *)this + 2) = 0;
  v23 = 0x217u;
  *((void *)this + 5) = 0;
  do
  {
    *(_WORD *)((char *)this + v21 * 2 + 48) = gcl::ArithmeticEncoder::probUpdateLut[v21];
    *(_WORD *)((char *)this + v23 * 2) = gcl::ArithmeticEncoder::probUpdateLut[v23 - 280];
    ++v21;
    --v23;
  }
  while (v21 != 256);
  if (a11[6] == 1)
  {
    memset_pattern16(__b, &unk_18A643070, 4uLL);
    if (a6 >= 1)
    {
      gcl::ArithmeticEncoder::encode((uint64_t)this, *a3, __b);
      if (a6 != 1)
      {
        v24 = a6 - 1;
        v25 = a3 + 1;
        do
        {
          v26 = *(v25 - 1);
          v27 = *v25++;
          gcl::ArithmeticEncoder::encode((uint64_t)this, v27, (_WORD *)__b + v26);
          --v24;
        }
        while (v24);
      }
    }
  }
  if (a11[5]) {
    return 5;
  }
  v28 = a11[4];
  v29 = a11[6];
  if (v28 == 1)
  {
    memset(__b, 0, 24);
    if (!v15) {
      goto LABEL_164;
    }
    if (v15 < 0) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    v79 = (unsigned __int16 *)operator new(2 * v15);
    memset_pattern16(v79, &unk_18A643070, 2 * v15);
    if (a6 < 1)
    {
LABEL_157:
      operator delete(v79);
      goto LABEL_164;
    }
    v80 = 0;
    while (v29 && !a3[v80])
    {
LABEL_133:
      if (++v80 == a6) {
        goto LABEL_157;
      }
    }
    v81 = 0;
    v82 = *((_DWORD *)this + 7);
    while (1)
    {
      v83 = v79[v81];
      v84 = (v82 * v83) >> 16;
      if (!*(unsigned char *)(a2 + v80 * v15 + v81)) {
        break;
      }
      v82 -= v84;
      v85 = v83 - *(_WORD *)((char *)this + ((v83 >> 7) & 0x1FE) + 48);
      *((_DWORD *)this + 6) += v84;
      *((_DWORD *)this + 7) = v82;
      v79[v81] = v85;
      if (v82 <= 0x4000) {
        goto LABEL_142;
      }
LABEL_137:
      if (++v81 == v15) {
        goto LABEL_133;
      }
    }
    v86 = *(_WORD *)((char *)this + (~(v79[v81] >> 7) & 0x1FE) + 48) + v79[v81];
    v82 = v84;
    *((_DWORD *)this + 7) = v84;
    v79[v81] = v86;
    if (v84 > 0x4000) {
      goto LABEL_137;
    }
LABEL_142:
    v87 = *((_DWORD *)this + 6);
    v88 = *((_DWORD *)this + 10);
    while (1)
    {
      v87 *= 2;
      v82 *= 2;
      *((_DWORD *)this + 6) = v87;
      *((_DWORD *)this + 7) = v82;
      *((_DWORD *)this + 10) = ++v88;
      if (v88 != 8) {
        goto LABEL_145;
      }
      v89 = *((void *)this + 2);
      v90 = *((int *)this + 11);
      if (v89 + v90 + 1 > (unint64_t)*((unsigned int *)this + 1)) {
        goto LABEL_137;
      }
      if (HIBYTE(v87))
      {
        ++*(unsigned char *)(v89 + *((void *)this + 1) - 1);
        v89 = *((void *)this + 2);
        if (*((_DWORD *)this + 11))
        {
          do
          {
            *(unsigned char *)(*((void *)this + 1) + v89) = 0;
            v91 = *((_DWORD *)this + 11);
            v89 = *((void *)this + 2) + 1;
            *((void *)this + 2) = v89;
            *((_DWORD *)this + 11) = --v91;
          }
          while (v91);
        }
      }
      else
      {
        if ((v82 + v87) >> 24)
        {
          *((_DWORD *)this + 11) = v90 + 1;
          goto LABEL_144;
        }
        if (v90)
        {
          do
          {
            *(unsigned char *)(*((void *)this + 1) + v89) = -1;
            v92 = *((_DWORD *)this + 11);
            v89 = *((void *)this + 2) + 1;
            *((void *)this + 2) = v89;
            *((_DWORD *)this + 11) = --v92;
          }
          while (v92);
        }
      }
      *(unsigned char *)(*((void *)this + 1) + v89) = *((_WORD *)this + 13);
      ++*((void *)this + 2);
      LOWORD(v87) = *((_WORD *)this + 12);
      v82 = *((_DWORD *)this + 7);
LABEL_144:
      v88 = 0;
      v87 = (unsigned __int16)v87;
      *((_DWORD *)this + 6) = (unsigned __int16)v87;
      *((_DWORD *)this + 10) = 0;
LABEL_145:
      if (v82 > 0x4000) {
        goto LABEL_137;
      }
    }
  }
  if (v28 != 3) {
    goto LABEL_164;
  }
  memset_pattern16(v112, &unk_18A643070, 4uLL);
  __b[0] = 0;
  if (a6 < 1 || v15 < 1) {
    goto LABEL_164;
  }
  v30 = 0;
  v31 = 0;
  v32 = v15;
  v33 = a6;
  v34 = 1;
  v35 = 1;
  while (2)
  {
    v36 = 0;
    v37 = a2 + v30;
    do
    {
      if (v29 && !a3[v36]) {
        goto LABEL_41;
      }
      v38 = *(unsigned __int8 *)(v37 + v36 * v32);
      if ((v35 & 1) == 0)
      {
        if (v38 == v34)
        {
          v35 = 0;
          ++v31;
          goto LABEL_41;
        }
        v47 = v34;
        v48 = *(_DWORD *)((unint64_t)__b & 0xFFFFFFFFFFFFFFFBLL | (4 * v47));
        v49 = 1 << v48;
        v50 = v112[v47];
        v51 = *((_DWORD *)this + 7);
        if (1 << v48 > v31)
        {
          v52 = *(_DWORD *)((unint64_t)__b & 0xFFFFFFFFFFFFFFFBLL | (4 * v47));
          v53 = v31;
LABEL_67:
          v54 = v51 * v50;
          v55 = HIWORD(v54);
          v56 = *((_WORD *)this + (HIBYTE(v50) ^ 0xFFu) + 24) + v50;
          *((_DWORD *)this + 7) = HIWORD(v54);
          v112[v47] = v56;
          if (v54 <= 0x4000FFFF)
          {
            v57 = *((_DWORD *)this + 6);
            v58 = *((_DWORD *)this + 10);
            do
            {
              v57 *= 2;
              v55 *= 2;
              *((_DWORD *)this + 6) = v57;
              *((_DWORD *)this + 7) = v55;
              *((_DWORD *)this + 10) = ++v58;
              if (v58 != 8) {
                continue;
              }
              v59 = *((void *)this + 2);
              v60 = *((int *)this + 11);
              if (v59 + v60 + 1 > (unint64_t)*((unsigned int *)this + 1)) {
                break;
              }
              if (HIBYTE(v57))
              {
                ++*(unsigned char *)(v59 + *((void *)this + 1) - 1);
                v59 = *((void *)this + 2);
                if (*((_DWORD *)this + 11))
                {
                  do
                  {
                    *(unsigned char *)(*((void *)this + 1) + v59) = 0;
                    v61 = *((_DWORD *)this + 11);
                    v59 = *((void *)this + 2) + 1;
                    *((void *)this + 2) = v59;
                    *((_DWORD *)this + 11) = --v61;
                  }
                  while (v61);
                }
              }
              else
              {
                if ((v55 + v57) >> 24)
                {
                  *((_DWORD *)this + 11) = v60 + 1;
                  goto LABEL_70;
                }
                if (v60)
                {
                  do
                  {
                    *(unsigned char *)(*((void *)this + 1) + v59) = -1;
                    v62 = *((_DWORD *)this + 11);
                    v59 = *((void *)this + 2) + 1;
                    *((void *)this + 2) = v59;
                    *((_DWORD *)this + 11) = --v62;
                  }
                  while (v62);
                }
              }
              *(unsigned char *)(*((void *)this + 1) + v59) = *((_WORD *)this + 13);
              ++*((void *)this + 2);
              LOWORD(v57) = *((_WORD *)this + 12);
              v55 = *((_DWORD *)this + 7);
LABEL_70:
              v58 = 0;
              v57 = (unsigned __int16)v57;
              *((_DWORD *)this + 6) = (unsigned __int16)v57;
              *((_DWORD *)this + 10) = 0;
            }
            while (v55 <= 0x4000);
          }
          if (!v52)
          {
LABEL_84:
            v63 = (int)v31 >> v48;
            if (!v48 || v63)
            {
              if (v63 < 2)
              {
LABEL_110:
                v31 = 0;
                v35 = 0;
                v34 = *(unsigned char *)(v37 + v36 * v32) != 0;
                goto LABEL_41;
              }
              v64 = 1;
            }
            else
            {
              v64 = -1;
            }
            *(_DWORD *)((unint64_t)__b | (4 * v47)) = v64 + v48;
            goto LABEL_110;
          }
          while (1)
          {
            --v52;
            v65 = (unsigned __int16)(v55 >> 1);
            if (((v53 >> v52) & 1) == 0) {
              break;
            }
            v55 -= v65;
            *((_DWORD *)this + 6) += v65;
            *((_DWORD *)this + 7) = v55;
            if (v55 <= 0x4000) {
              goto LABEL_92;
            }
LABEL_87:
            if (!v52) {
              goto LABEL_84;
            }
          }
          v55 = (unsigned __int16)(v55 >> 1);
          *((_DWORD *)this + 7) = v65;
          if (v65 > 0x4000) {
            goto LABEL_87;
          }
LABEL_92:
          v66 = *((_DWORD *)this + 6);
          v67 = *((_DWORD *)this + 10);
          while (1)
          {
            v66 *= 2;
            v55 *= 2;
            *((_DWORD *)this + 6) = v66;
            *((_DWORD *)this + 7) = v55;
            *((_DWORD *)this + 10) = ++v67;
            if (v67 != 8) {
              goto LABEL_95;
            }
            v68 = *((void *)this + 2);
            v69 = *((int *)this + 11);
            if (v68 + v69 + 1 > (unint64_t)*((unsigned int *)this + 1)) {
              goto LABEL_87;
            }
            if (HIBYTE(v66))
            {
              ++*(unsigned char *)(v68 + *((void *)this + 1) - 1);
              v68 = *((void *)this + 2);
              if (*((_DWORD *)this + 11))
              {
                do
                {
                  *(unsigned char *)(*((void *)this + 1) + v68) = 0;
                  v70 = *((_DWORD *)this + 11);
                  v68 = *((void *)this + 2) + 1;
                  *((void *)this + 2) = v68;
                  *((_DWORD *)this + 11) = --v70;
                }
                while (v70);
              }
            }
            else
            {
              if ((v55 + v66) >> 24)
              {
                *((_DWORD *)this + 11) = v69 + 1;
                goto LABEL_94;
              }
              if (v69)
              {
                do
                {
                  *(unsigned char *)(*((void *)this + 1) + v68) = -1;
                  v71 = *((_DWORD *)this + 11);
                  v68 = *((void *)this + 2) + 1;
                  *((void *)this + 2) = v68;
                  *((_DWORD *)this + 11) = --v71;
                }
                while (v71);
              }
            }
            *(unsigned char *)(*((void *)this + 1) + v68) = *((_WORD *)this + 13);
            ++*((void *)this + 2);
            LOWORD(v66) = *((_WORD *)this + 12);
            v55 = *((_DWORD *)this + 7);
LABEL_94:
            v67 = 0;
            v66 = (unsigned __int16)v66;
            *((_DWORD *)this + 6) = (unsigned __int16)v66;
            *((_DWORD *)this + 10) = 0;
LABEL_95:
            if (v55 > 0x4000) {
              goto LABEL_87;
            }
          }
        }
        v72 = *((_DWORD *)this + 6);
        v53 = v31;
        v52 = *(_DWORD *)((unint64_t)__b & 0xFFFFFFFFFFFFFFFBLL | (4 * v47));
        while (1)
        {
          v73 = (v51 * v50) >> 16;
          v72 += v73;
          v51 -= v73;
          v50 -= *((_WORD *)this + HIBYTE(v50) + 24);
          *((_DWORD *)this + 6) = v72;
          *((_DWORD *)this + 7) = v51;
          v112[v47] = v50;
          if (v51 <= 0x4000) {
            break;
          }
LABEL_112:
          ++v52;
          v53 -= v49;
          v49 = 1 << v52;
          if (v53 < 1 << v52) {
            goto LABEL_67;
          }
        }
        v74 = *((_DWORD *)this + 10);
        while (1)
        {
          v72 *= 2;
          v51 *= 2;
          *((_DWORD *)this + 6) = v72;
          *((_DWORD *)this + 7) = v51;
          *((_DWORD *)this + 10) = ++v74;
          if (v74 != 8) {
            goto LABEL_117;
          }
          v75 = *((void *)this + 2);
          v76 = *((int *)this + 11);
          if (v75 + v76 + 1 > (unint64_t)*((unsigned int *)this + 1)) {
            goto LABEL_112;
          }
          if (HIBYTE(v72))
          {
            ++*(unsigned char *)(v75 + *((void *)this + 1) - 1);
            v75 = *((void *)this + 2);
            if (*((_DWORD *)this + 11))
            {
              do
              {
                *(unsigned char *)(*((void *)this + 1) + v75) = 0;
                v77 = *((_DWORD *)this + 11);
                v75 = *((void *)this + 2) + 1;
                *((void *)this + 2) = v75;
                *((_DWORD *)this + 11) = --v77;
              }
              while (v77);
            }
          }
          else
          {
            if ((v51 + v72) >> 24)
            {
              *((_DWORD *)this + 11) = v76 + 1;
              goto LABEL_116;
            }
            if (v76)
            {
              do
              {
                *(unsigned char *)(*((void *)this + 1) + v75) = -1;
                v78 = *((_DWORD *)this + 11);
                v75 = *((void *)this + 2) + 1;
                *((void *)this + 2) = v75;
                *((_DWORD *)this + 11) = --v78;
              }
              while (v78);
            }
          }
          *(unsigned char *)(*((void *)this + 1) + v75) = *((_WORD *)this + 13);
          ++*((void *)this + 2);
          LOWORD(v72) = *((_WORD *)this + 12);
          v51 = *((_DWORD *)this + 7);
LABEL_116:
          v74 = 0;
          v72 = (unsigned __int16)v72;
          *((_DWORD *)this + 6) = (unsigned __int16)v72;
          *((_DWORD *)this + 10) = 0;
LABEL_117:
          if (v51 > 0x4000) {
            goto LABEL_112;
          }
        }
      }
      v34 = v38 != 0;
      v39 = *((_DWORD *)this + 7);
      v40 = (unsigned __int16)(v39 >> 1);
      if (*(unsigned char *)(v37 + v36 * v32))
      {
        *((_DWORD *)this + 6) += v40;
        v40 = v39 - v40;
      }
      *((_DWORD *)this + 7) = v40;
      if (v40 <= 0x4000)
      {
        v41 = *((_DWORD *)this + 6);
        v42 = *((_DWORD *)this + 10);
        do
        {
          v41 *= 2;
          v40 *= 2;
          *((_DWORD *)this + 6) = v41;
          *((_DWORD *)this + 7) = v40;
          *((_DWORD *)this + 10) = ++v42;
          if (v42 != 8) {
            continue;
          }
          v43 = *((void *)this + 2);
          v44 = *((int *)this + 11);
          if (v43 + v44 + 1 > (unint64_t)*((unsigned int *)this + 1)) {
            break;
          }
          if (HIBYTE(v41))
          {
            ++*(unsigned char *)(v43 + *((void *)this + 1) - 1);
            v43 = *((void *)this + 2);
            if (*((_DWORD *)this + 11))
            {
              do
              {
                *(unsigned char *)(*((void *)this + 1) + v43) = 0;
                v45 = *((_DWORD *)this + 11);
                v43 = *((void *)this + 2) + 1;
                *((void *)this + 2) = v43;
                *((_DWORD *)this + 11) = --v45;
              }
              while (v45);
            }
          }
          else
          {
            if ((v40 + v41) >> 24)
            {
              *((_DWORD *)this + 11) = v44 + 1;
              goto LABEL_50;
            }
            if (v44)
            {
              do
              {
                *(unsigned char *)(*((void *)this + 1) + v43) = -1;
                v46 = *((_DWORD *)this + 11);
                v43 = *((void *)this + 2) + 1;
                *((void *)this + 2) = v43;
                *((_DWORD *)this + 11) = --v46;
              }
              while (v46);
            }
          }
          *(unsigned char *)(*((void *)this + 1) + v43) = *((_WORD *)this + 13);
          ++*((void *)this + 2);
          LOWORD(v41) = *((_WORD *)this + 12);
          v40 = *((_DWORD *)this + 7);
LABEL_50:
          v42 = 0;
          v41 = (unsigned __int16)v41;
          *((_DWORD *)this + 6) = (unsigned __int16)v41;
          *((_DWORD *)this + 10) = 0;
        }
        while (v40 <= 0x4000);
      }
      v31 = 0;
      v35 = 0;
LABEL_41:
      ++v36;
    }
    while (v36 != v33);
    if (++v30 != v32) {
      continue;
    }
    break;
  }
  if ((v35 & 1) == 0)
  {
    v93 = *(_DWORD *)((unint64_t)__b & 0xFFFFFFFFFFFFFFFBLL | (4 * v34));
    v94 = &v112[v34];
    for (i = 1 << v93; v31 >= 1 << v93; i = 1 << v93)
    {
      gcl::ArithmeticEncoder::encode((uint64_t)this, 1, v94);
      ++v93;
      v31 -= i;
    }
    gcl::ArithmeticEncoder::encode((uint64_t)this, 0, v94);
    if (v93)
    {
      v96 = v93 - 1;
      do
      {
        v113 = 0x8000;
        gcl::ArithmeticEncoder::encode((uint64_t)this, (v31 >> v96--) & 1, &v113);
      }
      while (v96 != -1);
    }
  }
LABEL_164:
  v97 = gcl::ArithmeticEncoder::stop(this);
  result = *(unsigned int *)this;
  if (!result)
  {
    v98 = v111 + v97;
    if (!v111) {
      v98 = v97;
    }
    result = 1;
    if (v98)
    {
      v99 = v110 - v97;
      if ((v99 & 0x8000000000000000) == 0)
      {
        v100 = (a9 & ~((uint64_t)a9 >> 63)) - v99;
        v101 = a9 - v100;
        if ((uint64_t)(a9 - v100) < 0) {
          v100 = 0;
        }
        v102 = v100 & ~(v100 >> 63);
        *a10 = v102;
        if (a12)
        {
          if (v101 >= 0) {
            v103 = a8;
          }
          else {
            v103 = 0;
          }
          if (v100 >= 16)
          {
            *(_DWORD *)(v103 + 12) = v102;
            v106 = v100 - 8;
            goto LABEL_181;
          }
          v104 = v100 == 8;
          v105 = v100 < 8;
          v106 = v100 - 8;
          if (!v105)
          {
            if (v104)
            {
              v108 = -1;
LABEL_183:
              result = 0;
              *(_DWORD *)(v103 + 4) = v108;
              return result;
            }
LABEL_181:
            v107 = (unsigned __int8 *)(v103 + 8);
            v108 = -1;
            do
            {
              v109 = *v107++;
              v108 = __const__ZN3gcl12computeCRC32EPKhm_table[v109 ^ HIBYTE(v108)] ^ (v108 << 8);
              --v106;
            }
            while (v106);
            goto LABEL_183;
          }
        }
        return 0;
      }
    }
  }
  return result;
}

void sub_18A430FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t gcl::polyline::EncoderImpl::writeAttributesHeader(uint64_t a1, uint64_t a2, char a3, char a4, int a5, char a6, unsigned char *a7)
{
  if (a2 < 4) {
    return 0;
  }
  *(_DWORD *)a1 = -1214009963;
  if ((unint64_t)a2 < 9) {
    return 0;
  }
  *(unsigned char *)(a1 + 8) = 0;
  if (a2 == 9) {
    return 0;
  }
  *(unsigned char *)(a1 + 9) = 2;
  if (((a2 - 8) & 0xFFFFFFFFFFFFFFFELL) == 2) {
    return 0;
  }
  *(_WORD *)(a1 + 10) = 0;
  if ((unint64_t)a2 < 0x14) {
    return 0;
  }
  *(_DWORD *)(a1 + 16) = a5;
  if (a2 == 20) {
    return 0;
  }
  *(unsigned char *)(a1 + 20) = a3;
  if (a2 == 21) {
    return 0;
  }
  *(unsigned char *)(a1 + 21) = a4;
  if (a2 == 22) {
    return 0;
  }
  *(unsigned char *)(a1 + 22) = a6;
  if (a2 == 23) {
    return 0;
  }
  *(unsigned char *)(a1 + 23) = a7[4];
  if (a2 == 24) {
    return 0;
  }
  *(unsigned char *)(a1 + 24) = a7[5];
  if (a2 == 25) {
    return 0;
  }
  *(unsigned char *)(a1 + 25) = a7[6];
  if (a2 == 26) {
    return 0;
  }
  *(unsigned char *)(a1 + 26) = 0;
  if (a2 == 27) {
    return 0;
  }
  *(unsigned char *)(a1 + 27) = 0;
  return a1 + 28;
}

uint64_t gcl::polyline::EncoderImpl::compressAttributes(unsigned int *a1, char *a2, unsigned __int8 *a3, char a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, unsigned char *a11, char a12)
{
  uint64_t v353 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 5;
  if (a5 <= 0xFF && a2 && a7 - 256 >= 0xFFFFFFFFFFFFFF01 && (a11[5] & 0xFE) != 2)
  {
    BOOL v15 = !a11[4] || a11[4] == 3;
    BOOL v16 = !v15;
    if (!a11[5] || v16)
    {
      char v20 = a5;
      if (a3 || !a11[6])
      {
        v23 = (int32x4_t *)operator new(4 * a7);
        bzero(v23, 4 * a7);
        v335 = v23;
        v24 = (int32x4_t *)operator new(4 * a7);
        uint64_t __n = 4 * a7;
        bzero(v24, 4 * a7);
        v25 = (int32x4_t **)(a1 + 268);
        uint64_t v26 = *((void *)a1 + 134);
        unint64_t v27 = (*((void *)a1 + 135) - v26) >> 2;
        if (a7 <= v27)
        {
          if (a7 < v27) {
            *((void *)a1 + 135) = v26 + 4 * a7;
          }
        }
        else
        {
          std::vector<int>::__append((std::vector<int> *)(a1 + 268), a7 - v27);
        }
        memcpy(v335, a2, __n);
        memcpy(v24, a2, __n);
        if ((int)a6 > 1)
        {
          unint64_t v28 = a7 & 0xFFFFFFFFFFFFFFF8;
          int v29 = 1;
          LODWORD(v30) = a7;
          while (1)
          {
            uint64_t v31 = (int)v30;
            if (a7 < 8) {
              break;
            }
            unint64_t v30 = (int)v30 + v28;
            unint64_t v33 = a7 & 0xFFFFFFFFFFFFFFF8;
            v34 = v24 + 1;
            v35 = v335 + 1;
            v36 = (int32x4_t *)&a2[4 * v31 + 16];
            do
            {
              int32x4_t v37 = v36[-1];
              int32x4_t v38 = *v36;
              int32x4_t v39 = vminq_s32(*v36, *v35);
              v35[-1] = vminq_s32(v37, v35[-1]);
              int32x4_t *v35 = v39;
              int32x4_t v40 = vmaxq_s32(*v34, v38);
              v34[-1] = vmaxq_s32(v34[-1], v37);
              int32x4_t *v34 = v40;
              v35 += 2;
              v34 += 2;
              v36 += 2;
              v33 -= 8;
            }
            while (v33);
            unint64_t v32 = a7 & 0xFFFFFFFFFFFFFFF8;
            if (v28 != a7) {
              goto LABEL_29;
            }
LABEL_23:
            if (++v29 == a6) {
              goto LABEL_36;
            }
          }
          unint64_t v32 = 0;
          unint64_t v30 = (int)v30;
LABEL_29:
          unint64_t v41 = a7 - v32;
          uint64_t v42 = v32;
          v43 = &v24->i32[v32];
          v44 = &v335->i32[v42];
          do
          {
            __int32 v45 = *(_DWORD *)&a2[4 * v30];
            __int32 v46 = *v44;
            if (v45 < *v44) {
              __int32 v46 = *(_DWORD *)&a2[4 * v30];
            }
            *v44++ = v46;
            if (*v43 > v45) {
              __int32 v45 = *v43;
            }
            *v43++ = v45;
            ++v30;
            --v41;
          }
          while (v41);
          goto LABEL_23;
        }
LABEL_36:
        uint64_t v47 = 0;
        do
        {
          uint64_t v48 = v24->i32[v47] - (uint64_t)v335->i32[v47];
          if (v48 > 0xFFFFFFF)
          {
            uint64_t v12 = 5;
            goto LABEL_389;
          }
          (*v25)->i32[v47++] = v48;
        }
        while (a7 != v47);
        if (a12)
        {
          v49 = (_DWORD *)gcl::polyline::EncoderImpl::writeAttributesHeader(a8, a9, a4, v20, a6, a7, a11);
          uint64_t v51 = v50;
        }
        else
        {
          uint64_t v51 = a9;
          v49 = (_DWORD *)a8;
        }
        uint64_t v52 = 0;
        do
        {
          BOOL v56 = v51 < 4;
          v51 -= 4;
          if (v56)
          {
            uint64_t v51 = 0;
            v49 = 0;
          }
          else
          {
            *v49++ = v335->i32[v52];
          }
          unsigned int v53 = (*v25)->u32[v52];
          unsigned int v54 = 32 - __clz(v53);
          if (v53) {
            unsigned int v55 = v54;
          }
          else {
            unsigned int v55 = 0;
          }
          (*v25)->i32[v52++] = v55;
        }
        while (a7 != v52);
        uint64_t v57 = 0;
        do
        {
          while (!v51)
          {
            v49 = 0;
            if (a7 == ++v57) {
              goto LABEL_55;
            }
          }
          --v51;
          *(unsigned char *)v49 = (*v25)->i32[v57];
          v49 = (_DWORD *)((char *)v49 + 1);
          ++v57;
        }
        while (a7 != v57);
LABEL_55:
        uint64_t v318 = a8;
        v319 = v24;
        v58 = (int32x4_t *)*((void *)a1 + 137);
        unint64_t v59 = (uint64_t)(*((void *)a1 + 138) - (void)v58) >> 2;
        if (a7 * a6 <= v59)
        {
          v60 = a11;
          if (a7 * a6 < v59) {
            *((void *)a1 + 138) = (char *)v58 + 4 * a7 * a6;
          }
        }
        else
        {
          std::vector<int>::__append((std::vector<int> *)(a1 + 274), a7 * a6 - v59);
          v60 = a11;
          v58 = (int32x4_t *)*((void *)a1 + 137);
        }
        if ((int)a6 >= 1)
        {
          int v61 = 0;
          LODWORD(v62) = 0;
          unint64_t v63 = a7 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            uint64_t v64 = (int)v62;
            if (a7 >= 8)
            {
              unint64_t v65 = 0;
              v69 = &v58->i8[4 * (int)v62];
              if ((unint64_t)((char *)v58 - a2) >= 0x20 && (unint64_t)(v69 - (__int8 *)v335) >= 0x20)
              {
                uint64_t v62 = v64 + v63;
                uint64_t v70 = 4 * v64;
                v71 = (int32x4_t *)((char *)v58 + 4 * v64 + 16);
                v72 = (int32x4_t *)&a2[v70 + 16];
                unint64_t v73 = a7 & 0xFFFFFFFFFFFFFFF8;
                v74 = v335 + 1;
                do
                {
                  int32x4_t v75 = vsubq_s32(*v72, *v74);
                  v71[-1] = vsubq_s32(v72[-1], v74[-1]);
                  int32x4_t *v71 = v75;
                  v71 += 2;
                  v74 += 2;
                  v72 += 2;
                  v73 -= 8;
                }
                while (v73);
                uint64_t v64 = v62;
                unint64_t v65 = a7 & 0xFFFFFFFFFFFFFFF8;
                if (v63 == a7) {
                  goto LABEL_61;
                }
              }
            }
            else
            {
              unint64_t v65 = 0;
            }
            unint64_t v66 = a7 - v65;
            v67 = &v335->i32[v65];
            uint64_t v62 = v64;
            do
            {
              int v68 = *v67++;
              v58->i32[v62] = *(_DWORD *)&a2[4 * v62] - v68;
              ++v62;
              --v66;
            }
            while (v66);
LABEL_61:
            ++v61;
          }
          while (v61 != a6);
        }
        uint64_t v76 = 0;
        *a1 = 0;
        a1[1] = v51 & ~(v51 >> 63);
        *(void *)&long long v77 = 0xFFFF00000000;
        *((void *)&v77 + 1) = 0xFFFF00000000;
        *(_OWORD *)(a1 + 6) = v77;
        *((void *)a1 + 1) = v49;
        *((void *)a1 + 2) = 0;
        uint64_t v78 = 0x217u;
        *((void *)a1 + 5) = 0;
        do
        {
          *(_WORD *)((char *)a1 + v76 * 2 + 48) = gcl::ArithmeticEncoder::probUpdateLut[v76];
          *(_WORD *)((char *)a1 + v78 * 2) = gcl::ArithmeticEncoder::probUpdateLut[v78 - 280];
          ++v76;
          --v78;
        }
        while (v76 != 256);
        v321 = v49;
        if (v60[6] == 1)
        {
          memset_pattern16(&__b, &unk_18A643070, 4uLL);
          if ((int)a6 >= 1)
          {
            gcl::ArithmeticEncoder::encode((uint64_t)a1, *a3, &__b);
            if (a6 != 1)
            {
              uint64_t v79 = a6 - 1;
              v80 = a3 + 1;
              do
              {
                uint64_t v81 = *(v80 - 1);
                int v82 = *v80++;
                gcl::ArithmeticEncoder::encode((uint64_t)a1, v82, (_WORD *)&v344[-2] + v81);
                --v79;
              }
              while (v79);
            }
          }
          v49 = v321;
          v60 = a11;
        }
        int v83 = v60[5];
        if (v83 != 4)
        {
          if (v83 == 1)
          {
            uint64_t v350 = 0;
            long long v348 = 0u;
            *(_OWORD *)v349 = 0u;
            *(_OWORD *)v346 = 0u;
            *(_OWORD *)v347 = 0u;
            *(_OWORD *)v344 = 0u;
            long long v345 = 0u;
            long long __b = 0u;
            gcl::polyline::ACContext::init((std::vector<int> *)&__b, a7);
            int v131 = v60[6];
            v336 = 0;
            v337 = 0;
            v338 = 0;
            if (a7)
            {
              if ((a7 & 0x80000000) != 0) {
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              }
              size_t v132 = 4 * (int)a7;
              v133 = operator new(v132);
              bzero(v133, v132);
              v134 = a3;
              if ((int)a6 >= 1)
              {
                uint64_t v135 = a6;
                uint64_t __nb = (4 * a7) & 0x3FFFFFFFCLL;
                if (v131)
                {
                  uint64_t v136 = (uint64_t)v58;
                  do
                  {
                    if (*v134++)
                    {
                      v138 = v134;
                      gcl::polyline::EncoderImpl::encodeResidual((unint64_t)a1, v136, (uint64_t)v133, a7, a11[4], &__b);
                      memcpy(v133, v58, __nb);
                      v134 = v138;
                    }
                    v136 += 4 * (int)a7;
                    v58 = (int32x4_t *)((char *)v58 + v132);
                    --v135;
                  }
                  while (v135);
                }
                else
                {
                  uint64_t v316 = (uint64_t)v58;
                  do
                  {
                    gcl::polyline::EncoderImpl::encodeResidual((unint64_t)a1, v316, (uint64_t)v133, a7, a11[4], &__b);
                    memcpy(v133, v58, __nb);
                    v316 += 4 * (int)a7;
                    v58 = (int32x4_t *)((char *)v58 + v132);
                    --v135;
                  }
                  while (v135);
                }
              }
              operator delete(v133);
            }
            if (v349[0])
            {
              v349[1] = v349[0];
              operator delete(v349[0]);
            }
            v297 = v347[1];
            uint64_t v295 = v318;
            v24 = v319;
            v49 = v321;
            if (v347[1])
            {
LABEL_371:
              *(void *)&long long v348 = v297;
              operator delete(v297);
            }
LABEL_372:
            if (v346[0])
            {
              v346[1] = v346[0];
              operator delete(v346[0]);
            }
            if (v344[1])
            {
              *(void **)&long long v345 = v344[1];
              operator delete(v344[1]);
            }
            if ((void)__b)
            {
              *((void *)&__b + 1) = __b;
              operator delete((void *)__b);
            }
            goto LABEL_388;
          }
          if (!v60[5])
          {
            int v84 = v60[6];
            if (v60[4] == 3)
            {
              size_t __na = v51;
              LOWORD(v336) = 0x8000;
              if ((int)a6 < 1 || (int)a7 < 1)
              {
LABEL_387:
                uint64_t v295 = v318;
                v24 = v319;
                uint64_t v51 = __na;
                v49 = v321;
LABEL_388:
                unsigned int v301 = gcl::ArithmeticEncoder::stop((gcl::ArithmeticEncoder *)a1);
                uint64_t v12 = *a1;
                if (!v12)
                {
                  unint64_t v303 = (unint64_t)v49 + v301;
                  if (!v49) {
                    unint64_t v303 = v301;
                  }
                  uint64_t v12 = 1;
                  if (v303)
                  {
                    uint64_t v304 = v51 - v301;
                    if ((v304 & 0x8000000000000000) == 0)
                    {
                      uint64_t v305 = (a9 & ~(a9 >> 63)) - v304;
                      uint64_t v306 = a9 - v305;
                      if (a9 - v305 < 0) {
                        uint64_t v305 = 0;
                      }
                      uint64_t v307 = v305 & ~(v305 >> 63);
                      *a10 = v307;
                      if (!a12) {
                        goto LABEL_430;
                      }
                      if (v306 >= 0) {
                        uint64_t v308 = v295;
                      }
                      else {
                        uint64_t v308 = 0;
                      }
                      if (v305 >= 16) {
                        *(_DWORD *)(v308 + 12) = v307;
                      }
                      uint64_t v309 = 8;
                      if (v305 > 8) {
                        uint64_t v309 = v305;
                      }
                      uint64_t v310 = v309 - 8;
                      if (v309 == 8)
                      {
                        unsigned int v312 = -1;
                      }
                      else
                      {
                        v311 = (unsigned __int8 *)(v308 + 8);
                        unsigned int v312 = -1;
                        do
                        {
                          int v313 = *v311++;
                          unsigned int v312 = __const__ZN3gcl12computeCRC32EPKhm_table[v313 ^ HIBYTE(v312)] ^ (v312 << 8);
                          --v310;
                        }
                        while (v310);
                      }
                      if (v305 >= 8)
                      {
                        uint64_t v12 = 0;
                        *(_DWORD *)(v308 + 4) = v312;
                      }
                      else
                      {
LABEL_430:
                        uint64_t v12 = 0;
                      }
                    }
                  }
                }
                goto LABEL_389;
              }
              uint64_t v85 = 0;
              int v86 = 0;
              unsigned int v87 = 0;
              int v88 = 0;
              int v89 = 0;
              int v90 = 0x8000;
              char v91 = 1;
              while (2)
              {
                uint64_t v92 = 0;
                v93 = &v58->i8[4 * v85];
LABEL_92:
                if (v84 && !a3[v92])
                {
LABEL_91:
                  if (++v92 == a6)
                  {
                    if (++v85 == a7)
                    {
                      if ((v91 & 1) == 0)
                      {
                        if (v86 >= 1)
                        {
                          for (int i = 0; i != v86; ++i)
                          {
                            LOWORD(__b) = 0x8000;
                            gcl::ArithmeticEncoder::encode((uint64_t)a1, (v87 >> i) & 1, &__b);
                          }
                        }
                        for (int j = 1 << v89; v88 >= (1 << v89); int j = 1 << v89)
                        {
                          gcl::ArithmeticEncoder::encode((uint64_t)a1, 1, &v336);
                          ++v89;
                          v88 -= j;
                        }
                        gcl::ArithmeticEncoder::encode((uint64_t)a1, 0, &v336);
                        if (v89)
                        {
                          int v300 = v89 - 1;
                          do
                          {
                            LOWORD(__b) = 0x8000;
                            gcl::ArithmeticEncoder::encode((uint64_t)a1, (v88 >> v300--) & 1, &__b);
                          }
                          while (v300 != -1);
                        }
                      }
                      goto LABEL_387;
                    }
                    continue;
                  }
                  goto LABEL_92;
                }
                break;
              }
              if (v91)
              {
                int v88 = 0;
                char v91 = 0;
                int v86 = (*v25)->i32[v85];
                unsigned int v87 = *(_DWORD *)&v93[4 * v92 * a7];
                goto LABEL_91;
              }
              if (*(_DWORD *)&v93[4 * v92 * a7] == v87)
              {
                char v91 = 0;
                ++v88;
                goto LABEL_91;
              }
              unsigned int v94 = a1[7];
              if (v86 >= 1)
              {
                int v95 = 0;
                while (1)
                {
                  unsigned int v96 = (unsigned __int16)(v94 >> 1);
                  if (((v87 >> v95) & 1) == 0) {
                    break;
                  }
                  v94 -= v96;
                  a1[6] += v96;
                  a1[7] = v94;
                  if (v94 <= 0x4000) {
                    goto LABEL_104;
                  }
LABEL_99:
                  if (++v95 == v86) {
                    goto LABEL_119;
                  }
                }
                unsigned int v94 = (unsigned __int16)(v94 >> 1);
                a1[7] = v96;
                if (v96 > 0x4000) {
                  goto LABEL_99;
                }
LABEL_104:
                unsigned int v97 = a1[6];
                unsigned int v98 = a1[10];
                while (2)
                {
                  v97 *= 2;
                  v94 *= 2;
                  a1[6] = v97;
                  a1[7] = v94;
                  a1[10] = ++v98;
                  if (v98 != 8) {
                    goto LABEL_107;
                  }
                  uint64_t v99 = *((void *)a1 + 2);
                  uint64_t v100 = (int)a1[11];
                  if (v99 + v100 + 1 > (unint64_t)a1[1]) {
                    goto LABEL_99;
                  }
                  if (HIBYTE(v97))
                  {
                    ++*(unsigned char *)(v99 + *((void *)a1 + 1) - 1);
                    uint64_t v99 = *((void *)a1 + 2);
                    if (a1[11])
                    {
                      do
                      {
                        *(unsigned char *)(*((void *)a1 + 1) + v99) = 0;
                        unsigned int v101 = a1[11];
                        uint64_t v99 = *((void *)a1 + 2) + 1;
                        *((void *)a1 + 2) = v99;
                        a1[11] = --v101;
                      }
                      while (v101);
                    }
                  }
                  else
                  {
                    if ((v94 + v97) >> 24)
                    {
                      a1[11] = v100 + 1;
LABEL_106:
                      unsigned int v98 = 0;
                      unsigned int v97 = (unsigned __int16)v97;
                      a1[6] = (unsigned __int16)v97;
                      a1[10] = 0;
LABEL_107:
                      if (v94 > 0x4000) {
                        goto LABEL_99;
                      }
                      continue;
                    }
                    if (v100)
                    {
                      do
                      {
                        *(unsigned char *)(*((void *)a1 + 1) + v99) = -1;
                        unsigned int v102 = a1[11];
                        uint64_t v99 = *((void *)a1 + 2) + 1;
                        *((void *)a1 + 2) = v99;
                        a1[11] = --v102;
                      }
                      while (v102);
                    }
                  }
                  break;
                }
                *(unsigned char *)(*((void *)a1 + 1) + v99) = *((_WORD *)a1 + 13);
                ++*((void *)a1 + 2);
                LOWORD(v97) = *((_WORD *)a1 + 12);
                unsigned int v94 = a1[7];
                goto LABEL_106;
              }
LABEL_119:
              int v103 = 1 << v89;
              if (1 << v89 > v88)
              {
                int v104 = v89;
                unsigned int v105 = v88;
LABEL_121:
                unsigned int v106 = v94 * (unsigned __int16)v90;
                unsigned int v107 = HIWORD(v106);
                v90 += *((unsigned __int16 *)a1 + (BYTE1(v90) ^ 0xFFu) + 24);
                a1[7] = HIWORD(v106);
                LOWORD(v336) = v90;
                if (v106 <= 0x4000FFFF)
                {
                  unsigned int v108 = a1[6];
                  unsigned int v109 = a1[10];
                  while (2)
                  {
                    v108 *= 2;
                    v107 *= 2;
                    a1[6] = v108;
                    a1[7] = v107;
                    a1[10] = ++v109;
                    if (v109 != 8) {
                      goto LABEL_125;
                    }
                    uint64_t v110 = *((void *)a1 + 2);
                    uint64_t v111 = (int)a1[11];
                    if (v110 + v111 + 1 > (unint64_t)a1[1]) {
                      goto LABEL_137;
                    }
                    if (HIBYTE(v108))
                    {
                      ++*(unsigned char *)(v110 + *((void *)a1 + 1) - 1);
                      uint64_t v110 = *((void *)a1 + 2);
                      if (a1[11])
                      {
                        do
                        {
                          *(unsigned char *)(*((void *)a1 + 1) + v110) = 0;
                          unsigned int v112 = a1[11];
                          uint64_t v110 = *((void *)a1 + 2) + 1;
                          *((void *)a1 + 2) = v110;
                          a1[11] = --v112;
                        }
                        while (v112);
                      }
                    }
                    else
                    {
                      if ((v107 + v108) >> 24)
                      {
                        a1[11] = v111 + 1;
LABEL_124:
                        unsigned int v109 = 0;
                        unsigned int v108 = (unsigned __int16)v108;
                        a1[6] = (unsigned __int16)v108;
                        a1[10] = 0;
LABEL_125:
                        if (v107 > 0x4000) {
                          goto LABEL_137;
                        }
                        continue;
                      }
                      if (v111)
                      {
                        do
                        {
                          *(unsigned char *)(*((void *)a1 + 1) + v110) = -1;
                          unsigned int v113 = a1[11];
                          uint64_t v110 = *((void *)a1 + 2) + 1;
                          *((void *)a1 + 2) = v110;
                          a1[11] = --v113;
                        }
                        while (v113);
                      }
                    }
                    break;
                  }
                  *(unsigned char *)(*((void *)a1 + 1) + v110) = *((_WORD *)a1 + 13);
                  ++*((void *)a1 + 2);
                  LOWORD(v108) = *((_WORD *)a1 + 12);
                  unsigned int v107 = a1[7];
                  goto LABEL_124;
                }
LABEL_137:
                if (!v104)
                {
LABEL_138:
                  char v91 = 0;
                  if (v88 >> v89) {
                    BOOL v114 = 1;
                  }
                  else {
                    BOOL v114 = v89 == 0;
                  }
                  if (v114) {
                    int v115 = v88 >> v89 > 1;
                  }
                  else {
                    int v115 = -1;
                  }
                  v89 += v115;
                  unsigned int v87 = *(_DWORD *)&v93[4 * v92 * a7];
                  int v86 = (*v25)->i32[v85];
                  int v88 = 0;
                  goto LABEL_91;
                }
                while (2)
                {
                  --v104;
                  unsigned int v116 = (unsigned __int16)(v107 >> 1);
                  if ((v105 >> v104))
                  {
                    v107 -= v116;
                    a1[6] += v116;
                    a1[7] = v107;
                    if (v107 <= 0x4000) {
                      break;
                    }
                    goto LABEL_145;
                  }
                  unsigned int v107 = (unsigned __int16)(v107 >> 1);
                  a1[7] = v116;
                  if (v116 > 0x4000)
                  {
LABEL_145:
                    if (!v104) {
                      goto LABEL_138;
                    }
                    continue;
                  }
                  break;
                }
                unsigned int v117 = a1[6];
                unsigned int v118 = a1[10];
                while (2)
                {
                  v117 *= 2;
                  v107 *= 2;
                  a1[6] = v117;
                  a1[7] = v107;
                  a1[10] = ++v118;
                  if (v118 != 8) {
                    goto LABEL_153;
                  }
                  uint64_t v119 = *((void *)a1 + 2);
                  uint64_t v120 = (int)a1[11];
                  if (v119 + v120 + 1 > (unint64_t)a1[1]) {
                    goto LABEL_145;
                  }
                  if (HIBYTE(v117))
                  {
                    ++*(unsigned char *)(v119 + *((void *)a1 + 1) - 1);
                    uint64_t v119 = *((void *)a1 + 2);
                    if (a1[11])
                    {
                      do
                      {
                        *(unsigned char *)(*((void *)a1 + 1) + v119) = 0;
                        unsigned int v121 = a1[11];
                        uint64_t v119 = *((void *)a1 + 2) + 1;
                        *((void *)a1 + 2) = v119;
                        a1[11] = --v121;
                      }
                      while (v121);
                    }
                  }
                  else
                  {
                    if ((v107 + v117) >> 24)
                    {
                      a1[11] = v120 + 1;
LABEL_152:
                      unsigned int v118 = 0;
                      unsigned int v117 = (unsigned __int16)v117;
                      a1[6] = (unsigned __int16)v117;
                      a1[10] = 0;
LABEL_153:
                      if (v107 > 0x4000) {
                        goto LABEL_145;
                      }
                      continue;
                    }
                    if (v120)
                    {
                      do
                      {
                        *(unsigned char *)(*((void *)a1 + 1) + v119) = -1;
                        unsigned int v122 = a1[11];
                        uint64_t v119 = *((void *)a1 + 2) + 1;
                        *((void *)a1 + 2) = v119;
                        a1[11] = --v122;
                      }
                      while (v122);
                    }
                  }
                  break;
                }
                *(unsigned char *)(*((void *)a1 + 1) + v119) = *((_WORD *)a1 + 13);
                ++*((void *)a1 + 2);
                LOWORD(v117) = *((_WORD *)a1 + 12);
                unsigned int v107 = a1[7];
                goto LABEL_152;
              }
              unsigned int v123 = a1[6];
              unsigned int v105 = v88;
              int v104 = v89;
              while (1)
              {
                unsigned int v124 = (v94 * (unsigned __int16)v90) >> 16;
                v123 += v124;
                int v125 = *((unsigned __int16 *)a1 + BYTE1(v90) + 24);
                v94 -= v124;
                a1[6] = v123;
                a1[7] = v94;
                if (v94 <= 0x4000) {
                  break;
                }
LABEL_166:
                v90 -= v125;
                ++v104;
                v105 -= v103;
                int v103 = 1 << v104;
                if (v105 < 1 << v104) {
                  goto LABEL_121;
                }
              }
              unsigned int v126 = a1[10];
              while (2)
              {
                v123 *= 2;
                v94 *= 2;
                a1[6] = v123;
                a1[7] = v94;
                a1[10] = ++v126;
                if (v126 != 8) {
                  goto LABEL_171;
                }
                uint64_t v127 = *((void *)a1 + 2);
                uint64_t v128 = (int)a1[11];
                if (v127 + v128 + 1 > (unint64_t)a1[1]) {
                  goto LABEL_166;
                }
                if (HIBYTE(v123))
                {
                  ++*(unsigned char *)(v127 + *((void *)a1 + 1) - 1);
                  uint64_t v127 = *((void *)a1 + 2);
                  if (a1[11])
                  {
                    do
                    {
                      *(unsigned char *)(*((void *)a1 + 1) + v127) = 0;
                      unsigned int v129 = a1[11];
                      uint64_t v127 = *((void *)a1 + 2) + 1;
                      *((void *)a1 + 2) = v127;
                      a1[11] = --v129;
                    }
                    while (v129);
                  }
                }
                else
                {
                  if ((v94 + v123) >> 24)
                  {
                    a1[11] = v128 + 1;
LABEL_170:
                    unsigned int v126 = 0;
                    unsigned int v123 = (unsigned __int16)v123;
                    a1[6] = (unsigned __int16)v123;
                    a1[10] = 0;
LABEL_171:
                    if (v94 > 0x4000) {
                      goto LABEL_166;
                    }
                    continue;
                  }
                  if (v128)
                  {
                    do
                    {
                      *(unsigned char *)(*((void *)a1 + 1) + v127) = -1;
                      unsigned int v130 = a1[11];
                      uint64_t v127 = *((void *)a1 + 2) + 1;
                      *((void *)a1 + 2) = v127;
                      a1[11] = --v130;
                    }
                    while (v130);
                  }
                }
                break;
              }
              *(unsigned char *)(*((void *)a1 + 1) + v127) = *((_WORD *)a1 + 13);
              ++*((void *)a1 + 2);
              LOWORD(v123) = *((_WORD *)a1 + 12);
              unsigned int v94 = a1[7];
              goto LABEL_170;
            }
            uint64_t v350 = 0;
            long long v348 = 0u;
            *(_OWORD *)v349 = 0u;
            *(_OWORD *)v346 = 0u;
            *(_OWORD *)v347 = 0u;
            *(_OWORD *)v344 = 0u;
            long long v345 = 0u;
            long long __b = 0u;
            gcl::polyline::ACContext::init((std::vector<int> *)&__b, a7);
            v336 = 0;
            v337 = 0;
            v338 = 0;
            v142 = a3;
            if (a7)
            {
              if ((a7 & 0x80000000) != 0) {
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              }
              v143 = operator new(4 * (int)a7);
              bzero(v143, 4 * (int)a7);
              v142 = a3;
            }
            else
            {
              v143 = 0;
            }
            if ((int)a6 >= 1)
            {
              a6 = a6;
              if (v84)
              {
                do
                {
                  if (*v142++)
                  {
                    v315 = v142;
                    gcl::polyline::EncoderImpl::encodeResidual((unint64_t)a1, (uint64_t)v58, (uint64_t)v143, a7, a11[4], &__b);
                    v142 = v315;
                  }
                  v58 = (int32x4_t *)((char *)v58 + 4 * (int)a7);
                  --a6;
                }
                while (a6);
              }
              else
              {
                do
                {
                  gcl::polyline::EncoderImpl::encodeResidual((unint64_t)a1, (uint64_t)v58, (uint64_t)v143, a7, a11[4], &__b);
                  v58 = (int32x4_t *)((char *)v58 + 4 * (int)a7);
                  --a6;
                }
                while (a6);
              }
            }
            if (v143) {
              operator delete(v143);
            }
            v296 = v349[0];
            uint64_t v295 = v318;
            v24 = v319;
            if (!v349[0])
            {
LABEL_370:
              v297 = v347[1];
              if (v347[1]) {
                goto LABEL_371;
              }
              goto LABEL_372;
            }
LABEL_369:
            v349[1] = v296;
            operator delete(v296);
            goto LABEL_370;
          }
          uint64_t v12 = 5;
LABEL_389:
          operator delete(v24);
          operator delete(v335);
          return v12;
        }
        uint64_t v350 = 0;
        long long v348 = 0u;
        *(_OWORD *)v349 = 0u;
        *(_OWORD *)v346 = 0u;
        *(_OWORD *)v347 = 0u;
        *(_OWORD *)v344 = 0u;
        long long v345 = 0u;
        long long __b = 0u;
        gcl::polyline::ACContext::init((std::vector<int> *)&__b, a7);
        unsigned __int16 v342 = 0x8000;
        memset_pattern16(&v339, &unk_18A643070, 6uLL);
        int v323 = v60[6];
        v336 = 0;
        v337 = 0;
        v338 = 0;
        if (!a7)
        {
          int v320 = 0;
          __nc = 0;
          __p = 0;
          uint64_t v351 = -1;
          uint64_t v352 = -1;
LABEL_206:
          v151 = a3;
          if ((int)a6 < 1)
          {
LABEL_364:
            if (__p) {
              operator delete(__p);
            }
            uint64_t v295 = v318;
            v24 = v319;
            if (__nc) {
              operator delete(__nc);
            }
            v296 = v349[0];
            if (!v349[0]) {
              goto LABEL_370;
            }
            goto LABEL_369;
          }
          uint64_t v152 = 0;
          int v153 = 0;
          uint64_t v322 = a6;
          while (1)
          {
            if (v323 && !v151[v152]) {
              goto LABEL_211;
            }
            uint64_t v327 = (uint64_t)v58->i64 + 4 * v152 * (int)a7;
            int v161 = *(_DWORD *)((char *)dword_18A643010 + (((67584 - (unint64_t)v342) >> 10) & 0x3FFFFFFFFFFFFCLL))
                 + v320;
            char v324 = v153 + 3;
            int v162 = *((_DWORD *)&v351 + ((v153 + 3) & 3));
            int v326 = v153;
            if (v60[7])
            {
              int v330 = v60[4];
              unint64_t v328 = ((unint64_t)v342 + 2048) >> 12;
              uint64_t v329 = v339;
              if (v162 == -1)
              {
                int v154 = -1;
              }
              else
              {
                if (a7)
                {
                  uint64_t v163 = v162 * (int)a7;
                  if (a7 < 8uLL)
                  {
                    unint64_t v164 = 0;
                    goto LABEL_250;
                  }
                  unint64_t v164 = 0;
                  if ((unint64_t)((char *)__nc - (char *)v58 - 4 * v163) < 0x20) {
                    goto LABEL_250;
                  }
                  if ((unint64_t)((char *)__nc - (char *)v58) < 0x20) {
                    goto LABEL_250;
                  }
                  v177 = (int32x4_t *)(__nc + 4);
                  unint64_t v178 = a7 - (a7 & 7);
                  v179 = v58;
                  do
                  {
                    int32x4_t v180 = vsubq_s32(v179[1], *(int32x4_t *)((char *)v179 + 4 * v163 + 16));
                    v177[-1] = vsubq_s32(*v179, *(int32x4_t *)((char *)v179 + 4 * v163));
                    int32x4_t *v177 = v180;
                    v179 += 2;
                    v177 += 2;
                    v178 -= 8;
                  }
                  while (v178);
                  unint64_t v164 = a7 - (a7 & 7);
                  if ((a7 & 7) != 0)
                  {
LABEL_250:
                    unint64_t v181 = a7 - v164;
                    uint64_t v182 = v164;
                    v183 = &__nc[v164];
                    v184 = &v58->i32[v182];
                    do
                    {
                      __int32 v185 = v184[v163];
                      int v186 = *v184++;
                      *v183++ = v186 - v185;
                      --v181;
                    }
                    while (v181);
                  }
                }
                int v187 = gcl::polyline::EncoderImpl::estimateBitsAccurate(__nc, a7, v330, (unsigned __int16 **)&__b);
                if (dword_18A643010[v328]
                   + v187
                   + *(_DWORD *)((char *)dword_18A643010 + (((v329 + 2048) >> 10) & 0x7CLL))
                   + *(_DWORD *)((char *)dword_18A643010 + (((v340 + 2048) >> 10) & 0x7CLL)) >= v161)
                {
                  int v154 = -1;
                }
                else
                {
                  int v161 = dword_18A643010[v328]
                       + v187
                       + *(_DWORD *)((char *)dword_18A643010 + (((v329 + 2048) >> 10) & 0x7CLL))
                       + *(_DWORD *)((char *)dword_18A643010 + (((v340 + 2048) >> 10) & 0x7CLL));
                  int v154 = 0;
                }
              }
              int v188 = *((_DWORD *)&v351 + (v153 & 3));
              if (v188 != -1)
              {
                int v189 = v154;
                if (a7)
                {
                  uint64_t v190 = v188 * (int)a7;
                  if (a7 < 8uLL)
                  {
                    unint64_t v191 = 0;
                    goto LABEL_264;
                  }
                  unint64_t v191 = 0;
                  if ((unint64_t)((char *)__nc - (char *)v58 - 4 * v190) < 0x20) {
                    goto LABEL_264;
                  }
                  if ((unint64_t)((char *)__nc - (char *)v58) < 0x20) {
                    goto LABEL_264;
                  }
                  v192 = (int32x4_t *)(__nc + 4);
                  unint64_t v193 = a7 - (a7 & 7);
                  v194 = v58;
                  do
                  {
                    int32x4_t v195 = vsubq_s32(v194[1], *(int32x4_t *)((char *)v194 + 4 * v190 + 16));
                    v192[-1] = vsubq_s32(*v194, *(int32x4_t *)((char *)v194 + 4 * v190));
                    int32x4_t *v192 = v195;
                    v194 += 2;
                    v192 += 2;
                    v193 -= 8;
                  }
                  while (v193);
                  unint64_t v191 = a7 - (a7 & 7);
                  if ((a7 & 7) != 0)
                  {
LABEL_264:
                    unint64_t v196 = a7 - v191;
                    uint64_t v197 = v191;
                    v198 = &__nc[v191];
                    v199 = &v58->i32[v197];
                    do
                    {
                      __int32 v200 = v199[v190];
                      int v201 = *v199++;
                      *v198++ = v201 - v200;
                      --v196;
                    }
                    while (v196);
                  }
                }
                int v202 = gcl::polyline::EncoderImpl::estimateBitsAccurate(__nc, a7, v330, (unsigned __int16 **)&__b);
                if (dword_18A643010[v328]
                   + v202
                   + *(_DWORD *)((char *)dword_18A643010 + (((v329 + 2048) >> 10) & 0x7CLL))
                   + *(_DWORD *)((char *)dword_18A643010
                               + (((67584 - (unint64_t)v340) >> 10) & 0x3FFFFFFFFFFFFCLL)) >= v161)
                {
                  int v154 = v189;
                }
                else
                {
                  int v161 = dword_18A643010[v328]
                       + v202
                       + *(_DWORD *)((char *)dword_18A643010 + (((v329 + 2048) >> 10) & 0x7CLL))
                       + *(_DWORD *)((char *)dword_18A643010
                                   + (((67584 - (unint64_t)v340) >> 10) & 0x3FFFFFFFFFFFFCLL));
                  int v154 = 1;
                }
              }
              int v203 = *((_DWORD *)&v351 + (((_BYTE)v153 + 1) & 3));
              if (v203 != -1)
              {
                int v204 = v154;
                if (a7)
                {
                  uint64_t v205 = v203 * (int)a7;
                  if (a7 < 8uLL)
                  {
                    unint64_t v206 = 0;
                    goto LABEL_278;
                  }
                  unint64_t v206 = 0;
                  if ((unint64_t)((char *)__nc - (char *)v58 - 4 * v205) < 0x20) {
                    goto LABEL_278;
                  }
                  if ((unint64_t)((char *)__nc - (char *)v58) < 0x20) {
                    goto LABEL_278;
                  }
                  v207 = (int32x4_t *)(__nc + 4);
                  unint64_t v208 = a7 - (a7 & 7);
                  v209 = v58;
                  do
                  {
                    int32x4_t v210 = vsubq_s32(v209[1], *(int32x4_t *)((char *)v209 + 4 * v205 + 16));
                    v207[-1] = vsubq_s32(*v209, *(int32x4_t *)((char *)v209 + 4 * v205));
                    int32x4_t *v207 = v210;
                    v209 += 2;
                    v207 += 2;
                    v208 -= 8;
                  }
                  while (v208);
                  unint64_t v206 = a7 - (a7 & 7);
                  if ((a7 & 7) != 0)
                  {
LABEL_278:
                    unint64_t v211 = a7 - v206;
                    uint64_t v212 = v206;
                    v213 = &__nc[v206];
                    v214 = &v58->i32[v212];
                    do
                    {
                      __int32 v215 = v214[v205];
                      int v216 = *v214++;
                      *v213++ = v216 - v215;
                      --v211;
                    }
                    while (v211);
                  }
                }
                int v217 = gcl::polyline::EncoderImpl::estimateBitsAccurate(__nc, a7, v330, (unsigned __int16 **)&__b);
                if (dword_18A643010[v328]
                   + v217
                   + *(_DWORD *)((char *)dword_18A643010
                               + (((unint64_t)(67584 - v329) >> 10) & 0x3FFFFFFFFFFFFCLL))
                   + *(_DWORD *)((char *)dword_18A643010 + (((v341 + 2048) >> 10) & 0x7CLL)) >= v161)
                {
                  int v154 = v204;
                }
                else
                {
                  int v161 = dword_18A643010[v328]
                       + v217
                       + *(_DWORD *)((char *)dword_18A643010
                                   + (((unint64_t)(67584 - v329) >> 10) & 0x3FFFFFFFFFFFFCLL))
                       + *(_DWORD *)((char *)dword_18A643010 + (((v341 + 2048) >> 10) & 0x7CLL));
                  int v154 = 2;
                }
              }
              int v218 = *((_DWORD *)&v351 + (((_BYTE)v153 + 2) & 3));
              if (v218 == -1) {
                goto LABEL_362;
              }
              int v219 = v154;
              if (a7)
              {
                uint64_t v220 = v218 * (int)a7;
                if (a7 < 8uLL)
                {
                  unint64_t v221 = 0;
                  goto LABEL_292;
                }
                unint64_t v221 = 0;
                if ((unint64_t)((char *)__nc - (char *)v58 - 4 * v220) < 0x20) {
                  goto LABEL_292;
                }
                if ((unint64_t)((char *)__nc - (char *)v58) < 0x20) {
                  goto LABEL_292;
                }
                v222 = (int32x4_t *)(__nc + 4);
                unint64_t v223 = a7 - (a7 & 7);
                v224 = v58;
                do
                {
                  int32x4_t v225 = vsubq_s32(v224[1], *(int32x4_t *)((char *)v224 + 4 * v220 + 16));
                  v222[-1] = vsubq_s32(*v224, *(int32x4_t *)((char *)v224 + 4 * v220));
                  int32x4_t *v222 = v225;
                  v224 += 2;
                  v222 += 2;
                  v223 -= 8;
                }
                while (v223);
                unint64_t v221 = a7 - (a7 & 7);
                if ((a7 & 7) != 0)
                {
LABEL_292:
                  unint64_t v226 = a7 - v221;
                  uint64_t v227 = v221;
                  v228 = &__nc[v221];
                  v229 = &v58->i32[v227];
                  do
                  {
                    __int32 v230 = v229[v220];
                    int v231 = *v229++;
                    *v228++ = v231 - v230;
                    --v226;
                  }
                  while (v226);
                }
              }
              int v232 = gcl::polyline::EncoderImpl::estimateBitsAccurate(__nc, a7, v330, (unsigned __int16 **)&__b);
              int v154 = v219;
              if (dword_18A643010[v328]
                 + v232
                 + *(_DWORD *)((char *)dword_18A643010 + (((unint64_t)(67584 - v329) >> 10) & 0x3FFFFFFFFFFFFCLL))
                 + *(_DWORD *)((char *)dword_18A643010 + (((67584 - (unint64_t)v341) >> 10) & 0x3FFFFFFFFFFFFCLL)) < v161)
                goto LABEL_208;
              goto LABEL_362;
            }
            if (!a7)
            {
              BOOL v15 = v162 == -1;
              int v168 = v162 == -1;
              int v169 = v161 & (v161 >> 31);
              if (v15) {
                int v169 = *(_DWORD *)((char *)dword_18A643010
              }
                                 + (((67584 - (unint64_t)v342) >> 10) & 0x3FFFFFFFFFFFFCLL))
                     + v320;
              if (v161 < 1) {
                int v168 = 1;
              }
              int v170 = v168 << 31 >> 31;
              BOOL v171 = *((_DWORD *)&v351 + (v153 & 3)) == -1;
              if (v169 >= 1 && *((_DWORD *)&v351 + (v153 & 3)) != -1) {
                int v170 = 1;
              }
              BOOL v173 = v169 > 0;
              BOOL v174 = !v171 || !v173;
              if (v171 && v173) {
                int v175 = 2;
              }
              else {
                int v175 = v170;
              }
              if (v174) {
                int v176 = v170;
              }
              else {
                int v176 = 3;
              }
              if (*((_DWORD *)&v351 + (((_BYTE)v153 + 1) & 3)) == -1) {
                int v175 = v176;
              }
              else {
                int v170 = v175;
              }
              if (*((_DWORD *)&v351 + (((_BYTE)v153 + 2) & 3)) == -1) {
                int v154 = v170;
              }
              else {
                int v154 = v175;
              }
              goto LABEL_362;
            }
            if (v162 == -1)
            {
              int v154 = -1;
              goto LABEL_313;
            }
            uint64_t v165 = v162 * (int)a7;
            if (a7 >= 8uLL)
            {
              unint64_t v166 = 0;
              v167 = __nc;
              if ((unint64_t)((char *)__nc - (char *)v58 - 4 * v165) >= 0x20
                && (unint64_t)((char *)__nc - (char *)v58) >= 0x20)
              {
                v233 = (int32x4_t *)(__nc + 4);
                unint64_t v234 = a7 - (a7 & 7);
                v235 = v58;
                do
                {
                  int32x4_t v236 = vsubq_s32(v235[1], *(int32x4_t *)((char *)v235 + 4 * v165 + 16));
                  v233[-1] = vsubq_s32(*v235, *(int32x4_t *)((char *)v235 + 4 * v165));
                  int32x4_t *v233 = v236;
                  v235 += 2;
                  v233 += 2;
                  v234 -= 8;
                }
                while (v234);
                unint64_t v166 = a7 - (a7 & 7);
                if ((a7 & 7) == 0) {
                  goto LABEL_304;
                }
              }
            }
            else
            {
              unint64_t v166 = 0;
              v167 = __nc;
            }
            unint64_t v237 = a7 - v166;
            uint64_t v238 = v166;
            v239 = &v167[v166];
            v240 = &v58->i32[v238];
            do
            {
              __int32 v241 = v240[v165];
              int v242 = *v240++;
              *v239++ = v242 - v241;
              --v237;
            }
            while (v237);
LABEL_304:
            int v243 = *v167;
            if (*v167 < 0) {
              int v243 = -v243;
            }
            int v244 = __clz(v243 + 1) * a7;
            int v245 = -v244;
            if (-v244 < v161) {
              int v246 = -v244;
            }
            else {
              int v246 = v161;
            }
            if (v161 > v245) {
              int v154 = 0;
            }
            else {
              int v154 = -1;
            }
            int v161 = v246;
LABEL_313:
            int v247 = *((_DWORD *)&v351 + (v153 & 3));
            if (v247 == -1) {
              goto LABEL_331;
            }
            uint64_t v248 = v247 * (int)a7;
            if (a7 >= 8uLL)
            {
              unint64_t v249 = 0;
              if ((unint64_t)((char *)__nc - (char *)v58 - 4 * v248) >= 0x20
                && (unint64_t)((char *)__nc - (char *)v58) >= 0x20)
              {
                v250 = (int32x4_t *)(__nc + 4);
                unint64_t v251 = a7 - (a7 & 7);
                v252 = v58;
                do
                {
                  int32x4_t v253 = vsubq_s32(v252[1], *(int32x4_t *)((char *)v252 + 4 * v248 + 16));
                  v250[-1] = vsubq_s32(*v252, *(int32x4_t *)((char *)v252 + 4 * v248));
                  int32x4_t *v250 = v253;
                  v252 += 2;
                  v250 += 2;
                  v251 -= 8;
                }
                while (v251);
                unint64_t v249 = a7 - (a7 & 7);
                if ((a7 & 7) == 0) {
                  goto LABEL_323;
                }
              }
            }
            else
            {
              unint64_t v249 = 0;
            }
            unint64_t v254 = a7 - v249;
            uint64_t v255 = v249;
            v256 = &__nc[v249];
            v257 = &v58->i32[v255];
            do
            {
              __int32 v258 = v257[v248];
              int v259 = *v257++;
              *v256++ = v259 - v258;
              --v254;
            }
            while (v254);
LABEL_323:
            int v260 = *__nc;
            if (*__nc < 0) {
              int v260 = -v260;
            }
            int v261 = __clz(v260 + 1) * a7;
            int v262 = -v261;
            if (-v261 < v161) {
              int v263 = -v261;
            }
            else {
              int v263 = v161;
            }
            if (v161 > v262) {
              int v154 = 1;
            }
            int v161 = v263;
LABEL_331:
            int v264 = *((_DWORD *)&v351 + (((_BYTE)v153 + 1) & 3));
            if (v264 == -1) {
              goto LABEL_349;
            }
            uint64_t v265 = v264 * (int)a7;
            if (a7 >= 8uLL)
            {
              unint64_t v266 = 0;
              if ((unint64_t)((char *)__nc - (char *)v58 - 4 * v265) >= 0x20
                && (unint64_t)((char *)__nc - (char *)v58) >= 0x20)
              {
                v267 = (int32x4_t *)(__nc + 4);
                unint64_t v268 = a7 - (a7 & 7);
                v269 = v58;
                do
                {
                  int32x4_t v270 = vsubq_s32(v269[1], *(int32x4_t *)((char *)v269 + 4 * v265 + 16));
                  v267[-1] = vsubq_s32(*v269, *(int32x4_t *)((char *)v269 + 4 * v265));
                  int32x4_t *v267 = v270;
                  v269 += 2;
                  v267 += 2;
                  v268 -= 8;
                }
                while (v268);
                unint64_t v266 = a7 - (a7 & 7);
                if ((a7 & 7) == 0) {
                  goto LABEL_341;
                }
              }
            }
            else
            {
              unint64_t v266 = 0;
            }
            unint64_t v271 = a7 - v266;
            uint64_t v272 = v266;
            v273 = &__nc[v266];
            v274 = &v58->i32[v272];
            do
            {
              __int32 v275 = v274[v265];
              int v276 = *v274++;
              *v273++ = v276 - v275;
              --v271;
            }
            while (v271);
LABEL_341:
            int v277 = *__nc;
            if (*__nc < 0) {
              int v277 = -v277;
            }
            int v278 = __clz(v277 + 1) * a7;
            int v279 = -v278;
            if (-v278 < v161) {
              int v280 = -v278;
            }
            else {
              int v280 = v161;
            }
            if (v161 > v279) {
              int v154 = 2;
            }
            int v161 = v280;
LABEL_349:
            int v281 = *((_DWORD *)&v351 + (((_BYTE)v153 + 2) & 3));
            if (v281 == -1) {
              goto LABEL_362;
            }
            uint64_t v282 = v281 * (int)a7;
            if (a7 < 8uLL)
            {
              unint64_t v283 = 0;
LABEL_357:
              unint64_t v288 = a7 - v283;
              uint64_t v289 = v283;
              v290 = &__nc[v283];
              v291 = &v58->i32[v289];
              do
              {
                __int32 v292 = v291[v282];
                int v293 = *v291++;
                *v290++ = v293 - v292;
                --v288;
              }
              while (v288);
              goto LABEL_359;
            }
            unint64_t v283 = 0;
            if ((unint64_t)((char *)__nc - (char *)v58 - 4 * v282) < 0x20) {
              goto LABEL_357;
            }
            if ((unint64_t)((char *)__nc - (char *)v58) < 0x20) {
              goto LABEL_357;
            }
            v284 = (int32x4_t *)(__nc + 4);
            unint64_t v285 = a7 - (a7 & 7);
            v286 = v58;
            do
            {
              int32x4_t v287 = vsubq_s32(v286[1], *(int32x4_t *)((char *)v286 + 4 * v282 + 16));
              v284[-1] = vsubq_s32(*v286, *(int32x4_t *)((char *)v286 + 4 * v282));
              int32x4_t *v284 = v287;
              v286 += 2;
              v284 += 2;
              v285 -= 8;
            }
            while (v285);
            unint64_t v283 = a7 - (a7 & 7);
            if ((a7 & 7) != 0) {
              goto LABEL_357;
            }
LABEL_359:
            int v294 = *__nc;
            if (*__nc < 0) {
              int v294 = -v294;
            }
            if (v161 > (signed int)-(__clz(v294 + 1) * a7))
            {
LABEL_208:
              int v154 = 3;
              goto LABEL_209;
            }
LABEL_362:
            if (v154 == -1)
            {
              gcl::ArithmeticEncoder::encode((uint64_t)a1, 1, &v342);
              gcl::polyline::EncoderImpl::encodeResidual((unint64_t)a1, v327, (uint64_t)__p, a7, 0, 0);
              v60 = a11;
              goto LABEL_210;
            }
LABEL_209:
            int v155 = *((_DWORD *)&v351 + (((_BYTE)v154 + v324) & 3));
            uint64_t v156 = v152;
            unsigned int v157 = v154;
            gcl::ArithmeticEncoder::encode((uint64_t)a1, 0, &v342);
            unsigned int v158 = v157 >> 1;
            gcl::ArithmeticEncoder::encode((uint64_t)a1, (v157 >> 1) & 1, &v339);
            int v159 = v157 & 1;
            uint64_t v152 = v156;
            unsigned int v160 = v158 + 1;
            v49 = v321;
            gcl::ArithmeticEncoder::encode((uint64_t)a1, v159, &v339 + v160);
            v60 = a11;
            gcl::polyline::EncoderImpl::encodeResidual((unint64_t)a1, v327, (uint64_t)v58->i64 + 4 * v155 * (int)a7, a7, a11[4], &__b);
LABEL_210:
            *((_DWORD *)&v351 + (v326 & 3)) = v152;
            int v153 = v326 + 1;
            v151 = a3;
LABEL_211:
            if (++v152 == v322) {
              goto LABEL_364;
            }
          }
        }
        if ((a7 & 0x80000000) != 0) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        v336 = (char *)operator new(4 * (int)a7);
        v338 = &v336[4 * (int)a7];
        bzero(v336, 4 * (int)a7);
        __nc = (int *)v336;
        v337 = v338;
        uint64_t v351 = -1;
        uint64_t v352 = -1;
        v139 = *v25;
        if (a7 >= 8uLL)
        {
          unint64_t v140 = a7 - (a7 & 7);
          v144 = v139 + 1;
          int32x4_t v145 = 0uLL;
          unint64_t v146 = v140;
          int32x4_t v147 = 0uLL;
          do
          {
            int32x4_t v145 = vaddq_s32(vshlq_n_s32(v144[-1], 0xAuLL), v145);
            int32x4_t v147 = vaddq_s32(vshlq_n_s32(*v144, 0xAuLL), v147);
            v144 += 2;
            v146 -= 8;
          }
          while (v146);
          int v141 = vaddvq_s32(vaddq_s32(v147, v145));
          if ((a7 & 7) == 0) {
            goto LABEL_205;
          }
        }
        else
        {
          unint64_t v140 = 0;
          int v141 = 0;
        }
        unint64_t v148 = a7 - v140;
        v149 = &v139->i32[v140];
        do
        {
          int v150 = *v149++;
          v141 += v150 << 10;
          --v148;
        }
        while (v148);
LABEL_205:
        int v320 = v141;
        __p = operator new(4 * (int)a7);
        bzero(__p, 4 * (int)a7);
        goto LABEL_206;
      }
    }
  }
  return v12;
}

void sub_18A432DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v51 = a46;
    if (!a46)
    {
LABEL_3:
      uint64_t v52 = a43;
      if (!a43) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v51 = a46;
    if (!a46) {
      goto LABEL_3;
    }
  }
  operator delete(v51);
  uint64_t v52 = a43;
  if (!a43)
  {
LABEL_4:
    unsigned int v53 = a40;
    if (!a40) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v52);
  unsigned int v53 = a40;
  if (!a40)
  {
LABEL_5:
    unsigned int v54 = a37;
    if (!a37)
    {
LABEL_12:
      operator delete(a14);
      operator delete(a32);
      _Unwind_Resume(a1);
    }
LABEL_11:
    operator delete(v54);
    operator delete(a14);
    operator delete(a32);
    _Unwind_Resume(a1);
  }
LABEL_10:
  operator delete(v53);
  unsigned int v54 = a37;
  if (!a37) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void sub_18A432EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p)
{
}

gcl::gpcc::GeometryDecoderBasic *gcl::gpcc::GeometryDecoderBasic::GeometryDecoderBasic(gcl::gpcc::GeometryDecoderBasic *this)
{
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 12;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 20) = -2147450880;
  gcl::DualLutCoder<true>::DualLutCoder((uint64_t)this + 84);
  *((void *)this + 215) = 0;
  return this;
}

void sub_18A432F50(_Unwind_Exception *exception_object)
{
  v4 = (void *)v1[6];
  if (v4)
  {
    v1[7] = v4;
    operator delete(v4);
    v5 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  v1[4] = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

uint64_t gcl::gpcc::GeometryDecoderBasic::decodeSlice(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5, uint64_t a6, int a7, _DWORD *a8)
{
  *(_DWORD *)(a1 + 1712) = a5;
  *(void *)(a1 + 1720) = a4;
  *(void *)&long long v14 = 0xFFFF000000000000;
  *((void *)&v14 + 1) = 0xFFFF000000000000;
  *(_OWORD *)(a1 + 1736) = v14;
  *(void *)(a1 + 1752) = 16;
  if (!a5)
  {
    int v15 = -16777216;
    goto LABEL_7;
  }
  int v15 = *a4 << 24;
  *(_DWORD *)(a1 + 1744) = v15;
  if (a5 == 1)
  {
LABEL_7:
    int v16 = v15 | 0xFF0000;
    goto LABEL_8;
  }
  int v16 = v15 | (a4[1] << 16);
  *(_DWORD *)(a1 + 1744) = v16;
  if (a5 <= 2)
  {
LABEL_8:
    int v17 = v16 | 0xFF00;
    goto LABEL_9;
  }
  int v17 = v16 | (a4[2] << 8);
  *(_DWORD *)(a1 + 1744) = v17;
  if (a5 != 3)
  {
    int v18 = a4[3];
    goto LABEL_10;
  }
LABEL_9:
  int v18 = 255;
LABEL_10:
  *(_DWORD *)(a1 + 1744) = v18 | v17;
  *(void *)(a1 + 1728) = 3;
  memcpy((void *)(a1 + 1760), &gcl::ArithmeticDecoder::probUpdateLutInterleaved, 0x400uLL);
  gcl::gpcc::GeometryDecoderBasic::prepare(a1, a2, a3, a6, a7, *(_DWORD *)(a3 + 32));
  uint64_t v19 = *(void *)(a1 + 48);
  unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 56) - v19) >> 2);
  if (*(void *)(a1 + 56) == v19)
  {
    std::vector<gcl::gpcc::GeometryDecoderBasic::TreeNode>::__append(a1 + 48, 1 - v20);
    uint64_t v33 = *(void *)(a1 + 48);
    *(void *)uint64_t v33 = 0;
    *(_DWORD *)(v33 + 8) = 0;
    if (*(int *)(a1 + 76) < 2) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v20 >= 2) {
    *(void *)(a1 + 56) = v19 + 12;
  }
  *(void *)uint64_t v19 = 0;
  *(_DWORD *)(v19 + 8) = 0;
  if (*(int *)(a1 + 76) >= 2)
  {
    do
    {
LABEL_14:
      gcl::gpcc::GeometryDecoderBasic::processLevel((gcl::gpcc::GeometryDecoderBasic *)a1);
      int v21 = *(_DWORD *)(a1 + 76);
      *(_DWORD *)(a1 + 76) = v21 - 1;
    }
    while (v21 > 2);
  }
LABEL_15:
  *(unsigned char *)(a1 + 1688) = 1;
  uint64_t v22 = *(void *)(a1 + 24);
  uint64_t v23 = *(void *)(a1 + 32);
  uint64_t v24 = *(void *)(a1 + 40);
  v25 = *(_DWORD **)(a1 + 48);
  *(void *)(a1 + 24) = v25;
  long long v26 = *(_OWORD *)(a1 + 56);
  *(void *)(a1 + 48) = v22;
  *(void *)(a1 + 56) = v23;
  *(_OWORD *)(a1 + 32) = v26;
  *(void *)(a1 + 64) = v24;
  unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v22) >> 2);
  unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 2);
  BOOL v29 = v27 >= v28;
  if (v27 <= v28)
  {
    unint64_t v30 = (_DWORD *)v26;
    if (!v29) {
      *(void *)(a1 + 56) = v22 + 12 * v27;
    }
  }
  else
  {
    std::vector<gcl::gpcc::GeometryDecoderBasic::TreeNode>::__append(a1 + 48, v27 - v28);
    v25 = *(_DWORD **)(a1 + 24);
    unint64_t v30 = *(_DWORD **)(a1 + 32);
  }
  if (v30 == v25)
  {
LABEL_23:
    uint64_t result = *(unsigned int *)(a1 + 2784);
    if (!result) {
      *a8 = *(_DWORD *)(a3 + 32) - *(_DWORD *)a1;
    }
  }
  else
  {
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (v30 - v25);
    while (!gcl::gpcc::GeometryDecoderBasic::processLeafNode((int *)a1, v25))
    {
      v25 += 3;
      if (!--v31) {
        goto LABEL_23;
      }
    }
    *(_DWORD *)(a1 + 76) = 0;
    *(_DWORD *)(a1 + 2784) = 1;
    return 1;
  }
  return result;
}

void *gcl::gpcc::GeometryDecoderBasic::prepare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 16) = a5;
  *(_DWORD *)a1 = a6;
  unint64_t v9 = *(int *)(a3 + 32) + 8;
  v10 = *(void **)(a1 + 24);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 40) - (void)v10) >> 2) >= v9) {
    goto LABEL_17;
  }
  if (v9 > 0x1555555555555555) {
    goto LABEL_34;
  }
  unint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = (char *)operator new(12 * v9);
  unint64_t v13 = v11 - (void)v10;
  uint64_t v14 = (uint64_t)(v11 - (void)v10) / 12;
  unint64_t v15 = (unint64_t)&v12[12 * v14];
  int v16 = (char *)v15;
  if ((void *)v11 != v10)
  {
    unint64_t v17 = v13 - 12;
    if (v13 - 12 < 0xB4)
    {
      int v16 = &v12[12 * v14];
      do
      {
LABEL_14:
        int v24 = *(_DWORD *)(v11 - 12);
        v11 -= 12;
        *((_DWORD *)v16 - 3) = v24;
        v16 -= 12;
        *((_DWORD *)v16 + 1) = *(_DWORD *)(v11 + 4);
        *((_DWORD *)v16 + 2) = *(_DWORD *)(v11 + 8);
      }
      while ((void *)v11 != v10);
      goto LABEL_15;
    }
    unint64_t v18 = v17 / 0xC;
    BOOL v19 = (unint64_t)&v12[12 * v14 - 12 + -12 * (v17 / 0xC)] >= v11 || v11 - 12 * (v17 / 0xC) - 12 >= v15;
    int v16 = &v12[12 * v14];
    if (!v19) {
      goto LABEL_14;
    }
    unint64_t v20 = v18 + 1;
    int v16 = (char *)(v15 - 12 * (v20 & 0x3FFFFFFFFFFFFFFCLL));
    int v21 = (const float *)(v11 - 48);
    uint64_t v22 = (float *)(v15 - 48);
    uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      float32x4x3_t v43 = vld3q_f32(v21);
      vst3q_f32(v22, v43);
      v22 -= 12;
      v21 -= 12;
      v23 -= 4;
    }
    while (v23);
    v11 -= 12 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_14;
    }
  }
LABEL_15:
  *(void *)(a1 + 24) = v16;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = &v12[12 * v9];
  if (v10)
  {
    operator delete(v10);
    unint64_t v9 = *(int *)(a3 + 32) + 8;
  }
LABEL_17:
  v25 = *(void **)(a1 + 48);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 64) - (void)v25) >> 2) >= v9) {
    goto LABEL_33;
  }
  if (v9 > 0x1555555555555555) {
LABEL_34:
  }
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  unint64_t v26 = *(void *)(a1 + 56);
  unint64_t v27 = (char *)operator new(12 * v9);
  unint64_t v28 = v26 - (void)v25;
  uint64_t v29 = (uint64_t)(v26 - (void)v25) / 12;
  unint64_t v30 = (unint64_t)&v27[12 * v29];
  unint64_t v31 = (char *)v30;
  if ((void *)v26 != v25)
  {
    unint64_t v32 = v28 - 12;
    if (v28 - 12 >= 0xB4)
    {
      unint64_t v33 = v32 / 0xC;
      BOOL v34 = (unint64_t)&v27[12 * v29 - 12 + -12 * (v32 / 0xC)] >= v26 || v26 - 12 * (v32 / 0xC) - 12 >= v30;
      unint64_t v31 = &v27[12 * v29];
      if (v34)
      {
        unint64_t v35 = v33 + 1;
        unint64_t v31 = (char *)(v30 - 12 * (v35 & 0x3FFFFFFFFFFFFFFCLL));
        v36 = (const float *)(v26 - 48);
        int32x4_t v37 = (float *)(v30 - 48);
        uint64_t v38 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          float32x4x3_t v44 = vld3q_f32(v36);
          vst3q_f32(v37, v44);
          v37 -= 12;
          v36 -= 12;
          v38 -= 4;
        }
        while (v38);
        v26 -= 12 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_31;
        }
      }
    }
    else
    {
      unint64_t v31 = &v27[12 * v29];
    }
    do
    {
      int v39 = *(_DWORD *)(v26 - 12);
      v26 -= 12;
      *((_DWORD *)v31 - 3) = v39;
      v31 -= 12;
      *((_DWORD *)v31 + 1) = *(_DWORD *)(v26 + 4);
      *((_DWORD *)v31 + 2) = *(_DWORD *)(v26 + 8);
    }
    while ((void *)v26 != v25);
  }
LABEL_31:
  *(void *)(a1 + 48) = v31;
  *(void *)(a1 + 56) = v30;
  *(void *)(a1 + 64) = &v27[12 * v9];
  if (v25) {
    operator delete(v25);
  }
LABEL_33:
  bzero(&__src[1], 0x658uLL);
  __src[0] = -2147450880;
  gcl::DualLutCoder<true>::DualLutCoder((uint64_t)&__src[1]);
  uint64_t result = memcpy((void *)(a1 + 80), __src, 0x65CuLL);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a3 + 28);
  *(unsigned char *)(a1 + 72) = (*(unsigned char *)(a1 + 72) & 0xFE | *(unsigned char *)(a2 + 20)) ^ 1;
  *(_DWORD *)(a1 + 2784) = 0;
  return result;
}

void gcl::gpcc::GeometryDecoderBasic::processLevel(gcl::gpcc::GeometryDecoderBasic *this)
{
  v3 = (char *)this + 48;
  uint64_t v2 = *((void *)this + 6);
  *((unsigned char *)this + 1688) = 1;
  v5 = (int *)*((void *)this + 3);
  v4 = (int *)*((void *)this + 4);
  *((void *)this + 3) = v2;
  uint64_t v6 = *((void *)this + 5);
  long long v7 = *(_OWORD *)((char *)this + 56);
  *((void *)this + 6) = v5;
  *((void *)this + 7) = v4;
  *((_OWORD *)this + 2) = v7;
  *((void *)this + 8) = v6;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v5) >> 2);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v4 - v5);
  BOOL v10 = v8 >= v9;
  if (v8 <= v9)
  {
    uint64_t v11 = v7;
    if (!v10)
    {
      v4 = &v5[3 * v8];
      *((void *)this + 7) = v4;
    }
  }
  else
  {
    std::vector<gcl::gpcc::GeometryDecoderBasic::TreeNode>::__append((uint64_t)this + 48, v8 - v9);
    v5 = (int *)*((void *)this + 6);
    v4 = (int *)*((void *)this + 7);
    uint64_t v2 = *((void *)this + 3);
    uint64_t v11 = *((void *)this + 4);
  }
  uint64_t v12 = v11 - v2;
  if (v12)
  {
    unint64_t v13 = (unint64_t)(v4 - 24);
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 2);
    unint64_t v15 = (_DWORD *)(v2 + 8);
    while (1)
    {
      if ((unint64_t)v5 >= v13)
      {
        *((_DWORD *)this + 19) = 0;
        *((_DWORD *)this + 696) = 6;
        return;
      }
      char v16 = gcl::DualLutCoder<true>::decode((uint64_t)(v3 + 36), (unsigned int *)this + 428);
      if (v16) {
        break;
      }
      unsigned int v17 = 0;
      unint64_t v18 = v5;
      if ((v16 & 2) != 0) {
        goto LABEL_13;
      }
LABEL_14:
      if ((v16 & 4) != 0)
      {
        ++v17;
        *unint64_t v18 = 2 * *(v15 - 2);
        v18[1] = (2 * *(v15 - 1)) | 1;
        v18[2] = 2 * *v15;
        v18 += 3;
        if ((v16 & 8) == 0)
        {
LABEL_16:
          if ((v16 & 0x10) == 0) {
            goto LABEL_17;
          }
          goto LABEL_23;
        }
      }
      else if ((v16 & 8) == 0)
      {
        goto LABEL_16;
      }
      ++v17;
      *unint64_t v18 = 2 * *(v15 - 2);
      v18[1] = (2 * *(v15 - 1)) | 1;
      v18[2] = (2 * *v15) | 1;
      v18 += 3;
      if ((v16 & 0x10) == 0)
      {
LABEL_17:
        if ((v16 & 0x20) == 0) {
          goto LABEL_18;
        }
        goto LABEL_24;
      }
LABEL_23:
      ++v17;
      *unint64_t v18 = (2 * *(v15 - 2)) | 1;
      v18[1] = 2 * *(v15 - 1);
      v18[2] = 2 * *v15;
      v18 += 3;
      if ((v16 & 0x20) == 0)
      {
LABEL_18:
        if ((v16 & 0x40) == 0) {
          goto LABEL_19;
        }
        goto LABEL_25;
      }
LABEL_24:
      ++v17;
      *unint64_t v18 = (2 * *(v15 - 2)) | 1;
      v18[1] = 2 * *(v15 - 1);
      v18[2] = (2 * *v15) | 1;
      v18 += 3;
      if ((v16 & 0x40) == 0)
      {
LABEL_19:
        if (v16 < 0) {
          goto LABEL_26;
        }
        goto LABEL_7;
      }
LABEL_25:
      ++v17;
      *unint64_t v18 = (2 * *(v15 - 2)) | 1;
      v18[1] = (2 * *(v15 - 1)) | 1;
      v18[2] = 2 * *v15;
      v18 += 3;
      if (v16 < 0)
      {
LABEL_26:
        ++v17;
        *unint64_t v18 = (2 * *(v15 - 2)) | 1;
        v18[1] = (2 * *(v15 - 1)) | 1;
        v18[2] = (2 * *v15) | 1;
      }
LABEL_7:
      v5 += 3 * v17;
      v15 += 3;
      if (!--v14)
      {
        BOOL v19 = (int *)*((void *)this + 6);
        v4 = (int *)*((void *)this + 7);
        goto LABEL_29;
      }
    }
    unint64_t v18 = v5 + 3;
    int *v5 = 2 * *(v15 - 2);
    v5[1] = 2 * *(v15 - 1);
    v5[2] = 2 * *v15;
    unsigned int v17 = 1;
    if ((v16 & 2) == 0) {
      goto LABEL_14;
    }
LABEL_13:
    ++v17;
    *unint64_t v18 = 2 * *(v15 - 2);
    v18[1] = 2 * *(v15 - 1);
    v18[2] = (2 * *v15) | 1;
    v18 += 3;
    goto LABEL_14;
  }
  BOOL v19 = v5;
LABEL_29:
  unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v5 - v19);
  unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (v4 - v19);
  if (v20 <= v21)
  {
    if (v20 < v21) {
      *((void *)this + 7) = &v19[v5 - v19];
    }
  }
  else
  {
    std::vector<gcl::gpcc::GeometryDecoderBasic::TreeNode>::__append((uint64_t)v3, v20 - v21);
  }
}

BOOL gcl::gpcc::GeometryDecoderBasic::processLeafNode(int *a1, _DWORD *a2)
{
  unsigned int v4 = gcl::DualLutCoder<true>::decode((uint64_t)(a1 + 21), (unsigned int *)a1 + 428);
  unsigned int v5 = 0;
  BOOL v6 = 1;
  while (((v4 >> v5) & 1) == 0)
  {
LABEL_2:
    BOOL v6 = v5++ < 7;
    if (v5 == 8) {
      return v6;
    }
  }
  if ((a1[18] & 1) == 0)
  {
    int v7 = 0;
    goto LABEL_26;
  }
  unsigned int v8 = a1[435];
  unsigned int v9 = a1[436];
  if (v8 <= 0x40000000)
  {
    int v10 = a1[438];
    while (1)
    {
      v9 *= 2;
      a1[438] = --v10;
      if (v10) {
        goto LABEL_10;
      }
      uint64_t v13 = *((void *)a1 + 216);
      *((void *)a1 + 216) = v13 + 1;
      unint64_t v14 = a1[428];
      if (v13 + 1 >= v14)
      {
        int v15 = 65280;
        unint64_t v16 = v13 + 2;
        *((void *)a1 + 216) = v16;
        if (v16 >= v14)
        {
LABEL_16:
          int v11 = 255;
          goto LABEL_9;
        }
      }
      else
      {
        int v15 = *(unsigned __int8 *)(*((void *)a1 + 215) + v13 + 1) << 8;
        unint64_t v16 = v13 + 2;
        *((void *)a1 + 216) = v16;
        if (v16 >= v14) {
          goto LABEL_16;
        }
      }
      int v11 = *(unsigned __int8 *)(*((void *)a1 + 215) + v16);
LABEL_9:
      v9 |= v15 | v11;
      int v10 = 16;
      a1[438] = 16;
LABEL_10:
      unsigned int v12 = 2 * v8;
      BOOL v21 = v8 >= 0x20000001;
      v8 *= 2;
      if (v21) {
        goto LABEL_18;
      }
    }
  }
  unsigned int v12 = a1[435];
LABEL_18:
  int v7 = 0;
  unsigned int v17 = *((unsigned __int16 *)a1 + 40);
  unsigned int v18 = (HIWORD(v12) * v17) & 0xFFFF0000;
  unsigned int v19 = v12 - v18;
  if (v9 < v18) {
    unsigned int v20 = 0;
  }
  else {
    unsigned int v20 = v18;
  }
  a1[436] = v9 - v20;
  BOOL v21 = v9 >= v18;
  *((_WORD *)a1 + 40) = *((_WORD *)a1 + ((v17 >> 7) & 0x1FE | (v9 >= v18)) + 880) + v17;
  if (v9 < v18) {
    unsigned int v22 = v18;
  }
  else {
    unsigned int v22 = v19;
  }
  a1[435] = v22;
  if (!v21) {
    int v7 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)a1 + 428, 0, (_WORD *)a1 + 41) + 1;
  }
LABEL_26:
  unsigned int v23 = *a1;
  *a1 += ~v7;
  if ((int)(v23 + ~v7) >= 0)
  {
    int v24 = (2 * *a2) | (v5 >> 2);
    int v25 = (v5 >> 1) & 1 | (2 * a2[1]);
    int v26 = a2[2];
    unint64_t v27 = (int *)*((void *)a1 + 1);
    *((void *)a1 + 1) = (char *)v27 + a1[4];
    int v28 = v5 & 1 | (2 * v26);
    *unint64_t v27 = v24;
    v27[1] = v25;
    for (v27[2] = v28; v7; --v7)
    {
      uint64_t v29 = (int *)*((void *)a1 + 1);
      *((void *)a1 + 1) = (char *)v29 + a1[4];
      *uint64_t v29 = v24;
      v29[1] = v25;
      v29[2] = v28;
    }
    goto LABEL_2;
  }
  return v6;
}

void std::vector<gcl::gpcc::GeometryDecoderBasic::TreeNode>::__append(uint64_t a1, unint64_t a2)
{
  unsigned int v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  BOOL v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(v5, v13);
      BOOL v6 = &v5[v13];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    int v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2) + a2;
    if (v9 > 0x1555555555555555) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v7) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unsigned int v12 = (char *)operator new(12 * v11);
    }
    else
    {
      unsigned int v12 = 0;
    }
    unint64_t v14 = &v12[4 * (v8 >> 2)];
    int v15 = &v12[12 * v11];
    size_t v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    unsigned int v17 = &v14[v16];
    if (v5 == v7)
    {
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = v15;
      if (!v7) {
        return;
      }
      goto LABEL_28;
    }
    unint64_t v18 = v5 - v7 - 12;
    if (v18 < 0xB4) {
      goto LABEL_25;
    }
    unint64_t v19 = v18 / 0xC;
    if (&v12[v8 - 12 * v19 - 12] < v5 && &v5[-12 * v19 - 12] < v14) {
      goto LABEL_25;
    }
    unint64_t v21 = v19 + 1;
    uint64_t v22 = (v19 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    BOOL v6 = &v5[-12 * v22];
    unsigned int v23 = &v14[-12 * v22];
    int v24 = (const float *)(v5 - 48);
    int v25 = (float *)(v14 - 48);
    uint64_t v26 = v22;
    do
    {
      float32x4x3_t v29 = vld3q_f32(v24);
      vst3q_f32(v25, v29);
      v25 -= 12;
      v24 -= 12;
      v26 -= 4;
    }
    while (v26);
    v14 -= 12 * v22;
    if (v21 != v22)
    {
LABEL_25:
      unsigned int v23 = v14;
      do
      {
        int v27 = *((_DWORD *)v6 - 3);
        v6 -= 12;
        *((_DWORD *)v23 - 3) = v27;
        v23 -= 12;
        *((_DWORD *)v23 + 1) = *((_DWORD *)v6 + 1);
        *((_DWORD *)v23 + 2) = *((_DWORD *)v6 + 2);
      }
      while (v6 != v7);
    }
    *(void *)a1 = v23;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v15;
    if (v7)
    {
LABEL_28:
      operator delete(v7);
    }
  }
}

uint64_t gcl::DualLutCoder<true>::DualLutCoder(uint64_t a1)
{
  uint64_t v2 = (_OWORD *)(a1 + 1316);
  v3 = (void *)(a1 + 276);
  *(void *)&long long v4 = -1;
  *((void *)&v4 + 1) = -1;
  *(_OWORD *)a1 = xmmword_18A643490;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 128) = v4;
  *(_OWORD *)(a1 + 144) = v4;
  *(_OWORD *)(a1 + 160) = v4;
  *(_OWORD *)(a1 + 176) = v4;
  *(_OWORD *)(a1 + 192) = v4;
  *(_OWORD *)(a1 + 208) = v4;
  *(_OWORD *)(a1 + 224) = v4;
  *(_OWORD *)(a1 + 240) = v4;
  *(_OWORD *)(a1 + 256) = xmmword_18A643490;
  *(unsigned char *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 276) = xmmword_18A6434A0;
  unsigned int v5 = (void *)(a1 + 292);
  *(unsigned char *)(a1 + 1604) = 0;
  bzero((void *)(a1 + 420), 0x380uLL);
  *(void *)&long long v6 = -1;
  *((void *)&v6 + 1) = -1;
  v2[14] = v6;
  v2[15] = v6;
  v2[12] = v6;
  v2[13] = v6;
  v2[10] = v6;
  v2[11] = v6;
  v2[8] = v6;
  v2[9] = v6;
  v2[6] = v6;
  v2[7] = v6;
  v2[4] = v6;
  v2[5] = v6;
  v2[2] = v6;
  v2[3] = v6;
  *uint64_t v2 = v6;
  v2[1] = v6;
  memset_pattern16(v5, &unk_18A6434C0, 0x80uLL);
  v3[162] = 0x706050403020100;
  v3[163] = 0xF0E0D0C0B0A0908;
  v3[164] = 0x1716151413121110;
  v3[165] = 0x1F1E1D1C1B1A1918;
  *uint64_t v2 = xmmword_18A643490;
  v2[1] = xmmword_18A6434B0;
  *(_DWORD *)(a1 + 1608) = -2147450880;
  *(_WORD *)(a1 + 1612) = 0x8000;
  memset_pattern16((void *)(a1 + 1614), &unk_18A643070, 0xAuLL);
  return a1;
}

uint64_t gcl::DualLutCoder<true>::decode(uint64_t a1, unsigned int *a2)
{
  uint64_t v408 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *(unsigned __int16 *)(a1 + 1608);
  unsigned int v4 = a2[7];
  unsigned int v5 = a2[8];
  if (v4 < 0x40000001)
  {
    int v6 = a2[10];
    unint64_t v7 = *a2;
    uint64_t v9 = *((void *)a2 + 1);
    unint64_t v8 = *((void *)a2 + 2);
    while (1)
    {
      v5 *= 2;
      a2[10] = --v6;
      if (v6) {
        goto LABEL_5;
      }
      *((void *)a2 + 2) = v8 + 1;
      if (v8 + 1 >= v7)
      {
        int v12 = 65280;
        v8 += 2;
        *((void *)a2 + 2) = v8;
        if (v8 >= v7)
        {
LABEL_11:
          int v10 = 255;
          goto LABEL_4;
        }
      }
      else
      {
        int v12 = *(unsigned __int8 *)(v9 + v8 + 1) << 8;
        v8 += 2;
        *((void *)a2 + 2) = v8;
        if (v8 >= v7) {
          goto LABEL_11;
        }
      }
      int v10 = *(unsigned __int8 *)(v9 + v8);
LABEL_4:
      v5 |= v12 | v10;
      int v6 = 16;
      a2[10] = 16;
LABEL_5:
      unsigned int v11 = 2 * v4;
      BOOL v38 = v4 >= 0x20000001;
      v4 *= 2;
      if (v38) {
        goto LABEL_13;
      }
    }
  }
  unsigned int v11 = a2[7];
LABEL_13:
  unsigned int v13 = (HIWORD(v11) * v3) & 0xFFFF0000;
  unsigned int v14 = v11 - v13;
  if (v5 < v13) {
    unsigned int v15 = 0;
  }
  else {
    unsigned int v15 = (HIWORD(v11) * v3) & 0xFFFF0000;
  }
  unsigned int v16 = v5 - v15;
  *(_WORD *)(a1 + 1608) = *((_WORD *)a2 + ((v3 >> 7) & 0x1FE | (v5 >= v13)) + 24) + v3;
  if (v5 < v13) {
    unsigned int v17 = (HIWORD(v11) * v3) & 0xFFFF0000;
  }
  else {
    unsigned int v17 = v11 - v13;
  }
  a2[7] = v17;
  a2[8] = v16;
  if (v5 >= v13)
  {
    unsigned int v18 = *(unsigned __int16 *)(a1 + 1614);
    if (v14 < 0x40000001)
    {
      int v19 = a2[10];
      unint64_t v20 = *a2;
      uint64_t v22 = *((void *)a2 + 1);
      unint64_t v21 = *((void *)a2 + 2);
      while (1)
      {
        v16 *= 2;
        a2[10] = --v19;
        if (v19) {
          goto LABEL_24;
        }
        *((void *)a2 + 2) = v21 + 1;
        if (v21 + 1 >= v20)
        {
          int v25 = 65280;
          v21 += 2;
          *((void *)a2 + 2) = v21;
          if (v21 >= v20)
          {
LABEL_30:
            int v23 = 255;
            goto LABEL_23;
          }
        }
        else
        {
          int v25 = *(unsigned __int8 *)(v22 + v21 + 1) << 8;
          v21 += 2;
          *((void *)a2 + 2) = v21;
          if (v21 >= v20) {
            goto LABEL_30;
          }
        }
        int v23 = *(unsigned __int8 *)(v22 + v21);
LABEL_23:
        v16 |= v25 | v23;
        int v19 = 16;
        a2[10] = 16;
LABEL_24:
        unsigned int v24 = 2 * v14;
        BOOL v38 = v14 >= 0x20000001;
        v14 *= 2;
        if (v38) {
          goto LABEL_43;
        }
      }
    }
    unsigned int v24 = v14;
LABEL_43:
    unsigned int v34 = (HIWORD(v24) * v18) & 0xFFFF0000;
    unsigned int v35 = v24 - v34;
    if (v16 < v34) {
      unsigned int v36 = 0;
    }
    else {
      unsigned int v36 = (HIWORD(v24) * v18) & 0xFFFF0000;
    }
    unsigned int v37 = v16 - v36;
    BOOL v38 = v16 >= v34;
    *(_WORD *)(a1 + 1614) = *((_WORD *)a2 + ((v18 >> 7) & 0x1FE | (v16 >= v34)) + 24) + v18;
    if (v16 < v34) {
      unsigned int v39 = (HIWORD(v24) * v18) & 0xFFFF0000;
    }
    else {
      unsigned int v39 = v24 - v34;
    }
    a2[7] = v39;
    a2[8] = v37;
    if (!v38)
    {
      unsigned int v93 = *(unsigned __int16 *)(a1 + 1616);
      if (v34 < 0x40000001)
      {
        int v94 = a2[10];
        unint64_t v95 = *a2;
        uint64_t v97 = *((void *)a2 + 1);
        unint64_t v96 = *((void *)a2 + 2);
        while (1)
        {
          v37 *= 2;
          a2[10] = --v94;
          if (v94) {
            goto LABEL_134;
          }
          *((void *)a2 + 2) = v96 + 1;
          if (v96 + 1 >= v95)
          {
            int v100 = 65280;
            v96 += 2;
            *((void *)a2 + 2) = v96;
            if (v96 >= v95)
            {
LABEL_140:
              int v98 = 255;
              goto LABEL_133;
            }
          }
          else
          {
            int v100 = *(unsigned __int8 *)(v97 + v96 + 1) << 8;
            v96 += 2;
            *((void *)a2 + 2) = v96;
            if (v96 >= v95) {
              goto LABEL_140;
            }
          }
          int v98 = *(unsigned __int8 *)(v97 + v96);
LABEL_133:
          v37 |= v100 | v98;
          int v94 = 16;
          a2[10] = 16;
LABEL_134:
          unsigned int v99 = 2 * v34;
          BOOL v38 = v34 >= 0x20000001;
          v34 *= 2;
          if (v38) {
            goto LABEL_175;
          }
        }
      }
      unsigned int v99 = (HIWORD(v24) * v18) & 0xFFFF0000;
LABEL_175:
      unsigned int v125 = (HIWORD(v99) * v93) & 0xFFFF0000;
      unsigned int v126 = v99 - v125;
      if (v37 < v125) {
        unsigned int v127 = 0;
      }
      else {
        unsigned int v127 = (HIWORD(v99) * v93) & 0xFFFF0000;
      }
      unsigned int v128 = v37 - v127;
      BOOL v129 = v37 >= v125;
      *(_WORD *)(a1 + 1616) = *((_WORD *)a2 + ((v93 >> 7) & 0x1FE | (v37 >= v125)) + 24) + v93;
      if (v37 < v125) {
        unsigned int v130 = (HIWORD(v99) * v93) & 0xFFFF0000;
      }
      else {
        unsigned int v130 = v99 - v125;
      }
      a2[7] = v130;
      a2[8] = v128;
      if (!v129)
      {
        unsigned int v149 = *(unsigned __int16 *)(a1 + 1618);
        if (v125 < 0x40000001)
        {
          int v150 = a2[10];
          unint64_t v151 = *a2;
          uint64_t v153 = *((void *)a2 + 1);
          unint64_t v152 = *((void *)a2 + 2);
          while (1)
          {
            v128 *= 2;
            a2[10] = --v150;
            if (v150) {
              goto LABEL_212;
            }
            *((void *)a2 + 2) = v152 + 1;
            if (v152 + 1 >= v151)
            {
              int v156 = 65280;
              v152 += 2;
              *((void *)a2 + 2) = v152;
              if (v152 >= v151)
              {
LABEL_218:
                int v154 = 255;
                goto LABEL_211;
              }
            }
            else
            {
              int v156 = *(unsigned __int8 *)(v153 + v152 + 1) << 8;
              v152 += 2;
              *((void *)a2 + 2) = v152;
              if (v152 >= v151) {
                goto LABEL_218;
              }
            }
            int v154 = *(unsigned __int8 *)(v153 + v152);
LABEL_211:
            v128 |= v156 | v154;
            int v150 = 16;
            a2[10] = 16;
LABEL_212:
            unsigned int v155 = 2 * v125;
            BOOL v38 = v125 >= 0x20000001;
            v125 *= 2;
            if (v38) {
              goto LABEL_259;
            }
          }
        }
        unsigned int v155 = (HIWORD(v99) * v93) & 0xFFFF0000;
LABEL_259:
        unsigned int v186 = (HIWORD(v155) * v149) & 0xFFFF0000;
        unsigned int v187 = v155 - v186;
        if (v128 < v186) {
          unsigned int v188 = 0;
        }
        else {
          unsigned int v188 = (HIWORD(v155) * v149) & 0xFFFF0000;
        }
        unsigned int v189 = v128 - v188;
        *(_WORD *)(a1 + 1618) = *((_WORD *)a2 + ((v149 >> 7) & 0x1FE | (v128 >= v186)) + 24) + v149;
        if (v128 < v186) {
          unsigned int v190 = (HIWORD(v155) * v149) & 0xFFFF0000;
        }
        else {
          unsigned int v190 = v155 - v186;
        }
        a2[7] = v190;
        a2[8] = v189;
        if (v128 >= v186)
        {
          if (v187 < 0x40000001)
          {
            int v191 = a2[10];
            unint64_t v192 = *a2;
            uint64_t v194 = *((void *)a2 + 1);
            unint64_t v193 = *((void *)a2 + 2);
            while (1)
            {
              v189 *= 2;
              a2[10] = --v191;
              if (v191) {
                goto LABEL_270;
              }
              *((void *)a2 + 2) = v193 + 1;
              if (v193 + 1 >= v192)
              {
                int v197 = 65280;
                v193 += 2;
                *((void *)a2 + 2) = v193;
                if (v193 >= v192)
                {
LABEL_276:
                  int v195 = 255;
                  goto LABEL_269;
                }
              }
              else
              {
                int v197 = *(unsigned __int8 *)(v194 + v193 + 1) << 8;
                v193 += 2;
                *((void *)a2 + 2) = v193;
                if (v193 >= v192) {
                  goto LABEL_276;
                }
              }
              int v195 = *(unsigned __int8 *)(v194 + v193);
LABEL_269:
              v189 |= v197 | v195;
              int v191 = 16;
              a2[10] = 16;
LABEL_270:
              unsigned int v196 = 2 * v187;
              BOOL v38 = v187 >= 0x20000001;
              v187 *= 2;
              if (v38) {
                goto LABEL_308;
              }
            }
          }
          unsigned int v196 = v155 - v186;
LABEL_308:
          unsigned int v218 = (v196 >> 1) & 0x7FFF0000;
          unsigned int v219 = v196 - v218;
          BOOL v159 = v189 >= v218;
          if (v189 < v218)
          {
            unsigned int v219 = (v196 >> 1) & 0x7FFF0000;
            unsigned int v218 = 0;
          }
          unsigned int v220 = v189 - v218;
          a2[7] = v219;
          a2[8] = v220;
          if (v219 < 0x40000001)
          {
            int v221 = a2[10];
            unint64_t v222 = *a2;
            uint64_t v224 = *((void *)a2 + 1);
            unint64_t v223 = *((void *)a2 + 2);
            while (1)
            {
              v220 *= 2;
              a2[10] = --v221;
              if (v221) {
                goto LABEL_314;
              }
              *((void *)a2 + 2) = v223 + 1;
              if (v223 + 1 >= v222)
              {
                int v227 = 65280;
                v223 += 2;
                *((void *)a2 + 2) = v223;
                if (v223 >= v222)
                {
LABEL_320:
                  int v225 = 255;
                  goto LABEL_313;
                }
              }
              else
              {
                int v227 = *(unsigned __int8 *)(v224 + v223 + 1) << 8;
                v223 += 2;
                *((void *)a2 + 2) = v223;
                if (v223 >= v222) {
                  goto LABEL_320;
                }
              }
              int v225 = *(unsigned __int8 *)(v224 + v223);
LABEL_313:
              v220 |= v227 | v225;
              int v221 = 16;
              a2[10] = 16;
LABEL_314:
              unsigned int v226 = 2 * v219;
              BOOL v38 = v219 >= 0x20000001;
              v219 *= 2;
              if (v38) {
                goto LABEL_340;
              }
            }
          }
          unsigned int v226 = v219;
LABEL_340:
          int v174 = 0;
          unsigned int v240 = (v226 >> 1) & 0x7FFF0000;
          int v241 = v226 - v240;
          BOOL v173 = v220 >= v240;
          if (v220 < v240)
          {
            int v241 = (v226 >> 1) & 0x7FFF0000;
            unsigned int v240 = 0;
          }
          a2[7] = v241;
          a2[8] = v220 - v240;
LABEL_343:
          int v168 = 4;
LABEL_348:
          if (v159) {
            int v244 = 2;
          }
          else {
            int v244 = 0;
          }
          uint64_t v78 = *(unsigned __int8 *)(a1 + (v244 | v174 | v168 | v173) + 1572);
          LOBYTE(v102) = v78;
          goto LABEL_352;
        }
        unsigned int v208 = *(unsigned __int16 *)(a1 + 1620);
        if (v186 < 0x40000001)
        {
          int v209 = a2[10];
          unint64_t v210 = *a2;
          uint64_t v212 = *((void *)a2 + 1);
          unint64_t v211 = *((void *)a2 + 2);
          while (1)
          {
            v189 *= 2;
            a2[10] = --v209;
            if (v209) {
              goto LABEL_295;
            }
            *((void *)a2 + 2) = v211 + 1;
            if (v211 + 1 >= v210)
            {
              int v215 = 65280;
              v211 += 2;
              *((void *)a2 + 2) = v211;
              if (v211 >= v210)
              {
LABEL_301:
                int v213 = 255;
                goto LABEL_294;
              }
            }
            else
            {
              int v215 = *(unsigned __int8 *)(v212 + v211 + 1) << 8;
              v211 += 2;
              *((void *)a2 + 2) = v211;
              if (v211 >= v210) {
                goto LABEL_301;
              }
            }
            int v213 = *(unsigned __int8 *)(v212 + v211);
LABEL_294:
            v189 |= v215 | v213;
            int v209 = 16;
            a2[10] = 16;
LABEL_295:
            unsigned int v214 = 2 * v186;
            BOOL v38 = v186 >= 0x20000001;
            v186 *= 2;
            if (v38) {
              goto LABEL_322;
            }
          }
        }
        unsigned int v214 = v186;
LABEL_322:
        unsigned int v228 = (HIWORD(v214) * v208) & 0xFFFF0000;
        BOOL v159 = v189 >= v228;
        *(_WORD *)(a1 + 1620) = *((_WORD *)a2 + ((v208 >> 7) & 0x1FE | v159) + 24) + v208;
        if (v189 < v228) {
          unsigned int v229 = (HIWORD(v214) * v208) & 0xFFFF0000;
        }
        else {
          unsigned int v229 = v214 - v228;
        }
        if (v189 < v228) {
          unsigned int v230 = 0;
        }
        else {
          unsigned int v230 = (HIWORD(v214) * v208) & 0xFFFF0000;
        }
        unsigned int v231 = v189 - v230;
        a2[7] = v229;
        a2[8] = v231;
        unsigned int v232 = *(unsigned __int16 *)(a1 + 1622);
        if (v229 >= 0x40000001)
        {
          unsigned int v238 = v229;
LABEL_345:
          int v174 = 0;
          int v168 = 0;
          unsigned int v242 = (HIWORD(v238) * v232) & 0xFFFF0000;
          BOOL v173 = v231 >= v242;
          *(_WORD *)(a1 + 1622) = *((_WORD *)a2 + ((v232 >> 7) & 0x1FE | v173) + 24) + v232;
          unsigned int v243 = v238 - v242;
          if (v231 < v242)
          {
            unsigned int v243 = v242;
            unsigned int v242 = 0;
          }
          a2[7] = v243;
          a2[8] = v231 - v242;
          goto LABEL_348;
        }
        int v233 = a2[10];
        unint64_t v234 = *a2;
        uint64_t v236 = *((void *)a2 + 1);
        unint64_t v235 = *((void *)a2 + 2);
        while (1)
        {
          v231 *= 2;
          a2[10] = --v233;
          if (v233) {
            goto LABEL_332;
          }
          *((void *)a2 + 2) = v235 + 1;
          if (v235 + 1 >= v234)
          {
            int v239 = 65280;
            v235 += 2;
            *((void *)a2 + 2) = v235;
            if (v235 >= v234)
            {
LABEL_338:
              int v237 = 255;
              goto LABEL_331;
            }
          }
          else
          {
            int v239 = *(unsigned __int8 *)(v236 + v235 + 1) << 8;
            v235 += 2;
            *((void *)a2 + 2) = v235;
            if (v235 >= v234) {
              goto LABEL_338;
            }
          }
          int v237 = *(unsigned __int8 *)(v236 + v235);
LABEL_331:
          v231 |= v239 | v237;
          int v233 = 16;
          a2[10] = 16;
LABEL_332:
          unsigned int v238 = 2 * v229;
          BOOL v38 = v229 >= 0x20000001;
          v229 *= 2;
          if (v38) {
            goto LABEL_345;
          }
        }
      }
      if (v126 < 0x40000001)
      {
        int v131 = a2[10];
        unint64_t v132 = *a2;
        uint64_t v134 = *((void *)a2 + 1);
        unint64_t v133 = *((void *)a2 + 2);
        while (1)
        {
          v128 *= 2;
          a2[10] = --v131;
          if (v131) {
            goto LABEL_187;
          }
          *((void *)a2 + 2) = v133 + 1;
          if (v133 + 1 >= v132)
          {
            int v137 = 65280;
            v133 += 2;
            *((void *)a2 + 2) = v133;
            if (v133 >= v132)
            {
LABEL_193:
              int v135 = 255;
              goto LABEL_186;
            }
          }
          else
          {
            int v137 = *(unsigned __int8 *)(v134 + v133 + 1) << 8;
            v133 += 2;
            *((void *)a2 + 2) = v133;
            if (v133 >= v132) {
              goto LABEL_193;
            }
          }
          int v135 = *(unsigned __int8 *)(v134 + v133);
LABEL_186:
          v128 |= v137 | v135;
          int v131 = 16;
          a2[10] = 16;
LABEL_187:
          unsigned int v136 = 2 * v126;
          BOOL v38 = v126 >= 0x20000001;
          v126 *= 2;
          if (v38) {
            goto LABEL_245;
          }
        }
      }
      unsigned int v136 = v99 - v125;
LABEL_245:
      unsigned int v175 = (v136 >> 1) & 0x7FFF0000;
      BOOL v176 = v128 >= v175;
      unsigned int v177 = v136 - v175;
      if (v128 < v175)
      {
        unsigned int v177 = (v136 >> 1) & 0x7FFF0000;
        unsigned int v175 = 0;
      }
      unsigned int v178 = v128 - v175;
      a2[7] = v177;
      a2[8] = v178;
      if (v177 < 0x40000001)
      {
        int v179 = a2[10];
        unint64_t v180 = *a2;
        uint64_t v182 = *((void *)a2 + 1);
        unint64_t v181 = *((void *)a2 + 2);
        while (1)
        {
          v178 *= 2;
          a2[10] = --v179;
          if (v179) {
            goto LABEL_251;
          }
          *((void *)a2 + 2) = v181 + 1;
          if (v181 + 1 >= v180)
          {
            int v185 = 65280;
            v181 += 2;
            *((void *)a2 + 2) = v181;
            if (v181 >= v180)
            {
LABEL_257:
              int v183 = 255;
              goto LABEL_250;
            }
          }
          else
          {
            int v185 = *(unsigned __int8 *)(v182 + v181 + 1) << 8;
            v181 += 2;
            *((void *)a2 + 2) = v181;
            if (v181 >= v180) {
              goto LABEL_257;
            }
          }
          int v183 = *(unsigned __int8 *)(v182 + v181);
LABEL_250:
          v178 |= v185 | v183;
          int v179 = 16;
          a2[10] = 16;
LABEL_251:
          unsigned int v184 = 2 * v177;
          BOOL v38 = v177 >= 0x20000001;
          v177 *= 2;
          if (v38) {
            goto LABEL_278;
          }
        }
      }
      unsigned int v184 = v177;
LABEL_278:
      unsigned int v198 = (v184 >> 1) & 0x7FFF0000;
      unsigned int v199 = v184 - v198;
      BOOL v159 = v178 >= v198;
      if (v178 < v198)
      {
        unsigned int v199 = (v184 >> 1) & 0x7FFF0000;
        unsigned int v198 = 0;
      }
      unsigned int v200 = v178 - v198;
      a2[7] = v199;
      a2[8] = v200;
      if (v199 >= 0x40000001)
      {
        unsigned int v206 = v199;
LABEL_303:
        int v168 = 0;
        unsigned int v216 = (v206 >> 1) & 0x7FFF0000;
        int v217 = v206 - v216;
        BOOL v173 = v200 >= v216;
        if (v200 < v216)
        {
          int v217 = (v206 >> 1) & 0x7FFF0000;
          unsigned int v216 = 0;
        }
        a2[7] = v217;
        a2[8] = v200 - v216;
        int v174 = 8;
        if (!v176) {
          goto LABEL_348;
        }
        goto LABEL_343;
      }
      int v201 = a2[10];
      unint64_t v202 = *a2;
      uint64_t v204 = *((void *)a2 + 1);
      unint64_t v203 = *((void *)a2 + 2);
      while (1)
      {
        v200 *= 2;
        a2[10] = --v201;
        if (v201) {
          goto LABEL_284;
        }
        *((void *)a2 + 2) = v203 + 1;
        if (v203 + 1 >= v202)
        {
          int v207 = 65280;
          v203 += 2;
          *((void *)a2 + 2) = v203;
          if (v203 >= v202)
          {
LABEL_290:
            int v205 = 255;
            goto LABEL_283;
          }
        }
        else
        {
          int v207 = *(unsigned __int8 *)(v204 + v203 + 1) << 8;
          v203 += 2;
          *((void *)a2 + 2) = v203;
          if (v203 >= v202) {
            goto LABEL_290;
          }
        }
        int v205 = *(unsigned __int8 *)(v204 + v203);
LABEL_283:
        v200 |= v207 | v205;
        int v201 = 16;
        a2[10] = 16;
LABEL_284:
        unsigned int v206 = 2 * v199;
        BOOL v38 = v199 >= 0x20000001;
        v199 *= 2;
        if (v38) {
          goto LABEL_303;
        }
      }
    }
    if (v35 < 0x40000001)
    {
      int v40 = a2[10];
      unint64_t v41 = *a2;
      uint64_t v43 = *((void *)a2 + 1);
      unint64_t v42 = *((void *)a2 + 2);
      while (1)
      {
        v37 *= 2;
        a2[10] = --v40;
        if (v40) {
          goto LABEL_55;
        }
        *((void *)a2 + 2) = v42 + 1;
        if (v42 + 1 >= v41)
        {
          int v46 = 65280;
          v42 += 2;
          *((void *)a2 + 2) = v42;
          if (v42 >= v41)
          {
LABEL_61:
            int v44 = 255;
            goto LABEL_54;
          }
        }
        else
        {
          int v46 = *(unsigned __int8 *)(v43 + v42 + 1) << 8;
          v42 += 2;
          *((void *)a2 + 2) = v42;
          if (v42 >= v41) {
            goto LABEL_61;
          }
        }
        int v44 = *(unsigned __int8 *)(v43 + v42);
LABEL_54:
        v37 |= v46 | v44;
        int v40 = 16;
        a2[10] = 16;
LABEL_55:
        unsigned int v45 = 2 * v35;
        BOOL v38 = v35 >= 0x20000001;
        v35 *= 2;
        if (v38) {
          goto LABEL_161;
        }
      }
    }
    unsigned int v45 = v24 - v34;
LABEL_161:
    unsigned int v114 = (v45 >> 1) & 0x7FFF0000;
    BOOL v115 = v37 >= v114;
    unsigned int v116 = v45 - v114;
    if (v37 < v114)
    {
      unsigned int v116 = (v45 >> 1) & 0x7FFF0000;
      unsigned int v114 = 0;
    }
    unsigned int v117 = v37 - v114;
    a2[7] = v116;
    a2[8] = v117;
    if (v116 < 0x40000001)
    {
      int v118 = a2[10];
      unint64_t v119 = *a2;
      uint64_t v121 = *((void *)a2 + 1);
      unint64_t v120 = *((void *)a2 + 2);
      while (1)
      {
        v117 *= 2;
        a2[10] = --v118;
        if (v118) {
          goto LABEL_167;
        }
        *((void *)a2 + 2) = v120 + 1;
        if (v120 + 1 >= v119)
        {
          int v124 = 65280;
          v120 += 2;
          *((void *)a2 + 2) = v120;
          if (v120 >= v119)
          {
LABEL_173:
            int v122 = 255;
            goto LABEL_166;
          }
        }
        else
        {
          int v124 = *(unsigned __int8 *)(v121 + v120 + 1) << 8;
          v120 += 2;
          *((void *)a2 + 2) = v120;
          if (v120 >= v119) {
            goto LABEL_173;
          }
        }
        int v122 = *(unsigned __int8 *)(v121 + v120);
LABEL_166:
        v117 |= v124 | v122;
        int v118 = 16;
        a2[10] = 16;
LABEL_167:
        unsigned int v123 = 2 * v116;
        BOOL v38 = v116 >= 0x20000001;
        v116 *= 2;
        if (v38) {
          goto LABEL_195;
        }
      }
    }
    unsigned int v123 = v116;
LABEL_195:
    unsigned int v138 = (v123 >> 1) & 0x7FFF0000;
    BOOL v139 = v117 >= v138;
    unsigned int v140 = v123 - v138;
    if (v117 < v138)
    {
      unsigned int v140 = (v123 >> 1) & 0x7FFF0000;
      unsigned int v138 = 0;
    }
    unsigned int v141 = v117 - v138;
    a2[7] = v140;
    a2[8] = v141;
    if (v140 < 0x40000001)
    {
      int v142 = a2[10];
      unint64_t v143 = *a2;
      uint64_t v145 = *((void *)a2 + 1);
      unint64_t v144 = *((void *)a2 + 2);
      while (1)
      {
        v141 *= 2;
        a2[10] = --v142;
        if (v142) {
          goto LABEL_201;
        }
        *((void *)a2 + 2) = v144 + 1;
        if (v144 + 1 >= v143)
        {
          int v148 = 65280;
          v144 += 2;
          *((void *)a2 + 2) = v144;
          if (v144 >= v143)
          {
LABEL_207:
            int v146 = 255;
            goto LABEL_200;
          }
        }
        else
        {
          int v148 = *(unsigned __int8 *)(v145 + v144 + 1) << 8;
          v144 += 2;
          *((void *)a2 + 2) = v144;
          if (v144 >= v143) {
            goto LABEL_207;
          }
        }
        int v146 = *(unsigned __int8 *)(v145 + v144);
LABEL_200:
        v141 |= v148 | v146;
        int v142 = 16;
        a2[10] = 16;
LABEL_201:
        unsigned int v147 = 2 * v140;
        BOOL v38 = v140 >= 0x20000001;
        v140 *= 2;
        if (v38) {
          goto LABEL_220;
        }
      }
    }
    unsigned int v147 = v140;
LABEL_220:
    unsigned int v157 = (v147 >> 1) & 0x7FFF0000;
    unsigned int v158 = v147 - v157;
    BOOL v159 = v141 >= v157;
    if (v141 < v157)
    {
      unsigned int v158 = (v147 >> 1) & 0x7FFF0000;
      unsigned int v157 = 0;
    }
    unsigned int v160 = v141 - v157;
    a2[7] = v158;
    a2[8] = v160;
    if (v158 >= 0x40000001)
    {
      unsigned int v166 = v158;
LABEL_234:
      int v168 = 0;
      unsigned int v169 = (v166 >> 1) & 0x7FFF0000;
      int v170 = v166 - v169;
      BOOL v171 = v160 >= v169;
      if (v160 < v169)
      {
        int v170 = (v166 >> 1) & 0x7FFF0000;
        unsigned int v169 = 0;
      }
      unsigned int v172 = v160 - v169;
      BOOL v173 = v171;
      a2[7] = v170;
      a2[8] = v172;
      if (v115) {
        int v174 = 24;
      }
      else {
        int v174 = 16;
      }
      if (!v139) {
        goto LABEL_348;
      }
      goto LABEL_343;
    }
    int v161 = a2[10];
    unint64_t v162 = *a2;
    uint64_t v164 = *((void *)a2 + 1);
    unint64_t v163 = *((void *)a2 + 2);
    while (1)
    {
      v160 *= 2;
      a2[10] = --v161;
      if (v161) {
        goto LABEL_226;
      }
      *((void *)a2 + 2) = v163 + 1;
      if (v163 + 1 >= v162)
      {
        int v167 = 65280;
        v163 += 2;
        *((void *)a2 + 2) = v163;
        if (v163 >= v162)
        {
LABEL_232:
          int v165 = 255;
          goto LABEL_225;
        }
      }
      else
      {
        int v167 = *(unsigned __int8 *)(v164 + v163 + 1) << 8;
        v163 += 2;
        *((void *)a2 + 2) = v163;
        if (v163 >= v162) {
          goto LABEL_232;
        }
      }
      int v165 = *(unsigned __int8 *)(v164 + v163);
LABEL_225:
      v160 |= v167 | v165;
      int v161 = 16;
      a2[10] = 16;
LABEL_226:
      unsigned int v166 = 2 * v158;
      BOOL v38 = v158 >= 0x20000001;
      v158 *= 2;
      if (v38) {
        goto LABEL_234;
      }
    }
  }
  unsigned int v26 = *(unsigned __int16 *)(a1 + 1610);
  if (v13 < 0x40000001)
  {
    int v27 = a2[10];
    unint64_t v28 = *a2;
    uint64_t v30 = *((void *)a2 + 1);
    unint64_t v29 = *((void *)a2 + 2);
    while (1)
    {
      v16 *= 2;
      a2[10] = --v27;
      if (v27) {
        goto LABEL_35;
      }
      *((void *)a2 + 2) = v29 + 1;
      if (v29 + 1 >= v28)
      {
        int v33 = 65280;
        v29 += 2;
        *((void *)a2 + 2) = v29;
        if (v29 >= v28)
        {
LABEL_41:
          int v31 = 255;
          goto LABEL_34;
        }
      }
      else
      {
        int v33 = *(unsigned __int8 *)(v30 + v29 + 1) << 8;
        v29 += 2;
        *((void *)a2 + 2) = v29;
        if (v29 >= v28) {
          goto LABEL_41;
        }
      }
      int v31 = *(unsigned __int8 *)(v30 + v29);
LABEL_34:
      v16 |= v33 | v31;
      int v27 = 16;
      a2[10] = 16;
LABEL_35:
      unsigned int v32 = 2 * v13;
      BOOL v38 = v13 >= 0x20000001;
      v13 *= 2;
      if (v38) {
        goto LABEL_63;
      }
    }
  }
  unsigned int v32 = v13;
LABEL_63:
  unsigned int v47 = (HIWORD(v32) * v26) & 0xFFFF0000;
  unsigned int v48 = v32 - v47;
  if (v16 < v47) {
    unsigned int v49 = 0;
  }
  else {
    unsigned int v49 = (HIWORD(v32) * v26) & 0xFFFF0000;
  }
  unsigned int v50 = v16 - v49;
  *(_WORD *)(a1 + 1610) = *((_WORD *)a2 + ((v26 >> 7) & 0x1FE | (v16 >= v47)) + 24) + v26;
  if (v16 < v47) {
    unsigned int v51 = (HIWORD(v32) * v26) & 0xFFFF0000;
  }
  else {
    unsigned int v51 = v32 - v47;
  }
  a2[7] = v51;
  a2[8] = v50;
  if (v16 < v47)
  {
    int v101 = 0;
    int v102 = 0;
    int v103 = a2[10];
    unint64_t v104 = *((void *)a2 + 2);
    unsigned int v105 = *(unsigned __int16 *)(a1 + 1612);
    while (v47 >= 0x40000001)
    {
      unsigned int v106 = v47;
LABEL_142:
      unsigned int v107 = (HIWORD(v106) * (unsigned __int16)v105) & 0xFFFF0000;
      unsigned int v108 = v106 - v107;
      int v109 = v50 >= v107;
      v105 += *((unsigned __int16 *)a2 + ((v105 >> 7) & 0x1FE | v109) + 24);
      *(_WORD *)(a1 + 1612) = v105;
      if (v50 < v107) {
        unsigned int v47 = v107;
      }
      else {
        unsigned int v47 = v108;
      }
      if (v50 < v107) {
        unsigned int v107 = 0;
      }
      v50 -= v107;
      a2[7] = v47;
      a2[8] = v50;
      v102 |= v109 << v101++;
      if (v101 == 8) {
        goto LABEL_92;
      }
    }
    unint64_t v110 = *a2;
    uint64_t v111 = *((void *)a2 + 1);
    while (1)
    {
      v50 *= 2;
      a2[10] = --v103;
      if (v103) {
        goto LABEL_152;
      }
      *((void *)a2 + 2) = v104 + 1;
      if (v104 + 1 >= v110)
      {
        int v113 = 65280;
        v104 += 2;
        *((void *)a2 + 2) = v104;
        if (v104 >= v110)
        {
LABEL_158:
          int v112 = 255;
          goto LABEL_151;
        }
      }
      else
      {
        int v113 = *(unsigned __int8 *)(v111 + v104 + 1) << 8;
        v104 += 2;
        *((void *)a2 + 2) = v104;
        if (v104 >= v110) {
          goto LABEL_158;
        }
      }
      int v112 = *(unsigned __int8 *)(v111 + v104);
LABEL_151:
      v50 |= v113 | v112;
      int v103 = 16;
      a2[10] = 16;
LABEL_152:
      unsigned int v106 = 2 * v47;
      BOOL v38 = v47 >= 0x20000001;
      v47 *= 2;
      if (v38) {
        goto LABEL_142;
      }
    }
  }
  unint64_t v52 = *a2;
  int v53 = a2[10];
  uint64_t v54 = *((void *)a2 + 1);
  unint64_t v55 = *((void *)a2 + 2);
  if (v48 < 0x40000001)
  {
    while (1)
    {
      v50 *= 2;
      a2[10] = --v53;
      if (v53) {
        goto LABEL_96;
      }
      *((void *)a2 + 2) = v55 + 1;
      if (v55 + 1 >= v52)
      {
        int v86 = 65280;
        v55 += 2;
        *((void *)a2 + 2) = v55;
        if (v55 >= v52)
        {
LABEL_102:
          int v85 = 255;
          goto LABEL_95;
        }
      }
      else
      {
        int v86 = *(unsigned __int8 *)(v54 + v55 + 1) << 8;
        v55 += 2;
        *((void *)a2 + 2) = v55;
        if (v55 >= v52) {
          goto LABEL_102;
        }
      }
      int v85 = *(unsigned __int8 *)(v54 + v55);
LABEL_95:
      v50 |= v86 | v85;
      int v53 = 16;
      a2[10] = 16;
LABEL_96:
      unsigned int v56 = 2 * v48;
      BOOL v38 = v48 >= 0x20000001;
      v48 *= 2;
      if (v38) {
        goto LABEL_73;
      }
    }
  }
  unsigned int v56 = v48;
LABEL_73:
  unsigned int v57 = (v56 >> 1) & 0x7FFF0000;
  unsigned int v58 = v56 - v57;
  BOOL v59 = v50 >= v57;
  if (v50 < v57)
  {
    unsigned int v58 = v57;
    unsigned int v57 = 0;
  }
  unsigned int v60 = v50 - v57;
  a2[7] = v58;
  a2[8] = v60;
  if (v58 < 0x40000001)
  {
    while (1)
    {
      v60 *= 2;
      a2[10] = --v53;
      if (v53) {
        goto LABEL_105;
      }
      *((void *)a2 + 2) = v55 + 1;
      if (v55 + 1 >= v52)
      {
        int v88 = 65280;
        v55 += 2;
        *((void *)a2 + 2) = v55;
        if (v55 >= v52)
        {
LABEL_111:
          int v87 = 255;
          goto LABEL_104;
        }
      }
      else
      {
        int v88 = *(unsigned __int8 *)(v54 + v55 + 1) << 8;
        v55 += 2;
        *((void *)a2 + 2) = v55;
        if (v55 >= v52) {
          goto LABEL_111;
        }
      }
      int v87 = *(unsigned __int8 *)(v54 + v55);
LABEL_104:
      v60 |= v88 | v87;
      int v53 = 16;
      a2[10] = 16;
LABEL_105:
      unsigned int v61 = 2 * v58;
      BOOL v38 = v58 >= 0x20000001;
      v58 *= 2;
      if (v38) {
        goto LABEL_77;
      }
    }
  }
  unsigned int v61 = v58;
LABEL_77:
  unsigned int v62 = (v61 >> 1) & 0x7FFF0000;
  unsigned int v63 = v61 - v62;
  BOOL v64 = v60 >= v62;
  if (v60 < v62)
  {
    unsigned int v63 = v62;
    unsigned int v62 = 0;
  }
  unsigned int v65 = v60 - v62;
  a2[7] = v63;
  a2[8] = v65;
  uint64_t v66 = v59 || 2 * v64;
  if (v63 < 0x40000001)
  {
    while (1)
    {
      v65 *= 2;
      a2[10] = --v53;
      if (v53) {
        goto LABEL_114;
      }
      *((void *)a2 + 2) = v55 + 1;
      if (v55 + 1 >= v52)
      {
        int v90 = 65280;
        v55 += 2;
        *((void *)a2 + 2) = v55;
        if (v55 >= v52)
        {
LABEL_120:
          int v89 = 255;
          goto LABEL_113;
        }
      }
      else
      {
        int v90 = *(unsigned __int8 *)(v54 + v55 + 1) << 8;
        v55 += 2;
        *((void *)a2 + 2) = v55;
        if (v55 >= v52) {
          goto LABEL_120;
        }
      }
      int v89 = *(unsigned __int8 *)(v54 + v55);
LABEL_113:
      v65 |= v90 | v89;
      int v53 = 16;
      a2[10] = 16;
LABEL_114:
      unsigned int v67 = 2 * v63;
      BOOL v38 = v63 >= 0x20000001;
      v63 *= 2;
      if (v38) {
        goto LABEL_81;
      }
    }
  }
  unsigned int v67 = v63;
LABEL_81:
  unsigned int v68 = (v67 >> 1) & 0x7FFF0000;
  unsigned int v69 = v67 - v68;
  if (v65 >= v68) {
    unsigned int v70 = v69;
  }
  else {
    unsigned int v70 = v68;
  }
  if (v65 >= v68) {
    unsigned int v71 = v68;
  }
  else {
    unsigned int v71 = 0;
  }
  unsigned int v72 = v65 - v71;
  a2[7] = v70;
  a2[8] = v72;
  uint64_t v73 = v66 | (4 * (v65 >= v68));
  if (v70 < 0x40000001)
  {
    while (1)
    {
      v72 *= 2;
      a2[10] = --v53;
      if (v53) {
        goto LABEL_123;
      }
      *((void *)a2 + 2) = v55 + 1;
      if (v55 + 1 >= v52)
      {
        int v92 = 65280;
        v55 += 2;
        *((void *)a2 + 2) = v55;
        if (v55 >= v52)
        {
LABEL_129:
          int v91 = 255;
          goto LABEL_122;
        }
      }
      else
      {
        int v92 = *(unsigned __int8 *)(v54 + v55 + 1) << 8;
        v55 += 2;
        *((void *)a2 + 2) = v55;
        if (v55 >= v52) {
          goto LABEL_129;
        }
      }
      int v91 = *(unsigned __int8 *)(v54 + v55);
LABEL_122:
      v72 |= v92 | v91;
      int v53 = 16;
      a2[10] = 16;
LABEL_123:
      unsigned int v74 = 2 * v70;
      BOOL v38 = v70 >= 0x20000001;
      v70 *= 2;
      if (v38) {
        goto LABEL_89;
      }
    }
  }
  unsigned int v74 = v70;
LABEL_89:
  unsigned int v75 = (v74 >> 1) & 0x7FFF0000;
  unsigned int v76 = v74 - v75;
  BOOL v77 = v72 >= v75;
  if (v72 < v75)
  {
    unsigned int v76 = v75;
    unsigned int v75 = 0;
  }
  a2[7] = v76;
  a2[8] = v72 - v75;
  LOBYTE(v102) = *(unsigned char *)(a1 + (v73 | (8 * v77)) + 256);
LABEL_92:
  uint64_t v78 = v102;
  uint64_t v79 = *(unsigned __int8 *)(a1 + v102);
  char v80 = *(unsigned char *)(a1 + 272);
  *(unsigned char *)(a1 + 272) = v80 + 1;
  uint64_t v81 = a1 + (v80 & 0xF);
  uint64_t v82 = *(unsigned __int8 *)(v81 + 256);
  int v83 = (unsigned char *)(v81 + 256);
  *(unsigned char *)(a1 + v102) = *(unsigned char *)(a1 + v82);
  *(unsigned char *)(a1 + v82) = v79;
  if (v79 == 255)
  {
    *int v83 = v102;
  }
  else
  {
    uint64_t v84 = a1 + v79;
    *int v83 = *(unsigned char *)(v84 + 256);
    *(unsigned char *)(v84 + 256) = v82;
  }
LABEL_352:
  uint64_t v245 = a1 + 276 + 4 * v78;
  int v246 = *(_DWORD *)(v245 + 16) + 1;
  *(_DWORD *)(v245 + 16) = v246;
  if (v246 == *(_DWORD *)(a1 + 276))
  {
    uint32x4_t v247 = vshrq_n_u32(*(uint32x4_t *)(a1 + 308), 1uLL);
    *(uint32x4_t *)(a1 + 292) = vshrq_n_u32(*(uint32x4_t *)(a1 + 292), 1uLL);
    *(uint32x4_t *)(a1 + 308) = v247;
    uint32x4_t v248 = vshrq_n_u32(*(uint32x4_t *)(a1 + 340), 1uLL);
    *(uint32x4_t *)(a1 + 324) = vshrq_n_u32(*(uint32x4_t *)(a1 + 324), 1uLL);
    *(uint32x4_t *)(a1 + 340) = v248;
    uint32x4_t v249 = vshrq_n_u32(*(uint32x4_t *)(a1 + 372), 1uLL);
    *(uint32x4_t *)(a1 + 356) = vshrq_n_u32(*(uint32x4_t *)(a1 + 356), 1uLL);
    *(uint32x4_t *)(a1 + 372) = v249;
    uint32x4_t v250 = vshrq_n_u32(*(uint32x4_t *)(a1 + 404), 1uLL);
    *(uint32x4_t *)(a1 + 388) = vshrq_n_u32(*(uint32x4_t *)(a1 + 388), 1uLL);
    *(uint32x4_t *)(a1 + 404) = v250;
    uint32x4_t v251 = vshrq_n_u32(*(uint32x4_t *)(a1 + 436), 1uLL);
    *(uint32x4_t *)(a1 + 420) = vshrq_n_u32(*(uint32x4_t *)(a1 + 420), 1uLL);
    *(uint32x4_t *)(a1 + 436) = v251;
    uint32x4_t v252 = vshrq_n_u32(*(uint32x4_t *)(a1 + 468), 1uLL);
    *(uint32x4_t *)(a1 + 452) = vshrq_n_u32(*(uint32x4_t *)(a1 + 452), 1uLL);
    *(uint32x4_t *)(a1 + 468) = v252;
    uint32x4_t v253 = vshrq_n_u32(*(uint32x4_t *)(a1 + 500), 1uLL);
    *(uint32x4_t *)(a1 + 484) = vshrq_n_u32(*(uint32x4_t *)(a1 + 484), 1uLL);
    *(uint32x4_t *)(a1 + 500) = v253;
    uint32x4_t v254 = vshrq_n_u32(*(uint32x4_t *)(a1 + 532), 1uLL);
    *(uint32x4_t *)(a1 + 516) = vshrq_n_u32(*(uint32x4_t *)(a1 + 516), 1uLL);
    *(uint32x4_t *)(a1 + 532) = v254;
    uint32x4_t v255 = vshrq_n_u32(*(uint32x4_t *)(a1 + 564), 1uLL);
    *(uint32x4_t *)(a1 + 548) = vshrq_n_u32(*(uint32x4_t *)(a1 + 548), 1uLL);
    *(uint32x4_t *)(a1 + 564) = v255;
    uint32x4_t v256 = vshrq_n_u32(*(uint32x4_t *)(a1 + 596), 1uLL);
    *(uint32x4_t *)(a1 + 580) = vshrq_n_u32(*(uint32x4_t *)(a1 + 580), 1uLL);
    *(uint32x4_t *)(a1 + 596) = v256;
    uint32x4_t v257 = vshrq_n_u32(*(uint32x4_t *)(a1 + 628), 1uLL);
    *(uint32x4_t *)(a1 + 612) = vshrq_n_u32(*(uint32x4_t *)(a1 + 612), 1uLL);
    *(uint32x4_t *)(a1 + 628) = v257;
    uint32x4_t v258 = vshrq_n_u32(*(uint32x4_t *)(a1 + 660), 1uLL);
    *(uint32x4_t *)(a1 + 644) = vshrq_n_u32(*(uint32x4_t *)(a1 + 644), 1uLL);
    *(uint32x4_t *)(a1 + 660) = v258;
    uint32x4_t v259 = vshrq_n_u32(*(uint32x4_t *)(a1 + 692), 1uLL);
    *(uint32x4_t *)(a1 + 676) = vshrq_n_u32(*(uint32x4_t *)(a1 + 676), 1uLL);
    *(uint32x4_t *)(a1 + 692) = v259;
    uint32x4_t v260 = vshrq_n_u32(*(uint32x4_t *)(a1 + 724), 1uLL);
    *(uint32x4_t *)(a1 + 708) = vshrq_n_u32(*(uint32x4_t *)(a1 + 708), 1uLL);
    *(uint32x4_t *)(a1 + 724) = v260;
    uint32x4_t v261 = vshrq_n_u32(*(uint32x4_t *)(a1 + 756), 1uLL);
    *(uint32x4_t *)(a1 + 740) = vshrq_n_u32(*(uint32x4_t *)(a1 + 740), 1uLL);
    *(uint32x4_t *)(a1 + 756) = v261;
    uint32x4_t v262 = vshrq_n_u32(*(uint32x4_t *)(a1 + 788), 1uLL);
    *(uint32x4_t *)(a1 + 772) = vshrq_n_u32(*(uint32x4_t *)(a1 + 772), 1uLL);
    *(uint32x4_t *)(a1 + 788) = v262;
    uint32x4_t v263 = vshrq_n_u32(*(uint32x4_t *)(a1 + 820), 1uLL);
    *(uint32x4_t *)(a1 + 804) = vshrq_n_u32(*(uint32x4_t *)(a1 + 804), 1uLL);
    *(uint32x4_t *)(a1 + 820) = v263;
    uint32x4_t v264 = vshrq_n_u32(*(uint32x4_t *)(a1 + 852), 1uLL);
    *(uint32x4_t *)(a1 + 836) = vshrq_n_u32(*(uint32x4_t *)(a1 + 836), 1uLL);
    *(uint32x4_t *)(a1 + 852) = v264;
    uint32x4_t v265 = vshrq_n_u32(*(uint32x4_t *)(a1 + 884), 1uLL);
    *(uint32x4_t *)(a1 + 868) = vshrq_n_u32(*(uint32x4_t *)(a1 + 868), 1uLL);
    *(uint32x4_t *)(a1 + 884) = v265;
    uint32x4_t v266 = vshrq_n_u32(*(uint32x4_t *)(a1 + 916), 1uLL);
    *(uint32x4_t *)(a1 + 900) = vshrq_n_u32(*(uint32x4_t *)(a1 + 900), 1uLL);
    *(uint32x4_t *)(a1 + 916) = v266;
    uint32x4_t v267 = vshrq_n_u32(*(uint32x4_t *)(a1 + 948), 1uLL);
    *(uint32x4_t *)(a1 + 932) = vshrq_n_u32(*(uint32x4_t *)(a1 + 932), 1uLL);
    *(uint32x4_t *)(a1 + 948) = v267;
    uint32x4_t v268 = vshrq_n_u32(*(uint32x4_t *)(a1 + 980), 1uLL);
    *(uint32x4_t *)(a1 + 964) = vshrq_n_u32(*(uint32x4_t *)(a1 + 964), 1uLL);
    *(uint32x4_t *)(a1 + 980) = v268;
    uint32x4_t v269 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1012), 1uLL);
    *(uint32x4_t *)(a1 + 996) = vshrq_n_u32(*(uint32x4_t *)(a1 + 996), 1uLL);
    *(uint32x4_t *)(a1 + 1012) = v269;
    uint32x4_t v270 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1044), 1uLL);
    *(uint32x4_t *)(a1 + 1028) = vshrq_n_u32(*(uint32x4_t *)(a1 + 1028), 1uLL);
    *(uint32x4_t *)(a1 + 1044) = v270;
    uint32x4_t v271 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1076), 1uLL);
    *(uint32x4_t *)(a1 + 1060) = vshrq_n_u32(*(uint32x4_t *)(a1 + 1060), 1uLL);
    *(uint32x4_t *)(a1 + 1076) = v271;
    uint32x4_t v272 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1108), 1uLL);
    *(uint32x4_t *)(a1 + 1092) = vshrq_n_u32(*(uint32x4_t *)(a1 + 1092), 1uLL);
    *(uint32x4_t *)(a1 + 1108) = v272;
    uint32x4_t v273 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1140), 1uLL);
    *(uint32x4_t *)(a1 + 1124) = vshrq_n_u32(*(uint32x4_t *)(a1 + 1124), 1uLL);
    *(uint32x4_t *)(a1 + 1140) = v273;
    uint32x4_t v274 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1172), 1uLL);
    *(uint32x4_t *)(a1 + 1156) = vshrq_n_u32(*(uint32x4_t *)(a1 + 1156), 1uLL);
    *(uint32x4_t *)(a1 + 1172) = v274;
    uint32x4_t v275 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1204), 1uLL);
    *(uint32x4_t *)(a1 + 1188) = vshrq_n_u32(*(uint32x4_t *)(a1 + 1188), 1uLL);
    *(uint32x4_t *)(a1 + 1204) = v275;
    uint32x4_t v276 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1236), 1uLL);
    *(uint32x4_t *)(a1 + 1220) = vshrq_n_u32(*(uint32x4_t *)(a1 + 1220), 1uLL);
    *(uint32x4_t *)(a1 + 1236) = v276;
    uint32x4_t v277 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1268), 1uLL);
    *(uint32x4_t *)(a1 + 1252) = vshrq_n_u32(*(uint32x4_t *)(a1 + 1252), 1uLL);
    *(uint32x4_t *)(a1 + 1268) = v277;
    uint32x4_t v278 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1300), 1uLL);
    *(uint32x4_t *)(a1 + 1284) = vshrq_n_u32(*(uint32x4_t *)(a1 + 1284), 1uLL);
    *(uint32x4_t *)(a1 + 1300) = v278;
  }
  int v279 = *(_DWORD *)(a1 + 288) - 1;
  *(_DWORD *)(a1 + 288) = v279;
  if (!v279)
  {
    uint64_t v280 = 0;
    unsigned int v281 = (5 * *(_DWORD *)(a1 + 284)) >> 2;
    if (*(_DWORD *)(a1 + 280) < v281) {
      unsigned int v281 = *(_DWORD *)(a1 + 280);
    }
    *(_DWORD *)(a1 + 284) = v281;
    *(_DWORD *)(a1 + 288) = v281;
    int32x4_t v282 = (int32x4_t)xmmword_18A628C30;
    v283.i64[0] = 0x400000004;
    v283.i64[1] = 0x400000004;
    v284.i64[0] = 0x800000008;
    v284.i64[1] = 0x800000008;
    do
    {
      int32x4_t v285 = vaddq_s32(vaddq_s32(v282, v283), vshlq_n_s32((int32x4_t)vmvnq_s8(*(int8x16_t *)(a1 + v280 * 16 + 308)), 8uLL));
      v286 = &v400[v280];
      _OWORD *v286 = vaddq_s32(vshlq_n_s32((int32x4_t)vmvnq_s8(*(int8x16_t *)(a1 + v280 * 16 + 292)), 8uLL), v282);
      v286[1] = v285;
      int32x4_t v282 = vaddq_s32(v282, v284);
      v280 += 2;
    }
    while (v280 != 64);
    int32x4_t v287 = (unsigned int *)v400;
    unint64_t v288 = (unsigned int *)&v408;
    while (1)
    {
      unint64_t v289 = v288 - v287;
      if (v289 < 2)
      {
LABEL_446:
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        uint64_t v338 = a1 + 1316;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1572)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1573)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1574)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1575)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1576)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1577)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1578)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1579)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1580)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1581)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1582)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1583)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1584)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1585)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1586)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1587)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1588)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1589)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1590)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1591)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1592)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1593)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1594)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1595)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1596)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1597)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1598)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1599)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1600)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1601)) = -1;
        int16x8_t v340 = (int16x8_t)v400[0];
        int16x8_t v339 = (int16x8_t)v400[1];
        unsigned __int8 v341 = BYTE4(v400[0]);
        unsigned __int8 v342 = BYTE8(v400[0]);
        unsigned __int8 v343 = BYTE12(v400[0]);
        unsigned __int8 v344 = v400[0];
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1602)) = -1;
        *(unsigned char *)(v338 + *(unsigned __int8 *)(a1 + 1603)) = -1;
        uint64_t v398 = v344;
        *(unsigned char *)(v338 + v344) = 0;
        uint64_t v345 = v343;
        uint64_t v396 = v341;
        *(unsigned char *)(v338 + v341) = 1;
        uint64_t v394 = v342;
        *(unsigned char *)(v338 + v342) = 2;
        int16x8_t v347 = v401;
        int16x8_t v346 = v402;
        unsigned __int8 v348 = v401.u8[4];
        unsigned __int8 v349 = v401.u8[8];
        unsigned __int8 v350 = v401.u8[12];
        uint64_t v351 = v401.u8[0];
        uint64_t v392 = v345;
        *(unsigned char *)(v338 + v345) = 3;
        uint64_t v390 = v339.u8[0];
        *(unsigned char *)(v338 + v339.u8[0]) = 4;
        *(unsigned char *)(v338 + v339.u8[4]) = 5;
        *(unsigned char *)(v338 + v339.u8[8]) = 6;
        *(unsigned char *)(v338 + v339.u8[12]) = 7;
        *(unsigned char *)(v338 + v351) = 8;
        uint64_t v352 = v348;
        uint64_t v353 = v349;
        uint64_t v354 = v350;
        *(unsigned char *)(v338 + v348) = 9;
        *(unsigned char *)(v338 + v349) = 10;
        uint64_t v355 = v346.u8[8];
        int16x8_t v357 = v403;
        int16x8_t v356 = v404;
        unsigned __int8 v358 = v403.u8[4];
        unsigned __int8 v359 = v403.u8[8];
        unsigned __int8 v360 = v403.u8[12];
        uint64_t v361 = v403.u8[0];
        *(unsigned char *)(v338 + v354) = 11;
        *(unsigned char *)(v338 + v346.u8[0]) = 12;
        *(unsigned char *)(v338 + v346.u8[4]) = 13;
        *(unsigned char *)(v338 + v346.u8[8]) = 14;
        uint64_t v399 = v346.u8[12];
        *(unsigned char *)(v338 + v346.u8[12]) = 15;
        uint64_t v397 = v361;
        *(unsigned char *)(v338 + v361) = 16;
        *(unsigned char *)(v338 + v358) = 17;
        *(unsigned char *)(v338 + v359) = 18;
        *(unsigned char *)(v338 + v360) = 19;
        *(unsigned char *)(v338 + v356.u8[0]) = 20;
        *(unsigned char *)(v338 + v356.u8[4]) = 21;
        *(unsigned char *)(v338 + v356.u8[8]) = 22;
        *(unsigned char *)(v338 + v356.u8[12]) = 23;
        int16x8_t v362 = v405;
        int16x8_t v363 = v406;
        unsigned __int8 v364 = v405.u8[4];
        unsigned __int8 v365 = v405.u8[8];
        uint64_t v366 = v405.u8[0];
        *(unsigned char *)(v338 + v405.u8[0]) = 24;
        *(unsigned char *)(v338 + v364) = 25;
        *(unsigned char *)(v338 + v365) = 26;
        uint64_t v395 = v362.u8[12];
        *(unsigned char *)(v338 + v362.u8[12]) = 27;
        *(unsigned char *)(v338 + v363.u8[0]) = 28;
        uint64_t v393 = v363.u8[4];
        *(unsigned char *)(v338 + v363.u8[4]) = 29;
        *(unsigned char *)(v338 + v363.u8[8]) = 30;
        uint64_t v391 = v363.u8[12];
        *(unsigned char *)(v338 + v363.u8[12]) = 31;
        *(int8x16_t *)(a1 + 1572) = vuzp1q_s8((int8x16_t)vuzp1q_s16(v340, v339), (int8x16_t)vuzp1q_s16(v347, v346));
        *(int8x16_t *)(a1 + 1588) = vuzp1q_s8((int8x16_t)vuzp1q_s16(v357, v356), (int8x16_t)vuzp1q_s16(v362, v363));
        if (*(unsigned char *)(a1 + 1604))
        {
          *(unsigned char *)(a1 + 1604) = 0;
          v367 = (void *)(a1 + 292);
          uint64_t v388 = v366;
          uint64_t v389 = v356.u8[12];
          uint64_t v381 = v346.u8[4];
          uint64_t v382 = v346.u8[0];
          uint64_t v379 = v354;
          uint64_t v380 = v352;
          uint64_t v377 = v351;
          uint64_t v378 = v353;
          uint64_t v368 = v339.u8[4];
          uint64_t v369 = v339.u8[8];
          uint64_t v376 = v339.u8[12];
          uint64_t v370 = v358;
          uint64_t v371 = v359;
          uint64_t v383 = v360;
          uint64_t v384 = v356.u8[0];
          uint64_t v385 = v356.u8[4];
          uint64_t v386 = v356.u8[8];
          uint64_t v387 = v364;
          uint64_t v372 = v365;
          uint64_t v373 = v363.u8[0];
          uint64_t v374 = v363.u8[8];
          bzero(v367, 0x400uLL);
          *((_DWORD *)v367 + v398) = 1;
          *((_DWORD *)v367 + v396) = 1;
          *((_DWORD *)v367 + v394) = 1;
          *((_DWORD *)v367 + v392) = 1;
          *((_DWORD *)v367 + v390) = 1;
          *((_DWORD *)v367 + v368) = 1;
          *((_DWORD *)v367 + v369) = 1;
          *((_DWORD *)v367 + v376) = 1;
          *((_DWORD *)v367 + v377) = 1;
          *((_DWORD *)v367 + v380) = 1;
          *((_DWORD *)v367 + v378) = 1;
          *((_DWORD *)v367 + v379) = 1;
          *((_DWORD *)v367 + v382) = 1;
          *((_DWORD *)v367 + v381) = 1;
          *((_DWORD *)v367 + v355) = 1;
          *((_DWORD *)v367 + v399) = 1;
          *((_DWORD *)v367 + v397) = 1;
          *((_DWORD *)v367 + v370) = 1;
          *((_DWORD *)v367 + v371) = 1;
          *((_DWORD *)v367 + v383) = 1;
          *((_DWORD *)v367 + v384) = 1;
          *((_DWORD *)v367 + v385) = 1;
          *((_DWORD *)v367 + v386) = 1;
          *((_DWORD *)v367 + v389) = 1;
          *((_DWORD *)v367 + v388) = 1;
          *((_DWORD *)v367 + v387) = 1;
          *((_DWORD *)v367 + v372) = 1;
          *((_DWORD *)v367 + v395) = 1;
          *((_DWORD *)v367 + v373) = 1;
          *((_DWORD *)v367 + v393) = 1;
          *((_DWORD *)v367 + v374) = 1;
          *((_DWORD *)v367 + v391) = 1;
        }
        return v102;
      }
      if (v289 == 3)
      {
        unsigned int v322 = *v287;
        unsigned int v323 = v287[1];
        unsigned int v324 = *(v288 - 1);
        if (v323 >= *v287)
        {
          if (v324 < v323)
          {
            v287[1] = v324;
            *(v288 - 1) = v323;
            unsigned int v336 = *v287;
            unsigned int v335 = v287[1];
            if (v335 < *v287)
            {
              *int32x4_t v287 = v335;
              v287[1] = v336;
            }
          }
        }
        else
        {
          if (v324 >= v323)
          {
            *int32x4_t v287 = v323;
            v287[1] = v322;
            unsigned int v337 = *(v288 - 1);
            if (v337 >= v322) {
              goto LABEL_446;
            }
            v287[1] = v337;
          }
          else
          {
            *int32x4_t v287 = v324;
          }
          *(v288 - 1) = v322;
        }
        goto LABEL_446;
      }
      if (v289 == 2)
      {
        unsigned int v325 = *(v288 - 1);
        unsigned int v326 = *v287;
        if (v325 < *v287)
        {
          *int32x4_t v287 = v325;
          *(v288 - 1) = v326;
        }
        goto LABEL_446;
      }
      if ((char *)v288 - (char *)v287 <= 31)
      {
        while (v287 != v288 - 1)
        {
          uint64_t v327 = v287++;
          if (v327 != v288 && v287 != v288)
          {
            unsigned int v328 = *v327;
            unsigned int v329 = *v327;
            int v330 = v287;
            v331 = v327;
            v332 = v287;
            do
            {
              unsigned int v334 = *v332++;
              unsigned int v333 = v334;
              if (v334 < v329)
              {
                unsigned int v329 = v333;
                v331 = v330;
              }
              int v330 = v332;
            }
            while (v332 != v288);
            if (v331 != v327)
            {
              *uint64_t v327 = *v331;
              unsigned int *v331 = v328;
            }
          }
        }
        goto LABEL_446;
      }
      v290 = &v287[v289 >> 1];
      v291 = v288 - 1;
      unsigned int v292 = *(v288 - 1);
      unsigned int v293 = *v290;
      unsigned int v294 = *v287;
      if (*v290 >= *v287)
      {
        if (v292 >= v293)
        {
          int v295 = 0;
          unsigned int v296 = *v287;
          unsigned int v297 = *v290;
          if (*v287 >= *v290) {
            goto LABEL_385;
          }
          goto LABEL_367;
        }
        unsigned int *v290 = v292;
        unsigned int *v291 = v293;
        unsigned int v307 = *v287;
        if (*v290 < *v287)
        {
          *int32x4_t v287 = *v290;
          unsigned int *v290 = v307;
          int v295 = 2;
          unsigned int v296 = *v287;
          unsigned int v297 = *v290;
          if (*v287 >= *v290) {
            goto LABEL_385;
          }
          goto LABEL_367;
        }
      }
      else
      {
        if (v292 < v293)
        {
          *int32x4_t v287 = v292;
          unsigned int *v291 = v294;
          int v295 = 1;
          unsigned int v296 = *v287;
          unsigned int v297 = *v290;
          if (*v287 >= *v290) {
            goto LABEL_385;
          }
          goto LABEL_367;
        }
        *int32x4_t v287 = v293;
        unsigned int *v290 = v294;
        if (*v291 < v294)
        {
          unsigned int *v290 = *v291;
          unsigned int *v291 = v294;
          int v295 = 2;
          unsigned int v296 = *v287;
          unsigned int v297 = *v290;
          if (*v287 >= *v290) {
            goto LABEL_385;
          }
          goto LABEL_367;
        }
      }
      int v295 = 1;
      unsigned int v296 = *v287;
      unsigned int v297 = *v290;
      if (*v287 >= *v290)
      {
LABEL_385:
        v298 = v288 - 1;
        while (--v298 != v287)
        {
          if (*v298 < v297)
          {
            *int32x4_t v287 = *v298;
            unsigned int *v298 = v296;
            ++v295;
            v299 = v287 + 1;
            if (v287 + 1 < v298) {
              goto LABEL_368;
            }
            goto LABEL_389;
          }
        }
        v311 = v287 + 1;
        if (v296 >= *v291)
        {
          if (v311 == v291) {
            goto LABEL_446;
          }
          while (1)
          {
            unsigned int v312 = *v311;
            if (v296 < *v311) {
              break;
            }
            if (++v311 == v291) {
              goto LABEL_446;
            }
          }
          *v311++ = *v291;
          unsigned int *v291 = v312;
        }
        if (v311 == v291) {
          goto LABEL_446;
        }
        while (1)
        {
          unsigned int v316 = *v287;
          do
          {
            unsigned int v318 = *v311++;
            unsigned int v317 = v318;
          }
          while (v316 >= v318);
          v319 = v311 - 1;
          do
          {
            unsigned int v321 = *--v291;
            unsigned int v320 = v321;
          }
          while (v316 < v321);
          if (v319 >= v291) {
            break;
          }
          unsigned int *v319 = v320;
          unsigned int *v291 = v317;
        }
        int32x4_t v287 = v311 - 1;
        if (v319 > (unsigned int *)v407) {
          goto LABEL_446;
        }
        goto LABEL_422;
      }
LABEL_367:
      v298 = v288 - 1;
      v299 = v287 + 1;
      if (v287 + 1 >= v288 - 1)
      {
LABEL_389:
        uint64_t v304 = v299;
      }
      else
      {
LABEL_368:
        int v300 = v299;
        while (1)
        {
          unsigned int v301 = *v290;
          do
          {
            unsigned int v303 = *v300++;
            unsigned int v302 = v303;
          }
          while (v303 < v301);
          uint64_t v304 = v300 - 1;
          do
          {
            unsigned int v306 = *--v298;
            unsigned int v305 = v306;
          }
          while (v306 >= v301);
          if (v304 >= v298) {
            break;
          }
          *uint64_t v304 = v305;
          unsigned int *v298 = v302;
          ++v295;
          if (v304 == v290) {
            v290 = v298;
          }
        }
      }
      if (v304 != v290)
      {
        unsigned int v308 = *v304;
        if (*v290 < *v304)
        {
          *uint64_t v304 = *v290;
          unsigned int *v290 = v308;
          ++v295;
        }
      }
      if (v304 == (unsigned int *)v407) {
        goto LABEL_446;
      }
      if (!v295)
      {
        if (v304 <= (unsigned int *)v407)
        {
          int v313 = v304 + 1;
          while (v313 != v288)
          {
            unsigned int v315 = *(v313 - 1);
            unsigned int v314 = *v313++;
            if (v314 < v315) {
              goto LABEL_395;
            }
          }
        }
        else
        {
          while (v299 != v304)
          {
            unsigned int v310 = *(v299 - 1);
            unsigned int v309 = *v299++;
            if (v309 < v310) {
              goto LABEL_395;
            }
          }
        }
        goto LABEL_446;
      }
LABEL_395:
      if (v304 > (unsigned int *)v407) {
        unint64_t v288 = v304;
      }
      else {
        int32x4_t v287 = v304 + 1;
      }
LABEL_422:
      if (v288 == (unsigned int *)v407) {
        goto LABEL_446;
      }
    }
  }
  return v102;
}

void gcl::tmesh::EstimateQuantizedNormals(uint64_t *a1, void *a2, uint64_t a3, signed int a4)
{
  uint64_t v7 = (a1[1] - *a1) / 12;
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  int v10 = *(float **)a3;
  *(void *)(a3 + 8) = *(void *)a3;
  uint64_t v11 = v7 << 32;
  if (!(v7 << 32))
  {
    unsigned int v18 = 0;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 2);
    if ((int)v19 < 1) {
      goto LABEL_81;
    }
    goto LABEL_16;
  }
  size_t v12 = (int)v7;
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 16) - (void)v10) >> 2);
  int v116 = v7;
  if (v13 >= (int)v7)
  {
    bzero(v10, 12 * ((12 * (int)v7 - 12) / 0xCuLL) + 12);
    *(void *)(a3 + 8) = &v10[3 * (int)v7];
    if (v11 < 0) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
  }
  else
  {
    if (v11 < 0) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0x5555555555555556 * ((uint64_t)(*(void *)(a3 + 16) - (void)v10) >> 2);
    if (v14 <= (int)v7) {
      unint64_t v14 = (int)v7;
    }
    if (v13 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v15 = 0x1555555555555555;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15 > 0x1555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v16 = 12 * v15;
    unsigned int v17 = (char *)operator new(12 * v15);
    bzero(v17, 12 * ((12 * v12 - 12) / 0xC) + 12);
    *(void *)a3 = v17;
    *(void *)(a3 + 8) = &v17[12 * v12];
    *(void *)(a3 + 16) = &v17[v16];
    if (v10) {
      operator delete(v10);
    }
  }
  unsigned int v18 = operator new(v12);
  bzero(v18, v12);
  LODWORD(v7) = v116;
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 2);
  if ((int)v19 >= 1)
  {
LABEL_16:
    unint64_t v19 = v19;
    uint64_t v20 = *a1;
    unint64_t v21 = (int *)(*a2 + 8);
    uint64_t v22 = *(float **)a3;
    do
    {
      uint64_t v24 = *(v21 - 2);
      int v25 = (int *)(v20 + 12 * v24);
      unsigned int v26 = (int *)(v20 + 12 * *(v21 - 1));
      int v27 = (int *)(v20 + 12 * *v21);
      uint64_t v28 = *v25;
      uint64_t v29 = v25[1];
      uint64_t v30 = *v26 - v28;
      uint64_t v31 = *v27 - v28;
      uint64_t v32 = v26[1] - v29;
      uint64_t v33 = v25[2];
      uint64_t v34 = v26[2] - v33;
      uint64_t v35 = v27[1] - v29;
      uint64_t v36 = v27[2] - v33;
      uint64_t v37 = v36 * v32 - v35 * v34;
      uint64_t v38 = v31 * v34 - v36 * v30;
      uint64_t v39 = v35 * v30 - v31 * v32;
      int v40 = &v22[3 * v24];
      char v41 = *((unsigned char *)v18 + v24);
      if (v41)
      {
        uint64_t v42 = 1 << (v41 - 1);
        uint64_t v43 = (v42 + v37) >> v41;
        if (v37 < 0) {
          uint64_t v43 = -((v42 - v37) >> v41);
        }
        if (v38 < 0) {
          uint64_t v44 = -((v42 - v38) >> v41);
        }
        else {
          uint64_t v44 = (v42 + v38) >> v41;
        }
        uint64_t v45 = v44 + *((int *)v40 + 1);
        uint64_t v46 = (v42 - v39) >> v41;
        uint64_t v47 = (v42 + v39) >> v41;
        if (v39 < 0) {
          uint64_t v47 = -v46;
        }
        uint64_t v48 = v47 + *((int *)v40 + 2);
      }
      else
      {
        uint64_t v45 = v38 + *((int *)v40 + 1);
        uint64_t v48 = v39 + *((int *)v40 + 2);
        uint64_t v43 = v37;
      }
      uint64_t v49 = v43 + *(int *)v40;
      unint64_t v50 = (uint64_t)fmax(fmax(fabs((double)v49), fabs((double)v45)), fabs((double)v48)) + 1;
      if (v50 >> 30)
      {
        char v51 = __clz(v50);
        char v52 = 34 - v51;
        *((unsigned char *)v18 + v24) = v41 + 34 - v51;
        uint64_t v53 = 1 << (33 - v51);
        unint64_t v54 = (unint64_t)(v53 - v49) >> (34 - v51);
        unint64_t v55 = (unint64_t)(v53 + v49) >> (34 - v51);
        if (v49 < 0) {
          uint64_t v49 = -(uint64_t)v54;
        }
        else {
          LODWORD(v49) = v55;
        }
        if (v45 < 0) {
          uint64_t v45 = -(uint64_t)((unint64_t)(v53 - v45) >> v52);
        }
        else {
          uint64_t v45 = (unint64_t)(v53 + v45) >> v52;
        }
        unint64_t v56 = (unint64_t)(v53 - v48) >> v52;
        unint64_t v57 = (unint64_t)(v53 + v48) >> v52;
        if (v48 < 0) {
          uint64_t v48 = -(uint64_t)v56;
        }
        else {
          LODWORD(v48) = v57;
        }
      }
      *(_DWORD *)int v40 = v49;
      *((_DWORD *)v40 + 1) = v45;
      *((_DWORD *)v40 + 2) = v48;
      uint64_t v58 = *(v21 - 1);
      BOOL v59 = &v22[3 * (int)v58];
      char v60 = *((unsigned char *)v18 + v58);
      if (v60)
      {
        uint64_t v61 = 1 << (v60 - 1);
        if (v37 < 0) {
          uint64_t v62 = -((v61 - v37) >> v60);
        }
        else {
          uint64_t v62 = (v61 + v37) >> v60;
        }
        uint64_t v63 = (v61 + v38) >> v60;
        if (v38 < 0) {
          uint64_t v63 = -((v61 - v38) >> v60);
        }
        uint64_t v64 = v63 + *((int *)v59 + 1);
        uint64_t v65 = (v61 + v39) >> v60;
        uint64_t v66 = (v61 - v39) >> v60;
        if (v39 < 0) {
          uint64_t v67 = -v66;
        }
        else {
          uint64_t v67 = v65;
        }
        uint64_t v68 = v67 + *((int *)v59 + 2);
      }
      else
      {
        uint64_t v64 = v38 + *((int *)v59 + 1);
        uint64_t v68 = v39 + *((int *)v59 + 2);
        uint64_t v62 = v37;
      }
      uint64_t v69 = v62 + *(int *)v59;
      unint64_t v70 = (uint64_t)fmax(fmax(fabs((double)v69), fabs((double)v64)), fabs((double)v68)) + 1;
      if (v70 >> 30)
      {
        char v71 = __clz(v70);
        char v72 = 34 - v71;
        *((unsigned char *)v18 + v58) = v60 + 34 - v71;
        uint64_t v73 = 1 << (33 - v71);
        unint64_t v74 = (unint64_t)(v73 + v69) >> (34 - v71);
        unint64_t v75 = (unint64_t)(v73 - v69) >> (34 - v71);
        if (v69 < 0) {
          uint64_t v69 = -(uint64_t)v75;
        }
        else {
          LODWORD(v69) = v74;
        }
        if (v64 < 0) {
          uint64_t v64 = -(uint64_t)((unint64_t)(v73 - v64) >> v72);
        }
        else {
          uint64_t v64 = (unint64_t)(v73 + v64) >> v72;
        }
        unint64_t v76 = (unint64_t)(v73 + v68) >> v72;
        unint64_t v77 = (unint64_t)(v73 - v68) >> v72;
        if (v68 < 0) {
          uint64_t v68 = -(uint64_t)v77;
        }
        else {
          LODWORD(v68) = v76;
        }
      }
      *(_DWORD *)BOOL v59 = v69;
      *((_DWORD *)v59 + 1) = v64;
      *((_DWORD *)v59 + 2) = v68;
      uint64_t v78 = *v21;
      uint64_t v79 = &v22[3 * (int)v78];
      char v80 = *((unsigned char *)v18 + v78);
      if (v80)
      {
        uint64_t v81 = 1 << (v80 - 1);
        if (v37 < 0) {
          uint64_t v37 = -((v81 - v37) >> v80);
        }
        else {
          uint64_t v37 = (v81 + v37) >> v80;
        }
        if (v38 < 0) {
          uint64_t v82 = -((v81 - v38) >> v80);
        }
        else {
          uint64_t v82 = (v81 + v38) >> v80;
        }
        uint64_t v83 = v82 + *((int *)v79 + 1);
        uint64_t v84 = (v81 + v39) >> v80;
        uint64_t v85 = (v81 - v39) >> v80;
        if (v39 < 0) {
          uint64_t v86 = -v85;
        }
        else {
          uint64_t v86 = v84;
        }
        uint64_t v23 = v86 + *((int *)v79 + 2);
      }
      else
      {
        uint64_t v83 = v38 + *((int *)v79 + 1);
        uint64_t v23 = v39 + *((int *)v79 + 2);
      }
      uint64_t v87 = v37 + *(int *)v79;
      unint64_t v88 = (uint64_t)fmax(fmax(fabs((double)v87), fabs((double)v83)), fabs((double)v23)) + 1;
      if (v88 >> 30)
      {
        char v89 = __clz(v88);
        char v90 = 34 - v89;
        *((unsigned char *)v18 + v78) = v80 + 34 - v89;
        uint64_t v91 = 1 << (33 - v89);
        unint64_t v92 = (unint64_t)(v91 + v87) >> (34 - v89);
        unint64_t v93 = (unint64_t)(v91 - v87) >> (34 - v89);
        if (v87 < 0) {
          uint64_t v87 = -(uint64_t)v93;
        }
        else {
          LODWORD(v87) = v92;
        }
        if (v83 < 0) {
          uint64_t v83 = -(uint64_t)((unint64_t)(v91 - v83) >> v90);
        }
        else {
          uint64_t v83 = (unint64_t)(v91 + v83) >> v90;
        }
        if (v23 < 0) {
          uint64_t v23 = -(uint64_t)((unint64_t)(v91 - v23) >> v90);
        }
        else {
          uint64_t v23 = (unint64_t)(v91 + v23) >> v90;
        }
      }
      *(_DWORD *)uint64_t v79 = v87;
      *((_DWORD *)v79 + 1) = v83;
      v21 += 3;
      *((_DWORD *)v79 + 2) = v23;
      --v19;
    }
    while (v19);
  }
LABEL_81:
  if ((int)v7 < 1) {
    goto LABEL_113;
  }
  int v94 = *(float **)a3;
  if (v7 >= 2uLL)
  {
    unint64_t v95 = v7 - (unint64_t)(v7 & 1);
    int8x8_t v96 = (int8x8_t)vdup_n_s32(a4);
    unint64_t v97 = v95;
    int v98 = *(float **)a3;
    while (1)
    {
      float32x2x3_t v119 = vld3_f32(v98);
      v99.i64[0] = v119.val[0].i32[0];
      v99.i64[1] = v119.val[0].i32[1];
      int64x2_t v100 = v99;
      v99.i64[0] = v119.val[1].i32[0];
      v99.i64[1] = v119.val[1].i32[1];
      int64x2_t v101 = v99;
      v99.i64[0] = v119.val[2].i32[0];
      v99.i64[1] = v119.val[2].i32[1];
      int64x2_t v102 = v99;
      int64x2_t v103 = vabsq_s64(v99);
      int64x2_t v104 = vaddq_s64(vaddq_s64(vabsq_s64(v101), vabsq_s64(v100)), v103);
      int8x8_t v105 = (int8x8_t)vmovn_s64(vtstq_s64(v104, v104));
      if (v105.i8[0])
      {
        v103.i64[0] = v100.i32[0] * (uint64_t)a4 / v104.i64[0];
        uint64_t v106 = v104.i64[1];
        if ((v105.i8[4] & 1) == 0)
        {
LABEL_88:
          if ((v105.i8[0] & 1) == 0) {
            goto LABEL_89;
          }
          goto LABEL_95;
        }
      }
      else
      {
        uint64_t v106 = v104.i64[1];
        if ((v105.i8[4] & 1) == 0) {
          goto LABEL_88;
        }
      }
      v103.i64[1] = v100.i32[2] * (uint64_t)a4 / v106;
      if ((v105.i8[0] & 1) == 0)
      {
LABEL_89:
        if ((v105.i8[4] & 1) == 0) {
          goto LABEL_90;
        }
        goto LABEL_96;
      }
LABEL_95:
      v100.i64[0] = v101.i32[0] * (uint64_t)a4 / v104.i64[0];
      if ((v105.i8[4] & 1) == 0)
      {
LABEL_90:
        if ((v105.i8[0] & 1) == 0) {
          goto LABEL_91;
        }
        goto LABEL_97;
      }
LABEL_96:
      v100.i64[1] = v101.i32[2] * (uint64_t)a4 / v106;
      if ((v105.i8[0] & 1) == 0)
      {
LABEL_91:
        if (v105.i8[4]) {
          goto LABEL_98;
        }
        goto LABEL_85;
      }
LABEL_97:
      v101.i64[0] = v102.i32[0] * (uint64_t)a4 / v104.i64[0];
      if (v105.i8[4]) {
LABEL_98:
      }
        v101.i64[1] = v102.i32[2] * (uint64_t)a4 / v106;
LABEL_85:
      v120.val[0] = (float32x2_t)vand_s8((int8x8_t)vmovn_s64(v103), v105);
      v120.val[1] = (float32x2_t)vand_s8((int8x8_t)vmovn_s64(v100), v105);
      v120.val[2] = (float32x2_t)vorr_s8((int8x8_t)vmovn_s64((int64x2_t)vbicq_s8((int8x16_t)v101, (int8x16_t)vceqzq_s64(v104))), vbic_s8(v96, v105));
      vst3_f32(v98, v120);
      v98 += 6;
      v97 -= 2;
      if (!v97)
      {
        if (v7) {
          goto LABEL_100;
        }
        goto LABEL_113;
      }
    }
  }
  unint64_t v95 = 0;
LABEL_100:
  unint64_t v107 = v7 - v95;
  unsigned int v108 = (signed int *)&v94[3 * v95 + 2];
  do
  {
    while (1)
    {
      uint64_t v110 = *(v108 - 2);
      uint64_t v109 = *(v108 - 1);
      uint64_t v111 = *v108;
      uint64_t v112 = v110 >= 0 ? *(v108 - 2) : -v110;
      uint64_t v113 = v109 >= 0 ? *(v108 - 1) : -v109;
      uint64_t v114 = v111 >= 0 ? *v108 : -v111;
      uint64_t v115 = v113 + v112 + v114;
      if (!v115) {
        break;
      }
      *(v108 - 2) = (int)v110 * (uint64_t)a4 / v115;
      *(v108 - 1) = (int)v109 * (uint64_t)a4 / v115;
      *unsigned int v108 = (int)v111 * (uint64_t)a4 / v115;
      v108 += 3;
      if (!--v107) {
        goto LABEL_113;
      }
    }
    *(v108 - 2) = 0;
    *(v108 - 1) = 0;
    *unsigned int v108 = a4;
    v108 += 3;
    --v107;
  }
  while (v107);
LABEL_113:
  if (v18)
  {
    operator delete(v18);
  }
}

uint64_t gcl::gpcc::Decoder::Impl::decode(gcl::gpcc::Decoder::Impl *this, const char *a2, unint64_t a3, unint64_t *a4, const gcl::gpcc::Decoder::Delegate *a5)
{
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  if (a3 < 6 || (uint64_t v5 = bswap32(*(_DWORD *)(a2 + 1)), v5 + 5 > a3))
  {
    uint64_t v6 = 0;
    if (a4) {
      *a4 = 0;
    }
    return v6;
  }
  int v10 = *(unsigned __int8 *)a2;
  if (a4) {
    *a4 = (v5 + 5);
  }
  uint64_t v11 = (unsigned __int8 *)(a2 + 5);
  uint64_t v6 = 0;
  switch(v10)
  {
    case 0:
      if (*((unsigned char *)this + 2)) {
        return 0;
      }
      uint64_t v6 = gcl::gpcc::HlsIo::parseSps((uint64_t)this, (unsigned __int8 *)a2 + 5, v5, (uint64_t)this + 32, 0);
      if (v6) {
        return v6;
      }
      BOOL v59 = (void **)((char *)this + 8);
      uint64_t v60 = *((void *)this + 11) - *((void *)this + 10);
      uint64_t v61 = v60 >> 5;
      unint64_t v62 = *((void *)this + 2);
      unint64_t v63 = (v60 >> 5) - v62;
      if (v60 >> 5 <= v62)
      {
        *((void *)this + 2) = v61;
LABEL_162:
        uint64_t v109 = *((void *)this + 10);
        uint64_t v110 = *((void *)this + 11);
        unint64_t v111 = (v110 - v109) >> 5;
        uint64_t v113 = (char *)*((void *)this + 19);
        uint64_t v112 = (char *)*((void *)this + 20);
        uint64_t v114 = (char *)(v112 - v113);
        unint64_t v115 = 0x8E38E38E38E38E39 * ((v112 - v113) >> 2);
        unint64_t v116 = v111 - v115;
        if (v111 <= v115)
        {
          if (v111 < v115) {
            *((void *)this + 20) = &v113[36 * v111];
          }
        }
        else
        {
          uint64_t v117 = *((void *)this + 21);
          if (0x8E38E38E38E38E39 * ((v117 - (uint64_t)v112) >> 2) >= v116)
          {
            unsigned int v130 = &v112[36 * v116];
            unint64_t v131 = 36 * v111 - (void)v114 - 36;
            if (v131 < 0x24) {
              goto LABEL_222;
            }
            unint64_t v132 = v131 / 0x24 + 1;
            unint64_t v133 = v112 + 32;
            uint64_t v134 = v132 & 0xFFFFFFFFFFFFFFELL;
            do
            {
              *(_OWORD *)unint64_t v133 = xmmword_18A643600;
              *((_OWORD *)v133 + 1) = xmmword_18A643620;
              *((_OWORD *)v133 - 2) = xmmword_18A643610;
              *((_OWORD *)v133 - 1) = xmmword_18A643630;
              *((void *)v133 + 4) = 0x100000002;
              v133 += 72;
              v134 -= 2;
            }
            while (v134);
            v112 += 36 * (v132 & 0xFFFFFFFFFFFFFFELL);
            if (v132 != (v132 & 0xFFFFFFFFFFFFFFELL))
            {
LABEL_222:
              do
              {
                *((_DWORD *)v112 + 8) = 1;
                *(_OWORD *)uint64_t v112 = xmmword_18A643610;
                *((_OWORD *)v112 + 1) = xmmword_18A643630;
                v112 += 36;
              }
              while (v112 != v130);
            }
            *((void *)this + 20) = v130;
          }
          else
          {
            if (v110 - v109 < 0) {
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v118 = 0x1C71C71C71C71C72 * ((v117 - (uint64_t)v113) >> 2);
            if (v118 <= v111) {
              unint64_t v118 = (v110 - v109) >> 5;
            }
            if (0x8E38E38E38E38E39 * ((v117 - (uint64_t)v113) >> 2) >= 0x38E38E38E38E38ELL) {
              unint64_t v119 = 0x71C71C71C71C71CLL;
            }
            else {
              unint64_t v119 = v118;
            }
            if (v119 > 0x71C71C71C71C71CLL) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            float32x2x3_t v120 = (char *)operator new(36 * v119);
            uint64_t v121 = &v120[4 * ((v112 - v113) >> 2)];
            int v122 = &v120[36 * v111];
            unint64_t v123 = 36 * v111 - (void)v114 - 36;
            int v124 = v121;
            if (v123 < 0x24) {
              goto LABEL_223;
            }
            unint64_t v125 = v123 / 0x24 + 1;
            int v124 = &v121[36 * (v125 & 0xFFFFFFFFFFFFFFELL)];
            uint64_t v126 = (uint64_t)&v120[4 * ((v112 - v113) >> 2) + 32];
            uint64_t v127 = v125 & 0xFFFFFFFFFFFFFFELL;
            do
            {
              *(_OWORD *)uint64_t v126 = xmmword_18A643600;
              *(_OWORD *)(v126 + 16) = xmmword_18A643620;
              *(_OWORD *)(v126 - 32) = xmmword_18A643610;
              *(_OWORD *)(v126 - 16) = xmmword_18A643630;
              *(void *)(v126 + 32) = 0x100000002;
              v126 += 72;
              v127 -= 2;
            }
            while (v127);
            if (v125 != (v125 & 0xFFFFFFFFFFFFFFELL))
            {
LABEL_223:
              do
              {
                *((_DWORD *)v124 + 8) = 1;
                *(_OWORD *)int v124 = xmmword_18A643610;
                *((_OWORD *)v124 + 1) = xmmword_18A643630;
                v124 += 36;
              }
              while (v124 != v122);
            }
            if (v112 != v113)
            {
              do
              {
                long long v128 = *(_OWORD *)(v112 - 36);
                long long v129 = *(_OWORD *)(v112 - 20);
                *((_DWORD *)v121 - 1) = *((_DWORD *)v112 - 1);
                *(_OWORD *)(v121 - 20) = v129;
                *(_OWORD *)(v121 - 36) = v128;
                v121 -= 36;
                v112 -= 36;
              }
              while (v112 != v113);
              uint64_t v112 = v113;
            }
            *((void *)this + 19) = v121;
            *((void *)this + 20) = v122;
            *((void *)this + 21) = &v120[36 * v119];
            if (v112) {
              operator delete(v112);
            }
          }
          uint64_t v109 = *((void *)this + 10);
          uint64_t v110 = *((void *)this + 11);
        }
        if (v109 == v110)
        {
LABEL_199:
          uint64_t v6 = 0;
          *((unsigned char *)this + 2) = 1;
          return v6;
        }
        uint64_t v135 = 0;
        unint64_t v136 = 0;
        while (1)
        {
          *(int32x2_t *)&long long v141 = vrev64_s32(*(int32x2_t *)v109);
          DWORD2(v141) = *(_DWORD *)(v109 + 8);
          HIDWORD(v141) = DWORD2(v141);
          *(_OWORD *)((char *)v162 + 4) = v141;
          HIDWORD(v162[1]) = *(_DWORD *)(v109 + 20);
          LOBYTE(v162[2]) = *(unsigned char *)(v109 + 24);
          *(void *)((char *)&v162[1] + 4) = *(void *)(v109 + 12);
          LODWORD(v162[0]) = *(_DWORD *)(v109 + 28);
          uint64_t v142 = *((void *)a5 + 3);
          if (!v142) {
            break;
          }
          LODWORD(v157) = v136;
          int v143 = (*(uint64_t (**)(uint64_t, _OWORD *, char **))(*(void *)v142 + 48))(v142, v162, &v157);
          unint64_t v144 = (uint64_t *)((char *)*v59 + 8 * (v136 >> 6));
          uint64_t v145 = 1 << v136;
          if (!v143) {
            goto LABEL_198;
          }
          uint64_t v137 = *v144 | v145;
LABEL_193:
          uint64_t *v144 = v137;
          uint64_t v138 = *((void *)this + 19) + v135;
          long long v139 = v162[0];
          long long v140 = v162[1];
          *(_DWORD *)(v138 + 32) = v162[2];
          *(_OWORD *)uint64_t v138 = v139;
          *(_OWORD *)(v138 + 16) = v140;
          ++v136;
          v109 += 32;
          v135 += 36;
          if (v109 == v110) {
            goto LABEL_199;
          }
        }
        unint64_t v144 = (uint64_t *)((char *)*v59 + 8 * (v136 >> 6));
        uint64_t v145 = 1 << v136;
LABEL_198:
        uint64_t v137 = *v144 & ~v145;
        goto LABEL_193;
      }
      uint64_t v64 = *((void *)this + 3);
      if (v64 << 6 >= v63 && v62 <= (v64 << 6) - v63)
      {
        uint64_t v65 = (unint64_t *)(*((void *)this + 1) + 8 * (v62 >> 6));
        uint64_t v66 = *((void *)this + 2) & 0x3FLL;
        *((void *)this + 2) = v61;
LABEL_152:
        if (v63)
        {
          if (v66)
          {
            if ((64 - v66) >= v63) {
              unint64_t v108 = v63;
            }
            else {
              unint64_t v108 = (64 - v66);
            }
            *v65++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v66 - v108)) & (-1 << v66));
            v63 -= v108;
          }
          if (v63 >= 0x40) {
            bzero(v65, 8 * (v63 >> 6));
          }
          if ((v63 & 0x3F) != 0) {
            v65[v63 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v63 & 0x3F));
          }
        }
        goto LABEL_162;
      }
      memset(v162, 0, 24);
      if (v60 < 0) {
        goto LABEL_140;
      }
      if ((unint64_t)(v64 << 6) > 0x3FFFFFFFFFFFFFFELL)
      {
        unint64_t v103 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        unint64_t v103 = v64 << 7;
        if (v64 << 7 <= ((v61 + 63) & 0xFFFFFFFFFFFFFFC0)) {
          unint64_t v103 = (v61 + 63) & 0xFFFFFFFFFFFFFFC0;
        }
        if (!v103)
        {
          int8x8_t v105 = 0;
          uint64_t v153 = v64;
          uint64_t v106 = *v59;
          if ((uint64_t)v62 >= 1) {
            goto LABEL_143;
          }
          goto LABEL_149;
        }
        if ((v103 & 0x8000000000000000) != 0) {
LABEL_140:
        }
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v104 = ((v103 - 1) >> 6) + 1;
      int8x8_t v105 = operator new(8 * v104);
      *int8x8_t v105 = 0;
      *(void *)&v162[1] = v104;
      uint64_t v153 = v64;
      uint64_t v106 = *v59;
      if ((uint64_t)v62 >= 1)
      {
LABEL_143:
        uint64_t v66 = v62 >> 6;
        if (v62 >= 0x40)
        {
          unint64_t v107 = v106;
          memmove(v105, v106, 8 * v66);
          uint64_t v106 = v107;
        }
        uint64_t v65 = &v105[v66];
        if ((v62 & 0x3F) != 0)
        {
          *uint64_t v65 = *v65 & ~(0xFFFFFFFFFFFFFFFFLL >> -(v62 & 0x3F)) | *((void *)v106 + v66) & (0xFFFFFFFFFFFFFFFFLL >> -(v62 & 0x3F));
          LODWORD(v66) = v62 & 0x3F;
        }
        else
        {
          LODWORD(v66) = 0;
        }
        goto LABEL_150;
      }
LABEL_149:
      LODWORD(v66) = 0;
      uint64_t v65 = v105;
LABEL_150:
      *((void *)this + 1) = v105;
      *((void *)this + 2) = v61;
      *((void *)this + 3) = *(void *)&v162[1];
      *((void *)&v162[0] + 1) = v62;
      *(void *)&v162[1] = v153;
      if (v106) {
        operator delete(v106);
      }
      goto LABEL_152;
    case 1:
      *(void *)&v162[0] = 0;
      DWORD2(v162[0]) = 1;
      BYTE12(v162[0]) = 1;
      LODWORD(v162[1]) = 0;
      WORD2(v162[1]) = 0;
      DWORD2(v162[1]) = 8;
      WORD6(v162[1]) = 0;
      BYTE14(v162[1]) = 0;
      *(void *)&v162[2] = 3;
      DWORD2(v162[2]) = 0;
      uint64_t v6 = gcl::gpcc::HlsIo::parseGps((uint64_t)this, (unsigned char *)a2 + 5, v5, (uint64_t)v162, 0);
      if (v6) {
        return v6;
      }
      uint64_t v24 = (char *)*((void *)this + 13);
      int v25 = (char *)*((void *)this + 14);
      if (v24 == v25) {
        goto LABEL_30;
      }
      unsigned int v26 = (char *)*((void *)this + 13);
      while (*(_DWORD *)v26 != LODWORD(v162[0]))
      {
        v26 += 44;
        if (v26 == v25)
        {
LABEL_30:
          unint64_t v27 = *((void *)this + 15);
          if ((unint64_t)v25 >= v27)
          {
            unint64_t v71 = 0x2E8BA2E8BA2E8BA3 * ((v25 - v24) >> 2) + 1;
            if (v71 > 0x5D1745D1745D174) {
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v72 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v27 - (void)v24) >> 2);
            if (2 * v72 > v71) {
              unint64_t v71 = 2 * v72;
            }
            if (v72 >= 0x2E8BA2E8BA2E8BALL) {
              unint64_t v73 = 0x5D1745D1745D174;
            }
            else {
              unint64_t v73 = v71;
            }
            if (v73)
            {
              if (v73 > 0x5D1745D1745D174) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v74 = (char *)operator new(44 * v73);
            }
            else
            {
              unint64_t v74 = 0;
            }
            int64x2_t v99 = &v74[4 * ((v25 - v24) >> 2)];
            long long v100 = v162[1];
            *(_OWORD *)int64x2_t v99 = v162[0];
            *((_OWORD *)v99 + 1) = v100;
            *(_OWORD *)(v99 + 28) = *(_OWORD *)((char *)&v162[1] + 12);
            uint64_t v30 = v99 + 44;
            if (v24 != v25)
            {
              do
              {
                long long v101 = *(_OWORD *)(v25 - 44);
                long long v102 = *(_OWORD *)(v25 - 28);
                *((_OWORD *)v99 - 1) = *((_OWORD *)v25 - 1);
                *(_OWORD *)(v99 - 28) = v102;
                *(_OWORD *)(v99 - 44) = v101;
                v99 -= 44;
                v25 -= 44;
              }
              while (v25 != v24);
              uint64_t v24 = (char *)*((void *)this + 13);
            }
            *((void *)this + 13) = v99;
            *((void *)this + 14) = v30;
            *((void *)this + 15) = &v74[44 * v73];
            if (v24) {
              operator delete(v24);
            }
          }
          else
          {
            long long v28 = v162[0];
            long long v29 = v162[1];
            *(_OWORD *)(v25 + 28) = *(_OWORD *)((char *)&v162[1] + 12);
            *(_OWORD *)int v25 = v28;
            *((_OWORD *)v25 + 1) = v29;
            uint64_t v30 = v25 + 44;
          }
          uint64_t v6 = 0;
          *((void *)this + 14) = v30;
          return v6;
        }
      }
      return 0;
    case 2:
      uint64_t v34 = (_OWORD *)((char *)this + 216);
      uint64_t v33 = (_DWORD *)*((void *)this + 27);
      if (v33)
      {
        int v35 = *((_DWORD *)this + 53);
        if (v35 >= 1)
        {
          for (int i = 0; i < v35; ++i)
          {
            int v37 = v33[1];
            *v33 += *((_DWORD *)this + 47);
            v33[1] = v37 + *((_DWORD *)this + 48);
            v33[2] += *((_DWORD *)this + 49);
            uint64_t v33 = (_DWORD *)((char *)v33 + *((int *)this + 59));
            int v35 = *((_DWORD *)this + 53);
          }
        }
        uint64_t v38 = *((void *)a5 + 19);
        if (v38)
        {
          LODWORD(v157) = *((_DWORD *)this + 46);
          *(void *)&v162[0] = v35;
          (*(void (**)(uint64_t, char **, _OWORD *))(*(void *)v38 + 48))(v38, &v157, v162);
        }
        _OWORD *v34 = 0u;
        *(_OWORD *)((char *)this + 232) = 0u;
      }
      int v39 = 0;
      uint64_t v6 = 0;
      unsigned int v40 = 0;
      unsigned int v41 = 0;
      *((_DWORD *)this + 53) = 0;
      uint64_t v42 = (_DWORD *)((char *)this + 212);
      *((_DWORD *)this + 46) = -1;
      uint64_t v43 = &v11[v5];
      uint64_t v44 = -1;
      uint64_t v45 = v11;
      break;
    case 3:
      *(void *)&v162[0] = 0;
      DWORD2(v162[0]) = 0;
      BYTE12(v162[0]) = 1;
      v162[1] = xmmword_18A6435F0;
      LOBYTE(v162[2]) = 0;
      memset((char *)&v162[2] + 4, 0, 37);
      uint64_t v6 = gcl::gpcc::HlsIo::parseAps((uint64_t)this, (unsigned __int8 *)a2 + 5, v5, (uint64_t)v162, 0);
      if (v6) {
        goto LABEL_132;
      }
      size_t v12 = (char *)*((void *)this + 16);
      unint64_t v13 = (char *)*((void *)this + 17);
      if (v12 == v13) {
        goto LABEL_20;
      }
      unint64_t v14 = (char *)*((void *)this + 16);
      do
      {
        if (*(_DWORD *)v14 == LODWORD(v162[0]))
        {
          uint64_t v6 = 0;
          goto LABEL_132;
        }
        v14 += 80;
      }
      while (v14 != v13);
LABEL_20:
      unint64_t v15 = *((void *)this + 18);
      if ((unint64_t)v13 >= v15)
      {
        unint64_t v67 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - v12) >> 4) + 1;
        if (v67 > 0x333333333333333) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v68 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v15 - (void)v12) >> 4);
        if (2 * v68 > v67) {
          unint64_t v67 = 2 * v68;
        }
        if (v68 >= 0x199999999999999) {
          unint64_t v69 = 0x333333333333333;
        }
        else {
          unint64_t v69 = v67;
        }
        *(void *)&v159[16] = (char *)this + 144;
        if (v69)
        {
          if (v69 > 0x333333333333333) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v70 = (char *)operator new(80 * v69);
        }
        else
        {
          unint64_t v70 = 0;
        }
        uint64_t v84 = &v70[16 * ((v13 - v12) >> 4)];
        unsigned int v157 = v70;
        unsigned int v158 = v84;
        *(void *)BOOL v159 = v84;
        *(void *)&v159[8] = &v70[80 * v69];
        uint64_t v152 = *(void *)&v159[8];
        long long v85 = v162[0];
        long long v86 = v162[1];
        *((void *)v84 + 5) = 0;
        *(_OWORD *)uint64_t v84 = v85;
        *((_OWORD *)v84 + 1) = v86;
        *((void *)v84 + 6) = 0;
        uint64_t v87 = (char **)(v84 + 48);
        unint64_t v88 = (const void *)*((void *)&v162[2] + 1);
        *((void *)v84 + 4) = *(void *)&v162[2];
        *((void *)v84 + 7) = 0;
        int64_t v89 = *(void *)&v162[3] - (void)v88;
        if (*(const void **)&v162[3] != v88)
        {
          if (v89 < 0) {
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          }
          char v90 = (char *)operator new(*(void *)&v162[3] - (void)v88);
          *((void *)v84 + 5) = v90;
          *uint64_t v87 = v90;
          uint64_t v91 = &v90[8 * (v89 >> 3)];
          *((void *)v84 + 7) = v91;
          memcpy(v90, v88, v89);
          *uint64_t v87 = v91;
        }
        unint64_t v92 = &v70[16 * ((v13 - v12) >> 4)];
        *((void *)v92 + 8) = *(void *)&v162[4];
        v92[72] = BYTE8(v162[4]);
        uint64_t v23 = v84 + 80;
        *(void *)BOOL v159 = v84 + 80;
        if (v12 == v13)
        {
          *((void *)this + 16) = v84;
          *((void *)this + 17) = v23;
          *((void *)this + 18) = v152;
        }
        else
        {
          do
          {
            long long v93 = *((_OWORD *)v13 - 5);
            long long v94 = *((_OWORD *)v13 - 4);
            *((void *)v84 - 6) = *((void *)v13 - 6);
            *((_OWORD *)v84 - 5) = v93;
            *((_OWORD *)v84 - 4) = v94;
            *((void *)v84 - 4) = 0;
            *((void *)v84 - 3) = 0;
            *(_OWORD *)(v84 - 40) = *(_OWORD *)(v13 - 40);
            *((void *)v84 - 3) = *((void *)v13 - 3);
            *((void *)v13 - 5) = 0;
            *((void *)v13 - 4) = 0;
            *((void *)v13 - 3) = 0;
            uint64_t v95 = *((void *)v13 - 2);
            *(v84 - 8) = *(v13 - 8);
            *((void *)v84 - 2) = v95;
            v84 -= 80;
            v13 -= 80;
          }
          while (v13 != v12);
          size_t v12 = (char *)*((void *)this + 16);
          int8x8_t v96 = (char *)*((void *)this + 17);
          *((void *)this + 16) = v84;
          unint64_t v97 = *(char **)v159;
          *(_OWORD *)((char *)this + 136) = *(_OWORD *)v159;
          uint64_t v23 = v97;
          while (v96 != v12)
          {
            int v98 = (void *)*((void *)v96 - 5);
            if (v98)
            {
              *((void *)v96 - 4) = v98;
              operator delete(v98);
            }
            v96 -= 80;
          }
        }
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        long long v16 = v162[0];
        long long v17 = v162[1];
        *((void *)v13 + 4) = *(void *)&v162[2];
        *((void *)v13 + 5) = 0;
        *(_OWORD *)unint64_t v13 = v16;
        *((_OWORD *)v13 + 1) = v17;
        *((void *)v13 + 6) = 0;
        *((void *)v13 + 7) = 0;
        unsigned int v18 = (const void *)*((void *)&v162[2] + 1);
        int64_t v19 = *(void *)&v162[3] - *((void *)&v162[2] + 1);
        if (*(void *)&v162[3] != *((void *)&v162[2] + 1))
        {
          if (v19 < 0) {
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = (char *)operator new(*(void *)&v162[3] - *((void *)&v162[2] + 1));
          *((void *)v13 + 5) = v20;
          *((void *)v13 + 6) = v20;
          unint64_t v21 = &v20[8 * (v19 >> 3)];
          *((void *)v13 + 7) = v21;
          memcpy(v20, v18, v19);
          *((void *)v13 + 6) = v21;
        }
        uint64_t v22 = *(void *)&v162[4];
        v13[72] = BYTE8(v162[4]);
        *((void *)v13 + 8) = v22;
        uint64_t v23 = v13 + 80;
        *((void *)this + 17) = v13 + 80;
      }
      uint64_t v6 = 0;
      *((void *)this + 17) = v23;
LABEL_132:
      if (*((void *)&v162[2] + 1))
      {
        *(void *)&v162[3] = *((void *)&v162[2] + 1);
        operator delete(*((void **)&v162[2] + 1));
      }
      return v6;
    case 4:
      v160[0] = 0;
      *(void *)int v161 = 0;
      uint64_t v6 = gcl::gpcc::HlsIo::parseAbhIds(this, (const unsigned __int8 *)a2 + 5, v5, v161, &v161[1], v160);
      if (v6) {
        return v6;
      }
      uint64_t v56 = v161[1];
      if (v161[1] < 0 || v161[1] >= *((_DWORD *)this + 4) || v161[0] != *((_DWORD *)this + 46)) {
        return 3;
      }
      if (*((unsigned char *)this + 3)
        || ((*(void *)(*((void *)this + 1) + (((unint64_t)v161[1] >> 3) & 0x1FFFFFF8)) >> SLOBYTE(v161[1])) & 1) == 0)
      {
        return 0;
      }
      uint64_t v58 = (_DWORD *)*((void *)this + 16);
      unint64_t v57 = (_DWORD *)*((void *)this + 17);
      if (v58 == v57) {
        return 3;
      }
      uint64_t v6 = 3;
      while (*v58 != v160[0])
      {
        v58 += 20;
        if (v58 == v57) {
          return v6;
        }
      }
      if (v58[1] != *((_DWORD *)this + 8)) {
        return 3;
      }
      uint64_t v146 = *((void *)a5 + 15);
      if (!v146) {
        return 5;
      }
      uint64_t v147 = *((void *)this + 10);
      memset(v162, 0, 32);
      unsigned int v149 = (char *)*((int *)this + 53);
      int v148 = (int *)((char *)this + 212);
      LODWORD(v155) = v161[1];
      unsigned int v157 = v149;
      (*(void (**)(_OWORD *__return_ptr))(*(void *)v146 + 48))(v162);
      int v150 = *v148;
      int v151 = *(_DWORD *)(v147 + 32 * v56);
      if (*((void *)&v162[0] + 1) < (unint64_t)(v151 * *v148)) {
        return 1;
      }
      uint64_t v6 = 5;
      switch(LODWORD(v162[1]))
      {
        case 1:
          return gcl::gpcc::RawAttributeDecoder::decode((uint64_t)&v157, (uint64_t)v58, v150, *(unsigned char **)&v162[0], v151, *(_DWORD *)(v147 + 32 * v56 + 8), SDWORD1(v162[1]), v11, v5);
        case 2:
          return gcl::gpcc::RawAttributeDecoder::decode((uint64_t)&v157, (uint64_t)v58, v150, *(char **)&v162[0], v151, *(_DWORD *)(v147 + 32 * v56 + 8), SDWORD1(v162[1]), v11, v5);
        case 4:
          return gcl::gpcc::RawAttributeDecoder::decode((uint64_t)&v157, (uint64_t)v58, v150, *(char **)&v162[0], v151, *(_DWORD *)(v147 + 32 * v56 + 8), SDWORD1(v162[1]), v11, v5);
        case 8:
          return gcl::gpcc::RawAttributeDecoder::decode((uint64_t)&v157, (uint64_t)v58, v150, *(char **)&v162[0], v151, *(_DWORD *)(v147 + 32 * v56 + 8), SDWORD1(v162[1]), v11, v5);
        default:
          return v6;
      }
      return v6;
    case 5:
      return v6;
    default:
      if (v10 == 255)
      {
        if (!v5) {
          return 3;
        }
        if (*v11)
        {
          return 4;
        }
        else
        {
          uint64_t v6 = 0;
          *((unsigned char *)this + 1) = 1;
        }
      }
      else
      {
        uint64_t v31 = *((void *)a5 + 23);
        if (!v31) {
          return 5;
        }
        v154[0] = a2 + 5;
        v154[1] = v5;
        v154[2] = v5;
        LODWORD(v162[0]) = v10;
        return (*(uint64_t (**)(uint64_t, _OWORD *, void *))(*(void *)v31 + 48))(v31, v162, v154);
      }
      return v6;
  }
  do
  {
    int v48 = v44;
    if (!v41)
    {
      if (v45 == v43)
      {
        unsigned int v41 = 0;
        uint64_t v6 = 3;
        uint64_t v45 = &v11[v5];
        ++v44;
        continue;
      }
      int v46 = *v45++;
      int v39 = v46;
      unsigned int v41 = 128;
    }
    BOOL v47 = (v41 & v39) != 0;
    unsigned int v40 = v41 >> 1;
    v41 >>= 1;
    ++v44;
    if (v47) {
      break;
    }
  }
  while ((v48 + 1) < 0x3F);
  uint64_t v49 = 0;
  if (v44)
  {
    int v50 = (v48 & 0x3F) + 1;
    while (1)
    {
      if (v40) {
        goto LABEL_52;
      }
      if (v45 == v43)
      {
        unsigned int v40 = 0;
        uint64_t v6 = 3;
        uint64_t v45 = &v11[v5];
        v49 *= 2;
        if (!--v50) {
          break;
        }
      }
      else
      {
        int v51 = *v45++;
        int v39 = v51;
        unsigned int v40 = 128;
LABEL_52:
        BOOL v52 = (v40 & v39) != 0;
        v40 >>= 1;
        uint64_t v49 = (2 * v49) | v52;
        if (!--v50) {
          break;
        }
      }
    }
  }
  if (!v6)
  {
    unint64_t v54 = (_DWORD *)*((void *)this + 13);
    uint64_t v53 = (_DWORD *)*((void *)this + 14);
    if (v54 == v53) {
      return 3;
    }
    unint64_t v55 = (char *)this + 176;
    uint64_t v6 = 3;
    while (*v54 != (v49 | (1 << v44)) - 1)
    {
      v54 += 11;
      if (v54 == v53) {
        return v6;
      }
    }
    if (v54[1] != *((_DWORD *)this + 8)) {
      return 3;
    }
    *(void *)unsigned int v160 = 0;
    uint64_t v6 = gcl::gpcc::HlsIo::parseGsh((uint64_t)this, v11, v5, (uint64_t)v54, (_DWORD *)this + 44, v160);
    if (!v6)
    {
      unsigned int v75 = *((_DWORD *)this + 51);
      if (v75 > 0x15) {
        return 5;
      }
      unsigned int v157 = *(char **)((char *)this + 188);
      LODWORD(v158) = *((_DWORD *)this + 49);
      HIDWORD(v158) = 1 << v75;
      *(_DWORD *)BOOL v159 = 1 << v75;
      *(_DWORD *)&v159[4] = 1 << v75;
      *(_DWORD *)&v159[8] = *((_DWORD *)this + 52);
      *(void *)&v159[12] = *((void *)this + 6);
      *(_DWORD *)&v159[20] = *((_DWORD *)this + 14);
      *((unsigned char *)this + 3) = 0;
      uint64_t v76 = *((void *)a5 + 7);
      if (v76)
      {
        int v77 = *((_DWORD *)this + 45);
        LODWORD(v162[0]) = *((_DWORD *)this + 46);
        LODWORD(v155) = v77;
        int v78 = (*(uint64_t (**)(uint64_t, _OWORD *, long long *, char **))(*(void *)v76 + 48))(v76, v162, &v155, &v157);
        *((unsigned char *)this + 3) = v78 ^ 1;
        if ((v78 ^ 1)) {
          return 0;
        }
      }
      uint64_t v79 = *((void *)a5 + 11);
      if (!v79) {
        return 5;
      }
      uint64_t v80 = *((unsigned int *)this + 52);
      if ((v80 - 2097153) < 0xFFE00000) {
        return 5;
      }
      long long v155 = 0u;
      long long v156 = 0u;
      *(void *)&v162[0] = v80;
      (*(void (**)(long long *__return_ptr))(*(void *)v79 + 48))(&v155);
      if (!(void)v155) {
        return 5;
      }
      if (*((void *)&v155 + 1) < (unint64_t)(3 * *((int *)this + 52)))
      {
        return 1;
      }
      else if (v156 == 4)
      {
        long long v81 = v156;
        _OWORD *v34 = v155;
        *(_OWORD *)((char *)this + 232) = v81;
        uint64_t v82 = *((void *)this + 27);
        int v83 = *((_DWORD *)this + 59);
        gcl::gpcc::GeometryDecoderBasic::GeometryDecoderBasic((gcl::gpcc::GeometryDecoderBasic *)v162);
        uint64_t v6 = gcl::gpcc::GeometryDecoderBasic::decodeSlice((uint64_t)v162, (uint64_t)v54, (uint64_t)v55, &v11[*(void *)v160], (int)v5 - v160[0], v82, v83, v42);
        gcl::gpcc::GeometryDecoderBasic::~GeometryDecoderBasic((gcl::gpcc::GeometryDecoderBasic *)v162);
      }
      else
      {
        return 6;
      }
    }
  }
  return v6;
}

void sub_18A4375CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_18A4375E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void gcl::gpcc::GeometryDecoderBasic::~GeometryDecoderBasic(gcl::gpcc::GeometryDecoderBasic *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

void std::default_delete<gcl::gpcc::Decoder::Impl>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    unsigned int v3 = (void *)a2[19];
    if (v3)
    {
      a2[20] = v3;
      operator delete(v3);
    }
    uint64_t v4 = a2[16];
    if (v4)
    {
      uint64_t v5 = a2[17];
      uint64_t v6 = (void *)a2[16];
      if (v5 != v4)
      {
        do
        {
          uint64_t v7 = *(void **)(v5 - 40);
          if (v7)
          {
            *(void *)(v5 - 32) = v7;
            operator delete(v7);
          }
          v5 -= 80;
        }
        while (v5 != v4);
        uint64_t v6 = (void *)a2[16];
      }
      a2[17] = v4;
      operator delete(v6);
    }
    uint64_t v8 = (void *)a2[13];
    if (v8)
    {
      a2[14] = v8;
      operator delete(v8);
    }
    uint64_t v9 = (void *)a2[10];
    if (v9)
    {
      a2[11] = v9;
      operator delete(v9);
    }
    int v10 = (void *)a2[1];
    if (v10) {
      operator delete(v10);
    }
    JUMPOUT(0x18C11F580);
  }
}

uint64_t std::__split_buffer<gcl::gpcc::AttributeParameterSet>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = v2 - 80;
        *(void *)(a1 + 16) = v2 - 80;
        uint64_t v5 = *(void **)(v2 - 40);
        if (!v5) {
          break;
        }
        *(void *)(v2 - 32) = v5;
        operator delete(v5);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 80;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t gcl::gpcc::HlsIo::parseSps(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, void *a5)
{
  unsigned int v6 = 0;
  unsigned __int8 v7 = 0;
  unsigned int v8 = 0;
  unsigned int v9 = 0;
  int v10 = 0;
  uint64_t v11 = &a2[a3];
  int v12 = -24;
  unint64_t v13 = a2;
  do
  {
    while (1)
    {
      if (v9) {
        goto LABEL_3;
      }
      if (v13 == v11) {
        break;
      }
      unsigned __int8 v14 = *v13++;
      unsigned __int8 v7 = v14;
      unsigned int v9 = 128;
LABEL_3:
      BOOL v15 = (v7 & v9) != 0;
      unsigned int v6 = v9 >> 1;
      v9 >>= 1;
      int v10 = (2 * v10) | v15;
      BOOL v16 = __CFADD__(v12++, 1);
      if (v16) {
        goto LABEL_8;
      }
    }
    unsigned int v9 = 0;
    unsigned int v8 = 3;
    unint64_t v13 = &a2[a3];
    v10 *= 2;
    BOOL v16 = __CFADD__(v12++, 1);
  }
  while (!v16);
LABEL_8:
  *(_DWORD *)(a4 + 4) = v10;
  if (!v6)
  {
    if (v13 == v11)
    {
      int v17 = 0;
      goto LABEL_34;
    }
    unsigned int v21 = *v13++;
    unsigned __int8 v7 = v21;
    unsigned int v19 = 64;
    int v20 = v21;
    int v17 = (v21 >> 6) & 2 | ((v21 & 0x40) != 0);
LABEL_14:
    unsigned int v22 = v19 >> 1;
    goto LABEL_18;
  }
  int v17 = 2 * ((v7 & v6) != 0);
  if (v6 == 1)
  {
    if (v13 != v11)
    {
      unsigned __int8 v18 = *v13++;
      unsigned __int8 v7 = v18;
      unsigned int v19 = 128;
      int v20 = v18;
      v17 |= (v18 & 0x80) != 0;
      goto LABEL_14;
    }
LABEL_34:
    int v24 = 4 * v17;
LABEL_35:
    int v28 = 4 * v24;
LABEL_36:
    int v32 = 4 * v28;
LABEL_37:
    *(_DWORD *)(a4 + 8) = v32;
    uint64_t v33 = (BOOL *)(a4 + 12);
LABEL_38:
    int v34 = 0;
    *uint64_t v33 = 0;
    unsigned int v8 = 3;
    unint64_t v13 = &a2[a3];
    goto LABEL_39;
  }
  unsigned int v19 = v6 >> 1;
  int v20 = v7;
  v17 |= (v19 & v7) != 0;
  if (v19 > 1) {
    goto LABEL_14;
  }
  if (v13 == v11) {
    goto LABEL_34;
  }
  int v23 = *v13++;
  int v20 = v23;
  unsigned int v22 = 128;
  unsigned __int8 v7 = v23;
LABEL_18:
  int v24 = (4 * v17) | (2 * ((v22 & v20) != 0));
  if (v22 <= 1)
  {
    if (v13 == v11) {
      goto LABEL_35;
    }
    unsigned int v25 = *v13++;
    int v20 = v25;
    v24 |= v25 >> 7;
    unsigned int v26 = 64;
    goto LABEL_24;
  }
  v24 |= (v20 & (v22 >> 1)) != 0;
  if (v22 > 3)
  {
    unsigned int v26 = v22 >> 2;
  }
  else
  {
    if (v13 == v11) {
      goto LABEL_35;
    }
    int v27 = *v13++;
    int v20 = v27;
    unsigned int v26 = 128;
LABEL_24:
    unsigned __int8 v7 = v20;
  }
  int v28 = (4 * v24) | (2 * ((v26 & v20) != 0));
  if (v26 <= 1)
  {
    if (v13 == v11) {
      goto LABEL_36;
    }
    unsigned int v29 = *v13++;
    int v20 = v29;
    v28 |= v29 >> 7;
    unsigned int v30 = 64;
    goto LABEL_32;
  }
  v28 |= (v20 & (v26 >> 1)) != 0;
  if (v26 > 3)
  {
    unsigned int v30 = v26 >> 2;
  }
  else
  {
    if (v13 == v11) {
      goto LABEL_36;
    }
    int v31 = *v13++;
    int v20 = v31;
    unsigned int v30 = 128;
LABEL_32:
    unsigned __int8 v7 = v20;
  }
  int v32 = (4 * v28) | (2 * ((v30 & v20) != 0));
  if (v30 > 1)
  {
    unsigned int v173 = v30 >> 1;
  }
  else
  {
    if (v13 == v11) {
      goto LABEL_37;
    }
    int v172 = *v13++;
    int v20 = v172;
    unsigned int v173 = 128;
    unsigned __int8 v7 = v172;
  }
  *(_DWORD *)(a4 + 8) = v32 | ((v173 & v20) != 0);
  uint64_t v33 = (BOOL *)(a4 + 12);
  if (v173 > 1)
  {
    unsigned int v175 = v173 >> 1;
    int v176 = v175 & v20;
    int v34 = v175 >> 1;
    *uint64_t v33 = v176 != 0;
    if (!v176) {
      goto LABEL_39;
    }
    goto LABEL_265;
  }
  if (v13 == v11) {
    goto LABEL_38;
  }
  unsigned __int8 v174 = *v13++;
  unsigned __int8 v7 = v174;
  int v34 = 64;
  *uint64_t v33 = (v174 & 0x80) != 0;
  if ((v174 & 0x80) != 0)
  {
LABEL_265:
    uint64_t v177 = -1;
    unsigned int v178 = v34;
    while (1)
    {
      int v179 = v177;
      if (v178) {
        goto LABEL_269;
      }
      if (v13 != v11) {
        break;
      }
      unsigned int v178 = 0;
      unsigned int v8 = 3;
      unint64_t v13 = &a2[a3];
      ++v177;
LABEL_270:
      if ((v179 + 1) >= 0x3F)
      {
LABEL_273:
        uint64_t v182 = 0;
        if (v177)
        {
          int v183 = (v179 & 0x3F) + 1;
          unsigned int v184 = v34;
          while (1)
          {
            if (v184) {
              goto LABEL_276;
            }
            if (v13 == v11)
            {
              unsigned int v184 = 0;
              unsigned int v8 = 3;
              unint64_t v13 = &a2[a3];
              v182 *= 2;
              if (!--v183) {
                break;
              }
            }
            else
            {
              unsigned __int8 v185 = *v13++;
              unsigned __int8 v7 = v185;
              unsigned int v184 = 128;
LABEL_276:
              BOOL v186 = (v7 & v184) != 0;
              int v34 = v184 >> 1;
              v184 >>= 1;
              uint64_t v182 = (2 * v182) | v186;
              if (!--v183) {
                break;
              }
            }
          }
        }
        uint64_t v187 = (v182 | (1 << v177)) - 1;
        if (v187) {
          uint64_t v187 = ((v187 & 1) + v187) >> 1;
        }
        else {
          LODWORD(v187) = -(int)(((v187 & 1) + v187) >> 1);
        }
        *(_DWORD *)(a4 + 16) = v187;
        uint64_t v188 = -1;
        unsigned int v189 = v34;
        while (2)
        {
          int v190 = v188;
          if (v189)
          {
LABEL_287:
            BOOL v192 = (v7 & v189) != 0;
            int v34 = v189 >> 1;
            v189 >>= 1;
            ++v188;
            if (v192) {
              break;
            }
          }
          else
          {
            if (v13 != v11)
            {
              unsigned __int8 v191 = *v13++;
              unsigned __int8 v7 = v191;
              unsigned int v189 = 128;
              goto LABEL_287;
            }
            unsigned int v189 = 0;
            unsigned int v8 = 3;
            unint64_t v13 = &a2[a3];
            ++v188;
          }
          if ((v190 + 1) < 0x3F) {
            continue;
          }
          break;
        }
        uint64_t v193 = 0;
        if (v188)
        {
          int v194 = (v190 & 0x3F) + 1;
          unsigned int v195 = v34;
          while (1)
          {
            if (v195) {
              goto LABEL_294;
            }
            if (v13 == v11)
            {
              unsigned int v195 = 0;
              unsigned int v8 = 3;
              unint64_t v13 = &a2[a3];
              v193 *= 2;
              if (!--v194) {
                break;
              }
            }
            else
            {
              unsigned __int8 v196 = *v13++;
              unsigned __int8 v7 = v196;
              unsigned int v195 = 128;
LABEL_294:
              BOOL v197 = (v7 & v195) != 0;
              int v34 = v195 >> 1;
              v195 >>= 1;
              uint64_t v193 = (2 * v193) | v197;
              if (!--v194) {
                break;
              }
            }
          }
        }
        uint64_t v198 = (v193 | (1 << v188)) - 1;
        if (v198) {
          uint64_t v198 = ((v198 & 1) + v198) >> 1;
        }
        else {
          LODWORD(v198) = -(int)(((v198 & 1) + v198) >> 1);
        }
        *(_DWORD *)(a4 + 20) = v198;
        uint64_t v199 = -1;
        unsigned int v200 = v34;
        while (2)
        {
          int v201 = v199;
          if (v200)
          {
LABEL_305:
            BOOL v203 = (v7 & v200) != 0;
            int v34 = v200 >> 1;
            v200 >>= 1;
            ++v199;
            if (v203) {
              break;
            }
          }
          else
          {
            if (v13 != v11)
            {
              unsigned __int8 v202 = *v13++;
              unsigned __int8 v7 = v202;
              unsigned int v200 = 128;
              goto LABEL_305;
            }
            unsigned int v200 = 0;
            unsigned int v8 = 3;
            unint64_t v13 = &a2[a3];
            ++v199;
          }
          if ((v201 + 1) < 0x3F) {
            continue;
          }
          break;
        }
        uint64_t v204 = 0;
        if (v199)
        {
          int v205 = (v201 & 0x3F) + 1;
          unsigned int v206 = v34;
          while (1)
          {
            if (v206) {
              goto LABEL_312;
            }
            if (v13 == v11)
            {
              unsigned int v206 = 0;
              unsigned int v8 = 3;
              unint64_t v13 = &a2[a3];
              v204 *= 2;
              if (!--v205) {
                break;
              }
            }
            else
            {
              unsigned __int8 v207 = *v13++;
              unsigned __int8 v7 = v207;
              unsigned int v206 = 128;
LABEL_312:
              BOOL v208 = (v7 & v206) != 0;
              int v34 = v206 >> 1;
              v206 >>= 1;
              uint64_t v204 = (2 * v204) | v208;
              if (!--v205) {
                break;
              }
            }
          }
        }
        unsigned int v209 = 0;
        uint64_t v210 = (v204 | (1 << v199)) - 1;
        if (v210) {
          uint64_t v210 = ((v210 & 1) + v210) >> 1;
        }
        else {
          LODWORD(v210) = -(int)(((v210 & 1) + v210) >> 1);
        }
        *(_DWORD *)(a4 + 24) = v210;
        int v211 = 63;
        unsigned int v212 = v34;
        while (2)
        {
          int v213 = v211;
          if (v212)
          {
LABEL_323:
            BOOL v215 = (v7 & v212) != 0;
            int v34 = v212 >> 1;
            v212 >>= 1;
            unsigned int v216 = v209 + 1;
            if (v215) {
              break;
            }
          }
          else
          {
            if (v13 != v11)
            {
              unsigned __int8 v214 = *v13++;
              unsigned __int8 v7 = v214;
              unsigned int v212 = 128;
              goto LABEL_323;
            }
            unsigned int v212 = 0;
            unsigned int v8 = 3;
            unint64_t v13 = &a2[a3];
            unsigned int v216 = v209 + 1;
          }
          int v211 = v213 + 1;
          BOOL v16 = v209 >= 0x3F;
          unsigned int v209 = v216;
          if (!v16) {
            continue;
          }
          break;
        }
        if (v216 == 1)
        {
LABEL_329:
          uint64_t v217 = -1;
          unsigned int v218 = v34;
          while (1)
          {
            int v219 = v217;
            if (v218) {
              goto LABEL_333;
            }
            if (v13 != v11) {
              break;
            }
            unsigned int v218 = 0;
            unsigned int v8 = 3;
            unint64_t v13 = &a2[a3];
            ++v217;
LABEL_334:
            if ((v219 + 1) >= 0x3F)
            {
LABEL_337:
              uint64_t v222 = 0;
              if (v217)
              {
                int v223 = (v219 & 0x3F) + 1;
                unsigned int v224 = v34;
                while (1)
                {
                  if (v224) {
                    goto LABEL_340;
                  }
                  if (v13 == v11)
                  {
                    unsigned int v224 = 0;
                    unsigned int v8 = 3;
                    unint64_t v13 = &a2[a3];
                    v222 *= 2;
                    if (!--v223) {
                      break;
                    }
                  }
                  else
                  {
                    unsigned __int8 v225 = *v13++;
                    unsigned __int8 v7 = v225;
                    unsigned int v224 = 128;
LABEL_340:
                    BOOL v226 = (v7 & v224) != 0;
                    int v34 = v224 >> 1;
                    v224 >>= 1;
                    uint64_t v222 = (2 * v222) | v226;
                    if (!--v223) {
                      break;
                    }
                  }
                }
              }
              *(_DWORD *)(a4 + 28) = (v222 | (1 << v217)) - 1;
              uint64_t v227 = -1;
              unsigned int v228 = v34;
              while (2)
              {
                int v229 = v227;
                if (v228)
                {
LABEL_348:
                  BOOL v231 = (v7 & v228) != 0;
                  int v34 = v228 >> 1;
                  v228 >>= 1;
                  ++v227;
                  if (v231) {
                    break;
                  }
                }
                else
                {
                  if (v13 != v11)
                  {
                    unsigned __int8 v230 = *v13++;
                    unsigned __int8 v7 = v230;
                    unsigned int v228 = 128;
                    goto LABEL_348;
                  }
                  unsigned int v228 = 0;
                  unsigned int v8 = 3;
                  unint64_t v13 = &a2[a3];
                  ++v227;
                }
                if ((v229 + 1) < 0x3F) {
                  continue;
                }
                break;
              }
              uint64_t v232 = 0;
              if (v227)
              {
                int v233 = (v229 & 0x3F) + 1;
                unsigned int v234 = v34;
                while (1)
                {
                  if (v234) {
                    goto LABEL_355;
                  }
                  if (v13 == v11)
                  {
                    unsigned int v234 = 0;
                    unsigned int v8 = 3;
                    unint64_t v13 = &a2[a3];
                    v232 *= 2;
                    if (!--v233) {
                      break;
                    }
                  }
                  else
                  {
                    unsigned __int8 v235 = *v13++;
                    unsigned __int8 v7 = v235;
                    unsigned int v234 = 128;
LABEL_355:
                    BOOL v236 = (v7 & v234) != 0;
                    int v34 = v234 >> 1;
                    v234 >>= 1;
                    uint64_t v232 = (2 * v232) | v236;
                    if (!--v233) {
                      break;
                    }
                  }
                }
              }
              *(_DWORD *)(a4 + 32) = (v232 | (1 << v227)) - 1;
              uint64_t v237 = -1;
              unsigned int v238 = v34;
              while (2)
              {
                int v239 = v237;
                if (v238)
                {
LABEL_363:
                  BOOL v241 = (v7 & v238) != 0;
                  int v34 = v238 >> 1;
                  v238 >>= 1;
                  ++v237;
                  if (v241) {
                    goto LABEL_367;
                  }
                }
                else
                {
                  if (v13 != v11)
                  {
                    unsigned __int8 v240 = *v13++;
                    unsigned __int8 v7 = v240;
                    unsigned int v238 = 128;
                    goto LABEL_363;
                  }
                  unsigned int v238 = 0;
                  unsigned int v8 = 3;
                  unint64_t v13 = &a2[a3];
                  ++v237;
                }
                if ((v239 + 1) >= 0x3F)
                {
LABEL_367:
                  uint64_t v242 = 0;
                  if (!v237)
                  {
LABEL_374:
                    *(_DWORD *)(a4 + 36) = (v242 | (1 << v237)) - 1;
                    goto LABEL_39;
                  }
                  int v243 = (v239 & 0x3F) + 1;
                  unsigned int v244 = v34;
                  while (1)
                  {
LABEL_371:
                    if (v244) {
                      goto LABEL_370;
                    }
                    if (v13 != v11) {
                      break;
                    }
                    unsigned int v244 = 0;
                    unsigned int v8 = 3;
                    unint64_t v13 = &a2[a3];
                    v242 *= 2;
                    if (!--v243) {
                      goto LABEL_374;
                    }
                  }
                  unsigned __int8 v245 = *v13++;
                  unsigned __int8 v7 = v245;
                  unsigned int v244 = 128;
LABEL_370:
                  BOOL v246 = (v7 & v244) != 0;
                  int v34 = v244 >> 1;
                  v244 >>= 1;
                  uint64_t v242 = (2 * v242) | v246;
                  if (!--v243) {
                    goto LABEL_374;
                  }
                  goto LABEL_371;
                }
                continue;
              }
            }
          }
          unsigned __int8 v220 = *v13++;
          unsigned __int8 v7 = v220;
          unsigned int v218 = 128;
LABEL_333:
          BOOL v221 = (v7 & v218) != 0;
          int v34 = v218 >> 1;
          v218 >>= 1;
          ++v217;
          if (v221) {
            goto LABEL_337;
          }
          goto LABEL_334;
        }
        int v247 = (v213 & 0x3F) + 1;
        unsigned int v248 = v34;
        while (1)
        {
LABEL_378:
          if (v248) {
            goto LABEL_377;
          }
          if (v13 != v11) {
            break;
          }
          unsigned int v248 = 0;
          unsigned int v8 = 3;
          unint64_t v13 = &a2[a3];
          if (!--v247) {
            goto LABEL_329;
          }
        }
        unsigned __int8 v249 = *v13++;
        unsigned __int8 v7 = v249;
        unsigned int v248 = 128;
LABEL_377:
        int v34 = v248 >> 1;
        v248 >>= 1;
        if (!--v247) {
          goto LABEL_329;
        }
        goto LABEL_378;
      }
    }
    unsigned __int8 v180 = *v13++;
    unsigned __int8 v7 = v180;
    unsigned int v178 = 128;
LABEL_269:
    BOOL v181 = (v7 & v178) != 0;
    int v34 = v178 >> 1;
    v178 >>= 1;
    ++v177;
    if (v181) {
      goto LABEL_273;
    }
    goto LABEL_270;
  }
LABEL_39:
  int v35 = 0;
  int v36 = -32;
  unsigned int v37 = v34;
  do
  {
    while (1)
    {
      if (v37) {
        goto LABEL_41;
      }
      if (v13 == v11) {
        break;
      }
      unsigned __int8 v38 = *v13++;
      unsigned __int8 v7 = v38;
      unsigned int v37 = 128;
LABEL_41:
      BOOL v39 = (v7 & v37) != 0;
      int v34 = v37 >> 1;
      v37 >>= 1;
      int v35 = (2 * v35) | v39;
      BOOL v16 = __CFADD__(v36++, 1);
      if (v16) {
        goto LABEL_46;
      }
    }
    unsigned int v37 = 0;
    unsigned int v8 = 3;
    unint64_t v13 = &a2[a3];
    v35 *= 2;
    BOOL v16 = __CFADD__(v36++, 1);
  }
  while (!v16);
LABEL_46:
  *(_DWORD *)(a4 + 44) = v35;
  uint64_t v40 = -1;
  int v41 = v34;
  do
  {
    int v42 = v40;
    if (!v41)
    {
      if (v13 == v11)
      {
        int v41 = 0;
        unsigned int v8 = 3;
        unint64_t v13 = &a2[a3];
        ++v40;
        continue;
      }
      unsigned __int8 v43 = *v13++;
      unsigned __int8 v7 = v43;
      int v41 = 128;
    }
    BOOL v44 = (v7 & v41) != 0;
    int v34 = v41 >> 1;
    v41 >>= 1;
    ++v40;
    if (v44) {
      break;
    }
  }
  while ((v42 + 1) < 0x3F);
  uint64_t v45 = 0;
  if (v40)
  {
    int v46 = (v42 & 0x3F) + 1;
    int v47 = v34;
    while (1)
    {
      if (v47) {
        goto LABEL_57;
      }
      if (v13 == v11)
      {
        int v47 = 0;
        unsigned int v8 = 3;
        unint64_t v13 = &a2[a3];
        v45 *= 2;
        if (!--v46) {
          break;
        }
      }
      else
      {
        unsigned __int8 v48 = *v13++;
        unsigned __int8 v7 = v48;
        int v47 = 128;
LABEL_57:
        BOOL v49 = (v7 & v47) != 0;
        int v34 = v47 >> 1;
        v47 >>= 1;
        uint64_t v45 = (2 * v45) | v49;
        if (!--v46) {
          break;
        }
      }
    }
  }
  *(_DWORD *)a4 = (v45 | (1 << v40)) - 1;
  uint64_t v50 = -1;
  int v51 = v34;
  while (2)
  {
    int v52 = v50;
    if (v51)
    {
LABEL_65:
      BOOL v54 = (v7 & v51) != 0;
      int v34 = v51 >> 1;
      v51 >>= 1;
      ++v50;
      if (v54) {
        break;
      }
    }
    else
    {
      if (v13 != v11)
      {
        unsigned __int8 v53 = *v13++;
        unsigned __int8 v7 = v53;
        int v51 = 128;
        goto LABEL_65;
      }
      int v51 = 0;
      unsigned int v8 = 3;
      unint64_t v13 = &a2[a3];
      ++v50;
    }
    if ((v52 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v55 = 0;
  if (v50)
  {
    int v56 = (v52 & 0x3F) + 1;
    int v57 = v34;
    while (1)
    {
      if (v57) {
        goto LABEL_72;
      }
      if (v13 == v11)
      {
        int v57 = 0;
        unsigned int v8 = 3;
        unint64_t v13 = &a2[a3];
        v55 *= 2;
        if (!--v56) {
          break;
        }
      }
      else
      {
        unsigned __int8 v58 = *v13++;
        unsigned __int8 v7 = v58;
        int v57 = 128;
LABEL_72:
        BOOL v59 = (v7 & v57) != 0;
        int v34 = v57 >> 1;
        v57 >>= 1;
        uint64_t v55 = (2 * v55) | v59;
        if (!--v56) {
          break;
        }
      }
    }
  }
  int v60 = (v55 | (1 << v50)) - 1;
  if (v60 >= 1)
  {
    int v61 = 0;
    unint64_t v62 = *(void **)(a4 + 56);
    while (1)
    {
      unint64_t v65 = *(void *)(a4 + 64);
      if ((unint64_t)v62 >= v65) {
        break;
      }
      *unint64_t v62 = 0;
      v62[1] = 0;
      v62[2] = 0;
      v62[3] = 0xFFFFFFFF00000000;
      v62 += 4;
LABEL_95:
      uint64_t v77 = 0;
      *(void *)(a4 + 56) = v62;
      int v78 = 63;
      int v79 = v34;
      do
      {
        int v80 = v78;
        if (!v79)
        {
          if (v13 == v11)
          {
            int v79 = 0;
            unsigned int v8 = 3;
            unint64_t v13 = v11;
            uint64_t v83 = v77 + 1;
            goto LABEL_100;
          }
          unsigned __int8 v81 = *v13++;
          unsigned __int8 v7 = v81;
          int v79 = 128;
        }
        BOOL v82 = (v7 & v79) != 0;
        int v34 = v79 >> 1;
        v79 >>= 1;
        uint64_t v83 = v77 + 1;
        if (v82) {
          break;
        }
LABEL_100:
        int v78 = v80 + 1;
        BOOL v16 = v77 >= 0x3F;
        uint64_t v77 = v83;
      }
      while (!v16);
      if (v83 != 1)
      {
        uint64_t v84 = 0;
        int v128 = (v80 & 0x3F) + 1;
        int v129 = v34;
        while (1)
        {
          if (v129) {
            goto LABEL_170;
          }
          if (v13 == v11)
          {
            int v129 = 0;
            unsigned int v8 = 3;
            unint64_t v13 = v11;
            v84 *= 2;
            if (!--v128) {
              goto LABEL_106;
            }
          }
          else
          {
            unsigned __int8 v130 = *v13++;
            unsigned __int8 v7 = v130;
            int v129 = 128;
LABEL_170:
            BOOL v131 = (v7 & v129) != 0;
            int v34 = v129 >> 1;
            v129 >>= 1;
            uint64_t v84 = (2 * v84) | v131;
            if (!--v128) {
              goto LABEL_106;
            }
          }
        }
      }
      LODWORD(v84) = 0;
LABEL_106:
      uint64_t v85 = 0;
      *((_DWORD *)v62 - 8) = (v84 | (1 << (v83 - 1))) - 1;
      int v86 = 63;
      int v87 = v34;
      while (2)
      {
        int v88 = v86;
        if (v87)
        {
LABEL_110:
          BOOL v90 = (v7 & v87) != 0;
          int v34 = v87 >> 1;
          v87 >>= 1;
          uint64_t v91 = v85 + 1;
          if (v90) {
            break;
          }
        }
        else
        {
          if (v13 != v11)
          {
            unsigned __int8 v89 = *v13++;
            unsigned __int8 v7 = v89;
            int v87 = 128;
            goto LABEL_110;
          }
          int v87 = 0;
          unsigned int v8 = 3;
          unint64_t v13 = v11;
          uint64_t v91 = v85 + 1;
        }
        int v86 = v88 + 1;
        BOOL v16 = v85 >= 0x3F;
        uint64_t v85 = v91;
        if (!v16) {
          continue;
        }
        break;
      }
      if (v91 != 1)
      {
        uint64_t v92 = 0;
        int v132 = (v88 & 0x3F) + 1;
        int v133 = v34;
        while (1)
        {
          if (v133) {
            goto LABEL_177;
          }
          if (v13 == v11)
          {
            int v133 = 0;
            unsigned int v8 = 3;
            unint64_t v13 = v11;
            v92 *= 2;
            if (!--v132) {
              goto LABEL_117;
            }
          }
          else
          {
            unsigned __int8 v134 = *v13++;
            unsigned __int8 v7 = v134;
            int v133 = 128;
LABEL_177:
            BOOL v135 = (v7 & v133) != 0;
            int v34 = v133 >> 1;
            v133 >>= 1;
            uint64_t v92 = (2 * v92) | v135;
            if (!--v132) {
              goto LABEL_117;
            }
          }
        }
      }
      LODWORD(v92) = 0;
LABEL_117:
      uint64_t v93 = 0;
      *((_DWORD *)v62 - 7) = (v92 | (1 << (v91 - 1))) - 1;
      int v94 = 63;
      int v95 = v34;
      while (2)
      {
        int v96 = v94;
        if (v95)
        {
LABEL_121:
          BOOL v98 = (v7 & v95) != 0;
          int v34 = v95 >> 1;
          v95 >>= 1;
          uint64_t v99 = v93 + 1;
          if (v98) {
            break;
          }
        }
        else
        {
          if (v13 != v11)
          {
            unsigned __int8 v97 = *v13++;
            unsigned __int8 v7 = v97;
            int v95 = 128;
            goto LABEL_121;
          }
          int v95 = 0;
          unsigned int v8 = 3;
          unint64_t v13 = v11;
          uint64_t v99 = v93 + 1;
        }
        int v94 = v96 + 1;
        BOOL v16 = v93 >= 0x3F;
        uint64_t v93 = v99;
        if (!v16) {
          continue;
        }
        break;
      }
      if (v99 != 1)
      {
        uint64_t v100 = 0;
        int v136 = (v96 & 0x3F) + 1;
        int v137 = v34;
        while (1)
        {
          if (v137) {
            goto LABEL_184;
          }
          if (v13 == v11)
          {
            int v137 = 0;
            unsigned int v8 = 3;
            unint64_t v13 = v11;
            v100 *= 2;
            if (!--v136) {
              goto LABEL_128;
            }
          }
          else
          {
            unsigned __int8 v138 = *v13++;
            unsigned __int8 v7 = v138;
            int v137 = 128;
LABEL_184:
            BOOL v139 = (v7 & v137) != 0;
            int v34 = v137 >> 1;
            v137 >>= 1;
            uint64_t v100 = (2 * v100) | v139;
            if (!--v136) {
              goto LABEL_128;
            }
          }
        }
      }
      LODWORD(v100) = 0;
LABEL_128:
      uint64_t v101 = 0;
      *((_DWORD *)v62 - 6) = (v100 | (1 << (v99 - 1))) - 1;
      int v102 = 63;
      int v103 = v34;
      while (2)
      {
        int v104 = v102;
        if (v103)
        {
LABEL_132:
          BOOL v106 = (v7 & v103) != 0;
          int v34 = v103 >> 1;
          v103 >>= 1;
          uint64_t v107 = v101 + 1;
          if (v106) {
            break;
          }
        }
        else
        {
          if (v13 != v11)
          {
            unsigned __int8 v105 = *v13++;
            unsigned __int8 v7 = v105;
            int v103 = 128;
            goto LABEL_132;
          }
          int v103 = 0;
          unsigned int v8 = 3;
          unint64_t v13 = v11;
          uint64_t v107 = v101 + 1;
        }
        int v102 = v104 + 1;
        BOOL v16 = v101 >= 0x3F;
        uint64_t v101 = v107;
        if (!v16) {
          continue;
        }
        break;
      }
      if (v107 != 1)
      {
        uint64_t v108 = 0;
        int v140 = (v104 & 0x3F) + 1;
        int v141 = v34;
        while (1)
        {
          if (v141) {
            goto LABEL_191;
          }
          if (v13 == v11)
          {
            int v141 = 0;
            unsigned int v8 = 3;
            unint64_t v13 = v11;
            v108 *= 2;
            if (!--v140) {
              goto LABEL_139;
            }
          }
          else
          {
            unsigned __int8 v142 = *v13++;
            unsigned __int8 v7 = v142;
            int v141 = 128;
LABEL_191:
            BOOL v143 = (v7 & v141) != 0;
            int v34 = v141 >> 1;
            v141 >>= 1;
            uint64_t v108 = (2 * v108) | v143;
            if (!--v140) {
              goto LABEL_139;
            }
          }
        }
      }
      LODWORD(v108) = 0;
LABEL_139:
      uint64_t v109 = 0;
      *((_DWORD *)v62 - 5) = (v108 | (1 << (v107 - 1))) - 1;
      int v110 = 63;
      int v111 = v34;
      while (2)
      {
        int v112 = v110;
        if (v111)
        {
LABEL_143:
          BOOL v114 = (v7 & v111) != 0;
          int v34 = v111 >> 1;
          v111 >>= 1;
          uint64_t v115 = v109 + 1;
          if (v114) {
            break;
          }
        }
        else
        {
          if (v13 != v11)
          {
            unsigned __int8 v113 = *v13++;
            unsigned __int8 v7 = v113;
            int v111 = 128;
            goto LABEL_143;
          }
          int v111 = 0;
          unsigned int v8 = 3;
          unint64_t v13 = v11;
          uint64_t v115 = v109 + 1;
        }
        int v110 = v112 + 1;
        BOOL v16 = v109 >= 0x3F;
        uint64_t v109 = v115;
        if (!v16) {
          continue;
        }
        break;
      }
      if (v115 != 1)
      {
        uint64_t v116 = 0;
        int v144 = (v112 & 0x3F) + 1;
        int v145 = v34;
        while (1)
        {
          if (v145) {
            goto LABEL_198;
          }
          if (v13 == v11)
          {
            int v145 = 0;
            unsigned int v8 = 3;
            unint64_t v13 = v11;
            v116 *= 2;
            if (!--v144) {
              goto LABEL_150;
            }
          }
          else
          {
            unsigned __int8 v146 = *v13++;
            unsigned __int8 v7 = v146;
            int v145 = 128;
LABEL_198:
            BOOL v147 = (v7 & v145) != 0;
            int v34 = v145 >> 1;
            v145 >>= 1;
            uint64_t v116 = (2 * v116) | v147;
            if (!--v144) {
              goto LABEL_150;
            }
          }
        }
      }
      LODWORD(v116) = 0;
LABEL_150:
      uint64_t v117 = 0;
      *((_DWORD *)v62 - 4) = (v116 | (1 << (v115 - 1))) - 1;
      int v118 = 63;
      int v119 = v34;
      while (2)
      {
        int v120 = v118;
        if (v119)
        {
LABEL_154:
          BOOL v122 = (v7 & v119) != 0;
          int v34 = v119 >> 1;
          v119 >>= 1;
          uint64_t v123 = v117 + 1;
          if (v122) {
            break;
          }
        }
        else
        {
          if (v13 != v11)
          {
            unsigned __int8 v121 = *v13++;
            unsigned __int8 v7 = v121;
            int v119 = 128;
            goto LABEL_154;
          }
          int v119 = 0;
          unsigned int v8 = 3;
          unint64_t v13 = v11;
          uint64_t v123 = v117 + 1;
        }
        int v118 = v120 + 1;
        BOOL v16 = v117 >= 0x3F;
        uint64_t v117 = v123;
        if (!v16) {
          continue;
        }
        break;
      }
      if (v123 != 1)
      {
        uint64_t v124 = 0;
        int v148 = (v120 & 0x3F) + 1;
        int v149 = v34;
        while (1)
        {
          if (v149) {
            goto LABEL_205;
          }
          if (v13 == v11)
          {
            int v149 = 0;
            unsigned int v8 = 3;
            unint64_t v13 = v11;
            v124 *= 2;
            if (!--v148) {
              goto LABEL_161;
            }
          }
          else
          {
            unsigned __int8 v150 = *v13++;
            unsigned __int8 v7 = v150;
            int v149 = 128;
LABEL_205:
            BOOL v151 = (v7 & v149) != 0;
            int v34 = v149 >> 1;
            v149 >>= 1;
            uint64_t v124 = (2 * v124) | v151;
            if (!--v148) {
              goto LABEL_161;
            }
          }
        }
      }
      LODWORD(v124) = 0;
LABEL_161:
      *((_DWORD *)v62 - 3) = (v124 | (1 << (v123 - 1))) - 1;
      if (!v34)
      {
        if (v13 != v11)
        {
          unsigned __int8 v125 = *v13++;
          unsigned __int8 v7 = v125;
          int v34 = 128;
          goto LABEL_164;
        }
        int v34 = 0;
        *((unsigned char *)v62 - 8) = 0;
        uint64_t v126 = (int *)v62 - 1;
LABEL_232:
        unsigned int v8 = 3;
        unint64_t v13 = v11;
        goto LABEL_233;
      }
LABEL_164:
      *((unsigned char *)v62 - 8) = (v34 & v7) != 0;
      uint64_t v126 = (int *)v62 - 1;
      if (v34 > 1)
      {
        int v152 = v34 >> 1;
        v34 >>= 2;
        if ((v152 & v7) == 0) {
          goto LABEL_233;
        }
      }
      else
      {
        if (v13 == v11)
        {
          int v34 = 0;
          goto LABEL_232;
        }
        unsigned __int8 v127 = *v13++;
        unsigned __int8 v7 = v127;
        int v34 = 64;
        if ((v127 & 0x80) == 0)
        {
LABEL_233:
          int v64 = 0;
          int v164 = -32;
          int v165 = v34;
          while (1)
          {
            if (v165) {
              goto LABEL_235;
            }
            if (v13 == v11)
            {
              int v165 = 0;
              unsigned int v8 = 3;
              unint64_t v13 = v11;
              v64 *= 2;
              BOOL v16 = __CFADD__(v164++, 1);
              if (v16) {
                goto LABEL_80;
              }
            }
            else
            {
              unsigned __int8 v166 = *v13++;
              unsigned __int8 v7 = v166;
              int v165 = 128;
LABEL_235:
              BOOL v167 = (v7 & v165) != 0;
              int v34 = v165 >> 1;
              v165 >>= 1;
              int v64 = (2 * v64) | v167;
              BOOL v16 = __CFADD__(v164++, 1);
              if (v16) {
                goto LABEL_80;
              }
            }
          }
        }
      }
      uint64_t v153 = 0;
      int v154 = 63;
      int v155 = v34;
      while (2)
      {
        int v156 = v154;
        if (v155)
        {
LABEL_215:
          BOOL v158 = (v7 & v155) != 0;
          int v34 = v155 >> 1;
          v155 >>= 1;
          uint64_t v159 = v153 + 1;
          if (v158) {
            break;
          }
        }
        else
        {
          if (v13 != v11)
          {
            unsigned __int8 v157 = *v13++;
            unsigned __int8 v7 = v157;
            int v155 = 128;
            goto LABEL_215;
          }
          int v155 = 0;
          unsigned int v8 = 3;
          unint64_t v13 = v11;
          uint64_t v159 = v153 + 1;
        }
        int v154 = v156 + 1;
        BOOL v16 = v153 >= 0x3F;
        uint64_t v153 = v159;
        if (!v16) {
          continue;
        }
        break;
      }
      if (v159 != 1)
      {
        uint64_t v63 = 0;
        int v160 = (v156 & 0x3F) + 1;
        int v161 = v34;
        while (1)
        {
          if (v161) {
            goto LABEL_223;
          }
          if (v13 == v11)
          {
            int v161 = 0;
            unsigned int v8 = 3;
            unint64_t v13 = v11;
            v63 *= 2;
            if (!--v160) {
              goto LABEL_79;
            }
          }
          else
          {
            unsigned __int8 v162 = *v13++;
            unsigned __int8 v7 = v162;
            int v161 = 128;
LABEL_223:
            BOOL v163 = (v7 & v161) != 0;
            int v34 = v161 >> 1;
            v161 >>= 1;
            uint64_t v63 = (2 * v63) | v163;
            if (!--v160) {
              goto LABEL_79;
            }
          }
        }
      }
      LODWORD(v63) = 0;
LABEL_79:
      int v64 = (v63 | (1 << (v159 - 1))) - 1;
LABEL_80:
      *uint64_t v126 = v64;
      if (++v61 == v60) {
        goto LABEL_241;
      }
    }
    uint64_t v66 = *(unsigned char **)(a4 + 48);
    uint64_t v67 = ((char *)v62 - v66) >> 5;
    unint64_t v68 = v67 + 1;
    if ((unint64_t)(v67 + 1) >> 59) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    int v252 = v61;
    unsigned int v253 = v8;
    uint64_t v69 = v65 - (void)v66;
    if (v69 >> 4 > v68) {
      unint64_t v68 = v69 >> 4;
    }
    BOOL v16 = (unint64_t)v69 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v70 = 0x7FFFFFFFFFFFFFFLL;
    if (!v16) {
      unint64_t v70 = v68;
    }
    if (v70 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v71 = 32 * v70;
    unint64_t v72 = (char *)operator new(32 * v70);
    unint64_t v73 = &v72[32 * v67];
    *(void *)unint64_t v73 = 0;
    *((void *)v73 + 1) = 0;
    *((void *)v73 + 2) = 0;
    *((void *)v73 + 3) = 0xFFFFFFFF00000000;
    if (v62 == (void *)v66)
    {
      unint64_t v62 = v73 + 32;
      *(void *)(a4 + 48) = v73;
      *(void *)(a4 + 56) = v73 + 32;
      *(void *)(a4 + 64) = &v72[v71];
      if (v66) {
        goto LABEL_93;
      }
    }
    else
    {
      unint64_t v74 = &v72[32 * v67];
      do
      {
        long long v75 = *((_OWORD *)v62 - 1);
        uint64_t v76 = v74 - 32;
        *((_OWORD *)v74 - 2) = *((_OWORD *)v62 - 2);
        *((_OWORD *)v74 - 1) = v75;
        v62 -= 4;
        v74 -= 32;
      }
      while (v62 != (void *)v66);
      unint64_t v62 = v73 + 32;
      *(void *)(a4 + 48) = v76;
      *(void *)(a4 + 56) = v73 + 32;
      *(void *)(a4 + 64) = &v72[v71];
      if (v66) {
LABEL_93:
      }
        operator delete(v66);
    }
    int v61 = v252;
    unsigned int v8 = v253;
    goto LABEL_95;
  }
LABEL_241:
  if (a5)
  {
    if (v34) {
      BOOL v168 = 1;
    }
    else {
      BOOL v168 = v13 == v11;
    }
    if (v168) {
      unsigned int v169 = v13;
    }
    else {
      unsigned int v169 = v13 + 1;
    }
    *a5 = v169 - a2;
  }
  if (v13 == v11) {
    unsigned int v170 = 3;
  }
  else {
    unsigned int v170 = v8;
  }
  if (v34) {
    return v8;
  }
  else {
    return v170;
  }
}

uint64_t gcl::gpcc::HlsIo::parseGps(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, void *a5)
{
  unsigned int v5 = 0;
  unsigned int v6 = 0;
  unsigned int v7 = 0;
  unsigned int v8 = 0;
  unsigned int v9 = &a2[a3];
  uint64_t v10 = -1;
  uint64_t v11 = a2;
  do
  {
    int v14 = v10;
    if (!v8)
    {
      if (v11 == v9)
      {
        unsigned int v8 = 0;
        unsigned int v7 = 3;
        uint64_t v11 = &a2[a3];
        ++v10;
        continue;
      }
      unsigned int v12 = *v11++;
      unsigned int v5 = v12;
      unsigned int v8 = 128;
    }
    BOOL v13 = (v8 & v5) != 0;
    unsigned int v6 = v8 >> 1;
    v8 >>= 1;
    ++v10;
    if (v13) {
      break;
    }
  }
  while ((v14 + 1) < 0x3F);
  uint64_t v15 = 0;
  if (v10)
  {
    int v16 = (v14 & 0x3F) + 1;
    unsigned int v17 = v6;
    while (1)
    {
      if (v17) {
        goto LABEL_11;
      }
      if (v11 == v9)
      {
        unsigned int v17 = 0;
        unsigned int v7 = 3;
        uint64_t v11 = &a2[a3];
        v15 *= 2;
        if (!--v16) {
          break;
        }
      }
      else
      {
        unsigned int v18 = *v11++;
        unsigned int v5 = v18;
        unsigned int v17 = 128;
LABEL_11:
        BOOL v19 = (v17 & v5) != 0;
        unsigned int v6 = v17 >> 1;
        v17 >>= 1;
        uint64_t v15 = (2 * v15) | v19;
        if (!--v16) {
          break;
        }
      }
    }
  }
  *(_DWORD *)a4 = (v15 | (1 << v10)) - 1;
  uint64_t v20 = -1;
  unsigned int v21 = v6;
  while (2)
  {
    int v24 = v20;
    if (!v21)
    {
      if (v11 == v9)
      {
        unsigned int v21 = 0;
        unsigned int v7 = 3;
        uint64_t v11 = &a2[a3];
        ++v20;
        goto LABEL_18;
      }
      unsigned int v22 = *v11++;
      unsigned int v5 = v22;
      unsigned int v21 = 128;
    }
    BOOL v23 = (v21 & v5) != 0;
    unsigned int v6 = v21 >> 1;
    v21 >>= 1;
    ++v20;
    if (v23) {
      break;
    }
LABEL_18:
    if ((v24 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v25 = 0;
  if (v20)
  {
    int v26 = (v24 & 0x3F) + 1;
    unsigned int v27 = v6;
    while (1)
    {
      if (v27) {
        goto LABEL_25;
      }
      if (v11 == v9)
      {
        unsigned int v27 = 0;
        unsigned int v7 = 3;
        uint64_t v11 = &a2[a3];
        v25 *= 2;
        if (!--v26) {
          break;
        }
      }
      else
      {
        unsigned int v28 = *v11++;
        unsigned int v5 = v28;
        unsigned int v27 = 128;
LABEL_25:
        BOOL v29 = (v27 & v5) != 0;
        unsigned int v6 = v27 >> 1;
        v27 >>= 1;
        uint64_t v25 = (2 * v25) | v29;
        if (!--v26) {
          break;
        }
      }
    }
  }
  *(_DWORD *)(a4 + 4) = (v25 | (1 << v20)) - 1;
  if (!v6)
  {
    if (v11 == v9)
    {
      *(_DWORD *)(a4 + 8) = 0;
      *(_WORD *)(a4 + 20) = 0;
      goto LABEL_76;
    }
    unsigned int v31 = *v11++;
    unsigned int v5 = v31;
    unsigned int v6 = 128;
    unsigned int v30 = 64;
    *(_DWORD *)(a4 + 8) = (v31 & 0x80) != 0;
    if ((v31 & 0x80) == 0) {
      goto LABEL_38;
    }
LABEL_34:
    if (v6 <= 1)
    {
      if (v11 == v9)
      {
        unsigned int v30 = 0;
        *(unsigned char *)(a4 + 12) = 0;
        unsigned int v7 = 3;
        uint64_t v11 = &a2[a3];
LABEL_52:
        uint64_t v41 = -1;
        unsigned int v42 = v30;
        while (1)
        {
          int v45 = v41;
          if (v42) {
            goto LABEL_54;
          }
          if (v11 != v9) {
            break;
          }
          unsigned int v42 = 0;
          unsigned int v7 = 3;
          uint64_t v11 = &a2[a3];
          ++v41;
LABEL_55:
          if ((v45 + 1) >= 0x3F)
          {
LABEL_59:
            uint64_t v46 = 0;
            if (v41)
            {
              int v47 = (v45 & 0x3F) + 1;
              unsigned int v48 = v30;
              while (1)
              {
                if (v48) {
                  goto LABEL_62;
                }
                if (v11 == v9)
                {
                  unsigned int v48 = 0;
                  unsigned int v7 = 3;
                  uint64_t v11 = &a2[a3];
                  v46 *= 2;
                  if (!--v47) {
                    break;
                  }
                }
                else
                {
                  unsigned int v49 = *v11++;
                  unsigned int v5 = v49;
                  unsigned int v48 = 128;
LABEL_62:
                  BOOL v50 = (v48 & v5) != 0;
                  unsigned int v30 = v48 >> 1;
                  v48 >>= 1;
                  uint64_t v46 = (2 * v46) | v50;
                  if (!--v47) {
                    break;
                  }
                }
              }
            }
            *(_DWORD *)(a4 + 16) = (v46 | (1 << v41)) - 1;
            if (!v30) {
              goto LABEL_67;
            }
LABEL_39:
            *(unsigned char *)(a4 + 20) = (v30 & v5) != 0;
            if (v30 == 1)
            {
              if (v11 == v9)
              {
                *(unsigned char *)(a4 + 21) = 0;
                goto LABEL_76;
              }
              unsigned int v5 = *v11;
              *(unsigned char *)(a4 + 21) = *v11 >> 7;
              unsigned int v35 = 64;
LABEL_45:
              BOOL v36 = (v35 & v5) != 0;
              unsigned int v37 = v35 >> 1;
              *(unsigned char *)(a4 + 28) = v36;
LABEL_46:
              ++v11;
              BOOL v38 = (v37 & v5) != 0;
              unsigned int v39 = v37 >> 1;
              *(unsigned char *)(a4 + 29) = v38;
              uint64_t v40 = (BOOL *)(a4 + 30);
              goto LABEL_73;
            }
            *(unsigned char *)(a4 + 21) = (v5 & (v30 >> 1)) != 0;
            if (v30 > 3)
            {
              *(unsigned char *)(a4 + 28) = (v5 & (v30 >> 2)) != 0;
              if (v30 > 7) {
                goto LABEL_69;
              }
              if (v11 == v9) {
                goto LABEL_77;
              }
              unsigned int v5 = *v11;
              unsigned int v37 = 128;
              goto LABEL_46;
            }
            if (v11 != v9)
            {
              unsigned int v5 = *v11;
              unsigned int v35 = 128;
              goto LABEL_45;
            }
LABEL_76:
            *(unsigned char *)(a4 + 28) = 0;
LABEL_77:
            unsigned int v54 = 0;
            BOOL v53 = 0;
            *(unsigned char *)(a4 + 29) = 0;
            uint64_t v40 = (BOOL *)(a4 + 30);
            goto LABEL_78;
          }
        }
        unsigned int v43 = *v11++;
        unsigned int v5 = v43;
        unsigned int v42 = 128;
LABEL_54:
        BOOL v44 = (v42 & v5) != 0;
        unsigned int v30 = v42 >> 1;
        v42 >>= 1;
        ++v41;
        if (v44) {
          goto LABEL_59;
        }
        goto LABEL_55;
      }
      unsigned int v32 = *v11++;
      unsigned int v5 = v32;
      unsigned int v30 = 128;
    }
    int v33 = v30 & v5;
    BOOL v34 = (v30 & v5) != 0;
    v30 >>= 1;
    *(unsigned char *)(a4 + 12) = v34;
    if (v33) {
      goto LABEL_38;
    }
    goto LABEL_52;
  }
  unsigned int v30 = v6 >> 1;
  *(_DWORD *)(a4 + 8) = (v6 & v5) != 0;
  if ((v6 & v5) != 0) {
    goto LABEL_34;
  }
LABEL_38:
  if (v30) {
    goto LABEL_39;
  }
LABEL_67:
  if (v11 == v9)
  {
    *(_WORD *)(a4 + 20) = 0;
    goto LABEL_76;
  }
  unsigned int v51 = *v11++;
  unsigned int v5 = v51;
  *(unsigned char *)(a4 + 20) = v51 >> 7;
  *(unsigned char *)(a4 + 21) = (v51 & 0x40) != 0;
  *(unsigned char *)(a4 + 28) = (v51 & 0x20) != 0;
  unsigned int v30 = 128;
LABEL_69:
  *(unsigned char *)(a4 + 29) = (v5 & (v30 >> 3)) != 0;
  uint64_t v40 = (BOOL *)(a4 + 30);
  if (v30 > 0xF)
  {
    unsigned int v39 = v30 >> 4;
LABEL_73:
    BOOL v53 = (v39 & v5) != 0;
    unsigned int v54 = v39 >> 1;
  }
  else
  {
    if (v11 != v9)
    {
      unsigned int v52 = *v11++;
      unsigned int v5 = v52;
      unsigned int v39 = 128;
      goto LABEL_73;
    }
    unsigned int v54 = 0;
    BOOL v53 = 0;
LABEL_78:
    unsigned int v7 = 3;
    uint64_t v11 = &a2[a3];
  }
  *uint64_t v40 = v53;
  uint64_t v55 = -1;
  unsigned int v56 = v54;
  while (2)
  {
    int v59 = v55;
    if (!v56)
    {
      if (v11 == v9)
      {
        unsigned int v56 = 0;
        unsigned int v7 = 3;
        uint64_t v11 = &a2[a3];
        ++v55;
        goto LABEL_82;
      }
      unsigned int v57 = *v11++;
      unsigned int v5 = v57;
      unsigned int v56 = 128;
    }
    BOOL v58 = (v56 & v5) != 0;
    unsigned int v54 = v56 >> 1;
    v56 >>= 1;
    ++v55;
    if (v58) {
      break;
    }
LABEL_82:
    if ((v59 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v60 = 0;
  if (v55)
  {
    int v61 = (v59 & 0x3F) + 1;
    unsigned int v62 = v54;
    while (1)
    {
      if (v62) {
        goto LABEL_89;
      }
      if (v11 == v9)
      {
        unsigned int v62 = 0;
        unsigned int v7 = 3;
        uint64_t v11 = &a2[a3];
        v60 *= 2;
        if (!--v61) {
          break;
        }
      }
      else
      {
        unsigned int v63 = *v11++;
        unsigned int v5 = v63;
        unsigned int v62 = 128;
LABEL_89:
        BOOL v64 = (v62 & v5) != 0;
        unsigned int v54 = v62 >> 1;
        v62 >>= 1;
        uint64_t v60 = (2 * v60) | v64;
        if (!--v61) {
          break;
        }
      }
    }
  }
  *(_DWORD *)(a4 + 32) = (v60 | (1 << v55)) - 1;
  uint64_t v65 = -1;
  unsigned int v66 = v54;
  while (2)
  {
    int v69 = v65;
    if (!v66)
    {
      if (v11 == v9)
      {
        unsigned int v66 = 0;
        unsigned int v7 = 3;
        uint64_t v11 = &a2[a3];
        ++v65;
        goto LABEL_96;
      }
      unsigned int v67 = *v11++;
      unsigned int v5 = v67;
      unsigned int v66 = 128;
    }
    BOOL v68 = (v66 & v5) != 0;
    unsigned int v54 = v66 >> 1;
    v66 >>= 1;
    ++v65;
    if (v68) {
      break;
    }
LABEL_96:
    if ((v69 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v70 = 0;
  if (v65)
  {
    int v71 = (v69 & 0x3F) + 1;
    unsigned int v72 = v54;
    while (1)
    {
      if (v72) {
        goto LABEL_103;
      }
      if (v11 == v9)
      {
        unsigned int v72 = 0;
        unsigned int v7 = 3;
        uint64_t v11 = &a2[a3];
        v70 *= 2;
        if (!--v71) {
          break;
        }
      }
      else
      {
        unsigned int v73 = *v11++;
        unsigned int v5 = v73;
        unsigned int v72 = 128;
LABEL_103:
        BOOL v74 = (v72 & v5) != 0;
        unsigned int v54 = v72 >> 1;
        v72 >>= 1;
        uint64_t v70 = (2 * v70) | v74;
        if (!--v71) {
          break;
        }
      }
    }
  }
  *(_DWORD *)(a4 + 24) = (v70 | (1 << v65)) - 1;
  uint64_t v75 = -1;
  unsigned int v76 = v54;
  while (2)
  {
    int v79 = v75;
    if (!v76)
    {
      if (v11 == v9)
      {
        unsigned int v76 = 0;
        unsigned int v7 = 3;
        uint64_t v11 = &a2[a3];
        ++v75;
        goto LABEL_110;
      }
      unsigned int v77 = *v11++;
      unsigned int v5 = v77;
      unsigned int v76 = 128;
    }
    BOOL v78 = (v76 & v5) != 0;
    unsigned int v54 = v76 >> 1;
    v76 >>= 1;
    ++v75;
    if (v78) {
      break;
    }
LABEL_110:
    if ((v79 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v80 = 0;
  if (v75)
  {
    int v81 = (v79 & 0x3F) + 1;
    unsigned int v82 = v54;
    while (1)
    {
      if (v82) {
        goto LABEL_117;
      }
      if (v11 == v9)
      {
        unsigned int v82 = 0;
        unsigned int v7 = 3;
        uint64_t v11 = &a2[a3];
        v80 *= 2;
        if (!--v81) {
          break;
        }
      }
      else
      {
        unsigned int v83 = *v11++;
        unsigned int v5 = v83;
        unsigned int v82 = 128;
LABEL_117:
        BOOL v84 = (v82 & v5) != 0;
        unsigned int v54 = v82 >> 1;
        v82 >>= 1;
        uint64_t v80 = (2 * v80) | v84;
        if (!--v81) {
          break;
        }
      }
    }
  }
  *(_DWORD *)(a4 + 36) = (v80 | (1 << v75)) - 1;
  uint64_t v85 = -1;
  unsigned int v86 = v54;
  while (2)
  {
    int v89 = v85;
    if (!v86)
    {
      if (v11 == v9)
      {
        unsigned int v86 = 0;
        unsigned int v7 = 3;
        uint64_t v11 = &a2[a3];
        ++v85;
        goto LABEL_124;
      }
      unsigned int v87 = *v11++;
      unsigned int v5 = v87;
      unsigned int v86 = 128;
    }
    BOOL v88 = (v86 & v5) != 0;
    unsigned int v54 = v86 >> 1;
    v86 >>= 1;
    ++v85;
    if (v88) {
      break;
    }
LABEL_124:
    if ((v89 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v90 = 0;
  if (v85)
  {
    int v91 = (v89 & 0x3F) + 1;
    unsigned int v92 = v54;
    while (1)
    {
      if (v92) {
        goto LABEL_131;
      }
      if (v11 == v9)
      {
        unsigned int v92 = 0;
        unsigned int v7 = 3;
        uint64_t v11 = &a2[a3];
        v90 *= 2;
        if (!--v91) {
          break;
        }
      }
      else
      {
        unsigned int v93 = *v11++;
        unsigned int v5 = v93;
        unsigned int v92 = 128;
LABEL_131:
        BOOL v94 = (v92 & v5) != 0;
        unsigned int v54 = v92 >> 1;
        v92 >>= 1;
        uint64_t v90 = (2 * v90) | v94;
        if (!--v91) {
          break;
        }
      }
    }
  }
  *(_DWORD *)(a4 + 40) = (v90 | (1 << v85)) - 1;
  if (a5)
  {
    if (v54) {
      BOOL v95 = 1;
    }
    else {
      BOOL v95 = v11 == v9;
    }
    if (v95) {
      int v96 = v11;
    }
    else {
      int v96 = v11 + 1;
    }
    *a5 = v96 - a2;
  }
  if (v11 == v9) {
    unsigned int v97 = 3;
  }
  else {
    unsigned int v97 = v7;
  }
  if (v54) {
    return v7;
  }
  else {
    return v97;
  }
}

uint64_t gcl::gpcc::HlsIo::parseAps(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, void *a5)
{
  int v8 = 0;
  unsigned int v9 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unsigned int v12 = &a2[a3];
  uint64_t v13 = -1;
  int v14 = a2;
  do
  {
    int v15 = v13;
    if (!v11)
    {
      if (v14 == v12)
      {
        unsigned int v11 = 0;
        unsigned int v10 = 3;
        int v14 = &a2[a3];
        ++v13;
        continue;
      }
      int v16 = *v14++;
      int v8 = v16;
      unsigned int v11 = 128;
    }
    BOOL v17 = (v11 & v8) != 0;
    unsigned int v9 = v11 >> 1;
    v11 >>= 1;
    ++v13;
    if (v17) {
      break;
    }
  }
  while ((v15 + 1) < 0x3F);
  uint64_t v18 = 0;
  if (v13)
  {
    int v19 = (v15 & 0x3F) + 1;
    unsigned int v20 = v9;
    while (1)
    {
      if (v20) {
        goto LABEL_12;
      }
      if (v14 == v12)
      {
        unsigned int v20 = 0;
        unsigned int v10 = 3;
        int v14 = &a2[a3];
        v18 *= 2;
        if (!--v19) {
          break;
        }
      }
      else
      {
        int v21 = *v14++;
        int v8 = v21;
        unsigned int v20 = 128;
LABEL_12:
        BOOL v22 = (v20 & v8) != 0;
        unsigned int v9 = v20 >> 1;
        v20 >>= 1;
        uint64_t v18 = (2 * v18) | v22;
        if (!--v19) {
          break;
        }
      }
    }
  }
  *(_DWORD *)a4 = (v18 | (1 << v13)) - 1;
  uint64_t v23 = -1;
  unsigned int v24 = v9;
  while (2)
  {
    int v25 = v23;
    if (v24)
    {
LABEL_20:
      BOOL v27 = (v24 & v8) != 0;
      unsigned int v9 = v24 >> 1;
      v24 >>= 1;
      ++v23;
      if (v27) {
        break;
      }
    }
    else
    {
      if (v14 != v12)
      {
        int v26 = *v14++;
        int v8 = v26;
        unsigned int v24 = 128;
        goto LABEL_20;
      }
      unsigned int v24 = 0;
      unsigned int v10 = 3;
      int v14 = &a2[a3];
      ++v23;
    }
    if ((v25 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v28 = 0;
  if (v23)
  {
    int v29 = (v25 & 0x3F) + 1;
    unsigned int v30 = v9;
    while (1)
    {
      if (v30) {
        goto LABEL_27;
      }
      if (v14 == v12)
      {
        unsigned int v30 = 0;
        unsigned int v10 = 3;
        int v14 = &a2[a3];
        v28 *= 2;
        if (!--v29) {
          break;
        }
      }
      else
      {
        int v31 = *v14++;
        int v8 = v31;
        unsigned int v30 = 128;
LABEL_27:
        BOOL v32 = (v30 & v8) != 0;
        unsigned int v9 = v30 >> 1;
        v30 >>= 1;
        uint64_t v28 = (2 * v28) | v32;
        if (!--v29) {
          break;
        }
      }
    }
  }
  *(_DWORD *)(a4 + 4) = (v28 | (1 << v23)) - 1;
  uint64_t v33 = -1;
  unsigned int v34 = v9;
  while (2)
  {
    int v35 = v33;
    if (v34)
    {
LABEL_35:
      BOOL v37 = (v34 & v8) != 0;
      unsigned int v9 = v34 >> 1;
      v34 >>= 1;
      ++v33;
      if (v37) {
        break;
      }
    }
    else
    {
      if (v14 != v12)
      {
        int v36 = *v14++;
        int v8 = v36;
        unsigned int v34 = 128;
        goto LABEL_35;
      }
      unsigned int v34 = 0;
      unsigned int v10 = 3;
      int v14 = &a2[a3];
      ++v33;
    }
    if ((v35 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v38 = 0;
  if (v33)
  {
    int v39 = (v35 & 0x3F) + 1;
    unsigned int v40 = v9;
    while (1)
    {
      if (v40) {
        goto LABEL_42;
      }
      if (v14 == v12)
      {
        unsigned int v40 = 0;
        unsigned int v10 = 3;
        int v14 = &a2[a3];
        v38 *= 2;
        if (!--v39) {
          break;
        }
      }
      else
      {
        int v41 = *v14++;
        int v8 = v41;
        unsigned int v40 = 128;
LABEL_42:
        BOOL v42 = (v40 & v8) != 0;
        unsigned int v9 = v40 >> 1;
        v40 >>= 1;
        uint64_t v38 = (2 * v38) | v42;
        if (!--v39) {
          break;
        }
      }
    }
  }
  int v43 = v38 | (1 << v33);
  *(_DWORD *)(a4 + 8) = v43 - 1;
  uint64_t v44 = -1;
  unsigned int v45 = v9;
  while (2)
  {
    int v46 = v44;
    if (v45)
    {
LABEL_50:
      BOOL v48 = (v45 & v8) != 0;
      unsigned int v9 = v45 >> 1;
      v45 >>= 1;
      ++v44;
      if (v48) {
        break;
      }
    }
    else
    {
      if (v14 != v12)
      {
        int v47 = *v14++;
        int v8 = v47;
        unsigned int v45 = 128;
        goto LABEL_50;
      }
      unsigned int v45 = 0;
      unsigned int v10 = 3;
      int v14 = &a2[a3];
      ++v44;
    }
    if ((v46 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v49 = 0;
  if (v44)
  {
    int v50 = (v46 & 0x3F) + 1;
    unsigned int v51 = v9;
    while (1)
    {
      if (v51) {
        goto LABEL_57;
      }
      if (v14 == v12)
      {
        unsigned int v51 = 0;
        unsigned int v10 = 3;
        int v14 = &a2[a3];
        v49 *= 2;
        if (!--v50) {
          break;
        }
      }
      else
      {
        int v52 = *v14++;
        int v8 = v52;
        unsigned int v51 = 128;
LABEL_57:
        BOOL v53 = (v51 & v8) != 0;
        unsigned int v9 = v51 >> 1;
        v51 >>= 1;
        uint64_t v49 = (2 * v49) | v53;
        if (!--v50) {
          break;
        }
      }
    }
  }
  *(_DWORD *)(a4 + 64) = (v49 | (1 << v44)) - 1;
  uint64_t v54 = -1;
  unsigned int v55 = v9;
  while (2)
  {
    int v56 = v54;
    if (v55)
    {
LABEL_65:
      BOOL v58 = (v55 & v8) != 0;
      unsigned int v9 = v55 >> 1;
      v55 >>= 1;
      ++v54;
      if (v58) {
        break;
      }
    }
    else
    {
      if (v14 != v12)
      {
        int v57 = *v14++;
        int v8 = v57;
        unsigned int v55 = 128;
        goto LABEL_65;
      }
      unsigned int v55 = 0;
      unsigned int v10 = 3;
      int v14 = &a2[a3];
      ++v54;
    }
    if ((v56 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v59 = 0;
  if (v54)
  {
    int v60 = (v56 & 0x3F) + 1;
    unsigned int v61 = v9;
    while (1)
    {
      if (v61) {
        goto LABEL_72;
      }
      if (v14 == v12)
      {
        unsigned int v61 = 0;
        unsigned int v10 = 3;
        int v14 = &a2[a3];
        v59 *= 2;
        if (!--v60) {
          break;
        }
      }
      else
      {
        int v62 = *v14++;
        int v8 = v62;
        unsigned int v61 = 128;
LABEL_72:
        BOOL v63 = (v61 & v8) != 0;
        unsigned int v9 = v61 >> 1;
        v61 >>= 1;
        uint64_t v59 = (2 * v59) | v63;
        if (!--v60) {
          break;
        }
      }
    }
  }
  uint64_t v64 = (v59 | (1 << v54)) - 1;
  if (v64) {
    uint64_t v64 = ((v64 & 1) + v64) >> 1;
  }
  else {
    LODWORD(v64) = -(int)(((v64 & 1) + v64) >> 1);
  }
  *(_DWORD *)(a4 + 68) = v64;
  if (v9)
  {
LABEL_82:
    int v66 = v9 >> 1;
    *(unsigned char *)(a4 + 72) = (v9 & v8) != 0;
    if ((v43 | 2) != 3) {
      goto LABEL_175;
    }
    goto LABEL_83;
  }
  if (v14 != v12)
  {
    int v65 = *v14++;
    int v8 = v65;
    unsigned int v9 = 128;
    goto LABEL_82;
  }
  int v66 = 0;
  unsigned int v10 = 3;
  int v14 = &a2[a3];
  *(unsigned char *)(a4 + 72) = 0;
  if ((v43 | 2) == 3)
  {
LABEL_83:
    uint64_t v67 = -1;
    unsigned int v68 = v66;
    while (1)
    {
      int v69 = v67;
      if (v68) {
        goto LABEL_87;
      }
      if (v14 != v12) {
        break;
      }
      unsigned int v68 = 0;
      unsigned int v10 = 3;
      int v14 = &a2[a3];
      ++v67;
LABEL_88:
      if ((v69 + 1) >= 0x3F)
      {
LABEL_91:
        uint64_t v72 = 0;
        if (v67)
        {
          int v73 = (v69 & 0x3F) + 1;
          unsigned int v74 = v66;
          while (1)
          {
            if (v74) {
              goto LABEL_94;
            }
            if (v14 == v12)
            {
              unsigned int v74 = 0;
              unsigned int v10 = 3;
              int v14 = &a2[a3];
              v72 *= 2;
              if (!--v73) {
                break;
              }
            }
            else
            {
              int v75 = *v14++;
              int v8 = v75;
              unsigned int v74 = 128;
LABEL_94:
              BOOL v76 = (v74 & v8) != 0;
              int v66 = v74 >> 1;
              v74 >>= 1;
              uint64_t v72 = (2 * v72) | v76;
              if (!--v73) {
                break;
              }
            }
          }
        }
        *(_DWORD *)(a4 + 16) = (v72 | (1 << v67)) - 1;
        uint64_t v77 = -1;
        unsigned int v78 = v66;
        while (2)
        {
          int v79 = v77;
          if (v78)
          {
LABEL_102:
            BOOL v81 = (v78 & v8) != 0;
            int v66 = v78 >> 1;
            v78 >>= 1;
            ++v77;
            if (v81) {
              break;
            }
          }
          else
          {
            if (v14 != v12)
            {
              int v80 = *v14++;
              int v8 = v80;
              unsigned int v78 = 128;
              goto LABEL_102;
            }
            unsigned int v78 = 0;
            unsigned int v10 = 3;
            int v14 = &a2[a3];
            ++v77;
          }
          if ((v79 + 1) < 0x3F) {
            continue;
          }
          break;
        }
        uint64_t v82 = 0;
        if (v77)
        {
          int v83 = (v79 & 0x3F) + 1;
          unsigned int v84 = v66;
          while (1)
          {
            if (v84) {
              goto LABEL_109;
            }
            if (v14 == v12)
            {
              unsigned int v84 = 0;
              unsigned int v10 = 3;
              int v14 = &a2[a3];
              v82 *= 2;
              if (!--v83) {
                break;
              }
            }
            else
            {
              int v85 = *v14++;
              int v8 = v85;
              unsigned int v84 = 128;
LABEL_109:
              BOOL v86 = (v84 & v8) != 0;
              int v66 = v84 >> 1;
              v84 >>= 1;
              uint64_t v82 = (2 * v82) | v86;
              if (!--v83) {
                break;
              }
            }
          }
        }
        *(_DWORD *)(a4 + 20) = (v82 | (1 << v77)) - 1;
        uint64_t v87 = -1;
        unsigned int v88 = v66;
        while (2)
        {
          int v89 = v87;
          if (v88)
          {
LABEL_117:
            BOOL v91 = (v88 & v8) != 0;
            int v66 = v88 >> 1;
            v88 >>= 1;
            ++v87;
            if (v91) {
              break;
            }
          }
          else
          {
            if (v14 != v12)
            {
              int v90 = *v14++;
              int v8 = v90;
              unsigned int v88 = 128;
              goto LABEL_117;
            }
            unsigned int v88 = 0;
            unsigned int v10 = 3;
            int v14 = &a2[a3];
            ++v87;
          }
          if ((v89 + 1) < 0x3F) {
            continue;
          }
          break;
        }
        uint64_t v92 = 0;
        if (v87)
        {
          int v93 = (v89 & 0x3F) + 1;
          unsigned int v94 = v66;
          while (1)
          {
            if (v94) {
              goto LABEL_124;
            }
            if (v14 == v12)
            {
              unsigned int v94 = 0;
              unsigned int v10 = 3;
              int v14 = &a2[a3];
              v92 *= 2;
              if (!--v93) {
                break;
              }
            }
            else
            {
              int v95 = *v14++;
              int v8 = v95;
              unsigned int v94 = 128;
LABEL_124:
              BOOL v96 = (v94 & v8) != 0;
              int v66 = v94 >> 1;
              v94 >>= 1;
              uint64_t v92 = (2 * v92) | v96;
              if (!--v93) {
                break;
              }
            }
          }
        }
        *(_DWORD *)(a4 + 28) = (v92 | (1 << v87)) - 1;
        if (v66)
        {
LABEL_131:
          BOOL v98 = (v66 & v8) != 0;
          int v66 = v66 >> 1;
        }
        else
        {
          if (v14 != v12)
          {
            int v97 = *v14++;
            int v8 = v97;
            int v66 = 128;
            goto LABEL_131;
          }
          int v66 = 0;
          BOOL v98 = 0;
          unsigned int v10 = 3;
          int v14 = &a2[a3];
        }
        *(unsigned char *)(a4 + 12) = v98;
        uint64_t v99 = -1;
        unsigned int v100 = v66;
        while (2)
        {
          int v101 = v99;
          if (v100)
          {
LABEL_136:
            BOOL v103 = (v100 & v8) != 0;
            int v66 = v100 >> 1;
            v100 >>= 1;
            ++v99;
            if (v103) {
              break;
            }
          }
          else
          {
            if (v14 != v12)
            {
              int v102 = *v14++;
              int v8 = v102;
              unsigned int v100 = 128;
              goto LABEL_136;
            }
            unsigned int v100 = 0;
            unsigned int v10 = 3;
            int v14 = &a2[a3];
            ++v99;
          }
          if ((v101 + 1) < 0x3F) {
            continue;
          }
          break;
        }
        uint64_t v104 = 0;
        if (v99)
        {
          int v105 = (v101 & 0x3F) + 1;
          unsigned int v106 = v66;
          while (1)
          {
            if (v106) {
              goto LABEL_143;
            }
            if (v14 == v12)
            {
              unsigned int v106 = 0;
              unsigned int v10 = 3;
              int v14 = &a2[a3];
              v104 *= 2;
              if (!--v105) {
                break;
              }
            }
            else
            {
              int v107 = *v14++;
              int v8 = v107;
              unsigned int v106 = 128;
LABEL_143:
              BOOL v108 = (v106 & v8) != 0;
              int v66 = v106 >> 1;
              v106 >>= 1;
              uint64_t v104 = (2 * v104) | v108;
              if (!--v105) {
                break;
              }
            }
          }
        }
        unsigned int v109 = (v104 | (1 << v99)) - 1;
        *(_DWORD *)(a4 + 36) = v109;
        if ((v109 & 0x80000000) != 0) {
          return 3;
        }
        uint64_t v110 = *(void *)(a4 + 40);
        unint64_t v111 = (*(void *)(a4 + 48) - v110) >> 3;
        if (v109 <= v111)
        {
          if (v109 < v111) {
            *(void *)(a4 + 48) = v110 + 8 * v109;
          }
        }
        else
        {
          std::vector<long long>::__append(a4 + 40, v109 - v111);
          unsigned int v109 = *(_DWORD *)(a4 + 36);
        }
        if ((int)v109 < 1) {
          goto LABEL_175;
        }
        uint64_t v113 = 0;
        uint64_t v114 = *(void *)(a4 + 40);
LABEL_157:
        uint64_t v116 = 0;
        int v117 = 63;
        unsigned int v118 = v66;
        while (1)
        {
          int v119 = v117;
          if (v118) {
            goto LABEL_161;
          }
          if (v14 != v12) {
            break;
          }
          unsigned int v118 = 0;
          unsigned int v10 = 3;
          int v14 = v12;
          uint64_t v122 = v116 + 1;
LABEL_162:
          int v117 = v119 + 1;
          BOOL v123 = v116 >= 0x3F;
          uint64_t v116 = v122;
          if (v123)
          {
LABEL_166:
            if (v122 == 1)
            {
              uint64_t v115 = 0;
LABEL_156:
              *(void *)(v114 + 8 * v113++) = (v115 | (1 << (v122 - 1))) - 1;
              if (v113 == v109) {
                goto LABEL_175;
              }
              goto LABEL_157;
            }
            uint64_t v115 = 0;
            int v124 = (v119 & 0x3F) + 1;
            unsigned int v125 = v66;
            while (1)
            {
LABEL_170:
              if (v125) {
                goto LABEL_169;
              }
              if (v14 != v12) {
                break;
              }
              unsigned int v125 = 0;
              unsigned int v10 = 3;
              int v14 = v12;
              v115 *= 2;
              if (!--v124) {
                goto LABEL_156;
              }
            }
            int v126 = *v14++;
            int v8 = v126;
            unsigned int v125 = 128;
LABEL_169:
            BOOL v127 = (v125 & v8) != 0;
            int v66 = v125 >> 1;
            v125 >>= 1;
            uint64_t v115 = (2 * v115) | v127;
            if (!--v124) {
              goto LABEL_156;
            }
            goto LABEL_170;
          }
        }
        int v120 = *v14++;
        int v8 = v120;
        unsigned int v118 = 128;
LABEL_161:
        BOOL v121 = (v118 & v8) != 0;
        int v66 = v118 >> 1;
        v118 >>= 1;
        uint64_t v122 = v116 + 1;
        if (v121) {
          goto LABEL_166;
        }
        goto LABEL_162;
      }
    }
    int v70 = *v14++;
    int v8 = v70;
    unsigned int v68 = 128;
LABEL_87:
    BOOL v71 = (v68 & v8) != 0;
    int v66 = v68 >> 1;
    v68 >>= 1;
    ++v67;
    if (v71) {
      goto LABEL_91;
    }
    goto LABEL_88;
  }
LABEL_175:
  *(unsigned char *)(a4 + 32) = 0;
  if (*(_DWORD *)(a4 + 8)) {
    goto LABEL_196;
  }
  uint64_t v128 = -1;
  int v129 = v66;
  while (2)
  {
    int v130 = v128;
    if (v129)
    {
LABEL_180:
      BOOL v132 = (v129 & v8) != 0;
      int v66 = v129 >> 1;
      v129 >>= 1;
      ++v128;
      if (v132) {
        break;
      }
    }
    else
    {
      if (v14 != v12)
      {
        int v131 = *v14++;
        int v8 = v131;
        int v129 = 128;
        goto LABEL_180;
      }
      int v129 = 0;
      unsigned int v10 = 3;
      int v14 = v12;
      ++v128;
    }
    if ((v130 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v133 = 0;
  if (v128)
  {
    int v134 = (v130 & 0x3F) + 1;
    int v135 = v66;
    while (1)
    {
      if (v135) {
        goto LABEL_187;
      }
      if (v14 == v12)
      {
        int v135 = 0;
        unsigned int v10 = 3;
        int v14 = v12;
        v133 *= 2;
        if (!--v134) {
          break;
        }
      }
      else
      {
        int v136 = *v14++;
        int v8 = v136;
        int v135 = 128;
LABEL_187:
        BOOL v137 = (v135 & v8) != 0;
        int v66 = v135 >> 1;
        v135 >>= 1;
        uint64_t v133 = (2 * v133) | v137;
        if (!--v134) {
          break;
        }
      }
    }
  }
  *(_DWORD *)(a4 + 24) = (v133 | (1 << v128)) - 1;
  if (v66)
  {
LABEL_194:
    BOOL v139 = (v66 & v8) != 0;
    v66 >>= 1;
  }
  else
  {
    if (v14 != v12)
    {
      int v138 = *v14++;
      int v8 = v138;
      int v66 = 128;
      goto LABEL_194;
    }
    int v66 = 0;
    BOOL v139 = 0;
    unsigned int v10 = 3;
    int v14 = v12;
  }
  *(unsigned char *)(a4 + 32) = v139;
LABEL_196:
  if (v14 == v12) {
    unsigned int v140 = 3;
  }
  else {
    unsigned int v140 = v10;
  }
  if (v66) {
    uint64_t result = v10;
  }
  else {
    uint64_t result = v140;
  }
  if (a5)
  {
    if (v66) {
      BOOL v141 = 1;
    }
    else {
      BOOL v141 = v14 == v12;
    }
    if (v141) {
      unsigned __int8 v142 = v14;
    }
    else {
      unsigned __int8 v142 = v14 + 1;
    }
    *a5 = v142 - a2;
  }
  return result;
}

uint64_t gcl::gpcc::HlsIo::parseGsh(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, _DWORD *a5, void *a6)
{
  int v6 = 0;
  unsigned int v7 = 0;
  uint64_t result = 0;
  unsigned int v9 = 0;
  unsigned int v10 = &a2[a3];
  uint64_t v11 = -1;
  unsigned int v12 = a2;
  do
  {
    int v13 = v11;
    if (!v9)
    {
      if (v12 == v10)
      {
        unsigned int v9 = 0;
        uint64_t result = 3;
        unsigned int v12 = &a2[a3];
        ++v11;
        continue;
      }
      int v14 = *v12++;
      int v6 = v14;
      unsigned int v9 = 128;
    }
    BOOL v15 = (v9 & v6) != 0;
    unsigned int v7 = v9 >> 1;
    v9 >>= 1;
    ++v11;
    if (v15) {
      break;
    }
  }
  while ((v13 + 1) < 0x3F);
  uint64_t v16 = 0;
  if (v11)
  {
    int v17 = (v13 & 0x3F) + 1;
    unsigned int v18 = v7;
    while (1)
    {
      if (v18) {
        goto LABEL_12;
      }
      if (v12 == v10)
      {
        unsigned int v18 = 0;
        uint64_t result = 3;
        unsigned int v12 = &a2[a3];
        v16 *= 2;
        if (!--v17) {
          break;
        }
      }
      else
      {
        int v19 = *v12++;
        int v6 = v19;
        unsigned int v18 = 128;
LABEL_12:
        BOOL v20 = (v18 & v6) != 0;
        unsigned int v7 = v18 >> 1;
        v18 >>= 1;
        uint64_t v16 = (2 * v16) | v20;
        if (!--v17) {
          break;
        }
      }
    }
  }
  *a5 = (v16 | (1 << v11)) - 1;
  uint64_t v21 = -1;
  unsigned int v22 = v7;
  while (2)
  {
    int v23 = v21;
    if (v22)
    {
LABEL_20:
      BOOL v25 = (v22 & v6) != 0;
      unsigned int v7 = v22 >> 1;
      v22 >>= 1;
      ++v21;
      if (v25) {
        break;
      }
    }
    else
    {
      if (v12 != v10)
      {
        int v24 = *v12++;
        int v6 = v24;
        unsigned int v22 = 128;
        goto LABEL_20;
      }
      unsigned int v22 = 0;
      uint64_t result = 3;
      unsigned int v12 = &a2[a3];
      ++v21;
    }
    if ((v23 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v26 = 0;
  if (v21)
  {
    int v27 = (v23 & 0x3F) + 1;
    unsigned int v28 = v7;
    while (1)
    {
      if (v28) {
        goto LABEL_27;
      }
      if (v12 == v10)
      {
        unsigned int v28 = 0;
        uint64_t result = 3;
        unsigned int v12 = &a2[a3];
        v26 *= 2;
        if (!--v27) {
          break;
        }
      }
      else
      {
        int v29 = *v12++;
        int v6 = v29;
        unsigned int v28 = 128;
LABEL_27:
        BOOL v30 = (v28 & v6) != 0;
        unsigned int v7 = v28 >> 1;
        v28 >>= 1;
        uint64_t v26 = (2 * v26) | v30;
        if (!--v27) {
          break;
        }
      }
    }
  }
  a5[1] = (v26 | (1 << v21)) - 1;
  uint64_t v31 = -1;
  unsigned int v32 = v7;
  while (2)
  {
    int v33 = v31;
    if (v32)
    {
LABEL_35:
      BOOL v35 = (v32 & v6) != 0;
      unsigned int v7 = v32 >> 1;
      v32 >>= 1;
      ++v31;
      if (v35) {
        break;
      }
    }
    else
    {
      if (v12 != v10)
      {
        int v34 = *v12++;
        int v6 = v34;
        unsigned int v32 = 128;
        goto LABEL_35;
      }
      unsigned int v32 = 0;
      uint64_t result = 3;
      unsigned int v12 = &a2[a3];
      ++v31;
    }
    if ((v33 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v36 = 0;
  if (v31)
  {
    int v37 = (v33 & 0x3F) + 1;
    unsigned int v38 = v7;
    while (1)
    {
      if (v38) {
        goto LABEL_42;
      }
      if (v12 == v10)
      {
        unsigned int v38 = 0;
        uint64_t result = 3;
        unsigned int v12 = &a2[a3];
        v36 *= 2;
        if (!--v37) {
          break;
        }
      }
      else
      {
        int v39 = *v12++;
        int v6 = v39;
        unsigned int v38 = 128;
LABEL_42:
        BOOL v40 = (v38 & v6) != 0;
        unsigned int v7 = v38 >> 1;
        v38 >>= 1;
        uint64_t v36 = (2 * v36) | v40;
        if (!--v37) {
          break;
        }
      }
    }
  }
  a5[2] = (v36 | (1 << v31)) - 1;
  if (*(_DWORD *)(a4 + 8))
  {
    int v41 = *(unsigned __int8 *)(a4 + 12);
    if (!*(unsigned char *)(a4 + 12)) {
      goto LABEL_64;
    }
    uint64_t v42 = -1;
    unsigned int v43 = v7;
    while (2)
    {
      int v44 = v42;
      if (v43)
      {
LABEL_52:
        BOOL v46 = (v43 & v6) != 0;
        unsigned int v7 = v43 >> 1;
        v43 >>= 1;
        ++v42;
        if (v46) {
          break;
        }
      }
      else
      {
        if (v12 != v10)
        {
          int v45 = *v12++;
          int v6 = v45;
          unsigned int v43 = 128;
          goto LABEL_52;
        }
        unsigned int v43 = 0;
        uint64_t result = 3;
        unsigned int v12 = &a2[a3];
        ++v42;
      }
      if ((v44 + 1) < 0x3F) {
        continue;
      }
      break;
    }
    uint64_t v47 = 0;
    if (v42)
    {
      int v48 = (v44 & 0x3F) + 1;
      unsigned int v49 = v7;
      while (1)
      {
        if (v49) {
          goto LABEL_59;
        }
        if (v12 == v10)
        {
          unsigned int v49 = 0;
          uint64_t result = 3;
          unsigned int v12 = &a2[a3];
          v47 *= 2;
          if (!--v48) {
            break;
          }
        }
        else
        {
          int v50 = *v12++;
          int v6 = v50;
          unsigned int v49 = 128;
LABEL_59:
          BOOL v51 = (v49 & v6) != 0;
          unsigned int v7 = v49 >> 1;
          v49 >>= 1;
          uint64_t v47 = (2 * v47) | v51;
          if (!--v48) {
            break;
          }
        }
      }
    }
    a5[6] = (v47 | (1 << v42)) - 1;
LABEL_64:
    uint64_t v52 = -1;
    unsigned int v53 = v7;
    while (2)
    {
      int v54 = v52;
      if (v53)
      {
LABEL_68:
        BOOL v56 = (v53 & v6) != 0;
        unsigned int v7 = v53 >> 1;
        v53 >>= 1;
        ++v52;
        if (v56) {
          break;
        }
      }
      else
      {
        if (v12 != v10)
        {
          int v55 = *v12++;
          int v6 = v55;
          unsigned int v53 = 128;
          goto LABEL_68;
        }
        unsigned int v53 = 0;
        uint64_t result = 3;
        unsigned int v12 = &a2[a3];
        ++v52;
      }
      if ((v54 + 1) < 0x3F) {
        continue;
      }
      break;
    }
    uint64_t v57 = 0;
    if (v52)
    {
      int v58 = (v54 & 0x3F) + 1;
      unsigned int v59 = v7;
      while (1)
      {
        if (v59) {
          goto LABEL_75;
        }
        if (v12 == v10)
        {
          unsigned int v59 = 0;
          uint64_t result = 3;
          unsigned int v12 = &a2[a3];
          v57 *= 2;
          if (!--v58) {
            break;
          }
        }
        else
        {
          int v60 = *v12++;
          int v6 = v60;
          unsigned int v59 = 128;
LABEL_75:
          BOOL v61 = (v59 & v6) != 0;
          unsigned int v7 = v59 >> 1;
          v59 >>= 1;
          uint64_t v57 = (2 * v57) | v61;
          if (!--v58) {
            break;
          }
        }
      }
    }
    uint64_t v62 = v57 | (1 << v52);
    uint64_t v63 = -1;
    unsigned int v64 = v7;
    while (2)
    {
      int v65 = v63;
      if (v64)
      {
LABEL_83:
        BOOL v67 = (v64 & v6) != 0;
        unsigned int v7 = v64 >> 1;
        v64 >>= 1;
        ++v63;
        if (v67) {
          break;
        }
      }
      else
      {
        if (v12 != v10)
        {
          int v66 = *v12++;
          int v6 = v66;
          unsigned int v64 = 128;
          goto LABEL_83;
        }
        unsigned int v64 = 0;
        uint64_t result = 3;
        unsigned int v12 = &a2[a3];
        ++v63;
      }
      if ((v65 + 1) < 0x3F) {
        continue;
      }
      break;
    }
    uint64_t v68 = 0;
    if (v63)
    {
      int v69 = (v65 & 0x3F) + 1;
      unsigned int v70 = v7;
      while (1)
      {
        if (v70) {
          goto LABEL_90;
        }
        if (v12 == v10)
        {
          unsigned int v70 = 0;
          uint64_t result = 3;
          unsigned int v12 = v10;
          v68 *= 2;
          if (!--v69) {
            break;
          }
        }
        else
        {
          int v71 = *v12++;
          int v6 = v71;
          unsigned int v70 = 128;
LABEL_90:
          BOOL v72 = (v70 & v6) != 0;
          unsigned int v7 = v70 >> 1;
          v70 >>= 1;
          uint64_t v68 = (2 * v68) | v72;
          if (!--v69) {
            break;
          }
        }
      }
    }
    int v73 = v62 - 1;
    uint64_t v74 = v68 | (1 << v63);
    uint64_t v75 = -1;
    unsigned int v76 = v7;
    while (2)
    {
      int v77 = v75;
      if (v76)
      {
LABEL_98:
        BOOL v79 = (v76 & v6) != 0;
        unsigned int v7 = v76 >> 1;
        v76 >>= 1;
        ++v75;
        if (v79) {
          break;
        }
      }
      else
      {
        if (v12 != v10)
        {
          int v78 = *v12++;
          int v6 = v78;
          unsigned int v76 = 128;
          goto LABEL_98;
        }
        unsigned int v76 = 0;
        uint64_t result = 3;
        unsigned int v12 = v10;
        ++v75;
      }
      if ((v77 + 1) < 0x3F) {
        continue;
      }
      break;
    }
    uint64_t v80 = 0;
    if (v75)
    {
      int v81 = (v77 & 0x3F) + 1;
      unsigned int v82 = v7;
      while (1)
      {
        if (v82) {
          goto LABEL_105;
        }
        if (v12 == v10)
        {
          unsigned int v82 = 0;
          uint64_t result = 3;
          unsigned int v12 = v10;
          v80 *= 2;
          if (!--v81) {
            break;
          }
        }
        else
        {
          int v83 = *v12++;
          int v6 = v83;
          unsigned int v82 = 128;
LABEL_105:
          BOOL v84 = (v82 & v6) != 0;
          unsigned int v7 = v82 >> 1;
          v82 >>= 1;
          uint64_t v80 = (2 * v80) | v84;
          if (!--v81) {
            break;
          }
        }
      }
    }
    int v85 = v74 - 1;
    int v86 = (v80 | (1 << v75)) - 1;
    if (*(_DWORD *)(a4 + 8))
    {
      if (v41) {
        int v87 = a5[6];
      }
      else {
        int v87 = *(_DWORD *)(a4 + 16);
      }
    }
    else
    {
      LOBYTE(v87) = 0;
    }
    a5[3] = v73 << v87;
    a5[4] = v85 << v87;
    a5[5] = v86 << v87;
  }
  uint64_t v88 = -1;
  unsigned int v89 = v7;
  while (2)
  {
    int v90 = v88;
    if (v89)
    {
LABEL_119:
      BOOL v92 = (v89 & v6) != 0;
      unsigned int v7 = v89 >> 1;
      v89 >>= 1;
      ++v88;
      if (v92) {
        break;
      }
    }
    else
    {
      if (v12 != v10)
      {
        int v91 = *v12++;
        int v6 = v91;
        unsigned int v89 = 128;
        goto LABEL_119;
      }
      unsigned int v89 = 0;
      uint64_t result = 3;
      unsigned int v12 = v10;
      ++v88;
    }
    if ((v90 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v93 = 0;
  if (v88)
  {
    int v94 = (v90 & 0x3F) + 1;
    unsigned int v95 = v7;
    while (1)
    {
      if (v95) {
        goto LABEL_126;
      }
      if (v12 == v10)
      {
        unsigned int v95 = 0;
        uint64_t result = 3;
        unsigned int v12 = v10;
        v93 *= 2;
        if (!--v94) {
          break;
        }
      }
      else
      {
        int v96 = *v12++;
        int v6 = v96;
        unsigned int v95 = 128;
LABEL_126:
        BOOL v97 = (v95 & v6) != 0;
        unsigned int v7 = v95 >> 1;
        v95 >>= 1;
        uint64_t v93 = (2 * v93) | v97;
        if (!--v94) {
          break;
        }
      }
    }
  }
  a5[7] = (v93 | (1 << v88)) - 1;
  uint64_t v98 = -1;
  unsigned int v99 = v7;
  while (2)
  {
    int v100 = v98;
    if (v99)
    {
LABEL_134:
      BOOL v102 = (v99 & v6) != 0;
      unsigned int v7 = v99 >> 1;
      v99 >>= 1;
      ++v98;
      if (v102) {
        break;
      }
    }
    else
    {
      if (v12 != v10)
      {
        int v101 = *v12++;
        int v6 = v101;
        unsigned int v99 = 128;
        goto LABEL_134;
      }
      unsigned int v99 = 0;
      uint64_t result = 3;
      unsigned int v12 = v10;
      ++v98;
    }
    if ((v100 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v103 = 0;
  if (v98)
  {
    int v104 = (v100 & 0x3F) + 1;
    while (1)
    {
      if (v7) {
        goto LABEL_141;
      }
      if (v12 == v10)
      {
        unsigned int v7 = 0;
        uint64_t result = 3;
        unsigned int v12 = v10;
        v103 *= 2;
        if (!--v104) {
          break;
        }
      }
      else
      {
        int v105 = *v12++;
        int v6 = v105;
        unsigned int v7 = 128;
LABEL_141:
        BOOL v106 = (v7 & v6) != 0;
        v7 >>= 1;
        uint64_t v103 = (2 * v103) | v106;
        if (!--v104) {
          break;
        }
      }
    }
  }
  a5[8] = (v103 | (1 << v98)) - 1;
  if (a6) {
    *a6 = v12 - a2;
  }
  return result;
}

uint64_t gcl::gpcc::HlsIo::parseAsh(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  int v7 = 0;
  unsigned int v8 = 0;
  uint64_t v9 = 0;
  unsigned int v10 = 0;
  uint64_t v11 = &a2[a3];
  uint64_t v12 = -1;
  int v13 = a2;
  do
  {
    int v14 = v12;
    if (!v10)
    {
      if (v13 == v11)
      {
        unsigned int v10 = 0;
        uint64_t v9 = 3;
        int v13 = &a2[a3];
        ++v12;
        continue;
      }
      int v15 = *v13++;
      int v7 = v15;
      unsigned int v10 = 128;
    }
    BOOL v16 = (v10 & v7) != 0;
    unsigned int v8 = v10 >> 1;
    v10 >>= 1;
    ++v12;
    if (v16) {
      break;
    }
  }
  while ((v14 + 1) < 0x3F);
  uint64_t v17 = 0;
  if (v12)
  {
    int v18 = (v14 & 0x3F) + 1;
    unsigned int v19 = v8;
    while (1)
    {
      if (v19) {
        goto LABEL_12;
      }
      if (v13 == v11)
      {
        unsigned int v19 = 0;
        uint64_t v9 = 3;
        int v13 = &a2[a3];
        v17 *= 2;
        if (!--v18) {
          break;
        }
      }
      else
      {
        int v20 = *v13++;
        int v7 = v20;
        unsigned int v19 = 128;
LABEL_12:
        BOOL v21 = (v19 & v7) != 0;
        unsigned int v8 = v19 >> 1;
        v19 >>= 1;
        uint64_t v17 = (2 * v17) | v21;
        if (!--v18) {
          break;
        }
      }
    }
  }
  *(_DWORD *)a5 = (v17 | (1 << v12)) - 1;
  uint64_t v22 = -1;
  unsigned int v23 = v8;
  while (2)
  {
    int v24 = v22;
    if (v23)
    {
LABEL_20:
      BOOL v26 = (v23 & v7) != 0;
      unsigned int v8 = v23 >> 1;
      v23 >>= 1;
      ++v22;
      if (v26) {
        break;
      }
    }
    else
    {
      if (v13 != v11)
      {
        int v25 = *v13++;
        int v7 = v25;
        unsigned int v23 = 128;
        goto LABEL_20;
      }
      unsigned int v23 = 0;
      uint64_t v9 = 3;
      int v13 = &a2[a3];
      ++v22;
    }
    if ((v24 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v27 = 0;
  if (v22)
  {
    int v28 = (v24 & 0x3F) + 1;
    unsigned int v29 = v8;
    while (1)
    {
      if (v29) {
        goto LABEL_27;
      }
      if (v13 == v11)
      {
        unsigned int v29 = 0;
        uint64_t v9 = 3;
        int v13 = &a2[a3];
        v27 *= 2;
        if (!--v28) {
          break;
        }
      }
      else
      {
        int v30 = *v13++;
        int v7 = v30;
        unsigned int v29 = 128;
LABEL_27:
        BOOL v31 = (v29 & v7) != 0;
        unsigned int v8 = v29 >> 1;
        v29 >>= 1;
        uint64_t v27 = (2 * v27) | v31;
        if (!--v28) {
          break;
        }
      }
    }
  }
  *(_DWORD *)(a5 + 4) = (v27 | (1 << v22)) - 1;
  uint64_t v32 = -1;
  unsigned int v33 = v8;
  while (2)
  {
    int v34 = v32;
    if (v33)
    {
LABEL_35:
      BOOL v36 = (v33 & v7) != 0;
      unsigned int v8 = v33 >> 1;
      v33 >>= 1;
      ++v32;
      if (v36) {
        break;
      }
    }
    else
    {
      if (v13 != v11)
      {
        int v35 = *v13++;
        int v7 = v35;
        unsigned int v33 = 128;
        goto LABEL_35;
      }
      unsigned int v33 = 0;
      uint64_t v9 = 3;
      int v13 = &a2[a3];
      ++v32;
    }
    if ((v34 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v37 = 0;
  if (v32)
  {
    int v38 = (v34 & 0x3F) + 1;
    unsigned int v39 = v8;
    while (1)
    {
      if (v39) {
        goto LABEL_42;
      }
      if (v13 == v11)
      {
        unsigned int v39 = 0;
        uint64_t v9 = 3;
        int v13 = &a2[a3];
        v37 *= 2;
        if (!--v38) {
          break;
        }
      }
      else
      {
        int v40 = *v13++;
        int v7 = v40;
        unsigned int v39 = 128;
LABEL_42:
        BOOL v41 = (v39 & v7) != 0;
        unsigned int v8 = v39 >> 1;
        v39 >>= 1;
        uint64_t v37 = (2 * v37) | v41;
        if (!--v38) {
          break;
        }
      }
    }
  }
  *(_DWORD *)(a5 + 8) = (v37 | (1 << v32)) - 1;
  if (!*(unsigned char *)(a4 + 72)) {
    goto LABEL_84;
  }
  uint64_t v42 = -1;
  unsigned int v43 = v8;
  while (2)
  {
    int v44 = v42;
    if (v43)
    {
LABEL_51:
      BOOL v46 = (v43 & v7) != 0;
      unsigned int v8 = v43 >> 1;
      v43 >>= 1;
      ++v42;
      if (v46) {
        break;
      }
    }
    else
    {
      if (v13 != v11)
      {
        int v45 = *v13++;
        int v7 = v45;
        unsigned int v43 = 128;
        goto LABEL_51;
      }
      unsigned int v43 = 0;
      uint64_t v9 = 3;
      int v13 = &a2[a3];
      ++v42;
    }
    if ((v44 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v47 = 0;
  if (v42)
  {
    int v48 = (v44 & 0x3F) + 1;
    unsigned int v49 = v8;
    while (1)
    {
      if (v49) {
        goto LABEL_58;
      }
      if (v13 == v11)
      {
        unsigned int v49 = 0;
        uint64_t v9 = 3;
        int v13 = &a2[a3];
        v47 *= 2;
        if (!--v48) {
          break;
        }
      }
      else
      {
        int v50 = *v13++;
        int v7 = v50;
        unsigned int v49 = 128;
LABEL_58:
        BOOL v51 = (v49 & v7) != 0;
        unsigned int v8 = v49 >> 1;
        v49 >>= 1;
        uint64_t v47 = (2 * v47) | v51;
        if (!--v48) {
          break;
        }
      }
    }
  }
  uint64_t v52 = (v47 | (1 << v42)) - 1;
  if (v52) {
    uint64_t v52 = ((v52 & 1) + v52) >> 1;
  }
  else {
    LODWORD(v52) = -(int)(((v52 & 1) + v52) >> 1);
  }
  *(_DWORD *)(a5 + 12) = v52;
  uint64_t v53 = -1;
  unsigned int v54 = v8;
  while (2)
  {
    int v55 = v53;
    if (v54)
    {
LABEL_69:
      BOOL v57 = (v54 & v7) != 0;
      unsigned int v8 = v54 >> 1;
      v54 >>= 1;
      ++v53;
      if (v57) {
        break;
      }
    }
    else
    {
      if (v13 != v11)
      {
        int v56 = *v13++;
        int v7 = v56;
        unsigned int v54 = 128;
        goto LABEL_69;
      }
      unsigned int v54 = 0;
      uint64_t v9 = 3;
      int v13 = &a2[a3];
      ++v53;
    }
    if ((v55 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v58 = 0;
  if (v53)
  {
    int v59 = (v55 & 0x3F) + 1;
    unsigned int v60 = v8;
    while (1)
    {
      if (v60) {
        goto LABEL_76;
      }
      if (v13 == v11)
      {
        unsigned int v60 = 0;
        uint64_t v9 = 3;
        int v13 = &a2[a3];
        v58 *= 2;
        if (!--v59) {
          break;
        }
      }
      else
      {
        int v61 = *v13++;
        int v7 = v61;
        unsigned int v60 = 128;
LABEL_76:
        BOOL v62 = (v60 & v7) != 0;
        unsigned int v8 = v60 >> 1;
        v60 >>= 1;
        uint64_t v58 = (2 * v58) | v62;
        if (!--v59) {
          break;
        }
      }
    }
  }
  uint64_t v63 = (v58 | (1 << v53)) - 1;
  if (v63) {
    uint64_t v63 = ((v63 & 1) + v63) >> 1;
  }
  else {
    LODWORD(v63) = -(int)(((v63 & 1) + v63) >> 1);
  }
  *(_DWORD *)(a5 + 16) = v63;
LABEL_84:
  if (v8)
  {
    if ((v8 & v7) == 0) {
      goto LABEL_144;
    }
LABEL_89:
    uint64_t v65 = *(unsigned int *)(a4 + 36);
    if ((v65 & 0x80000000) == 0)
    {
      unint64_t v66 = v65 + 1;
      uint64_t v67 = *(void *)(a5 + 24);
      uint64_t v68 = (uint64_t *)(a5 + 24);
      unint64_t v69 = (*(void *)(a5 + 32) - v67) >> 2;
      unsigned int v70 = a6;
      if (v66 <= v69)
      {
        if (v66 < v69) {
          *(void *)(a5 + 32) = v67 + 4 * v66;
        }
      }
      else
      {
        uint64_t v71 = a5;
        std::vector<int>::__append((std::vector<int> *)(a5 + 24), v66 - v69);
        a5 = v71;
      }
      unsigned int v72 = v8 >> 1;
      uint64_t v73 = *(void *)(a5 + 48);
      uint64_t v74 = (uint64_t *)(a5 + 48);
      unint64_t v75 = (*(void *)(a5 + 56) - v73) >> 2;
      if (v66 <= v75)
      {
        a6 = v70;
        if (v66 < v75) {
          *(void *)(a5 + 56) = v73 + 4 * v66;
        }
      }
      else
      {
        std::vector<int>::__append((std::vector<int> *)(a5 + 48), v66 - v75);
        uint64_t v73 = *v74;
        a6 = v70;
      }
      uint64_t v76 = 0;
      uint64_t v77 = *v68;
      while (1)
      {
        uint64_t v80 = 0;
        int v81 = 63;
        unsigned int v82 = v72;
        do
        {
          int v83 = v81;
          if (!v82)
          {
            if (v13 == v11)
            {
              unsigned int v82 = 0;
              uint64_t v9 = 3;
              int v13 = v11;
              uint64_t v86 = v80 + 1;
              goto LABEL_110;
            }
            int v84 = *v13++;
            int v7 = v84;
            unsigned int v82 = 128;
          }
          BOOL v85 = (v82 & v7) != 0;
          unsigned int v72 = v82 >> 1;
          v82 >>= 1;
          uint64_t v86 = v80 + 1;
          if (v85) {
            break;
          }
LABEL_110:
          int v81 = v83 + 1;
          BOOL v87 = v80 >= 0x3F;
          uint64_t v80 = v86;
        }
        while (!v87);
        if (v86 != 1)
        {
          uint64_t v88 = 0;
          int v101 = (v83 & 0x3F) + 1;
          unsigned int v102 = v72;
          while (1)
          {
            if (v102) {
              goto LABEL_138;
            }
            if (v13 == v11)
            {
              unsigned int v102 = 0;
              uint64_t v9 = 3;
              int v13 = v11;
              v88 *= 2;
              if (!--v101) {
                goto LABEL_116;
              }
            }
            else
            {
              int v103 = *v13++;
              int v7 = v103;
              unsigned int v102 = 128;
LABEL_138:
              BOOL v104 = (v102 & v7) != 0;
              unsigned int v72 = v102 >> 1;
              v102 >>= 1;
              uint64_t v88 = (2 * v88) | v104;
              if (!--v101) {
                goto LABEL_116;
              }
            }
          }
        }
        uint64_t v88 = 0;
LABEL_116:
        uint64_t v89 = 0;
        uint64_t v90 = (v88 | (1 << (v86 - 1))) - 1;
        if (v90) {
          uint64_t v90 = ((v90 & 1) + v90) >> 1;
        }
        else {
          LODWORD(v90) = -(int)(((v90 & 1) + v90) >> 1);
        }
        *(_DWORD *)(v77 + 4 * v76) = v90;
        int v91 = 63;
        unsigned int v92 = v72;
        while (2)
        {
          int v93 = v91;
          if (v92)
          {
LABEL_123:
            BOOL v95 = (v92 & v7) != 0;
            unsigned int v72 = v92 >> 1;
            v92 >>= 1;
            uint64_t v96 = v89 + 1;
            if (v95) {
              break;
            }
          }
          else
          {
            if (v13 != v11)
            {
              int v94 = *v13++;
              int v7 = v94;
              unsigned int v92 = 128;
              goto LABEL_123;
            }
            unsigned int v92 = 0;
            uint64_t v9 = 3;
            int v13 = v11;
            uint64_t v96 = v89 + 1;
          }
          int v91 = v93 + 1;
          BOOL v87 = v89 >= 0x3F;
          uint64_t v89 = v96;
          if (!v87) {
            continue;
          }
          break;
        }
        if (v96 != 1)
        {
          uint64_t v78 = 0;
          int v97 = (v93 & 0x3F) + 1;
          unsigned int v98 = v72;
          while (1)
          {
            if (v98) {
              goto LABEL_131;
            }
            if (v13 == v11)
            {
              unsigned int v98 = 0;
              uint64_t v9 = 3;
              int v13 = v11;
              v78 *= 2;
              if (!--v97) {
                goto LABEL_101;
              }
            }
            else
            {
              int v99 = *v13++;
              int v7 = v99;
              unsigned int v98 = 128;
LABEL_131:
              BOOL v100 = (v98 & v7) != 0;
              unsigned int v72 = v98 >> 1;
              v98 >>= 1;
              uint64_t v78 = (2 * v78) | v100;
              if (!--v97) {
                goto LABEL_101;
              }
            }
          }
        }
        uint64_t v78 = 0;
LABEL_101:
        uint64_t v79 = (v78 | (1 << (v96 - 1))) - 1;
        if (v79) {
          uint64_t v79 = ((v79 & 1) + v79) >> 1;
        }
        else {
          LODWORD(v79) = -(int)(((v79 & 1) + v79) >> 1);
        }
        *(_DWORD *)(v73 + 4 * v76++) = v79;
        if (v76 == v66) {
          goto LABEL_144;
        }
      }
    }
    return 3;
  }
  else
  {
    if (v13 == v11)
    {
      uint64_t v9 = 3;
      int v13 = &a2[a3];
    }
    else
    {
      int v64 = *v13++;
      int v7 = v64;
      unsigned int v8 = 128;
      if ((v64 & 0x80) != 0) {
        goto LABEL_89;
      }
    }
LABEL_144:
    if (a6) {
      *a6 = v13 - a2;
    }
  }
  return v9;
}

uint64_t gcl::gpcc::HlsIo::parseAbhIds(gcl::gpcc::HlsIo *this, const unsigned __int8 *a2, uint64_t a3, int *a4, int *a5, int *a6)
{
  int v6 = 0;
  unsigned int v7 = 0;
  uint64_t result = 0;
  unsigned int v9 = 0;
  unsigned int v10 = &a2[a3];
  uint64_t v11 = -1;
  do
  {
    int v12 = v11;
    if (!v9)
    {
      if (a2 == v10)
      {
        unsigned int v9 = 0;
        uint64_t result = 3;
        a2 = v10;
        ++v11;
        continue;
      }
      int v13 = *a2++;
      int v6 = v13;
      unsigned int v9 = 128;
    }
    BOOL v14 = (v9 & v6) != 0;
    unsigned int v7 = v9 >> 1;
    v9 >>= 1;
    ++v11;
    if (v14) {
      break;
    }
  }
  while ((v12 + 1) < 0x3F);
  uint64_t v15 = 0;
  if (v11)
  {
    int v16 = (v12 & 0x3F) + 1;
    unsigned int v17 = v7;
    while (1)
    {
      if (v17) {
        goto LABEL_12;
      }
      if (a2 == v10)
      {
        unsigned int v17 = 0;
        uint64_t result = 3;
        a2 = v10;
        v15 *= 2;
        if (!--v16) {
          break;
        }
      }
      else
      {
        int v18 = *a2++;
        int v6 = v18;
        unsigned int v17 = 128;
LABEL_12:
        BOOL v19 = (v17 & v6) != 0;
        unsigned int v7 = v17 >> 1;
        v17 >>= 1;
        uint64_t v15 = (2 * v15) | v19;
        if (!--v16) {
          break;
        }
      }
    }
  }
  *a6 = (v15 | (1 << v11)) - 1;
  uint64_t v20 = -1;
  unsigned int v21 = v7;
  while (2)
  {
    int v22 = v20;
    if (v21)
    {
LABEL_20:
      BOOL v24 = (v21 & v6) != 0;
      unsigned int v7 = v21 >> 1;
      v21 >>= 1;
      ++v20;
      if (v24) {
        break;
      }
    }
    else
    {
      if (a2 != v10)
      {
        int v23 = *a2++;
        int v6 = v23;
        unsigned int v21 = 128;
        goto LABEL_20;
      }
      unsigned int v21 = 0;
      uint64_t result = 3;
      a2 = v10;
      ++v20;
    }
    if ((v22 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v25 = 0;
  if (v20)
  {
    int v26 = (v22 & 0x3F) + 1;
    unsigned int v27 = v7;
    while (1)
    {
      if (v27) {
        goto LABEL_27;
      }
      if (a2 == v10)
      {
        unsigned int v27 = 0;
        uint64_t result = 3;
        a2 = v10;
        v25 *= 2;
        if (!--v26) {
          break;
        }
      }
      else
      {
        int v28 = *a2++;
        int v6 = v28;
        unsigned int v27 = 128;
LABEL_27:
        BOOL v29 = (v27 & v6) != 0;
        unsigned int v7 = v27 >> 1;
        v27 >>= 1;
        uint64_t v25 = (2 * v25) | v29;
        if (!--v26) {
          break;
        }
      }
    }
  }
  *a5 = (v25 | (1 << v20)) - 1;
  uint64_t v30 = -1;
  unsigned int v31 = v7;
  while (2)
  {
    int v32 = v30;
    if (v31)
    {
LABEL_35:
      BOOL v34 = (v31 & v6) != 0;
      unsigned int v7 = v31 >> 1;
      v31 >>= 1;
      ++v30;
      if (v34) {
        break;
      }
    }
    else
    {
      if (a2 != v10)
      {
        int v33 = *a2++;
        int v6 = v33;
        unsigned int v31 = 128;
        goto LABEL_35;
      }
      unsigned int v31 = 0;
      uint64_t result = 3;
      a2 = v10;
      ++v30;
    }
    if ((v32 + 1) < 0x3F) {
      continue;
    }
    break;
  }
  uint64_t v35 = 0;
  if (v30)
  {
    int v36 = (v32 & 0x3F) + 1;
    while (1)
    {
      if (v7) {
        goto LABEL_42;
      }
      if (a2 == v10)
      {
        unsigned int v7 = 0;
        uint64_t result = 3;
        a2 = v10;
        v35 *= 2;
        if (!--v36) {
          break;
        }
      }
      else
      {
        int v37 = *a2++;
        int v6 = v37;
        unsigned int v7 = 128;
LABEL_42:
        BOOL v38 = (v7 & v6) != 0;
        v7 >>= 1;
        uint64_t v35 = (2 * v35) | v38;
        if (!--v36) {
          break;
        }
      }
    }
  }
  *a4 = (v35 | (1 << v30)) - 1;
  return result;
}

void std::vector<long long>::__append(uint64_t a1, unint64_t a2)
{
  unsigned int v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      int v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    unsigned int v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v13 = operator new(8 * v12);
    }
    else
    {
      int v13 = 0;
    }
    BOOL v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    int v16 = &v13[8 * v12];
    bzero(v14, v15);
    unsigned int v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      int v6 = &v5[-v20];
      v14 -= v20;
      unsigned int v21 = &v13[8 * v9 - 16];
      int v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *unsigned int v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t gcl::gpcc::RawAttributeDecoder::decode(uint64_t a1, uint64_t a2, int a3, unsigned char *a4, int a5, int a6, int a7, unsigned __int8 *a8, uint64_t a9)
{
  LODWORD(v14) = a3;
  v29[0] = 0;
  v29[1] = 0;
  int v30 = 0;
  *(_OWORD *)unsigned int v31 = 0u;
  *(_OWORD *)__p = 0u;
  long long v33 = 0u;
  uint64_t v28 = 0;
  uint64_t v15 = gcl::gpcc::HlsIo::parseAsh((uint64_t)&v27, a8, a9, a2, (uint64_t)v29, &v28);
  if (!v15)
  {
    if (a9 - v28 < (unint64_t)((a5 * (int)v14 * a6 + 7) >> 3))
    {
      uint64_t v15 = 3;
      goto LABEL_19;
    }
    if ((int)v14 < 1 || a5 < 1)
    {
      uint64_t v15 = 0;
    }
    else
    {
      if (a6)
      {
        uint64_t v16 = 0;
        uint64_t v15 = 0;
        unsigned int v17 = 0;
        int v18 = 0;
        uint64_t v19 = &a8[v28];
        while (1)
        {
          uint64_t v20 = 0;
          do
          {
            uint64_t v21 = 0;
            int v22 = (((_BYTE)a6 - 1) & 0x3F) + 1;
            unsigned int v23 = v17;
            do
            {
              while (1)
              {
                if (v23) {
                  goto LABEL_13;
                }
                if (v19 == &a8[a9]) {
                  break;
                }
                int v24 = *v19++;
                int v18 = v24;
                unsigned int v23 = 128;
LABEL_13:
                BOOL v25 = (v23 & v18) != 0;
                unsigned int v17 = v23 >> 1;
                v23 >>= 1;
                uint64_t v21 = (2 * v21) | v25;
                if (!--v22) {
                  goto LABEL_10;
                }
              }
              unsigned int v23 = 0;
              uint64_t v15 = 3;
              uint64_t v19 = &a8[a9];
              v21 *= 2;
              --v22;
            }
            while (v22);
LABEL_10:
            a4[v16 * a7 + v20++] = v21;
          }
          while (v20 != a5);
          if (++v16 == v14) {
            goto LABEL_19;
          }
        }
      }
      uint64_t v14 = v14;
      uint64_t v15 = 0;
      do
      {
        bzero(a4, a5);
        a4 += a7;
        --v14;
      }
      while (v14);
    }
  }
LABEL_19:
  if (__p[1])
  {
    *(void **)&long long v33 = __p[1];
    operator delete(__p[1]);
  }
  if (v31[0])
  {
    v31[1] = v31[0];
    operator delete(v31[0]);
  }
  return v15;
}

void sub_18A43B8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v20 = a15;
    if (!a15) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v20 = a15;
    if (!a15) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

uint64_t gcl::gpcc::RawAttributeDecoder::decode(uint64_t a1, uint64_t a2, int a3, char *a4, int a5, int a6, int a7, unsigned __int8 *a8, uint64_t a9)
{
  LODWORD(v14) = a3;
  v30[0] = 0;
  v30[1] = 0;
  int v31 = 0;
  *(_OWORD *)int v32 = 0u;
  *(_OWORD *)__p = 0u;
  long long v34 = 0u;
  uint64_t v29 = 0;
  uint64_t v15 = gcl::gpcc::HlsIo::parseAsh((uint64_t)&v28, a8, a9, a2, (uint64_t)v30, &v29);
  if (!v15)
  {
    if (a9 - v29 < (unint64_t)((a5 * (int)v14 * a6 + 7) >> 3))
    {
      uint64_t v15 = 3;
      goto LABEL_19;
    }
    if ((int)v14 < 1 || a5 < 1)
    {
      uint64_t v15 = 0;
    }
    else
    {
      if (a6)
      {
        uint64_t v16 = 0;
        uint64_t v15 = 0;
        unsigned int v17 = 0;
        int v18 = 0;
        uint64_t v19 = &a8[v29];
        while (1)
        {
          uint64_t v20 = 0;
          do
          {
            uint64_t v21 = 0;
            int v22 = (((_BYTE)a6 - 1) & 0x3F) + 1;
            unsigned int v23 = v17;
            do
            {
              while (1)
              {
                if (v23) {
                  goto LABEL_13;
                }
                if (v19 == &a8[a9]) {
                  break;
                }
                int v24 = *v19++;
                int v18 = v24;
                unsigned int v23 = 128;
LABEL_13:
                BOOL v25 = (v23 & v18) != 0;
                unsigned int v17 = v23 >> 1;
                v23 >>= 1;
                uint64_t v21 = (2 * v21) | v25;
                if (!--v22) {
                  goto LABEL_10;
                }
              }
              unsigned int v23 = 0;
              uint64_t v15 = 3;
              uint64_t v19 = &a8[a9];
              v21 *= 2;
              --v22;
            }
            while (v22);
LABEL_10:
            *(_WORD *)&a4[2 * v20++ + v16 * a7] = v21;
          }
          while (v20 != a5);
          if (++v16 == v14) {
            goto LABEL_19;
          }
        }
      }
      size_t v27 = 2 * a5;
      uint64_t v14 = v14;
      uint64_t v15 = 0;
      do
      {
        bzero(a4, v27);
        a4 += a7;
        --v14;
      }
      while (v14);
    }
  }
LABEL_19:
  if (__p[1])
  {
    *(void **)&long long v34 = __p[1];
    operator delete(__p[1]);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  return v15;
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  size_t v27;
  char v28;
  uint64_t v29;
  void v30[2];
  int v31;
  void *v32[2];
  void *__p[2];
  long long v34;

  LODWORD(v14) = a3;
  v30[0] = 0;
  v30[1] = 0;
  int v31 = 0;
  *(_OWORD *)int v32 = 0u;
  *(_OWORD *)__p = 0u;
  long long v34 = 0u;
  uint64_t v29 = 0;
  uint64_t v15 = gcl::gpcc::HlsIo::parseAsh((uint64_t)&v28, a8, a9, a2, (uint64_t)v30, &v29);
  if (!v15)
  {
    if (a9 - v29 < (unint64_t)((a5 * (int)v14 * a6 + 7) >> 3))
    {
      uint64_t v15 = 3;
      goto LABEL_19;
    }
    if ((int)v14 < 1 || a5 < 1)
    {
      uint64_t v15 = 0;
    }
    else
    {
      if (a6)
      {
        uint64_t v16 = 0;
        uint64_t v15 = 0;
        unsigned int v17 = 0;
        int v18 = 0;
        uint64_t v19 = &a8[v29];
        while (1)
        {
          uint64_t v20 = 0;
          do
          {
            uint64_t v21 = 0;
            int v22 = (((_BYTE)a6 - 1) & 0x3F) + 1;
            unsigned int v23 = v17;
            do
            {
              while (1)
              {
                if (v23) {
                  goto LABEL_13;
                }
                if (v19 == &a8[a9]) {
                  break;
                }
                int v24 = *v19++;
                int v18 = v24;
                unsigned int v23 = 128;
LABEL_13:
                BOOL v25 = (v23 & v18) != 0;
                unsigned int v17 = v23 >> 1;
                v23 >>= 1;
                uint64_t v21 = (2 * v21) | v25;
                if (!--v22) {
                  goto LABEL_10;
                }
              }
              unsigned int v23 = 0;
              uint64_t v15 = 3;
              uint64_t v19 = &a8[a9];
              v21 *= 2;
              --v22;
            }
            while (v22);
LABEL_10:
            *(_DWORD *)&a4[4 * v20++ + v16 * a7] = v21;
          }
          while (v20 != a5);
          if (++v16 == v14) {
            goto LABEL_19;
          }
        }
      }
      size_t v27 = 4 * a5;
      uint64_t v14 = v14;
      uint64_t v15 = 0;
      do
      {
        bzero(a4, v27);
        a4 += a7;
        --v14;
      }
      while (v14);
    }
  }
LABEL_19:
  if (__p[1])
  {
    *(void **)&long long v34 = __p[1];
    operator delete(__p[1]);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  return v15;
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  size_t v27;
  char v28;
  uint64_t v29;
  void v30[2];
  int v31;
  void *v32[2];
  void *__p[2];
  long long v34;

  LODWORD(v14) = a3;
  v30[0] = 0;
  v30[1] = 0;
  int v31 = 0;
  *(_OWORD *)int v32 = 0u;
  *(_OWORD *)__p = 0u;
  long long v34 = 0u;
  uint64_t v29 = 0;
  uint64_t v15 = gcl::gpcc::HlsIo::parseAsh((uint64_t)&v28, a8, a9, a2, (uint64_t)v30, &v29);
  if (!v15)
  {
    if (a9 - v29 < (unint64_t)((a5 * (int)v14 * a6 + 7) >> 3))
    {
      uint64_t v15 = 3;
      goto LABEL_19;
    }
    if ((int)v14 < 1 || a5 < 1)
    {
      uint64_t v15 = 0;
    }
    else
    {
      if (a6)
      {
        uint64_t v16 = 0;
        uint64_t v15 = 0;
        unsigned int v17 = 0;
        int v18 = 0;
        uint64_t v19 = &a8[v29];
        while (1)
        {
          uint64_t v20 = 0;
          do
          {
            uint64_t v21 = 0;
            int v22 = (((_BYTE)a6 - 1) & 0x3F) + 1;
            unsigned int v23 = v17;
            do
            {
              while (1)
              {
                if (v23) {
                  goto LABEL_13;
                }
                if (v19 == &a8[a9]) {
                  break;
                }
                int v24 = *v19++;
                int v18 = v24;
                unsigned int v23 = 128;
LABEL_13:
                BOOL v25 = (v23 & v18) != 0;
                unsigned int v17 = v23 >> 1;
                v23 >>= 1;
                uint64_t v21 = (2 * v21) | v25;
                if (!--v22) {
                  goto LABEL_10;
                }
              }
              unsigned int v23 = 0;
              uint64_t v15 = 3;
              uint64_t v19 = &a8[a9];
              v21 *= 2;
              --v22;
            }
            while (v22);
LABEL_10:
            *(void *)&a4[8 * v20++ + v16 * a7] = v21;
          }
          while (v20 != a5);
          if (++v16 == v14) {
            goto LABEL_19;
          }
        }
      }
      size_t v27 = 8 * a5;
      uint64_t v14 = v14;
      uint64_t v15 = 0;
      do
      {
        bzero(a4, v27);
        a4 += a7;
        --v14;
      }
      while (v14);
    }
  }
LABEL_19:
  if (__p[1])
  {
    *(void **)&long long v34 = __p[1];
    operator delete(__p[1]);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  return v15;
}

void sub_18A43BAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v20 = a15;
    if (!a15) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v20 = a15;
    if (!a15) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void sub_18A43BD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v20 = a15;
    if (!a15) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v20 = a15;
    if (!a15) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void sub_18A43BF3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v20 = a15;
    if (!a15) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v20 = a15;
    if (!a15) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

int32x4_t *gcl::tmesh::ComputeGeneralizedParallelogramPrediction(int32x4_t *result, int32x4_t *a2, int32x4_t *a3, int a4, int *a5, int *a6, int *a7, int *a8, int32x4_t *a9)
{
  uint64_t v9 = a9;
  uint64_t v10 = *a7;
  uint64_t v11 = a7[1];
  uint64_t v12 = *a5 - v10;
  uint64_t v13 = a5[1] - v11;
  uint64_t v14 = a7[2];
  uint64_t v15 = a5[2] - v14;
  uint64_t v16 = *a6 - v10;
  uint64_t v17 = a6[1] - v11;
  uint64_t v18 = a6[2] - v14;
  uint64_t v19 = *a8 - v10;
  uint64_t v20 = a8[1] - v11;
  uint64_t v21 = a8[2] - v14;
  unint64_t v22 = v12 * v12 + v13 * v13 + v15 * v15;
  unint64_t v23 = v16 * v16 + v17 * v17 + v18 * v18;
  if (v22 >> 30) {
    BOOL v24 = 0;
  }
  else {
    BOOL v24 = v23 >> 30 == 0;
  }
  if (v24 && (unint64_t)(v19 * v19 + v20 * v20 + v21 * v21) >> 30 == 0)
  {
    uint64_t v38 = v16 * v12 + v17 * v13 + v18 * v15;
    unint64_t v39 = v23 * v22 - v38 * v38;
    if (!v39)
    {
      if (a4 < 1) {
        return result;
      }
      if (a4 >= 8)
      {
        uint64_t v44 = 0;
        if ((unint64_t)((char *)a9 - (char *)result) >= 0x20
          && (unint64_t)((char *)a9 - (char *)a2) >= 0x20
          && (unint64_t)((char *)a9 - (char *)a3) >= 0x20)
        {
          uint64_t v44 = a4 & 0x7FFFFFF8;
          unint64_t v69 = result + 1;
          unsigned int v70 = a9 + 1;
          uint64_t v71 = a2 + 1;
          unsigned int v72 = a3 + 1;
          uint64_t v73 = a4 & 0xFFFFFFF8;
          do
          {
            int32x4_t v74 = vsubq_s32(vaddq_s32(v71[-1], v69[-1]), v72[-1]);
            int32x4_t v75 = vsubq_s32(vaddq_s32(*v71, *v69), *v72);
            v69 += 2;
            v70[-1] = v74;
            *unsigned int v70 = v75;
            v70 += 2;
            v71 += 2;
            v72 += 2;
            v73 -= 8;
          }
          while (v73);
          if (v44 == a4) {
            return result;
          }
        }
      }
      else
      {
        uint64_t v44 = 0;
      }
      uint64_t v76 = a4 - v44;
      uint64_t v77 = v44;
      uint64_t v78 = &a9->i32[v44];
      uint64_t v79 = &a3->i32[v44];
      uint64_t v80 = &a2->i32[v77];
      int v81 = &result->i32[v77];
      do
      {
        int v83 = *v81++;
        int v82 = v83;
        int v85 = *v80++;
        int v84 = v85;
        int v86 = *v79++;
        *v78++ = v84 + v82 - v86;
        --v76;
      }
      while (v76);
      return result;
    }
    uint64_t v40 = v19 * v12 + v20 * v13 + v21 * v15;
    uint64_t v41 = v19 * v16 + v20 * v17 + v21 * v18;
    if (v39 >= 0x80)
    {
      char v52 = __clz(v39);
      char v53 = 57 - v52;
      uint64_t v54 = 1 << (56 - v52);
      unint64_t v39 = (uint64_t)(v54 + v39) >> v53;
      uint64_t v55 = v40 * v23 - v41 * v38;
      if (v55 < 0) {
        uint64_t v42 = -(uint64_t)((unint64_t)(v54 - v55) >> v53);
      }
      else {
        uint64_t v42 = (unint64_t)(v54 + v55) >> v53;
      }
      if (v42 >= 0x3FFFFFFFFFFFLL) {
        uint64_t v42 = 0x3FFFFFFFFFFFLL;
      }
      if (v42 <= (uint64_t)0xFFFFC00000000001) {
        uint64_t v42 = 0xFFFFC00000000001;
      }
      uint64_t v56 = v41 * v22 - v40 * v38;
      if (v56 < 0) {
        uint64_t v43 = -(uint64_t)((unint64_t)(v54 - v56) >> v53);
      }
      else {
        uint64_t v43 = (unint64_t)(v54 + v56) >> v53;
      }
    }
    else
    {
      uint64_t v42 = v40 * v23 - v41 * v38;
      if (v42 >= 0x3FFFFFFFFFFFLL) {
        uint64_t v42 = 0x3FFFFFFFFFFFLL;
      }
      if (v42 <= (uint64_t)0xFFFFC00000000001) {
        uint64_t v42 = 0xFFFFC00000000001;
      }
      uint64_t v43 = v41 * v22 - v40 * v38;
    }
    if (v43 >= 0x3FFFFFFFFFFFLL) {
      uint64_t v43 = 0x3FFFFFFFFFFFLL;
    }
    unint64_t v57 = 0xFFFFC00000000001;
    if (v43 > (uint64_t)0xFFFFC00000000001) {
      unint64_t v57 = v43;
    }
    uint64_t v58 = gcl::tmesh::approximateInverseLut[v39 - 1];
    if (v42 * v58 >= 0x3FFFFFFF) {
      uint64_t v59 = 0x3FFFFFFFLL;
    }
    else {
      uint64_t v59 = v42 * v58;
    }
    if (v59 <= -1073741823) {
      uint64_t v59 = -1073741823;
    }
    uint64_t v60 = v57 * v58;
    if (v60 >= 0x3FFFFFFF) {
      uint64_t v60 = 0x3FFFFFFFLL;
    }
    if (v60 <= -1073741823) {
      uint64_t v60 = -1073741823;
    }
    if (a4 >= 1)
    {
      uint64_t v61 = a4;
      do
      {
        uint64_t v63 = result->i32[0];
        uint64_t result = (int32x4_t *)((char *)result + 4);
        uint64_t v64 = v59 * v63;
        uint64_t v65 = a2->i32[0];
        a2 = (int32x4_t *)((char *)a2 + 4);
        uint64_t v66 = v60 * v65 + v64;
        uint64_t v67 = a3->i32[0];
        a3 = (int32x4_t *)((char *)a3 + 4);
        uint64_t v68 = v66 + (0x10000 - (v59 + v60)) * v67;
        if (v68 < 0) {
          int64_t v62 = -(uint64_t)((unint64_t)(0x8000 - v68) >> 16);
        }
        else {
          int64_t v62 = (unint64_t)(v68 + 0x8000) >> 16;
        }
        if (v62 >= 0x3FFFFFFF) {
          int64_t v62 = 0x3FFFFFFFLL;
        }
        if (v62 <= -1073741823) {
          LODWORD(v62) = -1073741823;
        }
        v9->i32[0] = v62;
        uint64_t v9 = (int32x4_t *)((char *)v9 + 4);
        --v61;
      }
      while (v61);
    }
  }
  else
  {
    if (a4 < 1) {
      return result;
    }
    if (a4 < 8)
    {
      uint64_t v26 = 0;
LABEL_11:
      uint64_t v27 = a4 - v26;
      uint64_t v28 = v26;
      uint64_t v29 = &a9->i32[v26];
      int v30 = &a3->i32[v26];
      int v31 = &a2->i32[v28];
      int v32 = &result->i32[v28];
      do
      {
        int v34 = *v32++;
        int v33 = v34;
        int v36 = *v31++;
        int v35 = v36;
        int v37 = *v30++;
        *v29++ = v35 + v33 - v37;
        --v27;
      }
      while (v27);
      return result;
    }
    uint64_t v26 = 0;
    if ((unint64_t)((char *)a9 - (char *)result) < 0x20) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)a9 - (char *)a2) < 0x20) {
      goto LABEL_11;
    }
    if ((unint64_t)((char *)a9 - (char *)a3) < 0x20) {
      goto LABEL_11;
    }
    uint64_t v26 = a4 & 0xFFFFFFF8;
    int v45 = result + 1;
    BOOL v46 = a9 + 1;
    uint64_t v47 = a2 + 1;
    int v48 = a3 + 1;
    uint64_t v49 = v26;
    do
    {
      int32x4_t v50 = vsubq_s32(vaddq_s32(v47[-1], v45[-1]), v48[-1]);
      int32x4_t v51 = vsubq_s32(vaddq_s32(*v47, *v45), *v48);
      v45 += 2;
      v46[-1] = v50;
      *BOOL v46 = v51;
      v46 += 2;
      v47 += 2;
      v48 += 2;
      v49 -= 8;
    }
    while (v49);
    if (v26 != a4) {
      goto LABEL_11;
    }
  }
  return result;
}

int *gcl::tmesh::ComputeTexCoordinatesPrediction(int *result, int *a2, _DWORD *a3, _DWORD *a4, int *a5, int a6, int *a7)
{
  int v7 = a4[1];
  int v8 = a3[1];
  int v9 = a4[2];
  int v10 = a3[2];
  unint64_t v11 = (v7 - v8) * (uint64_t)(v7 - v8) + (*a4 - *a3) * (uint64_t)(*a4 - *a3) + (v9 - v10) * (uint64_t)(v9 - v10);
  int v12 = *a5;
  int v13 = a5[1];
  int v14 = a5[2];
  unint64_t v15 = (v13 - v8) * (uint64_t)(v13 - v8) + (v12 - *a3) * (uint64_t)(v12 - *a3) + (v14 - v10) * (uint64_t)(v14 - v10);
  unint64_t v16 = (v13 - v7) * (uint64_t)(v13 - v7) + (v12 - *a4) * (uint64_t)(v12 - *a4) + (v14 - v9) * (uint64_t)(v14 - v9);
  if (v11 >> 28) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = v15 >> 28 == 0;
  }
  if (!v17 || v16 >> 28 != 0 || v11 == 0)
  {
    int v20 = *a2 + *result;
    if (v20 < 0 != __OFADD__(*a2, *result)) {
      ++v20;
    }
    *a7 = v20 >> 1;
    int v21 = result[1];
    int v22 = a2[1];
    BOOL v23 = __OFADD__(v22, v21);
    int v24 = v22 + v21;
    if (v24 < 0 != v23) {
      ++v24;
    }
    a7[1] = v24 >> 1;
  }
  else
  {
    char v25 = __clz(v11);
    char v26 = 57 - v25;
    uint64_t v27 = 1 << (56 - v25);
    unint64_t v28 = (v27 + v11) >> v26;
    unint64_t v29 = (v27 + v15) >> v26;
    unint64_t v30 = (v27 + v16) >> v26;
    if (v11 >= 0x80)
    {
      unint64_t v16 = v30;
      unint64_t v15 = v29;
      unint64_t v11 = v28;
    }
    uint64_t v31 = gcl::tmesh::approximateInverseLut[v11 - 1];
    uint64_t v32 = (v15 - v16) * v31;
    uint64_t v33 = 1073676288;
    if (v32 < 1073676288) {
      uint64_t v33 = v32;
    }
    uint64_t v34 = v33 + 0x10000;
    BOOL v35 = v32 < -1073807360;
    uint64_t v36 = -1073741824;
    if (!v35) {
      uint64_t v36 = v34;
    }
    uint64_t v37 = ((v15 * v31) << 18) - v36 * v36;
    if (v37 >= 0xFFFFFFFFLL) {
      uint64_t v37 = 0xFFFFFFFFLL;
    }
    LODWORD(v37) = v37 & ~(v37 >> 63);
    uint64_t v38 = *result;
    uint64_t v39 = result[1];
    uint64_t v40 = *a2 - v38;
    uint64_t v41 = a2[1] - v39;
    unsigned int v42 = __clz(v37);
    if (v37 >= 2) {
      uint64_t v37 = ((v37 >> ((32 - v42) >> 1)) + (1 << ((32 - v42) >> 1))) >> 1;
    }
    else {
      uint64_t v37 = v37;
    }
    uint64_t v43 = v37 * *((int *)&qword_18A628CB8 + a6);
    uint64_t v44 = v36 * v40 + v43 * v41;
    if (v44 >= 0) {
      unint64_t v45 = (unint64_t)(v44 + 0x10000) >> 17;
    }
    else {
      unint64_t v45 = -(uint64_t)((unint64_t)(0x10000 - v44) >> 17);
    }
    uint64_t v46 = v45 + v38;
    uint64_t v47 = v36 * v41 - v43 * v40;
    if (v47 >= 0) {
      unint64_t v48 = (unint64_t)(v47 + 0x10000) >> 17;
    }
    else {
      unint64_t v48 = -(uint64_t)((unint64_t)(0x10000 - v47) >> 17);
    }
    uint64_t v49 = v48 + v39;
    if (v46 >= 0x3FFFFFFF) {
      uint64_t v50 = 0x3FFFFFFFLL;
    }
    else {
      uint64_t v50 = v46;
    }
    if (v50 <= -1073741823) {
      LODWORD(v50) = -1073741823;
    }
    if (v49 >= 0x3FFFFFFF) {
      uint64_t v49 = 0x3FFFFFFFLL;
    }
    if (v49 <= -1073741823) {
      LODWORD(v49) = -1073741823;
    }
    *a7 = v50;
    a7[1] = v49;
  }
  return result;
}

unint64_t gcl::tmesh::ComputeTexCoordinatesPrediction(unint64_t result, int *a2, int *a3, _DWORD *a4, _DWORD *a5, int *a6, int *a7)
{
  int v7 = a5[1];
  int v8 = a4[1];
  int v9 = a5[2];
  int v10 = a4[2];
  unint64_t v11 = (v7 - v8) * (uint64_t)(v7 - v8) + (*a5 - *a4) * (uint64_t)(*a5 - *a4) + (v9 - v10) * (uint64_t)(v9 - v10);
  int v12 = *a6;
  int v13 = a6[1];
  int v14 = a6[2];
  unint64_t v15 = (v13 - v8) * (uint64_t)(v13 - v8) + (v12 - *a4) * (uint64_t)(v12 - *a4) + (v14 - v10) * (uint64_t)(v14 - v10);
  unint64_t v16 = (v13 - v7) * (uint64_t)(v13 - v7) + (v12 - *a5) * (uint64_t)(v12 - *a5) + (v14 - v9) * (uint64_t)(v14 - v9);
  if (v11 >> 28) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = v15 >> 28 == 0;
  }
  if (!v17 || v16 >> 28 != 0 || v11 == 0)
  {
    int v20 = *a2 + *(_DWORD *)result;
    if (v20 < 0 != __OFADD__(*a2, *(_DWORD *)result)) {
      ++v20;
    }
    *a7 = v20 >> 1;
    int v21 = *(_DWORD *)(result + 4);
    int v22 = a2[1];
    BOOL v23 = __OFADD__(v22, v21);
    int v24 = v22 + v21;
    if (v24 < 0 != v23) {
      ++v24;
    }
    a7[1] = v24 >> 1;
  }
  else
  {
    char v25 = __clz(v11);
    char v26 = 57 - v25;
    uint64_t v27 = 1 << (56 - v25);
    unint64_t v28 = (v27 + v11) >> v26;
    unint64_t v29 = (v27 + v15) >> v26;
    unint64_t v30 = (v27 + v16) >> v26;
    if (v11 >= 0x80)
    {
      unint64_t v16 = v30;
      unint64_t v15 = v29;
      unint64_t v11 = v28;
    }
    uint64_t v31 = gcl::tmesh::approximateInverseLut[v11 - 1];
    uint64_t v32 = (v15 - v16) * v31;
    uint64_t v33 = 1073676288;
    if (v32 < 1073676288) {
      uint64_t v33 = v32;
    }
    uint64_t v34 = v33 + 0x10000;
    BOOL v35 = v32 < -1073807360;
    uint64_t v36 = -1073741824;
    if (!v35) {
      uint64_t v36 = v34;
    }
    uint64_t v37 = ((v15 * v31) << 18) - v36 * v36;
    if (v37 >= 0xFFFFFFFFLL) {
      uint64_t v37 = 0xFFFFFFFFLL;
    }
    LODWORD(v37) = v37 & ~(v37 >> 63);
    uint64_t v38 = *(int *)result;
    uint64_t v39 = *(int *)(result + 4);
    uint64_t v40 = *a2 - v38;
    uint64_t v41 = a2[1] - v39;
    unsigned int v42 = (32 - __clz(v37)) >> 1;
    uint64_t result = v37 >> v42;
    if (v37 >= 2) {
      uint64_t v37 = (result + (1 << v42)) >> 1;
    }
    else {
      uint64_t v37 = v37;
    }
    if ((v39 - a3[1]) * v40 < (v38 - *a3) * v41) {
      uint64_t v37 = -v37;
    }
    uint64_t v43 = v36 * v40 - v37 * v41;
    if (v43 >= 0) {
      unint64_t v44 = (unint64_t)(v43 + 0x10000) >> 17;
    }
    else {
      unint64_t v44 = -(uint64_t)((unint64_t)(0x10000 - v43) >> 17);
    }
    uint64_t v45 = v44 + v38;
    uint64_t v46 = v36 * v41 + v37 * v40;
    if (v46 >= 0) {
      unint64_t v47 = (unint64_t)(v46 + 0x10000) >> 17;
    }
    else {
      unint64_t v47 = -(uint64_t)((unint64_t)(0x10000 - v46) >> 17);
    }
    uint64_t v48 = v47 + v39;
    if (v45 >= 0x3FFFFFFF) {
      uint64_t v49 = 0x3FFFFFFFLL;
    }
    else {
      uint64_t v49 = v45;
    }
    if (v49 <= -1073741823) {
      LODWORD(v49) = -1073741823;
    }
    if (v48 >= 0x3FFFFFFF) {
      uint64_t v48 = 0x3FFFFFFFLL;
    }
    if (v48 <= -1073741823) {
      LODWORD(v48) = -1073741823;
    }
    *a7 = v49;
    a7[1] = v48;
  }
  return result;
}

uint64_t mgcl::ints::IntCompressor<unsigned char>::estimateMaxCompressedSize(uint64_t a1, uint64_t a2)
{
  return 16 * a2 + 1024;
}

uint64_t mgcl::ints::IntCompressor<unsigned char>::compress(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v38 = a3;
  uint64_t v39 = a2;
  uint64_t v36 = a5;
  uint64_t v37 = a4;
  uint64_t v34 = a7;
  BOOL v35 = a6;
  unsigned int v33 = 0;
  *a6 = -1;
  a6[3] = a6[2];
  if (!a3)
  {
    uint64_t v9 = 0;
    *a6 = 0;
    return v9;
  }
  if (a3 == 1)
  {
    int v7 = a2;
    int v8 = a2;
  }
  else
  {
    int v8 = a2 + 1;
    unsigned int v10 = a2[1];
    unsigned int v11 = *a2;
    if (v10 >= v11) {
      int v7 = a2;
    }
    else {
      int v7 = a2 + 1;
    }
    if (v10 < v11) {
      int v8 = a2;
    }
    if (a3 != 2)
    {
      int v12 = a2 + 2;
      if (v10 <= v11) {
        LOBYTE(v13) = *a2;
      }
      else {
        LOBYTE(v13) = a2[1];
      }
      if (v10 < v11) {
        LOBYTE(v11) = a2[1];
      }
      uint64_t v14 = a3 - 3;
      while (v14)
      {
        unsigned int v16 = v12[1];
        unsigned int v17 = *v12;
        if (v16 >= v17)
        {
          if (v17 < v11)
          {
            LOBYTE(v11) = *v12;
            int v7 = v12;
          }
          BOOL v15 = v16 >= v13;
          if (v16 > v13) {
            LOBYTE(v13) = v12[1];
          }
          if (v15) {
            int v8 = v12 + 1;
          }
          v12 += 2;
          v14 -= 2;
          if (v14 == -1) {
            goto LABEL_39;
          }
        }
        else
        {
          unsigned int v11 = *v7;
          if (v16 < v11)
          {
            LOBYTE(v11) = v12[1];
            int v7 = v12 + 1;
          }
          unsigned int v13 = *v8;
          BOOL v18 = v17 >= v13;
          if (v17 > v13) {
            LOBYTE(v13) = *v12;
          }
          if (v18) {
            int v8 = v12;
          }
          v12 += 2;
          v14 -= 2;
          if (v14 == -1) {
            goto LABEL_39;
          }
        }
      }
      unsigned int v19 = *v12;
      if (v19 < *v7) {
        goto LABEL_40;
      }
      if (v19 >= *v8) {
        int v8 = v12;
      }
    }
  }
LABEL_39:
  unsigned int v19 = *v7;
LABEL_40:
  if (v19 >= 2)
  {
    unint64_t v21 = v19;
    unsigned int v20 = 1;
    do
    {
      ++v20;
      BOOL v22 = v21 > 3;
      v21 >>= 1;
    }
    while (v22);
  }
  else
  {
    unsigned int v20 = 1;
  }
  unint64_t v23 = *v8;
  unsigned int v24 = 1;
  if (v23 >= 2)
  {
    do
    {
      ++v24;
      BOOL v22 = v23 > 3;
      v23 >>= 1;
    }
    while (v22);
  }
  if (v20 <= v24) {
    unint64_t v25 = v24;
  }
  else {
    unint64_t v25 = v20;
  }
  __p = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  v28[0] = &v33;
  v28[1] = &v39;
  v28[2] = &v38;
  v28[3] = &v34;
  v28[4] = a1;
  v28[5] = &v29;
  v28[6] = &v35;
  v28[7] = &v36;
  v28[8] = &v37;
  if ((a7 & 0x100) != 0)
  {
    __b[0] = v25;
    mgcl::ints::IntCompressor<unsigned char>::compress(unsigned char const*,unsigned long,int const*,unsigned long,unsigned char *,unsigned long,mgcl::ints::BlobInfo *,unsigned long long)::{lambda(int const*,unsigned long,mgcl::ints::Tabulation)#1}::operator()((uint64_t)v28, __b, 1uLL, 0);
    LOWORD(a7) = v34;
  }
  if ((a7 & 0x400) != 0 && v25 <= 0xF)
  {
    memset_pattern16(__b, &unk_18A6434C0, 4 * v25);
    mgcl::ints::IntCompressor<unsigned char>::compress(unsigned char const*,unsigned long,int const*,unsigned long,unsigned char *,unsigned long,mgcl::ints::BlobInfo *,unsigned long long)::{lambda(int const*,unsigned long,mgcl::ints::Tabulation)#1}::operator()((uint64_t)v28, __b, v25, 2);
  }
  unsigned int v26 = v33;
  if (!v33) {
    unsigned int v26 = 6;
  }
  if (*v35 == -1) {
    uint64_t v9 = v26;
  }
  else {
    uint64_t v9 = 0;
  }
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  return v9;
}

void sub_18A43CA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mgcl::ints::IntCompressor<unsigned char>::compress(unsigned char const*,unsigned long,int const*,unsigned long,unsigned char *,unsigned long,mgcl::ints::BlobInfo *,unsigned long long)::{lambda(int const*,unsigned long,mgcl::ints::Tabulation)#1}::operator()(uint64_t a1, int *a2, unint64_t a3, int a4)
{
  v489 = **(unsigned __int8 ***)(a1 + 8);
  uint64_t v7 = **(void **)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = **(void **)(a1 + 24);
  unsigned int v11 = (const void **)(v8 + 96);
  unsigned int v10 = *(char **)(v8 + 96);
  v471 = *(void **)(a1 + 40);
  int v12 = *(char **)(v8 + 104);
  if (v12 != v10)
  {
    *(void *)(v8 + 104) = v10;
    int v12 = v10;
  }
  uint64_t v495 = 0;
  uint64_t v496 = 0;
  uint64_t v497 = v8 + 96;
  LOBYTE(__src) = a3;
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((uint64_t)v11, v12, (char *)&__src, (char *)&__src + 1, 1);
  *(void *)v488 = v9;
  uint64_t v492 = v7;
  HIDWORD(v467) = a4;
  uint64_t v469 = a1;
  unint64_t v15 = 0;
  if (a3)
  {
    unsigned int v16 = a2;
    unint64_t v17 = a3;
    do
    {
      int v18 = *v16++;
      LOBYTE(__src) = v18;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((uint64_t)v11, *(char **)(v8 + 104), (char *)&__src, (char *)&__src + 1, 1);
      v15 += v18;
      --v17;
    }
    while (v17);
  }
  uint64_t v19 = v471[2];
  unsigned int v20 = v471 + 2;
  unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v471[3] - v19) >> 4);
  if (a3 <= v21)
  {
    BOOL v22 = v489;
    unint64_t v23 = v492;
    if (a3 < v21) {
      v471[3] = v19 + 48 * a3;
    }
    if (!a3)
    {
LABEL_409:
      int v458 = 0;
      void *v471 = *(void *)(v8 + 104) - *(void *)(v8 + 96);
      uint64_t v459 = v496;
      if (v496) {
        goto LABEL_415;
      }
      goto LABEL_418;
    }
  }
  else
  {
    std::vector<mgcl::ints::ColumnInfo>::__append((char **)v471 + 2, a3 - v21);
    BOOL v22 = v489;
    unint64_t v23 = v492;
  }
  uint64_t v24 = 0;
  v484 = (uint64_t *)(v8 + 24);
  v475 = (uint64_t *)(v8 + 48);
  v476 = (gcl::ArithmeticEncoder ****)(v8 + 120);
  unint64_t v482 = 4 * v23;
  v480 = (char **)(v8 + 72);
  unint64_t v478 = 8 * v23;
  unint64_t v477 = 8 * v23 + 128;
  v474 = &v22[v23];
  unint64_t v470 = v23 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v472 = v23 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v473 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v468 = -(uint64_t)(v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v487 = v8;
  unint64_t v479 = a3;
  while (1)
  {
    uint64_t v25 = LOBYTE(a2[v24]);
    uint64_t v485 = *v20;
    uint64_t v486 = v24;
    uint64_t v26 = *v20 + 48 * v24;
    v15 -= v25;
    *(unsigned char *)uint64_t v26 = 0;
    *(void *)(v26 + 8) = -1;
    *(void *)(v26 + 16) = 0;
    *(void *)(v26 + 24) = 0;
    *(void *)(v26 + 32) = 0;
    *(_DWORD *)(v26 + 40) = 0;
    if (!v23)
    {
      unsigned int v38 = 1;
      unint64_t v493 = -1;
      unint64_t v491 = v15;
      uint64_t v490 = v26;
      uint64_t v494 = v25;
      if ((v9 & 1) == 0) {
        goto LABEL_62;
      }
LABEL_38:
      if (v25 <= 1)
      {
        uint64_t v41 = *(mgcl::muid **)v8;
        uint64_t v40 = *(mgcl::muid **)(v8 + 8);
        unint64_t v42 = (unint64_t)v40 - *(void *)v8;
        unint64_t v43 = v23 - v42;
        if (v23 <= v42)
        {
          if (v23 < v42) {
            *(void *)(v8 + 8) = (char *)v41 + v23;
          }
          uint64_t v50 = *(void *)v488;
LABEL_102:
          uint64_t v64 = v494;
          if (!v23) {
            goto LABEL_115;
          }
          goto LABEL_103;
        }
        uint64_t v44 = *(void *)(v8 + 16);
        if (v44 - (uint64_t)v40 >= v43)
        {
          bzero(*(void **)(v8 + 8), v23 - v42);
          *(void *)(v8 + 8) = (char *)v40 + v43;
          uint64_t v41 = *(mgcl::muid **)v8;
          uint64_t v50 = *(void *)v488;
          uint64_t v64 = v494;
LABEL_103:
          if (v64)
          {
            unint64_t v86 = 0;
            unint64_t v87 = ~(-1 << v64);
            if (v23 < 8)
            {
              uint64_t v88 = v489;
            }
            else
            {
              uint64_t v88 = v489;
              if ((unint64_t)(v41 - (mgcl::muid *)v489) >= 0x10)
              {
                int8x16_t v89 = (int8x16_t)vdupq_n_s64(v87);
                if (v23 < 0x10)
                {
                  unint64_t v90 = 0;
                  goto LABEL_108;
                }
                uint64_t v102 = 0;
                int64x2_t v103 = vdupq_n_s64(v15);
                int64x2_t v104 = vdupq_n_s64(v493);
                v105.i64[0] = 0x101010101010101;
                v105.i64[1] = 0x101010101010101;
                do
                {
                  uint8x16_t v106 = *(uint8x16_t *)&v489[v102];
                  uint16x8_t v107 = vmovl_high_u8(v106);
                  uint32x4_t v108 = vmovl_high_u16(v107);
                  v109.i64[0] = v108.u32[2];
                  v109.i64[1] = v108.u32[3];
                  uint64x2_t v110 = v109;
                  v109.i64[0] = v108.u32[0];
                  v109.i64[1] = v108.u32[1];
                  uint64x2_t v111 = v109;
                  uint32x4_t v112 = vmovl_u16(*(uint16x4_t *)v107.i8);
                  v109.i64[0] = v112.u32[0];
                  v109.i64[1] = v112.u32[1];
                  uint64x2_t v113 = v109;
                  v109.i64[0] = v112.u32[2];
                  v109.i64[1] = v112.u32[3];
                  uint64x2_t v114 = v109;
                  uint16x8_t v115 = vmovl_u8(*(uint8x8_t *)v106.i8);
                  uint32x4_t v116 = vmovl_u16(*(uint16x4_t *)v115.i8);
                  v109.i64[0] = v116.u32[0];
                  v109.i64[1] = v116.u32[1];
                  uint64x2_t v117 = v109;
                  v109.i64[0] = v116.u32[2];
                  v109.i64[1] = v116.u32[3];
                  uint64x2_t v118 = v109;
                  uint32x4_t v119 = vmovl_high_u16(v115);
                  v109.i64[0] = v119.u32[0];
                  v109.i64[1] = v119.u32[1];
                  uint64x2_t v120 = v109;
                  v109.i64[0] = v119.u32[2];
                  v109.i64[1] = v119.u32[3];
                  uint64x2_t v121 = (uint64x2_t)vnegq_s64(v103);
                  *(int8x16_t *)((char *)v41 + v102) = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v117, v121), v89), v104), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v118, v121), v89), v104)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v120, v121), v89), v104), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v109, v121), v89), v104)))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v113, v121), v89), v104), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v114, v121), v89), v104)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v111, v121), v89), v104), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v110, v121), v89), v104))))), v105);
                  v102 += 16;
                }
                while (v473 != v102);
                if (v23 == v473) {
                  goto LABEL_115;
                }
                unint64_t v90 = v473;
                unint64_t v86 = v473;
                if ((v23 & 8) != 0)
                {
LABEL_108:
                  int64x2_t v91 = vdupq_n_s64(v15);
                  int64x2_t v92 = vdupq_n_s64(v493);
                  do
                  {
                    uint16x8_t v93 = vmovl_u8(*(uint8x8_t *)&v489[v90]);
                    uint32x4_t v94 = vmovl_u16(*(uint16x4_t *)v93.i8);
                    v95.i64[0] = v94.u32[0];
                    v95.i64[1] = v94.u32[1];
                    uint64x2_t v96 = v95;
                    v95.i64[0] = v94.u32[2];
                    v95.i64[1] = v94.u32[3];
                    uint64x2_t v97 = v95;
                    uint32x4_t v98 = vmovl_high_u16(v93);
                    v95.i64[0] = v98.u32[0];
                    v95.i64[1] = v98.u32[1];
                    uint64x2_t v99 = v95;
                    v95.i64[0] = v98.u32[2];
                    v95.i64[1] = v98.u32[3];
                    uint64x2_t v100 = (uint64x2_t)vnegq_s64(v91);
                    *(int8x8_t *)((char *)v41 + v90) = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v96, v100), v89), v92), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v97, v100), v89), v92)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v99, v100), v89), v92), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v95, v100), v89), v92))))), (int8x8_t)0x101010101010101);
                    v90 += 8;
                  }
                  while (v472 != v90);
                  unint64_t v86 = v472;
                  if (v23 == v472) {
                    goto LABEL_115;
                  }
                  goto LABEL_114;
                }
              }
            }
            do
            {
LABEL_114:
              *((unsigned char *)v41 + v86) = ((v88[v86] >> v15) & v87) != v493;
              ++v86;
            }
            while (v23 != v86);
            goto LABEL_115;
          }
          memset(v41, v493 != 0, v23);
LABEL_115:
          memset(v501, 0, sizeof(v501));
          long long __src = 0u;
LABEL_143:
          uint64_t v8 = v487;
          uint64_t v26 = v490;
          int v483 = v101;
          if (!v101 && *((void *)&__src + 1) < *(void *)(v490 + 8))
          {
            *(_OWORD *)uint64_t v490 = __src;
            *(_OWORD *)(v490 + 16) = v501[0];
            *(_OWORD *)(v490 + 28) = *(_OWORD *)((char *)v501 + 12);
            long long v136 = *(_OWORD *)(v487 + 72);
            *(_OWORD *)(v487 + 72) = *(_OWORD *)(v487 + 48);
            *(_OWORD *)(v487 + 48) = v136;
            uint64_t v137 = *(void *)(v487 + 88);
            *(void *)(v487 + 88) = *(void *)(v487 + 64);
            *(void *)(v487 + 64) = v137;
          }
          BOOL v22 = v489;
          unint64_t v23 = v492;
          LOBYTE(v9) = v488[0];
          unint64_t v15 = v491;
          if ((v488[0] & 2) == 0) {
            goto LABEL_63;
          }
LABEL_147:
          int v138 = *(mgcl::muid **)v8;
          BOOL v139 = *(mgcl::muid **)(v8 + 8);
          unint64_t v140 = (unint64_t)v139 - *(void *)v8;
          BOOL v141 = v478 >= v140;
          size_t v142 = v478 - v140;
          if (v478 <= v140)
          {
            unint64_t v149 = v492;
            if (!v141) {
              *(void *)(v8 + 8) = (char *)v138 + v478;
            }
LABEL_201:
            unsigned int v228 = *(mgcl::muid **)v8;
            if (!v149) {
              goto LABEL_224;
            }
            if (!v494)
            {
              unint64_t v234 = 0;
              unint64_t v235 = -(uint64_t)v493;
              if (v149 < 4) {
                goto LABEL_215;
              }
              int64x2_t v236 = vdupq_n_s64(v235);
              uint64_t v237 = (int64x2_t *)((char *)v228 + 16);
              unint64_t v238 = v470;
              do
              {
                v237[-1] = v236;
                *uint64_t v237 = v236;
                v237 += 2;
                v238 -= 4;
              }
              while (v238);
              unint64_t v234 = v470;
              if (v149 != v470)
              {
LABEL_215:
                unint64_t v239 = v149 - v234;
                unsigned __int8 v240 = (unint64_t *)((char *)v228 + 8 * v234);
                do
                {
                  *v240++ = v235;
                  --v239;
                }
                while (v239);
              }
              goto LABEL_224;
            }
            if (v494 > 0x3F)
            {
              if (v149 < 8 || v228 < (mgcl::muid *)v474 && v22 < (unsigned __int8 *)v228 + v478)
              {
                unint64_t v229 = 0;
                goto LABEL_208;
              }
              if (v149 >= 0x10)
              {
                int64x2_t v287 = vdupq_n_s64(v493);
                unint64_t v288 = v473;
                unint64_t v289 = *(int64x2_t **)v8;
                v290 = (uint8x16_t *)v22;
                do
                {
                  uint8x16_t v291 = *v290++;
                  uint16x8_t v292 = vmovl_high_u8(v291);
                  uint32x4_t v293 = vmovl_u16(*(uint16x4_t *)v292.i8);
                  v294.i64[0] = v293.u32[2];
                  v294.i64[1] = v293.u32[3];
                  int64x2_t v295 = v294;
                  uint16x8_t v296 = vmovl_u8(*(uint8x8_t *)v291.i8);
                  uint32x4_t v297 = vmovl_high_u16(v296);
                  v294.i64[0] = v297.u32[2];
                  v294.i64[1] = v297.u32[3];
                  int64x2_t v298 = v294;
                  uint32x4_t v299 = vmovl_high_u16(v292);
                  v294.i64[0] = v299.u32[0];
                  v294.i64[1] = v299.u32[1];
                  int64x2_t v300 = v294;
                  v294.i64[0] = v293.u32[0];
                  v294.i64[1] = v293.u32[1];
                  int64x2_t v301 = v294;
                  v294.i64[0] = v297.u32[0];
                  v294.i64[1] = v297.u32[1];
                  int64x2_t v302 = v294;
                  uint32x4_t v303 = vmovl_u16(*(uint16x4_t *)v296.i8);
                  v294.i64[0] = v303.u32[2];
                  v294.i64[1] = v303.u32[3];
                  int64x2_t v304 = v294;
                  v294.i64[0] = v299.u32[2];
                  v294.i64[1] = v299.u32[3];
                  int64x2_t v305 = v294;
                  v289[4] = vsubq_s64(v301, v287);
                  v289[5] = vsubq_s64(v295, v287);
                  v294.i64[0] = v303.u32[0];
                  v294.i64[1] = v303.u32[1];
                  v289[2] = vsubq_s64(v302, v287);
                  v289[3] = vsubq_s64(v298, v287);
                  v289[6] = vsubq_s64(v300, v287);
                  v289[7] = vsubq_s64(v305, v287);
                  *unint64_t v289 = vsubq_s64(v294, v287);
                  v289[1] = vsubq_s64(v304, v287);
                  v289 += 8;
                  v288 -= 16;
                }
                while (v288);
                if (v149 == v473) {
                  goto LABEL_224;
                }
                unint64_t v229 = v473;
                unint64_t v258 = v473;
                if ((v149 & 8) == 0)
                {
LABEL_208:
                  unint64_t v230 = v149 - v229;
                  BOOL v231 = (void *)((char *)v228 + 8 * v229);
                  uint64_t v232 = &v22[v229];
                  do
                  {
                    unsigned int v233 = *v232++;
                    *v231++ = v233 - v493;
                    --v230;
                  }
                  while (v230);
                  goto LABEL_224;
                }
              }
              else
              {
                unint64_t v258 = 0;
              }
              int64x2_t v259 = vdupq_n_s64(v493);
              uint32x4_t v260 = (uint8x8_t *)&v22[v258];
              uint32x4_t v261 = (int64x2_t *)((char *)v228 + 8 * v258);
              unint64_t v262 = v468 + v258;
              do
              {
                uint8x8_t v263 = *v260++;
                uint16x8_t v264 = vmovl_u8(v263);
                uint32x4_t v265 = vmovl_high_u16(v264);
                v266.i64[0] = v265.u32[2];
                v266.i64[1] = v265.u32[3];
                int64x2_t v267 = v266;
                v266.i64[0] = v265.u32[0];
                v266.i64[1] = v265.u32[1];
                int64x2_t v268 = v266;
                uint32x4_t v269 = vmovl_u16(*(uint16x4_t *)v264.i8);
                v266.i64[0] = v269.u32[2];
                v266.i64[1] = v269.u32[3];
                int64x2_t v270 = v266;
                v266.i64[0] = v269.u32[0];
                v266.i64[1] = v269.u32[1];
                v261[2] = vsubq_s64(v268, v259);
                v261[3] = vsubq_s64(v267, v259);
                *uint32x4_t v261 = vsubq_s64(v266, v259);
                v261[1] = vsubq_s64(v270, v259);
                v261 += 4;
                v262 += 8;
              }
              while (v262);
              unint64_t v229 = v472;
              if (v149 != v472) {
                goto LABEL_208;
              }
LABEL_224:
              int v247 = *(unsigned char **)(v8 + 24);
              unsigned int v248 = *(char **)(v8 + 32);
              unint64_t v249 = v248 - v247;
              size_t v250 = v477 - (v248 - v247);
              if (v477 <= v248 - v247)
              {
                if (v477 < v248 - v247)
                {
                  unsigned int v248 = &v247[v477];
                  *(void *)(v8 + 32) = &v247[v477];
                }
LABEL_277:
                *(void *)&long long __src = 0;
                int v337 = mgcl::muid::compress(v228, (const unint64_t *)8, v492, 0, 0, 0, (unsigned char *)*v484, &v248[-*v484], &__src, v467);
                uint64_t v8 = v487;
                uint64_t v26 = v490;
                int v483 = v337;
                if (v337 || (unint64_t v338 = __src, (unint64_t)__src >= *(void *)(v490 + 8)))
                {
LABEL_310:
                  BOOL v22 = v489;
                  unint64_t v23 = v492;
                  LOBYTE(v9) = v488[0];
                  unint64_t v15 = v491;
                  uint64_t v63 = v494;
                  if ((v488[0] & 4) == 0) {
                    goto LABEL_324;
                  }
                  goto LABEL_311;
                }
                int16x8_t v339 = *(unsigned char **)(v487 + 24);
                int16x8_t v340 = *(unsigned char **)(v487 + 32);
                long long v341 = *(_OWORD *)(v487 + 72);
                *(void *)(v487 + 72) = v339;
                *(void *)(v487 + 80) = v340;
                *(_OWORD *)(v487 + 24) = v341;
                uint64_t v342 = *(void *)(v487 + 88);
                uint64_t v343 = *(void *)(v487 + 40);
                *(void *)(v487 + 88) = v343;
                *(void *)(v487 + 40) = v342;
                unint64_t v344 = v340 - v339;
                BOOL v345 = v338 >= v340 - v339;
                if (v338 <= v340 - v339)
                {
                  uint64_t v8 = v487;
                  if (!v345) {
                    *(void *)(v487 + 80) = &v339[v338];
                  }
                  goto LABEL_309;
                }
                if (v343 - (uint64_t)v340 >= v338 - (v340 - v339))
                {
                  bzero(v340, v338 - (v340 - v339));
                  uint64_t v8 = v487;
                  *(void *)(v487 + 80) = &v339[v338];
LABEL_309:
                  uint64_t v362 = __src;
                  *(unsigned char *)uint64_t v26 = 2;
                  *(void *)(v26 + 8) = v362;
                  *(void *)(v26 + 16) = v494;
                  *(void *)(v26 + 24) = v493;
                  *(void *)(v26 + 32) = 0;
                  *(_DWORD *)(v26 + 40) = 0;
                  goto LABEL_310;
                }
                if ((v338 & 0x8000000000000000) != 0) {
                  goto LABEL_430;
                }
                unint64_t v346 = v343 - (void)v339;
                uint64_t v347 = 2 * v346;
                if (2 * v346 <= v338) {
                  uint64_t v347 = v338;
                }
                if (v346 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v348 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v348 = v347;
                }
                unsigned __int8 v349 = (char *)operator new(v348);
                unsigned __int8 v350 = &v349[v344];
                bzero(&v349[v344], v338 - (v340 - v339));
                if (v340 == v339)
                {
LABEL_307:
                  uint64_t v8 = v487;
                  *(void *)(v487 + 72) = v350;
                  *(void *)(v487 + 80) = &v349[v338];
                  *(void *)(v487 + 88) = &v349[v348];
                  uint64_t v26 = v490;
                  if (v339) {
                    operator delete(v339);
                  }
                  goto LABEL_309;
                }
                if (v344 >= 8 && (unint64_t)(v339 - v349) >= 0x20)
                {
                  if (v344 < 0x20)
                  {
                    unint64_t v351 = 0;
                    goto LABEL_299;
                  }
                  unint64_t v351 = v344 & 0xFFFFFFFFFFFFFFE0;
                  uint64_t v352 = &v349[v344 - 16];
                  uint64_t v353 = (long long *)(v340 - 16);
                  unint64_t v354 = v344 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    long long v355 = *v353;
                    *((_OWORD *)v352 - 1) = *(v353 - 1);
                    *(_OWORD *)uint64_t v352 = v355;
                    v352 -= 32;
                    v353 -= 2;
                    v354 -= 32;
                  }
                  while (v354);
                  if (v344 == v351) {
                    goto LABEL_306;
                  }
                  if ((v344 & 0x18) != 0)
                  {
LABEL_299:
                    v350 -= v344 & 0xFFFFFFFFFFFFFFF8;
                    int16x8_t v356 = &v349[&v340[-v351] - v339 - 8];
                    int16x8_t v357 = (uint64_t *)&v340[-v351 - 8];
                    unint64_t v358 = v351 - (v344 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      uint64_t v359 = *v357--;
                      *(void *)int16x8_t v356 = v359;
                      v356 -= 8;
                      v358 += 8;
                    }
                    while (v358);
                    v340 -= v344 & 0xFFFFFFFFFFFFFFF8;
                    if (v344 == (v344 & 0xFFFFFFFFFFFFFFF8)) {
                      goto LABEL_306;
                    }
                    goto LABEL_304;
                  }
                  v350 -= v351;
                  v340 -= v351;
                }
LABEL_304:
                unsigned __int8 v360 = v350 - 1;
                do
                {
                  char v361 = *--v340;
                  *v360-- = v361;
                }
                while (v340 != v339);
LABEL_306:
                unsigned __int8 v350 = v349;
                goto LABEL_307;
              }
              uint64_t v251 = *(void *)(v8 + 40);
              if (v251 - (uint64_t)v248 >= v250)
              {
                bzero(*(void **)(v8 + 32), v477 - (v248 - v247));
                *(void *)(v8 + 32) = &v247[v477];
                unsigned int v248 = &v247[v477];
                goto LABEL_277;
              }
              if ((v477 & 0x8000000000000000) != 0) {
                goto LABEL_430;
              }
              unint64_t v252 = v251 - (void)v247;
              uint64_t v253 = 2 * v252;
              if (2 * v252 <= v477) {
                uint64_t v253 = v477;
              }
              if (v252 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v254 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v254 = v253;
              }
              uint32x4_t v255 = (char *)operator new(v254);
              uint32x4_t v256 = &v255[v249];
              bzero(&v255[v249], v250);
              if (v248 == v247)
              {
                int v247 = v248;
                goto LABEL_275;
              }
              if (v249 >= 8 && (unint64_t)(v247 - v255) >= 0x20)
              {
                if (v249 < 0x20)
                {
                  unint64_t v257 = 0;
                  goto LABEL_267;
                }
                unint64_t v257 = v249 & 0xFFFFFFFFFFFFFFE0;
                uint64_t v327 = &v255[v249 - 16];
                unsigned int v328 = v248 - 16;
                unint64_t v329 = v249 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v330 = *(_OWORD *)v328;
                  *((_OWORD *)v327 - 1) = *((_OWORD *)v328 - 1);
                  *(_OWORD *)uint64_t v327 = v330;
                  v327 -= 32;
                  v328 -= 32;
                  v329 -= 32;
                }
                while (v329);
                if (v249 == v257) {
                  goto LABEL_274;
                }
                if ((v249 & 0x18) != 0)
                {
LABEL_267:
                  v256 -= v249 & 0xFFFFFFFFFFFFFFF8;
                  v331 = &v255[&v248[-v257] - v247 - 8];
                  v332 = &v248[-v257 - 8];
                  unint64_t v333 = v257 - (v249 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    uint64_t v334 = *(void *)v332;
                    v332 -= 8;
                    *(void *)v331 = v334;
                    v331 -= 8;
                    v333 += 8;
                  }
                  while (v333);
                  v248 -= v249 & 0xFFFFFFFFFFFFFFF8;
                  if (v249 == (v249 & 0xFFFFFFFFFFFFFFF8)) {
                    goto LABEL_274;
                  }
                  goto LABEL_272;
                }
                v256 -= v257;
                v248 -= v257;
              }
LABEL_272:
              unsigned int v335 = v256 - 1;
              do
              {
                char v336 = *--v248;
                *v335-- = v336;
              }
              while (v248 != v247);
LABEL_274:
              uint32x4_t v256 = v255;
LABEL_275:
              unsigned int v248 = &v255[v477];
              *(void *)(v487 + 24) = v256;
              *(void *)(v487 + 32) = &v255[v477];
              *(void *)(v487 + 40) = &v255[v254];
              if (v247)
              {
                operator delete(v247);
                unsigned int v248 = *(char **)(v487 + 32);
              }
              goto LABEL_277;
            }
            unint64_t v241 = ~(-1 << v494);
            if (v149 < 8 || v228 < (mgcl::muid *)v474 && v22 < (unsigned __int8 *)v228 + v478)
            {
              unint64_t v242 = 0;
              goto LABEL_222;
            }
            int8x16_t v271 = (int8x16_t)vdupq_n_s64(v241);
            if (v149 >= 0x10)
            {
              int64x2_t v306 = vdupq_n_s64(v15);
              int64x2_t v307 = vdupq_n_s64(v493);
              unint64_t v308 = v473;
              unsigned int v309 = *(int64x2_t **)v8;
              unsigned int v310 = (uint8x16_t *)v22;
              do
              {
                uint8x16_t v311 = *v310++;
                uint16x8_t v312 = vmovl_u8(*(uint8x8_t *)v311.i8);
                uint32x4_t v313 = vmovl_high_u16(v312);
                v314.i64[0] = v313.u32[2];
                v314.i64[1] = v313.u32[3];
                uint64x2_t v315 = v314;
                uint16x8_t v316 = vmovl_high_u8(v311);
                uint32x4_t v317 = vmovl_u16(*(uint16x4_t *)v316.i8);
                v314.i64[0] = v317.u32[2];
                v314.i64[1] = v317.u32[3];
                uint64x2_t v318 = v314;
                v314.i64[0] = v317.u32[0];
                v314.i64[1] = v317.u32[1];
                uint64x2_t v319 = v314;
                v314.i64[0] = v313.u32[0];
                v314.i64[1] = v313.u32[1];
                uint64x2_t v320 = v314;
                uint32x4_t v321 = vmovl_u16(*(uint16x4_t *)v312.i8);
                v314.i64[0] = v321.u32[2];
                v314.i64[1] = v321.u32[3];
                uint64x2_t v322 = v314;
                uint32x4_t v323 = vmovl_high_u16(v316);
                v314.i64[0] = v323.u32[0];
                v314.i64[1] = v323.u32[1];
                uint64x2_t v324 = v314;
                v314.i64[0] = v321.u32[0];
                v314.i64[1] = v321.u32[1];
                uint64x2_t v325 = v314;
                v314.i64[0] = v323.u32[2];
                v314.i64[1] = v323.u32[3];
                uint64x2_t v326 = (uint64x2_t)vnegq_s64(v306);
                v309[4] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v319, v326), v271), v307);
                v309[5] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v318, v326), v271), v307);
                v309[2] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v320, v326), v271), v307);
                v309[3] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v315, v326), v271), v307);
                *unsigned int v309 = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v325, v326), v271), v307);
                v309[1] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v322, v326), v271), v307);
                v309[6] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v324, v326), v271), v307);
                v309[7] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v314, v326), v271), v307);
                v309 += 8;
                v308 -= 16;
              }
              while (v308);
              if (v149 == v473) {
                goto LABEL_224;
              }
              unint64_t v242 = v473;
              unint64_t v272 = v473;
              if ((v149 & 8) == 0)
              {
LABEL_222:
                unint64_t v243 = v149 - v242;
                unsigned int v244 = (void *)((char *)v228 + 8 * v242);
                unsigned __int8 v245 = &v22[v242];
                do
                {
                  unsigned int v246 = *v245++;
                  *v244++ = ((v246 >> v15) & v241) - v493;
                  --v243;
                }
                while (v243);
                goto LABEL_224;
              }
            }
            else
            {
              unint64_t v272 = 0;
            }
            int64x2_t v273 = vdupq_n_s64(v15);
            int64x2_t v274 = vdupq_n_s64(v493);
            uint32x4_t v275 = (uint8x8_t *)&v22[v272];
            uint32x4_t v276 = (int64x2_t *)((char *)v228 + 8 * v272);
            unint64_t v277 = v468 + v272;
            do
            {
              uint8x8_t v278 = *v275++;
              uint16x8_t v279 = vmovl_u8(v278);
              uint32x4_t v280 = vmovl_high_u16(v279);
              v281.i64[0] = v280.u32[2];
              v281.i64[1] = v280.u32[3];
              uint64x2_t v282 = v281;
              v281.i64[0] = v280.u32[0];
              v281.i64[1] = v280.u32[1];
              uint64x2_t v283 = v281;
              uint32x4_t v284 = vmovl_u16(*(uint16x4_t *)v279.i8);
              v281.i64[0] = v284.u32[2];
              v281.i64[1] = v284.u32[3];
              uint64x2_t v285 = v281;
              v281.i64[0] = v284.u32[0];
              v281.i64[1] = v284.u32[1];
              uint64x2_t v286 = (uint64x2_t)vnegq_s64(v273);
              v276[2] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v283, v286), v271), v274);
              v276[3] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v282, v286), v271), v274);
              *uint32x4_t v276 = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v281, v286), v271), v274);
              v276[1] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v285, v286), v271), v274);
              v276 += 4;
              v277 += 8;
            }
            while (v277);
            unint64_t v242 = v472;
            if (v149 == v472) {
              goto LABEL_224;
            }
            goto LABEL_222;
          }
          uint64_t v143 = *(void *)(v8 + 16);
          if (v143 - (uint64_t)v139 >= v142)
          {
            bzero(*(void **)(v8 + 8), v478 - v140);
            *(void *)(v8 + 8) = (char *)v139 + v142;
            unint64_t v149 = v492;
            goto LABEL_201;
          }
          if ((v478 & 0x8000000000000000) != 0) {
            goto LABEL_430;
          }
          unint64_t v144 = v143 - (void)v138;
          uint64_t v145 = 2 * v144;
          if (2 * v144 <= v478) {
            uint64_t v145 = v478;
          }
          if (v144 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v146 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v146 = v145;
          }
          BOOL v147 = (mgcl::muid *)operator new(v146);
          int v148 = (char *)v147 + v140;
          bzero((char *)v147 + v140, v142);
          if (v139 == v138)
          {
            unint64_t v149 = v492;
            unint64_t v15 = v491;
            goto LABEL_199;
          }
          if (v140 < 8)
          {
            unint64_t v15 = v491;
            goto LABEL_196;
          }
          unint64_t v15 = v491;
          if ((unint64_t)(v138 - v147) >= 0x20)
          {
            if (v140 < 0x20)
            {
              unint64_t v150 = 0;
              goto LABEL_181;
            }
            unint64_t v150 = v140 & 0xFFFFFFFFFFFFFFE0;
            unsigned __int8 v180 = (char *)v147 + v140 - 16;
            BOOL v181 = (char *)v139 - 16;
            unint64_t v182 = v140 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v183 = *(_OWORD *)v181;
              *((_OWORD *)v180 - 1) = *((_OWORD *)v181 - 1);
              *(_OWORD *)unsigned __int8 v180 = v183;
              v180 -= 32;
              v181 -= 32;
              v182 -= 32;
            }
            while (v182);
            if (v140 == v150) {
              goto LABEL_198;
            }
            if ((v140 & 0x18) != 0)
            {
LABEL_181:
              v148 -= v140 & 0xFFFFFFFFFFFFFFF8;
              unsigned int v184 = (char *)v147 + (mgcl::muid *)((char *)v139 - v150) - v138 - 8;
              unsigned __int8 v185 = (char *)v139 - v150 - 8;
              unint64_t v186 = v150 - (v140 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v187 = *(void *)v185;
                v185 -= 8;
                *(void *)unsigned int v184 = v187;
                v184 -= 8;
                v186 += 8;
              }
              while (v186);
              BOOL v139 = (mgcl::muid *)((char *)v139 - (v140 & 0xFFFFFFFFFFFFFFF8));
              if (v140 == (v140 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_198;
              }
              goto LABEL_196;
            }
            v148 -= v150;
            BOOL v139 = (mgcl::muid *)((char *)v139 - v150);
          }
LABEL_196:
          BOOL v226 = v148 - 1;
          do
          {
            char v227 = *((unsigned char *)v139 - 1);
            BOOL v139 = (mgcl::muid *)((char *)v139 - 1);
            *v226-- = v227;
          }
          while (v139 != v138);
LABEL_198:
          BOOL v139 = v138;
          int v148 = (char *)v147;
          unint64_t v149 = v492;
LABEL_199:
          *(void *)uint64_t v487 = v148;
          *(void *)(v487 + 8) = (char *)v147 + v478;
          uint64_t v8 = v487;
          *(void *)(v487 + 16) = (char *)v147 + v146;
          BOOL v22 = v489;
          if (v139) {
            operator delete(v139);
          }
          goto LABEL_201;
        }
        if ((v23 & 0x8000000000000000) != 0) {
          goto LABEL_430;
        }
        unint64_t v45 = v44 - (void)v41;
        uint64_t v46 = 2 * v45;
        if (2 * v45 <= v23) {
          uint64_t v46 = v23;
        }
        if (v45 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v47 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v47 = v46;
        }
        uint64_t v48 = (mgcl::muid *)operator new(v47);
        uint64_t v49 = (mgcl::muid *)((char *)v48 + v42);
        bzero((char *)v48 + v42, v23 - v42);
        if (v40 == v41)
        {
          unint64_t v23 = v492;
          uint64_t v50 = *(void *)v488;
          goto LABEL_100;
        }
        if (v42 < 8)
        {
          unint64_t v23 = v492;
          uint64_t v50 = *(void *)v488;
          goto LABEL_97;
        }
        unint64_t v23 = v492;
        uint64_t v50 = *(void *)v488;
        if ((unint64_t)(v41 - v48) >= 0x20)
        {
          if (v42 < 0x20)
          {
            unint64_t v66 = 0;
            goto LABEL_84;
          }
          unint64_t v66 = v42 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v68 = (_OWORD *)((char *)v48 + v42 - 16);
          unint64_t v69 = (char *)v40 - 16;
          unint64_t v70 = v42 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v71 = *(_OWORD *)v69;
            *(v68 - 1) = *((_OWORD *)v69 - 1);
            *uint64_t v68 = v71;
            v68 -= 2;
            v69 -= 32;
            v70 -= 32;
          }
          while (v70);
          if (v42 == v66) {
            goto LABEL_99;
          }
          if ((v42 & 0x18) != 0)
          {
LABEL_84:
            uint64_t v49 = (mgcl::muid *)((char *)v49 - (v42 & 0xFFFFFFFFFFFFFFF8));
            unsigned int v72 = (void *)((char *)v48 + (mgcl::muid *)((char *)v40 - v66) - v41 - 8);
            uint64_t v73 = (char *)v40 - v66 - 8;
            unint64_t v74 = v66 - (v42 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v75 = *(void *)v73;
              v73 -= 8;
              *v72-- = v75;
              v74 += 8;
            }
            while (v74);
            uint64_t v40 = (mgcl::muid *)((char *)v40 - (v42 & 0xFFFFFFFFFFFFFFF8));
            if (v42 == (v42 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_99;
            }
            goto LABEL_97;
          }
          uint64_t v49 = (mgcl::muid *)((char *)v49 - v66);
          uint64_t v40 = (mgcl::muid *)((char *)v40 - v66);
        }
LABEL_97:
        int v84 = (char *)v49 - 1;
        do
        {
          char v85 = *((unsigned char *)v40 - 1);
          uint64_t v40 = (mgcl::muid *)((char *)v40 - 1);
          *v84-- = v85;
        }
        while (v40 != v41);
LABEL_99:
        uint64_t v40 = v41;
        uint64_t v49 = v48;
LABEL_100:
        *(void *)uint64_t v487 = v49;
        *(void *)(v487 + 8) = (char *)v48 + v23;
        *(void *)(v487 + 16) = (char *)v48 + v47;
        uint64_t v41 = v49;
        unint64_t v15 = v491;
        if (v40)
        {
          operator delete(v40);
          uint64_t v41 = *(mgcl::muid **)v487;
        }
        goto LABEL_102;
      }
      if (v38 > 0x1F) {
        goto LABEL_62;
      }
      int32x4_t v51 = *(mgcl::muid **)v8;
      char v52 = *(mgcl::muid **)(v8 + 8);
      unint64_t v53 = (unint64_t)v52 - *(void *)v8;
      BOOL v54 = v482 >= v53;
      size_t v55 = v482 - v53;
      if (v482 <= v53)
      {
        unint64_t v65 = v492;
        uint64_t v62 = *(void *)v488;
        if (!v54) {
          *(void *)(v8 + 8) = (char *)v51 + v482;
        }
LABEL_127:
        int v124 = *(char **)v8;
        if (!v65)
        {
LABEL_142:
          memset(v501, 0, sizeof(v501));
          long long __src = 0u;
          goto LABEL_143;
        }
        if (v494 > 0x3F)
        {
          if (v65 < 8 || v124 < (char *)v474 && v22 < (unsigned __int8 *)&v124[v482])
          {
            unint64_t v125 = 0;
LABEL_133:
            unint64_t v126 = v65 - v125;
            BOOL v127 = &v124[4 * v125];
            uint64_t v128 = &v22[v125];
            do
            {
              int v129 = *v128++;
              *(_DWORD *)BOOL v127 = v129 - v493;
              v127 += 4;
              --v126;
            }
            while (v126);
            goto LABEL_142;
          }
          if (v65 >= 0x10)
          {
            int64x2_t v188 = vdupq_n_s64(v493);
            unint64_t v189 = v473;
            int v190 = *(int32x4_t **)v8;
            unsigned __int8 v191 = (uint8x16_t *)v22;
            do
            {
              uint8x16_t v192 = *v191++;
              uint16x8_t v193 = vmovl_u8(*(uint8x8_t *)v192.i8);
              uint32x4_t v194 = vmovl_u16(*(uint16x4_t *)v193.i8);
              v195.i64[0] = v194.u32[0];
              v195.i64[1] = v194.u32[1];
              int64x2_t v196 = v195;
              v195.i64[0] = v194.u32[2];
              v195.i64[1] = v194.u32[3];
              int64x2_t v197 = v195;
              uint16x8_t v198 = vmovl_high_u8(v192);
              uint32x4_t v199 = vmovl_high_u16(v198);
              v195.i64[0] = v199.u32[2];
              v195.i64[1] = v199.u32[3];
              int64x2_t v200 = v195;
              v195.i64[0] = v199.u32[0];
              v195.i64[1] = v199.u32[1];
              int64x2_t v201 = v195;
              uint32x4_t v202 = vmovl_high_u16(v193);
              v195.i64[0] = v202.u32[0];
              v195.i64[1] = v202.u32[1];
              int64x2_t v203 = v195;
              v195.i64[0] = v202.u32[2];
              v195.i64[1] = v202.u32[3];
              int64x2_t v204 = v195;
              uint32x4_t v205 = vmovl_u16(*(uint16x4_t *)v198.i8);
              v195.i64[0] = v205.u32[0];
              v195.i64[1] = v205.u32[1];
              int64x2_t v206 = v195;
              v195.i64[0] = v205.u32[2];
              v195.i64[1] = v205.u32[3];
              v190[2] = vuzp1q_s32((int32x4_t)vsubq_s64(v206, v188), (int32x4_t)vsubq_s64(v195, v188));
              v190[3] = vuzp1q_s32((int32x4_t)vsubq_s64(v201, v188), (int32x4_t)vsubq_s64(v200, v188));
              *int v190 = vuzp1q_s32((int32x4_t)vsubq_s64(v196, v188), (int32x4_t)vsubq_s64(v197, v188));
              v190[1] = vuzp1q_s32((int32x4_t)vsubq_s64(v203, v188), (int32x4_t)vsubq_s64(v204, v188));
              v190 += 4;
              v189 -= 16;
            }
            while (v189);
            if (v65 == v473) {
              goto LABEL_142;
            }
            unint64_t v125 = v473;
            unint64_t v151 = v473;
            if ((v65 & 8) == 0) {
              goto LABEL_133;
            }
          }
          else
          {
            unint64_t v151 = 0;
          }
          int64x2_t v152 = vdupq_n_s64(v493);
          uint64_t v153 = (uint8x8_t *)&v22[v151];
          int v154 = (int32x4_t *)&v124[4 * v151];
          unint64_t v155 = v468 + v151;
          do
          {
            uint8x8_t v156 = *v153++;
            uint16x8_t v157 = vmovl_u8(v156);
            uint32x4_t v158 = vmovl_u16(*(uint16x4_t *)v157.i8);
            v159.i64[0] = v158.u32[0];
            v159.i64[1] = v158.u32[1];
            int64x2_t v160 = v159;
            v159.i64[0] = v158.u32[2];
            v159.i64[1] = v158.u32[3];
            int64x2_t v161 = v159;
            uint32x4_t v162 = vmovl_high_u16(v157);
            v159.i64[0] = v162.u32[0];
            v159.i64[1] = v162.u32[1];
            int64x2_t v163 = v159;
            v159.i64[0] = v162.u32[2];
            v159.i64[1] = v162.u32[3];
            *int v154 = vuzp1q_s32((int32x4_t)vsubq_s64(v160, v152), (int32x4_t)vsubq_s64(v161, v152));
            v154[1] = vuzp1q_s32((int32x4_t)vsubq_s64(v163, v152), (int32x4_t)vsubq_s64(v159, v152));
            v154 += 2;
            v155 += 8;
          }
          while (v155);
          unint64_t v125 = v472;
          if (v65 == v472) {
            goto LABEL_142;
          }
          goto LABEL_133;
        }
        unint64_t v130 = ~(-1 << v494);
        if (v65 < 8 || v124 < (char *)v474 && v22 < (unsigned __int8 *)&v124[v482])
        {
          unint64_t v131 = 0;
LABEL_140:
          unint64_t v132 = v65 - v131;
          uint64_t v133 = &v124[4 * v131];
          int v134 = &v22[v131];
          do
          {
            unsigned int v135 = *v134++;
            *(_DWORD *)uint64_t v133 = ((v135 >> v15) & v130) - v493;
            v133 += 4;
            --v132;
          }
          while (v132);
          goto LABEL_142;
        }
        int64x2_t v164 = vdupq_n_s64(v15);
        int8x16_t v165 = (int8x16_t)vdupq_n_s64(v130);
        int64x2_t v166 = vdupq_n_s64(v493);
        if (v65 >= 0x10)
        {
          unint64_t v207 = v473;
          BOOL v208 = *(int32x4_t **)v8;
          unsigned int v209 = (uint8x16_t *)v22;
          do
          {
            uint8x16_t v210 = *v209++;
            uint16x8_t v211 = vmovl_high_u8(v210);
            uint32x4_t v212 = vmovl_high_u16(v211);
            v213.i64[0] = v212.u32[2];
            v213.i64[1] = v212.u32[3];
            uint64x2_t v214 = v213;
            v213.i64[0] = v212.u32[0];
            v213.i64[1] = v212.u32[1];
            uint64x2_t v215 = v213;
            uint16x8_t v216 = vmovl_u8(*(uint8x8_t *)v210.i8);
            uint32x4_t v217 = vmovl_u16(*(uint16x4_t *)v216.i8);
            v213.i64[0] = v217.u32[0];
            v213.i64[1] = v217.u32[1];
            uint64x2_t v218 = v213;
            v213.i64[0] = v217.u32[2];
            v213.i64[1] = v217.u32[3];
            uint64x2_t v219 = v213;
            uint32x4_t v220 = vmovl_high_u16(v216);
            v213.i64[0] = v220.u32[0];
            v213.i64[1] = v220.u32[1];
            uint64x2_t v221 = v213;
            v213.i64[0] = v220.u32[2];
            v213.i64[1] = v220.u32[3];
            uint64x2_t v222 = v213;
            uint32x4_t v223 = vmovl_u16(*(uint16x4_t *)v211.i8);
            v213.i64[0] = v223.u32[0];
            v213.i64[1] = v223.u32[1];
            uint64x2_t v224 = v213;
            v213.i64[0] = v223.u32[2];
            v213.i64[1] = v223.u32[3];
            uint64x2_t v225 = (uint64x2_t)vnegq_s64(v164);
            *BOOL v208 = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v218, v225), v165), v166), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v219, v225), v165), v166));
            v208[1] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v221, v225), v165), v166), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v222, v225), v165), v166));
            v208[2] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v224, v225), v165), v166), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v213, v225), v165), v166));
            v208[3] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v215, v225), v165), v166), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v214, v225), v165), v166));
            v208 += 4;
            v207 -= 16;
          }
          while (v207);
          if (v65 == v473) {
            goto LABEL_142;
          }
          unint64_t v131 = v473;
          unint64_t v167 = v473;
          if ((v65 & 8) == 0) {
            goto LABEL_140;
          }
        }
        else
        {
          unint64_t v167 = 0;
        }
        BOOL v168 = (uint8x8_t *)&v22[v167];
        unsigned int v169 = (int32x4_t *)&v124[4 * v167];
        unint64_t v170 = v468 + v167;
        do
        {
          uint8x8_t v171 = *v168++;
          uint16x8_t v172 = vmovl_u8(v171);
          uint32x4_t v173 = vmovl_u16(*(uint16x4_t *)v172.i8);
          v174.i64[0] = v173.u32[0];
          v174.i64[1] = v173.u32[1];
          uint64x2_t v175 = v174;
          v174.i64[0] = v173.u32[2];
          v174.i64[1] = v173.u32[3];
          uint64x2_t v176 = v174;
          uint32x4_t v177 = vmovl_high_u16(v172);
          v174.i64[0] = v177.u32[0];
          v174.i64[1] = v177.u32[1];
          uint64x2_t v178 = v174;
          v174.i64[0] = v177.u32[2];
          v174.i64[1] = v177.u32[3];
          uint64x2_t v179 = (uint64x2_t)vnegq_s64(v164);
          *unsigned int v169 = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v175, v179), v165), v166), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v176, v179), v165), v166));
          v169[1] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v178, v179), v165), v166), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v174, v179), v165), v166));
          v169 += 2;
          v170 += 8;
        }
        while (v170);
        unint64_t v131 = v472;
        if (v65 == v472) {
          goto LABEL_142;
        }
        goto LABEL_140;
      }
      uint64_t v56 = *(void *)(v8 + 16);
      if (v56 - (uint64_t)v52 >= v55)
      {
        bzero(*(void **)(v8 + 8), v482 - v53);
        *(void *)(v8 + 8) = (char *)v52 + v55;
        unint64_t v65 = v492;
        uint64_t v62 = *(void *)v488;
        goto LABEL_127;
      }
      if ((v482 & 0x8000000000000000) != 0) {
        goto LABEL_430;
      }
      unint64_t v57 = v56 - (void)v51;
      uint64_t v58 = 2 * v57;
      if (2 * v57 <= v482) {
        uint64_t v58 = v482;
      }
      if (v57 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v59 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v59 = v58;
      }
      uint64_t v60 = (mgcl::muid *)operator new(v59);
      uint64_t v61 = (char *)v60 + v53;
      bzero((char *)v60 + v53, v55);
      if (v52 == v51)
      {
        unint64_t v65 = v492;
        uint64_t v62 = *(void *)v488;
        unint64_t v15 = v491;
        goto LABEL_125;
      }
      if (v53 < 8)
      {
        uint64_t v62 = *(void *)v488;
        unint64_t v15 = v491;
        goto LABEL_122;
      }
      uint64_t v62 = *(void *)v488;
      unint64_t v15 = v491;
      if ((unint64_t)(v51 - v60) >= 0x20)
      {
        if (v53 < 0x20)
        {
          unint64_t v67 = 0;
          goto LABEL_92;
        }
        unint64_t v67 = v53 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v76 = (char *)v60 + v53 - 16;
        uint64_t v77 = (char *)v52 - 16;
        unint64_t v78 = v53 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v79 = *(_OWORD *)v77;
          *((_OWORD *)v76 - 1) = *((_OWORD *)v77 - 1);
          *(_OWORD *)uint64_t v76 = v79;
          v76 -= 32;
          v77 -= 32;
          v78 -= 32;
        }
        while (v78);
        if (v53 == v67) {
          goto LABEL_124;
        }
        if ((v53 & 0x18) != 0)
        {
LABEL_92:
          v61 -= v53 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v80 = (char *)v60 + (mgcl::muid *)((char *)v52 - v67) - v51 - 8;
          int v81 = (char *)v52 - v67 - 8;
          unint64_t v82 = v67 - (v53 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v83 = *(void *)v81;
            v81 -= 8;
            *(void *)uint64_t v80 = v83;
            v80 -= 8;
            v82 += 8;
          }
          while (v82);
          char v52 = (mgcl::muid *)((char *)v52 - (v53 & 0xFFFFFFFFFFFFFFF8));
          if (v53 == (v53 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_124;
          }
          goto LABEL_122;
        }
        v61 -= v67;
        char v52 = (mgcl::muid *)((char *)v52 - v67);
      }
LABEL_122:
      uint64_t v122 = v61 - 1;
      do
      {
        char v123 = *((unsigned char *)v52 - 1);
        char v52 = (mgcl::muid *)((char *)v52 - 1);
        *v122-- = v123;
      }
      while (v52 != v51);
LABEL_124:
      char v52 = v51;
      uint64_t v61 = (char *)v60;
      unint64_t v65 = v492;
LABEL_125:
      *(void *)uint64_t v487 = v61;
      *(void *)(v487 + 8) = (char *)v60 + v482;
      uint64_t v8 = v487;
      *(void *)(v487 + 16) = (char *)v60 + v59;
      BOOL v22 = v489;
      if (v52) {
        operator delete(v52);
      }
      goto LABEL_127;
    }
    uint64_t v27 = 0;
    unint64_t v28 = -1;
    uint64_t v29 = ~(-1 << v25);
    do
    {
      while (v25)
      {
        unint64_t v30 = v22[v27];
        if (v25 <= 0x3F) {
          unint64_t v30 = (v30 >> v15) & v29;
        }
        if (v30 < v28) {
          unint64_t v28 = v30;
        }
        if (v23 == ++v27) {
          goto LABEL_23;
        }
      }
      if (v28) {
        unint64_t v28 = 0;
      }
      ++v27;
    }
    while (v23 != v27);
LABEL_23:
    unint64_t v31 = 0;
    uint64_t v32 = v22;
    unint64_t v33 = v23;
    do
    {
      while (!v25)
      {
        if (v31 <= -(uint64_t)v28) {
          unint64_t v31 = -(uint64_t)v28;
        }
        ++v32;
        if (!--v33) {
          goto LABEL_33;
        }
      }
      unsigned int v35 = *v32++;
      unint64_t v34 = v35;
      unint64_t v36 = (v35 >> v15) & (unint64_t)v29;
      if (v25 <= 0x3F) {
        unint64_t v34 = v36;
      }
      unint64_t v37 = v34 - v28;
      if (v31 <= v37) {
        unint64_t v31 = v37;
      }
      --v33;
    }
    while (v33);
LABEL_33:
    unsigned int v38 = 1;
    if (v31 >= 2)
    {
      do
      {
        ++v38;
        BOOL v39 = v31 > 3;
        v31 >>= 1;
      }
      while (v39);
    }
    unint64_t v493 = v28;
    unint64_t v491 = v15;
    uint64_t v490 = v26;
    uint64_t v494 = v25;
    if (v9) {
      goto LABEL_38;
    }
LABEL_62:
    int v483 = 0;
    if ((v9 & 2) != 0) {
      goto LABEL_147;
    }
LABEL_63:
    uint64_t v63 = v494;
    if ((v9 & 4) == 0) {
      goto LABEL_324;
    }
LABEL_311:
    unsigned __int8 v364 = *(mgcl::muid **)v8;
    int16x8_t v363 = *(mgcl::muid **)(v8 + 8);
    if (v363 != *(mgcl::muid **)v8)
    {
      *(void *)(v8 + 8) = v364;
      int16x8_t v363 = v364;
    }
    long long __src = 0uLL;
    *(void *)&v501[0] = v8;
    if (v23)
    {
      uint64_t v365 = ~(-1 << v63);
      do
      {
        if (v494)
        {
          unint64_t v366 = *v22;
          if (v494 <= 0x3F) {
            unint64_t v366 = (v366 >> v15) & v365;
          }
        }
        else
        {
          unint64_t v366 = 0;
        }
        geo::WriteBitstream::writeVariableInt((geo::WriteBitstream *)&__src, v366 - v493);
        ++v22;
        --v23;
      }
      while (v23);
      unsigned __int8 v364 = *(mgcl::muid **)v8;
      int16x8_t v363 = *(mgcl::muid **)(v8 + 8);
      BOOL v22 = v489;
      unint64_t v23 = v492;
      uint64_t v63 = v494;
    }
    int64_t v367 = v363 - v364;
    if ((unint64_t)(v363 - v364) < *(void *)(v26 + 8))
    {
      long long v368 = *(_OWORD *)(v8 + 72);
      *(void *)(v8 + 72) = v364;
      *(void *)(v8 + 80) = v363;
      *(_OWORD *)uint64_t v8 = v368;
      uint64_t v369 = *(void *)(v8 + 88);
      *(void *)(v8 + 88) = *(void *)(v8 + 16);
      *(void *)(v8 + 16) = v369;
      *(unsigned char *)uint64_t v26 = 3;
      *(void *)(v26 + 8) = v367;
      *(void *)(v26 + 16) = v63;
      *(void *)(v26 + 24) = v493;
      *(void *)(v26 + 32) = 0;
      *(_DWORD *)(v26 + 40) = 0;
    }
LABEL_324:
    if ((v9 & 8) == 0 || v63 > 0x20) {
      goto LABEL_407;
    }
    uint64_t v370 = *(mgcl::muid **)v8;
    uint64_t v371 = *(mgcl::muid **)(v8 + 8);
    unint64_t v372 = (unint64_t)v371 - *(void *)v8;
    BOOL v373 = v482 >= v372;
    size_t v374 = v482 - v372;
    if (v482 > v372)
    {
      uint64_t v375 = *(void *)(v8 + 16);
      if (v375 - (uint64_t)v371 >= v374)
      {
        bzero(*(void **)(v8 + 8), v482 - v372);
        *(void *)(v8 + 8) = (char *)v371 + v374;
        unint64_t v23 = v492;
        uint64_t v9 = *(void *)v488;
        goto LABEL_358;
      }
      if ((v482 & 0x8000000000000000) != 0) {
LABEL_430:
      }
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      unint64_t v376 = v375 - (void)v370;
      uint64_t v377 = 2 * v376;
      if (2 * v376 <= v482) {
        uint64_t v377 = v482;
      }
      if (v376 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v378 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v378 = v377;
      }
      uint64_t v379 = (mgcl::muid *)operator new(v378);
      uint64_t v380 = (char *)v379 + v372;
      bzero((char *)v379 + v372, v374);
      if (v371 == v370)
      {
        unint64_t v23 = v492;
        uint64_t v9 = *(void *)v488;
        unint64_t v15 = v491;
        goto LABEL_356;
      }
      if (v372 < 8)
      {
        uint64_t v9 = *(void *)v488;
        unint64_t v15 = v491;
        goto LABEL_353;
      }
      uint64_t v9 = *(void *)v488;
      unint64_t v15 = v491;
      if ((unint64_t)(v370 - v379) >= 0x20)
      {
        if (v372 < 0x20)
        {
          unint64_t v381 = 0;
          goto LABEL_348;
        }
        unint64_t v381 = v372 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v382 = (char *)v379 + v372 - 16;
        uint64_t v383 = (char *)v371 - 16;
        unint64_t v384 = v372 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v385 = *(_OWORD *)v383;
          *((_OWORD *)v382 - 1) = *((_OWORD *)v383 - 1);
          *(_OWORD *)uint64_t v382 = v385;
          v382 -= 32;
          v383 -= 32;
          v384 -= 32;
        }
        while (v384);
        if (v372 == v381) {
          goto LABEL_355;
        }
        if ((v372 & 0x18) != 0)
        {
LABEL_348:
          v380 -= v372 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v386 = (char *)v379 + (mgcl::muid *)((char *)v371 - v381) - v370 - 8;
          uint64_t v387 = (char *)v371 - v381 - 8;
          unint64_t v388 = v381 - (v372 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v389 = *(void *)v387;
            v387 -= 8;
            *(void *)uint64_t v386 = v389;
            v386 -= 8;
            v388 += 8;
          }
          while (v388);
          uint64_t v371 = (mgcl::muid *)((char *)v371 - (v372 & 0xFFFFFFFFFFFFFFF8));
          if (v372 == (v372 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_355;
          }
          goto LABEL_353;
        }
        v380 -= v381;
        uint64_t v371 = (mgcl::muid *)((char *)v371 - v381);
      }
LABEL_353:
      uint64_t v390 = v380 - 1;
      do
      {
        char v391 = *((unsigned char *)v371 - 1);
        uint64_t v371 = (mgcl::muid *)((char *)v371 - 1);
        *v390-- = v391;
      }
      while (v371 != v370);
LABEL_355:
      uint64_t v371 = v370;
      uint64_t v380 = (char *)v379;
      unint64_t v23 = v492;
LABEL_356:
      uint64_t v392 = (char *)v379 + v378;
      uint64_t v393 = (char *)v379 + v482;
      uint64_t v8 = v487;
      *(void *)uint64_t v487 = v380;
      *(void *)(v487 + 8) = v393;
      *(void *)(v487 + 16) = v392;
      BOOL v22 = v489;
      if (v371) {
        operator delete(v371);
      }
      goto LABEL_358;
    }
    unint64_t v23 = v492;
    uint64_t v9 = *(void *)v488;
    if (!v373) {
      *(void *)(v8 + 8) = (char *)v370 + v482;
    }
LABEL_358:
    uint64_t v394 = *(geo **)v8;
    uint64_t v26 = v490;
    if (v23)
    {
      if (v494)
      {
        unint64_t v395 = ~(-1 << v494);
        if (v23 < 8 || v394 < (geo *)v474 && v22 < (unsigned __int8 *)v394 + v482)
        {
          unint64_t v396 = 0;
LABEL_364:
          unint64_t v397 = v23 - v396;
          uint64_t v398 = (_DWORD *)((char *)v394 + 4 * v396);
          uint64_t v399 = &v22[v396];
          do
          {
            unsigned int v400 = *v399++;
            *v398++ = ((v400 >> v15) & v395) - v493;
            --v397;
          }
          while (v397);
          goto LABEL_374;
        }
        int8x16_t v409 = (int8x16_t)vdupq_n_s64(v395);
        if (v23 >= 0x10)
        {
          int64x2_t v425 = vdupq_n_s64(v15);
          int64x2_t v426 = vdupq_n_s64(v493);
          unint64_t v427 = v473;
          v428 = *(int32x4_t **)v8;
          v429 = (uint8x16_t *)v22;
          do
          {
            uint8x16_t v430 = *v429++;
            uint16x8_t v431 = vmovl_high_u8(v430);
            uint32x4_t v432 = vmovl_high_u16(v431);
            v433.i64[0] = v432.u32[2];
            v433.i64[1] = v432.u32[3];
            uint64x2_t v434 = v433;
            v433.i64[0] = v432.u32[0];
            v433.i64[1] = v432.u32[1];
            uint64x2_t v435 = v433;
            uint16x8_t v436 = vmovl_u8(*(uint8x8_t *)v430.i8);
            uint32x4_t v437 = vmovl_u16(*(uint16x4_t *)v436.i8);
            v433.i64[0] = v437.u32[0];
            v433.i64[1] = v437.u32[1];
            uint64x2_t v438 = v433;
            v433.i64[0] = v437.u32[2];
            v433.i64[1] = v437.u32[3];
            uint64x2_t v439 = v433;
            uint32x4_t v440 = vmovl_high_u16(v436);
            v433.i64[0] = v440.u32[0];
            v433.i64[1] = v440.u32[1];
            uint64x2_t v441 = v433;
            v433.i64[0] = v440.u32[2];
            v433.i64[1] = v440.u32[3];
            uint64x2_t v442 = v433;
            uint32x4_t v443 = vmovl_u16(*(uint16x4_t *)v431.i8);
            v433.i64[0] = v443.u32[0];
            v433.i64[1] = v443.u32[1];
            uint64x2_t v444 = v433;
            v433.i64[0] = v443.u32[2];
            v433.i64[1] = v443.u32[3];
            uint64x2_t v445 = (uint64x2_t)vnegq_s64(v425);
            int32x4_t *v428 = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v438, v445), v409), v426), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v439, v445), v409), v426));
            v428[1] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v441, v445), v409), v426), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v442, v445), v409), v426));
            v428[2] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v444, v445), v409), v426), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v433, v445), v409), v426));
            v428[3] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v435, v445), v409), v426), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v434, v445), v409), v426));
            v428 += 4;
            v427 -= 16;
          }
          while (v427);
          if (v23 == v473) {
            goto LABEL_374;
          }
          unint64_t v396 = v473;
          unint64_t v410 = v473;
          if ((v23 & 8) == 0) {
            goto LABEL_364;
          }
        }
        else
        {
          unint64_t v410 = 0;
        }
        int64x2_t v411 = vdupq_n_s64(v15);
        int64x2_t v412 = vdupq_n_s64(v493);
        v413 = (uint8x8_t *)&v22[v410];
        v414 = (int32x4_t *)((char *)v394 + 4 * v410);
        unint64_t v415 = v468 + v410;
        do
        {
          uint8x8_t v416 = *v413++;
          uint16x8_t v417 = vmovl_u8(v416);
          uint32x4_t v418 = vmovl_u16(*(uint16x4_t *)v417.i8);
          v419.i64[0] = v418.u32[0];
          v419.i64[1] = v418.u32[1];
          uint64x2_t v420 = v419;
          v419.i64[0] = v418.u32[2];
          v419.i64[1] = v418.u32[3];
          uint64x2_t v421 = v419;
          uint32x4_t v422 = vmovl_high_u16(v417);
          v419.i64[0] = v422.u32[0];
          v419.i64[1] = v422.u32[1];
          uint64x2_t v423 = v419;
          v419.i64[0] = v422.u32[2];
          v419.i64[1] = v422.u32[3];
          uint64x2_t v424 = (uint64x2_t)vnegq_s64(v411);
          int32x4_t *v414 = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v420, v424), v409), v412), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v421, v424), v409), v412));
          v414[1] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v423, v424), v409), v412), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v419, v424), v409), v412));
          v414 += 2;
          v415 += 8;
        }
        while (v415);
        unint64_t v396 = v472;
        if (v23 == v472) {
          goto LABEL_374;
        }
        goto LABEL_364;
      }
      unsigned int v401 = -(int)v493;
      if (v23 >= 8)
      {
        int32x4_t v403 = vdupq_n_s32(v401);
        int16x8_t v404 = (int32x4_t *)((char *)v394 + 16);
        unint64_t v405 = v472;
        do
        {
          v404[-1] = v403;
          *int16x8_t v404 = v403;
          v404 += 2;
          v405 -= 8;
        }
        while (v405);
        unint64_t v402 = v472;
        if (v23 == v472) {
          goto LABEL_374;
        }
      }
      else
      {
        unint64_t v402 = 0;
      }
      unint64_t v406 = v23 - v402;
      v407 = (unsigned int *)((char *)v394 + 4 * v402);
      do
      {
        *v407++ = v401;
        --v406;
      }
      while (v406);
    }
LABEL_374:
    if ((v9 & 0x400000000) != 0)
    {
      uint64_t v408 = *(void *)(v8 + 24);
      if (*(void *)(v8 + 32) != v408) {
        *(void *)(v8 + 32) = v408;
      }
      long long __src = 0uLL;
      *(void *)&v501[0] = v484;
      operator new();
    }
    if ((v9 & 0x800000000) != 0)
    {
      if (v23)
      {
        int v446 = 0;
        unsigned int v447 = -1;
        do
        {
          unint64_t v449 = 0;
          unsigned int v448 = 0;
          char v450 = v446++;
          unsigned int v451 = 1;
          while (1)
          {
            int v452 = (*((_DWORD *)v394 + v449) >> v450) + v446;
            if (__CFADD__(v448, v452)) {
              break;
            }
            v448 += v452;
            unint64_t v449 = v451++;
            if (v23 <= v449) {
              goto LABEL_393;
            }
          }
          unsigned int v448 = -1;
LABEL_393:
          if (v448 < v447) {
            unsigned int v447 = v448;
          }
        }
        while (v446 != 32);
      }
      uint64_t v453 = *(void *)(v8 + 24);
      if (*(void *)(v8 + 32) != v453) {
        *(void *)(v8 + 32) = v453;
      }
      long long __src = 0uLL;
      *(void *)&v501[0] = v484;
      operator new();
    }
    if ((v9 & 0x1000000000) != 0)
    {
      unint64_t v498 = geo::computeRiceParam2(v394, v23, v13, v14);
      int v499 = v454;
      uint64_t v455 = *(void *)(v487 + 24);
      if (*(void *)(v487 + 32) != v455) {
        *(void *)(v487 + 32) = v455;
      }
      long long __src = 0uLL;
      *(void *)&v501[0] = v484;
      operator new();
    }
LABEL_407:
    if (!*(unsigned char *)v26) {
      break;
    }
    LOBYTE(__src) = *(unsigned char *)v26;
    uint64_t v456 = v497;
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v497, *(char **)(v497 + 8), (char *)&__src, (char *)&__src + 1, 1);
    geo::WriteBitstream::writeVariableInt((geo::WriteBitstream *)&v495, *(void *)(v485 + 48 * v486 + 24));
    uint64_t v457 = v485 + 48 * v486;
    geo::WriteBitstream::writeVariableInt((geo::WriteBitstream *)&v495, *(void *)(v457 + 8));
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v456, *(char **)(v456 + 8), *v480, &(*v480)[*(void *)(v457 + 8)], *(void *)(v457 + 8));
    uint64_t v24 = v486 + 1;
    unsigned int v20 = v471 + 2;
    BOOL v22 = v489;
    if (v486 + 1 == v479) {
      goto LABEL_409;
    }
  }
  if (v483) {
    int v458 = v483;
  }
  else {
    int v458 = 6;
  }
  uint64_t v459 = v496;
  if (v496)
  {
LABEL_415:
    v460 = *(void **)v459;
    if (*(void *)v459)
    {
      *(void *)(v459 + 8) = v460;
      operator delete(v460);
    }
    MEMORY[0x18C11F580](v459, 0x10C402FEFCB83);
  }
LABEL_418:
  uint64_t v461 = v495;
  if (v495)
  {
    v462 = *(void **)v495;
    if (*(void *)v495)
    {
      *(void *)(v495 + 8) = v462;
      operator delete(v462);
    }
    MEMORY[0x18C11F580](v461, 0x1010C40A6F07D10);
  }
  **(_DWORD **)uint64_t v469 = v458;
  if (!v458)
  {
    v463 = *(uint64_t **)(v469 + 40);
    uint64_t v464 = **(void **)(v469 + 48);
    if ((unint64_t)*v463 < *(void *)v464)
    {
      uint64_t v465 = *v463;
      *(unsigned char *)(v464 + 8) = *((unsigned char *)v463 + 8);
      *(void *)uint64_t v464 = v465;
      if ((uint64_t *)v464 != v463) {
        std::vector<mgcl::ints::ColumnInfo>::__assign_with_size[abi:ne180100]<mgcl::ints::ColumnInfo*,mgcl::ints::ColumnInfo*>((void *)(v464 + 16), (char *)v463[2], (char *)v463[3], 0xAAAAAAAAAAAAAAABLL * ((v463[3] - v463[2]) >> 4));
      }
      uint64_t v466 = **(void **)(v469 + 48);
      *(unsigned char *)(v466 + 8) = BYTE4(v467);
      if (*(void *)v466 > **(void **)(v469 + 56)) {
        **(_DWORD **)uint64_t v469 = 1;
      }
      memcpy(**(void ***)(v469 + 64), *v11, **(void **)(v469 + 40));
    }
  }
}

void sub_18A44088C(_Unwind_Exception *a1)
{
  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_18A4408A0(_Unwind_Exception *a1)
{
  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_18A4408B4(_Unwind_Exception *a1)
{
  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_18A4408C8(_Unwind_Exception *a1)
{
  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 176));
  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 216));
  _Unwind_Resume(a1);
}

uint64_t mgcl::ints::IntCompressor<unsigned char>::gclVersionMajor()
{
  return 0;
}

uint64_t mgcl::ints::IntCompressor<unsigned char>::gclVersionMinor()
{
  return 2;
}

uint64_t mgcl::ints::IntCompressor<int>::compress(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = a3;
  unsigned int v38 = a2;
  uint64_t v35 = a5;
  uint64_t v36 = a4;
  uint64_t v33 = a7;
  unint64_t v34 = a6;
  unsigned int v32 = 0;
  *a6 = -1;
  a6[3] = a6[2];
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t v7 = a2;
      uint64_t v8 = a2;
    }
    else
    {
      uint64_t v8 = a2 + 1;
      int v10 = a2[1];
      int v11 = *a2;
      if (v10 >= *a2) {
        uint64_t v7 = a2;
      }
      else {
        uint64_t v7 = a2 + 1;
      }
      if (v10 < v11) {
        uint64_t v8 = a2;
      }
      if (a3 != 2)
      {
        int v12 = a2 + 2;
        if (v10 <= v11) {
          int v13 = *a2;
        }
        else {
          int v13 = a2[1];
        }
        if (v10 < v11) {
          int v11 = a2[1];
        }
        uint64_t v14 = 4 * a3 - 12;
        while (v14)
        {
          int v17 = *v12;
          int v16 = v12[1];
          if (v16 >= *v12)
          {
            if (v17 < v11)
            {
              int v11 = *v12;
              uint64_t v7 = v12;
            }
            BOOL v15 = v16 < v13;
            if (v16 > v13) {
              int v13 = v12[1];
            }
            if (!v15) {
              uint64_t v8 = v12 + 1;
            }
            v12 += 2;
            v14 -= 8;
            if (v14 == -4) {
              goto LABEL_38;
            }
          }
          else
          {
            int v11 = *v7;
            if (v16 < *v7)
            {
              int v11 = v12[1];
              uint64_t v7 = v12 + 1;
            }
            int v13 = *v8;
            if (v17 > *v8) {
              int v13 = *v12;
            }
            if (v17 >= *v8) {
              uint64_t v8 = v12;
            }
            v12 += 2;
            v14 -= 8;
            if (v14 == -4) {
              goto LABEL_38;
            }
          }
        }
        if (*v12 >= *v7)
        {
          if (*v12 >= *v8) {
            uint64_t v8 = v12;
          }
        }
        else
        {
          uint64_t v7 = v12;
        }
      }
    }
LABEL_38:
    int v18 = *v7;
    if (v18 >= 0) {
      unint64_t v19 = v18;
    }
    else {
      unint64_t v19 = -v18;
    }
    unsigned int v20 = 1;
    if (v19 >= 2)
    {
      do
      {
        ++v20;
        BOOL v15 = v19 > 3;
        v19 >>= 1;
      }
      while (v15);
    }
    int v21 = *v8;
    if (v21 >= 0) {
      unint64_t v22 = v21;
    }
    else {
      unint64_t v22 = -v21;
    }
    unsigned int v23 = 1;
    if (v22 >= 2)
    {
      do
      {
        ++v23;
        BOOL v15 = v22 > 3;
        v22 >>= 1;
      }
      while (v15);
    }
    if (v20 <= v23) {
      unint64_t v24 = v23;
    }
    else {
      unint64_t v24 = v20;
    }
    __p = 0;
    unint64_t v30 = 0;
    uint64_t v31 = 0;
    v27[0] = &v32;
    v27[1] = &v38;
    v27[2] = &v37;
    v27[3] = &v33;
    v27[4] = a1;
    v27[5] = &v28;
    v27[6] = &v34;
    v27[7] = &v35;
    v27[8] = &v36;
    if ((a7 & 0x100) != 0)
    {
      __b[0] = v24;
      mgcl::ints::IntCompressor<int>::compress(int const*,unsigned long,int const*,unsigned long,unsigned char *,unsigned long,mgcl::ints::BlobInfo *,unsigned long long)::{lambda(int const*,unsigned long,mgcl::ints::Tabulation)#1}::operator()((uint64_t)v27, (uint64_t)__b, 1uLL, 0);
      LOWORD(a7) = v33;
    }
    if ((a7 & 0x400) != 0 && v24 <= 0xF)
    {
      memset_pattern16(__b, &unk_18A6434C0, 4 * v24);
      mgcl::ints::IntCompressor<int>::compress(int const*,unsigned long,int const*,unsigned long,unsigned char *,unsigned long,mgcl::ints::BlobInfo *,unsigned long long)::{lambda(int const*,unsigned long,mgcl::ints::Tabulation)#1}::operator()((uint64_t)v27, (uint64_t)__b, v24, 2);
    }
    unsigned int v25 = v32;
    if (!v32) {
      unsigned int v25 = 6;
    }
    if (*v34 == -1) {
      uint64_t v9 = v25;
    }
    else {
      uint64_t v9 = 0;
    }
    if (__p)
    {
      unint64_t v30 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v9 = 0;
    *a6 = 0;
  }
  return v9;
}

void sub_18A440BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mgcl::ints::IntCompressor<int>::compress(int const*,unsigned long,int const*,unsigned long,unsigned char *,unsigned long,mgcl::ints::BlobInfo *,unsigned long long)::{lambda(int const*,unsigned long,mgcl::ints::Tabulation)#1}::operator()(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  int v6 = **(int32x4_t ***)(a1 + 8);
  unint64_t v7 = **(void **)(a1 + 16);
  uint64_t v8 = *(void **)(a1 + 32);
  uint64x2_t v423 = (const void **)(v8 + 12);
  uint64_t v9 = 4 * v7;
  unint64_t v420 = 4 * v7;
  if (v7)
  {
    uint64_t v10 = 1;
    int v11 = **(_DWORD ***)(a1 + 8);
    while ((*v11 & 0x80000000) == 0)
    {
      ++v11;
      v9 -= 4;
      if (!v9) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v10 = 0;
  }
  unint64_t v410 = *(void **)(a1 + 40);
  uint64_t v12 = **(void **)(a1 + 24);
  unint64_t v13 = v10 + a3;
  BOOL v15 = (char *)v8[12];
  uint64_t v14 = (char *)v8[13];
  if (v14 != v15)
  {
    v8[13] = v15;
    uint64_t v14 = v15;
  }
  uint64_t v436 = 0;
  uint64_t v437 = 0;
  uint64x2_t v438 = v8 + 12;
  LOBYTE(__src) = v10 + a3;
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((uint64_t)v423, v14, (char *)&__src, (char *)&__src + 1, 1);
  char v408 = a4;
  uint64_t v409 = a1;
  if (v13)
  {
    unint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      if (v18 >= a3) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = *(unsigned __int8 *)(a2 + 4 * v18);
      }
      LOBYTE(__src) = v20;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((uint64_t)v423, (char *)v8[13], (char *)&__src, (char *)&__src + 1, 1);
      v19 += v20;
      ++v18;
    }
    while (v13 != v18);
  }
  else
  {
    unint64_t v19 = 0;
  }
  uint64_t v21 = v410[2];
  unint64_t v22 = v410 + 2;
  unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v410[3] - v21) >> 4);
  if (v13 <= v23)
  {
    if (v13 < v23) {
      v410[3] = v21 + 48 * v13;
    }
    if (!v13)
    {
LABEL_410:
      int v398 = 0;
      *unint64_t v410 = v8[13] - v8[12];
      uint64_t v399 = v437;
      if (v437) {
        goto LABEL_416;
      }
      goto LABEL_419;
    }
  }
  else
  {
    std::vector<mgcl::ints::ColumnInfo>::__append((char **)v410 + 2, v13 - v23);
  }
  unint64_t v24 = 0;
  uint64x2_t v424 = v8 + 3;
  v413 = v8 + 6;
  v414 = (gcl::ArithmeticEncoder ****)(v8 + 15);
  uint32x4_t v418 = (char **)(v8 + 9);
  unint64_t v416 = 8 * v7;
  uint64_t v415 = 8 * v7 + 128;
  unint64_t v419 = v7 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v411 = v7 & 0xFFFFFFFFFFFFFFF0;
  int64x2_t v412 = v6 + 1;
  uint16x8_t v417 = v8;
  unint64_t v427 = v6;
  unint64_t v433 = v7;
  uint64_t v425 = v12;
  unint64_t v428 = v13;
  while (1)
  {
    if (v24 >= a3) {
      LOBYTE(v25) = 0;
    }
    else {
      int v25 = *(_DWORD *)(a2 + 4 * v24);
    }
    uint64_t v26 = *v22;
    uint64_t v27 = *v22 + 48 * v24;
    *(unsigned char *)uint64_t v27 = 0;
    unint64_t v28 = v25;
    unint64_t v29 = v19 - v25;
    unint64_t v30 = -1;
    *(void *)(v27 + 8) = -1;
    *(void *)(v27 + 16) = 0;
    *(void *)(v27 + 24) = 0;
    *(void *)(v27 + 32) = 0;
    uint64_t v432 = v27;
    *(_DWORD *)(v27 + 40) = 0;
    unint64_t v426 = v24;
    if (!v7)
    {
      unsigned int v42 = 1;
      uint64_t v434 = -1;
      unint64_t v431 = v29;
      uint64_t v430 = v26;
      unint64_t v435 = v25;
      if ((v12 & 1) == 0) {
        goto LABEL_81;
      }
LABEL_57:
      if (v28 <= 1)
      {
        uint64_t v44 = *v8;
        unint64_t v45 = (char *)v8[1];
        unint64_t v46 = (unint64_t)&v45[-*v8];
        size_t v47 = v7 - v46;
        if (v7 <= v46)
        {
          unint64_t v49 = v419;
          if (v7 < v46) {
            v8[1] = v44 + v7;
          }
          unint64_t v66 = v411;
LABEL_121:
          unint64_t v67 = v434;
          if (!v7) {
            goto LABEL_152;
          }
LABEL_122:
          if (v435)
          {
            unint64_t v89 = ~(-1 << v435);
            if (v7 < 8)
            {
              unint64_t v90 = 0;
              char v91 = v431;
              goto LABEL_142;
            }
            int8x16_t v93 = (int8x16_t)vdupq_n_s64(v89);
            char v91 = v431;
            unint64_t v94 = 0;
            if (v7 >= 0x10)
            {
              int64x2_t v118 = vdupq_n_s64(v431);
              int64x2_t v119 = vdupq_n_s64(v67);
              uint64x2_t v120 = v6;
              v121.i64[0] = 0x101010101010101;
              v121.i64[1] = 0x101010101010101;
              do
              {
                int32x4_t v123 = v120[2];
                int32x4_t v122 = v120[3];
                int32x4_t v124 = *v120;
                int32x4_t v125 = v120[1];
                v120 += 4;
                int32x4_t v126 = vabsq_s32(v125);
                int32x4_t v127 = vabsq_s32(v124);
                int32x4_t v128 = vabsq_s32(v123);
                int32x4_t v129 = vabsq_s32(v122);
                v130.i64[0] = v129.u32[2];
                v130.i64[1] = v129.u32[3];
                uint64x2_t v131 = v130;
                v130.i64[0] = v129.u32[0];
                v130.i64[1] = v129.u32[1];
                uint64x2_t v132 = v130;
                v130.i64[0] = v128.u32[2];
                v130.i64[1] = v128.u32[3];
                uint64x2_t v133 = v130;
                v130.i64[0] = v128.u32[0];
                v130.i64[1] = v128.u32[1];
                uint64x2_t v134 = v130;
                v130.i64[0] = v127.u32[0];
                v130.i64[1] = v127.u32[1];
                uint64x2_t v135 = v130;
                v130.i64[0] = v127.u32[2];
                v130.i64[1] = v127.u32[3];
                uint64x2_t v136 = v130;
                v130.i64[0] = v126.u32[0];
                v130.i64[1] = v126.u32[1];
                uint64x2_t v137 = v130;
                v130.i64[0] = v126.u32[2];
                v130.i64[1] = v126.u32[3];
                uint64x2_t v138 = (uint64x2_t)vnegq_s64(v118);
                *(int8x16_t *)(v44 + v94) = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v135, v138), v93), v119), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v136, v138), v93), v119)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v137, v138), v93), v119), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v130, v138), v93), v119)))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(
                                                                                                (int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v134, v138), v93),
                                                                                                v119),
                                                                                   (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v133, v138), v93), v119)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v132, v138), v93), v119), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v131, v138), v93), v119))))), v121);
                v94 += 16;
              }
              while (v66 != v94);
              if (v7 == v66) {
                goto LABEL_152;
              }
              unint64_t v94 = v66;
              unint64_t v90 = v66;
              if ((v7 & 8) == 0)
              {
                do
                {
LABEL_142:
                  LODWORD(v139) = v6->i32[v90];
                  if ((v139 & 0x80000000) == 0) {
                    unint64_t v139 = v139;
                  }
                  else {
                    unint64_t v139 = -(int)v139;
                  }
                  *(unsigned char *)(v44 + v90++) = ((v139 >> v91) & v89) != v67;
                }
                while (v7 != v90);
                goto LABEL_152;
              }
            }
            int64x2_t v95 = vdupq_n_s64(v431);
            int64x2_t v96 = vdupq_n_s64(v67);
            uint64x2_t v97 = (int32x4_t *)((char *)v6 + 4 * v94);
            do
            {
              int32x4_t v98 = *v97;
              int32x4_t v99 = v97[1];
              v97 += 2;
              int32x4_t v100 = vabsq_s32(v99);
              int32x4_t v101 = vabsq_s32(v98);
              v102.i64[0] = v101.u32[0];
              v102.i64[1] = v101.u32[1];
              uint64x2_t v103 = v102;
              v102.i64[0] = v101.u32[2];
              v102.i64[1] = v101.u32[3];
              uint64x2_t v104 = v102;
              v102.i64[0] = v100.u32[0];
              v102.i64[1] = v100.u32[1];
              uint64x2_t v105 = v102;
              v102.i64[0] = v100.u32[2];
              v102.i64[1] = v100.u32[3];
              uint64x2_t v106 = (uint64x2_t)vnegq_s64(v95);
              *(int8x8_t *)(v44 + v94) = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v103, v106), v93), v96), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v104, v106), v93), v96)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v105, v106), v93), v96), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v102, v106), v93), v96))))), (int8x8_t)0x101010101010101);
              v94 += 8;
            }
            while (v49 != v94);
            unint64_t v90 = v49;
            if (v7 != v49) {
              goto LABEL_142;
            }
LABEL_152:
            memset(v442, 0, sizeof(v442));
            long long __src = 0u;
            goto LABEL_182;
          }
          if (v7 < 8)
          {
            unint64_t v92 = 0;
            do
            {
LABEL_151:
              *(unsigned char *)(v44 + v92) = v67 != (unint64_t)v6->u32[v92] >> 31;
              ++v92;
            }
            while (v7 != v92);
            goto LABEL_152;
          }
          if (v7 >= 0x10)
          {
            uint64_t v140 = 0;
            int64x2_t v141 = vdupq_n_s64(v67);
            size_t v142 = (uint32x4_t *)v6;
            v143.i64[0] = 0x101010101010101;
            v143.i64[1] = 0x101010101010101;
            do
            {
              uint32x4_t v145 = v142[2];
              uint32x4_t v144 = v142[3];
              uint32x4_t v146 = *v142;
              uint32x4_t v147 = v142[1];
              v142 += 4;
              uint32x4_t v148 = vshrq_n_u32(v147, 0x1FuLL);
              uint32x4_t v149 = vshrq_n_u32(v146, 0x1FuLL);
              uint32x4_t v150 = vshrq_n_u32(v145, 0x1FuLL);
              uint32x4_t v151 = vshrq_n_u32(v144, 0x1FuLL);
              v152.i64[0] = v151.u32[2];
              v152.i64[1] = v151.u32[3];
              int64x2_t v153 = v152;
              v152.i64[0] = v151.u32[0];
              v152.i64[1] = v151.u32[1];
              int64x2_t v154 = v152;
              v152.i64[0] = v150.u32[2];
              v152.i64[1] = v150.u32[3];
              int64x2_t v155 = v152;
              v152.i64[0] = v150.u32[0];
              v152.i64[1] = v150.u32[1];
              int64x2_t v156 = v152;
              v152.i64[0] = v149.u32[0];
              v152.i64[1] = v149.u32[1];
              int64x2_t v157 = v152;
              v152.i64[0] = v149.u32[2];
              v152.i64[1] = v149.u32[3];
              int64x2_t v158 = v152;
              v152.i64[0] = v148.u32[0];
              v152.i64[1] = v148.u32[1];
              int64x2_t v159 = v152;
              v152.i64[0] = v148.u32[2];
              v152.i64[1] = v148.u32[3];
              *(int8x16_t *)(v44 + v140) = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v141, v157), (int32x4_t)vceqq_s64(v141, v158)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v141, v159), (int32x4_t)vceqq_s64(v141, v152)))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v141, v156), (int32x4_t)vceqq_s64(v141, v155)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v141, v154), (int32x4_t)vceqq_s64(v141, v153))))), v143);
              v140 += 16;
            }
            while (v66 != v140);
            if (v7 == v66) {
              goto LABEL_152;
            }
            unint64_t v107 = v66;
            unint64_t v92 = v66;
            if ((v7 & 8) == 0) {
              goto LABEL_151;
            }
          }
          else
          {
            unint64_t v107 = 0;
          }
          int64x2_t v108 = vdupq_n_s64(v67);
          uint64x2_t v109 = (uint32x4_t *)((char *)v6 + 4 * v107);
          do
          {
            uint32x4_t v110 = *v109;
            uint32x4_t v111 = v109[1];
            v109 += 2;
            uint32x4_t v112 = vshrq_n_u32(v111, 0x1FuLL);
            uint32x4_t v113 = vshrq_n_u32(v110, 0x1FuLL);
            v114.i64[0] = v113.u32[0];
            v114.i64[1] = v113.u32[1];
            int64x2_t v115 = v114;
            v114.i64[0] = v113.u32[2];
            v114.i64[1] = v113.u32[3];
            int64x2_t v116 = v114;
            v114.i64[0] = v112.u32[0];
            v114.i64[1] = v112.u32[1];
            int64x2_t v117 = v114;
            v114.i64[0] = v112.u32[2];
            v114.i64[1] = v112.u32[3];
            *(int8x8_t *)(v44 + v107) = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v108, v115), (int32x4_t)vceqq_s64(v108, v116)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v108, v117), (int32x4_t)vceqq_s64(v108, v114))))), (int8x8_t)0x101010101010101);
            v107 += 8;
          }
          while (v49 != v107);
          unint64_t v92 = v49;
          if (v7 == v49) {
            goto LABEL_152;
          }
          goto LABEL_151;
        }
        uint64_t v48 = v8[2];
        unint64_t v49 = v419;
        if (v48 - (uint64_t)v45 >= v47)
        {
          bzero((void *)v8[1], v7 - v46);
          v8[1] = &v45[v47];
          uint64_t v44 = *v8;
          unint64_t v66 = v411;
          unint64_t v67 = v434;
          goto LABEL_122;
        }
        if ((v7 & 0x8000000000000000) != 0) {
          goto LABEL_431;
        }
        unint64_t v50 = v48 - v44;
        uint64_t v51 = 2 * v50;
        if (2 * v50 <= v7) {
          uint64_t v51 = v7;
        }
        if (v50 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v52 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v52 = v51;
        }
        unint64_t v53 = (char *)operator new(v52);
        BOOL v54 = &v53[v46];
        bzero(&v53[v46], v47);
        if (v45 == (char *)v44)
        {
          unint64_t v49 = v419;
          goto LABEL_119;
        }
        if (v46 < 8)
        {
          unint64_t v49 = v419;
          goto LABEL_116;
        }
        unint64_t v49 = v419;
        if ((unint64_t)(v44 - (void)v53) >= 0x20)
        {
          if (v46 < 0x20)
          {
            unint64_t v69 = 0;
            goto LABEL_103;
          }
          unint64_t v69 = v46 & 0xFFFFFFFFFFFFFFE0;
          long long v71 = &v53[v46 - 16];
          unsigned int v72 = v45 - 16;
          unint64_t v73 = v46 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v74 = *(_OWORD *)v72;
            *((_OWORD *)v71 - 1) = *((_OWORD *)v72 - 1);
            *(_OWORD *)long long v71 = v74;
            v71 -= 32;
            v72 -= 32;
            v73 -= 32;
          }
          while (v73);
          if (v46 == v69) {
            goto LABEL_118;
          }
          if ((v46 & 0x18) != 0)
          {
LABEL_103:
            v54 -= v46 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v75 = &v45[-v69 - v44 - 8 + (void)v53];
            uint64_t v76 = &v45[-v69 - 8];
            unint64_t v77 = v69 - (v46 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v78 = *(void *)v76;
              v76 -= 8;
              *(void *)uint64_t v75 = v78;
              v75 -= 8;
              v77 += 8;
            }
            while (v77);
            v45 -= v46 & 0xFFFFFFFFFFFFFFF8;
            if (v46 == (v46 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_118;
            }
            goto LABEL_116;
          }
          v54 -= v69;
          v45 -= v69;
        }
LABEL_116:
        unint64_t v87 = v54 - 1;
        do
        {
          char v88 = *--v45;
          *v87-- = v88;
        }
        while (v45 != (char *)v44);
LABEL_118:
        unint64_t v45 = (char *)v44;
        BOOL v54 = v53;
LABEL_119:
        unint64_t v66 = v411;
        *uint64_t v8 = v54;
        v8[1] = &v53[v433];
        v8[2] = &v53[v52];
        uint64_t v44 = (uint64_t)v54;
        unint64_t v7 = v433;
        int v6 = v427;
        uint64_t v12 = v425;
        if (v45)
        {
          operator delete(v45);
          uint64_t v44 = *v8;
        }
        goto LABEL_121;
      }
      if (v42 > 0x1F) {
        goto LABEL_81;
      }
      size_t v55 = (char *)*v8;
      uint64_t v56 = (char *)v8[1];
      unint64_t v57 = (unint64_t)&v56[-*v8];
      size_t v58 = v420 - v57;
      if (v420 <= v57)
      {
        unint64_t v68 = v419;
        if (v420 < v57) {
          v8[1] = &v55[v420];
        }
        goto LABEL_159;
      }
      uint64_t v59 = v8[2];
      if (v59 - (uint64_t)v56 >= v58)
      {
        bzero((void *)v8[1], v420 - v57);
        v8[1] = &v56[v58];
        unint64_t v68 = v419;
LABEL_159:
        int64x2_t v163 = (char *)*v8;
        if (v7)
        {
          if (v435 <= 0x3F)
          {
            unint64_t v176 = 0;
            unint64_t v177 = ~(-1 << v435);
            if (v7 < 8) {
              goto LABEL_176;
            }
            if ((unint64_t)(v163 - (char *)v6) < 0x20) {
              goto LABEL_176;
            }
            int64x2_t v178 = vdupq_n_s64(v431);
            int8x16_t v179 = (int8x16_t)vdupq_n_s64(v177);
            unsigned __int8 v180 = (int32x4_t *)(v163 + 16);
            unint64_t v181 = v68;
            int64x2_t v182 = vdupq_n_s64(v434);
            long long v183 = v412;
            do
            {
              int32x4_t v184 = vabsq_s32(v183[-1]);
              int32x4_t v185 = vabsq_s32(*v183);
              v186.i64[0] = v184.u32[0];
              v186.i64[1] = v184.u32[1];
              uint64x2_t v187 = v186;
              v186.i64[0] = v184.u32[2];
              v186.i64[1] = v184.u32[3];
              uint64x2_t v188 = v186;
              v186.i64[0] = v185.u32[0];
              v186.i64[1] = v185.u32[1];
              uint64x2_t v189 = v186;
              v186.i64[0] = v185.u32[2];
              v186.i64[1] = v185.u32[3];
              uint64x2_t v190 = (uint64x2_t)vnegq_s64(v178);
              v180[-1] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v187, v190), v179), v182), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v188, v190), v179), v182));
              *unsigned __int8 v180 = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v189, v190), v179), v182), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v186, v190), v179), v182));
              v183 += 2;
              v180 += 2;
              v181 -= 8;
            }
            while (v181);
            unint64_t v176 = v68;
            if (v7 != v68)
            {
LABEL_176:
              unint64_t v191 = v7 - v176;
              uint64_t v192 = v176;
              uint16x8_t v193 = &v163[4 * v176];
              uint32x4_t v194 = &v6->i32[v192];
              do
              {
                int v196 = *v194++;
                LODWORD(v195) = v196;
                if (v196 >= 0) {
                  unint64_t v195 = v195;
                }
                else {
                  unint64_t v195 = -(int)v195;
                }
                *(_DWORD *)uint16x8_t v193 = ((v195 >> v431) & v177) - v434;
                v193 += 4;
                --v191;
              }
              while (v191);
            }
          }
          else
          {
            unint64_t v164 = 0;
            if (v7 < 8) {
              goto LABEL_166;
            }
            if ((unint64_t)(v163 - (char *)v6) < 0x20) {
              goto LABEL_166;
            }
            int32x4_t v165 = vdupq_n_s32(v434);
            int64x2_t v166 = (int32x4_t *)(v163 + 16);
            unint64_t v167 = v68;
            BOOL v168 = v412;
            do
            {
              int32x4_t v169 = vsubq_s32(vabsq_s32(*v168), v165);
              v166[-1] = vsubq_s32(vabsq_s32(v168[-1]), v165);
              *int64x2_t v166 = v169;
              v168 += 2;
              v166 += 2;
              v167 -= 8;
            }
            while (v167);
            unint64_t v164 = v68;
            if (v7 != v68)
            {
LABEL_166:
              unint64_t v170 = v7 - v164;
              uint64_t v171 = v164;
              uint16x8_t v172 = &v163[4 * v164];
              uint32x4_t v173 = &v6->i32[v171];
              do
              {
                int v175 = *v173++;
                int v174 = v175;
                if (v175 < 0) {
                  int v174 = -v174;
                }
                *(_DWORD *)uint16x8_t v172 = v174 - v434;
                v172 += 4;
                --v170;
              }
              while (v170);
            }
          }
        }
        memset(v442, 0, sizeof(v442));
        long long __src = 0u;
LABEL_182:
        int v422 = v160;
        if (!v160 && *((void *)&__src + 1) < *(void *)(v432 + 8))
        {
          *(_OWORD *)uint64_t v432 = __src;
          *(_OWORD *)(v432 + 16) = v442[0];
          *(_OWORD *)(v432 + 28) = *(_OWORD *)((char *)v442 + 12);
          long long v197 = *(_OWORD *)(v8 + 9);
          *(_OWORD *)(v8 + 9) = *((_OWORD *)v8 + 3);
          *((_OWORD *)v8 + 3) = v197;
          uint64_t v198 = v8[11];
          v8[11] = v8[8];
          v8[8] = v198;
        }
        int v6 = v427;
        unint64_t v13 = v428;
        unint64_t v7 = v433;
        uint64_t v12 = v425;
        uint64_t v26 = v430;
        if ((v425 & 2) == 0) {
          goto LABEL_82;
        }
LABEL_186:
        uint32x4_t v199 = (char *)*v8;
        int64x2_t v200 = (char *)v8[1];
        unint64_t v201 = (unint64_t)&v200[-*v8];
        BOOL v202 = v416 >= v201;
        size_t v203 = v416 - v201;
        if (v416 <= v201)
        {
          unint64_t v210 = v415;
          if (!v202) {
            v8[1] = &v199[v416];
          }
LABEL_218:
          uint64x2_t v222 = (mgcl::muid *)*v8;
          if (!v7) {
            goto LABEL_250;
          }
          if (v435)
          {
            if (v435 <= 0x3F)
            {
              unint64_t v225 = ~(-1 << v435);
              if (v7 >= 8)
              {
                int64x2_t v256 = vdupq_n_s64(v431);
                int8x16_t v257 = (int8x16_t)vdupq_n_s64(v225);
                unint64_t v258 = (int64x2_t *)((char *)v222 + 32);
                unint64_t v259 = v419;
                int64x2_t v260 = vdupq_n_s64(v434);
                uint32x4_t v261 = v412;
                do
                {
                  int32x4_t v262 = vabsq_s32(v261[-1]);
                  int32x4_t v263 = vabsq_s32(*v261);
                  v264.i64[0] = v262.u32[2];
                  v264.i64[1] = v262.u32[3];
                  uint64x2_t v265 = v264;
                  v264.i64[0] = v262.u32[0];
                  v264.i64[1] = v262.u32[1];
                  uint64x2_t v266 = v264;
                  v264.i64[0] = v263.u32[2];
                  v264.i64[1] = v263.u32[3];
                  uint64x2_t v267 = v264;
                  v264.i64[0] = v263.u32[0];
                  v264.i64[1] = v263.u32[1];
                  uint64x2_t v268 = (uint64x2_t)vnegq_s64(v256);
                  v258[-2] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v266, v268), v257), v260);
                  v258[-1] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v265, v268), v257), v260);
                  *unint64_t v258 = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v264, v268), v257), v260);
                  v258[1] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v267, v268), v257), v260);
                  v258 += 4;
                  v261 += 2;
                  v259 -= 8;
                }
                while (v259);
                unint64_t v226 = v419;
                if (v7 == v419) {
                  goto LABEL_250;
                }
              }
              else
              {
                unint64_t v226 = 0;
              }
              unint64_t v269 = v7 - v226;
              int64x2_t v270 = (void *)((char *)v222 + 8 * v226);
              int8x16_t v271 = &v6->i32[v226];
              do
              {
                int v273 = *v271++;
                LODWORD(v272) = v273;
                if (v273 >= 0) {
                  unint64_t v272 = v272;
                }
                else {
                  unint64_t v272 = -(int)v272;
                }
                *v270++ = ((v272 >> v431) & v225) - v434;
                --v269;
              }
              while (v269);
            }
            else
            {
              if (v7 >= 8)
              {
                int64x2_t v241 = vdupq_n_s64(v434);
                unint64_t v242 = (int64x2_t *)((char *)v222 + 32);
                unint64_t v243 = v419;
                unsigned int v244 = v412;
                do
                {
                  int32x4_t v245 = vabsq_s32(v244[-1]);
                  int32x4_t v246 = vabsq_s32(*v244);
                  v247.i64[0] = v245.u32[2];
                  v247.i64[1] = v245.u32[3];
                  int64x2_t v248 = v247;
                  v247.i64[0] = v245.u32[0];
                  v247.i64[1] = v245.u32[1];
                  int64x2_t v249 = v247;
                  v247.i64[0] = v246.u32[2];
                  v247.i64[1] = v246.u32[3];
                  int64x2_t v250 = v247;
                  v247.i64[0] = v246.u32[0];
                  v247.i64[1] = v246.u32[1];
                  v242[-2] = vsubq_s64(v249, v241);
                  v242[-1] = vsubq_s64(v248, v241);
                  *unint64_t v242 = vsubq_s64(v247, v241);
                  v242[1] = vsubq_s64(v250, v241);
                  v242 += 4;
                  v244 += 2;
                  v243 -= 8;
                }
                while (v243);
                unint64_t v223 = v419;
                if (v7 == v419) {
                  goto LABEL_250;
                }
              }
              else
              {
                unint64_t v223 = 0;
              }
              unint64_t v251 = v7 - v223;
              unint64_t v252 = (void *)((char *)v222 + 8 * v223);
              uint64_t v253 = &v6->i32[v223];
              do
              {
                int v255 = *v253++;
                LODWORD(v254) = v255;
                if (v255 >= 0) {
                  uint64_t v254 = v254;
                }
                else {
                  uint64_t v254 = -(int)v254;
                }
                *v252++ = v254 - v434;
                --v251;
              }
              while (v251);
            }
LABEL_250:
            int64x2_t v274 = (unsigned char *)v8[3];
            uint32x4_t v275 = (char *)v8[4];
            unint64_t v276 = v275 - v274;
            if (v210 <= v275 - v274)
            {
              if (v210 < v275 - v274)
              {
                uint32x4_t v275 = &v274[v210];
                v8[4] = &v274[v210];
              }
LABEL_282:
              *(void *)&long long __src = 0;
              uint64_t v295 = v434;
              int v422 = mgcl::muid::compress(v222, (const unint64_t *)8, v7, 0, 0, 0, (unsigned char *)*v424, &v275[-*v424], &__src, v407);
              if (v422 || (unint64_t v296 = __src, (unint64_t)__src >= *(void *)(v432 + 8)))
              {
LABEL_315:
                int v6 = v427;
                unint64_t v13 = v428;
                unint64_t v7 = v433;
                uint64_t v12 = v425;
                uint64_t v26 = v430;
                unint64_t v65 = v435;
                if ((v425 & 4) == 0) {
                  goto LABEL_332;
                }
                goto LABEL_316;
              }
              uint32x4_t v297 = (unsigned char *)v8[3];
              int64x2_t v298 = (unsigned char *)v8[4];
              long long v299 = *(_OWORD *)(v8 + 9);
              v8[9] = v297;
              v8[10] = v298;
              *(_OWORD *)(v8 + 3) = v299;
              uint64_t v300 = v8[11];
              uint64_t v301 = v8[5];
              v8[11] = v301;
              v8[5] = v300;
              unint64_t v302 = v298 - v297;
              if (v296 <= v298 - v297)
              {
                if (v296 < v298 - v297) {
                  v8[10] = &v297[v296];
                }
                goto LABEL_314;
              }
              if (v301 - (uint64_t)v298 >= v296 - (v298 - v297))
              {
                bzero(v298, v296 - (v298 - v297));
                v8[10] = &v297[v296];
LABEL_314:
                uint64_t v319 = __src;
                *(unsigned char *)uint64_t v432 = 2;
                *(void *)(v432 + 8) = v319;
                *(void *)(v432 + 16) = v435;
                *(void *)(v432 + 24) = v295;
                *(void *)(v432 + 32) = 0;
                *(_DWORD *)(v432 + 40) = 0;
                goto LABEL_315;
              }
              if ((v296 & 0x8000000000000000) != 0) {
                goto LABEL_431;
              }
              unint64_t v303 = v301 - (void)v297;
              uint64_t v304 = 2 * v303;
              if (2 * v303 <= v296) {
                uint64_t v304 = v296;
              }
              if (v303 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v305 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v305 = v304;
              }
              int64x2_t v306 = (char *)operator new(v305);
              int64x2_t v307 = &v306[v302];
              bzero(&v306[v302], v296 - (v298 - v297));
              if (v298 == v297)
              {
LABEL_312:
                v8[9] = v307;
                v8[10] = &v306[v296];
                v8[11] = &v306[v305];
                uint64_t v295 = v434;
                if (v297) {
                  operator delete(v297);
                }
                goto LABEL_314;
              }
              if (v302 >= 8 && (unint64_t)(v297 - v306) >= 0x20)
              {
                if (v302 < 0x20)
                {
                  unint64_t v308 = 0;
                  goto LABEL_304;
                }
                unint64_t v308 = v302 & 0xFFFFFFFFFFFFFFE0;
                unsigned int v309 = &v306[v302 - 16];
                unsigned int v310 = (long long *)(v298 - 16);
                unint64_t v311 = v302 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v312 = *v310;
                  *((_OWORD *)v309 - 1) = *(v310 - 1);
                  *(_OWORD *)unsigned int v309 = v312;
                  v309 -= 32;
                  v310 -= 2;
                  v311 -= 32;
                }
                while (v311);
                if (v302 == v308) {
                  goto LABEL_311;
                }
                if ((v302 & 0x18) != 0)
                {
LABEL_304:
                  v307 -= v302 & 0xFFFFFFFFFFFFFFF8;
                  uint32x4_t v313 = &v306[&v298[-v308] - v297 - 8];
                  uint64x2_t v314 = (uint64_t *)&v298[-v308 - 8];
                  unint64_t v315 = v308 - (v302 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    uint64_t v316 = *v314--;
                    *(void *)uint32x4_t v313 = v316;
                    v313 -= 8;
                    v315 += 8;
                  }
                  while (v315);
                  v298 -= v302 & 0xFFFFFFFFFFFFFFF8;
                  if (v302 == (v302 & 0xFFFFFFFFFFFFFFF8)) {
                    goto LABEL_311;
                  }
                  goto LABEL_309;
                }
                v307 -= v308;
                v298 -= v308;
              }
LABEL_309:
              uint32x4_t v317 = v307 - 1;
              do
              {
                char v318 = *--v298;
                *v317-- = v318;
              }
              while (v298 != v297);
LABEL_311:
              int64x2_t v307 = v306;
              goto LABEL_312;
            }
            uint64_t v277 = v8[5];
            if (v277 - (uint64_t)v275 >= v210 - (v275 - v274))
            {
              bzero((void *)v8[4], v210 - (v275 - v274));
              v8[4] = &v274[v210];
              uint32x4_t v275 = &v274[v210];
              goto LABEL_282;
            }
            if ((v210 & 0x8000000000000000) != 0) {
              goto LABEL_431;
            }
            unint64_t v278 = v277 - (void)v274;
            uint64_t v279 = 2 * v278;
            if (2 * v278 <= v210) {
              uint64_t v279 = v210;
            }
            if (v278 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v280 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v280 = v279;
            }
            uint64x2_t v281 = (char *)operator new(v280);
            uint64x2_t v282 = &v281[v276];
            bzero(&v281[v276], v210 - (v275 - v274));
            if (v275 == v274)
            {
              int64x2_t v274 = v275;
              uint64_t v283 = v415;
              goto LABEL_280;
            }
            if (v276 < 8)
            {
              uint64_t v283 = v415;
              goto LABEL_277;
            }
            uint64_t v283 = v415;
            if ((unint64_t)(v274 - v281) >= 0x20)
            {
              if (v276 < 0x20)
              {
                unint64_t v284 = 0;
                goto LABEL_272;
              }
              unint64_t v284 = v276 & 0xFFFFFFFFFFFFFFE0;
              uint64x2_t v285 = &v281[v276 - 16];
              uint64x2_t v286 = v275 - 16;
              unint64_t v287 = v276 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v288 = *(_OWORD *)v286;
                *((_OWORD *)v285 - 1) = *((_OWORD *)v286 - 1);
                *(_OWORD *)uint64x2_t v285 = v288;
                v285 -= 32;
                v286 -= 32;
                v287 -= 32;
              }
              while (v287);
              if (v276 == v284) {
                goto LABEL_279;
              }
              if ((v276 & 0x18) != 0)
              {
LABEL_272:
                v282 -= v276 & 0xFFFFFFFFFFFFFFF8;
                unint64_t v289 = &v281[&v275[-v284] - v274 - 8];
                v290 = &v275[-v284 - 8];
                unint64_t v291 = v284 - (v276 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v292 = *(void *)v290;
                  v290 -= 8;
                  *(void *)unint64_t v289 = v292;
                  v289 -= 8;
                  v291 += 8;
                }
                while (v291);
                v275 -= v276 & 0xFFFFFFFFFFFFFFF8;
                if (v276 == (v276 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_279;
                }
                goto LABEL_277;
              }
              v282 -= v284;
              v275 -= v284;
            }
LABEL_277:
            uint32x4_t v293 = v282 - 1;
            do
            {
              char v294 = *--v275;
              *v293-- = v294;
            }
            while (v275 != v274);
LABEL_279:
            uint64x2_t v282 = v281;
LABEL_280:
            uint32x4_t v275 = &v281[v283];
            v417[3] = v282;
            v417[4] = &v281[v283];
            uint64_t v8 = v417;
            v417[5] = &v281[v280];
            unint64_t v7 = v433;
            if (v274)
            {
              operator delete(v274);
              uint32x4_t v275 = (char *)v417[4];
            }
            goto LABEL_282;
          }
          if (v7 >= 8)
          {
            int64x2_t v227 = vdupq_n_s64(v434);
            unsigned int v228 = (int64x2_t *)((char *)v222 + 32);
            unint64_t v229 = v419;
            unint64_t v230 = (uint32x4_t *)v412;
            do
            {
              uint32x4_t v231 = vshrq_n_u32(v230[-1], 0x1FuLL);
              uint32x4_t v232 = vshrq_n_u32(*v230, 0x1FuLL);
              v233.i64[0] = v231.u32[2];
              v233.i64[1] = v231.u32[3];
              int64x2_t v234 = v233;
              v233.i64[0] = v231.u32[0];
              v233.i64[1] = v231.u32[1];
              int64x2_t v235 = v233;
              v233.i64[0] = v232.u32[2];
              v233.i64[1] = v232.u32[3];
              int64x2_t v236 = v233;
              v233.i64[0] = v232.u32[0];
              v233.i64[1] = v232.u32[1];
              v228[-2] = vsubq_s64(v235, v227);
              v228[-1] = vsubq_s64(v234, v227);
              int64x2_t *v228 = vsubq_s64(v233, v227);
              v228[1] = vsubq_s64(v236, v227);
              v228 += 4;
              v230 += 2;
              v229 -= 8;
            }
            while (v229);
            unint64_t v224 = v419;
            if (v7 == v419) {
              goto LABEL_250;
            }
          }
          else
          {
            unint64_t v224 = 0;
          }
          unint64_t v237 = v7 - v224;
          unint64_t v238 = (void *)((char *)v222 + 8 * v224);
          unint64_t v239 = &v6->i32[v224];
          do
          {
            unsigned int v240 = *v239++;
            *v238++ = ((unint64_t)v240 >> 31) - v434;
            --v237;
          }
          while (v237);
          goto LABEL_250;
        }
        uint64_t v204 = v8[2];
        if (v204 - (uint64_t)v200 >= v203)
        {
          bzero((void *)v8[1], v416 - v201);
          v8[1] = &v200[v203];
          unint64_t v210 = v415;
          goto LABEL_218;
        }
        if ((v416 & 0x8000000000000000) != 0) {
          goto LABEL_431;
        }
        unint64_t v205 = v204 - (void)v199;
        uint64_t v206 = 2 * v205;
        if (2 * v205 <= v416) {
          uint64_t v206 = v416;
        }
        if (v205 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v207 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v207 = v206;
        }
        BOOL v208 = (char *)operator new(v207);
        unsigned int v209 = &v208[v201];
        bzero(&v208[v201], v203);
        if (v200 == v199)
        {
          unint64_t v7 = v433;
          goto LABEL_216;
        }
        if (v201 < 8)
        {
          unint64_t v7 = v433;
          goto LABEL_213;
        }
        unint64_t v7 = v433;
        if ((unint64_t)(v199 - v208) >= 0x20)
        {
          if (v201 < 0x20)
          {
            unint64_t v211 = 0;
            goto LABEL_208;
          }
          unint64_t v211 = v201 & 0xFFFFFFFFFFFFFFE0;
          uint32x4_t v212 = &v208[v201 - 16];
          uint64x2_t v213 = v200 - 16;
          unint64_t v214 = v201 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v215 = *(_OWORD *)v213;
            *((_OWORD *)v212 - 1) = *((_OWORD *)v213 - 1);
            *(_OWORD *)uint32x4_t v212 = v215;
            v212 -= 32;
            v213 -= 32;
            v214 -= 32;
          }
          while (v214);
          if (v201 == v211) {
            goto LABEL_215;
          }
          if ((v201 & 0x18) != 0)
          {
LABEL_208:
            v209 -= v201 & 0xFFFFFFFFFFFFFFF8;
            uint16x8_t v216 = &v208[&v200[-v211] - v199 - 8];
            uint32x4_t v217 = &v200[-v211 - 8];
            unint64_t v218 = v211 - (v201 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v219 = *(void *)v217;
              v217 -= 8;
              *(void *)uint16x8_t v216 = v219;
              v216 -= 8;
              v218 += 8;
            }
            while (v218);
            v200 -= v201 & 0xFFFFFFFFFFFFFFF8;
            if (v201 == (v201 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_215;
            }
            goto LABEL_213;
          }
          v209 -= v211;
          v200 -= v211;
        }
LABEL_213:
        uint32x4_t v220 = v209 - 1;
        do
        {
          char v221 = *--v200;
          *v220-- = v221;
        }
        while (v200 != v199);
LABEL_215:
        int64x2_t v200 = v199;
        unsigned int v209 = v208;
LABEL_216:
        unint64_t v210 = v415;
        *uint64_t v8 = v209;
        v8[1] = &v208[v416];
        v8[2] = &v208[v207];
        int v6 = v427;
        if (v200) {
          operator delete(v200);
        }
        goto LABEL_218;
      }
      if ((v420 & 0x8000000000000000) != 0) {
        goto LABEL_431;
      }
      unint64_t v60 = v59 - (void)v55;
      uint64_t v61 = 2 * v60;
      if (2 * v60 <= v420) {
        uint64_t v61 = v420;
      }
      if (v60 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v62 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v62 = v61;
      }
      uint64_t v63 = (char *)operator new(v62);
      uint64_t v64 = &v63[v57];
      bzero(&v63[v57], v58);
      if (v56 == v55)
      {
        unint64_t v7 = v433;
        goto LABEL_157;
      }
      if (v57 < 8)
      {
        unint64_t v7 = v433;
        goto LABEL_154;
      }
      unint64_t v7 = v433;
      if ((unint64_t)(v55 - v63) >= 0x20)
      {
        if (v57 < 0x20)
        {
          unint64_t v70 = 0;
          goto LABEL_111;
        }
        unint64_t v70 = v57 & 0xFFFFFFFFFFFFFFE0;
        long long v79 = &v63[v57 - 16];
        uint64_t v80 = v56 - 16;
        unint64_t v81 = v57 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v82 = *(_OWORD *)v80;
          *((_OWORD *)v79 - 1) = *((_OWORD *)v80 - 1);
          *(_OWORD *)long long v79 = v82;
          v79 -= 32;
          v80 -= 32;
          v81 -= 32;
        }
        while (v81);
        if (v57 == v70) {
          goto LABEL_156;
        }
        if ((v57 & 0x18) != 0)
        {
LABEL_111:
          v64 -= v57 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v83 = &v63[&v56[-v70] - v55 - 8];
          int v84 = &v56[-v70 - 8];
          unint64_t v85 = v70 - (v57 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v86 = *(void *)v84;
            v84 -= 8;
            *(void *)uint64_t v83 = v86;
            v83 -= 8;
            v85 += 8;
          }
          while (v85);
          v56 -= v57 & 0xFFFFFFFFFFFFFFF8;
          if (v57 == (v57 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_156;
          }
          goto LABEL_154;
        }
        v64 -= v70;
        v56 -= v70;
      }
LABEL_154:
      int64x2_t v161 = v64 - 1;
      do
      {
        char v162 = *--v56;
        *v161-- = v162;
      }
      while (v56 != v55);
LABEL_156:
      uint64_t v56 = v55;
      uint64_t v64 = v63;
LABEL_157:
      unint64_t v68 = v419;
      *uint64_t v8 = v64;
      v8[1] = &v63[v420];
      v8[2] = &v63[v62];
      int v6 = v427;
      uint64_t v12 = v425;
      if (v56) {
        operator delete(v56);
      }
      goto LABEL_159;
    }
    uint64_t v31 = 0;
    uint64_t v32 = ~(-1 << v25);
    do
    {
      while (1)
      {
        unint64_t v34 = v6->u32[v31];
        if (!v28) {
          break;
        }
        if ((v34 & 0x80000000) == 0) {
          unint64_t v34 = v34;
        }
        else {
          unint64_t v34 = -(int)v34;
        }
        if (v28 <= 0x3F) {
          unint64_t v34 = (v34 >> v29) & v32;
        }
        if (v34 < v30) {
          unint64_t v30 = v34;
        }
        if (v7 == ++v31) {
          goto LABEL_39;
        }
      }
      unint64_t v33 = v34 >> 31;
      if (v33 < v30) {
        unint64_t v30 = v33;
      }
      ++v31;
    }
    while (v7 != v31);
LABEL_39:
    unint64_t v35 = 0;
    uint64_t v36 = v6;
    unint64_t v37 = v7;
    do
    {
      while (1)
      {
        unsigned int v40 = v36->i32[0];
        uint64_t v36 = (int32x4_t *)((char *)v36 + 4);
        unint64_t v39 = v40;
        if (!v28) {
          break;
        }
        if ((v39 & 0x80000000) == 0) {
          unint64_t v39 = v39;
        }
        else {
          unint64_t v39 = -(int)v39;
        }
        if (v28 <= 0x3F) {
          unint64_t v39 = (v39 >> v29) & v32;
        }
        unint64_t v41 = v39 - v30;
        if (v35 <= v41) {
          unint64_t v35 = v41;
        }
        if (!--v37) {
          goto LABEL_52;
        }
      }
      unint64_t v38 = (v39 >> 31) - v30;
      if (v35 <= v38) {
        unint64_t v35 = v38;
      }
      --v37;
    }
    while (v37);
LABEL_52:
    unsigned int v42 = 1;
    if (v35 >= 2)
    {
      do
      {
        ++v42;
        BOOL v43 = v35 > 3;
        v35 >>= 1;
      }
      while (v43);
    }
    uint64_t v434 = v30;
    unint64_t v431 = v29;
    uint64_t v430 = v26;
    unint64_t v435 = v28;
    if (v12) {
      goto LABEL_57;
    }
LABEL_81:
    int v422 = 0;
    if ((v12 & 2) != 0) {
      goto LABEL_186;
    }
LABEL_82:
    unint64_t v65 = v435;
    if ((v12 & 4) == 0) {
      goto LABEL_332;
    }
LABEL_316:
    uint64_t v321 = *v8;
    uint64_t v320 = v8[1];
    if (v320 != *v8)
    {
      v8[1] = v321;
      uint64_t v320 = v321;
    }
    long long __src = 0uLL;
    *(void *)&v442[0] = v8;
    if (v7)
    {
      uint64_t v322 = ~(-1 << v65);
      uint32x4_t v323 = v6;
      unint64_t v324 = v7;
      do
      {
        unsigned int v326 = v323->i32[0];
        uint32x4_t v323 = (int32x4_t *)((char *)v323 + 4);
        unint64_t v325 = v326;
        if (v435)
        {
          if ((v325 & 0x80000000) == 0) {
            unint64_t v325 = v325;
          }
          else {
            unint64_t v325 = -(int)v325;
          }
          if (v435 <= 0x3F) {
            unint64_t v325 = (v325 >> v431) & v322;
          }
        }
        else
        {
          v325 >>= 31;
        }
        geo::WriteBitstream::writeVariableInt((geo::WriteBitstream *)&__src, v325 - v434);
        --v324;
      }
      while (v324);
      uint64_t v321 = *v8;
      uint64_t v320 = v8[1];
      uint64_t v26 = v430;
      unint64_t v65 = v435;
    }
    uint64_t v327 = v320 - v321;
    if ((unint64_t)(v320 - v321) < *(void *)(v432 + 8))
    {
      long long v328 = *(_OWORD *)(v8 + 9);
      v8[9] = v321;
      v8[10] = v320;
      *(_OWORD *)uint64_t v8 = v328;
      uint64_t v329 = v8[11];
      v8[11] = v8[2];
      v8[2] = v329;
      *(unsigned char *)uint64_t v432 = 3;
      *(void *)(v432 + 8) = v327;
      *(void *)(v432 + 16) = v65;
      *(void *)(v432 + 24) = v434;
      *(void *)(v432 + 32) = 0;
      *(_DWORD *)(v432 + 40) = 0;
    }
LABEL_332:
    if ((v12 & 8) == 0 || v65 > 0x20) {
      goto LABEL_408;
    }
    long long v330 = (char *)*v8;
    v331 = (char *)v8[1];
    unint64_t v332 = (unint64_t)&v331[-*v8];
    BOOL v333 = v420 >= v332;
    size_t v334 = v420 - v332;
    if (v420 <= v332)
    {
      unint64_t v13 = v428;
      if (!v333) {
        v8[1] = &v330[v420];
      }
      goto LABEL_366;
    }
    uint64_t v335 = v8[2];
    if (v335 - (uint64_t)v331 < v334)
    {
      if ((v420 & 0x8000000000000000) != 0) {
LABEL_431:
      }
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      unint64_t v336 = v335 - (void)v330;
      uint64_t v337 = 2 * v336;
      if (2 * v336 <= v420) {
        uint64_t v337 = v420;
      }
      if (v336 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v338 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v338 = v337;
      }
      int16x8_t v339 = (char *)operator new(v338);
      int16x8_t v340 = &v339[v332];
      bzero(&v339[v332], v334);
      if (v331 == v330)
      {
        unint64_t v7 = v433;
        goto LABEL_364;
      }
      if (v332 < 8)
      {
        unint64_t v7 = v433;
        goto LABEL_361;
      }
      unint64_t v7 = v433;
      if ((unint64_t)(v330 - v339) >= 0x20)
      {
        if (v332 < 0x20)
        {
          unint64_t v341 = 0;
          goto LABEL_356;
        }
        unint64_t v341 = v332 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v342 = &v339[v332 - 16];
        uint64_t v343 = v331 - 16;
        unint64_t v344 = v332 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v345 = *(_OWORD *)v343;
          *((_OWORD *)v342 - 1) = *((_OWORD *)v343 - 1);
          *(_OWORD *)uint64_t v342 = v345;
          v342 -= 32;
          v343 -= 32;
          v344 -= 32;
        }
        while (v344);
        if (v332 == v341) {
          goto LABEL_363;
        }
        if ((v332 & 0x18) != 0)
        {
LABEL_356:
          v340 -= v332 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v346 = &v339[&v331[-v341] - v330 - 8];
          uint64_t v347 = &v331[-v341 - 8];
          unint64_t v348 = v341 - (v332 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v349 = *(void *)v347;
            v347 -= 8;
            *(void *)unint64_t v346 = v349;
            v346 -= 8;
            v348 += 8;
          }
          while (v348);
          v331 -= v332 & 0xFFFFFFFFFFFFFFF8;
          if (v332 == (v332 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_363;
          }
          goto LABEL_361;
        }
        v340 -= v341;
        v331 -= v341;
      }
LABEL_361:
      unsigned __int8 v350 = v340 - 1;
      do
      {
        char v351 = *--v331;
        *v350-- = v351;
      }
      while (v331 != v330);
LABEL_363:
      v331 = v330;
      int16x8_t v340 = v339;
LABEL_364:
      *uint64_t v8 = v340;
      v8[1] = &v339[v420];
      v8[2] = &v339[v338];
      int v6 = v427;
      unint64_t v13 = v428;
      uint64_t v12 = v425;
      uint64_t v26 = v430;
      if (v331) {
        operator delete(v331);
      }
      goto LABEL_366;
    }
    bzero((void *)v8[1], v420 - v332);
    v8[1] = &v331[v334];
    unint64_t v13 = v428;
LABEL_366:
    uint64_t v352 = (geo *)*v8;
    unint64_t v353 = v435;
    if (v7)
    {
      if (v435)
      {
        unint64_t v354 = 0;
        unint64_t v355 = ~(-1 << v435);
        if (v7 < 8) {
          goto LABEL_373;
        }
        if ((unint64_t)(v352 - (geo *)v6) < 0x20) {
          goto LABEL_373;
        }
        int64x2_t v356 = vdupq_n_s64(v431);
        int8x16_t v357 = (int8x16_t)vdupq_n_s64(v355);
        unint64_t v358 = (int32x4_t *)((char *)v352 + 16);
        unint64_t v359 = v419;
        int64x2_t v360 = vdupq_n_s64(v434);
        char v361 = v412;
        do
        {
          int32x4_t v362 = vabsq_s32(v361[-1]);
          int32x4_t v363 = vabsq_s32(*v361);
          v364.i64[0] = v362.u32[0];
          v364.i64[1] = v362.u32[1];
          uint64x2_t v365 = v364;
          v364.i64[0] = v362.u32[2];
          v364.i64[1] = v362.u32[3];
          uint64x2_t v366 = v364;
          v364.i64[0] = v363.u32[0];
          v364.i64[1] = v363.u32[1];
          uint64x2_t v367 = v364;
          v364.i64[0] = v363.u32[2];
          v364.i64[1] = v363.u32[3];
          uint64x2_t v368 = (uint64x2_t)vnegq_s64(v356);
          v358[-1] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v365, v368), v357), v360), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v366, v368), v357), v360));
          *unint64_t v358 = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v367, v368), v357), v360), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v364, v368), v357), v360));
          v361 += 2;
          v358 += 2;
          v359 -= 8;
        }
        while (v359);
        unint64_t v354 = v419;
        if (v7 != v419)
        {
LABEL_373:
          unint64_t v369 = v7 - v354;
          uint64_t v370 = v354;
          uint64_t v371 = (_DWORD *)((char *)v352 + 4 * v354);
          unint64_t v372 = &v6->i32[v370];
          do
          {
            int v374 = *v372++;
            LODWORD(v373) = v374;
            if (v374 >= 0) {
              unint64_t v373 = v373;
            }
            else {
              unint64_t v373 = -(int)v373;
            }
            *v371++ = ((v373 >> v431) & v355) - v434;
            --v369;
          }
          while (v369);
        }
      }
      else
      {
        if (v7 < 8) {
          goto LABEL_384;
        }
        if ((unint64_t)(v352 - (geo *)v6) < 0x20) {
          goto LABEL_384;
        }
        int32x4_t v375 = vdupq_n_s32(v434);
        unint64_t v376 = (int32x4_t *)((char *)v352 + 16);
        unint64_t v377 = v419;
        size_t v378 = (uint32x4_t *)v412;
        do
        {
          int32x4_t v379 = vsubq_s32((int32x4_t)vshrq_n_u32(*v378, 0x1FuLL), v375);
          v376[-1] = vsubq_s32((int32x4_t)vshrq_n_u32(v378[-1], 0x1FuLL), v375);
          *unint64_t v376 = v379;
          v378 += 2;
          v376 += 2;
          v377 -= 8;
        }
        while (v377);
        unint64_t v353 = v419;
        if (v7 != v419)
        {
LABEL_384:
          unint64_t v380 = v7 - v353;
          uint64_t v381 = v353;
          uint64_t v382 = (_DWORD *)((char *)v352 + 4 * v353);
          uint64_t v383 = &v6->i32[v381];
          do
          {
            unsigned int v384 = *v383++;
            *v382++ = (v384 >> 31) - v434;
            --v380;
          }
          while (v380);
        }
      }
    }
    if ((v12 & 0x400000000) != 0)
    {
      uint64_t v385 = v8[3];
      if (v8[4] != v385) {
        v8[4] = v385;
      }
      long long __src = 0uLL;
      *(void *)&v442[0] = v424;
      operator new();
    }
    if ((v12 & 0x800000000) != 0)
    {
      if (v7)
      {
        int v386 = 0;
        unsigned int v387 = -1;
        do
        {
          unint64_t v389 = 0;
          unsigned int v388 = 0;
          char v390 = v386++;
          unsigned int v391 = 1;
          while (1)
          {
            int v392 = (*((_DWORD *)v352 + v389) >> v390) + v386;
            if (__CFADD__(v388, v392)) {
              break;
            }
            v388 += v392;
            unint64_t v389 = v391++;
            if (v7 <= v389) {
              goto LABEL_394;
            }
          }
          unsigned int v388 = -1;
LABEL_394:
          if (v388 < v387) {
            unsigned int v387 = v388;
          }
        }
        while (v386 != 32);
      }
      uint64_t v393 = v8[3];
      if (v8[4] != v393) {
        v8[4] = v393;
      }
      long long __src = 0uLL;
      *(void *)&v442[0] = v424;
      operator new();
    }
    if ((v12 & 0x1000000000) != 0)
    {
      unint64_t v439 = geo::computeRiceParam2(v352, v7, v16, v17);
      int v440 = v394;
      uint64_t v395 = v8[3];
      if (v8[4] != v395) {
        v8[4] = v395;
      }
      long long __src = 0uLL;
      *(void *)&v442[0] = v424;
      operator new();
    }
LABEL_408:
    if (!*(unsigned char *)v432) {
      break;
    }
    LOBYTE(__src) = *(unsigned char *)v432;
    uint64_t v396 = (uint64_t)v438;
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((uint64_t)v438, (char *)v438[1], (char *)&__src, (char *)&__src + 1, 1);
    geo::WriteBitstream::writeVariableInt((geo::WriteBitstream *)&v436, *(void *)(v26 + 48 * v426 + 24));
    uint64_t v397 = v26 + 48 * v426;
    geo::WriteBitstream::writeVariableInt((geo::WriteBitstream *)&v436, *(void *)(v397 + 8));
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v396, *(char **)(v396 + 8), *v418, &(*v418)[*(void *)(v397 + 8)], *(void *)(v397 + 8));
    unint64_t v24 = v426 + 1;
    unint64_t v19 = v431;
    unint64_t v22 = v410 + 2;
    if (v426 + 1 == v13) {
      goto LABEL_410;
    }
  }
  if (v422) {
    int v398 = v422;
  }
  else {
    int v398 = 6;
  }
  uint64_t v399 = v437;
  if (v437)
  {
LABEL_416:
    unsigned int v400 = *(void **)v399;
    if (*(void *)v399)
    {
      *(void *)(v399 + 8) = v400;
      operator delete(v400);
    }
    MEMORY[0x18C11F580](v399, 0x10C402FEFCB83);
  }
LABEL_419:
  uint64_t v401 = v436;
  if (v436)
  {
    unint64_t v402 = *(void **)v436;
    if (*(void *)v436)
    {
      *(void *)(v436 + 8) = v402;
      operator delete(v402);
    }
    MEMORY[0x18C11F580](v401, 0x1010C40A6F07D10);
  }
  **(_DWORD **)uint64_t v409 = v398;
  if (!v398)
  {
    int32x4_t v403 = *(uint64_t **)(v409 + 40);
    uint64_t v404 = **(void **)(v409 + 48);
    if ((unint64_t)*v403 < *(void *)v404)
    {
      uint64_t v405 = *v403;
      *(unsigned char *)(v404 + 8) = *((unsigned char *)v403 + 8);
      *(void *)uint64_t v404 = v405;
      if ((uint64_t *)v404 != v403) {
        std::vector<mgcl::ints::ColumnInfo>::__assign_with_size[abi:ne180100]<mgcl::ints::ColumnInfo*,mgcl::ints::ColumnInfo*>((void *)(v404 + 16), (char *)v403[2], (char *)v403[3], 0xAAAAAAAAAAAAAAABLL * ((v403[3] - v403[2]) >> 4));
      }
      uint64_t v406 = **(void **)(v409 + 48);
      *(unsigned char *)(v406 + 8) = v408;
      if (*(void *)v406 > **(void **)(v409 + 56)) {
        **(_DWORD **)uint64_t v409 = 1;
      }
      memcpy(**(void ***)(v409 + 64), *v423, **(void **)(v409 + 40));
    }
  }
}

void sub_18A444744(_Unwind_Exception *a1)
{
  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_18A444758(_Unwind_Exception *a1)
{
  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_18A44476C(_Unwind_Exception *a1)
{
  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_18A444780(_Unwind_Exception *a1)
{
  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 176));
  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 216));
  _Unwind_Resume(a1);
}

void geo::WriteBitstream::writeVariableInt(geo::WriteBitstream *this, unint64_t a2)
{
  if (a2 < 0x80)
  {
    LOBYTE(v4) = a2;
  }
  else
  {
    char __src = a2 | 0x80;
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((void *)this + 2), *(char **)(*((void *)this + 2) + 8), &__src, (char *)&v7, 1);
    if (a2 < 0x4000)
    {
      unint64_t v4 = a2 >> 7;
    }
    else
    {
      char __src = (a2 >> 7) | 0x80;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((void *)this + 2), *(char **)(*((void *)this + 2) + 8), &__src, (char *)&v7, 1);
      if (a2 < 0x200000)
      {
        unint64_t v4 = a2 >> 14;
      }
      else
      {
        char __src = (a2 >> 14) | 0x80;
        std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((void *)this + 2), *(char **)(*((void *)this + 2) + 8), &__src, (char *)&v7, 1);
        unint64_t v4 = a2 >> 28;
        if (a2 >> 28)
        {
          char __src = (a2 >> 21) | 0x80;
          std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((void *)this + 2), *(char **)(*((void *)this + 2) + 8), &__src, (char *)&v7, 1);
          if (a2 >> 35)
          {
            char __src = v4 | 0x80;
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((void *)this + 2), *(char **)(*((void *)this + 2) + 8), &__src, (char *)&v7, 1);
            unint64_t v4 = a2 >> 35;
            if (a2 >> 42)
            {
              char __src = (a2 >> 35) | 0x80;
              std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((void *)this + 2), *(char **)(*((void *)this + 2) + 8), &__src, (char *)&v7, 1);
              unint64_t v4 = a2 >> 42;
              if (a2 >> 49)
              {
                char __src = (a2 >> 42) | 0x80;
                std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((void *)this + 2), *(char **)(*((void *)this + 2) + 8), &__src, (char *)&v7, 1);
                unint64_t v4 = a2 >> 49;
                if (HIBYTE(a2))
                {
                  char __src = (a2 >> 49) | 0x80;
                  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((void *)this + 2), *(char **)(*((void *)this + 2) + 8), &__src, (char *)&v7, 1);
                  unint64_t v4 = HIBYTE(a2);
                  if ((a2 & 0x8000000000000000) != 0)
                  {
                    char __src = HIBYTE(a2) | 0x80;
                    LOBYTE(v4) = 1;
                    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((void *)this + 2), *(char **)(*((void *)this + 2) + 8), &__src, (char *)&v7, 1);
                  }
                }
              }
            }
          }
        }
        else
        {
          unint64_t v4 = a2 >> 21;
        }
      }
    }
  }
  char v5 = v4;
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((void *)this + 2), *(char **)(*((void *)this + 2) + 8), &v5, &__src, 1);
}

void geo::WriteBitstream::~WriteBitstream(geo::WriteBitstream *this)
{
  uint64_t v2 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x18C11F580](v2, 0x10C402FEFCB83);
  }
  uint64_t v4 = *(void *)this;
  *(void *)this = 0;
  if (v4)
  {
    char v5 = *(void **)v4;
    if (*(void *)v4)
    {
      *(void *)(v4 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x18C11F580](v4, 0x1010C40A6F07D10);
  }
}

void std::vector<mgcl::ints::ColumnInfo>::__append(char **a1, unint64_t a2)
{
  char v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v12 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    int v6 = *a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x555555555555555;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v11 = (char *)operator new(48 * v10);
    }
    else
    {
      int v11 = 0;
    }
    unint64_t v13 = &v11[48 * v7];
    uint64_t v14 = &v11[48 * v10];
    size_t v15 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v13, v15);
    unint64_t v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        long long v17 = *((_OWORD *)v5 - 3);
        long long v18 = *((_OWORD *)v5 - 2);
        *(_OWORD *)(v13 - 20) = *(_OWORD *)(v5 - 20);
        *((_OWORD *)v13 - 3) = v17;
        *((_OWORD *)v13 - 2) = v18;
        v13 -= 48;
        v5 -= 48;
      }
      while (v5 != v6);
      char v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t mgcl::ints::anonymous namespace'::compressGCLIntArray<BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, gcl::ArithmeticEncoder ****a6, uint64_t *a7, uint64_t *a8, uint64_t a9)
{
  if (!a2) {
    return 6;
  }
  unint64_t v9 = a8;
  if (!*a6) {
    operator new();
  }
  unint64_t v15 = a2 + 69;
  long long v17 = (char *)*a7;
  unint64_t v16 = (char *)a7[1];
  unint64_t v18 = (unint64_t)&v16[-*a7];
  size_t v19 = a2 + 69 - v18;
  if (a2 + 69 <= v18)
  {
    if (a2 + 69 < v18) {
      a7[1] = (uint64_t)&v17[v15];
    }
  }
  else
  {
    uint64_t v20 = a7[2];
    if (v20 - (uint64_t)v16 >= v19)
    {
      bzero((void *)a7[1], a2 + 69 - v18);
      a7[1] = (uint64_t)&v16[v19];
      unint64_t v9 = a8;
      goto LABEL_36;
    }
    unint64_t v132 = (unint64_t)&v16[-*a7];
    if ((v15 & 0x8000000000000000) != 0) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v21 = v20 - (void)v17;
    uint64_t v22 = 2 * v21;
    if (2 * v21 <= v15) {
      uint64_t v22 = a2 + 69;
    }
    if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v23 = v22;
    }
    unint64_t v24 = (char *)operator new(v23);
    int32x4_t v129 = &v24[v23];
    int32x4_t v124 = v24;
    int v25 = &v24[a2 + 69];
    int32x4_t v125 = &v24[v132];
    bzero(&v24[v132], v19);
    if (v16 != v17)
    {
      if (v132 < 8)
      {
        uint64_t v26 = v129;
        uint64_t v27 = v124;
        unint64_t v15 = a2 + 69;
        unint64_t v28 = v125;
        goto LABEL_32;
      }
      uint64_t v27 = v124;
      unint64_t v15 = a2 + 69;
      uint64_t v26 = v129;
      unint64_t v28 = v125;
      if ((unint64_t)(v17 - v124) >= 0x20)
      {
        if (v132 < 0x20)
        {
          unint64_t v29 = 0;
          goto LABEL_27;
        }
        unint64_t v29 = v132 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v30 = v16 - 16;
        uint64_t v31 = &v124[v16 - 16 - v17];
        unint64_t v32 = v132 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v33 = *(_OWORD *)v30;
          *((_OWORD *)v31 - 1) = *((_OWORD *)v30 - 1);
          *(_OWORD *)uint64_t v31 = v33;
          v31 -= 32;
          v30 -= 32;
          v32 -= 32;
        }
        while (v32);
        if (v132 == v29) {
          goto LABEL_34;
        }
        if ((v132 & 0x18) != 0)
        {
LABEL_27:
          unint64_t v28 = &v125[-(v132 & 0xFFFFFFFFFFFFFFF8)];
          unint64_t v34 = &v16[-v29 - 8];
          unint64_t v35 = (char *)(v34 - v17);
          unint64_t v36 = v29 - (v132 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v37 = *(void *)v34;
            v34 -= 8;
            *(void *)&v35[(void)v124] = v37;
            v35 -= 8;
            v36 += 8;
          }
          while (v36);
          v16 -= v132 & 0xFFFFFFFFFFFFFFF8;
          if (v132 != (v132 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_32;
          }
LABEL_34:
          unint64_t v16 = v17;
          *a7 = (uint64_t)v27;
          a7[1] = (uint64_t)v25;
          a7[2] = (uint64_t)v26;
          unint64_t v9 = a8;
          if (!v17) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
        unint64_t v28 = &v125[-v29];
        v16 -= v29;
      }
LABEL_32:
      unint64_t v38 = v28 - 1;
      do
      {
        char v39 = *--v16;
        *v38-- = v39;
      }
      while (v16 != v17);
      goto LABEL_34;
    }
    unint64_t v15 = a2 + 69;
    *a7 = (uint64_t)v125;
    a7[1] = (uint64_t)v25;
    a7[2] = (uint64_t)v129;
    unint64_t v9 = a8;
    if (v16) {
LABEL_35:
    }
      operator delete(v16);
  }
LABEL_36:
  unint64_t v41 = (char *)*v9;
  unsigned int v40 = (char *)v9[1];
  unsigned int v42 = &v40[-*v9];
  size_t v43 = v15 - (void)v42;
  if (v15 <= (unint64_t)v42)
  {
    if (v15 < (unint64_t)v42) {
      v9[1] = (uint64_t)&v41[v15];
    }
    goto LABEL_68;
  }
  uint64_t v44 = v9[2];
  if (v44 - (uint64_t)v40 >= v43)
  {
    bzero((void *)v9[1], v15 - (void)v42);
    v9[1] = (uint64_t)&v40[v43];
    goto LABEL_68;
  }
  unint64_t v133 = (unint64_t)&v40[-*v9];
  if ((v15 & 0x8000000000000000) != 0) {
    goto LABEL_153;
  }
  unint64_t v45 = v44 - (void)v41;
  uint64_t v46 = 2 * v45;
  if (2 * v45 <= v15) {
    uint64_t v46 = v15;
  }
  if (v45 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v47 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v47 = v46;
  }
  uint64_t v48 = (char *)operator new(v47);
  unint64_t v49 = &v48[v47];
  int32x4_t v126 = v48;
  uint64x2_t v130 = &v48[v15];
  unint64_t v50 = &v48[v133];
  bzero(&v48[v133], v43);
  if (v40 == v41)
  {
    *a8 = (uint64_t)v50;
    a8[1] = (uint64_t)v130;
    a8[2] = (uint64_t)v49;
    if (!v40) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  if (v133 < 8)
  {
    uint64_t v51 = v126;
    size_t v52 = v130;
    goto LABEL_64;
  }
  uint64_t v51 = v126;
  size_t v52 = v130;
  if ((unint64_t)(v41 - v126) < 0x20)
  {
LABEL_64:
    size_t v62 = v50 - 1;
    do
    {
      char v63 = *--v40;
      *v62-- = v63;
    }
    while (v40 != v41);
    goto LABEL_66;
  }
  if (v133 < 0x20)
  {
    unint64_t v53 = 0;
    goto LABEL_59;
  }
  unint64_t v53 = v133 & 0xFFFFFFFFFFFFFFE0;
  BOOL v54 = v40 - 16;
  size_t v55 = &v126[v40 - 16 - v41];
  unint64_t v56 = v133 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v57 = *(_OWORD *)v54;
    *((_OWORD *)v55 - 1) = *((_OWORD *)v54 - 1);
    *(_OWORD *)size_t v55 = v57;
    v55 -= 32;
    v54 -= 32;
    v56 -= 32;
  }
  while (v56);
  if (v133 == v53) {
    goto LABEL_66;
  }
  if ((v133 & 0x18) == 0)
  {
    v50 -= v53;
    v40 -= v53;
    goto LABEL_64;
  }
LABEL_59:
  v50 -= v133 & 0xFFFFFFFFFFFFFFF8;
  size_t v58 = &v40[-v53 - 8];
  uint64_t v59 = (char *)(v58 - v41);
  unint64_t v60 = v53 - (v133 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    uint64_t v61 = *(void *)v58;
    v58 -= 8;
    *(void *)&v59[(void)v126] = v61;
    v59 -= 8;
    v60 += 8;
  }
  while (v60);
  v40 -= v133 & 0xFFFFFFFFFFFFFFF8;
  if (v133 != (v133 & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_64;
  }
LABEL_66:
  unsigned int v40 = v41;
  *a8 = (uint64_t)v51;
  a8[1] = (uint64_t)v52;
  a8[2] = (uint64_t)v49;
  if (v41) {
LABEL_67:
  }
    operator delete(v40);
LABEL_68:
  uint64_t v64 = 0;
  LODWORD(result) = 0;
  v136[0] = 2;
  uint64_t v137 = 0x10000;
  int v138 = 1;
  unint64_t v134 = -1;
  uint64_t v139 = 0x20000;
  int v140 = 0;
  uint64_t v141 = 0x40000;
  do
  {
    if ((*(void *)&v136[v64 + 2] & a5) != 0)
    {
      int v66 = v136[v64];
      if ((a5 & 0x10000) != 0)
      {
        unint64_t v135 = 0;
        uint64_t v67 = *a7;
        unint64_t v68 = a7[1] - *a7;
        unint64_t v69 = **a6;
        uint64_t v70 = 0x100010100000000;
        if (v66 == 2) {
          uint64_t v70 = 0x100040100000000;
        }
        if (!v66) {
          uint64_t v70 = 0x100000100000000;
        }
        *(void *)size_t v142 = v70;
        LODWORD(result) = gcl::polyline::EncoderImpl::compressAttributes(*v69, a1, 0, 0, 0, a2, 1, v67, v68, (uint64_t *)&v135, v142, 1);
        if ((result - 1) >= 4)
        {
          if (result)
          {
            LODWORD(result) = 5;
          }
          else
          {
            unint64_t v87 = v135;
            LODWORD(result) = 0;
            if (v135 < v134)
            {
              uint64_t v88 = *a8;
              *a8 = *a7;
              *a7 = v88;
              uint64_t v89 = a8[1];
              a8[1] = a7[1];
              a7[1] = v89;
              uint64_t v90 = a8[2];
              a8[2] = a7[2];
              a7[2] = v90;
              *(void *)(a9 + 32) = 0x100000001;
              *(_DWORD *)(a9 + 40) = v66;
              unint64_t v134 = v87;
            }
          }
        }
      }
      if ((a5 & 0x2000000) != 0)
      {
        unint64_t v135 = 0;
        uint64_t v71 = *a7;
        unint64_t v72 = a7[1] - *a7;
        unint64_t v73 = **a6;
        uint64_t v74 = 0x100010200000000;
        if (v66 == 2) {
          uint64_t v74 = 0x100040200000000;
        }
        if (!v66) {
          uint64_t v74 = 0x100000200000000;
        }
        *(void *)size_t v142 = v74;
        LODWORD(result) = gcl::polyline::EncoderImpl::compressAttributes(*v73, a1, 0, 0, 0, a2, 1, v71, v72, (uint64_t *)&v135, v142, 1);
        if ((result - 1) >= 4)
        {
          if (result)
          {
            LODWORD(result) = 5;
          }
          else
          {
            unint64_t v91 = v135;
            LODWORD(result) = 0;
            if (v135 < v134)
            {
              uint64_t v92 = *a8;
              *a8 = *a7;
              *a7 = v92;
              uint64_t v93 = a8[1];
              a8[1] = a7[1];
              a7[1] = v93;
              uint64_t v94 = a8[2];
              a8[2] = a7[2];
              a7[2] = v94;
              *(void *)(a9 + 32) = 0x100000002;
              *(_DWORD *)(a9 + 40) = v66;
              unint64_t v134 = v91;
            }
          }
        }
      }
      if ((a5 & 0x4000000) != 0)
      {
        unint64_t v135 = 0;
        uint64_t v75 = *a7;
        unint64_t v76 = a7[1] - *a7;
        unint64_t v77 = **a6;
        uint64_t v78 = 0x100010000000000;
        if (v66 == 2) {
          uint64_t v78 = 0x100040000000000;
        }
        if (!v66) {
          uint64_t v78 = 0x100000000000000;
        }
        *(void *)size_t v142 = v78;
        LODWORD(result) = gcl::polyline::EncoderImpl::compressAttributes(*v77, a1, 0, 0, 0, a2, 1, v75, v76, (uint64_t *)&v135, v142, 1);
        if ((result - 1) >= 4)
        {
          if (result)
          {
            LODWORD(result) = 5;
          }
          else
          {
            unint64_t v95 = v135;
            LODWORD(result) = 0;
            if (v135 < v134)
            {
              uint64_t v96 = *a8;
              *a8 = *a7;
              *a7 = v96;
              uint64_t v97 = a8[1];
              a8[1] = a7[1];
              a7[1] = v97;
              uint64_t v98 = a8[2];
              a8[2] = a7[2];
              a7[2] = v98;
              *(void *)(a9 + 32) = 0x100000000;
              *(_DWORD *)(a9 + 40) = v66;
              unint64_t v134 = v95;
            }
          }
        }
      }
      if ((a5 & 0x8000000) != 0)
      {
        unint64_t v135 = 0;
        uint64_t v79 = *a7;
        unint64_t v80 = a7[1] - *a7;
        unint64_t v81 = **a6;
        uint64_t v82 = 0x100010300000000;
        if (v66 == 2) {
          uint64_t v82 = 0x100040300000000;
        }
        if (!v66) {
          uint64_t v82 = 0x100000300000000;
        }
        *(void *)size_t v142 = v82;
        LODWORD(result) = gcl::polyline::EncoderImpl::compressAttributes(*v81, a1, 0, 0, 0, a2, 1, v79, v80, (uint64_t *)&v135, v142, 1);
        if ((result - 1) >= 4)
        {
          if (result)
          {
            LODWORD(result) = 5;
          }
          else
          {
            unint64_t v83 = v135;
            LODWORD(result) = 0;
            if (v135 < v134)
            {
              uint64_t v84 = *a8;
              *a8 = *a7;
              *a7 = v84;
              uint64_t v85 = a8[1];
              a8[1] = a7[1];
              a7[1] = v85;
              uint64_t v86 = a8[2];
              a8[2] = a7[2];
              a7[2] = v86;
              *(void *)(a9 + 32) = 0x100000003;
              *(_DWORD *)(a9 + 40) = v66;
              unint64_t v134 = v83;
            }
          }
        }
      }
    }
    v64 += 4;
  }
  while (v64 != 12);
  if (v134 != -1)
  {
    if (v134 >= 0x1C)
    {
      int32x4_t v99 = a8;
      *(unsigned char *)*a8 = *(_DWORD *)(a9 + 32);
      *(unsigned char *)(*a8 + 1) = *(_DWORD *)(a9 + 40);
      memmove((void *)(*a8 + 2), (const void *)(*a8 + 28), v134 - 28);
      unint64_t v100 = v134 - 26;
      uint64x2_t v102 = (char *)*a8;
      int32x4_t v101 = (char *)a8[1];
      unint64_t v103 = (unint64_t)&v101[-*a8];
      size_t v104 = v134 - 26 - v103;
      if (v134 - 26 <= v103)
      {
        uint32x4_t v112 = (char *)a8[1];
        if (v134 - 26 >= v103)
        {
LABEL_152:
          uint64_t result = 0;
          *(void *)(a9 + 16) = a3;
          *(void *)(a9 + 24) = a4;
          *(unsigned char *)a9 = 1;
          *(void *)(a9 + 8) = &v112[-*v99];
          return result;
        }
        uint32x4_t v112 = &v102[v100];
      }
      else
      {
        uint64_t v105 = a8[2];
        if (v105 - (uint64_t)v101 < v104)
        {
          if ((v100 & 0x8000000000000000) == 0)
          {
            unint64_t v106 = v105 - (void)v102;
            uint64_t v107 = 2 * v106;
            if (2 * v106 <= v100) {
              uint64_t v107 = v134 - 26;
            }
            if (v106 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v108 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v108 = v107;
            }
            uint64x2_t v109 = (char *)operator new(v108);
            uint32x4_t v110 = &v109[v103];
            uint32x4_t v111 = &v109[v108];
            uint32x4_t v112 = &v109[v100];
            bzero(&v109[v103], v104);
            if (v101 == v102) {
              goto LABEL_150;
            }
            if (v103 >= 8 && (unint64_t)(v102 - v109) >= 0x20)
            {
              if (v103 < 0x20)
              {
                unint64_t v113 = 0;
                goto LABEL_142;
              }
              unint64_t v113 = v103 & 0xFFFFFFFFFFFFFFE0;
              int64x2_t v114 = v101 - 16;
              int64x2_t v115 = &v109[v101 - 16 - v102];
              unint64_t v116 = v103 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v117 = *(_OWORD *)v114;
                *((_OWORD *)v115 - 1) = *((_OWORD *)v114 - 1);
                *(_OWORD *)int64x2_t v115 = v117;
                v115 -= 32;
                v114 -= 32;
                v116 -= 32;
              }
              while (v116);
              if (v103 == v113) {
                goto LABEL_149;
              }
              if ((v103 & 0x18) != 0)
              {
LABEL_142:
                v110 -= v103 & 0xFFFFFFFFFFFFFFF8;
                int64x2_t v118 = &v101[-v113 - 8];
                int64x2_t v119 = (char *)(v118 - v102);
                unint64_t v120 = v113 - (v103 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v121 = *(void *)v118;
                  v118 -= 8;
                  *(void *)&v119[(void)v109] = v121;
                  v119 -= 8;
                  v120 += 8;
                }
                while (v120);
                v101 -= v103 & 0xFFFFFFFFFFFFFFF8;
                if (v103 == (v103 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_149;
                }
                goto LABEL_147;
              }
              v110 -= v113;
              v101 -= v113;
            }
LABEL_147:
            int32x4_t v122 = v110 - 1;
            do
            {
              char v123 = *--v101;
              *v122-- = v123;
            }
            while (v101 != v102);
LABEL_149:
            int32x4_t v101 = v102;
            uint32x4_t v110 = v109;
LABEL_150:
            *a8 = (uint64_t)v110;
            a8[1] = (uint64_t)v112;
            int32x4_t v99 = a8;
            a8[2] = (uint64_t)v111;
            if (v101)
            {
              operator delete(v101);
              uint32x4_t v112 = (char *)a8[1];
            }
            goto LABEL_152;
          }
LABEL_153:
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        uint32x4_t v112 = &v101[v104];
        bzero((void *)a8[1], v104);
      }
      a8[1] = (uint64_t)v112;
      goto LABEL_152;
    }
    return 6;
  }
  if (result) {
    return result;
  }
  else {
    return 6;
  }
}

void sub_18A445720(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v2, 0x20C4093837F09);
  MEMORY[0x18C11F580](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t mgcl::ints::anonymous namespace'::compressGCLIntArray<int>(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int ****a6, uint64_t *a7, uint64_t *a8, uint64_t a9)
{
  if (!a2) {
    return 6;
  }
  unint64_t v9 = a8;
  if (!*a6) {
    operator new();
  }
  unint64_t v15 = 7 * a2 + 69;
  long long v17 = (char *)*a7;
  unint64_t v16 = (char *)a7[1];
  unint64_t v18 = &v16[-*a7];
  size_t v19 = v15 - (void)v18;
  if (v15 <= (unint64_t)v18)
  {
    if (v15 < (unint64_t)v18) {
      a7[1] = (uint64_t)&v17[v15];
    }
  }
  else
  {
    uint64_t v20 = a7[2];
    if (v20 - (uint64_t)v16 >= v19)
    {
      bzero((void *)a7[1], v15 - (void)v18);
      a7[1] = (uint64_t)&v16[v19];
      unint64_t v9 = a8;
      goto LABEL_36;
    }
    unint64_t v132 = (unint64_t)&v16[-*a7];
    if ((v15 & 0x8000000000000000) != 0) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v21 = v20 - (void)v17;
    uint64_t v22 = 2 * v21;
    if (2 * v21 <= v15) {
      uint64_t v22 = 7 * a2 + 69;
    }
    if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v23 = v22;
    }
    unint64_t v24 = (char *)operator new(v23);
    int32x4_t v129 = &v24[v23];
    int32x4_t v124 = v24;
    int v25 = &v24[7 * a2 + 69];
    int32x4_t v125 = &v24[v132];
    bzero(&v24[v132], v19);
    if (v16 != v17)
    {
      if (v132 < 8)
      {
        uint64_t v26 = v129;
        uint64_t v27 = v124;
        unint64_t v15 = 7 * a2 + 69;
        unint64_t v28 = v125;
        goto LABEL_32;
      }
      uint64_t v27 = v124;
      unint64_t v15 = 7 * a2 + 69;
      uint64_t v26 = v129;
      unint64_t v28 = v125;
      if ((unint64_t)(v17 - v124) >= 0x20)
      {
        if (v132 < 0x20)
        {
          unint64_t v29 = 0;
          goto LABEL_27;
        }
        unint64_t v29 = v132 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v30 = v16 - 16;
        uint64_t v31 = &v124[v16 - 16 - v17];
        unint64_t v32 = v132 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v33 = *(_OWORD *)v30;
          *((_OWORD *)v31 - 1) = *((_OWORD *)v30 - 1);
          *(_OWORD *)uint64_t v31 = v33;
          v31 -= 32;
          v30 -= 32;
          v32 -= 32;
        }
        while (v32);
        if (v132 == v29) {
          goto LABEL_34;
        }
        if ((v132 & 0x18) != 0)
        {
LABEL_27:
          unint64_t v28 = &v125[-(v132 & 0xFFFFFFFFFFFFFFF8)];
          unint64_t v34 = &v16[-v29 - 8];
          unint64_t v35 = (char *)(v34 - v17);
          unint64_t v36 = v29 - (v132 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v37 = *(void *)v34;
            v34 -= 8;
            *(void *)&v35[(void)v124] = v37;
            v35 -= 8;
            v36 += 8;
          }
          while (v36);
          v16 -= v132 & 0xFFFFFFFFFFFFFFF8;
          if (v132 != (v132 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_32;
          }
LABEL_34:
          unint64_t v16 = v17;
          *a7 = (uint64_t)v27;
          a7[1] = (uint64_t)v25;
          a7[2] = (uint64_t)v26;
          unint64_t v9 = a8;
          if (!v17) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
        unint64_t v28 = &v125[-v29];
        v16 -= v29;
      }
LABEL_32:
      unint64_t v38 = v28 - 1;
      do
      {
        char v39 = *--v16;
        *v38-- = v39;
      }
      while (v16 != v17);
      goto LABEL_34;
    }
    unint64_t v15 = 7 * a2 + 69;
    *a7 = (uint64_t)v125;
    a7[1] = (uint64_t)v25;
    a7[2] = (uint64_t)v129;
    unint64_t v9 = a8;
    if (v16) {
LABEL_35:
    }
      operator delete(v16);
  }
LABEL_36:
  unint64_t v41 = (char *)*v9;
  unsigned int v40 = (char *)v9[1];
  unsigned int v42 = &v40[-*v9];
  size_t v43 = v15 - (void)v42;
  if (v15 <= (unint64_t)v42)
  {
    if (v15 < (unint64_t)v42) {
      v9[1] = (uint64_t)&v41[v15];
    }
    goto LABEL_68;
  }
  uint64_t v44 = v9[2];
  if (v44 - (uint64_t)v40 >= v43)
  {
    bzero((void *)v9[1], v15 - (void)v42);
    v9[1] = (uint64_t)&v40[v43];
    goto LABEL_68;
  }
  unint64_t v133 = (unint64_t)&v40[-*v9];
  if ((v15 & 0x8000000000000000) != 0) {
    goto LABEL_153;
  }
  unint64_t v45 = v44 - (void)v41;
  uint64_t v46 = 2 * v45;
  if (2 * v45 <= v15) {
    uint64_t v46 = v15;
  }
  if (v45 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v47 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v47 = v46;
  }
  uint64_t v48 = (char *)operator new(v47);
  unint64_t v49 = &v48[v47];
  int32x4_t v126 = v48;
  uint64x2_t v130 = &v48[v15];
  unint64_t v50 = &v48[v133];
  bzero(&v48[v133], v43);
  if (v40 == v41)
  {
    *a8 = (uint64_t)v50;
    a8[1] = (uint64_t)v130;
    a8[2] = (uint64_t)v49;
    if (!v40) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  if (v133 < 8)
  {
    uint64_t v51 = v126;
    size_t v52 = v130;
    goto LABEL_64;
  }
  uint64_t v51 = v126;
  size_t v52 = v130;
  if ((unint64_t)(v41 - v126) < 0x20)
  {
LABEL_64:
    size_t v62 = v50 - 1;
    do
    {
      char v63 = *--v40;
      *v62-- = v63;
    }
    while (v40 != v41);
    goto LABEL_66;
  }
  if (v133 < 0x20)
  {
    unint64_t v53 = 0;
    goto LABEL_59;
  }
  unint64_t v53 = v133 & 0xFFFFFFFFFFFFFFE0;
  BOOL v54 = v40 - 16;
  size_t v55 = &v126[v40 - 16 - v41];
  unint64_t v56 = v133 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v57 = *(_OWORD *)v54;
    *((_OWORD *)v55 - 1) = *((_OWORD *)v54 - 1);
    *(_OWORD *)size_t v55 = v57;
    v55 -= 32;
    v54 -= 32;
    v56 -= 32;
  }
  while (v56);
  if (v133 == v53) {
    goto LABEL_66;
  }
  if ((v133 & 0x18) == 0)
  {
    v50 -= v53;
    v40 -= v53;
    goto LABEL_64;
  }
LABEL_59:
  v50 -= v133 & 0xFFFFFFFFFFFFFFF8;
  size_t v58 = &v40[-v53 - 8];
  uint64_t v59 = (char *)(v58 - v41);
  unint64_t v60 = v53 - (v133 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    uint64_t v61 = *(void *)v58;
    v58 -= 8;
    *(void *)&v59[(void)v126] = v61;
    v59 -= 8;
    v60 += 8;
  }
  while (v60);
  v40 -= v133 & 0xFFFFFFFFFFFFFFF8;
  if (v133 != (v133 & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_64;
  }
LABEL_66:
  unsigned int v40 = v41;
  *a8 = (uint64_t)v51;
  a8[1] = (uint64_t)v52;
  a8[2] = (uint64_t)v49;
  if (v41) {
LABEL_67:
  }
    operator delete(v40);
LABEL_68:
  uint64_t v64 = 0;
  LODWORD(result) = 0;
  v136[0] = 2;
  uint64_t v137 = 0x10000;
  int v138 = 1;
  unint64_t v134 = -1;
  uint64_t v139 = 0x20000;
  int v140 = 0;
  uint64_t v141 = 0x40000;
  do
  {
    if ((*(void *)&v136[v64 + 2] & a5) != 0)
    {
      int v66 = v136[v64];
      if ((a5 & 0x10000) != 0)
      {
        unint64_t v135 = 0;
        uint64_t v67 = *a7;
        uint64_t v68 = a7[1] - *a7;
        unint64_t v69 = **a6;
        uint64_t v70 = 0x100010100000000;
        if (v66 == 2) {
          uint64_t v70 = 0x100040100000000;
        }
        if (!v66) {
          uint64_t v70 = 0x100000100000000;
        }
        v142[0] = v70;
        LODWORD(result) = gcl::polyline::EncoderImpl::compressAttributes(*v69, a1, 0, 0, 0, a2, 1uLL, v67, v68, (uint64_t *)&v135, v142, 1);
        if ((result - 1) >= 4)
        {
          if (result)
          {
            LODWORD(result) = 5;
          }
          else
          {
            unint64_t v87 = v135;
            LODWORD(result) = 0;
            if (v135 < v134)
            {
              uint64_t v88 = *a8;
              *a8 = *a7;
              *a7 = v88;
              uint64_t v89 = a8[1];
              a8[1] = a7[1];
              a7[1] = v89;
              uint64_t v90 = a8[2];
              a8[2] = a7[2];
              a7[2] = v90;
              *(void *)(a9 + 32) = 1;
              *(_DWORD *)(a9 + 40) = v66;
              unint64_t v134 = v87;
            }
          }
        }
      }
      if ((a5 & 0x2000000) != 0)
      {
        unint64_t v135 = 0;
        uint64_t v71 = *a7;
        uint64_t v72 = a7[1] - *a7;
        unint64_t v73 = **a6;
        uint64_t v74 = 0x100010200000000;
        if (v66 == 2) {
          uint64_t v74 = 0x100040200000000;
        }
        if (!v66) {
          uint64_t v74 = 0x100000200000000;
        }
        v142[0] = v74;
        LODWORD(result) = gcl::polyline::EncoderImpl::compressAttributes(*v73, a1, 0, 0, 0, a2, 1uLL, v71, v72, (uint64_t *)&v135, v142, 1);
        if ((result - 1) >= 4)
        {
          if (result)
          {
            LODWORD(result) = 5;
          }
          else
          {
            unint64_t v91 = v135;
            LODWORD(result) = 0;
            if (v135 < v134)
            {
              uint64_t v92 = *a8;
              *a8 = *a7;
              *a7 = v92;
              uint64_t v93 = a8[1];
              a8[1] = a7[1];
              a7[1] = v93;
              uint64_t v94 = a8[2];
              a8[2] = a7[2];
              a7[2] = v94;
              *(void *)(a9 + 32) = 2;
              *(_DWORD *)(a9 + 40) = v66;
              unint64_t v134 = v91;
            }
          }
        }
      }
      if ((a5 & 0x4000000) != 0)
      {
        unint64_t v135 = 0;
        uint64_t v75 = *a7;
        uint64_t v76 = a7[1] - *a7;
        unint64_t v77 = **a6;
        uint64_t v78 = 0x100010000000000;
        if (v66 == 2) {
          uint64_t v78 = 0x100040000000000;
        }
        if (!v66) {
          uint64_t v78 = 0x100000000000000;
        }
        v142[0] = v78;
        LODWORD(result) = gcl::polyline::EncoderImpl::compressAttributes(*v77, a1, 0, 0, 0, a2, 1uLL, v75, v76, (uint64_t *)&v135, v142, 1);
        if ((result - 1) >= 4)
        {
          if (result)
          {
            LODWORD(result) = 5;
          }
          else
          {
            unint64_t v95 = v135;
            LODWORD(result) = 0;
            if (v135 < v134)
            {
              uint64_t v96 = *a8;
              *a8 = *a7;
              *a7 = v96;
              uint64_t v97 = a8[1];
              a8[1] = a7[1];
              a7[1] = v97;
              uint64_t v98 = a8[2];
              a8[2] = a7[2];
              a7[2] = v98;
              *(void *)(a9 + 32) = 0;
              *(_DWORD *)(a9 + 40) = v66;
              unint64_t v134 = v95;
            }
          }
        }
      }
      if ((a5 & 0x8000000) != 0)
      {
        unint64_t v135 = 0;
        uint64_t v79 = *a7;
        uint64_t v80 = a7[1] - *a7;
        unint64_t v81 = **a6;
        uint64_t v82 = 0x100010300000000;
        if (v66 == 2) {
          uint64_t v82 = 0x100040300000000;
        }
        if (!v66) {
          uint64_t v82 = 0x100000300000000;
        }
        v142[0] = v82;
        LODWORD(result) = gcl::polyline::EncoderImpl::compressAttributes(*v81, a1, 0, 0, 0, a2, 1uLL, v79, v80, (uint64_t *)&v135, v142, 1);
        if ((result - 1) >= 4)
        {
          if (result)
          {
            LODWORD(result) = 5;
          }
          else
          {
            unint64_t v83 = v135;
            LODWORD(result) = 0;
            if (v135 < v134)
            {
              uint64_t v84 = *a8;
              *a8 = *a7;
              *a7 = v84;
              uint64_t v85 = a8[1];
              a8[1] = a7[1];
              a7[1] = v85;
              uint64_t v86 = a8[2];
              a8[2] = a7[2];
              a7[2] = v86;
              *(void *)(a9 + 32) = 3;
              *(_DWORD *)(a9 + 40) = v66;
              unint64_t v134 = v83;
            }
          }
        }
      }
    }
    v64 += 4;
  }
  while (v64 != 12);
  if (v134 != -1)
  {
    if (v134 >= 0x1C)
    {
      int32x4_t v99 = a8;
      *(unsigned char *)*a8 = *(_DWORD *)(a9 + 32);
      *(unsigned char *)(*a8 + 1) = *(_DWORD *)(a9 + 40);
      memmove((void *)(*a8 + 2), (const void *)(*a8 + 28), v134 - 28);
      unint64_t v100 = v134 - 26;
      uint64x2_t v102 = (char *)*a8;
      int32x4_t v101 = (char *)a8[1];
      unint64_t v103 = (unint64_t)&v101[-*a8];
      size_t v104 = v134 - 26 - v103;
      if (v134 - 26 <= v103)
      {
        uint32x4_t v112 = (char *)a8[1];
        if (v134 - 26 >= v103)
        {
LABEL_152:
          uint64_t result = 0;
          *(void *)(a9 + 16) = a3;
          *(void *)(a9 + 24) = a4;
          *(unsigned char *)a9 = 1;
          *(void *)(a9 + 8) = &v112[-*v99];
          return result;
        }
        uint32x4_t v112 = &v102[v100];
      }
      else
      {
        uint64_t v105 = a8[2];
        if (v105 - (uint64_t)v101 < v104)
        {
          if ((v100 & 0x8000000000000000) == 0)
          {
            unint64_t v106 = v105 - (void)v102;
            uint64_t v107 = 2 * v106;
            if (2 * v106 <= v100) {
              uint64_t v107 = v134 - 26;
            }
            if (v106 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v108 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v108 = v107;
            }
            uint64x2_t v109 = (char *)operator new(v108);
            uint32x4_t v110 = &v109[v103];
            uint32x4_t v111 = &v109[v108];
            uint32x4_t v112 = &v109[v100];
            bzero(&v109[v103], v104);
            if (v101 == v102) {
              goto LABEL_150;
            }
            if (v103 >= 8 && (unint64_t)(v102 - v109) >= 0x20)
            {
              if (v103 < 0x20)
              {
                unint64_t v113 = 0;
                goto LABEL_142;
              }
              unint64_t v113 = v103 & 0xFFFFFFFFFFFFFFE0;
              int64x2_t v114 = v101 - 16;
              int64x2_t v115 = &v109[v101 - 16 - v102];
              unint64_t v116 = v103 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v117 = *(_OWORD *)v114;
                *((_OWORD *)v115 - 1) = *((_OWORD *)v114 - 1);
                *(_OWORD *)int64x2_t v115 = v117;
                v115 -= 32;
                v114 -= 32;
                v116 -= 32;
              }
              while (v116);
              if (v103 == v113) {
                goto LABEL_149;
              }
              if ((v103 & 0x18) != 0)
              {
LABEL_142:
                v110 -= v103 & 0xFFFFFFFFFFFFFFF8;
                int64x2_t v118 = &v101[-v113 - 8];
                int64x2_t v119 = (char *)(v118 - v102);
                unint64_t v120 = v113 - (v103 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v121 = *(void *)v118;
                  v118 -= 8;
                  *(void *)&v119[(void)v109] = v121;
                  v119 -= 8;
                  v120 += 8;
                }
                while (v120);
                v101 -= v103 & 0xFFFFFFFFFFFFFFF8;
                if (v103 == (v103 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_149;
                }
                goto LABEL_147;
              }
              v110 -= v113;
              v101 -= v113;
            }
LABEL_147:
            int32x4_t v122 = v110 - 1;
            do
            {
              char v123 = *--v101;
              *v122-- = v123;
            }
            while (v101 != v102);
LABEL_149:
            int32x4_t v101 = v102;
            uint32x4_t v110 = v109;
LABEL_150:
            *a8 = (uint64_t)v110;
            a8[1] = (uint64_t)v112;
            int32x4_t v99 = a8;
            a8[2] = (uint64_t)v111;
            if (v101)
            {
              operator delete(v101);
              uint32x4_t v112 = (char *)a8[1];
            }
            goto LABEL_152;
          }
LABEL_153:
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        uint32x4_t v112 = &v101[v104];
        bzero((void *)a8[1], v104);
      }
      a8[1] = (uint64_t)v112;
      goto LABEL_152;
    }
    return 6;
  }
  if (result) {
    return result;
  }
  else {
    return 6;
  }
}

void sub_18A446258(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v2, 0x20C4093837F09);
  MEMORY[0x18C11F580](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

unint64_t geo::computeRiceParam2(geo *this, unint64_t a2, unint64_t a3, unsigned int *a4)
{
  if (a2)
  {
    if (a2 >> 62) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = 4 * a2;
    unint64_t v7 = operator new(4 * a2);
    bzero(v7, 4 * a2);
    unint64_t v8 = operator new(4 * a2);
    bzero(v8, 4 * a2);
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    LODWORD(v11) = 0;
    int v12 = 0;
    unint64_t v13 = v6 >> 2;
    int v14 = -1;
    do
    {
      unsigned int v36 = v14;
      unsigned int v37 = v11;
      int v16 = v12;
      long long v17 = 0;
      do
      {
        ldiv_t v18 = ldiv(*((unsigned int *)this + (void)v17), (1 << v10));
        *((_DWORD *)v7 + (void)v17) = v18.quot;
        *((_DWORD *)v8 + (void)v17) = v18.rem;
        long long v17 = (const unsigned int *)((char *)v17 + 1);
      }
      while ((const unsigned int *)a2 != v17);
      unsigned int v19 = 0;
      unsigned int v20 = -1;
      unsigned int v21 = -1;
      do
      {
        unint64_t v23 = 0;
        unsigned int v22 = 0;
        unsigned int v24 = v19++;
        unsigned int v25 = 1;
        while (1)
        {
          unsigned int v26 = (*((_DWORD *)v7 + v23) >> v24) + v19;
          if (__CFADD__(v22, v26)) {
            break;
          }
          v22 += v26;
          unint64_t v23 = v25++;
          if (v13 <= v23) {
            goto LABEL_17;
          }
        }
        unsigned int v22 = -1;
LABEL_17:
        if (v22 < v21)
        {
          unsigned int v21 = v22;
          unsigned int v20 = v24;
        }
      }
      while (v19 != 32);
      int v27 = 0;
      int v28 = -1;
      unsigned int v29 = -1;
      do
      {
        unint64_t v31 = 0;
        unsigned int v30 = 0;
        int v32 = v27++;
        unsigned int v33 = 1;
        while (1)
        {
          int v34 = (*((_DWORD *)v8 + v31) >> v32) + v27;
          if (__CFADD__(v30, v34)) {
            break;
          }
          v30 += v34;
          unint64_t v31 = v33++;
          if (v13 <= v31) {
            goto LABEL_26;
          }
        }
        unsigned int v30 = -1;
LABEL_26:
        if (v30 < v29)
        {
          unsigned int v29 = v30;
          int v28 = v32;
        }
      }
      while (v27 != 32);
      unsigned int v15 = v29 + v21;
      int v14 = v36;
      if (v15 >= v36) {
        int v12 = v16;
      }
      else {
        int v12 = v28;
      }
      if (v15 >= v36) {
        uint64_t v11 = v37;
      }
      else {
        uint64_t v11 = v20;
      }
      if (v15 < v36)
      {
        int v14 = v15;
        unsigned int v9 = v10;
      }
      ++v10;
    }
    while (v10 != 32);
    operator delete(v8);
    operator delete(v7);
  }
  else
  {
    uint64_t v11 = 0;
    unsigned int v9 = 0;
  }
  return v9 | (unint64_t)(v11 << 32);
}

void sub_18A4464BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  operator delete(v13);
  _Unwind_Resume(a1);
}

void geo::WriteBitstream::packRice2(void ***this, unsigned int a2, _DWORD *a3)
{
  uint64_t v3 = a3;
  unsigned int v4 = a2;
  int v6 = *a3;
  unint64_t v7 = a3[1];
  unsigned int v8 = a2 >> *a3;
  if (v8 >> v7)
  {
    unsigned int v9 = v8 >> v7;
    do
    {
      geo::WriteBitstream::flag(this, 1);
      --v9;
    }
    while (v9);
  }
  int v10 = v8 << v6;
  geo::WriteBitstream::flag(this, 0);
  uint64_t v11 = *this;
  unint64_t v12 = *((unsigned int *)*this + 6) + v7;
  if ((v12 & 7) != 0) {
    unint64_t v13 = (v12 >> 3) + 1;
  }
  else {
    unint64_t v13 = v12 >> 3;
  }
  unsigned int v15 = *v11;
  int v14 = v11[1];
  unint64_t v16 = v14 - (unsigned char *)*v11;
  if (v16 < v13)
  {
    int v80 = v10;
    unsigned int v78 = v4;
    unint64_t v17 = v7 >> 3;
    if ((v7 & 7) != 0) {
      ++v17;
    }
    unint64_t v18 = 2 * (v17 + v16);
    size_t v19 = v18 - v16;
    if (v18 <= v16)
    {
      unsigned int v4 = v78;
      if (v18 < v16) {
        v11[1] = &v15[v18];
      }
      goto LABEL_41;
    }
    unsigned int v20 = v11[2];
    if (v20 - v14 >= v19)
    {
      bzero(v14, v18 - v16);
      v11[1] = &v14[v19];
      unsigned int v4 = v78;
LABEL_41:
      bzero((char *)**this + v16, (unsigned char *)(*this)[1] - ((unsigned char *)**this + v16));
      int v10 = v80;
      goto LABEL_42;
    }
    unint64_t v77 = v3;
    unint64_t v21 = v20 - v15;
    uint64_t v22 = 2 * v21;
    if (2 * v21 <= v18) {
      uint64_t v22 = v18;
    }
    if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v23 = v22;
    }
    unsigned int v24 = (char *)operator new(v23);
    uint64_t v76 = &v24[v23];
    unsigned int v25 = v24;
    uint64_t v75 = &v24[v18];
    unsigned int v26 = &v24[v16];
    bzero(&v24[v16], v19);
    if (v14 == v15)
    {
      unsigned int v4 = v78;
      goto LABEL_39;
    }
    if (v16 < 8)
    {
      unsigned int v4 = v78;
      goto LABEL_36;
    }
    unsigned int v4 = v78;
    if ((unint64_t)(v15 - v25) >= 0x20)
    {
      if (v16 < 0x20)
      {
        unint64_t v27 = 0;
        goto LABEL_31;
      }
      unint64_t v27 = v16 & 0xFFFFFFFFFFFFFFE0;
      int v28 = (long long *)(v14 - 16);
      unsigned int v29 = &v25[v14 - 16 - v15];
      unint64_t v30 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v31 = *v28;
        *((_OWORD *)v29 - 1) = *(v28 - 1);
        *(_OWORD *)unsigned int v29 = v31;
        v29 -= 32;
        v28 -= 2;
        v30 -= 32;
      }
      while (v30);
      if (v16 == v27) {
        goto LABEL_38;
      }
      if ((v16 & 0x18) != 0)
      {
LABEL_31:
        v26 -= v16 & 0xFFFFFFFFFFFFFFF8;
        int v32 = &v14[-v27 - 8];
        unsigned int v33 = (char *)(v32 - v15);
        unint64_t v34 = v27 - (v16 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v35 = *(void *)v32;
          v32 -= 8;
          *(void *)&v33[(void)v25] = v35;
          v33 -= 8;
          v34 += 8;
        }
        while (v34);
        v14 -= v16 & 0xFFFFFFFFFFFFFFF8;
        if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_38;
        }
        goto LABEL_36;
      }
      v26 -= v27;
      v14 -= v27;
    }
LABEL_36:
    unsigned int v36 = v26 - 1;
    do
    {
      char v37 = *--v14;
      *v36-- = v37;
    }
    while (v14 != v15);
LABEL_38:
    int v14 = v15;
    unsigned int v26 = v25;
LABEL_39:
    *uint64_t v11 = v26;
    v11[1] = v75;
    v11[2] = v76;
    uint64_t v3 = v77;
    if (v14) {
      operator delete(v14);
    }
    goto LABEL_41;
  }
LABEL_42:
  unsigned int v38 = v4 - v10;
  if (v7)
  {
    uint64_t v39 = 0;
    unsigned int v40 = *this;
    unsigned int v41 = *((_DWORD *)*this + 6);
    do
    {
      *((unsigned char *)*v40 + ((unint64_t)v41 >> 3)) |= (((unint64_t)(v8 - (v8 >> v7 << v7)) << -(char)v7 >> (v39 + 63)) & 1) << (~(_BYTE)v41 & 7);
      unsigned int v40 = *this;
      unsigned int v41 = *((_DWORD *)*this + 6) + 1;
      *((_DWORD *)*this + 6) = v41;
      --v39;
    }
    while (-(uint64_t)v7 != v39);
  }
  unint64_t v42 = v3[2];
  unsigned int v43 = v38 >> v42;
  if (v38 >> v42)
  {
    unsigned int v44 = v38 >> v42;
    do
    {
      geo::WriteBitstream::flag(this, 1);
      --v44;
    }
    while (v44);
  }
  geo::WriteBitstream::flag(this, 0);
  unint64_t v45 = *this;
  unint64_t v46 = *((unsigned int *)*this + 6) + v42;
  if ((v46 & 7) != 0) {
    unint64_t v47 = (v46 >> 3) + 1;
  }
  else {
    unint64_t v47 = v46 >> 3;
  }
  unint64_t v49 = *v45;
  uint64_t v48 = v45[1];
  unint64_t v50 = v48 - (unsigned char *)*v45;
  if (v50 < v47)
  {
    unint64_t v51 = v42 >> 3;
    if ((v42 & 7) != 0) {
      ++v51;
    }
    unint64_t v52 = 2 * (v51 + v50);
    size_t v53 = v52 - v50;
    if (v52 <= v50)
    {
      if (v52 < v50) {
        v45[1] = &v49[v52];
      }
      goto LABEL_83;
    }
    BOOL v54 = v45[2];
    if (v54 - v48 >= v53)
    {
      bzero(v45[1], v52 - v50);
      v45[1] = &v48[v53];
LABEL_83:
      bzero((char *)**this + v50, (unsigned char *)(*this)[1] - ((unsigned char *)**this + v50));
      goto LABEL_84;
    }
    unsigned int v82 = v38;
    unint64_t v55 = v54 - v49;
    uint64_t v56 = 2 * v55;
    if (2 * v55 <= v52) {
      uint64_t v56 = v52;
    }
    if (v55 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v57 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v57 = v56;
    }
    size_t v58 = (char *)operator new(v57);
    unint64_t v81 = &v58[v57];
    uint64_t v59 = v58;
    uint64_t v79 = &v58[v52];
    unint64_t v60 = &v58[v50];
    bzero(&v58[v50], v53);
    if (v48 == v49)
    {
LABEL_81:
      *unint64_t v45 = v60;
      v45[1] = v79;
      v45[2] = v81;
      unsigned int v38 = v82;
      if (v48) {
        operator delete(v48);
      }
      goto LABEL_83;
    }
    if (v50 >= 8 && (unint64_t)(v49 - v59) >= 0x20)
    {
      if (v50 < 0x20)
      {
        unint64_t v61 = 0;
        goto LABEL_73;
      }
      unint64_t v61 = v50 & 0xFFFFFFFFFFFFFFE0;
      size_t v62 = (long long *)(v48 - 16);
      char v63 = &v59[v48 - 16 - v49];
      unint64_t v64 = v50 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v65 = *v62;
        *((_OWORD *)v63 - 1) = *(v62 - 1);
        *(_OWORD *)char v63 = v65;
        v63 -= 32;
        v62 -= 2;
        v64 -= 32;
      }
      while (v64);
      if (v50 == v61) {
        goto LABEL_80;
      }
      if ((v50 & 0x18) != 0)
      {
LABEL_73:
        v60 -= v50 & 0xFFFFFFFFFFFFFFF8;
        int v66 = &v48[-v61 - 8];
        uint64_t v67 = (char *)(v66 - v49);
        unint64_t v68 = v61 - (v50 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v69 = *(void *)v66;
          v66 -= 8;
          *(void *)&v67[(void)v59] = v69;
          v67 -= 8;
          v68 += 8;
        }
        while (v68);
        v48 -= v50 & 0xFFFFFFFFFFFFFFF8;
        if (v50 == (v50 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_80;
        }
        goto LABEL_78;
      }
      v60 -= v61;
      v48 -= v61;
    }
LABEL_78:
    uint64_t v70 = v60 - 1;
    do
    {
      char v71 = *--v48;
      *v70-- = v71;
    }
    while (v48 != v49);
LABEL_80:
    uint64_t v48 = v49;
    unint64_t v60 = v59;
    goto LABEL_81;
  }
LABEL_84:
  if (v42)
  {
    uint64_t v72 = 0;
    unint64_t v73 = *this;
    unsigned int v74 = *((_DWORD *)*this + 6);
    do
    {
      *((unsigned char *)*v73 + ((unint64_t)v74 >> 3)) |= (((unint64_t)(v38 - (v43 << v42)) << -(char)v42 >> (v72 + 63)) & 1) << (~(_BYTE)v74 & 7);
      unint64_t v73 = *this;
      unsigned int v74 = *((_DWORD *)*this + 6) + 1;
      *((_DWORD *)*this + 6) = v74;
      --v72;
    }
    while (-(uint64_t)v42 != v72);
  }
}

void std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(uint64_t a1, char *__dst, unsigned char *__src, unsigned char *a4, unint64_t a5)
{
  if ((uint64_t)a5 < 1) {
    return;
  }
  int v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < (uint64_t)a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      unint64_t v16 = operator new(v15);
      unint64_t v17 = &v13[(void)v16];
      unint64_t v18 = &v13[(void)v16 + a5];
      size_t v19 = &v13[(void)v16];
      unsigned int v20 = __src;
      if (a5 < 8) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v16 = 0;
      unint64_t v17 = (char *)(__dst - v11);
      unint64_t v18 = &v13[a5];
      size_t v19 = (char *)(__dst - v11);
      unsigned int v20 = __src;
      if (a5 < 8) {
        goto LABEL_45;
      }
    }
    size_t v19 = v17;
    unsigned int v20 = __src;
    if ((char *)(&__dst[(void)v16] - &__src[(void)v11]) >= (char *)0x20)
    {
      if (a5 >= 0x20)
      {
        uint64_t v29 = a5 & 0x7FFFFFFFFFFFFFE0;
        unsigned int v36 = (long long *)(__src + 16);
        char v37 = (char *)v16 + (void)v13 + 16;
        unint64_t v38 = a5 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v39 = *v36;
          *(v37 - 1) = *(v36 - 1);
          *char v37 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 32;
        }
        while (v38);
        if (v29 == a5)
        {
LABEL_46:
          unint64_t v45 = *(char **)a1;
          if (*(char **)a1 == __dst)
          {
LABEL_55:
            size_t v53 = (char *)v16 + v15;
            if (v10 != __dst) {
              memmove(v18, __dst, v10 - __dst);
            }
            BOOL v54 = *(char **)a1;
            *(void *)a1 = v17;
            *(void *)(a1 + 8) = &v18[v10 - __dst];
            *(void *)(a1 + 16) = v53;
            if (v54)
            {
              operator delete(v54);
            }
            return;
          }
          unint64_t v46 = __dst - v45;
          if ((unint64_t)(__dst - v45) >= 0x20)
          {
            unint64_t v47 = __dst;
            if ((unint64_t)(v11 - (unsigned char *)v16) >= 0x20)
            {
              unint64_t v47 = &__dst[-(v46 & 0xFFFFFFFFFFFFFFE0)];
              v17 -= v46 & 0xFFFFFFFFFFFFFFE0;
              uint64_t v48 = __dst - 16;
              unint64_t v49 = (char *)v16 + __dst - 16 - v11;
              unint64_t v50 = v46 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v51 = *(_OWORD *)v48;
                *(v49 - 1) = *((_OWORD *)v48 - 1);
                _OWORD *v49 = v51;
                v49 -= 2;
                v48 -= 32;
                v50 -= 32;
              }
              while (v50);
              if (v46 == (v46 & 0xFFFFFFFFFFFFFFE0)) {
                goto LABEL_54;
              }
            }
          }
          else
          {
            unint64_t v47 = __dst;
          }
          do
          {
            char v52 = *--v47;
            *--unint64_t v17 = v52;
          }
          while (v47 != v45);
LABEL_54:
          int v10 = *(char **)(a1 + 8);
          goto LABEL_55;
        }
        if ((a5 & 0x18) == 0)
        {
          unsigned int v20 = &__src[v29];
          size_t v19 = &v17[v29];
          goto LABEL_45;
        }
      }
      else
      {
        uint64_t v29 = 0;
      }
      size_t v19 = &v17[a5 & 0xFFFFFFFFFFFFFFF8];
      unsigned int v20 = &__src[a5 & 0xFFFFFFFFFFFFFFF8];
      unsigned int v40 = (uint64_t *)&__src[v29];
      unsigned int v41 = (char *)v16 + &__dst[v29] - v11;
      unint64_t v42 = v29 - (a5 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v43 = *v40++;
        *v41++ = v43;
        v42 += 8;
      }
      while (v42);
      if ((a5 & 0x7FFFFFFFFFFFFFF8) == a5) {
        goto LABEL_46;
      }
    }
    do
    {
LABEL_45:
      char v44 = *v20++;
      *v19++ = v44;
    }
    while (v19 != v18);
    goto LABEL_46;
  }
  uint64_t v21 = v10 - __dst;
  if (v10 - __dst >= (uint64_t)a5)
  {
    uint64_t v22 = &__src[a5];
    unsigned int v24 = *(char **)(a1 + 8);
    unsigned int v25 = &__dst[a5];
    unsigned int v26 = &v10[-a5];
    unint64_t v27 = v24;
    if ((unint64_t)v10 < a5) {
      goto LABEL_30;
    }
    goto LABEL_19;
  }
  uint64_t v22 = &__src[v21];
  int64_t v23 = a4 - &__src[v21];
  if (a4 != &__src[v21]) {
    memmove(*(void **)(a1 + 8), &__src[v21], a4 - &__src[v21]);
  }
  unsigned int v24 = &v10[v23];
  *(void *)(a1 + 8) = &v10[v23];
  if (v21 >= 1)
  {
    unsigned int v25 = &__dst[a5];
    unsigned int v26 = &v24[-a5];
    unint64_t v27 = &v10[v23];
    if (&v24[-a5] >= v10) {
      goto LABEL_30;
    }
LABEL_19:
    unint64_t v28 = &v10[a5] - v24;
    if (v28 >= 0x20)
    {
      unint64_t v27 = v24;
      if (a5 >= 0x20)
      {
        unint64_t v30 = &v26[v28 & 0xFFFFFFFFFFFFFFE0];
        unint64_t v27 = &v24[v28 & 0xFFFFFFFFFFFFFFE0];
        long long v31 = v24 + 16;
        int v32 = (long long *)(v26 + 16);
        unint64_t v33 = v28 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v34 = *v32;
          *(v31 - 1) = *(v32 - 1);
          *long long v31 = v34;
          v31 += 2;
          v32 += 2;
          v33 -= 32;
        }
        while (v33);
        unsigned int v26 = v30;
        if (v28 == (v28 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_30;
        }
      }
    }
    else
    {
      unint64_t v27 = v24;
    }
    do
    {
      char v35 = *v26++;
      *v27++ = v35;
    }
    while (v26 != v10);
LABEL_30:
    *(void *)(a1 + 8) = v27;
    if (v24 != v25) {
      memmove(v25, __dst, v24 - v25);
    }
    if (v22 != __src)
    {
      memmove(__dst, __src, v22 - __src);
    }
  }
}

void std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  if (a5 < 1) {
    return;
  }
  int v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = __dst - v11;
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      unint64_t v16 = (char *)operator new(v15);
    }
    else {
      unint64_t v16 = 0;
    }
    unsigned int v25 = &v16[v13];
    memcpy(&v16[v13], __src, a5);
    if (v11 == __dst)
    {
      unsigned int v26 = &v16[v13];
      unint64_t v27 = &v25[a5];
      unint64_t v28 = &v16[v15];
      size_t v29 = v10 - __dst;
      if (v10 == __dst)
      {
LABEL_53:
        unint64_t v50 = *(char **)a1;
        *(void *)a1 = v26;
        *(void *)(a1 + 8) = &v27[v29];
        *(void *)(a1 + 16) = v28;
        if (v50)
        {
          operator delete(v50);
        }
        return;
      }
LABEL_52:
      memmove(v27, __dst, v29);
      goto LABEL_53;
    }
    if (v13 < 8)
    {
      unint64_t v30 = __dst;
      long long v31 = &v16[v13];
      goto LABEL_49;
    }
    unint64_t v30 = __dst;
    long long v31 = &v16[v13];
    if ((unint64_t)(v11 - v16) >= 0x20)
    {
      if (v13 < 0x20)
      {
        unint64_t v32 = 0;
        goto LABEL_44;
      }
      unint64_t v32 = v13 & 0xFFFFFFFFFFFFFFE0;
      long long v39 = __dst - 16;
      unsigned int v40 = &v16[__dst - 16 - v11];
      unint64_t v41 = v13 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v42 = *(_OWORD *)v39;
        *((_OWORD *)v40 - 1) = *((_OWORD *)v39 - 1);
        *(_OWORD *)unsigned int v40 = v42;
        v40 -= 32;
        v39 -= 32;
        v41 -= 32;
      }
      while (v41);
      if (v13 == v32) {
        goto LABEL_51;
      }
      if ((v13 & 0x18) != 0)
      {
LABEL_44:
        unint64_t v30 = &__dst[-(v13 & 0xFFFFFFFFFFFFFFF8)];
        long long v31 = &v25[-(v13 & 0xFFFFFFFFFFFFFFF8)];
        uint64_t v43 = &__dst[-v32 - 8];
        char v44 = &v16[v43 - v11];
        unint64_t v45 = v32 - (v13 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v46 = *(void *)v43;
          v43 -= 8;
          *(void *)char v44 = v46;
          v44 -= 8;
          v45 += 8;
        }
        while (v45);
        if (v13 != (v13 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_49;
        }
LABEL_51:
        unint64_t v49 = *(unsigned char **)(a1 + 8);
        unsigned int v26 = v16;
        unint64_t v27 = &v25[a5];
        unint64_t v28 = &v16[v15];
        size_t v29 = v49 - __dst;
        if (v49 == __dst) {
          goto LABEL_53;
        }
        goto LABEL_52;
      }
      long long v31 = &v25[-v32];
      unint64_t v30 = &__dst[-v32];
    }
LABEL_49:
    unint64_t v47 = v31 - 1;
    do
    {
      char v48 = *--v30;
      *v47-- = v48;
    }
    while (v30 != v11);
    goto LABEL_51;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    unint64_t v18 = &__src[a5];
    unsigned int v20 = *(char **)(a1 + 8);
    uint64_t v21 = &__dst[a5];
    uint64_t v22 = &v10[-a5];
    int64_t v23 = v20;
    if ((unint64_t)v10 < a5) {
      goto LABEL_34;
    }
    goto LABEL_18;
  }
  unint64_t v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  unsigned int v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
  {
    uint64_t v21 = &__dst[a5];
    uint64_t v22 = &v20[-a5];
    int64_t v23 = &v10[v19];
    if (&v20[-a5] >= v10) {
      goto LABEL_34;
    }
LABEL_18:
    unint64_t v24 = &v10[a5] - v20;
    if (v24 >= 0x20)
    {
      int64_t v23 = v20;
      if ((unint64_t)a5 >= 0x20)
      {
        unint64_t v33 = &v22[v24 & 0xFFFFFFFFFFFFFFE0];
        int64_t v23 = &v20[v24 & 0xFFFFFFFFFFFFFFE0];
        long long v34 = v20 + 16;
        char v35 = (long long *)(v22 + 16);
        unint64_t v36 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v37 = *v35;
          *(v34 - 1) = *(v35 - 1);
          _OWORD *v34 = v37;
          v34 += 2;
          v35 += 2;
          v36 -= 32;
        }
        while (v36);
        uint64_t v22 = v33;
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      int64_t v23 = v20;
    }
    do
    {
      char v38 = *v22++;
      *v23++ = v38;
    }
    while (v22 != v10);
LABEL_34:
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(v21, __dst, v20 - v21);
    }
    if (v18 != __src)
    {
      memmove(__dst, __src, v18 - __src);
    }
  }
}

void *std::vector<mgcl::ints::ColumnInfo>::__assign_with_size[abi:ne180100]<mgcl::ints::ColumnInfo*,mgcl::ints::ColumnInfo*>(void *result, char *__src, char *a3, size_t __sz)
{
  int v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 4) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x555555555555555) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v11;
    if (v12 > 0x555555555555555) {
LABEL_23:
    }
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 6 * v12;
    uint64_t result = operator new(48 * v12);
    uint64_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14 - 4);
    }
    size_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  size_t v15 = (void **)(result + 1);
  unint64_t v16 = (unsigned char *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 4) >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    size_t v18 = v14 - 4;
    int64_t v19 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  uint64_t v17 = &__src[16 * ((v16 - v9) >> 4)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9 - 4);
    uint64_t v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v17;
  if (v14)
  {
    size_t v18 = v14 - 4;
    int64_t v19 = v9;
    char __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *size_t v15 = &v9[v14];
  return result;
}

uint64_t mgcl::ints::IntDecompressor<int>::decompress(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, char a4, char a5, unint64_t a6, int8x16_t *a7)
{
  uint64_t v379 = *MEMORY[0x1E4F143B8];
  if (!a6) {
    return 0;
  }
  unint64_t v358 = 4 * a6;
  bzero(a7, 4 * a6);
  size_t v12 = *a2;
  if ((v12 - 66) < 0xFFFFFFBF) {
    return 3;
  }
  if (v12 <= 0x40) {
    size_t v14 = 65 - v12;
  }
  else {
    size_t v14 = 0;
  }
  bzero(&__dst[v12], v14);
  memcpy(__dst, a2 + 1, v12);
  uint64_t v15 = 0;
  uint64_t v16 = v12 + 1;
  unint64_t v354 = a6 & 0xFFFFFFFFFFFFFFF0;
  unint64_t __sz = 8 * a6;
  uint64_t v363 = 8 * a3 - 24;
  uint64_t v352 = -(uint64_t)(a6 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v353 = a6 & 0xFFFFFFFFFFFFFFF8;
  uint64x2_t v364 = a1;
  uint64x2_t v365 = a2;
  unint64_t v366 = a6;
  uint64_t v17 = a2;
  size_t v361 = v12;
  while (2)
  {
    uint64_t v367 = v15;
    uint64_t v368 = v16;
    unsigned int v19 = __dst[v15];
    char v20 = 0;
    unint64_t v21 = 0;
    unint64_t v22 = 0;
    int64_t v23 = &v17[v16 + 1];
    uint64_t v24 = 1;
    if (__dst[v15])
    {
      uint64_t v25 = v363 - 8 * v16;
      do
      {
        uint64_t v26 = v24;
        uint64_t v27 = v25;
        int v28 = (char)v23[v21];
        v22 |= (unint64_t)(v23[v21] & 0x7F) << v20;
        if (v21 > 8) {
          break;
        }
        ++v21;
        v20 += 7;
        ++v24;
        v25 -= 8;
      }
      while (v28 < 0);
      char v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      unint64_t v32 = &v17[v16];
      do
      {
        int v33 = (char)v32[v26 + 1];
        v31 |= (unint64_t)(v32[++v26] & 0x7F) << v29;
        if (v30 > 8) {
          break;
        }
        ++v30;
        v29 += 7;
        v27 -= 8;
      }
      while (v33 < 0);
      switch(v17[v16])
      {
        case 1u:
          if (!a1[3]) {
            operator new();
          }
          BOOL v34 = v19 == 1;
          unsigned int v35 = v31 - 2;
          if (v31 < 2) {
            return 3;
          }
          unint64_t v36 = &v17[v16 + v26];
          unsigned int v37 = v36[1];
          int v38 = v36[2];
          uint64_t v40 = *a1;
          long long v39 = (char *)a1[1];
          unint64_t v41 = &v39[-*a1];
          if (v19 == 1)
          {
            LODWORD(v42) = v366;
            size_t v43 = v366 - (void)v41;
            if (v366 <= (unint64_t)v41)
            {
              unint64_t v50 = v364;
              if (v366 < (unint64_t)v41) {
                v364[1] = v40 + v366;
              }
LABEL_286:
              uint64_t v264 = *v50;
              uint64x2_t v265 = *(uint64_t **)v50[3];
              LODWORD(v369) = 0;
              BYTE4(v369) = a4;
              BYTE5(v369) = a5;
              WORD3(v369) = 0;
              uint64_t v370 = 1;
              __int16 v371 = 0;
              char v372 = v34;
              int v373 = 0;
              if (v37 >= 4) {
                char v266 = 1;
              }
              else {
                char v266 = v37;
              }
              char v374 = v266;
              if (v38 == 2) {
                char v267 = 4;
              }
              else {
                char v267 = 1;
              }
              if (!v38) {
                char v267 = 0;
              }
              char v375 = v267;
              *((void *)&v369 + 1) = __PAIR64__(v42, v35);
              uint64_t v268 = *v265;
              uint64_t v376 = (uint64_t)&v365[v368 + 3 + v26];
              uint64_t v377 = v35;
              uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v268, (uint64_t)&v376, v264, 0, &v369);
              if (result) {
                goto LABEL_331;
              }
              if (v366 < 8)
              {
                unint64_t v270 = 0;
                a1 = v364;
                uint64_t v17 = v365;
LABEL_307:
                unint64_t v319 = v366 - v270;
                uint64_t v320 = &a7->i32[v270];
                uint64_t v321 = (char *)(v264 + v270);
                do
                {
                  char v322 = *v321++;
                  *uint64_t v320 = ((_BYTE)v22 + v322) & 1 | (2 * *v320);
                  ++v320;
                  --v319;
                }
                while (v319);
                goto LABEL_329;
              }
              uint64x2_t v271 = (uint64x2_t)vdupq_n_s64(v22);
              a1 = v364;
              uint64_t v17 = v365;
              if (v366 >= 0x10)
              {
                unint64_t v290 = v354;
                unint64_t v291 = a7;
                uint64_t v292 = (int8x16_t *)v264;
                do
                {
                  int8x16_t v293 = *v292++;
                  uint32x4_t v294 = (uint32x4_t)vqtbl1q_s8(v293, (int8x16_t)xmmword_18A643780);
                  uint32x4_t v295 = (uint32x4_t)vqtbl1q_s8(v293, (int8x16_t)xmmword_18A643790);
                  uint32x4_t v296 = (uint32x4_t)vqtbl1q_s8(v293, (int8x16_t)xmmword_18A643770);
                  uint32x4_t v297 = (uint32x4_t)vqtbl1q_s8(v293, (int8x16_t)xmmword_18A643760);
                  int8x16_t v299 = v291[2];
                  int8x16_t v298 = v291[3];
                  int8x16_t v301 = *v291;
                  int8x16_t v300 = v291[1];
                  int32x2_t v302 = (int32x2_t)vextq_s8(v301, v301, 8uLL).u64[0];
                  int32x2_t v303 = (int32x2_t)vextq_s8(v300, v300, 8uLL).u64[0];
                  int32x2_t v304 = (int32x2_t)vextq_s8(v299, v299, 8uLL).u64[0];
                  int32x2_t v305 = (int32x2_t)vextq_s8(v298, v298, 8uLL).u64[0];
                  int32x2_t v306 = vadd_s32(v305, v305);
                  v307.i64[0] = v306.u32[0];
                  v307.i64[1] = v306.u32[1];
                  int8x16_t v308 = v307;
                  *(int32x2_t *)v298.i8 = vadd_s32(*(int32x2_t *)v298.i8, *(int32x2_t *)v298.i8);
                  v307.i64[0] = v298.u32[0];
                  v307.i64[1] = v298.u32[1];
                  int8x16_t v309 = v307;
                  int32x2_t v310 = vadd_s32(v304, v304);
                  v307.i64[0] = v310.u32[0];
                  v307.i64[1] = v310.u32[1];
                  int8x16_t v311 = v307;
                  *(int32x2_t *)v299.i8 = vadd_s32(*(int32x2_t *)v299.i8, *(int32x2_t *)v299.i8);
                  v307.i64[0] = v299.u32[0];
                  v307.i64[1] = v299.u32[1];
                  int8x16_t v312 = v307;
                  *(int32x2_t *)v300.i8 = vadd_s32(*(int32x2_t *)v300.i8, *(int32x2_t *)v300.i8);
                  v307.i64[0] = v300.u32[0];
                  v307.i64[1] = v300.u32[1];
                  int8x16_t v313 = v307;
                  int32x2_t v314 = vadd_s32(v303, v303);
                  v307.i64[0] = v314.u32[0];
                  v307.i64[1] = v314.u32[1];
                  int8x16_t v315 = v307;
                  *(int32x2_t *)v301.i8 = vadd_s32(*(int32x2_t *)v301.i8, *(int32x2_t *)v301.i8);
                  v307.i64[0] = v301.u32[0];
                  v307.i64[1] = v301.u32[1];
                  int8x16_t v316 = v307;
                  int32x2_t v317 = vadd_s32(v302, v302);
                  v307.i64[0] = v317.u32[0];
                  v307.i64[1] = v317.u32[1];
                  int8x16_t v318 = (int8x16_t)vdupq_n_s64(1uLL);
                  *(int32x4_t *)unint64_t v291 = vuzp1q_s32((int32x4_t)vorrq_s8(v316, vandq_s8((int8x16_t)vaddw_u32(v271, *(uint32x2_t *)v294.i8), v318)), (int32x4_t)vorrq_s8(v307, vandq_s8((int8x16_t)vaddw_high_u32(v271, v294), v318)));
                  v291[1] = (int8x16_t)vuzp1q_s32((int32x4_t)vorrq_s8(v313, vandq_s8((int8x16_t)vaddw_u32(v271, *(uint32x2_t *)v295.i8), v318)), (int32x4_t)vorrq_s8(v315, vandq_s8((int8x16_t)vaddw_high_u32(v271, v295), v318)));
                  int8x16_t v269 = (int8x16_t)vuzp1q_s32((int32x4_t)vorrq_s8(v309, vandq_s8((int8x16_t)vaddw_u32(v271, *(uint32x2_t *)v297.i8), v318)), (int32x4_t)vorrq_s8(v308, vandq_s8((int8x16_t)vaddw_high_u32(v271, v297), v318)));
                  v291[2] = (int8x16_t)vuzp1q_s32((int32x4_t)vorrq_s8(v312, vandq_s8((int8x16_t)vaddw_u32(v271, *(uint32x2_t *)v296.i8), v318)), (int32x4_t)vorrq_s8(v311, vandq_s8((int8x16_t)vaddw_high_u32(v271, v296), v318)));
                  v291[3] = v269;
                  v291 += 4;
                  v290 -= 16;
                }
                while (v290);
                if (v354 == v366) {
                  goto LABEL_329;
                }
                unint64_t v270 = v354;
                unint64_t v272 = v354;
                if ((v366 & 8) == 0) {
                  goto LABEL_307;
                }
              }
              else
              {
                unint64_t v272 = 0;
              }
              int v273 = (uint64_t *)(v264 + v272);
              int64x2_t v274 = (int8x16_t *)((char *)a7 + 4 * v272);
              unint64_t v275 = v352 + v272;
              do
              {
                uint64_t v276 = *v273++;
                v269.i64[0] = v276;
                uint32x4_t v277 = (uint32x4_t)vqtbl1q_s8(v269, (int8x16_t)xmmword_18A643780);
                uint32x4_t v278 = (uint32x4_t)vqtbl1q_s8(v269, (int8x16_t)xmmword_18A643790);
                int8x16_t v280 = *v274;
                int8x16_t v279 = v274[1];
                int32x2_t v281 = (int32x2_t)vextq_s8(v280, v280, 8uLL).u64[0];
                int32x2_t v282 = (int32x2_t)vextq_s8(v279, v279, 8uLL).u64[0];
                *(int32x2_t *)v279.i8 = vadd_s32(*(int32x2_t *)v279.i8, *(int32x2_t *)v279.i8);
                v283.i64[0] = v279.u32[0];
                v283.i64[1] = v279.u32[1];
                int8x16_t v284 = v283;
                int32x2_t v285 = vadd_s32(v282, v282);
                v283.i64[0] = v285.u32[0];
                v283.i64[1] = v285.u32[1];
                int8x16_t v286 = v283;
                *(int32x2_t *)v280.i8 = vadd_s32(*(int32x2_t *)v280.i8, *(int32x2_t *)v280.i8);
                v283.i64[0] = v280.u32[0];
                v283.i64[1] = v280.u32[1];
                int8x16_t v287 = v283;
                int32x2_t v288 = vadd_s32(v281, v281);
                v283.i64[0] = v288.u32[0];
                v283.i64[1] = v288.u32[1];
                int8x16_t v289 = (int8x16_t)vdupq_n_s64(1uLL);
                int8x16_t v269 = (int8x16_t)vuzp1q_s32((int32x4_t)vorrq_s8(v284, vandq_s8((int8x16_t)vaddw_u32(v271, *(uint32x2_t *)v278.i8), v289)), (int32x4_t)vorrq_s8(v286, vandq_s8((int8x16_t)vaddw_high_u32(v271, v278), v289)));
                *(int32x4_t *)int64x2_t v274 = vuzp1q_s32((int32x4_t)vorrq_s8(v287, vandq_s8((int8x16_t)vaddw_u32(v271, *(uint32x2_t *)v277.i8), v289)), (int32x4_t)vorrq_s8(v283, vandq_s8((int8x16_t)vaddw_high_u32(v271, v277), v289)));
                v274[1] = v269;
                v274 += 2;
                v275 += 8;
              }
              while (v275);
              unint64_t v270 = v353;
              if (v353 != v366) {
                goto LABEL_307;
              }
LABEL_329:
              uint64_t v16 = v368 + v31 + v26 + 1;
LABEL_8:
              size_t v12 = v361;
LABEL_9:
              uint64_t v18 = v367;
              goto LABEL_10;
            }
            uint64_t v44 = v364[2];
            if (v44 - (uint64_t)v39 >= v43)
            {
              unsigned __int8 v350 = &v39[v43];
              int v161 = v38;
              BOOL v162 = v34;
              unsigned int v163 = v37;
              bzero(v39, v366 - (void)v41);
              unsigned int v37 = v163;
              BOOL v34 = v162;
              int v38 = v161;
              unsigned int v35 = v31 - 2;
              v364[1] = (uint64_t)v350;
              unint64_t v50 = v364;
              LODWORD(v42) = v366;
              goto LABEL_286;
            }
            unsigned int v340 = v37;
            BOOL v343 = v19 == 1;
            int v345 = v38;
            if ((v366 & 0x8000000000000000) != 0) {
              goto LABEL_334;
            }
            unint64_t v45 = (unint64_t)v41;
            unint64_t v46 = v44 - v40;
            uint64_t v47 = 2 * v46;
            if (2 * v46 <= v366) {
              uint64_t v47 = v366;
            }
            if (v46 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v48 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v48 = v47;
            }
            size_t v49 = v48;
            uint64_t v337 = (char *)operator new(v48);
            uint64_t v335 = &v337[v45];
            bzero(&v337[v45], v43);
            if (v39 == (char *)v40)
            {
              unint64_t v50 = v364;
              unint64_t v42 = v366;
              unsigned int v35 = v31 - 2;
              int v38 = v345;
              BOOL v34 = v343;
              unsigned int v37 = v340;
              int v174 = v335;
              long long v51 = v337;
              goto LABEL_284;
            }
            if (v45 < 8)
            {
              unint64_t v50 = v364;
              unint64_t v42 = v366;
              unsigned int v35 = v31 - 2;
              int v38 = v345;
              BOOL v34 = v343;
              unsigned int v37 = v340;
              char v52 = v335;
              long long v51 = v337;
              goto LABEL_281;
            }
            unint64_t v185 = v45;
            char v52 = &v337[v45];
            long long v51 = v337;
            unint64_t v50 = v364;
            unint64_t v42 = v366;
            unsigned int v35 = v31 - 2;
            int v38 = v345;
            BOOL v34 = v343;
            unsigned int v37 = v340;
            if ((unint64_t)(v40 - (void)v337) >= 0x20)
            {
              if (v185 < 0x20)
              {
                unint64_t v186 = 0;
                goto LABEL_216;
              }
              unint64_t v186 = v185 & 0xFFFFFFFFFFFFFFE0;
              char v221 = &v337[v185 - 16];
              uint64x2_t v222 = v39 - 16;
              unint64_t v223 = v185 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v224 = *(_OWORD *)v222;
                *((_OWORD *)v221 - 1) = *((_OWORD *)v222 - 1);
                *(_OWORD *)char v221 = v224;
                v221 -= 32;
                v222 -= 32;
                v223 -= 32;
              }
              while (v223);
              if (v185 == v186) {
                goto LABEL_283;
              }
              if ((v185 & 0x18) != 0)
              {
LABEL_216:
                char v52 = &v335[-(v185 & 0xFFFFFFFFFFFFFFF8)];
                unint64_t v225 = &v39[-v186 - v40 - 8 + (void)v337];
                unint64_t v226 = &v39[-v186 - 8];
                unint64_t v227 = v186 - (v185 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v228 = *(void *)v226;
                  v226 -= 8;
                  *(void *)unint64_t v225 = v228;
                  v225 -= 8;
                  v227 += 8;
                }
                while (v227);
                v39 -= v185 & 0xFFFFFFFFFFFFFFF8;
                if (v185 == (v185 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_283;
                }
                goto LABEL_281;
              }
              char v52 = &v335[-v186];
              v39 -= v186;
            }
LABEL_281:
            int32x4_t v262 = v52 - 1;
            do
            {
              char v263 = *--v39;
              *v262-- = v263;
            }
            while (v39 != (char *)v40);
LABEL_283:
            long long v39 = (char *)v40;
            int v174 = v51;
LABEL_284:
            *unint64_t v50 = (uint64_t)v174;
            v50[1] = (uint64_t)&v51[v42];
            v50[2] = (uint64_t)&v51[v49];
            if (v39)
            {
              operator delete(v39);
              unsigned int v37 = v340;
              BOOL v34 = v343;
              int v38 = v345;
              unsigned int v35 = v31 - 2;
            }
            goto LABEL_286;
          }
          size_t v146 = v358 - (void)v41;
          if (v358 <= (unint64_t)v41)
          {
            int64x2_t v152 = v364;
            unsigned int v153 = v366;
            if (v358 < (unint64_t)v41) {
              v364[1] = v40 + v358;
            }
            goto LABEL_316;
          }
          uint64_t v147 = v364[2];
          if (v147 - (uint64_t)v39 >= v146)
          {
            char v351 = &v39[v146];
            unint64_t v164 = v39;
            int v165 = v38;
            unsigned int v166 = v37;
            bzero(v164, v358 - (void)v41);
            unsigned int v37 = v166;
            BOOL v34 = v19 == 1;
            int v38 = v165;
            unsigned int v35 = v31 - 2;
            v364[1] = (uint64_t)v351;
            int64x2_t v152 = v364;
            unsigned int v153 = v366;
LABEL_316:
            unint64_t v325 = (int32x4_t *)*v152;
            unsigned int v326 = *(uint64_t **)v152[3];
            LODWORD(v369) = 0;
            BYTE4(v369) = a4;
            BYTE5(v369) = a5;
            WORD3(v369) = 0;
            uint64_t v370 = 1;
            __int16 v371 = 0;
            char v372 = v34;
            int v373 = 0;
            if (v37 >= 4) {
              char v327 = 1;
            }
            else {
              char v327 = v37;
            }
            char v374 = v327;
            if (v38 == 2) {
              char v328 = 4;
            }
            else {
              char v328 = 1;
            }
            if (!v38) {
              char v328 = 0;
            }
            char v375 = v328;
            *((void *)&v369 + 1) = __PAIR64__(v153, v35);
            uint64_t v329 = *v326;
            uint64_t v376 = (uint64_t)&v365[v368 + 3 + v26];
            uint64_t v377 = v35;
            uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v329, (uint64_t)&v376, v325, 0, &v369);
            if (result) {
              goto LABEL_331;
            }
            long long v330 = a7;
            uint64_t v17 = v365;
            unint64_t v331 = v366;
            a1 = v364;
            do
            {
              while (1)
              {
                __int32 v332 = v325->i32[0];
                unint64_t v325 = (int32x4_t *)((char *)v325 + 4);
                int v333 = v22 + v332;
                if (v19 >= 0x40) {
                  break;
                }
                v330->i32[0] = ((unint64_t)v330->u32[0] << v19) | v333 & ~(-1 << v19);
                long long v330 = (int8x16_t *)((char *)v330 + 4);
                if (!--v331) {
                  goto LABEL_329;
                }
              }
              v330->i32[0] = v333;
              long long v330 = (int8x16_t *)((char *)v330 + 4);
              --v331;
            }
            while (v331);
            goto LABEL_329;
          }
          unsigned int v342 = v37;
          int v349 = v38;
          if ((v358 & 0x8000000000000000) != 0) {
LABEL_334:
          }
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          unint64_t v148 = (unint64_t)v41;
          unint64_t v149 = v147 - v40;
          uint64_t v150 = 2 * v149;
          if (2 * v149 <= v358) {
            uint64_t v150 = v358;
          }
          if (v149 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v151 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v151 = v150;
          }
          size_t v339 = v151;
          unint64_t v336 = (char *)operator new(v151);
          size_t v334 = &v336[v148];
          bzero(&v336[v148], v146);
          if (v39 == (char *)v40)
          {
            int64x2_t v152 = v364;
            unsigned int v153 = v366;
            unsigned int v35 = v31 - 2;
            int v38 = v349;
            BOOL v34 = v19 == 1;
            unsigned int v37 = v342;
            int64x2_t v155 = v336;
            size_t v154 = v339;
            unint64_t v176 = v334;
            goto LABEL_314;
          }
          if (v148 < 8)
          {
            int64x2_t v152 = v364;
            unsigned int v153 = v366;
            unsigned int v35 = v31 - 2;
            int v38 = v349;
            BOOL v34 = v19 == 1;
            unsigned int v37 = v342;
            int64x2_t v155 = v336;
            size_t v154 = v339;
            int64x2_t v156 = v334;
            goto LABEL_311;
          }
          unint64_t v187 = v148;
          int64x2_t v155 = v336;
          size_t v154 = v339;
          int64x2_t v152 = v364;
          unsigned int v153 = v366;
          unsigned int v35 = v31 - 2;
          int v38 = v349;
          BOOL v34 = v19 == 1;
          unsigned int v37 = v342;
          int64x2_t v156 = v334;
          if ((unint64_t)(v40 - (void)v336) < 0x20) {
            goto LABEL_311;
          }
          if (v187 >= 0x20)
          {
            unint64_t v188 = v187 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v229 = &v336[v187 - 16];
            unint64_t v230 = v39 - 16;
            unint64_t v231 = v187 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v232 = *(_OWORD *)v230;
              *((_OWORD *)v229 - 1) = *((_OWORD *)v230 - 1);
              *(_OWORD *)unint64_t v229 = v232;
              v229 -= 32;
              v230 -= 32;
              v231 -= 32;
            }
            while (v231);
            if (v187 == v188) {
              goto LABEL_313;
            }
            if ((v187 & 0x18) == 0)
            {
              int64x2_t v156 = &v334[-v188];
              v39 -= v188;
LABEL_311:
              uint32x4_t v323 = v156 - 1;
              do
              {
                char v324 = *--v39;
                *v323-- = v324;
              }
              while (v39 != (char *)v40);
LABEL_313:
              long long v39 = (char *)v40;
              unint64_t v176 = v155;
LABEL_314:
              *int64x2_t v152 = (uint64_t)v176;
              v152[1] = (uint64_t)&v155[v358];
              v152[2] = (uint64_t)&v155[v154];
              if (v39)
              {
                operator delete(v39);
                unsigned int v37 = v342;
                BOOL v34 = v19 == 1;
                int v38 = v349;
                unsigned int v35 = v31 - 2;
              }
              goto LABEL_316;
            }
          }
          else
          {
            unint64_t v188 = 0;
          }
          int64x2_t v156 = &v334[-(v187 & 0xFFFFFFFFFFFFFFF8)];
          int64x2_t v233 = &v39[-v188 - v40 - 8 + (void)v336];
          int64x2_t v234 = &v39[-v188 - 8];
          unint64_t v235 = v188 - (v187 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v236 = *(void *)v234;
            v234 -= 8;
            *(void *)int64x2_t v233 = v236;
            v233 -= 8;
            v235 += 8;
          }
          while (v235);
          v39 -= v187 & 0xFFFFFFFFFFFFFFF8;
          if (v187 == (v187 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_313;
          }
          goto LABEL_311;
        case 2u:
          unint64_t v100 = (char *)*a1;
          int32x4_t v99 = (char *)a1[1];
          int32x4_t v101 = &v99[-*a1];
          size_t v102 = __sz - (void)v101;
          if (__sz <= (unint64_t)v101)
          {
            unint64_t v108 = v366;
            if (__sz < (unint64_t)v101) {
              a1[1] = (uint64_t)&v100[__sz];
            }
LABEL_236:
            unint64_t v239 = (uint64_t *)*a1;
            uint64_t result = mgcl::muid::decompress((mgcl::muid *)&v365[v368 + 1 + v26], (const char *)v31, 0, 0, *a1, (unint64_t *)8, v108);
            if (result) {
              return result;
            }
            unsigned int v240 = a7;
            uint64_t v17 = v365;
            unint64_t v241 = v366;
            do
            {
              while (1)
              {
                uint64_t v242 = *v239++;
                int v243 = v242 + v22;
                if (v19 >= 0x40) {
                  break;
                }
                v240->i32[0] = ((unint64_t)v240->u32[0] << v19) | v243 & ~(-1 << v19);
                unsigned int v240 = (int8x16_t *)((char *)v240 + 4);
                if (!--v241) {
                  goto LABEL_241;
                }
              }
              v240->i32[0] = v243;
              unsigned int v240 = (int8x16_t *)((char *)v240 + 4);
              --v241;
            }
            while (v241);
LABEL_241:
            uint64_t v16 = v368 + v31 + v26 + 1;
            a1 = v364;
            goto LABEL_8;
          }
          uint64_t v103 = a1[2];
          if (v103 - (uint64_t)v99 >= v102)
          {
            bzero((void *)a1[1], __sz - (void)v101);
            a1[1] = (uint64_t)&v99[v102];
            unint64_t v108 = v366;
            goto LABEL_236;
          }
          unint64_t v356 = (unint64_t)&v99[-*a1];
          if ((__sz & 0x8000000000000000) != 0) {
            goto LABEL_334;
          }
          unint64_t v104 = v103 - (void)v100;
          uint64_t v105 = 2 * v104;
          if (2 * v104 <= __sz) {
            uint64_t v105 = __sz;
          }
          if (v104 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v106 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v106 = v105;
          }
          uint64_t v347 = (char *)operator new(v106);
          unint64_t v344 = &v347[v356];
          bzero(&v347[v356], v102);
          size_t v107 = v106;
          if (v99 == v100)
          {
            a1 = v364;
            unint64_t v108 = v366;
            unint64_t v167 = &v347[v356];
            uint64x2_t v109 = v347;
            goto LABEL_234;
          }
          if (v356 < 8)
          {
            a1 = v364;
            unint64_t v108 = v366;
            uint32x4_t v110 = &v347[v356];
            uint64x2_t v109 = v347;
            goto LABEL_231;
          }
          uint32x4_t v110 = &v347[v356];
          uint64x2_t v109 = v347;
          a1 = v364;
          unint64_t v108 = v366;
          if ((unint64_t)(v100 - v347) < 0x20) {
            goto LABEL_231;
          }
          if (v356 >= 0x20)
          {
            unint64_t v169 = v356 & 0xFFFFFFFFFFFFFFE0;
            long long v197 = &v347[v356 - 16];
            uint64_t v198 = v99 - 16;
            unint64_t v199 = v356 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v200 = *(_OWORD *)v198;
              *((_OWORD *)v197 - 1) = *((_OWORD *)v198 - 1);
              *(_OWORD *)long long v197 = v200;
              v197 -= 32;
              v198 -= 32;
              v199 -= 32;
            }
            while (v199);
            if (v356 == v169) {
              goto LABEL_233;
            }
            if ((v356 & 0x18) == 0)
            {
              uint32x4_t v110 = &v344[-v169];
              v99 -= v169;
LABEL_231:
              unint64_t v237 = v110 - 1;
              do
              {
                char v238 = *--v99;
                *v237-- = v238;
              }
              while (v99 != v100);
LABEL_233:
              int32x4_t v99 = v100;
              unint64_t v167 = v109;
LABEL_234:
              *a1 = (uint64_t)v167;
              a1[1] = (uint64_t)&v109[__sz];
              a1[2] = (uint64_t)&v109[v107];
              if (v99) {
                operator delete(v99);
              }
              goto LABEL_236;
            }
          }
          else
          {
            unint64_t v169 = 0;
          }
          uint32x4_t v110 = &v344[-(v356 & 0xFFFFFFFFFFFFFFF8)];
          unint64_t v201 = &v347[&v99[-v169] - v100 - 8];
          BOOL v202 = &v99[-v169 - 8];
          unint64_t v203 = v169 - (v356 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v204 = *(void *)v202;
            v202 -= 8;
            *(void *)unint64_t v201 = v204;
            v201 -= 8;
            v203 += 8;
          }
          while (v203);
          v99 -= v356 & 0xFFFFFFFFFFFFFFF8;
          if (v356 == (v356 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_233;
          }
          goto LABEL_231;
        case 3u:
          uint64_t v79 = (char *)*a1;
          int v80 = (char *)a1[1];
          if (v80 != (char *)*a1)
          {
            a1[1] = (uint64_t)v79;
            int v80 = v79;
          }
          if (a1[2] - (uint64_t)v79 >= __sz) {
            goto LABEL_67;
          }
          if ((__sz & 0x8000000000000000) != 0) {
            goto LABEL_334;
          }
          unint64_t v81 = operator new(__sz);
          unint64_t v82 = v80 - v79;
          unint64_t v83 = &v81[v80 - v79];
          uint64_t v84 = v83;
          a1 = v364;
          uint64_t v17 = v365;
          if (v80 == v79) {
            goto LABEL_65;
          }
          uint64_t v84 = v81;
          if (v82 < 8 || (unint64_t)(v79 - v81) < 0x20)
          {
            uint64_t v85 = v80;
            uint64_t v86 = &v81[v80 - v79];
            goto LABEL_63;
          }
          if (v82 >= 0x20)
          {
            unint64_t v168 = v82 & 0xFFFFFFFFFFFFFFE0;
            unint64_t v177 = &v81[v82 - 16];
            int64x2_t v178 = (long long *)(v80 - 16);
            unint64_t v179 = v82 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v180 = *v178;
              *(v177 - 1) = *(v178 - 1);
              _OWORD *v177 = v180;
              v177 -= 2;
              v178 -= 2;
              v179 -= 32;
            }
            while (v179);
            if (v82 == v168)
            {
LABEL_65:
              *uint64x2_t v364 = (uint64_t)v84;
              v364[1] = (uint64_t)v83;
              v364[2] = (uint64_t)&v81[__sz];
              if (v79) {
                operator delete(v79);
              }
LABEL_67:
              uint64_t v89 = 0;
              uint64_t v90 = v368 + v26 + 1;
              size_t v12 = v361;
              do
              {
                while (1)
                {
                  char v91 = 0;
                  unint64_t v92 = 0;
                  uint64_t v93 = 0;
                  uint64_t v94 = v90;
                  unint64_t v95 = &v17[v90];
                  do
                  {
                    int v96 = (char)v95[v92];
                    v93 |= (unint64_t)(v95[v92] & 0x7F) << v91;
                    unint64_t v97 = v92 + 1;
                    if (v92 > 8) {
                      break;
                    }
                    v91 += 7;
                    ++v92;
                  }
                  while (v96 < 0);
                  __int32 v98 = v93 + v22;
                  if (v19 >= 0x40) {
                    break;
                  }
                  a7->i32[v89] = ((unint64_t)a7->u32[v89] << v19) | v98 & ~(-1 << v19);
                  uint64_t v90 = v94 + v97;
                  if (++v89 == v366) {
                    goto LABEL_74;
                  }
                }
                a7->i32[v89] = v98;
                uint64_t v90 = v94 + v97;
                ++v89;
              }
              while (v89 != v366);
LABEL_74:
              uint64_t v16 = v94 + v97;
              goto LABEL_9;
            }
            if ((v82 & 0x18) == 0)
            {
              uint64_t v86 = &v83[-v168];
              uint64_t v85 = &v80[-v168];
LABEL_63:
              unint64_t v87 = v86 - 1;
              do
              {
                char v88 = *--v85;
                *v87-- = v88;
              }
              while (v85 != v79);
              goto LABEL_65;
            }
          }
          else
          {
            unint64_t v168 = 0;
          }
          uint64_t v85 = &v80[-(v82 & 0xFFFFFFFFFFFFFFF8)];
          uint64_t v86 = &v83[-(v82 & 0xFFFFFFFFFFFFFFF8)];
          unint64_t v181 = &v81[&v80[-v168] - v79 - 8];
          int64x2_t v182 = (uint64_t *)&v80[-v168 - 8];
          unint64_t v183 = v168 - (v82 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v184 = *v182--;
            *v181-- = v184;
            v183 += 8;
          }
          while (v183);
          if (v82 != (v82 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_63;
          }
          goto LABEL_65;
        case 4u:
          operator new();
        default:
          return 3;
      }
    }
    uint64_t v53 = v363 - 8 * v16;
    do
    {
      uint64_t v54 = v24;
      uint64_t v55 = v53;
      int v56 = (char)v23[v21];
      v22 |= (unint64_t)(v23[v21] & 0x7F) << v20;
      if (v21 > 8) {
        break;
      }
      ++v21;
      v20 += 7;
      ++v24;
      v53 -= 8;
    }
    while (v56 < 0);
    char v57 = 0;
    unint64_t v58 = 0;
    unint64_t v59 = 0;
    unint64_t v60 = &v17[v16];
    do
    {
      int v61 = (char)v60[v54 + 1];
      v59 |= (unint64_t)(v60[++v54] & 0x7F) << v57;
      if (v58 > 8) {
        break;
      }
      ++v58;
      v57 += 7;
      v55 -= 8;
    }
    while (v61 < 0);
    switch(v17[v16])
    {
      case 1u:
        if (!a1[3]) {
          operator new();
        }
        unsigned int v62 = v59 - 2;
        if (v59 < 2) {
          return 3;
        }
        char v63 = &v17[v16 + v54];
        unsigned int v64 = v63[1];
        int v65 = v63[2];
        uint64_t v67 = *a1;
        int v66 = (char *)a1[1];
        unint64_t v68 = (unint64_t)&v66[-*a1];
        unint64_t v69 = (unint64_t)a1;
        size_t v70 = v366 - v68;
        if (v366 > v68)
        {
          uint64_t v71 = *(void *)(v69 + 16);
          if (v71 - (uint64_t)v66 >= v70)
          {
            int64x2_t v157 = &v66[v70];
            int64x2_t v158 = v66;
            int v159 = v65;
            unsigned int v160 = v64;
            bzero(v158, v366 - v68);
            unsigned int v62 = v59 - 2;
            unsigned int v64 = v160;
            int v65 = v159;
            *(void *)(v69 + 8) = v157;
            uint64_t v76 = (uint64_t *)v69;
            LODWORD(v69) = v366;
            goto LABEL_263;
          }
          unsigned int v346 = v64;
          int v355 = v65;
          if ((v366 & 0x8000000000000000) != 0) {
            goto LABEL_335;
          }
          unint64_t v72 = v71 - v67;
          uint64_t v73 = 2 * v72;
          if (2 * v72 <= v366) {
            uint64_t v73 = v366;
          }
          if (v72 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v74 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v74 = v73;
          }
          unint64_t v341 = (char *)operator new(v74);
          size_t v338 = &v341[v68];
          bzero(&v341[v68], v70);
          size_t v75 = v74;
          if (v66 == (char *)v67)
          {
            uint64_t v76 = v364;
            unint64_t v69 = v366;
            int v65 = v355;
            unsigned int v64 = v346;
            uint64_t v171 = &v341[v68];
            unint64_t v77 = v341;
            goto LABEL_261;
          }
          if (v68 < 8)
          {
            uint64_t v76 = v364;
            unint64_t v69 = v366;
            int v65 = v355;
            unsigned int v64 = v346;
            unsigned int v78 = &v341[v68];
            unint64_t v77 = v341;
            goto LABEL_258;
          }
          unsigned int v78 = &v341[v68];
          unint64_t v77 = v341;
          uint64_t v76 = v364;
          unint64_t v69 = v366;
          int v65 = v355;
          unsigned int v64 = v346;
          if ((unint64_t)(v67 - (void)v341) >= 0x20)
          {
            if (v68 < 0x20)
            {
              unint64_t v175 = 0;
              goto LABEL_208;
            }
            unint64_t v175 = v68 & 0xFFFFFFFFFFFFFFE0;
            uint64x2_t v213 = &v341[v68 - 16];
            unint64_t v214 = v66 - 16;
            unint64_t v215 = v68 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v216 = *(_OWORD *)v214;
              *((_OWORD *)v213 - 1) = *((_OWORD *)v214 - 1);
              *(_OWORD *)uint64x2_t v213 = v216;
              v213 -= 32;
              v214 -= 32;
              v215 -= 32;
            }
            while (v215);
            if (v68 == v175) {
              goto LABEL_260;
            }
            if ((v68 & 0x18) != 0)
            {
LABEL_208:
              unsigned int v78 = &v338[-(v68 & 0xFFFFFFFFFFFFFFF8)];
              uint32x4_t v217 = &v66[-v175 - v67 - 8 + (void)v341];
              unint64_t v218 = &v66[-v175 - 8];
              unint64_t v219 = v175 - (v68 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v220 = *(void *)v218;
                v218 -= 8;
                *(void *)uint32x4_t v217 = v220;
                v217 -= 8;
                v219 += 8;
              }
              while (v219);
              v66 -= v68 & 0xFFFFFFFFFFFFFFF8;
              if (v68 == (v68 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_260;
              }
              goto LABEL_258;
            }
            unsigned int v78 = &v338[-v175];
            v66 -= v175;
          }
LABEL_258:
          unint64_t v251 = v78 - 1;
          do
          {
            char v252 = *--v66;
            *v251-- = v252;
          }
          while (v66 != (char *)v67);
LABEL_260:
          int v66 = (char *)v67;
          uint64_t v171 = v77;
LABEL_261:
          unsigned int v62 = v59 - 2;
          *uint64_t v76 = (uint64_t)v171;
          v76[1] = (uint64_t)&v77[v69];
          v76[2] = (uint64_t)&v77[v75];
          if (v66)
          {
            operator delete(v66);
            unsigned int v62 = v59 - 2;
            unsigned int v64 = v346;
            int v65 = v355;
          }
          goto LABEL_263;
        }
        uint64_t v76 = (uint64_t *)v69;
        LODWORD(v69) = v366;
        if (v366 < v68) {
          v76[1] = v67 + v366;
        }
LABEL_263:
        uint64_t v253 = (unsigned __int8 *)*v76;
        uint64_t v254 = *(uint64_t **)v76[3];
        LODWORD(v369) = 0;
        BYTE4(v369) = a4;
        BYTE5(v369) = a5;
        WORD3(v369) = 0;
        uint64_t v370 = 1;
        __int16 v371 = 0;
        char v372 = 1;
        int v373 = 0;
        if (v64 >= 4) {
          char v255 = 1;
        }
        else {
          char v255 = v64;
        }
        char v374 = v255;
        if (v65 == 2) {
          char v256 = 4;
        }
        else {
          char v256 = 1;
        }
        if (!v65) {
          char v256 = 0;
        }
        char v375 = v256;
        *((void *)&v369 + 1) = __PAIR64__(v69, v62);
        uint64_t v257 = *v254;
        uint64_t v376 = (uint64_t)&v365[v368 + 3 + v54];
        uint64_t v377 = v62;
        uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v257, (uint64_t)&v376, (uint64_t)v253, 0, &v369);
        size_t v12 = v361;
        if (!result)
        {
          unint64_t v258 = (int *)a7;
          uint64_t v17 = v365;
          unint64_t v259 = v366;
          do
          {
            unsigned int v260 = *v253++;
            if (v22 + v260)
            {
              if (*v258) {
                int v261 = -*v258;
              }
              else {
                int v261 = 0x80000000;
              }
              *unint64_t v258 = v261;
            }
            ++v258;
            --v259;
          }
          while (v259);
          uint64_t v16 = v368 + v59 + v54 + 1;
          a1 = v364;
          goto LABEL_9;
        }
LABEL_331:
        if ((result - 1) >= 4) {
          return 5;
        }
        return result;
      case 2u:
        uint64_t v133 = *a1;
        unint64_t v132 = (char *)a1[1];
        unint64_t v134 = (unint64_t)&v132[-*a1];
        unint64_t v135 = a1;
        size_t v136 = __sz - v134;
        if (__sz > v134)
        {
          uint64_t v137 = v135[2];
          if (v137 - (uint64_t)v132 >= v136)
          {
            bzero(v132, __sz - v134);
            v135[1] = (uint64_t)&v132[v136];
            size_t v142 = v135;
            unint64_t v143 = v366;
            goto LABEL_248;
          }
          if ((__sz & 0x8000000000000000) != 0) {
LABEL_335:
          }
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          unint64_t v138 = v137 - v133;
          uint64_t v139 = 2 * v138;
          if (2 * v138 <= __sz) {
            uint64_t v139 = __sz;
          }
          if (v138 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v140 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v140 = v139;
          }
          int8x16_t v357 = (char *)operator new(v140);
          unint64_t v348 = &v357[v134];
          bzero(&v357[v134], v136);
          size_t v141 = v140;
          if (v132 == (char *)v133)
          {
            size_t v142 = v364;
            unint64_t v143 = v366;
            uint32x4_t v144 = v357;
            unint64_t v170 = &v357[v134];
          }
          else
          {
            if (v134 < 8)
            {
              size_t v142 = v364;
              unint64_t v143 = v366;
              uint32x4_t v144 = v357;
              uint32x4_t v145 = &v357[v134];
              goto LABEL_243;
            }
            uint32x4_t v144 = v357;
            size_t v142 = v364;
            unint64_t v143 = v366;
            uint32x4_t v145 = &v357[v134];
            if ((unint64_t)(v133 - (void)v357) < 0x20) {
              goto LABEL_243;
            }
            if (v134 >= 0x20)
            {
              unint64_t v173 = v134 & 0xFFFFFFFFFFFFFFE0;
              unint64_t v205 = &v357[v134 - 16];
              uint64_t v206 = v132 - 16;
              unint64_t v207 = v134 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v208 = *(_OWORD *)v206;
                *((_OWORD *)v205 - 1) = *((_OWORD *)v206 - 1);
                *(_OWORD *)unint64_t v205 = v208;
                v205 -= 32;
                v206 -= 32;
                v207 -= 32;
              }
              while (v207);
              if (v134 != v173)
              {
                if ((v134 & 0x18) == 0)
                {
                  uint32x4_t v145 = &v348[-v173];
                  v132 -= v173;
                  goto LABEL_243;
                }
                goto LABEL_200;
              }
            }
            else
            {
              unint64_t v173 = 0;
LABEL_200:
              uint32x4_t v145 = &v348[-(v134 & 0xFFFFFFFFFFFFFFF8)];
              unsigned int v209 = &v132[-v173 - v133 - 8 + (void)v357];
              unint64_t v210 = &v132[-v173 - 8];
              unint64_t v211 = v173 - (v134 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v212 = *(void *)v210;
                v210 -= 8;
                *(void *)unsigned int v209 = v212;
                v209 -= 8;
                v211 += 8;
              }
              while (v211);
              v132 -= v134 & 0xFFFFFFFFFFFFFFF8;
              if (v134 != (v134 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_243:
                unsigned int v244 = v145 - 1;
                do
                {
                  char v245 = *--v132;
                  *v244-- = v245;
                }
                while (v132 != (char *)v133);
              }
            }
            unint64_t v132 = (char *)v133;
            unint64_t v170 = v144;
          }
          uint64_t *v142 = (uint64_t)v170;
          v142[1] = (uint64_t)&v144[__sz];
          void v142[2] = (uint64_t)&v144[v141];
          if (v132) {
            operator delete(v132);
          }
          goto LABEL_248;
        }
        size_t v142 = v135;
        unint64_t v143 = v366;
        if (__sz < v134) {
          v142[1] = v133 + __sz;
        }
LABEL_248:
        int32x4_t v246 = (uint64_t *)*v142;
        uint64_t result = mgcl::muid::decompress((mgcl::muid *)&v365[v368 + 1 + v54], (const char *)v59, 0, 0, *v142, (unint64_t *)8, v143);
        if (result) {
          return result;
        }
        int64x2_t v247 = (int *)a7;
        uint64_t v17 = v365;
        unint64_t v248 = v366;
        size_t v12 = v361;
        uint64_t v18 = v367;
        do
        {
          uint64_t v249 = *v246++;
          if (v249 != -(uint64_t)v22)
          {
            if (*v247) {
              int v250 = -*v247;
            }
            else {
              int v250 = 0x80000000;
            }
            *int64x2_t v247 = v250;
          }
          ++v247;
          --v248;
        }
        while (v248);
        uint64_t v16 = v368 + v59 + v54 + 1;
        a1 = v364;
LABEL_10:
        uint64_t v15 = v18 + 1;
        if (v15 == v12) {
          return 0;
        }
        continue;
      case 3u:
        uint32x4_t v111 = (char *)*a1;
        uint32x4_t v112 = (char *)a1[1];
        if (v112 != (char *)*a1)
        {
          a1[1] = (uint64_t)v111;
          uint32x4_t v112 = v111;
        }
        if (a1[2] - (uint64_t)v111 >= __sz) {
          goto LABEL_99;
        }
        if ((__sz & 0x8000000000000000) != 0) {
          goto LABEL_335;
        }
        unint64_t v113 = operator new(__sz);
        unint64_t v114 = v112 - v111;
        int64x2_t v115 = &v113[v112 - v111];
        unint64_t v116 = v115;
        a1 = v364;
        uint64_t v17 = v365;
        size_t v12 = v361;
        if (v112 == v111) {
          goto LABEL_97;
        }
        unint64_t v116 = v113;
        if (v114 < 8 || (unint64_t)(v111 - v113) < 0x20)
        {
          long long v117 = v112;
          int64x2_t v118 = &v113[v112 - v111];
          goto LABEL_95;
        }
        if (v114 >= 0x20)
        {
          unint64_t v172 = v114 & 0xFFFFFFFFFFFFFFE0;
          uint64x2_t v189 = &v113[v114 - 16];
          uint64x2_t v190 = (long long *)(v112 - 16);
          unint64_t v191 = v114 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v192 = *v190;
            *(v189 - 1) = *(v190 - 1);
            *uint64x2_t v189 = v192;
            v189 -= 2;
            v190 -= 2;
            v191 -= 32;
          }
          while (v191);
          if (v114 == v172)
          {
LABEL_97:
            *uint64x2_t v364 = (uint64_t)v116;
            v364[1] = (uint64_t)v115;
            v364[2] = (uint64_t)&v113[__sz];
            if (v111) {
              operator delete(v111);
            }
LABEL_99:
            uint64_t v121 = 0;
            uint64_t v18 = v367;
            uint64_t v122 = v368 + v54 + 1;
            do
            {
              char v123 = 0;
              unint64_t v124 = 0;
              uint64_t v125 = 0;
              uint64_t v126 = v122;
              int32x4_t v127 = &v17[v122];
              do
              {
                int v128 = (char)v127[v124];
                v125 |= (unint64_t)(v127[v124] & 0x7F) << v123;
                unint64_t v129 = v124 + 1;
                if (v124 > 8) {
                  break;
                }
                v123 += 7;
                ++v124;
              }
              while (v128 < 0);
              if (v125 != -(uint64_t)v22)
              {
                __int32 v130 = a7->i32[v121];
                if (v130) {
                  int v131 = -v130;
                }
                else {
                  int v131 = 0x80000000;
                }
                a7->i32[v121] = v131;
              }
              uint64_t v122 = v126 + v129;
              ++v121;
            }
            while (v121 != v366);
            uint64_t v16 = v126 + v129;
            goto LABEL_10;
          }
          if ((v114 & 0x18) == 0)
          {
            int64x2_t v118 = &v115[-v172];
            long long v117 = &v112[-v172];
LABEL_95:
            int64x2_t v119 = v118 - 1;
            do
            {
              char v120 = *--v117;
              *v119-- = v120;
            }
            while (v117 != v111);
            goto LABEL_97;
          }
        }
        else
        {
          unint64_t v172 = 0;
        }
        long long v117 = &v112[-(v114 & 0xFFFFFFFFFFFFFFF8)];
        int64x2_t v118 = &v115[-(v114 & 0xFFFFFFFFFFFFFFF8)];
        uint16x8_t v193 = &v113[&v112[-v172] - v111 - 8];
        uint32x4_t v194 = (uint64_t *)&v112[-v172 - 8];
        unint64_t v195 = v172 - (v114 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v196 = *v194--;
          *v193-- = v196;
          v195 += 8;
        }
        while (v195);
        if (v114 != (v114 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_95;
        }
        goto LABEL_97;
      case 4u:
        operator new();
      default:
        return 3;
    }
  }
}

void sub_18A449858(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v2, 0x20C4093837F09);
  MEMORY[0x18C11F580](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void mgcl::iarray::Decoder::Decoder(mgcl::iarray::Decoder *this)
{
}

void sub_18A4499C8(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t mgcl::iarray::Decoder::decompress(uint64_t **this, const unsigned __int8 *a2, uint64_t a3, unint64_t *a4, int32x4_t *a5)
{
  uint64_t v7 = **this;
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  uint64_t result = gcl::polyline::DecoderImpl::decompressAttributes(v7, (uint64_t)&v9, a5, 0, 0);
  *a4 = a3 - (v10 & ~(v10 >> 63));
  return result;
}

void mgcl::tmesh::Decoder::~Decoder(gcl::tmesh::DecoderImpl ***this)
{
  uint64_t v1 = *this;
  *this = 0;
  if (v1)
  {
    uint64_t v2 = *v1;
    void *v1 = 0;
    if (v2)
    {
      gcl::tmesh::DecoderImpl::~DecoderImpl(v2);
      MEMORY[0x18C11F580]();
    }
    MEMORY[0x18C11F580](v1, 0x20C4093837F09);
  }
}

uint64_t mgcl::raster::PolygonRasterDecoder<unsigned short>::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  char v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  do
  {
    unint64_t v8 = v6;
    int v9 = *(char *)(a2 + v6++);
    v7 |= (unint64_t)(v9 & 0x7F) << v5;
    if (v8 > 8) {
      break;
    }
    v5 += 7;
  }
  while (v9 < 0);
  if (v7 != 1) {
    return 4;
  }
  char v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  do
  {
    int v13 = *(char *)(a2 + v11 + v6);
    v12 |= (unint64_t)(*(unsigned char *)(a2 + v11 + v6) & 0x7F) << v10;
    unint64_t v14 = v11 + 1;
    if (v11 > 8) {
      break;
    }
    v10 += 7;
    ++v11;
  }
  while (v13 < 0);
  char v15 = 0;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  unint64_t v18 = v6 + v14;
  do
  {
    int v19 = *(char *)(a2 + v18++);
    v17 |= (unint64_t)(v19 & 0x7F) << v15;
    if (v16 > 8) {
      break;
    }
    ++v16;
    v15 += 7;
  }
  while (v19 < 0);
  char v20 = 0;
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  int64_t v23 = (char *)(a2 + v18);
  do
  {
    int v25 = *v23++;
    int v24 = v25;
    ++v18;
    v22 |= (unint64_t)(v25 & 0x7F) << v20;
    if (v21 > 8) {
      break;
    }
    ++v21;
    v20 += 7;
  }
  while (v24 < 0);
  char v26 = 0;
  unint64_t v27 = 0;
  uint64_t v28 = 0;
  do
  {
    int v30 = *v23++;
    int v29 = v30;
    ++v18;
    v28 |= (unint64_t)(v30 & 0x7F) << v26;
    if (v27 > 8) {
      break;
    }
    ++v27;
    v26 += 7;
  }
  while (v29 < 0);
  char v31 = 0;
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  do
  {
    int v35 = *v23++;
    int v34 = v35;
    ++v18;
    v33 |= (unint64_t)(v35 & 0x7F) << v31;
    if (v32 > 8) {
      break;
    }
    ++v32;
    v31 += 7;
  }
  while (v34 < 0);
  *(void *)a4 = v22;
  *(void *)(a4 + 8) = v28;
  *(_DWORD *)(a4 + 16) = v33;
  if (!a5) {
    operator new[]();
  }
  uint64_t v36 = *(void *)(a4 + 24);
  *(void *)(a4 + 24) = 0;
  if (v36) {
    MEMORY[0x18C11F560](v36, 0x1000C80BDFB0063);
  }
  return 0;
}

void sub_18A44A814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v28 = *(void **)(v26 - 136);
    if (!v28)
    {
LABEL_3:
      int v29 = *(void **)(v26 - 112);
      if (!v29) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v28 = *(void **)(v26 - 136);
    if (!v28) {
      goto LABEL_3;
    }
  }
  *(void *)(v26 - 128) = v28;
  operator delete(v28);
  int v29 = *(void **)(v26 - 112);
  if (!v29) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  *(void *)(v26 - 104) = v29;
  operator delete(v29);
  _Unwind_Resume(exception_object);
}

uint64_t mgcl::raster::PolygonRasterDecoder<unsigned int>::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  char v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  do
  {
    unint64_t v8 = v6;
    int v9 = *(char *)(a2 + v6++);
    v7 |= (unint64_t)(v9 & 0x7F) << v5;
    if (v8 > 8) {
      break;
    }
    v5 += 7;
  }
  while (v9 < 0);
  if (v7 != 1) {
    return 4;
  }
  char v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  do
  {
    int v13 = *(char *)(a2 + v11 + v6);
    v12 |= (unint64_t)(*(unsigned char *)(a2 + v11 + v6) & 0x7F) << v10;
    unint64_t v14 = v11 + 1;
    if (v11 > 8) {
      break;
    }
    v10 += 7;
    ++v11;
  }
  while (v13 < 0);
  char v15 = 0;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  unint64_t v18 = v6 + v14;
  do
  {
    int v19 = *(char *)(a2 + v18++);
    v17 |= (unint64_t)(v19 & 0x7F) << v15;
    if (v16 > 8) {
      break;
    }
    ++v16;
    v15 += 7;
  }
  while (v19 < 0);
  char v20 = 0;
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  int64_t v23 = (char *)(a2 + v18);
  do
  {
    int v25 = *v23++;
    int v24 = v25;
    ++v18;
    v22 |= (unint64_t)(v25 & 0x7F) << v20;
    if (v21 > 8) {
      break;
    }
    ++v21;
    v20 += 7;
  }
  while (v24 < 0);
  char v26 = 0;
  unint64_t v27 = 0;
  uint64_t v28 = 0;
  do
  {
    int v30 = *v23++;
    int v29 = v30;
    ++v18;
    v28 |= (unint64_t)(v30 & 0x7F) << v26;
    if (v27 > 8) {
      break;
    }
    ++v27;
    v26 += 7;
  }
  while (v29 < 0);
  char v31 = 0;
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  do
  {
    int v35 = *v23++;
    int v34 = v35;
    ++v18;
    v33 |= (unint64_t)(v35 & 0x7F) << v31;
    if (v32 > 8) {
      break;
    }
    ++v32;
    v31 += 7;
  }
  while (v34 < 0);
  *(void *)a4 = v22;
  *(void *)(a4 + 8) = v28;
  *(_DWORD *)(a4 + 16) = v33;
  if (!a5) {
    operator new[]();
  }
  uint64_t v36 = *(void *)(a4 + 24);
  *(void *)(a4 + 24) = 0;
  if (v36) {
    MEMORY[0x18C11F560](v36, 0x1000C8052888210);
  }
  return 0;
}

void sub_18A44B600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v28 = *(void **)(v26 - 136);
    if (!v28)
    {
LABEL_3:
      int v29 = *(void **)(v26 - 112);
      if (!v29) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v28 = *(void **)(v26 - 136);
    if (!v28) {
      goto LABEL_3;
    }
  }
  *(void *)(v26 - 128) = v28;
  operator delete(v28);
  int v29 = *(void **)(v26 - 112);
  if (!v29) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  *(void *)(v26 - 104) = v29;
  operator delete(v29);
  _Unwind_Resume(exception_object);
}

uint64_t mgcl::bldg::BldgDecoderV1::decode(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a4;
  if (a3 && a4)
  {
    unsigned int v5 = *a3;
    unsigned int v4 = a3 + 1;
    *(_DWORD *)(a1 + 1144) = (v5 >> 4) & 3;
    *(unsigned char *)(a1 + 1150) = (v5 & 8) != 0;
    *(unsigned char *)(a1 + 1151) = (v5 & 4) != 0;
    int v6 = (v5 >> 1) & 1;
    if ((v5 & 0x40) != 0) {
      char v7 = 0;
    }
    else {
      char v7 = v6;
    }
    *(unsigned char *)(a1 + 1152) = v7;
    *(_WORD *)(a1 + 1148) = 0;
    uint64_t v8 = a4 - 1;
    do
    {
      *(void *)(a1 + 8) = v8;
      if (v8 == -1) {
        break;
      }
      *(void *)a1 = v4;
      int v9 = (char)*(v4++ - 1);
      --v8;
    }
    while ((v9 & 0x80000000) == 0);
    long long v12 = xmmword_18A6437D0;
    v11[0] = v11;
    v11[1] = v11;
    v11[2] = 0;
    operator new();
  }
  return 3;
}

void sub_18A44BE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::list<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::GenericAttr,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::GenericAttr>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        unsigned int v5 = (uint64_t *)v2[1];
        operator delete(v2);
        uint64_t v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t mgcl::bldg::decompress(unsigned __int8 *a1, uint64_t a2, uint64_t a3, long long *a4, _DWORD *a5)
{
  *a5 = 0;
  v16[3] = 0;
  v16[136] = 0x8000800080008000;
  memset_pattern16(&v17, &memset_pattern, 0xAuLL);
  memset_pattern16(v18, &memset_pattern_316, 0x10uLL);
  memset_pattern16(v19, &memset_pattern_317, 0xAuLL);
  *(_DWORD *)&v19[26] = 16843009;
  v19[30] = 0;
  __p = 0;
  uint64_t v22 = 0;
  unint64_t v21 = 0;
  *(_OWORD *)int64_t v23 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  *(void *)&v23[16] = *((void *)a4 + 2);
  *((void *)a4 + 2) = 0;
  uint64_t v10 = mgcl::bldg::BldgDecoderV1::decode((uint64_t)v16, a3, a1, a2);
  unint64_t v11 = *(void **)v23;
  if (!v10)
  {
    long long v12 = *a4;
    *(void *)a4 = *(void *)v23;
    uint64_t v13 = *((void *)a4 + 2);
    long long v14 = *(_OWORD *)&v23[8];
    *(_OWORD *)int64_t v23 = v12;
    *(void *)&v23[16] = v13;
    *(long long *)((char *)a4 + 8) = v14;
    *a5 = (unint64_t)(v21 - (unsigned char *)__p) >> 5;
    unint64_t v11 = (void *)v12;
  }
  if (v11)
  {
    *(void *)&v23[8] = v11;
    operator delete(v11);
  }
  if (__p)
  {
    unint64_t v21 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_18A44C07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void mgcl::bldg::BldgDecoderV1::~BldgDecoderV1(mgcl::bldg::BldgDecoderV1 *this)
{
  uint64_t v2 = (void *)*((void *)this + 149);
  if (v2)
  {
    *((void *)this + 150) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 146);
  if (v3)
  {
    *((void *)this + 147) = v3;
    operator delete(v3);
  }
}

void *std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void gcl::gpcc::Decoder::Delegate::~Delegate(gcl::gpcc::Decoder::Delegate *this)
{
  uint64_t v2 = (char *)this + 160;
  uint64_t v3 = (char *)*((void *)this + 23);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    uint64_t v4 = (char *)this + 128;
    unsigned int v5 = (gcl::gpcc::Decoder::Delegate *)*((void *)this + 19);
    if (v5 != (gcl::gpcc::Decoder::Delegate *)((char *)this + 128)) {
      goto LABEL_5;
    }
LABEL_21:
    (*(void (**)(char *))(*(void *)v4 + 32))(v4);
    int v6 = (char *)this + 96;
    char v7 = (gcl::gpcc::Decoder::Delegate *)*((void *)this + 15);
    if (v7 != (gcl::gpcc::Decoder::Delegate *)((char *)this + 96)) {
      goto LABEL_8;
    }
LABEL_22:
    (*(void (**)(char *))(*(void *)v6 + 32))(v6);
    uint64_t v8 = (char *)this + 64;
    int v9 = (gcl::gpcc::Decoder::Delegate *)*((void *)this + 11);
    if (v9 != (gcl::gpcc::Decoder::Delegate *)((char *)this + 64)) {
      goto LABEL_11;
    }
LABEL_23:
    (*(void (**)(char *))(*(void *)v8 + 32))(v8);
    uint64_t v10 = (char *)this + 32;
    unint64_t v11 = (gcl::gpcc::Decoder::Delegate *)*((void *)this + 7);
    if (v11 != (gcl::gpcc::Decoder::Delegate *)((char *)this + 32)) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
  if (v3) {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = (char *)this + 128;
  unsigned int v5 = (gcl::gpcc::Decoder::Delegate *)*((void *)this + 19);
  if (v5 == (gcl::gpcc::Decoder::Delegate *)((char *)this + 128)) {
    goto LABEL_21;
  }
LABEL_5:
  if (v5) {
    (*(void (**)(gcl::gpcc::Decoder::Delegate *))(*(void *)v5 + 40))(v5);
  }
  int v6 = (char *)this + 96;
  char v7 = (gcl::gpcc::Decoder::Delegate *)*((void *)this + 15);
  if (v7 == (gcl::gpcc::Decoder::Delegate *)((char *)this + 96)) {
    goto LABEL_22;
  }
LABEL_8:
  if (v7) {
    (*(void (**)(gcl::gpcc::Decoder::Delegate *))(*(void *)v7 + 40))(v7);
  }
  uint64_t v8 = (char *)this + 64;
  int v9 = (gcl::gpcc::Decoder::Delegate *)*((void *)this + 11);
  if (v9 == (gcl::gpcc::Decoder::Delegate *)((char *)this + 64)) {
    goto LABEL_23;
  }
LABEL_11:
  if (v9) {
    (*(void (**)(gcl::gpcc::Decoder::Delegate *))(*(void *)v9 + 40))(v9);
  }
  uint64_t v10 = (char *)this + 32;
  unint64_t v11 = (gcl::gpcc::Decoder::Delegate *)*((void *)this + 7);
  if (v11 != (gcl::gpcc::Decoder::Delegate *)((char *)this + 32))
  {
LABEL_14:
    if (v11) {
      (*(void (**)(gcl::gpcc::Decoder::Delegate *))(*(void *)v11 + 40))(v11);
    }
    long long v12 = (gcl::gpcc::Decoder::Delegate *)*((void *)this + 3);
    if (v12 != this) {
      goto LABEL_17;
    }
LABEL_25:
    (*(void (**)(gcl::gpcc::Decoder::Delegate *))(*(void *)this + 32))(this);
    return;
  }
LABEL_24:
  (*(void (**)(char *))(*(void *)v10 + 32))(v10);
  long long v12 = (gcl::gpcc::Decoder::Delegate *)*((void *)this + 3);
  if (v12 == this) {
    goto LABEL_25;
  }
LABEL_17:
  if (v12) {
    (*(void (**)(gcl::gpcc::Decoder::Delegate *))(*(void *)v12 + 40))(v12);
  }
}

void std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::~__func()
{
}

__n128 std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1ED517FF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ED517FF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::operator()(uint64_t a1, int *a2, int *a3)
{
  uint64_t v4 = *(_DWORD **)(a1 + 8);
  int v5 = *a2;
  if (*v4 != *a2 && v4[1] != v5 && v4[2] != v5 && v4[3] != v5)
  {
    int v6 = *(double ***)(a1 + 16);
    int v7 = *a3;
    int v8 = v5 - 1936749072;
    int v9 = a2[3];
    uint64_t v10 = (double *)operator new(0x40uLL);
    *((_DWORD *)v10 + 4) = v7;
    *((_DWORD *)v10 + 5) = v8;
    double result = *(double *)(a2 + 1);
    v10[3] = result;
    *((_DWORD *)v10 + 8) = v9;
    long long v12 = *v6;
    *(void *)uint64_t v10 = *v6;
    *((void *)v10 + 1) = v6;
    *((void *)v12 + 1) = v10;
    *int v6 = v10;
    v6[2] = (double *)((char *)v6[2] + 1);
  }
  return result;
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRK"
                     "NS_4gpcc20AttributeDescriptionEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11Arra"
                                "yBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_18A44C898(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::~__func()
{
}

void *std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1ED518050;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED518050;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(_DWORD *)(a4 + 36);
  *(void *)(v4 + 1132) = *(void *)(a4 + 28);
  *(_DWORD *)(v4 + 1140) = v5;
  return 1;
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRK"
                     "NS_4gpcc20AttributeDescriptionEEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11Arra"
                                "yBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_18A44CC58(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::~__func()
{
}

__n128 std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1ED5180A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ED5180A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::operator()@<D0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(void *)(*(void *)(a1 + 8) + 24))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    for (uint64_t i = *(void *)(v7 + 8); i != v7; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v9 = *(void *)(a1 + 8);
      unint64_t v31 = v4;
      uint64_t v10 = *(void *)(v9 + 24);
      if (!v10) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v10 + 48))(&v29);
      *(_OWORD *)(i + 40) = v29;
      *(void *)(i + 56) = v30;
      if (*(void *)(i + 40))
      {
        if (*(_DWORD *)(i + 52))
        {
          unint64_t v11 = *(unsigned int *)(i + 16);
          if ((v11 & 0x80000000) == 0)
          {
            uint64_t v12 = **(void **)(a1 + 24);
            if (v12)
            {
              if (*(void *)(v12 + 16) > v11) {
                *(void *)(*(void *)(v12 + 8) + ((v11 >> 3) & 0x1FFFFFF8)) |= 1 << v11;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v13 = *(char **)(v5 + 1176);
  long long v14 = *(unsigned char **)(v5 + 1168);
  unint64_t v15 = (v13 - v14) >> 5;
  unint64_t v16 = v4 - v15;
  if (v4 <= v15)
  {
    if (v4 < v15)
    {
      uint64_t v13 = &v14[32 * v4];
      *(void *)(v5 + 1176) = v13;
    }
  }
  else
  {
    uint64_t v17 = *(void *)(v5 + 1184);
    if (v16 <= (v17 - (uint64_t)v13) >> 5)
    {
      bzero(*(void **)(v5 + 1176), 32 * v16);
      uint64_t v26 = &v13[32 * v16];
      *(void *)(v5 + 1176) = v26;
    }
    else
    {
      if (v4 >> 59) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = v17 - (void)v14;
      uint64_t v19 = v18 >> 4;
      if (v18 >> 4 <= v4) {
        uint64_t v19 = v4;
      }
      BOOL v20 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0;
      unint64_t v21 = 0x7FFFFFFFFFFFFFFLL;
      if (!v20) {
        unint64_t v21 = v19;
      }
      if (v21 >> 59) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v22 = 32 * v21;
      int64_t v23 = (char *)operator new(32 * v21);
      int v24 = &v23[32 * v15];
      int v25 = &v23[v22];
      bzero(v24, 32 * v16);
      uint64_t v26 = &v24[32 * v16];
      if (v13 != v14)
      {
        do
        {
          long long v27 = *((_OWORD *)v13 - 1);
          *((_OWORD *)v24 - 2) = *((_OWORD *)v13 - 2);
          *((_OWORD *)v24 - 1) = v27;
          v24 -= 32;
          v13 -= 32;
        }
        while (v13 != v14);
        uint64_t v13 = *(char **)(v5 + 1168);
      }
      *(void *)(v5 + 1168) = v24;
      *(void *)(v5 + 1176) = v26;
      *(void *)(v5 + 1184) = v25;
      if (v13)
      {
        operator delete(v13);
        uint64_t v26 = *(char **)(v5 + 1176);
      }
    }
    long long v14 = *(unsigned char **)(v5 + 1168);
    uint64_t v13 = v26;
  }
  *(void *)a3 = v14 + 8;
  *(void *)(a3 + 8) = ((v13 - v14) >> 4) + ((v13 - v14) >> 5);
  *(void *)&double result = 0x2000000004;
  *(void *)(a3 + 16) = 0x2000000004;
  *(unsigned char *)(a3 + 24) = 0;
  return result;
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRK"
                     "NS_4gpcc20AttributeDescriptionEEEEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11Arra"
                                "yBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::target_type()
{
}

void *std::__function::__value_func<gcl::gpcc::ArrayBuffer ()(unsigned long)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_18A44D250(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1ED518100;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ED518100;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::operator()@<X0>(uint64_t result@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  int v6 = *a2;
  int v7 = *a3;
  uint64_t v8 = *(void *)(v5 + 1168);
  *(void *)(a4 + 8) = (*(void *)(v5 + 1176) - v8) >> 5;
  *(_DWORD *)(a4 + 20) = 32;
  switch(v6)
  {
    case 1936749056:
      *(void *)a4 = v8;
      *(_DWORD *)(a4 + 16) = 8;
      *(unsigned char *)(a4 + 24) = 1;
      break;
    case 1936749057:
      *(void *)a4 = v8 + 28;
      *(_DWORD *)(a4 + 16) = 2;
      *(unsigned char *)(a4 + 24) = 1;
      *(unsigned char *)(v5 + 1149) = 1;
      break;
    case 1936749058:
      *(void *)a4 = v8 + 20;
      *(_DWORD *)(a4 + 16) = 4;
      *(unsigned char *)(a4 + 24) = 0;
      break;
    case 1936749059:
      *(void *)a4 = v8 + 24;
      *(_DWORD *)(a4 + 16) = 4;
      *(unsigned char *)(a4 + 24) = 0;
      break;
    default:
      uint64_t v9 = *(void *)(v4 + 8);
      if (v9 == v4)
      {
LABEL_6:
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
      }
      else
      {
        while (*(_DWORD *)(v9 + 16) != v7)
        {
          uint64_t v9 = *(void *)(v9 + 8);
          if (v9 == v4) {
            goto LABEL_6;
          }
        }
        int v10 = *(_DWORD *)(v9 + 48);
        uint64_t v11 = *(int *)(v9 + 52);
        *(void *)a4 = *(void *)(v9 + 40);
        *(void *)(a4 + 8) = v11;
        int v12 = *(_DWORD *)(v9 + 56);
        *(_DWORD *)(a4 + 16) = v10;
        *(_DWORD *)(a4 + 20) = v12;
        *(unsigned char *)(a4 + 24) = 0;
      }
      break;
  }
  return result;
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRK"
                     "NS_4gpcc20AttributeDescriptionEEEEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11Arra"
                                "yBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::target_type()
{
}

void *std::__function::__value_func<gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_18A44D718(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4>,void ()(int,unsigned long)>::~__func()
{
}

void *std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4>,void ()(int,unsigned long)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1ED518158;
  return result;
}

void std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4>,void ()(int,unsigned long)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1ED518158;
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4>,void ()(int,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRK"
                     "NS_4gpcc20AttributeDescriptionEEEEE3$_4")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11Arra"
                                "yBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_4"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4>,void ()(int,unsigned long)>::target_type()
{
}

void *std::__function::__value_func<void ()(int,unsigned long)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    unint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_18A44DAA8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5>,gcl::Error ()(int,gcl::gpcc::ByteBuffer)>::~__func()
{
}

void *std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5>,gcl::Error ()(int,gcl::gpcc::ByteBuffer)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1ED5181B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5>,gcl::Error ()(int,gcl::gpcc::ByteBuffer)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED5181B0;
  a2[1] = v2;
  return result;
}

double std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5>,gcl::Error ()(int,gcl::gpcc::ByteBuffer)>::operator()(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *a2;
  uint64_t v5 = *(unsigned __int8 **)a3;
  int v6 = *(const char **)(a3 + 16);
  if (v4 == 253)
  {
    if (!mgcl::muid::decompress((mgcl::muid *)v5, v6, 0, 0, *(void *)(v3 + 1168), (unint64_t *)0x20, (uint64_t)(*(void *)(v3 + 1176) - *(void *)(v3 + 1168)) >> 5))*(unsigned char *)(v3 + 1148) = 1; {
    return result;
    }
  }
  if (v4 != 254) {
    return result;
  }
  *(_DWORD *)(v3 + 16) = v6;
  *(void *)(v3 + 24) = v5;
  *(void *)&long long v7 = 0xFFFF000000000000;
  *((void *)&v7 + 1) = 0xFFFF000000000000;
  *(_OWORD *)(v3 + 40) = v7;
  *(void *)(v3 + 56) = 16;
  if (!v6)
  {
    int v8 = -16777216;
    goto LABEL_12;
  }
  int v8 = *v5 << 24;
  *(_DWORD *)(v3 + 48) = v8;
  if (v6 == 1)
  {
LABEL_12:
    int v9 = v8 | 0xFF0000;
    goto LABEL_13;
  }
  int v9 = v8 | (v5[1] << 16);
  *(_DWORD *)(v3 + 48) = v9;
  if (v6 <= 2)
  {
LABEL_13:
    int v10 = v9 | 0xFF00;
    goto LABEL_14;
  }
  int v10 = v9 | (v5[2] << 8);
  *(_DWORD *)(v3 + 48) = v10;
  if (v6 == 3)
  {
LABEL_14:
    int v11 = 255;
    goto LABEL_15;
  }
  int v11 = v5[3];
LABEL_15:
  *(_DWORD *)(v3 + 48) = v11 | v10;
  *(void *)(v3 + 32) = 3;
  memcpy((void *)(v3 + 64), &gcl::ArithmeticDecoder::probUpdateLutInterleaved, 0x400uLL);
  *(_OWORD *)__p = 0uLL;
  v507 = 0;
  unint64_t v498 = *(int32x2_t **)(v3 + 1176);
  v503 = *(int32x2_t **)(v3 + 1168);
  uint64_t v13 = 2 * ((char *)v498 - (char *)v503);
  uint64_t v14 = v13 - (((char *)v498 - (char *)v503) >> 2);
  if (v13 != ((char *)v498 - (char *)v503) >> 2)
  {
    if (v14 < 0) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    __p[0] = operator new(v13 - (((char *)v498 - (char *)v503) >> 2));
    __p[1] = __p[0];
    v507 = (char *)__p[0] + v14;
  }
  if (v503 != v498)
  {
    uint64_t v15 = v3 + 1106;
    uint64_t v16 = v3 + 1122;
    do
    {
      if ((unint64_t)(v507 - (char *)__p[1]) >= 0x18)
      {
        *(_OWORD *)__p[1] = 0uLL;
        *((void *)__p[1] + 2) = 0;
        uint64_t v25 = (uint64_t)__p[1] + 24;
        __p[1] = (char *)__p[1] + 24;
        goto LABEL_53;
      }
      unint64_t v17 = (char *)__p[1] - (char *)__p[0];
      uint64_t v18 = (char *)__p[1] - (char *)__p[0] + 24;
      if (v18 < 0) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v19 = v507 - (char *)__p[0];
      if (2 * (v507 - (char *)__p[0]) > (unint64_t)v18) {
        uint64_t v18 = 2 * v19;
      }
      if (v19 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v20 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v20 = v18;
      }
      if (v20)
      {
        unint64_t v21 = (char *)operator new(v20);
        uint64_t v22 = &v21[v17];
        *(void *)uint64_t v22 = 0;
        *((void *)v22 + 1) = 0;
        *((void *)v22 + 2) = 0;
        if (__p[0] != __p[1]) {
          goto LABEL_30;
        }
      }
      else
      {
        unint64_t v21 = 0;
        uint64_t v22 = (char *)((char *)__p[1] - (char *)__p[0]);
        *(void *)unint64_t v17 = 0;
        *(void *)(v17 + 8) = 0;
        *(void *)(v17 + 16) = 0;
        if (__p[0] != __p[1])
        {
LABEL_30:
          if (v17 < 8)
          {
            unint64_t v23 = (unint64_t)__p[1];
            int v24 = v22;
            goto LABEL_47;
          }
          unint64_t v23 = (unint64_t)__p[1];
          int v24 = v22;
          if ((void *)((char *)__p[0] - (char *)v21) < (void *)0x20) {
            goto LABEL_47;
          }
          if (v17 >= 0x20)
          {
            unint64_t v28 = v17 & 0xFFFFFFFFFFFFFFE0;
            long long v29 = &v21[v17 - 16];
            uint64_t v30 = (long long *)((char *)__p[1] - 16);
            unint64_t v31 = v17 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v32 = *v30;
              *((_OWORD *)v29 - 1) = *(v30 - 1);
              *(_OWORD *)long long v29 = v32;
              v29 -= 32;
              v30 -= 2;
              v31 -= 32;
            }
            while (v31);
            if (v17 != v28)
            {
              if ((v17 & 0x18) == 0)
              {
                int v24 = &v22[-v28];
                unint64_t v23 = (unint64_t)__p[1] - v28;
                goto LABEL_47;
              }
              goto LABEL_42;
            }
          }
          else
          {
            unint64_t v28 = 0;
LABEL_42:
            unint64_t v23 = (unint64_t)__p[1] - (v17 & 0xFFFFFFFFFFFFFFF8);
            int v24 = &v22[-(v17 & 0xFFFFFFFFFFFFFFF8)];
            uint64_t v33 = &v21[(char *)__p[1] - v28 - (char *)__p[0] - 8];
            int v34 = (uint64_t *)((char *)__p[1] - v28 - 8);
            unint64_t v35 = v28 - (v17 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v36 = *v34--;
              *(void *)uint64_t v33 = v36;
              v33 -= 8;
              v35 += 8;
            }
            while (v35);
            if (v17 != (v17 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_47:
              unsigned int v37 = v24 - 1;
              do
              {
                char v38 = *(unsigned char *)--v23;
                *v37-- = v38;
              }
              while ((void *)v23 != __p[0]);
            }
          }
          uint64_t v26 = v21;
          long long v27 = v22 + 24;
          goto LABEL_50;
        }
      }
      uint64_t v26 = v22;
      long long v27 = v22 + 24;
LABEL_50:
      long long v39 = &v21[v20];
      uint64_t v40 = __p[0];
      uint64_t v25 = (uint64_t)v27;
      __p[0] = v26;
      __p[1] = v27;
      v507 = v39;
      if (v40) {
        operator delete(v40);
      }
      uint64_t v16 = v3 + 1122;
LABEL_53:
      *(void *)(v25 - 24) = 0;
      uint64_t v41 = v25 - 24;
      *(void *)(v41 + 8) = 0;
      *(void *)(v41 + 16) = 0;
      *(int32x2_t *)(v41 + 8) = *v503;
      *(_WORD *)(v41 + 16) = v503[3].i16[2];
      *(unsigned char *)(v3 + 1153) = 1;
      *(_DWORD *)uint64_t v41 = 1;
      unsigned int v42 = *(unsigned __int16 *)(v3 + 1090);
      unsigned int v44 = *(_DWORD *)(v3 + 44);
      unsigned int v43 = *(_DWORD *)(v3 + 48);
      if (v44 < 0x40000001)
      {
        int v45 = *(_DWORD *)(v3 + 56);
        while (1)
        {
          v43 *= 2;
          *(_DWORD *)(v3 + 56) = --v45;
          if (v45) {
            goto LABEL_57;
          }
          uint64_t v48 = *(void *)(v3 + 32);
          *(void *)(v3 + 32) = v48 + 1;
          unint64_t v49 = *(unsigned int *)(v3 + 16);
          if (v48 + 1 >= v49)
          {
            int v50 = 65280;
            unint64_t v51 = v48 + 2;
            *(void *)(v3 + 32) = v51;
            if (v51 >= v49)
            {
LABEL_63:
              int v46 = 255;
              goto LABEL_56;
            }
          }
          else
          {
            int v50 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v48 + 1) << 8;
            unint64_t v51 = v48 + 2;
            *(void *)(v3 + 32) = v51;
            if (v51 >= v49) {
              goto LABEL_63;
            }
          }
          int v46 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v51);
LABEL_56:
          v43 |= v50 | v46;
          int v45 = 16;
          *(_DWORD *)(v3 + 56) = 16;
LABEL_57:
          unsigned int v47 = 2 * v44;
          BOOL v54 = v44 >= 0x20000001;
          v44 *= 2;
          if (v54) {
            goto LABEL_65;
          }
        }
      }
      unsigned int v47 = *(_DWORD *)(v3 + 44);
LABEL_65:
      unsigned int v52 = (HIWORD(v47) * v42) & 0xFFFF0000;
      unsigned int v53 = v47 - v52;
      BOOL v54 = v43 >= v52;
      *(_WORD *)(v3 + 1090) = *(_WORD *)(v3 + 2 * ((v42 >> 7) & 0x1FE | (v43 >= v52)) + 64) + v42;
      if (v43 < v52) {
        unsigned int v55 = v52;
      }
      else {
        unsigned int v55 = v53;
      }
      if (v43 < v52) {
        unsigned int v52 = 0;
      }
      *(_DWORD *)(v3 + 44) = v55;
      int v56 = *(_DWORD *)v41;
      if (v54) {
        ++v56;
      }
      unsigned int v57 = v43 - v52;
      *(_DWORD *)(v3 + 48) = v57;
      *(_DWORD *)uint64_t v41 = v56;
      if (v56 > 1)
      {
        int v58 = 0;
        unsigned int v59 = *(_DWORD *)(v3 + 44);
        int v60 = 1;
        if (v59 >= 0x40000001)
        {
          while (1)
          {
            unsigned int v61 = v59;
LABEL_75:
            unsigned int v62 = (v61 >> 1) & 0x7FFF0000;
            unsigned int v59 = v61 - v62;
            int v63 = v57 >= v62 ? (v61 >> 1) & 0x7FFF0000 : 0;
            BOOL v64 = v57 >= v62;
            v57 -= v63;
            unsigned int v65 = v64 ? v59 : v62;
            *(_DWORD *)(v3 + 44) = v65;
            *(_DWORD *)(v3 + 48) = v57;
            if (!v64) {
              break;
            }
            v58 += 1 << v60++;
            if (v59 < 0x40000001) {
              goto LABEL_84;
            }
          }
          while (v62 >= 0x40000001)
          {
            unsigned int v72 = v62;
LABEL_95:
            unsigned int v73 = (v72 >> 1) & 0x7FFF0000;
            unsigned int v62 = v72 - v73;
            int v74 = v57 >= v73;
            if (v57 < v73)
            {
              unsigned int v62 = v73;
              unsigned int v73 = 0;
            }
            v57 -= v73;
            *(_DWORD *)(v3 + 44) = v62;
            *(_DWORD *)(v3 + 48) = v57;
            v58 += v74 << --v60;
            if (!v60)
            {
              int v56 = *(_DWORD *)v41 + v58;
              *(_DWORD *)uint64_t v41 = v56;
              goto LABEL_110;
            }
          }
          int v75 = *(_DWORD *)(v3 + 56);
          while (2)
          {
            v57 *= 2;
            *(_DWORD *)(v3 + 56) = --v75;
            if (v75) {
              goto LABEL_102;
            }
            uint64_t v77 = *(void *)(v3 + 32);
            *(void *)(v3 + 32) = v77 + 1;
            unint64_t v78 = *(unsigned int *)(v3 + 16);
            if (v77 + 1 >= v78)
            {
              int v79 = 65280;
              unint64_t v80 = v77 + 2;
              *(void *)(v3 + 32) = v80;
              if (v80 >= v78) {
                goto LABEL_108;
              }
            }
            else
            {
              int v79 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v77 + 1) << 8;
              unint64_t v80 = v77 + 2;
              *(void *)(v3 + 32) = v80;
              if (v80 >= v78)
              {
LABEL_108:
                int v76 = 255;
LABEL_101:
                v57 |= v79 | v76;
                int v75 = 16;
                *(_DWORD *)(v3 + 56) = 16;
LABEL_102:
                unsigned int v72 = 2 * v62;
                BOOL v54 = v62 >= 0x20000001;
                v62 *= 2;
                if (v54) {
                  goto LABEL_95;
                }
                continue;
              }
            }
            break;
          }
          int v76 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v80);
          goto LABEL_101;
        }
LABEL_84:
        int v66 = *(_DWORD *)(v3 + 56);
        while (2)
        {
          v57 *= 2;
          *(_DWORD *)(v3 + 56) = --v66;
          if (v66) {
            goto LABEL_87;
          }
          uint64_t v68 = *(void *)(v3 + 32);
          *(void *)(v3 + 32) = v68 + 1;
          unint64_t v69 = *(unsigned int *)(v3 + 16);
          if (v68 + 1 >= v69)
          {
            int v70 = 65280;
            unint64_t v71 = v68 + 2;
            *(void *)(v3 + 32) = v71;
            if (v71 >= v69) {
              goto LABEL_93;
            }
          }
          else
          {
            int v70 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v68 + 1) << 8;
            unint64_t v71 = v68 + 2;
            *(void *)(v3 + 32) = v71;
            if (v71 >= v69)
            {
LABEL_93:
              int v67 = 255;
LABEL_86:
              v57 |= v70 | v67;
              int v66 = 16;
              *(_DWORD *)(v3 + 56) = 16;
LABEL_87:
              unsigned int v61 = 2 * v59;
              BOOL v54 = v59 >= 0x20000001;
              v59 *= 2;
              if (v54) {
                goto LABEL_75;
              }
              continue;
            }
          }
          break;
        }
        int v67 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v71);
        goto LABEL_86;
      }
LABEL_110:
      if (v56 >= 1)
      {
        int v500 = 0;
        char v81 = 0;
        do
        {
          char v501 = v81;
          int v502 = v56;
          unint64_t v82 = (char *)__p[1] - (char *)__p[0];
          int64_t v499 = (char *)__p[1] - (char *)__p[0];
          if ((unint64_t)(v507 - (char *)__p[1]) >= 0x10)
          {
            *(_OWORD *)__p[1] = 0uLL;
            uint64_t v90 = (uint64_t)__p[1] + 16;
            __p[1] = (char *)__p[1] + 16;
            goto LABEL_145;
          }
          unint64_t v83 = v82 + 16;
          if ((uint64_t)(v82 + 16) < 0) {
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v84 = v507 - (char *)__p[0];
          if (2 * (v507 - (char *)__p[0]) > v83) {
            unint64_t v83 = 2 * v84;
          }
          if (v84 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v85 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v85 = v83;
          }
          if (v85)
          {
            uint64_t v86 = (char *)operator new(v85);
            unint64_t v87 = &v86[v82];
            *(void *)unint64_t v87 = 0;
            *((void *)v87 + 1) = 0;
            if (__p[1] != __p[0]) {
              goto LABEL_122;
            }
          }
          else
          {
            uint64_t v86 = 0;
            unint64_t v87 = (char *)((char *)__p[1] - (char *)__p[0]);
            *(void *)unint64_t v82 = 0;
            *(void *)(v82 + 8) = 0;
            if (__p[1] != __p[0])
            {
LABEL_122:
              if (v82 < 8)
              {
                unint64_t v88 = (unint64_t)__p[1];
                uint64_t v89 = v87;
                goto LABEL_139;
              }
              unint64_t v88 = (unint64_t)__p[1];
              uint64_t v89 = v87;
              if ((void *)((char *)__p[0] - (char *)v86) < (void *)0x20) {
                goto LABEL_139;
              }
              if (v82 >= 0x20)
              {
                unint64_t v93 = v82 & 0xFFFFFFFFFFFFFFE0;
                uint64_t v94 = &v86[v82 - 16];
                unint64_t v95 = (long long *)((char *)__p[1] - 16);
                unint64_t v96 = v82 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v97 = *v95;
                  *((_OWORD *)v94 - 1) = *(v95 - 1);
                  *(_OWORD *)uint64_t v94 = v97;
                  v94 -= 32;
                  v95 -= 2;
                  v96 -= 32;
                }
                while (v96);
                if (v82 != v93)
                {
                  if ((v82 & 0x18) == 0)
                  {
                    uint64_t v89 = &v87[-v93];
                    unint64_t v88 = (unint64_t)__p[1] - v93;
                    goto LABEL_139;
                  }
                  goto LABEL_134;
                }
              }
              else
              {
                unint64_t v93 = 0;
LABEL_134:
                unint64_t v88 = (unint64_t)__p[1] - (v82 & 0xFFFFFFFFFFFFFFF8);
                uint64_t v89 = &v87[-(v82 & 0xFFFFFFFFFFFFFFF8)];
                __int32 v98 = &v86[(char *)__p[1] - v93 - (char *)__p[0] - 8];
                int32x4_t v99 = (uint64_t *)((char *)__p[1] - v93 - 8);
                unint64_t v100 = v93 - (v82 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v101 = *v99--;
                  *(void *)__int32 v98 = v101;
                  v98 -= 8;
                  v100 += 8;
                }
                while (v100);
                if (v82 != (v82 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_139:
                  size_t v102 = v89 - 1;
                  do
                  {
                    char v103 = *(unsigned char *)--v88;
                    *v102-- = v103;
                  }
                  while ((void *)v88 != __p[0]);
                }
              }
              char v91 = v86;
              unint64_t v92 = v87 + 16;
              goto LABEL_142;
            }
          }
          char v91 = v87;
          unint64_t v92 = v87 + 16;
LABEL_142:
          unint64_t v104 = &v86[v85];
          uint64_t v105 = __p[0];
          uint64_t v90 = (uint64_t)v92;
          __p[0] = v91;
          __p[1] = v92;
          v507 = v104;
          if (v105) {
            operator delete(v105);
          }
          uint64_t v16 = v3 + 1122;
LABEL_145:
          *(void *)(v90 - 16) = 0;
          *(void *)(v90 - 8) = 0;
          size_t v106 = (_DWORD *)(v90 - 16);
          v106[2] = v503[2].i32[0] + *(_DWORD *)(v3 + 1140) + v503[2].i32[1];
          v106[3] = v500;
          if (*(unsigned char *)(v3 + 1153)) {
            goto LABEL_254;
          }
          if (*(unsigned char *)(v3 + 1151))
          {
            int v107 = 0;
            unsigned int v109 = *(_DWORD *)(v3 + 44);
            unsigned int v108 = *(_DWORD *)(v3 + 48);
            int v110 = 1;
            if (v109 >= 0x40000001)
            {
              while (1)
              {
                unsigned int v111 = v109;
LABEL_149:
                unsigned int v112 = (v111 >> 1) & 0x7FFF0000;
                unsigned int v109 = v111 - v112;
                int v113 = v108 >= v112 ? (v111 >> 1) & 0x7FFF0000 : 0;
                BOOL v114 = v108 >= v112;
                v108 -= v113;
                unsigned int v115 = v114 ? v109 : v112;
                *(_DWORD *)(v3 + 44) = v115;
                *(_DWORD *)(v3 + 48) = v108;
                if (!v114) {
                  break;
                }
                v107 += 1 << v110++;
                if (v109 < 0x40000001) {
                  goto LABEL_158;
                }
              }
              do
              {
                if (v112 < 0x40000001)
                {
                  int v125 = *(_DWORD *)(v3 + 56);
                  while (1)
                  {
                    v108 *= 2;
                    *(_DWORD *)(v3 + 56) = --v125;
                    if (v125) {
                      goto LABEL_176;
                    }
                    uint64_t v127 = *(void *)(v3 + 32);
                    *(void *)(v3 + 32) = v127 + 1;
                    unint64_t v128 = *(unsigned int *)(v3 + 16);
                    if (v127 + 1 >= v128)
                    {
                      int v129 = 65280;
                      unint64_t v130 = v127 + 2;
                      *(void *)(v3 + 32) = v130;
                      if (v130 >= v128)
                      {
LABEL_182:
                        int v126 = 255;
                        goto LABEL_175;
                      }
                    }
                    else
                    {
                      int v129 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v127 + 1) << 8;
                      unint64_t v130 = v127 + 2;
                      *(void *)(v3 + 32) = v130;
                      if (v130 >= v128) {
                        goto LABEL_182;
                      }
                    }
                    int v126 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v130);
LABEL_175:
                    v108 |= v129 | v126;
                    int v125 = 16;
                    *(_DWORD *)(v3 + 56) = 16;
LABEL_176:
                    unsigned int v122 = 2 * v112;
                    BOOL v54 = v112 >= 0x20000001;
                    v112 *= 2;
                    if (v54) {
                      goto LABEL_169;
                    }
                  }
                }
                unsigned int v122 = v112;
LABEL_169:
                unsigned int v123 = (v122 >> 1) & 0x7FFF0000;
                unsigned int v112 = v122 - v123;
                int v124 = v108 >= v123;
                if (v108 < v123)
                {
                  unsigned int v112 = v123;
                  unsigned int v123 = 0;
                }
                v108 -= v123;
                *(_DWORD *)(v3 + 44) = v112;
                *(_DWORD *)(v3 + 48) = v108;
                v107 += v124 << --v110;
              }
              while (v110);
              if (v107)
              {
                if (v112 < 0x40000001)
                {
                  int v131 = *(_DWORD *)(v3 + 56);
                  while (1)
                  {
                    v108 *= 2;
                    *(_DWORD *)(v3 + 56) = --v131;
                    if (v131) {
                      goto LABEL_188;
                    }
                    uint64_t v134 = *(void *)(v3 + 32);
                    *(void *)(v3 + 32) = v134 + 1;
                    unint64_t v135 = *(unsigned int *)(v3 + 16);
                    if (v134 + 1 >= v135)
                    {
                      int v136 = 65280;
                      unint64_t v137 = v134 + 2;
                      *(void *)(v3 + 32) = v137;
                      if (v137 >= v135)
                      {
LABEL_194:
                        int v132 = 255;
                        goto LABEL_187;
                      }
                    }
                    else
                    {
                      int v136 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v134 + 1) << 8;
                      unint64_t v137 = v134 + 2;
                      *(void *)(v3 + 32) = v137;
                      if (v137 >= v135) {
                        goto LABEL_194;
                      }
                    }
                    int v132 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v137);
LABEL_187:
                    v108 |= v136 | v132;
                    int v131 = 16;
                    *(_DWORD *)(v3 + 56) = 16;
LABEL_188:
                    unsigned int v133 = 2 * v112;
                    BOOL v54 = v112 >= 0x20000001;
                    v112 *= 2;
                    if (v54) {
                      goto LABEL_196;
                    }
                  }
                }
                unsigned int v133 = v112;
LABEL_196:
                unsigned int v138 = (v133 >> 1) & 0x7FFF0000;
                int v139 = v133 - v138;
                if (v108 < v138)
                {
                  int v139 = (v133 >> 1) & 0x7FFF0000;
                  unsigned int v138 = 0;
                  int v107 = -v107;
                }
                *(_DWORD *)(v3 + 44) = v139;
                *(_DWORD *)(v3 + 48) = v108 - v138;
              }
              *(_DWORD *)(v90 - 8) += v107;
              goto LABEL_200;
            }
LABEL_158:
            int v116 = *(_DWORD *)(v3 + 56);
            while (2)
            {
              v108 *= 2;
              *(_DWORD *)(v3 + 56) = --v116;
              if (v116) {
                goto LABEL_161;
              }
              uint64_t v118 = *(void *)(v3 + 32);
              *(void *)(v3 + 32) = v118 + 1;
              unint64_t v119 = *(unsigned int *)(v3 + 16);
              if (v118 + 1 >= v119)
              {
                int v120 = 65280;
                unint64_t v121 = v118 + 2;
                *(void *)(v3 + 32) = v121;
                if (v121 >= v119) {
                  goto LABEL_167;
                }
              }
              else
              {
                int v120 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v118 + 1) << 8;
                unint64_t v121 = v118 + 2;
                *(void *)(v3 + 32) = v121;
                if (v121 >= v119)
                {
LABEL_167:
                  int v117 = 255;
LABEL_160:
                  v108 |= v120 | v117;
                  int v116 = 16;
                  *(_DWORD *)(v3 + 56) = 16;
LABEL_161:
                  unsigned int v111 = 2 * v109;
                  BOOL v54 = v109 >= 0x20000001;
                  v109 *= 2;
                  if (v54) {
                    goto LABEL_149;
                  }
                  continue;
                }
              }
              break;
            }
            int v117 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v121);
            goto LABEL_160;
          }
LABEL_200:
          if (!*(unsigned char *)(v3 + 1152)) {
            goto LABEL_254;
          }
          int v140 = 0;
          unsigned int v142 = *(_DWORD *)(v3 + 44);
          unsigned int v141 = *(_DWORD *)(v3 + 48);
          int v143 = 1;
          if (v142 < 0x40000001)
          {
LABEL_212:
            int v149 = *(_DWORD *)(v3 + 56);
            while (2)
            {
              v141 *= 2;
              *(_DWORD *)(v3 + 56) = --v149;
              if (v149) {
                goto LABEL_215;
              }
              uint64_t v151 = *(void *)(v3 + 32);
              *(void *)(v3 + 32) = v151 + 1;
              unint64_t v152 = *(unsigned int *)(v3 + 16);
              if (v151 + 1 >= v152)
              {
                int v153 = 65280;
                unint64_t v154 = v151 + 2;
                *(void *)(v3 + 32) = v154;
                if (v154 >= v152) {
                  goto LABEL_221;
                }
              }
              else
              {
                int v153 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v151 + 1) << 8;
                unint64_t v154 = v151 + 2;
                *(void *)(v3 + 32) = v154;
                if (v154 >= v152)
                {
LABEL_221:
                  int v150 = 255;
LABEL_214:
                  v141 |= v153 | v150;
                  int v149 = 16;
                  *(_DWORD *)(v3 + 56) = 16;
LABEL_215:
                  unsigned int v144 = 2 * v142;
                  BOOL v54 = v142 >= 0x20000001;
                  v142 *= 2;
                  if (v54) {
                    goto LABEL_203;
                  }
                  continue;
                }
              }
              break;
            }
            int v150 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v154);
            goto LABEL_214;
          }
          while (1)
          {
            unsigned int v144 = v142;
LABEL_203:
            unsigned int v145 = (v144 >> 1) & 0x7FFF0000;
            unsigned int v142 = v144 - v145;
            int v146 = v141 >= v145 ? (v144 >> 1) & 0x7FFF0000 : 0;
            BOOL v147 = v141 >= v145;
            v141 -= v146;
            unsigned int v148 = v147 ? v142 : v145;
            *(_DWORD *)(v3 + 44) = v148;
            *(_DWORD *)(v3 + 48) = v141;
            if (!v147) {
              break;
            }
            v140 += 1 << v143++;
            if (v142 < 0x40000001) {
              goto LABEL_212;
            }
          }
          do
          {
            if (v145 < 0x40000001)
            {
              int v158 = *(_DWORD *)(v3 + 56);
              while (1)
              {
                v141 *= 2;
                *(_DWORD *)(v3 + 56) = --v158;
                if (v158) {
                  goto LABEL_230;
                }
                uint64_t v160 = *(void *)(v3 + 32);
                *(void *)(v3 + 32) = v160 + 1;
                unint64_t v161 = *(unsigned int *)(v3 + 16);
                if (v160 + 1 >= v161)
                {
                  int v162 = 65280;
                  unint64_t v163 = v160 + 2;
                  *(void *)(v3 + 32) = v163;
                  if (v163 >= v161)
                  {
LABEL_236:
                    int v159 = 255;
                    goto LABEL_229;
                  }
                }
                else
                {
                  int v162 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v160 + 1) << 8;
                  unint64_t v163 = v160 + 2;
                  *(void *)(v3 + 32) = v163;
                  if (v163 >= v161) {
                    goto LABEL_236;
                  }
                }
                int v159 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v163);
LABEL_229:
                v141 |= v162 | v159;
                int v158 = 16;
                *(_DWORD *)(v3 + 56) = 16;
LABEL_230:
                unsigned int v155 = 2 * v145;
                BOOL v54 = v145 >= 0x20000001;
                v145 *= 2;
                if (v54) {
                  goto LABEL_223;
                }
              }
            }
            unsigned int v155 = v145;
LABEL_223:
            unsigned int v156 = (v155 >> 1) & 0x7FFF0000;
            unsigned int v145 = v155 - v156;
            int v157 = v141 >= v156;
            if (v141 < v156)
            {
              unsigned int v145 = v156;
              unsigned int v156 = 0;
            }
            v141 -= v156;
            *(_DWORD *)(v3 + 44) = v145;
            *(_DWORD *)(v3 + 48) = v141;
            v140 += v157 << --v143;
          }
          while (v143);
          if (v140)
          {
            if (v145 < 0x40000001)
            {
              int v164 = *(_DWORD *)(v3 + 56);
              while (1)
              {
                v141 *= 2;
                *(_DWORD *)(v3 + 56) = --v164;
                if (v164) {
                  goto LABEL_242;
                }
                uint64_t v167 = *(void *)(v3 + 32);
                *(void *)(v3 + 32) = v167 + 1;
                unint64_t v168 = *(unsigned int *)(v3 + 16);
                if (v167 + 1 >= v168)
                {
                  int v169 = 65280;
                  unint64_t v170 = v167 + 2;
                  *(void *)(v3 + 32) = v170;
                  if (v170 >= v168)
                  {
LABEL_248:
                    int v165 = 255;
                    goto LABEL_241;
                  }
                }
                else
                {
                  int v169 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v167 + 1) << 8;
                  unint64_t v170 = v167 + 2;
                  *(void *)(v3 + 32) = v170;
                  if (v170 >= v168) {
                    goto LABEL_248;
                  }
                }
                int v165 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v170);
LABEL_241:
                v141 |= v169 | v165;
                int v164 = 16;
                *(_DWORD *)(v3 + 56) = 16;
LABEL_242:
                unsigned int v166 = 2 * v145;
                BOOL v54 = v145 >= 0x20000001;
                v145 *= 2;
                if (v54) {
                  goto LABEL_250;
                }
              }
            }
            unsigned int v166 = v145;
LABEL_250:
            unsigned int v171 = (v166 >> 1) & 0x7FFF0000;
            int v172 = v166 - v171;
            if (v141 < v171)
            {
              int v172 = (v166 >> 1) & 0x7FFF0000;
              unsigned int v171 = 0;
              int v140 = -v140;
            }
            *(_DWORD *)(v3 + 44) = v172;
            *(_DWORD *)(v3 + 48) = v141 - v171;
          }
          *(_DWORD *)(v90 - 4) += v140;
LABEL_254:
          if (*(unsigned char *)(v3 + 1150))
          {
            unsigned int v174 = *(_DWORD *)(v3 + 44);
            unsigned int v173 = *(_DWORD *)(v3 + 48);
            if (v174 < 0x40000001)
            {
              int v175 = *(_DWORD *)(v3 + 56);
              while (1)
              {
                v173 *= 2;
                *(_DWORD *)(v3 + 56) = --v175;
                if (v175) {
                  goto LABEL_259;
                }
                uint64_t v178 = *(void *)(v3 + 32);
                *(void *)(v3 + 32) = v178 + 1;
                unint64_t v179 = *(unsigned int *)(v3 + 16);
                if (v178 + 1 >= v179)
                {
                  int v180 = 65280;
                  unint64_t v181 = v178 + 2;
                  *(void *)(v3 + 32) = v181;
                  if (v181 >= v179)
                  {
LABEL_265:
                    int v176 = 255;
                    goto LABEL_258;
                  }
                }
                else
                {
                  int v180 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v178 + 1) << 8;
                  unint64_t v181 = v178 + 2;
                  *(void *)(v3 + 32) = v181;
                  if (v181 >= v179) {
                    goto LABEL_265;
                  }
                }
                int v176 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v181);
LABEL_258:
                v173 |= v180 | v176;
                int v175 = 16;
                *(_DWORD *)(v3 + 56) = 16;
LABEL_259:
                unsigned int v177 = 2 * v174;
                BOOL v54 = v174 >= 0x20000001;
                v174 *= 2;
                if (v54) {
                  goto LABEL_746;
                }
              }
            }
            unsigned int v177 = *(_DWORD *)(v3 + 44);
LABEL_746:
            unsigned int v486 = *(unsigned __int16 *)(v3 + 1088);
            unsigned int v487 = (HIWORD(v177) * v486) & 0xFFFF0000;
            unsigned int v183 = v177 - v487;
            BOOL v488 = v173 >= v487;
            *(_WORD *)(v3 + 1088) = *(_WORD *)(v3 + 2 * ((v486 >> 7) & 0x1FE | v488) + 64) + v486;
            if (v173 >= v487)
            {
              unsigned int v489 = v487;
            }
            else
            {
              unsigned int v183 = v487;
              unsigned int v489 = 0;
            }
            unsigned int v182 = v173 - v489;
            *(_DWORD *)(v3 + 44) = v183;
            *(_DWORD *)(v3 + 48) = v182;
            *(unsigned char *)(v90 - 12) = v488;
            unsigned int v184 = *(unsigned __int16 *)(v3 + 1092);
            if (v183 < 0x40000001)
            {
LABEL_750:
              int v490 = *(_DWORD *)(v3 + 56);
              while (2)
              {
                v182 *= 2;
                *(_DWORD *)(v3 + 56) = --v490;
                if (v490) {
                  goto LABEL_753;
                }
                uint64_t v492 = *(void *)(v3 + 32);
                *(void *)(v3 + 32) = v492 + 1;
                unint64_t v493 = *(unsigned int *)(v3 + 16);
                if (v492 + 1 >= v493)
                {
                  int v494 = 65280;
                  unint64_t v495 = v492 + 2;
                  *(void *)(v3 + 32) = v495;
                  if (v495 >= v493) {
                    goto LABEL_759;
                  }
                }
                else
                {
                  int v494 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v492 + 1) << 8;
                  unint64_t v495 = v492 + 2;
                  *(void *)(v3 + 32) = v495;
                  if (v495 >= v493)
                  {
LABEL_759:
                    int v491 = 255;
LABEL_752:
                    v182 |= v494 | v491;
                    int v490 = 16;
                    *(_DWORD *)(v3 + 56) = 16;
LABEL_753:
                    unsigned int v185 = 2 * v183;
                    BOOL v54 = v183 >= 0x20000001;
                    v183 *= 2;
                    if (v54) {
                      goto LABEL_268;
                    }
                    continue;
                  }
                }
                break;
              }
              int v491 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v495);
              goto LABEL_752;
            }
          }
          else
          {
            unsigned int v183 = *(_DWORD *)(v3 + 44);
            unsigned int v182 = *(_DWORD *)(v3 + 48);
            unsigned int v184 = *(unsigned __int16 *)(v3 + 1092);
            if (v183 < 0x40000001) {
              goto LABEL_750;
            }
          }
          unsigned int v185 = v183;
LABEL_268:
          int v186 = 0;
          unsigned int v187 = (HIWORD(v185) * v184) & 0xFFFF0000;
          if (v182 < v187) {
            unsigned int v188 = 0;
          }
          else {
            unsigned int v188 = (HIWORD(v185) * v184) & 0xFFFF0000;
          }
          unsigned int v189 = v182 - v188;
          BOOL v190 = v182 >= v187;
          BOOL v191 = v182 >= v187;
          *(_WORD *)(v3 + 1092) = *(_WORD *)(v3 + 2 * ((v184 >> 7) & 0x1FE | v191) + 64) + v184;
          if (v182 < v187) {
            unsigned int v192 = (HIWORD(v185) * v184) & 0xFFFF0000;
          }
          else {
            unsigned int v192 = v185 - v187;
          }
          *(_DWORD *)(v3 + 44) = v192;
          *(_DWORD *)(v3 + 48) = v189;
          *size_t v106 = v191;
          if (!v190)
          {
LABEL_313:
            int v505 = 0;
            int v216 = v186 + 1;
            while (1)
            {
              int v504 = v216;
              if ((unint64_t)(v507 - (char *)__p[1]) >= 4)
              {
                *(_DWORD *)__p[1] = 0;
                uint64_t v225 = (uint64_t)__p[1] + 4;
                __p[1] = (char *)__p[1] + 4;
                goto LABEL_347;
              }
              unint64_t v217 = (char *)__p[1] - (char *)__p[0];
              uint64_t v218 = (char *)__p[1] - (char *)__p[0] + 4;
              if (v218 < 0) {
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v219 = v507 - (char *)__p[0];
              if (2 * (v507 - (char *)__p[0]) > (unint64_t)v218) {
                uint64_t v218 = 2 * v219;
              }
              if (v219 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v220 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v220 = v218;
              }
              if (v220)
              {
                char v221 = (char *)operator new(v220);
                uint64x2_t v222 = &v221[v217];
                *(_DWORD *)&v221[v217] = 0;
                uint64_t v223 = (uint64_t)&v221[v217 + 4];
                if (__p[1] == __p[0]) {
                  goto LABEL_344;
                }
              }
              else
              {
                char v221 = 0;
                uint64x2_t v222 = (char *)((char *)__p[1] - (char *)__p[0]);
                *(_DWORD *)unint64_t v217 = 0;
                uint64_t v223 = v217 + 4;
                if (__p[1] == __p[0]) {
                  goto LABEL_344;
                }
              }
              if (v217 >= 8)
              {
                unint64_t v224 = (unint64_t)__p[1];
                if ((void *)((char *)__p[0] - (char *)v221) >= (void *)0x20)
                {
                  if (v217 < 0x20)
                  {
                    uint64_t v226 = 0;
LABEL_336:
                    unint64_t v224 = (unint64_t)__p[1] - (v217 & 0xFFFFFFFFFFFFFFF8);
                    v222 -= v217 & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v231 = &v221[(char *)__p[1] - v226 - (char *)__p[0] - 8];
                    long long v232 = (uint64_t *)((char *)__p[1] - v226 - 8);
                    uint64_t v233 = v226 - (v217 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      uint64_t v234 = *v232--;
                      *(void *)unint64_t v231 = v234;
                      v231 -= 8;
                      v233 += 8;
                    }
                    while (v233);
                    if (v217 == (v217 & 0xFFFFFFFFFFFFFFF8)) {
                      goto LABEL_343;
                    }
                    goto LABEL_341;
                  }
                  uint64_t v226 = v217 & 0xFFFFFFFFFFFFFFE0;
                  unint64_t v227 = &v221[v217 - 16];
                  uint64_t v228 = (long long *)((char *)__p[1] - 16);
                  unint64_t v229 = v217 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    long long v230 = *v228;
                    *((_OWORD *)v227 - 1) = *(v228 - 1);
                    *(_OWORD *)unint64_t v227 = v230;
                    v227 -= 32;
                    v228 -= 2;
                    v229 -= 32;
                  }
                  while (v229);
                  if (v217 == v226) {
                    goto LABEL_343;
                  }
                  if ((v217 & 0x18) != 0) {
                    goto LABEL_336;
                  }
                  v222 -= v226;
                  unint64_t v224 = (unint64_t)__p[1] - v226;
                }
              }
              else
              {
                unint64_t v224 = (unint64_t)__p[1];
              }
LABEL_341:
              unint64_t v235 = v222 - 1;
              do
              {
                char v236 = *(unsigned char *)--v224;
                *v235-- = v236;
              }
              while ((void *)v224 != __p[0]);
LABEL_343:
              uint64x2_t v222 = v221;
LABEL_344:
              unint64_t v237 = __p[0];
              uint64_t v225 = v223;
              __p[0] = v222;
              __p[1] = (void *)v223;
              v507 = &v221[v220];
              if (v237) {
                operator delete(v237);
              }
              uint64_t v16 = v3 + 1122;
LABEL_347:
              *(_DWORD *)(v225 - 4) = 0;
              int v238 = *(_DWORD *)(v3 + 1140) + v503[2].i32[0];
              *(int32x2_t *)(v3 + 1156) = vadd_s32(*(int32x2_t *)(v3 + 1132), v503[1]);
              *(_DWORD *)(v3 + 1164) = v238;
              *(_DWORD *)(v225 - 4) = 3;
              unsigned int v239 = *(_DWORD *)(v3 + 44);
              unsigned int v240 = *(_DWORD *)(v3 + 48);
              unsigned int v241 = *(unsigned __int16 *)(v3 + 1096);
              if (v239 < 0x40000001)
              {
                int v242 = *(_DWORD *)(v3 + 56);
                while (1)
                {
                  v240 *= 2;
                  *(_DWORD *)(v3 + 56) = --v242;
                  if (v242) {
                    goto LABEL_351;
                  }
                  uint64_t v245 = *(void *)(v3 + 32);
                  *(void *)(v3 + 32) = v245 + 1;
                  unint64_t v246 = *(unsigned int *)(v3 + 16);
                  if (v245 + 1 >= v246)
                  {
                    int v247 = 65280;
                    unint64_t v248 = v245 + 2;
                    *(void *)(v3 + 32) = v248;
                    if (v248 >= v246)
                    {
LABEL_357:
                      int v243 = 255;
                      goto LABEL_350;
                    }
                  }
                  else
                  {
                    int v247 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v245 + 1) << 8;
                    unint64_t v248 = v245 + 2;
                    *(void *)(v3 + 32) = v248;
                    if (v248 >= v246) {
                      goto LABEL_357;
                    }
                  }
                  int v243 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v248);
LABEL_350:
                  v240 |= v247 | v243;
                  int v242 = 16;
                  *(_DWORD *)(v3 + 56) = 16;
LABEL_351:
                  unsigned int v244 = 2 * v239;
                  BOOL v54 = v239 >= 0x20000001;
                  v239 *= 2;
                  if (v54) {
                    goto LABEL_359;
                  }
                }
              }
              unsigned int v244 = *(_DWORD *)(v3 + 44);
LABEL_359:
              unsigned int v249 = (HIWORD(v244) * v241) & 0xFFFF0000;
              unsigned int v250 = v244 - v249;
              if (v240 < v249) {
                unsigned int v251 = 0;
              }
              else {
                unsigned int v251 = (HIWORD(v244) * v241) & 0xFFFF0000;
              }
              unsigned int v252 = v240 - v251;
              *(_WORD *)(v3 + 1096) = *(_WORD *)(v3 + 2 * ((v241 >> 7) & 0x1FE | (v240 >= v249)) + 64) + v241;
              if (v240 < v249) {
                unsigned int v253 = (HIWORD(v244) * v241) & 0xFFFF0000;
              }
              else {
                unsigned int v253 = v244 - v249;
              }
              *(_DWORD *)(v3 + 44) = v253;
              *(_DWORD *)(v3 + 48) = v252;
              if (v240 >= v249)
              {
                int v254 = 0;
                if (v250 < 0x40000001) {
                  goto LABEL_367;
                }
                goto LABEL_401;
              }
              if (v249 < 0x40000001)
              {
                int v262 = *(_DWORD *)(v3 + 56);
                while (2)
                {
                  v252 *= 2;
                  *(_DWORD *)(v3 + 56) = --v262;
                  if (v262) {
                    goto LABEL_381;
                  }
                  uint64_t v265 = *(void *)(v3 + 32);
                  *(void *)(v3 + 32) = v265 + 1;
                  unint64_t v266 = *(unsigned int *)(v3 + 16);
                  if (v265 + 1 >= v266)
                  {
                    int v267 = 65280;
                    unint64_t v268 = v265 + 2;
                    *(void *)(v3 + 32) = v268;
                    if (v268 >= v266) {
                      goto LABEL_387;
                    }
                  }
                  else
                  {
                    int v267 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v265 + 1) << 8;
                    unint64_t v268 = v265 + 2;
                    *(void *)(v3 + 32) = v268;
                    if (v268 >= v266)
                    {
LABEL_387:
                      int v263 = 255;
LABEL_380:
                      v252 |= v267 | v263;
                      int v262 = 16;
                      *(_DWORD *)(v3 + 56) = 16;
LABEL_381:
                      unsigned int v264 = 2 * v249;
                      BOOL v54 = v249 >= 0x20000001;
                      v249 *= 2;
                      if (v54) {
                        goto LABEL_389;
                      }
                      continue;
                    }
                  }
                  break;
                }
                int v263 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v268);
                goto LABEL_380;
              }
              unsigned int v264 = v249;
LABEL_389:
              unsigned int v269 = *(unsigned __int16 *)(v3 + 1098);
              unsigned int v270 = (HIWORD(v264) * v269) & 0xFFFF0000;
              unsigned int v250 = v264 - v270;
              if (v252 < v270) {
                unsigned int v271 = 0;
              }
              else {
                unsigned int v271 = (HIWORD(v264) * v269) & 0xFFFF0000;
              }
              BOOL v272 = v252 >= v270;
              v252 -= v271;
              int v273 = v272;
              *(_WORD *)(v3 + 1098) = *(_WORD *)(v3 + 2 * ((v269 >> 7) & 0x1FE | v273) + 64) + v269;
              if (v272) {
                unsigned int v274 = v250;
              }
              else {
                unsigned int v274 = v270;
              }
              *(_DWORD *)(v3 + 44) = v274;
              *(_DWORD *)(v3 + 48) = v252;
              if (v272)
              {
                int v254 = 2;
                if (v250 < 0x40000001) {
                  goto LABEL_367;
                }
                goto LABEL_401;
              }
              if (v270 < 0x40000001)
              {
                int v425 = *(_DWORD *)(v3 + 56);
                while (2)
                {
                  v252 *= 2;
                  *(_DWORD *)(v3 + 56) = --v425;
                  if (v425) {
                    goto LABEL_636;
                  }
                  uint64_t v428 = *(void *)(v3 + 32);
                  *(void *)(v3 + 32) = v428 + 1;
                  unint64_t v429 = *(unsigned int *)(v3 + 16);
                  if (v428 + 1 >= v429)
                  {
                    int v430 = 65280;
                    unint64_t v431 = v428 + 2;
                    *(void *)(v3 + 32) = v431;
                    if (v431 >= v429) {
                      goto LABEL_642;
                    }
                  }
                  else
                  {
                    int v430 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v428 + 1) << 8;
                    unint64_t v431 = v428 + 2;
                    *(void *)(v3 + 32) = v431;
                    if (v431 >= v429)
                    {
LABEL_642:
                      int v426 = 255;
LABEL_635:
                      v252 |= v430 | v426;
                      int v425 = 16;
                      *(_DWORD *)(v3 + 56) = 16;
LABEL_636:
                      unsigned int v427 = 2 * v270;
                      BOOL v54 = v270 >= 0x20000001;
                      v270 *= 2;
                      if (v54) {
                        goto LABEL_644;
                      }
                      continue;
                    }
                  }
                  break;
                }
                int v426 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v431);
                goto LABEL_635;
              }
              unsigned int v427 = v270;
LABEL_644:
              unsigned int v432 = *(unsigned __int16 *)(v3 + 1100);
              unsigned int v433 = (HIWORD(v427) * v432) & 0xFFFF0000;
              unsigned int v250 = v427 - v433;
              if (v252 < v433) {
                unsigned int v434 = 0;
              }
              else {
                unsigned int v434 = (HIWORD(v427) * v432) & 0xFFFF0000;
              }
              BOOL v435 = v252 >= v433;
              v252 -= v434;
              int v436 = v435;
              *(_WORD *)(v3 + 1100) = *(_WORD *)(v3 + 2 * ((v432 >> 7) & 0x1FE | v436) + 64) + v432;
              if (v435) {
                unsigned int v437 = v250;
              }
              else {
                unsigned int v437 = v433;
              }
              *(_DWORD *)(v3 + 44) = v437;
              *(_DWORD *)(v3 + 48) = v252;
              if (v435)
              {
                int v254 = 4;
                if (v250 < 0x40000001) {
                  goto LABEL_367;
                }
                goto LABEL_401;
              }
              if (v433 < 0x40000001)
              {
                int v438 = *(_DWORD *)(v3 + 56);
                while (2)
                {
                  v252 *= 2;
                  *(_DWORD *)(v3 + 56) = --v438;
                  if (v438) {
                    goto LABEL_661;
                  }
                  uint64_t v441 = *(void *)(v3 + 32);
                  *(void *)(v3 + 32) = v441 + 1;
                  unint64_t v442 = *(unsigned int *)(v3 + 16);
                  if (v441 + 1 >= v442)
                  {
                    int v443 = 65280;
                    unint64_t v444 = v441 + 2;
                    *(void *)(v3 + 32) = v444;
                    if (v444 >= v442) {
                      goto LABEL_667;
                    }
                  }
                  else
                  {
                    int v443 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v441 + 1) << 8;
                    unint64_t v444 = v441 + 2;
                    *(void *)(v3 + 32) = v444;
                    if (v444 >= v442)
                    {
LABEL_667:
                      int v439 = 255;
LABEL_660:
                      v252 |= v443 | v439;
                      int v438 = 16;
                      *(_DWORD *)(v3 + 56) = 16;
LABEL_661:
                      unsigned int v440 = 2 * v433;
                      BOOL v54 = v433 >= 0x20000001;
                      v433 *= 2;
                      if (v54) {
                        goto LABEL_669;
                      }
                      continue;
                    }
                  }
                  break;
                }
                int v439 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v444);
                goto LABEL_660;
              }
              unsigned int v440 = v433;
LABEL_669:
              unsigned int v445 = *(unsigned __int16 *)(v3 + 1102);
              unsigned int v446 = (HIWORD(v440) * v445) & 0xFFFF0000;
              unsigned int v250 = v440 - v446;
              if (v252 < v446) {
                unsigned int v447 = 0;
              }
              else {
                unsigned int v447 = (HIWORD(v440) * v445) & 0xFFFF0000;
              }
              BOOL v448 = v252 >= v446;
              v252 -= v447;
              int v449 = v448;
              *(_WORD *)(v3 + 1102) = *(_WORD *)(v3 + 2 * ((v445 >> 7) & 0x1FE | v449) + 64) + v445;
              if (v448) {
                unsigned int v450 = v250;
              }
              else {
                unsigned int v450 = v446;
              }
              *(_DWORD *)(v3 + 44) = v450;
              *(_DWORD *)(v3 + 48) = v252;
              if (v448)
              {
                int v254 = 6;
                if (v250 < 0x40000001) {
                  goto LABEL_367;
                }
                goto LABEL_401;
              }
              if (v446 < 0x40000001)
              {
                int v451 = *(_DWORD *)(v3 + 56);
                while (2)
                {
                  v252 *= 2;
                  *(_DWORD *)(v3 + 56) = --v451;
                  if (v451) {
                    goto LABEL_686;
                  }
                  uint64_t v454 = *(void *)(v3 + 32);
                  *(void *)(v3 + 32) = v454 + 1;
                  unint64_t v455 = *(unsigned int *)(v3 + 16);
                  if (v454 + 1 >= v455)
                  {
                    int v456 = 65280;
                    unint64_t v457 = v454 + 2;
                    *(void *)(v3 + 32) = v457;
                    if (v457 >= v455) {
                      goto LABEL_692;
                    }
                  }
                  else
                  {
                    int v456 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v454 + 1) << 8;
                    unint64_t v457 = v454 + 2;
                    *(void *)(v3 + 32) = v457;
                    if (v457 >= v455)
                    {
LABEL_692:
                      int v452 = 255;
LABEL_685:
                      v252 |= v456 | v452;
                      int v451 = 16;
                      *(_DWORD *)(v3 + 56) = 16;
LABEL_686:
                      unsigned int v453 = 2 * v446;
                      BOOL v54 = v446 >= 0x20000001;
                      v446 *= 2;
                      if (v54) {
                        goto LABEL_694;
                      }
                      continue;
                    }
                  }
                  break;
                }
                int v452 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v457);
                goto LABEL_685;
              }
              unsigned int v453 = v446;
LABEL_694:
              unsigned int v458 = *(unsigned __int16 *)(v3 + 1104);
              unsigned int v459 = (HIWORD(v453) * v458) & 0xFFFF0000;
              unsigned int v250 = v453 - v459;
              if (v252 < v459) {
                unsigned int v460 = 0;
              }
              else {
                unsigned int v460 = (HIWORD(v453) * v458) & 0xFFFF0000;
              }
              BOOL v461 = v252 >= v459;
              v252 -= v460;
              int v462 = v461;
              *(_WORD *)(v3 + 1104) = *(_WORD *)(v3 + 2 * ((v458 >> 7) & 0x1FE | v462) + 64) + v458;
              if (v461) {
                unsigned int v463 = v250;
              }
              else {
                unsigned int v463 = v459;
              }
              *(_DWORD *)(v3 + 44) = v463;
              *(_DWORD *)(v3 + 48) = v252;
              if (!v461)
              {
                int v464 = 0;
                int v465 = 2;
                if (v459 >= 0x40000001)
                {
                  while (1)
                  {
                    unsigned int v466 = v459;
LABEL_709:
                    unsigned int v467 = (v466 >> 1) & 0x7FFF0000;
                    unsigned int v459 = v466 - v467;
                    int v468 = v252 >= v467 ? (v466 >> 1) & 0x7FFF0000 : 0;
                    BOOL v469 = v252 >= v467;
                    v252 -= v468;
                    unsigned int v470 = v469 ? v459 : v467;
                    *(_DWORD *)(v3 + 44) = v470;
                    *(_DWORD *)(v3 + 48) = v252;
                    if (!v469) {
                      break;
                    }
                    v464 += 1 << v465++;
                    if (v459 < 0x40000001) {
                      goto LABEL_718;
                    }
                  }
                  while (2)
                  {
                    if (v467 < 0x40000001)
                    {
                      int v480 = *(_DWORD *)(v3 + 56);
                      while (2)
                      {
                        v252 *= 2;
                        *(_DWORD *)(v3 + 56) = --v480;
                        if (v480) {
                          goto LABEL_736;
                        }
                        uint64_t v482 = *(void *)(v3 + 32);
                        *(void *)(v3 + 32) = v482 + 1;
                        unint64_t v483 = *(unsigned int *)(v3 + 16);
                        if (v482 + 1 >= v483)
                        {
                          int v484 = 65280;
                          unint64_t v485 = v482 + 2;
                          *(void *)(v3 + 32) = v485;
                          if (v485 >= v483) {
                            goto LABEL_742;
                          }
                        }
                        else
                        {
                          int v484 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v482 + 1) << 8;
                          unint64_t v485 = v482 + 2;
                          *(void *)(v3 + 32) = v485;
                          if (v485 >= v483)
                          {
LABEL_742:
                            int v481 = 255;
LABEL_735:
                            v252 |= v484 | v481;
                            int v480 = 16;
                            *(_DWORD *)(v3 + 56) = 16;
LABEL_736:
                            unsigned int v477 = 2 * v467;
                            BOOL v54 = v467 >= 0x20000001;
                            v467 *= 2;
                            if (v54) {
                              goto LABEL_729;
                            }
                            continue;
                          }
                        }
                        break;
                      }
                      int v481 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v485);
                      goto LABEL_735;
                    }
                    unsigned int v477 = v467;
LABEL_729:
                    unsigned int v478 = (v477 >> 1) & 0x7FFF0000;
                    unsigned int v467 = v477 - v478;
                    int v479 = v252 >= v478;
                    if (v252 < v478)
                    {
                      unsigned int v467 = v478;
                      unsigned int v478 = 0;
                    }
                    v252 -= v478;
                    *(_DWORD *)(v3 + 44) = v467;
                    *(_DWORD *)(v3 + 48) = v252;
                    v464 += v479 << --v465;
                    if (v465) {
                      continue;
                    }
                    break;
                  }
                  int v280 = *(_DWORD *)(v225 - 4) + v464 + 8;
                  *(_DWORD *)(v225 - 4) = v280;
                  if (v280 < 1) {
                    goto LABEL_314;
                  }
LABEL_408:
                  int32x2_t v281 = (char *)__p[1];
                  int32x2_t v282 = v507;
                  while (2)
                  {
                    if ((unint64_t)(v282 - v281) >= 0xC)
                    {
                      *((_DWORD *)v281 + 2) = 0;
                      *(void *)int32x2_t v281 = 0;
                      __p[1] = v281 + 12;
                      v281 += 12;
                      int v295 = *(unsigned __int8 *)(v3 + 1153);
                      if (!*(unsigned char *)(v3 + 1153)) {
                        goto LABEL_447;
                      }
                      goto LABEL_409;
                    }
                    unint64_t v288 = v281 - (char *)__p[0];
                    uint64_t v289 = v281 - (char *)__p[0] + 12;
                    if (v289 < 0) {
                      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                    }
                    if (2 * (v282 - (char *)__p[0]) > (unint64_t)v289) {
                      uint64_t v289 = 2 * (v282 - (char *)__p[0]);
                    }
                    if ((unint64_t)(v282 - (char *)__p[0]) >= 0x3FFFFFFFFFFFFFFFLL) {
                      size_t v290 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      size_t v290 = v289;
                    }
                    if (v290)
                    {
                      unint64_t v291 = (char *)operator new(v290);
                      uint64_t v292 = &v291[v288];
                      *((_DWORD *)v292 + 2) = 0;
                      *(void *)uint64_t v292 = 0;
                      if (v281 != __p[0]) {
                        goto LABEL_422;
                      }
LABEL_427:
                      int v296 = v280;
                      uint32x4_t v297 = v292;
                      int8x16_t v298 = v292 + 12;
                      int64_t v299 = 0;
LABEL_444:
                      int32x2_t v282 = &v291[v290];
                      int8x16_t v311 = __p[0];
                      int32x2_t v281 = &v298[v299];
                      __p[0] = v297;
                      __p[1] = &v298[v299];
                      v507 = v282;
                      if (v311) {
                        operator delete(v311);
                      }
                      uint64_t v16 = v3 + 1122;
                      int v280 = v296;
                      int v295 = *(unsigned __int8 *)(v3 + 1153);
                      if (!*(unsigned char *)(v3 + 1153))
                      {
LABEL_447:
                        unsigned int v313 = *(_DWORD *)(v3 + 44);
                        unsigned int v312 = *(_DWORD *)(v3 + 48);
                        int v314 = 2;
                        int v315 = 7;
                        unsigned int v316 = *(unsigned __int16 *)(v3 + 1120);
                        if (v313 >= 0x40000001)
                        {
                          while (1)
                          {
                            unsigned int v317 = v313;
LABEL_449:
                            unsigned int v318 = (HIWORD(v317) * v316) & 0xFFFF0000;
                            unsigned int v313 = v317 - v318;
                            unsigned int v319 = v312 < v318 ? 0 : (HIWORD(v317) * v316) & 0xFFFF0000;
                            BOOL v320 = v312 >= v318;
                            v312 -= v319;
                            BOOL v321 = v320;
                            *(_WORD *)(v15 + 2 * v315) = *(_WORD *)(v3 + 2 * ((v316 >> 7) & 0x1FE | v321) + 64)
                                                         + v316;
                            unsigned int v322 = v320 ? v313 : v318;
                            *(_DWORD *)(v3 + 44) = v322;
                            *(_DWORD *)(v3 + 48) = v312;
                            if (!v320) {
                              break;
                            }
                            v295 += 1 << v314++;
                            if (v315) {
                              --v315;
                            }
                            else {
                              int v315 = 0;
                            }
                            unsigned int v316 = *(unsigned __int16 *)(v15 + 2 * v315);
                            if (v313 < 0x40000001) {
                              goto LABEL_464;
                            }
                          }
                          while (2)
                          {
                            if (v318 < 0x40000001)
                            {
                              int v332 = *(_DWORD *)(v3 + 56);
                              while (2)
                              {
                                v312 *= 2;
                                *(_DWORD *)(v3 + 56) = --v332;
                                if (v332) {
                                  goto LABEL_482;
                                }
                                uint64_t v334 = *(void *)(v3 + 32);
                                *(void *)(v3 + 32) = v334 + 1;
                                unint64_t v335 = *(unsigned int *)(v3 + 16);
                                if (v334 + 1 >= v335)
                                {
                                  int v336 = 65280;
                                  unint64_t v337 = v334 + 2;
                                  *(void *)(v3 + 32) = v337;
                                  if (v337 >= v335) {
                                    goto LABEL_488;
                                  }
                                }
                                else
                                {
                                  int v336 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v334 + 1) << 8;
                                  unint64_t v337 = v334 + 2;
                                  *(void *)(v3 + 32) = v337;
                                  if (v337 >= v335)
                                  {
LABEL_488:
                                    int v333 = 255;
LABEL_481:
                                    v312 |= v336 | v333;
                                    int v332 = 16;
                                    *(_DWORD *)(v3 + 56) = 16;
LABEL_482:
                                    unsigned int v329 = 2 * v318;
                                    BOOL v54 = v318 >= 0x20000001;
                                    v318 *= 2;
                                    if (v54) {
                                      goto LABEL_475;
                                    }
                                    continue;
                                  }
                                }
                                break;
                              }
                              int v333 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v337);
                              goto LABEL_481;
                            }
                            unsigned int v329 = v318;
LABEL_475:
                            unsigned int v330 = (v329 >> 1) & 0x7FFF0000;
                            unsigned int v318 = v329 - v330;
                            int v331 = v312 >= v330;
                            if (v312 < v330)
                            {
                              unsigned int v318 = v330;
                              unsigned int v330 = 0;
                            }
                            v312 -= v330;
                            *(_DWORD *)(v3 + 44) = v318;
                            *(_DWORD *)(v3 + 48) = v312;
                            v295 += v331 << --v314;
                            if (v314) {
                              continue;
                            }
                            break;
                          }
                          if (v295)
                          {
                            if (v318 < 0x40000001)
                            {
                              int v338 = *(_DWORD *)(v3 + 56);
                              while (2)
                              {
                                v312 *= 2;
                                *(_DWORD *)(v3 + 56) = --v338;
                                if (v338) {
                                  goto LABEL_494;
                                }
                                uint64_t v341 = *(void *)(v3 + 32);
                                *(void *)(v3 + 32) = v341 + 1;
                                unint64_t v342 = *(unsigned int *)(v3 + 16);
                                if (v341 + 1 >= v342)
                                {
                                  int v343 = 65280;
                                  unint64_t v344 = v341 + 2;
                                  *(void *)(v3 + 32) = v344;
                                  if (v344 >= v342) {
                                    goto LABEL_500;
                                  }
                                }
                                else
                                {
                                  int v343 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v341 + 1) << 8;
                                  unint64_t v344 = v341 + 2;
                                  *(void *)(v3 + 32) = v344;
                                  if (v344 >= v342)
                                  {
LABEL_500:
                                    int v339 = 255;
LABEL_493:
                                    v312 |= v343 | v339;
                                    int v338 = 16;
                                    *(_DWORD *)(v3 + 56) = 16;
LABEL_494:
                                    unsigned int v340 = 2 * v318;
                                    BOOL v54 = v318 >= 0x20000001;
                                    v318 *= 2;
                                    if (v54) {
                                      goto LABEL_503;
                                    }
                                    continue;
                                  }
                                }
                                break;
                              }
                              int v339 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v344);
                              goto LABEL_493;
                            }
                            unsigned int v340 = v318;
LABEL_503:
                            unsigned int v346 = (v340 >> 1) & 0x7FFF0000;
                            int v347 = v340 - v346;
                            if (v312 >= v346)
                            {
                              int v348 = (v340 >> 1) & 0x7FFF0000;
                            }
                            else
                            {
                              int v347 = (v340 >> 1) & 0x7FFF0000;
                              int v348 = 0;
                            }
                            if (v312 >= v346) {
                              int v345 = v295;
                            }
                            else {
                              int v345 = -v295;
                            }
                            *(_DWORD *)(v3 + 44) = v347;
                            *(_DWORD *)(v3 + 48) = v312 - v348;
                          }
                          else
                          {
                            int v345 = 0;
                          }
                          int v349 = 0;
                          *((_DWORD *)v281 - 3) = v345;
                          unsigned int v351 = *(_DWORD *)(v3 + 44);
                          unsigned int v350 = *(_DWORD *)(v3 + 48);
                          int v352 = 2;
                          int v353 = 7;
                          unsigned int v354 = *(unsigned __int16 *)(v3 + 1120);
                          if (v351 >= 0x40000001)
                          {
                            while (1)
                            {
                              unsigned int v355 = v351;
LABEL_512:
                              unsigned int v356 = (HIWORD(v355) * v354) & 0xFFFF0000;
                              unsigned int v351 = v355 - v356;
                              unsigned int v357 = v350 < v356 ? 0 : (HIWORD(v355) * v354) & 0xFFFF0000;
                              BOOL v358 = v350 >= v356;
                              v350 -= v357;
                              BOOL v359 = v358;
                              *(_WORD *)(v15 + 2 * v353) = *(_WORD *)(v3 + 2 * ((v354 >> 7) & 0x1FE | v359) + 64)
                                                           + v354;
                              unsigned int v360 = v358 ? v351 : v356;
                              *(_DWORD *)(v3 + 44) = v360;
                              *(_DWORD *)(v3 + 48) = v350;
                              if (!v358) {
                                break;
                              }
                              v349 += 1 << v352++;
                              if (v353) {
                                --v353;
                              }
                              else {
                                int v353 = 0;
                              }
                              unsigned int v354 = *(unsigned __int16 *)(v15 + 2 * v353);
                              if (v351 < 0x40000001) {
                                goto LABEL_527;
                              }
                            }
                            while (2)
                            {
                              if (v356 < 0x40000001)
                              {
                                int v370 = *(_DWORD *)(v3 + 56);
                                while (2)
                                {
                                  v350 *= 2;
                                  *(_DWORD *)(v3 + 56) = --v370;
                                  if (v370) {
                                    goto LABEL_545;
                                  }
                                  uint64_t v372 = *(void *)(v3 + 32);
                                  *(void *)(v3 + 32) = v372 + 1;
                                  unint64_t v373 = *(unsigned int *)(v3 + 16);
                                  if (v372 + 1 >= v373)
                                  {
                                    int v374 = 65280;
                                    unint64_t v375 = v372 + 2;
                                    *(void *)(v3 + 32) = v375;
                                    if (v375 >= v373) {
                                      goto LABEL_551;
                                    }
                                  }
                                  else
                                  {
                                    int v374 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v372 + 1) << 8;
                                    unint64_t v375 = v372 + 2;
                                    *(void *)(v3 + 32) = v375;
                                    if (v375 >= v373)
                                    {
LABEL_551:
                                      int v371 = 255;
LABEL_544:
                                      v350 |= v374 | v371;
                                      int v370 = 16;
                                      *(_DWORD *)(v3 + 56) = 16;
LABEL_545:
                                      unsigned int v367 = 2 * v356;
                                      BOOL v54 = v356 >= 0x20000001;
                                      v356 *= 2;
                                      if (v54) {
                                        goto LABEL_538;
                                      }
                                      continue;
                                    }
                                  }
                                  break;
                                }
                                int v371 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v375);
                                goto LABEL_544;
                              }
                              unsigned int v367 = v356;
LABEL_538:
                              unsigned int v368 = (v367 >> 1) & 0x7FFF0000;
                              unsigned int v356 = v367 - v368;
                              int v369 = v350 >= v368;
                              if (v350 < v368)
                              {
                                unsigned int v356 = v368;
                                unsigned int v368 = 0;
                              }
                              v350 -= v368;
                              *(_DWORD *)(v3 + 44) = v356;
                              *(_DWORD *)(v3 + 48) = v350;
                              v349 += v369 << --v352;
                              if (v352) {
                                continue;
                              }
                              break;
                            }
                            if (v349)
                            {
                              if (v356 < 0x40000001)
                              {
                                int v376 = *(_DWORD *)(v3 + 56);
                                while (2)
                                {
                                  v350 *= 2;
                                  *(_DWORD *)(v3 + 56) = --v376;
                                  if (v376) {
                                    goto LABEL_557;
                                  }
                                  uint64_t v379 = *(void *)(v3 + 32);
                                  *(void *)(v3 + 32) = v379 + 1;
                                  unint64_t v380 = *(unsigned int *)(v3 + 16);
                                  if (v379 + 1 >= v380)
                                  {
                                    int v381 = 65280;
                                    unint64_t v382 = v379 + 2;
                                    *(void *)(v3 + 32) = v382;
                                    if (v382 >= v380) {
                                      goto LABEL_563;
                                    }
                                  }
                                  else
                                  {
                                    int v381 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v379 + 1) << 8;
                                    unint64_t v382 = v379 + 2;
                                    *(void *)(v3 + 32) = v382;
                                    if (v382 >= v380)
                                    {
LABEL_563:
                                      int v377 = 255;
LABEL_556:
                                      v350 |= v381 | v377;
                                      int v376 = 16;
                                      *(_DWORD *)(v3 + 56) = 16;
LABEL_557:
                                      unsigned int v378 = 2 * v356;
                                      BOOL v54 = v356 >= 0x20000001;
                                      v356 *= 2;
                                      if (v54) {
                                        goto LABEL_566;
                                      }
                                      continue;
                                    }
                                  }
                                  break;
                                }
                                int v377 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v382);
                                goto LABEL_556;
                              }
                              unsigned int v378 = v356;
LABEL_566:
                              unsigned int v384 = (v378 >> 1) & 0x7FFF0000;
                              int v385 = v378 - v384;
                              if (v350 >= v384)
                              {
                                int v386 = (v378 >> 1) & 0x7FFF0000;
                              }
                              else
                              {
                                int v385 = (v378 >> 1) & 0x7FFF0000;
                                int v386 = 0;
                              }
                              if (v350 >= v384) {
                                int v383 = v349;
                              }
                              else {
                                int v383 = -v349;
                              }
                              *(_DWORD *)(v3 + 44) = v385;
                              *(_DWORD *)(v3 + 48) = v350 - v386;
                            }
                            else
                            {
                              int v383 = 0;
                            }
                            int v387 = 0;
                            *((_DWORD *)v281 - 2) = v383;
                            unsigned int v389 = *(_DWORD *)(v3 + 44);
                            unsigned int v388 = *(_DWORD *)(v3 + 48);
                            int v390 = 1;
                            int v391 = 4;
                            unsigned int v392 = *(unsigned __int16 *)(v16 + 8);
                            if (v389 >= 0x40000001)
                            {
                              while (1)
                              {
                                unsigned int v393 = v389;
LABEL_575:
                                unsigned int v394 = (HIWORD(v393) * v392) & 0xFFFF0000;
                                unsigned int v389 = v393 - v394;
                                unsigned int v395 = v388 < v394 ? 0 : (HIWORD(v393) * v392) & 0xFFFF0000;
                                BOOL v396 = v388 >= v394;
                                v388 -= v395;
                                BOOL v397 = v396;
                                *(_WORD *)(v16 + 2 * v391) = *(_WORD *)(v3 + 2 * ((v392 >> 7) & 0x1FE | v397) + 64)
                                                             + v392;
                                unsigned int v398 = v396 ? v389 : v394;
                                *(_DWORD *)(v3 + 44) = v398;
                                *(_DWORD *)(v3 + 48) = v388;
                                if (!v396) {
                                  break;
                                }
                                v387 += 1 << v390++;
                                if (v391) {
                                  --v391;
                                }
                                else {
                                  int v391 = 0;
                                }
                                unsigned int v392 = *(unsigned __int16 *)(v16 + 2 * v391);
                                if (v389 < 0x40000001) {
                                  goto LABEL_590;
                                }
                              }
                              while (2)
                              {
                                if (v394 < 0x40000001)
                                {
                                  int v408 = *(_DWORD *)(v3 + 56);
                                  while (2)
                                  {
                                    v388 *= 2;
                                    *(_DWORD *)(v3 + 56) = --v408;
                                    if (v408) {
                                      goto LABEL_608;
                                    }
                                    uint64_t v410 = *(void *)(v3 + 32);
                                    *(void *)(v3 + 32) = v410 + 1;
                                    unint64_t v411 = *(unsigned int *)(v3 + 16);
                                    if (v410 + 1 >= v411)
                                    {
                                      int v412 = 65280;
                                      unint64_t v413 = v410 + 2;
                                      *(void *)(v3 + 32) = v413;
                                      if (v413 >= v411) {
                                        goto LABEL_614;
                                      }
                                    }
                                    else
                                    {
                                      int v412 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v410 + 1) << 8;
                                      unint64_t v413 = v410 + 2;
                                      *(void *)(v3 + 32) = v413;
                                      if (v413 >= v411)
                                      {
LABEL_614:
                                        int v409 = 255;
LABEL_607:
                                        v388 |= v412 | v409;
                                        int v408 = 16;
                                        *(_DWORD *)(v3 + 56) = 16;
LABEL_608:
                                        unsigned int v405 = 2 * v394;
                                        BOOL v54 = v394 >= 0x20000001;
                                        v394 *= 2;
                                        if (v54) {
                                          goto LABEL_601;
                                        }
                                        continue;
                                      }
                                    }
                                    break;
                                  }
                                  int v409 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v413);
                                  goto LABEL_607;
                                }
                                unsigned int v405 = v394;
LABEL_601:
                                unsigned int v406 = (v405 >> 1) & 0x7FFF0000;
                                unsigned int v394 = v405 - v406;
                                int v407 = v388 >= v406;
                                if (v388 < v406)
                                {
                                  unsigned int v394 = v406;
                                  unsigned int v406 = 0;
                                }
                                v388 -= v406;
                                *(_DWORD *)(v3 + 44) = v394;
                                *(_DWORD *)(v3 + 48) = v388;
                                v387 += v407 << --v390;
                                if (v390) {
                                  continue;
                                }
                                break;
                              }
                              if (v387)
                              {
                                if (v394 < 0x40000001)
                                {
                                  int v414 = *(_DWORD *)(v3 + 56);
                                  while (2)
                                  {
                                    v388 *= 2;
                                    *(_DWORD *)(v3 + 56) = --v414;
                                    if (v414) {
                                      goto LABEL_620;
                                    }
                                    uint64_t v417 = *(void *)(v3 + 32);
                                    *(void *)(v3 + 32) = v417 + 1;
                                    unint64_t v418 = *(unsigned int *)(v3 + 16);
                                    if (v417 + 1 >= v418)
                                    {
                                      int v419 = 65280;
                                      unint64_t v420 = v417 + 2;
                                      *(void *)(v3 + 32) = v420;
                                      if (v420 >= v418) {
                                        goto LABEL_626;
                                      }
                                    }
                                    else
                                    {
                                      int v419 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v417 + 1) << 8;
                                      unint64_t v420 = v417 + 2;
                                      *(void *)(v3 + 32) = v420;
                                      if (v420 >= v418)
                                      {
LABEL_626:
                                        int v415 = 255;
LABEL_619:
                                        v388 |= v419 | v415;
                                        int v414 = 16;
                                        *(_DWORD *)(v3 + 56) = 16;
LABEL_620:
                                        unsigned int v416 = 2 * v394;
                                        BOOL v54 = v394 >= 0x20000001;
                                        v394 *= 2;
                                        if (v54) {
                                          goto LABEL_628;
                                        }
                                        continue;
                                      }
                                    }
                                    break;
                                  }
                                  int v415 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v420);
                                  goto LABEL_619;
                                }
                                unsigned int v416 = v394;
LABEL_628:
                                unsigned int v421 = (v416 >> 1) & 0x7FFF0000;
                                int v422 = v416 - v421;
                                if (v388 < v421)
                                {
                                  int v422 = (v416 >> 1) & 0x7FFF0000;
                                  unsigned int v421 = 0;
                                  int v387 = -v387;
                                }
                                *(_DWORD *)(v3 + 44) = v422;
                                *(_DWORD *)(v3 + 48) = v388 - v421;
                              }
                              *((_DWORD *)v281 - 1) = v387;
                              int v423 = *((_DWORD *)v281 - 2);
                              int v424 = *((_DWORD *)v281 - 3) + *(_DWORD *)(v3 + 1156);
                              *((_DWORD *)v281 - 3) = v424;
                              *((_DWORD *)v281 - 2) = v423 + *(_DWORD *)(v3 + 1160);
                              *((_DWORD *)v281 - 1) = *(_DWORD *)(v3 + 1164) + v387;
                              *(_DWORD *)(v3 + 1156) = v424;
                              *(_DWORD *)(v3 + 1160) = *((_DWORD *)v281 - 2);
                              *(_DWORD *)(v3 + 1164) = *((_DWORD *)v281 - 1);
                              int v284 = *((_DWORD *)v281 - 2);
                              int v285 = *((_DWORD *)v281 - 3) << *(_DWORD *)(v3 + 1144);
LABEL_410:
                              *((_DWORD *)v281 - 3) = v285;
                              *((_DWORD *)v281 - 2) = v284 << *(_DWORD *)(v3 + 1144);
                              int v286 = v505;
                              if (v505 <= *((_DWORD *)v281 - 1)) {
                                int v286 = *((_DWORD *)v281 - 1);
                              }
                              int v505 = v286;
                              BOOL v287 = __OFSUB__(v280--, 1);
                              if ((v280 < 0) ^ v287 | (v280 == 0)) {
                                goto LABEL_314;
                              }
                              continue;
                            }
LABEL_590:
                            int v399 = *(_DWORD *)(v3 + 56);
                            while (2)
                            {
                              v388 *= 2;
                              *(_DWORD *)(v3 + 56) = --v399;
                              if (v399) {
                                goto LABEL_593;
                              }
                              uint64_t v401 = *(void *)(v3 + 32);
                              *(void *)(v3 + 32) = v401 + 1;
                              unint64_t v402 = *(unsigned int *)(v3 + 16);
                              if (v401 + 1 >= v402)
                              {
                                int v403 = 65280;
                                unint64_t v404 = v401 + 2;
                                *(void *)(v3 + 32) = v404;
                                if (v404 >= v402) {
                                  goto LABEL_599;
                                }
                              }
                              else
                              {
                                int v403 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v401 + 1) << 8;
                                unint64_t v404 = v401 + 2;
                                *(void *)(v3 + 32) = v404;
                                if (v404 >= v402)
                                {
LABEL_599:
                                  int v400 = 255;
LABEL_592:
                                  v388 |= v403 | v400;
                                  int v399 = 16;
                                  *(_DWORD *)(v3 + 56) = 16;
LABEL_593:
                                  unsigned int v393 = 2 * v389;
                                  BOOL v54 = v389 >= 0x20000001;
                                  v389 *= 2;
                                  if (v54) {
                                    goto LABEL_575;
                                  }
                                  continue;
                                }
                              }
                              break;
                            }
                            int v400 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v404);
                            goto LABEL_592;
                          }
LABEL_527:
                          int v361 = *(_DWORD *)(v3 + 56);
                          while (2)
                          {
                            v350 *= 2;
                            *(_DWORD *)(v3 + 56) = --v361;
                            if (v361) {
                              goto LABEL_530;
                            }
                            uint64_t v363 = *(void *)(v3 + 32);
                            *(void *)(v3 + 32) = v363 + 1;
                            unint64_t v364 = *(unsigned int *)(v3 + 16);
                            if (v363 + 1 >= v364)
                            {
                              int v365 = 65280;
                              unint64_t v366 = v363 + 2;
                              *(void *)(v3 + 32) = v366;
                              if (v366 >= v364) {
                                goto LABEL_536;
                              }
                            }
                            else
                            {
                              int v365 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v363 + 1) << 8;
                              unint64_t v366 = v363 + 2;
                              *(void *)(v3 + 32) = v366;
                              if (v366 >= v364)
                              {
LABEL_536:
                                int v362 = 255;
LABEL_529:
                                v350 |= v365 | v362;
                                int v361 = 16;
                                *(_DWORD *)(v3 + 56) = 16;
LABEL_530:
                                unsigned int v355 = 2 * v351;
                                BOOL v54 = v351 >= 0x20000001;
                                v351 *= 2;
                                if (v54) {
                                  goto LABEL_512;
                                }
                                continue;
                              }
                            }
                            break;
                          }
                          int v362 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v366);
                          goto LABEL_529;
                        }
LABEL_464:
                        int v323 = *(_DWORD *)(v3 + 56);
                        while (2)
                        {
                          v312 *= 2;
                          *(_DWORD *)(v3 + 56) = --v323;
                          if (v323) {
                            goto LABEL_467;
                          }
                          uint64_t v325 = *(void *)(v3 + 32);
                          *(void *)(v3 + 32) = v325 + 1;
                          unint64_t v326 = *(unsigned int *)(v3 + 16);
                          if (v325 + 1 >= v326)
                          {
                            int v327 = 65280;
                            unint64_t v328 = v325 + 2;
                            *(void *)(v3 + 32) = v328;
                            if (v328 >= v326) {
                              goto LABEL_473;
                            }
                          }
                          else
                          {
                            int v327 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v325 + 1) << 8;
                            unint64_t v328 = v325 + 2;
                            *(void *)(v3 + 32) = v328;
                            if (v328 >= v326)
                            {
LABEL_473:
                              int v324 = 255;
LABEL_466:
                              v312 |= v327 | v324;
                              int v323 = 16;
                              *(_DWORD *)(v3 + 56) = 16;
LABEL_467:
                              unsigned int v317 = 2 * v313;
                              BOOL v54 = v313 >= 0x20000001;
                              v313 *= 2;
                              if (v54) {
                                goto LABEL_449;
                              }
                              continue;
                            }
                          }
                          break;
                        }
                        int v324 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v328);
                        goto LABEL_466;
                      }
LABEL_409:
                      *(unsigned char *)(v3 + 1153) = 0;
                      int v283 = *(_DWORD *)(v3 + 1156);
                      *((_DWORD *)v281 - 3) = v283;
                      int v284 = *(_DWORD *)(v3 + 1160);
                      *((_DWORD *)v281 - 2) = v284;
                      *((_DWORD *)v281 - 1) = *(_DWORD *)(v3 + 1164);
                      int v285 = v283 << *(_DWORD *)(v3 + 1144);
                      goto LABEL_410;
                    }
                    break;
                  }
                  unint64_t v291 = 0;
                  uint64_t v292 = (char *)(v281 - (char *)__p[0]);
                  *(_DWORD *)(v288 + 8) = 0;
                  *(void *)unint64_t v288 = 0;
                  if (v281 == __p[0]) {
                    goto LABEL_427;
                  }
LABEL_422:
                  if (v288 < 8)
                  {
                    int8x16_t v293 = v281;
                    uint32x4_t v294 = v292;
                    goto LABEL_440;
                  }
                  int8x16_t v293 = v281;
                  uint32x4_t v294 = v292;
                  if ((void *)((char *)__p[0] - (char *)v291) < (void *)0x20) {
                    goto LABEL_440;
                  }
                  if (v288 >= 0x20)
                  {
                    unint64_t v300 = v288 & 0xFFFFFFFFFFFFFFE0;
                    int8x16_t v301 = &v291[v288 - 16];
                    int32x2_t v302 = v281 - 16;
                    unint64_t v303 = v288 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      long long v304 = *(_OWORD *)v302;
                      *((_OWORD *)v301 - 1) = *((_OWORD *)v302 - 1);
                      *(_OWORD *)int8x16_t v301 = v304;
                      v301 -= 32;
                      v302 -= 32;
                      v303 -= 32;
                    }
                    while (v303);
                    if (v288 != v300)
                    {
                      if ((v288 & 0x18) == 0)
                      {
                        uint32x4_t v294 = &v292[-v300];
                        int8x16_t v293 = &v281[-v300];
                        goto LABEL_440;
                      }
                      goto LABEL_435;
                    }
                  }
                  else
                  {
                    unint64_t v300 = 0;
LABEL_435:
                    int8x16_t v293 = &v281[-(v288 & 0xFFFFFFFFFFFFFFF8)];
                    uint32x4_t v294 = &v292[-(v288 & 0xFFFFFFFFFFFFFFF8)];
                    int32x2_t v305 = &v291[&v281[-v300] - (char *)__p[0] - 8];
                    int32x2_t v306 = &v281[-v300 - 8];
                    unint64_t v307 = v300 - (v288 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      uint64_t v308 = *(void *)v306;
                      v306 -= 8;
                      *(void *)int32x2_t v305 = v308;
                      v305 -= 8;
                      v307 += 8;
                    }
                    while (v307);
                    if (v288 != (v288 & 0xFFFFFFFFFFFFFFF8))
                    {
LABEL_440:
                      int8x16_t v309 = v294 - 1;
                      do
                      {
                        char v310 = *--v293;
                        *v309-- = v310;
                      }
                      while (v293 != __p[0]);
                    }
                  }
                  int v296 = v280;
                  uint32x4_t v297 = v291;
                  int8x16_t v298 = v292 + 12;
                  int64_t v299 = (char *)__p[1] - (char *)v281;
                  if (__p[1] != v281) {
                    memmove(v292 + 12, v281, (char *)__p[1] - (char *)v281);
                  }
                  goto LABEL_444;
                }
LABEL_718:
                int v471 = *(_DWORD *)(v3 + 56);
                while (2)
                {
                  v252 *= 2;
                  *(_DWORD *)(v3 + 56) = --v471;
                  if (v471) {
                    goto LABEL_721;
                  }
                  uint64_t v473 = *(void *)(v3 + 32);
                  *(void *)(v3 + 32) = v473 + 1;
                  unint64_t v474 = *(unsigned int *)(v3 + 16);
                  if (v473 + 1 >= v474)
                  {
                    int v475 = 65280;
                    unint64_t v476 = v473 + 2;
                    *(void *)(v3 + 32) = v476;
                    if (v476 >= v474) {
                      goto LABEL_727;
                    }
                  }
                  else
                  {
                    int v475 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v473 + 1) << 8;
                    unint64_t v476 = v473 + 2;
                    *(void *)(v3 + 32) = v476;
                    if (v476 >= v474)
                    {
LABEL_727:
                      int v472 = 255;
LABEL_720:
                      v252 |= v475 | v472;
                      int v471 = 16;
                      *(_DWORD *)(v3 + 56) = 16;
LABEL_721:
                      unsigned int v466 = 2 * v459;
                      BOOL v54 = v459 >= 0x20000001;
                      v459 *= 2;
                      if (v54) {
                        goto LABEL_709;
                      }
                      continue;
                    }
                  }
                  break;
                }
                int v472 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v476);
                goto LABEL_720;
              }
              int v254 = 8;
              if (v250 < 0x40000001)
              {
LABEL_367:
                int v255 = *(_DWORD *)(v3 + 56);
                while (2)
                {
                  v252 *= 2;
                  *(_DWORD *)(v3 + 56) = --v255;
                  if (v255) {
                    goto LABEL_370;
                  }
                  uint64_t v258 = *(void *)(v3 + 32);
                  *(void *)(v3 + 32) = v258 + 1;
                  unint64_t v259 = *(unsigned int *)(v3 + 16);
                  if (v258 + 1 >= v259)
                  {
                    int v260 = 65280;
                    unint64_t v261 = v258 + 2;
                    *(void *)(v3 + 32) = v261;
                    if (v261 >= v259) {
                      goto LABEL_376;
                    }
                  }
                  else
                  {
                    int v260 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v258 + 1) << 8;
                    unint64_t v261 = v258 + 2;
                    *(void *)(v3 + 32) = v261;
                    if (v261 >= v259)
                    {
LABEL_376:
                      int v256 = 255;
LABEL_369:
                      v252 |= v260 | v256;
                      int v255 = 16;
                      *(_DWORD *)(v3 + 56) = 16;
LABEL_370:
                      unsigned int v257 = 2 * v250;
                      BOOL v54 = v250 >= 0x20000001;
                      v250 *= 2;
                      if (v54) {
                        goto LABEL_402;
                      }
                      continue;
                    }
                  }
                  break;
                }
                int v256 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v261);
                goto LABEL_369;
              }
LABEL_401:
              unsigned int v257 = v250;
LABEL_402:
              unsigned int v275 = *(unsigned __int16 *)(v3 + 1094);
              unsigned int v276 = (HIWORD(v257) * v275) & 0xFFFF0000;
              unsigned int v277 = v257 - v276;
              BOOL v278 = v252 >= v276;
              *(_WORD *)(v3 + 1094) = *(_WORD *)(v3 + 2 * ((v275 >> 7) & 0x1FE | v278) + 64) + v275;
              if (v252 < v276) {
                unsigned int v279 = v276;
              }
              else {
                unsigned int v279 = v277;
              }
              if (v252 < v276) {
                unsigned int v276 = 0;
              }
              *(_DWORD *)(v3 + 44) = v279;
              *(_DWORD *)(v3 + 48) = v252 - v276;
              int v280 = *(_DWORD *)(v225 - 4) + (v254 | v278);
              *(_DWORD *)(v225 - 4) = v280;
              if (v280 >= 1) {
                goto LABEL_408;
              }
LABEL_314:
              int v216 = v504 - 1;
              if (v504 <= 1) {
                goto LABEL_761;
              }
            }
          }
          int v193 = 0;
          unsigned int v194 = *(_DWORD *)(v3 + 44);
          int v195 = 1;
          if (v194 < 0x40000001)
          {
LABEL_287:
            int v201 = *(_DWORD *)(v3 + 56);
            while (2)
            {
              v189 *= 2;
              *(_DWORD *)(v3 + 56) = --v201;
              if (v201) {
                goto LABEL_290;
              }
              uint64_t v203 = *(void *)(v3 + 32);
              *(void *)(v3 + 32) = v203 + 1;
              unint64_t v204 = *(unsigned int *)(v3 + 16);
              if (v203 + 1 >= v204)
              {
                int v205 = 65280;
                unint64_t v206 = v203 + 2;
                *(void *)(v3 + 32) = v206;
                if (v206 >= v204) {
                  goto LABEL_296;
                }
              }
              else
              {
                int v205 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v203 + 1) << 8;
                unint64_t v206 = v203 + 2;
                *(void *)(v3 + 32) = v206;
                if (v206 >= v204)
                {
LABEL_296:
                  int v202 = 255;
LABEL_289:
                  v189 |= v205 | v202;
                  int v201 = 16;
                  *(_DWORD *)(v3 + 56) = 16;
LABEL_290:
                  unsigned int v196 = 2 * v194;
                  BOOL v54 = v194 >= 0x20000001;
                  v194 *= 2;
                  if (v54) {
                    goto LABEL_278;
                  }
                  continue;
                }
              }
              break;
            }
            int v202 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v206);
            goto LABEL_289;
          }
          while (1)
          {
            unsigned int v196 = v194;
LABEL_278:
            unsigned int v197 = (v196 >> 1) & 0x7FFF0000;
            unsigned int v194 = v196 - v197;
            int v198 = v189 >= v197 ? (v196 >> 1) & 0x7FFF0000 : 0;
            BOOL v199 = v189 >= v197;
            v189 -= v198;
            unsigned int v200 = v199 ? v194 : v197;
            *(_DWORD *)(v3 + 44) = v200;
            *(_DWORD *)(v3 + 48) = v189;
            if (!v199) {
              break;
            }
            v193 += 1 << v195++;
            if (v194 < 0x40000001) {
              goto LABEL_287;
            }
          }
          do
          {
            if (v197 < 0x40000001)
            {
              int v210 = *(_DWORD *)(v3 + 56);
              while (1)
              {
                v189 *= 2;
                *(_DWORD *)(v3 + 56) = --v210;
                if (v210) {
                  goto LABEL_305;
                }
                uint64_t v212 = *(void *)(v3 + 32);
                *(void *)(v3 + 32) = v212 + 1;
                unint64_t v213 = *(unsigned int *)(v3 + 16);
                if (v212 + 1 >= v213)
                {
                  int v214 = 65280;
                  unint64_t v215 = v212 + 2;
                  *(void *)(v3 + 32) = v215;
                  if (v215 >= v213)
                  {
LABEL_311:
                    int v211 = 255;
                    goto LABEL_304;
                  }
                }
                else
                {
                  int v214 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v212 + 1) << 8;
                  unint64_t v215 = v212 + 2;
                  *(void *)(v3 + 32) = v215;
                  if (v215 >= v213) {
                    goto LABEL_311;
                  }
                }
                int v211 = *(unsigned __int8 *)(*(void *)(v3 + 24) + v215);
LABEL_304:
                v189 |= v214 | v211;
                int v210 = 16;
                *(_DWORD *)(v3 + 56) = 16;
LABEL_305:
                unsigned int v207 = 2 * v197;
                BOOL v54 = v197 >= 0x20000001;
                v197 *= 2;
                if (v54) {
                  goto LABEL_298;
                }
              }
            }
            unsigned int v207 = v197;
LABEL_298:
            unsigned int v208 = (v207 >> 1) & 0x7FFF0000;
            unsigned int v197 = v207 - v208;
            int v209 = v189 >= v208;
            if (v189 < v208)
            {
              unsigned int v197 = v208;
              unsigned int v208 = 0;
            }
            v189 -= v208;
            *(_DWORD *)(v3 + 44) = v197;
            *(_DWORD *)(v3 + 48) = v189;
            v193 += v209 << --v195;
          }
          while (v195);
          int v186 = *v106 + v193;
          *size_t v106 = v186;
          if (v186 >= 0) {
            goto LABEL_313;
          }
          int v505 = 0;
LABEL_761:
          if ((v501 & 1) == 0)
          {
            int v500 = v505 - v503[3].i32[0];
            *(_DWORD *)((char *)__p[0] + v499 + 12) = v500;
          }
          char v81 = 1;
          int v56 = v502 - 1;
        }
        while (v502 > 1);
      }
      v503 += 4;
    }
    while (v503 != v498);
  }
  uint64_t v497 = (void *)(v3 + 1192);
  uint64_t v496 = *(void **)(v3 + 1192);
  if (v496)
  {
    *(void *)(v3 + 1200) = v496;
    operator delete(v496);
    *uint64_t v497 = 0;
    *(void *)(v3 + 1200) = 0;
    *(void *)(v3 + 1208) = 0;
  }
  double result = *(double *)__p;
  *(_OWORD *)uint64_t v497 = *(_OWORD *)__p;
  *(void *)(v3 + 1208) = v507;
  return result;
}

void sub_18A45035C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5>,gcl::Error ()(int,gcl::gpcc::ByteBuffer)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRK"
                     "NS_4gpcc20AttributeDescriptionEEEEE3$_5")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11Arra"
                                "yBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_5" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_5"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_5" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5>,gcl::Error ()(int,gcl::gpcc::ByteBuffer)>::target_type()
{
}

uint64_t mgcl::muid::Encoder::compressOrdered(mgcl::muid::Encoder *this)
{
  memset(&v100, 0, sizeof(v100));
  end = (int *)*((void *)this + 5);
  if (!end)
  {
    begin = 0;
    int v7 = 1;
    goto LABEL_12;
  }
  std::vector<int>::__append(&v100, (std::vector<int>::size_type)end);
  begin = v100.__begin_;
  end = v100.__end_;
  if (v100.__begin_ == v100.__end_)
  {
    int v7 = 1;
    end = v100.__begin_;
    goto LABEL_12;
  }
  unint64_t v4 = (char *)v100.__end_ - (char *)v100.__begin_ - 4;
  if (v4 >= 0x1C)
  {
    uint64_t v8 = (v4 >> 2) + 1;
    uint64_t v5 = v8 & 0x7FFFFFFFFFFFFFF8;
    std::vector<int>::pointer v6 = &v100.__begin_[v8 & 0x7FFFFFFFFFFFFFF8];
    int32x4_t v9 = (int32x4_t)xmmword_18A628C30;
    int v10 = (int32x4_t *)(v100.__begin_ + 4);
    v11.i64[0] = 0x400000004;
    v11.i64[1] = 0x400000004;
    v12.i64[0] = 0x800000008;
    v12.i64[1] = 0x800000008;
    uint64_t v13 = v8 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v10[-1] = v9;
      int32x4_t *v10 = vaddq_s32(v9, v11);
      int32x4_t v9 = vaddq_s32(v9, v12);
      v10 += 2;
      v13 -= 8;
    }
    while (v13);
    if (v8 == v5) {
      goto LABEL_11;
    }
  }
  else
  {
    LODWORD(v5) = 0;
    std::vector<int>::pointer v6 = v100.__begin_;
  }
  do
  {
    *v6++ = v5;
    LODWORD(v5) = v5 + 1;
  }
  while (v6 != end);
LABEL_11:
  int v7 = 0;
LABEL_12:
  v99.__begin_ = (std::vector<int>::pointer)this;
  unint64_t v14 = 126 - 2 * __clz(end - begin);
  if (v7) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = v14;
  }
  std::__introsort<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *,false>(begin, end, (uint64_t *)&v99, v15, 1);
  memset(&v99, 0, sizeof(v99));
  std::vector<int>::size_type v16 = *((void *)this + 5);
  if (*(void *)this)
  {
    if (v16)
    {
      std::vector<int>::__append(&v99, v16);
      uint64_t v17 = *((void *)this + 5);
      if (v17)
      {
        uint64_t v18 = 0;
        uint64_t v19 = *(void *)this;
        std::vector<int>::pointer v20 = v99.__begin_;
        do
        {
          v20[*(int *)(v19 + 4 * v18)] = v18;
          ++v18;
        }
        while (v17 != v18);
LABEL_22:
        unint64_t v21 = 0;
        unint64_t v22 = 0;
        unint64_t v23 = (char *)this + 1274;
        __int32 v98 = (char *)this + 64;
        int v94 = *((_DWORD *)this + 4);
        uint64_t v95 = *((void *)this + 1);
        int v24 = (char *)this + 1136;
        int v25 = -1;
        while (1)
        {
          int v26 = v100.__begin_[v21];
          if (((*(void *)(v95 + v94 * (uint64_t)v26) ^ v22) & 0xFFFFFFFFFFF00000) == 0
            || *((unsigned char *)this + 1288) == 0)
          {
            unint64_t v28 = v22;
          }
          else
          {
            unint64_t v28 = v22 & 0xFFFFFFFFFFF00000;
          }
          unint64_t v97 = *(void *)(v95 + v94 * (uint64_t)v26);
          if (v99.__begin_ != v99.__end_) {
            int v26 = v99.__begin_[v26];
          }
          unsigned int v29 = v26 - v25;
          unsigned int v30 = v26 - v25 >= 0 ? v26 - v25 : v25 - v26;
          int v31 = v30 - 1;
          int v96 = v26;
          if (v30 > 1) {
            break;
          }
          gcl::ArithmeticEncoder::encode((uint64_t)v98, 0, (_WORD *)this + 641);
LABEL_38:
          gcl::ArithmeticEncoder::encode((uint64_t)v98, v29 >> 31, (_WORD *)this + 642);
          unint64_t v22 = v97;
          gcl::ArithmeticEncoder::encode((uint64_t)v98, v97 != v28, (_WORD *)this + 643);
          unint64_t v32 = v97 - v28;
          if (v32)
          {
            uint64_t v33 = __clz(v32 | 1) ^ 0x3F;
            if (v33)
            {
              int v34 = 0;
              unsigned int v36 = *((_DWORD *)this + 22);
              unsigned int v35 = *((_DWORD *)this + 23);
              int v37 = 4;
              int v38 = 1;
              int v39 = v33;
              do
              {
                char v41 = v34;
                uint64_t v42 = 2 * v37;
                unsigned int v43 = (v35 * *(unsigned __int16 *)&v24[v42]) >> 16;
                v36 += v43;
                v35 -= v43;
                __int16 v44 = *(_WORD *)&v24[v42]
                    - *(_WORD *)((char *)this + (((unint64_t)*(unsigned __int16 *)&v24[v42] >> 7) & 0x1FE) + 112);
                *((_DWORD *)this + 22) = v36;
                *((_DWORD *)this + 23) = v35;
                *(_WORD *)&v24[v42] = v44;
                if (v35 <= 0x4000)
                {
                  int v45 = *((_DWORD *)this + 26);
                  do
                  {
                    v36 *= 2;
                    v35 *= 2;
                    *((_DWORD *)this + 22) = v36;
                    *((_DWORD *)this + 23) = v35;
                    *((_DWORD *)this + 26) = ++v45;
                    if (v45 != 8) {
                      continue;
                    }
                    uint64_t v46 = *((void *)this + 10);
                    uint64_t v47 = *((int *)this + 27);
                    if (v46 + v47 + 1 > (unint64_t)*((unsigned int *)this + 17)) {
                      break;
                    }
                    if (HIBYTE(v36))
                    {
                      ++*(unsigned char *)(v46 + *((void *)this + 9) - 1);
                      uint64_t v46 = *((void *)this + 10);
                      if (*((_DWORD *)this + 27))
                      {
                        do
                        {
                          *(unsigned char *)(*((void *)this + 9) + v46) = 0;
                          int v48 = *((_DWORD *)this + 27);
                          uint64_t v46 = *((void *)this + 10) + 1;
                          *((void *)this + 10) = v46;
                          *((_DWORD *)this + 27) = --v48;
                        }
                        while (v48);
                      }
                    }
                    else
                    {
                      if ((v35 + v36) >> 24)
                      {
                        *((_DWORD *)this + 27) = v47 + 1;
                        goto LABEL_47;
                      }
                      if (v47)
                      {
                        do
                        {
                          *(unsigned char *)(*((void *)this + 9) + v46) = -1;
                          int v49 = *((_DWORD *)this + 27);
                          uint64_t v46 = *((void *)this + 10) + 1;
                          *((void *)this + 10) = v46;
                          *((_DWORD *)this + 27) = --v49;
                        }
                        while (v49);
                      }
                    }
                    *(unsigned char *)(*((void *)this + 9) + v46) = *((_WORD *)this + 45);
                    ++*((void *)this + 10);
                    LOWORD(v36) = *((_WORD *)this + 44);
                    unsigned int v35 = *((_DWORD *)this + 23);
LABEL_47:
                    int v45 = 0;
                    unsigned int v36 = (unsigned __int16)v36;
                    *((_DWORD *)this + 22) = (unsigned __int16)v36;
                    *((_DWORD *)this + 26) = 0;
                  }
                  while (v35 <= 0x4000);
                }
                v39 -= v38;
                ++v34;
                BOOL v40 = v37-- != 0;
                if (!v40) {
                  int v37 = 0;
                }
                int v38 = 2 << v41;
              }
              while (v39 >= 2 << v41);
              gcl::ArithmeticEncoder::encode((uint64_t)v98, 0, &v24[2 * v37]);
              unsigned int v72 = *((_DWORD *)this + 23);
              while (2)
              {
                --v34;
                unsigned int v73 = (unsigned __int16)(v72 >> 1);
                if ((v39 >> v34))
                {
                  v72 -= v73;
                  *((_DWORD *)this + 22) += v73;
                  *((_DWORD *)this + 23) = v72;
                  if (v72 <= 0x4000) {
                    goto LABEL_107;
                  }
LABEL_102:
                  if (v34) {
                    continue;
                  }
                  uint64_t v80 = ~(1 << v33);
                  unint64_t v22 = v97;
                  while (2)
                  {
                    --v33;
                    char v81 = (char *)this + 2 * v33;
                    unint64_t v82 = *((unsigned __int16 *)v81 + 573);
                    unsigned int v83 = (v72 * v82) >> 16;
                    if (((1 << v33) & v80 & v32) != 0)
                    {
                      v72 -= v83;
                      __int16 v84 = v82 - *(_WORD *)((char *)this + ((v82 >> 7) & 0x1FE) + 112);
                      *((_DWORD *)this + 22) += v83;
                      *((_DWORD *)this + 23) = v72;
                      *((_WORD *)v81 + 573) = v84;
                      if (v72 <= 0x4000) {
                        break;
                      }
                      goto LABEL_123;
                    }
                    __int16 v85 = *(_WORD *)((char *)this + (~(*((_WORD *)v81 + 573) >> 7) & 0x1FE) + 112)
                        + *((_WORD *)v81 + 573);
                    unsigned int v72 = v83;
                    *((_DWORD *)this + 23) = v83;
                    *((_WORD *)v81 + 573) = v85;
                    if (v83 > 0x4000)
                    {
LABEL_123:
                      if (!v33) {
                        goto LABEL_24;
                      }
                      continue;
                    }
                    break;
                  }
                  unsigned int v86 = *((_DWORD *)this + 22);
                  int v87 = *((_DWORD *)this + 26);
                  while (2)
                  {
                    v86 *= 2;
                    v72 *= 2;
                    *((_DWORD *)this + 22) = v86;
                    *((_DWORD *)this + 23) = v72;
                    *((_DWORD *)this + 26) = ++v87;
                    if (v87 != 8) {
                      goto LABEL_131;
                    }
                    uint64_t v88 = *((void *)this + 10);
                    uint64_t v89 = *((int *)this + 27);
                    if (v88 + v89 + 1 > (unint64_t)*((unsigned int *)this + 17)) {
                      goto LABEL_123;
                    }
                    if (HIBYTE(v86))
                    {
                      ++*(unsigned char *)(v88 + *((void *)this + 9) - 1);
                      uint64_t v88 = *((void *)this + 10);
                      if (*((_DWORD *)this + 27))
                      {
                        do
                        {
                          *(unsigned char *)(*((void *)this + 9) + v88) = 0;
                          int v90 = *((_DWORD *)this + 27);
                          uint64_t v88 = *((void *)this + 10) + 1;
                          *((void *)this + 10) = v88;
                          *((_DWORD *)this + 27) = --v90;
                        }
                        while (v90);
                      }
                    }
                    else
                    {
                      if ((v72 + v86) >> 24)
                      {
                        *((_DWORD *)this + 27) = v89 + 1;
LABEL_130:
                        int v87 = 0;
                        unsigned int v86 = (unsigned __int16)v86;
                        *((_DWORD *)this + 22) = (unsigned __int16)v86;
                        *((_DWORD *)this + 26) = 0;
LABEL_131:
                        if (v72 > 0x4000) {
                          goto LABEL_123;
                        }
                        continue;
                      }
                      if (v89)
                      {
                        do
                        {
                          *(unsigned char *)(*((void *)this + 9) + v88) = -1;
                          int v91 = *((_DWORD *)this + 27);
                          uint64_t v88 = *((void *)this + 10) + 1;
                          *((void *)this + 10) = v88;
                          *((_DWORD *)this + 27) = --v91;
                        }
                        while (v91);
                      }
                    }
                    break;
                  }
                  *(unsigned char *)(*((void *)this + 9) + v88) = *((_WORD *)this + 45);
                  ++*((void *)this + 10);
                  LOWORD(v86) = *((_WORD *)this + 44);
                  unsigned int v72 = *((_DWORD *)this + 23);
                  goto LABEL_130;
                }
                break;
              }
              unsigned int v72 = (unsigned __int16)(v72 >> 1);
              *((_DWORD *)this + 23) = v73;
              if (v73 > 0x4000) {
                goto LABEL_102;
              }
LABEL_107:
              unsigned int v74 = *((_DWORD *)this + 22);
              int v75 = *((_DWORD *)this + 26);
              while (2)
              {
                v74 *= 2;
                v72 *= 2;
                *((_DWORD *)this + 22) = v74;
                *((_DWORD *)this + 23) = v72;
                *((_DWORD *)this + 26) = ++v75;
                if (v75 != 8) {
                  goto LABEL_110;
                }
                uint64_t v76 = *((void *)this + 10);
                uint64_t v77 = *((int *)this + 27);
                if (v76 + v77 + 1 > (unint64_t)*((unsigned int *)this + 17)) {
                  goto LABEL_102;
                }
                if (HIBYTE(v74))
                {
                  ++*(unsigned char *)(v76 + *((void *)this + 9) - 1);
                  uint64_t v76 = *((void *)this + 10);
                  if (*((_DWORD *)this + 27))
                  {
                    do
                    {
                      *(unsigned char *)(*((void *)this + 9) + v76) = 0;
                      int v78 = *((_DWORD *)this + 27);
                      uint64_t v76 = *((void *)this + 10) + 1;
                      *((void *)this + 10) = v76;
                      *((_DWORD *)this + 27) = --v78;
                    }
                    while (v78);
                  }
                }
                else
                {
                  if ((v72 + v74) >> 24)
                  {
                    *((_DWORD *)this + 27) = v77 + 1;
LABEL_109:
                    int v75 = 0;
                    unsigned int v74 = (unsigned __int16)v74;
                    *((_DWORD *)this + 22) = (unsigned __int16)v74;
                    *((_DWORD *)this + 26) = 0;
LABEL_110:
                    if (v72 > 0x4000) {
                      goto LABEL_102;
                    }
                    continue;
                  }
                  if (v77)
                  {
                    do
                    {
                      *(unsigned char *)(*((void *)this + 9) + v76) = -1;
                      int v79 = *((_DWORD *)this + 27);
                      uint64_t v76 = *((void *)this + 10) + 1;
                      *((void *)this + 10) = v76;
                      *((_DWORD *)this + 27) = --v79;
                    }
                    while (v79);
                  }
                }
                break;
              }
              *(unsigned char *)(*((void *)this + 9) + v76) = *((_WORD *)this + 45);
              ++*((void *)this + 10);
              LOWORD(v74) = *((_WORD *)this + 44);
              unsigned int v72 = *((_DWORD *)this + 23);
              goto LABEL_109;
            }
            gcl::ArithmeticEncoder::encode((uint64_t)v98, 0, (_WORD *)this + 572);
          }
LABEL_24:
          ++v21;
          int v25 = v96;
          if (v21 >= *((void *)this + 5)) {
            goto LABEL_143;
          }
        }
        int v50 = 0;
        unsigned int v52 = *((_DWORD *)this + 22);
        unsigned int v51 = *((_DWORD *)this + 23);
        int v53 = 4;
        int v54 = 1;
        do
        {
          char v55 = v50;
          uint64_t v56 = 2 * v53;
          unsigned int v57 = (v51 * *(unsigned __int16 *)&v23[v56]) >> 16;
          v52 += v57;
          v51 -= v57;
          __int16 v58 = *(_WORD *)&v23[v56]
              - *(_WORD *)((char *)this + (((unint64_t)*(unsigned __int16 *)&v23[v56] >> 7) & 0x1FE) + 112);
          *((_DWORD *)this + 22) = v52;
          *((_DWORD *)this + 23) = v51;
          *(_WORD *)&v23[v56] = v58;
          if (v51 <= 0x4000)
          {
            int v59 = *((_DWORD *)this + 26);
            do
            {
              v52 *= 2;
              v51 *= 2;
              *((_DWORD *)this + 22) = v52;
              *((_DWORD *)this + 23) = v51;
              *((_DWORD *)this + 26) = ++v59;
              if (v59 != 8) {
                continue;
              }
              uint64_t v60 = *((void *)this + 10);
              uint64_t v61 = *((int *)this + 27);
              if (v60 + v61 + 1 > (unint64_t)*((unsigned int *)this + 17)) {
                break;
              }
              if (HIBYTE(v52))
              {
                ++*(unsigned char *)(v60 + *((void *)this + 9) - 1);
                uint64_t v60 = *((void *)this + 10);
                if (*((_DWORD *)this + 27))
                {
                  do
                  {
                    *(unsigned char *)(*((void *)this + 9) + v60) = 0;
                    int v62 = *((_DWORD *)this + 27);
                    uint64_t v60 = *((void *)this + 10) + 1;
                    *((void *)this + 10) = v60;
                    *((_DWORD *)this + 27) = --v62;
                  }
                  while (v62);
                }
              }
              else
              {
                if ((v51 + v52) >> 24)
                {
                  *((_DWORD *)this + 27) = v61 + 1;
                  goto LABEL_67;
                }
                if (v61)
                {
                  do
                  {
                    *(unsigned char *)(*((void *)this + 9) + v60) = -1;
                    int v63 = *((_DWORD *)this + 27);
                    uint64_t v60 = *((void *)this + 10) + 1;
                    *((void *)this + 10) = v60;
                    *((_DWORD *)this + 27) = --v63;
                  }
                  while (v63);
                }
              }
              *(unsigned char *)(*((void *)this + 9) + v60) = *((_WORD *)this + 45);
              ++*((void *)this + 10);
              LOWORD(v52) = *((_WORD *)this + 44);
              unsigned int v51 = *((_DWORD *)this + 23);
LABEL_67:
              int v59 = 0;
              unsigned int v52 = (unsigned __int16)v52;
              *((_DWORD *)this + 22) = (unsigned __int16)v52;
              *((_DWORD *)this + 26) = 0;
            }
            while (v51 <= 0x4000);
          }
          v31 -= v54;
          ++v50;
          BOOL v40 = v53-- != 0;
          if (!v40) {
            int v53 = 0;
          }
          int v54 = 2 << v55;
        }
        while (v31 >= 2 << v55);
        gcl::ArithmeticEncoder::encode((uint64_t)v98, 0, &v23[2 * v53]);
        unsigned int v64 = *((_DWORD *)this + 23);
        while (1)
        {
          --v50;
          unsigned int v65 = (unsigned __int16)(v64 >> 1);
          if (((v31 >> v50) & 1) == 0) {
            break;
          }
          v64 -= v65;
          *((_DWORD *)this + 22) += v65;
          *((_DWORD *)this + 23) = v64;
          if (v64 <= 0x4000) {
            goto LABEL_86;
          }
LABEL_81:
          if (!v50) {
            goto LABEL_38;
          }
        }
        unsigned int v64 = (unsigned __int16)(v64 >> 1);
        *((_DWORD *)this + 23) = v65;
        if (v65 > 0x4000) {
          goto LABEL_81;
        }
LABEL_86:
        unsigned int v66 = *((_DWORD *)this + 22);
        int v67 = *((_DWORD *)this + 26);
        while (1)
        {
          v66 *= 2;
          v64 *= 2;
          *((_DWORD *)this + 22) = v66;
          *((_DWORD *)this + 23) = v64;
          *((_DWORD *)this + 26) = ++v67;
          if (v67 != 8) {
            goto LABEL_89;
          }
          uint64_t v68 = *((void *)this + 10);
          uint64_t v69 = *((int *)this + 27);
          if (v68 + v69 + 1 > (unint64_t)*((unsigned int *)this + 17)) {
            goto LABEL_81;
          }
          if (HIBYTE(v66))
          {
            ++*(unsigned char *)(v68 + *((void *)this + 9) - 1);
            uint64_t v68 = *((void *)this + 10);
            if (*((_DWORD *)this + 27))
            {
              do
              {
                *(unsigned char *)(*((void *)this + 9) + v68) = 0;
                int v70 = *((_DWORD *)this + 27);
                uint64_t v68 = *((void *)this + 10) + 1;
                *((void *)this + 10) = v68;
                *((_DWORD *)this + 27) = --v70;
              }
              while (v70);
            }
          }
          else
          {
            if ((v64 + v66) >> 24)
            {
              *((_DWORD *)this + 27) = v69 + 1;
              goto LABEL_88;
            }
            if (v69)
            {
              do
              {
                *(unsigned char *)(*((void *)this + 9) + v68) = -1;
                int v71 = *((_DWORD *)this + 27);
                uint64_t v68 = *((void *)this + 10) + 1;
                *((void *)this + 10) = v68;
                *((_DWORD *)this + 27) = --v71;
              }
              while (v71);
            }
          }
          *(unsigned char *)(*((void *)this + 9) + v68) = *((_WORD *)this + 45);
          ++*((void *)this + 10);
          LOWORD(v66) = *((_WORD *)this + 44);
          unsigned int v64 = *((_DWORD *)this + 23);
LABEL_88:
          int v67 = 0;
          unsigned int v66 = (unsigned __int16)v66;
          *((_DWORD *)this + 22) = (unsigned __int16)v66;
          *((_DWORD *)this + 26) = 0;
LABEL_89:
          if (v64 > 0x4000) {
            goto LABEL_81;
          }
        }
      }
    }
  }
  else if (v16)
  {
    goto LABEL_22;
  }
LABEL_143:
  *((void *)this + 6) += gcl::ArithmeticEncoder::stop((mgcl::muid::Encoder *)((char *)this + 64));
  unsigned int v92 = *((_DWORD *)this + 16);
  if (v99.__begin_)
  {
    v99.__end_ = v99.__begin_;
    operator delete(v99.__begin_);
  }
  if (v100.__begin_)
  {
    v100.__end_ = v100.__begin_;
    operator delete(v100.__begin_);
  }
  if (v92 >= 5) {
    return 5;
  }
  else {
    return v92;
  }
}

void sub_18A450E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    int v24 = a22;
    if (!a22) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v24 = a22;
    if (!a22) {
      goto LABEL_3;
    }
  }
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

uint64_t mgcl::muid::compress(mgcl::muid *this, const unint64_t *a2, uint64_t a3, uint64_t a4, const int *a5, const int *a6, unsigned char *a7, char *a8, void *a9, unint64_t *a10)
{
  uint64_t result = 5;
  if (a7 && (unint64_t)a8 >= 0x10)
  {
    if (a9) {
      *a9 = 0;
    }
    v17[0] = a4;
    v17[1] = this;
    int v18 = (int)a2;
    uint64_t v19 = a5;
    int v20 = (int)a6;
    uint64_t v21 = a3;
    memset_pattern16(&v31, &memset_pattern_0, 0xAuLL);
    memset_pattern16(v32, &memset_pattern_2, 0x80uLL);
    memset_pattern16(v33, &memset_pattern_3, 0xAuLL);
    uint64_t v14 = 0;
    *(_DWORD *)&v33[10] = 1081344;
    v33[14] = 1;
    *a7 = 1;
    unint64_t v22 = a7 + 1;
    unint64_t v23 = a8 - 1;
    int v24 = 0;
    int v25 = a8 - 1;
    *(void *)&long long v15 = 0xFFFF00000000;
    *((void *)&v15 + 1) = 0xFFFF00000000;
    long long v28 = v15;
    int v26 = a7 + 1;
    uint64_t v27 = 0;
    uint64_t v16 = 0x237u;
    uint64_t v29 = 0;
    do
    {
      *(_WORD *)&v30[v14 * 2] = gcl::ArithmeticEncoder::probUpdateLut[v14];
      *(_WORD *)((char *)v17 + v16 * 2) = gcl::ArithmeticEncoder::probUpdateLut[v16 - 312];
      ++v14;
      --v16;
    }
    while (v14 != 256);
    uint64_t result = mgcl::muid::Encoder::compressOrdered((mgcl::muid::Encoder *)v17);
    if (a9) {
      *a9 = v22 - a7;
    }
  }
  return result;
}

int *std::__introsort<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *,false>(int *result, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int32x4_t v11 = result;
  while (2)
  {
    int32x4_t v12 = v11;
    while (1)
    {
      while (1)
      {
        int32x4_t v11 = v12;
        uint64_t v13 = (char *)a2 - (char *)v12;
        uint64_t v14 = a2 - v12;
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0:
            case 1:
              return result;
            case 2:
              int v103 = *(a2 - 1);
              int v104 = *v12;
              if (*(void *)(*(void *)(*a3 + 8) + *(_DWORD *)(*a3 + 16) * v103) < *(void *)(*(void *)(*a3 + 8)
                                                                                                + *(_DWORD *)(*a3 + 16)
                                                                                                * *v12))
              {
                *int32x4_t v12 = v103;
                *(a2 - 1) = v104;
              }
              return result;
            case 3:
              uint64_t v105 = *a3;
              int v106 = *v12;
              int v107 = v12[1];
              uint64_t v108 = *(void *)(*a3 + 8);
              int v109 = *(_DWORD *)(*a3 + 16);
              unint64_t v110 = *(void *)(v108 + v109 * v107);
              unint64_t v111 = *(void *)(v108 + v109 * *v12);
              int v112 = *(a2 - 1);
              unint64_t v113 = *(void *)(v108 + v112 * v109);
              if (v110 >= v111)
              {
                if (v113 < v110)
                {
                  v12[1] = v112;
                  *(a2 - 1) = v107;
                  int v119 = v12[1];
LABEL_160:
                  int v176 = *v11;
                  if (*(void *)(v108 + *(_DWORD *)(v105 + 16) * v119) < *(void *)(v108
                                                                                     + *(_DWORD *)(v105 + 16) * *v11))
                  {
                    *int32x4_t v11 = v119;
                    v11[1] = v176;
                  }
                }
              }
              else
              {
                if (v113 >= v110)
                {
                  *int32x4_t v12 = v107;
                  v12[1] = v106;
                  int v181 = *(a2 - 1);
                  if (*(void *)(v108 + *(_DWORD *)(v105 + 16) * v181) >= *(void *)(v108
                                                                                      + *(_DWORD *)(v105 + 16) * v106))
                    return result;
                  v12[1] = v181;
                }
                else
                {
                  *int32x4_t v12 = v112;
                }
                *(a2 - 1) = v106;
              }
              break;
            case 4:
              uint64_t v114 = *a3;
              return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *>(v12, v12 + 1, v12 + 2, a2 - 1, v114);
            case 5:
              unsigned int v115 = v12 + 2;
              int v116 = v12 + 3;
              uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *>(v11, v11 + 1, v11 + 2, v11 + 3, *a3);
              int v117 = *(a2 - 1);
              int v118 = v11[3];
              uint64_t v105 = *a3;
              uint64_t v108 = *(void *)(*a3 + 8);
              if (*(void *)(v108 + *(_DWORD *)(*a3 + 16) * v117) >= *(void *)(v108 + *(_DWORD *)(*a3 + 16) * v118)) {
                return result;
              }
              *int v116 = v117;
              *(a2 - 1) = v118;
              int v119 = *v116;
              int v120 = *v115;
              if (*(void *)(v108 + *(_DWORD *)(v105 + 16) * *v116) >= *(void *)(v108
                                                                                   + *(_DWORD *)(v105 + 16) * *v115))
                return result;
              *unsigned int v115 = v119;
              *int v116 = v120;
              int v121 = v11[1];
              if (*(void *)(v108 + *(_DWORD *)(v105 + 16) * v119) >= *(void *)(v108 + *(_DWORD *)(v105 + 16) * v121)) {
                return result;
              }
              v11[1] = v119;
              v11[2] = v121;
              goto LABEL_160;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v13 <= 95)
        {
          uint64_t v122 = *a3;
          if (a5)
          {
            if (v12 != a2)
            {
              unsigned int v123 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v124 = *(void *)(v122 + 8);
                uint64_t v125 = 4;
                int v126 = v12;
                do
                {
                  int v129 = *v126;
                  int v128 = v126[1];
                  int v126 = v123;
                  if (*(void *)(v124 + *(_DWORD *)(v122 + 16) * v128) < *(void *)(v124
                                                                                     + *(_DWORD *)(v122 + 16) * v129))
                  {
                    uint64_t v130 = v125;
                    do
                    {
                      *(int *)((char *)v12 + v130) = v129;
                      uint64_t v131 = v130 - 4;
                      if (v130 == 4)
                      {
                        uint64_t v127 = v12;
                        goto LABEL_116;
                      }
                      int v132 = (char *)v12 + v130;
                      int v133 = *(_DWORD *)(v122 + 16);
                      unint64_t v134 = *(void *)(v124 + v133 * v128);
                      int v129 = *((_DWORD *)v132 - 2);
                      unint64_t v135 = *(void *)(v124 + v133 * v129);
                      uint64_t v130 = v131;
                    }
                    while (v134 < v135);
                    uint64_t v127 = (int *)((char *)v12 + v131);
LABEL_116:
                    *uint64_t v127 = v128;
                  }
                  unsigned int v123 = v126 + 1;
                  v125 += 4;
                }
                while (v126 + 1 != a2);
              }
            }
          }
          else if (v12 != a2)
          {
            unsigned int v177 = v12 + 1;
            if (v12 + 1 != a2)
            {
              uint64_t v178 = *(void *)(v122 + 8);
              do
              {
                int v180 = *v11;
                int v179 = v11[1];
                int32x4_t v11 = v177;
                if (*(void *)(v178 + *(_DWORD *)(v122 + 16) * v179) < *(void *)(v178 + *(_DWORD *)(v122 + 16)
                                                                                          * v180))
                {
                  do
                  {
                    int *v177 = v180;
                    int v180 = *(v177 - 2);
                    --v177;
                  }
                  while (*(void *)(v178 + *(_DWORD *)(v122 + 16) * v179) < *(void *)(v178
                                                                                        + *(_DWORD *)(v122 + 16) * v180));
                  int *v177 = v179;
                }
                unsigned int v177 = v11 + 1;
              }
              while (v11 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v12 != a2)
          {
            int64_t v136 = (unint64_t)(v14 - 2) >> 1;
            uint64_t v137 = *a3;
            int64_t v138 = v136;
            do
            {
              int64_t v139 = v138;
              if (v136 >= v138)
              {
                uint64_t v140 = (2 * v138) | 1;
                unsigned int v141 = &v12[v140];
                int v142 = *v141;
                if (2 * v139 + 2 < v14)
                {
                  uint64_t v143 = *(void *)(v137 + 8);
                  int v144 = *(_DWORD *)(v137 + 16);
                  if (*(void *)(v143 + v144 * v142) < *(void *)(v143 + v144 * v141[1]))
                  {
                    int v142 = v141[1];
                    ++v141;
                    uint64_t v140 = 2 * v139 + 2;
                  }
                }
                else
                {
                  uint64_t v143 = *(void *)(v137 + 8);
                  int v144 = *(_DWORD *)(v137 + 16);
                }
                unsigned int v145 = &v12[v139];
                int v146 = *v145;
                unint64_t v147 = *(void *)(v143 + v144 * (uint64_t)v142);
                uint64_t result = *(int **)(v143 + *v145 * (uint64_t)v144);
                if (v147 >= (unint64_t)result)
                {
                  uint64_t result = (int *)v146;
                  do
                  {
                    uint64_t v151 = v141;
                    *unsigned int v145 = v142;
                    if (v136 < v140) {
                      break;
                    }
                    uint64_t v152 = (2 * v140) | 1;
                    unsigned int v141 = &v12[v152];
                    uint64_t v140 = 2 * v140 + 2;
                    int v142 = *v141;
                    if (v140 < v14)
                    {
                      int v148 = *(_DWORD *)(v137 + 16);
                      if (*(void *)(v143 + v148 * v142) >= *(void *)(v143 + v148 * v141[1]))
                      {
                        uint64_t v140 = v152;
                      }
                      else
                      {
                        int v142 = v141[1];
                        ++v141;
                      }
                    }
                    else
                    {
                      int v148 = *(_DWORD *)(v137 + 16);
                      uint64_t v140 = v152;
                    }
                    unint64_t v149 = *(void *)(v143 + v142 * (uint64_t)v148);
                    unint64_t v150 = *(void *)(v143 + v146 * (uint64_t)v148);
                    unsigned int v145 = v151;
                  }
                  while (v149 >= v150);
                  int *v151 = v146;
                  uint64_t v137 = *a3;
                }
              }
              int64_t v138 = v139 - 1;
            }
            while (v139);
            uint64_t v153 = (unint64_t)v13 >> 2;
            do
            {
              uint64_t v155 = 0;
              int v156 = *v12;
              uint64_t v157 = *a3;
              int64_t v158 = (unint64_t)(v153 - 2) >> 1;
              int v159 = v12;
              do
              {
                while (1)
                {
                  int v162 = &v159[v155];
                  int v163 = v162[1];
                  unint64_t v161 = v162 + 1;
                  int v160 = v163;
                  uint64_t v164 = (2 * v155) | 1;
                  uint64_t v155 = 2 * v155 + 2;
                  if (v155 < v153) {
                    break;
                  }
                  uint64_t v155 = v164;
                  *int v159 = v160;
                  int v159 = v161;
                  if (v164 > v158) {
                    goto LABEL_152;
                  }
                }
                uint64_t result = (int *)v161[1];
                if (*(void *)(*(void *)(v157 + 8) + *(_DWORD *)(v157 + 16) * v160) >= *(void *)(*(void *)(v157 + 8) + *(_DWORD *)(v157 + 16) * (int)result))
                {
                  uint64_t v155 = v164;
                }
                else
                {
                  int v160 = v161[1];
                  ++v161;
                }
                *int v159 = v160;
                int v159 = v161;
              }
              while (v155 <= v158);
LABEL_152:
              if (v161 == --a2)
              {
                *unint64_t v161 = v156;
              }
              else
              {
                *unint64_t v161 = *a2;
                *a2 = v156;
                uint64_t v165 = (char *)v161 - (char *)v12 + 4;
                if (v165 >= 5)
                {
                  unint64_t v166 = (unint64_t)v165 >> 2;
                  uint64_t v167 = *a3;
                  unint64_t v168 = (v166 - 2) >> 1;
                  int v169 = &v12[v168];
                  int v170 = *v169;
                  int v171 = *v161;
                  uint64_t v172 = *(void *)(*a3 + 8);
                  if (*(void *)(v172 + *(_DWORD *)(*a3 + 16) * *v169) < *(void *)(v172
                                                                                     + *(_DWORD *)(*a3 + 16) * *v161))
                  {
                    do
                    {
                      unsigned int v173 = v169;
                      *unint64_t v161 = v170;
                      if (!v168) {
                        break;
                      }
                      unint64_t v168 = (v168 - 1) >> 1;
                      int v169 = &v12[v168];
                      int v170 = *v169;
                      int v174 = *(_DWORD *)(v167 + 16);
                      unint64_t v175 = *(void *)(v172 + v174 * *v169);
                      uint64_t result = *(int **)(v172 + v174 * v171);
                      unint64_t v161 = v173;
                    }
                    while (v175 < (unint64_t)result);
                    *unsigned int v173 = v171;
                  }
                }
              }
            }
            while (v153-- > 2);
          }
          return result;
        }
        unint64_t v15 = (unint64_t)v14 >> 1;
        uint64_t v16 = &v12[(unint64_t)v14 >> 1];
        uint64_t v17 = *a3;
        uint64_t v18 = *(void *)(*a3 + 8);
        int v19 = *(_DWORD *)(*a3 + 16);
        int v20 = *(a2 - 1);
        unint64_t v21 = *(void *)(v18 + v20 * v19);
        if ((unint64_t)v13 >= 0x201) {
          break;
        }
        int v25 = *v12;
        int v26 = *v16;
        unint64_t v27 = *(void *)(v18 + *v12 * v19);
        if (v27 < *(void *)(v18 + *v16 * v19))
        {
          if (v21 >= v27)
          {
            *uint64_t v16 = v25;
            *int32x4_t v12 = v26;
            int v44 = *(a2 - 1);
            if (*(void *)(v18 + *(_DWORD *)(v17 + 16) * v44) >= *(void *)(v18 + *(_DWORD *)(v17 + 16) * v26)) {
              goto LABEL_33;
            }
            *int32x4_t v12 = v44;
          }
          else
          {
            *uint64_t v16 = v20;
          }
          *(a2 - 1) = v26;
LABEL_33:
          --a4;
          int v30 = *v12;
          int v31 = *v12;
          if (a5) {
            goto LABEL_56;
          }
          goto LABEL_55;
        }
        if (v21 >= v27) {
          goto LABEL_33;
        }
        *int32x4_t v12 = v20;
        *(a2 - 1) = v25;
        int v29 = *v16;
        if (*(void *)(v18 + *(_DWORD *)(v17 + 16) * *v12) >= *(void *)(v18 + *(_DWORD *)(v17 + 16) * *v16)) {
          goto LABEL_33;
        }
        *uint64_t v16 = *v12;
        *int32x4_t v12 = v29;
        --a4;
        int v30 = v29;
        int v31 = v29;
        if (a5) {
          goto LABEL_56;
        }
LABEL_55:
        int v71 = *(_DWORD *)(v17 + 16);
        unint64_t v72 = *(void *)(v18 + v71 * (uint64_t)v31);
        if (*(void *)(v18 + v71 * (uint64_t)*(v12 - 1)) < v72) {
          goto LABEL_56;
        }
        if (v72 >= *(void *)(v18 + *(a2 - 1) * (uint64_t)v71))
        {
          unint64_t v93 = v12 + 1;
          do
          {
            int32x4_t v12 = v93;
            if (v93 >= a2) {
              break;
            }
            ++v93;
          }
          while (v72 >= *(void *)(v18 + *v12 * (uint64_t)v71));
        }
        else
        {
          do
          {
            int v92 = v12[1];
            ++v12;
          }
          while (v72 >= *(void *)(v18 + v92 * (uint64_t)v71));
        }
        int v94 = a2;
        if (v12 < a2)
        {
          int v94 = a2;
          do
            int v95 = *--v94;
          while (v72 < *(void *)(v18 + v95 * (uint64_t)v71));
        }
        if (v12 < v94)
        {
          int v96 = *v12;
          int v97 = *v94;
          do
          {
            *int32x4_t v12 = v97;
            *int v94 = v96;
            int v98 = *(_DWORD *)(v17 + 16);
            unint64_t v99 = *(void *)(v18 + v98 * v30);
            do
            {
              int v100 = v12[1];
              ++v12;
              int v96 = v100;
            }
            while (v99 >= *(void *)(v18 + v100 * v98));
            do
            {
              int v101 = *--v94;
              int v97 = v101;
            }
            while (v99 < *(void *)(v18 + v101 * v98));
          }
          while (v12 < v94);
        }
        size_t v102 = v12 - 1;
        BOOL v5 = v12 - 1 >= v11;
        BOOL v6 = v12 - 1 == v11;
        if (v12 - 1 != v11) {
          *int32x4_t v11 = *v102;
        }
        a5 = 0;
        *size_t v102 = v30;
      }
      int v22 = *v16;
      int v23 = *v12;
      unint64_t v24 = *(void *)(v18 + *v16 * v19);
      if (v24 >= *(void *)(v18 + *v12 * v19))
      {
        if (v21 < v24)
        {
          *uint64_t v16 = v20;
          *(a2 - 1) = v22;
          int v28 = *v12;
          if (*(void *)(v18 + *(_DWORD *)(v17 + 16) * *v16) < *(void *)(v18 + *(_DWORD *)(v17 + 16) * *v12))
          {
            *int32x4_t v12 = *v16;
            *uint64_t v16 = v28;
          }
        }
      }
      else
      {
        if (v21 >= v24)
        {
          *int32x4_t v12 = v22;
          *uint64_t v16 = v23;
          int v32 = *(a2 - 1);
          if (*(void *)(v18 + *(_DWORD *)(v17 + 16) * v32) >= *(void *)(v18 + *(_DWORD *)(v17 + 16) * v23)) {
            goto LABEL_24;
          }
          *uint64_t v16 = v32;
        }
        else
        {
          *int32x4_t v12 = v20;
        }
        *(a2 - 1) = v23;
      }
LABEL_24:
      uint64_t v33 = &v12[v15];
      int v36 = *(v33 - 1);
      int v34 = v33 - 1;
      int v35 = v36;
      int v37 = v12[1];
      int v38 = *(_DWORD *)(v17 + 16);
      unint64_t v39 = *(void *)(v18 + v38 * v36);
      unint64_t v40 = *(void *)(v18 + v38 * v37);
      int v41 = *(a2 - 2);
      unint64_t v42 = *(void *)(v18 + v41 * v38);
      if (v39 >= v40)
      {
        if (v42 < v39)
        {
          int *v34 = v41;
          *(a2 - 2) = v35;
          int v43 = v12[1];
          if (*(void *)(v18 + *(_DWORD *)(v17 + 16) * *v34) < *(void *)(v18 + *(_DWORD *)(v17 + 16) * v43))
          {
            v12[1] = *v34;
            int *v34 = v43;
          }
        }
      }
      else
      {
        if (v42 >= v39)
        {
          v12[1] = v35;
          int *v34 = v37;
          int v45 = *(a2 - 2);
          if (*(void *)(v18 + *(_DWORD *)(v17 + 16) * v45) >= *(void *)(v18 + *(_DWORD *)(v17 + 16) * v37)) {
            goto LABEL_38;
          }
          int *v34 = v45;
        }
        else
        {
          v12[1] = v41;
        }
        *(a2 - 2) = v37;
      }
LABEL_38:
      uint64_t v46 = &v12[v15];
      int v49 = v46[1];
      uint64_t v47 = v46 + 1;
      int v48 = v49;
      int v50 = v12[2];
      int v51 = *(_DWORD *)(v17 + 16);
      unint64_t v52 = *(void *)(v18 + v51 * v49);
      unint64_t v53 = *(void *)(v18 + v51 * v50);
      int v54 = *(a2 - 3);
      unint64_t v55 = *(void *)(v18 + v54 * v51);
      if (v52 >= v53)
      {
        if (v55 < v52)
        {
          *uint64_t v47 = v54;
          *(a2 - 3) = v48;
          int v56 = v12[2];
          if (*(void *)(v18 + *(_DWORD *)(v17 + 16) * *v47) < *(void *)(v18 + *(_DWORD *)(v17 + 16) * v56))
          {
            v12[2] = *v47;
            *uint64_t v47 = v56;
          }
        }
      }
      else
      {
        if (v55 >= v52)
        {
          v12[2] = v48;
          *uint64_t v47 = v50;
          int v57 = *(a2 - 3);
          if (*(void *)(v18 + *(_DWORD *)(v17 + 16) * v57) >= *(void *)(v18 + *(_DWORD *)(v17 + 16) * v50)) {
            goto LABEL_47;
          }
          *uint64_t v47 = v57;
        }
        else
        {
          v12[2] = v54;
        }
        *(a2 - 3) = v50;
      }
LABEL_47:
      int v58 = *v16;
      int v59 = *v34;
      int v60 = *(_DWORD *)(v17 + 16);
      unint64_t v61 = *(void *)(v18 + v60 * *v16);
      uint64_t result = *(int **)(v18 + v60 * *v34);
      int v62 = *v47;
      unint64_t v63 = *(void *)(v18 + *v47 * v60);
      if (v61 < (unint64_t)result)
      {
        if (v63 >= v61)
        {
          int *v34 = v58;
          *uint64_t v16 = v59;
          int v64 = *(_DWORD *)(v17 + 16);
          unint64_t v65 = *(void *)(v18 + v64 * v62);
          unint64_t v66 = *(void *)(v18 + v64 * v59);
          int v34 = v16;
          int v58 = v62;
          if (v65 >= v66)
          {
            int v58 = v59;
            goto LABEL_54;
          }
        }
LABEL_53:
        int *v34 = v62;
        *uint64_t v47 = v59;
        goto LABEL_54;
      }
      if (v63 >= v61) {
        goto LABEL_54;
      }
      *uint64_t v16 = v62;
      *uint64_t v47 = v58;
      int v67 = *(_DWORD *)(v17 + 16);
      unint64_t v68 = *(void *)(v18 + v67 * v62);
      unint64_t v69 = *(void *)(v18 + v67 * v59);
      uint64_t v47 = v16;
      int v58 = v59;
      if (v68 < v69) {
        goto LABEL_53;
      }
      int v58 = v62;
LABEL_54:
      int v70 = *v12;
      *int32x4_t v12 = v58;
      *uint64_t v16 = v70;
      --a4;
      int v30 = *v12;
      int v31 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_55;
      }
LABEL_56:
      uint64_t v73 = 0;
      uint64_t v74 = *a3;
      uint64_t v75 = *(void *)(*a3 + 8);
      int v76 = *(_DWORD *)(*a3 + 16);
      unint64_t v77 = *(void *)(v75 + v76 * (uint64_t)v31);
      do
        int v78 = v12[++v73];
      while (*(void *)(v75 + v78 * v76) < v77);
      int v79 = &v12[v73];
      uint64_t v80 = a2;
      if (v73 == 1)
      {
        uint64_t v80 = a2;
        do
        {
          if (v79 >= v80) {
            break;
          }
          int v82 = *--v80;
        }
        while (*(void *)(v75 + v82 * (uint64_t)v76) >= v77);
      }
      else
      {
        do
          int v81 = *--v80;
        while (*(void *)(v75 + v81 * (uint64_t)v76) >= v77);
      }
      if (v79 >= v80)
      {
        int v90 = v79 - 1;
        if (v79 - 1 == v12) {
          goto LABEL_74;
        }
LABEL_73:
        *int32x4_t v12 = *v90;
        goto LABEL_74;
      }
      int v83 = *v80;
      __int16 v84 = &v12[v73];
      __int16 v85 = v80;
      do
      {
        *__int16 v84 = v83;
        *__int16 v85 = v78;
        int v86 = *(_DWORD *)(v74 + 16);
        unint64_t v87 = *(void *)(v75 + v86 * v30);
        do
        {
          int v88 = v84[1];
          ++v84;
          int v78 = v88;
        }
        while (*(void *)(v75 + v88 * v86) < v87);
        do
        {
          int v89 = *--v85;
          int v83 = v89;
        }
        while (*(void *)(v75 + v89 * v86) >= v87);
      }
      while (v84 < v85);
      int v90 = v84 - 1;
      if (v84 - 1 != v12) {
        goto LABEL_73;
      }
LABEL_74:
      *int v90 = v30;
      if (v79 < v80) {
        goto LABEL_77;
      }
      BOOL v91 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *>(v12, v90, a3);
      int32x4_t v12 = v90 + 1;
      uint64_t result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *>(v90 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v91)
      {
LABEL_77:
        uint64_t result = (int *)std::__introsort<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *,false>(v11, v90, a3, a4, a5 & 1);
        a5 = 0;
        int32x4_t v12 = v90 + 1;
      }
    }
    a2 = v90;
    if (!v91) {
      continue;
    }
    return result;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = *(a2 - 1);
      int v9 = *a1;
      if (*(void *)(*(void *)(*a3 + 8) + *(_DWORD *)(*a3 + 16) * v8) < *(void *)(*(void *)(*a3 + 8)
                                                                                      + *(_DWORD *)(*a3 + 16) * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      uint64_t v10 = *a3;
      int v11 = *a1;
      int v12 = a1[1];
      uint64_t v13 = *(void *)(*a3 + 8);
      int v14 = *(_DWORD *)(*a3 + 16);
      unint64_t v15 = *(void *)(v13 + v14 * v12);
      unint64_t v16 = *(void *)(v13 + v14 * *a1);
      int v17 = *(a2 - 1);
      unint64_t v18 = *(void *)(v13 + v17 * v14);
      if (v15 >= v16)
      {
        if (v18 < v15)
        {
          a1[1] = v17;
          *(a2 - 1) = v12;
          int v44 = *a1;
          int v43 = a1[1];
          if (*(void *)(v13 + *(_DWORD *)(v10 + 16) * v43) < *(void *)(v13 + *(_DWORD *)(v10 + 16) * *a1))
          {
            *a1 = v43;
            a1[1] = v44;
          }
        }
      }
      else if (v18 >= v15)
      {
        *a1 = v12;
        a1[1] = v11;
        int v57 = *(a2 - 1);
        if (*(void *)(v13 + *(_DWORD *)(v10 + 16) * v57) < *(void *)(v13 + *(_DWORD *)(v10 + 16) * v11))
        {
          a1[1] = v57;
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v17;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, *a3);
      return 1;
    case 5:
      uint64_t v33 = a1 + 2;
      int v34 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, *a3);
      int v35 = *(a2 - 1);
      int v36 = a1[3];
      uint64_t v37 = *a3;
      uint64_t v38 = *(void *)(*a3 + 8);
      if (*(void *)(v38 + *(_DWORD *)(*a3 + 16) * v35) >= *(void *)(v38 + *(_DWORD *)(*a3 + 16) * v36)) {
        return 1;
      }
      int *v34 = v35;
      *(a2 - 1) = v36;
      int v39 = *v34;
      int v40 = *v33;
      if (*(void *)(v38 + *(_DWORD *)(v37 + 16) * *v34) >= *(void *)(v38 + *(_DWORD *)(v37 + 16) * *v33)) {
        return 1;
      }
      *uint64_t v33 = v39;
      int *v34 = v40;
      int v41 = a1[1];
      if (*(void *)(v38 + *(_DWORD *)(v37 + 16) * v39) >= *(void *)(v38 + *(_DWORD *)(v37 + 16) * v41)) {
        return 1;
      }
      a1[1] = v39;
      a1[2] = v41;
      int v42 = *a1;
      if (*(void *)(v38 + *(_DWORD *)(v37 + 16) * v39) >= *(void *)(v38 + *(_DWORD *)(v37 + 16) * *a1)) {
        return 1;
      }
      *a1 = v39;
      a1[1] = v42;
      return 1;
    default:
      int v19 = a1 + 2;
      int v20 = a1[2];
      int v21 = a1[1];
      uint64_t v22 = *a3;
      int v23 = *a1;
      uint64_t v24 = *(void *)(*a3 + 8);
      int v25 = *(_DWORD *)(*a3 + 16);
      unint64_t v26 = *(void *)(v24 + v25 * v21);
      unint64_t v27 = *(void *)(v24 + v20 * v25);
      if (v26 >= *(void *)(v24 + v25 * *a1))
      {
        if (v27 >= v26) {
          goto LABEL_25;
        }
        a1[1] = v20;
        *int v19 = v21;
        int v45 = *(_DWORD *)(v22 + 16);
        unint64_t v31 = *(void *)(v24 + v45 * v20);
        unint64_t v32 = *(void *)(v24 + v45 * v23);
        int v28 = a1;
        int v29 = a1 + 1;
      }
      else
      {
        int v28 = a1;
        int v29 = a1 + 2;
        if (v27 < v26) {
          goto LABEL_24;
        }
        *a1 = v21;
        a1[1] = v23;
        int v30 = *(_DWORD *)(v22 + 16);
        unint64_t v31 = *(void *)(v24 + v30 * v20);
        unint64_t v32 = *(void *)(v24 + v30 * v23);
        int v28 = a1 + 1;
        int v29 = a1 + 2;
      }
      if (v31 >= v32) {
        goto LABEL_25;
      }
LABEL_24:
      *int v28 = v20;
      *int v29 = v23;
LABEL_25:
      uint64_t v46 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v47 = 0;
      uint64_t v48 = 12;
      break;
  }
  while (1)
  {
    int v49 = *v46;
    int v50 = *v19;
    if (*(void *)(v24 + *(_DWORD *)(v22 + 16) * *v46) < *(void *)(v24 + *(_DWORD *)(v22 + 16) * v50)) {
      break;
    }
LABEL_34:
    int v19 = v46;
    v48 += 4;
    if (++v46 == a2) {
      return 1;
    }
  }
  uint64_t v51 = v48;
  do
  {
    *(int *)((char *)a1 + v51) = v50;
    uint64_t v52 = v51 - 4;
    if (v51 == 4)
    {
      *a1 = v49;
      if (++v47 != 8) {
        goto LABEL_34;
      }
      return v46 + 1 == a2;
    }
    unint64_t v53 = (char *)a1 + v51;
    int v54 = *(_DWORD *)(v22 + 16);
    unint64_t v55 = *(void *)(v24 + v54 * v49);
    int v50 = *((_DWORD *)v53 - 2);
    unint64_t v56 = *(void *)(v24 + v54 * v50);
    uint64_t v51 = v52;
  }
  while (v55 < v56);
  *(int *)((char *)a1 + v52) = v49;
  if (++v47 != 8) {
    goto LABEL_34;
  }
  return v46 + 1 == a2;
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *>(int *result, int *a2, int *a3, int *a4, uint64_t a5)
{
  int v5 = *a2;
  int v6 = *result;
  uint64_t v7 = *(void *)(a5 + 8);
  int v8 = *(_DWORD *)(a5 + 16);
  unint64_t v9 = *(void *)(v7 + v8 * *a2);
  unint64_t v10 = *(void *)(v7 + v8 * *result);
  int v11 = *a3;
  unint64_t v12 = *(void *)(v7 + *a3 * v8);
  if (v9 >= v10)
  {
    if (v12 >= v9)
    {
      int v5 = *a3;
    }
    else
    {
      *a2 = v11;
      *a3 = v5;
      int v13 = *result;
      if (*(void *)(v7 + *(_DWORD *)(a5 + 16) * *a2) < *(void *)(v7 + *(_DWORD *)(a5 + 16) * *result))
      {
        *BOOL result = *a2;
        *a2 = v13;
        int v5 = *a3;
      }
    }
  }
  else
  {
    if (v12 < v9)
    {
      *BOOL result = v11;
LABEL_9:
      *a3 = v6;
      int v5 = v6;
      goto LABEL_11;
    }
    *BOOL result = v5;
    *a2 = v6;
    int v5 = *a3;
    if (*(void *)(v7 + *(_DWORD *)(a5 + 16) * *a3) < *(void *)(v7 + *(_DWORD *)(a5 + 16) * v6))
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(void *)(v7 + *(_DWORD *)(a5 + 16) * *a4) < *(void *)(v7 + *(_DWORD *)(a5 + 16) * v5))
  {
    *a3 = *a4;
    *a4 = v5;
    int v14 = *a2;
    if (*(void *)(v7 + *(_DWORD *)(a5 + 16) * *a3) < *(void *)(v7 + *(_DWORD *)(a5 + 16) * *a2))
    {
      *a2 = *a3;
      *a3 = v14;
      int v15 = *result;
      if (*(void *)(v7 + *(_DWORD *)(a5 + 16) * *a2) < *(void *)(v7 + *(_DWORD *)(a5 + 16) * *result))
      {
        *BOOL result = *a2;
        *a2 = v15;
      }
    }
  }
  return result;
}

void mgcl::iarray::Encoder::~Encoder(mgcl::iarray::Encoder *this)
{
  uint64_t v1 = *(void **)this;
  *(void *)this = 0;
  if (v1)
  {
    uint64_t v2 = (void *)*v1;
    void *v1 = 0;
    if (v2)
    {
      unint64_t v3 = (void *)v2[142];
      if (v3)
      {
        v2[143] = v3;
        operator delete(v3);
      }
      unint64_t v4 = (void *)v2[137];
      if (v4)
      {
        v2[138] = v4;
        operator delete(v4);
      }
      int v5 = (void *)v2[134];
      if (v5)
      {
        v2[135] = v5;
        operator delete(v5);
      }
      MEMORY[0x18C11F580](v2, 0x1030C40509BDA7ELL);
    }
    MEMORY[0x18C11F580](v1, 0x20C4093837F09);
  }
}

void mgcl::gpcc::Decoder::~Decoder(mgcl::gpcc::Decoder *this)
{
  uint64_t v1 = *(void **)this;
  *(void *)this = 0;
  if (v1)
  {
    uint64_t v2 = (void *)v1[4];
    if (v2)
    {
      v1[5] = v2;
      operator delete(v2);
    }
    unint64_t v3 = (void *)*v1;
    void *v1 = 0;
    if (v3) {
      std::default_delete<gcl::gpcc::Decoder::Impl>::operator()[abi:ne180100]((uint64_t)v1, v3);
    }
    MEMORY[0x18C11F580](v1, 0x1030C40A5E9B400);
  }
}

uint64_t mgcl::gpcc::Decoder::parseMetadata(uint64_t **this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *this;
  *((_DWORD *)v1 + 14) = 0;
  if (!v1[1] || !v1[3]) {
    return 5;
  }
  int v19 = 0;
  v21[3] = 0;
  v22[3] = 0;
  v22[7] = 0;
  v22[11] = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  int v25 = (void (**)(void **))&unk_1ED518208;
  unint64_t v26 = (int *)(v1 + 4);
  unint64_t v27 = (void **)&v25;
  std::__function::__value_func<BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::swap[abi:ne180100](&v25, v21);
  if (v27 == (void **)&v25)
  {
    v25[4]((void **)&v25);
  }
  else if (v27)
  {
    (*((void (**)(void **))*v27 + 5))(v27);
  }
  int v25 = (void (**)(void **))&unk_1ED518260;
  unint64_t v26 = &v19;
  unint64_t v27 = (void **)&v25;
  std::__function::__value_func<BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::swap[abi:ne180100](&v25, v22);
  if (v27 == (void **)&v25)
  {
    v25[4]((void **)&v25);
    unint64_t v9 = *this;
    unint64_t v6 = (*this)[3];
    unint64_t v18 = 0;
    uint64_t v7 = *v9;
    int v8 = (const char *)v9[1];
    if (*v9) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
  if (v27) {
    (*((void (**)(void **))*v27 + 5))(v27);
  }
  int v5 = *this;
  unint64_t v6 = (*this)[3];
  unint64_t v18 = 0;
  uint64_t v7 = *v5;
  int v8 = (const char *)v5[1];
  if (!*v5)
  {
LABEL_31:
    uint64_t v3 = 5;
    goto LABEL_35;
  }
LABEL_15:
  while (!v8)
  {
    unint64_t v18 = 0;
    unint64_t v12 = (_OWORD *)(v7 + 216);
    int v11 = *(_DWORD **)(v7 + 216);
    if (v11)
    {
      int v13 = *(_DWORD *)(v7 + 212);
      if (v13 >= 1)
      {
        for (int i = 0; i < v13; ++i)
        {
          int v15 = v11[1];
          *v11 += *(_DWORD *)(v7 + 188);
          v11[1] = v15 + *(_DWORD *)(v7 + 192);
          v11[2] += *(_DWORD *)(v7 + 196);
          int v11 = (_DWORD *)((char *)v11 + *(int *)(v7 + 236));
          int v13 = *(_DWORD *)(v7 + 212);
        }
      }
      if (v23)
      {
        int v20 = *(_DWORD *)(v7 + 184);
        int v25 = (void (**)(void **))v13;
        (*(void (**)(uint64_t, int *, void (***)(void **)))(*(void *)v23 + 48))(v23, &v20, &v25);
      }
      *unint64_t v12 = 0u;
      v12[1] = 0u;
    }
LABEL_25:
    if (v18) {
      BOOL v16 = v6 > v18;
    }
    else {
      BOOL v16 = 0;
    }
    if (!v16)
    {
      uint64_t v3 = 0;
      *((_DWORD *)*this + 14) = v19;
      goto LABEL_35;
    }
    v8 += v18;
    v6 -= v18;
    int v17 = *this;
    unint64_t v18 = 0;
    uint64_t v7 = *v17;
    if (!*v17) {
      goto LABEL_31;
    }
  }
  unsigned int v10 = gcl::gpcc::Decoder::Impl::decode((gcl::gpcc::Decoder::Impl *)v7, v8, v6, &v18, (const gcl::gpcc::Decoder::Delegate *)v21);
  if (!v10) {
    goto LABEL_25;
  }
  if (v10 - 1 >= 4) {
    uint64_t v3 = 5;
  }
  else {
    uint64_t v3 = v10;
  }
LABEL_35:
  gcl::gpcc::Decoder::Delegate::~Delegate((gcl::gpcc::Decoder::Delegate *)v21);
  return v3;
}

void sub_18A452680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  gcl::gpcc::Decoder::Delegate::~Delegate((gcl::gpcc::Decoder::Delegate *)va);
  _Unwind_Resume(a1);
}

uint64_t mgcl::gpcc::Decoder::decode(uint64_t **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *a1;
  if (!(*a1)[1] || !v4[3]) {
    return 5;
  }
  *(void *)&v45[4] = 0;
  uint64_t v46 = 0;
  int v7 = *(_DWORD *)(a2 + 12);
  uint64_t v8 = *(int *)(a2 + 8);
  v43[0] = *(void *)a2;
  v43[1] = v8;
  int v44 = 4;
  *(void *)int v45 = (4 * v7);
  __p = 0;
  int v41 = 0;
  int v42 = 0;
  if (a3 && a4)
  {
    if (a4 >> 59) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 32 * a4;
    __p = operator new(32 * a4);
    int v42 = (char *)__p + 32 * a4;
    bzero(__p, 32 * a4);
    int v41 = (char *)__p + v10;
    uint64_t v11 = *v4;
    if (*v4)
    {
      unint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        int v13 = *(void **)(v11 + 8);
        if (v12 >= 0x40) {
          bzero(v13, 8 * (v12 >> 6));
        }
        if ((v12 & 0x3F) != 0) {
          *((void *)v13 + (v12 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v12 & 0x3F));
        }
      }
    }
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    do
    {
      int v20 = *(uint64_t **)(a3 + 8 * v15);
      if (v20)
      {
        if ((v15 & 0x80000000) == 0)
        {
          uint64_t v21 = **a1;
          if (v21)
          {
            if (*(void *)(v21 + 16) > (unint64_t)v15) {
              *(void *)(*(void *)(v21 + 8) + (((unint64_t)v15 >> 3) & 0x1FFFFFF8)) |= 1 << v15;
            }
          }
        }
        uint64_t v16 = *v20;
        int v17 = *((_DWORD *)v20 + 2);
        int v18 = 4 * *((_DWORD *)v20 + 3);
        int v19 = (char *)__p + v14;
        *(void *)int v19 = v16;
        *((void *)v19 + 1) = v17;
        *((_DWORD *)v19 + 4) = 4;
        *((_DWORD *)v19 + 5) = v18;
        v19[24] = 0;
      }
      ++v15;
      v14 += 32;
    }
    while (a4 != v15);
  }
  else
  {
    uint64_t v23 = *v4;
    if (*v4)
    {
      unint64_t v24 = *(void *)(v23 + 16);
      if (v24)
      {
        int v25 = *(void **)(v23 + 8);
        if (v24 >= 0x40) {
          bzero(v25, 8 * (v24 >> 6));
        }
        if ((v24 & 0x3F) != 0) {
          *((void *)v25 + (v24 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v24 & 0x3F));
        }
      }
    }
  }
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  v51[3] = 0;
  v52[3] = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  unint64_t v56 = (void (**)(void **))&unk_1ED5182B8;
  p_p = (void **)v43;
  int v58 = &v46;
  int v59 = (void **)&v56;
  std::__function::__value_func<gcl::gpcc::ArrayBuffer ()(unsigned long)>::swap[abi:ne180100](&v56, v51);
  if (v59 == (void **)&v56)
  {
    v56[4]((void **)&v56);
  }
  else if (v59)
  {
    (*((void (**)(void))*v59 + 5))();
  }
  unint64_t v56 = (void (**)(void **))&unk_1ED518310;
  p_p = &__p;
  int v58 = &v46;
  int v59 = (void **)&v56;
  std::__function::__value_func<gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::swap[abi:ne180100](&v56, v52);
  if (v59 == (void **)&v56)
  {
    v56[4]((void **)&v56);
  }
  else if (v59)
  {
    (*((void (**)(void))*v59 + 5))();
  }
  unint64_t v56 = (void (**)(void **))&unk_1ED518368;
  p_p = (void **)&v46;
  int v59 = (void **)&v56;
  std::__function::__value_func<void ()(int,unsigned long)>::swap[abi:ne180100](&v56, v53);
  if (v59 == (void **)&v56)
  {
    v56[4]((void **)&v56);
  }
  else if (v59)
  {
    (*((void (**)(void))*v59 + 5))();
  }
  unint64_t v26 = *a1;
  unint64_t v27 = (*a1)[3];
  unint64_t v39 = 0;
  uint64_t v28 = *v26;
  for (i = (const char *)v26[1]; *v26; uint64_t v28 = *v26)
  {
    if (i)
    {
      unsigned int v30 = gcl::gpcc::Decoder::Impl::decode((gcl::gpcc::Decoder::Impl *)v28, i, v27, &v39, (const gcl::gpcc::Decoder::Delegate *)v48);
      if (v30)
      {
        *((_DWORD *)*a1 + 14) = v46;
        if (v30 >= 5) {
          uint64_t v22 = 5;
        }
        else {
          uint64_t v22 = v30;
        }
        gcl::gpcc::Decoder::Delegate::~Delegate((gcl::gpcc::Decoder::Delegate *)v48);
        uint64_t v37 = (char *)__p;
        if (__p) {
          goto LABEL_58;
        }
        return v22;
      }
      unint64_t v31 = v39;
      unint64_t v26 = *a1;
      if (!v39) {
        goto LABEL_57;
      }
    }
    else
    {
      unint64_t v39 = 0;
      uint64_t v33 = (_OWORD *)(v28 + 216);
      unint64_t v32 = *(_DWORD **)(v28 + 216);
      if (!v32) {
        goto LABEL_57;
      }
      int v34 = *(_DWORD *)(v28 + 212);
      if (v34 >= 1)
      {
        for (int j = 0; j < v34; ++j)
        {
          int v36 = v32[1];
          *v32 += *(_DWORD *)(v28 + 188);
          v32[1] = v36 + *(_DWORD *)(v28 + 192);
          v32[2] += *(_DWORD *)(v28 + 196);
          unint64_t v32 = (_DWORD *)((char *)v32 + *(int *)(v28 + 236));
          int v34 = *(_DWORD *)(v28 + 212);
        }
      }
      if (v54)
      {
        int v47 = *(_DWORD *)(v28 + 184);
        unint64_t v56 = (void (**)(void **))v34;
        (*(void (**)(uint64_t, int *, void (***)(void **)))(*(void *)v54 + 48))(v54, &v47, &v56);
      }
      *uint64_t v33 = 0u;
      v33[1] = 0u;
      unint64_t v31 = v39;
      unint64_t v26 = *a1;
      if (!v39)
      {
LABEL_57:
        uint64_t v22 = 0;
        *((_DWORD *)v26 + 14) = v46;
        gcl::gpcc::Decoder::Delegate::~Delegate((gcl::gpcc::Decoder::Delegate *)v48);
        uint64_t v37 = (char *)__p;
        if (!__p) {
          return v22;
        }
        goto LABEL_58;
      }
    }
    v27 -= v31;
    if (v27) {
      i += v31;
    }
    else {
      int i = 0;
    }
    unint64_t v39 = 0;
  }
  *((_DWORD *)v26 + 14) = v46;
  uint64_t v22 = 5;
  gcl::gpcc::Decoder::Delegate::~Delegate((gcl::gpcc::Decoder::Delegate *)v48);
  uint64_t v37 = (char *)__p;
  if (__p)
  {
LABEL_58:
    int v41 = v37;
    operator delete(v37);
  }
  return v22;
}

void sub_18A452C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_0,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::~__func()
{
}

void *std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_0,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1ED518208;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_0,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED518208;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_0,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4 = *a3;
  int v5 = *(char ***)(a1 + 8);
  int v7 = *v5;
  unint64_t v6 = v5[1];
  unint64_t v8 = (v6 - *v5) >> 4;
  if (v8 <= v4)
  {
    unint64_t v9 = v4 + 1;
    unint64_t v10 = v4 + 1 - v8;
    if (v4 + 1 <= v8)
    {
      if (v4 + 1 < v8) {
        v5[1] = &v7[16 * v9];
      }
    }
    else
    {
      unint64_t v12 = v5[2];
      if (v10 <= (v12 - v6) >> 4)
      {
        int v20 = &v6[16 * v10];
        do
        {
          *(void *)unint64_t v6 = 0;
          *((void *)v6 + 1) = 0x800000001;
          v6 += 16;
        }
        while (v6 != v20);
        v5[1] = v20;
      }
      else
      {
        if (v9 >> 60) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = v12 - v7;
        unint64_t v14 = (v12 - v7) >> 3;
        if (v14 <= v9) {
          unint64_t v14 = v4 + 1;
        }
        if (v13 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v16 = (char *)operator new(16 * v15);
        int v17 = &v16[16 * v8];
        int v18 = &v16[16 * v9];
        int v19 = v17;
        do
        {
          *(void *)int v19 = 0;
          *((void *)v19 + 1) = 0x800000001;
          v19 += 16;
        }
        while (v19 != v18);
        if (v6 != v7)
        {
          do
          {
            *((_OWORD *)v17 - 1) = *((_OWORD *)v6 - 1);
            v17 -= 16;
            v6 -= 16;
          }
          while (v6 != v7);
          unint64_t v6 = v7;
        }
        uint64_t *v5 = v17;
        v5[1] = v18;
        v5[2] = &v16[16 * v15];
        if (v6) {
          operator delete(v6);
        }
      }
      int v7 = **(char ***)(a1 + 8);
    }
  }
  uint64_t v21 = &v7[16 * v4];
  *(_DWORD *)uint64_t v21 = *(_DWORD *)a2 - 1835492204;
  *(void *)(v21 + 4) = *(void *)(a2 + 4);
  *((_DWORD *)v21 + 3) = *(_DWORD *)(a2 + 12);
  return 0;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_0,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4gpcc7Decoder13parseMetadataEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4mgcl4gpcc7Decoder13parseMetadataEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4gpcc7Decoder13parseMetadataEvE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4gpcc7Decoder13parseMetadataEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_0,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::target_type()
{
}

void std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_1,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::~__func()
{
}

void *std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_1,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1ED518260;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_1,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED518260;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_1,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  **(_DWORD **)(a1 + 8) += *(_DWORD *)(a4 + 24);
  return 0;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_1,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4gpcc7Decoder13parseMetadataEvE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4mgcl4gpcc7Decoder13parseMetadataEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4gpcc7Decoder13parseMetadataEvE3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4gpcc7Decoder13parseMetadataEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_1,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::target_type()
{
}

void std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::~__func()
{
}

__n128 std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1ED5182B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ED5182B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(uint64_t **)(result + 8);
  uint64_t v3 = **(void **)(result + 16);
  uint64_t v4 = *v2;
  unint64_t v5 = v2[1];
  int v6 = *((_DWORD *)v2 + 4);
  int v7 = *((_DWORD *)v2 + 5);
  uint64_t v8 = v2[3];
  unint64_t v9 = 3 * v3;
  uint64_t v10 = v4 + v3 * v7;
  BOOL v11 = v4 == 0;
  if (v4) {
    unint64_t v12 = v5 - v9;
  }
  else {
    unint64_t v12 = v5;
  }
  if (v11) {
    uint64_t v10 = 0;
  }
  if (v5 < v9)
  {
    unint64_t v12 = 0;
    uint64_t v10 = 0;
  }
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v12;
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 20) = v7;
  *(void *)(a2 + 24) = v8;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::target_type()
{
}

void std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1ED518310;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ED518310;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = **(void **)(result + 16);
  uint64_t v5 = **(void **)(result + 8) + 32 * *a3;
  uint64_t v6 = *(void *)v5;
  unint64_t v7 = *(void *)(v5 + 8);
  int v8 = *(_DWORD *)(v5 + 16);
  int v9 = *(_DWORD *)(v5 + 20);
  uint64_t v10 = *(void *)(v5 + 24);
  unint64_t v11 = v4 * *(int *)(a2 + 8);
  uint64_t v12 = v6 + v4 * v9;
  BOOL v13 = v6 == 0;
  if (v6) {
    unint64_t v14 = v7 - v11;
  }
  else {
    unint64_t v14 = v7;
  }
  if (v13) {
    uint64_t v12 = 0;
  }
  BOOL v15 = v7 >= v11;
  if (v7 >= v11) {
    unint64_t v16 = v14;
  }
  else {
    unint64_t v16 = 0;
  }
  if (!v15) {
    uint64_t v12 = 0;
  }
  *(void *)a4 = v12;
  *(void *)(a4 + 8) = v16;
  *(_DWORD *)(a4 + 16) = v8;
  *(_DWORD *)(a4 + 20) = v9;
  *(void *)(a4 + 24) = v10;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::target_type()
{
}

void std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2>,void ()(int,unsigned long)>::~__func()
{
}

void *std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2>,void ()(int,unsigned long)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1ED518368;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2>,void ()(int,unsigned long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED518368;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2>,void ()(int,unsigned long)>::operator()(uint64_t result, uint64_t a2, void *a3)
{
  **(void **)(result + 8) += *a3;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2>,void ()(int,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_2") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_2")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2>,void ()(int,unsigned long)>::target_type()
{
}

uint64_t geo::codec::VectorTile::transitSystemInfoForFeatureID(geo::codec::VectorTile *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 160);
  uint64_t v3 = *((void *)this + 161) - v2;
  if (!v3) {
    return 0;
  }
  unint64_t v4 = v3 / 104;
  if (v4 <= 1) {
    unint64_t v4 = 1;
  }
  for (int i = (unsigned int *)(v2 + 84); *(void *)(i - 11) != a2; i += 26)
  {
    if (!--v4) {
      return 0;
    }
  }
  unint64_t v7 = *i;
  uint64_t v8 = *((void *)this + 164);
  unint64_t v9 = 0x8E38E38E38E38E39 * ((*((void *)this + 165) - v8) >> 3);
  uint64_t v10 = v8 + 72 * v7;
  if (v9 <= v7) {
    return 0;
  }
  else {
    return v10;
  }
}

float geo::codec::VectorTile::calculateBuildingTileBound(geo::codec::VectorTile *this, double a2, double a3, float32x4_t a4, double a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  unint64_t v9 = (float **)geo::codec::VectorTile::_tileBoundsForBuildings(this, a2, a3, a4, a5, a6, a7, a8);
  unint64_t v11 = *v9;
  uint64_t v12 = v9[1];
  if (*v9 != v12)
  {
    float result = *((float *)this + 620);
    float v13 = *((float *)this + 622);
    float v14 = *((float *)this + 621);
    float v15 = *((float *)this + 623);
    do
    {
      float result = fminf(*v11, result);
      *((float *)this + 620) = result;
      float v13 = fmaxf(v13, v11[2]);
      *((float *)this + 622) = v13;
      float v14 = fminf(v11[1], v14);
      *((float *)this + 621) = v14;
      float v15 = fmaxf(v15, v11[3]);
      *((float *)this + 623) = v15;
      v11 += 4;
    }
    while (v11 != v12);
  }
  return result;
}

void std::__tree<std::__value_type<unsigned char,std::vector<unsigned long long>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned long long>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned long long>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned long long>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned long long>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned long long>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned long long>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned long long>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned long long>>>>::destroy(a1, a2[1]);
    unint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void std::vector<GeoCodecs3DBuildingFeature,geo::StdAllocator<GeoCodecs3DBuildingFeature,geo::codec::Allocator>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    while (1)
    {
      uint64_t v5 = *(void *)(v4 - 32);
      if (v5)
      {
        *(void *)(v4 - 24) = v5;
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v4 - 8) + 40))(*(void *)(v4 - 8), v5, *(void *)(v4 - 16) - v5);
      }
      uint64_t v6 = *(std::__shared_weak_count **)(v4 - 80);
      if (v6)
      {
        if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      unint64_t v7 = *(std::__shared_weak_count **)(v4 - 104);
      if (v7) {
        goto LABEL_9;
      }
LABEL_3:
      v4 -= 112;
      if (v4 == a2) {
        goto LABEL_12;
      }
    }
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    unint64_t v7 = *(std::__shared_weak_count **)(v4 - 104);
    if (!v7) {
      goto LABEL_3;
    }
LABEL_9:
    std::__shared_weak_count::__release_weak(v7);
    goto LABEL_3;
  }
LABEL_12:
  *(void *)(a1 + 8) = a2;
}

void GeoCodecsRunningTrack::~GeoCodecsRunningTrack(GeoCodecsRunningTrack *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 13);
    uint64_t v4 = *((void *)this + 12);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void *)(v3 - 40);
        if (v5)
        {
          *(void *)(v3 - 32) = v5;
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v3 - 16) + 40))(*(void *)(v3 - 16), v5, *(void *)(v3 - 24) - v5);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      uint64_t v4 = *((void *)this + 12);
    }
    *((void *)this + 13) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 15) + 40))(*((void *)this + 15), v4, *((void *)this + 14) - v4);
  }
  uint64_t v6 = *((void *)this + 6);
  if (v6)
  {
    *((void *)this + 7) = v6;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 9) + 40))(*((void *)this + 9), v6, *((void *)this + 8) - v6);
  }
}

void geo::read_write_lock::~read_write_lock(pthread_rwlock_t *this)
{
  uint64_t v1 = (geo::read_write_lock *)pthread_rwlock_destroy(this);
  if (v1) {
    geo::read_write_lock::logFailure(v1, (uint64_t)"destruction", v2);
  }
}

void geo::MallocZoneAllocator::~MallocZoneAllocator(geo::MallocZoneAllocator *this)
{
  geo::MallocZoneAllocator::~MallocZoneAllocator(this);

  JUMPOUT(0x18C11F580);
}

{
  pthread_rwlock_t *v2;
  geo::read_write_lock *v3;
  const char *v4;
  NSObject *v6;
  unint64_t v7;
  geo::read_write_lock *v8;
  const char *v9;
  geo::read_write_lock *v10;
  const char *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;

  float v14 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1ED5138C0;
  uint64_t v2 = (pthread_rwlock_t *)((char *)this + 56);
  uint64_t v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 56));
  if (v3) {
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  }
  if (atomic_load((unint64_t *)this + 5))
  {
    uint64_t v6 = *((void *)this + 32);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      unint64_t v7 = atomic_load((unint64_t *)this + 5);
      uint64_t v12 = 134217984;
      float v13 = v7;
      _os_log_impl(&dword_188D96000, v6, OS_LOG_TYPE_INFO, "Destroying zone allocator with %lu allocations still alive", (uint8_t *)&v12, 0xCu);
    }
  }
  else
  {
    malloc_destroy_zone(*((malloc_zone_t **)this + 6));
  }
  os_release(*((void **)this + 32));
  uint64_t v8 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
  if (v8) {
    geo::read_write_lock::logFailure(v8, (uint64_t)"unlock", v9);
  }
  uint64_t v10 = (geo::read_write_lock *)pthread_rwlock_destroy(v2);
  if (v10) {
    geo::read_write_lock::logFailure(v10, (uint64_t)"destruction", v11);
  }
}

void geo::MallocZoneAllocator::reset(geo::MallocZoneAllocator *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (pthread_rwlock_t *)((char *)this + 56);
  *(void *)int v18 = (char *)this + 56;
  uint64_t v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 56));
  if (v3) {
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  }
  if (atomic_load((unint64_t *)this + 5))
  {
    uint64_t v6 = (geo::read_write_lock *)pthread_rwlock_unlock(*(pthread_rwlock_t **)v18);
    if (v6) {
      geo::read_write_lock::logFailure(v6, (uint64_t)"unlock", v7);
    }
    uint64_t v8 = (geo::read_write_lock *)pthread_rwlock_rdlock(v2);
    if (v8) {
      geo::read_write_lock::logFailure(v8, (uint64_t)"read lock", v9);
    }
    uint64_t v10 = *((void *)this + 32);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *((void *)this + 3);
      *(_DWORD *)int v18 = 136315138;
      *(void *)&v18[4] = v11;
      _os_log_impl(&dword_188D96000, v10, OS_LOG_TYPE_INFO, "BasicAllocationTracker(%s)", v18, 0xCu);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO)) {
        goto LABEL_10;
      }
    }
    else if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
LABEL_10:
      uint64_t v12 = *((void *)this + 32);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
LABEL_11:
        float v13 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
        goto LABEL_16;
      }
LABEL_14:
      unint64_t v16 = atomic_load((unint64_t *)this + 5);
      *(_DWORD *)int v18 = 134217984;
      *(void *)&v18[4] = v16;
      _os_log_error_impl(&dword_188D96000, v12, OS_LOG_TYPE_ERROR, "Resetting zone allocator with %lu allocations still alive", v18, 0xCu);
      goto LABEL_11;
    }
    unint64_t v15 = atomic_load((unint64_t *)this + 5);
    *(_DWORD *)int v18 = 134217984;
    *(void *)&v18[4] = v15;
    _os_log_impl(&dword_188D96000, v10, OS_LOG_TYPE_INFO, "\tCount: %zu", v18, 0xCu);
    uint64_t v12 = *((void *)this + 32);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  malloc_destroy_zone(*((malloc_zone_t **)this + 6));
  zone = malloc_create_zone(0, 0);
  *((void *)this + 6) = zone;
  malloc_set_zone_name(zone, *((const char **)this + 1));
  atomic_store(0, (unint64_t *)this + 5);
  float v13 = (geo::read_write_lock *)pthread_rwlock_unlock(*(pthread_rwlock_t **)v18);
LABEL_16:
  if (v13) {
    geo::read_write_lock::logFailure(v13, (uint64_t)"unlock", v14);
  }
}

void sub_18A453A00(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t geo::MallocZoneAllocator::allocationCount(geo::MallocZoneAllocator *this)
{
  uint64_t v2 = (pthread_rwlock_t *)((char *)this + 56);
  uint64_t v3 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)((char *)this + 56));
  if (v3) {
    geo::read_write_lock::logFailure(v3, (uint64_t)"read lock", v4);
  }
  unint64_t v5 = atomic_load((unint64_t *)this + 5);
  uint64_t v6 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
  if (v6) {
    geo::read_write_lock::logFailure(v6, (uint64_t)"unlock", v7);
  }
  return v5;
}

size_t geo::MallocZoneAllocator::allocationSize(malloc_zone_t **this)
{
  malloc_zone_statistics(this[6], &v2);
  return v2.size_allocated;
}

void geo::read_write_lock::logFailure(geo::read_write_lock *this, uint64_t a2, const char *a3)
{
  int v4 = (int)this;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB2A0940, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB2A0940))
  {
    _MergedGlobals_353 = (uint64_t)os_log_create("com.apple.GeoStdLib", "Locking");
    __cxa_guard_release(&qword_1EB2A0940);
  }
  unint64_t v5 = _MergedGlobals_353;
  if (os_log_type_enabled((os_log_t)_MergedGlobals_353, OS_LOG_TYPE_FAULT))
  {
    int v6 = 136315394;
    uint64_t v7 = a2;
    __int16 v8 = 1024;
    int v9 = v4;
    _os_log_fault_impl(&dword_188D96000, v5, OS_LOG_TYPE_FAULT, "Read/write lock %s resulted in non-zero value %d", (uint8_t *)&v6, 0x12u);
  }
}

void sub_18A453D10(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void geo::write_lock_guard::~write_lock_guard(pthread_rwlock_t **this)
{
  uint64_t v1 = (geo::read_write_lock *)pthread_rwlock_unlock(*this);
  if (v1) {
    geo::read_write_lock::logFailure(v1, (uint64_t)"unlock", v2);
  }
}

void geo::read_lock_guard::~read_lock_guard(pthread_rwlock_t **this)
{
  uint64_t v1 = (geo::read_write_lock *)pthread_rwlock_unlock(*this);
  if (v1) {
    geo::read_write_lock::logFailure(v1, (uint64_t)"unlock", v2);
  }
}

uint64_t geo::codec::ECEFDequantizer::readInfo(uint64_t a1, void *a2, int a3)
{
  uint64_t v4 = a2[6];
  unint64_t v3 = a2[7];
  uint64_t v5 = v4 + 4;
  if (v4 + 4 > v3) {
    return 0;
  }
  uint64_t v7 = a2[5];
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v7 + v4);
  a2[6] = v5;
  uint64_t v8 = v4 + 6;
  if (v4 + 6 > v3) {
    return 0;
  }
  *(_WORD *)a1 = *(_WORD *)(v7 + v5);
  a2[6] = v8;
  uint64_t v9 = v4 + 10;
  if (v4 + 10 > v3) {
    return 0;
  }
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(v7 + v8);
  a2[6] = v9;
  uint64_t v10 = v4 + 12;
  if (v4 + 12 > v3) {
    return 0;
  }
  *(_WORD *)(a1 + 2) = *(_WORD *)(v7 + v9);
  a2[6] = v10;
  uint64_t v11 = v4 + 16;
  if (v4 + 16 > v3) {
    return 0;
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(v7 + v10);
  a2[6] = v11;
  unint64_t v12 = v4 + 18;
  if (v4 + 18 > v3) {
    return 0;
  }
  *(_WORD *)(a1 + 4) = *(_WORD *)(v7 + v11);
  a2[6] = v12;
  if (a3)
  {
    unint64_t v13 = v4 + 22;
    if (v13 > v3) {
      return 0;
    }
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v7 + v12);
    a2[6] = v13;
    *(unsigned char *)(a1 + 57) = 1;
    unint64_t v12 = v13;
  }
  if (v12 + 1 > v3) {
    return 0;
  }
  char v14 = *(unsigned char *)(v7 + v12);
  *(unsigned char *)(a1 + 12) = v14;
  uint64_t v15 = a2[6];
  unint64_t v16 = a2[7];
  a2[6] = v15 + 1;
  uint64_t v17 = v15 + 5;
  if (v15 + 5 > v16) {
    return 0;
  }
  uint64_t v18 = a2[5];
  int v19 = *(_DWORD *)(v18 + v15 + 1);
  *(_DWORD *)(a1 + 28) = v19;
  a2[6] = v17;
  uint64_t v20 = v15 + 9;
  if (v15 + 9 > v16) {
    return 0;
  }
  int v21 = *(_DWORD *)(v18 + v17);
  *(_DWORD *)(a1 + 32) = v21;
  a2[6] = v20;
  unint64_t v22 = v15 + 13;
  if (v22 > v16) {
    return 0;
  }
  int v23 = *(_DWORD *)(v18 + v20);
  *(_DWORD *)(a1 + 36) = v23;
  a2[6] = v22;
  float v24 = (float)(1 << v14);
  *(float *)(a1 + 40) = (float)v19 * v24;
  *(float *)(a1 + 44) = (float)v21 * v24;
  *(float *)(a1 + 48) = (float)v23 * v24;
  *(float *)(a1 + 52) = v24;
  *(unsigned char *)(a1 + 56) = 1;
  return 1;
}

BOOL geo::codec::decodeAttributeSet<GeoCodecsPBTransitSystemInfo>(int a1, uint64_t *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v90 = 0;
  BOOL v91 = 0;
  long long v89 = 0uLL;
  uint64_t v87 = 0;
  int v88 = 0;
  unint64_t v6 = a2[2];
  unint64_t v7 = 8 * a2[1];
  if (v6 + 5 > v7) {
    goto LABEL_17;
  }
  LODWORD(v10) = 0;
  uint64_t v11 = *a2;
  unint64_t v12 = 5;
  do
  {
    unint64_t v13 = 8 - (v6 & 7);
    if (v12 < v13) {
      unint64_t v13 = v12;
    }
    unint64_t v10 = (*(unsigned __int8 *)(v11 + (v6 >> 3)) >> (8 - (v6 & 7) - v13)) & ~(-1 << v13) | (v10 << v13);
    v6 += v13;
    a2[2] = v6;
    v12 -= v13;
  }
  while (v12);
  if (v6 + 5 > v7) {
    goto LABEL_17;
  }
  LODWORD(v14) = 0;
  unint64_t v15 = 5;
  do
  {
    unint64_t v16 = 8 - (v6 & 7);
    if (v15 < v16) {
      unint64_t v16 = v15;
    }
    unint64_t v14 = (*(unsigned __int8 *)(v11 + (v6 >> 3)) >> (8 - (v6 & 7) - v16)) & ~(-1 << v16) | (v14 << v16);
    v6 += v16;
    a2[2] = v6;
    v15 -= v16;
  }
  while (v15);
  if (v6 + 5 > v7) {
    goto LABEL_17;
  }
  LODWORD(v17) = 0;
  unint64_t v18 = 5;
  do
  {
    unint64_t v19 = 8 - (v6 & 7);
    if (v18 < v19) {
      unint64_t v19 = v18;
    }
    unint64_t v17 = (*(unsigned __int8 *)(v11 + (v6 >> 3)) >> (8 - (v6 & 7) - v19)) & ~(-1 << v19) | (v17 << v19);
    v6 += v19;
    a2[2] = v6;
    v18 -= v19;
  }
  while (v18);
  if (v6 + 5 > v7)
  {
LABEL_17:
    BOOL v20 = 0;
    goto LABEL_18;
  }
  LODWORD(v25) = 0;
  unint64_t v26 = 5;
  do
  {
    unint64_t v27 = 8 - (v6 & 7);
    if (v26 < v27) {
      unint64_t v27 = v26;
    }
    unint64_t v25 = (*(unsigned __int8 *)(v11 + (v6 >> 3)) >> (8 - (v6 & 7) - v27)) & ~(-1 << v27) | (v25 << v27);
    v6 += v27;
    a2[2] = v6;
    v26 -= v27;
  }
  while (v26);
  if (!a3)
  {
    BOOL v20 = 1;
    goto LABEL_18;
  }
  uint64_t v85 = 0;
  BOOL v20 = 0;
  unint64_t v81 = a3;
  while (1)
  {
    if (v90)
    {
      geo::codec::copyFeatureStyleAttributes(&v86, v90);
      long long v28 = v86;
      long long v86 = 0uLL;
      int v29 = (std::__shared_weak_count *)*((void *)&v89 + 1);
      long long v89 = v28;
      if (!v29) {
        goto LABEL_42;
      }
LABEL_40:
      if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      goto LABEL_42;
    }
    _ZNSt3__115allocate_sharedB8ne180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v86);
    uint64_t v30 = v86;
    if (a1 != -1)
    {
      unint64_t v31 = *(_DWORD **)v86;
      *unint64_t v31 = 5;
      v31[1] = a1;
      *(unsigned char *)(v30 + 33) = 1;
    }
    *(unsigned char *)(v30 + 34) = a1;
    uint64_t v32 = *((void *)&v86 + 1);
    long long v86 = 0uLL;
    int v29 = (std::__shared_weak_count *)*((void *)&v89 + 1);
    *(void *)&long long v89 = v30;
    *((void *)&v89 + 1) = v32;
    if (v29) {
      goto LABEL_40;
    }
LABEL_42:
    uint64_t v33 = (std::__shared_weak_count *)*((void *)&v86 + 1);
    if (*((void *)&v86 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v86 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    unint64_t v34 = a2[2];
    unint64_t v35 = 8 * a2[1];
    if (v34 + v17 > v35) {
      goto LABEL_18;
    }
    if (v17)
    {
      int v36 = 0;
      uint64_t v37 = *a2;
      unint64_t v38 = v17;
      do
      {
        unint64_t v39 = 8 - (v34 & 7);
        if (v38 < v39) {
          unint64_t v39 = v38;
        }
        int v36 = (*(unsigned __int8 *)(v37 + (v34 >> 3)) >> (8 - (v34 & 7) - v39)) & ~(-1 << v39) | (v36 << v39);
        v34 += v39;
        a2[2] = v34;
        v38 -= v39;
      }
      while (v38);
      if (v36)
      {
        int v40 = 0;
        int v41 = (uint64_t *)v89;
        do
        {
          if (v34 + v10 > v35) {
            goto LABEL_18;
          }
          int v42 = 0;
          if (v10)
          {
            unint64_t v43 = v10;
            do
            {
              unint64_t v44 = 8 - (v34 & 7);
              if (v43 < v44) {
                unint64_t v44 = v43;
              }
              int v42 = (*(unsigned __int8 *)(v37 + (v34 >> 3)) >> (8 - (v34 & 7) - v44)) & ~(-1 << v44) | (v42 << v44);
              v34 += v44;
              a2[2] = v34;
              v43 -= v44;
            }
            while (v43);
          }
          if (v34 + v14 > v35) {
            goto LABEL_18;
          }
          int v45 = 0;
          if (v14)
          {
            unint64_t v46 = v14;
            do
            {
              unint64_t v47 = 8 - (v34 & 7);
              if (v46 < v47) {
                unint64_t v47 = v46;
              }
              int v45 = (*(unsigned __int8 *)(v37 + (v34 >> 3)) >> (8 - (v34 & 7) - v47)) & ~(-1 << v47) | (v45 << v47);
              v34 += v47;
              a2[2] = v34;
              v46 -= v47;
            }
            while (v46);
          }
          unsigned int v48 = *((unsigned __int8 *)v41 + 33);
          uint64_t v49 = *v41;
          if (*((unsigned char *)v41 + 33))
          {
            uint64_t v50 = *((unsigned __int8 *)v41 + 33);
            uint64_t v51 = (int *)(v49 + 4);
            uint64_t v52 = v50;
            do
            {
              if (*(v51 - 1) == v42)
              {
                *uint64_t v51 = v45;
                goto LABEL_54;
              }
              v51 += 2;
              --v52;
            }
            while (v52);
            if (v48 > 0x1F) {
              goto LABEL_54;
            }
          }
          else
          {
            uint64_t v50 = 0;
          }
          unint64_t v53 = (int *)(v49 + 8 * v50);
          *unint64_t v53 = v42;
          v53[1] = v45;
          *((unsigned char *)v41 + 33) = v48 + 1;
LABEL_54:
          ++v40;
        }
        while (v40 != v36);
      }
    }
    if (v34 + v25 > v35) {
      goto LABEL_18;
    }
    if (v25)
    {
      int v54 = 0;
      uint64_t v55 = *a2;
      unint64_t v56 = v25;
      do
      {
        unint64_t v57 = 8 - (v34 & 7);
        if (v56 < v57) {
          unint64_t v57 = v56;
        }
        int v54 = (*(unsigned __int8 *)(v55 + (v34 >> 3)) >> (8 - (v34 & 7) - v57)) & ~(-1 << v57) | (v54 << v57);
        v34 += v57;
        a2[2] = v34;
        v56 -= v57;
      }
      while (v56);
      if (v54) {
        break;
      }
    }
    uint64_t v65 = v89;
    LODWORD(v59) = *(unsigned __int8 *)(v89 + 33);
LABEL_97:
    qsort(*(void **)v65, v59, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    *(void *)&long long v86 = v65;
    *((void *)&v86 + 1) = *((void *)&v89 + 1);
    if (*((void *)&v89 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v89 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v69 = FeatureStyleAttributesSet::insert(a4, (uint64_t *)&v86);
    uint64_t v71 = *v69;
    uint64_t v70 = v69[1];
    if (v70) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v72 = v88;
    uint64_t v87 = v71;
    int v88 = (std::__shared_weak_count *)v70;
    if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
    uint64_t v73 = (std::__shared_weak_count *)*((void *)&v86 + 1);
    if (*((void *)&v86 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v86 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
    uint64_t v75 = v87;
    uint64_t v74 = v88;
    if (v88) {
      atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v76 = a5 + v85 * a6;
    unint64_t v77 = *(std::__shared_weak_count **)(v76 + 32);
    *(void *)(v76 + 24) = v75;
    *(void *)(v76 + 32) = v74;
    if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
    uint64_t v79 = v87;
    int v78 = v88;
    if (v88) {
      atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v80 = v91;
    uint64_t v90 = v79;
    BOOL v91 = v78;
    if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
    BOOL v20 = ++v85 >= v81;
    if (v85 == v81) {
      goto LABEL_18;
    }
  }
  int v58 = 0;
  while (1)
  {
    unint64_t v60 = a2[2];
    if (v60 + v10 > 8 * a2[1]) {
      break;
    }
    int v61 = 0;
    if (v10)
    {
      uint64_t v62 = *a2;
      unint64_t v63 = v10;
      do
      {
        unint64_t v64 = 8 - (v60 & 7);
        if (v63 < v64) {
          unint64_t v64 = v63;
        }
        int v61 = (*(unsigned __int8 *)(v62 + (v60 >> 3)) >> (8 - (v60 & 7) - v64)) & ~(-1 << v64) | (v61 << v64);
        v60 += v64;
        a2[2] = v60;
        v63 -= v64;
      }
      while (v63);
    }
    uint64_t v65 = v89;
    LODWORD(v59) = *(unsigned __int8 *)(v89 + 33);
    if (*(unsigned char *)(v89 + 33))
    {
      uint64_t v66 = *(void *)v89;
      uint64_t v67 = *(unsigned __int8 *)(v89 + 33);
      unint64_t v68 = *(_DWORD **)v89;
      while (*v68 != v61)
      {
        v68 += 2;
        if (!--v67) {
          goto LABEL_84;
        }
      }
      *(unsigned char *)(v89 + 33) = v59 - 1;
      *(void *)unint64_t v68 = *(void *)(v66 + 8 * (v59 - 1));
      uint64_t v59 = *(unsigned __int8 *)(v65 + 33);
      *(void *)(*(void *)v65 + 8 * v59) = -1;
    }
LABEL_84:
    if (++v58 == v54) {
      goto LABEL_97;
    }
  }
LABEL_18:
  int v21 = v88;
  if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  unint64_t v22 = (std::__shared_weak_count *)*((void *)&v89 + 1);
  if (*((void *)&v89 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v89 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  int v23 = v91;
  if (v91 && !atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  return v20;
}

void sub_18A4547E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::decodeIntCompressorArray<int>(void *a1, uint64_t *a2, char a3, char a4, uint64_t a5)
{
  uint64_t v5 = *(int8x16_t **)a5;
  uint64_t v6 = *(void *)(a5 + 8);
  int v16 = 0;
  if (!a2) {
    return 0;
  }
  uint64_t result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v16);
  if (result)
  {
    uint64_t v12 = v16;
    uint64_t v13 = a1[6];
    unint64_t v14 = v13 + v16;
    if (v14 <= a1[7])
    {
      uint64_t v15 = (unsigned __int8 *)(a1[5] + v13);
      a1[6] = v14;
      return mgcl::ints::IntDecompressor<int>::decompress(a2, v15, v12, a3, a4, (v6 - (uint64_t)v5) >> 2, v5) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::decodeIntCompressorArray<int>(void *a1, uint64_t *a2, char a3, char a4, unint64_t a5, int8x16_t *a6)
{
  int v17 = 0;
  if (!a2) {
    return 0;
  }
  uint64_t result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v17);
  if (result)
  {
    uint64_t v13 = v17;
    uint64_t v14 = a1[6];
    unint64_t v15 = v14 + v17;
    if (v15 <= a1[7])
    {
      int v16 = (unsigned __int8 *)(a1[5] + v14);
      a1[6] = v15;
      return mgcl::ints::IntDecompressor<int>::decompress(a2, v16, v13, a3, a4, a5, a6) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::decodeLocalizations()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v125 = v2;
  uint64_t v122 = v3;
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  uint64_t v123 = v1;
  uint64_t v124 = v4;
  v4[1] = *v4;
  v3[1] = *v3;
  if (*(char *)(v1 + 23) < 0)
  {
    **(unsigned char **)uint64_t v1 = 0;
    *(void *)(v1 + 8) = 0;
  }
  else
  {
    *(unsigned char *)uint64_t v1 = 0;
    *(unsigned char *)(v1 + 23) = 0;
  }
  uint64_t v5 = *(Bytef **)v0;
  unint64_t v6 = *(void *)(v0 + 8) - *(void *)v0;
  bzero(&strm, 0x70uLL);
  strm.next_in = v5;
  strm.avail_in = v6;
  unint64_t v7 = (geo::codec::Allocator *)inflateInit2_(&strm, 31, "1.2.12", 112);
  uint64_t v8 = (FILE **)MEMORY[0x1E4F143C8];
  if (v7)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "inflateInit returned %d\n", v7);
    goto LABEL_22;
  }
  uint64_t v9 = 2;
  do
  {
    unint64_t v10 = v9;
    v9 *= 2;
  }
  while (v10 < v6);
  uint64_t v11 = geo::codec::Allocator::instance(v7);
  uint64_t v12 = (const char *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v11 + 16))(v11, v10, 8);
  unint64_t v13 = 0;
  while (1)
  {
    strm.next_out = (Bytef *)&__src;
    strm.avail_out = 4096;
    int v16 = (geo::codec::Allocator *)inflate(&strm, 0);
    int v17 = (int)v16;
    if (v16 > 1) {
      goto LABEL_19;
    }
    if (strm.avail_out == 4096) {
      goto LABEL_11;
    }
    size_t v18 = 4096 - strm.avail_out;
    size_t v19 = v10;
    do
    {
      size_t v14 = v19;
      v19 *= 2;
    }
    while (v14 < v18 + v13);
    if (v14 != v10) {
      break;
    }
    size_t v14 = v10;
    uint64_t v15 = (uint64_t)v12;
LABEL_10:
    memcpy((void *)(v15 + v13), &__src, v18);
    unint64_t v10 = v14;
    uint64_t v12 = (const char *)v15;
    v13 += v18;
LABEL_11:
    if (v17)
    {
      inflateEnd(&strm);
      uint64_t v8 = (FILE **)MEMORY[0x1E4F143C8];
      if (v13 < 4 || strncmp(v12, "VLOC", 4uLL)) {
        goto LABEL_22;
      }
      uint64_t v25 = v125;
      (*(void (**)(uint64_t, const char *, unint64_t))(*(void *)v125 + 16))(v125, v12, v13);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 40))(v25, 4);
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v25 + 48))(&__src, v25);
      if (*(char *)(v123 + 23) < 0) {
        operator delete(*(void **)v123);
      }
      *(_OWORD *)uint64_t v123 = __src;
      *(void *)(v123 + 16) = v130;
      unint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v125 + 56))(v125);
      if (v26 > 0x10000)
      {
        uint64_t v27 = v123;
        if (*(char *)(v123 + 23) >= 0) {
          long long v28 = (const char *)v123;
        }
        else {
          long long v28 = *(const char **)v123;
        }
        int v29 = (geo::codec::Allocator *)fprintf((FILE *)*MEMORY[0x1E4F143C8], "Tile (%s) contains too many localization labels (%zu)", v28, v26);
        if (v12)
        {
          uint64_t v30 = geo::codec::Allocator::instance(v29);
          (*(void (**)(uint64_t, const char *, void))(*(void *)v30 + 40))(v30, v12, 0);
          uint64_t v27 = v123;
        }
        MEMORY[0x18C11F1C0](v27, "");
        return 0;
      }
      if (v26)
      {
        unint64_t v31 = (v122[1] - *v122) >> 5;
        if (v26 <= v31)
        {
          if (v26 < v31) {
            v122[1] = &(*v122)[32 * v26];
          }
        }
        else
        {
          std::vector<GeoCodecsLocalizationTableEntry,geo::StdAllocator<GeoCodecsLocalizationTableEntry,geo::codec::Allocator>>::__append((uint64_t)v122, v26 - v31);
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v125 + 32))(v125))
        {
          size_t v33 = 0;
          uint64_t v34 = 0;
          unint64_t v121 = 0;
          int v35 = 0;
          int v119 = v124 + 3;
          while (1)
          {
            int v36 = *v122;
            if (v33 >= (v122[1] - *v122) >> 5) {
              std::vector<zilch::GeoCoordinates>::__throw_out_of_range[abi:ne180100]();
            }
            unint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v125 + 56))(v125);
            unint64_t v38 = &v36[32 * v33];
            *(void *)unint64_t v38 = v37;
            if (*(char *)(v123 + 23) >= 0) {
              unint64_t v39 = (void *)v123;
            }
            else {
              unint64_t v39 = *(void **)v123;
            }
            *((void *)v38 + 2) = v39;
            v38[24] &= ~1u;
            if (!((v37 >= v121) | v35 & 1))
            {
              if (*(char *)(v123 + 23) >= 0) {
                int v40 = (const char *)v123;
              }
              else {
                int v40 = *(const char **)v123;
              }
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "Localization tile %s is not in sorted order!", v40);
              unint64_t v37 = *(void *)v38;
              int v35 = 1;
            }
            unint64_t v121 = v37;
            (*(void (**)(uint64_t))(*(void *)v125 + 56))(v125);
            size_t v126 = 0;
            uint64_t v127 = 0;
            (*(void (**)(uint64_t, const char **, size_t *))(*(void *)v125 + 64))(v125, &v127, &v126);
            int v41 = v127;
            size_t v42 = strnlen(v127, v126);
            (*(void (**)(uint64_t, void))(*(void *)v125 + 40))(v125, (int)v42 + 1);
            if (v42 + 1 < v126) {
              size_t v43 = v42 + 1;
            }
            else {
              size_t v43 = v126;
            }
            size_t v44 = strlen(v41);
            if (v44 >= 0x7FFFFFFFFFFFFFF8) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            size_t v45 = v44;
            if (v44 >= 0x17)
            {
              uint64_t v59 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v44 | 7) != 0x17) {
                uint64_t v59 = v44 | 7;
              }
              uint64_t v60 = v59 + 1;
              p_z_stream strm = (Bytef *)operator new(v59 + 1);
              *(void *)&strm.avail_in = v45;
              strm.total_in = v60 | 0x8000000000000000;
              strm.next_in = p_strm;
            }
            else
            {
              HIBYTE(strm.total_in) = v44;
              p_z_stream strm = (Bytef *)&strm;
              if (!v44)
              {
                LOBYTE(strm.next_in) = 0;
                unint64_t v47 = &v36[32 * v33 + 8];
                if (!v43) {
                  goto LABEL_78;
                }
                goto LABEL_58;
              }
            }
            memmove(p_strm, v41, v45);
            p_strm[v45] = 0;
            unint64_t v47 = &v36[32 * v33 + 8];
            if (!v43)
            {
LABEL_78:
              *(void *)unint64_t v47 = -1;
              if (SHIBYTE(strm.total_in) < 0) {
                goto LABEL_153;
              }
              goto LABEL_154;
            }
LABEL_58:
            int v120 = v35;
            *(void *)unint64_t v47 = v34;
            if ((strm.total_in & 0x8000000000000000) == 0) {
              next_in = &strm;
            }
            else {
              next_in = strm.next_in;
            }
            if ((strm.total_in & 0x8000000000000000) == 0) {
              uint64_t total_in_high = HIBYTE(strm.total_in);
            }
            else {
              uint64_t total_in_high = *(void *)&strm.avail_in;
            }
            uint64_t v50 = *v124;
            uint64_t v51 = v124[1];
            unint64_t v52 = (unint64_t)v124[2];
            if (total_in_high < 1)
            {
              int v61 = *v124;
              int v35 = v120;
              goto LABEL_109;
            }
            if ((uint64_t)(v52 - (void)v51) >= total_in_high)
            {
              uint64_t v62 = v124[1];
              uint64_t v63 = total_in_high;
              unint64_t v64 = next_in;
              uint64_t v65 = v62;
              int v35 = v120;
              do
              {
                if (v65) {
                  *uint64_t v65 = *v64;
                }
                ++v64;
                ++v65;
                ++v62;
                --v63;
              }
              while (v63);
              v124[1] = v65;
              goto LABEL_108;
            }
            unint64_t v53 = (unsigned char *)(v51 - v50);
            if (v51 - v50 + total_in_high < 0) {
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v54 = v52 - (void)v50;
            unint64_t v55 = 2 * (v52 - (void)v50);
            int v117 = (unsigned char *)(v51 - v50 + total_in_high);
            if (v55 <= (unint64_t)v117) {
              unint64_t v55 = v51 - v50 + total_in_high;
            }
            if (v54 >= 0x3FFFFFFFFFFFFFFFLL) {
              uint64_t v56 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v56 = v55;
            }
            if (v56)
            {
              uint64_t v57 = v56;
              uint64_t v58 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v119 + 16))(*v119, v56, 1);
              uint64_t v56 = v57;
              unint64_t v53 = (unsigned char *)(v51 - v50);
            }
            else
            {
              uint64_t v58 = 0;
            }
            int v61 = &v53[v58];
            uint64_t v66 = &v53[v58 + total_in_high];
            uint64_t v67 = total_in_high;
            unint64_t v68 = &v53[v58];
            do
            {
              if (v68) {
                *unint64_t v68 = *next_in;
              }
              ++v68;
              ++next_in;
              --v67;
            }
            while (v67);
            unint64_t v69 = *v124;
            if (*v124 != v51)
            {
              unint64_t v70 = v51 - v69;
              if ((unint64_t)(v51 - v69) < 0x20)
              {
                uint64_t v71 = v51;
                do
                {
LABEL_98:
                  char v76 = *--v71;
                  *--int v61 = v76;
                }
                while (v71 != v69);
                goto LABEL_99;
              }
              uint64_t v71 = v51;
              if ((unint64_t)&v50[-v58] < 0x20) {
                goto LABEL_98;
              }
              uint64_t v71 = &v51[-(v70 & 0xFFFFFFFFFFFFFFE0)];
              v61 -= v70 & 0xFFFFFFFFFFFFFFE0;
              unint64_t v72 = &v53[v58 - 16];
              uint64_t v73 = (long long *)&v53[(void)v50 - 16];
              unint64_t v74 = v70 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v75 = *v73;
                *(v72 - 1) = *(v73 - 1);
                _OWORD *v72 = v75;
                v72 -= 2;
                v73 -= 2;
                v74 -= 32;
              }
              while (v74);
              if (v70 != (v70 & 0xFFFFFFFFFFFFFFE0)) {
                goto LABEL_98;
              }
            }
LABEL_99:
            unint64_t v77 = v124[1];
            unint64_t v78 = v77 - v51;
            if (v77 != v51)
            {
              if (v78 < 0x20) {
                goto LABEL_176;
              }
              if ((unint64_t)(total_in_high + v58 - (void)v50) < 0x20) {
                goto LABEL_176;
              }
              v51 += v78 & 0xFFFFFFFFFFFFFFE0;
              v66 += v78 & 0xFFFFFFFFFFFFFFE0;
              uint64_t v79 = &v117[v58 + 16];
              uint64_t v80 = (long long *)&v53[(void)v50 + 16];
              unint64_t v81 = v78 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v82 = *v80;
                *(v79 - 1) = *(v80 - 1);
                *uint64_t v79 = v82;
                v79 += 2;
                v80 += 2;
                v81 -= 32;
              }
              while (v81);
              if (v78 != (v78 & 0xFFFFFFFFFFFFFFE0))
              {
LABEL_176:
                do
                {
                  char v83 = *v51++;
                  *v66++ = v83;
                }
                while (v51 != v77);
              }
            }
            unint64_t v52 = v58 + v56;
            __int16 v84 = *v124;
            *uint64_t v124 = v61;
            v124[1] = v66;
            uint64_t v85 = v124[2];
            uint64_t v51 = v66;
            v124[2] = (char *)v52;
            int v35 = v120;
            if (v84)
            {
              (*(void (**)(void, char *, int64_t))(*(void *)*v119 + 40))(*v119, v84, v85 - v84);
LABEL_108:
              int v61 = *v124;
              uint64_t v51 = v124[1];
              unint64_t v52 = (unint64_t)v124[2];
            }
LABEL_109:
            if ((unint64_t)v51 >= v52)
            {
              size_t v118 = v33;
              size_t v86 = v43;
              uint64_t v87 = v51 - v61;
              uint64_t v88 = v51 - v61 + 1;
              long long v89 = v124 + 3;
              if (v88 < 0) {
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v90 = v52 - (void)v61;
              unint64_t v91 = 2 * (v52 - (void)v61);
              if (v91 <= v88) {
                unint64_t v91 = v51 - v61 + 1;
              }
              if (v90 >= 0x3FFFFFFFFFFFFFFFLL) {
                uint64_t v92 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v92 = v91;
              }
              int v132 = v124 + 3;
              uint64_t v116 = v34;
              if (v92)
              {
                uint64_t v93 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v119 + 16))(*v119, v92, 1);
                long long v89 = v124 + 3;
                int v94 = (unsigned char *)(v93 + v87);
                *(void *)&long long __src = v93;
                *((void *)&__src + 1) = v93 + v87;
                uint64_t v130 = (char *)(v93 + v87);
                uint64_t v131 = v93 + v92;
                if (v87 != v92) {
                  goto LABEL_130;
                }
              }
              else
              {
                uint64_t v93 = 0;
                int v94 = (unsigned char *)(v51 - v61);
                *(void *)&long long __src = 0;
                *((void *)&__src + 1) = v51 - v61;
                uint64_t v130 = (char *)(v51 - v61);
                uint64_t v131 = 0;
                if (v87) {
                  goto LABEL_130;
                }
              }
              if (v87 < 1)
              {
                if ((unint64_t)(2 * v87) <= 1) {
                  unint64_t v95 = 1;
                }
                else {
                  unint64_t v95 = 2 * v87;
                }
                uint64_t v96 = (*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)*v89 + 16))(*v89, v95, 1);
                int v94 = (unsigned char *)(v96 + (v95 >> 2));
                uint64_t v131 = v96 + v95;
                if (v93) {
                  (*(void (**)(void, uint64_t, int64_t))(*(void *)*v119 + 40))(*v119, v93, v51 - v61);
                }
              }
              else
              {
                v94 -= (unint64_t)v88 >> 1;
              }
LABEL_130:
              if (v94) {
                *int v94 = 0;
              }
              int v97 = v94 + 1;
              uint64_t v130 = v94 + 1;
              int v98 = *v124;
              size_t v43 = v86;
              if (*v124 != v51)
              {
                unint64_t v99 = v51 - v98;
                size_t v33 = v118;
                if ((unint64_t)(v51 - v98) < 0x20 || (unint64_t)(v51 - v94) < 0x20)
                {
                  int v100 = v51;
                  int v101 = v94;
                }
                else
                {
                  int v100 = &v51[-(v99 & 0xFFFFFFFFFFFFFFE0)];
                  int v101 = &v94[-(v99 & 0xFFFFFFFFFFFFFFE0)];
                  size_t v102 = v94 - 16;
                  int v103 = (long long *)(v51 - 16);
                  unint64_t v104 = v99 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    long long v105 = *v103;
                    *(v102 - 1) = *(v103 - 1);
                    *size_t v102 = v105;
                    v102 -= 2;
                    v103 -= 2;
                    v104 -= 32;
                  }
                  while (v104);
                  if (v99 == (v99 & 0xFFFFFFFFFFFFFFE0))
                  {
LABEL_142:
                    int v97 = v130;
                    int v94 = v101;
                    goto LABEL_143;
                  }
                }
                do
                {
                  char v106 = *--v100;
                  *--int v101 = v106;
                }
                while (v100 != v98);
                goto LABEL_142;
              }
              size_t v33 = v118;
LABEL_143:
              *((void *)&__src + 1) = v94;
              int v107 = v124[1];
              if (v107 != v51)
              {
                do
                {
                  if (v97) {
                    *int v97 = *v51;
                  }
                  ++v51;
                  ++v97;
                }
                while (v51 != v107);
                int v94 = (unsigned char *)*((void *)&__src + 1);
              }
              uint64_t v108 = *v124;
              *uint64_t v124 = v94;
              v124[1] = v97;
              int v109 = v124[2];
              v124[2] = (char *)v131;
              if (v108) {
                (*(void (**)(void, char *, int64_t))(*(void *)*v132 + 40))(*v132, v108, v109 - v108);
              }
              int v35 = v120;
              uint64_t v34 = v116;
              goto LABEL_152;
            }
            if (v61) {
              *uint64_t v51 = 0;
            }
            v124[1] = v51 + 1;
LABEL_152:
            v34 += v43;
            if (SHIBYTE(strm.total_in) < 0) {
LABEL_153:
            }
              operator delete(strm.next_in);
LABEL_154:
            ++v33;
            if (((*(uint64_t (**)(uint64_t))(*(void *)v125 + 32))(v125) & 1) == 0) {
              goto LABEL_157;
            }
          }
        }
        LOBYTE(v35) = 0;
        size_t v33 = 0;
LABEL_157:
        if (((*(uint64_t (**)(uint64_t))(*(void *)v125 + 24))(v125) & 1) != 0
          || (unint64_t v110 = *v122, v33 != (v122[1] - *v122) >> 5))
        {
          uint64_t v112 = v123;
          if (*(char *)(v123 + 23) >= 0) {
            unint64_t v113 = (const char *)v123;
          }
          else {
            unint64_t v113 = *(const char **)v123;
          }
          uint64_t v114 = (geo::codec::Allocator *)fprintf((FILE *)*MEMORY[0x1E4F143C8], "Localization tile %s could not be fully read!\n", v113);
          v122[1] = *v122;
          if (v12)
          {
            uint64_t v115 = geo::codec::Allocator::instance(v114);
            (*(void (**)(uint64_t, const char *, void))(*(void *)v115 + 40))(v115, v12, 0);
            uint64_t v112 = v123;
          }
          MEMORY[0x18C11F1C0](v112, "");
          return 0;
        }
        if (v35) {
          qsort(v110, v33, 0x20uLL, (int (__cdecl *)(const void *, const void *))geo::codec::decodeLocalizations(std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>> const&,std::string &,std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>&,std::vector<GeoCodecsLocalizationTableEntry,geo::StdAllocator<GeoCodecsLocalizationTableEntry,geo::codec::Allocator>> &,geo::codec::PBDataReaderInterface &)::$_0::__invoke);
        }
        if (v12)
        {
          uint64_t v111 = geo::codec::Allocator::instance((geo::codec::Allocator *)v110);
          (*(void (**)(uint64_t, const char *, void))(*(void *)v111 + 40))(v111, v12, 0);
        }
      }
      else if (v12)
      {
        uint64_t v32 = geo::codec::Allocator::instance(0);
        (*(void (**)(uint64_t, const char *, void))(*(void *)v32 + 40))(v32, v12, 0);
      }
      return 1;
    }
  }
  uint64_t v20 = geo::codec::Allocator::instance(v16);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, const char *, size_t))(*(void *)v20 + 32))(v20, v12, v14);
  if (v15) {
    goto LABEL_10;
  }
  uint64_t v21 = geo::codec::Allocator::instance(0);
  (*(void (**)(uint64_t, const char *, void))(*(void *)v21 + 40))(v21, v12, 0);
  uint64_t v12 = 0;
LABEL_19:
  unint64_t v22 = (geo::codec::Allocator *)inflateEnd(&strm);
  uint64_t v23 = geo::codec::Allocator::instance(v22);
  (*(void (**)(uint64_t, const char *, void))(*(void *)v23 + 40))(v23, v12, 0);
  uint64_t v8 = (FILE **)MEMORY[0x1E4F143C8];
LABEL_22:
  fwrite("Localization tile is not in VLOC format\n", 0x28uLL, 1uLL, *v8);
  return 0;
}

void sub_18A4558B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL geo::codec::chapterReadNullTerminatedString(void *a1, unsigned char *a2, uint64_t a3)
{
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[7];
  unint64_t v5 = v3 + 1;
  if (v3 + 1 > v4) {
    return 0;
  }
  if (v3 < v4)
  {
    unint64_t v7 = 0;
    uint64_t v8 = a1[5];
    while (*(unsigned char *)(v8 + v3))
    {
      if (v7 < a3 - 1) {
        a2[v7++] = *(unsigned char *)(v8 + v3);
      }
      if (v4 == ++v3)
      {
        unint64_t v3 = v4;
        break;
      }
    }
    unint64_t v5 = v3 + 1;
    a2[v7] = 0;
    unint64_t v9 = a1[7];
    if (v3 + 1 < v9) {
      goto LABEL_13;
    }
LABEL_10:
    a1[6] = v9;
    return *(unsigned char *)(v9 + a1[5] - 1) == 0;
  }
  *a2 = 0;
  unint64_t v9 = a1[7];
  if (v5 >= v9) {
    goto LABEL_10;
  }
LABEL_13:
  a1[6] = v5;
  return 1;
}

uint64_t geo::codec::_createLOD(geo::codec::Allocator *a1, void *a2, char a3, int a4, uint64_t *a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v8 = 1;
  if (!*((void *)a1 + 2)) {
    return v8;
  }
  if (a4) {
    float v14 = 0.00024414;
  }
  else {
    float v14 = 0.00097656;
  }
  unsigned int v207 = 0;
  unsigned int v208 = 0;
  uint64_t v209 = 0;
  int v210 = (geo::codec::Allocator *)geo::codec::Allocator::instance(a1);
  uint64_t v203 = 0;
  unint64_t v204 = 0;
  uint64_t v205 = 0;
  unint64_t v206 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v210);
  uint64_t v15 = geo::codec::Allocator::instance(v206);
  int v198 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 16))(v15, 16 * *((void *)a1 + 5), 8);
  uint64_t v16 = geo::codec::Allocator::instance(v198);
  int v17 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 16))(v16, 0x2000, 8);
  size_t v18 = (float *)v17;
  if (*((void *)a1 + 3))
  {
    uint64_t v19 = geo::codec::Allocator::instance(v17);
    int v17 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 16))(v19, 4096, 8);
    uint64_t v20 = (float *)v17;
  }
  else
  {
    uint64_t v20 = 0;
  }
  BOOL v191 = a5;
  uint64_t v21 = geo::codec::Allocator::instance(v17);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v21 + 16))(v21, 4096, 8);
  uint64_t v23 = (_DWORD *)v22;
  uint64_t v24 = *((void *)a1 + 5);
  if (a6 && *(void *)a6 || a7 && *a7)
  {
    BOOL v25 = 1;
    uint64_t v26 = 0;
    if (!v24) {
      goto LABEL_222;
    }
  }
  else
  {
    BOOL v25 = v191 != 0;
    uint64_t v26 = 0;
    if (!v24) {
      goto LABEL_222;
    }
  }
  float v27 = v14 / (float)(1 << a3);
  unint64_t v28 = *((void *)a1 + 2);
  uint64_t v197 = *((void *)a1 + 4);
  int v29 = (void *)(v197 + 8);
  uint64_t v30 = *((void *)a1 + 5);
  do
  {
    unint64_t v31 = *(v29 - 1);
    if (v31 >= v28 || *v29 + v31 > v28)
    {
      uint64_t v33 = geo::codec::Allocator::instance((geo::codec::Allocator *)v22);
      uint64_t v34 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, void))(*(void *)v33 + 40))(v33, v198, 0);
      uint64_t v35 = geo::codec::Allocator::instance(v34);
      int v36 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _DWORD *, void))(*(void *)v35 + 40))(v35, v23, 0);
      uint64_t v37 = geo::codec::Allocator::instance(v36);
      unint64_t v38 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, float *, void))(*(void *)v37 + 40))(v37, v18, 0);
      if (v20)
      {
        uint64_t v39 = geo::codec::Allocator::instance(v38);
        (*(void (**)(uint64_t, float *, void))(*(void *)v39 + 40))(v39, v20, 0);
      }
      uint64_t v8 = 0;
      goto LABEL_251;
    }
    v26 += *v29;
    v29 += 2;
    --v30;
  }
  while (v30);
  if (!v26) {
    BOOL v25 = 0;
  }
  unsigned int v189 = a7;
  BOOL v190 = a8;
  uint64_t v195 = *((void *)a1 + 5);
  if (v25)
  {
    uint64_t v32 = geo::codec::Allocator::instance((geo::codec::Allocator *)v22);
    uint64_t v196 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v32 + 24))(v32, v26, 4);
  }
  else
  {
    uint64_t v196 = 0;
  }
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 1024;
  int8x16_t v188 = (int8x16_t)xmmword_18A644620;
  uint64_t v43 = 1024;
  while (2)
  {
    uint64_t v199 = v41;
    uint64_t v200 = v40;
    uint64_t v44 = v197 + 16 * v40;
    int v202 = (unsigned int *)(v44 + 8);
    uint64_t v22 = geo::codec::lineArcSplineFlatten((geo::codec *)(*((void *)a1 + 1) + 12 * *(void *)v44), (const GeoCodecsTileCurveVertex *)*(unsigned int *)(v44 + 8), (float *)(*((void *)a1 + 3) + 4 * *(void *)v44), v18, 2 * (int)v43, v27, v20, v23, (float *)v42, (int *)v188.i64[0], v188.i32[2]);
    if (v22 > 0xFFFFFFFC
      || ((int)v22 >= 0 ? (int v45 = v22) : (int v45 = v22 + 1),
          (uint64_t v46 = (v45 >> 1), v47 = *(void *)v202, (int)v42 >= (int)*(void *)v202)
        ? (BOOL v48 = (int)v46 <= (int)v43)
        : (BOOL v48 = 0),
          !v48 || ((v46 | v47) & 0x80000000) != 0))
    {
      while (1)
      {
LABEL_69:
        {
          operator new();
        }
        uint64_t v65 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, float *, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                                           + 40))(geo::codec::Allocator::instance(void)::alloc, v18, 0);
        if (v20)
        {
          uint64_t v66 = geo::codec::Allocator::instance(v65);
          (*(void (**)(uint64_t, float *, void))(*(void *)v66 + 40))(v66, v20, 0);
        }
        {
          operator new();
        }
        uint64_t v67 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                                            + 16))(geo::codec::Allocator::instance(void)::alloc, 16 * v43, 8);
        size_t v18 = (float *)v67;
        if (*((void *)a1 + 3))
        {
          uint64_t v68 = geo::codec::Allocator::instance(v67);
          uint64_t v20 = (float *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v68 + 16))(v68, 8 * v43, 8);
        }
        {
          operator new();
        }
        (*(void (**)(uint64_t, _DWORD *, void))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                          + 40))(geo::codec::Allocator::instance(void)::alloc, v23, 0);
        {
          operator new();
        }
        uint64_t v23 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)geo::codec::Allocator::instance(void)::alloc
                                                                             + 16))(geo::codec::Allocator::instance(void)::alloc, 8 * v42, 8);
        v43 *= 2;
        v42 *= 2;
        uint64_t v22 = geo::codec::lineArcSplineFlatten((geo::codec *)(*((void *)a1 + 1) + 12 * *(void *)v44), (const GeoCodecsTileCurveVertex *)*v202, (float *)(*((void *)a1 + 3) + 4 * *(void *)v44), v18, 2 * (int)v43, v27, v20, v23, (float *)v42, (int *)v188.i64[0], v188.i32[2]);
        if ((int)v22 >= 0) {
          int v69 = v22;
        }
        else {
          int v69 = v22 + 1;
        }
        if (v22 > 0xFFFFFFFC)
        {
          LODWORD(v64) = -1;
          goto LABEL_68;
        }
        uint64_t v70 = *(void *)v202;
        LODWORD(v64) = -1;
        if ((int)v42 < (int)*(void *)v202) {
          goto LABEL_68;
        }
        uint64_t v71 = (v69 >> 1);
        if ((int)v71 > (int)v43 || ((v71 | v70) & 0x80000000) != 0) {
          goto LABEL_68;
        }
        if ((int)v22 < 2) {
          break;
        }
        uint64_t v64 = 0;
        int v72 = 0;
        int v73 = 0;
        if (v20)
        {
          do
          {
            uint64_t v74 = v72;
            uint64_t v75 = v72 + 1;
            while (v71 != v75)
            {
              float32x2_t v76 = vsub_f32(*(float32x2_t *)&v18[2 * v74], *(float32x2_t *)&v18[2 * v75]);
              ++v72;
              ++v75;
              if (vaddv_f32(vmul_f32(v76, v76)) >= 1.0e-10)
              {
                int v77 = v72 - 1;
                *(void *)&v18[2 * v64] = *(void *)&v18[2 * v74];
                v20[v64] = v20[v74];
                if (v73 >= (int)v70) {
                  goto LABEL_87;
                }
                goto LABEL_94;
              }
            }
            int v77 = v71 - 1;
            int v72 = v71;
            *(void *)&v18[2 * v64] = *(void *)&v18[2 * v74];
            v20[v64] = v20[v74];
            if (v73 >= (int)v70) {
              goto LABEL_87;
            }
LABEL_94:
            uint64_t v78 = (int)v70 - (uint64_t)v73;
            uint64_t v79 = &v23[v73];
            while (1)
            {
              uint64_t v22 = *v79;
              if ((int)v22 > v77) {
                break;
              }
              *v79++ = v64;
              ++v73;
              if (!--v78)
              {
                int v73 = v70;
                break;
              }
            }
LABEL_87:
            ++v64;
          }
          while (v72 < (int)v71);
LABEL_110:
          if (v73 != v70) {
            goto LABEL_122;
          }
          goto LABEL_68;
        }
        do
        {
          uint64_t v80 = v72;
          uint64_t v81 = v72 + 1;
          while (v71 != v81)
          {
            float32x2_t v82 = vsub_f32(*(float32x2_t *)&v18[2 * v80], *(float32x2_t *)&v18[2 * v81]);
            ++v72;
            ++v81;
            if (vaddv_f32(vmul_f32(v82, v82)) >= 1.0e-10)
            {
              int v83 = v72 - 1;
              *(void *)&v18[2 * v64] = *(void *)&v18[2 * v80];
              if (v73 >= (int)v70) {
                goto LABEL_98;
              }
              goto LABEL_105;
            }
          }
          int v83 = v71 - 1;
          int v72 = v71;
          *(void *)&v18[2 * v64] = *(void *)&v18[2 * v80];
          if (v73 >= (int)v70) {
            goto LABEL_98;
          }
LABEL_105:
          uint64_t v84 = (int)v70 - (uint64_t)v73;
          uint64_t v85 = &v23[v73];
          while (1)
          {
            uint64_t v22 = *v85;
            if ((int)v22 > v83) {
              break;
            }
            *v85++ = v64;
            ++v73;
            if (!--v84)
            {
              int v73 = v70;
              break;
            }
          }
LABEL_98:
          ++v64;
        }
        while (v72 < (int)v71);
        if (v73 != v70) {
          goto LABEL_122;
        }
LABEL_68:
        if (v64 != -1) {
          goto LABEL_123;
        }
      }
      LODWORD(v64) = 0;
      int v73 = 0;
      goto LABEL_110;
    }
    if ((int)v22 <= 1) {
      goto LABEL_122;
    }
    uint64_t v49 = 0;
    int v50 = 0;
    int v51 = 0;
    if (v20)
    {
      do
      {
        uint64_t v52 = v50;
        uint64_t v53 = v50 + 1;
        while (v46 != v53)
        {
          float32x2_t v54 = vsub_f32(*(float32x2_t *)&v18[2 * v52], *(float32x2_t *)&v18[2 * v53]);
          ++v50;
          ++v53;
          if (vaddv_f32(vmul_f32(v54, v54)) >= 1.0e-10)
          {
            int v55 = v50 - 1;
            *(void *)&v18[2 * v49] = *(void *)&v18[2 * v52];
            v20[v49] = v20[v52];
            if (v51 >= (int)v47) {
              goto LABEL_42;
            }
            goto LABEL_49;
          }
        }
        int v55 = v46 - 1;
        int v50 = v46;
        *(void *)&v18[2 * v49] = *(void *)&v18[2 * v52];
        v20[v49] = v20[v52];
        if (v51 >= (int)v47) {
          goto LABEL_42;
        }
LABEL_49:
        uint64_t v56 = (int)v47 - (uint64_t)v51;
        uint64_t v57 = &v23[v51];
        while (1)
        {
          uint64_t v22 = *v57;
          if ((int)v22 > v55) {
            break;
          }
          *v57++ = v49;
          ++v51;
          if (!--v56)
          {
            int v51 = v47;
            break;
          }
        }
LABEL_42:
        ++v49;
      }
      while (v50 < (int)v46);
    }
    else
    {
      do
      {
        uint64_t v58 = v50;
        uint64_t v59 = v50 + 1;
        while (v46 != v59)
        {
          float32x2_t v60 = vsub_f32(*(float32x2_t *)&v18[2 * v58], *(float32x2_t *)&v18[2 * v59]);
          ++v50;
          ++v59;
          if (vaddv_f32(vmul_f32(v60, v60)) >= 1.0e-10)
          {
            int v61 = v50 - 1;
            *(void *)&v18[2 * v49] = *(void *)&v18[2 * v58];
            if (v51 >= (int)v47) {
              goto LABEL_53;
            }
            goto LABEL_60;
          }
        }
        int v61 = v46 - 1;
        int v50 = v46;
        *(void *)&v18[2 * v49] = *(void *)&v18[2 * v58];
        if (v51 >= (int)v47) {
          goto LABEL_53;
        }
LABEL_60:
        uint64_t v62 = (int)v47 - (uint64_t)v51;
        uint64_t v63 = &v23[v51];
        while (1)
        {
          uint64_t v22 = *v63;
          if ((int)v22 > v61) {
            break;
          }
          *v63++ = v49;
          ++v51;
          if (!--v62)
          {
            int v51 = v47;
            break;
          }
        }
LABEL_53:
        ++v49;
      }
      while (v50 < (int)v46);
    }
    if (v51 == v47)
    {
      if (v49 == -1) {
        goto LABEL_69;
      }
      LODWORD(v64) = v49;
    }
    else
    {
LABEL_122:
      LODWORD(v64) = 0;
    }
LABEL_123:
    size_t v86 = v207;
    uint64_t v87 = v208;
    unint64_t v88 = v208 - v207;
    unint64_t v201 = (int)v64;
    if ((int)v64 < 1) {
      goto LABEL_219;
    }
    uint64_t v89 = 8 * (int)v64;
    if (v209 - (uint64_t)v208 >= v89)
    {
      if (v89 <= 0)
      {
        int v98 = (float *)((char *)v18 + v89);
        unint64_t v99 = &v208[-v89];
        int v100 = v208;
        while (v99 < v208)
        {
          if (v100) {
            *int v100 = *v99;
          }
          ++v99;
          ++v100;
        }
        unsigned int v208 = v100;
        if (v87 != &v87[v89]) {
          uint64_t v22 = (uint64_t)memmove(&v87[v89], v87, -8 * (int)v64);
        }
        if (v98 != v18) {
          uint64_t v22 = (uint64_t)memmove(v87, v18, (char *)v98 - (char *)v18);
        }
      }
      else
      {
        int v94 = v208;
        uint64_t v95 = 8 * (int)v64;
        uint64_t v96 = v18;
        int v97 = v208;
        do
        {
          if (v97) {
            *int v97 = *(unsigned char *)v96;
          }
          uint64_t v96 = (float *)((char *)v96 + 1);
          ++v97;
          ++v94;
          --v95;
        }
        while (v95);
        unsigned int v208 = v97;
      }
    }
    else
    {
      if ((uint64_t)(v88 + v89) < 0) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v90 = 2 * (v209 - (void)v207);
      if (v90 <= v88 + v89) {
        unint64_t v90 = v88 + v89;
      }
      if ((unint64_t)(v209 - (void)v207) >= 0x3FFFFFFFFFFFFFFFLL) {
        uint64_t v91 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v91 = v90;
      }
      if (v91)
      {
        uint64_t v92 = 8 * (int)v64;
        uint64_t v93 = v91;
        uint64_t v22 = (*(uint64_t (**)(geo::codec::Allocator *, uint64_t, uint64_t))(*(void *)v210 + 16))(v210, v91, 1);
        uint64_t v89 = v92;
        unint64_t v88 = v208 - v207;
        uint64_t v91 = v93;
        size_t v86 = v207;
      }
      else
      {
        uint64_t v22 = 0;
      }
      int v101 = (char *)(v22 + v88);
      uint64_t v102 = v89;
      int v103 = v18;
      unint64_t v104 = (unsigned char *)(v22 + v88);
      do
      {
        if (v104) {
          *unint64_t v104 = *(unsigned char *)v103;
        }
        ++v104;
        int v103 = (float *)((char *)v103 + 1);
        --v102;
      }
      while (v102);
      if (v207 != v208)
      {
        uint64_t v105 = v208 - v207;
        if ((unint64_t)(v208 - v207) < 0x20)
        {
          char v106 = v208;
          goto LABEL_160;
        }
        char v106 = v208;
        if ((unint64_t)&v86[-v22] < 0x20) {
          goto LABEL_258;
        }
        char v106 = &v208[-(v105 & 0xFFFFFFFFFFFFFFE0)];
        v101 -= v105 & 0xFFFFFFFFFFFFFFE0;
        int v107 = (_OWORD *)(v22 + v88 - 16);
        uint64_t v108 = &v86[v88 - 16];
        unint64_t v109 = v105 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v110 = *(_OWORD *)v108;
          *(v107 - 1) = *((_OWORD *)v108 - 1);
          *int v107 = v110;
          v107 -= 2;
          v108 -= 32;
          v109 -= 32;
        }
        while (v109);
        if (v105 != (v105 & 0xFFFFFFFFFFFFFFE0))
        {
LABEL_258:
          do
          {
LABEL_160:
            char v111 = *--v106;
            *--int v101 = v111;
          }
          while (v106 != v207);
        }
      }
      uint64_t v112 = v22 + v91;
      unint64_t v113 = v207;
      uint64_t v114 = v209;
      unsigned int v207 = v101;
      unsigned int v208 = (char *)(v22 + v88 + v89);
      uint64_t v209 = v112;
      if (v113) {
        uint64_t v22 = (*(uint64_t (**)(geo::codec::Allocator *, char *, uint64_t))(*(void *)v210 + 40))(v210, v113, v114 - (void)v113);
      }
    }
    if (!*((void *)a1 + 3)) {
      goto LABEL_219;
    }
    uint64_t v115 = 4 * v201;
    uint64_t v116 = v203;
    int v117 = v204;
    uint64_t v118 = v204 - v203;
    if (v205 - (uint64_t)v204 < (uint64_t)(4 * v201))
    {
      unint64_t v194 = v88;
      if (v118 + v115 < 0) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v119 = 2 * (v205 - (void)v203);
      if (v119 <= v118 + v115) {
        unint64_t v119 = v118 + v115;
      }
      if ((unint64_t)(v205 - (void)v203) >= 0x3FFFFFFFFFFFFFFFLL) {
        uint64_t v120 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v120 = v119;
      }
      if (v120)
      {
        uint64_t v121 = v120;
        uint64_t v22 = (*(uint64_t (**)(geo::codec::Allocator *, uint64_t, uint64_t))(*(void *)v206 + 16))(v206, v120, 1);
        uint64_t v115 = 4 * v201;
        uint64_t v120 = v121;
      }
      else
      {
        uint64_t v22 = 0;
      }
      unint64_t v135 = (char *)(v22 + v118);
      uint64_t v136 = v115;
      uint64_t v137 = v20;
      int64_t v138 = (unsigned char *)(v22 + v118);
      do
      {
        if (v138) {
          unsigned char *v138 = (int)*v137;
        }
        ++v138;
        ++v137;
        --v136;
      }
      while (v136);
      if (v203 == v204)
      {
        unint64_t v88 = v194;
      }
      else
      {
        uint64_t v139 = v204 - v203;
        unint64_t v88 = v194;
        if ((unint64_t)(v204 - v203) < 0x20)
        {
          uint64_t v140 = v204;
          goto LABEL_202;
        }
        uint64_t v140 = v204;
        if ((unint64_t)&v203[-v22] < 0x20) {
          goto LABEL_259;
        }
        uint64_t v140 = &v204[-(v139 & 0xFFFFFFFFFFFFFFE0)];
        v135 -= v139 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v141 = (_OWORD *)(v22 + v118 - 16);
        int v142 = (long long *)(v204 - 16);
        unint64_t v143 = v139 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v144 = *v142;
          *(v141 - 1) = *(v142 - 1);
          *unsigned int v141 = v144;
          v141 -= 2;
          v142 -= 2;
          v143 -= 32;
        }
        while (v143);
        if (v139 != (v139 & 0xFFFFFFFFFFFFFFE0))
        {
LABEL_259:
          do
          {
LABEL_202:
            char v145 = *--v140;
            *--unint64_t v135 = v145;
          }
          while (v140 != v203);
        }
      }
      uint64_t v146 = v22 + v120;
      unint64_t v147 = v203;
      uint64_t v148 = v205;
      uint64_t v203 = v135;
      unint64_t v204 = (char *)(v22 + v118 + v115);
      uint64_t v205 = v146;
      if (v147) {
        uint64_t v22 = (*(uint64_t (**)(geo::codec::Allocator *, char *, uint64_t))(*(void *)v206 + 40))(v206, v147, v148 - (void)v147);
      }
      goto LABEL_219;
    }
    if (v115 > 0)
    {
      uint64_t v122 = 16 * v201;
      uint64_t v123 = v204;
      uint64_t v124 = v20;
      uint64_t v125 = v204;
      do
      {
        if (v125) {
          *uint64_t v125 = (int)*v124;
        }
        ++v124;
        ++v125;
        ++v123;
        v122 -= 4;
      }
      while (v122);
      unint64_t v204 = v125;
      goto LABEL_219;
    }
    size_t v126 = &v20[4 * v201];
    uint64_t v127 = v204;
    int v128 = v204;
    int v129 = &v204[-v115];
    uint64_t v130 = v204;
    while (v129 < v204)
    {
      if (v130) {
        *uint64_t v130 = *v129;
      }
      ++v129;
      ++v130;
    }
    uint64_t v131 = &v204[v115];
    unint64_t v204 = v130;
    if (v128 != &v117[v115])
    {
      uint64_t v22 = (uint64_t)memmove(&v128[-(v127 - v131)], v117, v127 - v131);
      size_t v126 = &v20[4 * v201];
      uint64_t v116 = v203;
    }
    int64_t v132 = (char *)v126 - (char *)v20;
    if (v126 != v20)
    {
      unint64_t v133 = v132 - 4;
      if ((unint64_t)(v132 - 4) < 0x1C)
      {
        unint64_t v134 = v20;
        goto LABEL_218;
      }
      if (v117 < (char *)v20 + (v133 & 0xFFFFFFFFFFFFFFFCLL) + 4)
      {
        unint64_t v134 = v20;
        if (v20 < (float *)&v117[(v133 >> 2) + 1]) {
          goto LABEL_218;
        }
      }
      uint64_t v149 = (v133 >> 2) + 1;
      if (v133 < 0x7C)
      {
        uint64_t v150 = 0;
        goto LABEL_213;
      }
      uint64_t v150 = v149 & 0x7FFFFFFFFFFFFFE0;
      uint64_t v151 = (float32x4_t *)(v20 + 16);
      uint64_t v152 = (int8x16_t *)&v116[v118 + 16];
      uint64_t v153 = v149 & 0x7FFFFFFFFFFFFFE0;
      do
      {
        v212.val[3] = (int8x16_t)vcvtq_u32_f32(v151[-1]);
        v212.val[2] = (int8x16_t)vcvtq_u32_f32(v151[-2]);
        v212.val[1] = (int8x16_t)vcvtq_u32_f32(v151[-3]);
        v212.val[0] = (int8x16_t)vcvtq_u32_f32(v151[-4]);
        int8x16_t v154 = vqtbl4q_s8(v212, v188);
        v212.val[3] = (int8x16_t)vcvtq_u32_f32(v151[3]);
        v212.val[2] = (int8x16_t)vcvtq_u32_f32(v151[2]);
        v212.val[1] = (int8x16_t)vcvtq_u32_f32(v151[1]);
        v212.val[0] = (int8x16_t)vcvtq_u32_f32(*v151);
        v152[-1] = v154;
        *uint64_t v152 = vqtbl4q_s8(v212, v188);
        v151 += 8;
        v152 += 2;
        v153 -= 32;
      }
      while (v153);
      if (v149 == v150) {
        goto LABEL_219;
      }
      if ((v149 & 0x18) != 0)
      {
LABEL_213:
        unint64_t v134 = &v20[v149 & 0x7FFFFFFFFFFFFFF8];
        uint64_t v155 = (float32x4_t *)&v20[v150];
        int v156 = &v117[v150];
        uint64_t v157 = v150 - (v149 & 0x7FFFFFFFFFFFFFF8);
        do
        {
          float32x4_t v158 = *v155;
          float32x4_t v159 = v155[1];
          v155 += 2;
          v211.val[1] = (int8x16_t)vcvtq_u32_f32(v159);
          v211.val[0] = (int8x16_t)vcvtq_u32_f32(v158);
          *(void *)int v156 = vqtbl2q_s8(v211, (int8x16_t)xmmword_18A644630).u64[0];
          v156 += 8;
          v157 += 8;
        }
        while (v157);
        v117 += v149 & 0x7FFFFFFFFFFFFFF8;
        if (v149 == (v149 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_219;
        }
      }
      else
      {
        unint64_t v134 = &v20[v150];
        v117 += v150;
      }
      do
      {
LABEL_218:
        float v160 = *v134++;
        *v117++ = (int)v160;
      }
      while (v134 != v126);
    }
LABEL_219:
    unint64_t v161 = (unint64_t *)((char *)v198 + 16 * v200);
    *unint64_t v161 = v88 >> 3;
    v161[1] = v201;
    if (v196) {
      uint64_t v22 = (uint64_t)memcpy((void *)(v196 + 4 * v199), v23, 4 * *(void *)v202);
    }
    uint64_t v41 = *(void *)v202 + v199;
    uint64_t v40 = v200 + 1;
    if (v200 + 1 != v195) {
      continue;
    }
    break;
  }
  a7 = v189;
  a8 = v190;
  uint64_t v26 = v196;
LABEL_222:
  a2[4] = v198;
  uint64_t v162 = geo::codec::Allocator::instance((geo::codec::Allocator *)v22);
  int v163 = (void *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(void *)v162 + 16))(v162, v208 - v207, 8);
  a2[1] = v163;
  uint64_t v164 = (geo::codec::Allocator *)memcpy(v163, v207, v208 - v207);
  a2[2] = (unint64_t)(v208 - v207) >> 3;
  if (*((void *)a1 + 3))
  {
    uint64_t v165 = geo::codec::Allocator::instance(v164);
    unint64_t v166 = (void *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(void *)v165 + 16))(v165, v204 - v203, 8);
    a2[3] = v166;
    uint64_t v164 = (geo::codec::Allocator *)memcpy(v166, v203, v204 - v203);
  }
  if (a6 && *(void *)a6 && v26)
  {
    uint64_t v167 = geo::codec::Allocator::instance(v164);
    **(void **)(a6 + 16) = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v167 + 24))(v167, *(void *)a6, 16);
    unint64_t v168 = (geo::codec::Allocator *)memcpy(**(void ***)(a6 + 16), *(const void **)(a6 + 8), 16 * *(void *)a6);
    uint64_t v169 = geo::codec::Allocator::instance(v168);
    int v170 = (void *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v169 + 24))(v169, *(void *)a6, 8);
    **(void **)(a6 + 24) = v170;
    size_t v171 = *(void *)a6;
    if (*(void *)a6)
    {
      uint64_t v172 = 0;
      unsigned int v173 = v170;
      size_t v174 = *(void *)a6;
      do
      {
        uint64_t v175 = **(void **)(a6 + 16) + v172;
        *(_DWORD *)(v175 + 12) = *(_DWORD *)(v26 + 4 * *(unsigned int *)(v175 + 12));
        *v173++ = v175;
        v172 += 16;
        --v174;
      }
      while (v174);
    }
    qsort(v170, v171, 8uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compare);
  }
  if (a7)
  {
    uint64_t v176 = *a7;
    if (*a7)
    {
      if (v26)
      {
        unsigned int v177 = (_DWORD *)(a7[1] + 12);
        do
        {
          _DWORD *v177 = *(_DWORD *)(v26 + 4 * *v177);
          v177 += 25;
          --v176;
        }
        while (v176);
      }
    }
  }
  if (a8)
  {
    uint64_t v178 = *a8;
    if (*a8 && v26 != 0)
    {
      int v180 = (_DWORD *)(a8[1] + 8);
      do
      {
        *int v180 = *(_DWORD *)(v26 + 4 * *v180);
        v180 += 4;
        --v178;
      }
      while (v178);
    }
  }
  uint64_t v181 = geo::codec::Allocator::instance(v164);
  unsigned int v182 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _DWORD *, void))(*(void *)v181 + 40))(v181, v23, 0);
  uint64_t v183 = geo::codec::Allocator::instance(v182);
  unsigned int v184 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, float *, void))(*(void *)v183 + 40))(v183, v18, 0);
  if (v20)
  {
    uint64_t v185 = geo::codec::Allocator::instance(v184);
    unsigned int v184 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, float *, void))(*(void *)v185 + 40))(v185, v20, 0);
  }
  if (v191 && v26)
  {
    *BOOL v191 = v26;
  }
  else
  {
    uint64_t v186 = geo::codec::Allocator::instance(v184);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v186 + 40))(v186, v26, 0);
  }
  uint64_t v8 = 1;
  if (v203) {
    (*(void (**)(geo::codec::Allocator *, char *, uint64_t))(*(void *)v206 + 40))(v206, v203, v205 - (void)v203);
  }
LABEL_251:
  if (v207) {
    (*(void (**)(geo::codec::Allocator *, char *, uint64_t))(*(void *)v210 + 40))(v210, v207, v209 - (void)v207);
  }
  return v8;
}

void sub_18A45722C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  MEMORY[0x18C11F580](v30, 0x10F1C40DA10AB66);
  std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100](&a30);
  std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v31 - 136));
  _Unwind_Resume(a1);
}

void sub_18A45729C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100](&a30);
  std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v30 - 136));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::decodeGhostPointEncoding(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = a1[2];
  unint64_t v6 = v5 + 1;
  unint64_t v7 = 8 * a1[1];
  if (v5 + 1 > v7)
  {
LABEL_2:
    uint64_t result = 0;
    goto LABEL_3;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(unsigned __int8 *)(*a1 + (v5 >> 3));
  a1[2] = v6;
  if (((v13 >> (~(_BYTE)v5 & 7)) & 1) == 0) {
    return 1;
  }
  uint64_t result = 0;
  if (a2 && a4)
  {
    int v62 = 0;
    if (v5 + 6 > v7) {
      goto LABEL_2;
    }
    int v16 = 0;
    unint64_t v17 = 5;
    do
    {
      unint64_t v18 = 8 - (v6 & 7);
      if (v17 < v18) {
        unint64_t v18 = v17;
      }
      int v16 = (*(unsigned __int8 *)(v12 + (v6 >> 3)) >> (8 - (v6 & 7) - v18)) & ~(-1 << v18) | (v16 << v18);
      v6 += v18;
      a1[2] = v6;
      v17 -= v18;
    }
    while (v17);
    if (v6 + 5 > v7) {
      goto LABEL_2;
    }
    int v19 = 0;
    unint64_t v20 = 5;
    do
    {
      unint64_t v21 = 8 - (v6 & 7);
      if (v20 < v21) {
        unint64_t v21 = v20;
      }
      int v19 = (*(unsigned __int8 *)(v12 + (v6 >> 3)) >> (8 - (v6 & 7) - v21)) & ~(-1 << v21) | (v19 << v21);
      v6 += v21;
      a1[2] = v6;
      v20 -= v21;
    }
    while (v20);
    if (v6 + 5 > v7) {
      goto LABEL_2;
    }
    int v22 = 0;
    unint64_t v23 = 5;
    do
    {
      unint64_t v24 = 8 - (v6 & 7);
      if (v23 < v24) {
        unint64_t v24 = v23;
      }
      int v22 = (*(unsigned __int8 *)(v12 + (v6 >> 3)) >> (8 - (v6 & 7) - v24)) & ~(-1 << v24) | (v22 << v24);
      v6 += v24;
      a1[2] = v6;
      v23 -= v24;
    }
    while (v23);
    if (!BitstreamUnpack(a1, &v62, 5uLL)) {
      goto LABEL_2;
    }
    int v25 = v62;
    unsigned int v61 = 0;
    int v26 = BitstreamUnpackVar32(a1, (int *)&v61);
    uint64_t result = 0;
    if (!v26) {
      goto LABEL_3;
    }
    uint64_t v27 = v61;
    if (!v61) {
      goto LABEL_2;
    }
    *(void *)(a2 + 48) = v61;
    uint64_t v28 = geo::codec::Allocator::instance(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 24))(v28, v27, 32);
    *(void *)(a2 + 56) = result;
    if (result)
    {
      uint64_t v29 = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v29 + 24))(v29, *(void *)(a2 + 40), 16);
      *(void *)(a2 + 64) = result;
      if (result)
      {
        unint64_t v30 = (v16 + 1);
        unint64_t v31 = (v19 + 1);
        unint64_t v32 = (v22 + 1);
        unint64_t v33 = (v25 + 1);
        if (*(void *)(a2 + 40))
        {
          unint64_t v34 = 0;
          do
            *(_OWORD *)(result + 16 * v34++) = xmmword_18A644640;
          while (v34 < *(void *)(a2 + 40));
        }
        uint64_t v35 = 0;
        if (v27 <= 1) {
          unsigned int v36 = 1;
        }
        else {
          unsigned int v36 = v27;
        }
        uint64_t v57 = 32 * v36;
        while (1)
        {
          uint64_t v59 = 0;
          uint64_t v60 = 0;
          unsigned int v58 = 0;
          if (!BitstreamUnpack(a1, (int *)&v60 + 1, v30)) {
            goto LABEL_2;
          }
          if (!BitstreamUnpack(a1, (int *)&v60, v31)) {
            goto LABEL_2;
          }
          if (!BitstreamUnpack(a1, (int *)&v59 + 1, v32)) {
            goto LABEL_2;
          }
          if (!BitstreamUnpackSigned(a1, (int *)&v59, v33)) {
            goto LABEL_2;
          }
          if (!BitstreamUnpackSigned(a1, (int *)&v58, v33)) {
            goto LABEL_2;
          }
          float32x2_t v38 = (float32x2_t)HIDWORD(v60);
          if (HIDWORD(v60) >= a3) {
            goto LABEL_2;
          }
          uint64_t v39 = a4 + ((unint64_t)HIDWORD(v60) << 7);
          float32x2_t v40 = (float32x2_t)v60;
          if (v60 >= *(_DWORD *)(v39 + 100)) {
            goto LABEL_2;
          }
          unint64_t v41 = (*(_DWORD *)(v39 + 96) + v60);
          if (*(void *)(a2 + 40) <= v41) {
            goto LABEL_2;
          }
          float32x2_t v42 = (float32x2_t)HIDWORD(v59);
          uint64_t v43 = *(void *)(a2 + 32);
          if (*(void *)(v43 + 16 * v41 + 8) <= (unint64_t)HIDWORD(v59)) {
            goto LABEL_2;
          }
          unint64_t v44 = *(void *)(v43 + 16 * v41) + HIDWORD(v59);
          if (v44 >= *(void *)(a2 + 16)) {
            goto LABEL_2;
          }
          *(float *)v37.i32 = (float)~(-1 << *(unsigned char *)a2);
          int v45 = *(char **)(a2 + 56);
          float32x2_t v46 = *(float32x2_t *)(*(void *)(a2 + 8) + 8 * v44);
          uint64_t v47 = (float32x2_t *)&v45[v35];
          *uint64_t v47 = vadd_f32(vdiv_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v58, v59)), (float32x2_t)vdup_lane_s32(v37, 0)), v46);
          v47[1] = v38;
          v47[2] = v40;
          v47[3] = v42;
          v35 += 32;
          if (v57 == v35)
          {
            std::stable_sort[abi:ne180100]<GeoCodecsGhostPoint *,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0>(v45, &v45[32 * v27]);
            unint64_t v48 = *(void *)(a2 + 48);
            uint64_t v49 = *(void **)(a2 + 56);
            uint64_t v50 = v49[2] + *(unsigned int *)(a4 + (v49[1] << 7) + 96);
            if (v48 < 2)
            {
              unint64_t v51 = 0;
            }
            else
            {
              unint64_t v51 = 0;
              uint64_t v52 = v49 + 6;
              for (unint64_t i = 1; i < v48; ++i)
              {
                uint64_t v54 = *v52 + *(unsigned int *)(a4 + (*(v52 - 1) << 7) + 96);
                if (v50 != v54)
                {
                  int v55 = (unint64_t *)(*(void *)(a2 + 64) + 16 * v50);
                  *int v55 = v51;
                  v55[1] = i - v51;
                  unint64_t v48 = *(void *)(a2 + 48);
                  uint64_t v50 = v54;
                  unint64_t v51 = i;
                }
                v52 += 4;
              }
            }
            uint64_t v56 = (unint64_t *)(*(void *)(a2 + 64) + 16 * v50);
            *uint64_t v56 = v51;
            v56[1] = v48 - v51;
            uint64_t result = 1;
            break;
          }
        }
      }
    }
  }
LABEL_3:
  if (a2 && (result & 1) == 0)
  {
    if (*(void *)(a2 + 48))
    {
      *(void *)(a2 + 48) = 0;
      if (*(void *)(a2 + 56))
      {
        uint64_t v9 = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
        uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v9 + 40))(v9, *(void *)(a2 + 56), 0);
      }
      *(void *)(a2 + 56) = 0;
      if (*(void *)(a2 + 64))
      {
        uint64_t v10 = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
        (*(void (**)(uint64_t, void, void))(*(void *)v10 + 40))(v10, *(void *)(a2 + 64), 0);
      }
      uint64_t result = 0;
      *(void *)(a2 + 64) = 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void std::stable_sort[abi:ne180100]<GeoCodecsGhostPoint *,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0>(char *a1, char *a2)
{
  unint64_t v4 = (a2 - a1) >> 5;
  if (a2 - a1 <= 4096)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(a1, a2, v4, 0, 0);
  }
  else
  {
    unint64_t v5 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v6 = (a2 - a1) >> 5;
    while (1)
    {
      unint64_t v7 = (long long *)operator new(32 * v6, v5);
      if (v7) {
        break;
      }
      BOOL v8 = v6 > 1;
      v6 >>= 1;
      if (!v8) {
        goto LABEL_5;
      }
    }
    uint64_t v9 = v7;
    std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(a1, a2, v4, v7, v6);
    operator delete(v9);
  }
}

geo::codec::Allocator *geo::codec::freeChapter(geo::codec::Allocator *result, uint64_t a2)
{
  if (result && a2)
  {
    if (*(unsigned char *)a2)
    {
      uint64_t v3 = geo::codec::Allocator::instance(result);
      uint64_t result = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, void))(*(void *)v3 + 40))(v3, *(void *)(a2 + 40), 0);
    }
    unint64_t v4 = *(uint64_t (**)(void))(*(void *)geo::codec::Allocator::instance(result) + 40);
    return (geo::codec::Allocator *)v4();
  }
  return result;
}

void std::stable_sort[abi:ne180100]<GeoCodecsCharacteristicPoint *,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0>(uint64_t a1, char *a2)
{
  unint64_t v4 = 0x8F5C28F5C28F5C29 * ((uint64_t)&a2[-a1] >> 2);
  if ((uint64_t)&a2[-a1] < 12801)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(a1, a2, v4, 0, 0);
  }
  else
  {
    unint64_t v5 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v6 = 0x8F5C28F5C28F5C29 * ((uint64_t)&a2[-a1] >> 2);
    while (1)
    {
      unint64_t v7 = operator new(100 * v6, v5);
      if (v7) {
        break;
      }
      BOOL v8 = v6 > 1;
      v6 >>= 1;
      if (!v8) {
        goto LABEL_5;
      }
    }
    uint64_t v9 = v7;
    std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(a1, a2, v4, (uint64_t)v7, v6);
    operator delete(v9);
  }
}

uint64_t geo::codec::compare(geo::codec *this, const void *a2, const void *a3)
{
  unsigned int v3 = *(_DWORD *)(*(void *)this + 4);
  unsigned int v4 = *(_DWORD *)(*(void *)a2 + 4);
  if (v3 < v4) {
    return 0xFFFFFFFFLL;
  }
  if (v3 > v4) {
    return 1;
  }
  unsigned int v6 = *(_DWORD *)(*(void *)this + 12);
  unsigned int v7 = *(_DWORD *)(*(void *)a2 + 12);
  BOOL v8 = v6 >= v7;
  BOOL v9 = v6 > v7;
  if (v8) {
    return v9;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void geo::codec::sortPointsOnRoad(geo::codec *this, GeoCodecsConnectivityPointOnRoad **a2)
{
}

uint64_t geo::codec::transitLinkPoints(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(_DWORD *)(a1 + 20))
  {
    unint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5 && (unsigned int v7 = std::__shared_weak_count::lock(v5)) != 0)
    {
      BOOL v8 = v7;
      if (*(void *)a1)
      {
        uint64_t v9 = *(void *)(*(void *)a1 + 1400);
        if (v9)
        {
          uint64_t v10 = (void *)(*(void *)(v9 + 32) + 16 * *(unsigned int *)(a1 + 16) + 16 * a2);
          uint64_t v11 = *(void *)(v9 + 8) + 8 * *v10;
          *a3 = v10[1];
          if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            return v11;
          }
        }
        else
        {
          uint64_t v11 = 0;
          *a3 = 0;
          if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            return v11;
          }
        }
      }
      else
      {
        uint64_t v11 = 0;
        if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          return v11;
        }
      }
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v8);
      return v11;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    *a3 = 0;
    return 0;
  }
}

BOOL geo::codec::appendStyleAttributes(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  unint64_t v44 = 0;
  int v45 = 0;
  unsigned int v4 = *(const FeatureStyleAttributes **)a3;
  if (*(void *)a3)
  {
    uint64_t v9 = (std::__shared_weak_count *)operator new(0x40uLL);
    v9->__shared_owners_ = 0;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ED5185C0;
    uint64_t v10 = (void **)&v9[1].__vftable;
    FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)&v9[1], v4);
    unint64_t v44 = v9 + 1;
    int v45 = v9;
    uint64_t v11 = *a1;
    if (*a1)
    {
      uint64_t v12 = *((unsigned __int8 *)v11 + 33);
      if (*((unsigned char *)v11 + 33))
      {
        uint64_t v13 = 0;
        char v14 = 0;
        uint64_t v15 = *v11;
        unsigned __int8 v16 = BYTE1(v9[2].__shared_owners_);
        while (1)
        {
          size_t v17 = v16;
          unint64_t v18 = (char *)*v10;
          if (v16) {
            break;
          }
LABEL_5:
          *(void *)&v18[8 * v16] = *(void *)(v15 + 8 * v13);
          unsigned __int8 v16 = BYTE1(v9[2].__shared_owners_) + 1;
          BYTE1(v9[2].__shared_owners_) = v16;
          ++v13;
          char v14 = 1;
          if (v13 == v12)
          {
            unint64_t v18 = (char *)*v10;
            size_t v17 = v16;
LABEL_22:
            qsort(v18, v17, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
            goto LABEL_23;
          }
        }
        if (v16 > 0x1Fu)
        {
          do
          {
            uint64_t v21 = v16;
            int v22 = v18 + 4;
            while (*(v22 - 1) != *(_DWORD *)(v15 + 8 * v13))
            {
              v22 += 2;
              if (!--v21) {
                goto LABEL_16;
              }
            }
            *int v22 = *(_DWORD *)(v15 + 8 * v13 + 4);
LABEL_16:
            ++v13;
          }
          while (v13 != v12);
        }
        else
        {
          do
          {
            uint64_t v19 = v16;
            unint64_t v20 = v18 + 4;
            while (*(v20 - 1) != *(_DWORD *)(v15 + 8 * v13))
            {
              v20 += 2;
              if (!--v19) {
                goto LABEL_5;
              }
            }
            *unint64_t v20 = *(_DWORD *)(v15 + 8 * v13++ + 4);
          }
          while (v13 != v12);
        }
        if (v14) {
          goto LABEL_22;
        }
      }
    }
LABEL_23:
    unint64_t v23 = *a2;
    if (*a2)
    {
      uint64_t v24 = *((unsigned __int8 *)v23 + 33);
      if (*((unsigned char *)v23 + 33))
      {
        uint64_t v25 = 0;
        char v26 = 0;
        uint64_t v27 = *v23;
        unsigned __int8 v28 = BYTE1(v9[2].__shared_owners_);
        while (1)
        {
          size_t v29 = v28;
          unint64_t v30 = (char *)*v10;
          if (v28) {
            break;
          }
LABEL_26:
          *(void *)&v30[8 * v28] = *(void *)(v27 + 8 * v25);
          unsigned __int8 v28 = BYTE1(v9[2].__shared_owners_) + 1;
          BYTE1(v9[2].__shared_owners_) = v28;
          ++v25;
          char v26 = 1;
          if (v25 == v24)
          {
            unint64_t v30 = (char *)*v10;
            size_t v29 = v28;
LABEL_43:
            qsort(v30, v29, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
            goto LABEL_44;
          }
        }
        if (v28 > 0x1Fu)
        {
          do
          {
            uint64_t v33 = v28;
            unint64_t v34 = v30 + 4;
            while (*(v34 - 1) != *(_DWORD *)(v27 + 8 * v25))
            {
              v34 += 2;
              if (!--v33) {
                goto LABEL_37;
              }
            }
            _DWORD *v34 = *(_DWORD *)(v27 + 8 * v25 + 4);
LABEL_37:
            ++v25;
          }
          while (v25 != v24);
        }
        else
        {
          do
          {
            uint64_t v31 = v28;
            unint64_t v32 = v30 + 4;
            while (*(v32 - 1) != *(_DWORD *)(v27 + 8 * v25))
            {
              v32 += 2;
              if (!--v31) {
                goto LABEL_26;
              }
            }
            *unint64_t v32 = *(_DWORD *)(v27 + 8 * v25++ + 4);
          }
          while (v25 != v24);
        }
        if (v26) {
          goto LABEL_43;
        }
      }
    }
LABEL_44:
    qsort(v9[1].__vftable, BYTE1(v9[2].__shared_owners_), 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    float32x2_t v42 = (char *)&v9[1];
    uint64_t v43 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v35 = FeatureStyleAttributesSet::insert(a4, (uint64_t *)&v42);
    uint64_t v37 = *v35;
    uint64_t v36 = v35[1];
    if (v36) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
    }
    float32x2_t v38 = *(std::__shared_weak_count **)(a3 + 8);
    *(void *)a3 = v37;
    *(void *)(a3 + 8) = v36;
    if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
    uint64_t v39 = v43;
    if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
    float32x2_t v40 = v45;
    if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  return v4 != 0;
}

void sub_18A458020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_18A45803C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_18A45805C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18A458070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void geo::codec::transitNodeFeatureGetSystem(void *a1, unint64_t a2, void *a3)
{
  if (a3) {
    *a3 = 0;
  }
  if (a1)
  {
    if (a1[29] > a2)
    {
      unsigned int v6 = (std::__shared_weak_count *)a1[1];
      if (v6)
      {
        unsigned int v7 = std::__shared_weak_count::lock(v6);
        if (v7)
        {
          BOOL v8 = v7;
          uint64_t v9 = (void *)*a1;
          if (*a1)
          {
            if (a3)
            {
              unint64_t v10 = *(void *)(v9[180] + 8 * (a1[28] + a2));
              uint64_t v11 = v9[165];
              uint64_t v12 = v9[164];
              if (v10 < 0x8E38E38E38E38E39 * ((v11 - v12) >> 3)) {
                *a3 = v12 + 72 * v10;
              }
            }
          }
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
}

uint64_t geo::codec::unionStyleAttributes(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v3 = *a1;
  if (*a1 == a1[1]) {
    goto LABEL_43;
  }
  unint64_t v7 = 0;
  do
  {
    unint64_t v10 = *(uint64_t **)(v3 + 16 * v7);
    if (v10)
    {
      uint64_t v11 = v34;
      if (v34)
      {
        uint64_t v12 = *((unsigned __int8 *)v10 + 33);
        if (*((unsigned char *)v10 + 33))
        {
          uint64_t v13 = 0;
          char v14 = 0;
          uint64_t v15 = *v10;
          unsigned __int8 v16 = *(unsigned char *)(v34 + 33);
          while (1)
          {
            size_t v9 = v16;
            BOOL v8 = *(char **)v11;
            if (v16) {
              break;
            }
LABEL_10:
            *(void *)&v8[8 * v16] = *(void *)(v15 + 8 * v13);
            unsigned __int8 v16 = *(unsigned char *)(v11 + 33) + 1;
            *(unsigned char *)(v11 + 33) = v16;
            ++v13;
            char v14 = 1;
            if (v13 == v12)
            {
              BOOL v8 = *(char **)v11;
              size_t v9 = v16;
LABEL_4:
              qsort(v8, v9, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
              goto LABEL_5;
            }
          }
          if (v16 >= 0x20u)
          {
            do
            {
              size_t v22 = v9;
              unint64_t v23 = v8 + 4;
              while (*(v23 - 1) != *(_DWORD *)(v15 + 8 * v13))
              {
                v23 += 2;
                if (!--v22) {
                  goto LABEL_25;
                }
              }
              _DWORD *v23 = *(_DWORD *)(v15 + 8 * v13 + 4);
LABEL_25:
              ++v13;
            }
            while (v13 != v12);
          }
          else
          {
            do
            {
              uint64_t v17 = v16;
              unint64_t v18 = v8 + 4;
              while (*(v18 - 1) != *(_DWORD *)(v15 + 8 * v13))
              {
                v18 += 2;
                if (!--v17) {
                  goto LABEL_10;
                }
              }
              *unint64_t v18 = *(_DWORD *)(v15 + 8 * v13++ + 4);
            }
            while (v13 != v12);
          }
          if (v14) {
            goto LABEL_4;
          }
        }
      }
      else
      {
        uint64_t v19 = (char *)operator new(0x40uLL);
        *((void *)v19 + 1) = 0;
        *((void *)v19 + 2) = 0;
        *(void *)uint64_t v19 = &unk_1ED5185C0;
        FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v19 + 24), (const FeatureStyleAttributes *)v10);
        unint64_t v20 = v35;
        uint64_t v34 = v21;
        uint64_t v35 = (std::__shared_weak_count *)v19;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
LABEL_5:
    ++v7;
    uint64_t v3 = *a1;
  }
  while (v7 < (a1[1] - *a1) >> 4);
  if (!v34)
  {
LABEL_43:
    uint64_t v29 = 0;
    unint64_t v30 = v35;
    if (!v35) {
      return v29;
    }
    goto LABEL_44;
  }
  qsort(*(void **)v34, *(unsigned __int8 *)(v34 + 33), 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
  uint64_t v32 = v34;
  uint64_t v33 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = FeatureStyleAttributesSet::insert(a3, &v32);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = (std::__shared_weak_count *)a2[1];
  *a2 = v26;
  a2[1] = v25;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  unsigned __int8 v28 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  uint64_t v29 = 1;
  unint64_t v30 = v35;
  if (v35)
  {
LABEL_44:
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return v29;
}

void sub_18A458504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_18A458520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18A458534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18A458548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_18A458568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::accumulateStyleAttributeValue(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v27 = 0;
  unsigned __int8 v28 = 0;
  uint64_t v9 = *a2;
  if (v9) {
    geo::codec::copyFeatureStyleAttributes(&v25, v9);
  }
  else {
    _ZNSt3__115allocate_sharedB8ne180100I22FeatureStyleAttributesNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v25);
  }
  uint64_t v11 = v25;
  unint64_t v10 = v26;
  uint64_t v27 = v25;
  unsigned __int8 v28 = v26;
  uint64_t v12 = *(unsigned __int8 *)(v25 + 33);
  uint64_t v13 = *(_DWORD **)v25;
  if (*(unsigned char *)(v25 + 33))
  {
    size_t v14 = *(unsigned __int8 *)(v25 + 33);
    uint64_t v15 = v13 + 1;
    size_t v16 = v14;
    do
    {
      if (*(v15 - 1) == a4)
      {
        *uint64_t v15 = a5;
        goto LABEL_13;
      }
      v15 += 2;
      --v16;
    }
    while (v16);
    if (v12 <= 0x1F) {
      goto LABEL_11;
    }
  }
  else
  {
    size_t v14 = 0;
LABEL_11:
    uint64_t v17 = &v13[2 * v14];
    *uint64_t v17 = a4;
    v17[1] = a5;
    size_t v14 = v12 + 1;
    *(unsigned char *)(v11 + 33) = v12 + 1;
  }
LABEL_13:
  qsort(v13, v14, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
  uint64_t v25 = v11;
  uint64_t v26 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v18 = FeatureStyleAttributesSet::insert(a1, &v25);
  uint64_t v20 = *v18;
  uint64_t v19 = (std::__shared_weak_count *)v18[1];
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v22 = *(std::__shared_weak_count **)(a3 + 32);
  *(void *)(a3 + 24) = v20;
  *(void *)(a3 + 32) = v19;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v23 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  return 1;
}

void sub_18A4587C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18A4587D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18A4587EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18A458808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::lineArcSplineFlatten(geo::codec *this, const GeoCodecsTileCurveVertex *a2, float *a3, float *a4, int a5, float a6, float *a7, _DWORD *a8, float *a9, int *a10, int a11)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0xFFFFFFFFLL;
  if (a6 > 0.0)
  {
    int v13 = (int)a2;
    if (((a5 | a2 | a9) & 0x80000000) == 0)
    {
      if (a2)
      {
        if ((int)a9 >= (int)a2 && (v60 = 0.0, uint64_t v59 = 0, a5 >= 2))
        {
          size_t v16 = a3;
          int v18 = 0;
          *a8 = 0;
          if (a3) {
            BOOL v19 = a7 == 0;
          }
          else {
            BOOL v19 = 1;
          }
          int v20 = !v19;
          if (!v19)
          {
            *a7 = *a3;
            int v18 = 1;
          }
          *a4 = *(float *)this;
          a4[1] = *((float *)this + 1);
          uint64_t v11 = 2;
          if ((int)a2 >= 2)
          {
            int v21 = 1;
            uint64_t v57 = a7;
            unsigned int v58 = a8;
            int v55 = v20;
            do
            {
              uint64_t v23 = v21;
              uint64_t v24 = (float32x2_t *)((char *)this + 12 * v21);
              if (v24[1].i8[0])
              {
                uint64_t v25 = v21 + 1;
                if (v21 + 1 >= v13) {
                  return 0;
                }
                uint64_t v26 = (float32x2_t *)((char *)this + 12 * v25);
                if (v26[1].i8[0])
                {
                  uint64_t v27 = (int)v11 - 2;
                  unsigned __int8 v28 = &a4[v27];
                  float v29 = a4[(int)v11 - 1];
                  float v61 = *v28;
                  float v62 = v29;
                  float32x2_t v30 = vmul_f32(vadd_f32(*v26, *v24), (float32x2_t)0x3F0000003F000000);
                  unint64_t v63 = (unint64_t)*v24;
                  float32x2_t v64 = v30;
                  uint64_t v31 = v18 - 1;
                  if (v20)
                  {
                    float v32 = v16[v21];
                    *(float *)&uint64_t v59 = a7[v31];
                    *((float *)&v59 + 1) = v32;
                    float v60 = (float)(v16[v25] + v32) * 0.5;
                  }
                  if (a7) {
                    uint64_t v33 = &a7[v31];
                  }
                  else {
                    uint64_t v33 = 0;
                  }
                  uint64_t v34 = geo::codec::quadraticBezierFlatten((geo::codec *)&v61, (const float *)&v59, v28, a6, (float *)(a5 - v27), v33, a7);
                  if (v34 == -1) {
                    return 0xFFFFFFFFLL;
                  }
                  a7 = v57;
                  a8 = v58;
                  v58[v21] = (int)v11 >> 1;
                  uint64_t v11 = (v27 + v34);
                  if (v34 >= 0) {
                    unint64_t v35 = v34;
                  }
                  else {
                    unint64_t v35 = v34 + 1;
                  }
                  int v18 = v31 + (v35 >> 1);
                  size_t v16 = a3;
                  int v20 = v55;
                }
                else
                {
                  uint64_t v36 = (int)v11 - 2;
                  uint64_t v37 = &a4[v36];
                  float v38 = v24->f32[0];
                  float v39 = v24->f32[1];
                  float v40 = a4[(int)v11 - 1];
                  float v41 = (float)((float)(v24->f32[0] - *v37) * (float)(v24->f32[0] - *v37))
                      + (float)((float)(v39 - v40) * (float)(v39 - v40));
                  if (v41 <= 1.0e-20
                    || (float v43 = v26->f32[0],
                        float v42 = v26->f32[1],
                        float v44 = (float)((float)(v38 - v26->f32[0]) * (float)(v38 - v26->f32[0]))
                            + (float)((float)(v39 - v42) * (float)(v39 - v42)),
                        v44 <= 1.0e-20))
                  {
                    int v50 = v11 + 2;
                    if ((int)v11 + 2 > a5) {
                      return 0xFFFFFFFFLL;
                    }
                    a8[v23] = (int)v11 >> 1;
                    if (v20)
                    {
                      a7[v18++] = v16[v23];
                      float v38 = v24->f32[0];
                    }
                    uint64_t v52 = &a4[(int)v11];
                    *uint64_t v52 = v38;
                    v52[1] = v24->f32[1];
                  }
                  else
                  {
                    float v45 = sqrtf(fminf(v41, v44) / v44);
                    float v61 = *v37;
                    float v62 = v40;
                    unint64_t v63 = __PAIR64__(LODWORD(v39), LODWORD(v38));
                    v64.f32[0] = v38 + (float)(v45 * (float)(v43 - v38));
                    v64.f32[1] = v39 + (float)(v45 * (float)(v42 - v39));
                    uint64_t v46 = v18 - 1;
                    if (v20)
                    {
                      float v47 = v16[v23];
                      *(float *)&uint64_t v59 = a7[v46];
                      *((float *)&v59 + 1) = v47;
                      float v60 = v47 + (float)((float)(v16[v25] - v47) * v45);
                    }
                    if (a7) {
                      unint64_t v48 = &a7[v46];
                    }
                    else {
                      unint64_t v48 = 0;
                    }
                    uint64_t v49 = geo::codec::quadraticBezierFlatten((geo::codec *)&v61, (const float *)&v59, v37, a6, (float *)(a5 - v36), v48, a7);
                    if (v49 == -1) {
                      return 0xFFFFFFFFLL;
                    }
                    a7 = v57;
                    a8 = v58;
                    v58[v23] = (int)v11 >> 1;
                    int v50 = v36 + v49;
                    if (v49 >= 0) {
                      unint64_t v51 = v49;
                    }
                    else {
                      unint64_t v51 = v49 + 1;
                    }
                    int v18 = v46 + (v51 >> 1);
                    size_t v16 = a3;
                    int v20 = v55;
                  }
                  uint64_t v11 = (v50 + 2);
                  if ((int)v11 > a5) {
                    return 0xFFFFFFFFLL;
                  }
                  a8[v25] = v50 >> 1;
                  if (v20) {
                    a7[v18++] = v16[v25];
                  }
                  uint64_t v53 = &a4[v50];
                  *uint64_t v53 = v26->f32[0];
                  v53[1] = v26->f32[1];
                  int v21 = v23 + 1;
                }
              }
              else
              {
                if ((int)v11 + 2 > a5) {
                  return 0xFFFFFFFFLL;
                }
                a8[v21] = (int)v11 >> 1;
                if (v20) {
                  a7[v18++] = v16[v21];
                }
                size_t v22 = &a4[(int)v11];
                *size_t v22 = v24->f32[0];
                v22[1] = v24->f32[1];
                uint64_t v11 = (v11 + 2);
              }
              ++v21;
            }
            while (v21 < v13);
          }
        }
        else
        {
          return 0xFFFFFFFFLL;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v11;
}

uint64_t geo::codec::quadraticBezierFlatten(geo::codec *this, const float *a2, float *a3, float a4, float *a5, float *a6, float *a7)
{
  if (a4 <= 0.0 || (a5 & 0x80000000) != 0) {
    return -1;
  }
  unint64_t v7 = &a6[a5 >> 1];
  if (!a6) {
    unint64_t v7 = 0;
  }
  if (a5 < 2) {
    return -1;
  }
  *a3 = *(float *)this;
  a3[1] = *((float *)this + 1);
  if (a6) {
    *a6++ = *a2;
  }
  if (a5 < 8) {
    return -1;
  }
  uint64_t v9 = a3 + 2;
  long long v10 = *(_OWORD *)this;
  uint64_t v11 = &a3[a5 - 6];
  *((void *)v11 + 2) = *((void *)this + 2);
  *(_OWORD *)uint64_t v11 = v10;
  if (v7)
  {
    int v12 = *((_DWORD *)a2 + 2);
    *(void *)(v7 - 3) = *(void *)a2;
    v7 -= 3;
    *((_DWORD *)v7 + 2) = v12;
  }
  float v13 = 1.0 / a4;
  do
  {
    float v18 = v11[2];
    float v19 = v11[3];
    float v21 = v11[4];
    float v20 = v11[5];
    float v22 = *v11;
    float v23 = v11[1];
    float v24 = (float)(v21 - (float)(v18 + v18)) + *v11;
    float v25 = (float)(v20 - (float)(v19 + v19)) + v23;
    int v26 = vcvtps_s32_f32(sqrtf(fmaxf(fmaxf(fabsf(v24), fabsf(v25)) * (float)(0.35355 * v13), 1.0)));
    if (v26 > 64)
    {
      uint64_t v15 = v11 - 6;
      if (v11 - 6 < v9) {
        return -1;
      }
      float v44 = (float)(v22 + v18) * 0.5;
      float v45 = (float)(v23 + v19) * 0.5;
      float v46 = (float)(v18 + v21) * 0.5;
      float v47 = (float)(v19 + v20) * 0.5;
      float v48 = (float)(v44 + v46) * 0.5;
      *(v11 - 6) = v22;
      *(v11 - 5) = v23;
      *(v11 - 4) = v44;
      *(v11 - 3) = v45;
      float v49 = (float)(v45 + v47) * 0.5;
      *(v11 - 2) = v48;
      *(v11 - 1) = v49;
      *uint64_t v11 = v48;
      v11[1] = v49;
      v11[2] = v46;
      void v11[3] = v47;
      if (v7)
      {
        float v50 = *v7;
        float v51 = v7[1];
        float v52 = (float)(v51 + *v7) * 0.5;
        float v53 = (float)(v7[2] + v51) * 0.5;
        float v54 = (float)(v53 + v52) * 0.5;
        *(v7 - 2) = v52;
        *(v7 - 1) = v54;
        *unint64_t v7 = v54;
        v7[1] = v53;
        *(v7 - 3) = v50;
        v7 -= 3;
      }
    }
    else
    {
      uint64_t v27 = &v9[2 * v26];
      if (v27 > v11) {
        return -1;
      }
      float v28 = 1.0 / (float)v26;
      float v29 = v28 * v28;
      float v30 = (float)(v28 * v28) * v24;
      float v31 = (float)(v28 * v28) * v25;
      float v32 = v28 + v28;
      float v33 = v30 + (float)((float)(v28 + v28) * (float)(v18 - v22));
      float v34 = v31 + (float)((float)(v28 + v28) * (float)(v19 - v23));
      float v35 = v30 + v30;
      float v36 = v31 + v31;
      if (v7)
      {
        if (v26)
        {
          float v37 = *v7;
          float v38 = v7[1];
          float v39 = (float)((float)(*v7 - (float)(v38 + v38)) + v7[2]) * v29;
          float v40 = v39 + v39;
          float v41 = v39 + (float)((float)(v38 - *v7) * v32);
          int v42 = v26;
          float v43 = a6;
          do
          {
            float v22 = v22 + v33;
            float v23 = v23 + v34;
            float v33 = v33 + v35;
            float v34 = v34 + v36;
            *uint64_t v9 = v22;
            v9[1] = v23;
            v9 += 2;
            float v37 = v37 + v41;
            float v41 = v41 + v40;
            *v43++ = v37;
            --v42;
          }
          while (v42);
        }
      }
      else
      {
        for (int i = v26; i; --i)
        {
          float v22 = v22 + v33;
          float v23 = v23 + v34;
          float v33 = v33 + v35;
          float v34 = v34 + v36;
          *uint64_t v9 = v22;
          v9[1] = v23;
          v9 += 2;
        }
      }
      uint64_t v14 = v26;
      uint64_t v15 = v11 + 6;
      size_t v16 = &a6[v14];
      BOOL v17 = a6 == 0;
      if (a6) {
        a6 = v16;
      }
      else {
        a6 = 0;
      }
      if (!v17) {
        v7 += 3;
      }
      uint64_t v9 = v27;
    }
    uint64_t v11 = (float *)v15;
  }
  while (v15 != &a3[a5]);
  return v9 - a3;
}

void *geo::codec::multiSectionFeaturePoints(void *result, unint64_t a2, void *a3)
{
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v5 = result;
  if (*((unsigned int *)result + 25) <= a2)
  {
LABEL_9:
    uint64_t result = 0;
    *a3 = 0;
    return result;
  }
  uint64_t result = geo::codec::vertexPoolForFeature((uint64_t)result);
  if (!result)
  {
LABEL_8:
    *a3 = 0;
    return result;
  }
  uint64_t v6 = result[4];
  if (v6)
  {
    unint64_t v7 = *((unsigned int *)v5 + 24) + a2;
    if (result[5] > v7)
    {
      unint64_t v8 = *(void *)(v6 + 16 * v7);
      if (v8 < result[2])
      {
        uint64_t result = (void *)(result[1] + 8 * v8);
        *a3 = *(void *)(v6 + 16 * v7 + 8);
        return result;
      }
    }
    goto LABEL_9;
  }
  return 0;
}

void *geo::codec::multiSectionFeaturePointsWithElevation(void *result, unint64_t a2, void *a3, void *a4)
{
  if (!result)
  {
    unint64_t v8 = 0;
    goto LABEL_13;
  }
  uint64_t v6 = result;
  if (*((unsigned int *)result + 25) <= a2) {
    goto LABEL_11;
  }
  uint64_t result = geo::codec::vertexPoolForFeature((uint64_t)result);
  unint64_t v8 = result;
  if (!result)
  {
LABEL_13:
    *a4 = v8;
    return result;
  }
  uint64_t v9 = result[4];
  if (!v9) {
    return 0;
  }
  unint64_t v10 = *((unsigned int *)v6 + 24) + a2;
  if (result[5] <= v10 || (unint64_t v11 = *(void *)(v9 + 16 * v10), v11 >= result[2]))
  {
LABEL_11:
    uint64_t result = 0;
    *a4 = 0;
    return result;
  }
  uint64_t result = (void *)(result[1] + 8 * v11);
  if (a3)
  {
    uint64_t v12 = v8[3];
    if (v12)
    {
      *a3 = v12 + 4 * v11;
      uint64_t v9 = v8[4];
    }
  }
  *a4 = *(void *)(v9 + 16 * v10 + 8);
  return result;
}

void geo::codec::featureGetNativeLabel(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  if (!a1) {
    return;
  }
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v7)
  {
    uint64_t v9 = 0;
LABEL_11:
    if (a3) {
      *a3 = 0;
    }
    if (!a4)
    {
LABEL_16:
      if (!v9) {
        return;
      }
      goto LABEL_17;
    }
    uint64_t v12 = 0;
LABEL_15:
    *a4 = v12;
    goto LABEL_16;
  }
  uint64_t v9 = std::__shared_weak_count::lock(v7);
  if (!v9 || *(unsigned __int8 *)(a1 + 73) <= a2 || !*(void *)a1) {
    goto LABEL_11;
  }
  unint64_t v10 = *(unsigned int *)(a1 + 56) + a2;
  uint64_t v11 = *(void *)(*(void *)a1 + 1048);
  if (a3) {
    *a3 = *(void *)(v11 + 24 * v10);
  }
  if (a4)
  {
    uint64_t v12 = *(void *)(v11 + 24 * v10 + 8);
    goto LABEL_15;
  }
LABEL_17:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void geo::codec::featureGetNativeShield(uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5)
{
  if (!a1) {
    return;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 8);
  if (v9)
  {
    uint64_t v11 = std::__shared_weak_count::lock(v9);
    if (v11 && *(unsigned __int8 *)(a1 + 72) > a2 && *(void *)a1)
    {
      unint64_t v12 = *(unsigned int *)(a1 + 60) + a2;
      uint64_t v13 = *(void *)(*(void *)a1 + 1064);
      uint64_t v14 = (void *)(v13 + 32 * v12);
      if (a3) {
        *a3 = *v14;
      }
      if (a5) {
        *a5 = v14[1];
      }
      if (a4) {
        *a4 = *(void *)(v13 + 32 * v12 + 24);
      }
LABEL_20:
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      return;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  if (v11) {
    goto LABEL_20;
  }
}

void *geo::codec::vectorTileGetLocalizedLabel(void *result, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  if (a4 < a2
    && (unint64_t v8 = (void *)*result) != 0
    && (uint64_t v9 = (unint64_t *)(v8[131] + 24 * (a4 + a3)), (v10 = *v9) != 0))
  {
    unint64_t v11 = v9[1];
    unint64_t v12 = v8[107];
    unint64_t v13 = v8[108];
    if (v12 <= v10)
    {
      BOOL v14 = v13 >= v10;
      BOOL v15 = v13 == v10;
    }
    else
    {
      BOOL v14 = 0;
      BOOL v15 = 0;
    }
    if (v15 || !v14) {
      goto LABEL_21;
    }
    size_t v16 = (const void *)v8[135];
    uint64_t v17 = v8[136];
    unint64_t __key = v10 - v12;
    uint64_t result = bsearch(&__key, v16, (v17 - (uint64_t)v16) >> 5, 0x20uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compareSearchingLocalizationTableEntries);
    if (!result) {
      goto LABEL_21;
    }
    unint64_t v18 = result[1];
    if (v18 == -1) {
      goto LABEL_21;
    }
    float v19 = v8 + 127;
    uint64_t v20 = 127;
    if ((result[3] & 1) == 0)
    {
      uint64_t v20 = 113;
      float v19 = v8 + 113;
    }
    uint64_t v21 = v8[v20];
    if (v18 < v19[1] - v21 && v21)
    {
      unint64_t v11 = result[2];
      if (a5) {
        *a5 = v21 + v18;
      }
    }
    else
    {
LABEL_21:
      if (a5) {
        *a5 = v10;
      }
    }
    if (a6) {
      goto LABEL_24;
    }
  }
  else
  {
    if (a5) {
      *a5 = 0;
    }
    if (a6)
    {
      unint64_t v11 = 0;
LABEL_24:
      *a6 = v11;
    }
  }
  return result;
}

void geo::codec::featureGetLocalizedLabel(uint64_t *a1, unint64_t a2, unint64_t *a3, unint64_t *a4)
{
  if (a1)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v8 = (std::__shared_weak_count *)a1[1];
    if (v8)
    {
      uint64_t v9 = std::__shared_weak_count::lock(v8);
      unint64_t v11 = v9;
      if (v9) {
        uint64_t v10 = *a1;
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
    geo::codec::vectorTileGetLocalizedLabel(&v10, *((unsigned __int8 *)a1 + 73), *((unsigned int *)a1 + 14), a2, a3, a4);
    if (v9)
    {
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_18A4594A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void geo::codec::featureGetLocalizedShield(uint64_t a1, unint64_t a2, unint64_t *a3, void *a4, void *a5)
{
  if (!a1) {
    goto LABEL_30;
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 8);
  if (v9)
  {
    unint64_t v11 = std::__shared_weak_count::lock(v9);
    unint64_t v12 = v11;
    if (v11 && *(unsigned __int8 *)(a1 + 72) > a2 && *(void *)a1)
    {
      unint64_t v13 = (unint64_t *)(*(void *)(*(void *)a1 + 1064) + 32 * (*(unsigned int *)(a1 + 60) + a2));
      unint64_t v14 = *v13;
      BOOL v15 = (void *)v13[1];
      if (a4) {
        *a4 = v13[3];
      }
      if (atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_9:
        if (!v14) {
          goto LABEL_30;
        }
LABEL_17:
        size_t v16 = *(std::__shared_weak_count **)(a1 + 8);
        if (!v16) {
          goto LABEL_41;
        }
        uint64_t v17 = std::__shared_weak_count::lock(v16);
        if (!v17) {
          goto LABEL_41;
        }
        unint64_t v18 = v17;
        float v19 = *(void **)a1;
        if (v19)
        {
          unint64_t v20 = v19[107];
          if (v20 > v14) {
            goto LABEL_34;
          }
          if (v19[108] <= v14) {
            goto LABEL_34;
          }
          uint64_t v21 = (const void *)v19[135];
          uint64_t v22 = v19[136];
          unint64_t __key = v14 - v20;
          float v23 = bsearch(&__key, v21, (v22 - (uint64_t)v21) >> 5, 0x20uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compareSearchingLocalizationTableEntries);
          if (!v23) {
            goto LABEL_34;
          }
          unint64_t v24 = v23[1];
          if (v24 == -1) {
            goto LABEL_34;
          }
          float v25 = v19 + 127;
          uint64_t v26 = 127;
          if ((v23[3] & 1) == 0)
          {
            uint64_t v26 = 113;
            float v25 = v19 + 113;
          }
          uint64_t v27 = v19[v26];
          if (v24 < v25[1] - v27 && v27)
          {
            float v19 = (void *)v23[2];
            unint64_t v28 = v27 + v24;
            if (atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
              goto LABEL_36;
            }
          }
          else
          {
LABEL_34:
            unint64_t v28 = 0;
            float v19 = 0;
            if (atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
              goto LABEL_36;
            }
          }
        }
        else
        {
          unint64_t v28 = 0;
          if (atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
LABEL_36:
            if (v28)
            {
              if (a3) {
                *a3 = v28;
              }
              if (a5) {
                goto LABEL_44;
              }
              return;
            }
LABEL_41:
            if (a3) {
              *a3 = v14;
            }
            float v19 = v15;
            if (a5) {
              goto LABEL_44;
            }
            return;
          }
        }
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        goto LABEL_36;
      }
LABEL_16:
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!v14) {
        goto LABEL_30;
      }
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (v12)
  {
    unint64_t v14 = 0;
    BOOL v15 = 0;
    if (atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_30:
  if (a3) {
    *a3 = 0;
  }
  if (a5)
  {
    float v19 = 0;
LABEL_44:
    *a5 = v19;
  }
}

void sub_18A459738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::readMaterial(void *a1, uint64_t *a2, int a3)
{
  unsigned int v4 = a1;
  if (!a3) {
    goto LABEL_8;
  }
  uint64_t v5 = a1[6];
  if ((unint64_t)(v5 + 2) > a1[7]) {
    return 0;
  }
  *((_WORD *)a2 + 9) = *(_WORD *)(a1[5] + v5);
  a1[6] = v5 + 2;
  uint64_t v6 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  a1 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 16))(v6, 8 * *((unsigned __int16 *)a2 + 9), 8);
  a2[1] = (uint64_t)a1;
  uint64_t v7 = *((unsigned __int16 *)a2 + 9);
  if (*((_WORD *)a2 + 9))
  {
    uint64_t v9 = v4[6];
    unint64_t v8 = v4[7];
    uint64_t v10 = (_DWORD *)a1 + 1;
    while (v9 + 2 <= v8)
    {
      uint64_t v11 = v4[5];
      int v12 = *(unsigned __int16 *)(v11 + v9);
      v4[6] = v9 + 2;
      uint64_t v13 = v9 + 6;
      if (v9 + 6 > v8) {
        break;
      }
      int v14 = *(_DWORD *)(v11 + v9 + 2);
      v4[6] = v13;
      *(v10 - 1) = v12;
      _DWORD *v10 = v14;
      v10 += 2;
      uint64_t v9 = v13;
      if (!--v7) {
        goto LABEL_8;
      }
    }
    return 0;
  }
  else
  {
LABEL_8:
    uint64_t v15 = v4[6];
    if ((unint64_t)(v15 + 2) > v4[7]) {
      return 0;
    }
    *((_WORD *)a2 + 8) = *(_WORD *)(v4[5] + v15);
    v4[6] = v15 + 2;
    uint64_t v17 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17 + 16))(v17, 32 * *((unsigned __int16 *)a2 + 8), 8);
    *a2 = result;
    if (*((_WORD *)a2 + 8))
    {
      unint64_t v18 = 0;
      while (1)
      {
        uint64_t v19 = v4[6];
        if ((unint64_t)(v19 + 1) > v4[7]) {
          return 0;
        }
        uint64_t v20 = *a2;
        uint64_t v21 = (unsigned char *)(*a2 + 32 * v18);
        uint64_t v22 = v21 + 2;
        v21[2] = *(unsigned char *)(v4[5] + v19);
        uint64_t v23 = v4[6];
        unint64_t v24 = v4[7];
        v4[6] = v23 + 1;
        if (v23 + 2 > v24) {
          return 0;
        }
        *(unsigned char *)(v20 + 32 * v18 + 3) = *(unsigned char *)(v4[5] + v23 + 1);
        uint64_t v25 = v4[6];
        unint64_t v26 = v4[7];
        v4[6] = v25 + 1;
        uint64_t v27 = v25 + 2;
        if (v25 + 2 > v26) {
          return 0;
        }
        uint64_t v28 = v4[5];
        int v29 = *(unsigned __int8 *)(v28 + v25 + 1);
        v4[6] = v27;
        if (v29)
        {
          *uint64_t v21 = 1;
          if (v25 + 3 > v26) {
            return 0;
          }
          *(unsigned char *)(v20 + 32 * v18 + 1) = *(unsigned char *)(v28 + v27);
          ++v4[6];
        }
        else
        {
          *uint64_t v21 = 0;
          *(unsigned char *)(v20 + 32 * v18 + 1) = 1;
        }
        uint64_t v30 = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
        uint64_t v31 = v20 + 32 * v18;
        float v32 = (unsigned char *)(v31 + 1);
        float v33 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v30 + 16))(v30, *(unsigned __int8 *)(v31 + 1), 8);
        *(void *)(v31 + 8) = v33;
        float v34 = (uint64_t *)(v31 + 8);
        uint64_t v35 = geo::codec::Allocator::instance(v33);
        float v36 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v35 + 16))(v35, *(unsigned __int8 *)(v31 + 1), 8);
        *(void *)(v31 + 16) = v36;
        float v37 = (uint64_t *)(v31 + 16);
        switch(*v22)
        {
          case 0:
          case 3:
            uint64_t v38 = geo::codec::Allocator::instance(v36);
            uint64_t v39 = 4 * *v32;
            goto LABEL_23;
          case 1:
          case 4:
            uint64_t v38 = geo::codec::Allocator::instance(v36);
            uint64_t v39 = *v32;
            goto LABEL_23;
          case 2:
          case 5:
            uint64_t v38 = geo::codec::Allocator::instance(v36);
            uint64_t v39 = 8 * *v32;
LABEL_23:
            uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v39, 8);
            uint64_t v41 = v20 + 32 * v18;
            *(void *)(v41 + 24) = v40;
            int v42 = (uint64_t *)(v41 + 24);
            if (*v32)
            {
              uint64_t v43 = 0;
              uint64_t v44 = 0;
              unint64_t v45 = 0;
              while (2)
              {
                uint64_t v47 = *v34;
                uint64_t v48 = *v37;
                if (*v21)
                {
                  uint64_t v49 = v4[6];
                  if ((unint64_t)(v49 + 1) > v4[7]) {
                    return 0;
                  }
                  *(unsigned char *)(v47 + v45) = *(unsigned char *)(v4[5] + v49);
                  uint64_t v50 = v4[6];
                  unint64_t v51 = v4[7];
                  v4[6] = v50 + 1;
                  if (v50 + 2 > v51) {
                    return 0;
                  }
                  *(unsigned char *)(v48 + v45) = *(unsigned char *)(v4[5] + v50 + 1);
                  ++v4[6];
                  unsigned int v52 = *v22;
                  if (v52 > 5) {
                    return 0;
                  }
                }
                else
                {
                  *(unsigned char *)(v47 + v45) = 1;
                  *(unsigned char *)(v48 + v45) = 24;
                  unsigned int v52 = *v22;
                }
                switch(v52)
                {
                  case 0u:
                    uint64_t v53 = v4[6];
                    if ((unint64_t)(v53 + 1) > v4[7]) {
                      return 0;
                    }
                    uint64_t v54 = *v42;
                    *(unsigned char *)(*v42 + v43) = *(unsigned char *)(v4[5] + v53);
                    uint64_t v55 = v4[6];
                    unint64_t v56 = v4[7];
                    v4[6] = v55 + 1;
                    if (v55 + 2 > v56) {
                      return 0;
                    }
                    *(unsigned char *)(v54 + v43 + 1) = *(unsigned char *)(v4[5] + v55 + 1);
                    uint64_t v57 = v4[6];
                    unint64_t v58 = v4[7];
                    v4[6] = v57 + 1;
                    if (v57 + 2 > v58) {
                      return 0;
                    }
                    *(unsigned char *)(v54 + v43 + 2) = *(unsigned char *)(v4[5] + v57 + 1);
                    uint64_t v59 = v4[6];
                    unint64_t v60 = v4[7];
                    v4[6] = v59 + 1;
                    if (v59 + 2 > v60) {
                      return 0;
                    }
                    *(unsigned char *)(v54 + v43 + 3) = *(unsigned char *)(v4[5] + v59 + 1);
                    goto LABEL_43;
                  case 1u:
                    uint64_t v61 = v4[6];
                    if ((unint64_t)(v61 + 1) > v4[7]) {
                      return 0;
                    }
                    *(unsigned char *)(*v42 + v45) = *(unsigned char *)(v4[5] + v61);
LABEL_43:
                    uint64_t v46 = v4[6] + 1;
                    goto LABEL_27;
                  case 2u:
                    uint64_t v62 = v4[6];
                    if ((unint64_t)(v62 + 8) > v4[7]) {
                      return 0;
                    }
                    *(void *)(*v42 + 8 * v45) = *(void *)(v4[5] + v62);
                    v4[6] = v62 + 8;
                    goto LABEL_28;
                  case 3u:
                    uint64_t v63 = v4[6];
                    if ((unint64_t)(v63 + 4) > v4[7]) {
                      return 0;
                    }
                    *(_DWORD *)(*v42 + 4 * v45) = *(_DWORD *)(v4[5] + v63);
                    goto LABEL_26;
                  case 4u:
                    uint64_t v64 = v4[6];
                    uint64_t v65 = v64 + 1;
                    if ((unint64_t)(v64 + 1) > v4[7]) {
                      return 0;
                    }
                    int v66 = *(unsigned __int8 *)(v4[5] + v64);
                    v4[6] = v65;
                    *(unsigned char *)(*v42 + v45) = v66 != 0;
                    goto LABEL_28;
                  case 5u:
                    uint64_t v67 = v4[6];
                    if ((unint64_t)(v67 + 4) > v4[7]) {
                      return 0;
                    }
                    uint64_t v68 = *v42;
                    *(_DWORD *)(*v42 + 4 * v44) = *(_DWORD *)(v4[5] + v67);
                    uint64_t v69 = v4[6];
                    unint64_t v70 = v4[7];
                    v4[6] = v69 + 4;
                    if (v69 + 8 > v70) {
                      return 0;
                    }
                    *(_DWORD *)(v68 + 4 * v44 + 4) = *(_DWORD *)(v4[5] + v69 + 4);
LABEL_26:
                    uint64_t v46 = v4[6] + 4;
LABEL_27:
                    v4[6] = v46;
LABEL_28:
                    ++v45;
                    v44 += 2;
                    v43 += 4;
                    if (v45 < *v32) {
                      continue;
                    }
                    goto LABEL_53;
                  default:
                    return 0;
                }
              }
            }
LABEL_53:
            ++v18;
            uint64_t result = 1;
            if (v18 >= *((unsigned __int16 *)a2 + 8)) {
              return result;
            }
            break;
          default:
            return 0;
        }
      }
    }
    return 1;
  }
}

uint64_t geo::codec::readTransformation(void *a1, _DWORD *a2)
{
  uint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  uint64_t v4 = v2 + 4;
  if (v2 + 4 > v3) {
    return 0;
  }
  uint64_t v6 = a1[5];
  v38[0] = *(float *)(v6 + v2);
  a1[6] = v4;
  uint64_t v7 = v2 + 8;
  if (v2 + 8 > v3) {
    return 0;
  }
  v38[1] = *(float *)(v6 + v4);
  a1[6] = v7;
  uint64_t v8 = v2 + 12;
  if (v2 + 12 > v3) {
    return 0;
  }
  v38[2] = *(float *)(v6 + v7);
  a1[6] = v8;
  uint64_t v9 = v2 + 16;
  if (v2 + 16 > v3) {
    return 0;
  }
  v38[7] = *(float *)(v6 + v8);
  a1[6] = v9;
  uint64_t v10 = v2 + 20;
  if (v2 + 20 > v3) {
    return 0;
  }
  v38[8] = *(float *)(v6 + v9);
  a1[6] = v10;
  uint64_t v11 = v2 + 24;
  if (v2 + 24 > v3) {
    return 0;
  }
  v38[9] = *(float *)(v6 + v10);
  a1[6] = v11;
  uint64_t v12 = v2 + 28;
  if (v2 + 28 > v3) {
    return 0;
  }
  v38[3] = *(float *)(v6 + v11);
  a1[6] = v12;
  uint64_t v13 = v2 + 32;
  if (v2 + 32 > v3) {
    return 0;
  }
  v38[4] = *(float *)(v6 + v12);
  a1[6] = v13;
  uint64_t v14 = v2 + 36;
  if (v2 + 36 > v3) {
    return 0;
  }
  v38[5] = *(float *)(v6 + v13);
  a1[6] = v14;
  unint64_t v15 = v2 + 40;
  if (v15 > v3) {
    return 0;
  }
  v38[6] = *(float *)(v6 + v14);
  a1[6] = v15;
  geo::Transform<float>::toMatrix(&v28, v38);
  __int32 v17 = v28.i32[1];
  int v18 = v32;
  int v19 = v33;
  int v20 = v29;
  int v21 = v30;
  __int32 v22 = v28.i32[2];
  int v23 = v31;
  int v24 = v35;
  int v25 = v36;
  int v26 = v34;
  int v27 = v37;
  *a2 = v28.i32[0];
  a2[1] = v20;
  a2[2] = v18;
  a2[3] = v24;
  a2[4] = v17;
  a2[5] = v21;
  a2[6] = v19;
  a2[7] = v25;
  a2[8] = v22;
  a2[9] = v23;
  a2[10] = v26;
  a2[11] = v27;
  return 1;
}

double geo::Transform<float>::toMatrix(float32x4_t *a1, float *a2)
{
  float v2 = a2[4];
  float v3 = a2[5];
  float v4 = v2 + v2;
  float v5 = (float)(v2 + v2) * v2;
  float v6 = (float)(v3 + v3) * v3;
  int v8 = *((_DWORD *)a2 + 2);
  float v7 = a2[3];
  float v9 = (float)(v7 + v7) * v2;
  float v10 = a2[6];
  int v11 = *((_DWORD *)a2 + 7);
  float v12 = (float)(v3 + v3) * v10;
  float v13 = v9 - v12;
  float v14 = v3 * (float)(v7 + v7);
  v28.f32[0] = 1.0 - (float)(v5 + v6);
  v28.f32[1] = v12 + v9;
  float v15 = 1.0 - (float)((float)(v7 + v7) * v7);
  float v29 = v13;
  float v30 = v15 - v6;
  float v16 = v10 * v4;
  float v17 = (float)(v10 * v4) + v14;
  float v18 = v4 * v3;
  float v19 = v10 * (float)(v7 + v7);
  float v33 = v17;
  float v34 = v18 - v19;
  v28.f32[2] = v14 - v16;
  float v31 = v19 + v18;
  float v35 = v15 - v5;
  v28.i32[3] = 0;
  int v32 = 0;
  int v36 = 0;
  uint64_t v37 = *(void *)a2;
  int v38 = v8;
  int v39 = 1065353216;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v26 = 0;
  long long v23 = 0u;
  int v27 = 1065353216;
  int v22 = v11;
  int v20 = *((_DWORD *)a2 + 9);
  *(float *)&long long v24 = a2[8];
  DWORD1(v25) = v20;
  *(void *)&double result = gm::operator*<float,4,4,4>(&v28, (uint64_t)&v22, a1).u64[0];
  return result;
}

void *geo::codec::dequantizePointCloud(geo::codec::Allocator *a1, float *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  int v8 = a1;
  unsigned int v9 = *(_DWORD *)(a5 + 4);
  uint64_t v149 = 0;
  uint64_t v150 = 0;
  uint64_t v151 = 0;
  double result = (void *)geo::codec::Allocator::instance(a1);
  uint64_t v152 = result;
  if (!v9)
  {
    int v128 = 0;
    uint64_t v11 = *(void *)v8;
    if (*((void *)v8 + 1) == *(void *)v8) {
      goto LABEL_151;
    }
LABEL_5:
    uint64_t v12 = 0;
    unsigned int v13 = 0;
    int v14 = 0;
    int v132 = 3 * v9;
    int v130 = 7 * v9;
    int v131 = 6 * v9;
    uint64_t v136 = a3 + 2;
    int v129 = v8;
    while (1)
    {
      unint64_t v16 = (v14 + v130);
      uint64_t v17 = *((void *)v8 + 4);
      if (v16 >= (*((void *)v8 + 5) - v17) >> 2) {
        int v135 = 0;
      }
      else {
        int v135 = *(_DWORD *)(v17 + 4 * v16);
      }
      int v142 = *(_DWORD *)(v11 + 4 * v12);
      uint64_t v18 = 4 * (v13 + 1);
      int v141 = *(_DWORD *)(v11 + v18);
      uint64_t v19 = 4 * (v13 + 2);
      int v140 = *(_DWORD *)(v11 + v19);
      int v146 = *(_DWORD *)(v17 + 4 * (v13 + v132 + 1));
      int v143 = *(_DWORD *)(v17 + 4 * (v13 + v132));
      int v144 = *(_DWORD *)(v17 + 4 * (v13 + v132 + 2));
      unint64_t v20 = *(unsigned int *)(v17 + 4 * (v14 + v131));
      float v21 = a2[1];
      int v139 = *((__int16 *)a2 + 1);
      int v22 = *(__int16 *)a2;
      float v137 = a2[3];
      float v138 = a2[2];
      float v23 = 1.0 / (float)(unsigned __int16)((1 << *(_WORD *)(a5 + 16)) - 1);
      float v24 = (float)((float)*(int *)(v17 + 4 * v13) * v23) * 6.28318531 + -3.14159265;
      float v25 = (float)((float)*(int *)(v17 + v18) * v23) * 6.28318531 + -3.14159265;
      float v26 = (float)((float)*(int *)(v17 + v19) * v23) * 6.28318531 + -3.14159265;
      __float2 v27 = __sincosf_stret(v24 * 0.5);
      __float2 v28 = __sincosf_stret(v25 * 0.5);
      __float2 v29 = __sincosf_stret(v26 * 0.5);
      __int16 v30 = *(_WORD *)(a5 + 18);
      float v31 = *(float *)(a5 + 8);
      float v32 = *(float *)(a5 + 12);
      unint64_t v33 = a3[1];
      if (v33)
      {
        uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v33);
        v34.i16[0] = vaddlv_u8(v34);
        if (v34.u32[0] > 1uLL)
        {
          unint64_t v5 = v20;
          if (v33 <= v20) {
            unint64_t v5 = v20 % v33;
          }
        }
        else
        {
          unint64_t v5 = (v33 - 1) & v20;
        }
        float v35 = *(void ***)(*a3 + 8 * v5);
        if (v35)
        {
          int v36 = *v35;
          if (*v35)
          {
            if (v34.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v38 = *((void *)v36 + 1);
                if (v38 == v20)
                {
                  if (*((_DWORD *)v36 + 4) == v20) {
                    goto LABEL_69;
                  }
                }
                else if ((v38 & (v33 - 1)) != v5)
                {
                  goto LABEL_31;
                }
                int v36 = *(void **)v36;
                if (!v36) {
                  goto LABEL_31;
                }
              }
            }
            do
            {
              unint64_t v37 = *((void *)v36 + 1);
              if (v37 == v20)
              {
                if (*((_DWORD *)v36 + 4) == v20)
                {
LABEL_69:
                  float v68 = *(float *)(a5 + 12);
                  int v44 = v144;
                  int v43 = v146;
                  int v46 = v142;
                  int v45 = v143;
                  int v48 = v140;
                  int v47 = v141;
                  int v49 = v139;
                  goto LABEL_105;
                }
              }
              else
              {
                if (v37 >= v33) {
                  v37 %= v33;
                }
                if (v37 != v5) {
                  break;
                }
              }
              int v36 = *(void **)v36;
            }
            while (v36);
          }
        }
      }
LABEL_31:
      int v36 = operator new(0x38uLL);
      v153[0] = v36;
      v153[1] = a3 + 2;
      *(void *)int v36 = 0;
      *((void *)v36 + 1) = v20;
      *((_DWORD *)v36 + 4) = v20;
      *((void *)v36 + 4) = 0;
      *((void *)v36 + 5) = 0;
      *((void *)v36 + 3) = 0;
      *((void *)v36 + 6) = geo::codec::Allocator::instance((geo::codec::Allocator *)v36);
      char v154 = 1;
      float v39 = (float)(unint64_t)(a3[3] + 1);
      float v40 = *((float *)a3 + 8);
      if (!v33 || (float)(v40 * (float)v33) < v39) {
        break;
      }
      uint64_t v41 = *a3;
      int v42 = *(void **)(*a3 + 8 * v5);
      if (v42) {
        goto LABEL_34;
      }
LABEL_84:
      *(void *)int v36 = *v136;
      *uint64_t v136 = v36;
      *(void *)(v41 + 8 * v5) = v136;
      int v44 = v144;
      int v43 = v146;
      int v46 = v142;
      int v45 = v143;
      int v48 = v140;
      int v47 = v141;
      int v49 = v139;
      if (*(void *)v36)
      {
        unint64_t v70 = *(void *)(*(void *)v36 + 8);
        if ((v33 & (v33 - 1)) != 0)
        {
          if (v70 >= v33) {
            v70 %= v33;
          }
        }
        else
        {
          v70 &= v33 - 1;
        }
        int v42 = (void *)(*a3 + 8 * v70);
        goto LABEL_103;
      }
LABEL_104:
      float v68 = v32;
      ++a3[3];
LABEL_105:
      float v73 = v21 * (float)v46;
      float v74 = v21 * (float)v47;
      float v75 = (float)((float)v22 + (float)((float)(v138 * (float)(v49 - v22)) * (float)v48)) / v137;
      float v76 = (float)((float)(v28.__cosval * v27.__cosval) * v29.__cosval)
          + (float)((float)(v28.__sinval * v27.__sinval) * v29.__sinval);
      float v77 = -(float)((float)((float)(v28.__sinval * v27.__cosval) * v29.__sinval)
                   - (float)((float)(v28.__cosval * v27.__sinval) * v29.__cosval));
      float v78 = (float)(v68 - v31) / (float)~(-1 << v30);
      float v79 = v31 + (float)(v78 * (float)v45);
      float v80 = v31 + (float)(v78 * (float)v43);
      float v81 = v31 + (float)(v78 * (float)v44);
      float32x2_t v82 = (float *)*((void *)v36 + 4);
      unint64_t v83 = *((void *)v36 + 5);
      if ((unint64_t)v82 >= v83)
      {
        uint64_t v85 = *((void *)v36 + 3);
        unint64_t v86 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v82 - v85) >> 3);
        unint64_t v87 = v86 + 1;
        if (v86 + 1 > 0x666666666666666) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v88 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v83 - v85) >> 3);
        if (2 * v88 > v87) {
          unint64_t v87 = 2 * v88;
        }
        if (v88 >= 0x333333333333333) {
          uint64_t v89 = 0x666666666666666;
        }
        else {
          uint64_t v89 = v87;
        }
        if (v89)
        {
          float v145 = v81;
          float v147 = v80;
          float v90 = v75;
          float v91 = v74;
          uint64_t v92 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v36 + 6) + 16))(*((void *)v36 + 6), 40 * v89, 4);
          uint64_t v93 = v92 + 40 * v86;
          uint64_t v94 = v92 + 40 * v89;
          if (v92)
          {
            *(float *)uint64_t v93 = v73;
            *(float *)(v93 + 4) = v91;
            *(float *)(v93 + 8) = v90;
            *(float *)(v93 + 12) = -(float)((float)((float)(v28.__sinval * v27.__sinval) * v29.__cosval)
                                          - (float)((float)(v28.__cosval * v27.__cosval) * v29.__sinval));
            *(float *)(v93 + 16) = (float)((float)(v28.__sinval * v27.__cosval) * v29.__cosval)
                                 + (float)((float)(v28.__cosval * v27.__sinval) * v29.__sinval);
            *(float *)(v93 + 20) = v77;
            *(float *)(v93 + 24) = v76;
            unint64_t v95 = v92 + 40 * v86;
            *(float *)(v95 + 28) = v79;
            *(float *)(v95 + 32) = v147;
            *(float *)(v95 + 36) = v145;
          }
          uint64_t v97 = *((void *)v36 + 3);
          uint64_t v96 = *((void *)v36 + 4);
          uint64_t v98 = v92 + 40 * v86;
          if (v96 == v97)
          {
LABEL_124:
            uint64_t v84 = (float *)(v93 + 40);
            *((void *)v36 + 3) = v98;
            *((void *)v36 + 4) = v93 + 40;
            uint64_t v103 = *((void *)v36 + 5);
            *((void *)v36 + 5) = v94;
            if (!v96) {
              goto LABEL_126;
            }
            goto LABEL_125;
          }
        }
        else
        {
          uint64_t v94 = 0;
          uint64_t v93 = 40 * v86;
          uint64_t v97 = *((void *)v36 + 3);
          uint64_t v96 = *((void *)v36 + 4);
          uint64_t v98 = 40 * v86;
          if (v96 == v97) {
            goto LABEL_124;
          }
        }
        do
        {
          uint64_t v99 = *(void *)(v96 - 40);
          v96 -= 40;
          int v100 = *(_DWORD *)(v96 + 8);
          *(void *)(v98 - 40) = v99;
          v98 -= 40;
          *(_DWORD *)(v98 + 8) = v100;
          uint64_t v101 = *(void *)(v96 + 12);
          *(_DWORD *)(v98 + 20) = *(_DWORD *)(v96 + 20);
          *(void *)(v98 + 12) = v101;
          *(_DWORD *)(v98 + 24) = *(_DWORD *)(v96 + 24);
          uint64_t v102 = *(void *)(v96 + 28);
          *(_DWORD *)(v98 + 36) = *(_DWORD *)(v96 + 36);
          *(void *)(v98 + 28) = v102;
        }
        while (v96 != v97);
        uint64_t v96 = *((void *)v36 + 3);
        uint64_t v84 = (float *)(v93 + 40);
        *((void *)v36 + 3) = v98;
        *((void *)v36 + 4) = v93 + 40;
        uint64_t v103 = *((void *)v36 + 5);
        *((void *)v36 + 5) = v94;
        if (!v96) {
          goto LABEL_126;
        }
LABEL_125:
        (*(void (**)(void, uint64_t, uint64_t))(**((void **)v36 + 6) + 40))(*((void *)v36 + 6), v96, v103 - v96);
        goto LABEL_126;
      }
      if (v82)
      {
        *float32x2_t v82 = v73;
        v82[1] = v74;
        v82[2] = v75;
        v82[3] = -(float)((float)((float)(v28.__sinval * v27.__sinval) * v29.__cosval)
                        - (float)((float)(v28.__cosval * v27.__cosval) * v29.__sinval));
        v82[4] = (float)((float)(v28.__sinval * v27.__cosval) * v29.__cosval)
               + (float)((float)(v28.__cosval * v27.__sinval) * v29.__sinval);
        v82[5] = v77;
        v82[6] = v76;
        v82[7] = v79;
        v82[8] = v80;
        v82[9] = v81;
      }
      uint64_t v84 = v82 + 10;
LABEL_126:
      *((void *)v36 + 4) = v84;
      unsigned int v148 = v20;
      v153[0] = &v148;
      double result = std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(a4, &v148, (uint64_t)&std::piecewise_construct, v153);
      unint64_t v104 = result;
      uint64_t v105 = (_DWORD *)result[4];
      unint64_t v106 = result[5];
      if ((unint64_t)v105 >= v106)
      {
        uint64_t v107 = result[3];
        uint64_t v108 = ((uint64_t)v105 - v107) >> 2;
        unint64_t v109 = v108 + 1;
        if ((unint64_t)(v108 + 1) >> 62) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v110 = v106 - v107;
        if (v110 >> 1 > v109) {
          unint64_t v109 = v110 >> 1;
        }
        if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFFCLL) {
          uint64_t v111 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v111 = v109;
        }
        if (v111)
        {
          double result = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)result[6] + 16))(result[6], 4 * v111, 4);
          uint64_t v112 = (_DWORD *)result + v108;
          unint64_t v113 = (char *)result + 4 * v111;
          if (result) {
            *uint64_t v112 = v135;
          }
          int v8 = v129;
          uint64_t v114 = v104[3];
          uint64_t v115 = v104[4];
          uint64_t v116 = (uint64_t)result + 4 * v108;
          uint64_t v117 = v115 - v114;
          if (v115 == v114) {
            goto LABEL_149;
          }
        }
        else
        {
          unint64_t v113 = 0;
          uint64_t v112 = (_DWORD *)(4 * v108);
          int v8 = v129;
          uint64_t v114 = result[3];
          uint64_t v115 = result[4];
          uint64_t v116 = 4 * v108;
          uint64_t v117 = v115 - v114;
          if (v115 == v114) {
            goto LABEL_149;
          }
        }
        unint64_t v118 = v117 - 4;
        if (v118 < 0x1C)
        {
          uint64_t v116 = (uint64_t)v112;
        }
        else
        {
          uint64_t v116 = (uint64_t)v112;
          if ((unint64_t)(v115 - (void)v112) >= 0x20)
          {
            uint64_t v119 = (v118 >> 2) + 1;
            uint64_t v120 = 4 * (v119 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v121 = v115 - v120;
            uint64_t v116 = (uint64_t)&v112[v120 / 0xFFFFFFFFFFFFFFFCLL];
            uint64_t v122 = v112 - 4;
            uint64_t v123 = (long long *)(v115 - 16);
            uint64_t v124 = v119 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v125 = *v123;
              *(v122 - 1) = *(v123 - 1);
              *uint64_t v122 = v125;
              v122 -= 2;
              v123 -= 2;
              v124 -= 8;
            }
            while (v124);
            uint64_t v115 = v121;
            if (v119 == (v119 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_149:
              float v15 = v112 + 1;
              v104[3] = v116;
              v104[4] = v112 + 1;
              uint64_t v127 = v104[5];
              v104[5] = v113;
              if (v114) {
                double result = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v104[6] + 40))(v104[6], v114, v127 - v114);
              }
              goto LABEL_7;
            }
          }
        }
        do
        {
          int v126 = *(_DWORD *)(v115 - 4);
          v115 -= 4;
          *(_DWORD *)(v116 - 4) = v126;
          v116 -= 4;
        }
        while (v115 != v114);
        goto LABEL_149;
      }
      int v8 = v129;
      if (v105) {
        *uint64_t v105 = v135;
      }
      float v15 = v105 + 1;
LABEL_7:
      ++v14;
      v104[4] = v15;
      uint64_t v11 = *(void *)v8;
      v13 += 3;
      uint64_t v12 = v13;
      if (v13 >= (unint64_t)((uint64_t)(*((void *)v8 + 1) - *(void *)v8) >> 2)) {
        goto LABEL_151;
      }
    }
    BOOL v50 = (v33 & (v33 - 1)) != 0;
    if (v33 < 3) {
      BOOL v50 = 1;
    }
    unint64_t v51 = v50 | (2 * v33);
    unint64_t v52 = vcvtps_u32_f32(v39 / v40);
    if (v51 <= v52) {
      size_t prime = v52;
    }
    else {
      size_t prime = v51;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v33 = a3[1];
    if (prime <= v33)
    {
      if (prime >= v33) {
        goto LABEL_82;
      }
      unint64_t v64 = vcvtps_u32_f32((float)(unint64_t)a3[3] / *((float *)a3 + 8));
      if (v33 < 3 || (uint8x8_t v65 = (uint8x8_t)vcnt_s8((int8x8_t)v33), v65.i16[0] = vaddlv_u8(v65), v65.u32[0] > 1uLL))
      {
        unint64_t v64 = std::__next_prime(v64);
      }
      else
      {
        uint64_t v66 = 1 << -(char)__clz(v64 - 1);
        if (v64 >= 2) {
          unint64_t v64 = v66;
        }
      }
      if (prime <= v64) {
        size_t prime = v64;
      }
      if (prime >= v33)
      {
        unint64_t v33 = a3[1];
        if ((v33 & (v33 - 1)) == 0) {
          goto LABEL_83;
        }
LABEL_95:
        if (v33 <= v20)
        {
          unint64_t v5 = v20 % v33;
          uint64_t v41 = *a3;
          int v42 = *(void **)(*a3 + 8 * (v20 % v33));
          if (!v42) {
            goto LABEL_84;
          }
        }
        else
        {
          unint64_t v5 = v20;
          uint64_t v41 = *a3;
          int v42 = *(void **)(*a3 + 8 * v20);
          if (!v42) {
            goto LABEL_84;
          }
        }
LABEL_34:
        *(void *)int v36 = *v42;
        int v44 = v144;
        int v43 = v146;
        int v46 = v142;
        int v45 = v143;
        int v48 = v140;
        int v47 = v141;
        int v49 = v139;
LABEL_103:
        *int v42 = v36;
        goto LABEL_104;
      }
      if (!prime)
      {
        uint64_t v69 = (void *)*a3;
        *a3 = 0;
        if (v69) {
          operator delete(v69);
        }
        unint64_t v33 = 0;
        a3[1] = 0;
        goto LABEL_83;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v54 = operator new(8 * prime);
    uint64_t v55 = (void *)*a3;
    *a3 = (uint64_t)v54;
    if (v55) {
      operator delete(v55);
    }
    uint64_t v56 = 0;
    a3[1] = prime;
    do
      *(void *)(*a3 + 8 * v56++) = 0;
    while (prime != v56);
    uint64_t v57 = (void *)*v136;
    if (!*v136)
    {
LABEL_94:
      unint64_t v33 = prime;
      if ((prime & (prime - 1)) != 0) {
        goto LABEL_95;
      }
LABEL_83:
      unint64_t v5 = (v33 - 1) & v20;
      uint64_t v41 = *a3;
      int v42 = *(void **)(*a3 + 8 * v5);
      if (!v42) {
        goto LABEL_84;
      }
      goto LABEL_34;
    }
    size_t v58 = v57[1];
    size_t v59 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v60 = v58 & v59;
      *(void *)(*a3 + 8 * v60) = v136;
      for (int i = (void *)*v57; *v57; int i = (void *)*v57)
      {
        size_t v62 = i[1] & v59;
        if (v62 == v60)
        {
          uint64_t v57 = i;
        }
        else if (*(void *)(*a3 + 8 * v62))
        {
          *uint64_t v57 = *i;
          uint64_t v63 = 8 * v62;
          *int i = **(void **)(*a3 + v63);
          **(void **)(*a3 + v63) = i;
        }
        else
        {
          *(void *)(*a3 + 8 * v62) = v57;
          uint64_t v57 = i;
          size_t v60 = v62;
        }
      }
      goto LABEL_94;
    }
    if (v58 < prime)
    {
      *(void *)(*a3 + 8 * v58) = v136;
      uint64_t v67 = (void *)*v57;
      if (*v57) {
        goto LABEL_89;
      }
      goto LABEL_81;
    }
    v58 %= prime;
    *(void *)(*a3 + 8 * v58) = v136;
    uint64_t v67 = (void *)*v57;
    if (!*v57)
    {
LABEL_81:
      unint64_t v33 = prime;
LABEL_82:
      if ((v33 & (v33 - 1)) != 0) {
        goto LABEL_95;
      }
      goto LABEL_83;
    }
    while (1)
    {
LABEL_89:
      size_t v72 = v67[1];
      if (v72 >= prime) {
        v72 %= prime;
      }
      if (v72 == v58) {
        goto LABEL_88;
      }
      if (*(void *)(*a3 + 8 * v72))
      {
        *uint64_t v57 = *v67;
        uint64_t v71 = 8 * v72;
        void *v67 = **(void **)(*a3 + v71);
        **(void **)(*a3 + v71) = v67;
        uint64_t v67 = v57;
LABEL_88:
        uint64_t v57 = v67;
        uint64_t v67 = (void *)*v67;
        if (!v67) {
          goto LABEL_94;
        }
      }
      else
      {
        *(void *)(*a3 + 8 * v72) = v57;
        uint64_t v57 = v67;
        uint64_t v67 = (void *)*v67;
        size_t v58 = v72;
        if (!v67) {
          goto LABEL_94;
        }
      }
    }
  }
  double result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*result + 16))(result, 44 * v9, 4);
  uint64_t v149 = result;
  uint64_t v150 = result;
  int v128 = result;
  uint64_t v151 = (char *)result + 44 * v9;
  uint64_t v11 = *(void *)v8;
  if (*((void *)v8 + 1) != *(void *)v8) {
    goto LABEL_5;
  }
LABEL_151:
  if (v128)
  {
    uint64_t v150 = v128;
    return (void *)(*(uint64_t (**)(void *, void *, int64_t))(*v152 + 40))(v152, v128, v151 - (char *)v128);
  }
  return result;
}

void sub_18A45AC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void sub_18A45AC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
}

void sub_18A45AC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void sub_18A45AC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void sub_18A45ACAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void sub_18A45ACC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

uint64_t *std::vector<std::pair<int,geo::Transform<float>>,geo::StdAllocator<std::pair<int,geo::Transform<float>>,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t geo::codec::decodePointCloud(uint64_t a1, unsigned int *a2)
{
  if (*(void *)(a1 + 48) + (unint64_t)*a2 <= *(void *)(a1 + 56)) {
    operator new();
  }
  return 0;
}

void sub_18A45B468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__exception_guard_exceptions<std::vector<mgcl::gpcc::IntArrayBuffer *,geo::StdAllocator<mgcl::gpcc::IntArrayBuffer *,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100]((uint64_t **)(v27 - 96));
  std::vector<mgcl::gpcc::IntArrayBuffer,geo::StdAllocator<mgcl::gpcc::IntArrayBuffer,geo::codec::Allocator>>::~vector[abi:ne180100](&a13);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](&a17);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](&a21);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](&a27);
  mgcl::gpcc::Decoder::~Decoder((mgcl::gpcc::Decoder *)(v27 - 104));
  _Unwind_Resume(a1);
}

void sub_18A45B4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__exception_guard_exceptions<std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a17);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](&a27);
  mgcl::gpcc::Decoder::~Decoder((mgcl::gpcc::Decoder *)(v27 - 104));
  _Unwind_Resume(a1);
}

void sub_18A45B510(_Unwind_Exception *a1)
{
  mgcl::gpcc::Decoder::~Decoder((mgcl::gpcc::Decoder *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_18A45B524(_Unwind_Exception *a1)
{
  MEMORY[0x18C11F580](v1, 0x1030C40A5E9B400);
  _Unwind_Resume(a1);
}

void *geo::codec::transitLinkGetFromNodeID(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a1;
  if (!a1) {
    return v2;
  }
  float v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3) {
    return 0;
  }
  unint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  float v6 = v5;
  if (*v2 && v2[14] > (unint64_t)(2 * a2))
  {
    uint64_t v2 = **(void ***)(*(void *)(*v2 + 1680) + 8 * (v2[13] + 2 * a2));
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v2;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v2;
    }
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v6);
  return v2;
}

void *geo::codec::transitLinkGetToNodeID(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a1;
  if (!a1) {
    return v2;
  }
  float v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3) {
    return 0;
  }
  unint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  float v6 = v5;
  if (*v2 && (unint64_t v7 = (2 * a2) | 1, v2[14] > v7))
  {
    uint64_t v2 = **(void ***)(*(void *)(*v2 + 1680) + 8 * (v2[13] + v7));
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v2;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v2;
    }
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v6);
  return v2;
}

BOOL geo::codec::multiSectionFeatureIsSameRoad(geo::codec *this, const GeoCodecsRoadFeature *a2, const GeoCodecsRoadFeature *a3)
{
  BOOL result = 0;
  if (this && a2)
  {
    if (*((unsigned char *)this + 154) == 1)
    {
      if (*((unsigned char *)a2 + 154) != 1) {
        return 0;
      }
      if (*((unsigned __int8 *)this + 72) != *((unsigned __int8 *)a2 + 72))
      {
        int v6 = 1;
        return v6 == 0;
      }
      if (*((unsigned __int8 *)this + 73) == *((unsigned __int8 *)a2 + 73))
      {
        int v6 = geo::codec::_cmpShields((uint64_t)this, (uint64_t)a2);
        if (!v6) {
          return geo::codec::_cmpRoadNames((uint64_t)this, (uint64_t)a2) == 0;
        }
        return v6 == 0;
      }
      return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::_cmpShields(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(unsigned __int8 *)(result + 72);
    if (!*(unsigned char *)(result + 72)) {
      return 0;
    }
    unint64_t v5 = 0;
    while (1)
    {
      int v6 = *(std::__shared_weak_count **)(v2 + 8);
      if (v6 && (unint64_t v7 = std::__shared_weak_count::lock(v6)) != 0)
      {
        int v8 = v7;
        uint64_t v9 = *(void *)v2;
        if (v5 >= *(unsigned __int8 *)(v2 + 72) || v9 == 0)
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            goto LABEL_31;
          }
        }
        else
        {
          unint64_t v19 = *(void *)(v9 + 1064) + 32 * (v5 + *(unsigned int *)(v2 + 60));
          uint64_t v11 = *(const char **)v19;
          uint64_t v12 = *(void *)(v19 + 24);
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
LABEL_31:
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
      }
      if (!a2
        || (unsigned int v13 = *(std::__shared_weak_count **)(a2 + 8)) == 0
        || (int v14 = std::__shared_weak_count::lock(v13)) == 0)
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
        goto LABEL_24;
      }
      float v15 = v14;
      unint64_t v16 = 0;
      if (v5 >= *(unsigned __int8 *)(a2 + 72))
      {
        uint64_t v17 = 0;
        if (atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_24;
        }
LABEL_33:
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v15);
        goto LABEL_24;
      }
      uint64_t v17 = 0;
      if (*(void *)a2)
      {
        unint64_t v18 = *(void *)(*(void *)a2 + 1064) + 32 * (v5 + *(unsigned int *)(a2 + 60));
        unint64_t v16 = *(const char **)v18;
        uint64_t v17 = *(void *)(v18 + 24);
      }
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_33;
      }
LABEL_24:
      if (v12 != v17)
      {
        if (v12 < v17) {
          return 0xFFFFFFFFLL;
        }
        else {
          return 1;
        }
      }
      if ((unint64_t)v11 | (unint64_t)v16)
      {
        if (!v11 || !v16)
        {
          if (v11) {
            return 1;
          }
          else {
            return 0xFFFFFFFFLL;
          }
        }
        BOOL result = strcmp(v11, v16);
        if (result) {
          return result;
        }
      }
      if (v3 == ++v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t geo::codec::_cmpRoadNames(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = (uint64_t *)result;
    uint64_t v3 = *(unsigned __int8 *)(result + 73);
    if (!*(unsigned char *)(result + 73)) {
      return 0;
    }
    if (a2)
    {
      unint64_t v5 = 0;
      while (1)
      {
        int v6 = (std::__shared_weak_count *)v2[1];
        if (!v6 || (unint64_t v7 = std::__shared_weak_count::lock(v6)) == 0)
        {
          uint64_t v11 = 0;
          goto LABEL_16;
        }
        int v8 = v7;
        uint64_t v9 = *v2;
        if (v5 >= *((unsigned __int8 *)v2 + 73) || v9 == 0)
        {
          uint64_t v11 = 0;
          if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v11 = *(const char **)(*(void *)(v9 + 1048) + 24 * (v5 + *((unsigned int *)v2 + 14)));
          if (atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            goto LABEL_16;
          }
        }
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v8);
LABEL_16:
        uint64_t v12 = *(std::__shared_weak_count **)(a2 + 8);
        if (v12)
        {
          unsigned int v13 = std::__shared_weak_count::lock(v12);
          if (v13)
          {
            int v14 = v13;
            float v15 = 0;
            if (v5 < *(unsigned __int8 *)(a2 + 73) && *(void *)a2) {
              float v15 = *(const char **)(*(void *)(*(void *)a2 + 1048) + 24 * (v5 + *(unsigned int *)(a2 + 56)));
            }
            if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v14);
            }
            if (v11)
            {
              if (v15)
              {
                BOOL result = strcmp(v11, v15);
                if (result) {
                  return result;
                }
              }
            }
          }
        }
        if (v3 == ++v5) {
          return 0;
        }
      }
    }
    BOOL result = *(void *)(result + 8);
    if (result)
    {
      uint64_t v16 = v3 - 1;
LABEL_32:
      uint64_t v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)result);
      if (v17)
      {
        unint64_t v18 = v17;
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      while (v16)
      {
        BOOL result = v2[1];
        --v16;
        if (result) {
          goto LABEL_32;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::multiSectionFeatureElevations(uint64_t result, unint64_t a2, void *a3)
{
  if (result)
  {
    uint64_t v5 = result;
    if (*(unsigned int *)(result + 100) <= a2)
    {
      BOOL result = 0;
      *a3 = 0;
    }
    else
    {
      int v6 = geo::codec::vertexPoolForFeature(result);
      uint64_t v7 = *(unsigned int *)(v5 + 96);
      *a3 = 0;
      uint64_t v8 = v6[3];
      if (v8)
      {
        uint64_t v9 = (void *)(v6[4] + 16 * (v7 + a2));
        BOOL result = v8 + 4 * *v9;
        *a3 = v9[1];
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t *std::vector<mgcl::gpcc::IntArrayBuffer *,geo::StdAllocator<mgcl::gpcc::IntArrayBuffer *,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t *std::vector<mgcl::gpcc::IntArrayBuffer,geo::StdAllocator<mgcl::gpcc::IntArrayBuffer,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

void *geo::codec::multiSectionFeatureGetSectionData(uint64_t a1, void *a2, void *a3, void *a4)
{
  BOOL result = geo::codec::vertexPoolForFeature(a1);
  if (result)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 100);
    *a2 = v9;
    if (v9)
    {
      *a3 = result[4] + 16 * *(unsigned int *)(a1 + 96);
      *a4 = result[1] + 8 * *(void *)result[4];
    }
    else
    {
      *a3 = 0;
      *a4 = 0;
    }
  }
  else
  {
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
  }
  return result;
}

float geo::codec::buildingFootprintExtrusionHeight(uint64_t a1, unint64_t a2)
{
  float v2 = 0.0;
  if (*(unsigned int *)(a1 + 100) <= a2) {
    return v2;
  }
  float v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4) {
    return v2;
  }
  int v6 = std::__shared_weak_count::lock(v4);
  if (!v6) {
    return v2;
  }
  uint64_t v7 = v6;
  if (*(void *)a1) {
    float v2 = *(float *)(*(void *)(*(void *)a1 + 312) + 4 * (*(void *)(a1 + 112) + a2));
  }
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v2;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  return v2;
}

float geo::codec::buildingFootprintBaseHeight(uint64_t a1, unint64_t a2)
{
  float v2 = 0.0;
  if (*(unsigned int *)(a1 + 100) <= a2) {
    return v2;
  }
  float v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4) {
    return v2;
  }
  int v6 = std::__shared_weak_count::lock(v4);
  if (!v6) {
    return v2;
  }
  uint64_t v7 = v6;
  if (*(void *)a1)
  {
    uint64_t v8 = *(void *)(*(void *)a1 + 344);
    if (v8) {
      float v2 = *(float *)(v8 + 4 * (*(void *)(a1 + 120) + a2));
    }
  }
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v2;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  return v2;
}

uint64_t geo::codec::transitTravelTimeForLineAlongLink(void *a1, unint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  if (*a1 && a1[4] > a2 && (uint64_t v7 = *(void *)(*a1 + 1528)) != 0)
  {
    uint64_t v8 = *(unsigned int *)(v7 + 4 * (a1[3] + a2));
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v8;
    }
  }
  else
  {
    uint64_t v8 = 0;
    if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return v8;
    }
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v6);
  return v8;
}

geo::codec *geo::codec::multiSectionFeatureCharacteristicPoints(std::__shared_weak_count **this, GeoCodecsRoadFeature *a2, unint64_t *a3)
{
  uint64_t v3 = (geo::codec *)this;
  if (!this) {
    return v3;
  }
  float v4 = this[1];
  if (!v4) {
    return 0;
  }
  int v6 = std::__shared_weak_count::lock(v4);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)v3;
  if (*(void *)v3)
  {
    size_t v9 = v8[151];
    float v10 = (geo::codec *)v8[150];
    unint64_t __key = 0xCF3CF3CF3CF3CF3DLL * (((uint64_t)v3 - v8[4]) >> 3);
    uint64_t v11 = (geo::codec *)bsearch(&__key, v10, v9, 0x64uLL, (int (__cdecl *)(const void *, const void *))geo::codec::_searchForCharacteristicPoints(GeoCodecsCharacteristicPoint const*,unsigned long,unsigned long,unsigned long *)::$_0::__invoke);
    if (a2)
    {
      uint64_t v3 = v11;
      if (v11)
      {
        if (v11 > v10)
        {
          do
          {
            if (__key != *((_DWORD *)v3 - 24)) {
              break;
            }
            uint64_t v3 = (geo::codec *)((char *)v3 - 100);
          }
          while (v3 > v10);
        }
        *(void *)a2 = 0;
        uint64_t v12 = (geo::codec *)((char *)v10 + 100 * v9);
        if (v3 < v12)
        {
          unint64_t v13 = __key;
          uint64_t v14 = 1;
          float v15 = v3;
          do
          {
            if (v13 != *((_DWORD *)v15 + 1)) {
              break;
            }
            *(void *)a2 = v14;
            float v15 = (geo::codec *)((char *)v15 + 100);
            ++v14;
          }
          while (v15 < v12);
        }
        goto LABEL_18;
      }
      *(void *)a2 = 0;
    }
  }
  uint64_t v3 = 0;
LABEL_18:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v3;
}

void sub_18A45C294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *geo::codec::multiSectionFeatureBounds(float *a1)
{
  float v2 = a1 + 20;
  if ((a1[20] > a1[22] || a1[21] > a1[23]) && *((_DWORD *)a1 + 25))
  {
    for (unint64_t i = 0; i < *((unsigned int *)a1 + 25); ++i)
    {
      uint64_t v8 = geo::codec::vertexPoolForFeature((uint64_t)a1);
      if (v8
        && (uint64_t v9 = v8[4]) != 0
        && (unint64_t v10 = i + *((unsigned int *)a1 + 24), v8[5] > v10)
        && (unint64_t v11 = *(void *)(v9 + 16 * v10), v11 < v8[2]))
      {
        uint64_t v12 = *(void *)(v9 + 16 * v10 + 8);
        v5.f32[0] = a1[20];
        v4.f32[0] = a1[21];
        v6.f32[0] = a1[22];
        v7.f32[0] = a1[23];
        if ((int)v12 >= 1)
        {
          uint64_t v13 = v8[1];
          if (v12 >= 8uLL)
          {
            float32x4_t v7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 0);
            float32x4_t v6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 0);
            uint64_t v14 = v12 & 0xFFFFFFF8;
            float32x4_t v5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 0);
            float v15 = (const float *)(v13 + 8 * v11 + 32);
            uint64_t v16 = v14;
            float32x4_t v4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 0);
            float32x4_t v17 = v7;
            float32x4_t v18 = v6;
            float32x4_t v19 = v5;
            float32x4_t v20 = v4;
            do
            {
              float v21 = v15 - 8;
              float32x4x2_t v27 = vld2q_f32(v21);
              float32x4x2_t v28 = vld2q_f32(v15);
              float32x4_t v5 = vminnmq_f32(v5, v27.val[0]);
              float32x4_t v19 = vminnmq_f32(v19, v28.val[0]);
              float32x4_t v6 = vmaxnmq_f32(v6, v27.val[0]);
              float32x4_t v18 = vmaxnmq_f32(v18, v28.val[0]);
              float32x4_t v4 = vminnmq_f32(v4, v27.val[1]);
              float32x4_t v20 = vminnmq_f32(v20, v28.val[1]);
              float32x4_t v7 = vmaxnmq_f32(v7, v27.val[1]);
              float32x4_t v17 = vmaxnmq_f32(v17, v28.val[1]);
              v15 += 16;
              v16 -= 8;
            }
            while (v16);
            v4.f32[0] = vminnmvq_f32(vminnmq_f32(v4, v20));
            v5.f32[0] = vminnmvq_f32(vminnmq_f32(v5, v19));
            v6.f32[0] = vmaxnmvq_f32(vmaxnmq_f32(v6, v18));
            v7.f32[0] = vmaxnmvq_f32(vmaxnmq_f32(v7, v17));
            if ((v12 & 7) == 0) {
              goto LABEL_6;
            }
          }
          else
          {
            uint64_t v14 = 0;
          }
          uint64_t v22 = v12 - v14;
          float v23 = (float *)(v13 + 8 * v14 + 8 * v11 + 4);
          do
          {
            float v24 = *(v23 - 1);
            v5.f32[0] = fminf(v5.f32[0], v24);
            v6.f32[0] = fmaxf(v6.f32[0], v24);
            float v25 = *v23;
            v23 += 2;
            v4.f32[0] = fminf(v4.f32[0], v25);
            v7.f32[0] = fmaxf(v7.f32[0], v25);
            --v22;
          }
          while (v22);
        }
      }
      else
      {
        v5.f32[0] = a1[20];
        v4.f32[0] = a1[21];
        v6.f32[0] = a1[22];
        v7.f32[0] = a1[23];
      }
LABEL_6:
      a1[20] = v5.f32[0];
      a1[21] = v4.f32[0];
      a1[22] = v6.f32[0];
      a1[23] = v7.f32[0];
    }
  }
  return v2;
}

uint64_t geo::codec::decodeLocalizations(std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>> const&,std::string &,std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>&,std::vector<GeoCodecsLocalizationTableEntry,geo::StdAllocator<GeoCodecsLocalizationTableEntry,geo::codec::Allocator>> &,geo::codec::PBDataReaderInterface &)::$_0::__invoke(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 != *a2;
  }
}

uint64_t geo::codec::compareSearchingLocalizationTableEntries(geo::codec *this, void *a2, const void *a3)
{
  if (*a2 > *(void *)this) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *(void *)this;
  }
}

void GeoCodecsPointCloud::~GeoCodecsPointCloud(GeoCodecsPointCloud *this)
{
  uint64_t v2 = *((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 11) + 40))(*((void *)this + 11), v2, *((void *)this + 10) - v2);
  }
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 7) + 40))(*((void *)this + 7), v3, *((void *)this + 6) - v3);
  }
  uint64_t v4 = *(void *)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    (*(void (**)(void, uint64_t, uint64_t))(**((void **)this + 3) + 40))(*((void *)this + 3), v4, *((void *)this + 2) - v4);
  }
}

uint64_t geo::codec::_searchForCharacteristicPoints(GeoCodecsCharacteristicPoint const*,unsigned long,unsigned long,unsigned long *)::$_0::__invoke(unint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 4);
  if (*a1 < v2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 > v2;
  }
}

uint64_t std::__split_buffer<char,geo::StdAllocator<char,geo::codec::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) != v2) {
    *(void *)(a1 + 16) = v2;
  }
  if (*(void *)a1) {
    (*(void (**)(void, void, void))(***(void ***)(a1 + 32) + 40))(**(void **)(a1 + 32), *(void *)a1, *(void *)(a1 + 24) - *(void *)a1);
  }
  return a1;
}

char *std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(char *result, char *a2, unint64_t a3, long long *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    float32x4_t v6 = result;
    if (a3 == 2)
    {
      unint64_t v7 = *((void *)a2 - 3);
      unint64_t v8 = *((void *)result + 1);
      BOOL v9 = v7 >= v8;
      if (v7 == v8 && (v10 = *((void *)a2 - 2), v11 = *((void *)result + 2), BOOL v9 = v10 >= v11, v10 == v11))
      {
        if (*((void *)a2 - 1) >= *((void *)result + 3)) {
          return result;
        }
      }
      else if (v9)
      {
        return result;
      }
      float v31 = a2 - 32;
      long long v33 = *(_OWORD *)result;
      long long v32 = *((_OWORD *)result + 1);
      long long v34 = *((_OWORD *)a2 - 1);
      *(_OWORD *)BOOL result = *((_OWORD *)a2 - 2);
      *((_OWORD *)result + 1) = v34;
      *(_OWORD *)float v31 = v33;
      *((_OWORD *)v31 + 1) = v32;
    }
    else
    {
      if ((uint64_t)a3 <= 128)
      {
        if (result == a2) {
          return result;
        }
        uint64_t v13 = result + 32;
        if (result + 32 == a2) {
          return result;
        }
        uint64_t v14 = 0;
        float v15 = result;
LABEL_14:
        float32x4_t v17 = v15;
        float v15 = v13;
        unint64_t v18 = *((void *)v17 + 5);
        unint64_t v19 = *((void *)v17 + 1);
        if (v18 == v19)
        {
          unint64_t v20 = *((void *)v17 + 6);
          unint64_t v21 = *((void *)v17 + 2);
          if (v20 == v21)
          {
            if (*((void *)v17 + 7) >= *((void *)v17 + 3)) {
              goto LABEL_13;
            }
          }
          else if (v20 >= v21)
          {
            goto LABEL_13;
          }
        }
        else
        {
          if (v18 >= v19) {
            goto LABEL_13;
          }
          unint64_t v20 = *((void *)v17 + 6);
        }
        uint64_t v22 = *((void *)v17 + 4);
        unint64_t v23 = *((void *)v17 + 7);
        long long v24 = *((_OWORD *)v17 + 1);
        *(_OWORD *)float v15 = *(_OWORD *)v17;
        *((_OWORD *)v15 + 1) = v24;
        uint64_t v16 = v6;
        if (v17 == v6) {
          goto LABEL_12;
        }
        uint64_t v25 = v14;
        while (1)
        {
          float32x4x2_t v27 = &v6[v25];
          unint64_t v28 = *(void *)&v6[v25 - 24];
          BOOL v29 = v18 >= v28;
          if (v18 == v28 && (v30 = *((void *)v27 - 2), BOOL v29 = v20 >= v30, v20 == v30))
          {
            uint64_t v16 = &v6[v25];
            BOOL result = *(char **)&v6[v25 - 8];
            if (v23 >= (unint64_t)result) {
              goto LABEL_12;
            }
          }
          else if (v29)
          {
            uint64_t v16 = v17;
LABEL_12:
            *(void *)uint64_t v16 = v22;
            *((void *)v16 + 1) = v18;
            *((void *)v16 + 2) = v20;
            *((void *)v16 + 3) = v23;
LABEL_13:
            uint64_t v13 = v15 + 32;
            v14 += 32;
            if (v15 + 32 == a2) {
              return result;
            }
            goto LABEL_14;
          }
          v17 -= 32;
          long long v26 = *((_OWORD *)v27 - 1);
          *(_OWORD *)float32x4x2_t v27 = *((_OWORD *)v27 - 2);
          *((_OWORD *)v27 + 1) = v26;
          v25 -= 32;
          if (!v25)
          {
            uint64_t v16 = v6;
            goto LABEL_12;
          }
        }
      }
      int v36 = a4;
      unint64_t v37 = a3 >> 1;
      uint64_t v38 = &result[32 * (a3 >> 1)];
      unint64_t v39 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>((uint64_t)result, v38, v39, a4);
        float v40 = &v36[2 * v37];
        BOOL result = (char *)std::__stable_sort_move<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>((uint64_t)&v6[32 * (a3 >> 1)], a2, a3 - (a3 >> 1), v40);
        uint64_t v41 = &v36[2 * a3];
        int v42 = v40;
        while (v42 != v41)
        {
          unint64_t v45 = *((void *)v42 + 1);
          unint64_t v46 = *((void *)v36 + 1);
          BOOL v47 = v45 >= v46;
          if (v45 == v46)
          {
            unint64_t v48 = *((void *)v42 + 2);
            unint64_t v49 = *((void *)v36 + 2);
            BOOL v47 = v48 >= v49;
            if (v48 == v49) {
              BOOL v47 = *((void *)v42 + 3) >= *((void *)v36 + 3);
            }
          }
          if (v47)
          {
            long long v50 = *v36;
            long long v51 = v36[1];
            v36 += 2;
            *(_OWORD *)float32x4_t v6 = v50;
            *((_OWORD *)v6 + 1) = v51;
            v6 += 32;
            if (v36 == v40)
            {
LABEL_46:
              if (v42 != v41)
              {
                uint64_t v52 = 0;
                do
                {
                  uint64_t v53 = &v6[v52 * 16];
                  long long v54 = v42[v52 + 1];
                  *(_OWORD *)uint64_t v53 = v42[v52];
                  *((_OWORD *)v53 + 1) = v54;
                  v52 += 2;
                }
                while (&v42[v52] != v41);
              }
              return result;
            }
          }
          else
          {
            long long v43 = *v42;
            long long v44 = v42[1];
            v42 += 2;
            *(_OWORD *)float32x4_t v6 = v43;
            *((_OWORD *)v6 + 1) = v44;
            v6 += 32;
            if (v36 == v40) {
              goto LABEL_46;
            }
          }
        }
        if (v36 != v40)
        {
          uint64_t v55 = 0;
          do
          {
            uint64_t v56 = &v6[v55 * 16];
            long long v57 = v36[v55 + 1];
            *(_OWORD *)uint64_t v56 = v36[v55];
            *((_OWORD *)v56 + 1) = v57;
            v55 += 2;
          }
          while (&v36[v55] != v40);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(result, v38, v39, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(&v6[32 * (a3 >> 1)], a2, a3 - (a3 >> 1), v36, a5);
        return std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(v6, &v6[32 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v36, a5);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(uint64_t result, void *a2, unint64_t a3, long long *a4)
{
  if (!a3) {
    return result;
  }
  uint64_t v4 = a4;
  unint64_t v7 = (void *)result;
  if (a3 == 2)
  {
    BOOL v9 = (long long *)(a2 - 4);
    unint64_t v10 = *(a2 - 3);
    unint64_t v11 = *(void *)(result + 8);
    BOOL v12 = v10 >= v11;
    if (v10 == v11 && (v13 = *(a2 - 2), v14 = *(void *)(result + 16), BOOL v12 = v13 >= v14, v13 == v14))
    {
      if (*(a2 - 1) >= *(void *)(result + 24))
      {
LABEL_9:
        long long v15 = *(_OWORD *)(result + 16);
        *a4 = *(_OWORD *)result;
        a4[1] = v15;
        long long v16 = *v9;
        long long v17 = *((_OWORD *)a2 - 1);
LABEL_34:
        a4[2] = v16;
        a4[3] = v17;
        return result;
      }
    }
    else if (v12)
    {
      goto LABEL_9;
    }
    long long v39 = *((_OWORD *)a2 - 1);
    *a4 = *v9;
    a4[1] = v39;
    long long v16 = *(_OWORD *)result;
    long long v17 = *(_OWORD *)(result + 16);
    goto LABEL_34;
  }
  if (a3 == 1)
  {
    long long v8 = *(_OWORD *)(result + 16);
    *a4 = *(_OWORD *)result;
    a4[1] = v8;
  }
  else if ((uint64_t)a3 > 8)
  {
    unint64_t v40 = a3 >> 1;
    uint64_t v41 = 32 * (a3 >> 1);
    uint64_t v42 = result + v41;
    std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(result, result + v41, a3 >> 1, a4, a3 >> 1);
    BOOL result = std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(&v7[(unint64_t)v41 / 8], a2, a3 - v40, &v4[(unint64_t)v41 / 0x10], a3 - v40);
    long long v43 = &v7[(unint64_t)v41 / 8];
    while (v43 != a2)
    {
      unint64_t v46 = v43[1];
      unint64_t v47 = v7[1];
      BOOL v48 = v46 >= v47;
      if (v46 == v47)
      {
        unint64_t v49 = v43[2];
        unint64_t v50 = v7[2];
        BOOL v48 = v49 >= v50;
        if (v49 == v50) {
          BOOL v48 = v43[3] >= v7[3];
        }
      }
      if (v48)
      {
        long long v51 = *(_OWORD *)v7;
        long long v52 = *((_OWORD *)v7 + 1);
        v7 += 4;
        long long *v4 = v51;
        v4[1] = v52;
        v4 += 2;
        if (v7 == (void *)v42)
        {
LABEL_44:
          if (v43 != a2)
          {
            unint64_t v53 = 0;
            do
            {
              long long v54 = &v4[v53 / 2];
              long long v55 = *(_OWORD *)&v43[v53 + 2];
              *long long v54 = *(_OWORD *)&v43[v53];
              v54[1] = v55;
              v53 += 4;
            }
            while (&v43[v53] != a2);
          }
          return result;
        }
      }
      else
      {
        long long v44 = *(_OWORD *)v43;
        long long v45 = *((_OWORD *)v43 + 1);
        v43 += 4;
        long long *v4 = v44;
        v4[1] = v45;
        v4 += 2;
        if (v7 == (void *)v42) {
          goto LABEL_44;
        }
      }
    }
    if (v7 != (void *)v42)
    {
      unint64_t v56 = 0;
      do
      {
        long long v57 = &v4[v56 / 2];
        long long v58 = *(_OWORD *)&v7[v56 + 2];
        *long long v57 = *(_OWORD *)&v7[v56];
        v57[1] = v58;
        v56 += 4;
      }
      while (&v7[v56] != (void *)v42);
    }
  }
  else if ((void *)result != a2)
  {
    long long v18 = *(_OWORD *)(result + 16);
    *a4 = *(_OWORD *)result;
    a4[1] = v18;
    uint64_t v19 = result + 32;
    if ((void *)(result + 32) != a2)
    {
      uint64_t v20 = 0;
      unint64_t v21 = a4;
      do
      {
        long long v24 = v7;
        uint64_t v25 = v21;
        unint64_t v7 = (void *)v19;
        v21 += 2;
        unint64_t v26 = v24[5];
        unint64_t v27 = *((void *)v25 + 1);
        BOOL v28 = v26 >= v27;
        if (v26 == v27 && (v29 = v24[6], v30 = *((void *)v25 + 2), BOOL v28 = v29 >= v30, v29 == v30))
        {
          uint64_t v22 = v21;
          if (v24[7] >= *((void *)v25 + 3)) {
            goto LABEL_15;
          }
        }
        else
        {
          uint64_t v22 = v21;
          if (v28) {
            goto LABEL_15;
          }
        }
        long long v31 = v25[1];
        *unint64_t v21 = *v25;
        v21[1] = v31;
        uint64_t v22 = a4;
        if (v25 != a4)
        {
          uint64_t v32 = v20;
          while (1)
          {
            long long v34 = (long long *)((char *)a4 + v32);
            unint64_t v35 = v24[5];
            unint64_t v36 = *(void *)((char *)a4 + v32 - 24);
            if (v35 == v36)
            {
              unint64_t v37 = v24[6];
              unint64_t v38 = *((void *)v34 - 2);
              if (v37 == v38)
              {
                if (v24[7] >= *(void *)((char *)a4 + v32 - 8))
                {
LABEL_31:
                  uint64_t v22 = v25;
                  break;
                }
              }
              else if (v37 >= v38)
              {
                uint64_t v22 = (long long *)((char *)a4 + v32);
                break;
              }
            }
            else if (v35 >= v36)
            {
              goto LABEL_31;
            }
            v25 -= 2;
            long long v33 = *(v34 - 1);
            _OWORD *v34 = *(v34 - 2);
            v34[1] = v33;
            v32 -= 32;
            if (!v32)
            {
              uint64_t v22 = a4;
              break;
            }
          }
        }
LABEL_15:
        long long v23 = *((_OWORD *)v7 + 1);
        *uint64_t v22 = *(_OWORD *)v7;
        v22[1] = v23;
        uint64_t v19 = (uint64_t)(v7 + 4);
        v20 += 32;
      }
      while (v7 + 4 != a2);
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, _OWORD *a6, uint64_t a7)
{
  if (!a5) {
    return result;
  }
  uint64_t v8 = a5;
  while (a4 > a7 && v8 > a7)
  {
    if (!a4) {
      return result;
    }
    uint64_t v11 = 0;
    unint64_t v12 = *((void *)a2 + 1);
    uint64_t v13 = -a4;
    while (1)
    {
      unint64_t v14 = *(void *)&result[v11 + 8];
      BOOL v15 = v12 >= v14;
      if (v12 == v14)
      {
        unint64_t v16 = *((void *)a2 + 2);
        unint64_t v17 = *(void *)&result[v11 + 16];
        BOOL v15 = v16 >= v17;
        if (v16 == v17) {
          BOOL v15 = *((void *)a2 + 3) >= *(void *)&result[v11 + 24];
        }
      }
      if (!v15) {
        break;
      }
      v11 += 32;
      BOOL v15 = __CFADD__(v13++, 1);
      if (v15) {
        return result;
      }
    }
    uint64_t v18 = -v13;
    uint64_t v19 = &result[v11];
    if (-v13 < v8)
    {
      if (v8 >= 0) {
        uint64_t v20 = v8;
      }
      else {
        uint64_t v20 = v8 + 1;
      }
      uint64_t v21 = v20 >> 1;
      uint64_t v22 = &a2[32 * (v20 >> 1)];
      long long v23 = a2;
      if (v19 != a2)
      {
        unint64_t v24 = (a2 - result - v11) >> 5;
        unint64_t v25 = *((void *)v22 + 1);
        unint64_t v26 = *((void *)v22 + 2);
        long long v23 = &result[v11];
        do
        {
          unint64_t v27 = v24 >> 1;
          BOOL v28 = &v23[32 * (v24 >> 1)];
          unint64_t v29 = *((void *)v28 + 1);
          BOOL v30 = v25 >= v29;
          if (v25 == v29)
          {
            unint64_t v31 = *((void *)v28 + 2);
            BOOL v30 = v26 >= v31;
            if (v26 == v31) {
              BOOL v30 = *((void *)v22 + 3) >= *(void *)&v23[32 * v27 + 24];
            }
          }
          if (v30)
          {
            long long v23 = v28 + 32;
            unint64_t v27 = v24 + ~v27;
          }
          unint64_t v24 = v27;
        }
        while (v27);
      }
      uint64_t v32 = (v23 - result - v11) >> 5;
      uint64_t v41 = v22;
      if (v23 == a2) {
        goto LABEL_64;
      }
LABEL_42:
      uint64_t v41 = v23;
      if (a2 != v22)
      {
        if (v23 + 32 == a2)
        {
          long long v110 = *(_OWORD *)v23;
          long long v114 = *((_OWORD *)v23 + 1);
          int64_t v48 = v22 - a2;
          unint64_t v49 = a6;
          unint64_t v50 = a3;
          uint64_t v107 = v19;
          memmove(v23, a2, v22 - a2);
          uint64_t v19 = v107;
          a3 = v50;
          a6 = v49;
          uint64_t v41 = &v23[v48];
          *(_OWORD *)uint64_t v41 = v110;
          *((_OWORD *)v41 + 1) = v114;
        }
        else if (a2 + 32 == v22)
        {
          uint64_t v41 = v23 + 32;
          long long v111 = *((_OWORD *)v22 - 2);
          long long v115 = *((_OWORD *)v22 - 1);
          if (v22 - 32 != v23)
          {
            long long v51 = a6;
            long long v52 = a3;
            uint64_t v108 = v19;
            memmove(v23 + 32, v23, v22 - 32 - v23);
            uint64_t v19 = v108;
            a3 = v52;
            a6 = v51;
          }
          *(_OWORD *)long long v23 = v111;
          *((_OWORD *)v23 + 1) = v115;
        }
        else
        {
          uint64_t v42 = (a2 - v23) >> 5;
          uint64_t v43 = (v22 - a2) >> 5;
          if (v42 == v43)
          {
            uint64_t v44 = 0;
            do
            {
              long long v45 = &a2[v44];
              unint64_t v46 = &v23[v44];
              long long v109 = *(_OWORD *)&v23[v44];
              long long v113 = *(_OWORD *)&v23[v44 + 16];
              long long v47 = *(_OWORD *)&a2[v44 + 16];
              *(_OWORD *)unint64_t v46 = *(_OWORD *)&a2[v44];
              *((_OWORD *)v46 + 1) = v47;
              *(_OWORD *)long long v45 = v109;
              *((_OWORD *)v45 + 1) = v113;
              if (&v23[v44 + 32] == a2) {
                break;
              }
              v44 += 32;
            }
            while (v45 + 32 != v22);
            uint64_t v41 = a2;
          }
          else
          {
            uint64_t v53 = (v22 - a2) >> 5;
            uint64_t v54 = (a2 - v23) >> 5;
            do
            {
              uint64_t v55 = v54;
              uint64_t v54 = v53;
              uint64_t v53 = v55 % v53;
            }
            while (v53);
            if (v54)
            {
              unint64_t v56 = &v23[32 * v54];
              do
              {
                long long v57 = *((_OWORD *)v56 - 2);
                long long v58 = *((_OWORD *)v56 - 1);
                v56 -= 32;
                long long v116 = v58;
                size_t v59 = &v56[32 * v42];
                size_t v60 = v56;
                do
                {
                  uint64_t v61 = v60;
                  size_t v60 = v59;
                  long long v62 = *((_OWORD *)v59 + 1);
                  *(_OWORD *)uint64_t v61 = *(_OWORD *)v59;
                  *((_OWORD *)v61 + 1) = v62;
                  uint64_t v63 = (v22 - v59) >> 5;
                  BOOL v64 = __OFSUB__(v42, v63);
                  uint64_t v66 = v42 - v63;
                  char v65 = (v66 < 0) ^ v64;
                  size_t v59 = &v23[32 * v66];
                  if (v65) {
                    size_t v59 = &v60[32 * v42];
                  }
                }
                while (v59 != v56);
                *(_OWORD *)size_t v60 = v57;
                *((_OWORD *)v60 + 1) = v116;
              }
              while (v56 != v23);
            }
            uint64_t v41 = &v23[32 * v43];
          }
        }
      }
      goto LABEL_64;
    }
    if (v13 == -1)
    {
      uint64_t v102 = &result[v11];
      long long v112 = *(_OWORD *)v102;
      long long v117 = *((_OWORD *)v102 + 1);
      long long v103 = *((_OWORD *)a2 + 1);
      *(_OWORD *)uint64_t v102 = *(_OWORD *)a2;
      *((_OWORD *)v102 + 1) = v103;
      *(_OWORD *)a2 = v112;
      *((_OWORD *)a2 + 1) = v117;
      return result;
    }
    if (v13 > 0) {
      uint64_t v18 = 1 - v13;
    }
    uint64_t v32 = v18 >> 1;
    long long v23 = &result[32 * (v18 >> 1) + v11];
    uint64_t v22 = a3;
    if (a3 != a2)
    {
      unint64_t v33 = (a3 - a2) >> 5;
      unint64_t v34 = *((void *)v23 + 1);
      unint64_t v35 = *((void *)v23 + 2);
      uint64_t v22 = a2;
      do
      {
        unint64_t v36 = v33 >> 1;
        unint64_t v37 = &v22[32 * (v33 >> 1)];
        unint64_t v38 = *((void *)v37 + 1);
        BOOL v39 = v38 >= v34;
        if (v38 == v34)
        {
          unint64_t v40 = *((void *)v37 + 2);
          BOOL v39 = v40 >= v35;
          if (v40 == v35) {
            BOOL v39 = *(void *)&v22[32 * v36 + 24] >= *((void *)v23 + 3);
          }
        }
        if (!v39)
        {
          uint64_t v22 = v37 + 32;
          unint64_t v36 = v33 + ~v36;
        }
        unint64_t v33 = v36;
      }
      while (v36);
    }
    uint64_t v21 = (v22 - a2) >> 5;
    uint64_t v41 = v22;
    if (v23 != a2) {
      goto LABEL_42;
    }
LABEL_64:
    a4 = -(v32 + v13);
    uint64_t v67 = v8 - v21;
    if (v32 + v21 >= v8 - (v32 + v21) - v13)
    {
      uint64_t v71 = -(v32 + v13);
      uint64_t v72 = v8 - v21;
      float v73 = a6;
      float v74 = v19;
      std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(v41, v22, a3, v71, v72, a6, a7);
      BOOL result = v74;
      a4 = v32;
      a3 = v41;
      uint64_t v8 = v21;
      a2 = v23;
      a6 = v73;
      if (!v21) {
        return result;
      }
    }
    else
    {
      uint64_t v68 = v32;
      uint64_t v69 = a6;
      unint64_t v70 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(v19, v23, v41, v68, v21, a6, a7);
      a3 = v70;
      BOOL result = v41;
      v8 -= v21;
      a2 = v22;
      a6 = v69;
      if (!v67) {
        return result;
      }
    }
  }
  if (a4 <= v8)
  {
    if (result != a2)
    {
      unint64_t v88 = 0;
      do
      {
        uint64_t v89 = &a6[v88 / 0x10];
        long long v90 = *(_OWORD *)&result[v88 + 16];
        *uint64_t v89 = *(_OWORD *)&result[v88];
        v89[1] = v90;
        v88 += 32;
      }
      while (&result[v88] != a2);
      if (v88)
      {
        float v91 = (char *)&a6[v88 / 0x10];
        uint64_t v92 = (char *)a6;
        while (a2 != a3)
        {
          unint64_t v95 = *((void *)a2 + 1);
          unint64_t v96 = *((void *)v92 + 1);
          BOOL v97 = v95 >= v96;
          if (v95 == v96)
          {
            unint64_t v98 = *((void *)a2 + 2);
            unint64_t v99 = *((void *)v92 + 2);
            BOOL v97 = v98 >= v99;
            if (v98 == v99) {
              BOOL v97 = *((void *)a2 + 3) >= *((void *)v92 + 3);
            }
          }
          if (v97)
          {
            long long v100 = *(_OWORD *)v92;
            long long v101 = *((_OWORD *)v92 + 1);
            v92 += 32;
            *(_OWORD *)BOOL result = v100;
            *((_OWORD *)result + 1) = v101;
            result += 32;
            if (v91 == v92) {
              return result;
            }
          }
          else
          {
            long long v93 = *(_OWORD *)a2;
            long long v94 = *((_OWORD *)a2 + 1);
            a2 += 32;
            *(_OWORD *)BOOL result = v93;
            *((_OWORD *)result + 1) = v94;
            result += 32;
            if (v91 == v92) {
              return result;
            }
          }
        }
        return (char *)memmove(result, v92, (char *)a6 - v92 + v88);
      }
    }
  }
  else if (a2 != a3)
  {
    unint64_t v75 = 0;
    do
    {
      float v76 = &a6[v75 / 0x10];
      long long v77 = *(_OWORD *)&a2[v75 + 16];
      *float v76 = *(_OWORD *)&a2[v75];
      v76[1] = v77;
      v75 += 32;
    }
    while (&a2[v75] != a3);
    if (v75)
    {
      float v78 = &a6[v75 / 0x10];
      float v79 = a3 - 32;
      while (a2 != result)
      {
        float v81 = a2 - 32;
        unint64_t v82 = *((void *)v78 - 3);
        unint64_t v83 = *((void *)a2 - 3);
        BOOL v84 = v82 >= v83;
        if (v82 == v83)
        {
          unint64_t v85 = *((void *)v78 - 2);
          unint64_t v86 = *((void *)a2 - 2);
          BOOL v84 = v85 >= v86;
          if (v85 == v86) {
            BOOL v84 = *((void *)v78 - 1) >= *((void *)a2 - 1);
          }
        }
        if (v84)
        {
          v78 -= 2;
          long long v80 = v78[1];
          *(_OWORD *)float v79 = *v78;
          *((_OWORD *)v79 + 1) = v80;
          v79 -= 32;
          if (v78 == a6) {
            return result;
          }
        }
        else
        {
          a2 -= 32;
          long long v87 = *((_OWORD *)v81 + 1);
          *(_OWORD *)float v79 = *(_OWORD *)v81;
          *((_OWORD *)v79 + 1) = v87;
          v79 -= 32;
          if (v78 == a6) {
            return result;
          }
        }
      }
      uint64_t v104 = 0;
      do
      {
        uint64_t v105 = &v79[v104 * 16];
        long long v106 = v78[v104 - 1];
        *(_OWORD *)uint64_t v105 = v78[v104 - 2];
        *((_OWORD *)v105 + 1) = v106;
        v104 -= 2;
      }
      while (&v78[v104] != a6);
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(uint64_t result, char *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = result;
    if (a3 == 2)
    {
      unsigned int v7 = *((_DWORD *)a2 - 24);
      unsigned int v8 = *(_DWORD *)(result + 4);
      BOOL v9 = v7 >= v8;
      if (v7 == v8 && (v10 = *((_DWORD *)a2 - 23), v11 = *(_DWORD *)(result + 8), BOOL v9 = v10 >= v11, v10 == v11))
      {
        if (*((_DWORD *)a2 - 22) >= *(_DWORD *)(result + 12)) {
          return result;
        }
      }
      else if (v9)
      {
        return result;
      }
      unint64_t v36 = a2 - 100;
      long long v88 = *(_OWORD *)(result + 64);
      long long v90 = *(_OWORD *)(result + 80);
      int v91 = *(_DWORD *)(result + 96);
      long long v80 = *(_OWORD *)result;
      long long v82 = *(_OWORD *)(result + 16);
      long long v84 = *(_OWORD *)(result + 32);
      long long v86 = *(_OWORD *)(result + 48);
      long long v38 = *(_OWORD *)(a2 - 84);
      long long v37 = *(_OWORD *)(a2 - 68);
      *(_OWORD *)BOOL result = *(_OWORD *)(a2 - 100);
      *(_OWORD *)(result + 16) = v38;
      *(_OWORD *)(result + 32) = v37;
      long long v40 = *(_OWORD *)(a2 - 36);
      long long v39 = *(_OWORD *)(a2 - 20);
      long long v41 = *(_OWORD *)(a2 - 52);
      *(_DWORD *)(result + 96) = *((_DWORD *)a2 - 1);
      *(_OWORD *)(result + 64) = v40;
      *(_OWORD *)(result + 80) = v39;
      *(_OWORD *)(result + 48) = v41;
      *(_OWORD *)unint64_t v36 = v80;
      *((_OWORD *)v36 + 1) = v82;
      *((_DWORD *)v36 + 24) = v91;
      *((_OWORD *)v36 + 4) = v88;
      *((_OWORD *)v36 + 5) = v90;
      *((_OWORD *)v36 + 2) = v84;
      *((_OWORD *)v36 + 3) = v86;
    }
    else
    {
      if ((uint64_t)a3 <= 128)
      {
        if ((char *)result == a2) {
          return result;
        }
        uint64_t v13 = result + 100;
        if ((char *)(result + 100) == a2) {
          return result;
        }
        uint64_t v14 = 0;
        uint64_t v15 = result;
LABEL_14:
        uint64_t v17 = v15;
        uint64_t v15 = v13;
        unsigned int v18 = *(_DWORD *)(v17 + 104);
        unsigned int v19 = *(_DWORD *)(v17 + 4);
        if (v18 == v19)
        {
          unsigned int v20 = *(_DWORD *)(v17 + 108);
          unsigned int v21 = *(_DWORD *)(v17 + 8);
          if (v20 == v21)
          {
            if (*(_DWORD *)(v17 + 112) >= *(_DWORD *)(v17 + 12)) {
              goto LABEL_13;
            }
          }
          else if (v20 >= v21)
          {
            goto LABEL_13;
          }
        }
        else
        {
          if (v18 >= v19) {
            goto LABEL_13;
          }
          unsigned int v20 = *(_DWORD *)(v17 + 108);
        }
        unsigned int v22 = *(_DWORD *)(v17 + 112);
        long long v79 = *(_OWORD *)(v17 + 116);
        long long v81 = *(_OWORD *)(v17 + 132);
        int v89 = *(_DWORD *)(v17 + 196);
        long long v85 = *(_OWORD *)(v17 + 164);
        long long v87 = *(_OWORD *)(v17 + 180);
        long long v83 = *(_OWORD *)(v17 + 148);
        long long v23 = *(_OWORD *)(v17 + 48);
        int v25 = *(_DWORD *)(v17 + 96);
        int v24 = *(_DWORD *)(v17 + 100);
        *(_OWORD *)(v15 + 32) = *(_OWORD *)(v17 + 32);
        *(_OWORD *)(v15 + 48) = v23;
        *(_DWORD *)(v15 + 96) = v25;
        long long v26 = *(_OWORD *)(v17 + 16);
        *(_OWORD *)uint64_t v15 = *(_OWORD *)v17;
        *(_OWORD *)(v15 + 16) = v26;
        long long v27 = *(_OWORD *)(v17 + 80);
        uint64_t v16 = v6;
        *(_OWORD *)(v15 + 64) = *(_OWORD *)(v17 + 64);
        *(_OWORD *)(v15 + 80) = v27;
        if (v17 == v6) {
          goto LABEL_12;
        }
        uint64_t v28 = v14;
        while (1)
        {
          uint64_t v32 = v6 + v28;
          unsigned int v33 = *(_DWORD *)(v6 + v28 - 96);
          BOOL v34 = v18 >= v33;
          if (v18 == v33 && (v35 = *(_DWORD *)(v32 - 92), BOOL v34 = v20 >= v35, v20 == v35))
          {
            uint64_t v16 = v6 + v28;
            BOOL result = *(unsigned int *)(v6 + v28 - 88);
            if (v22 >= result) {
              goto LABEL_12;
            }
          }
          else if (v34)
          {
            uint64_t v16 = v17;
LABEL_12:
            *(_DWORD *)uint64_t v16 = v24;
            *(_DWORD *)(v16 + 4) = v18;
            *(_DWORD *)(v16 + 8) = v20;
            *(_DWORD *)(v16 + 12) = v22;
            *(_OWORD *)(v16 + 48) = v83;
            *(_OWORD *)(v16 + 64) = v85;
            *(_OWORD *)(v16 + 80) = v87;
            *(_DWORD *)(v16 + 96) = v89;
            *(_OWORD *)(v16 + 16) = v79;
            *(_OWORD *)(v16 + 32) = v81;
LABEL_13:
            uint64_t v13 = v15 + 100;
            v14 += 100;
            if ((char *)(v15 + 100) == a2) {
              return result;
            }
            goto LABEL_14;
          }
          v17 -= 100;
          long long v29 = *(_OWORD *)(v32 - 20);
          *(_OWORD *)(v32 + 64) = *(_OWORD *)(v32 - 36);
          *(_OWORD *)(v32 + 80) = v29;
          BOOL result = *(unsigned int *)(v32 - 4);
          *(_DWORD *)(v32 + 96) = result;
          long long v30 = *(_OWORD *)(v32 - 84);
          *(_OWORD *)uint64_t v32 = *(_OWORD *)(v32 - 100);
          *(_OWORD *)(v32 + 16) = v30;
          long long v31 = *(_OWORD *)(v32 - 52);
          *(_OWORD *)(v32 + 32) = *(_OWORD *)(v32 - 68);
          *(_OWORD *)(v32 + 48) = v31;
          v28 -= 100;
          if (!v28)
          {
            uint64_t v16 = v6;
            goto LABEL_12;
          }
        }
      }
      uint64_t v43 = a4;
      unint64_t v44 = a3 >> 1;
      uint64_t v45 = result + 100 * (a3 >> 1);
      unint64_t v46 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(result, v45, v46, a4);
        uint64_t v47 = v43 + 100 * v44;
        BOOL result = std::__stable_sort_move<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(v6 + 100 * (a3 >> 1), (uint64_t)a2, a3 - (a3 >> 1), v47);
        unint64_t v48 = v43 + 100 * a3;
        uint64_t v49 = v47;
        while (v49 != v48)
        {
          unsigned int v55 = *(_DWORD *)(v49 + 4);
          unsigned int v56 = *(_DWORD *)(v43 + 4);
          BOOL v57 = v55 >= v56;
          if (v55 == v56)
          {
            unsigned int v58 = *(_DWORD *)(v49 + 8);
            unsigned int v59 = *(_DWORD *)(v43 + 8);
            BOOL v57 = v58 >= v59;
            if (v58 == v59) {
              BOOL v57 = *(_DWORD *)(v49 + 12) >= *(_DWORD *)(v43 + 12);
            }
          }
          if (v57)
          {
            long long v60 = *(_OWORD *)v43;
            long long v61 = *(_OWORD *)(v43 + 32);
            *(_OWORD *)(v6 + 16) = *(_OWORD *)(v43 + 16);
            *(_OWORD *)(v6 + 32) = v61;
            *(_OWORD *)uint64_t v6 = v60;
            long long v62 = *(_OWORD *)(v43 + 48);
            long long v63 = *(_OWORD *)(v43 + 64);
            long long v64 = *(_OWORD *)(v43 + 80);
            *(_DWORD *)(v6 + 96) = *(_DWORD *)(v43 + 96);
            *(_OWORD *)(v6 + 64) = v63;
            *(_OWORD *)(v6 + 80) = v64;
            *(_OWORD *)(v6 + 48) = v62;
            v43 += 100;
            v6 += 100;
            if (v43 == v47)
            {
LABEL_46:
              if (v49 != v48)
              {
                uint64_t v65 = 0;
                do
                {
                  uint64_t v66 = v6 + v65;
                  long long v67 = *(_OWORD *)(v49 + v65);
                  long long v68 = *(_OWORD *)(v49 + v65 + 32);
                  *(_OWORD *)(v66 + 16) = *(_OWORD *)(v49 + v65 + 16);
                  *(_OWORD *)(v66 + 32) = v68;
                  *(_OWORD *)uint64_t v66 = v67;
                  long long v69 = *(_OWORD *)(v49 + v65 + 48);
                  long long v70 = *(_OWORD *)(v49 + v65 + 64);
                  long long v71 = *(_OWORD *)(v49 + v65 + 80);
                  *(_DWORD *)(v66 + 96) = *(_DWORD *)(v49 + v65 + 96);
                  *(_OWORD *)(v66 + 64) = v70;
                  *(_OWORD *)(v66 + 80) = v71;
                  *(_OWORD *)(v66 + 48) = v69;
                  v65 += 100;
                }
                while (v49 + v65 != v48);
              }
              return result;
            }
          }
          else
          {
            long long v50 = *(_OWORD *)v49;
            long long v51 = *(_OWORD *)(v49 + 32);
            *(_OWORD *)(v6 + 16) = *(_OWORD *)(v49 + 16);
            *(_OWORD *)(v6 + 32) = v51;
            *(_OWORD *)uint64_t v6 = v50;
            long long v52 = *(_OWORD *)(v49 + 48);
            long long v53 = *(_OWORD *)(v49 + 64);
            long long v54 = *(_OWORD *)(v49 + 80);
            *(_DWORD *)(v6 + 96) = *(_DWORD *)(v49 + 96);
            *(_OWORD *)(v6 + 64) = v53;
            *(_OWORD *)(v6 + 80) = v54;
            *(_OWORD *)(v6 + 48) = v52;
            v49 += 100;
            v6 += 100;
            if (v43 == v47) {
              goto LABEL_46;
            }
          }
        }
        if (v43 != v47)
        {
          uint64_t v72 = 0;
          do
          {
            uint64_t v73 = v6 + v72;
            long long v74 = *(_OWORD *)(v43 + v72);
            long long v75 = *(_OWORD *)(v43 + v72 + 32);
            *(_OWORD *)(v73 + 16) = *(_OWORD *)(v43 + v72 + 16);
            *(_OWORD *)(v73 + 32) = v75;
            *(_OWORD *)uint64_t v73 = v74;
            long long v76 = *(_OWORD *)(v43 + v72 + 48);
            long long v77 = *(_OWORD *)(v43 + v72 + 64);
            long long v78 = *(_OWORD *)(v43 + v72 + 80);
            *(_DWORD *)(v73 + 96) = *(_DWORD *)(v43 + v72 + 96);
            *(_OWORD *)(v73 + 64) = v77;
            *(_OWORD *)(v73 + 80) = v78;
            *(_OWORD *)(v73 + 48) = v76;
            v72 += 100;
          }
          while (v43 + v72 != v47);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(result, v45, v46, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(v6 + 100 * (a3 >> 1), a2, a3 - (a3 >> 1), v43, a5);
        return (uint64_t)std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>((char *)v6, (char *)(v6 + 100 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (char *)v43, a5);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (!a3) {
    return result;
  }
  uint64_t v4 = a4;
  uint64_t v7 = result;
  if (a3 == 2)
  {
    uint64_t v13 = (long long *)(a2 - 100);
    unsigned int v14 = *(_DWORD *)(a2 - 96);
    unsigned int v15 = *(_DWORD *)(result + 4);
    BOOL v16 = v14 >= v15;
    if (v14 == v15 && (v17 = *(_DWORD *)(a2 - 92), v18 = *(_DWORD *)(result + 8), BOOL v16 = v17 >= v18, v17 == v18))
    {
      if (*(_DWORD *)(a2 - 88) >= *(_DWORD *)(result + 12))
      {
LABEL_9:
        long long v19 = *(_OWORD *)result;
        long long v20 = *(_OWORD *)(result + 32);
        *(_OWORD *)(a4 + 16) = *(_OWORD *)(result + 16);
        *(_OWORD *)(a4 + 32) = v20;
        *(_OWORD *)a4 = v19;
        long long v21 = *(_OWORD *)(result + 48);
        long long v22 = *(_OWORD *)(result + 64);
        long long v23 = *(_OWORD *)(result + 80);
        *(_DWORD *)(a4 + 96) = *(_DWORD *)(result + 96);
        *(_OWORD *)(a4 + 64) = v22;
        *(_OWORD *)(a4 + 80) = v23;
        *(_OWORD *)(a4 + 48) = v21;
        long long v25 = *(_OWORD *)(a2 - 36);
        long long v24 = *(_OWORD *)(a2 - 20);
        int v26 = *(_DWORD *)(a2 - 4);
        *(_OWORD *)(a4 + 148) = *(_OWORD *)(a2 - 52);
        *(_DWORD *)(a4 + 196) = v26;
        *(_OWORD *)(a4 + 180) = v24;
        *(_OWORD *)(a4 + 164) = v25;
        long long v27 = *v13;
        long long v28 = *(_OWORD *)(a2 - 84);
        long long v29 = *(_OWORD *)(a2 - 68);
LABEL_34:
        *(_OWORD *)(a4 + 132) = v29;
        *(_OWORD *)(a4 + 116) = v28;
        *(_OWORD *)(a4 + 100) = v27;
        return result;
      }
    }
    else if (v16)
    {
      goto LABEL_9;
    }
    long long v63 = *v13;
    long long v64 = *(_OWORD *)(a2 - 68);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(a2 - 84);
    *(_OWORD *)(a4 + 32) = v64;
    *(_OWORD *)a4 = v63;
    long long v65 = *(_OWORD *)(a2 - 52);
    long long v66 = *(_OWORD *)(a2 - 36);
    long long v67 = *(_OWORD *)(a2 - 20);
    *(_DWORD *)(a4 + 96) = *(_DWORD *)(a2 - 4);
    *(_OWORD *)(a4 + 64) = v66;
    *(_OWORD *)(a4 + 80) = v67;
    *(_OWORD *)(a4 + 48) = v65;
    long long v69 = *(_OWORD *)(result + 64);
    long long v68 = *(_OWORD *)(result + 80);
    int v70 = *(_DWORD *)(result + 96);
    *(_OWORD *)(a4 + 148) = *(_OWORD *)(result + 48);
    *(_DWORD *)(a4 + 196) = v70;
    *(_OWORD *)(a4 + 180) = v68;
    *(_OWORD *)(a4 + 164) = v69;
    long long v27 = *(_OWORD *)result;
    long long v28 = *(_OWORD *)(result + 16);
    long long v29 = *(_OWORD *)(result + 32);
    goto LABEL_34;
  }
  if (a3 == 1)
  {
    long long v8 = *(_OWORD *)result;
    long long v9 = *(_OWORD *)(result + 32);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(result + 16);
    *(_OWORD *)(a4 + 32) = v9;
    *(_OWORD *)a4 = v8;
    long long v10 = *(_OWORD *)(result + 48);
    long long v11 = *(_OWORD *)(result + 64);
    long long v12 = *(_OWORD *)(result + 80);
    *(_DWORD *)(a4 + 96) = *(_DWORD *)(result + 96);
    *(_OWORD *)(a4 + 64) = v11;
    *(_OWORD *)(a4 + 80) = v12;
    *(_OWORD *)(a4 + 48) = v10;
  }
  else if ((uint64_t)a3 > 8)
  {
    unint64_t v71 = a3 >> 1;
    uint64_t v72 = 100 * (a3 >> 1);
    uint64_t v73 = result + v72;
    std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(result, result + v72, a3 >> 1, a4, a3 >> 1);
    BOOL result = std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(v7 + v72, a2, a3 - v71, v4 + v72, a3 - v71);
    uint64_t v74 = v7 + v72;
    while (v74 != a2)
    {
      unsigned int v80 = *(_DWORD *)(v74 + 4);
      unsigned int v81 = *(_DWORD *)(v7 + 4);
      BOOL v82 = v80 >= v81;
      if (v80 == v81)
      {
        unsigned int v83 = *(_DWORD *)(v74 + 8);
        unsigned int v84 = *(_DWORD *)(v7 + 8);
        BOOL v82 = v83 >= v84;
        if (v83 == v84) {
          BOOL v82 = *(_DWORD *)(v74 + 12) >= *(_DWORD *)(v7 + 12);
        }
      }
      if (v82)
      {
        long long v85 = *(_OWORD *)v7;
        long long v86 = *(_OWORD *)(v7 + 32);
        *(_OWORD *)(v4 + 16) = *(_OWORD *)(v7 + 16);
        *(_OWORD *)(v4 + 32) = v86;
        *(_OWORD *)uint64_t v4 = v85;
        long long v87 = *(_OWORD *)(v7 + 48);
        long long v88 = *(_OWORD *)(v7 + 64);
        long long v89 = *(_OWORD *)(v7 + 80);
        *(_DWORD *)(v4 + 96) = *(_DWORD *)(v7 + 96);
        *(_OWORD *)(v4 + 64) = v88;
        *(_OWORD *)(v4 + 80) = v89;
        *(_OWORD *)(v4 + 48) = v87;
        v7 += 100;
        v4 += 100;
        if (v7 == v73)
        {
LABEL_44:
          if (v74 != a2)
          {
            uint64_t v90 = 0;
            do
            {
              uint64_t v91 = v4 + v90;
              long long v92 = *(_OWORD *)(v74 + v90);
              long long v93 = *(_OWORD *)(v74 + v90 + 32);
              *(_OWORD *)(v91 + 16) = *(_OWORD *)(v74 + v90 + 16);
              *(_OWORD *)(v91 + 32) = v93;
              *(_OWORD *)uint64_t v91 = v92;
              long long v94 = *(_OWORD *)(v74 + v90 + 48);
              long long v95 = *(_OWORD *)(v74 + v90 + 64);
              long long v96 = *(_OWORD *)(v74 + v90 + 80);
              *(_DWORD *)(v91 + 96) = *(_DWORD *)(v74 + v90 + 96);
              *(_OWORD *)(v91 + 64) = v95;
              *(_OWORD *)(v91 + 80) = v96;
              *(_OWORD *)(v91 + 48) = v94;
              v90 += 100;
            }
            while (v74 + v90 != a2);
          }
          return result;
        }
      }
      else
      {
        long long v75 = *(_OWORD *)v74;
        long long v76 = *(_OWORD *)(v74 + 32);
        *(_OWORD *)(v4 + 16) = *(_OWORD *)(v74 + 16);
        *(_OWORD *)(v4 + 32) = v76;
        *(_OWORD *)uint64_t v4 = v75;
        long long v77 = *(_OWORD *)(v74 + 48);
        long long v78 = *(_OWORD *)(v74 + 64);
        long long v79 = *(_OWORD *)(v74 + 80);
        *(_DWORD *)(v4 + 96) = *(_DWORD *)(v74 + 96);
        *(_OWORD *)(v4 + 64) = v78;
        *(_OWORD *)(v4 + 80) = v79;
        *(_OWORD *)(v4 + 48) = v77;
        v74 += 100;
        v4 += 100;
        if (v7 == v73) {
          goto LABEL_44;
        }
      }
    }
    if (v7 != v73)
    {
      uint64_t v97 = 0;
      do
      {
        uint64_t v98 = v4 + v97;
        long long v99 = *(_OWORD *)(v7 + v97);
        long long v100 = *(_OWORD *)(v7 + v97 + 32);
        *(_OWORD *)(v98 + 16) = *(_OWORD *)(v7 + v97 + 16);
        *(_OWORD *)(v98 + 32) = v100;
        *(_OWORD *)uint64_t v98 = v99;
        long long v101 = *(_OWORD *)(v7 + v97 + 48);
        long long v102 = *(_OWORD *)(v7 + v97 + 64);
        long long v103 = *(_OWORD *)(v7 + v97 + 80);
        *(_DWORD *)(v98 + 96) = *(_DWORD *)(v7 + v97 + 96);
        *(_OWORD *)(v98 + 64) = v102;
        *(_OWORD *)(v98 + 80) = v103;
        *(_OWORD *)(v98 + 48) = v101;
        v97 += 100;
      }
      while (v7 + v97 != v73);
    }
  }
  else if (result != a2)
  {
    long long v30 = *(_OWORD *)result;
    long long v31 = *(_OWORD *)(result + 32);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(result + 16);
    *(_OWORD *)(a4 + 32) = v31;
    *(_OWORD *)a4 = v30;
    long long v32 = *(_OWORD *)(result + 48);
    long long v33 = *(_OWORD *)(result + 64);
    long long v34 = *(_OWORD *)(result + 80);
    *(_DWORD *)(a4 + 96) = *(_DWORD *)(result + 96);
    *(_OWORD *)(a4 + 64) = v33;
    *(_OWORD *)(a4 + 80) = v34;
    *(_OWORD *)(a4 + 48) = v32;
    uint64_t v35 = result + 100;
    if (result + 100 != a2)
    {
      uint64_t v36 = 0;
      uint64_t v37 = a4;
      do
      {
        unint64_t v44 = (_DWORD *)v7;
        uint64_t v45 = v37;
        uint64_t v7 = v35;
        v37 += 100;
        unsigned int v46 = v44[26];
        unsigned int v47 = *(_DWORD *)(v45 + 4);
        BOOL v48 = v46 >= v47;
        if (v46 == v47 && (v49 = v44[27], v50 = *(_DWORD *)(v45 + 8), BOOL v48 = v49 >= v50, v49 == v50))
        {
          uint64_t v38 = v37;
          if (v44[28] >= *(_DWORD *)(v45 + 12)) {
            goto LABEL_15;
          }
        }
        else
        {
          uint64_t v38 = v37;
          if (v48) {
            goto LABEL_15;
          }
        }
        long long v51 = *(_OWORD *)(v45 + 80);
        *(_OWORD *)(v37 + 64) = *(_OWORD *)(v45 + 64);
        *(_OWORD *)(v37 + 80) = v51;
        *(_DWORD *)(v37 + 96) = *(_DWORD *)(v45 + 96);
        long long v52 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)uint64_t v37 = *(_OWORD *)v45;
        *(_OWORD *)(v37 + 16) = v52;
        long long v53 = *(_OWORD *)(v45 + 48);
        uint64_t v38 = a4;
        *(_OWORD *)(v37 + 32) = *(_OWORD *)(v45 + 32);
        *(_OWORD *)(v37 + 48) = v53;
        if (v45 != a4)
        {
          uint64_t v54 = v36;
          while (1)
          {
            uint64_t v58 = a4 + v54;
            unsigned int v59 = v44[26];
            unsigned int v60 = *(_DWORD *)(a4 + v54 - 96);
            if (v59 == v60)
            {
              unsigned int v61 = v44[27];
              unsigned int v62 = *(_DWORD *)(v58 - 92);
              if (v61 == v62)
              {
                if (v44[28] >= *(_DWORD *)(a4 + v54 - 88))
                {
LABEL_31:
                  uint64_t v38 = v45;
                  break;
                }
              }
              else if (v61 >= v62)
              {
                uint64_t v38 = a4 + v54;
                break;
              }
            }
            else if (v59 >= v60)
            {
              goto LABEL_31;
            }
            v45 -= 100;
            long long v55 = *(_OWORD *)(v58 - 20);
            *(_OWORD *)(v58 + 64) = *(_OWORD *)(v58 - 36);
            *(_OWORD *)(v58 + 80) = v55;
            *(_DWORD *)(v58 + 96) = *(_DWORD *)(v58 - 4);
            long long v56 = *(_OWORD *)(v58 - 84);
            *(_OWORD *)uint64_t v58 = *(_OWORD *)(v58 - 100);
            *(_OWORD *)(v58 + 16) = v56;
            long long v57 = *(_OWORD *)(v58 - 52);
            *(_OWORD *)(v58 + 32) = *(_OWORD *)(v58 - 68);
            *(_OWORD *)(v58 + 48) = v57;
            v54 -= 100;
            if (!v54)
            {
              uint64_t v38 = a4;
              break;
            }
          }
        }
LABEL_15:
        long long v39 = *(_OWORD *)v7;
        long long v40 = *(_OWORD *)(v7 + 32);
        *(_OWORD *)(v38 + 16) = *(_OWORD *)(v7 + 16);
        *(_OWORD *)(v38 + 32) = v40;
        *(_OWORD *)uint64_t v38 = v39;
        long long v41 = *(_OWORD *)(v7 + 48);
        long long v42 = *(_OWORD *)(v7 + 64);
        long long v43 = *(_OWORD *)(v7 + 80);
        *(_DWORD *)(v38 + 96) = *(_DWORD *)(v7 + 96);
        *(_OWORD *)(v38 + 64) = v42;
        *(_OWORD *)(v38 + 80) = v43;
        *(_OWORD *)(v38 + 48) = v41;
        uint64_t v35 = v7 + 100;
        v36 += 100;
      }
      while (v7 + 100 != a2);
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (!a5) {
    return result;
  }
  uint64_t v7 = a5;
  while (a4 > a7 && v7 > a7)
  {
    if (!a4) {
      return result;
    }
    uint64_t v10 = 0;
    unsigned int v11 = *((_DWORD *)a2 + 1);
    uint64_t v12 = -a4;
    while (1)
    {
      unsigned int v13 = *(_DWORD *)&result[v10 + 4];
      BOOL v14 = v11 >= v13;
      if (v11 == v13)
      {
        unsigned int v15 = *((_DWORD *)a2 + 2);
        unsigned int v16 = *(_DWORD *)&result[v10 + 8];
        BOOL v14 = v15 >= v16;
        if (v15 == v16) {
          BOOL v14 = *((_DWORD *)a2 + 3) >= *(_DWORD *)&result[v10 + 12];
        }
      }
      if (!v14) {
        break;
      }
      v10 += 100;
      BOOL v14 = __CFADD__(v12++, 1);
      if (v14) {
        return result;
      }
    }
    uint64_t v17 = -v12;
    unsigned int v18 = &result[v10];
    if (-v12 < v7)
    {
      if (v7 >= 0) {
        uint64_t v19 = v7;
      }
      else {
        uint64_t v19 = v7 + 1;
      }
      uint64_t v20 = v19 >> 1;
      long long v21 = &a2[100 * (v19 >> 1)];
      if (v18 == a2)
      {
        int v26 = a2;
        long long v22 = a2;
      }
      else
      {
        long long v22 = &result[v10];
        unint64_t v23 = 0x8F5C28F5C28F5C29 * ((a2 - result - v10) >> 2);
        unsigned int v24 = *((_DWORD *)v21 + 1);
        unsigned int v25 = *((_DWORD *)v21 + 2);
        int v26 = v18;
        do
        {
          unint64_t v27 = v23 >> 1;
          long long v28 = &v26[100 * (v23 >> 1)];
          unsigned int v29 = *((_DWORD *)v28 + 1);
          BOOL v30 = v24 >= v29;
          if (v24 == v29)
          {
            unsigned int v31 = *((_DWORD *)v28 + 2);
            BOOL v30 = v25 >= v31;
            if (v25 == v31) {
              BOOL v30 = *((_DWORD *)v21 + 3) >= *((_DWORD *)v28 + 3);
            }
          }
          if (v30)
          {
            int v26 = v28 + 100;
            unint64_t v27 = v23 + ~v27;
          }
          unint64_t v23 = v27;
        }
        while (v27);
      }
      uint64_t v32 = 0x8F5C28F5C28F5C29 * ((v26 - v22) >> 2);
      unint64_t v44 = v21;
      if (v26 == a2) {
        goto LABEL_67;
      }
LABEL_45:
      unint64_t v44 = v26;
      if (a2 != v21)
      {
        if (v26 + 100 == a2)
        {
          long long v156 = *((_OWORD *)v26 + 1);
          long long v161 = *((_OWORD *)v26 + 2);
          long long v151 = *(_OWORD *)v26;
          int v181 = *((_DWORD *)v26 + 24);
          long long v171 = *((_OWORD *)v26 + 4);
          long long v176 = *((_OWORD *)v26 + 5);
          long long v166 = *((_OWORD *)v26 + 3);
          int64_t v54 = v21 - a2;
          long long v55 = a6;
          long long v56 = a3;
          uint64_t v145 = v20;
          float v147 = v18;
          memmove(v26, a2, v21 - a2);
          uint64_t v20 = v145;
          unsigned int v18 = v147;
          a3 = v56;
          a6 = v55;
          unint64_t v44 = &v26[v54];
          *(_OWORD *)unint64_t v44 = v151;
          *((_OWORD *)v44 + 1) = v156;
          *((_OWORD *)v44 + 2) = v161;
          *((_DWORD *)v44 + 24) = v181;
          *((_OWORD *)v44 + 4) = v171;
          *((_OWORD *)v44 + 5) = v176;
          *((_OWORD *)v44 + 3) = v166;
        }
        else if (a2 + 100 == v21)
        {
          unint64_t v44 = v26 + 100;
          long long v157 = *(_OWORD *)(v21 - 84);
          long long v162 = *(_OWORD *)(v21 - 68);
          long long v152 = *(_OWORD *)(v21 - 100);
          int v182 = *((_DWORD *)v21 - 1);
          long long v172 = *(_OWORD *)(v21 - 36);
          long long v177 = *(_OWORD *)(v21 - 20);
          long long v167 = *(_OWORD *)(v21 - 52);
          if (v21 - 100 != v26)
          {
            long long v57 = a6;
            uint64_t v58 = a3;
            uint64_t v146 = v20;
            unsigned int v148 = v18;
            memmove(v26 + 100, v26, v21 - 100 - v26);
            uint64_t v20 = v146;
            unsigned int v18 = v148;
            a3 = v58;
            a6 = v57;
          }
          *((_OWORD *)v26 + 1) = v157;
          *((_OWORD *)v26 + 2) = v162;
          *(_OWORD *)int v26 = v152;
          *((_DWORD *)v26 + 24) = v182;
          *((_OWORD *)v26 + 4) = v172;
          *((_OWORD *)v26 + 5) = v177;
          *((_OWORD *)v26 + 3) = v167;
        }
        else
        {
          unint64_t v45 = 0x8F5C28F5C28F5C29 * ((a2 - v26) >> 2);
          if (v45 == 0x8F5C28F5C28F5C29 * ((v21 - a2) >> 2))
          {
            uint64_t v46 = 0;
            do
            {
              unsigned int v47 = &a2[v46];
              BOOL v48 = &v26[v46];
              long long v155 = *(_OWORD *)&v26[v46 + 16];
              long long v160 = *(_OWORD *)&v26[v46 + 32];
              long long v150 = *(_OWORD *)&v26[v46];
              int v180 = *(_DWORD *)&v26[v46 + 96];
              long long v170 = *(_OWORD *)&v26[v46 + 64];
              long long v175 = *(_OWORD *)&v26[v46 + 80];
              long long v165 = *(_OWORD *)&v26[v46 + 48];
              long long v50 = *(_OWORD *)&a2[v46 + 64];
              long long v49 = *(_OWORD *)&a2[v46 + 80];
              long long v51 = *(_OWORD *)&a2[v46 + 48];
              *((_DWORD *)v48 + 24) = *(_DWORD *)&a2[v46 + 96];
              *((_OWORD *)v48 + 4) = v50;
              *((_OWORD *)v48 + 5) = v49;
              *((_OWORD *)v48 + 3) = v51;
              long long v52 = *(_OWORD *)&a2[v46];
              long long v53 = *(_OWORD *)&a2[v46 + 32];
              *((_OWORD *)v48 + 1) = *(_OWORD *)&a2[v46 + 16];
              *((_OWORD *)v48 + 2) = v53;
              *(_OWORD *)BOOL v48 = v52;
              *((_OWORD *)v47 + 1) = v155;
              *((_OWORD *)v47 + 2) = v160;
              *(_OWORD *)unsigned int v47 = v150;
              *((_DWORD *)v47 + 24) = v180;
              *((_OWORD *)v47 + 4) = v170;
              *((_OWORD *)v47 + 5) = v175;
              *((_OWORD *)v47 + 3) = v165;
              if (&v26[v46 + 100] == a2) {
                break;
              }
              v46 += 100;
            }
            while (v47 + 100 != v21);
            unint64_t v44 = a2;
          }
          else
          {
            uint64_t v59 = 0x8F5C28F5C28F5C29 * ((v21 - a2) >> 2);
            unint64_t v60 = 0x8F5C28F5C28F5C29 * ((a2 - v26) >> 2);
            do
            {
              uint64_t v61 = v60;
              unint64_t v60 = v59;
              uint64_t v59 = v61 % v59;
            }
            while (v59);
            if (v60)
            {
              unsigned int v62 = &v26[100 * v60];
              do
              {
                long long v158 = *(_OWORD *)(v62 - 84);
                long long v163 = *(_OWORD *)(v62 - 68);
                long long v153 = *(_OWORD *)(v62 - 100);
                long long v63 = *(_OWORD *)(v62 - 52);
                long long v64 = *(_OWORD *)(v62 - 36);
                long long v65 = *(_OWORD *)(v62 - 20);
                int v66 = *((_DWORD *)v62 - 1);
                v62 -= 100;
                int v183 = v66;
                long long v173 = v64;
                long long v178 = v65;
                long long v168 = v63;
                long long v67 = &v62[4 * ((a2 - v26) >> 2)];
                long long v68 = v62;
                do
                {
                  long long v69 = v68;
                  long long v68 = v67;
                  long long v70 = *(_OWORD *)v67;
                  long long v71 = *((_OWORD *)v67 + 2);
                  *((_OWORD *)v69 + 1) = *((_OWORD *)v67 + 1);
                  *((_OWORD *)v69 + 2) = v71;
                  *(_OWORD *)long long v69 = v70;
                  long long v72 = *((_OWORD *)v67 + 3);
                  long long v73 = *((_OWORD *)v67 + 4);
                  long long v74 = *((_OWORD *)v67 + 5);
                  *((_DWORD *)v69 + 24) = *((_DWORD *)v67 + 24);
                  *((_OWORD *)v69 + 4) = v73;
                  *((_OWORD *)v69 + 5) = v74;
                  *((_OWORD *)v69 + 3) = v72;
                  unint64_t v75 = 0x8F5C28F5C28F5C29 * ((v21 - v67) >> 2);
                  BOOL v76 = __OFSUB__(v45, v75);
                  uint64_t v78 = v45 - v75;
                  char v77 = (v78 < 0) ^ v76;
                  long long v67 = &v26[100 * v78];
                  if (v77) {
                    long long v67 = &v68[4 * ((a2 - v26) >> 2)];
                  }
                }
                while (v67 != v62);
                *((_OWORD *)v68 + 1) = v158;
                *((_OWORD *)v68 + 2) = v163;
                *(_OWORD *)long long v68 = v153;
                *((_DWORD *)v68 + 24) = v183;
                *((_OWORD *)v68 + 4) = v173;
                *((_OWORD *)v68 + 5) = v178;
                *((_OWORD *)v68 + 3) = v168;
              }
              while (v62 != v26);
            }
            unint64_t v44 = &v26[4 * ((v21 - a2) >> 2)];
          }
        }
      }
      goto LABEL_67;
    }
    if (v12 == -1)
    {
      int v132 = &result[v10];
      long long v159 = *((_OWORD *)v132 + 1);
      long long v164 = *((_OWORD *)v132 + 2);
      long long v154 = *(_OWORD *)v132;
      int v184 = *((_DWORD *)v132 + 24);
      long long v174 = *((_OWORD *)v132 + 4);
      long long v179 = *((_OWORD *)v132 + 5);
      long long v169 = *((_OWORD *)v132 + 3);
      long long v134 = *((_OWORD *)a2 + 4);
      long long v133 = *((_OWORD *)a2 + 5);
      long long v135 = *((_OWORD *)a2 + 3);
      *((_DWORD *)v132 + 24) = *((_DWORD *)a2 + 24);
      *((_OWORD *)v132 + 4) = v134;
      *((_OWORD *)v132 + 5) = v133;
      *((_OWORD *)v132 + 3) = v135;
      long long v136 = *(_OWORD *)a2;
      long long v137 = *((_OWORD *)a2 + 2);
      *((_OWORD *)v132 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)v132 + 2) = v137;
      *(_OWORD *)int v132 = v136;
      *((_OWORD *)a2 + 1) = v159;
      *((_OWORD *)a2 + 2) = v164;
      *(_OWORD *)a2 = v154;
      *((_DWORD *)a2 + 24) = v184;
      *((_OWORD *)a2 + 4) = v174;
      *((_OWORD *)a2 + 5) = v179;
      *((_OWORD *)a2 + 3) = v169;
      return result;
    }
    if (v12 > 0) {
      uint64_t v17 = 1 - v12;
    }
    uint64_t v32 = v17 >> 1;
    if (a3 == a2)
    {
      long long v21 = a3;
      long long v43 = a3;
    }
    else
    {
      unint64_t v33 = 0x8F5C28F5C28F5C29 * ((a3 - a2) >> 2);
      long long v34 = &result[100 * v32 + v10];
      unsigned int v35 = *((_DWORD *)v34 + 1);
      unsigned int v36 = *((_DWORD *)v34 + 2);
      unsigned int v37 = *((_DWORD *)v34 + 3);
      long long v21 = a2;
      do
      {
        unint64_t v38 = v33 >> 1;
        long long v39 = &v21[100 * (v33 >> 1)];
        unsigned int v40 = *((_DWORD *)v39 + 1);
        BOOL v41 = v40 >= v35;
        if (v40 == v35)
        {
          unsigned int v42 = *((_DWORD *)v39 + 2);
          BOOL v41 = v42 >= v36;
          if (v42 == v36) {
            BOOL v41 = *((_DWORD *)v39 + 3) >= v37;
          }
        }
        if (!v41)
        {
          long long v21 = v39 + 100;
          unint64_t v38 = v33 + ~v38;
        }
        unint64_t v33 = v38;
      }
      while (v38);
      long long v43 = a2;
    }
    int v26 = &result[100 * v32 + v10];
    uint64_t v20 = 0x8F5C28F5C28F5C29 * ((v21 - v43) >> 2);
    unint64_t v44 = v21;
    if (v26 != a2) {
      goto LABEL_45;
    }
LABEL_67:
    a4 = -(v32 + v12);
    uint64_t v79 = v7 - v20;
    if (v32 + v20 >= v7 - (v32 + v20) - v12)
    {
      uint64_t v82 = -(v32 + v12);
      uint64_t v83 = v20;
      uint64_t v84 = v7 - v20;
      long long v85 = a6;
      long long v86 = v18;
      std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(v44, v21, a3, v82, v84, a6, a7);
      BOOL result = v86;
      uint64_t v87 = v83;
      a4 = v32;
      a3 = v44;
      uint64_t v7 = v87;
      a2 = v26;
      a6 = v85;
      if (!v87) {
        return result;
      }
    }
    else
    {
      unsigned int v80 = a6;
      unsigned int v81 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(v18, v26, v44, v32, v20, a6, a7);
      a3 = v81;
      BOOL result = v44;
      uint64_t v7 = v79;
      a2 = v21;
      a6 = v80;
      if (!v79) {
        return result;
      }
    }
  }
  if (a4 <= v7)
  {
    if (result != a2)
    {
      unint64_t v108 = 0;
      do
      {
        long long v109 = &a6[v108];
        long long v110 = *(_OWORD *)&result[v108];
        long long v111 = *(_OWORD *)&result[v108 + 32];
        *((_OWORD *)v109 + 1) = *(_OWORD *)&result[v108 + 16];
        *((_OWORD *)v109 + 2) = v111;
        *(_OWORD *)long long v109 = v110;
        long long v112 = *(_OWORD *)&result[v108 + 48];
        long long v113 = *(_OWORD *)&result[v108 + 64];
        long long v114 = *(_OWORD *)&result[v108 + 80];
        *((_DWORD *)v109 + 24) = *(_DWORD *)&result[v108 + 96];
        *((_OWORD *)v109 + 4) = v113;
        *((_OWORD *)v109 + 5) = v114;
        *((_OWORD *)v109 + 3) = v112;
        v108 += 100;
      }
      while (&result[v108] != a2);
      if (v108)
      {
        long long v115 = &a6[v108];
        long long v116 = a6;
        while (a2 != a3)
        {
          unsigned int v122 = *((_DWORD *)a2 + 1);
          unsigned int v123 = *((_DWORD *)v116 + 1);
          BOOL v124 = v122 >= v123;
          if (v122 == v123)
          {
            unsigned int v125 = *((_DWORD *)a2 + 2);
            unsigned int v126 = *((_DWORD *)v116 + 2);
            BOOL v124 = v125 >= v126;
            if (v125 == v126) {
              BOOL v124 = *((_DWORD *)a2 + 3) >= *((_DWORD *)v116 + 3);
            }
          }
          if (v124)
          {
            long long v127 = *(_OWORD *)v116;
            long long v128 = *((_OWORD *)v116 + 2);
            *((_OWORD *)result + 1) = *((_OWORD *)v116 + 1);
            *((_OWORD *)result + 2) = v128;
            *(_OWORD *)BOOL result = v127;
            long long v129 = *((_OWORD *)v116 + 3);
            long long v130 = *((_OWORD *)v116 + 4);
            long long v131 = *((_OWORD *)v116 + 5);
            *((_DWORD *)result + 24) = *((_DWORD *)v116 + 24);
            *((_OWORD *)result + 4) = v130;
            *((_OWORD *)result + 5) = v131;
            *((_OWORD *)result + 3) = v129;
            v116 += 100;
            result += 100;
            if (v115 == v116) {
              return result;
            }
          }
          else
          {
            long long v117 = *(_OWORD *)a2;
            long long v118 = *((_OWORD *)a2 + 2);
            *((_OWORD *)result + 1) = *((_OWORD *)a2 + 1);
            *((_OWORD *)result + 2) = v118;
            *(_OWORD *)BOOL result = v117;
            long long v119 = *((_OWORD *)a2 + 3);
            long long v120 = *((_OWORD *)a2 + 4);
            long long v121 = *((_OWORD *)a2 + 5);
            *((_DWORD *)result + 24) = *((_DWORD *)a2 + 24);
            *((_OWORD *)result + 4) = v120;
            *((_OWORD *)result + 5) = v121;
            *((_OWORD *)result + 3) = v119;
            a2 += 100;
            result += 100;
            if (v115 == v116) {
              return result;
            }
          }
        }
        return (char *)memmove(result, v116, a6 - v116 + v108);
      }
    }
  }
  else if (a2 != a3)
  {
    unint64_t v88 = 0;
    do
    {
      long long v89 = &a6[v88];
      long long v90 = *(_OWORD *)&a2[v88];
      long long v91 = *(_OWORD *)&a2[v88 + 32];
      *((_OWORD *)v89 + 1) = *(_OWORD *)&a2[v88 + 16];
      *((_OWORD *)v89 + 2) = v91;
      *(_OWORD *)long long v89 = v90;
      long long v92 = *(_OWORD *)&a2[v88 + 48];
      long long v93 = *(_OWORD *)&a2[v88 + 64];
      long long v94 = *(_OWORD *)&a2[v88 + 80];
      *((_DWORD *)v89 + 24) = *(_DWORD *)&a2[v88 + 96];
      *((_OWORD *)v89 + 4) = v93;
      *((_OWORD *)v89 + 5) = v94;
      *((_OWORD *)v89 + 3) = v92;
      v88 += 100;
    }
    while (&a2[v88] != a3);
    if (v88)
    {
      long long v95 = &a6[v88];
      long long v96 = a3 - 100;
      while (a2 != result)
      {
        uint64_t v97 = a2 - 100;
        unsigned int v103 = *((_DWORD *)v95 - 24);
        unsigned int v104 = *((_DWORD *)a2 - 24);
        BOOL v105 = v103 >= v104;
        if (v103 == v104)
        {
          unsigned int v106 = *((_DWORD *)v95 - 23);
          unsigned int v107 = *((_DWORD *)a2 - 23);
          BOOL v105 = v106 >= v107;
          if (v106 == v107) {
            BOOL v105 = *((_DWORD *)v95 - 22) >= *((_DWORD *)a2 - 22);
          }
        }
        if (v105)
        {
          uint64_t v97 = v95 - 100;
          v95 -= 100;
        }
        else
        {
          a2 -= 100;
        }
        long long v98 = *(_OWORD *)v97;
        long long v99 = *((_OWORD *)v97 + 2);
        *((_OWORD *)v96 + 1) = *((_OWORD *)v97 + 1);
        *((_OWORD *)v96 + 2) = v99;
        *(_OWORD *)long long v96 = v98;
        long long v100 = *((_OWORD *)v97 + 3);
        long long v101 = *((_OWORD *)v97 + 4);
        long long v102 = *((_OWORD *)v97 + 5);
        *((_DWORD *)v96 + 24) = *((_DWORD *)v97 + 24);
        *((_OWORD *)v96 + 4) = v101;
        *((_OWORD *)v96 + 5) = v102;
        *((_OWORD *)v96 + 3) = v100;
        v96 -= 100;
        if (v95 == a6) {
          return result;
        }
      }
      unint64_t v138 = 0;
      do
      {
        int v139 = &v96[v138];
        long long v140 = *(_OWORD *)&v95[v138 - 100];
        long long v141 = *(_OWORD *)&v95[v138 - 68];
        *((_OWORD *)v139 + 1) = *(_OWORD *)&v95[v138 - 84];
        *((_OWORD *)v139 + 2) = v141;
        *(_OWORD *)int v139 = v140;
        long long v142 = *(_OWORD *)&v95[v138 - 52];
        long long v143 = *(_OWORD *)&v95[v138 - 36];
        long long v144 = *(_OWORD *)&v95[v138 - 20];
        *((_DWORD *)v139 + 24) = *(_DWORD *)&v95[v138 - 4];
        *((_OWORD *)v139 + 4) = v143;
        *((_OWORD *)v139 + 5) = v144;
        *((_OWORD *)v139 + 3) = v142;
        v138 -= 100;
      }
      while (&v95[v138] != a6);
    }
  }
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<geo::codec::CharacteristicMakeDefault(void)::$_0 &&>>()
{
  dword_1EB2A0950 = -1;
  *(void *)&dword_1EB2A0954 = 0;
  *(void *)((char *)&dword_1EB2A0958 + 1) = 0;
  byte_1EB2A0962 = 1;
  word_1EB2A0964 = 0;
  byte_1EB2A0966 = 1;
  word_1EB2A0968 = 0;
  byte_1EB2A096A = 1;
  word_1EB2A096C = 0;
  byte_1EB2A096E = 1;
  word_1EB2A0970 = 0;
  byte_1EB2A0972 = 1;
  word_1EB2A0974 = 0;
  byte_1EB2A0976 = 1;
  word_1EB2A0978 = 0;
  byte_1EB2A097A = 1;
  word_1EB2A097C = 0;
  byte_1EB2A097E = 1;
  word_1EB2A0980 = 0;
  byte_1EB2A0982 = 1;
  word_1EB2A0984 = 0;
  byte_1EB2A0986 = 1;
  word_1EB2A0988 = 0;
  byte_1EB2A098A = 1;
  word_1EB2A098C = 0;
  byte_1EB2A098E = 1;
  word_1EB2A0990 = 0;
  byte_1EB2A0992 = 1;
  word_1EB2A0994 = 0;
  byte_1EB2A0996 = 1;
  word_1EB2A0998 = 0;
  byte_1EB2A099A = 1;
  word_1EB2A099C = 0;
  byte_1EB2A099E = 1;
  word_1EB2A09A0 = 0;
}

float32x4_t gm::operator*<float,4,4,4>@<Q0>(float32x4_t *a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>)
{
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 36);
  long long v6 = *(_OWORD *)(a2 + 40);
  long long v7 = *(_OWORD *)(a2 + 44);
  uint64_t v8 = *(void *)(a2 + 52);
  uint64_t v9 = *(void *)(a2 + 56);
  float v10 = *(float *)(a2 + 60);
  float32x4_t v11 = *a1;
  float32x4_t v12 = a1[1];
  float32x4_t v13 = a1[2];
  float32x4_t v14 = a1[3];
  float32x4_t v15 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)(a2 + 16))), v12, COERCE_FLOAT(*(_OWORD *)(a2 + 20))), v13, COERCE_FLOAT(*(_OWORD *)(a2 + 24))), v14, COERCE_FLOAT(*(_OWORD *)(a2 + 28)));
  *a3 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a1, COERCE_FLOAT(*(_OWORD *)a2)), v12, COERCE_FLOAT(*(_OWORD *)(a2 + 4))), v13, COERCE_FLOAT(*(_OWORD *)(a2 + 8))), v14, COERCE_FLOAT(*(_OWORD *)(a2 + 12)));
  a3[1] = v15;
  float32x4_t result = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v11, *(float *)&v3), v12, *(float *)&v5), v13, *(float *)&v6), v14, *(float *)&v7);
  a3[2] = result;
  a3[3] = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v11, *(float *)&v4), v12, *(float *)&v8), v13, *(float *)&v9), v14, v10);
  return result;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<geo::Transform<float>,geo::StdAllocator<geo::Transform<float>,geo::codec::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<geo::Transform<float>,geo::StdAllocator<geo::Transform<float>,geo::codec::Allocator>>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 24);
      if (v3)
      {
        *(void *)(v2 + 32) = v3;
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 48) + 40))(*(void *)(v2 + 48), v3, *(void *)(v2 + 40) - v3);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    float v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      float32x4_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            float32x4_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          float32x4_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  float32x4_t v14 = (void *)(a1 + 16);
  float32x4_t v11 = operator new(0x38uLL);
  *float32x4_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  void v11[3] = 0;
  v11[6] = geo::codec::Allocator::instance((geo::codec::Allocator *)v11);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    unsigned int v18 = *(void **)(*(void *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *float32x4_t v11 = *v18;
LABEL_61:
      *unsigned int v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v23 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v23) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v23)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v23 < 3uLL || (uint8x8_t v25 = (uint8x8_t)vcnt_s8(v23), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < *(void *)&v23) {
LABEL_37:
      }
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        unint64_t v4 = v7 % v8;
        uint64_t v17 = *(void *)a1;
        unsigned int v18 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        uint64_t v17 = *(void *)a1;
        unsigned int v18 = *(void **)(*(void *)a1 + 8 * v7);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
      uint64_t v17 = *(void *)a1;
      unsigned int v18 = *(void **)(*(void *)a1 + 8 * v4);
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *float32x4_t v11 = *v14;
  *float32x4_t v14 = v11;
  *(void *)(v17 + 8 * v4) = v14;
  if (*v11)
  {
    unint64_t v27 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }
    else
    {
      v27 &= v8 - 1;
    }
    unsigned int v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_18A45E8A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 24);
      if (v3)
      {
        *(void *)(v2 + 32) = v3;
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 48) + 40))(*(void *)(v2 + 48), v3, *(void *)(v2 + 40) - v3);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t **std::__exception_guard_exceptions<std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](uint64_t **a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = **a1;
    if (v3)
    {
      v2[1] = v3;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[3] + 40))(v2[3], v3, v2[2] - v3);
    }
  }
  return a1;
}

uint64_t **std::__exception_guard_exceptions<std::vector<mgcl::gpcc::IntArrayBuffer,geo::StdAllocator<mgcl::gpcc::IntArrayBuffer,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](uint64_t **a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = **a1;
    if (v3)
    {
      v2[1] = v3;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[3] + 40))(v2[3], v3, v2[2] - v3);
    }
  }
  return a1;
}

uint64_t **std::__exception_guard_exceptions<std::vector<mgcl::gpcc::IntArrayBuffer *,geo::StdAllocator<mgcl::gpcc::IntArrayBuffer *,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](uint64_t **a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = **a1;
    if (v3)
    {
      v2[1] = v3;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[3] + 40))(v2[3], v3, v2[2] - v3);
    }
  }
  return a1;
}

os_log_t __GEOGetGeoCodecsDecodeLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.VectorKit.GeoCodecs", "Decode");
  _MergedGlobals_355 = (uint64_t)result;
  return result;
}

uint64_t *std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

void std::vector<GeoCodecsPolygonFeature,geo::StdAllocator<GeoCodecsPolygonFeature,geo::codec::Allocator>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  long long v5 = (_OWORD *)a1[1];
  unint64_t v6 = ((uint64_t)v5 - *a1) >> 7;
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return;
    }
    unsigned int v18 = (_OWORD *)(v4 + (a2 << 7));
    if (v5 == v18)
    {
LABEL_27:
      a1[1] = (uint64_t)v18;
      return;
    }
    while (1)
    {
      BOOL v19 = (std::__shared_weak_count *)*((void *)v5 - 12);
      if (v19)
      {
        if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      unint64_t v20 = (std::__shared_weak_count *)*((void *)v5 - 15);
      if (v20) {
        goto LABEL_20;
      }
LABEL_16:
      v5 -= 8;
      if (v5 == v18) {
        goto LABEL_27;
      }
    }
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    unint64_t v20 = (std::__shared_weak_count *)*((void *)v5 - 15);
    if (!v20) {
      goto LABEL_16;
    }
LABEL_20:
    std::__shared_weak_count::__release_weak(v20);
    goto LABEL_16;
  }
  uint64_t v8 = a1[2];
  if (v7 <= (v8 - (uint64_t)v5) >> 7)
  {
    unsigned int v18 = &v5[8 * v7];
    unint64_t v21 = (a2 << 7) - (v6 << 7);
    do
    {
      if (v5)
      {
        v5[6] = 0uLL;
        v5[7] = 0uLL;
        v5[4] = 0uLL;
        v5[5] = 0uLL;
        v5[2] = 0uLL;
        v5[3] = 0uLL;
        _OWORD *v5 = 0uLL;
        v5[1] = 0uLL;
      }
      v5 += 8;
      v21 -= 128;
    }
    while (v21);
    goto LABEL_27;
  }
  if (a2 >> 57) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = v8 - v4;
  uint64_t v10 = v9 >> 6;
  if (v9 >> 6 <= a2) {
    uint64_t v10 = a2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFF80) {
    uint64_t v11 = 0x1FFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], v11 << 7, 8);
  uint64_t v13 = (_OWORD *)(v12 + (v6 << 7));
  unint64_t v14 = v12 + (a2 << 7);
  unint64_t v15 = (a2 << 7) - (v6 << 7);
  __n128 v16 = 0uLL;
  uint64_t v17 = v13;
  do
  {
    if (v17)
    {
      v17[6] = 0uLL;
      v17[7] = 0uLL;
      v17[4] = 0uLL;
      v17[5] = 0uLL;
      void v17[2] = 0uLL;
      v17[3] = 0uLL;
      *uint64_t v17 = 0uLL;
      v17[1] = 0uLL;
    }
    v17 += 8;
    v15 -= 128;
  }
  while (v15);
  uint64_t v22 = v12 + (v11 << 7);
  uint64_t v23 = *a1;
  uint64_t v24 = a1[1];
  if (v24 == *a1)
  {
    *a1 = (uint64_t)v13;
    a1[1] = v14;
    uint64_t v32 = a1[2];
    a1[2] = v22;
  }
  else
  {
    unint64_t v25 = 0;
    do
    {
      uint64_t v26 = &v13[v25 / 0x10];
      uint64_t v27 = v24 + v25;
      *(v26 - 8) = *(_OWORD *)(v24 + v25 - 128);
      *(void *)(v27 - 128) = 0;
      *(void *)(v27 - 120) = 0;
      *(v26 - 7) = *(_OWORD *)(v24 + v25 - 112);
      *((void *)v26 - 12) = *(void *)(v24 + v25 - 96);
      *(void *)(v27 - 104) = 0;
      *(void *)(v27 - 96) = 0;
      long long v28 = *(_OWORD *)(v24 + v25 - 88);
      long long v29 = *(_OWORD *)(v24 + v25 - 72);
      *((_DWORD *)v26 - 14) = *(_DWORD *)(v24 + v25 - 56);
      *(_OWORD *)((char *)v26 - 72) = v29;
      *(_OWORD *)((char *)v26 - 88) = v28;
      long long v30 = *(_OWORD *)(v24 + v25 - 48);
      *((void *)v26 - 4) = *(void *)(v24 + v25 - 32);
      *(v26 - 3) = v30;
      __n128 v16 = *(__n128 *)(v24 + v25 - 24);
      *((void *)v26 - 1) = *(void *)(v24 + v25 - 8);
      *(__n128 *)((char *)v26 - 24) = v16;
      v25 -= 128;
    }
    while (v24 + v25 != v23);
    uint64_t v24 = *a1;
    uint64_t v31 = a1[1];
    *a1 = (uint64_t)&v13[v25 / 0x10];
    a1[1] = v14;
    uint64_t v32 = a1[2];
    a1[2] = v22;
    if (v31 != v24)
    {
      while (1)
      {
        unint64_t v33 = *(std::__shared_weak_count **)(v31 - 96);
        if (v33)
        {
          if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        long long v34 = *(std::__shared_weak_count **)(v31 - 120);
        if (v34) {
          goto LABEL_37;
        }
LABEL_33:
        v31 -= 128;
        if (v31 == v24) {
          goto LABEL_41;
        }
      }
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      long long v34 = *(std::__shared_weak_count **)(v31 - 120);
      if (!v34) {
        goto LABEL_33;
      }
LABEL_37:
      std::__shared_weak_count::__release_weak(v34);
      goto LABEL_33;
    }
  }
LABEL_41:
  if (v24) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)a1[3] + 40))(a1[3], v24, v32 - v24, v16);
  }
}

void GeoCodecsFeature::~GeoCodecsFeature(GeoCodecsFeature *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v3) {
      return;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v3) {
      return;
    }
  }
  std::__shared_weak_count::__release_weak(v3);
}

uint64_t std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::push_back[abi:ne180100](uint64_t result, unsigned char *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned char **)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  if ((unint64_t)v4 >= v5)
  {
    unint64_t v6 = &v4[-*(void *)result];
    unint64_t v7 = (unint64_t)(v6 + 1);
    if ((uint64_t)(v6 + 1) < 0) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = v5 - *(void *)result;
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      os_log_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), v9, 1);
      v6 += result;
      uint64_t v10 = result + v9;
      if (result) {
        *unint64_t v6 = *a2;
      }
      uint64_t v11 = v6 + 1;
      uint64_t v13 = *(void *)v3;
      uint64_t v12 = *(void *)(v3 + 8);
      unint64_t v14 = v12 - *(void *)v3;
      if (v12 == *(void *)v3)
      {
LABEL_15:
        *(void *)uint64_t v3 = v6;
        *(void *)(v3 + 8) = v11;
        uint64_t v15 = *(void *)(v3 + 16);
        *(void *)(v3 + 16) = v10;
        if (!v12)
        {
LABEL_16:
          *(void *)(v3 + 8) = v11;
          return result;
        }
LABEL_27:
        os_log_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v12, v15 - v12);
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = v6 + 1;
      uint64_t v13 = *(void *)result;
      uint64_t v12 = *(void *)(result + 8);
      unint64_t v14 = v12 - *(void *)result;
      if (v12 == *(void *)result) {
        goto LABEL_15;
      }
    }
    if (v14 < 0x20 || (unint64_t)(v12 - (void)v6) < 0x20)
    {
      uint64_t v16 = v12;
      uint64_t v17 = v6;
    }
    else
    {
      uint64_t v16 = v12 - (v14 & 0xFFFFFFFFFFFFFFE0);
      uint64_t v17 = &v6[-(v14 & 0xFFFFFFFFFFFFFFE0)];
      unsigned int v18 = v6 - 16;
      BOOL v19 = (long long *)(v12 - 16);
      unint64_t v20 = v14 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *unsigned int v18 = v21;
        v18 -= 2;
        v19 -= 2;
        v20 -= 32;
      }
      while (v20);
      if (v14 == (v14 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_26:
        uint64_t v12 = *(void *)v3;
        *(void *)uint64_t v3 = v17;
        *(void *)(v3 + 8) = v11;
        uint64_t v15 = *(void *)(v3 + 16);
        *(void *)(v3 + 16) = v10;
        if (!v12) {
          goto LABEL_16;
        }
        goto LABEL_27;
      }
    }
    do
    {
      char v22 = *(unsigned char *)--v16;
      *--uint64_t v17 = v22;
    }
    while (v16 != v13);
    goto LABEL_26;
  }
  if (v4) {
    unsigned char *v4 = *a2;
  }
  *(void *)(result + 8) = v4 + 1;
  return result;
}

void std::vector<GeoCodecsContourLinesFeature,geo::StdAllocator<GeoCodecsContourLinesFeature,geo::codec::Allocator>>::resize(unint64_t *a1, unint64_t a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return;
    }
    unint64_t v18 = v4 + 56 * a2;
    if (v5 == v18)
    {
LABEL_27:
      a1[1] = v18;
      return;
    }
    while (1)
    {
      BOOL v19 = *(std::__shared_weak_count **)(v5 - 16);
      if (v19)
      {
        if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      unint64_t v20 = *(std::__shared_weak_count **)(v5 - 48);
      if (v20) {
        goto LABEL_20;
      }
LABEL_16:
      v5 -= 56;
      if (v5 == v18) {
        goto LABEL_27;
      }
    }
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    unint64_t v20 = *(std::__shared_weak_count **)(v5 - 48);
    if (!v20) {
      goto LABEL_16;
    }
LABEL_20:
    std::__shared_weak_count::__release_weak(v20);
    goto LABEL_16;
  }
  unint64_t v8 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - v5) >> 3) >= v7)
  {
    unint64_t v18 = v5 + 56 * v7;
    uint64_t v21 = 56 * a2 - 8 * ((uint64_t)(v5 - *a1) >> 3);
    do
    {
      if (v5)
      {
        *(void *)(v5 + 48) = 0;
        *(_OWORD *)(v5 + 16) = 0uLL;
        *(_OWORD *)(v5 + 32) = 0uLL;
        *(_OWORD *)unint64_t v5 = 0uLL;
      }
      v5 += 56;
      v21 -= 56;
    }
    while (v21);
    goto LABEL_27;
  }
  if (a2 > 0x492492492492492) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - v4) >> 3);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= a2) {
    uint64_t v10 = a2;
  }
  if (v9 >= 0x249249249249249) {
    uint64_t v11 = 0x492492492492492;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 56 * v11, 8);
  unint64_t v13 = v12 + 56 * v6;
  unint64_t v14 = v12 + 56 * a2;
  uint64_t v15 = 56 * a2 - 56 * v6;
  __n128 v16 = 0uLL;
  unint64_t v17 = v13;
  do
  {
    if (v17)
    {
      *(void *)(v17 + 48) = 0;
      *(_OWORD *)(v17 + 16) = 0uLL;
      *(_OWORD *)(v17 + 32) = 0uLL;
      *(_OWORD *)unint64_t v17 = 0uLL;
    }
    v17 += 56;
    v15 -= 56;
  }
  while (v15);
  uint64_t v22 = v12 + 56 * v11;
  unint64_t v23 = *a1;
  unint64_t v24 = a1[1];
  if (v24 == *a1)
  {
    *a1 = v13;
    a1[1] = v14;
    unint64_t v30 = a1[2];
    a1[2] = v22;
  }
  else
  {
    uint64_t v25 = 0;
    do
    {
      uint64_t v26 = v13 + v25;
      uint64_t v27 = v24 + v25;
      *(_OWORD *)(v26 - 56) = *(_OWORD *)(v24 + v25 - 56);
      *(void *)(v27 - 56) = 0;
      *(void *)(v27 - 48) = 0;
      uint64_t v28 = *(void *)(v24 + v25 - 40);
      *(void *)(v26 - 33) = *(void *)(v24 + v25 - 33);
      *(void *)(v26 - 40) = v28;
      __n128 v16 = *(__n128 *)(v24 + v25 - 24);
      *(__n128 *)(v26 - 24) = v16;
      *(void *)(v27 - 24) = 0;
      *(void *)(v27 - 16) = 0;
      *(void *)(v26 - 8) = *(void *)(v24 + v25 - 8);
      v25 -= 56;
    }
    while (v24 + v25 != v23);
    unint64_t v24 = *a1;
    unint64_t v29 = a1[1];
    *a1 = v13 + v25;
    a1[1] = v14;
    unint64_t v30 = a1[2];
    a1[2] = v22;
    if (v29 != v24)
    {
      while (1)
      {
        uint64_t v31 = *(std::__shared_weak_count **)(v29 - 16);
        if (v31)
        {
          if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        uint64_t v32 = *(std::__shared_weak_count **)(v29 - 48);
        if (v32) {
          goto LABEL_37;
        }
LABEL_33:
        v29 -= 56;
        if (v29 == v24) {
          goto LABEL_41;
        }
      }
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
      uint64_t v32 = *(std::__shared_weak_count **)(v29 - 48);
      if (!v32) {
        goto LABEL_33;
      }
LABEL_37:
      std::__shared_weak_count::__release_weak(v32);
      goto LABEL_33;
    }
  }
LABEL_41:
  if (v24) {
    (*(void (**)(unint64_t, unint64_t, unint64_t, __n128))(*(void *)a1[3] + 40))(a1[3], v24, v30 - v24, v16);
  }
}

geo::codec::Allocator *std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::vector(geo::codec::Allocator *a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  uint64_t v4 = geo::codec::Allocator::instance(a1);
  *((void *)a1 + 3) = v4;
  if (a2)
  {
    unint64_t v5 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, a2, 1);
    *(void *)a1 = v5;
    *((void *)a1 + 1) = v5;
    unint64_t v6 = &v5[a2];
    *((void *)a1 + 2) = &v5[a2];
    do
    {
      if (v5) {
        unsigned char *v5 = 0;
      }
      ++v5;
      --a2;
    }
    while (a2);
    *((void *)a1 + 1) = v6;
  }
  return a1;
}

void sub_18A45F620(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::shared_ptr<FeatureStyleAttributes>>::reserve(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    uint64_t v4 = *(char **)(a1 + 8);
    uint64_t v5 = 16 * a2;
    unint64_t v6 = (char *)operator new(16 * a2);
    unint64_t v7 = &v6[v5];
    unint64_t v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      unint64_t v9 = &v6[v4 - v2];
      do
      {
        long long v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
      }
      while (v4 != v2);
      uint64_t v2 = *(char **)a1;
      uint64_t v11 = *(char **)(a1 + 8);
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v8;
      for (*(void *)(a1 + 16) = v7; v11 != v2; v11 -= 16)
      {
        uint64_t v12 = (std::__shared_weak_count *)*((void *)v11 - 1);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void std::vector<std::shared_ptr<FeatureStyleAttributes>>::push_back[abi:ne180100](char **a1, uint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    unint64_t v6 = v5 + 16;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
LABEL_3:
    a1[1] = v6;
    return;
  }
  uint64_t v7 = (v5 - *a1) >> 4;
  if ((unint64_t)(v7 + 1) >> 60) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v4 - (void)*a1;
  uint64_t v9 = v8 >> 3;
  if (v8 >> 3 <= (unint64_t)(v7 + 1)) {
    uint64_t v9 = v7 + 1;
  }
  BOOL v10 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  if (!v10) {
    unint64_t v11 = v9;
  }
  if (v11 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v12 = 16 * v11;
  unint64_t v13 = (char *)operator new(16 * v11);
  unint64_t v14 = &v13[16 * v7];
  *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
  unint64_t v6 = v14 + 16;
  uint64_t v15 = &v13[v12];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  __n128 v16 = *a1;
  unint64_t v17 = a1[1];
  if (v17 == *a1)
  {
    *a1 = v14;
    a1[1] = v6;
    a1[2] = v15;
  }
  else
  {
    do
    {
      long long v18 = *((_OWORD *)v17 - 1);
      v17 -= 16;
      *((_OWORD *)v14 - 1) = v18;
      v14 -= 16;
      *(void *)unint64_t v17 = 0;
      *((void *)v17 + 1) = 0;
    }
    while (v17 != v16);
    unint64_t v17 = *a1;
    BOOL v19 = a1[1];
    *a1 = v14;
    a1[1] = v6;
    for (a1[2] = v15; v19 != v17; v19 -= 16)
    {
      unint64_t v20 = (std::__shared_weak_count *)*((void *)v19 - 1);
      if (v20)
      {
        if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
  }
  if (!v17) {
    goto LABEL_3;
  }
  operator delete(v17);
  a1[1] = v6;
}

void **std::vector<std::shared_ptr<FeatureStyleAttributes>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::vector<GeoCodecsContourPolylineInfo,geo::StdAllocator<GeoCodecsContourPolylineInfo,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2, void *a3)
{
  uint64_t v4 = result;
  uint64_t v6 = *(void *)result;
  uint64_t v5 = *(void **)(result + 8);
  uint64_t v7 = (uint64_t)v5 - *(void *)result;
  uint64_t v8 = v7 >> 3;
  unint64_t v9 = a2 - (v7 >> 3);
  if (a2 <= v7 >> 3)
  {
    if (a2 >= v7 >> 3) {
      return result;
    }
    long long v18 = (void *)(v6 + 8 * a2);
LABEL_15:
    *(void *)(result + 8) = v18;
    return result;
  }
  uint64_t v11 = *(void *)(result + 16);
  if (v9 <= (v11 - (uint64_t)v5) >> 3)
  {
    long long v18 = &v5[v9];
    uint64_t v19 = 8 * a2 - 8 * v8;
    do
    {
      if (v5) {
        void *v5 = *a3;
      }
      ++v5;
      v19 -= 8;
    }
    while (v19);
    goto LABEL_15;
  }
  if (a2 >> 61) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v12 = v11 - v6;
  unint64_t v13 = (v11 - v6) >> 2;
  if (v13 <= a2) {
    unint64_t v13 = a2;
  }
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    uint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v14 = v13;
  }
  os_log_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 8 * v14, 4);
  uint64_t v15 = (void *)(result + 8 * v8);
  uint64_t v16 = 8 * a2 - 8 * v8;
  unint64_t v17 = v15;
  do
  {
    if (v17) {
      *unint64_t v17 = *a3;
    }
    ++v17;
    v16 -= 8;
  }
  while (v16);
  uint64_t v21 = *(void *)v4;
  uint64_t v20 = *(void *)(v4 + 8);
  if (v20 != *(void *)v4)
  {
    unint64_t v22 = v20 - *(void *)v4 - 8;
    if (v22 < 0x58) {
      goto LABEL_34;
    }
    if ((unint64_t)(v20 - (v7 + result)) < 0x20) {
      goto LABEL_34;
    }
    uint64_t v23 = (v22 >> 3) + 1;
    uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v25 = v20 - v24;
    uint64_t v15 = (void *)((char *)v15 - v24);
    uint64_t v26 = (_OWORD *)(result + 8 * v8 - 16);
    uint64_t v27 = (long long *)(v20 - 16);
    uint64_t v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v29 = *v27;
      *(v26 - 1) = *(v27 - 1);
      *uint64_t v26 = v29;
      v26 -= 2;
      v27 -= 2;
      v28 -= 4;
    }
    while (v28);
    uint64_t v20 = v25;
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        uint64_t v30 = *(void *)(v20 - 8);
        v20 -= 8;
        *--uint64_t v15 = v30;
      }
      while (v20 != v21);
    }
    uint64_t v20 = *(void *)v4;
  }
  *(void *)uint64_t v4 = v15;
  *(void *)(v4 + 8) = result + 8 * a2;
  uint64_t v31 = *(void *)(v4 + 16);
  *(void *)(v4 + 16) = result + 8 * v14;
  if (v20) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v4 + 24) + 40))(*(void *)(v4 + 24), v20, v31 - v20);
  }
  return result;
}

uint64_t std::vector<GeoCodecsContourPolylineAttribute,geo::StdAllocator<GeoCodecsContourPolylineAttribute,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *(void *)result;
  uint64_t v4 = *(void **)(result + 8);
  uint64_t v6 = (uint64_t)v4 - *(void *)result;
  uint64_t v7 = v6 >> 3;
  unint64_t v8 = a2 - (v6 >> 3);
  if (a2 <= v6 >> 3)
  {
    if (a2 >= v6 >> 3) {
      return result;
    }
    uint64_t v16 = (void *)(v5 + 8 * a2);
LABEL_15:
    *(void *)(result + 8) = v16;
    return result;
  }
  uint64_t v9 = *(void *)(result + 16);
  if (v8 <= (v9 - (uint64_t)v4) >> 3)
  {
    uint64_t v16 = &v4[v8];
    uint64_t v17 = 8 * a2 - 8 * v7;
    do
    {
      if (v4) {
        void *v4 = 0;
      }
      ++v4;
      v17 -= 8;
    }
    while (v17);
    goto LABEL_15;
  }
  if (a2 >> 61) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v10 = v9 - v5;
  unint64_t v11 = (v9 - v5) >> 2;
  if (v11 <= a2) {
    unint64_t v11 = a2;
  }
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    uint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v12 = v11;
  }
  os_log_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 8 * v12, 4);
  unint64_t v13 = (void *)(result + 8 * v7);
  uint64_t v14 = 8 * a2 - 8 * v7;
  uint64_t v15 = v13;
  do
  {
    if (v15) {
      *uint64_t v15 = 0;
    }
    ++v15;
    v14 -= 8;
  }
  while (v14);
  uint64_t v19 = *(void *)v3;
  uint64_t v18 = *(void *)(v3 + 8);
  if (v18 != *(void *)v3)
  {
    unint64_t v20 = v18 - *(void *)v3 - 8;
    if (v20 < 0x58) {
      goto LABEL_34;
    }
    if ((unint64_t)(v18 - (v6 + result)) < 0x20) {
      goto LABEL_34;
    }
    uint64_t v21 = (v20 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v23 = v18 - v22;
    unint64_t v13 = (void *)((char *)v13 - v22);
    uint64_t v24 = (_OWORD *)(result + 8 * v7 - 16);
    uint64_t v25 = (long long *)(v18 - 16);
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *v25;
      *(v24 - 1) = *(v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 2;
      v26 -= 4;
    }
    while (v26);
    uint64_t v18 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        uint64_t v28 = *(void *)(v18 - 8);
        v18 -= 8;
        *--unint64_t v13 = v28;
      }
      while (v18 != v19);
    }
    uint64_t v18 = *(void *)v3;
  }
  *(void *)uint64_t v3 = v13;
  *(void *)(v3 + 8) = result + 8 * a2;
  uint64_t v29 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = result + 8 * v12;
  if (v18) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v18, v29 - v18);
  }
  return result;
}

uint64_t mgcl::raster::PolygonRasterDecoder<unsigned char>::~PolygonRasterDecoder(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2)
  {
    uint64_t v3 = *v2;
    *uint64_t v2 = 0;
    if (v3)
    {
      uint64_t v4 = (void *)*v3;
      void *v3 = 0;
      if (v4)
      {
        uint64_t v5 = (void *)v4[13];
        if (v5)
        {
          v4[14] = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)v4[10];
        if (v6)
        {
          v4[11] = v6;
          operator delete(v6);
        }
        MEMORY[0x18C11F580](v4, 0x1070C40ADA6D0DELL);
      }
      MEMORY[0x18C11F580](v3, 0x20C4093837F09);
    }
    MEMORY[0x18C11F580](v2, 0x20C4093837F09);
  }
  uint64_t v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(void *)(a1 + 32) = v7;
    operator delete(v7);
  }
  unint64_t v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::pointer begin = this->__begin_;
  std::vector<unsigned int>::pointer end = this->__end_;
  uint64_t v5 = (char *)end - (char *)this->__begin_;
  uint64_t v6 = v5 >> 2;
  std::vector<unsigned int>::size_type v7 = __sz - (v5 >> 2);
  if (__sz <= v5 >> 2)
  {
    if (__sz >= v5 >> 2) {
      return;
    }
    uint64_t v26 = &begin[__sz];
    goto LABEL_23;
  }
  value = this->__end_cap_.__value_;
  if (v7 <= value - end)
  {
    bzero(this->__end_, 4 * v7);
    uint64_t v26 = &end[v7];
LABEL_23:
    this->__end_ = v26;
    return;
  }
  if (__sz >> 62) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (char *)value - (char *)begin;
  std::vector<unsigned int>::size_type v10 = v9 >> 1;
  if (v9 >> 1 <= __sz) {
    std::vector<unsigned int>::size_type v10 = __sz;
  }
  BOOL v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL;
  unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
  if (!v11) {
    unint64_t v12 = v10;
  }
  if (v12 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v13 = 4 * v12;
  uint64_t v14 = operator new(4 * v12);
  uint64_t v15 = &v14[4 * v6];
  bzero(v15, 4 * v7);
  uint64_t v16 = (unsigned int *)&v15[4 * v7];
  if (end != begin)
  {
    unint64_t v17 = (char *)end - (char *)begin - 4;
    if (v17 < 0x2C) {
      goto LABEL_29;
    }
    if ((unint64_t)((char *)end - v5 - v14) < 0x20) {
      goto LABEL_29;
    }
    uint64_t v18 = (v17 >> 2) + 1;
    uint64_t v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    unint64_t v20 = &end[v19 / 0xFFFFFFFFFFFFFFFCLL];
    v15 -= v19;
    uint64_t v21 = &v14[4 * v6 - 16];
    uint64_t v22 = (long long *)(end - 4);
    uint64_t v23 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v24 = *v22;
      *(v21 - 1) = *(v22 - 1);
      *uint64_t v21 = v24;
      v21 -= 2;
      v22 -= 2;
      v23 -= 8;
    }
    while (v23);
    std::vector<unsigned int>::pointer end = v20;
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_29:
      do
      {
        int v25 = *--end;
        *((_DWORD *)v15 - 1) = v25;
        v15 -= 4;
      }
      while (end != begin);
    }
  }
  this->__begin_ = (std::vector<unsigned int>::pointer)v15;
  this->__end_ = v16;
  this->__end_cap_.__value_ = (unsigned int *)&v14[v13];
  if (begin)
  {
    operator delete(begin);
  }
}

void std::vector<GeoCodecsBuildingFootprintFeature,geo::StdAllocator<GeoCodecsBuildingFootprintFeature,geo::codec::Allocator>>::resize(unint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[1];
  unint64_t v4 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<GeoCodecsBuildingFootprintFeature,geo::StdAllocator<GeoCodecsBuildingFootprintFeature,geo::codec::Allocator>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 136 * a2;
    if (v3 != v7)
    {
      while (1)
      {
        unint64_t v8 = *(std::__shared_weak_count **)(v3 - 104);
        if (v8)
        {
          if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        uint64_t v9 = *(std::__shared_weak_count **)(v3 - 128);
        if (v9) {
          goto LABEL_13;
        }
LABEL_9:
        v3 -= 136;
        if (v3 == v7) {
          goto LABEL_16;
        }
      }
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      uint64_t v9 = *(std::__shared_weak_count **)(v3 - 128);
      if (!v9) {
        goto LABEL_9;
      }
LABEL_13:
      std::__shared_weak_count::__release_weak(v9);
      goto LABEL_9;
    }
LABEL_16:
    a1[1] = v7;
  }
}

uint64_t std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *(void *)result;
  unint64_t v4 = *(unsigned char **)(result + 8);
  unint64_t v6 = &v4[-*(void *)result];
  unint64_t v7 = a2 - (void)v6;
  if (a2 <= (unint64_t)v6)
  {
    if (a2 >= (unint64_t)v6) {
      return result;
    }
    uint64_t v14 = (unsigned char *)(v5 + a2);
LABEL_15:
    *(void *)(result + 8) = v14;
    return result;
  }
  uint64_t v8 = *(void *)(result + 16);
  if (v8 - (uint64_t)v4 >= v7)
  {
    uint64_t v14 = &v4[v7];
    do
    {
      if (v4) {
        unsigned char *v4 = 0;
      }
      ++v4;
      --v7;
    }
    while (v7);
    goto LABEL_15;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = v8 - v5;
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= a2) {
    uint64_t v10 = a2;
  }
  if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v11 = v10;
  }
  os_log_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), v11, 1);
  unint64_t v12 = &v6[result];
  uint64_t v13 = &v6[result];
  do
  {
    if (v13) {
      *uint64_t v13 = 0;
    }
    ++v13;
    --v7;
  }
  while (v7);
  uint64_t v16 = *(void *)v3;
  uint64_t v15 = *(void *)(v3 + 8);
  unint64_t v17 = v15 - *(void *)v3;
  if (v15 != *(void *)v3)
  {
    if (v17 < 0x20) {
      goto LABEL_34;
    }
    if ((unint64_t)(v5 - (void)&v4[result] + v15) < 0x20) {
      goto LABEL_34;
    }
    v12 -= v17 & 0xFFFFFFFFFFFFFFE0;
    uint64_t v18 = &v6[result - 16];
    uint64_t v19 = (long long *)(v15 - 16);
    unint64_t v20 = v17 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v21 = *v19;
      *(v18 - 1) = *(v19 - 1);
      *uint64_t v18 = v21;
      v18 -= 2;
      v19 -= 2;
      v20 -= 32;
    }
    while (v20);
    v15 -= v17 & 0xFFFFFFFFFFFFFFE0;
    if (v17 != (v17 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_34:
      do
      {
        char v22 = *(unsigned char *)--v15;
        *--unint64_t v12 = v22;
      }
      while (v15 != v16);
    }
    uint64_t v15 = *(void *)v3;
  }
  *(void *)uint64_t v3 = v12;
  *(void *)(v3 + 8) = result + a2;
  uint64_t v23 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = result + v11;
  if (v15) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v15, v23 - v15);
  }
  return result;
}

uint64_t geo::codec::_decodeTransitLabelsFromStream(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v5 = a1[2];
  unint64_t v6 = v5 + 1;
  unint64_t v7 = 8 * a1[1];
  if (v5 + 1 > v7)
  {
    uint64_t v8 = (FILE *)*MEMORY[0x1E4F143C8];
    int v9 = 5584;
    goto LABEL_47;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(unsigned __int8 *)(*a1 + (v5 >> 3));
  a1[2] = v6;
  if (((v12 >> (~(_BYTE)v5 & 7)) & 1) == 0) {
    return 1;
  }
  if (v5 + 6 > v7)
  {
    uint64_t v8 = (FILE *)*MEMORY[0x1E4F143C8];
    int v9 = 5588;
    goto LABEL_47;
  }
  uint64_t v13 = a5;
  int v17 = 0;
  unint64_t v18 = 5;
  do
  {
    unint64_t v19 = 8 - (v6 & 7);
    if (v18 < v19) {
      unint64_t v19 = v18;
    }
    int v17 = (*(unsigned __int8 *)(v11 + (v6 >> 3)) >> (8 - (v6 & 7) - v19)) & ~(-1 << v19) | (v17 << v19);
    v6 += v19;
    a1[2] = v6;
    v18 -= v19;
  }
  while (v18);
  if (v6 + 5 > v7)
  {
    uint64_t v8 = (FILE *)*MEMORY[0x1E4F143C8];
    int v9 = 5591;
    goto LABEL_47;
  }
  int v20 = 0;
  unint64_t v21 = (v17 + 1);
  unint64_t v22 = 5;
  do
  {
    unint64_t v23 = 8 - (v6 & 7);
    if (v22 < v23) {
      unint64_t v23 = v22;
    }
    int v20 = (*(unsigned __int8 *)(v11 + (v6 >> 3)) >> (8 - (v6 & 7) - v23)) & ~(-1 << v23) | (v20 << v23);
    v6 += v23;
    a1[2] = v6;
    v22 -= v23;
  }
  while (v22);
  unint64_t v24 = (v20 + 1);
  if (v6 + v24 > v7)
  {
    uint64_t v8 = (FILE *)*MEMORY[0x1E4F143C8];
    int v9 = 5594;
    goto LABEL_47;
  }
  if (v20 == -1)
  {
    int v25 = 0;
  }
  else
  {
    LODWORD(v25) = 0;
    do
    {
      unint64_t v26 = 8 - (v6 & 7);
      if (v24 < v26) {
        unint64_t v26 = v24;
      }
      int v25 = (geo::codec::Allocator *)((*(unsigned __int8 *)(v11 + (v6 >> 3)) >> (8 - (v6 & 7) - v26)) & ~(-1 << v26) | (v25 << v26));
      v6 += v26;
      a1[2] = v6;
      v24 -= v26;
    }
    while (v24);
  }
  uint64_t v27 = *a5;
  uint64_t v55 = *(void *)(*a5 + 856);
  uint64_t v56 = 0;
  int v28 = *(_DWORD *)(v27 + 864);
  if (!geo::codec::_makeSpaceForLabels(v25, &v56, a5))
  {
    int v9 = 5600;
    goto LABEL_46;
  }
  uint64_t v29 = v56;
  if (!a2)
  {
LABEL_40:
    if (v29 != *(void *)(*v13 + 1056))
    {
      int v9 = 5619;
      goto LABEL_46;
    }
    return 1;
  }
  uint64_t v30 = 0;
  long long v53 = v13;
  unint64_t v54 = v21;
  while (1)
  {
    unint64_t v31 = a1[2];
    unint64_t v32 = v31 + 1;
    unint64_t v33 = 8 * a1[1];
    if (v31 + 1 > v33)
    {
      int v9 = 5603;
      goto LABEL_46;
    }
    uint64_t v34 = *a1;
    unsigned int v35 = *(unsigned __int8 *)(*a1 + (v31 >> 3));
    a1[2] = v32;
    if ((v35 >> (~(_BYTE)v31 & 7))) {
      break;
    }
LABEL_28:
    if (++v30 == a2) {
      goto LABEL_40;
    }
  }
  if (v32 + v21 > v33)
  {
    int v9 = 5607;
    goto LABEL_46;
  }
  unsigned int v36 = 0;
  if (v21)
  {
    unint64_t v37 = v21;
    do
    {
      unint64_t v38 = 8 - (v32 & 7);
      if (v37 < v38) {
        unint64_t v38 = v37;
      }
      unsigned int v36 = (*(unsigned __int8 *)(v34 + (v32 >> 3)) >> (8 - (v32 & 7) - v38)) & ~(-1 << v38) | (v36 << v38);
      v32 += v38;
      a1[2] = v32;
      v37 -= v38;
    }
    while (v37);
  }
  if (v36 < v28 - (int)v55)
  {
    uint64_t v39 = a3 + v30 * a4;
    *(unsigned char *)(v39 + 73) = 1;
    *(_DWORD *)(v39 + 56) = v29;
    uint64_t v40 = v36;
    uint64_t v41 = v55 + v36;
    uint64_t v42 = *v13;
    uint64_t v43 = 24 * v29;
    uint64_t v44 = *(void *)(*v13 + 1048) + 24 * v29;
    *(void *)uint64_t v44 = v41;
    *(_DWORD *)(v44 + 16) = 0;
    uint64_t v45 = a2;
    uint64_t v46 = a3;
    uint64_t v47 = a4;
    uint64_t v48 = v29;
    long long v49 = geo::codec::langLocaleForOffset(v40, *(const void **)(v42 + 888), *(void *)(v42 + 896));
    uint64_t v50 = v48;
    a4 = v47;
    a3 = v46;
    a2 = v45;
    uint64_t v13 = v53;
    long long v51 = (void *)(*(void *)(*v53 + 1048) + v43);
    v51[1] = v49;
    *(void *)(v39 + 16) = *v51;
    unint64_t v21 = v54;
    uint64_t v29 = v50 + 1;
    goto LABEL_28;
  }
  int v9 = 5608;
LABEL_46:
  uint64_t v8 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_47:
  fprintf(v8, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v9);
  return 0;
}

uint64_t geo::codec::_decodeLabelTextPlacementsFromStream(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  if (!a2) {
    return 1;
  }
  unint64_t v7 = a1[2];
  unint64_t v8 = v7 + 1;
  unint64_t v9 = 8 * a1[1];
  if (v7 + 1 > v9)
  {
    uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
    int v11 = 5802;
    goto LABEL_13;
  }
  uint64_t v13 = *a1;
  unsigned int v14 = *(unsigned __int8 *)(*a1 + (v7 >> 3));
  a1[2] = v8;
  if (((v14 >> (~(_BYTE)v7 & 7)) & 1) == 0) {
    return 1;
  }
  if (v7 + 6 > v9) {
    goto LABEL_12;
  }
  int v20 = 0;
  unint64_t v21 = 5;
  do
  {
    unint64_t v22 = 8 - (v8 & 7);
    if (v21 < v22) {
      unint64_t v22 = v21;
    }
    int v20 = (*(unsigned __int8 *)(v13 + (v8 >> 3)) >> (8 - (v8 & 7) - v22)) & ~(-1 << v22) | (v20 << v22);
    v8 += v22;
    a1[2] = v8;
    v21 -= v22;
  }
  while (v21);
  unint64_t v23 = (v20 + 1);
  if (v8 + v23 > v9)
  {
LABEL_12:
    uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
    int v11 = 5808;
    goto LABEL_13;
  }
  unsigned int v24 = 0;
  if (v20 != -1)
  {
    do
    {
      unint64_t v25 = 8 - (v8 & 7);
      if (v23 < v25) {
        unint64_t v25 = v23;
      }
      unsigned int v24 = (*(unsigned __int8 *)(v13 + (v8 >> 3)) >> (8 - (v8 & 7) - v25)) & ~(-1 << v25) | (v24 << v25);
      v8 += v25;
      a1[2] = v8;
      v23 -= v25;
    }
    while (v23);
  }
  if (v8 + 3 > v9)
  {
    uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
    int v11 = 5811;
    goto LABEL_13;
  }
  int v26 = 0;
  unint64_t v27 = 3;
  do
  {
    unint64_t v28 = 8 - (v8 & 7);
    if (v27 < v28) {
      unint64_t v28 = v27;
    }
    int v26 = (*(unsigned __int8 *)(v13 + (v8 >> 3)) >> (8 - (v8 & 7) - v28)) & ~(-1 << v28) | (v26 << v28);
    v8 += v28;
    a1[2] = v8;
    v27 -= v28;
  }
  while (v27);
  if (v8 + 3 > v9)
  {
    uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
    int v11 = 5814;
    goto LABEL_13;
  }
  int v29 = 0;
  unint64_t v30 = (v26 + 1);
  unint64_t v31 = 3;
  do
  {
    unint64_t v32 = 8 - (v8 & 7);
    if (v31 < v32) {
      unint64_t v32 = v31;
    }
    int v29 = (*(unsigned __int8 *)(v13 + (v8 >> 3)) >> (8 - (v8 & 7) - v32)) & ~(-1 << v32) | (v29 << v32);
    v8 += v32;
    a1[2] = v8;
    v31 -= v32;
  }
  while (v31);
  if (v8 + 3 > v9)
  {
    uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
    int v11 = 5817;
    goto LABEL_13;
  }
  int v33 = 0;
  unint64_t v34 = (v29 + 1);
  unint64_t v35 = 3;
  do
  {
    unint64_t v36 = 8 - (v8 & 7);
    if (v35 < v36) {
      unint64_t v36 = v35;
    }
    int v33 = (*(unsigned __int8 *)(v13 + (v8 >> 3)) >> (8 - (v8 & 7) - v36)) & ~(-1 << v36) | (v33 << v36);
    v8 += v36;
    a1[2] = v8;
    v35 -= v36;
  }
  while (v35);
  unsigned int v94 = 0;
  if (!BitstreamUnpackBitcount(a1, &v94, 3uLL))
  {
    uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
    int v11 = 5820;
    goto LABEL_13;
  }
  unsigned int v93 = 0;
  BOOL v37 = BitstreamUnpackBitcount(a1, &v93, 5uLL);
  if (!v37)
  {
    uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
    int v11 = 5823;
    goto LABEL_13;
  }
  unint64_t v86 = v34;
  uint64_t v38 = *(unsigned int *)(*a6 + 672);
  if (!*(void *)(*a6 + 664))
  {
    uint64_t v87 = *(unsigned int *)(*a6 + 672);
    uint64_t v45 = geo::codec::Allocator::instance((geo::codec::Allocator *)v37);
    uint64_t v46 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v45 + 24))(v45, v24, 16);
    uint64_t v44 = *a6;
    *(void *)(*a6 + 664) = v46;
    if (!v46)
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      int v11 = 5837;
      goto LABEL_13;
    }
    goto LABEL_45;
  }
  uint64_t v39 = geo::codec::Allocator::instance((geo::codec::Allocator *)v37);
  uint64_t v40 = *(void *)(*a6 + 664);
  if (!v38)
  {
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v39 + 40))(v39, v40, 0);
    *(void *)(*a6 + 664) = 0;
    goto LABEL_50;
  }
  uint64_t v87 = v38;
  uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, v40, 16 * (*(_DWORD *)(*a6 + 672) + v24));
  uint64_t v42 = *a6;
  *(void *)(*a6 + 664) = v41;
  if (!v41)
  {
LABEL_50:
    uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
    int v11 = 5833;
    goto LABEL_13;
  }
  bzero((void *)(v41 + 16 * *(unsigned int *)(v42 + 672)), 16 * v24);
  uint64_t v44 = *a6;
LABEL_45:
  uint64_t v47 = 0;
  *(_DWORD *)(v44 + 672) += v24;
  unint64_t v84 = v94;
  unint64_t v85 = (v33 + 1);
  char v83 = 8 - v94;
  unint64_t v82 = v93;
  if (a2 <= 1) {
    uint64_t v48 = 1;
  }
  else {
    uint64_t v48 = a2;
  }
  *(float *)v43.i32 = (float)~(-1 << a5);
  __asm { FMOV            V1.2S, #1.0 }
  float32x2_t v54 = vdiv_f32(_D1, (float32x2_t)vdup_lane_s32(v43, 0));
  uint64_t v80 = v48;
  while (1)
  {
    unint64_t v56 = a1[2];
    unint64_t v57 = v56 + 1;
    unint64_t v58 = 8 * a1[1];
    if (v56 + 1 > v58)
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      int v11 = 5843;
      goto LABEL_13;
    }
    uint64_t v59 = *a1;
    unsigned int v60 = *(unsigned __int8 *)(*a1 + (v56 >> 3));
    a1[2] = v57;
    if (((v60 >> (~(_BYTE)v56 & 7)) & 1) == 0) {
      goto LABEL_54;
    }
    unint64_t v61 = v56 + 2;
    if (v61 > v58)
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      int v11 = 5848;
      goto LABEL_13;
    }
    uint64_t v62 = a3 + v47 * a4;
    unsigned int v63 = *(unsigned __int8 *)(v59 + (v57 >> 3));
    a1[2] = v61;
    *(unsigned char *)(v62 + 209) = ((v63 >> (~(_BYTE)v57 & 7)) & 1) == 0;
    unsigned int v92 = 0;
    if (!BitstreamUnpack(a1, (int *)&v92, v30))
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      int v11 = 5852;
      goto LABEL_13;
    }
    uint64_t v55 = v87;
    *(_DWORD *)(v62 + 184) = v87;
    unsigned int v64 = v92;
    if (v92 >= 0x100)
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      int v11 = 5855;
      goto LABEL_13;
    }
    *(unsigned char *)(v62 + 205) = v92;
    if (v64) {
      break;
    }
LABEL_53:
    uint64_t v87 = v55;
    uint64_t v48 = v80;
LABEL_54:
    if (++v47 == v48)
    {
      if (v87 != *(_DWORD *)(*a6 + 672))
      {
        uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
        int v11 = 5901;
        goto LABEL_13;
      }
      return 1;
    }
  }
  unsigned int v81 = (float32x2_t *)(a3 + v47 * a4);
  uint64_t v78 = v47;
  unint64_t v79 = v30;
  uint64_t v65 = 0;
  uint64_t v66 = 16 * v87;
  while (1)
  {
    if (v55 + v65 >= (unint64_t)*(unsigned int *)(*a6 + 672))
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      int v11 = 5859;
      goto LABEL_13;
    }
    uint64_t v67 = *(void *)(*a6 + 664);
    int v91 = 0;
    if (!BitstreamUnpack(a1, &v91, v86))
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      int v11 = 5863;
      goto LABEL_13;
    }
    *(unsigned char *)(v67 + v66) = v91;
    int v90 = 0;
    if (!BitstreamUnpack(a1, &v90, v85))
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      int v11 = 5867;
      goto LABEL_13;
    }
    *(unsigned char *)(v67 + v66 + 1) = v90;
    unint64_t v68 = a1[2];
    unint64_t v69 = v68 + 1;
    unint64_t v70 = 8 * a1[1];
    if (v68 + 1 > v70)
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      int v11 = 5871;
      goto LABEL_13;
    }
    unsigned int v71 = *(unsigned __int8 *)(*a1 + (v68 >> 3));
    a1[2] = v69;
    if ((v71 >> (~(_BYTE)v68 & 7)))
    {
      unsigned int v89 = 0;
      if (!BitstreamUnpack(a1, (int *)&v89, v84))
      {
        uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
        int v11 = 5874;
        goto LABEL_13;
      }
      uint64_t v72 = v67 + v66;
      *(unsigned char *)(v72 + 2) = 10;
      *(unsigned char *)(v72 + 4) = v89 << v83;
      unint64_t v69 = a1[2];
      unint64_t v70 = 8 * a1[1];
    }
    else
    {
      *(unsigned char *)(v67 + v66 + 2) = 9;
    }
    unint64_t v73 = v69 + 1;
    if (v69 + 1 > v70)
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      int v11 = 5882;
      goto LABEL_13;
    }
    uint64_t v74 = *a1;
    unsigned int v75 = *(unsigned __int8 *)(*a1 + (v69 >> 3));
    a1[2] = v73;
    *(unsigned char *)(v67 + v66 + 3) = ((v75 >> (~(_BYTE)v69 & 7)) & 1) == 0;
    unint64_t v76 = v69 + 2;
    if (v76 > v70)
    {
      uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
      int v11 = 5886;
      goto LABEL_13;
    }
    int v77 = *(unsigned __int8 *)(v74 + (v73 >> 3));
    a1[2] = v76;
    if (a5)
    {
      if (((1 << (~(_BYTE)v73 & 7)) & v77) != 0) {
        break;
      }
    }
LABEL_62:
    ++v65;
    v66 += 16;
    uint64_t v55 = v87;
    if (v64 == v65)
    {
      uint64_t v55 = (v87 + v65);
      uint64_t v47 = v78;
      unint64_t v30 = v79;
      goto LABEL_53;
    }
  }
  *(unsigned char *)(v67 + v66 + 5) = 1;
  unsigned int v88 = 0;
  unsigned int v89 = 0;
  if (!BitstreamUnpackSigned(a1, (int *)&v89, v82))
  {
    int v11 = 5891;
    goto LABEL_93;
  }
  if (BitstreamUnpackSigned(a1, (int *)&v88, v82))
  {
    *(float32x2_t *)(v67 + v66 + 8) = vmla_f32(v81[11], vcvt_f32_s32((int32x2_t)__PAIR64__(v88, v89)), v54);
    goto LABEL_62;
  }
  int v11 = 5892;
LABEL_93:
  uint64_t v10 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_13:
  fprintf(v10, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v11);
  return 0;
}

uint64_t geo::codec::_readTransitSystemsChapterIDSet(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a1[2];
  unint64_t v4 = v3 + 1;
  unint64_t v5 = 8 * a1[1];
  if (v3 + 1 <= v5)
  {
    uint64_t v9 = *a1;
    unsigned int v10 = *(unsigned __int8 *)(*a1 + (v3 >> 3));
    a1[2] = v4;
    if ((v10 >> (~(_BYTE)v3 & 7)))
    {
      if (v3 + 7 > v5)
      {
        unint64_t v6 = (FILE *)*MEMORY[0x1E4F143C8];
        int v7 = 6255;
        goto LABEL_28;
      }
      int v13 = 0;
      unint64_t v14 = 6;
      do
      {
        unint64_t v15 = 8 - (v4 & 7);
        if (v14 < v15) {
          unint64_t v15 = v14;
        }
        int v13 = (*(unsigned __int8 *)(v9 + (v4 >> 3)) >> (8 - (v4 & 7) - v15)) & ~(-1 << v15) | (v13 << v15);
        v4 += v15;
        a1[2] = v4;
        v14 -= v15;
      }
      while (v14);
      if (a2)
      {
        uint64_t v16 = 0;
        unint64_t v17 = (v13 + 1);
        if (v13 == -1)
        {
          while (1)
          {
            unint64_t v26 = 0;
            if (a1[2] + v17 > 8 * a1[1]) {
              break;
            }
            uint64_t v19 = *(void *)(a3 + 24);
            if (v19)
            {
              unint64_t v27 = &v26;
              uint64_t v28 = v16;
              (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v19 + 48))(v19, &v28, &v27);
            }
            ++v16;
            uint64_t result = 1;
            if (a2 == v16) {
              return result;
            }
          }
        }
        else
        {
          while (1)
          {
            unint64_t v26 = 0;
            unint64_t v20 = a1[2];
            if (v20 + v17 > 8 * a1[1]) {
              break;
            }
            unint64_t v21 = 0;
            uint64_t v22 = *a1;
            unint64_t v23 = v17;
            do
            {
              unint64_t v24 = 8 - (v20 & 7);
              if (v23 < v24) {
                unint64_t v24 = v23;
              }
              unint64_t v21 = (*(unsigned __int8 *)(v22 + (v20 >> 3)) >> (8 - (v20 & 7) - v24)) & (unint64_t)~(-1 << v24) | (v21 << v24);
              v20 += v24;
              a1[2] = v20;
              v23 -= v24;
            }
            while (v23);
            unint64_t v26 = v21;
            uint64_t v25 = *(void *)(a3 + 24);
            if (v25)
            {
              unint64_t v27 = &v26;
              uint64_t v28 = v16;
              (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(void *)v25 + 48))(v25, &v28, &v27);
            }
            ++v16;
            uint64_t result = 1;
            if (v16 == a2) {
              return result;
            }
          }
        }
        unint64_t v6 = (FILE *)*MEMORY[0x1E4F143C8];
        int v7 = 6260;
        goto LABEL_28;
      }
    }
    return 1;
  }
  unint64_t v6 = (FILE *)*MEMORY[0x1E4F143C8];
  int v7 = 6249;
LABEL_28:
  fprintf(v6, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v7);
  return 0;
}

void *std::function<void ()(unsigned long,unsigned long long const*)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t geo::codec::_readTransitSystemsChapterLabelSet(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a1[2];
  unint64_t v5 = v4 + 1;
  unint64_t v6 = 8 * a1[1];
  if (v4 + 1 <= v6)
  {
    uint64_t v9 = *a1;
    unsigned int v10 = *(unsigned __int8 *)(*a1 + (v4 >> 3));
    a1[2] = v5;
    if ((v10 >> (~(_BYTE)v4 & 7)))
    {
      if (v4 + 6 > v6)
      {
        int v11 = (FILE *)*MEMORY[0x1E4F143C8];
        int v12 = 6283;
        goto LABEL_55;
      }
      int v16 = 0;
      uint64_t v47 = *(void *)(*a4 + 856);
      unint64_t v48 = *(void *)(*a4 + 864) - v47;
      unint64_t v17 = 5;
      do
      {
        unint64_t v18 = 8 - (v5 & 7);
        if (v17 < v18) {
          unint64_t v18 = v17;
        }
        int v16 = (*(unsigned __int8 *)(v9 + (v5 >> 3)) >> (8 - (v5 & 7) - v18)) & ~(-1 << v18) | (v16 << v18);
        v5 += v18;
        a1[2] = v5;
        v17 -= v18;
      }
      while (v17);
      unint64_t v19 = (v16 + 1);
      if (a2)
      {
        if (v16 == -1)
        {
          unint64_t v21 = 0;
          uint64_t v43 = a2;
          unint64_t v44 = v5;
          while (v44 + 1 <= v6)
          {
            unsigned int v45 = *(unsigned __int8 *)(v9 + (v44 >> 3));
            a1[2] = v44 + 1;
            if ((v45 >> (~(_BYTE)v44 & 7)))
            {
              if (v19 + 1 + v44 > v6)
              {
LABEL_47:
                int v11 = (FILE *)*MEMORY[0x1E4F143C8];
                int v12 = 6294;
                goto LABEL_55;
              }
              unint64_t v21 = (geo::codec::Allocator *)((char *)v21 + 1);
            }
            ++v44;
            if (!--v43) {
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v20 = 0;
          unint64_t v21 = 0;
          unint64_t v22 = v5;
          while (1)
          {
            unint64_t v23 = v22 + 1;
            if (v22 + 1 > v6) {
              break;
            }
            unsigned int v24 = *(unsigned __int8 *)(v9 + (v22 >> 3));
            a1[2] = v23;
            if ((v24 >> (~(_BYTE)v22 & 7)))
            {
              if (v23 + v19 > v6) {
                goto LABEL_47;
              }
              unint64_t v25 = v19;
              do
              {
                unint64_t v26 = 8 - (v23 & 7);
                if (v25 < v26) {
                  unint64_t v26 = v25;
                }
                v23 += v26;
                v25 -= v26;
              }
              while (v25);
              a1[2] = v23;
              unint64_t v21 = (geo::codec::Allocator *)((char *)v21 + 1);
            }
            ++v20;
            unint64_t v22 = v23;
            if (v20 == a2) {
              goto LABEL_24;
            }
          }
        }
        int v11 = (FILE *)*MEMORY[0x1E4F143C8];
        int v12 = 6291;
        goto LABEL_55;
      }
      unint64_t v21 = 0;
LABEL_24:
      a1[2] = v5;
      uint64_t v49 = 0;
      if (!geo::codec::_makeSpaceForLabels(v21, &v49, a4))
      {
        int v11 = (FILE *)*MEMORY[0x1E4F143C8];
        int v12 = 6301;
        goto LABEL_55;
      }
      uint64_t v27 = v49;
      if (a2)
      {
        for (uint64_t i = 0; i != a2; ++i)
        {
          unint64_t v29 = a1[2];
          unint64_t v30 = v29 + 1;
          unint64_t v31 = 8 * a1[1];
          if (v29 + 1 > v31)
          {
            int v11 = (FILE *)*MEMORY[0x1E4F143C8];
            int v12 = 6305;
            goto LABEL_55;
          }
          uint64_t v32 = *a1;
          unsigned int v33 = *(unsigned __int8 *)(*a1 + (v29 >> 3));
          a1[2] = v30;
          if ((v33 >> (~(_BYTE)v29 & 7)))
          {
            if (v30 + v19 > v31)
            {
              int v11 = (FILE *)*MEMORY[0x1E4F143C8];
              int v12 = 6308;
              goto LABEL_55;
            }
            unsigned int v34 = 0;
            if (v19)
            {
              unint64_t v35 = v19;
              do
              {
                unint64_t v36 = 8 - (v30 & 7);
                if (v35 < v36) {
                  unint64_t v36 = v35;
                }
                unsigned int v34 = (*(unsigned __int8 *)(v32 + (v30 >> 3)) >> (8 - (v30 & 7) - v36)) & ~(-1 << v36) | (v34 << v36);
                v30 += v36;
                a1[2] = v30;
                v35 -= v36;
              }
              while (v35);
            }
            if (v48 <= v34)
            {
              int v11 = (FILE *)*MEMORY[0x1E4F143C8];
              int v12 = 6309;
LABEL_55:
              fprintf(v11, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v12);
              int v46 = 0;
              return v46 != 0;
            }
            uint64_t v37 = *a4;
            uint64_t v38 = *(void *)(*a4 + 1048) + 24 * v27;
            *(void *)uint64_t v38 = v47 + v34;
            *(_DWORD *)(v38 + 16) = 0;
            uint64_t v39 = geo::codec::langLocaleForOffset(v34, *(const void **)(v37 + 888), *(void *)(v37 + 896));
            uint64_t v40 = *(void *)(*a4 + 1048);
            *(void *)(v40 + 24 * v27 + 8) = v39;
            uint64_t v41 = *(void *)(a3 + 24);
            if (v41)
            {
              uint64_t v42 = *(void *)(v40 + 24 * v27);
              uint64_t v51 = v27;
              uint64_t v52 = i;
              uint64_t v50 = v42;
              (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(void *)v41 + 48))(v41, &v52, &v51, &v50);
            }
            ++v27;
          }
        }
      }
      if (v27 != *(void *)(*a4 + 1056))
      {
        int v11 = (FILE *)*MEMORY[0x1E4F143C8];
        int v12 = 6321;
        goto LABEL_55;
      }
      int v46 = 1;
      return v46 != 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 6276);
    return 0;
  }
}

void *std::function<void ()(unsigned long,unsigned long,char const*)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t geo::codec::_convertTransitLineKeys(geo::codec::Allocator *a1, uint64_t a2, geo::codec::Allocator **a3, uint64_t *a4)
{
  if (!a2) {
    return 1;
  }
  uint64_t v6 = a2;
  uint64_t v8 = geo::codec::Allocator::instance(a1);
  uint64_t v9 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 16))(v8, 8 * v6, 8);
  if (v9)
  {
    *a3 = v9;
    uint64_t v10 = *a4;
    uint64_t v11 = *(void *)(*a4 + 1312);
    unint64_t v12 = 0x8E38E38E38E38E39 * ((*(void *)(*a4 + 1320) - v11) >> 3);
    int v13 = (unsigned int *)(*(void *)a1 + 4);
    do
    {
      while (1)
      {
        unint64_t v16 = *(v13 - 1);
        if (v12 > v16) {
          break;
        }
        *(void *)uint64_t v9 = -1;
        uint64_t v9 = (geo::codec::Allocator *)((char *)v9 + 8);
        v13 += 2;
        if (!--v6) {
          goto LABEL_9;
        }
      }
      unsigned int v14 = *v13;
      v13 += 2;
      unint64_t v15 = *(void *)(v11 + 72 * v16) + v14;
      if (v15 >= 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(v10 + 1288) - *(void *)(v10 + 1280)) >> 3)) {
        unint64_t v15 = -1;
      }
      *(void *)uint64_t v9 = v15;
      uint64_t v9 = (geo::codec::Allocator *)((char *)v9 + 8);
      --v6;
    }
    while (v6);
LABEL_9:
    uint64_t v17 = geo::codec::Allocator::instance(v9);
    (*(void (**)(uint64_t, void, void))(*(void *)v17 + 40))(v17, *(void *)a1, 0);
    *(void *)a1 = 0;
    return 1;
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 6334);
    return 0;
  }
}

uint64_t *std::vector<std::shared_ptr<FeatureStyleAttributes const>,geo::StdAllocator<std::shared_ptr<FeatureStyleAttributes const>,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

uint64_t std::vector<GeoCodecsVectorTileRawPoint,geo::StdAllocator<GeoCodecsVectorTileRawPoint,geo::codec::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  if (a2 > (uint64_t)(*(void *)(result + 16) - *(void *)result) >> 3)
  {
    if (a2 >> 61) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 8) - *(void *)result;
    uint64_t v4 = 8 * a2;
    uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 8 * a2, 4);
    unint64_t v5 = result + (v3 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v6 = result + v4;
    uint64_t v8 = *(void *)v2;
    uint64_t v7 = *(void *)(v2 + 8);
    uint64_t v9 = v7 - *(void *)v2;
    if (v7 == *(void *)v2)
    {
      *(void *)uint64_t v2 = v5;
      *(void *)(v2 + 8) = v5;
      uint64_t v12 = *(void *)(v2 + 16);
      *(void *)(v2 + 16) = v6;
      if (!v7) {
        return result;
      }
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 24) + 40))(*(void *)(v2 + 24), v7, v12 - v7);
    }
    unint64_t v10 = v9 - 8;
    if ((unint64_t)(v9 - 8) >= 0x58)
    {
      unint64_t v11 = result + (v3 & 0xFFFFFFFFFFFFFFF8);
      if (v7 - (v3 & 0xFFFFFFFFFFFFFFF8) - result >= 0x20)
      {
        uint64_t v13 = (v10 >> 3) + 1;
        uint64_t v14 = 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v15 = v7 - v14;
        unint64_t v11 = v5 - v14;
        unint64_t v16 = (_OWORD *)(result + 8 * (v3 >> 3) - 16);
        uint64_t v17 = (long long *)(v7 - 16);
        uint64_t v18 = v13 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v19 = *v17;
          *(v16 - 1) = *(v17 - 1);
          *unint64_t v16 = v19;
          v16 -= 2;
          v17 -= 2;
          v18 -= 4;
        }
        while (v18);
        uint64_t v7 = v15;
        if (v13 == (v13 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_13:
          uint64_t v7 = *(void *)v2;
          *(void *)uint64_t v2 = v11;
          *(void *)(v2 + 8) = v5;
          uint64_t v12 = *(void *)(v2 + 16);
          *(void *)(v2 + 16) = v6;
          if (!v7) {
            return result;
          }
          return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 24) + 40))(*(void *)(v2 + 24), v7, v12 - v7);
        }
      }
    }
    else
    {
      unint64_t v11 = result + (v3 & 0xFFFFFFFFFFFFFFF8);
    }
    do
    {
      uint64_t v20 = *(void *)(v7 - 8);
      v7 -= 8;
      *(void *)(v11 - 8) = v20;
      v11 -= 8;
    }
    while (v7 != v8);
    goto LABEL_13;
  }
  return result;
}

uint64_t std::vector<GeoCodecsVectorTileRawPoint,geo::StdAllocator<GeoCodecsVectorTileRawPoint,geo::codec::Allocator>>::push_back[abi:ne180100](uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v6 = ((uint64_t)v4 - *(void *)result) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v5 - *(void *)result;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v7)
    {
      uint64_t v9 = 8 * v7;
      uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 8 * v7, 4);
      unint64_t v10 = (void *)(result + 8 * v6);
      unint64_t v7 = result + v9;
      if (result) {
        void *v10 = *a2;
      }
      uint64_t v11 = (uint64_t)(v10 + 1);
      uint64_t v13 = *(void *)v3;
      uint64_t v12 = *(void *)(v3 + 8);
      uint64_t v14 = v12 - *(void *)v3;
      if (v12 == *(void *)v3)
      {
LABEL_14:
        *(void *)uint64_t v3 = v10;
        *(void *)(v3 + 8) = v11;
        uint64_t v15 = *(void *)(v3 + 16);
        *(void *)(v3 + 16) = v7;
        if (!v12)
        {
LABEL_15:
          *(void *)(v3 + 8) = v11;
          return result;
        }
LABEL_26:
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v12, v15 - v12);
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = (void *)(8 * v6);
      uint64_t v11 = 8 * v6 + 8;
      uint64_t v13 = *(void *)result;
      uint64_t v12 = *(void *)(result + 8);
      uint64_t v14 = v12 - *(void *)result;
      if (v12 == *(void *)result) {
        goto LABEL_14;
      }
    }
    unint64_t v16 = v14 - 8;
    if (v16 < 0x38 || (unint64_t)(v12 - (void)v10) < 0x20)
    {
      uint64_t v19 = v12;
      uint64_t v20 = v10;
    }
    else
    {
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v19 = v12 - v18;
      uint64_t v20 = &v10[v18 / 0xFFFFFFFFFFFFFFF8];
      unint64_t v21 = v10 - 2;
      unint64_t v22 = (long long *)(v12 - 16);
      uint64_t v23 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *unint64_t v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_25:
        uint64_t v12 = *(void *)v3;
        *(void *)uint64_t v3 = v20;
        *(void *)(v3 + 8) = v11;
        uint64_t v15 = *(void *)(v3 + 16);
        *(void *)(v3 + 16) = v7;
        if (!v12) {
          goto LABEL_15;
        }
        goto LABEL_26;
      }
    }
    do
    {
      uint64_t v25 = *(void *)(v19 - 8);
      v19 -= 8;
      *--uint64_t v20 = v25;
    }
    while (v19 != v13);
    goto LABEL_25;
  }
  if (v4) {
    void *v4 = *a2;
  }
  *(void *)(result + 8) = v4 + 1;
  return result;
}

uint64_t *std::vector<GeoCodecsVectorTileRawPoint,geo::StdAllocator<GeoCodecsVectorTileRawPoint,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

int64x2_t **std::vector<unsigned long long>::vector(int64x2_t **a1, unint64_t a2, unint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (int64x2_t *)operator new(8 * a2);
    *a1 = v6;
    a1[1] = v6;
    unint64_t v7 = (unint64_t *)v6 + a2;
    a1[2] = (int64x2_t *)v7;
    unint64_t v8 = *a3;
    unint64_t v9 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    unint64_t v10 = (unint64_t *)v6;
    if (v9 < 3) {
      goto LABEL_13;
    }
    unint64_t v11 = v9 + 1;
    unint64_t v10 = (unint64_t *)v6 + (v11 & 0x3FFFFFFFFFFFFFFCLL);
    int64x2_t v12 = vdupq_n_s64(v8);
    uint64_t v13 = v6 + 1;
    uint64_t v14 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v13[-1] = v12;
      *uint64_t v13 = v12;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_13:
      do
        *v10++ = v8;
      while (v10 != v7);
    }
    a1[1] = (int64x2_t *)v7;
  }
  return a1;
}

void sub_18A461E8C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t geo::codec::_readConnectivity(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    goto LABEL_15;
  }
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 60)
  {
    uint64_t v4 = ++v5;
    if (v2 <= v5) {
      goto LABEL_15;
    }
  }
  uint64_t v6 = geo::codec::chapterAt((uint64_t)a1, v5, 60, *a2 + 1912);
  if (!v6)
  {
LABEL_15:
    char v20 = 1;
    return v20 & 1;
  }
  uint64_t v7 = v6;
  uint64_t v9 = *a2;
  unint64_t v8 = (std::__shared_weak_count *)a2[1];
  v94[1] = "ChapterConnectivity";
  v94[2] = v9;
  v94[3] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v94[4] = v10.__d_.__rep_;
  v94[0] = 0;
  uint64_t VarUint32 = geo::codec::chapterReadVarUint32((void *)v7, (unsigned int *)v94 + 1);
  if ((VarUint32 & 1) == 0)
  {
    unint64_t v22 = (FILE *)*MEMORY[0x1E4F143C8];
    int v23 = 7516;
    goto LABEL_79;
  }
  *(void *)(*a2 + 720) = HIDWORD(v94[0]);
  uint64_t v12 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v12 + 24))(v12, *(void *)(*a2 + 720), 16);
  *(void *)(*a2 + 712) = v13;
  if (!v13)
  {
    unint64_t v22 = (FILE *)*MEMORY[0x1E4F143C8];
    int v23 = 7519;
    goto LABEL_79;
  }
  uint64_t v14 = geo::codec::chapterReadVarUint32((void *)v7, (unsigned int *)v94);
  if ((v14 & 1) == 0)
  {
    unint64_t v22 = (FILE *)*MEMORY[0x1E4F143C8];
    int v23 = 7521;
    goto LABEL_79;
  }
  *(void *)(*a2 + 696) = LODWORD(v94[0]);
  uint64_t v15 = geo::codec::Allocator::instance((geo::codec::Allocator *)v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v15 + 24))(v15, *(void *)(*a2 + 696), 32);
  uint64_t v17 = (void *)*a2;
  *(void *)(*a2 + 688) = v16;
  if (!v16)
  {
    unint64_t v22 = (FILE *)*MEMORY[0x1E4F143C8];
    int v23 = 7525;
    goto LABEL_79;
  }
  if (v17[87])
  {
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    do
    {
      uint64_t v24 = v17[86];
      LODWORD(v90[0]) = 0;
      uint64_t v16 = geo::codec::chapterReadVarUint32((void *)v7, (unsigned int *)v90);
      if ((v16 & 1) == 0)
      {
        unint64_t v22 = (FILE *)*MEMORY[0x1E4F143C8];
        int v23 = 7530;
        goto LABEL_79;
      }
      uint64_t v17 = (void *)*a2;
      if (v19 + (unint64_t)LODWORD(v90[0]) > *(void *)(*a2 + 720))
      {
        unint64_t v22 = (FILE *)*MEMORY[0x1E4F143C8];
        int v23 = 7531;
        goto LABEL_79;
      }
      *(_DWORD *)(v24 + 32 * v18) = v90[0];
      *(_DWORD *)(v24 + 32 * v18 + 4) = v19;
      if (LODWORD(v90[0]))
      {
        uint64_t v25 = 0;
        uint64_t v26 = 16 * v19;
        do
        {
          LODWORD(v87[0]) = 0;
          if ((geo::codec::chapterReadVarUint32((void *)v7, (unsigned int *)v87) & 1) == 0)
          {
            unint64_t v22 = (FILE *)*MEMORY[0x1E4F143C8];
            int v23 = 7538;
            goto LABEL_79;
          }
          LODWORD(v88[0]) = 0;
          uint64_t v16 = geo::codec::chapterReadVarUint32((void *)v7, (unsigned int *)v88);
          if ((v16 & 1) == 0)
          {
            unint64_t v22 = (FILE *)*MEMORY[0x1E4F143C8];
            int v23 = 7541;
            goto LABEL_79;
          }
          uint64_t v17 = (void *)*a2;
          uint64_t v27 = (_DWORD *)(*(void *)(*a2 + 712) + v26);
          *uint64_t v27 = v18;
          v27[1] = v87[0];
          v27[2] = 0;
          v27[3] = v88[0];
          ++v25;
          v26 += 16;
        }
        while (v25 < LODWORD(v90[0]));
        v19 += v25;
      }
      ++v18;
    }
    while (v18 < v17[87]);
  }
  if (v17[89])
  {
    uint64_t v28 = geo::codec::Allocator::instance((geo::codec::Allocator *)v16);
    unint64_t v29 = (geo::codec *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 16))(v28, 8 * *(void *)(*a2 + 720), 8);
    unint64_t v30 = (void *)*a2;
    *(void *)(*a2 + 728) = v29;
    if (!v29)
    {
      unint64_t v22 = (FILE *)*MEMORY[0x1E4F143C8];
      int v23 = 7555;
      goto LABEL_79;
    }
    if (v30[90])
    {
      uint64_t v31 = 0;
      unint64_t v32 = 0;
      do
      {
        *(void *)(v30[91] + 8 * v32++) = v30[89] + v31;
        unint64_t v30 = (void *)*a2;
        unsigned int v33 = *(GeoCodecsConnectivityPointOnRoad ***)(*a2 + 720);
        v31 += 16;
      }
      while (v32 < (unint64_t)v33);
      unint64_t v29 = (geo::codec *)v30[91];
    }
    else
    {
      unsigned int v33 = 0;
    }
    geo::codec::sortPointsOnRoad(v29, v33);
  }
  unsigned int v34 = *(_DWORD *)(v7 + 64);
  if (v34 < 3) {
    goto LABEL_71;
  }
  unint64_t v35 = *(void *)(v7 + 48);
  unint64_t v36 = *(void *)(v7 + 56);
  unint64_t v37 = v36 - v35;
  if (v36 >= v35)
  {
    unint64_t v38 = 0;
    *(unsigned char *)(v7 + 32) = 1;
    unint64_t v39 = *(void *)(v7 + 40) + v35;
    *(void *)(v7 + 16) = v37;
    *(void *)(v7 + 24) = 0;
    *(void *)(v7 + 8) = v39;
  }
  else
  {
    unint64_t v37 = *(void *)(v7 + 16);
    unint64_t v38 = *(void *)(v7 + 24);
  }
  unint64_t v40 = v38 + 1;
  if (v38 + 1 > 8 * v37)
  {
    unint64_t v22 = (FILE *)*MEMORY[0x1E4F143C8];
    int v23 = 7569;
    goto LABEL_79;
  }
  unsigned int v41 = *(unsigned __int8 *)(*(void *)(v7 + 8) + (v38 >> 3));
  *(void *)(v7 + 24) = v40;
  if (((v41 >> (~(_BYTE)v38 & 7)) & 1) == 0)
  {
LABEL_61:
    unint64_t v49 = v35 + (v40 >> 3);
    if ((v40 & 7) != 0) {
      ++v49;
    }
    *(void *)(v7 + 48) = v49;
    *(unsigned char *)(v7 + 32) = 0;
    if (v34 >= 0x48)
    {
      uint64_t v93 = 0;
      if ((geo::codec::chapterReadVarUint32((void *)v7, (unsigned int *)&v93 + 1) & 1) == 0)
      {
        int v23 = 7596;
        goto LABEL_78;
      }
      if (!geo::codec::chapterReadVarUint32((void *)v7, (unsigned int *)&v93))
      {
        int v23 = 7597;
        goto LABEL_78;
      }
      unsigned int v92 = 0;
      uint64_t v16 = geo::codec::chapterReadVarUint32((void *)v7, &v92);
      if ((v16 & 1) == 0)
      {
        uint64_t v52 = (FILE *)*MEMORY[0x1E4F143C8];
        int v53 = 7600;
        goto LABEL_87;
      }
      if (!v92)
      {
LABEL_101:
        char v20 = 1;
LABEL_102:
        if (*(unsigned char *)v7) {
          goto LABEL_81;
        }
        goto LABEL_82;
      }
      unsigned int v91 = 0;
      if ((geo::codec::chapterReadVarUint32((void *)v7, &v91) & 1) == 0)
      {
        uint64_t v52 = (FILE *)*MEMORY[0x1E4F143C8];
        int v53 = 7604;
        goto LABEL_87;
      }
      uint64_t v50 = v91;
      uint64_t v51 = *(void *)(v7 + 48);
      if (v51 + (unint64_t)v91 > *(void *)(v7 + 56))
      {
        uint64_t v52 = (FILE *)*MEMORY[0x1E4F143C8];
        int v53 = 7607;
LABEL_87:
        uint64_t v16 = fprintf(v52, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v53);
        char v20 = 0;
        goto LABEL_102;
      }
      uint64_t v57 = *(void *)(v7 + 40);
      *(void *)(v7 + 48) = v51 + v91;
      unint64_t v58 = v92;
      if (v92)
      {
        __pa = (int8x16_t *)operator new(4 * v92);
        bzero(__pa, 4 * v58);
      }
      else
      {
        __pa = 0;
      }
      memset(v90, 0, sizeof(v90));
      if (mgcl::ints::IntDecompressor<unsigned int>::decompress((uint64_t *)v90, (unsigned __int8 *)(v57 + v51), v50, SBYTE4(v93), v93, v58, __pa))
      {
        uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
        int v60 = 7612;
LABEL_97:
        fprintf(v59, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v60);
        int v63 = 6;
        goto LABEL_98;
      }
      int v89 = 0;
      if ((geo::codec::chapterReadVarUint32((void *)v7, (unsigned int *)&v89) & 1) == 0)
      {
        uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
        int v60 = 7616;
        goto LABEL_97;
      }
      uint64_t v61 = *(void *)(v7 + 48);
      unint64_t v62 = v61 + v89;
      if (v62 > *(void *)(v7 + 56))
      {
        uint64_t v59 = (FILE *)*MEMORY[0x1E4F143C8];
        int v60 = 7619;
        goto LABEL_97;
      }
      uint64_t v64 = *(void *)(v7 + 40);
      *(void *)(v7 + 48) = v62;
      *(void *)&v87[0] = 0;
      std::vector<unsigned long long>::vector((int64x2_t **)v88, v92, (unint64_t *)v87);
      memset(v87, 0, sizeof(v87));
      if (mgcl::ints::IntDecompressor<unsigned long long>::decompress((uint64_t *)v87, (unsigned __int8 *)(v64 + v61), v89, SBYTE4(v93), v93, v92, (uint64x2_t *)v88[0]))
      {
        uint64_t v65 = (FILE *)*MEMORY[0x1E4F143C8];
        int v66 = 7624;
LABEL_110:
        fprintf(v65, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v66);
        int v63 = 6;
LABEL_111:
        mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v87);
        if (v88[0])
        {
          v88[1] = v88[0];
          operator delete(v88[0]);
        }
LABEL_98:
        uint64_t v16 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v90);
        if (__pa) {
          operator delete(__pa);
        }
        if (v63) {
          goto LABEL_80;
        }
        goto LABEL_101;
      }
      int v86 = 0;
      if ((geo::codec::chapterReadVarUint32((void *)v7, (unsigned int *)&v86) & 1) == 0)
      {
        uint64_t v65 = (FILE *)*MEMORY[0x1E4F143C8];
        int v66 = 7628;
        goto LABEL_110;
      }
      uint64_t v67 = *(void *)(v7 + 48);
      unint64_t v68 = v67 + v86;
      if (v68 > *(void *)(v7 + 56))
      {
        uint64_t v65 = (FILE *)*MEMORY[0x1E4F143C8];
        int v66 = 7631;
        goto LABEL_110;
      }
      uint64_t v69 = *(void *)(v7 + 40);
      *(void *)(v7 + 48) = v68;
      unint64_t v84 = 0;
      std::vector<unsigned long long>::vector((int64x2_t **)v85, v92, &v84);
      if (mgcl::ints::IntDecompressor<unsigned long long>::decompress((uint64_t *)v87, (unsigned __int8 *)(v69 + v67), v86, SBYTE4(v93), v93, v92, (uint64x2_t *)v85[0]))
      {
        int v70 = 7635;
      }
      else
      {
        uint64_t v71 = v92;
        if (!v92)
        {
LABEL_120:
          int v63 = 0;
LABEL_121:
          if (v85[0])
          {
            v85[1] = v85[0];
            operator delete(v85[0]);
          }
          goto LABEL_111;
        }
        uint64_t v72 = *a2;
        unint64_t v73 = *(void *)(*a2 + 696);
        uint64_t v74 = (uint64_t *)v88[0];
        unsigned int v75 = (uint64_t *)v85[0];
        unint64_t v76 = __pa;
        while (1)
        {
          unsigned __int32 v78 = v76->i32[0];
          unint64_t v76 = (int8x16_t *)((char *)v76 + 4);
          uint64_t v77 = v78;
          if (v73 <= v78) {
            break;
          }
          uint64_t v79 = *v74++;
          uint64_t v80 = *(void *)(v72 + 688) + 32 * v77;
          *(void *)(v80 + 16) = v79;
          uint64_t v81 = *v75++;
          *(void *)(v80 + 24) = v81;
          if (!--v71) {
            goto LABEL_120;
          }
        }
        int v70 = 7638;
      }
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v70);
      int v63 = 6;
      goto LABEL_121;
    }
LABEL_71:
    char v20 = 1;
    if (*(unsigned char *)v7) {
      goto LABEL_81;
    }
    goto LABEL_82;
  }
  LODWORD(v90[0]) = 0;
  uint64_t v16 = BitstreamUnpack((uint64_t *)(v7 + 8), (int *)v90, 5uLL);
  if ((v16 & 1) == 0)
  {
    unint64_t v22 = (FILE *)*MEMORY[0x1E4F143C8];
    int v23 = 7573;
    goto LABEL_79;
  }
  uint64_t v42 = *a2;
  if (!*(void *)(*a2 + 696))
  {
LABEL_60:
    unint64_t v40 = *(void *)(v7 + 24);
    unint64_t v35 = *(void *)(v7 + 48);
    unsigned int v34 = *(_DWORD *)(v7 + 64);
    goto LABEL_61;
  }
  unint64_t v43 = 0;
  unint64_t __p = (LODWORD(v90[0]) + 1);
  uint64_t v44 = 8;
  while (1)
  {
    unint64_t v45 = *(void *)(v7 + 24);
    if (v45 + 1 > 8 * *(void *)(v7 + 16))
    {
      unint64_t v22 = (FILE *)*MEMORY[0x1E4F143C8];
      int v23 = 7578;
      goto LABEL_79;
    }
    unsigned int v46 = *(unsigned __int8 *)(*(void *)(v7 + 8) + (v45 >> 3));
    *(void *)(v7 + 24) = v45 + 1;
    if ((v46 >> (~(_BYTE)v45 & 7))) {
      break;
    }
LABEL_51:
    ++v43;
    v44 += 32;
    if (v43 >= *(void *)(v42 + 696)) {
      goto LABEL_60;
    }
  }
  uint64_t v47 = *(void *)(v42 + 688);
  LODWORD(v87[0]) = 0;
  uint64_t v16 = BitstreamUnpack((uint64_t *)(v7 + 8), (int *)v87, __p);
  if (!v16)
  {
    int v23 = 7583;
    goto LABEL_78;
  }
  uint64_t v42 = *a2;
  uint64_t v48 = *(void *)(*a2 + 504);
  if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(*a2 + 512) - v48) >> 5) > (unint64_t)LODWORD(v87[0]))
  {
    *(void *)(v47 + v44) = v48 + 224 * LODWORD(v87[0]);
    goto LABEL_51;
  }
  int v23 = 7584;
LABEL_78:
  unint64_t v22 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_79:
  uint64_t v16 = fprintf(v22, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v23);
LABEL_80:
  char v20 = 0;
  if (*(unsigned char *)v7)
  {
LABEL_81:
    uint64_t v54 = geo::codec::Allocator::instance((geo::codec::Allocator *)v16);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v54 + 40))(v54, *(void *)(v7 + 40), 0);
  }
LABEL_82:
  uint64_t v55 = geo::codec::Allocator::instance((geo::codec::Allocator *)v16);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v55 + 40))(v55, v7, 0);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  *(void *)&v87[0] = "ChapterConnectivity";
  *(void *)&v90[0] = v87;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v9 + 1912, (uint64_t *)v87, (uint64_t)&std::piecewise_construct, (uint64_t **)v90)+ 4) = (double)((rep - v10.__d_.__rep_) / 1000) * 0.001;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v20 & 1;
}

void sub_18A462904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p)
  {
    operator delete(__p);
    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a17);
    uint64_t v27 = a21;
    if (!a21)
    {
LABEL_3:
      mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a25);
      if (!a11) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a17);
    uint64_t v27 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v27;
  operator delete(v27);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a25);
  if (!a11)
  {
LABEL_4:
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v25 - 120));
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a11);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v25 - 120));
  _Unwind_Resume(a1);
}

void sub_18A462A04(_Unwind_Exception *a1)
{
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_18A462A18(_Unwind_Exception *a1)
{
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_18A462A2C(_Unwind_Exception *a1)
{
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_18A462A40(_Unwind_Exception *a1)
{
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_18A462A54(_Unwind_Exception *a1)
{
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_18A462A68(_Unwind_Exception *a1)
{
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_18A462A80(_Unwind_Exception *a1)
{
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  if (a2 > (uint64_t)(*(void *)(result + 16) - *(void *)result) >> 3)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 8) - *(void *)result;
    uint64_t v4 = 8 * a2;
    uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 8 * a2, 8);
    unint64_t v5 = result + (v3 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v6 = *(void *)v2;
    uint64_t v7 = *(void *)(v2 + 8);
    unint64_t v8 = v5;
    if (v7 != *(void *)v2)
    {
      unint64_t v9 = v7 - *(void *)v2 - 8;
      if (v9 >= 0x58)
      {
        unint64_t v8 = result + (v3 & 0xFFFFFFFFFFFFFFF8);
        if (v7 - (v3 & 0xFFFFFFFFFFFFFFF8) - result >= 0x20)
        {
          uint64_t v10 = (v9 >> 3) + 1;
          uint64_t v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v12 = v7 - v11;
          unint64_t v8 = v5 - v11;
          uint64_t v13 = (_OWORD *)(result + 8 * (v3 >> 3) - 16);
          uint64_t v14 = (long long *)(v7 - 16);
          uint64_t v15 = v10 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v16 = *v14;
            *(v13 - 1) = *(v14 - 1);
            *uint64_t v13 = v16;
            v13 -= 2;
            v14 -= 2;
            v15 -= 4;
          }
          while (v15);
          uint64_t v7 = v12;
          if (v10 == (v10 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_10;
          }
        }
      }
      else
      {
        unint64_t v8 = result + (v3 & 0xFFFFFFFFFFFFFFF8);
      }
      do
      {
        uint64_t v17 = *(void *)(v7 - 8);
        v7 -= 8;
        *(void *)(v8 - 8) = v17;
        v8 -= 8;
      }
      while (v7 != v6);
    }
LABEL_10:
    *(void *)uint64_t v2 = v8;
    *(void *)(v2 + 8) = v5;
    uint64_t v18 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = result + v4;
    if (v6) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 24) + 40))(*(void *)(v2 + 24), v6, v18 - v6);
    }
  }
  return result;
}

double *geo::Coordinate3D<geo::Degrees,double>::Coordinate3D<double>(double *a1, double *a2)
{
  long double v3 = *a2;
  long double v4 = a2[1];
  long double v5 = a2[2];
  double v6 = sqrt(v3 * v3 + v4 * v4);
  double v7 = atan2(v5, v6 * 0.996647189);
  double v8 = atan2(v4, v3);
  __double2 v9 = __sincos_stret(v7);
  double v10 = atan2(v5 + v9.__sinval * v9.__sinval * (42841.3115 * v9.__sinval), v6 + v9.__cosval * v9.__cosval * (-42697.6727 * v9.__cosval));
  __double2 v11 = __sincos_stret(v10);
  *a1 = v10 * 57.2957795;
  a1[1] = v8 * 57.2957795;
  a1[2] = v6 / v11.__cosval + -6378137.0 / sqrt(v11.__sinval * v11.__sinval * -0.00669437999 + 1.0);
  return a1;
}

double *geo::Geocentric<double>::Geocentric<geo::Degrees,double>(double *a1, double *a2)
{
  double v3 = a2[1] * 0.0174532925;
  double v4 = a2[2];
  __double2 v5 = __sincos_stret(*a2 * 0.0174532925);
  double v6 = 6378137.0 / sqrt(v5.__sinval * v5.__sinval * -0.00669437999 + 1.0);
  double v7 = (v6 + v4) * v5.__cosval;
  __double2 v8 = __sincos_stret(v3);
  *a1 = v7 * v8.__cosval;
  a1[1] = v7 * v8.__sinval;
  a1[2] = (v4 + v6 * 0.99330562) * v5.__sinval;
  return a1;
}

uint64_t std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  if (a2 > (uint64_t)(*(void *)(result + 16) - *(void *)result) >> 2)
  {
    uint64_t v2 = result;
    if (a2 >> 62) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v3 = *(void *)(result + 8) - *(void *)result;
    uint64_t v4 = 4 * a2;
    uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 4 * a2, 4);
    unint64_t v5 = result + (v3 & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v6 = *(void *)v2;
    uint64_t v7 = *(void *)(v2 + 8);
    unint64_t v8 = v5;
    if (v7 == *(void *)v2) {
      goto LABEL_11;
    }
    unint64_t v9 = v7 - *(void *)v2 - 4;
    if (v9 >= 0x2C)
    {
      unint64_t v8 = result + (v3 & 0xFFFFFFFFFFFFFFFCLL);
      if (v7 - (v3 & 0xFFFFFFFFFFFFFFFCLL) - result >= 0x20)
      {
        uint64_t v10 = (v9 >> 2) + 1;
        uint64_t v11 = 4 * (v10 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v12 = v7 - v11;
        unint64_t v8 = v5 - v11;
        uint64_t v13 = (_OWORD *)(result + 4 * (v3 >> 2) - 16);
        uint64_t v14 = (long long *)(v7 - 16);
        uint64_t v15 = v10 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v16 = *v14;
          *(v13 - 1) = *(v14 - 1);
          *uint64_t v13 = v16;
          v13 -= 2;
          v14 -= 2;
          v15 -= 8;
        }
        while (v15);
        uint64_t v7 = v12;
        if (v10 == (v10 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_11;
        }
      }
    }
    else
    {
      unint64_t v8 = result + (v3 & 0xFFFFFFFFFFFFFFFCLL);
    }
    do
    {
      int v17 = *(_DWORD *)(v7 - 4);
      v7 -= 4;
      *(_DWORD *)(v8 - 4) = v17;
      v8 -= 4;
    }
    while (v7 != v6);
LABEL_11:
    *(void *)uint64_t v2 = v8;
    *(void *)(v2 + 8) = v5;
    uint64_t v18 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = result + v4;
    if (v6) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 24) + 40))(*(void *)(v2 + 24), v6, v18 - v6);
    }
  }
  return result;
}

uint64_t std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::emplace_back<int const&>(uint64_t result, _DWORD *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(_DWORD **)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4) {
      _DWORD *v4 = *a2;
    }
    *(void *)(result + 8) = v4 + 1;
    return result;
  }
  uint64_t v6 = ((uint64_t)v4 - *(void *)result) >> 2;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 62) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v5 - *(void *)result;
  if (v8 >> 1 > v7) {
    unint64_t v7 = v8 >> 1;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t v9 = 4 * v7;
    uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 4 * v7, 4);
    uint64_t v10 = (_DWORD *)(result + 4 * v6);
    unint64_t v7 = result + v9;
    if (result) {
      _DWORD *v10 = *a2;
    }
    uint64_t v11 = (uint64_t)(v10 + 1);
    uint64_t v12 = *(void *)v3;
    uint64_t v13 = *(void *)(v3 + 8);
    uint64_t v14 = v13 - *(void *)v3;
    if (v13 != *(void *)v3) {
      goto LABEL_14;
    }
LABEL_21:
    uint64_t v19 = v10;
    goto LABEL_24;
  }
  uint64_t v10 = (_DWORD *)(4 * v6);
  uint64_t v11 = 4 * v6 + 4;
  uint64_t v12 = *(void *)result;
  uint64_t v13 = *(void *)(result + 8);
  uint64_t v14 = v13 - *(void *)result;
  if (v13 == *(void *)result) {
    goto LABEL_21;
  }
LABEL_14:
  unint64_t v15 = v14 - 4;
  if (v15 < 0x1C || (unint64_t)(v13 - (void)v10) < 0x20)
  {
    uint64_t v18 = v13;
    uint64_t v19 = v10;
  }
  else
  {
    uint64_t v16 = (v15 >> 2) + 1;
    uint64_t v17 = 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v18 = v13 - v17;
    uint64_t v19 = &v10[v17 / 0xFFFFFFFFFFFFFFFCLL];
    char v20 = v10 - 4;
    unint64_t v21 = (long long *)(v13 - 16);
    uint64_t v22 = v16 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v23 = *v21;
      *(v20 - 1) = *(v21 - 1);
      *char v20 = v23;
      v20 -= 2;
      v21 -= 2;
      v22 -= 8;
    }
    while (v22);
    if (v16 == (v16 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_24;
    }
  }
  do
  {
    int v24 = *(_DWORD *)(v18 - 4);
    v18 -= 4;
    *--uint64_t v19 = v24;
  }
  while (v18 != v12);
LABEL_24:
  *(void *)uint64_t v3 = v19;
  *(void *)(v3 + 8) = v11;
  uint64_t v25 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = v7;
  if (v12) {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v12, v25 - v12);
  }
  *(void *)(v3 + 8) = v11;
  return result;
}

uint64_t *std::unordered_map<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>::at(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (!a2) {
    goto LABEL_22;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  unint64_t v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5 || (uint64_t v6 = *v5) == 0) {
LABEL_22:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v3.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v8 = v6[1];
      if (v8 == a3)
      {
        if (*((_DWORD *)v6 + 4) == a3) {
          return v6 + 3;
        }
      }
      else if ((v8 & (a2 - 1)) != v4)
      {
        goto LABEL_22;
      }
      uint64_t v6 = (uint64_t *)*v6;
      if (!v6) {
        goto LABEL_22;
      }
    }
  }
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == a3) {
      break;
    }
    if (v7 >= a2) {
      v7 %= a2;
    }
    if (v7 != v4) {
      goto LABEL_22;
    }
LABEL_11:
    uint64_t v6 = (uint64_t *)*v6;
    if (!v6) {
      goto LABEL_22;
    }
  }
  if (*((_DWORD *)v6 + 4) != a3) {
    goto LABEL_11;
  }
  return v6 + 3;
}

uint64_t *std::vector<VMP4Material,geo::StdAllocator<VMP4Material,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t *std::vector<unsigned long,geo::StdAllocator<unsigned long,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t std::unordered_map<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v5 = (void **)*v2;
      uint64_t v6 = v2[3];
      if (v6)
      {
        v2[4] = v6;
        (*(void (**)(void *, void *, int64_t))(*(void *)v2[6] + 40))(v2[6], v6, (unsigned char *)v2[5] - (unsigned char *)v6);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint8x8_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t std::unordered_map<unsigned int,std::vector<geo::Transform<float>,geo::StdAllocator<geo::Transform<float>,geo::codec::Allocator>>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v5 = (void **)*v2;
      uint64_t v6 = v2[3];
      if (v6)
      {
        v2[4] = v6;
        (*(void (**)(void *, void *, int64_t))(*(void *)v2[6] + 40))(v2[6], v6, (unsigned char *)v2[5] - (unsigned char *)v6);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint8x8_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void *std::function<void ()(VMP4Chapter *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void std::vector<std::vector<unsigned short>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void **)a1;
  uint8x8_t v3 = *(void **)(a1 + 8);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(void *)a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      unint64_t v21 = &v4[3 * a2];
      if (v3 != v21)
      {
        uint64_t v22 = *(void **)(a1 + 8);
        do
        {
          int v24 = (void *)*(v22 - 3);
          v22 -= 3;
          long long v23 = v24;
          if (v24)
          {
            *(v3 - 2) = v23;
            operator delete(v23);
          }
          uint8x8_t v3 = v22;
        }
        while (v22 != v21);
      }
      *(void *)(a1 + 8) = v21;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 8), 24 * ((24 * v6 - 24) / 0x18) + 24);
      *(void *)(a1 + 8) = &v3[3 * ((24 * v6 - 24) / 0x18) + 3];
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3);
      uint64_t v9 = 2 * v8;
      if (2 * v8 <= a2) {
        uint64_t v9 = a2;
      }
      if (v8 >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = 24 * v10;
      uint64_t v12 = (char *)operator new(24 * v10);
      uint64_t v13 = &v12[24 * v5];
      uint64_t v14 = &v12[v11];
      bzero(v13, 24 * ((24 * v6 - 24) / 0x18) + 24);
      unint64_t v15 = &v13[24 * ((24 * v6 - 24) / 0x18) + 24];
      if (v3 == v4)
      {
        *(void *)a1 = v13;
        *(void *)(a1 + 8) = v15;
        *(void *)(a1 + 16) = v14;
      }
      else
      {
        do
        {
          long long v16 = *(_OWORD *)(v3 - 3);
          v3 -= 3;
          *(_OWORD *)(v13 - 24) = v16;
          v13 -= 24;
          *((void *)v13 + 2) = v3[2];
          void *v3 = 0;
          v3[1] = 0;
          v3[2] = 0;
        }
        while (v3 != v4);
        uint8x8_t v3 = *(void **)a1;
        uint64_t v17 = *(void **)(a1 + 8);
        *(void *)a1 = v13;
        *(void *)(a1 + 8) = v15;
        *(void *)(a1 + 16) = v14;
        if (v17 != v3)
        {
          uint64_t v18 = v17;
          do
          {
            char v20 = (void *)*(v18 - 3);
            v18 -= 3;
            uint64_t v19 = v20;
            if (v20)
            {
              *(v17 - 2) = v19;
              operator delete(v19);
            }
            uint64_t v17 = v18;
          }
          while (v18 != v3);
        }
      }
      if (v3)
      {
        operator delete(v3);
      }
    }
  }
}

void std::vector<unsigned short>::resize(char **a1, unint64_t a2)
{
  uint8x8_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = v4 - *a1;
  uint64_t v6 = v5 >> 1;
  unint64_t v7 = a2 - (v5 >> 1);
  if (a2 <= v5 >> 1)
  {
    if (a2 >= v5 >> 1) {
      return;
    }
    uint64_t v26 = &v3[2 * a2];
    goto LABEL_24;
  }
  unint64_t v8 = a1[2];
  if (v7 <= (v8 - v4) >> 1)
  {
    bzero(a1[1], 2 * v7);
    uint64_t v26 = &v4[2 * v7];
LABEL_24:
    a1[1] = v26;
    return;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = v8 - v3;
  if (v9 <= a2) {
    unint64_t v10 = a2;
  }
  else {
    unint64_t v10 = v9;
  }
  BOOL v11 = v9 >= 0x7FFFFFFFFFFFFFFELL;
  uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
  if (!v11) {
    uint64_t v12 = v10;
  }
  if (v12 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v13 = 2 * v12;
  uint64_t v14 = (char *)operator new(2 * v12);
  unint64_t v15 = &v14[2 * v6];
  bzero(v15, 2 * v7);
  long long v16 = &v15[2 * v7];
  if (v4 != v3)
  {
    unint64_t v17 = v4 - v3 - 2;
    if (v17 < 0x1E) {
      goto LABEL_30;
    }
    if ((unint64_t)(&v4[-v5] - v14) < 0x20) {
      goto LABEL_30;
    }
    uint64_t v18 = (v17 >> 1) + 1;
    unint64_t v19 = 2 * (v18 & 0xFFFFFFFFFFFFFFF0);
    char v20 = &v4[-v19];
    v15 -= v19;
    unint64_t v21 = &v14[2 * v6 - 16];
    uint64_t v22 = (long long *)(v4 - 16);
    unint64_t v23 = v18 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)unint64_t v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 16;
    }
    while (v23);
    unint64_t v4 = v20;
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_30:
      do
      {
        __int16 v25 = *((_WORD *)v4 - 1);
        v4 -= 2;
        *((_WORD *)v15 - 1) = v25;
        v15 -= 2;
      }
      while (v4 != v3);
    }
  }
  *a1 = v15;
  a1[1] = v16;
  a1[2] = &v14[v13];
  if (v3)
  {
    operator delete(v3);
  }
}

void **std::vector<std::vector<unsigned short>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint8x8_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = (char *)a1[1];
      do
      {
        unint64_t v7 = (void *)*((void *)v5 - 3);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        uint8x8_t v3 = v5;
      }
      while (v5 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t geo::codec::adaptiveDeltaEncoderDecode(geo::codec::Allocator *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)a3;
  uint64_t v7 = *(void *)(a3 + 8);
  if (v7 != *(void *)a3)
  {
    *(void *)(a3 + 8) = v6;
    uint64_t v7 = v6;
  }
  if (a2 <= (*(void *)(a3 + 16) - v6) >> 3) {
    goto LABEL_14;
  }
  uint64_t v8 = v7 - v6;
  a1 = (geo::codec::Allocator *)(*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a3 + 24)
                                                                                             + 16))(*(void *)(a3 + 24), 8 * a2, 8);
  unint64_t v9 = (char *)a1 + (v8 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void *)v3;
  uint64_t v11 = *(void *)(v3 + 8);
  uint64_t v12 = v9;
  if (v11 != *(void *)v3)
  {
    unint64_t v13 = v11 - *(void *)v3 - 8;
    if (v13 < 0x58)
    {
      uint64_t v12 = (char *)a1 + (v8 & 0xFFFFFFFFFFFFFFF8);
      do
      {
LABEL_11:
        uint64_t v21 = *(void *)(v11 - 8);
        v11 -= 8;
        *((void *)v12 - 1) = v21;
        v12 -= 8;
      }
      while (v11 != v10);
      goto LABEL_12;
    }
    uint64_t v12 = (char *)a1 + (v8 & 0xFFFFFFFFFFFFFFF8);
    if (v11 - (v8 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)a1 < 0x20) {
      goto LABEL_11;
    }
    uint64_t v14 = (v13 >> 3) + 1;
    uint64_t v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v16 = v11 - v15;
    uint64_t v12 = &v9[-v15];
    unint64_t v17 = (_OWORD *)((char *)a1 + 8 * (v8 >> 3) - 16);
    uint64_t v18 = (long long *)(v11 - 16);
    uint64_t v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v20 = *v18;
      *(v17 - 1) = *(v18 - 1);
      *unint64_t v17 = v20;
      v17 -= 2;
      v18 -= 2;
      v19 -= 4;
    }
    while (v19);
    uint64_t v11 = v16;
    if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_11;
    }
  }
LABEL_12:
  *(void *)uint64_t v3 = v12;
  *(void *)(v3 + 8) = v9;
  uint64_t v22 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = (char *)a1 + 8 * v4;
  if (v10) {
    a1 = (geo::codec::Allocator *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v10, v22 - v10);
  }
LABEL_14:
  if (!v4) {
    return 1;
  }
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  unint64_t v128 = 0;
  uint64_t v23 = geo::codec::Allocator::instance(a1);
  uint64_t v24 = v23;
  uint64_t v129 = v23;
  unint64_t v25 = *((void *)v5 + 2);
  unint64_t v26 = 8 * *((void *)v5 + 1);
  if (v25 + 1 > v26)
  {
LABEL_16:
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 10418);
    return 0;
  }
  uint64_t v28 = *(void *)v5;
  unsigned int v29 = *(unsigned __int8 *)(*(void *)v5 + (v25 >> 3));
  *((void *)v5 + 2) = v25 + 1;
  if (((v29 >> (~(_BYTE)v25 & 7)) & 1) == 0) {
    goto LABEL_68;
  }
  uint64_t v30 = 0;
  uint64_t v31 = v25 - v26 + 1;
  do
  {
    if (!(v31 + v30)) {
      goto LABEL_16;
    }
    unsigned int v32 = *(unsigned __int8 *)(v28 + ((v25 + v30 + 1) >> 3));
    *((void *)v5 + 2) = v25 + v30 + 2;
    char v33 = ~(v25 + v30++ + 1) & 7;
  }
  while (((v32 >> v33) & 1) != 0);
  if (!v30)
  {
LABEL_68:
    unint64_t v70 = 0;
    unint64_t v37 = 0;
    uint64_t v34 = 0;
    goto LABEL_69;
  }
  uint64_t v118 = v3;
  uint64_t v123 = v23;
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v23 + 16))(v23, 16 * v30, 8);
  int v35 = 0;
  int v36 = v30 - 1;
  unint64_t v37 = v34 + 16 * v30;
  uint64_t v126 = v34;
  uint64_t v127 = v34;
  unint64_t v128 = v37;
  unint64_t v38 = v34;
  unint64_t v120 = v4;
  do
  {
    unint64_t v40 = *((void *)v5 + 2);
    unint64_t v41 = 8 * *((void *)v5 + 1);
    if (v40 + 2 > v41)
    {
      unint64_t v74 = v37;
      int v75 = 10422;
      goto LABEL_82;
    }
    int v42 = 0;
    uint64_t v43 = *(void *)v5;
    unint64_t v44 = 2;
    do
    {
      unint64_t v45 = 8 - (v40 & 7);
      if (v44 < v45) {
        unint64_t v45 = v44;
      }
      int v42 = (*(unsigned __int8 *)(v43 + (v40 >> 3)) >> (8 - (v40 & 7) - v45)) & ~(-1 << v45) | (v42 << v45);
      v40 += v45;
      *((void *)v5 + 2) = v40;
      v44 -= v45;
    }
    while (v44);
    unint64_t v46 = v40 + 1;
    if (v40 + 1 > v41)
    {
      unint64_t v74 = v37;
      int v75 = 10424;
      goto LABEL_82;
    }
    int v47 = *(unsigned __int8 *)(v43 + (v40 >> 3));
    *((void *)v5 + 2) = v46;
    int v48 = (1 << (~(_BYTE)v40 & 7)) & v47;
    BOOL v49 = v48 != 0;
    unint64_t v50 = v40 + 7;
    if (v48)
    {
      if (v50 > v41)
      {
        unint64_t v74 = v37;
        int v75 = 10429;
        goto LABEL_82;
      }
      int v51 = 0;
      unint64_t v52 = 6;
      do
      {
        unint64_t v53 = 8 - (v46 & 7);
        if (v52 < v53) {
          unint64_t v53 = v52;
        }
        int v51 = (*(unsigned __int8 *)(v43 + (v46 >> 3)) >> (8 - (v46 & 7) - v53)) & ~(-1 << v53) | (v51 << v53);
        v46 += v53;
        *((void *)v5 + 2) = v46;
        v52 -= v53;
      }
      while (v52);
      unint64_t v54 = (v51 + 1);
    }
    else
    {
      if (v50 > v41) {
        goto LABEL_80;
      }
      int v55 = 0;
      unint64_t v56 = 6;
      do
      {
        unint64_t v57 = 8 - (v46 & 7);
        if (v56 < v57) {
          unint64_t v57 = v56;
        }
        int v55 = (*(unsigned __int8 *)(v43 + (v46 >> 3)) >> (8 - (v46 & 7) - v57)) & ~(-1 << v57) | (v55 << v57);
        v46 += v57;
        *((void *)v5 + 2) = v46;
        v56 -= v57;
      }
      while (v56);
      unint64_t v58 = (v55 + 1);
      if (v46 + v58 > v41)
      {
LABEL_80:
        unint64_t v74 = v37;
        int v75 = 10432;
        goto LABEL_82;
      }
      unint64_t v54 = 0;
      if (v55 != -1)
      {
        do
        {
          unint64_t v59 = 8 - (v46 & 7);
          if (v58 < v59) {
            unint64_t v59 = v58;
          }
          unint64_t v54 = (*(unsigned __int8 *)(v43 + (v46 >> 3)) >> (8 - (v46 & 7) - v59)) & (unint64_t)~(-1 << v59) | (v54 << v59);
          v46 += v59;
          *((void *)v5 + 2) = v46;
          v58 -= v59;
        }
        while (v58);
      }
    }
    if (v38 >= v37)
    {
      uint64_t v60 = (uint64_t)(v38 - v34) >> 4;
      unint64_t v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 60) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v37 - v34) >> 3 > v61) {
        unint64_t v61 = (uint64_t)(v37 - v34) >> 3;
      }
      if (v37 - v34 >= 0x7FFFFFFFFFFFFFF0) {
        uint64_t v62 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v62 = v61;
      }
      if (v62)
      {
        BOOL v63 = v49;
        uint64_t v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v123 + 16))(v123, 16 * v62, 8);
        uint64_t v65 = v64 + 16 * v60;
        unint64_t v37 = v64 + 16 * v62;
        if (v64)
        {
          *(_DWORD *)uint64_t v65 = v42;
          *(unsigned char *)(v65 + 4) = v63;
          *(void *)(v65 + 8) = v54;
        }
        uint64_t v67 = v126;
        uint64_t v66 = v127;
        uint64_t v34 = v64 + 16 * v60;
        if (v127 == v126)
        {
LABEL_62:
          unint64_t v38 = v65 + 16;
          unint64_t v68 = v128;
          uint64_t v126 = v34;
          unint64_t v128 = v37;
          if (v66) {
            goto LABEL_63;
          }
LABEL_67:
          int v36 = v30 - 1;
          goto LABEL_25;
        }
      }
      else
      {
        unint64_t v37 = 0;
        uint64_t v65 = 16 * v60;
        uint64_t v67 = v126;
        uint64_t v66 = v127;
        uint64_t v34 = 16 * v60;
        if (v127 == v126) {
          goto LABEL_62;
        }
      }
      do
      {
        *(_OWORD *)(v34 - 16) = *(_OWORD *)(v66 - 16);
        v34 -= 16;
        v66 -= 16;
      }
      while (v66 != v67);
      uint64_t v66 = v67;
      unint64_t v38 = v65 + 16;
      unint64_t v68 = v128;
      uint64_t v126 = v34;
      unint64_t v128 = v37;
      if (v67)
      {
LABEL_63:
        unint64_t v69 = v37;
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v123 + 40))(v123, v66, v68 - v66);
        unint64_t v37 = v69;
        int v36 = v30 - 1;
        goto LABEL_25;
      }
      goto LABEL_67;
    }
    if (v38)
    {
      *(_DWORD *)unint64_t v38 = v42;
      *(unsigned char *)(v38 + 4) = v49;
      *(void *)(v38 + 8) = v54;
    }
    v38 += 16;
LABEL_25:
    uint64_t v127 = v38;
  }
  while (v36 != v35++);
  uint64_t v34 = v126;
  unint64_t v70 = v30;
  uint64_t v3 = v118;
  unint64_t v4 = v120;
  uint64_t v24 = v123;
  if (v30 != (uint64_t)(v38 - v126) >> 4)
  {
    unint64_t v74 = v37;
    int v75 = 10437;
    goto LABEL_90;
  }
LABEL_69:
  unint64_t v71 = *((void *)v5 + 2);
  unint64_t v72 = v71 + 1;
  unint64_t v73 = 8 * *((void *)v5 + 1);
  if (v71 + 1 > v73)
  {
    unint64_t v74 = v37;
    int v75 = 10440;
    goto LABEL_90;
  }
  uint64_t v76 = *(void *)v5;
  int v77 = *(unsigned __int8 *)(*(void *)v5 + (v71 >> 3));
  *((void *)v5 + 2) = v72;
  int v78 = (1 << (~(_BYTE)v71 & 7)) & v77;
  if (v78)
  {
    int v79 = 0;
    unint64_t v125 = 0;
    if (v71 + 7 > v73) {
      goto LABEL_89;
    }
  }
  else
  {
    unint64_t v80 = v71 + 2;
    if (v80 > v73)
    {
      unint64_t v74 = v37;
      int v75 = 10445;
      goto LABEL_90;
    }
    unsigned int v81 = *(unsigned __int8 *)(v76 + (v72 >> 3));
    *((void *)v5 + 2) = v80;
    int v79 = (v81 >> (~(_BYTE)v72 & 7)) & 1;
    unint64_t v72 = v80;
    unint64_t v125 = 0;
    if (v80 + 6 > v73) {
      goto LABEL_89;
    }
  }
  int v82 = 0;
  unint64_t v83 = 6;
  do
  {
    unint64_t v84 = 8 - (v72 & 7);
    if (v83 < v84) {
      unint64_t v84 = v83;
    }
    int v82 = (*(unsigned __int8 *)(v76 + (v72 >> 3)) >> (8 - (v72 & 7) - v84)) & ~(-1 << v84) | (v82 << v84);
    v72 += v84;
    *((void *)v5 + 2) = v72;
    v83 -= v84;
  }
  while (v83);
  unint64_t v85 = (v82 + 1);
  if (v72 + v85 > v73) {
    goto LABEL_89;
  }
  if (v82 == -1) {
    goto LABEL_103;
  }
  unint64_t v87 = 0;
  do
  {
    unint64_t v88 = 8 - (v72 & 7);
    if (v85 < v88) {
      unint64_t v88 = v85;
    }
    unint64_t v87 = (*(unsigned __int8 *)(v76 + (v72 >> 3)) >> (8 - (v72 & 7) - v88)) & (unint64_t)~(-1 << v88) | (v87 << v88);
    v72 += v88;
    *((void *)v5 + 2) = v72;
    v85 -= v88;
  }
  while (v85);
  if (!v87)
  {
LABEL_103:
    int v117 = v79;
    int v119 = v78;
    unint64_t v74 = v37;
    unint64_t v90 = 0;
  }
  else
  {
    if (v72 + 1 > v73)
    {
LABEL_89:
      unint64_t v74 = v37;
      int v75 = 10449;
      goto LABEL_90;
    }
    int v117 = v79;
    int v119 = v78;
    unint64_t v74 = v37;
    unsigned int v89 = *(unsigned __int8 *)(v76 + (v72 >> 3));
    *((void *)v5 + 2) = v72 + 1;
    if ((v89 >> (~(_BYTE)v72 & 7))) {
      unint64_t v90 = -(uint64_t)v87;
    }
    else {
      unint64_t v90 = v87;
    }
  }
  uint64_t v123 = v24;
  unint64_t v125 = v90;
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::emplace_back<long long &>(v3, &v125);
  if (v4 < 2)
  {
LABEL_140:
    if (v4 != (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 3)
    {
      int v75 = 10504;
      goto LABEL_82;
    }
    uint64_t v27 = 1;
    uint64_t v24 = v123;
    if (v34) {
      goto LABEL_91;
    }
    return v27;
  }
  unint64_t v91 = 0;
  uint64_t v92 = 1;
  unint64_t v121 = v4;
  while (2)
  {
    if (v70 < 2)
    {
LABEL_116:
      if (v70 <= v91)
      {
        int v75 = 10463;
        goto LABEL_82;
      }
      int v103 = v117;
      if (v119)
      {
        unint64_t v104 = *((void *)v5 + 2);
        if (v104 + 1 > 8 * *((void *)v5 + 1))
        {
          int v75 = 10467;
          goto LABEL_82;
        }
        unsigned int v105 = *(unsigned __int8 *)(*(void *)v5 + (v104 >> 3));
        *((void *)v5 + 2) = v104 + 1;
        int v103 = (v105 >> (~(_BYTE)v104 & 7)) & 1;
      }
      unsigned int v106 = (unsigned int *)(v34 + 16 * v91);
      unint64_t v107 = *((void *)v106 + 1);
      unint64_t v122 = v91;
      if (*((unsigned char *)v106 + 4))
      {
        unint64_t v108 = *((void *)v5 + 2);
        if (v107) {
          BOOL v109 = v108 + v107 > 8 * *((void *)v5 + 1);
        }
        else {
          BOOL v109 = 1;
        }
        if (v109)
        {
          unsigned int v110 = 0;
        }
        else
        {
          unsigned int v110 = 0;
          uint64_t v111 = *(void *)v5;
          do
          {
            unint64_t v112 = 8 - (v108 & 7);
            if (v107 < v112) {
              unint64_t v112 = v107;
            }
            unsigned int v110 = (*(unsigned __int8 *)(v111 + (v108 >> 3)) >> (8 - (v108 & 7) - v112)) & ~(-1 << v112) | (v110 << v112);
            v108 += v112;
            *((void *)v5 + 2) = v108;
            v107 -= v112;
          }
          while (v107);
        }
        unint64_t v107 = v110;
      }
      uint64_t v113 = *v106;
      uint64_t v114 = *(void *)v3;
      uint64_t v115 = (uint64_t)(*(void *)(v3 + 8) - *(void *)v3) >> 3;
      switch((int)v113)
      {
        case 0:
          break;
        case 1:
          uint64_t v113 = *(void *)(v114 + 8 * v115 - 8);
          break;
        case 2:
          uint64_t v113 = 2 * *(void *)(v114 + 8 * v115 - 8) - *(void *)(v114 + 8 * v115 - 16);
          break;
        case 3:
          uint64_t v113 = 3 * (*(void *)(v114 + 8 * v115 - 8) - *(void *)(v114 + 8 * v115 - 16))
               + *(void *)(v114 + 8 * v115 - 24);
          break;
        default:
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Unexpected history count %u\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 10498, v113);
          uint64_t v113 = 0;
          break;
      }
      if (v103) {
        unint64_t v116 = -(uint64_t)v107;
      }
      else {
        unint64_t v116 = v107;
      }
      unint64_t v124 = v113 + v116;
      std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::emplace_back<long long>(v3, &v124);
      ++v92;
      unint64_t v4 = v121;
      unint64_t v91 = v122;
      if (v92 == v121) {
        goto LABEL_140;
      }
      continue;
    }
    break;
  }
  unint64_t v93 = *((void *)v5 + 2);
  unint64_t v94 = v93 + 1;
  unint64_t v95 = 8 * *((void *)v5 + 1);
  if (v93 + 1 <= v95)
  {
    uint64_t v96 = *(void *)v5;
    unsigned int v97 = *(unsigned __int8 *)(*(void *)v5 + (v93 >> 3));
    *((void *)v5 + 2) = v94;
    if ((v97 >> (~(_BYTE)v93 & 7)))
    {
      if (v93 + 2 > v95) {
        goto LABEL_144;
      }
      unsigned int v98 = *(unsigned __int8 *)(v96 + (v94 >> 3));
      *((void *)v5 + 2) = v93 + 2;
      if ((v98 >> (~(_BYTE)v94 & 7)))
      {
        uint64_t v99 = 0;
        uint64_t v100 = v93 - v95 + 2;
        while (v100 + v99)
        {
          unsigned int v101 = *(unsigned __int8 *)(v96 + ((v93 + v99 + 2) >> 3));
          *((void *)v5 + 2) = v93 + v99 + 3;
          char v102 = ~(v93 + v99++ + 2) & 7;
          if (((v101 >> v102) & 1) == 0)
          {
            unint64_t v91 = v99;
            goto LABEL_116;
          }
        }
LABEL_144:
        int v75 = 10459;
        goto LABEL_82;
      }
      unint64_t v91 = 0;
    }
    goto LABEL_116;
  }
  int v75 = 10457;
LABEL_82:
  uint64_t v24 = v123;
LABEL_90:
  fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v75);
  uint64_t v27 = 0;
  if (v34)
  {
LABEL_91:
    uint64_t v127 = v34;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v24 + 40))(v24, v34, v74 - v34);
  }
  return v27;
}

void sub_18A4643F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::vector<geo::codec::ParamInfo,geo::StdAllocator<geo::codec::ParamInfo,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_18A464404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::vector<geo::codec::ParamInfo,geo::StdAllocator<geo::codec::ParamInfo,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_18A46441C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::vector<geo::codec::ParamInfo,geo::StdAllocator<geo::codec::ParamInfo,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_18A464434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::vector<geo::codec::ParamInfo,geo::StdAllocator<geo::codec::ParamInfo,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t BitstreamUnpackUnary(uint64_t *a1, _DWORD *a2)
{
  BOOL v2 = 0;
  *a2 = 0;
  unint64_t v3 = a1[2];
  unint64_t v4 = 8 * a1[1];
  if (v3 + 1 > v4) {
    return v2;
  }
  uint64_t v5 = *a1;
  unsigned int v6 = *(unsigned __int8 *)(*a1 + (v3 >> 3));
  a1[2] = v3 + 1;
  if ((v6 >> (~(_BYTE)v3 & 7)))
  {
    uint64_t v7 = 0;
    unint64_t v8 = ~v3 + v4;
    do
    {
      *a2 = v7 + 1;
      BOOL v2 = v8 != v7;
      if (v8 == v7) {
        break;
      }
      unsigned int v9 = *(unsigned __int8 *)(v5 + ((v3 + v7 + 1) >> 3));
      a1[2] = v3 + v7 + 2;
      char v10 = ~(v3 + v7++ + 1) & 7;
    }
    while (((v9 >> v10) & 1) != 0);
    return v2;
  }
  return 1;
}

uint64_t std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::emplace_back<long long &>(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(void **)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4) {
      void *v4 = *a2;
    }
    *(void *)(result + 8) = v4 + 1;
    return result;
  }
  uint64_t v6 = ((uint64_t)v4 - *(void *)result) >> 3;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 61) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v5 - *(void *)result;
  if (v8 >> 2 > v7) {
    unint64_t v7 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t v9 = 8 * v7;
    uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 8 * v7, 8);
    char v10 = (void *)(result + 8 * v6);
    unint64_t v7 = result + v9;
    if (result) {
      void *v10 = *a2;
    }
    uint64_t v11 = (uint64_t)(v10 + 1);
    uint64_t v12 = *(void *)v3;
    uint64_t v13 = *(void *)(v3 + 8);
    uint64_t v14 = v13 - *(void *)v3;
    if (v13 != *(void *)v3) {
      goto LABEL_14;
    }
LABEL_21:
    uint64_t v19 = v10;
    goto LABEL_24;
  }
  char v10 = (void *)(8 * v6);
  uint64_t v11 = 8 * v6 + 8;
  uint64_t v12 = *(void *)result;
  uint64_t v13 = *(void *)(result + 8);
  uint64_t v14 = v13 - *(void *)result;
  if (v13 == *(void *)result) {
    goto LABEL_21;
  }
LABEL_14:
  unint64_t v15 = v14 - 8;
  if (v15 < 0x38 || (unint64_t)(v13 - (void)v10) < 0x20)
  {
    uint64_t v18 = v13;
    uint64_t v19 = v10;
  }
  else
  {
    uint64_t v16 = (v15 >> 3) + 1;
    uint64_t v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v18 = v13 - v17;
    uint64_t v19 = &v10[v17 / 0xFFFFFFFFFFFFFFF8];
    long long v20 = v10 - 2;
    uint64_t v21 = (long long *)(v13 - 16);
    uint64_t v22 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *v21;
      *(v20 - 1) = *(v21 - 1);
      *long long v20 = v23;
      v20 -= 2;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_24;
    }
  }
  do
  {
    uint64_t v24 = *(void *)(v18 - 8);
    v18 -= 8;
    *--uint64_t v19 = v24;
  }
  while (v18 != v12);
LABEL_24:
  *(void *)uint64_t v3 = v19;
  *(void *)(v3 + 8) = v11;
  uint64_t v25 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = v7;
  if (v12) {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v12, v25 - v12);
  }
  *(void *)(v3 + 8) = v11;
  return result;
}

uint64_t std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::emplace_back<long long>(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(void **)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4) {
      void *v4 = *a2;
    }
    *(void *)(result + 8) = v4 + 1;
    return result;
  }
  uint64_t v6 = ((uint64_t)v4 - *(void *)result) >> 3;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 61) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v5 - *(void *)result;
  if (v8 >> 2 > v7) {
    unint64_t v7 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t v9 = 8 * v7;
    uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 8 * v7, 8);
    char v10 = (void *)(result + 8 * v6);
    unint64_t v7 = result + v9;
    if (result) {
      void *v10 = *a2;
    }
    uint64_t v11 = (uint64_t)(v10 + 1);
    uint64_t v12 = *(void *)v3;
    uint64_t v13 = *(void *)(v3 + 8);
    uint64_t v14 = v13 - *(void *)v3;
    if (v13 != *(void *)v3) {
      goto LABEL_14;
    }
LABEL_21:
    uint64_t v19 = v10;
    goto LABEL_24;
  }
  char v10 = (void *)(8 * v6);
  uint64_t v11 = 8 * v6 + 8;
  uint64_t v12 = *(void *)result;
  uint64_t v13 = *(void *)(result + 8);
  uint64_t v14 = v13 - *(void *)result;
  if (v13 == *(void *)result) {
    goto LABEL_21;
  }
LABEL_14:
  unint64_t v15 = v14 - 8;
  if (v15 < 0x38 || (unint64_t)(v13 - (void)v10) < 0x20)
  {
    uint64_t v18 = v13;
    uint64_t v19 = v10;
  }
  else
  {
    uint64_t v16 = (v15 >> 3) + 1;
    uint64_t v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v18 = v13 - v17;
    uint64_t v19 = &v10[v17 / 0xFFFFFFFFFFFFFFF8];
    long long v20 = v10 - 2;
    uint64_t v21 = (long long *)(v13 - 16);
    uint64_t v22 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *v21;
      *(v20 - 1) = *(v21 - 1);
      *long long v20 = v23;
      v20 -= 2;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_24;
    }
  }
  do
  {
    uint64_t v24 = *(void *)(v18 - 8);
    v18 -= 8;
    *--uint64_t v19 = v24;
  }
  while (v18 != v12);
LABEL_24:
  *(void *)uint64_t v3 = v19;
  *(void *)(v3 + 8) = v11;
  uint64_t v25 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = v7;
  if (v12) {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v12, v25 - v12);
  }
  *(void *)(v3 + 8) = v11;
  return result;
}

uint64_t *std::vector<geo::codec::ParamInfo,geo::StdAllocator<geo::codec::ParamInfo,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::emplace_back<unsigned int>(uint64_t result, _DWORD *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(_DWORD **)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4) {
      _DWORD *v4 = *a2;
    }
    *(void *)(result + 8) = v4 + 1;
    return result;
  }
  uint64_t v6 = ((uint64_t)v4 - *(void *)result) >> 2;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 62) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v5 - *(void *)result;
  if (v8 >> 1 > v7) {
    unint64_t v7 = v8 >> 1;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t v9 = 4 * v7;
    uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 4 * v7, 4);
    char v10 = (_DWORD *)(result + 4 * v6);
    unint64_t v7 = result + v9;
    if (result) {
      _DWORD *v10 = *a2;
    }
    uint64_t v11 = (uint64_t)(v10 + 1);
    uint64_t v12 = *(void *)v3;
    uint64_t v13 = *(void *)(v3 + 8);
    uint64_t v14 = v13 - *(void *)v3;
    if (v13 != *(void *)v3) {
      goto LABEL_14;
    }
LABEL_21:
    uint64_t v19 = v10;
    goto LABEL_24;
  }
  char v10 = (_DWORD *)(4 * v6);
  uint64_t v11 = 4 * v6 + 4;
  uint64_t v12 = *(void *)result;
  uint64_t v13 = *(void *)(result + 8);
  uint64_t v14 = v13 - *(void *)result;
  if (v13 == *(void *)result) {
    goto LABEL_21;
  }
LABEL_14:
  unint64_t v15 = v14 - 4;
  if (v15 < 0x1C || (unint64_t)(v13 - (void)v10) < 0x20)
  {
    uint64_t v18 = v13;
    uint64_t v19 = v10;
  }
  else
  {
    uint64_t v16 = (v15 >> 2) + 1;
    uint64_t v17 = 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v18 = v13 - v17;
    uint64_t v19 = &v10[v17 / 0xFFFFFFFFFFFFFFFCLL];
    long long v20 = v10 - 4;
    uint64_t v21 = (long long *)(v13 - 16);
    uint64_t v22 = v16 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v23 = *v21;
      *(v20 - 1) = *(v21 - 1);
      *long long v20 = v23;
      v20 -= 2;
      v21 -= 2;
      v22 -= 8;
    }
    while (v22);
    if (v16 == (v16 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_24;
    }
  }
  do
  {
    int v24 = *(_DWORD *)(v18 - 4);
    v18 -= 4;
    *--uint64_t v19 = v24;
  }
  while (v18 != v12);
LABEL_24:
  *(void *)uint64_t v3 = v19;
  *(void *)(v3 + 8) = v11;
  uint64_t v25 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = v7;
  if (v12) {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v12, v25 - v12);
  }
  *(void *)(v3 + 8) = v11;
  return result;
}

uint64_t std::vector<GeoCodecsRoadOffsets,geo::StdAllocator<GeoCodecsRoadOffsets,geo::codec::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  if (a2 > (uint64_t)(*(void *)(result + 16) - *(void *)result) >> 4)
  {
    if (a2 >> 60) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 8) - *(void *)result;
    uint64_t v4 = 16 * a2;
    uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 16 * a2, 4);
    uint64_t v6 = *(void *)v2;
    uint64_t v5 = *(void *)(v2 + 8);
    unint64_t v7 = result + (v3 & 0xFFFFFFFFFFFFFFF0);
    if (v5 != *(void *)v2)
    {
      do
      {
        *(_OWORD *)(v7 - 16) = *(_OWORD *)(v5 - 16);
        v7 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      uint64_t v5 = *(void *)v2;
    }
    *(void *)uint64_t v2 = v7;
    *(void *)(v2 + 8) = result + (v3 & 0xFFFFFFFFFFFFFFF0);
    uint64_t v8 = *(void *)(v2 + 16);
    *(void *)(v2 + 16) = result + v4;
    if (v5) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 24) + 40))(*(void *)(v2 + 24), v5, v8 - v5);
    }
  }
  return result;
}

uint64_t std::vector<GeoCodecsRoadOffsets,geo::StdAllocator<GeoCodecsRoadOffsets,geo::codec::Allocator>>::emplace_back<GeoCodecsRoadOffsets&>(uint64_t result, _OWORD *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(_OWORD **)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v6 = ((uint64_t)v4 - *(void *)result) >> 4;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 60) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v5 - *(void *)result;
    if (v8 >> 3 > v7) {
      unint64_t v7 = v8 >> 3;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
    }
    if (v7)
    {
      uint64_t v9 = 16 * v7;
      uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 16 * v7, 4);
      char v10 = (_OWORD *)(result + 16 * v6);
      unint64_t v7 = result + v9;
      if (result) {
        _OWORD *v10 = *a2;
      }
      uint64_t v11 = (uint64_t)(v10 + 1);
      uint64_t v13 = *(void *)v3;
      uint64_t v12 = *(void *)(v3 + 8);
      if (v12 == *(void *)v3)
      {
LABEL_14:
        *(void *)uint64_t v3 = v10;
        *(void *)(v3 + 8) = v11;
        uint64_t v14 = *(void *)(v3 + 16);
        *(void *)(v3 + 16) = v7;
        if (!v12)
        {
LABEL_15:
          *(void *)(v3 + 8) = v11;
          return result;
        }
LABEL_19:
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v12, v14 - v12);
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (_OWORD *)(16 * v6);
      uint64_t v11 = 16 * v6 + 16;
      uint64_t v13 = *(void *)result;
      uint64_t v12 = *(void *)(result + 8);
      if (v12 == *(void *)result) {
        goto LABEL_14;
      }
    }
    do
    {
      *--char v10 = *(_OWORD *)(v12 - 16);
      v12 -= 16;
    }
    while (v12 != v13);
    uint64_t v12 = *(void *)v3;
    *(void *)uint64_t v3 = v10;
    *(void *)(v3 + 8) = v11;
    uint64_t v14 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = v7;
    if (!v12) {
      goto LABEL_15;
    }
    goto LABEL_19;
  }
  if (v4) {
    _OWORD *v4 = *a2;
  }
  *(void *)(result + 8) = v4 + 1;
  return result;
}

uint64_t std::vector<GeoCodecsRoadOffsets,geo::StdAllocator<GeoCodecsRoadOffsets,geo::codec::Allocator>>::emplace_back<GeoCodecsRoadOffsets>(uint64_t result, _OWORD *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(_OWORD **)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v6 = ((uint64_t)v4 - *(void *)result) >> 4;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 60) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v5 - *(void *)result;
    if (v8 >> 3 > v7) {
      unint64_t v7 = v8 >> 3;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
    }
    if (v7)
    {
      uint64_t v9 = 16 * v7;
      uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 16 * v7, 4);
      char v10 = (_OWORD *)(result + 16 * v6);
      unint64_t v7 = result + v9;
      if (result) {
        _OWORD *v10 = *a2;
      }
      uint64_t v11 = (uint64_t)(v10 + 1);
      uint64_t v13 = *(void *)v3;
      uint64_t v12 = *(void *)(v3 + 8);
      if (v12 == *(void *)v3)
      {
LABEL_14:
        *(void *)uint64_t v3 = v10;
        *(void *)(v3 + 8) = v11;
        uint64_t v14 = *(void *)(v3 + 16);
        *(void *)(v3 + 16) = v7;
        if (!v12)
        {
LABEL_15:
          *(void *)(v3 + 8) = v11;
          return result;
        }
LABEL_19:
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v12, v14 - v12);
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (_OWORD *)(16 * v6);
      uint64_t v11 = 16 * v6 + 16;
      uint64_t v13 = *(void *)result;
      uint64_t v12 = *(void *)(result + 8);
      if (v12 == *(void *)result) {
        goto LABEL_14;
      }
    }
    do
    {
      *--char v10 = *(_OWORD *)(v12 - 16);
      v12 -= 16;
    }
    while (v12 != v13);
    uint64_t v12 = *(void *)v3;
    *(void *)uint64_t v3 = v10;
    *(void *)(v3 + 8) = v11;
    uint64_t v14 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = v7;
    if (!v12) {
      goto LABEL_15;
    }
    goto LABEL_19;
  }
  if (v4) {
    _OWORD *v4 = *a2;
  }
  *(void *)(result + 8) = v4 + 1;
  return result;
}

void *std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::resize(void *result, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(result[1] - *result) >> 2;
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3) {
    return (void *)std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::__append((uint64_t)result, v4);
  }
  if (!v3) {
    result[1] = *result + 4 * a2;
  }
  return result;
}

uint64_t std::vector<GeoCodecsRunningTrackLane,geo::StdAllocator<GeoCodecsRunningTrackLane,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)result;
  unint64_t v5 = *(_OWORD **)(result + 8);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)result) >> 4);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6) {
      return result;
    }
    uint64_t v19 = (_OWORD *)(v4 + 48 * a2);
    while (v5 != v19)
    {
      uint64_t v20 = *((void *)v5 - 5);
      if (v20)
      {
        *((void *)v5 - 4) = v20;
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v5 - 2) + 40))(*((void *)v5 - 2), v20, *((void *)v5 - 3) - v20);
      }
      v5 -= 3;
    }
LABEL_23:
    *(void *)(v3 + 8) = v19;
    return result;
  }
  uint64_t v8 = *(void *)(result + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v5) >> 4) >= v7)
  {
    uint64_t v19 = &v5[3 * v7];
    uint64_t v21 = 48 * a2 - 16 * (((uint64_t)v5 - *(void *)result) >> 4);
    do
    {
      if (v5)
      {
        v5[1] = 0u;
        v5[2] = 0u;
        _OWORD *v5 = 0u;
        uint64_t result = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
        *((void *)v5 + 4) = result;
      }
      v5 += 3;
      v21 -= 48;
    }
    while (v21);
    goto LABEL_23;
  }
  if (a2 > 0x555555555555555) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 4);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= a2) {
    uint64_t v10 = a2;
  }
  if (v9 >= 0x2AAAAAAAAAAAAAALL) {
    uint64_t v11 = 0x555555555555555;
  }
  else {
    uint64_t v11 = v10;
  }
  uint64_t v12 = 48 * v11;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 48 * v11, 8);
  uint64_t v13 = 48 * v6;
  uint64_t v14 = (_OWORD *)(result + 48 * v6);
  uint64_t v15 = result + v12;
  unint64_t v16 = result + 48 * a2;
  unint64_t v17 = 48 * a2 - v13;
  uint64_t v18 = v14;
  do
  {
    if (v18)
    {
      v18[1] = 0u;
      v18[2] = 0u;
      *uint64_t v18 = 0u;
      uint64_t result = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
      *((void *)v18 + 4) = result;
    }
    v18 += 3;
    v17 -= 48;
  }
  while (v17);
  uint64_t v22 = *(void *)v3;
  uint64_t v23 = *(void *)(v3 + 8);
  if (v23 == *(void *)v3)
  {
    *(void *)uint64_t v3 = v14;
    *(void *)(v3 + 8) = v16;
    uint64_t v28 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = v15;
  }
  else
  {
    unint64_t v24 = 0;
    do
    {
      uint64_t v25 = &v14[v24 / 0x10];
      uint64_t v26 = v23 + v24;
      *((unsigned char *)v25 - 48) = *(unsigned char *)(v23 + v24 - 48);
      *((void *)v25 - 4) = 0;
      *((void *)v25 - 3) = 0;
      *((void *)v25 - 5) = 0;
      *((void *)v25 - 2) = *(void *)(v23 + v24 - 16);
      *(_OWORD *)((char *)v25 - 40) = *(_OWORD *)(v23 + v24 - 40);
      *((void *)v25 - 3) = *(void *)(v23 + v24 - 24);
      *(void *)(v26 - 40) = 0;
      *(void *)(v26 - 32) = 0;
      *(void *)(v26 - 24) = 0;
      *((void *)v25 - 1) = *(void *)(v23 + v24 - 8);
      v24 -= 48;
    }
    while (v23 + v24 != v22);
    uint64_t v23 = *(void *)v3;
    uint64_t v27 = *(void *)(v3 + 8);
    *(void *)uint64_t v3 = &v14[v24 / 0x10];
    *(void *)(v3 + 8) = v16;
    uint64_t v28 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = v15;
    while (v27 != v23)
    {
      uint64_t v29 = *(void *)(v27 - 40);
      if (v29)
      {
        *(void *)(v27 - 32) = v29;
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v27 - 16) + 40))(*(void *)(v27 - 16), v29, *(void *)(v27 - 24) - v29);
      }
      v27 -= 48;
    }
  }
  if (v23) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v23, v28 - v23);
  }
  return result;
}

uint64_t std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(void *)(result + 8);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(void *)result) >> 2);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5) {
      *(void *)(result + 8) = v3 + 12 * a2;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(result + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 2) >= v6)
    {
      *(void *)(result + 8) = v4 + 12 * (12 * v6 / 0xC);
    }
    else
    {
      if (a2 > 0x1555555555555555) {
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 2);
      uint64_t v9 = 2 * v8;
      if (2 * v8 <= a2) {
        uint64_t v9 = a2;
      }
      if (v8 >= 0xAAAAAAAAAAAAAAALL) {
        uint64_t v10 = 0x1555555555555555;
      }
      else {
        uint64_t v10 = v9;
      }
      uint64_t v11 = 12 * v10;
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 12 * v10, 4);
      uint64_t v13 = *(void *)v2;
      uint64_t v12 = *(void *)(v2 + 8);
      unint64_t v14 = result + 12 * v5;
      unint64_t v15 = v14 + 12 * (12 * v6 / 0xC);
      if (v12 != *(void *)v2)
      {
        do
        {
          uint64_t v16 = *(void *)(v12 - 12);
          v12 -= 12;
          int v17 = *(_DWORD *)(v12 + 8);
          *(void *)(v14 - 12) = v16;
          v14 -= 12;
          *(_DWORD *)(v14 + 8) = v17;
        }
        while (v12 != v13);
        uint64_t v12 = *(void *)v2;
      }
      *(void *)uint64_t v2 = v14;
      *(void *)(v2 + 8) = v15;
      uint64_t v18 = *(void *)(v2 + 16);
      *(void *)(v2 + 16) = result + v11;
      if (v12) {
        return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 24) + 40))(*(void *)(v2 + 24), v12, v18 - v12);
      }
    }
  }
  return result;
}

uint64_t *std::vector<GeoCodecsRunningTrack,geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        GeoCodecsRunningTrack::~GeoCodecsRunningTrack((GeoCodecsRunningTrack *)(v3 - 128));
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

void geo::small_vector_base<GeoCodecsMetadata>::emplace_back<GeoCodecsMetadata&>(uint64_t a1, uint64_t *a2)
{
  unint64_t v5 = *(_DWORD **)a1;
  uint64_t v4 = *(char **)(a1 + 8);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v4[-*(void *)a1] >> 2);
  unint64_t v7 = *(void *)(a1 + 24);
  if (v7 < v6 + 1)
  {
    unint64_t v8 = *(_DWORD **)(a1 + 16);
    unint64_t v9 = (1 << -(char)__clz(v7 + 1));
    if (v7 >= 0xFFFFFFFFFFFFFFFELL) {
      unint64_t v9 = 1;
    }
    if (v9 <= v6 + 1) {
      unint64_t v10 = v6 + 1;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t v11 = (char *)malloc_type_malloc(12 * v10, 0x1000040149951FBuLL);
    uint64_t v12 = v11;
    uint64_t v13 = *(_DWORD **)a1;
    unint64_t v14 = *(_DWORD **)(a1 + 8);
    if (*(_DWORD **)a1 != v14)
    {
      unint64_t v15 = v11;
      do
      {
        uint64_t v16 = *(void *)v13;
        *((_DWORD *)v15 + 2) = v13[2];
        *(void *)unint64_t v15 = v16;
        v15 += 12;
        v13 += 3;
      }
      while (v13 != v14);
    }
    if (v5 != v8) {
      free(*(void **)a1);
    }
    uint64_t v4 = &v12[12 * v6];
    *(void *)a1 = v12;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 24) = v10;
  }
  uint64_t v17 = *a2;
  *((_DWORD *)v4 + 2) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t v4 = v17;
  *(void *)(a1 + 8) += 12;
}

uint64_t *std::vector<GeoCodecsMultiPolygonFeature,geo::StdAllocator<GeoCodecsMultiPolygonFeature,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        GeoCodecsMultiPolygonFeature::~GeoCodecsMultiPolygonFeature((GeoCodecsMultiPolygonFeature *)(v3 - 128));
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

uint64_t std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::push_back[abi:ne180100](uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4) {
      void *v4 = *a2;
    }
    *(void *)(result + 8) = v4 + 1;
    return result;
  }
  uint64_t v6 = ((uint64_t)v4 - *(void *)result) >> 3;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 61) {
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v5 - *(void *)result;
  if (v8 >> 2 > v7) {
    unint64_t v7 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t v9 = 8 * v7;
    uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 8 * v7, 8);
    unint64_t v10 = (void *)(result + 8 * v6);
    unint64_t v7 = result + v9;
    if (result) {
      void *v10 = *a2;
    }
    uint64_t v11 = (uint64_t)(v10 + 1);
    uint64_t v12 = *(void *)v3;
    uint64_t v13 = *(void *)(v3 + 8);
    uint64_t v14 = v13 - *(void *)v3;
    if (v13 != *(void *)v3) {
      goto LABEL_14;
    }
LABEL_21:
    uint64_t v19 = v10;
    goto LABEL_24;
  }
  unint64_t v10 = (void *)(8 * v6);
  uint64_t v11 = 8 * v6 + 8;
  uint64_t v12 = *(void *)result;
  uint64_t v13 = *(void *)(result + 8);
  uint64_t v14 = v13 - *(void *)result;
  if (v13 == *(void *)result) {
    goto LABEL_21;
  }
LABEL_14:
  unint64_t v15 = v14 - 8;
  if (v15 < 0x38 || (unint64_t)(v13 - (void)v10) < 0x20)
  {
    uint64_t v18 = v13;
    uint64_t v19 = v10;
  }
  else
  {
    uint64_t v16 = (v15 >> 3) + 1;
    uint64_t v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v18 = v13 - v17;
    uint64_t v19 = &v10[v17 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v20 = v10 - 2;
    uint64_t v21 = (long long *)(v13 - 16);
    uint64_t v22 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *v21;
      *(v20 - 1) = *(v21 - 1);
      *uint64_t v20 = v23;
      v20 -= 2;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_24;
    }
  }
  do
  {
    uint64_t v24 = *(void *)(v18 - 8);
    v18 -= 8;
    *--uint64_t v19 = v24;
  }
  while (v18 != v12);
LABEL_24:
  *(void *)uint64_t v3 = v19;
  *(void *)(v3 + 8) = v11;
  uint64_t v25 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = v7;
  if (v12) {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 24) + 40))(*(void *)(v3 + 24), v12, v25 - v12);
  }
  *(void *)(v3 + 8) = v11;
  return result;
}

uint64_t geo::codec::_findOverpasses(std::shared_ptr<geo::codec::VectorTile> const&)::$_0::__invoke(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 20);
  float v3 = *(float *)(a2 + 20);
  if (v2 < v3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v2 > v3;
  }
}

void std::__shared_ptr_emplace<geo::codec::VectorTile,geo::StdAllocator<geo::codec::VectorTile,geo::codec::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ED5187F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::codec::VectorTile,geo::StdAllocator<geo::codec::VectorTile,geo::codec::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1ED5187F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x18C11F580);
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(uint64_t result, unint64_t *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v7 = result;
    if (a3 == 2)
    {
      uint64_t v9 = (long long *)(a2 - 3);
      if (*(a2 - 3) >= *(void *)result)
      {
        long long v22 = *(_OWORD *)result;
        *(void *)(a4 + 16) = *(void *)(result + 16);
        *(_OWORD *)a4 = v22;
        long long v11 = *v9;
        uint64_t v12 = *(a2 - 1);
      }
      else
      {
        long long v10 = *v9;
        *(void *)(a4 + 16) = *(a2 - 1);
        *(_OWORD *)a4 = v10;
        long long v11 = *(_OWORD *)result;
        uint64_t v12 = *(void *)(result + 16);
      }
      *(void *)(a4 + 40) = v12;
      *(_OWORD *)(a4 + 24) = v11;
    }
    else if (a3 == 1)
    {
      long long v8 = *(_OWORD *)result;
      *(void *)(a4 + 16) = *(void *)(result + 16);
      *(_OWORD *)a4 = v8;
    }
    else if ((uint64_t)a3 > 8)
    {
      unint64_t v23 = a3 >> 1;
      uint64_t v24 = 24 * (a3 >> 1);
      uint64_t v25 = result + v24;
      std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(result, result + v24, a3 >> 1, a4, a3 >> 1);
      uint64_t result = std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(v7 + v24, a2, a3 - v23, v4 + v24, a3 - v23);
      uint64_t v26 = (unint64_t *)(v7 + v24);
      while (v26 != a2)
      {
        if (*v26 >= *(void *)v7)
        {
          long long v27 = *(_OWORD *)v7;
          *(void *)(v4 + 16) = *(void *)(v7 + 16);
          *(_OWORD *)uint64_t v4 = v27;
          v4 += 24;
          v7 += 24;
          if (v7 == v25) {
            goto LABEL_26;
          }
        }
        else
        {
          long long v28 = *(_OWORD *)v26;
          *(void *)(v4 + 16) = v26[2];
          *(_OWORD *)uint64_t v4 = v28;
          v4 += 24;
          v26 += 3;
          if (v7 == v25)
          {
LABEL_26:
            if (v26 != a2)
            {
              uint64_t v29 = 0;
              do
              {
                uint64_t v30 = v4 + v29 * 8;
                long long v31 = *(_OWORD *)&v26[v29];
                *(void *)(v30 + 16) = v26[v29 + 2];
                *(_OWORD *)uint64_t v30 = v31;
                v29 += 3;
              }
              while (&v26[v29] != a2);
            }
            return result;
          }
        }
      }
      if (v7 != v25)
      {
        uint64_t v32 = 0;
        do
        {
          uint64_t v33 = v4 + v32;
          long long v34 = *(_OWORD *)(v7 + v32);
          *(void *)(v33 + 16) = *(void *)(v7 + v32 + 16);
          *(_OWORD *)uint64_t v33 = v34;
          v32 += 24;
        }
        while (v7 + v32 != v25);
      }
    }
    else if ((unint64_t *)result != a2)
    {
      long long v13 = *(_OWORD *)result;
      *(void *)(a4 + 16) = *(void *)(result + 16);
      *(_OWORD *)a4 = v13;
      uint64_t v14 = (unint64_t *)(result + 24);
      if ((unint64_t *)(result + 24) != a2)
      {
        uint64_t v15 = 0;
        uint64_t v16 = (void *)a4;
        do
        {
          uint64_t v18 = v16;
          unint64_t v19 = *v16;
          v16 += 3;
          uint64_t v20 = v16;
          if (*v14 < v19)
          {
            *(_OWORD *)uint64_t v16 = *(_OWORD *)v18;
            v16[2] = v18[2];
            uint64_t v20 = (void *)a4;
            if (v18 != (void *)a4)
            {
              uint64_t v21 = v15;
              while (1)
              {
                uint64_t v20 = (void *)(a4 + v21);
                if (*v14 >= *(void *)(a4 + v21 - 24)) {
                  break;
                }
                *(_OWORD *)uint64_t v20 = *(_OWORD *)(a4 + v21 - 24);
                v20[2] = *(void *)(a4 + v21 - 8);
                v21 -= 24;
                if (!v21)
                {
                  uint64_t v20 = (void *)a4;
                  break;
                }
              }
            }
          }
          long long v17 = *(_OWORD *)v14;
          v20[2] = v14[2];
          *(_OWORD *)uint64_t v20 = v17;
          v14 += 3;
          v15 += 24;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (!a5) {
    return result;
  }
  uint64_t v7 = a5;
  while (a4 > a7 && v7 > a7)
  {
    if (!a4) {
      return result;
    }
    uint64_t v10 = 0;
    uint64_t v11 = -a4;
    while (*(void *)a2 >= *(void *)&result[v10])
    {
      v10 += 24;
      BOOL v76 = __CFADD__(v11++, 1);
      if (v76) {
        return result;
      }
    }
    uint64_t v12 = -v11;
    long long v13 = &result[v10];
    if (-v11 >= v7)
    {
      if (v11 == -1)
      {
        int v86 = &result[v10];
        uint64_t v107 = *((void *)v86 + 2);
        long long v102 = *(_OWORD *)v86;
        long long v87 = *(_OWORD *)a2;
        *((void *)v86 + 2) = *((void *)a2 + 2);
        *(_OWORD *)int v86 = v87;
        *((void *)a2 + 2) = v107;
        *(_OWORD *)a2 = v102;
        return result;
      }
      if (v11 > 0) {
        uint64_t v12 = 1 - v11;
      }
      uint64_t v24 = v12 >> 1;
      unint64_t v19 = &result[24 * (v12 >> 1) + v10];
      if (a3 == a2)
      {
        uint64_t v16 = a3;
        uint64_t v30 = a3;
      }
      else
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
        uint64_t v16 = a2;
        do
        {
          unint64_t v26 = v25 >> 1;
          long long v27 = &v16[24 * (v25 >> 1)];
          unint64_t v29 = *(void *)v27;
          long long v28 = v27 + 24;
          v25 += ~(v25 >> 1);
          if (v29 < *(void *)v19) {
            uint64_t v16 = v28;
          }
          else {
            unint64_t v25 = v26;
          }
        }
        while (v25);
        uint64_t v30 = a2;
      }
      uint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v30) >> 3);
      long long v31 = v16;
      if (v19 != a2)
      {
LABEL_37:
        long long v31 = v19;
        if (a2 != v16)
        {
          if (v19 + 24 == a2)
          {
            uint64_t v104 = *((void *)v19 + 2);
            long long v99 = *(_OWORD *)v19;
            int64_t v37 = v16 - a2;
            unint64_t v91 = a6;
            unint64_t v93 = v13;
            unint64_t v38 = a3;
            uint64_t v39 = v15;
            uint64_t v95 = v24;
            uint64_t v40 = a7;
            memmove(v19, a2, v16 - a2);
            a7 = v40;
            long long v13 = v93;
            uint64_t v24 = v95;
            uint64_t v15 = v39;
            a3 = v38;
            a6 = v91;
            long long v31 = &v19[v37];
            *(_OWORD *)long long v31 = v99;
            *((void *)v31 + 2) = v104;
          }
          else if (a2 + 24 == v16)
          {
            long long v31 = v19 + 24;
            uint64_t v105 = *((void *)v16 - 1);
            long long v100 = *(_OWORD *)(v16 - 24);
            if (v16 - 24 != v19)
            {
              uint64_t v92 = a6;
              unint64_t v94 = v13;
              unint64_t v41 = a3;
              uint64_t v42 = v15;
              uint64_t v96 = v24;
              uint64_t v43 = a7;
              memmove(v19 + 24, v19, v16 - 24 - v19);
              a7 = v43;
              long long v13 = v94;
              uint64_t v24 = v96;
              uint64_t v15 = v42;
              a3 = v41;
              a6 = v92;
            }
            *((void *)v19 + 2) = v105;
            *(_OWORD *)unint64_t v19 = v100;
          }
          else
          {
            unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v19) >> 3);
            if (v32 == 0xAAAAAAAAAAAAAAABLL * ((v16 - a2) >> 3))
            {
              uint64_t v33 = 0;
              do
              {
                long long v34 = &a2[v33];
                int v35 = &v19[v33];
                uint64_t v103 = *(void *)&v19[v33 + 16];
                long long v98 = *(_OWORD *)&v19[v33];
                long long v36 = *(_OWORD *)&a2[v33];
                *((void *)v35 + 2) = *(void *)&a2[v33 + 16];
                *(_OWORD *)int v35 = v36;
                *((void *)v34 + 2) = v103;
                *(_OWORD *)long long v34 = v98;
                if (&v19[v33 + 24] == a2) {
                  break;
                }
                v33 += 24;
              }
              while (v34 + 24 != v16);
              long long v31 = a2;
            }
            else
            {
              uint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v16 - a2) >> 3);
              unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v19) >> 3);
              do
              {
                uint64_t v46 = v45;
                unint64_t v45 = v44;
                uint64_t v44 = v46 % v44;
              }
              while (v44);
              if (v45)
              {
                int v47 = &v19[24 * v45];
                do
                {
                  long long v48 = *(_OWORD *)(v47 - 24);
                  uint64_t v49 = *((void *)v47 - 1);
                  v47 -= 24;
                  uint64_t v106 = v49;
                  long long v101 = v48;
                  unint64_t v50 = &v47[8 * ((a2 - v19) >> 3)];
                  int v51 = v47;
                  do
                  {
                    unint64_t v52 = v51;
                    int v51 = v50;
                    long long v53 = *(_OWORD *)v50;
                    *((void *)v52 + 2) = *((void *)v50 + 2);
                    *(_OWORD *)unint64_t v52 = v53;
                    unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v50) >> 3);
                    BOOL v55 = __OFSUB__(v32, v54);
                    uint64_t v57 = v32 - v54;
                    char v56 = (v57 < 0) ^ v55;
                    unint64_t v50 = &v19[24 * v57];
                    if (v56) {
                      unint64_t v50 = &v51[8 * ((a2 - v19) >> 3)];
                    }
                  }
                  while (v50 != v47);
                  *((void *)v51 + 2) = v106;
                  *(_OWORD *)int v51 = v101;
                }
                while (v47 != v19);
              }
              long long v31 = &v19[8 * ((v16 - a2) >> 3)];
            }
          }
        }
      }
    }
    else
    {
      if (v7 >= 0) {
        uint64_t v14 = v7;
      }
      else {
        uint64_t v14 = v7 + 1;
      }
      uint64_t v15 = v14 >> 1;
      uint64_t v16 = &a2[24 * (v14 >> 1)];
      if (v13 == a2)
      {
        unint64_t v19 = a2;
        long long v17 = a2;
      }
      else
      {
        long long v17 = &result[v10];
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((a2 - result - v10) >> 3);
        unint64_t v19 = v13;
        do
        {
          unint64_t v20 = v18 >> 1;
          uint64_t v21 = &v19[24 * (v18 >> 1)];
          unint64_t v23 = *(void *)v21;
          long long v22 = v21 + 24;
          v18 += ~(v18 >> 1);
          if (v23 > *(void *)v16) {
            unint64_t v18 = v20;
          }
          else {
            unint64_t v19 = v22;
          }
        }
        while (v18);
      }
      uint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v17) >> 3);
      long long v31 = v16;
      if (v19 != a2) {
        goto LABEL_37;
      }
    }
    a4 = -(v24 + v11);
    uint64_t v58 = v7 - v15;
    if (v24 + v15 >= v7 - (v24 + v15) - v11)
    {
      uint64_t v97 = v24;
      uint64_t v62 = -(v24 + v11);
      uint64_t v63 = v15;
      uint64_t v64 = v7 - v15;
      uint64_t v65 = a6;
      uint64_t v66 = a7;
      uint64_t v67 = v13;
      std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(v31, v16, a3, v62, v64);
      uint64_t result = v67;
      uint64_t v68 = v63;
      a4 = v97;
      a3 = v31;
      uint64_t v7 = v68;
      a2 = v19;
      a6 = v65;
      a7 = v66;
      if (!v68) {
        return result;
      }
    }
    else
    {
      unint64_t v59 = a6;
      uint64_t v60 = a7;
      unint64_t v61 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(v13, v19, v31, v24, v15);
      a3 = v61;
      uint64_t result = v31;
      uint64_t v7 = v58;
      a2 = v16;
      a6 = v59;
      a7 = v60;
      if (!v58) {
        return result;
      }
    }
  }
  if (a4 <= v7)
  {
    if (result != a2)
    {
      unint64_t v79 = 0;
      do
      {
        unint64_t v80 = &a6[v79];
        long long v81 = *(_OWORD *)&result[v79];
        *((void *)v80 + 2) = *(void *)&result[v79 + 16];
        *(_OWORD *)unint64_t v80 = v81;
        v79 += 24;
      }
      while (&result[v79] != a2);
      if (v79)
      {
        int v82 = &a6[v79];
        unint64_t v83 = a6;
        while (a2 != a3)
        {
          if (*(void *)a2 >= *(void *)v83)
          {
            long long v84 = *(_OWORD *)v83;
            *((void *)result + 2) = *((void *)v83 + 2);
            *(_OWORD *)uint64_t result = v84;
            result += 24;
            v83 += 24;
            if (v82 == v83) {
              return result;
            }
          }
          else
          {
            long long v85 = *(_OWORD *)a2;
            *((void *)result + 2) = *((void *)a2 + 2);
            *(_OWORD *)uint64_t result = v85;
            result += 24;
            a2 += 24;
            if (v82 == v83) {
              return result;
            }
          }
        }
        return (char *)memmove(result, v83, a6 - v83 + v79);
      }
    }
  }
  else if (a2 != a3)
  {
    unint64_t v69 = 0;
    do
    {
      unint64_t v70 = &a6[v69];
      long long v71 = *(_OWORD *)&a2[v69];
      *((void *)v70 + 2) = *(void *)&a2[v69 + 16];
      *(_OWORD *)unint64_t v70 = v71;
      v69 += 24;
    }
    while (&a2[v69] != a3);
    if (v69)
    {
      unint64_t v72 = &a6[v69];
      unint64_t v73 = a3 - 24;
      while (a2 != result)
      {
        unint64_t v74 = *((void *)a2 - 3);
        unint64_t v75 = *((void *)v72 - 3);
        BOOL v76 = v75 >= v74;
        if (v75 >= v74) {
          int v77 = v72 - 24;
        }
        else {
          int v77 = a2 - 24;
        }
        if (!v76) {
          a2 -= 24;
        }
        long long v78 = *(_OWORD *)v77;
        if (v76) {
          v72 -= 24;
        }
        *((void *)v73 + 2) = *((void *)v77 + 2);
        *(_OWORD *)unint64_t v73 = v78;
        v73 -= 24;
        if (v72 == a6) {
          return result;
        }
      }
      unint64_t v88 = 0;
      do
      {
        unsigned int v89 = &v73[v88];
        long long v90 = *(_OWORD *)&v72[v88 - 24];
        *((void *)v89 + 2) = *(void *)&v72[v88 - 8];
        *(_OWORD *)unsigned int v89 = v90;
        v88 -= 24;
      }
      while (&v72[v88] != a6);
    }
  }
  return result;
}

uint64_t std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::__insert_with_size[abi:ne180100]<char const*,char const*>(uint64_t result, char *__dst, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return result;
  }
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(result + 8);
  uint64_t v10 = *(void *)(result + 16);
  if ((uint64_t)(v10 - v9) < a5)
  {
    uint64_t v11 = *(void *)result;
    uint64_t v12 = v9 - *(void *)result + a5;
    if (v12 < 0) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    long long v13 = &__dst[-v11];
    unint64_t v14 = v10 - v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v15 = v12;
    }
    if (v15) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), v15, 1);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v21 = &v13[result];
    long long v22 = &v13[result + a5];
    uint64_t v23 = a5;
    uint64_t v24 = &v13[result];
    do
    {
      if (v24) {
        char *v24 = *v6;
      }
      ++v24;
      ++v6;
      --v23;
    }
    while (v23);
    unint64_t v25 = *(char **)v8;
    if (*(char **)v8 == v7) {
      goto LABEL_31;
    }
    unint64_t v26 = v7 - v25;
    if ((unint64_t)(v7 - v25) >= 0x20)
    {
      long long v27 = v7;
      if ((unint64_t)(v11 - result) >= 0x20)
      {
        long long v27 = &v7[-(v26 & 0xFFFFFFFFFFFFFFE0)];
        v21 -= v26 & 0xFFFFFFFFFFFFFFE0;
        long long v28 = (long long *)(v7 - 16);
        unint64_t v29 = &v7[result - 16 - v11];
        unint64_t v30 = v26 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v31 = *v28;
          *((_OWORD *)v29 - 1) = *(v28 - 1);
          *(_OWORD *)unint64_t v29 = v31;
          v29 -= 32;
          v28 -= 2;
          v30 -= 32;
        }
        while (v30);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_31;
        }
      }
    }
    else
    {
      long long v27 = v7;
    }
    do
    {
      char v32 = *--v27;
      *--uint64_t v21 = v32;
    }
    while (v27 != v25);
LABEL_31:
    uint64_t v33 = *(char **)(v8 + 8);
    unint64_t v34 = v33 - v7;
    if (v33 != v7)
    {
      if (v34 < 0x20) {
        goto LABEL_57;
      }
      if ((unint64_t)(a5 + result - v11) < 0x20) {
        goto LABEL_57;
      }
      v22 += v34 & 0xFFFFFFFFFFFFFFE0;
      int v35 = &v7[a5 - v11 + 16 + result];
      long long v36 = (long long *)(v7 + 16);
      unint64_t v37 = v34 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v38 = *v36;
        *((_OWORD *)v35 - 1) = *(v36 - 1);
        *(_OWORD *)int v35 = v38;
        v35 += 32;
        v36 += 2;
        v37 -= 32;
      }
      while (v37);
      v7 += v34 & 0xFFFFFFFFFFFFFFE0;
      if (v34 != (v34 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_57:
        do
        {
          char v39 = *v7++;
          *v22++ = v39;
        }
        while (v7 != v33);
      }
    }
    uint64_t v40 = *(char **)v8;
    *(void *)uint64_t v8 = v21;
    *(void *)(v8 + 8) = v22;
    uint64_t v41 = *(void *)(v8 + 16);
    *(void *)(v8 + 16) = result + v15;
    if (v40) {
      return (*(uint64_t (**)(void, char *, uint64_t))(**(void **)(v8 + 24) + 40))(*(void *)(v8 + 24), v40, v41 - (void)v40);
    }
    return result;
  }
  uint64_t v16 = v9 - (void)__dst;
  if ((uint64_t)(v9 - (void)__dst) >= a5)
  {
    long long v17 = &__src[a5];
    unint64_t v19 = *(unsigned char **)(result + 8);
LABEL_42:
    uint64_t v42 = &__dst[a5];
    uint64_t v43 = &v19[-a5];
    uint64_t v44 = v19;
    if ((unint64_t)&v19[-a5] < v9)
    {
      uint64_t v44 = v19;
      do
      {
        if (v44) {
          unsigned char *v44 = *v43;
        }
        ++v43;
        ++v44;
      }
      while ((unint64_t)v43 < v9);
    }
    *(void *)(result + 8) = v44;
    if (v19 != v42) {
      uint64_t result = (uint64_t)memmove(&__dst[a5], __dst, v19 - v42);
    }
    if (v17 != v6)
    {
      return (uint64_t)memmove(v7, v6, v17 - v6);
    }
    return result;
  }
  long long v17 = &__src[v16];
  if (&__src[v16] == a4)
  {
    unint64_t v19 = *(unsigned char **)(result + 8);
  }
  else
  {
    int64_t v18 = __src - __dst;
    unint64_t v19 = *(unsigned char **)(result + 8);
    unint64_t v20 = v19;
    do
    {
      if (v20) {
        *unint64_t v20 = v19[v18];
      }
      ++v20;
      ++v19;
    }
    while (&v19[v18] != a4);
  }
  *(void *)(result + 8) = v19;
  if (v16 >= 1) {
    goto LABEL_42;
  }
  return result;
}

void std::__function::__func<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::~__func()
{
}

void *std::__function::__func<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ED517EF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED517EF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec9_readPoisEP8VMP4TileRK28GeoCodecsVMP4DecodingOptionsRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3geo5codec9_readPoisEP8VMP4TileRK28GeoCodecsVMP4DecodingOptionsRKNSt3__110shared_ptrIN"
                                "S0_10VectorTileEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec9_readPoisEP8VMP4TileRK28GeoCodecsVMP4DecodingOptionsRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec9_readPoisEP8VMP4TileRK28GeoCodecsVMP4DecodingOptionsRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::target_type()
{
}

void std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::~__func()
{
}

void *std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ED517D38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED517D38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec25_readLinesExtendedChapterEP8VMP4TileRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3geo5codec25_readLinesExtendedChapterEP8VMP4TileRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec25_readLinesExtendedChapterEP8VMP4TileRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec25_readLinesExtendedChapterEP8VMP4TileRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::target_type()
{
}

void std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::~__func()
{
}

void *std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ED517D90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED517D90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec25_readLinesExtendedChapterEP8VMP4TileRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3geo5codec25_readLinesExtendedChapterEP8VMP4TileRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec25_readLinesExtendedChapterEP8VMP4TileRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec25_readLinesExtendedChapterEP8VMP4TileRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::target_type()
{
}

geo::codec::Allocator *std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::vector(geo::codec::Allocator *a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  uint64_t v4 = geo::codec::Allocator::instance(a1);
  *((void *)a1 + 3) = v4;
  if (a2)
  {
    uint64_t v5 = a2;
    uint64_t v6 = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5 * 2, 2);
    *(void *)a1 = v6;
    *((void *)a1 + 1) = v6;
    uint64_t v7 = &v6[v5];
    *((void *)a1 + 2) = &v6[v5];
    do
    {
      if (v6) {
        *uint64_t v6 = 0;
      }
      ++v6;
      --v5;
    }
    while (v5 * 2);
    *((void *)a1 + 1) = v7;
  }
  return a1;
}

void sub_18A46681C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t **std::__exception_guard_exceptions<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](uint64_t **a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = **a1;
    if (v3)
    {
      v2[1] = v3;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[3] + 40))(v2[3], v3, v2[2] - v3);
    }
  }
  return a1;
}

uint64_t **std::__exception_guard_exceptions<std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](uint64_t **a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = **a1;
    if (v3)
    {
      v2[1] = v3;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[3] + 40))(v2[3], v3, v2[2] - v3);
    }
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<GhostPointKey,unsigned int>,std::__unordered_map_hasher<GhostPointKey,std::__hash_value_type<GhostPointKey,unsigned int>,GhostPointHash,GhostPointKeyEqual,true>,std::__unordered_map_equal<GhostPointKey,std::__hash_value_type<GhostPointKey,unsigned int>,GhostPointKeyEqual,GhostPointHash,true>,std::allocator<std::__hash_value_type<GhostPointKey,unsigned int>>>::__emplace_unique_key_args<GhostPointKey,std::piecewise_construct_t const&,std::tuple<GhostPointKey const&>,std::tuple<>>(float *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v8 = ((v6 << 6) + (v6 >> 2) + v7 - 0x61C8864680B583EBLL) ^ v6;
  unint64_t v9 = (a2[2] + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  unint64_t v10 = *((void *)a1 + 1);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      uint64_t v3 = (a2[2] + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
      if (v9 >= v10) {
        uint64_t v3 = v9 % v10;
      }
    }
    else
    {
      uint64_t v3 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      long long v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == __PAIR64__(v7, v6) && *((_DWORD *)v13 + 6) == v7) {
                return v13;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_25;
            }
            long long v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == __PAIR64__(v7, v6) && *((_DWORD *)v13 + 6) == v7) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          long long v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_25:
  long long v13 = operator new(0x20uLL);
  *long long v13 = 0;
  v13[1] = v9;
  v13[2] = *(void *)a3;
  *((_DWORD *)v13 + 6) = *(_DWORD *)(a3 + 8);
  *((_DWORD *)v13 + 7) = 0;
  float v16 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v17 = a1[8];
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *((void *)a1 + 1);
    }
    if (prime > v10)
    {
LABEL_39:
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v24 = operator new(8 * prime);
      unint64_t v25 = *(void **)a1;
      *(void *)a1 = v24;
      if (v25) {
        operator delete(v25);
      }
      uint64_t v26 = 0;
      *((void *)a1 + 1) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v26++) = 0;
      while (prime != v26);
      long long v28 = (uint64_t *)(a1 + 4);
      long long v27 = (void *)*((void *)a1 + 2);
      if (!v27) {
        goto LABEL_71;
      }
      size_t v29 = v27[1];
      size_t v30 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v31 = v29 & v30;
        *(void *)(*(void *)a1 + 8 * v31) = v28;
        for (uint64_t i = (void *)*v27; *v27; uint64_t i = (void *)*v27)
        {
          size_t v33 = i[1] & v30;
          if (v33 == v31)
          {
            long long v27 = i;
          }
          else if (*(void *)(*(void *)a1 + 8 * v33))
          {
            *long long v27 = *i;
            uint64_t v34 = 8 * v33;
            *uint64_t i = **(void **)(*(void *)a1 + v34);
            **(void **)(*(void *)a1 + v34) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v33) = v27;
            long long v27 = i;
            size_t v31 = v33;
          }
        }
        goto LABEL_71;
      }
      if (v29 >= prime) {
        v29 %= prime;
      }
      *(void *)(*(void *)a1 + 8 * v29) = v28;
      long long v38 = (void *)*v27;
      if (!*v27)
      {
LABEL_71:
        unint64_t v10 = prime;
        uint64_t v41 = prime - 1;
        if ((prime & (prime - 1)) != 0) {
          goto LABEL_72;
        }
        goto LABEL_87;
      }
      while (1)
      {
        size_t v40 = v38[1];
        if (v40 >= prime) {
          v40 %= prime;
        }
        if (v40 == v29) {
          goto LABEL_65;
        }
        if (*(void *)(*(void *)a1 + 8 * v40))
        {
          *long long v27 = *v38;
          uint64_t v39 = 8 * v40;
          *long long v38 = **(void **)(*(void *)a1 + v39);
          **(void **)(*(void *)a1 + v39) = v38;
          long long v38 = v27;
LABEL_65:
          long long v27 = v38;
          long long v38 = (void *)*v38;
          if (!v38) {
            goto LABEL_71;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v40) = v27;
          long long v27 = v38;
          long long v38 = (void *)*v38;
          size_t v29 = v40;
          if (!v38) {
            goto LABEL_71;
          }
        }
      }
    }
    if (prime < v10)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < v10)
      {
        if (!prime)
        {
          uint64_t v42 = *(void **)a1;
          *(void *)a1 = 0;
          if (v42) {
            operator delete(v42);
          }
          unint64_t v10 = 0;
          *((void *)a1 + 1) = 0;
          uint64_t v41 = -1;
          goto LABEL_87;
        }
        goto LABEL_39;
      }
      unint64_t v10 = *((void *)a1 + 1);
    }
    uint64_t v41 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_72:
      if (v9 >= v10)
      {
        uint64_t v3 = v9 % v10;
        int64_t v18 = *(void **)a1;
        unint64_t v19 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v19) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v3 = v9;
        int64_t v18 = *(void **)a1;
        unint64_t v19 = *(void **)(*(void *)a1 + 8 * v9);
        if (v19) {
          goto LABEL_28;
        }
      }
      goto LABEL_88;
    }
LABEL_87:
    uint64_t v3 = v41 & v9;
    int64_t v18 = *(void **)a1;
    unint64_t v19 = *(void **)(*(void *)a1 + 8 * (v41 & v9));
    if (v19) {
      goto LABEL_28;
    }
    goto LABEL_88;
  }
  int64_t v18 = *(void **)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
LABEL_28:
    *long long v13 = *v19;
LABEL_94:
    *unint64_t v19 = v13;
    goto LABEL_95;
  }
LABEL_88:
  *long long v13 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v13;
  v18[v3] = a1 + 4;
  if (*v13)
  {
    unint64_t v43 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v43 >= v10) {
        v43 %= v10;
      }
    }
    else
    {
      v43 &= v10 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v43);
    goto LABEL_94;
  }
LABEL_95:
  ++*((void *)a1 + 3);
  return v13;
}

void sub_18A466E18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<GeoCodecsBuildingFootprintFeature,geo::StdAllocator<GeoCodecsBuildingFootprintFeature,geo::codec::Allocator>>::__append(unint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v11 = v4 + 136 * a2;
      uint64_t v12 = 136 * a2;
      do
      {
        if (v4)
        {
          *(void *)(v4 + 128) = 0;
          *(_OWORD *)(v4 + 96) = 0uLL;
          *(_OWORD *)(v4 + 112) = 0uLL;
          *(_OWORD *)(v4 + 64) = 0uLL;
          *(_OWORD *)(v4 + 80) = 0uLL;
          *(_OWORD *)(v4 + 32) = 0uLL;
          *(_OWORD *)(v4 + 48) = 0uLL;
          *(_OWORD *)uint64_t v4 = 0uLL;
          *(_OWORD *)(v4 + 16) = 0uLL;
        }
        v4 += 136;
        v12 -= 136;
      }
      while (v12);
      uint64_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    unint64_t v6 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v4 - *a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x1E1E1E1E1E1E1E1) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0xF0F0F0F0F0F0F0) {
      uint64_t v9 = 0x1E1E1E1E1E1E1E1;
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9) {
      uint64_t v10 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 136 * v9, 8);
    }
    else {
      uint64_t v10 = 0;
    }
    unint64_t v13 = v10 + 136 * v6;
    uint64_t v14 = 136 * a2;
    unint64_t v15 = v13 + 136 * a2;
    __n128 v16 = 0uLL;
    unint64_t v17 = v13;
    do
    {
      if (v17)
      {
        *(void *)(v17 + 128) = 0;
        *(_OWORD *)(v17 + 96) = 0uLL;
        *(_OWORD *)(v17 + 112) = 0uLL;
        *(_OWORD *)(v17 + 64) = 0uLL;
        *(_OWORD *)(v17 + 80) = 0uLL;
        *(_OWORD *)(v17 + 32) = 0uLL;
        *(_OWORD *)(v17 + 48) = 0uLL;
        *(_OWORD *)unint64_t v17 = 0uLL;
        *(_OWORD *)(v17 + 16) = 0uLL;
      }
      v17 += 136;
      v14 -= 136;
    }
    while (v14);
    uint64_t v18 = v10 + 136 * v9;
    unint64_t v19 = *a1;
    unint64_t v20 = a1[1];
    if (v20 == *a1)
    {
      *a1 = v13;
      a1[1] = v15;
      unint64_t v28 = a1[2];
      a1[2] = v18;
    }
    else
    {
      uint64_t v21 = 0;
      do
      {
        uint64_t v22 = v13 + v21;
        uint64_t v23 = v20 + v21;
        *(_OWORD *)(v22 - 136) = *(_OWORD *)(v20 + v21 - 136);
        *(void *)(v23 - 136) = 0;
        *(void *)(v23 - 128) = 0;
        *(_OWORD *)(v22 - 120) = *(_OWORD *)(v20 + v21 - 120);
        *(void *)(v22 - 104) = *(void *)(v20 + v21 - 104);
        *(void *)(v23 - 112) = 0;
        *(void *)(v23 - 104) = 0;
        long long v24 = *(_OWORD *)(v20 + v21 - 96);
        long long v25 = *(_OWORD *)(v20 + v21 - 80);
        *(_DWORD *)(v22 - 64) = *(_DWORD *)(v20 + v21 - 64);
        *(_OWORD *)(v22 - 96) = v24;
        *(_OWORD *)(v22 - 80) = v25;
        long long v26 = *(_OWORD *)(v20 + v21 - 56);
        *(void *)(v22 - 40) = *(void *)(v20 + v21 - 40);
        *(_OWORD *)(v22 - 56) = v26;
        __n128 v16 = *(__n128 *)(v20 + v21 - 32);
        *(_OWORD *)(v22 - 22) = *(_OWORD *)(v20 + v21 - 22);
        *(__n128 *)(v22 - 32) = v16;
        v21 -= 136;
      }
      while (v20 + v21 != v19);
      unint64_t v20 = *a1;
      unint64_t v27 = a1[1];
      *a1 = v13 + v21;
      a1[1] = v15;
      unint64_t v28 = a1[2];
      a1[2] = v18;
      if (v27 != v20)
      {
        while (1)
        {
          size_t v29 = *(std::__shared_weak_count **)(v27 - 104);
          if (v29)
          {
            if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
              break;
            }
          }
          size_t v30 = *(std::__shared_weak_count **)(v27 - 128);
          if (v30) {
            goto LABEL_31;
          }
LABEL_27:
          v27 -= 136;
          if (v27 == v20) {
            goto LABEL_35;
          }
        }
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
        size_t v30 = *(std::__shared_weak_count **)(v27 - 128);
        if (!v30) {
          goto LABEL_27;
        }
LABEL_31:
        std::__shared_weak_count::__release_weak(v30);
        goto LABEL_27;
      }
    }
LABEL_35:
    if (v20) {
      (*(void (**)(unint64_t, unint64_t, unint64_t, __n128))(*(void *)a1[3] + 40))(a1[3], v20, v28 - v20, v16);
    }
  }
}

void std::vector<GeoCodecsMultiSectionFeature,geo::StdAllocator<GeoCodecsMultiSectionFeature,geo::codec::Allocator>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (0x4EC4EC4EC4EC4EC5 * ((v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v11 = v4 + 104 * a2;
      uint64_t v12 = 104 * a2;
      do
      {
        if (v4)
        {
          *(void *)(v4 + 96) = 0;
          *(_OWORD *)(v4 + 64) = 0uLL;
          *(_OWORD *)(v4 + 80) = 0uLL;
          *(_OWORD *)(v4 + 32) = 0uLL;
          *(_OWORD *)(v4 + 48) = 0uLL;
          *(_OWORD *)uint64_t v4 = 0uLL;
          *(_OWORD *)(v4 + 16) = 0uLL;
        }
        v4 += 104;
        v12 -= 104;
      }
      while (v12);
      uint64_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    uint64_t v6 = 0x4EC4EC4EC4EC4EC5 * ((v4 - *a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x276276276276276) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((v5 - *a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x13B13B13B13B13BLL) {
      uint64_t v9 = 0x276276276276276;
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9) {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 104 * v9, 8);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v13 = v10 + 104 * v6;
    uint64_t v14 = 104 * a2;
    unint64_t v15 = v13 + 104 * a2;
    __n128 v16 = 0uLL;
    uint64_t v17 = v13;
    do
    {
      if (v17)
      {
        *(void *)(v17 + 96) = 0;
        *(_OWORD *)(v17 + 64) = 0uLL;
        *(_OWORD *)(v17 + 80) = 0uLL;
        *(_OWORD *)(v17 + 32) = 0uLL;
        *(_OWORD *)(v17 + 48) = 0uLL;
        *(_OWORD *)uint64_t v17 = 0uLL;
        *(_OWORD *)(v17 + 16) = 0uLL;
      }
      v17 += 104;
      v14 -= 104;
    }
    while (v14);
    uint64_t v18 = v10 + 104 * v9;
    uint64_t v19 = *a1;
    uint64_t v20 = a1[1];
    if (v20 == *a1)
    {
      *a1 = v13;
      a1[1] = v15;
      uint64_t v27 = a1[2];
      a1[2] = v18;
    }
    else
    {
      uint64_t v21 = 0;
      do
      {
        uint64_t v22 = v13 + v21;
        uint64_t v23 = v20 + v21;
        *(_OWORD *)(v22 - 104) = *(_OWORD *)(v20 + v21 - 104);
        *(void *)(v23 - 104) = 0;
        *(void *)(v23 - 96) = 0;
        *(_OWORD *)(v22 - 88) = *(_OWORD *)(v20 + v21 - 88);
        *(void *)(v22 - 72) = *(void *)(v20 + v21 - 72);
        *(void *)(v23 - 80) = 0;
        *(void *)(v23 - 72) = 0;
        long long v24 = *(_OWORD *)(v20 + v21 - 64);
        long long v25 = *(_OWORD *)(v20 + v21 - 48);
        *(_DWORD *)(v22 - 32) = *(_DWORD *)(v20 + v21 - 32);
        *(_OWORD *)(v22 - 64) = v24;
        *(_OWORD *)(v22 - 48) = v25;
        __n128 v16 = *(__n128 *)(v20 + v21 - 24);
        *(void *)(v22 - 8) = *(void *)(v20 + v21 - 8);
        *(__n128 *)(v22 - 24) = v16;
        v21 -= 104;
      }
      while (v20 + v21 != v19);
      uint64_t v20 = *a1;
      uint64_t v26 = a1[1];
      *a1 = v13 + v21;
      a1[1] = v15;
      uint64_t v27 = a1[2];
      a1[2] = v18;
      if (v26 != v20)
      {
        while (1)
        {
          unint64_t v28 = *(std::__shared_weak_count **)(v26 - 72);
          if (v28)
          {
            if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
              break;
            }
          }
          size_t v29 = *(std::__shared_weak_count **)(v26 - 96);
          if (v29) {
            goto LABEL_31;
          }
LABEL_27:
          v26 -= 104;
          if (v26 == v20) {
            goto LABEL_35;
          }
        }
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
        size_t v29 = *(std::__shared_weak_count **)(v26 - 96);
        if (!v29) {
          goto LABEL_27;
        }
LABEL_31:
        std::__shared_weak_count::__release_weak(v29);
        goto LABEL_27;
      }
    }
LABEL_35:
    if (v20) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)a1[3] + 40))(a1[3], v20, v27 - v20, v16);
    }
  }
}

void std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::~__func()
{
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ED517918;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED517918;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::operator()(uint64_t result, void *a2, float *a3)
{
  float v3 = *a3;
  if (*a3 != 100.0)
  {
    uint64_t v4 = *(void *)(**(void **)(result + 8) + 1408) + 344 * *a2;
    *(float *)(v4 + 68) = v3;
    *(float *)(v4 + 160) = v3;
  }
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::target_type()
{
}

void std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::~__func()
{
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1ED517970;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED517970;
  a2[1] = v2;
  return result;
}

float std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::operator()(uint64_t a1, void *a2, float *a3)
{
  float result = *a3;
  *(float *)(*(void *)(**(void **)(a1 + 8) + 1408) + 344 * *a2 + 300) = *a3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::target_type()
{
}

void std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,float)>::~__func()
{
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1ED5179C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED5179C8;
  a2[1] = v2;
  return result;
}

float std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,float)>::operator()(uint64_t a1, void *a2, float *a3)
{
  float result = *a3;
  *(float *)(*(void *)(**(void **)(a1 + 8) + 1464) + 104 * *a2 + 68) = *a3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_2") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,float)>::target_type()
{
}

void std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,float)>::~__func()
{
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1ED517A20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED517A20;
  a2[1] = v2;
  return result;
}

float std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,float)>::operator()(uint64_t a1, void *a2, float *a3)
{
  float result = *a3;
  *(float *)(*(void *)(**(void **)(a1 + 8) + 1464) + 104 * *a2 + 96) = *a3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_3") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,float)>::target_type()
{
}

void std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4>,void ()(unsigned long,float)>::~__func()
{
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1ED517A78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4>,void ()(unsigned long,float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED517A78;
  a2[1] = v2;
  return result;
}

float std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4>,void ()(unsigned long,float)>::operator()(uint64_t a1, void *a2, float *a3)
{
  float result = *a3;
  *(float *)(*(void *)(**(void **)(a1 + 8) + 1560) + 248 * *a2 + 68) = *a3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_4") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_4"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4>,void ()(unsigned long,float)>::target_type()
{
}

void std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5>,void ()(unsigned long,float)>::~__func()
{
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1ED517AD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5>,void ()(unsigned long,float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED517AD0;
  a2[1] = v2;
  return result;
}

float std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5>,void ()(unsigned long,float)>::operator()(uint64_t a1, void *a2, float *a3)
{
  float result = *a3;
  *(float *)(*(void *)(**(void **)(a1 + 8) + 1560) + 248 * *a2 + 244) = *a3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_5") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_5" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_5"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_5" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5>,void ()(unsigned long,float)>::target_type()
{
}

void std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6>,void ()(unsigned long,float)>::~__func()
{
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1ED517B28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6>,void ()(unsigned long,float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED517B28;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6>,void ()(unsigned long,float)>::operator()(uint64_t result, void *a2, _DWORD *a3)
{
  if (*(float *)a3 != 100.0) {
    *(_DWORD *)(*(void *)(**(void **)(result + 8) + 1536) + 4 * *a2) = *a3;
  }
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_6") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_6" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_6"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_6" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6>,void ()(unsigned long,float)>::target_type()
{
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,JunctionInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,JunctionInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,JunctionInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,JunctionInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = *((void *)v10 + 1);
            if (v12 == a2)
            {
              if (*((void *)v10 + 2) == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = *(char **)v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == a2)
          {
            if (*((void *)v10 + 2) == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v13 = a1 + 2;
  uint64_t v10 = (char *)operator new(0x78uLL);
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = v5;
  *((void *)v10 + 2) = *a3;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 24) = 1065353216;
  float v14 = (float)(unint64_t)(a1[3] + 1);
  float v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v5 = v3;
    uint64_t v16 = *a1;
    uint64_t v17 = *(void **)(*a1 + 8 * v3);
    if (!v17) {
      goto LABEL_84;
    }
LABEL_72:
    *(void *)uint64_t v10 = *v17;
LABEL_90:
    *uint64_t v17 = v10;
    goto LABEL_91;
  }
  BOOL v18 = 1;
  if (v7 >= 3) {
    BOOL v18 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v19 = v18 | (2 * v7);
  unint64_t v20 = vcvtps_u32_f32(v14 / v15);
  if (v19 <= v20) {
    size_t prime = v20;
  }
  else {
    size_t prime = v19;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v22 = operator new(8 * prime);
    uint64_t v23 = (void *)*a1;
    *a1 = (uint64_t)v22;
    if (v23) {
      operator delete(v23);
    }
    uint64_t v24 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v24++) = 0;
    while (prime != v24);
    long long v25 = (void *)*v13;
    if (!*v13) {
      goto LABEL_68;
    }
    size_t v26 = v25[1];
    size_t v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v28 = v26 & v27;
      *(void *)(*a1 + 8 * v28) = v13;
      for (uint64_t i = (void *)*v25; *v25; uint64_t i = (void *)*v25)
      {
        size_t v30 = i[1] & v27;
        if (v30 == v28)
        {
          long long v25 = i;
        }
        else if (*(void *)(*a1 + 8 * v30))
        {
          void *v25 = *i;
          uint64_t v31 = 8 * v30;
          *uint64_t i = **(void **)(*a1 + v31);
          **(void **)(*a1 + v31) = i;
        }
        else
        {
          *(void *)(*a1 + 8 * v30) = v25;
          long long v25 = i;
          size_t v28 = v30;
        }
      }
      goto LABEL_68;
    }
    if (v26 >= prime) {
      v26 %= prime;
    }
    *(void *)(*a1 + 8 * v26) = v13;
    unint64_t v35 = (void *)*v25;
    if (!*v25)
    {
LABEL_68:
      unint64_t v7 = prime;
      uint64_t v38 = prime - 1;
      if ((prime & (prime - 1)) != 0) {
        goto LABEL_69;
      }
LABEL_83:
      v5 &= v38;
      uint64_t v16 = *a1;
      uint64_t v17 = *(void **)(*a1 + 8 * v5);
      if (!v17) {
        goto LABEL_84;
      }
      goto LABEL_72;
    }
    while (1)
    {
      size_t v37 = v35[1];
      if (v37 >= prime) {
        v37 %= prime;
      }
      if (v37 == v26) {
        goto LABEL_62;
      }
      if (*(void *)(*a1 + 8 * v37))
      {
        void *v25 = *v35;
        uint64_t v36 = 8 * v37;
        void *v35 = **(void **)(*a1 + v36);
        **(void **)(*a1 + v36) = v35;
        unint64_t v35 = v25;
LABEL_62:
        long long v25 = v35;
        unint64_t v35 = (void *)*v35;
        if (!v35) {
          goto LABEL_68;
        }
      }
      else
      {
        *(void *)(*a1 + 8 * v37) = v25;
        long long v25 = v35;
        unint64_t v35 = (void *)*v35;
        size_t v26 = v37;
        if (!v35) {
          goto LABEL_68;
        }
      }
    }
  }
  if (prime < v7)
  {
    unint64_t v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
    {
      unint64_t v32 = std::__next_prime(v32);
    }
    else
    {
      uint64_t v34 = 1 << -(char)__clz(v32 - 1);
      if (v32 >= 2) {
        unint64_t v32 = v34;
      }
    }
    if (prime <= v32) {
      size_t prime = v32;
    }
    if (prime < v7)
    {
      if (!prime)
      {
        uint64_t v39 = (void *)*a1;
        *a1 = 0;
        if (v39) {
          operator delete(v39);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
        uint64_t v38 = -1;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    unint64_t v7 = a1[1];
  }
  uint64_t v38 = v7 - 1;
  if ((v7 & (v7 - 1)) == 0) {
    goto LABEL_83;
  }
LABEL_69:
  if (v7 <= v5) {
    v5 %= v7;
  }
  uint64_t v16 = *a1;
  uint64_t v17 = *(void **)(*a1 + 8 * v5);
  if (v17) {
    goto LABEL_72;
  }
LABEL_84:
  *(void *)uint64_t v10 = *v13;
  *uint64_t v13 = v10;
  *(void *)(v16 + 8 * v5) = v13;
  if (*(void *)v10)
  {
    unint64_t v40 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7) {
        v40 %= v7;
      }
    }
    else
    {
      v40 &= v7 - 1;
    }
    uint64_t v17 = (void *)(*a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++a1[3];
  return v10;
}

void sub_18A4680F4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,JunctionInfo>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,JunctionInfo>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (void *)__p[10];
    if (v3)
    {
      do
      {
        uint64_t v4 = (void *)*v3;
        operator delete(v3);
        unint64_t v3 = v4;
      }
      while (v4);
    }
    unint64_t v5 = (void *)__p[8];
    __p[8] = 0;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = (void *)__p[5];
    if (v6)
    {
      do
      {
        unint64_t v7 = (void *)*v6;
        operator delete(v6);
        uint64_t v6 = v7;
      }
      while (v7);
    }
    uint8x8_t v8 = (void *)__p[3];
    __p[3] = 0;
    if (v8)
    {
      operator delete(v8);
      uint64_t v9 = __p;
LABEL_11:
      operator delete(v9);
      return;
    }
LABEL_13:
    uint64_t v9 = __p;
    goto LABEL_11;
  }
  if (__p) {
    goto LABEL_13;
  }
}

void std::__hash_table<GeoCodecsTransitLink *,std::hash<GeoCodecsTransitLink *>,std::equal_to<GeoCodecsTransitLink *>,std::allocator<GeoCodecsTransitLink *>>::__emplace_unique_key_args<GeoCodecsTransitLink *,GeoCodecsTransitLink *&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = v7 ^ (v7 >> 47);
  unint64_t v9 = 0x9DDFEA08EB382D69 * v8;
  unint64_t v10 = *((void *)a1 + 1);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
    uint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (void *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2) {
                return;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2) {
              return;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  uint64_t v16 = operator new(0x18uLL);
  *uint64_t v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  float v17 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v18 = a1[8];
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *((void *)a1 + 1);
    }
    if (prime > v10)
    {
LABEL_36:
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v25 = operator new(8 * prime);
      size_t v26 = *(void **)a1;
      *(void *)a1 = v25;
      if (v26) {
        operator delete(v26);
      }
      uint64_t v27 = 0;
      *((void *)a1 + 1) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v27++) = 0;
      while (prime != v27);
      size_t v29 = (uint64_t *)(a1 + 4);
      size_t v28 = (void *)*((void *)a1 + 2);
      if (!v28) {
        goto LABEL_68;
      }
      size_t v30 = v28[1];
      size_t v31 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v32 = v30 & v31;
        *(void *)(*(void *)a1 + 8 * v32) = v29;
        for (uint64_t i = (void *)*v28; *v28; uint64_t i = (void *)*v28)
        {
          size_t v34 = i[1] & v31;
          if (v34 == v32)
          {
            size_t v28 = i;
          }
          else if (*(void *)(*(void *)a1 + 8 * v34))
          {
            *size_t v28 = *i;
            uint64_t v35 = 8 * v34;
            *uint64_t i = **(void **)(*(void *)a1 + v35);
            **(void **)(*(void *)a1 + v35) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v34) = v28;
            size_t v28 = i;
            size_t v32 = v34;
          }
        }
        goto LABEL_68;
      }
      if (v30 >= prime) {
        v30 %= prime;
      }
      *(void *)(*(void *)a1 + 8 * v30) = v29;
      uint64_t v39 = (void *)*v28;
      if (!*v28)
      {
LABEL_68:
        unint64_t v10 = prime;
        uint64_t v42 = prime - 1;
        if ((prime & (prime - 1)) != 0) {
          goto LABEL_69;
        }
        goto LABEL_84;
      }
      while (1)
      {
        size_t v41 = v39[1];
        if (v41 >= prime) {
          v41 %= prime;
        }
        if (v41 == v30) {
          goto LABEL_62;
        }
        if (*(void *)(*(void *)a1 + 8 * v41))
        {
          *size_t v28 = *v39;
          uint64_t v40 = 8 * v41;
          *uint64_t v39 = **(void **)(*(void *)a1 + v40);
          **(void **)(*(void *)a1 + v40) = v39;
          uint64_t v39 = v28;
LABEL_62:
          size_t v28 = v39;
          uint64_t v39 = (void *)*v39;
          if (!v39) {
            goto LABEL_68;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v41) = v28;
          size_t v28 = v39;
          uint64_t v39 = (void *)*v39;
          size_t v30 = v41;
          if (!v39) {
            goto LABEL_68;
          }
        }
      }
    }
    if (prime < v10)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < v10)
      {
        if (!prime)
        {
          unint64_t v43 = *(void **)a1;
          *(void *)a1 = 0;
          if (v43) {
            operator delete(v43);
          }
          unint64_t v10 = 0;
          *((void *)a1 + 1) = 0;
          uint64_t v42 = -1;
          goto LABEL_84;
        }
        goto LABEL_36;
      }
      unint64_t v10 = *((void *)a1 + 1);
    }
    uint64_t v42 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_69:
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        unint64_t v19 = *(void **)a1;
        unint64_t v20 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v20) {
          goto LABEL_25;
        }
      }
      else
      {
        unint64_t v3 = v9;
        unint64_t v19 = *(void **)a1;
        unint64_t v20 = *(void **)(*(void *)a1 + 8 * v9);
        if (v20) {
          goto LABEL_25;
        }
      }
      goto LABEL_85;
    }
LABEL_84:
    unint64_t v3 = v42 & v9;
    unint64_t v19 = *(void **)a1;
    unint64_t v20 = *(void **)(*(void *)a1 + 8 * (v42 & v9));
    if (v20) {
      goto LABEL_25;
    }
    goto LABEL_85;
  }
  unint64_t v19 = *(void **)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
LABEL_25:
    *uint64_t v16 = *v20;
LABEL_91:
    *unint64_t v20 = v16;
    goto LABEL_92;
  }
LABEL_85:
  *uint64_t v16 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v16;
  v19[v3] = a1 + 4;
  if (*v16)
  {
    unint64_t v44 = *(void *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v44 >= v10) {
        v44 %= v10;
      }
    }
    else
    {
      v44 &= v10 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v44);
    goto LABEL_91;
  }
LABEL_92:
  ++*((void *)a1 + 3);
}

void sub_18A46868C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,unsigned long long const*)>::~__func()
{
}

void *std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,unsigned long long const*)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1ED517B80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,unsigned long long const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED517B80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,unsigned long long const*)>::operator()(uint64_t result, void *a2, void **a3)
{
  *(void *)(*(void *)(**(void **)(result + 8) + 1312) + 72 * *a2 + 16) = **a3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,unsigned long long const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,unsigned long long const*)>::target_type()
{
}

void std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,unsigned long,char const*)>::~__func()
{
}

void *std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,unsigned long,char const*)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1ED517BD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,unsigned long,char const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED517BD8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,unsigned long,char const*)>::operator()(uint64_t result, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *a4;
  uint64_t v6 = *(void *)(**(void **)(result + 8) + 1280) + 104 * *a2;
  *(unsigned char *)(v6 + 73) = 1;
  *(_DWORD *)(v6 + 56) = v4;
  *(void *)(v6 + 16) = v5;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,unsigned long,char const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,unsigned long,char const*)>::target_type()
{
}

void std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,unsigned long long const*)>::~__func()
{
}

void *std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,unsigned long long const*)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1ED517C30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,unsigned long long const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED517C30;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,unsigned long long const*)>::operator()(uint64_t result, void *a2, void **a3)
{
  *(void *)(*(void *)(**(void **)(result + 8) + 1280) + 104 * *a2 + 40) = **a3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,unsigned long long const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_2") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,unsigned long long const*)>::target_type()
{
}

void std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,unsigned long,char const*)>::~__func()
{
}

void *std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,unsigned long,char const*)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_1ED517C88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,unsigned long,char const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1ED517C88;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,unsigned long,char const*)>::operator()(uint64_t result, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *a4;
  uint64_t v6 = (void *)(*(void *)(**(void **)(result + 8) + 1312) + 72 * *a2);
  v6[5] = 1;
  v6[6] = v4;
  v6[7] = v5;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,unsigned long,char const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_3") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,unsigned long,char const*)>::target_type()
{
}

geo::codec::Allocator *std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector(geo::codec::Allocator *a1, unint64_t a2, _DWORD *a3)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  uint64_t v6 = geo::codec::Allocator::instance(a1);
  *((void *)a1 + 3) = v6;
  if (a2)
  {
    if (a2 >> 62) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = a2;
    unint64_t v8 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v7 * 4, 4);
    *(void *)a1 = v8;
    *((void *)a1 + 1) = v8;
    unint64_t v9 = &v8[v7];
    *((void *)a1 + 2) = &v8[v7];
    do
    {
      if (v8) {
        *unint64_t v8 = *a3;
      }
      ++v8;
      --v7;
    }
    while (v7 * 4);
    *((void *)a1 + 1) = v9;
  }
  return a1;
}

void sub_18A468C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

geo::codec::Allocator *std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::vector(geo::codec::Allocator *a1, unint64_t a2, void *a3)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  uint64_t v6 = geo::codec::Allocator::instance(a1);
  *((void *)a1 + 3) = v6;
  if (a2)
  {
    if (a2 >> 61) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = a2;
    unint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v7 * 8, 8);
    *(void *)a1 = v8;
    *((void *)a1 + 1) = v8;
    unint64_t v9 = &v8[v7];
    *((void *)a1 + 2) = &v8[v7];
    do
    {
      if (v8) {
        *unint64_t v8 = *a3;
      }
      ++v8;
      --v7;
    }
    while (v7 * 8);
    *((void *)a1 + 1) = v9;
  }
  return a1;
}

void sub_18A468D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t **std::__exception_guard_exceptions<std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](uint64_t **a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = **a1;
    if (v3)
    {
      v2[1] = v3;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[3] + 40))(v2[3], v3, v2[2] - v3);
    }
  }
  return a1;
}

void std::vector<GeoCodecsDaVinciBuilding,geo::StdAllocator<GeoCodecsDaVinciBuilding,geo::codec::Allocator>>::__append(unint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v11 = v4 + 40 * a2;
      uint64_t v12 = 40 * a2;
      do
      {
        if (v4)
        {
          *(void *)(v4 + 32) = 0;
          *(_OWORD *)uint64_t v4 = 0uLL;
          *(_OWORD *)(v4 + 16) = 0uLL;
        }
        v4 += 40;
        v12 -= 40;
      }
      while (v12);
      uint64_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x666666666666666) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x333333333333333) {
      uint64_t v9 = 0x666666666666666;
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9) {
      uint64_t v10 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], 40 * v9, 8);
    }
    else {
      uint64_t v10 = 0;
    }
    unint64_t v13 = v10 + 40 * v6;
    uint64_t v14 = 40 * a2;
    unint64_t v15 = v13 + 40 * a2;
    __n128 v16 = 0uLL;
    unint64_t v17 = v13;
    do
    {
      if (v17)
      {
        *(void *)(v17 + 32) = 0;
        *(_OWORD *)unint64_t v17 = 0uLL;
        *(_OWORD *)(v17 + 16) = 0uLL;
      }
      v17 += 40;
      v14 -= 40;
    }
    while (v14);
    uint64_t v18 = v10 + 40 * v9;
    unint64_t v19 = *a1;
    unint64_t v20 = a1[1];
    if (v20 == *a1)
    {
      *a1 = v13;
      a1[1] = v15;
      unint64_t v23 = a1[2];
      a1[2] = v18;
    }
    else
    {
      do
      {
        long long v21 = *(_OWORD *)(v20 - 40);
        v20 -= 40;
        *(_OWORD *)(v13 - 40) = v21;
        v13 -= 40;
        *(void *)unint64_t v20 = 0;
        *(void *)(v20 + 8) = 0;
        __n128 v16 = *(__n128 *)(v20 + 16);
        *(void *)(v13 + 29) = *(void *)(v20 + 29);
        *(__n128 *)(v13 + 16) = v16;
      }
      while (v20 != v19);
      unint64_t v20 = *a1;
      unint64_t v22 = a1[1];
      *a1 = v13;
      a1[1] = v15;
      unint64_t v23 = a1[2];
      for (a1[2] = v18; v22 != v20; v22 -= 40)
      {
        uint64_t v24 = *(std::__shared_weak_count **)(v22 - 32);
        if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    if (v20) {
      (*(void (**)(unint64_t, unint64_t, unint64_t, __n128))(*(void *)a1[3] + 40))(a1[3], v20, v23 - v20, v16);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned short,unsigned short>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,unsigned short>>(uint64_t a1, unsigned __int16 a2, __int16 a3, __int16 a4)
{
  unint64_t v8 = a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    uint64_t v11 = *(uint64_t ****)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == (uint64_t *)a2)
            {
              if (*((unsigned __int16 *)v12 + 8) == a2) {
                return;
              }
            }
            else if (((unint64_t)v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            uint64_t v12 = (uint64_t **)*v12;
            if (!v12) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = (unint64_t)v12[1];
          if (v13 == a2)
          {
            if (*((unsigned __int16 *)v12 + 8) == a2) {
              return;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = (uint64_t **)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  unint64_t v15 = operator new(0x18uLL);
  *unint64_t v15 = 0;
  v15[1] = v8;
  *((_WORD *)v15 + 8) = a3;
  *((_WORD *)v15 + 9) = a4;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16) {
    goto LABEL_50;
  }
  BOOL v18 = 1;
  if (v9 >= 3) {
    BOOL v18 = (v9 & (v9 - 1)) != 0;
  }
  unint64_t v19 = v18 | (2 * v9);
  unint64_t v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20) {
    size_t prime = v20;
  }
  else {
    size_t prime = v19;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v9 = *(void *)(a1 + 8);
  }
  if (prime > v9) {
    goto LABEL_34;
  }
  if (prime < v9)
  {
    unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v9 < 3 || (uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
    {
      unint64_t v22 = std::__next_prime(v22);
    }
    else
    {
      uint64_t v24 = 1 << -(char)__clz(v22 - 1);
      if (v22 >= 2) {
        unint64_t v22 = v24;
      }
    }
    if (prime <= v22) {
      size_t prime = v22;
    }
    if (prime < v9) {
LABEL_34:
    }
      std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
  }
  unint64_t v9 = *(void *)(a1 + 8);
  if ((v9 & (v9 - 1)) != 0)
  {
    if (v9 <= v8)
    {
      unint64_t v4 = v8 % v9;
      uint64_t v25 = *(void *)a1;
      size_t v26 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
      if (!v26) {
        goto LABEL_53;
      }
LABEL_51:
      *unint64_t v15 = *v26;
LABEL_59:
      *size_t v26 = v15;
      goto LABEL_60;
    }
    unint64_t v4 = v8;
LABEL_50:
    uint64_t v25 = *(void *)a1;
    size_t v26 = *(void **)(*(void *)a1 + 8 * v4);
    if (!v26) {
      goto LABEL_53;
    }
    goto LABEL_51;
  }
  unint64_t v4 = (v9 - 1) & v8;
  uint64_t v25 = *(void *)a1;
  size_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26) {
    goto LABEL_51;
  }
LABEL_53:
  *unint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v25 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v27 = *(void *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    size_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
}

void sub_18A4692F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)>::~__func()
{
}

__n128 std::__function::__func<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1ED517DE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ED517DE8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)>::operator()(uint64_t a1@<X0>, unint64_t *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = *a2;
  int v6 = *a3;
  int v7 = a3[1];
  *(void *)a4 = 0;
  *(_DWORD *)(a4 + 12) = 0;
  if (v7) {
    return;
  }
  switch(v6)
  {
    case 4:
      **(unsigned char **)(a1 + 8) = 1;
      unint64_t v9 = *(uint64_t **)(a1 + 32);
      uint64_t v10 = *v9;
      if (*v9 == v9[1])
      {
        int v47 = 1;
        if (v5)
        {
          std::vector<GeoCodecsDaVinciBuildingColor,geo::StdAllocator<GeoCodecsDaVinciBuildingColor,geo::codec::Allocator>>::__append((uint64_t)v9, v5, &v47);
          uint64_t v10 = **(void **)(a1 + 32);
        }
      }
      *(void *)a4 = v10 + 1;
      HIDWORD(v11) = 4;
      LODWORD(v11) = 3 * v5;
      goto LABEL_65;
    case 6:
      **(unsigned char **)(a1 + 16) = 1;
      uint64_t v12 = *(void *)(a1 + 32);
      unint64_t v13 = *(_DWORD **)v12;
      if (v5 && v13 == *(_DWORD **)(v12 + 8))
      {
        uint64_t v14 = *(void *)(v12 + 16) - (void)v13;
        if (v5 <= v14 >> 2)
        {
          uint64_t v33 = 4 * v5;
          size_t v34 = &v13[v5];
          do
          {
            if (v13) {
              *unint64_t v13 = 0;
            }
            ++v13;
            v33 -= 4;
          }
          while (v33);
          *(void *)(v12 + 8) = v34;
        }
        else
        {
          if (v5 >> 62) {
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = v14 >> 1;
          if (v14 >> 1 <= v5) {
            uint64_t v15 = v5;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
            uint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v16 = v15;
          }
          uint64_t v17 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v12 + 24) + 16))(*(void *)(v12 + 24), 4 * v16, 1);
          uint64_t v18 = 0;
          uint64_t v19 = v17;
          do
          {
            if (v17 + v18) {
              *(_DWORD *)(v17 + v18) = 0;
            }
            v18 += 4;
          }
          while (4 * v5 != v18);
          unint64_t v36 = *(_DWORD **)v12;
          uint64_t v35 = *(_DWORD **)(v12 + 8);
          if (v35 != *(_DWORD **)v12)
          {
            unint64_t v37 = (unint64_t)v35 - *(void *)v12 - 4;
            if (v37 < 0x1C) {
              goto LABEL_71;
            }
            if ((unint64_t)v35 - v17 < 0x20) {
              goto LABEL_71;
            }
            uint64_t v38 = (v37 >> 2) + 1;
            uint64_t v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v40 = &v35[v39 / 0xFFFFFFFFFFFFFFFCLL];
            uint64_t v19 = v17 - v39;
            size_t v41 = (_OWORD *)(v17 - 16);
            uint64_t v42 = (long long *)(v35 - 4);
            uint64_t v43 = v38 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v44 = *v42;
              *(v41 - 1) = *(v42 - 1);
              *size_t v41 = v44;
              v41 -= 2;
              v42 -= 2;
              v43 -= 8;
            }
            while (v43);
            uint64_t v35 = v40;
            if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_71:
              do
              {
                int v45 = *--v35;
                *(_DWORD *)(v19 - 4) = v45;
                v19 -= 4;
              }
              while (v35 != v36);
            }
            uint64_t v35 = *(_DWORD **)v12;
          }
          *(void *)uint64_t v12 = v19;
          *(void *)(v12 + 8) = v17 + 4 * v5;
          uint64_t v46 = *(void *)(v12 + 16);
          *(void *)(v12 + 16) = v17 + 4 * v16;
          if (v35) {
            (*(void (**)(void, _DWORD *, uint64_t))(**(void **)(v12 + 24) + 40))(*(void *)(v12 + 24), v35, v46 - (void)v35);
          }
        }
        unint64_t v13 = **(_DWORD ***)(a1 + 32);
      }
      *(void *)a4 = v13;
      HIDWORD(v11) = 4;
      goto LABEL_64;
    case 7:
      **(unsigned char **)(a1 + 24) = 1;
      if (!v5) {
        goto LABEL_31;
      }
      unint64_t v20 = *(void ***)(a1 + 40);
      long long v21 = (char *)*v20;
      if (*v20 != v20[1]) {
        goto LABEL_31;
      }
      unint64_t v22 = (unsigned char *)v20[2] - v21;
      if (v22 < v5)
      {
        if ((v5 & 0x8000000000000000) == 0)
        {
          uint64_t v23 = 2 * v22;
          if (2 * v22 <= v5) {
            uint64_t v23 = v5;
          }
          if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v24 = v23;
          }
          uint64_t v25 = (char *)operator new(v24);
          bzero(v25, v5);
          *unint64_t v20 = v25;
          v20[1] = &v25[v5];
          v20[2] = &v25[v24];
          if (v21) {
            operator delete(v21);
          }
LABEL_31:
          size_t v26 = *(void **)(a1 + 40);
          break;
        }
LABEL_67:
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      bzero(*v20, v5);
      v20[1] = &v21[v5];
      size_t v26 = *(void **)(a1 + 40);
      break;
    case 8:
      **(unsigned char **)(a1 + 48) = 1;
      if (!v5) {
        goto LABEL_49;
      }
      unint64_t v27 = *(void ***)(a1 + 56);
      size_t v28 = (char *)*v27;
      if (*v27 != v27[1]) {
        goto LABEL_49;
      }
      unint64_t v29 = (unsigned char *)v27[2] - v28;
      if (v29 >= v5)
      {
        bzero(*v27, v5);
        v27[1] = &v28[v5];
      }
      else
      {
        if ((v5 & 0x8000000000000000) != 0) {
          goto LABEL_67;
        }
        uint64_t v30 = 2 * v29;
        if (2 * v29 <= v5) {
          uint64_t v30 = v5;
        }
        if (v29 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v31 = v30;
        }
        size_t v32 = (char *)operator new(v31);
        bzero(v32, v5);
        *unint64_t v27 = v32;
        v27[1] = &v32[v5];
        v27[2] = &v32[v31];
        if (v28) {
          operator delete(v28);
        }
      }
LABEL_49:
      size_t v26 = *(void **)(a1 + 56);
      break;
    default:
      return;
  }
  *(void *)a4 = *v26;
  HIDWORD(v11) = 1;
LABEL_64:
  LODWORD(v11) = v5;
LABEL_65:
  *(void *)(a4 + 12) = v11;
  *(_DWORD *)(a4 + 8) = 1;
}

uint64_t std::__function::__func<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec26_decodeCompressedBuildingsEPKhjRKNS0_19MercatorDequantizerERKNSt3__110shared_ptrINS0_"
                     "10VectorTileEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec26_decodeCompressedBuildingsEPKhjRKNS0_19MercatorDequantizerERKNSt3__110shar"
                                "ed_ptrINS0_10VectorTileEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec26_decodeCompressedBuildingsEPKhjRKNS0_19MercatorDequantizerERKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec26_decodeCompressedBuildingsEPKhjRKNS0_19MercatorDequantizerERKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)>::target_type()
{
}

uint64_t std::vector<GeoCodecsDaVinciBuildingColor,geo::StdAllocator<GeoCodecsDaVinciBuildingColor,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2, _DWORD *a3)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD **)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  if (a2 <= (v7 - (uint64_t)v6) >> 2)
  {
    uint64_t v13 = 4 * a2;
    uint64_t v14 = &v6[a2];
    do
    {
      if (v6) {
        *int v6 = *a3;
      }
      ++v6;
      v13 -= 4;
    }
    while (v13);
    *(void *)(result + 8) = v14;
  }
  else
  {
    uint64_t v8 = (uint64_t)v6 - *(void *)result;
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + a2;
    if (v10 >> 62) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v7 - *(void *)result;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      uint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12) {
      __n128 result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(result + 24) + 16))(*(void *)(result + 24), 4 * v12, 1);
    }
    else {
      __n128 result = 0;
    }
    uint64_t v15 = (_DWORD *)(result + 4 * v9);
    uint64_t v16 = 4 * a2;
    uint64_t v17 = &v15[a2];
    uint64_t v18 = v15;
    do
    {
      if (v18) {
        *uint64_t v18 = *a3;
      }
      ++v18;
      v16 -= 4;
    }
    while (v16);
    uint64_t v20 = *(void *)v5;
    uint64_t v19 = *(void *)(v5 + 8);
    if (v19 != *(void *)v5)
    {
      unint64_t v21 = v19 - *(void *)v5 - 4;
      if (v21 < 0x2C) {
        goto LABEL_34;
      }
      if ((unint64_t)(v19 - (v8 + result)) < 0x20) {
        goto LABEL_34;
      }
      uint64_t v22 = (v21 >> 2) + 1;
      uint64_t v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v24 = v19 - v23;
      uint64_t v15 = (_DWORD *)((char *)v15 - v23);
      uint64_t v25 = (_OWORD *)(result + 4 * v9 - 16);
      size_t v26 = (long long *)(v19 - 16);
      uint64_t v27 = v22 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v28 = *v26;
        *(v25 - 1) = *(v26 - 1);
        _OWORD *v25 = v28;
        v25 -= 2;
        v26 -= 2;
        v27 -= 8;
      }
      while (v27);
      uint64_t v19 = v24;
      if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_34:
        do
        {
          int v29 = *(_DWORD *)(v19 - 4);
          v19 -= 4;
          *--uint64_t v15 = v29;
        }
        while (v19 != v20);
      }
      uint64_t v19 = *(void *)v5;
    }
    *(void *)uint64_t v5 = v15;
    *(void *)(v5 + 8) = v17;
    uint64_t v30 = *(void *)(v5 + 16);
    *(void *)(v5 + 16) = result + 4 * v12;
    if (v19) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v5 + 24) + 40))(*(void *)(v5 + 24), v19, v30 - v19);
    }
  }
  return result;
}

uint64_t **std::__exception_guard_exceptions<std::vector<GeoCodecsVectorTilePoint3D,geo::StdAllocator<GeoCodecsVectorTilePoint3D,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](uint64_t **a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = **a1;
    if (v3)
    {
      v2[1] = v3;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[3] + 40))(v2[3], v3, v2[2] - v3);
    }
  }
  return a1;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_6 &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentCrossing *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v7 = *(_DWORD *)(a2 - 24);
      unsigned int v8 = *(_DWORD *)(a1 + 8);
      BOOL v9 = v7 == v8;
      BOOL v10 = v7 < v8;
      if (v9) {
        BOOL v10 = *(float *)(a2 - 12) < *(float *)(a1 + 20);
      }
      if (v10)
      {
        long long v12 = *(_OWORD *)a1;
        long long v11 = *(_OWORD *)(a1 + 16);
        long long v13 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 16) = v13;
        *(_OWORD *)(a2 - 32) = v12;
        *(_OWORD *)(a2 - 16) = v11;
      }
      return result;
    case 3:
      uint64_t v14 = (long long *)(a1 + 32);
      uint64_t v15 = (long long *)(a2 - 32);
      unsigned int v16 = *(_DWORD *)(a1 + 40);
      float v17 = *(float *)(a1 + 52);
      unsigned int v18 = *(_DWORD *)(a1 + 8);
      BOOL v9 = v16 == v18;
      BOOL v19 = v16 < v18;
      if (v9) {
        BOOL v19 = v17 < *(float *)(a1 + 20);
      }
      unsigned int v20 = *(_DWORD *)(a2 - 24);
      BOOL v9 = v20 == v16;
      BOOL v21 = v20 < v16;
      if (v9) {
        BOOL v21 = *(float *)(a2 - 12) < v17;
      }
      if (v19)
      {
        if (v21)
        {
          long long v23 = *(_OWORD *)a1;
          long long v22 = *(_OWORD *)(a1 + 16);
          long long v24 = *(_OWORD *)(a2 - 16);
          *(_OWORD *)a1 = *v15;
          *(_OWORD *)(a1 + 16) = v24;
LABEL_49:
          *uint64_t v15 = v23;
          *(_OWORD *)(a2 - 16) = v22;
          return result;
        }
        long long v83 = *(_OWORD *)a1;
        long long v82 = *(_OWORD *)(a1 + 16);
        long long v84 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)a1 = *v14;
        *(_OWORD *)(a1 + 16) = v84;
        *uint64_t v14 = v83;
        *(_OWORD *)(a1 + 48) = v82;
        unsigned int v85 = *(_DWORD *)(a2 - 24);
        unsigned int v86 = *(_DWORD *)(a1 + 40);
        BOOL v9 = v85 == v86;
        BOOL v87 = v85 < v86;
        if (v9) {
          BOOL v87 = *(float *)(a2 - 12) < *(float *)(a1 + 52);
        }
        if (v87)
        {
          long long v23 = *v14;
          long long v22 = *(_OWORD *)(a1 + 48);
          long long v88 = *(_OWORD *)(a2 - 16);
          *uint64_t v14 = *v15;
          *(_OWORD *)(a1 + 48) = v88;
          goto LABEL_49;
        }
      }
      else if (v21)
      {
        long long v66 = *v14;
        long long v65 = *(_OWORD *)(a1 + 48);
        long long v67 = *(_OWORD *)(a2 - 16);
        *uint64_t v14 = *v15;
        *(_OWORD *)(a1 + 48) = v67;
        *uint64_t v15 = v66;
        *(_OWORD *)(a2 - 16) = v65;
        unsigned int v68 = *(_DWORD *)(a1 + 40);
        unsigned int v69 = *(_DWORD *)(a1 + 8);
        BOOL v9 = v68 == v69;
        BOOL v70 = v68 < v69;
        if (v9) {
          BOOL v70 = *(float *)(a1 + 52) < *(float *)(a1 + 20);
        }
        if (v70)
        {
          long long v72 = *(_OWORD *)a1;
          long long v71 = *(_OWORD *)(a1 + 16);
          long long v73 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)a1 = *v14;
          *(_OWORD *)(a1 + 16) = v73;
          *uint64_t v14 = v72;
          *(_OWORD *)(a1 + 48) = v71;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_6 &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentCrossing *>((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64), (long long *)(a2 - 32), a3);
      return 1;
    case 5:
      uint64_t v38 = (long long *)(a1 + 32);
      uint64_t v39 = (long long *)(a1 + 64);
      uint64_t v40 = (long long *)(a1 + 96);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_6 &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentCrossing *>((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64), (long long *)(a1 + 96), a3);
      unsigned int v41 = *(_DWORD *)(a2 - 24);
      unsigned int v42 = *(_DWORD *)(a1 + 104);
      BOOL v9 = v41 == v42;
      BOOL v43 = v41 < v42;
      if (v9) {
        BOOL v43 = *(float *)(a2 - 12) < *(float *)(a1 + 116);
      }
      if (v43)
      {
        long long v45 = *v40;
        long long v44 = *(_OWORD *)(a1 + 112);
        long long v46 = *(_OWORD *)(a2 - 16);
        *uint64_t v40 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 112) = v46;
        *(_OWORD *)(a2 - 32) = v45;
        *(_OWORD *)(a2 - 16) = v44;
        unsigned int v47 = *(_DWORD *)(a1 + 104);
        unsigned int v48 = *(_DWORD *)(a1 + 72);
        BOOL v9 = v47 == v48;
        BOOL v49 = v47 < v48;
        if (v9) {
          BOOL v49 = *(float *)(a1 + 116) < *(float *)(a1 + 84);
        }
        if (v49)
        {
          long long v51 = *v39;
          long long v50 = *(_OWORD *)(a1 + 80);
          long long v52 = *(_OWORD *)(a1 + 112);
          *uint64_t v39 = *v40;
          *(_OWORD *)(a1 + 80) = v52;
          *uint64_t v40 = v51;
          *(_OWORD *)(a1 + 112) = v50;
          unsigned int v53 = *(_DWORD *)(a1 + 72);
          unsigned int v54 = *(_DWORD *)(a1 + 40);
          BOOL v9 = v53 == v54;
          BOOL v55 = v53 < v54;
          if (v9) {
            BOOL v55 = *(float *)(a1 + 84) < *(float *)(a1 + 52);
          }
          if (v55)
          {
            long long v57 = *v38;
            long long v56 = *(_OWORD *)(a1 + 48);
            long long v58 = *(_OWORD *)(a1 + 80);
            *uint64_t v38 = *v39;
            *(_OWORD *)(a1 + 48) = v58;
            *uint64_t v39 = v57;
            *(_OWORD *)(a1 + 80) = v56;
            unsigned int v59 = *(_DWORD *)(a1 + 40);
            unsigned int v60 = *(_DWORD *)(a1 + 8);
            BOOL v9 = v59 == v60;
            BOOL v61 = v59 < v60;
            if (v9) {
              BOOL v61 = *(float *)(a1 + 52) < *(float *)(a1 + 20);
            }
            if (v61)
            {
              long long v63 = *(_OWORD *)a1;
              long long v62 = *(_OWORD *)(a1 + 16);
              long long v64 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)a1 = *v38;
              *(_OWORD *)(a1 + 16) = v64;
              *uint64_t v38 = v63;
              *(_OWORD *)(a1 + 48) = v62;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v25 = a1 + 64;
      size_t v26 = (long long *)(a1 + 32);
      unsigned int v27 = *(_DWORD *)(a1 + 40);
      float v28 = *(float *)(a1 + 52);
      unsigned int v29 = *(_DWORD *)(a1 + 8);
      float v30 = *(float *)(a1 + 20);
      BOOL v31 = v27 < v29;
      if (v27 == v29) {
        BOOL v31 = v28 < v30;
      }
      unsigned int v32 = *(_DWORD *)(a1 + 72);
      float v33 = *(float *)(a1 + 84);
      BOOL v9 = v32 == v27;
      BOOL v34 = v32 < v27;
      if (v9) {
        BOOL v34 = v33 < v28;
      }
      if (v31)
      {
        if (v34)
        {
          long long v36 = *(_OWORD *)a1;
          long long v35 = *(_OWORD *)(a1 + 16);
          long long v37 = *(_OWORD *)(a1 + 80);
          *(_OWORD *)a1 = *(_OWORD *)v25;
          *(_OWORD *)(a1 + 16) = v37;
LABEL_54:
          *(_OWORD *)uint64_t v25 = v36;
          *(_OWORD *)(a1 + 80) = v35;
          goto LABEL_55;
        }
        long long v90 = *(_OWORD *)a1;
        long long v89 = *(_OWORD *)(a1 + 16);
        long long v91 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)a1 = *v26;
        *(_OWORD *)(a1 + 16) = v91;
        *size_t v26 = v90;
        *(_OWORD *)(a1 + 48) = v89;
        unsigned int v92 = *(_DWORD *)(a1 + 40);
        BOOL v9 = v32 == v92;
        BOOL v93 = v32 < v92;
        if (v9) {
          BOOL v93 = v33 < *(float *)(a1 + 52);
        }
        if (v93)
        {
          long long v36 = *v26;
          long long v35 = *(_OWORD *)(a1 + 48);
          long long v94 = *(_OWORD *)(a1 + 80);
          *size_t v26 = *(_OWORD *)v25;
          *(_OWORD *)(a1 + 48) = v94;
          goto LABEL_54;
        }
      }
      else if (v34)
      {
        long long v75 = *v26;
        long long v74 = *(_OWORD *)(a1 + 48);
        long long v76 = *(_OWORD *)(a1 + 80);
        *size_t v26 = *(_OWORD *)v25;
        *(_OWORD *)(a1 + 48) = v76;
        *(_OWORD *)uint64_t v25 = v75;
        *(_OWORD *)(a1 + 80) = v74;
        unsigned int v77 = *(_DWORD *)(a1 + 40);
        BOOL v9 = v77 == v29;
        BOOL v78 = v77 < v29;
        if (v9) {
          BOOL v78 = *(float *)(a1 + 52) < v30;
        }
        if (v78)
        {
          long long v80 = *(_OWORD *)a1;
          long long v79 = *(_OWORD *)(a1 + 16);
          long long v81 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)a1 = *v26;
          *(_OWORD *)(a1 + 16) = v81;
          *size_t v26 = v80;
          *(_OWORD *)(a1 + 48) = v79;
        }
      }
LABEL_55:
      uint64_t v95 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v96 = 0;
      int v97 = 0;
      while (1)
      {
        unsigned int v99 = *(_DWORD *)(v95 + 8);
        float v100 = *(float *)(v95 + 20);
        unsigned int v101 = *(_DWORD *)(v25 + 8);
        BOOL v102 = v100 < *(float *)(v25 + 20);
        BOOL v9 = v99 == v101;
        BOOL v103 = v99 < v101;
        if (!v9) {
          BOOL v102 = v103;
        }
        if (v102)
        {
          uint64_t v104 = *(void *)v95;
          uint64_t v105 = *(void *)(v95 + 12);
          uint64_t v106 = v96;
          uint64_t v107 = *(void *)(v95 + 24);
          do
          {
            uint64_t v108 = a1 + v106;
            long long v109 = *(_OWORD *)(a1 + v106 + 80);
            *(_OWORD *)(v108 + 96) = *(_OWORD *)(a1 + v106 + 64);
            *(_OWORD *)(v108 + 112) = v109;
            if (v106 == -64)
            {
              uint64_t v98 = a1;
              goto LABEL_58;
            }
            unsigned int v110 = *(_DWORD *)(v108 + 40);
            BOOL v111 = v100 < *(float *)(v108 + 52);
            BOOL v9 = v99 == v110;
            BOOL v112 = v99 < v110;
            if (!v9) {
              BOOL v111 = v112;
            }
            v106 -= 32;
          }
          while (v111);
          uint64_t v98 = a1 + v106 + 96;
LABEL_58:
          *(void *)uint64_t v98 = v104;
          *(_DWORD *)(v98 + 8) = v99;
          *(void *)(v98 + 12) = v105;
          *(float *)(v98 + 20) = v100;
          ++v97;
          *(void *)(v98 + 24) = v107;
          if (v97 == 8) {
            return v95 + 32 == a2;
          }
        }
        uint64_t v25 = v95;
        v96 += 32;
        v95 += 32;
        if (v95 == a2) {
          return 1;
        }
      }
  }
}

void std::__function::__func<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::~__func()
{
}

__n128 std::__function::__func<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1ED517E98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ED517E98;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *v4;
  uint64_t v5 = (std::__shared_weak_count *)v4[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v7.__d_.__rep_;
  unint64_t v9 = **(void **)(a1 + 16);
  if (v9 >= *(void *)(**(void **)(a1 + 8) + 2832) + 24 * **(void **)(a1 + 24))
  {
    long long v13 = (FILE *)*MEMORY[0x1E4F143C8];
    int v14 = 9987;
  }
  else
  {
    uint64_t v10 = *(void *)(v3 + 48);
    unint64_t v11 = *(void *)(v3 + 56);
    uint64_t v12 = v10 + 4;
    if (v10 + 4 <= v11)
    {
      uint64_t v15 = *(void *)(v3 + 40);
      *(_DWORD *)(v3 + 64) = *(_DWORD *)(v15 + v10);
      *(void *)(v3 + 48) = v12;
      uint64_t v16 = v10 + 6;
      if (v10 + 6 <= v11)
      {
        int v17 = *(unsigned __int16 *)(v15 + v12);
        *(void *)(v3 + 48) = v16;
        if (**(unsigned char **)(a1 + 32) && v17 == 71) {
          goto LABEL_19;
        }
        *(_DWORD *)(v9 + 12) = v17;
        *(unsigned char *)(v9 + 16) = 0;
        unint64_t v18 = v10 + 10;
        if (v18 <= v11)
        {
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v15 + v16);
          *(void *)(v3 + 48) = v18;
          uint64_t v19 = geo::codec::Allocator::instance((geo::codec::Allocator *)v7.__d_.__rep_);
          uint64_t v20 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v19 + 16))(v19, *(unsigned int *)(**(void **)(a1 + 16) + 8), 8);
          BOOL v21 = *(uint64_t ***)(a1 + 16);
          **BOOL v21 = v20;
          long long v22 = (void **)*v21;
          size_t v23 = *((unsigned int *)v22 + 2);
          uint64_t v24 = *(void *)(v3 + 48);
          if (v24 + v23 <= *(void *)(v3 + 56))
          {
            v7.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)memcpy(*v22, (const void *)(*(void *)(v3 + 40) + v24), v23);
            *(void *)(v3 + 48) += v23;
            **(void **)(a1 + 16) += 24;
            ++*(_WORD *)(**(void **)(a1 + 8) + 2840);
            char v25 = 1;
            goto LABEL_16;
          }
          long long v13 = (FILE *)*MEMORY[0x1E4F143C8];
          int v14 = 10005;
        }
        else
        {
          long long v13 = (FILE *)*MEMORY[0x1E4F143C8];
          int v14 = 10002;
        }
      }
      else
      {
        long long v13 = (FILE *)*MEMORY[0x1E4F143C8];
        int v14 = 9992;
      }
    }
    else
    {
      long long v13 = (FILE *)*MEMORY[0x1E4F143C8];
      int v14 = 9989;
    }
  }
  v7.__d_.__rep_ = fprintf(v13, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v14);
  char v25 = 0;
LABEL_16:
  size_t v26 = *(char **)(a1 + 48);
  if (!*v26) {
    char v25 = 0;
  }
  *size_t v26 = v25;
LABEL_19:
  if (v3 && **(void **)(a1 + 40))
  {
    if (*(unsigned char *)v3)
    {
      uint64_t v27 = geo::codec::Allocator::instance((geo::codec::Allocator *)v7.__d_.__rep_);
      v7.__d_.__rep_ = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v27 + 40))(v27, *(void *)(v3 + 40), 0);
    }
    uint64_t v28 = geo::codec::Allocator::instance((geo::codec::Allocator *)v7.__d_.__rep_);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v28 + 40))(v28, v3, 0);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v29 = std::chrono::steady_clock::now().__d_.__rep_;
  float v30 = "ChapterStyleAttributeRaster";
  BOOL v31 = &v30;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v6 + 1912, (uint64_t *)&v30, (uint64_t)&std::piecewise_construct, (uint64_t **)&v31)+ 4) = (double)((v29 - rep) / 1000) * 0.001;
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_18A46A428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const char *a12, uint64_t a13, const char **a14)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  a12 = "ChapterStyleAttributeRaster";
  a14 = &a12;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v16 + 1912, (uint64_t *)&a12, (uint64_t)&std::piecewise_construct, (uint64_t **)&a14)+ 4) = (double)((rep - v15) / 1000) * 0.001;
  if (v14)
  {
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec29_readStyleAttributeRastersOldEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0"
                     "_10VectorTileEEEbE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec29_readStyleAttributeRastersOldEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110sha"
                                "red_ptrINS0_10VectorTileEEEbE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec29_readStyleAttributeRastersOldEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEbE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec29_readStyleAttributeRastersOldEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEbE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::target_type()
{
}

void std::__function::__func<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::~__func()
{
}

__n128 std::__function::__func<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1ED517E40;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ED517E40;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec26_readStyleAttributeRastersEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10"
                     "VectorTileEEEbE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec26_readStyleAttributeRastersEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared"
                                "_ptrINS0_10VectorTileEEEbE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec26_readStyleAttributeRastersEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEbE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec26_readStyleAttributeRastersEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEbE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::target_type()
{
}

void std::__function::__func<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(VMP4Chapter *)>::~__func()
{
}

__n128 std::__function::__func<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(VMP4Chapter *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1ED517CE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(VMP4Chapter *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1ED517CE0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(VMP4Chapter *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec20_readMaterialRastersEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3geo5codec20_readMaterialRastersEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrIN"
                                "S0_10VectorTileEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec20_readMaterialRastersEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec20_readMaterialRastersEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(VMP4Chapter *)>::target_type()
{
}

uint64_t std::__split_buffer<GeoCodecsTrafficSkeleton,geo::StdAllocator<GeoCodecsTrafficSkeleton,geo::codec::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      uint64_t v4 = i - 40;
      *(void *)(a1 + 16) = i - 40;
      uint64_t v5 = *(void *)(i - 32);
      if (v5) {
        break;
      }
      i -= 40;
      if (v4 == v3) {
        goto LABEL_6;
      }
    }
    *(void *)(i - 24) = v5;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(i - 8) + 40))(*(void *)(i - 8), v5, *(void *)(i - 16) - v5);
  }
LABEL_6:
  if (*(void *)a1) {
    (*(void (**)(void, void, void))(***(void ***)(a1 + 32) + 40))(**(void **)(a1 + 32), *(void *)a1, *(void *)(a1 + 24) - *(void *)a1);
  }
  return a1;
}

geo::codec::Allocator **std::vector<GeoCodecsRunningTrack,geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>>::vector(geo::codec::Allocator **a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  a1[3] = (geo::codec::Allocator *)v4;
  if (a2)
  {
    uint64_t v5 = a2 << 7;
    uint64_t v6 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5, 8);
    std::chrono::steady_clock::time_point v7 = v6;
    *a1 = v6;
    a1[1] = v6;
    unsigned int v8 = (geo::codec::Allocator *)((char *)v6 + v5);
    a1[2] = (geo::codec::Allocator *)((char *)v6 + v5);
    do
    {
      if (v7)
      {
        *((_OWORD *)v7 + 6) = 0u;
        *((_OWORD *)v7 + 7) = 0u;
        *((_OWORD *)v7 + 4) = 0u;
        *((_OWORD *)v7 + 5) = 0u;
        *((_OWORD *)v7 + 2) = 0u;
        *((_OWORD *)v7 + 3) = 0u;
        *(_OWORD *)std::chrono::steady_clock::time_point v7 = 0u;
        *((_OWORD *)v7 + 1) = 0u;
        unint64_t v9 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v6);
        *((void *)v7 + 9) = v9;
        *((void *)v7 + 13) = 0;
        *((void *)v7 + 14) = 0;
        *((void *)v7 + 12) = 0;
        uint64_t v6 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v9);
        *((void *)v7 + 15) = v6;
      }
      std::chrono::steady_clock::time_point v7 = (geo::codec::Allocator *)((char *)v7 + 128);
      v5 -= 128;
    }
    while (v5);
    a1[1] = v8;
  }
  return a1;
}

void sub_18A46A964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t **std::__exception_guard_exceptions<std::vector<GeoCodecsRunningTrack,geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](uint64_t **a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = **a1;
    if (v3)
    {
      uint64_t v4 = v2[1];
      uint64_t v5 = **a1;
      uint64_t v6 = *a1;
      if (v4 != v3)
      {
        do
          GeoCodecsRunningTrack::~GeoCodecsRunningTrack((GeoCodecsRunningTrack *)(v4 - 128));
        while (v4 != v3);
        uint64_t v6 = *a1;
        uint64_t v5 = **a1;
      }
      v2[1] = v3;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[3] + 40))(v6[3], v5, v6[2] - v5);
    }
  }
  return a1;
}

void std::vector<GeoCodecsRunningTrack,geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<GeoCodecsRunningTrack*,GeoCodecsRunningTrack*>(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = v8 - *(void *)a1;
  if (a4 > v10 >> 7)
  {
    if (v9)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      if (v11 == v9)
      {
        uint64_t v12 = v9;
      }
      else
      {
        do
          GeoCodecsRunningTrack::~GeoCodecsRunningTrack((GeoCodecsRunningTrack *)(v11 - 128));
        while (v11 != v9);
        uint64_t v12 = *(void *)a1;
        uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
      }
      *(void *)(a1 + 8) = v9;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v12, v10);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 >> 57) {
      goto LABEL_33;
    }
    uint64_t v23 = v8 >> 6;
    if (v8 >> 6 <= a4) {
      uint64_t v23 = a4;
    }
    BOOL v24 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFF80;
    unint64_t v25 = 0x1FFFFFFFFFFFFFFLL;
    if (!v24) {
      unint64_t v25 = v23;
    }
    if (v25 >> 57) {
LABEL_33:
    }
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    unint64_t v26 = v25 << 7;
    uint64_t v27 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), v25 << 7, 8);
    *(void *)a1 = v27;
    *(void *)(a1 + 8) = v27;
    *(void *)(a1 + 16) = v27 + v26;
    uint64_t v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>,GeoCodecsRunningTrack*,GeoCodecsRunningTrack*,GeoCodecsRunningTrack*>(a2, a3, v27);
LABEL_32:
    *(void *)(a1 + 8) = v22;
    return;
  }
  uint64_t v13 = *(void *)(a1 + 8);
  unint64_t v14 = (v13 - v9) >> 7;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[8 * v14];
    if (v13 != v9)
    {
      uint64_t v16 = (uint64_t *)(v9 + 96);
      int v17 = (char *)a2 + 56;
      do
      {
        unint64_t v18 = v17 - 56;
        *((_OWORD *)v16 - 6) = *(_OWORD *)(v17 - 56);
        *(v16 - 10) = *((void *)v17 - 5);
        *(v16 - 9) = *((void *)v17 - 4);
        *(v16 - 8) = *((void *)v17 - 3);
        *(v16 - 7) = *((void *)v17 - 2);
        if (v16 - 12 != (uint64_t *)(v17 - 56))
        {
          std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<gm::Matrix<unsigned int,3,1>*,gm::Matrix<unsigned int,3,1>*>((uint64_t)(v16 - 6), *((char **)v17 - 1), *(char **)v17, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v17 - *((void *)v17 - 1)) >> 2));
          *((_OWORD *)v16 - 1) = *(_OWORD *)(v17 + 24);
          std::vector<GeoCodecsRunningTrackLane,geo::StdAllocator<GeoCodecsRunningTrackLane,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<GeoCodecsRunningTrackLane*,GeoCodecsRunningTrackLane*>(v16, *((void *)v17 + 5), *((void *)v17 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v17 + 6) - *((void *)v17 + 5)) >> 4));
        }
        v16 += 16;
        v17 += 128;
      }
      while (v18 + 128 != (char *)v15);
      uint64_t v9 = *(void *)(a1 + 8);
    }
    uint64_t v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>,GeoCodecsRunningTrack*,GeoCodecsRunningTrack*,GeoCodecsRunningTrack*>(v15, a3, v9);
    goto LABEL_32;
  }
  if (a2 != a3)
  {
    uint64_t v19 = (uint64_t *)(v9 + 96);
    uint64_t v20 = (char *)a2 + 56;
    do
    {
      BOOL v21 = v20 - 56;
      *((_OWORD *)v19 - 6) = *(_OWORD *)(v20 - 56);
      *(v19 - 10) = *((void *)v20 - 5);
      *(v19 - 9) = *((void *)v20 - 4);
      *(v19 - 8) = *((void *)v20 - 3);
      *(v19 - 7) = *((void *)v20 - 2);
      if (v19 - 12 != (uint64_t *)(v20 - 56))
      {
        std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<gm::Matrix<unsigned int,3,1>*,gm::Matrix<unsigned int,3,1>*>((uint64_t)(v19 - 6), *((char **)v20 - 1), *(char **)v20, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v20 - *((void *)v20 - 1)) >> 2));
        *((_OWORD *)v19 - 1) = *(_OWORD *)(v20 + 24);
        std::vector<GeoCodecsRunningTrackLane,geo::StdAllocator<GeoCodecsRunningTrackLane,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<GeoCodecsRunningTrackLane*,GeoCodecsRunningTrackLane*>(v19, *((void *)v20 + 5), *((void *)v20 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v20 + 6) - *((void *)v20 + 5)) >> 4));
      }
      v19 += 16;
      v20 += 128;
      v9 += 128;
    }
    while (v21 + 128 != (char *)a3);
    uint64_t v13 = *(void *)(a1 + 8);
  }
  while (v13 != v9)
    GeoCodecsRunningTrack::~GeoCodecsRunningTrack((GeoCodecsRunningTrack *)(v13 - 128));
  *(void *)(a1 + 8) = v9;
}

void sub_18A46AD20(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_18A46AD2C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>,GeoCodecsRunningTrack*,GeoCodecsRunningTrack*,GeoCodecsRunningTrack*>(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = a2;
  uint64_t v4 = (uint64_t *)a1;
  uint64_t v5 = a3;
  uint64_t v6 = 0;
  do
  {
    if (v5)
    {
      long long v7 = *(_OWORD *)v4;
      long long v8 = *((_OWORD *)v4 + 2);
      *(_OWORD *)(v5 + 16) = *((_OWORD *)v4 + 1);
      *(_OWORD *)(v5 + 32) = v8;
      *(_OWORD *)uint64_t v5 = v7;
      std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::vector((uint64_t *)(v5 + 48), v4 + 6);
      long long v9 = *((_OWORD *)v4 + 5);
      *(void *)(v5 + 96) = 0;
      *(_OWORD *)(v5 + 80) = v9;
      *(void *)(v5 + 104) = 0;
      uint64_t v10 = v4[15];
      *(void *)(v5 + 112) = 0;
      *(void *)(v5 + 120) = v10;
      uint64_t v12 = v4[12];
      uint64_t v11 = v4[13];
      if (v11 != v12)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 4) >= 0x555555555555556) {
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
        uint64_t v14 = 0;
        *(void *)(v5 + 96) = v13;
        *(void *)(v5 + 104) = v13;
        *(void *)(v5 + 112) = v13 + 16 * ((v11 - v12) >> 4);
        uint64_t v15 = v13;
        do
        {
          if (v15)
          {
            *(unsigned char *)uint64_t v15 = *(unsigned char *)v12;
            *(void *)(v15 + 8) = 0;
            *(void *)(v15 + 16) = 0;
            uint64_t v16 = *(void *)(v12 + 32);
            *(void *)(v15 + 24) = 0;
            *(void *)(v15 + 32) = v16;
            uint64_t v18 = *(void *)(v12 + 8);
            uint64_t v17 = *(void *)(v12 + 16);
            if (v17 != v18)
            {
              if (0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 2) >= 0x1555555555555556) {
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
              uint64_t v20 = 0;
              *(void *)(v15 + 8) = v19;
              *(void *)(v15 + 16) = v19;
              *(void *)(v15 + 24) = v19 + 4 * ((v17 - v18) >> 2);
              do
              {
                uint64_t v21 = v19 + v20;
                if (v19 + v20)
                {
                  uint64_t v22 = *(void *)(v18 + v20);
                  *(_DWORD *)(v21 + 8) = *(_DWORD *)(v18 + v20 + 8);
                  *(void *)uint64_t v21 = v22;
                }
                v20 += 12;
              }
              while (v18 + v20 != v17);
              *(void *)(v15 + 16) = v19 + v20;
            }
            *(void *)(v15 + 40) = *(void *)(v12 + 40);
          }
          v12 += 48;
          v15 += 48;
          v14 += 48;
        }
        while (v12 != v11);
        *(void *)(v5 + 104) = v15;
        uint64_t v3 = a2;
      }
    }
    v4 += 16;
    v5 += 128;
    v6 += 128;
  }
  while (v4 != (uint64_t *)v3);
  return v5;
}

void sub_18A46AF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__exception_guard_exceptions<std::vector<GeoCodecsRunningTrackLane,geo::StdAllocator<GeoCodecsRunningTrackLane,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100]((uint64_t **)va);
  uint64_t v10 = *a5;
  if (*a5)
  {
    *(void *)(v7 + 56) = v10;
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v7 + 72) + 40))(*(void *)(v7 + 72), v10, *(void *)(v7 + 64) - v10);
  }
  if (v7 != a3)
  {
    do
    {
      GeoCodecsRunningTrack::~GeoCodecsRunningTrack((GeoCodecsRunningTrack *)(a3 - 128 + v8));
      v8 -= 128;
    }
    while (v8);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::vector(uint64_t *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v3 = a2[3];
  a1[2] = 0;
  a1[3] = v3;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = v5 - *a2;
  if (v6)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 2);
    if (v7 >= 0x1555555555555556) {
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    uint64_t v9 = 0;
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v8 + 12 * v7;
    do
    {
      uint64_t v10 = v8 + v9;
      if (v8 + v9)
      {
        uint64_t v11 = *(void *)(v4 + v9);
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v4 + v9 + 8);
        *(void *)uint64_t v10 = v11;
      }
      v9 += 12;
    }
    while (v4 + v9 != v5);
    a1[1] = v8 + v9;
  }
  return a1;
}

void sub_18A46B190(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__exception_guard_exceptions<std::vector<GeoCodecsRunningTrackLane,geo::StdAllocator<GeoCodecsRunningTrackLane,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](uint64_t **a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = **a1;
    if (v3)
    {
      uint64_t v4 = v2[1];
      uint64_t v5 = **a1;
      uint64_t v6 = *a1;
      if (v4 != v3)
      {
        do
        {
          uint64_t v7 = *(void *)(v4 - 40);
          if (v7)
          {
            *(void *)(v4 - 32) = v7;
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v4 - 16) + 40))(*(void *)(v4 - 16), v7, *(void *)(v4 - 24) - v7);
          }
          v4 -= 48;
        }
        while (v4 != v3);
        uint64_t v6 = *a1;
        uint64_t v5 = **a1;
      }
      v2[1] = v3;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[3] + 40))(v6[3], v5, v6[2] - v5);
    }
  }
  return a1;
}

uint64_t std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<gm::Matrix<unsigned int,3,1>*,gm::Matrix<unsigned int,3,1>*>(uint64_t a1, char *a2, char *a3, unint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 2) < a4)
  {
    if (v9)
    {
      *(void *)(a1 + 8) = v9;
      (*(void (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 > 0x1555555555555555) {
      goto LABEL_51;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555) {
LABEL_51:
    }
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 12 * v12;
    uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), 12 * v12, 4);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = result + v13;
    uint64_t v15 = result;
    if (a2 != a3)
    {
      uint64_t v15 = result;
      do
      {
        if (v15)
        {
          uint64_t v16 = *(void *)a2;
          *(_DWORD *)(v15 + 8) = *((_DWORD *)a2 + 2);
          *(void *)uint64_t v15 = v16;
        }
        a2 += 12;
        v15 += 12;
      }
      while (a2 != a3);
    }
    *(void *)(a1 + 8) = v15;
    return result;
  }
  uint64_t v17 = (uint64_t *)(a1 + 8);
  uint64_t result = *(void *)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((result - (uint64_t)v9) >> 2) >= a4)
  {
    if (a2 == a3)
    {
      uint64_t v39 = v9;
    }
    else
    {
      unint64_t v33 = a3 - a2 - 12;
      if (v33 < 0x84
        || ((unint64_t v34 = v33 / 0xC, v35 = 12 * v34 + 12, v9 < &a2[v35]) ? (v36 = &v9[v35] > a2) : (v36 = 0), v36))
      {
        uint64_t v39 = v9;
        uint64_t v40 = a2;
      }
      else
      {
        unint64_t v37 = v34 + 1;
        uint64_t v38 = (v34 + 1) & 0x3FFFFFFFFFFFFFF8;
        uint64_t v39 = &v9[12 * v38];
        uint64_t v40 = &a2[12 * v38];
        uint64_t v41 = v38;
        unsigned int v42 = v9;
        do
        {
          long long v43 = *((_OWORD *)a2 + 1);
          long long v45 = *((_OWORD *)a2 + 4);
          long long v44 = *((_OWORD *)a2 + 5);
          long long v46 = *((_OWORD *)a2 + 2);
          long long v47 = *((_OWORD *)a2 + 3);
          *(_OWORD *)unsigned int v42 = *(_OWORD *)a2;
          *((_OWORD *)v42 + 1) = v43;
          *((_OWORD *)v42 + 2) = v46;
          *((_OWORD *)v42 + 3) = v47;
          a2 += 96;
          *((_OWORD *)v42 + 4) = v45;
          *((_OWORD *)v42 + 5) = v44;
          v42 += 96;
          v41 -= 8;
        }
        while (v41);
        if (v37 == v38) {
          goto LABEL_50;
        }
      }
      do
      {
        *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
        *((_DWORD *)v39 + 1) = *((_DWORD *)v40 + 1);
        *((_DWORD *)v39 + 2) = *((_DWORD *)v40 + 2);
        v39 += 12;
        v40 += 12;
      }
      while (v40 != a3);
    }
LABEL_50:
    *uint64_t v17 = (uint64_t)v39;
    return result;
  }
  uint64_t v18 = &a2[4 * ((result - (uint64_t)v9) >> 2)];
  if ((char *)result != v9)
  {
    unint64_t v19 = result - (void)v9 - 12;
    if (v19 < 0x84 || ((unint64_t v20 = v19 / 0xC, v21 = 12 * v20 + 12, v9 < &a2[v21]) ? (v22 = &v9[v21] > a2) : (v22 = 0), v22))
    {
      unint64_t v25 = v9;
      unint64_t v26 = a2;
    }
    else
    {
      unint64_t v23 = v20 + 1;
      uint64_t v24 = (v20 + 1) & 0x3FFFFFFFFFFFFFF8;
      unint64_t v25 = &v9[12 * v24];
      unint64_t v26 = &a2[12 * v24];
      uint64_t v27 = v24;
      do
      {
        long long v28 = *((_OWORD *)a2 + 1);
        long long v30 = *((_OWORD *)a2 + 4);
        long long v29 = *((_OWORD *)a2 + 5);
        long long v31 = *((_OWORD *)a2 + 2);
        long long v32 = *((_OWORD *)a2 + 3);
        *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
        *((_OWORD *)v9 + 1) = v28;
        *((_OWORD *)v9 + 2) = v31;
        *((_OWORD *)v9 + 3) = v32;
        a2 += 96;
        *((_OWORD *)v9 + 4) = v30;
        *((_OWORD *)v9 + 5) = v29;
        v9 += 96;
        v27 -= 8;
      }
      while (v27);
      if (v23 == v24) {
        goto LABEL_40;
      }
    }
    do
    {
      *(_DWORD *)unint64_t v25 = *(_DWORD *)v26;
      *((_DWORD *)v25 + 1) = *((_DWORD *)v26 + 1);
      *((_DWORD *)v25 + 2) = *((_DWORD *)v26 + 2);
      v26 += 12;
      v25 += 12;
    }
    while (v26 != v18);
  }
LABEL_40:
  uint64_t v48 = result;
  if (v18 != a3)
  {
    uint64_t v49 = result;
    do
    {
      if (v49)
      {
        uint64_t v50 = *(void *)v18;
        *(_DWORD *)(v49 + 8) = *((_DWORD *)v18 + 2);
        *(void *)uint64_t v49 = v50;
      }
      v18 += 12;
      v49 += 12;
      v48 += 12;
    }
    while (v18 != a3);
  }
  *uint64_t v17 = v48;
  return result;
}

uint64_t *std::vector<GeoCodecsRunningTrackLane,geo::StdAllocator<GeoCodecsRunningTrackLane,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<GeoCodecsRunningTrackLane*,GeoCodecsRunningTrackLane*>(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = *result;
  uint64_t v10 = v8 - *result;
  if (0xAAAAAAAAAAAAAAABLL * (v10 >> 4) >= a4)
  {
    uint64_t v14 = result[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v14 - v9) >> 4) >= a4)
    {
      if (a2 != a3)
      {
        uint64_t v19 = v9 + 8;
        uint64_t v20 = a2 + 8;
        do
        {
          uint64_t v21 = v20 - 8;
          *(unsigned char *)(v19 - 8) = *(unsigned char *)(v20 - 8);
          if (v19 != v20) {
            uint64_t result = (uint64_t *)std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<gm::Matrix<unsigned int,3,1>*,gm::Matrix<unsigned int,3,1>*>(v19, *(char **)v20, *(char **)(v20 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v20 + 8) - *(void *)v20) >> 2));
          }
          *(void *)(v19 + 32) = *(void *)(v20 + 32);
          v19 += 48;
          v9 += 48;
          v20 += 48;
        }
        while (v21 + 48 != a3);
        uint64_t v14 = v7[1];
      }
      while (v14 != v9)
      {
        uint64_t v30 = *(void *)(v14 - 40);
        if (v30)
        {
          *(void *)(v14 - 32) = v30;
          uint64_t result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v14 - 16) + 40))(*(void *)(v14 - 16), v30, *(void *)(v14 - 24) - v30);
        }
        v14 -= 48;
      }
      v7[1] = v9;
    }
    else
    {
      uint64_t v15 = a2 + 16 * ((v14 - v9) >> 4);
      if (v14 != v9)
      {
        uint64_t v16 = v9 + 8;
        uint64_t v17 = a2 + 8;
        do
        {
          uint64_t v18 = v17 - 8;
          *(unsigned char *)(v16 - 8) = *(unsigned char *)(v17 - 8);
          if (v16 != v17) {
            uint64_t result = (uint64_t *)std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<gm::Matrix<unsigned int,3,1>*,gm::Matrix<unsigned int,3,1>*>(v16, *(char **)v17, *(char **)(v17 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v17 + 8) - *(void *)v17) >> 2));
          }
          *(void *)(v16 + 32) = *(void *)(v17 + 32);
          v16 += 48;
          v17 += 48;
        }
        while (v18 + 48 != v15);
        uint64_t v9 = v7[1];
      }
      uint64_t v28 = v9;
      if (v15 != a3)
      {
        uint64_t v29 = 0;
        do
        {
          if (v9 + v29)
          {
            *(unsigned char *)(v9 + v29) = *(unsigned char *)(v15 + v29);
            uint64_t result = std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::vector((uint64_t *)(v9 + v29 + 8), (uint64_t *)(v15 + v29 + 8));
            *(void *)(v9 + v29 + 40) = *(void *)(v15 + v29 + 40);
          }
          v29 += 48;
        }
        while (v15 + v29 != a3);
        uint64_t v28 = v9 + v29;
      }
      v7[1] = v28;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v11 = result[1];
      if (v11 == v9)
      {
        uint64_t v12 = *result;
      }
      else
      {
        do
        {
          uint64_t v13 = *(void *)(v11 - 40);
          if (v13)
          {
            *(void *)(v11 - 32) = v13;
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v11 - 16) + 40))(*(void *)(v11 - 16), v13, *(void *)(v11 - 24) - v13);
          }
          v11 -= 48;
        }
        while (v11 != v9);
        uint64_t v12 = *v7;
        uint64_t v10 = v7[2] - *v7;
      }
      v7[1] = v9;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[3] + 40))(v7[3], v12, v10);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x555555555555555) {
      goto LABEL_49;
    }
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v23 = 2 * v22;
    if (2 * v22 <= a4) {
      uint64_t v23 = a4;
    }
    unint64_t v24 = v22 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v23;
    if (v24 > 0x555555555555555) {
LABEL_49:
    }
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    uint64_t v25 = 6 * v24;
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v7[3] + 16))(v7[3], 48 * v24, 8);
    unint64_t v26 = result;
    *uint64_t v7 = (uint64_t)result;
    v7[1] = (uint64_t)result;
    v7[2] = (uint64_t)&result[v25];
    if (a2 != a3)
    {
      uint64_t v27 = 0;
      do
      {
        if (&v26[v27])
        {
          LOBYTE(v26[v27]) = *(unsigned char *)(a2 + v27 * 8);
          uint64_t result = std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::vector(&v26[v27 + 1], (uint64_t *)(a2 + v27 * 8 + 8));
          v26[v27 + 5] = *(void *)(a2 + v27 * 8 + 40);
        }
        v27 += 6;
      }
      while (a2 + v27 * 8 != a3);
      unint64_t v26 = (uint64_t *)((char *)v26 + v27 * 8);
    }
    v7[1] = (uint64_t)v26;
  }
  return result;
}

void sub_18A46BAA0(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 48)
  {
    uint64_t v5 = v2 + v3;
    uint64_t v6 = *(void *)(v2 + v3 - 40);
    if (v6)
    {
      *(void *)(v5 - 32) = v6;
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v5 - 16) + 40))(*(void *)(v5 - 16), v6, *(void *)(v5 - 24) - v6);
    }
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t **std::__exception_guard_exceptions<std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](uint64_t **a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = **a1;
    if (v3)
    {
      v2[1] = v3;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[3] + 40))(v2[3], v3, v2[2] - v3);
    }
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  uint64_t v13 = a1 + 2;
  uint64_t v10 = operator new(0x50uLL);
  void *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = v10 + 7;
  v10[4] = v10 + 7;
  v10[5] = v10 + 7;
  v10[6] = 2;
  float v14 = (float)(unint64_t)(a1[3] + 1);
  float v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v5 = v3;
    uint64_t v16 = *a1;
    uint64_t v17 = *(void **)(*a1 + 8 * v3);
    if (!v17) {
      goto LABEL_84;
    }
LABEL_72:
    void *v10 = *v17;
LABEL_90:
    *uint64_t v17 = v10;
    goto LABEL_91;
  }
  BOOL v18 = 1;
  if (v7 >= 3) {
    BOOL v18 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v19 = v18 | (2 * v7);
  unint64_t v20 = vcvtps_u32_f32(v14 / v15);
  if (v19 <= v20) {
    size_t prime = v20;
  }
  else {
    size_t prime = v19;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v22 = operator new(8 * prime);
    uint64_t v23 = (void *)*a1;
    *a1 = (uint64_t)v22;
    if (v23) {
      operator delete(v23);
    }
    uint64_t v24 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v24++) = 0;
    while (prime != v24);
    uint64_t v25 = (void *)*v13;
    if (!*v13) {
      goto LABEL_68;
    }
    size_t v26 = v25[1];
    size_t v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v28 = v26 & v27;
      *(void *)(*a1 + 8 * v28) = v13;
      for (uint64_t i = (void *)*v25; *v25; uint64_t i = (void *)*v25)
      {
        size_t v30 = i[1] & v27;
        if (v30 == v28)
        {
          uint64_t v25 = i;
        }
        else if (*(void *)(*a1 + 8 * v30))
        {
          void *v25 = *i;
          uint64_t v31 = 8 * v30;
          *uint64_t i = **(void **)(*a1 + v31);
          **(void **)(*a1 + v31) = i;
        }
        else
        {
          *(void *)(*a1 + 8 * v30) = v25;
          uint64_t v25 = i;
          size_t v28 = v30;
        }
      }
      goto LABEL_68;
    }
    if (v26 >= prime) {
      v26 %= prime;
    }
    *(void *)(*a1 + 8 * v26) = v13;
    uint64_t v35 = (void *)*v25;
    if (!*v25)
    {
LABEL_68:
      unint64_t v7 = prime;
      uint64_t v38 = prime - 1;
      if ((prime & (prime - 1)) != 0) {
        goto LABEL_69;
      }
LABEL_83:
      v5 &= v38;
      uint64_t v16 = *a1;
      uint64_t v17 = *(void **)(*a1 + 8 * v5);
      if (!v17) {
        goto LABEL_84;
      }
      goto LABEL_72;
    }
    while (1)
    {
      size_t v37 = v35[1];
      if (v37 >= prime) {
        v37 %= prime;
      }
      if (v37 == v26) {
        goto LABEL_62;
      }
      if (*(void *)(*a1 + 8 * v37))
      {
        void *v25 = *v35;
        uint64_t v36 = 8 * v37;
        void *v35 = **(void **)(*a1 + v36);
        **(void **)(*a1 + v36) = v35;
        uint64_t v35 = v25;
LABEL_62:
        uint64_t v25 = v35;
        uint64_t v35 = (void *)*v35;
        if (!v35) {
          goto LABEL_68;
        }
      }
      else
      {
        *(void *)(*a1 + 8 * v37) = v25;
        uint64_t v25 = v35;
        uint64_t v35 = (void *)*v35;
        size_t v26 = v37;
        if (!v35) {
          goto LABEL_68;
        }
      }
    }
  }
  if (prime < v7)
  {
    unint64_t v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
    {
      unint64_t v32 = std::__next_prime(v32);
    }
    else
    {
      uint64_t v34 = 1 << -(char)__clz(v32 - 1);
      if (v32 >= 2) {
        unint64_t v32 = v34;
      }
    }
    if (prime <= v32) {
      size_t prime = v32;
    }
    if (prime < v7)
    {
      if (!prime)
      {
        uint64_t v39 = (void *)*a1;
        *a1 = 0;
        if (v39) {
          operator delete(v39);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
        uint64_t v38 = -1;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    unint64_t v7 = a1[1];
  }
  uint64_t v38 = v7 - 1;
  if ((v7 & (v7 - 1)) == 0) {
    goto LABEL_83;
  }
LABEL_69:
  if (v7 <= v5) {
    v5 %= v7;
  }
  uint64_t v16 = *a1;
  uint64_t v17 = *(void **)(*a1 + 8 * v5);
  if (v17) {
    goto LABEL_72;
  }
LABEL_84:
  void *v10 = *v13;
  *uint64_t v13 = v10;
  *(void *)(v16 + 8 * v5) = v13;
  if (*v10)
  {
    unint64_t v40 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7) {
        v40 %= v7;
      }
    }
    else
    {
      v40 &= v7 - 1;
    }
    uint64_t v17 = (void *)(*a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++a1[3];
  return v10;
}

void sub_18A46C018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (void *)v2[3];
      if (v3 != (void *)v2[5]) {
        free(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t geo::codec::PBDataReaderObjC::resetBuffer(uint64_t this, const unsigned __int8 *a2, uint64_t a3)
{
  if (a2)
  {
    if (a3)
    {
      uint64_t v3 = this;
      uint64_t v4 = [MEMORY[0x1E4F1C9B8] dataWithBytes:a2 length:a3];
      this = [objc_alloc(MEMORY[0x1E4F94090]) initWithData:v4];
      *(void *)(v3 + 8) = this;
    }
  }
  return this;
}

BOOL geo::codec::PBDataReaderObjC::hasError(geo::codec::PBDataReaderObjC *this)
{
  uint64_t v1 = *((void *)this + 1);
  return !v1 || *(unsigned char *)(v1 + (int)*MEMORY[0x1E4F940C8]) != 0;
}

BOOL geo::codec::PBDataReaderObjC::hasMoreData(geo::codec::PBDataReaderObjC *this)
{
  if ((*(uint64_t (**)(geo::codec::PBDataReaderObjC *))(*(void *)this + 24))(this)) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 1);
  return v2
      && *(void *)(v2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(v2 + (int)*MEMORY[0x1E4F940E0])
      && *(unsigned char *)(v2 + (int)*MEMORY[0x1E4F940C8]) == 0;
}

BOOL geo::codec::PBDataReaderObjC::skip(geo::codec::PBDataReaderObjC *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = (int *)MEMORY[0x1E4F940E8];
  *(void *)(v2 + (int)*MEMORY[0x1E4F940E8]) += a2;
  return ((*(uint64_t (**)(geo::codec::PBDataReaderObjC *))(*(void *)this + 32))(this) & 1) != 0
      || *(void *)(*((void *)this + 1) + *v4) == *(void *)(*((void *)this + 1) + (int)*MEMORY[0x1E4F940E0]);
}

unint64_t geo::codec::PBDataReaderObjC::readString@<X0>(geo::codec::PBDataReaderObjC *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = *((void *)this + 1);
  if (!result || (unint64_t result = PBReaderReadString()) == 0)
  {
    a2[23] = 0;
    *a2 = 0;
    return result;
  }
  uint64_t v4 = (const char *)[(id)result UTF8String];
  unint64_t result = strlen(v4);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint8x8_t v8 = operator new(v6 + 1);
    *((void *)a2 + 1) = v5;
    *((void *)a2 + 2) = v7 | 0x8000000000000000;
    *(void *)a2 = v8;
    a2 = v8;
  }
  else
  {
    a2[23] = result;
    if (!result) {
      goto LABEL_12;
    }
  }
  unint64_t result = (unint64_t)memmove(a2, v4, v5);
LABEL_12:
  a2[v5] = 0;
  return result;
}

uint64_t geo::codec::PBDataReaderObjC::readVarInt(geo::codec::PBDataReaderObjC *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v3 = (int)*MEMORY[0x1E4F940E8];
  unint64_t v4 = *(void *)(v1 + v3);
  size_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (v4 == -1 || (uint64_t v6 = (int *)MEMORY[0x1E4F940E0], v4 >= *(void *)(v1 + (int)*MEMORY[0x1E4F940E0])))
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    unint64_t v8 = v4 + 1;
    char v9 = *(unsigned char *)(*(void *)(v1 + (int)*MEMORY[0x1E4F940B8]) + v4);
    *(void *)(v1 + v3) = v8;
    uint64_t v10 = v9 & 0x7F;
    if ((v9 & 0x80) == 0) {
      goto LABEL_5;
    }
    uint64_t v12 = *v2;
    unint64_t v13 = *(void *)(v1 + v12);
    if (v13 == -1 || v13 >= *(void *)(v1 + *v6)) {
      goto LABEL_9;
    }
    unint64_t v14 = v13 + 1;
    int v15 = *(char *)(*(void *)(v1 + *v7) + v13);
    *(void *)(v1 + v12) = v14;
    v10 |= (unint64_t)(v15 & 0x7F) << 7;
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    uint64_t v16 = *v2;
    unint64_t v17 = *(void *)(v1 + v16);
    if (v17 == -1 || v17 >= *(void *)(v1 + *v6)) {
      goto LABEL_9;
    }
    unint64_t v18 = v17 + 1;
    int v19 = *(char *)(*(void *)(v1 + *v7) + v17);
    *(void *)(v1 + v16) = v18;
    v10 |= (unint64_t)(v19 & 0x7F) << 14;
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    uint64_t v20 = *v2;
    unint64_t v21 = *(void *)(v1 + v20);
    if (v21 == -1 || v21 >= *(void *)(v1 + *v6)) {
      goto LABEL_9;
    }
    unint64_t v22 = v21 + 1;
    int v23 = *(char *)(*(void *)(v1 + *v7) + v21);
    *(void *)(v1 + v20) = v22;
    v10 |= (unint64_t)(v23 & 0x7F) << 21;
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    uint64_t v24 = *v2;
    unint64_t v25 = *(void *)(v1 + v24);
    if (v25 == -1 || v25 >= *(void *)(v1 + *v6)) {
      goto LABEL_9;
    }
    unint64_t v26 = v25 + 1;
    int v27 = *(char *)(*(void *)(v1 + *v7) + v25);
    *(void *)(v1 + v24) = v26;
    v10 |= (unint64_t)(v27 & 0x7F) << 28;
    if ((v27 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    uint64_t v28 = *v2;
    unint64_t v29 = *(void *)(v1 + v28);
    if (v29 == -1 || v29 >= *(void *)(v1 + *v6)) {
      goto LABEL_9;
    }
    unint64_t v30 = v29 + 1;
    int v31 = *(char *)(*(void *)(v1 + *v7) + v29);
    *(void *)(v1 + v28) = v30;
    v10 |= (unint64_t)(v31 & 0x7F) << 35;
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    uint64_t v32 = *v2;
    unint64_t v33 = *(void *)(v1 + v32);
    if (v33 == -1 || v33 >= *(void *)(v1 + *v6)) {
      goto LABEL_9;
    }
    unint64_t v34 = v33 + 1;
    int v35 = *(char *)(*(void *)(v1 + *v7) + v33);
    *(void *)(v1 + v32) = v34;
    v10 |= (unint64_t)(v35 & 0x7F) << 42;
    if ((v35 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    uint64_t v36 = *v2;
    unint64_t v37 = *(void *)(v1 + v36);
    if (v37 == -1 || v37 >= *(void *)(v1 + *v6)) {
      goto LABEL_9;
    }
    unint64_t v38 = v37 + 1;
    int v39 = *(char *)(*(void *)(v1 + *v7) + v37);
    *(void *)(v1 + v36) = v38;
    v10 |= (unint64_t)(v39 & 0x7F) << 49;
    if ((v39 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    uint64_t v40 = *v2;
    unint64_t v41 = *(void *)(v1 + v40);
    if (v41 == -1 || v41 >= *(void *)(v1 + *v6)) {
      goto LABEL_9;
    }
    unint64_t v42 = v41 + 1;
    int v43 = *(char *)(*(void *)(v1 + *v7) + v41);
    *(void *)(v1 + v40) = v42;
    v10 |= (unint64_t)(v43 & 0x7F) << 56;
    if ((v43 & 0x80000000) == 0)
    {
LABEL_5:
      if (*(unsigned char *)(v1 + *v5)) {
        return 0;
      }
      else {
        return v10;
      }
    }
    uint64_t v44 = *v2;
    unint64_t v45 = *(void *)(v1 + v44);
    if (v45 != -1 && v45 < *(void *)(v1 + *v6))
    {
      uint64_t v46 = *(unsigned __int8 *)(*(void *)(v1 + *v7) + v45);
      *(void *)(v1 + v44) = v45 + 1;
      if ((v46 & 0x80) == 0)
      {
        uint64_t v47 = v10 | (v46 << 63);
        if (*(unsigned char *)(v1 + *v5)) {
          return 0;
        }
        else {
          return v47;
        }
      }
      return 0;
    }
  }
LABEL_9:
  *(unsigned char *)(v1 + *v5) = 1;
  if (*(unsigned char *)(v1 + *v5)) {
    return 0;
  }
  else {
    return v10;
  }
}

uint64_t geo::codec::PBDataReaderObjC::buffer(geo::codec::PBDataReaderObjC *this, const void **a2, unint64_t *a3)
{
  if ((*(uint64_t (**)(geo::codec::PBDataReaderObjC *))(*(void *)this + 24))(this)) {
    return 0;
  }
  uint64_t v6 = *((void *)this + 1);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940E8];
  *a2 = (const void *)(*(void *)(v6 + (int)*MEMORY[0x1E4F940B8]) + *(void *)(v6 + (int)*MEMORY[0x1E4F940E8]));
  *a3 = *(void *)(v6 + (int)*MEMORY[0x1E4F940E0]) - *(void *)(v6 + *v7);
  return 1;
}

int BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int blockSize100k, int verbosity, int workFactor)
{
  return MEMORY[0x1F417E308](dest, destLen, source, *(void *)&sourceLen, *(void *)&blockSize100k, *(void *)&verbosity, *(void *)&workFactor);
}

int BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int small, int verbosity)
{
  return MEMORY[0x1F417E310](dest, destLen, source, *(void *)&sourceLen, *(void *)&small, *(void *)&verbosity);
}

int BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len)
{
  return MEMORY[0x1F417E318](bzerror, b, buf, *(void *)&len);
}

void BZ2_bzReadClose(int *bzerror, BZFILE *b)
{
}

BZFILE *__cdecl BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small, void *unused, int nUnused)
{
  return (BZFILE *)MEMORY[0x1F417E328](bzerror, f, *(void *)&verbosity, *(void *)&small, unused, *(void *)&nUnused);
}

const char *__cdecl BZ2_bzerror(BZFILE *b, int *errnum)
{
  return (const char *)MEMORY[0x1F417E348](b, errnum);
}

CCCryptorStatus CCCryptorCreate(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x1F40C94B8](*(void *)&op, *(void *)&alg, *(void *)&options, key, keyLength, iv, cryptorRef);
}

CCCryptorStatus CCCryptorFinal(CCCryptorRef cryptorRef, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1F40C94C8](cryptorRef, dataOut, dataOutAvailable, dataOutMoved);
}

size_t CCCryptorGetOutputLength(CCCryptorRef cryptorRef, size_t inputLength, BOOL final)
{
  return MEMORY[0x1F40C9520](cryptorRef, inputLength, final);
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return MEMORY[0x1F40C9528](cryptorRef);
}

CCCryptorStatus CCCryptorUpdate(CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1F40C9538](cryptorRef, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

void CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
}

CCRNGStatus CCRandomGenerateBytes(void *bytes, size_t count)
{
  return MEMORY[0x1F40C96C8](bytes, count);
}

unsigned __int8 *__cdecl CC_MD5(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9710](data, *(void *)&len, md);
}

int CC_MD5_Final(unsigned __int8 *md, CC_MD5_CTX *c)
{
  return MEMORY[0x1F40C9718](md, c);
}

int CC_MD5_Init(CC_MD5_CTX *c)
{
  return MEMORY[0x1F40C9720](c);
}

int CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9728](c, data, *(void *)&len);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9730](data, *(void *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9770](data, *(void *)&len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9778](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9780](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9788](c, data, *(void *)&len);
}

unsigned __int8 *__cdecl CC_SHA512(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C97B0](data, *(void *)&len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1F40D72D8](arg);
}

void CFBinaryHeapAddValue(CFBinaryHeapRef heap, const void *value)
{
}

CFBinaryHeapRef CFBinaryHeapCreate(CFAllocatorRef allocator, CFIndex capacity, const CFBinaryHeapCallBacks *callBacks, const CFBinaryHeapCompareContext *compareContext)
{
  return (CFBinaryHeapRef)MEMORY[0x1F40D7370](allocator, capacity, callBacks, compareContext);
}

CFIndex CFBinaryHeapGetCount(CFBinaryHeapRef heap)
{
  return MEMORY[0x1F40D7378](heap);
}

const void *__cdecl CFBinaryHeapGetMinimum(CFBinaryHeapRef heap)
{
  return (const void *)MEMORY[0x1F40D7388](heap);
}

void CFBinaryHeapRemoveMinimumValue(CFBinaryHeapRef heap)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFArrayRef CFLocaleCopyPreferredLanguages(void)
{
  return (CFArrayRef)MEMORY[0x1F40D7BD8]();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
}

uint64_t CFPhoneNumberCreate()
{
  return MEMORY[0x1F413F2E0]();
}

uint64_t CFPhoneNumberCreateString()
{
  return MEMORY[0x1F413F2F0]();
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E90](applicationID);
}

Boolean CFPreferencesAppValueIsForced(CFStringRef key, CFStringRef applicationID)
{
  return MEMORY[0x1F40D7E98](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFArrayRef)MEMORY[0x1F40D7EB8](applicationID, userName, hostName);
}

CFDictionaryRef CFPreferencesCopyMultiple(CFArrayRef keysToFetch, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7EC0](keysToFetch, applicationID, userName, hostName);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFPreferencesSetMultiple(CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1F40D7F10](applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1F40D8220](theSet);
}

CFIndex CFSetGetCountOfValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1F40D8228](theSet, value);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

CFTimeZoneRef CFTimeZoneCopySystem(void)
{
  return (CFTimeZoneRef)MEMORY[0x1F40D86F8]();
}

CFTimeInterval CFTimeZoneGetSecondsFromGMT(CFTimeZoneRef tz, CFAbsoluteTime at)
{
  MEMORY[0x1F40D8718](tz, at);
  return result;
}

CFUUIDRef CFUUIDCreateFromString(CFAllocatorRef alloc, CFStringRef uuidStr)
{
  return (CFUUIDRef)MEMORY[0x1F40D8998](alloc, uuidStr);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x1F40D89A0](alloc, *(void *)&bytes.byte0, *(void *)&bytes.byte8);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1F40D89B0](alloc, uuid);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1 = MEMORY[0x1F40D89E8](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x1F40D8A28](allocator, flags, error, dictionary, timeout);
}

FSEventStreamRef FSEventStreamCreate(CFAllocatorRef allocator, FSEventStreamCallback callback, FSEventStreamContext *context, CFArrayRef pathsToWatch, FSEventStreamEventId sinceWhen, CFTimeInterval latency, FSEventStreamCreateFlags flags)
{
  return (FSEventStreamRef)MEMORY[0x1F40DEDC0](allocator, callback, context, pathsToWatch, sinceWhen, *(void *)&flags, latency);
}

void FSEventStreamInvalidate(FSEventStreamRef streamRef)
{
}

void FSEventStreamRelease(FSEventStreamRef streamRef)
{
}

void FSEventStreamSetDispatchQueue(FSEventStreamRef streamRef, dispatch_queue_t q)
{
}

Boolean FSEventStreamStart(FSEventStreamRef streamRef)
{
  return MEMORY[0x1F40DEDF8](streamRef);
}

void FSEventStreamStop(FSEventStreamRef streamRef)
{
}

uint64_t GEOGetCuratedCollectionsLog()
{
  return MEMORY[0x1F411C6E8]();
}

uint64_t GEOGetLaunchLog()
{
  return MEMORY[0x1F411C6F0]();
}

uint64_t GEOGetMonotonicTime()
{
  return MEMORY[0x1F411C6F8]();
}

uint64_t GEOGetOfflineDataAccessLog()
{
  return MEMORY[0x1F411C700]();
}

uint64_t GEOGetOfflineServiceLog()
{
  return MEMORY[0x1F411C708]();
}

uint64_t GEOGetOfflineStateLog()
{
  return MEMORY[0x1F411C710]();
}

uint64_t GEOGetPOIBusynessLog()
{
  return MEMORY[0x1F411C718]();
}

uint64_t GEOGetPlaceCardLayoutLog()
{
  return MEMORY[0x1F411C720]();
}

uint64_t GEOGetPlaceRequestLog()
{
  return MEMORY[0x1F411C728]();
}

uint64_t GEOGetResourceManifestLog()
{
  return MEMORY[0x1F411C730]();
}

uint64_t GEOGetRoutePreloaderLog()
{
  return MEMORY[0x1F411C738]();
}

uint64_t GEOGetSubscriptionsLog()
{
  return MEMORY[0x1F411C740]();
}

uint64_t GEOGetTileLoadingLog()
{
  return MEMORY[0x1F411C748]();
}

uint64_t j__GEOGetUserDefaultsLog()
{
  return MEMORY[0x1F411C750]();
}

uint64_t GEOGetUserSessionLog()
{
  return MEMORY[0x1F411C758]();
}

uint64_t GEOMachAbsoluteTimeGetCurrent()
{
  return MEMORY[0x1F411C760]();
}

uint64_t GEORegisterPListStateCaptureAtFrequency()
{
  return MEMORY[0x1F411C768]();
}

uint64_t GEORegisterPListStateCaptureLegacy()
{
  return MEMORY[0x1F411C770]();
}

uint64_t GEOUnregisterStateCaptureLegacy()
{
  return MEMORY[0x1F411C778]();
}

uint64_t GEOXPCServerIdentifierForType()
{
  return MEMORY[0x1F411C780]();
}

uint64_t GEOXPCServerTypeForIdentifier()
{
  return MEMORY[0x1F411C788]();
}

IOReturn IOAllowPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return MEMORY[0x1F40E8678](*(void *)&kernelPort, notificationID);
}

IOReturn IOCancelPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return MEMORY[0x1F40E86A0](*(void *)&kernelPort, notificationID);
}

IOReturn IODeregisterForSystemPower(io_object_t *notifier)
{
  return MEMORY[0x1F40E8778](notifier);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

IOReturn IOPMAssertionCreateWithDescription(CFStringRef AssertionType, CFStringRef Name, CFStringRef Details, CFStringRef HumanReadableReason, CFStringRef LocalizationBundlePath, CFTimeInterval Timeout, CFStringRef TimeoutAction, IOPMAssertionID *AssertionID)
{
  return MEMORY[0x1F40E8F70](AssertionType, Name, Details, HumanReadableReason, LocalizationBundlePath, TimeoutAction, AssertionID, Timeout);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return MEMORY[0x1F40E8FA8](*(void *)&AssertionID);
}

uint64_t IOPSDrawingUnlimitedPower()
{
  return MEMORY[0x1F40E9100]();
}

uint64_t IOPSGetPercentRemaining()
{
  return MEMORY[0x1F40E9110]();
}

io_connect_t IORegisterForSystemPower(void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return MEMORY[0x1F40E9148](refcon, thePortRef, callback, notifier);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x1F40E9240](*(void *)&connect);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1F417CE28]();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return MEMORY[0x1F412F958]();
}

uint64_t MKBGetDeviceLockState()
{
  return MEMORY[0x1F412F980]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

uint64_t NSGetNextSearchPathEnumeration()
{
  return MEMORY[0x1F40C99A0]();
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E7110]();
}

void NSLog(NSString *format, ...)
{
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1F40E7258](aSelectorName);
}

uint64_t NSStartSearchPathEnumerationPrivate()
{
  return MEMORY[0x1F40C99A8]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1F40E72A0](range.location, range.length);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E72C8]();
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E72E0](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

uint64_t PBDataWriterPlaceMark()
{
  return MEMORY[0x1F4147180]();
}

uint64_t PBDataWriterRecallMark()
{
  return MEMORY[0x1F4147188]();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x1F4147190]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1F41471B0]();
}

uint64_t PBDataWriterWriteDoubleField()
{
  return MEMORY[0x1F41471C0]();
}

uint64_t PBDataWriterWriteFloatField()
{
  return MEMORY[0x1F41471D8]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1F41471E0]();
}

uint64_t PBDataWriterWriteInt64Field()
{
  return MEMORY[0x1F41471F0]();
}

uint64_t PBDataWriterWriteSfixed32Field()
{
  return MEMORY[0x1F4147200]();
}

uint64_t PBDataWriterWriteSfixed64Field()
{
  return MEMORY[0x1F4147208]();
}

uint64_t PBDataWriterWriteSint32Field()
{
  return MEMORY[0x1F4147210]();
}

uint64_t PBDataWriterWriteSint64Field()
{
  return MEMORY[0x1F4147218]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1F4147220]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1F4147230]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x1F4147240]();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return MEMORY[0x1F4147248]();
}

uint64_t PBHashBytes()
{
  return MEMORY[0x1F4147258]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1F4147268]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1F4147278]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1F4147280]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1F41472A0]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1F41472A8]();
}

uint64_t PBRepeatedBOOLAdd()
{
  return MEMORY[0x1F41472B8]();
}

uint64_t PBRepeatedBOOLClear()
{
  return MEMORY[0x1F41472C0]();
}

uint64_t PBRepeatedBOOLCopy()
{
  return MEMORY[0x1F41472C8]();
}

uint64_t PBRepeatedBOOLHash()
{
  return MEMORY[0x1F41472D0]();
}

uint64_t PBRepeatedBOOLIsEqual()
{
  return MEMORY[0x1F41472D8]();
}

uint64_t PBRepeatedBOOLNSArray()
{
  return MEMORY[0x1F41472E0]();
}

uint64_t PBRepeatedDoubleAdd()
{
  return MEMORY[0x1F41472F0]();
}

uint64_t PBRepeatedDoubleClear()
{
  return MEMORY[0x1F41472F8]();
}

uint64_t PBRepeatedDoubleCopy()
{
  return MEMORY[0x1F4147300]();
}

uint64_t PBRepeatedDoubleHash()
{
  return MEMORY[0x1F4147308]();
}

uint64_t PBRepeatedDoubleIsEqual()
{
  return MEMORY[0x1F4147310]();
}

uint64_t PBRepeatedDoubleNSArray()
{
  return MEMORY[0x1F4147318]();
}

uint64_t PBRepeatedFloatAdd()
{
  return MEMORY[0x1F4147328]();
}

uint64_t PBRepeatedFloatClear()
{
  return MEMORY[0x1F4147330]();
}

uint64_t PBRepeatedFloatCopy()
{
  return MEMORY[0x1F4147338]();
}

uint64_t PBRepeatedFloatHash()
{
  return MEMORY[0x1F4147340]();
}

uint64_t PBRepeatedFloatIsEqual()
{
  return MEMORY[0x1F4147348]();
}

uint64_t PBRepeatedFloatNSArray()
{
  return MEMORY[0x1F4147350]();
}

uint64_t PBRepeatedInt32Add()
{
  return MEMORY[0x1F4147360]();
}

uint64_t PBRepeatedInt32Clear()
{
  return MEMORY[0x1F4147368]();
}

uint64_t PBRepeatedInt32Copy()
{
  return MEMORY[0x1F4147370]();
}

uint64_t PBRepeatedInt32Hash()
{
  return MEMORY[0x1F4147378]();
}

uint64_t PBRepeatedInt32IsEqual()
{
  return MEMORY[0x1F4147380]();
}

uint64_t PBRepeatedInt32NSArray()
{
  return MEMORY[0x1F4147388]();
}

uint64_t PBRepeatedInt64Add()
{
  return MEMORY[0x1F4147398]();
}

uint64_t PBRepeatedInt64Clear()
{
  return MEMORY[0x1F41473A0]();
}

uint64_t PBRepeatedInt64Copy()
{
  return MEMORY[0x1F41473A8]();
}

uint64_t PBRepeatedInt64Hash()
{
  return MEMORY[0x1F41473B0]();
}

uint64_t PBRepeatedInt64IsEqual()
{
  return MEMORY[0x1F41473B8]();
}

uint64_t PBRepeatedInt64NSArray()
{
  return MEMORY[0x1F41473C0]();
}

uint64_t PBRepeatedUInt32Add()
{
  return MEMORY[0x1F41473D0]();
}

uint64_t PBRepeatedUInt32Clear()
{
  return MEMORY[0x1F41473D8]();
}

uint64_t PBRepeatedUInt32Copy()
{
  return MEMORY[0x1F41473E0]();
}

uint64_t PBRepeatedUInt32Hash()
{
  return MEMORY[0x1F41473E8]();
}

uint64_t PBRepeatedUInt32IsEqual()
{
  return MEMORY[0x1F41473F0]();
}

uint64_t PBRepeatedUInt32NSArray()
{
  return MEMORY[0x1F41473F8]();
}

uint64_t PBRepeatedUInt64Add()
{
  return MEMORY[0x1F4147408]();
}

uint64_t PBRepeatedUInt64Clear()
{
  return MEMORY[0x1F4147410]();
}

uint64_t PBRepeatedUInt64Copy()
{
  return MEMORY[0x1F4147418]();
}

uint64_t PBRepeatedUInt64Hash()
{
  return MEMORY[0x1F4147420]();
}

uint64_t PBRepeatedUInt64IsEqual()
{
  return MEMORY[0x1F4147428]();
}

uint64_t PBRepeatedUInt64NSArray()
{
  return MEMORY[0x1F4147430]();
}

uint64_t PBUnknownFieldAdd()
{
  return MEMORY[0x1F4147440]();
}

uint64_t PLLogRegisteredEvent()
{
  return MEMORY[0x1F4145D90]();
}

uint64_t PLShouldLogRegisteredEvent()
{
  return MEMORY[0x1F4145DA8]();
}

uint64_t SecCMSVerifyCopyDataAndAttributes()
{
  return MEMORY[0x1F40F6A98]();
}

CFStringRef SecCopyErrorMessageString(OSStatus status, void *reserved)
{
  return (CFStringRef)MEMORY[0x1F40F6D68](*(void *)&status, reserved);
}

uint64_t SecPolicyCreateApplePinned()
{
  return MEMORY[0x1F40F7028]();
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return (CFStringRef)MEMORY[0x1F40F7128](task, error);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1F40F7160](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1F40F7168](allocator, token);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x1F40D9438]();
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return MEMORY[0x1F40D9450]();
}

uint64_t _GEOCreateTransaction()
{
  return MEMORY[0x1F411C790]();
}

uint64_t _PNCreateStringByStrippingFormattingAndNotVisiblyAllowable()
{
  return MEMORY[0x1F413F300]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::string::const_reference std::string::at(const std::string *this, std::string::size_type __n)
{
  return (std::string::const_reference)MEMORY[0x1F417E368](this, __n);
}

std::string::size_type std::string::copy(const std::string *this, std::string::value_type *__s, std::string::size_type __n, std::string::size_type __pos)
{
  return MEMORY[0x1F417E370](this, __s, __n, __pos);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1F417E380](this, __c, __pos);
}

std::string::size_type std::string::rfind(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1F417E388](this, __c, __pos);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1F417E3A8]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E450](this, a2);
}

void std::logic_error::~logic_error(std::logic_error *this)
{
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4B8](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1F417E4D0](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string::reference std::string::at(std::string *this, std::string::size_type __n)
{
  return (std::string::reference)MEMORY[0x1F417E598](this, __n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5A0](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C8](this, __str, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E5D0](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5D8](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5E0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E600](this, __pos, __s);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E620](this, __pos, __n1, __s);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1F417E660](this, __str, __pos, __n, __a);
}

void std::string::~string(std::string *this)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1F417E728]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x1F417E730]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1F417E740]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1F417E748]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x1F417E768]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x1F417E778]();
}

{
  return MEMORY[0x1F417E780]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x1F417E788]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1F417E7A0]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1F417E830]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1F417E838]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E878]();
}

{
  return MEMORY[0x1F417E880]();
}

{
  return MEMORY[0x1F417E890]();
}

{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

{
  return MEMORY[0x1F417E8B0]();
}

{
  return MEMORY[0x1F417E8C8]();
}

{
  return MEMORY[0x1F417E8D0]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x1F417E908](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x1F417E918](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1F417EA90](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x1F417EC58]();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1F417EC90]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, long double __val)
{
  return (std::string *)MEMORY[0x1F417EE60](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE90](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE98](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz)
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_call_unexpected(void *a1)
{
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

float __exp10f(float a1)
{
  MEMORY[0x1F40C9B98](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x1F40C9C80](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x1F40C9C88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9D00](*(void *)&a1);
}

uint64_t _geo_isolate_lock()
{
  return MEMORY[0x1F411C798]();
}

uint64_t _geo_isolate_lock_data()
{
  return MEMORY[0x1F411C7A0]();
}

uint64_t _geo_isolate_unlock()
{
  return MEMORY[0x1F411C7A8]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1F40C9F70](dso, description, activity, *(void *)&flags);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

void abort(void)
{
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

long double acos(long double __x)
{
  MEMORY[0x1F40CA330](__x);
  return result;
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1F40CA3C0](*(void *)&__upper_bound);
}

uint64_t archive_entry_filetype()
{
  return MEMORY[0x1F417DFE8]();
}

uint64_t archive_entry_pathname()
{
  return MEMORY[0x1F417E000]();
}

uint64_t archive_entry_pathname_utf8()
{
  return MEMORY[0x1F417E008]();
}

uint64_t archive_entry_set_pathname()
{
  return MEMORY[0x1F417E040]();
}

uint64_t archive_entry_size()
{
  return MEMORY[0x1F417E058]();
}

uint64_t archive_error_string()
{
  return MEMORY[0x1F417E080]();
}

uint64_t archive_read_close()
{
  return MEMORY[0x1F417E098]();
}

uint64_t archive_read_data_block()
{
  return MEMORY[0x1F417E0A8]();
}

uint64_t archive_read_data_skip()
{
  return MEMORY[0x1F417E0B8]();
}

uint64_t archive_read_extract()
{
  return MEMORY[0x1F417E100]();
}

uint64_t archive_read_free()
{
  return MEMORY[0x1F417E110]();
}

uint64_t archive_read_new()
{
  return MEMORY[0x1F417E118]();
}

uint64_t archive_read_next_header()
{
  return MEMORY[0x1F417E120]();
}

uint64_t archive_read_open_filename()
{
  return MEMORY[0x1F417E140]();
}

uint64_t archive_read_open_memory()
{
  return MEMORY[0x1F417E148]();
}

uint64_t archive_read_support_filter_bzip2()
{
  return MEMORY[0x1F417E160]();
}

uint64_t archive_read_support_filter_gzip()
{
  return MEMORY[0x1F417E170]();
}

uint64_t archive_read_support_format_cpio()
{
  return MEMORY[0x1F417E188]();
}

uint64_t archive_read_support_format_tar()
{
  return MEMORY[0x1F417E198]();
}

long double asin(long double __x)
{
  MEMORY[0x1F40CA3D0](__x);
  return result;
}

long double atan(long double __x)
{
  MEMORY[0x1F40CA450](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1F40CA570](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1F40CB400](a1);
}

int j__compress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
{
  return MEMORY[0x1F4182BA8](dest, destLen, source, sourceLen);
}

uLong compressBound(uLong sourceLen)
{
  return MEMORY[0x1F4182BB8](sourceLen);
}

size_t compression_decode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0A0](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(void *)&algorithm);
}

size_t compression_encode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0B0](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(void *)&algorithm);
}

size_t compression_encode_scratch_buffer_size(compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0B8](*(void *)&algorithm);
}

compression_status compression_stream_destroy(compression_stream *stream)
{
  return MEMORY[0x1F417F0C0](stream);
}

compression_status compression_stream_init(compression_stream *stream, compression_stream_operation operation, compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0D0](stream, *(void *)&operation, *(void *)&algorithm);
}

compression_status compression_stream_process(compression_stream *stream, int flags)
{
  return MEMORY[0x1F417F0E0](stream, *(void *)&flags);
}

uint64_t container_system_group_path_for_identifier()
{
  return MEMORY[0x1F40CB7F8]();
}

uint64_t container_system_path_for_identifier()
{
  return MEMORY[0x1F40CB800]();
}

long double cos(long double __x)
{
  MEMORY[0x1F40CB8A8](__x);
  return result;
}

float cosf(float a1)
{
  MEMORY[0x1F40CB8B0](a1);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C8](flags, *(void *)&qos_class, *(void *)&relative_priority, block);
}

uint64_t dispatch_block_create_with_voucher_and_qos_class()
{
  return MEMORY[0x1F40CB9D8]();
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA10](buffer, size, queue, destructor);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_io_barrier(dispatch_io_t channel, dispatch_block_t barrier)
{
}

void dispatch_io_close(dispatch_io_t channel, dispatch_io_close_flags_t flags)
{
}

dispatch_io_t dispatch_io_create_with_path(dispatch_io_type_t type, const char *path, int oflag, mode_t mode, dispatch_queue_t queue, void *cleanup_handler)
{
  return (dispatch_io_t)MEMORY[0x1F40CBAE8](type, path, *(void *)&oflag, mode, queue, cleanup_handler);
}

dispatch_fd_t dispatch_io_get_descriptor(dispatch_io_t channel)
{
  return MEMORY[0x1F40CBAF0](channel);
}

void dispatch_io_write(dispatch_io_t channel, off_t offset, dispatch_data_t data, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA0](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x1F40CBBD8](queue);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

int dup(int a1)
{
  return MEMORY[0x1F40CBDF8](*(void *)&a1);
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

long double exp2(long double __x)
{
  MEMORY[0x1F40CBFE8](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

void free(void *a1)
{
}

int freelocale(locale_t a1)
{
  return MEMORY[0x1F40CC238](a1);
}

int fsctl(const char *a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1F40CC288](a1, a2, a3, *(void *)&a4);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

uint64_t geo_assert_isolated()
{
  return MEMORY[0x1F411C7B0]();
}

uint64_t geo_assert_not_isolated()
{
  return MEMORY[0x1F411C7B8]();
}

uint64_t geo_dispatch_async_qos()
{
  return MEMORY[0x1F411C7C0]();
}

uint64_t geo_dispatch_block_clean_copy()
{
  return MEMORY[0x1F411C7C8]();
}

uint64_t geo_dispatch_queue_create()
{
  return MEMORY[0x1F411C7D0]();
}

uint64_t geo_dispatch_queue_create_with_format()
{
  return MEMORY[0x1F411C7D8]();
}

uint64_t geo_dispatch_queue_create_with_qos()
{
  return MEMORY[0x1F411C7E0]();
}

uint64_t geo_dispatch_queue_create_with_target()
{
  return MEMORY[0x1F411C7E8]();
}

uint64_t geo_dispatch_queue_create_with_workloop_qos()
{
  return MEMORY[0x1F411C7F0]();
}

uint64_t geo_dispatch_timer_create_on_qos()
{
  return MEMORY[0x1F411C7F8]();
}

uint64_t geo_dispatch_timer_create_on_queue()
{
  return MEMORY[0x1F411C800]();
}

uint64_t geo_dispatch_workloop_create()
{
  return MEMORY[0x1F411C808]();
}

uint64_t geo_dispatch_workloop_create_with_format()
{
  return MEMORY[0x1F411C810]();
}

uint64_t geo_dispatch_workloop_create_with_qos()
{
  return MEMORY[0x1F411C818]();
}

uint64_t geo_get_global_operation_queue()
{
  return MEMORY[0x1F411C820]();
}

uint64_t geo_get_global_queue()
{
  return MEMORY[0x1F411C828]();
}

uint64_t geo_get_global_workloop()
{
  return MEMORY[0x1F411C830]();
}

uint64_t geo_isolate_async()
{
  return MEMORY[0x1F411C838]();
}

uint64_t geo_isolate_sync()
{
  return MEMORY[0x1F411C840]();
}

uint64_t geo_isolate_sync_data()
{
  return MEMORY[0x1F411C848]();
}

uint64_t geo_isolater_create()
{
  return MEMORY[0x1F411C850]();
}

uint64_t geo_isolater_create_with_format()
{
  return MEMORY[0x1F411C858]();
}

uint64_t geo_reentrant_isolate_sync()
{
  return MEMORY[0x1F411C860]();
}

uint64_t geo_reentrant_isolater_create()
{
  return MEMORY[0x1F411C868]();
}

uint64_t geo_reentrant_isolater_create_with_format()
{
  return MEMORY[0x1F411C870]();
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1F40CC4C0]();
}

uid_t getuid(void)
{
  return MEMORY[0x1F40CC570]();
}

ssize_t getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1F40CC590](path, name, value, size, *(void *)&position, *(void *)&options);
}

tm *__cdecl gmtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1F40CC5B0](a1, a2);
}

int gzclose(gzFile file)
{
  return MEMORY[0x1F4182C20](file);
}

const char *__cdecl gzerror(gzFile file, int *errnum)
{
  return (const char *)MEMORY[0x1F4182C48](file, errnum);
}

gzFile gzopen(const char *a1, const char *a2)
{
  return (gzFile)MEMORY[0x1F4182C60](a1, a2);
}

int gzread(gzFile file, voidp buf, unsigned int len)
{
  return MEMORY[0x1F4182C78](file, buf, *(void *)&len);
}

kern_return_t host_check_multiuser_mode(host_t host, uint32_t *multiuser_mode)
{
  return MEMORY[0x1F40CC5E8](*(void *)&host, multiuser_mode);
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1F4182CB0](strm, *(void *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1F4182CB8](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x1F4182CC8](strm, *(void *)&windowBits, version, *(void *)&stream_size);
}

long double ldexp(long double __x, int __e)
{
  MEMORY[0x1F40CC800](*(void *)&__e, __x);
  return result;
}

ldiv_t ldiv(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x1F40CC810](a1, a2);
  result.rem = v3;
  result.quot = v2;
  return result;
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x1F40CC880](__x);
  return result;
}

long double log2(long double __x)
{
  MEMORY[0x1F40CC8A8](__x);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1F40CC8F8](*(void *)&a1, a2, *(void *)&a3);
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1F40CC940](*(void *)&error_value);
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CCB08](a1, a2, *(void *)&a3);
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  return (malloc_zone_t *)MEMORY[0x1F40CCB20](start_size, *(void *)&flags);
}

void malloc_destroy_zone(malloc_zone_t *zone)
{
}

void malloc_set_zone_name(malloc_zone_t *zone, const char *name)
{
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl malloc_type_zone_calloc(malloc_zone_t *zone, size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBB8](zone, count, size, type_id);
}

void *__cdecl malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBC0](zone, size, type_id);
}

void *__cdecl malloc_type_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBD8](zone, ptr, size, type_id);
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
}

void malloc_zone_statistics(malloc_zone_t *zone, malloc_statistics_t *stats)
{
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

int mlock(const void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE38](a1, a2);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

long double modf(long double __x, long double *__y)
{
  MEMORY[0x1F40CCE48](__y, __x);
  return result;
}

float modff(float a1, float *a2)
{
  MEMORY[0x1F40CCE50](a2, a1);
  return result;
}

int munlock(const void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE80](a1, a2);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

locale_t newlocale(int a1, const char *a2, locale_t a3)
{
  return (locale_t)MEMORY[0x1F40CCFF0](*(void *)&a1, a2, a3);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1F40CD050](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1F40CD058](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1F40CD088](*(void *)&token, state64);
}

uint64_t nw_activity_activate()
{
  return MEMORY[0x1F40F2870]();
}

uint64_t nw_activity_complete_with_reason()
{
  return MEMORY[0x1F40F2878]();
}

uint64_t nw_activity_create()
{
  return MEMORY[0x1F40F2898]();
}

uint64_t nw_activity_set_parent_activity()
{
  return MEMORY[0x1F40F28E8]();
}

nw_endpoint_t nw_endpoint_create_url(const char *url)
{
  return (nw_endpoint_t)MEMORY[0x1F40F2EC0](url);
}

nw_parameters_t nw_parameters_create(void)
{
  return (nw_parameters_t)MEMORY[0x1F40F3488]();
}

void nw_parameters_prohibit_interface_type(nw_parameters_t parameters, nw_interface_type_t interface_type)
{
}

uint64_t nw_path_create_evaluator_for_endpoint()
{
  return MEMORY[0x1F40F3858]();
}

uint64_t nw_path_evaluator_cancel()
{
  return MEMORY[0x1F40F3878]();
}

uint64_t nw_path_evaluator_copy_path()
{
  return MEMORY[0x1F40F3880]();
}

uint64_t nw_path_evaluator_set_queue()
{
  return MEMORY[0x1F40F38A0]();
}

uint64_t nw_path_evaluator_set_update_handler()
{
  return MEMORY[0x1F40F38B0]();
}

uint64_t nw_path_evaluator_start()
{
  return MEMORY[0x1F40F38B8]();
}

nw_path_status_t nw_path_get_status(nw_path_t path)
{
  return MEMORY[0x1F40F3938](path);
}

BOOL nw_path_is_constrained(nw_path_t path)
{
  return MEMORY[0x1F40F3960](path);
}

BOOL nw_path_is_expensive(nw_path_t path)
{
  return MEMORY[0x1F40F3970](path);
}

BOOL nw_path_uses_interface_type(nw_path_t path, nw_interface_type_t interface_type)
{
  return MEMORY[0x1F40F3A00](path, *(void *)&interface_type);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1F4181718](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1F40CD120](a1);
}

void os_activity_apply(os_activity_t activity, os_block_t block)
{
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_release(void *object)
{
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

uint64_t os_unfair_lock_lock_with_options()
{
  return MEMORY[0x1F40CD5E8]();
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_unfair_recursive_lock_lock_with_options()
{
  return MEMORY[0x1F40CD610]();
}

uint64_t os_unfair_recursive_lock_unlock()
{
  return MEMORY[0x1F40CD628]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CD650]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1F40CD888](*(void *)&pid, buffer, *(void *)&buffersize);
}

int proc_pidpath(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1F40CD8B8](*(void *)&pid, buffer, *(void *)&buffersize);
}

objc_method_description protocol_getMethodDescription(Protocol *p, SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod)
{
  unint64_t v4 = (const char *)MEMORY[0x1F4181B08](p, aSel, isRequiredMethod, isInstanceMethod);
  result.types = v5;
  result.name = v4;
  return result;
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1F40CDA20](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1F40CDA40](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDAE8](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x1F40CDAF0](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDAF8](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB10](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB18](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1F40CDB70](a1, a2);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1F40CDC60](a1);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1F40CDC98](a1, a2);
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x1F40CDDF8]();
}

uint64_t sandbox_extension_issue_file()
{
  return MEMORY[0x1F40CDE00]();
}

uint64_t sandbox_extension_release()
{
  return MEMORY[0x1F40CDE50]();
}

int sched_yield(void)
{
  return MEMORY[0x1F40CDEC8]();
}

int setxattr(const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1F40CDFD8](path, name, value, size, *(void *)&position, *(void *)&options);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return (void (__cdecl *)(int))MEMORY[0x1F40CE030](*(void *)&a1, a2);
}

long double sin(long double __x)
{
  MEMORY[0x1F40CE058](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0A0](a1, a2);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181F90](a1, *(void *)&a2, a3, *(void *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1F4181FA8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1F4181FB0](a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x1F4181FB8](a1, *(void *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1F4181FC0](a1, *(void *)&a2);
}

int sqlite3_bind_parameter_index(sqlite3_stmt *a1, const char *zName)
{
  return MEMORY[0x1F4181FD0](a1, zName);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181FE8](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_bind_zeroblob64(sqlite3_stmt *a1, int a2, sqlite3_uint64 a3)
{
  return MEMORY[0x1F4182010](a1, *(void *)&a2, a3);
}

int sqlite3_blob_close(sqlite3_blob *a1)
{
  return MEMORY[0x1F4182020](a1);
}

int sqlite3_blob_open(sqlite3 *a1, const char *zDb, const char *zTable, const char *zColumn, sqlite3_int64 iRow, int flags, sqlite3_blob **ppBlob)
{
  return MEMORY[0x1F4182028](a1, zDb, zTable, zColumn, iRow, *(void *)&flags, ppBlob);
}

int sqlite3_blob_write(sqlite3_blob *a1, const void *z, int n, int iOffset)
{
  return MEMORY[0x1F4182038](a1, z, *(void *)&n, *(void *)&iOffset);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1F4182060](a1);
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return MEMORY[0x1F4182068](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1F4182070](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F4182078](a1, *(void *)&iCol);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  MEMORY[0x1F4182098](a1, *(void *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A0](a1, *(void *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820A8](a1, *(void *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1F41820C8](a1, *(void *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F41820D8](a1, *(void *)&iCol);
}

int sqlite3_create_function_v2(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *), void (__cdecl *xDestroy)(void *))
{
  return MEMORY[0x1F4182120](db, zFunctionName, *(void *)&nArg, *(void *)&eTextRep, pApp, xFunc, xStep, xFinal);
}

int sqlite3_create_module(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData)
{
  return MEMORY[0x1F4182128](db, zName, p, pClientData);
}

int sqlite3_declare_vtab(sqlite3 *a1, const char *zSQL)
{
  return MEMORY[0x1F4182180](a1, zSQL);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1F4182198](a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1F41821A8](a1, sql, callback, a4, errmsg);
}

int sqlite3_extended_errcode(sqlite3 *db)
{
  return MEMORY[0x1F41821C0](db);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41821D8](pStmt);
}

void sqlite3_free(void *a1)
{
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  return MEMORY[0x1F4182230](a1);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1F4182280](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1F4182290](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41822C0](pStmt);
}

void sqlite3_result_error(sqlite3_context *a1, const char *a2, int a3)
{
}

void sqlite3_result_int(sqlite3_context *a1, int a2)
{
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1F41823B0](a1);
}

void *__cdecl sqlite3_user_data(sqlite3_context *a1)
{
  return (void *)MEMORY[0x1F4182408](a1);
}

double sqlite3_value_double(sqlite3_value *a1)
{
  MEMORY[0x1F4182428](a1);
  return result;
}

const unsigned __int8 *__cdecl sqlite3_value_text(sqlite3_value *a1)
{
  return (const unsigned __int8 *)MEMORY[0x1F4182458](a1);
}

char *__cdecl sqlite3_vmprintf(const char *a1, va_list a2)
{
  return (char *)MEMORY[0x1F4182480](a1, a2);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

int sscanf_l(const char *a1, locale_t a2, const char *a3, ...)
{
  return MEMORY[0x1F40CE0D8](a1, a2, a3);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1F40CE198](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1F40CE208](__s1, __n);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x1F40CE260](a1, a2);
  return result;
}

float strtof(const char *a1, char **a2)
{
  MEMORY[0x1F40CE270](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2C0](__str, __endptr, *(void *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2E0](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2F0](__str, __endptr, *(void *)&__base);
}

uint64_t sysconf(int a1)
{
  return MEMORY[0x1F40CE3B8](*(void *)&a1);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

long double tan(long double __x)
{
  MEMORY[0x1F40CE420](__x);
  return result;
}

float tanf(float a1)
{
  MEMORY[0x1F40CE428](a1);
  return result;
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1F40CE470](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1F40CE588](a1);
}

int uncompress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
{
  return MEMORY[0x1F4182CF8](dest, destLen, source, sourceLen);
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

int utimes(const char *a1, const timeval *a2)
{
  return MEMORY[0x1F40CE620](a1, a2);
}

uint64_t voucher_adopt()
{
  return MEMORY[0x1F40CE708]();
}

uint64_t voucher_copy()
{
  return MEMORY[0x1F40CE710]();
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1F40CE790](__str, __size, __format, a4);
}

ssize_t writev(int a1, const iovec *a2, int a3)
{
  return MEMORY[0x1F40CE938](*(void *)&a1, a2, *(void *)&a3);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEA30](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1F40CEA58](xarray);
}

const void *__cdecl xpc_array_get_data(xpc_object_t xarray, size_t index, size_t *length)
{
  return (const void *)MEMORY[0x1F40CEA68](xarray, index, length);
}

xpc_object_t xpc_array_get_dictionary(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1F40CEA70](xarray, index);
}

const char *__cdecl xpc_array_get_string(xpc_object_t xarray, size_t index)
{
  return (const char *)MEMORY[0x1F40CEA90](xarray, index);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1F40CEAA8](xarray, index);
}

void xpc_array_set_data(xpc_object_t xarray, size_t index, const void *bytes, size_t length)
{
}

void xpc_array_set_string(xpc_object_t xarray, size_t index, const char *string)
{
}

void xpc_array_set_value(xpc_object_t xarray, size_t index, xpc_object_t value)
{
}

void xpc_connection_activate(xpc_connection_t connection)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create(const char *name, dispatch_queue_t targetq)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBA8](name, targetq);
}

xpc_connection_t xpc_connection_create_from_endpoint(xpc_endpoint_t endpoint)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBC0](endpoint);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBD0](name, targetq, flags);
}

uint64_t xpc_connection_get_audit_token()
{
  return MEMORY[0x1F40CEBE8]();
}

void xpc_connection_send_barrier(xpc_connection_t connection, dispatch_block_t barrier)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1F40CEC68](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

uint64_t xpc_connection_set_target_user_session_uid()
{
  return MEMORY[0x1F40CECF0]();
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1F40CED28](object);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1F40CED90](bytes, length);
}

xpc_object_t xpc_data_create_with_dispatch_data(dispatch_data_t ddata)
{
  return (xpc_object_t)MEMORY[0x1F40CEDA0](ddata);
}

size_t xpc_data_get_bytes(xpc_object_t xdata, void *buffer, size_t off, size_t length)
{
  return MEMORY[0x1F40CEDA8](xdata, buffer, off, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1F40CEDB0](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1F40CEDC0](xdata);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1F40CEE08](xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

xpc_object_t xpc_dictionary_create_empty(void)
{
  return (xpc_object_t)MEMORY[0x1F40CEE30]();
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1F40CEE40](original);
}

int xpc_dictionary_dup_fd(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEE50](xdict, key);
}

xpc_object_t xpc_dictionary_get_array(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEE68](xdict, key);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEE80](xdict, key);
}

size_t xpc_dictionary_get_count(xpc_object_t xdict)
{
  return MEMORY[0x1F40CEE88](xdict);
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x1F40CEE98](xdict, key, length);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEEA8](xdict, key);
}

double xpc_dictionary_get_double(xpc_object_t xdict, const char *key)
{
  MEMORY[0x1F40CEEB8](xdict, key);
  return result;
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEC8](xdict, key);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return (xpc_connection_t)MEMORY[0x1F40CEEE0](xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1F40CEEF0](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEF8](xdict, key);
}

const uint8_t *__cdecl xpc_dictionary_get_uuid(xpc_object_t xdict, const char *key)
{
  return (const uint8_t *)MEMORY[0x1F40CEF00](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
}

void xpc_dictionary_set_fd(xpc_object_t xdict, const char *key, int fd)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_uuid(xpc_object_t xdict, const char *key, const unsigned __int8 *uuid)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_object_t xpc_double_create(double value)
{
  return (xpc_object_t)MEMORY[0x1F40CEFE8](value);
}

double xpc_double_get_value(xpc_object_t xdouble)
{
  MEMORY[0x1F40CEFF8](xdouble);
  return result;
}

xpc_endpoint_t xpc_endpoint_create(xpc_connection_t connection)
{
  return (xpc_endpoint_t)MEMORY[0x1F40CF018](connection);
}

int xpc_fd_dup(xpc_object_t xfd)
{
  return MEMORY[0x1F40CF0D0](xfd);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1F40CF188](value);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return MEMORY[0x1F40CF190](xint);
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

uint64_t xpc_strerror()
{
  return MEMORY[0x1F40CF288]();
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1F40CF290](string);
}

size_t xpc_string_get_length(xpc_object_t xstring)
{
  return MEMORY[0x1F40CF2B8](xstring);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x1F40CF2C8](xstring);
}

uint64_t xpc_transaction_exit_clean()
{
  return MEMORY[0x1F40CF2F0]();
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return MEMORY[0x1F40CF330](xuint);
}

uint64_t xpc_user_sessions_enabled()
{
  return MEMORY[0x1F40CF340]();
}

uint64_t xpc_user_sessions_get_foreground_uid()
{
  return MEMORY[0x1F40CF348]();
}