BOOL sub_B38DF0(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= (a1->u32[1] | ((unint64_t)a1->u32[0] << 32))) {
        return 1;
      }
      v3 = a1->i64[0];
      goto LABEL_7;
    case 3:
      v4 = a1->u32[3] | ((unint64_t)a1->u32[2] << 32);
      v5 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
      if (v4 >= (a1->u32[1] | ((unint64_t)a1->u32[0] << 32)))
      {
        if (v5 < v4)
        {
          v11 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v11;
          if ((a1->u32[3] | ((unint64_t)a1->u32[2] << 32)) < (a1->u32[1] | ((unint64_t)a1->u32[0] << 32)))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
            return 1;
          }
        }
      }
      else
      {
        v3 = a1->i64[0];
        if (v5 < v4)
        {
LABEL_7:
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v3;
          return 1;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v3;
        if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) < __ROR8__(v3, 32))
        {
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v3;
          return 1;
        }
      }
      return 1;
    case 4:
      sub_2A9374((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a2[-1].u32[2]);
      return 1;
    case 5:
      sub_2A94B0((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a1[1].u32[2], &a2[-1].u32[2]);
      return 1;
    default:
      v6 = a1 + 1;
      v7 = a1->u32[3] | ((unint64_t)a1->u32[2] << 32);
      v8 = a1->u32[1] | ((unint64_t)a1->u32[0] << 32);
      v9 = a1[1].u32[1] | ((unint64_t)a1[1].u32[0] << 32);
      if (v7 >= v8)
      {
        if (v9 < v7)
        {
          v13 = a1->i64[1];
          v12 = a1[1].i64[0];
          a1->i64[1] = v12;
          a1[1].i64[0] = v13;
          if (__ROR8__(v12, 32) < v8)
          {
            v14 = a1->i64[0];
            a1->i64[0] = v12;
            a1->i64[1] = v14;
          }
        }
      }
      else
      {
        v10 = a1->i64[0];
        if (v9 >= v7)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v10;
          if (v9 >= __ROR8__(v10, 32)) {
            goto LABEL_25;
          }
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v10;
      }
LABEL_25:
      v15 = &a1[1].u32[2];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      v16 = 0;
      v17 = 0;
      break;
  }
  while ((v15[1] | ((unint64_t)*v15 << 32)) >= (v6->u32[1] | ((unint64_t)v6->u32[0] << 32)))
  {
LABEL_34:
    v6 = (int8x16_t *)v15;
    v16 += 8;
    v15 += 2;
    if (v15 == (unsigned int *)a2) {
      return 1;
    }
  }
  v18 = *(void *)v15;
  v19 = __ROR8__(*(void *)v15, 32);
  v20 = v16;
  do
  {
    *(uint64_t *)((char *)&a1[1].i64[1] + v20) = *(uint64_t *)((char *)a1[1].i64 + v20);
    if (v20 == -16)
    {
      a1->i64[0] = v18;
      if (++v17 != 8) {
        goto LABEL_34;
      }
      return v15 + 2 == (unsigned int *)a2;
    }
    v21 = *(unsigned int *)((char *)&a1->u32[3] + v20) | ((unint64_t)*(unsigned int *)((char *)&a1->u32[2] + v20) << 32);
    v20 -= 8;
  }
  while (v19 < v21);
  *(uint64_t *)((char *)&a1[1].i64[1] + v20) = v18;
  if (++v17 != 8) {
    goto LABEL_34;
  }
  return v15 + 2 == (unsigned int *)a2;
}

char *sub_B390E0(uint64_t a1, unint64_t a2)
{
  unint64_t v26 = a2;
  v3 = sub_B37630(a1, a2, 1);
  if (!v3
    || (v4 = &v3[-*(int *)v3], *(unsigned __int16 *)v4 < 9u)
    || (uint64_t v5 = *((unsigned __int16 *)v4 + 4)) == 0
    || (v6 = &v3[v5 + *(unsigned int *)&v3[v5]], v7 = &v6[-*(int *)v6], *(unsigned __int16 *)v7 < 5u)
    || !*((_WORD *)v7 + 2)
    || (v8 = &v6[*((unsigned __int16 *)v7 + 2) + *(unsigned int *)&v6[*((unsigned __int16 *)v7 + 2)]],
        *(_DWORD *)v8 <= HIDWORD(a2)))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_2A746C((unsigned int *)&v26, &v24);
    v19 = std::string::insert(&v24, 0, "Referenced polygon ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v25, " does not exist.");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    uint64_t v28 = v21->__r_.__value_.__r.__words[2];
    long long v27 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = (void *)sub_2F404((uint64_t)exception, &v27);
  }
  v9 = &v8[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v8[4 * HIDWORD(a2) + 4]];
  v10 = &v9[-*(int *)v9];
  if (*(unsigned __int16 *)v10 < 9u) {
    return 0;
  }
  uint64_t v11 = *((unsigned __int16 *)v10 + 4);
  if (!v11) {
    return 0;
  }
  result = 0;
  v13 = (unsigned int *)&v9[v11 + *(unsigned int *)&v9[v11]];
  unsigned int v16 = *v13;
  v15 = v13 + 1;
  uint64_t v14 = v16;
  *((void *)&v27 + 1) = v16;
  uint64_t v28 = 0xF424000000040;
  int v29 = 257;
  *(void *)&long long v27 = v15;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  if (v16 < 0xC) {
    return result;
  }
  unint64_t v17 = *v15;
  if ((int)v17 < 1) {
    return 0;
  }
  if (v14 - 1 >= v17)
  {
    if (sub_3E2ECC((int *)((char *)v15 + v17), (uint64_t *)&v27)) {
      return (char *)v15 + *v15;
    }
    return 0;
  }
  return 0;
}

void sub_B392E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

char *sub_B39364(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          v13 = (uint64_t *)((char *)v13 + v21);
          v19 = (void *)(v5 + v21);
          long long v22 = (_OWORD *)(v5 + 16);
          v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *long long v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    uint64_t v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    uint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    v54 = (char *)operator new(8 * v53);
    uint64_t v31 = &v54[8 * (v53 >> 2)];
    uint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      v55 = &v54[8 * v53];
      operator delete(v30);
      uint64_t v32 = v55;
      v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      v35 = v31 + 8;
      v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  v35 = v31 + 8;
  v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    v39 = v9;
    v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    v39 = v9;
    v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v9[-v41];
    v36 = &v31[-v41];
    v42 = v31 - 16;
    v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    v49 = v9;
    size_t v50 = v47 - v9;
    v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
  }
  v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_B396BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_B396D4()
{
  unk_25DFAE7 = 16641;
  word_25DFAD0 = 65;
  byte_25DFAFF = 1;
  byte_25DFAE9 = 0;
}

uint64_t *sub_B396FC(uint64_t *a1, void *a2, uint64_t a3)
{
  *a1 = sub_3758AC(a2);
  a1[1] = a3;
  return a1;
}

uint64_t sub_B39730(uint64_t result, void *a2)
{
  if (*(void *)(*(void *)result + 11688))
  {
    uint64_t v3 = a2[1];
    uint64_t v4 = a2[2];
    if (v3 != v4)
    {
      unint64_t v5 = (uint64_t *)result;
      do
      {
        sub_B397B4(v5, (uint64_t)a2, v3);
        v3 += 296;
      }
      while (v3 != v4);
    }
    return sub_A0BE34(a2 + 24);
  }
  return result;
}

void sub_B397B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 200);
  uint64_t v4 = *(void *)(a3 + 208);
  if (v3 != v4)
  {
    uint64_t v7 = (uint64_t *)(a2 + 192);
    do
    {
      if (!*(unsigned char *)(v3 + 24))
      {
        uint64_t v8 = *(long long **)v3;
        v9 = *(long long **)(v3 + 8);
        while (v8 != v9)
        {
          sub_9F6FA0((uint64_t)v11, v8);
          uint64_t v10 = sub_B3A3F0(a1, (uint64_t)v11, v11[13], v11[14], v7);
          if (__p)
          {
            unint64_t v17 = __p;
            operator delete(__p);
          }
          if (v14)
          {
            v15 = v14;
            operator delete(v14);
          }
          if (v12)
          {
            v13 = v12;
            operator delete(v12);
          }
          *(unsigned char *)a3 |= v10 != 0;
          uint64_t v8 = (long long *)((char *)v8 + 168);
        }
      }
      v3 += 72;
    }
    while (v3 != v4);
  }
}

void sub_B398A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_B398B4(uint64_t result, uint64_t a2)
{
  if (*(void *)(*(void *)result + 11688))
  {
    v2 = *(void **)(a2 + 48);
    uint64_t v3 = *(void **)(a2 + 56);
    if (v2 != v3)
    {
      uint64_t v4 = (uint64_t *)result;
      do
      {
        uint64_t v5 = v2[9];
        for (uint64_t i = v2[10]; v5 != i; v5 += 60)
          sub_B39A64(v4, v5, *(_DWORD *)(v5 + 48), *(_DWORD *)(v5 + 48), v2 + 28);
        result = sub_A0BE34(v2 + 28);
        v2 += 31;
      }
      while (v2 != v3);
    }
  }
  return result;
}

void *sub_B3994C(void *a1)
{
  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[8];
  if (v4)
  {
    a1[9] = v4;
    operator delete(v4);
  }
  return a1;
}

BOOL sub_B399A0(uint64_t a1, uint64_t a2)
{
  int v4 = sub_491B28(*(void *)(a1 + 8) + 3896);
  sub_C259AC(*(void *)(a1 + 8) + 3896);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(v5 + 4136);
  if (sub_C259C0(v6 + 3896) && *(void *)(v6 + 3944) && (uint64_t v7 = (void *)(v5 + 4136), !sub_A10E20(v7, SHIDWORD(a2))))
  {
    uint64_t v10 = *(void **)(*v7 + 3944);
    uint64_t v11 = a2;
    BOOL v8 = sub_A1E760(v10, &v11) != 0;
  }
  else
  {
    BOOL v8 = 0;
  }
  sub_C259A4(*(void *)(a1 + 8) + 3896, v4);
  return v8;
}

uint64_t sub_B39A64(uint64_t *a1, uint64_t a2, unsigned int a3, int a4, uint64_t *a5)
{
  if (!sub_B399A0((uint64_t)a1, *(void *)(a2 + 28))) {
    return 0;
  }
  int v9 = a3 <= a4 + 1 ? a4 + 1 : a3;
  int v107 = v9;
  if (a4 + 1 <= a3) {
    return 0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v112 = 0;
  v108 = 0;
  do
  {
    uint64_t v12 = (int *)sub_A11094((void *)(a1[1] + 4136), *(void *)(a2 + 28));
    v13 = (unsigned __int16 *)((char *)v12 - *v12);
    unsigned int v14 = *v13;
    if (v14 < 5)
    {
      v15 = 0;
      goto LABEL_13;
    }
    if (v13[2])
    {
      v15 = (char *)v12 + v13[2] + *(unsigned int *)((char *)v12 + v13[2]);
      if (v14 < 9) {
        goto LABEL_13;
      }
    }
    else
    {
      v15 = 0;
      if (v14 < 9) {
        goto LABEL_13;
      }
    }
    uint64_t v89 = v13[4];
    if (v89)
    {
      unint64_t v16 = (unsigned int *)((char *)v12 + v89 + *(unsigned int *)((char *)v12 + v89));
      goto LABEL_14;
    }
LABEL_13:
    unint64_t v16 = 0;
LABEL_14:
    uint64_t v17 = *(void *)&v15[8 * *(unsigned __int8 *)(sub_A10764(v16, a3) + 14) + 4];
    unint64_t v18 = (int *)sub_A11094((void *)(a1[1] + 4136), *(void *)(a2 + 28));
    v19 = (unsigned __int16 *)((char *)v18 - *v18);
    if (*v19 >= 9u && (uint64_t v20 = v19[4]) != 0) {
      uint64_t v21 = (unsigned int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
    }
    else {
      uint64_t v21 = 0;
    }
    v114 = (unsigned int *)v11;
    uint64_t v22 = *(void *)sub_A10764(v21, a3);
    uint64_t v23 = a1[1];
    unint64_t v24 = *(void *)(a2 + 28);
    v119 = (char *)sub_A104E8((void *)(v23 + 4136), v24, a3, *(_DWORD *)(a2 + 36));
    LODWORD(v120) = v25;
    unint64_t v26 = (int *)sub_A11094((void *)(v23 + 4136), v24);
    long long v27 = (unsigned __int16 *)((char *)v26 - *v26);
    if (*v27 >= 9u && (uint64_t v28 = v27[4]) != 0) {
      unint64_t v29 = (unsigned int *)((char *)v26 + v28 + *(unsigned int *)((char *)v26 + v28));
    }
    else {
      unint64_t v29 = 0;
    }
    unsigned int v30 = *(unsigned __int16 *)(sub_A10764(v29, a3) + 12);
    if (*(_DWORD *)(a2 + 40) == -1) {
      int v31 = 0x7FFFFFFF;
    }
    else {
      int v31 = *(_DWORD *)(a2 + 44);
    }
    int v110 = sub_A0FAA0((uint64_t *)(v23 + 4184), (unsigned int *)&v119, v30, v31);
    uint64_t v32 = a1[1];
    unint64_t v33 = *(void *)(a2 + 28);
    v119 = (char *)sub_A104E8((void *)(v32 + 4136), v33, a3, *(_DWORD *)(a2 + 36));
    LODWORD(v120) = v34;
    v35 = (int *)sub_A11094((void *)(v32 + 4136), v33);
    v36 = (unsigned __int16 *)((char *)v35 - *v35);
    if (*v36 >= 9u && (uint64_t v37 = v36[4]) != 0) {
      unint64_t v38 = (unsigned int *)((char *)v35 + v37 + *(unsigned int *)((char *)v35 + v37));
    }
    else {
      unint64_t v38 = 0;
    }
    unsigned int v39 = *(unsigned __int16 *)(sub_A10764(v38, a3) + 12);
    if (*(_DWORD *)(a2 + 40) == -1) {
      int v40 = 0x7FFFFFFF;
    }
    else {
      int v40 = *(_DWORD *)(a2 + 44);
    }
    unsigned int v41 = sub_A0FDF4((uint64_t *)(v32 + 4184), (unsigned int *)&v119, v39, v40);
    unsigned int v42 = v41;
    uint64_t v43 = __ROR8__(v17, 32);
    uint64_t v11 = (char *)v114;
    uint64_t v109 = v22;
    if (v114 != v112 && *((void *)v112 - 2) == v43)
    {
      int v44 = v110;
      *(v112 - 1) = v110;
      if (!a3) {
        goto LABEL_56;
      }
      goto LABEL_38;
    }
    if (v112 < (unsigned int *)v108)
    {
      *(void *)v112 = v43;
      int v44 = v110;
      v112[2] = v41;
      v112[3] = v110;
      v112 += 4;
      if (!a3) {
        goto LABEL_56;
      }
      goto LABEL_38;
    }
    uint64_t v52 = ((char *)v112 - (char *)v114) >> 4;
    unint64_t v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 60) {
      sub_2E00();
    }
    if ((v108 - (char *)v114) >> 3 > v53) {
      unint64_t v53 = (v108 - (char *)v114) >> 3;
    }
    if ((unint64_t)(v108 - (char *)v114) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v54 = v53;
    }
    if (v54 >> 60) {
      sub_188D718();
    }
    v55 = (char *)operator new(16 * v54);
    uint64_t v56 = &v55[16 * v52];
    *(void *)uint64_t v56 = v43;
    *((_DWORD *)v56 + 2) = v42;
    *((_DWORD *)v56 + 3) = v110;
    if (v114 == v112)
    {
      v59 = &v55[16 * v52];
      v108 = &v55[16 * v54];
      v112 = (unsigned int *)(v56 + 16);
      if (v114) {
        goto LABEL_54;
      }
    }
    else
    {
      v57 = &v55[16 * v52];
      v58 = (char *)v112;
      do
      {
        v59 = v57 - 16;
        *((_OWORD *)v57 - 1) = *((_OWORD *)v58 - 1);
        v58 -= 16;
        v57 -= 16;
      }
      while (v58 != (char *)v114);
      v108 = &v55[16 * v54];
      v112 = (unsigned int *)(v56 + 16);
      if (v114) {
LABEL_54:
      }
        operator delete(v114);
    }
    uint64_t v11 = v59;
    int v44 = v110;
    if (!a3)
    {
LABEL_56:
      uint64_t v49 = v43;
      unint64_t v51 = 0;
      unint64_t v50 = 0xFFFFFFFFLL;
      goto LABEL_57;
    }
LABEL_38:
    long long v45 = (int *)sub_A11094((void *)(a1[1] + 4136), *(void *)(a2 + 28));
    uint64_t v46 = (unsigned __int16 *)((char *)v45 - *v45);
    if (*v46 >= 9u && (uint64_t v47 = v46[4]) != 0) {
      int64_t v48 = (unsigned int *)((char *)v45 + v47 + *(unsigned int *)((char *)v45 + v47));
    }
    else {
      int64_t v48 = 0;
    }
    uint64_t v49 = v43;
    unint64_t v50 = __ROR8__(*(void *)sub_A10764(v48, a3 - 1), 32);
    unint64_t v51 = HIDWORD(v50);
LABEL_57:
    v60 = (int *)sub_A11094((void *)(a1[1] + 4136), *(void *)(a2 + 28));
    v61 = (unsigned __int16 *)((char *)v60 - *v60);
    if (*v61 < 9u || (uint64_t v62 = v61[4]) == 0)
    {
      unint64_t v67 = 0;
      unsigned int v111 = a3 + 1;
LABEL_64:
      unint64_t v68 = 0xFFFFFFFFLL;
      goto LABEL_65;
    }
    unsigned int v111 = a3 + 1;
    if (a3 + 1 >= *(int *)((char *)v60 + v62 + *(unsigned int *)((char *)v60 + v62)))
    {
      unint64_t v67 = 0;
      goto LABEL_64;
    }
    v63 = (int *)sub_A11094((void *)(a1[1] + 4136), *(void *)(a2 + 28));
    v64 = (unsigned __int16 *)((char *)v63 - *v63);
    if (*v64 >= 9u && (uint64_t v65 = v64[4]) != 0) {
      v66 = (unsigned int *)((char *)v63 + v65 + *(unsigned int *)((char *)v63 + v65));
    }
    else {
      v66 = 0;
    }
    unint64_t v68 = __ROR8__(*(void *)sub_A10764(v66, v111), 32);
    unint64_t v67 = HIDWORD(v68);
LABEL_65:
    uint64_t v69 = *a1;
    unint64_t v117 = v51 | (v50 << 32);
    unint64_t v118 = __ROR8__(__ROR8__(v109, 32), 32);
    v116[0] = v118;
    v116[1] = v67 | (v68 << 32);
    v120 = 0;
    uint64_t v121 = 0;
    v119 = 0;
    v115 = (unsigned int *)v11;
    sub_912588(v69, v118, 1, v42, v44, 1, __ROR8__(v49, 32), (uint64_t)&v117, (uint64_t)v116, &v119);
    v71 = v119;
    v70 = v120;
    if (v119 == v120)
    {
      if (v119) {
        goto LABEL_104;
      }
      goto LABEL_7;
    }
    do
    {
      BOOL v73 = a3 != *(_DWORD *)(a2 + 48) || v71[24] == 0;
      if (!v73
        || ((int v74 = *(_DWORD *)(a2 + 52), a3 == v74) ? (v75 = v71[23] == 0) : (v75 = 1),
            !v75 || (a3 != v74 ? (BOOL v76 = v71[25] == 0) : (BOOL v76 = 1), !v76)))
      {
        v78 = (unsigned char *)a5[1];
        unint64_t v77 = a5[2];
        if ((unint64_t)v78 < v77)
        {
          *(void *)v78 = *(void *)v71;
          v72 = v78 + 8;
LABEL_69:
          a5[1] = (uint64_t)v72;
          ++v10;
          goto LABEL_70;
        }
        v79 = (unsigned char *)*a5;
        uint64_t v80 = (uint64_t)&v78[-*a5] >> 3;
        unint64_t v81 = v80 + 1;
        if ((unint64_t)(v80 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v82 = v77 - (void)v79;
        if (v82 >> 2 > v81) {
          unint64_t v81 = v82 >> 2;
        }
        if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v83 = v81;
        }
        if (v83)
        {
          if (v83 >> 61) {
            sub_188D718();
          }
          v84 = (char *)operator new(8 * v83);
          uint64_t v85 = (uint64_t)&v84[8 * v80];
          *(void *)uint64_t v85 = *(void *)v71;
          v72 = (unsigned char *)(v85 + 8);
          if (v78 == v79)
          {
LABEL_100:
            *a5 = v85;
            a5[1] = (uint64_t)v72;
            a5[2] = (uint64_t)&v84[8 * v83];
            if (!v78)
            {
LABEL_102:
              uint64_t v11 = (char *)v115;
              goto LABEL_69;
            }
LABEL_101:
            operator delete(v78);
            goto LABEL_102;
          }
        }
        else
        {
          v84 = 0;
          uint64_t v85 = 8 * v80;
          v86 = (void *)(8 * v80);
          void *v86 = *(void *)v71;
          v72 = v86 + 1;
          if (v78 == v79) {
            goto LABEL_100;
          }
        }
        do
        {
          int v87 = *((_DWORD *)v78 - 2);
          v78 -= 8;
          char v88 = v78[4];
          *(_DWORD *)(v85 - 8) = v87;
          v85 -= 8;
          *(unsigned char *)(v85 + 4) = v88;
        }
        while (v78 != v79);
        v78 = (unsigned char *)*a5;
        *a5 = v85;
        a5[1] = (uint64_t)v72;
        a5[2] = (uint64_t)&v84[8 * v83];
        if (!v78) {
          goto LABEL_102;
        }
        goto LABEL_101;
      }
LABEL_70:
      v71 += 28;
    }
    while (v71 != v70);
    v71 = v119;
    if (v119)
    {
LABEL_104:
      v120 = v71;
      operator delete(v71);
    }
LABEL_7:
    a3 = v111;
  }
  while (v111 != v107);
  v91 = v112;
  if (v11 == (char *)v112) {
    goto LABEL_142;
  }
  v92 = (unsigned int *)v11;
  while (2)
  {
    sub_911E78(*a1, v92[1] | ((unint64_t)*v92 << 32), 1, v92[2], v92[3], &v119);
    v93 = v119;
    v94 = v120;
    if (v119 == v120) {
      goto LABEL_140;
    }
    v95 = (char *)a5[1];
    while (2)
    {
      unint64_t v97 = a5[2];
      if ((unint64_t)v95 < v97)
      {
        *(void *)v95 = *(void *)v93;
        uint64_t v96 = (uint64_t)(v95 + 8);
        goto LABEL_121;
      }
      v98 = (char *)*a5;
      uint64_t v99 = (uint64_t)&v95[-*a5] >> 3;
      unint64_t v100 = v99 + 1;
      if ((unint64_t)(v99 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v101 = v97 - (void)v98;
      if (v101 >> 2 > v100) {
        unint64_t v100 = v101 >> 2;
      }
      if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v102 = v100;
      }
      if (v102)
      {
        if (v102 >> 61) {
          sub_188D718();
        }
        v103 = (char *)operator new(8 * v102);
        uint64_t v104 = (uint64_t)&v103[8 * v99];
        *(void *)uint64_t v104 = *(void *)v93;
        uint64_t v96 = v104 + 8;
        if (v95 == v98)
        {
LABEL_137:
          *a5 = v104;
          a5[1] = v96;
          a5[2] = (uint64_t)&v103[8 * v102];
          if (v95) {
            goto LABEL_138;
          }
          goto LABEL_121;
        }
      }
      else
      {
        v103 = 0;
        uint64_t v104 = 8 * v99;
        *(void *)(8 * v99) = *(void *)v93;
        uint64_t v96 = 8 * v99 + 8;
        if (v95 == v98) {
          goto LABEL_137;
        }
      }
      do
      {
        int v105 = *((_DWORD *)v95 - 2);
        v95 -= 8;
        char v106 = v95[4];
        *(_DWORD *)(v104 - 8) = v105;
        v104 -= 8;
        *(unsigned char *)(v104 + 4) = v106;
      }
      while (v95 != v98);
      v95 = (char *)*a5;
      *a5 = v104;
      a5[1] = v96;
      a5[2] = (uint64_t)&v103[8 * v102];
      if (v95) {
LABEL_138:
      }
        operator delete(v95);
LABEL_121:
      a5[1] = v96;
      ++v10;
      v93 += 28;
      v95 = (char *)v96;
      if (v93 != v94) {
        continue;
      }
      break;
    }
    v93 = v119;
    v91 = v112;
LABEL_140:
    uint64_t v11 = (char *)v115;
    if (v93)
    {
      v120 = v93;
      operator delete(v93);
    }
    v92 += 4;
    if (v92 != v91) {
      continue;
    }
    break;
  }
LABEL_142:
  if (v11) {
    operator delete(v11);
  }
  return v10;
}

void sub_B3A320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B3A3F0(uint64_t *a1, uint64_t a2, unsigned int a3, int a4, uint64_t *a5)
{
  if (!sub_B399A0((uint64_t)a1, *(void *)(a2 + 32))) {
    return 0;
  }
  int v9 = a3 <= a4 + 1 ? a4 + 1 : a3;
  int v107 = v9;
  if (a4 + 1 <= a3) {
    return 0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v112 = 0;
  v108 = 0;
  do
  {
    uint64_t v12 = (int *)sub_A11094((void *)(a1[1] + 4136), *(void *)(a2 + 32));
    v13 = (unsigned __int16 *)((char *)v12 - *v12);
    unsigned int v14 = *v13;
    if (v14 < 5)
    {
      v15 = 0;
      goto LABEL_13;
    }
    if (v13[2])
    {
      v15 = (char *)v12 + v13[2] + *(unsigned int *)((char *)v12 + v13[2]);
      if (v14 < 9) {
        goto LABEL_13;
      }
    }
    else
    {
      v15 = 0;
      if (v14 < 9) {
        goto LABEL_13;
      }
    }
    uint64_t v89 = v13[4];
    if (v89)
    {
      unint64_t v16 = (unsigned int *)((char *)v12 + v89 + *(unsigned int *)((char *)v12 + v89));
      goto LABEL_14;
    }
LABEL_13:
    unint64_t v16 = 0;
LABEL_14:
    uint64_t v17 = *(void *)&v15[8 * *(unsigned __int8 *)(sub_A10764(v16, a3) + 14) + 4];
    unint64_t v18 = (int *)sub_A11094((void *)(a1[1] + 4136), *(void *)(a2 + 32));
    v19 = (unsigned __int16 *)((char *)v18 - *v18);
    if (*v19 >= 9u && (uint64_t v20 = v19[4]) != 0) {
      uint64_t v21 = (unsigned int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
    }
    else {
      uint64_t v21 = 0;
    }
    v114 = (unsigned int *)v11;
    uint64_t v22 = *(void *)sub_A10764(v21, a3);
    uint64_t v23 = a1[1];
    unint64_t v24 = *(void *)(a2 + 32);
    v119 = (char *)sub_A104E8((void *)(v23 + 4136), v24, a3, *(_DWORD *)(a2 + 40));
    LODWORD(v120) = v25;
    unint64_t v26 = (int *)sub_A11094((void *)(v23 + 4136), v24);
    long long v27 = (unsigned __int16 *)((char *)v26 - *v26);
    if (*v27 >= 9u && (uint64_t v28 = v27[4]) != 0) {
      unint64_t v29 = (unsigned int *)((char *)v26 + v28 + *(unsigned int *)((char *)v26 + v28));
    }
    else {
      unint64_t v29 = 0;
    }
    unsigned int v30 = *(unsigned __int16 *)(sub_A10764(v29, a3) + 12);
    if (*(_DWORD *)(a2 + 44) == -1) {
      int v31 = 0x7FFFFFFF;
    }
    else {
      int v31 = *(_DWORD *)(a2 + 48);
    }
    int v110 = sub_A0FAA0((uint64_t *)(v23 + 4184), (unsigned int *)&v119, v30, v31);
    uint64_t v32 = a1[1];
    unint64_t v33 = *(void *)(a2 + 32);
    v119 = (char *)sub_A104E8((void *)(v32 + 4136), v33, a3, *(_DWORD *)(a2 + 40));
    LODWORD(v120) = v34;
    v35 = (int *)sub_A11094((void *)(v32 + 4136), v33);
    v36 = (unsigned __int16 *)((char *)v35 - *v35);
    if (*v36 >= 9u && (uint64_t v37 = v36[4]) != 0) {
      unint64_t v38 = (unsigned int *)((char *)v35 + v37 + *(unsigned int *)((char *)v35 + v37));
    }
    else {
      unint64_t v38 = 0;
    }
    unsigned int v39 = *(unsigned __int16 *)(sub_A10764(v38, a3) + 12);
    if (*(_DWORD *)(a2 + 44) == -1) {
      int v40 = 0x7FFFFFFF;
    }
    else {
      int v40 = *(_DWORD *)(a2 + 48);
    }
    unsigned int v41 = sub_A0FDF4((uint64_t *)(v32 + 4184), (unsigned int *)&v119, v39, v40);
    unsigned int v42 = v41;
    uint64_t v43 = __ROR8__(v17, 32);
    uint64_t v11 = (char *)v114;
    uint64_t v109 = v22;
    if (v114 != v112 && *((void *)v112 - 2) == v43)
    {
      int v44 = v110;
      *(v112 - 1) = v110;
      if (!a3) {
        goto LABEL_56;
      }
      goto LABEL_38;
    }
    if (v112 < (unsigned int *)v108)
    {
      *(void *)v112 = v43;
      int v44 = v110;
      v112[2] = v41;
      v112[3] = v110;
      v112 += 4;
      if (!a3) {
        goto LABEL_56;
      }
      goto LABEL_38;
    }
    uint64_t v52 = ((char *)v112 - (char *)v114) >> 4;
    unint64_t v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 60) {
      sub_2E00();
    }
    if ((v108 - (char *)v114) >> 3 > v53) {
      unint64_t v53 = (v108 - (char *)v114) >> 3;
    }
    if ((unint64_t)(v108 - (char *)v114) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v54 = v53;
    }
    if (v54 >> 60) {
      sub_188D718();
    }
    v55 = (char *)operator new(16 * v54);
    uint64_t v56 = &v55[16 * v52];
    *(void *)uint64_t v56 = v43;
    *((_DWORD *)v56 + 2) = v42;
    *((_DWORD *)v56 + 3) = v110;
    if (v114 == v112)
    {
      v59 = &v55[16 * v52];
      v108 = &v55[16 * v54];
      v112 = (unsigned int *)(v56 + 16);
      if (v114) {
        goto LABEL_54;
      }
    }
    else
    {
      v57 = &v55[16 * v52];
      v58 = (char *)v112;
      do
      {
        v59 = v57 - 16;
        *((_OWORD *)v57 - 1) = *((_OWORD *)v58 - 1);
        v58 -= 16;
        v57 -= 16;
      }
      while (v58 != (char *)v114);
      v108 = &v55[16 * v54];
      v112 = (unsigned int *)(v56 + 16);
      if (v114) {
LABEL_54:
      }
        operator delete(v114);
    }
    uint64_t v11 = v59;
    int v44 = v110;
    if (!a3)
    {
LABEL_56:
      uint64_t v49 = v43;
      unint64_t v51 = 0;
      unint64_t v50 = 0xFFFFFFFFLL;
      goto LABEL_57;
    }
LABEL_38:
    long long v45 = (int *)sub_A11094((void *)(a1[1] + 4136), *(void *)(a2 + 32));
    uint64_t v46 = (unsigned __int16 *)((char *)v45 - *v45);
    if (*v46 >= 9u && (uint64_t v47 = v46[4]) != 0) {
      int64_t v48 = (unsigned int *)((char *)v45 + v47 + *(unsigned int *)((char *)v45 + v47));
    }
    else {
      int64_t v48 = 0;
    }
    uint64_t v49 = v43;
    unint64_t v50 = __ROR8__(*(void *)sub_A10764(v48, a3 - 1), 32);
    unint64_t v51 = HIDWORD(v50);
LABEL_57:
    v60 = (int *)sub_A11094((void *)(a1[1] + 4136), *(void *)(a2 + 32));
    v61 = (unsigned __int16 *)((char *)v60 - *v60);
    if (*v61 < 9u || (uint64_t v62 = v61[4]) == 0)
    {
      unint64_t v67 = 0;
      unsigned int v111 = a3 + 1;
LABEL_64:
      unint64_t v68 = 0xFFFFFFFFLL;
      goto LABEL_65;
    }
    unsigned int v111 = a3 + 1;
    if (a3 + 1 >= *(int *)((char *)v60 + v62 + *(unsigned int *)((char *)v60 + v62)))
    {
      unint64_t v67 = 0;
      goto LABEL_64;
    }
    v63 = (int *)sub_A11094((void *)(a1[1] + 4136), *(void *)(a2 + 32));
    v64 = (unsigned __int16 *)((char *)v63 - *v63);
    if (*v64 >= 9u && (uint64_t v65 = v64[4]) != 0) {
      v66 = (unsigned int *)((char *)v63 + v65 + *(unsigned int *)((char *)v63 + v65));
    }
    else {
      v66 = 0;
    }
    unint64_t v68 = __ROR8__(*(void *)sub_A10764(v66, v111), 32);
    unint64_t v67 = HIDWORD(v68);
LABEL_65:
    uint64_t v69 = *a1;
    unint64_t v117 = v51 | (v50 << 32);
    unint64_t v118 = __ROR8__(__ROR8__(v109, 32), 32);
    v116[0] = v118;
    v116[1] = v67 | (v68 << 32);
    v120 = 0;
    uint64_t v121 = 0;
    v119 = 0;
    v115 = (unsigned int *)v11;
    sub_912588(v69, v118, 1, v42, v44, 1, __ROR8__(v49, 32), (uint64_t)&v117, (uint64_t)v116, &v119);
    v71 = v119;
    v70 = v120;
    if (v119 == v120)
    {
      if (v119) {
        goto LABEL_104;
      }
      goto LABEL_7;
    }
    do
    {
      BOOL v73 = a3 != *(_DWORD *)(a2 + 52) || v71[24] == 0;
      if (!v73
        || ((int v74 = *(_DWORD *)(a2 + 56), a3 == v74) ? (v75 = v71[23] == 0) : (v75 = 1),
            !v75 || (a3 != v74 ? (BOOL v76 = v71[25] == 0) : (BOOL v76 = 1), !v76)))
      {
        v78 = (unsigned char *)a5[1];
        unint64_t v77 = a5[2];
        if ((unint64_t)v78 < v77)
        {
          *(void *)v78 = *(void *)v71;
          v72 = v78 + 8;
LABEL_69:
          a5[1] = (uint64_t)v72;
          ++v10;
          goto LABEL_70;
        }
        v79 = (unsigned char *)*a5;
        uint64_t v80 = (uint64_t)&v78[-*a5] >> 3;
        unint64_t v81 = v80 + 1;
        if ((unint64_t)(v80 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v82 = v77 - (void)v79;
        if (v82 >> 2 > v81) {
          unint64_t v81 = v82 >> 2;
        }
        if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v83 = v81;
        }
        if (v83)
        {
          if (v83 >> 61) {
            sub_188D718();
          }
          v84 = (char *)operator new(8 * v83);
          uint64_t v85 = (uint64_t)&v84[8 * v80];
          *(void *)uint64_t v85 = *(void *)v71;
          v72 = (unsigned char *)(v85 + 8);
          if (v78 == v79)
          {
LABEL_100:
            *a5 = v85;
            a5[1] = (uint64_t)v72;
            a5[2] = (uint64_t)&v84[8 * v83];
            if (!v78)
            {
LABEL_102:
              uint64_t v11 = (char *)v115;
              goto LABEL_69;
            }
LABEL_101:
            operator delete(v78);
            goto LABEL_102;
          }
        }
        else
        {
          v84 = 0;
          uint64_t v85 = 8 * v80;
          v86 = (void *)(8 * v80);
          void *v86 = *(void *)v71;
          v72 = v86 + 1;
          if (v78 == v79) {
            goto LABEL_100;
          }
        }
        do
        {
          int v87 = *((_DWORD *)v78 - 2);
          v78 -= 8;
          char v88 = v78[4];
          *(_DWORD *)(v85 - 8) = v87;
          v85 -= 8;
          *(unsigned char *)(v85 + 4) = v88;
        }
        while (v78 != v79);
        v78 = (unsigned char *)*a5;
        *a5 = v85;
        a5[1] = (uint64_t)v72;
        a5[2] = (uint64_t)&v84[8 * v83];
        if (!v78) {
          goto LABEL_102;
        }
        goto LABEL_101;
      }
LABEL_70:
      v71 += 28;
    }
    while (v71 != v70);
    v71 = v119;
    if (v119)
    {
LABEL_104:
      v120 = v71;
      operator delete(v71);
    }
LABEL_7:
    a3 = v111;
  }
  while (v111 != v107);
  v91 = v112;
  if (v11 == (char *)v112) {
    goto LABEL_142;
  }
  v92 = (unsigned int *)v11;
  while (2)
  {
    sub_911E78(*a1, v92[1] | ((unint64_t)*v92 << 32), 1, v92[2], v92[3], &v119);
    v93 = v119;
    v94 = v120;
    if (v119 == v120) {
      goto LABEL_140;
    }
    v95 = (char *)a5[1];
    while (2)
    {
      unint64_t v97 = a5[2];
      if ((unint64_t)v95 < v97)
      {
        *(void *)v95 = *(void *)v93;
        uint64_t v96 = (uint64_t)(v95 + 8);
        goto LABEL_121;
      }
      v98 = (char *)*a5;
      uint64_t v99 = (uint64_t)&v95[-*a5] >> 3;
      unint64_t v100 = v99 + 1;
      if ((unint64_t)(v99 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v101 = v97 - (void)v98;
      if (v101 >> 2 > v100) {
        unint64_t v100 = v101 >> 2;
      }
      if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v102 = v100;
      }
      if (v102)
      {
        if (v102 >> 61) {
          sub_188D718();
        }
        v103 = (char *)operator new(8 * v102);
        uint64_t v104 = (uint64_t)&v103[8 * v99];
        *(void *)uint64_t v104 = *(void *)v93;
        uint64_t v96 = v104 + 8;
        if (v95 == v98)
        {
LABEL_137:
          *a5 = v104;
          a5[1] = v96;
          a5[2] = (uint64_t)&v103[8 * v102];
          if (v95) {
            goto LABEL_138;
          }
          goto LABEL_121;
        }
      }
      else
      {
        v103 = 0;
        uint64_t v104 = 8 * v99;
        *(void *)(8 * v99) = *(void *)v93;
        uint64_t v96 = 8 * v99 + 8;
        if (v95 == v98) {
          goto LABEL_137;
        }
      }
      do
      {
        int v105 = *((_DWORD *)v95 - 2);
        v95 -= 8;
        char v106 = v95[4];
        *(_DWORD *)(v104 - 8) = v105;
        v104 -= 8;
        *(unsigned char *)(v104 + 4) = v106;
      }
      while (v95 != v98);
      v95 = (char *)*a5;
      *a5 = v104;
      a5[1] = v96;
      a5[2] = (uint64_t)&v103[8 * v102];
      if (v95) {
LABEL_138:
      }
        operator delete(v95);
LABEL_121:
      a5[1] = v96;
      ++v10;
      v93 += 28;
      v95 = (char *)v96;
      if (v93 != v94) {
        continue;
      }
      break;
    }
    v93 = v119;
    v91 = v112;
LABEL_140:
    uint64_t v11 = (char *)v115;
    if (v93)
    {
      v120 = v93;
      operator delete(v93);
    }
    v92 += 4;
    if (v92 != v91) {
      continue;
    }
    break;
  }
LABEL_142:
  if (v11) {
    operator delete(v11);
  }
  return v10;
}

void sub_B3ACAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (v23)
  {
    operator delete(v23);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_B3AD7C()
{
  unk_25DFB17 = 16641;
  word_25DFB00 = 65;
  byte_25DFB2F = 1;
  byte_25DFB19 = 0;
}

BOOL *sub_B3ADA4(BOOL *a1, void *a2)
{
  char v9 = 21;
  strcpy(__p, "add_to_empty_response");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (v9 < 0) {
    operator delete(*(void **)__p);
  }
  *a1 = v4;
  char v9 = 10;
  strcpy(__p, "shift_time");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (v9 < 0) {
    operator delete(*(void **)__p);
  }
  a1[1] = v5;
  char v9 = 11;
  strcpy(__p, "shift_price");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (v9 < 0) {
    operator delete(*(void **)__p);
  }
  a1[2] = v6;
  return a1;
}

void sub_B3AEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL *sub_B3AEDC(BOOL *a1, uint64_t a2, void *a3)
{
  result = sub_B3ADA4(a1, a3);
  *((void *)result + 1) = a2;
  return result;
}

void sub_B3AF08(unsigned char *a1, uint64_t a2, void *a3)
{
  if (*(_DWORD *)(a2 + 16) == 0x7FFFFFFF) {
    return;
  }
  BOOL v6 = a3 + 1;
  if (a3[1] == a3[2] && !*a1) {
    return;
  }
  unsigned int v7 = sub_B3B3C4((uint64_t)a1, a2, (uint64_t)a3);
  long long v86 = xmmword_20EC660;
  int v8 = *(_DWORD *)(a2 + 16);
  int v9 = v8 / 10;
  if (v8 < 0) {
    char v10 = -5;
  }
  else {
    char v10 = 5;
  }
  int v11 = (char)(v10 + v8 % 10);
  unsigned int v12 = v8 / -10 + v7 + (((-103 * v11) >> 15) & 1) + ((-103 * v11) >> 10);
  _ZF = *(unsigned char *)a2 == 0;
  if (*(unsigned char *)a2) {
    unsigned int v14 = v12;
  }
  else {
    unsigned int v14 = v7;
  }
  v85[0] = 0;
  v85[1] = v14;
  unsigned int v15 = v9 + v7 + (((103 * v11) >> 15) & 1) + ((103 * v11) >> 10);
  if (!_ZF) {
    unsigned int v15 = v7;
  }
  v85[2] = v15;
  int v74 = 0;
  BOOL v75 = 0;
  uint64_t v76 = 0;
  v79 = 0;
  uint64_t v80 = 0;
  v78 = 0;
  char v81 = 1;
  unint64_t v82 = 0x8000000080000000;
  __int16 v83 = 0;
  char v84 = 0;
  char v77 = 1;
  BOOL v75 = sub_B3B734((void **)&v74, v85);
  __int16 v42 = 0;
  char v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0x7FFFFFFFFFFFFFFFLL;
  int v16 = 0x7FFFFFFF;
  int v46 = 0x7FFFFFFF;
  __int16 v47 = 0;
  unint64_t v48 = 0x8000000080000000;
  __int16 v49 = 0;
  unint64_t v50 = 0x8000000080000000;
  int v51 = 0x7FFFFFFF;
  __int16 v52 = 0;
  unint64_t v53 = 0x8000000080000000;
  __int16 v54 = 0;
  unint64_t v55 = 0x8000000080000000;
  __int16 v56 = 0;
  unint64_t v57 = 0xFFFFFFFF00000000;
  int v58 = -1;
  uint64_t v59 = 0;
  int v60 = 0x7FFFFFFF;
  long long v61 = 0uLL;
  uint64_t v62 = 0;
  int v63 = 100;
  int v64 = -1;
  __asm { FMOV            V0.2D, #1.0 }
  long long v65 = _Q0;
  long long v66 = _Q0;
  long long v67 = _Q0;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  uint64_t v22 = a3[1];
  uint64_t v21 = a3[2];
  if (v22 == v21 || !a1[2])
  {
    uint64_t v40 = 0;
    long long v39 = 0uLL;
    int v24 = 100;
  }
  else
  {
    for (uint64_t i = v22 + 296; i != v21; i += 296)
    {
      if (*(_DWORD *)(i + 104) < *(_DWORD *)(v22 + 104)) {
        uint64_t v22 = i;
      }
    }
    int v16 = *(_DWORD *)(v22 + 104);
    int v38 = v16;
    if (*(char *)(v22 + 135) < 0)
    {
      sub_4200(&v39, *(void **)(v22 + 112), *(void *)(v22 + 120));
      int v24 = *(_DWORD *)(v22 + 136);
      int v41 = v24;
      int v60 = v38;
      if (SHIBYTE(v62) < 0)
      {
        operator delete((void *)v61);
        int v24 = v41;
      }
      goto LABEL_22;
    }
    long long v39 = *(_OWORD *)(v22 + 112);
    uint64_t v40 = *(void *)(v22 + 128);
    int v24 = *(_DWORD *)(v22 + 136);
  }
  int v60 = v16;
LABEL_22:
  long long v61 = v39;
  uint64_t v62 = v40;
  int v63 = v24;
  uint64_t v25 = *((void *)&v68 + 1);
  if (*((void *)&v68 + 1) >= (unint64_t)v69)
  {
    unint64_t v26 = sub_A4CECC((void ***)&v68, (uint64_t)&v74);
  }
  else
  {
    sub_9F6D1C(*((void **)&v68 + 1), (uint64_t)&v74);
    unint64_t v26 = (char *)(v25 + 72);
  }
  *((void *)&v68 + 1) = v26;
  unint64_t v27 = a3[2];
  if (v27 >= a3[3])
  {
    uint64_t v28 = sub_A4D268(v6, (long long *)&v42);
  }
  else
  {
    sub_9F68D4(a3[2], (long long *)&v42);
    uint64_t v28 = v27 + 296;
    a3[2] = v27 + 296;
  }
  a3[2] = v28;
  if (*((void *)&v72 + 1))
  {
    *(void *)&long long v73 = *((void *)&v72 + 1);
    operator delete(*((void **)&v72 + 1));
  }
  if ((void)v71)
  {
    *((void *)&v71 + 1) = v71;
    operator delete((void *)v71);
  }
  if (*((void *)&v69 + 1))
  {
    *(void *)&long long v70 = *((void *)&v69 + 1);
    operator delete(*((void **)&v69 + 1));
  }
  unint64_t v29 = (void **)v68;
  if ((void)v68)
  {
    unsigned int v30 = (void **)*((void *)&v68 + 1);
    int v31 = (void *)v68;
    if (*((void *)&v68 + 1) != (void)v68)
    {
      do
      {
        v30 -= 9;
        sub_9F5F58((uint64_t)&v69, v30);
      }
      while (v30 != v29);
      int v31 = (void *)v68;
    }
    *((void *)&v68 + 1) = v29;
    operator delete(v31);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  uint64_t v32 = v74;
  if (v74)
  {
    unint64_t v33 = v75;
    int v34 = v74;
    if (v75 != v74)
    {
      do
      {
        if (!*((_DWORD *)v33 - 2))
        {
          v35 = (void *)*((void *)v33 - 6);
          if (v35)
          {
            *((void *)v33 - 5) = v35;
            operator delete(v35);
          }
          v36 = (void *)*((void *)v33 - 10);
          if (v36)
          {
            *((void *)v33 - 9) = v36;
            operator delete(v36);
          }
          uint64_t v37 = (void *)*((void *)v33 - 13);
          if (v37)
          {
            *((void *)v33 - 12) = v37;
            operator delete(v37);
          }
        }
        v33 -= 168;
      }
      while (v33 != v32);
      int v34 = v74;
    }
    BOOL v75 = v32;
    operator delete(v34);
  }
}

void sub_B3B350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_A1D608((uint64_t)va);
  sub_A1D734((void **)(v7 - 184));
  _Unwind_Resume(a1);
}

void sub_B3B3B0(_Unwind_Exception *a1)
{
  sub_A1D734((void **)(v1 - 184));
  _Unwind_Resume(a1);
}

unint64_t sub_B3B3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  uint64_t v5 = *(void *)(a3 + 16);
  if (v4 == v5 || !*(unsigned char *)(a1 + 1)) {
    return *(unsigned int *)(a2 + 4);
  }
  uint64_t v6 = v4 + 296;
  if (v4 + 296 != v5)
  {
    while (1)
    {
      if (*(unsigned char *)a2)
      {
        uint64_t v7 = sub_A2AAF8(v6, 0);
        if (SHIDWORD(v7) <= (int)((unint64_t)sub_A2AAF8(v4, 0) >> 32)) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
      uint64_t v9 = *(void *)(v6 + 200);
      uint64_t v8 = *(void *)(v6 + 208);
      if (v9 == v8)
      {
        int v22 = 0x7FFFFFFF;
        uint64_t v25 = *(void *)(v4 + 200);
        uint64_t v24 = *(void *)(v4 + 208);
        uint64_t v23 = (void *)(v4 + 200);
        if (v25 == v24) {
          goto LABEL_22;
        }
        goto LABEL_29;
      }
      uint64_t v10 = v8 - v9;
      if (v8 - v9 == 72 && *(unsigned char *)(v9 + 24) == 1) {
        break;
      }
      uint64_t v15 = *(void *)(v8 - 72);
      int v12 = *(_DWORD *)(v15 + 160);
      uint64_t v13 = *(void *)(v15 + 20);
      uint64_t v16 = *(void *)(v15 + 8);
      uint64_t v19 = v15 + 4;
      int v17 = *(_DWORD *)(v15 + 4);
      int v18 = *(_DWORD *)(v19 + 4);
      if (!v12)
      {
        int v18 = v13;
        int v17 = v16;
      }
      if (v18 != v17)
      {
        uint64_t v14 = v16;
LABEL_25:
        uint64_t v26 = v14 | (v14 << 32);
        if (v12) {
          int v27 = HIDWORD(v26);
        }
        else {
          int v27 = HIDWORD(v13);
        }
        int v22 = v27;
        uint64_t v25 = *(void *)(v4 + 200);
        uint64_t v24 = *(void *)(v4 + 208);
        uint64_t v23 = (void *)(v4 + 200);
        if (v25 == v24) {
          goto LABEL_22;
        }
        goto LABEL_29;
      }
      uint64_t v20 = sub_A0D24C((void *)(v6 + 200), 0x8E38E38E38E38E39 * (v10 >> 3) - 2);
      unint64_t v21 = *(unsigned int *)(*(void *)v20 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v20 + 8) << 32);
      if (!*(_DWORD *)(*(void *)v20 + 160)) {
        unint64_t v21 = *(void *)(*(void *)v20 + 20);
      }
      int v22 = HIDWORD(v21);
      uint64_t v25 = *(void *)(v4 + 200);
      uint64_t v24 = *(void *)(v4 + 208);
      uint64_t v23 = (void *)(v4 + 200);
      if (v25 == v24)
      {
LABEL_22:
        if (v22 == 0x7FFFFFFF) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
LABEL_29:
      uint64_t v28 = v24 - v25;
      if (v24 - v25 == 72 && *(unsigned char *)(v25 + 24) == 1)
      {
        uint64_t v29 = *(void *)(v24 - 72);
        int v30 = *(_DWORD *)(v29 + 160);
        uint64_t v31 = *(void *)(v29 + 20);
        uint64_t v32 = *(unsigned int *)(v29 + 8);
        goto LABEL_40;
      }
      uint64_t v33 = *(void *)(v24 - 72);
      int v30 = *(_DWORD *)(v33 + 160);
      uint64_t v31 = *(void *)(v33 + 20);
      uint64_t v34 = *(void *)(v33 + 8);
      uint64_t v37 = v33 + 4;
      int v35 = *(_DWORD *)(v33 + 4);
      int v36 = *(_DWORD *)(v37 + 4);
      if (!v30)
      {
        int v36 = v31;
        int v35 = v34;
      }
      if (v36 != v35)
      {
        uint64_t v32 = v34;
LABEL_40:
        uint64_t v40 = v32 | (v32 << 32);
        if (v30) {
          uint64_t v41 = v40;
        }
        else {
          uint64_t v41 = v31;
        }
        if (v22 >= (int)((v41 & 0xFFFFFFFF00000000) >> 32)) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
      uint64_t v38 = sub_A0D24C(v23, 0x8E38E38E38E38E39 * (v28 >> 3) - 2);
      unint64_t v39 = *(unsigned int *)(*(void *)v38 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v38 + 8) << 32);
      if (!*(_DWORD *)(*(void *)v38 + 160)) {
        unint64_t v39 = *(void *)(*(void *)v38 + 20);
      }
      if (v22 >= (int)((v39 & 0xFFFFFFFF00000000) >> 32)) {
        goto LABEL_6;
      }
LABEL_5:
      uint64_t v4 = v6;
LABEL_6:
      v6 += 296;
      if (v6 == v5) {
        goto LABEL_46;
      }
    }
    uint64_t v11 = *(void *)(v8 - 72);
    int v12 = *(_DWORD *)(v11 + 160);
    uint64_t v13 = *(void *)(v11 + 20);
    uint64_t v14 = *(unsigned int *)(v11 + 8);
    goto LABEL_25;
  }
LABEL_46:
  if (!*(unsigned char *)a2) {
    return (unint64_t)sub_A2AAF8(v4, 0) >> 32;
  }
  uint64_t v44 = *(void *)(v4 + 200);
  uint64_t v43 = *(void *)(v4 + 208);
  uint64_t v45 = (void *)(v4 + 200);
  if (v44 != v43)
  {
    uint64_t v46 = v43 - v44;
    if (v43 - v44 == 72 && *(unsigned char *)(v44 + 24) == 1)
    {
      uint64_t v47 = *(void *)(v43 - 72);
      int v48 = *(_DWORD *)(v47 + 160);
      unint64_t v49 = *(void *)(v47 + 20);
      unsigned int v50 = *(_DWORD *)(v47 + 8);
    }
    else
    {
      uint64_t v51 = *(void *)(v43 - 72);
      int v48 = *(_DWORD *)(v51 + 160);
      unint64_t v49 = *(void *)(v51 + 20);
      uint64_t v53 = v51 + 4;
      unsigned int v52 = *(_DWORD *)(v51 + 4);
      unsigned int v50 = *(_DWORD *)(v53 + 4);
      if (v48) {
        int v54 = v50;
      }
      else {
        int v54 = v49;
      }
      if (!v48) {
        unsigned int v52 = v50;
      }
      if (v54 == v52)
      {
        uint64_t v55 = sub_A0D24C(v45, -2 - 0x71C71C71C71C71C7 * (v46 >> 3));
        unint64_t v56 = *(unsigned int *)(*(void *)v55 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v55 + 8) << 32);
        if (!*(_DWORD *)(*(void *)v55 + 160)) {
          unint64_t v56 = *(void *)(*(void *)v55 + 20);
        }
        goto LABEL_65;
      }
    }
    unint64_t v58 = v50 | ((unint64_t)v50 << 32);
    if (v48) {
      unint64_t v56 = v58;
    }
    else {
      unint64_t v56 = v49;
    }
LABEL_65:
    unint64_t v57 = v56 & 0xFFFFFFFF00000000;
    return HIDWORD(v57);
  }
  unint64_t v57 = 0x7FFFFFFF00000000;
  return HIDWORD(v57);
}

char *sub_B3B734(void **a1, _OWORD *a2)
{
  uint64_t v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  unint64_t v5 = 0xCF3CF3CF3CF3CF3DLL * ((v3 - (unsigned char *)*a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * (((unsigned char *)a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x9E79E79E79E79E7ALL * (((unsigned char *)a1[2] - v4) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * (((unsigned char *)a1[2] - v4) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v6 = 0x186186186186186;
  }
  if (v6 > 0x186186186186186) {
    sub_188D718();
  }
  uint64_t v8 = 168 * v6;
  uint64_t v9 = (char *)operator new(168 * v6);
  uint64_t v10 = &v9[168 * v5];
  uint64_t v11 = &v9[v8];
  *(_OWORD *)uint64_t v10 = *a2;
  *(_OWORD *)(v10 + 12) = *(_OWORD *)((char *)a2 + 12);
  *((_DWORD *)v10 + 40) = 1;
  int v12 = v10 + 168;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v3) {
      return v10 + 168;
    }
    goto LABEL_26;
  }
  uint64_t v13 = 0;
  do
  {
    uint64_t v15 = (long long *)&v10[v13 - 168];
    uint64_t v16 = (long long *)&v3[v13 - 168];
    int v17 = *(_DWORD *)&v3[v13 - 8];
    *(_DWORD *)&v10[v13 - 8] = v17;
    if (v17 == 1)
    {
      long long v14 = *v16;
      *(_OWORD *)&v10[v13 - 156] = *(_OWORD *)&v3[v13 - 156];
      long long *v15 = v14;
    }
    else if (!v17)
    {
      sub_9F6FA0((uint64_t)v15, v16);
    }
    v13 -= 168;
  }
  while (&v3[v13] != v4);
  int v18 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  *a1 = &v10[v13];
  a1[1] = v12;
  a1[2] = v11;
  if (v3 != v18)
  {
    do
    {
      if (!*((_DWORD *)v3 - 2))
      {
        uint64_t v19 = (void *)*((void *)v3 - 6);
        if (v19)
        {
          *((void *)v3 - 5) = v19;
          operator delete(v19);
        }
        uint64_t v20 = (void *)*((void *)v3 - 10);
        if (v20)
        {
          *((void *)v3 - 9) = v20;
          operator delete(v20);
        }
        unint64_t v21 = (void *)*((void *)v3 - 13);
        if (v21)
        {
          *((void *)v3 - 12) = v21;
          operator delete(v21);
        }
      }
      v3 -= 168;
    }
    while (v3 != v18);
    uint64_t v3 = v18;
  }
  if (v3) {
LABEL_26:
  }
    operator delete(v3);
  return v10 + 168;
}

void sub_B3B910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 8);
  uint64_t v4 = *(void *)(a3 + 16);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v7 = *(uint64_t **)(v3 + 200);
      unint64_t v6 = *(uint64_t **)(v3 + 208);
      if ((char *)v6 - (char *)v7 != 72 || *((unsigned char *)v7 + 24) != 1) {
        goto LABEL_3;
      }
      if (v7 != v6) {
        break;
      }
      int v13 = 0;
      uint64_t v14 = *v7;
      uint64_t v15 = v7[1];
      if (*v7 != v15) {
        goto LABEL_12;
      }
LABEL_3:
      v3 += 296;
      if (v3 == v4) {
        return;
      }
    }
    uint64_t v8 = (_DWORD *)*(v6 - 9);
    int v9 = v8[40];
    uint64_t v10 = v8 + 5;
    uint64_t v11 = v8 + 2;
    if (!v9) {
      uint64_t v11 = v10;
    }
    int v12 = *v11;
    int v13 = 10 * (v12 - sub_A2AAF8(v3, 0));
    uint64_t v14 = *v7;
    uint64_t v15 = v7[1];
    if (*v7 == v15) {
      goto LABEL_3;
    }
LABEL_12:
    if (*(unsigned char *)a2)
    {
      int v16 = v13 / -10;
      do
      {
        *(_DWORD *)(v14 + 8) = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(v14 + 4) = *(_DWORD *)(a2 + 4) + v16;
        v14 += 168;
      }
      while (v14 != v15);
    }
    else
    {
      int v17 = v13 / 10;
      do
      {
        *(_DWORD *)(v14 + 4) = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(v14 + 8) = *(_DWORD *)(a2 + 4) + v17;
        v14 += 168;
      }
      while (v14 != v15);
    }
    goto LABEL_3;
  }
}

void sub_B3BA58(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a3;
  unint64_t v6 = a4;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_B3BD30(a1, a3);
  sub_B3BED4(a1, v4, (uint64_t *)&__p);
  uint64_t v7 = (int *)__p;
  uint64_t v33 = v42;
  if (__p != v42)
  {
    do
    {
      sub_B3C2D0(a1, a2, *v7, (uint64_t)&v39);
      uint64_t v15 = v4;
      v38[0] = v4;
      v38[1] = a1;
      sub_B3C430((uint64_t *)&v39, (uint64_t)v6, v38);
      uint64_t v13 = *v6;
      uint64_t v11 = v6[1];
      unint64_t v12 = *(void *)(a1 + 16);
      int v16 = (char *)v39;
      if (v39)
      {
        uint64_t v35 = *v6;
        uint64_t v36 = v6[1];
        unint64_t v37 = *(void *)(a1 + 16);
        int v17 = v40;
        uint64_t v10 = v39;
        if (v40 != v39)
        {
          do
          {
            int v18 = (void *)*((void *)v17 - 3);
            if (v18)
            {
              *((void *)v17 - 2) = v18;
              operator delete(v18);
            }
            uint64_t v19 = (void *)*((void *)v17 - 6);
            if (v19)
            {
              *((void *)v17 - 5) = v19;
              operator delete(v19);
            }
            uint64_t v20 = (void *)*((void *)v17 - 9);
            if (v20)
            {
              *((void *)v17 - 8) = v20;
              operator delete(v20);
            }
            unint64_t v21 = (void **)*((void *)v17 - 12);
            if (v21)
            {
              int v22 = (void **)*((void *)v17 - 11);
              uint64_t v23 = (void *)*((void *)v17 - 12);
              if (v22 != v21)
              {
                do
                {
                  uint64_t v25 = *(v22 - 5);
                  if (v25)
                  {
                    *(v22 - 4) = v25;
                    operator delete(v25);
                  }
                  uint64_t v26 = v22 - 9;
                  int v27 = (char *)*(v22 - 9);
                  if (v27)
                  {
                    uint64_t v28 = (char *)*(v22 - 8);
                    uint64_t v24 = *(v22 - 9);
                    if (v28 != v27)
                    {
                      do
                      {
                        if (!*((_DWORD *)v28 - 2))
                        {
                          uint64_t v29 = (void *)*((void *)v28 - 6);
                          if (v29)
                          {
                            *((void *)v28 - 5) = v29;
                            operator delete(v29);
                          }
                          int v30 = (void *)*((void *)v28 - 10);
                          if (v30)
                          {
                            *((void *)v28 - 9) = v30;
                            operator delete(v30);
                          }
                          uint64_t v31 = (void *)*((void *)v28 - 13);
                          if (v31)
                          {
                            *((void *)v28 - 12) = v31;
                            operator delete(v31);
                          }
                        }
                        v28 -= 168;
                      }
                      while (v28 != v27);
                      uint64_t v24 = *v26;
                    }
                    *(v22 - 8) = v27;
                    operator delete(v24);
                  }
                  v22 -= 9;
                }
                while (v26 != v21);
                uint64_t v23 = (void *)*((void *)v17 - 12);
              }
              *((void *)v17 - 11) = v21;
              operator delete(v23);
            }
            if (*(v17 - 161) < 0) {
              operator delete(*((void **)v17 - 23));
            }
            v17 -= 296;
          }
          while (v17 != v16);
          uint64_t v10 = v39;
        }
        uint64_t v40 = v16;
        operator delete(v10);
        unint64_t v6 = a4;
        uint64_t v11 = v36;
        unint64_t v12 = v37;
        uint64_t v13 = v35;
      }
      ++v7;
      BOOL v14 = 0x14C1BACF914C1BADLL * ((v11 - v13) >> 3) >= v12 || v7 == v33;
      uint64_t v4 = v15;
    }
    while (!v14);
  }
  uint64_t v9 = *v6;
  for (uint64_t i = v6[1]; v9 != i; v9 += 296)
  {
    sub_A29F7C(*(void *)(a1 + 32), v9);
    *(unsigned char *)(v9 + 9) = 1;
    *(_DWORD *)(v9 + 12) = *(_DWORD *)(v4 + 12);
  }
  if (__p)
  {
    __int16 v42 = (int *)__p;
    operator delete(__p);
  }
}

void sub_B3BCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_B3BCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_B3BCF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_9F5DBC(a9);
  _Unwind_Resume(a1);
}

void sub_B3BD30(uint64_t a1, uint64_t a2)
{
  sub_A3B6BC(a1 + 40);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  *(_DWORD *)(a1 + 152) = 0;
  sub_A3B6BC(a1 + 160);
  *(void *)(a1 + 256) = *(void *)(a1 + 248);
  *(_DWORD *)(a1 + 272) = 0;
  uint64_t v4 = *(uint64_t **)(a1 + 280);
  uint64_t v5 = *v4;
  for (uint64_t i = v4[1]; i != v5; i -= 48)
  {
    uint64_t v7 = *(void **)(i - 24);
    if (v7)
    {
      *(void *)(i - 16) = v7;
      operator delete(v7);
    }
    uint64_t v8 = *(void **)(i - 48);
    if (v8) {
      operator delete(v8);
    }
  }
  v4[1] = v5;
  uint64_t v9 = *(uint64_t **)(a1 + 296);
  uint64_t v10 = *v9;
  for (uint64_t j = v9[1]; j != v10; j -= 48)
  {
    unint64_t v12 = *(void **)(j - 24);
    if (v12)
    {
      *(void *)(j - 16) = v12;
      operator delete(v12);
    }
    uint64_t v13 = *(void **)(j - 48);
    if (v13) {
      operator delete(v13);
    }
  }
  v9[1] = v10;
  sub_B3EC58(a1, a2);
  uint64_t v15 = *(void *)(a2 + 200);
  uint64_t v14 = *(void *)(a2 + 208);
  if (v15 == v14)
  {
    int v17 = 0;
    goto LABEL_29;
  }
  unint64_t v16 = v14 - v15 - 72;
  if (v16 < 0x48)
  {
    int v17 = 0;
    uint64_t v18 = *(void *)(a2 + 200);
    do
    {
LABEL_26:
      if (!*(unsigned char *)(v18 + 24)) {
        ++v17;
      }
      v18 += 72;
    }
    while (v18 != v14);
    goto LABEL_29;
  }
  int v19 = 0;
  int v20 = 0;
  unint64_t v21 = v16 / 0x48 + 1;
  uint64_t v18 = v15 + 72 * (v21 & 0x7FFFFFFFFFFFFFELL);
  int v22 = (unsigned __int8 *)(v15 + 96);
  uint64_t v23 = v21 & 0x7FFFFFFFFFFFFFELL;
  do
  {
    int v24 = *(v22 - 72);
    int v26 = *v22;
    v22 += 144;
    int v25 = v26;
    if (!v24) {
      ++v19;
    }
    if (!v25) {
      ++v20;
    }
    v23 -= 2;
  }
  while (v23);
  int v17 = v20 + v19;
  if (v21 != (v21 & 0x7FFFFFFFFFFFFFELL)) {
    goto LABEL_26;
  }
LABEL_29:
  *(_DWORD *)(a1 + 320) = v17;
  *(unsigned char *)(a1 + 339) = *(unsigned char *)(a1 + 26);
  *(unsigned char *)(a1 + 345) = 0;
  *(_WORD *)(a1 + 336) = 1;
}

double sub_B3BED4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_725D0((uint64_t)v60);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v7 = *(void *)(a2 + 200);
  uint64_t v6 = *(void *)(a2 + 208);
  uint64_t v8 = (void *)(a2 + 200);
  if (v7 != v6)
  {
    uint64_t v9 = v6 - v7;
    if (v6 - v7 == 72 && *(unsigned char *)(v7 + 24) == 1)
    {
      uint64_t v10 = *(void *)(v6 - 72);
      int v11 = *(_DWORD *)(v10 + 160);
      unint64_t v12 = *(void *)(v10 + 20);
      unsigned int v13 = *(_DWORD *)(v10 + 8);
    }
    else
    {
      uint64_t v14 = *(void *)(v6 - 72);
      int v11 = *(_DWORD *)(v14 + 160);
      unint64_t v12 = *(void *)(v14 + 20);
      uint64_t v16 = v14 + 4;
      unsigned int v15 = *(_DWORD *)(v14 + 4);
      unsigned int v13 = *(_DWORD *)(v16 + 4);
      if (v11) {
        int v17 = v13;
      }
      else {
        int v17 = v12;
      }
      if (!v11) {
        unsigned int v15 = v13;
      }
      if (v17 == v15)
      {
        uint64_t v18 = sub_A0D24C(v8, 0x8E38E38E38E38E39 * (v9 >> 3) - 2);
        unint64_t v19 = *(unsigned int *)(*(void *)v18 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v18 + 8) << 32);
        if (!*(_DWORD *)(*(void *)v18 + 160)) {
          unint64_t v19 = *(void *)(*(void *)v18 + 20);
        }
        goto LABEL_17;
      }
    }
    unint64_t v20 = v13 | ((unint64_t)v13 << 32);
    if (v11) {
      unint64_t v19 = v20;
    }
    else {
      unint64_t v19 = v12;
    }
LABEL_17:
    unint64_t v21 = v19 & 0xFFFFFFFF00000000;
    goto LABEL_19;
  }
  unint64_t v21 = 0x7FFFFFFF00000000;
LABEL_19:
  unint64_t v22 = HIDWORD(v21);
  int v59 = v22;
  if (*(int *)a1 < 0) {
    char v23 = -5;
  }
  else {
    char v23 = 5;
  }
  int v58 = *(_DWORD *)a1 / 10
      + v22
      + (((103 * (char)(v23 + *(_DWORD *)a1 % 10)) >> 15) & 1)
      + ((103 * (char)(v23 + *(_DWORD *)a1 % 10)) >> 10);
  v57[0] = &v58;
  v57[1] = a3;
  v56[0] = a1;
  v56[1] = v57;
  uint64_t v55 = v56;
  v54[0] = a1;
  v54[1] = (uint64_t)&v59;
  v54[2] = (uint64_t)&v55;
  sub_A28D38((uint64_t)&v48, *(void *)(a1 + 32), 0x1FFFFFFFDuLL);
  if (v53) {
    int v24 = v52;
  }
  else {
    int v24 = &v50;
  }
  if ((unint64_t)v49 < *v24)
  {
    do
    {
      sub_B3FCE0(v54, (uint64_t)&v48);
      unint64_t v39 = (unint64_t)v50;
      uint64_t v38 = (void *)((char *)v49 + 12);
      unint64_t v49 = v38;
      if (v38 == v50)
      {
        uint64_t v38 = v51;
        unint64_t v40 = v52[0];
        unint64_t v49 = v51;
        int v37 = 1;
        unsigned __int8 v53 = 1;
        if (*((unsigned char *)v48 + 16))
        {
LABEL_47:
          if (v37) {
            unint64_t v41 = v40;
          }
          else {
            unint64_t v41 = (unint64_t)v50;
          }
          if ((unint64_t)v38 < v41)
          {
            while (1)
            {
              unint64_t v42 = __ROR8__(*v38, 32);
              if (HIDWORD(v42) == 1 && (v42 + 3) < 2) {
                break;
              }
              if (sub_2AB7E4(**((void **)v48 + 515)))
              {
                LOBYTE(v37) = v53;
                uint64_t v38 = v49;
                unint64_t v39 = (unint64_t)v50;
                break;
              }
              unint64_t v39 = (unint64_t)v50;
              uint64_t v38 = (void *)((char *)v49 + 12);
              unint64_t v49 = v38;
              if (v38 == v50)
              {
                uint64_t v38 = v51;
                unint64_t v49 = v51;
                LOBYTE(v37) = 1;
                unsigned __int8 v53 = 1;
                if ((unint64_t)v51 >= v52[0]) {
                  break;
                }
              }
              else
              {
                LOBYTE(v37) = v53;
                if (v53) {
                  uint64_t v44 = v52;
                }
                else {
                  uint64_t v44 = &v50;
                }
                if ((unint64_t)v38 >= *v44) {
                  break;
                }
              }
            }
            unint64_t v40 = v52[0];
          }
        }
      }
      else
      {
        int v37 = v53;
        unint64_t v40 = v52[0];
        if (*((unsigned char *)v48 + 16)) {
          goto LABEL_47;
        }
      }
      if ((_BYTE)v37) {
        unint64_t v39 = v40;
      }
    }
    while ((unint64_t)v38 < v39);
  }
  uint64_t v25 = *a3;
  int v26 = (int *)a3[1];
  unint64_t v27 = 126 - 2 * __clz(((uint64_t)v26 - *a3) >> 2);
  BOOL v28 = v26 == (int *)*a3;
  int v48 = (unsigned int (*)(int *, int *))sub_B3FEF0;
  if (v28) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v27;
  }
  sub_B40974(v25, v26, &v48, v29, 1);
  uint64_t v30 = *a3;
  uint64_t v31 = (char *)a3[1];
  if ((char *)*a3 != v31)
  {
    uint64_t v32 = (char *)(v30 + 4);
    while (v32 != v31)
    {
      int v33 = *((_DWORD *)v32 - 1);
      int v34 = *(_DWORD *)v32;
      v32 += 4;
      if (v33 == v34)
      {
        uint64_t v35 = v32 - 8;
        while (v32 != v31)
        {
          int v36 = v33;
          int v33 = *(_DWORD *)v32;
          if (v36 != *(_DWORD *)v32)
          {
            *((_DWORD *)v35 + 1) = v33;
            v35 += 4;
          }
          v32 += 4;
        }
        uint64_t v45 = v35 + 4;
        int64_t v46 = v31 - (v35 + 4);
        if (v31 != v35 + 4)
        {
          if (v31 != &v45[v46])
          {
            memmove(v35 + 4, &v45[v46], 0);
            uint64_t v30 = *a3;
          }
          uint64_t v31 = v45;
          a3[1] = (uint64_t)v45;
        }
        break;
      }
    }
  }
  *(double *)(a1 + 1064) = *(double *)(a1 + 1064) + (double)(unint64_t)((uint64_t)&v31[-v30] >> 2);
  double result = sub_72688((uint64_t)v60) + *(double *)(a1 + 1048);
  *(double *)(a1 + 1048) = result;
  return result;
}

void sub_B3C2A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_B3C2D0(uint64_t a1@<X0>, _OWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_725D0((uint64_t)v22);
  long long v8 = a2[1];
  v21[0] = *a2;
  v21[1] = v8;
  LOBYTE(v21[0]) = 1;
  DWORD1(v21[0]) = a3;
  sub_B41C34(a1 + 312, v21);
  *(double *)(a1 + 1072) = *(double *)(a1 + 1072) + 1.0;
  sub_C50C4C(a1 + 1080, a1 + 888, (uint64_t)&__p);
  if (v20 < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 1056) = sub_72688((uint64_t)v22) + *(double *)(a1 + 1056);
  *(unsigned char *)(a1 + 336) = 0;
  sub_B41FE8(a1 + 312, (uint64_t)&v13);
  *(_OWORD *)a4 = *(_OWORD *)v14;
  uint64_t v9 = v17;
  *(void *)(a4 + 16) = v15[0];
  v14[1] = 0;
  v15[0] = 0;
  v14[0] = 0;
  if (v9)
  {
    uint64_t v18 = v9;
    operator delete(v9);
  }
  if (v16 < 0)
  {
    operator delete((void *)v15[1]);
    uint64_t v10 = (char *)v14[0];
    if (!v14[0]) {
      return;
    }
  }
  else
  {
    uint64_t v10 = (char *)v14[0];
    if (!v14[0]) {
      return;
    }
  }
  int v11 = (char *)v14[1];
  unint64_t v12 = v10;
  if (v14[1] != v10)
  {
    do
    {
      v11 -= 296;
      sub_9F5E28((uint64_t)v15, (uint64_t)v11);
    }
    while (v11 != v10);
    unint64_t v12 = (char *)v14[0];
  }
  v14[1] = v10;
  operator delete(v12);
}

uint64_t sub_B3C430(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      if (sub_B465A4(a3[1], v4, *a3))
      {
        unint64_t v8 = *(void *)(a2 + 8);
        if (v8 >= *(void *)(a2 + 16))
        {
          uint64_t v7 = sub_A220E4((void **)a2, v4);
        }
        else
        {
          long long v9 = *(_OWORD *)v4;
          long long v10 = *(_OWORD *)(v4 + 32);
          *(_OWORD *)(v8 + 16) = *(_OWORD *)(v4 + 16);
          *(_OWORD *)(v8 + 32) = v10;
          *(_OWORD *)unint64_t v8 = v9;
          long long v11 = *(_OWORD *)(v4 + 48);
          long long v12 = *(_OWORD *)(v4 + 64);
          long long v13 = *(_OWORD *)(v4 + 80);
          *(void *)(v8 + 96) = *(void *)(v4 + 96);
          *(_OWORD *)(v8 + 64) = v12;
          *(_OWORD *)(v8 + 80) = v13;
          *(_OWORD *)(v8 + 48) = v11;
          *(_DWORD *)(v8 + 104) = *(_DWORD *)(v4 + 104);
          long long v14 = *(_OWORD *)(v4 + 112);
          *(void *)(v8 + 128) = *(void *)(v4 + 128);
          *(_OWORD *)(v8 + 112) = v14;
          *(void *)(v4 + 120) = 0;
          *(void *)(v4 + 128) = 0;
          *(void *)(v4 + 112) = 0;
          *(_DWORD *)(v8 + 136) = *(_DWORD *)(v4 + 136);
          long long v15 = *(_OWORD *)(v4 + 144);
          long long v16 = *(_OWORD *)(v4 + 176);
          *(_OWORD *)(v8 + 160) = *(_OWORD *)(v4 + 160);
          *(_OWORD *)(v8 + 176) = v16;
          *(_OWORD *)(v8 + 144) = v15;
          *(void *)(v8 + 192) = *(void *)(v4 + 192);
          *(void *)(v8 + 208) = 0;
          *(void *)(v8 + 216) = 0;
          *(void *)(v8 + 200) = 0;
          *(_OWORD *)(v8 + 200) = *(_OWORD *)(v4 + 200);
          *(void *)(v8 + 216) = *(void *)(v4 + 216);
          *(void *)(v4 + 200) = 0;
          *(void *)(v4 + 208) = 0;
          *(void *)(v4 + 216) = 0;
          *(void *)(v8 + 224) = 0;
          *(void *)(v8 + 232) = 0;
          *(void *)(v8 + 240) = 0;
          *(_OWORD *)(v8 + 224) = *(_OWORD *)(v4 + 224);
          *(void *)(v8 + 240) = *(void *)(v4 + 240);
          *(void *)(v4 + 224) = 0;
          *(void *)(v4 + 232) = 0;
          *(void *)(v4 + 240) = 0;
          *(void *)(v8 + 248) = 0;
          *(void *)(v8 + 256) = 0;
          *(void *)(v8 + 264) = 0;
          *(_OWORD *)(v8 + 248) = *(_OWORD *)(v4 + 248);
          *(void *)(v8 + 264) = *(void *)(v4 + 264);
          *(void *)(v4 + 248) = 0;
          *(void *)(v4 + 256) = 0;
          *(void *)(v4 + 264) = 0;
          *(void *)(v8 + 272) = 0;
          *(void *)(v8 + 280) = 0;
          *(void *)(v8 + 288) = 0;
          *(_OWORD *)(v8 + 272) = *(_OWORD *)(v4 + 272);
          *(void *)(v8 + 288) = *(void *)(v4 + 288);
          *(void *)(v4 + 272) = 0;
          *(void *)(v4 + 280) = 0;
          *(void *)(v4 + 288) = 0;
          uint64_t v7 = (char *)(v8 + 296);
        }
        *(void *)(a2 + 8) = v7;
      }
      v4 += 296;
    }
    while (v4 != v5);
  }
  return a2;
}

void sub_B3C598(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_B3C85C(a1, a3);
  sub_B3CA00(a1, v4, (uint64_t *)&v40);
  uint64_t v7 = (int *)v40;
  uint64_t v32 = v41;
  if (v40 != v41)
  {
    uint64_t v31 = v4;
    do
    {
      sub_B3CD5C(a1, a2, *v7, (uint64_t)&__p);
      v37[0] = v4;
      v37[1] = a1;
      sub_B3CEB8((uint64_t *)&__p, (uint64_t)a4, v37);
      uint64_t v11 = *a4;
      uint64_t v9 = a4[1];
      unint64_t v10 = *(void *)(a1 + 16);
      long long v13 = (char *)__p;
      if (__p)
      {
        uint64_t v34 = *a4;
        uint64_t v35 = a4[1];
        unint64_t v36 = *(void *)(a1 + 16);
        long long v14 = v39;
        unint64_t v8 = __p;
        if (v39 != __p)
        {
          do
          {
            long long v15 = (void *)*((void *)v14 - 3);
            if (v15)
            {
              *((void *)v14 - 2) = v15;
              operator delete(v15);
            }
            long long v16 = (void *)*((void *)v14 - 6);
            if (v16)
            {
              *((void *)v14 - 5) = v16;
              operator delete(v16);
            }
            int v17 = (void *)*((void *)v14 - 9);
            if (v17)
            {
              *((void *)v14 - 8) = v17;
              operator delete(v17);
            }
            uint64_t v18 = (void **)*((void *)v14 - 12);
            if (v18)
            {
              unint64_t v19 = (void **)*((void *)v14 - 11);
              char v20 = (void *)*((void *)v14 - 12);
              if (v19 != v18)
              {
                do
                {
                  unint64_t v22 = *(v19 - 5);
                  if (v22)
                  {
                    *(v19 - 4) = v22;
                    operator delete(v22);
                  }
                  char v23 = v19 - 9;
                  int v24 = (char *)*(v19 - 9);
                  if (v24)
                  {
                    uint64_t v25 = (char *)*(v19 - 8);
                    unint64_t v21 = *(v19 - 9);
                    if (v25 != v24)
                    {
                      do
                      {
                        if (!*((_DWORD *)v25 - 2))
                        {
                          int v26 = (void *)*((void *)v25 - 6);
                          if (v26)
                          {
                            *((void *)v25 - 5) = v26;
                            operator delete(v26);
                          }
                          unint64_t v27 = (void *)*((void *)v25 - 10);
                          if (v27)
                          {
                            *((void *)v25 - 9) = v27;
                            operator delete(v27);
                          }
                          BOOL v28 = (void *)*((void *)v25 - 13);
                          if (v28)
                          {
                            *((void *)v25 - 12) = v28;
                            operator delete(v28);
                          }
                        }
                        v25 -= 168;
                      }
                      while (v25 != v24);
                      unint64_t v21 = *v23;
                    }
                    *(v19 - 8) = v24;
                    operator delete(v21);
                  }
                  v19 -= 9;
                }
                while (v23 != v18);
                char v20 = (void *)*((void *)v14 - 12);
              }
              *((void *)v14 - 11) = v18;
              operator delete(v20);
            }
            if (*(v14 - 161) < 0) {
              operator delete(*((void **)v14 - 23));
            }
            v14 -= 296;
          }
          while (v14 != v13);
          unint64_t v8 = __p;
        }
        unint64_t v39 = v13;
        operator delete(v8);
        uint64_t v4 = v31;
        uint64_t v9 = v35;
        unint64_t v10 = v36;
        uint64_t v11 = v34;
      }
      ++v7;
    }
    while (0x14C1BACF914C1BADLL * ((v9 - v11) >> 3) < v10 && v7 != v32);
  }
  uint64_t v29 = *a4;
  uint64_t v30 = a4[1];
  if (*a4 != v30)
  {
    do
    {
      *(unsigned char *)(v29 + 9) = 1;
      *(_DWORD *)(v29 + 12) = *(_DWORD *)(v4 + 12);
      v29 += 296;
    }
    while (v29 != v30);
  }
  if (v40)
  {
    unint64_t v41 = (int *)v40;
    operator delete(v40);
  }
}

void sub_B3C800(_Unwind_Exception *a1)
{
  sub_9F5DBC(v1);
  _Unwind_Resume(a1);
}

void sub_B3C814(_Unwind_Exception *a1)
{
  sub_9F5DBC(v1);
  _Unwind_Resume(a1);
}

void sub_B3C828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  sub_9F5DBC(&a17);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_9F5DBC(v21);
  _Unwind_Resume(a1);
}

void sub_B3C85C(uint64_t a1, uint64_t a2)
{
  sub_A3B6BC(a1 + 40);
  *(void *)(a1 + 136) = *(void *)(a1 + 128);
  *(_DWORD *)(a1 + 152) = 0;
  sub_A3B6BC(a1 + 160);
  *(void *)(a1 + 256) = *(void *)(a1 + 248);
  *(_DWORD *)(a1 + 272) = 0;
  uint64_t v4 = *(uint64_t **)(a1 + 280);
  uint64_t v5 = *v4;
  for (uint64_t i = v4[1]; i != v5; i -= 48)
  {
    uint64_t v7 = *(void **)(i - 24);
    if (v7)
    {
      *(void *)(i - 16) = v7;
      operator delete(v7);
    }
    unint64_t v8 = *(void **)(i - 48);
    if (v8) {
      operator delete(v8);
    }
  }
  v4[1] = v5;
  uint64_t v9 = *(uint64_t **)(a1 + 296);
  uint64_t v10 = *v9;
  for (uint64_t j = v9[1]; j != v10; j -= 48)
  {
    long long v12 = *(void **)(j - 24);
    if (v12)
    {
      *(void *)(j - 16) = v12;
      operator delete(v12);
    }
    long long v13 = *(void **)(j - 48);
    if (v13) {
      operator delete(v13);
    }
  }
  v9[1] = v10;
  sub_B46ADC(a1, a2);
  uint64_t v15 = *(void *)(a2 + 200);
  uint64_t v14 = *(void *)(a2 + 208);
  if (v15 == v14)
  {
    int v17 = 0;
    goto LABEL_29;
  }
  unint64_t v16 = v14 - v15 - 72;
  if (v16 < 0x48)
  {
    int v17 = 0;
    uint64_t v18 = *(void *)(a2 + 200);
    do
    {
LABEL_26:
      if (!*(unsigned char *)(v18 + 24)) {
        ++v17;
      }
      v18 += 72;
    }
    while (v18 != v14);
    goto LABEL_29;
  }
  int v19 = 0;
  int v20 = 0;
  unint64_t v21 = v16 / 0x48 + 1;
  uint64_t v18 = v15 + 72 * (v21 & 0x7FFFFFFFFFFFFFELL);
  unint64_t v22 = (unsigned __int8 *)(v15 + 96);
  uint64_t v23 = v21 & 0x7FFFFFFFFFFFFFELL;
  do
  {
    int v24 = *(v22 - 72);
    int v26 = *v22;
    v22 += 144;
    int v25 = v26;
    if (!v24) {
      ++v19;
    }
    if (!v25) {
      ++v20;
    }
    v23 -= 2;
  }
  while (v23);
  int v17 = v20 + v19;
  if (v21 != (v21 & 0x7FFFFFFFFFFFFFELL)) {
    goto LABEL_26;
  }
LABEL_29:
  *(_DWORD *)(a1 + 320) = v17;
  *(unsigned char *)(a1 + 339) = *(unsigned char *)(a1 + 26);
  *(unsigned char *)(a1 + 345) = 0;
  *(_WORD *)(a1 + 336) = 1;
}

double sub_B3CA00@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_725D0((uint64_t)v44);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = sub_A2AAF8(a2, 0);
  int v43 = HIDWORD(v6);
  if (*(int *)a1 < 0) {
    char v7 = -5;
  }
  else {
    char v7 = 5;
  }
  unsigned int v42 = *(_DWORD *)a1 / -10
      + HIDWORD(v6)
      + (((-103 * (char)(v7 + *(_DWORD *)a1 % 10)) >> 15) & 1)
      + ((-103 * (char)(v7 + *(_DWORD *)a1 % 10)) >> 10);
  v41[0] = &v42;
  v41[1] = a3;
  v40[0] = a1;
  v40[1] = v41;
  unint64_t v39 = v40;
  v38[0] = a1;
  v38[1] = (uint64_t)&v43;
  uint64_t v38[2] = (uint64_t)&v39;
  sub_A19FA8((uint64_t)&v32, *(void *)(a1 + 32), 0x1FFFFFFFEuLL);
  if (v37) {
    unint64_t v8 = v36;
  }
  else {
    unint64_t v8 = &v34;
  }
  if ((unint64_t)v33 < *v8)
  {
    do
    {
      sub_B4793C(v38, (uint64_t)&v32);
      unint64_t v23 = (unint64_t)v34;
      unint64_t v22 = (void *)((char *)v33 + 12);
      int v33 = v22;
      if (v22 == v34)
      {
        unint64_t v22 = v35;
        unint64_t v24 = v36[0];
        int v33 = v35;
        int v21 = 1;
        unsigned __int8 v37 = 1;
        if (*((unsigned char *)v32 + 16))
        {
LABEL_29:
          if (v21) {
            unint64_t v25 = v24;
          }
          else {
            unint64_t v25 = (unint64_t)v34;
          }
          if ((unint64_t)v22 < v25)
          {
            while (1)
            {
              unint64_t v26 = __ROR8__(*v22, 32);
              if (HIDWORD(v26) == 1 && (v26 + 3) < 2) {
                break;
              }
              if (sub_2AB7E4(**((void **)v32 + 515)))
              {
                LOBYTE(v21) = v37;
                unint64_t v22 = v33;
                unint64_t v23 = (unint64_t)v34;
                break;
              }
              unint64_t v23 = (unint64_t)v34;
              unint64_t v22 = (void *)((char *)v33 + 12);
              int v33 = v22;
              if (v22 == v34)
              {
                unint64_t v22 = v35;
                int v33 = v35;
                LOBYTE(v21) = 1;
                unsigned __int8 v37 = 1;
                if ((unint64_t)v35 >= v36[0]) {
                  break;
                }
              }
              else
              {
                LOBYTE(v21) = v37;
                if (v37) {
                  BOOL v28 = v36;
                }
                else {
                  BOOL v28 = &v34;
                }
                if ((unint64_t)v22 >= *v28) {
                  break;
                }
              }
            }
            unint64_t v24 = v36[0];
          }
        }
      }
      else
      {
        int v21 = v37;
        unint64_t v24 = v36[0];
        if (*((unsigned char *)v32 + 16)) {
          goto LABEL_29;
        }
      }
      if ((_BYTE)v21) {
        unint64_t v23 = v24;
      }
    }
    while ((unint64_t)v22 < v23);
  }
  uint64_t v9 = *a3;
  uint64_t v10 = (int *)a3[1];
  unint64_t v11 = 126 - 2 * __clz(((uint64_t)v10 - *a3) >> 2);
  BOOL v12 = v10 == (int *)*a3;
  uint64_t v32 = (unsigned int (*)(int *, int *))sub_B4561C;
  if (v12) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v11;
  }
  sub_B40974(v9, v10, &v32, v13, 1);
  uint64_t v14 = *a3;
  uint64_t v15 = (char *)a3[1];
  if ((char *)*a3 != v15)
  {
    unint64_t v16 = (char *)(v14 + 4);
    while (v16 != v15)
    {
      int v17 = *((_DWORD *)v16 - 1);
      int v18 = *(_DWORD *)v16;
      v16 += 4;
      if (v17 == v18)
      {
        int v19 = v16 - 8;
        while (v16 != v15)
        {
          int v20 = v17;
          int v17 = *(_DWORD *)v16;
          if (v20 != *(_DWORD *)v16)
          {
            *((_DWORD *)v19 + 1) = v17;
            v19 += 4;
          }
          v16 += 4;
        }
        uint64_t v29 = v19 + 4;
        int64_t v30 = v15 - (v19 + 4);
        if (v15 != v19 + 4)
        {
          if (v15 != &v29[v30])
          {
            memmove(v19 + 4, &v29[v30], 0);
            uint64_t v14 = *a3;
          }
          uint64_t v15 = v29;
          a3[1] = (uint64_t)v29;
        }
        break;
      }
    }
  }
  *(double *)(a1 + 1064) = *(double *)(a1 + 1064) + (double)(unint64_t)((uint64_t)&v15[-v14] >> 2);
  double result = sub_72688((uint64_t)v44) + *(double *)(a1 + 1048);
  *(double *)(a1 + 1048) = result;
  return result;
}

void sub_B3CD34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_B3CD5C(uint64_t a1@<X0>, _OWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_725D0((uint64_t)v22);
  long long v8 = a2[1];
  v21[0] = *a2;
  v21[1] = v8;
  LOBYTE(v21[0]) = 0;
  DWORD1(v21[0]) = a3;
  sub_B4868C(a1 + 312, v21);
  *(double *)(a1 + 1072) = *(double *)(a1 + 1072) + 1.0;
  sub_C50C4C(a1 + 1080, a1 + 888, (uint64_t)&__p);
  if (v20 < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 1056) = sub_72688((uint64_t)v22) + *(double *)(a1 + 1056);
  *(unsigned char *)(a1 + 336) = 0;
  sub_B48A40(a1 + 312, (uint64_t)&v13);
  *(_OWORD *)a4 = *(_OWORD *)v14;
  uint64_t v9 = v17;
  *(void *)(a4 + 16) = v15[0];
  v14[1] = 0;
  v15[0] = 0;
  v14[0] = 0;
  if (v9)
  {
    int v18 = v9;
    operator delete(v9);
  }
  if (v16 < 0)
  {
    operator delete((void *)v15[1]);
    uint64_t v10 = (char *)v14[0];
    if (!v14[0]) {
      return;
    }
  }
  else
  {
    uint64_t v10 = (char *)v14[0];
    if (!v14[0]) {
      return;
    }
  }
  unint64_t v11 = (char *)v14[1];
  BOOL v12 = v10;
  if (v14[1] != v10)
  {
    do
    {
      v11 -= 296;
      sub_9F5E28((uint64_t)v15, (uint64_t)v11);
    }
    while (v11 != v10);
    BOOL v12 = (char *)v14[0];
  }
  v14[1] = v10;
  operator delete(v12);
}

uint64_t sub_B3CEB8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      if (sub_B4C688(a3[1], v4, *a3))
      {
        unint64_t v8 = *(void *)(a2 + 8);
        if (v8 >= *(void *)(a2 + 16))
        {
          char v7 = sub_A220E4((void **)a2, v4);
        }
        else
        {
          long long v9 = *(_OWORD *)v4;
          long long v10 = *(_OWORD *)(v4 + 32);
          *(_OWORD *)(v8 + 16) = *(_OWORD *)(v4 + 16);
          *(_OWORD *)(v8 + 32) = v10;
          *(_OWORD *)unint64_t v8 = v9;
          long long v11 = *(_OWORD *)(v4 + 48);
          long long v12 = *(_OWORD *)(v4 + 64);
          long long v13 = *(_OWORD *)(v4 + 80);
          *(void *)(v8 + 96) = *(void *)(v4 + 96);
          *(_OWORD *)(v8 + 64) = v12;
          *(_OWORD *)(v8 + 80) = v13;
          *(_OWORD *)(v8 + 48) = v11;
          *(_DWORD *)(v8 + 104) = *(_DWORD *)(v4 + 104);
          long long v14 = *(_OWORD *)(v4 + 112);
          *(void *)(v8 + 128) = *(void *)(v4 + 128);
          *(_OWORD *)(v8 + 112) = v14;
          *(void *)(v4 + 120) = 0;
          *(void *)(v4 + 128) = 0;
          *(void *)(v4 + 112) = 0;
          *(_DWORD *)(v8 + 136) = *(_DWORD *)(v4 + 136);
          long long v15 = *(_OWORD *)(v4 + 144);
          long long v16 = *(_OWORD *)(v4 + 176);
          *(_OWORD *)(v8 + 160) = *(_OWORD *)(v4 + 160);
          *(_OWORD *)(v8 + 176) = v16;
          *(_OWORD *)(v8 + 144) = v15;
          *(void *)(v8 + 192) = *(void *)(v4 + 192);
          *(void *)(v8 + 208) = 0;
          *(void *)(v8 + 216) = 0;
          *(void *)(v8 + 200) = 0;
          *(_OWORD *)(v8 + 200) = *(_OWORD *)(v4 + 200);
          *(void *)(v8 + 216) = *(void *)(v4 + 216);
          *(void *)(v4 + 200) = 0;
          *(void *)(v4 + 208) = 0;
          *(void *)(v4 + 216) = 0;
          *(void *)(v8 + 224) = 0;
          *(void *)(v8 + 232) = 0;
          *(void *)(v8 + 240) = 0;
          *(_OWORD *)(v8 + 224) = *(_OWORD *)(v4 + 224);
          *(void *)(v8 + 240) = *(void *)(v4 + 240);
          *(void *)(v4 + 224) = 0;
          *(void *)(v4 + 232) = 0;
          *(void *)(v4 + 240) = 0;
          *(void *)(v8 + 248) = 0;
          *(void *)(v8 + 256) = 0;
          *(void *)(v8 + 264) = 0;
          *(_OWORD *)(v8 + 248) = *(_OWORD *)(v4 + 248);
          *(void *)(v8 + 264) = *(void *)(v4 + 264);
          *(void *)(v4 + 248) = 0;
          *(void *)(v4 + 256) = 0;
          *(void *)(v4 + 264) = 0;
          *(void *)(v8 + 272) = 0;
          *(void *)(v8 + 280) = 0;
          *(void *)(v8 + 288) = 0;
          *(_OWORD *)(v8 + 272) = *(_OWORD *)(v4 + 272);
          *(void *)(v8 + 288) = *(void *)(v4 + 288);
          *(void *)(v4 + 272) = 0;
          *(void *)(v4 + 280) = 0;
          *(void *)(v4 + 288) = 0;
          char v7 = (char *)(v8 + 296);
        }
        *(void *)(a2 + 8) = v7;
      }
      v4 += 296;
    }
    while (v4 != v5);
  }
  return a2;
}

uint64_t sub_B3D020(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "search_interval_hours");
  *(_DWORD *)a1 = 36000 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "max_journey_duration_stretch");
  double v4 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "num_journeys_per_template");
  unint64_t v5 = sub_5C9BC(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 16) = v5;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "allow_all_stops_in_stations");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 24) = v6;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "allow_frequency_fill_in_journeys");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 25) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "enable_domination_by_num_trips");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 26) = v8;
  return a1;
}

void sub_B3D25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B3D28C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_B3D020(a1, a3);
  *(_OWORD *)(v5 + 40) = xmmword_20B98A0;
  uint64_t v6 = v5 + 40;
  *(void *)(v5 + 32) = a2;
  *(unsigned char *)(v5 + 66) = 0;
  *(void *)(v5 + 56) = 0x3E4CCCCD3F000000;
  *(void *)(v5 + 68) = 0xFFFFFFFF00000000;
  *(void *)(v5 + 84) = 0;
  *(void *)(v5 + 76) = 0;
  *(_DWORD *)(v5 + 92) = 0;
  *(void *)(v5 + 120) = 0;
  *(void *)(v5 + 128) = 0;
  *(_WORD *)(v5 + 64) = 256;
  *(void *)(v5 + 136) = 0;
  *(void *)(v5 + 144) = 0;
  *(_DWORD *)(v5 + 152) = 0;
  *(_OWORD *)(v5 + 96) = xmmword_20EB770;
  *(_DWORD *)(v5 + 112) = -1;
  BOOL v7 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 120) = v7;
  uint64_t v8 = *(void *)(a1 + 96);
  if (v8)
  {
    uint64_t v9 = 12 * v8;
    do
    {
      uint64_t v10 = *(void *)(v6 + 64);
      v7[2] = *(_DWORD *)(v6 + 72);
      *(void *)BOOL v7 = v10;
      v7 += 3;
      v9 -= 12;
    }
    while (v9);
  }
  *(_OWORD *)(a1 + 160) = xmmword_20B98A0;
  *(void *)(a1 + 176) = 0x3E4CCCCD3F000000;
  *(void *)(a1 + 188) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 204) = 0;
  *(void *)(a1 + 196) = 0;
  *(_DWORD *)(a1 + 212) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_WORD *)(a1 + 185) = 1;
  *(_OWORD *)(a1 + 216) = xmmword_20EB770;
  *(_DWORD *)(a1 + 232) = -1;
  long long v11 = malloc_type_malloc(0x180uLL, 0x10000403E1C8BA9uLL);
  *(void *)(a1 + 240) = v11;
  uint64_t v12 = *(void *)(a1 + 216);
  if (v12)
  {
    uint64_t v13 = 12 * v12;
    do
    {
      uint64_t v14 = *(void *)(a1 + 224);
      v11[2] = *(_DWORD *)(a1 + 232);
      *(void *)long long v11 = v14;
      v11 += 3;
      v13 -= 12;
    }
    while (v13);
  }
  long long v15 = operator new(0x30uLL);
  v15[1] = 0;
  v15[2] = 0;
  void *v15 = off_243D5E8;
  v15[4] = 0;
  v15[5] = 0;
  void v15[3] = 0;
  *(void *)(a1 + 280) = v15 + 3;
  *(void *)(a1 + 288) = v15;
  long long v16 = operator new(0x30uLL);
  v16[1] = 0;
  v16[2] = 0;
  *long long v16 = off_243D5E8;
  v16[4] = 0;
  v16[5] = 0;
  v16[3] = 0;
  *(void *)(a1 + 296) = v16 + 3;
  *(void *)(a1 + 304) = v16;
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  sub_B3DA6C(a1 + 312, a2, v6, a1 + 160, &v22, &v20, (void *)(a1 + 280), (void *)(a1 + 296));
  int v17 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  int v18 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  sub_C498AC(a1 + 1040);
  return a1;
}

void sub_B3D578(_Unwind_Exception *a1)
{
  sub_9FD504(v5);
  sub_14A84(v4);
  sub_14A84(v3);
  sub_A2DC14(v2);
  sub_A2DC14(v1);
  _Unwind_Resume(a1);
}

void sub_B3D5D4(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 256) = v5;
    operator delete(v5);
    uint64_t v6 = *(void **)(v2 + 240);
    if (v6) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v6 = *(void **)(v2 + 240);
    if (v6)
    {
LABEL_5:
      free(v6);
      sub_A2DC14(v1);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0xB3D5C4);
}

void sub_B3D610(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 136) = v4;
    operator delete(v4);
    uint64_t v5 = *(void **)(v1 + 120);
    if (!v5) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v5 = *(void **)(v1 + 120);
    if (!v5) {
      goto LABEL_3;
    }
  }
  free(v5);
  _Unwind_Resume(exception_object);
}

void sub_B3D64C(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  sub_C498AC((uint64_t)__p);
  long long v6 = v36;
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 1056) = v6;
  *(void *)(a1 + 1072) = v37;
  BOOL v7 = (void **)(a1 + 1080);
  if (*(char *)(a1 + 1103) < 0) {
    operator delete(*v7);
  }
  *(_OWORD *)BOOL v7 = v38;
  long long v8 = v43;
  *(_OWORD *)(a1 + 1168) = v44;
  long long v9 = v46;
  *(_OWORD *)(a1 + 1184) = v45;
  *(_OWORD *)(a1 + 1200) = v9;
  *(_OWORD *)(a1 + 1216) = v47;
  long long v10 = v41;
  *(_OWORD *)(a1 + 1104) = v40;
  *(_OWORD *)(a1 + 1120) = v10;
  *(_OWORD *)(a1 + 1136) = v42;
  *(void *)(a1 + 1096) = v39;
  *(_OWORD *)(a1 + 1152) = v8;
  sub_725D0((uint64_t)v34);
  long long v11 = (void *)(a3 + 8);
  uint64_t v33 = -1857283155 * ((*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3);
  if (v33)
  {
    uint64_t v12 = 0;
    uint64_t v31 = a3;
    uint64_t v32 = a1;
    do
    {
      uint64_t v14 = *v11 + 296 * v12;
      *(_DWORD *)(v14 + 12) = v12;
      if (*(unsigned char *)a2) {
        sub_B3C598(a1, a2, v14, (uint64_t *)__p);
      }
      else {
        sub_B3BA58(a1, a2, v14, (uint64_t *)__p);
      }
      sub_B3DDB8((uint64_t)v11, *(long long **)(a3 + 16), (long long *)__p[0], (long long *)__p[1], 0x14C1BACF914C1BADLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
      long long v15 = (char *)__p[0];
      if (__p[0])
      {
        long long v16 = (char *)__p[1];
        uint64_t v13 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            int v17 = (void *)*((void *)v16 - 3);
            if (v17)
            {
              *((void *)v16 - 2) = v17;
              operator delete(v17);
            }
            int v18 = (void *)*((void *)v16 - 6);
            if (v18)
            {
              *((void *)v16 - 5) = v18;
              operator delete(v18);
            }
            int v19 = (void *)*((void *)v16 - 9);
            if (v19)
            {
              *((void *)v16 - 8) = v19;
              operator delete(v19);
            }
            uint64_t v20 = (void **)*((void *)v16 - 12);
            if (v20)
            {
              int v21 = (void **)*((void *)v16 - 11);
              uint64_t v22 = (void *)*((void *)v16 - 12);
              if (v21 != v20)
              {
                do
                {
                  unint64_t v24 = *(v21 - 5);
                  if (v24)
                  {
                    *(v21 - 4) = v24;
                    operator delete(v24);
                  }
                  unint64_t v25 = v21 - 9;
                  unint64_t v26 = (char *)*(v21 - 9);
                  if (v26)
                  {
                    unint64_t v27 = (char *)*(v21 - 8);
                    unint64_t v23 = *(v21 - 9);
                    if (v27 != v26)
                    {
                      do
                      {
                        if (!*((_DWORD *)v27 - 2))
                        {
                          BOOL v28 = (void *)*((void *)v27 - 6);
                          if (v28)
                          {
                            *((void *)v27 - 5) = v28;
                            operator delete(v28);
                          }
                          uint64_t v29 = (void *)*((void *)v27 - 10);
                          if (v29)
                          {
                            *((void *)v27 - 9) = v29;
                            operator delete(v29);
                          }
                          int64_t v30 = (void *)*((void *)v27 - 13);
                          if (v30)
                          {
                            *((void *)v27 - 12) = v30;
                            operator delete(v30);
                          }
                        }
                        v27 -= 168;
                      }
                      while (v27 != v26);
                      unint64_t v23 = *v25;
                    }
                    *(v21 - 8) = v26;
                    operator delete(v23);
                  }
                  v21 -= 9;
                }
                while (v25 != v20);
                uint64_t v22 = (void *)*((void *)v16 - 12);
              }
              *((void *)v16 - 11) = v20;
              operator delete(v22);
            }
            if (*(v16 - 161) < 0) {
              operator delete(*((void **)v16 - 23));
            }
            v16 -= 296;
          }
          while (v16 != v15);
          uint64_t v13 = __p[0];
        }
        __p[1] = v15;
        operator delete(v13);
        a3 = v31;
        a1 = v32;
      }
      ++v12;
    }
    while (v12 != v33);
  }
  *(double *)(a1 + 1040) = sub_72688((uint64_t)v34);
}

void sub_B3D910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a16) {
    sub_20AE14C((uint64_t)&a17, a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B3D934(uint64_t a1)
{
  return a1 + 1040;
}

void sub_B3D93C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243D5E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_B3D95C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243D5E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_B3D9B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 24);
    if (v3 == v1)
    {
      *(void *)(a1 + 32) = v1;
    }
    else
    {
      do
      {
        uint64_t v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        long long v6 = *(void **)(v3 - 48);
        if (v6) {
          operator delete(v6);
        }
        v3 -= 48;
      }
      while (v3 != v1);
      uint64_t v4 = *(void **)(a1 + 24);
      *(void *)(a1 + 32) = v1;
    }
    operator delete(v4);
  }
}

uint64_t sub_B3DA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  *(void *)a1 = -1;
  *(_DWORD *)(a1 + 8) = 8;
  *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 24) = 16843009;
  *(_WORD *)(a1 + 32) = 256;
  *(void *)(a1 + 40) = a2;
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a4;
  *(void *)(a1 + 64) = *a6;
  uint64_t v11 = a6[1];
  *(void *)(a1 + 72) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 80) = *a7;
  uint64_t v12 = a7[1];
  *(void *)(a1 + 88) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 96) = *a8;
  uint64_t v13 = a8[1];
  *(void *)(a1 + 104) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)&long long v14 = 0x8000000080000000;
  *((void *)&v14 + 1) = 0x8000000080000000;
  *(_OWORD *)(a1 + 116) = v14;
  *(void *)(a1 + 136) = 10;
  *(_DWORD *)(a1 + 144) = -1;
  if (*a5)
  {
    *(void *)(a1 + 152) = *a5;
    uint64_t v15 = a5[1];
    *(void *)(a1 + 160) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    long long v16 = (char *)operator new(0x40uLL);
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = 0;
    *(_OWORD *)(v16 + 24) = xmmword_20E1750;
    *(void *)long long v16 = off_243D638;
    *((void *)v16 + 6) = 0;
    *((void *)v16 + 7) = 0;
    *((void *)v16 + 5) = 0;
    *(void *)(a1 + 152) = v16 + 24;
    *(void *)(a1 + 160) = v16;
  }
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 432) = -1;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 440) = 0;
  sub_BD5668(a1 + 464, a2);
  *(unsigned char *)(a1 + 568) = *a5 == 0;
  char v19 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)(a1 + 576), &__p);
  if (v19 < 0) {
    operator delete((void *)__p);
  }
  return a1;
}

void sub_B3DC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_14A84(v17);
  sub_14A84(v16);
  sub_14A84(v15);
  _Unwind_Resume(a1);
}

void sub_B3DD28(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243D638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_B3DD48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243D638;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_B3DD9C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

long long *sub_B3DDB8(uint64_t a1, long long *a2, long long *a3, long long *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    BOOL v7 = a3;
    uint64_t v9 = *(void *)(a1 + 16);
    unint64_t v10 = *(void *)(a1 + 8);
    if (0x14C1BACF914C1BADLL * ((uint64_t)(v9 - v10) >> 3) >= a5)
    {
      uint64_t v16 = v10 - (void)a2;
      if (0x14C1BACF914C1BADLL * ((uint64_t)(v10 - (void)a2) >> 3) >= a5)
      {
        int v18 = (long long *)((char *)a3 + 296 * a5);
      }
      else
      {
        int v18 = (long long *)((char *)a3 + 8 * ((uint64_t)(v10 - (void)a2) >> 3));
        if (v18 == a4)
        {
          *(void *)(a1 + 8) = v10;
          if (v16 < 1) {
            return v5;
          }
        }
        else
        {
          uint64_t v19 = 0;
          do
          {
            sub_9F68D4(v10 + v19, (long long *)((char *)v18 + v19));
            v19 += 296;
          }
          while ((long long *)((char *)v18 + v19) != a4);
          *(void *)(a1 + 8) = v10 + v19;
          if (v16 < 1) {
            return v5;
          }
        }
      }
      sub_B3E094(a1, (uint64_t)v5, v10, (uint64_t)v5 + 296 * a5);
      if (v18 != v7)
      {
        uint64_t v20 = (uint64_t)v5;
        do
        {
          sub_B3E664(v20, v7);
          BOOL v7 = (long long *)((char *)v7 + 296);
          v20 += 296;
        }
        while (v7 != v18);
      }
    }
    else
    {
      uint64_t v11 = *(long long **)a1;
      unint64_t v12 = a5 + 0x14C1BACF914C1BADLL * ((uint64_t)(v10 - *(void *)a1) >> 3);
      if (v12 > 0xDD67C8A60DD67CLL) {
        sub_2E00();
      }
      unint64_t v13 = 0x14C1BACF914C1BADLL * ((v9 - (uint64_t)v11) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x6EB3E45306EB3ELL) {
        unint64_t v14 = 0xDD67C8A60DD67CLL;
      }
      else {
        unint64_t v14 = v12;
      }
      uint64_t v31 = a1 + 16;
      if (v14)
      {
        if (v14 > 0xDD67C8A60DD67CLL) {
          sub_188D718();
        }
        uint64_t v15 = (char *)operator new(296 * v14);
      }
      else
      {
        uint64_t v15 = 0;
      }
      uint64_t v21 = (uint64_t)&v15[8 * (((char *)v5 - (char *)v11) >> 3)];
      long long __p = v15;
      uint64_t v28 = v21;
      uint64_t v29 = v21;
      int64_t v30 = &v15[296 * v14];
      uint64_t v22 = 296 * a5;
      uint64_t v23 = v21 + 296 * a5;
      do
      {
        sub_9F68D4(v21, v7);
        v21 += 296;
        BOOL v7 = (long long *)((char *)v7 + 296);
        v22 -= 296;
      }
      while (v22);
      uint64_t v29 = v23;
      uint64_t v5 = sub_B3E214((long long **)a1, &__p, v5);
      uint64_t v25 = v28;
      for (uint64_t i = v29; v29 != v25; uint64_t i = v29)
      {
        uint64_t v29 = i - 296;
        sub_9F5E28(v31, i - 296);
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v5;
}

void sub_B3E03C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A4D50C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B3E050(_Unwind_Exception *exception_object)
{
  for (; v4; v4 -= 296)
    sub_9F5E28(v3, v2 - 296 + v4);
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_B3E07C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A4D50C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B3E094(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = (long long *)(a2 + v4 - a4);
  for (i = v4; (unint64_t)v5 < a3; uint64_t v5 = (long long *)((char *)v5 + 296))
  {
    long long v7 = *v5;
    long long v8 = v5[2];
    *(_OWORD *)(i + 16) = v5[1];
    *(_OWORD *)(i + 32) = v8;
    *(_OWORD *)uint64_t i = v7;
    long long v9 = v5[3];
    long long v10 = v5[4];
    long long v11 = v5[5];
    *(void *)(i + 96) = *((void *)v5 + 12);
    *(_OWORD *)(i + 64) = v10;
    *(_OWORD *)(i + 80) = v11;
    *(_OWORD *)(i + 48) = v9;
    *(_DWORD *)(i + 104) = *((_DWORD *)v5 + 26);
    long long v12 = v5[7];
    *(void *)(i + 128) = *((void *)v5 + 16);
    *(_OWORD *)(i + 112) = v12;
    *((void *)v5 + 15) = 0;
    *((void *)v5 + 16) = 0;
    *((void *)v5 + 14) = 0;
    *(_DWORD *)(i + 136) = *((_DWORD *)v5 + 34);
    long long v13 = v5[9];
    long long v14 = v5[11];
    *(_OWORD *)(i + 160) = v5[10];
    *(_OWORD *)(i + 176) = v14;
    *(_OWORD *)(i + 144) = v13;
    *(void *)(i + 192) = *((void *)v5 + 24);
    *(void *)(i + 208) = 0;
    *(void *)(i + 216) = 0;
    *(void *)(i + 200) = 0;
    *(_OWORD *)(i + 200) = *(long long *)((char *)v5 + 200);
    *(void *)(i + 216) = *((void *)v5 + 27);
    *((void *)v5 + 25) = 0;
    *((void *)v5 + 26) = 0;
    *((void *)v5 + 27) = 0;
    *(void *)(i + 224) = 0;
    *(void *)(i + 232) = 0;
    *(void *)(i + 240) = 0;
    *(_OWORD *)(i + 224) = v5[14];
    *(void *)(i + 240) = *((void *)v5 + 30);
    *((void *)v5 + 28) = 0;
    *((void *)v5 + 29) = 0;
    *((void *)v5 + 30) = 0;
    *(void *)(i + 248) = 0;
    *(void *)(i + 256) = 0;
    *(void *)(i + 264) = 0;
    *(_OWORD *)(i + 248) = *(long long *)((char *)v5 + 248);
    *(void *)(i + 264) = *((void *)v5 + 33);
    *((void *)v5 + 31) = 0;
    *((void *)v5 + 32) = 0;
    *((void *)v5 + 33) = 0;
    *(void *)(i + 272) = 0;
    *(void *)(i + 280) = 0;
    *(void *)(i + 288) = 0;
    *(_OWORD *)(i + 272) = v5[17];
    *(void *)(i + 288) = *((void *)v5 + 36);
    *((void *)v5 + 34) = 0;
    *((void *)v5 + 35) = 0;
    *((void *)v5 + 36) = 0;
    i += 296;
  }
  *(void *)(result + 8) = i;
  if (v4 != a4)
  {
    uint64_t v15 = v4 - 296;
    uint64_t v16 = 8 * ((v4 - a4) >> 3);
    uint64_t v17 = a2 - 296;
    do
    {
      double result = sub_B3E498(v15, (long long *)(v17 + v16));
      v15 -= 296;
      v16 -= 296;
    }
    while (v16);
  }
  return result;
}

long long *sub_B3E214(long long **a1, void *a2, long long *a3)
{
  double result = (long long *)a2[1];
  uint64_t v5 = *a1;
  long long v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = (uint64_t)result + v7;
      long long v9 = (long long *)((char *)result + v7 - 296);
      uint64_t v10 = (uint64_t)a3 + v7;
      long long v11 = *(long long *)((char *)a3 + v7 - 248);
      long long v12 = *(long long *)((char *)a3 + v7 - 232);
      long long v13 = *(long long *)((char *)a3 + v7 - 216);
      *(void *)(v8 - 200) = *(void *)((char *)a3 + v7 - 200);
      *(_OWORD *)(v8 - 216) = v13;
      *(_OWORD *)(v8 - 232) = v12;
      *(_OWORD *)(v8 - 248) = v11;
      long long v14 = *(long long *)((char *)a3 + v7 - 296);
      long long v15 = *(long long *)((char *)a3 + v7 - 264);
      v9[1] = *(long long *)((char *)a3 + v7 - 280);
      v9[2] = v15;
      _OWORD *v9 = v14;
      *(_DWORD *)(v8 - 192) = *(_DWORD *)((char *)a3 + v7 - 192);
      long long v16 = *(long long *)((char *)a3 + v7 - 184);
      *(void *)(v8 - 168) = *(void *)((char *)a3 + v7 - 168);
      *(_OWORD *)(v8 - 184) = v16;
      *(void *)(v10 - 176) = 0;
      *(void *)(v10 - 168) = 0;
      *(void *)(v10 - 184) = 0;
      *(_DWORD *)(v8 - 160) = *(_DWORD *)((char *)a3 + v7 - 160);
      long long v17 = *(long long *)((char *)a3 + v7 - 152);
      long long v18 = *(long long *)((char *)a3 + v7 - 136);
      *(_OWORD *)(v8 - 120) = *(long long *)((char *)a3 + v7 - 120);
      *(_OWORD *)(v8 - 136) = v18;
      *(_OWORD *)(v8 - 152) = v17;
      *(void *)&long long v17 = *(void *)((char *)a3 + v7 - 104);
      *(void *)(v8 - 88) = 0;
      *(void *)(v8 - 80) = 0;
      *(void *)(v8 - 104) = v17;
      *(void *)(v8 - 96) = 0;
      *(_OWORD *)(v8 - 96) = *(long long *)((char *)a3 + v7 - 96);
      *(void *)(v8 - 80) = *(void *)((char *)a3 + v7 - 80);
      *(void *)(v10 - 96) = 0;
      *(void *)(v10 - 88) = 0;
      *(void *)(v10 - 80) = 0;
      *(void *)(v8 - 72) = 0;
      *(void *)(v8 - 64) = 0;
      *(void *)(v8 - 56) = 0;
      *(_OWORD *)(v8 - 72) = *(long long *)((char *)a3 + v7 - 72);
      *(void *)(v8 - 56) = *(void *)((char *)a3 + v7 - 56);
      *(void *)(v10 - 72) = 0;
      *(void *)(v10 - 64) = 0;
      *(void *)(v10 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(void *)(v8 - 40) = 0;
      *(void *)(v8 - 32) = 0;
      *(_OWORD *)(v8 - 48) = *(long long *)((char *)a3 + v7 - 48);
      *(void *)(v8 - 32) = *(void *)((char *)a3 + v7 - 32);
      *(void *)(v10 - 48) = 0;
      *(void *)(v10 - 40) = 0;
      *(void *)(v10 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 8) = 0;
      *(_OWORD *)(v8 - 24) = *(long long *)((char *)a3 + v7 - 24);
      *(void *)(v8 - 8) = *(void *)((char *)a3 + v7 - 8);
      *(void *)(v10 - 24) = 0;
      *(void *)(v10 - 16) = 0;
      *(void *)(v10 - 8) = 0;
      v7 -= 296;
    }
    while ((long long *)((char *)a3 + v7) != v5);
    long long v6 = (long long *)((char *)result + v7);
  }
  a2[1] = v6;
  uint64_t v19 = a1[1];
  uint64_t v20 = a2[2];
  if (v19 != a3)
  {
    do
    {
      long long v21 = *a3;
      long long v22 = a3[2];
      *(_OWORD *)(v20 + 16) = a3[1];
      *(_OWORD *)(v20 + 32) = v22;
      *(_OWORD *)uint64_t v20 = v21;
      long long v23 = a3[3];
      long long v24 = a3[4];
      long long v25 = a3[5];
      *(void *)(v20 + 96) = *((void *)a3 + 12);
      *(_OWORD *)(v20 + 64) = v24;
      *(_OWORD *)(v20 + 80) = v25;
      *(_OWORD *)(v20 + 48) = v23;
      *(_DWORD *)(v20 + 104) = *((_DWORD *)a3 + 26);
      long long v26 = a3[7];
      *(void *)(v20 + 128) = *((void *)a3 + 16);
      *(_OWORD *)(v20 + 112) = v26;
      *((void *)a3 + 15) = 0;
      *((void *)a3 + 16) = 0;
      *((void *)a3 + 14) = 0;
      *(_DWORD *)(v20 + 136) = *((_DWORD *)a3 + 34);
      long long v27 = a3[9];
      long long v28 = a3[11];
      *(_OWORD *)(v20 + 160) = a3[10];
      *(_OWORD *)(v20 + 176) = v28;
      *(_OWORD *)(v20 + 144) = v27;
      *(void *)(v20 + 192) = *((void *)a3 + 24);
      *(void *)(v20 + 208) = 0;
      *(void *)(v20 + 216) = 0;
      *(void *)(v20 + 200) = 0;
      *(_OWORD *)(v20 + 200) = *(long long *)((char *)a3 + 200);
      *(void *)(v20 + 216) = *((void *)a3 + 27);
      *((void *)a3 + 25) = 0;
      *((void *)a3 + 26) = 0;
      *((void *)a3 + 27) = 0;
      *(void *)(v20 + 224) = 0;
      *(void *)(v20 + 232) = 0;
      *(void *)(v20 + 240) = 0;
      *(_OWORD *)(v20 + 224) = a3[14];
      *(void *)(v20 + 240) = *((void *)a3 + 30);
      *((void *)a3 + 28) = 0;
      *((void *)a3 + 29) = 0;
      *((void *)a3 + 30) = 0;
      *(void *)(v20 + 248) = 0;
      *(void *)(v20 + 256) = 0;
      *(void *)(v20 + 264) = 0;
      *(_OWORD *)(v20 + 248) = *(long long *)((char *)a3 + 248);
      *(void *)(v20 + 264) = *((void *)a3 + 33);
      *((void *)a3 + 31) = 0;
      *((void *)a3 + 32) = 0;
      *((void *)a3 + 33) = 0;
      *(void *)(v20 + 272) = 0;
      *(void *)(v20 + 280) = 0;
      *(void *)(v20 + 288) = 0;
      *(_OWORD *)(v20 + 272) = a3[17];
      *(void *)(v20 + 288) = *((void *)a3 + 36);
      *((void *)a3 + 34) = 0;
      *((void *)a3 + 35) = 0;
      *((void *)a3 + 36) = 0;
      v20 += 296;
      a3 = (long long *)((char *)a3 + 296);
    }
    while (a3 != v19);
    long long v6 = (long long *)a2[1];
  }
  a2[2] = v20;
  uint64_t v29 = *a1;
  *a1 = v6;
  a2[1] = v29;
  int64_t v30 = a1[1];
  a1[1] = (long long *)a2[2];
  a2[2] = v30;
  uint64_t v31 = a1[2];
  a1[2] = (long long *)a2[3];
  a2[3] = v31;
  *a2 = a2[1];
  return result;
}

uint64_t sub_B3E498(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  long long v6 = a2[3];
  long long v7 = a2[4];
  long long v8 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
  uint64_t v9 = a1 + 112;
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)v9);
  }
  long long v10 = a2[7];
  *(void *)(v9 + 16) = *((void *)a2 + 16);
  *(_OWORD *)uint64_t v9 = v10;
  *((unsigned char *)a2 + 135) = 0;
  *((unsigned char *)a2 + 112) = 0;
  long long v11 = (void **)(a1 + 200);
  long long v12 = *(void ***)(a1 + 200);
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
  long long v14 = a2[9];
  long long v13 = a2[10];
  *(_OWORD *)(a1 + 176) = a2[11];
  *(_OWORD *)(a1 + 144) = v14;
  *(_OWORD *)(a1 + 160) = v13;
  *(void *)(a1 + 192) = *((void *)a2 + 24);
  if (v12)
  {
    long long v15 = *(void ***)(a1 + 208);
    long long v16 = v12;
    if (v15 != v12)
    {
      do
      {
        v15 -= 9;
        sub_9F5F58(a1 + 216, v15);
      }
      while (v15 != v12);
      long long v16 = *v11;
    }
    *(void *)(a1 + 208) = v12;
    operator delete(v16);
    *long long v11 = 0;
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
  }
  *(_OWORD *)(a1 + 200) = *(long long *)((char *)a2 + 200);
  *(void *)(a1 + 216) = *((void *)a2 + 27);
  *((void *)a2 + 25) = 0;
  *((void *)a2 + 26) = 0;
  *((void *)a2 + 27) = 0;
  long long v17 = *(void **)(a1 + 224);
  if (v17)
  {
    *(void *)(a1 + 232) = v17;
    operator delete(v17);
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
  }
  *(_OWORD *)(a1 + 224) = a2[14];
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *((void *)a2 + 28) = 0;
  *((void *)a2 + 29) = 0;
  *((void *)a2 + 30) = 0;
  long long v18 = *(void **)(a1 + 248);
  if (v18)
  {
    *(void *)(a1 + 256) = v18;
    operator delete(v18);
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 264) = 0;
  }
  *(_OWORD *)(a1 + 248) = *(long long *)((char *)a2 + 248);
  *(void *)(a1 + 264) = *((void *)a2 + 33);
  *((void *)a2 + 31) = 0;
  *((void *)a2 + 32) = 0;
  *((void *)a2 + 33) = 0;
  uint64_t v19 = *(void **)(a1 + 272);
  if (v19)
  {
    *(void *)(a1 + 280) = v19;
    operator delete(v19);
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 280) = 0;
    *(void *)(a1 + 288) = 0;
  }
  *(_OWORD *)(a1 + 272) = a2[17];
  *(void *)(a1 + 288) = *((void *)a2 + 36);
  *((void *)a2 + 34) = 0;
  *((void *)a2 + 35) = 0;
  *((void *)a2 + 36) = 0;
  return a1;
}

uint64_t sub_B3E664(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  long long v6 = a2[3];
  long long v7 = a2[4];
  long long v8 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 7));
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 144) = v9;
  *(void *)(a1 + 192) = *((void *)a2 + 24);
  if ((long long *)a1 != a2)
  {
    sub_B3E760((void ***)(a1 + 200), *((void ***)a2 + 25), *((void ***)a2 + 26), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 3));
    sub_B3EB08((void *)(a1 + 224), *((char **)a2 + 28), *((char **)a2 + 29), (uint64_t)(*((void *)a2 + 29) - *((void *)a2 + 28)) >> 4);
    sub_9094A4((void *)(a1 + 248), *((char **)a2 + 31), *((char **)a2 + 32), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 32) - *((void *)a2 + 31)) >> 3));
    sub_326C0((void *)(a1 + 272), *((char **)a2 + 34), *((char **)a2 + 35), (uint64_t)(*((void *)a2 + 35) - *((void *)a2 + 34)) >> 3);
  }
  return a1;
}

void sub_B3E760(void ***a1, void **a2, void **a3, unint64_t a4)
{
  long long v7 = a1;
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = (uint64_t)a1[2];
  long long v10 = *a1;
  if (0x8E38E38E38E38E39 * ((v8 - (uint64_t)*a1) >> 3) >= a4)
  {
    uint64_t v19 = a1[1];
    unint64_t v20 = 0x8E38E38E38E38E39 * (v19 - v10);
    if (v20 >= a4)
    {
      if (a2 != a3)
      {
        uint64_t v27 = 0;
        do
        {
          uint64_t v29 = &v10[v27];
          if (a2 != v10)
          {
            sub_A21BFC((uint64_t *)&v10[v27], (uint64_t)a2[v27], (uint64_t)a2[v27 + 1], 0xCF3CF3CF3CF3CF3DLL * (((unsigned char *)a2[v27 + 1] - (unsigned char *)a2[v27]) >> 3));
            *((unsigned char *)v29 + 24) = a2[v27 + 3];
            sub_9094A4(v29 + 4, (char *)a2[v27 + 4], (char *)a2[v27 + 5], 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a2[v27 + 5] - (unsigned char *)a2[v27 + 4]) >> 3));
          }
          long long v28 = a2[v27 + 7];
          *(void **)((char *)v29 + 63) = *(void **)((char *)&a2[v27 + 7] + 7);
          v29[7] = v28;
          v27 += 9;
        }
        while (&a2[v27] != a3);
        long long v7 = a1;
        uint64_t v19 = a1[1];
        long long v10 = (void **)((char *)v10 + v27 * 8);
      }
      while (v19 != v10)
      {
        v19 -= 9;
        sub_9F5F58(v9, v19);
      }
      v7[1] = v10;
    }
    else
    {
      long long v21 = &a2[v19 - v10];
      if (v19 != v10)
      {
        unint64_t v22 = 0;
        uint64_t v23 = 72 * v20;
        do
        {
          long long v25 = &v10[v22 / 8];
          if (a2 != v10)
          {
            sub_A21BFC((uint64_t *)&v10[v22 / 8], (uint64_t)a2[v22 / 8], (uint64_t)a2[v22 / 8 + 1], 0xCF3CF3CF3CF3CF3DLL * (((unsigned char *)a2[v22 / 8 + 1] - (unsigned char *)a2[v22 / 8]) >> 3));
            *((unsigned char *)v25 + 24) = a2[v22 / 8 + 3];
            sub_9094A4(v25 + 4, (char *)a2[v22 / 8 + 4], (char *)a2[v22 / 8 + 5], 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a2[v22 / 8 + 5] - (unsigned char *)a2[v22 / 8 + 4]) >> 3));
          }
          long long v24 = a2[v22 / 8 + 7];
          *(void **)((char *)v25 + 63) = *(void **)((char *)&a2[v22 / 8 + 7] + 7);
          v25[7] = v24;
          v22 += 72;
        }
        while (v23 != v22);
        long long v7 = a1;
        long long v10 = a1[1];
      }
      int64_t v30 = v10;
      if (v21 != a3)
      {
        uint64_t v31 = 0;
        do
        {
          sub_9F6D1C(&v10[v31], (uint64_t)&v21[v31]);
          v31 += 9;
        }
        while (&v21[v31] != a3);
        int64_t v30 = &v10[v31];
      }
      v7[1] = v30;
    }
  }
  else
  {
    if (v10)
    {
      long long v11 = a1[1];
      long long v12 = *a1;
      if (v11 != v10)
      {
        do
        {
          v11 -= 9;
          sub_9F5F58(v9, v11);
        }
        while (v11 != v10);
        long long v12 = *v7;
      }
      v7[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      long long *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x38E38E38E38E38ELL) {
      goto LABEL_40;
    }
    unint64_t v13 = 0x8E38E38E38E38E39 * (v8 >> 3);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= a4) {
      uint64_t v14 = a4;
    }
    unint64_t v15 = v13 >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v14;
    if (v15 > 0x38E38E38E38E38ELL) {
LABEL_40:
    }
      sub_2E00();
    uint64_t v16 = 9 * v15;
    long long v17 = (void **)operator new(72 * v15);
    long long *v7 = v17;
    v7[1] = v17;
    v7[2] = &v17[v16];
    if (a2 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        sub_9F6D1C(&v17[v18], (uint64_t)&a2[v18]);
        v18 += 9;
      }
      while (&a2[v18] != a3);
      long long v17 = (void **)((char *)v17 + v18 * 8);
    }
    v7[1] = v17;
  }
}

void sub_B3EADC(_Unwind_Exception *exception_object)
{
  for (; v1; v1 -= 72)
    sub_9F5F58(v2, (void **)(v3 - 72 + v1));
  *(void *)(v4 + 8) = v3;
  _Unwind_Resume(exception_object);
}

void *sub_B3EB08(void *result, char *__src, char *a3, size_t __sz)
{
  long long v6 = __src;
  long long v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
LABEL_22:
    }
      sub_2E00();
    uint64_t v13 = 2 * v12;
    double result = operator new(16 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = a3 - v6;
    if (v14) {
      double result = memcpy(result, v6, v14 - 3);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  unint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    size_t v19 = v14 - 3;
    unint64_t v20 = (void *)*result;
LABEL_20:
    double result = memmove(v20, __src, v19);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    double result = memmove((void *)*result, __src, v16 - v9 - 3);
    uint64_t v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v18;
  if (v14)
  {
    size_t v19 = v14 - 3;
    unint64_t v20 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  char *v15 = &v9[v14];
  return result;
}

void sub_B3EC58(uint64_t a1, uint64_t a2)
{
  long long __p = 0;
  unint64_t v20 = 0;
  uint64_t v21 = 0;
  if (*(unsigned char *)(a1 + 26))
  {
    int v4 = 954437177 * ((*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 3);
    int v5 = (v4 + 1) > 1 ? v4 + 1 : 1;
    LODWORD(v17[0]) = 1;
    v14[0] = (uint64_t)&__p;
    if ((v4 + 1) >= 2)
    {
      do
      {
        sub_737BC(v14, v17);
        ++LODWORD(v17[0]);
      }
      while (LODWORD(v17[0]) != v5);
    }
  }
  uint64_t v6 = *(void *)(a1 + 280);
  long long v7 = *(uint64_t **)v6;
  if (*(void *)(v6 + 8) == *(void *)v6)
  {
    sub_A3F0F0(*(void *)(a1 + 280), 1uLL);
    long long v7 = *(uint64_t **)v6;
  }
  v14[0] = 0x1FFFFFFFDLL;
  LODWORD(v17[0]) = sub_A3B520(a1 + 40, v14);
  sub_A3EF14(v7, v17);
  v16[1] = v17;
  v17[0] = a1;
  v17[1] = &v18;
  uint64_t v18 = a1;
  v14[2] = (uint64_t)v17;
  v15[0] = a1;
  v15[1] = v16;
  v16[0] = a1;
  v14[0] = a1;
  v14[1] = (uint64_t)v15;
  uint64_t v8 = *(void *)(a2 + 208) - *(void *)(a2 + 200);
  if (v8)
  {
    unint64_t v9 = 0;
    unint64_t v10 = 0x8E38E38E38E38E39 * (v8 >> 3);
    do
    {
      BOOL v11 = (uint64_t *)sub_A0D24C((void *)(a2 + 200), v9);
      if (!*(unsigned char *)(a1 + 26))
      {
        int __src = 954437177 * ((*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 3) - v9;
        sub_147D0(&__p, (char *)&__src, (char *)&v23, 1uLL);
      }
      uint64_t v13 = *v11;
      for (uint64_t i = v11[1]; v13 != i; v13 += 168)
        sub_B3EE74(v14, (unsigned int **)&__p, v13);
      ++v9;
    }
    while (v9 != v10);
  }
  if (__p)
  {
    unint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_B3EE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B3EE74(uint64_t *a1, unsigned int **a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*(_DWORD *)(a3 + 160))
  {
    unint64_t v6 = *(void *)(a3 + 12);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a3 + 52);
    uint64_t v8 = (int *)sub_A11094((void *)(*(void *)(v5 + 32) + 4136), *(void *)(a3 + 32));
    unint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
    if (*v9 >= 9u && (uint64_t v10 = v9[4]) != 0) {
      BOOL v11 = (unsigned int *)((char *)v8 + v10 + *(unsigned int *)((char *)v8 + v10));
    }
    else {
      BOOL v11 = 0;
    }
    unint64_t v6 = __ROR8__(*(void *)sub_A10764(v11, v7), 32);
  }
  unint64_t v29 = v6;
  unint64_t v12 = *(uint64_t **)(v5 + 280);
  unint64_t v13 = **a2;
  uint64_t v14 = *v12;
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v12[1] - *v12) >> 4);
  if (v15 <= v13)
  {
    sub_A3F0F0(*(void *)(v5 + 280), v13 - v15 + 1);
    uint64_t v14 = *v12;
  }
  uint64_t v16 = (void *)(v14 + 48 * v13);
  unsigned int v17 = sub_A3B520(v5 + 40, (uint64_t *)&v29);
  if (v16[1] <= (unint64_t)v17
    || ((*(void *)(*v16 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) >> v17) & 1) == 0)
  {
    if (HIDWORD(v29) == 1 && (v29 + 3) < 2
      || (uint64_t v18 = (int *)sub_498D5C(*(void *)(*(void *)(v5 + 32) + 4120) + 24, __ROR8__(v29, 32), 0, "stop"),
          size_t v19 = (unsigned __int16 *)((char *)v18 - *v18),
          *v19 < 0xDu)
      || (unsigned __int16 v20 = v19[6]) == 0
      || ((unint64_t v22 = (int *)((char *)v18 + v20), v21 = *v22, v22[1] != -1) ? (v23 = v21 == 0) : (v23 = 1),
          v23 || !*(unsigned char *)(v5 + 24)))
    {
      sub_B3F108((uint64_t *)a1[2], a2, v29);
    }
    else
    {
      long long v24 = (void *)a1[1];
      long long v25 = (int *)sub_498D5C(*(void *)(*(void *)(v5 + 32) + 4120) + 24, __ROR8__(v29, 32), 0, "stop");
      long long v26 = (unsigned __int16 *)((char *)v25 - *v25);
      if (*v26 >= 0xDu && (unsigned __int16 v27 = v26[6]) != 0) {
        unint64_t v28 = *(unsigned int *)((char *)v25 + v27 + 4) | ((unint64_t)*(unsigned int *)((char *)v25 + v27) << 32);
      }
      else {
        unint64_t v28 = 0xFFFFFFFFLL;
      }
      sub_B3FAE0((uint64_t **)(*(void *)(*v24 + 32) + 4112), v28, (uint64_t)__p);
      v30[0] = v24[1];
      v30[1] = a2;
      sub_B3FA0C((uint64_t **)__p, (uint64_t)v30);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
}

void sub_B3F0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B3F108(uint64_t *a1, unsigned int **a2, unint64_t a3)
{
  uint64_t v3 = a2;
  unint64_t v135 = a3;
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    do
    {
      unint64_t v8 = *v5;
      unint64_t v9 = *(uint64_t **)(v4 + 280);
      uint64_t v10 = *v9;
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v9[1] - *v9) >> 4);
      if (v11 <= v8)
      {
        sub_A3F0F0(*(void *)(v4 + 280), v8 - v11 + 1);
        uint64_t v10 = *v9;
      }
      unsigned int v7 = (uint64_t *)(v10 + 48 * v8);
      LODWORD(v130[0]) = sub_A3B520(v4 + 40, (uint64_t *)&v135);
      sub_A3EF14(v7, v130);
      ++v5;
    }
    while (v5 != v6);
    a3 = v135;
  }
  sub_A1DF34((uint64_t)v130, *(void **)(v4 + 32), a3, 0, 0, 0);
  unint64_t v12 = v133;
  unint64_t v13 = v134;
  if (v133 >= v134) {
    return;
  }
  v119 = v3;
LABEL_9:
  uint64_t v14 = *v3;
  v126 = v3[1];
  if (*v3 == v126) {
    goto LABEL_133;
  }
  unint64_t v15 = __ROR8__(*v12, 32);
  uint64_t v16 = *(void *)a1[1];
  unint64_t v17 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) >> 33));
  uint64_t v127 = v16 + 160;
  unint64_t v128 = v17 ^ (v17 >> 33);
  unint64_t v18 = HIDWORD(v15);
  v122 = (unint64_t **)(v16 + 248);
  do
  {
    while (1)
    {
      unint64_t v22 = *v14;
      BOOL v23 = *(uint64_t **)(v16 + 296);
      uint64_t v24 = *v23;
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v23[1] - *v23) >> 4);
      if (v25 <= v22)
      {
        sub_A3F0F0(*(void *)(v16 + 296), v22 - v25 + 1);
        uint64_t v24 = *v23;
      }
      uint64_t v26 = *(void *)(v16 + 216) - 1;
      uint64_t v27 = *(void *)(v16 + 240);
      int v29 = *(_DWORD *)(v16 + 224);
      int v28 = *(_DWORD *)(v16 + 228);
      uint64_t v30 = v26 & v128;
      uint64_t v31 = (int *)(v27 + 12 * (v26 & v128));
      int v33 = *v31;
      int v32 = v31[1];
      BOOL v34 = v28 == v32 && v29 == v33;
      v129 = v14;
      if (v34) {
        goto LABEL_35;
      }
      if (*(void *)(v16 + 200))
      {
        uint64_t v35 = -1;
        uint64_t v36 = 1;
        do
        {
          if (*(_DWORD *)(v16 + 196) == v32 && *(_DWORD *)(v16 + 192) == v33)
          {
            if (v35 == -1) {
              uint64_t v35 = v30;
            }
          }
          else if (v33 == v15 && v32 == v18)
          {
            goto LABEL_61;
          }
          uint64_t v30 = (v30 + v36) & v26;
          uint64_t v37 = (int *)(v27 + 12 * v30);
          int v33 = *v37;
          int v32 = v37[1];
          ++v36;
        }
        while (v28 != v32 || v29 != v33);
        if (v35 == -1) {
LABEL_35:
        }
          uint64_t v35 = v30;
        if (!sub_A3BA84(v127, 1)) {
          goto LABEL_63;
        }
        goto LABEL_37;
      }
      uint64_t v57 = 1;
      while (v33 != v15 || v32 != v18)
      {
        uint64_t v30 = (v30 + v57) & v26;
        int v58 = (int *)(v27 + 12 * v30);
        int v33 = *v58;
        int v32 = v58[1];
        ++v57;
        if (v28 == v32 && v29 == v33) {
          goto LABEL_35;
        }
      }
LABEL_61:
      if (v30 != -1) {
        goto LABEL_96;
      }
      uint64_t v35 = -1;
      if (!sub_A3BA84(v127, 1))
      {
LABEL_63:
        uint64_t v61 = *(void *)(v16 + 200);
        uint64_t v60 = *(void *)(v16 + 208);
        if ((unint64_t)(v60 - v61) >= 0x1555555555555555)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_2E18(exception, "insert overflow");
        }
        uint64_t v62 = *(void *)(v16 + 240);
        if (v61
          && ((int v63 = (_DWORD *)(v62 + 12 * v35), *(_DWORD *)(v16 + 196) == v63[1])
            ? (BOOL v64 = *(_DWORD *)(v16 + 192) == *v63)
            : (BOOL v64 = 0),
              v64))
        {
          *(void *)(v16 + 200) = v61 - 1;
        }
        else
        {
          *(void *)(v16 + 208) = v60 + 1;
        }
        uint64_t v78 = v62 + 12 * v35;
        *(void *)uint64_t v78 = v15;
        *(_DWORD *)(v78 + 8) = -1;
        uint64_t v79 = *(void *)(v16 + 240) + 12 * v35;
        unsigned int v80 = *(_DWORD *)(v79 + 8);
        if (v80 != -1) {
          goto LABEL_86;
        }
LABEL_97:
        int v86 = *(_DWORD *)(v16 + 272);
        *(_DWORD *)(v16 + 272) = v86 + 1;
        *(_DWORD *)(v79 + 8) = v86;
        char v88 = *(unint64_t **)(v16 + 256);
        unint64_t v87 = *(void *)(v16 + 264);
        if ((unint64_t)v88 < v87)
        {
          *char v88 = v15;
          uint64_t v89 = (uint64_t)(v88 + 1);
          goto LABEL_118;
        }
        v90 = *v122;
        uint64_t v91 = (char *)v88 - (char *)*v122;
        uint64_t v92 = v91 >> 3;
        unint64_t v93 = (v91 >> 3) + 1;
        if (v93 >> 61) {
          sub_2E00();
        }
        uint64_t v94 = v87 - (void)v90;
        if (v94 >> 2 > v93) {
          unint64_t v93 = v94 >> 2;
        }
        if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v125 = v93;
        if (v93)
        {
          if (v93 >> 61) {
LABEL_149:
          }
            sub_188D718();
          v95 = operator new(8 * v93);
          uint64_t v96 = (unint64_t *)&v95[8 * v92];
          *uint64_t v96 = v15;
          uint64_t v89 = (uint64_t)(v96 + 1);
          if (v88 == v90) {
            goto LABEL_116;
          }
LABEL_109:
          unint64_t v97 = (char *)(v88 - 1) - (char *)v90;
          if (v97 < 0x58) {
            goto LABEL_154;
          }
          if ((unint64_t)((char *)v88 - &v95[v91]) < 0x20) {
            goto LABEL_154;
          }
          uint64_t v98 = (v97 >> 3) + 1;
          uint64_t v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v100 = &v88[v99 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v96 = (unint64_t *)((char *)v96 - v99);
          uint64_t v101 = &v95[8 * v92 - 16];
          unint64_t v102 = v88 - 2;
          uint64_t v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v104 = *(_OWORD *)v102;
            *(v101 - 1) = *((_OWORD *)v102 - 1);
            *uint64_t v101 = v104;
            v101 -= 2;
            v102 -= 4;
            v103 -= 4;
          }
          while (v103);
          char v88 = v100;
          if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_154:
            do
            {
              unint64_t v105 = *--v88;
              *--uint64_t v96 = v105;
            }
            while (v88 != v90);
          }
          char v88 = *v122;
        }
        else
        {
          v95 = 0;
          uint64_t v96 = (unint64_t *)(8 * v92);
          *(void *)(8 * v92) = v15;
          uint64_t v89 = 8 * v92 + 8;
          if (v88 != v90) {
            goto LABEL_109;
          }
        }
LABEL_116:
        *(void *)(v16 + 248) = v96;
        *(void *)(v16 + 256) = v89;
        *(void *)(v16 + 264) = &v95[8 * v125];
        if (v88) {
          operator delete(v88);
        }
LABEL_118:
        *(void *)(v16 + 256) = v89;
        unsigned int v80 = *(_DWORD *)(v79 + 8);
        char v81 = (uint64_t *)(v24 + 48 * v22);
        unint64_t v82 = v80;
        if (v81[1] > (unint64_t)v80) {
          goto LABEL_11;
        }
        goto LABEL_119;
      }
LABEL_37:
      unint64_t v136 = v15;
      int v137 = -1;
      uint64_t v46 = *(void *)(v16 + 216) - 1;
      uint64_t v27 = *(void *)(v16 + 240);
      int v48 = *(_DWORD *)(v16 + 224);
      int v47 = *(_DWORD *)(v16 + 228);
      uint64_t v30 = v46 & v128;
      unint64_t v49 = (int *)(v27 + 12 * (v46 & v128));
      int v51 = *v49;
      int v50 = v49[1];
      if (v47 == v50 && v48 == v51) {
        goto LABEL_84;
      }
      if (*(void *)(v16 + 200))
      {
        uint64_t v53 = -1;
        uint64_t v54 = 1;
        do
        {
          if (*(_DWORD *)(v16 + 196) == v50 && *(_DWORD *)(v16 + 192) == v51)
          {
            if (v53 == -1) {
              uint64_t v53 = v30;
            }
          }
          else if (v51 == v15 && v50 == v18)
          {
            goto LABEL_95;
          }
          uint64_t v30 = (v30 + v54) & v46;
          uint64_t v55 = (int *)(v27 + 12 * v30);
          int v51 = *v55;
          int v50 = v55[1];
          ++v54;
        }
        while (v47 != v50 || v48 != v51);
        if (v53 == -1) {
LABEL_84:
        }
          uint64_t v53 = v30;
LABEL_85:
        sub_A3BD64(v127, (uint64_t *)&v136, v53, &v138);
        uint64_t v79 = v139;
        unsigned int v80 = *(_DWORD *)(v139 + 8);
        if (v80 == -1) {
          goto LABEL_97;
        }
        goto LABEL_86;
      }
      uint64_t v83 = 1;
      while (v51 != v15 || v50 != v18)
      {
        uint64_t v30 = (v30 + v83) & v46;
        char v84 = (int *)(v27 + 12 * v30);
        int v51 = *v84;
        int v50 = v84[1];
        ++v83;
        if (v47 == v50 && v48 == v51) {
          goto LABEL_84;
        }
      }
LABEL_95:
      if (v30 == -1)
      {
        uint64_t v53 = -1;
        goto LABEL_85;
      }
LABEL_96:
      uint64_t v79 = v27 + 12 * v30;
      unsigned int v80 = *(_DWORD *)(v79 + 8);
      if (v80 == -1) {
        goto LABEL_97;
      }
LABEL_86:
      char v81 = (uint64_t *)(v24 + 48 * v22);
      unint64_t v82 = v80;
      if (v81[1] > (unint64_t)v80) {
        goto LABEL_11;
      }
LABEL_119:
      sub_A3E96C((uint64_t)v81, v80 + 1, 0);
LABEL_11:
      uint64_t v19 = *v81;
      unint64_t v20 = v82 >> 6;
      uint64_t v21 = 1 << v82;
      if ((*(void *)(*v81 + 8 * v20) & v21) == 0) {
        break;
      }
      uint64_t v14 = v129 + 1;
      unint64_t v18 = HIDWORD(v15);
      if (v129 + 1 == v126) {
        goto LABEL_132;
      }
    }
    uint64_t v39 = v24 + 48 * v22;
    unint64_t v42 = *(void *)(v39 + 40);
    long long v41 = (void *)(v39 + 40);
    unint64_t v40 = v42;
    long long v43 = v41 - 1;
    long long v44 = (char *)*(v41 - 1);
    if ((unint64_t)v44 < v42)
    {
      *(_DWORD *)long long v44 = v80;
      uint64_t v45 = (uint64_t)(v44 + 4);
      goto LABEL_129;
    }
    v124 = v41 - 1;
    long long v65 = (unsigned int **)(v41 - 2);
    long long v66 = (char *)*(v41 - 2);
    int64_t v67 = v44 - v66;
    uint64_t v68 = (v44 - v66) >> 2;
    unint64_t v69 = v68 + 1;
    if ((unint64_t)(v68 + 1) >> 62) {
      sub_2E00();
    }
    uint64_t v70 = v40 - (void)v66;
    if (v70 >> 1 > v69) {
      unint64_t v69 = v70 >> 1;
    }
    if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
    }
    unint64_t v123 = v69;
    if (v69)
    {
      uint64_t v121 = v21;
      if (v69 >> 62) {
        goto LABEL_149;
      }
      unint64_t v71 = v20;
      long long v72 = (unsigned int **)(v41 - 2);
      long long v73 = v41;
      int v74 = operator new(4 * v69);
      long long v41 = v73;
      long long v65 = v72;
      unint64_t v20 = v71;
      uint64_t v68 = (v44 - v66) >> 2;
      uint64_t v21 = v121;
      int64_t v67 = v44 - v66;
      BOOL v75 = (unsigned int *)&v74[4 * v68];
      *BOOL v75 = v80;
      uint64_t v45 = (uint64_t)(v75 + 1);
      if (v44 == v66)
      {
LABEL_121:
        unint64_t v77 = v123;
        long long v43 = v124;
        goto LABEL_127;
      }
    }
    else
    {
      int v74 = 0;
      BOOL v75 = (unsigned int *)(4 * v68);
      *(_DWORD *)(4 * v68) = v80;
      uint64_t v45 = 4 * v68 + 4;
      if (v44 == v66) {
        goto LABEL_121;
      }
    }
    unint64_t v76 = v44 - 4 - v66;
    unint64_t v77 = v123;
    if (v76 < 0x2C)
    {
      long long v43 = v124;
      do
      {
LABEL_126:
        unsigned int v113 = *((_DWORD *)v44 - 1);
        v44 -= 4;
        *--BOOL v75 = v113;
      }
      while (v44 != v66);
      goto LABEL_127;
    }
    long long v43 = v124;
    if ((unint64_t)(v44 - v74 - v67) < 0x20) {
      goto LABEL_126;
    }
    uint64_t v106 = (v76 >> 2) + 1;
    uint64_t v107 = 4 * (v106 & 0x7FFFFFFFFFFFFFF8);
    v108 = &v44[-v107];
    BOOL v75 = (unsigned int *)((char *)v75 - v107);
    uint64_t v109 = &v74[4 * v68 - 16];
    int v110 = v44 - 16;
    uint64_t v111 = v106 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v112 = *(_OWORD *)v110;
      *(v109 - 1) = *((_OWORD *)v110 - 1);
      *uint64_t v109 = v112;
      v109 -= 2;
      v110 -= 32;
      v111 -= 8;
    }
    while (v111);
    long long v44 = v108;
    if (v106 != (v106 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_126;
    }
LABEL_127:
    *long long v65 = v75;
    uint64_t *v43 = v45;
    *long long v41 = &v74[4 * v77];
    if (v66)
    {
      uint64_t v114 = v45;
      operator delete(v66);
      uint64_t v45 = v114;
      uint64_t v19 = *v81;
    }
LABEL_129:
    uint64_t *v43 = v45;
    *(void *)(v19 + 8 * v20) |= v21;
    uint64_t v14 = v129 + 1;
    unint64_t v18 = HIDWORD(v15);
  }
  while (v129 + 1 != v126);
LABEL_132:
  unint64_t v12 = v133;
  unint64_t v13 = v134;
  uint64_t v3 = v119;
LABEL_133:
  v12 += 2;
  v133 = v12;
  if (v12 == v13)
  {
    v115 = v131 + 2;
    v131 = v115;
    if ((unint64_t)v115 < v132)
    {
      while (1)
      {
        unint64_t v12 = (void *)*v115;
        unint64_t v13 = (void *)v115[1];
        if ((void *)*v115 != v13) {
          break;
        }
        v115 += 2;
        v131 = v115;
        if ((unint64_t)v115 >= v132) {
          return;
        }
      }
LABEL_138:
      v133 = v12;
      v134 = v13;
      goto LABEL_139;
    }
    return;
  }
  do
  {
LABEL_139:
    if (v12 >= v13 || (v116 = sub_A1E87C(v130), unint64_t v12 = v133, v13 = v134, !v116))
    {
      if (v12 >= v13) {
        return;
      }
      goto LABEL_9;
    }
    unint64_t v12 = v133 + 2;
    v133 = v12;
  }
  while (v12 != v134);
  unint64_t v117 = v131 + 2;
  v131 = v117;
  if ((unint64_t)v117 < v132)
  {
    while (1)
    {
      unint64_t v12 = (void *)*v117;
      unint64_t v13 = (void *)v117[1];
      if ((void *)*v117 != v13) {
        break;
      }
      v117 += 2;
      v131 = v117;
      if ((unint64_t)v117 >= v132) {
        return;
      }
    }
    goto LABEL_138;
  }
}

void sub_B3F9F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B3FA0C(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    uint64_t v5 = *(void **)a2;
    uint64_t v4 = *(unsigned int ***)(a2 + 8);
    do
    {
      sub_B3FBE0((uint64_t **)(*(void *)(*v5 + 32) + 4040), *v2, (uint64_t)&v9);
      unint64_t v6 = v9;
      unsigned int v7 = v10;
      if (v9 != v10)
      {
        unint64_t v8 = (uint64_t *)v5[1];
        do
          sub_B3F108(v8, v4, *v6++);
        while (v6 != v7);
        unint64_t v6 = v9;
      }
      if (v6)
      {
        uint64_t v10 = v6;
        operator delete(v6);
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_B3FAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_B3FAE0@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_8ED928((uint64_t)(*a1 + 3), __ROR8__(a2, 32), 0, "station");
  unint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0xDu && (uint64_t v7 = v6[6]) != 0)
  {
    unint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    unint64_t v11 = (unsigned int *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*((unsigned char *)*a1 + 16) || (double result = (int *)sub_2AB7E4(**a1), result))
        {
          unint64_t v13 = v11[1] | ((unint64_t)*v11 << 32);
          double result = (int *)sub_2A98DC(&v14, &v13);
        }
        v11 += 2;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_B3FBC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_B3FBE0@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_8ED3D4((uint64_t)(*a1 + 3), __ROR8__(a2, 32), 0, "hall");
  unint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0xDu && (uint64_t v7 = v6[6]) != 0)
  {
    unint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    unint64_t v11 = (unsigned int *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    uint64_t v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*((unsigned char *)*a1 + 16) || (double result = (int *)sub_2AB7E4(**a1), result))
        {
          unint64_t v13 = v11[1] | ((unint64_t)*v11 << 32);
          double result = (int *)sub_2A98DC(&v14, &v13);
        }
        v11 += 2;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_B3FCC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B3FCE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v25 = __ROR8__(**(void **)(a2 + 8), 32);
  uint64_t result = sub_A3B950(v4 + 40, (uint64_t *)&v25);
  if (result != -1)
  {
    int v6 = *(_DWORD *)(*(void *)(a2 + 8) + 8);
    int v7 = *(_DWORD *)a1[1];
    uint64_t result = sub_A1DF34((uint64_t)v20, *(void **)(v4 + 32), v25, 0, 0, 0);
    unint64_t v8 = v23;
    uint64_t v9 = (void *)v24;
    if ((unint64_t)v23 < v24)
    {
      if (v6 < 0) {
        char v10 = -5;
      }
      else {
        char v10 = 5;
      }
      int v11 = -103 * (char)(v10 + v6 - 10 * (((1717986919 * v6) >> 34) + (1717986919 * v6 < 0)));
      signed int v12 = v7 + v6 / -10 + ((v11 >> 15) & 1) + (v11 >> 10);
      while (2)
      {
        unsigned int v13 = *((unsigned __int16 *)v8 + 4);
        unsigned int v14 = *((unsigned __int16 *)v8 + 5);
        if (v13 <= v14 + 1) {
          unsigned int v15 = v14 + 1;
        }
        else {
          unsigned int v15 = *((unsigned __int16 *)v8 + 4);
        }
        if (v14 >= v13)
        {
          uint64_t v16 = v25;
          unint64_t v17 = *(void **)a1[2];
          do
            uint64_t result = sub_B3FF04(v17, __ROR8__(*v23, 32), v13++, v16, v12, v6);
          while (v15 != v13);
          unint64_t v8 = v23;
          uint64_t v9 = (void *)v24;
        }
        v8 += 2;
        BOOL v23 = v8;
        if (v8 == v9)
        {
          unint64_t v18 = v21 + 2;
          uint64_t v21 = v18;
          if ((unint64_t)v18 < v22)
          {
            while (1)
            {
              unint64_t v8 = (void *)*v18;
              uint64_t v9 = (void *)v18[1];
              if ((void *)*v18 != v9) {
                break;
              }
              v18 += 2;
              uint64_t v21 = v18;
              if ((unint64_t)v18 >= v22) {
                return result;
              }
            }
LABEL_19:
            BOOL v23 = v8;
            unint64_t v24 = (unint64_t)v9;
            goto LABEL_20;
          }
        }
        else
        {
LABEL_20:
          while (v8 < v9)
          {
            uint64_t result = sub_A1E87C(v20);
            unint64_t v8 = v23;
            uint64_t v9 = (void *)v24;
            if (!result) {
              break;
            }
            unint64_t v8 = v23 + 2;
            BOOL v23 = v8;
            if (v8 == (void *)v24)
            {
              uint64_t v19 = v21 + 2;
              uint64_t v21 = v19;
              if ((unint64_t)v19 < v22)
              {
                while (1)
                {
                  unint64_t v8 = (void *)*v19;
                  uint64_t v9 = (void *)v19[1];
                  if ((void *)*v19 != v9) {
                    break;
                  }
                  v19 += 2;
                  uint64_t v21 = v19;
                  if ((unint64_t)v19 >= v22) {
                    return result;
                  }
                }
                goto LABEL_19;
              }
              return result;
            }
          }
          if (v8 < v9) {
            continue;
          }
        }
        break;
      }
    }
  }
  return result;
}

BOOL sub_B3FEF0(_DWORD *a1, _DWORD *a2)
{
  return *a1 < *a2;
}

uint64_t sub_B3FF04(void *a1, unint64_t a2, unsigned int a3, uint64_t a4, signed int a5, int a6)
{
  uint64_t v12 = *a1;
  unsigned int v13 = (int *)sub_A11094((void *)(*(void *)(*a1 + 32) + 4136), a2);
  unsigned int v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 9u && (uint64_t v15 = v14[4]) != 0)
  {
    uint64_t result = sub_A10764((unsigned int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15)), a3);
    if (__ROR8__(*(void *)result, 32) != a4) {
      return result;
    }
  }
  else
  {
    uint64_t result = sub_A10764(0, a3);
    if (__ROR8__(*(void *)result, 32) != a4) {
      return result;
    }
  }
  sub_A1E9A0((uint64_t)v23, *(void *)(v12 + 32), a2, a3, 0, 0);
  if (v30)
  {
    uint64_t result = sub_B40124(*(void *)(v12 + 32), (uint64_t)v23, a5, 2);
    if ((result & 1) == 0) {
      return result;
    }
  }
  else
  {
    uint64_t result = sub_B4063C((uint64_t)v23, a5, 1);
    if (!result) {
      return result;
    }
  }
  unint64_t v17 = v28;
  if ((unint64_t)v28 >= v27 && (unint64_t)v28 < v29)
  {
    if (a6 < 0) {
      char v18 = -5;
    }
    else {
      char v18 = 5;
    }
    unsigned int v19 = a6 / 10 + (((103 * (char)(v18 + a6 % 10)) >> 15) & 1) + ((103 * (char)(v18 + a6 % 10)) >> 10);
    do
    {
      uint64_t v20 = a1[1];
      if (v30) {
        uint64_t v21 = &v31;
      }
      else {
        uint64_t v21 = v17;
      }
      unint64_t v22 = (unsigned int *)((char *)v24 + *(unsigned __int16 *)((char *)v24 - *v24 + 6));
      int v32 = v19
          + *(_DWORD *)v21
          + *(unsigned int *)((char *)&v22[2 * *((_DWORD *)v17 + 1)
                                         + 1
                                         + 2 * ((unint64_t)(v26 - v25) >> 4)]
                            + *v22);
      if (**(_DWORD **)v20 >= v32) {
        sub_745A4(*(void *)(v20 + 8), &v32);
      }
      uint64_t result = sub_A2020C((uint64_t)v23, 0);
      unint64_t v17 = v28;
    }
    while ((unint64_t)v28 >= v27 && (unint64_t)v28 < v29);
  }
  return result;
}

BOOL sub_B40124(uint64_t a1, uint64_t a2, signed int a3, int a4)
{
  uint64_t v4 = -1431655765 * ((*(void *)(a2 + 72) - *(void *)(a2 + 56)) >> 2);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(a2 + 88);
  uint64_t v9 = (*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4;
  char v10 = (void *)(a1 + 4136);
  uint64_t v11 = 4 * v8;
  while (1)
  {
    uint64_t v12 = sub_A10650(v10, v8);
    unsigned int v13 = &v12[-*(int *)v12];
    if (*(unsigned __int16 *)v13 < 5u)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = *((unsigned __int16 *)v13 + 2);
      if (v14) {
        v14 += (uint64_t)&v12[*(unsigned int *)&v12[v14]];
      }
    }
    uint64_t v15 = (int *)(v14 + v11 + 4 + *(unsigned int *)(v14 + v11 + 4));
    uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v16 >= 7u && (uint64_t v17 = v16[3]) != 0) {
      char v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
    }
    else {
      char v18 = 0;
    }
    uint64_t v19 = sub_A1FDE4(v18, v7);
    int v20 = sub_A1FBEC(v10, v8, v7, *(unsigned __int8 *)(v19 + 8) - 1);
    uint64_t v21 = sub_A10650(v10, v8);
    unint64_t v22 = (int *)v21;
    BOOL v23 = &v21[-*(int *)v21];
    if (*(unsigned __int16 *)v23 < 5u)
    {
      uint64_t v24 = 0;
    }
    else
    {
      uint64_t v24 = *((unsigned __int16 *)v23 + 2);
      if (v24) {
        v24 += (uint64_t)&v21[*(unsigned int *)&v21[v24]];
      }
    }
    uint64_t v25 = (int *)(v24 + v11 + 4 + *(unsigned int *)(v24 + v11 + 4));
    uint64_t v26 = (unsigned __int16 *)((char *)v25 - *v25);
    if (*v26 >= 7u && (uint64_t v27 = v26[3]) != 0) {
      int v28 = (unsigned int *)((char *)v25 + v27 + *(unsigned int *)((char *)v25 + v27));
    }
    else {
      int v28 = 0;
    }
    uint64_t v29 = sub_A1FDE4(v28, v7);
    char v30 = (unsigned __int16 *)((char *)v22 - *v22);
    if (*v30 < 7u)
    {
      uint64_t v31 = 0;
    }
    else
    {
      uint64_t v31 = (unsigned int *)v30[3];
      if (v31) {
        uint64_t v31 = (unsigned int *)((char *)v31 + (void)v22 + *(unsigned int *)((char *)v31 + (void)v22));
      }
    }
    if (*(_DWORD *)sub_A200AC(v31, *(_DWORD *)(v29 + 4) + (int)v9) + v20 >= a3) {
      break;
    }
    if (++v7 == v4) {
      return 0;
    }
  }
  if (v7 == -1) {
    return 0;
  }
  unint64_t v32 = *(void *)(a2 + 88);
  uint64_t v34 = *(void *)(a2 + 24);
  uint64_t v33 = *(void *)(a2 + 32);
  uint64_t v35 = sub_A10650(v10, v32);
  uint64_t v36 = &v35[-*(int *)v35];
  if (*(unsigned __int16 *)v36 < 5u)
  {
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = *((unsigned __int16 *)v36 + 2);
    if (v37) {
      v37 += (uint64_t)&v35[*(unsigned int *)&v35[v37]];
    }
  }
  uint64_t v38 = 4 * v32;
  uint64_t v39 = (int *)(v37 + v38 + 4 + *(unsigned int *)(v37 + v38 + 4));
  unint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
  if (*v40 >= 7u && (uint64_t v41 = v40[3]) != 0) {
    unint64_t v42 = (unsigned int *)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
  }
  else {
    unint64_t v42 = 0;
  }
  unint64_t v43 = v33 - v34;
  uint64_t v44 = *(unsigned __int8 *)(sub_A1FDE4(v42, v7) + 8);
  uint64_t v45 = sub_A10650(v10, v32);
  uint64_t v46 = (int *)v45;
  int v47 = &v45[-*(int *)v45];
  if (*(unsigned __int16 *)v47 < 5u)
  {
    uint64_t v48 = 0;
  }
  else
  {
    uint64_t v48 = *((unsigned __int16 *)v47 + 2);
    if (v48) {
      v48 += (uint64_t)&v45[*(unsigned int *)&v45[v48]];
    }
  }
  unint64_t v49 = v43 >> 4;
  int v50 = (int *)(v48 + v38 + 4 + *(unsigned int *)(v48 + v38 + 4));
  int v51 = (unsigned __int16 *)((char *)v50 - *v50);
  if (*v51 >= 7u && (uint64_t v52 = v51[3]) != 0) {
    uint64_t v53 = (unsigned int *)((char *)v50 + v52 + *(unsigned int *)((char *)v50 + v52));
  }
  else {
    uint64_t v53 = 0;
  }
  uint64_t v54 = sub_A1FDE4(v53, v7);
  uint64_t v55 = (unsigned __int16 *)((char *)v46 - *v46);
  if (*v55 < 7u)
  {
    uint64_t v57 = (int *)sub_A200AC(0, *(_DWORD *)(v54 + 4) + (int)v49);
    if (!v44)
    {
LABEL_52:
      LODWORD(v58) = -1;
      goto LABEL_53;
    }
  }
  else
  {
    unint64_t v56 = (unsigned int *)v55[3];
    if (v56) {
      unint64_t v56 = (unsigned int *)((char *)v56 + (void)v46 + *(unsigned int *)((char *)v56 + (void)v46));
    }
    uint64_t v57 = (int *)sub_A200AC(v56, *(_DWORD *)(v54 + 4) + (int)v49);
    if (!v44) {
      goto LABEL_52;
    }
  }
  uint64_t v58 = 0;
  int v59 = *v57;
  while ((int)(sub_A1FBEC(v10, v32, v7, v58) + v59) < a3)
  {
    if (v44 == ++v58) {
      goto LABEL_52;
    }
  }
LABEL_53:
  unint64_t v60 = *(void *)(a2 + 88);
  uint64_t v61 = *(void *)(a2 + 24);
  uint64_t v78 = *(void *)(a2 + 32);
  uint64_t v62 = sub_A10650(v10, v60);
  int v63 = (int *)v62;
  BOOL v64 = &v62[-*(int *)v62];
  if (*(unsigned __int16 *)v64 < 5u)
  {
    uint64_t v65 = 0;
  }
  else
  {
    uint64_t v65 = *((unsigned __int16 *)v64 + 2);
    if (v65) {
      v65 += (uint64_t)&v62[*(unsigned int *)&v62[v65]];
    }
  }
  long long v66 = (int *)(v65 + 4 * v60 + 4 + *(unsigned int *)(v65 + 4 * v60 + 4));
  int64_t v67 = (unsigned __int16 *)((char *)v66 - *v66);
  if (*v67 >= 7u && (uint64_t v68 = v67[3]) != 0) {
    unint64_t v69 = (unsigned int *)((char *)v66 + v68 + *(unsigned int *)((char *)v66 + v68));
  }
  else {
    unint64_t v69 = 0;
  }
  uint64_t v70 = sub_A1FDE4(v69, v7);
  unint64_t v71 = (unsigned __int16 *)((char *)v63 - *v63);
  if (*v71 < 7u)
  {
    long long v72 = 0;
  }
  else
  {
    long long v72 = (unsigned int *)v71[3];
    if (v72) {
      long long v72 = (unsigned int *)((char *)v72 + (void)v63 + *(unsigned int *)((char *)v72 + (void)v63));
    }
  }
  int v73 = *(_DWORD *)sub_A200AC(v72, *(_DWORD *)(v70 + 4) + ((unint64_t)(v78 - v61) >> 4));
  int v74 = sub_A1FCE8(v10, v60, v7, v58);
  *(void *)(a2 + 64) = *(void *)(a2 + 56) + 12 * v7;
  if (*(unsigned char *)(a2 + 96))
  {
    int v75 = a3 - v73;
    if (a3 - v73 <= v74) {
      int v75 = v74;
    }
    *(_DWORD *)(a2 + 100) = v58;
    *(_DWORD *)(a2 + 104) = v75;
  }
  sub_A2020C(a2, a4);
  unint64_t v76 = *(void *)(a2 + 64);
  if (v76 < *(void *)(a2 + 56)) {
    return 0;
  }
  return v76 < *(void *)(a2 + 72);
}

uint64_t sub_B4063C(uint64_t a1, int a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  unsigned int v8 = -1431655765 * ((v6 - v5) >> 2);
  if (v7) {
    LODWORD(v7) = *(_DWORD *)(v7 + 32);
  }
  if (v7 == v8) {
    return 0;
  }
  if (!a3) {
    goto LABEL_25;
  }
  if (v8 < 0x41)
  {
    unint64_t v24 = *(void *)(a1 + 64);
    if (v24 >= v5 && v24 < v6) {
      goto LABEL_25;
    }
LABEL_24:
    sub_A1ECE8(a1);
    goto LABEL_25;
  }
  sub_A1ECE8(a1);
  if (*(unsigned char *)(a1 + 96)) {
    uint64_t v9 = (_DWORD *)(a1 + 104);
  }
  else {
    uint64_t v9 = *(_DWORD **)(a1 + 64);
  }
  char v10 = (unsigned int *)(*(void *)(a1 + 16) + *(unsigned __int16 *)(*(void *)(a1 + 16) - **(int **)(a1 + 16) + 6));
  int v11 = *(unsigned int *)((char *)&v10[2 * *(_DWORD *)(*(void *)(a1 + 64) + 4)
                                     + 1
                                     + 2 * ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4)]
                        + *v10)
      + *v9;
  sub_A20620((void *)a1);
  int v12 = *(unsigned __int8 *)(a1 + 96);
  if (*(unsigned char *)(a1 + 96)) {
    unsigned int v13 = (_DWORD *)(a1 + 104);
  }
  else {
    unsigned int v13 = *(_DWORD **)(a1 + 64);
  }
  if (a2 <= v11) {
    goto LABEL_24;
  }
  uint64_t v14 = (unsigned int *)(*(void *)(a1 + 16) + *(unsigned __int16 *)(*(void *)(a1 + 16) - **(int **)(a1 + 16) + 6));
  int v15 = *(unsigned int *)((char *)&v14[2 * *(_DWORD *)(*(void *)(a1 + 64) + 4)
                                     + 2
                                     + 2 * ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4)]
                        + *v14)
      + *v13;
  if (v15 <= a2)
  {
    sub_A20620((void *)a1);
    unint64_t v26 = *(void *)(a1 + 56);
    uint64_t v25 = *(_DWORD **)(a1 + 64);
    if ((unint64_t)v25 >= v26)
    {
LABEL_26:
      while ((unint64_t)v25 < *(void *)(a1 + 72))
      {
        if (*(unsigned char *)(a1 + 96)) {
          uint64_t v27 = (_DWORD *)(a1 + 104);
        }
        else {
          uint64_t v27 = v25;
        }
        int v28 = (unsigned int *)(*(void *)(a1 + 16)
                             + *(unsigned __int16 *)(*(void *)(a1 + 16) - **(int **)(a1 + 16) + 6));
        if ((int)(*(unsigned int *)((char *)&v28[2 * v25[1]
                                                + 1
                                                + 2 * ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4)]
                                   + *v28)
                 + *v27) < a2)
          goto LABEL_33;
        sub_A20748(a1, 0);
        unint64_t v26 = *(void *)(a1 + 56);
        uint64_t v25 = *(_DWORD **)(a1 + 64);
        if ((unint64_t)v25 < v26) {
          goto LABEL_32;
        }
      }
    }
    goto LABEL_32;
  }
  double v16 = (double)(a2 - v11) / (double)(v15 - v11);
  uint64_t v17 = *(void *)(a1 + 56);
  unint64_t v18 = (v16
                     * (double)(-1431655765 * ((unint64_t)(*(void *)(a1 + 72) - v17) >> 2) - 1));
  *(void *)(a1 + 64) = v17 + 12 * v18;
  if (v12) {
    *(void *)(a1 + 100) = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v19 = *(unsigned int **)(a1 + 80);
  if (v19)
  {
    int v20 = sub_51D60((unsigned __int8 *)(*(void *)a1 + 3896));
    uint64_t v21 = *v19;
    if (v21 <= v18)
    {
      uint64_t v22 = *((void *)v19 + 1);
      if (*((void *)v19 + 2) + v21 - v22 > v18)
      {
        unsigned int v23 = *(unsigned __int8 *)(v22 + (v18 - v21));
        if ((v23 & 1) != 0 && ((v23 >> 1) & 1 & ~v20) == 0) {
          goto LABEL_24;
        }
      }
    }
  }
LABEL_25:
  unint64_t v26 = *(void *)(a1 + 56);
  uint64_t v25 = *(_DWORD **)(a1 + 64);
  if ((unint64_t)v25 >= v26) {
    goto LABEL_26;
  }
LABEL_32:
  sub_A2020C(a1, 0);
  unint64_t v26 = *(void *)(a1 + 56);
  uint64_t v25 = *(_DWORD **)(a1 + 64);
LABEL_33:
  if ((unint64_t)v25 >= v26)
  {
    while ((unint64_t)v25 < *(void *)(a1 + 72))
    {
      if (*(unsigned char *)(a1 + 96)) {
        uint64_t v29 = (_DWORD *)(a1 + 104);
      }
      else {
        uint64_t v29 = v25;
      }
      char v30 = (unsigned int *)(*(void *)(a1 + 16)
                           + *(unsigned __int16 *)(*(void *)(a1 + 16) - **(int **)(a1 + 16) + 6));
      if ((int)(*(unsigned int *)((char *)&v30[2 * v25[1]
                                              + 1
                                              + 2 * ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4)]
                                 + *v30)
               + *v29) >= a2)
        return 1;
      sub_A2020C(a1, 0);
      uint64_t v25 = *(_DWORD **)(a1 + 64);
      if ((unint64_t)v25 < *(void *)(a1 + 56)) {
        return 0;
      }
    }
  }
  return 0;
}

uint64_t sub_B40974(uint64_t result, int *a2, unsigned int (**a3)(int *, int *), uint64_t a4, char a5)
{
  char v10 = (int *)result;
LABEL_2:
  int v11 = a2 - 1;
  uint64_t v83 = a2 - 3;
  char v84 = a2 - 2;
  int v12 = v10;
  while (1)
  {
    char v10 = v12;
    uint64_t v13 = (char *)a2 - (char *)v12;
    unint64_t v14 = a2 - v12;
    if (v6 || !v5) {
      break;
    }
    if (v13 <= 95)
    {
      unint64_t v71 = v12 + 1;
      BOOL v73 = v12 == a2 || v71 == a2;
      if (a5)
      {
        if (!v73)
        {
          uint64_t v74 = 0;
          int v75 = v12;
          do
          {
            unint64_t v77 = v75;
            int v75 = v71;
            uint64_t result = ((uint64_t (*)(int *, int *))*a3)(v71, v77);
            if (result)
            {
              int v86 = *v75;
              uint64_t v78 = v74;
              do
              {
                *(int *)((char *)v12 + v78 + 4) = *(int *)((char *)v12 + v78);
                if (!v78)
                {
                  unint64_t v76 = v12;
                  goto LABEL_123;
                }
                v78 -= 4;
                uint64_t result = ((uint64_t (*)(int *, char *))*a3)(&v86, (char *)v12 + v78);
              }
              while ((result & 1) != 0);
              unint64_t v76 = (int *)((char *)v12 + v78 + 4);
LABEL_123:
              *unint64_t v76 = v86;
            }
            unint64_t v71 = v75 + 1;
            v74 += 4;
          }
          while (v75 + 1 != a2);
        }
      }
      else if (!v73)
      {
        unsigned int v80 = v12 - 1;
        do
        {
          char v81 = v10;
          char v10 = v71;
          uint64_t result = ((uint64_t (*)(int *, int *))*a3)(v71, v81);
          if (result)
          {
            int v86 = *v10;
            unint64_t v82 = v80;
            do
            {
              v82[2] = v82[1];
              uint64_t result = ((uint64_t (*)(int *, int *))*a3)(&v86, v82--);
            }
            while ((result & 1) != 0);
            v82[2] = v86;
          }
          unint64_t v71 = v10 + 1;
          ++v80;
        }
        while (v10 + 1 != a2);
      }
      return result;
    }
    if (!a4)
    {
      if (v12 != a2) {
        return (uint64_t)sub_B417DC(v12, a2, a2, a3);
      }
      return result;
    }
    unint64_t v15 = v14 >> 1;
    double v16 = &v12[v14 >> 1];
    uint64_t v17 = *a3;
    if ((unint64_t)v13 >= 0x201)
    {
      char v18 = v17(&v10[v14 >> 1], v10);
      unsigned int v19 = (*a3)(a2 - 1, v16);
      if (v18)
      {
        int v20 = *v10;
        if (v19)
        {
          int *v10 = *v11;
          goto LABEL_24;
        }
        int *v10 = *v16;
        *double v16 = v20;
        if ((*a3)(a2 - 1, v16))
        {
          int v20 = *v16;
          *double v16 = *v11;
LABEL_24:
          *int v11 = v20;
        }
      }
      else if (v19)
      {
        int v24 = *v16;
        *double v16 = *v11;
        *int v11 = v24;
        if ((*a3)(v16, v10))
        {
          int v25 = *v10;
          int *v10 = *v16;
          *double v16 = v25;
        }
      }
      int v28 = v10 + 1;
      uint64_t v29 = &v10[v15 - 1];
      char v30 = (*a3)(v29, v10 + 1);
      unsigned int v31 = (*a3)(v84, v29);
      if (v30)
      {
        int v32 = *v28;
        if (v31)
        {
          uint64_t v33 = a2 - 2;
          *int v28 = *v84;
          goto LABEL_38;
        }
        *int v28 = *v29;
        *uint64_t v29 = v32;
        if ((*a3)(v84, &v10[v15 - 1]))
        {
          int v32 = *v29;
          uint64_t v33 = a2 - 2;
          *uint64_t v29 = *v84;
LABEL_38:
          *uint64_t v33 = v32;
        }
      }
      else if (v31)
      {
        int v34 = *v29;
        *uint64_t v29 = *v84;
        int *v84 = v34;
        if ((*a3)(&v10[v15 - 1], v10 + 1))
        {
          int v35 = *v28;
          *int v28 = *v29;
          *uint64_t v29 = v35;
        }
      }
      uint64_t v37 = v10 + 2;
      uint64_t v38 = &v10[v15 + 1];
      char v39 = (*a3)(v38, v10 + 2);
      unsigned int v40 = (*a3)(v83, v38);
      if (v39)
      {
        int v41 = *v37;
        if (v40)
        {
          unint64_t v42 = a2 - 3;
          int *v37 = *v83;
          goto LABEL_47;
        }
        int *v37 = *v38;
        *uint64_t v38 = v41;
        if ((*a3)(v83, v38))
        {
          int v41 = *v38;
          unint64_t v42 = a2 - 3;
          *uint64_t v38 = *v83;
LABEL_47:
          int *v42 = v41;
        }
      }
      else if (v40)
      {
        int v43 = *v38;
        *uint64_t v38 = *v83;
        *uint64_t v83 = v43;
        if ((*a3)(v38, v10 + 2))
        {
          int v44 = *v37;
          int *v37 = *v38;
          *uint64_t v38 = v44;
        }
      }
      char v45 = (*a3)(v16, v29);
      unsigned int v46 = (*a3)(v38, v16);
      if (v45)
      {
        int v47 = *v29;
        if (v46)
        {
          *uint64_t v29 = *v38;
          *uint64_t v38 = v47;
          int v48 = *v16;
          goto LABEL_57;
        }
        *uint64_t v29 = *v16;
        *double v16 = v47;
        unsigned int v51 = (*a3)(v38, v16);
        int v48 = *v16;
        if (v51)
        {
          int v50 = *v38;
          *double v16 = *v38;
          *uint64_t v38 = v48;
LABEL_56:
          int v48 = v50;
        }
      }
      else
      {
        int v48 = *v16;
        if (v46)
        {
          *double v16 = *v38;
          *uint64_t v38 = v48;
          unsigned int v49 = (*a3)(v16, v29);
          int v48 = *v16;
          if (v49)
          {
            int v50 = *v29;
            *uint64_t v29 = v48;
            *double v16 = v50;
            goto LABEL_56;
          }
        }
      }
LABEL_57:
      int v52 = *v10;
      int *v10 = v48;
      *double v16 = v52;
      --a4;
      if (a5) {
        goto LABEL_35;
      }
      goto LABEL_58;
    }
    char v21 = v17(v10, &v10[v14 >> 1]);
    unsigned int v22 = (*a3)(a2 - 1, v10);
    if (v21)
    {
      int v23 = *v16;
      if (v22)
      {
        *double v16 = *v11;
      }
      else
      {
        *double v16 = *v10;
        int *v10 = v23;
        if (!(*a3)(a2 - 1, v10)) {
          goto LABEL_34;
        }
        int v23 = *v10;
        int *v10 = *v11;
      }
      *int v11 = v23;
LABEL_34:
      --a4;
      if (a5) {
        goto LABEL_35;
      }
LABEL_58:
      char v53 = (*a3)(v10 - 1, v10);
      int v36 = *v10;
      if (v53) {
        goto LABEL_59;
      }
      int v86 = *v10;
      uint64_t result = ((uint64_t (*)(int *, int *))*a3)(&v86, a2 - 1);
      if (result)
      {
        int v12 = v10;
        do
          uint64_t result = ((uint64_t (*)(int *, int *))*a3)(&v86, ++v12);
        while ((result & 1) == 0);
      }
      else
      {
        uint64_t v62 = v10 + 1;
        do
        {
          int v12 = v62;
          if (v62 >= a2) {
            break;
          }
          uint64_t result = ((uint64_t (*)(int *, int *))*a3)(&v86, v62);
          uint64_t v62 = v12 + 1;
        }
        while (!result);
      }
      int v63 = a2;
      if (v12 < a2)
      {
        int v63 = a2;
        do
          uint64_t result = ((uint64_t (*)(int *, int *))*a3)(&v86, --v63);
        while ((result & 1) != 0);
      }
      while (v12 < v63)
      {
        int v64 = *v12;
        *int v12 = *v63;
        int *v63 = v64;
        do
          ++v12;
        while (!(*a3)(&v86, v12));
        do
          uint64_t result = ((uint64_t (*)(int *, int *))*a3)(&v86, --v63);
        while ((result & 1) != 0);
      }
      uint64_t v65 = v12 - 1;
      BOOL v5 = v12 - 1 >= v10;
      BOOL v6 = v12 - 1 == v10;
      if (v12 - 1 != v10) {
        int *v10 = *v65;
      }
      a5 = 0;
      *uint64_t v65 = v86;
    }
    else
    {
      if (!v22) {
        goto LABEL_34;
      }
      int v26 = *v10;
      int *v10 = *v11;
      *int v11 = v26;
      if (!(*a3)(v10, v16)) {
        goto LABEL_34;
      }
      int v27 = *v16;
      *double v16 = *v10;
      int *v10 = v27;
      --a4;
      if ((a5 & 1) == 0) {
        goto LABEL_58;
      }
LABEL_35:
      int v36 = *v10;
LABEL_59:
      uint64_t v54 = 0;
      int v86 = v36;
      do
        ++v54;
      while ((((uint64_t (*)(int *, int *))*a3)(&v10[v54], &v86) & 1) != 0);
      uint64_t v55 = &v10[v54];
      unint64_t v56 = a2;
      if (v54 == 1)
      {
        unint64_t v56 = a2;
        do
        {
          if (v55 >= v56) {
            break;
          }
          --v56;
        }
        while ((((uint64_t (*)(int *, int *))*a3)(v56, &v86) & 1) == 0);
      }
      else
      {
        do
          --v56;
        while (!(*a3)(v56, &v86));
      }
      if (v55 >= v56)
      {
        unint64_t v60 = v55 - 1;
        if (v55 - 1 == v10) {
          goto LABEL_77;
        }
LABEL_76:
        int *v10 = *v60;
        goto LABEL_77;
      }
      uint64_t v57 = &v10[v54];
      uint64_t v58 = v56;
      do
      {
        int v59 = *v57;
        int *v57 = *v58;
        int *v58 = v59;
        do
          ++v57;
        while ((((uint64_t (*)(int *, int *))*a3)(v57, &v86) & 1) != 0);
        do
          --v58;
        while (!(*a3)(v58, &v86));
      }
      while (v57 < v58);
      unint64_t v60 = v57 - 1;
      if (v57 - 1 != v10) {
        goto LABEL_76;
      }
LABEL_77:
      int *v60 = v86;
      if (v55 < v56) {
        goto LABEL_80;
      }
      BOOL v61 = sub_B41304(v10, v60, (uint64_t (**)(int *, int *))a3);
      int v12 = v60 + 1;
      uint64_t result = sub_B41304(v60 + 1, a2, (uint64_t (**)(int *, int *))a3);
      if (result)
      {
        a2 = v60;
        if (v61) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v61)
      {
LABEL_80:
        uint64_t result = sub_B40974(v10, v60, a3, a4, a5 & 1);
        a5 = 0;
        int v12 = v60 + 1;
      }
    }
  }
  switch(v14)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t result = ((uint64_t (*)(int *, int *))*a3)(a2 - 1, v12);
      if (!result) {
        return result;
      }
      int v66 = *v12;
      goto LABEL_106;
    case 3uLL:
      int64_t v67 = v12 + 1;
      char v68 = (*a3)(v12 + 1, v12);
      uint64_t result = ((uint64_t (*)(int *, int *))*a3)(v11, v12 + 1);
      if (v68)
      {
        int v66 = *v12;
        if (result)
        {
LABEL_106:
          *int v12 = *v11;
        }
        else
        {
          *int v12 = v12[1];
          v12[1] = v66;
          uint64_t result = ((uint64_t (*)(int *, int *))*a3)(v11, v12 + 1);
          if (!result) {
            return result;
          }
          int v66 = *v67;
          *int64_t v67 = *v11;
        }
        *int v11 = v66;
        return result;
      }
      if (result)
      {
        int v79 = v12[1];
        v12[1] = *v11;
        *int v11 = v79;
LABEL_134:
        uint64_t result = ((uint64_t (*)(int *, int *))*a3)(v67, v12);
        if (result) {
          *(int32x2_t *)int v12 = vrev64_s32(*(int32x2_t *)v12);
        }
      }
      break;
    case 4uLL:
      return sub_B41688(v12, v12 + 1, v12 + 2, a2 - 1, (uint64_t (**)(int *, int *))a3);
    case 5uLL:
      int64_t v67 = v12 + 1;
      unint64_t v69 = v12 + 3;
      sub_B41688(v12, v12 + 1, v12 + 2, v12 + 3, (uint64_t (**)(int *, int *))a3);
      uint64_t result = ((uint64_t (*)(int *, int *))*a3)(v11, v12 + 3);
      if (!result) {
        return result;
      }
      int v70 = *v69;
      *unint64_t v69 = *v11;
      *int v11 = v70;
      uint64_t result = ((uint64_t (*)(int *, int *))*a3)(v12 + 3, v12 + 2);
      if (!result) {
        return result;
      }
      *((int32x2_t *)v12 + 1) = vrev64_s32(*(int32x2_t *)(v12 + 2));
      uint64_t result = ((uint64_t (*)(int *, int *))*a3)(v12 + 2, v12 + 1);
      if (!result) {
        return result;
      }
      *(int32x2_t *)(v12 + 1) = vrev64_s32(*(int32x2_t *)(v12 + 1));
      goto LABEL_134;
    default:
      JUMPOUT(0);
  }
  return result;
}

BOOL sub_B41304(int *a1, int *a2, uint64_t (**a3)(int *, int *))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        int v9 = *a1;
        *a1 = *v8;
        int *v8 = v9;
      }
      return 1;
    case 3:
      char v10 = a1 + 1;
      int v11 = a2 - 1;
      char v12 = (*a3)(a1 + 1, a1);
      int v13 = (*a3)(v11, a1 + 1);
      if (v12)
      {
        int v14 = *a1;
        if (v13)
        {
          *a1 = *v11;
          *int v11 = v14;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v14;
          if ((*a3)(v11, a1 + 1))
          {
            int v23 = *v10;
            int *v10 = *v11;
            *int v11 = v23;
          }
        }
      }
      else if (v13)
      {
        int v22 = a1[1];
        a1[1] = *v11;
        *int v11 = v22;
LABEL_17:
        if ((*a3)(v10, a1)) {
          *(int32x2_t *)a1 = vrev64_s32(*(int32x2_t *)a1);
        }
      }
      return 1;
    case 4:
      sub_B41688(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      char v10 = a1 + 1;
      unint64_t v15 = a1 + 3;
      double v16 = a2 - 1;
      sub_B41688(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (!(*a3)(v16, a1 + 3)) {
        return 1;
      }
      int v17 = *v15;
      int *v15 = *v16;
      *double v16 = v17;
      if (!(*a3)(a1 + 3, a1 + 2)) {
        return 1;
      }
      *((int32x2_t *)a1 + 1) = vrev64_s32(*(int32x2_t *)(a1 + 2));
      if (!(*a3)(a1 + 2, a1 + 1)) {
        return 1;
      }
      *(int32x2_t *)(a1 + 1) = vrev64_s32(*(int32x2_t *)(a1 + 1));
      goto LABEL_17;
    default:
      char v18 = a1 + 2;
      char v19 = (*a3)(a1 + 1, a1);
      int v20 = (*a3)(a1 + 2, a1 + 1);
      if (v19)
      {
        int v21 = *a1;
        if (v20)
        {
          *a1 = a1[2];
          a1[2] = v21;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v21;
          if ((*a3)(a1 + 2, a1 + 1)) {
            *(int32x2_t *)(a1 + 1) = vrev64_s32(*(int32x2_t *)(a1 + 1));
          }
        }
      }
      else if (v20)
      {
        *(int32x2_t *)(a1 + 1) = vrev64_s32(*(int32x2_t *)(a1 + 1));
        if ((*a3)(a1 + 1, a1)) {
          *(int32x2_t *)a1 = vrev64_s32(*(int32x2_t *)a1);
        }
      }
      int v24 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v25 = 0;
      int v26 = 0;
      break;
  }
  while (!(*a3)(v24, v18))
  {
LABEL_35:
    char v18 = v24;
    v25 += 4;
    if (++v24 == a2) {
      return 1;
    }
  }
  int v29 = *v24;
  uint64_t v27 = v25;
  do
  {
    uint64_t v28 = (uint64_t)a1 + v27;
    *(int *)((char *)a1 + v27 + 12) = *(int *)((char *)a1 + v27 + 8);
    if (v27 == -8)
    {
      *a1 = v29;
      if (++v26 != 8) {
        goto LABEL_35;
      }
      return v24 + 1 == a2;
    }
    v27 -= 4;
  }
  while (((*a3)(&v29, (int *)(v28 + 4)) & 1) != 0);
  *(int *)((char *)a1 + v27 + 12) = v29;
  if (++v26 != 8) {
    goto LABEL_35;
  }
  return v24 + 1 == a2;
}

uint64_t sub_B41688(int *a1, int *a2, int *a3, int *a4, uint64_t (**a5)(int *, int *))
{
  char v10 = (*a5)(a2, a1);
  int v11 = (*a5)(a3, a2);
  if (v10)
  {
    int v12 = *a1;
    if (v11)
    {
      *a1 = *a3;
LABEL_9:
      *a3 = v12;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v12;
    if ((*a5)(a3, a2))
    {
      int v12 = *a2;
      *a2 = *a3;
      goto LABEL_9;
    }
  }
  else if (v11)
  {
    int v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if ((*a5)(a2, a1))
    {
      int v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
    }
  }
LABEL_10:
  uint64_t result = (*a5)(a4, a3);
  if (result)
  {
    int v16 = *a3;
    *a3 = *a4;
    *a4 = v16;
    uint64_t result = (*a5)(a3, a2);
    if (result)
    {
      int v17 = *a2;
      *a2 = *a3;
      *a3 = v17;
      uint64_t result = (*a5)(a2, a1);
      if (result)
      {
        int v18 = *a1;
        *a1 = *a2;
        *a2 = v18;
      }
    }
  }
  return result;
}

int *sub_B417DC(int *a1, int *a2, int *a3, unsigned int (**a4)(int *, int *))
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v51 = v4;
  uint64_t v52 = v5;
  int v47 = a2;
  uint64_t v8 = a2 - a1;
  int v43 = a3;
  uint64_t v44 = (char *)a2 - (char *)a1;
  if ((char *)a2 - (char *)a1 >= 5 && (unint64_t)v44 >= 8)
  {
    int64_t v35 = (unint64_t)(v8 - 2) >> 1;
    int64_t v36 = v35;
    do
    {
      if (v35 >= v36)
      {
        uint64_t v37 = (2 * v36) | 1;
        uint64_t v38 = &a1[v37];
        if (2 * v36 + 2 < v8 && (*a4)(&a1[v37], v38 + 1))
        {
          ++v38;
          uint64_t v37 = 2 * v36 + 2;
        }
        char v39 = &a1[v36];
        if ((((uint64_t (*)(int *, int *))*a4)(v38, v39) & 1) == 0)
        {
          int v48 = *v39;
          do
          {
            unsigned int v40 = v38;
            int *v39 = *v38;
            if (v35 < v37) {
              break;
            }
            uint64_t v41 = (2 * v37) | 1;
            uint64_t v38 = &a1[v41];
            uint64_t v42 = 2 * v37 + 2;
            if (v42 < v8 && (*a4)(&a1[v41], v38 + 1))
            {
              ++v38;
              uint64_t v41 = v42;
            }
            char v39 = v40;
            uint64_t v37 = v41;
          }
          while (!(*a4)(v38, &v48));
          *unsigned int v40 = v48;
        }
      }
      BOOL v22 = v36-- <= 0;
    }
    while (!v22);
  }
  a3 = v47;
  int v9 = v43;
  uint64_t v10 = v44;
  if (v47 != v43)
  {
    if (v44 < 8)
    {
      int v11 = v47;
      do
      {
        if (((unsigned int (*)(int *, int *, int *))*a4)(v11, a1, a3))
        {
          int v12 = *v11;
          *int v11 = *a1;
          *a1 = v12;
        }
        ++v11;
      }
      while (v11 != v43);
LABEL_28:
      a3 = v9;
      goto LABEL_29;
    }
    char v45 = a1 + 1;
    int v13 = v47;
    while (1)
    {
      if (((unsigned int (*)(int *, int *, int *))*a4)(v13, a1, a3))
      {
        int v14 = *v13;
        int *v13 = *a1;
        *a1 = v14;
        if (v10 == 8)
        {
          unint64_t v15 = a1 + 1;
          int64_t v16 = 1;
          if ((((uint64_t (*)(_DWORD *, int *))*a4)(v45, a1) & 1) == 0) {
            goto LABEL_21;
          }
        }
        else
        {
          unint64_t v15 = a1 + 2;
          if ((*a4)(v45, a1 + 2))
          {
            int64_t v16 = 2;
          }
          else
          {
            unint64_t v15 = a1 + 1;
            int64_t v16 = 1;
          }
          if ((((uint64_t (*)(int *, int *))*a4)(v15, a1) & 1) == 0)
          {
LABEL_21:
            int v49 = *a1;
            int v17 = a1;
            do
            {
              char v19 = v15;
              *int v17 = *v15;
              if ((uint64_t)((unint64_t)(v8 - 2) >> 1) < v16) {
                break;
              }
              uint64_t v20 = (2 * v16) | 1;
              unint64_t v15 = &a1[v20];
              if (2 * v16 + 2 < v8 && (*a4)(&a1[v20], v15 + 1))
              {
                ++v15;
                uint64_t v20 = 2 * v16 + 2;
              }
              unsigned int v18 = (*a4)(v15, &v49);
              int v17 = v19;
              int64_t v16 = v20;
            }
            while (!v18);
            int *v19 = v49;
            int v9 = v43;
            uint64_t v10 = v44;
          }
        }
      }
      if (++v13 == v9) {
        goto LABEL_28;
      }
    }
  }
LABEL_29:
  if (v10 >= 5)
  {
    unsigned int v46 = a3;
    uint64_t v21 = (unint64_t)v10 >> 2;
    do
    {
      uint64_t v23 = 0;
      int v24 = *a1;
      uint64_t v25 = a1;
      do
      {
        int v26 = &v25[v23 + 1];
        uint64_t v27 = (2 * v23) | 1;
        uint64_t v28 = 2 * v23 + 2;
        if (v28 < v21 && (*a4)(&v25[v23 + 1], &v25[v23 + 2]))
        {
          ++v26;
          uint64_t v27 = v28;
        }
        *uint64_t v25 = *v26;
        uint64_t v25 = v26;
        uint64_t v23 = v27;
      }
      while (v27 <= (uint64_t)((unint64_t)(v21 - 2) >> 1));
      int v29 = v47 - 1;
      if (v26 == v47 - 1)
      {
        *int v26 = v24;
      }
      else
      {
        *int v26 = *v29;
        *int v29 = v24;
        uint64_t v30 = (char *)v26 - (char *)a1 + 4;
        if (v30 >= 5)
        {
          unint64_t v31 = (((unint64_t)v30 >> 2) - 2) >> 1;
          int v32 = &a1[v31];
          if ((*a4)(v32, v26))
          {
            int v50 = *v26;
            do
            {
              uint64_t v33 = v32;
              *int v26 = *v32;
              if (!v31) {
                break;
              }
              unint64_t v31 = (v31 - 1) >> 1;
              int v32 = &a1[v31];
              int v26 = v33;
            }
            while ((((uint64_t (*)(int *, int *))*a4)(v32, &v50) & 1) != 0);
            *uint64_t v33 = v50;
          }
        }
      }
      --v47;
      BOOL v22 = v21-- <= 2;
    }
    while (!v22);
    return v46;
  }
  return a3;
}

void sub_B41C34(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v33);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 112) = *a2;
  *(_OWORD *)(a1 + 128) = v4;
  sub_B42C64(a1);
  uint64_t v5 = *(void *)(a1 + 48);
  v34[0] = 0x1FFFFFFFELL;
  *(_DWORD *)(a1 + 432) = sub_A3B520(v5, v34);
  if (!*(unsigned char *)(a1 + 33) || sub_A276F8(*(void *)(a1 + 40)))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    v34[0] = 0x1FFFFFFFDLL;
    int v7 = sub_A3B520(v6, v34);
    sub_B44FE0(a1, 0, v7, 0, *(_DWORD *)(a1 + 116));
  }
  LODWORD(v8) = *(_DWORD *)(a1 + 144);
  if (v8 >= 2)
  {
    unint64_t v9 = 1;
    while (1)
    {
      if (!*(unsigned char *)(a1 + 25) && v9 >= 2 && *(unsigned char *)(a1 + 27)) {
        sub_B42EB0(a1, v9);
      }
      if (v9)
      {
        char v19 = *(unsigned int **)(a1 + 288);
        uint64_t v20 = *(unsigned int **)(a1 + 296);
        if (v19 != v20)
        {
          uint64_t v21 = *(void *)(a1 + 264);
          BOOL v22 = *(unsigned int **)(a1 + 288);
          do
          {
            unsigned int v23 = *v22++;
            *(void *)(v21 + (((unint64_t)v23 >> 3) & 0x1FFFFFF8)) &= ~(1 << v23);
          }
          while (v22 != v20);
        }
        *(void *)(a1 + 296) = v19;
        sub_B43060(a1, v9);
        sub_B43364(a1, v9);
        unint64_t v24 = *(unsigned int *)(a1 + 432);
        if (*(void *)(a1 + 272) > v24
          && ((*(void *)(*(void *)(a1 + 264) + ((v24 >> 3) & 0x1FFFFFF8)) >> v24) & 1) != 0)
        {
          *(void *)(*(void *)(a1 + 440) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        }
        if (*(unsigned char *)(a1 + 25) && *(void *)(a1 + 288) == *(void *)(a1 + 296))
        {
LABEL_38:
          LODWORD(v8) = *(_DWORD *)(a1 + 144);
          if (v8) {
            goto LABEL_39;
          }
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v10 = *(unsigned int **)(a1 + 240);
        int v11 = *(unsigned int **)(a1 + 248);
        if (v10 != v11)
        {
          uint64_t v12 = *(void *)(a1 + 216);
          int v13 = *(unsigned int **)(a1 + 240);
          do
          {
            unsigned int v14 = *v13++;
            *(void *)(v12 + (((unint64_t)v14 >> 3) & 0x1FFFFFF8)) &= ~(1 << v14);
          }
          while (v13 != v11);
        }
        *(void *)(a1 + 248) = v10;
        sub_B43D10(a1, v9);
        sub_725D0((uint64_t)v34);
        unint64_t v15 = *(unsigned int **)(a1 + 408);
        int64_t v16 = *(unsigned int **)(a1 + 416);
        while (v15 != v16)
        {
          unsigned int v17 = *v15++;
          sub_B45860(a1, v9, v17);
        }
        *(double *)(a1 + 608) = sub_72688((uint64_t)v34) + *(double *)(a1 + 608);
        unint64_t v18 = *(unsigned int *)(a1 + 432);
        if (*(void *)(a1 + 224) > v18
          && ((*(void *)(*(void *)(a1 + 216) + ((v18 >> 3) & 0x1FFFFFF8)) >> v18) & 1) != 0)
        {
          *(void *)(*(void *)(a1 + 440) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        }
        if (*(unsigned char *)(a1 + 25) && *(void *)(a1 + 240) == *(void *)(a1 + 248)) {
          goto LABEL_38;
        }
      }
      unint64_t v25 = sub_A4066C(a1) + 728;
      if (*(void *)(a1 + 720) > v25) {
        unint64_t v25 = *(void *)(a1 + 720);
      }
      *(void *)(a1 + 720) = v25;
      if (sub_B44D8C(a1)) {
        goto LABEL_38;
      }
      ++v9;
      unint64_t v8 = *(unsigned int *)(a1 + 144);
      if (v9 >= v8) {
        goto LABEL_36;
      }
    }
  }
  LODWORD(v9) = 1;
LABEL_36:
  if (v8)
  {
LABEL_39:
    unint64_t v26 = 0;
    uint64_t v27 = v8;
    do
    {
      if ((*(void *)(*(void *)(a1 + 440) + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v26))
      {
        *(double *)(a1 + 640) = *(double *)(a1 + 640) + 1.0;
        uint64_t v28 = *(void *)(a1 + 152);
        unint64_t v29 = *(unsigned int *)(a1 + 432);
        if (*(void *)v28 <= v29)
        {
          *(void *)uint64_t v28 = v29 + 1;
          uint64_t v30 = *(void *)(v28 + 16);
          unint64_t v31 = *(void *)(v28 + 8) * (v29 + 1);
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v28 + 24) - v30) >> 3);
          if (v31 > v32)
          {
            sub_B45360((void **)(v28 + 16), v31 - v32);
          }
          else if (v31 < v32)
          {
            *(void *)(v28 + 24) = v30 + 24 * v31;
          }
        }
        *(void *)(a1 + 632) += *(int *)(*(void *)(v28 + 16) + 24 * (v26 + *(void *)(v28 + 8) * v29));
      }
      ++v26;
    }
    while (v27 != v26);
  }
LABEL_48:
  *(double *)(a1 + 648) = (double)v9;
  *(double *)(a1 + 600) = sub_72688((uint64_t)v33);
}

std::string *sub_B41FE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v132) = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t v98 = (std::string *)(a2 + 32);
  uint64_t v99 = (uint64_t *)(a2 + 8);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v132) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 184) = *(unsigned char *)(a1 + 112);
  uint64_t v101 = *(unsigned int *)(a1 + 144);
  if (v101 >= 2)
  {
    __asm { FMOV            V0.2D, #1.0 }
    long long v100 = _Q0;
    unint64_t v9 = 1;
    while (((*(void *)(*(void *)(a1 + 440) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    {
LABEL_6:
      if (++v9 == v101) {
        goto LABEL_4;
      }
    }
    uint64_t v10 = *(void *)(a1 + 152);
    unint64_t v11 = *(unsigned int *)(a1 + 432);
    unsigned int v12 = *(_DWORD *)(a1 + 432);
    if (*(void *)v10 <= v11)
    {
      *(void *)uint64_t v10 = v11 + 1;
      uint64_t v13 = *(void *)(v10 + 16);
      unint64_t v14 = *(void *)(v10 + 8) * (v11 + 1);
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v10 + 24) - v13) >> 3);
      if (v14 <= v15)
      {
        if (v14 < v15) {
          *(void *)(v10 + 24) = v13 + 24 * v14;
        }
      }
      else
      {
        sub_B45360((void **)(v10 + 16), v14 - v15);
        unsigned int v12 = *(_DWORD *)(a1 + 432);
      }
    }
    unint64_t v102 = v9;
    uint64_t v16 = *(void *)(v10 + 16) + 24 * (v9 + *(void *)(v10 + 8) * v11);
    int v18 = *(_DWORD *)v16;
    unsigned int v17 = *(_DWORD *)(v16 + 4);
    uint64_t v19 = *(void *)(v16 + 8);
    int v21 = *(_DWORD *)(v16 + 16);
    unint64_t v20 = *(unsigned int *)(v16 + 20);
    LOWORD(__p[0]) = 0;
    BYTE2(__p[0]) = 0;
    *(void *)&__p[1] = 0;
    *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
    int v132 = 0x7FFFFFFF;
    __int16 v133 = 0;
    unint64_t v134 = 0x8000000080000000;
    __int16 v135 = 0;
    unint64_t v136 = 0x8000000080000000;
    int v137 = 0x7FFFFFFF;
    __int16 v138 = 0;
    unint64_t v139 = 0x8000000080000000;
    __int16 v140 = 0;
    unint64_t v141 = 0x8000000080000000;
    __int16 v142 = 0;
    unint64_t v143 = 0xFFFFFFFF00000000;
    int v144 = -1;
    uint64_t v145 = 0;
    v147 = 0;
    uint64_t v148 = 0;
    uint64_t v149 = 0;
    int v146 = 0x7FFFFFFF;
    int v150 = 100;
    int v151 = -1;
    long long v152 = v100;
    long long v153 = v100;
    long long v154 = v100;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v157 = 0u;
    long long v158 = 0u;
    uint64_t v22 = *(void *)(a1 + 40);
    long long v159 = 0u;
    long long v160 = 0u;
    if (sub_C259C0(v22 + 3896) && *(void *)(v22 + 3944))
    {
      BOOL v23 = 1;
    }
    else
    {
      uint64_t v24 = *(void *)(a1 + 40);
      BOOL v23 = sub_C259D4(v24 + 3896) && *(void *)(v24 + 3960) != 0;
    }
    BYTE1(__p[0]) = v23;
    uint64_t v25 = *(void *)(a1 + 40);
    if (sub_C259D4(v25 + 3896))
    {
      __p[1] = 2 * (*(void *)(v25 + 3960) != 0);
      if (v17 != -1) {
        goto LABEL_23;
      }
      goto LABEL_116;
    }
    __p[1] = 0;
    if (v17 == -1)
    {
LABEL_116:
      sub_A29D50((uint64_t)__p);
      unint64_t v85 = *(void *)(v3 + 16);
      if (v85 >= *(void *)(v3 + 24))
      {
        uint64_t v86 = sub_A4D268(v99, (long long *)__p);
      }
      else
      {
        sub_9F68D4(*(void *)(v3 + 16), (long long *)__p);
        uint64_t v86 = v85 + 296;
        *(void *)(v3 + 16) = v85 + 296;
      }
      unint64_t v9 = v102;
      *(void *)(v3 + 16) = v86;
      if (*((void *)&v159 + 1))
      {
        *(void *)&long long v160 = *((void *)&v159 + 1);
        operator delete(*((void **)&v159 + 1));
      }
      if ((void)v158)
      {
        *((void *)&v158 + 1) = v158;
        operator delete((void *)v158);
      }
      if (*((void *)&v156 + 1))
      {
        *(void *)&long long v157 = *((void *)&v156 + 1);
        operator delete(*((void **)&v156 + 1));
      }
      unint64_t v87 = (void **)v155;
      if ((void)v155)
      {
        uint64_t v88 = *((void *)&v155 + 1);
        uint64_t v89 = (void *)v155;
        if (*((void *)&v155 + 1) != (void)v155)
        {
          do
          {
            uint64_t v91 = *(void **)(v88 - 40);
            if (v91)
            {
              *(void *)(v88 - 32) = v91;
              operator delete(v91);
            }
            uint64_t v92 = (void **)(v88 - 72);
            uint64_t v93 = *(void *)(v88 - 72);
            if (v93)
            {
              uint64_t v94 = *(void *)(v88 - 64);
              v90 = *(void **)(v88 - 72);
              if (v94 != v93)
              {
                do
                {
                  if (!*(_DWORD *)(v94 - 8))
                  {
                    v95 = *(void **)(v94 - 48);
                    if (v95)
                    {
                      *(void *)(v94 - 40) = v95;
                      operator delete(v95);
                    }
                    uint64_t v96 = *(void **)(v94 - 80);
                    if (v96)
                    {
                      *(void *)(v94 - 72) = v96;
                      operator delete(v96);
                    }
                    unint64_t v97 = *(void **)(v94 - 104);
                    if (v97)
                    {
                      *(void *)(v94 - 96) = v97;
                      operator delete(v97);
                    }
                  }
                  v94 -= 168;
                }
                while (v94 != v93);
                v90 = *v92;
              }
              *(void *)(v88 - 64) = v93;
              operator delete(v90);
            }
            v88 -= 72;
          }
          while (v92 != v87);
          uint64_t v89 = (void *)v155;
        }
        *((void *)&v155 + 1) = v87;
        operator delete(v89);
        uint64_t v3 = a2;
      }
      if (SHIBYTE(v149) < 0) {
        operator delete(v147);
      }
      goto LABEL_6;
    }
LABEL_23:
    LODWORD(v26) = v102;
    while (1)
    {
      v120 = 0;
      uint64_t v121 = 0;
      unint64_t v122 = 0;
      unint64_t v125 = 0;
      uint64_t v126 = 0;
      v124 = 0;
      char v127 = 1;
      unint64_t v128 = 0x8000000080000000;
      __int16 v129 = 0;
      char v130 = 0;
      int v184 = -1;
      if (v20 == 0xFFFFFFFF)
      {
        char v123 = 1;
        uint64_t v28 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), v12);
        uint64_t v29 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), v17);
        LODWORD(v162) = 0;
        HIDWORD(v162) = v18;
        uint64_t v164 = v28;
        *(void *)v165 = v29;
        int v163 = v21;
        int v176 = 1;
        sub_B46394((uint64_t)v177, (uint64_t)&v162);
        if (!v176)
        {
          if (v174)
          {
            v175 = v174;
            operator delete(v174);
          }
          if (v172)
          {
            v173[0] = v172;
            operator delete(v172);
          }
          uint64_t v30 = v170;
          if (v170)
          {
            v171 = v170;
LABEL_80:
            operator delete(v30);
          }
        }
      }
      else
      {
        long long v104 = xmmword_20E12E0;
        __int16 v105 = 0;
        unint64_t v106 = 0x8000000080000000;
        __int16 v107 = 0;
        *(_OWORD *)v108 = xmmword_20EB6B0;
        *(void *)&v108[16] = 0xFFFFFFFF7FFFFFFFLL;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v112 = 0u;
        unsigned int v109 = -1;
        int v113 = 0x7FFFFFFF;
        v115 = 0;
        uint64_t v116 = 0;
        uint64_t v114 = 0;
        char v117 = 1;
        unint64_t v118 = 0x8000000080000000;
        int v119 = 0;
        unint64_t v31 = (void *)(*(void *)(a1 + 56) + 88);
        char v123 = 0;
        uint64_t v32 = *(void *)sub_A3F32C(v31, v20);
        *(void *)v108 = v32;
        *(void *)&v108[8] = v19;
        *(_DWORD *)&v108[16] = v21;
        unsigned int v109 = v17;
        uint64_t v33 = *(void *)(a1 + 40);
        uint64_t v161 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), v12);
        sub_A1E9A0((uint64_t)&v162, v33, v32, v17, 0, 0);
        v170 = (void *)(v169 + 12 * *(unsigned int *)&v108[8]);
        if (LOBYTE(v173[0])) {
          *(void *)((char *)v173 + 4) = *(void *)&v108[12];
        }
        if (v168) {
          uint64_t v34 = *(unsigned int *)(v168 + 4 * ((v166 - *(void *)&v165[4]) >> 4));
        }
        else {
          uint64_t v34 = 0;
        }
        sub_A56ED0((uint64_t)&v162, &v161, v34);
        _CF = v166 < v167 && v166 >= *(void *)&v165[4];
        unint64_t v36 = (v166 - *(void *)&v165[4]) >> 4;
        if (!_CF) {
          LODWORD(v36) = -1;
        }
        *(_DWORD *)&v108[20] = v36;
        uint64_t v37 = *(void *)(a1 + 48);
        unsigned int v38 = v109;
        char v39 = (int *)sub_A11094((void *)(*(void *)(a1 + 40) + 4136), *(unint64_t *)v108);
        unsigned int v40 = (unsigned __int16 *)((char *)v39 - *v39);
        if (*v40 >= 9u && (uint64_t v41 = v40[4]) != 0) {
          uint64_t v42 = (unsigned int *)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
        }
        else {
          uint64_t v42 = 0;
        }
        uint64_t v162 = __ROR8__(*(void *)sub_A10764(v42, v38), 32);
        unsigned int v17 = sub_A3B520(v37, &v162);
        unsigned int v43 = *(_DWORD *)&v108[20];
        uint64_t v44 = (int *)sub_A11094((void *)(*(void *)(a1 + 40) + 4136), *(unint64_t *)v108);
        char v45 = (unsigned __int16 *)((char *)v44 - *v44);
        if (*v45 >= 9u && (uint64_t v46 = v45[4]) != 0) {
          int v47 = (unsigned int *)((char *)v44 + v46 + *(unsigned int *)((char *)v44 + v46));
        }
        else {
          int v47 = 0;
        }
        DWORD1(v104) = 10 * *(_DWORD *)(sub_A10764(v47, v43) + 8);
        uint64_t v48 = *(void *)(a1 + 40);
        unint64_t v49 = *(void *)v108;
        unsigned int v50 = *(_DWORD *)&v108[20];
        uint64_t v162 = sub_A104E8((void *)(v48 + 4136), *(unint64_t *)v108, *(unsigned int *)&v108[20], *(int *)&v108[8]);
        int v163 = v51;
        uint64_t v52 = (int *)sub_A11094((void *)(v48 + 4136), v49);
        char v53 = (unsigned __int16 *)((char *)v52 - *v52);
        if (*v53 >= 9u && (uint64_t v54 = v53[4]) != 0) {
          uint64_t v55 = (unsigned int *)((char *)v52 + v54 + *(unsigned int *)((char *)v52 + v54));
        }
        else {
          uint64_t v55 = 0;
        }
        unsigned int v56 = *(unsigned __int16 *)(sub_A10764(v55, v50) + 12);
        if (*(_DWORD *)&v108[12] == -1) {
          int v57 = 0x7FFFFFFF;
        }
        else {
          int v57 = *(_DWORD *)&v108[16];
        }
        *((void *)&v104 + 1) = sub_A0FAA0((uint64_t *)(v48 + 4184), (unsigned int *)&v162, v56, v57);
        __int16 v105 = v58;
        uint64_t v59 = *(void *)(a1 + 40);
        unint64_t v60 = *(void *)v108;
        unsigned int v61 = v109;
        uint64_t v162 = sub_A104E8((void *)(v59 + 4136), *(unint64_t *)v108, v109, *(int *)&v108[8]);
        int v163 = v62;
        int v63 = (int *)sub_A11094((void *)(v59 + 4136), v60);
        int v64 = (unsigned __int16 *)((char *)v63 - *v63);
        if (*v64 >= 9u && (uint64_t v65 = v64[4]) != 0) {
          int v66 = (unsigned int *)((char *)v63 + v65 + *(unsigned int *)((char *)v63 + v65));
        }
        else {
          int v66 = 0;
        }
        unsigned int v67 = *(unsigned __int16 *)(sub_A10764(v66, v61) + 12);
        if (*(_DWORD *)&v108[12] == -1) {
          int v68 = 0x7FFFFFFF;
        }
        else {
          int v68 = *(_DWORD *)&v108[16];
        }
        unint64_t v106 = sub_A0FDF4((uint64_t *)(v59 + 4184), (unsigned int *)&v162, v67, v68);
        __int16 v107 = v69;
        int v176 = -1;
        sub_A20F00((uint64_t)&v162, (uint64_t)&v104);
        sub_B46394((uint64_t)v177, (uint64_t)&v162);
        if (!v176)
        {
          if (v174)
          {
            v175 = v174;
            operator delete(v174);
          }
          if (v172)
          {
            v173[0] = v172;
            operator delete(v172);
          }
          if (v170)
          {
            v171 = v170;
            operator delete(v170);
          }
        }
        if (v114)
        {
          v115 = v114;
          operator delete(v114);
        }
        if (*((void *)&v111 + 1))
        {
          *(void *)&long long v112 = *((void *)&v111 + 1);
          operator delete(*((void **)&v111 + 1));
        }
        uint64_t v30 = (void *)v110;
        if ((void)v110)
        {
          *((void *)&v110 + 1) = v110;
          goto LABEL_80;
        }
      }
      int v70 = v121;
      if ((unint64_t)v121 >= v122)
      {
        uint64_t v121 = (_DWORD *)sub_A4CBF4((uint64_t *)&v120, (uint64_t)v177);
        unint64_t v71 = (void *)*((void *)&v155 + 1);
        if (*((void *)&v155 + 1) >= (unint64_t)v156) {
          goto LABEL_86;
        }
      }
      else
      {
        v121[40] = v184;
        if (v184 == 1)
        {
          long long v84 = *(_OWORD *)v177;
          *(_OWORD *)((char *)v70 + 12) = *(_OWORD *)&v177[12];
          _OWORD *v70 = v84;
          uint64_t v121 = (_DWORD *)v70 + 42;
          unint64_t v71 = (void *)*((void *)&v155 + 1);
          if (*((void *)&v155 + 1) >= (unint64_t)v156) {
            goto LABEL_86;
          }
        }
        else
        {
          if (!v184) {
            sub_9F6FA0((uint64_t)v70, (long long *)v177);
          }
          uint64_t v121 = (_DWORD *)v70 + 42;
          unint64_t v71 = (void *)*((void *)&v155 + 1);
          if (*((void *)&v155 + 1) >= (unint64_t)v156)
          {
LABEL_86:
            *((void *)&v155 + 1) = sub_A4CECC((void ***)&v155, (uint64_t)&v120);
            uint64_t v72 = *(void *)(a1 + 152);
            uint64_t v73 = v17;
            if (*(void *)v72 <= (unint64_t)v17) {
              goto LABEL_90;
            }
            goto LABEL_94;
          }
        }
      }
      sub_9F6D1C(v71, (uint64_t)&v120);
      *((void *)&v155 + 1) = v71 + 9;
      uint64_t v72 = *(void *)(a1 + 152);
      uint64_t v73 = v17;
      if (*(void *)v72 <= (unint64_t)v17)
      {
LABEL_90:
        *(void *)uint64_t v72 = v73 + 1;
        uint64_t v74 = *(void *)(v72 + 16);
        unint64_t v75 = *(void *)(v72 + 8) * (v73 + 1);
        unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v72 + 24) - v74) >> 3);
        if (v75 <= v76)
        {
          if (v75 < v76) {
            *(void *)(v72 + 24) = v74 + 24 * v75;
          }
        }
        else
        {
          sub_B45360((void **)(v72 + 16), v75 - v76);
        }
      }
LABEL_94:
      uint64_t v26 = (v26 - 1);
      uint64_t v77 = *(void *)(v72 + 16) + 24 * (v26 + *(void *)(v72 + 8) * v73);
      int v18 = *(_DWORD *)v77;
      unsigned int v78 = *(_DWORD *)(v77 + 4);
      uint64_t v19 = *(void *)(v77 + 8);
      int v21 = *(_DWORD *)(v77 + 16);
      unint64_t v20 = *(unsigned int *)(v77 + 20);
      if (!v184)
      {
        if (v182)
        {
          v183 = v182;
          operator delete(v182);
        }
        if (v180)
        {
          v181 = v180;
          operator delete(v180);
        }
        if (v178)
        {
          v179 = v178;
          operator delete(v178);
        }
      }
      if (v124)
      {
        unint64_t v125 = v124;
        operator delete(v124);
      }
      int v79 = v120;
      if (v120)
      {
        unsigned int v80 = v121;
        uint64_t v27 = v120;
        if (v121 != v120)
        {
          do
          {
            if (!*(v80 - 2))
            {
              char v81 = (void *)*((void *)v80 - 6);
              if (v81)
              {
                *((void *)v80 - 5) = v81;
                operator delete(v81);
              }
              unint64_t v82 = (void *)*((void *)v80 - 10);
              if (v82)
              {
                *((void *)v80 - 9) = v82;
                operator delete(v82);
              }
              uint64_t v83 = (void *)*((void *)v80 - 13);
              if (v83)
              {
                *((void *)v80 - 12) = v83;
                operator delete(v83);
              }
            }
            v80 -= 42;
          }
          while (v80 != v79);
          uint64_t v27 = v120;
        }
        uint64_t v121 = v79;
        operator delete(v27);
      }
      unsigned int v12 = v17;
      unsigned int v17 = v78;
      _ZF = v78 == -1;
      uint64_t v3 = a2;
      if (_ZF) {
        goto LABEL_116;
      }
    }
  }
LABEL_4:
  uint64_t result = std::string::operator=(v98, (const std::string *)(a1 + 576));
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 680);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 696);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 712);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 600);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 616);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 632);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 648);
  return result;
}

void sub_B42B54(_Unwind_Exception *a1)
{
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_B42C64(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 240);
  uint64_t v3 = *(unsigned int **)(a1 + 248);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 216);
    uint64_t v5 = *(unsigned int **)(a1 + 240);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 248) = v2;
  int v7 = *(unsigned int **)(a1 + 288);
  unint64_t v8 = *(unsigned int **)(a1 + 296);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 264);
    uint64_t v10 = *(unsigned int **)(a1 + 288);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 296) = v7;
  unsigned int v12 = *(unsigned int **)(a1 + 336);
  uint64_t v13 = *(unsigned int **)(a1 + 344);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 312);
    unint64_t v15 = *(unsigned int **)(a1 + 336);
    do
    {
      unsigned int v16 = *v15++;
      *(void *)(v14 + (((unint64_t)v16 >> 3) & 0x1FFFFFF8)) &= ~(1 << v16);
    }
    while (v15 != v13);
  }
  *(void *)(a1 + 344) = v12;
  unsigned int v17 = *(unsigned int **)(a1 + 408);
  int v18 = *(unsigned int **)(a1 + 416);
  if (v17 != v18)
  {
    uint64_t v19 = *(void *)(a1 + 384);
    uint64_t v20 = *(void *)(a1 + 360);
    int v21 = *(unsigned int **)(a1 + 408);
    do
    {
      unsigned int v22 = *v21++;
      *(void *)(v19 + (((unint64_t)v22 >> 3) & 0x1FFFFFF8)) &= ~(1 << v22);
      *(_DWORD *)(v20 + 4 * v22) = -1;
    }
    while (v21 != v18);
  }
  *(void *)(a1 + 416) = v17;
  sub_BD5698(a1 + 464);
  *(void *)(a1 + 448) = 0;
  char v27 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  BOOL v23 = (void **)(a1 + 576);
  if (*(char *)(a1 + 599) < 0) {
    operator delete(*v23);
  }
  *(_OWORD *)BOOL v23 = __dst;
  *(void *)(a1 + 592) = v29;
  HIBYTE(v29) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 664) = v34;
  *(_OWORD *)(a1 + 680) = v35;
  *(_OWORD *)(a1 + 696) = v36;
  *(_OWORD *)(a1 + 712) = v37;
  *(_OWORD *)(a1 + 600) = v30;
  *(_OWORD *)(a1 + 616) = v31;
  *(_OWORD *)(a1 + 632) = v32;
  *(_OWORD *)(a1 + 648) = v33;
  if (v27 < 0) {
    operator delete((void *)__p);
  }
  unint64_t v24 = (2 * *(_DWORD *)(a1 + 8) + 2);
  *(_DWORD *)(a1 + 144) = v24;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v25 = *(void **)(a1 + 152);
    v25[3] = v25[2];
    *uint64_t v25 = 0;
    v25[1] = v24;
  }
  *(void *)(a1 + 176) = *(void *)(a1 + 168);
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  sub_A3E96C(a1 + 440, v24, 0);
  sub_BD5704(a1 + 464, *(void *)(a1 + 16));
}

void sub_B42E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_B42EB0(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(unsigned int **)(a1 + 336);
  uint64_t v4 = *(unsigned int **)(a1 + 344);
  if (v3 == v4)
  {
    uint64_t v20 = *(void *)(a1 + 336);
    goto LABEL_25;
  }
  uint64_t v5 = a2 - 2;
  uint64_t v6 = a2;
  do
  {
    unint64_t v7 = *v3;
    uint64_t v8 = *(void *)(a1 + 152);
    unint64_t v9 = *(void *)v8;
    uint64_t v10 = v8;
    if (*(void *)v8 > v7) {
      goto LABEL_7;
    }
    *(void *)uint64_t v8 = v7 + 1;
    uint64_t v11 = *(void *)(v8 + 16);
    unint64_t v12 = *(void *)(v8 + 8) * (v7 + 1);
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v8 + 24) - v11) >> 3);
    if (v12 > v13)
    {
      sub_B45360((void **)(v8 + 16), v12 - v13);
      uint64_t v10 = *(void *)(a1 + 152);
      unint64_t v9 = *(void *)v10;
LABEL_7:
      int v14 = *(_DWORD *)(*(void *)(v8 + 16) + 24 * (v5 + *(void *)(v8 + 8) * v7));
      if (v9 > v7) {
        goto LABEL_16;
      }
LABEL_12:
      *(void *)uint64_t v10 = v7 + 1;
      uint64_t v15 = *(void *)(v10 + 16);
      unint64_t v16 = *(void *)(v10 + 8) * (v7 + 1);
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v10 + 24) - v15) >> 3);
      if (v16 <= v17)
      {
        if (v16 < v17) {
          *(void *)(v10 + 24) = v15 + 24 * v16;
        }
      }
      else
      {
        sub_B45360((void **)(v10 + 16), v16 - v17);
      }
      goto LABEL_16;
    }
    if (v12 < v13) {
      *(void *)(v8 + 24) = v11 + 24 * v12;
    }
    uint64_t v10 = v8;
    int v14 = *(_DWORD *)(*(void *)(v8 + 16) + 24 * (v5 + *(void *)(v8 + 8) * v7));
    if (v7 + 1 <= v7) {
      goto LABEL_12;
    }
LABEL_16:
    if (v14 != 0x7FFFFFFF)
    {
      int v18 = (_DWORD *)(*(void *)(v10 + 16) + 24 * (v6 + *(void *)(v10 + 8) * v7));
      if (*v18 == 0x7FFFFFFF || *v18 < v14) {
        *int v18 = v14;
      }
    }
    ++v3;
  }
  while (v3 != v4);
  uint64_t v3 = *(unsigned int **)(a1 + 336);
  uint64_t v20 = *(void *)(a1 + 344);
LABEL_25:
  double result = *(double *)(a1 + 680) + (double)(unint64_t)((v20 - (uint64_t)v3) >> 2);
  *(double *)(a1 + 680) = result;
  return result;
}

double sub_B43060(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v35);
  uint64_t v4 = *(unsigned int **)(a1 + 240);
  long long v34 = *(unsigned int **)(a1 + 248);
  if (v4 != v34)
  {
    uint64_t v33 = a2 - 1;
    int v31 = ~a2;
    uint64_t v32 = a2;
    while (1)
    {
      unint64_t v6 = *v4;
      unint64_t v7 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), v6);
      uint64_t v8 = *(void *)(a1 + 152);
      if (*(void *)v8 <= v6)
      {
        *(void *)uint64_t v8 = v6 + 1;
        uint64_t v9 = *(void *)(v8 + 16);
        unint64_t v10 = *(void *)(v8 + 8) * (v6 + 1);
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v8 + 24) - v9) >> 3);
        if (v10 <= v11)
        {
          if (v10 < v11) {
            *(void *)(v8 + 24) = v9 + 24 * v10;
          }
        }
        else
        {
          sub_B45360((void **)(v8 + 16), v10 - v11);
        }
      }
      int v12 = *(_DWORD *)(*(void *)(v8 + 16) + 24 * (v33 + *(void *)(v8 + 8) * v6));
      if (HIDWORD(v7) == 1 && (v7 + 3) < 2)
      {
        signed int v19 = *(_DWORD *)(*(void *)(v8 + 16) + 24 * (v33 + *(void *)(v8 + 8) * v6));
        uint64_t v20 = *(unint64_t **)(a1 + 64);
        if (v20) {
          goto LABEL_26;
        }
        goto LABEL_33;
      }
      uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 4120);
      uint64_t v15 = v14 + 24;
      if (*(unsigned char *)(v14 + 17)) {
        break;
      }
      unint64_t v16 = (int *)sub_498D5C(v15, __ROR8__(v7, 32), 0, "stop");
      int v21 = (unsigned __int16 *)((char *)v16 - *v16);
      if (*v21 >= 0x15u)
      {
        unsigned int v17 = v21[10];
        if (v17) {
          goto LABEL_24;
        }
      }
      signed int v19 = v12 - 30;
      uint64_t v20 = *(unint64_t **)(a1 + 64);
      if (v20)
      {
LABEL_26:
        if (*v20 > v6)
        {
          unsigned int v22 = 0;
          unsigned int v23 = *(_DWORD *)(a1 + 144) + v31;
          unsigned int v24 = v23;
          while (v22 <= v23)
          {
            signed int v25 = *(_DWORD *)sub_B45630(v20 + 2, v20[1] * v6 + v24);
            v22 += 2;
            v24 -= 2;
            if (v25 != 0x7FFFFFFF)
            {
              if (v25 > v19) {
                goto LABEL_5;
              }
              goto LABEL_33;
            }
          }
        }
        goto LABEL_5;
      }
LABEL_33:
      if (sub_B44FE0(a1, 1u, v6, v32, v19))
      {
        uint64_t v26 = *(void *)(a1 + 152);
        if (*(void *)v26 <= v6)
        {
          *(void *)uint64_t v26 = v6 + 1;
          uint64_t v27 = *(void *)(v26 + 16);
          unint64_t v28 = *(void *)(v26 + 8) * (v6 + 1);
          unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v26 + 24) - v27) >> 3);
          if (v28 > v29)
          {
            sub_B45360((void **)(v26 + 16), v28 - v29);
          }
          else if (v28 < v29)
          {
            *(void *)(v26 + 24) = v27 + 24 * v28;
          }
        }
        uint64_t v5 = *(void *)(v26 + 16) + 24 * (v32 + *(void *)(v26 + 8) * v6);
        *(_DWORD *)(v5 + 4) = v6;
        *(void *)(v5 + 8) = -1;
        *(_DWORD *)(v5 + 16) = v12;
        *(_DWORD *)(v5 + 20) = -1;
      }
LABEL_5:
      if (++v4 == v34) {
        goto LABEL_38;
      }
    }
    unint64_t v16 = (int *)sub_A1A290(v15, v7, 0, "transfers at stop");
    unsigned int v17 = 0;
    int v18 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v18 >= 5u)
    {
      unsigned int v17 = v18[2];
      if (v18[2]) {
LABEL_24:
      }
        unsigned int v17 = -*(int *)((char *)v16 + v17);
    }
    signed int v19 = v17 + v12;
    uint64_t v20 = *(unint64_t **)(a1 + 64);
    if (v20) {
      goto LABEL_26;
    }
    goto LABEL_33;
  }
LABEL_38:
  double result = sub_72688((uint64_t)v35) + *(double *)(a1 + 616);
  *(double *)(a1 + 616) = result;
  return result;
}

double sub_B43364(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v122);
  uint64_t v4 = *(unsigned int **)(a1 + 240);
  unsigned int v109 = *(unsigned int **)(a1 + 248);
  if (v4 != v109)
  {
    uint64_t v108 = a2 - 1;
    int v111 = ~a2;
    uint64_t v112 = a2;
    uint64_t v114 = a1;
    do
    {
      long long v110 = v4;
      unint64_t v5 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), v5);
      uint64_t v7 = *(void *)(a1 + 152);
      unint64_t v115 = v5;
      if (*(void *)v7 <= v5)
      {
        *(void *)uint64_t v7 = v5 + 1;
        uint64_t v8 = *(void *)(v7 + 16);
        unint64_t v9 = *(void *)(v7 + 8) * (v5 + 1);
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v7 + 24) - v8) >> 3);
        if (v9 <= v10)
        {
          if (v9 < v10) {
            *(void *)(v7 + 24) = v8 + 24 * v9;
          }
        }
        else
        {
          sub_B45360((void **)(v7 + 16), v9 - v10);
        }
      }
      int v113 = *(_DWORD *)(*(void *)(v7 + 16) + 24 * (v108 + *(void *)(v7 + 8) * v5));
      sub_A28D38((uint64_t)&v116, *(void *)(a1 + 40), v6);
      unint64_t v11 = v117;
      if (v121) {
        int v12 = v120;
      }
      else {
        int v12 = (unint64_t *)&v118;
      }
      unint64_t v13 = *v12;
      while ((unint64_t)v11 < v13)
      {
        unint64_t v16 = __ROR8__(*v11, 32);
        uint64_t v17 = *(void *)(a1 + 48);
        uint64_t v18 = *(void *)(v17 + 56) - 1;
        unint64_t v19 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v16 ^ (v16 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v16 ^ (v16 >> 33))) >> 33));
        unint64_t v20 = v19 ^ (v19 >> 33);
        uint64_t v21 = *(void *)(v17 + 80);
        int v23 = *(_DWORD *)(v17 + 64);
        int v22 = *(_DWORD *)(v17 + 68);
        uint64_t v24 = v20 & v18;
        signed int v25 = (unsigned int *)(v21 + 12 * (v20 & v18));
        unsigned int v27 = *v25;
        unsigned int v26 = v25[1];
        if (v22 == v26 && v23 == v27) {
          goto LABEL_61;
        }
        if (*(void *)(v17 + 40))
        {
          uint64_t v29 = -1;
          uint64_t v30 = 1;
          do
          {
            if (*(_DWORD *)(v17 + 36) == v26 && *(_DWORD *)(v17 + 32) == v27)
            {
              if (v29 == -1) {
                uint64_t v29 = v24;
              }
            }
            else if (__PAIR64__(v26, v27) == v16)
            {
              goto LABEL_58;
            }
            uint64_t v24 = (v24 + v30) & v18;
            int v31 = (unsigned int *)(v21 + 12 * v24);
            unsigned int v27 = *v31;
            unsigned int v26 = v31[1];
            ++v30;
          }
          while (v22 != v26 || v23 != v27);
          if (v29 == -1)
          {
LABEL_61:
            uint64_t v29 = v24;
            if (!sub_A3BA84(*(void *)(a1 + 48), 1)) {
              goto LABEL_62;
            }
            goto LABEL_36;
          }
          if (!sub_A3BA84(*(void *)(a1 + 48), 1)) {
            goto LABEL_62;
          }
        }
        else
        {
          uint64_t v47 = 1;
          while (__PAIR64__(v26, v27) != v16)
          {
            uint64_t v24 = (v24 + v47) & v18;
            uint64_t v48 = (unsigned int *)(v21 + 12 * v24);
            unsigned int v27 = *v48;
            unsigned int v26 = v48[1];
            ++v47;
            if (v22 == v26 && v23 == v27) {
              goto LABEL_61;
            }
          }
LABEL_58:
          if (v24 != -1)
          {
            uint64_t v50 = v21 + 12 * v24;
            unint64_t v51 = *(unsigned int *)(v50 + 8);
            if (v51 == -1) {
              goto LABEL_95;
            }
            goto LABEL_118;
          }
          uint64_t v29 = -1;
          if (!sub_A3BA84(*(void *)(a1 + 48), 1))
          {
LABEL_62:
            uint64_t v53 = *(void *)(v17 + 40);
            uint64_t v52 = *(void *)(v17 + 48);
            if ((unint64_t)(v52 - v53) >= 0x1555555555555555) {
              goto LABEL_165;
            }
            uint64_t v34 = *(void *)(v17 + 80);
            if (v53
              && ((uint64_t v54 = (_DWORD *)(v34 + 12 * v29), *(_DWORD *)(v17 + 36) == v54[1])
                ? (BOOL v55 = *(_DWORD *)(v17 + 32) == *v54)
                : (BOOL v55 = 0),
                  v55))
            {
              *(void *)(v17 + 40) = v53 - 1;
            }
            else
            {
              *(void *)(v17 + 48) = v52 + 1;
            }
            uint64_t v56 = 3 * v29;
            goto LABEL_94;
          }
        }
LABEL_36:
        uint64_t v33 = *(void *)(v17 + 56) - 1;
        uint64_t v34 = *(void *)(v17 + 80);
        int v36 = *(_DWORD *)(v17 + 64);
        int v35 = *(_DWORD *)(v17 + 68);
        uint64_t v37 = v33 & v20;
        unsigned int v38 = (unsigned int *)(v34 + 12 * (v33 & v20));
        unsigned int v40 = *v38;
        unsigned int v39 = v38[1];
        uint64_t v41 = *(void *)(v17 + 40);
        if (v35 == v39 && v36 == v40) {
          goto LABEL_85;
        }
        if (v41)
        {
          uint64_t v43 = -1;
          uint64_t v44 = 1;
          do
          {
            if (*(_DWORD *)(v17 + 36) == v39 && *(_DWORD *)(v17 + 32) == v40)
            {
              if (v43 == -1) {
                uint64_t v43 = v37;
              }
            }
            else if (__PAIR64__(v39, v40) == v16)
            {
              goto LABEL_79;
            }
            uint64_t v37 = (v37 + v44) & v33;
            char v45 = (unsigned int *)(v34 + 12 * v37);
            unsigned int v40 = *v45;
            unsigned int v39 = v45[1];
            ++v44;
          }
          while (v35 != v39 || v36 != v40);
          if (v43 == -1) {
LABEL_85:
          }
            uint64_t v43 = v37;
          uint64_t v60 = *(void *)(v17 + 48);
          if ((unint64_t)(v60 - v41) >= 0x1555555555555555) {
            goto LABEL_165;
          }
LABEL_87:
          if (v41
            && ((unsigned int v61 = (_DWORD *)(v34 + 12 * v43), *(_DWORD *)(v17 + 36) == v61[1])
              ? (BOOL v62 = *(_DWORD *)(v17 + 32) == *v61)
              : (BOOL v62 = 0),
                v62))
          {
            *(void *)(v17 + 40) = v41 - 1;
            uint64_t v56 = 3 * v43;
          }
          else
          {
            *(void *)(v17 + 48) = v60 + 1;
            uint64_t v56 = 3 * v43;
          }
LABEL_94:
          uint64_t v63 = 4 * v56;
          uint64_t v64 = v34 + v63;
          *(void *)uint64_t v64 = v16;
          *(_DWORD *)(v64 + 8) = -1;
          uint64_t v50 = *(void *)(v17 + 80) + v63;
          unint64_t v51 = *(unsigned int *)(v50 + 8);
          if (v51 != -1) {
            goto LABEL_118;
          }
LABEL_95:
          int v65 = *(_DWORD *)(v17 + 112);
          *(_DWORD *)(v17 + 112) = v65 + 1;
          *(_DWORD *)(v50 + 8) = v65;
          unsigned int v67 = *(char **)(v17 + 96);
          unint64_t v66 = *(void *)(v17 + 104);
          if ((unint64_t)v67 < v66)
          {
            *(void *)unsigned int v67 = v16;
            uint64_t v68 = (uint64_t)(v67 + 8);
LABEL_117:
            *(void *)(v17 + 96) = v68;
            unint64_t v51 = *(unsigned int *)(v50 + 8);
            goto LABEL_118;
          }
          __int16 v69 = *(char **)(v17 + 88);
          uint64_t v70 = (v67 - v69) >> 3;
          unint64_t v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v72 = v66 - (void)v69;
          if (v72 >> 2 > v71) {
            unint64_t v71 = v72 >> 2;
          }
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v71)
          {
            if (v71 >> 61) {
              sub_188D718();
            }
            unint64_t v73 = v71;
            uint64_t v74 = (char *)operator new(8 * v71);
            unint64_t v75 = &v74[8 * v70];
            *(void *)unint64_t v75 = v16;
            uint64_t v68 = (uint64_t)(v75 + 8);
            if (v67 != v69) {
              goto LABEL_105;
            }
LABEL_108:
            *(void *)(v17 + 88) = v75;
            *(void *)(v17 + 96) = v68;
            *(void *)(v17 + 104) = &v74[8 * v73];
            if (!v67) {
              goto LABEL_117;
            }
          }
          else
          {
            unint64_t v73 = 0;
            uint64_t v74 = 0;
            unint64_t v75 = (char *)(8 * v70);
            *(void *)(8 * v70) = v16;
            uint64_t v68 = 8 * v70 + 8;
            if (v67 == v69) {
              goto LABEL_108;
            }
LABEL_105:
            unint64_t v76 = v67 - 8 - v69;
            if (v76 < 0x58) {
              goto LABEL_170;
            }
            if ((unint64_t)(v69 - v74) < 0x20) {
              goto LABEL_170;
            }
            uint64_t v77 = (v76 >> 3) + 1;
            uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
            int v79 = &v67[-v78];
            v75 -= v78;
            unsigned int v80 = &v74[8 * v70 - 16];
            char v81 = (long long *)(v67 - 16);
            uint64_t v82 = v77 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v83 = *v81;
              *((_OWORD *)v80 - 1) = *(v81 - 1);
              *(_OWORD *)unsigned int v80 = v83;
              v80 -= 32;
              v81 -= 2;
              v82 -= 4;
            }
            while (v82);
            unsigned int v67 = v79;
            if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_170:
              do
              {
                uint64_t v84 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v75 - 1) = v84;
                v75 -= 8;
              }
              while (v67 != v69);
            }
            unsigned int v67 = *(char **)(v17 + 88);
            *(void *)(v17 + 88) = v75;
            *(void *)(v17 + 96) = v68;
            *(void *)(v17 + 104) = &v74[8 * v73];
            if (!v67) {
              goto LABEL_117;
            }
          }
          operator delete(v67);
          goto LABEL_117;
        }
        uint64_t v57 = 1;
        while (__PAIR64__(v39, v40) != v16)
        {
          uint64_t v37 = (v37 + v57) & v33;
          __int16 v58 = (unsigned int *)(v34 + 12 * v37);
          unsigned int v40 = *v58;
          unsigned int v39 = v58[1];
          ++v57;
          if (v35 == v39 && v36 == v40)
          {
            uint64_t v41 = 0;
            goto LABEL_85;
          }
        }
LABEL_79:
        if (v37 == -1)
        {
          uint64_t v43 = -1;
          uint64_t v60 = *(void *)(v17 + 48);
          if ((unint64_t)(v60 - v41) >= 0x1555555555555555)
          {
LABEL_165:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
          goto LABEL_87;
        }
        uint64_t v50 = v34 + 12 * v37;
        unint64_t v51 = *(unsigned int *)(v50 + 8);
        if (v51 == -1) {
          goto LABEL_95;
        }
LABEL_118:
        a1 = v114;
        *(double *)(v114 + 672) = *(double *)(v114 + 672) + 1.0;
        if (v115 != v51)
        {
          int v85 = *((_DWORD *)v117 + 2);
          int v86 = v85 / -10;
          int v87 = v85 % 10;
          if (v85 < 0) {
            char v88 = -5;
          }
          else {
            char v88 = 5;
          }
          signed int v89 = v86 + v113 + (((-103 * (char)(v88 + v87)) >> 15) & 1) + ((-103 * (char)(v88 + v87)) >> 10);
          v90 = *(unint64_t **)(v114 + 64);
          if (v90)
          {
            if (*v90 > v51)
            {
              unsigned int v91 = 0;
              unsigned int v92 = *(_DWORD *)(v114 + 144) + v111;
              unsigned int v93 = v92;
              while (v91 <= v92)
              {
                signed int v94 = *(_DWORD *)sub_B45630(v90 + 2, v90[1] * v51 + v93);
                v91 += 2;
                v93 -= 2;
                if (v94 != 0x7FFFFFFF)
                {
                  if (v94 > v89) {
                    break;
                  }
                  goto LABEL_128;
                }
              }
            }
          }
          else
          {
LABEL_128:
            if (sub_B44FE0(v114, 1u, v51, v112, v89))
            {
              uint64_t v95 = *(void *)(v114 + 152);
              if (*(void *)v95 <= v51)
              {
                *(void *)uint64_t v95 = v51 + 1;
                uint64_t v96 = *(void *)(v95 + 16);
                unint64_t v97 = *(void *)(v95 + 8) * (v51 + 1);
                unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v95 + 24) - v96) >> 3);
                if (v97 <= v98)
                {
                  if (v97 < v98) {
                    *(void *)(v95 + 24) = v96 + 24 * v97;
                  }
                }
                else
                {
                  sub_B45360((void **)(v95 + 16), v97 - v98);
                }
              }
              uint64_t v99 = *(void *)(v95 + 16) + 24 * (v112 + *(void *)(v95 + 8) * v51);
              *(_DWORD *)(v99 + 4) = v115;
              *(void *)(v99 + 8) = -1;
              *(_DWORD *)(v99 + 16) = v113;
              *(_DWORD *)(v99 + 20) = -1;
            }
          }
        }
        unint64_t v13 = (unint64_t)v118;
        unint64_t v11 = (void *)((char *)v117 + 12);
        char v117 = v11;
        if (v11 == v118)
        {
          unint64_t v11 = v119;
          unint64_t v15 = v120[0];
          char v117 = v119;
          int v14 = 1;
          unsigned __int8 v121 = 1;
          if (!*(unsigned char *)(v116 + 16)) {
            goto LABEL_15;
          }
        }
        else
        {
          int v14 = v121;
          unint64_t v15 = v120[0];
          if (!*(unsigned char *)(v116 + 16)) {
            goto LABEL_15;
          }
        }
        if (v14) {
          unint64_t v100 = v15;
        }
        else {
          unint64_t v100 = (unint64_t)v118;
        }
        if ((unint64_t)v11 < v100)
        {
          unint64_t v101 = __ROR8__(*v11, 32);
          if (HIDWORD(v101) != 1 || (v101 + 3) >= 2)
          {
            while (!sub_2AB7E4(**(void **)(v116 + 4120)))
            {
              unint64_t v13 = (unint64_t)v118;
              unint64_t v11 = (void *)((char *)v117 + 12);
              char v117 = v11;
              if (v11 == v118)
              {
                unint64_t v11 = v119;
                char v117 = v119;
                LOBYTE(v14) = 1;
                unsigned __int8 v121 = 1;
                if ((unint64_t)v119 >= v120[0]) {
                  goto LABEL_14;
                }
              }
              else
              {
                LOBYTE(v14) = v121;
                if (v121) {
                  __int16 v105 = v120;
                }
                else {
                  __int16 v105 = &v118;
                }
                if ((unint64_t)v11 >= *v105) {
                  goto LABEL_14;
                }
              }
              unint64_t v103 = __ROR8__(*v11, 32);
              if (HIDWORD(v103) == 1 && (v103 + 3) < 2) {
                goto LABEL_14;
              }
            }
            LOBYTE(v14) = v121;
            unint64_t v11 = v117;
            unint64_t v13 = (unint64_t)v118;
          }
LABEL_14:
          unint64_t v15 = v120[0];
        }
LABEL_15:
        if ((_BYTE)v14) {
          unint64_t v13 = v15;
        }
      }
      uint64_t v4 = v110 + 1;
    }
    while (v110 + 1 != v109);
  }
  double result = sub_72688((uint64_t)v122) + *(double *)(a1 + 616);
  *(double *)(a1 + 616) = result;
  return result;
}

void sub_B43CE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B43CFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_B43D10(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v227);
  uint64_t v4 = *(unsigned int **)(a1 + 408);
  unint64_t v5 = *(unsigned int **)(a1 + 416);
  if (v4 != v5)
  {
    uint64_t v6 = *(void *)(a1 + 384);
    uint64_t v7 = *(void *)(a1 + 360);
    uint64_t v8 = *(unsigned int **)(a1 + 408);
    do
    {
      unsigned int v9 = *v8++;
      *(void *)(v6 + (((unint64_t)v9 >> 3) & 0x1FFFFFF8)) &= ~(1 << v9);
      *(_DWORD *)(v7 + 4 * v9) = -1;
    }
    while (v8 != v5);
  }
  *(void *)(a1 + 416) = v4;
  unint64_t v10 = *(unsigned int **)(a1 + 288);
  v216 = *(unsigned int **)(a1 + 296);
  if (v10 == v216) {
    goto LABEL_273;
  }
  v212 = (void **)(a1 + 408);
  unint64_t v217 = a2;
  uint64_t v214 = a2 + 1;
  v215 = (uint64_t *)(a1 + 384);
  uint64_t v219 = a1;
  while (2)
  {
    v218 = v10;
    unint64_t v11 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), *v10);
    sub_A1DF34((uint64_t)v220, *(void **)(a1 + 40), *v11, 0, 0, 0);
    int v12 = v223;
LABEL_8:
    unint64_t v13 = (unint64_t)v224;
    while ((unint64_t)v12 < v13)
    {
      unint64_t v14 = __ROR8__(*v12, 32);
      uint64_t v15 = *(void *)(a1 + 56);
      uint64_t v16 = *(void *)(v15 + 56) - 1;
      unint64_t v17 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v14 ^ (v14 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v14 ^ (v14 >> 33))) >> 33));
      unint64_t v18 = v17 ^ (v17 >> 33);
      uint64_t v19 = *(void *)(v15 + 80);
      int v21 = *(_DWORD *)(v15 + 64);
      int v20 = *(_DWORD *)(v15 + 68);
      uint64_t v22 = v18 & v16;
      int v23 = (unsigned int *)(v19 + 12 * (v18 & v16));
      unsigned int v25 = *v23;
      unsigned int v24 = v23[1];
      if (v20 == v24 && v21 == v25) {
        goto LABEL_54;
      }
      if (*(void *)(v15 + 40))
      {
        uint64_t v27 = -1;
        uint64_t v28 = 1;
        do
        {
          if (*(_DWORD *)(v15 + 36) == v24 && *(_DWORD *)(v15 + 32) == v25)
          {
            if (v27 == -1) {
              uint64_t v27 = v22;
            }
          }
          else if (__PAIR64__(v24, v25) == v14)
          {
            goto LABEL_50;
          }
          uint64_t v22 = (v22 + v28) & v16;
          uint64_t v29 = (unsigned int *)(v19 + 12 * v22);
          unsigned int v25 = *v29;
          unsigned int v24 = v29[1];
          ++v28;
        }
        while (v20 != v24 || v21 != v25);
        if (v27 != -1)
        {
          if (sub_A3BA84(*(void *)(a1 + 56), 1)) {
            goto LABEL_28;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v27 = v22;
        if (sub_A3BA84(*(void *)(a1 + 56), 1)) {
          goto LABEL_28;
        }
        goto LABEL_55;
      }
      uint64_t v45 = 1;
      while (__PAIR64__(v24, v25) != v14)
      {
        uint64_t v22 = (v22 + v45) & v16;
        uint64_t v46 = (unsigned int *)(v19 + 12 * v22);
        unsigned int v25 = *v46;
        unsigned int v24 = v46[1];
        ++v45;
        if (v20 == v24 && v21 == v25) {
          goto LABEL_54;
        }
      }
LABEL_50:
      if (v22 != -1)
      {
        uint64_t v48 = v19 + 12 * v22;
        unsigned int v49 = *(_DWORD *)(v48 + 8);
        if (v49 == -1) {
          goto LABEL_52;
        }
        goto LABEL_112;
      }
      uint64_t v27 = -1;
      if (sub_A3BA84(*(void *)(a1 + 56), 1))
      {
LABEL_28:
        uint64_t v31 = *(void *)(v15 + 56) - 1;
        uint64_t v32 = *(void *)(v15 + 80);
        int v34 = *(_DWORD *)(v15 + 64);
        int v33 = *(_DWORD *)(v15 + 68);
        uint64_t v35 = v31 & v18;
        int v36 = (unsigned int *)(v32 + 12 * (v31 & v18));
        unsigned int v38 = *v36;
        unsigned int v37 = v36[1];
        uint64_t v39 = *(void *)(v15 + 40);
        if (v33 == v37 && v34 == v38) {
          goto LABEL_102;
        }
        if (v39)
        {
          uint64_t v41 = -1;
          uint64_t v42 = 1;
          do
          {
            if (*(_DWORD *)(v15 + 36) == v37 && *(_DWORD *)(v15 + 32) == v38)
            {
              if (v41 == -1) {
                uint64_t v41 = v35;
              }
            }
            else if (__PAIR64__(v37, v38) == v14)
            {
              goto LABEL_83;
            }
            uint64_t v35 = (v35 + v42) & v31;
            uint64_t v43 = (unsigned int *)(v32 + 12 * v35);
            unsigned int v38 = *v43;
            unsigned int v37 = v43[1];
            ++v42;
          }
          while (v33 != v37 || v34 != v38);
          if (v41 == -1) {
LABEL_102:
          }
            uint64_t v41 = v35;
          uint64_t v83 = *(void *)(v15 + 48);
          if ((unint64_t)(v83 - v39) >= 0x1555555555555555) {
            goto LABEL_274;
          }
        }
        else
        {
          uint64_t v67 = 1;
          while (__PAIR64__(v37, v38) != v14)
          {
            uint64_t v35 = (v35 + v67) & v31;
            uint64_t v68 = (unsigned int *)(v32 + 12 * v35);
            unsigned int v38 = *v68;
            unsigned int v37 = v68[1];
            ++v67;
            if (v33 == v37 && v34 == v38)
            {
              uint64_t v39 = 0;
              goto LABEL_102;
            }
          }
LABEL_83:
          if (v35 != -1)
          {
            uint64_t v48 = v32 + 12 * v35;
            unsigned int v49 = *(_DWORD *)(v48 + 8);
            if (v49 == -1) {
              goto LABEL_52;
            }
            goto LABEL_112;
          }
          uint64_t v41 = -1;
          uint64_t v83 = *(void *)(v15 + 48);
          if ((unint64_t)(v83 - v39) >= 0x1555555555555555)
          {
LABEL_274:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v39
          && ((uint64_t v84 = (_DWORD *)(v32 + 12 * v41), *(_DWORD *)(v15 + 36) == v84[1])
            ? (BOOL v85 = *(_DWORD *)(v15 + 32) == *v84)
            : (BOOL v85 = 0),
              v85))
        {
          *(void *)(v15 + 40) = v39 - 1;
          uint64_t v66 = 3 * v41;
        }
        else
        {
          *(void *)(v15 + 48) = v83 + 1;
          uint64_t v66 = 3 * v41;
        }
        goto LABEL_111;
      }
LABEL_55:
      uint64_t v55 = *(void *)(v15 + 40);
      uint64_t v54 = *(void *)(v15 + 48);
      if ((unint64_t)(v54 - v55) >= 0x1555555555555555) {
        goto LABEL_274;
      }
      uint64_t v32 = *(void *)(v15 + 80);
      if (v55
        && ((uint64_t v56 = (_DWORD *)(v32 + 12 * v27), *(_DWORD *)(v15 + 36) == v56[1])
          ? (BOOL v57 = *(_DWORD *)(v15 + 32) == *v56)
          : (BOOL v57 = 0),
            v57))
      {
        *(void *)(v15 + 40) = v55 - 1;
      }
      else
      {
        *(void *)(v15 + 48) = v54 + 1;
      }
      uint64_t v66 = 3 * v27;
LABEL_111:
      uint64_t v86 = 4 * v66;
      uint64_t v87 = v32 + v86;
      *(void *)uint64_t v87 = v14;
      *(_DWORD *)(v87 + 8) = -1;
      uint64_t v48 = *(void *)(v15 + 80) + v86;
      unsigned int v49 = *(_DWORD *)(v48 + 8);
      if (v49 == -1)
      {
LABEL_52:
        int v50 = *(_DWORD *)(v15 + 112);
        *(_DWORD *)(v15 + 112) = v50 + 1;
        *(_DWORD *)(v48 + 8) = v50;
        uint64_t v52 = *(char **)(v15 + 96);
        unint64_t v51 = *(void *)(v15 + 104);
        if ((unint64_t)v52 < v51)
        {
          *(void *)uint64_t v52 = v14;
          uint64_t v53 = (uint64_t)(v52 + 8);
          goto LABEL_98;
        }
        __int16 v58 = *(char **)(v15 + 88);
        uint64_t v59 = (v52 - v58) >> 3;
        unint64_t v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v61 = v51 - (void)v58;
        if (v61 >> 2 > v60) {
          unint64_t v60 = v61 >> 2;
        }
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v62 = v60;
        }
        if (v62)
        {
          if (v62 >> 61) {
            goto LABEL_275;
          }
          uint64_t v63 = (char *)operator new(8 * v62);
          uint64_t v64 = &v63[8 * v59];
          *(void *)uint64_t v64 = v14;
          uint64_t v53 = (uint64_t)(v64 + 8);
          if (v52 != v58)
          {
LABEL_71:
            unint64_t v65 = v52 - 8 - v58;
            if (v65 < 0x58)
            {
              a1 = v219;
              goto LABEL_95;
            }
            a1 = v219;
            if ((unint64_t)(v58 - v63) < 0x20) {
              goto LABEL_280;
            }
            uint64_t v70 = (v65 >> 3) + 1;
            uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v72 = &v52[-v71];
            v64 -= v71;
            unint64_t v73 = &v63[8 * v59 - 16];
            uint64_t v74 = (long long *)(v52 - 16);
            uint64_t v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v76 = *v74;
              *((_OWORD *)v73 - 1) = *(v74 - 1);
              *(_OWORD *)unint64_t v73 = v76;
              v73 -= 32;
              v74 -= 2;
              v75 -= 4;
            }
            while (v75);
            uint64_t v52 = v72;
            if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_280:
              do
              {
LABEL_95:
                uint64_t v77 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v64 - 1) = v77;
                v64 -= 8;
              }
              while (v52 != v58);
            }
            uint64_t v52 = *(char **)(v15 + 88);
            *(void *)(v15 + 88) = v64;
            *(void *)(v15 + 96) = v53;
            *(void *)(v15 + 104) = &v63[8 * v62];
            if (v52) {
LABEL_97:
            }
              operator delete(v52);
LABEL_98:
            *(void *)(v15 + 96) = v53;
            unsigned int v49 = *(_DWORD *)(v48 + 8);
            unsigned int v78 = *((unsigned __int16 *)v223 + 5);
            int v79 = *(uint64_t **)(a1 + 96);
            if (!v79) {
              goto LABEL_99;
            }
            goto LABEL_113;
          }
        }
        else
        {
          uint64_t v63 = 0;
          uint64_t v64 = (char *)(8 * v59);
          *(void *)(8 * v59) = v14;
          uint64_t v53 = 8 * v59 + 8;
          if (v52 != v58) {
            goto LABEL_71;
          }
        }
        a1 = v219;
        *(void *)(v15 + 88) = v64;
        *(void *)(v15 + 96) = v53;
        *(void *)(v15 + 104) = &v63[8 * v62];
        if (v52) {
          goto LABEL_97;
        }
        goto LABEL_98;
      }
LABEL_112:
      unsigned int v78 = *((unsigned __int16 *)v223 + 5);
      int v79 = *(uint64_t **)(a1 + 96);
      if (!v79)
      {
LABEL_99:
        unint64_t v80 = v49;
        unint64_t v81 = (unint64_t)v49 >> 6;
        if (*(void *)(a1 + 392) <= (unint64_t)v49) {
          goto LABEL_100;
        }
        goto LABEL_118;
      }
LABEL_113:
      uint64_t v88 = *v79;
      unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((v79[1] - *v79) >> 4);
      if (v89 <= v217)
      {
        sub_A3F0F0((uint64_t)v79, v214 - v89);
        uint64_t v88 = *v79;
      }
      v90 = (void *)(v88 + 48 * v217);
      unint64_t v80 = v49;
      if (v90[1] <= (unint64_t)v49
        || ((*(void *)(*v90 + (((unint64_t)v49 >> 3) & 0x1FFFFFF8)) >> v49) & 1) == 0)
      {
        goto LABEL_218;
      }
      unint64_t v81 = (unint64_t)v49 >> 6;
      if (*(void *)(a1 + 392) <= (unint64_t)v49)
      {
LABEL_100:
        uint64_t v82 = *(unsigned char **)(a1 + 360);
        goto LABEL_170;
      }
LABEL_118:
      uint64_t v91 = *(void *)(a1 + 384);
      uint64_t v92 = *(void *)(v91 + 8 * v81);
      uint64_t v93 = 1 << v80;
      uint64_t v82 = *(unsigned char **)(a1 + 360);
      if ((v92 & (1 << v80)) == 0) {
        goto LABEL_170;
      }
      signed int v94 = *(unsigned char **)(a1 + 368);
      unint64_t v95 = (v94 - v82) >> 2;
      if (v95 <= v80)
      {
        unsigned int v213 = v78;
        unint64_t v96 = v49 + 1;
        unint64_t v97 = v96 - v95;
        if (v96 <= v95)
        {
          a1 = v219;
          unsigned int v78 = v213;
          if (v96 < v95) {
            *(void *)(v219 + 368) = &v82[4 * v96];
          }
        }
        else
        {
          a1 = v219;
          uint64_t v98 = *(void *)(v219 + 376);
          if (v97 <= (v98 - (uint64_t)v94) >> 2)
          {
            memset(v94, 255, 4 * v97);
            unint64_t v96 = v49 + 1;
            *(void *)(v219 + 368) = &v94[4 * v97];
            unsigned int v78 = v213;
          }
          else
          {
            uint64_t v99 = v98 - (void)v82;
            uint64_t v100 = v99 >> 1;
            if (v99 >> 1 <= v96) {
              uint64_t v100 = v49 + 1;
            }
            BOOL v101 = (unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v101) {
              unint64_t v102 = v100;
            }
            if (v102 >> 62) {
LABEL_275:
            }
              sub_188D718();
            uint64_t v209 = 4 * v102;
            v207 = operator new(4 * v102);
            uint64_t v206 = 4 * v97;
            memset(&v207[4 * v95], 255, 4 * v97);
            if (v94 == v82)
            {
              __int16 v105 = &v207[4 * v95];
              unint64_t v103 = v105;
              a1 = v219;
              unsigned int v78 = v213;
              uint64_t v106 = v209;
              unint64_t v96 = v49 + 1;
              uint64_t v107 = v206;
              uint64_t v108 = v207;
            }
            else
            {
              unint64_t v103 = &v207[4 * v95];
              unint64_t v104 = v94 - 4 - v82;
              a1 = v219;
              unsigned int v78 = v213;
              if (v104 < 0x2C)
              {
                __int16 v105 = &v207[4 * v95];
                uint64_t v106 = v209;
                unint64_t v96 = v49 + 1;
                uint64_t v107 = v206;
                uint64_t v108 = v207;
                goto LABEL_140;
              }
              uint64_t v108 = v207;
              uint64_t v106 = v209;
              __int16 v105 = &v207[4 * v95];
              unint64_t v96 = v49 + 1;
              uint64_t v107 = v206;
              if ((unint64_t)(v82 - v207) < 0x20) {
                goto LABEL_281;
              }
              uint64_t v109 = (v104 >> 2) + 1;
              uint64_t v110 = 4 * (v109 & 0x7FFFFFFFFFFFFFF8);
              int v111 = &v94[-v110];
              __int16 v105 = &v103[-v110];
              uint64_t v112 = &v207[4 * v95 - 16];
              int v113 = (long long *)(v94 - 16);
              uint64_t v114 = v109 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v115 = *v113;
                *(v112 - 1) = *(v113 - 1);
                _OWORD *v112 = v115;
                v112 -= 2;
                v113 -= 2;
                v114 -= 8;
              }
              while (v114);
              signed int v94 = v111;
              if (v109 != (v109 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_281:
                do
                {
LABEL_140:
                  int v116 = *((_DWORD *)v94 - 1);
                  v94 -= 4;
                  *((_DWORD *)v105 - 1) = v116;
                  v105 -= 4;
                }
                while (v94 != v82);
              }
            }
            *(void *)(a1 + 360) = v105;
            *(void *)(a1 + 368) = &v103[v107];
            *(void *)(a1 + 376) = &v108[v106];
            if (v82)
            {
              operator delete(v82);
              unint64_t v96 = v49 + 1;
            }
          }
        }
        sub_A3E96C((uint64_t)v215, v96, 0);
        uint64_t v91 = *v215;
        uint64_t v92 = *(void *)(*v215 + 8 * v81);
      }
      if ((v92 & v93) != 0)
      {
        uint64_t v82 = *(unsigned char **)(a1 + 360);
        if (*(_DWORD *)&v82[4 * v80] >= v78) {
          goto LABEL_218;
        }
LABEL_170:
        __int16 v138 = *(unsigned char **)(a1 + 368);
        unint64_t v139 = (v138 - v82) >> 2;
        if (v139 <= v80)
        {
          unint64_t v140 = v49 + 1;
          unint64_t v141 = v140 - v139;
          if (v140 <= v139)
          {
            a1 = v219;
            if (v140 < v139) {
              *(void *)(v219 + 368) = &v82[4 * v140];
            }
          }
          else
          {
            uint64_t v142 = *(void *)(v219 + 376);
            if (v141 <= (v142 - (uint64_t)v138) >> 2)
            {
              memset(v138, 255, 4 * v141);
              *(void *)(v219 + 368) = &v138[4 * v141];
              a1 = v219;
            }
            else
            {
              uint64_t v143 = v142 - (void)v82;
              uint64_t v144 = v143 >> 1;
              if (v143 >> 1 <= v140) {
                uint64_t v144 = v49 + 1;
              }
              BOOL v101 = (unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v145 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v101) {
                unint64_t v145 = v144;
              }
              if (v145 >> 62) {
                goto LABEL_275;
              }
              *(void *)v211 = 4 * v145;
              v210 = operator new(4 * v145);
              uint64_t v208 = 4 * v141;
              memset(&v210[4 * v139], 255, 4 * v141);
              if (v138 == v82)
              {
                uint64_t v148 = &v210[4 * v139];
                a1 = v219;
                int v150 = v210;
                uint64_t v149 = *(void *)v211;
                v147 = v148;
                uint64_t v151 = v208;
              }
              else
              {
                unint64_t v146 = v138 - 4 - v82;
                a1 = v219;
                if (v146 < 0x2C)
                {
                  v147 = &v210[4 * v139];
                  uint64_t v148 = v147;
                  int v150 = v210;
                  uint64_t v149 = *(void *)v211;
                  uint64_t v151 = v208;
                  goto LABEL_189;
                }
                int v150 = v210;
                uint64_t v149 = *(void *)v211;
                v147 = &v210[4 * v139];
                uint64_t v148 = v147;
                uint64_t v151 = v208;
                if ((unint64_t)(v82 - v210) < 0x20) {
                  goto LABEL_282;
                }
                uint64_t v152 = (v146 >> 2) + 1;
                uint64_t v153 = 4 * (v152 & 0x7FFFFFFFFFFFFFF8);
                long long v154 = &v138[-v153];
                uint64_t v148 = &v147[-v153];
                long long v155 = &v210[4 * v139 - 16];
                long long v156 = (long long *)(v138 - 16);
                uint64_t v157 = v152 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v158 = *v156;
                  *(v155 - 1) = *(v156 - 1);
                  *long long v155 = v158;
                  v155 -= 2;
                  v156 -= 2;
                  v157 -= 8;
                }
                while (v157);
                __int16 v138 = v154;
                if (v152 != (v152 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_282:
                  do
                  {
LABEL_189:
                    int v159 = *((_DWORD *)v138 - 1);
                    v138 -= 4;
                    *((_DWORD *)v148 - 1) = v159;
                    v148 -= 4;
                  }
                  while (v138 != v82);
                }
              }
              *(void *)(a1 + 360) = v148;
              *(void *)(a1 + 368) = &v147[v151];
              *(void *)(a1 + 376) = &v150[v149];
              if (v82) {
                operator delete(v82);
              }
            }
          }
          sub_A3E96C((uint64_t)v215, v49 + 1, 0);
        }
        uint64_t v160 = *(void *)(*v215 + 8 * v81);
        if ((v160 & (1 << v80)) != 0) {
          goto LABEL_217;
        }
        *(void *)(*v215 + 8 * v81) = v160 | (1 << v80);
        uint64_t v162 = *(char **)(a1 + 416);
        unint64_t v161 = *(void *)(a1 + 424);
        if ((unint64_t)v162 < v161)
        {
          *(_DWORD *)uint64_t v162 = v49;
          uint64_t v163 = (uint64_t)(v162 + 4);
          goto LABEL_216;
        }
        uint64_t v164 = (char *)*v212;
        uint64_t v165 = v162 - (unsigned char *)*v212;
        uint64_t v166 = v165 >> 2;
        unint64_t v167 = (v165 >> 2) + 1;
        if (v167 >> 62) {
LABEL_277:
        }
          sub_2E00();
        uint64_t v168 = v161 - (void)v164;
        if (v168 >> 1 > v167) {
          unint64_t v167 = v168 >> 1;
        }
        if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v169 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v169 = v167;
        }
        if (v169)
        {
          if (v169 >> 62) {
            goto LABEL_275;
          }
          v170 = operator new(4 * v169);
          v171 = (unsigned int *)&v170[4 * v166];
          unsigned int *v171 = v49;
          uint64_t v163 = (uint64_t)(v171 + 1);
          if (v162 != v164)
          {
LABEL_205:
            unint64_t v172 = v162 - 4 - v164;
            if (v172 < 0x2C)
            {
              a1 = v219;
              goto LABEL_213;
            }
            unint64_t v173 = v162 - &v170[v165];
            a1 = v219;
            if (v173 < 0x20) {
              goto LABEL_283;
            }
            uint64_t v174 = (v172 >> 2) + 1;
            uint64_t v175 = 4 * (v174 & 0x7FFFFFFFFFFFFFF8);
            int v176 = &v162[-v175];
            v171 = (unsigned int *)((char *)v171 - v175);
            v177 = &v170[4 * v166 - 16];
            v178 = v162 - 16;
            uint64_t v179 = v174 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v180 = *(_OWORD *)v178;
              *(v177 - 1) = *((_OWORD *)v178 - 1);
              _OWORD *v177 = v180;
              v177 -= 2;
              v178 -= 32;
              v179 -= 8;
            }
            while (v179);
            uint64_t v162 = v176;
            if (v174 != (v174 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_283:
              do
              {
LABEL_213:
                unsigned int v181 = *((_DWORD *)v162 - 1);
                v162 -= 4;
                *--v171 = v181;
              }
              while (v162 != v164);
            }
LABEL_214:
            *(void *)(a1 + 408) = v171;
            *(void *)(a1 + 416) = v163;
            *(void *)(a1 + 424) = &v170[4 * v169];
            if (v164) {
              operator delete(v164);
            }
LABEL_216:
            *(void *)(a1 + 416) = v163;
LABEL_217:
            *(_DWORD *)(*(void *)(a1 + 360) + 4 * v80) = v78;
            goto LABEL_218;
          }
        }
        else
        {
          v170 = 0;
          v171 = (unsigned int *)(4 * v166);
          *(_DWORD *)(4 * v166) = v49;
          uint64_t v163 = 4 * v166 + 4;
          if (v162 != v164) {
            goto LABEL_205;
          }
        }
        a1 = v219;
        goto LABEL_214;
      }
      *(void *)(v91 + 8 * v81) = v92 | v93;
      unint64_t v118 = *(char **)(a1 + 416);
      unint64_t v117 = *(void *)(a1 + 424);
      if ((unint64_t)v118 < v117)
      {
        *(_DWORD *)unint64_t v118 = v49;
        uint64_t v119 = (uint64_t)(v118 + 4);
        goto LABEL_169;
      }
      v120 = (char *)*v212;
      uint64_t v121 = v118 - (unsigned char *)*v212;
      uint64_t v122 = v121 >> 2;
      unint64_t v123 = (v121 >> 2) + 1;
      if (v123 >> 62) {
        goto LABEL_277;
      }
      uint64_t v124 = v117 - (void)v120;
      if (v124 >> 1 > v123) {
        unint64_t v123 = v124 >> 1;
      }
      if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v125 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v125 = v123;
      }
      if (v125)
      {
        if (v125 >> 62) {
          goto LABEL_275;
        }
        uint64_t v126 = operator new(4 * v125);
        char v127 = (unsigned int *)&v126[4 * v122];
        *char v127 = v49;
        uint64_t v119 = (uint64_t)(v127 + 1);
        if (v118 == v120)
        {
LABEL_161:
          a1 = v219;
          goto LABEL_167;
        }
      }
      else
      {
        uint64_t v126 = 0;
        char v127 = (unsigned int *)(4 * v122);
        *(_DWORD *)(4 * v122) = v49;
        uint64_t v119 = 4 * v122 + 4;
        if (v118 == v120) {
          goto LABEL_161;
        }
      }
      unint64_t v128 = v118 - 4 - v120;
      if (v128 < 0x2C)
      {
        a1 = v219;
        do
        {
LABEL_166:
          unsigned int v137 = *((_DWORD *)v118 - 1);
          v118 -= 4;
          *--char v127 = v137;
        }
        while (v118 != v120);
        goto LABEL_167;
      }
      unint64_t v129 = v118 - &v126[v121];
      a1 = v219;
      if (v129 < 0x20) {
        goto LABEL_166;
      }
      uint64_t v130 = (v128 >> 2) + 1;
      uint64_t v131 = 4 * (v130 & 0x7FFFFFFFFFFFFFF8);
      int v132 = &v118[-v131];
      char v127 = (unsigned int *)((char *)v127 - v131);
      __int16 v133 = &v126[4 * v122 - 16];
      unint64_t v134 = v118 - 16;
      uint64_t v135 = v130 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v136 = *(_OWORD *)v134;
        *(v133 - 1) = *((_OWORD *)v134 - 1);
        _OWORD *v133 = v136;
        v133 -= 2;
        v134 -= 32;
        v135 -= 8;
      }
      while (v135);
      unint64_t v118 = v132;
      if (v130 != (v130 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_166;
      }
LABEL_167:
      *(void *)(a1 + 408) = v127;
      *(void *)(a1 + 416) = v119;
      *(void *)(a1 + 424) = &v126[4 * v125];
      if (v120) {
        operator delete(v120);
      }
LABEL_169:
      *(void *)(a1 + 416) = v119;
      uint64_t v82 = *(unsigned char **)(a1 + 360);
      if (*(_DWORD *)&v82[4 * v80] < v78) {
        goto LABEL_170;
      }
LABEL_218:
      unint64_t v13 = (unint64_t)v224;
      int v12 = v223 + 2;
      v223 = v12;
      if (v12 == v224)
      {
        v182 = v221 + 2;
        v221 = v182;
        if ((unint64_t)v182 >= v222) {
          break;
        }
        while (1)
        {
          int v12 = (void *)*v182;
          unint64_t v13 = v182[1];
          if (*v182 != v13) {
            break;
          }
          v182 += 2;
          v221 = v182;
          if ((unint64_t)v182 >= v222) {
            goto LABEL_6;
          }
        }
        v223 = (void *)*v182;
        v224 = (void *)v13;
        if ((unint64_t)v12 < v13)
        {
          while (1)
          {
LABEL_230:
            if (!v226)
            {
              uint64_t v183 = v220[0];
              uint64_t v184 = *v12;
              uint64_t v185 = *(void *)(v220[0] + 4136);
              if (sub_C259C0(v185 + 3896))
              {
                if (*(void *)(v185 + 3944))
                {
                  unint64_t v186 = __ROR8__(v184, 32);
                  if (!sub_A10E20((void *)(v183 + 4136), SHIDWORD(v186)))
                  {
                    v187 = *(void **)(*(void *)(v183 + 4136) + 3944);
                    int8x8_t v188 = (int8x8_t)v187[1];
                    if (v188)
                    {
                      unint64_t v189 = 0xC4CEB9FE1A85EC53
                           * ((0xFF51AFD7ED558CCDLL * (v186 ^ (v186 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                               * (v186 ^ (v186 >> 33))) >> 33));
                      unint64_t v190 = v189 ^ (v189 >> 33);
                      uint8x8_t v191 = (uint8x8_t)vcnt_s8(v188);
                      v191.i16[0] = vaddlv_u8(v191);
                      if (v191.u32[0] > 1uLL)
                      {
                        unint64_t v192 = v190;
                        if (v190 >= *(void *)&v188) {
                          unint64_t v192 = v190 % *(void *)&v188;
                        }
                      }
                      else
                      {
                        unint64_t v192 = (*(void *)&v188 - 1) & v190;
                      }
                      v195 = *(uint64_t ***)(*v187 + 8 * v192);
                      if (v195)
                      {
                        v196 = *v195;
                        if (v196)
                        {
                          if (v191.u32[0] < 2uLL)
                          {
                            uint64_t v197 = *(void *)&v188 - 1;
                            while (1)
                            {
                              uint64_t v201 = v196[1];
                              if (v190 == v201)
                              {
                                if (*((_DWORD *)v196 + 5) == HIDWORD(v186) && *((_DWORD *)v196 + 4) == v186) {
                                  goto LABEL_227;
                                }
                              }
                              else if ((v201 & v197) != v192)
                              {
                                goto LABEL_266;
                              }
                              v196 = (uint64_t *)*v196;
                              if (!v196) {
                                goto LABEL_266;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v199 = v196[1];
                            if (v190 == v199)
                            {
                              if (*((_DWORD *)v196 + 5) == HIDWORD(v186) && *((_DWORD *)v196 + 4) == v186)
                              {
LABEL_227:
                                int v12 = v223;
                                a1 = v219;
                                goto LABEL_228;
                              }
                            }
                            else
                            {
                              if (v199 >= *(void *)&v188) {
                                v199 %= *(void *)&v188;
                              }
                              if (v199 != v192) {
                                break;
                              }
                            }
                            v196 = (uint64_t *)*v196;
                          }
                          while (v196);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_266:
            if (v225) {
              break;
            }
            unsigned int v202 = sub_C2599C(v220[0] + 3896);
            int v12 = v223;
            a1 = v219;
            if (v202 >= *((unsigned __int8 *)v223 + 14))
            {
              if (v225) {
                goto LABEL_8;
              }
              char v203 = sub_51D60((unsigned __int8 *)(v220[0] + 3896));
              int v12 = v223;
              if ((v203 & 1) != 0 || (*((unsigned char *)v223 + 15) & 1) == 0) {
                goto LABEL_8;
              }
            }
LABEL_228:
            v12 += 2;
            v223 = v12;
            if (v12 == v224)
            {
              v193 = v221 + 2;
              v221 = v193;
              if ((unint64_t)v193 >= v222) {
                goto LABEL_8;
              }
              while (1)
              {
                int v12 = (void *)*v193;
                unint64_t v194 = v193[1];
                if (*v193 != v194) {
                  break;
                }
                v193 += 2;
                v221 = v193;
                if ((unint64_t)v193 >= v222) {
                  goto LABEL_6;
                }
              }
              v223 = (void *)*v193;
              v224 = (void *)v194;
              if ((unint64_t)v12 >= v194) {
                goto LABEL_8;
              }
            }
            else if (v12 >= v224)
            {
              goto LABEL_8;
            }
          }
          int v12 = v223;
          a1 = v219;
          goto LABEL_8;
        }
      }
      else if (v12 < v224)
      {
        goto LABEL_230;
      }
    }
LABEL_6:
    unint64_t v10 = v218 + 1;
    if (v218 + 1 != v216) {
      continue;
    }
    break;
  }
LABEL_273:
  double result = sub_72688((uint64_t)v227) + *(double *)(a1 + 608);
  *(double *)(a1 + 608) = result;
  return result;
}

void sub_B44D64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B44D78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_B44D8C(uint64_t a1)
{
  if (*(void *)a1 == -1) {
    return 0;
  }
  uint64_t v2 = sub_A4066C(a1);
  uint64_t v3 = sub_A407A8(a1) + v2;
  unint64_t v15 = v3 + sub_A409C0(*(uint64_t **)(a1 + 40));
  BOOL v4 = v15 > *(void *)a1;
  if (v15 > *(void *)a1 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v13);
    unint64_t v5 = sub_188FC78(v13, (uint64_t)"Exceeded memory limit of ", 25);
    uint64_t v6 = (void *)sub_38EC58((uint64_t)v5, (unint64_t *)a1);
    uint64_t v7 = sub_188FC78(v6, (uint64_t)" in directional SPA (", 21);
    uint64_t v8 = (void *)sub_38EC58((uint64_t)v7, &v15);
    unsigned int v9 = sub_188FC78(v8, (uint64_t)") in round ", 11);
    std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)"; terminating algorithm.", 24);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v12 < 0) {
      operator delete(__p);
    }
    if (v14 < 0) {
      operator delete((void *)v13[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v4;
}

void sub_B44F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_B44FE0(uint64_t a1, unsigned int a2, int a3, unsigned int a4, signed int a5)
{
  LODWORD(v6) = a4;
  LODWORD(v7) = a3;
  int v52 = a3;
  unint64_t v10 = *(uint64_t **)(a1 + 80);
  if (v10)
  {
    uint64_t v12 = *v10;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 4);
    if (v13 <= a4)
    {
      sub_A3F0F0(*(void *)(a1 + 80), a4 - v13 + 1);
      uint64_t v12 = *v10;
    }
    char v14 = (void *)(v12 + 48 * a4);
    if (v14[1] <= (unint64_t)v7
      || ((*(void *)(*v14 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) == 0)
    {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v15 = a1 + 24 * a2;
    uint64_t v16 = *(void *)(v15 + 168);
    uint64_t v17 = *(void *)(v15 + 176);
    unint64_t v18 = (uint64_t *)(v15 + 168);
    unint64_t v19 = *(unsigned int *)(a1 + 432);
    unint64_t v20 = (v17 - v16) >> 2;
    if (v20 <= v19)
    {
      sub_5BBEE0((uint64_t)v18, v19 - v20 + 1);
      uint64_t v16 = *v18;
    }
    int v21 = (int *)(v16 + 4 * v19);
    if (!*(unsigned char *)(a1 + 26)) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 152);
    unint64_t v23 = *(unsigned int *)(a1 + 432);
    if (*(void *)v22 <= v23)
    {
      *(void *)uint64_t v22 = v23 + 1;
      uint64_t v24 = *(void *)(v22 + 16);
      unint64_t v25 = *(void *)(v22 + 8) * (v23 + 1);
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v22 + 24) - v24) >> 3);
      if (v25 <= v26)
      {
        if (v25 < v26) {
          *(void *)(v22 + 24) = v24 + 24 * v25;
        }
      }
      else
      {
        sub_B45360((void **)(v22 + 16), v25 - v26);
      }
    }
    int v21 = (int *)(*(void *)(v22 + 16) + 24 * (v6 + *(void *)(v22 + 8) * v23));
    if (!*(unsigned char *)(a1 + 26)) {
      goto LABEL_22;
    }
  }
  int v27 = *v21;
  if (v27 != 0x7FFFFFFF)
  {
    int v28 = *(_DWORD *)(a1 + 28);
    int v29 = v28 / -10;
    int v30 = v28 % 10;
    char v31 = v28 < 0 ? -5 : 5;
    if ((int)(v29 + v27 + (((-103 * (char)(v31 + v30)) >> 15) & 1) + ((-103 * (char)(v31 + v30)) >> 10)) >= a5) {
      return 0;
    }
  }
LABEL_22:
  if (!*(unsigned char *)(a1 + 25))
  {
    unint64_t v7 = v7;
    uint64_t v39 = *(void *)(a1 + 152);
    uint64_t v6 = v6;
    if (*(void *)v39 > (unint64_t)v7) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  uint64_t v32 = a1 + 24 * a2;
  uint64_t v33 = *(void *)(v32 + 168);
  uint64_t v34 = *(void *)(v32 + 176);
  uint64_t v35 = (uint64_t *)(v32 + 168);
  unint64_t v7 = v7;
  unint64_t v36 = (v34 - v33) >> 2;
  if (v36 <= v7)
  {
    sub_5BBEE0((uint64_t)v35, v7 - v36 + 1);
    uint64_t v33 = *v35;
  }
  signed int v37 = *(_DWORD *)(v33 + 4 * v7);
  if (v37 != 0x7FFFFFFF && v37 >= a5) {
    return 0;
  }
  uint64_t v39 = *(void *)(a1 + 152);
  uint64_t v6 = v6;
  if (*(void *)v39 <= (unint64_t)v7)
  {
LABEL_33:
    *(void *)uint64_t v39 = v7 + 1;
    uint64_t v40 = *(void *)(v39 + 16);
    unint64_t v41 = *(void *)(v39 + 8) * (v7 + 1);
    unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v39 + 24) - v40) >> 3);
    if (v41 <= v42)
    {
      if (v41 < v42) {
        *(void *)(v39 + 24) = v40 + 24 * v41;
      }
    }
    else
    {
      sub_B45360((void **)(v39 + 16), v41 - v42);
    }
  }
LABEL_37:
  uint64_t v43 = (signed int *)(*(void *)(v39 + 16) + 24 * (v6 + *(void *)(v39 + 8) * v7));
  if (*v43 != 0x7FFFFFFF && *v43 >= a5) {
    return 0;
  }
  unsigned int v45 = a2;
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v46 = a1 + 24 * a2;
    uint64_t v47 = *(void *)(v46 + 168);
    uint64_t v48 = *(void *)(v46 + 176);
    unsigned int v49 = (uint64_t *)(v46 + 168);
    unint64_t v50 = (v48 - v47) >> 2;
    if (v50 <= v7)
    {
      sub_5BBEE0((uint64_t)v49, v7 - v50 + 1);
      uint64_t v47 = *v49;
    }
    *(_DWORD *)(v47 + 4 * v7) = a5;
  }
  signed int *v43 = a5;
  sub_A3EF14((uint64_t *)(a1 + 48 * v45 + 216), &v52);
  if (!*(unsigned char *)(a1 + 25)) {
    sub_A3EF14((uint64_t *)(a1 + 312), &v52);
  }
  return 1;
}

void sub_B45360(void **a1, unint64_t a2)
{
  unint64_t v5 = (char *)a1[1];
  BOOL v4 = a1[2];
  uint64_t v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      unint64_t v13 = 24 * a2 - 24;
      if (v13 < 0x18) {
        goto LABEL_37;
      }
      unint64_t v14 = v13 / 0x18 + 1;
      uint64_t v6 = &v5[24 * (v14 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v15 = v5 + 32;
      uint64_t v16 = v14 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v15 - 2) = xmmword_20EC670;
        *(v15 - 1) = xmmword_20EC680;
        _OWORD *v15 = xmmword_20B8E30;
        v15 += 3;
        v16 -= 2;
      }
      while (v16);
      if (v14 != (v14 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_37:
        do
        {
          *(_OWORD *)uint64_t v6 = xmmword_20EC670;
          *((void *)v6 + 2) = 0xFFFFFFFF7FFFFFFFLL;
          v6 += 24;
        }
        while (v6 != &v5[24 * a2]);
      }
      uint64_t v6 = &v5[24 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = (char *)*a1;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v7) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      uint64_t v12 = (char *)operator new(24 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v17 = &v12[24 * v8];
    unint64_t v18 = &v17[24 * a2];
    unint64_t v19 = 24 * a2 - 24;
    unint64_t v20 = v17;
    if (v19 < 0x18) {
      goto LABEL_38;
    }
    unint64_t v21 = v19 / 0x18 + 1;
    unint64_t v20 = &v17[24 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
    uint64_t v22 = &v12[24 * v8 + 32];
    uint64_t v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *((_OWORD *)v22 - 2) = xmmword_20EC670;
      *((_OWORD *)v22 - 1) = xmmword_20EC680;
      *(_OWORD *)uint64_t v22 = xmmword_20B8E30;
      v22 += 48;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_38:
      do
      {
        *(_OWORD *)unint64_t v20 = xmmword_20EC670;
        *((void *)v20 + 2) = 0xFFFFFFFF7FFFFFFFLL;
        v20 += 24;
      }
      while (v20 != v18);
    }
    uint64_t v24 = &v12[24 * v11];
    if (v5 == v7)
    {
      int v27 = *a1;
      *a1 = v17;
      a1[1] = v18;
      a1[2] = v24;
      if (!v27) {
        return;
      }
      goto LABEL_28;
    }
    do
    {
      long long v25 = *(_OWORD *)(v6 - 24);
      unint64_t v26 = v17 - 24;
      *((void *)v17 - 1) = *((void *)v6 - 1);
      *(_OWORD *)(v17 - 24) = v25;
      v6 -= 24;
      v17 -= 24;
    }
    while (v6 != v7);
    int v27 = *a1;
    *a1 = v26;
    a1[1] = v18;
    a1[2] = v24;
    if (v27)
    {
LABEL_28:
      operator delete(v27);
    }
  }
}

BOOL sub_B4561C(_DWORD *a1, _DWORD *a2)
{
  return *a2 < *a1;
}

uint64_t sub_B45630(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = &v15;
    }
    else {
      unint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 24 * a2;
}

void sub_B45780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_B45860(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  v144[0] = a3;
  *(double *)(a1 + 656) = *(double *)(a1 + 656) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 56) + 88), a3);
  unsigned int v122 = *(_DWORD *)sub_A3F74C((void *)(v4 + 360), v144);
  uint64_t v123 = v5;
  sub_A40514(&v142, *(void *)(v4 + 40), v5);
  uint64_t v6 = v142;
  if ((unint64_t)v142 < v143)
  {
    uint64_t v7 = v4 + 464;
    int v116 = ~a2;
    uint64_t v117 = a2;
    uint64_t v126 = a2 - 1;
    uint64_t v129 = v4 + 464;
    uint64_t v127 = v4;
    while (1)
    {
      *(double *)(v4 + 664) = *(double *)(v4 + 664) + 1.0;
      uint64_t v128 = *(unsigned int *)v6;
      unsigned int v124 = v144[0];
      sub_A1E9A0((uint64_t)&v130, *(void *)(v4 + 40), v123, v122, 0, 1);
      unint64_t v8 = v134;
      if ((unint64_t)v134 >= v133 && (unint64_t)v134 < v135) {
        break;
      }
LABEL_3:
      uint64_t v6 = v142 + 4;
      uint64_t v142 = v6;
      if ((unint64_t)v6 >= v143) {
        return;
      }
    }
    uint64_t v10 = 0;
    int v120 = 0x7FFFFFFF;
    uint64_t v118 = 0xFFFFFFFFLL;
    uint64_t v121 = 0xFFFFFFFFLL;
    LODWORD(v119) = -1;
    while (1)
    {
      unint64_t v12 = __ROR8__(*v8, 32);
      uint64_t v13 = *(void *)(v4 + 48);
      uint64_t v14 = *(void *)(v13 + 56) - 1;
      unint64_t v15 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
      unint64_t v16 = v15 ^ (v15 >> 33);
      uint64_t v17 = *(void *)(v13 + 80);
      int v19 = *(_DWORD *)(v13 + 64);
      int v18 = *(_DWORD *)(v13 + 68);
      uint64_t v20 = v16 & v14;
      unint64_t v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
      unsigned int v23 = *v21;
      unsigned int v22 = v21[1];
      if (v18 == v22 && v19 == v23) {
        goto LABEL_63;
      }
      if (*(void *)(v13 + 40)) {
        break;
      }
      uint64_t v43 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v43) & v14;
        uint64_t v44 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v44;
        unsigned int v22 = v44[1];
        ++v43;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_63;
        }
      }
LABEL_53:
      if (v20 != -1)
      {
        uint64_t v46 = v17 + 12 * v20;
        unint64_t v47 = *(unsigned int *)(v46 + 8);
        if (v47 != -1) {
          goto LABEL_55;
        }
        goto LABEL_116;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(v4 + 48), 1))
      {
LABEL_31:
        uint64_t v29 = *(void *)(v13 + 56) - 1;
        uint64_t v30 = *(void *)(v13 + 80);
        int v32 = *(_DWORD *)(v13 + 64);
        int v31 = *(_DWORD *)(v13 + 68);
        uint64_t v33 = v29 & v16;
        uint64_t v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
        unsigned int v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(void *)(v13 + 40);
        if (v31 == v35 && v32 == v36) {
          goto LABEL_106;
        }
        if (v37)
        {
          uint64_t v39 = -1;
          uint64_t v40 = 1;
          do
          {
            if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
            {
              if (v39 == -1) {
                uint64_t v39 = v33;
              }
            }
            else if (__PAIR64__(v35, v36) == v12)
            {
              goto LABEL_88;
            }
            uint64_t v33 = (v33 + v40) & v29;
            unint64_t v41 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v41;
            unsigned int v35 = v41[1];
            ++v40;
          }
          while (v31 != v35 || v32 != v36);
          if (v39 == -1) {
LABEL_106:
          }
            uint64_t v39 = v33;
          uint64_t v74 = *(void *)(v13 + 48);
          if ((unint64_t)(v74 - v37) >= 0x1555555555555555) {
            goto LABEL_190;
          }
        }
        else
        {
          uint64_t v59 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v59) & v29;
            unint64_t v60 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v60;
            unsigned int v35 = v60[1];
            ++v59;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_106;
            }
          }
LABEL_88:
          if (v33 != -1)
          {
            uint64_t v46 = v30 + 12 * v33;
            unint64_t v47 = *(unsigned int *)(v46 + 8);
            if (v47 != -1) {
              goto LABEL_55;
            }
            goto LABEL_116;
          }
          uint64_t v39 = -1;
          uint64_t v74 = *(void *)(v13 + 48);
          if ((unint64_t)(v74 - v37) >= 0x1555555555555555)
          {
LABEL_190:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v37
          && ((uint64_t v75 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v75[1])
            ? (BOOL v76 = *(_DWORD *)(v13 + 32) == *v75)
            : (BOOL v76 = 0),
              v76))
        {
          *(void *)(v13 + 40) = v37 - 1;
          uint64_t v58 = 3 * v39;
        }
        else
        {
          *(void *)(v13 + 48) = v74 + 1;
          uint64_t v58 = 3 * v39;
        }
        goto LABEL_115;
      }
LABEL_64:
      uint64_t v51 = *(void *)(v13 + 40);
      uint64_t v50 = *(void *)(v13 + 48);
      if ((unint64_t)(v50 - v51) >= 0x1555555555555555) {
        goto LABEL_190;
      }
      uint64_t v30 = *(void *)(v13 + 80);
      if (v51
        && ((int v52 = (_DWORD *)(v30 + 12 * v25), *(_DWORD *)(v13 + 36) == v52[1])
          ? (BOOL v53 = *(_DWORD *)(v13 + 32) == *v52)
          : (BOOL v53 = 0),
            v53))
      {
        *(void *)(v13 + 40) = v51 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v50 + 1;
      }
      uint64_t v58 = 3 * v25;
LABEL_115:
      uint64_t v77 = 4 * v58;
      uint64_t v78 = v30 + v77;
      *(void *)uint64_t v78 = v12;
      *(_DWORD *)(v78 + 8) = -1;
      uint64_t v46 = *(void *)(v13 + 80) + v77;
      unint64_t v47 = *(unsigned int *)(v46 + 8);
      if (v47 != -1)
      {
LABEL_55:
        if (!sub_BD5C18(v7, v47, v12)) {
          goto LABEL_140;
        }
        goto LABEL_56;
      }
LABEL_116:
      int v79 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v79 + 1;
      *(_DWORD *)(v46 + 8) = v79;
      unint64_t v81 = *(unint64_t **)(v13 + 96);
      unint64_t v80 = *(void *)(v13 + 104);
      if ((unint64_t)v81 < v80)
      {
        *unint64_t v81 = v12;
        uint64_t v82 = (uint64_t)(v81 + 1);
        goto LABEL_139;
      }
      uint64_t v83 = (unint64_t **)(v13 + 88);
      uint64_t v84 = *(char **)(v13 + 88);
      uint64_t v85 = ((char *)v81 - v84) >> 3;
      unint64_t v86 = v85 + 1;
      if ((unint64_t)(v85 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v87 = v80 - (void)v84;
      if (v87 >> 2 > v86) {
        unint64_t v86 = v87 >> 2;
      }
      if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v86)
      {
        if (v86 >> 61) {
          sub_188D718();
        }
        unint64_t v88 = v86;
        unint64_t v89 = (char *)operator new(8 * v86);
        uint64_t v83 = (unint64_t **)(v13 + 88);
        v90 = (unint64_t *)&v89[8 * v85];
        unint64_t *v90 = v12;
        uint64_t v82 = (uint64_t)(v90 + 1);
        if (v81 == (unint64_t *)v84)
        {
LABEL_129:
          *(void *)(v13 + 88) = v90;
          *(void *)(v13 + 96) = v82;
          *(void *)(v13 + 104) = &v89[8 * v88];
          if (!v81) {
            goto LABEL_138;
          }
          goto LABEL_137;
        }
      }
      else
      {
        unint64_t v88 = 0;
        unint64_t v89 = 0;
        v90 = (unint64_t *)(8 * v85);
        *(void *)(8 * v85) = v12;
        uint64_t v82 = 8 * v85 + 8;
        if (v81 == (unint64_t *)v84) {
          goto LABEL_129;
        }
      }
      unint64_t v91 = (char *)(v81 - 1) - v84;
      if (v91 < 0x58) {
        goto LABEL_195;
      }
      if ((unint64_t)(v84 - v89) < 0x20) {
        goto LABEL_195;
      }
      uint64_t v92 = (v91 >> 3) + 1;
      uint64_t v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
      signed int v94 = &v81[v93 / 0xFFFFFFFFFFFFFFF8];
      v90 = (unint64_t *)((char *)v90 - v93);
      unint64_t v95 = &v89[8 * v85 - 16];
      unint64_t v96 = v81 - 2;
      uint64_t v97 = v92 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v98 = *(_OWORD *)v96;
        *((_OWORD *)v95 - 1) = *((_OWORD *)v96 - 1);
        *(_OWORD *)unint64_t v95 = v98;
        v95 -= 32;
        v96 -= 4;
        v97 -= 4;
      }
      while (v97);
      unint64_t v81 = v94;
      if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_195:
        do
        {
          unint64_t v99 = *--v81;
          *--v90 = v99;
        }
        while (v81 != (unint64_t *)v84);
      }
      unint64_t v81 = *v83;
      *(void *)(v13 + 88) = v90;
      *(void *)(v13 + 96) = v82;
      *(void *)(v13 + 104) = &v89[8 * v88];
      if (!v81) {
        goto LABEL_138;
      }
LABEL_137:
      operator delete(v81);
LABEL_138:
      uint64_t v4 = v127;
LABEL_139:
      *(void *)(v13 + 96) = v82;
      unint64_t v47 = *(unsigned int *)(v46 + 8);
      uint64_t v7 = v129;
      if (!sub_BD5C18(v129, *(_DWORD *)(v46 + 8), v12))
      {
LABEL_140:
        uint64_t v10 = (*(unsigned char *)(v4 + 32) != 0) & v10;
        goto LABEL_141;
      }
LABEL_56:
      uint64_t v48 = v10;
      if ((v10 & 1) != 0 && (*((unsigned char *)v134 + 15) & 2) != 0)
      {
        uint64_t v49 = v136;
        if (v136) {
          uint64_t v49 = *(unsigned int *)(v136 + 4 * (((unint64_t)v134 - v133) >> 4));
        }
        if ((v49 & v128) == 0)
        {
          unint64_t v62 = (unsigned int *)((char *)v132 + *(unsigned __int16 *)((char *)v132 - *v132 + 6));
          uint64_t v63 = (char *)v62 + *v62;
          uint64_t v64 = &v141;
          if (!v139) {
            uint64_t v64 = v138;
          }
          signed int v125 = *(_DWORD *)&v63[8 * v138[1] + 8 + 8 * (((unint64_t)v134 - v133) >> 4)]
               + *v64
               - *((_DWORD *)v134 + 2);
          unint64_t v65 = *(unint64_t **)(v4 + 64);
          if (v65)
          {
            if (*v65 > v47)
            {
              unsigned int v66 = 0;
              unsigned int v67 = *(_DWORD *)(v4 + 144) + v116;
              unsigned int v68 = v67;
              while (v66 <= v67)
              {
                signed int v69 = *(_DWORD *)sub_B45630(v65 + 2, v65[1] * v47 + v68);
                v66 += 2;
                v68 -= 2;
                if (v69 != 0x7FFFFFFF)
                {
                  if (v69 > v125) {
                    break;
                  }
                  goto LABEL_101;
                }
              }
            }
          }
          else
          {
LABEL_101:
            if (sub_B44FE0(v4, 0, v47, v117, v125))
            {
              uint64_t v70 = *(void *)(v4 + 152);
              if (*(void *)v70 <= v47)
              {
                *(void *)uint64_t v70 = v47 + 1;
                uint64_t v71 = *(void *)(v70 + 16);
                unint64_t v72 = *(void *)(v70 + 8) * (v47 + 1);
                unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v70 + 24) - v71) >> 3);
                if (v72 <= v73)
                {
                  if (v72 < v73) {
                    *(void *)(v70 + 24) = v71 + 24 * v72;
                  }
                }
                else
                {
                  sub_B45360((void **)(v70 + 16), v72 - v73);
                }
              }
              uint64_t v114 = *(void *)(v70 + 16) + 24 * (v117 + *(void *)(v70 + 8) * v47);
              *(_DWORD *)(v114 + 4) = v119;
              *(void *)(v114 + 8) = v121 | (v118 << 32);
              *(_DWORD *)(v114 + 16) = v120;
              *(_DWORD *)(v114 + 20) = v124;
            }
          }
        }
      }
      if (*((unsigned char *)v134 + 15))
      {
        if (v136)
        {
          uint64_t v10 = v48;
          if (*(_DWORD *)(v136 + 4 * (((unint64_t)v134 - v133) >> 4)) != v128) {
            goto LABEL_141;
          }
        }
        else
        {
          uint64_t v10 = v48;
          if (v128) {
            goto LABEL_141;
          }
        }
        uint64_t v54 = *(void *)(v4 + 152);
        if (*(void *)v54 <= v47)
        {
          *(void *)uint64_t v54 = v47 + 1;
          uint64_t v55 = *(void *)(v54 + 16);
          unint64_t v56 = *(void *)(v54 + 8) * (v47 + 1);
          unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v54 + 24) - v55) >> 3);
          if (v56 <= v57)
          {
            if (v56 < v57) {
              *(void *)(v54 + 24) = v55 + 24 * v56;
            }
          }
          else
          {
            sub_B45360((void **)(v54 + 16), v56 - v57);
          }
        }
        int v108 = *(_DWORD *)(*(void *)(v54 + 16) + 24 * (v126 + *(void *)(v54 + 8) * v47));
        if (v108 == 0x7FFFFFFF) {
          goto LABEL_141;
        }
        if (v10)
        {
          uint64_t v109 = (unsigned int *)((char *)v132 + *(unsigned __int16 *)((char *)v132 - *v132 + 6));
          uint64_t v110 = (char *)v109 + *v109;
          int v111 = &v141;
          if (!v139) {
            int v111 = v138;
          }
          if (*(_DWORD *)&v110[8 * v138[1] + 4 + 8 * (((unint64_t)v134 - v133) >> 4)] + *v111 >= v108
            || !sub_A43F30(*(void *)(v4 + 40), (uint64_t)&v130, v108))
          {
            goto LABEL_183;
          }
        }
        else if (v139)
        {
          if (!sub_A2B620(*(void *)(v4 + 40), (uint64_t)&v130, v108, 1)) {
            goto LABEL_185;
          }
        }
        else if ((sub_A2BC00((uint64_t)&v130, v108, 1) & 1) == 0)
        {
LABEL_185:
          uint64_t v10 = 0;
          goto LABEL_141;
        }
        unint64_t v119 = ((unint64_t)v134 - v133) >> 4;
        uint64_t v121 = -1431655765 * (((unint64_t)v138 - v137) >> 2);
        if (v139) {
          int v112 = v141;
        }
        else {
          int v112 = 0x7FFFFFFF;
        }
        int v120 = v112;
        if (v139) {
          uint64_t v113 = v140;
        }
        else {
          uint64_t v113 = 0xFFFFFFFFLL;
        }
        uint64_t v118 = v113;
LABEL_183:
        uint64_t v10 = 1;
        goto LABEL_141;
      }
      uint64_t v10 = v48;
LABEL_141:
      unint64_t v100 = v133;
      unint64_t v8 = v134 - 2;
      v134 -= 2;
      if (*(unsigned char *)(v130 + 16)) {
        BOOL v101 = v131 == 0;
      }
      else {
        BOOL v101 = 0;
      }
      if (v101 && (unint64_t)v8 >= v133 && (unint64_t)v8 < v135)
      {
        do
        {
          unint64_t v104 = __ROR8__(*v8, 32);
          if (HIDWORD(v104) == 1 && (v104 + 3) < 2) {
            break;
          }
          char v106 = sub_2AB7E4(**(void **)(v130 + 4120));
          unint64_t v100 = v133;
          unint64_t v8 = v134;
          if (v106) {
            break;
          }
          unint64_t v8 = v134 - 2;
          unint64_t v134 = v8;
        }
        while ((unint64_t)v8 >= v133 && (unint64_t)v8 < v135);
      }
      if ((unint64_t)v8 < v100 || (unint64_t)v8 >= v135) {
        goto LABEL_3;
      }
    }
    uint64_t v25 = -1;
    uint64_t v26 = 1;
    do
    {
      if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
      {
        if (v25 == -1) {
          uint64_t v25 = v20;
        }
      }
      else if (__PAIR64__(v22, v23) == v12)
      {
        goto LABEL_53;
      }
      uint64_t v20 = (v20 + v26) & v14;
      int v27 = (unsigned int *)(v17 + 12 * v20);
      unsigned int v23 = *v27;
      unsigned int v22 = v27[1];
      ++v26;
    }
    while (v18 != v22 || v19 != v23);
    if (v25 != -1)
    {
      if (sub_A3BA84(*(void *)(v4 + 48), 1)) {
        goto LABEL_31;
      }
      goto LABEL_64;
    }
LABEL_63:
    uint64_t v25 = v20;
    if (sub_A3BA84(*(void *)(v4 + 48), 1)) {
      goto LABEL_31;
    }
    goto LABEL_64;
  }
}

void sub_B4636C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B46380(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_B46394(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return result;
  }
  int v4 = *(_DWORD *)(a1 + 160);
  int v5 = *(_DWORD *)(a2 + 160);
  if (v4 == v5)
  {
    if (v4 == 1)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
      *(__n128 *)a1 = result;
    }
    else if (!v4)
    {
      result.n128_u64[0] = sub_B464AC(a1, (long long *)a2).n128_u64[0];
    }
    return result;
  }
  if (!v4)
  {
    uint64_t v7 = *(void **)(a1 + 120);
    if (v7)
    {
      *(void *)(a1 + 128) = v7;
      operator delete(v7);
    }
    unint64_t v8 = *(void **)(a1 + 88);
    if (v8)
    {
      *(void *)(a1 + 96) = v8;
      operator delete(v8);
    }
    long long v9 = *(void **)(a1 + 64);
    if (v9)
    {
      *(void *)(a1 + 72) = v9;
      operator delete(v9);
    }
    int v5 = *(_DWORD *)(a2 + 160);
    if (v5 != 1) {
      goto LABEL_9;
    }
LABEL_19:
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
    *(__n128 *)a1 = result;
    *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
    return result;
  }
  if (v5 == 1) {
    goto LABEL_19;
  }
LABEL_9:
  if (!v5) {
    sub_9F6FA0(a1, (long long *)a2);
  }
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  return result;
}

__n128 sub_B464AC(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(_OWORD *)(a1 + 44) = *(long long *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  unint64_t v8 = (void *)(a1 + 64);
  uint64_t v7 = *(void **)(a1 + 64);
  long long v9 = a2 + 4;
  if (v7)
  {
    *(void *)(a1 + 72) = v7;
    operator delete(v7);
    void *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
  }
  *(_OWORD *)(a1 + 64) = a2[4];
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  void *v9 = 0;
  v9[1] = 0;
  v9[2] = 0;
  uint64_t v10 = *(void **)(a1 + 88);
  if (v10)
  {
    *(void *)(a1 + 96) = v10;
    operator delete(v10);
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
  }
  *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  unint64_t v11 = *(void **)(a1 + 120);
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  if (v11)
  {
    *(void *)(a1 + 128) = v11;
    operator delete(v11);
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  __n128 result = (__n128)a2[9];
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t sub_B465A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a2 + 200);
  uint64_t v6 = *(void *)(a2 + 208);
  unint64_t v8 = (void *)(a2 + 200);
  if (v7 == v6)
  {
    sub_A2AAF8(a2, 0);
    int v23 = 0x7FFFFFFF;
    uint64_t v25 = *(void *)(a3 + 200);
    uint64_t v24 = *(void *)(a3 + 208);
    uint64_t v26 = (void *)(a3 + 200);
    if (v25 != v24) {
      goto LABEL_24;
    }
LABEL_44:
    sub_A2AAF8(a3, 0);
    int v40 = 0x7FFFFFFF;
    goto LABEL_45;
  }
  uint64_t v9 = v6 - v7;
  if (v6 - v7 == 72 && *(unsigned char *)(v7 + 24) == 1)
  {
    uint64_t v10 = *(void *)(v6 - 72);
    int v11 = *(_DWORD *)(v10 + 160);
    uint64_t v12 = *(void *)(v10 + 20);
    unsigned int v13 = *(_DWORD *)(v10 + 8);
  }
  else
  {
    uint64_t v14 = *(void *)(v6 - 72);
    int v11 = *(_DWORD *)(v14 + 160);
    uint64_t v12 = *(void *)(v14 + 20);
    uint64_t v16 = v14 + 4;
    unsigned int v15 = *(_DWORD *)(v14 + 4);
    unsigned int v13 = *(_DWORD *)(v16 + 4);
    if (v11) {
      unsigned int v17 = v13;
    }
    else {
      unsigned int v17 = v12;
    }
    if (!v11) {
      unsigned int v15 = v13;
    }
    if (v17 == v15)
    {
      uint64_t v18 = sub_A0D24C(v8, 0x8E38E38E38E38E39 * (v9 >> 3) - 2);
      if (*(_DWORD *)(*(void *)v18 + 160)) {
        unint64_t v19 = *(unsigned int *)(*(void *)v18 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v18 + 8) << 32);
      }
      else {
        unint64_t v19 = *(void *)(*(void *)v18 + 20);
      }
      goto LABEL_17;
    }
  }
  unint64_t v20 = v13 | ((unint64_t)v13 << 32);
  if (v11) {
    HIDWORD(v19) = HIDWORD(v20);
  }
  else {
    HIDWORD(v19) = HIDWORD(v12);
  }
LABEL_17:
  uint64_t v21 = sub_A2AAF8(a2, 0);
  if (HIDWORD(v21) == 0x7FFFFFFF) {
    int v22 = 0x7FFFFFFF;
  }
  else {
    int v22 = 10 * (HIDWORD(v19) - HIDWORD(v21));
  }
  if (HIDWORD(v19) == 0x7FFFFFFF) {
    int v23 = 0x7FFFFFFF;
  }
  else {
    int v23 = v22;
  }
  uint64_t v25 = *(void *)(a3 + 200);
  uint64_t v24 = *(void *)(a3 + 208);
  uint64_t v26 = (void *)(a3 + 200);
  if (v25 == v24) {
    goto LABEL_44;
  }
LABEL_24:
  uint64_t v27 = v24 - v25;
  if (v24 - v25 == 72 && *(unsigned char *)(v25 + 24) == 1)
  {
    uint64_t v28 = *(void *)(v24 - 72);
    int v29 = *(_DWORD *)(v28 + 160);
    uint64_t v30 = *(void *)(v28 + 20);
    unsigned int v31 = *(_DWORD *)(v28 + 8);
LABEL_36:
    unint64_t v38 = v31 | ((unint64_t)v31 << 32);
    if (v29) {
      HIDWORD(v37) = HIDWORD(v38);
    }
    else {
      HIDWORD(v37) = HIDWORD(v30);
    }
    goto LABEL_39;
  }
  uint64_t v32 = *(void *)(v24 - 72);
  int v29 = *(_DWORD *)(v32 + 160);
  uint64_t v30 = *(void *)(v32 + 20);
  uint64_t v34 = v32 + 4;
  unsigned int v33 = *(_DWORD *)(v32 + 4);
  unsigned int v31 = *(_DWORD *)(v34 + 4);
  if (v29) {
    unsigned int v35 = v31;
  }
  else {
    unsigned int v35 = v30;
  }
  if (!v29) {
    unsigned int v33 = v31;
  }
  if (v35 != v33) {
    goto LABEL_36;
  }
  uint64_t v36 = sub_A0D24C(v26, 0x8E38E38E38E38E39 * (v27 >> 3) - 2);
  if (*(_DWORD *)(*(void *)v36 + 160)) {
    unint64_t v37 = *(unsigned int *)(*(void *)v36 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v36 + 8) << 32);
  }
  else {
    unint64_t v37 = *(void *)(*(void *)v36 + 20);
  }
LABEL_39:
  uint64_t v39 = sub_A2AAF8(a3, 0);
  int v40 = 0x7FFFFFFF;
  if (HIDWORD(v37) != 0x7FFFFFFF && HIDWORD(v39) != 0x7FFFFFFF)
  {
    if (HIDWORD(v37) == HIDWORD(v39))
    {
      double v41 = 1.79769313e308;
      goto LABEL_52;
    }
    int v40 = 10 * (HIDWORD(v37) - HIDWORD(v39));
  }
LABEL_45:
  if (v23 < 0) {
    char v42 = -5;
  }
  else {
    char v42 = 5;
  }
  int v43 = v40 / 10;
  int v44 = v40 % 10;
  if (v40 < 0) {
    char v45 = -5;
  }
  else {
    char v45 = 5;
  }
  double v41 = (double)(int)(v23 / 10
                    + (((103 * (char)(v42 + v23 % 10)) >> 15) & 1)
                    + ((103 * (char)(v42 + v23 % 10)) >> 10))
      / (double)(int)(v43 + (((103 * (char)(v45 + v44)) >> 15) & 1) + ((103 * (char)(v45 + v44)) >> 10));
LABEL_52:
  uint64_t v46 = sub_A2AAF8(a2, 0);
  if ((int)((unint64_t)sub_A2AAF8(a3, 0) >> 32) >= SHIDWORD(v46))
  {
    uint64_t v49 = *(void *)(a2 + 200);
    uint64_t v48 = *(void *)(a2 + 208);
    if (v49 == v48)
    {
      int v61 = 0x7FFFFFFF;
      uint64_t v63 = *(void *)(a3 + 200);
      uint64_t v62 = *(void *)(a3 + 208);
      if (v63 == v62) {
        return 0;
      }
    }
    else
    {
      uint64_t v50 = v48 - v49;
      if (v48 - v49 == 72 && *(unsigned char *)(v49 + 24) == 1)
      {
        uint64_t v51 = *(void *)(v48 - 72);
        int v52 = *(_DWORD *)(v51 + 160);
        uint64_t v53 = *(void *)(v51 + 20);
        unsigned int v54 = *(_DWORD *)(v51 + 8);
      }
      else
      {
        uint64_t v55 = *(void *)(v48 - 72);
        int v52 = *(_DWORD *)(v55 + 160);
        uint64_t v53 = *(void *)(v55 + 20);
        uint64_t v57 = v55 + 4;
        unsigned int v56 = *(_DWORD *)(v55 + 4);
        unsigned int v54 = *(_DWORD *)(v57 + 4);
        if (v52) {
          unsigned int v58 = v54;
        }
        else {
          unsigned int v58 = v53;
        }
        if (!v52) {
          unsigned int v56 = v54;
        }
        if (v58 == v56)
        {
          uint64_t v59 = sub_A0D24C(v8, 0x8E38E38E38E38E39 * (v50 >> 3) - 2);
          unint64_t v60 = *(unsigned int *)(*(void *)v59 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v59 + 8) << 32);
          if (!*(_DWORD *)(*(void *)v59 + 160)) {
            unint64_t v60 = *(void *)(*(void *)v59 + 20);
          }
          int v61 = HIDWORD(v60);
          uint64_t v63 = *(void *)(a3 + 200);
          uint64_t v62 = *(void *)(a3 + 208);
          if (v63 == v62) {
            return 0;
          }
          goto LABEL_76;
        }
      }
      unint64_t v64 = v54 | ((unint64_t)v54 << 32);
      if (v52) {
        int v65 = HIDWORD(v64);
      }
      else {
        int v65 = HIDWORD(v53);
      }
      int v61 = v65;
      uint64_t v63 = *(void *)(a3 + 200);
      uint64_t v62 = *(void *)(a3 + 208);
      if (v63 == v62) {
        return 0;
      }
    }
LABEL_76:
    uint64_t v66 = v62 - v63;
    if (v62 - v63 == 72 && *(unsigned char *)(v63 + 24) == 1)
    {
      uint64_t v67 = *(void *)(v62 - 72);
      int v68 = *(_DWORD *)(v67 + 160);
      unint64_t v69 = *(void *)(v67 + 20);
      unsigned int v70 = *(_DWORD *)(v67 + 8);
    }
    else
    {
      uint64_t v71 = *(void *)(v62 - 72);
      int v68 = *(_DWORD *)(v71 + 160);
      unint64_t v69 = *(void *)(v71 + 20);
      uint64_t v73 = v71 + 4;
      unsigned int v72 = *(_DWORD *)(v71 + 4);
      unsigned int v70 = *(_DWORD *)(v73 + 4);
      if (v68) {
        int v74 = v70;
      }
      else {
        int v74 = v69;
      }
      if (!v68) {
        unsigned int v72 = v70;
      }
      if (v74 == v72)
      {
        uint64_t v75 = sub_A0D24C(v26, 0x8E38E38E38E38E39 * (v66 >> 3) - 2);
        unint64_t v76 = *(unsigned int *)(*(void *)v75 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v75 + 8) << 32);
        if (!*(_DWORD *)(*(void *)v75 + 160)) {
          unint64_t v76 = *(void *)(*(void *)v75 + 20);
        }
        if ((int)((v76 & 0xFFFFFFFF00000000) >> 32) >= v61) {
          return 0;
        }
        goto LABEL_53;
      }
    }
    unint64_t v77 = v70 | ((unint64_t)v70 << 32);
    if (v68) {
      unint64_t v78 = v77;
    }
    else {
      unint64_t v78 = v69;
    }
    if ((int)((v78 & 0xFFFFFFFF00000000) >> 32) >= v61) {
      return 0;
    }
  }
LABEL_53:
  if (v41 <= *(double *)(a1 + 8))
  {
    if (*(unsigned char *)(a1 + 25)) {
      return 1;
    }
    for (uint64_t i = *(uint64_t **)(a2 + 200); i != *(uint64_t **)(a2 + 208); i += 9)
    {
      if (!*((unsigned char *)i + 24))
      {
        uint64_t v80 = *i;
        if (*i != i[1])
        {
          int v81 = *(_DWORD *)(v80 + 160);
          int v82 = *(_DWORD *)(v80 + 44);
          if (!v81 && v82 == -1) {
            return 1;
          }
        }
      }
    }
  }
  return 0;
}

void sub_B46ADC(uint64_t a1, uint64_t a2)
{
  long long __p = 0;
  int v23 = 0;
  uint64_t v24 = 0;
  if (*(unsigned char *)(a1 + 26))
  {
    int v4 = 954437177 * ((*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 3);
    int v5 = (v4 + 1) > 1 ? v4 + 1 : 1;
    LODWORD(v20[0]) = 1;
    v17[0] = (uint64_t)&__p;
    if ((v4 + 1) >= 2)
    {
      do
      {
        sub_737BC(v17, v20);
        ++LODWORD(v20[0]);
      }
      while (LODWORD(v20[0]) != v5);
    }
  }
  uint64_t v6 = *(void *)(a1 + 280);
  uint64_t v7 = *(uint64_t **)v6;
  if (*(void *)(v6 + 8) == *(void *)v6)
  {
    sub_A3F0F0(*(void *)(a1 + 280), 1uLL);
    uint64_t v7 = *(uint64_t **)v6;
  }
  v17[0] = 0x1FFFFFFFELL;
  LODWORD(v20[0]) = sub_A3B520(a1 + 40, v17);
  sub_A3EF14(v7, v20);
  v19[1] = v20;
  v20[0] = a1;
  v20[1] = &v21;
  uint64_t v21 = a1;
  void v17[2] = (uint64_t)v20;
  v18[0] = a1;
  v18[1] = v19;
  v19[0] = a1;
  v17[0] = a1;
  v17[1] = (uint64_t)v18;
  uint64_t v8 = *(void *)(a2 + 200);
  uint64_t v9 = *(void *)(a2 + 208);
  uint64_t v10 = (void *)(a2 + 200);
  uint64_t v11 = v9 - v8;
  if (v11)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0x8E38E38E38E38E39 * (v11 >> 3);
    do
    {
      uint64_t v14 = (uint64_t *)sub_A0D24C(v10, v12);
      if (!*(unsigned char *)(a1 + 26))
      {
        int __src = v12 + 1;
        sub_147D0(&__p, (char *)&__src, (char *)&v26, 1uLL);
      }
      uint64_t v15 = *v14;
      for (uint64_t i = v14[1]; v15 != i; v15 += 168)
        sub_B46CD0(v17, (unsigned int **)&__p, v15);
      ++v12;
    }
    while (v12 != v13);
  }
  if (__p)
  {
    int v23 = __p;
    operator delete(__p);
  }
}

void sub_B46CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B46CD0(uint64_t *a1, unsigned int **a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*(_DWORD *)(a3 + 160))
  {
    unint64_t v6 = *(void *)(a3 + 20);
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a3 + 56);
    uint64_t v8 = (int *)sub_A11094((void *)(*(void *)(v5 + 32) + 4136), *(void *)(a3 + 32));
    uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
    if (*v9 >= 9u && (uint64_t v10 = v9[4]) != 0) {
      uint64_t v11 = (unsigned int *)((char *)v8 + v10 + *(unsigned int *)((char *)v8 + v10));
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v6 = __ROR8__(*(void *)sub_A10764(v11, v7), 32);
  }
  unint64_t v29 = v6;
  unint64_t v12 = *(uint64_t **)(v5 + 280);
  unint64_t v13 = **a2;
  uint64_t v14 = *v12;
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v12[1] - *v12) >> 4);
  if (v15 <= v13)
  {
    sub_A3F0F0(*(void *)(v5 + 280), v13 - v15 + 1);
    uint64_t v14 = *v12;
  }
  uint64_t v16 = (void *)(v14 + 48 * v13);
  unsigned int v17 = sub_A3B520(v5 + 40, (uint64_t *)&v29);
  if (v16[1] <= (unint64_t)v17
    || ((*(void *)(*v16 + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) >> v17) & 1) == 0)
  {
    if (HIDWORD(v29) == 1 && (v29 + 3) < 2
      || (uint64_t v18 = (int *)sub_498D5C(*(void *)(*(void *)(v5 + 32) + 4120) + 24, __ROR8__(v29, 32), 0, "stop"),
          unint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18),
          *v19 < 0xDu)
      || (unsigned __int16 v20 = v19[6]) == 0
      || ((int v22 = (int *)((char *)v18 + v20), v21 = *v22, v22[1] != -1) ? (v23 = v21 == 0) : (v23 = 1),
          v23 || !*(unsigned char *)(v5 + 24)))
    {
      sub_B46F64((uint64_t *)a1[2], a2, v29);
    }
    else
    {
      uint64_t v24 = (void *)a1[1];
      uint64_t v25 = (int *)sub_498D5C(*(void *)(*(void *)(v5 + 32) + 4120) + 24, __ROR8__(v29, 32), 0, "stop");
      uint64_t v26 = (unsigned __int16 *)((char *)v25 - *v25);
      if (*v26 >= 0xDu && (unsigned __int16 v27 = v26[6]) != 0) {
        unint64_t v28 = *(unsigned int *)((char *)v25 + v27 + 4) | ((unint64_t)*(unsigned int *)((char *)v25 + v27) << 32);
      }
      else {
        unint64_t v28 = 0xFFFFFFFFLL;
      }
      sub_B3FAE0((uint64_t **)(*(void *)(*v24 + 32) + 4112), v28, (uint64_t)__p);
      v30[0] = v24[1];
      v30[1] = a2;
      sub_B47868((uint64_t **)__p, (uint64_t)v30);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
}

void sub_B46F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B46F64(uint64_t *a1, unsigned int **a2, unint64_t a3)
{
  uint64_t v3 = a2;
  unint64_t v135 = a3;
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    do
    {
      unint64_t v8 = *v5;
      uint64_t v9 = *(uint64_t **)(v4 + 280);
      uint64_t v10 = *v9;
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v9[1] - *v9) >> 4);
      if (v11 <= v8)
      {
        sub_A3F0F0(*(void *)(v4 + 280), v8 - v11 + 1);
        uint64_t v10 = *v9;
      }
      unsigned int v7 = (uint64_t *)(v10 + 48 * v8);
      LODWORD(v130[0]) = sub_A3B520(v4 + 40, (uint64_t *)&v135);
      sub_A3EF14(v7, v130);
      ++v5;
    }
    while (v5 != v6);
    a3 = v135;
  }
  sub_A1DF34((uint64_t)v130, *(void **)(v4 + 32), a3, 0, 0, 0);
  unint64_t v12 = v133;
  unint64_t v13 = v134;
  if (v133 >= v134) {
    return;
  }
  unint64_t v119 = v3;
LABEL_9:
  uint64_t v14 = *v3;
  uint64_t v126 = v3[1];
  if (*v3 == v126) {
    goto LABEL_133;
  }
  unint64_t v15 = __ROR8__(*v12, 32);
  uint64_t v16 = *(void *)a1[1];
  unint64_t v17 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v15 ^ (v15 >> 33))) >> 33));
  uint64_t v127 = v16 + 160;
  unint64_t v128 = v17 ^ (v17 >> 33);
  unint64_t v18 = HIDWORD(v15);
  unsigned int v122 = (unint64_t **)(v16 + 248);
  do
  {
    while (1)
    {
      unint64_t v22 = *v14;
      BOOL v23 = *(uint64_t **)(v16 + 296);
      uint64_t v24 = *v23;
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v23[1] - *v23) >> 4);
      if (v25 <= v22)
      {
        sub_A3F0F0(*(void *)(v16 + 296), v22 - v25 + 1);
        uint64_t v24 = *v23;
      }
      uint64_t v26 = *(void *)(v16 + 216) - 1;
      uint64_t v27 = *(void *)(v16 + 240);
      int v29 = *(_DWORD *)(v16 + 224);
      int v28 = *(_DWORD *)(v16 + 228);
      uint64_t v30 = v26 & v128;
      unsigned int v31 = (int *)(v27 + 12 * (v26 & v128));
      int v33 = *v31;
      int v32 = v31[1];
      BOOL v34 = v28 == v32 && v29 == v33;
      uint64_t v129 = v14;
      if (v34) {
        goto LABEL_35;
      }
      if (*(void *)(v16 + 200))
      {
        uint64_t v35 = -1;
        uint64_t v36 = 1;
        do
        {
          if (*(_DWORD *)(v16 + 196) == v32 && *(_DWORD *)(v16 + 192) == v33)
          {
            if (v35 == -1) {
              uint64_t v35 = v30;
            }
          }
          else if (v33 == v15 && v32 == v18)
          {
            goto LABEL_61;
          }
          uint64_t v30 = (v30 + v36) & v26;
          unint64_t v37 = (int *)(v27 + 12 * v30);
          int v33 = *v37;
          int v32 = v37[1];
          ++v36;
        }
        while (v28 != v32 || v29 != v33);
        if (v35 == -1) {
LABEL_35:
        }
          uint64_t v35 = v30;
        if (!sub_A3BA84(v127, 1)) {
          goto LABEL_63;
        }
        goto LABEL_37;
      }
      uint64_t v57 = 1;
      while (v33 != v15 || v32 != v18)
      {
        uint64_t v30 = (v30 + v57) & v26;
        unsigned int v58 = (int *)(v27 + 12 * v30);
        int v33 = *v58;
        int v32 = v58[1];
        ++v57;
        if (v28 == v32 && v29 == v33) {
          goto LABEL_35;
        }
      }
LABEL_61:
      if (v30 != -1) {
        goto LABEL_96;
      }
      uint64_t v35 = -1;
      if (!sub_A3BA84(v127, 1))
      {
LABEL_63:
        uint64_t v61 = *(void *)(v16 + 200);
        uint64_t v60 = *(void *)(v16 + 208);
        if ((unint64_t)(v60 - v61) >= 0x1555555555555555)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_2E18(exception, "insert overflow");
        }
        uint64_t v62 = *(void *)(v16 + 240);
        if (v61
          && ((uint64_t v63 = (_DWORD *)(v62 + 12 * v35), *(_DWORD *)(v16 + 196) == v63[1])
            ? (BOOL v64 = *(_DWORD *)(v16 + 192) == *v63)
            : (BOOL v64 = 0),
              v64))
        {
          *(void *)(v16 + 200) = v61 - 1;
        }
        else
        {
          *(void *)(v16 + 208) = v60 + 1;
        }
        uint64_t v78 = v62 + 12 * v35;
        *(void *)uint64_t v78 = v15;
        *(_DWORD *)(v78 + 8) = -1;
        uint64_t v79 = *(void *)(v16 + 240) + 12 * v35;
        unsigned int v80 = *(_DWORD *)(v79 + 8);
        if (v80 != -1) {
          goto LABEL_86;
        }
LABEL_97:
        int v86 = *(_DWORD *)(v16 + 272);
        *(_DWORD *)(v16 + 272) = v86 + 1;
        *(_DWORD *)(v79 + 8) = v86;
        unint64_t v88 = *(unint64_t **)(v16 + 256);
        unint64_t v87 = *(void *)(v16 + 264);
        if ((unint64_t)v88 < v87)
        {
          *unint64_t v88 = v15;
          uint64_t v89 = (uint64_t)(v88 + 1);
          goto LABEL_118;
        }
        v90 = *v122;
        uint64_t v91 = (char *)v88 - (char *)*v122;
        uint64_t v92 = v91 >> 3;
        unint64_t v93 = (v91 >> 3) + 1;
        if (v93 >> 61) {
          sub_2E00();
        }
        uint64_t v94 = v87 - (void)v90;
        if (v94 >> 2 > v93) {
          unint64_t v93 = v94 >> 2;
        }
        if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v125 = v93;
        if (v93)
        {
          if (v93 >> 61) {
LABEL_149:
          }
            sub_188D718();
          unint64_t v95 = operator new(8 * v93);
          unint64_t v96 = (unint64_t *)&v95[8 * v92];
          *unint64_t v96 = v15;
          uint64_t v89 = (uint64_t)(v96 + 1);
          if (v88 == v90) {
            goto LABEL_116;
          }
LABEL_109:
          unint64_t v97 = (char *)(v88 - 1) - (char *)v90;
          if (v97 < 0x58) {
            goto LABEL_154;
          }
          if ((unint64_t)((char *)v88 - &v95[v91]) < 0x20) {
            goto LABEL_154;
          }
          uint64_t v98 = (v97 >> 3) + 1;
          uint64_t v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v100 = &v88[v99 / 0xFFFFFFFFFFFFFFF8];
          unint64_t v96 = (unint64_t *)((char *)v96 - v99);
          BOOL v101 = &v95[8 * v92 - 16];
          unint64_t v102 = v88 - 2;
          uint64_t v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v104 = *(_OWORD *)v102;
            *(v101 - 1) = *((_OWORD *)v102 - 1);
            *BOOL v101 = v104;
            v101 -= 2;
            v102 -= 4;
            v103 -= 4;
          }
          while (v103);
          unint64_t v88 = v100;
          if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_154:
            do
            {
              unint64_t v105 = *--v88;
              *--unint64_t v96 = v105;
            }
            while (v88 != v90);
          }
          unint64_t v88 = *v122;
        }
        else
        {
          unint64_t v95 = 0;
          unint64_t v96 = (unint64_t *)(8 * v92);
          *(void *)(8 * v92) = v15;
          uint64_t v89 = 8 * v92 + 8;
          if (v88 != v90) {
            goto LABEL_109;
          }
        }
LABEL_116:
        *(void *)(v16 + 248) = v96;
        *(void *)(v16 + 256) = v89;
        *(void *)(v16 + 264) = &v95[8 * v125];
        if (v88) {
          operator delete(v88);
        }
LABEL_118:
        *(void *)(v16 + 256) = v89;
        unsigned int v80 = *(_DWORD *)(v79 + 8);
        int v81 = (uint64_t *)(v24 + 48 * v22);
        unint64_t v82 = v80;
        if (v81[1] > (unint64_t)v80) {
          goto LABEL_11;
        }
        goto LABEL_119;
      }
LABEL_37:
      unint64_t v136 = v15;
      int v137 = -1;
      uint64_t v46 = *(void *)(v16 + 216) - 1;
      uint64_t v27 = *(void *)(v16 + 240);
      int v48 = *(_DWORD *)(v16 + 224);
      int v47 = *(_DWORD *)(v16 + 228);
      uint64_t v30 = v46 & v128;
      uint64_t v49 = (int *)(v27 + 12 * (v46 & v128));
      int v51 = *v49;
      int v50 = v49[1];
      if (v47 == v50 && v48 == v51) {
        goto LABEL_84;
      }
      if (*(void *)(v16 + 200))
      {
        uint64_t v53 = -1;
        uint64_t v54 = 1;
        do
        {
          if (*(_DWORD *)(v16 + 196) == v50 && *(_DWORD *)(v16 + 192) == v51)
          {
            if (v53 == -1) {
              uint64_t v53 = v30;
            }
          }
          else if (v51 == v15 && v50 == v18)
          {
            goto LABEL_95;
          }
          uint64_t v30 = (v30 + v54) & v46;
          uint64_t v55 = (int *)(v27 + 12 * v30);
          int v51 = *v55;
          int v50 = v55[1];
          ++v54;
        }
        while (v47 != v50 || v48 != v51);
        if (v53 == -1) {
LABEL_84:
        }
          uint64_t v53 = v30;
LABEL_85:
        sub_A3BD64(v127, (uint64_t *)&v136, v53, &v138);
        uint64_t v79 = v139;
        unsigned int v80 = *(_DWORD *)(v139 + 8);
        if (v80 == -1) {
          goto LABEL_97;
        }
        goto LABEL_86;
      }
      uint64_t v83 = 1;
      while (v51 != v15 || v50 != v18)
      {
        uint64_t v30 = (v30 + v83) & v46;
        uint64_t v84 = (int *)(v27 + 12 * v30);
        int v51 = *v84;
        int v50 = v84[1];
        ++v83;
        if (v47 == v50 && v48 == v51) {
          goto LABEL_84;
        }
      }
LABEL_95:
      if (v30 == -1)
      {
        uint64_t v53 = -1;
        goto LABEL_85;
      }
LABEL_96:
      uint64_t v79 = v27 + 12 * v30;
      unsigned int v80 = *(_DWORD *)(v79 + 8);
      if (v80 == -1) {
        goto LABEL_97;
      }
LABEL_86:
      int v81 = (uint64_t *)(v24 + 48 * v22);
      unint64_t v82 = v80;
      if (v81[1] > (unint64_t)v80) {
        goto LABEL_11;
      }
LABEL_119:
      sub_A3E96C((uint64_t)v81, v80 + 1, 0);
LABEL_11:
      uint64_t v19 = *v81;
      unint64_t v20 = v82 >> 6;
      uint64_t v21 = 1 << v82;
      if ((*(void *)(*v81 + 8 * v20) & v21) == 0) {
        break;
      }
      uint64_t v14 = v129 + 1;
      unint64_t v18 = HIDWORD(v15);
      if (v129 + 1 == v126) {
        goto LABEL_132;
      }
    }
    uint64_t v39 = v24 + 48 * v22;
    unint64_t v42 = *(void *)(v39 + 40);
    double v41 = (void *)(v39 + 40);
    unint64_t v40 = v42;
    int v43 = v41 - 1;
    int v44 = (char *)*(v41 - 1);
    if ((unint64_t)v44 < v42)
    {
      *(_DWORD *)int v44 = v80;
      uint64_t v45 = (uint64_t)(v44 + 4);
      goto LABEL_129;
    }
    unsigned int v124 = v41 - 1;
    int v65 = (unsigned int **)(v41 - 2);
    uint64_t v66 = (char *)*(v41 - 2);
    int64_t v67 = v44 - v66;
    uint64_t v68 = (v44 - v66) >> 2;
    unint64_t v69 = v68 + 1;
    if ((unint64_t)(v68 + 1) >> 62) {
      sub_2E00();
    }
    uint64_t v70 = v40 - (void)v66;
    if (v70 >> 1 > v69) {
      unint64_t v69 = v70 >> 1;
    }
    if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
    }
    unint64_t v123 = v69;
    if (v69)
    {
      uint64_t v121 = v21;
      if (v69 >> 62) {
        goto LABEL_149;
      }
      unint64_t v71 = v20;
      unsigned int v72 = (unsigned int **)(v41 - 2);
      uint64_t v73 = v41;
      int v74 = operator new(4 * v69);
      double v41 = v73;
      int v65 = v72;
      unint64_t v20 = v71;
      uint64_t v68 = (v44 - v66) >> 2;
      uint64_t v21 = v121;
      int64_t v67 = v44 - v66;
      uint64_t v75 = (unsigned int *)&v74[4 * v68];
      *uint64_t v75 = v80;
      uint64_t v45 = (uint64_t)(v75 + 1);
      if (v44 == v66)
      {
LABEL_121:
        unint64_t v77 = v123;
        int v43 = v124;
        goto LABEL_127;
      }
    }
    else
    {
      int v74 = 0;
      uint64_t v75 = (unsigned int *)(4 * v68);
      *(_DWORD *)(4 * v68) = v80;
      uint64_t v45 = 4 * v68 + 4;
      if (v44 == v66) {
        goto LABEL_121;
      }
    }
    unint64_t v76 = v44 - 4 - v66;
    unint64_t v77 = v123;
    if (v76 < 0x2C)
    {
      int v43 = v124;
      do
      {
LABEL_126:
        unsigned int v113 = *((_DWORD *)v44 - 1);
        v44 -= 4;
        *--uint64_t v75 = v113;
      }
      while (v44 != v66);
      goto LABEL_127;
    }
    int v43 = v124;
    if ((unint64_t)(v44 - v74 - v67) < 0x20) {
      goto LABEL_126;
    }
    uint64_t v106 = (v76 >> 2) + 1;
    uint64_t v107 = 4 * (v106 & 0x7FFFFFFFFFFFFFF8);
    int v108 = &v44[-v107];
    uint64_t v75 = (unsigned int *)((char *)v75 - v107);
    uint64_t v109 = &v74[4 * v68 - 16];
    uint64_t v110 = v44 - 16;
    uint64_t v111 = v106 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v112 = *(_OWORD *)v110;
      *(v109 - 1) = *((_OWORD *)v110 - 1);
      *uint64_t v109 = v112;
      v109 -= 2;
      v110 -= 32;
      v111 -= 8;
    }
    while (v111);
    int v44 = v108;
    if (v106 != (v106 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_126;
    }
LABEL_127:
    *int v65 = v75;
    uint64_t *v43 = v45;
    *double v41 = &v74[4 * v77];
    if (v66)
    {
      uint64_t v114 = v45;
      operator delete(v66);
      uint64_t v45 = v114;
      uint64_t v19 = *v81;
    }
LABEL_129:
    uint64_t *v43 = v45;
    *(void *)(v19 + 8 * v20) |= v21;
    uint64_t v14 = v129 + 1;
    unint64_t v18 = HIDWORD(v15);
  }
  while (v129 + 1 != v126);
LABEL_132:
  unint64_t v12 = v133;
  unint64_t v13 = v134;
  uint64_t v3 = v119;
LABEL_133:
  v12 += 2;
  unint64_t v133 = v12;
  if (v12 == v13)
  {
    long long v115 = v131 + 2;
    char v131 = v115;
    if ((unint64_t)v115 < v132)
    {
      while (1)
      {
        unint64_t v12 = (void *)*v115;
        unint64_t v13 = (void *)v115[1];
        if ((void *)*v115 != v13) {
          break;
        }
        v115 += 2;
        char v131 = v115;
        if ((unint64_t)v115 >= v132) {
          return;
        }
      }
LABEL_138:
      unint64_t v133 = v12;
      unint64_t v134 = v13;
      goto LABEL_139;
    }
    return;
  }
  do
  {
LABEL_139:
    if (v12 >= v13 || (v116 = sub_A1E87C(v130), unint64_t v12 = v133, v13 = v134, !v116))
    {
      if (v12 >= v13) {
        return;
      }
      goto LABEL_9;
    }
    unint64_t v12 = v133 + 2;
    unint64_t v133 = v12;
  }
  while (v12 != v134);
  uint64_t v117 = v131 + 2;
  char v131 = v117;
  if ((unint64_t)v117 < v132)
  {
    while (1)
    {
      unint64_t v12 = (void *)*v117;
      unint64_t v13 = (void *)v117[1];
      if ((void *)*v117 != v13) {
        break;
      }
      v117 += 2;
      char v131 = v117;
      if ((unint64_t)v117 >= v132) {
        return;
      }
    }
    goto LABEL_138;
  }
}

void sub_B47854(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B47868(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    uint64_t v5 = *(void **)a2;
    uint64_t v4 = *(unsigned int ***)(a2 + 8);
    do
    {
      sub_B3FBE0((uint64_t **)(*(void *)(*v5 + 32) + 4040), *v2, (uint64_t)&v9);
      unint64_t v6 = v9;
      unsigned int v7 = v10;
      if (v9 != v10)
      {
        unint64_t v8 = (uint64_t *)v5[1];
        do
          sub_B46F64(v8, v4, *v6++);
        while (v6 != v7);
        unint64_t v6 = v9;
      }
      if (v6)
      {
        uint64_t v10 = v6;
        operator delete(v6);
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_B47920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B4793C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v25 = __ROR8__(**(void **)(a2 + 8), 32);
  uint64_t result = sub_A3B950(v4 + 40, (uint64_t *)&v25);
  if (result != -1)
  {
    int v6 = *(_DWORD *)(*(void *)(a2 + 8) + 8);
    int v7 = *(_DWORD *)a1[1];
    uint64_t result = sub_A1DF34((uint64_t)v20, *(void **)(v4 + 32), v25, 0, 0, 0);
    unint64_t v8 = v23;
    uint64_t v9 = (void *)v24;
    if ((unint64_t)v23 < v24)
    {
      if (v6 < 0) {
        char v10 = -5;
      }
      else {
        char v10 = 5;
      }
      int v11 = 103 * (char)(v10 + v6 % 10);
      int v12 = v7 + v6 / 10 + ((v11 >> 15) & 1) + (v11 >> 10);
      while (2)
      {
        unsigned int v13 = *((unsigned __int16 *)v8 + 4);
        unsigned int v14 = *((unsigned __int16 *)v8 + 5);
        if (v13 <= v14 + 1) {
          unsigned int v15 = v14 + 1;
        }
        else {
          unsigned int v15 = *((unsigned __int16 *)v8 + 4);
        }
        if (v14 >= v13)
        {
          uint64_t v16 = v25;
          unint64_t v17 = *(void **)a1[2];
          do
            uint64_t result = sub_B47B38(v17, __ROR8__(*v23, 32), v13++, v16, v12, v6);
          while (v15 != v13);
          unint64_t v8 = v23;
          uint64_t v9 = (void *)v24;
        }
        v8 += 2;
        BOOL v23 = v8;
        if (v8 == v9)
        {
          unint64_t v18 = v21 + 2;
          uint64_t v21 = v18;
          if ((unint64_t)v18 < v22)
          {
            while (1)
            {
              unint64_t v8 = (void *)*v18;
              uint64_t v9 = (void *)v18[1];
              if ((void *)*v18 != v9) {
                break;
              }
              v18 += 2;
              uint64_t v21 = v18;
              if ((unint64_t)v18 >= v22) {
                return result;
              }
            }
LABEL_19:
            BOOL v23 = v8;
            unint64_t v24 = (unint64_t)v9;
            goto LABEL_20;
          }
        }
        else
        {
LABEL_20:
          while (v8 < v9)
          {
            uint64_t result = sub_A1E87C(v20);
            unint64_t v8 = v23;
            uint64_t v9 = (void *)v24;
            if (!result) {
              break;
            }
            unint64_t v8 = v23 + 2;
            BOOL v23 = v8;
            if (v8 == (void *)v24)
            {
              uint64_t v19 = v21 + 2;
              uint64_t v21 = v19;
              if ((unint64_t)v19 < v22)
              {
                while (1)
                {
                  unint64_t v8 = (void *)*v19;
                  uint64_t v9 = (void *)v19[1];
                  if ((void *)*v19 != v9) {
                    break;
                  }
                  v19 += 2;
                  uint64_t v21 = v19;
                  if ((unint64_t)v19 >= v22) {
                    return result;
                  }
                }
                goto LABEL_19;
              }
              return result;
            }
          }
          if (v8 < v9) {
            continue;
          }
        }
        break;
      }
    }
  }
  return result;
}

uint64_t sub_B47B38(void *a1, unint64_t a2, unsigned int a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12 = *a1;
  unsigned int v13 = (int *)sub_A11094((void *)(*(void *)(*a1 + 32) + 4136), a2);
  unsigned int v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 9u && (uint64_t v15 = v14[4]) != 0)
  {
    uint64_t result = sub_A10764((unsigned int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15)), a3);
    if (__ROR8__(*(void *)result, 32) != a4) {
      return result;
    }
  }
  else
  {
    uint64_t result = sub_A10764(0, a3);
    if (__ROR8__(*(void *)result, 32) != a4) {
      return result;
    }
  }
  sub_A1E9A0((uint64_t)v23, *(void *)(v12 + 32), a2, a3, 0, 0);
  if (v30)
  {
    uint64_t result = sub_B47D74(*(void *)(v12 + 32), (uint64_t)v23, a5, 2);
    if ((result & 1) == 0) {
      return result;
    }
  }
  else
  {
    uint64_t result = sub_B48354((uint64_t)v23, a5, 1);
    if (!result) {
      return result;
    }
  }
  unint64_t v17 = v28;
  if ((unint64_t)v28 >= v27 && (unint64_t)v28 < v29)
  {
    if (a6 < 0) {
      char v18 = -5;
    }
    else {
      char v18 = 5;
    }
    unsigned int v19 = a6 / -10 + (((-103 * (char)(v18 + a6 % 10)) >> 15) & 1) + ((-103 * (char)(v18 + a6 % 10)) >> 10);
    do
    {
      uint64_t v20 = a1[1];
      if (v30) {
        uint64_t v21 = &v31;
      }
      else {
        uint64_t v21 = v17;
      }
      unint64_t v22 = (unsigned int *)((char *)v24 + *(unsigned __int16 *)((char *)v24 - *v24 + 6));
      int v32 = v19
          + *(_DWORD *)v21
          + *(unsigned int *)((char *)&v22[2 * *((_DWORD *)v17 + 1)
                                         + 2
                                         + 2 * ((unint64_t)(v26 - v25) >> 4)]
                            + *v22)
          - *(_DWORD *)(v26 + 8);
      if (v32 >= **(_DWORD **)v20) {
        sub_745A4(*(void *)(v20 + 8), &v32);
      }
      uint64_t result = sub_A20748((uint64_t)v23, 0);
      unint64_t v17 = v28;
    }
    while ((unint64_t)v28 >= v27 && (unint64_t)v28 < v29);
  }
  return result;
}

BOOL sub_B47D74(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 56)) >> 2);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = (*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4;
  unint64_t v7 = *(void *)(a2 + 88);
  unint64_t v8 = (void *)(a1 + 4136);
  uint64_t v9 = 4 * v7;
  uint64_t v10 = -1431655765 * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 56)) >> 2);
  for (unsigned int i = v4 - 1; ; --i)
  {
    uint64_t v12 = sub_A10650(v8, v7);
    unsigned int v13 = &v12[-*(int *)v12];
    if (*(unsigned __int16 *)v13 < 5u)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = *((unsigned __int16 *)v13 + 2);
      if (v14) {
        v14 += (uint64_t)&v12[*(unsigned int *)&v12[v14]];
      }
    }
    uint64_t v15 = (int *)(v14 + v9 + 4 + *(unsigned int *)(v14 + v9 + 4));
    uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v16 >= 7u && (uint64_t v17 = v16[3]) != 0) {
      char v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
    }
    else {
      char v18 = 0;
    }
    sub_A1FDE4(v18, i);
    unsigned int v19 = sub_A10650(v8, v7);
    uint64_t v20 = (int *)v19;
    uint64_t v21 = &v19[-*(int *)v19];
    if (*(unsigned __int16 *)v21 < 5u)
    {
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v22 = *((unsigned __int16 *)v21 + 2);
      if (v22) {
        v22 += (uint64_t)&v19[*(unsigned int *)&v19[v22]];
      }
    }
    BOOL v23 = (int *)(v22 + v9 + 4 + *(unsigned int *)(v22 + v9 + 4));
    unint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
    if (*v24 >= 7u && (uint64_t v25 = v24[3]) != 0) {
      uint64_t v26 = (unsigned int *)((char *)v23 + v25 + *(unsigned int *)((char *)v23 + v25));
    }
    else {
      uint64_t v26 = 0;
    }
    unint64_t v27 = (int *)sub_A1FDE4(v26, i);
    int v28 = *v27;
    unint64_t v29 = (unsigned __int16 *)((char *)v20 - *v20);
    if (*v29 < 9u)
    {
      char v30 = 0;
    }
    else
    {
      char v30 = (unsigned int *)v29[4];
      if (v30) {
        char v30 = (unsigned int *)((char *)v30 + (void)v20 + *(unsigned int *)((char *)v30 + (void)v20));
      }
    }
    int v31 = *(_DWORD *)(sub_A1FF48(v30, v27[2] >> 8) + 4);
    int v32 = sub_A10650(v8, v7);
    int v33 = (int *)v32;
    BOOL v34 = &v32[-*(int *)v32];
    if (*(unsigned __int16 *)v34 < 5u)
    {
      uint64_t v35 = 0;
    }
    else
    {
      uint64_t v35 = *((unsigned __int16 *)v34 + 2);
      if (v35) {
        v35 += (uint64_t)&v32[*(unsigned int *)&v32[v35]];
      }
    }
    uint64_t v36 = (int *)(v35 + v9 + 4 + *(unsigned int *)(v35 + v9 + 4));
    unint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
    if (*v37 >= 7u && (uint64_t v38 = v37[3]) != 0) {
      uint64_t v39 = (unsigned int *)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38));
    }
    else {
      uint64_t v39 = 0;
    }
    uint64_t v40 = sub_A1FDE4(v39, i);
    double v41 = (unsigned __int16 *)((char *)v33 - *v33);
    if (*v41 < 7u)
    {
      unint64_t v42 = 0;
    }
    else
    {
      unint64_t v42 = (unsigned int *)v41[3];
      if (v42) {
        unint64_t v42 = (unsigned int *)((char *)v42 + (void)v33 + *(unsigned int *)((char *)v42 + (void)v33));
      }
    }
    if (v31 + v28 + *(_DWORD *)(sub_A200AC(v42, *(_DWORD *)(v40 + 4) + (int)v6) + 4) <= a3) {
      break;
    }
    if (!--v10) {
      return 0;
    }
  }
  if (i == -1) {
    return 0;
  }
  unint64_t v43 = *(void *)(a2 + 88);
  uint64_t v45 = *(void *)(a2 + 24);
  uint64_t v44 = *(void *)(a2 + 32);
  uint64_t v46 = sub_A10650(v8, v43);
  int v47 = &v46[-*(int *)v46];
  if (*(unsigned __int16 *)v47 < 5u)
  {
    uint64_t v48 = 0;
  }
  else
  {
    uint64_t v48 = *((unsigned __int16 *)v47 + 2);
    if (v48) {
      v48 += (uint64_t)&v46[*(unsigned int *)&v46[v48]];
    }
  }
  uint64_t v49 = 4 * v43;
  int v50 = (int *)(v48 + v49 + 4 + *(unsigned int *)(v48 + v49 + 4));
  int v51 = (unsigned __int16 *)((char *)v50 - *v50);
  if (*v51 >= 7u && (uint64_t v52 = v51[3]) != 0) {
    uint64_t v53 = (unsigned int *)((char *)v50 + v52 + *(unsigned int *)((char *)v50 + v52));
  }
  else {
    uint64_t v53 = 0;
  }
  unint64_t v54 = v44 - v45;
  uint64_t v55 = *(unsigned __int8 *)(sub_A1FDE4(v53, i) + 8);
  unsigned int v56 = sub_A10650(v8, v43);
  uint64_t v57 = (int *)v56;
  unsigned int v58 = &v56[-*(int *)v56];
  if (*(unsigned __int16 *)v58 < 5u)
  {
    uint64_t v59 = 0;
  }
  else
  {
    uint64_t v59 = *((unsigned __int16 *)v58 + 2);
    if (v59) {
      v59 += (uint64_t)&v56[*(unsigned int *)&v56[v59]];
    }
  }
  uint64_t v60 = v59 + v49;
  unint64_t v61 = v54 >> 4;
  uint64_t v62 = (int *)(v60 + 4 + *(unsigned int *)(v60 + 4));
  uint64_t v63 = (unsigned __int16 *)((char *)v62 - *v62);
  if (*v63 >= 7u && (uint64_t v64 = v63[3]) != 0) {
    int v65 = (unsigned int *)((char *)v62 + v64 + *(unsigned int *)((char *)v62 + v64));
  }
  else {
    int v65 = 0;
  }
  unsigned int v66 = i;
  uint64_t v67 = sub_A1FDE4(v65, i);
  uint64_t v68 = (unsigned __int16 *)((char *)v57 - *v57);
  if (*v68 < 7u)
  {
    uint64_t v70 = sub_A200AC(0, *(_DWORD *)(v67 + 4) + (int)v61);
    if (!v55)
    {
LABEL_64:
      int v72 = -1;
      goto LABEL_66;
    }
  }
  else
  {
    unint64_t v69 = (unsigned int *)v68[3];
    if (v69) {
      unint64_t v69 = (unsigned int *)((char *)v69 + (void)v57 + *(unsigned int *)((char *)v69 + (void)v57));
    }
    uint64_t v70 = sub_A200AC(v69, *(_DWORD *)(v67 + 4) + (int)v61);
    if (!v55) {
      goto LABEL_64;
    }
  }
  int v71 = *(_DWORD *)(v70 + 4);
  while ((int)(sub_A1FCE8(v8, v43, i, (int)v55 - 1) + v71) > a3)
  {
    if (!--v55) {
      goto LABEL_64;
    }
  }
  int v72 = v55 - 1;
LABEL_66:
  unint64_t v73 = *(void *)(a2 + 88);
  uint64_t v75 = *(void *)(a2 + 24);
  uint64_t v74 = *(void *)(a2 + 32);
  unint64_t v76 = sub_A10650(v8, v73);
  unint64_t v77 = (int *)v76;
  uint64_t v78 = &v76[-*(int *)v76];
  if (*(unsigned __int16 *)v78 < 5u)
  {
    uint64_t v79 = 0;
  }
  else
  {
    uint64_t v79 = *((unsigned __int16 *)v78 + 2);
    if (v79) {
      v79 += (uint64_t)&v76[*(unsigned int *)&v76[v79]];
    }
  }
  int v80 = v72;
  int v81 = (int *)(v79 + 4 * v73 + 4 + *(unsigned int *)(v79 + 4 * v73 + 4));
  unint64_t v82 = (unsigned __int16 *)((char *)v81 - *v81);
  if (*v82 >= 7u && (uint64_t v83 = v82[3]) != 0) {
    uint64_t v84 = (unsigned int *)((char *)v81 + v83 + *(unsigned int *)((char *)v81 + v83));
  }
  else {
    uint64_t v84 = 0;
  }
  uint64_t v85 = sub_A1FDE4(v84, i);
  int v86 = (unsigned __int16 *)((char *)v77 - *v77);
  if (*v86 < 7u)
  {
    int v88 = v72;
    unint64_t v87 = 0;
  }
  else
  {
    unint64_t v87 = (unsigned int *)v86[3];
    int v88 = v72;
    if (v87) {
      unint64_t v87 = (unsigned int *)((char *)v87 + (void)v77 + *(unsigned int *)((char *)v87 + (void)v77));
    }
  }
  int v89 = *(_DWORD *)(sub_A200AC(v87, *(_DWORD *)(v85 + 4) + ((unint64_t)(v74 - v75) >> 4)) + 4);
  int v90 = sub_A1FBEC(v8, v73, v66, v80);
  *(void *)(a2 + 64) = *(void *)(a2 + 56) + 12 * v66;
  if (*(unsigned char *)(a2 + 96))
  {
    int v91 = a3 - v89;
    if (v90 < a3 - v89) {
      int v91 = v90;
    }
    *(_DWORD *)(a2 + 100) = v88;
    *(_DWORD *)(a2 + 104) = v91;
  }
  sub_A20748(a2, a4);
  unint64_t v92 = *(void *)(a2 + 64);
  if (v92 < *(void *)(a2 + 56)) {
    return 0;
  }
  return v92 < *(void *)(a2 + 72);
}

uint64_t sub_B48354(uint64_t a1, int a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  unsigned int v8 = -1431655765 * ((v6 - v5) >> 2);
  if (v7) {
    LODWORD(v7) = *(_DWORD *)(v7 + 32);
  }
  if (v7 == v8) {
    return 0;
  }
  if (!a3) {
    goto LABEL_25;
  }
  if (v8 < 0x41)
  {
    unint64_t v24 = *(void *)(a1 + 64);
    if (v24 >= v5 && v24 < v6) {
      goto LABEL_25;
    }
LABEL_24:
    sub_A20620((void *)a1);
    goto LABEL_25;
  }
  sub_A1ECE8(a1);
  if (*(unsigned char *)(a1 + 96)) {
    uint64_t v9 = (_DWORD *)(a1 + 104);
  }
  else {
    uint64_t v9 = *(_DWORD **)(a1 + 64);
  }
  uint64_t v10 = (unsigned int *)(*(void *)(a1 + 16) + *(unsigned __int16 *)(*(void *)(a1 + 16) - **(int **)(a1 + 16) + 6));
  int v11 = *(unsigned int *)((char *)&v10[2 * *(_DWORD *)(*(void *)(a1 + 64) + 4)
                                     + 1
                                     + 2 * ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4)]
                        + *v10)
      + *v9;
  sub_A20620((void *)a1);
  int v12 = *(unsigned __int8 *)(a1 + 96);
  if (*(unsigned char *)(a1 + 96)) {
    unsigned int v13 = (_DWORD *)(a1 + 104);
  }
  else {
    unsigned int v13 = *(_DWORD **)(a1 + 64);
  }
  if (a2 <= v11)
  {
    sub_A1ECE8(a1);
    unint64_t v26 = *(void *)(a1 + 56);
    uint64_t v25 = *(_DWORD **)(a1 + 64);
    if ((unint64_t)v25 >= v26)
    {
LABEL_26:
      while ((unint64_t)v25 < *(void *)(a1 + 72))
      {
        if (*(unsigned char *)(a1 + 96)) {
          unint64_t v27 = (_DWORD *)(a1 + 104);
        }
        else {
          unint64_t v27 = v25;
        }
        int v28 = (unsigned int *)(*(void *)(a1 + 16)
                             + *(unsigned __int16 *)(*(void *)(a1 + 16) - **(int **)(a1 + 16) + 6));
        if ((int)(*(unsigned int *)((char *)&v28[2 * v25[1]
                                                + 2
                                                + 2 * ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4)]
                                   + *v28)
                 + *v27) > a2)
          goto LABEL_35;
        sub_A2020C(a1, 0);
        unint64_t v26 = *(void *)(a1 + 56);
        uint64_t v25 = *(_DWORD **)(a1 + 64);
        if ((unint64_t)v25 < v26) {
          goto LABEL_34;
        }
      }
    }
    goto LABEL_34;
  }
  uint64_t v14 = (unsigned int *)(*(void *)(a1 + 16) + *(unsigned __int16 *)(*(void *)(a1 + 16) - **(int **)(a1 + 16) + 6));
  int v15 = *(unsigned int *)((char *)&v14[2 * *(_DWORD *)(*(void *)(a1 + 64) + 4)
                                     + 2
                                     + 2 * ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4)]
                        + *v14)
      + *v13;
  if (v15 <= a2) {
    goto LABEL_24;
  }
  double v16 = (double)(a2 - v11) / (double)(v15 - v11);
  uint64_t v17 = *(void *)(a1 + 56);
  unint64_t v18 = (v16
                     * (double)(-1431655765 * ((unint64_t)(*(void *)(a1 + 72) - v17) >> 2) - 1));
  *(void *)(a1 + 64) = v17 + 12 * v18;
  if (v12) {
    *(void *)(a1 + 100) = 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned int v19 = *(unsigned int **)(a1 + 80);
  if (v19)
  {
    int v20 = sub_51D60((unsigned __int8 *)(*(void *)a1 + 3896));
    uint64_t v21 = *v19;
    if (v21 <= v18)
    {
      uint64_t v22 = *((void *)v19 + 1);
      if (*((void *)v19 + 2) + v21 - v22 > v18)
      {
        unsigned int v23 = *(unsigned __int8 *)(v22 + (v18 - v21));
        if ((v23 & 1) != 0 && ((v23 >> 1) & 1 & ~v20) == 0) {
          goto LABEL_24;
        }
      }
    }
  }
LABEL_25:
  unint64_t v26 = *(void *)(a1 + 56);
  uint64_t v25 = *(_DWORD **)(a1 + 64);
  if ((unint64_t)v25 >= v26) {
    goto LABEL_26;
  }
LABEL_34:
  sub_A20748(a1, 0);
  unint64_t v26 = *(void *)(a1 + 56);
  uint64_t v25 = *(_DWORD **)(a1 + 64);
LABEL_35:
  if ((unint64_t)v25 >= v26)
  {
    while ((unint64_t)v25 < *(void *)(a1 + 72))
    {
      if (*(unsigned char *)(a1 + 96)) {
        unint64_t v29 = (_DWORD *)(a1 + 104);
      }
      else {
        unint64_t v29 = v25;
      }
      char v30 = (unsigned int *)(*(void *)(a1 + 16)
                           + *(unsigned __int16 *)(*(void *)(a1 + 16) - **(int **)(a1 + 16) + 6));
      if ((int)(*(unsigned int *)((char *)&v30[2 * v25[1]
                                              + 2
                                              + 2 * ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4)]
                                 + *v30)
               + *v29) <= a2)
        return 1;
      sub_A20748(a1, 0);
      uint64_t v25 = *(_DWORD **)(a1 + 64);
      if ((unint64_t)v25 < *(void *)(a1 + 56)) {
        return 0;
      }
    }
  }
  return 0;
}

void sub_B4868C(uint64_t a1, _OWORD *a2)
{
  sub_725D0((uint64_t)v33);
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 112) = *a2;
  *(_OWORD *)(a1 + 128) = v4;
  sub_B496F0(a1);
  uint64_t v5 = *(void *)(a1 + 48);
  v34[0] = 0x1FFFFFFFDLL;
  *(_DWORD *)(a1 + 432) = sub_A3B520(v5, v34);
  if (!*(unsigned char *)(a1 + 33) || sub_A276F8(*(void *)(a1 + 40)))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    v34[0] = 0x1FFFFFFFELL;
    int v7 = sub_A3B520(v6, v34);
    sub_B4B7FC(a1, 0, v7, 0, *(_DWORD *)(a1 + 116));
  }
  LODWORD(v8) = *(_DWORD *)(a1 + 144);
  if (v8 >= 2)
  {
    unint64_t v9 = 1;
    while (1)
    {
      if (!*(unsigned char *)(a1 + 25) && v9 >= 2 && *(unsigned char *)(a1 + 27)) {
        sub_B4993C(a1, v9);
      }
      if (v9)
      {
        unsigned int v19 = *(unsigned int **)(a1 + 288);
        int v20 = *(unsigned int **)(a1 + 296);
        if (v19 != v20)
        {
          uint64_t v21 = *(void *)(a1 + 264);
          uint64_t v22 = *(unsigned int **)(a1 + 288);
          do
          {
            unsigned int v23 = *v22++;
            *(void *)(v21 + (((unint64_t)v23 >> 3) & 0x1FFFFFF8)) &= ~(1 << v23);
          }
          while (v22 != v20);
        }
        *(void *)(a1 + 296) = v19;
        sub_B49AEC(a1, v9);
        sub_B49DEC(a1, v9);
        unint64_t v24 = *(unsigned int *)(a1 + 432);
        if (*(void *)(a1 + 272) > v24
          && ((*(void *)(*(void *)(a1 + 264) + ((v24 >> 3) & 0x1FFFFFF8)) >> v24) & 1) != 0)
        {
          *(void *)(*(void *)(a1 + 440) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        }
        if (*(unsigned char *)(a1 + 25) && *(void *)(a1 + 288) == *(void *)(a1 + 296))
        {
LABEL_38:
          LODWORD(v8) = *(_DWORD *)(a1 + 144);
          if (v8) {
            goto LABEL_39;
          }
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v10 = *(unsigned int **)(a1 + 240);
        int v11 = *(unsigned int **)(a1 + 248);
        if (v10 != v11)
        {
          uint64_t v12 = *(void *)(a1 + 216);
          unsigned int v13 = *(unsigned int **)(a1 + 240);
          do
          {
            unsigned int v14 = *v13++;
            *(void *)(v12 + (((unint64_t)v14 >> 3) & 0x1FFFFFF8)) &= ~(1 << v14);
          }
          while (v13 != v11);
        }
        *(void *)(a1 + 248) = v10;
        sub_B4A780(a1, v9);
        sub_725D0((uint64_t)v34);
        int v15 = *(unsigned int **)(a1 + 408);
        double v16 = *(unsigned int **)(a1 + 416);
        while (v15 != v16)
        {
          unsigned int v17 = *v15++;
          sub_B4BB64(a1, v9, v17);
        }
        *(double *)(a1 + 608) = sub_72688((uint64_t)v34) + *(double *)(a1 + 608);
        unint64_t v18 = *(unsigned int *)(a1 + 432);
        if (*(void *)(a1 + 224) > v18
          && ((*(void *)(*(void *)(a1 + 216) + ((v18 >> 3) & 0x1FFFFFF8)) >> v18) & 1) != 0)
        {
          *(void *)(*(void *)(a1 + 440) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        }
        if (*(unsigned char *)(a1 + 25) && *(void *)(a1 + 240) == *(void *)(a1 + 248)) {
          goto LABEL_38;
        }
      }
      unint64_t v25 = sub_A4066C(a1) + 728;
      if (*(void *)(a1 + 720) > v25) {
        unint64_t v25 = *(void *)(a1 + 720);
      }
      *(void *)(a1 + 720) = v25;
      if (sub_B44D8C(a1)) {
        goto LABEL_38;
      }
      ++v9;
      unint64_t v8 = *(unsigned int *)(a1 + 144);
      if (v9 >= v8) {
        goto LABEL_36;
      }
    }
  }
  LODWORD(v9) = 1;
LABEL_36:
  if (v8)
  {
LABEL_39:
    unint64_t v26 = 0;
    uint64_t v27 = v8;
    do
    {
      if ((*(void *)(*(void *)(a1 + 440) + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v26))
      {
        *(double *)(a1 + 640) = *(double *)(a1 + 640) + 1.0;
        uint64_t v28 = *(void *)(a1 + 152);
        unint64_t v29 = *(unsigned int *)(a1 + 432);
        if (*(void *)v28 <= v29)
        {
          *(void *)uint64_t v28 = v29 + 1;
          uint64_t v30 = *(void *)(v28 + 16);
          unint64_t v31 = *(void *)(v28 + 8) * (v29 + 1);
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v28 + 24) - v30) >> 3);
          if (v31 > v32)
          {
            sub_B45360((void **)(v28 + 16), v31 - v32);
          }
          else if (v31 < v32)
          {
            *(void *)(v28 + 24) = v30 + 24 * v31;
          }
        }
        *(void *)(a1 + 632) += *(int *)(*(void *)(v28 + 16) + 24 * (v26 + *(void *)(v28 + 8) * v29));
      }
      ++v26;
    }
    while (v27 != v26);
  }
LABEL_48:
  *(double *)(a1 + 648) = (double)v9;
  *(double *)(a1 + 600) = sub_72688((uint64_t)v33);
}

std::string *sub_B48A40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  HIBYTE(v134) = 0;
  LOBYTE(__p[0]) = 0;
  unint64_t v100 = (std::string *)(a2 + 32);
  BOOL v101 = (uint64_t *)(a2 + 8);
  sub_C50BD8((char *)(a2 + 32), (long long *)__p);
  if (SHIBYTE(v134) < 0) {
    operator delete(*(void **)__p);
  }
  *(void *)(v3 + 192) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 184) = *(unsigned char *)(a1 + 112);
  uint64_t v103 = *(unsigned int *)(a1 + 144);
  if (v103 >= 2)
  {
    __asm { FMOV            V0.2D, #1.0 }
    long long v102 = _Q0;
    unint64_t v9 = 1;
    while (((*(void *)(*(void *)(a1 + 440) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    {
LABEL_6:
      if (++v9 == v103) {
        goto LABEL_4;
      }
    }
    uint64_t v10 = *(void *)(a1 + 152);
    unint64_t v11 = *(unsigned int *)(a1 + 432);
    unsigned int v12 = *(_DWORD *)(a1 + 432);
    if (*(void *)v10 <= v11)
    {
      *(void *)uint64_t v10 = v11 + 1;
      uint64_t v13 = *(void *)(v10 + 16);
      unint64_t v14 = *(void *)(v10 + 8) * (v11 + 1);
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v10 + 24) - v13) >> 3);
      if (v14 <= v15)
      {
        if (v14 < v15) {
          *(void *)(v10 + 24) = v13 + 24 * v14;
        }
      }
      else
      {
        sub_B45360((void **)(v10 + 16), v14 - v15);
        unsigned int v12 = *(_DWORD *)(a1 + 432);
      }
    }
    unint64_t v104 = v9;
    uint64_t v16 = *(void *)(v10 + 16) + 24 * (v9 + *(void *)(v10 + 8) * v11);
    int v18 = *(_DWORD *)v16;
    unsigned int v17 = *(_DWORD *)(v16 + 4);
    uint64_t v19 = *(void *)(v16 + 8);
    int v21 = *(_DWORD *)(v16 + 16);
    unint64_t v20 = *(unsigned int *)(v16 + 20);
    LOWORD(__p[0]) = 0;
    BYTE2(__p[0]) = 0;
    *(void *)&__p[1] = 0;
    *(void *)&__p[3] = 0x7FFFFFFFFFFFFFFFLL;
    int v134 = 0x7FFFFFFF;
    __int16 v135 = 0;
    unint64_t v136 = 0x8000000080000000;
    __int16 v137 = 0;
    unint64_t v138 = 0x8000000080000000;
    int v139 = 0x7FFFFFFF;
    __int16 v140 = 0;
    unint64_t v141 = 0x8000000080000000;
    __int16 v142 = 0;
    unint64_t v143 = 0x8000000080000000;
    __int16 v144 = 0;
    unint64_t v145 = 0xFFFFFFFF00000000;
    int v146 = -1;
    uint64_t v147 = 0;
    uint64_t v149 = 0;
    uint64_t v150 = 0;
    uint64_t v151 = 0;
    int v148 = 0x7FFFFFFF;
    int v152 = 100;
    int v153 = -1;
    long long v154 = v102;
    long long v155 = v102;
    long long v156 = v102;
    long long v157 = 0u;
    long long v158 = 0u;
    long long v159 = 0u;
    long long v160 = 0u;
    uint64_t v22 = *(void *)(a1 + 40);
    long long v161 = 0u;
    long long v162 = 0u;
    if (sub_C259C0(v22 + 3896) && *(void *)(v22 + 3944))
    {
      BOOL v23 = 1;
    }
    else
    {
      uint64_t v24 = *(void *)(a1 + 40);
      BOOL v23 = sub_C259D4(v24 + 3896) && *(void *)(v24 + 3960) != 0;
    }
    BYTE1(__p[0]) = v23;
    uint64_t v25 = *(void *)(a1 + 40);
    if (sub_C259D4(v25 + 3896))
    {
      __p[1] = 2 * (*(void *)(v25 + 3960) != 0);
      if (v17 != -1) {
        goto LABEL_23;
      }
      goto LABEL_116;
    }
    __p[1] = 0;
    if (v17 == -1)
    {
LABEL_116:
      unint64_t v85 = v157;
      if ((void)v157 != *((void *)&v157 + 1))
      {
        unint64_t v86 = *((void *)&v157 + 1) - 72;
        if (*((void *)&v157 + 1) - 72 > (unint64_t)v157)
        {
          do
          {
            sub_A4D0C8(v85, v86);
            v85 += 72;
            v86 -= 72;
          }
          while (v85 < v86);
        }
      }
      sub_A29D50((uint64_t)__p);
      unint64_t v87 = *(void *)(v3 + 16);
      if (v87 >= *(void *)(v3 + 24))
      {
        uint64_t v88 = sub_A4D268(v101, (long long *)__p);
      }
      else
      {
        sub_9F68D4(*(void *)(v3 + 16), (long long *)__p);
        uint64_t v88 = v87 + 296;
        *(void *)(v3 + 16) = v87 + 296;
      }
      unint64_t v9 = v104;
      *(void *)(v3 + 16) = v88;
      if (*((void *)&v161 + 1))
      {
        *(void *)&long long v162 = *((void *)&v161 + 1);
        operator delete(*((void **)&v161 + 1));
      }
      if ((void)v160)
      {
        *((void *)&v160 + 1) = v160;
        operator delete((void *)v160);
      }
      if (*((void *)&v158 + 1))
      {
        *(void *)&long long v159 = *((void *)&v158 + 1);
        operator delete(*((void **)&v158 + 1));
      }
      int v89 = (void **)v157;
      if ((void)v157)
      {
        uint64_t v90 = *((void *)&v157 + 1);
        int v91 = (void *)v157;
        if (*((void *)&v157 + 1) != (void)v157)
        {
          do
          {
            unint64_t v93 = *(void **)(v90 - 40);
            if (v93)
            {
              *(void *)(v90 - 32) = v93;
              operator delete(v93);
            }
            uint64_t v94 = (void **)(v90 - 72);
            uint64_t v95 = *(void *)(v90 - 72);
            if (v95)
            {
              uint64_t v96 = *(void *)(v90 - 64);
              unint64_t v92 = *(void **)(v90 - 72);
              if (v96 != v95)
              {
                do
                {
                  if (!*(_DWORD *)(v96 - 8))
                  {
                    unint64_t v97 = *(void **)(v96 - 48);
                    if (v97)
                    {
                      *(void *)(v96 - 40) = v97;
                      operator delete(v97);
                    }
                    uint64_t v98 = *(void **)(v96 - 80);
                    if (v98)
                    {
                      *(void *)(v96 - 72) = v98;
                      operator delete(v98);
                    }
                    uint64_t v99 = *(void **)(v96 - 104);
                    if (v99)
                    {
                      *(void *)(v96 - 96) = v99;
                      operator delete(v99);
                    }
                  }
                  v96 -= 168;
                }
                while (v96 != v95);
                unint64_t v92 = *v94;
              }
              *(void *)(v90 - 64) = v95;
              operator delete(v92);
            }
            v90 -= 72;
          }
          while (v94 != v89);
          int v91 = (void *)v157;
        }
        *((void *)&v157 + 1) = v89;
        operator delete(v91);
        uint64_t v3 = a2;
      }
      if (SHIBYTE(v151) < 0) {
        operator delete(v149);
      }
      goto LABEL_6;
    }
LABEL_23:
    LODWORD(v26) = v104;
    while (1)
    {
      unsigned int v122 = 0;
      unint64_t v123 = 0;
      unint64_t v124 = 0;
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      uint64_t v126 = 0;
      char v129 = 1;
      unint64_t v130 = 0x8000000080000000;
      __int16 v131 = 0;
      char v132 = 0;
      int v186 = -1;
      if (v20 == 0xFFFFFFFF)
      {
        char v125 = 1;
        uint64_t v28 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), v17);
        uint64_t v29 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), v12);
        LODWORD(v164) = 0;
        HIDWORD(v164) = v21;
        uint64_t v166 = v28;
        *(void *)unint64_t v167 = v29;
        int v165 = v18;
        int v178 = 1;
        sub_B46394((uint64_t)v179, (uint64_t)&v164);
        if (!v178)
        {
          if (v176)
          {
            v177 = v176;
            operator delete(v176);
          }
          if (v174)
          {
            v175[0] = v174;
            operator delete(v174);
          }
          uint64_t v30 = v172;
          if (v172)
          {
            unint64_t v173 = v172;
LABEL_80:
            operator delete(v30);
          }
        }
      }
      else
      {
        long long v106 = xmmword_20E12E0;
        __int16 v107 = 0;
        unint64_t v108 = 0x8000000080000000;
        __int16 v109 = 0;
        *(_OWORD *)uint64_t v110 = xmmword_20EB6B0;
        *(void *)&v110[16] = 0xFFFFFFFF7FFFFFFFLL;
        long long v112 = 0u;
        long long v113 = 0u;
        long long v114 = 0u;
        unsigned int v111 = -1;
        int v115 = 0x7FFFFFFF;
        uint64_t v117 = 0;
        uint64_t v118 = 0;
        BOOL v116 = 0;
        char v119 = 1;
        unint64_t v120 = 0x8000000080000000;
        int v121 = 0;
        unint64_t v31 = (void *)(*(void *)(a1 + 56) + 88);
        char v125 = 0;
        uint64_t v32 = *(void *)sub_A3F32C(v31, v20);
        *(void *)uint64_t v110 = v32;
        *(void *)&v110[8] = v19;
        *(_DWORD *)&v110[16] = v21;
        *(_DWORD *)&v110[20] = v17;
        uint64_t v33 = *(void *)(a1 + 40);
        uint64_t v163 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), v12);
        sub_A1E9A0((uint64_t)&v164, v33, v32, v17, 0, 0);
        unint64_t v172 = (void *)(v171 + 12 * *(unsigned int *)&v110[8]);
        if (LOBYTE(v175[0])) {
          *(void *)((char *)v175 + 4) = *(void *)&v110[12];
        }
        if (v170) {
          uint64_t v34 = *(unsigned int *)(v170 + 4 * ((v168 - *(void *)&v167[4]) >> 4));
        }
        else {
          uint64_t v34 = 0;
        }
        sub_A4C9D4((uint64_t)&v164, &v163, v34);
        _CF = v168 < v169 && v168 >= *(void *)&v167[4];
        unint64_t v36 = (v168 - *(void *)&v167[4]) >> 4;
        if (!_CF) {
          LODWORD(v36) = -1;
        }
        unsigned int v111 = v36;
        uint64_t v37 = *(void *)(a1 + 48);
        unsigned int v38 = *(_DWORD *)&v110[20];
        uint64_t v39 = (int *)sub_A11094((void *)(*(void *)(a1 + 40) + 4136), *(unint64_t *)v110);
        uint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
        if (*v40 >= 9u && (uint64_t v41 = v40[4]) != 0) {
          unint64_t v42 = (unsigned int *)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
        }
        else {
          unint64_t v42 = 0;
        }
        uint64_t v164 = __ROR8__(*(void *)sub_A10764(v42, v38), 32);
        unsigned int v17 = sub_A3B520(v37, &v164);
        unsigned int v43 = *(_DWORD *)&v110[20];
        uint64_t v44 = (int *)sub_A11094((void *)(*(void *)(a1 + 40) + 4136), *(unint64_t *)v110);
        uint64_t v45 = (unsigned __int16 *)((char *)v44 - *v44);
        if (*v45 >= 9u && (uint64_t v46 = v45[4]) != 0) {
          int v47 = (unsigned int *)((char *)v44 + v46 + *(unsigned int *)((char *)v44 + v46));
        }
        else {
          int v47 = 0;
        }
        DWORD1(v106) = 10 * *(_DWORD *)(sub_A10764(v47, v43) + 8);
        uint64_t v48 = *(void *)(a1 + 40);
        unint64_t v49 = *(void *)v110;
        unsigned int v50 = *(_DWORD *)&v110[20];
        uint64_t v164 = sub_A104E8((void *)(v48 + 4136), *(unint64_t *)v110, *(unsigned int *)&v110[20], *(int *)&v110[8]);
        int v165 = v51;
        uint64_t v52 = (int *)sub_A11094((void *)(v48 + 4136), v49);
        uint64_t v53 = (unsigned __int16 *)((char *)v52 - *v52);
        if (*v53 >= 9u && (uint64_t v54 = v53[4]) != 0) {
          uint64_t v55 = (unsigned int *)((char *)v52 + v54 + *(unsigned int *)((char *)v52 + v54));
        }
        else {
          uint64_t v55 = 0;
        }
        unsigned int v56 = *(unsigned __int16 *)(sub_A10764(v55, v50) + 12);
        if (*(_DWORD *)&v110[12] == -1) {
          int v57 = 0x7FFFFFFF;
        }
        else {
          int v57 = *(_DWORD *)&v110[16];
        }
        *((void *)&v106 + 1) = sub_A0FAA0((uint64_t *)(v48 + 4184), (unsigned int *)&v164, v56, v57);
        __int16 v107 = v58;
        uint64_t v59 = *(void *)(a1 + 40);
        unint64_t v60 = *(void *)v110;
        unsigned int v61 = v111;
        uint64_t v164 = sub_A104E8((void *)(v59 + 4136), *(unint64_t *)v110, v111, *(int *)&v110[8]);
        int v165 = v62;
        uint64_t v63 = (int *)sub_A11094((void *)(v59 + 4136), v60);
        uint64_t v64 = (unsigned __int16 *)((char *)v63 - *v63);
        if (*v64 >= 9u && (uint64_t v65 = v64[4]) != 0) {
          unsigned int v66 = (unsigned int *)((char *)v63 + v65 + *(unsigned int *)((char *)v63 + v65));
        }
        else {
          unsigned int v66 = 0;
        }
        unsigned int v67 = *(unsigned __int16 *)(sub_A10764(v66, v61) + 12);
        if (*(_DWORD *)&v110[12] == -1) {
          int v68 = 0x7FFFFFFF;
        }
        else {
          int v68 = *(_DWORD *)&v110[16];
        }
        unint64_t v108 = sub_A0FDF4((uint64_t *)(v59 + 4184), (unsigned int *)&v164, v67, v68);
        __int16 v109 = v69;
        int v178 = -1;
        sub_A20F00((uint64_t)&v164, (uint64_t)&v106);
        sub_B46394((uint64_t)v179, (uint64_t)&v164);
        if (!v178)
        {
          if (v176)
          {
            v177 = v176;
            operator delete(v176);
          }
          if (v174)
          {
            v175[0] = v174;
            operator delete(v174);
          }
          if (v172)
          {
            unint64_t v173 = v172;
            operator delete(v172);
          }
        }
        if (v116)
        {
          uint64_t v117 = v116;
          operator delete(v116);
        }
        if (*((void *)&v113 + 1))
        {
          *(void *)&long long v114 = *((void *)&v113 + 1);
          operator delete(*((void **)&v113 + 1));
        }
        uint64_t v30 = (void *)v112;
        if ((void)v112)
        {
          *((void *)&v112 + 1) = v112;
          goto LABEL_80;
        }
      }
      uint64_t v70 = v123;
      if ((unint64_t)v123 >= v124)
      {
        unint64_t v123 = (_DWORD *)sub_A4CBF4((uint64_t *)&v122, (uint64_t)v179);
        int v71 = (void *)*((void *)&v157 + 1);
        if (*((void *)&v157 + 1) >= (unint64_t)v158) {
          goto LABEL_86;
        }
      }
      else
      {
        v123[40] = v186;
        if (v186 == 1)
        {
          long long v84 = *(_OWORD *)v179;
          *(_OWORD *)((char *)v70 + 12) = *(_OWORD *)&v179[12];
          _OWORD *v70 = v84;
          unint64_t v123 = (_DWORD *)v70 + 42;
          int v71 = (void *)*((void *)&v157 + 1);
          if (*((void *)&v157 + 1) >= (unint64_t)v158) {
            goto LABEL_86;
          }
        }
        else
        {
          if (!v186) {
            sub_9F6FA0((uint64_t)v70, (long long *)v179);
          }
          unint64_t v123 = (_DWORD *)v70 + 42;
          int v71 = (void *)*((void *)&v157 + 1);
          if (*((void *)&v157 + 1) >= (unint64_t)v158)
          {
LABEL_86:
            *((void *)&v157 + 1) = sub_A4CECC((void ***)&v157, (uint64_t)&v122);
            uint64_t v72 = *(void *)(a1 + 152);
            uint64_t v73 = v17;
            if (*(void *)v72 <= (unint64_t)v17) {
              goto LABEL_90;
            }
            goto LABEL_94;
          }
        }
      }
      sub_9F6D1C(v71, (uint64_t)&v122);
      *((void *)&v157 + 1) = v71 + 9;
      uint64_t v72 = *(void *)(a1 + 152);
      uint64_t v73 = v17;
      if (*(void *)v72 <= (unint64_t)v17)
      {
LABEL_90:
        *(void *)uint64_t v72 = v73 + 1;
        uint64_t v74 = *(void *)(v72 + 16);
        unint64_t v75 = *(void *)(v72 + 8) * (v73 + 1);
        unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v72 + 24) - v74) >> 3);
        if (v75 <= v76)
        {
          if (v75 < v76) {
            *(void *)(v72 + 24) = v74 + 24 * v75;
          }
        }
        else
        {
          sub_B45360((void **)(v72 + 16), v75 - v76);
        }
      }
LABEL_94:
      uint64_t v26 = (v26 - 1);
      uint64_t v77 = *(void *)(v72 + 16) + 24 * (v26 + *(void *)(v72 + 8) * v73);
      int v18 = *(_DWORD *)v77;
      unsigned int v78 = *(_DWORD *)(v77 + 4);
      uint64_t v19 = *(void *)(v77 + 8);
      int v21 = *(_DWORD *)(v77 + 16);
      unint64_t v20 = *(unsigned int *)(v77 + 20);
      if (!v186)
      {
        if (v184)
        {
          uint64_t v185 = v184;
          operator delete(v184);
        }
        if (v182)
        {
          uint64_t v183 = v182;
          operator delete(v182);
        }
        if (v180)
        {
          unsigned int v181 = v180;
          operator delete(v180);
        }
      }
      if (v126)
      {
        uint64_t v127 = v126;
        operator delete(v126);
      }
      uint64_t v79 = v122;
      if (v122)
      {
        int v80 = v123;
        uint64_t v27 = v122;
        if (v123 != v122)
        {
          do
          {
            if (!*(v80 - 2))
            {
              int v81 = (void *)*((void *)v80 - 6);
              if (v81)
              {
                *((void *)v80 - 5) = v81;
                operator delete(v81);
              }
              unint64_t v82 = (void *)*((void *)v80 - 10);
              if (v82)
              {
                *((void *)v80 - 9) = v82;
                operator delete(v82);
              }
              uint64_t v83 = (void *)*((void *)v80 - 13);
              if (v83)
              {
                *((void *)v80 - 12) = v83;
                operator delete(v83);
              }
            }
            v80 -= 42;
          }
          while (v80 != v79);
          uint64_t v27 = v122;
        }
        unint64_t v123 = v79;
        operator delete(v27);
      }
      unsigned int v12 = v17;
      unsigned int v17 = v78;
      _ZF = v78 == -1;
      uint64_t v3 = a2;
      if (_ZF) {
        goto LABEL_116;
      }
    }
  }
LABEL_4:
  uint64_t result = std::string::operator=(v100, (const std::string *)(a1 + 576));
  *(_OWORD *)(v3 + 120) = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(v3 + 136) = *(_OWORD *)(a1 + 680);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 696);
  *(_OWORD *)(v3 + 168) = *(_OWORD *)(a1 + 712);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 600);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a1 + 616);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a1 + 632);
  *(_OWORD *)(v3 + 104) = *(_OWORD *)(a1 + 648);
  return result;
}

void sub_B495E0(_Unwind_Exception *a1)
{
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_B496F0(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 240);
  uint64_t v3 = *(unsigned int **)(a1 + 248);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(a1 + 216);
    uint64_t v5 = *(unsigned int **)(a1 + 240);
    do
    {
      unsigned int v6 = *v5++;
      *(void *)(v4 + (((unint64_t)v6 >> 3) & 0x1FFFFFF8)) &= ~(1 << v6);
    }
    while (v5 != v3);
  }
  *(void *)(a1 + 248) = v2;
  int v7 = *(unsigned int **)(a1 + 288);
  unint64_t v8 = *(unsigned int **)(a1 + 296);
  if (v7 != v8)
  {
    uint64_t v9 = *(void *)(a1 + 264);
    uint64_t v10 = *(unsigned int **)(a1 + 288);
    do
    {
      unsigned int v11 = *v10++;
      *(void *)(v9 + (((unint64_t)v11 >> 3) & 0x1FFFFFF8)) &= ~(1 << v11);
    }
    while (v10 != v8);
  }
  *(void *)(a1 + 296) = v7;
  unsigned int v12 = *(unsigned int **)(a1 + 336);
  uint64_t v13 = *(unsigned int **)(a1 + 344);
  if (v12 != v13)
  {
    uint64_t v14 = *(void *)(a1 + 312);
    unint64_t v15 = *(unsigned int **)(a1 + 336);
    do
    {
      unsigned int v16 = *v15++;
      *(void *)(v14 + (((unint64_t)v16 >> 3) & 0x1FFFFFF8)) &= ~(1 << v16);
    }
    while (v15 != v13);
  }
  *(void *)(a1 + 344) = v12;
  unsigned int v17 = *(unsigned int **)(a1 + 408);
  int v18 = *(unsigned int **)(a1 + 416);
  if (v17 != v18)
  {
    uint64_t v19 = *(void *)(a1 + 384);
    uint64_t v20 = *(void *)(a1 + 360);
    int v21 = *(unsigned int **)(a1 + 408);
    do
    {
      unsigned int v22 = *v21++;
      *(void *)(v19 + (((unint64_t)v22 >> 3) & 0x1FFFFFF8)) &= ~(1 << v22);
      *(_DWORD *)(v20 + 4 * v22) = -1;
    }
    while (v21 != v18);
  }
  *(void *)(a1 + 416) = v17;
  sub_BD5698(a1 + 464);
  *(void *)(a1 + 448) = 0;
  char v27 = 0;
  LOBYTE(__p) = 0;
  sub_C50BD8((char *)&__dst, &__p);
  BOOL v23 = (void **)(a1 + 576);
  if (*(char *)(a1 + 599) < 0) {
    operator delete(*v23);
  }
  *(_OWORD *)BOOL v23 = __dst;
  *(void *)(a1 + 592) = v29;
  HIBYTE(v29) = 0;
  LOBYTE(__dst) = 0;
  *(_OWORD *)(a1 + 664) = v34;
  *(_OWORD *)(a1 + 680) = v35;
  *(_OWORD *)(a1 + 696) = v36;
  *(_OWORD *)(a1 + 712) = v37;
  *(_OWORD *)(a1 + 600) = v30;
  *(_OWORD *)(a1 + 616) = v31;
  *(_OWORD *)(a1 + 632) = v32;
  *(_OWORD *)(a1 + 648) = v33;
  if (v27 < 0) {
    operator delete((void *)__p);
  }
  unint64_t v24 = (2 * *(_DWORD *)(a1 + 8) + 2);
  *(_DWORD *)(a1 + 144) = v24;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v25 = *(void **)(a1 + 152);
    v25[3] = v25[2];
    *uint64_t v25 = 0;
    v25[1] = v24;
  }
  *(void *)(a1 + 176) = *(void *)(a1 + 168);
  *(void *)(a1 + 200) = *(void *)(a1 + 192);
  sub_A3E96C(a1 + 440, v24, 0);
  sub_BD5704(a1 + 464, *(void *)(a1 + 16));
}

void sub_B49920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_B4993C(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(unsigned int **)(a1 + 336);
  uint64_t v4 = *(unsigned int **)(a1 + 344);
  if (v3 == v4)
  {
    uint64_t v20 = *(void *)(a1 + 336);
    goto LABEL_25;
  }
  uint64_t v5 = a2 - 2;
  uint64_t v6 = a2;
  do
  {
    unint64_t v7 = *v3;
    uint64_t v8 = *(void *)(a1 + 152);
    unint64_t v9 = *(void *)v8;
    uint64_t v10 = v8;
    if (*(void *)v8 > v7) {
      goto LABEL_7;
    }
    *(void *)uint64_t v8 = v7 + 1;
    uint64_t v11 = *(void *)(v8 + 16);
    unint64_t v12 = *(void *)(v8 + 8) * (v7 + 1);
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v8 + 24) - v11) >> 3);
    if (v12 > v13)
    {
      sub_B45360((void **)(v8 + 16), v12 - v13);
      uint64_t v10 = *(void *)(a1 + 152);
      unint64_t v9 = *(void *)v10;
LABEL_7:
      int v14 = *(_DWORD *)(*(void *)(v8 + 16) + 24 * (v5 + *(void *)(v8 + 8) * v7));
      if (v9 > v7) {
        goto LABEL_16;
      }
LABEL_12:
      *(void *)uint64_t v10 = v7 + 1;
      uint64_t v15 = *(void *)(v10 + 16);
      unint64_t v16 = *(void *)(v10 + 8) * (v7 + 1);
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v10 + 24) - v15) >> 3);
      if (v16 <= v17)
      {
        if (v16 < v17) {
          *(void *)(v10 + 24) = v15 + 24 * v16;
        }
      }
      else
      {
        sub_B45360((void **)(v10 + 16), v16 - v17);
      }
      goto LABEL_16;
    }
    if (v12 < v13) {
      *(void *)(v8 + 24) = v11 + 24 * v12;
    }
    uint64_t v10 = v8;
    int v14 = *(_DWORD *)(*(void *)(v8 + 16) + 24 * (v5 + *(void *)(v8 + 8) * v7));
    if (v7 + 1 <= v7) {
      goto LABEL_12;
    }
LABEL_16:
    if (v14 != 0x7FFFFFFF)
    {
      int v18 = (_DWORD *)(*(void *)(v10 + 16) + 24 * (v6 + *(void *)(v10 + 8) * v7));
      if (*v18 == 0x7FFFFFFF || v14 < *v18) {
        *int v18 = v14;
      }
    }
    ++v3;
  }
  while (v3 != v4);
  uint64_t v3 = *(unsigned int **)(a1 + 336);
  uint64_t v20 = *(void *)(a1 + 344);
LABEL_25:
  double result = *(double *)(a1 + 680) + (double)(unint64_t)((v20 - (uint64_t)v3) >> 2);
  *(double *)(a1 + 680) = result;
  return result;
}

double sub_B49AEC(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v35);
  uint64_t v4 = *(unsigned int **)(a1 + 240);
  long long v34 = *(unsigned int **)(a1 + 248);
  if (v4 != v34)
  {
    uint64_t v33 = a2 - 1;
    int v31 = ~a2;
    uint64_t v32 = a2;
    while (1)
    {
      unint64_t v6 = *v4;
      unint64_t v7 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), v6);
      uint64_t v8 = *(void *)(a1 + 152);
      if (*(void *)v8 <= v6)
      {
        *(void *)uint64_t v8 = v6 + 1;
        uint64_t v9 = *(void *)(v8 + 16);
        unint64_t v10 = *(void *)(v8 + 8) * (v6 + 1);
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v8 + 24) - v9) >> 3);
        if (v10 <= v11)
        {
          if (v10 < v11) {
            *(void *)(v8 + 24) = v9 + 24 * v10;
          }
        }
        else
        {
          sub_B45360((void **)(v8 + 16), v10 - v11);
        }
      }
      int v12 = *(_DWORD *)(*(void *)(v8 + 16) + 24 * (v33 + *(void *)(v8 + 8) * v6));
      if (HIDWORD(v7) == 1 && (v7 + 3) < 2)
      {
        signed int v19 = *(_DWORD *)(*(void *)(v8 + 16) + 24 * (v33 + *(void *)(v8 + 8) * v6));
        uint64_t v20 = *(unint64_t **)(a1 + 64);
        if (v20) {
          goto LABEL_26;
        }
        goto LABEL_33;
      }
      uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 4120);
      uint64_t v15 = v14 + 24;
      if (*(unsigned char *)(v14 + 17)) {
        break;
      }
      unint64_t v16 = (int *)sub_498D5C(v15, __ROR8__(v7, 32), 0, "stop");
      int v21 = (unsigned __int16 *)((char *)v16 - *v16);
      if (*v21 >= 0x15u)
      {
        unsigned int v17 = v21[10];
        if (v17) {
          goto LABEL_24;
        }
      }
      signed int v19 = v12 + 30;
      uint64_t v20 = *(unint64_t **)(a1 + 64);
      if (v20)
      {
LABEL_26:
        if (*v20 > v6)
        {
          unsigned int v22 = 0;
          unsigned int v23 = *(_DWORD *)(a1 + 144) + v31;
          unsigned int v24 = v23;
          while (v22 <= v23)
          {
            signed int v25 = *(_DWORD *)sub_B45630(v20 + 2, v20[1] * v6 + v24);
            v22 += 2;
            v24 -= 2;
            if (v25 != 0x7FFFFFFF)
            {
              if (v25 < v19) {
                goto LABEL_5;
              }
              goto LABEL_33;
            }
          }
        }
        goto LABEL_5;
      }
LABEL_33:
      if (sub_B4B7FC(a1, 1u, v6, v32, v19))
      {
        uint64_t v26 = *(void *)(a1 + 152);
        if (*(void *)v26 <= v6)
        {
          *(void *)uint64_t v26 = v6 + 1;
          uint64_t v27 = *(void *)(v26 + 16);
          unint64_t v28 = *(void *)(v26 + 8) * (v6 + 1);
          unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v26 + 24) - v27) >> 3);
          if (v28 > v29)
          {
            sub_B45360((void **)(v26 + 16), v28 - v29);
          }
          else if (v28 < v29)
          {
            *(void *)(v26 + 24) = v27 + 24 * v28;
          }
        }
        uint64_t v5 = *(void *)(v26 + 16) + 24 * (v32 + *(void *)(v26 + 8) * v6);
        *(_DWORD *)(v5 + 4) = v6;
        *(void *)(v5 + 8) = -1;
        *(_DWORD *)(v5 + 16) = v12;
        *(_DWORD *)(v5 + 20) = -1;
      }
LABEL_5:
      if (++v4 == v34) {
        goto LABEL_38;
      }
    }
    unint64_t v16 = (int *)sub_A1A290(v15, v7, 0, "transfers at stop");
    unsigned int v17 = 0;
    int v18 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v18 >= 5u)
    {
      unsigned int v17 = v18[2];
      if (v18[2]) {
LABEL_24:
      }
        unsigned int v17 = *(int *)((char *)v16 + v17);
    }
    signed int v19 = v17 + v12;
    uint64_t v20 = *(unint64_t **)(a1 + 64);
    if (v20) {
      goto LABEL_26;
    }
    goto LABEL_33;
  }
LABEL_38:
  double result = sub_72688((uint64_t)v35) + *(double *)(a1 + 616);
  *(double *)(a1 + 616) = result;
  return result;
}

double sub_B49DEC(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v122);
  uint64_t v4 = *(unsigned int **)(a1 + 240);
  __int16 v109 = *(unsigned int **)(a1 + 248);
  if (v4 != v109)
  {
    uint64_t v108 = a2 - 1;
    int v111 = ~a2;
    uint64_t v112 = a2;
    uint64_t v114 = a1;
    do
    {
      uint64_t v110 = v4;
      unint64_t v5 = *v4;
      unint64_t v6 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), v5);
      uint64_t v7 = *(void *)(a1 + 152);
      unint64_t v115 = v5;
      if (*(void *)v7 <= v5)
      {
        *(void *)uint64_t v7 = v5 + 1;
        uint64_t v8 = *(void *)(v7 + 16);
        unint64_t v9 = *(void *)(v7 + 8) * (v5 + 1);
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v7 + 24) - v8) >> 3);
        if (v9 <= v10)
        {
          if (v9 < v10) {
            *(void *)(v7 + 24) = v8 + 24 * v9;
          }
        }
        else
        {
          sub_B45360((void **)(v7 + 16), v9 - v10);
        }
      }
      int v113 = *(_DWORD *)(*(void *)(v7 + 16) + 24 * (v108 + *(void *)(v7 + 8) * v5));
      sub_A19FA8((uint64_t)&v116, *(void *)(a1 + 40), v6);
      unint64_t v11 = v117;
      if (v121) {
        int v12 = v120;
      }
      else {
        int v12 = (unint64_t *)&v118;
      }
      unint64_t v13 = *v12;
      while ((unint64_t)v11 < v13)
      {
        unint64_t v16 = __ROR8__(*v11, 32);
        uint64_t v17 = *(void *)(a1 + 48);
        uint64_t v18 = *(void *)(v17 + 56) - 1;
        unint64_t v19 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v16 ^ (v16 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v16 ^ (v16 >> 33))) >> 33));
        unint64_t v20 = v19 ^ (v19 >> 33);
        uint64_t v21 = *(void *)(v17 + 80);
        int v23 = *(_DWORD *)(v17 + 64);
        int v22 = *(_DWORD *)(v17 + 68);
        uint64_t v24 = v20 & v18;
        signed int v25 = (unsigned int *)(v21 + 12 * (v20 & v18));
        unsigned int v27 = *v25;
        unsigned int v26 = v25[1];
        if (v22 == v26 && v23 == v27) {
          goto LABEL_61;
        }
        if (*(void *)(v17 + 40))
        {
          uint64_t v29 = -1;
          uint64_t v30 = 1;
          do
          {
            if (*(_DWORD *)(v17 + 36) == v26 && *(_DWORD *)(v17 + 32) == v27)
            {
              if (v29 == -1) {
                uint64_t v29 = v24;
              }
            }
            else if (__PAIR64__(v26, v27) == v16)
            {
              goto LABEL_58;
            }
            uint64_t v24 = (v24 + v30) & v18;
            int v31 = (unsigned int *)(v21 + 12 * v24);
            unsigned int v27 = *v31;
            unsigned int v26 = v31[1];
            ++v30;
          }
          while (v22 != v26 || v23 != v27);
          if (v29 == -1)
          {
LABEL_61:
            uint64_t v29 = v24;
            if (!sub_A3BA84(*(void *)(a1 + 48), 1)) {
              goto LABEL_62;
            }
            goto LABEL_36;
          }
          if (!sub_A3BA84(*(void *)(a1 + 48), 1)) {
            goto LABEL_62;
          }
        }
        else
        {
          uint64_t v47 = 1;
          while (__PAIR64__(v26, v27) != v16)
          {
            uint64_t v24 = (v24 + v47) & v18;
            uint64_t v48 = (unsigned int *)(v21 + 12 * v24);
            unsigned int v27 = *v48;
            unsigned int v26 = v48[1];
            ++v47;
            if (v22 == v26 && v23 == v27) {
              goto LABEL_61;
            }
          }
LABEL_58:
          if (v24 != -1)
          {
            uint64_t v50 = v21 + 12 * v24;
            unint64_t v51 = *(unsigned int *)(v50 + 8);
            if (v51 == -1) {
              goto LABEL_95;
            }
            goto LABEL_118;
          }
          uint64_t v29 = -1;
          if (!sub_A3BA84(*(void *)(a1 + 48), 1))
          {
LABEL_62:
            uint64_t v53 = *(void *)(v17 + 40);
            uint64_t v52 = *(void *)(v17 + 48);
            if ((unint64_t)(v52 - v53) >= 0x1555555555555555) {
              goto LABEL_165;
            }
            uint64_t v34 = *(void *)(v17 + 80);
            if (v53
              && ((uint64_t v54 = (_DWORD *)(v34 + 12 * v29), *(_DWORD *)(v17 + 36) == v54[1])
                ? (BOOL v55 = *(_DWORD *)(v17 + 32) == *v54)
                : (BOOL v55 = 0),
                  v55))
            {
              *(void *)(v17 + 40) = v53 - 1;
            }
            else
            {
              *(void *)(v17 + 48) = v52 + 1;
            }
            uint64_t v56 = 3 * v29;
            goto LABEL_94;
          }
        }
LABEL_36:
        uint64_t v33 = *(void *)(v17 + 56) - 1;
        uint64_t v34 = *(void *)(v17 + 80);
        int v36 = *(_DWORD *)(v17 + 64);
        int v35 = *(_DWORD *)(v17 + 68);
        uint64_t v37 = v33 & v20;
        unsigned int v38 = (unsigned int *)(v34 + 12 * (v33 & v20));
        unsigned int v40 = *v38;
        unsigned int v39 = v38[1];
        uint64_t v41 = *(void *)(v17 + 40);
        if (v35 == v39 && v36 == v40) {
          goto LABEL_85;
        }
        if (v41)
        {
          uint64_t v43 = -1;
          uint64_t v44 = 1;
          do
          {
            if (*(_DWORD *)(v17 + 36) == v39 && *(_DWORD *)(v17 + 32) == v40)
            {
              if (v43 == -1) {
                uint64_t v43 = v37;
              }
            }
            else if (__PAIR64__(v39, v40) == v16)
            {
              goto LABEL_79;
            }
            uint64_t v37 = (v37 + v44) & v33;
            uint64_t v45 = (unsigned int *)(v34 + 12 * v37);
            unsigned int v40 = *v45;
            unsigned int v39 = v45[1];
            ++v44;
          }
          while (v35 != v39 || v36 != v40);
          if (v43 == -1) {
LABEL_85:
          }
            uint64_t v43 = v37;
          uint64_t v60 = *(void *)(v17 + 48);
          if ((unint64_t)(v60 - v41) >= 0x1555555555555555) {
            goto LABEL_165;
          }
LABEL_87:
          if (v41
            && ((unsigned int v61 = (_DWORD *)(v34 + 12 * v43), *(_DWORD *)(v17 + 36) == v61[1])
              ? (BOOL v62 = *(_DWORD *)(v17 + 32) == *v61)
              : (BOOL v62 = 0),
                v62))
          {
            *(void *)(v17 + 40) = v41 - 1;
            uint64_t v56 = 3 * v43;
          }
          else
          {
            *(void *)(v17 + 48) = v60 + 1;
            uint64_t v56 = 3 * v43;
          }
LABEL_94:
          uint64_t v63 = 4 * v56;
          uint64_t v64 = v34 + v63;
          *(void *)uint64_t v64 = v16;
          *(_DWORD *)(v64 + 8) = -1;
          uint64_t v50 = *(void *)(v17 + 80) + v63;
          unint64_t v51 = *(unsigned int *)(v50 + 8);
          if (v51 != -1) {
            goto LABEL_118;
          }
LABEL_95:
          int v65 = *(_DWORD *)(v17 + 112);
          *(_DWORD *)(v17 + 112) = v65 + 1;
          *(_DWORD *)(v50 + 8) = v65;
          unsigned int v67 = *(char **)(v17 + 96);
          unint64_t v66 = *(void *)(v17 + 104);
          if ((unint64_t)v67 < v66)
          {
            *(void *)unsigned int v67 = v16;
            uint64_t v68 = (uint64_t)(v67 + 8);
LABEL_117:
            *(void *)(v17 + 96) = v68;
            unint64_t v51 = *(unsigned int *)(v50 + 8);
            goto LABEL_118;
          }
          __int16 v69 = *(char **)(v17 + 88);
          uint64_t v70 = (v67 - v69) >> 3;
          unint64_t v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v72 = v66 - (void)v69;
          if (v72 >> 2 > v71) {
            unint64_t v71 = v72 >> 2;
          }
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
          }
          if (v71)
          {
            if (v71 >> 61) {
              sub_188D718();
            }
            unint64_t v73 = v71;
            uint64_t v74 = (char *)operator new(8 * v71);
            unint64_t v75 = &v74[8 * v70];
            *(void *)unint64_t v75 = v16;
            uint64_t v68 = (uint64_t)(v75 + 8);
            if (v67 != v69) {
              goto LABEL_105;
            }
LABEL_108:
            *(void *)(v17 + 88) = v75;
            *(void *)(v17 + 96) = v68;
            *(void *)(v17 + 104) = &v74[8 * v73];
            if (!v67) {
              goto LABEL_117;
            }
          }
          else
          {
            unint64_t v73 = 0;
            uint64_t v74 = 0;
            unint64_t v75 = (char *)(8 * v70);
            *(void *)(8 * v70) = v16;
            uint64_t v68 = 8 * v70 + 8;
            if (v67 == v69) {
              goto LABEL_108;
            }
LABEL_105:
            unint64_t v76 = v67 - 8 - v69;
            if (v76 < 0x58) {
              goto LABEL_170;
            }
            if ((unint64_t)(v69 - v74) < 0x20) {
              goto LABEL_170;
            }
            uint64_t v77 = (v76 >> 3) + 1;
            uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v79 = &v67[-v78];
            v75 -= v78;
            int v80 = &v74[8 * v70 - 16];
            int v81 = (long long *)(v67 - 16);
            uint64_t v82 = v77 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v83 = *v81;
              *((_OWORD *)v80 - 1) = *(v81 - 1);
              *(_OWORD *)int v80 = v83;
              v80 -= 32;
              v81 -= 2;
              v82 -= 4;
            }
            while (v82);
            unsigned int v67 = v79;
            if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_170:
              do
              {
                uint64_t v84 = *((void *)v67 - 1);
                v67 -= 8;
                *((void *)v75 - 1) = v84;
                v75 -= 8;
              }
              while (v67 != v69);
            }
            unsigned int v67 = *(char **)(v17 + 88);
            *(void *)(v17 + 88) = v75;
            *(void *)(v17 + 96) = v68;
            *(void *)(v17 + 104) = &v74[8 * v73];
            if (!v67) {
              goto LABEL_117;
            }
          }
          operator delete(v67);
          goto LABEL_117;
        }
        uint64_t v57 = 1;
        while (__PAIR64__(v39, v40) != v16)
        {
          uint64_t v37 = (v37 + v57) & v33;
          __int16 v58 = (unsigned int *)(v34 + 12 * v37);
          unsigned int v40 = *v58;
          unsigned int v39 = v58[1];
          ++v57;
          if (v35 == v39 && v36 == v40)
          {
            uint64_t v41 = 0;
            goto LABEL_85;
          }
        }
LABEL_79:
        if (v37 == -1)
        {
          uint64_t v43 = -1;
          uint64_t v60 = *(void *)(v17 + 48);
          if ((unint64_t)(v60 - v41) >= 0x1555555555555555)
          {
LABEL_165:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
          goto LABEL_87;
        }
        uint64_t v50 = v34 + 12 * v37;
        unint64_t v51 = *(unsigned int *)(v50 + 8);
        if (v51 == -1) {
          goto LABEL_95;
        }
LABEL_118:
        a1 = v114;
        *(double *)(v114 + 672) = *(double *)(v114 + 672) + 1.0;
        if (v115 != v51)
        {
          int v85 = *((_DWORD *)v117 + 2);
          int v86 = v85 / 10;
          int v87 = v85 % 10;
          if (v85 < 0) {
            char v88 = -5;
          }
          else {
            char v88 = 5;
          }
          signed int v89 = v86 + v113 + (((103 * (char)(v88 + v87)) >> 15) & 1) + ((103 * (char)(v88 + v87)) >> 10);
          uint64_t v90 = *(unint64_t **)(v114 + 64);
          if (v90)
          {
            if (*v90 > v51)
            {
              unsigned int v91 = 0;
              unsigned int v92 = *(_DWORD *)(v114 + 144) + v111;
              unsigned int v93 = v92;
              while (v91 <= v92)
              {
                signed int v94 = *(_DWORD *)sub_B45630(v90 + 2, v90[1] * v51 + v93);
                v91 += 2;
                v93 -= 2;
                if (v94 != 0x7FFFFFFF)
                {
                  if (v94 < v89) {
                    break;
                  }
                  goto LABEL_128;
                }
              }
            }
          }
          else
          {
LABEL_128:
            if (sub_B4B7FC(v114, 1u, v51, v112, v89))
            {
              uint64_t v95 = *(void *)(v114 + 152);
              if (*(void *)v95 <= v51)
              {
                *(void *)uint64_t v95 = v51 + 1;
                uint64_t v96 = *(void *)(v95 + 16);
                unint64_t v97 = *(void *)(v95 + 8) * (v51 + 1);
                unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v95 + 24) - v96) >> 3);
                if (v97 <= v98)
                {
                  if (v97 < v98) {
                    *(void *)(v95 + 24) = v96 + 24 * v97;
                  }
                }
                else
                {
                  sub_B45360((void **)(v95 + 16), v97 - v98);
                }
              }
              uint64_t v99 = *(void *)(v95 + 16) + 24 * (v112 + *(void *)(v95 + 8) * v51);
              *(_DWORD *)(v99 + 4) = v115;
              *(void *)(v99 + 8) = -1;
              *(_DWORD *)(v99 + 16) = v113;
              *(_DWORD *)(v99 + 20) = -1;
            }
          }
        }
        unint64_t v13 = (unint64_t)v118;
        unint64_t v11 = (void *)((char *)v117 + 12);
        uint64_t v117 = v11;
        if (v11 == v118)
        {
          unint64_t v11 = v119;
          unint64_t v15 = v120[0];
          uint64_t v117 = v119;
          int v14 = 1;
          unsigned __int8 v121 = 1;
          if (!*(unsigned char *)(v116 + 16)) {
            goto LABEL_15;
          }
        }
        else
        {
          int v14 = v121;
          unint64_t v15 = v120[0];
          if (!*(unsigned char *)(v116 + 16)) {
            goto LABEL_15;
          }
        }
        if (v14) {
          unint64_t v100 = v15;
        }
        else {
          unint64_t v100 = (unint64_t)v118;
        }
        if ((unint64_t)v11 < v100)
        {
          unint64_t v101 = __ROR8__(*v11, 32);
          if (HIDWORD(v101) != 1 || (v101 + 3) >= 2)
          {
            while (!sub_2AB7E4(**(void **)(v116 + 4120)))
            {
              unint64_t v13 = (unint64_t)v118;
              unint64_t v11 = (void *)((char *)v117 + 12);
              uint64_t v117 = v11;
              if (v11 == v118)
              {
                unint64_t v11 = v119;
                uint64_t v117 = v119;
                LOBYTE(v14) = 1;
                unsigned __int8 v121 = 1;
                if ((unint64_t)v119 >= v120[0]) {
                  goto LABEL_14;
                }
              }
              else
              {
                LOBYTE(v14) = v121;
                if (v121) {
                  unint64_t v105 = v120;
                }
                else {
                  unint64_t v105 = &v118;
                }
                if ((unint64_t)v11 >= *v105) {
                  goto LABEL_14;
                }
              }
              unint64_t v103 = __ROR8__(*v11, 32);
              if (HIDWORD(v103) == 1 && (v103 + 3) < 2) {
                goto LABEL_14;
              }
            }
            LOBYTE(v14) = v121;
            unint64_t v11 = v117;
            unint64_t v13 = (unint64_t)v118;
          }
LABEL_14:
          unint64_t v15 = v120[0];
        }
LABEL_15:
        if ((_BYTE)v14) {
          unint64_t v13 = v15;
        }
      }
      uint64_t v4 = v110 + 1;
    }
    while (v110 + 1 != v109);
  }
  double result = sub_72688((uint64_t)v122) + *(double *)(a1 + 616);
  *(double *)(a1 + 616) = result;
  return result;
}

void sub_B4A758(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B4A76C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_B4A780(uint64_t a1, unsigned int a2)
{
  sub_725D0((uint64_t)v227);
  uint64_t v4 = *(unsigned int **)(a1 + 408);
  unint64_t v5 = *(unsigned int **)(a1 + 416);
  if (v4 != v5)
  {
    uint64_t v6 = *(void *)(a1 + 384);
    uint64_t v7 = *(void *)(a1 + 360);
    uint64_t v8 = *(unsigned int **)(a1 + 408);
    do
    {
      unsigned int v9 = *v8++;
      *(void *)(v6 + (((unint64_t)v9 >> 3) & 0x1FFFFFF8)) &= ~(1 << v9);
      *(_DWORD *)(v7 + 4 * v9) = -1;
    }
    while (v8 != v5);
  }
  *(void *)(a1 + 416) = v4;
  unint64_t v10 = *(unsigned int **)(a1 + 288);
  v216 = *(unsigned int **)(a1 + 296);
  if (v10 == v216) {
    goto LABEL_273;
  }
  v212 = (void **)(a1 + 408);
  unint64_t v217 = a2;
  uint64_t v214 = a2 + 1;
  v215 = (uint64_t *)(a1 + 384);
  uint64_t v219 = a1;
  while (2)
  {
    v218 = v10;
    unint64_t v11 = (unint64_t *)sub_A3F32C((void *)(*(void *)(a1 + 48) + 88), *v10);
    sub_A1DF34((uint64_t)v220, *(void **)(a1 + 40), *v11, 0, 0, 0);
    int v12 = v223;
LABEL_8:
    unint64_t v13 = (unint64_t)v224;
    while ((unint64_t)v12 < v13)
    {
      unint64_t v14 = __ROR8__(*v12, 32);
      uint64_t v15 = *(void *)(a1 + 56);
      uint64_t v16 = *(void *)(v15 + 56) - 1;
      unint64_t v17 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v14 ^ (v14 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v14 ^ (v14 >> 33))) >> 33));
      unint64_t v18 = v17 ^ (v17 >> 33);
      uint64_t v19 = *(void *)(v15 + 80);
      int v21 = *(_DWORD *)(v15 + 64);
      int v20 = *(_DWORD *)(v15 + 68);
      uint64_t v22 = v18 & v16;
      int v23 = (unsigned int *)(v19 + 12 * (v18 & v16));
      unsigned int v25 = *v23;
      unsigned int v24 = v23[1];
      if (v20 == v24 && v21 == v25) {
        goto LABEL_54;
      }
      if (*(void *)(v15 + 40))
      {
        uint64_t v27 = -1;
        uint64_t v28 = 1;
        do
        {
          if (*(_DWORD *)(v15 + 36) == v24 && *(_DWORD *)(v15 + 32) == v25)
          {
            if (v27 == -1) {
              uint64_t v27 = v22;
            }
          }
          else if (__PAIR64__(v24, v25) == v14)
          {
            goto LABEL_50;
          }
          uint64_t v22 = (v22 + v28) & v16;
          uint64_t v29 = (unsigned int *)(v19 + 12 * v22);
          unsigned int v25 = *v29;
          unsigned int v24 = v29[1];
          ++v28;
        }
        while (v20 != v24 || v21 != v25);
        if (v27 != -1)
        {
          if (sub_A3BA84(*(void *)(a1 + 56), 1)) {
            goto LABEL_28;
          }
          goto LABEL_55;
        }
LABEL_54:
        uint64_t v27 = v22;
        if (sub_A3BA84(*(void *)(a1 + 56), 1)) {
          goto LABEL_28;
        }
        goto LABEL_55;
      }
      uint64_t v45 = 1;
      while (__PAIR64__(v24, v25) != v14)
      {
        uint64_t v22 = (v22 + v45) & v16;
        uint64_t v46 = (unsigned int *)(v19 + 12 * v22);
        unsigned int v25 = *v46;
        unsigned int v24 = v46[1];
        ++v45;
        if (v20 == v24 && v21 == v25) {
          goto LABEL_54;
        }
      }
LABEL_50:
      if (v22 != -1)
      {
        uint64_t v48 = v19 + 12 * v22;
        unsigned int v49 = *(_DWORD *)(v48 + 8);
        if (v49 == -1) {
          goto LABEL_52;
        }
        goto LABEL_112;
      }
      uint64_t v27 = -1;
      if (sub_A3BA84(*(void *)(a1 + 56), 1))
      {
LABEL_28:
        uint64_t v31 = *(void *)(v15 + 56) - 1;
        uint64_t v32 = *(void *)(v15 + 80);
        int v34 = *(_DWORD *)(v15 + 64);
        int v33 = *(_DWORD *)(v15 + 68);
        uint64_t v35 = v31 & v18;
        int v36 = (unsigned int *)(v32 + 12 * (v31 & v18));
        unsigned int v38 = *v36;
        unsigned int v37 = v36[1];
        uint64_t v39 = *(void *)(v15 + 40);
        if (v33 == v37 && v34 == v38) {
          goto LABEL_102;
        }
        if (v39)
        {
          uint64_t v41 = -1;
          uint64_t v42 = 1;
          do
          {
            if (*(_DWORD *)(v15 + 36) == v37 && *(_DWORD *)(v15 + 32) == v38)
            {
              if (v41 == -1) {
                uint64_t v41 = v35;
              }
            }
            else if (__PAIR64__(v37, v38) == v14)
            {
              goto LABEL_83;
            }
            uint64_t v35 = (v35 + v42) & v31;
            uint64_t v43 = (unsigned int *)(v32 + 12 * v35);
            unsigned int v38 = *v43;
            unsigned int v37 = v43[1];
            ++v42;
          }
          while (v33 != v37 || v34 != v38);
          if (v41 == -1) {
LABEL_102:
          }
            uint64_t v41 = v35;
          uint64_t v83 = *(void *)(v15 + 48);
          if ((unint64_t)(v83 - v39) >= 0x1555555555555555) {
            goto LABEL_274;
          }
        }
        else
        {
          uint64_t v67 = 1;
          while (__PAIR64__(v37, v38) != v14)
          {
            uint64_t v35 = (v35 + v67) & v31;
            uint64_t v68 = (unsigned int *)(v32 + 12 * v35);
            unsigned int v38 = *v68;
            unsigned int v37 = v68[1];
            ++v67;
            if (v33 == v37 && v34 == v38)
            {
              uint64_t v39 = 0;
              goto LABEL_102;
            }
          }
LABEL_83:
          if (v35 != -1)
          {
            uint64_t v48 = v32 + 12 * v35;
            unsigned int v49 = *(_DWORD *)(v48 + 8);
            if (v49 == -1) {
              goto LABEL_52;
            }
            goto LABEL_112;
          }
          uint64_t v41 = -1;
          uint64_t v83 = *(void *)(v15 + 48);
          if ((unint64_t)(v83 - v39) >= 0x1555555555555555)
          {
LABEL_274:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v39
          && ((uint64_t v84 = (_DWORD *)(v32 + 12 * v41), *(_DWORD *)(v15 + 36) == v84[1])
            ? (BOOL v85 = *(_DWORD *)(v15 + 32) == *v84)
            : (BOOL v85 = 0),
              v85))
        {
          *(void *)(v15 + 40) = v39 - 1;
          uint64_t v66 = 3 * v41;
        }
        else
        {
          *(void *)(v15 + 48) = v83 + 1;
          uint64_t v66 = 3 * v41;
        }
        goto LABEL_111;
      }
LABEL_55:
      uint64_t v55 = *(void *)(v15 + 40);
      uint64_t v54 = *(void *)(v15 + 48);
      if ((unint64_t)(v54 - v55) >= 0x1555555555555555) {
        goto LABEL_274;
      }
      uint64_t v32 = *(void *)(v15 + 80);
      if (v55
        && ((uint64_t v56 = (_DWORD *)(v32 + 12 * v27), *(_DWORD *)(v15 + 36) == v56[1])
          ? (BOOL v57 = *(_DWORD *)(v15 + 32) == *v56)
          : (BOOL v57 = 0),
            v57))
      {
        *(void *)(v15 + 40) = v55 - 1;
      }
      else
      {
        *(void *)(v15 + 48) = v54 + 1;
      }
      uint64_t v66 = 3 * v27;
LABEL_111:
      uint64_t v86 = 4 * v66;
      uint64_t v87 = v32 + v86;
      *(void *)uint64_t v87 = v14;
      *(_DWORD *)(v87 + 8) = -1;
      uint64_t v48 = *(void *)(v15 + 80) + v86;
      unsigned int v49 = *(_DWORD *)(v48 + 8);
      if (v49 == -1)
      {
LABEL_52:
        int v50 = *(_DWORD *)(v15 + 112);
        *(_DWORD *)(v15 + 112) = v50 + 1;
        *(_DWORD *)(v48 + 8) = v50;
        uint64_t v52 = *(char **)(v15 + 96);
        unint64_t v51 = *(void *)(v15 + 104);
        if ((unint64_t)v52 < v51)
        {
          *(void *)uint64_t v52 = v14;
          uint64_t v53 = (uint64_t)(v52 + 8);
          goto LABEL_98;
        }
        __int16 v58 = *(char **)(v15 + 88);
        uint64_t v59 = (v52 - v58) >> 3;
        unint64_t v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v61 = v51 - (void)v58;
        if (v61 >> 2 > v60) {
          unint64_t v60 = v61 >> 2;
        }
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v62 = v60;
        }
        if (v62)
        {
          if (v62 >> 61) {
            goto LABEL_275;
          }
          uint64_t v63 = (char *)operator new(8 * v62);
          uint64_t v64 = &v63[8 * v59];
          *(void *)uint64_t v64 = v14;
          uint64_t v53 = (uint64_t)(v64 + 8);
          if (v52 != v58)
          {
LABEL_71:
            unint64_t v65 = v52 - 8 - v58;
            if (v65 < 0x58)
            {
              a1 = v219;
              goto LABEL_95;
            }
            a1 = v219;
            if ((unint64_t)(v58 - v63) < 0x20) {
              goto LABEL_280;
            }
            uint64_t v70 = (v65 >> 3) + 1;
            uint64_t v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v72 = &v52[-v71];
            v64 -= v71;
            unint64_t v73 = &v63[8 * v59 - 16];
            uint64_t v74 = (long long *)(v52 - 16);
            uint64_t v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v76 = *v74;
              *((_OWORD *)v73 - 1) = *(v74 - 1);
              *(_OWORD *)unint64_t v73 = v76;
              v73 -= 32;
              v74 -= 2;
              v75 -= 4;
            }
            while (v75);
            uint64_t v52 = v72;
            if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_280:
              do
              {
LABEL_95:
                uint64_t v77 = *((void *)v52 - 1);
                v52 -= 8;
                *((void *)v64 - 1) = v77;
                v64 -= 8;
              }
              while (v52 != v58);
            }
            uint64_t v52 = *(char **)(v15 + 88);
            *(void *)(v15 + 88) = v64;
            *(void *)(v15 + 96) = v53;
            *(void *)(v15 + 104) = &v63[8 * v62];
            if (v52) {
LABEL_97:
            }
              operator delete(v52);
LABEL_98:
            *(void *)(v15 + 96) = v53;
            unsigned int v49 = *(_DWORD *)(v48 + 8);
            unsigned int v78 = *((unsigned __int16 *)v223 + 4);
            uint64_t v79 = *(uint64_t **)(a1 + 96);
            if (!v79) {
              goto LABEL_99;
            }
            goto LABEL_113;
          }
        }
        else
        {
          uint64_t v63 = 0;
          uint64_t v64 = (char *)(8 * v59);
          *(void *)(8 * v59) = v14;
          uint64_t v53 = 8 * v59 + 8;
          if (v52 != v58) {
            goto LABEL_71;
          }
        }
        a1 = v219;
        *(void *)(v15 + 88) = v64;
        *(void *)(v15 + 96) = v53;
        *(void *)(v15 + 104) = &v63[8 * v62];
        if (v52) {
          goto LABEL_97;
        }
        goto LABEL_98;
      }
LABEL_112:
      unsigned int v78 = *((unsigned __int16 *)v223 + 4);
      uint64_t v79 = *(uint64_t **)(a1 + 96);
      if (!v79)
      {
LABEL_99:
        unint64_t v80 = v49;
        unint64_t v81 = (unint64_t)v49 >> 6;
        if (*(void *)(a1 + 392) <= (unint64_t)v49) {
          goto LABEL_100;
        }
        goto LABEL_118;
      }
LABEL_113:
      uint64_t v88 = *v79;
      unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((v79[1] - *v79) >> 4);
      if (v89 <= v217)
      {
        sub_A3F0F0((uint64_t)v79, v214 - v89);
        uint64_t v88 = *v79;
      }
      uint64_t v90 = (void *)(v88 + 48 * v217);
      unint64_t v80 = v49;
      if (v90[1] <= (unint64_t)v49
        || ((*(void *)(*v90 + (((unint64_t)v49 >> 3) & 0x1FFFFFF8)) >> v49) & 1) == 0)
      {
        goto LABEL_218;
      }
      unint64_t v81 = (unint64_t)v49 >> 6;
      if (*(void *)(a1 + 392) <= (unint64_t)v49)
      {
LABEL_100:
        uint64_t v82 = *(unsigned char **)(a1 + 360);
        goto LABEL_170;
      }
LABEL_118:
      uint64_t v91 = *(void *)(a1 + 384);
      uint64_t v92 = *(void *)(v91 + 8 * v81);
      uint64_t v93 = 1 << v80;
      uint64_t v82 = *(unsigned char **)(a1 + 360);
      if ((v92 & (1 << v80)) == 0) {
        goto LABEL_170;
      }
      signed int v94 = *(unsigned char **)(a1 + 368);
      unint64_t v95 = (v94 - v82) >> 2;
      if (v95 <= v80)
      {
        unsigned int v213 = v78;
        unint64_t v96 = v49 + 1;
        unint64_t v97 = v96 - v95;
        if (v96 <= v95)
        {
          a1 = v219;
          unsigned int v78 = v213;
          if (v96 < v95) {
            *(void *)(v219 + 368) = &v82[4 * v96];
          }
        }
        else
        {
          a1 = v219;
          uint64_t v98 = *(void *)(v219 + 376);
          if (v97 <= (v98 - (uint64_t)v94) >> 2)
          {
            memset(v94, 255, 4 * v97);
            unint64_t v96 = v49 + 1;
            *(void *)(v219 + 368) = &v94[4 * v97];
            unsigned int v78 = v213;
          }
          else
          {
            uint64_t v99 = v98 - (void)v82;
            uint64_t v100 = v99 >> 1;
            if (v99 >> 1 <= v96) {
              uint64_t v100 = v49 + 1;
            }
            BOOL v101 = (unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v101) {
              unint64_t v102 = v100;
            }
            if (v102 >> 62) {
LABEL_275:
            }
              sub_188D718();
            uint64_t v209 = 4 * v102;
            v207 = operator new(4 * v102);
            uint64_t v206 = 4 * v97;
            memset(&v207[4 * v95], 255, 4 * v97);
            if (v94 == v82)
            {
              unint64_t v105 = &v207[4 * v95];
              unint64_t v103 = v105;
              a1 = v219;
              unsigned int v78 = v213;
              uint64_t v106 = v209;
              unint64_t v96 = v49 + 1;
              uint64_t v107 = v206;
              uint64_t v108 = v207;
            }
            else
            {
              unint64_t v103 = &v207[4 * v95];
              unint64_t v104 = v94 - 4 - v82;
              a1 = v219;
              unsigned int v78 = v213;
              if (v104 < 0x2C)
              {
                unint64_t v105 = &v207[4 * v95];
                uint64_t v106 = v209;
                unint64_t v96 = v49 + 1;
                uint64_t v107 = v206;
                uint64_t v108 = v207;
                goto LABEL_140;
              }
              uint64_t v108 = v207;
              uint64_t v106 = v209;
              unint64_t v105 = &v207[4 * v95];
              unint64_t v96 = v49 + 1;
              uint64_t v107 = v206;
              if ((unint64_t)(v82 - v207) < 0x20) {
                goto LABEL_281;
              }
              uint64_t v109 = (v104 >> 2) + 1;
              uint64_t v110 = 4 * (v109 & 0x7FFFFFFFFFFFFFF8);
              int v111 = &v94[-v110];
              unint64_t v105 = &v103[-v110];
              uint64_t v112 = &v207[4 * v95 - 16];
              int v113 = (long long *)(v94 - 16);
              uint64_t v114 = v109 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v115 = *v113;
                *(v112 - 1) = *(v113 - 1);
                _OWORD *v112 = v115;
                v112 -= 2;
                v113 -= 2;
                v114 -= 8;
              }
              while (v114);
              signed int v94 = v111;
              if (v109 != (v109 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_281:
                do
                {
LABEL_140:
                  int v116 = *((_DWORD *)v94 - 1);
                  v94 -= 4;
                  *((_DWORD *)v105 - 1) = v116;
                  v105 -= 4;
                }
                while (v94 != v82);
              }
            }
            *(void *)(a1 + 360) = v105;
            *(void *)(a1 + 368) = &v103[v107];
            *(void *)(a1 + 376) = &v108[v106];
            if (v82)
            {
              operator delete(v82);
              unint64_t v96 = v49 + 1;
            }
          }
        }
        sub_A3E96C((uint64_t)v215, v96, 0);
        uint64_t v91 = *v215;
        uint64_t v92 = *(void *)(*v215 + 8 * v81);
      }
      if ((v92 & v93) != 0)
      {
        uint64_t v82 = *(unsigned char **)(a1 + 360);
        if (*(_DWORD *)&v82[4 * v80] <= v78) {
          goto LABEL_218;
        }
LABEL_170:
        unint64_t v138 = *(unsigned char **)(a1 + 368);
        unint64_t v139 = (v138 - v82) >> 2;
        if (v139 <= v80)
        {
          unint64_t v140 = v49 + 1;
          unint64_t v141 = v140 - v139;
          if (v140 <= v139)
          {
            a1 = v219;
            if (v140 < v139) {
              *(void *)(v219 + 368) = &v82[4 * v140];
            }
          }
          else
          {
            uint64_t v142 = *(void *)(v219 + 376);
            if (v141 <= (v142 - (uint64_t)v138) >> 2)
            {
              memset(v138, 255, 4 * v141);
              *(void *)(v219 + 368) = &v138[4 * v141];
              a1 = v219;
            }
            else
            {
              uint64_t v143 = v142 - (void)v82;
              uint64_t v144 = v143 >> 1;
              if (v143 >> 1 <= v140) {
                uint64_t v144 = v49 + 1;
              }
              BOOL v101 = (unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v145 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v101) {
                unint64_t v145 = v144;
              }
              if (v145 >> 62) {
                goto LABEL_275;
              }
              *(void *)v211 = 4 * v145;
              v210 = operator new(4 * v145);
              uint64_t v208 = 4 * v141;
              memset(&v210[4 * v139], 255, 4 * v141);
              if (v138 == v82)
              {
                int v148 = &v210[4 * v139];
                a1 = v219;
                uint64_t v150 = v210;
                uint64_t v149 = *(void *)v211;
                uint64_t v147 = v148;
                uint64_t v151 = v208;
              }
              else
              {
                unint64_t v146 = v138 - 4 - v82;
                a1 = v219;
                if (v146 < 0x2C)
                {
                  uint64_t v147 = &v210[4 * v139];
                  int v148 = v147;
                  uint64_t v150 = v210;
                  uint64_t v149 = *(void *)v211;
                  uint64_t v151 = v208;
                  goto LABEL_189;
                }
                uint64_t v150 = v210;
                uint64_t v149 = *(void *)v211;
                uint64_t v147 = &v210[4 * v139];
                int v148 = v147;
                uint64_t v151 = v208;
                if ((unint64_t)(v82 - v210) < 0x20) {
                  goto LABEL_282;
                }
                uint64_t v152 = (v146 >> 2) + 1;
                uint64_t v153 = 4 * (v152 & 0x7FFFFFFFFFFFFFF8);
                long long v154 = &v138[-v153];
                int v148 = &v147[-v153];
                long long v155 = &v210[4 * v139 - 16];
                long long v156 = (long long *)(v138 - 16);
                uint64_t v157 = v152 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v158 = *v156;
                  *(v155 - 1) = *(v156 - 1);
                  *long long v155 = v158;
                  v155 -= 2;
                  v156 -= 2;
                  v157 -= 8;
                }
                while (v157);
                unint64_t v138 = v154;
                if (v152 != (v152 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_282:
                  do
                  {
LABEL_189:
                    int v159 = *((_DWORD *)v138 - 1);
                    v138 -= 4;
                    *((_DWORD *)v148 - 1) = v159;
                    v148 -= 4;
                  }
                  while (v138 != v82);
                }
              }
              *(void *)(a1 + 360) = v148;
              *(void *)(a1 + 368) = &v147[v151];
              *(void *)(a1 + 376) = &v150[v149];
              if (v82) {
                operator delete(v82);
              }
            }
          }
          sub_A3E96C((uint64_t)v215, v49 + 1, 0);
        }
        uint64_t v160 = *(void *)(*v215 + 8 * v81);
        if ((v160 & (1 << v80)) != 0) {
          goto LABEL_217;
        }
        *(void *)(*v215 + 8 * v81) = v160 | (1 << v80);
        long long v162 = *(char **)(a1 + 416);
        unint64_t v161 = *(void *)(a1 + 424);
        if ((unint64_t)v162 < v161)
        {
          *(_DWORD *)long long v162 = v49;
          uint64_t v163 = (uint64_t)(v162 + 4);
          goto LABEL_216;
        }
        uint64_t v164 = (char *)*v212;
        uint64_t v165 = v162 - (unsigned char *)*v212;
        uint64_t v166 = v165 >> 2;
        unint64_t v167 = (v165 >> 2) + 1;
        if (v167 >> 62) {
LABEL_277:
        }
          sub_2E00();
        uint64_t v168 = v161 - (void)v164;
        if (v168 >> 1 > v167) {
          unint64_t v167 = v168 >> 1;
        }
        if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v169 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v169 = v167;
        }
        if (v169)
        {
          if (v169 >> 62) {
            goto LABEL_275;
          }
          uint64_t v170 = operator new(4 * v169);
          uint64_t v171 = (unsigned int *)&v170[4 * v166];
          unsigned int *v171 = v49;
          uint64_t v163 = (uint64_t)(v171 + 1);
          if (v162 != v164)
          {
LABEL_205:
            unint64_t v172 = v162 - 4 - v164;
            if (v172 < 0x2C)
            {
              a1 = v219;
              goto LABEL_213;
            }
            unint64_t v173 = v162 - &v170[v165];
            a1 = v219;
            if (v173 < 0x20) {
              goto LABEL_283;
            }
            uint64_t v174 = (v172 >> 2) + 1;
            uint64_t v175 = 4 * (v174 & 0x7FFFFFFFFFFFFFF8);
            int v176 = &v162[-v175];
            uint64_t v171 = (unsigned int *)((char *)v171 - v175);
            v177 = &v170[4 * v166 - 16];
            int v178 = v162 - 16;
            uint64_t v179 = v174 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v180 = *(_OWORD *)v178;
              *(v177 - 1) = *((_OWORD *)v178 - 1);
              _OWORD *v177 = v180;
              v177 -= 2;
              v178 -= 32;
              v179 -= 8;
            }
            while (v179);
            long long v162 = v176;
            if (v174 != (v174 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_283:
              do
              {
LABEL_213:
                unsigned int v181 = *((_DWORD *)v162 - 1);
                v162 -= 4;
                *--uint64_t v171 = v181;
              }
              while (v162 != v164);
            }
LABEL_214:
            *(void *)(a1 + 408) = v171;
            *(void *)(a1 + 416) = v163;
            *(void *)(a1 + 424) = &v170[4 * v169];
            if (v164) {
              operator delete(v164);
            }
LABEL_216:
            *(void *)(a1 + 416) = v163;
LABEL_217:
            *(_DWORD *)(*(void *)(a1 + 360) + 4 * v80) = v78;
            goto LABEL_218;
          }
        }
        else
        {
          uint64_t v170 = 0;
          uint64_t v171 = (unsigned int *)(4 * v166);
          *(_DWORD *)(4 * v166) = v49;
          uint64_t v163 = 4 * v166 + 4;
          if (v162 != v164) {
            goto LABEL_205;
          }
        }
        a1 = v219;
        goto LABEL_214;
      }
      *(void *)(v91 + 8 * v81) = v92 | v93;
      uint64_t v118 = *(char **)(a1 + 416);
      unint64_t v117 = *(void *)(a1 + 424);
      if ((unint64_t)v118 < v117)
      {
        *(_DWORD *)uint64_t v118 = v49;
        uint64_t v119 = (uint64_t)(v118 + 4);
        goto LABEL_169;
      }
      unint64_t v120 = (char *)*v212;
      uint64_t v121 = v118 - (unsigned char *)*v212;
      uint64_t v122 = v121 >> 2;
      unint64_t v123 = (v121 >> 2) + 1;
      if (v123 >> 62) {
        goto LABEL_277;
      }
      uint64_t v124 = v117 - (void)v120;
      if (v124 >> 1 > v123) {
        unint64_t v123 = v124 >> 1;
      }
      if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v125 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v125 = v123;
      }
      if (v125)
      {
        if (v125 >> 62) {
          goto LABEL_275;
        }
        uint64_t v126 = operator new(4 * v125);
        uint64_t v127 = (unsigned int *)&v126[4 * v122];
        *uint64_t v127 = v49;
        uint64_t v119 = (uint64_t)(v127 + 1);
        if (v118 == v120)
        {
LABEL_161:
          a1 = v219;
          goto LABEL_167;
        }
      }
      else
      {
        uint64_t v126 = 0;
        uint64_t v127 = (unsigned int *)(4 * v122);
        *(_DWORD *)(4 * v122) = v49;
        uint64_t v119 = 4 * v122 + 4;
        if (v118 == v120) {
          goto LABEL_161;
        }
      }
      unint64_t v128 = v118 - 4 - v120;
      if (v128 < 0x2C)
      {
        a1 = v219;
        do
        {
LABEL_166:
          unsigned int v137 = *((_DWORD *)v118 - 1);
          v118 -= 4;
          *--uint64_t v127 = v137;
        }
        while (v118 != v120);
        goto LABEL_167;
      }
      unint64_t v129 = v118 - &v126[v121];
      a1 = v219;
      if (v129 < 0x20) {
        goto LABEL_166;
      }
      uint64_t v130 = (v128 >> 2) + 1;
      uint64_t v131 = 4 * (v130 & 0x7FFFFFFFFFFFFFF8);
      char v132 = &v118[-v131];
      uint64_t v127 = (unsigned int *)((char *)v127 - v131);
      unint64_t v133 = &v126[4 * v122 - 16];
      int v134 = v118 - 16;
      uint64_t v135 = v130 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v136 = *(_OWORD *)v134;
        *(v133 - 1) = *((_OWORD *)v134 - 1);
        _OWORD *v133 = v136;
        v133 -= 2;
        v134 -= 32;
        v135 -= 8;
      }
      while (v135);
      uint64_t v118 = v132;
      if (v130 != (v130 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_166;
      }
LABEL_167:
      *(void *)(a1 + 408) = v127;
      *(void *)(a1 + 416) = v119;
      *(void *)(a1 + 424) = &v126[4 * v125];
      if (v120) {
        operator delete(v120);
      }
LABEL_169:
      *(void *)(a1 + 416) = v119;
      uint64_t v82 = *(unsigned char **)(a1 + 360);
      if (*(_DWORD *)&v82[4 * v80] > v78) {
        goto LABEL_170;
      }
LABEL_218:
      unint64_t v13 = (unint64_t)v224;
      int v12 = v223 + 2;
      v223 = v12;
      if (v12 == v224)
      {
        v182 = v221 + 2;
        v221 = v182;
        if ((unint64_t)v182 >= v222) {
          break;
        }
        while (1)
        {
          int v12 = (void *)*v182;
          unint64_t v13 = v182[1];
          if (*v182 != v13) {
            break;
          }
          v182 += 2;
          v221 = v182;
          if ((unint64_t)v182 >= v222) {
            goto LABEL_6;
          }
        }
        v223 = (void *)*v182;
        v224 = (void *)v13;
        if ((unint64_t)v12 < v13)
        {
          while (1)
          {
LABEL_230:
            if (!v226)
            {
              uint64_t v183 = v220[0];
              uint64_t v184 = *v12;
              uint64_t v185 = *(void *)(v220[0] + 4136);
              if (sub_C259C0(v185 + 3896))
              {
                if (*(void *)(v185 + 3944))
                {
                  unint64_t v186 = __ROR8__(v184, 32);
                  if (!sub_A10E20((void *)(v183 + 4136), SHIDWORD(v186)))
                  {
                    v187 = *(void **)(*(void *)(v183 + 4136) + 3944);
                    int8x8_t v188 = (int8x8_t)v187[1];
                    if (v188)
                    {
                      unint64_t v189 = 0xC4CEB9FE1A85EC53
                           * ((0xFF51AFD7ED558CCDLL * (v186 ^ (v186 >> 33))) ^ ((0xFF51AFD7ED558CCDLL
                                                                               * (v186 ^ (v186 >> 33))) >> 33));
                      unint64_t v190 = v189 ^ (v189 >> 33);
                      uint8x8_t v191 = (uint8x8_t)vcnt_s8(v188);
                      v191.i16[0] = vaddlv_u8(v191);
                      if (v191.u32[0] > 1uLL)
                      {
                        unint64_t v192 = v190;
                        if (v190 >= *(void *)&v188) {
                          unint64_t v192 = v190 % *(void *)&v188;
                        }
                      }
                      else
                      {
                        unint64_t v192 = (*(void *)&v188 - 1) & v190;
                      }
                      v195 = *(uint64_t ***)(*v187 + 8 * v192);
                      if (v195)
                      {
                        v196 = *v195;
                        if (v196)
                        {
                          if (v191.u32[0] < 2uLL)
                          {
                            uint64_t v197 = *(void *)&v188 - 1;
                            while (1)
                            {
                              uint64_t v201 = v196[1];
                              if (v190 == v201)
                              {
                                if (*((_DWORD *)v196 + 5) == HIDWORD(v186) && *((_DWORD *)v196 + 4) == v186) {
                                  goto LABEL_227;
                                }
                              }
                              else if ((v201 & v197) != v192)
                              {
                                goto LABEL_266;
                              }
                              v196 = (uint64_t *)*v196;
                              if (!v196) {
                                goto LABEL_266;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v199 = v196[1];
                            if (v190 == v199)
                            {
                              if (*((_DWORD *)v196 + 5) == HIDWORD(v186) && *((_DWORD *)v196 + 4) == v186)
                              {
LABEL_227:
                                int v12 = v223;
                                a1 = v219;
                                goto LABEL_228;
                              }
                            }
                            else
                            {
                              if (v199 >= *(void *)&v188) {
                                v199 %= *(void *)&v188;
                              }
                              if (v199 != v192) {
                                break;
                              }
                            }
                            v196 = (uint64_t *)*v196;
                          }
                          while (v196);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_266:
            if (v225) {
              break;
            }
            unsigned int v202 = sub_C2599C(v220[0] + 3896);
            int v12 = v223;
            a1 = v219;
            if (v202 >= *((unsigned __int8 *)v223 + 14))
            {
              if (v225) {
                goto LABEL_8;
              }
              char v203 = sub_51D60((unsigned __int8 *)(v220[0] + 3896));
              int v12 = v223;
              if ((v203 & 1) != 0 || (*((unsigned char *)v223 + 15) & 1) == 0) {
                goto LABEL_8;
              }
            }
LABEL_228:
            v12 += 2;
            v223 = v12;
            if (v12 == v224)
            {
              v193 = v221 + 2;
              v221 = v193;
              if ((unint64_t)v193 >= v222) {
                goto LABEL_8;
              }
              while (1)
              {
                int v12 = (void *)*v193;
                unint64_t v194 = v193[1];
                if (*v193 != v194) {
                  break;
                }
                v193 += 2;
                v221 = v193;
                if ((unint64_t)v193 >= v222) {
                  goto LABEL_6;
                }
              }
              v223 = (void *)*v193;
              v224 = (void *)v194;
              if ((unint64_t)v12 >= v194) {
                goto LABEL_8;
              }
            }
            else if (v12 >= v224)
            {
              goto LABEL_8;
            }
          }
          int v12 = v223;
          a1 = v219;
          goto LABEL_8;
        }
      }
      else if (v12 < v224)
      {
        goto LABEL_230;
      }
    }
LABEL_6:
    unint64_t v10 = v218 + 1;
    if (v218 + 1 != v216) {
      continue;
    }
    break;
  }
LABEL_273:
  double result = sub_72688((uint64_t)v227) + *(double *)(a1 + 608);
  *(double *)(a1 + 608) = result;
  return result;
}

void sub_B4B7D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B4B7E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B4B7FC(uint64_t a1, unsigned int a2, int a3, unsigned int a4, signed int a5)
{
  LODWORD(v6) = a4;
  LODWORD(v7) = a3;
  int v52 = a3;
  unint64_t v10 = *(uint64_t **)(a1 + 80);
  if (v10)
  {
    uint64_t v12 = *v10;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 4);
    if (v13 <= a4)
    {
      sub_A3F0F0(*(void *)(a1 + 80), a4 - v13 + 1);
      uint64_t v12 = *v10;
    }
    unint64_t v14 = (void *)(v12 + 48 * a4);
    if (v14[1] <= (unint64_t)v7
      || ((*(void *)(*v14 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) == 0)
    {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v15 = a1 + 24 * a2;
    uint64_t v16 = *(void *)(v15 + 168);
    uint64_t v17 = *(void *)(v15 + 176);
    unint64_t v18 = (uint64_t *)(v15 + 168);
    unint64_t v19 = *(unsigned int *)(a1 + 432);
    unint64_t v20 = (v17 - v16) >> 2;
    if (v20 <= v19)
    {
      sub_5BBEE0((uint64_t)v18, v19 - v20 + 1);
      uint64_t v16 = *v18;
    }
    int v21 = (int *)(v16 + 4 * v19);
    if (!*(unsigned char *)(a1 + 26)) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 152);
    unint64_t v23 = *(unsigned int *)(a1 + 432);
    if (*(void *)v22 <= v23)
    {
      *(void *)uint64_t v22 = v23 + 1;
      uint64_t v24 = *(void *)(v22 + 16);
      unint64_t v25 = *(void *)(v22 + 8) * (v23 + 1);
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v22 + 24) - v24) >> 3);
      if (v25 <= v26)
      {
        if (v25 < v26) {
          *(void *)(v22 + 24) = v24 + 24 * v25;
        }
      }
      else
      {
        sub_B45360((void **)(v22 + 16), v25 - v26);
      }
    }
    int v21 = (int *)(*(void *)(v22 + 16) + 24 * (v6 + *(void *)(v22 + 8) * v23));
    if (!*(unsigned char *)(a1 + 26)) {
      goto LABEL_22;
    }
  }
  int v27 = *v21;
  if (v27 != 0x7FFFFFFF)
  {
    int v28 = *(_DWORD *)(a1 + 28);
    int v29 = v28 / 10;
    int v30 = v28 % 10;
    char v31 = v28 < 0 ? -5 : 5;
    if ((int)(v29 + v27 + (((103 * (char)(v31 + v30)) >> 15) & 1) + ((103 * (char)(v31 + v30)) >> 10)) <= a5) {
      return 0;
    }
  }
LABEL_22:
  if (!*(unsigned char *)(a1 + 25))
  {
    unint64_t v7 = v7;
    uint64_t v39 = *(void *)(a1 + 152);
    uint64_t v6 = v6;
    if (*(void *)v39 > (unint64_t)v7) {
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  uint64_t v32 = a1 + 24 * a2;
  uint64_t v33 = *(void *)(v32 + 168);
  uint64_t v34 = *(void *)(v32 + 176);
  uint64_t v35 = (uint64_t *)(v32 + 168);
  unint64_t v7 = v7;
  unint64_t v36 = (v34 - v33) >> 2;
  if (v36 <= v7)
  {
    sub_5BBEE0((uint64_t)v35, v7 - v36 + 1);
    uint64_t v33 = *v35;
  }
  signed int v37 = *(_DWORD *)(v33 + 4 * v7);
  if (v37 != 0x7FFFFFFF && v37 <= a5) {
    return 0;
  }
  uint64_t v39 = *(void *)(a1 + 152);
  uint64_t v6 = v6;
  if (*(void *)v39 <= (unint64_t)v7)
  {
LABEL_32:
    *(void *)uint64_t v39 = v7 + 1;
    uint64_t v40 = *(void *)(v39 + 16);
    unint64_t v41 = *(void *)(v39 + 8) * (v7 + 1);
    unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v39 + 24) - v40) >> 3);
    if (v41 <= v42)
    {
      if (v41 < v42) {
        *(void *)(v39 + 24) = v40 + 24 * v41;
      }
    }
    else
    {
      sub_B45360((void **)(v39 + 16), v41 - v42);
    }
  }
LABEL_36:
  uint64_t v43 = (signed int *)(*(void *)(v39 + 16) + 24 * (v6 + *(void *)(v39 + 8) * v7));
  if (*v43 != 0x7FFFFFFF && *v43 <= a5) {
    return 0;
  }
  unsigned int v45 = a2;
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v46 = a1 + 24 * a2;
    uint64_t v47 = *(void *)(v46 + 168);
    uint64_t v48 = *(void *)(v46 + 176);
    unsigned int v49 = (uint64_t *)(v46 + 168);
    unint64_t v50 = (v48 - v47) >> 2;
    if (v50 <= v7)
    {
      sub_5BBEE0((uint64_t)v49, v7 - v50 + 1);
      uint64_t v47 = *v49;
    }
    *(_DWORD *)(v47 + 4 * v7) = a5;
  }
  signed int *v43 = a5;
  sub_A3EF14((uint64_t *)(a1 + 48 * v45 + 216), &v52);
  if (!*(unsigned char *)(a1 + 25)) {
    sub_A3EF14((uint64_t *)(a1 + 312), &v52);
  }
  return 1;
}

void sub_B4BB64(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = a1;
  v145[0] = a3;
  *(double *)(a1 + 656) = *(double *)(a1 + 656) + 1.0;
  unint64_t v5 = *(void *)sub_A3F32C((void *)(*(void *)(a1 + 56) + 88), a3);
  unsigned int v123 = *(_DWORD *)sub_A3F74C((void *)(v4 + 360), v145);
  uint64_t v124 = v5;
  sub_A40514(&v143, *(void *)(v4 + 40), v5);
  uint64_t v6 = v143;
  if ((unint64_t)v143 < v144)
  {
    uint64_t v7 = v4 + 464;
    int v117 = ~a2;
    uint64_t v118 = a2;
    uint64_t v127 = a2 - 1;
    uint64_t v130 = v4 + 464;
    uint64_t v128 = v4;
    while (1)
    {
      *(double *)(v4 + 664) = *(double *)(v4 + 664) + 1.0;
      uint64_t v129 = *(unsigned int *)v6;
      unsigned int v125 = v145[0];
      sub_A1E9A0((uint64_t)&v131, *(void *)(v4 + 40), v124, v123, 0, 1);
      uint64_t v8 = v135;
      if ((unint64_t)v135 >= v134 && (unint64_t)v135 < v136) {
        break;
      }
LABEL_3:
      uint64_t v6 = v143 + 4;
      uint64_t v143 = v6;
      if ((unint64_t)v6 >= v144) {
        return;
      }
    }
    char v10 = 0;
    int v121 = 0x7FFFFFFF;
    uint64_t v119 = 0xFFFFFFFFLL;
    uint64_t v122 = 0xFFFFFFFFLL;
    LODWORD(v120) = -1;
    while (1)
    {
      unint64_t v12 = __ROR8__(*v8, 32);
      uint64_t v13 = *(void *)(v4 + 48);
      uint64_t v14 = *(void *)(v13 + 56) - 1;
      unint64_t v15 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v12 ^ (v12 >> 33))) >> 33));
      unint64_t v16 = v15 ^ (v15 >> 33);
      uint64_t v17 = *(void *)(v13 + 80);
      int v19 = *(_DWORD *)(v13 + 64);
      int v18 = *(_DWORD *)(v13 + 68);
      uint64_t v20 = v16 & v14;
      int v21 = (unsigned int *)(v17 + 12 * (v16 & v14));
      unsigned int v23 = *v21;
      unsigned int v22 = v21[1];
      if (v18 == v22 && v19 == v23) {
        goto LABEL_65;
      }
      if (*(void *)(v13 + 40)) {
        break;
      }
      uint64_t v43 = 1;
      while (__PAIR64__(v22, v23) != v12)
      {
        uint64_t v20 = (v20 + v43) & v14;
        uint64_t v44 = (unsigned int *)(v17 + 12 * v20);
        unsigned int v23 = *v44;
        unsigned int v22 = v44[1];
        ++v43;
        if (v18 == v22 && v19 == v23) {
          goto LABEL_65;
        }
      }
LABEL_53:
      if (v20 != -1)
      {
        uint64_t v46 = v17 + 12 * v20;
        unint64_t v47 = *(unsigned int *)(v46 + 8);
        if (v47 != -1) {
          goto LABEL_55;
        }
        goto LABEL_115;
      }
      uint64_t v25 = -1;
      if (sub_A3BA84(*(void *)(v4 + 48), 1))
      {
LABEL_31:
        uint64_t v29 = *(void *)(v13 + 56) - 1;
        uint64_t v30 = *(void *)(v13 + 80);
        int v32 = *(_DWORD *)(v13 + 64);
        int v31 = *(_DWORD *)(v13 + 68);
        uint64_t v33 = v29 & v16;
        uint64_t v34 = (unsigned int *)(v30 + 12 * (v29 & v16));
        unsigned int v36 = *v34;
        unsigned int v35 = v34[1];
        uint64_t v37 = *(void *)(v13 + 40);
        if (v31 == v35 && v32 == v36) {
          goto LABEL_105;
        }
        if (v37)
        {
          uint64_t v39 = -1;
          uint64_t v40 = 1;
          do
          {
            if (*(_DWORD *)(v13 + 36) == v35 && *(_DWORD *)(v13 + 32) == v36)
            {
              if (v39 == -1) {
                uint64_t v39 = v33;
              }
            }
            else if (__PAIR64__(v35, v36) == v12)
            {
              goto LABEL_87;
            }
            uint64_t v33 = (v33 + v40) & v29;
            unint64_t v41 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v41;
            unsigned int v35 = v41[1];
            ++v40;
          }
          while (v31 != v35 || v32 != v36);
          if (v39 == -1) {
LABEL_105:
          }
            uint64_t v39 = v33;
          uint64_t v73 = *(void *)(v13 + 48);
          if ((unint64_t)(v73 - v37) >= 0x1555555555555555) {
            goto LABEL_189;
          }
        }
        else
        {
          uint64_t v58 = 1;
          while (__PAIR64__(v35, v36) != v12)
          {
            uint64_t v33 = (v33 + v58) & v29;
            uint64_t v59 = (unsigned int *)(v30 + 12 * v33);
            unsigned int v36 = *v59;
            unsigned int v35 = v59[1];
            ++v58;
            if (v31 == v35 && v32 == v36)
            {
              uint64_t v37 = 0;
              goto LABEL_105;
            }
          }
LABEL_87:
          if (v33 != -1)
          {
            uint64_t v46 = v30 + 12 * v33;
            unint64_t v47 = *(unsigned int *)(v46 + 8);
            if (v47 != -1) {
              goto LABEL_55;
            }
            goto LABEL_115;
          }
          uint64_t v39 = -1;
          uint64_t v73 = *(void *)(v13 + 48);
          if ((unint64_t)(v73 - v37) >= 0x1555555555555555)
          {
LABEL_189:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
        }
        if (v37
          && ((uint64_t v74 = (_DWORD *)(v30 + 12 * v39), *(_DWORD *)(v13 + 36) == v74[1])
            ? (BOOL v75 = *(_DWORD *)(v13 + 32) == *v74)
            : (BOOL v75 = 0),
              v75))
        {
          *(void *)(v13 + 40) = v37 - 1;
          uint64_t v53 = 3 * v39;
        }
        else
        {
          *(void *)(v13 + 48) = v73 + 1;
          uint64_t v53 = 3 * v39;
        }
        goto LABEL_114;
      }
LABEL_66:
      uint64_t v50 = *(void *)(v13 + 40);
      uint64_t v49 = *(void *)(v13 + 48);
      if ((unint64_t)(v49 - v50) >= 0x1555555555555555) {
        goto LABEL_189;
      }
      uint64_t v30 = *(void *)(v13 + 80);
      if (v50
        && ((unint64_t v51 = (_DWORD *)(v30 + 12 * v25), *(_DWORD *)(v13 + 36) == v51[1])
          ? (BOOL v52 = *(_DWORD *)(v13 + 32) == *v51)
          : (BOOL v52 = 0),
            v52))
      {
        *(void *)(v13 + 40) = v50 - 1;
      }
      else
      {
        *(void *)(v13 + 48) = v49 + 1;
      }
      uint64_t v53 = 3 * v25;
LABEL_114:
      uint64_t v76 = 4 * v53;
      uint64_t v77 = v30 + v76;
      *(void *)uint64_t v77 = v12;
      *(_DWORD *)(v77 + 8) = -1;
      uint64_t v46 = *(void *)(v13 + 80) + v76;
      unint64_t v47 = *(unsigned int *)(v46 + 8);
      if (v47 != -1)
      {
LABEL_55:
        if (!sub_BD5C18(v7, v47, v12)) {
          goto LABEL_139;
        }
        goto LABEL_56;
      }
LABEL_115:
      int v78 = *(_DWORD *)(v13 + 112);
      *(_DWORD *)(v13 + 112) = v78 + 1;
      *(_DWORD *)(v46 + 8) = v78;
      unint64_t v80 = *(unint64_t **)(v13 + 96);
      unint64_t v79 = *(void *)(v13 + 104);
      if ((unint64_t)v80 < v79)
      {
        *unint64_t v80 = v12;
        uint64_t v81 = (uint64_t)(v80 + 1);
        goto LABEL_138;
      }
      uint64_t v82 = (unint64_t **)(v13 + 88);
      uint64_t v83 = *(char **)(v13 + 88);
      uint64_t v84 = ((char *)v80 - v83) >> 3;
      unint64_t v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v86 = v79 - (void)v83;
      if (v86 >> 2 > v85) {
        unint64_t v85 = v86 >> 2;
      }
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v85 = 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v85)
      {
        if (v85 >> 61) {
          sub_188D718();
        }
        unint64_t v87 = v85;
        uint64_t v88 = (char *)operator new(8 * v85);
        uint64_t v82 = (unint64_t **)(v13 + 88);
        unint64_t v89 = (unint64_t *)&v88[8 * v84];
        *unint64_t v89 = v12;
        uint64_t v81 = (uint64_t)(v89 + 1);
        if (v80 == (unint64_t *)v83)
        {
LABEL_128:
          *(void *)(v13 + 88) = v89;
          *(void *)(v13 + 96) = v81;
          *(void *)(v13 + 104) = &v88[8 * v87];
          if (!v80) {
            goto LABEL_137;
          }
          goto LABEL_136;
        }
      }
      else
      {
        unint64_t v87 = 0;
        uint64_t v88 = 0;
        unint64_t v89 = (unint64_t *)(8 * v84);
        *(void *)(8 * v84) = v12;
        uint64_t v81 = 8 * v84 + 8;
        if (v80 == (unint64_t *)v83) {
          goto LABEL_128;
        }
      }
      unint64_t v90 = (char *)(v80 - 1) - v83;
      if (v90 < 0x58) {
        goto LABEL_194;
      }
      if ((unint64_t)(v83 - v88) < 0x20) {
        goto LABEL_194;
      }
      uint64_t v91 = (v90 >> 3) + 1;
      uint64_t v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v93 = &v80[v92 / 0xFFFFFFFFFFFFFFF8];
      unint64_t v89 = (unint64_t *)((char *)v89 - v92);
      signed int v94 = &v88[8 * v84 - 16];
      unint64_t v95 = v80 - 2;
      uint64_t v96 = v91 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v97 = *(_OWORD *)v95;
        *((_OWORD *)v94 - 1) = *((_OWORD *)v95 - 1);
        *(_OWORD *)signed int v94 = v97;
        v94 -= 32;
        v95 -= 4;
        v96 -= 4;
      }
      while (v96);
      unint64_t v80 = v93;
      if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_194:
        do
        {
          unint64_t v98 = *--v80;
          *--unint64_t v89 = v98;
        }
        while (v80 != (unint64_t *)v83);
      }
      unint64_t v80 = *v82;
      *(void *)(v13 + 88) = v89;
      *(void *)(v13 + 96) = v81;
      *(void *)(v13 + 104) = &v88[8 * v87];
      if (!v80) {
        goto LABEL_137;
      }
LABEL_136:
      operator delete(v80);
LABEL_137:
      uint64_t v4 = v128;
LABEL_138:
      *(void *)(v13 + 96) = v81;
      unint64_t v47 = *(unsigned int *)(v46 + 8);
      uint64_t v7 = v130;
      if (!sub_BD5C18(v130, *(_DWORD *)(v46 + 8), v12))
      {
LABEL_139:
        v10 &= *(unsigned char *)(v4 + 32) != 0;
        goto LABEL_145;
      }
LABEL_56:
      if (v10 & 1) != 0 && (*((unsigned char *)v135 + 15))
      {
        uint64_t v48 = v137;
        if (v137) {
          uint64_t v48 = *(unsigned int *)(v137 + 4 * (((unint64_t)v135 - v134) >> 4));
        }
        if ((v48 & v129) == 0)
        {
          uint64_t v61 = (unsigned int *)((char *)v133 + *(unsigned __int16 *)((char *)v133 - *v133 + 6));
          unint64_t v62 = (char *)v61 + *v61;
          uint64_t v63 = &v142;
          if (!v140) {
            uint64_t v63 = v139;
          }
          signed int v126 = *(_DWORD *)&v62[8 * v139[1] + 4 + 8 * (((unint64_t)v135 - v134) >> 4)] + *v63;
          uint64_t v64 = *(unint64_t **)(v4 + 64);
          if (v64)
          {
            if (*v64 > v47)
            {
              unsigned int v65 = 0;
              unsigned int v66 = *(_DWORD *)(v4 + 144) + v117;
              unsigned int v67 = v66;
              while (v65 <= v66)
              {
                signed int v68 = *(_DWORD *)sub_B45630(v64 + 2, v64[1] * v47 + v67);
                v65 += 2;
                v67 -= 2;
                if (v68 != 0x7FFFFFFF)
                {
                  if (v68 < v126) {
                    break;
                  }
                  goto LABEL_100;
                }
              }
            }
          }
          else
          {
LABEL_100:
            if (sub_B4B7FC(v4, 0, v47, v118, v126))
            {
              uint64_t v69 = *(void *)(v4 + 152);
              if (*(void *)v69 <= v47)
              {
                *(void *)uint64_t v69 = v47 + 1;
                uint64_t v70 = *(void *)(v69 + 16);
                unint64_t v71 = *(void *)(v69 + 8) * (v47 + 1);
                unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v69 + 24) - v70) >> 3);
                if (v71 <= v72)
                {
                  if (v71 < v72) {
                    *(void *)(v69 + 24) = v70 + 24 * v71;
                  }
                }
                else
                {
                  sub_B45360((void **)(v69 + 16), v71 - v72);
                }
              }
              uint64_t v115 = *(void *)(v69 + 16) + 24 * (v118 + *(void *)(v69 + 8) * v47);
              *(_DWORD *)(v115 + 4) = v120;
              *(void *)(v115 + 8) = v122 | (v119 << 32);
              *(_DWORD *)(v115 + 16) = v121;
              *(_DWORD *)(v115 + 20) = v125;
            }
          }
        }
      }
      if ((*((unsigned char *)v135 + 15) & 2) == 0) {
        goto LABEL_145;
      }
      if (v137)
      {
        if (*(_DWORD *)(v137 + 4 * (((unint64_t)v135 - v134) >> 4)) == v129) {
          goto LABEL_76;
        }
      }
      else if (!v129)
      {
LABEL_76:
        uint64_t v54 = *(void *)(v4 + 152);
        if (*(void *)v54 <= v47)
        {
          *(void *)uint64_t v54 = v47 + 1;
          uint64_t v55 = *(void *)(v54 + 16);
          unint64_t v56 = *(void *)(v54 + 8) * (v47 + 1);
          unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v54 + 24) - v55) >> 3);
          if (v56 <= v57)
          {
            if (v56 < v57) {
              *(void *)(v54 + 24) = v55 + 24 * v56;
            }
          }
          else
          {
            sub_B45360((void **)(v54 + 16), v56 - v57);
          }
        }
        int v99 = *(_DWORD *)(*(void *)(v54 + 16) + 24 * (v127 + *(void *)(v54 + 8) * v47));
        if (v99 == 0x7FFFFFFF) {
          goto LABEL_145;
        }
        int v108 = *((_DWORD *)v135 + 2);
        signed int v109 = v108 + v99;
        if (v10)
        {
          uint64_t v110 = (unsigned int *)((char *)v133 + *(unsigned __int16 *)((char *)v133 - *v133 + 6));
          int v111 = (char *)v110 + *v110;
          uint64_t v112 = &v142;
          if (!v140) {
            uint64_t v112 = v139;
          }
          if (v109 >= *(_DWORD *)&v111[8 * v139[1] + 8 + 8 * (((unint64_t)v135 - v134) >> 4)]
                     + *v112
            || !sub_A40398(*(void *)(v4 + 40), (uint64_t)&v131, v109))
          {
            goto LABEL_182;
          }
        }
        else if (v140)
        {
          if (!sub_A1F39C(*(void *)(v4 + 40), (uint64_t)&v131, v109, 1)) {
            goto LABEL_184;
          }
        }
        else if ((sub_A1F8B4((uint64_t)&v131, v108 + v99, 1) & 1) == 0)
        {
LABEL_184:
          char v10 = 0;
          goto LABEL_145;
        }
        unint64_t v120 = ((unint64_t)v135 - v134) >> 4;
        uint64_t v122 = -1431655765 * (((unint64_t)v139 - v138) >> 2);
        if (v140) {
          int v113 = v142;
        }
        else {
          int v113 = 0x7FFFFFFF;
        }
        int v121 = v113;
        if (v140) {
          uint64_t v114 = v141;
        }
        else {
          uint64_t v114 = 0xFFFFFFFFLL;
        }
        uint64_t v119 = v114;
LABEL_182:
        char v10 = 1;
      }
LABEL_145:
      unint64_t v100 = v134;
      uint64_t v8 = v135 + 2;
      v135 += 2;
      if (*(unsigned char *)(v131 + 16)) {
        BOOL v101 = v132 == 0;
      }
      else {
        BOOL v101 = 0;
      }
      if (v101 && (unint64_t)v8 >= v134 && (unint64_t)v8 < v136)
      {
        do
        {
          unint64_t v104 = __ROR8__(*v8, 32);
          if (HIDWORD(v104) == 1 && (v104 + 3) < 2) {
            break;
          }
          char v106 = sub_2AB7E4(**(void **)(v131 + 4120));
          unint64_t v100 = v134;
          uint64_t v8 = v135;
          if (v106) {
            break;
          }
          uint64_t v8 = v135 + 2;
          uint64_t v135 = v8;
        }
        while ((unint64_t)v8 >= v134 && (unint64_t)v8 < v136);
      }
      if ((unint64_t)v8 < v100 || (unint64_t)v8 >= v136) {
        goto LABEL_3;
      }
    }
    uint64_t v25 = -1;
    uint64_t v26 = 1;
    do
    {
      if (*(_DWORD *)(v13 + 36) == v22 && *(_DWORD *)(v13 + 32) == v23)
      {
        if (v25 == -1) {
          uint64_t v25 = v20;
        }
      }
      else if (__PAIR64__(v22, v23) == v12)
      {
        goto LABEL_53;
      }
      uint64_t v20 = (v20 + v26) & v14;
      int v27 = (unsigned int *)(v17 + 12 * v20);
      unsigned int v23 = *v27;
      unsigned int v22 = v27[1];
      ++v26;
    }
    while (v18 != v22 || v19 != v23);
    if (v25 != -1)
    {
      if (sub_A3BA84(*(void *)(v4 + 48), 1)) {
        goto LABEL_31;
      }
      goto LABEL_66;
    }
LABEL_65:
    uint64_t v25 = v20;
    if (sub_A3BA84(*(void *)(v4 + 48), 1)) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }
}

void sub_B4C660(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B4C674(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B4C688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a2 + 200);
  uint64_t v6 = *(void *)(a2 + 208);
  uint64_t v8 = (void *)(a2 + 200);
  if (v7 == v6)
  {
    sub_A2AAF8(a2, 0);
    int v23 = 0x7FFFFFFF;
    uint64_t v25 = *(void *)(a3 + 200);
    uint64_t v24 = *(void *)(a3 + 208);
    uint64_t v26 = (void *)(a3 + 200);
    if (v25 != v24) {
      goto LABEL_24;
    }
LABEL_44:
    sub_A2AAF8(a3, 0);
    int v40 = 0x7FFFFFFF;
    goto LABEL_45;
  }
  uint64_t v9 = v6 - v7;
  if (v6 - v7 == 72 && *(unsigned char *)(v7 + 24) == 1)
  {
    uint64_t v10 = *(void *)(v6 - 72);
    int v11 = *(_DWORD *)(v10 + 160);
    uint64_t v12 = *(void *)(v10 + 20);
    unsigned int v13 = *(_DWORD *)(v10 + 8);
  }
  else
  {
    uint64_t v14 = *(void *)(v6 - 72);
    int v11 = *(_DWORD *)(v14 + 160);
    uint64_t v12 = *(void *)(v14 + 20);
    uint64_t v16 = v14 + 4;
    unsigned int v15 = *(_DWORD *)(v14 + 4);
    unsigned int v13 = *(_DWORD *)(v16 + 4);
    if (v11) {
      unsigned int v17 = v13;
    }
    else {
      unsigned int v17 = v12;
    }
    if (!v11) {
      unsigned int v15 = v13;
    }
    if (v17 == v15)
    {
      uint64_t v18 = sub_A0D24C(v8, 0x8E38E38E38E38E39 * (v9 >> 3) - 2);
      if (*(_DWORD *)(*(void *)v18 + 160)) {
        unint64_t v19 = *(unsigned int *)(*(void *)v18 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v18 + 8) << 32);
      }
      else {
        unint64_t v19 = *(void *)(*(void *)v18 + 20);
      }
      goto LABEL_17;
    }
  }
  unint64_t v20 = v13 | ((unint64_t)v13 << 32);
  if (v11) {
    HIDWORD(v19) = HIDWORD(v20);
  }
  else {
    HIDWORD(v19) = HIDWORD(v12);
  }
LABEL_17:
  uint64_t v21 = sub_A2AAF8(a2, 0);
  if (HIDWORD(v21) == 0x7FFFFFFF) {
    int v22 = 0x7FFFFFFF;
  }
  else {
    int v22 = 10 * (HIDWORD(v19) - HIDWORD(v21));
  }
  if (HIDWORD(v19) == 0x7FFFFFFF) {
    int v23 = 0x7FFFFFFF;
  }
  else {
    int v23 = v22;
  }
  uint64_t v25 = *(void *)(a3 + 200);
  uint64_t v24 = *(void *)(a3 + 208);
  uint64_t v26 = (void *)(a3 + 200);
  if (v25 == v24) {
    goto LABEL_44;
  }
LABEL_24:
  uint64_t v27 = v24 - v25;
  if (v24 - v25 == 72 && *(unsigned char *)(v25 + 24) == 1)
  {
    uint64_t v28 = *(void *)(v24 - 72);
    int v29 = *(_DWORD *)(v28 + 160);
    uint64_t v30 = *(void *)(v28 + 20);
    unsigned int v31 = *(_DWORD *)(v28 + 8);
LABEL_36:
    unint64_t v38 = v31 | ((unint64_t)v31 << 32);
    if (v29) {
      HIDWORD(v37) = HIDWORD(v38);
    }
    else {
      HIDWORD(v37) = HIDWORD(v30);
    }
    goto LABEL_39;
  }
  uint64_t v32 = *(void *)(v24 - 72);
  int v29 = *(_DWORD *)(v32 + 160);
  uint64_t v30 = *(void *)(v32 + 20);
  uint64_t v34 = v32 + 4;
  unsigned int v33 = *(_DWORD *)(v32 + 4);
  unsigned int v31 = *(_DWORD *)(v34 + 4);
  if (v29) {
    unsigned int v35 = v31;
  }
  else {
    unsigned int v35 = v30;
  }
  if (!v29) {
    unsigned int v33 = v31;
  }
  if (v35 != v33) {
    goto LABEL_36;
  }
  uint64_t v36 = sub_A0D24C(v26, 0x8E38E38E38E38E39 * (v27 >> 3) - 2);
  if (*(_DWORD *)(*(void *)v36 + 160)) {
    unint64_t v37 = *(unsigned int *)(*(void *)v36 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v36 + 8) << 32);
  }
  else {
    unint64_t v37 = *(void *)(*(void *)v36 + 20);
  }
LABEL_39:
  uint64_t v39 = sub_A2AAF8(a3, 0);
  int v40 = 0x7FFFFFFF;
  if (HIDWORD(v37) != 0x7FFFFFFF && HIDWORD(v39) != 0x7FFFFFFF)
  {
    if (HIDWORD(v37) == HIDWORD(v39))
    {
      double v41 = 1.79769313e308;
      goto LABEL_52;
    }
    int v40 = 10 * (HIDWORD(v37) - HIDWORD(v39));
  }
LABEL_45:
  if (v23 < 0) {
    char v42 = -5;
  }
  else {
    char v42 = 5;
  }
  int v43 = v40 / 10;
  int v44 = v40 % 10;
  if (v40 < 0) {
    char v45 = -5;
  }
  else {
    char v45 = 5;
  }
  double v41 = (double)(int)(v23 / 10
                    + (((103 * (char)(v42 + v23 % 10)) >> 15) & 1)
                    + ((103 * (char)(v42 + v23 % 10)) >> 10))
      / (double)(int)(v43 + (((103 * (char)(v45 + v44)) >> 15) & 1) + ((103 * (char)(v45 + v44)) >> 10));
LABEL_52:
  uint64_t v46 = sub_A2AAF8(a2, 0);
  if (SHIDWORD(v46) >= (int)((unint64_t)sub_A2AAF8(a3, 0) >> 32))
  {
    uint64_t v49 = *(void *)(a2 + 200);
    uint64_t v48 = *(void *)(a2 + 208);
    if (v49 == v48)
    {
      int v61 = 0x7FFFFFFF;
      uint64_t v63 = *(void *)(a3 + 200);
      uint64_t v62 = *(void *)(a3 + 208);
      if (v63 == v62) {
        goto LABEL_74;
      }
      goto LABEL_77;
    }
    uint64_t v50 = v48 - v49;
    if (v48 - v49 == 72 && *(unsigned char *)(v49 + 24) == 1)
    {
      uint64_t v51 = *(void *)(v48 - 72);
      int v52 = *(_DWORD *)(v51 + 160);
      uint64_t v53 = *(void *)(v51 + 20);
      unsigned int v54 = *(_DWORD *)(v51 + 8);
    }
    else
    {
      uint64_t v55 = *(void *)(v48 - 72);
      int v52 = *(_DWORD *)(v55 + 160);
      uint64_t v53 = *(void *)(v55 + 20);
      uint64_t v57 = v55 + 4;
      unsigned int v56 = *(_DWORD *)(v55 + 4);
      unsigned int v54 = *(_DWORD *)(v57 + 4);
      if (v52) {
        unsigned int v58 = v54;
      }
      else {
        unsigned int v58 = v53;
      }
      if (!v52) {
        unsigned int v56 = v54;
      }
      if (v58 == v56)
      {
        uint64_t v59 = sub_A0D24C(v8, 0x8E38E38E38E38E39 * (v50 >> 3) - 2);
        unint64_t v60 = *(unsigned int *)(*(void *)v59 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v59 + 8) << 32);
        if (!*(_DWORD *)(*(void *)v59 + 160)) {
          unint64_t v60 = *(void *)(*(void *)v59 + 20);
        }
        int v61 = HIDWORD(v60);
        uint64_t v63 = *(void *)(a3 + 200);
        uint64_t v62 = *(void *)(a3 + 208);
        if (v63 == v62)
        {
LABEL_74:
          if (v61 == 0x7FFFFFFF) {
            return 0;
          }
          goto LABEL_53;
        }
LABEL_77:
        uint64_t v66 = v62 - v63;
        if (v62 - v63 == 72 && *(unsigned char *)(v63 + 24) == 1)
        {
          uint64_t v67 = *(void *)(v62 - 72);
          int v68 = *(_DWORD *)(v67 + 160);
          unint64_t v69 = *(void *)(v67 + 20);
          unsigned int v70 = *(_DWORD *)(v67 + 8);
        }
        else
        {
          uint64_t v71 = *(void *)(v62 - 72);
          int v68 = *(_DWORD *)(v71 + 160);
          unint64_t v69 = *(void *)(v71 + 20);
          uint64_t v73 = v71 + 4;
          unsigned int v72 = *(_DWORD *)(v71 + 4);
          unsigned int v70 = *(_DWORD *)(v73 + 4);
          if (v68) {
            int v74 = v70;
          }
          else {
            int v74 = v69;
          }
          if (!v68) {
            unsigned int v72 = v70;
          }
          if (v74 == v72)
          {
            uint64_t v75 = sub_A0D24C(v26, 0x8E38E38E38E38E39 * (v66 >> 3) - 2);
            unint64_t v76 = *(unsigned int *)(*(void *)v75 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v75 + 8) << 32);
            if (!*(_DWORD *)(*(void *)v75 + 160)) {
              unint64_t v76 = *(void *)(*(void *)v75 + 20);
            }
            if (v61 >= (int)((v76 & 0xFFFFFFFF00000000) >> 32)) {
              return 0;
            }
            goto LABEL_53;
          }
        }
        unint64_t v77 = v70 | ((unint64_t)v70 << 32);
        if (v68) {
          unint64_t v78 = v77;
        }
        else {
          unint64_t v78 = v69;
        }
        if (v61 >= (int)((v78 & 0xFFFFFFFF00000000) >> 32)) {
          return 0;
        }
        goto LABEL_53;
      }
    }
    unint64_t v64 = v54 | ((unint64_t)v54 << 32);
    if (v52) {
      int v65 = HIDWORD(v64);
    }
    else {
      int v65 = HIDWORD(v53);
    }
    int v61 = v65;
    uint64_t v63 = *(void *)(a3 + 200);
    uint64_t v62 = *(void *)(a3 + 208);
    if (v63 == v62) {
      goto LABEL_74;
    }
    goto LABEL_77;
  }
LABEL_53:
  if (v41 <= *(double *)(a1 + 8))
  {
    if (*(unsigned char *)(a1 + 25)) {
      return 1;
    }
    for (unsigned int i = *(uint64_t **)(a2 + 200); i != *(uint64_t **)(a2 + 208); i += 9)
    {
      if (!*((unsigned char *)i + 24))
      {
        uint64_t v80 = *i;
        if (*i != i[1])
        {
          int v81 = *(_DWORD *)(v80 + 160);
          int v82 = *(_DWORD *)(v80 + 44);
          if (!v81 && v82 == -1) {
            return 1;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_B4CBC0(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "future_search_interval_hours");
  *(_DWORD *)a1 = 36000 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "past_search_interval_hours");
  *(_DWORD *)(a1 + 4) = 36000 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "allow_different_lines");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 8) = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "allow_different_stop_sequences");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 9) = v5;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "consider_all_bundled_legs");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 10) = v6;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93E0;
  strcpy((char *)__p[0], "consider_dominated_journey_leg_alternatives");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 11) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "max_journey_duration_stretch");
  double v8 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 16) = v8;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "output_departure_alternatives");
  BOOL v9 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 24) = v9;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "output_fill_in_journeys");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 25) = v10;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "fill_in_num_journeys_per_template");
  unint64_t v11 = sub_5C9BC(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 32) = v11;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "output_frequency_fill_in_journeys");
  BOOL v12 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 40) = v12;
  return a1;
}

void sub_B4CFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B4CFFC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = sub_B4CBC0(a1, a3);
  *(void *)(result + 48) = a2;
  return result;
}

void sub_B4D028(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = sub_2D0F10(0x14C1BACF914C1BADLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v4;
    uint64_t v7 = 12;
    do
    {
      uint64_t v8 = *(void *)(a2 + 8);
      if (*(unsigned char *)(a1 + 25)) {
        *(_DWORD *)(v8 + v7) = v5;
      }
      sub_B4D0CC(a1, a2, v8 + v7 - 12);
      ++v5;
      v7 += 296;
    }
    while (v6 != v5);
  }
}

void sub_B4D0CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(uint64_t **)(a3 + 200);
  uint64_t v3 = *(uint64_t **)(a3 + 208);
  unint64_t v5 = 0x8E38E38E38E38E39 * (v3 - v4);
  if (v5 >= 3)
  {
    memset(v49, 0, 24);
    memset(__p, 0, 24);
    uint64_t v9 = *v4;
    int v10 = *(_DWORD *)(*v4 + 160);
    unint64_t v11 = *(void *)(*v4 + 20);
    unsigned int v12 = *(_DWORD *)(*v4 + 8);
    if (v10) {
      int v13 = *(_DWORD *)(*v4 + 8);
    }
    else {
      int v13 = *(void *)(*v4 + 20);
    }
    if (v10) {
      int v14 = *(_DWORD *)(*v4 + 4);
    }
    else {
      int v14 = *(_DWORD *)(*v4 + 8);
    }
    if (v3 != v4)
    {
      char v15 = 0;
      for (unint64_t i = 0; i != v5; ++i)
      {
        while (1)
        {
          uint64_t v17 = *(void *)(a3 + 200);
          if (!*(unsigned char *)(v17 + 72 * i + 24)) {
            break;
          }
          if (++i == v5) {
            goto LABEL_26;
          }
        }
        char v19 = v13 != v14 || i > 1;
        sub_B4D3E0(a1, (void *)(v17 + 72 * i), (uint64_t *)(v17 + 72 * i + 72), v19, (uint64_t)v49);
        sub_B4D7E8(v20, (uint64_t *)v49);
        if (v15) {
          sub_B4DA94(v21, (char **)v49, (uint64_t *)__p);
        }
        int v22 = v49[2];
        int v23 = (char *)__p[0];
        long long v24 = *(_OWORD *)v49;
        v49[0] = __p[0];
        *(_OWORD *)&v49[1] = *(_OWORD *)&__p[1];
        *(_OWORD *)long long __p = v24;
        __p[2] = v22;
        for (uint64_t j = (char *)v49[1]; j != v23; j -= 40)
        {
          uint64_t v26 = (void *)*((void *)j - 3);
          if (v26)
          {
            *((void *)j - 2) = v26;
            operator delete(v26);
          }
        }
        v49[1] = v23;
        char v15 = 1;
      }
LABEL_26:
      uint64_t v9 = **(void **)(a3 + 200);
      int v10 = *(_DWORD *)(v9 + 160);
      unint64_t v11 = *(void *)(v9 + 20);
      unsigned int v12 = *(_DWORD *)(v9 + 8);
    }
    unint64_t v27 = v12 | ((unint64_t)v12 << 32);
    if (v10) {
      unint64_t v11 = v27;
    }
    unint64_t v28 = HIDWORD(v11);
    int v29 = 0x7FFFFFFF;
    if (v28 != 0x7FFFFFFF)
    {
      unint64_t v30 = *(void *)(v9 + 8);
      unint64_t v31 = *(unsigned int *)(v9 + 4) | ((unint64_t)*(unsigned int *)(v9 + 4) << 32);
      unint64_t v32 = v10 ? v31 : v30;
      unint64_t v33 = HIDWORD(v32);
      if (v33 != 0x7FFFFFFF) {
        int v29 = 10 * (v28 - v33);
      }
    }
    uint64_t v34 = (int32x2_t *)__p[0];
    unsigned int v35 = (int32x2_t *)__p[1];
    if (__p[0] != __p[1])
    {
      int v36 = v29 / -10;
      int v37 = v29 % 10;
      if (v29 < 0) {
        char v38 = -5;
      }
      else {
        char v38 = 5;
      }
      int32x2_t v39 = vdup_n_s32(v36 + (((-103 * (char)(v38 + v37)) >> 15) & 1) + ((-103 * (char)(v38 + v37)) >> 10));
      do
      {
        int32x2_t *v34 = vadd_s32(*v34, v39);
        v34 += 5;
      }
      while (v34 != v35);
    }
    sub_B4DE0C(a1, a2, a3, (uint64_t *)__p);
    int v40 = (char *)__p[0];
    if (__p[0])
    {
      double v41 = (char *)__p[1];
      char v42 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          int v43 = (void *)*((void *)v41 - 3);
          if (v43)
          {
            *((void *)v41 - 2) = v43;
            operator delete(v43);
          }
          v41 -= 40;
        }
        while (v41 != v40);
        char v42 = __p[0];
      }
      __p[1] = v40;
      operator delete(v42);
    }
    int v44 = (char *)v49[0];
    if (v49[0])
    {
      char v45 = (char *)v49[1];
      uint64_t v46 = v49[0];
      if (v49[1] != v49[0])
      {
        do
        {
          unint64_t v47 = (void *)*((void *)v45 - 3);
          if (v47)
          {
            *((void *)v45 - 2) = v47;
            operator delete(v47);
          }
          v45 -= 40;
        }
        while (v45 != v44);
        uint64_t v46 = v49[0];
      }
      v49[1] = v44;
      operator delete(v46);
    }
  }
}

void sub_B4D3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void sub_B4D3E0(uint64_t a1, void *a2, uint64_t *a3, char a4, uint64_t a5)
{
  uint64_t v7 = a2;
  if (!*(unsigned char *)(a1 + 10))
  {
    unint64_t v10 = 1;
    goto LABEL_5;
  }
  uint64_t v9 = a2[1] - *a2;
  if (v9)
  {
    unint64_t v10 = 0xCF3CF3CF3CF3CF3DLL * (v9 >> 3);
LABEL_5:
    unint64_t v44 = v10;
    for (uint64_t i = 0; i != v44; ++i)
    {
      uint64_t v52 = i;
      unsigned int v12 = (unsigned int *)(*v7 + 168 * i);
      unsigned int v47 = *v12;
      uint64_t v46 = *a3;
      sub_B4E6A4(*(void **)(a1 + 48), (uint64_t)v12, v12[3], *(_DWORD *)(a1 + 4), *(_DWORD *)a1, 0, 0, *(unsigned char *)(a1 + 8), (uint64_t)&v50, *(unsigned char *)(a1 + 9), 1);
      if (*(unsigned char *)(a1 + 11))
      {
        int v13 = (char *)__p;
      }
      else
      {
        sub_B4EDF8(*(void *)(a1 + 48), (uint64_t *)&v50);
        uint64_t v26 = v50;
        int v13 = (char *)__p;
        if (__p != v50)
        {
          unint64_t v27 = (int *)((char *)__p - 56);
          int v28 = 2147483646;
          int v29 = 2147483646;
          do
          {
            while (1)
            {
              unint64_t v31 = v27 + 1;
              if (v27[1] == 0x7FFFFFFF) {
                unint64_t v31 = v27;
              }
              int v32 = *v31;
              if (v32 < v28)
              {
                uint64_t v33 = v27[4] == 0x7FFFFFFF ? 12 : 16;
                int v34 = *(int *)((char *)v27 + v33);
                if (v34 < v29) {
                  break;
                }
              }
              *((void *)v27 + 3) = 0xFFFFFFFFLL;
              unint64_t v30 = (char *)(v27 - 1);
              v27 -= 15;
              if (v30 == v26) {
                goto LABEL_33;
              }
            }
            int v29 = v34;
            int v28 = v32;
            unsigned int v35 = (char *)(v27 - 1);
            v27 -= 15;
          }
          while (v35 != v26);
LABEL_33:
          int v13 = (char *)__p;
          if (v50 == __p)
          {
            int v13 = v50;
          }
          else
          {
            int v36 = v50 + 60;
            while (1)
            {
              BOOL v37 = *((_DWORD *)v36 - 8) == -1 || *((_DWORD *)v36 - 7) == 0;
              if (v37) {
                break;
              }
              BOOL v37 = v36 == __p;
              v36 += 60;
              if (v37) {
                goto LABEL_9;
              }
            }
            char v38 = v36 - 60;
            if (v36 - 60 != __p)
            {
              while (v36 != v13)
              {
                if (*((_DWORD *)v36 + 7) != -1 && *((_DWORD *)v36 + 8) != 0)
                {
                  long long v40 = *(_OWORD *)v36;
                  long long v41 = *((_OWORD *)v36 + 1);
                  long long v42 = *((_OWORD *)v36 + 2);
                  *(_OWORD *)(v38 + 41) = *(_OWORD *)(v36 + 41);
                  *((_OWORD *)v38 + 1) = v41;
                  *((_OWORD *)v38 + 2) = v42;
                  *(_OWORD *)char v38 = v40;
                  v38 += 60;
                }
                v36 += 60;
              }
            }
            if (v38 != v13)
            {
              int v13 = v38;
              long long __p = v38;
            }
          }
        }
      }
LABEL_9:
      int v14 = v50;
      if (v50 == v13) {
        goto LABEL_20;
      }
      do
      {
        while (1)
        {
          if (a4)
          {
            int v15 = *((_DWORD *)v14 + 2);
            int v16 = *(_DWORD *)v14 / -10;
            int v17 = *(_DWORD *)v14 % 10;
            if ((*(_DWORD *)v14 & 0x80000000) != 0)
            {
              char v18 = -5;
              goto LABEL_17;
            }
          }
          else
          {
            LOBYTE(v17) = 0;
            int v16 = 0;
            int v15 = *((_DWORD *)v14 + 2);
          }
          char v18 = 5;
LABEL_17:
          unsigned int v19 = v15 + v16 + (((-103 * (char)(v18 + v17)) >> 15) & 1) + ((-103 * (char)(v18 + v17)) >> 10);
          unsigned int v49 = v19;
          int v48 = *(_DWORD *)(v46 + 168 * v47 + 8) - *(_DWORD *)(v46 + 168 * v47 + 4) + *((_DWORD *)v14 + 5);
          unint64_t v20 = *(void *)(a5 + 8);
          if (v20 < *(void *)(a5 + 16)) {
            break;
          }
          *(void *)(a5 + 8) = sub_B5234C((void **)a5, (const float *)&v49, &v48, &v52, v14);
          v14 += 60;
          if (v14 == v13) {
            goto LABEL_19;
          }
        }
        int v21 = v52;
        *(_DWORD *)unint64_t v20 = v19;
        int v22 = v48;
        *(_DWORD *)(v20 + 4) = v49;
        *(_DWORD *)(v20 + 8) = v22;
        long long v23 = *((_OWORD *)v14 + 1);
        long long v53 = *(_OWORD *)v14;
        long long v54 = v23;
        v55[0] = *((_OWORD *)v14 + 2);
        *(_OWORD *)((char *)v55 + 12) = *(_OWORD *)(v14 + 44);
        *(void *)(v20 + 24) = 0;
        *(void *)(v20 + 32) = 0;
        *(void *)(v20 + 16) = 0;
        long long v24 = operator new(0x40uLL);
        *(void *)(v20 + 16) = v24;
        *(void *)(v20 + 32) = v24 + 4;
        long long v25 = v54;
        *(_OWORD *)((char *)v24 + 4) = v53;
        *(_DWORD *)long long v24 = v21;
        *(_OWORD *)((char *)v24 + 20) = v25;
        *(_OWORD *)((char *)v24 + 36) = v55[0];
        v24[3] = *(_OWORD *)((char *)v55 + 12);
        *(void *)(v20 + 24) = v24 + 4;
        *(void *)(a5 + 8) = v20 + 40;
        *(void *)(a5 + 8) = v20 + 40;
        v14 += 60;
      }
      while (v14 != v13);
LABEL_19:
      int v13 = v50;
      uint64_t v7 = a2;
LABEL_20:
      if (v13)
      {
        long long __p = v13;
        operator delete(v13);
      }
    }
  }
}

void sub_B4D7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B4D7E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned int v4 = (__n128 *)a2[1];
  uint64_t v5 = (uint64_t)v4 - *a2;
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 3);
  if (v5 < 1)
  {
LABEL_5:
    unint64_t v10 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 3);
    while (1)
    {
      uint64_t v8 = operator new(40 * v7, &std::nothrow);
      if (v8) {
        break;
      }
      BOOL v9 = v7 > 1;
      v7 >>= 1;
      if (!v9) {
        goto LABEL_5;
      }
    }
    unint64_t v10 = v8;
  }
  sub_B525F4(v3, v4, v6, (uint64_t)v10, v7);
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = *a2;
  unsigned int v12 = (signed int *)a2[1];
  if ((signed int *)*a2 != v12)
  {
    signed int v13 = 0x80000000;
    signed int v14 = 0x80000000;
    int v15 = (signed int *)*a2;
    do
    {
      while (*v15 <= v13 || v15[2] <= v14)
      {
        void v15[2] = 0x7FFFFFFF;
        v15 += 10;
        if (v15 == v12) {
          goto LABEL_15;
        }
      }
      signed int v14 = v15[2];
      signed int v13 = *v15;
      v15 += 10;
    }
    while (v15 != v12);
LABEL_15:
    if ((signed int *)v11 != v12)
    {
      while (*(_DWORD *)(v11 + 8) != 0x7FFFFFFF)
      {
        v11 += 40;
        if ((signed int *)v11 == v12) {
          return;
        }
      }
      if ((signed int *)v11 != v12)
      {
        uint64_t v16 = v11 + 40;
        if ((signed int *)(v11 + 40) != v12)
        {
          do
          {
            if (*(_DWORD *)(v16 + 8) != 0x7FFFFFFF)
            {
              uint64_t v17 = *(void *)v16;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(v16 + 8);
              *(void *)uint64_t v11 = v17;
              char v18 = *(void **)(v11 + 16);
              if (v18)
              {
                *(void *)(v11 + 24) = v18;
                operator delete(v18);
                *(void *)(v11 + 16) = 0;
                *(void *)(v11 + 24) = 0;
                *(void *)(v11 + 32) = 0;
              }
              *(_OWORD *)(v11 + 16) = *(_OWORD *)(v16 + 16);
              *(void *)(v11 + 32) = *(void *)(v16 + 32);
              *(void *)(v16 + 16) = 0;
              *(void *)(v16 + 24) = 0;
              *(void *)(v16 + 32) = 0;
              v11 += 40;
            }
            v16 += 40;
          }
          while ((signed int *)v16 != v12);
          unsigned int v12 = (signed int *)a2[1];
        }
      }
      if ((signed int *)v11 != v12)
      {
        while (v12 != (signed int *)v11)
        {
          unsigned int v19 = (void *)*((void *)v12 - 3);
          if (v19)
          {
            *((void *)v12 - 2) = v19;
            operator delete(v19);
          }
          v12 -= 10;
        }
        a2[1] = v11;
      }
    }
  }
}

void sub_B4DA7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_B4DA94(uint64_t a1, char **a2, uint64_t *a3)
{
  unsigned int v4 = *a2;
  uint64_t v5 = a2[1];
  if (v5 != *a2)
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a2) >> 3);
    while (1)
    {
      uint64_t v10 = *a3;
      unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3);
      if (v8 >= v11) {
        break;
      }
      if (v7 < v9)
      {
        uint64_t v12 = v10 + 40 * v8;
        signed int v13 = &v4[40 * v7];
        int v15 = *(_DWORD *)(v12 + 8);
        signed int v14 = (_DWORD *)(v12 + 8);
        if (v15 <= *(_DWORD *)v13) {
          goto LABEL_15;
        }
        unint64_t v16 = v7 + 1;
        while (1)
        {
          unint64_t v17 = v16;
          *(_DWORD *)signed int v13 = 0x7FFFFFFF;
          if (v9 == v16) {
            break;
          }
          int v18 = *((_DWORD *)v13 + 10);
          v13 += 40;
          ++v16;
          if (*v14 <= v18)
          {
            unint64_t v7 = v17;
            goto LABEL_14;
          }
        }
        unint64_t v7 = v9;
LABEL_14:
        if (v17 < v9)
        {
LABEL_15:
          int v19 = *(_DWORD *)&v4[40 * v7];
          if (v19 >= *v14)
          {
            unint64_t v20 = v11 - 1;
            int v21 = (int *)(v10 + 40 * v8 + 48);
            while (v20 != v8)
            {
              ++v8;
              int v22 = *v21;
              v21 += 10;
              if (v19 < v22)
              {
                unint64_t v20 = v8 - 1;
                if (!v8) {
                  goto LABEL_4;
                }
                goto LABEL_22;
              }
            }
            unint64_t v8 = v11;
            if (!v11) {
              goto LABEL_4;
            }
LABEL_22:
            uint64_t v23 = v10 + 40 * v20;
            long long v24 = &v4[40 * v7];
            *((_DWORD *)v24 + 1) = *(_DWORD *)(v23 + 4);
            uint64_t v25 = *((void *)v24 + 3);
            long long v26 = *(_OWORD *)(v25 - 64);
            long long v27 = *(_OWORD *)(v25 - 48);
            long long v28 = *(_OWORD *)(v25 - 16);
            v36[2] = *(_OWORD *)(v25 - 32);
            v36[3] = v28;
            v36[0] = v26;
            v36[1] = v27;
            if (v24 != (char *)v23)
            {
              sub_B539AC((void *)v24 + 2, *(char **)(v23 + 16), *(char **)(v23 + 24), (uint64_t)(*(void *)(v23 + 24) - *(void *)(v23 + 16)) >> 6);
              unsigned int v4 = *a2;
            }
            sub_31738((char **)&v4[40 * v7 + 16], v36);
            unsigned int v4 = *a2;
            uint64_t v5 = a2[1];
          }
        }
      }
LABEL_4:
      ++v7;
      unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 3);
      if (v7 >= v9)
      {
        if (v7 > v9)
        {
          sub_B53AF4((void **)a2, v7 - v9);
          uint64_t v5 = a2[1];
        }
        goto LABEL_32;
      }
    }
    int v29 = &v4[40 * v7];
    while (v5 != v29)
    {
      unint64_t v30 = (void *)*((void *)v5 - 3);
      if (v30)
      {
        *((void *)v5 - 2) = v30;
        operator delete(v30);
      }
      v5 -= 40;
    }
    a2[1] = v29;
    uint64_t v5 = v29;
  }
LABEL_32:
  unint64_t v31 = *a2;
  if (*a2 != v5)
  {
    while (*(_DWORD *)v31 != 0x7FFFFFFF)
    {
      v31 += 40;
      if (v31 == v5) {
        return;
      }
    }
    if (v31 != v5)
    {
      int v32 = v31 + 40;
      if (v31 + 40 != v5)
      {
        do
        {
          if (*(_DWORD *)v32 != 0x7FFFFFFF)
          {
            uint64_t v33 = *(void *)v32;
            *((_DWORD *)v31 + 2) = *((_DWORD *)v32 + 2);
            *(void *)unint64_t v31 = v33;
            int v34 = (void *)*((void *)v31 + 2);
            if (v34)
            {
              *((void *)v31 + 3) = v34;
              operator delete(v34);
              *((void *)v31 + 2) = 0;
              *((void *)v31 + 3) = 0;
              *((void *)v31 + 4) = 0;
            }
            *((_OWORD *)v31 + 1) = *((_OWORD *)v32 + 1);
            *((void *)v31 + 4) = *((void *)v32 + 4);
            *((void *)v32 + 2) = 0;
            *((void *)v32 + 3) = 0;
            *((void *)v32 + 4) = 0;
            v31 += 40;
          }
          v32 += 40;
        }
        while (v32 != v5);
        uint64_t v5 = a2[1];
      }
    }
    if (v31 != v5)
    {
      while (v5 != v31)
      {
        unsigned int v35 = (void *)*((void *)v5 - 3);
        if (v35)
        {
          *((void *)v5 - 2) = v35;
          operator delete(v35);
        }
        v5 -= 40;
      }
      a2[1] = v31;
    }
  }
}

void sub_B4DE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(a3 + 200);
  uint64_t v7 = *(void *)(a3 + 208);
  unint64_t v9 = (void *)(a3 + 200);
  if (v8 == v7)
  {
    sub_A2AAF8(a3, 0);
    int v23 = 0x7FFFFFFF;
    goto LABEL_21;
  }
  uint64_t v10 = v7 - v8;
  if (v7 - v8 == 72 && *(unsigned char *)(v8 + 24) == 1)
  {
    uint64_t v11 = *(void *)(v7 - 72);
    int v12 = *(_DWORD *)(v11 + 160);
    uint64_t v13 = *(void *)(v11 + 20);
    unsigned int v14 = *(_DWORD *)(v11 + 8);
LABEL_14:
    unint64_t v21 = v14 | ((unint64_t)v14 << 32);
    if (v12) {
      HIDWORD(v20) = HIDWORD(v21);
    }
    else {
      HIDWORD(v20) = HIDWORD(v13);
    }
    goto LABEL_17;
  }
  uint64_t v15 = *(void *)(v7 - 72);
  int v12 = *(_DWORD *)(v15 + 160);
  uint64_t v13 = *(void *)(v15 + 20);
  uint64_t v17 = v15 + 4;
  unsigned int v16 = *(_DWORD *)(v15 + 4);
  unsigned int v14 = *(_DWORD *)(v17 + 4);
  if (v12) {
    unsigned int v18 = v14;
  }
  else {
    unsigned int v18 = v13;
  }
  if (!v12) {
    unsigned int v16 = v14;
  }
  if (v18 != v16) {
    goto LABEL_14;
  }
  uint64_t v19 = sub_A0D24C((void *)(a3 + 200), 0x8E38E38E38E38E39 * (v10 >> 3) - 2);
  if (*(_DWORD *)(*(void *)v19 + 160)) {
    unint64_t v20 = *(unsigned int *)(*(void *)v19 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v19 + 8) << 32);
  }
  else {
    unint64_t v20 = *(void *)(*(void *)v19 + 20);
  }
LABEL_17:
  uint64_t v22 = sub_A2AAF8(a3, 0);
  int v23 = 0x7FFFFFFF;
  if (HIDWORD(v20) != 0x7FFFFFFF && HIDWORD(v22) != 0x7FFFFFFF) {
    int v23 = 10 * (HIDWORD(v20) - HIDWORD(v22));
  }
LABEL_21:
  uint64_t v24 = sub_A2AAF8(a3, 0);
  uint64_t v26 = *(void *)(a3 + 200);
  uint64_t v25 = *(void *)(a3 + 208);
  if (v26 == v25)
  {
    unint64_t v38 = 0x7FFFFFFF00000000;
    if (!v23) {
      return;
    }
  }
  else
  {
    uint64_t v27 = v25 - v26;
    if (v25 - v26 == 72 && *(unsigned char *)(v26 + 24) == 1)
    {
      uint64_t v28 = *(void *)(v25 - 72);
      int v29 = *(_DWORD *)(v28 + 160);
      unint64_t v30 = *(void *)(v28 + 20);
      unsigned int v31 = *(_DWORD *)(v28 + 8);
    }
    else
    {
      uint64_t v32 = *(void *)(v25 - 72);
      int v29 = *(_DWORD *)(v32 + 160);
      unint64_t v30 = *(void *)(v32 + 20);
      uint64_t v34 = v32 + 4;
      unsigned int v33 = *(_DWORD *)(v32 + 4);
      unsigned int v31 = *(_DWORD *)(v34 + 4);
      if (v29) {
        int v35 = v31;
      }
      else {
        int v35 = v30;
      }
      if (!v29) {
        unsigned int v33 = v31;
      }
      if (v35 == v33)
      {
        uint64_t v36 = sub_A0D24C(v9, 0x8E38E38E38E38E39 * (v27 >> 3) - 2);
        unint64_t v37 = *(unsigned int *)(*(void *)v36 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v36 + 8) << 32);
        if (!*(_DWORD *)(*(void *)v36 + 160)) {
          unint64_t v37 = *(void *)(*(void *)v36 + 20);
        }
        unint64_t v38 = v37 & 0xFFFFFFFF00000000;
        if (!v23) {
          return;
        }
        goto LABEL_41;
      }
    }
    unint64_t v39 = v31 | ((unint64_t)v31 << 32);
    if (v29) {
      unint64_t v40 = v39;
    }
    else {
      unint64_t v40 = v30;
    }
    unint64_t v38 = v40 & 0xFFFFFFFF00000000;
    if (!v23) {
      return;
    }
  }
LABEL_41:
  unint64_t v98 = a4;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v41 = sub_A2AAF8(a3, 0);
    for (uint64_t i = *(uint64_t **)(a3 + 200); i != *(uint64_t **)(a3 + 208); i += 9)
    {
      if (!*((unsigned char *)i + 24))
      {
        uint64_t v44 = *i;
        if (*i != i[1])
        {
          int v45 = *(_DWORD *)(v44 + 160);
          int v46 = *(_DWORD *)(v44 + 44);
          if (!v45 && v46 == -1)
          {
            uint64_t v48 = 0;
            goto LABEL_54;
          }
        }
      }
    }
    uint64_t v48 = 0x100000000;
LABEL_54:
    *(void *)&v100[0] = v41;
    *((void *)&v100[0] + 1) = v48 | v42;
    unsigned int v49 = sub_B4EFA8((char **)(a3 + 224), v100);
    uint64_t v50 = *a4;
    uint64_t v51 = a4[1];
    if (*a4 != v51)
    {
      if (v23 < 0) {
        char v52 = -5;
      }
      else {
        char v52 = 5;
      }
      double v53 = (double)(int)(v23 / 10
                        + (((103 * (char)(v52 + v23 % 10)) >> 15) & 1)
                        + ((103 * (char)(v52 + v23 % 10)) >> 10));
      do
      {
        if ((double)(*(_DWORD *)(v50 + 8) - *(_DWORD *)(v50 + 4)) / v53 <= *(double *)(a1 + 16))
        {
          *(void *)&v100[0] = sub_B4F0AC((uint64_t)v49, a3, v50);
          *((void *)&v100[0] + 1) = v54;
          unsigned int v49 = sub_B4EFA8((char **)(a3 + 224), v100);
        }
        v50 += 40;
      }
      while (v50 != v51);
    }
    unint64_t v55 = *(void *)(a3 + 224);
    unsigned int v56 = *(void **)(a3 + 232);
    unint64_t v57 = 126 - 2 * __clz((uint64_t)((uint64_t)v56 - v55) >> 4);
    if (v56 == (void *)v55) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = v57;
    }
    sub_B53D14(v55, v56, v58, 1);
    uint64_t v60 = *(void *)(a3 + 224);
    uint64_t v59 = *(void *)(a3 + 232);
    if (v60 != v59)
    {
      uint64_t v61 = v60 - 16;
      while (v61 + 32 != v59)
      {
        int v62 = *(_DWORD *)(v61 + 20);
        int v63 = *(_DWORD *)(v61 + 36);
        v61 += 16;
        if (v62 == v63)
        {
          uint64_t v64 = v61 + 32;
          if (v61 + 32 != v59)
          {
            do
            {
              if (*(_DWORD *)(v61 + 4) != *(_DWORD *)(v64 + 4))
              {
                uint64_t v65 = *(void *)(v64 + 5);
                *(void *)(v61 + 16) = *(void *)v64;
                v61 += 16;
                *(void *)(v61 + 5) = v65;
              }
              v64 += 16;
            }
            while (v64 != v59);
            uint64_t v59 = *(void *)(a3 + 232);
          }
          if (v61 + 16 != v59) {
            *(void *)(a3 + 232) = v61 + 16;
          }
          break;
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    unint64_t v120 = 0;
    uint64_t v66 = a4[1] - *a4;
    if (v66)
    {
      unint64_t v67 = 0;
      unint64_t v96 = HIDWORD(v38);
      unint64_t v97 = 0xCCCCCCCCCCCCCCCDLL * (v66 >> 3);
      if (v23 < 0) {
        char v68 = -5;
      }
      else {
        char v68 = 5;
      }
      double v69 = (double)(int)(v23 / 10
                        + (((103 * (char)(v68 + v23 % 10)) >> 15) & 1)
                        + ((103 * (char)(v68 + v23 % 10)) >> 10));
      while (1)
      {
        uint64_t v70 = (uint64_t)v118;
        uint64_t v71 = (uint64_t)v119;
        if ((unint64_t)(0x14C1BACF914C1BADLL * ((v119 - v118) >> 3)) >= *(void *)(a1 + 32)) {
          goto LABEL_115;
        }
        unint64_t v72 = v67;
        if (*(unsigned char *)(a2 + 184)) {
          unint64_t v72 = ~v67 - 0x3333333333333333 * ((a4[1] - *a4) >> 3);
        }
        uint64_t v73 = sub_B4F318(a4, v72);
        uint64_t v74 = v73;
        if ((double)(*(_DWORD *)(v73 + 8) - *(_DWORD *)(v73 + 4)) / v69 <= *(double *)(a1 + 16))
        {
          if (!*(unsigned char *)(a1 + 40))
          {
            uint64_t v75 = *(void *)(v73 + 24) - *(void *)(v73 + 16);
            if (!v75) {
              goto LABEL_83;
            }
            uint64_t v76 = 0;
            uint64_t v77 = v75 >> 6;
            unint64_t v78 = 1;
            while (1)
            {
              uint64_t v79 = *(void *)(v74 + 16);
              uint64_t v80 = (void *)sub_A0D24C(v9, v78);
              if (*(_DWORD *)(sub_A2AF48(v80, *(unsigned int *)(v79 + v76)) + 44) == -1) {
                break;
              }
              v78 += 2;
              v76 += 64;
              if (!--v77) {
                goto LABEL_83;
              }
            }
          }
          if (*(unsigned char *)(a2 + 184))
          {
            if (*(_DWORD *)(v74 + 8) < (int)v96) {
              goto LABEL_98;
            }
          }
          else if (*(_DWORD *)(v74 + 4) > SHIDWORD(v24))
          {
LABEL_98:
            sub_B4F548(a1, a3, v74, (uint64_t)v100);
            int v81 = v119;
            if ((unint64_t)v119 >= v120)
            {
              uint64_t v119 = sub_A220E4((void **)&v118, (uint64_t)v100);
              if ((void)__p)
              {
                *((void *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
            }
            else
            {
              long long v82 = v100[0];
              long long v83 = v100[2];
              *((_OWORD *)v119 + 1) = v100[1];
              *((_OWORD *)v81 + 2) = v83;
              *(_OWORD *)int v81 = v82;
              long long v84 = v100[3];
              long long v85 = v100[4];
              long long v86 = v100[5];
              *((void *)v81 + 12) = v101;
              *((_OWORD *)v81 + 4) = v85;
              *((_OWORD *)v81 + 5) = v86;
              *((_OWORD *)v81 + 3) = v84;
              *((_DWORD *)v81 + 26) = v102;
              long long v87 = v103;
              *((void *)v81 + 16) = v104;
              *((_OWORD *)v81 + 7) = v87;
              uint64_t v104 = 0;
              long long v103 = 0uLL;
              *((_DWORD *)v81 + 34) = v105;
              long long v88 = v106;
              long long v89 = v108;
              *((_OWORD *)v81 + 10) = v107;
              *((_OWORD *)v81 + 11) = v89;
              *((_OWORD *)v81 + 9) = v88;
              *((void *)v81 + 24) = v109;
              *((void *)v81 + 25) = 0;
              *((void *)v81 + 26) = 0;
              *((void *)v81 + 27) = 0;
              *((void *)v81 + 28) = 0;
              *(_OWORD *)(v81 + 200) = v110;
              *((void *)v81 + 27) = v111;
              long long v110 = 0uLL;
              uint64_t v111 = 0;
              *((void *)v81 + 29) = 0;
              *((void *)v81 + 30) = 0;
              *((_OWORD *)v81 + 14) = v112;
              long long v112 = 0uLL;
              *((void *)v81 + 30) = v113;
              *((void *)v81 + 31) = 0;
              uint64_t v113 = 0;
              *((void *)v81 + 32) = 0;
              *((void *)v81 + 33) = 0;
              *(_OWORD *)(v81 + 248) = v114;
              long long v114 = 0uLL;
              *((void *)v81 + 33) = v115;
              *((void *)v81 + 34) = 0;
              uint64_t v115 = 0;
              *((void *)v81 + 35) = 0;
              *((void *)v81 + 36) = 0;
              *((_OWORD *)v81 + 17) = __p;
              *((void *)v81 + 36) = v117;
              long long __p = 0uLL;
              uint64_t v117 = 0;
              uint64_t v119 = v81 + 296;
            }
            if ((void)v114)
            {
              *((void *)&v114 + 1) = v114;
              operator delete((void *)v114);
            }
            if ((void)v112)
            {
              *((void *)&v112 + 1) = v112;
              operator delete((void *)v112);
            }
            unint64_t v90 = (void **)v110;
            if ((void)v110)
            {
              uint64_t v91 = (void **)*((void *)&v110 + 1);
              uint64_t v92 = (void *)v110;
              if (*((void *)&v110 + 1) != (void)v110)
              {
                do
                {
                  v91 -= 9;
                  sub_9F5F58((uint64_t)&v111, v91);
                }
                while (v91 != v90);
                uint64_t v92 = (void *)v110;
              }
              *((void *)&v110 + 1) = v90;
              operator delete(v92);
            }
            if (SHIBYTE(v104) < 0) {
              operator delete((void *)v103);
            }
          }
        }
LABEL_83:
        ++v67;
        a4 = v98;
        if (v67 == v97)
        {
          uint64_t v70 = (uint64_t)v118;
          uint64_t v71 = (uint64_t)v119;
          goto LABEL_115;
        }
      }
    }
    uint64_t v71 = 0;
    uint64_t v70 = 0;
LABEL_115:
    sub_A4D564((uint64_t)v100, v70, v71, a2 + 8);
    uint64_t v93 = v118;
    if (v118)
    {
      uint64_t v94 = (uint64_t)v119;
      unint64_t v95 = v118;
      if (v119 != v118)
      {
        do
        {
          v94 -= 296;
          sub_9F5E28((uint64_t)&v120, v94);
        }
        while ((char *)v94 != v93);
        unint64_t v95 = v118;
      }
      uint64_t v119 = v93;
      operator delete(v95);
    }
  }
}

void sub_B4E638(_Unwind_Exception *a1)
{
  sub_9F5DBC((void **)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_B4E64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_A1D608((uint64_t)va);
  sub_9F5DBC((void **)(v12 - 128));
  _Unwind_Resume(a1);
}

void sub_B4E668(_Unwind_Exception *a1)
{
  sub_9F5DBC((void **)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_B4E67C(_Unwind_Exception *a1)
{
  sub_9F5DBC((void **)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_B4E690(_Unwind_Exception *a1)
{
  sub_9F5DBC((void **)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_B4E6A4(void *a1@<X0>, uint64_t a2@<X1>, signed int a3@<W2>, int a4@<W3>, int a5@<W4>, unsigned int a6@<W5>, unsigned int a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, char a10, char a11)
{
  char v84 = 1;
  LODWORD(v78) = *(_DWORD *)(a2 + 4);
  *(void *)((char *)&v78 + 4) = *(void *)(a2 + 8);
  WORD6(v78) = *(_WORD *)(a2 + 16);
  uint64_t v79 = *(void *)(a2 + 20);
  __int16 v80 = *(_WORD *)(a2 + 28);
  uint64_t v16 = *(void *)(a2 + 40);
  *(void *)&long long v81 = *(void *)(a2 + 32);
  int v82 = *(_DWORD *)(a2 + 48);
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0;
  uint64_t v83 = *(void *)(a2 + 52);
  *((void *)&v81 + 1) = v16;
  sub_B4FDC0((char **)a9, &v78);
  uint64_t v17 = a1 + 517;
  unsigned int v18 = *(_DWORD *)(a2 + 52);
  uint64_t v19 = (int *)sub_A11094(a1 + 517, *(void *)(a2 + 32));
  unint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 >= 9u && (uint64_t v21 = v20[4]) != 0) {
    uint64_t v22 = (unsigned int *)((char *)v19 + v21 + *(unsigned int *)((char *)v19 + v21));
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *(void *)sub_A10764(v22, v18);
  unsigned int v24 = *(_DWORD *)(a2 + 56);
  uint64_t v25 = (int *)sub_A11094(a1 + 517, *(void *)(a2 + 32));
  uint64_t v26 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v26 >= 9u && (uint64_t v27 = v26[4]) != 0) {
    uint64_t v28 = (unsigned int *)((char *)v25 + v27 + *(unsigned int *)((char *)v25 + v27));
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t v29 = *(void *)sub_A10764(v28, v24);
  unsigned int v30 = *(_DWORD *)(a2 + 52);
  unsigned int v31 = (int *)sub_A11094(a1 + 517, *(void *)(a2 + 32));
  uint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31);
  unsigned int v33 = *v32;
  if (v33 < 5)
  {
    uint64_t v34 = 0;
    goto LABEL_14;
  }
  if (!v32[2])
  {
    uint64_t v34 = 0;
    if (v33 >= 9) {
      goto LABEL_68;
    }
LABEL_14:
    int v35 = 0;
    goto LABEL_15;
  }
  uint64_t v34 = (char *)v31 + v32[2] + *(unsigned int *)((char *)v31 + v32[2]);
  if (v33 < 9) {
    goto LABEL_14;
  }
LABEL_68:
  uint64_t v64 = v32[4];
  if (!v64) {
    goto LABEL_14;
  }
  int v35 = (unsigned int *)((char *)v31 + v64 + *(unsigned int *)((char *)v31 + v64));
LABEL_15:
  uint64_t v68 = *(void *)&v34[8 * *(unsigned __int8 *)(sub_A10764(v35, v30) + 14) + 4];
  char v36 = a11 ^ 1;
  uint64_t v37 = (uint64_t)a1;
  sub_A1DF34((uint64_t)v85, a1, __ROR8__(v23, 32), 0, 0, a11 ^ 1);
  unint64_t v38 = v88;
  if (v88 < v89)
  {
    uint64_t v39 = __ROR8__(v29, 32);
    signed int v71 = a3;
    int v69 = a5;
    int v70 = a4;
    uint64_t v67 = v39;
    while (2)
    {
      unint64_t v40 = __ROR8__(*(void *)v38, 32);
      sub_A1E9A0((uint64_t)&v78, v37, v40, *(unsigned __int16 *)(v38 + 8), v36, 0);
      uint64_t v41 = __ROR8__(**(void **)((char *)&v81 + 4), 32);
      uint64_t v92 = v39;
      uint64_t v93 = v41;
      *(void *)&long long v91 = &v93;
      *((void *)&v91 + 1) = 1;
      uint64_t v42 = v39;
      v90[0] = &v92;
      v90[1] = 1;
      sub_A1EDFC((uint64_t)&v78, (uint64_t)&v91, (uint64_t)v90, &__p);
      uint64_t v44 = (unsigned int *)__p;
      int v43 = v77;
      if (__p != v77)
      {
        while (1)
        {
          unsigned int v46 = *v44;
          unsigned int v45 = v44[1];
          if (a8)
          {
LABEL_39:
            if (a10
              || sub_B4FF24((uint64_t)a1, *(void *)(a2 + 32), *(_DWORD *)(a2 + 52), *(_DWORD *)(a2 + 56), v40, v46, v45))
            {
              sub_B501FC((uint64_t)a1, (uint64_t)&v78, v46, v45, v71, v70, v69, a6, (uint64_t)&v91, a7);
              sub_B50544(a9, *(char **)(a9 + 8), (char *)v91, *((char **)&v91 + 1), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((void *)&v91 + 1) - v91) >> 2));
              if ((void)v91)
              {
                *((void *)&v91 + 1) = v91;
                operator delete((void *)v91);
              }
            }
            goto LABEL_19;
          }
          if (sub_A10E20(a1 + 517, SHIDWORD(v40)))
          {
            unsigned int v47 = (int *)sub_A1120C(*(void *)(*v17 + 3944), v40);
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v59 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v48 = *v17;
            if (dword_24F7300 == HIDWORD(v40))
            {
              unsigned int v49 = *(unsigned int **)(*(void *)(v48 + 3976) + 72);
              if (!v49)
              {
                exception = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(&v91, "Realtime stop pattern quad data requested on nullptr buffer");
                uint64_t v66 = (void *)sub_2F404((uint64_t)exception, &v91);
              }
              uint64_t v50 = (int *)((char *)v49 + *v49);
              uint64_t v51 = (unsigned __int16 *)((char *)v50 - *v50);
              if (*v51 >= 5u && (uint64_t v52 = v51[2]) != 0) {
                double v53 = (unsigned int *)((char *)v50 + v52 + *(unsigned int *)((char *)v50 + v52));
              }
              else {
                double v53 = 0;
              }
              unsigned int v47 = (int *)sub_A1139C(v53, v40);
            }
            else
            {
              unsigned int v47 = (int *)sub_A11500(v48 + 24, v40, 0, "stop pattern");
            }
          }
          uint64_t v54 = (unsigned __int16 *)((char *)v47 - *v47);
          unsigned int v55 = *v54;
          if (v55 < 5) {
            break;
          }
          if (v54[2])
          {
            unsigned int v56 = (char *)v47 + v54[2] + *(unsigned int *)((char *)v47 + v54[2]);
            if (v55 < 9) {
              goto LABEL_37;
            }
          }
          else
          {
            unsigned int v56 = 0;
            if (v55 < 9) {
              goto LABEL_37;
            }
          }
          uint64_t v58 = v54[4];
          if (!v58) {
            goto LABEL_37;
          }
          unint64_t v57 = (unsigned int *)((char *)v47 + v58 + *(unsigned int *)((char *)v47 + v58));
LABEL_38:
          if (v68 == *(void *)&v56[8 * *(unsigned __int8 *)(sub_A10764(v57, v46) + 14) + 4]) {
            goto LABEL_39;
          }
LABEL_19:
          v44 += 2;
          if (v44 == v43)
          {
            uint64_t v44 = (unsigned int *)__p;
            uint64_t v37 = (uint64_t)a1;
            char v36 = a11 ^ 1;
            uint64_t v39 = v67;
            if (__p) {
              goto LABEL_49;
            }
            goto LABEL_50;
          }
        }
        unsigned int v56 = 0;
LABEL_37:
        unint64_t v57 = 0;
        goto LABEL_38;
      }
      uint64_t v39 = v42;
      if (__p)
      {
LABEL_49:
        uint64_t v77 = v44;
        operator delete(v44);
      }
LABEL_50:
      unint64_t v60 = v89;
      unint64_t v38 = v88 + 16;
      unint64_t v88 = v38;
      if (v38 == v89)
      {
        uint64_t v61 = v86 + 2;
        long long v86 = v61;
        if ((unint64_t)v61 < v87)
        {
          while (1)
          {
            unint64_t v38 = *v61;
            unint64_t v60 = v61[1];
            if (*v61 != v60) {
              break;
            }
            v61 += 2;
            long long v86 = v61;
            if ((unint64_t)v61 >= v87) {
              return;
            }
          }
LABEL_59:
          unint64_t v88 = v38;
          unint64_t v89 = v60;
          goto LABEL_60;
        }
      }
      else
      {
LABEL_60:
        while (v38 < v60)
        {
          BOOL v62 = sub_A1E87C(v85);
          unint64_t v38 = v88;
          unint64_t v60 = v89;
          if (!v62) {
            break;
          }
          unint64_t v38 = v88 + 16;
          unint64_t v88 = v38;
          if (v38 == v89)
          {
            int v63 = v86 + 2;
            long long v86 = v63;
            if ((unint64_t)v63 < v87)
            {
              while (1)
              {
                unint64_t v38 = *v63;
                unint64_t v60 = v63[1];
                if (*v63 != v60) {
                  break;
                }
                v63 += 2;
                long long v86 = v63;
                if ((unint64_t)v63 >= v87) {
                  return;
                }
              }
              goto LABEL_59;
            }
            return;
          }
        }
        if (v38 < v60) {
          continue;
        }
      }
      break;
    }
  }
}

void sub_B4ECBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = *(void **)a17;
    if (!*(void *)a17) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v21 = *(void **)a17;
    if (!*(void *)a17) {
      goto LABEL_3;
    }
  }
  *(void *)(a17 + 8) = v21;
  operator delete(v21);
  _Unwind_Resume(a1);
}

void sub_B4EDF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (int *)a2[1];
  uint64_t v6 = (uint64_t)v5 - *a2;
  unint64_t v7 = 0xEEEEEEEEEEEEEEEFLL * (v6 >> 2);
  if (v6 < 7681)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * (v6 >> 2);
    while (1)
    {
      unint64_t v9 = operator new(60 * v8, &std::nothrow);
      if (v9) {
        break;
      }
      BOOL v10 = v8 > 1;
      v8 >>= 1;
      if (!v10) {
        goto LABEL_5;
      }
    }
    uint64_t v11 = v9;
  }
  sub_B50F3C(v4, v5, (uint64_t)&v21, v7, v11, v8);
  if (v11) {
    operator delete(v11);
  }
  uint64_t v12 = *a2;
  uint64_t v13 = (long long *)a2[1];
  if ((long long *)*a2 == v13)
  {
LABEL_18:
    if (v12 != a2[1]) {
LABEL_21:
    }
      a2[1] = v12;
  }
  else
  {
    do
    {
      uint64_t v14 = v12 + 60;
      if ((long long *)(v12 + 60) == v13)
      {
        uint64_t v12 = (uint64_t)v13;
        goto LABEL_18;
      }
      BOOL v15 = sub_B52088(a1, v12, v12 + 60);
      v12 += 60;
    }
    while (!v15);
    uint64_t v16 = (long long *)(v14 + 60);
    uint64_t v17 = v14 - 60;
    while (v16 != v13)
    {
      if (!sub_B52088(a1, v17, (uint64_t)v16))
      {
        long long v18 = *v16;
        long long v19 = v16[1];
        long long v20 = v16[2];
        *(_OWORD *)(v17 + 101) = *(long long *)((char *)v16 + 41);
        *(_OWORD *)(v17 + 92) = v20;
        *(_OWORD *)(v17 + 76) = v19;
        *(_OWORD *)(v17 + 60) = v18;
        v17 += 60;
      }
      uint64_t v16 = (long long *)((char *)v16 + 60);
    }
    uint64_t v12 = v17 + 60;
    if (v12 != a2[1]) {
      goto LABEL_21;
    }
  }
}

void sub_B4EF90(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_B4EFA8(char **a1, _OWORD *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *a1;
    uint64_t v8 = (v5 - *a1) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      sub_2E00();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 60) {
        sub_188D718();
      }
      uint64_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[16 * v8];
    *(_OWORD *)uint64_t v13 = *a2;
    uint64_t v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *((void *)v5 - 2);
        v5 -= 16;
        uint64_t v15 = *(void *)(v5 + 5);
        *((void *)v13 - 2) = v14;
        v13 -= 16;
        *(void *)(v13 + 5) = v15;
      }
      while (v5 != v7);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[16 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *a2;
    uint64_t v6 = v5 + 16;
  }
  a1[1] = v6;
  return v6 - 16;
}

unint64_t sub_B4F0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (_DWORD *)sub_B4FBB0((void *)(a3 + 16), 0);
  uint64_t v6 = (void *)sub_A0D24C((void *)(a2 + 200), 0);
  uint64_t v7 = sub_A2AF48(v6, 0);
  unsigned int v9 = v5[2];
  uint64_t v8 = v5[3];
  int v11 = *(_DWORD *)(v7 + 4);
  int v10 = *(_DWORD *)(v7 + 8);
  if (v10 != v11)
  {
    int v12 = v5[1];
    if (v8 == 0x7FFFFFFF || v12 == 0x7FFFFFFF)
    {
      int v14 = v12 / -10;
      int v15 = v12 % 10;
      int v16 = 0x7FFFFFFF;
    }
    else
    {
      int v14 = v12 / -10;
      int v15 = v12 % 10;
      if (v12 < 0) {
        char v17 = -5;
      }
      else {
        char v17 = 5;
      }
      int v16 = v14 + v8 + (((-103 * (char)(v17 + v15)) >> 15) & 1) + ((-103 * (char)(v17 + v15)) >> 10);
    }
    unsigned int v18 = v14 + v9;
    if (v12 < 0) {
      char v19 = -5;
    }
    else {
      char v19 = 5;
    }
    unsigned int v20 = v18 + (((-103 * (char)(v19 + v15)) >> 15) & 1) + ((-103 * (char)(v19 + v15)) >> 10);
    int v21 = 10 * (v10 - v11);
    uint64_t v8 = 0x7FFFFFFFLL;
    if (v16 != 0x7FFFFFFF && v10 != 0x7FFFFFFF && v11 != 0x7FFFFFFF)
    {
      uint64_t v24 = (5 * (v10 - v11));
      uint64_t v25 = v24 << 33;
      LODWORD(v24) = 2 * v24;
      int v26 = (int)v24 / -10;
      int v27 = (int)v24 % 10;
      if (v25 < 0) {
        char v28 = -5;
      }
      else {
        char v28 = 5;
      }
      uint64_t v8 = v26 + v16 + (((-103 * (char)(v28 + v27)) >> 15) & 1) + ((-103 * (char)(v28 + v27)) >> 10);
    }
    if (v21 < 0) {
      char v29 = -5;
    }
    else {
      char v29 = 5;
    }
    int v30 = -103 * (char)(v29 + v21 % 10);
    unsigned int v9 = v20 + v21 / -10 + ((v30 >> 15) & 1) + (v30 >> 10);
  }
  uint64_t v31 = *(void *)(a3 + 16);
  for (uint64_t i = *(void *)(a3 + 24); v31 != i; v31 += 64)
  {
    if (*(_DWORD *)(v31 + 44) == -1) {
      break;
    }
  }
  return v9 | (unint64_t)(v8 << 32);
}

uint64_t sub_B4F318(void *a1, unint64_t a2)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v10 = &v15;
    }
    else {
      int v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    int v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 40 * a2;
}

void sub_B4F468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_B4F548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_WORD *)a4 = 0;
  *(unsigned char *)(a4 + 2) = 0;
  *(void *)(a4 + 4) = 0;
  *(void *)(a4 + 12) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a4 + 20) = 0x7FFFFFFF;
  *(_WORD *)(a4 + 24) = 0;
  *(void *)(a4 + 28) = 0x8000000080000000;
  *(_WORD *)(a4 + 36) = 0;
  *(void *)(a4 + 40) = 0x8000000080000000;
  *(_DWORD *)(a4 + 48) = 0x7FFFFFFF;
  *(_WORD *)(a4 + 52) = 0;
  *(void *)(a4 + 56) = 0x8000000080000000;
  *(_WORD *)(a4 + 64) = 0;
  *(void *)(a4 + 68) = 0x8000000080000000;
  *(_WORD *)(a4 + 76) = 0;
  *(void *)(a4 + 80) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a4 + 88) = -1;
  *(void *)(a4 + 96) = 0;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_DWORD *)(a4 + 104) = 0x7FFFFFFF;
  *(void *)(a4 + 112) = 0;
  *(void *)(a4 + 120) = 0;
  *(void *)(a4 + 128) = 0;
  *(_DWORD *)(a4 + 136) = 100;
  *(_DWORD *)(a4 + 144) = -1;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a4 + 152) = _Q1;
  *(_OWORD *)(a4 + 168) = _Q1;
  *(_OWORD *)(a4 + 184) = _Q1;
  *(_OWORD *)(a4 + 216) = 0u;
  *(_OWORD *)(a4 + 232) = 0u;
  *(_OWORD *)(a4 + 248) = 0u;
  *(_OWORD *)(a4 + 264) = 0u;
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v58 = (void ***)(a4 + 200);
  *(_OWORD *)(a4 + 280) = 0u;
  if (sub_C259C0(v12 + 3896) && *(void *)(v12 + 3944))
  {
    BOOL v13 = 1;
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 48);
    BOOL v13 = sub_C259D4(v14 + 3896) && *(void *)(v14 + 3960) != 0;
  }
  *(unsigned char *)(a4 + 1) = v13;
  uint64_t v15 = *(void *)(a1 + 48);
  if (sub_C259D4(v15 + 3896)) {
    int v16 = 2 * (*(void *)(v15 + 3960) != 0);
  }
  else {
    int v16 = 0;
  }
  *(_DWORD *)(a4 + 4) = v16;
  uint64_t v17 = *(void *)(a2 + 200);
  *(unsigned char *)(a4 + 9) = 1;
  int v59 = (void *)(a2 + 200);
  *(_DWORD *)(a4 + 12) = *(_DWORD *)(a2 + 12);
  unint64_t v18 = *(void *)(a4 + 208);
  if (v18 >= *(void *)(a4 + 216))
  {
    long long v19 = sub_B55260(v58, v17);
  }
  else
  {
    sub_9F6D1C(*(void **)(a4 + 208), v17);
    long long v19 = (char *)(v18 + 72);
    *(void *)(a4 + 208) = v18 + 72;
  }
  *(void *)(a4 + 208) = v19;
  uint64_t v20 = *(void *)(a3 + 24) - *(void *)(a3 + 16);
  if (v20)
  {
    uint64_t v21 = 0;
    uint64_t v56 = v20 >> 6;
    do
    {
      uint64_t v22 = *(void *)(a3 + 16);
      uint64_t v23 = (void *)sub_A0D24C(v59, (2 * v21) | 1);
      uint64_t v24 = (unsigned int *)sub_A2AF48(v23, *(unsigned int *)(v22 + (v21 << 6)));
      uint64_t v25 = (void *)sub_A0D24C(v59, 2 * v21 + 2);
      uint64_t v26 = sub_A2AF48(v25, *v24);
      uint64_t v27 = v22 + (v21 << 6);
      long long v93 = 0u;
      long long v94 = 0u;
      long long v92 = 0u;
      int v95 = 0x7FFFFFFF;
      unint64_t v97 = 0;
      uint64_t v98 = 0;
      unint64_t v96 = 0;
      char v99 = 1;
      unint64_t v100 = 0x8000000080000000;
      int v101 = 0;
      v83[1] = *(_DWORD *)(v27 + 4);
      uint64_t v28 = *(void *)(v27 + 8);
      __int16 v85 = *(_WORD *)(v27 + 16);
      uint64_t v84 = v28;
      uint64_t v29 = *(void *)(v27 + 20);
      __int16 v87 = *(_WORD *)(v27 + 28);
      uint64_t v86 = v29;
      v83[0] = 0;
      uint64_t v91 = *(void *)(v27 + 52);
      uint64_t v88 = *(void *)(v27 + 32);
      uint64_t v30 = *(void *)(v27 + 40);
      int v90 = *(_DWORD *)(v27 + 48);
      uint64_t v89 = v30;
      unint64_t v72 = 0;
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      uint64_t v77 = 0;
      uint64_t v78 = 0;
      uint64_t v76 = 0;
      char v79 = 1;
      unint64_t v80 = 0x8000000080000000;
      __int16 v81 = 0;
      char v82 = 0;
      char v75 = 0;
      uint64_t v31 = sub_A20D18((uint64_t *)&v72, (uint64_t)v83);
      int v32 = *(_DWORD *)(v26 + 4);
      int v33 = *(_DWORD *)(v26 + 8);
      uint64_t v73 = (char *)v31;
      v71[0] = *(_OWORD *)v26;
      *(_OWORD *)((char *)v71 + 12) = *(_OWORD *)(v26 + 12);
      DWORD1(v71[0]) = HIDWORD(v86);
      DWORD2(v71[0]) = v33 + HIDWORD(v86) - v32;
      unint64_t v60 = 0;
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v65 = 0;
      uint64_t v66 = 0;
      long long __p = 0;
      char v67 = 1;
      unint64_t v68 = 0x8000000080000000;
      __int16 v69 = 0;
      char v70 = 0;
      char v63 = 1;
      uint64_t v61 = sub_B3B734(&v60, v71);
      unint64_t v34 = *(void *)(a4 + 208);
      if (v34 >= *(void *)(a4 + 216))
      {
        int v35 = sub_A4CECC(v58, (uint64_t)&v72);
        *(void *)(a4 + 208) = v35;
        if ((unint64_t)v35 < *(void *)(a4 + 216))
        {
LABEL_32:
          sub_9F6D1C(v35, (uint64_t)&v60);
          *(void *)(a4 + 208) = v35 + 72;
          *(void *)(a4 + 208) = v35 + 72;
          char v36 = __p;
          if (!__p) {
            goto LABEL_20;
          }
LABEL_19:
          uint64_t v65 = v36;
          operator delete(v36);
          goto LABEL_20;
        }
      }
      else
      {
        sub_9F6D1C(*(void **)(a4 + 208), (uint64_t)&v72);
        int v35 = (char *)(v34 + 72);
        *(void *)(a4 + 208) = v35;
        *(void *)(a4 + 208) = v35;
        if ((unint64_t)v35 < *(void *)(a4 + 216)) {
          goto LABEL_32;
        }
      }
      *(void *)(a4 + 208) = sub_A4CECC(v58, (uint64_t)&v60);
      char v36 = __p;
      if (__p) {
        goto LABEL_19;
      }
LABEL_20:
      uint64_t v37 = (char *)v60;
      if (v60)
      {
        unint64_t v38 = v61;
        uint64_t v39 = v60;
        if (v61 != v60)
        {
          do
          {
            if (!*((_DWORD *)v38 - 2))
            {
              unint64_t v40 = (void *)*((void *)v38 - 6);
              if (v40)
              {
                *((void *)v38 - 5) = v40;
                operator delete(v40);
              }
              uint64_t v41 = (void *)*((void *)v38 - 10);
              if (v41)
              {
                *((void *)v38 - 9) = v41;
                operator delete(v41);
              }
              uint64_t v42 = (void *)*((void *)v38 - 13);
              if (v42)
              {
                *((void *)v38 - 12) = v42;
                operator delete(v42);
              }
            }
            v38 -= 168;
          }
          while (v38 != v37);
          uint64_t v39 = v60;
        }
        uint64_t v61 = v37;
        operator delete(v39);
      }
      if (v76)
      {
        uint64_t v77 = v76;
        operator delete(v76);
      }
      int v43 = (char *)v72;
      if (v72)
      {
        uint64_t v44 = v73;
        unsigned int v45 = v72;
        if (v73 != v72)
        {
          do
          {
            if (!*((_DWORD *)v44 - 2))
            {
              unsigned int v46 = (void *)*((void *)v44 - 6);
              if (v46)
              {
                *((void *)v44 - 5) = v46;
                operator delete(v46);
              }
              unsigned int v47 = (void *)*((void *)v44 - 10);
              if (v47)
              {
                *((void *)v44 - 9) = v47;
                operator delete(v47);
              }
              uint64_t v48 = (void *)*((void *)v44 - 13);
              if (v48)
              {
                *((void *)v44 - 12) = v48;
                operator delete(v48);
              }
            }
            v44 -= 168;
          }
          while (v44 != v43);
          unsigned int v45 = v72;
        }
        uint64_t v73 = v43;
        operator delete(v45);
      }
      if (v96)
      {
        unint64_t v97 = v96;
        operator delete(v96);
      }
      if (*((void *)&v93 + 1))
      {
        *(void *)&long long v94 = *((void *)&v93 + 1);
        operator delete(*((void **)&v93 + 1));
      }
      if ((void)v92)
      {
        *((void *)&v92 + 1) = v92;
        operator delete((void *)v92);
      }
      ++v21;
    }
    while (v21 != v56);
  }
  unsigned int v49 = **v58;
  uint64_t result = sub_A2AD08(v58, 1uLL);
  int v51 = *(_DWORD *)(*(void *)result + 4);
  int v52 = v51 / -10;
  int v53 = v51 % 10;
  if (v51 < 0) {
    char v54 = -5;
  }
  else {
    char v54 = 5;
  }
  unsigned int v55 = v52
      + *(_DWORD *)(*(void *)result + 12)
      + (((-103 * (char)(v54 + v53)) >> 15) & 1)
      + ((-103 * (char)(v54 + v53)) >> 10);
  v49[1] = v49[1] - v49[2] + v55;
  v49[2] = v55;
  return result;
}

void sub_B4FB04(_Unwind_Exception *a1)
{
  *(void *)(v1 + 208) = v2;
  sub_A1D608(v1);
  _Unwind_Resume(a1);
}

void sub_B4FB1C(_Unwind_Exception *a1)
{
  sub_A1D608(v1);
  _Unwind_Resume(a1);
}

void sub_B4FB30(_Unwind_Exception *a1)
{
  sub_A1D608(v1);
  _Unwind_Resume(a1);
}

void sub_B4FB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  *(void *)(v39 + 208) = v40;
  sub_A1D734(&a16);
  sub_A1D734(&a30);
  sub_B3994C(&a39);
  sub_A1D608(v39);
  _Unwind_Resume(a1);
}

void sub_B4FB88(_Unwind_Exception *a1)
{
  sub_A1D608(v1);
  _Unwind_Resume(a1);
}

void sub_B4FB9C(_Unwind_Exception *a1)
{
  sub_A1D608(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_B4FBB0(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 6);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v10 = &v15;
    }
    else {
      int v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + (a2 << 6);
}

void sub_B4FCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

char *sub_B4FDC0(char **a1, _OWORD *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    int v10 = *a1;
    unint64_t v11 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - *a1) >> 2);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x444444444444444) {
      sub_2E00();
    }
    unint64_t v13 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v4 - (void)v10) >> 2);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x222222222222222) {
      unint64_t v14 = 0x444444444444444;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 > 0x444444444444444) {
        sub_188D718();
      }
      std::string v15 = (char *)operator new(60 * v14);
    }
    else
    {
      std::string v15 = 0;
    }
    std::string v16 = &v15[60 * v11];
    long long v17 = a2[1];
    *(_OWORD *)std::string v16 = *a2;
    *((_OWORD *)v16 + 1) = v17;
    *((_OWORD *)v16 + 2) = a2[2];
    *(_OWORD *)(v16 + 44) = *(_OWORD *)((char *)a2 + 44);
    long long v9 = v16 + 60;
    if (v5 != v10)
    {
      do
      {
        long long v18 = *(_OWORD *)(v5 - 60);
        long long v19 = *(_OWORD *)(v5 - 44);
        long long v20 = *(_OWORD *)(v5 - 28);
        *(_OWORD *)(v16 - 19) = *(_OWORD *)(v5 - 19);
        *(_OWORD *)(v16 - 28) = v20;
        *(_OWORD *)(v16 - 44) = v19;
        *(_OWORD *)(v16 - 60) = v18;
        v16 -= 60;
        v5 -= 60;
      }
      while (v5 != v10);
      uint64_t v5 = *a1;
    }
    *a1 = v16;
    a1[1] = v9;
    a1[2] = &v15[60 * v14];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    long long v8 = a2[2];
    *(_OWORD *)(v5 + 44) = *(_OWORD *)((char *)a2 + 44);
    *((_OWORD *)v5 + 1) = v7;
    *((_OWORD *)v5 + 2) = v8;
    *(_OWORD *)uint64_t v5 = v6;
    long long v9 = v5 + 60;
  }
  a1[1] = v9;
  return v9 - 60;
}

BOOL sub_B4FF24(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, unint64_t a5, unsigned int a6, unsigned int a7)
{
  unsigned int v8 = a6;
  unsigned int v10 = a3;
  if (a3 <= a4 && a6 <= a7)
  {
    unint64_t v13 = (void *)(a1 + 4136);
    while (1)
    {
      unint64_t v14 = (int *)sub_A11094(v13, a2);
      std::string v15 = (unsigned __int16 *)((char *)v14 - *v14);
      if (*v15 >= 9u && (uint64_t v16 = v15[4]) != 0)
      {
        if ((*(unsigned char *)(sub_A10764((unsigned int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16)), v10) + 15) & 2) != 0) {
          goto LABEL_14;
        }
      }
      else if ((*(unsigned char *)(sub_A10764(0, v10) + 15) & 2) != 0)
      {
        goto LABEL_14;
      }
      long long v17 = (int *)sub_A11094(v13, a2);
      long long v18 = (unsigned __int16 *)((char *)v17 - *v17);
      if (*v18 >= 9u && (uint64_t v19 = v18[4]) != 0)
      {
        if (*(unsigned char *)(sub_A10764((unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19)), v10) + 15)) {
          goto LABEL_14;
        }
LABEL_5:
        if (++v10 > a4) {
          break;
        }
      }
      else
      {
        if ((*(unsigned char *)(sub_A10764(0, v10) + 15) & 1) == 0) {
          goto LABEL_5;
        }
LABEL_14:
        long long v20 = (int *)sub_A11094(v13, a5);
        uint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
        if (*v21 >= 9u && (uint64_t v22 = v21[4]) != 0)
        {
          if ((*(unsigned char *)(sub_A10764((unsigned int *)((char *)v20 + v22 + *(unsigned int *)((char *)v20 + v22)), v8)
                         + 15) & 2) != 0)
            goto LABEL_24;
        }
        else if ((*(unsigned char *)(sub_A10764(0, v8) + 15) & 2) != 0)
        {
          goto LABEL_24;
        }
        uint64_t v23 = (int *)sub_A11094(v13, a5);
        uint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
        if (*v24 >= 9u && (uint64_t v25 = v24[4]) != 0)
        {
          if ((*(unsigned char *)(sub_A10764((unsigned int *)((char *)v23 + v25 + *(unsigned int *)((char *)v23 + v25)), v8)
                         + 15) & 1) == 0)
            goto LABEL_34;
        }
        else if ((*(unsigned char *)(sub_A10764(0, v8) + 15) & 1) == 0)
        {
          goto LABEL_34;
        }
LABEL_24:
        uint64_t v26 = (int *)sub_A11094(v13, a2);
        uint64_t v27 = (unsigned __int16 *)((char *)v26 - *v26);
        if (*v27 >= 9u && (uint64_t v28 = v27[4]) != 0) {
          uint64_t v29 = (unsigned int *)((char *)v26 + v28 + *(unsigned int *)((char *)v26 + v28));
        }
        else {
          uint64_t v29 = 0;
        }
        uint64_t v30 = *(void *)sub_A10764(v29, v10);
        uint64_t v31 = (int *)sub_A11094(v13, a5);
        int v32 = (unsigned __int16 *)((char *)v31 - *v31);
        if (*v32 >= 9u && (uint64_t v33 = v32[4]) != 0)
        {
          if (v30 != *(void *)sub_A10764((unsigned int *)((char *)v31 + v33 + *(unsigned int *)((char *)v31 + v33)), v8))return 0; {
        }
          }
        else if (v30 != *(void *)sub_A10764(0, v8))
        {
          return 0;
        }
        ++v10;
LABEL_34:
        ++v8;
        if (v10 > a4 || v8 > a7) {
          break;
        }
      }
    }
  }
  return a4 + 1 == v10 && a7 + 1 == v8;
}

void sub_B501FC(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, signed int a5@<W4>, int a6@<W5>, int a7@<W6>, unsigned int a8@<W7>, uint64_t a9@<X8>, unsigned int a10)
{
  long long v34 = 0uLL;
  uint64_t v35 = 0;
  *(void *)(a2 + 32) = *(void *)(a2 + 24) + 16 * a3;
  if (*(unsigned char *)(a2 + 96)) {
    int v19 = sub_A1F39C(a1, a2, a5, 2);
  }
  else {
    int v19 = sub_A1F8B4(a2, a5, 1);
  }
  if (v19)
  {
    long long v20 = *(_OWORD *)(a2 + 80);
    v31[4] = *(_OWORD *)(a2 + 64);
    v31[5] = v20;
    v31[6] = *(_OWORD *)(a2 + 96);
    long long v21 = *(_OWORD *)(a2 + 16);
    v31[0] = *(_OWORD *)a2;
    v31[1] = v21;
    long long v22 = *(_OWORD *)(a2 + 48);
    v31[2] = *(_OWORD *)(a2 + 32);
    v31[3] = v22;
    if (a7 < 0) {
      char v23 = -5;
    }
    else {
      char v23 = 5;
    }
    sub_B507E4(a1, (uint64_t)v31, a3, a4, a7 / 10 + a5 + (((103 * (char)(v23 + a7 % 10)) >> 15) & 1) + ((103 * (char)(v23 + a7 % 10)) >> 10), a10, (uint64_t)&v32);
    sub_B50544((uint64_t)&v34, *((char **)&v34 + 1), v32, v33, 0xEEEEEEEEEEEEEEEFLL * ((v33 - v32) >> 2));
    if (v32)
    {
      uint64_t v33 = v32;
      operator delete(v32);
    }
    sub_A20748(a2, 0);
    goto LABEL_15;
  }
  if (*(unsigned char *)(a2 + 96)) {
    int v24 = sub_A2B620(a1, a2, a5, 2);
  }
  else {
    int v24 = sub_A2BC00(a2, a5, 1);
  }
  if (v24)
  {
LABEL_15:
    long long v25 = *(_OWORD *)(a2 + 80);
    v30[4] = *(_OWORD *)(a2 + 64);
    v30[5] = v25;
    v30[6] = *(_OWORD *)(a2 + 96);
    long long v26 = *(_OWORD *)(a2 + 16);
    v30[0] = *(_OWORD *)a2;
    v30[1] = v26;
    long long v27 = *(_OWORD *)(a2 + 48);
    void v30[2] = *(_OWORD *)(a2 + 32);
    v30[3] = v27;
    if (a6 < 0) {
      char v28 = -5;
    }
    else {
      char v28 = 5;
    }
    sub_B50B90(a1, (uint64_t)v30, a3, a4, a6 / -10+ a5+ (((-103 * (char)(v28 + a6 % 10)) >> 15) & 1)+ ((-103 * (char)(v28 + a6 % 10)) >> 10), a8, (uint64_t)&v32);
    sub_B50544((uint64_t)&v34, *((char **)&v34 + 1), v32, v33, 0xEEEEEEEEEEEEEEEFLL * ((v33 - v32) >> 2));
    if (v32)
    {
      uint64_t v33 = v32;
      operator delete(v32);
    }
    *(_OWORD *)a9 = v34;
    *(void *)(a9 + 16) = v35;
    return;
  }
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0;
  if ((void)v34)
  {
    *((void *)&v34 + 1) = v34;
    operator delete((void *)v34);
  }
}

void sub_B504EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(void *)(v1 - 128) = v3;
    operator delete(v3);
    unint64_t v4 = *(void **)(v1 - 112);
    if (!v4) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v4 = *(void **)(v1 - 112);
    if (!v4) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 - 104) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

char *sub_B50544(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  long long v7 = __src;
  unint64_t v10 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v9 - v10) >> 2)) < a5)
  {
    unint64_t v11 = *(char **)a1;
    unint64_t v12 = a5 - 0x1111111111111111 * ((uint64_t)(v10 - *(void *)a1) >> 2);
    if (v12 > 0x444444444444444) {
      sub_2E00();
    }
    unint64_t v13 = 0xEEEEEEEEEEEEEEEFLL * ((v9 - (uint64_t)v11) >> 2);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x222222222222222) {
      unint64_t v14 = 0x444444444444444;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 > 0x444444444444444) {
        sub_188D718();
      }
      std::string v15 = (char *)operator new(60 * v14);
    }
    else
    {
      std::string v15 = 0;
    }
    long long v26 = &v15[4 * ((v5 - v11) >> 2)];
    uint64_t v27 = 60 * a5;
    char v28 = &v26[60 * a5];
    uint64_t v29 = v26;
    do
    {
      long long v30 = *(_OWORD *)v7;
      long long v31 = *((_OWORD *)v7 + 1);
      long long v32 = *((_OWORD *)v7 + 2);
      *(_OWORD *)((char *)v29 + 44) = *(_OWORD *)(v7 + 44);
      v29[1] = v31;
      v29[2] = v32;
      *uint64_t v29 = v30;
      uint64_t v29 = (_OWORD *)((char *)v29 + 60);
      v7 += 60;
      v27 -= 60;
    }
    while (v27);
    uint64_t v33 = *(char **)a1;
    long long v34 = &v15[4 * ((v5 - v11) >> 2)];
    if (*(char **)a1 != v5)
    {
      uint64_t v35 = v5;
      long long v34 = &v15[4 * ((v5 - v11) >> 2)];
      do
      {
        long long v36 = *(_OWORD *)(v35 - 60);
        long long v37 = *(_OWORD *)(v35 - 44);
        long long v38 = *(_OWORD *)(v35 - 28);
        *(_OWORD *)(v34 - 19) = *(_OWORD *)(v35 - 19);
        *(_OWORD *)(v34 - 28) = v38;
        *(_OWORD *)(v34 - 44) = v37;
        *(_OWORD *)(v34 - 60) = v36;
        v34 -= 60;
        v35 -= 60;
      }
      while (v35 != v33);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    uint64_t v39 = &v15[60 * v14];
    unint64_t v40 = v10 - (void)v5;
    if (v40) {
      memmove(v28, v5, v40 - 3);
    }
    uint64_t v41 = *(char **)a1;
    *(void *)a1 = v34;
    *(void *)(a1 + 8) = &v28[v40];
    *(void *)(a1 + 16) = v39;
    if (v41) {
      operator delete(v41);
    }
    return v26;
  }
  uint64_t v16 = v10 - (void)__dst;
  if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v10 - (void)__dst) >> 2)) >= a5)
  {
    long long v17 = &__src[60 * a5];
    int v19 = *(_OWORD **)(a1 + 8);
LABEL_18:
    long long v20 = &v5[60 * a5];
    long long v21 = (_OWORD *)((char *)v19 - 60 * a5);
    long long v22 = v19;
    if ((unint64_t)v21 < v10)
    {
      long long v22 = v19;
      do
      {
        long long v23 = *v21;
        long long v24 = v21[1];
        long long v25 = v21[2];
        *(_OWORD *)((char *)v22 + 44) = *(long long *)((char *)v21 + 44);
        v22[1] = v24;
        v22[2] = v25;
        *long long v22 = v23;
        long long v22 = (_OWORD *)((char *)v22 + 60);
        long long v21 = (long long *)((char *)v21 + 60);
      }
      while ((unint64_t)v21 < v10);
    }
    *(void *)(a1 + 8) = v22;
    if (v19 != (_OWORD *)v20) {
      memmove(v20, v5, (char *)v19 - v20 - 3);
    }
    if (v17 != v7) {
      memmove(v5, v7, v17 - v7 - 3);
    }
    return v5;
  }
  long long v17 = &__src[4 * ((uint64_t)(v10 - (void)__dst) >> 2)];
  int64_t v18 = a4 - v17;
  if (a4 != v17) {
    memmove(*(void **)(a1 + 8), &__src[4 * ((uint64_t)(v10 - (void)__dst) >> 2)], v18 - 3);
  }
  int v19 = (_OWORD *)(v10 + v18);
  *(void *)(a1 + 8) = v10 + v18;
  if (v16 >= 1) {
    goto LABEL_18;
  }
  return v5;
}

uint64_t sub_B507E4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, int a5@<W4>, unsigned int a6@<W5>, uint64_t a7@<X8>)
{
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  unint64_t v8 = *(void *)(a2 + 56);
  unint64_t v7 = *(void *)(a2 + 64);
  if (v7 >= v8)
  {
    unsigned int v11 = 0;
    unint64_t v12 = *(void *)(a2 + 88);
    uint64_t v13 = a2 + 104;
    unint64_t v14 = (void *)(result + 4136);
    unsigned int v49 = (uint64_t *)(result + 4184);
    int v44 = a5;
    do
    {
      if (v7 >= *(void *)(a2 + 72)) {
        break;
      }
      std::string v15 = (_DWORD *)(*(unsigned char *)(a2 + 96) ? v13 : v7);
      uint64_t v16 = (unsigned int *)(*(void *)(a2 + 16)
                           + *(unsigned __int16 *)(*(void *)(a2 + 16) - **(int **)(a2 + 16) + 6));
      if ((int)(*(unsigned int *)((char *)&v16[2 * *(_DWORD *)(v7 + 4)
                                              + 2
                                              + 2 * ((*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4)]
                                 + *v16)
               + *v15) > a5
        && v11 >= a6)
      {
        break;
      }
      if (*(unsigned char *)(a2 + 96))
      {
        uint64_t v19 = *(unsigned int *)(a2 + 100);
        int v18 = *(_DWORD *)(a2 + 104);
      }
      else
      {
        int v18 = 0x7FFFFFFF;
        uint64_t v19 = 0xFFFFFFFFLL;
      }
      *(void *)&long long v51 = 0x8000000080000000;
      DWORD2(v51) = 0x7FFFFFFF;
      WORD6(v51) = 0;
      unint64_t v52 = 0x8000000080000000;
      __int16 v53 = 0;
      long long v54 = xmmword_20EB6B0;
      unint64_t v55 = 0xFFFFFFFF7FFFFFFFLL;
      int v56 = -1;
      char v57 = 1;
      long long v20 = (int *)sub_A11094(v14, *(void *)(a2 + 88));
      long long v21 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v21 < 9u) {
        goto LABEL_17;
      }
      uint64_t v22 = v21[4];
      if (v22) {
        long long v23 = (unsigned int *)((char *)v20 + v22 + *(unsigned int *)((char *)v20 + v22));
      }
      else {
LABEL_17:
      }
        long long v23 = 0;
      LODWORD(v51) = 10 * *(_DWORD *)(sub_A10764(v23, a3) + 8);
      uint64_t v24 = -1431655765 * ((uint64_t)(v7 - v8) >> 2);
      uint64_t v58 = sub_A104E8(v14, v12, a3, v24);
      int v59 = v25;
      long long v26 = (int *)sub_A11094(v14, v12);
      uint64_t v27 = (unsigned __int16 *)((char *)v26 - *v26);
      if (*v27 >= 9u && (uint64_t v28 = v27[4]) != 0) {
        uint64_t v29 = (unsigned int *)((char *)v26 + v28 + *(unsigned int *)((char *)v26 + v28));
      }
      else {
        uint64_t v29 = 0;
      }
      unsigned int v30 = *(unsigned __int16 *)(sub_A10764(v29, a3) + 12);
      int v31 = v19 == 0xFFFFFFFFLL ? 0x7FFFFFFF : v18;
      *(void *)((char *)&v51 + 4) = sub_A0FAA0(v49, (unsigned int *)&v58, v30, v31);
      WORD6(v51) = v32;
      uint64_t v58 = sub_A104E8(v14, v12, a4, v24);
      int v59 = v33;
      long long v34 = (int *)sub_A11094(v14, v12);
      uint64_t v35 = (unsigned __int16 *)((char *)v34 - *v34);
      if (*v35 >= 9u && (uint64_t v36 = v35[4]) != 0) {
        long long v37 = (unsigned int *)((char *)v34 + v36 + *(unsigned int *)((char *)v34 + v36));
      }
      else {
        long long v37 = 0;
      }
      uint64_t v38 = sub_A10764(v37, a4);
      unint64_t v52 = sub_A0FDF4(v49, (unsigned int *)&v58, *(unsigned __int16 *)(v38 + 12), v31);
      __int16 v53 = v39;
      int v56 = a4;
      *(void *)&long long v54 = v12;
      *((void *)&v54 + 1) = v24 | (v19 << 32);
      unint64_t v55 = __PAIR64__(a3, v18);
      sub_B4FDC0((char **)a7, &v51);
      unint64_t v40 = *(unsigned char *)(a2 + 96) ? (int *)v13 : *(int **)(a2 + 64);
      int v41 = *v40;
      uint64_t v42 = (unsigned int *)(*(void *)(a2 + 16)
                           + *(unsigned __int16 *)(*(void *)(a2 + 16) - **(int **)(a2 + 16) + 6));
      int v43 = *(unsigned int *)((char *)&v42[2 * *(_DWORD *)(*(void *)(a2 + 64) + 4)
                                         + 2
                                         + 2 * ((*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4)]
                            + *v42);
      uint64_t result = sub_A2020C(a2, 0);
      a5 = v44;
      if (v43 + v41 > v44) {
        ++v11;
      }
      unint64_t v8 = *(void *)(a2 + 56);
      unint64_t v7 = *(void *)(a2 + 64);
    }
    while (v7 >= v8);
  }
  return result;
}

void sub_B50B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  long long v17 = *(void **)a16;
  if (*(void *)a16)
  {
    *(void *)(a16 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B50B90@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, int a5@<W4>, unsigned int a6@<W5>, uint64_t a7@<X8>)
{
  *(void *)a7 = 0;
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  unint64_t v8 = *(void *)(a2 + 56);
  unint64_t v7 = *(void *)(a2 + 64);
  if (v7 >= v8)
  {
    unsigned int v11 = 0;
    unint64_t v12 = *(void *)(a2 + 88);
    uint64_t v13 = a2 + 104;
    unint64_t v14 = (void *)(result + 4136);
    unsigned int v49 = (uint64_t *)(result + 4184);
    int v44 = a5;
    do
    {
      if (v7 >= *(void *)(a2 + 72)) {
        break;
      }
      std::string v15 = (_DWORD *)(*(unsigned char *)(a2 + 96) ? v13 : v7);
      uint64_t v16 = (unsigned int *)(*(void *)(a2 + 16)
                           + *(unsigned __int16 *)(*(void *)(a2 + 16) - **(int **)(a2 + 16) + 6));
      if ((int)(*(unsigned int *)((char *)&v16[2 * *(_DWORD *)(v7 + 4)
                                              + 2
                                              + 2 * ((*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4)]
                                 + *v16)
               + *v15) < a5
        && v11 >= a6)
      {
        break;
      }
      if (*(unsigned char *)(a2 + 96))
      {
        uint64_t v19 = *(unsigned int *)(a2 + 100);
        int v18 = *(_DWORD *)(a2 + 104);
      }
      else
      {
        int v18 = 0x7FFFFFFF;
        uint64_t v19 = 0xFFFFFFFFLL;
      }
      *(void *)&long long v51 = 0x8000000080000000;
      DWORD2(v51) = 0x7FFFFFFF;
      WORD6(v51) = 0;
      unint64_t v52 = 0x8000000080000000;
      __int16 v53 = 0;
      long long v54 = xmmword_20EB6B0;
      unint64_t v55 = 0xFFFFFFFF7FFFFFFFLL;
      int v56 = -1;
      char v57 = 1;
      long long v20 = (int *)sub_A11094(v14, *(void *)(a2 + 88));
      long long v21 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v21 < 9u) {
        goto LABEL_17;
      }
      uint64_t v22 = v21[4];
      if (v22) {
        long long v23 = (unsigned int *)((char *)v20 + v22 + *(unsigned int *)((char *)v20 + v22));
      }
      else {
LABEL_17:
      }
        long long v23 = 0;
      LODWORD(v51) = 10 * *(_DWORD *)(sub_A10764(v23, a3) + 8);
      uint64_t v24 = -1431655765 * ((uint64_t)(v7 - v8) >> 2);
      uint64_t v58 = sub_A104E8(v14, v12, a3, v24);
      int v59 = v25;
      long long v26 = (int *)sub_A11094(v14, v12);
      uint64_t v27 = (unsigned __int16 *)((char *)v26 - *v26);
      if (*v27 >= 9u && (uint64_t v28 = v27[4]) != 0) {
        uint64_t v29 = (unsigned int *)((char *)v26 + v28 + *(unsigned int *)((char *)v26 + v28));
      }
      else {
        uint64_t v29 = 0;
      }
      unsigned int v30 = *(unsigned __int16 *)(sub_A10764(v29, a3) + 12);
      int v31 = v19 == 0xFFFFFFFFLL ? 0x7FFFFFFF : v18;
      *(void *)((char *)&v51 + 4) = sub_A0FAA0(v49, (unsigned int *)&v58, v30, v31);
      WORD6(v51) = v32;
      uint64_t v58 = sub_A104E8(v14, v12, a4, v24);
      int v59 = v33;
      long long v34 = (int *)sub_A11094(v14, v12);
      uint64_t v35 = (unsigned __int16 *)((char *)v34 - *v34);
      if (*v35 >= 9u && (uint64_t v36 = v35[4]) != 0) {
        long long v37 = (unsigned int *)((char *)v34 + v36 + *(unsigned int *)((char *)v34 + v36));
      }
      else {
        long long v37 = 0;
      }
      uint64_t v38 = sub_A10764(v37, a4);
      unint64_t v52 = sub_A0FDF4(v49, (unsigned int *)&v58, *(unsigned __int16 *)(v38 + 12), v31);
      __int16 v53 = v39;
      int v56 = a4;
      *(void *)&long long v54 = v12;
      *((void *)&v54 + 1) = v24 | (v19 << 32);
      unint64_t v55 = __PAIR64__(a3, v18);
      sub_B4FDC0((char **)a7, &v51);
      unint64_t v40 = *(unsigned char *)(a2 + 96) ? (int *)v13 : *(int **)(a2 + 64);
      int v41 = *v40;
      uint64_t v42 = (unsigned int *)(*(void *)(a2 + 16)
                           + *(unsigned __int16 *)(*(void *)(a2 + 16) - **(int **)(a2 + 16) + 6));
      int v43 = *(unsigned int *)((char *)&v42[2 * *(_DWORD *)(*(void *)(a2 + 64) + 4)
                                         + 2
                                         + 2 * ((*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4)]
                            + *v42);
      uint64_t result = sub_A20748(a2, 0);
      a5 = v44;
      if (v43 + v41 < v44) {
        ++v11;
      }
      unint64_t v8 = *(void *)(a2 + 56);
      unint64_t v7 = *(void *)(a2 + 64);
    }
    while (v7 >= v8);
  }
  return result;
}

void sub_B50F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  long long v17 = *(void **)a16;
  if (*(void *)a16)
  {
    *(void *)(a16 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

double sub_B50F3C(uint64_t a1, int *a2, uint64_t a3, unint64_t a4, _OWORD *a5, uint64_t a6)
{
  if (a4 < 2) {
    return *(double *)&v14;
  }
  unint64_t v7 = (long long *)a1;
  if (a4 == 2)
  {
    int v8 = *(a2 - 13);
    if (v8 == 0x7FFFFFFF) {
      int v8 = *(a2 - 14);
    }
    int v9 = *(_DWORD *)(a1 + 8);
    if (v9 == 0x7FFFFFFF) {
      int v9 = *(_DWORD *)(a1 + 4);
    }
    if (v8 == v9)
    {
      int v10 = *(a2 - 10);
      if (v10 == 0x7FFFFFFF) {
        int v10 = *(a2 - 11);
      }
      if (*(_DWORD *)(a1 + 20) == 0x7FFFFFFF) {
        int v11 = *(_DWORD *)(a1 + 16);
      }
      else {
        int v11 = *(_DWORD *)(a1 + 20);
      }
      if (v10 <= v11) {
        return *(double *)&v14;
      }
    }
    else if (v8 >= v9)
    {
      return *(double *)&v14;
    }
    std::string v15 = (long long *)(a2 - 15);
    *(_OWORD *)unsigned int v45 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)&v45[12] = *(_OWORD *)(a1 + 44);
    long long v16 = *(_OWORD *)a1;
    long long v14 = *(_OWORD *)(a1 + 16);
    long long v18 = *(_OWORD *)(a2 - 11);
    long long v17 = *(_OWORD *)(a2 - 7);
    long long v19 = *(_OWORD *)(a2 - 15);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 - 19);
    *(_OWORD *)(a1 + 16) = v18;
    *(_OWORD *)(a1 + 32) = v17;
    *(_OWORD *)a1 = v19;
    long long *v15 = v16;
    v15[1] = v14;
    void v15[2] = *(_OWORD *)v45;
    *(void *)&long long v14 = *(void *)&v45[9];
    *(long long *)((char *)v15 + 41) = *(_OWORD *)&v45[9];
    return *(double *)&v14;
  }
  if ((uint64_t)a4 <= 128)
  {
    sub_B51260((long long *)a1, a2);
    return *(double *)&v14;
  }
  long long v21 = a5;
  unint64_t v22 = a4 >> 1;
  long long v23 = (char *)(a1 + 60 * (a4 >> 1));
  unint64_t v24 = a4 >> 1;
  if ((uint64_t)a4 > a6)
  {
    sub_B50F3C(a1, v23, a3, v24, a5, a6);
    sub_B50F3C((char *)v7 + 60 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v21, a6);
    *(void *)&long long v14 = sub_B5182C(v7, (char *)v7 + 60 * (a4 >> 1), (long long *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)v21, a6).n128_u64[0];
    return *(double *)&v14;
  }
  sub_B51404(a1, v23, a3, v24, a5);
  int v25 = (_OWORD *)((char *)v21 + 60 * v22);
  sub_B51404((uint64_t)v7 + 60 * (a4 >> 1), (char *)a2, a3, a4 - (a4 >> 1), v25);
  long long v26 = (_OWORD *)((char *)v21 + 60 * a4);
  uint64_t v27 = v25;
  while (v27 != v26)
  {
    int v30 = *((_DWORD *)v27 + 2);
    if (v30 == 0x7FFFFFFF) {
      int v30 = *((_DWORD *)v27 + 1);
    }
    int v31 = *((_DWORD *)v21 + 2);
    if (v31 == 0x7FFFFFFF) {
      int v31 = *((_DWORD *)v21 + 1);
    }
    if (v30 == v31)
    {
      int v32 = *((_DWORD *)v27 + 5);
      if (v32 == 0x7FFFFFFF) {
        int v32 = *((_DWORD *)v27 + 4);
      }
      int v33 = *((_DWORD *)v21 + 5);
      if (v33 == 0x7FFFFFFF) {
        int v33 = *((_DWORD *)v21 + 4);
      }
      if (v32 <= v33) {
        goto LABEL_41;
      }
LABEL_27:
      long long v14 = *v27;
      long long v28 = v27[1];
      long long v29 = v27[2];
      *(long long *)((char *)v7 + 41) = *(_OWORD *)((char *)v27 + 41);
      v7[1] = v28;
      v7[2] = v29;
      long long *v7 = v14;
      unint64_t v7 = (long long *)((char *)v7 + 60);
      uint64_t v27 = (_OWORD *)((char *)v27 + 60);
      if (v21 == v25) {
        goto LABEL_42;
      }
    }
    else
    {
      if (v30 < v31) {
        goto LABEL_27;
      }
LABEL_41:
      long long v14 = *v21;
      long long v34 = v21[1];
      long long v35 = v21[2];
      *(long long *)((char *)v7 + 41) = *(_OWORD *)((char *)v21 + 41);
      v7[1] = v34;
      v7[2] = v35;
      long long *v7 = v14;
      unint64_t v7 = (long long *)((char *)v7 + 60);
      long long v21 = (_OWORD *)((char *)v21 + 60);
      if (v21 == v25)
      {
LABEL_42:
        if (v27 != v26)
        {
          uint64_t v36 = 0;
          do
          {
            long long v37 = (long long *)((char *)v7 + v36);
            long long v14 = *(_OWORD *)((char *)v27 + v36);
            long long v38 = *(_OWORD *)((char *)v27 + v36 + 16);
            long long v39 = *(_OWORD *)((char *)v27 + v36 + 32);
            *(long long *)((char *)v37 + 41) = *(_OWORD *)((char *)v27 + v36 + 41);
            v37[1] = v38;
            uint64_t v37[2] = v39;
            long long *v37 = v14;
            v36 += 60;
          }
          while ((_OWORD *)((char *)v27 + v36) != v26);
        }
        return *(double *)&v14;
      }
    }
  }
  if (v21 != v25)
  {
    uint64_t v40 = 0;
    do
    {
      int v41 = (long long *)((char *)v7 + v40);
      long long v14 = *(_OWORD *)((char *)v21 + v40);
      long long v42 = *(_OWORD *)((char *)v21 + v40 + 16);
      long long v43 = *(_OWORD *)((char *)v21 + v40 + 32);
      *(long long *)((char *)v41 + 41) = *(_OWORD *)((char *)v21 + v40 + 41);
      v41[1] = v42;
      void v41[2] = v43;
      *int v41 = v14;
      v40 += 60;
    }
    while ((_OWORD *)((char *)v21 + v40) != v25);
  }
  return *(double *)&v14;
}

long long *sub_B51260(long long *result, int *a2)
{
  if (result != (long long *)a2)
  {
    uint64_t v2 = (long long *)((char *)result + 60);
    if ((int *)((char *)result + 60) != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      do
      {
        uint64_t v5 = v4;
        unint64_t v4 = v2;
        int v7 = *((_DWORD *)v5 + 16);
        int v6 = *((_DWORD *)v5 + 17);
        if (v6 == 0x7FFFFFFF) {
          int v8 = *((_DWORD *)v5 + 16);
        }
        else {
          int v8 = *((_DWORD *)v5 + 17);
        }
        int v9 = *((_DWORD *)v5 + 2);
        if (v9 == 0x7FFFFFFF) {
          int v9 = *((_DWORD *)v5 + 1);
        }
        if (v8 == v9)
        {
          int v11 = *((_DWORD *)v5 + 19);
          int v10 = *((_DWORD *)v5 + 20);
          if (v10 == 0x7FFFFFFF) {
            int v12 = *((_DWORD *)v5 + 19);
          }
          else {
            int v12 = *((_DWORD *)v5 + 20);
          }
          int v13 = *((_DWORD *)v5 + 5);
          if (v13 == 0x7FFFFFFF) {
            int v13 = *((_DWORD *)v5 + 4);
          }
          if (v12 <= v13) {
            goto LABEL_6;
          }
        }
        else
        {
          if (v8 >= v9) {
            goto LABEL_6;
          }
          int v11 = *((_DWORD *)v5 + 19);
          int v10 = *((_DWORD *)v5 + 20);
        }
        int v14 = *(_DWORD *)v4;
        int v15 = *((_DWORD *)v5 + 18);
        int v27 = *((_DWORD *)v5 + 29);
        long long v25 = *(long long *)((char *)v5 + 84);
        long long v26 = *(long long *)((char *)v5 + 100);
        if (v10 == 0x7FFFFFFF) {
          int v16 = v11;
        }
        else {
          int v16 = v10;
        }
        long long v17 = *(long long *)((char *)v5 + 41);
        long long v18 = v5[2];
        long long v19 = *v5;
        v4[1] = v5[1];
        v4[2] = v18;
        *(long long *)((char *)v4 + 41) = v17;
        long long *v4 = v19;
        if (v5 == result)
        {
LABEL_4:
          uint64_t v5 = result;
          goto LABEL_5;
        }
        uint64_t v20 = v3;
        while (1)
        {
          unint64_t v22 = (long long *)((char *)result + v20);
          int v23 = *(_DWORD *)((char *)result + v20 - 52);
          if (v23 == 0x7FFFFFFF) {
            int v23 = *(_DWORD *)((char *)result + v20 - 56);
          }
          if (v8 != v23) {
            break;
          }
          int v24 = *((_DWORD *)v22 - 10);
          if (v24 == 0x7FFFFFFF) {
            int v24 = *((_DWORD *)v22 - 11);
          }
          if (v16 <= v24) {
            goto LABEL_5;
          }
LABEL_29:
          uint64_t v5 = (long long *)((char *)v5 - 60);
          long long v21 = *(_OWORD *)((char *)v22 - 44);
          *unint64_t v22 = *(_OWORD *)((char *)v22 - 60);
          v22[1] = v21;
          v22[2] = *(_OWORD *)((char *)v22 - 28);
          *(_OWORD *)((char *)v22 + 41) = *(_OWORD *)((char *)v22 - 19);
          v20 -= 60;
          if (!v20) {
            goto LABEL_4;
          }
        }
        if (v8 < v23) {
          goto LABEL_29;
        }
        uint64_t v5 = (long long *)((char *)result + v20);
LABEL_5:
        *(_DWORD *)uint64_t v5 = v14;
        *((_DWORD *)v5 + 1) = v7;
        *((_DWORD *)v5 + 2) = v6;
        *((_DWORD *)v5 + 3) = v15;
        *((_DWORD *)v5 + 4) = v11;
        *((_DWORD *)v5 + 5) = v10;
        *(long long *)((char *)v5 + 24) = v25;
        *(long long *)((char *)v5 + 40) = v26;
        *((unsigned char *)v5 + 56) = v27;
LABEL_6:
        uint64_t v2 = (long long *)((char *)v4 + 60);
        v3 += 60;
      }
      while ((int *)((char *)v4 + 60) != a2);
    }
  }
  return result;
}

uint64_t sub_B51404(uint64_t result, char *a2, uint64_t a3, unint64_t a4, _OWORD *a5)
{
  if (!a4) {
    return result;
  }
  uint64_t v5 = a5;
  int v8 = (_OWORD *)result;
  if (a4 == 2)
  {
    int v12 = (long long *)(a2 - 60);
    int v13 = *((_DWORD *)a2 - 13);
    if (v13 == 0x7FFFFFFF) {
      int v13 = *((_DWORD *)a2 - 14);
    }
    int v14 = *(_DWORD *)(result + 8);
    if (v14 == 0x7FFFFFFF) {
      int v14 = *(_DWORD *)(result + 4);
    }
    if (v13 == v14)
    {
      int v15 = *((_DWORD *)a2 - 10);
      if (v15 == 0x7FFFFFFF) {
        int v15 = *((_DWORD *)a2 - 11);
      }
      if (*(_DWORD *)(result + 20) == 0x7FFFFFFF) {
        int v16 = *(_DWORD *)(result + 16);
      }
      else {
        int v16 = *(_DWORD *)(result + 20);
      }
      if (v15 <= v16) {
        goto LABEL_17;
      }
    }
    else if (v13 >= v14)
    {
LABEL_17:
      long long v17 = *(_OWORD *)result;
      long long v18 = *(_OWORD *)(result + 16);
      long long v19 = *(_OWORD *)(result + 32);
      *(_OWORD *)((char *)a5 + 44) = *(_OWORD *)(result + 44);
      a5[1] = v18;
      a5[2] = v19;
      *a5 = v17;
      long long v20 = *v12;
      long long v21 = *(_OWORD *)(a2 - 44);
      long long v22 = *(_OWORD *)(a2 - 28);
      long long v23 = *((_OWORD *)a2 - 1);
LABEL_55:
      *(_OWORD *)((char *)a5 + 104) = v23;
      *(_OWORD *)((char *)a5 + 92) = v22;
      *(_OWORD *)((char *)a5 + 76) = v21;
      *(_OWORD *)((char *)a5 + 60) = v20;
      return result;
    }
    long long v51 = *v12;
    long long v52 = *(_OWORD *)(a2 - 44);
    long long v53 = *(_OWORD *)(a2 - 28);
    *(_OWORD *)((char *)a5 + 44) = *((_OWORD *)a2 - 1);
    a5[1] = v52;
    a5[2] = v53;
    *a5 = v51;
    long long v20 = *(_OWORD *)result;
    long long v21 = *(_OWORD *)(result + 16);
    long long v22 = *(_OWORD *)(result + 32);
    long long v23 = *(_OWORD *)(result + 44);
    goto LABEL_55;
  }
  if (a4 == 1)
  {
    long long v9 = *(_OWORD *)result;
    long long v10 = *(_OWORD *)(result + 16);
    long long v11 = *(_OWORD *)(result + 32);
    *(_OWORD *)((char *)a5 + 44) = *(_OWORD *)(result + 44);
    a5[1] = v10;
    a5[2] = v11;
    *a5 = v9;
    return result;
  }
  if ((uint64_t)a4 <= 8)
  {
    if ((char *)result == a2) {
      return result;
    }
    long long v24 = *(_OWORD *)result;
    long long v25 = *(_OWORD *)(result + 16);
    long long v26 = *(_OWORD *)(result + 32);
    *(_OWORD *)((char *)a5 + 44) = *(_OWORD *)(result + 44);
    a5[1] = v25;
    a5[2] = v26;
    *a5 = v24;
    int v27 = (_OWORD *)(result + 60);
    if ((char *)(result + 60) == a2) {
      return result;
    }
    uint64_t v28 = 0;
    long long v29 = a5;
LABEL_25:
    long long v34 = v27;
    long long v35 = (_OWORD *)((char *)v29 + 60);
    int v36 = *((_DWORD *)v8 + 17);
    if (v36 == 0x7FFFFFFF) {
      int v36 = *((_DWORD *)v8 + 16);
    }
    int v37 = *((_DWORD *)v29 + 2);
    if (v37 == 0x7FFFFFFF) {
      int v37 = *((_DWORD *)v29 + 1);
    }
    if (v36 == v37)
    {
      int v38 = *((_DWORD *)v8 + 20);
      if (v38 == 0x7FFFFFFF) {
        int v38 = *((_DWORD *)v8 + 19);
      }
      int v39 = *((_DWORD *)v29 + 5);
      if (v39 == 0x7FFFFFFF) {
        int v39 = *((_DWORD *)v29 + 4);
      }
      if (v38 <= v39)
      {
LABEL_35:
        long long v40 = *v34;
        long long v41 = v34[1];
        long long v42 = v34[2];
        *(_OWORD *)((char *)v29 + 104) = *(_OWORD *)((char *)v34 + 44);
        *(_OWORD *)((char *)v29 + 76) = v41;
        *(_OWORD *)((char *)v29 + 92) = v42;
        _OWORD *v35 = v40;
        goto LABEL_24;
      }
    }
    else if (v36 >= v37)
    {
      goto LABEL_35;
    }
    long long v43 = v29[1];
    _OWORD *v35 = *v29;
    *(_OWORD *)((char *)v29 + 76) = v43;
    *(_OWORD *)((char *)v29 + 92) = v29[2];
    *(_OWORD *)((char *)v29 + 104) = *(_OWORD *)((char *)v29 + 44);
    int v30 = a5;
    if (v29 == a5) {
      goto LABEL_23;
    }
    uint64_t v44 = v28;
    while (1)
    {
      unsigned int v46 = (_OWORD *)((char *)a5 + v44);
      int v47 = *((_DWORD *)v8 + 17);
      if (v47 == 0x7FFFFFFF) {
        int v47 = *((_DWORD *)v8 + 16);
      }
      int v48 = *((_DWORD *)v46 - 13);
      if (v48 == 0x7FFFFFFF) {
        int v48 = *((_DWORD *)v46 - 14);
      }
      if (v47 == v48)
      {
        int v49 = *((_DWORD *)v8 + 20);
        if (v49 == 0x7FFFFFFF) {
          int v49 = *((_DWORD *)v8 + 19);
        }
        int v50 = *((_DWORD *)v46 - 10);
        if (v50 == 0x7FFFFFFF) {
          int v50 = *((_DWORD *)v46 - 11);
        }
        if (v49 <= v50)
        {
          int v30 = v29;
LABEL_23:
          long long v31 = *v34;
          long long v32 = v34[1];
          long long v33 = v34[2];
          *(_OWORD *)((char *)v30 + 41) = *(_OWORD *)((char *)v34 + 41);
          v30[1] = v32;
          void v30[2] = v33;
          *int v30 = v31;
LABEL_24:
          int v27 = (_OWORD *)((char *)v34 + 60);
          v28 += 60;
          long long v29 = v35;
          int v8 = v34;
          if ((char *)v34 + 60 == a2) {
            return result;
          }
          goto LABEL_25;
        }
      }
      else if (v47 >= v48)
      {
        int v30 = (_OWORD *)((char *)a5 + v44);
        goto LABEL_23;
      }
      long long v29 = (_OWORD *)((char *)v29 - 60);
      long long v45 = *(_OWORD *)((char *)v46 - 44);
      *unsigned int v46 = *(_OWORD *)((char *)v46 - 60);
      v46[1] = v45;
      v46[2] = *(_OWORD *)((char *)v46 - 28);
      *(_OWORD *)((char *)v46 + 41) = *(_OWORD *)((char *)v46 - 19);
      v44 -= 60;
      if (!v44)
      {
        int v30 = a5;
        goto LABEL_23;
      }
    }
  }
  unint64_t v55 = a4 >> 1;
  uint64_t v56 = 60 * (a4 >> 1);
  uint64_t v57 = result + v56;
  sub_B50F3C(result, result + v56, a3, a4 >> 1, a5, a4 >> 1);
  uint64_t result = sub_B50F3C((char *)v8 + v56, a2, a3, a4 - v55, (char *)v5 + v56, a4 - v55);
  uint64_t v58 = (char *)v8 + v56;
  while (v58 != a2)
  {
    int v62 = *((_DWORD *)v58 + 2);
    if (v62 == 0x7FFFFFFF) {
      int v62 = *((_DWORD *)v58 + 1);
    }
    int v63 = *((_DWORD *)v8 + 2);
    if (v63 == 0x7FFFFFFF) {
      int v63 = *((_DWORD *)v8 + 1);
    }
    if (v62 == v63)
    {
      int v64 = *((_DWORD *)v58 + 5);
      if (v64 == 0x7FFFFFFF) {
        int v64 = *((_DWORD *)v58 + 4);
      }
      int v65 = *((_DWORD *)v8 + 5);
      if (v65 == 0x7FFFFFFF) {
        int v65 = *((_DWORD *)v8 + 4);
      }
      if (v64 <= v65) {
        goto LABEL_71;
      }
LABEL_57:
      long long v59 = *(_OWORD *)v58;
      long long v60 = *((_OWORD *)v58 + 1);
      long long v61 = *((_OWORD *)v58 + 2);
      *(_OWORD *)((char *)v5 + 44) = *(_OWORD *)(v58 + 44);
      v5[1] = v60;
      v5[2] = v61;
      *uint64_t v5 = v59;
      uint64_t v5 = (_OWORD *)((char *)v5 + 60);
      v58 += 60;
      if (v8 == (_OWORD *)v57) {
        goto LABEL_72;
      }
    }
    else
    {
      if (v62 < v63) {
        goto LABEL_57;
      }
LABEL_71:
      long long v66 = *v8;
      long long v67 = v8[1];
      long long v68 = v8[2];
      *(_OWORD *)((char *)v5 + 44) = *(_OWORD *)((char *)v8 + 44);
      v5[1] = v67;
      v5[2] = v68;
      *uint64_t v5 = v66;
      uint64_t v5 = (_OWORD *)((char *)v5 + 60);
      int v8 = (_OWORD *)((char *)v8 + 60);
      if (v8 == (_OWORD *)v57)
      {
LABEL_72:
        if (v58 != a2)
        {
          uint64_t v69 = 0;
          do
          {
            char v70 = (_OWORD *)((char *)v5 + v69);
            long long v71 = *(_OWORD *)&v58[v69];
            long long v72 = *(_OWORD *)&v58[v69 + 16];
            long long v73 = *(_OWORD *)&v58[v69 + 32];
            *(_OWORD *)((char *)v70 + 44) = *(_OWORD *)&v58[v69 + 44];
            v70[1] = v72;
            v70[2] = v73;
            _OWORD *v70 = v71;
            v69 += 60;
          }
          while (&v58[v69] != a2);
        }
        return result;
      }
    }
  }
  if (v8 != (_OWORD *)v57)
  {
    uint64_t v74 = 0;
    do
    {
      char v75 = (_OWORD *)((char *)v5 + v74);
      long long v76 = *(_OWORD *)((char *)v8 + v74);
      long long v77 = *(_OWORD *)((char *)v8 + v74 + 16);
      long long v78 = *(_OWORD *)((char *)v8 + v74 + 32);
      *(_OWORD *)((char *)v75 + 44) = *(_OWORD *)((char *)v8 + v74 + 44);
      v75[1] = v77;
      v75[2] = v78;
      *char v75 = v76;
      v74 += 60;
    }
    while ((_OWORD *)((char *)v8 + v74) != (_OWORD *)v57);
  }
  return result;
}

__n128 sub_B5182C(long long *a1, char *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  while (2)
  {
    while (2)
    {
      if (a6 <= a8 || a5 <= a8)
      {
        sub_B51BF4(a1, (long long *)a2, a3, a4, a5, a6, a7);
        return result;
      }
      if (!a5) {
        return result;
      }
      uint64_t v11 = 0;
      int v12 = *((_DWORD *)a2 + 2);
      if (v12 == 0x7FFFFFFF) {
        int v12 = *((_DWORD *)a2 + 1);
      }
      uint64_t v13 = -a5;
      while (1)
      {
        int v15 = (char *)a1 + v11;
        int v16 = *(_DWORD *)((char *)a1 + v11 + 8);
        if (v16 == 0x7FFFFFFF) {
          int v16 = *(_DWORD *)((char *)a1 + v11 + 4);
        }
        if (v12 != v16)
        {
          if (v12 < v16) {
            break;
          }
          goto LABEL_9;
        }
        int v17 = *((_DWORD *)a2 + 5);
        if (v17 == 0x7FFFFFFF) {
          int v17 = *((_DWORD *)a2 + 4);
        }
        long long v20 = v15 + 16;
        int v18 = *((_DWORD *)v15 + 4);
        int v19 = *((_DWORD *)v20 + 1);
        if (v19 != 0x7FFFFFFF) {
          int v18 = v19;
        }
        if (v17 > v18) {
          break;
        }
LABEL_9:
        v11 += 60;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v21 = -v13;
      int v64 = a3;
      uint64_t v65 = a8;
      int v62 = (long long *)((char *)a1 + v11);
      if (-v13 < a6)
      {
        if (a6 >= 0) {
          uint64_t v22 = a6;
        }
        else {
          uint64_t v22 = a6 + 1;
        }
        uint64_t v23 = v22 >> 1;
        long long v24 = (char *)a1 + v11;
        if (a2 - (char *)a1 == v11)
        {
LABEL_23:
          long long v25 = &a2[60 * v23];
          uint64_t v26 = 0xEEEEEEEEEEEEEEEFLL * ((v24 - (char *)a1 - v11) >> 2);
          goto LABEL_29;
        }
        unint64_t v38 = 0xEEEEEEEEEEEEEEEFLL * ((a2 - (char *)a1 - v11) >> 2);
        int v39 = &a2[60 * v23];
        int v40 = *((_DWORD *)v39 + 2);
        if (v40 == 0x7FFFFFFF) {
          int v40 = *((_DWORD *)v39 + 1);
        }
        long long v43 = v39 + 16;
        int v41 = *((_DWORD *)v39 + 4);
        int v42 = v43[1];
        if (v42 != 0x7FFFFFFF) {
          int v41 = v42;
        }
        long long v24 = (char *)a1 + v11;
        while (2)
        {
          unint64_t v44 = v38 >> 1;
          long long v45 = &v24[60 * (v38 >> 1)];
          int v46 = *((_DWORD *)v45 + 2);
          if (v46 == 0x7FFFFFFF) {
            int v46 = *((_DWORD *)v45 + 1);
          }
          if (v40 == v46)
          {
            int v47 = *(_DWORD *)&v24[60 * v44 + 16];
            if (*(_DWORD *)&v24[60 * v44 + 20] != 0x7FFFFFFF) {
              int v47 = *(_DWORD *)&v24[60 * v44 + 20];
            }
            if (v41 > v47)
            {
LABEL_40:
              unint64_t v38 = v44;
              if (!v44) {
                goto LABEL_23;
              }
              continue;
            }
          }
          else if (v40 < v46)
          {
            goto LABEL_40;
          }
          break;
        }
        long long v24 = v45 + 60;
        unint64_t v44 = v38 + ~v44;
        goto LABEL_40;
      }
      if (v13 == -1)
      {
        uint64_t v58 = (long long *)((char *)a1 + v11);
        *(_OWORD *)&v70[12] = *(long long *)((char *)a1 + v11 + 44);
        long long v69 = *(long long *)((char *)a1 + v11 + 16);
        *(_OWORD *)char v70 = *(long long *)((char *)a1 + v11 + 32);
        long long v68 = *(long long *)((char *)a1 + v11);
        long long v59 = *(_OWORD *)a2;
        long long v60 = *((_OWORD *)a2 + 1);
        long long v61 = *((_OWORD *)a2 + 2);
        *(long long *)((char *)v58 + 41) = *(_OWORD *)(a2 + 41);
        v58[1] = v60;
        v58[2] = v61;
        long long *v58 = v59;
        *(_OWORD *)a2 = v68;
        *((_OWORD *)a2 + 1) = v69;
        *((_OWORD *)a2 + 2) = *(_OWORD *)v70;
        __n128 result = *(__n128 *)&v70[9];
        *(_OWORD *)(a2 + 41) = *(_OWORD *)&v70[9];
        return result;
      }
      if (v13 > 0) {
        uint64_t v21 = 1 - v13;
      }
      uint64_t v26 = v21 >> 1;
      long long v25 = a2;
      if (a2 != (char *)a3)
      {
        unint64_t v48 = 0xEEEEEEEEEEEEEEEFLL * (((char *)a3 - a2) >> 2);
        int v49 = (_DWORD *)((char *)a1 + 60 * v26 + v11);
        int v50 = v49[2];
        if (v50 == 0x7FFFFFFF) {
          int v50 = v49[1];
        }
        long long v53 = v49 + 4;
        int v51 = v49[4];
        int v52 = v53[1];
        if (v52 != 0x7FFFFFFF) {
          int v51 = v52;
        }
        long long v25 = a2;
        do
        {
          unint64_t v54 = v48 >> 1;
          unint64_t v55 = &v25[60 * (v48 >> 1)];
          int v56 = *((_DWORD *)v55 + 2);
          if (v56 == 0x7FFFFFFF) {
            int v56 = *((_DWORD *)v55 + 1);
          }
          if (v56 == v50)
          {
            int v57 = *(_DWORD *)&v25[60 * v54 + 16];
            if (*(_DWORD *)&v25[60 * v54 + 20] != 0x7FFFFFFF) {
              int v57 = *(_DWORD *)&v25[60 * v54 + 20];
            }
            if (v57 <= v51) {
              goto LABEL_56;
            }
          }
          else if (v56 >= v50)
          {
            goto LABEL_56;
          }
          long long v25 = v55 + 60;
          unint64_t v54 = v48 + ~v54;
LABEL_56:
          unint64_t v48 = v54;
        }
        while (v54);
      }
      uint64_t v23 = 0xEEEEEEEEEEEEEEEFLL * ((v25 - a2) >> 2);
      long long v24 = (char *)a1 + 60 * v26 + v11;
LABEL_29:
      a5 = -(v26 + v13);
      uint64_t v63 = a6 - v23;
      uint64_t v27 = v23;
      uint64_t v28 = a6;
      long long v29 = sub_B51E0C(v24, a2, v25);
      uint64_t v30 = v27;
      long long v31 = (long long *)v29;
      if (v26 + v30 < v28 - (v26 + v30) - v13)
      {
        long long v32 = v24;
        a8 = v65;
        sub_B5182C((char *)a1 + v11, v32, v29, a4, v26, v30, a7, v65);
        a1 = v31;
        a3 = v64;
        a6 = v63;
        a2 = v25;
        if (!v63) {
          return result;
        }
        continue;
      }
      break;
    }
    uint64_t v34 = v26;
    uint64_t v35 = -(v26 + v13);
    uint64_t v36 = v30;
    sub_B5182C(v29, v25, v64, a4, v35, v63, a7, v65);
    int v37 = v24;
    a8 = v65;
    a5 = v34;
    a3 = v31;
    a1 = v62;
    a6 = v36;
    a2 = v37;
    if (v36) {
      continue;
    }
    return result;
  }
}

long long *sub_B51BF4(long long *result, long long *a2, long long *a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  if (a5 <= a6)
  {
    if (result == a2) {
      return result;
    }
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = &__src[v22];
      long long v24 = *(long long *)((char *)result + v22);
      long long v25 = *(long long *)((char *)result + v22 + 16);
      long long v26 = *(long long *)((char *)result + v22 + 32);
      *(_OWORD *)(v23 + 44) = *(long long *)((char *)result + v22 + 44);
      *((_OWORD *)v23 + 1) = v25;
      *((_OWORD *)v23 + 2) = v26;
      *(_OWORD *)uint64_t v23 = v24;
      v22 += 60;
    }
    while ((long long *)((char *)result + v22) != a2);
    if (!v22) {
      return result;
    }
    uint64_t v27 = &__src[v22];
    uint64_t v28 = __src;
    while (1)
    {
      if (a2 == a3) {
        return (long long *)memmove(result, v28, __src - v28 + v22 - 3);
      }
      int v32 = *((_DWORD *)a2 + 2);
      if (v32 == 0x7FFFFFFF) {
        int v32 = *((_DWORD *)a2 + 1);
      }
      int v33 = *((_DWORD *)v28 + 2);
      if (v33 == 0x7FFFFFFF) {
        int v33 = *((_DWORD *)v28 + 1);
      }
      if (v32 == v33)
      {
        int v34 = *((_DWORD *)a2 + 5);
        if (v34 == 0x7FFFFFFF) {
          int v34 = *((_DWORD *)a2 + 4);
        }
        int v35 = *((_DWORD *)v28 + 5);
        if (v35 == 0x7FFFFFFF) {
          int v35 = *((_DWORD *)v28 + 4);
        }
        if (v34 <= v35) {
          goto LABEL_42;
        }
LABEL_28:
        long long v29 = *a2;
        long long v30 = a2[1];
        long long v31 = a2[2];
        *(long long *)((char *)result + 41) = *(long long *)((char *)a2 + 41);
        result[1] = v30;
        result[2] = v31;
        std::string *result = v29;
        __n128 result = (long long *)((char *)result + 60);
        a2 = (long long *)((char *)a2 + 60);
        if (v27 == v28) {
          return result;
        }
      }
      else
      {
        if (v32 < v33) {
          goto LABEL_28;
        }
LABEL_42:
        long long v36 = *(_OWORD *)v28;
        long long v37 = *((_OWORD *)v28 + 1);
        long long v38 = *((_OWORD *)v28 + 2);
        *(long long *)((char *)result + 41) = *(_OWORD *)(v28 + 41);
        result[1] = v37;
        result[2] = v38;
        std::string *result = v36;
        __n128 result = (long long *)((char *)result + 60);
        v28 += 60;
        if (v27 == v28) {
          return result;
        }
      }
    }
  }
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      int v8 = &__src[v7];
      long long v9 = *(long long *)((char *)a2 + v7);
      long long v10 = *(long long *)((char *)a2 + v7 + 16);
      long long v11 = *(long long *)((char *)a2 + v7 + 32);
      *(_OWORD *)(v8 + 44) = *(long long *)((char *)a2 + v7 + 44);
      *((_OWORD *)v8 + 1) = v10;
      *((_OWORD *)v8 + 2) = v11;
      *(_OWORD *)int v8 = v9;
      v7 += 60;
    }
    while ((long long *)((char *)a2 + v7) != a3);
    if (v7)
    {
      int v12 = &__src[v7];
      uint64_t v13 = (long long *)((char *)a3 - 60);
      do
      {
        if (a2 == result)
        {
          uint64_t v39 = 0;
          do
          {
            int v40 = (_OWORD *)((char *)v13 + v39);
            long long v41 = *(_OWORD *)&v12[v39 - 60];
            long long v42 = *(_OWORD *)&v12[v39 - 44];
            long long v43 = *(_OWORD *)&v12[v39 - 28];
            *(_OWORD *)((char *)v40 + 41) = *(_OWORD *)&v12[v39 - 19];
            v40[1] = v42;
            void v40[2] = v43;
            *int v40 = v41;
            v39 -= 60;
          }
          while (&v12[v39] != __src);
          return result;
        }
        int v14 = (char *)a2 - 60;
        int v18 = *((_DWORD *)v12 - 13);
        if (v18 == 0x7FFFFFFF) {
          int v18 = *((_DWORD *)v12 - 14);
        }
        int v19 = *((_DWORD *)a2 - 13);
        if (v19 == 0x7FFFFFFF) {
          int v19 = *((_DWORD *)a2 - 14);
        }
        if (v18 == v19)
        {
          int v20 = *((_DWORD *)v12 - 10);
          if (v20 == 0x7FFFFFFF) {
            int v20 = *((_DWORD *)v12 - 11);
          }
          int v21 = *((_DWORD *)a2 - 10);
          if (v21 == 0x7FFFFFFF) {
            int v21 = *((_DWORD *)a2 - 11);
          }
          if (v20 > v21)
          {
LABEL_22:
            a2 = (long long *)((char *)a2 - 60);
            goto LABEL_8;
          }
        }
        else if (v18 < v19)
        {
          goto LABEL_22;
        }
        int v14 = v12 - 60;
        v12 -= 60;
LABEL_8:
        long long v15 = *(_OWORD *)v14;
        long long v16 = *((_OWORD *)v14 + 1);
        long long v17 = *((_OWORD *)v14 + 2);
        *(_OWORD *)((char *)v13 + 41) = *(_OWORD *)(v14 + 41);
        v13[1] = v16;
        v13[2] = v17;
        _OWORD *v13 = v15;
        uint64_t v13 = (_OWORD *)((char *)v13 - 60);
      }
      while (v12 != __src);
    }
  }
  return result;
}

char *sub_B51E0C(char *__src, char *a2, char *a3)
{
  uint64_t v3 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 60 == a2)
    {
      long long v35 = *(_OWORD *)__src;
      long long v38 = *((_OWORD *)__src + 1);
      *(_OWORD *)long long v42 = *((_OWORD *)__src + 2);
      *(_OWORD *)&v42[12] = *(_OWORD *)(__src + 44);
      int64_t v14 = a3 - a2;
      memmove(__src, a2, a3 - a2 - 3);
      uint64_t v3 = &__src[v14];
      *(_OWORD *)uint64_t v3 = v35;
      *((_OWORD *)v3 + 1) = v38;
      *((_OWORD *)v3 + 2) = *(_OWORD *)v42;
      *(_OWORD *)(v3 + 41) = *(_OWORD *)&v42[9];
    }
    else if (a2 + 60 == a3)
    {
      uint64_t v3 = __src + 60;
      long long v36 = *(_OWORD *)(a3 - 60);
      long long v39 = *(_OWORD *)(a3 - 44);
      *(_OWORD *)long long v43 = *(_OWORD *)(a3 - 28);
      *(_OWORD *)&v43[12] = *((_OWORD *)a3 - 1);
      if (a3 - 60 != __src) {
        memmove(__src + 60, __src, a3 - 60 - __src - 3);
      }
      *(_OWORD *)int __src = v36;
      *((_OWORD *)__src + 1) = v39;
      *((_OWORD *)__src + 2) = *(_OWORD *)v43;
      *(_OWORD *)(__src + 41) = *(_OWORD *)&v43[9];
    }
    else
    {
      unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * ((a2 - __src) >> 2);
      if (v5 == 0xEEEEEEEEEEEEEEEFLL * ((a3 - a2) >> 2))
      {
        int v6 = __src + 60;
        uint64_t v7 = a2 + 60;
        do
        {
          *(_OWORD *)long long v41 = *(_OWORD *)(v6 - 28);
          *(_OWORD *)&v41[12] = *((_OWORD *)v6 - 1);
          long long v8 = *(_OWORD *)(v6 - 44);
          long long v9 = *(_OWORD *)(v6 - 60);
          long long v10 = *(_OWORD *)(v7 - 44);
          long long v11 = *(_OWORD *)(v7 - 28);
          long long v12 = *(_OWORD *)(v7 - 19);
          *(_OWORD *)(v6 - 60) = *(_OWORD *)(v7 - 60);
          *(_OWORD *)(v6 - 19) = v12;
          *(_OWORD *)(v6 - 28) = v11;
          *(_OWORD *)(v6 - 44) = v10;
          *(_OWORD *)(v7 - 60) = v9;
          *(_OWORD *)(v7 - 44) = v8;
          *(_OWORD *)(v7 - 28) = *(_OWORD *)v41;
          *(_OWORD *)(v7 - 19) = *(_OWORD *)&v41[9];
          if (v6 == a2) {
            break;
          }
          v6 += 60;
          BOOL v13 = v7 == a3;
          v7 += 60;
        }
        while (!v13);
        return a2;
      }
      else
      {
        uint64_t v15 = 0xEEEEEEEEEEEEEEEFLL * ((a3 - a2) >> 2);
        unint64_t v16 = 0xEEEEEEEEEEEEEEEFLL * ((a2 - __src) >> 2);
        do
        {
          uint64_t v17 = v16;
          unint64_t v16 = v15;
          uint64_t v15 = v17 % v15;
        }
        while (v15);
        if (v16)
        {
          int v18 = &__src[60 * v16];
          do
          {
            long long v19 = *(_OWORD *)(v18 - 60);
            long long v20 = *(_OWORD *)(v18 - 44);
            long long v21 = *(_OWORD *)(v18 - 28);
            long long v22 = *((_OWORD *)v18 - 1);
            v18 -= 60;
            long long v37 = v19;
            long long v40 = v20;
            *(_OWORD *)unint64_t v44 = v21;
            *(_OWORD *)&v44[12] = v22;
            uint64_t v23 = &v18[4 * ((a2 - __src) >> 2)];
            long long v24 = v18;
            do
            {
              long long v25 = v23;
              long long v26 = *(_OWORD *)v23;
              long long v27 = *((_OWORD *)v23 + 1);
              long long v28 = *((_OWORD *)v23 + 2);
              *(_OWORD *)((char *)v24 + 41) = *(_OWORD *)(v23 + 41);
              v24[1] = v27;
              v24[2] = v28;
              *long long v24 = v26;
              unint64_t v29 = 0xEEEEEEEEEEEEEEEFLL * ((a3 - v23) >> 2);
              v23 += 4 * ((a2 - __src) >> 2);
              BOOL v30 = __OFSUB__(v5, v29);
              uint64_t v32 = v5 - v29;
              char v31 = (v32 < 0) ^ v30;
              int v33 = &__src[60 * v32];
              if (!v31) {
                uint64_t v23 = v33;
              }
              long long v24 = v25;
            }
            while (v23 != v18);
            *(_OWORD *)((char *)v25 + 41) = *(_OWORD *)&v44[9];
            v25[1] = v40;
            v25[2] = *(_OWORD *)v44;
            *long long v25 = v37;
          }
          while (v18 != __src);
        }
        return &__src[4 * ((a3 - a2) >> 2)];
      }
    }
  }
  return v3;
}

BOOL sub_B52088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a2 + 4) != *(_DWORD *)(a3 + 4)) {
    return 0;
  }
  if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a3 + 8)
    || *(unsigned __int8 *)(a2 + 12) != *(unsigned __int8 *)(a3 + 12)
    || *(unsigned __int8 *)(a2 + 13) != *(unsigned __int8 *)(a3 + 13)
    || *(_DWORD *)(a2 + 16) != *(_DWORD *)(a3 + 16)
    || *(_DWORD *)(a2 + 20) != *(_DWORD *)(a3 + 20)
    || *(unsigned __int8 *)(a2 + 24) != *(unsigned __int8 *)(a3 + 24)
    || *(unsigned __int8 *)(a2 + 25) != *(unsigned __int8 *)(a3 + 25)
    || *(_DWORD *)a2 != *(_DWORD *)a3)
  {
    return 0;
  }
  unint64_t v5 = (void *)(a1 + 4136);
  unsigned int v6 = *(_DWORD *)(a2 + 48);
  uint64_t v7 = (int *)sub_A11094((void *)(a1 + 4136), *(void *)(a2 + 28));
  long long v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0) {
    long long v10 = (unsigned int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
  }
  else {
    long long v10 = 0;
  }
  uint64_t v12 = *(void *)sub_A10764(v10, v6);
  unsigned int v13 = *(_DWORD *)(a3 + 48);
  int64_t v14 = (int *)sub_A11094(v5, *(void *)(a3 + 28));
  uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 9u && (uint64_t v16 = v15[4]) != 0) {
    uint64_t v17 = (unsigned int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
  }
  else {
    uint64_t v17 = 0;
  }
  if (v12 != *(void *)sub_A10764(v17, v13)) {
    return 0;
  }
  unsigned int v18 = *(_DWORD *)(a2 + 52);
  long long v19 = (int *)sub_A11094(v5, *(void *)(a2 + 28));
  long long v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 >= 9u && (uint64_t v21 = v20[4]) != 0) {
    long long v22 = (unsigned int *)((char *)v19 + v21 + *(unsigned int *)((char *)v19 + v21));
  }
  else {
    long long v22 = 0;
  }
  uint64_t v23 = *(void *)sub_A10764(v22, v18);
  unsigned int v24 = *(_DWORD *)(a3 + 52);
  long long v25 = (int *)sub_A11094(v5, *(void *)(a3 + 28));
  long long v26 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v26 >= 9u && (uint64_t v27 = v26[4]) != 0) {
    long long v28 = (unsigned int *)((char *)v25 + v27 + *(unsigned int *)((char *)v25 + v27));
  }
  else {
    long long v28 = 0;
  }
  if (v23 != *(void *)sub_A10764(v28, v24)) {
    return 0;
  }
  uint64_t v29 = sub_A104E8(v5, *(void *)(a2 + 28), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 36));
  int v31 = v30;
  uint64_t v33 = sub_A104E8(v5, *(void *)(a3 + 28), *(_DWORD *)(a3 + 48), *(_DWORD *)(a3 + 36));
  BOOL result = 0;
  if (v29 == v33 && v31 == v32)
  {
    uint64_t v34 = sub_A104E8(v5, *(void *)(a2 + 28), *(_DWORD *)(a2 + 52), *(_DWORD *)(a2 + 36));
    int v36 = v35;
    if (v34 == sub_A104E8(v5, *(void *)(a3 + 28), *(_DWORD *)(a3 + 52), *(_DWORD *)(a3 + 36))) {
      return v36 == v37;
    }
    return 0;
  }
  return result;
}

float32x2_t *sub_B5234C(void **a1, const float *a2, _DWORD *a3, uint64_t *a4, _OWORD *a5)
{
  uint64_t v7 = (char *)*a1;
  unsigned int v6 = (char *)a1[1];
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - (unsigned char *)*a1) >> 3);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x666666666666666) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - v7) >> 3) > v9) {
    unint64_t v9 = 0x999999999999999ALL * (((unsigned char *)a1[2] - v7) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - v7) >> 3) >= 0x333333333333333) {
    unint64_t v13 = 0x666666666666666;
  }
  else {
    unint64_t v13 = v9;
  }
  if (v13)
  {
    if (v13 > 0x666666666666666) {
      sub_188D718();
    }
    int64_t v14 = a3;
    uint64_t v15 = (char *)operator new(40 * v13);
    a3 = v14;
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v16 = (float32x2_t *)&v15[40 * v8];
  uint64_t v17 = &v15[40 * v13];
  uint64_t v18 = *a4;
  float32x2_t v19 = vld1_dup_f32(a2);
  *uint64_t v16 = v19;
  v16[1].i32[0] = *a3;
  void v16[2] = 0;
  v16[3] = 0;
  v16[4] = 0;
  long long v20 = operator new(0x40uLL);
  long long v21 = a5[1];
  *(_OWORD *)((char *)v20 + 4) = *a5;
  void v16[2] = (float32x2_t)v20;
  *(_DWORD *)long long v20 = v18;
  *(_OWORD *)((char *)v20 + 20) = v21;
  *(_OWORD *)((char *)v20 + 36) = a5[2];
  v20[3] = *(_OWORD *)((char *)a5 + 44);
  *(int64x2_t *)v16[3].f32 = vdupq_n_s64((unint64_t)(v20 + 4));
  long long v22 = v16 + 5;
  if (v6 == v7)
  {
    *a1 = v16;
    a1[1] = v22;
    a1[2] = v17;
  }
  else
  {
    unint64_t v23 = 0;
    do
    {
      unsigned int v24 = &v16[v23 / 8];
      long long v25 = &v6[v23];
      float32x2_t v26 = *(float32x2_t *)&v6[v23 - 40];
      v24[-4].i32[0] = *(_DWORD *)&v6[v23 - 32];
      v24[-5] = v26;
      v24[-2] = 0;
      v24[-1] = 0;
      *(_OWORD *)v24[-3].f32 = *(_OWORD *)&v6[v23 - 24];
      v24[-1] = *(float32x2_t *)&v6[v23 - 8];
      *((void *)v25 - 3) = 0;
      *((void *)v25 - 2) = 0;
      *((void *)v25 - 1) = 0;
      v23 -= 40;
    }
    while (&v6[v23] != v7);
    uint64_t v27 = (char *)*a1;
    unsigned int v6 = (char *)a1[1];
    long long v22 = v16 + 5;
    *a1 = &v16[v23 / 8];
    a1[1] = &v16[5];
    a1[2] = v17;
    if (v6 != v27)
    {
      do
      {
        long long v28 = (void *)*((void *)v6 - 3);
        if (v28)
        {
          *((void *)v6 - 2) = v28;
          operator delete(v28);
        }
        v6 -= 40;
      }
      while (v6 != v27);
      unsigned int v6 = v27;
    }
  }
  if (v6) {
    operator delete(v6);
  }
  return v22;
}

void sub_B52570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B52584((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B52584(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = v2 - 40;
        *(void *)(a1 + 16) = v2 - 40;
        unint64_t v5 = *(void **)(v2 - 24);
        if (!v5) {
          break;
        }
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 40;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_B525F4(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = a1;
    if (a3 == 2)
    {
      uint64_t v7 = &a2[-3].n128_u64[1];
      signed __int32 v8 = a2[-2].n128_i32[0];
      signed __int32 v9 = *(_DWORD *)(a1 + 8);
      BOOL v10 = (signed __int32)a2[-3].n128_u32[2] > *(_DWORD *)a1;
      BOOL v11 = v8 == v9;
      BOOL v12 = v8 < v9;
      if (!v11) {
        BOOL v10 = v12;
      }
      if (v10)
      {
        long long v77 = *(void **)a1;
        LODWORD(v78) = *(_DWORD *)(a1 + 8);
        unint64_t v13 = *(void *)(a1 + 32);
        __n128 v14 = *(__n128 *)(a1 + 16);
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 16) = 0;
        unint64_t v15 = *v7;
        *(_DWORD *)(a1 + 8) = a2[-2].n128_u32[0];
        *(void *)a1 = v15;
        *(__n128 *)(a1 + 16) = *(__n128 *)((char *)a2 - 24);
        *(void *)(a1 + 32) = a2[-1].n128_u64[1];
        unint64_t *v7 = (unint64_t)v77;
        a2[-2].n128_u32[0] = v78;
        *(__n128 *)((char *)a2 - 24) = v14;
        a2[-1].n128_u64[1] = v13;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((__n128 *)a1 != a2)
      {
        long long v22 = (_DWORD *)(a1 + 40);
        if ((__n128 *)(a1 + 40) != a2)
        {
          uint64_t v23 = 0;
          unsigned int v24 = (_DWORD *)a1;
          do
          {
            long long v25 = v22;
            int v26 = *v22;
            int v27 = v24[12];
            int v28 = v24[2];
            BOOL v29 = *v22 > *v24;
            BOOL v11 = v27 == v28;
            BOOL v30 = v27 < v28;
            if (!v11) {
              BOOL v29 = v30;
            }
            if (v29)
            {
              int v31 = v24[11];
              uint64_t v32 = *((void *)v24 + 7);
              long long v33 = *((_OWORD *)v24 + 4);
              *((void *)v24 + 8) = 0;
              *((void *)v24 + 9) = 0;
              *((void *)v24 + 7) = 0;
              uint64_t v34 = (void *)*((void *)v25 + 2);
              uint64_t v35 = *(void *)v24;
              v25[2] = v24[2];
              *(void *)long long v25 = v35;
              if (v34)
              {
                *((void *)v25 + 3) = v34;
                long long v75 = v33;
                operator delete(v34);
                long long v33 = v75;
                *((void *)v25 + 3) = 0;
                *((void *)v25 + 4) = 0;
              }
              int v36 = v24 + 4;
              *((_OWORD *)v25 + 1) = *((_OWORD *)v24 + 1);
              *((void *)v25 + 4) = *((void *)v24 + 4);
              *((void *)v24 + 2) = 0;
              *((void *)v24 + 3) = 0;
              *((void *)v24 + 4) = 0;
              if (v24 == (_DWORD *)v6)
              {
                unsigned int v24 = (_DWORD *)v6;
              }
              else
              {
                int v37 = *(v24 - 8);
                BOOL v38 = v26 > *(v24 - 10);
                BOOL v11 = v27 == v37;
                BOOL v39 = v27 < v37;
                if (!v11) {
                  BOOL v38 = v39;
                }
                if (v38)
                {
                  uint64_t v40 = v23;
                  while (1)
                  {
                    uint64_t v41 = v6 + v40;
                    uint64_t v42 = *(void *)(v6 + v40 - 40);
                    *(_DWORD *)(v41 + 8) = *(_DWORD *)(v6 + v40 - 32);
                    *(_OWORD *)(v41 + 16) = *(_OWORD *)(v6 + v40 - 24);
                    *(void *)(v41 + 32) = *(void *)(v6 + v40 - 8);
                    *(void *)(v41 - 24) = 0;
                    *(void *)(v41 - 16) = 0;
                    *(void *)(v41 - 8) = 0;
                    *(void *)uint64_t v41 = v42;
                    v40 -= 40;
                    if (!v40) {
                      break;
                    }
                    int v43 = *(_DWORD *)(v41 - 72);
                    BOOL v44 = v26 > *(_DWORD *)(v41 - 80);
                    BOOL v11 = v27 == v43;
                    BOOL v45 = v27 < v43;
                    if (!v11) {
                      BOOL v44 = v45;
                    }
                    if (!v44)
                    {
                      unsigned int v24 = (_DWORD *)(v6 + v40);
                      goto LABEL_35;
                    }
                  }
                  unsigned int v24 = (_DWORD *)v6;
LABEL_35:
                  int v36 = (void *)(v41 - 24);
                }
              }
              *unsigned int v24 = v26;
              v24[1] = v31;
              v24[2] = v27;
              void *v36 = v32;
              *(_OWORD *)(v24 + 6) = v33;
            }
            long long v22 = v25 + 10;
            v23 += 40;
            unsigned int v24 = v25;
          }
          while (v25 + 10 != (_DWORD *)a2);
        }
      }
    }
    else
    {
      uint64_t v18 = (void *)a4;
      uint64_t v19 = a3 >> 1;
      long long v20 = (char *)(a1 + 40 * (a3 >> 1));
      if ((uint64_t)a3 <= a5)
      {
        unint64_t v76 = 0;
        long long v77 = (void *)a4;
        long long v78 = &v76;
        sub_B52B98((__n128 *)a1, (__n128 *)(a1 + 40 * (a3 >> 1)), a3 >> 1, a4);
        unint64_t v76 = a3 >> 1;
        unint64_t v46 = a3 - v19;
        uint64_t v47 = (uint64_t)&v18[5 * v19];
        sub_B52B98((__n128 *)(v6 + 40 * (a3 >> 1)), a2, v46, v47);
        unint64_t v76 = a3;
        unint64_t v48 = &v18[5 * a3];
        uint64_t v49 = v47;
        int v50 = v18;
        while ((void *)v49 != v48)
        {
          int v51 = *(_DWORD *)(v49 + 8);
          int v52 = *((_DWORD *)v50 + 2);
          BOOL v53 = *(_DWORD *)v49 > *(_DWORD *)v50;
          BOOL v11 = v51 == v52;
          BOOL v54 = v51 < v52;
          if (!v11) {
            BOOL v53 = v54;
          }
          unint64_t v55 = (void *)(v6 + 16);
          if (v53)
          {
            uint64_t v56 = *(void *)v49;
            *(_DWORD *)(v6 + 8) = *(_DWORD *)(v49 + 8);
            *(void *)uint64_t v6 = v56;
            int v57 = *(void **)(v6 + 16);
            if (v57)
            {
              *(void *)(v6 + 24) = v57;
              operator delete(v57);
              void *v55 = 0;
              *(void *)(v6 + 24) = 0;
              *(void *)(v6 + 32) = 0;
            }
            *(_OWORD *)(v6 + 16) = *(_OWORD *)(v49 + 16);
            *(void *)(v6 + 32) = *(void *)(v49 + 32);
            *(void *)(v49 + 16) = 0;
            *(void *)(v49 + 24) = 0;
            *(void *)(v49 + 32) = 0;
            v49 += 40;
            v6 += 40;
            if (v50 == (void *)v47) {
              goto LABEL_53;
            }
          }
          else
          {
            uint64_t v58 = *v50;
            *(_DWORD *)(v6 + 8) = *((_DWORD *)v50 + 2);
            *(void *)uint64_t v6 = v58;
            long long v59 = *(void **)(v6 + 16);
            if (v59)
            {
              *(void *)(v6 + 24) = v59;
              operator delete(v59);
              void *v55 = 0;
              *(void *)(v6 + 24) = 0;
              *(void *)(v6 + 32) = 0;
            }
            *(_OWORD *)(v6 + 16) = *((_OWORD *)v50 + 1);
            *(void *)(v6 + 32) = v50[4];
            v50[2] = 0;
            v50[3] = 0;
            v50[4] = 0;
            v50 += 5;
            v6 += 40;
            if (v50 == (void *)v47)
            {
LABEL_53:
              if ((void *)v49 != v48)
              {
                uint64_t v66 = 0;
                do
                {
                  uint64_t v67 = v49 + v66;
                  uint64_t v68 = v6 + v66;
                  uint64_t v69 = *(void *)(v49 + v66);
                  *(_DWORD *)(v68 + 8) = *(_DWORD *)(v49 + v66 + 8);
                  *(void *)uint64_t v68 = v69;
                  char v70 = *(void **)(v6 + v66 + 16);
                  if (v70)
                  {
                    *(void *)(v68 + 24) = v70;
                    operator delete(v70);
                    *(void *)(v6 + v66 + 16) = 0;
                    *(void *)(v6 + v66 + 24) = 0;
                    *(void *)(v6 + v66 + 32) = 0;
                  }
                  *(_OWORD *)(v68 + 16) = *(_OWORD *)(v67 + 16);
                  *(void *)(v68 + 32) = *(void *)(v67 + 32);
                  *(void *)(v67 + 16) = 0;
                  *(void *)(v67 + 24) = 0;
                  *(void *)(v67 + 32) = 0;
                  v66 += 40;
                }
                while ((void *)(v67 + 40) != v48);
                uint64_t v18 = v77;
              }
              goto LABEL_59;
            }
          }
        }
        if (v50 != (void *)v47)
        {
          uint64_t v60 = 0;
          do
          {
            long long v61 = &v50[v60];
            uint64_t v62 = v6 + v60 * 8;
            uint64_t v63 = v50[v60];
            *(_DWORD *)(v62 + 8) = v50[v60 + 1];
            *(void *)uint64_t v62 = v63;
            uint64_t v65 = (void **)(v6 + v60 * 8 + 16);
            int v64 = *v65;
            if (*v65)
            {
              *(void *)(v62 + 24) = v64;
              operator delete(v64);
              *uint64_t v65 = 0;
              *(void *)(v6 + v60 * 8 + 24) = 0;
              *(void *)(v6 + v60 * 8 + 32) = 0;
            }
            *(_OWORD *)uint64_t v65 = *((_OWORD *)v61 + 1);
            *(void *)(v62 + 32) = v61[4];
            v61[2] = 0;
            v61[3] = 0;
            v61[4] = 0;
            v60 += 5;
          }
          while (v61 + 5 != (void *)v47);
        }
LABEL_59:
        if (v18)
        {
          unint64_t v71 = v76;
          if (v76)
          {
            unint64_t v72 = 0;
            long long v73 = v18 + 3;
            do
            {
              uint64_t v74 = (void *)*(v73 - 1);
              if (v74)
              {
                *long long v73 = v74;
                operator delete(v74);
                unint64_t v71 = v76;
              }
              ++v72;
              v73 += 5;
            }
            while (v72 < v71);
          }
        }
      }
      else
      {
        sub_B525F4(a1, a1 + 40 * (a3 >> 1), a3 >> 1, a4, a5);
        uint64_t v21 = a3 - v19;
        sub_B525F4(v20, a2, v21, v18, a5);
        sub_B53120((char *)v6, v20, (char *)a2, v19, v21, v18, a5);
      }
    }
  }
}

void sub_B52B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_B530A8((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 sub_B52B98(__n128 *a1, __n128 *a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v7 = a1;
    if (a3 == 2)
    {
      unint64_t v13 = &a2[-3].n128_u64[1];
      signed __int32 v14 = a2[-2].n128_i32[0];
      signed __int32 v15 = a1->n128_i32[2];
      BOOL v16 = v14 == v15;
      BOOL v17 = v14 < v15;
      if (v16) {
        BOOL v18 = (signed __int32)a2[-3].n128_u32[2] > (signed __int32)a1->n128_u32[0];
      }
      else {
        BOOL v18 = v17;
      }
      uint64_t v19 = (void *)(a4 + 16);
      long long v20 = (unint64_t *)(a4 + 40);
      uint64_t v21 = (void *)(a4 + 56);
      signed __int32 v9 = (void *)(a4 + 72);
      if (v18)
      {
        unint64_t v22 = *v13;
        *(_DWORD *)(a4 + 8) = a2[-2].n128_u32[0];
        *(void *)a4 = v22;
        *(void *)(a4 + 24) = 0;
        *(void *)(a4 + 32) = 0;
        void *v19 = 0;
        *(__n128 *)(a4 + 16) = *(__n128 *)((char *)a2 - 24);
        *(void *)(a4 + 32) = a2[-1].n128_u64[1];
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        a2[-1].n128_u64[1] = 0;
        unint64_t v23 = a1->n128_u64[0];
        *(_DWORD *)(a4 + 48) = a1->n128_u32[2];
        *long long v20 = v23;
        *(void *)(a4 + 64) = 0;
        *(void *)(a4 + 72) = 0;
        void *v21 = 0;
        BOOL v10 = a1 + 1;
        __n128 result = a1[1];
        *(__n128 *)(a4 + 56) = result;
        BOOL v12 = a1 + 2;
      }
      else
      {
        unint64_t v47 = a1->n128_u64[0];
        *(_DWORD *)(a4 + 8) = a1->n128_u32[2];
        *(void *)a4 = v47;
        *(void *)(a4 + 24) = 0;
        *(void *)(a4 + 32) = 0;
        void *v19 = 0;
        *(__n128 *)(a4 + 16) = a1[1];
        *(void *)(a4 + 32) = a1[2].n128_u64[0];
        a1[1].n128_u64[0] = 0;
        a1[1].n128_u64[1] = 0;
        a1[2].n128_u64[0] = 0;
        unint64_t v48 = *v13;
        *(_DWORD *)(a4 + 48) = a2[-2].n128_u32[0];
        *long long v20 = v48;
        *(void *)(a4 + 64) = 0;
        *(void *)(a4 + 72) = 0;
        void *v21 = 0;
        __n128 result = *(__n128 *)((char *)a2 - 24);
        *(__n128 *)(a4 + 56) = result;
        BOOL v12 = (__n128 *)((char *)a2 - 8);
        BOOL v10 = (__n128 *)((char *)a2 - 24);
      }
      goto LABEL_32;
    }
    if (a3 == 1)
    {
      unint64_t v8 = a1->n128_u64[0];
      *(_DWORD *)(a4 + 8) = a1->n128_u32[2];
      *(void *)a4 = v8;
      *(void *)(a4 + 16) = 0;
      *(void *)(a4 + 24) = 0;
      *(void *)(a4 + 32) = 0;
      signed __int32 v9 = (void *)(a4 + 32);
      BOOL v10 = a1 + 1;
      __n128 result = a1[1];
      *(__n128 *)(a4 + 16) = result;
      BOOL v12 = a1 + 2;
LABEL_32:
      void *v9 = v12->n128_u64[0];
      v10->n128_u64[0] = 0;
      v10->n128_u64[1] = 0;
      v10[1].n128_u64[0] = 0;
      return result;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v49 = a3 >> 1;
      uint64_t v50 = 40 * (a3 >> 1);
      int v51 = (__n128 *)((char *)a1 + v50);
      sub_B525F4(a1, (char *)a1 + v50, a3 >> 1, a4, a3 >> 1);
      sub_B525F4((char *)v7 + v50, a2, a3 - v49, a4 + v50, a3 - v49);
      int v52 = (void *)(a4 + 16);
      BOOL v53 = (__n128 *)((char *)v7 + v50);
      while (v53 != a2)
      {
        unint64_t v55 = v52 - 2;
        signed __int32 v56 = v53->n128_i32[2];
        signed __int32 v57 = v7->n128_i32[2];
        BOOL v58 = (signed __int32)v53->n128_u32[0] > (signed __int32)v7->n128_u32[0];
        BOOL v16 = v56 == v57;
        BOOL v59 = v56 < v57;
        if (!v16) {
          BOOL v58 = v59;
        }
        if (v58)
        {
          unint64_t v60 = v53->n128_u64[0];
          *((_DWORD *)v52 - 2) = v53->n128_u32[2];
          unint64_t *v55 = v60;
          v52[1] = 0;
          v52[2] = 0;
          void *v52 = 0;
          __n128 result = v53[1];
          *(__n128 *)int v52 = result;
          v52[2] = v53[2].n128_u64[0];
          v53[1].n128_u64[0] = 0;
          v53[1].n128_u64[1] = 0;
          v53[2].n128_u64[0] = 0;
          BOOL v53 = (__n128 *)((char *)v53 + 40);
          v52 += 5;
          if (v7 == v51)
          {
LABEL_41:
            if (v53 != a2)
            {
              unint64_t v61 = 0;
              do
              {
                uint64_t v62 = &v53->n128_u64[v61 / 8];
                uint64_t v63 = &v52[v61 / 8];
                unint64_t v64 = v53->n128_u64[v61 / 8];
                *((_DWORD *)v63 - 2) = v53->n128_u32[v61 / 4 + 2];
                *(v63 - 2) = v64;
                v63[1] = 0;
                v63[2] = 0;
                void *v63 = 0;
                __n128 result = *(__n128 *)((char *)v53 + v61 + 16);
                *(__n128 *)uint64_t v63 = result;
                v63[2] = v53[2].n128_u64[v61 / 8];
                v62[2] = 0;
                v62[3] = 0;
                v62[4] = 0;
                v61 += 40;
              }
              while (v62 + 5 != (unint64_t *)a2);
            }
            return result;
          }
        }
        else
        {
          unint64_t v54 = v7->n128_u64[0];
          *((_DWORD *)v52 - 2) = v7->n128_u32[2];
          unint64_t *v55 = v54;
          v52[1] = 0;
          v52[2] = 0;
          void *v52 = 0;
          __n128 result = v7[1];
          *(__n128 *)int v52 = result;
          v52[2] = v7[2].n128_u64[0];
          v7[1].n128_u64[0] = 0;
          v7[1].n128_u64[1] = 0;
          v7[2].n128_u64[0] = 0;
          uint64_t v7 = (__n128 *)((char *)v7 + 40);
          v52 += 5;
          if (v7 == v51) {
            goto LABEL_41;
          }
        }
      }
      if (v7 != v51)
      {
        unint64_t v65 = 0;
        do
        {
          uint64_t v66 = &v52[v65 / 8];
          uint64_t v67 = &v7->n128_u64[v65 / 8];
          unint64_t v68 = v7->n128_u64[v65 / 8];
          *((_DWORD *)v66 - 2) = v7->n128_u32[v65 / 4 + 2];
          *(v66 - 2) = v68;
          v66[1] = 0;
          v66[2] = 0;
          void *v66 = 0;
          __n128 result = *(__n128 *)((char *)v7 + v65 + 16);
          *(__n128 *)uint64_t v66 = result;
          v66[2] = v7[2].n128_u64[v65 / 8];
          v67[2] = 0;
          v67[3] = 0;
          v67[4] = 0;
          v65 += 40;
        }
        while (v67 + 5 != (unint64_t *)v51);
      }
    }
    else if (a1 != a2)
    {
      unint64_t v24 = a1->n128_u64[0];
      *(_DWORD *)(a4 + 8) = a1->n128_u32[2];
      *(void *)a4 = v24;
      *(void *)(a4 + 24) = 0;
      *(void *)(a4 + 32) = 0;
      *(void *)(a4 + 16) = 0;
      __n128 result = a1[1];
      *(__n128 *)(a4 + 16) = result;
      *(void *)(a4 + 32) = a1[2].n128_u64[0];
      a1[1].n128_u64[0] = 0;
      a1[1].n128_u64[1] = 0;
      a1[2].n128_u64[0] = 0;
      long long v25 = &a1[2].n128_u32[2];
      if (&a1[2].n128_i8[8] != (__int8 *)a2)
      {
        uint64_t v26 = 0;
        int v27 = (unint64_t *)a4;
        do
        {
          int v31 = (__n128 *)v25;
          uint64_t v32 = v27 + 5;
          signed __int32 v33 = v7[3].n128_i32[0];
          signed __int32 v34 = *((_DWORD *)v27 + 2);
          BOOL v35 = (int)*v25 > *(_DWORD *)v27;
          BOOL v16 = v33 == v34;
          BOOL v36 = v33 < v34;
          if (!v16) {
            BOOL v35 = v36;
          }
          if (v35)
          {
            *uint64_t v32 = *v27;
            *((_DWORD *)v27 + 12) = *((_DWORD *)v27 + 2);
            *(_OWORD *)(v27 + 7) = *((_OWORD *)v27 + 1);
            v27[9] = v27[4];
            v27[2] = 0;
            v27[3] = 0;
            uint64_t v37 = a4;
            v27[4] = 0;
            if (v27 != (unint64_t *)a4)
            {
              uint64_t v38 = v26;
              while (1)
              {
                uint64_t v37 = a4 + v38;
                signed __int32 v40 = v7[3].n128_i32[0];
                signed __int32 v41 = *(_DWORD *)(a4 + v38 - 32);
                BOOL v42 = (signed __int32)v31->n128_u32[0] > *(_DWORD *)(a4 + v38 - 40);
                if (v40 != v41) {
                  BOOL v42 = v40 < v41;
                }
                if (!v42) {
                  break;
                }
                *(void *)uint64_t v37 = *(void *)(a4 + v38 - 40);
                *(_DWORD *)(v37 + 8) = *(_DWORD *)(a4 + v38 - 32);
                int v43 = *(void **)(v37 + 16);
                if (v43)
                {
                  *(void *)(a4 + v38 + 24) = v43;
                  operator delete(v43);
                }
                uint64_t v39 = a4 + v38;
                *(_OWORD *)(v37 + 16) = *(_OWORD *)(a4 + v38 - 24);
                *(void *)(v39 + 32) = *(void *)(a4 + v38 - 8);
                *(void *)(v39 - 16) = 0;
                *(void *)(v39 - 8) = 0;
                *(void *)(v39 - 24) = 0;
                v38 -= 40;
                if (!v38)
                {
                  uint64_t v37 = a4;
                  break;
                }
              }
            }
            unint64_t v44 = v31->n128_u64[0];
            *(_DWORD *)(v37 + 8) = v31->n128_u32[2];
            *(void *)uint64_t v37 = v44;
            BOOL v45 = *(void **)(v37 + 16);
            if (v45)
            {
              *(void *)(v37 + 24) = v45;
              operator delete(v45);
              *(void *)(v37 + 16) = 0;
              *(void *)(v37 + 24) = 0;
              *(void *)(v37 + 32) = 0;
            }
            long long v46 = *(long long *)((char *)&v7[3] + 8);
            BOOL v29 = &v7[3].n128_u64[1];
            result.n128_u64[0] = v46;
            *(_OWORD *)(v37 + 16) = v46;
            *(void *)(v37 + 32) = v29[2];
          }
          else
          {
            unint64_t v28 = v31->n128_u64[0];
            *((_DWORD *)v27 + 12) = v31->n128_u32[2];
            *uint64_t v32 = v28;
            v27[8] = 0;
            v27[9] = 0;
            v27[7] = 0;
            long long v30 = *(long long *)((char *)&v7[3] + 8);
            BOOL v29 = &v7[3].n128_u64[1];
            result.n128_u64[0] = v30;
            *(_OWORD *)(v27 + 7) = v30;
            v27[9] = v29[2];
          }
          long long v25 = &v31[2].n128_u32[2];
          *BOOL v29 = 0;
          v29[1] = 0;
          v29[2] = 0;
          v26 += 40;
          int v27 = v32;
          uint64_t v7 = v31;
        }
        while (&v31[2].n128_i8[8] != (__int8 *)a2);
      }
    }
  }
  return result;
}

uint64_t *sub_B530A8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)a1[1];
    unint64_t v4 = *v3;
    if (*v3)
    {
      unint64_t v5 = 0;
      uint64_t v6 = (void *)(v2 + 24);
      do
      {
        uint64_t v7 = (void *)*(v6 - 1);
        if (v7)
        {
          void *v6 = v7;
          operator delete(v7);
          unint64_t v4 = *v3;
        }
        ++v5;
        v6 += 5;
      }
      while (v5 < v4);
    }
  }
  return a1;
}

void sub_B53120(char *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  if (!a5) {
    return;
  }
  while (a5 > a7 && a4 > a7)
  {
    if (!a4) {
      return;
    }
    BOOL v10 = 0;
    int v11 = *((_DWORD *)a2 + 2);
    uint64_t v12 = -a4;
    while (1)
    {
      unint64_t v13 = &v10[(void)a1];
      int v14 = *(_DWORD *)&v10[(void)a1 + 8];
      BOOL v15 = *(_DWORD *)a2 > *(_DWORD *)&v10[(void)a1];
      BOOL v16 = v11 == v14;
      BOOL v17 = v11 < v14;
      if (!v16) {
        BOOL v15 = v17;
      }
      if (v15) {
        break;
      }
      v10 += 40;
      if (__CFADD__(v12++, 1)) {
        return;
      }
    }
    uint64_t v19 = -v12;
    if (-v12 >= a5)
    {
      if (v12 == -1)
      {
        unint64_t v100 = &v10[(void)a1];
        int v129 = *((_DWORD *)v100 + 2);
        uint64_t v125 = *(void *)v100;
        uint64_t v101 = *((void *)v100 + 4);
        long long v102 = *((_OWORD *)v100 + 1);
        *((void *)v100 + 2) = 0;
        *((void *)v100 + 3) = 0;
        *((void *)v100 + 4) = 0;
        uint64_t v103 = *(void *)a2;
        *((_DWORD *)v100 + 2) = *((_DWORD *)a2 + 2);
        *(void *)unint64_t v100 = v103;
        *((_OWORD *)v100 + 1) = *((_OWORD *)a2 + 1);
        *((void *)v100 + 4) = *((void *)a2 + 4);
        *(void *)a2 = v125;
        *((_DWORD *)a2 + 2) = v129;
        *((_OWORD *)a2 + 1) = v102;
        *((void *)a2 + 4) = v101;
        return;
      }
      if (v12 > 0) {
        uint64_t v19 = 1 - v12;
      }
      uint64_t v32 = v19 >> 1;
      unint64_t v23 = &a1[40 * (v19 >> 1) + (void)v10];
      unint64_t v22 = a2;
      if (a2 != a3)
      {
        int v39 = *((_DWORD *)v23 + 2);
        unint64_t v40 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 3);
        unint64_t v22 = a2;
        do
        {
          unint64_t v41 = v40 >> 1;
          BOOL v42 = &v22[40 * (v40 >> 1)];
          int v43 = *((_DWORD *)v42 + 2);
          BOOL v44 = *(_DWORD *)v42 > *(_DWORD *)v23;
          BOOL v16 = v43 == v39;
          BOOL v45 = v43 < v39;
          if (!v16) {
            BOOL v44 = v45;
          }
          long long v46 = v42 + 40;
          v40 += ~v41;
          if (v44) {
            unint64_t v22 = v46;
          }
          else {
            unint64_t v40 = v41;
          }
        }
        while (v40);
      }
      uint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((v22 - a2) >> 3);
      if (v23 != a2)
      {
LABEL_25:
        if (v22 == a2)
        {
          signed __int32 v33 = v23;
        }
        else
        {
          signed __int32 v33 = v23 + 40;
          signed __int32 v34 = v23 + 40;
          BOOL v35 = a2;
          while (1)
          {
            int v126 = *((_DWORD *)v34 - 8);
            uint64_t v122 = *((void *)v34 - 5);
            uint64_t v36 = *((void *)v34 - 1);
            long long v37 = *(_OWORD *)(v34 - 24);
            *((void *)v34 - 3) = 0;
            *((void *)v34 - 2) = 0;
            *((void *)v34 - 1) = 0;
            uint64_t v38 = *(void *)v35;
            *((_DWORD *)v34 - 8) = *((_DWORD *)v35 + 2);
            *((void *)v34 - 5) = v38;
            *(_OWORD *)(v34 - 24) = *((_OWORD *)v35 + 1);
            *((void *)v34 - 1) = *((void *)v35 + 4);
            *(void *)BOOL v35 = v122;
            *((_DWORD *)v35 + 2) = v126;
            *((_OWORD *)v35 + 1) = v37;
            *((void *)v35 + 4) = v36;
            v35 += 40;
            if (v35 == v22) {
              break;
            }
            if (v34 == a2) {
              a2 = v35;
            }
            v34 += 40;
            v33 += 40;
          }
          if (v34 != a2)
          {
            unint64_t v47 = a2;
            while (1)
            {
              int v127 = *((_DWORD *)v34 + 2);
              uint64_t v123 = *(void *)v34;
              uint64_t v48 = *((void *)v34 + 4);
              long long v49 = *((_OWORD *)v34 + 1);
              *((void *)v34 + 3) = 0;
              *((void *)v34 + 4) = 0;
              *((void *)v34 + 2) = 0;
              uint64_t v50 = *(void *)v47;
              *((_DWORD *)v34 + 2) = *((_DWORD *)v47 + 2);
              *(void *)signed __int32 v34 = v50;
              *((_OWORD *)v34 + 1) = *((_OWORD *)v47 + 1);
              *((void *)v34 + 4) = *((void *)v47 + 4);
              *((_DWORD *)v47 + 2) = v127;
              *(void *)unint64_t v47 = v123;
              *((_OWORD *)v47 + 1) = v49;
              *((void *)v47 + 4) = v48;
              v34 += 40;
              v47 += 40;
              BOOL v51 = v34 == a2;
              if (v47 == v22)
              {
                if (v34 == a2) {
                  goto LABEL_55;
                }
                unint64_t v47 = a2 + 40;
                while (1)
                {
                  int v128 = *((_DWORD *)v34 + 2);
                  uint64_t v124 = *(void *)v34;
                  uint64_t v52 = *((void *)v34 + 4);
                  long long v53 = *((_OWORD *)v34 + 1);
                  *((void *)v34 + 2) = 0;
                  *((void *)v34 + 3) = 0;
                  *((void *)v34 + 4) = 0;
                  uint64_t v54 = *(void *)a2;
                  *((_DWORD *)v34 + 2) = *((_DWORD *)a2 + 2);
                  *(void *)signed __int32 v34 = v54;
                  *((_OWORD *)v34 + 1) = *((_OWORD *)a2 + 1);
                  *((void *)v34 + 4) = *((void *)a2 + 4);
                  *((_DWORD *)a2 + 2) = v128;
                  *(void *)a2 = v124;
                  *((_OWORD *)a2 + 1) = v53;
                  *((void *)a2 + 4) = v52;
                  v34 += 40;
                  BOOL v51 = v34 == a2;
                  if (v47 != v22) {
                    break;
                  }
                  if (v34 == a2) {
                    goto LABEL_55;
                  }
                }
              }
              if (v51) {
                a2 = v47;
              }
            }
          }
        }
        goto LABEL_55;
      }
    }
    else
    {
      if (a5 >= 0) {
        uint64_t v20 = a5;
      }
      else {
        uint64_t v20 = a5 + 1;
      }
      uint64_t v21 = v20 >> 1;
      unint64_t v22 = &a2[40 * (v20 >> 1)];
      unint64_t v23 = a2;
      if ((char *)(a2 - a1) != v10)
      {
        int v24 = *((_DWORD *)v22 + 2);
        unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1 - (uint64_t)v10) >> 3);
        unint64_t v23 = &v10[(void)a1];
        do
        {
          unint64_t v26 = v25 >> 1;
          int v27 = &v23[40 * (v25 >> 1)];
          int v28 = *((_DWORD *)v27 + 2);
          BOOL v29 = *(_DWORD *)v27 < *(_DWORD *)v22;
          BOOL v16 = v28 == v24;
          BOOL v30 = v28 > v24;
          if (!v16) {
            BOOL v29 = v30;
          }
          int v31 = v27 + 40;
          v25 += ~v26;
          if (v29) {
            unint64_t v25 = v26;
          }
          else {
            unint64_t v23 = v31;
          }
        }
        while (v25);
      }
      uint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - a1 - (uint64_t)v10) >> 3);
      if (v23 != a2) {
        goto LABEL_25;
      }
    }
    signed __int32 v33 = v22;
LABEL_55:
    a4 = -v32 - v12;
    uint64_t v55 = a5 - v21;
    if (v32 + v21 >= a5 - (v32 + v21) - v12)
    {
      uint64_t v60 = v32;
      BOOL v58 = a6;
      uint64_t v59 = a7;
      uint64_t v55 = v21;
      sub_B53120(v33, v22, a3, a4, a5 - v21);
      a2 = v23;
      a4 = v60;
      a3 = v33;
    }
    else
    {
      signed __int32 v56 = &v10[(void)a1];
      signed __int32 v57 = a3;
      BOOL v58 = a6;
      uint64_t v59 = a7;
      sub_B53120(v56, v23, v33, v32, v21);
      a3 = v57;
      unint64_t v13 = v33;
      a2 = v22;
    }
    a5 = v55;
    a1 = v13;
    a6 = v58;
    a7 = v59;
    if (!v55) {
      return;
    }
  }
  if (a4 > a5)
  {
    if (a3 == a2) {
      return;
    }
    unint64_t v61 = 0;
    unint64_t v62 = 0;
    do
    {
      uint64_t v63 = &a6[v61 / 8];
      unint64_t v64 = &a2[v61];
      uint64_t v65 = *(void *)&a2[v61];
      *((_DWORD *)v63 + 2) = *(_DWORD *)&a2[v61 + 8];
      void *v63 = v65;
      v63[3] = 0;
      v63[4] = 0;
      v63[2] = 0;
      *((_OWORD *)v63 + 1) = *(_OWORD *)&a2[v61 + 16];
      v63[4] = *(void *)&a2[v61 + 32];
      *((void *)v64 + 2) = 0;
      *((void *)v64 + 3) = 0;
      *((void *)v64 + 4) = 0;
      ++v62;
      v61 += 40;
    }
    while (v64 + 40 != a3);
    if (!v61) {
      goto LABEL_100;
    }
    uint64_t v66 = &a6[v61 / 8];
    while (2)
    {
      if (a2 == a1)
      {
        uint64_t v104 = 0;
        do
        {
          int v105 = &v66[v104];
          long long v106 = &a3[v104 * 8];
          uint64_t v107 = v66[v104 - 5];
          uint64_t v109 = (uint64_t)&a3[v104 * 8 - 24];
          long long v108 = *(void **)v109;
          *(_DWORD *)(v109 - 8) = v66[v104 - 4];
          *(void *)(v109 - 16) = v107;
          if (v108)
          {
            *((void *)v106 - 2) = v108;
            long long v110 = a6;
            uint64_t v111 = a3;
            operator delete(v108);
            a3 = v111;
            a6 = v110;
            *(void *)uint64_t v109 = 0;
            *(void *)(v109 + 8) = 0;
            *(void *)(v109 + 16) = 0;
          }
          *(_OWORD *)uint64_t v109 = *(_OWORD *)(v105 - 3);
          *((void *)v106 - 1) = *(v105 - 1);
          *(v105 - 3) = 0;
          *(v105 - 2) = 0;
          *(v105 - 1) = 0;
          v104 -= 5;
        }
        while (&v66[v104] != a6);
        goto LABEL_100;
      }
      char v70 = a2 - 40;
      long long v73 = v66 - 5;
      int v74 = *((_DWORD *)a2 - 8);
      int v75 = *((_DWORD *)v66 - 8);
      BOOL v76 = *((_DWORD *)v66 - 10) > *((_DWORD *)a2 - 10);
      if (v75 != v74) {
        BOOL v76 = v75 < v74;
      }
      long long v77 = a3 - 40;
      long long v78 = (void **)(a3 - 24);
      if (v76)
      {
        uint64_t v79 = *(void *)v70;
        *((_DWORD *)a3 - 8) = *((_DWORD *)a2 - 8);
        *(void *)long long v77 = v79;
        unint64_t v68 = *v78;
        uint64_t v69 = a2;
        long long v73 = v66;
        a2 -= 40;
        if (!*v78)
        {
LABEL_68:
          *(_OWORD *)(a3 - 24) = *(_OWORD *)(v69 - 24);
          *((void *)a3 - 1) = *((void *)v69 - 1);
          *((void *)v69 - 3) = 0;
          *((void *)v69 - 2) = 0;
          *((void *)v69 - 1) = 0;
          a3 = v77;
          if (v66 == a6) {
            goto LABEL_100;
          }
          continue;
        }
      }
      else
      {
        uint64_t v67 = *v73;
        *((_DWORD *)a3 - 8) = *((_DWORD *)v66 - 8);
        *(void *)long long v77 = v67;
        unint64_t v68 = *v78;
        uint64_t v69 = (char *)v66;
        char v70 = a2;
        v66 -= 5;
        if (!*v78) {
          goto LABEL_68;
        }
      }
      break;
    }
    *((void *)a3 - 2) = v68;
    unint64_t v71 = a6;
    unint64_t v72 = a3;
    operator delete(v68);
    a3 = v72;
    a6 = v71;
    unint64_t *v78 = 0;
    v78[1] = 0;
    a2 = v70;
    uint64_t v66 = v73;
    v78[2] = 0;
    goto LABEL_68;
  }
  if (a1 != a2)
  {
    unint64_t v80 = 0;
    unint64_t v62 = 0;
    do
    {
      __int16 v81 = &a6[v80 / 8];
      char v82 = &a1[v80];
      uint64_t v83 = *(void *)&a1[v80];
      *((_DWORD *)v81 + 2) = *(_DWORD *)&a1[v80 + 8];
      *__int16 v81 = v83;
      v81[3] = 0;
      v81[4] = 0;
      v81[2] = 0;
      *((_OWORD *)v81 + 1) = *(_OWORD *)&a1[v80 + 16];
      v81[4] = *(void *)&a1[v80 + 32];
      *((void *)v82 + 2) = 0;
      *((void *)v82 + 3) = 0;
      *((void *)v82 + 4) = 0;
      ++v62;
      v80 += 40;
    }
    while (v82 + 40 != a2);
    if (!v80) {
      goto LABEL_100;
    }
    uint64_t v84 = &a6[v80 / 8];
    uint64_t v85 = (uint64_t)&a6[v80 / 8 - 5];
    uint64_t v86 = a6;
    while (a2 != a3)
    {
      int v87 = *((_DWORD *)a2 + 2);
      int v88 = *((_DWORD *)v86 + 2);
      BOOL v89 = *(_DWORD *)a2 > *(_DWORD *)v86;
      BOOL v16 = v87 == v88;
      BOOL v90 = v87 < v88;
      if (!v16) {
        BOOL v89 = v90;
      }
      uint64_t v91 = a1 + 16;
      if (v89)
      {
        uint64_t v92 = *(void *)a2;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
        *(void *)a1 = v92;
        long long v93 = (void *)*((void *)a1 + 2);
        if (v93)
        {
          *((void *)a1 + 3) = v93;
          long long v94 = a6;
          int v95 = a3;
          operator delete(v93);
          a3 = v95;
          a6 = v94;
          void *v91 = 0;
          *((void *)a1 + 3) = 0;
          *((void *)a1 + 4) = 0;
        }
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *((void *)a2 + 2) = 0;
        *((void *)a2 + 3) = 0;
        *((void *)a2 + 4) = 0;
        a2 += 40;
        a1 += 40;
        if (v84 == v86) {
          goto LABEL_100;
        }
      }
      else
      {
        uint64_t v96 = *v86;
        *((_DWORD *)a1 + 2) = *((_DWORD *)v86 + 2);
        *(void *)a1 = v96;
        unint64_t v97 = (void *)*((void *)a1 + 2);
        if (v97)
        {
          *((void *)a1 + 3) = v97;
          uint64_t v98 = a6;
          char v99 = a3;
          operator delete(v97);
          a3 = v99;
          a6 = v98;
          void *v91 = 0;
          *((void *)a1 + 3) = 0;
          *((void *)a1 + 4) = 0;
        }
        *((_OWORD *)a1 + 1) = *((_OWORD *)v86 + 1);
        *((void *)a1 + 4) = v86[4];
        v86[2] = 0;
        v86[3] = 0;
        v86[4] = 0;
        v86 += 5;
        a1 += 40;
        if (v84 == v86) {
          goto LABEL_100;
        }
      }
    }
    uint64_t v112 = 0;
    do
    {
      uint64_t v113 = &a1[v112 * 8];
      long long v114 = &v86[v112];
      uint64_t v115 = v86[v112];
      *((_DWORD *)v113 + 2) = v86[v112 + 1];
      *(void *)uint64_t v113 = v115;
      uint64_t v117 = (void **)&a1[v112 * 8 + 16];
      int v116 = *v117;
      if (*v117)
      {
        *((void *)v113 + 3) = v116;
        uint64_t v118 = a6;
        operator delete(v116);
        a6 = v118;
        *uint64_t v117 = 0;
        *(void *)&a1[v112 * 8 + 24] = 0;
        *(void *)&a1[v112 * 8 + 32] = 0;
      }
      *(_OWORD *)uint64_t v117 = *((_OWORD *)v114 + 1);
      *((void *)v113 + 4) = v114[4];
      v114[2] = 0;
      v114[3] = 0;
      v114[4] = 0;
      v112 += 5;
    }
    while ((uint64_t *)v85 != v114);
LABEL_100:
    if (a6)
    {
      unint64_t v119 = 0;
      unint64_t v120 = a6 + 3;
      do
      {
        int v121 = (void *)*(v120 - 1);
        if (v121)
        {
          void *v120 = v121;
          operator delete(v121);
        }
        ++v119;
        v120 += 5;
      }
      while (v119 < v62);
    }
  }
}

void *sub_B539AC(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  signed __int32 v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 6)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 58) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 5;
    if (v8 >> 5 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 58) {
LABEL_22:
    }
      sub_2E00();
    unint64_t v13 = v12 << 6;
    __n128 result = operator new(v12 << 6);
    signed __int32 v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      __n128 result = memcpy(result, v6, v14);
    }
    BOOL v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  BOOL v15 = (void **)(result + 1);
  BOOL v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 6;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    uint64_t v19 = (void *)*result;
LABEL_20:
    __n128 result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  BOOL v18 = &__src[64 * v17];
  if (v16 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v16 - v9);
    signed __int32 v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v9;
    int __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  char *v15 = &v9[v14];
  return result;
}

void sub_B53AF4(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)v4) >> 3) >= a2)
  {
    if (a2)
    {
      BOOL v11 = &v4[5 * a2];
      unint64_t v12 = v4 + 2;
      uint64_t v13 = 40 * a2;
      do
      {
        *(v12 - 1) = 0x7FFFFFFFLL;
        *unint64_t v12 = 0;
        *(v12 - 2) = 0x8000000080000000;
        v12[1] = 0;
        v12[2] = 0;
        v12 += 5;
        v13 -= 40;
      }
      while (v13);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v4;
    }
    return;
  }
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v4 - (unsigned char *)*a1) >> 3);
  unint64_t v7 = v6 + a2;
  if (v6 + a2 > 0x666666666666666) {
    sub_2E00();
  }
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 3);
  if (2 * v8 > v7) {
    unint64_t v7 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v7;
  }
  if (v9)
  {
    if (v9 > 0x666666666666666) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(40 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  size_t v14 = &v10[40 * v6];
  BOOL v15 = &v10[40 * v9];
  uint64_t v16 = 40 * a2;
  unint64_t v17 = &v14[40 * a2];
  BOOL v18 = v14 + 16;
  do
  {
    *(v18 - 1) = 0x7FFFFFFFLL;
    *BOOL v18 = 0;
    *(v18 - 2) = 0x8000000080000000;
    v18[1] = 0;
    void v18[2] = 0;
    v18 += 5;
    v16 -= 40;
  }
  while (v16);
  uint64_t v19 = (char *)*a1;
  uint64_t v20 = (char *)a1[1];
  if (v20 == *a1)
  {
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (!v20) {
      return;
    }
    goto LABEL_32;
  }
  uint64_t v21 = 0;
  do
  {
    unint64_t v22 = &v14[v21];
    unint64_t v23 = &v20[v21];
    uint64_t v24 = *(void *)&v20[v21 - 40];
    *((_DWORD *)v22 - 8) = *(_DWORD *)&v20[v21 - 32];
    *((void *)v22 - 5) = v24;
    *((void *)v22 - 2) = 0;
    *((void *)v22 - 1) = 0;
    *((void *)v22 - 3) = 0;
    *(_OWORD *)(v22 - 24) = *(_OWORD *)&v20[v21 - 24];
    *((void *)v22 - 1) = *(void *)&v20[v21 - 8];
    *((void *)v23 - 3) = 0;
    *((void *)v23 - 2) = 0;
    *((void *)v23 - 1) = 0;
    v21 -= 40;
  }
  while (&v20[v21] != v19);
  unint64_t v25 = (char *)*a1;
  uint64_t v20 = (char *)a1[1];
  *a1 = &v14[v21];
  a1[1] = v17;
  a1[2] = v15;
  if (v20 != v25)
  {
    do
    {
      unint64_t v26 = (void *)*((void *)v20 - 3);
      if (v26)
      {
        *((void *)v20 - 2) = v26;
        operator delete(v26);
      }
      v20 -= 40;
    }
    while (v20 != v25);
    uint64_t v20 = v25;
  }
  if (v20)
  {
LABEL_32:
    operator delete(v20);
  }
}

void sub_B53D14(unint64_t a1, void *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v10 = a2 - 2;
    BOOL v11 = a2 - 4;
    unint64_t v12 = a2 - 6;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          uint64_t v15 = (uint64_t)((uint64_t)a2 - v13) >> 4;
          if (v5 || !v4)
          {
            switch(v15)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*((_DWORD *)a2 - 3) < *(_DWORD *)(v13 + 4))
                {
                  long long v166 = *(_OWORD *)v13;
                  uint64_t v84 = *(a2 - 2);
                  *(void *)(v13 + 5) = *(void *)((char *)a2 - 11);
                  *(void *)unint64_t v13 = v84;
                  *(void *)((char *)a2 - 11) = *(void *)((char *)&v166 + 5);
                  *(a2 - 2) = v166;
                }
                return;
              case 3:
                uint64_t v85 = (long long *)(v13 + 16);
                int v86 = *(_DWORD *)(v13 + 20);
                int v87 = *((_DWORD *)a2 - 3);
                if (v86 >= *(_DWORD *)(v13 + 4))
                {
                  if (v87 < v86)
                  {
                    long long v173 = *v85;
                    uint64_t v134 = *v10;
                    *(void *)(v13 + 21) = *(void *)((char *)a2 - 11);
                    *(void *)uint64_t v85 = v134;
                    *(void *)((char *)a2 - 11) = *(void *)((char *)&v173 + 5);
                    uint64_t *v10 = v173;
                    if (*(_DWORD *)(v13 + 20) < *(_DWORD *)(v13 + 4))
                    {
                      long long v174 = *(_OWORD *)v13;
                      *(void *)unint64_t v13 = *(void *)v85;
                      *(void *)(v13 + 5) = *(void *)(v13 + 21);
                      *(void *)uint64_t v85 = v174;
                      *(void *)(v13 + 21) = *(void *)((char *)&v174 + 5);
                    }
                  }
                }
                else
                {
                  if (v87 >= v86)
                  {
                    long long v175 = *(_OWORD *)v13;
                    *(void *)unint64_t v13 = *(void *)v85;
                    *(void *)(v13 + 5) = *(void *)(v13 + 21);
                    *(void *)uint64_t v85 = v175;
                    *(void *)(v13 + 21) = *(void *)((char *)&v175 + 5);
                    if (*((_DWORD *)a2 - 3) >= *(_DWORD *)(v13 + 20)) {
                      return;
                    }
                    long long v167 = *v85;
                    uint64_t v142 = *v10;
                    *(void *)(v13 + 21) = *(void *)((char *)a2 - 11);
                    *(void *)uint64_t v85 = v142;
                  }
                  else
                  {
                    long long v167 = *(_OWORD *)v13;
                    uint64_t v88 = *v10;
                    *(void *)(v13 + 5) = *(void *)((char *)a2 - 11);
                    *(void *)unint64_t v13 = v88;
                  }
                  *(void *)((char *)a2 - 11) = *(void *)((char *)&v167 + 5);
                  uint64_t *v10 = v167;
                }
                break;
              case 4:
                sub_B550A8(v13, v13 + 16, (long long *)(v13 + 32), (uint64_t)(a2 - 2));
                return;
              case 5:
                BOOL v89 = (long long *)(v13 + 16);
                BOOL v90 = (long long *)(v13 + 32);
                uint64_t v91 = (long long *)(v13 + 48);
                sub_B550A8(v13, v13 + 16, (long long *)(v13 + 32), v13 + 48);
                if (*((_DWORD *)a2 - 3) < *(_DWORD *)(v13 + 52))
                {
                  long long v168 = *v91;
                  uint64_t v92 = *(a2 - 2);
                  *(void *)(v13 + 53) = *(void *)((char *)a2 - 11);
                  *(void *)uint64_t v91 = v92;
                  *(void *)((char *)a2 - 11) = *(void *)((char *)&v168 + 5);
                  *(a2 - 2) = v168;
                  if (*(_DWORD *)(v13 + 52) < *(_DWORD *)(v13 + 36))
                  {
                    long long v169 = *v90;
                    *(void *)BOOL v90 = *(void *)v91;
                    *(void *)(v13 + 37) = *(void *)(v13 + 53);
                    *(void *)uint64_t v91 = v169;
                    *(void *)(v13 + 53) = *(void *)((char *)&v169 + 5);
                    if (*(_DWORD *)(v13 + 36) < *(_DWORD *)(v13 + 20))
                    {
                      long long v170 = *v89;
                      *(void *)BOOL v89 = *(void *)v90;
                      *(void *)(v13 + 21) = *(void *)(v13 + 37);
                      *(void *)BOOL v90 = v170;
                      *(void *)(v13 + 37) = *(void *)((char *)&v170 + 5);
                      if (*(_DWORD *)(v13 + 20) < *(_DWORD *)(v13 + 4))
                      {
                        long long v171 = *(_OWORD *)v13;
                        *(void *)unint64_t v13 = *(void *)v89;
                        *(void *)(v13 + 5) = *(void *)(v13 + 21);
                        *(void *)BOOL v89 = v171;
                        *(void *)(v13 + 21) = *(void *)((char *)&v171 + 5);
                      }
                    }
                  }
                }
                return;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v14 <= 383)
          {
            long long v93 = (_DWORD *)(v13 + 16);
            BOOL v95 = (void *)v13 == a2 || v93 == (_DWORD *)a2;
            if (a4)
            {
              if (!v95)
              {
                uint64_t v96 = 0;
                unint64_t v97 = (_DWORD *)v13;
                do
                {
                  char v99 = v93;
                  int v100 = v97[5];
                  if (v100 < v97[1])
                  {
                    int v101 = *v99;
                    uint64_t v102 = *((void *)v97 + 3);
                    uint64_t v103 = v96;
                    do
                    {
                      uint64_t v104 = v13 + v103;
                      *(void *)(v104 + 16) = *(void *)(v13 + v103);
                      *(void *)(v104 + 21) = *(void *)(v13 + v103 + 5);
                      if (!v103)
                      {
                        uint64_t v98 = v13;
                        goto LABEL_123;
                      }
                      v103 -= 16;
                    }
                    while (v100 < *(_DWORD *)(v104 - 12));
                    uint64_t v98 = v13 + v103 + 16;
LABEL_123:
                    *(_DWORD *)uint64_t v98 = v101;
                    *(_DWORD *)(v98 + 4) = v100;
                    *(_DWORD *)(v98 + 8) = v102;
                    *(unsigned char *)(v98 + 12) = BYTE4(v102);
                  }
                  long long v93 = v99 + 4;
                  v96 += 16;
                  unint64_t v97 = v99;
                }
                while (v99 + 4 != (_DWORD *)a2);
              }
            }
            else if (!v95)
            {
              do
              {
                uint64_t v135 = v93;
                int v136 = *(_DWORD *)(a1 + 20);
                if (v136 < *(_DWORD *)(a1 + 4))
                {
                  int v137 = *v93;
                  uint64_t v138 = *(void *)(a1 + 24);
                  unint64_t v139 = v135;
                  do
                  {
                    char v140 = v139;
                    uint64_t v141 = *((void *)v139 - 2);
                    v139 -= 4;
                    *char v140 = v141;
                    *(void *)((char *)v140 + 5) = *(void *)((char *)v140 - 11);
                  }
                  while (v136 < *((_DWORD *)v140 - 7));
                  *unint64_t v139 = v137;
                  v139[1] = v136;
                  v139[2] = v138;
                  *((unsigned char *)v139 + 12) = BYTE4(v138);
                }
                long long v93 = v135 + 4;
                a1 = (unint64_t)v135;
              }
              while (v135 + 4 != (_DWORD *)a2);
            }
            return;
          }
          if (!a3)
          {
            if ((void *)v13 != a2)
            {
              int64_t v105 = (unint64_t)(v15 - 2) >> 1;
              int64_t v106 = v105;
              do
              {
                if (v105 >= v106)
                {
                  uint64_t v108 = (2 * v106) | 1;
                  unint64_t v109 = v13 + 16 * v108;
                  if (2 * v106 + 2 < v15)
                  {
                    BOOL v107 = *(_DWORD *)(v109 + 4) < *(_DWORD *)(v109 + 20);
                    v109 += 16 * v107;
                    if (v107) {
                      uint64_t v108 = 2 * v106 + 2;
                    }
                  }
                  unint64_t v110 = v13 + 16 * v106;
                  int v111 = *(_DWORD *)(v110 + 4);
                  if (*(_DWORD *)(v109 + 4) >= v111)
                  {
                    int v112 = *(_DWORD *)v110;
                    uint64_t v113 = *(void *)(v110 + 8);
                    do
                    {
                      long long v114 = (void *)v110;
                      unint64_t v110 = v109;
                      uint64_t v115 = *(void *)v109;
                      *(void *)((char *)v114 + 5) = *(void *)(v110 + 5);
                      void *v114 = v115;
                      if (v105 < v108) {
                        break;
                      }
                      uint64_t v116 = (2 * v108) | 1;
                      unint64_t v109 = v13 + 16 * v116;
                      uint64_t v117 = 2 * v108 + 2;
                      if (v117 < v15)
                      {
                        BOOL v107 = *(_DWORD *)(v109 + 4) < *(_DWORD *)(v109 + 20);
                        v109 += 16 * v107;
                        if (v107) {
                          uint64_t v116 = v117;
                        }
                      }
                      uint64_t v108 = v116;
                    }
                    while (*(_DWORD *)(v109 + 4) >= v111);
                    *(_DWORD *)unint64_t v110 = v112;
                    *(_DWORD *)(v110 + 4) = v111;
                    *(_DWORD *)(v110 + 8) = v113;
                    *(unsigned char *)(v110 + 12) = BYTE4(v113);
                  }
                }
                BOOL v107 = v106-- <= 0;
              }
              while (!v107);
              uint64_t v118 = (unint64_t)v14 >> 4;
              do
              {
                uint64_t v119 = 0;
                long long v172 = *(_OWORD *)v13;
                unint64_t v120 = (void *)v13;
                do
                {
                  uint64_t v122 = (uint64_t)&v120[2 * v119 + 2];
                  uint64_t v123 = (2 * v119) | 1;
                  uint64_t v124 = 2 * v119 + 2;
                  if (v124 < v118)
                  {
                    BOOL v107 = *(_DWORD *)(v122 + 4) < *(_DWORD *)(v122 + 20);
                    v122 += 16 * v107;
                    if (v107) {
                      uint64_t v123 = v124;
                    }
                  }
                  uint64_t v121 = *(void *)v122;
                  *(void *)((char *)v120 + 5) = *(void *)(v122 + 5);
                  void *v120 = v121;
                  unint64_t v120 = (void *)v122;
                  uint64_t v119 = v123;
                }
                while (v123 <= (uint64_t)((unint64_t)(v118 - 2) >> 1));
                a2 -= 2;
                if ((void *)v122 == a2)
                {
                  *(void *)(v122 + 5) = *(void *)((char *)&v172 + 5);
                  *(void *)uint64_t v122 = v172;
                }
                else
                {
                  uint64_t v125 = *a2;
                  *(void *)(v122 + 5) = *(void *)((char *)a2 + 5);
                  *(void *)uint64_t v122 = v125;
                  *(void *)((char *)a2 + 5) = *(void *)((char *)&v172 + 5);
                  *a2 = v172;
                  uint64_t v126 = v122 - v13 + 16;
                  if (v126 >= 17)
                  {
                    unint64_t v127 = (((unint64_t)v126 >> 4) - 2) >> 1;
                    uint64_t v128 = v13 + 16 * v127;
                    int v129 = *(_DWORD *)(v122 + 4);
                    if (*(_DWORD *)(v128 + 4) < v129)
                    {
                      int v130 = *(_DWORD *)v122;
                      uint64_t v131 = *(void *)(v122 + 8);
                      do
                      {
                        char v132 = (void *)v122;
                        uint64_t v122 = v128;
                        uint64_t v133 = *(void *)v128;
                        *(void *)((char *)v132 + 5) = *(void *)(v122 + 5);
                        *char v132 = v133;
                        if (!v127) {
                          break;
                        }
                        unint64_t v127 = (v127 - 1) >> 1;
                        uint64_t v128 = v13 + 16 * v127;
                      }
                      while (*(_DWORD *)(v128 + 4) < v129);
                      *(_DWORD *)uint64_t v122 = v130;
                      *(_DWORD *)(v122 + 4) = v129;
                      *(_DWORD *)(v122 + 8) = v131;
                      *(unsigned char *)(v122 + 12) = BYTE4(v131);
                    }
                  }
                }
                BOOL v107 = v118-- <= 2;
              }
              while (!v107);
            }
            return;
          }
          unint64_t v16 = (unint64_t)v15 >> 1;
          unint64_t v17 = v13 + 16 * ((unint64_t)v15 >> 1);
          int v18 = *((_DWORD *)a2 - 3);
          if ((unint64_t)v14 >= 0x801) {
            break;
          }
          int v21 = *(_DWORD *)(v13 + 4);
          if (v21 < *(_DWORD *)(v17 + 4))
          {
            if (v18 >= v21)
            {
              long long v153 = *(_OWORD *)v17;
              uint64_t v37 = *(void *)v13;
              *(void *)(v17 + 5) = *(void *)(v13 + 5);
              *(void *)unint64_t v17 = v37;
              *(void *)(v13 + 5) = *(void *)((char *)&v153 + 5);
              *(void *)unint64_t v13 = v153;
              if (*((_DWORD *)a2 - 3) >= *(_DWORD *)(v13 + 4)) {
                goto LABEL_32;
              }
              long long v144 = *(_OWORD *)v13;
              uint64_t v38 = *v10;
              *(void *)(v13 + 5) = *(void *)((char *)a2 - 11);
              *(void *)unint64_t v13 = v38;
            }
            else
            {
              long long v144 = *(_OWORD *)v17;
              uint64_t v22 = *v10;
              *(void *)(v17 + 5) = *(void *)((char *)a2 - 11);
              *(void *)unint64_t v17 = v22;
            }
            *(void *)((char *)a2 - 11) = *(void *)((char *)&v144 + 5);
            uint64_t *v10 = v144;
LABEL_32:
            --a3;
            if ((a4 & 1) == 0) {
              goto LABEL_56;
            }
            goto LABEL_33;
          }
          if (v18 >= v21) {
            goto LABEL_32;
          }
          long long v147 = *(_OWORD *)v13;
          uint64_t v25 = *v10;
          *(void *)(v13 + 5) = *(void *)((char *)a2 - 11);
          *(void *)unint64_t v13 = v25;
          *(void *)((char *)a2 - 11) = *(void *)((char *)&v147 + 5);
          uint64_t *v10 = v147;
          if (*(_DWORD *)(v13 + 4) >= *(_DWORD *)(v17 + 4)) {
            goto LABEL_32;
          }
          long long v148 = *(_OWORD *)v17;
          uint64_t v26 = *(void *)v13;
          *(void *)(v17 + 5) = *(void *)(v13 + 5);
          *(void *)unint64_t v17 = v26;
          *(void *)(v13 + 5) = *(void *)((char *)&v148 + 5);
          *(void *)unint64_t v13 = v148;
          --a3;
          if (a4) {
            goto LABEL_33;
          }
LABEL_56:
          int v39 = *(_DWORD *)(v13 + 4);
          if (*(_DWORD *)(v13 - 12) < v39) {
            goto LABEL_57;
          }
          if (v39 < *((_DWORD *)a2 - 3))
          {
            unint64_t v71 = v13;
            do
            {
              unint64_t v13 = v71 + 16;
              int v72 = *(_DWORD *)(v71 + 20);
              v71 += 16;
            }
            while (v39 >= v72);
          }
          else
          {
            unint64_t v73 = v13 + 16;
            do
            {
              unint64_t v13 = v73;
              if (v73 >= (unint64_t)a2) {
                break;
              }
              int v74 = *(_DWORD *)(v73 + 4);
              v73 += 16;
            }
            while (v39 >= v74);
          }
          int v75 = a2;
          if (v13 < (unint64_t)a2)
          {
            BOOL v76 = a2;
            do
            {
              int v75 = v76 - 2;
              int v77 = *((_DWORD *)v76 - 3);
              v76 -= 2;
            }
            while (v39 < v77);
          }
          int v78 = *(_DWORD *)a1;
          uint64_t v79 = *(void *)(a1 + 8);
          while (v13 < (unint64_t)v75)
          {
            long long v165 = *(_OWORD *)v13;
            uint64_t v80 = *v75;
            *(void *)(v13 + 5) = *(void *)((char *)v75 + 5);
            *(void *)unint64_t v13 = v80;
            *(void *)((char *)v75 + 5) = *(void *)((char *)&v165 + 5);
            *int v75 = v165;
            do
            {
              int v81 = *(_DWORD *)(v13 + 20);
              v13 += 16;
            }
            while (v39 >= v81);
            do
            {
              int v82 = *((_DWORD *)v75 - 3);
              v75 -= 2;
            }
            while (v39 < v82);
          }
          BOOL v4 = v13 - 16 >= a1;
          BOOL v5 = v13 - 16 == a1;
          if (v13 - 16 != a1)
          {
            uint64_t v83 = *(void *)(v13 - 16);
            *(void *)(a1 + 5) = *(void *)(v13 - 11);
            *(void *)a1 = v83;
          }
          a4 = 0;
          *(_DWORD *)(v13 - 16) = v78;
          *(_DWORD *)(v13 - 12) = v39;
          *(_DWORD *)(v13 - 8) = v79;
          *(unsigned char *)(v13 - 4) = BYTE4(v79);
        }
        int v19 = *(_DWORD *)(v17 + 4);
        if (v19 >= *(_DWORD *)(v13 + 4))
        {
          if (v18 < v19)
          {
            long long v145 = *(_OWORD *)v17;
            uint64_t v23 = *v10;
            *(void *)(v17 + 5) = *(void *)((char *)a2 - 11);
            *(void *)unint64_t v17 = v23;
            *(void *)((char *)a2 - 11) = *(void *)((char *)&v145 + 5);
            uint64_t *v10 = v145;
            if (*(_DWORD *)(v17 + 4) < *(_DWORD *)(v13 + 4))
            {
              long long v146 = *(_OWORD *)v13;
              uint64_t v24 = *(void *)v17;
              *(void *)(v13 + 5) = *(void *)(v17 + 5);
              *(void *)unint64_t v13 = v24;
              *(void *)(v17 + 5) = *(void *)((char *)&v146 + 5);
              *(void *)unint64_t v17 = v146;
            }
          }
        }
        else
        {
          if (v18 >= v19)
          {
            long long v149 = *(_OWORD *)v13;
            uint64_t v27 = *(void *)v17;
            *(void *)(v13 + 5) = *(void *)(v17 + 5);
            *(void *)unint64_t v13 = v27;
            *(void *)(v17 + 5) = *(void *)((char *)&v149 + 5);
            *(void *)unint64_t v17 = v149;
            if (*((_DWORD *)a2 - 3) >= *(_DWORD *)(v17 + 4)) {
              goto LABEL_23;
            }
            long long v143 = *(_OWORD *)v17;
            uint64_t v28 = *v10;
            *(void *)(v17 + 5) = *(void *)((char *)a2 - 11);
            *(void *)unint64_t v17 = v28;
          }
          else
          {
            long long v143 = *(_OWORD *)v13;
            uint64_t v20 = *v10;
            *(void *)(v13 + 5) = *(void *)((char *)a2 - 11);
            *(void *)unint64_t v13 = v20;
          }
          *(void *)((char *)a2 - 11) = *(void *)((char *)&v143 + 5);
          uint64_t *v10 = v143;
        }
LABEL_23:
        BOOL v29 = (long long *)(v13 + 16);
        unint64_t v30 = v13 + 16 * v16;
        unint64_t v31 = v30 - 16;
        int v32 = *(_DWORD *)(v30 - 12);
        int v33 = *((_DWORD *)a2 - 7);
        if (v32 >= *(_DWORD *)(v13 + 20))
        {
          if (v33 < v32)
          {
            long long v151 = *(_OWORD *)v31;
            uint64_t v35 = *v11;
            *(void *)(v31 + 5) = *(void *)((char *)a2 - 27);
            *(void *)unint64_t v31 = v35;
            *(void *)((char *)a2 - 27) = *(void *)((char *)&v151 + 5);
            *BOOL v11 = v151;
            if (*(_DWORD *)(v31 + 4) < *(_DWORD *)(v13 + 20))
            {
              long long v152 = *v29;
              uint64_t v36 = *(void *)v31;
              *(void *)(v13 + 21) = *(void *)(v31 + 5);
              *(void *)BOOL v29 = v36;
              *(void *)(v31 + 5) = *(void *)((char *)&v152 + 5);
              *(void *)unint64_t v31 = v152;
            }
          }
        }
        else
        {
          if (v33 >= v32)
          {
            long long v154 = *v29;
            uint64_t v40 = *(void *)v31;
            *(void *)(v13 + 21) = *(void *)(v31 + 5);
            *(void *)BOOL v29 = v40;
            *(void *)(v31 + 5) = *(void *)((char *)&v154 + 5);
            *(void *)unint64_t v31 = v154;
            if (*((_DWORD *)a2 - 7) >= *(_DWORD *)(v31 + 4)) {
              goto LABEL_37;
            }
            long long v150 = *(_OWORD *)v31;
            uint64_t v41 = *v11;
            *(void *)(v31 + 5) = *(void *)((char *)a2 - 27);
            *(void *)unint64_t v31 = v41;
          }
          else
          {
            long long v150 = *v29;
            uint64_t v34 = *v11;
            *(void *)(v13 + 21) = *(void *)((char *)a2 - 27);
            *(void *)BOOL v29 = v34;
          }
          *(void *)((char *)a2 - 27) = *(void *)((char *)&v150 + 5);
          *BOOL v11 = v150;
        }
LABEL_37:
        BOOL v42 = (long long *)(v13 + 32);
        unint64_t v43 = v13 + 16 * v16;
        unint64_t v44 = v43 + 16;
        int v45 = *(_DWORD *)(v43 + 20);
        int v46 = *((_DWORD *)a2 - 11);
        if (v45 >= *(_DWORD *)(v13 + 36))
        {
          if (v46 < v45)
          {
            long long v156 = *(_OWORD *)v44;
            uint64_t v48 = *v12;
            *(void *)(v44 + 5) = *(void *)((char *)a2 - 43);
            *(void *)unint64_t v44 = v48;
            *(void *)((char *)a2 - 43) = *(void *)((char *)&v156 + 5);
            *unint64_t v12 = v156;
            if (*(_DWORD *)(v44 + 4) < *(_DWORD *)(v13 + 36))
            {
              long long v157 = *v42;
              uint64_t v49 = *(void *)v44;
              *(void *)(v13 + 37) = *(void *)(v44 + 5);
              *(void *)BOOL v42 = v49;
              *(void *)(v44 + 5) = *(void *)((char *)&v157 + 5);
              *(void *)unint64_t v44 = v157;
            }
          }
        }
        else
        {
          if (v46 >= v45)
          {
            long long v158 = *v42;
            uint64_t v50 = *(void *)v44;
            *(void *)(v13 + 37) = *(void *)(v44 + 5);
            *(void *)BOOL v42 = v50;
            *(void *)(v44 + 5) = *(void *)((char *)&v158 + 5);
            *(void *)unint64_t v44 = v158;
            if (*((_DWORD *)a2 - 11) >= *(_DWORD *)(v44 + 4)) {
              goto LABEL_46;
            }
            long long v155 = *(_OWORD *)v44;
            uint64_t v51 = *v12;
            *(void *)(v44 + 5) = *(void *)((char *)a2 - 43);
            *(void *)unint64_t v44 = v51;
          }
          else
          {
            long long v155 = *v42;
            uint64_t v47 = *v12;
            *(void *)(v13 + 37) = *(void *)((char *)a2 - 43);
            *(void *)BOOL v42 = v47;
          }
          *(void *)((char *)a2 - 43) = *(void *)((char *)&v155 + 5);
          *unint64_t v12 = v155;
        }
LABEL_46:
        int v52 = *(_DWORD *)(v17 + 4);
        int v53 = *(_DWORD *)(v44 + 4);
        if (v52 >= *(_DWORD *)(v31 + 4))
        {
          if (v53 < v52)
          {
            long long v160 = *(_OWORD *)v17;
            *(void *)unint64_t v17 = *(void *)v44;
            *(void *)(v17 + 5) = *(void *)(v44 + 5);
            *(void *)(v44 + 5) = *(void *)((char *)&v160 + 5);
            *(void *)unint64_t v44 = v160;
            if (*(_DWORD *)(v17 + 4) < *(_DWORD *)(v31 + 4))
            {
              long long v161 = *(_OWORD *)v31;
              *(void *)unint64_t v31 = *(void *)v17;
              *(void *)(v31 + 5) = *(void *)(v17 + 5);
              *(void *)(v17 + 5) = *(void *)((char *)&v161 + 5);
              *(void *)unint64_t v17 = v161;
            }
          }
        }
        else
        {
          if (v53 >= v52)
          {
            long long v162 = *(_OWORD *)v31;
            *(void *)unint64_t v31 = *(void *)v17;
            *(void *)(v31 + 5) = *(void *)(v17 + 5);
            *(void *)(v17 + 5) = *(void *)((char *)&v162 + 5);
            *(void *)unint64_t v17 = v162;
            if (*(_DWORD *)(v44 + 4) >= *(_DWORD *)(v17 + 4)) {
              goto LABEL_55;
            }
            long long v159 = *(_OWORD *)v17;
            *(void *)unint64_t v17 = *(void *)v44;
            *(void *)(v17 + 5) = *(void *)(v44 + 5);
          }
          else
          {
            long long v159 = *(_OWORD *)v31;
            *(void *)unint64_t v31 = *(void *)v44;
            *(void *)(v31 + 5) = *(void *)(v44 + 5);
          }
          *(void *)(v44 + 5) = *(void *)((char *)&v159 + 5);
          *(void *)unint64_t v44 = v159;
        }
LABEL_55:
        long long v163 = *(_OWORD *)v13;
        uint64_t v54 = *(void *)v17;
        *(void *)(v13 + 5) = *(void *)(v17 + 5);
        *(void *)unint64_t v13 = v54;
        *(void *)(v17 + 5) = *(void *)((char *)&v163 + 5);
        *(void *)unint64_t v17 = v163;
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
LABEL_33:
        int v39 = *(_DWORD *)(v13 + 4);
LABEL_57:
        uint64_t v55 = 0;
        int v56 = *(_DWORD *)v13;
        uint64_t v57 = *(void *)(v13 + 8);
        do
        {
          int v58 = *(_DWORD *)(v13 + v55 + 20);
          v55 += 16;
        }
        while (v58 < v39);
        unint64_t v59 = v13 + v55;
        uint64_t v60 = a2;
        if (v55 == 16)
        {
          uint64_t v63 = a2;
          while (v59 < (unint64_t)v63)
          {
            unint64_t v61 = v63 - 2;
            int v64 = *((_DWORD *)v63 - 3);
            v63 -= 2;
            if (v64 < v39) {
              goto LABEL_65;
            }
          }
          unint64_t v61 = v63;
          unint64_t v13 = v59;
        }
        else
        {
          do
          {
            unint64_t v61 = v60 - 2;
            int v62 = *((_DWORD *)v60 - 3);
            v60 -= 2;
          }
          while (v62 >= v39);
LABEL_65:
          unint64_t v13 = v59;
          if (v59 < (unint64_t)v61)
          {
            uint64_t v65 = v61;
            do
            {
              long long v164 = *(_OWORD *)v13;
              uint64_t v66 = *v65;
              *(void *)(v13 + 5) = *(void *)((char *)v65 + 5);
              *(void *)unint64_t v13 = v66;
              *(void *)((char *)v65 + 5) = *(void *)((char *)&v164 + 5);
              *uint64_t v65 = v164;
              do
              {
                int v67 = *(_DWORD *)(v13 + 20);
                v13 += 16;
              }
              while (v67 < v39);
              do
              {
                int v68 = *((_DWORD *)v65 - 3);
                v65 -= 2;
              }
              while (v68 >= v39);
            }
            while (v13 < (unint64_t)v65);
          }
        }
        if (v13 - 16 != a1)
        {
          uint64_t v69 = *(void *)(v13 - 16);
          *(void *)(a1 + 5) = *(void *)(v13 - 11);
          *(void *)a1 = v69;
        }
        *(_DWORD *)(v13 - 16) = v56;
        *(_DWORD *)(v13 - 12) = v39;
        *(_DWORD *)(v13 - 8) = v57;
        *(unsigned char *)(v13 - 4) = BYTE4(v57);
        if (v59 >= (unint64_t)v61) {
          break;
        }
LABEL_76:
        sub_B53D14(a1, v13 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v70 = sub_B54B94(a1, v13 - 16);
      if (sub_B54B94(v13, (uint64_t)a2)) {
        break;
      }
      if (!v70) {
        goto LABEL_76;
      }
    }
    a2 = (void *)(v13 - 16);
    if (!v70) {
      continue;
    }
    break;
  }
}

BOOL sub_B54B94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 4))
      {
        long long v32 = *(_OWORD *)a1;
        uint64_t v6 = *(void *)(a2 - 11);
        *(void *)a1 = *(void *)(a2 - 16);
        *(void *)(a1 + 5) = v6;
        *(void *)(a2 - 11) = *(void *)((char *)&v32 + 5);
        *(void *)(a2 - 16) = v32;
      }
      return result;
    case 3:
      unint64_t v7 = (long long *)(a1 + 16);
      unint64_t v8 = (void *)(a2 - 16);
      int v9 = *(_DWORD *)(a1 + 20);
      int v10 = *(_DWORD *)(a2 - 12);
      if (v9 >= *(_DWORD *)(a1 + 4))
      {
        if (v10 < v9)
        {
          long long v39 = *v7;
          uint64_t v21 = *(void *)(a2 - 11);
          *(void *)unint64_t v7 = *v8;
          *(void *)(a1 + 21) = v21;
          *(void *)(a2 - 11) = *(void *)((char *)&v39 + 5);
          void *v8 = v39;
          if (*(_DWORD *)(a1 + 20) < *(_DWORD *)(a1 + 4))
          {
            long long v40 = *(_OWORD *)a1;
            *(void *)a1 = *(void *)v7;
            *(void *)(a1 + 5) = *(void *)(a1 + 21);
            *(void *)unint64_t v7 = v40;
            *(void *)(a1 + 21) = *(void *)((char *)&v40 + 5);
          }
        }
      }
      else
      {
        if (v10 >= v9)
        {
          long long v43 = *(_OWORD *)a1;
          *(void *)a1 = *(void *)v7;
          *(void *)(a1 + 5) = *(void *)(a1 + 21);
          *(void *)unint64_t v7 = v43;
          *(void *)(a1 + 21) = *(void *)((char *)&v43 + 5);
          if (*(_DWORD *)(a2 - 12) >= *(_DWORD *)(a1 + 20)) {
            return result;
          }
          long long v33 = *v7;
          uint64_t v22 = *(void *)(a2 - 11);
          *(void *)unint64_t v7 = *v8;
          *(void *)(a1 + 21) = v22;
        }
        else
        {
          long long v33 = *(_OWORD *)a1;
          uint64_t v11 = *(void *)(a2 - 11);
          *(void *)a1 = *v8;
          *(void *)(a1 + 5) = v11;
        }
        *(void *)(a2 - 11) = *(void *)((char *)&v33 + 5);
        void *v8 = v33;
      }
      return result;
    case 4:
      sub_B550A8(a1, a1 + 16, (long long *)(a1 + 32), a2 - 16);
      return 1;
    case 5:
      unint64_t v17 = (long long *)(a1 + 16);
      int v18 = (long long *)(a1 + 32);
      int v19 = (long long *)(a1 + 48);
      sub_B550A8(a1, a1 + 16, (long long *)(a1 + 32), a1 + 48);
      if (*(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 52))
      {
        long long v35 = *v19;
        uint64_t v20 = *(void *)(a2 - 11);
        *(void *)int v19 = *(void *)(a2 - 16);
        *(void *)(a1 + 53) = v20;
        *(void *)(a2 - 11) = *(void *)((char *)&v35 + 5);
        *(void *)(a2 - 16) = v35;
        if (*(_DWORD *)(a1 + 52) < *(_DWORD *)(a1 + 36))
        {
          long long v36 = *v18;
          *(void *)int v18 = *(void *)v19;
          *(void *)(a1 + 37) = *(void *)(a1 + 53);
          *(void *)int v19 = v36;
          *(void *)(a1 + 53) = *(void *)((char *)&v36 + 5);
          if (*(_DWORD *)(a1 + 36) < *(_DWORD *)(a1 + 20))
          {
            long long v37 = *v17;
            *(void *)unint64_t v17 = *(void *)v18;
            *(void *)(a1 + 21) = *(void *)(a1 + 37);
            *(void *)int v18 = v37;
            *(void *)(a1 + 37) = *(void *)((char *)&v37 + 5);
            if (*(_DWORD *)(a1 + 20) < *(_DWORD *)(a1 + 4))
            {
              long long v38 = *(_OWORD *)a1;
              *(void *)a1 = *(void *)v17;
              *(void *)(a1 + 5) = *(void *)(a1 + 21);
              *(void *)unint64_t v17 = v38;
              *(void *)(a1 + 21) = *(void *)((char *)&v38 + 5);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v12 = a1 + 32;
      unint64_t v13 = (long long *)(a1 + 16);
      int v14 = *(_DWORD *)(a1 + 20);
      int v15 = *(_DWORD *)(a1 + 4);
      int v16 = *(_DWORD *)(a1 + 36);
      if (v14 >= v15)
      {
        if (v16 < v14)
        {
          long long v41 = *v13;
          *(void *)unint64_t v13 = *(void *)v12;
          *(void *)(a1 + 21) = *(void *)(a1 + 37);
          *(void *)uint64_t v12 = v41;
          *(void *)(a1 + 37) = *(void *)((char *)&v41 + 5);
          if (*(_DWORD *)(a1 + 20) < v15)
          {
            long long v42 = *(_OWORD *)a1;
            *(void *)a1 = *(void *)v13;
            *(void *)(a1 + 5) = *(void *)(a1 + 21);
            *(void *)unint64_t v13 = v42;
            *(void *)(a1 + 21) = *(void *)((char *)&v42 + 5);
          }
        }
      }
      else
      {
        if (v16 >= v14)
        {
          long long v44 = *(_OWORD *)a1;
          *(void *)a1 = *(void *)v13;
          *(void *)(a1 + 5) = *(void *)(a1 + 21);
          *(void *)unint64_t v13 = v44;
          *(void *)(a1 + 21) = *(void *)((char *)&v44 + 5);
          if (v16 >= *(_DWORD *)(a1 + 20)) {
            goto LABEL_29;
          }
          long long v34 = *v13;
          *(void *)unint64_t v13 = *(void *)v12;
          *(void *)(a1 + 21) = *(void *)(a1 + 37);
        }
        else
        {
          long long v34 = *(_OWORD *)a1;
          *(void *)a1 = *(void *)v12;
          *(void *)(a1 + 5) = *(void *)(a1 + 37);
        }
        *(void *)uint64_t v12 = v34;
        *(void *)(a1 + 37) = *(void *)((char *)&v34 + 5);
      }
LABEL_29:
      uint64_t v23 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v24 = 0;
      int v25 = 0;
      break;
  }
  while (1)
  {
    int v27 = *(_DWORD *)(v23 + 4);
    if (v27 < *(_DWORD *)(v12 + 4))
    {
      int v28 = *(_DWORD *)v23;
      uint64_t v29 = *(void *)(v23 + 8);
      uint64_t v30 = v24;
      do
      {
        uint64_t v31 = a1 + v30;
        *(void *)(v31 + 48) = *(void *)(a1 + v30 + 32);
        *(void *)(v31 + 53) = *(void *)(a1 + v30 + 37);
        if (v30 == -32)
        {
          uint64_t v26 = a1;
          goto LABEL_32;
        }
        v30 -= 16;
      }
      while (v27 < *(_DWORD *)(v31 + 20));
      uint64_t v26 = a1 + v30 + 48;
LABEL_32:
      *(_DWORD *)uint64_t v26 = v28;
      *(_DWORD *)(v26 + 4) = v27;
      *(_DWORD *)(v26 + 8) = v29;
      *(unsigned char *)(v26 + 12) = BYTE4(v29);
      if (++v25 == 8) {
        return v23 + 16 == a2;
      }
    }
    uint64_t v12 = v23;
    v24 += 16;
    v23 += 16;
    if (v23 == a2) {
      return 1;
    }
  }
}

__n128 sub_B550A8(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(a2 + 4);
  int v5 = *((_DWORD *)a3 + 1);
  if (v4 >= *(_DWORD *)(a1 + 4))
  {
    if (v5 < v4)
    {
      __n128 result = *(__n128 *)a2;
      __n128 v16 = *(__n128 *)a2;
      uint64_t v8 = *(void *)((char *)a3 + 5);
      *(void *)a2 = *(void *)a3;
      *(void *)(a2 + 5) = v8;
      *(void *)((char *)a3 + 5) = *(unint64_t *)((char *)v16.n128_u64 + 5);
      *(void *)a3 = v16.n128_u64[0];
      if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
      {
        __n128 result = *(__n128 *)a1;
        __n128 v17 = *(__n128 *)a1;
        uint64_t v9 = *(void *)(a2 + 5);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 5) = v9;
        *(void *)(a2 + 5) = *(unint64_t *)((char *)v17.n128_u64 + 5);
        *(void *)a2 = v17.n128_u64[0];
      }
    }
  }
  else
  {
    if (v5 < v4)
    {
      __n128 result = *(__n128 *)a1;
      __n128 v15 = *(__n128 *)a1;
      uint64_t v7 = *(void *)((char *)a3 + 5);
      *(void *)a1 = *(void *)a3;
      *(void *)(a1 + 5) = v7;
LABEL_9:
      *(void *)((char *)a3 + 5) = *(unint64_t *)((char *)v15.n128_u64 + 5);
      *(void *)a3 = v15.n128_u64[0];
      goto LABEL_10;
    }
    __n128 result = *(__n128 *)a1;
    __n128 v18 = *(__n128 *)a1;
    uint64_t v10 = *(void *)(a2 + 5);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 5) = v10;
    *(void *)(a2 + 5) = *(unint64_t *)((char *)v18.n128_u64 + 5);
    *(void *)a2 = v18.n128_u64[0];
    if (*((_DWORD *)a3 + 1) < *(_DWORD *)(a2 + 4))
    {
      __n128 result = *(__n128 *)a2;
      __n128 v15 = *(__n128 *)a2;
      uint64_t v11 = *(void *)((char *)a3 + 5);
      *(void *)a2 = *(void *)a3;
      *(void *)(a2 + 5) = v11;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_DWORD *)(a4 + 4) < *((_DWORD *)a3 + 1))
  {
    __n128 result = (__n128)*a3;
    long long v19 = *a3;
    uint64_t v12 = *(void *)(a4 + 5);
    *(void *)a3 = *(void *)a4;
    *(void *)((char *)a3 + 5) = v12;
    *(void *)(a4 + 5) = *(void *)((char *)&v19 + 5);
    *(void *)a4 = v19;
    if (*((_DWORD *)a3 + 1) < *(_DWORD *)(a2 + 4))
    {
      __n128 result = *(__n128 *)a2;
      __n128 v20 = *(__n128 *)a2;
      uint64_t v13 = *(void *)((char *)a3 + 5);
      *(void *)a2 = *(void *)a3;
      *(void *)(a2 + 5) = v13;
      *(void *)((char *)a3 + 5) = *(unint64_t *)((char *)v20.n128_u64 + 5);
      *(void *)a3 = v20.n128_u64[0];
      if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
      {
        __n128 result = *(__n128 *)a1;
        __n128 v21 = *(__n128 *)a1;
        uint64_t v14 = *(void *)(a2 + 5);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 5) = v14;
        *(void *)(a2 + 5) = *(unint64_t *)((char *)v21.n128_u64 + 5);
        *(void *)a2 = v21.n128_u64[0];
      }
    }
  }
  return result;
}

char *sub_B55260(void ***a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * (a1[2] - *a1);
  }
  if (0x8E38E38E38E38E39 * (a1[2] - *a1) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v19 = (uint64_t)(a1 + 2);
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(72 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  __n128 v17 = &v7[72 * v3];
  __n128 v18 = (void **)&v7[72 * v6];
  sub_9F6D1C(v17, a2);
  uint64_t v8 = (void **)(v17 + 72);
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = (void **)v17;
    a1[1] = v8;
    a1[2] = v18;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = &v17[v11 * 8];
      uint64_t v13 = &v10[v11];
      *((void *)v12 - 9) = 0;
      *((void *)v12 - 8) = 0;
      *((void *)v12 - 7) = 0;
      *(_OWORD *)(v12 - 72) = *(_OWORD *)&v10[v11 - 9];
      *((void *)v12 - 7) = v10[v11 - 7];
      *(v13 - 8) = 0;
      *(v13 - 7) = 0;
      *(v13 - 9) = 0;
      *(v12 - 48) = (char)v10[v11 - 6];
      *((void *)v12 - 4) = 0;
      *((void *)v12 - 3) = 0;
      *((void *)v12 - 5) = 0;
      *(_OWORD *)(v12 - 40) = *(_OWORD *)&v10[v11 - 5];
      *((void *)v12 - 3) = v10[v11 - 3];
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 3) = 0;
      uint64_t v14 = v10[v11 - 2];
      *(void *)(v12 - 9) = *(void **)((char *)&v10[v11 - 1] - 1);
      *((void *)v12 - 2) = v14;
      v11 -= 9;
    }
    while (&v10[v11] != v9);
    __n128 v15 = *a1;
    uint64_t v10 = a1[1];
    *a1 = (void **)&v17[v11 * 8];
    a1[1] = v8;
    a1[2] = v18;
    if (v10 != v15)
    {
      do
      {
        v10 -= 9;
        sub_9F5F58(v19, v10);
      }
      while (v10 != v15);
      uint64_t v10 = v15;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v17 + 72;
}

void sub_B55448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A21530((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B5545C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
    return a1;
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    return a1;
  }
}

void sub_B5550C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v51 = (void **)(a3 + 8);
  uint64_t v6 = *(void *)(a3 + 16);
  if (v5 == v6)
  {
    unsigned int v8 = 0;
    goto LABEL_18;
  }
  unint64_t v7 = v6 - v5 - 296;
  if (v7 < 0x128)
  {
    unsigned int v8 = 0;
    uint64_t v9 = *(void *)(a3 + 8);
    do
    {
LABEL_15:
      int v16 = *(_DWORD *)(v9 + 12);
      if (v16 + 1 > v8) {
        unsigned int v8 = v16 + 1;
      }
      v9 += 296;
    }
    while (v9 != v6);
    goto LABEL_18;
  }
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  unint64_t v12 = v7 / 0x128 + 1;
  uint64_t v9 = v5 + 296 * (v12 & 0x1FFFFFFFFFFFFFELL);
  uint64_t v13 = v12 & 0x1FFFFFFFFFFFFFELL;
  do
  {
    int v14 = *(_DWORD *)(v5 + 12);
    int v15 = *(_DWORD *)(v5 + 308);
    if (v14 + 1 > v10) {
      unsigned int v10 = v14 + 1;
    }
    if (v15 + 1 > v11) {
      unsigned int v11 = v15 + 1;
    }
    v5 += 592;
    v13 -= 2;
  }
  while (v13);
  if (v10 <= v11) {
    unsigned int v8 = v11;
  }
  else {
    unsigned int v8 = v10;
  }
  if (v12 != (v12 & 0x1FFFFFFFFFFFFFELL)) {
    goto LABEL_15;
  }
LABEL_18:
  __n128 v17 = *(long long **)(a2 + 8);
  __n128 v18 = *(long long **)(a2 + 16);
  if (v17 != v18)
  {
    int v52 = *(long long **)(a2 + 16);
    while (1)
    {
      uint64_t v19 = *(void *)(v4 + 24);
      if (!v19) {
        sub_29F82C();
      }
      if (!(*(unsigned int (**)(uint64_t, long long *))(*(void *)v19 + 48))(v19, v17)) {
        goto LABEL_20;
      }
      sub_9F68D4((uint64_t)__src, v17);
      if (HIDWORD(__src[0]) != -1) {
        HIDWORD(__src[0]) += v8;
      }
      v73[4] = __src[4];
      v73[5] = __src[5];
      uint64_t v74 = v56;
      v73[0] = __src[0];
      v73[1] = __src[1];
      v73[2] = __src[2];
      v73[3] = __src[3];
      uint64_t v77 = v59;
      long long v76 = v58;
      uint64_t v59 = 0;
      long long v58 = 0uLL;
      int v75 = v57;
      int v78 = v60;
      long long v80 = v62;
      long long v81 = v63;
      long long v79 = v61;
      uint64_t v82 = v64;
      long long v83 = v65;
      uint64_t v20 = v66;
      uint64_t v66 = 0;
      long long v65 = 0uLL;
      long long v85 = v67;
      uint64_t v21 = v70;
      uint64_t v84 = v20;
      uint64_t v86 = v68;
      long long v67 = 0uLL;
      uint64_t v68 = 0;
      long long v87 = v69;
      long long v69 = 0uLL;
      uint64_t v70 = 0;
      long long __p = v71;
      uint64_t v88 = v21;
      uint64_t v90 = v72;
      long long v71 = 0uLL;
      uint64_t v72 = 0;
      unint64_t v22 = *(void *)(v3 + 16);
      if (v22 >= *(void *)(v3 + 24))
      {
        uint64_t v26 = sub_A220E4(v51, (uint64_t)v73);
        int v27 = (void *)__p;
        *(void *)(v3 + 16) = v26;
        if (v27)
        {
          *((void *)&__p + 1) = v27;
          operator delete(v27);
        }
      }
      else
      {
        memmove(*(void **)(v3 + 16), __src, 0x68uLL);
        *(_DWORD *)(v22 + 104) = v75;
        long long v23 = v76;
        *(void *)(v22 + 128) = v77;
        *(_OWORD *)(v22 + 112) = v23;
        uint64_t v77 = 0;
        long long v76 = 0uLL;
        *(_DWORD *)(v22 + 136) = v78;
        long long v24 = v79;
        long long v25 = v81;
        *(_OWORD *)(v22 + 160) = v80;
        *(_OWORD *)(v22 + 176) = v25;
        *(_OWORD *)(v22 + 144) = v24;
        *(void *)(v22 + 192) = v82;
        *(void *)(v22 + 200) = 0;
        *(void *)(v22 + 208) = 0;
        *(void *)(v22 + 216) = 0;
        *(void *)(v22 + 224) = 0;
        *(_OWORD *)(v22 + 200) = v83;
        *(void *)(v22 + 216) = v84;
        long long v83 = 0uLL;
        uint64_t v84 = 0;
        *(void *)(v22 + 232) = 0;
        *(void *)(v22 + 240) = 0;
        *(_OWORD *)(v22 + 224) = v85;
        long long v85 = 0uLL;
        *(void *)(v22 + 240) = v86;
        *(void *)(v22 + 248) = 0;
        uint64_t v86 = 0;
        *(void *)(v22 + 256) = 0;
        *(void *)(v22 + 264) = 0;
        *(_OWORD *)(v22 + 248) = v87;
        long long v87 = 0uLL;
        *(void *)(v22 + 264) = v88;
        *(void *)(v22 + 272) = 0;
        uint64_t v88 = 0;
        *(void *)(v22 + 280) = 0;
        *(void *)(v22 + 288) = 0;
        *(_OWORD *)(v22 + 272) = __p;
        *(void *)(v22 + 288) = v90;
        long long __p = 0uLL;
        uint64_t v90 = 0;
        *(void *)(v3 + 16) = v22 + 296;
      }
      if ((void)v87)
      {
        *((void *)&v87 + 1) = v87;
        operator delete((void *)v87);
      }
      if ((void)v85)
      {
        *((void *)&v85 + 1) = v85;
        operator delete((void *)v85);
      }
      int v28 = (void **)v83;
      if ((void)v83)
      {
        uint64_t v29 = *((void *)&v83 + 1);
        uint64_t v30 = (void *)v83;
        if (*((void *)&v83 + 1) != (void)v83)
        {
          do
          {
            long long v32 = *(void **)(v29 - 40);
            if (v32)
            {
              *(void *)(v29 - 32) = v32;
              operator delete(v32);
            }
            long long v33 = (void **)(v29 - 72);
            uint64_t v34 = *(void *)(v29 - 72);
            if (v34)
            {
              uint64_t v35 = *(void *)(v29 - 64);
              uint64_t v31 = *(void **)(v29 - 72);
              if (v35 != v34)
              {
                do
                {
                  if (!*(_DWORD *)(v35 - 8))
                  {
                    long long v36 = *(void **)(v35 - 48);
                    if (v36)
                    {
                      *(void *)(v35 - 40) = v36;
                      operator delete(v36);
                    }
                    long long v37 = *(void **)(v35 - 80);
                    if (v37)
                    {
                      *(void *)(v35 - 72) = v37;
                      operator delete(v37);
                    }
                    long long v38 = *(void **)(v35 - 104);
                    if (v38)
                    {
                      *(void *)(v35 - 96) = v38;
                      operator delete(v38);
                    }
                  }
                  v35 -= 168;
                }
                while (v35 != v34);
                uint64_t v31 = *v33;
              }
              *(void *)(v29 - 64) = v34;
              operator delete(v31);
            }
            v29 -= 72;
          }
          while (v33 != v28);
          uint64_t v30 = (void *)v83;
          uint64_t v4 = a1;
          uint64_t v3 = a3;
          __n128 v18 = v52;
        }
        *((void *)&v83 + 1) = v28;
        operator delete(v30);
      }
      if (SHIBYTE(v77) < 0) {
        break;
      }
      long long v39 = (void *)v71;
      if ((void)v71) {
        goto LABEL_56;
      }
LABEL_57:
      if ((void)v69)
      {
        *((void *)&v69 + 1) = v69;
        operator delete((void *)v69);
      }
      if ((void)v67)
      {
        *((void *)&v67 + 1) = v67;
        operator delete((void *)v67);
      }
      long long v40 = (void **)v65;
      if ((void)v65)
      {
        uint64_t v41 = *((void *)&v65 + 1);
        long long v42 = (void *)v65;
        if (*((void *)&v65 + 1) != (void)v65)
        {
          do
          {
            long long v44 = *(void **)(v41 - 40);
            if (v44)
            {
              *(void *)(v41 - 32) = v44;
              operator delete(v44);
            }
            int v45 = (void **)(v41 - 72);
            uint64_t v46 = *(void *)(v41 - 72);
            if (v46)
            {
              uint64_t v47 = *(void *)(v41 - 64);
              long long v43 = *(void **)(v41 - 72);
              if (v47 != v46)
              {
                do
                {
                  if (!*(_DWORD *)(v47 - 8))
                  {
                    uint64_t v48 = *(void **)(v47 - 48);
                    if (v48)
                    {
                      *(void *)(v47 - 40) = v48;
                      operator delete(v48);
                    }
                    uint64_t v49 = *(void **)(v47 - 80);
                    if (v49)
                    {
                      *(void *)(v47 - 72) = v49;
                      operator delete(v49);
                    }
                    uint64_t v50 = *(void **)(v47 - 104);
                    if (v50)
                    {
                      *(void *)(v47 - 96) = v50;
                      operator delete(v50);
                    }
                  }
                  v47 -= 168;
                }
                while (v47 != v46);
                long long v43 = *v45;
              }
              *(void *)(v41 - 64) = v46;
              operator delete(v43);
            }
            v41 -= 72;
          }
          while (v45 != v40);
          long long v42 = (void *)v65;
          uint64_t v4 = a1;
          uint64_t v3 = a3;
          __n128 v18 = v52;
        }
        *((void *)&v65 + 1) = v40;
        operator delete(v42);
      }
      if (SHIBYTE(v59) < 0) {
        operator delete((void *)v58);
      }
LABEL_20:
      __n128 v17 = (long long *)((char *)v17 + 296);
      if (v17 == v18) {
        return;
      }
    }
    operator delete((void *)v76);
    long long v39 = (void *)v71;
    if (!(void)v71) {
      goto LABEL_57;
    }
LABEL_56:
    *((void *)&v71 + 1) = v39;
    operator delete(v39);
    goto LABEL_57;
  }
}

uint64_t sub_B55C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  if (v5)
  {
    if (v5 == a3)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
    *(void *)(a1 + 32) = a2;
    return a1;
  }
  else
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = a2;
    return a1;
  }
}

void sub_B55D10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v26 = *(void *)(a2 + 16);
  if (v2 != v26)
  {
    while (1)
    {
      uint64_t v4 = *(void *)(a1 + 24);
      if (!v4) {
        sub_29F82C();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v2)) {
        break;
      }
LABEL_3:
      v2 += 296;
      if (v2 == v26) {
        return;
      }
    }
    uint64_t v5 = *(uint64_t **)(v2 + 200);
    uint64_t v6 = *(uint64_t **)(v2 + 208);
    while (1)
    {
      if (v5 == v6) {
        goto LABEL_3;
      }
      uint64_t v12 = *v5;
      if (0xCF3CF3CF3CF3CF3DLL * ((v5[1] - *v5) >> 3) >= 2 && *((unsigned char *)v5 + 24) == 0) {
        break;
      }
LABEL_12:
      v5 += 9;
    }
    int v14 = (void *)(*(void *)(a1 + 32) + 4136);
    unint64_t v15 = *(void *)(v12 + 32);
    unsigned int v16 = *(_DWORD *)(v12 + 56);
    if (sub_A10E20(v14, SHIDWORD(v15)))
    {
      __n128 v17 = (int *)sub_A1120C(*(void *)(*v14 + 3944), v15);
      __n128 v18 = (unsigned __int16 *)((char *)v17 - *v17);
      if (*v18 < 9u) {
        goto LABEL_7;
      }
    }
    else
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F7308))
      {
        sub_518C8(0x3B60u, 0x7FCAu);
        dword_24F7300 = v25 | 0x40000000;
        __cxa_guard_release(&qword_24F7308);
      }
      uint64_t v19 = *v14;
      if (dword_24F7300 == HIDWORD(v15))
      {
        uint64_t v20 = sub_A10AD4(*(void *)(v19 + 3976));
        uint64_t v21 = &v20[-*(int *)v20];
        if (*(unsigned __int16 *)v21 >= 5u && (uint64_t v22 = *((unsigned __int16 *)v21 + 2)) != 0) {
          long long v23 = (unsigned int *)&v20[v22 + *(unsigned int *)&v20[v22]];
        }
        else {
          long long v23 = 0;
        }
        __n128 v17 = (int *)sub_A1139C(v23, v15);
        __n128 v18 = (unsigned __int16 *)((char *)v17 - *v17);
        if (*v18 < 9u) {
          goto LABEL_7;
        }
      }
      else
      {
        __n128 v17 = (int *)sub_A11500(v19 + 24, v15, 0, "stop pattern");
        __n128 v18 = (unsigned __int16 *)((char *)v17 - *v17);
        if (*v18 < 9u) {
          goto LABEL_7;
        }
      }
    }
    uint64_t v24 = v18[4];
    if (v24)
    {
      unint64_t v7 = (unsigned int *)((char *)v17 + v24 + *(unsigned int *)((char *)v17 + v24));
      goto LABEL_8;
    }
LABEL_7:
    unint64_t v7 = 0;
LABEL_8:
    uint64_t v27 = __ROR8__(*(void *)sub_A10764(v7, v16), 32);
    v28[0] = a1;
    uint64_t v8 = v5[1];
    uint64_t v9 = *v5 + 168;
    unint64_t v10 = 126 - 2 * __clz(0xCF3CF3CF3CF3CF3DLL * ((v8 - v9) >> 3));
    v28[1] = &v27;
    if (v8 == v9) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
    sub_B55FAC(v9, v8, v28, v11, 1);
    goto LABEL_12;
  }
}

void sub_B55F94(_Unwind_Exception *a1)
{
}

void sub_B55FAC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
void sub_B56F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_B57110(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unsigned int v7 = *(_DWORD *)(a2 + 56);
  uint64_t v8 = (int *)sub_A11094((void *)(*(void *)(*a1 + 32) + 4136), *(void *)(a2 + 32));
  uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 9u && (uint64_t v10 = v9[4]) != 0) {
    uint64_t v11 = (unsigned int *)((char *)v8 + v10 + *(unsigned int *)((char *)v8 + v10));
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = __ROR8__(*(void *)sub_A10764(v11, v7), 32);
  unsigned int v13 = *(_DWORD *)(a3 + 56);
  uint64_t v14 = (int *)sub_A11094((void *)(*(void *)(v6 + 32) + 4136), *(void *)(a3 + 32));
  unint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 9u && (uint64_t v16 = v15[4]) != 0) {
    int v17 = (unsigned int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = __ROR8__(*(void *)sub_A10764(v17, v13), 32);
  uint64_t v19 = (int *)a1[1];
  int v20 = *v19;
  int v21 = v19[1];
  if (HIDWORD(v12) == v21 && v12 == v20)
  {
    if (HIDWORD(v18) != HIDWORD(v12) || v18 != v12) {
      return 1;
    }
  }
  else if (HIDWORD(v18) == v21 && v18 == v20)
  {
    return 0;
  }
  uint64_t v26 = *(void *)(a2 + 64);
  uint64_t v27 = *(void *)(a2 + 72);
  if (v27 - v26 >= 60)
  {
    int v34 = *(_DWORD *)(a2 + 12);
    if (v27 - v26 != 60)
    {
      unint64_t v35 = (v27 - v26) / 0x3CuLL;
      do
      {
        uint64_t v36 = 60 * (v35 >> 2);
        _X15 = v26 + v36;
        __asm { PRFM            #0, [X15] }
        uint64_t v42 = v26 + 60 * (v35 >> 1);
        _X14 = v42 + v36;
        __asm { PRFM            #0, [X14] }
        if (*(_DWORD *)(v42 + 8) >= v34) {
          unint64_t v45 = 0;
        }
        else {
          unint64_t v45 = v35 >> 1;
        }
        v26 += 60 * v45;
        v35 -= v35 >> 1;
      }
      while ((uint64_t)v35 > 1);
    }
    v26 += 60 * (*(_DWORD *)(v26 + 8) < v34);
    uint64_t v28 = *(void *)(a3 + 64);
    uint64_t v29 = *(void *)(a3 + 72);
    uint64_t v30 = v29 - v28;
    BOOL v31 = v29 - v28 == 60;
    if (v29 - v28 < 60)
    {
LABEL_26:
      uint64_t v32 = v27 - v26;
      BOOL v33 = v30 >= 180 || v32 <= 179;
      BOOL result = !v33;
      if (!v33) {
        return result;
      }
LABEL_55:
      if (v32 >= 180) {
        return *(_DWORD *)(v26 + 128) < *(_DWORD *)(v28 + 128);
      }
      return result;
    }
  }
  else
  {
    uint64_t v28 = *(void *)(a3 + 64);
    uint64_t v29 = *(void *)(a3 + 72);
    uint64_t v30 = v29 - v28;
    BOOL v31 = v29 - v28 == 60;
    if (v29 - v28 < 60) {
      goto LABEL_26;
    }
  }
  int v46 = *(_DWORD *)(a3 + 12);
  if (!v31)
  {
    unint64_t v47 = v30 / 0x3CuLL;
    do
    {
      uint64_t v48 = 60 * (v47 >> 2);
      _X17 = v28 + v48;
      __asm { PRFM            #0, [X17] }
      uint64_t v51 = v28 + 60 * (v47 >> 1);
      _X16 = v51 + v48;
      __asm { PRFM            #0, [X16] }
      if (*(_DWORD *)(v51 + 8) >= v46) {
        unint64_t v54 = 0;
      }
      else {
        unint64_t v54 = v47 >> 1;
      }
      v28 += 60 * v54;
      v47 -= v47 >> 1;
    }
    while ((uint64_t)v47 > 1);
  }
  v28 += 60 * (*(_DWORD *)(v28 + 8) < v46);
  uint64_t v32 = v27 - v26;
  BOOL v55 = v29 - v28 >= 180 || v32 <= 179;
  BOOL result = !v55;
  if (v55) {
    goto LABEL_55;
  }
  return result;
}

void sub_B573E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  sub_B579DC(a1, a2, a3, a4, a6);
  if (sub_B57110(a6, a5, a4))
  {
    sub_B578F4(a4, a5);
    if (sub_B57110(a6, a4, a3))
    {
      sub_B578F4(a3, a4);
      if (sub_B57110(a6, a3, a2))
      {
        sub_B578F4(a2, a3);
        if (sub_B57110(a6, a2, a1))
        {
          sub_B578F4(a1, a2);
        }
      }
    }
  }
}

void sub_B574D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  BOOL v8 = sub_B57110(a4, a2, a1);
  BOOL v9 = sub_B57110(a4, a3, a2);
  if (v8)
  {
    if (v9)
    {
      uint64_t v10 = a1;
      goto LABEL_11;
    }
    sub_B578F4(a1, a2);
    if (sub_B57110(a4, a3, a2))
    {
      uint64_t v10 = a2;
LABEL_11:
      uint64_t v11 = a3;
LABEL_8:
      sub_B578F4(v10, v11);
    }
  }
  else if (v9)
  {
    sub_B578F4(a2, a3);
    if (sub_B57110(a4, a2, a1))
    {
      uint64_t v10 = a1;
      uint64_t v11 = a2;
      goto LABEL_8;
    }
  }
}

BOOL sub_B575D8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCF3CF3CF3CF3CF3DLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v15 = a2 - 168;
      if (sub_B57110(a3, a2 - 168, a1)) {
        sub_B578F4(a1, v15);
      }
      return 1;
    case 3uLL:
      sub_B574D0(a1, a1 + 168, a2 - 168, a3);
      return 1;
    case 4uLL:
      sub_B579DC(a1, a1 + 168, a1 + 336, a2 - 168, a3);
      return 1;
    case 5uLL:
      sub_B573E4(a1, a1 + 168, a1 + 336, a1 + 504, a2 - 168, a3);
      return 1;
    default:
      uint64_t v8 = a1 + 336;
      sub_B574D0(a1, a1 + 168, a1 + 336, a3);
      uint64_t v9 = a1 + 504;
      if (a1 + 504 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (sub_B57110(a3, v9, v8))
    {
      int v12 = *(_DWORD *)(v9 + 160);
      int v23 = v12;
      if (v12 == 1)
      {
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v9;
        *(_OWORD *)&v16[12] = *(_OWORD *)(v9 + 12);
      }
      else
      {
        uint64_t v13 = v10;
        if (v12) {
          goto LABEL_13;
        }
        sub_9F6FA0((uint64_t)v16, (long long *)v9);
      }
      uint64_t v13 = v10;
      do
      {
LABEL_13:
        sub_B46394(a1 + v13 + 504, a1 + v13 + 336);
        if (v13 == -336)
        {
          sub_B46394(a1, (uint64_t)v16);
          if (v23) {
            goto LABEL_5;
          }
          goto LABEL_16;
        }
        BOOL v14 = sub_B57110(a3, (uint64_t)v16, a1 + v13 + 168);
        v13 -= 168;
      }
      while (v14);
      sub_B46394(a1 + v13 + 504, (uint64_t)v16);
      if (v23) {
        goto LABEL_5;
      }
LABEL_16:
      if (__p)
      {
        unint64_t v22 = __p;
        operator delete(__p);
      }
      if (v19)
      {
        int v20 = v19;
        operator delete(v19);
      }
      if (v17)
      {
        uint64_t v18 = v17;
        operator delete(v17);
      }
LABEL_5:
      if (++v11 == 8) {
        return v9 + 168 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 168;
    v9 += 168;
    if (v9 == a2) {
      return 1;
    }
  }
}

void sub_B578AC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_B578C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_B578F4(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 160);
  int v12 = v4;
  if (v4 == 1)
  {
    *(_OWORD *)char v5 = *(_OWORD *)a1;
    *(_OWORD *)&v5[12] = *(_OWORD *)(a1 + 12);
  }
  else if (!v4)
  {
    sub_9F6FA0((uint64_t)v5, (long long *)a1);
  }
  sub_B46394(a1, a2);
  sub_B46394(a2, (uint64_t)v5);
  if (!v12)
  {
    if (__p)
    {
      int v11 = __p;
      operator delete(__p);
    }
    if (v8)
    {
      uint64_t v9 = v8;
      operator delete(v8);
    }
    if (v6)
    {
      unsigned int v7 = v6;
      operator delete(v6);
    }
  }
}

void sub_B579D0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

void sub_B579DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_B574D0(a1, a2, a3, a5);
  if (sub_B57110(a5, a4, a3))
  {
    sub_B578F4(a3, a4);
    if (sub_B57110(a5, a3, a2))
    {
      sub_B578F4(a2, a3);
      if (sub_B57110(a5, a2, a1))
      {
        sub_B578F4(a1, a2);
      }
    }
  }
}

uint64_t sub_B57AA4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  if (v5)
  {
    if (v5 == a3)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "leg_relative_stretch");
  double v6 = sub_B57DFC(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 32) = v6;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "min_leg_stretch_minutes");
  *(_DWORD *)(a1 + 40) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "max_leg_stretch_minutes");
  *(_DWORD *)(a1 + 44) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "max_departure_time_offset_minutes");
  *(_DWORD *)(a1 + 48) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20E12D0;
  strcpy((char *)__p[0], "max_allowed_additional_walking_minutes");
  *(_DWORD *)(a1 + 52) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "restrict_around_main_leg_dest_stop");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 56) = v7;
  return a1;
}

void sub_B57D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_9F5350(v16);
  _Unwind_Resume(a1);
}

double sub_B57DFC(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return *((double *)v2 + 5);
}

void sub_B57E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B57EB8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t result = sub_B57AA4(a1, a3, a4);
  *(void *)(result + 64) = a2;
  return result;
}

BOOL sub_B57EE8(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  if (*((_DWORD *)a2 + 1) == *((_DWORD *)a3 + 1) && *(_DWORD *)a2 == *(_DWORD *)a3) {
    return 0;
  }
  if (sub_A1E760(a4, a3)) {
    return 0;
  }
  uint64_t v10 = (int *)sub_8DFD1C(*(void *)(*(void *)(a1 + 64) + 4056) + 24, __ROR8__(*a3, 32), 0, "line");
  int v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 < 0x25u || (uint64_t v12 = v11[18]) == 0 || *((unsigned char *)v10 + v12) != 1)
  {
    uint64_t v13 = (int *)sub_8DFD1C(*(void *)(*(void *)(a1 + 64) + 4056) + 24, __ROR8__(*a3, 32), 0, "line");
    BOOL v14 = (unsigned __int16 *)((char *)v13 - *v13);
    if (*v14 >= 0x25u)
    {
      uint64_t v15 = v14[18];
      if (v15)
      {
        if (*((unsigned char *)v13 + v15)) {
          return 0;
        }
      }
    }
  }
  uint64_t v16 = (int *)sub_8DFD1C(*(void *)(*(void *)(a1 + 64) + 4056) + 24, __ROR8__(*a2, 32), 0, "line");
  int v17 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v17 >= 7u && (unsigned __int16 v18 = v17[3]) != 0) {
    unint64_t v19 = *(unsigned int *)((char *)v16 + v18 + 4) | ((unint64_t)*(unsigned int *)((char *)v16 + v18) << 32);
  }
  else {
    unint64_t v19 = 0xFFFFFFFFLL;
  }
  int v20 = (int *)sub_8DFD1C(*(void *)(*(void *)(a1 + 64) + 4056) + 24, __ROR8__(*a3, 32), 0, "line");
  int v21 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v21 >= 7u && (unsigned __int16 v22 = v21[3]) != 0)
  {
    if (v19 != (*(unsigned int *)((char *)v20 + v22 + 4) | ((unint64_t)*(unsigned int *)((char *)v20 + v22) << 32))) {
      return 0;
    }
  }
  else if (v19 != 0xFFFFFFFF)
  {
    return 0;
  }
  sub_B5822C((void *)(*(void *)(a1 + 64) + 4056), *a2, (char **)&v29);
  sub_B5822C((void *)(*(void *)(a1 + 64) + 4056), *a3, (char **)&__p);
  int v23 = (unsigned __int8 *)v29;
  unint64_t v24 = (unsigned __int8 *)__p;
  if (v30 - (unsigned char *)v29 == v28 - (unsigned char *)__p)
  {
    if (v29 != v30)
    {
      while (*v23 == *v24)
      {
        ++v23;
        ++v24;
        if (v23 == v30) {
          goto LABEL_27;
        }
      }
      goto LABEL_33;
    }
LABEL_27:
    uint64_t v25 = (int *)sub_8DFD1C(*(void *)(*(void *)(a1 + 64) + 4056) + 24, __ROR8__(*a2, 32), 0, "line");
    uint64_t v26 = (unsigned __int16 *)((char *)v25 - *v25);
    if (*v26 >= 0x17u && v26[11])
    {
      if (!sub_B584CC((void *)(*(void *)(a1 + 64) + 4056), *a3))
      {
LABEL_33:
        BOOL v8 = 0;
        goto LABEL_34;
      }
      BOOL v8 = sub_B58524((void *)(*(void *)(a1 + 64) + 4056), *a2, *a3) == 0;
    }
    else
    {
      BOOL v8 = 1;
    }
LABEL_34:
    unint64_t v24 = (unsigned __int8 *)__p;
    goto LABEL_35;
  }
  BOOL v8 = 0;
LABEL_35:
  if (v24)
  {
    uint64_t v28 = v24;
    operator delete(v24);
  }
  if (!v29) {
    return v8;
  }
  uint64_t v30 = (unsigned __int8 *)v29;
  operator delete(v29);
  return v8;
}

void sub_B581E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    BOOL v14 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    BOOL v14 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

void sub_B5822C(void *a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  int v4 = (int *)sub_8DFD1C(*a1 + 24, __ROR8__(a2, 32), 0, "line");
  uint64_t v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 >= 0x19u && (uint64_t v6 = v5[12]) != 0)
  {
    BOOL v7 = (unsigned int *)((char *)v4 + v6);
    uint64_t v8 = *v7;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v10 = (char *)v7 + v8 + 4;
    uint64_t v9 = *(unsigned int *)((char *)v7 + v8);
    if (v9)
    {
      int v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      BOOL v14 = &v10[v9];
      do
      {
        while (1)
        {
          char v15 = *v10;
          if (v13 >= v12) {
            break;
          }
          *v13++ = v15;
          a3[1] = v13;
          if (++v10 == v14) {
            return;
          }
        }
        unint64_t v16 = v13 - v11;
        uint64_t v17 = v13 - v11 + 1;
        if (v17 < 0) {
          sub_2E00();
        }
        if (2 * (v12 - v11) > (unint64_t)v17) {
          uint64_t v17 = 2 * (v12 - v11);
        }
        if ((unint64_t)(v12 - v11) >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v18 = v17;
        }
        if (v18)
        {
          unint64_t v19 = (char *)operator new(v18);
          int v20 = &v19[v16];
          v19[v16] = v15;
          uint64_t v21 = (uint64_t)&v19[v16 + 1];
          if (v13 != v11) {
            goto LABEL_15;
          }
        }
        else
        {
          unint64_t v19 = 0;
          int v20 = (char *)(v13 - v11);
          *(unsigned char *)unint64_t v16 = v15;
          uint64_t v21 = v16 + 1;
          if (v13 != v11)
          {
LABEL_15:
            if (v16 < 8 || v19 > &v19[v13 - v11 - 1] || v11 > v13 - 1 || (unint64_t)(v11 - v19) < 0x20)
            {
              unsigned __int16 v22 = v13;
            }
            else if (v16 >= 0x20)
            {
              unint64_t v25 = v16 & 0xFFFFFFFFFFFFFFE0;
              uint64_t v26 = &v19[v16 - 16];
              uint64_t v27 = (long long *)(v13 - 16);
              unint64_t v28 = v16 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v29 = *v27;
                *((_OWORD *)v26 - 1) = *(v27 - 1);
                *(_OWORD *)uint64_t v26 = v29;
                v26 -= 32;
                v27 -= 2;
                v28 -= 32;
              }
              while (v28);
              if (v16 == v25) {
                goto LABEL_19;
              }
              if ((v16 & 0x18) != 0) {
                goto LABEL_35;
              }
              v20 -= v25;
              unsigned __int16 v22 = &v13[-v25];
            }
            else
            {
              unint64_t v25 = 0;
LABEL_35:
              unsigned __int16 v22 = &v13[-(v16 & 0xFFFFFFFFFFFFFFF8)];
              v20 -= v16 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v30 = &v19[&v13[-v25] - v11 - 8];
              BOOL v31 = (uint64_t *)&v13[-v25 - 8];
              unint64_t v32 = v25 - (v16 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v33 = *v31--;
                *(void *)uint64_t v30 = v33;
                v30 -= 8;
                v32 += 8;
              }
              while (v32);
              if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_19:
                int v20 = v19;
                uint64_t v12 = &v19[v18];
                *a3 = v19;
                a3[1] = (char *)v21;
                a3[2] = v12;
                if (!v11) {
                  goto LABEL_24;
                }
LABEL_23:
                operator delete(v11);
                goto LABEL_24;
              }
            }
            int v23 = v20 - 1;
            do
            {
              char v24 = *--v22;
              *v23-- = v24;
            }
            while (v22 != v11);
            goto LABEL_19;
          }
        }
        uint64_t v12 = &v19[v18];
        *a3 = v20;
        a3[1] = (char *)v21;
        a3[2] = v12;
        if (v11) {
          goto LABEL_23;
        }
LABEL_24:
        int v11 = v20;
        a3[1] = (char *)v21;
        ++v10;
        uint64_t v13 = (char *)v21;
      }
      while (v10 != v14);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_B584AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_B584CC(void *a1, uint64_t a2)
{
  uint64_t v2 = (int *)sub_8DFD1C(*a1 + 24, __ROR8__(a2, 32), 0, "line");
  BOOL result = 0;
  int v4 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v4 >= 0x17u) {
    return v4[11] != 0;
  }
  return result;
}

uint64_t sub_B58524(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (int *)sub_8DFD1C(*a1 + 24, __ROR8__(a2, 32), 0, "line");
  uint64_t v6 = (int *)sub_8DFD1C(*a1 + 24, __ROR8__(a3, 32), 0, "line");
  BOOL v7 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v7 >= 0x17u && (uint64_t v8 = v7[11]) != 0)
  {
    uint64_t v9 = (int *)((char *)v5 + v8 + *(unsigned int *)((char *)v5 + v8));
    uint64_t v10 = (unsigned __int16 *)((char *)v6 - *v6);
    if (*v10 < 0x17u) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = (unsigned __int16 *)((char *)v6 - *v6);
    if (*v10 < 0x17u)
    {
LABEL_8:
      uint64_t v12 = 0;
      return sub_B5A450((uint64_t)&v14, v9, v12);
    }
  }
  uint64_t v11 = v10[11];
  if (!v11) {
    goto LABEL_8;
  }
  uint64_t v12 = (int *)((char *)v6 + v11 + *(unsigned int *)((char *)v6 + v11));
  return sub_B5A450((uint64_t)&v14, v9, v12);
}

BOOL sub_B58610(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  unint64_t v12 = *(void *)(a5 + 24);
  uint64_t v11 = *(void **)(a5 + 32);
  if ((unint64_t)v11 >= v12 && (unint64_t)v11 < *(void *)(a5 + 40))
  {
    unsigned int v16 = a3;
    unint64_t v18 = HIDWORD(a3);
    LODWORD(v19) = -1;
    do
    {
      uint64_t v34 = __ROR8__(*v11, 32);
      if (v34 == a2 && (*((unsigned char *)v11 + 15) & 2) != 0)
      {
        unint64_t v19 = ((unint64_t)v11 - v12) >> 4;
      }
      else if (sub_A1E760(a4, &v34))
      {
        BOOL v20 = v34 == v16 && HIDWORD(v34) == v18;
        if (v20 || *a8 == 0x7FFFFFFF) {
          goto LABEL_56;
        }
        unsigned __int16 v22 = sub_A1E760(a4, &v34);
        if (!v22) {
          goto LABEL_53;
        }
        if (*a8 > *((_DWORD *)v22 + 6))
        {
LABEL_56:
          uint64_t v23 = *(void *)(a5 + 32);
          if (*(unsigned char *)(v23 + 15))
          {
            *a6 = v19;
            *a7 = (unint64_t)(v23 - *(void *)(a5 + 24)) >> 4;
            char v24 = sub_A1E760(a4, &v34);
            if (!v24) {
LABEL_53:
            }
              sub_5AE8("unordered_map::at: key not found");
            *a8 = *((_DWORD *)v24 + 6);
            if (v34 == __PAIR64__(v18, v16)) {
              break;
            }
          }
        }
      }
      unint64_t v12 = *(void *)(a5 + 24);
      uint64_t v11 = (void *)(*(void *)(a5 + 32) + 16);
      *(void *)(a5 + 32) = v11;
      if (*(unsigned char *)(*(void *)a5 + 16)) {
        BOOL v25 = *(unsigned char *)(a5 + 8) == 0;
      }
      else {
        BOOL v25 = 0;
      }
      if (v25 && (unint64_t)v11 >= v12 && (unint64_t)v11 < *(void *)(a5 + 40))
      {
        do
        {
          unint64_t v28 = __ROR8__(*v11, 32);
          if (HIDWORD(v28) == 1 && (v28 + 3) < 2) {
            break;
          }
          char v30 = sub_2AB7E4(**(void **)(*(void *)a5 + 4120));
          unint64_t v12 = *(void *)(a5 + 24);
          uint64_t v11 = *(void **)(a5 + 32);
          if (v30) {
            break;
          }
          v11 += 2;
          *(void *)(a5 + 32) = v11;
        }
        while ((unint64_t)v11 >= v12 && (unint64_t)v11 < *(void *)(a5 + 40));
      }
    }
    while ((unint64_t)v11 >= v12 && (unint64_t)v11 < *(void *)(a5 + 40));
  }
  return *a6 != -1 && *a7 != -1 && *a8 != 0x7FFFFFFF;
}

uint64_t *sub_B5881C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  int v4 = *(uint64_t **)(a2 + 200);
  uint64_t v26 = *(uint64_t **)(a2 + 208);
  if (v4 != v26)
  {
    uint64_t v5 = result;
    while (1)
    {
      if (!*((unsigned char *)v4 + 24))
      {
        uint64_t v6 = *v4;
        uint64_t v7 = v4[1];
        if (*v4 != v7) {
          break;
        }
      }
LABEL_3:
      v4 += 9;
      if (v4 == v26) {
        return result;
      }
    }
    while (1)
    {
      uint64_t v8 = (void *)(v5[8] + 4136);
      unint64_t v9 = *(void *)(v6 + 32);
      unsigned int v10 = *(_DWORD *)(v6 + 52);
      if (sub_A10E20(v8, SHIDWORD(v9)))
      {
        uint64_t v11 = (int *)sub_A1120C(*(void *)(*v8 + 3944), v9);
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v23 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v12 = *v8;
        if (dword_24F7300 == HIDWORD(v9))
        {
          uint64_t v13 = *(unsigned int **)(*(void *)(v12 + 3976) + 72);
          if (!v13)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v28, "Realtime stop pattern quad data requested on nullptr buffer");
            BOOL v25 = (void *)sub_2F404((uint64_t)exception, &v28);
          }
          char v14 = (int *)((char *)v13 + *v13);
          char v15 = (unsigned __int16 *)((char *)v14 - *v14);
          if (*v15 >= 5u && (uint64_t v16 = v15[2]) != 0) {
            uint64_t v17 = (unsigned int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v11 = (int *)sub_A1139C(v17, v9);
        }
        else
        {
          uint64_t v11 = (int *)sub_A11500(v12 + 24, v9, 0, "stop pattern");
        }
      }
      unint64_t v18 = (unsigned __int16 *)((char *)v11 - *v11);
      unsigned int v19 = *v18;
      if (v19 < 5)
      {
        BOOL v20 = 0;
        goto LABEL_22;
      }
      if (v18[2])
      {
        BOOL v20 = (char *)v11 + v18[2] + *(unsigned int *)((char *)v11 + v18[2]);
        if (v19 < 9) {
          goto LABEL_22;
        }
      }
      else
      {
        BOOL v20 = 0;
        if (v19 < 9) {
          goto LABEL_22;
        }
      }
      uint64_t v22 = v18[4];
      if (v22)
      {
        uint64_t v21 = (unsigned int *)((char *)v11 + v22 + *(unsigned int *)((char *)v11 + v22));
        goto LABEL_23;
      }
LABEL_22:
      uint64_t v21 = 0;
LABEL_23:
      uint64_t v27 = __ROR8__(*(void *)&v20[8 * *(unsigned __int8 *)(sub_A10764(v21, v10) + 14) + 4], 32);
      BOOL result = sub_B5AAE8(a3, &v27, &v27);
      v6 += 168;
      if (v6 == v7) {
        goto LABEL_3;
      }
    }
  }
  return result;
}

void sub_B58A94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_24F7308);
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_B58AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_12168(v17);
    _Unwind_Resume(a1);
  }
  sub_12168(v17);
  _Unwind_Resume(a1);
}

void sub_B58B08(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  long long v119 = 0u;
  long long v120 = 0u;
  int v121 = 1065353216;
  *(_OWORD *)uint64_t v116 = 0u;
  *(_OWORD *)uint64_t v117 = 0u;
  int v118 = 1065353216;
  if (!*(unsigned char *)(a1 + 56)) {
    goto LABEL_111;
  }
  sub_B5AAE8((uint64_t)&v119, (uint64_t *)(a2 + 12), (void *)(a2 + 12));
  sub_A28D38((uint64_t)&v110, *(void *)(v4 + 64), *(void *)(v3 + 12));
  uint64_t v5 = v111;
  uint64_t v6 = v112;
  if (v115) {
    uint64_t v7 = (void *)v114[0];
  }
  else {
    uint64_t v7 = v112;
  }
  if (v111 < v7)
  {
    do
    {
      if (*((_DWORD *)v5 + 2) <= *(_DWORD *)(v4 + 52))
      {
        long long __p = (void *)__ROR8__(*v5, 32);
        sub_B5AE4C((uint64_t)&v119, (uint64_t *)&__p, &__p);
        uint64_t v5 = v111;
        uint64_t v6 = v112;
      }
      uint64_t v5 = (void *)((char *)v5 + 12);
      BOOL v111 = v5;
      if (v5 == v6)
      {
        uint64_t v5 = v113;
        unint64_t v9 = v114[0];
        BOOL v111 = v113;
        int v8 = 1;
        unsigned __int8 v115 = 1;
        if (*((unsigned char *)v110 + 16))
        {
LABEL_19:
          if (v8) {
            unint64_t v11 = v9;
          }
          else {
            unint64_t v11 = (unint64_t)v6;
          }
          if ((unint64_t)v5 < v11)
          {
            while (1)
            {
              unint64_t v12 = __ROR8__(*v5, 32);
              if (HIDWORD(v12) == 1 && (v12 + 3) < 2) {
                break;
              }
              if (sub_2AB7E4(*(void *)v110[515]))
              {
                LOBYTE(v8) = v115;
                uint64_t v5 = v111;
                uint64_t v6 = v112;
                break;
              }
              uint64_t v6 = v112;
              uint64_t v5 = (void *)((char *)v111 + 12);
              BOOL v111 = v5;
              if (v5 == v112)
              {
                uint64_t v5 = v113;
                BOOL v111 = v113;
                LOBYTE(v8) = 1;
                unsigned __int8 v115 = 1;
                if ((unint64_t)v113 >= v114[0]) {
                  break;
                }
              }
              else
              {
                LOBYTE(v8) = v115;
                if (v115) {
                  char v14 = v114;
                }
                else {
                  char v14 = &v112;
                }
                if ((unint64_t)v5 >= *v14) {
                  break;
                }
              }
            }
            unint64_t v9 = v114[0];
          }
        }
      }
      else
      {
        int v8 = v115;
        unint64_t v9 = v114[0];
        if (*((unsigned char *)v110 + 16)) {
          goto LABEL_19;
        }
      }
      if ((_BYTE)v8) {
        unint64_t v10 = v9;
      }
      else {
        unint64_t v10 = (unint64_t)v6;
      }
    }
    while ((unint64_t)v5 < v10);
  }
  for (uint64_t i = (void *)v120; i; uint64_t i = (void *)*i)
  {
    unint64_t v17 = i[2];
    if (HIDWORD(v17) != 1 || (v17 + 3) >= 2)
    {
      uint64_t v19 = *(void *)(a1 + 64);
      unint64_t v20 = __ROR8__(v17, 32);
      uint64_t v21 = (int *)sub_498D5C(*(void *)(v19 + 4120) + 24, v20, 0, "stop");
      uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
      if (*v22 >= 0xDu)
      {
        unsigned __int16 v23 = v22[6];
        if (v23)
        {
          uint64_t v25 = *(unsigned int *)((char *)v21 + v23);
          uint64_t v24 = *(unsigned int *)((char *)v21 + v23 + 4);
          if (v24 != -1 && v25 != 0)
          {
            uint64_t v27 = (int *)sub_8ED928(*(void *)(v19 + 4128) + 24, __ROR8__(v24 | (v25 << 32), 32), 0, "station");
            long long v28 = (unsigned __int16 *)((char *)v27 - *v27);
            if (*v28 >= 0xBu)
            {
              uint64_t v29 = v28[5];
              if (v29)
              {
                if (*(int *)((char *)v27 + v29 + *(unsigned int *)((char *)v27 + v29)))
                {
                  char v30 = (int *)sub_498D5C(*(void *)(*(void *)(a1 + 64) + 4120) + 24, v20, 0, "stop");
                  BOOL v31 = (unsigned __int16 *)((char *)v30 - *v30);
                  if (*v31 >= 0xDu && (unsigned __int16 v32 = v31[6]) != 0) {
                    unint64_t v16 = *(unsigned int *)((char *)v30 + v32 + 4) | ((unint64_t)*(unsigned int *)((char *)v30 + v32) << 32);
                  }
                  else {
                    unint64_t v16 = 0xFFFFFFFFLL;
                  }
                  unint64_t v110 = (void *)v16;
                  sub_B5AE4C((uint64_t)v116, (uint64_t *)&v110, &v110);
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v33 = v117[0];
  uint64_t v4 = a1;
  if (v117[0])
  {
    uint64_t v101 = v3;
    do
    {
      int v102 = v33;
      sub_B3FAE0((uint64_t **)(*(void *)(v4 + 64) + 4112), v33[2], (uint64_t)&v110);
      uint64_t v34 = v110;
      uint64_t v104 = v111;
      if (v110 == v111)
      {
        if (v110) {
          goto LABEL_108;
        }
        goto LABEL_61;
      }
      while (2)
      {
        uint64_t v35 = *(void *)(v4 + 64);
        uint64_t v36 = (int *)sub_8ED3D4(*(void *)(v35 + 4040) + 24, __ROR8__(*v34, 32), 0, "hall");
        int64_t v105 = v34;
        int v37 = (unsigned __int16 *)((char *)v36 - *v36);
        if (*v37 < 0xDu) {
          goto LABEL_65;
        }
        uint64_t v38 = v37[6];
        if (!v38) {
          goto LABEL_65;
        }
        long long v39 = (unsigned int *)((char *)v36 + v38);
        uint64_t v40 = *v39;
        uint64_t v108 = 0;
        unint64_t v109 = 0;
        long long __p = 0;
        uint64_t v42 = (unsigned int *)((char *)v39 + v40 + 4);
        uint64_t v41 = *(unsigned int *)((char *)v39 + v40);
        if (!v41) {
          goto LABEL_65;
        }
        int v43 = 0;
        uint64_t v44 = &v42[2 * v41];
        do
        {
          uint64_t v46 = *(void *)(v35 + 4040);
          if (!*(unsigned char *)(v46 + 16) || sub_2AB7E4(*(void *)v46))
          {
            unint64_t v47 = v42[1] | ((unint64_t)*v42 << 32);
            if (v43 < v109)
            {
              *(void *)int v43 = v47;
              uint64_t v45 = (uint64_t)(v43 + 8);
              goto LABEL_71;
            }
            uint64_t v48 = (char *)__p;
            int64_t v49 = v43 - (unsigned char *)__p;
            uint64_t v50 = (v43 - (unsigned char *)__p) >> 3;
            unint64_t v51 = v50 + 1;
            if ((unint64_t)(v50 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v52 = v109 - (unsigned char *)__p;
            if ((v109 - (unsigned char *)__p) >> 2 > v51) {
              unint64_t v51 = v52 >> 2;
            }
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v53 = v51;
            }
            if (v53)
            {
              if (v53 >> 61) {
                sub_188D718();
              }
              unint64_t v54 = operator new(8 * v53);
              BOOL v55 = (unint64_t *)&v54[8 * v50];
              unint64_t *v55 = v47;
              uint64_t v45 = (uint64_t)(v55 + 1);
              if (v43 != v48)
              {
LABEL_85:
                unint64_t v56 = v43 - 8 - v48;
                if (v56 < 0x168)
                {
                  uint64_t v57 = v43;
                  goto LABEL_87;
                }
                if (&v54[v49 - 8 - (v56 & 0xFFFFFFFFFFFFFFF8)] > &v54[v49 - 8])
                {
                  uint64_t v57 = v43;
                  goto LABEL_87;
                }
                if (&v43[-(v56 & 0xFFFFFFFFFFFFFFF8) - 8] > v43 - 8)
                {
                  uint64_t v57 = v43;
                  goto LABEL_87;
                }
                if ((unint64_t)(v43 - v54 - v49) < 0x20)
                {
                  uint64_t v57 = v43;
                  goto LABEL_87;
                }
                uint64_t v59 = (v56 >> 3) + 1;
                uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v57 = &v43[-v60];
                BOOL v55 = (unint64_t *)((char *)v55 - v60);
                long long v61 = &v54[8 * v50 - 16];
                uint64_t v62 = v43 - 16;
                uint64_t v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v64 = *(_OWORD *)v62;
                  *(v61 - 1) = *((_OWORD *)v62 - 1);
                  _OWORD *v61 = v64;
                  v61 -= 2;
                  v62 -= 32;
                  v63 -= 4;
                }
                while (v63);
                if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_87:
                    unint64_t v58 = *((void *)v57 - 1);
                    v57 -= 8;
                    *--BOOL v55 = v58;
                  }
                  while (v57 != v48);
                }
                int v43 = (char *)__p;
                long long __p = v55;
                uint64_t v108 = v45;
                unint64_t v109 = &v54[8 * v53];
                if (!v43)
                {
LABEL_71:
                  uint64_t v108 = v45;
                  int v43 = (char *)v45;
                  goto LABEL_72;
                }
LABEL_92:
                operator delete(v43);
                goto LABEL_71;
              }
            }
            else
            {
              unint64_t v54 = 0;
              BOOL v55 = (unint64_t *)(8 * v50);
              *(void *)(8 * v50) = v47;
              uint64_t v45 = 8 * v50 + 8;
              if (v43 != v48) {
                goto LABEL_85;
              }
            }
            long long __p = v55;
            uint64_t v108 = v45;
            unint64_t v109 = &v54[8 * v53];
            if (!v43) {
              goto LABEL_71;
            }
            goto LABEL_92;
          }
LABEL_72:
          v42 += 2;
        }
        while (v42 != v44);
        uint64_t v65 = __p;
        uint64_t v66 = (uint64_t *)__p;
        if (__p != v43)
        {
          do
          {
            uint64_t v106 = *v66;
            sub_B5AAE8((uint64_t)&v119, &v106, &v106);
            ++v66;
          }
          while (v66 != (uint64_t *)v43);
        }
        uint64_t v4 = a1;
        if (v65) {
          operator delete(v65);
        }
LABEL_65:
        uint64_t v34 = v105 + 1;
        if (v105 + 1 != v104) {
          continue;
        }
        break;
      }
      uint64_t v34 = v110;
      if (v110)
      {
LABEL_108:
        BOOL v111 = v34;
        operator delete(v34);
      }
LABEL_61:
      uint64_t v3 = v101;
      uint64_t v33 = (void *)*v102;
    }
    while (*v102);
  }
  if (!*(unsigned char *)(v4 + 56) || sub_A1E760(&v119, (uint64_t *)(v3 + 20)))
  {
LABEL_111:
    unint64_t v67 = *(void *)(v3 + 20);
    if (HIDWORD(v67) == 1 && (v67 + 3) < 2) {
      goto LABEL_119;
    }
    uint64_t v69 = *(void *)(*(void *)(v4 + 64) + 4120);
    uint64_t v70 = v69 + 24;
    if (*(unsigned char *)(v69 + 17))
    {
      long long v71 = (int *)sub_A1A290(v70, v67, 0, "transfers at stop");
      long long v72 = (unsigned __int16 *)((char *)v71 - *v71);
      if (*v72 < 5u || (unsigned int v73 = v72[2]) == 0)
      {
LABEL_119:
        int v74 = 0;
LABEL_120:
        unint64_t v110 = (void *)(v3 + 20);
        *((_DWORD *)sub_B5B1B0(a3, (uint64_t *)(v3 + 20), (uint64_t)&unk_20F06E0, &v110) + 6) = v74;
        goto LABEL_121;
      }
    }
    else
    {
      long long v71 = (int *)sub_498D5C(v70, __ROR8__(v67, 32), 0, "stop");
      char v99 = (unsigned __int16 *)((char *)v71 - *v71);
      if (*v99 < 0x15u || (unsigned int v73 = v99[10]) == 0)
      {
        int v74 = 300;
        goto LABEL_120;
      }
    }
    int v74 = 10 * *(int *)((char *)v71 + v73);
    goto LABEL_120;
  }
LABEL_121:
  int v76 = *(_DWORD *)(v3 + 4);
  int v75 = *(_DWORD *)(v3 + 8);
  int v77 = *(_DWORD *)(v4 + 52);
  sub_A28D38((uint64_t)&v110, *(void *)(v4 + 64), *(void *)(v3 + 20));
  int v78 = v111;
  if (v115) {
    long long v79 = v114;
  }
  else {
    long long v79 = &v112;
  }
  if ((unint64_t)v111 < *v79)
  {
    int v80 = v77 + 10 * (v75 - v76);
    do
    {
      if (*((_DWORD *)v78 + 2) <= v80)
      {
        if (!*(unsigned char *)(a1 + 56)
          || (__p = (void *)__ROR8__(*v78, 32), long long v84 = sub_A1E760(&v119, (uint64_t *)&__p), v78 = v111, v84))
        {
          uint64_t v106 = __ROR8__(*v78, 32);
          long long __p = &v106;
          uint64_t v85 = sub_B5B520(a3, &v106, (uint64_t)&unk_20F06E0, (void **)&__p);
          int v86 = *((_DWORD *)v85 + 6);
          int v78 = v111;
          int v87 = *((_DWORD *)v111 + 2);
          if (v86 == 0x7FFFFFFF || v87 < v86) {
            *((_DWORD *)v85 + 6) = v87;
          }
        }
      }
      int v78 = (void *)((char *)v78 + 12);
      BOOL v111 = v78;
      unint64_t v82 = (unint64_t)v112;
      if (v78 == v112)
      {
        int v78 = v113;
        unint64_t v83 = v114[0];
        BOOL v111 = v113;
        int v81 = 1;
        unsigned __int8 v115 = 1;
        if (*((unsigned char *)v110 + 16))
        {
LABEL_144:
          if (v81) {
            unint64_t v89 = v83;
          }
          else {
            unint64_t v89 = (unint64_t)v112;
          }
          if ((unint64_t)v78 < v89)
          {
            while (1)
            {
              unint64_t v90 = __ROR8__(*v78, 32);
              if (HIDWORD(v90) == 1 && (v90 + 3) < 2) {
                break;
              }
              if (sub_2AB7E4(*(void *)v110[515]))
              {
                LOBYTE(v81) = v115;
                int v78 = v111;
                unint64_t v82 = (unint64_t)v112;
                break;
              }
              unint64_t v82 = (unint64_t)v112;
              int v78 = (void *)((char *)v111 + 12);
              BOOL v111 = v78;
              if (v78 == v112)
              {
                int v78 = v113;
                BOOL v111 = v113;
                LOBYTE(v81) = 1;
                unsigned __int8 v115 = 1;
                if ((unint64_t)v113 >= v114[0]) {
                  break;
                }
              }
              else
              {
                LOBYTE(v81) = v115;
                if (v115) {
                  long long v92 = v114;
                }
                else {
                  long long v92 = &v112;
                }
                if ((unint64_t)v78 >= *v92) {
                  break;
                }
              }
            }
            unint64_t v83 = v114[0];
          }
        }
      }
      else
      {
        int v81 = v115;
        unint64_t v83 = v114[0];
        if (*((unsigned char *)v110 + 16)) {
          goto LABEL_144;
        }
      }
      if ((_BYTE)v81) {
        unint64_t v82 = v83;
      }
    }
    while ((unint64_t)v78 < v82);
  }
  uint64_t v93 = v117[0];
  if (v117[0])
  {
    do
    {
      long long v94 = (void *)*v93;
      operator delete(v93);
      uint64_t v93 = v94;
    }
    while (v94);
  }
  BOOL v95 = v116[0];
  v116[0] = 0;
  if (v95) {
    operator delete(v95);
  }
  int v96 = (void *)v120;
  if ((void)v120)
  {
    do
    {
      uint64_t v97 = (void *)*v96;
      operator delete(v96);
      int v96 = v97;
    }
    while (v97);
  }
  long long v98 = (void *)v119;
  *(void *)&long long v119 = 0;
  if (v98) {
    operator delete(v98);
  }
}

void sub_B5945C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_12168((uint64_t)&a29);
  sub_12168(v29 - 144);
  sub_12168(a9);
  _Unwind_Resume(a1);
}

void sub_B594F0(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_DWORD *)(a6 + 32) = 1065353216;
  unsigned int v9 = *(_DWORD *)(a2 + 52);
  unint64_t v10 = (int *)sub_A11094((void *)(*(void *)(a1 + 64) + 4136), *(void *)(a2 + 32));
  unint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  unsigned int v12 = *v11;
  if (v12 < 5)
  {
    uint64_t v13 = 0;
    goto LABEL_6;
  }
  if (v11[2])
  {
    uint64_t v13 = (char *)v10 + v11[2] + *(unsigned int *)((char *)v10 + v11[2]);
    if (v12 < 9) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v13 = 0;
    if (v12 < 9) {
      goto LABEL_6;
    }
  }
  uint64_t v90 = v11[4];
  if (v90)
  {
    char v14 = (unsigned int *)((char *)v10 + v90 + *(unsigned int *)((char *)v10 + v90));
    goto LABEL_7;
  }
LABEL_6:
  char v14 = 0;
LABEL_7:
  uint64_t v123 = __ROR8__(*(void *)&v13[8 * *(unsigned __int8 *)(sub_A10764(v14, v9) + 14) + 4], 32);
  unsigned int v15 = *(_DWORD *)(a2 + 52);
  unint64_t v16 = (int *)sub_A11094((void *)(*(void *)(a1 + 64) + 4136), *(void *)(a2 + 32));
  unint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0) {
    uint64_t v19 = (unsigned int *)((char *)v16 + v18 + *(unsigned int *)((char *)v16 + v18));
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(void *)sub_A10764(v19, v15);
  unsigned int v21 = *(_DWORD *)(a2 + 56);
  uint64_t v22 = (int *)sub_A11094((void *)(*(void *)(a1 + 64) + 4136), *(void *)(a2 + 32));
  unsigned __int16 v23 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v23 >= 9u && (uint64_t v24 = v23[4]) != 0) {
    uint64_t v25 = (unsigned int *)((char *)v22 + v24 + *(unsigned int *)((char *)v22 + v24));
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = (uint64_t *)sub_A10764(v25, v21);
  unint64_t v27 = __ROR8__(v20, 32);
  int v28 = *(_DWORD *)(a2 + 20);
  int v29 = 0x7FFFFFFF;
  if (v28 == 0x7FFFFFFF)
  {
    double v30 = 2147483650.0 * *(double *)(a1 + 32);
    if (v30 >= 0.0)
    {
LABEL_17:
      if (v30 >= 4.50359963e15) {
        goto LABEL_29;
      }
      uint64_t v31 = (uint64_t)(v30 + v30) + 1;
      goto LABEL_28;
    }
  }
  else
  {
    int v32 = *(_DWORD *)(a2 + 8);
    int v33 = 10 * (v28 - v32);
    double v34 = (double)v33;
    if (v32 == 0x7FFFFFFF) {
      int v29 = 0x7FFFFFFF;
    }
    else {
      int v29 = v33;
    }
    if (v32 == 0x7FFFFFFF) {
      double v34 = 2147483650.0;
    }
    double v30 = v34 * *(double *)(a1 + 32);
    if (v30 >= 0.0) {
      goto LABEL_17;
    }
  }
  if (v30 <= -4.50359963e15) {
    goto LABEL_29;
  }
  uint64_t v31 = (uint64_t)(v30 + v30);
  if (v31 >= 1) {
    --v31;
  }
LABEL_28:
  double v30 = (double)(v31 >> 1);
LABEL_29:
  uint64_t v35 = *v26;
  int v36 = (int)v30;
  if (*(_DWORD *)(a1 + 40) > (int)v30) {
    int v36 = *(_DWORD *)(a1 + 40);
  }
  if (*(_DWORD *)(a1 + 44) >= v36) {
    int v37 = v36;
  }
  else {
    int v37 = *(_DWORD *)(a1 + 44);
  }
  sub_A1DF34((uint64_t)v118, *(void **)(a1 + 64), v27, 0, 0, 0);
  unint64_t v38 = v121;
  if (v121 >= v122) {
    return;
  }
  unint64_t v39 = __ROR8__(v35, 32);
  int v99 = v37 + v29;
  while (2)
  {
    unint64_t v40 = __ROR8__(*(void *)v38, 32);
    sub_A1E9A0((uint64_t)v109, *(void *)(a1 + 64), v40, *(unsigned __int16 *)(v38 + 8), 0, 0);
    unsigned int v107 = -1;
    unsigned int v108 = -1;
    int v106 = 0x7FFFFFFF;
    uint64_t v41 = sub_B5B91C((uint64_t)v104, a4);
    BOOL v42 = sub_B58610(v41, v27, v39, v104, (uint64_t)v109, &v108, &v107, &v106);
    int v43 = __p;
    if (__p)
    {
      do
      {
        uint64_t v44 = (void *)*v43;
        operator delete(v43);
        int v43 = v44;
      }
      while (v44);
    }
    uint64_t v45 = v104[0];
    v104[0] = 0;
    if (v45) {
      operator delete(v45);
    }
    if (v42)
    {
      unsigned int v46 = v107;
      uint64_t v112 = v111 + 16 * v107;
      char v47 = v106 < 0 ? -5 : 5;
      int v48 = v106 / -10
          + a3
          + (((-103 * (char)(v47 + v106 % 10)) >> 15) & 1)
          + ((-103 * (char)(v47 + v106 % 10)) >> 10);
      if (v115 ? sub_A2B620(*(void *)(a1 + 64), (uint64_t)v109, v48, 1) : sub_A2BC00((uint64_t)v109, v48, 1))
      {
        uint64_t v50 = v114;
        if (v115) {
          uint64_t v51 = v116;
        }
        else {
          uint64_t v51 = 0xFFFFFFFFLL;
        }
        if (v115) {
          int v52 = v117;
        }
        else {
          int v52 = 0x7FFFFFFF;
        }
        unint64_t v53 = &v117;
        if (!v115) {
          unint64_t v53 = v114;
        }
        int v54 = *v53;
        BOOL v55 = (unsigned int *)((char *)v110 + *(unsigned __int16 *)((char *)v110 - *v110 + 6));
        int v56 = v114[1];
        uint64_t v57 = (uint64_t)v55 + *v55 + 4;
        int v58 = *(_DWORD *)(v57 + 8 * (v56 + ((unint64_t)(v112 - v111) >> 4))) + v54;
        unsigned int v59 = v108;
        uint64_t v112 = v111 + 16 * v108;
        int v60 = *(_DWORD *)(v57 + 8 * (v56 + v108) + 4) + v54;
        if (10 * (v58 - v60) <= v99 && 10 * (*(_DWORD *)(a2 + 12) - v60) <= *(_DWORD *)(a1 + 48))
        {
          uint64_t v93 = v113;
          uint64_t v95 = v51;
          int v96 = v52;
          int v91 = *(_DWORD *)(v111 + 16 * v108 + 8);
          long long v61 = (int *)sub_A11094((void *)(*(void *)(a1 + 64) + 4136), v40);
          uint64_t v62 = (unsigned __int16 *)((char *)v61 - *v61);
          unsigned int v63 = *v62;
          if (v63 < 5)
          {
            uint64_t v97 = 0;
          }
          else
          {
            if (v62[2]) {
              uint64_t v97 = (char *)v61 + v62[2] + *(unsigned int *)((char *)v61 + v62[2]);
            }
            else {
              uint64_t v97 = 0;
            }
            if (v63 >= 9)
            {
              uint64_t v64 = v62[4];
              if (v64)
              {
                uint64_t v65 = (unsigned int *)((char *)v61 + v64 + *(unsigned int *)((char *)v61 + v64));
LABEL_67:
                uint64_t v103 = __ROR8__(*(void *)&v97[8 * *(unsigned __int8 *)(sub_A10764(v65, v59) + 14) + 4], 32);
                if (sub_B57EE8(a1, &v123, &v103, a5))
                {
                  uint64_t v124 = &v103;
                  uint64_t v66 = sub_B5BDCC(a6, &v103, (uint64_t)&unk_20F06E0, &v124);
                  int v67 = *((_DWORD *)v66 + 12);
                  if (v67 == 0x7FFFFFFF || v58 > v67)
                  {
                    unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v50 - v93) >> 2);
                    long long v94 = v66;
                    *((_DWORD *)v66 + 7) = 10 * v91;
                    uint64_t v69 = *(void *)(a1 + 64);
                    uint64_t v98 = v68;
                    uint64_t v124 = (uint64_t *)sub_A104E8((void *)(v69 + 4136), v40, v59, v68);
                    int v125 = v70;
                    long long v71 = (int *)sub_A11094((void *)(v69 + 4136), v40);
                    long long v72 = (unsigned __int16 *)((char *)v71 - *v71);
                    if (*v72 >= 9u && (uint64_t v73 = v72[4]) != 0) {
                      int v74 = (unsigned int *)((char *)v71 + v73 + *(unsigned int *)((char *)v71 + v73));
                    }
                    else {
                      int v74 = 0;
                    }
                    unsigned int v75 = *(unsigned __int16 *)(sub_A10764(v74, v59) + 12);
                    if (v95 == -1) {
                      int v76 = 0x7FFFFFFF;
                    }
                    else {
                      int v76 = v96;
                    }
                    int v92 = v76;
                    *((void *)v94 + 4) = sub_A0FAA0((uint64_t *)(v69 + 4184), (unsigned int *)&v124, v75, v76);
                    *((_WORD *)v94 + 20) = v77;
                    uint64_t v78 = *(void *)(a1 + 64);
                    uint64_t v124 = (uint64_t *)sub_A104E8((void *)(v78 + 4136), v40, v46, v98);
                    int v125 = v79;
                    int v80 = (int *)sub_A11094((void *)(v78 + 4136), v40);
                    int v81 = (unsigned __int16 *)((char *)v80 - *v80);
                    if (*v81 >= 9u && (uint64_t v82 = v81[4]) != 0) {
                      unint64_t v83 = (unsigned int *)((char *)v80 + v82 + *(unsigned int *)((char *)v80 + v82));
                    }
                    else {
                      unint64_t v83 = 0;
                    }
                    uint64_t v84 = sub_A10764(v83, v46);
                    *(void *)(v94 + 44) = sub_A0FDF4((uint64_t *)(v78 + 4184), (unsigned int *)&v124, *(unsigned __int16 *)(v84 + 12), v92);
                    *((_WORD *)v94 + 26) = v85;
                    *((void *)v94 + 7) = v40;
                    *((void *)v94 + 8) = v98 | (v95 << 32);
                    *((_DWORD *)v94 + 18) = v96;
                    *((_DWORD *)v94 + 19) = v59;
                    *((_DWORD *)v94 + 20) = v46;
                  }
                }
                goto LABEL_82;
              }
            }
          }
          uint64_t v65 = 0;
          goto LABEL_67;
        }
      }
    }
LABEL_82:
    unint64_t v86 = v122;
    unint64_t v38 = v121 + 16;
    unint64_t v121 = v38;
    if (v38 == v122)
    {
      int v87 = v119 + 2;
      long long v119 = v87;
      if ((unint64_t)v87 < v120)
      {
        while (1)
        {
          unint64_t v38 = *v87;
          unint64_t v86 = v87[1];
          if (*v87 != v86) {
            break;
          }
          v87 += 2;
          long long v119 = v87;
          if ((unint64_t)v87 >= v120) {
            return;
          }
        }
LABEL_87:
        unint64_t v121 = v38;
        unint64_t v122 = v86;
        goto LABEL_88;
      }
    }
    else
    {
LABEL_88:
      while (v38 < v86)
      {
        BOOL v88 = sub_A1E87C(v118);
        unint64_t v38 = v121;
        unint64_t v86 = v122;
        if (!v88) {
          break;
        }
        unint64_t v38 = v121 + 16;
        unint64_t v121 = v38;
        if (v38 == v122)
        {
          unint64_t v89 = v119 + 2;
          long long v119 = v89;
          if ((unint64_t)v89 < v120)
          {
            while (1)
            {
              unint64_t v38 = *v89;
              unint64_t v86 = v89[1];
              if (*v89 != v86) {
                break;
              }
              v89 += 2;
              long long v119 = v89;
              if ((unint64_t)v89 >= v120) {
                return;
              }
            }
            goto LABEL_87;
          }
          return;
        }
      }
      if (v38 < v86) {
        continue;
      }
    }
    break;
  }
}

void sub_B59CBC(_Unwind_Exception *a1)
{
  sub_B5B890(v1);
  _Unwind_Resume(a1);
}

void sub_B59CD0(_Unwind_Exception *a1)
{
  sub_B5B890(v1);
  _Unwind_Resume(a1);
}

void sub_B59CE4(_Unwind_Exception *a1)
{
  sub_B5B890(v1);
  _Unwind_Resume(a1);
}

void sub_B59CF8(_Unwind_Exception *a1)
{
  sub_B5B890(v1);
  _Unwind_Resume(a1);
}

void sub_B59D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_12168((uint64_t)va);
  sub_B5B890(v13);
  _Unwind_Resume(a1);
}

void sub_B59D28(_Unwind_Exception *a1)
{
  sub_B5B890(v1);
  _Unwind_Resume(a1);
}

void sub_B59D3C(_Unwind_Exception *a1)
{
  sub_B5B890(v1);
  _Unwind_Resume(a1);
}

void sub_B59D50(_Unwind_Exception *a1)
{
  sub_B5B890(v1);
  _Unwind_Resume(a1);
}

void sub_B59D64(_Unwind_Exception *a1)
{
  sub_B5B890(v1);
  _Unwind_Resume(a1);
}

void sub_B59D78(_Unwind_Exception *a1)
{
  sub_B5B890(v1);
  _Unwind_Resume(a1);
}

void sub_B59D8C(_Unwind_Exception *a1)
{
  sub_B5B890(v1);
  _Unwind_Resume(a1);
}

void sub_B59DA0(_Unwind_Exception *a1)
{
  sub_B5B890(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_B59DB4(uint64_t *result, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(uint64_t **)(a6 + 16);
  if (v7)
  {
    unint64_t v11 = result;
    unsigned int v12 = (void *)(a2 + 200);
    unint64_t v13 = a3 + 1;
    do
    {
      unsigned int v15 = *((_DWORD *)v7 + 20);
      unint64_t v16 = (int *)sub_A11094((void *)(v11[8] + 4136), v7[7]);
      unint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
      if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0) {
        uint64_t v19 = (unsigned int *)((char *)v16 + v18 + *(unsigned int *)((char *)v16 + v18));
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v36 = __ROR8__(*(void *)sub_A10764(v19, v15), 32);
      *(_OWORD *)&v35[8] = xmmword_20EC7F0;
      *(_DWORD *)&unsigned char v35[24] = 0;
      int v20 = *((_DWORD *)v7 + 12);
      *(_DWORD *)uint64_t v35 = 0;
      *(_DWORD *)&v35[4] = v20;
      unsigned int v21 = sub_A1E760(a5, &v36);
      if (!v21) {
        sub_5AE8("unordered_map::at: key not found");
      }
      int v22 = *((_DWORD *)v21 + 6);
      int v23 = v22 / 10;
      int v24 = v22 % 10;
      if (v22 < 0) {
        char v25 = -5;
      }
      else {
        char v25 = 5;
      }
      *(_DWORD *)&v35[8] = v23
                         + *(_DWORD *)&v35[4]
                         + (((103 * (char)(v25 + v24)) >> 15) & 1)
                         + ((103 * (char)(v25 + v24)) >> 10);
      *(void *)&v35[12] = v36;
      *(void *)&v35[20] = a4;
      uint64_t v26 = sub_A2AD08(v12, a3);
      uint64_t v27 = sub_A2AD08(v12, v13);
      unint64_t v28 = *(void *)(v27 + 8);
      *((_DWORD *)v7 + 6) = 1022611261 * ((v28 - *(void *)v27) >> 3);
      if (v28 >= *(void *)(v27 + 16))
      {
        *(void *)(v27 + 8) = sub_A21588((void **)v27, v35);
        unint64_t v30 = *(void *)(v26 + 8);
        if (v30 < *(void *)(v26 + 16))
        {
LABEL_17:
          *(_DWORD *)(v30 + 160) = -1;
          long long v31 = *(_OWORD *)(v7 + 3);
          long long v32 = *(_OWORD *)(v7 + 5);
          long long v33 = *(_OWORD *)(v7 + 7);
          *(_OWORD *)(v30 + 44) = *(_OWORD *)((char *)v7 + 68);
          *(_OWORD *)(v30 + 16) = v32;
          *(_OWORD *)(v30 + 32) = v33;
          *(_OWORD *)unint64_t v30 = v31;
          *(void *)(v30 + 72) = 0;
          *(void *)(v30 + 80) = 0;
          *(void *)(v30 + 64) = 0;
          *(_OWORD *)(v30 + 64) = *(_OWORD *)(v7 + 11);
          *(void *)(v30 + 80) = v7[13];
          v7[11] = 0;
          v7[12] = 0;
          v7[13] = 0;
          *(void *)(v30 + 88) = 0;
          *(void *)(v30 + 96) = 0;
          *(void *)(v30 + 104) = 0;
          *(_OWORD *)(v30 + 88) = *((_OWORD *)v7 + 7);
          *(void *)(v30 + 104) = v7[16];
          v7[15] = 0;
          v7[16] = 0;
          v7[14] = 0;
          *(_DWORD *)(v30 + 112) = *((_DWORD *)v7 + 34);
          *(void *)(v30 + 128) = 0;
          *(void *)(v30 + 136) = 0;
          *(void *)(v30 + 120) = 0;
          *(_OWORD *)(v30 + 120) = *((_OWORD *)v7 + 9);
          *(void *)(v30 + 136) = v7[20];
          v7[19] = 0;
          v7[20] = 0;
          v7[18] = 0;
          *(_OWORD *)(v30 + 144) = *(_OWORD *)(v7 + 21);
          *(_DWORD *)(v30 + 160) = 0;
          char v14 = (char *)(v30 + 168);
          goto LABEL_4;
        }
      }
      else
      {
        long long v29 = *(_OWORD *)v35;
        *(_OWORD *)(v28 + 12) = *(_OWORD *)&v35[12];
        *(_OWORD *)unint64_t v28 = v29;
        *(_DWORD *)(v28 + 160) = 1;
        *(void *)(v27 + 8) = v28 + 168;
        unint64_t v30 = *(void *)(v26 + 8);
        if (v30 < *(void *)(v26 + 16)) {
          goto LABEL_17;
        }
      }
      char v14 = sub_B5C228((void **)v26, (uint64_t)(v7 + 3));
LABEL_4:
      *(void *)(v26 + 8) = v14;
      BOOL result = sub_B5AAE8(a7, v7 + 2, v7 + 2);
      uint64_t v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  return result;
}

void sub_B5A078(uint64_t *a1, uint64_t a2, unint64_t a3, void *a4)
{
  int v8 = (void *)(a2 + 200);
  uint64_t v9 = sub_A2AD08((void *)(a2 + 200), a3);
  if (!*(unsigned char *)(v9 + 24))
  {
    uint64_t v10 = *(void *)v9;
    uint64_t v11 = *(void *)sub_A2AD08(v8, a3 + 1);
    sub_B58B08((uint64_t)a1, v11, (uint64_t)v39);
    uint64_t v12 = *(void *)(a2 + 200);
    if (a3 + 2 >= 0x8E38E38E38E38E39 * ((*(void *)(a2 + 208) - v12) >> 3))
    {
      uint64_t v24 = *(void *)(v12 + 72 * (a3 + 1));
      int v25 = *(_DWORD *)(v24 + 160);
      unint64_t v26 = *(void *)(v24 + 20);
      unint64_t v27 = *(unsigned int *)(v24 + 8) | ((unint64_t)*(unsigned int *)(v24 + 8) << 32);
      if (!v25) {
        unint64_t v27 = v26;
      }
      unint64_t v23 = HIDWORD(v27);
    }
    else
    {
      uint64_t v13 = *(void *)(v12 + 72 * (a3 + 2));
      int v14 = *(_DWORD *)(v13 + 160);
      unint64_t v15 = *(void *)(v13 + 8);
      uint64_t v16 = *(unsigned int *)(v13 + 4);
      BOOL v17 = v14 == 0;
      if (v14) {
        unint64_t v18 = v16 | (v16 << 32);
      }
      else {
        unint64_t v18 = v15;
      }
      if (!v17) {
        LODWORD(v16) = 0;
      }
      unint64_t v19 = HIDWORD(v18);
      int v20 = (int)v16 / -10;
      int v21 = (int)v16 % 10;
      if ((int)v16 < 0) {
        char v22 = -5;
      }
      else {
        char v22 = 5;
      }
      LODWORD(v23) = v20
                   + v19
                   + (((-103 * (char)(v22 + v21)) >> 15) & 1)
                   + ((-103 * (char)(v22 + v21)) >> 10);
    }
    sub_B594F0((uint64_t)a1, v10, v23, (uint64_t)v39, a4, (uint64_t)__p);
    sub_B59DB4(a1, a2, a3, *(void *)(v11 + 20), v39, (uint64_t)__p, (uint64_t)a4);
    unint64_t v28 = v38;
    if (v38)
    {
      do
      {
        long long v33 = (void *)*v28;
        double v34 = (void *)v28[18];
        if (v34)
        {
          v28[19] = v34;
          operator delete(v34);
        }
        uint64_t v35 = (void *)v28[14];
        if (v35)
        {
          v28[15] = v35;
          operator delete(v35);
        }
        uint64_t v36 = (void *)v28[11];
        if (v36)
        {
          v28[12] = v36;
          operator delete(v36);
        }
        operator delete(v28);
        unint64_t v28 = v33;
      }
      while (v33);
    }
    long long v29 = __p[0];
    __p[0] = 0;
    if (v29) {
      operator delete(v29);
    }
    unint64_t v30 = v40;
    if (v40)
    {
      do
      {
        long long v31 = (void *)*v30;
        operator delete(v30);
        unint64_t v30 = v31;
      }
      while (v31);
    }
    long long v32 = v39[0];
    v39[0] = 0;
    if (v32) {
      operator delete(v32);
    }
  }
}

void sub_B5A2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_B5A2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B5A2E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  for (uint64_t i = *(void *)(a2 + 16); v2 != i; v2 += 296)
  {
    uint64_t v5 = a1[3];
    if (!v5) {
      sub_29F82C();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, v2))
    {
      uint64_t v6 = *(void **)(v2 + 200);
      uint64_t v7 = *(void **)(v2 + 208);
      if (v6 == v7)
      {
LABEL_9:
        sub_B5881C(a1, v2, (uint64_t)v13);
        uint64_t v8 = -1 - 0x71C71C71C71C71C7 * ((uint64_t)(*(void *)(v2 + 208) - *(void *)(v2 + 200)) >> 3);
        if (v8)
        {
          for (unint64_t j = 0; j != v8; ++j)
            sub_B5A078(a1, v2, j, v13);
        }
        uint64_t v10 = __p;
        if (__p)
        {
          do
          {
            uint64_t v11 = (void *)*v10;
            operator delete(v10);
            uint64_t v10 = v11;
          }
          while (v11);
        }
        uint64_t v12 = v13[0];
        v13[0] = 0;
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        while (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v6[1] - *v6) >> 3) <= 1)
        {
          v6 += 9;
          if (v6 == v7) {
            goto LABEL_9;
          }
        }
      }
    }
  }
}

void sub_B5A43C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_12168((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B5A450(uint64_t a1, int *a2, int *a3)
{
  if (a2 == a3) {
    return 0;
  }
  if (!a2 || !a3) {
    return (a3 == 0) - (a2 == 0);
  }
  uint64_t v24 = v3;
  uint64_t v25 = v4;
  uint64_t v5 = (unsigned __int16 *)((char *)a2 - *a2);
  unsigned int v6 = *v5;
  if (v6 < 5)
  {
    LODWORD(v8) = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = v5[2];
    if (v5[2]) {
      v7 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v7);
    }
    if (v6 < 7)
    {
      LODWORD(v8) = 0;
    }
    else
    {
      uint64_t v8 = v5[3];
      if (v5[3]) {
        LODWORD(v8) = *(int *)((char *)a2 + v8);
      }
      if (v6 >= 9)
      {
        unsigned __int16 v9 = v5[4];
        if (v9)
        {
          uint64_t v10 = (char *)a2 + v9;
          goto LABEL_18;
        }
      }
    }
  }
  uint64_t v10 = 0;
LABEL_18:
  uint64_t v21 = v7;
  int v22 = v8;
  unint64_t v23 = v10;
  uint64_t v12 = (unsigned __int16 *)((char *)a3 - *a3);
  unsigned int v13 = *v12;
  if (v13 < 5)
  {
    LODWORD(v15) = 0;
    uint64_t v14 = 0;
LABEL_29:
    BOOL v17 = 0;
    goto LABEL_30;
  }
  uint64_t v14 = v12[2];
  if (v12[2]) {
    v14 += (uint64_t)a3 + *(unsigned int *)((char *)a3 + v14);
  }
  if (v13 < 7)
  {
    LODWORD(v15) = 0;
    goto LABEL_29;
  }
  uint64_t v15 = v12[3];
  if (v12[3]) {
    LODWORD(v15) = *(int *)((char *)a3 + v15);
  }
  if (v13 < 9) {
    goto LABEL_29;
  }
  unsigned __int16 v16 = v12[4];
  if (!v16) {
    goto LABEL_29;
  }
  BOOL v17 = (char *)a3 + v16;
LABEL_30:
  uint64_t v18 = v14;
  int v19 = v15;
  int v20 = v17;
  return sub_B5A59C(a1, (uint64_t)&v21, (uint64_t)&v18);
}

uint64_t sub_B5A59C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(int **)a2;
  unsigned int v6 = *(int **)a3;
  if (v5 != v6)
  {
    if (v5) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      uint64_t result = (v6 == 0) - (v5 == 0);
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t result = sub_B5A6CC(a1, v5, v6);
      if (result) {
        return result;
      }
    }
  }
  unsigned int v9 = *(_DWORD *)(a2 + 8);
  unsigned int v10 = *(_DWORD *)(a3 + 8);
  BOOL v11 = v9 >= v10;
  BOOL v12 = v9 > v10;
  if (v11) {
    uint64_t result = v12;
  }
  else {
    uint64_t result = 0xFFFFFFFFLL;
  }
  if (!result)
  {
    unsigned int v13 = *(unsigned __int8 **)(a2 + 16);
    uint64_t v14 = *(unsigned __int8 **)(a3 + 16);
    if (v13 == v14)
    {
      return 0;
    }
    else if (v13 && v14)
    {
      unsigned int v15 = *v13;
      unsigned int v16 = *v14;
      BOOL v11 = v15 >= v16;
      BOOL v17 = v15 > v16;
      if (v11) {
        uint64_t result = v17;
      }
      else {
        uint64_t result = 0xFFFFFFFFLL;
      }
      if (!result)
      {
        unsigned int v18 = v13[2];
        unsigned int v19 = v13[3];
        unsigned int v20 = v14[2];
        unsigned int v21 = v14[3];
        unsigned int v22 = v14[1];
        unsigned int v23 = v13[1];
        BOOL v11 = v23 >= v22;
        unsigned int v24 = v23 > v22;
        if (!v11) {
          unsigned int v24 = -1;
        }
        unsigned int v25 = v18 > v20;
        if (v18 < v20) {
          unsigned int v25 = -1;
        }
        int v26 = v19 > v21;
        if (v19 < v21) {
          int v26 = -1;
        }
        if (!v25) {
          unsigned int v25 = v26;
        }
        if (v24) {
          return v24;
        }
        else {
          return v25;
        }
      }
    }
    else
    {
      return (v14 == 0) - (v13 == 0);
    }
  }
  return result;
}

uint64_t sub_B5A6CC(uint64_t a1, int *a2, int *a3)
{
  uint64_t v3 = (unsigned __int16 *)((char *)a2 - *a2);
  unsigned int v4 = *v3;
  if (v4 < 7)
  {
    LOBYTE(v6) = 0;
    uint64_t v5 = 0;
    uint64_t v8 = 0;
    if (v4 < 5) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v5 = v3[3];
    if (v3[3]) {
      v5 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v5);
    }
    if (v4 < 9)
    {
      LOBYTE(v6) = 0;
      uint64_t v7 = v3[2];
      if (v7) {
        goto LABEL_10;
      }
      goto LABEL_12;
    }
    uint64_t v6 = v3[4];
    if (v3[4])
    {
      LOBYTE(v6) = *((unsigned char *)a2 + v6);
      uint64_t v7 = v3[2];
      if (!v7) {
        goto LABEL_12;
      }
LABEL_10:
      uint64_t v8 = (char *)a2 + v7 + *(unsigned int *)((char *)a2 + v7);
      goto LABEL_13;
    }
  }
  uint64_t v7 = v3[2];
  if (v7) {
    goto LABEL_10;
  }
LABEL_12:
  uint64_t v8 = 0;
LABEL_13:
  uint64_t v19 = v5;
  char v20 = v6;
  unsigned int v21 = v8;
  unsigned int v9 = (unsigned __int16 *)((char *)a3 - *a3);
  unsigned int v10 = *v9;
  if (v10 >= 7)
  {
    uint64_t v11 = v9[3];
    if (v9[3]) {
      v11 += (uint64_t)a3 + *(unsigned int *)((char *)a3 + v11);
    }
    if (v10 < 9)
    {
      LOBYTE(v12) = 0;
      uint64_t v13 = v9[2];
      if (v13) {
        goto LABEL_22;
      }
      goto LABEL_24;
    }
    uint64_t v12 = v9[4];
    if (v9[4])
    {
      LOBYTE(v12) = *((unsigned char *)a3 + v12);
      uint64_t v13 = v9[2];
      if (!v13) {
        goto LABEL_24;
      }
      goto LABEL_22;
    }
LABEL_21:
    uint64_t v13 = v9[2];
    if (v13)
    {
LABEL_22:
      uint64_t v14 = (char *)a3 + v13 + *(unsigned int *)((char *)a3 + v13);
      goto LABEL_25;
    }
LABEL_24:
    uint64_t v14 = 0;
    goto LABEL_25;
  }
  LOBYTE(v12) = 0;
  uint64_t v11 = 0;
  uint64_t v14 = 0;
  if (v10 >= 5) {
    goto LABEL_21;
  }
LABEL_25:
  uint64_t v16 = v11;
  char v17 = v12;
  unsigned int v18 = v14;
  return sub_B5A814(a1, (uint64_t)&v19, (uint64_t)&v16);
}

uint64_t sub_B5A814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(int **)a2;
  uint64_t v7 = *(int **)a3;
  if (v6 != v7)
  {
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      uint64_t result = (v7 == 0) - (v6 == 0);
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t result = sub_B5A968(a1, v6, v7);
      if (result) {
        return result;
      }
    }
  }
  unsigned int v10 = *(unsigned __int8 *)(a2 + 8);
  unsigned int v11 = *(unsigned __int8 *)(a3 + 8);
  BOOL v12 = v10 >= v11;
  BOOL v13 = v10 > v11;
  if (v12) {
    uint64_t result = v13;
  }
  else {
    uint64_t result = 0xFFFFFFFFLL;
  }
  if (!result)
  {
    uint64_t v14 = *(unsigned int **)(a2 + 16);
    unsigned int v15 = *(unsigned int **)(a3 + 16);
    if (v14 == v15) {
      return 0;
    }
    if (!v14 || !v15) {
      return (v15 == 0) - (v14 == 0);
    }
    uint64_t v16 = *v14;
    unsigned int v17 = *v15;
    if (v16 != *v15)
    {
      if (v16 < v17) {
        return 0xFFFFFFFFLL;
      }
      else {
        return v16 > v17;
      }
    }
    if (!v16) {
      return 0;
    }
    unsigned int v18 = v14 + 1;
    uint64_t v19 = v15 + 1;
    do
    {
      char v20 = (int *)((char *)v18 + *v18);
      unsigned int v21 = (int *)((char *)v19 + *v19);
      if (v20 != v21)
      {
        uint64_t result = sub_B5A968(a1, v20, v21);
        if (result) {
          break;
        }
      }
      uint64_t result = 0;
      ++v19;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_B5A968(uint64_t a1, int *a2, int *a3)
{
  uint64_t v3 = (unsigned __int16 *)((char *)a2 - *a2);
  unsigned int v4 = *v3;
  if (v4 < 5)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = v3[2];
    if (v3[2]) {
      v5 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v5);
    }
    if (v4 >= 7)
    {
      uint64_t v6 = v3[3];
      if (v6)
      {
        uint64_t v7 = (char *)a2 + v6 + *(unsigned int *)((char *)a2 + v6);
        BOOL v8 = (unsigned __int16 *)((char *)a3 - *a3);
        unsigned int v9 = *v8;
        if (v9 < 5) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
    }
  }
  uint64_t v7 = 0;
  BOOL v8 = (unsigned __int16 *)((char *)a3 - *a3);
  unsigned int v9 = *v8;
  if (v9 < 5)
  {
LABEL_7:
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    if (!v5) {
      goto LABEL_23;
    }
    goto LABEL_18;
  }
LABEL_11:
  uint64_t v10 = v8[2];
  if (v8[2]) {
    v10 += (uint64_t)a3 + *(unsigned int *)((char *)a3 + v10);
  }
  if (v9 >= 7 && (uint64_t v12 = v8[3]) != 0)
  {
    unsigned int v11 = (char *)a3 + v12 + *(unsigned int *)((char *)a3 + v12);
    if (v5 == v10) {
      goto LABEL_23;
    }
  }
  else
  {
    unsigned int v11 = 0;
    if (v5 == v10) {
      goto LABEL_23;
    }
  }
LABEL_18:
  if (v5 && v10)
  {
    uint64_t result = strcmp((const char *)(v5 + 4), (const char *)(v10 + 4));
    if (result) {
      return result;
    }
  }
  else
  {
    uint64_t result = (v10 == 0) - (v5 == 0);
    if (result) {
      return result;
    }
  }
LABEL_23:
  if (v7 == v11) {
    return 0;
  }
  if (!v7 || !v11) {
    return (v11 == 0) - (v7 == 0);
  }

  return strcmp(v7 + 4, v11 + 4);
}

uint64_t *sub_B5AAE8(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v8 = (0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) >> 33);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = (0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) >> 33);
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unsigned int v11 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 5) == HIDWORD(v6) && *((_DWORD *)v12 + 4) == v6) {
                return v12;
              }
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint64_t v12 = (uint64_t *)*v12;
            if (!v12) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 5) == HIDWORD(v6) && *((_DWORD *)v12 + 4) == v6) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  unsigned int v18 = operator new(0x18uLL);
  *unsigned int v18 = 0;
  v18[1] = v8;
  void v18[2] = *a3;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v9 && (float)(v20 * (float)v9) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    unsigned int v22 = *(void **)(*(void *)a1 + 8 * v3);
    if (v22)
    {
LABEL_34:
      *unsigned int v18 = *v22;
LABEL_69:
      *unsigned int v22 = v18;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v9 >= 3) {
      BOOL v23 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v9);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_45;
    }
    if (prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v9) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v30 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        uint64_t v21 = *(void *)a1;
        unsigned int v22 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        if (v22) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v8;
        uint64_t v21 = *(void *)a1;
        unsigned int v22 = *(void **)(*(void *)a1 + 8 * v8);
        if (v22) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = v30 & v8;
      uint64_t v21 = *(void *)a1;
      unsigned int v22 = *(void **)(*(void *)a1 + 8 * (v30 & v8));
      if (v22) {
        goto LABEL_34;
      }
    }
  }
  *unsigned int v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v18)
  {
    unint64_t v31 = *(void *)(*v18 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v31 >= v9) {
        v31 %= v9;
      }
    }
    else
    {
      v31 &= v9 - 1;
    }
    unsigned int v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v18;
}

void sub_B5AE38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_B5AE4C(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v8 = (0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) >> 33);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = (0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) >> 33);
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unsigned int v11 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 5) == HIDWORD(v6) && *((_DWORD *)v12 + 4) == v6) {
                return v12;
              }
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint64_t v12 = (uint64_t *)*v12;
            if (!v12) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 5) == HIDWORD(v6) && *((_DWORD *)v12 + 4) == v6) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  unsigned int v18 = operator new(0x18uLL);
  *unsigned int v18 = 0;
  v18[1] = v8;
  void v18[2] = *a3;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v9 && (float)(v20 * (float)v9) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    unsigned int v22 = *(void **)(*(void *)a1 + 8 * v3);
    if (v22)
    {
LABEL_34:
      *unsigned int v18 = *v22;
LABEL_69:
      *unsigned int v22 = v18;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v9 >= 3) {
      BOOL v23 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v9);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_45;
    }
    if (prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v9) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v30 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        uint64_t v21 = *(void *)a1;
        unsigned int v22 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        if (v22) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v8;
        uint64_t v21 = *(void *)a1;
        unsigned int v22 = *(void **)(*(void *)a1 + 8 * v8);
        if (v22) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = v30 & v8;
      uint64_t v21 = *(void *)a1;
      unsigned int v22 = *(void **)(*(void *)a1 + 8 * (v30 & v8));
      if (v22) {
        goto LABEL_34;
      }
    }
  }
  *unsigned int v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v18)
  {
    unint64_t v31 = *(void *)(*v18 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v31 >= v9) {
        v31 %= v9;
      }
    }
    else
    {
      v31 &= v9 - 1;
    }
    unsigned int v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v18;
}

void sub_B5B19C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_B5B1B0(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v9 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            unint64_t v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  float v19 = operator new(0x20uLL);
  void *v19 = 0;
  v19[1] = v9;
  void v19[2] = **a4;
  *((_DWORD *)v19 + 6) = 0x7FFFFFFF;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    BOOL v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      void *v19 = *v23;
LABEL_69:
      void *v23 = v19;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        BOOL v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v22 = *(void *)a1;
        BOOL v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      BOOL v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  void *v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v19)
  {
    unint64_t v32 = *(void *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    BOOL v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_B5B50C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_B5B520(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v9 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            unint64_t v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  float v19 = operator new(0x20uLL);
  void *v19 = 0;
  v19[1] = v9;
  void v19[2] = **a4;
  *((_DWORD *)v19 + 6) = 0x7FFFFFFF;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    BOOL v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      void *v19 = *v23;
LABEL_69:
      void *v23 = v19;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        BOOL v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v22 = *(void *)a1;
        BOOL v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      BOOL v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  void *v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v19)
  {
    unint64_t v32 = *(void *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    BOOL v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_B5B87C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B5B890(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      uint64_t v6 = (void *)v2[18];
      if (v6)
      {
        v2[19] = v6;
        operator delete(v6);
      }
      uint64_t v7 = (void *)v2[14];
      if (v7)
      {
        v2[15] = v7;
        operator delete(v7);
      }
      unint64_t v8 = (void *)v2[11];
      if (v8)
      {
        v2[12] = v8;
        operator delete(v8);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_B5B91C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_B5BA60(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_B5BA38(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_B5BA4C(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_B5BA60(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v8 = (0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) >> 33);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = (0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) >> 33);
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint8x8_t v11 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 5) == HIDWORD(v6) && *((_DWORD *)v12 + 4) == v6) {
                return v12;
              }
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint64_t v12 = (uint64_t *)*v12;
            if (!v12) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 5) == HIDWORD(v6) && *((_DWORD *)v12 + 4) == v6) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  unsigned int v18 = operator new(0x20uLL);
  *unsigned int v18 = 0;
  v18[1] = v8;
  void v18[2] = *(void *)a3;
  *((_DWORD *)v18 + 6) = *(_DWORD *)(a3 + 8);
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v9 && (float)(v20 * (float)v9) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
    if (v22)
    {
LABEL_34:
      *unsigned int v18 = *v22;
LABEL_69:
      *uint64_t v22 = v18;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v9 >= 3) {
      BOOL v23 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v9);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_45;
    }
    if (prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v9) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v30 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        if (v22) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v8;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void **)(*(void *)a1 + 8 * v8);
        if (v22) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = v30 & v8;
      uint64_t v21 = *(void *)a1;
      uint64_t v22 = *(void **)(*(void *)a1 + 8 * (v30 & v8));
      if (v22) {
        goto LABEL_34;
      }
    }
  }
  *unsigned int v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v18)
  {
    unint64_t v31 = *(void *)(*v18 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v31 >= v9) {
        v31 %= v9;
      }
    }
    else
    {
      v31 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v18;
}

void sub_B5BDB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_B5BDCC(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v9 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = (0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33);
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = (char *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = *((void *)v13 + 1);
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            unint64_t v13 = *(char **)v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 5) == HIDWORD(v7) && *((_DWORD *)v13 + 4) == v7) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  unsigned int v18 = (void *)(a1 + 16);
  unint64_t v13 = (char *)operator new(0xB8uLL);
  *(void *)unint64_t v13 = 0;
  *((void *)v13 + 1) = v9;
  *((void *)v13 + 2) = **a4;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *((void *)v13 + 21) = 0;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 136) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(void *)(v13 + 28) = 0x8000000080000000;
  *((_DWORD *)v13 + 9) = 0x7FFFFFFF;
  *(void *)(v13 + 44) = 0x8000000080000000;
  *((_DWORD *)v13 + 14) = -1;
  *((_OWORD *)v13 + 4) = xmmword_20B8E30;
  *((_DWORD *)v13 + 20) = -1;
  *(_OWORD *)(v13 + 120) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *((_DWORD *)v13 + 34) = 0x7FFFFFFF;
  *((void *)v13 + 18) = 0;
  *((void *)v13 + 19) = 0;
  *((void *)v13 + 20) = 0;
  v13[168] = 1;
  *(void *)(v13 + 172) = 0x8000000080000000;
  *((_DWORD *)v13 + 45) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v10 && (float)(v20 * (float)v10) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
    if (v22)
    {
LABEL_34:
      *(void *)unint64_t v13 = *v22;
LABEL_69:
      *uint64_t v22 = v13;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v10 >= 3) {
      BOOL v23 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v10);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v30 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v22) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void **)(*(void *)a1 + 8 * v9);
        if (v22) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v30 & v9;
      uint64_t v21 = *(void *)a1;
      uint64_t v22 = *(void **)(*(void *)a1 + 8 * (v30 & v9));
      if (v22) {
        goto LABEL_34;
      }
    }
  }
  *(void *)unint64_t v13 = *v18;
  *unsigned int v18 = v13;
  *(void *)(v21 + 8 * v4) = v18;
  if (*(void *)v13)
  {
    unint64_t v31 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v31 >= v10) {
        v31 %= v10;
      }
    }
    else
    {
      v31 &= v10 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_B5C1A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B5C1B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B5C1B8(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (void *)v2[18];
      if (v3)
      {
        v2[19] = v3;
        operator delete(v3);
      }
      unint64_t v4 = (void *)v2[14];
      if (v4)
      {
        v2[15] = v4;
        operator delete(v4);
      }
      int8x8_t v5 = (void *)v2[11];
      if (v5)
      {
        v2[12] = v5;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

char *sub_B5C228(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xCF3CF3CF3CF3CF3DLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x9E79E79E79E79E7ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v5 = 0x186186186186186;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x186186186186186) {
    sub_188D718();
  }
  uint64_t v7 = 168 * v5;
  unint64_t v8 = (char *)operator new(168 * v5);
  long long v9 = *(_OWORD *)(a2 + 16);
  unint64_t v10 = &v8[168 * v3];
  uint8x8_t v11 = &v8[v7];
  *(_OWORD *)unint64_t v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v9;
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v10 + 44) = *(_OWORD *)(a2 + 44);
  *((_OWORD *)v10 + 4) = *(_OWORD *)(a2 + 64);
  *((void *)v10 + 10) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)(v10 + 88) = *(_OWORD *)(a2 + 88);
  *((void *)v10 + 13) = *(void *)(a2 + 104);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *((_DWORD *)v10 + 28) = *(_DWORD *)(a2 + 112);
  *(_OWORD *)(v10 + 120) = *(_OWORD *)(a2 + 120);
  *((void *)v10 + 17) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *((_OWORD *)v10 + 9) = *(_OWORD *)(a2 + 144);
  *((_DWORD *)v10 + 40) = 0;
  uint64_t v12 = v10 + 168;
  unint64_t v14 = (char *)*a1;
  unint64_t v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v13) {
      return v10 + 168;
    }
    goto LABEL_27;
  }
  uint64_t v15 = 0;
  do
  {
    unsigned int v17 = (long long *)&v10[v15 - 168];
    unsigned int v18 = (long long *)&v13[v15 - 168];
    int v19 = *(_DWORD *)&v13[v15 - 8];
    *(_DWORD *)&v10[v15 - 8] = v19;
    if (v19 == 1)
    {
      long long v16 = *v18;
      *(_OWORD *)&v10[v15 - 156] = *(_OWORD *)&v13[v15 - 156];
      *unsigned int v17 = v16;
    }
    else if (!v19)
    {
      sub_9F6FA0((uint64_t)v17, v18);
    }
    v15 -= 168;
  }
  while (&v13[v15] != v14);
  float v20 = (char *)*a1;
  unint64_t v13 = (char *)a1[1];
  *a1 = &v10[v15];
  a1[1] = v12;
  a1[2] = v11;
  if (v13 != v20)
  {
    do
    {
      if (!*((_DWORD *)v13 - 2))
      {
        uint64_t v21 = (void *)*((void *)v13 - 6);
        if (v21)
        {
          *((void *)v13 - 5) = v21;
          operator delete(v21);
        }
        uint64_t v22 = (void *)*((void *)v13 - 10);
        if (v22)
        {
          *((void *)v13 - 9) = v22;
          operator delete(v22);
        }
        BOOL v23 = (void *)*((void *)v13 - 13);
        if (v23)
        {
          *((void *)v13 - 12) = v23;
          operator delete(v23);
        }
      }
      v13 -= 168;
    }
    while (v13 != v20);
    unint64_t v13 = v20;
  }
  if (v13) {
LABEL_27:
  }
    operator delete(v13);
  return v10 + 168;
}

uint64_t sub_B5C460(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  if (v5)
  {
    if (v5 == a3)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  long long __p = operator new(0x20uLL);
  long long v12 = xmmword_20B9800;
  strcpy((char *)__p, "is_frequent_max_num_departures");
  int v6 = sub_31AC04(a2, (uint64_t)&__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  long long __p = operator new(0x28uLL);
  long long v12 = xmmword_20B93A0;
  strcpy((char *)__p, "currency_code_normalisation_factors");
  uint64_t v7 = sub_560F4(a2, (uint64_t)&__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  for (uint64_t i = v7 + 16; ; sub_B5DD20(a1 + 40, i + 16, i + 16, (void *)(i + 40)))
  {
    uint64_t i = *(void *)i;
    if (!i) {
      break;
    }
    if (*(_DWORD *)(i + 48) != 1)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
  }
  return a1;
}

void sub_B5C648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_3A4C2C(v16);
  sub_9F5350(v15);
  _Unwind_Resume(a1);
}

int32x4_t sub_B5C6BC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = sub_B5C460(a1, a3, a4);
  *(void *)(v5 + 80) = a2;
  int32x4_t result = vdupq_n_s32(0x7FFFFFFEu);
  *(int32x4_t *)(v5 + 88) = result;
  *(_DWORD *)(v5 + 104) = -1;
  *(void *)(v5 + 120) = 0;
  *(void *)(v5 + 128) = 0;
  *(void *)(v5 + 112) = 0;
  return result;
}

uint64_t sub_B5C708(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(int32x4_t *)(result + 88) = vdupq_n_s32(0x7FFFFFFEu);
  *(_DWORD *)(result + 104) = -1;
  uint64_t v3 = *(void *)(a3 + 8);
  uint64_t v4 = *(void *)(a3 + 16);
  if (v3 != v4)
  {
    uint64_t v7 = result;
    do
    {
      uint64_t v15 = *(void *)(v7 + 24);
      if (!v15) {
LABEL_29:
      }
        sub_29F82C();
      int32x4_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 48))(v15, v3);
      if (result)
      {
        int32x4_t result = sub_B5C8A4(v7, a2, v3);
        if (*(void *)(v3 + 200) != *(void *)(v3 + 208))
        {
          int v16 = *(_DWORD *)(v3 + 32);
          int v9 = 0x7FFFFFFF;
          if (v16 != 0x7FFFFFFF)
          {
            int v17 = *(_DWORD *)(v3 + 20);
            int v18 = 10 * (v16 - v17);
            if (v17 == 0x7FFFFFFF) {
              int v9 = 0x7FFFFFFF;
            }
            else {
              int v9 = v18;
            }
          }
          int v8 = *(_DWORD *)(v7 + 92);
          if (v9 >= *(_DWORD *)(v7 + 88)) {
            int v9 = *(_DWORD *)(v7 + 88);
          }
          *(_DWORD *)(v7 + 88) = v9;
          int v10 = *(_DWORD *)(v3 + 48);
          if (v10 >= v8) {
            int v10 = v8;
          }
          *(_DWORD *)(v7 + 92) = v10;
          int v11 = *(_DWORD *)(v3 + 60);
          int v12 = *(_DWORD *)(v7 + 100);
          if (v11 >= *(_DWORD *)(v7 + 96)) {
            int v11 = *(_DWORD *)(v7 + 96);
          }
          *(_DWORD *)(v7 + 96) = v11;
          int v13 = *(_DWORD *)(v3 + 72);
          if (v13 >= v12) {
            int v13 = v12;
          }
          *(_DWORD *)(v7 + 100) = v13;
          unsigned int v14 = *(_DWORD *)(v3 + 80);
          if (v14 >= *(_DWORD *)(v7 + 104)) {
            unsigned int v14 = *(_DWORD *)(v7 + 104);
          }
          *(_DWORD *)(v7 + 104) = v14;
        }
      }
      v3 += 296;
    }
    while (v3 != v4);
    uint64_t v20 = *(void *)(a3 + 8);
    uint64_t v19 = *(void *)(a3 + 16);
    while (v20 != v19)
    {
      uint64_t v21 = *(void *)(v7 + 24);
      if (!v21) {
        goto LABEL_29;
      }
      int32x4_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v21 + 48))(v21, v20);
      if (result) {
        int32x4_t result = (uint64_t)sub_B5CF90((_DWORD *)v7, v20);
      }
      v20 += 296;
    }
  }
  return result;
}

uint64_t sub_B5C8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 200);
  uint64_t v5 = (void *)(a3 + 200);
  if (v6 == *(void *)(a3 + 208))
  {
    int v16 = *(uint64_t **)(a3 + 200);
    goto LABEL_38;
  }
  *(void *)(a3 + 16) = sub_A2AAF8(a3, 0);
  *(_WORD *)(a3 + 24) = v8;
  uint64_t v10 = *(void *)(a3 + 200);
  uint64_t v9 = *(void *)(a3 + 208);
  if (v10 == v9)
  {
    __int16 v23 = 0;
    unint64_t v25 = 0x7FFFFFFF00000000;
    LODWORD(v22) = 0x7FFFFFFF;
    goto LABEL_24;
  }
  uint64_t v11 = v9 - v10;
  if (v9 - v10 == 72 && *(unsigned char *)(v10 + 24) == 1)
  {
    uint64_t v12 = *(void *)(v9 - 72);
    int v13 = *(_DWORD *)(v12 + 160);
    unint64_t v14 = *(void *)(v12 + 20);
    unsigned int v15 = *(_DWORD *)(v12 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(v9 - 72);
    int v13 = *(_DWORD *)(v12 + 160);
    unint64_t v14 = *(void *)(v12 + 20);
    int v17 = *(_DWORD *)(v12 + 4);
    unsigned int v15 = *(_DWORD *)(v12 + 8);
    if (v13) {
      int v18 = *(_DWORD *)(v12 + 8);
    }
    else {
      int v18 = *(void *)(v12 + 20);
    }
    if (!v13) {
      int v17 = *(_DWORD *)(v12 + 8);
    }
    if (v18 == v17)
    {
      uint64_t v19 = sub_A0D24C(v5, 0x8E38E38E38E38E39 * (v11 >> 3) - 2);
      int v20 = *(_DWORD *)(*(void *)v19 + 160);
      BOOL v21 = v20 == 0;
      if (v20) {
        unint64_t v22 = *(unsigned int *)(*(void *)v19 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v19 + 8) << 32);
      }
      else {
        unint64_t v22 = *(void *)(*(void *)v19 + 20);
      }
      if (v21) {
        __int16 v23 = *(_DWORD *)(*(void *)v19 + 28);
      }
      else {
        __int16 v23 = 0;
      }
      goto LABEL_22;
    }
  }
  int v24 = *(_DWORD *)(v12 + 28);
  unint64_t v22 = v15 | ((unint64_t)v15 << 32);
  if (v13)
  {
    __int16 v23 = 0;
  }
  else
  {
    unint64_t v22 = v14;
    __int16 v23 = v24;
  }
LABEL_22:
  unint64_t v25 = v22 & 0xFFFFFFFF00000000;
LABEL_24:
  *(void *)(a3 + 28) = v22 | v25;
  *(_WORD *)(a3 + 36) = v23;
  int v26 = *(_DWORD *)(a2 + 4);
  if (*(unsigned char *)a2)
  {
    unint64_t v27 = HIDWORD(v25);
    BOOL v28 = v27 == 0x7FFFFFFF || v26 == 0x7FFFFFFF;
    unint64_t v29 = (unint64_t)(10 * (v26 - v27)) << 32;
    if (v28) {
      unint64_t v29 = 0x7FFFFFFF00000000;
    }
    unint64_t v30 = v29 | (10 * (v26 - v22));
  }
  else
  {
    int v31 = *(_DWORD *)(a3 + 20);
    BOOL v32 = v26 == 0x7FFFFFFF || v31 == 0x7FFFFFFF;
    unint64_t v33 = (unint64_t)(10 * (v31 - v26)) << 32;
    if (v32) {
      unint64_t v33 = 0x7FFFFFFF00000000;
    }
    unint64_t v30 = v33 | (10 * (*(_DWORD *)(a3 + 16) - v26));
    __int16 v23 = *(_WORD *)(a3 + 24);
  }
  *(void *)(a3 + 68) = v30;
  *(_WORD *)(a3 + 76) = v23;
  int v16 = *(uint64_t **)(a3 + 200);
  uint64_t v6 = *(void *)(a3 + 208);
LABEL_38:
  *(unsigned char *)(a3 + 8) = 1;
  *(void *)(a3 + 44) = 0;
  *(_WORD *)(a3 + 52) = 0;
  *(void *)(a3 + 56) = 0;
  *(_WORD *)(a3 + 64) = 0;
  *(void *)(a3 + 80) = 0;
  *(_DWORD *)(a3 + 88) = 0;
  if (v16 == (uint64_t *)v6)
  {
    uint64_t v96 = v6;
  }
  else
  {
    do
    {
      if (*((unsigned char *)v16 + 24) == 1)
      {
        uint64_t v58 = *v16;
        if (*(void *)(*v16 + 12) != *(void *)(*v16 + 20))
        {
          uint64_t v34 = *(unsigned int *)(v58 + 4);
          uint64_t v35 = *(unsigned int *)(v58 + 8);
          int v36 = *(_DWORD *)(a3 + 48);
          BOOL v21 = v35 == 0x7FFFFFFF;
          int v37 = v35 - v34;
          BOOL v38 = v21 || v34 == 0x7FFFFFFF;
          int v39 = 10 * v37;
          uint64_t v40 = (*(_DWORD *)(a3 + 44) + 10 * v37);
          BOOL v41 = v38 || v36 == 0x7FFFFFFF;
          if (v38) {
            int v39 = 0x7FFFFFFF;
          }
          unint64_t v42 = (unint64_t)(v39 + v36) << 32;
          if (v41) {
            unint64_t v42 = 0x7FFFFFFF00000000;
          }
          *(void *)(a3 + 44) = v42 | v40;
          uint64_t v44 = *(unsigned int *)(v58 + 4);
          uint64_t v43 = *(unsigned int *)(v58 + 8);
          int v45 = v43 - v44;
          int v46 = *(_DWORD *)(a3 + 60);
          BOOL v47 = v43 == 0x7FFFFFFF || v44 == 0x7FFFFFFF;
          int v48 = 10 * v45;
          uint64_t v49 = (*(_DWORD *)(a3 + 56) + 10 * v45);
          BOOL v50 = v47 || v46 == 0x7FFFFFFF;
          if (v47) {
            int v48 = 0x7FFFFFFF;
          }
          unint64_t v51 = (unint64_t)(v48 + v46) << 32;
          if (v50) {
            unint64_t v51 = 0x7FFFFFFF00000000;
          }
          *(void *)(a3 + 56) = v51 | v49;
        }
      }
      else if (!*((unsigned char *)v16 + 24))
      {
        sub_B5D264(a1, v16);
        uint64_t v52 = *v16;
        uint64_t v53 = v16[1];
        if (*v16 != v53)
        {
          do
          {
            sub_B5D758(a1, v52);
            v52 += 168;
          }
          while (v52 != v53);
          uint64_t v52 = *v16;
        }
        int v117 = -1;
        sub_A20F00((uint64_t)v105, v52);
        int v54 = v117;
        unint64_t v55 = v109;
        if (v117) {
          unint64_t v55 = v107 | ((unint64_t)v107 << 32);
        }
        unint64_t v56 = v107;
        if (v117) {
          unint64_t v56 = v106 | ((unint64_t)v106 << 32);
        }
        if (HIDWORD(v55) == 0x7FFFFFFF || HIDWORD(v56) == 0x7FFFFFFF) {
          unint64_t v57 = 0x7FFFFFFF00000000;
        }
        else {
          unint64_t v57 = (unint64_t)(5 * (HIDWORD(v55) - HIDWORD(v56))) << 33;
        }
        __int16 v59 = v110;
        __int16 v60 = v108;
        if (v117)
        {
          __int16 v60 = 0;
          __int16 v59 = 0;
        }
        int v61 = v55 - v56;
        unsigned int v62 = v59;
        if (v59 <= v60) {
          unsigned int v62 = v60;
        }
        unsigned int v63 = HIBYTE(v59);
        unsigned int v64 = HIBYTE(v60);
        if (v63 <= v64) {
          unsigned int v63 = v64;
        }
        int v65 = *(_DWORD *)(a3 + 48);
        uint64_t v66 = (*(_DWORD *)(a3 + 44) + 10 * v61);
        unint64_t v67 = HIDWORD(v57);
        if (*(unsigned __int8 *)(a3 + 52) > v62) {
          LOWORD(v62) = *(unsigned __int8 *)(a3 + 52);
        }
        if (*(unsigned __int8 *)(a3 + 53) > v63) {
          LOWORD(v63) = *(unsigned __int8 *)(a3 + 53);
        }
        BOOL v68 = v67 == 0x7FFFFFFF || v65 == 0x7FFFFFFF;
        unint64_t v69 = (unint64_t)(v65 + v67) << 32;
        if (v68) {
          unint64_t v69 = 0x7FFFFFFF00000000;
        }
        *(void *)(a3 + 44) = v69 | v66;
        *(_WORD *)(a3 + 52) = v62 | ((_WORD)v63 << 8);
        if (!v54)
        {
          if (__p)
          {
            unsigned int v116 = __p;
            operator delete(__p);
          }
          if (v113)
          {
            long long v114 = v113;
            operator delete(v113);
          }
          if (v111)
          {
            uint64_t v112 = v111;
            operator delete(v111);
          }
        }
        ++*(_DWORD *)(a3 + 80);
        int v70 = (uint64_t *)(*(void *)(a1 + 80) + 4136);
        long long v71 = (int *)sub_A11094(v70, *(void *)(v52 + 32));
        long long v72 = v71;
        uint64_t v73 = (unsigned __int16 *)((char *)v71 - *v71);
        if (*v73 >= 0xFu && (uint64_t v74 = v73[7]) != 0) {
          unsigned int v75 = *(unsigned __int16 *)((char *)v71 + v74);
        }
        else {
          unsigned int v75 = 0x7FFF;
        }
        uint64_t v76 = *v70;
        char v77 = sub_49442C(v75);
        if (sub_C25A10(v76 + 3896, v77))
        {
          int v78 = 128;
        }
        else
        {
          int v79 = (unsigned __int16 *)((char *)v72 - *v72);
          if (*v79 >= 0xBu && (uint64_t v80 = v79[5]) != 0) {
            char v81 = *((unsigned char *)v72 + v80);
          }
          else {
            char v81 = 0;
          }
          int v78 = sub_A2BF48(v81);
        }
        *(_DWORD *)(a3 + 84) += v78;
        uint64_t v82 = (int *)sub_A11094((void *)(*(void *)(a1 + 80) + 4136), *(void *)(v52 + 32));
        unint64_t v83 = (unsigned __int16 *)((char *)v82 - *v82);
        if (*v83 >= 0x19u && (uint64_t v84 = v83[12]) != 0) {
          unsigned int v85 = *((unsigned __int8 *)v82 + v84);
        }
        else {
          unsigned int v85 = 2;
        }
        unsigned int v86 = sub_A2BF38(v85);
        unsigned int v87 = *(_DWORD *)(a3 + 88);
        if (v87 <= v86) {
          unsigned int v87 = v86;
        }
        *(_DWORD *)(a3 + 88) = v87;
        unsigned int v88 = sub_B5D9C4((void *)(*(void *)(a1 + 80) + 4136), *(void *)(v52 + 32));
        if (v88 >= 8) {
          sub_5AE8("bitset set argument out of range");
        }
        *(void *)(a3 + 96) |= 1 << v88;
        unint64_t v89 = (uint64_t *)(*(void *)(a1 + 80) + 4136);
        uint64_t v90 = (int *)sub_A11094(v89, *(void *)(v52 + 32));
        int v91 = (unsigned __int16 *)((char *)v90 - *v90);
        if (*v91 >= 0xFu && (uint64_t v92 = v91[7]) != 0) {
          unsigned int v93 = *(unsigned __int16 *)((char *)v90 + v92);
        }
        else {
          unsigned int v93 = 0x7FFF;
        }
        uint64_t v94 = *v89;
        char v95 = sub_49442C(v93);
        if (sub_C25A10(v94 + 3896, v95)) {
          *(unsigned char *)(a3 + 8) = 0;
        }
      }
      v16 += 9;
    }
    while (v16 != (uint64_t *)v6);
    uint64_t v6 = *(void *)(a3 + 200);
    uint64_t v96 = *(void *)(a3 + 208);
    if (v96 - v6 == 72 && *(unsigned char *)(v6 + 24) == 1)
    {
      *(_DWORD *)(a3 + 80) = 1;
      *(_DWORD *)(a3 + 84) = sub_A2BF48(0);
      *(_DWORD *)(a3 + 88) = sub_A2BF38(2u);
      uint64_t v6 = *(void *)(a3 + 200);
      uint64_t v96 = *(void *)(a3 + 208);
    }
  }
  if (v6 == v96)
  {
    char v103 = 0;
    *(unsigned char *)(a3 + 10) = 1;
  }
  else
  {
    uint64_t v97 = v6 + 72;
    do
    {
      int v98 = *(unsigned __int8 *)(v97 - 48) | *(unsigned __int8 *)(v97 - 4);
      BOOL v21 = v98 == 0;
      BOOL v99 = v98 != 0;
      BOOL v100 = v21 || v97 == v96;
      v97 += 72;
    }
    while (!v100);
    *(unsigned char *)(a3 + 10) = v99;
    uint64_t v101 = v6 + 72;
    do
    {
      if (*(unsigned char *)(v101 - 48)) {
        BOOL v102 = 1;
      }
      else {
        BOOL v102 = *(unsigned char *)(v101 - 3) == 0;
      }
      char v103 = !v102;
      if (!v102) {
        break;
      }
      BOOL v21 = v101 == v96;
      v101 += 72;
    }
    while (!v21);
  }
  *(unsigned char *)(a3 + 11) = v103;
  uint64_t result = sub_B5DAC0(a1, a3);
  *(_DWORD *)(a3 + 144) = result;
  return result;
}

void sub_B5CF84(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_B5CF90(_DWORD *result, uint64_t a2)
{
  if (*(void *)(a2 + 200) == *(void *)(a2 + 208)) {
    return result;
  }
  int v2 = result[22];
  double v3 = 1.0;
  double v4 = 1.0;
  if (v2)
  {
    int v5 = 214748364;
    int v6 = *(_DWORD *)(a2 + 32);
    if (v6 == 0x7FFFFFFF || (int v7 = *(_DWORD *)(a2 + 20), v7 == 0x7FFFFFFF))
    {
      char v8 = 7;
    }
    else
    {
      char v8 = 0;
      int v5 = v6 - v7;
      if (v6 - v7 < 0)
      {
        char v9 = -5;
        goto LABEL_7;
      }
    }
    char v9 = 5;
LABEL_7:
    double v10 = (double)(int)(v5 + (((103 * (char)(v9 + v8)) >> 15) & 1) + ((103 * (char)(v9 + v8)) >> 10));
    int v11 = v2 / 10;
    int v12 = v2 % 10;
    if (v2 < 0) {
      char v13 = -5;
    }
    else {
      char v13 = 5;
    }
    double v4 = v10
       / (double)(int)(v11 + (((103 * (char)(v13 + v12)) >> 15) & 1) + ((103 * (char)(v13 + v12)) >> 10));
  }
  *(double *)(a2 + 152) = v4;
  int v14 = result[23];
  if (v14)
  {
    int v15 = *(_DWORD *)(a2 + 48);
    if (v15 < 0) {
      char v16 = -5;
    }
    else {
      char v16 = 5;
    }
    int v17 = v14 / 10;
    int v18 = v14 % 10;
    if (v14 < 0) {
      char v19 = -5;
    }
    else {
      char v19 = 5;
    }
    double v3 = (double)(int)(v15 / 10
                     + (((103 * (char)(v16 + v15 % 10)) >> 15) & 1)
                     + ((103 * (char)(v16 + v15 % 10)) >> 10))
       / (double)(int)(v17 + (((103 * (char)(v19 + v18)) >> 15) & 1) + ((103 * (char)(v19 + v18)) >> 10));
  }
  *(double *)(a2 + 160) = v3;
  int v20 = result[24];
  double v21 = 1.0;
  double v22 = 1.0;
  if (v20)
  {
    int v23 = *(_DWORD *)(a2 + 60);
    if (v23 < 0) {
      char v24 = -5;
    }
    else {
      char v24 = 5;
    }
    int v25 = v20 / 10;
    int v26 = v20 % 10;
    if (v20 < 0) {
      char v27 = -5;
    }
    else {
      char v27 = 5;
    }
    double v22 = (double)(int)(v23 / 10
                      + (((103 * (char)(v24 + v23 % 10)) >> 15) & 1)
                      + ((103 * (char)(v24 + v23 % 10)) >> 10))
        / (double)(int)(v25 + (((103 * (char)(v27 + v26)) >> 15) & 1) + ((103 * (char)(v27 + v26)) >> 10));
  }
  *(double *)(a2 + 168) = v22;
  int v28 = result[25];
  if (v28)
  {
    int v29 = *(_DWORD *)(a2 + 72);
    if (v29 < 0) {
      char v30 = -5;
    }
    else {
      char v30 = 5;
    }
    int v31 = v28 / 10;
    int v32 = v28 % 10;
    if (v28 < 0) {
      char v33 = -5;
    }
    else {
      char v33 = 5;
    }
    double v21 = (double)(int)(v29 / 10
                      + (((103 * (char)(v30 + v29 % 10)) >> 15) & 1)
                      + ((103 * (char)(v30 + v29 % 10)) >> 10))
        / (double)(int)(v31 + (((103 * (char)(v33 + v32)) >> 15) & 1) + ((103 * (char)(v33 + v32)) >> 10));
  }
  *(double *)(a2 + 176) = v21;
  unsigned int v34 = result[26];
  if (v34)
  {
    LODWORD(v21) = *(_DWORD *)(a2 + 80);
    double v35 = (double)*(unint64_t *)&v21 / (double)v34;
  }
  else
  {
    double v35 = 1.0;
  }
  *(double *)(a2 + 184) = v35;
  return result;
}

void sub_B5D264(uint64_t a1, uint64_t *a2)
{
  int v2 = a2;
  uint64_t v4 = *a2;
  unsigned int v5 = *(_DWORD *)(*a2 + 52);
  int v6 = (int *)sub_A11094((void *)(*(void *)(a1 + 80) + 4136), *(void *)(*a2 + 32));
  int v7 = (unsigned __int16 *)((char *)v6 - *v6);
  unsigned int v8 = *v7;
  if (v8 < 5)
  {
    char v9 = 0;
    goto LABEL_6;
  }
  if (!v7[2])
  {
    char v9 = 0;
    if (v8 >= 9) {
      goto LABEL_11;
    }
LABEL_6:
    double v10 = 0;
    goto LABEL_7;
  }
  char v9 = (char *)v6 + v7[2] + *(unsigned int *)((char *)v6 + v7[2]);
  if (v8 < 9) {
    goto LABEL_6;
  }
LABEL_11:
  uint64_t v16 = v7[4];
  if (!v16) {
    goto LABEL_6;
  }
  double v10 = (unsigned int *)((char *)v6 + v16 + *(unsigned int *)((char *)v6 + v16));
LABEL_7:
  uint64_t v11 = sub_A10764(v10, v5);
  int v12 = (int *)sub_8DFD1C(*(void *)(*(void *)(a1 + 80) + 4056) + 24, *(void *)&v9[8 * *(unsigned __int8 *)(v11 + 14) + 4], 0, "line");
  char v13 = 0;
  int v14 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v14 >= 0x25u)
  {
    uint64_t v15 = v14[18];
    if (v15) {
      char v13 = *((unsigned char *)v12 + v15);
    }
    else {
      char v13 = 0;
    }
  }
  int v17 = *(_DWORD *)(v4 + 44);
  int v18 = (int **)(a1 + 112);
  char v19 = *(char **)(a1 + 112);
  *(void *)(a1 + 120) = v19;
  uint64_t v61 = v2[1];
  if (*v2 != v61)
  {
    uint64_t v20 = *v2;
    int v58 = v17;
    char v59 = v13;
    __int16 v60 = v2;
    while (1)
    {
      uint64_t v21 = *(void *)(v20 + 64);
      uint64_t v22 = *(void *)(v20 + 72);
      uint64_t v62 = v20;
      if (v21 != v22) {
        break;
      }
LABEL_16:
      uint64_t v20 = v62 + 168;
      if (v62 + 168 == v61)
      {
        uint64_t v43 = *v18;
        int v2 = v60;
        int v17 = v58;
        char v13 = v59;
        goto LABEL_53;
      }
    }
    unsigned int v23 = 0;
    while (1)
    {
      if (v23 > *(_DWORD *)(a1 + 32)) {
        goto LABEL_16;
      }
      int v25 = *(_DWORD *)(v21 + 8);
      if (v25 >= *(_DWORD *)(v4 + 12))
      {
        int v26 = *v18;
        if (*v18 == (int *)v19 || v25 != *((_DWORD *)v19 - 1)) {
          break;
        }
      }
LABEL_21:
      v21 += 60;
      if (v21 == v22) {
        goto LABEL_16;
      }
    }
    unint64_t v27 = *(void *)(a1 + 128);
    if ((unint64_t)v19 < v27)
    {
      *(_DWORD *)char v19 = v25;
      uint64_t v24 = (uint64_t)(v19 + 4);
LABEL_20:
      *(void *)(a1 + 120) = v24;
      ++v23;
      char v19 = (char *)v24;
      goto LABEL_21;
    }
    uint64_t v28 = (v19 - (char *)v26) >> 2;
    unint64_t v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 62) {
      sub_2E00();
    }
    uint64_t v30 = v27 - (void)v26;
    if (v30 >> 1 > v29) {
      unint64_t v29 = v30 >> 1;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
    }
    unint64_t v63 = v29;
    if (v29)
    {
      if (v29 >> 62) {
        sub_188D718();
      }
      int v31 = operator new(4 * v29);
      int v32 = &v31[4 * v28];
      *int v32 = *(_DWORD *)(v21 + 8);
      uint64_t v24 = (uint64_t)(v32 + 1);
      if (v26 != (int *)v19)
      {
LABEL_35:
        unint64_t v33 = v19 - 4 - (char *)v26;
        if (v33 < 0xBC
          || &v31[v19 - (char *)v26 - 4 - (v33 & 0xFFFFFFFFFFFFFFFCLL)] > &v31[v19 - (char *)v26 - 4]
          || &v19[-(v33 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v19 - 4
          || (unint64_t)((char *)v26 - v31) < 0x20)
        {
          unsigned int v34 = v19;
          unint64_t v35 = v63;
        }
        else
        {
          uint64_t v37 = (v33 >> 2) + 1;
          uint64_t v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
          unsigned int v34 = &v19[-v38];
          int v32 = (_DWORD *)((char *)v32 - v38);
          int v39 = &v31[4 * v28 - 16];
          uint64_t v40 = v19 - 16;
          uint64_t v41 = v37 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v42 = *(_OWORD *)v40;
            *(v39 - 1) = *((_OWORD *)v40 - 1);
            _OWORD *v39 = v42;
            v39 -= 2;
            v40 -= 32;
            v41 -= 8;
          }
          while (v41);
          unint64_t v35 = v63;
          if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_38:
            *(void *)(a1 + 112) = v32;
            *(void *)(a1 + 120) = v24;
            *(void *)(a1 + 128) = &v31[4 * v35];
            if (!v26)
            {
LABEL_40:
              int v18 = (int **)(a1 + 112);
              goto LABEL_20;
            }
LABEL_39:
            operator delete(v26);
            goto LABEL_40;
          }
        }
        do
        {
          int v36 = *((_DWORD *)v34 - 1);
          v34 -= 4;
          *--int v32 = v36;
        }
        while (v34 != (char *)v26);
        goto LABEL_38;
      }
    }
    else
    {
      int v31 = 0;
      int v32 = (_DWORD *)(4 * v28);
      *(_DWORD *)(4 * v28) = v25;
      uint64_t v24 = 4 * v28 + 4;
      if (v26 != (int *)v19) {
        goto LABEL_35;
      }
    }
    *(void *)(a1 + 112) = v32;
    *(void *)(a1 + 120) = v24;
    *(void *)(a1 + 128) = &v31[4 * v63];
    if (!v26) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  uint64_t v43 = (int *)v19;
LABEL_53:
  unint64_t v44 = 126 - 2 * __clz((v19 - (char *)v43) >> 2);
  if (v19 == (char *)v43) {
    uint64_t v45 = 0;
  }
  else {
    uint64_t v45 = v44;
  }
  sub_97CC7C(v43, v19, (uint64_t)&__p, v45, 1);
  BOOL v47 = *(char **)(a1 + 112);
  int v46 = *(char **)(a1 + 120);
  if (v47 != v46)
  {
    int v48 = v47 + 4;
    while (v48 != v46)
    {
      int v49 = *((_DWORD *)v48 - 1);
      int v50 = *(_DWORD *)v48;
      v48 += 4;
      if (v49 == v50)
      {
        unint64_t v51 = v48 - 8;
        while (v48 != v46)
        {
          int v52 = v49;
          int v49 = *(_DWORD *)v48;
          if (v52 != *(_DWORD *)v48)
          {
            *((_DWORD *)v51 + 1) = v49;
            v51 += 4;
          }
          v48 += 4;
        }
        unint64_t v56 = v51 + 4;
        int64_t v57 = v46 - (v51 + 4);
        if (v46 == v51 + 4) {
          break;
        }
        if (v46 != &v56[v57]) {
          memmove(v51 + 4, &v56[v57], 0);
        }
        uint64_t v53 = v56;
        *(void *)(a1 + 120) = v56;
        BOOL v47 = *(char **)(a1 + 112);
        unint64_t v54 = *(unsigned int *)(a1 + 32);
        if (v54 >= (v56 - v47) >> 2) {
          goto LABEL_70;
        }
        goto LABEL_69;
      }
    }
  }
  uint64_t v53 = *(char **)(a1 + 120);
  unint64_t v54 = *(unsigned int *)(a1 + 32);
  if (v54 < (v53 - v47) >> 2)
  {
LABEL_69:
    uint64_t v53 = &v47[4 * v54];
    *(void *)(a1 + 120) = v53;
  }
LABEL_70:
  long long __p = 0;
  int v65 = 0;
  uint64_t v66 = 0;
  for (uint64_t i = &__p; v47 != v53; v47 += 4)
    sub_737BC((uint64_t *)&i, v47);
  *((unsigned char *)v2 + 68) = sub_4944F0(v17 != -1, (int **)&__p);
  if (__p)
  {
    int v65 = __p;
    operator delete(__p);
  }
  BOOL v55 = v17 == -1 && ((v13 & 0xFE) == 2 || *((unsigned char *)v2 + 68) == 0);
  *((unsigned char *)v2 + 69) = v55;
}

void sub_B5D738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B5D758(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 80);
  unsigned int v5 = *(_DWORD *)(a2 + 52);
  int v6 = (int *)sub_A11094((void *)(v4 + 4136), *(void *)(a2 + 32));
  int v7 = (unsigned __int16 *)((char *)v6 - *v6);
  unsigned int v8 = *v7;
  if (v8 < 5)
  {
    char v9 = 0;
    goto LABEL_6;
  }
  if (!v7[2])
  {
    char v9 = 0;
    if (v8 >= 9) {
      goto LABEL_23;
    }
LABEL_6:
    double v10 = 0;
    goto LABEL_7;
  }
  char v9 = (char *)v6 + v7[2] + *(unsigned int *)((char *)v6 + v7[2]);
  if (v8 < 9) {
    goto LABEL_6;
  }
LABEL_23:
  uint64_t v27 = v7[4];
  if (!v27) {
    goto LABEL_6;
  }
  double v10 = (unsigned int *)((char *)v6 + v27 + *(unsigned int *)((char *)v6 + v27));
LABEL_7:
  uint64_t v11 = sub_A10764(v10, v5);
  int v12 = (int *)sub_8DFD1C(*(void *)(v4 + 4056) + 24, *(void *)&v9[8 * *(unsigned __int8 *)(v11 + 14) + 4], 0, "line");
  int v13 = 0;
  int v14 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v14 < 0x25u) {
    goto LABEL_10;
  }
  uint64_t v15 = v14[18];
  if (v15)
  {
    int v13 = *((unsigned char *)v12 + v15) & 0xFE;
LABEL_10:
    uint64_t v16 = a1 + 112;
    *(void *)(a1 + 120) = *(void *)(a1 + 112);
    int v17 = *(_DWORD **)(a2 + 64);
    int v18 = *(_DWORD **)(a2 + 72);
    if (v17 != v18) {
      goto LABEL_11;
    }
LABEL_26:
    int v25 = (_DWORD *)(a2 + 44);
    int v26 = *(_DWORD *)(a2 + 44);
    long long __p = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    goto LABEL_27;
  }
  int v13 = 0;
  uint64_t v16 = a1 + 112;
  *(void *)(a1 + 120) = *(void *)(a1 + 112);
  int v17 = *(_DWORD **)(a2 + 64);
  int v18 = *(_DWORD **)(a2 + 72);
  if (v17 == v18) {
    goto LABEL_26;
  }
LABEL_11:
  unsigned int v19 = 0;
  uint64_t v20 = v17 + 2;
  do
  {
    if (v19 > *(_DWORD *)(a1 + 32)) {
      break;
    }
    if (*v20 >= *(_DWORD *)(a2 + 12))
    {
      uint64_t v22 = *(void *)(a1 + 120);
      if (*(void *)(a1 + 112) == v22 || *v20 != *(_DWORD *)(v22 - 4))
      {
        sub_745A4(v16, v20);
        ++v19;
      }
    }
    uint64_t v21 = v20 + 13;
    v20 += 15;
  }
  while (v21 != v18);
  unsigned int v23 = *(_DWORD **)(a1 + 112);
  uint64_t v24 = *(_DWORD **)(a1 + 120);
  int v25 = (_DWORD *)(a2 + 44);
  int v26 = *(_DWORD *)(a2 + 44);
  long long __p = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  for (uint64_t i = &__p; v23 != v24; ++v23)
    sub_737BC((uint64_t *)&i, v23);
LABEL_27:
  *(unsigned char *)(a2 + 157) = sub_4944F0(v26 != -1, (int **)&__p);
  if (__p)
  {
    uint64_t v30 = __p;
    operator delete(__p);
  }
  BOOL v28 = *v25 == -1 && (v13 == 2 || *(unsigned char *)(a2 + 157) == 0);
  *(unsigned char *)(a2 + 158) = v28;
}

void sub_B5D9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B5D9C4(void *a1, unint64_t a2)
{
  int v2 = (int *)sub_A11094(a1, a2);
  double v3 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v3 < 0xFu) {
    return 3;
  }
  uint64_t v4 = v3[7];
  if (!v4) {
    return 3;
  }
  unsigned int v5 = v2;
  uint64_t result = 0;
  unsigned int v7 = *(unsigned __int16 *)((char *)v5 + v4);
  switch(v7)
  {
    case 0u:
    case 1u:
    case 2u:
    case 0xCu:
      return result;
    case 3u:
      return 1;
    case 4u:
      return 2;
    case 5u:
    case 6u:
    case 7u:
      return 3;
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
      goto LABEL_6;
    default:
      if (v7 == 900) {
        return result;
      }
LABEL_6:
      uint64_t v8 = ((5243 * (v7 >> 2)) >> 17) - 1;
      if (v8 > 0xB) {
        return 3;
      }
      uint64_t result = byte_20EC800[v8];
      break;
  }
  return result;
}

unsigned int sub_B5DAC0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 104) == 0x7FFFFFFF) {
    return -1;
  }
  uint64_t v3 = *(unsigned __int8 *)(a2 + 135);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 120);
  }
  if (!v3) {
    return -1;
  }
  uint64_t v4 = (void *)(a1 + 40);
  uint64_t v5 = a2 + 112;
  if (!sub_B5E198((void *)(a1 + 40), a2 + 112))
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v16);
      char v9 = sub_188FC78(v16, (uint64_t)"Encountered unsupported currency code ", 38);
      int v10 = *(char *)(a2 + 135);
      if (v10 >= 0) {
        uint64_t v11 = a2 + 112;
      }
      else {
        uint64_t v11 = *(void *)(a2 + 112);
      }
      if (v10 >= 0) {
        uint64_t v12 = *(unsigned __int8 *)(a2 + 135);
      }
      else {
        uint64_t v12 = *(void *)(a2 + 120);
      }
      int v13 = sub_188FC78(v9, v11, v12);
      sub_188FC78(v13, (uint64_t)" whilst calculating journey criteria", 36);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v15 < 0) {
        operator delete(__p);
      }
      if (v17 < 0) {
        operator delete((void *)v16[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    return -1;
  }
  int v6 = *(_DWORD *)(a2 + 104);
  unsigned int v7 = sub_B5E198(v4, v5);
  if (!v7) {
    sub_5AE8("unordered_map::at: key not found");
  }
  return vcvtad_u64_f64(*((double *)v7 + 5) * (double)v6);
}

void sub_B5DCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *sub_B5DD20(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = sub_B128((uint64_t)v44, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    char v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          unsigned int v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v16[1];
            if (v23 == v12)
            {
              uint64_t v24 = *((unsigned __int8 *)v16 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v25 = v16[3];
              }
              if (v25 == v18)
              {
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v16[2], v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  uint64_t v26 = 0;
                  while (*((unsigned __int8 *)v16 + v26 + 16) == v7[v26])
                  {
                    if (v24 == ++v26) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v7[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  uint64_t v27 = operator new(0x30uLL);
  v44[0] = v27;
  v44[1] = a1 + 16;
  char v45 = 0;
  *uint64_t v27 = 0;
  v27[1] = v12;
  BOOL v28 = v27 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v28, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)BOOL v28 = *(_OWORD *)a3;
    v27[4] = *(void *)(a3 + 16);
  }
  v27[5] = *a4;
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (!v13 || (float)(v30 * (float)v13) < v29)
  {
    BOOL v33 = 1;
    if (v13 >= 3) {
      BOOL v33 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v13);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v41 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        uint64_t v31 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        int v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v12;
        uint64_t v31 = *(void **)(*(void *)a1 + 8 * v12);
        int v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v41 & v12;
      uint64_t v31 = *(void **)(*(void *)a1 + 8 * (v41 & v12));
      int v32 = (void *)v44[0];
      if (v31) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *int v32 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v44[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v44[0])
    {
      unint64_t v42 = *(void *)(*(void *)v44[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v42 >= v13) {
          v42 %= v13;
        }
      }
      else
      {
        v42 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v42) = v44[0];
    }
    goto LABEL_92;
  }
  uint64_t v31 = *(void **)(*(void *)a1 + 8 * v4);
  int v32 = (void *)v44[0];
  if (!v31) {
    goto LABEL_81;
  }
LABEL_57:
  *int v32 = *v31;
  *uint64_t v31 = v44[0];
LABEL_92:
  uint64_t v16 = (uint64_t *)v44[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_B5E16C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B5E180(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_B5E198(void *a1, uint64_t a2)
{
  int v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    unint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        int v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          unint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        unint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void sub_B5E3C8()
{
  unk_25DFB47 = 16641;
  word_25DFB30 = 65;
  byte_25DFB5F = 1;
  byte_25DFB49 = 0;
}

uint64_t sub_B5E3F0(uint64_t *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v26 = operator new(0x30uLL);
  long long v27 = xmmword_20B93B0;
  strcpy((char *)v26, "routing/transit-fares/FareRequestAdapter.json");
  long long __p = 0;
  v25[0] = 0;
  v25[1] = 0;
  int8x8_t v7 = sub_374CDC(v6, (uint64_t)&v26, (uint64_t *)&__p);
  sub_10C7DBC((BOOL *)&v20, v7);
  sub_10C7E68(&v20, a1[1], a3, a2, (uint64_t)v29);
  unint64_t v8 = (void **)__p;
  if (__p)
  {
    uint8x8_t v9 = (void **)v25[0];
    unint64_t v10 = __p;
    if ((void *)v25[0] != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      unint64_t v10 = __p;
    }
    v25[0] = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26);
  }
  sub_10BE404(a1[2], (uint64_t)v29, (uint64_t)a2, (uint64_t)&v26);
  int v11 = sub_9CD338(0x14C1BACF914C1BADLL * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3));
  if (v11 >= 1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 296 * v11;
    uint64_t v14 = 8;
    while (1)
    {
      uint64_t v15 = *(void *)(a3 + 8);
      sub_10C569C(*(void *)(v30 + v14), *(void *)(v28 + v14), (uint64_t)a2, (uint64_t)&__p);
      if ((_BYTE)__p) {
        break;
      }
      uint64_t v22 = 0;
      long long v21 = 0uLL;
      int v20 = 0x7FFFFFFF;
      int v23 = 100;
      uint64_t v16 = v15 + v12;
      *(_DWORD *)(v16 + 104) = 0x7FFFFFFF;
      uint64_t v17 = v16 + 112;
      if (*(char *)(v16 + 135) < 0) {
        goto LABEL_16;
      }
LABEL_17:
      long long v18 = v21;
      *(void *)(v17 + 16) = v22;
      *(_OWORD *)uint64_t v17 = v18;
      HIBYTE(v22) = 0;
      LOBYTE(v21) = 0;
      *(_DWORD *)(v16 + 136) = v23;
      if ((SHIBYTE(v22) & 0x80000000) == 0)
      {
        if (!(_BYTE)__p) {
          goto LABEL_13;
        }
LABEL_23:
        sub_151C978(v25);
        goto LABEL_13;
      }
      operator delete((void *)v21);
      if ((_BYTE)__p) {
        goto LABEL_23;
      }
LABEL_13:
      v14 += 8;
      v12 += 296;
      if (v13 == v12) {
        goto LABEL_24;
      }
    }
    sub_49DD5C((uint64_t)v25, (uint64_t)&v20);
    uint64_t v16 = v15 + v12;
    *(_DWORD *)(v16 + 104) = v20;
    uint64_t v17 = v16 + 112;
    if ((*(char *)(v16 + 135) & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_16:
    operator delete(*(void **)v17);
    goto LABEL_17;
  }
LABEL_24:
  sub_151A3A4(&v26);
  return sub_1517768(v29);
}

void sub_B5E664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_B5E6C8()
{
  unk_25DFB77 = 16641;
  word_25DFB60 = 65;
  byte_25DFB8F = 1;
  byte_25DFB79 = 0;
}

unint64_t sub_B5E6F0(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v92 = (void *)result;
  if (*(_DWORD *)(a2 + 28) != -1 && *(_DWORD *)(a2 + 32) != 0)
  {
    uint64_t v4 = a3;
    uint64_t v88 = *(void *)(a2 + 28);
    int v85 = *(_DWORD *)(a2 + 40);
    int v86 = *(_DWORD *)(a2 + 36);
    int v84 = *(_DWORD *)(a2 + 44);
    uint64_t v95 = -1;
    uint64_t v96 = -1;
    uint64_t result = sub_2D0F10(0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(a3 + 56) - *(void *)(a3 + 48)) >> 3));
    if (!result) {
      goto LABEL_109;
    }
    uint64_t v5 = 0;
    uint64_t v81 = v4;
    uint64_t v82 = result;
LABEL_7:
    while (2)
    {
      uint64_t v6 = *(void *)(v4 + 48);
      uint64_t v93 = -1;
      uint64_t v94 = -1;
      uint64_t v7 = v6 + 248 * v5;
      uint64_t v90 = (uint64_t *)(v7 + 96);
      uint64_t result = sub_2D0F10(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(v7 + 104) - *(void *)(v7 + 96)) >> 2));
      if (result)
      {
        uint64_t v83 = v6;
        uint64_t v87 = v5;
        int v8 = 0;
        uint64_t v9 = 0;
        uint64_t v89 = 60 * result;
        while (1)
        {
          uint64_t v10 = *v90;
          int v11 = (void *)(*v92 + 4136);
          uint64_t v12 = *v90 + v9;
          unint64_t v13 = *(void *)(v12 + 28);
          unsigned int v14 = *(_DWORD *)(v12 + 48);
          int v15 = *(_DWORD *)(v12 + 36);
          if (sub_A10E20(v11, SHIDWORD(v13))) {
            break;
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F7308))
          {
            sub_518C8(0x3B60u, 0x7FCAu);
            dword_24F7300 = v65 | 0x40000000;
            __cxa_guard_release(&qword_24F7308);
          }
          uint64_t v17 = *v11;
          if (dword_24F7300 == HIDWORD(v13))
          {
            uint64_t v16 = *(unsigned int **)(*(void *)(v17 + 3976) + 72);
            if (!v16)
            {
              exception = __cxa_allocate_exception(0x40uLL);
              uint64_t v97 = (char *)operator new(0x40uLL);
              long long v98 = xmmword_20B9A90;
              strcpy(v97, "Realtime stop pattern quad data requested on nullptr buffer");
              uint64_t v76 = (void *)sub_2F404((uint64_t)exception, (long long *)&v97);
            }
LABEL_16:
            long long v18 = (char *)v16 + *v16;
            uint64_t v19 = &v18[-*(int *)v18];
            if (*(unsigned __int16 *)v19 < 5u) {
              goto LABEL_20;
            }
            goto LABEL_17;
          }
          long long v18 = sub_A10B80(v17 + 24, v13, 0);
          uint64_t v19 = &v18[-*(int *)v18];
          if (*(unsigned __int16 *)v19 < 5u)
          {
LABEL_20:
            uint64_t v20 = 0;
            goto LABEL_21;
          }
LABEL_17:
          uint64_t v20 = *((unsigned __int16 *)v19 + 2);
          if (v20) {
            v20 += (uint64_t)&v18[*(unsigned int *)&v18[v20]];
          }
LABEL_21:
          long long v21 = (int *)(v20 + 4 * v13 + 4 + *(unsigned int *)(v20 + 4 * v13 + 4));
          uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
          if (*v22 >= 9u && (uint64_t v23 = v22[4]) != 0) {
            uint64_t v24 = (unsigned int *)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
          }
          else {
            uint64_t v24 = 0;
          }
          uint64_t v25 = sub_A10764(v24, v14);
          uint64_t v26 = &v18[-*(int *)v18];
          if (*(unsigned __int16 *)v26 < 0xBu)
          {
            long long v27 = 0;
            uint64_t v28 = (unsigned __int16 *)((char *)v21 - *v21);
            if (*v28 < 0x11u) {
              goto LABEL_32;
            }
          }
          else
          {
            long long v27 = (unsigned int *)*((unsigned __int16 *)v26 + 5);
            if (v27) {
              long long v27 = (unsigned int *)((char *)v27 + (void)v18 + *(unsigned int *)((char *)v27 + (void)v18));
            }
            uint64_t v28 = (unsigned __int16 *)((char *)v21 - *v21);
            if (*v28 < 0x11u)
            {
LABEL_32:
              LODWORD(v29) = 0;
              goto LABEL_33;
            }
          }
          uint64_t v29 = v28[8];
          if (v28[8]) {
            LODWORD(v29) = *(int *)((char *)v21 + v29);
          }
LABEL_33:
          uint64_t v30 = sub_A108C4(v27, v29+ *(int *)((char *)v21 + v28[2] + *(unsigned int *)((char *)v21 + v28[2])) * v15+ *(unsigned __int8 *)(v25 + 14));
          if (v30)
          {
            uint64_t v31 = __ROR8__(*(void *)v30, 32);
            int v91 = *(_DWORD *)(v30 + 8);
          }
          else
          {
            int v91 = 0;
            uint64_t v31 = 0xFFFFFFFFLL;
          }
          int v32 = (void *)(*v92 + 4136);
          unint64_t v33 = *(void *)(v12 + 28);
          unsigned int v34 = *(_DWORD *)(v12 + 48);
          if (sub_A10E20(v32, SHIDWORD(v33)))
          {
            unint64_t v35 = (int *)sub_A1120C(*(void *)(*v32 + 3944), v33);
            int v36 = (unsigned __int16 *)((char *)v35 - *v35);
            if (*v36 < 9u) {
              goto LABEL_51;
            }
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v66 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v37 = *v32;
            if (dword_24F7300 == HIDWORD(v33))
            {
              unint64_t v38 = *(unsigned int **)(*(void *)(v37 + 3976) + 72);
              if (!v38)
              {
                char v77 = __cxa_allocate_exception(0x40uLL);
                uint64_t v97 = (char *)operator new(0x40uLL);
                long long v98 = xmmword_20B9A90;
                strcpy(v97, "Realtime stop pattern quad data requested on nullptr buffer");
                int v78 = (void *)sub_2F404((uint64_t)v77, (long long *)&v97);
              }
              uint8x8_t v39 = (int *)((char *)v38 + *v38);
              uint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
              if (*v40 >= 5u && (uint64_t v41 = v40[2]) != 0) {
                unint64_t v42 = (unsigned int *)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
              }
              else {
                unint64_t v42 = 0;
              }
              unint64_t v35 = (int *)sub_A1139C(v42, v33);
              int v36 = (unsigned __int16 *)((char *)v35 - *v35);
              if (*v36 < 9u) {
                goto LABEL_51;
              }
            }
            else
            {
              unint64_t v35 = (int *)sub_A11500(v37 + 24, v33, 0, "stop pattern");
              int v36 = (unsigned __int16 *)((char *)v35 - *v35);
              if (*v36 < 9u) {
                goto LABEL_51;
              }
            }
          }
          uint64_t v43 = v36[4];
          if (v43)
          {
            unint64_t v44 = (unsigned int *)((char *)v35 + v43 + *(unsigned int *)((char *)v35 + v43));
            goto LABEL_52;
          }
LABEL_51:
          unint64_t v44 = 0;
LABEL_52:
          int v45 = *(unsigned __int16 *)(sub_A10764(v44, v34) + 12);
          int v46 = (void *)(*v92 + 4136);
          unint64_t v47 = *(void *)(v12 + 28);
          unsigned int v48 = *(_DWORD *)(v10 + v9 + 52);
          if (sub_A10E20(v46, SHIDWORD(v47)))
          {
            int v49 = (int *)sub_A1120C(*(void *)(*v46 + 3944), v47);
            int v50 = (unsigned __int16 *)((char *)v49 - *v49);
            if (*v50 < 9u) {
              goto LABEL_68;
            }
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v67 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v51 = *v46;
            if (dword_24F7300 == HIDWORD(v47))
            {
              int v52 = *(unsigned int **)(*(void *)(v51 + 3976) + 72);
              if (!v52)
              {
                int v79 = __cxa_allocate_exception(0x40uLL);
                uint64_t v97 = (char *)operator new(0x40uLL);
                long long v98 = xmmword_20B9A90;
                strcpy(v97, "Realtime stop pattern quad data requested on nullptr buffer");
                uint64_t v80 = (void *)sub_2F404((uint64_t)v79, (long long *)&v97);
              }
              uint64_t v53 = (int *)((char *)v52 + *v52);
              unint64_t v54 = (unsigned __int16 *)((char *)v53 - *v53);
              if (*v54 >= 5u && (uint64_t v55 = v54[2]) != 0) {
                unint64_t v56 = (unsigned int *)((char *)v53 + v55 + *(unsigned int *)((char *)v53 + v55));
              }
              else {
                unint64_t v56 = 0;
              }
              int v49 = (int *)sub_A1139C(v56, v47);
              int v50 = (unsigned __int16 *)((char *)v49 - *v49);
              if (*v50 < 9u) {
                goto LABEL_68;
              }
            }
            else
            {
              int v49 = (int *)sub_A11500(v51 + 24, v47, 0, "stop pattern");
              int v50 = (unsigned __int16 *)((char *)v49 - *v49);
              if (*v50 < 9u) {
                goto LABEL_68;
              }
            }
          }
          uint64_t v57 = v50[4];
          if (v57)
          {
            uint64_t result = sub_A10764((unsigned int *)((char *)v49 + v57 + *(unsigned int *)((char *)v49 + v57)), v48);
            if (v31 != v88) {
              goto LABEL_9;
            }
            goto LABEL_69;
          }
LABEL_68:
          uint64_t result = sub_A10764(0, v48);
          if (v31 != v88) {
            goto LABEL_9;
          }
LABEL_69:
          int v58 = *(unsigned __int16 *)(result + 12);
          int v59 = v95;
          if (v95 == -1) {
            int v59 = v87;
          }
          LODWORD(v95) = v59;
          int v60 = v93;
          if (v93 == -1) {
            int v60 = v8;
          }
          LODWORD(v93) = v60;
          if (v91 == v86)
          {
            int v61 = HIDWORD(v95);
            if (HIDWORD(v95) == -1) {
              int v61 = v87;
            }
            HIDWORD(v95) = v61;
            int v62 = HIDWORD(v93);
            if (HIDWORD(v93) == -1) {
              int v62 = v8;
            }
            HIDWORD(v93) = v62;
            if (v85 == v45)
            {
              int v63 = v96;
              if (v96 == -1) {
                int v63 = v87;
              }
              LODWORD(v96) = v63;
              int v64 = v94;
              if (v94 == -1) {
                int v64 = v8;
              }
              LODWORD(v94) = v64;
              if (v84 == v58)
              {
                int v70 = HIDWORD(v96);
                uint64_t v5 = v87;
                if (HIDWORD(v96) == -1) {
                  int v70 = v87;
                }
                HIDWORD(v96) = v70;
                if (HIDWORD(v94) == -1) {
                  int v71 = v8;
                }
                else {
                  int v71 = HIDWORD(v94);
                }
                HIDWORD(v94) = v71;
                BOOL v68 = &v95;
                uint64_t v4 = v81;
                uint64_t v6 = v83;
                if (v71 == -1) {
                  goto LABEL_92;
                }
LABEL_106:
                *(_DWORD *)(v6 + 248 * v5++ + 120) = *((_DWORD *)v68 - 1);
                if (v5 == v82) {
                  goto LABEL_107;
                }
                goto LABEL_7;
              }
            }
          }
LABEL_9:
          v9 += 60;
          ++v8;
          if (v89 == v9)
          {
            uint64_t v5 = v87;
            BOOL v68 = &v95;
            uint64_t v4 = v81;
            uint64_t v6 = v83;
            if (HIDWORD(v94) != -1) {
              goto LABEL_106;
            }
            goto LABEL_92;
          }
        }
        uint64_t v16 = *(unsigned int **)(*(void *)(*v11 + 3944) + 72);
        if (!v16)
        {
          uint64_t v73 = __cxa_allocate_exception(0x40uLL);
          uint64_t v97 = (char *)operator new(0x40uLL);
          long long v98 = xmmword_20B9A90;
          strcpy(v97, "Incident stop pattern quad data requested on nullptr buffer");
          uint64_t v74 = (void *)sub_2F404((uint64_t)v73, (long long *)&v97);
        }
        goto LABEL_16;
      }
LABEL_92:
      BOOL v68 = (uint64_t *)((char *)&v94 + 4);
      if (v94 != -1) {
        goto LABEL_106;
      }
      BOOL v68 = &v94;
      if (HIDWORD(v93) != -1) {
        goto LABEL_106;
      }
      BOOL v68 = (uint64_t *)((char *)&v93 + 4);
      if (v93 != -1) {
        goto LABEL_106;
      }
      if (*v90 == v90[1]) {
        int v69 = -1;
      }
      else {
        int v69 = 0;
      }
      *(_DWORD *)(v6 + 248 * v5++ + 120) = v69;
      if (v5 != v82) {
        continue;
      }
      break;
    }
LABEL_107:
    if (HIDWORD(v96) != -1)
    {
      int v72 = HIDWORD(v96);
      goto LABEL_118;
    }
LABEL_109:
    if (v96 == -1)
    {
      if (HIDWORD(v95) == -1)
      {
        if (v95 == -1)
        {
          if (*(void *)(v4 + 48) == *(void *)(v4 + 56)) {
            int v72 = -1;
          }
          else {
            int v72 = 0;
          }
        }
        else
        {
          int v72 = v95;
        }
      }
      else
      {
        int v72 = HIDWORD(v95);
      }
    }
    else
    {
      int v72 = v96;
    }
LABEL_118:
    *(_DWORD *)(v4 + 72) = v72;
  }
  return result;
}

void sub_B5F0D8(_Unwind_Exception *a1)
{
}

void sub_B5F0F0(_Unwind_Exception *a1)
{
}

void sub_B5F108(_Unwind_Exception *a1)
{
}

void sub_B5F120(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0)
  {
    operator delete(*(void **)(v1 - 112));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B5F168(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  if (v5)
  {
    if (v5 == a3)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "alternatives_type");
  uint64_t v6 = sub_561B0(a2, (uint64_t)__p);
  char v7 = sub_B5F5C0(v6);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 32) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "future_search_interval_minutes");
  *(_DWORD *)(a1 + 36) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "past_search_interval_minutes");
  *(_DWORD *)(a1 + 40) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20E12D0;
  strcpy((char *)__p[0], "future_max_num_additional_alternatives");
  int v8 = sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 44) = v8;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "past_max_num_additional_alternatives");
  int v9 = sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 48) = v9;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "allow_different_lines");
  BOOL v10 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 52) = v10;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "allow_different_stop_sequences");
  BOOL v11 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 53) = v11;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "allow_dominated_alternatives");
  BOOL v12 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 54) = v12;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "use_realtime_data");
  BOOL v13 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 55) = v13;
  return a1;
}

void sub_B5F504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_9F5350(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_B5F5C0(uint64_t a1)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23) != 7)
    {
      uint64_t v1 = (void *)a1;
      if (*(unsigned char *)(a1 + 23) != 8) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)a1 != 1969710450 || *(_DWORD *)(a1 + 3) != 1918987381)
    {
LABEL_20:
      exception = __cxa_allocate_exception(0x40uLL);
      std::operator+<char>();
      char v7 = std::string::append(&v10, "\" provided");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type v12 = v7->__r_.__value_.__r.__words[2];
      long long v11 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      int v9 = (void *)sub_2F404((uint64_t)exception, &v11);
    }
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == 7 && **(_DWORD **)a1 == 1969710450 && *(_DWORD *)(*(void *)a1 + 3) == 1918987381) {
    return 0;
  }
  if (v2 != 8) {
    goto LABEL_20;
  }
  uint64_t v1 = *(void **)a1;
LABEL_12:
  if (*v1 != 0x676E696D6F637075) {
    goto LABEL_20;
  }
  return 1;
}

void sub_B5F718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B5F770(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t result = sub_B5F168(a1, a3, a4);
  *(void *)(result + 56) = a2;
  return result;
}

void sub_B5F7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 8);
  for (uint64_t i = *(void *)(a3 + 16); v3 != i; v3 += 296)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    if (!v7) {
      sub_29F82C();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, v3))
    {
      uint64_t v8 = *(void *)(v3 + 200);
      uint64_t v9 = *(void *)(v3 + 208);
      while (v8 != v9)
      {
        if (!*(unsigned char *)(v8 + 24))
        {
          uint64_t v10 = *(void *)v8;
          uint64_t v11 = *(void *)(v8 + 8);
          if (*(void *)v8 != v11)
          {
            do
            {
              sub_B5F87C(a1, a2, v3, v10);
              v10 += 168;
            }
            while (v10 != v11);
          }
        }
        v8 += 72;
      }
    }
  }
}

void sub_B5F87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *(unsigned __int8 *)(a1 + 32);
  if (v6 == 1)
  {
    signed int v7 = sub_B5FAB8(*(void *)(a1 + 56), a2, a3, a4);
    *(_DWORD *)(a4 + 112) = v7;
    int v6 = *(unsigned __int8 *)(a1 + 32);
  }
  else
  {
    signed int v7 = *(_DWORD *)(a4 + 112);
  }
  if (v6) {
    signed int v8 = v7;
  }
  else {
    signed int v8 = *(_DWORD *)(a4 + 12);
  }
  if (v6) {
    uint64_t v9 = 88;
  }
  else {
    uint64_t v9 = 64;
  }
  if (v6) {
    uint64_t v10 = (uint64_t *)(a4 + 88);
  }
  else {
    uint64_t v10 = (uint64_t *)(a4 + 64);
  }
  sub_B4E6A4(*(void **)(a1 + 56), a4, v8, *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 44), *(unsigned char *)(a1 + 52), (uint64_t)&v32, *(unsigned char *)(a1 + 53), *(unsigned char *)(a1 + 55));
  uint64_t v11 = *(void **)(a4 + v9);
  if (v11)
  {
    v10[1] = (uint64_t)v11;
    operator delete(v11);
  }
  *(_OWORD *)(a4 + v9) = v32;
  v10[2] = v33;
  sub_B4EDF8(*(void *)(a1 + 56), v10);
  if (!*(unsigned char *)(a1 + 54))
  {
    uint64_t v12 = v10[1];
    uint64_t v13 = *(void *)(a4 + v9);
    if (v12 != v13)
    {
      uint64_t v14 = v12 - 56;
      int v15 = 2147483646;
      int v16 = 2147483646;
      do
      {
        while (1)
        {
          long long v18 = (int *)(v14 + 4);
          if (*(_DWORD *)(v14 + 4) == 0x7FFFFFFF) {
            long long v18 = (int *)v14;
          }
          int v19 = *v18;
          if (v19 < v15)
          {
            uint64_t v20 = *(_DWORD *)(v14 + 16) == 0x7FFFFFFF ? 12 : 16;
            int v21 = *(_DWORD *)(v14 + v20);
            if (v21 < v16) {
              break;
            }
          }
          *(void *)(v14 + 24) = 0xFFFFFFFFLL;
          uint64_t v17 = v14 - 4;
          v14 -= 60;
          if (v17 == v13) {
            goto LABEL_28;
          }
        }
        int v16 = v21;
        int v15 = v19;
        uint64_t v22 = v14 - 4;
        v14 -= 60;
      }
      while (v22 != v13);
LABEL_28:
      uint64_t v23 = *(_OWORD **)(a4 + v9);
      uint64_t v24 = (_OWORD *)v10[1];
      if (v23 != v24)
      {
        for (uint64_t i = (_OWORD *)((char *)v23 + 60); ; uint64_t i = (_OWORD *)((char *)i + 60))
        {
          BOOL v26 = *((_DWORD *)i - 8) == -1 || *((_DWORD *)i - 7) == 0;
          if (v26) {
            break;
          }
          BOOL v26 = i == v24;
          if (v26) {
            return;
          }
        }
        long long v27 = (_OWORD *)((char *)i - 60);
        if ((_OWORD *)((char *)i - 60) != v24 && i != v24)
        {
          do
          {
            if (*((_DWORD *)i + 7) != -1 && *((_DWORD *)i + 8) != 0)
            {
              long long v29 = *i;
              long long v30 = i[1];
              long long v31 = i[2];
              *(_OWORD *)((char *)v27 + 41) = *(_OWORD *)((char *)i + 41);
              v27[1] = v30;
              v27[2] = v31;
              *long long v27 = v29;
              long long v27 = (_OWORD *)((char *)v27 + 60);
            }
            uint64_t i = (_OWORD *)((char *)i + 60);
          }
          while (i != v24);
          uint64_t v24 = (_OWORD *)v10[1];
        }
        if (v27 != v24) {
          v10[1] = (uint64_t)v27;
        }
      }
    }
  }
}

uint64_t sub_B5FAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8 = *(_DWORD *)(a4 + 52);
  uint64_t v9 = (int *)sub_A11094((void *)(a1 + 4136), *(void *)(a4 + 32));
  uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  unsigned int v11 = *v10;
  if (v11 < 5)
  {
    uint64_t v12 = 0;
    goto LABEL_6;
  }
  if (v10[2])
  {
    uint64_t v12 = (char *)v9 + v10[2] + *(unsigned int *)((char *)v9 + v10[2]);
    if (v11 < 9) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v12 = 0;
    if (v11 < 9) {
      goto LABEL_6;
    }
  }
  uint64_t v21 = v10[4];
  if (v21)
  {
    uint64_t v13 = (unsigned int *)((char *)v9 + v21 + *(unsigned int *)((char *)v9 + v21));
    goto LABEL_7;
  }
LABEL_6:
  uint64_t v13 = 0;
LABEL_7:
  uint64_t v14 = sub_A10764(v13, v8);
  int v15 = (int *)sub_8DFD1C(*(void *)(a1 + 4056) + 24, *(void *)&v12[8 * *(unsigned __int8 *)(v14 + 14) + 4], 0, "line");
  int v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 0x25u)
  {
    uint64_t v17 = v16[18];
    if (v17)
    {
      if (*((unsigned char *)v15 + v17) == 1) {
        return *(unsigned int *)(a2 + 8);
      }
    }
  }
  int v19 = *(_DWORD *)(a3 + 4);
  if (v19 == 2) {
    return *(unsigned int *)(a4 + 12);
  }
  if (v19 == 1)
  {
    unsigned int v20 = *(_DWORD *)(a4 + 12);
    if (v20 == 0x7FFFFFFF) {
      return *(unsigned int *)(a4 + 8);
    }
    else {
      return v20;
    }
  }
  else if (v19)
  {
    return 0x7FFFFFFFLL;
  }
  else
  {
    return *(unsigned int *)(a4 + 8);
  }
}

void sub_B5FC44(void **a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v5 = (void **)(a3 + 48);
  sub_B5FCB8(a1, (void *)(a3 + 48), (int **)(a2 + 128), &v6, a4);
  sub_B60A3C(v5);
  *(int64x2_t *)(a3 + 48) = v6;
  *(void *)(a3 + 64) = v7;
  uint64_t v7 = 0;
  int64x2_t v6 = 0uLL;
  unsigned int v8 = &v6;
  sub_A05B94((void ***)&v8);
}

void sub_B5FCB8(void **a1@<X0>, void *a2@<X1>, int **a3@<X2>, int64x2_t *a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v7 = (void *)*a2;
  unsigned int v8 = (void *)a2[1];
  if ((void *)*a2 == v8)
  {
    int v15 = 0;
    uint64_t v16 = 0;
  }
  else
  {
    do
    {
      uint64_t v10 = v7[9];
      uint64_t v11 = v7[10];
      uint64_t v12 = v53;
      uint64_t v55 = (char **)&v52;
      uint64_t i = v53;
      if (v10 != v11)
      {
        do
        {
          sub_B60D98((uint64_t)&v37, *a1, v10, 0);
          sub_B60AE4(&v55, &v37);
          v10 += 60;
        }
        while (v10 != v11);
        uint64_t v12 = v53;
      }
      uint64_t v13 = v7[12];
      uint64_t v14 = v7[13];
      uint64_t v55 = (char **)&v52;
      for (uint64_t i = v12; v13 != v14; v13 += 60)
      {
        sub_B60D98((uint64_t)&v37, *a1, v13, 1);
        sub_B60AE4(&v55, &v37);
      }
      v7 += 31;
    }
    while (v7 != v8);
    uint64_t v16 = v52;
    int v15 = v53;
  }
  *(void *)&long long v37 = a3;
  if ((uint64_t)v15 - v16 >= 6145)
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - v16) >> 4);
    while (1)
    {
      long long v18 = (__n128 *)operator new(48 * v17, &std::nothrow);
      if (v18) {
        break;
      }
      BOOL v19 = v17 > 1;
      v17 >>= 1;
      if (!v19) {
        goto LABEL_14;
      }
    }
    int v36 = v18;
    sub_B62050(v16, v15, (int ***)&v37, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - v16) >> 4), v18, v17, a5);
    operator delete(v36);
    a4->i64[0] = 0;
    a4->i64[1] = 0;
    a4[1].i64[0] = 0;
    uint64_t v20 = v52;
    if ((long long *)v52 != v53) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_14:
  sub_B62050(v16, v15, (int ***)&v37, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - v16) >> 4), 0, 0, a5);
  a4->i64[0] = 0;
  a4->i64[1] = 0;
  a4[1].i64[0] = 0;
  uint64_t v20 = v52;
  if ((long long *)v52 == v53)
  {
LABEL_39:
    if (!v20) {
      return;
    }
    goto LABEL_40;
  }
  do
  {
LABEL_18:
    if (v20 == v52 || sub_B60178(*a3, a3[1], v20 - 48, v20))
    {
      LOBYTE(v37) = 0;
      *(void *)((char *)&v37 + 4) = 0x8000000080000000;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      memset(v41, 0, sizeof(v41));
      *(_OWORD *)unint64_t v42 = 0u;
      uint64_t v43 = 0;
      long long v44 = xmmword_20EC810;
      long long v45 = xmmword_20EC820;
      BYTE1(v45) = 0;
      BYTE13(v45) = 0;
      *(_DWORD *)int v46 = -1;
      *(_OWORD *)&v46[4] = xmmword_20E22B0;
      *(void *)&v46[20] = -1;
      v46[28] = 1;
      uint64_t v48 = 0;
      long long v47 = 0uLL;
      LOBYTE(v49[0]) = 1;
      *(void *)((char *)v49 + 4) = 0x7FFFFFFF7FFFFFFFLL;
      uint64_t v51 = 0;
      long long __p = 0uLL;
      unint64_t v21 = a4->u64[1];
      if (v21 >= a4[1].i64[0])
      {
        long long v29 = sub_B62D1C(a4, (uint64_t)&v37);
        long long v30 = (void *)__p;
        a4->i64[1] = (uint64_t)v29;
        if (v30)
        {
          *((void *)&__p + 1) = v30;
          operator delete(v30);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v21 = v37;
        long long v22 = v38;
        long long v23 = v40;
        uint64_t v24 = v41[0];
        *(_OWORD *)(v21 + 32) = v39;
        *(_OWORD *)(v21 + 48) = v23;
        *(_OWORD *)(v21 + 16) = v22;
        *(void *)(v21 + 64) = v24;
        *(void *)(v21 + 72) = 0;
        *(void *)(v21 + 80) = 0;
        *(void *)(v21 + 88) = 0;
        *(_OWORD *)(v21 + 72) = *(_OWORD *)&v41[1];
        v41[1] = 0;
        void v41[2] = 0;
        *(void *)(v21 + 88) = v41[3];
        *(void *)(v21 + 96) = 0;
        v41[3] = 0;
        *(void *)(v21 + 104) = 0;
        *(void *)(v21 + 112) = 0;
        *(_OWORD *)(v21 + 96) = *(_OWORD *)v42;
        *(void *)(v21 + 112) = v43;
        v42[0] = 0;
        v42[1] = 0;
        uint64_t v43 = 0;
        long long v25 = v44;
        long long v26 = v45;
        long long v27 = *(_OWORD *)v46;
        *(_OWORD *)(v21 + 165) = *(_OWORD *)&v46[13];
        *(_OWORD *)(v21 + 152) = v27;
        *(_OWORD *)(v21 + 136) = v26;
        *(_OWORD *)(v21 + 120) = v25;
        *(void *)(v21 + 184) = 0;
        *(void *)(v21 + 192) = 0;
        *(void *)(v21 + 200) = 0;
        *(_OWORD *)(v21 + 184) = v47;
        *(void *)(v21 + 200) = v48;
        long long v47 = 0uLL;
        uint64_t v48 = 0;
        uint64_t v28 = v49[0];
        *(_DWORD *)(v21 + 216) = v49[1];
        *(void *)(v21 + 208) = v28;
        *(void *)(v21 + 224) = 0;
        *(void *)(v21 + 232) = 0;
        *(void *)(v21 + 240) = 0;
        *(_OWORD *)(v21 + 224) = __p;
        *(void *)(v21 + 240) = v51;
        long long __p = 0uLL;
        uint64_t v51 = 0;
        a4->i64[1] = v21 + 248;
      }
      if ((void)v47)
      {
        *((void *)&v47 + 1) = v47;
        operator delete((void *)v47);
      }
      if (v42[0])
      {
        v42[1] = v42[0];
        operator delete(v42[0]);
      }
      if (v41[1])
      {
        void v41[2] = v41[1];
        operator delete((void *)v41[1]);
      }
    }
    uint64_t v31 = a4->i64[1];
    long long v32 = (char **)(v31 - 176);
    if (*(void *)(v31 - 176) == *(void *)(v31 - 168) && *(void *)(v31 - 152) == *(void *)(v31 - 144))
    {
      long long v33 = *(_OWORD *)*(void *)v20;
      long long v34 = *(_OWORD *)(*(void *)v20 + 16);
      long long v35 = *(_OWORD *)(*(void *)v20 + 32);
      *(_OWORD *)(v31 - 83) = *(_OWORD *)(*(void *)v20 + 41);
      *(_OWORD *)(v31 - 92) = v35;
      *(_OWORD *)(v31 - 108) = v34;
      *(_OWORD *)(v31 - 124) = v33;
    }
    if (!*(unsigned char *)(v20 + 40)) {
      goto LABEL_16;
    }
    if (*(unsigned char *)(v20 + 40) == 1)
    {
      long long v32 = (char **)(v31 - 152);
LABEL_16:
      sub_B608D0(v32, (long long **)v20);
    }
    v20 += 48;
  }
  while ((long long *)v20 != v53);
  uint64_t v20 = v52;
  if (v52)
  {
LABEL_40:
    uint64_t v53 = (long long *)v20;
    operator delete((void *)v20);
  }
}

void sub_B60134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B6086C((void ***)va);
  sub_A05B94((void ***)va);
  uint64_t v12 = *(void **)(v10 - 144);
  if (v12)
  {
    *(void *)(v10 - 136) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_B60178(int *a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a2)
  {
LABEL_42:
    int v31 = 0;
    return v31 & a4;
  }
  unsigned int v5 = *(_DWORD *)(a4 + 32);
  unsigned int v4 = *(_DWORD *)(a4 + 36);
  unsigned int v6 = *(_DWORD *)(a3 + 32);
  unsigned int v7 = *(_DWORD *)(a3 + 36);
  unsigned int v8 = *(_DWORD *)(a4 + 24);
  unsigned int v9 = *(_DWORD *)(a4 + 28);
  unsigned int v10 = *(_DWORD *)(a3 + 24);
  unsigned int v11 = *(_DWORD *)(a3 + 28);
  int v13 = *(_DWORD *)(a4 + 16);
  int v12 = *(_DWORD *)(a4 + 20);
  BOOL v15 = v10 == v8 && v11 == v9;
  unint64_t v16 = *(void *)(a3 + 8);
  unint64_t v17 = *(void *)(a4 + 8);
  BOOL v19 = v16 == v17 && HIDWORD(v16) == HIDWORD(v17);
  BOOL v20 = v12 == 0;
  if (v12) {
    BOOL v21 = v13 != -1;
  }
  else {
    BOOL v21 = 0;
  }
  unint64_t v22 = *(void *)(a4 + 16);
  if (v20) {
    unint64_t v22 = *(void *)(a4 + 8);
  }
  if (*(_DWORD *)(a3 + 16) == -1)
  {
    if (v13 == -1) {
      unint64_t v27 = *(void *)(a4 + 8);
    }
    else {
      unint64_t v27 = v22;
    }
    unint64_t v28 = HIDWORD(v27);
    BOOL v33 = v16 == v27 && HIDWORD(v16) == HIDWORD(v27);
    while (2)
    {
      switch(*a1)
      {
        case 0:
          if (v21)
          {
LABEL_128:
            LODWORD(a4) = 0;
            int v31 = 1;
          }
          else
          {
            if (v33) {
              goto LABEL_53;
            }
            LODWORD(v25) = v16;
            unint64_t v26 = HIDWORD(v16);
LABEL_139:
            int v31 = 1;
            LODWORD(a4) = 1;
            if (v25 != -1)
            {
              if (v26)
              {
                LODWORD(a4) = 0;
                if (v27 != -1)
                {
                  if (v28)
                  {
                    if (v26 >= v28
                      && (v26 > v28 || v25 >= v27))
                    {
                      goto LABEL_94;
                    }
                    goto LABEL_208;
                  }
                }
              }
            }
          }
          return v31 & a4;
        case 1:
          if (!v19) {
            goto LABEL_188;
          }
          goto LABEL_53;
        case 2:
          if (!v15) {
            goto LABEL_199;
          }
          goto LABEL_53;
        case 3:
          if (v6 != v5) {
            goto LABEL_84;
          }
          goto LABEL_53;
        case 4:
          if (v7 != v4) {
            goto LABEL_178;
          }
          goto LABEL_53;
        default:
LABEL_53:
          if (++a1 != a2) {
            continue;
          }
          goto LABEL_93;
      }
    }
  }
  LODWORD(a4) = *(_DWORD *)(a3 + 20);
  unint64_t v23 = *(void *)(a3 + 16);
  BOOL v24 = a4 != 0;
  if (a4) {
    unint64_t v25 = v23;
  }
  else {
    unint64_t v25 = v16;
  }
  unint64_t v26 = HIDWORD(v25);
  if (a4)
  {
    if (v21)
    {
      LODWORD(v27) = v22;
      unint64_t v28 = HIDWORD(v22);
      BOOL v30 = v25 == v22 && HIDWORD(v25) == HIDWORD(v22);
      do
      {
        switch(*a1)
        {
          case 0:
            if (!v30) {
              goto LABEL_139;
            }
            break;
          case 1:
            if (!v19) {
              goto LABEL_188;
            }
            break;
          case 2:
            if (!v15) {
              goto LABEL_199;
            }
            break;
          case 3:
            if (v6 != v5) {
              goto LABEL_84;
            }
            break;
          case 4:
            if (v7 != v4) {
              goto LABEL_178;
            }
            break;
          default:
            break;
        }
        ++a1;
      }
      while (a1 != a2);
      goto LABEL_42;
    }
    if (v7 == v4)
    {
      LODWORD(a4) = 1;
      if (v6 == v5)
      {
        while (1)
        {
          int v38 = *a1;
          if (*a1 == 1)
          {
            if (!v19) {
              goto LABEL_188;
            }
          }
          else if (v38 == 2)
          {
            if (!v15) {
              goto LABEL_199;
            }
          }
          else if (!v38)
          {
            goto LABEL_168;
          }
          int v31 = 0;
          if (++a1 == a2) {
            return v31 & a4;
          }
        }
      }
      if (v15)
      {
        if (v19)
        {
          while (*a1)
          {
            if (*a1 == 3) {
              goto LABEL_84;
            }
            int v31 = 0;
            if (++a1 == a2) {
              return v31 & a4;
            }
          }
        }
        else
        {
          while (1)
          {
            int v39 = *a1;
            if (!*a1) {
              break;
            }
            if (v39 == 1) {
              goto LABEL_188;
            }
            if (v39 == 3) {
              goto LABEL_84;
            }
            int v31 = 0;
            if (++a1 == a2) {
              return v31 & a4;
            }
          }
        }
LABEL_168:
        int v31 = 1;
        LODWORD(a4) = 1;
        return v31 & a4;
      }
      if (v19)
      {
        while (1)
        {
          int v43 = *a1;
          if (!*a1) {
            goto LABEL_168;
          }
          if (v43 == 2) {
            goto LABEL_199;
          }
          if (v43 == 3) {
            goto LABEL_84;
          }
          int v31 = 0;
          if (++a1 == a2) {
            return v31 & a4;
          }
        }
      }
      do
      {
        if (!v24)
        {
          int v31 = 1;
          LODWORD(a4) = 1;
          switch(*a1)
          {
            case 0:
              return v31 & a4;
            case 1:
              goto LABEL_188;
            case 2:
              goto LABEL_199;
            case 3:
              goto LABEL_84;
            default:
              goto LABEL_210;
          }
        }
        int v31 = 0;
        BOOL v24 = ++a1 > a2;
      }
      while (a1 != a2);
    }
    else if (v6 == v5)
    {
      if (v15)
      {
        LODWORD(a4) = 1;
        if (v19)
        {
          while (*a1)
          {
            if (*a1 == 4) {
              goto LABEL_178;
            }
            int v31 = 0;
            if (++a1 == a2) {
              return v31 & a4;
            }
          }
        }
        else
        {
          while (1)
          {
            int v40 = *a1;
            if (!*a1) {
              break;
            }
            if (v40 == 1)
            {
LABEL_188:
              int v31 = 1;
              LODWORD(a4) = 1;
              if (v16 == -1) {
                return v31 & a4;
              }
              if (!HIDWORD(v16)) {
                return v31 & a4;
              }
              LODWORD(a4) = 0;
              if (v17 == -1 || !HIDWORD(v17)) {
                return v31 & a4;
              }
              if (HIDWORD(v16) >= HIDWORD(v17)
                && (HIDWORD(v16) > HIDWORD(v17) || v16 >= v17))
              {
                goto LABEL_94;
              }
              goto LABEL_208;
            }
            if (v40 == 4) {
              goto LABEL_178;
            }
            int v31 = 0;
            if (++a1 == a2) {
              return v31 & a4;
            }
          }
        }
        goto LABEL_168;
      }
      if (v19)
      {
        LODWORD(a4) = 1;
        while (1)
        {
          int v44 = *a1;
          if (!*a1) {
            goto LABEL_168;
          }
          if (v44 == 2)
          {
LABEL_199:
            int v31 = 1;
            LODWORD(a4) = 1;
            if (v10 == -1) {
              return v31 & a4;
            }
            if (!v11) {
              return v31 & a4;
            }
            LODWORD(a4) = 0;
            if (v8 == -1 || !v9) {
              return v31 & a4;
            }
            if (v11 < v9 || (v11 <= v9 ? (BOOL v48 = v10 >= v8) : (BOOL v48 = 1), !v48))
            {
LABEL_208:
              LODWORD(a4) = 1;
              return v31 & a4;
            }
            goto LABEL_94;
          }
          if (v44 == 4) {
            goto LABEL_178;
          }
          int v31 = 0;
          if (++a1 == a2) {
            return v31 & a4;
          }
        }
      }
      while (2)
      {
        int v31 = 1;
        LODWORD(a4) = 1;
        switch(*a1)
        {
          case 0:
            return v31 & a4;
          case 1:
            goto LABEL_188;
          case 2:
            goto LABEL_199;
          case 4:
            goto LABEL_178;
          default:
            int v31 = 0;
            ++a1;
            LODWORD(a4) = 1;
            if (a1 != a2) {
              continue;
            }
            break;
        }
        break;
      }
    }
    else if (v15)
    {
      if (v19)
      {
        LODWORD(a4) = 1;
        while (1)
        {
          int v41 = *a1;
          if (!*a1) {
            break;
          }
          if (v41 == 3)
          {
LABEL_84:
            BOOL v37 = v5 != -1 && v6 < v5;
            int v31 = 1;
            LODWORD(a4) = v6 == -1 || v37;
            return v31 & a4;
          }
          if (v41 == 4)
          {
LABEL_178:
            BOOL v46 = v4 != -1 && v7 < v4;
            int v31 = 1;
            LODWORD(a4) = v7 == -1 || v46;
            return v31 & a4;
          }
          int v31 = 0;
          if (++a1 == a2) {
            return v31 & a4;
          }
        }
        goto LABEL_168;
      }
      while (2)
      {
        int v31 = 1;
        LODWORD(a4) = 1;
        switch(*a1)
        {
          case 0:
            return v31 & a4;
          case 1:
            goto LABEL_188;
          case 3:
            goto LABEL_84;
          case 4:
            goto LABEL_178;
          default:
            int v31 = 0;
            ++a1;
            LODWORD(a4) = 1;
            if (a1 != a2) {
              continue;
            }
            break;
        }
        break;
      }
    }
    else if (v19)
    {
      while (2)
      {
        int v31 = 1;
        LODWORD(a4) = 1;
        switch(*a1)
        {
          case 0:
            return v31 & a4;
          case 2:
            goto LABEL_199;
          case 3:
            goto LABEL_84;
          case 4:
            goto LABEL_178;
          default:
            int v31 = 0;
            ++a1;
            LODWORD(a4) = 1;
            if (a1 != a2) {
              continue;
            }
            break;
        }
        break;
      }
    }
    else
    {
      LODWORD(a4) = 1;
      do
      {
        if (!v24)
        {
          int v31 = 1;
          LODWORD(a4) = 1;
          switch(*a1)
          {
            case 0:
              return v31 & a4;
            case 1:
              goto LABEL_188;
            case 2:
              goto LABEL_199;
            case 3:
              goto LABEL_84;
            case 4:
              goto LABEL_178;
            default:
LABEL_210:
              JUMPOUT(0);
          }
        }
        int v31 = 0;
        BOOL v24 = ++a1 > a2;
      }
      while (a1 != a2);
    }
  }
  else
  {
    if (v13 == -1) {
      unint64_t v27 = v17;
    }
    else {
      unint64_t v27 = v22;
    }
    unint64_t v28 = HIDWORD(v27);
    BOOL v35 = v25 == v27 && HIDWORD(v25) == HIDWORD(v27);
    do
    {
      switch(*a1)
      {
        case 0:
          if (v21) {
            goto LABEL_128;
          }
          if (!v35) {
            goto LABEL_139;
          }
          break;
        case 1:
          if (!v19) {
            goto LABEL_188;
          }
          break;
        case 2:
          if (!v15) {
            goto LABEL_199;
          }
          break;
        case 3:
          if (v6 != v5) {
            goto LABEL_84;
          }
          break;
        case 4:
          if (v7 != v4) {
            goto LABEL_178;
          }
          break;
        default:
          break;
      }
      ++a1;
    }
    while (a1 != a2);
LABEL_93:
    int v31 = 0;
LABEL_94:
    LODWORD(a4) = 0;
  }
  return v31 & a4;
}

void *sub_B6086C(void *a1)
{
  uint64_t v2 = (void *)a1[28];
  if (v2)
  {
    a1[29] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[23];
  if (v3)
  {
    a1[24] = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)a1[12];
  if (v4)
  {
    a1[13] = v4;
    operator delete(v4);
  }
  unsigned int v5 = (void *)a1[9];
  if (v5)
  {
    a1[10] = v5;
    operator delete(v5);
  }
  return a1;
}

char *sub_B608D0(char **a1, long long **a2)
{
  unsigned int v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unsigned int v10 = *a1;
    unint64_t v11 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - *a1) >> 2);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x444444444444444) {
      sub_2E00();
    }
    unint64_t v13 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v4 - (void)v10) >> 2);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x222222222222222) {
      unint64_t v14 = 0x444444444444444;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 > 0x444444444444444) {
        sub_188D718();
      }
      BOOL v15 = (char *)operator new(60 * v14);
    }
    else
    {
      BOOL v15 = 0;
    }
    unint64_t v16 = &v15[60 * v11];
    long long v18 = (*a2)[1];
    long long v17 = (*a2)[2];
    long long v19 = **a2;
    *(_OWORD *)(v16 + 44) = *(long long *)((char *)*a2 + 44);
    *((_OWORD *)v16 + 1) = v18;
    *((_OWORD *)v16 + 2) = v17;
    *(_OWORD *)unint64_t v16 = v19;
    unsigned int v9 = v16 + 60;
    if (v5 != v10)
    {
      do
      {
        long long v20 = *(_OWORD *)(v5 - 60);
        long long v21 = *(_OWORD *)(v5 - 44);
        long long v22 = *(_OWORD *)(v5 - 28);
        *(_OWORD *)(v16 - 19) = *(_OWORD *)(v5 - 19);
        *(_OWORD *)(v16 - 28) = v22;
        *(_OWORD *)(v16 - 44) = v21;
        *(_OWORD *)(v16 - 60) = v20;
        v16 -= 60;
        v5 -= 60;
      }
      while (v5 != v10);
      unsigned int v5 = *a1;
    }
    *a1 = v16;
    a1[1] = v9;
    a1[2] = &v15[60 * v14];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = **a2;
    long long v7 = (*a2)[1];
    long long v8 = (*a2)[2];
    *(_OWORD *)(v5 + 44) = *(long long *)((char *)*a2 + 44);
    *((_OWORD *)v5 + 1) = v7;
    *((_OWORD *)v5 + 2) = v8;
    *(_OWORD *)unsigned int v5 = v6;
    unsigned int v9 = v5 + 60;
  }
  a1[1] = v9;
  return v9 - 60;
}

void sub_B60A3C(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        unsigned int v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        long long v6 = (void *)*((void *)v3 - 8);
        if (v6)
        {
          *((void *)v3 - 7) = v6;
          operator delete(v6);
        }
        long long v7 = (void *)*((void *)v3 - 19);
        if (v7)
        {
          *((void *)v3 - 18) = v7;
          operator delete(v7);
        }
        long long v8 = (void *)*((void *)v3 - 22);
        if (v8)
        {
          *((void *)v3 - 21) = v8;
          operator delete(v8);
        }
        v3 -= 248;
      }
      while (v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char ***sub_B60AE4(char ***a1, long long *a2)
{
  unsigned int v5 = *a1;
  unint64_t v4 = (char *)a1[1];
  unint64_t v6 = (unint64_t)(*a1)[1];
  unint64_t v7 = (unint64_t)(*a1)[2];
  if (v6 >= v7)
  {
    BOOL v15 = *v5;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)*v5) >> 4) + 1;
    if (v16 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v15) >> 4);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v18 = 0x555555555555555;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 > 0x555555555555555) {
        sub_188D718();
      }
      long long v19 = operator new(48 * v18);
    }
    else
    {
      long long v19 = 0;
    }
    long long v22 = &v19[16 * ((v4 - v15) >> 4)];
    unint64_t v23 = &v19[48 * v18];
    if (v22 == v23)
    {
      int64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v22 - v19) >> 4);
      if (v22 <= v19)
      {
        if (v22 == v19) {
          unint64_t v26 = 1;
        }
        else {
          unint64_t v26 = 0x5555555555555556 * ((v22 - v19) >> 4);
        }
        if (v26 > 0x555555555555555) {
          sub_188D718();
        }
        unint64_t v27 = (char *)operator new(48 * v26);
        long long v22 = &v27[48 * (v26 >> 2)];
        unint64_t v23 = &v27[48 * v26];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        if (v24 >= -1) {
          uint64_t v25 = v24 + 1;
        }
        else {
          uint64_t v25 = v24 + 2;
        }
        unint64_t v23 = v22;
        v22 -= 48 * (v25 >> 1);
      }
    }
    long long v28 = *a2;
    long long v29 = a2[2];
    *((_OWORD *)v22 + 1) = a2[1];
    *((_OWORD *)v22 + 2) = v29;
    *(_OWORD *)long long v22 = v28;
    BOOL v30 = *v5;
    int v31 = v22;
    if (*v5 != v4)
    {
      long long v32 = v4;
      BOOL v33 = v22;
      do
      {
        long long v34 = *(v32 - 3);
        long long v35 = *(v32 - 2);
        int v31 = v33 - 48;
        *(_OWORD *)(v33 - 23) = *(_OWORD *)((char *)v32 - 23);
        *((_OWORD *)v33 - 3) = v34;
        *((_OWORD *)v33 - 2) = v35;
        v32 -= 3;
        v33 -= 48;
      }
      while (v32 != (_OWORD *)v30);
    }
    int v36 = v5[1];
    int64_t v37 = v36 - v4;
    if (v36 != v4) {
      memmove(v22 + 48, v4, v37 - 7);
    }
    int v38 = *v5;
    *unsigned int v5 = v31;
    v5[1] = &v22[v37 + 48];
    v5[2] = v23;
    if (v38) {
      operator delete(v38);
    }
    unint64_t v4 = v22;
  }
  else if (v4 == (char *)v6)
  {
    long long v20 = *a2;
    long long v21 = a2[2];
    *((_OWORD *)v4 + 1) = a2[1];
    *((_OWORD *)v4 + 2) = v21;
    *(_OWORD *)unint64_t v4 = v20;
    v5[1] = v4 + 48;
  }
  else
  {
    long long v8 = v4 + 48;
    unsigned int v9 = (long long *)(v6 - 48);
    unsigned int v10 = (*a1)[1];
    if (v6 >= 0x30)
    {
      do
      {
        long long v11 = *v9;
        long long v12 = v9[2];
        *((_OWORD *)v10 + 1) = v9[1];
        *((_OWORD *)v10 + 2) = v12;
        *(_OWORD *)unsigned int v10 = v11;
        v10 += 48;
        v9 += 3;
      }
      while ((unint64_t)v9 < v6);
    }
    v5[1] = v10;
    if ((void *)v6 != v8) {
      memmove(v8, v4, v6 - (void)v8 - 7);
    }
    long long v13 = *a2;
    long long v14 = a2[1];
    *(_OWORD *)(v4 + 25) = *(long long *)((char *)a2 + 25);
    *(_OWORD *)unint64_t v4 = v13;
    *((_OWORD *)v4 + 1) = v14;
  }
  a1[1] = (char **)(v4 + 48);
  return a1;
}

void sub_B60D80(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B60D98(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  *(void *)a1 = a3;
  *(void *)&long long v8 = 0xFFFFFFFFLL;
  *((void *)&v8 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 8) = v8;
  unsigned int v9 = a2 + 517;
  unsigned int v10 = *(_DWORD *)(a3 + 48);
  long long v11 = (int *)sub_A11094(a2 + 517, *(void *)(a3 + 28));
  long long v12 = (unsigned __int16 *)((char *)v11 - *v11);
  unsigned int v13 = *v12;
  if (v13 < 5)
  {
    long long v14 = 0;
    goto LABEL_6;
  }
  if (v12[2])
  {
    long long v14 = (char *)v11 + v12[2] + *(unsigned int *)((char *)v11 + v12[2]);
    if (v13 < 9) {
      goto LABEL_6;
    }
  }
  else
  {
    long long v14 = 0;
    if (v13 < 9) {
      goto LABEL_6;
    }
  }
  uint64_t v37 = v12[4];
  if (v37)
  {
    BOOL v15 = (unsigned int *)((char *)v11 + v37 + *(unsigned int *)((char *)v11 + v37));
    goto LABEL_7;
  }
LABEL_6:
  BOOL v15 = 0;
LABEL_7:
  *(void *)(a1 + 24) = __ROR8__(*(void *)&v14[8 * *(unsigned __int8 *)(sub_A10764(v15, v10) + 14) + 4], 32);
  *(void *)(a1 + 32) = -1;
  *(unsigned char *)(a1 + 40) = a4;
  unsigned int v16 = *(_DWORD *)(a3 + 48);
  unint64_t v17 = (int *)sub_A11094(v9, *(void *)(a3 + 28));
  unint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 9u && (uint64_t v19 = v18[4]) != 0) {
    long long v20 = (unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
  }
  else {
    long long v20 = 0;
  }
  long long v21 = (unint64_t *)sub_A10764(v20, v16);
  unint64_t v22 = *v21;
  *(void *)(a1 + 8) = __ROR8__(*v21, 32);
  unint64_t v23 = (int *)sub_498D5C(a2[515] + 24, v22, 0, "stop");
  int64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
  if (*v24 >= 0xDu && (unsigned __int16 v25 = v24[6]) != 0) {
    unint64_t v26 = *(unsigned int *)((char *)v23 + v25 + 4) | ((unint64_t)*(unsigned int *)((char *)v23 + v25) << 32);
  }
  else {
    unint64_t v26 = 0xFFFFFFFFLL;
  }
  *(void *)(a1 + 16) = v26;
  unint64_t v27 = sub_A104E8(v9, *(void *)(a3 + 28), *(_DWORD *)(a3 + 48), *(_DWORD *)(a3 + 36));
  unint64_t v28 = *(void *)(a3 + 28);
  unsigned int v29 = *(_DWORD *)(a3 + 48);
  BOOL v30 = (int *)sub_A11094(v9, v28);
  int v31 = (unsigned __int16 *)((char *)v30 - *v30);
  if (*v31 >= 9u && (uint64_t v32 = v31[4]) != 0) {
    BOOL v33 = (unsigned int *)((char *)v30 + v32 + *(unsigned int *)((char *)v30 + v32));
  }
  else {
    BOOL v33 = 0;
  }
  unsigned int v34 = *(unsigned __int16 *)(sub_A10764(v33, v29) + 12);
  long long v35 = a2 + 523;
  *(_DWORD *)(a1 + 32) = sub_B60FC4(v35, v27, v34);
  *(_DWORD *)(a1 + 36) = sub_B61134(v35, v27, v34);
  return a1;
}

uint64_t sub_B60FC4(void *a1, unint64_t a2, unsigned int a3)
{
  unint64_t v6 = sub_369B60(*a1 + 24, __ROR8__(a2, 32), 0);
  unint64_t v7 = &v6[-*(int *)v6];
  if (*(unsigned __int16 *)v7 >= 5u && (uint64_t v8 = *((unsigned __int16 *)v7 + 2)) != 0) {
    unsigned int v9 = (unsigned int *)&v6[v8 + *(unsigned int *)&v6[v8]];
  }
  else {
    unsigned int v9 = 0;
  }
  unsigned int v10 = (int *)sub_B612A4(v9, a2);
  long long v11 = (unsigned __int16 *)((char *)v10 - *v10);
  unsigned int v12 = *v11;
  if (v12 < 0x27)
  {
    if (v12 < 0x11) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_14;
  }
  if (!v11[19])
  {
LABEL_14:
    uint64_t v16 = v11[8];
    if (v16)
    {
      unsigned int v13 = *(int *)((char *)v10 + v16);
      if (v13 != -1 && HIDWORD(a2) != 0) {
        goto LABEL_19;
      }
      return 0xFFFFFFFFLL;
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v13 = sub_B61408((unsigned int *)((char *)v10 + v11[19] + *(unsigned int *)((char *)v10 + v11[19])), a3);
  if (v13 == -1 || HIDWORD(a2) == 0) {
    return 0xFFFFFFFFLL;
  }
LABEL_19:
  unint64_t v18 = (int *)sub_B61568(*a1 + 24, a2 & 0xFFFFFFFF00000000 | v13, 0, "routing direction name");
  uint64_t result = 0;
  uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 >= 5u)
  {
    uint64_t v20 = v19[2];
    if (v20) {
      return *(unsigned int *)((char *)v18 + v20);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_B61134(void *a1, unint64_t a2, unsigned int a3)
{
  unint64_t v6 = sub_369B60(*a1 + 24, __ROR8__(a2, 32), 0);
  unint64_t v7 = &v6[-*(int *)v6];
  if (*(unsigned __int16 *)v7 >= 5u && (uint64_t v8 = *((unsigned __int16 *)v7 + 2)) != 0) {
    unsigned int v9 = (unsigned int *)&v6[v8 + *(unsigned int *)&v6[v8]];
  }
  else {
    unsigned int v9 = 0;
  }
  unsigned int v10 = (int *)sub_B612A4(v9, a2);
  long long v11 = (unsigned __int16 *)((char *)v10 - *v10);
  unsigned int v12 = *v11;
  if (v12 < 0x25)
  {
    if (v12 < 0xF) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_14;
  }
  if (!v11[18])
  {
LABEL_14:
    uint64_t v16 = v11[7];
    if (v16)
    {
      unsigned int v13 = *(int *)((char *)v10 + v16);
      if (v13 != -1 && HIDWORD(a2) != 0) {
        goto LABEL_19;
      }
      return 0xFFFFFFFFLL;
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v13 = sub_B61408((unsigned int *)((char *)v10 + v11[18] + *(unsigned int *)((char *)v10 + v11[18])), a3);
  if (v13 == -1 || HIDWORD(a2) == 0) {
    return 0xFFFFFFFFLL;
  }
LABEL_19:
  unint64_t v18 = (int *)sub_B61ADC(*a1 + 24, a2 & 0xFFFFFFFF00000000 | v13, 0, "routing headsign");
  uint64_t result = 0;
  uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 >= 5u)
  {
    uint64_t v20 = v19[2];
    if (v20) {
      return *(unsigned int *)((char *)v18 + v20);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_B612A4(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    unsigned int v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unint64_t v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    unsigned int v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return (uint64_t)&a1[a2 + 1] + a1[a2 + 1];
}

void sub_B61388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_B61408(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    unsigned int v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unint64_t v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    unsigned int v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return a1[a2 + 1];
}

void sub_B614E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_B61568(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v65.__r_.__value_.__l.__data_) = HIDWORD(a2);
  LODWORD(v64.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v66 = &v64;
  *((void *)&v66 + 1) = &v65;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 880) == HIDWORD(a2))
  {
    unsigned int v12 = 36;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 904) == HIDWORD(a2))
  {
    unsigned int v12 = 37;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 928) == HIDWORD(a2))
  {
    unsigned int v12 = 38;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 952) == HIDWORD(a2))
  {
    unsigned int v12 = 39;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    long long v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_398390((int **)&v66);
    long long v21 = 0;
    goto LABEL_39;
  }
  unint64_t v23 = *(void *)(a1 + 936);
  unint64_t v24 = *(void *)(a1 + 912);
  unint64_t v25 = *(void *)(a1 + 888);
  BOOL v26 = v25 >= v9;
  if (v25 < v9) {
    unint64_t v9 = *(void *)(a1 + 888);
  }
  int v27 = 36;
  if (v26) {
    int v27 = 0;
  }
  BOOL v28 = v24 >= v9;
  if (v24 < v9) {
    unint64_t v9 = *(void *)(a1 + 912);
  }
  int v29 = 37;
  if (v28) {
    int v29 = v27;
  }
  if (v23 >= v9) {
    unint64_t v30 = v9;
  }
  else {
    unint64_t v30 = *(void *)(a1 + 936);
  }
  unint64_t v31 = *(void *)(a1 + 960);
  if (v23 >= v9) {
    int v32 = v29;
  }
  else {
    int v32 = 38;
  }
  long long v14 = (unsigned int *)sub_2AB884(v10, 9, HIDWORD(a2), 1);
  unsigned int v33 = 39;
  if (v31 >= v30) {
    unsigned int v33 = v32;
  }
  uint64_t v34 = v11 + 24 * v33;
  *(_DWORD *)uint64_t v34 = v65.__r_.__value_.__l.__data_;
  *(void *)(v34 + 8) = *(void *)(a1 + 3856);
  *(void *)(v34 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  BOOL v15 = (int *)((char *)v14 + *v14);
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x17u
    || (uint64_t v17 = v16[11]) == 0
    || (unint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17)),
        uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18),
        *v19 < 7u)
    || (uint64_t v20 = v19[3]) == 0)
  {
    long long v21 = 0;
    if (a3 != 1) {
      goto LABEL_40;
    }
    return 0;
  }
  long long v21 = (unsigned int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
  if (*v21 <= v6)
  {
LABEL_39:
    if (a3 != 1)
    {
LABEL_40:
      if (!a3)
      {
        unsigned int v35 = v6;
        exception = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v59, a4);
        uint64_t v37 = std::string::insert(&v59, 0, "Failed to acquire entity \"");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        int v39 = std::string::append(&v60, "\" in quad node ");
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v58, v8);
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v41 = &v58;
        }
        else {
          int v41 = (std::string *)v58.__r_.__value_.__r.__words[0];
        }
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v58.__r_.__value_.__l.__size_;
        }
        int v43 = std::string::append(&v61, (const std::string::value_type *)v41, size);
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        long long v45 = std::string::append(&v62, " at position ");
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v57, v35);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v47 = &v57;
        }
        else {
          long long v47 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v48 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v48 = v57.__r_.__value_.__l.__size_;
        }
        int v49 = std::string::append(&v63, (const std::string::value_type *)v47, v48);
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        uint64_t v51 = std::string::append(&v64, " on layer ");
        long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v65.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        uint64_t v53 = sub_736EC(9u);
        uint64_t v54 = std::string::append(&v65, v53);
        long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        std::string::size_type v67 = v54->__r_.__value_.__r.__words[2];
        long long v66 = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        unint64_t v56 = (void *)sub_2F404((uint64_t)exception, &v66);
      }
      return (uint64_t)&v21[v6 + 1] + v21[v6 + 1];
    }
    return 0;
  }
  return (uint64_t)&v21[v6 + 1] + v21[v6 + 1];
}

void sub_B61920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 89) < 0) {
    operator delete(*(void **)(v54 - 112));
  }
  if (*(char *)(v54 - 121) < 0)
  {
    operator delete(*(void **)(v54 - 144));
    if (*(char *)(v54 - 153) < 0)
    {
LABEL_7:
      operator delete(*(void **)(v54 - 176));
      if (a15 < 0)
      {
LABEL_10:
        operator delete(__p);
        if (a54 < 0)
        {
LABEL_13:
          operator delete(a49);
          if (a47 < 0)
          {
LABEL_16:
            operator delete(a42);
            if (a21 < 0)
            {
LABEL_19:
              operator delete(a16);
              if (a40 < 0)
              {
LABEL_22:
                operator delete(a35);
                if (a33 < 0)
                {
LABEL_25:
                  operator delete(a28);
                  if ((a27 & 0x80000000) == 0) {
                    goto LABEL_29;
                  }
                  goto LABEL_28;
                }
LABEL_27:
                if ((a27 & 0x80000000) == 0) {
LABEL_29:
                }
                  _Unwind_Resume(a1);
LABEL_28:
                operator delete(a22);
                goto LABEL_29;
              }
LABEL_24:
              if (a33 < 0) {
                goto LABEL_25;
              }
              goto LABEL_27;
            }
LABEL_21:
            if (a40 < 0) {
              goto LABEL_22;
            }
            goto LABEL_24;
          }
LABEL_18:
          if (a21 < 0) {
            goto LABEL_19;
          }
          goto LABEL_21;
        }
LABEL_15:
        if (a47 < 0) {
          goto LABEL_16;
        }
        goto LABEL_18;
      }
LABEL_12:
      if (a54 < 0) {
        goto LABEL_13;
      }
      goto LABEL_15;
    }
  }
  else if (*(char *)(v54 - 153) < 0)
  {
    goto LABEL_7;
  }
  if (a15 < 0) {
    goto LABEL_10;
  }
  goto LABEL_12;
}

uint64_t sub_B61ADC(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v65.__r_.__value_.__l.__data_) = HIDWORD(a2);
  LODWORD(v64.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v66 = &v64;
  *((void *)&v66 + 1) = &v65;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 880) == HIDWORD(a2))
  {
    unsigned int v12 = 36;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 904) == HIDWORD(a2))
  {
    unsigned int v12 = 37;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 928) == HIDWORD(a2))
  {
    unsigned int v12 = 38;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 952) == HIDWORD(a2))
  {
    unsigned int v12 = 39;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    long long v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_398390((int **)&v66);
    long long v21 = 0;
    goto LABEL_39;
  }
  unint64_t v23 = *(void *)(a1 + 936);
  unint64_t v24 = *(void *)(a1 + 912);
  unint64_t v25 = *(void *)(a1 + 888);
  BOOL v26 = v25 >= v9;
  if (v25 < v9) {
    unint64_t v9 = *(void *)(a1 + 888);
  }
  int v27 = 36;
  if (v26) {
    int v27 = 0;
  }
  BOOL v28 = v24 >= v9;
  if (v24 < v9) {
    unint64_t v9 = *(void *)(a1 + 912);
  }
  int v29 = 37;
  if (v28) {
    int v29 = v27;
  }
  if (v23 >= v9) {
    unint64_t v30 = v9;
  }
  else {
    unint64_t v30 = *(void *)(a1 + 936);
  }
  unint64_t v31 = *(void *)(a1 + 960);
  if (v23 >= v9) {
    int v32 = v29;
  }
  else {
    int v32 = 38;
  }
  long long v14 = (unsigned int *)sub_2AB884(v10, 9, HIDWORD(a2), 1);
  unsigned int v33 = 39;
  if (v31 >= v30) {
    unsigned int v33 = v32;
  }
  uint64_t v34 = v11 + 24 * v33;
  *(_DWORD *)uint64_t v34 = v65.__r_.__value_.__l.__data_;
  *(void *)(v34 + 8) = *(void *)(a1 + 3856);
  *(void *)(v34 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  BOOL v15 = (int *)((char *)v14 + *v14);
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 0x17u
    || (uint64_t v17 = v16[11]) == 0
    || (unint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17)),
        uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18),
        *v19 < 5u)
    || (uint64_t v20 = v19[2]) == 0)
  {
    long long v21 = 0;
    if (a3 != 1) {
      goto LABEL_40;
    }
    return 0;
  }
  long long v21 = (unsigned int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
  if (*v21 <= v6)
  {
LABEL_39:
    if (a3 != 1)
    {
LABEL_40:
      if (!a3)
      {
        unsigned int v35 = v6;
        exception = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v59, a4);
        uint64_t v37 = std::string::insert(&v59, 0, "Failed to acquire entity \"");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        int v39 = std::string::append(&v60, "\" in quad node ");
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v58, v8);
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v41 = &v58;
        }
        else {
          int v41 = (std::string *)v58.__r_.__value_.__r.__words[0];
        }
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v58.__r_.__value_.__l.__size_;
        }
        int v43 = std::string::append(&v61, (const std::string::value_type *)v41, size);
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        long long v45 = std::string::append(&v62, " at position ");
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v57, v35);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v47 = &v57;
        }
        else {
          long long v47 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v48 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v48 = v57.__r_.__value_.__l.__size_;
        }
        int v49 = std::string::append(&v63, (const std::string::value_type *)v47, v48);
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        uint64_t v51 = std::string::append(&v64, " on layer ");
        long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v65.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        uint64_t v53 = sub_736EC(9u);
        uint64_t v54 = std::string::append(&v65, v53);
        long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        std::string::size_type v67 = v54->__r_.__value_.__r.__words[2];
        long long v66 = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        unint64_t v56 = (void *)sub_2F404((uint64_t)exception, &v66);
      }
      return (uint64_t)&v21[v6 + 1] + v21[v6 + 1];
    }
    return 0;
  }
  return (uint64_t)&v21[v6 + 1] + v21[v6 + 1];
}

void sub_B61E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 89) < 0) {
    operator delete(*(void **)(v54 - 112));
  }
  if (*(char *)(v54 - 121) < 0)
  {
    operator delete(*(void **)(v54 - 144));
    if (*(char *)(v54 - 153) < 0)
    {
LABEL_7:
      operator delete(*(void **)(v54 - 176));
      if (a15 < 0)
      {
LABEL_10:
        operator delete(__p);
        if (a54 < 0)
        {
LABEL_13:
          operator delete(a49);
          if (a47 < 0)
          {
LABEL_16:
            operator delete(a42);
            if (a21 < 0)
            {
LABEL_19:
              operator delete(a16);
              if (a40 < 0)
              {
LABEL_22:
                operator delete(a35);
                if (a33 < 0)
                {
LABEL_25:
                  operator delete(a28);
                  if ((a27 & 0x80000000) == 0) {
                    goto LABEL_29;
                  }
                  goto LABEL_28;
                }
LABEL_27:
                if ((a27 & 0x80000000) == 0) {
LABEL_29:
                }
                  _Unwind_Resume(a1);
LABEL_28:
                operator delete(a22);
                goto LABEL_29;
              }
LABEL_24:
              if (a33 < 0) {
                goto LABEL_25;
              }
              goto LABEL_27;
            }
LABEL_21:
            if (a40 < 0) {
              goto LABEL_22;
            }
            goto LABEL_24;
          }
LABEL_18:
          if (a21 < 0) {
            goto LABEL_19;
          }
          goto LABEL_21;
        }
LABEL_15:
        if (a47 < 0) {
          goto LABEL_16;
        }
        goto LABEL_18;
      }
LABEL_12:
      if (a54 < 0) {
        goto LABEL_13;
      }
      goto LABEL_15;
    }
  }
  else if (*(char *)(v54 - 153) < 0)
  {
    goto LABEL_7;
  }
  if (a15 < 0) {
    goto LABEL_10;
  }
  goto LABEL_12;
}

__n128 sub_B62050(uint64_t a1, long long *a2, int ***a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 result)
{
  if (a4 >= 2)
  {
    uint64_t v9 = a1;
    if (a4 == 2)
    {
      uint64_t v10 = (__n128 *)(a2 - 3);
      if (sub_B60178(**a3, (*a3)[1], (uint64_t)(a2 - 3), a1))
      {
        long long v11 = *(_OWORD *)(v9 + 32);
        __n128 v13 = *(__n128 *)v9;
        *(_OWORD *)long long v45 = *(_OWORD *)(v9 + 16);
        __n128 v12 = *(__n128 *)v45;
        *(_OWORD *)&v45[16] = v11;
        uint64_t result = *(__n128 *)((char *)v10 + 25);
        __n128 v14 = v10[1];
        *(__n128 *)uint64_t v9 = *v10;
        *(__n128 *)(v9 + 16) = v14;
        *(__n128 *)(v9 + 25) = result;
        __n128 *v10 = v13;
        v10[1] = v12;
        result.n128_u64[0] = *(void *)&v45[9];
        *(__n128 *)((char *)v10 + 25) = *(__n128 *)&v45[9];
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      BOOL v28 = a5;
      unint64_t v29 = a4 >> 1;
      uint64_t v30 = a1 + 48 * (a4 >> 1);
      unint64_t v31 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        __n128 v32 = sub_B62350(a1, v30, a3, v31, a5, result);
        unsigned int v33 = &v28[3 * v29];
        result.n128_u64[0] = sub_B62350(v9 + 48 * (a4 >> 1), (uint64_t)a2, a3, a4 - (a4 >> 1), v33, v32).n128_u64[0];
        uint64_t v34 = &v28[3 * a4];
        uint64_t v35 = (uint64_t)v33;
        while ((__n128 *)v35 != v34)
        {
          if (sub_B60178(**a3, (*a3)[1], v35, (uint64_t)v28))
          {
            uint64_t result = *(__n128 *)v35;
            long long v37 = *(_OWORD *)(v35 + 16);
            *(_OWORD *)(v9 + 25) = *(_OWORD *)(v35 + 25);
            *(__n128 *)uint64_t v9 = result;
            *(_OWORD *)(v9 + 16) = v37;
            v9 += 48;
            v35 += 48;
            if (v28 == v33)
            {
LABEL_26:
              if ((__n128 *)v35 != v34)
              {
                uint64_t v38 = 0;
                do
                {
                  uint64_t v39 = v9 + v38;
                  uint64_t result = *(__n128 *)(v35 + v38);
                  long long v40 = *(_OWORD *)(v35 + v38 + 16);
                  *(_OWORD *)(v39 + 25) = *(_OWORD *)(v35 + v38 + 25);
                  *(__n128 *)uint64_t v39 = result;
                  *(_OWORD *)(v39 + 16) = v40;
                  v38 += 48;
                }
                while ((__n128 *)(v35 + v38) != v34);
              }
              return result;
            }
          }
          else
          {
            uint64_t result = *v28;
            __n128 v36 = v28[1];
            *(__n128 *)(v9 + 25) = *(__n128 *)((char *)v28 + 25);
            *(__n128 *)uint64_t v9 = result;
            *(__n128 *)(v9 + 16) = v36;
            v9 += 48;
            v28 += 3;
            if (v28 == v33) {
              goto LABEL_26;
            }
          }
        }
        if (v28 != v33)
        {
          uint64_t v41 = 0;
          do
          {
            uint64_t v42 = v9 + v41 * 16;
            uint64_t result = v28[v41];
            __n128 v43 = v28[v41 + 1];
            *(__n128 *)(v42 + 25) = *(__n128 *)((char *)&v28[v41 + 1] + 9);
            *(__n128 *)uint64_t v42 = result;
            *(__n128 *)(v42 + 16) = v43;
            v41 += 3;
          }
          while (&v28[v41] != v33);
        }
      }
      else
      {
        sub_B62050(a1, v30, a3, v31, a5, a6);
        sub_B62050(v9 + 48 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v28, a6);
        sub_B62638(v9, v9 + 48 * (a4 >> 1), a2, a3, a4 >> 1, a4 - (a4 >> 1), v28, a6);
      }
    }
    else if ((long long *)a1 != a2)
    {
      uint64_t v16 = a1 + 48;
      if ((long long *)(a1 + 48) != a2)
      {
        uint64_t v17 = 0;
        unint64_t v18 = *a3;
        uint64_t v19 = (long long *)a1;
        do
        {
          uint64_t v22 = (uint64_t)v19;
          uint64_t v19 = (long long *)v16;
          if (sub_B60178(*v18, v18[1], v16, v22))
          {
            long long v23 = v19[1];
            long long v44 = *v19;
            *(_OWORD *)long long v45 = v23;
            *(_OWORD *)&v45[16] = v19[2];
            uint64_t v24 = v17;
            do
            {
              unint64_t v25 = (_OWORD *)(v9 + v24);
              long long v26 = *(_OWORD *)(v9 + v24 + 16);
              v25[3] = *(_OWORD *)(v9 + v24);
              void v25[4] = v26;
              *(_OWORD *)((char *)v25 + 73) = *(_OWORD *)(v9 + v24 + 25);
              if (!v24)
              {
                uint64_t v20 = (_OWORD *)v9;
                goto LABEL_10;
              }
              v24 -= 48;
            }
            while ((sub_B60178(**a3, (*a3)[1], (uint64_t)&v44, v24 + v9) & 1) != 0);
            uint64_t v20 = (_OWORD *)(v9 + v24 + 48);
LABEL_10:
            long long v21 = *(_OWORD *)v45;
            *uint64_t v20 = v44;
            v20[1] = v21;
            result.n128_u64[0] = *(void *)&v45[9];
            *(_OWORD *)((char *)v20 + 25) = *(_OWORD *)&v45[9];
            unint64_t v18 = *a3;
          }
          uint64_t v16 = (uint64_t)(v19 + 3);
          v17 += 48;
        }
        while (v19 + 3 != a2);
      }
    }
  }
  return result;
}

__n128 sub_B62350(uint64_t a1, uint64_t a2, int ***a3, unint64_t a4, __n128 *a5, __n128 result)
{
  if (a4)
  {
    unsigned int v6 = a5;
    uint64_t v10 = a1;
    if (a4 == 2)
    {
      __n128 v12 = (__n128 *)(a2 - 48);
      if (sub_B60178(**a3, (*a3)[1], a2 - 48, a1))
      {
        __n128 v13 = *v12;
        __n128 v14 = v12[2];
        v6[1] = v12[1];
        v6[2] = v14;
        __n128 *v6 = v13;
        uint64_t result = *(__n128 *)v10;
        __n128 v15 = *(__n128 *)(v10 + 16);
        __n128 v16 = *(__n128 *)(v10 + 32);
      }
      else
      {
        __n128 v28 = *(__n128 *)v10;
        __n128 v29 = *(__n128 *)(v10 + 32);
        v6[1] = *(__n128 *)(v10 + 16);
        v6[2] = v29;
        __n128 *v6 = v28;
        uint64_t result = *v12;
        __n128 v15 = v12[1];
        __n128 v16 = v12[2];
      }
      v6[4] = v15;
      v6[5] = v16;
      v6[3] = result;
    }
    else if (a4 == 1)
    {
      uint64_t result = *(__n128 *)a1;
      __n128 v11 = *(__n128 *)(a1 + 32);
      a5[1] = *(__n128 *)(a1 + 16);
      a5[2] = v11;
      *a5 = result;
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v30 = a4 >> 1;
      uint64_t v31 = 48 * (a4 >> 1);
      uint64_t v32 = a1 + v31;
      sub_B62050(a1, a1 + v31, a3, a4 >> 1, a5, a4 >> 1);
      sub_B62050(v10 + v31, a2, a3, a4 - v30, &v6[(unint64_t)v31 / 0x10], a4 - v30);
      uint64_t v33 = v10 + v31;
      while (v33 != a2)
      {
        if (sub_B60178(**a3, (*a3)[1], v33, v10))
        {
          uint64_t result = *(__n128 *)v33;
          __n128 v35 = *(__n128 *)(v33 + 32);
          v6[1] = *(__n128 *)(v33 + 16);
          v6[2] = v35;
          __n128 *v6 = result;
          v6 += 3;
          v33 += 48;
          if (v10 == v32)
          {
LABEL_28:
            if (v33 != a2)
            {
              unint64_t v36 = 0;
              do
              {
                long long v37 = &v6[v36 / 0x10];
                uint64_t result = *(__n128 *)(v33 + v36);
                __n128 v38 = *(__n128 *)(v33 + v36 + 32);
                v37[1] = *(__n128 *)(v33 + v36 + 16);
                uint64_t v37[2] = v38;
                __n128 *v37 = result;
                v36 += 48;
              }
              while (v33 + v36 != a2);
            }
            return result;
          }
        }
        else
        {
          uint64_t result = *(__n128 *)v10;
          __n128 v34 = *(__n128 *)(v10 + 32);
          v6[1] = *(__n128 *)(v10 + 16);
          v6[2] = v34;
          __n128 *v6 = result;
          v6 += 3;
          v10 += 48;
          if (v10 == v32) {
            goto LABEL_28;
          }
        }
      }
      if (v10 != v32)
      {
        unint64_t v39 = 0;
        do
        {
          long long v40 = &v6[v39 / 0x10];
          uint64_t result = *(__n128 *)(v10 + v39);
          __n128 v41 = *(__n128 *)(v10 + v39 + 32);
          v40[1] = *(__n128 *)(v10 + v39 + 16);
          void v40[2] = v41;
          *long long v40 = result;
          v39 += 48;
        }
        while (v10 + v39 != v32);
      }
    }
    else if (a1 != a2)
    {
      uint64_t result = *(__n128 *)a1;
      __n128 v17 = *(__n128 *)(a1 + 32);
      a5[1] = *(__n128 *)(a1 + 16);
      a5[2] = v17;
      *a5 = result;
      uint64_t v18 = a1 + 48;
      if (a1 + 48 != a2)
      {
        uint64_t v19 = 0;
        uint64_t v20 = a5;
        do
        {
          while (1)
          {
            uint64_t v22 = v20 + 3;
            if (sub_B60178(**a3, (*a3)[1], v18, (uint64_t)v20)) {
              break;
            }
            uint64_t result = *(__n128 *)v18;
            __n128 v21 = *(__n128 *)(v18 + 32);
            v20[4] = *(__n128 *)(v18 + 16);
            v20[5] = v21;
            *uint64_t v22 = result;
            v18 += 48;
            v19 += 48;
            v20 += 3;
            if (v18 == a2) {
              return result;
            }
          }
          __n128 v23 = v20[1];
          *uint64_t v22 = *v20;
          v20[4] = v23;
          v20[5] = v20[2];
          uint64_t v24 = v6;
          if (v20 != v6)
          {
            uint64_t v25 = v19;
            while (1)
            {
              uint64_t v24 = (__n128 *)((char *)v6 + v25);
              if (!sub_B60178(**a3, (*a3)[1], v18, (uint64_t)&v6[-3] + v25)) {
                break;
              }
              __n128 v26 = *(__n128 *)((char *)v6 + v25 - 32);
              *uint64_t v24 = *(__n128 *)((char *)v6 + v25 - 48);
              v24[1] = v26;
              *(__n128 *)((char *)v24 + 25) = *(__n128 *)((char *)v6 + v25 - 23);
              v25 -= 48;
              if (!v25)
              {
                uint64_t v24 = v6;
                break;
              }
            }
          }
          uint64_t result = *(__n128 *)v18;
          __n128 v27 = *(__n128 *)(v18 + 16);
          *(__n128 *)((char *)v24 + 25) = *(__n128 *)(v18 + 25);
          *uint64_t v24 = result;
          v24[1] = v27;
          v18 += 48;
          v19 += 48;
          v20 += 3;
        }
        while (v18 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_B62638(uint64_t result, uint64_t a2, _OWORD *a3, int ***a4, int64_t a5, uint64_t a6, _OWORD *a7, uint64_t a8)
{
  uint64_t v106 = a6;
  if (!a6) {
    return result;
  }
  __n128 v12 = (_OWORD *)result;
  while (v106 > a8 && a5 > a8)
  {
    if (!a5) {
      return result;
    }
    uint64_t v13 = 0;
    __n128 v15 = **a4;
    __n128 v14 = (*a4)[1];
    uint64_t v16 = -a5;
    while (1)
    {
      __n128 v17 = &v12[v13];
      uint64_t v18 = (_OWORD *)a2;
      uint64_t result = sub_B60178(v15, v14, a2, (uint64_t)&v12[v13]);
      if (result) {
        break;
      }
      v13 += 3;
      BOOL v19 = __CFADD__(v16++, 1);
      a2 = (uint64_t)v18;
      if (v19) {
        return result;
      }
    }
    uint64_t v20 = -v16;
    uint64_t v21 = v106;
    uint64_t v101 = &v12[v13];
    BOOL v102 = (char *)v12;
    char v103 = a3;
    if (-v16 >= v106)
    {
      uint64_t v24 = v18;
      if (v16 == -1)
      {
        uint64_t v92 = &v12[v13];
        *(_OWORD *)unsigned int v116 = v12[v13 + 1];
        *(_OWORD *)&v116[16] = v12[v13 + 2];
        long long v111 = v12[v13];
        long long v93 = *v18;
        long long v94 = v18[1];
        *(_OWORD *)((char *)v92 + 25) = *(_OWORD *)((char *)v18 + 25);
        _OWORD *v92 = v93;
        v92[1] = v94;
        *uint64_t v18 = v111;
        v18[1] = *(_OWORD *)v116;
        *(_OWORD *)((char *)v18 + 25) = *(_OWORD *)&v116[9];
        return result;
      }
      unint64_t v30 = a7;
      if (v16 > 0) {
        uint64_t v20 = 1 - v16;
      }
      uint64_t v100 = v20 >> 1;
      __n128 v28 = &v12[3 * (v20 >> 1) + v13];
      long long v40 = a3;
      uint64_t v25 = (uint64_t)v18;
      if (v18 != v40)
      {
        unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * (v103 - v18);
        uint64_t v25 = (uint64_t)v18;
        do
        {
          uint64_t v42 = v25 + 48 * (v41 >> 1);
          int v43 = sub_B60178(v15, v14, v42, (uint64_t)v28);
          if (v43) {
            v41 += ~(v41 >> 1);
          }
          else {
            v41 >>= 1;
          }
          if (v43) {
            uint64_t v25 = v42 + 48;
          }
        }
        while (v41);
        unint64_t v30 = a7;
        uint64_t v24 = v18;
        uint64_t v21 = v106;
      }
      uint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v25 - (uint64_t)v24) >> 4);
      unint64_t v32 = v100;
      if (v28 != v24)
      {
LABEL_23:
        uint64_t v33 = v25 - (void)v24;
        if ((_OWORD *)v25 == v24)
        {
          uint64_t v24 = v28;
        }
        else
        {
          __n128 v34 = v28 + 3;
          if (v28 + 3 == v24)
          {
            *(_OWORD *)uint64_t v113 = v28[1];
            *(_OWORD *)&v113[16] = v28[2];
            long long v108 = *v28;
            long long v44 = v30;
            uint64_t v45 = v23;
            memmove(v28, v24, v33 - 7);
            uint64_t v23 = v45;
            uint64_t v21 = v106;
            unint64_t v30 = v44;
            uint64_t v24 = (_OWORD *)((char *)v28 + v33);
            *uint64_t v24 = v108;
            v24[1] = *(_OWORD *)v113;
            *(_OWORD *)((char *)v24 + 25) = *(_OWORD *)&v113[9];
          }
          else
          {
            __n128 v35 = v24 + 3;
            if (v24 + 3 == (_OWORD *)v25)
            {
              uint64_t v24 = v28 + 3;
              *(_OWORD *)long long v114 = *(_OWORD *)(v25 - 32);
              *(_OWORD *)&v114[16] = *(_OWORD *)(v25 - 16);
              long long v109 = *(_OWORD *)(v25 - 48);
              if ((_OWORD *)(v25 - 48) != v28)
              {
                long long v46 = v30;
                uint64_t v47 = v23;
                memmove(v28 + 3, v28, v25 - 48 - (void)v28 - 7);
                uint64_t v23 = v47;
                uint64_t v21 = v106;
                unint64_t v30 = v46;
                uint64_t v24 = v28 + 3;
              }
              *(_OWORD *)((char *)v28 + 25) = *(_OWORD *)&v114[9];
              *__n128 v28 = v109;
              v28[1] = *(_OWORD *)v114;
            }
            else
            {
              unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (v24 - v28);
              if (v36 == 0xAAAAAAAAAAAAAAABLL * (v33 >> 4))
              {
                do
                {
                  *(_OWORD *)uint64_t v112 = *(v34 - 2);
                  *(_OWORD *)&v112[16] = *(v34 - 1);
                  long long v107 = *(v34 - 3);
                  long long v37 = *(v35 - 3);
                  long long v38 = *(v35 - 2);
                  *(_OWORD *)((char *)v34 - 23) = *(_OWORD *)((char *)v35 - 23);
                  *(v34 - 3) = v37;
                  *(v34 - 2) = v38;
                  *(v35 - 3) = v107;
                  *(v35 - 2) = *(_OWORD *)v112;
                  *(_OWORD *)((char *)v35 - 23) = *(_OWORD *)&v112[9];
                  if (v34 == v24) {
                    break;
                  }
                  v34 += 3;
                  BOOL v39 = v35 == (_OWORD *)v25;
                  v35 += 3;
                }
                while (!v39);
              }
              else
              {
                uint64_t v48 = 0xAAAAAAAAAAAAAAABLL * (v33 >> 4);
                unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * (v24 - v28);
                do
                {
                  uint64_t v50 = v49;
                  unint64_t v49 = v48;
                  uint64_t v48 = v50 % v48;
                }
                while (v48);
                if (v49)
                {
                  uint64_t v51 = &v28[3 * v49];
                  do
                  {
                    long long v52 = *(v51 - 3);
                    long long v53 = *(v51 - 2);
                    long long v54 = *(v51 - 1);
                    v51 -= 3;
                    *(_OWORD *)char v115 = v53;
                    *(_OWORD *)&v115[16] = v54;
                    long long v110 = v52;
                    long long v55 = &v51[3 * v36];
                    unint64_t v56 = v51;
                    do
                    {
                      std::string v57 = v55;
                      long long v58 = *v55;
                      long long v59 = v55[1];
                      *(_OWORD *)((char *)v56 + 25) = *(_OWORD *)((char *)v55 + 25);
                      *unint64_t v56 = v58;
                      v56[1] = v59;
                      unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((v25 - (uint64_t)v55) >> 4);
                      v55 += 3 * v36;
                      BOOL v61 = __OFSUB__(v36, v60);
                      uint64_t v63 = v36 - v60;
                      char v62 = (v63 < 0) ^ v61;
                      std::string v64 = &v28[3 * v63];
                      if (!v62) {
                        long long v55 = v64;
                      }
                      unint64_t v56 = v57;
                    }
                    while (v55 != v51);
                    *(_OWORD *)((char *)v57 + 25) = *(_OWORD *)&v115[9];
                    _OWORD *v57 = v110;
                    v57[1] = *(_OWORD *)v115;
                  }
                  while (v51 != v28);
                }
                uint64_t v24 = &v28[v33 >> 4];
              }
            }
          }
        }
        goto LABEL_60;
      }
    }
    else
    {
      if (v106 >= 0) {
        uint64_t v22 = v106;
      }
      else {
        uint64_t v22 = v106 + 1;
      }
      uint64_t v23 = v22 >> 1;
      uint64_t v24 = v18;
      uint64_t v25 = (uint64_t)&v18[3 * (v22 >> 1)];
      int64_t v26 = (char *)v18 - (char *)v12;
      __n128 v27 = (char *)v12;
      __n128 v28 = v18;
      uint64_t v29 = v26 - v13 * 16;
      unint64_t v30 = a7;
      if (v29)
      {
        uint64_t v99 = v23;
        unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * (v29 >> 4);
        __n128 v28 = v17;
        do
        {
          if (sub_B60178(v15, v14, v25, (uint64_t)&v28[3 * (v31 >> 1)]))
          {
            v31 >>= 1;
          }
          else
          {
            v28 += 3 * (v31 >> 1) + 3;
            v31 += ~(v31 >> 1);
          }
        }
        while (v31);
        uint64_t v23 = v99;
        unint64_t v30 = a7;
        __n128 v27 = v102;
        uint64_t v24 = v18;
        uint64_t v21 = v106;
      }
      unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - v27 - v13 * 16) >> 4);
      if (v28 != v24) {
        goto LABEL_23;
      }
    }
    uint64_t v24 = (_OWORD *)v25;
LABEL_60:
    a5 = -(uint64_t)v32 - v16;
    uint64_t v65 = v21 - v23;
    if ((uint64_t)(v32 + v23) >= (uint64_t)(v21 - (v32 + v23) - v16))
    {
      std::string::size_type v67 = v24;
      uint64_t v68 = -(uint64_t)v32 - v16;
      uint64_t v69 = v23;
      a7 = v30;
      uint64_t result = sub_B62638(v24, v25, v103, a4, v68, v21 - v23);
      a2 = (uint64_t)v28;
      a5 = v32;
      a3 = v67;
      __n128 v12 = v101;
      uint64_t v106 = v69;
      if (!v69) {
        return result;
      }
    }
    else
    {
      long long v66 = v28;
      a7 = v30;
      __n128 v12 = v24;
      uint64_t result = sub_B62638(&v102[v13 * 16], v66, v24, a4, v32, v23);
      a2 = v25;
      a3 = v103;
      uint64_t v106 = v65;
      if (!v65) {
        return result;
      }
    }
  }
  if (a5 <= v106)
  {
    if (v12 != (_OWORD *)a2)
    {
      uint64_t v81 = 0;
      do
      {
        uint64_t v82 = &a7[v81];
        long long v83 = v12[v81];
        long long v84 = v12[v81 + 2];
        v82[1] = v12[v81 + 1];
        v82[2] = v84;
        *uint64_t v82 = v83;
        v81 += 3;
      }
      while (&v12[v81] != (_OWORD *)a2);
      if (v81 * 16)
      {
        int v85 = a7;
        int v86 = &a7[v81];
        while ((_OWORD *)a2 != a3)
        {
          uint64_t v89 = (long long *)a2;
          uint64_t result = sub_B60178(**a4, (*a4)[1], a2, (uint64_t)v85);
          if (result)
          {
            long long v90 = *v89;
            long long v91 = v89[1];
            *(_OWORD *)((char *)v12 + 25) = *(long long *)((char *)v89 + 25);
            *__n128 v12 = v90;
            v12[1] = v91;
            v12 += 3;
            a2 = (uint64_t)(v89 + 3);
            if (v86 == v85) {
              return result;
            }
          }
          else
          {
            long long v87 = *v85;
            long long v88 = v85[1];
            *(_OWORD *)((char *)v12 + 25) = *(long long *)((char *)v85 + 25);
            *__n128 v12 = v87;
            v12[1] = v88;
            v12 += 3;
            v85 += 3;
            a2 = (uint64_t)v89;
            if (v86 == v85) {
              return result;
            }
          }
        }
        return (uint64_t)memmove(v12, v85, (char *)a7 - (char *)v85 + v81 * 16 - 7);
      }
    }
  }
  else if (a3 != (_OWORD *)a2)
  {
    unint64_t v70 = 0;
    do
    {
      int v71 = &a7[v70 / 0x10];
      long long v72 = *(_OWORD *)(a2 + v70);
      long long v73 = *(_OWORD *)(a2 + v70 + 32);
      v71[1] = *(_OWORD *)(a2 + v70 + 16);
      _OWORD v71[2] = v73;
      _OWORD *v71 = v72;
      v70 += 48;
    }
    while ((_OWORD *)(a2 + v70) != a3);
    if (v70)
    {
      uint64_t v74 = &a7[v70 / 0x10];
      unsigned int v75 = a3 - 3;
      while ((_OWORD *)a2 != v12)
      {
        uint64_t v76 = (_OWORD *)(a2 - 48);
        uint64_t v77 = a2;
        uint64_t result = sub_B60178(**a4, (*a4)[1], (uint64_t)(v74 - 3), a2 - 48);
        if (result) {
          int v78 = v76;
        }
        else {
          int v78 = v74 - 3;
        }
        if (result) {
          a2 = (uint64_t)v76;
        }
        else {
          a2 = v77;
        }
        if (!result) {
          v74 -= 3;
        }
        long long v79 = *(_OWORD *)((char *)v78 + 25);
        long long v80 = v78[1];
        *unsigned int v75 = *v78;
        v75[1] = v80;
        *(_OWORD *)((char *)v75 + 25) = v79;
        v75 -= 3;
        if (v74 == a7) {
          return result;
        }
      }
      uint64_t v95 = 0;
      do
      {
        uint64_t v96 = &v75[v95];
        long long v97 = v74[v95 - 3];
        long long v98 = v74[v95 - 2];
        *(_OWORD *)((char *)v96 + 25) = *(_OWORD *)((char *)&v74[v95 - 1] - 7);
        *uint64_t v96 = v97;
        v96[1] = v98;
        v95 -= 3;
      }
      while (&v74[v95] != a7);
    }
  }
  return result;
}

char *sub_B62D1C(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xEF7BDEF7BDEF7BDFLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x108421084210842) {
    sub_2E00();
  }
  if (0xDEF7BDEF7BDEF7BELL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0xDEF7BDEF7BDEF7BELL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x84210842108421) {
    unint64_t v5 = 0x108421084210842;
  }
  else {
    unint64_t v5 = v4;
  }
  unint64_t v31 = a1 + 1;
  if (v5 > 0x108421084210842) {
    sub_188D718();
  }
  uint64_t v7 = 248 * v5;
  unint64_t v8 = (char *)operator new(248 * v5);
  uint64_t v9 = &v8[248 * v3];
  __n128 v28 = v8;
  v29.i64[0] = (uint64_t)v9;
  v29.i64[1] = (uint64_t)v9;
  unint64_t v30 = &v8[v7];
  long long v10 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v9 + 3) = v10;
  *((void *)v9 + 8) = *(void *)(a2 + 64);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v11;
  *(_OWORD *)(v9 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v9 + 11) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *((_OWORD *)v9 + 6) = *(_OWORD *)(a2 + 96);
  *((void *)v9 + 14) = *(void *)(a2 + 112);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(v9 + 165) = *(_OWORD *)(a2 + 165);
  *(_OWORD *)(v9 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v9 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v9 + 120) = *(_OWORD *)(a2 + 120);
  uint64_t v12 = *(void *)(a2 + 200);
  uint64_t v13 = *(void *)(a2 + 208);
  *((void *)v9 + 25) = 0;
  *((void *)v9 + 26) = v13;
  *(_OWORD *)(v9 + 184) = *(_OWORD *)(a2 + 184);
  *((void *)v9 + 25) = v12;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *((_DWORD *)v9 + 54) = *(_DWORD *)(a2 + 216);
  *((void *)v9 + 29) = 0;
  *((void *)v9 + 30) = 0;
  *((_OWORD *)v9 + 14) = *(_OWORD *)(a2 + 224);
  *((void *)v9 + 30) = *(void *)(a2 + 240);
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  uint64_t v14 = a1->i64[0];
  unint64_t v15 = a1->u64[1];
  if (v15 == a1->i64[0])
  {
    int64x2_t v24 = vdupq_n_s64(v15);
    uint64_t v16 = &v8[248 * v3];
  }
  else
  {
    uint64_t v16 = &v8[248 * v3];
    do
    {
      *(_OWORD *)(v16 - 248) = *(_OWORD *)(v15 - 248);
      long long v17 = *(_OWORD *)(v15 - 232);
      long long v18 = *(_OWORD *)(v15 - 216);
      uint64_t v19 = *(void *)(v15 - 184);
      *(_OWORD *)(v16 - 200) = *(_OWORD *)(v15 - 200);
      *(_OWORD *)(v16 - 216) = v18;
      *(_OWORD *)(v16 - 232) = v17;
      *((void *)v16 - 23) = v19;
      *((void *)v16 - 22) = 0;
      *((void *)v16 - 21) = 0;
      *((void *)v16 - 20) = 0;
      *((_OWORD *)v16 - 11) = *(_OWORD *)(v15 - 176);
      *((void *)v16 - 20) = *(void *)(v15 - 160);
      *(void *)(v15 - 176) = 0;
      *(void *)(v15 - 168) = 0;
      *(void *)(v15 - 160) = 0;
      *((void *)v16 - 19) = 0;
      *((void *)v16 - 18) = 0;
      *((void *)v16 - 17) = 0;
      *(_OWORD *)(v16 - 152) = *(_OWORD *)(v15 - 152);
      *((void *)v16 - 17) = *(void *)(v15 - 136);
      *(void *)(v15 - 152) = 0;
      *(void *)(v15 - 144) = 0;
      *(void *)(v15 - 136) = 0;
      long long v20 = *(_OWORD *)(v15 - 128);
      long long v21 = *(_OWORD *)(v15 - 112);
      long long v22 = *(_OWORD *)(v15 - 96);
      *(_OWORD *)(v16 - 83) = *(_OWORD *)(v15 - 83);
      *((_OWORD *)v16 - 7) = v21;
      *((_OWORD *)v16 - 6) = v22;
      *((_OWORD *)v16 - 8) = v20;
      *((void *)v16 - 7) = 0;
      *((void *)v16 - 6) = 0;
      *((void *)v16 - 8) = 0;
      *((_OWORD *)v16 - 4) = *(_OWORD *)(v15 - 64);
      *((void *)v16 - 6) = *(void *)(v15 - 48);
      *(void *)(v15 - 64) = 0;
      *(void *)(v15 - 56) = 0;
      *(void *)(v15 - 48) = 0;
      uint64_t v23 = *(void *)(v15 - 40);
      *((_DWORD *)v16 - 8) = *(_DWORD *)(v15 - 32);
      *((void *)v16 - 5) = v23;
      *((void *)v16 - 2) = 0;
      *((void *)v16 - 1) = 0;
      *((void *)v16 - 3) = 0;
      *(_OWORD *)(v16 - 24) = *(_OWORD *)(v15 - 24);
      *((void *)v16 - 1) = *(void *)(v15 - 8);
      v16 -= 248;
      *(void *)(v15 - 24) = 0;
      *(void *)(v15 - 16) = 0;
      *(void *)(v15 - 8) = 0;
      v15 -= 248;
    }
    while (v15 != v14);
    int64x2_t v24 = *a1;
  }
  uint64_t v25 = v9 + 248;
  a1->i64[0] = (uint64_t)v16;
  a1->i64[1] = (uint64_t)(v9 + 248);
  int64x2_t v29 = v24;
  int64_t v26 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v8[v7];
  unint64_t v30 = v26;
  __n128 v28 = (char *)v24.i64[0];
  sub_B62FCC((uint64_t)&v28);
  return v25;
}

uint64_t sub_B62FCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 248;
    unint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
    unint64_t v5 = *(void **)(i - 64);
    if (v5)
    {
      *(void *)(i - 56) = v5;
      operator delete(v5);
    }
    unsigned int v6 = *(void **)(i - 152);
    if (v6)
    {
      *(void *)(i - 144) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void **)(i - 176);
    if (v7)
    {
      *(void *)(i - 168) = v7;
      operator delete(v7);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned char *sub_B63064(unsigned char *a1, void *a2)
{
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9250;
  strcpy((char *)__p[0], "max_journey_risk_status");
  unint64_t v4 = (uint64_t *)sub_561B0(a2, (uint64_t)__p);
  char v5 = sub_B63218(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v5;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "consider_blocked_journeys");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "allow_different_lines");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[2] = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "allow_different_stop_sequences");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[3] = v8;
  return a1;
}

void sub_B631F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B63218(uint64_t *a1)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v1 = a1;
    switch(*((unsigned char *)a1 + 23))
    {
      case 3:
        if (*(_WORD *)a1 != 28524 || *((unsigned char *)a1 + 2) != 119) {
          goto LABEL_47;
        }
        return 1;
      case 7:
        if (*(_DWORD *)a1 != 1852534389 || *(_DWORD *)((char *)a1 + 3) != 1853321070) {
          goto LABEL_47;
        }
        return 0;
      case 0xA:
        goto LABEL_40;
      case 0x10:
        if (*a1 == 0x6F635F7468676974 && a1[1] == 0x6E6F697463656E6ELL) {
          return 2;
        }
        uint64_t v1 = a1;
        if (*((unsigned char *)a1 + 23) == 10) {
          goto LABEL_40;
        }
        goto LABEL_47;
      default:
        goto LABEL_47;
    }
  }
  uint64_t v3 = a1[1];
  if (v3 == 3)
  {
    if (*(_WORD *)*a1 == 28524 && *(unsigned char *)(*a1 + 2) == 119) {
      return 1;
    }
    uint64_t v3 = a1[1];
  }
  else if (v3 == 7 && *(_DWORD *)*a1 == 1852534389 && *(_DWORD *)(*a1 + 3) == 1853321070)
  {
    return 0;
  }
  if (v3 == 16)
  {
    if (*(void *)*a1 == 0x6F635F7468676974 && *(void *)(*a1 + 8) == 0x6E6F697463656E6ELL) {
      return 2;
    }
    uint64_t v3 = a1[1];
  }
  if (v3 != 10) {
    goto LABEL_47;
  }
  uint64_t v1 = (uint64_t *)*a1;
LABEL_40:
  uint64_t v10 = *v1;
  int v11 = *((unsigned __int16 *)v1 + 4);
  if (v10 != 0x6269736165666E69 || v11 != 25964)
  {
LABEL_47:
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v14 = std::string::append(&v17, "\" provided");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v19 = v14->__r_.__value_.__r.__words[2];
    long long v18 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    uint64_t v16 = (void *)sub_2F404((uint64_t)exception, &v18);
  }
  return 3;
}

void sub_B63490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_B63520(unsigned char *a1, uint64_t a2, void *a3)
{
  uint64_t result = sub_B63064(a1, a3);
  *((void *)result + 1) = a2;
  return result;
}

void sub_B6354C(unsigned __int8 *a1, uint64_t a2)
{
  if (sub_491B28(*((void *)a1 + 1) + 3896) == 2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    while (v4 != v5)
    {
      if (*(_DWORD *)(v4 + 4) != 2 && *(unsigned __int8 *)(v4 + 2) <= *a1)
      {
        if (a1[1]) {
          BOOL v6 = 1;
        }
        else {
          BOOL v6 = *(unsigned char *)v4 == 0;
        }
        if (v6)
        {
          sub_B63640((uint64_t)a1, v4, (uint64_t)v7);
          if (v8)
          {
            sub_B63D8C(v4, v7);
            if (v8) {
              sub_A22020((uint64_t)v7);
            }
          }
        }
      }
      v4 += 296;
    }
  }
}

void sub_B63640(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 200);
  uint64_t v6 = *(void *)(a2 + 208);
  BOOL v7 = (uint64_t *)(a2 + 200);
  if (v5 == v6 || v6 - v5 == 72 && *(unsigned char *)(v5 + 24) == 1)
  {
    *(unsigned char *)(a3 + 296) = 1;
    sub_9F68D4(a3, (long long *)a2);
    return;
  }
  sub_9F68D4((uint64_t)v65, (long long *)a2);
  DWORD1(v65[0]) = 2;
  uint64_t v9 = (void **)*((void *)&v79 + 1);
  uint64_t v10 = (void **)v79;
  while (v9 != v10)
  {
    v9 -= 9;
    sub_9F5F58((uint64_t)&v80, v9);
  }
  *((void *)&v79 + 1) = v10;
  uint64_t v11 = *v7;
  if ((unint64_t)v10 >= v80)
  {
    uint64_t v12 = sub_B55260((void ***)&v79, v11);
  }
  else
  {
    sub_9F6D1C(v10, v11);
    uint64_t v12 = (char *)(v10 + 9);
  }
  *((void *)&v79 + 1) = v12;
  uint64_t v13 = *(void *)(a2 + 200);
  if (0x8E38E38E38E38E39 * ((*(void *)(a2 + 208) - v13) >> 3) < 3)
  {
LABEL_42:
    sub_A29D50((uint64_t)v65);
    LODWORD(v31) = 0x7FFFFFFF;
    if ((void)v79 == *((void *)&v79 + 1))
    {
      int v43 = 0x7FFFFFFF;
      uint64_t v45 = *(void *)(a2 + 200);
      uint64_t v44 = *(void *)(a2 + 208);
      if (v45 == v44) {
        goto LABEL_79;
      }
      goto LABEL_64;
    }
    if (*((void *)&v79 + 1) - (void)v79 == 72 && *(unsigned char *)(v79 + 24) == 1)
    {
      uint64_t v32 = *(void *)(*((void *)&v79 + 1) - 72);
      int v33 = *(_DWORD *)(v32 + 160);
      unint64_t v34 = *(void *)(v32 + 20);
      unsigned int v35 = *(_DWORD *)(v32 + 8);
    }
    else
    {
      uint64_t v36 = *(void *)(*((void *)&v79 + 1) - 72);
      int v33 = *(_DWORD *)(v36 + 160);
      unint64_t v34 = *(void *)(v36 + 20);
      uint64_t v38 = v36 + 4;
      unsigned int v37 = *(_DWORD *)(v36 + 4);
      unsigned int v35 = *(_DWORD *)(v38 + 4);
      if (v33) {
        int v39 = v35;
      }
      else {
        int v39 = v34;
      }
      if (!v33) {
        unsigned int v37 = v35;
      }
      if (v39 == v37)
      {
        uint64_t v40 = sub_A0D24C(&v79, -2 - 0x71C71C71C71C71C7 * ((uint64_t)(*((void *)&v79 + 1) - v79) >> 3));
        unint64_t v41 = *(unsigned int *)(*(void *)v40 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v40 + 8) << 32);
        if (!*(_DWORD *)(*(void *)v40 + 160)) {
          unint64_t v41 = *(void *)(*(void *)v40 + 20);
        }
LABEL_58:
        if ((v41 & 0xFFFFFFFF00000000) >> 32 == 0x7FFFFFFF) {
          int v43 = v41;
        }
        else {
          int v43 = (v41 & 0xFFFFFFFF00000000) >> 32;
        }
        uint64_t v45 = *(void *)(a2 + 200);
        uint64_t v44 = *(void *)(a2 + 208);
        if (v45 == v44) {
          goto LABEL_79;
        }
LABEL_64:
        uint64_t v46 = v44 - v45;
        if (v44 - v45 == 72 && *(unsigned char *)(v45 + 24) == 1)
        {
          uint64_t v47 = *(void *)(v44 - 72);
          int v48 = *(_DWORD *)(v47 + 160);
          uint64_t v49 = *(void *)(v47 + 20);
          int v50 = *(_DWORD *)(v47 + 8);
        }
        else
        {
          uint64_t v51 = *(void *)(v44 - 72);
          int v48 = *(_DWORD *)(v51 + 160);
          uint64_t v49 = *(void *)(v51 + 20);
          uint64_t v53 = v51 + 4;
          int v52 = *(_DWORD *)(v51 + 4);
          int v50 = *(_DWORD *)(v53 + 4);
          if (v48) {
            int v54 = v50;
          }
          else {
            int v54 = v49;
          }
          if (!v48) {
            int v52 = v50;
          }
          if (v54 == v52)
          {
            uint64_t v55 = sub_A0D24C(v7, -2 - 0x71C71C71C71C71C7 * (v46 >> 3));
            if (*(_DWORD *)(*(void *)v55 + 160)) {
              LODWORD(v31) = *(_DWORD *)(*(void *)v55 + 8);
            }
            else {
              uint64_t v31 = *(void *)(*(void *)v55 + 20);
            }
            goto LABEL_79;
          }
        }
        if (v48) {
          LODWORD(v31) = v50;
        }
        else {
          LODWORD(v31) = v49;
        }
LABEL_79:
        DWORD2(v66) = 10 * (v43 - v31);
        *(unsigned char *)(a3 + 296) = 1;
        long long v56 = v69;
        *(_OWORD *)(a3 + 64) = v68;
        *(_OWORD *)(a3 + 80) = v56;
        *(void *)(a3 + 96) = v70;
        long long v57 = v65[1];
        *(_OWORD *)a3 = v65[0];
        *(_OWORD *)(a3 + 16) = v57;
        long long v58 = v67;
        *(_OWORD *)(a3 + 32) = v66;
        *(_OWORD *)(a3 + 48) = v58;
        *(_DWORD *)(a3 + 104) = v71;
        *(_OWORD *)(a3 + 112) = *(_OWORD *)v72;
        *(void *)(a3 + 128) = v73;
        v72[0] = 0;
        v72[1] = 0;
        *(_DWORD *)(a3 + 136) = v74;
        long long v59 = v76;
        *(_OWORD *)(a3 + 144) = v75;
        *(_OWORD *)(a3 + 160) = v59;
        *(_OWORD *)(a3 + 176) = v77;
        *(void *)(a3 + 192) = v78;
        *(_OWORD *)(a3 + 200) = v79;
        *(void *)(a3 + 216) = v80;
        long long v79 = 0uLL;
        unint64_t v80 = 0;
        *(_OWORD *)(a3 + 224) = *(_OWORD *)v81;
        uint64_t v60 = v84;
        *(void *)(a3 + 240) = v82;
        uint64_t v73 = 0;
        v81[0] = 0;
        v81[1] = 0;
        *(_OWORD *)(a3 + 248) = __p;
        *(void *)(a3 + 264) = v60;
        uint64_t v82 = 0;
        long long __p = 0uLL;
        uint64_t v84 = 0;
        *(_OWORD *)(a3 + 272) = *(_OWORD *)v85;
        *(void *)(a3 + 288) = v86;
        v85[0] = 0;
        v85[1] = 0;
        uint64_t v86 = 0;
        goto LABEL_80;
      }
    }
    unint64_t v42 = v35 | ((unint64_t)v35 << 32);
    if (v33) {
      unint64_t v41 = v42;
    }
    else {
      unint64_t v41 = v34;
    }
    goto LABEL_58;
  }
  unsigned int v14 = 4;
  unint64_t v15 = 2;
  while (1)
  {
    if ((void)v79 == *((void *)&v79 + 1))
    {
      LODWORD(v26) = 0x7FFFFFFF;
      goto LABEL_31;
    }
    if (*((void *)&v79 + 1) - (void)v79 == 72 && *(unsigned char *)(v79 + 24) == 1)
    {
      uint64_t v16 = *(void *)(*((void *)&v79 + 1) - 72);
      int v17 = *(_DWORD *)(v16 + 160);
      unint64_t v18 = *(void *)(v16 + 20);
      uint64_t v19 = *(unsigned int *)(v16 + 8);
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(*((void *)&v79 + 1) - 72);
    int v17 = *(_DWORD *)(v20 + 160);
    unint64_t v18 = *(void *)(v20 + 20);
    uint64_t v21 = *(void *)(v20 + 8);
    uint64_t v24 = v20 + 4;
    int v22 = *(_DWORD *)(v20 + 4);
    int v23 = *(_DWORD *)(v24 + 4);
    if (!v17)
    {
      int v23 = v18;
      int v22 = v21;
    }
    if (v23 != v22)
    {
      uint64_t v19 = v21;
LABEL_26:
      unint64_t v27 = v19 | (v19 << 32);
      if (v17) {
        unint64_t v26 = v27;
      }
      else {
        unint64_t v26 = v18;
      }
      if ((v26 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000) {
        goto LABEL_30;
      }
      goto LABEL_31;
    }
    uint64_t v25 = sub_A0D24C(&v79, -2 - 0x71C71C71C71C71C7 * ((uint64_t)(*((void *)&v79 + 1) - v79) >> 3));
    if (*(_DWORD *)(*(void *)v25 + 160)) {
      unint64_t v26 = *(unsigned int *)(*(void *)v25 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v25 + 8) << 32);
    }
    else {
      unint64_t v26 = *(void *)(*(void *)v25 + 20);
    }
    uint64_t v13 = *v7;
    if ((v26 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000) {
LABEL_30:
    }
      v26 >>= 32;
LABEL_31:
    sub_B63F1C(a1, (unsigned int **)(v13 + 72 * (v14 - 3)), (void *)(v13 + 72 * v15), v26, (uint64_t)v87);
    if (!v89) {
      break;
    }
    uint64_t v28 = *((void *)&v79 + 1);
    if (*((void *)&v79 + 1) >= v80)
    {
      int64x2_t v29 = sub_A4CECC((void ***)&v79, (uint64_t)v87);
    }
    else
    {
      sub_9F6D1C(*((void **)&v79 + 1), (uint64_t)v87);
      int64x2_t v29 = (char *)(v28 + 72);
    }
    *((void *)&v79 + 1) = v29;
    if (!v89)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    if ((unint64_t)v29 >= v80)
    {
      unint64_t v30 = sub_A4CECC((void ***)&v79, (uint64_t)v88);
    }
    else
    {
      sub_9F6D1C(v29, (uint64_t)v88);
      unint64_t v30 = v29 + 72;
    }
    *((void *)&v79 + 1) = v30;
    if (v89) {
      sub_B65560(v87);
    }
    unint64_t v15 = v14;
    uint64_t v13 = *(void *)(a2 + 200);
    v14 += 2;
    if (0x8E38E38E38E38E39 * ((*(void *)(a2 + 208) - v13) >> 3) <= v15) {
      goto LABEL_42;
    }
  }
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  if (v85[0])
  {
    v85[1] = v85[0];
    operator delete(v85[0]);
  }
LABEL_80:
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (v81[0])
  {
    v81[1] = v81[0];
    operator delete(v81[0]);
  }
  BOOL v61 = (void **)v79;
  if ((void)v79)
  {
    char v62 = (void **)*((void *)&v79 + 1);
    uint64_t v63 = (void *)v79;
    if (*((void *)&v79 + 1) != (void)v79)
    {
      do
      {
        v62 -= 9;
        sub_9F5F58((uint64_t)&v80, v62);
      }
      while (v62 != v61);
      uint64_t v63 = (void *)v79;
    }
    *((void *)&v79 + 1) = v61;
    operator delete(v63);
  }
  if (SHIBYTE(v73) < 0) {
    operator delete(v72[0]);
  }
}

void sub_B63CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_A1D608((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B63CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_A1D608((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B63CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_A1D608((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B63D00(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

void sub_B63D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_A1D608((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B63D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_A1D608((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B63D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(unsigned char *)(v3 - 104)) {
    sub_B65560((void **)(v3 - 248));
  }
  sub_A1D608((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B63D8C(uint64_t a1, long long *a2)
{
  long long v3 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  v14[5] = v3;
  uint64_t v15 = *(void *)(a1 + 96);
  long long v4 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  uint64_t v14[3] = v5;
  int v16 = *(_DWORD *)(a1 + 104);
  long long v6 = *(_OWORD *)(a1 + 112);
  uint64_t v18 = *(void *)(a1 + 128);
  *(_OWORD *)int v17 = v6;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  int v19 = *(_DWORD *)(a1 + 136);
  long long v7 = *(_OWORD *)(a1 + 176);
  long long v8 = *(_OWORD *)(a1 + 144);
  long long v21 = *(_OWORD *)(a1 + 160);
  long long v22 = v7;
  long long v20 = v8;
  uint64_t v23 = *(void *)(a1 + 192);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)(a1 + 200);
  uint64_t v25 = *(void *)(a1 + 216);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)unint64_t v26 = *(_OWORD *)(a1 + 224);
  uint64_t v9 = *(void *)(a1 + 240);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)uint64_t v28 = *(_OWORD *)(a1 + 248);
  uint64_t v10 = *(void *)(a1 + 264);
  uint64_t v27 = v9;
  uint64_t v29 = v10;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)long long __p = *(_OWORD *)(a1 + 272);
  uint64_t v31 = *(void *)(a1 + 288);
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  sub_B3E498(a1, a2);
  sub_B3E498((uint64_t)a2, v14);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v28[0])
  {
    v28[1] = v28[0];
    operator delete(v28[0]);
  }
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  uint64_t v11 = (void **)v24[0];
  if (v24[0])
  {
    uint64_t v12 = (void **)v24[1];
    uint64_t v13 = v24[0];
    if (v24[1] != v24[0])
    {
      do
      {
        v12 -= 9;
        sub_9F5F58((uint64_t)&v25, v12);
      }
      while (v12 != v11);
      uint64_t v13 = v24[0];
    }
    v24[1] = v11;
    operator delete(v13);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
}

void sub_B63F1C(uint64_t a1@<X0>, unsigned int **a2@<X1>, void *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v219 = 0;
  v220 = 0;
  uint64_t v221 = 0;
  v224 = 0;
  uint64_t v225 = 0;
  v223 = 0;
  char v226 = 1;
  unint64_t v227 = 0x8000000080000000;
  __int16 v228 = 0;
  char v229 = 0;
  uint64_t v208 = 0;
  uint64_t v209 = 0;
  unint64_t v210 = 0;
  unsigned int v213 = 0;
  uint64_t v214 = 0;
  v212 = 0;
  char v215 = 1;
  unint64_t v216 = 0x8000000080000000;
  __int16 v217 = 0;
  char v218 = 0;
  char v222 = 0;
  char v211 = 1;
  *(_OWORD *)v200 = xmmword_20E12E0;
  *(_OWORD *)&v200[16] = xmmword_20EC820;
  v200[17] = 0;
  v200[29] = 0;
  *(_DWORD *)uint64_t v201 = -1;
  *(_OWORD *)&v201[4] = xmmword_20E22B0;
  *(void *)&v201[20] = -1;
  memset(&v201[32], 0, 32);
  *(_OWORD *)unsigned int v202 = 0u;
  *(_DWORD *)&v202[16] = 0x7FFFFFFF;
  long long v204 = 0uLL;
  long long __p = 0;
  char v205 = 1;
  uint64_t v206 = 0x7FFFFFFF7FFFFFFFLL;
  int v207 = 0;
  v220 = sub_B5C228((void **)&v219, (uint64_t)v200);
  if (__p)
  {
    *(void *)&long long v204 = __p;
    operator delete(__p);
  }
  if (*(void *)&v201[56])
  {
    *(void *)unsigned int v202 = *(void *)&v201[56];
    operator delete(*(void **)&v201[56]);
  }
  if (*(void *)&v201[32])
  {
    *(void *)&v201[40] = *(void *)&v201[32];
    operator delete(*(void **)&v201[32]);
  }
  *(void *)v200 = 0x7FFFFFFF00000000;
  *(_DWORD *)&v200[8] = 0x7FFFFFFF;
  *(void *)&long long v7 = 0xFFFFFFFFLL;
  *((void *)&v7 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)&v200[12] = v7;
  long long v8 = v209;
  if ((unint64_t)v209 >= v210)
  {
    uint64_t v10 = sub_A21588(&v208, v200);
  }
  else
  {
    long long v9 = *(_OWORD *)v200;
    *(_OWORD *)(v209 + 12) = *(_OWORD *)&v200[12];
    *(_OWORD *)long long v8 = v9;
    *((_DWORD *)v8 + 40) = 1;
    uint64_t v10 = v8 + 168;
  }
  uint64_t v209 = v10;
  uint64_t v11 = *a2;
  long long v173 = a2[1];
  if (*a2 == v173)
  {
LABEL_197:
    sub_B65504(v200, (uint64_t)&v219, (uint64_t)&v208);
    *(unsigned char *)(a5 + 144) = 1;
    *(_OWORD *)a5 = *(_OWORD *)v200;
    *(void *)(a5 + 16) = *(void *)&v200[16];
    *(_OWORD *)v200 = 0uLL;
    *(unsigned char *)(a5 + 24) = v200[24];
    *(_OWORD *)(a5 + 32) = *(_OWORD *)v201;
    *(void *)&v200[16] = 0;
    *(void *)uint64_t v201 = 0;
    *(void *)&v201[8] = 0;
    *(void *)(a5 + 63) = *(void *)&v201[31];
    uint64_t v143 = *(void *)&v201[16];
    uint64_t v144 = *(void *)&v201[24];
    *(void *)&v201[16] = 0;
    *(void *)(a5 + 48) = v143;
    *(void *)(a5 + 56) = v144;
    *(_OWORD *)(a5 + 72) = *(_OWORD *)&v201[40];
    *(void *)(a5 + 88) = *(void *)&v201[56];
    *(void *)&v201[40] = 0;
    *(void *)&v201[48] = 0;
    *(unsigned char *)(a5 + 96) = v202[0];
    *(_OWORD *)(a5 + 104) = *(_OWORD *)&v202[8];
    *(void *)&v201[56] = 0;
    *(void *)&v202[8] = 0;
    *(void *)&v202[16] = 0;
    long long v145 = __p;
    uint64_t v146 = v204;
    long long __p = 0;
    *(void *)(a5 + 135) = *(void *)((char *)&v204 + 7);
    *(void *)(a5 + 120) = v145;
    *(void *)(a5 + 128) = v146;
    sub_B65560((void **)v200);
    long long v147 = v212;
    if (!v212) {
      goto LABEL_199;
    }
    goto LABEL_198;
  }
  int v176 = (char *)v208;
  uint64_t v185 = v219;
  while (2)
  {
    unsigned int v12 = v11[13];
    uint64_t v13 = (int *)sub_A11094((void *)(*(void *)(a1 + 8) + 4136), *((void *)v11 + 4));
    unsigned int v14 = (unsigned __int16 *)((char *)v13 - *v13);
    if (*v14 >= 9u && (uint64_t v15 = v14[4]) != 0) {
      int v16 = (unsigned int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15));
    }
    else {
      int v16 = 0;
    }
    uint64_t v17 = *(void *)sub_A10764(v16, v12);
    unsigned int v18 = v11[14];
    int v19 = (int *)sub_A11094((void *)(*(void *)(a1 + 8) + 4136), *((void *)v11 + 4));
    long long v20 = (unsigned __int16 *)((char *)v19 - *v19);
    if (*v20 >= 9u && (uint64_t v21 = v20[4]) != 0) {
      long long v22 = (unsigned int *)((char *)v19 + v21 + *(unsigned int *)((char *)v19 + v21));
    }
    else {
      long long v22 = 0;
    }
    uint64_t v23 = *(void *)sub_A10764(v22, v18);
    unsigned int v24 = v11[13];
    uint64_t v25 = (int *)sub_A11094((void *)(*(void *)(a1 + 8) + 4136), *((void *)v11 + 4));
    unint64_t v26 = (unsigned __int16 *)((char *)v25 - *v25);
    unsigned int v27 = *v26;
    if (v27 < 5)
    {
      uint64_t v28 = 0;
      goto LABEL_25;
    }
    if (v26[2])
    {
      uint64_t v28 = (char *)v25 + v26[2] + *(unsigned int *)((char *)v25 + v26[2]);
      if (v27 < 9) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v28 = 0;
      if (v27 < 9) {
        goto LABEL_25;
      }
    }
    uint64_t v142 = v26[4];
    if (v142)
    {
      uint64_t v29 = (unsigned int *)((char *)v25 + v142 + *(unsigned int *)((char *)v25 + v142));
      goto LABEL_26;
    }
LABEL_25:
    uint64_t v29 = 0;
LABEL_26:
    uint64_t v182 = *(void *)&v28[8 * *(unsigned __int8 *)(sub_A10764(v29, v24) + 14) + 4];
    uint64_t v30 = sub_A2AF48(a3, *v11);
    unint64_t v31 = __ROR8__(v17, 32);
    int v33 = *(_DWORD *)(v30 + 4);
    int v32 = *(_DWORD *)(v30 + 8);
    uint64_t v177 = v30;
    unint64_t v175 = v31;
    sub_A1DF34((uint64_t)v193, *(void **)(a1 + 8), v31, 0, 0, 0);
    unint64_t v34 = v196;
    if (v196 >= v197) {
      break;
    }
    long long v180 = v11;
    uint64_t v178 = __ROR8__(v23, 32);
    int v186 = v32 - v33;
    int v35 = 0x7FFFFFFF;
    while (2)
    {
      while (2)
      {
        while (2)
        {
          unint64_t v36 = __ROR8__(*v34, 32);
          sub_A1E9A0((uint64_t)v200, *(void *)(a1 + 8), v36, 0, 0, 0);
          *(void *)&long long v231 = &v233;
          *((void *)&v231 + 1) = 1;
          uint64_t v232 = v178;
          unint64_t v233 = v175;
          v230[0] = &v232;
          v230[1] = 1;
          sub_A1EDFC((uint64_t)v200, (uint64_t)&v231, (uint64_t)v230, &v191);
          unsigned int v37 = v191;
          unint64_t v189 = v192;
          if (v191 == v192) {
            goto LABEL_157;
          }
          unint64_t v190 = HIDWORD(v36);
          uint64_t v181 = 4 * v36;
          unint64_t v187 = v36;
          do
          {
            uint64_t v40 = *v37;
            uint64_t v41 = v37[1];
            if (*(unsigned char *)(a1 + 2)) {
              goto LABEL_50;
            }
            unint64_t v42 = (void *)(*(void *)(a1 + 8) + 4136);
            if (sub_A10E20(v42, v190))
            {
              int v43 = (int *)sub_A1120C(*(void *)(*v42 + 3944), v36);
            }
            else
            {
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_24F7308))
              {
                sub_518C8(0x3B60u, 0x7FCAu);
                dword_24F7300 = v126 | 0x40000000;
                __cxa_guard_release(&qword_24F7308);
              }
              uint64_t v44 = *v42;
              if (dword_24F7300 == v190)
              {
                uint64_t v45 = *(unsigned int **)(*(void *)(v44 + 3976) + 72);
                if (!v45)
                {
                  exception = __cxa_allocate_exception(0x40uLL);
                  sub_5E5C(&v231, "Realtime stop pattern quad data requested on nullptr buffer");
                  long long v161 = (void *)sub_2F404((uint64_t)exception, &v231);
                }
                uint64_t v46 = (int *)((char *)v45 + *v45);
                uint64_t v47 = (unsigned __int16 *)((char *)v46 - *v46);
                if (*v47 >= 5u && (uint64_t v48 = v47[2]) != 0) {
                  uint64_t v49 = (unsigned int *)((char *)v46 + v48 + *(unsigned int *)((char *)v46 + v48));
                }
                else {
                  uint64_t v49 = 0;
                }
                int v43 = (int *)sub_A1139C(v49, v36);
              }
              else
              {
                int v43 = (int *)sub_A11500(v44 + 24, v36, 0, "stop pattern");
              }
            }
            int v50 = (unsigned __int16 *)((char *)v43 - *v43);
            unsigned int v51 = *v50;
            if (v51 < 5)
            {
              int v52 = 0;
LABEL_48:
              uint64_t v53 = 0;
              goto LABEL_49;
            }
            if (v50[2])
            {
              int v52 = (char *)v43 + v50[2] + *(unsigned int *)((char *)v43 + v50[2]);
              if (v51 < 9) {
                goto LABEL_48;
              }
            }
            else
            {
              int v52 = 0;
              if (v51 < 9) {
                goto LABEL_48;
              }
            }
            uint64_t v71 = v50[4];
            if (!v71) {
              goto LABEL_48;
            }
            uint64_t v53 = (unsigned int *)((char *)v43 + v71 + *(unsigned int *)((char *)v43 + v71));
LABEL_49:
            if (v182 != *(void *)&v52[8 * *(unsigned __int8 *)(sub_A10764(v53, v40) + 14) + 4]) {
              goto LABEL_30;
            }
LABEL_50:
            if (*(unsigned char *)(a1 + 3)
              || sub_B4FF24(*(void *)(a1 + 8), *((void *)v180 + 4), v180[13], v180[14], v36, v40, v41))
            {
              *(void *)uint64_t v201 = *(void *)&v200[24] + 16 * v40;
              signed int v54 = *(_DWORD *)(*(void *)v201 + 8) + a4;
              char v55 = v202[0] ? sub_A1F39C(*(void *)(a1 + 8), (uint64_t)v200, v54, 1) : sub_A1F8B4((uint64_t)v200, v54, 1);
              if (v55)
              {
                *(void *)uint64_t v201 = *(void *)&v200[24] + 16 * v41;
                uint64_t v56 = *(void *)&v201[32];
                long long v57 = &v202[8];
                if (!v202[0]) {
                  long long v57 = *(_DWORD **)&v201[32];
                }
                long long v58 = (unsigned int *)(*(void *)&v200[16]
                                     + *(unsigned __int16 *)(*(void *)&v200[16] - (int)**(_DWORD **)&v200[16] + 6));
                int v59 = *v57
                    + v186
                    + *(unsigned int *)((char *)&v58[2 * (*(_DWORD *)(*(void *)&v201[32] + 4) + v41)
                                                   + 1]
                                      + *v58);
                if (v35 == 0x7FFFFFFF || v35 > v59)
                {
                  int v179 = v59;
                  uint64_t v60 = *(void *)&v201[24];
                  if (v202[0]) {
                    int v61 = *(_DWORD *)&v202[4];
                  }
                  else {
                    int v61 = -1;
                  }
                  unsigned int v183 = v61;
                  if (v202[0]) {
                    int v62 = *(_DWORD *)&v202[8];
                  }
                  else {
                    int v62 = 0x7FFFFFFF;
                  }
                  int v184 = v62;
                  uint64_t v63 = (void *)(*(void *)(a1 + 8) + 4136);
                  if (sub_A10E20(v63, v190))
                  {
                    std::string v64 = (int *)sub_A1120C(*(void *)(*v63 + 3944), v36);
                  }
                  else
                  {
                    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                      && __cxa_guard_acquire(&qword_24F7308))
                    {
                      sub_518C8(0x3B60u, 0x7FCAu);
                      dword_24F7300 = v127 | 0x40000000;
                      __cxa_guard_release(&qword_24F7308);
                    }
                    uint64_t v65 = *v63;
                    if (dword_24F7300 == v190)
                    {
                      long long v66 = *(unsigned int **)(*(void *)(v65 + 3976) + 72);
                      if (!v66)
                      {
                        long long v170 = __cxa_allocate_exception(0x40uLL);
                        sub_5E5C(&v231, "Realtime stop pattern quad data requested on nullptr buffer");
                        long long v171 = (void *)sub_2F404((uint64_t)v170, &v231);
                      }
                      long long v67 = (int *)((char *)v66 + *v66);
                      long long v68 = (unsigned __int16 *)((char *)v67 - *v67);
                      if (*v68 >= 5u && (uint64_t v69 = v68[2]) != 0) {
                        uint64_t v70 = (unsigned int *)((char *)v67 + v69 + *(unsigned int *)((char *)v67 + v69));
                      }
                      else {
                        uint64_t v70 = 0;
                      }
                      std::string v64 = (int *)sub_A1139C(v70, v36);
                    }
                    else
                    {
                      std::string v64 = (int *)sub_A11500(v65 + 24, v36, 0, "stop pattern");
                    }
                  }
                  long long v72 = (unsigned __int16 *)((char *)v64 - *v64);
                  if (*v72 >= 9u && (uint64_t v73 = v72[4]) != 0) {
                    int v74 = (unsigned int *)((char *)v64 + v73 + *(unsigned int *)((char *)v64 + v73));
                  }
                  else {
                    int v74 = 0;
                  }
                  *((_DWORD *)v185 + 1) = 10 * *(_DWORD *)(sub_A10764(v74, v40) + 8);
                  uint64_t v75 = *(void *)(a1 + 8);
                  long long v76 = (uint64_t *)(v75 + 4136);
                  if (sub_A10E20((void *)(v75 + 4136), v190))
                  {
                    long long v77 = *(unsigned int **)(*(void *)(*v76 + 3944) + 72);
                    if (!v77)
                    {
                      long long v162 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(&v231, "Incident stop pattern quad data requested on nullptr buffer");
                      long long v163 = (void *)sub_2F404((uint64_t)v162, &v231);
                    }
                    goto LABEL_90;
                  }
                  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                    && __cxa_guard_acquire(&qword_24F7308))
                  {
                    sub_518C8(0x3B60u, 0x7FCAu);
                    dword_24F7300 = v128 | 0x40000000;
                    __cxa_guard_release(&qword_24F7308);
                  }
                  uint64_t v78 = *v76;
                  if (dword_24F7300 == v190)
                  {
                    long long v77 = *(unsigned int **)(*(void *)(v78 + 3976) + 72);
                    if (!v77)
                    {
                      long long v166 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(&v231, "Realtime stop pattern quad data requested on nullptr buffer");
                      long long v167 = (void *)sub_2F404((uint64_t)v166, &v231);
                    }
LABEL_90:
                    long long v79 = (char *)v77 + *v77;
                    unint64_t v80 = &v79[-*(int *)v79];
                    if (*(unsigned __int16 *)v80 >= 5u)
                    {
LABEL_91:
                      uint64_t v81 = *((unsigned __int16 *)v80 + 2);
                      if (v81) {
                        v81 += (uint64_t)&v79[*(unsigned int *)&v79[v81]];
                      }
LABEL_95:
                      uint64_t v82 = (int *)(v81 + v181 + 4 + *(unsigned int *)(v81 + v181 + 4));
                      long long v83 = (unsigned __int16 *)((char *)v82 - *v82);
                      if (*v83 >= 9u && (uint64_t v84 = v83[4]) != 0) {
                        int v85 = (unsigned int *)((char *)v82 + v84 + *(unsigned int *)((char *)v82 + v84));
                      }
                      else {
                        int v85 = 0;
                      }
                      uint64_t v86 = sub_A10764(v85, v40);
                      long long v87 = &v79[-*(int *)v79];
                      if (*(unsigned __int16 *)v87 < 0xBu)
                      {
                        long long v88 = 0;
                        char v89 = (unsigned __int16 *)((char *)v82 - *v82);
                        if (*v89 >= 0x11u) {
                          goto LABEL_103;
                        }
                      }
                      else
                      {
                        long long v88 = (unsigned int *)*((unsigned __int16 *)v87 + 5);
                        if (v88) {
                          long long v88 = (unsigned int *)((char *)v88 + (void)v79
                        }
                                                             + *(unsigned int *)((char *)v88 + (void)v79));
                        char v89 = (unsigned __int16 *)((char *)v82 - *v82);
                        if (*v89 >= 0x11u)
                        {
LABEL_103:
                          uint64_t v90 = v89[8];
                          if (v89[8]) {
                            LODWORD(v90) = *(int *)((char *)v82 + v90);
                          }
LABEL_107:
                          unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v60) >> 2);
                          uint64_t v92 = sub_A108C4(v88, v90+ *(int *)((char *)v82 + v89[2] + *(unsigned int *)((char *)v82 + v89[2])) * v91+ *(unsigned __int8 *)(v86 + 14));
                          if (v92)
                          {
                            uint64_t v93 = __ROR8__(*(void *)v92, 32);
                            int v94 = *(_DWORD *)(v92 + 8);
                          }
                          else
                          {
                            int v94 = 0;
                            uint64_t v93 = 0xFFFFFFFFLL;
                          }
                          *(void *)&long long v231 = v93;
                          DWORD2(v231) = v94;
                          uint64_t v95 = (int *)sub_A11094((void *)(v75 + 4136), v187);
                          uint64_t v96 = (unsigned __int16 *)((char *)v95 - *v95);
                          if (*v96 >= 9u && (uint64_t v97 = v96[4]) != 0) {
                            long long v98 = (unsigned int *)((char *)v95 + v97 + *(unsigned int *)((char *)v95 + v97));
                          }
                          else {
                            long long v98 = 0;
                          }
                          unsigned int v99 = *(unsigned __int16 *)(sub_A10764(v98, v40) + 12);
                          if (v183 == -1) {
                            int v100 = 0x7FFFFFFF;
                          }
                          else {
                            int v100 = v184;
                          }
                          *((void *)v185 + 1) = sub_A0FAA0((uint64_t *)(v75 + 4184), (unsigned int *)&v231, v99, v100);
                          *((_WORD *)v185 + 8) = v101;
                          uint64_t v102 = *(void *)(a1 + 8);
                          char v103 = (uint64_t *)(v102 + 4136);
                          if (sub_A10E20((void *)(v102 + 4136), v190))
                          {
                            uint64_t v104 = *(unsigned int **)(*(void *)(*v103 + 3944) + 72);
                            if (!v104)
                            {
                              long long v164 = __cxa_allocate_exception(0x40uLL);
                              sub_5E5C(&v231, "Incident stop pattern quad data requested on nullptr buffer");
                              long long v165 = (void *)sub_2F404((uint64_t)v164, &v231);
                            }
                            goto LABEL_123;
                          }
                          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                            && __cxa_guard_acquire(&qword_24F7308))
                          {
                            sub_518C8(0x3B60u, 0x7FCAu);
                            dword_24F7300 = v129 | 0x40000000;
                            __cxa_guard_release(&qword_24F7308);
                          }
                          uint64_t v105 = *v103;
                          if (dword_24F7300 == v190)
                          {
                            uint64_t v104 = *(unsigned int **)(*(void *)(v105 + 3976) + 72);
                            if (!v104)
                            {
                              long long v168 = __cxa_allocate_exception(0x40uLL);
                              sub_5E5C(&v231, "Realtime stop pattern quad data requested on nullptr buffer");
                              long long v169 = (void *)sub_2F404((uint64_t)v168, &v231);
                            }
LABEL_123:
                            uint64_t v106 = (char *)v104 + *v104;
                            long long v107 = &v106[-*(int *)v106];
                            if (*(unsigned __int16 *)v107 >= 5u)
                            {
LABEL_124:
                              uint64_t v108 = *((unsigned __int16 *)v107 + 2);
                              if (v108) {
                                v108 += (uint64_t)&v106[*(unsigned int *)&v106[v108]];
                              }
LABEL_128:
                              long long v109 = (int *)(v108 + v181 + 4 + *(unsigned int *)(v108 + v181 + 4));
                              long long v110 = (unsigned __int16 *)((char *)v109 - *v109);
                              if (*v110 >= 9u && (uint64_t v111 = v110[4]) != 0) {
                                uint64_t v112 = (unsigned int *)((char *)v109 + v111 + *(unsigned int *)((char *)v109 + v111));
                              }
                              else {
                                uint64_t v112 = 0;
                              }
                              uint64_t v113 = sub_A10764(v112, v41);
                              long long v114 = &v106[-*(int *)v106];
                              if (*(unsigned __int16 *)v114 < 0xBu)
                              {
                                char v115 = 0;
                                unsigned int v116 = (unsigned __int16 *)((char *)v109 - *v109);
                                if (*v116 >= 0x11u) {
                                  goto LABEL_136;
                                }
                              }
                              else
                              {
                                char v115 = (unsigned int *)*((unsigned __int16 *)v114 + 5);
                                if (v115) {
                                  char v115 = (unsigned int *)((char *)v115
                                }
                                                        + (void)v106
                                                        + *(unsigned int *)((char *)v115 + (void)v106));
                                unsigned int v116 = (unsigned __int16 *)((char *)v109 - *v109);
                                if (*v116 >= 0x11u)
                                {
LABEL_136:
                                  uint64_t v117 = v116[8];
                                  if (v116[8]) {
                                    LODWORD(v117) = *(int *)((char *)v109 + v117);
                                  }
                                  goto LABEL_140;
                                }
                              }
                              LODWORD(v117) = 0;
LABEL_140:
                              uint64_t v118 = sub_A108C4(v115, v117+ *(int *)((char *)v109 + v116[2] + *(unsigned int *)((char *)v109 + v116[2]))* v91+ *(unsigned __int8 *)(v113 + 14));
                              if (v118)
                              {
                                uint64_t v119 = __ROR8__(*(void *)v118, 32);
                                int v120 = *(_DWORD *)(v118 + 8);
                              }
                              else
                              {
                                int v120 = 0;
                                uint64_t v119 = 0xFFFFFFFFLL;
                              }
                              *(void *)&long long v231 = v119;
                              DWORD2(v231) = v120;
                              unint64_t v121 = (int *)sub_A11094((void *)(v102 + 4136), v187);
                              unint64_t v122 = (unsigned __int16 *)((char *)v121 - *v121);
                              if (*v122 >= 9u && (uint64_t v123 = v122[4]) != 0) {
                                uint64_t v124 = (unsigned int *)((char *)v121 + v123 + *(unsigned int *)((char *)v121 + v123));
                              }
                              else {
                                uint64_t v124 = 0;
                              }
                              uint64_t v125 = sub_A10764(v124, v41);
                              *(void *)(v185 + 20) = sub_A0FDF4((uint64_t *)(v102 + 4184), (unsigned int *)&v231, *(unsigned __int16 *)(v125 + 12), v100);
                              *((_WORD *)v185 + 14) = v38;
                              *((_DWORD *)v185 + 13) = v40;
                              *((_DWORD *)v185 + 14) = v41;
                              unint64_t v36 = v187;
                              *((void *)v185 + 4) = v187;
                              *((void *)v185 + 5) = v91 | ((unint64_t)v183 << 32);
                              *((_DWORD *)v185 + 12) = v184;
                              *(void *)(v176 + 12) = v178;
                              *(void *)(v176 + 20) = *(void *)(v177 + 20);
                              int v39 = *((_DWORD *)v185 + 6);
                              *((_DWORD *)v176 + 1) = v39;
                              *((_DWORD *)v176 + 2) = v39 + v186;
                              int v35 = v179;
                              goto LABEL_30;
                            }
                          }
                          else
                          {
                            uint64_t v106 = sub_A10B80(v105 + 24, v187, 0);
                            long long v107 = &v106[-*(int *)v106];
                            if (*(unsigned __int16 *)v107 >= 5u) {
                              goto LABEL_124;
                            }
                          }
                          uint64_t v108 = 0;
                          goto LABEL_128;
                        }
                      }
                      LODWORD(v90) = 0;
                      goto LABEL_107;
                    }
                  }
                  else
                  {
                    long long v79 = sub_A10B80(v78 + 24, v187, 0);
                    unint64_t v80 = &v79[-*(int *)v79];
                    if (*(unsigned __int16 *)v80 >= 5u) {
                      goto LABEL_91;
                    }
                  }
                  uint64_t v81 = 0;
                  goto LABEL_95;
                }
              }
            }
LABEL_30:
            v37 += 2;
          }
          while (v37 != v189);
          unsigned int v37 = v191;
LABEL_157:
          if (v37)
          {
            unint64_t v192 = v37;
            operator delete(v37);
          }
          unint64_t v130 = (unint64_t)v197;
          unint64_t v34 = v196 + 2;
          v196 = v34;
          if (v34 == v197)
          {
            uint64_t v131 = v194 + 2;
            unint64_t v194 = v131;
            if ((unint64_t)v131 >= v195) {
              goto LABEL_191;
            }
            while (1)
            {
              unint64_t v34 = (void *)*v131;
              unint64_t v130 = v131[1];
              if (*v131 != v130) {
                break;
              }
              v131 += 2;
              unint64_t v194 = v131;
              if ((unint64_t)v131 >= v195) {
                goto LABEL_191;
              }
            }
            v196 = (void *)*v131;
            uint64_t v197 = (void *)v130;
            if ((unint64_t)v34 < v130) {
              goto LABEL_172;
            }
LABEL_161:
            if ((unint64_t)v34 >= v130) {
              goto LABEL_191;
            }
            continue;
          }
          break;
        }
        if (v34 >= v197) {
          goto LABEL_161;
        }
LABEL_172:
        if (!v199)
        {
          uint64_t v132 = v193[0];
          uint64_t v133 = *v34;
          uint64_t v134 = *(void *)(v193[0] + 4136);
          if (sub_C259C0(v134 + 3896))
          {
            if (*(void *)(v134 + 3944))
            {
              uint64_t v135 = (void *)(v132 + 4136);
              uint64_t v136 = __ROR8__(v133, 32);
              if (!sub_A10E20(v135, SHIDWORD(v136)))
              {
                int v137 = *(void **)(*v135 + 3944);
                *(void *)v200 = v136;
                if (sub_A1E760(v137, (uint64_t *)v200))
                {
                  unint64_t v34 = v196;
                  goto LABEL_170;
                }
              }
            }
          }
        }
        if (!v198)
        {
          unsigned int v138 = sub_C2599C(v193[0] + 3896);
          unint64_t v34 = v196;
          if (v138 >= *((unsigned __int8 *)v196 + 14))
          {
            if (v198) {
              goto LABEL_188;
            }
            char v139 = sub_51D60((unsigned __int8 *)(v193[0] + 3896));
            unint64_t v34 = v196;
            if ((v139 & 1) != 0 || (*((unsigned char *)v196 + 15) & 1) == 0) {
              goto LABEL_188;
            }
          }
LABEL_170:
          v34 += 2;
          v196 = v34;
          if (v34 == v197)
          {
            char v140 = v194 + 2;
            unint64_t v194 = v140;
            if ((unint64_t)v140 >= v195) {
              goto LABEL_188;
            }
            while (1)
            {
              unint64_t v34 = (void *)*v140;
              unint64_t v141 = v140[1];
              if (*v140 != v141) {
                break;
              }
              v140 += 2;
              unint64_t v194 = v140;
              if ((unint64_t)v140 >= v195) {
                goto LABEL_191;
              }
            }
            v196 = (void *)*v140;
            uint64_t v197 = (void *)v141;
            if ((unint64_t)v34 >= v141)
            {
LABEL_188:
              if (v34 < v197) {
                continue;
              }
              goto LABEL_191;
            }
          }
          else if (v34 >= v197)
          {
            goto LABEL_188;
          }
          goto LABEL_172;
        }
        break;
      }
      unint64_t v34 = v196;
      if (v196 < v197) {
        continue;
      }
      break;
    }
LABEL_191:
    if (v35 != 0x7FFFFFFF)
    {
      uint64_t v11 = v180 + 42;
      if (v180 + 42 == v173) {
        goto LABEL_197;
      }
      continue;
    }
    break;
  }
  *(void *)(a5 + 144) = 0;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  long long v147 = v212;
  if (v212)
  {
LABEL_198:
    unsigned int v213 = v147;
    operator delete(v147);
  }
LABEL_199:
  long long v148 = (char *)v208;
  if (v208)
  {
    long long v149 = v209;
    long long v150 = v208;
    if (v209 != v208)
    {
      do
      {
        if (!*((_DWORD *)v149 - 2))
        {
          long long v151 = (void *)*((void *)v149 - 6);
          if (v151)
          {
            *((void *)v149 - 5) = v151;
            operator delete(v151);
          }
          long long v152 = (void *)*((void *)v149 - 10);
          if (v152)
          {
            *((void *)v149 - 9) = v152;
            operator delete(v152);
          }
          long long v153 = (void *)*((void *)v149 - 13);
          if (v153)
          {
            *((void *)v149 - 12) = v153;
            operator delete(v153);
          }
        }
        v149 -= 168;
      }
      while (v149 != v148);
      long long v150 = v208;
    }
    uint64_t v209 = v148;
    operator delete(v150);
  }
  if (v223)
  {
    v224 = v223;
    operator delete(v223);
  }
  long long v154 = v219;
  if (v219)
  {
    long long v155 = v220;
    long long v156 = v219;
    if (v220 != v219)
    {
      do
      {
        if (!*((_DWORD *)v155 - 2))
        {
          long long v157 = (void *)*((void *)v155 - 6);
          if (v157)
          {
            *((void *)v155 - 5) = v157;
            operator delete(v157);
          }
          long long v158 = (void *)*((void *)v155 - 10);
          if (v158)
          {
            *((void *)v155 - 9) = v158;
            operator delete(v158);
          }
          long long v159 = (void *)*((void *)v155 - 13);
          if (v159)
          {
            *((void *)v155 - 12) = v159;
            operator delete(v159);
          }
        }
        v155 -= 168;
      }
      while (v155 != v154);
      long long v156 = v219;
    }
    v220 = v154;
    operator delete(v156);
  }
}

void sub_B65268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  __cxa_guard_abort(&qword_24F7308);
  if (__p)
  {
    operator delete(__p);
    uint64_t v71 = a69;
    if (!a69)
    {
LABEL_3:
      long long v72 = a65;
      if (!a65) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v71 = a69;
    if (!a69) {
      goto LABEL_3;
    }
  }
  operator delete(v71);
  long long v72 = a65;
  if (!a65)
  {
LABEL_4:
    uint64_t v73 = *(void **)(v69 - 200);
    if (!v73) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_9:
  uint64_t v75 = a66;
  long long v76 = v72;
  if ((void *)a66 != v72)
  {
    do
    {
      if (!*(_DWORD *)(v75 - 8))
      {
        long long v77 = *(void **)(v75 - 48);
        if (v77)
        {
          *(void *)(v75 - 40) = v77;
          operator delete(v77);
        }
        uint64_t v78 = *(void **)(v75 - 80);
        if (v78)
        {
          *(void *)(v75 - 72) = v78;
          operator delete(v78);
        }
        long long v79 = *(void **)(v75 - 104);
        if (v79)
        {
          *(void *)(v75 - 96) = v79;
          operator delete(v79);
        }
      }
      v75 -= 168;
    }
    while ((void *)v75 != v72);
    long long v76 = a65;
  }
  operator delete(v76);
  uint64_t v73 = *(void **)(v69 - 200);
  if (!v73)
  {
LABEL_5:
    int v74 = *(char **)(v69 - 232);
    if (!v74) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  *(void *)(v69 - 192) = v73;
  operator delete(v73);
  int v74 = *(char **)(v69 - 232);
  if (!v74) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_22:
  unint64_t v80 = *(char **)(v69 - 224);
  uint64_t v81 = v74;
  if (v80 != v74)
  {
    do
    {
      if (!*((_DWORD *)v80 - 2))
      {
        uint64_t v82 = (void *)*((void *)v80 - 6);
        if (v82)
        {
          *((void *)v80 - 5) = v82;
          operator delete(v82);
        }
        long long v83 = (void *)*((void *)v80 - 10);
        if (v83)
        {
          *((void *)v80 - 9) = v83;
          operator delete(v83);
        }
        uint64_t v84 = (void *)*((void *)v80 - 13);
        if (v84)
        {
          *((void *)v80 - 12) = v84;
          operator delete(v84);
        }
      }
      v80 -= 168;
    }
    while (v80 != v74);
    uint64_t v81 = *(char **)(v69 - 232);
  }
  *(void *)(v69 - 224) = v74;
  operator delete(v81);
  _Unwind_Resume(a1);
}

void *sub_B65504(void *a1, uint64_t a2, uint64_t a3)
{
  long long v5 = sub_9F6D1C(a1, a2);
  sub_9F6D1C(v5 + 9, a3);
  return a1;
}

void sub_B6553C(_Unwind_Exception *a1)
{
  long long v3 = (void *)v1[4];
  if (v3)
  {
    v1[5] = (uint64_t)v3;
    operator delete(v3);
  }
  sub_20AE1AC(v1);
  _Unwind_Resume(a1);
}

void **sub_B65560(void **a1)
{
  uint64_t v2 = a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  long long v3 = (char *)a1[9];
  if (v3)
  {
    long long v4 = (char *)a1[10];
    long long v5 = a1[9];
    if (v4 != v3)
    {
      do
      {
        if (!*((_DWORD *)v4 - 2))
        {
          long long v6 = (void *)*((void *)v4 - 6);
          if (v6)
          {
            *((void *)v4 - 5) = v6;
            operator delete(v6);
          }
          long long v7 = (void *)*((void *)v4 - 10);
          if (v7)
          {
            *((void *)v4 - 9) = v7;
            operator delete(v7);
          }
          long long v8 = (void *)*((void *)v4 - 13);
          if (v8)
          {
            *((void *)v4 - 12) = v8;
            operator delete(v8);
          }
        }
        v4 -= 168;
      }
      while (v4 != v3);
      long long v5 = a1[9];
    }
    a1[10] = v3;
    operator delete(v5);
  }
  long long v9 = a1[4];
  if (v9)
  {
    a1[5] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (char *)*a1;
  if (*a1)
  {
    uint64_t v11 = (char *)a1[1];
    unsigned int v12 = *a1;
    if (v11 != v10)
    {
      do
      {
        if (!*((_DWORD *)v11 - 2))
        {
          uint64_t v13 = (void *)*((void *)v11 - 6);
          if (v13)
          {
            *((void *)v11 - 5) = v13;
            operator delete(v13);
          }
          unsigned int v14 = (void *)*((void *)v11 - 10);
          if (v14)
          {
            *((void *)v11 - 9) = v14;
            operator delete(v14);
          }
          uint64_t v15 = (void *)*((void *)v11 - 13);
          if (v15)
          {
            *((void *)v11 - 12) = v15;
            operator delete(v15);
          }
        }
        v11 -= 168;
      }
      while (v11 != v10);
      unsigned int v12 = *a1;
    }
    a1[1] = v10;
    operator delete(v12);
  }
  return a1;
}

uint64_t sub_B6568C()
{
  return v0;
}

unsigned char *sub_B656A0(unsigned char *a1, void *a2)
{
  char v19 = 19;
  strcpy(__p, "traversal_algorithm");
  uint64_t v3 = sub_561B0(a2, (uint64_t)__p);
  if (*(char *)(v3 + 23) < 0)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    if (v5 != 11)
    {
      if (v5 != 19) {
        goto LABEL_30;
      }
      long long v4 = *(uint64_t **)v3;
      goto LABEL_8;
    }
    if (**(void **)v3 != 0x6F625F7265776F6CLL || *(void *)(*(void *)v3 + 3) != 0x646E756F625F7265)
    {
LABEL_30:
      exception = __cxa_allocate_exception(0x40uLL);
      std::operator+<char>();
      uint64_t v15 = std::string::append(&v20, "\" provided in configuration");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      std::string::size_type v22 = v15->__r_.__value_.__r.__words[2];
      long long v21 = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      uint64_t v17 = (void *)sub_2F404((uint64_t)exception, &v21);
    }
  }
  else
  {
    if (*(unsigned char *)(v3 + 23) != 11)
    {
      long long v4 = (uint64_t *)v3;
      if (*(unsigned char *)(v3 + 23) != 19) {
        goto LABEL_30;
      }
LABEL_8:
      uint64_t v6 = *v4;
      uint64_t v7 = v4[1];
      uint64_t v8 = *(uint64_t *)((char *)v4 + 11);
      if (v6 != 0x78655F7463617865 || v7 != 0x745F646574636570 || v8 != 0x656D69745F646574) {
        goto LABEL_30;
      }
      *a1 = 1;
      if (v19 < 0) {
        goto LABEL_25;
      }
      return a1;
    }
    if (*(void *)v3 != 0x6F625F7265776F6CLL || *(void *)(v3 + 3) != 0x646E756F625F7265) {
      goto LABEL_30;
    }
  }
  *a1 = 0;
  if ((v19 & 0x80000000) == 0) {
    return a1;
  }
LABEL_25:
  operator delete(*(void **)__p);
  return a1;
}

void sub_B658AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a14 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

unsigned char *sub_B65940(unsigned char *a1, uint64_t a2, void *a3)
{
  uint64_t result = sub_B656A0(a1, a3);
  *((void *)result + 1) = a2;
  return result;
}

uint64_t sub_B6596C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v2 != v3)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t result = sub_B65A28(v4, v2);
      uint64_t v6 = *(unsigned char **)(v2 + 200);
      uint64_t v7 = *(unsigned char **)(v2 + 208);
      if (v6 == v7)
      {
        unsigned __int8 v5 = 0;
      }
      else
      {
        unsigned __int8 v5 = 0;
        do
        {
          if (!v6[24])
          {
            unint64_t v8 = *(unsigned __int8 *)(*(void *)v6 + 156);
            if (v8 >= 7) {
              char v9 = 0;
            }
            else {
              char v9 = 0x3030202020100uLL >> (8 * v8);
            }
            unsigned int v10 = v9 & 3;
            if (v10 > v5) {
              unsigned __int8 v5 = v10;
            }
          }
          v6 += 72;
        }
        while (v6 != v7);
      }
      *(unsigned char *)(v2 + 2) = v5;
      v2 += 296;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_B65A28(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 200);
  uint64_t v3 = *(void *)(a2 + 208);
  if (v2 != v3)
  {
    uint64_t v5 = result;
    if (v3 - v2 != 72 || *(unsigned char *)(v2 + 24) != 1)
    {
      do
      {
        if (!*(unsigned char *)(v2 + 24))
        {
          uint64_t v7 = *(void *)v2;
          if (*(unsigned char *)(v2 + 69))
          {
            uint64_t result = sub_B65E2C(v5, (uint64_t *)v2);
          }
          else
          {
            uint64_t v8 = *(void *)(v2 + 8);
            uint64_t v9 = *(void *)v2;
            if (v7 == v8)
            {
LABEL_15:
              uint64_t result = 6;
            }
            else
            {
              while (*(unsigned char *)(v9 + 144) == 4)
              {
                v9 += 168;
                if (v9 == v8) {
                  goto LABEL_15;
                }
              }
              uint64_t result = 1;
            }
          }
          unsigned int v6 = *(unsigned __int8 *)(v7 + 156);
          if (v6 <= result) {
            LOBYTE(v6) = result;
          }
          *(unsigned char *)(v7 + 156) = v6;
        }
        v2 += 72;
      }
      while (v2 != v3);
      uint64_t v11 = *(unsigned int ***)(a2 + 200);
      unsigned int v10 = *(unsigned int ***)(a2 + 208);
      if (v10 != v11)
      {
        while (*((unsigned char *)v11 + 24) || !*((unsigned char *)v11 + 69))
        {
          v11 += 9;
          if (v11 == v10) {
            return result;
          }
        }
        for (uint64_t i = v11; v10 != v11; uint64_t i = v11)
        {
          v11 += 9;
          if (v10 == v11)
          {
LABEL_24:
            uint64_t v11 = v10;
          }
          else
          {
            unsigned int v12 = v11;
            while (*((unsigned char *)v12 + 24) || !*((unsigned char *)v12 + 69))
            {
              v12 += 9;
              v11 += 9;
              if (v12 == v10) {
                goto LABEL_24;
              }
            }
            uint64_t v13 = v12;
            if (v12 != v10)
            {
              uint64_t result = sub_B65BA4(v5, (uint64_t **)&i, &v13);
              uint64_t v11 = v13;
              unsigned int v10 = *(unsigned int ***)(a2 + 208);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_B65BA4(uint64_t a1, uint64_t **a2, unsigned int ***a3)
{
  unsigned int v6 = *a2;
  uint64_t v7 = **a2;
  int v8 = *(_DWORD *)(v7 + 160);
  unint64_t v9 = *(void *)(v7 + 20);
  unint64_t v10 = *(unsigned int *)(v7 + 8) | ((unint64_t)*(unsigned int *)(v7 + 8) << 32);
  if (!v8) {
    unint64_t v10 = v9;
  }
  if (HIDWORD(v10) != 0x7FFFFFFF) {
    LODWORD(v10) = HIDWORD(v10);
  }
  uint64_t v11 = (int *)v6[9];
  int v12 = v11[40];
  uint64_t v13 = v11 + 5;
  unsigned int v14 = v11 + 2;
  uint64_t v15 = v11 + 1;
  BOOL v16 = v12 == 0;
  if (v12) {
    uint64_t v17 = v14;
  }
  else {
    uint64_t v17 = v13;
  }
  int v18 = *v17;
  if (v16) {
    uint64_t v15 = v14;
  }
  uint64_t result = (v10 + v18 - *v15);
  std::string v20 = (unsigned int **)(v6 + 18);
  uint64_t v49 = v20;
  if (result == 0x7FFFFFFF) {
    goto LABEL_13;
  }
  while (v20 != *a3)
  {
    uint64_t v48 = (int **)(v20 + 9);
    uint64_t result = sub_B65F50(a1, &v49, &v48, result);
    std::string v20 = v49 + 18;
    v49 += 18;
    if (result == 0x7FFFFFFF) {
      goto LABEL_13;
    }
  }
  __int16 v38 = *v20;
  unsigned int v39 = v38[40];
  uint64_t v40 = *((void *)v38 + 1);
  uint64_t v41 = v38[1];
  BOOL v42 = v39 == 0;
  if (v39) {
    uint64_t v43 = v41 | (v41 << 32);
  }
  else {
    uint64_t v43 = v40;
  }
  if (!v42) {
    LODWORD(v41) = 0;
  }
  if (HIDWORD(v43) != 0x7FFFFFFF) {
    LODWORD(v43) = HIDWORD(v43);
  }
  int v44 = (int)v41 / -10;
  int v45 = (int)v41 % 10;
  char v46 = (int)v41 < 0 ? -5 : 5;
  if ((int)result > (int)(v43
                         + v44
                         + (((-103 * (char)(v46 + v45)) >> 15) & 1)
                         + ((-103 * (char)(v46 + v45)) >> 10)))
  {
LABEL_13:
    uint64_t v21 = **a2;
    if (*(_DWORD *)(v21 + 160)) {
      unint64_t v22 = *(unsigned int *)(v21 + 8) | ((unint64_t)*(unsigned int *)(v21 + 8) << 32);
    }
    else {
      unint64_t v22 = *(void *)(v21 + 20);
    }
    unint64_t v23 = HIDWORD(v22);
    int v24 = 10 * (HIDWORD(v22) - v22);
    if (v23 == 0x7FFFFFFF) {
      int v25 = 0;
    }
    else {
      int v25 = v24;
    }
    unint64_t v26 = *a3;
    unsigned int v27 = **a3;
    if (v27[40]) {
      unint64_t v28 = v27[1] | ((unint64_t)v27[1] << 32);
    }
    else {
      unint64_t v28 = *((void *)v27 + 1);
    }
    unint64_t v29 = HIDWORD(v28);
    int v30 = 10 * (v28 - HIDWORD(v28));
    if (v29 == 0x7FFFFFFF) {
      int v30 = 0;
    }
    if (v25 < 1 || v25 <= v30)
    {
      if (v30 < 1 || v30 <= v25)
      {
        for (uint64_t i = (unsigned int **)(*a2 + 18); i < v26; *((unsigned char *)v34 + 156) = v36)
        {
          int v35 = *i;
          i += 18;
          unint64_t v34 = v35;
          unsigned int v36 = *((unsigned __int8 *)v35 + 156);
          if (v36 <= 2) {
            LOBYTE(v36) = 2;
          }
        }
      }
      else
      {
        unsigned int v47 = *((unsigned __int8 *)v27 + 156);
        if (v47 <= 3) {
          LOBYTE(v47) = 3;
        }
        *((unsigned char *)v27 + 156) = v47;
      }
    }
    else
    {
      unsigned int v37 = *(unsigned __int8 *)(v21 + 156);
      if (v37 <= 4) {
        LOBYTE(v37) = 4;
      }
      *(unsigned char *)(v21 + 156) = v37;
    }
  }
  return result;
}

uint64_t sub_B65E2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  sub_A1DD94((void *)(*(void *)(a1 + 8) + 4136), *(void *)(*a2 + 32), *(_DWORD *)(*a2 + 40), (uint64_t)&__p);
  uint64_t v4 = (unsigned int *)__p;
  uint64_t v5 = v15;
  while (v4 != v5)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    char v7 = sub_51D60((unsigned __int8 *)(*(void *)(v6 + 4184) + 3896));
    uint64_t v8 = *(void *)(v6 + 4184);
    if (sub_C259D4(v8 + 3896))
    {
      if (*(void *)(v8 + 3960))
      {
        unint64_t v9 = sub_367060(*(void *)(*(void *)(v6 + 4184) + 3960), v4[1] | ((unint64_t)*v4 << 32), v4[2], v7);
        if (v9)
        {
          if (*((unsigned char *)v9 + 32) == 1)
          {
            uint64_t v10 = 6;
            uint64_t v11 = (unsigned int *)__p;
            if (!__p) {
              return v10;
            }
            goto LABEL_17;
          }
        }
      }
    }
    v4 += 3;
  }
  if (*(unsigned char *)(v3 + 29) == 1 || *(unsigned char *)(v3 + 17) == 1) {
    uint64_t v10 = 5;
  }
  else {
    uint64_t v10 = 1;
  }
  uint64_t v11 = (unsigned int *)__p;
  if (__p)
  {
LABEL_17:
    uint64_t v15 = v11;
    operator delete(v11);
  }
  return v10;
}

void sub_B65F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B65F50(uint64_t a1, unsigned int ***a2, int ***a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (*(unsigned char *)a1 != 1)
  {
    if (!*(unsigned char *)a1)
    {
      uint64_t v6 = **a2;
      BOOL v7 = v6[40] == 0;
      unsigned int v8 = v6[1];
      unsigned int v9 = v6[2];
      if (v6[40]) {
        int v10 = 0;
      }
      else {
        int v10 = v6[1];
      }
      int v11 = v10 / 10;
      unsigned int v12 = v6[5];
      if (v7) {
        unsigned int v8 = v9;
      }
      else {
        unsigned int v12 = v9;
      }
      char v13 = v10 % 10;
      if (v10 < 0) {
        char v14 = -5;
      }
      else {
        char v14 = 5;
      }
      unsigned int v15 = (((103 * (char)(v14 + v13)) >> 15) & 1) + ((103 * (char)(v14 + v13)) >> 10);
      BOOL v16 = **a3;
      int v17 = v16[40];
      int v18 = v16 + 5;
      char v19 = v16 + 2;
      std::string v20 = v16 + 1;
      BOOL v21 = v17 == 0;
      if (v17) {
        unint64_t v22 = v19;
      }
      else {
        unint64_t v22 = v18;
      }
      int v23 = *v22;
      if (v21) {
        std::string v20 = v19;
      }
      return v11 + a4 + v12 + v23 + v15 - (v8 + *v20);
    }
    return v4;
  }
  int v96 = sub_491B28(*(void *)(a1 + 8) + 3896);
  sub_C259A4(*(void *)(a1 + 8) + 3896, 2);
  int v25 = **a2;
  uint64_t v97 = (*a2)[1];
  if (v25 != v97)
  {
    signed int v102 = v4;
    uint64_t v4 = 0x7FFFFFFFLL;
    while (1)
    {
      unsigned int v26 = v25[13];
      unsigned int v27 = (int *)sub_A11094((void *)(*(void *)(a1 + 8) + 4136), *((void *)v25 + 4));
      unint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
      if (*v28 >= 9u && (uint64_t v29 = v28[4]) != 0) {
        int v30 = (unsigned int *)((char *)v27 + v29 + *(unsigned int *)((char *)v27 + v29));
      }
      else {
        int v30 = 0;
      }
      uint64_t v31 = *(void *)sub_A10764(v30, v26);
      unsigned int v32 = v25[14];
      int v33 = (int *)sub_A11094((void *)(*(void *)(a1 + 8) + 4136), *((void *)v25 + 4));
      unint64_t v34 = (unsigned __int16 *)((char *)v33 - *v33);
      if (*v34 >= 9u && (uint64_t v35 = v34[4]) != 0) {
        unsigned int v36 = (unsigned int *)((char *)v33 + v35 + *(unsigned int *)((char *)v33 + v35));
      }
      else {
        unsigned int v36 = 0;
      }
      uint64_t v37 = *(void *)sub_A10764(v36, v32);
      unsigned int v38 = v25[13];
      unsigned int v39 = (int *)sub_A11094((void *)(*(void *)(a1 + 8) + 4136), *((void *)v25 + 4));
      uint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
      unsigned int v41 = *v40;
      if (v41 < 5) {
        break;
      }
      if (v40[2])
      {
        BOOL v42 = (char *)v39 + v40[2] + *(unsigned int *)((char *)v39 + v40[2]);
        if (v41 < 9) {
          goto LABEL_34;
        }
      }
      else
      {
        BOOL v42 = 0;
        if (v41 < 9) {
          goto LABEL_34;
        }
      }
      uint64_t v92 = v40[4];
      if (!v92) {
        goto LABEL_34;
      }
      uint64_t v43 = (unsigned int *)((char *)v39 + v92 + *(unsigned int *)((char *)v39 + v92));
LABEL_35:
      uint64_t v44 = sub_A10764(v43, v38);
      unint64_t v45 = __ROR8__(v31, 32);
      uint64_t v46 = *(void *)&v42[8 * *(unsigned __int8 *)(v44 + 14) + 4];
      unint64_t v99 = v45;
      sub_A1DF34((uint64_t)&v112, *(void **)(a1 + 8), v45, 0, 0, 0);
      unsigned int v47 = v115;
      if (v115 >= v116) {
        goto LABEL_20;
      }
      uint64_t v98 = __ROR8__(v37, 32);
      __int16 v101 = v25;
      while (2)
      {
        while (2)
        {
          while (2)
          {
            unint64_t v48 = __ROR8__(*v47, 32);
            sub_A1E9A0((uint64_t)v105, *(void *)(a1 + 8), v48, 0, 0, 0);
            uint64_t v121 = v98;
            unint64_t v122 = v99;
            *(void *)&long long v120 = &v122;
            *((void *)&v120 + 1) = 1;
            v119[0] = &v121;
            v119[1] = 1;
            sub_A1EDFC((uint64_t)v105, (uint64_t)&v120, (uint64_t)v119, &v103);
            int v50 = v103;
            uint64_t v49 = v104;
            if (v103 == v104) {
              goto LABEL_82;
            }
            do
            {
              uint64_t v52 = *v50;
              uint64_t v51 = v50[1];
              uint64_t v53 = (void *)(*(void *)(a1 + 8) + 4136);
              if (sub_A10E20(v53, SHIDWORD(v48)))
              {
                signed int v54 = (int *)sub_A1120C(*(void *)(*v53 + 3944), v48);
              }
              else
              {
                if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
                  && __cxa_guard_acquire(&qword_24F7308))
                {
                  sub_518C8(0x3B60u, 0x7FCAu);
                  dword_24F7300 = v79 | 0x40000000;
                  __cxa_guard_release(&qword_24F7308);
                }
                uint64_t v55 = *v53;
                if (dword_24F7300 == HIDWORD(v48))
                {
                  uint64_t v56 = *(unsigned int **)(*(void *)(v55 + 3976) + 72);
                  if (!v56)
                  {
                    exception = __cxa_allocate_exception(0x40uLL);
                    sub_5E5C(&v120, "Realtime stop pattern quad data requested on nullptr buffer");
                    uint64_t v95 = (void *)sub_2F404((uint64_t)exception, &v120);
                  }
                  long long v57 = (int *)((char *)v56 + *v56);
                  long long v58 = (unsigned __int16 *)((char *)v57 - *v57);
                  if (*v58 >= 5u && (uint64_t v59 = v58[2]) != 0) {
                    uint64_t v60 = (unsigned int *)((char *)v57 + v59 + *(unsigned int *)((char *)v57 + v59));
                  }
                  else {
                    uint64_t v60 = 0;
                  }
                  signed int v54 = (int *)sub_A1139C(v60, v48);
                }
                else
                {
                  signed int v54 = (int *)sub_A11500(v55 + 24, v48, 0, "stop pattern");
                }
              }
              int v61 = (unsigned __int16 *)((char *)v54 - *v54);
              unsigned int v62 = *v61;
              if (v62 < 5)
              {
                uint64_t v63 = 0;
                goto LABEL_56;
              }
              if (v61[2])
              {
                uint64_t v63 = (char *)v54 + v61[2] + *(unsigned int *)((char *)v54 + v61[2]);
                if (v62 < 9) {
                  goto LABEL_56;
                }
              }
              else
              {
                uint64_t v63 = 0;
                if (v62 < 9) {
                  goto LABEL_56;
                }
              }
              uint64_t v66 = v61[4];
              if (v66)
              {
                std::string v64 = (unsigned int *)((char *)v54 + v66 + *(unsigned int *)((char *)v54 + v66));
                goto LABEL_57;
              }
LABEL_56:
              std::string v64 = 0;
LABEL_57:
              if (v46 == *(void *)&v63[8 * *(unsigned __int8 *)(sub_A10764(v64, v52) + 14) + 4])
              {
                uint64_t v108 = v107 + 16 * v52;
                if (v110 ? sub_A1F39C(*(void *)(a1 + 8), (uint64_t)v105, v102, 1) : sub_A1F8B4((uint64_t)v105, v102, 1))
                {
                  uint64_t v108 = v107 + 16 * v51;
                  long long v67 = (int *)&v111;
                  if (!v110) {
                    long long v67 = v109;
                  }
                  int v68 = *v67;
                  uint64_t v69 = (unsigned int *)((char *)v106 + *(unsigned __int16 *)((char *)v106 - *v106 + 6));
                  int v70 = *(unsigned int *)((char *)&v69[2 * (v109[1] + v51) + 1] + *v69);
                  uint64_t v71 = sub_A1D7E0(*a3, *v101);
                  int v72 = *(_DWORD *)(v71 + 160);
                  BOOL v73 = v72 == 0;
                  if (v72) {
                    int v74 = (int *)(v71 + 8);
                  }
                  else {
                    int v74 = (int *)(v71 + 20);
                  }
                  int v75 = *v74;
                  if (v73) {
                    long long v76 = (_DWORD *)(v71 + 8);
                  }
                  else {
                    long long v76 = (_DWORD *)(v71 + 4);
                  }
                  int v77 = v70 + v68 + v75 - *v76;
                  if ((int)v4 > v77 || v4 == 0x7FFFFFFF) {
                    uint64_t v4 = v77;
                  }
                  else {
                    uint64_t v4 = v4;
                  }
                }
              }
              v50 += 2;
            }
            while (v50 != v49);
            int v50 = v103;
LABEL_82:
            int v25 = v101;
            if (v50)
            {
              uint64_t v104 = v50;
              operator delete(v50);
            }
            unint64_t v80 = (unint64_t)v116;
            unsigned int v47 = v115 + 2;
            char v115 = v47;
            if (v47 == v116)
            {
              uint64_t v81 = v113 + 2;
              uint64_t v113 = v81;
              if ((unint64_t)v81 >= v114) {
                goto LABEL_20;
              }
              while (1)
              {
                unsigned int v47 = (void *)*v81;
                unint64_t v80 = v81[1];
                if (*v81 != v80) {
                  break;
                }
                v81 += 2;
                uint64_t v113 = v81;
                if ((unint64_t)v81 >= v114) {
                  goto LABEL_20;
                }
              }
              char v115 = (void *)*v81;
              unsigned int v116 = (void *)v80;
              if ((unint64_t)v47 < v80) {
                goto LABEL_97;
              }
LABEL_86:
              if ((unint64_t)v47 >= v80) {
                goto LABEL_20;
              }
              continue;
            }
            break;
          }
          if (v47 >= v116) {
            goto LABEL_86;
          }
LABEL_97:
          if (!v118)
          {
            uint64_t v82 = v112;
            uint64_t v83 = *v47;
            uint64_t v84 = *(void *)(v112 + 4136);
            if (sub_C259C0(v84 + 3896))
            {
              if (*(void *)(v84 + 3944))
              {
                int v85 = (void *)(v82 + 4136);
                uint64_t v86 = __ROR8__(v83, 32);
                if (!sub_A10E20(v85, SHIDWORD(v86)))
                {
                  long long v87 = *(void **)(*v85 + 3944);
                  v105[0] = v86;
                  if (sub_A1E760(v87, v105))
                  {
                    unsigned int v47 = v115;
                    goto LABEL_95;
                  }
                }
              }
            }
          }
          if (!v117)
          {
            unsigned int v88 = sub_C2599C(v112 + 3896);
            unsigned int v47 = v115;
            if (v88 >= *((unsigned __int8 *)v115 + 14))
            {
              if (v117) {
                goto LABEL_113;
              }
              char v89 = sub_51D60((unsigned __int8 *)(v112 + 3896));
              unsigned int v47 = v115;
              if ((v89 & 1) != 0 || (*((unsigned char *)v115 + 15) & 1) == 0) {
                goto LABEL_113;
              }
            }
LABEL_95:
            v47 += 2;
            char v115 = v47;
            if (v47 == v116)
            {
              uint64_t v90 = v113 + 2;
              uint64_t v113 = v90;
              if ((unint64_t)v90 >= v114) {
                goto LABEL_113;
              }
              while (1)
              {
                unsigned int v47 = (void *)*v90;
                unint64_t v91 = v90[1];
                if (*v90 != v91) {
                  break;
                }
                v90 += 2;
                uint64_t v113 = v90;
                if ((unint64_t)v90 >= v114) {
                  goto LABEL_20;
                }
              }
              char v115 = (void *)*v90;
              unsigned int v116 = (void *)v91;
              if ((unint64_t)v47 >= v91)
              {
LABEL_113:
                if (v47 < v116) {
                  continue;
                }
                goto LABEL_20;
              }
            }
            else if (v47 >= v116)
            {
              goto LABEL_113;
            }
            goto LABEL_97;
          }
          break;
        }
        unsigned int v47 = v115;
        if (v115 < v116) {
          continue;
        }
        break;
      }
LABEL_20:
      v25 += 42;
      if (v25 == v97) {
        goto LABEL_121;
      }
    }
    BOOL v42 = 0;
LABEL_34:
    uint64_t v43 = 0;
    goto LABEL_35;
  }
  uint64_t v4 = 0x7FFFFFFFLL;
LABEL_121:
  sub_C259A4(*(void *)(a1 + 8) + 3896, v96);
  return v4;
}

void sub_B66740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_B667A8(uint64_t a1, void *a2)
{
  __p[23] = 4;
  strcpy(__p, "name");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  uint64_t v5 = sub_B68AA0(&xmmword_25DFB90, v4);
  if (!v5) {
    sub_5AE8("unordered_map::at: key not found");
  }
  char v6 = *((unsigned char *)v5 + 40);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)a1 = v6;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 64) = 0;
  __p[23] = 6;
  strcpy(__p, "weight");
  double v7 = sub_5C7E8(a2, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  __p[23] = 19;
  strcpy(__p, "membership_function");
  uint64_t v8 = sub_561B0(a2, (uint64_t)__p);
  if (*(char *)(v8 + 23) < 0)
  {
    sub_4200(__dst, *(void **)v8, *(void *)(v8 + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)v8;
    uint64_t v28 = *(void *)(v8 + 16);
    *(_OWORD *)long long __dst = v9;
  }
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    int v10 = HIBYTE(v28);
    if ((v28 & 0x8000000000000000) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    int v10 = HIBYTE(v28);
    if ((v28 & 0x8000000000000000) == 0)
    {
LABEL_11:
      if (v10 != 8)
      {
        if (v10 != 9) {
          goto LABEL_47;
        }
        int v11 = __dst;
        goto LABEL_19;
      }
      if (__dst[0] != (void *)0x6E61697373756167) {
        goto LABEL_47;
      }
LABEL_28:
      __p[23] = 6;
      strcpy(__p, "lambda");
      double v15 = sub_5C7E8(a2, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      __p[23] = 7;
      strcpy(__p, "epsilon");
      double v16 = sub_5C7E8(a2, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      __p[23] = 3;
      strcpy(__p, "chi");
      double v17 = sub_5C7E8(a2, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      double v18 = log(v17);
      *(void *)long long __p = off_243D688;
      *(double *)&__p[8] = v16 * v16;
      *(double *)&__p[16] = v18;
      int v30 = (double *)__p;
      sub_B68DF8(__p, (void *)(a1 + 8));
      if (v30 == (double *)__p)
      {
        (*(void (**)(unsigned char *))(*(void *)__p + 32))(__p);
      }
      else if (v30)
      {
        (*(void (**)(void))(*(void *)v30 + 40))();
      }
      BOOL v21 = (double *)operator new(0x20uLL);
      *(void *)BOOL v21 = off_243D718;
      v21[1] = v7;
      _OWORD v21[2] = v15;
      v21[3] = sqrt(-(v16 * v16) / v18);
      int v30 = v21;
      sub_B68DF8(__p, (void *)(a1 + 40));
      char v19 = v30;
      if (v30 != (double *)__p) {
        goto LABEL_39;
      }
LABEL_45:
      (*(void (**)(unsigned char *))(*(void *)__p + 32))(__p);
      if ((SHIBYTE(v28) & 0x80000000) == 0) {
        return a1;
      }
LABEL_46:
      operator delete(__dst[0]);
      return a1;
    }
  }
  if (__dst[1] == &dword_8 && *(void *)__dst[0] == 0x6E61697373756167) {
    goto LABEL_28;
  }
  if (__dst[1] != (char *)&dword_8 + 1) {
    goto LABEL_47;
  }
  int v11 = (void **)__dst[0];
LABEL_19:
  unsigned int v12 = *v11;
  int v13 = *((unsigned __int8 *)v11 + 8);
  if (v12 != (void *)0x6F74656C676E6973 || v13 != 110)
  {
LABEL_47:
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    int v23 = std::string::append(&v26, "\" provided in configuration");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)long long __p = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    int v25 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
  }
  *(void *)long long __p = off_243D798;
  int v30 = (double *)__p;
  sub_B68DF8(__p, (void *)(a1 + 8));
  if (v30 == (double *)__p)
  {
    (*(void (**)(unsigned char *))(*(void *)__p + 32))(__p);
  }
  else if (v30)
  {
    (*(void (**)(void))(*(void *)v30 + 40))();
  }
  *(void *)long long __p = off_243D818;
  *(double *)&__p[8] = v7;
  int v30 = (double *)__p;
  sub_B68DF8(__p, (void *)(a1 + 40));
  char v19 = v30;
  if (v30 == (double *)__p) {
    goto LABEL_45;
  }
LABEL_39:
  if (v19) {
    (*(void (**)(double *))(*(void *)v19 + 40))(v19);
  }
  if (SHIBYTE(v28) < 0) {
    goto LABEL_46;
  }
  return a1;
}

void sub_B66D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_B66E2C(v28);
  sub_B66E2C(v29);
  _Unwind_Resume(a1);
}

void sub_B66E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_B66E2C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t sub_B66EBC(uint64_t a1, void *a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = 0;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "incompatible_mode_dominance_factor");
  double v4 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 16) = v4;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93E0;
  strcpy((char *)__p[0], "compare_invalid_criteria_with_default_value");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 24) = v5;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20E12D0;
  strcpy((char *)__p[0], "enable_domination_within_fill_in_group");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 25) = v6;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "influencing_journey_types");
  double v7 = (uint64_t *)sub_5C4AC(a2, (uint64_t)__p);
  uint64_t v8 = v7;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    uint64_t v10 = *v8;
    uint64_t v9 = v8[1];
    if (v10 == v9) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v10 = *v7;
    uint64_t v9 = v7[1];
    if (*v7 == v9) {
      goto LABEL_13;
    }
  }
  do
  {
    if (*(_DWORD *)(v10 + 8))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    *(_DWORD *)a1 |= 1 << sub_B679E0(*(void **)v10);
    v10 += 16;
  }
  while (v10 != v9);
LABEL_13:
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "scored_journey_types");
  int v11 = (uint64_t *)sub_5C4AC(a2, (uint64_t)__p);
  unsigned int v12 = v11;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    if (v14 == v13) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v14 = *v11;
    uint64_t v13 = v11[1];
    if (*v11 == v13) {
      goto LABEL_19;
    }
  }
  do
  {
    if (*(_DWORD *)(v14 + 8))
    {
      unint64_t v45 = __cxa_allocate_exception(8uLL);
      *unint64_t v45 = &off_23FDF58;
    }
    *(_DWORD *)(a1 + 4) |= 1 << sub_B679E0(*(void **)v14);
    v14 += 16;
  }
  while (v14 != v13);
LABEL_19:
  *(void *)uint64_t v51 = operator new(0x20uLL);
  *(_OWORD *)&v51[8] = xmmword_20B91C0;
  strcpy(*(char **)v51, "domination_degree_s_norm");
  uint64_t v15 = sub_561B0(a2, (uint64_t)v51);
  if (*(char *)(v15 + 23) < 0)
  {
    uint64_t v20 = *(void *)(v15 + 8);
    switch(v20)
    {
      case 3:
        if (**(_WORD **)v15 == 24941 && *(unsigned char *)(*(void *)v15 + 2) == 120) {
          goto LABEL_93;
        }
        break;
      case 12:
        uint64_t v17 = *(void *)v15;
        goto LABEL_50;
      case 17:
        BOOL v21 = **(void **)v15 == 0x6C696261626F7270 && *(void *)(*(void *)v15 + 8) == 0x75735F6369747369;
        if (v21 && *(unsigned char *)(*(void *)v15 + 16) == 109) {
          goto LABEL_42;
        }
        break;
    }
LABEL_98:
    unsigned int v47 = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    unint64_t v48 = std::string::append(&v52, "\" provided in configuration");
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    __p[2] = (void *)v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    int v50 = (void *)sub_2F404((uint64_t)v47, (long long *)__p);
  }
  int v16 = *(unsigned __int8 *)(v15 + 23);
  if (v16 == 3)
  {
    if (*(_WORD *)v15 != 24941 || *(unsigned char *)(v15 + 2) != 120) {
      goto LABEL_98;
    }
LABEL_93:
    *(unsigned char *)(a1 + 8) = 0;
    if ((v51[23] & 0x80000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  uint64_t v17 = v15;
  if (v16 != 12)
  {
    if (v16 != 17) {
      goto LABEL_98;
    }
    BOOL v18 = *(void *)v15 == 0x6C696261626F7270 && *(void *)(v15 + 8) == 0x75735F6369747369;
    if (!v18 || *(unsigned char *)(v15 + 16) != 109) {
      goto LABEL_98;
    }
LABEL_42:
    *(unsigned char *)(a1 + 8) = 1;
    if ((v51[23] & 0x80000000) != 0) {
      goto LABEL_56;
    }
    goto LABEL_57;
  }
LABEL_50:
  uint64_t v24 = *(void *)v17;
  int v25 = *(_DWORD *)(v17 + 8);
  if (v24 != 0x6E696574736E6965 || v25 != 1836413791) {
    goto LABEL_98;
  }
  *(unsigned char *)(a1 + 8) = 2;
  if ((v51[23] & 0x80000000) != 0) {
LABEL_56:
  }
    operator delete(*(void **)v51);
LABEL_57:
  v51[23] = 8;
  strcpy(v51, "criteria");
  unsigned int v27 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v51);
  memset(&v52, 0, sizeof(v52));
  sub_B69408((uint64_t *)&v52, (v27[1] - *v27) >> 4);
  uint64_t v28 = *v27;
  uint64_t v29 = v27[1];
  if (*v27 != v29)
  {
    std::string::size_type size = (unsigned char *)v52.__r_.__value_.__l.__size_;
    do
    {
      if (*(_DWORD *)(v28 + 8) != 2)
      {
        uint64_t v46 = __cxa_allocate_exception(8uLL);
        *uint64_t v46 = &off_23FDF58;
      }
      sub_B667A8((uint64_t)__p, *(void **)v28);
      uint64_t v31 = sub_B69890((uint64_t *)&v52, size, (uint64_t)__p);
      if (v56 == v55)
      {
        (*(void (**)(void *))(v55[0] + 32))(v55);
        unsigned int v32 = v54;
        if (v54 != &__p[1]) {
          goto LABEL_68;
        }
      }
      else
      {
        if (v56) {
          (*(void (**)(void))(*v56 + 40))();
        }
        unsigned int v32 = v54;
        if (v54 != &__p[1])
        {
LABEL_68:
          if (v32) {
            (*((void (**)(void **))*v32 + 5))(v32);
          }
          goto LABEL_60;
        }
      }
      (*((void (**)(void **))__p[1] + 4))(&__p[1]);
LABEL_60:
      std::string::size_type size = (unsigned char *)(v31 + 72);
      v28 += 16;
    }
    while (v28 != v29);
  }
  __n128 v33 = sub_B6A6EC((void **)(a1 + 32), (__n128 *)&v52);
  std::string::size_type v34 = v52.__r_.__value_.__r.__words[0];
  if (!v52.__r_.__value_.__r.__words[0]) {
    goto LABEL_85;
  }
  uint64_t v35 = (void *)v52.__r_.__value_.__r.__words[0];
  if (v52.__r_.__value_.__l.__size_ == v52.__r_.__value_.__r.__words[0]) {
    goto LABEL_84;
  }
  unsigned int v36 = (void *)(v52.__r_.__value_.__l.__size_ - 32);
  std::string::size_type v37 = v52.__r_.__value_.__l.__size_ - 64;
  do
  {
    unsigned int v39 = (void *)v36[3];
    if (v36 == v39)
    {
      (*(void (**)(void *, __n128))(*v36 + 32))(v36, v33);
      uint64_t v40 = v36 - 4;
      unsigned int v41 = (void *)*(v36 - 1);
      if (v36 - 4 == v41) {
        goto LABEL_73;
      }
    }
    else
    {
      if (v39) {
        (*(void (**)(void *, __n128))(*v39 + 40))(v39, v33);
      }
      uint64_t v40 = v36 - 4;
      unsigned int v41 = (void *)*(v36 - 1);
      if (v36 - 4 == v41)
      {
LABEL_73:
        (*(void (**)(void *))(*v40 + 32))(v40);
        goto LABEL_74;
      }
    }
    if (v41) {
      (*(void (**)(void *, __n128))(*v41 + 40))(v41, v33);
    }
LABEL_74:
    unsigned int v38 = v36 - 5;
    v36 -= 9;
    v37 -= 72;
  }
  while (v38 != (void *)v34);
  uint64_t v35 = (void *)v52.__r_.__value_.__r.__words[0];
LABEL_84:
  v52.__r_.__value_.__l.__size_ = v34;
  operator delete(v35);
LABEL_85:
  if ((v51[23] & 0x80000000) != 0) {
    operator delete(*(void **)v51);
  }
  return a1;
}

void sub_B6772C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    sub_B67C24(v32);
    _Unwind_Resume(a1);
  }
  sub_B67C24(v32);
  _Unwind_Resume(a1);
}

uint64_t sub_B679E0(void *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v4 = a1[1];
    if (v4 != 4 || *(_DWORD *)*a1 != 1852399981)
    {
      if (v4 == 6)
      {
        if (*(_DWORD *)*a1 == 1819044198 && *(_WORD *)(*a1 + 4) == 28265) {
          return 1;
        }
        uint64_t v4 = a1[1];
      }
      if (v4 != 7) {
        goto LABEL_38;
      }
      uint64_t v3 = (int *)*a1;
      if (*(_DWORD *)*a1 != 1819044198 || *(_DWORD *)(*a1 + 3) != 1852386668)
      {
        if (a1[1] != 7) {
          goto LABEL_38;
        }
LABEL_24:
        int v7 = *v3;
        int v8 = *(int *)((char *)v3 + 3);
        if (v7 != 1819044198 || v8 != 1852399468) {
          goto LABEL_38;
        }
      }
      return 1;
    }
    return 0;
  }
  int v1 = *((unsigned __int8 *)a1 + 23);
  if (v1 == 4)
  {
    if (*(_DWORD *)a1 != 1852399981) {
      goto LABEL_38;
    }
    return 0;
  }
  if (v1 != 6)
  {
    if (v1 != 7) {
      goto LABEL_38;
    }
    if (*(_DWORD *)a1 != 1819044198 || *(_DWORD *)((char *)a1 + 3) != 1852386668)
    {
      uint64_t v3 = (int *)a1;
      goto LABEL_24;
    }
    return 1;
  }
  if (*(_DWORD *)a1 != 1819044198 || *((_WORD *)a1 + 2) != 28265)
  {
LABEL_38:
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v13 = std::string::append(&v16, "\" provided in configuration");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v18 = v13->__r_.__value_.__r.__words[2];
    long long v17 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    uint64_t v15 = (void *)sub_2F404((uint64_t)exception, &v17);
  }
  return 1;
}

void sub_B67BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **sub_B67C24(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (!*a1) {
    return a1;
  }
  uint64_t v3 = (char *)a1[1];
  uint64_t v4 = *a1;
  if (v3 == v2) {
    goto LABEL_15;
  }
  BOOL v5 = v3 - 32;
  BOOL v6 = v3 - 64;
  do
  {
    int v8 = (char *)*((void *)v5 + 3);
    if (v5 == v8)
    {
      (*(void (**)(char *))(*(void *)v5 + 32))(v5);
      uint64_t v9 = v5 - 32;
      uint64_t v10 = (char *)*((void *)v5 - 1);
      if (v5 - 32 == v10) {
        goto LABEL_4;
      }
    }
    else
    {
      if (v8) {
        (*(void (**)(char *))(*(void *)v8 + 40))(v8);
      }
      uint64_t v9 = v5 - 32;
      uint64_t v10 = (char *)*((void *)v5 - 1);
      if (v5 - 32 == v10)
      {
LABEL_4:
        (*(void (**)(char *))(*(void *)v9 + 32))(v9);
        goto LABEL_5;
      }
    }
    if (v10) {
      (*(void (**)(char *))(*(void *)v10 + 40))(v10);
    }
LABEL_5:
    int v7 = v5 - 40;
    v5 -= 72;
    v6 -= 72;
  }
  while (v7 != v2);
  uint64_t v4 = *a1;
LABEL_15:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

void sub_B67D70(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 184);
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = v3;
  sub_B67DA8(a1, v2, &v5, &v4);
}

void sub_B67DA8(uint64_t a1, char a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v29 = sub_B6A85C(a1, a3, a4);
  int v30 = v8;
  unint64_t v9 = *a3;
  unint64_t v10 = *a4;
  if (*a4 > (unint64_t)*a3)
  {
    while (1)
    {
      if (((*(_DWORD *)(a1 + 4) >> *(unsigned char *)(v9 + 9)) & 1) == 0) {
        goto LABEL_4;
      }
      unint64_t v11 = *a3;
      double v12 = 0.0;
      if (v10 > *a3) {
        break;
      }
LABEL_3:
      *(double *)(v9 + 192) = 1.0 - v12;
LABEL_4:
      v9 += 296;
      if (v9 >= v10) {
        return;
      }
    }
    while (1)
    {
      double v13 = v12;
      if (v9 != v11 && ((*(_DWORD *)a1 >> *(unsigned char *)(v11 + 9)) & 1) != 0)
      {
        if (*(unsigned char *)(a1 + 25)) {
          break;
        }
        int v20 = *(_DWORD *)(v9 + 12);
        if (v20 == -1) {
          break;
        }
        int v21 = *(_DWORD *)(v11 + 12);
        if (v21 == -1 || v20 != v21) {
          break;
        }
      }
LABEL_8:
      v11 += 296;
      unint64_t v10 = *a4;
      if (v11 >= *a4) {
        goto LABEL_3;
      }
    }
    double v27 = 0.0;
    double v28 = 0.0;
    double v26 = 0.0;
    long long v14 = *(unsigned __int8 **)(a1 + 32);
    uint64_t v15 = *(unsigned __int8 **)(a1 + 40);
    if (v14 == v15)
    {
      double v16 = 0.0;
      if (0.0 - 0.0 >= 0.0) {
        double v17 = 0.0 - 0.0;
      }
      else {
        double v17 = 0.0;
      }
      uint64_t v18 = *(unsigned __int8 *)(v11 + 96);
      double v19 = 1.0;
      if (!*(unsigned char *)(v11 + 96)) {
        goto LABEL_30;
      }
    }
    else
    {
      do
      {
        sub_B68020(a1, (uint64_t)&v29, a2, v11, (long long *)v9, v14, &v28, &v27, &v26);
        v14 += 72;
      }
      while (v14 != v15);
      double v16 = v28;
      if (v26 - v27 - v28 >= 0.0) {
        double v17 = v26 - v27 - v28;
      }
      else {
        double v17 = 0.0;
      }
      uint64_t v18 = *(unsigned __int8 *)(v11 + 96);
      double v19 = 1.0;
      if (!*(unsigned char *)(v11 + 96))
      {
LABEL_30:
        double v12 = 0.0;
        double v22 = 0.0;
        if (v16 > v17) {
          double v22 = (v16 - v17) / v16;
        }
        if (v22 >= 0.0) {
          double v23 = v22;
        }
        else {
          double v23 = 0.0;
        }
        if (v23 > 1.0) {
          double v23 = 1.0;
        }
        double v24 = v19 * v23;
        int v25 = *(unsigned __int8 *)(a1 + 8);
        if (v25 == 2)
        {
          double v12 = (v13 + v24) / (v13 * v24 + 1.0);
        }
        else if (v25 == 1)
        {
          double v12 = v13 + v24 - v13 * v24;
        }
        else if (!*(unsigned char *)(a1 + 8))
        {
          if (v13 >= v24) {
            double v12 = v13;
          }
          else {
            double v12 = v24;
          }
        }
        goto LABEL_8;
      }
    }
    if (*(void *)(v9 + 96) && (v18 & ~*(void *)(v9 + 96)) != 0) {
      double v19 = *(double *)(a1 + 16);
    }
    goto LABEL_30;
  }
}

void sub_B68020(uint64_t a1, uint64_t a2, char a3, uint64_t a4, long long *a5, unsigned __int8 *a6, double *a7, double *a8, double *a9)
{
  if (*((void *)a6 + 4) && *(unsigned char *)(a2 + *a6))
  {
    sub_9F68D4((uint64_t)v25, a5);
    double v16 = sub_B68238(a1, a3, a4, (uint64_t)v25, *a6, v15);
    if (__p)
    {
      unsigned int v36 = __p;
      operator delete(__p);
    }
    if (v33)
    {
      std::string::size_type v34 = v33;
      operator delete(v33);
    }
    if (v31)
    {
      unsigned int v32 = v31;
      operator delete(v31);
    }
    double v17 = (void **)v28;
    if (v28)
    {
      uint64_t v18 = v29;
      double v19 = v28;
      if (v29 != v28)
      {
        do
        {
          v18 -= 9;
          sub_9F5F58((uint64_t)&v30, v18);
        }
        while (v18 != v17);
        double v19 = v28;
      }
      uint64_t v29 = v17;
      operator delete(v19);
    }
    if (v27 < 0) {
      operator delete(v26);
    }
    double v37 = v16;
    uint64_t v20 = *((void *)a6 + 8);
    if (v20)
    {
      double v21 = (*(double (**)(uint64_t, double *))(*(void *)v20 + 48))(v20, &v37);
      double v22 = 0.0;
      if (v16 < 0.0)
      {
        double v37 = v16;
        uint64_t v23 = *((void *)a6 + 4);
        if (!v23) {
          goto LABEL_23;
        }
        double v22 = 1.0 - (*(double (**)(uint64_t, double *, double))(*(void *)v23 + 48))(v23, &v37, 0.0);
      }
      *a7 = *a7 + v21 * v22;
      double v37 = v16;
      uint64_t v24 = *((void *)a6 + 4);
      if (v24)
      {
        *a8 = v21 * (*(double (**)(uint64_t, double *))(*(void *)v24 + 48))(v24, &v37) + *a8;
        *a9 = v21 + *a9;
        return;
      }
    }
LABEL_23:
    sub_29F82C();
  }
}

void sub_B68224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_B68238(uint64_t a1, char a2, uint64_t a3, uint64_t a4, unsigned int a5, double a6)
{
  if (a5 > 0xB)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v14, "Requested to evaluate unknown criterion in fuzzy dominance scoring algorithm");
    double v13 = (void *)sub_2F404((uint64_t)exception, &v14);
  }
  double v9 = sub_B68318(a6, a1, a2, a3, a5);
  return v9 - sub_B68318(v9, v10, a2, a4, a5);
}

void sub_B682E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_B68318(double a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  switch(a5)
  {
    case 0:
      return -(double)*(int *)(a4 + 20);
    case 1:
      return (double)*(int *)(a4 + 32);
    case 2:
      if (a3) {
        return -(double)*(int *)(a4 + 20);
      }
      else {
        return (double)*(int *)(a4 + 32);
      }
    case 3:
      int v8 = 214748364;
      int v9 = *(_DWORD *)(a4 + 32);
      if (v9 == 0x7FFFFFFF || (int v10 = *(_DWORD *)(a4 + 20), v10 == 0x7FFFFFFF))
      {
        char v11 = 7;
LABEL_14:
        char v12 = 5;
        return (double)(int)(v8
                           + (((103 * (char)(v12 + v11)) >> 15) & 1)
                           + ((103 * (char)(v12 + v11)) >> 10));
      }
      char v11 = 0;
      int v8 = v9 - v10;
      if (((v9 - v10) & 0x80000000) == 0) {
        goto LABEL_14;
      }
      char v12 = -5;
      return (double)(int)(v8 + (((103 * (char)(v12 + v11)) >> 15) & 1)
                              + ((103 * (char)(v12 + v11)) >> 10));
    case 4:
      int v7 = *(_DWORD *)(a4 + 48);
      goto LABEL_19;
    case 5:
      int v7 = *(_DWORD *)(a4 + 60);
      goto LABEL_19;
    case 6:
      int v7 = *(_DWORD *)(a4 + 72);
LABEL_19:
      int v13 = v7 / 10;
      int v14 = v7 % 10;
      if (v7 < 0) {
        char v15 = -5;
      }
      else {
        char v15 = 5;
      }
      return (double)(int)(v13
                         + (((103 * (char)(v15 + v14)) >> 15) & 1)
                         + ((103 * (char)(v15 + v14)) >> 10));
    case 7:
      LODWORD(a1) = *(_DWORD *)(a4 + 80);
      return (double)*(unint64_t *)&a1;
    case 8:
      LODWORD(a1) = *(_DWORD *)(a4 + 84);
      return (double)*(unint64_t *)&a1;
    case 9:
      LODWORD(a1) = *(_DWORD *)(a4 + 88);
      return (double)*(unint64_t *)&a1;
    case 10:
      int v16 = *(_DWORD *)(a4 + 104);
      double result = 0.0;
      if (v16 != 0x7FFFFFFF)
      {
        uint64_t v17 = *(unsigned __int8 *)(a4 + 135);
        if ((v17 & 0x80u) != 0) {
          uint64_t v17 = *(void *)(a4 + 120);
        }
        double result = (double)v16;
        if (!v17) {
          return 0.0;
        }
      }
      return result;
    case 11:
      unsigned int v6 = *(_DWORD *)(a4 + 144);
      double result = (double)v6;
      if (v6 == -1) {
        return 0.0;
      }
      return result;
    case 12:
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v22, "Requested to evaluate illegal criterion in fuzzy dominance scoring algorithm");
      double v21 = (void *)sub_2F404((uint64_t)exception, &v22);
    default:
      uint64_t v18 = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v22, "Requested to evaluate unknown criterion in fuzzy dominance scoring algorithm");
      double v19 = (void *)sub_2F404((uint64_t)v18, &v22);
  }
}

void sub_B685C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_B6862C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    int v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      int v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            int v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          int v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  int v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)int v25 = 0;
  *((void *)v25 + 1) = v10;
  double v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)double v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  v25[40] = *(unsigned char *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      uint64_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v30 = *v29;
  *uint64_t v29 = v42[0];
LABEL_92:
  int v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_B68A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B68A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_B68AA0(void *a1, uint64_t a2)
{
  char v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    int v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        char v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          double result = 0;
          int v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        double result = 0;
        int v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void sub_B68CD4()
{
}

__n128 sub_B68CE8(uint64_t a1)
{
  char v2 = (char *)operator new(0x18uLL);
  *(void *)char v2 = off_243D688;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_B68D34(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_243D688;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_B68D64(uint64_t a1, double *a2)
{
  return exp(*a2 * *a2 * (*(double *)(a1 + 16) / *(double *)(a1 + 8)));
}

uint64_t sub_B68D7C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N3msl6common11fuzzy_logic18GaussianMembershipE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N3msl6common11fuzzy_logic18GaussianMembershipE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N3msl6common11fuzzy_logic18GaussianMembershipE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N3msl6common11fuzzy_logic18GaussianMembershipE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B68DEC()
{
}

void *sub_B68DF8(void *result, void *a2)
{
  if (a2 != result)
  {
    unint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_B69084(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_58CC(a1);
}

void sub_B69094()
{
}

__n128 sub_B690A8(uint64_t a1)
{
  char v2 = (char *)operator new(0x20uLL);
  *(void *)char v2 = off_243D718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_B690FC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_243D718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

long double sub_B69134(uint64_t a1, double *a2)
{
  double v2 = *(double *)(a1 + 8);
  return v2 * pow((fabs(*a2) + *(double *)(a1 + 24)) / *(double *)(a1 + 24), *(long double *)(a1 + 16));
}

uint64_t sub_B69170(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N3msl6common11fuzzy_logic21ExponentialLeakWeightE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N3msl6common11fuzzy_logic21ExponentialLeakWeightE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N3msl6common11fuzzy_logic21ExponentialLeakWeightE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N3msl6common11fuzzy_logic21ExponentialLeakWeightE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B691E0()
{
}

void sub_B691F0()
{
}

void *sub_B69204()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_243D798;
  return result;
}

void sub_B6923C(uint64_t a1, void *a2)
{
  *a2 = off_243D798;
}

double sub_B69264(uint64_t a1, double *a2)
{
  double result = 0.0;
  if (*a2 == 0.0) {
    return 1.0;
  }
  return result;
}

uint64_t sub_B6927C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N3msl6common11fuzzy_logic19SingletonMembershipE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N3msl6common11fuzzy_logic19SingletonMembershipE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N3msl6common11fuzzy_logic19SingletonMembershipE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N3msl6common11fuzzy_logic19SingletonMembershipE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B692EC()
{
}

void sub_B692FC()
{
}

void *sub_B69310(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_243D818;
  result[1] = v3;
  return result;
}

uint64_t sub_B69358(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_243D818;
  a2[1] = v2;
  return result;
}

double sub_B69384(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_B6938C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N3msl6common11fuzzy_logic14ConstantWeightE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N3msl6common11fuzzy_logic14ConstantWeightE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N3msl6common11fuzzy_logic14ConstantWeightE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N3msl6common11fuzzy_logic14ConstantWeightE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B693FC()
{
}

void sub_B69408(uint64_t *a1, unint64_t a2)
{
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_2E00();
  }
  uint64_t v3 = a1[1] - *a1;
  char v14 = a1 + 2;
  uint64_t v4 = 72 * a2;
  long long __p = operator new(72 * a2);
  unint64_t v11 = (char *)__p + v3;
  uint8x8_t v12 = (char *)__p + v3;
  int v13 = (char *)__p + v4;
  sub_B695D4(a1, &__p);
  unint64_t v5 = v11;
  while (1)
  {
    unint64_t v6 = v12;
    if (v12 == v5) {
      break;
    }
    v12 -= 72;
    int8x8_t v7 = (char *)*((void *)v6 - 1);
    if (v7 == v6 - 32)
    {
      (*(void (**)(char *))(*((void *)v6 - 4) + 32))(v6 - 32);
      unint64_t v8 = v6 - 64;
      uint8x8_t v9 = (char *)*((void *)v6 - 5);
      if (v9 == v6 - 64) {
        goto LABEL_4;
      }
LABEL_12:
      if (v9) {
        (*(void (**)(char *))(*(void *)v9 + 40))(v9);
      }
    }
    else
    {
      if (v7) {
        (*(void (**)(char *))(*(void *)v7 + 40))(v7);
      }
      unint64_t v8 = v6 - 64;
      uint8x8_t v9 = (char *)*((void *)v6 - 5);
      if (v9 != v6 - 64) {
        goto LABEL_12;
      }
LABEL_4:
      (*(void (**)(char *))(*(void *)v8 + 32))(v8);
    }
  }
  if (__p) {
    operator delete(__p);
  }
}

void sub_B695C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B69754((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_B695D4(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    uint64_t v8 = result[1];
    while (1)
    {
      uint64_t v10 = v6 + v7;
      uint64_t v11 = v4 + v7;
      *(unsigned char *)(v6 + v7 - 72) = *(unsigned char *)(v4 + v7 - 72);
      uint64_t v12 = *(void *)(v4 + v7 - 40);
      if (!v12) {
        break;
      }
      if (v11 - 64 != v12)
      {
        int v13 = (void *)(v8 - 40);
        *(void *)(v10 - 40) = v12;
LABEL_10:
        void *v13 = 0;
        goto LABEL_12;
      }
      *(void *)(v10 - 40) = v10 - 64;
      double result = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(v11 - 40) + 24))(*(void *)(v11 - 40));
LABEL_12:
      uint64_t v14 = v6 + v7;
      uint64_t v15 = v4 + v7;
      uint64_t v16 = *(void *)(v4 + v7 - 8);
      if (v16)
      {
        if (v15 - 32 == v16)
        {
          *(void *)(v14 - 8) = v14 - 32;
          double result = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(v15 - 8) + 24))(*(void *)(v15 - 8));
          goto LABEL_5;
        }
        uint8x8_t v9 = (void *)(v8 - 8);
        *(void *)(v14 - 8) = v16;
      }
      else
      {
        uint8x8_t v9 = (void *)(v14 - 8);
      }
      void *v9 = 0;
LABEL_5:
      v8 -= 72;
      v7 -= 72;
      if (v4 + v7 == v5)
      {
        v6 += v7;
        goto LABEL_17;
      }
    }
    int v13 = (void *)(v10 - 40);
    goto LABEL_10;
  }
LABEL_17:
  a2[1] = v6;
  uint64_t v17 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v17;
  uint64_t v18 = v3[1];
  v3[1] = a2[2];
  a2[2] = v18;
  uint64_t v19 = v3[2];
  v3[2] = a2[3];
  a2[3] = v19;
  *a2 = a2[1];
  return result;
}

uint64_t sub_B69754(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 != v2)
  {
    while (1)
    {
      *(void *)(a1 + 16) = v3 - 72;
      uint64_t v4 = *(void *)(v3 - 8);
      if (v4 == v3 - 32)
      {
        (*(void (**)(uint64_t))(*(void *)(v3 - 32) + 32))(v3 - 32);
        uint64_t v5 = v3 - 64;
        uint64_t v6 = *(void *)(v3 - 40);
        if (v6 != v3 - 64) {
          goto LABEL_10;
        }
LABEL_3:
        (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
        uint64_t v3 = *(void *)(a1 + 16);
        if (v3 == v2) {
          break;
        }
      }
      else
      {
        if (v4) {
          (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
        }
        uint64_t v5 = v3 - 64;
        uint64_t v6 = *(void *)(v3 - 40);
        if (v6 == v3 - 64) {
          goto LABEL_3;
        }
LABEL_10:
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
        }
        uint64_t v3 = *(void *)(a1 + 16);
        if (v3 == v2) {
          break;
        }
      }
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_B69890(uint64_t *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v8 = 0x8E38E38E38E38E39 * ((uint64_t)&a2[-*a1] >> 3);
  unint64_t v9 = a1[2];
  if (v6 < v9)
  {
    if (a2 != (unsigned char *)v6)
    {
      sub_B69C18((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)(a2 + 72));
      sub_B69DD4(v4, a3);
      return v4;
    }
    *a2 = *(unsigned char *)a3;
    uint64_t v14 = a3 + 32;
    uint64_t v15 = *(void *)(a3 + 32);
    if (v15)
    {
      uint64_t v16 = (void *)(v7 + 72 * v8 + 32);
      if (v15 == a3 + 8)
      {
        *uint64_t v16 = v7 + 72 * v8 + 8;
        (*(void (**)(void))(**(void **)v14 + 24))();
LABEL_33:
        uint64_t v22 = a3 + 64;
        uint64_t v23 = *(void *)(a3 + 64);
        if (v23)
        {
          uint64_t v24 = (void *)(v7 + 72 * v8 + 64);
          if (v23 == a3 + 40)
          {
            *uint64_t v24 = v7 + 72 * v8 + 40;
            (*(void (**)(void))(**(void **)v22 + 24))();
            goto LABEL_39;
          }
          *uint64_t v24 = v23;
        }
        else
        {
          uint64_t v22 = v7 + 72 * v8 + 64;
        }
        *(void *)uint64_t v22 = 0;
LABEL_39:
        a1[1] = v4 + 72;
        return v4;
      }
      *uint64_t v16 = v15;
    }
    else
    {
      uint64_t v14 = v7 + 72 * v8 + 32;
    }
    *(void *)uint64_t v14 = 0;
    goto LABEL_33;
  }
  unint64_t v10 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - v7) >> 3) + 1;
  if (v10 > 0x38E38E38E38E38ELL) {
    sub_2E00();
  }
  unint64_t v11 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v7) >> 3);
  if (2 * v11 > v10) {
    unint64_t v10 = 2 * v11;
  }
  if (v11 >= 0x1C71C71C71C71C7) {
    unint64_t v12 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v12 = v10;
  }
  uint64_t v30 = a1 + 2;
  if (v12)
  {
    if (v12 > 0x38E38E38E38E38ELL) {
      sub_188D718();
    }
    int v13 = (char *)operator new(72 * v12);
  }
  else
  {
    int v13 = 0;
  }
  long long __p = v13;
  float v27 = &v13[72 * v8];
  float v28 = v27;
  uint64_t v29 = &v13[72 * v12];
  sub_B69FD0((uint64_t)&__p, a3);
  uint64_t v4 = sub_B6A44C(a1, &__p, v4);
  uint64_t v17 = v27;
  while (1)
  {
    uint64_t v18 = v28;
    if (v28 == v17) {
      break;
    }
    v28 -= 72;
    uint64_t v19 = (char *)*((void *)v18 - 1);
    if (v19 == v18 - 32)
    {
      (*(void (**)(char *))(*((void *)v18 - 4) + 32))(v18 - 32);
      uint64_t v20 = v18 - 64;
      uint64_t v21 = (char *)*((void *)v18 - 5);
      if (v21 == v18 - 64) {
        goto LABEL_18;
      }
LABEL_26:
      if (v21) {
        (*(void (**)(char *))(*(void *)v21 + 40))(v21);
      }
    }
    else
    {
      if (v19) {
        (*(void (**)(char *))(*(void *)v19 + 40))(v19);
      }
      uint64_t v20 = v18 - 64;
      uint64_t v21 = (char *)*((void *)v18 - 5);
      if (v21 != v18 - 64) {
        goto LABEL_26;
      }
LABEL_18:
      (*(void (**)(char *))(*(void *)v20 + 32))(v20);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  return v4;
}

void sub_B69C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B69754((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B69C18(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = result;
  uint64_t v7 = *(void *)(result + 8);
  uint64_t v8 = v7 - a4;
  unint64_t v9 = a2 + v7 - a4;
  if (v9 < a3)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(result + 8);
    while (1)
    {
      uint64_t v14 = v7 + v11;
      *(unsigned char *)(v7 + v11) = *(unsigned char *)(v9 + v11);
      uint64_t v15 = v9 + v11 + 32;
      uint64_t v16 = *(void *)v15;
      if (!*(void *)v15) {
        break;
      }
      if (v9 + v11 + 8 != v16)
      {
        *(void *)(v14 + 32) = v16;
LABEL_10:
        *(void *)uint64_t v15 = 0;
        goto LABEL_12;
      }
      *(void *)(v14 + 32) = v7 + v11 + 8;
      double result = (*(uint64_t (**)(void))(**(void **)v15 + 24))();
LABEL_12:
      uint64_t v13 = v9 + v11 + 64;
      uint64_t v17 = *(void *)v13;
      if (*(void *)v13)
      {
        uint64_t v18 = v7 + v11;
        if (v9 + v11 + 40 == v17)
        {
          *(void *)(v18 + 64) = v18 + 40;
          double result = (*(uint64_t (**)(void))(**(void **)v13 + 24))();
          goto LABEL_5;
        }
        *(void *)(v18 + 64) = v17;
      }
      else
      {
        uint64_t v13 = v12 + 64;
      }
      *(void *)uint64_t v13 = 0;
LABEL_5:
      v12 += 72;
      v11 += 72;
      if (v9 + v11 >= a3)
      {
        *(void *)(v6 + 8) = v7 + v11;
        if (v7 != a4) {
          goto LABEL_19;
        }
        return result;
      }
    }
    uint64_t v15 = v12 + 32;
    goto LABEL_10;
  }
  *(void *)(result + 8) = v7;
  if (v7 != a4)
  {
LABEL_19:
    uint64_t v19 = v7 - 72;
    uint64_t v20 = 8 * (v8 >> 3);
    uint64_t v21 = a2 - 72;
    do
    {
      double result = sub_B69DD4(v19, v21 + v20);
      v19 -= 72;
      v20 -= 72;
    }
    while (v20);
  }
  return result;
}

uint64_t sub_B69DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 8;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v5 = a1 + 8;
  uint64_t v7 = (void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 32);
  void *v7 = 0;
  if (v6 == v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 32))(v5);
    uint64_t v8 = (void *)(a2 + 32);
    uint64_t v9 = *(void *)(a2 + 32);
    if (v9) {
      goto LABEL_5;
    }
LABEL_8:
    uint64_t v8 = v7;
    goto LABEL_9;
  }
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v8 = (void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 32);
  if (!v9) {
    goto LABEL_8;
  }
LABEL_5:
  if (v9 != v4)
  {
    void *v7 = v9;
LABEL_9:
    void *v8 = 0;
    goto LABEL_11;
  }
  void *v7 = v5;
  (*(void (**)(void, uint64_t))(*(void *)*v8 + 24))(*v8, v5);
LABEL_11:
  uint64_t v11 = (void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v12 = a1 + 40;
  *(void *)(a1 + 64) = 0;
  if (v10 == a1 + 40)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(a1 + 40);
    uint64_t v13 = (void *)(a2 + 64);
    uint64_t v14 = *(void *)(a2 + 64);
    if (v14) {
      goto LABEL_15;
    }
LABEL_18:
    uint64_t v13 = (void *)(a1 + 64);
    goto LABEL_19;
  }
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
  }
  uint64_t v13 = (void *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 64);
  if (!v14) {
    goto LABEL_18;
  }
LABEL_15:
  if (v14 != a2 + 40)
  {
    *uint64_t v11 = v14;
LABEL_19:
    void *v13 = 0;
    return a1;
  }
  *uint64_t v11 = v12;
  (*(void (**)(void, uint64_t))(*(void *)*v13 + 24))(*v13, a1 + 40);
  return a1;
}

void sub_B69FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 16);
  if (v4 != *(char **)(a1 + 24)) {
    goto LABEL_41;
  }
  uint64_t v6 = *(char **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 > *(void *)a1)
  {
    int64_t v7 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *(void *)a1) >> 3);
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    if ((char *)v5 == v4)
    {
      unint64_t v11 = v5 - 72 * v9;
    }
    else
    {
      do
      {
        sub_B69DD4(v5 + 72 * v10, v5);
        v5 += 72;
      }
      while ((char *)v5 != v4);
      uint64_t v4 = *(char **)(a1 + 8);
      unint64_t v11 = v5 + 72 * v10;
    }
    *(void *)(a1 + 8) = &v4[72 * v10];
    *(void *)(a1 + 16) = v11;
    uint64_t v4 = (char *)v11;
LABEL_41:
    char *v4 = *(unsigned char *)a2;
    unsigned int v41 = v4 + 8;
    BOOL v42 = (void *)(a2 + 32);
    uint64_t v43 = *(void *)(a2 + 32);
    if (v43) {
      goto LABEL_42;
    }
LABEL_52:
    BOOL v42 = v4 + 32;
LABEL_53:
    void *v42 = 0;
    uint64_t v44 = (void *)(a2 + 64);
    uint64_t v45 = *(void *)(a2 + 64);
    if (!v45) {
      goto LABEL_54;
    }
    goto LABEL_45;
  }
  unint64_t v12 = 0x1C71C71C71C71C72 * ((v4 - v6) >> 3);
  if (v4 == v6) {
    unint64_t v12 = 1;
  }
  if (v12 >= 0x38E38E38E38E38FLL) {
    sub_188D718();
  }
  unint64_t v13 = v12 >> 2;
  uint64_t v14 = 72 * v12;
  uint64_t v15 = (char *)operator new(72 * v12);
  uint64_t v16 = v15;
  uint64_t v17 = &v15[72 * v13];
  uint64_t v18 = &v15[v14];
  if (v4 == (char *)v5)
  {
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v17;
    *(void *)(a1 + 24) = v18;
    goto LABEL_49;
  }
  uint64_t v19 = 0;
  uint64_t v20 = (uint64_t)&v4[-v5] / 72;
  uint64_t v21 = &v17[72 * v20];
  uint64_t v22 = 72 * v20;
  unint64_t v23 = v5;
  do
  {
    char v25 = &v17[v19];
    uint64_t v26 = v5 + v19;
    v17[v19] = *(unsigned char *)(v5 + v19);
    uint64_t v27 = (uint64_t)&v17[v19 + 8];
    uint64_t v28 = *(void *)(v5 + v19 + 32);
    if (!v28)
    {
      uint64_t v29 = v25 + 32;
      goto LABEL_21;
    }
    if (v26 + 8 != v28)
    {
      uint64_t v29 = (void *)(v23 + 32);
      *((void *)v25 + 4) = v28;
LABEL_21:
      *uint64_t v29 = 0;
      goto LABEL_23;
    }
    *((void *)v25 + 4) = v27;
    (*(void (**)(void))(**(void **)(v26 + 32) + 24))(*(void *)(v26 + 32));
LABEL_23:
    uint64_t v30 = &v17[v19];
    uint64_t v31 = v5 + v19;
    uint64_t v32 = *(void *)(v5 + v19 + 64);
    if (!v32)
    {
      uint64_t v24 = v30 + 64;
LABEL_15:
      *uint64_t v24 = 0;
      goto LABEL_16;
    }
    if (v31 + 40 != v32)
    {
      uint64_t v24 = (void *)(v23 + 64);
      *((void *)v30 + 8) = v32;
      goto LABEL_15;
    }
    *((void *)v30 + 8) = v30 + 40;
    (*(void (**)(void))(**(void **)(v31 + 64) + 24))(*(void *)(v31 + 64));
LABEL_16:
    v23 += 72;
    v19 += 72;
  }
  while (v22 != v19);
  uint64_t v6 = *(char **)a1;
  unint64_t v33 = *(void **)(a1 + 8);
  std::string::size_type v34 = *(void **)(a1 + 16);
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v17;
  *(void *)(a1 + 16) = v21;
  *(void *)(a1 + 24) = v18;
  if (v34 != v33)
  {
    int8x8_t v35 = v34 - 4;
    unint64_t v36 = v34 - 8;
    do
    {
      uint64_t v38 = (void *)v35[3];
      if (v35 == v38)
      {
        (*(void (**)(void *, uint64_t))(*v35 + 32))(v35, v27);
        unint64_t v39 = v35 - 4;
        unint64_t v40 = (void *)*(v35 - 1);
        if (v35 - 4 != v40) {
          goto LABEL_37;
        }
      }
      else
      {
        if (v38) {
          (*(void (**)(void *, uint64_t))(*v38 + 40))(v38, v27);
        }
        unint64_t v39 = v35 - 4;
        unint64_t v40 = (void *)*(v35 - 1);
        if (v35 - 4 != v40)
        {
LABEL_37:
          if (v40) {
            (*(void (**)(void *, uint64_t))(*v40 + 40))(v40, v27);
          }
          goto LABEL_30;
        }
      }
      (*(void (**)(void *))(*v39 + 32))(v39);
LABEL_30:
      uint8x8_t v37 = v35 - 5;
      v35 -= 9;
      v36 -= 9;
    }
    while (v37 != v33);
  }
LABEL_49:
  if (v6) {
    operator delete(v6);
  }
  uint64_t v4 = *(char **)(a1 + 16);
  char *v4 = *(unsigned char *)a2;
  unsigned int v41 = v4 + 8;
  BOOL v42 = (void *)(a2 + 32);
  uint64_t v43 = *(void *)(a2 + 32);
  if (!v43) {
    goto LABEL_52;
  }
LABEL_42:
  if (v43 != a2 + 8)
  {
    *((void *)v4 + 4) = v43;
    goto LABEL_53;
  }
  *((void *)v4 + 4) = v41;
  (*(void (**)(void))(*(void *)*v42 + 24))();
  uint64_t v44 = (void *)(a2 + 64);
  uint64_t v45 = *(void *)(a2 + 64);
  if (!v45)
  {
LABEL_54:
    uint64_t v44 = v4 + 64;
    goto LABEL_55;
  }
LABEL_45:
  if (v45 != a2 + 40)
  {
    *((void *)v4 + 8) = v45;
LABEL_55:
    *uint64_t v44 = 0;
    goto LABEL_56;
  }
  *((void *)v4 + 8) = v4 + 40;
  (*(void (**)(void))(*(void *)*v44 + 24))();
LABEL_56:
  *(void *)(a1 + 16) += 72;
}

uint64_t sub_B6A44C(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = *a1;
  uint64_t v8 = v6;
  if (*a1 != a3)
  {
    uint64_t v9 = 0;
    uint64_t v10 = a3;
    while (1)
    {
      uint64_t v12 = v6 + v9;
      uint64_t v13 = a3 + v9;
      *(unsigned char *)(v6 + v9 - 72) = *(unsigned char *)(a3 + v9 - 72);
      uint64_t v14 = *(void *)(a3 + v9 - 40);
      if (!v14) {
        break;
      }
      if (v13 - 64 != v14)
      {
        uint64_t v15 = (void *)(v10 - 40);
        *(void *)(v12 - 40) = v14;
LABEL_10:
        void *v15 = 0;
        goto LABEL_12;
      }
      *(void *)(v12 - 40) = v12 - 64;
      (*(void (**)(void))(**(void **)(v13 - 40) + 24))(*(void *)(v13 - 40));
LABEL_12:
      uint64_t v16 = v6 + v9;
      uint64_t v17 = a3 + v9;
      uint64_t v18 = *(void *)(a3 + v9 - 8);
      if (v18)
      {
        if (v17 - 32 == v18)
        {
          *(void *)(v16 - 8) = v16 - 32;
          (*(void (**)(void))(**(void **)(v17 - 8) + 24))(*(void *)(v17 - 8));
          goto LABEL_5;
        }
        unint64_t v11 = (void *)(v10 - 8);
        *(void *)(v16 - 8) = v18;
      }
      else
      {
        unint64_t v11 = (void *)(v16 - 8);
      }
      *unint64_t v11 = 0;
LABEL_5:
      v10 -= 72;
      v9 -= 72;
      if (a3 + v9 == v7)
      {
        uint64_t v8 = v6 + v9;
        goto LABEL_17;
      }
    }
    uint64_t v15 = (void *)(v12 - 40);
    goto LABEL_10;
  }
LABEL_17:
  a2[1] = v8;
  uint64_t v19 = a1[1];
  uint64_t v20 = a2[2];
  if (v19 != a3)
  {
    uint64_t v21 = 0;
    uint64_t v22 = a2[2];
    while (1)
    {
      uint64_t v24 = v20 + v21;
      *(unsigned char *)(v20 + v21) = *(unsigned char *)(a3 + v21);
      uint64_t v25 = a3 + v21 + 32;
      uint64_t v26 = *(void *)v25;
      if (!*(void *)v25) {
        break;
      }
      if (a3 + v21 + 8 != v26)
      {
        *(void *)(v24 + 32) = v26;
LABEL_26:
        *(void *)uint64_t v25 = 0;
        goto LABEL_28;
      }
      *(void *)(v24 + 32) = v20 + v21 + 8;
      (*(void (**)(void))(**(void **)v25 + 24))();
LABEL_28:
      uint64_t v23 = a3 + v21 + 64;
      uint64_t v27 = *(void *)v23;
      if (*(void *)v23)
      {
        uint64_t v28 = v20 + v21;
        if (a3 + v21 + 40 == v27)
        {
          *(void *)(v28 + 64) = v28 + 40;
          (*(void (**)(void))(**(void **)v23 + 24))();
          goto LABEL_21;
        }
        *(void *)(v28 + 64) = v27;
      }
      else
      {
        uint64_t v23 = v22 + 64;
      }
      *(void *)uint64_t v23 = 0;
LABEL_21:
      v22 += 72;
      v21 += 72;
      if (a3 + v21 == v19)
      {
        uint64_t v8 = a2[1];
        v20 += v21;
        goto LABEL_33;
      }
    }
    uint64_t v25 = v22 + 32;
    goto LABEL_26;
  }
LABEL_33:
  a2[2] = v20;
  uint64_t v29 = *a1;
  *a1 = v8;
  a2[1] = v29;
  uint64_t v30 = a1[1];
  a1[1] = a2[2];
  a2[2] = v30;
  uint64_t v31 = a1[2];
  a1[2] = a2[3];
  a2[3] = v31;
  *a2 = a2[1];
  return v6;
}

__n128 sub_B6A6EC(void **a1, __n128 *a2)
{
  uint64_t v4 = (char *)*a1;
  if (!*a1) {
    goto LABEL_16;
  }
  unint64_t v5 = (char *)a1[1];
  uint64_t v6 = *a1;
  if (v5 == v4) {
    goto LABEL_15;
  }
  uint64_t v7 = v5 - 32;
  uint64_t v8 = v5 - 64;
  do
  {
    uint64_t v10 = (char *)*((void *)v7 + 3);
    if (v7 == v10)
    {
      (*(void (**)(char *))(*(void *)v7 + 32))(v7);
      unint64_t v11 = v7 - 32;
      uint64_t v12 = (char *)*((void *)v7 - 1);
      if (v7 - 32 == v12) {
        goto LABEL_4;
      }
    }
    else
    {
      if (v10) {
        (*(void (**)(char *))(*(void *)v10 + 40))(v10);
      }
      unint64_t v11 = v7 - 32;
      uint64_t v12 = (char *)*((void *)v7 - 1);
      if (v7 - 32 == v12)
      {
LABEL_4:
        (*(void (**)(char *))(*(void *)v11 + 32))(v11);
        goto LABEL_5;
      }
    }
    if (v12) {
      (*(void (**)(char *))(*(void *)v12 + 40))(v12);
    }
LABEL_5:
    uint64_t v9 = v7 - 40;
    v7 -= 72;
    v8 -= 72;
  }
  while (v9 != v4);
  uint64_t v6 = *a1;
LABEL_15:
  a1[1] = v4;
  operator delete(v6);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
LABEL_16:
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  a1[2] = (void *)a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_B6A85C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v19 = 0x101010101010101;
  int v20 = 16843009;
  if (*(unsigned char *)(a1 + 24)) {
    return v19;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  if (*a2 == *a3)
  {
    uint64_t v19 = 0x101010101010101;
    int v20 = 16843009;
LABEL_30:
    BYTE1(v20) = 0;
    return v19;
  }
  uint64_t v5 = 0;
  int v6 = *(_DWORD *)(a1 + 4);
  do
  {
    LOBYTE(v7) = 1;
    if (v5 >= 0xAu)
    {
      uint64_t v8 = v3;
      if (v5 == 10)
      {
        do
        {
          int v13 = 1 << *(unsigned char *)(v8 + 9);
          if ((v13 & v6) != 0 || (*(_DWORD *)a1 & v13) != 0)
          {
            if (*(_DWORD *)(v8 + 104) == 0x7FFFFFFF) {
              goto LABEL_4;
            }
            uint64_t v7 = *(unsigned __int8 *)(v8 + 135);
            if ((v7 & 0x80u) != 0) {
              uint64_t v7 = *(void *)(v8 + 120);
            }
            if (!v7) {
              break;
            }
          }
          v8 += 296;
          LOBYTE(v7) = 1;
        }
        while (v8 != v4);
      }
      else if (v5 != 12)
      {
        uint64_t v9 = v3;
        uint64_t v10 = v3;
        if (v5 == 11)
        {
          while (1)
          {
            int v12 = 1 << *(unsigned char *)(v9 + 9);
            if (((v12 & v6) != 0 || (*(_DWORD *)a1 & v12) != 0) && *(_DWORD *)(v9 + 144) == -1) {
              break;
            }
            v9 += 296;
            if (v9 == v4) {
              goto LABEL_13;
            }
          }
LABEL_4:
          LOBYTE(v7) = 0;
        }
        else
        {
          do
          {
            int v11 = 1 << *(unsigned char *)(v10 + 9);
            if ((v11 & v6) != 0 || (*(_DWORD *)a1 & v11) != 0)
            {
              exception = __cxa_allocate_exception(0x40uLL);
              uint64_t v17 = (char *)operator new(0x50uLL);
              long long v18 = xmmword_20B9A50;
              strcpy(v17, "Requested to evaluate unknown criterion in fuzzy dominance scoring algorithm");
              uint64_t v16 = (void *)sub_2F404((uint64_t)exception, (long long *)&v17);
            }
            v10 += 296;
          }
          while (v10 != v4);
LABEL_13:
          LOBYTE(v7) = 1;
        }
      }
    }
    *((unsigned char *)&v19 + v5++) = v7;
  }
  while (v5 != 12);
  if (HIBYTE(v20)) {
    goto LABEL_30;
  }
  return v19;
}

void sub_B6AA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_B6AAB0()
{
  uint64_t v0 = operator new(0x19uLL);
  long long v1 = xmmword_20B9250;
  strcpy((char *)v0, "expected_departure_time");
  char v2 = 0;
  __int16 v4 = 277;
  strcpy(v3, "expected_arrival_time");
  HIBYTE(v5[2]) = 21;
  strcpy((char *)v5, "expected_dep_arr_time");
  char v6 = 2;
  uint64_t v7 = operator new(0x20uLL);
  long long v8 = xmmword_20B8870;
  strcpy((char *)v7, "expected_journey_duration");
  char v9 = 3;
  uint64_t v10 = operator new(0x20uLL);
  long long v11 = xmmword_20B91C0;
  strcpy((char *)v10, "expected_travel_duration");
  char v12 = 4;
  int v13 = operator new(0x20uLL);
  long long v14 = xmmword_20B8870;
  strcpy((char *)v13, "expected_walking_duration");
  char v15 = 5;
  uint64_t v16 = operator new(0x20uLL);
  long long v17 = xmmword_20B8870;
  strcpy((char *)v16, "expected_request_time_gap");
  char v18 = 6;
  __int16 v20 = 1801;
  strcpy((char *)v19, "num_trips");
  v21[0] = operator new(0x20uLL);
  v21[1] = &dword_18 + 2;
  unint64_t v22 = 0x8000000000000020;
  strcpy((char *)v21[0], "routing_preference_penalty");
  char v23 = 8;
  *(_WORD *)((char *)&v24[2] + 7) = 2325;
  strcpy((char *)v24, "fare_estimate_penalty");
  char v26 = 14;
  strcpy((char *)v25, "price_in_cents");
  char v27 = 10;
  __p[0] = operator new(0x20uLL);
  __p[1] = &dword_18;
  unint64_t v29 = 0x8000000000000020;
  strcpy((char *)__p[0], "normalised_monetary_cost");
  char v30 = 11;
  xmmword_25DFB90 = 0u;
  *(_OWORD *)&qword_25DFBA0 = 0u;
  dword_25DFBB0 = 1065353216;
  sub_B6862C((uint64_t)&xmmword_25DFB90, (uint64_t)&v0, (uint64_t)&v0);
  sub_B6862C((uint64_t)&xmmword_25DFB90, (uint64_t)v3, (uint64_t)v3);
  sub_B6862C((uint64_t)&xmmword_25DFB90, (uint64_t)v5, (uint64_t)v5);
  sub_B6862C((uint64_t)&xmmword_25DFB90, (uint64_t)&v7, (uint64_t)&v7);
  sub_B6862C((uint64_t)&xmmword_25DFB90, (uint64_t)&v10, (uint64_t)&v10);
  sub_B6862C((uint64_t)&xmmword_25DFB90, (uint64_t)&v13, (uint64_t)&v13);
  sub_B6862C((uint64_t)&xmmword_25DFB90, (uint64_t)&v16, (uint64_t)&v16);
  sub_B6862C((uint64_t)&xmmword_25DFB90, (uint64_t)v19, (uint64_t)v19);
  sub_B6862C((uint64_t)&xmmword_25DFB90, (uint64_t)v21, (uint64_t)v21);
  sub_B6862C((uint64_t)&xmmword_25DFB90, (uint64_t)v24, (uint64_t)v24);
  sub_B6862C((uint64_t)&xmmword_25DFB90, (uint64_t)v25, (uint64_t)v25);
  sub_B6862C((uint64_t)&xmmword_25DFB90, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v29) < 0)
  {
    operator delete(__p[0]);
    if ((v26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v24[2]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v25[0]);
  if ((SHIBYTE(v24[2]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v22) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v24[0]);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
LABEL_5:
    if (((char)v20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v21[0]);
  if (((char)v20 & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v19[0]);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_7:
    if ((SHIBYTE(v14) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v16);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v11) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v13);
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v10);
  if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v5[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v7);
  if ((SHIBYTE(v5[2]) & 0x80000000) == 0)
  {
LABEL_11:
    if (((char)v4 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v5[0]);
  if (((char)v4 & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v1) & 0x80000000) == 0) {
      return;
    }
LABEL_25:
    operator delete(v0);
    return;
  }
LABEL_24:
  operator delete(*(void **)v3);
  if (SHIBYTE(v1) < 0) {
    goto LABEL_25;
  }
}

void sub_B6AFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  char v15 = v13;
  while (1)
  {
    if (*((char *)v15 - 9) < 0) {
      operator delete(*(v15 - 4));
    }
    v15 -= 4;
    if (v15 == &a13) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_B6B19C(_DWORD *a1, uint64_t a2)
{
  sub_B6B480(a2, a1, v4);
  sub_B6B28C((uint64_t *)(a2 + 8), v4);
  uint64_t result = (uint64_t)v5;
  if (v5 == v4) {
    return (*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_B6B274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B6B670((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B6B28C(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (long long *)a1[1];
  __int16 v4 = (void *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      long long v11 = v10;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v10);
    }
    else
    {
      long long v11 = (void *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    long long v11 = 0;
  }
  if ((uint64_t)v3 - v2 < 1)
  {
LABEL_10:
    long long v8 = 0;
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v5 = 0x14C1BACF914C1BADLL * (((uint64_t)v3 - v2) >> 3);
    while (1)
    {
      char v6 = operator new(296 * v5, &std::nothrow);
      if (v6) {
        break;
      }
      BOOL v7 = v5 > 1;
      v5 >>= 1;
      if (!v7) {
        goto LABEL_10;
      }
    }
    long long v8 = v6;
  }
  sub_B6B700(v2, v3, (uint64_t)v10, 0x14C1BACF914C1BADLL * (((uint64_t)v3 - v2) >> 3), (uint64_t)v8, v5);
  if (v8) {
    operator delete(v8);
  }
  uint64_t result = (uint64_t)v11;
  if (v11 == v10) {
    return (*(uint64_t (**)(void *))(v10[0] + 32))(v10);
  }
  if (v11) {
    return (*(uint64_t (**)(void))(*v11 + 40))();
  }
  return result;
}

void sub_B6B450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B6B480@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  switch(*a2)
  {
    case 0:
      *a3 = off_243D898;
      a3[3] = a3;
      break;
    case 1:
      *a3 = off_243D928;
      a3[3] = a3;
      break;
    case 2:
      *a3 = off_243D9A8;
      a3[3] = a3;
      break;
    case 3:
      *a3 = off_243DA28;
      a3[3] = a3;
      break;
    case 4:
      *a3 = off_243DAA8;
      a3[1] = result;
      a3[3] = a3;
      break;
    case 5:
      *a3 = off_243DB28;
      a3[1] = result;
      a3[3] = a3;
      break;
    default:
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v5, "Ordering comparator was not handled properly");
      __int16 v4 = (void *)sub_2F404((uint64_t)exception, &v5);
  }
  return result;
}

void sub_B6B628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_B6B670(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_B6B700(uint64_t a1, long long *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      uint64_t v9 = *(void *)(a3 + 24);
      if (!v9) {
        sub_29F82C();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 48))(v9, (uint64_t)a2 - 296, a1))
      {
        sub_B63D8C(a1, (long long *)((char *)a2 - 296));
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      sub_B6B944(a1, (uint64_t)a2, a3);
    }
    else
    {
      uint64_t v13 = a4 >> 1;
      long long v14 = (long long *)(a1 + 296 * (a4 >> 1));
      if ((uint64_t)a4 <= a6)
      {
        sub_B6BEB8(a1, (long long *)(a1 + 296 * (a4 >> 1)), a3, a4 >> 1, a5);
        sub_B6BEB8(a1 + 296 * (a4 >> 1), a2, a3, a4 - v13, a5 + 296 * v13);
        unint64_t v16 = a4;
        sub_B6C504(a5, (long long *)(a5 + 296 * v13), (long long *)(a5 + 296 * v13), (long long *)(a5 + 296 * a4), a1, a3);
        if (a5) {
          sub_B6D778(&v16, a5);
        }
      }
      else
      {
        sub_B6B700(a1, a1 + 296 * (a4 >> 1), a3, a4 >> 1, a5, a6);
        uint64_t v15 = a4 - v13;
        sub_B6B700(v14, a2, a3, v15, a5, a6);
        sub_B6C61C(a1, v14, a2, a3, v13, v15, a5, a6);
      }
    }
  }
}

void sub_B6B928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  if (v10) {
    sub_B6D778(&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_B6B944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = a1;
    uint64_t v5 = a1 + 296;
    if (a1 + 296 != a2)
    {
      uint64_t v7 = a1;
      do
      {
        uint64_t v8 = *(void *)(a3 + 24);
        if (!v8) {
          sub_29F82C();
        }
        uint64_t v9 = v5;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 48))(v8, v5, v7))
        {
          long long v10 = *(_OWORD *)v9;
          long long v11 = *(_OWORD *)(v9 + 32);
          v63[1] = *(_OWORD *)(v9 + 16);
          v63[2] = v11;
          v63[0] = v10;
          long long v12 = *(_OWORD *)(v9 + 48);
          long long v13 = *(_OWORD *)(v9 + 64);
          long long v14 = *(_OWORD *)(v9 + 80);
          uint64_t v64 = *(void *)(v9 + 96);
          v63[4] = v13;
          v63[5] = v14;
          v63[3] = v12;
          int v15 = *(_DWORD *)(v7 + 400);
          uint64_t v67 = *(void *)(v7 + 424);
          long long v66 = *(_OWORD *)(v7 + 408);
          *(void *)(v7 + 416) = 0;
          *(void *)(v7 + 424) = 0;
          *(void *)(v7 + 408) = 0;
          int v16 = *(_DWORD *)(v7 + 432);
          int v65 = v15;
          int v68 = v16;
          long long v17 = *(_OWORD *)(v7 + 440);
          long long v18 = *(_OWORD *)(v7 + 472);
          long long v70 = *(_OWORD *)(v7 + 456);
          long long v71 = v18;
          long long v69 = v17;
          uint64_t v72 = *(void *)(v7 + 488);
          long long v73 = *(_OWORD *)(v7 + 496);
          uint64_t v74 = *(void *)(v7 + 512);
          *(void *)(v7 + 496) = 0;
          *(void *)(v7 + 504) = 0;
          *(void *)(v7 + 512) = 0;
          *(_OWORD *)int v75 = *(_OWORD *)(v7 + 520);
          uint64_t v76 = *(void *)(v7 + 536);
          *(void *)(v7 + 520) = 0;
          *(void *)(v7 + 528) = 0;
          *(void *)(v7 + 536) = 0;
          long long v77 = *(_OWORD *)(v7 + 544);
          uint64_t v78 = *(void *)(v7 + 560);
          *(void *)(v7 + 552) = 0;
          *(void *)(v7 + 544) = 0;
          *(void *)(v7 + 560) = 0;
          *(_OWORD *)long long __p = *(_OWORD *)(v7 + 568);
          uint64_t v80 = *(void *)(v7 + 584);
          *(void *)(v7 + 568) = 0;
          *(void *)(v7 + 576) = 0;
          uint64_t v62 = v9;
          uint64_t v19 = v9;
          *(void *)(v7 + 584) = 0;
          while (1)
          {
            uint64_t v20 = v7;
            long long v21 = *(_OWORD *)v7;
            long long v22 = *(_OWORD *)(v7 + 32);
            *(_OWORD *)(v19 + 16) = *(_OWORD *)(v7 + 16);
            *(_OWORD *)(v19 + 32) = v22;
            *(_OWORD *)uint64_t v19 = v21;
            long long v23 = *(_OWORD *)(v7 + 48);
            long long v24 = *(_OWORD *)(v7 + 64);
            long long v25 = *(_OWORD *)(v7 + 80);
            *(void *)(v19 + 96) = *(void *)(v7 + 96);
            *(_OWORD *)(v19 + 64) = v24;
            *(_OWORD *)(v19 + 80) = v25;
            *(_OWORD *)(v19 + 48) = v23;
            *(_DWORD *)(v19 + 104) = *(_DWORD *)(v7 + 104);
            char v26 = (void **)(v19 + 112);
            if (*(char *)(v19 + 135) < 0) {
              operator delete(*v26);
            }
            long long v27 = *(_OWORD *)(v7 + 112);
            *(void *)(v19 + 128) = *(void *)(v7 + 128);
            *(_OWORD *)char v26 = v27;
            *(unsigned char *)(v7 + 135) = 0;
            *(unsigned char *)(v7 + 112) = 0;
            int v28 = *(_DWORD *)(v7 + 136);
            unint64_t v29 = (void **)(v19 + 200);
            char v30 = *(void ***)(v19 + 200);
            *(_DWORD *)(v19 + 136) = v28;
            long long v32 = *(_OWORD *)(v20 + 144);
            long long v31 = *(_OWORD *)(v20 + 160);
            *(_OWORD *)(v19 + 176) = *(_OWORD *)(v20 + 176);
            *(_OWORD *)(v19 + 144) = v32;
            *(_OWORD *)(v19 + 160) = v31;
            *(void *)(v19 + 192) = *(void *)(v20 + 192);
            if (v30)
            {
              unint64_t v33 = *(void ***)(v19 + 208);
              std::string::size_type v34 = v30;
              if (v33 != v30)
              {
                uint64_t v35 = a3;
                uint64_t v36 = v4;
                do
                {
                  uint64_t v38 = *(v33 - 5);
                  if (v38)
                  {
                    *(v33 - 4) = v38;
                    operator delete(v38);
                  }
                  unint64_t v39 = v33 - 9;
                  unint64_t v40 = (char *)*(v33 - 9);
                  if (v40)
                  {
                    unsigned int v41 = (char *)*(v33 - 8);
                    uint8x8_t v37 = *(v33 - 9);
                    if (v41 != v40)
                    {
                      do
                      {
                        if (!*((_DWORD *)v41 - 2))
                        {
                          BOOL v42 = (void *)*((void *)v41 - 6);
                          if (v42)
                          {
                            *((void *)v41 - 5) = v42;
                            operator delete(v42);
                          }
                          uint64_t v43 = (void *)*((void *)v41 - 10);
                          if (v43)
                          {
                            *((void *)v41 - 9) = v43;
                            operator delete(v43);
                          }
                          uint64_t v44 = (void *)*((void *)v41 - 13);
                          if (v44)
                          {
                            *((void *)v41 - 12) = v44;
                            operator delete(v44);
                          }
                        }
                        v41 -= 168;
                      }
                      while (v41 != v40);
                      uint8x8_t v37 = *v39;
                    }
                    *(v33 - 8) = v40;
                    operator delete(v37);
                  }
                  v33 -= 9;
                }
                while (v39 != v30);
                std::string::size_type v34 = *v29;
                uint64_t v4 = v36;
                a3 = v35;
              }
              *(void *)(v19 + 208) = v30;
              operator delete(v34);
              *unint64_t v29 = 0;
              *(void *)(v19 + 208) = 0;
              *(void *)(v19 + 216) = 0;
            }
            *(_OWORD *)(v19 + 200) = *(_OWORD *)(v20 + 200);
            *(void *)(v19 + 216) = *(void *)(v20 + 216);
            *(void *)(v20 + 200) = 0;
            *(void *)(v20 + 208) = 0;
            *(void *)(v20 + 216) = 0;
            uint64_t v45 = *(void **)(v19 + 224);
            if (v45)
            {
              *(void *)(v19 + 232) = v45;
              operator delete(v45);
              *(void *)(v19 + 224) = 0;
              *(void *)(v19 + 232) = 0;
              *(void *)(v19 + 240) = 0;
            }
            *(_OWORD *)(v19 + 224) = *(_OWORD *)(v20 + 224);
            *(void *)(v19 + 240) = *(void *)(v20 + 240);
            *(void *)(v20 + 224) = 0;
            *(void *)(v20 + 232) = 0;
            *(void *)(v20 + 240) = 0;
            uint64_t v46 = *(void **)(v19 + 248);
            if (v46)
            {
              *(void *)(v19 + 256) = v46;
              operator delete(v46);
              *(void *)(v19 + 248) = 0;
              *(void *)(v19 + 256) = 0;
              *(void *)(v19 + 264) = 0;
            }
            *(_OWORD *)(v19 + 248) = *(_OWORD *)(v20 + 248);
            *(void *)(v19 + 264) = *(void *)(v20 + 264);
            *(void *)(v20 + 248) = 0;
            *(void *)(v20 + 256) = 0;
            *(void *)(v20 + 264) = 0;
            unsigned int v47 = *(void **)(v19 + 272);
            if (v47)
            {
              *(void *)(v19 + 280) = v47;
              operator delete(v47);
              *(void *)(v19 + 272) = 0;
              *(void *)(v19 + 280) = 0;
              *(void *)(v19 + 288) = 0;
            }
            *(_OWORD *)(v19 + 272) = *(_OWORD *)(v20 + 272);
            *(void *)(v19 + 288) = *(void *)(v20 + 288);
            *(void *)(v20 + 272) = 0;
            *(void *)(v20 + 280) = 0;
            *(void *)(v20 + 288) = 0;
            if (v20 == v4) {
              break;
            }
            uint64_t v48 = *(void *)(a3 + 24);
            if (!v48) {
              sub_29F82C();
            }
            uint64_t v7 = v20 - 296;
            uint64_t v19 = v20;
            if (((*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v48 + 48))(v48, v63, v20 - 296) & 1) == 0)
            {
              sub_B3E498(v20, v63);
              long long v49 = __p[0];
              if (!__p[0]) {
                goto LABEL_43;
              }
              goto LABEL_42;
            }
          }
          sub_B3E498(v4, v63);
          long long v49 = __p[0];
          if (__p[0])
          {
LABEL_42:
            __p[1] = v49;
            operator delete(v49);
          }
LABEL_43:
          uint64_t v9 = v62;
          if ((void)v77)
          {
            *((void *)&v77 + 1) = v77;
            operator delete((void *)v77);
          }
          if (v75[0])
          {
            v75[1] = v75[0];
            operator delete(v75[0]);
          }
          int v50 = (void **)v73;
          if ((void)v73)
          {
            uint64_t v51 = *((void *)&v73 + 1);
            std::string v52 = (void *)v73;
            if (*((void *)&v73 + 1) != (void)v73)
            {
              do
              {
                signed int v54 = *(void **)(v51 - 40);
                if (v54)
                {
                  *(void *)(v51 - 32) = v54;
                  operator delete(v54);
                }
                uint64_t v55 = (void **)(v51 - 72);
                uint64_t v56 = *(void *)(v51 - 72);
                if (v56)
                {
                  uint64_t v57 = *(void *)(v51 - 64);
                  uint64_t v53 = *(void **)(v51 - 72);
                  if (v57 != v56)
                  {
                    do
                    {
                      if (!*(_DWORD *)(v57 - 8))
                      {
                        long long v58 = *(void **)(v57 - 48);
                        if (v58)
                        {
                          *(void *)(v57 - 40) = v58;
                          operator delete(v58);
                        }
                        uint64_t v59 = *(void **)(v57 - 80);
                        if (v59)
                        {
                          *(void *)(v57 - 72) = v59;
                          operator delete(v59);
                        }
                        uint64_t v60 = *(void **)(v57 - 104);
                        if (v60)
                        {
                          *(void *)(v57 - 96) = v60;
                          operator delete(v60);
                        }
                      }
                      v57 -= 168;
                    }
                    while (v57 != v56);
                    uint64_t v53 = *v55;
                  }
                  *(void *)(v51 - 64) = v56;
                  operator delete(v53);
                }
                v51 -= 72;
              }
              while (v55 != v50);
              std::string v52 = (void *)v73;
            }
            *((void *)&v73 + 1) = v50;
            operator delete(v52);
          }
          if (SHIBYTE(v67) < 0) {
            operator delete((void *)v66);
          }
          uint64_t v3 = a2;
        }
        uint64_t v5 = v9 + 296;
        uint64_t v7 = v9;
      }
      while (v9 + 296 != v3);
    }
  }
}

void sub_B6BE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_A1D608((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B6BEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_A1D608((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B6BEB8(uint64_t a1, long long *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    if (a4 == 2)
    {
      uint64_t v18 = *(void *)(a3 + 24);
      if (!v18) {
        sub_29F82C();
      }
      uint64_t v19 = (long long *)((char *)a2 - 296);
      int v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 48))(v18, (uint64_t)a2 - 296, a1);
      long long v21 = (void *)(a5 + 520);
      long long v22 = (_OWORD *)(a5 + 112);
      long long v23 = (_OWORD *)(a5 + 144);
      long long v24 = (void *)(a5 + 200);
      if (v20)
      {
        long long v25 = *v19;
        long long v26 = *(long long *)((char *)a2 - 264);
        *(_OWORD *)(a5 + 16) = *(long long *)((char *)a2 - 280);
        *(_OWORD *)(a5 + 32) = v26;
        *(_OWORD *)a5 = v25;
        long long v27 = *(long long *)((char *)a2 - 248);
        long long v28 = *(long long *)((char *)a2 - 232);
        long long v29 = *(long long *)((char *)a2 - 216);
        *(void *)(a5 + 96) = *((void *)a2 - 25);
        *(_OWORD *)(a5 + 64) = v28;
        *(_OWORD *)(a5 + 80) = v29;
        *(_OWORD *)(a5 + 48) = v27;
        *(_DWORD *)(a5 + 104) = *((_DWORD *)a2 - 48);
        long long v30 = *(long long *)((char *)a2 - 184);
        *(void *)(a5 + 128) = *((void *)a2 - 21);
        *long long v22 = v30;
        *((void *)a2 - 22) = 0;
        *((void *)a2 - 21) = 0;
        *((void *)a2 - 23) = 0;
        *(_DWORD *)(a5 + 136) = *((_DWORD *)a2 - 40);
        long long v31 = *(long long *)((char *)a2 - 152);
        long long v32 = *(long long *)((char *)a2 - 120);
        *(_OWORD *)(a5 + 160) = *(long long *)((char *)a2 - 136);
        *(_OWORD *)(a5 + 176) = v32;
        _OWORD *v23 = v31;
        *(void *)(a5 + 192) = *((void *)a2 - 13);
        *(void *)(a5 + 208) = 0;
        *(void *)(a5 + 216) = 0;
        *long long v24 = 0;
        *(_OWORD *)(a5 + 200) = *(a2 - 6);
        *(void *)(a5 + 216) = *((void *)a2 - 10);
        *((void *)a2 - 12) = 0;
        *((void *)a2 - 11) = 0;
        *((void *)a2 - 10) = 0;
        *(void *)(a5 + 224) = 0;
        *(void *)(a5 + 232) = 0;
        *(void *)(a5 + 240) = 0;
        *(_OWORD *)(a5 + 224) = *(long long *)((char *)a2 - 72);
        *(void *)(a5 + 240) = *((void *)a2 - 7);
        *((void *)a2 - 9) = 0;
        *((void *)a2 - 8) = 0;
        *((void *)a2 - 7) = 0;
        *(void *)(a5 + 248) = 0;
        *(void *)(a5 + 256) = 0;
        *(void *)(a5 + 264) = 0;
        *(_OWORD *)(a5 + 248) = *(a2 - 3);
        *(void *)(a5 + 264) = *((void *)a2 - 4);
        *((void *)a2 - 6) = 0;
        *((void *)a2 - 5) = 0;
        *((void *)a2 - 4) = 0;
        *(void *)(a5 + 272) = 0;
        *(void *)(a5 + 280) = 0;
        *(void *)(a5 + 288) = 0;
        *(_OWORD *)(a5 + 272) = *(long long *)((char *)a2 - 24);
        *(void *)(a5 + 288) = *((void *)a2 - 1);
        *((void *)a2 - 3) = 0;
        *((void *)a2 - 2) = 0;
        *((void *)a2 - 1) = 0;
        long long v33 = *(_OWORD *)a1;
        long long v34 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(a5 + 312) = *(_OWORD *)(a1 + 16);
        *(_OWORD *)(a5 + 328) = v34;
        *(_OWORD *)(a5 + 296) = v33;
        long long v35 = *(_OWORD *)(a1 + 48);
        long long v36 = *(_OWORD *)(a1 + 64);
        long long v37 = *(_OWORD *)(a1 + 80);
        *(void *)(a5 + 392) = *(void *)(a1 + 96);
        *(_OWORD *)(a5 + 360) = v36;
        *(_OWORD *)(a5 + 376) = v37;
        *(_OWORD *)(a5 + 344) = v35;
        *(_DWORD *)(a5 + 400) = *(_DWORD *)(a1 + 104);
        long long v38 = *(_OWORD *)(a1 + 112);
        *(void *)(a5 + 424) = *(void *)(a1 + 128);
        *(_OWORD *)(a5 + 408) = v38;
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 128) = 0;
        *(void *)(a1 + 112) = 0;
        *(_DWORD *)(a5 + 432) = *(_DWORD *)(a1 + 136);
        long long v39 = *(_OWORD *)(a1 + 144);
        long long v40 = *(_OWORD *)(a1 + 176);
        *(_OWORD *)(a5 + 456) = *(_OWORD *)(a1 + 160);
        *(_OWORD *)(a5 + 472) = v40;
        *(_OWORD *)(a5 + 440) = v39;
        *(void *)(a5 + 488) = *(void *)(a1 + 192);
        *(void *)(a5 + 504) = 0;
        *(void *)(a5 + 512) = 0;
        *(void *)(a5 + 496) = 0;
        *(_OWORD *)(a5 + 496) = *(_OWORD *)(a1 + 200);
        *(void *)(a5 + 512) = *(void *)(a1 + 216);
        *(void *)(a1 + 200) = 0;
        *(void *)(a1 + 208) = 0;
        *(void *)(a1 + 216) = 0;
        void *v21 = 0;
        *(void *)(a5 + 528) = 0;
        *(void *)(a5 + 536) = 0;
        *(_OWORD *)long long v21 = *(_OWORD *)(a1 + 224);
        *(void *)(a5 + 536) = *(void *)(a1 + 240);
        *(void *)(a1 + 224) = 0;
        *(void *)(a1 + 232) = 0;
        *(void *)(a1 + 240) = 0;
        *(void *)(a5 + 552) = 0;
        *(void *)(a5 + 544) = 0;
        *(void *)(a5 + 560) = 0;
        *(_OWORD *)(a5 + 544) = *(_OWORD *)(a1 + 248);
        *(void *)(a5 + 560) = *(void *)(a1 + 264);
        *(void *)(a1 + 248) = 0;
        *(void *)(a1 + 256) = 0;
        *(void *)(a1 + 264) = 0;
        unsigned int v41 = (void *)(a1 + 272);
        *(void *)(a5 + 568) = 0;
        *(void *)(a5 + 576) = 0;
        *(void *)(a5 + 584) = 0;
        *(_OWORD *)(a5 + 568) = *(_OWORD *)(a1 + 272);
        BOOL v42 = (void *)(a1 + 288);
      }
      else
      {
        long long v45 = *(_OWORD *)a1;
        long long v46 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(a5 + 16) = *(_OWORD *)(a1 + 16);
        *(_OWORD *)(a5 + 32) = v46;
        *(_OWORD *)a5 = v45;
        long long v47 = *(_OWORD *)(a1 + 48);
        long long v48 = *(_OWORD *)(a1 + 64);
        long long v49 = *(_OWORD *)(a1 + 80);
        *(void *)(a5 + 96) = *(void *)(a1 + 96);
        *(_OWORD *)(a5 + 64) = v48;
        *(_OWORD *)(a5 + 80) = v49;
        *(_OWORD *)(a5 + 48) = v47;
        *(_DWORD *)(a5 + 104) = *(_DWORD *)(a1 + 104);
        long long v50 = *(_OWORD *)(a1 + 112);
        *(void *)(a5 + 128) = *(void *)(a1 + 128);
        *long long v22 = v50;
        *(void *)(a1 + 120) = 0;
        *(void *)(a1 + 128) = 0;
        *(void *)(a1 + 112) = 0;
        *(_DWORD *)(a5 + 136) = *(_DWORD *)(a1 + 136);
        long long v51 = *(_OWORD *)(a1 + 144);
        long long v52 = *(_OWORD *)(a1 + 176);
        *(_OWORD *)(a5 + 160) = *(_OWORD *)(a1 + 160);
        *(_OWORD *)(a5 + 176) = v52;
        _OWORD *v23 = v51;
        *(void *)(a5 + 192) = *(void *)(a1 + 192);
        *(void *)(a5 + 208) = 0;
        *(void *)(a5 + 216) = 0;
        *long long v24 = 0;
        *(_OWORD *)(a5 + 200) = *(_OWORD *)(a1 + 200);
        *(void *)(a5 + 216) = *(void *)(a1 + 216);
        *(void *)(a1 + 200) = 0;
        *(void *)(a1 + 208) = 0;
        *(void *)(a1 + 216) = 0;
        *(void *)(a5 + 224) = 0;
        *(void *)(a5 + 232) = 0;
        *(void *)(a5 + 240) = 0;
        *(_OWORD *)(a5 + 224) = *(_OWORD *)(a1 + 224);
        *(void *)(a5 + 240) = *(void *)(a1 + 240);
        *(void *)(a1 + 224) = 0;
        *(void *)(a1 + 232) = 0;
        *(void *)(a1 + 240) = 0;
        *(void *)(a5 + 248) = 0;
        *(void *)(a5 + 256) = 0;
        *(void *)(a5 + 264) = 0;
        *(_OWORD *)(a5 + 248) = *(_OWORD *)(a1 + 248);
        *(void *)(a5 + 264) = *(void *)(a1 + 264);
        *(void *)(a1 + 248) = 0;
        *(void *)(a1 + 256) = 0;
        *(void *)(a1 + 264) = 0;
        *(void *)(a5 + 272) = 0;
        *(void *)(a5 + 280) = 0;
        *(void *)(a5 + 288) = 0;
        *(_OWORD *)(a5 + 272) = *(_OWORD *)(a1 + 272);
        *(void *)(a5 + 288) = *(void *)(a1 + 288);
        *(void *)(a1 + 272) = 0;
        *(void *)(a1 + 280) = 0;
        *(void *)(a1 + 288) = 0;
        long long v53 = *v19;
        long long v54 = *(long long *)((char *)a2 - 264);
        *(_OWORD *)(a5 + 312) = *(long long *)((char *)a2 - 280);
        *(_OWORD *)(a5 + 328) = v54;
        *(_OWORD *)(a5 + 296) = v53;
        long long v55 = *(long long *)((char *)a2 - 248);
        long long v56 = *(long long *)((char *)a2 - 232);
        long long v57 = *(long long *)((char *)a2 - 216);
        *(void *)(a5 + 392) = *((void *)a2 - 25);
        *(_OWORD *)(a5 + 360) = v56;
        *(_OWORD *)(a5 + 376) = v57;
        *(_OWORD *)(a5 + 344) = v55;
        *(_DWORD *)(a5 + 400) = *((_DWORD *)a2 - 48);
        long long v58 = *(long long *)((char *)a2 - 184);
        *(void *)(a5 + 424) = *((void *)a2 - 21);
        *(_OWORD *)(a5 + 408) = v58;
        *((void *)a2 - 22) = 0;
        *((void *)a2 - 21) = 0;
        *((void *)a2 - 23) = 0;
        *(_DWORD *)(a5 + 432) = *((_DWORD *)a2 - 40);
        long long v59 = *(long long *)((char *)a2 - 152);
        long long v60 = *(long long *)((char *)a2 - 120);
        *(_OWORD *)(a5 + 456) = *(long long *)((char *)a2 - 136);
        *(_OWORD *)(a5 + 472) = v60;
        *(_OWORD *)(a5 + 440) = v59;
        *(void *)(a5 + 488) = *((void *)a2 - 13);
        *(void *)(a5 + 504) = 0;
        *(void *)(a5 + 512) = 0;
        *(void *)(a5 + 496) = 0;
        *(_OWORD *)(a5 + 496) = *(a2 - 6);
        *(void *)(a5 + 512) = *((void *)a2 - 10);
        *((void *)a2 - 12) = 0;
        *((void *)a2 - 11) = 0;
        *((void *)a2 - 10) = 0;
        void *v21 = 0;
        *(void *)(a5 + 528) = 0;
        *(void *)(a5 + 536) = 0;
        *(_OWORD *)long long v21 = *(long long *)((char *)a2 - 72);
        *(void *)(a5 + 536) = *((void *)a2 - 7);
        *((void *)a2 - 9) = 0;
        *((void *)a2 - 8) = 0;
        *((void *)a2 - 7) = 0;
        *(void *)(a5 + 552) = 0;
        *(void *)(a5 + 544) = 0;
        *(void *)(a5 + 560) = 0;
        *(_OWORD *)(a5 + 544) = *(a2 - 3);
        *(void *)(a5 + 560) = *((void *)a2 - 4);
        *((void *)a2 - 6) = 0;
        *((void *)a2 - 5) = 0;
        *((void *)a2 - 4) = 0;
        *(void *)(a5 + 568) = 0;
        *(void *)(a5 + 576) = 0;
        *(void *)(a5 + 584) = 0;
        long long v61 = *(long long *)((char *)a2 - 24);
        unsigned int v41 = (void *)a2 - 3;
        *(_OWORD *)(a5 + 568) = v61;
        BOOL v42 = v41 + 2;
      }
      *(void *)(a5 + 584) = *v42;
      *unsigned int v41 = 0;
      v41[1] = 0;
      void v41[2] = 0;
    }
    else if (a4 == 1)
    {
      long long v10 = *(_OWORD *)a1;
      long long v11 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a5 + 16) = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(a5 + 32) = v11;
      *(_OWORD *)a5 = v10;
      long long v12 = *(_OWORD *)(a1 + 48);
      long long v13 = *(_OWORD *)(a1 + 64);
      long long v14 = *(_OWORD *)(a1 + 80);
      *(void *)(a5 + 96) = *(void *)(a1 + 96);
      *(_OWORD *)(a5 + 64) = v13;
      *(_OWORD *)(a5 + 80) = v14;
      *(_OWORD *)(a5 + 48) = v12;
      *(_DWORD *)(a5 + 104) = *(_DWORD *)(a1 + 104);
      long long v15 = *(_OWORD *)(a1 + 112);
      *(void *)(a5 + 128) = *(void *)(a1 + 128);
      *(_OWORD *)(a5 + 112) = v15;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 128) = 0;
      *(void *)(a1 + 112) = 0;
      *(_DWORD *)(a5 + 136) = *(_DWORD *)(a1 + 136);
      long long v16 = *(_OWORD *)(a1 + 144);
      long long v17 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a5 + 160) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a5 + 176) = v17;
      *(_OWORD *)(a5 + 144) = v16;
      *(void *)(a5 + 192) = *(void *)(a1 + 192);
      *(void *)(a5 + 208) = 0;
      *(void *)(a5 + 216) = 0;
      *(void *)(a5 + 200) = 0;
      *(_OWORD *)(a5 + 200) = *(_OWORD *)(a1 + 200);
      *(void *)(a5 + 216) = *(void *)(a1 + 216);
      *(void *)(a1 + 200) = 0;
      *(void *)(a1 + 208) = 0;
      *(void *)(a1 + 216) = 0;
      *(void *)(a5 + 224) = 0;
      *(void *)(a5 + 232) = 0;
      *(void *)(a5 + 240) = 0;
      *(_OWORD *)(a5 + 224) = *(_OWORD *)(a1 + 224);
      *(void *)(a5 + 240) = *(void *)(a1 + 240);
      *(void *)(a1 + 224) = 0;
      *(void *)(a1 + 232) = 0;
      *(void *)(a1 + 240) = 0;
      *(void *)(a5 + 248) = 0;
      *(void *)(a5 + 256) = 0;
      *(void *)(a5 + 264) = 0;
      *(_OWORD *)(a5 + 248) = *(_OWORD *)(a1 + 248);
      *(void *)(a5 + 264) = *(void *)(a1 + 264);
      *(void *)(a1 + 248) = 0;
      *(void *)(a1 + 256) = 0;
      *(void *)(a1 + 264) = 0;
      *(void *)(a5 + 272) = 0;
      *(void *)(a5 + 280) = 0;
      *(void *)(a5 + 288) = 0;
      *(_OWORD *)(a5 + 272) = *(_OWORD *)(a1 + 272);
      *(void *)(a5 + 288) = *(void *)(a1 + 288);
      *(void *)(a1 + 272) = 0;
      *(void *)(a1 + 280) = 0;
      *(void *)(a1 + 288) = 0;
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v43 = a4 >> 1;
      uint64_t v44 = 296 * (a4 >> 1);
      sub_B6B700(a1, a1 + v44, a3, a4 >> 1, a5, a4 >> 1);
      sub_B6B700(a1 + v44, a2, a3, a4 - v43, a5 + v44, a4 - v43);
      sub_B6D284((long long *)a1, (long long *)(a1 + v44), (long long *)(a1 + v44), a2, a5, a3);
    }
    else
    {
      sub_B6CBE0(a1, (uint64_t)a2, a5, a3);
    }
  }
}

void sub_B6C4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  if (v10) {
    sub_B6D778(&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B6C504(uint64_t result, long long *a2, long long *a3, long long *a4, uint64_t a5, uint64_t a6)
{
  if ((long long *)result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      uint64_t result = sub_B3E498(a5, a3);
      a3 = (long long *)((char *)a3 + 296);
      a5 += 296;
    }
  }
  else
  {
    long long v11 = (long long *)result;
    while (a3 != a4)
    {
      uint64_t v12 = *(void *)(a6 + 24);
      if (!v12) {
        sub_29F82C();
      }
      if ((*(unsigned int (**)(uint64_t, long long *, long long *))(*(void *)v12 + 48))(v12, a3, v11))
      {
        uint64_t result = sub_B3E498(a5, a3);
        a3 = (long long *)((char *)a3 + 296);
        a5 += 296;
        if (v11 == a2) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t result = sub_B3E498(a5, v11);
        long long v11 = (long long *)((char *)v11 + 296);
        a5 += 296;
        if (v11 == a2) {
          goto LABEL_10;
        }
      }
    }
    if (v11 != a2)
    {
      uint64_t v13 = 0;
      do
      {
        uint64_t result = sub_B3E498(a5 + v13, (long long *)((char *)v11 + v13));
        v13 += 296;
      }
      while ((long long *)((char *)v11 + v13) != a2);
    }
  }
  return result;
}

void sub_B6C61C(uint64_t a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v45 = a6;
  if (a6)
  {
    while (1)
    {
      if (v45 <= a8 || a5 <= a8)
      {
        sub_B6D8D4(a1, a2, a3, a4, a5, v45, a7);
        return;
      }
      if (!a5) {
        return;
      }
      long long v11 = 0;
      uint64_t v12 = -a5;
      while (1)
      {
        uint64_t v13 = *(void *)(a4 + 24);
        if (!v13) {
          sub_29F82C();
        }
        long long v14 = (void *)a4;
        uint64_t v15 = a1;
        if ((*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v13 + 48))(v13, a2, (uint64_t)v11 + a1))break; {
        long long v11 = (long long *)((char *)v11 + 296);
        }
        BOOL v16 = __CFADD__(v12++, 1);
        a4 = (uint64_t)v14;
        a1 = v15;
        if (v16) {
          return;
        }
      }
      uint64_t v17 = v15;
      if (-v12 >= v45)
      {
        if (v12 == -1)
        {
          sub_B63D8C((uint64_t)v11 + v15, a2);
          return;
        }
        if (v12 <= 0) {
          uint64_t v31 = -v12;
        }
        else {
          uint64_t v31 = 1 - v12;
        }
        long long v32 = (void *)v14[3];
        if (v32)
        {
          if (v32 == v14)
          {
            long long v47 = v46;
            (*(void (**)(void *, void *))(*v14 + 24))(v14, v46);
          }
          else
          {
            long long v47 = (void *)(*(uint64_t (**)(void *))(*v32 + 16))(v32);
          }
          uint64_t v17 = v15;
        }
        else
        {
          long long v47 = 0;
        }
        uint64_t v24 = v31 >> 1;
        uint64_t v21 = (uint64_t)v11 + 296 * v24 + v17;
        int v20 = a2;
        if (a2 != a3)
        {
          uint64_t v42 = v24;
          uint64_t v33 = (uint64_t)v11 + 296 * v24 + v17;
          unint64_t v34 = 0x14C1BACF914C1BADLL * (((char *)a3 - (char *)a2) >> 3);
          int v20 = a2;
          do
          {
            if (!v47) {
              sub_29F82C();
            }
            long long v35 = (char *)v20 + 296 * (v34 >> 1);
            int v36 = (*(uint64_t (**)(void *, char *, uint64_t))(*v47 + 48))(v47, v35, v33);
            if (v36) {
              v34 += ~(v34 >> 1);
            }
            else {
              v34 >>= 1;
            }
            if (v36) {
              int v20 = (long long *)(v35 + 296);
            }
          }
          while (v34);
          uint64_t v21 = v33;
          uint64_t v24 = v42;
        }
        if (v47 == v46)
        {
          (*(void (**)(void *))(v46[0] + 32))(v46);
        }
        else if (v47)
        {
          (*(void (**)(void))(*v47 + 40))();
        }
        uint64_t v41 = 0x14C1BACF914C1BADLL * (((char *)v20 - (char *)a2) >> 3);
        long long v38 = (long long *)v21;
        if ((long long *)v21 != a2)
        {
LABEL_24:
          if (v20 == a2)
          {
            uint64_t v25 = v21;
          }
          else
          {
            sub_B63D8C(v21, a2);
            uint64_t v25 = v21 + 296;
            for (uint64_t i = (long long *)((char *)a2 + 296); i != v20; uint64_t i = (long long *)((char *)i + 296))
            {
              if ((long long *)v25 == a2) {
                a2 = i;
              }
              sub_B63D8C(v25, i);
              v25 += 296;
            }
            if ((long long *)v25 != a2)
            {
              uint64_t v27 = v25;
              long long v28 = a2;
              while (1)
              {
                sub_B63D8C(v27, v28);
                long long v28 = (long long *)((char *)v28 + 296);
                BOOL v29 = v27 + 296 == (void)a2;
                if (v28 == v20)
                {
                  if ((long long *)(v27 + 296) == a2) {
                    goto LABEL_69;
                  }
                  long long v28 = (long long *)((char *)a2 + 296);
                  v27 += 592;
                  while (1)
                  {
                    sub_B63D8C(v27 - 296, a2);
                    BOOL v29 = v27 == (void)a2;
                    if (v28 != v20) {
                      break;
                    }
                    BOOL v30 = v27 == (void)a2;
                    v27 += 296;
                    if (v30) {
                      goto LABEL_69;
                    }
                  }
                }
                else
                {
                  v27 += 296;
                }
                if (v29) {
                  a2 = v28;
                }
              }
            }
          }
          goto LABEL_69;
        }
      }
      else
      {
        if (v45 >= 0) {
          uint64_t v18 = v45;
        }
        else {
          uint64_t v18 = v45 + 1;
        }
        uint64_t v19 = v18 >> 1;
        int v20 = (long long *)((char *)a2 + 296 * (v18 >> 1));
        uint64_t v21 = (uint64_t)a2;
        if ((long long *)((char *)a2 - v15) != v11)
        {
          uint64_t v40 = v18 >> 1;
          unint64_t v22 = 0x14C1BACF914C1BADLL * (((char *)a2 - v15 - (char *)v11) >> 3);
          uint64_t v21 = (uint64_t)v11 + v15;
          do
          {
            uint64_t v23 = v14[3];
            if (!v23) {
              sub_29F82C();
            }
            if ((*(unsigned int (**)(uint64_t, long long *, unint64_t))(*(void *)v23 + 48))(v23, v20, v21 + 296 * (v22 >> 1)))
            {
              v22 >>= 1;
            }
            else
            {
              v21 += 296 * (v22 >> 1) + 296;
              v22 += ~(v22 >> 1);
            }
          }
          while (v22);
          uint64_t v17 = v15;
          uint64_t v19 = v40;
        }
        uint64_t v24 = 0x14C1BACF914C1BADLL * ((v21 - v17 - (uint64_t)v11) >> 3);
        uint64_t v41 = v19;
        long long v38 = (long long *)v21;
        if ((long long *)v21 != a2) {
          goto LABEL_24;
        }
      }
      uint64_t v25 = (uint64_t)v20;
LABEL_69:
      a5 = -v24 - v12;
      uint64_t v37 = v45 - v41;
      if (v24 + v41 >= v45 - (v24 + v41) - v12)
      {
        sub_B6C61C(v25, v20, a3, v14, -v24 - v12, v45 - v41, a7, a8);
        a2 = v38;
        a5 = v24;
        a3 = (long long *)v25;
        a1 = (uint64_t)v11 + v15;
        uint64_t v45 = v41;
        a4 = (uint64_t)v14;
        if (!v41) {
          return;
        }
      }
      else
      {
        sub_B6C61C((char *)v11 + v15, v38, v25, v14, v24, v41, a7, a8);
        a1 = v25;
        a2 = v20;
        v45 -= v41;
        a4 = (uint64_t)v14;
        if (!v37) {
          return;
        }
      }
    }
  }
}

void sub_B6CBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_B6B670((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B6CBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_B6B670((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B6CBE0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    long long v6 = *(_OWORD *)result;
    long long v7 = *(_OWORD *)(result + 32);
    *(_OWORD *)(a3 + 16) = *(_OWORD *)(result + 16);
    *(_OWORD *)(a3 + 32) = v7;
    *(_OWORD *)a3 = v6;
    long long v8 = *(_OWORD *)(result + 48);
    long long v9 = *(_OWORD *)(result + 64);
    long long v10 = *(_OWORD *)(result + 80);
    *(void *)(a3 + 96) = *(void *)(result + 96);
    *(_OWORD *)(a3 + 64) = v9;
    *(_OWORD *)(a3 + 80) = v10;
    *(_OWORD *)(a3 + 48) = v8;
    *(_DWORD *)(a3 + 104) = *(_DWORD *)(result + 104);
    long long v11 = *(_OWORD *)(result + 112);
    *(void *)(a3 + 128) = *(void *)(result + 128);
    *(_OWORD *)(a3 + 112) = v11;
    *(void *)(result + 120) = 0;
    *(void *)(result + 128) = 0;
    *(void *)(result + 112) = 0;
    *(_DWORD *)(a3 + 136) = *(_DWORD *)(result + 136);
    long long v12 = *(_OWORD *)(result + 144);
    long long v13 = *(_OWORD *)(result + 176);
    *(_OWORD *)(a3 + 160) = *(_OWORD *)(result + 160);
    *(_OWORD *)(a3 + 176) = v13;
    *(_OWORD *)(a3 + 144) = v12;
    *(void *)(a3 + 192) = *(void *)(result + 192);
    *(void *)(a3 + 208) = 0;
    *(void *)(a3 + 216) = 0;
    *(void *)(a3 + 200) = 0;
    *(_OWORD *)(a3 + 200) = *(_OWORD *)(result + 200);
    *(void *)(a3 + 216) = *(void *)(result + 216);
    *(void *)(result + 200) = 0;
    *(void *)(result + 208) = 0;
    *(void *)(result + 216) = 0;
    *(void *)(a3 + 224) = 0;
    *(void *)(a3 + 232) = 0;
    *(void *)(a3 + 240) = 0;
    *(_OWORD *)(a3 + 224) = *(_OWORD *)(result + 224);
    *(void *)(a3 + 240) = *(void *)(result + 240);
    *(void *)(result + 224) = 0;
    *(void *)(result + 232) = 0;
    *(void *)(result + 240) = 0;
    *(void *)(a3 + 248) = 0;
    *(void *)(a3 + 256) = 0;
    *(void *)(a3 + 264) = 0;
    *(_OWORD *)(a3 + 248) = *(_OWORD *)(result + 248);
    *(void *)(a3 + 264) = *(void *)(result + 264);
    *(void *)(result + 248) = 0;
    *(void *)(result + 256) = 0;
    *(void *)(result + 264) = 0;
    *(void *)(a3 + 272) = 0;
    *(void *)(a3 + 280) = 0;
    *(void *)(a3 + 288) = 0;
    *(_OWORD *)(a3 + 272) = *(_OWORD *)(result + 272);
    *(void *)(a3 + 288) = *(void *)(result + 288);
    *(void *)(result + 272) = 0;
    *(void *)(result + 280) = 0;
    *(void *)(result + 288) = 0;
    uint64_t v65 = 1;
    uint64_t v14 = result + 296;
    if (result + 296 != a2)
    {
      uint64_t v16 = a3;
      do
      {
        while (1)
        {
          uint64_t v25 = *(void *)(a4 + 24);
          if (!v25) {
LABEL_45:
          }
            sub_29F82C();
          uint64_t v26 = v14;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v25 + 48))(v25, v14, v16);
          uint64_t v27 = (long long *)(v16 + 296);
          long long v28 = (_OWORD *)(v16 + 408);
          BOOL v29 = (_OWORD *)(v16 + 440);
          if (result) {
            break;
          }
          long long v17 = *(_OWORD *)v26;
          long long v18 = *(_OWORD *)(v26 + 32);
          *(_OWORD *)(v16 + 312) = *(_OWORD *)(v26 + 16);
          *(_OWORD *)(v16 + 328) = v18;
          *uint64_t v27 = v17;
          long long v19 = *(_OWORD *)(v26 + 48);
          long long v20 = *(_OWORD *)(v26 + 64);
          long long v21 = *(_OWORD *)(v26 + 80);
          *(void *)(v16 + 392) = *(void *)(v26 + 96);
          *(_OWORD *)(v16 + 360) = v20;
          *(_OWORD *)(v16 + 376) = v21;
          *(_OWORD *)(v16 + 344) = v19;
          *(_DWORD *)(v16 + 400) = *(_DWORD *)(v5 + 400);
          long long v22 = *(_OWORD *)(v5 + 408);
          *(void *)(v16 + 424) = *(void *)(v5 + 424);
          *long long v28 = v22;
          *(void *)(v5 + 416) = 0;
          *(void *)(v5 + 424) = 0;
          *(void *)(v5 + 408) = 0;
          *(_DWORD *)(v16 + 432) = *(_DWORD *)(v5 + 432);
          long long v23 = *(_OWORD *)(v5 + 440);
          long long v24 = *(_OWORD *)(v5 + 472);
          *(_OWORD *)(v16 + 456) = *(_OWORD *)(v5 + 456);
          *(_OWORD *)(v16 + 472) = v24;
          *BOOL v29 = v23;
          *(void *)(v16 + 488) = *(void *)(v5 + 488);
          *(void *)(v16 + 504) = 0;
          *(void *)(v16 + 512) = 0;
          *(void *)(v16 + 496) = 0;
          *(_OWORD *)(v16 + 496) = *(_OWORD *)(v5 + 496);
          *(void *)(v16 + 512) = *(void *)(v5 + 512);
          *(void *)(v5 + 496) = 0;
          *(void *)(v5 + 504) = 0;
          *(void *)(v5 + 512) = 0;
          *(void *)(v16 + 528) = 0;
          *(void *)(v16 + 520) = 0;
          *(void *)(v16 + 536) = 0;
          *(void *)(v16 + 520) = *(void *)(v5 + 520);
          *(void *)(v16 + 528) = *(void *)(v5 + 528);
          *(void *)(v16 + 536) = *(void *)(v5 + 536);
          *(void *)(v5 + 528) = 0;
          *(void *)(v5 + 520) = 0;
          *(void *)(v5 + 536) = 0;
          *(void *)(v16 + 552) = 0;
          *(void *)(v16 + 544) = 0;
          *(void *)(v16 + 560) = 0;
          *(_OWORD *)(v16 + 544) = *(_OWORD *)(v5 + 544);
          *(void *)(v16 + 560) = *(void *)(v5 + 560);
          *(void *)(v5 + 552) = 0;
          *(void *)(v5 + 544) = 0;
          *(void *)(v5 + 560) = 0;
          *(void *)(v16 + 576) = 0;
          *(void *)(v16 + 568) = 0;
          *(void *)(v16 + 584) = 0;
          *(void *)(v16 + 568) = *(void *)(v5 + 568);
          *(void *)(v16 + 576) = *(void *)(v5 + 576);
          *(void *)(v16 + 584) = *(void *)(v5 + 584);
          *(void *)(v5 + 576) = 0;
          *(void *)(v5 + 568) = 0;
          *(void *)(v5 + 584) = 0;
          ++v65;
          uint64_t v14 = v26 + 296;
          v16 += 296;
          uint64_t v5 = v26;
          if (v26 + 296 == a2) {
            return result;
          }
        }
        long long v30 = *(_OWORD *)(v16 + 80);
        *(_OWORD *)(v16 + 360) = *(_OWORD *)(v16 + 64);
        *(_OWORD *)(v16 + 376) = v30;
        *(void *)(v16 + 392) = *(void *)(v16 + 96);
        long long v31 = *(_OWORD *)(v16 + 16);
        *uint64_t v27 = *(_OWORD *)v16;
        *(_OWORD *)(v16 + 312) = v31;
        long long v32 = *(_OWORD *)(v16 + 48);
        *(_OWORD *)(v16 + 328) = *(_OWORD *)(v16 + 32);
        *(_OWORD *)(v16 + 344) = v32;
        uint64_t v62 = v16 + 296;
        *(_DWORD *)(v16 + 400) = *(_DWORD *)(v16 + 104);
        long long v33 = *(_OWORD *)(v16 + 112);
        *(void *)(v16 + 424) = *(void *)(v16 + 128);
        *long long v28 = v33;
        *(void *)(v16 + 120) = 0;
        *(void *)(v16 + 128) = 0;
        *(void *)(v16 + 112) = 0;
        *(_DWORD *)(v16 + 432) = *(_DWORD *)(v16 + 136);
        long long v34 = *(_OWORD *)(v16 + 176);
        long long v35 = *(_OWORD *)(v16 + 144);
        *(_OWORD *)(v16 + 456) = *(_OWORD *)(v16 + 160);
        *(_OWORD *)(v16 + 472) = v34;
        *BOOL v29 = v35;
        *(void *)(v16 + 488) = *(void *)(v16 + 192);
        *(_OWORD *)(v16 + 496) = *(_OWORD *)(v16 + 200);
        *(void *)(v16 + 512) = *(void *)(v16 + 216);
        *(void *)(v16 + 200) = 0;
        *(void *)(v16 + 208) = 0;
        *(_OWORD *)(v16 + 520) = *(_OWORD *)(v16 + 224);
        *(void *)(v16 + 536) = *(void *)(v16 + 240);
        *(void *)(v16 + 216) = 0;
        *(void *)(v16 + 224) = 0;
        *(void *)(v16 + 232) = 0;
        *(void *)(v16 + 240) = 0;
        *(_OWORD *)(v16 + 544) = *(_OWORD *)(v16 + 248);
        *(void *)(v16 + 560) = *(void *)(v16 + 264);
        *(void *)(v16 + 248) = 0;
        *(void *)(v16 + 256) = 0;
        *(_OWORD *)(v16 + 568) = *(_OWORD *)(v16 + 272);
        *(void *)(v16 + 584) = *(void *)(v16 + 288);
        *(void *)(v16 + 264) = 0;
        *(void *)(v16 + 272) = 0;
        *(void *)(v16 + 280) = 0;
        *(void *)(v16 + 288) = 0;
        uint64_t v36 = a3;
        ++v65;
        if (v16 != a3)
        {
          uint64_t v64 = v26;
          do
          {
            uint64_t v37 = *(void *)(a4 + 24);
            if (!v37) {
              goto LABEL_45;
            }
            long long v38 = (_OWORD *)(v16 - 296);
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v37 + 48))(v37, v26, v16 - 296))
            {
              uint64_t v36 = v16;
              goto LABEL_43;
            }
            long long v39 = *(_OWORD *)(v16 - 216);
            *(_OWORD *)(v16 + 64) = *(_OWORD *)(v16 - 232);
            *(_OWORD *)(v16 + 80) = v39;
            *(void *)(v16 + 96) = *(void *)(v16 - 200);
            long long v40 = *(_OWORD *)(v16 - 280);
            *(_OWORD *)uint64_t v16 = *v38;
            *(_OWORD *)(v16 + 16) = v40;
            long long v41 = *(_OWORD *)(v16 - 248);
            *(_OWORD *)(v16 + 32) = *(_OWORD *)(v16 - 264);
            *(_OWORD *)(v16 + 48) = v41;
            *(_DWORD *)(v16 + 104) = *(_DWORD *)(v16 - 192);
            uint64_t v42 = (void **)(v16 + 112);
            if (*(char *)(v16 + 135) < 0) {
              operator delete(*v42);
            }
            unint64_t v43 = (void **)(v16 + 200);
            uint64_t v44 = *(void ***)(v16 + 200);
            *(_OWORD *)uint64_t v42 = *(_OWORD *)(v16 - 184);
            *(void *)(v16 + 128) = *(void *)(v16 - 168);
            *(unsigned char *)(v16 - 161) = 0;
            *(unsigned char *)(v16 - 184) = 0;
            *(_DWORD *)(v16 + 136) = *(_DWORD *)(v16 - 160);
            *(_OWORD *)(v16 + 144) = *(_OWORD *)(v16 - 152);
            *(_OWORD *)(v16 + 160) = *(_OWORD *)(v16 - 136);
            *(_OWORD *)(v16 + 176) = *(_OWORD *)(v16 - 120);
            *(void *)(v16 + 192) = *(void *)(v16 - 104);
            if (v44)
            {
              uint64_t v45 = *(void ***)(v16 + 208);
              long long v46 = v44;
              if (v45 != v44)
              {
                uint64_t v47 = a4;
                do
                {
                  long long v49 = *(v45 - 5);
                  if (v49)
                  {
                    *(v45 - 4) = v49;
                    operator delete(v49);
                  }
                  long long v50 = v45 - 9;
                  long long v51 = (char *)*(v45 - 9);
                  if (v51)
                  {
                    long long v52 = (char *)*(v45 - 8);
                    long long v48 = *(v45 - 9);
                    if (v52 != v51)
                    {
                      do
                      {
                        if (!*((_DWORD *)v52 - 2))
                        {
                          long long v53 = (void *)*((void *)v52 - 6);
                          if (v53)
                          {
                            *((void *)v52 - 5) = v53;
                            operator delete(v53);
                          }
                          long long v54 = (void *)*((void *)v52 - 10);
                          if (v54)
                          {
                            *((void *)v52 - 9) = v54;
                            operator delete(v54);
                          }
                          long long v55 = (void *)*((void *)v52 - 13);
                          if (v55)
                          {
                            *((void *)v52 - 12) = v55;
                            operator delete(v55);
                          }
                        }
                        v52 -= 168;
                      }
                      while (v52 != v51);
                      long long v48 = *v50;
                    }
                    *(v45 - 8) = v51;
                    operator delete(v48);
                  }
                  v45 -= 9;
                }
                while (v50 != v44);
                long long v46 = *v43;
                a4 = v47;
                uint64_t v26 = v64;
              }
              *(void *)(v16 + 208) = v44;
              operator delete(v46);
              void *v43 = 0;
              *(void *)(v16 + 208) = 0;
              *(void *)(v16 + 216) = 0;
            }
            long long v56 = (void *)(v16 - 96);
            long long v57 = *(void **)(v16 + 224);
            *(_OWORD *)(v16 + 200) = *(_OWORD *)(v16 - 96);
            *(void *)(v16 + 216) = *(void *)(v16 - 80);
            v56[1] = 0;
            void v56[2] = 0;
            *long long v56 = 0;
            if (v57)
            {
              *(void *)(v16 + 232) = v57;
              operator delete(v57);
              *(void *)(v16 + 224) = 0;
              *(void *)(v16 + 232) = 0;
              *(void *)(v16 + 240) = 0;
            }
            long long v58 = (void *)(v16 - 72);
            long long v59 = *(void **)(v16 + 248);
            *(_OWORD *)(v16 + 224) = *(_OWORD *)(v16 - 72);
            *(void *)(v16 + 240) = *(void *)(v16 - 56);
            v58[1] = 0;
            v58[2] = 0;
            void *v58 = 0;
            if (v59)
            {
              *(void *)(v16 + 256) = v59;
              operator delete(v59);
              *(void *)(v16 + 248) = 0;
              *(void *)(v16 + 256) = 0;
              *(void *)(v16 + 264) = 0;
            }
            long long v60 = (void *)(v16 - 48);
            *(_OWORD *)(v16 + 248) = *(_OWORD *)(v16 - 48);
            *(void *)(v16 + 264) = *(void *)(v16 - 32);
            v60[1] = 0;
            v60[2] = 0;
            void *v60 = 0;
            long long v61 = *(void **)(v16 + 272);
            if (v61)
            {
              *(void *)(v16 + 280) = v61;
              operator delete(v61);
              *(void *)(v16 + 272) = 0;
              *(void *)(v16 + 280) = 0;
              *(void *)(v16 + 288) = 0;
            }
            *(_OWORD *)(v16 + 272) = *(_OWORD *)(v16 - 24);
            *(void *)(v16 + 288) = *(void *)(v16 - 8);
            *(void *)(v16 - 16) = 0;
            *(void *)(v16 - 8) = 0;
            *(void *)(v16 - 24) = 0;
            v16 -= 296;
          }
          while (v38 != (_OWORD *)a3);
          uint64_t v36 = a3;
        }
LABEL_43:
        uint64_t result = sub_B3E498(v36, (long long *)v26);
        uint64_t v14 = v26 + 296;
        uint64_t v16 = v62;
        uint64_t v5 = v26;
      }
      while (v26 + 296 != a2);
    }
  }
  return result;
}

void sub_B6D260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (v12) {
    sub_B6D778(&a12, v12);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_B6D284(long long *a1, long long *a2, long long *a3, long long *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v57 = 0;
  if (a1 == a2)
  {
LABEL_15:
    while (a3 != a4)
    {
      long long v49 = *a3;
      long long v50 = a3[2];
      *(_OWORD *)(a5 + 16) = a3[1];
      *(_OWORD *)(a5 + 32) = v50;
      *(_OWORD *)a5 = v49;
      long long v51 = a3[3];
      long long v52 = a3[4];
      long long v53 = a3[5];
      *(void *)(a5 + 96) = *((void *)a3 + 12);
      *(_OWORD *)(a5 + 64) = v52;
      *(_OWORD *)(a5 + 80) = v53;
      *(_OWORD *)(a5 + 48) = v51;
      *(_DWORD *)(a5 + 104) = *((_DWORD *)a3 + 26);
      long long v54 = a3[7];
      *(void *)(a5 + 128) = *((void *)a3 + 16);
      *(_OWORD *)(a5 + 112) = v54;
      *((void *)a3 + 15) = 0;
      *((void *)a3 + 16) = 0;
      *((void *)a3 + 14) = 0;
      *(_DWORD *)(a5 + 136) = *((_DWORD *)a3 + 34);
      long long v55 = a3[9];
      long long v56 = a3[11];
      *(_OWORD *)(a5 + 160) = a3[10];
      *(_OWORD *)(a5 + 176) = v56;
      *(_OWORD *)(a5 + 144) = v55;
      *(void *)(a5 + 192) = *((void *)a3 + 24);
      *(void *)(a5 + 208) = 0;
      *(void *)(a5 + 216) = 0;
      *(void *)(a5 + 200) = 0;
      *(_OWORD *)(a5 + 200) = *(long long *)((char *)a3 + 200);
      *(void *)(a5 + 216) = *((void *)a3 + 27);
      *((void *)a3 + 25) = 0;
      *((void *)a3 + 26) = 0;
      *((void *)a3 + 27) = 0;
      *(void *)(a5 + 224) = 0;
      *(void *)(a5 + 232) = 0;
      *(void *)(a5 + 240) = 0;
      *(_OWORD *)(a5 + 224) = a3[14];
      *(void *)(a5 + 240) = *((void *)a3 + 30);
      *((void *)a3 + 28) = 0;
      *((void *)a3 + 29) = 0;
      *((void *)a3 + 30) = 0;
      *(void *)(a5 + 248) = 0;
      *(void *)(a5 + 256) = 0;
      *(void *)(a5 + 264) = 0;
      *(_OWORD *)(a5 + 248) = *(long long *)((char *)a3 + 248);
      *(void *)(a5 + 264) = *((void *)a3 + 33);
      *((void *)a3 + 31) = 0;
      *((void *)a3 + 32) = 0;
      *((void *)a3 + 33) = 0;
      *(void *)(a5 + 272) = 0;
      *(void *)(a5 + 280) = 0;
      *(void *)(a5 + 288) = 0;
      __n128 result = (__n128)a3[17];
      *(__n128 *)(a5 + 272) = result;
      *(void *)(a5 + 288) = *((void *)a3 + 36);
      *((void *)a3 + 34) = 0;
      *((void *)a3 + 35) = 0;
      *((void *)a3 + 36) = 0;
      a3 = (long long *)((char *)a3 + 296);
      a5 += 296;
    }
  }
  else
  {
    long long v11 = a1;
    uint64_t v12 = 0;
    while (a3 != a4)
    {
      uint64_t v22 = *(void *)(a6 + 24);
      if (!v22) {
        sub_29F82C();
      }
      int v23 = (*(uint64_t (**)(uint64_t, long long *, long long *))(*(void *)v22 + 48))(v22, a3, v11);
      uint64_t v24 = a5 + v12;
      uint64_t v25 = a5 + v12;
      uint64_t v26 = (_OWORD *)(a5 + v12 + 112);
      uint64_t v27 = (_OWORD *)(a5 + v12 + 144);
      long long v28 = (void *)(a5 + v12 + 200);
      if (v23)
      {
        long long v29 = *a3;
        long long v30 = a3[2];
        *(_OWORD *)(v24 + 16) = a3[1];
        *(_OWORD *)(v24 + 32) = v30;
        *(_OWORD *)uint64_t v24 = v29;
        long long v31 = a3[3];
        long long v32 = a3[4];
        long long v33 = a3[5];
        *(void *)(v24 + 96) = *((void *)a3 + 12);
        *(_OWORD *)(v24 + 64) = v32;
        *(_OWORD *)(v24 + 80) = v33;
        *(_OWORD *)(v24 + 48) = v31;
        *(_DWORD *)(v25 + 104) = *((_DWORD *)a3 + 26);
        long long v34 = a3[7];
        *(void *)(a5 + v12 + 128) = *((void *)a3 + 16);
        *uint64_t v26 = v34;
        *((void *)a3 + 15) = 0;
        *((void *)a3 + 16) = 0;
        *((void *)a3 + 14) = 0;
        *(_DWORD *)(v25 + 136) = *((_DWORD *)a3 + 34);
        long long v35 = a3[9];
        long long v36 = a3[11];
        *(_OWORD *)(a5 + v12 + 160) = a3[10];
        *(_OWORD *)(a5 + v12 + 176) = v36;
        *uint64_t v27 = v35;
        *(void *)(v25 + 192) = *((void *)a3 + 24);
        *(void *)(a5 + v12 + 208) = 0;
        *(void *)(a5 + v12 + 216) = 0;
        *long long v28 = 0;
        *(_OWORD *)(v25 + 200) = *(long long *)((char *)a3 + 200);
        *(void *)(v25 + 216) = *((void *)a3 + 27);
        *((void *)a3 + 25) = 0;
        *((void *)a3 + 26) = 0;
        *((void *)a3 + 27) = 0;
        *(void *)(v25 + 224) = 0;
        *(void *)(v25 + 232) = 0;
        *(void *)(v25 + 240) = 0;
        *(_OWORD *)(v25 + 224) = a3[14];
        *(void *)(v25 + 240) = *((void *)a3 + 30);
        *((void *)a3 + 28) = 0;
        *((void *)a3 + 29) = 0;
        *((void *)a3 + 30) = 0;
        *(void *)(v25 + 248) = 0;
        *(void *)(v25 + 256) = 0;
        *(void *)(v25 + 264) = 0;
        *(_OWORD *)(v25 + 248) = *(long long *)((char *)a3 + 248);
        *(void *)(v25 + 264) = *((void *)a3 + 33);
        *((void *)a3 + 31) = 0;
        *((void *)a3 + 32) = 0;
        *((void *)a3 + 33) = 0;
        *(void *)(v25 + 272) = 0;
        *(void *)(v25 + 280) = 0;
        *(void *)(v25 + 288) = 0;
        __n128 result = (__n128)a3[17];
        *(__n128 *)(v25 + 272) = result;
        *(void *)(v25 + 288) = *((void *)a3 + 36);
        *((void *)a3 + 34) = 0;
        *((void *)a3 + 35) = 0;
        *((void *)a3 + 36) = 0;
        a3 = (long long *)((char *)a3 + 296);
      }
      else
      {
        long long v13 = *v11;
        long long v14 = v11[2];
        *(_OWORD *)(v24 + 16) = v11[1];
        *(_OWORD *)(v24 + 32) = v14;
        *(_OWORD *)uint64_t v24 = v13;
        long long v15 = v11[3];
        long long v16 = v11[4];
        long long v17 = v11[5];
        *(void *)(v24 + 96) = *((void *)v11 + 12);
        *(_OWORD *)(v24 + 64) = v16;
        *(_OWORD *)(v24 + 80) = v17;
        *(_OWORD *)(v24 + 48) = v15;
        *(_DWORD *)(v25 + 104) = *((_DWORD *)v11 + 26);
        long long v18 = v11[7];
        *(void *)(a5 + v12 + 128) = *((void *)v11 + 16);
        *uint64_t v26 = v18;
        *((void *)v11 + 15) = 0;
        *((void *)v11 + 16) = 0;
        *((void *)v11 + 14) = 0;
        *(_DWORD *)(v25 + 136) = *((_DWORD *)v11 + 34);
        long long v19 = v11[9];
        long long v20 = v11[11];
        *(_OWORD *)(a5 + v12 + 160) = v11[10];
        *(_OWORD *)(a5 + v12 + 176) = v20;
        *uint64_t v27 = v19;
        *(void *)(v25 + 192) = *((void *)v11 + 24);
        *(void *)(a5 + v12 + 208) = 0;
        *(void *)(a5 + v12 + 216) = 0;
        *long long v28 = 0;
        *(_OWORD *)(v25 + 200) = *(long long *)((char *)v11 + 200);
        *(void *)(v25 + 216) = *((void *)v11 + 27);
        *((void *)v11 + 25) = 0;
        *((void *)v11 + 26) = 0;
        *((void *)v11 + 27) = 0;
        *(void *)(v25 + 224) = 0;
        *(void *)(v25 + 232) = 0;
        *(void *)(v25 + 240) = 0;
        *(_OWORD *)(v25 + 224) = v11[14];
        *(void *)(v25 + 240) = *((void *)v11 + 30);
        *((void *)v11 + 28) = 0;
        *((void *)v11 + 29) = 0;
        *((void *)v11 + 30) = 0;
        *(void *)(v25 + 248) = 0;
        *(void *)(v25 + 256) = 0;
        *(void *)(v25 + 264) = 0;
        *(_OWORD *)(v25 + 248) = *(long long *)((char *)v11 + 248);
        *(void *)(v25 + 264) = *((void *)v11 + 33);
        *((void *)v11 + 31) = 0;
        *((void *)v11 + 32) = 0;
        *((void *)v11 + 33) = 0;
        *(void *)(v25 + 272) = 0;
        *(void *)(v25 + 280) = 0;
        *(void *)(v25 + 288) = 0;
        __n128 result = (__n128)v11[17];
        *(__n128 *)(v25 + 272) = result;
        *(void *)(v25 + 288) = *((void *)v11 + 36);
        *((void *)v11 + 34) = 0;
        *((void *)v11 + 35) = 0;
        *((void *)v11 + 36) = 0;
        long long v11 = (long long *)((char *)v11 + 296);
      }
      ++v57;
      v12 += 296;
      if (v11 == a2)
      {
        a5 += v12;
        goto LABEL_15;
      }
    }
    if (v11 != a2)
    {
      uint64_t v37 = 0;
      do
      {
        long long v38 = (void *)((char *)v11 + v37);
        uint64_t v39 = a5 + v12 + v37;
        long long v40 = *(long long *)((char *)v11 + v37);
        long long v41 = *(long long *)((char *)v11 + v37 + 32);
        *(_OWORD *)(v39 + 16) = *(long long *)((char *)v11 + v37 + 16);
        *(_OWORD *)(v39 + 32) = v41;
        *(_OWORD *)uint64_t v39 = v40;
        long long v42 = *(long long *)((char *)v11 + v37 + 48);
        long long v43 = *(long long *)((char *)v11 + v37 + 64);
        long long v44 = *(long long *)((char *)v11 + v37 + 80);
        *(void *)(v39 + 96) = *(void *)((char *)v11 + v37 + 96);
        *(_OWORD *)(v39 + 64) = v43;
        *(_OWORD *)(v39 + 80) = v44;
        *(_OWORD *)(v39 + 48) = v42;
        uint64_t v45 = a5 + v37 + v12;
        *(_DWORD *)(v45 + 104) = *(_DWORD *)((char *)v11 + v37 + 104);
        long long v46 = *(long long *)((char *)v11 + v37 + 112);
        *(void *)(v45 + 128) = *(void *)((char *)v11 + v37 + 128);
        *(_OWORD *)(v45 + 112) = v46;
        v38[15] = 0;
        v38[16] = 0;
        v38[14] = 0;
        *(_DWORD *)(v45 + 136) = *(_DWORD *)((char *)v11 + v37 + 136);
        long long v47 = *(long long *)((char *)v11 + v37 + 144);
        long long v48 = *(long long *)((char *)v11 + v37 + 176);
        *(_OWORD *)(v39 + 160) = *(long long *)((char *)v11 + v37 + 160);
        *(_OWORD *)(v39 + 176) = v48;
        *(_OWORD *)(v39 + 144) = v47;
        *(void *)&long long v47 = *(void *)((char *)v11 + v37 + 192);
        *(void *)(v45 + 208) = 0;
        *(void *)(v45 + 216) = 0;
        *(void *)(v45 + 192) = v47;
        *(void *)(v45 + 200) = 0;
        *(_OWORD *)(v45 + 200) = *(long long *)((char *)v11 + v37 + 200);
        *(void *)(v45 + 216) = *(void *)((char *)v11 + v37 + 216);
        v38[25] = 0;
        v38[26] = 0;
        v38[27] = 0;
        *(void *)(v45 + 224) = 0;
        *(void *)(v45 + 232) = 0;
        *(void *)(v45 + 240) = 0;
        *(_OWORD *)(v45 + 224) = *(long long *)((char *)v11 + v37 + 224);
        *(void *)(v45 + 240) = *(void *)((char *)v11 + v37 + 240);
        v38[28] = 0;
        v38[29] = 0;
        v38[30] = 0;
        *(void *)(v45 + 248) = 0;
        *(void *)(v45 + 256) = 0;
        *(void *)(v45 + 264) = 0;
        *(_OWORD *)(v45 + 248) = *(long long *)((char *)v11 + v37 + 248);
        *(void *)(v45 + 264) = *(void *)((char *)v11 + v37 + 264);
        v38[31] = 0;
        v38[32] = 0;
        v38[33] = 0;
        *(void *)(v45 + 272) = 0;
        *(void *)(v45 + 280) = 0;
        *(void *)(v45 + 288) = 0;
        __n128 result = *(__n128 *)((char *)v11 + v37 + 272);
        *(__n128 *)(v45 + 272) = result;
        *(void *)(v45 + 288) = *(void *)((char *)v11 + v37 + 288);
        v38[34] = 0;
        v38[35] = 0;
        v38[36] = 0;
        v37 += 296;
      }
      while (v38 + 37 != (void *)a2);
    }
  }
  return result;
}

void sub_B6D758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  if (v10) {
    sub_B6D778(&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_B6D778(unint64_t *a1, uint64_t a2)
{
  if (*a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void **)(a2 + 272);
      if (v5)
      {
        *(void *)(a2 + 280) = v5;
        operator delete(v5);
      }
      long long v6 = *(void **)(a2 + 248);
      if (v6)
      {
        *(void *)(a2 + 256) = v6;
        operator delete(v6);
      }
      long long v7 = *(void **)(a2 + 224);
      if (v7)
      {
        *(void *)(a2 + 232) = v7;
        operator delete(v7);
      }
      long long v8 = *(void ***)(a2 + 200);
      if (v8)
      {
        long long v9 = *(void ***)(a2 + 208);
        uint64_t v10 = *(void **)(a2 + 200);
        if (v9 != v8)
        {
          do
          {
            uint64_t v12 = *(v9 - 5);
            if (v12)
            {
              *(v9 - 4) = v12;
              operator delete(v12);
            }
            long long v13 = v9 - 9;
            long long v14 = (char *)*(v9 - 9);
            if (v14)
            {
              long long v15 = (char *)*(v9 - 8);
              long long v11 = *(v9 - 9);
              if (v15 != v14)
              {
                do
                {
                  if (!*((_DWORD *)v15 - 2))
                  {
                    long long v16 = (void *)*((void *)v15 - 6);
                    if (v16)
                    {
                      *((void *)v15 - 5) = v16;
                      operator delete(v16);
                    }
                    long long v17 = (void *)*((void *)v15 - 10);
                    if (v17)
                    {
                      *((void *)v15 - 9) = v17;
                      operator delete(v17);
                    }
                    long long v18 = (void *)*((void *)v15 - 13);
                    if (v18)
                    {
                      *((void *)v15 - 12) = v18;
                      operator delete(v18);
                    }
                  }
                  v15 -= 168;
                }
                while (v15 != v14);
                long long v11 = *v13;
              }
              *(v9 - 8) = v14;
              operator delete(v11);
            }
            v9 -= 9;
          }
          while (v13 != v8);
          uint64_t v10 = *(void **)(a2 + 200);
        }
        *(void *)(a2 + 208) = v8;
        operator delete(v10);
      }
      if (*(char *)(a2 + 135) < 0) {
        operator delete(*(void **)(a2 + 112));
      }
      ++v4;
      a2 += 296;
    }
    while (v4 < *a1);
  }
}

void sub_B6D8D4(uint64_t a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  if (a5 > a6)
  {
    if (a2 != a3)
    {
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      do
      {
        uint64_t v14 = a7 + v12;
        long long v15 = (void *)((char *)a2 + v12);
        long long v16 = *(long long *)((char *)a2 + v12);
        long long v17 = *(long long *)((char *)a2 + v12 + 32);
        *(_OWORD *)(v14 + 16) = *(long long *)((char *)a2 + v12 + 16);
        *(_OWORD *)(v14 + 32) = v17;
        *(_OWORD *)uint64_t v14 = v16;
        long long v18 = *(long long *)((char *)a2 + v12 + 48);
        long long v19 = *(long long *)((char *)a2 + v12 + 64);
        long long v20 = *(long long *)((char *)a2 + v12 + 80);
        *(void *)(v14 + 96) = *(void *)((char *)a2 + v12 + 96);
        *(_OWORD *)(v14 + 64) = v19;
        *(_OWORD *)(v14 + 80) = v20;
        *(_OWORD *)(v14 + 48) = v18;
        *(_DWORD *)(v14 + 104) = *(_DWORD *)((char *)a2 + v12 + 104);
        long long v21 = *(long long *)((char *)a2 + v12 + 112);
        *(void *)(v14 + 128) = *(void *)((char *)a2 + v12 + 128);
        *(_OWORD *)(v14 + 112) = v21;
        v15[15] = 0;
        v15[16] = 0;
        v15[14] = 0;
        *(_DWORD *)(v14 + 136) = *(_DWORD *)((char *)a2 + v12 + 136);
        long long v22 = *(long long *)((char *)a2 + v12 + 144);
        long long v23 = *(long long *)((char *)a2 + v12 + 176);
        *(_OWORD *)(v14 + 160) = *(long long *)((char *)a2 + v12 + 160);
        *(_OWORD *)(v14 + 176) = v23;
        *(_OWORD *)(v14 + 144) = v22;
        *(void *)&long long v22 = *(void *)((char *)a2 + v12 + 192);
        *(void *)(v14 + 208) = 0;
        *(void *)(v14 + 216) = 0;
        *(void *)(v14 + 200) = 0;
        *(void *)(v14 + 192) = v22;
        *(_OWORD *)(v14 + 200) = *(long long *)((char *)a2 + v12 + 200);
        *(void *)(v14 + 216) = *(void *)((char *)a2 + v12 + 216);
        v15[25] = 0;
        v15[26] = 0;
        v15[27] = 0;
        *(void *)(v14 + 224) = 0;
        *(void *)(v14 + 232) = 0;
        *(void *)(v14 + 240) = 0;
        *(_OWORD *)(v14 + 224) = *(long long *)((char *)a2 + v12 + 224);
        *(void *)(v14 + 240) = *(void *)((char *)a2 + v12 + 240);
        v15[28] = 0;
        v15[29] = 0;
        v15[30] = 0;
        *(void *)(v14 + 248) = 0;
        *(void *)(v14 + 256) = 0;
        *(void *)(v14 + 264) = 0;
        *(_OWORD *)(v14 + 248) = *(long long *)((char *)a2 + v12 + 248);
        *(void *)(v14 + 264) = *(void *)((char *)a2 + v12 + 264);
        v15[31] = 0;
        v15[32] = 0;
        v15[33] = 0;
        *(void *)(v14 + 272) = 0;
        *(void *)(v14 + 280) = 0;
        *(void *)(v14 + 288) = 0;
        *(_OWORD *)(v14 + 272) = *(long long *)((char *)a2 + v12 + 272);
        *(void *)(v14 + 288) = *(void *)((char *)a2 + v12 + 288);
        v15[34] = 0;
        v15[35] = 0;
        v15[36] = 0;
        ++v13;
        v12 += 296;
      }
      while (v15 + 37 != (void *)a3);
      unint64_t v48 = v13;
      if (v12)
      {
        uint64_t v24 = a7 + v12;
        uint64_t v25 = (uint64_t)a3 - 296;
        while (v10 != (long long *)v11)
        {
          uint64_t v26 = *(void *)(a4 + 24);
          if (!v26) {
            sub_29F82C();
          }
          int v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v26 + 48))(v26, v24 - 296, (uint64_t)v10 - 296);
          if (v27) {
            long long v28 = (long long *)((char *)v10 - 296);
          }
          else {
            long long v28 = (long long *)(v24 - 296);
          }
          if (v27) {
            uint64_t v10 = (long long *)((char *)v10 - 296);
          }
          else {
            v24 -= 296;
          }
          sub_B3E498(v25, v28);
          v25 -= 296;
          if (v24 == a7) {
            goto LABEL_34;
          }
        }
        uint64_t v45 = 0;
        do
        {
          uint64_t v46 = v25 + v45;
          v45 -= 296;
          sub_B3E498(v46, (long long *)(v24 + v45));
        }
        while (v24 + v45 != a7);
      }
      goto LABEL_34;
    }
LABEL_28:
    unint64_t v48 = 0;
    goto LABEL_34;
  }
  if ((long long *)a1 == a2) {
    goto LABEL_28;
  }
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  do
  {
    uint64_t v31 = a7 + v29;
    long long v32 = (void *)(a1 + v29);
    long long v33 = *(_OWORD *)(a1 + v29);
    long long v34 = *(_OWORD *)(a1 + v29 + 32);
    *(_OWORD *)(v31 + 16) = *(_OWORD *)(a1 + v29 + 16);
    *(_OWORD *)(v31 + 32) = v34;
    *(_OWORD *)uint64_t v31 = v33;
    long long v35 = *(_OWORD *)(a1 + v29 + 48);
    long long v36 = *(_OWORD *)(a1 + v29 + 64);
    long long v37 = *(_OWORD *)(a1 + v29 + 80);
    *(void *)(v31 + 96) = *(void *)(a1 + v29 + 96);
    *(_OWORD *)(v31 + 64) = v36;
    *(_OWORD *)(v31 + 80) = v37;
    *(_OWORD *)(v31 + 48) = v35;
    *(_DWORD *)(v31 + 104) = *(_DWORD *)(a1 + v29 + 104);
    long long v38 = *(_OWORD *)(a1 + v29 + 112);
    *(void *)(v31 + 128) = *(void *)(a1 + v29 + 128);
    *(_OWORD *)(v31 + 112) = v38;
    v32[15] = 0;
    v32[16] = 0;
    v32[14] = 0;
    *(_DWORD *)(v31 + 136) = *(_DWORD *)(a1 + v29 + 136);
    long long v39 = *(_OWORD *)(a1 + v29 + 144);
    long long v40 = *(_OWORD *)(a1 + v29 + 176);
    *(_OWORD *)(v31 + 160) = *(_OWORD *)(a1 + v29 + 160);
    *(_OWORD *)(v31 + 176) = v40;
    *(_OWORD *)(v31 + 144) = v39;
    *(void *)&long long v39 = *(void *)(a1 + v29 + 192);
    *(void *)(v31 + 208) = 0;
    *(void *)(v31 + 216) = 0;
    *(void *)(v31 + 200) = 0;
    *(void *)(v31 + 192) = v39;
    *(_OWORD *)(v31 + 200) = *(_OWORD *)(a1 + v29 + 200);
    *(void *)(v31 + 216) = *(void *)(a1 + v29 + 216);
    v32[25] = 0;
    v32[26] = 0;
    v32[27] = 0;
    *(void *)(v31 + 224) = 0;
    *(void *)(v31 + 232) = 0;
    *(void *)(v31 + 240) = 0;
    *(_OWORD *)(v31 + 224) = *(_OWORD *)(a1 + v29 + 224);
    *(void *)(v31 + 240) = *(void *)(a1 + v29 + 240);
    v32[28] = 0;
    v32[29] = 0;
    v32[30] = 0;
    *(void *)(v31 + 248) = 0;
    *(void *)(v31 + 256) = 0;
    *(void *)(v31 + 264) = 0;
    *(_OWORD *)(v31 + 248) = *(_OWORD *)(a1 + v29 + 248);
    *(void *)(v31 + 264) = *(void *)(a1 + v29 + 264);
    v32[31] = 0;
    v32[32] = 0;
    v32[33] = 0;
    *(void *)(v31 + 272) = 0;
    *(void *)(v31 + 280) = 0;
    *(void *)(v31 + 288) = 0;
    *(_OWORD *)(v31 + 272) = *(_OWORD *)(a1 + v29 + 272);
    *(void *)(v31 + 288) = *(void *)(a1 + v29 + 288);
    v32[34] = 0;
    v32[35] = 0;
    v32[36] = 0;
    ++v30;
    v29 += 296;
  }
  while (v32 + 37 != (void *)a2);
  unint64_t v48 = v30;
  if (v29)
  {
    long long v41 = (long long *)(a7 + v29);
    uint64_t v42 = a7 + v29 - 296;
    long long v43 = (long long *)a7;
    while (v10 != a3)
    {
      uint64_t v44 = *(void *)(a4 + 24);
      if (!v44) {
        sub_29F82C();
      }
      if ((*(unsigned int (**)(uint64_t, long long *, long long *))(*(void *)v44 + 48))(v44, v10, v43))
      {
        sub_B3E498(v11, v10);
        uint64_t v10 = (long long *)((char *)v10 + 296);
        v11 += 296;
        if (v41 == v43) {
          goto LABEL_34;
        }
      }
      else
      {
        sub_B3E498(v11, v43);
        long long v43 = (long long *)((char *)v43 + 296);
        v11 += 296;
        if (v41 == v43) {
          goto LABEL_34;
        }
      }
    }
    uint64_t v47 = 0;
    do
    {
      sub_B3E498(v11 + v47, (long long *)((char *)v43 + v47));
      v47 += 296;
    }
    while ((long long *)v42 != (long long *)((char *)v43 + v47 - 296));
  }
LABEL_34:
  if (a7) {
    sub_B6D778(&v48, a7);
  }
}

void sub_B6DCD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t a10)
{
  if (v10) {
    sub_B6D778(&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_B6DD00()
{
}

void *sub_B6DD14()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_243D898;
  return result;
}

void sub_B6DD4C(uint64_t a1, void *a2)
{
  *a2 = off_243D898;
}

BOOL sub_B6DD74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + 192) > *(double *)(a3 + 192)
      && (*(unsigned __int8 *)(a2 + 9) | *(unsigned __int8 *)(a3 + 9)) == 0;
}

uint64_t sub_B6DD98(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_11SpaRespons"
                     "eERKNS2_12comparator_tEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_1"
                                "1SpaResponseERKNS2_12comparator_tEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_11SpaResponseERKNS2_12comparator_tEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_11SpaResponseERKNS2_12comparator_tEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B6DE08()
{
}

void sub_B6DE18()
{
}

void *sub_B6DE2C()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_243D928;
  return result;
}

void sub_B6DE64(uint64_t a1, void *a2)
{
  *a2 = off_243D928;
}

BOOL sub_B6DE8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return !(*(unsigned __int8 *)(a2 + 9) | *(unsigned __int8 *)(a3 + 9))
      && *(unsigned __int8 *)(a2 + 8) > *(unsigned __int8 *)(a3 + 8);
}

uint64_t sub_B6DEB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_11SpaRespons"
                     "eERKNS2_12comparator_tEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_1"
                                "1SpaResponseERKNS2_12comparator_tEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_11SpaResponseERKNS2_12comparator_tEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_11SpaResponseERKNS2_12comparator_tEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B6DF20()
{
}

void sub_B6DF30()
{
}

void *sub_B6DF44()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_243D9A8;
  return result;
}

void sub_B6DF7C(uint64_t a1, void *a2)
{
  *a2 = off_243D9A8;
}

BOOL sub_B6DFA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned __int8 *)(a2 + 9) | *(unsigned __int8 *)(a3 + 9)) {
    return 0;
  }
  return *(unsigned __int8 *)(a3 + 2) > 1u && *(unsigned __int8 *)(a2 + 2) < 2u;
}

uint64_t sub_B6DFD4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_11SpaRespons"
                     "eERKNS2_12comparator_tEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_1"
                                "1SpaResponseERKNS2_12comparator_tEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_11SpaResponseERKNS2_12comparator_tEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_11SpaResponseERKNS2_12comparator_tEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B6E044()
{
}

void sub_B6E054()
{
}

void *sub_B6E068()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_243DA28;
  return result;
}

void sub_B6E0A0(uint64_t a1, void *a2)
{
  *a2 = off_243DA28;
}

BOOL sub_B6E0C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(unsigned __int8 *)(a2 + 9) < *(unsigned __int8 *)(a3 + 9);
}

uint64_t sub_B6E0DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_11SpaRespons"
                     "eERKNS2_12comparator_tEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_1"
                                "1SpaResponseERKNS2_12comparator_tEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_11SpaResponseERKNS2_12comparator_tEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_11SpaResponseERKNS2_12comparator_tEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B6E14C()
{
}

void sub_B6E15C()
{
}

void *sub_B6E170(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_243DAA8;
  result[1] = v3;
  return result;
}

uint64_t sub_B6E1B8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_243DAA8;
  a2[1] = v2;
  return result;
}

BOOL sub_B6E1E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 9) != 1 || *(unsigned char *)(a3 + 9) != 1) {
    return 0;
  }
  if (*(unsigned char *)(*(void *)(a1 + 8) + 184))
  {
    int v5 = *(_DWORD *)(a2 + 32);
    if (v5 == 0x7FFFFFFF) {
      int v5 = *(_DWORD *)(a2 + 28);
    }
    int v6 = *(_DWORD *)(a3 + 32);
    if (v6 == 0x7FFFFFFF) {
      int v6 = *(_DWORD *)(a3 + 28);
    }
    return v5 > v6;
  }
  else
  {
    int v7 = *(_DWORD *)(a2 + 20);
    if (v7 == 0x7FFFFFFF) {
      int v7 = *(_DWORD *)(a2 + 16);
    }
    int v8 = *(_DWORD *)(a3 + 20);
    if (v8 == 0x7FFFFFFF) {
      int v8 = *(_DWORD *)(a3 + 16);
    }
    return v7 < v8;
  }
}

uint64_t sub_B6E25C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_11SpaRespons"
                     "eERKNS2_12comparator_tEE3$_4")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_1"
                                "1SpaResponseERKNS2_12comparator_tEE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_11SpaResponseERKNS2_12comparator_tEE3$_4"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_11SpaResponseERKNS2_12comparator_tEE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B6E2CC()
{
}

void sub_B6E2DC()
{
}

void *sub_B6E2F0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_243DB28;
  result[1] = v3;
  return result;
}

uint64_t sub_B6E338(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_243DB28;
  a2[1] = v2;
  return result;
}

BOOL sub_B6E364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 11)) {
    BOOL v3 = *(unsigned char *)(a3 + 11) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  if (*(unsigned char *)(*(void *)(a1 + 8) + 184))
  {
    int v5 = *(_DWORD *)(a2 + 32);
    if (v5 == 0x7FFFFFFF) {
      int v5 = *(_DWORD *)(a2 + 28);
    }
    int v6 = *(_DWORD *)(a3 + 32);
    if (v6 == 0x7FFFFFFF) {
      int v6 = *(_DWORD *)(a3 + 28);
    }
    return v5 > v6;
  }
  else
  {
    int v7 = *(_DWORD *)(a2 + 20);
    if (v7 == 0x7FFFFFFF) {
      int v7 = *(_DWORD *)(a2 + 16);
    }
    int v8 = *(_DWORD *)(a3 + 20);
    if (v8 == 0x7FFFFFFF) {
      int v8 = *(_DWORD *)(a3 + 16);
    }
    return v7 < v8;
  }
}

uint64_t sub_B6E3DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_11SpaRespons"
                     "eERKNS2_12comparator_tEE3$_5")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_1"
                                "1SpaResponseERKNS2_12comparator_tEE3$_5" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_11SpaResponseERKNS2_12comparator_tEE3$_5"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing16journey_planning21JourneyStableOrdering23get_comparator_functionERKNS1_11SpaResponseERKNS2_12comparator_tEE3$_5" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B6E44C()
{
}

uint64_t sub_B6E458(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v2 != v3)
  {
    int v5 = (void **)result;
    do
    {
      int v6 = *v5;
      if (!*(unsigned char *)(a2 + 184))
      {
        sub_A29024(v6, v2);
        int v6 = *v5;
      }
      __n128 result = sub_A29F7C((uint64_t)v6, v2);
      v2 += 296;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_B6E4C4(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 52);
  int v5 = (int *)sub_A11094((void *)(*(void *)(a1 + 40) + 4136), *(void *)(a2 + 32));
  int v6 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v7 = *v6;
  if (v7 < 5)
  {
    int v8 = 0;
    goto LABEL_6;
  }
  if (v6[2])
  {
    int v8 = (char *)v5 + v6[2] + *(unsigned int *)((char *)v5 + v6[2]);
    if (v7 < 9) {
      goto LABEL_6;
    }
  }
  else
  {
    int v8 = 0;
    if (v7 < 9) {
      goto LABEL_6;
    }
  }
  uint64_t v29 = v6[4];
  if (v29)
  {
    long long v9 = (unsigned int *)((char *)v5 + v29 + *(unsigned int *)((char *)v5 + v29));
    goto LABEL_7;
  }
LABEL_6:
  long long v9 = 0;
LABEL_7:
  unint64_t v10 = *(void *)&v8[8 * *(unsigned __int8 *)(sub_A10764(v9, v4) + 14) + 4];
  uint64_t v38 = __ROR8__(v10, 32);
  uint64_t v11 = (int *)sub_8DFD1C(*(void *)(*(void *)(a1 + 40) + 4056) + 24, v10, 0, "line");
  LOBYTE(v12) = 0;
  unint64_t v13 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v13 >= 0x25u)
  {
    uint64_t v12 = v13[18];
    if (v13[18]) {
      LOBYTE(v12) = *((unsigned char *)v11 + v12);
    }
  }
  if (((*(_DWORD *)(a1 + 32) >> v12) & 1) == 0) {
    return 0x7FFFFFFF7FFFFFFFLL;
  }
  uint64_t v36 = sub_A104E8((void *)(*(void *)(a1 + 40) + 4136), *(void *)(a2 + 32), *(_DWORD *)(a2 + 52), *(_DWORD *)(a2 + 40));
  int v37 = v14;
  int v35 = sub_B6E7A0((void *)(*(void *)(a1 + 40) + 4184), (unsigned int *)&v36);
  uint64_t v34 = sub_B6E894((void *)(*(void *)(a1 + 40) + 4136), *(void *)(a2 + 32), *(_DWORD *)(a2 + 52));
  uint64_t v33 = sub_B6EA30((void *)(*(void *)(a1 + 40) + 4136), *(void *)(a2 + 32), *(_DWORD *)(a2 + 52));
  unint64_t v15 = *(void *)(a2 + 32);
  unsigned int v16 = *(_DWORD *)(a2 + 52);
  long long v17 = (int *)sub_A11094((void *)(*(void *)(a1 + 40) + 4136), v15);
  long long v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 9u && (uint64_t v19 = v18[4]) != 0) {
    long long v20 = (unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
  }
  else {
    long long v20 = 0;
  }
  uint64_t v32 = __ROR8__(*(void *)sub_A10764(v20, v16), 32);
  long long v21 = *(void **)(a1 + 40);
  long long v22 = (uint64_t *)operator new(8uLL);
  long long __p = v22;
  *long long v22 = v32;
  long long v40 = v22 + 1;
  long long v41 = v22 + 1;
  sub_B6F73C(v21, (unint64_t **)&__p, (uint64_t *)&v30);
  if (__p)
  {
    long long v40 = (uint64_t *)__p;
    operator delete(__p);
  }
  long long v23 = v30;
  uint64_t v24 = v31;
  long long __p = (void *)a1;
  long long v40 = &v32;
  long long v41 = &v38;
  uint64_t v42 = &v34;
  long long v43 = &v33;
  uint64_t v44 = &v35;
  unint64_t v25 = 0x7FFFFFFF7FFFFFFFLL;
  if (v30 != v31)
  {
    do
      unint64_t v25 = sub_B70C84((uint64_t)&__p, v25, *v23++);
    while (v23 != v24);
    long long v23 = v30;
  }
  if (*(unsigned char *)(a1 + 36)) {
    BOOL v26 = 0;
  }
  else {
    BOOL v26 = v25 == HIDWORD(v25);
  }
  int v27 = v26;
  if (v23)
  {
    uint64_t v31 = v23;
    operator delete(v23);
  }
  if (v27) {
    return 0x7FFFFFFF7FFFFFFFLL;
  }
  else {
    return v25;
  }
}

void sub_B6E770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B6E7A0(void *a1, unsigned int *a2)
{
  uint64_t v3 = sub_369B60(*a1 + 24, a2[1] | ((unint64_t)*a2 << 32), 0);
  unsigned int v4 = (int *)v3;
  int v5 = &v3[-*(int *)v3];
  if (*(unsigned __int16 *)v5 >= 5u && (uint64_t v6 = *((unsigned __int16 *)v5 + 2)) != 0) {
    unsigned int v7 = (unsigned int *)&v3[v6 + *(unsigned int *)&v3[v6]];
  }
  else {
    unsigned int v7 = 0;
  }
  int v8 = (int *)sub_B612A4(v7, *a2);
  long long v9 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v9 < 0xDu)
  {
    unint64_t v10 = 0;
    uint64_t v11 = (unsigned __int16 *)((char *)v8 - *v8);
    if (*v11 < 0x15u)
    {
LABEL_13:
      int v13 = -1;
      return *(unsigned int *)sub_A10148(v10, a2[2] + v13);
    }
  }
  else
  {
    unint64_t v10 = (unsigned int *)v9[6];
    if (v10) {
      unint64_t v10 = (unsigned int *)((char *)v10 + (void)v4 + *(unsigned int *)((char *)v10 + (void)v4));
    }
    uint64_t v11 = (unsigned __int16 *)((char *)v8 - *v8);
    if (*v11 < 0x15u) {
      goto LABEL_13;
    }
  }
  uint64_t v12 = v11[10];
  if (!v12) {
    goto LABEL_13;
  }
  int v13 = *(int *)((char *)v8 + v12);
  return *(unsigned int *)sub_A10148(v10, a2[2] + v13);
}

uint64_t sub_B6E894(void *a1, unint64_t a2, unsigned int a3)
{
  uint64_t v6 = (int *)sub_A11094(a1, a2);
  unsigned int v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 < 7u) {
    goto LABEL_20;
  }
  uint64_t v8 = v7[3];
  if (v8)
  {
    if (*(int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8)))
    {
      unsigned int v9 = a3;
      unint64_t v10 = (int *)sub_A11094(a1, a2);
      uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v11 >= 9u && (uint64_t v12 = v11[4]) != 0) {
        int v13 = (unsigned int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
      }
      else {
        int v13 = 0;
      }
      unsigned int v14 = *(unsigned __int16 *)(sub_A10764(v13, a3) + 12);
      unint64_t v15 = sub_A104E8(a1, a2, v9, 0);
      unsigned int v16 = sub_369B60(*a1 + 24, __ROR8__(v15, 32), 0);
      long long v17 = 0;
      long long v18 = &v16[-*(int *)v16];
      if (*(unsigned __int16 *)v18 >= 5u)
      {
        uint64_t v19 = *((unsigned __int16 *)v18 + 2);
        if (v19) {
          long long v17 = (unsigned int *)&v16[v19 + *(unsigned int *)&v16[v19]];
        }
        else {
          long long v17 = 0;
        }
      }
      long long v20 = (int *)sub_B612A4(v17, v15);
      long long v21 = (unsigned __int16 *)((char *)v20 - *v20);
      unsigned int v22 = *v21;
      if (v22 >= 0x25)
      {
        if (v21[18])
        {
          unsigned int v23 = sub_B61408((unsigned int *)((char *)v20 + v21[18] + *(unsigned int *)((char *)v20 + v21[18])), v14);
          if (v23 == -1) {
            goto LABEL_20;
          }
          return v23 | (HIDWORD(v15) << 32);
        }
LABEL_17:
        uint64_t v24 = v21[7];
        if (!v24) {
          goto LABEL_20;
        }
        unsigned int v23 = *(int *)((char *)v20 + v24);
        if (v23 == -1) {
          goto LABEL_20;
        }
        return v23 | (HIDWORD(v15) << 32);
      }
      if (v22 >= 0xF) {
        goto LABEL_17;
      }
    }
LABEL_20:
    uint64_t v8 = 0;
  }
  return (v8 << 32) | 0xFFFFFFFFLL;
}

uint64_t sub_B6EA30(void *a1, unint64_t a2, unsigned int a3)
{
  uint64_t v6 = (int *)sub_A11094(a1, a2);
  unsigned int v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 < 7u) {
    goto LABEL_20;
  }
  uint64_t v8 = v7[3];
  if (v8)
  {
    if (*(int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8)))
    {
      unsigned int v9 = a3;
      unint64_t v10 = (int *)sub_A11094(a1, a2);
      uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v11 >= 9u && (uint64_t v12 = v11[4]) != 0) {
        int v13 = (unsigned int *)((char *)v10 + v12 + *(unsigned int *)((char *)v10 + v12));
      }
      else {
        int v13 = 0;
      }
      unsigned int v14 = *(unsigned __int16 *)(sub_A10764(v13, a3) + 12);
      unint64_t v15 = sub_A104E8(a1, a2, v9, 0);
      unsigned int v16 = sub_369B60(*a1 + 24, __ROR8__(v15, 32), 0);
      long long v17 = 0;
      long long v18 = &v16[-*(int *)v16];
      if (*(unsigned __int16 *)v18 >= 5u)
      {
        uint64_t v19 = *((unsigned __int16 *)v18 + 2);
        if (v19) {
          long long v17 = (unsigned int *)&v16[v19 + *(unsigned int *)&v16[v19]];
        }
        else {
          long long v17 = 0;
        }
      }
      long long v20 = (int *)sub_B612A4(v17, v15);
      long long v21 = (unsigned __int16 *)((char *)v20 - *v20);
      unsigned int v22 = *v21;
      if (v22 >= 0x27)
      {
        if (v21[19])
        {
          unsigned int v23 = sub_B61408((unsigned int *)((char *)v20 + v21[19] + *(unsigned int *)((char *)v20 + v21[19])), v14);
          if (v23 == -1) {
            goto LABEL_20;
          }
          return v23 | (HIDWORD(v15) << 32);
        }
LABEL_17:
        uint64_t v24 = v21[8];
        if (!v24) {
          goto LABEL_20;
        }
        unsigned int v23 = *(int *)((char *)v20 + v24);
        if (v23 == -1) {
          goto LABEL_20;
        }
        return v23 | (HIDWORD(v15) << 32);
      }
      if (v22 >= 0x11) {
        goto LABEL_17;
      }
    }
LABEL_20:
    uint64_t v8 = 0;
  }
  return (v8 << 32) | 0xFFFFFFFFLL;
}

uint64_t sub_B6EBCC(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 48);
  int v5 = (int *)sub_A11094((void *)(*(void *)(a1 + 40) + 4136), *(void *)(a2 + 28));
  uint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v7 = *v6;
  if (v7 < 5)
  {
    uint64_t v8 = 0;
    goto LABEL_6;
  }
  if (v6[2])
  {
    uint64_t v8 = (char *)v5 + v6[2] + *(unsigned int *)((char *)v5 + v6[2]);
    if (v7 < 9) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v8 = 0;
    if (v7 < 9) {
      goto LABEL_6;
    }
  }
  uint64_t v29 = v6[4];
  if (v29)
  {
    unsigned int v9 = (unsigned int *)((char *)v5 + v29 + *(unsigned int *)((char *)v5 + v29));
    goto LABEL_7;
  }
LABEL_6:
  unsigned int v9 = 0;
LABEL_7:
  unint64_t v10 = *(void *)&v8[8 * *(unsigned __int8 *)(sub_A10764(v9, v4) + 14) + 4];
  uint64_t v38 = __ROR8__(v10, 32);
  uint64_t v11 = (int *)sub_8DFD1C(*(void *)(*(void *)(a1 + 40) + 4056) + 24, v10, 0, "line");
  LOBYTE(v12) = 0;
  int v13 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v13 >= 0x25u)
  {
    uint64_t v12 = v13[18];
    if (v13[18]) {
      LOBYTE(v12) = *((unsigned char *)v11 + v12);
    }
  }
  if (((*(_DWORD *)(a1 + 32) >> v12) & 1) == 0) {
    return 0x7FFFFFFF7FFFFFFFLL;
  }
  uint64_t v36 = sub_A104E8((void *)(*(void *)(a1 + 40) + 4136), *(void *)(a2 + 28), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 36));
  int v37 = v14;
  int v35 = sub_B6E7A0((void *)(*(void *)(a1 + 40) + 4184), (unsigned int *)&v36);
  uint64_t v34 = sub_B6E894((void *)(*(void *)(a1 + 40) + 4136), *(void *)(a2 + 28), *(_DWORD *)(a2 + 48));
  uint64_t v33 = sub_B6EA30((void *)(*(void *)(a1 + 40) + 4136), *(void *)(a2 + 28), *(_DWORD *)(a2 + 48));
  unint64_t v15 = *(void *)(a2 + 28);
  unsigned int v16 = *(_DWORD *)(a2 + 48);
  long long v17 = (int *)sub_A11094((void *)(*(void *)(a1 + 40) + 4136), v15);
  long long v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 9u && (uint64_t v19 = v18[4]) != 0) {
    long long v20 = (unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
  }
  else {
    long long v20 = 0;
  }
  uint64_t v32 = __ROR8__(*(void *)sub_A10764(v20, v16), 32);
  long long v21 = *(void **)(a1 + 40);
  unsigned int v22 = (uint64_t *)operator new(8uLL);
  long long __p = v22;
  *unsigned int v22 = v32;
  long long v40 = v22 + 1;
  long long v41 = v22 + 1;
  sub_B6F73C(v21, (unint64_t **)&__p, (uint64_t *)&v30);
  if (__p)
  {
    long long v40 = (uint64_t *)__p;
    operator delete(__p);
  }
  unsigned int v23 = v30;
  uint64_t v24 = v31;
  long long __p = (void *)a1;
  long long v40 = &v32;
  long long v41 = &v38;
  uint64_t v42 = &v34;
  long long v43 = &v33;
  uint64_t v44 = &v35;
  unint64_t v25 = 0x7FFFFFFF7FFFFFFFLL;
  if (v30 != v31)
  {
    do
      unint64_t v25 = sub_B7190C((uint64_t)&__p, v25, *v23++);
    while (v23 != v24);
    unsigned int v23 = v30;
  }
  if (*(unsigned char *)(a1 + 36)) {
    BOOL v26 = 0;
  }
  else {
    BOOL v26 = v25 == HIDWORD(v25);
  }
  int v27 = v26;
  if (v23)
  {
    uint64_t v31 = v23;
    operator delete(v23);
  }
  if (v27) {
    return 0x7FFFFFFF7FFFFFFFLL;
  }
  else {
    return v25;
  }
}

void sub_B6EE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B6EEA8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  if (v5)
  {
    if (v5 == a3)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_DWORD *)(a1 + 32) = 0;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "allow_empty_operating_hours");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 36) = v6;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "enabled_time_styles");
  unsigned int v7 = (uint64_t *)sub_5C4AC(a2, (uint64_t)__p);
  uint64_t v8 = v7;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    uint64_t v10 = *v8;
    uint64_t v9 = v8[1];
    if (v10 == v9) {
      return a1;
    }
  }
  else
  {
    uint64_t v10 = *v7;
    uint64_t v9 = v7[1];
    if (*v7 == v9) {
      return a1;
    }
  }
  do
  {
    if (*(_DWORD *)(v10 + 8))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    *(_DWORD *)(a1 + 32) |= 1 << sub_366588(*(void *)v10);
    v10 += 16;
  }
  while (v10 != v9);
  return a1;
}

void sub_B6F088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_9F5350(v14);
    _Unwind_Resume(a1);
  }
  sub_9F5350(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_B6F0CC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t result = sub_B6EEA8(a1, a3, a4);
  *(void *)(result + 40) = a2;
  return result;
}

uint64_t sub_B6F0FC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 56);
  if (v2 != v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = v2 + 124;
    do
    {
      uint64_t result = sub_B6EBCC(v4, v5);
      *(void *)(v5 + 88) = result;
      uint64_t v6 = v5 + 124;
      v5 += 248;
    }
    while (v6 != v3);
  }
  return result;
}

uint64_t sub_B6F154(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v2 != v3)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t result = sub_B6F1A0(v4, v2);
      v2 += 296;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_B6F1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_29F82C();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
  if (result)
  {
    uint64_t v6 = *(void *)(a2 + 200);
    for (uint64_t i = *(void *)(a2 + 208); v6 != i; v6 += 72)
    {
      if (!*(unsigned char *)(v6 + 24))
      {
        uint64_t v9 = *(void *)v6;
        uint64_t v10 = *(void *)(v6 + 8);
        if (*(void *)v6 == v10) {
          goto LABEL_5;
        }
        do
        {
          uint64_t result = sub_B6E4C4(a1, v9);
          *(void *)(v9 + 148) = result;
          v9 += 168;
        }
        while (v9 != v10);
        uint64_t v12 = *(void *)v6;
        uint64_t v11 = *(_DWORD **)(v6 + 8);
        int v21 = 0x7FFFFFFF;
        int v22 = 0x7FFFFFFF;
        if ((_DWORD *)v12 == v11)
        {
LABEL_5:
          uint64_t v8 = 0x7FFFFFFF7FFFFFFFLL;
        }
        else
        {
          int v13 = (int *)(v12 + 152);
          LODWORD(v14) = 0x7FFFFFFF;
          LODWORD(v15) = 0x7FFFFFFF;
          do
          {
            long long v17 = v13 - 1;
            if (v14 != 0x7FFFFFFF)
            {
              if ((int)v14 >= *v17) {
                long long v18 = v13 - 1;
              }
              else {
                long long v18 = &v22;
              }
              if (*v17 == 0x7FFFFFFF) {
                long long v17 = &v22;
              }
              else {
                long long v17 = v18;
              }
            }
            uint64_t v19 = v13;
            if (v15 != 0x7FFFFFFF)
            {
              if ((int)v15 >= *v13) {
                long long v20 = &v21;
              }
              else {
                long long v20 = v13;
              }
              if (*v13 == 0x7FFFFFFF) {
                uint64_t v19 = &v21;
              }
              else {
                uint64_t v19 = v20;
              }
            }
            uint64_t v14 = *v17;
            uint64_t v15 = *v19;
            int v21 = *v19;
            int v22 = v14;
            unsigned int v16 = v13 + 4;
            v13 += 42;
          }
          while (v16 != v11);
          uint64_t v8 = v14 | (v15 << 32);
        }
        *(void *)(v6 + 60) = v8;
      }
    }
  }
  return result;
}

unint64_t sub_B6F300(uint64_t a1, unsigned int *a2, unint64_t a3, int a4, unsigned int a5)
{
  uint64_t v10 = (int *)sub_A11094((void *)(*(void *)(a1 + 40) + 4136), a3);
  uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 < 0x13u || (uint64_t v12 = v11[9]) == 0 || (*((unsigned char *)v10 + v12) & 1) == 0)
  {
    int v13 = (void *)(*(void *)(a1 + 40) + 4136);
    unsigned int v53 = a5;
    uint64_t v54 = 0x7FFFFFFFFFFFFFFFLL;
    signed int v14 = sub_B6F630(v13, a3, a4, &v53);
    unsigned int v55 = v14;
    signed int v15 = *a2;
    unsigned int v16 = v14;
    if (*a2 != 0x7FFFFFFF)
    {
      if (v14 == 0x7FFFFFFF)
      {
        unsigned int v18 = a2[1];
        long long v17 = a2 + 1;
        if (v18 == 0x7FFFFFFF) {
          uint64_t v19 = &v55;
        }
        else {
          uint64_t v19 = v17;
        }
        unsigned int v16 = v15;
LABEL_20:
        uint64_t v24 = *v19;
        return v16 | (unint64_t)(v24 << 32);
      }
      unsigned int v16 = v55;
      if (v15 < v14) {
        unsigned int v16 = *a2;
      }
    }
    signed int v22 = a2[1];
    int v21 = a2 + 1;
    signed int v20 = v22;
    if (v22 >= v14) {
      unsigned int v23 = v21;
    }
    else {
      unsigned int v23 = &v55;
    }
    if (v14 == 0x7FFFFFFF) {
      unsigned int v23 = v21;
    }
    if (v20 == 0x7FFFFFFF) {
      uint64_t v19 = &v55;
    }
    else {
      uint64_t v19 = v23;
    }
    goto LABEL_20;
  }
  BOOL v26 = sub_A10650((void *)(*(void *)(a1 + 40) + 4136), a3);
  int v27 = (int *)v26;
  long long v28 = &v26[-*(int *)v26];
  if (*(unsigned __int16 *)v28 < 5u)
  {
    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v29 = *((unsigned __int16 *)v28 + 2);
    if (v29) {
      v29 += (uint64_t)&v26[*(unsigned int *)&v26[v29]];
    }
  }
  uint64_t v30 = 4 * a3;
  uint64_t v31 = (int *)(v29 + v30 + 4 + *(unsigned int *)(v29 + v30 + 4));
  uint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31);
  if (*v32 >= 7u && (uint64_t v33 = v32[3]) != 0) {
    uint64_t v34 = (unsigned int *)((char *)v31 + v33 + *(unsigned int *)((char *)v31 + v33));
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = sub_A1FDE4(v34, a5);
  uint64_t v36 = (unsigned __int16 *)((char *)v27 - *v27);
  if (*v36 < 7u)
  {
    int v37 = 0;
  }
  else
  {
    int v37 = (unsigned int *)v36[3];
    if (v37) {
      int v37 = (unsigned int *)((char *)v37 + (void)v27 + *(unsigned int *)((char *)v37 + (void)v27));
    }
  }
  int v38 = *(_DWORD *)(sub_A200AC(v37, *(_DWORD *)(v35 + 4) + a4) + 4);
  long long v39 = sub_A10650((void *)(*(void *)(a1 + 40) + 4136), a3);
  long long v40 = &v39[-*(int *)v39];
  if (*(unsigned __int16 *)v40 < 5u)
  {
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v41 = *((unsigned __int16 *)v40 + 2);
    if (v41) {
      v41 += (uint64_t)&v39[*(unsigned int *)&v39[v41]];
    }
  }
  uint64_t v42 = (int *)(v41 + v30 + 4 + *(unsigned int *)(v41 + v30 + 4));
  long long v43 = (unsigned __int16 *)((char *)v42 - *v42);
  if (*v43 >= 7u && (uint64_t v44 = v43[3]) != 0) {
    uint64_t v45 = (unsigned int *)((char *)v42 + v44 + *(unsigned int *)((char *)v42 + v44));
  }
  else {
    uint64_t v45 = 0;
  }
  int v46 = *(unsigned __int8 *)(sub_A1FDE4(v45, a5) + 8);
  signed int v47 = sub_A1FCE8((void *)(*(void *)(a1 + 40) + 4136), a3, a5, 0) + v38;
  unsigned int v53 = v47;
  signed int v48 = sub_A1FBEC((void *)(*(void *)(a1 + 40) + 4136), a3, a5, v46 - 1) + v38;
  unsigned int v55 = v48;
  if (*a2 == 0x7FFFFFFF)
  {
    long long v49 = &v53;
  }
  else
  {
    long long v49 = a2;
    if (v47 != 0x7FFFFFFF)
    {
      long long v49 = &v53;
      if ((int)*a2 < v47) {
        long long v49 = a2;
      }
    }
  }
  unsigned int v16 = *v49;
  unsigned int v52 = a2[1];
  long long v51 = a2 + 1;
  signed int v50 = v52;
  if (v52 == 0x7FFFFFFF)
  {
    long long v51 = &v55;
  }
  else if (v48 != 0x7FFFFFFF && v50 < v48)
  {
    long long v51 = &v55;
  }
  uint64_t v24 = *v51;
  return v16 | (unint64_t)(v24 << 32);
}

uint64_t sub_B6F630(void *a1, unint64_t a2, int a3, unsigned int *a4)
{
  unsigned int v6 = a2;
  unsigned int v7 = sub_A10650(a1, a2);
  uint64_t v8 = (int *)v7;
  uint64_t v9 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v9 < 5u)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = *((unsigned __int16 *)v9 + 2);
    if (v10) {
      v10 += (uint64_t)&v7[*(unsigned int *)&v7[v10]];
    }
  }
  uint64_t v11 = (int *)(v10 + 4 * v6 + 4 + *(unsigned int *)(v10 + 4 * v6 + 4));
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 7u && (uint64_t v13 = v12[3]) != 0) {
    signed int v14 = (unsigned int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
  }
  else {
    signed int v14 = 0;
  }
  uint64_t v15 = sub_A1FDE4(v14, *a4);
  if (a4[1] == -1) {
    unsigned int v16 = (int *)v15;
  }
  else {
    unsigned int v16 = (int *)(a4 + 2);
  }
  int v17 = *v16;
  unsigned int v18 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v18 < 7u)
  {
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = (unsigned int *)v18[3];
    if (v19) {
      uint64_t v19 = (unsigned int *)((char *)v19 + (void)v8 + *(unsigned int *)((char *)v19 + (void)v8));
    }
  }
  return (*(_DWORD *)(sub_A200AC(v19, *(_DWORD *)(v15 + 4) + a3) + 4) + v17);
}

uint64_t sub_B6F73C@<X0>(void *a1@<X0>, unint64_t **a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
LABEL_3:
  if (v4 != v5)
  {
    sub_A1DF34((uint64_t)v53, a1, *v4, 0, 0, 0);
LABEL_5:
    unsigned int v6 = v56;
LABEL_6:
    unint64_t v7 = (unint64_t)v57;
    while (1)
    {
      if ((unint64_t)v6 >= v7)
      {
LABEL_2:
        ++v4;
        goto LABEL_3;
      }
      uint64_t v8 = __ROR8__(*v6, 32);
      uint64_t v10 = (char *)a3[1];
      unint64_t v9 = a3[2];
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v12 = (char *)*a3;
        uint64_t v13 = (uint64_t)&v10[-*a3];
        uint64_t v14 = v13 >> 3;
        unint64_t v15 = (v13 >> 3) + 1;
        if (v15 >> 61) {
          sub_2E00();
        }
        uint64_t v16 = v9 - (void)v12;
        if (v16 >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          if (v17 >> 61) {
            sub_188D718();
          }
          unsigned int v18 = operator new(8 * v17);
          uint64_t v19 = &v18[8 * v14];
          void *v19 = v8;
          uint64_t v11 = (uint64_t)(v19 + 1);
          if (v10 != v12)
          {
LABEL_29:
            unint64_t v21 = v10 - 8 - v12;
            if (v21 < 0x58) {
              goto LABEL_89;
            }
            if ((unint64_t)(v10 - &v18[v13]) < 0x20) {
              goto LABEL_89;
            }
            uint64_t v22 = (v21 >> 3) + 1;
            uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v24 = &v10[-v23];
            uint64_t v19 = (void *)((char *)v19 - v23);
            unint64_t v25 = &v18[8 * v14 - 16];
            BOOL v26 = v10 - 16;
            uint64_t v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v28 = *(_OWORD *)v26;
              *(v25 - 1) = *((_OWORD *)v26 - 1);
              *unint64_t v25 = v28;
              v25 -= 2;
              v26 -= 32;
              v27 -= 4;
            }
            while (v27);
            uint64_t v10 = v24;
            if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_89:
              do
              {
                uint64_t v29 = *((void *)v10 - 1);
                v10 -= 8;
                *--uint64_t v19 = v29;
              }
              while (v10 != v12);
            }
            uint64_t v10 = (char *)*a3;
            *a3 = (uint64_t)v19;
            a3[1] = v11;
            a3[2] = (uint64_t)&v18[8 * v17];
            if (!v10) {
              goto LABEL_21;
            }
LABEL_20:
            operator delete(v10);
            goto LABEL_21;
          }
        }
        else
        {
          unsigned int v18 = 0;
          uint64_t v19 = (void *)(8 * v14);
          *(void *)(8 * v14) = v8;
          uint64_t v11 = 8 * v14 + 8;
          if (v10 != v12) {
            goto LABEL_29;
          }
        }
        *a3 = (uint64_t)v19;
        a3[1] = v11;
        a3[2] = (uint64_t)&v18[8 * v17];
        if (v10) {
          goto LABEL_20;
        }
      }
      else
      {
        *(void *)uint64_t v10 = v8;
        uint64_t v11 = (uint64_t)(v10 + 8);
      }
LABEL_21:
      a3[1] = v11;
      unint64_t v7 = (unint64_t)v57;
      unsigned int v6 = v56 + 2;
      long long v56 = v6;
      if (v6 == v57)
      {
        signed int v20 = v54 + 2;
        uint64_t v54 = v20;
        if ((unint64_t)v20 >= v55) {
          goto LABEL_2;
        }
        while (1)
        {
          unsigned int v6 = (void *)*v20;
          unint64_t v7 = v20[1];
          if (*v20 != v7) {
            break;
          }
          v20 += 2;
          uint64_t v54 = v20;
          if ((unint64_t)v20 >= v55) {
            goto LABEL_2;
          }
        }
        long long v56 = (void *)*v20;
        uint64_t v57 = (void *)v7;
        if ((unint64_t)v6 < v7)
        {
          while (1)
          {
LABEL_42:
            if (!v59)
            {
              uint64_t v30 = v53[0];
              uint64_t v31 = *v6;
              uint64_t v32 = *(void *)(v53[0] + 4136);
              if (sub_C259C0(v32 + 3896))
              {
                if (*(void *)(v32 + 3944))
                {
                  unint64_t v33 = __ROR8__(v31, 32);
                  if (!sub_A10E20((void *)(v30 + 4136), SHIDWORD(v33)))
                  {
                    uint64_t v34 = *(void **)(*(void *)(v30 + 4136) + 3944);
                    int8x8_t v35 = (int8x8_t)v34[1];
                    if (v35)
                    {
                      unint64_t v36 = 0xC4CEB9FE1A85EC53
                          * ((0xFF51AFD7ED558CCDLL * (v33 ^ (v33 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v33 ^ (v33 >> 33))) >> 33));
                      unint64_t v37 = v36 ^ (v36 >> 33);
                      uint8x8_t v38 = (uint8x8_t)vcnt_s8(v35);
                      v38.i16[0] = vaddlv_u8(v38);
                      if (v38.u32[0] > 1uLL)
                      {
                        unint64_t v39 = v37;
                        if (v37 >= *(void *)&v35) {
                          unint64_t v39 = v37 % *(void *)&v35;
                        }
                      }
                      else
                      {
                        unint64_t v39 = (*(void *)&v35 - 1) & v37;
                      }
                      uint64_t v42 = *(uint64_t ***)(*v34 + 8 * v39);
                      if (v42)
                      {
                        long long v43 = *v42;
                        if (v43)
                        {
                          if (v38.u32[0] < 2uLL)
                          {
                            uint64_t v44 = *(void *)&v35 - 1;
                            while (1)
                            {
                              uint64_t v48 = v43[1];
                              if (v37 == v48)
                              {
                                if (*((_DWORD *)v43 + 5) == HIDWORD(v33) && *((_DWORD *)v43 + 4) == v33) {
                                  goto LABEL_39;
                                }
                              }
                              else if ((v48 & v44) != v39)
                              {
                                goto LABEL_78;
                              }
                              long long v43 = (uint64_t *)*v43;
                              if (!v43) {
                                goto LABEL_78;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v46 = v43[1];
                            if (v37 == v46)
                            {
                              if (*((_DWORD *)v43 + 5) == HIDWORD(v33) && *((_DWORD *)v43 + 4) == v33)
                              {
LABEL_39:
                                unsigned int v6 = v56;
                                goto LABEL_40;
                              }
                            }
                            else
                            {
                              if (v46 >= *(void *)&v35) {
                                v46 %= *(void *)&v35;
                              }
                              if (v46 != v39) {
                                break;
                              }
                            }
                            long long v43 = (uint64_t *)*v43;
                          }
                          while (v43);
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_78:
            if (v58) {
              goto LABEL_5;
            }
            unsigned int v49 = sub_C2599C(v53[0] + 3896);
            unsigned int v6 = v56;
            if (v49 >= *((unsigned __int8 *)v56 + 14))
            {
              if (v58) {
                goto LABEL_6;
              }
              char v50 = sub_51D60((unsigned __int8 *)(v53[0] + 3896));
              unsigned int v6 = v56;
              if ((v50 & 1) != 0 || (*((unsigned char *)v56 + 15) & 1) == 0) {
                goto LABEL_6;
              }
            }
LABEL_40:
            v6 += 2;
            long long v56 = v6;
            if (v6 == v57)
            {
              long long v40 = v54 + 2;
              uint64_t v54 = v40;
              if ((unint64_t)v40 >= v55) {
                goto LABEL_6;
              }
              while (1)
              {
                unsigned int v6 = (void *)*v40;
                unint64_t v41 = v40[1];
                if (*v40 != v41) {
                  break;
                }
                v40 += 2;
                uint64_t v54 = v40;
                if ((unint64_t)v40 >= v55) {
                  goto LABEL_2;
                }
              }
              long long v56 = (void *)*v40;
              uint64_t v57 = (void *)v41;
              if ((unint64_t)v6 >= v41) {
                goto LABEL_6;
              }
            }
            else if (v6 >= v57)
            {
              goto LABEL_6;
            }
          }
        }
      }
      else if (v6 < v57)
      {
        goto LABEL_42;
      }
    }
  }
  return sub_B6FBD0(a3);
}

void sub_B6FBA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B6FBD0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (char *)a1[1];
  unint64_t v4 = 126 - 2 * __clz((uint64_t)&v3[-v2] >> 3);
  if (v3 == (char *)v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t result = sub_B6FCF0(v2, v3, (uint64_t)&v18, v5, 1);
  unint64_t v7 = (_DWORD *)a1[1];
  if ((_DWORD *)*a1 != v7)
  {
    uint64_t v8 = (_DWORD *)(*a1 + 8);
    do
    {
      if (v8 == v7) {
        return result;
      }
      LODWORD(v10) = *v8;
      int v9 = v8[1];
      int v12 = *(v8 - 2);
      int v11 = *(v8 - 1);
      v8 += 2;
    }
    while (v11 != v9 || v12 != v10);
    uint64_t v14 = v8 - 4;
    if (v8 == v7)
    {
      unint64_t v15 = v8 - 2;
      if (v8 - 2 == v7) {
        return result;
      }
      goto LABEL_22;
    }
    do
    {
      int v16 = v10;
      uint64_t v10 = *(void *)v8;
      if (v16 != *(void *)v8 || v14[1] != HIDWORD(*(void *)v8))
      {
        *((void *)v14 + 1) = v10;
        v14 += 2;
      }
      v8 += 2;
    }
    while (v8 != v7);
    unint64_t v15 = v14 + 2;
    if (v14 + 2 != (_DWORD *)a1[1]) {
LABEL_22:
    }
      a1[1] = (uint64_t)v15;
  }
  return result;
}

uint64_t sub_B6FCF0(uint64_t result, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)result;
LABEL_2:
  int v11 = (uint64_t *)(a2 - 8);
  uint64_t v67 = (uint64_t *)(a2 - 24);
  int v68 = (uint64_t *)(a2 - 16);
  uint64_t v12 = (uint64_t)v10;
  long long v69 = a2;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    uint64_t v10 = (void *)v12;
    uint64_t v14 = v13;
    uint64_t v15 = (uint64_t)&a2[-v12];
    unint64_t v16 = (uint64_t)&a2[-v12] >> 3;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v26 = *(void *)v12;
          unsigned int v27 = *((_DWORD *)a2 - 1);
          uint64_t v28 = HIDWORD(*(void *)v12);
          if (v27 < v28
            || (v27 <= v28 ? (BOOL v29 = *((_DWORD *)a2 - 2) >= v26) : (BOOL v29 = 1), !v29))
          {
            *(void *)uint64_t v12 = *((void *)a2 - 1);
            *((void *)a2 - 1) = v26;
          }
          break;
        case 3uLL:
          uint64_t result = sub_B7023C((uint64_t *)v12, (uint64_t *)(v12 + 8), v11);
          break;
        case 4uLL:
          uint64_t result = sub_B7023C((uint64_t *)v12, (uint64_t *)(v12 + 8), (uint64_t *)(v12 + 16));
          uint64_t v30 = *(void *)(v12 + 16);
          unsigned int v31 = *((_DWORD *)a2 - 1);
          if (v31 < HIDWORD(v30)
            || (v31 <= HIDWORD(v30) ? (BOOL v32 = *((_DWORD *)a2 - 2) >= v30) : (BOOL v32 = 1), !v32))
          {
            *(void *)(v12 + 16) = *((void *)a2 - 1);
            *((void *)a2 - 1) = v30;
            uint64_t v33 = *(void *)(v12 + 8);
            unsigned int v34 = *(_DWORD *)(v12 + 20);
            if (v34 < HIDWORD(v33)
              || (v34 <= HIDWORD(v33) ? (BOOL v35 = *(_DWORD *)(v12 + 16) >= v33) : (BOOL v35 = 1), !v35))
            {
              unint64_t v36 = *(void *)(v12 + 16);
              *(void *)(v12 + 8) = v36;
              *(void *)(v12 + 16) = v33;
              uint64_t v37 = *(void *)v12;
              if (v36 < *(void *)v12)
              {
                *(void *)uint64_t v12 = v36;
                *(void *)(v12 + 8) = v37;
              }
            }
          }
          break;
        case 5uLL:
          uint64_t result = sub_B70870((uint64_t *)v12, (uint64_t *)(v12 + 8), v12 + 16, (uint64_t *)(v12 + 24), v11);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 191) {
      break;
    }
    if (v14 == 1)
    {
      if ((char *)v12 != a2)
      {
        unint64_t v53 = (v16 - 2) >> 1;
        unint64_t v54 = v53 + 1;
        unint64_t v55 = (void *)(v12 + 8 * v53);
        do
        {
          sub_B70A18(v12, a3, (uint64_t)&a2[-v12] >> 3, v55--);
          --v54;
        }
        while (v54);
        return (uint64_t)sub_B70B24((char *)v12, a2);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    char v18 = (uint64_t *)(v12 + 8 * (v16 >> 1));
    if ((unint64_t)v15 < 0x401)
    {
      sub_B7023C(v18, (uint64_t *)v12, v11);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_B7023C((uint64_t *)v12, v18, v11);
      uint64_t v19 = a5;
      signed int v20 = v11;
      unint64_t v21 = (uint64_t *)(v12 + 8 * v17);
      sub_B7023C((uint64_t *)(v12 + 8), v21 - 1, v68);
      sub_B7023C((uint64_t *)(v12 + 16), (uint64_t *)(v12 + 8 + 8 * v17), v67);
      sub_B7023C(v21 - 1, v18, (uint64_t *)(v12 + 8 + 8 * v17));
      uint64_t v22 = *(void *)v12;
      *(void *)uint64_t v12 = *v21;
      uint64_t *v21 = v22;
      int v11 = v20;
      a5 = v19;
      a2 = v69;
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(void *)(v12 - 8) >= *(void *)v12)
    {
      uint64_t result = (uint64_t)sub_B70350((uint64_t *)v12, (uint64_t *)a2);
      uint64_t v12 = result;
      goto LABEL_17;
    }
LABEL_13:
    uint64_t v23 = sub_B70484((uint64_t *)v12, (uint64_t)a2);
    if ((v24 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v25 = sub_B705B8(v12, v23);
    uint64_t v12 = (uint64_t)(v23 + 1);
    uint64_t result = sub_B705B8((uint64_t)(v23 + 1), (uint64_t *)a2);
    if (result)
    {
      a4 = -v14;
      a2 = (char *)v23;
      if (v25) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v25)
    {
LABEL_16:
      uint64_t result = sub_B6FCF0(v10, v23, a3, -v14, a5 & 1);
      uint64_t v12 = (uint64_t)(v23 + 1);
LABEL_17:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  uint8x8_t v38 = (char *)(v12 + 8);
  BOOL v40 = (char *)v12 == a2 || v38 == a2;
  if (a5)
  {
    if (!v40)
    {
      uint64_t v41 = 0;
      uint64_t v42 = (_DWORD *)v12;
      do
      {
        long long v43 = v38;
        uint64_t v44 = *(void *)v42;
        unsigned int v45 = v42[3];
        uint64_t v46 = HIDWORD(*(void *)v42);
        if (v45 < v46
          || (v45 <= v46 ? (BOOL v47 = *(_DWORD *)v43 >= v44) : (BOOL v47 = 1), !v47))
        {
          uint64_t v48 = *((void *)v42 + 1);
          *((void *)v42 + 1) = v44;
          unsigned int v49 = (void *)v12;
          if (v42 != (_DWORD *)v12)
          {
            uint64_t v50 = v41;
            while (1)
            {
              uint64_t v51 = *(void *)(v12 + v50 - 8);
              if (HIDWORD(v48) >= HIDWORD(v51)
                && (HIDWORD(v48) > HIDWORD(v51) || v48 >= v51))
              {
                break;
              }
              *(void *)(v12 + v50) = v51;
              v50 -= 8;
              if (!v50)
              {
                unsigned int v49 = (void *)v12;
                goto LABEL_55;
              }
            }
            unsigned int v49 = (void *)(v12 + v50);
          }
LABEL_55:
          void *v49 = v48;
        }
        uint8x8_t v38 = v43 + 8;
        v41 += 8;
        uint64_t v42 = v43;
      }
      while (v43 + 8 != a2);
    }
  }
  else if (!v40)
  {
    do
    {
      long long v56 = v38;
      unint64_t v57 = *v10;
      unsigned int v58 = *((_DWORD *)v10 + 3);
      uint64_t v59 = HIDWORD(*v10);
      if (v58 < v59
        || (v58 <= v59 ? (BOOL v60 = *(_DWORD *)v56 >= v57) : (BOOL v60 = 1), !v60))
      {
        uint64_t v61 = *(void *)v56;
        uint64_t v62 = HIDWORD(*(void *)v56);
        do
        {
          do
          {
            uint64_t v63 = v10;
            unint64_t v64 = *--v10;
            v10[2] = v57;
            unint64_t v57 = v64;
            unint64_t v65 = HIDWORD(v64);
          }
          while (v62 < HIDWORD(v64));
        }
        while (v61 < v57 && v62 <= v65);
        void *v63 = v61;
      }
      uint8x8_t v38 = v56 + 8;
      uint64_t v10 = v56;
    }
    while (v56 + 8 != a2);
  }
  return result;
}

uint64_t sub_B7023C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  unsigned int v4 = *((_DWORD *)a2 + 1);
  unint64_t v5 = HIDWORD(*a1);
  if (v4 >= v5 && (v4 <= v5 ? (BOOL v6 = *(_DWORD *)a2 >= v3) : (BOOL v6 = 1), v6))
  {
    uint64_t v7 = *a2;
    unsigned int v8 = *((_DWORD *)a3 + 1);
    unint64_t v9 = HIDWORD(*a2);
    if (v8 >= v9 && (v8 <= v9 ? (BOOL v10 = *(_DWORD *)a3 >= v7) : (BOOL v10 = 1), v10))
    {
      return 0;
    }
    else
    {
      *a2 = *a3;
      *a3 = v7;
      uint64_t v18 = *a1;
      unsigned int v19 = *((_DWORD *)a2 + 1);
      unint64_t v20 = HIDWORD(*a1);
      if (v19 >= v20
        && (v19 <= v20 ? (BOOL v21 = *(_DWORD *)a2 >= v18) : (BOOL v21 = 1), v21))
      {
        return 1;
      }
      else
      {
        *a1 = *a2;
        *a2 = v18;
        return 2;
      }
    }
  }
  else
  {
    uint64_t v12 = *a2;
    unsigned int v13 = *((_DWORD *)a3 + 1);
    unint64_t v14 = HIDWORD(*a2);
    if (v13 >= v14
      && (v13 <= v14 ? (BOOL v15 = *(_DWORD *)a3 >= v12) : (BOOL v15 = 1), v15))
    {
      *a1 = v12;
      *a2 = v3;
      unsigned int v16 = *((_DWORD *)a3 + 1);
      if (v16 >= v5
        && (v16 <= v5 ? (BOOL v17 = *(_DWORD *)a3 >= v3) : (BOOL v17 = 1), v17))
      {
        return 1;
      }
      else
      {
        *a2 = *a3;
        *a3 = v3;
        return 2;
      }
    }
    else
    {
      *a1 = *a3;
      *a3 = v3;
      return 1;
    }
  }
}

uint64_t *sub_B70350(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = HIDWORD(*a1);
  uint64_t v4 = *(a2 - 1);
  if (v3 >= HIDWORD(v4)
    && (v2 < v4 ? (BOOL v5 = v3 > HIDWORD(v4)) : (BOOL v5 = 1), v5))
  {
    BOOL v6 = a1 + 1;
    do
    {
      uint64_t v7 = v6;
      if (v6 >= a2) {
        break;
      }
      uint64_t v8 = *v6;
      unint64_t v9 = HIDWORD(*v6);
      if (v3 < v9) {
        break;
      }
      ++v6;
    }
    while (v2 >= v8 || v3 > v9);
  }
  else
  {
    int v11 = a1 + 1;
    do
    {
      uint64_t v7 = v11;
      uint64_t v12 = *v11;
      unint64_t v13 = HIDWORD(*v11);
      if (v3 < v13) {
        break;
      }
      ++v11;
    }
    while (v2 >= v12 || v3 > v13);
  }
  if (v7 < a2)
  {
    --a2;
    while (v3 < HIDWORD(v4) || v2 < v4 && v3 <= HIDWORD(v4))
    {
      uint64_t v15 = *--a2;
      uint64_t v4 = v15;
    }
  }
  if (v7 < a2)
  {
    uint64_t v16 = *v7;
    unint64_t v17 = *a2;
    do
    {
      uint64_t *v7 = v17;
      *a2 = v16;
      uint64_t v18 = v7 + 1;
      do
      {
        uint64_t v7 = v18;
        uint64_t v16 = *v18;
        unint64_t v19 = HIDWORD(*v18);
        if (v3 < v19) {
          break;
        }
        ++v18;
      }
      while (v2 >= v16 || v3 > v19);
      do
      {
        do
        {
          unint64_t v21 = *--a2;
          unint64_t v17 = v21;
          unint64_t v22 = HIDWORD(v21);
        }
        while (v3 < HIDWORD(v21));
      }
      while (v2 < v17 && v3 <= v22);
    }
    while (v7 < a2);
  }
  if (v7 - 1 != a1) {
    *a1 = *(v7 - 1);
  }
  *(v7 - 1) = v2;
  return v7;
}

uint64_t *sub_B70484(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  unint64_t v4 = HIDWORD(*a1);
  while (1)
  {
    unsigned int v5 = HIDWORD(a1[v2 + 1]);
    if (v5 >= v4 && (v5 > v4 || LODWORD(a1[v2 + 1]) >= v3)) {
      break;
    }
    ++v2;
  }
  uint64_t v7 = &a1[v2];
  unint64_t v8 = (unint64_t)&a1[v2 + 1];
  unint64_t v9 = (_DWORD *)(a2 - 8);
  if (v2 * 8)
  {
    do
    {
      BOOL v10 = v9;
      unsigned int v11 = v9[1];
      v9 -= 2;
      if (v11 < v4) {
        break;
      }
    }
    while (v11 > v4 || *v10 >= v3);
  }
  else
  {
    while (1)
    {
      BOOL v10 = v9;
      uint64_t v15 = v9 + 2;
      if (v8 >= (unint64_t)v15) {
        break;
      }
      unsigned int v13 = v10[1];
      if (v13 >= v4)
      {
        unint64_t v9 = v10 - 2;
        if (v13 > v4 || *v10 >= v3) {
          continue;
        }
      }
      goto LABEL_24;
    }
    BOOL v10 = v15;
  }
LABEL_24:
  if (v8 < (unint64_t)v10)
  {
    unint64_t v16 = v8;
    unint64_t v17 = v10;
    do
    {
      uint64_t v18 = *(void *)v16;
      *(void *)unint64_t v16 = *v17;
      v16 += 8;
      *unint64_t v17 = v18;
      while (1)
      {
        unsigned int v19 = *(_DWORD *)(v16 + 4);
        if (v19 >= v4 && (v19 > v4 || *(_DWORD *)v16 >= v3)) {
          break;
        }
        v16 += 8;
      }
      unint64_t v21 = v17 - 1;
      do
      {
        unint64_t v17 = v21;
        unsigned int v22 = *((_DWORD *)v21-- + 1);
        if (v22 < v4) {
          break;
        }
      }
      while (v22 > v4 || *(_DWORD *)v17 >= v3);
    }
    while (v16 < (unint64_t)v17);
    uint64_t v7 = (uint64_t *)(v16 - 8);
  }
  if (v7 != a1) {
    *a1 = *v7;
  }
  uint64_t *v7 = v3;
  return v7;
}

BOOL sub_B705B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v19 = *(void *)a1;
      unsigned int v20 = *((_DWORD *)a2 - 1);
      uint64_t v21 = HIDWORD(*(void *)a1);
      if (v20 < v21
        || (v20 <= v21 ? (BOOL v22 = *((_DWORD *)a2 - 2) >= v19) : (BOOL v22 = 1), !v22))
      {
        *(void *)a1 = *(a2 - 1);
        *(a2 - 1) = v19;
      }
      return result;
    case 3:
      sub_B7023C((uint64_t *)a1, (uint64_t *)(a1 + 8), a2 - 1);
      return 1;
    case 4:
      sub_B7023C((uint64_t *)a1, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 16));
      uint64_t v23 = *(void *)(a1 + 16);
      unsigned int v24 = *((_DWORD *)a2 - 1);
      if (v24 >= HIDWORD(v23) && (v24 > HIDWORD(v23) || *((_DWORD *)a2 - 2) >= v23)) {
        return 1;
      }
      *(void *)(a1 + 16) = *(a2 - 1);
      *(a2 - 1) = v23;
      uint64_t v26 = *(void *)(a1 + 8);
      unsigned int v27 = *(_DWORD *)(a1 + 20);
      if (v27 >= HIDWORD(v26) && (v27 > HIDWORD(v26) || *(_DWORD *)(a1 + 16) >= v26)) {
        return 1;
      }
      uint64_t v29 = *(void *)(a1 + 16);
      *(void *)(a1 + 8) = v29;
      *(void *)(a1 + 16) = v26;
      uint64_t v30 = *(void *)a1;
      uint64_t v31 = HIDWORD(*(void *)a1);
      if (HIDWORD(v29) < v31
        || (BOOL result = 1, HIDWORD(v29) <= v31) && v29 < v30)
      {
        *(void *)a1 = v29;
        *(void *)(a1 + 8) = v30;
        return 1;
      }
      return result;
    case 5:
      sub_B70870((uint64_t *)a1, (uint64_t *)(a1 + 8), a1 + 16, (uint64_t *)(a1 + 24), a2 - 1);
      return 1;
    default:
      BOOL v6 = (uint64_t *)(a1 + 16);
      sub_B7023C((uint64_t *)a1, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 16));
      uint64_t v7 = (uint64_t *)(a1 + 24);
      if ((uint64_t *)(a1 + 24) == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    uint64_t v11 = *v6;
    unsigned int v12 = *((_DWORD *)v7 + 1);
    unint64_t v13 = HIDWORD(*v6);
    if (v12 < v13
      || (v12 <= v13 ? (BOOL v14 = *(_DWORD *)v7 >= v11) : (BOOL v14 = 1), !v14))
    {
      uint64_t v15 = *v7;
      uint64_t *v7 = v11;
      BOOL v10 = (void *)a1;
      if (v6 != (uint64_t *)a1)
      {
        uint64_t v16 = v8;
        while (1)
        {
          uint64_t v17 = *(void *)(a1 + v16 + 8);
          if (HIDWORD(v15) >= HIDWORD(v17) && (HIDWORD(v15) > HIDWORD(v17) || v15 >= v17)) {
            break;
          }
          *(void *)(a1 + v16 + 16) = v17;
          v16 -= 8;
          if (v16 == -16)
          {
            BOOL v10 = (void *)a1;
            goto LABEL_6;
          }
        }
        BOOL v10 = (void *)(a1 + v16 + 16);
      }
LABEL_6:
      void *v10 = v15;
      if (++v9 == 8) {
        return v7 + 1 == a2;
      }
    }
    BOOL v6 = v7;
    v8 += 8;
    if (++v7 == a2) {
      return 1;
    }
  }
}

uint64_t sub_B70870(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = sub_B7023C(a1, a2, (uint64_t *)a3);
  uint64_t v11 = *(void *)a3;
  unsigned int v12 = *((_DWORD *)a4 + 1);
  uint64_t v13 = HIDWORD(*(void *)a3);
  if (v12 < v13
    || (v12 <= v13 ? (BOOL v14 = *(_DWORD *)a4 >= v11) : (BOOL v14 = 1), !v14))
  {
    *(void *)a3 = *a4;
    *a4 = v11;
    uint64_t v15 = *a2;
    unsigned int v16 = *(_DWORD *)(a3 + 4);
    unint64_t v17 = HIDWORD(*a2);
    if (v16 < v17
      || (v16 <= v17 ? (BOOL v18 = *(_DWORD *)a3 >= v15) : (BOOL v18 = 1), !v18))
    {
      *a2 = *(void *)a3;
      *(void *)a3 = v15;
      uint64_t v19 = *a1;
      if (*a2 < (unint64_t)*a1)
      {
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  uint64_t v20 = *a4;
  unsigned int v21 = *((_DWORD *)a5 + 1);
  unint64_t v22 = HIDWORD(*a4);
  if (v21 < v22
    || (v21 <= v22 ? (BOOL v23 = *(_DWORD *)a5 >= v20) : (BOOL v23 = 1), !v23))
  {
    *a4 = *a5;
    *a5 = v20;
    uint64_t v24 = *(void *)a3;
    if ((unint64_t)*a4 < *(void *)a3)
    {
      *(void *)a3 = *a4;
      *a4 = v24;
      uint64_t v25 = *a2;
      if (*(void *)a3 < (unint64_t)*a2)
      {
        *a2 = *(void *)a3;
        *(void *)a3 = v25;
        uint64_t v26 = *a1;
        if (*a2 < (unint64_t)*a1)
        {
          *a1 = *a2;
          *a2 = v26;
        }
      }
    }
  }
  return result;
}

uint64_t sub_B70A18(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = result + 8 * v7;
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        uint64_t v10 = *(void *)(v8 + 8);
        unsigned int v11 = *(_DWORD *)(v8 + 4);
        if (v11 < HIDWORD(v10) || (v11 <= HIDWORD(v10) ? (BOOL v12 = *(_DWORD *)v8 >= v10) : (BOOL v12 = 1), !v12))
        {
          v8 += 8;
          uint64_t v7 = v9;
        }
      }
      uint64_t v13 = *a4;
      unsigned int v14 = *(_DWORD *)(v8 + 4);
      uint64_t v15 = HIDWORD(*a4);
      if (v14 >= v15 && (v14 > v15 || *(_DWORD *)v8 >= v13))
      {
        do
        {
          unint64_t v17 = a4;
          a4 = (void *)v8;
          *unint64_t v17 = *(void *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v18 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = result + 8 * v7;
          uint64_t v19 = v18 + 2;
          if (v19 < a3)
          {
            uint64_t v20 = *(void *)(v8 + 8);
            unsigned int v21 = *(_DWORD *)(v8 + 4);
            if (v21 < HIDWORD(v20)
              || (v21 <= HIDWORD(v20) ? (BOOL v22 = *(_DWORD *)v8 >= v20) : (BOOL v22 = 1), !v22))
            {
              v8 += 8;
              uint64_t v7 = v19;
            }
          }
          unsigned int v23 = *(_DWORD *)(v8 + 4);
          if (v23 < v15) {
            break;
          }
        }
        while (v23 > v15 || *(_DWORD *)v8 >= v13);
        *a4 = v13;
      }
    }
  }
  return result;
}

char *sub_B70B24(char *result, char *a2)
{
  if (a2 - result >= 9)
  {
    uint64_t v2 = (unint64_t)(a2 - result) >> 3;
    do
    {
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)result;
      uint64_t v3 = result;
      do
      {
        uint64_t v7 = v3;
        v3 += 8 * v5 + 8;
        uint64_t v8 = 2 * v5;
        uint64_t v5 = (2 * v5) | 1;
        uint64_t v9 = v8 + 2;
        if (v9 < v2)
        {
          uint64_t v10 = *((void *)v3 + 1);
          unsigned int v11 = *((_DWORD *)v3 + 1);
          if (v11 < HIDWORD(v10)
            || (v11 <= HIDWORD(v10) ? (BOOL v12 = *(_DWORD *)v3 >= v10) : (BOOL v12 = 1), !v12))
          {
            v3 += 8;
            uint64_t v5 = v9;
          }
        }
        *(void *)uint64_t v7 = *(void *)v3;
      }
      while (v5 <= (uint64_t)((unint64_t)(v2 - 2) >> 1));
      a2 -= 8;
      if (v3 != a2)
      {
        *(void *)uint64_t v3 = *(void *)a2;
        *(void *)a2 = v6;
        uint64_t v13 = v3 - result + 8;
        if (v13 < 9) {
          continue;
        }
        unint64_t v14 = ((unint64_t)v13 >> 3) - 2;
        unint64_t v15 = v14 >> 1;
        unsigned int v16 = &result[8 * (v14 >> 1)];
        uint64_t v6 = *(void *)v3;
        unsigned int v17 = *((_DWORD *)v16 + 1);
        uint64_t v18 = HIDWORD(*(void *)v3);
        if (v17 >= v18 && (v17 > v18 || *(_DWORD *)v16 >= v6)) {
          continue;
        }
        *(void *)uint64_t v3 = *(void *)v16;
        if (v14 >= 2)
        {
          while (1)
          {
            unint64_t v20 = v15 - 1;
            unint64_t v15 = (v15 - 1) >> 1;
            uint64_t v3 = &result[8 * v15];
            unsigned int v21 = *((_DWORD *)v3 + 1);
            if (v21 >= v18 && (v21 > v18 || *(_DWORD *)v3 >= v6)) {
              break;
            }
            *(void *)unsigned int v16 = *(void *)v3;
            unsigned int v16 = &result[8 * v15];
            if (v20 <= 1) {
              goto LABEL_4;
            }
          }
        }
        uint64_t v3 = v16;
      }
LABEL_4:
      *(void *)uint64_t v3 = v6;
    }
    while (v2-- > 2);
  }
  return result;
}

unint64_t sub_B70C84(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v88 = a2;
  uint64_t v5 = *(void *)a1;
  int v86 = 0x7FFFFFFF;
  int v87 = 0x7FFFFFFF;
  sub_A1E9A0((uint64_t)v77, *(void *)(v5 + 40), a3, 0, 0, 0);
  uint64_t v90 = **(void **)(a1 + 8);
  *(void *)&long long v89 = &v90;
  *((void *)&v89 + 1) = 1;
  sub_B714B8((uint64_t)v77, (uint64_t)&v89, &v75);
  uint64_t v6 = v75;
  uint64_t v7 = v76;
  if (v75 != v76)
  {
    while (1)
    {
      unsigned int v8 = *v6;
      uint64_t v9 = (int *)sub_A11094((void *)(*(void *)(v5 + 40) + 4136), a3);
      uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
      unsigned int v11 = *v10;
      if (v11 < 5) {
        break;
      }
      if (v10[2])
      {
        BOOL v12 = (char *)v9 + v10[2] + *(unsigned int *)((char *)v9 + v10[2]);
        if (v11 < 9) {
          goto LABEL_9;
        }
      }
      else
      {
        BOOL v12 = 0;
        if (v11 < 9) {
          goto LABEL_9;
        }
      }
      uint64_t v27 = v10[4];
      if (!v27) {
        goto LABEL_9;
      }
      uint64_t v13 = (unsigned int *)((char *)v9 + v27 + *(unsigned int *)((char *)v9 + v27));
LABEL_10:
      if (**(void **)(a1 + 16) == __ROR8__(*(void *)&v12[8 * *(unsigned __int8 *)(sub_A10764(v13, v8) + 14) + 4], 32)&& **(void **)(a1 + 24) == sub_B6E894((void *)(*(void *)(v5 + 40) + 4136), a3, v8)&& **(void **)(a1 + 32) == sub_B6EA30((void *)(*(void *)(v5 + 40) + 4136), a3, v8))
      {
        unint64_t v14 = v79;
        uint64_t v80 = (_DWORD *)v79;
        unint64_t v15 = (_DWORD *)v79;
        do
        {
          if ((unint64_t)v15 >= v81) {
            break;
          }
          unsigned int v16 = v82;
          if (!v82) {
            break;
          }
          int v17 = sub_51D60((unsigned __int8 *)(v77[0] + 3896));
          unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v15 - v14) >> 2);
          uint64_t v19 = *v16;
          if (v18 < v19) {
            break;
          }
          uint64_t v20 = *((void *)v16 + 1);
          if (*((void *)v16 + 2) + v19 - v20 <= (unint64_t)v18) {
            break;
          }
          unsigned int v21 = *(unsigned __int8 *)(v20 + (v18 - v19));
          if ((v21 & 1) == 0) {
            break;
          }
          if (((v21 >> 1) & 1 & ~v17) != 0) {
            break;
          }
          unint64_t v14 = v79;
          unint64_t v15 = v80 + 3;
          uint64_t v80 = v15;
        }
        while ((unint64_t)v15 >= v79);
        unint64_t v22 = v79;
        unsigned int v23 = v80;
        unint64_t v24 = v81;
        if ((unint64_t)v80 >= v79 && (unint64_t)v80 < v81 && v83 != 0)
        {
          int v84 = 0;
LABEL_32:
          uint64_t v28 = (unsigned int *)((char *)v78 + *(unsigned __int16 *)((char *)v78 - *v78 + 8));
          int v85 = *(unsigned int *)((char *)&v28[3 * (v23[2] >> 8) + 2] + *v28) + *v23;
        }
        while (2)
        {
          if ((unint64_t)v23 < v22 || (unint64_t)v23 >= v24) {
            goto LABEL_3;
          }
          uint64_t v31 = (void *)(*(void *)(v5 + 40) + 4136);
          if (sub_A10E20(v31, SHIDWORD(a3)))
          {
            BOOL v32 = *(unsigned int **)(*(void *)(*v31 + 3944) + 72);
            if (!v32)
            {
              exception = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(&v89, "Incident stop pattern quad data requested on nullptr buffer");
              uint64_t v74 = (void *)sub_2F404((uint64_t)exception, &v89);
            }
            uint64_t v33 = (int *)((char *)v32 + *v32);
            unsigned int v34 = (char *)v33 - *v33;
            if (*(unsigned __int16 *)v34 >= 5u) {
              goto LABEL_42;
            }
LABEL_49:
            uint64_t v35 = 0;
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v29 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v36 = *v31;
            if (dword_24F7300 == HIDWORD(a3)) {
              uint64_t v37 = sub_A10AD4(*(void *)(v36 + 3976));
            }
            else {
              uint64_t v37 = sub_A10B80(v36 + 24, a3, 0);
            }
            uint64_t v33 = (int *)v37;
            unsigned int v34 = &v37[-*(int *)v37];
            if (*(unsigned __int16 *)v34 < 5u) {
              goto LABEL_49;
            }
LABEL_42:
            uint64_t v35 = *((unsigned __int16 *)v34 + 2);
            if (v35) {
              v35 += (uint64_t)v33 + *(unsigned int *)((char *)v33 + v35);
            }
          }
          uint8x8_t v38 = (int *)(v35 + 4 * a3 + 4 + *(unsigned int *)(v35 + 4 * a3 + 4));
          unint64_t v39 = (unsigned __int16 *)((char *)v38 - *v38);
          if (*v39 >= 9u && (uint64_t v40 = v39[4]) != 0) {
            uint64_t v41 = (unsigned int *)((char *)v38 + v40 + *(unsigned int *)((char *)v38 + v40));
          }
          else {
            uint64_t v41 = 0;
          }
          uint64_t v42 = sub_A10764(v41, v8);
          long long v43 = (unsigned __int16 *)((char *)v33 - *v33);
          if (*v43 < 0xBu)
          {
            uint64_t v44 = 0;
            unsigned int v45 = (unsigned __int16 *)((char *)v38 - *v38);
            if (*v45 >= 0x11u) {
              goto LABEL_58;
            }
          }
          else
          {
            uint64_t v44 = (unsigned int *)v43[5];
            if (v44) {
              uint64_t v44 = (unsigned int *)((char *)v44 + (void)v33 + *(unsigned int *)((char *)v44 + (void)v33));
            }
            unsigned int v45 = (unsigned __int16 *)((char *)v38 - *v38);
            if (*v45 >= 0x11u)
            {
LABEL_58:
              uint64_t v46 = v45[8];
              if (v45[8]) {
                LODWORD(v46) = *(int *)((char *)v38 + v46);
              }
LABEL_62:
              uint64_t v47 = sub_A108C4(v44, v46+ *(int *)((char *)v38 + v45[2] + *(unsigned int *)((char *)v38 + v45[2]))* -1431655765* (((unint64_t)v23 - v22) >> 2)+ *(unsigned __int8 *)(v42 + 14));
              if (v47)
              {
                uint64_t v48 = __ROR8__(*(void *)v47, 32);
                int v49 = *(_DWORD *)(v47 + 8);
              }
              else
              {
                int v49 = 0;
                uint64_t v48 = 0xFFFFFFFFLL;
              }
              uint64_t v50 = sub_369B60(*(void *)(*(void *)(v5 + 40) + 4184) + 24, __ROR8__(v48, 32), 0);
              uint64_t v51 = (int *)v50;
              unsigned int v52 = &v50[-*(int *)v50];
              if (*(unsigned __int16 *)v52 >= 5u && (uint64_t v53 = *((unsigned __int16 *)v52 + 2)) != 0) {
                unint64_t v54 = (unsigned int *)&v50[v53 + *(unsigned int *)&v50[v53]];
              }
              else {
                unint64_t v54 = 0;
              }
              unint64_t v55 = (int *)sub_B612A4(v54, v48);
              long long v56 = (unsigned __int16 *)((char *)v51 - *v51);
              if (*v56 < 0xDu)
              {
                unint64_t v57 = 0;
                unsigned int v58 = (unsigned __int16 *)((char *)v55 - *v55);
                if (*v58 >= 0x15u) {
                  goto LABEL_75;
                }
              }
              else
              {
                unint64_t v57 = (unsigned int *)v56[6];
                if (v57) {
                  unint64_t v57 = (unsigned int *)((char *)v57 + (void)v51 + *(unsigned int *)((char *)v57 + (void)v51));
                }
                unsigned int v58 = (unsigned __int16 *)((char *)v55 - *v55);
                if (*v58 >= 0x15u)
                {
LABEL_75:
                  uint64_t v59 = v58[10];
                  if (v59)
                  {
                    int v60 = *(int *)((char *)v55 + v59);
LABEL_78:
                    uint64_t v61 = (unsigned __int16 *)sub_A10148(v57, v60 + v49);
                    uint64_t v62 = *(unsigned __int16 **)(a1 + 40);
                    if (*v61 == *v62
                      && *((unsigned __int8 *)v61 + 2) == *((unsigned __int8 *)v62 + 2)
                      && *((unsigned __int8 *)v61 + 3) == *((unsigned __int8 *)v62 + 3))
                    {
                      unint64_t v88 = sub_B6F300(v5, (unsigned int *)&v88, a3, v8, -1431655765 * (((unint64_t)v80 - v79) >> 2));
                    }
                    unint64_t v22 = v79;
                    unsigned int v23 = v80 + 3;
                    uint64_t v80 = v23;
                    if ((unint64_t)v23 >= v79)
                    {
                      do
                      {
                        if ((unint64_t)v23 >= v81) {
                          break;
                        }
                        uint64_t v63 = v82;
                        if (!v82) {
                          break;
                        }
                        int v64 = sub_51D60((unsigned __int8 *)(v77[0] + 3896));
                        unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v23 - v22) >> 2);
                        uint64_t v66 = *v63;
                        if (v65 < v66) {
                          break;
                        }
                        uint64_t v67 = *((void *)v63 + 1);
                        if (*((void *)v63 + 2) + v66 - v67 <= (unint64_t)v65) {
                          break;
                        }
                        unsigned int v68 = *(unsigned __int8 *)(v67 + (v65 - v66));
                        if ((v68 & 1) == 0) {
                          break;
                        }
                        if (((v68 >> 1) & 1 & ~v64) != 0) {
                          break;
                        }
                        unint64_t v22 = v79;
                        unsigned int v23 = v80 + 3;
                        uint64_t v80 = v23;
                      }
                      while ((unint64_t)v23 >= v79);
                      unint64_t v22 = v79;
                      unsigned int v23 = v80;
                    }
                    unint64_t v24 = v81;
                    if (v83)
                    {
                      int v84 = 0;
                      if ((unint64_t)v23 >= v22 && (unint64_t)v23 < v81) {
                        goto LABEL_32;
                      }
                    }
                    continue;
                  }
                }
              }
              int v60 = -1;
              goto LABEL_78;
            }
          }
          break;
        }
        LODWORD(v46) = 0;
        goto LABEL_62;
      }
LABEL_3:
      v6 += 2;
      if (v6 == v7)
      {
        uint64_t v6 = v75;
        goto LABEL_99;
      }
    }
    BOOL v12 = 0;
LABEL_9:
    uint64_t v13 = 0;
    goto LABEL_10;
  }
LABEL_99:
  if (v6)
  {
    uint64_t v76 = v6;
    operator delete(v6);
  }
  long long v70 = (unint64_t *)&v87;
  if (v88 != 0x7FFFFFFF)
  {
    if ((int)v88 < v87) {
      long long v70 = &v88;
    }
    if (v87 == 0x7FFFFFFF) {
      long long v70 = &v88;
    }
  }
  long long v71 = &v86;
  if (HIDWORD(v88) != 0x7FFFFFFF)
  {
    if (SHIDWORD(v88) >= v86) {
      long long v71 = (int *)&v88 + 1;
    }
    if (v86 == 0x7FFFFFFF) {
      long long v71 = (int *)&v88 + 1;
    }
  }
  return *(unsigned int *)v70 | ((unint64_t)*v71 << 32);
}

void sub_B71438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_B714B8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v39 = 0;
  uint64_t v40 = 0;
  long long __p = 0;
  unint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = (void *)(v6 - 16);
  *(void *)(a1 + 32) = v6 - 16;
  if (*(unsigned char *)(*(void *)a1 + 16)) {
    BOOL v8 = *(unsigned char *)(a1 + 8) == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8 && (unint64_t)v7 >= *(void *)(a1 + 24))
  {
    do
    {
      if ((unint64_t)v7 >= *(void *)(a1 + 40)) {
        break;
      }
      unint64_t v9 = __ROR8__(*v7, 32);
      if (HIDWORD(v9) == 1 && (v9 + 3) < 2) {
        break;
      }
      char v11 = sub_2AB7E4(**(void **)(*(void *)a1 + 4120));
      uint64_t v7 = *(void **)(a1 + 32);
      if (v11) {
        break;
      }
      v7 -= 2;
      *(void *)(a1 + 32) = v7;
    }
    while ((unint64_t)v7 >= *(void *)(a1 + 24));
    unint64_t v6 = *(void *)(a1 + 40);
  }
  unint64_t v12 = *(void *)(a1 + 24);
  if ((unint64_t)v7 >= v12 && (unint64_t)v7 < v6)
  {
    do
    {
      unint64_t v14 = (char *)__p;
      if (__p != v39)
      {
        uint64_t v15 = *(void *)(a2 + 8);
        if (v15)
        {
          uint64_t v16 = __ROR8__(*v7, 32);
          int v17 = *(void **)a2;
          uint64_t v18 = 8 * v15;
          while (v16 != *v17)
          {
            ++v17;
            v18 -= 8;
            if (!v18) {
              goto LABEL_34;
            }
          }
          if ((*((unsigned char *)v7 + 15) & 2) != 0)
          {
            uint64_t v19 = *(void *)(a1 + 48);
            if (v19)
            {
              uint64_t v20 = *(unsigned int *)(v19 + 4 * (((unint64_t)v7 - v12) >> 4));
              while ((*((void *)v14 + 1) & v20) != 0)
              {
                v14 += 16;
                if (v14 == v39) {
                  goto LABEL_34;
                }
              }
            }
            if (v14 != v39)
            {
              LODWORD(v36) = ((unint64_t)v7 - v12) >> 4;
              sub_3EC418((uint64_t)a3, &v36, (int *)v14);
              uint64_t v7 = *(void **)(a1 + 32);
            }
          }
        }
      }
LABEL_34:
      if ((*((unsigned char *)v7 + 15) & 1) == 0) {
        goto LABEL_51;
      }
      uint64_t v21 = *(void *)(a1 + 48);
      if (__p == v39) {
        goto LABEL_47;
      }
      if (v21)
      {
        uint64_t v22 = ~*(_DWORD *)(v21 + 4 * (((unint64_t)v7 - *(void *)(a1 + 24)) >> 4));
        if ((*((void *)__p + 1) & v22) != 0)
        {
          unsigned int v23 = (char *)__p + 16;
          while (v23 != v39)
          {
            uint64_t v24 = *((void *)v23 + 1);
            v23 += 16;
            if ((v24 & v22) == 0) {
              goto LABEL_51;
            }
          }
LABEL_47:
          unint64_t v27 = ((unint64_t)v7 - *(void *)(a1 + 24)) >> 4;
          int v37 = v27;
          if (v21) {
            uint64_t v28 = *(unsigned int *)(v21 + 4 * v27);
          }
          else {
            uint64_t v28 = 0;
          }
          uint64_t v36 = v28;
          sub_B717DC((char **)&__p, &v37, &v36);
          uint64_t v7 = *(void **)(a1 + 32);
        }
      }
      else if (*((_DWORD *)__p + 2))
      {
        uint64_t v25 = (char *)__p + 16;
        while (v25 != v39)
        {
          int v26 = *((_DWORD *)v25 + 2);
          v25 += 16;
          if (!v26) {
            goto LABEL_51;
          }
        }
        goto LABEL_47;
      }
LABEL_51:
      v7 -= 2;
      *(void *)(a1 + 32) = v7;
      unint64_t v12 = *(void *)(a1 + 24);
      if (*(unsigned char *)(*(void *)a1 + 16)) {
        BOOL v29 = *(unsigned char *)(a1 + 8) == 0;
      }
      else {
        BOOL v29 = 0;
      }
      if (v29 && (unint64_t)v7 >= v12 && (unint64_t)v7 < *(void *)(a1 + 40))
      {
        do
        {
          unint64_t v32 = __ROR8__(*v7, 32);
          if (HIDWORD(v32) == 1 && (v32 + 3) < 2) {
            break;
          }
          char v34 = sub_2AB7E4(**(void **)(*(void *)a1 + 4120));
          unint64_t v12 = *(void *)(a1 + 24);
          uint64_t v7 = *(void **)(a1 + 32);
          if (v34) {
            break;
          }
          v7 -= 2;
          *(void *)(a1 + 32) = v7;
        }
        while ((unint64_t)v7 >= v12 && (unint64_t)v7 < *(void *)(a1 + 40));
      }
    }
    while ((unint64_t)v7 >= v12 && (unint64_t)v7 < *(void *)(a1 + 40));
  }
  if (__p)
  {
    unint64_t v39 = (char *)__p;
    operator delete(__p);
  }
}

void sub_B71794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v15 = *(void **)v13;
    if (!*(void *)v13) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v15 = *(void **)v13;
    if (!*(void *)v13) {
      goto LABEL_3;
    }
  }
  *(void *)(v13 + 8) = v15;
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

char *sub_B717DC(char **a1, _DWORD *a2, void *a3)
{
  uint64_t v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 < v6)
  {
    *(_DWORD *)uint64_t v7 = *a2;
    *((void *)v7 + 1) = *a3;
    BOOL v8 = v7 + 16;
    goto LABEL_13;
  }
  unint64_t v9 = *a1;
  uint64_t v10 = (v7 - *a1) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
  if (!v13) {
    unint64_t v14 = v11;
  }
  if (v14 >> 60) {
    sub_188D718();
  }
  uint64_t v15 = 16 * v14;
  uint64_t v16 = (char *)operator new(16 * v14);
  int v17 = &v16[16 * v10];
  uint64_t v18 = &v16[v15];
  *(_DWORD *)int v17 = *a2;
  *((void *)v17 + 1) = *a3;
  BOOL v8 = v17 + 16;
  if (v7 == v9)
  {
    *a1 = v17;
    a1[1] = v8;
    a1[2] = v18;
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    uint64_t v19 = v17 - 16;
    *((_OWORD *)v17 - 1) = *((_OWORD *)v7 - 1);
    v7 -= 16;
    v17 -= 16;
  }
  while (v7 != v9);
  *a1 = v19;
  a1[1] = v8;
  a1[2] = v18;
  if (v9) {
LABEL_12:
  }
    operator delete(v9);
LABEL_13:
  a1[1] = v8;
  return v8 - 16;
}

unint64_t sub_B7190C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v88 = a2;
  uint64_t v5 = *(void *)a1;
  int v86 = 0x7FFFFFFF;
  int v87 = 0x7FFFFFFF;
  sub_A1E9A0((uint64_t)v77, *(void *)(v5 + 40), a3, 0, 0, 0);
  uint64_t v90 = **(void **)(a1 + 8);
  *(void *)&long long v89 = &v90;
  *((void *)&v89 + 1) = 1;
  sub_B714B8((uint64_t)v77, (uint64_t)&v89, &v75);
  unint64_t v6 = v75;
  uint64_t v7 = v76;
  if (v75 != v76)
  {
    while (1)
    {
      unsigned int v8 = *v6;
      unint64_t v9 = (int *)sub_A11094((void *)(*(void *)(v5 + 40) + 4136), a3);
      uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
      unsigned int v11 = *v10;
      if (v11 < 5) {
        break;
      }
      if (v10[2])
      {
        uint64_t v12 = (char *)v9 + v10[2] + *(unsigned int *)((char *)v9 + v10[2]);
        if (v11 < 9) {
          goto LABEL_9;
        }
      }
      else
      {
        uint64_t v12 = 0;
        if (v11 < 9) {
          goto LABEL_9;
        }
      }
      uint64_t v27 = v10[4];
      if (!v27) {
        goto LABEL_9;
      }
      BOOL v13 = (unsigned int *)((char *)v9 + v27 + *(unsigned int *)((char *)v9 + v27));
LABEL_10:
      if (**(void **)(a1 + 16) == __ROR8__(*(void *)&v12[8 * *(unsigned __int8 *)(sub_A10764(v13, v8) + 14) + 4], 32)&& **(void **)(a1 + 24) == sub_B6E894((void *)(*(void *)(v5 + 40) + 4136), a3, v8)&& **(void **)(a1 + 32) == sub_B6EA30((void *)(*(void *)(v5 + 40) + 4136), a3, v8))
      {
        unint64_t v14 = v79;
        uint64_t v80 = (_DWORD *)v79;
        uint64_t v15 = (_DWORD *)v79;
        do
        {
          if ((unint64_t)v15 >= v81) {
            break;
          }
          uint64_t v16 = v82;
          if (!v82) {
            break;
          }
          int v17 = sub_51D60((unsigned __int8 *)(v77[0] + 3896));
          unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v15 - v14) >> 2);
          uint64_t v19 = *v16;
          if (v18 < v19) {
            break;
          }
          uint64_t v20 = *((void *)v16 + 1);
          if (*((void *)v16 + 2) + v19 - v20 <= (unint64_t)v18) {
            break;
          }
          unsigned int v21 = *(unsigned __int8 *)(v20 + (v18 - v19));
          if ((v21 & 1) == 0) {
            break;
          }
          if (((v21 >> 1) & 1 & ~v17) != 0) {
            break;
          }
          unint64_t v14 = v79;
          uint64_t v15 = v80 + 3;
          uint64_t v80 = v15;
        }
        while ((unint64_t)v15 >= v79);
        unint64_t v22 = v79;
        unsigned int v23 = v80;
        unint64_t v24 = v81;
        if ((unint64_t)v80 >= v79 && (unint64_t)v80 < v81 && v83 != 0)
        {
          int v84 = 0;
LABEL_32:
          uint64_t v28 = (unsigned int *)((char *)v78 + *(unsigned __int16 *)((char *)v78 - *v78 + 8));
          int v85 = *(unsigned int *)((char *)&v28[3 * (v23[2] >> 8) + 2] + *v28) + *v23;
        }
        while (2)
        {
          if ((unint64_t)v23 < v22 || (unint64_t)v23 >= v24) {
            goto LABEL_3;
          }
          uint64_t v31 = (void *)(*(void *)(v5 + 40) + 4136);
          if (sub_A10E20(v31, SHIDWORD(a3)))
          {
            unint64_t v32 = *(unsigned int **)(*(void *)(*v31 + 3944) + 72);
            if (!v32)
            {
              exception = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(&v89, "Incident stop pattern quad data requested on nullptr buffer");
              uint64_t v74 = (void *)sub_2F404((uint64_t)exception, &v89);
            }
            uint64_t v33 = (int *)((char *)v32 + *v32);
            char v34 = (char *)v33 - *v33;
            if (*(unsigned __int16 *)v34 >= 5u) {
              goto LABEL_42;
            }
LABEL_49:
            uint64_t v35 = 0;
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7308))
            {
              sub_518C8(0x3B60u, 0x7FCAu);
              dword_24F7300 = v29 | 0x40000000;
              __cxa_guard_release(&qword_24F7308);
            }
            uint64_t v36 = *v31;
            if (dword_24F7300 == HIDWORD(a3)) {
              int v37 = sub_A10AD4(*(void *)(v36 + 3976));
            }
            else {
              int v37 = sub_A10B80(v36 + 24, a3, 0);
            }
            uint64_t v33 = (int *)v37;
            char v34 = &v37[-*(int *)v37];
            if (*(unsigned __int16 *)v34 < 5u) {
              goto LABEL_49;
            }
LABEL_42:
            uint64_t v35 = *((unsigned __int16 *)v34 + 2);
            if (v35) {
              v35 += (uint64_t)v33 + *(unsigned int *)((char *)v33 + v35);
            }
          }
          uint8x8_t v38 = (int *)(v35 + 4 * a3 + 4 + *(unsigned int *)(v35 + 4 * a3 + 4));
          unint64_t v39 = (unsigned __int16 *)((char *)v38 - *v38);
          if (*v39 >= 9u && (uint64_t v40 = v39[4]) != 0) {
            uint64_t v41 = (unsigned int *)((char *)v38 + v40 + *(unsigned int *)((char *)v38 + v40));
          }
          else {
            uint64_t v41 = 0;
          }
          uint64_t v42 = sub_A10764(v41, v8);
          long long v43 = (unsigned __int16 *)((char *)v33 - *v33);
          if (*v43 < 0xBu)
          {
            uint64_t v44 = 0;
            unsigned int v45 = (unsigned __int16 *)((char *)v38 - *v38);
            if (*v45 >= 0x11u) {
              goto LABEL_58;
            }
          }
          else
          {
            uint64_t v44 = (unsigned int *)v43[5];
            if (v44) {
              uint64_t v44 = (unsigned int *)((char *)v44 + (void)v33 + *(unsigned int *)((char *)v44 + (void)v33));
            }
            unsigned int v45 = (unsigned __int16 *)((char *)v38 - *v38);
            if (*v45 >= 0x11u)
            {
LABEL_58:
              uint64_t v46 = v45[8];
              if (v45[8]) {
                LODWORD(v46) = *(int *)((char *)v38 + v46);
              }
LABEL_62:
              uint64_t v47 = sub_A108C4(v44, v46+ *(int *)((char *)v38 + v45[2] + *(unsigned int *)((char *)v38 + v45[2]))* -1431655765* (((unint64_t)v23 - v22) >> 2)+ *(unsigned __int8 *)(v42 + 14));
              if (v47)
              {
                uint64_t v48 = __ROR8__(*(void *)v47, 32);
                int v49 = *(_DWORD *)(v47 + 8);
              }
              else
              {
                int v49 = 0;
                uint64_t v48 = 0xFFFFFFFFLL;
              }
              uint64_t v50 = sub_369B60(*(void *)(*(void *)(v5 + 40) + 4184) + 24, __ROR8__(v48, 32), 0);
              uint64_t v51 = (int *)v50;
              unsigned int v52 = &v50[-*(int *)v50];
              if (*(unsigned __int16 *)v52 >= 5u && (uint64_t v53 = *((unsigned __int16 *)v52 + 2)) != 0) {
                unint64_t v54 = (unsigned int *)&v50[v53 + *(unsigned int *)&v50[v53]];
              }
              else {
                unint64_t v54 = 0;
              }
              unint64_t v55 = (int *)sub_B612A4(v54, v48);
              long long v56 = (unsigned __int16 *)((char *)v51 - *v51);
              if (*v56 < 0xDu)
              {
                unint64_t v57 = 0;
                unsigned int v58 = (unsigned __int16 *)((char *)v55 - *v55);
                if (*v58 >= 0x15u) {
                  goto LABEL_75;
                }
              }
              else
              {
                unint64_t v57 = (unsigned int *)v56[6];
                if (v57) {
                  unint64_t v57 = (unsigned int *)((char *)v57 + (void)v51 + *(unsigned int *)((char *)v57 + (void)v51));
                }
                unsigned int v58 = (unsigned __int16 *)((char *)v55 - *v55);
                if (*v58 >= 0x15u)
                {
LABEL_75:
                  uint64_t v59 = v58[10];
                  if (v59)
                  {
                    int v60 = *(int *)((char *)v55 + v59);
LABEL_78:
                    uint64_t v61 = (unsigned __int16 *)sub_A10148(v57, v60 + v49);
                    uint64_t v62 = *(unsigned __int16 **)(a1 + 40);
                    if (*v61 == *v62
                      && *((unsigned __int8 *)v61 + 2) == *((unsigned __int8 *)v62 + 2)
                      && *((unsigned __int8 *)v61 + 3) == *((unsigned __int8 *)v62 + 3))
                    {
                      unint64_t v88 = sub_B6F300(v5, (unsigned int *)&v88, a3, v8, -1431655765 * (((unint64_t)v80 - v79) >> 2));
                    }
                    unint64_t v22 = v79;
                    unsigned int v23 = v80 + 3;
                    uint64_t v80 = v23;
                    if ((unint64_t)v23 >= v79)
                    {
                      do
                      {
                        if ((unint64_t)v23 >= v81) {
                          break;
                        }
                        uint64_t v63 = v82;
                        if (!v82) {
                          break;
                        }
                        int v64 = sub_51D60((unsigned __int8 *)(v77[0] + 3896));
                        unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v23 - v22) >> 2);
                        uint64_t v66 = *v63;
                        if (v65 < v66) {
                          break;
                        }
                        uint64_t v67 = *((void *)v63 + 1);
                        if (*((void *)v63 + 2) + v66 - v67 <= (unint64_t)v65) {
                          break;
                        }
                        unsigned int v68 = *(unsigned __int8 *)(v67 + (v65 - v66));
                        if ((v68 & 1) == 0) {
                          break;
                        }
                        if (((v68 >> 1) & 1 & ~v64) != 0) {
                          break;
                        }
                        unint64_t v22 = v79;
                        unsigned int v23 = v80 + 3;
                        uint64_t v80 = v23;
                      }
                      while ((unint64_t)v23 >= v79);
                      unint64_t v22 = v79;
                      unsigned int v23 = v80;
                    }
                    unint64_t v24 = v81;
                    if (v83)
                    {
                      int v84 = 0;
                      if ((unint64_t)v23 >= v22 && (unint64_t)v23 < v81) {
                        goto LABEL_32;
                      }
                    }
                    continue;
                  }
                }
              }
              int v60 = -1;
              goto LABEL_78;
            }
          }
          break;
        }
        LODWORD(v46) = 0;
        goto LABEL_62;
      }
LABEL_3:
      v6 += 2;
      if (v6 == v7)
      {
        unint64_t v6 = v75;
        goto LABEL_99;
      }
    }
    uint64_t v12 = 0;
LABEL_9:
    BOOL v13 = 0;
    goto LABEL_10;
  }
LABEL_99:
  if (v6)
  {
    uint64_t v76 = v6;
    operator delete(v6);
  }
  long long v70 = (unint64_t *)&v87;
  if (v88 != 0x7FFFFFFF)
  {
    if ((int)v88 < v87) {
      long long v70 = &v88;
    }
    if (v87 == 0x7FFFFFFF) {
      long long v70 = &v88;
    }
  }
  long long v71 = &v86;
  if (HIDWORD(v88) != 0x7FFFFFFF)
  {
    if (SHIDWORD(v88) >= v86) {
      long long v71 = (int *)&v88 + 1;
    }
    if (v86 == 0x7FFFFFFF) {
      long long v71 = (int *)&v88 + 1;
    }
  }
  return *(unsigned int *)v70 | ((unint64_t)*v71 << 32);
}

void sub_B720C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

unint64_t sub_B72140(void *a1, uint64_t a2)
{
  unint64_t result = sub_C259A4(*a1 + 3896, 2);
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *(void *)(v5 + 200);
    uint64_t v8 = *(void *)(v5 + 208);
    while (v7 != v8)
    {
      if (!*(unsigned char *)(v7 + 24))
      {
        unint64_t v9 = *(void **)v7;
        uint64_t v10 = *(void **)(v7 + 8);
        while (v9 != v10)
        {
          unint64_t result = sub_B72230((unint64_t)a1, (uint64_t)v9);
          uint64_t v11 = v9[8];
          for (uint64_t i = v9[9]; v11 != i; v11 += 60)
            unint64_t result = sub_B723AC((unint64_t)a1, v11);
          uint64_t v13 = v9[11];
          for (uint64_t j = v9[12]; v13 != j; v13 += 60)
            unint64_t result = sub_B723AC((unint64_t)a1, v13);
          v9 += 21;
        }
      }
      v7 += 72;
    }
    v5 += 296;
  }
  return result;
}

unint64_t sub_B72230(unint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 44) == -1)
  {
    unint64_t v3 = result;
    uint64_t v22 = sub_A104E8((void *)(*(void *)result + 4136), *(void *)(a2 + 32), *(_DWORD *)(a2 + 52), *(_DWORD *)(a2 + 40));
    int v23 = v4;
    unsigned int v5 = *(_DWORD *)(a2 + 52);
    uint64_t v6 = (int *)sub_A11094((void *)(*(void *)v3 + 4136), *(void *)(a2 + 32));
    uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
    if (*v7 >= 9u && (uint64_t v8 = v7[4]) != 0) {
      unint64_t v9 = (unsigned int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
    }
    else {
      unint64_t v9 = 0;
    }
    uint64_t v10 = sub_A10764(v9, v5);
    *(void *)(a2 + 8) = sub_A0FAA0((uint64_t *)(*(void *)v3 + 4184), (unsigned int *)&v22, *(unsigned __int16 *)(v10 + 12), 0x7FFFFFFF);
    *(_WORD *)(a2 + 16) = v11;
    uint64_t v20 = sub_A104E8((void *)(*(void *)v3 + 4136), *(void *)(a2 + 32), *(_DWORD *)(a2 + 56), *(_DWORD *)(a2 + 40));
    int v21 = v12;
    unsigned int v13 = *(_DWORD *)(a2 + 56);
    unint64_t v14 = (int *)sub_A11094((void *)(*(void *)v3 + 4136), *(void *)(a2 + 32));
    uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
    if (*v15 >= 9u && (uint64_t v16 = v15[4]) != 0) {
      int v17 = (unsigned int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
    }
    else {
      int v17 = 0;
    }
    uint64_t v18 = sub_A10764(v17, v13);
    unint64_t result = sub_A0FDF4((uint64_t *)(*(void *)v3 + 4184), (unsigned int *)&v20, *(unsigned __int16 *)(v18 + 12), 0x7FFFFFFF);
    *(void *)(a2 + 20) = result;
    *(_WORD *)(a2 + 28) = v19;
  }
  return result;
}

unint64_t sub_B723AC(unint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) == -1)
  {
    unint64_t v3 = result;
    uint64_t v22 = sub_A104E8((void *)(*(void *)result + 4136), *(void *)(a2 + 28), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 36));
    int v23 = v4;
    unsigned int v5 = *(_DWORD *)(a2 + 48);
    uint64_t v6 = (int *)sub_A11094((void *)(*(void *)v3 + 4136), *(void *)(a2 + 28));
    uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
    if (*v7 >= 9u && (uint64_t v8 = v7[4]) != 0) {
      unint64_t v9 = (unsigned int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
    }
    else {
      unint64_t v9 = 0;
    }
    uint64_t v10 = sub_A10764(v9, v5);
    *(void *)(a2 + 4) = sub_A0FAA0((uint64_t *)(*(void *)v3 + 4184), (unsigned int *)&v22, *(unsigned __int16 *)(v10 + 12), 0x7FFFFFFF);
    *(_WORD *)(a2 + 12) = v11;
    uint64_t v20 = sub_A104E8((void *)(*(void *)v3 + 4136), *(void *)(a2 + 28), *(_DWORD *)(a2 + 52), *(_DWORD *)(a2 + 36));
    int v21 = v12;
    unsigned int v13 = *(_DWORD *)(a2 + 52);
    unint64_t v14 = (int *)sub_A11094((void *)(*(void *)v3 + 4136), *(void *)(a2 + 28));
    uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
    if (*v15 >= 9u && (uint64_t v16 = v15[4]) != 0) {
      int v17 = (unsigned int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
    }
    else {
      int v17 = 0;
    }
    uint64_t v18 = sub_A10764(v17, v13);
    unint64_t result = sub_A0FDF4((uint64_t *)(*(void *)v3 + 4184), (unsigned int *)&v20, *(unsigned __int16 *)(v18 + 12), 0x7FFFFFFF);
    *(void *)(a2 + 16) = result;
    *(_WORD *)(a2 + 24) = v19;
  }
  return result;
}

void sub_B72528(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  for (uint64_t i = *(void *)(a2 + 56); v2 != i; v2 += 248)
  {
    uint64_t v4 = *(void *)(v2 + 96);
    if (v4 != *(void *)(v2 + 104))
    {
      unsigned int v5 = *(_DWORD *)(v2 + 120);
      if (v5 == -1) {
        unsigned int v5 = 0;
      }
      uint64_t v6 = (_OWORD *)(v4 + 60 * v5);
      long long v8 = v6[1];
      long long v7 = v6[2];
      long long v9 = *(_OWORD *)((char *)v6 + 41);
      *(_OWORD *)(v2 + 124) = *v6;
      *(_OWORD *)(v2 + 165) = v9;
      *(_OWORD *)(v2 + 156) = v7;
      *(_OWORD *)(v2 + 140) = v8;
    }
  }
}

uint64_t sub_B72588(uint64_t a1, void *a2)
{
  *(void *)a1 = 0;
  long long __p = operator new(0x20uLL);
  long long v18 = xmmword_20B91A0;
  strcpy((char *)__p, "remove_equivalent_schedules");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 8) = v4;
  long long __p = operator new(0x20uLL);
  long long v18 = xmmword_20B8E90;
  strcpy((char *)__p, "enabled_schedule_category_types");
  unsigned int v5 = (uint64_t *)sub_5C4AC(a2, (uint64_t)&__p);
  uint64_t v6 = v5;
  if (SHIBYTE(v18) < 0)
  {
    operator delete(__p);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    if (v8 != v7)
    {
LABEL_7:
      while (!*(_DWORD *)(v8 + 8))
      {
        uint64_t v9 = *(void *)v8;
        v8 += 16;
        *(_DWORD *)a1 |= 1 << sub_B727C0(v9);
        if (v8 == v7) {
          goto LABEL_9;
        }
      }
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (*v5 != v7) {
      goto LABEL_7;
    }
  }
LABEL_9:
  long long __p = operator new(0x20uLL);
  long long v18 = xmmword_20B91B0;
  strcpy((char *)__p, "enabled_schedule_group_types");
  uint64_t v10 = (uint64_t *)sub_5C4AC(a2, (uint64_t)&__p);
  __int16 v11 = v10;
  if (SHIBYTE(v18) < 0)
  {
    operator delete(__p);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    if (v13 == v12) {
      return a1;
    }
LABEL_13:
    while (!*(_DWORD *)(v13 + 8))
    {
      uint64_t v14 = *(void *)v13;
      v13 += 16;
      *(_DWORD *)(a1 + 4) |= 1 << sub_B72B98(v14);
      if (v13 == v12) {
        return a1;
      }
    }
LABEL_16:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  uint64_t v13 = *v10;
  uint64_t v12 = v10[1];
  if (*v10 != v12) {
    goto LABEL_13;
  }
  return a1;
}

void sub_B7279C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B727C0(uint64_t a1)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v1 = (uint64_t *)a1;
    switch(*(unsigned char *)(a1 + 23))
    {
      case 6:
        if (*(_DWORD *)a1 != 1414748499 || *(_WORD *)(a1 + 4) != 19781) {
          goto LABEL_65;
        }
        return 1;
      case 9:
        if (*(void *)a1 != 0x4554534547475553 || *(unsigned char *)(a1 + 8) != 68) {
          goto LABEL_65;
        }
        return 0;
      case 0x1B:
        goto LABEL_52;
      case 0x1D:
        if (*(void *)a1 == 0x4C5F4D4554535953
          && *(void *)(a1 + 8) == 0x44455A494C41434FLL
          && *(void *)(a1 + 16) == 0x5449534E4152545FLL
          && *(void *)(a1 + 21) == 0x455059545F544953)
        {
          return 2;
        }
        uint64_t v1 = (uint64_t *)a1;
        if (*(unsigned char *)(a1 + 23) == 27) {
          goto LABEL_52;
        }
        goto LABEL_65;
      default:
        goto LABEL_65;
    }
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 == 6)
  {
    if (**(_DWORD **)a1 == 1414748499 && *(_WORD *)(*(void *)a1 + 4) == 19781) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  else if (v3 == 9 && **(void **)a1 == 0x4554534547475553 && *(unsigned char *)(*(void *)a1 + 8) == 68)
  {
    return 0;
  }
  if (v3 == 29)
  {
    if (**(void **)a1 == 0x4C5F4D4554535953
      && *(void *)(*(void *)a1 + 8) == 0x44455A494C41434FLL
      && *(void *)(*(void *)a1 + 16) == 0x5449534E4152545FLL
      && *(void *)(*(void *)a1 + 21) == 0x455059545F544953)
    {
      return 2;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 != 27) {
    goto LABEL_65;
  }
  uint64_t v1 = *(uint64_t **)a1;
LABEL_52:
  uint64_t v14 = *v1;
  uint64_t v15 = v1[1];
  uint64_t v16 = v1[2];
  uint64_t v17 = *(uint64_t *)((char *)v1 + 19);
  BOOL v18 = v14 == 0x434F4C5F454E494CLL && v15 == 0x545F44455A494C41;
  BOOL v19 = v18 && v16 == 0x545F5449534E4152;
  if (!v19 || v17 != 0x455059545F544953)
  {
LABEL_65:
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v22 = std::string::append(&v25, "\" provided");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    std::string::size_type v27 = v22->__r_.__value_.__r.__words[2];
    long long v26 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    unint64_t v24 = (void *)sub_2F404((uint64_t)exception, &v26);
  }
  return 3;
}

void sub_B72AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B72B98(uint64_t a1)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v1 = *(unsigned __int8 *)(a1 + 23);
    if (v1 != 4)
    {
      if (v1 != 7)
      {
        uint64_t v2 = (uint64_t *)a1;
        if (v1 != 27) {
          goto LABEL_40;
        }
        goto LABEL_18;
      }
      if (*(_DWORD *)a1 != 1413567571 || *(_DWORD *)(a1 + 3) != 1313818964)
      {
LABEL_40:
        exception = __cxa_allocate_exception(0x40uLL);
        std::operator+<char>();
        uint64_t v15 = std::string::append(&v18, "\" provided");
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        std::string::size_type v20 = v15->__r_.__value_.__r.__words[2];
        long long v19 = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        uint64_t v17 = (void *)sub_2F404((uint64_t)exception, &v19);
      }
      return 0;
    }
    if (*(_DWORD *)a1 == 1280065864) {
      return 1;
    }
    if (*(_DWORD *)a1 != 1347376211) {
      goto LABEL_40;
    }
    return 2;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 == 4)
  {
    if (**(_DWORD **)a1 == 1280065864) {
      return 1;
    }
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3 == 4 && **(_DWORD **)a1 == 1347376211) {
      return 2;
    }
  }
  else if (v3 == 7 && **(_DWORD **)a1 == 1413567571 && *(_DWORD *)(*(void *)a1 + 3) == 1313818964)
  {
    return 0;
  }
  if (v3 != 27) {
    goto LABEL_40;
  }
  uint64_t v2 = *(uint64_t **)a1;
LABEL_18:
  uint64_t v5 = *v2;
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[2];
  uint64_t v8 = *(uint64_t *)((char *)v2 + 19);
  if (v5 != 0x434F4C5F454E494CLL
    || v6 != 0x545F44455A494C41
    || v7 != 0x545F5449534E4152
    || v8 != 0x455059545F544953)
  {
    goto LABEL_40;
  }
  return 3;
}

void sub_B72DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B72E2C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = sub_B72588(a1, a4);
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  return result;
}

void sub_B72E5C(_DWORD *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      if ((*a1 >> *(unsigned char *)(v2 + 104)))
      {
        uint64_t v6 = *(void *)(v2 + 80);
        uint64_t v7 = *(void *)(v2 + 88);
        while (v6 != v7)
        {
          if ((a1[1] >> *(unsigned char *)(v6 + 104))) {
            sub_B72EF4((uint64_t)a1, a2, v6);
          }
          v6 += 112;
        }
      }
      v2 += 112;
    }
    while (v2 != v3);
  }
}

void sub_B72EF4(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)uint64_t v33 = 0u;
  int v34 = 1065353216;
  uint64_t v7 = *(unsigned int **)(a3 + 80);
  uint64_t v8 = *(unsigned int **)(a3 + 88);
  uint64_t v6 = (char **)(a3 + 80);
  if (v7 == v8) {
    goto LABEL_15;
  }
  do
  {
    unsigned int v9 = sub_B73140(a1, a2, (uint64_t)__p, *v7);
    uint64_t v10 = a2[3];
    sub_3DF60(v10 + 160 * v9 + 72, *(void *)(v10 + 160 * v9 + 80), *(char **)(v10 + 160 * *v7 + 72), *(char **)(v10 + 160 * *v7 + 80), (uint64_t)(*(void *)(v10 + 160 * *v7 + 80) - *(void *)(v10 + 160 * *v7 + 72)) >> 4);
    v7 += 4;
  }
  while (v7 != v8);
  __int16 v11 = (void **)v33[0];
  if (!v33[0])
  {
LABEL_15:
    *(void *)(a3 + 88) = *(void *)(a3 + 80);
  }
  else
  {
    uint64_t v12 = v33[0];
    do
    {
      unsigned int v19 = v12[8];
      uint64_t v20 = a2[3];
      int v21 = (unsigned int *)*((void *)v12 + 5);
      *(unsigned char *)(v20 + 160 * v19 + 156) = *(unsigned char *)(v20 + 160 * *v21 + 156);
      uint64_t v22 = (unsigned int *)*((void *)v12 + 6);
      if (v21 == v22)
      {
        BOOL v13 = 0;
      }
      else
      {
        long long v23 = v21 + 1;
        do
        {
          BOOL v13 = *(unsigned char *)(v20 + 160 * *(v23 - 1) + 157) != 0;
          if (*(unsigned char *)(v20 + 160 * *(v23 - 1) + 157)) {
            BOOL v24 = 1;
          }
          else {
            BOOL v24 = v23 == v22;
          }
          ++v23;
        }
        while (!v24);
      }
      uint64_t v14 = v20 + 160 * v19;
      *(unsigned char *)(v14 + 157) = v13;
      uint64_t v15 = a2[6] + 248 * **(unsigned int **)(v14 + 72);
      long long v16 = *(_OWORD *)(v15 + 140);
      long long v17 = *(_OWORD *)(v15 + 156);
      long long v18 = *(_OWORD *)(v15 + 124);
      *(_OWORD *)(v14 + 137) = *(_OWORD *)(v15 + 165);
      *(_OWORD *)(v14 + 112) = v16;
      *(_OWORD *)(v14 + 128) = v17;
      *(_OWORD *)(v14 + 96) = v18;
      uint64_t v12 = *(_DWORD **)v12;
    }
    while (v12);
    std::string v25 = *(char **)(a3 + 80);
    *(void *)(a3 + 88) = v25;
    do
    {
      long long v35 = *((unsigned int *)v11 + 8);
      std::string v25 = sub_B736E8(v6, v25, &v35) + 16;
      __int16 v11 = (void **)*v11;
    }
    while (v11);
  }
  if (*(unsigned char *)(a1 + 8))
  {
    std::string::size_type v27 = *(unsigned int **)(a3 + 80);
    for (uint64_t i = *(unsigned int **)(a3 + 88); v27 != i; v27 += 4)
      sub_B734B8(a1, (uint64_t)a2, a2[3] + 160 * *v27);
  }
  uint64_t v28 = v33[0];
  if (v33[0])
  {
    do
    {
      uint64_t v30 = (void *)*v28;
      uint64_t v31 = (void *)v28[5];
      if (v31)
      {
        v28[6] = v31;
        operator delete(v31);
      }
      operator delete(v28);
      uint64_t v28 = v30;
    }
    while (v30);
  }
  int v29 = __p[0];
  __p[0] = 0;
  if (v29) {
    operator delete(v29);
  }
}

void sub_B73104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_B73118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_B7312C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_B73140(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  unsigned int v30 = a4;
  uint64_t v6 = (void **)(a2 + 3);
  unint64_t v28 = sub_B73388(a1, a2[3] + 160 * a4);
  int v29 = v7;
  *(void *)&long long v19 = &v28;
  uint64_t v8 = sub_B73934(a3, (uint64_t *)&v28, (uint64_t)&unk_20F06E0, (uint64_t **)&v19);
  sub_745A4((uint64_t)(v8 + 5), &v30);
  uint64_t result = *((unsigned int *)v8 + 8);
  if (result == -1)
  {
    *((_DWORD *)v8 + 8) = sub_2D0F10(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[4] - a2[3]) >> 5));
    *((void *)&v26 + 1) = 0xFFFFFFFF00000000;
    *(_DWORD *)std::string::size_type v27 = 0;
    *(void *)&v27[24] = 0x10000000001;
    *(_OWORD *)long long __p = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    *(void *)((char *)&v19 + 4) = 0x8000000080000000;
    *(void *)&long long v25 = 0x8000000080000000;
    *((void *)&v25 + 1) = 0x7FFFFFFFLL;
    *(void *)&long long v26 = 0x8000000080000000;
    *(_OWORD *)&v27[4] = xmmword_20B8E30;
    *(_DWORD *)&v27[20] = -1;
    unint64_t v10 = a2[4];
    if (v10 < a2[5])
    {
      *(_OWORD *)unint64_t v10 = v19;
      long long v11 = v20;
      long long v12 = v22;
      BOOL v13 = __p[0];
      *(_OWORD *)(v10 + 32) = v21;
      *(_OWORD *)(v10 + 48) = v12;
      *(_OWORD *)(v10 + 16) = v11;
      *(void *)(v10 + 64) = v13;
      *(void *)(v10 + 72) = 0;
      *(void *)(v10 + 80) = 0;
      *(void *)(v10 + 88) = 0;
      long long v14 = v25;
      long long v15 = v26;
      long long v16 = *(_OWORD *)v27;
      *(_OWORD *)(v10 + 142) = *(_OWORD *)&v27[14];
      *(_OWORD *)(v10 + 112) = v15;
      *(_OWORD *)(v10 + 128) = v16;
      *(_OWORD *)(v10 + 96) = v14;
      a2[4] = v10 + 160;
      return *((unsigned int *)v8 + 8);
    }
    long long v17 = sub_B73D50(v6, (uint64_t)&v19);
    long long v18 = __p[1];
    a2[4] = v17;
    if (!v18) {
      return *((unsigned int *)v8 + 8);
    }
    *(void *)&long long v24 = v18;
    operator delete(v18);
    return *((unsigned int *)v8 + 8);
  }
  return result;
}

void sub_B73300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B7331C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      uint64_t v6 = (void *)v2[5];
      if (v6)
      {
        v2[6] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

unint64_t sub_B73388(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a2 + 144);
  uint64_t v5 = (int *)sub_A11094((void *)(*(void *)(a1 + 16) + 4136), *(void *)(a2 + 124));
  uint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v7 = *v6;
  if (v7 < 5)
  {
    uint64_t v8 = 0;
    goto LABEL_6;
  }
  if (v6[2])
  {
    uint64_t v8 = (char *)v5 + v6[2] + *(unsigned int *)((char *)v5 + v6[2]);
    if (v7 < 9) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v8 = 0;
    if (v7 < 9) {
      goto LABEL_6;
    }
  }
  uint64_t v17 = v6[4];
  if (v17)
  {
    unsigned int v9 = (unsigned int *)((char *)v5 + v17 + *(unsigned int *)((char *)v5 + v17));
    goto LABEL_7;
  }
LABEL_6:
  unsigned int v9 = 0;
LABEL_7:
  uint64_t v10 = sub_A10764(v9, v4);
  uint64_t v11 = __ROR8__(*(void *)&v8[8 * *(unsigned __int8 *)(v10 + 14) + 4], 32);
  long long v12 = (int *)sub_8DFD1C(*(void *)(*(void *)(a1 + 16) + 4056) + 24, *(void *)&v8[8 * *(unsigned __int8 *)(v10 + 14) + 4], 0, "line");
  BOOL v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 >= 7u && (unsigned __int16 v14 = v13[3]) != 0) {
    unint64_t v15 = *(unsigned int *)((char *)v12 + v14 + 4) | ((unint64_t)*(unsigned int *)((char *)v12 + v14) << 32);
  }
  else {
    unint64_t v15 = 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a2 + 156) != 1) {
    unint64_t v15 = 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a2 + 156)) {
    return v15;
  }
  else {
    return v11;
  }
}

void sub_B734B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a2;
  uint64_t v14 = a1;
  unsigned int v4 = *(unsigned int **)(a3 + 72);
  uint64_t v5 = *(unsigned int **)(a3 + 80);
  unint64_t v6 = 126 - 2 * __clz(((char *)v5 - (char *)v4) >> 4);
  v12[0] = a2;
  v12[1] = a1;
  long long v20 = &v13;
  long long v21 = v12;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  sub_B73F38(v4, v5, &v20, v7, 1);
  uint64_t v8 = *(unsigned int **)(a3 + 72);
  unsigned int v9 = *(unsigned int **)(a3 + 80);
  if (v8 == v9)
  {
    unsigned int v9 = *(unsigned int **)(a3 + 72);
    goto LABEL_21;
  }
  for (uint64_t i = v8 + 4; ; i += 4)
  {
    if (i == v9) {
      goto LABEL_21;
    }
    sub_B74E1C((uint64_t)&v20, *(void *)(v13 + 48), v14, *(i - 4));
    sub_B74E1C((uint64_t)&v15, *(void *)(v13 + 48), v14, *i);
    if (v20 == v15) {
      break;
    }
LABEL_7:
    ;
  }
  if (BYTE4(v21))
  {
    if (!v17 || v21 != v16) {
      goto LABEL_7;
    }
  }
  else if (v17)
  {
    goto LABEL_7;
  }
  if (!v23)
  {
    if (!v19) {
      goto LABEL_18;
    }
    goto LABEL_7;
  }
  if (!v19 || v22 != v18) {
    goto LABEL_7;
  }
LABEL_18:
  uint64_t v11 = i - 4;
  if (i - 4 == v9)
  {
LABEL_21:
    if (v9 != *(unsigned int **)(a3 + 80)) {
      goto LABEL_22;
    }
    return;
  }
  while (1)
  {
    i += 4;
    if (i == v9) {
      break;
    }
    sub_B74E1C((uint64_t)&v20, *(void *)(v13 + 48), v14, *v11);
    sub_B74E1C((uint64_t)&v15, *(void *)(v13 + 48), v14, *i);
    if (v20 != v15) {
      goto LABEL_25;
    }
    if (BYTE4(v21))
    {
      if (!v17 || v21 != v16)
      {
LABEL_25:
        *((_OWORD *)v11 + 1) = *(_OWORD *)i;
        v11 += 4;
        continue;
      }
    }
    else if (v17)
    {
      goto LABEL_25;
    }
    if (v23)
    {
      if (!v19 || v22 != v18) {
        goto LABEL_25;
      }
    }
    else if (v19)
    {
      goto LABEL_25;
    }
  }
  unsigned int v9 = v11 + 4;
  if (v11 + 4 == *(unsigned int **)(a3 + 80)) {
    return;
  }
LABEL_22:
  *(void *)(a3 + 80) = v9;
}

char *sub_B736E8(char **a1, char *a2, _OWORD *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      *(_OWORD *)uint64_t v8 = *a3;
      a1[1] = v8 + 16;
    }
    else
    {
      uint64_t v10 = v8 + 16;
      uint64_t v11 = (long long *)(v5 - 16);
      long long v12 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          long long v13 = *v11++;
          *(_OWORD *)long long v12 = v13;
          v12 += 16;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10) {
        memmove((void *)(v5 - 16 * ((uint64_t)(v5 - (void)v10) >> 4)), v8, v5 - (void)v10);
      }
      *(_OWORD *)uint64_t v8 = *a3;
    }
    return v8;
  }
  unint64_t v14 = ((uint64_t)(v5 - (void)v6) >> 4) + 1;
  if (v14 >> 60) {
    sub_2E00();
  }
  uint64_t v16 = v9 - (void)v6;
  if (v16 >> 3 > v14) {
    unint64_t v14 = v16 >> 3;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v14;
  }
  if (v17)
  {
    if (v17 >> 60) {
      sub_188D718();
    }
    int v18 = (char *)operator new(16 * v17);
    uint64_t v19 = v7 >> 4;
    long long v20 = &v18[16 * (v7 >> 4)];
    long long v21 = &v18[16 * v17];
    if (v7 >> 4 != v17) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  int v18 = 0;
  uint64_t v19 = v7 >> 4;
  long long v20 = (char *)(16 * (v7 >> 4));
  long long v21 = 0;
  if (!(v7 >> 4))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v7 >> 3;
      }
      if (v23 >> 60) {
        sub_188D718();
      }
      long long v24 = (char *)operator new(16 * v23);
      long long v20 = &v24[16 * (v23 >> 2)];
      long long v21 = &v24[16 * v23];
      if (v18)
      {
        operator delete(v18);
        unint64_t v6 = *a1;
      }
    }
    else
    {
      if (v19 >= -1) {
        unint64_t v22 = v19 + 1;
      }
      else {
        unint64_t v22 = v19 + 2;
      }
      v20 -= 16 * (v22 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)long long v20 = *a3;
  long long v25 = v20;
  if (v6 != v8)
  {
    long long v26 = v8;
    std::string::size_type v27 = v20;
    do
    {
      long long v25 = v27 - 16;
      *((_OWORD *)v27 - 1) = *((_OWORD *)v26 - 1);
      v26 -= 16;
      v27 -= 16;
    }
    while (v26 != v6);
  }
  unint64_t v28 = a1[1];
  int64_t v29 = v28 - v8;
  if (v28 != v8) {
    memmove(v20 + 16, v8, v28 - v8);
  }
  unsigned int v30 = *a1;
  *a1 = v25;
  a1[1] = &v20[v29 + 16];
  a1[2] = v21;
  if (v30) {
    operator delete(v30);
  }
  return v20;
}

void sub_B7391C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_B73934(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v9 = (((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v8 ^ (v8 >> 33))) >> 33))
      + 0x388152A534) ^ 0xDEADBEEF;
  uint64_t v10 = *((unsigned __int8 *)a2 + 8);
  unint64_t v11 = (v10 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      uint64_t v4 = (v10 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
      if (v11 >= v12) {
        uint64_t v4 = v11 % v12;
      }
    }
    else
    {
      uint64_t v4 = v11 & (v12 - 1);
    }
    unint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      unint64_t v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v19 = v15[1];
            if (v19 == v11)
            {
              if (*((_DWORD *)v15 + 5) == HIDWORD(v7)
                && *((_DWORD *)v15 + 4) == v7
                && *((unsigned __int8 *)v15 + 24) == v10)
              {
                return v15;
              }
            }
            else if ((v19 & (v12 - 1)) != v4)
            {
              goto LABEL_37;
            }
            unint64_t v15 = (void *)*v15;
            if (!v15) {
              goto LABEL_37;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)v15 + 5) == HIDWORD(v7)
              && *((_DWORD *)v15 + 4) == v7
              && *((unsigned __int8 *)v15 + 24) == v10)
            {
              return v15;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          unint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_37:
  unint64_t v22 = (void *)(a1 + 16);
  unint64_t v15 = operator new(0x40uLL);
  void *v15 = 0;
  v15[1] = v11;
  uint64_t v23 = **a4;
  *((_DWORD *)v15 + 6) = *((_DWORD *)*a4 + 2);
  void v15[2] = v23;
  v15[4] = 0xFFFFFFFFLL;
  v15[5] = 0;
  v15[6] = 0;
  v15[7] = 0;
  float v24 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v25 = *(float *)(a1 + 32);
  if (v12 && (float)(v25 * (float)v12) >= v24)
  {
    uint64_t v26 = *(void *)a1;
    std::string::size_type v27 = *(void **)(*(void *)a1 + 8 * v4);
    if (v27)
    {
LABEL_40:
      void *v15 = *v27;
LABEL_75:
      *std::string::size_type v27 = v15;
      goto LABEL_76;
    }
  }
  else
  {
    BOOL v28 = 1;
    if (v12 >= 3) {
      BOOL v28 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v12);
    unint64_t v30 = vcvtps_u32_f32(v24 / v25);
    if (v29 <= v30) {
      size_t prime = v30;
    }
    else {
      size_t prime = v29;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v12 = *(void *)(a1 + 8);
    }
    if (prime > v12) {
      goto LABEL_51;
    }
    if (prime < v12)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime < v12) {
LABEL_51:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v35 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        uint64_t v4 = v11 % v12;
        uint64_t v26 = *(void *)a1;
        std::string::size_type v27 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v27) {
          goto LABEL_40;
        }
      }
      else
      {
        uint64_t v4 = v11;
        uint64_t v26 = *(void *)a1;
        std::string::size_type v27 = *(void **)(*(void *)a1 + 8 * v11);
        if (v27) {
          goto LABEL_40;
        }
      }
    }
    else
    {
      uint64_t v4 = v35 & v11;
      uint64_t v26 = *(void *)a1;
      std::string::size_type v27 = *(void **)(*(void *)a1 + 8 * (v35 & v11));
      if (v27) {
        goto LABEL_40;
      }
    }
  }
  void *v15 = *v22;
  *unint64_t v22 = v15;
  *(void *)(v26 + 8 * v4) = v22;
  if (*v15)
  {
    unint64_t v36 = *(void *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v36 >= v12) {
        v36 %= v12;
      }
    }
    else
    {
      v36 &= v12 - 1;
    }
    std::string::size_type v27 = (void *)(*(void *)a1 + 8 * v36);
    goto LABEL_75;
  }
LABEL_76:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_B73CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B73D00((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B73D00(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[5];
      if (v3)
      {
        v2[6] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

char *sub_B73D50(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x199999999999999) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v6 = 0x199999999999999;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x199999999999999) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(160 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 48);
  unint64_t v9 = &v7[160 * v3];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v9 + 3) = v8;
  uint64_t v10 = &v7[160 * v6];
  *((void *)v9 + 8) = *(void *)(a2 + 64);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v11;
  *((void *)v9 + 10) = 0;
  *((void *)v9 + 11) = 0;
  *(_OWORD *)(v9 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v9 + 11) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  long long v12 = *(_OWORD *)(a2 + 96);
  long long v13 = *(_OWORD *)(a2 + 112);
  long long v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v9 + 142) = *(_OWORD *)(a2 + 142);
  *((_OWORD *)v9 + 7) = v13;
  *((_OWORD *)v9 + 8) = v14;
  *((_OWORD *)v9 + 6) = v12;
  unint64_t v15 = v9 + 160;
  unint64_t v16 = (char *)*a1;
  unint64_t v17 = (char *)a1[1];
  if (v17 == *a1)
  {
    *a1 = v9;
    a1[1] = v15;
    a1[2] = v10;
    if (!v17) {
      return v15;
    }
    goto LABEL_21;
  }
  uint64_t v18 = 0;
  do
  {
    uint64_t v19 = &v9[v18];
    long long v20 = &v17[v18];
    *((_OWORD *)v19 - 10) = *(_OWORD *)&v17[v18 - 160];
    long long v21 = *(_OWORD *)&v17[v18 - 144];
    long long v22 = *(_OWORD *)&v17[v18 - 128];
    long long v23 = *(_OWORD *)&v17[v18 - 112];
    *((void *)v19 - 12) = *(void *)&v17[v18 - 96];
    *((_OWORD *)v19 - 8) = v22;
    *((_OWORD *)v19 - 7) = v23;
    *((_OWORD *)v19 - 9) = v21;
    *((void *)v19 - 10) = 0;
    *((void *)v19 - 9) = 0;
    *(_OWORD *)(v19 - 88) = *(_OWORD *)&v17[v18 - 88];
    *((void *)v19 - 9) = *(void *)&v17[v18 - 72];
    *((void *)v20 - 11) = 0;
    *((void *)v20 - 10) = 0;
    *((void *)v20 - 9) = 0;
    long long v24 = *(_OWORD *)&v17[v18 - 64];
    long long v25 = *(_OWORD *)&v17[v18 - 48];
    long long v26 = *(_OWORD *)&v17[v18 - 32];
    *(_OWORD *)(v19 - 18) = *(_OWORD *)&v17[v18 - 18];
    *((_OWORD *)v19 - 3) = v25;
    *((_OWORD *)v19 - 2) = v26;
    *((_OWORD *)v19 - 4) = v24;
    v18 -= 160;
  }
  while (&v17[v18] != v16);
  std::string::size_type v27 = (char *)*a1;
  unint64_t v17 = (char *)a1[1];
  *a1 = &v9[v18];
  a1[1] = v15;
  a1[2] = v10;
  if (v17 != v27)
  {
    do
    {
      BOOL v28 = (void *)*((void *)v17 - 11);
      if (v28)
      {
        *((void *)v17 - 10) = v28;
        operator delete(v28);
      }
      v17 -= 160;
    }
    while (v17 != v27);
    unint64_t v17 = v27;
  }
  if (v17) {
LABEL_21:
  }
    operator delete(v17);
  return v15;
}

void sub_B73F38(unsigned int *a1, unsigned int *a2, void **a3, uint64_t a4, char a5)
{
  while (2)
  {
    long long v12 = a2 - 4;
    uint64_t v67 = a2;
    unsigned int v68 = a2 - 8;
    uint64_t v66 = a2 - 12;
    long long v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (char *)a2 - (char *)v13;
          uint64_t v15 = ((char *)a2 - (char *)v13) >> 4;
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (sub_B747D0(a3, v12, a1))
                {
                  long long v71 = *(_OWORD *)a1;
                  *(_OWORD *)a1 = *(_OWORD *)v12;
                  *(_OWORD *)long long v12 = v71;
                }
                break;
              case 3:
                sub_B74AB8(a1, a1 + 4, v12, a3);
                break;
              case 4:
                unint64_t v30 = (long long *)(a1 + 4);
                uint64_t v31 = (long long *)(a1 + 8);
                sub_B74AB8(a1, a1 + 4, a1 + 8, a3);
                if (sub_B747D0(a3, v12, a1 + 8))
                {
                  long long v71 = *v31;
                  long long v32 = v71;
                  *uint64_t v31 = *(_OWORD *)v12;
                  *(_OWORD *)long long v12 = v32;
                  if (sub_B747D0(a3, a1 + 8, a1 + 4))
                  {
                    long long v33 = *v30;
                    *unint64_t v30 = *v31;
                    *uint64_t v31 = v33;
                    if (sub_B747D0(a3, a1 + 4, a1))
                    {
                      long long v71 = *(_OWORD *)a1;
                      *(_OWORD *)a1 = *v30;
                      *unint64_t v30 = v71;
                    }
                  }
                }
                break;
              case 5:
                sub_B74968(a1, a1 + 4, a1 + 8, a1 + 12, v12, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v14 <= 383)
          {
            uint64_t v34 = a1 + 4;
            BOOL v36 = a1 == a2 || v34 == a2;
            if (a5)
            {
              if (!v36)
              {
                uint64_t v37 = 0;
                uint8x8_t v38 = a1;
                do
                {
                  uint64_t v40 = v38;
                  uint8x8_t v38 = v34;
                  if (sub_B747D0(a3, v34, v40))
                  {
                    long long v71 = *(_OWORD *)v38;
                    uint64_t v41 = v37;
                    do
                    {
                      *(_OWORD *)((char *)a1 + v41 + 16) = *(_OWORD *)((char *)a1 + v41);
                      if (!v41)
                      {
                        unint64_t v39 = a1;
                        goto LABEL_77;
                      }
                      v41 -= 16;
                    }
                    while ((sub_B747D0(a3, (unsigned int *)&v71, (unsigned int *)((char *)a1 + v41)) & 1) != 0);
                    unint64_t v39 = (unsigned int *)((char *)a1 + v41 + 16);
LABEL_77:
                    *(_OWORD *)unint64_t v39 = v71;
                  }
                  uint64_t v34 = v38 + 4;
                  v37 += 16;
                }
                while (v38 + 4 != a2);
              }
            }
            else if (!v36)
            {
              uint64_t v62 = a1 - 4;
              do
              {
                uint64_t v63 = a1;
                a1 = v34;
                if (sub_B747D0(a3, v34, v63))
                {
                  long long v71 = *(_OWORD *)a1;
                  int v64 = v62;
                  do
                  {
                    *((_OWORD *)v64 + 2) = *((_OWORD *)v64 + 1);
                    char v65 = sub_B747D0(a3, (unsigned int *)&v71, v64);
                    v64 -= 4;
                  }
                  while ((v65 & 1) != 0);
                  *((_OWORD *)v64 + 2) = v71;
                }
                uint64_t v34 = a1 + 4;
                v62 += 4;
              }
              while (a1 + 4 != a2);
            }
            return;
          }
          if (!a4)
          {
            if (a1 != a2)
            {
              int64_t v42 = (unint64_t)(v15 - 2) >> 1;
              int64_t v69 = v42;
              do
              {
                int64_t v43 = v42;
                if (v69 >= v42)
                {
                  uint64_t v44 = (2 * v42) | 1;
                  unsigned int v45 = &a1[4 * v44];
                  if (2 * v42 + 2 < v15 && sub_B747D0(a3, &a1[4 * v44], v45 + 4))
                  {
                    v45 += 4;
                    uint64_t v44 = 2 * v43 + 2;
                  }
                  uint64_t v46 = &a1[4 * v43];
                  if ((sub_B747D0(a3, v45, v46) & 1) == 0)
                  {
                    long long v71 = *(_OWORD *)v46;
                    do
                    {
                      uint64_t v47 = v45;
                      *(_OWORD *)uint64_t v46 = *(_OWORD *)v45;
                      if (v69 < v44) {
                        break;
                      }
                      uint64_t v48 = (2 * v44) | 1;
                      unsigned int v45 = &a1[4 * v48];
                      uint64_t v49 = 2 * v44 + 2;
                      if (v49 < v15 && sub_B747D0(a3, &a1[4 * v48], v45 + 4))
                      {
                        v45 += 4;
                        uint64_t v48 = v49;
                      }
                      uint64_t v46 = v47;
                      uint64_t v44 = v48;
                    }
                    while (!sub_B747D0(a3, v45, (unsigned int *)&v71));
                    *(_OWORD *)uint64_t v47 = v71;
                  }
                }
                int64_t v42 = v43 - 1;
              }
              while (v43);
              uint64_t v50 = (unint64_t)v14 >> 4;
              uint64_t v51 = v67;
              do
              {
                uint64_t v53 = 0;
                long long v70 = *(_OWORD *)a1;
                unint64_t v54 = a1;
                do
                {
                  unint64_t v55 = &v54[4 * v53 + 4];
                  uint64_t v56 = (2 * v53) | 1;
                  uint64_t v57 = 2 * v53 + 2;
                  if (v57 < v50 && sub_B747D0(a3, &v54[4 * v53 + 4], &v54[4 * v53 + 8]))
                  {
                    v55 += 4;
                    uint64_t v56 = v57;
                  }
                  *(_OWORD *)unint64_t v54 = *(_OWORD *)v55;
                  unint64_t v54 = v55;
                  uint64_t v53 = v56;
                }
                while (v56 <= (uint64_t)((unint64_t)(v50 - 2) >> 1));
                v51 -= 4;
                if (v55 == v51)
                {
                  *(_OWORD *)unint64_t v55 = v70;
                }
                else
                {
                  *(_OWORD *)unint64_t v55 = *(_OWORD *)v51;
                  *(_OWORD *)uint64_t v51 = v70;
                  uint64_t v58 = (char *)v55 - (char *)a1 + 16;
                  if (v58 >= 17)
                  {
                    unint64_t v59 = (((unint64_t)v58 >> 4) - 2) >> 1;
                    int v60 = &a1[4 * v59];
                    if (sub_B747D0(a3, v60, v55))
                    {
                      long long v71 = *(_OWORD *)v55;
                      do
                      {
                        uint64_t v61 = v60;
                        *(_OWORD *)unint64_t v55 = *(_OWORD *)v60;
                        if (!v59) {
                          break;
                        }
                        unint64_t v59 = (v59 - 1) >> 1;
                        int v60 = &a1[4 * v59];
                        unint64_t v55 = v61;
                      }
                      while ((sub_B747D0(a3, v60, (unsigned int *)&v71) & 1) != 0);
                      *(_OWORD *)uint64_t v61 = v71;
                    }
                  }
                }
              }
              while (v50-- > 2);
            }
            return;
          }
          unint64_t v16 = (unint64_t)v15 >> 1;
          unint64_t v17 = &a1[4 * ((unint64_t)v15 >> 1)];
          if ((unint64_t)v14 < 0x801) {
            break;
          }
          sub_B74AB8(a1, v17, v12, a3);
          uint64_t v18 = 4 * v16;
          sub_B74AB8(a1 + 4, &a1[v18 - 4], v68, a3);
          sub_B74AB8(a1 + 8, &a1[v18 + 4], v66, a3);
          sub_B74AB8(&a1[v18 - 4], v17, &a1[v18 + 4], a3);
          long long v71 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v17;
          *(_OWORD *)unint64_t v17 = v71;
          --a4;
          if (a5) {
            goto LABEL_11;
          }
LABEL_10:
          if (sub_B747D0(a3, a1 - 4, a1)) {
            goto LABEL_11;
          }
          long long v70 = *(_OWORD *)a1;
          if (sub_B747D0(a3, (unsigned int *)&v70, v12))
          {
            long long v13 = a1;
            do
              v13 += 4;
            while ((sub_B747D0(a3, (unsigned int *)&v70, v13) & 1) == 0);
          }
          else
          {
            long long v26 = a1 + 4;
            do
            {
              long long v13 = v26;
              if (v26 >= a2) {
                break;
              }
              int v27 = sub_B747D0(a3, (unsigned int *)&v70, v26);
              long long v26 = v13 + 4;
            }
            while (!v27);
          }
          BOOL v28 = a2;
          if (v13 < a2)
          {
            BOOL v28 = a2;
            do
              v28 -= 4;
            while ((sub_B747D0(a3, (unsigned int *)&v70, v28) & 1) != 0);
          }
          while (v13 < v28)
          {
            long long v71 = *(_OWORD *)v13;
            *(_OWORD *)long long v13 = *(_OWORD *)v28;
            *(_OWORD *)BOOL v28 = v71;
            do
              v13 += 4;
            while (!sub_B747D0(a3, (unsigned int *)&v70, v13));
            do
              v28 -= 4;
            while ((sub_B747D0(a3, (unsigned int *)&v70, v28) & 1) != 0);
          }
          unint64_t v29 = v13 - 4;
          BOOL v5 = v13 - 4 >= a1;
          BOOL v6 = v13 - 4 == a1;
          if (v13 - 4 != a1) {
            *(_OWORD *)a1 = *(_OWORD *)v29;
          }
          a5 = 0;
          *(_OWORD *)unint64_t v29 = v70;
        }
        sub_B74AB8(v17, a1, v12, a3);
        --a4;
        if ((a5 & 1) == 0) {
          goto LABEL_10;
        }
LABEL_11:
        uint64_t v19 = 0;
        long long v70 = *(_OWORD *)a1;
        do
          v19 += 4;
        while ((sub_B747D0(a3, &a1[v19], (unsigned int *)&v70) & 1) != 0);
        long long v20 = &a1[v19];
        long long v21 = v67;
        if (v19 == 4)
        {
          long long v21 = v67;
          do
          {
            if (v20 >= v21) {
              break;
            }
            v21 -= 4;
          }
          while ((sub_B747D0(a3, v21, (unsigned int *)&v70) & 1) == 0);
        }
        else
        {
          do
            v21 -= 4;
          while (!sub_B747D0(a3, v21, (unsigned int *)&v70));
        }
        if (v20 >= v21)
        {
          long long v24 = v20 - 4;
          if (v20 - 4 == a1) {
            goto LABEL_29;
          }
LABEL_28:
          *(_OWORD *)a1 = *(_OWORD *)v24;
          goto LABEL_29;
        }
        long long v22 = &a1[v19];
        long long v23 = v21;
        do
        {
          long long v71 = *(_OWORD *)v22;
          *(_OWORD *)long long v22 = *(_OWORD *)v23;
          *(_OWORD *)long long v23 = v71;
          do
            v22 += 4;
          while ((sub_B747D0(a3, v22, (unsigned int *)&v70) & 1) != 0);
          do
            v23 -= 4;
          while (!sub_B747D0(a3, v23, (unsigned int *)&v70));
        }
        while (v22 < v23);
        long long v24 = v22 - 4;
        if (v24 != a1) {
          goto LABEL_28;
        }
LABEL_29:
        *(_OWORD *)long long v24 = v70;
        BOOL v5 = v20 >= v21;
        a2 = v67;
        if (v5) {
          break;
        }
LABEL_33:
        sub_B73F38(a1, v24, a3, a4, a5 & 1);
        a5 = 0;
        long long v13 = v24 + 4;
      }
      BOOL v25 = sub_B74BB8(a1, v24, a3);
      long long v13 = v24 + 4;
      if (sub_B74BB8(v24 + 4, v67, a3)) {
        break;
      }
      if (!v25) {
        goto LABEL_33;
      }
    }
    a2 = v24;
    if (!v25) {
      continue;
    }
    break;
  }
}

uint64_t sub_B747D0(void **a1, unsigned int *a2, unsigned int *a3)
{
  sub_B74E1C((uint64_t)&v20, *(void *)(**a1 + 48), (*a1)[1], *a2);
  int v6 = sub_B75060(*(void *)(*a1[1] + 48), a1[1][1], *a2);
  unint64_t v7 = v20;
  int v8 = v22;
  unsigned int v9 = v21;
  int v10 = v24;
  unsigned int v11 = v23;
  sub_B74E1C((uint64_t)&v15, *(void *)(**a1 + 48), (*a1)[1], *a3);
  int v12 = sub_B75060(*(void *)(*a1[1] + 48), a1[1][1], *a3);
  if (v7 < v15) {
    return 1;
  }
  uint64_t v13 = 0;
  if (HIDWORD(v15) < HIDWORD(v7) || v15 < v7) {
    return v13;
  }
  if (v17)
  {
    uint64_t v13 = 1;
    if (!v8 || v9 < v16) {
      return v13;
    }
    if (v16 < v9 || !v19) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (v19 && !v8)
  {
LABEL_14:
    uint64_t v13 = 1;
    if (!v10 || v11 < v18) {
      return v13;
    }
  }
LABEL_16:
  if (v7 < v15) {
    return v6 < v12;
  }
  if (v8)
  {
    uint64_t v13 = 0;
    if (!v17 || v16 < v9) {
      return v13;
    }
    if (!v10 || v9 < v16) {
      return v6 < v12;
    }
  }
  else if (!v10 || v17)
  {
    return v6 < v12;
  }
  uint64_t v13 = 0;
  if (v19 && v18 >= v11) {
    return v6 < v12;
  }
  return v13;
}

__n128 sub_B74968(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, void **a6)
{
  sub_B74AB8(a1, a2, a3, a6);
  if (sub_B747D0(a6, a4, a3))
  {
    long long v12 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v12;
    if (sub_B747D0(a6, a3, a2))
    {
      long long v13 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v13;
      if (sub_B747D0(a6, a2, a1))
      {
        __n128 v14 = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = v14;
      }
    }
  }
  if (sub_B747D0(a6, a5, a4))
  {
    long long v16 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v16;
    if (sub_B747D0(a6, a4, a3))
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v17;
      if (sub_B747D0(a6, a3, a2))
      {
        long long v18 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v18;
        if (sub_B747D0(a6, a2, a1))
        {
          __n128 result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t sub_B74AB8(unsigned int *a1, unsigned int *a2, unsigned int *a3, void **a4)
{
  char v8 = sub_B747D0(a4, a2, a1);
  uint64_t result = sub_B747D0(a4, a3, a2);
  if (v8)
  {
    if (result)
    {
      long long v10 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
LABEL_10:
      *(_OWORD *)a3 = v10;
      return result;
    }
    long long v13 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    uint64_t result = sub_B747D0(a4, a3, a2);
    if (result)
    {
      long long v10 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      goto LABEL_10;
    }
  }
  else if (result)
  {
    long long v11 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v11;
    uint64_t result = sub_B747D0(a4, a2, a1);
    if (result)
    {
      long long v12 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v12;
    }
  }
  return result;
}

BOOL sub_B74BB8(unsigned int *a1, unsigned int *a2, void **a3)
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v8 = a2 - 4;
      if (sub_B747D0(a3, a2 - 4, a1))
      {
        long long v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_OWORD *)char v8 = v9;
      }
      return 1;
    case 3:
      sub_B74AB8(a1, a1 + 4, a2 - 4, a3);
      return 1;
    case 4:
      long long v16 = (long long *)(a1 + 4);
      long long v17 = (long long *)(a1 + 8);
      long long v18 = a2 - 4;
      sub_B74AB8(a1, a1 + 4, a1 + 8, a3);
      if (sub_B747D0(a3, v18, a1 + 8))
      {
        long long v19 = *v17;
        *long long v17 = *(_OWORD *)v18;
        *(_OWORD *)long long v18 = v19;
        if (sub_B747D0(a3, a1 + 8, a1 + 4))
        {
          long long v20 = *v16;
          *long long v16 = *v17;
          *long long v17 = v20;
          if (sub_B747D0(a3, a1 + 4, a1))
          {
            long long v21 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v16;
            *long long v16 = v21;
          }
        }
      }
      return 1;
    case 5:
      sub_B74968(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4, a3);
      return 1;
    default:
      long long v10 = a1 + 8;
      sub_B74AB8(a1, a1 + 4, a1 + 8, a3);
      long long v11 = a1 + 12;
      if (a1 + 12 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (!sub_B747D0(a3, v11, v10))
  {
LABEL_13:
    long long v10 = v11;
    v12 += 16;
    v11 += 4;
    if (v11 == a2) {
      return 1;
    }
  }
  v22[0] = *(_OWORD *)v11;
  uint64_t v14 = v12;
  do
  {
    unint64_t v15 = (unsigned int *)((char *)a1 + v14);
    *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
    if (v14 == -32)
    {
      *(_OWORD *)a1 = v22[0];
      if (++v13 != 8) {
        goto LABEL_13;
      }
      return v11 + 4 == a2;
    }
    v14 -= 16;
  }
  while ((sub_B747D0(a3, (unsigned int *)v22, v15 + 4) & 1) != 0);
  *(_OWORD *)((char *)a1 + v14 + 48) = v22[0];
  if (++v13 != 8) {
    goto LABEL_13;
  }
  return v11 + 4 == a2;
}

unint64_t sub_B74E1C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6 = a2 + 248 * a4;
  unsigned int v9 = *(_DWORD *)(v6 + 172);
  char v8 = (unsigned int *)(v6 + 172);
  unsigned int v7 = v9;
  long long v10 = (unint64_t *)(v8 - 5);
  long long v11 = (int *)sub_A11094((void *)(*(void *)(a3 + 16) + 4136), *(void *)(v8 - 5));
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  unsigned int v13 = *v12;
  if (v13 < 5)
  {
    uint64_t v14 = 0;
    goto LABEL_6;
  }
  if (!v12[2])
  {
    uint64_t v14 = 0;
    if (v13 >= 9) {
      goto LABEL_37;
    }
LABEL_6:
    unint64_t v15 = 0;
    goto LABEL_7;
  }
  uint64_t v14 = (char *)v11 + v12[2] + *(unsigned int *)((char *)v11 + v12[2]);
  if (v13 < 9) {
    goto LABEL_6;
  }
LABEL_37:
  uint64_t v34 = v12[4];
  if (!v34) {
    goto LABEL_6;
  }
  unint64_t v15 = (unsigned int *)((char *)v11 + v34 + *(unsigned int *)((char *)v11 + v34));
LABEL_7:
  uint64_t v16 = *(void *)&v14[8 * *(unsigned __int8 *)(sub_A10764(v15, v7) + 14) + 4];
  long long v17 = (void *)(*(void *)(a3 + 16) + 4136);
  unint64_t v18 = sub_B6EA30(v17, *v10, *v8);
  if (HIDWORD(v18)) {
    BOOL v19 = v18 == 0xFFFFFFFFLL;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19) {
    goto LABEL_12;
  }
  unsigned int v23 = (int *)sub_B61568(*v17 + 24, v18, 0, "routing direction name");
  unsigned __int8 v24 = (unsigned __int16 *)((char *)v23 - *v23);
  if (*v24 >= 5u && (uint64_t v25 = v24[2]) != 0)
  {
    int v20 = *(int *)((char *)v23 + v25);
    if (v20 == -1)
    {
LABEL_12:
      int v20 = 0;
      char v21 = 0;
      char v22 = 1;
      goto LABEL_19;
    }
  }
  else
  {
    int v20 = 0;
  }
  char v22 = 0;
  char v21 = 1;
LABEL_19:
  uint64_t v26 = __ROR8__(v16, 32);
  int v27 = (void *)(*(void *)(a3 + 16) + 4136);
  unint64_t result = sub_B6E894(v27, *v10, *v8);
  if (HIDWORD(result)) {
    BOOL v29 = result == 0xFFFFFFFFLL;
  }
  else {
    BOOL v29 = 1;
  }
  if (v29) {
    goto LABEL_24;
  }
  unint64_t result = sub_B61ADC(*v27 + 24, result, 0, "routing headsign");
  long long v33 = (unsigned __int16 *)(result - *(int *)result);
  if (*v33 >= 5u)
  {
    uint64_t v31 = v33[2];
    if (!v31 || (LODWORD(v31) = *(_DWORD *)(result + v31), v31 != -1))
    {
      char v32 = 0;
      char v30 = 1;
      *(void *)a1 = v26;
      *(unsigned char *)(a1 + 12) = v21;
      if (v22) {
        goto LABEL_26;
      }
LABEL_25:
      *(_DWORD *)(a1 + 8) = v20;
      goto LABEL_26;
    }
LABEL_24:
    char v30 = 0;
    LODWORD(v31) = 0;
    char v32 = 1;
    *(void *)a1 = v26;
    *(unsigned char *)(a1 + 12) = v21;
    if (v22) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  char v32 = 0;
  LODWORD(v31) = 0;
  char v30 = 1;
  *(void *)a1 = v26;
  *(unsigned char *)(a1 + 12) = v21;
  if ((v22 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_26:
  *(unsigned char *)(a1 + 20) = v30;
  if ((v32 & 1) == 0) {
    *(_DWORD *)(a1 + 16) = v31;
  }
  return result;
}

uint64_t sub_B75060(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = a1 + 248 * a3;
  unsigned int v5 = *(_DWORD *)(v4 + 172);
  uint64_t v6 = (int *)sub_A11094((void *)(*(void *)(a2 + 16) + 4136), *(void *)(v4 + 152));
  unsigned int v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 9u && (uint64_t v8 = v7[4]) != 0) {
    unsigned int v9 = (unsigned int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = __ROR8__(*(void *)sub_A10764(v9, v5), 32);
  v17[0] = 0x1FFFFFFFELL;
  v17[1] = v10;
  if (!sub_A0E0A8(*(void **)(a2 + 24), v17)) {
    return 2147483646;
  }
  long long v11 = sub_A0E0A8(*(void **)(a2 + 24), v17);
  if (!v11) {
    sub_5AE8("unordered_map::at: key not found");
  }
  uint64_t v12 = v11;
  int v13 = *((_DWORD *)v11 + 8);
  uint64_t result = 0x7FFFFFFFLL;
  if (v13 != 0x7FFFFFFF)
  {
    int v15 = *((_DWORD *)v12 + 9);
    if (v15 != 0x7FFFFFFF)
    {
      int v16 = *((_DWORD *)v12 + 10);
      if (v16 != 0x7FFFFFFF) {
        return (v15 + v13 + v16);
      }
    }
  }
  return result;
}

_DWORD *sub_B75168(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x38uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A20;
  strcpy((char *)__p[0], "restrict_category_criteria_to_highest_scored_group");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A80;
  strcpy((char *)__p[0], "restrict_group_criteria_to_highest_scored_cell");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  __p[0] = operator new(0x38uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A10;
  strcpy((char *)__p[0], "restrict_cell_criteria_to_highest_scored_schedule");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 2) = v6;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "min_absolute_stop_popularity");
  double v7 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v7;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "min_absolute_station_popularity");
  double v8 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 16) = v8;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "min_absolute_line_popularity");
  double v9 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 24) = v9;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9800;
  strcpy((char *)__p[0], "min_absolute_system_popularity");
  double v10 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)(a1 + 40) = 0u;
  *(double *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  memset_pattern16((void *)(a1 + 80), &unk_20B8FB0, 0x18uLL);
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "significance_values");
  long long v11 = (void *)sub_560F4(a2, (uint64_t)__p);
  BOOL v28 = (_DWORD *)(a1 + 80);
  BOOL v29 = (_DWORD *)a1;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  for (uint64_t i = 0; i != 8; ++i)
  {
    char v31 = byte_20ED2A2[i];
    int v13 = "EXTRA_SMALL";
    switch(v31)
    {
      case 0:
        break;
      case 1:
        int v13 = "SMALL";
        break;
      case 2:
        int v13 = "MEDIUM";
        break;
      case 3:
        int v13 = "LARGE";
        break;
      case 4:
        int v13 = "EXTRA_LARGE";
        break;
      case 5:
        int v13 = "EXTRA_EXTRA_SMALL";
        break;
      case 6:
        int v13 = "EXTRA_EXTRA_LARGE";
        break;
      default:
        if (v31 == 127) {
          int v13 = "UNKNOWN";
        }
        else {
          int v13 = "";
        }
        break;
    }
    double v30 = 0.0;
    size_t v14 = strlen(v13);
    if (v14 >= 0x7FFFFFFFFFFFFFF8) {
      sub_188D690();
    }
    int v15 = (void *)v14;
    if (v14 >= 0x17)
    {
      uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v17 = v14 | 7;
      }
      uint64_t v18 = v17 + 1;
      int v16 = operator new(v17 + 1);
      __p[1] = v15;
      __p[2] = (void *)(v18 | 0x8000000000000000);
      __p[0] = v16;
LABEL_35:
      memcpy(v16, v13, (size_t)v15);
      goto LABEL_36;
    }
    HIBYTE(__p[2]) = v14;
    int v16 = __p;
    if (v14) {
      goto LABEL_35;
    }
LABEL_36:
    *((unsigned char *)v15 + (void)v16) = 0;
    double v19 = sub_5C7E8(v11, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    double v30 = v19;
    sub_B76580(a1 + 40, (unsigned __int8 *)&v31, &v31, &v30);
  }
  strcpy((char *)__p, "service_thresholds_min");
  HIBYTE(__p[2]) = 22;
  int v20 = (void *)sub_560F4(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 7;
  strcpy((char *)__p, "UNKNOWN");
  int v21 = 600 * sub_319F48(v20, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *BOOL v28 = v21;
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "COUNTDOWN");
  int v22 = 600 * sub_319F48(v20, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  v29[21] = v22;
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "STAMP");
  int v23 = 600 * sub_319F48(v20, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  v29[22] = v23;
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "STAMP_LIST");
  int v24 = 600 * sub_319F48(v20, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  v29[23] = v24;
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "HIDDEN");
  int v25 = 600 * sub_319F48(v20, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  v29[24] = v25;
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "OPERATING_HOURS");
  int v26 = sub_319F48(v20, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  v29[25] = 600 * v26;
  return v29;
}

void sub_B75828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_12168(v20);
  _Unwind_Resume(a1);
}

_DWORD *sub_B758B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = sub_B75168(a1, a4);
  *((void *)result + 13) = a2;
  *((void *)result + 14) = a3;
  return result;
}

BOOL sub_B758E8(BOOL result, int *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 48);
  uint64_t v4 = *(void *)(a3 + 56);
  if (v3 != v4)
  {
    uint64_t v6 = result;
    do
    {
      uint64_t result = sub_B75B60(v6, a2, v3);
      v3 += 248;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_B7593C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 32);
  if (v2 != v3)
  {
    uint64_t v5 = result;
    do
    {
      uint64_t result = sub_B76340(v5, a2, v2);
      v2 += 160;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_B75990(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result;
    uint64_t v5 = a2 + 3;
    int32x2_t v6 = vdup_n_s32(0x7FFFFFFEu);
    do
    {
      uint64_t v7 = *(void *)(v2 + 80);
      uint64_t v8 = *(void *)(v2 + 88);
      while (v7 != v8)
      {
        double v9 = *(int **)(v7 + 80);
        double v10 = *(int **)(v7 + 88);
        if (v9 != v10)
        {
          if (*(unsigned char *)(v4 + 1))
          {
            long long v11 = (double *)(v9 + 4);
            if (v9 + 4 != v10)
            {
              do
              {
                if (*((double *)v9 + 1) < v11[1]) {
                  double v9 = (int *)v11;
                }
                v11 += 2;
              }
              while (v11 != (double *)v10);
            }
            double v10 = v9 + 4;
          }
          char v12 = 0;
          int64x2_t v13 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
          double v14 = -1.79769313e308;
          int32x2_t v15 = v6;
          int8x16_t v16 = (int8x16_t)v13;
          int8x16_t v17 = (int8x16_t)v13;
          do
          {
            float64x2_t v19 = (float64x2_t)v17;
            float64x2_t v20 = (float64x2_t)v16;
            float64x2_t v21 = (float64x2_t)v13;
            unsigned int v18 = *v9;
            v9 += 4;
            uint64_t result = sub_A173AC(v5, v18);
            int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(result + 16), v21), *(int8x16_t *)(result + 16), (int8x16_t)v21);
            v12 |= *(unsigned char *)result != 0;
            int32x2_t v15 = vmin_s32(*(int32x2_t *)(result + 4), v15);
            int8x16_t v16 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(result + 32), v20), *(int8x16_t *)(result + 32), (int8x16_t)v20);
            int8x16_t v17 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(result + 48), v19), *(int8x16_t *)(result + 48), (int8x16_t)v19);
            if (v14 < *(double *)(result + 64)) {
              double v14 = *(double *)(result + 64);
            }
          }
          while (v9 != v10);
          *(_WORD *)(v7 + 1) = v22;
          *(unsigned char *)(v7 + 3) = v23;
          *(unsigned char *)uint64_t v7 = v12 & 1;
          *(int32x2_t *)(v7 + 4) = v15;
          *(int64x2_t *)(v7 + 16) = v13;
          *(int8x16_t *)(v7 + 32) = v16;
          *(int8x16_t *)(v7 + 48) = v17;
          *(double *)(v7 + 64) = v14;
        }
        v7 += 112;
      }
      v2 += 112;
    }
    while (v2 != v3);
  }
  return result;
}

unsigned char *sub_B75B14(unsigned char *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t result = sub_B7649C(v4, v2);
      v2 += 112;
    }
    while (v2 != v3);
  }
  return result;
}

BOOL sub_B75B60(uint64_t a1, int *a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD *)(a3 + 172);
  uint64_t v7 = (int *)sub_A11094((void *)(*(void *)(a1 + 104) + 4136), *(void *)(a3 + 152));
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0) {
    double v10 = (unsigned int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
  }
  else {
    double v10 = 0;
  }
  uint64_t v11 = __ROR8__(*(void *)sub_A10764(v10, v6), 32);
  v83[0] = 0x1FFFFFFFELL;
  v83[1] = v11;
  if (!sub_A0E0A8(*(void **)(a1 + 112), v83))
  {
    LODWORD(v17) = 0;
    LODWORD(v13) = 0;
    int v16 = 0;
LABEL_15:
    int v15 = v13 + v17 + v16;
    LODWORD(v14) = v13;
    goto LABEL_16;
  }
  char v12 = sub_A0E0A8(*(void **)(a1 + 112), v83);
  if (!v12) {
    goto LABEL_89;
  }
  unint64_t v13 = v12[4];
  LODWORD(v14) = 0x7FFFFFFF;
  int v15 = 0x7FFFFFFF;
  if (v13 != 0x7FFFFFFF)
  {
    int v16 = *((_DWORD *)v12 + 10);
    unint64_t v17 = HIDWORD(v13);
    BOOL v18 = HIDWORD(v13) == 0x7FFFFFFF || v16 == 0x7FFFFFFF;
    uint64_t v14 = v12[4];
    if (!v18) {
      goto LABEL_15;
    }
  }
LABEL_16:
  *(_DWORD *)(a3 + 4) = v15;
  *(_DWORD *)(a3 + 8) = v14;
  unint64_t v19 = __ROR8__(v11, 32);
  float64x2_t v20 = (int *)sub_498D5C(*(void *)(*(void *)(a1 + 104) + 4120) + 24, v19, 0, "stop");
  float64x2_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v21 >= 0xDu && (unsigned __int16 v22 = v21[6]) != 0) {
    unint64_t v23 = *(unsigned int *)((char *)v20 + v22 + 4) | ((unint64_t)*(unsigned int *)((char *)v20 + v22) << 32);
  }
  else {
    unint64_t v23 = 0xFFFFFFFFLL;
  }
  unsigned int v24 = *(_DWORD *)(a3 + 172);
  int v25 = (int *)sub_A11094((void *)(*(void *)(a1 + 104) + 4136), *(void *)(a3 + 152));
  int v26 = (unsigned __int16 *)((char *)v25 - *v25);
  unsigned int v27 = *v26;
  if (v27 < 5)
  {
    BOOL v28 = 0;
    goto LABEL_25;
  }
  if (!v26[2])
  {
    BOOL v28 = 0;
    if (v27 >= 9) {
      goto LABEL_87;
    }
LABEL_25:
    BOOL v29 = 0;
    goto LABEL_26;
  }
  BOOL v28 = (char *)v25 + v26[2] + *(unsigned int *)((char *)v25 + v26[2]);
  if (v27 < 9) {
    goto LABEL_25;
  }
LABEL_87:
  uint64_t v80 = v26[4];
  if (!v80) {
    goto LABEL_25;
  }
  BOOL v29 = (unsigned int *)((char *)v25 + v80 + *(unsigned int *)((char *)v25 + v80));
LABEL_26:
  unint64_t v30 = *(void *)&v28[8 * *(unsigned __int8 *)(sub_A10764(v29, v24) + 14) + 4];
  char v31 = (int *)sub_8DFD1C(*(void *)(*(void *)(a1 + 104) + 4056) + 24, v30, 0, "line");
  char v32 = (unsigned __int16 *)((char *)v31 - *v31);
  if (*v32 >= 7u && (unsigned __int16 v33 = v32[3]) != 0) {
    unint64_t v34 = *(unsigned int *)((char *)v31 + v33 + 4) | ((unint64_t)*(unsigned int *)((char *)v31 + v33) << 32);
  }
  else {
    unint64_t v34 = 0xFFFFFFFFLL;
  }
  unint64_t v35 = __ROR8__(v34, 32);
  BOOL v36 = (int *)sub_8EF9B8(*(void *)(*(void *)(a1 + 104) + 4144) + 24, v35, 0, "system");
  uint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
  double v38 = 0.0;
  double v39 = 0.0;
  if (*v37 >= 0x21u)
  {
    uint64_t v40 = v37[16];
    if (v40)
    {
      uint64_t v41 = (int *)((char *)v36 + v40 + *(unsigned int *)((char *)v36 + v40));
      int64_t v42 = (unsigned __int16 *)((char *)v41 - *v41);
      if (*v42 >= 5u)
      {
        uint64_t v43 = v42[2];
        if (v43) {
          double v39 = *(double *)((char *)v41 + v43);
        }
      }
    }
  }
  if (*(double *)(a1 + 32) >= v39) {
    double v39 = *(double *)(a1 + 32);
  }
  *(double *)(a3 + 16) = v39;
  *(long double *)(a3 + 24) = log(v39 + 1.0);
  uint64_t v44 = (int *)sub_8DFD1C(*(void *)(*(void *)(a1 + 104) + 4056) + 24, v30, 0, "line");
  unsigned int v45 = (unsigned __int16 *)((char *)v44 - *v44);
  if (*v45 >= 0x47u)
  {
    uint64_t v46 = v45[35];
    if (v46)
    {
      uint64_t v47 = (int *)((char *)v44 + v46 + *(unsigned int *)((char *)v44 + v46));
      uint64_t v48 = (unsigned __int16 *)((char *)v47 - *v47);
      if (*v48 >= 5u)
      {
        uint64_t v49 = v48[2];
        if (v49) {
          double v38 = *(double *)((char *)v47 + v49);
        }
      }
    }
  }
  double v50 = *(double *)(a1 + 24);
  if (v50 < v38) {
    double v50 = v38;
  }
  *(double *)(a3 + 32) = v50;
  *(long double *)(a3 + 40) = log(v50 + 1.0);
  if (v23 != -1 && HIDWORD(v23))
  {
    unint64_t v59 = (int *)sub_8ED928(*(void *)(*(void *)(a1 + 104) + 4112) + 24, __ROR8__(v23, 32), 0, "station");
    int v60 = (unsigned __int16 *)((char *)v59 - *v59);
    double v61 = 0.0;
    if (*v60 >= 0x35u)
    {
      uint64_t v62 = v60[26];
      if (v62)
      {
        uint64_t v63 = (int *)((char *)v59 + v62 + *(unsigned int *)((char *)v59 + v62));
        int v64 = (unsigned __int16 *)((char *)v63 - *v63);
        if (*v64 >= 5u)
        {
          uint64_t v65 = v64[2];
          if (v65) {
            double v61 = *(double *)((char *)v63 + v65);
          }
        }
      }
    }
    double v82 = v61;
    uint64_t v58 = &v82;
    if (*(double *)(a1 + 16) >= v61) {
      uint64_t v58 = (double *)(a1 + 16);
    }
  }
  else
  {
    uint64_t v51 = (int *)sub_498D5C(*(void *)(*(void *)(a1 + 104) + 4120) + 24, v19, 0, "stop");
    unsigned int v52 = (unsigned __int16 *)((char *)v51 - *v51);
    double v53 = 0.0;
    if (*v52 >= 0x3Du)
    {
      uint64_t v54 = v52[30];
      if (v54)
      {
        unint64_t v55 = (int *)((char *)v51 + v54 + *(unsigned int *)((char *)v51 + v54));
        uint64_t v56 = (unsigned __int16 *)((char *)v55 - *v55);
        if (*v56 >= 5u)
        {
          uint64_t v57 = v56[2];
          if (v57) {
            double v53 = *(double *)((char *)v55 + v57);
          }
        }
      }
    }
    double v81 = v53;
    uint64_t v58 = &v81;
    if (*(double *)(a1 + 8) >= v53) {
      uint64_t v58 = (double *)(a1 + 8);
    }
  }
  double v66 = *v58;
  *(double *)(a3 + 48) = *v58;
  *(long double *)(a3 + 56) = log(v66 + 1.0);
  uint64_t v67 = (int *)sub_8EF9B8(*(void *)(*(void *)(a1 + 104) + 4144) + 24, v35, 0, "system");
  unsigned int v68 = (unsigned __int16 *)((char *)v67 - *v67);
  if (*v68 >= 0x19u && (uint64_t v69 = v68[12]) != 0)
  {
    unsigned int v70 = *((unsigned __int8 *)v67 + v69);
    unint64_t v71 = *(void *)(a1 + 48);
    if (!v71) {
      goto LABEL_89;
    }
  }
  else
  {
    unsigned int v70 = 127;
    unint64_t v71 = *(void *)(a1 + 48);
    if (!v71) {
      goto LABEL_89;
    }
  }
  uint8x8_t v72 = (uint8x8_t)vcnt_s8((int8x8_t)v71);
  v72.i16[0] = vaddlv_u8(v72);
  if (v72.u32[0] > 1uLL)
  {
    unint64_t v73 = v70;
    if (v71 <= v70) {
      unint64_t v73 = v70 % v71;
    }
  }
  else
  {
    unint64_t v73 = (v71 - 1) & v70;
  }
  uint64_t v74 = *(uint64_t ****)(*(void *)(a1 + 40) + 8 * v73);
  if (!v74 || (int v75 = *v74) == 0) {
LABEL_89:
  }
    sub_5AE8("unordered_map::at: key not found");
  if (v72.u32[0] < 2uLL)
  {
    unint64_t v76 = v71 - 1;
    while (1)
    {
      uint64_t v78 = v75[1];
      if (v78 == (uint64_t *)v70)
      {
        if (*((unsigned __int8 *)v75 + 16) == v70) {
          goto LABEL_85;
        }
      }
      else if (((unint64_t)v78 & v76) != v73)
      {
        goto LABEL_89;
      }
      int v75 = (uint64_t **)*v75;
      if (!v75) {
        goto LABEL_89;
      }
    }
  }
  while (1)
  {
    unint64_t v77 = (unint64_t)v75[1];
    if (v77 == v70) {
      break;
    }
    if (v77 >= v71) {
      v77 %= v71;
    }
    if (v77 != v73) {
      goto LABEL_89;
    }
LABEL_75:
    int v75 = (uint64_t **)*v75;
    if (!v75) {
      goto LABEL_89;
    }
  }
  if (*((unsigned __int8 *)v75 + 16) != v70) {
    goto LABEL_75;
  }
LABEL_85:
  *(void *)(a3 + 64) = v75[3];
  BOOL result = sub_B7614C(a1, a2, a3);
  *(unsigned char *)a3 = result;
  return result;
}

BOOL sub_B7614C(uint64_t a1, int *a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 164) == -1)
  {
    uint64_t v9 = *(void *)(a3 + 96);
    uint64_t v10 = *(void *)(a3 + 104);
    if (v9 != v10)
    {
      while (1)
      {
        int v11 = *(_DWORD *)(v9 + 8);
        if (v11 == 0x7FFFFFFF) {
          int v11 = *(_DWORD *)(v9 + 4);
        }
        if (v11 >= *a2) {
          break;
        }
        v9 += 60;
        if (v9 == v10)
        {
          int v12 = 0x7FFFFFFF;
          goto LABEL_22;
        }
      }
    }
    int v12 = 0x7FFFFFFF;
    if (v9 != v10)
    {
      uint64_t v13 = 8;
      if (*(_DWORD *)(v9 + 8) == 0x7FFFFFFF) {
        uint64_t v13 = 4;
      }
      int v12 = 10 * (*(_DWORD *)(v9 + v13) - *a2);
    }
LABEL_22:
    unsigned int v14 = *(_DWORD *)(a3 + 172);
    int v15 = (int *)sub_A11094((void *)(*(void *)(a1 + 104) + 4136), *(void *)(a3 + 152));
    int v16 = (unsigned __int16 *)((char *)v15 - *v15);
    unsigned int v17 = *v16;
    if (v17 < 5)
    {
      BOOL v18 = 0;
      goto LABEL_27;
    }
    if (v16[2])
    {
      BOOL v18 = (char *)v15 + v16[2] + *(unsigned int *)((char *)v15 + v16[2]);
      if (v17 < 9) {
        goto LABEL_27;
      }
    }
    else
    {
      BOOL v18 = 0;
      if (v17 < 9) {
        goto LABEL_27;
      }
    }
    uint64_t v24 = v16[4];
    if (v24)
    {
      unint64_t v19 = (unsigned int *)((char *)v15 + v24 + *(unsigned int *)((char *)v15 + v24));
LABEL_28:
      uint64_t v20 = sub_A10764(v19, v14);
      float64x2_t v21 = (int *)sub_8DFD1C(*(void *)(*(void *)(a1 + 104) + 4056) + 24, *(void *)&v18[8 * *(unsigned __int8 *)(v20 + 14) + 4], 0, "line");
      unsigned __int16 v22 = (unsigned __int16 *)((char *)v21 - *v21);
      if (*v22 < 0x25u)
      {
        uint64_t v23 = 0;
        if (v12 == 0x7FFFFFFF) {
          return 0;
        }
      }
      else
      {
        uint64_t v23 = v22[18];
        if (v23) {
          uint64_t v23 = *((unsigned __int8 *)v21 + v23);
        }
        if (v12 == 0x7FFFFFFF) {
          return 0;
        }
      }
      return v12 <= *(_DWORD *)(a1 + 4 * v23 + 80);
    }
LABEL_27:
    unint64_t v19 = 0;
    goto LABEL_28;
  }
  uint64_t v3 = *(_DWORD **)(a3 + 184);
  uint64_t v4 = *(_DWORD **)(a3 + 192);
  if (v3 != v4)
  {
    int v5 = *a2;
    while (*v3 > v5 || v3[1] < v5)
    {
      v3 += 10;
      if (v3 == v4)
      {
        uint64_t v3 = *(_DWORD **)(a3 + 192);
        return v3 != v4;
      }
    }
  }
  return v3 != v4;
}

uint64_t sub_B76340(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(int **)(a3 + 72);
  uint64_t v4 = *(int **)(a3 + 80);
  if (v3 != v4)
  {
    *(unsigned char *)a3 = 0;
    int64x2_t v6 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    *(int32x2_t *)(a3 + 4) = vdup_n_s32(0x7FFFFFFEu);
    *(int64x2_t *)(a3 + 16) = v6;
    *(int64x2_t *)(a3 + 32) = v6;
    *(int64x2_t *)(a3 + 48) = v6;
    *(void *)(a3 + 64) = 0xFFEFFFFFFFFFFFFFLL;
    if (*(unsigned char *)(result + 2))
    {
      uint64_t v7 = (double *)(v3 + 4);
      if (v3 + 4 != v4)
      {
        do
        {
          if (*((double *)v3 + 1) < v7[1]) {
            uint64_t v3 = (int *)v7;
          }
          v7 += 2;
        }
        while (v7 != (double *)v4);
      }
      uint64_t v4 = v3 + 4;
    }
    char v8 = 0;
    uint64_t v9 = (_WORD *)(a3 + 1);
    int64x2_t v10 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    int32x2_t v11 = vdup_n_s32(0x7FFFFFFEu);
    int v12 = (void *)(a2 + 48);
    double v13 = -1.79769313e308;
    int8x16_t v14 = (int8x16_t)v10;
    int8x16_t v15 = (int8x16_t)v10;
    do
    {
      float64x2_t v17 = (float64x2_t)v15;
      float64x2_t v18 = (float64x2_t)v14;
      float64x2_t v19 = (float64x2_t)v10;
      unsigned int v16 = *v3;
      v3 += 4;
      BOOL result = sub_B76884(v12, v16);
      int64x2_t v10 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(result + 16), v19), *(int8x16_t *)(result + 16), (int8x16_t)v19);
      v8 |= *(unsigned char *)result != 0;
      int32x2_t v11 = vmin_s32(*(int32x2_t *)(result + 4), v11);
      int8x16_t v14 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(result + 32), v18), *(int8x16_t *)(result + 32), (int8x16_t)v18);
      int8x16_t v15 = vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(result + 48), v17), *(int8x16_t *)(result + 48), (int8x16_t)v17);
      if (v13 < *(double *)(result + 64)) {
        double v13 = *(double *)(result + 64);
      }
    }
    while (v3 != v4);
    _WORD *v9 = v20;
    *(unsigned char *)(a3 + 3) = v21;
    *(unsigned char *)a3 = v8 & 1;
    *(int32x2_t *)(a3 + 4) = v11;
    *(int64x2_t *)(a3 + 16) = v10;
    *(int8x16_t *)(a3 + 32) = v14;
    *(int8x16_t *)(a3 + 48) = v15;
    *(double *)(a3 + 64) = v13;
  }
  return result;
}

unsigned char *sub_B7649C(unsigned char *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 80);
  uint64_t v3 = *(void *)(a2 + 88);
  if (v2 != v3)
  {
    if (*result)
    {
      for (uint64_t i = v2 + 112; i != v3; i += 112)
      {
        if (*(double *)(v2 + 72) < *(double *)(i + 72)) {
          uint64_t v2 = i;
        }
      }
      uint64_t v3 = v2 + 112;
    }
    char v5 = 0;
    float64x2_t v6 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    int32x2_t v7 = vdup_n_s32(0x7FFFFFFEu);
    double v8 = -1.79769313e308;
    float64x2_t v9 = v6;
    float64x2_t v10 = v6;
    do
    {
      float64x2_t v6 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(v2 + 16), v6), *(int8x16_t *)(v2 + 16), (int8x16_t)v6);
      v5 |= *(unsigned char *)v2 != 0;
      int32x2_t v7 = vmin_s32(*(int32x2_t *)(v2 + 4), v7);
      float64x2_t v9 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(v2 + 32), v9), *(int8x16_t *)(v2 + 32), (int8x16_t)v9);
      float64x2_t v10 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)(v2 + 48), v10), *(int8x16_t *)(v2 + 48), (int8x16_t)v10);
      if (v8 < *(double *)(v2 + 64)) {
        double v8 = *(double *)(v2 + 64);
      }
      v2 += 112;
    }
    while (v2 != v3);
    *(_WORD *)(a2 + 1) = v11;
    *(unsigned char *)(a2 + 3) = v12;
    *(unsigned char *)a2 = v5 & 1;
    *(int32x2_t *)(a2 + 4) = v7;
    *(float64x2_t *)(a2 + 16) = v6;
    *(float64x2_t *)(a2 + 32) = v9;
    *(float64x2_t *)(a2 + 48) = v10;
    *(double *)(a2 + 64) = v8;
  }
  return result;
}

void *sub_B76580(uint64_t a1, unsigned __int8 *a2, unsigned char *a3, void *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    __int16 v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      char v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == v8)
            {
              if (*((unsigned __int8 *)v12 + 16) == v8) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            char v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((unsigned __int8 *)v12 + 16) == v8) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v4) {
              break;
            }
          }
          char v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  char v12 = operator new(0x20uLL);
  *char v12 = 0;
  v12[1] = v8;
  *((unsigned char *)v12 + 16) = *a3;
  v12[3] = *a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v9 && (float)(v16 * (float)v9) >= v15)
  {
    unint64_t v8 = v4;
  }
  else
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_36;
    }
    if (prime < v9)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v9) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        v8 %= v9;
      }
    }
    else
    {
      unint64_t v8 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  int v25 = *(void **)(*(void *)a1 + 8 * v8);
  if (v25)
  {
    *char v12 = *v25;
LABEL_59:
    *int v25 = v12;
    goto LABEL_60;
  }
  *char v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v24 + 8 * v8) = a1 + 16;
  if (*v12)
  {
    unint64_t v26 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    int v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_B76870(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B76884(void *a1, unint64_t a2)
{
  if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    float64x2_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint8x8_t v10 = &v15;
    }
    else {
      uint8x8_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    char v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 248 * a2;
}

void sub_B769E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_B76AC4(uint64_t *a1)
{
  memset(&__str, 0, sizeof(__str));
  sub_56CAC((uint64_t)&__str, 0xCCCCCCCCCCCCCCCDLL * ((a1[4] - a1[3]) >> 5));
  sub_B78E70(a1[3], a1[4], (uint64_t)&__str, __str.__r_.__value_.__l.__size_, (void (*)(void **__return_ptr, uint64_t))sub_B76DF8);
  memset(&__str, 0, sizeof(__str));
  sub_56CAC((uint64_t)&__str, 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4));
  sub_B79060(*a1, a1[1], (uint64_t)&__str, __str.__r_.__value_.__l.__size_, (void (*)(void **__return_ptr, uint64_t))sub_B77070);
  sub_B78970(&__str, "schedule_cells");
}

void sub_B76D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_5AF78(v17);
  sub_5AF78((uint64_t)&a17);
  sub_55758(&a9);
  sub_55758(&a13);
  _Unwind_Resume(a1);
}

void sub_B76DD4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

void sub_B76DF8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  sub_B77544((uint64_t)&v2, a1);
  sub_B77B84(&__str, "criteria");
}

void sub_B76FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  sub_5AF78(v24);
  sub_5AF78((uint64_t)&a23);
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_5450C((uint64_t)&a16);
  sub_5450C(v23);
  _Unwind_Resume(a1);
}

void sub_B77040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_5450C((uint64_t)va);
  sub_5450C(v5);
  _Unwind_Resume(a1);
}

void sub_B7705C(_Unwind_Exception *a1)
{
  sub_5450C(v1);
  _Unwind_Resume(a1);
}

void sub_B77070(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  memset(&v3[5], 0, 24);
  memset(&__str, 0, sizeof(__str));
  sub_56CAC((uint64_t)&__str, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 4));
  sub_B78250(*(void *)(a1 + 80), *(void *)(a1 + 88), (uint64_t)&__str, __str.__r_.__value_.__l.__size_, (void (*)(void **__return_ptr, uint64_t))sub_B77DE8);
  *(std::string *)&v3[5] = __str;
  sub_B77544((uint64_t)v3, a1);
  sub_B77B84(&__str, "criteria");
}

void sub_B77440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_5450C((uint64_t)&a15);
  do
  {
    v25 -= 40;
    sub_5AF78((uint64_t)v25);
  }
  while (v25 != &a24);
  sub_55758(&a20);
  sub_5450C(v24);
  _Unwind_Resume(a1);
}

void sub_B77518(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

void sub_B77544(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&__str, "is_in_service");
  if (*(unsigned char *)a2) {
    int v4 = 4;
  }
  else {
    int v4 = 5;
  }
  uint64_t v17[2] = v4;
  int v5 = *(_DWORD *)(a2 + 4);
  std::string v18 = operator new(0x20uLL);
  long long v19 = xmmword_20B8E90;
  strcpy((char *)v18, "min_total_walking_duration_dsec");
  double v20 = (double)v5;
  int v21 = 1;
  int v6 = *(_DWORD *)(a2 + 8);
  uint8x8_t v22 = operator new(0x28uLL);
  long long v23 = xmmword_20B93A0;
  strcpy((char *)v22, "min_on_street_walking_duration_dsec");
  double v24 = (double)v6;
  int v25 = 1;
  uint64_t v7 = *(void *)(a2 + 16);
  unint64_t v26 = operator new(0x20uLL);
  long long v27 = xmmword_20B9800;
  strcpy((char *)v26, "max_absolute_system_popularity");
  uint64_t v28 = v7;
  int v29 = 1;
  uint64_t v8 = *(void *)(a2 + 24);
  long long v9 = (char *)operator new(0x28uLL);
  long long v31 = xmmword_20B9280;
  strcpy(v9, "max_absolute_system_popularity_log");
  unint64_t v30 = v9;
  uint64_t v32 = v8;
  int v33 = 1;
  uint64_t v10 = *(void *)(a2 + 32);
  unint64_t v34 = operator new(0x20uLL);
  long long v35 = xmmword_20B91B0;
  strcpy((char *)v34, "max_absolute_line_popularity");
  uint64_t v36 = v10;
  int v37 = 1;
  uint64_t v11 = *(void *)(a2 + 40);
  char v12 = (char *)operator new(0x28uLL);
  long long v39 = xmmword_20B9390;
  strcpy(v12, "max_absolute_line_popularity_log");
  double v38 = v12;
  uint64_t v40 = v11;
  int v41 = 1;
  uint64_t v13 = *(void *)(a2 + 48);
  int64_t v42 = operator new(0x28uLL);
  long long v43 = xmmword_20B9960;
  strcpy((char *)v42, "max_absolute_stop_or_station_popularity");
  uint64_t v44 = v13;
  int v45 = 1;
  uint64_t v14 = *(void *)(a2 + 56);
  uint64_t v46 = operator new(0x30uLL);
  uint64_t v47 = 43;
  strcpy((char *)v46, "max_absolute_stop_or_station_popularity_log");
  unint64_t v48 = 0x8000000000000030;
  uint64_t v49 = v14;
  int v50 = 1;
  uint64_t v15 = *(void *)(a2 + 64);
  long long __p = operator new(0x19uLL);
  long long v52 = xmmword_20B9250;
  strcpy((char *)__p, "max_system_significance");
  uint64_t v53 = v15;
  int v54 = 1;
  sub_B78BD8((void *)a1, &__str, &v55);
  sub_55198((uint64_t)&v53);
  if (SHIBYTE(v52) < 0)
  {
    operator delete(__p);
    sub_55198((uint64_t)&v49);
    if ((SHIBYTE(v48) & 0x80000000) == 0)
    {
LABEL_6:
      sub_55198((uint64_t)&v44);
      if ((SHIBYTE(v43) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else
  {
    sub_55198((uint64_t)&v49);
    if ((SHIBYTE(v48) & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  operator delete(v46);
  sub_55198((uint64_t)&v44);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
LABEL_7:
    sub_55198((uint64_t)&v40);
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v42);
  sub_55198((uint64_t)&v40);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
LABEL_8:
    sub_55198((uint64_t)&v36);
    if ((SHIBYTE(v35) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v38);
  sub_55198((uint64_t)&v36);
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
LABEL_9:
    sub_55198((uint64_t)&v32);
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(v34);
  sub_55198((uint64_t)&v32);
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
LABEL_10:
    sub_55198((uint64_t)&v28);
    if ((SHIBYTE(v27) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v30);
  sub_55198((uint64_t)&v28);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
LABEL_11:
    sub_55198((uint64_t)&v24);
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v26);
  sub_55198((uint64_t)&v24);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
LABEL_12:
    sub_55198((uint64_t)&v20);
    if ((SHIBYTE(v19) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v22);
  sub_55198((uint64_t)&v20);
  if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
LABEL_13:
    sub_55198((uint64_t)v17);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_24:
    operator delete(__str.__r_.__value_.__l.__data_);
    return;
  }
LABEL_23:
  operator delete(v18);
  sub_55198((uint64_t)v17);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_24;
  }
}

void sub_B77A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_5AF78(v9);
  sub_5AF78(v11);
  sub_5AF78(v10);
  sub_5AF78(a5);
  sub_5AF78(a6);
  sub_5AF78(a7);
  sub_5AF78(a3);
  sub_5AF78(a4);
  sub_5AF78(v8);
  sub_5AF78((uint64_t)va);
  sub_5450C(v7);
  _Unwind_Resume(a1);
}

void sub_B77B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::string v18 = v16;
  do
  {
    v18 -= 40;
    sub_5AF78((uint64_t)v18);
  }
  while (v18 != &a15);
  sub_5450C(v15);
  _Unwind_Resume(a1);
}

void sub_B77B84(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4)
    {
LABEL_9:
      v6[v5] = 0;
      operator new();
    }
  }
  memmove(v6, __s, v5);
  goto LABEL_9;
}

void sub_B77CC0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_B77CDC(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4)
    {
LABEL_9:
      v6[v5] = 0;
      operator new();
    }
  }
  memmove(v6, __s, v5);
  goto LABEL_9;
}

void sub_B77DCC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_B77DE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v5 = 0;
  long long v4 = 0uLL;
  sub_56CAC((uint64_t)&v4, (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 4);
  sub_B78518(*(void *)(a1 + 80), *(void *)(a1 + 88), (uint64_t)&v4, *((uint64_t *)&v4 + 1), (void (*)(void **__return_ptr, uint64_t))sub_B78440);
  *(_OWORD *)int v6 = v4;
  uint64_t v7 = v5;
  uint64_t v5 = 0;
  long long v4 = 0uLL;
  sub_B77544((uint64_t)&v3, a1);
  sub_B77B84(&__str, "criteria");
}

void sub_B78150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_5450C((uint64_t)&a15);
  do
  {
    v28 -= 40;
    sub_5AF78((uint64_t)v28);
  }
  while (v28 != &a27);
  sub_55758(&a24);
  sub_5450C(v27);
  _Unwind_Resume(a1);
}

void sub_B78228(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

uint64_t sub_B78250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void **__return_ptr, uint64_t))
{
  if (a1 != a2)
  {
    a5(&__p, a1);
    operator new();
  }
  return a3;
}

void sub_B783F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_B78440(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v3 = *(void *)(a1 + 8);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__p, "score");
  uint64_t v5 = v3;
  int v6 = 1;
  sub_B78BD8((void *)a2, &__p, &v7);
  sub_55198((uint64_t)&v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_B784FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_5AF78((uint64_t)&a9);
  sub_5450C(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_B78518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void **__return_ptr, uint64_t))
{
  if (a1 != a2)
  {
    a5(&__p, a1);
    operator new();
  }
  return a3;
}

void sub_B786BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_B78708(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4)
    {
LABEL_9:
      v6[v5] = 0;
      operator new();
    }
  }
  memmove(v6, __s, v5);
  goto LABEL_9;
}

void sub_B78800()
{
}

void sub_B7883C(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4)
    {
LABEL_9:
      v6[v5] = 0;
      operator new();
    }
  }
  memmove(v6, __s, v5);
  goto LABEL_9;
}

void sub_B78934()
{
}

void sub_B78970(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4)
    {
LABEL_9:
      v6[v5] = 0;
      operator new();
    }
  }
  memmove(v6, __s, v5);
  goto LABEL_9;
}

void sub_B78A68()
{
}

void sub_B78AA4(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4)
    {
LABEL_9:
      v6[v5] = 0;
      operator new();
    }
  }
  memmove(v6, __s, v5);
  goto LABEL_9;
}

void sub_B78B9C()
{
}

void sub_B78BD8(void *a1, std::string *__str, std::string *a3)
{
  size_t v4 = __str;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = __str == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = (void **)v8;
      uint64_t v11 = __str;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 16), v4);
        char v12 = v4 + 1;
        sub_7EC74(v8 + 40, (uint64_t)&v4[1]);
        uint64_t v10 = *(void ***)v8;
        sub_B78D24(a1, v8);
        uint64_t v11 = (std::string *)&v4[1].__r_.__value_.__r.__words[2];
        if (!v10) {
          break;
        }
        size_t v4 = (const std::string *)((char *)v4 + 40);
        uint64_t v8 = (uint64_t)v10;
      }
      while (&v12->__r_.__value_.__r.__words[2] != (std::string::size_type *)a3);
    }
    if (v10)
    {
      do
      {
        uint64_t v13 = (void **)*v10;
        sub_55198((uint64_t)(v10 + 5));
        if (*((char *)v10 + 39) < 0) {
          operator delete(v10[2]);
        }
        operator delete(v10);
        uint64_t v10 = v13;
      }
      while (v13);
    }
    size_t v4 = v11;
  }
  while (v4 != a3)
  {
    sub_5456C((uint64_t)a1, (uint64_t)v4, (uint64_t)v4);
    size_t v4 = (const std::string *)((char *)v4 + 40);
  }
}

void sub_B78CF4(void *a1)
{
  __cxa_begin_catch(a1);
  sub_55154(v1, v2);
  __cxa_rethrow();
}

void sub_B78D10(_Unwind_Exception *a1)
{
}

uint64_t *sub_B78D24(void *a1, uint64_t a2)
{
  size_t v4 = (unsigned __int8 **)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    uint64_t v7 = (uint64_t *)(a2 + 16);
  }
  else {
    uint64_t v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = sub_B128((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  BOOL result = sub_31A634((uint64_t)a1, v9, v4);
  if (!result)
  {
    int8x8_t v11 = (int8x8_t)a1[1];
    unint64_t v12 = *(void *)(a2 + 8);
    uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v11) {
        v12 %= *(void *)&v11;
      }
    }
    else
    {
      v12 &= *(void *)&v11 - 1;
    }
    uint64_t v14 = *(void **)(*a1 + 8 * v12);
    if (v14)
    {
      *(void *)a2 = *v14;
    }
    else
    {
      *(void *)a2 = a1[2];
      a1[2] = a2;
      *(void *)(*a1 + 8 * v12) = a1 + 2;
      if (!*(void *)a2)
      {
LABEL_21:
        ++a1[3];
        return (uint64_t *)a2;
      }
      unint64_t v15 = *(void *)(*(void *)a2 + 8);
      if (v13.u32[0] > 1uLL)
      {
        if (v15 >= *(void *)&v11) {
          v15 %= *(void *)&v11;
        }
      }
      else
      {
        v15 &= *(void *)&v11 - 1;
      }
      uint64_t v14 = (void *)(*a1 + 8 * v15);
    }
    *uint64_t v14 = a2;
    goto LABEL_21;
  }
  return result;
}

uint64_t sub_B78E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void **__return_ptr, uint64_t))
{
  if (a1 != a2)
  {
    a5(&__p, a1);
    operator new();
  }
  return a3;
}

void sub_B79014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B79060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void **__return_ptr, uint64_t))
{
  if (a1 != a2)
  {
    a5(&__p, a1);
    operator new();
  }
  return a3;
}

void sub_B79204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B79250(uint64_t a1, void *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 36) = 0;
  std::string __p = operator new(0x30uLL);
  long long v20 = xmmword_20B93C0;
  strcpy((char *)__p, "enable_domination_across_block_transfers");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 48) = v4;
  std::string __p = operator new(0x30uLL);
  long long v20 = xmmword_20B93C0;
  strcpy((char *)__p, "enable_domination_by_all_preceding_stops");
  BOOL v5 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 49) = v5;
  std::string __p = operator new(0x30uLL);
  long long v20 = xmmword_20B93C0;
  strcpy((char *)__p, "enable_domination_by_all_following_stops");
  BOOL v6 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 50) = v6;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25DFBB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25DFBB8))
  {
    int v18 = 0;
    sub_523F74(&__p, "walking", &v18);
    int v17 = 1;
    sub_523F74(&v21, "walking_travel", &v17);
    int v16 = 2;
    sub_523F74(&v23, "walking_and_walking_travel", &v16);
    sub_B79A70((uint64_t)qword_25DFBC0, (uint64_t)&__p, 3);
    if (v24 < 0)
    {
      operator delete(v23);
      if ((v22 & 0x80000000) == 0)
      {
LABEL_40:
        if ((SHIBYTE(v20) & 0x80000000) == 0)
        {
LABEL_41:
          __cxa_guard_release(&qword_25DFBB8);
          goto LABEL_8;
        }
LABEL_48:
        operator delete(__p);
        goto LABEL_41;
      }
    }
    else if ((v22 & 0x80000000) == 0)
    {
      goto LABEL_40;
    }
    operator delete(v21);
    if ((SHIBYTE(v20) & 0x80000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_48;
  }
LABEL_8:
  std::string __p = operator new(0x38uLL);
  long long v20 = xmmword_20B99E0;
  strcpy((char *)__p, "schedule_category_types_for_schedule_group_domination");
  *(_DWORD *)a1 = sub_B79AF4(a2, (uint64_t)&__p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x38uLL);
  long long v20 = xmmword_20B9A20;
  strcpy((char *)__p, "schedule_group_types_for_schedule_group_domination");
  *(_DWORD *)(a1 + 4) = sub_B79C48(a2, (uint64_t)&__p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x38uLL);
  long long v20 = xmmword_20B9AC0;
  strcpy((char *)__p, "schedule_category_types_for_schedule_cell_domination");
  *(_DWORD *)(a1 + 12) = sub_B79AF4(a2, (uint64_t)&__p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x38uLL);
  long long v20 = xmmword_20B9A10;
  strcpy((char *)__p, "schedule_group_types_for_schedule_cell_domination");
  *(_DWORD *)(a1 + 16) = sub_B79C48(a2, (uint64_t)&__p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x30uLL);
  long long v20 = xmmword_20B9380;
  strcpy((char *)__p, "schedule_category_types_for_schedule_domination");
  *(_DWORD *)(a1 + 24) = sub_B79AF4(a2, (uint64_t)&__p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x30uLL);
  long long v20 = xmmword_20E1380;
  strcpy((char *)__p, "schedule_group_types_for_schedule_domination");
  *(_DWORD *)(a1 + 28) = sub_B79C48(a2, (uint64_t)&__p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x38uLL);
  long long v20 = xmmword_20B8DF0;
  strcpy((char *)__p, "schedule_category_types_for_schedule_cell_significance");
  *(_DWORD *)(a1 + 36) = sub_B79AF4(a2, (uint64_t)&__p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x38uLL);
  long long v20 = xmmword_20B99F0;
  strcpy((char *)__p, "schedule_group_types_for_schedule_cell_significance");
  *(_DWORD *)(a1 + 40) = sub_B79C48(a2, (uint64_t)&__p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x28uLL);
  long long v20 = xmmword_20B9390;
  strcpy((char *)__p, "schedule_group_domination_method");
  uint64_t v7 = sub_561B0(a2, (uint64_t)&__p);
  unint64_t v8 = sub_B7C264(qword_25DFBC0, v7);
  if (!v8) {
    sub_5AE8("unordered_map::at: key not found");
  }
  *(_DWORD *)(a1 + 8) = *((_DWORD *)v8 + 10);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x20uLL);
  long long v20 = xmmword_20B8E90;
  strcpy((char *)__p, "schedule_cell_domination_method");
  uint64_t v9 = sub_561B0(a2, (uint64_t)&__p);
  uint64_t v10 = sub_B7C264(qword_25DFBC0, v9);
  if (!v10) {
    sub_5AE8("unordered_map::at: key not found");
  }
  *(_DWORD *)(a1 + 20) = *((_DWORD *)v10 + 10);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x20uLL);
  long long v20 = xmmword_20B5EB0;
  strcpy((char *)__p, "schedule_domination_method");
  uint64_t v11 = sub_561B0(a2, (uint64_t)&__p);
  unint64_t v12 = sub_B7C264(qword_25DFBC0, v11);
  if (!v12) {
    sub_5AE8("unordered_map::at: key not found");
  }
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v12 + 10);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x28uLL);
  long long v20 = xmmword_20B9260;
  strcpy((char *)__p, "schedule_cell_significance_method");
  uint64_t v13 = sub_561B0(a2, (uint64_t)&__p);
  uint64_t v14 = sub_B7C264(qword_25DFBC0, v13);
  if (!v14) {
    sub_5AE8("unordered_map::at: key not found");
  }
  *(_DWORD *)(a1 + 44) = *((_DWORD *)v14 + 10);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_B7996C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a19 & 0x80000000) == 0)
      {
LABEL_8:
        __cxa_guard_abort(&qword_25DFBB8);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a14);
      __cxa_guard_abort(&qword_25DFBB8);
      _Unwind_Resume(a1);
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a19 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_B79A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B79A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      sub_B7BDF0(a1, a2, a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_B79AD4(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void ***)(v1 + 16);
  if (v3) {
    sub_20A6300(v3);
  }
  sub_20A62E8((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B79AF4(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_5C4AC(a1, a2);
  uint64_t v3 = *(_DWORD **)v2;
  BOOL v4 = *(_DWORD **)(v2 + 8);
  if (*(_DWORD **)v2 == v4) {
    return 0;
  }
  LODWORD(v5) = 0;
  while (1)
  {
    if (v3[2])
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    BOOL v6 = *(void **)v3;
    uint64_t v7 = *(unsigned __int8 *)(*(void *)v3 + 23);
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(*(void *)v3 + 8);
    }
    if (v7 == 3)
    {
      uint64_t v9 = v8 >= 0 ? *(char **)v3 : (char *)*v6;
      __darwin_ct_rune_t v10 = *v9;
      __darwin_ct_rune_t v11 = __toupper(65);
      if (v11 == __toupper(v10))
      {
        __darwin_ct_rune_t v12 = v9[1];
        __darwin_ct_rune_t v13 = __toupper(78);
        if (v13 == __toupper(v12))
        {
          __darwin_ct_rune_t v14 = v9[2];
          __darwin_ct_rune_t v15 = __toupper(89);
          if (v15 == __toupper(v14)) {
            break;
          }
        }
      }
    }
    uint64_t v5 = (1 << sub_B727C0((uint64_t)v6)) | v5;
    v3 += 4;
    if (v3 == v4) {
      return v5;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_B79C48(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_5C4AC(a1, a2);
  uint64_t v3 = *(_DWORD **)v2;
  BOOL v4 = *(_DWORD **)(v2 + 8);
  if (*(_DWORD **)v2 == v4) {
    return 0;
  }
  LODWORD(v5) = 0;
  while (1)
  {
    if (v3[2])
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    BOOL v6 = *(void **)v3;
    uint64_t v7 = *(unsigned __int8 *)(*(void *)v3 + 23);
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(*(void *)v3 + 8);
    }
    if (v7 == 3)
    {
      uint64_t v9 = v8 >= 0 ? *(char **)v3 : (char *)*v6;
      __darwin_ct_rune_t v10 = *v9;
      __darwin_ct_rune_t v11 = __toupper(65);
      if (v11 == __toupper(v10))
      {
        __darwin_ct_rune_t v12 = v9[1];
        __darwin_ct_rune_t v13 = __toupper(78);
        if (v13 == __toupper(v12))
        {
          __darwin_ct_rune_t v14 = v9[2];
          __darwin_ct_rune_t v15 = __toupper(89);
          if (v15 == __toupper(v14)) {
            break;
          }
        }
      }
    }
    uint64_t v5 = (1 << sub_B72B98((uint64_t)v6)) | v5;
    v3 += 4;
    if (v3 == v4) {
      return v5;
    }
  }
  return 0xFFFFFFFFLL;
}

double sub_B79D9C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = sub_B79250(a1, a4);
  *(void *)(v6 + 56) = a2;
  *(void *)(v6 + 64) = a3;
  double result = 0.0;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_DWORD *)(v6 + 104) = 1065353216;
  return result;
}

uint64_t (***sub_B79DE0(uint64_t *a1, uint64_t *a2))()
{
  uint64_t v5 = a2[3];
  uint64_t v4 = a2[4];
  if (v5 != v4)
  {
    unint64_t v6 = v4 - v5 - 160;
    uint64_t v7 = a2[3];
    if (v6 < 0xA0) {
      goto LABEL_12;
    }
    unint64_t v8 = v6 / 0xA0 + 1;
    uint64_t v7 = v5 + 160 * (v8 & 0x3FFFFFFFFFFFFFELL);
    uint64_t v9 = (unsigned char *)(v5 + 317);
    uint64_t v10 = v8 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      *(v9 - 160) = 0;
      unsigned char *v9 = 0;
      v9 += 320;
      v10 -= 2;
    }
    while (v10);
    if (v8 != (v8 & 0x3FFFFFFFFFFFFFELL))
    {
LABEL_12:
      do
      {
        *(unsigned char *)(v7 + 157) = 0;
        v7 += 160;
      }
      while (v7 != v4);
    }
  }
  sub_B79EB0(a1, a2);
  __darwin_ct_rune_t v11 = sub_B79FEC((uint64_t (***)())a1, (unsigned int *)a2);
  sub_B7AC4C((uint64_t)v11, a2);

  return sub_B7B044((uint64_t (***)())a1, a2);
}

uint64_t *sub_B79EB0(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = result;
  if (result[12])
  {
    double result = (uint64_t *)result[11];
    if (result)
    {
      do
      {
        uint64_t v4 = (uint64_t *)*result;
        operator delete(result);
        double result = v4;
      }
      while (v4);
    }
    v3[11] = 0;
    uint64_t v5 = v3[10];
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(v3[9] + 8 * i) = 0;
    }
    v3[12] = 0;
  }
  uint64_t v7 = *a2;
  uint64_t v17 = a2[1];
  if (*a2 != v17)
  {
    do
    {
      uint64_t v18 = v7;
      uint64_t v9 = *(void *)(v7 + 80);
      uint64_t v8 = *(void *)(v7 + 88);
      uint64_t v19 = v8;
      while (v9 != v8)
      {
        uint64_t v10 = *(unsigned int **)(v9 + 80);
        __darwin_ct_rune_t v11 = *(unsigned int **)(v9 + 88);
        while (v10 != v11)
        {
          uint64_t v12 = a2[3] + 160 * *v10;
          __darwin_ct_rune_t v14 = *(unsigned int **)(v12 + 72);
          for (uint64_t j = *(unsigned int **)(v12 + 80); v14 != j; result = sub_B7CB28(v16[12], v16[13], v3))
          {
            unsigned int v15 = *v14;
            v14 += 4;
            int v16 = (uint64_t **)(a2[6] + 248 * v15);
            sub_B7CB28(v16[9], v16[10], v3);
          }
          v10 += 4;
        }
        v9 += 112;
        uint64_t v8 = v19;
      }
      uint64_t v7 = v18 + 112;
    }
    while (v18 + 112 != v17);
  }
  return result;
}

uint64_t (***sub_B79FEC(uint64_t (***result)(), unsigned int *a2))()
{
  uint64_t v2 = *(void *)a2;
  uint64_t v113 = a2;
  uint64_t v102 = *((void *)a2 + 1);
  if (*(void *)a2 != v102)
  {
    uint64_t v3 = result;
    while (1)
    {
      uint64_t v104 = v2;
      if ((*v3 >> *(unsigned char *)(v2 + 104))) {
        break;
      }
LABEL_59:
      uint64_t v42 = *(void *)(v2 + 80);
      uint64_t v41 = *(void *)(v2 + 88);
      uint64_t v106 = v41;
      while (v42 != v41)
      {
        int v43 = 1 << *(unsigned char *)(v2 + 104);
        if ((v43 & v3[3]) == 0 || ((v3[4] >> *(unsigned char *)(v42 + 104)) & 1) == 0) {
          goto LABEL_108;
        }
        int v44 = v3[5];
        switch(v44)
        {
          case 2:
            unint64_t v114 = off_243DCB8;
            char v115 = v3;
            uint64_t v46 = &v116;
            goto LABEL_72;
          case 1:
            int v45 = off_243DC38;
            goto LABEL_71;
          case 0:
            int v45 = off_243DBA8;
LABEL_71:
            unint64_t v114 = v45;
            uint64_t v46 = (uint64_t *)&v115;
LABEL_72:
            *uint64_t v46 = (uint64_t)v3;
            char v117 = &v114;
            uint64_t v47 = *(unsigned int **)(v42 + 80);
            unint64_t v48 = *(unsigned int **)(v42 + 88);
            uint64_t v108 = v42;
            if (v47 != v48) {
              goto LABEL_75;
            }
            goto LABEL_100;
        }
        char v117 = 0;
        uint64_t v47 = *(unsigned int **)(v42 + 80);
        unint64_t v48 = *(unsigned int **)(v42 + 88);
        uint64_t v108 = v42;
        if (v47 != v48)
        {
          do
          {
LABEL_75:
            uint64_t v49 = *((void *)v113 + 3) + 160 * *v47;
            int v50 = *(unsigned int **)(v49 + 72);
            uint64_t v51 = *(unsigned int **)(v49 + 80);
            if (v50 == v51)
            {
LABEL_83:
              uint64_t i = v48;
              if (v47 != v48)
              {
                double v61 = v47 + 4;
                for (uint64_t i = v47; v61 != v48; v61 += 4)
                {
                  while (1)
                  {
                    uint64_t v63 = *((void *)v113 + 3) + 160 * *v61;
                    int v64 = *(unsigned int **)(v63 + 72);
                    uint64_t v65 = *(unsigned int **)(v63 + 80);
                    if (v64 == v65) {
                      break;
                    }
                    double v66 = i;
                    while (1)
                    {
                      unsigned int v67 = *v64;
                      uint64_t v68 = *((void *)v113 + 6);
                      uint64_t v69 = v68 + 248 * *v64;
                      uint64_t v70 = *(void *)(v69 + 72);
                      uint64_t v71 = *(void *)(v69 + 80);
                      if (v70 != v71) {
                        break;
                      }
LABEL_92:
                      uint64_t v72 = v68 + 248 * v67;
                      uint64_t v74 = *(void *)(v72 + 96);
                      uint64_t v73 = *(void *)(v72 + 104);
                      if (v74 != v73)
                      {
                        while ((sub_B7B3EC((uint64_t)v3, v74, (uint64_t)&v114) & 1) != 0)
                        {
                          v74 += 60;
                          if (v74 == v73) {
                            goto LABEL_95;
                          }
                        }
                        goto LABEL_86;
                      }
LABEL_95:
                      v64 += 4;
                      if (v64 == v65)
                      {
                        uint64_t i = v66;
                        goto LABEL_97;
                      }
                    }
                    while ((sub_B7B3EC((uint64_t)v3, v70, (uint64_t)&v114) & 1) != 0)
                    {
                      v70 += 60;
                      if (v70 == v71) {
                        goto LABEL_92;
                      }
                    }
LABEL_86:
                    long long v62 = *(_OWORD *)v61;
                    v61 += 4;
                    *(_OWORD *)double v66 = v62;
                    uint64_t i = v66 + 4;
                    if (v61 == v48) {
                      goto LABEL_101;
                    }
                  }
LABEL_97:
                  ;
                }
              }
              goto LABEL_101;
            }
            while (1)
            {
              unsigned int v52 = *v50;
              uint64_t v53 = *((void *)v113 + 6);
              uint64_t v54 = v53 + 248 * *v50;
              uint64_t v55 = *(void *)(v54 + 72);
              uint64_t v56 = *(void *)(v54 + 80);
              if (v55 != v56) {
                break;
              }
LABEL_79:
              uint64_t v57 = v53 + 248 * v52;
              uint64_t v59 = *(void *)(v57 + 96);
              uint64_t v58 = *(void *)(v57 + 104);
              if (v59 != v58)
              {
                while ((sub_B7B3EC((uint64_t)v3, v59, (uint64_t)&v114) & 1) != 0)
                {
                  v59 += 60;
                  if (v59 == v58) {
                    goto LABEL_82;
                  }
                }
                goto LABEL_74;
              }
LABEL_82:
              v50 += 4;
              if (v50 == v51) {
                goto LABEL_83;
              }
            }
            while ((sub_B7B3EC((uint64_t)v3, v55, (uint64_t)&v114) & 1) != 0)
            {
              v55 += 60;
              if (v55 == v56) {
                goto LABEL_79;
              }
            }
LABEL_74:
            v47 += 4;
          }
          while (v47 != v48);
          uint64_t i = v48;
          uint64_t v42 = v108;
          int v75 = *(unsigned int **)(v108 + 88);
          uint64_t v2 = v104;
          if (v48 != v75) {
            goto LABEL_102;
          }
          goto LABEL_103;
        }
LABEL_100:
        uint64_t i = v47;
LABEL_101:
        uint64_t v42 = v108;
        int v75 = *(unsigned int **)(v108 + 88);
        uint64_t v2 = v104;
        if (i != v75)
        {
LABEL_102:
          a2 = v75;
          *(void *)(v42 + 88) = i;
        }
LABEL_103:
        double result = v117;
        if (v117 == &v114)
        {
          double result = (uint64_t (***)())((uint64_t (*)(uint64_t (***)(), unsigned int *))v114[4])(&v114, a2);
        }
        else if (v117)
        {
          double result = (uint64_t (***)())(*v117)[5]();
        }
        int v43 = 1 << *(unsigned char *)(v2 + 104);
LABEL_108:
        if ((v43 & v3[6]) == 0 || ((v3[7] >> *(unsigned char *)(v42 + 104)) & 1) == 0) {
          goto LABEL_61;
        }
        int v76 = v3[8];
        if (v76 == 2)
        {
          unint64_t v114 = off_243DCB8;
          char v115 = v3;
          uint64_t v78 = &v116;
        }
        else
        {
          if (v76 == 1)
          {
            unint64_t v77 = off_243DC38;
          }
          else
          {
            if (v76)
            {
              double result = 0;
              char v117 = 0;
              unint64_t v79 = *(unsigned int **)(v42 + 80);
              uint64_t v112 = *(unsigned int **)(v42 + 88);
              if (v79 == v112)
              {
LABEL_118:
                if (result == &v114) {
                  goto LABEL_60;
                }
LABEL_148:
                if (result) {
                  double result = (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*result)[5])(result);
                }
                goto LABEL_61;
              }
              goto LABEL_121;
            }
            unint64_t v77 = off_243DBA8;
          }
          unint64_t v114 = v77;
          uint64_t v78 = (uint64_t *)&v115;
        }
        uint64_t *v78 = (uint64_t)v3;
        double result = &v114;
        char v117 = &v114;
        unint64_t v79 = *(unsigned int **)(v42 + 80);
        uint64_t v112 = *(unsigned int **)(v42 + 88);
        if (v79 == v112) {
          goto LABEL_118;
        }
LABEL_121:
        uint64_t v109 = v42;
        do
        {
          uint64_t v80 = *((void *)v113 + 3) + 160 * *v79;
          double v81 = *(unsigned int **)(v80 + 72);
          char v83 = *(unsigned int **)(v80 + 80);
          uint64_t v82 = v80 + 72;
          if (v81 == v83)
          {
            int v84 = v81;
          }
          else
          {
            int v84 = v83;
            while (1)
            {
              unsigned int v85 = *v81;
              uint64_t v86 = *((void *)v113 + 6);
              uint64_t v87 = v86 + 248 * *v81;
              uint64_t v89 = *(void *)(v87 + 72);
              uint64_t v88 = *(void *)(v87 + 80);
              if (v89 != v88)
              {
                while ((sub_B7B3EC((uint64_t)v3, v89, (uint64_t)&v114) & 1) != 0)
                {
                  v89 += 60;
                  if (v89 == v88) {
                    goto LABEL_129;
                  }
                }
                goto LABEL_125;
              }
LABEL_129:
              uint64_t v90 = v86 + 248 * v85;
              uint64_t v92 = *(void *)(v90 + 96);
              uint64_t v91 = *(void *)(v90 + 104);
              if (v92 == v91) {
                break;
              }
              while ((sub_B7B3EC((uint64_t)v3, v92, (uint64_t)&v114) & 1) != 0)
              {
                v92 += 60;
                if (v92 == v91) {
                  goto LABEL_132;
                }
              }
LABEL_125:
              v81 += 4;
              if (v81 == v83) {
                goto LABEL_145;
              }
            }
LABEL_132:
            if (v81 != v83)
            {
              uint64_t v93 = v81 + 4;
              int v84 = v81;
              while (1)
              {
                if (v93 == v83) {
                  goto LABEL_145;
                }
                unsigned int v94 = *v93;
                uint64_t v95 = *((void *)v113 + 6);
                uint64_t v96 = v95 + 248 * *v93;
                uint64_t v98 = *(void *)(v96 + 72);
                uint64_t v97 = *(void *)(v96 + 80);
                if (v98 != v97) {
                  break;
                }
LABEL_140:
                uint64_t v99 = v95 + 248 * v94;
                uint64_t v101 = *(void *)(v99 + 96);
                uint64_t v100 = *(void *)(v99 + 104);
                if (v101 != v100)
                {
                  while ((sub_B7B3EC((uint64_t)v3, v101, (uint64_t)&v114) & 1) != 0)
                  {
                    v101 += 60;
                    if (v101 == v100) {
                      goto LABEL_135;
                    }
                  }
LABEL_134:
                  *(_OWORD *)int v84 = *(_OWORD *)v93;
                  v84 += 4;
                }
LABEL_135:
                v93 += 4;
              }
              while ((sub_B7B3EC((uint64_t)v3, v98, (uint64_t)&v114) & 1) != 0)
              {
                v98 += 60;
                if (v98 == v97) {
                  goto LABEL_140;
                }
              }
              goto LABEL_134;
            }
          }
LABEL_145:
          if (v84 != *(unsigned int **)(v82 + 8))
          {
            a2 = *(unsigned int **)(v82 + 8);
            *(void *)(v82 + 8) = v84;
          }
          v79 += 4;
        }
        while (v79 != v112);
        double result = v117;
        uint64_t v2 = v104;
        uint64_t v42 = v109;
        if (v117 != &v114) {
          goto LABEL_148;
        }
LABEL_60:
        double result = (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))v114[4])(&v114);
LABEL_61:
        v42 += 112;
        uint64_t v41 = v106;
      }
      v2 += 112;
      if (v2 == v102) {
        return result;
      }
    }
    int v4 = v3[2];
    if (v4 == 2)
    {
      unint64_t v114 = off_243DCB8;
      char v115 = v3;
      unint64_t v6 = &v116;
    }
    else
    {
      if (v4 == 1)
      {
        uint64_t v5 = off_243DC38;
      }
      else
      {
        if (v4)
        {
          char v117 = 0;
          uint64_t v8 = *(void *)(v2 + 80);
          uint64_t v7 = *(void *)(v2 + 88);
          if (v8 != v7) {
            goto LABEL_13;
          }
          goto LABEL_47;
        }
        uint64_t v5 = off_243DBA8;
      }
      unint64_t v114 = v5;
      unint64_t v6 = (uint64_t *)&v115;
    }
    uint64_t *v6 = (uint64_t)v3;
    char v117 = &v114;
    uint64_t v8 = *(void *)(v2 + 80);
    uint64_t v7 = *(void *)(v2 + 88);
    if (v8 != v7)
    {
LABEL_13:
      uint64_t v9 = v7;
      uint64_t v107 = v7;
      while (((v3[1] >> *(unsigned char *)(v8 + 104)) & 1) == 0)
      {
LABEL_14:
        v8 += 112;
        if (v8 == v107) {
          goto LABEL_48;
        }
      }
      uint64_t v10 = *(unsigned int **)(v8 + 80);
      if (v10 != *(unsigned int **)(v8 + 88))
      {
        __darwin_ct_rune_t v11 = *(unsigned int **)(v8 + 88);
        while (1)
        {
          uint64_t v12 = *((void *)v113 + 3) + 160 * *v10;
          __darwin_ct_rune_t v13 = *(unsigned int **)(v12 + 72);
          char v110 = *(unsigned int **)(v12 + 80);
          if (v13 != v110) {
            break;
          }
LABEL_26:
          v10 += 4;
          if (v10 == v11) {
            goto LABEL_27;
          }
        }
        while (1)
        {
          unsigned int v14 = *v13;
          uint64_t v15 = *((void *)v113 + 6);
          uint64_t v16 = v15 + 248 * *v13;
          uint64_t v17 = *(void *)(v16 + 72);
          uint64_t v18 = *(void *)(v16 + 80);
          if (v17 != v18) {
            break;
          }
LABEL_22:
          uint64_t v19 = v15 + 248 * v14;
          uint64_t v20 = *(void *)(v19 + 96);
          uint64_t v21 = *(void *)(v19 + 104);
          if (v20 != v21)
          {
            while ((sub_B7B3EC((uint64_t)v3, v20, (uint64_t)&v114) & 1) != 0)
            {
              v20 += 60;
              if (v20 == v21) {
                goto LABEL_25;
              }
            }
            goto LABEL_14;
          }
LABEL_25:
          v13 += 4;
          if (v13 == v110) {
            goto LABEL_26;
          }
        }
        while ((sub_B7B3EC((uint64_t)v3, v17, (uint64_t)&v114) & 1) != 0)
        {
          v17 += 60;
          if (v17 == v18) {
            goto LABEL_22;
          }
        }
        goto LABEL_14;
      }
LABEL_27:
      if (v8 != v107)
      {
        uint64_t v22 = v8 + 112;
        if (v8 + 112 != v107)
        {
          uint64_t v9 = v8;
          while (1)
          {
            uint64_t v23 = v8;
            uint64_t v8 = v22;
            if (((v3[1] >> *(unsigned char *)(v23 + 216)) & 1) == 0) {
              goto LABEL_44;
            }
            char v24 = *(unsigned int **)(v23 + 192);
            char v103 = *(unsigned int **)(v23 + 200);
            if (v24 != v103) {
              break;
            }
LABEL_31:
            uint64_t v22 = v8 + 112;
            if (v8 + 112 == v107) {
              goto LABEL_48;
            }
          }
          while (1)
          {
            uint64_t v105 = v24;
            uint64_t v25 = *((void *)v113 + 3) + 160 * *v24;
            unint64_t v26 = *(unsigned int **)(v25 + 72);
            uint64_t v111 = *(unsigned int **)(v25 + 80);
            if (v26 != v111) {
              break;
            }
LABEL_42:
            char v24 = v105 + 4;
            if (v105 + 4 == v103) {
              goto LABEL_31;
            }
          }
          while (1)
          {
            unsigned int v27 = *v26;
            uint64_t v28 = *((void *)v113 + 6);
            uint64_t v29 = v28 + 248 * *v26;
            uint64_t v30 = *(void *)(v29 + 72);
            uint64_t v31 = *(void *)(v29 + 80);
            if (v30 != v31) {
              break;
            }
LABEL_38:
            uint64_t v32 = v28 + 248 * v27;
            uint64_t v33 = *(void *)(v32 + 96);
            uint64_t v34 = *(void *)(v32 + 104);
            if (v33 != v34)
            {
              while ((sub_B7B3EC((uint64_t)v3, v33, (uint64_t)&v114) & 1) != 0)
              {
                v33 += 60;
                if (v33 == v34) {
                  goto LABEL_41;
                }
              }
              goto LABEL_44;
            }
LABEL_41:
            v26 += 4;
            if (v26 == v111) {
              goto LABEL_42;
            }
          }
          while ((sub_B7B3EC((uint64_t)v3, v30, (uint64_t)&v114) & 1) != 0)
          {
            v30 += 60;
            if (v30 == v31) {
              goto LABEL_38;
            }
          }
LABEL_44:
          *(_OWORD *)uint64_t v9 = *(_OWORD *)v8;
          long long v35 = *(_OWORD *)(v8 + 16);
          long long v36 = *(_OWORD *)(v8 + 32);
          long long v37 = *(_OWORD *)(v8 + 64);
          *(_OWORD *)(v9 + 48) = *(_OWORD *)(v8 + 48);
          *(_OWORD *)(v9 + 64) = v37;
          *(_OWORD *)(v9 + 16) = v35;
          *(_OWORD *)(v9 + 32) = v36;
          double v38 = *(void **)(v9 + 80);
          if (v38)
          {
            *(void *)(v9 + 88) = v38;
            operator delete(v38);
            *(void *)(v9 + 80) = 0;
            *(void *)(v9 + 88) = 0;
            *(void *)(v9 + 96) = 0;
          }
          *(_OWORD *)(v9 + 80) = *(_OWORD *)(v23 + 192);
          *(void *)(v9 + 96) = *(void *)(v23 + 208);
          *(void *)(v23 + 192) = 0;
          *(void *)(v23 + 200) = 0;
          *(void *)(v23 + 208) = 0;
          *(unsigned char *)(v9 + 104) = *(unsigned char *)(v23 + 216);
          v9 += 112;
          goto LABEL_31;
        }
        uint64_t v9 = v8;
        uint64_t v2 = v104;
        uint64_t v39 = *(void *)(v104 + 88);
        if (v8 == v39) {
          goto LABEL_55;
        }
LABEL_51:
        while (v39 != v9)
        {
          uint64_t v40 = *(void **)(v39 - 32);
          if (v40)
          {
            *(void *)(v39 - 24) = v40;
            operator delete(v40);
          }
          v39 -= 112;
        }
        *(void *)(v2 + 88) = v9;
LABEL_55:
        double result = v117;
        if (v117 == &v114)
        {
          double result = (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))v114[4])(&v114);
        }
        else if (v117)
        {
          double result = (uint64_t (***)())(*v117)[5]();
        }
        goto LABEL_59;
      }
LABEL_48:
      uint64_t v2 = v104;
      uint64_t v39 = *(void *)(v104 + 88);
      if (v9 == v39) {
        goto LABEL_55;
      }
      goto LABEL_51;
    }
LABEL_47:
    uint64_t v9 = v8;
    goto LABEL_48;
  }
  return result;
}

void sub_B7AB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B7B35C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B7AB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B7B35C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B7AB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B7B35C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B7AB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B7B35C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B7ABAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B7B35C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B7ABC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B7B35C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B7ABD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B7B35C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B7ABE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B7B35C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B7ABFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B7B35C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B7AC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B7B35C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B7AC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B7B35C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B7AC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B7B35C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B7AC4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4) {
    goto LABEL_47;
  }
  while (2)
  {
    uint64_t v5 = *(void *)(v3 + 80);
    uint64_t v6 = *(void *)(v3 + 88);
    if (v5 == v6) {
      goto LABEL_4;
    }
    do
    {
      uint64_t v8 = *(unsigned int **)(v5 + 80);
      uint64_t v7 = *(unsigned int **)(v5 + 88);
      if (v8 != v7)
      {
        while (1)
        {
          uint64_t v9 = a2[3] + 160 * *v8;
          if (*(void *)(v9 + 72) == *(void *)(v9 + 80)) {
            break;
          }
          v8 += 4;
          if (v8 == v7) {
            goto LABEL_7;
          }
        }
        if (v8 != v7)
        {
          uint64_t v10 = v8 + 4;
          if (v8 + 4 == v7)
          {
            if (v8 != v7) {
              goto LABEL_20;
            }
          }
          else
          {
            do
            {
              uint64_t v11 = a2[3] + 160 * *v10;
              if (*(void *)(v11 + 72) != *(void *)(v11 + 80))
              {
                *(_OWORD *)uint64_t v8 = *(_OWORD *)v10;
                v8 += 4;
              }
              v10 += 4;
            }
            while (v10 != v7);
            if (v8 != *(unsigned int **)(v5 + 88)) {
LABEL_20:
            }
              *(void *)(v5 + 88) = v8;
          }
        }
      }
LABEL_7:
      v5 += 112;
    }
    while (v5 != v6);
    uint64_t v12 = *(void *)(v3 + 80);
    uint64_t v13 = *(void *)(v3 + 88);
    if (v12 != v13)
    {
      uint64_t v14 = v12 + 112;
      while (*(void *)(v14 - 32) != *(void *)(v14 - 24))
      {
        BOOL v15 = v14 == v13;
        v14 += 112;
        if (v15) {
          goto LABEL_4;
        }
      }
      uint64_t v16 = v14 - 112;
      if (v14 - 112 != v13 && v14 != v13)
      {
        do
        {
          if (*(void *)(v14 + 80) != *(void *)(v14 + 88))
          {
            *(_OWORD *)uint64_t v16 = *(_OWORD *)v14;
            long long v17 = *(_OWORD *)(v14 + 16);
            long long v18 = *(_OWORD *)(v14 + 32);
            long long v19 = *(_OWORD *)(v14 + 64);
            *(_OWORD *)(v16 + 48) = *(_OWORD *)(v14 + 48);
            *(_OWORD *)(v16 + 64) = v19;
            *(_OWORD *)(v16 + 16) = v17;
            *(_OWORD *)(v16 + 32) = v18;
            uint64_t v20 = *(void **)(v16 + 80);
            if (v20)
            {
              *(void *)(v16 + 88) = v20;
              operator delete(v20);
              *(void *)(v16 + 80) = 0;
              *(void *)(v16 + 88) = 0;
              *(void *)(v16 + 96) = 0;
            }
            *(_OWORD *)(v16 + 80) = *(_OWORD *)(v14 + 80);
            *(void *)(v16 + 96) = *(void *)(v14 + 96);
            *(void *)(v14 + 80) = 0;
            *(void *)(v14 + 88) = 0;
            *(void *)(v14 + 96) = 0;
            *(unsigned char *)(v16 + 104) = *(unsigned char *)(v14 + 104);
            v16 += 112;
          }
          v14 += 112;
        }
        while (v14 != v13);
        uint64_t v13 = *(void *)(v3 + 88);
      }
      if (v16 != v13)
      {
        while (v13 != v16)
        {
          uint64_t v21 = *(void **)(v13 - 32);
          if (v21)
          {
            *(void *)(v13 - 24) = v21;
            operator delete(v21);
          }
          v13 -= 112;
        }
        *(void *)(v3 + 88) = v16;
      }
    }
LABEL_4:
    v3 += 112;
    if (v3 != v4) {
      continue;
    }
    break;
  }
  uint64_t v3 = a2[1];
  if (*a2 == v3)
  {
LABEL_47:
    uint64_t v23 = v3;
    goto LABEL_48;
  }
  uint64_t v22 = (_OWORD *)(*a2 + 112);
  while (*((void *)v22 - 4) != *((void *)v22 - 3))
  {
    BOOL v15 = v22 == (_OWORD *)v3;
    v22 += 7;
    if (v15) {
      goto LABEL_47;
    }
  }
  uint64_t v25 = v22 - 7;
  if (v22 - 7 == (_OWORD *)v3 || v22 == (_OWORD *)v3)
  {
    uint64_t v23 = (uint64_t)(v22 - 7);
  }
  else
  {
    uint64_t v23 = (uint64_t)(v22 - 7);
    do
    {
      unsigned int v27 = v22;
      if (*((void *)v25 + 24) != *((void *)v25 + 25))
      {
        *(_OWORD *)uint64_t v23 = *v22;
        long long v28 = v22[1];
        long long v29 = v22[2];
        long long v30 = v22[4];
        *(_OWORD *)(v23 + 48) = v22[3];
        *(_OWORD *)(v23 + 64) = v30;
        *(_OWORD *)(v23 + 16) = v28;
        *(_OWORD *)(v23 + 32) = v29;
        uint64_t v31 = (void **)(v23 + 80);
        uint64_t v32 = *(void *)(v23 + 80);
        if (v32)
        {
          uint64_t v33 = *(void *)(v23 + 88);
          unint64_t v26 = *(void **)(v23 + 80);
          if (v33 != v32)
          {
            do
            {
              uint64_t v34 = *(void **)(v33 - 32);
              if (v34)
              {
                *(void *)(v33 - 24) = v34;
                operator delete(v34);
              }
              v33 -= 112;
            }
            while (v33 != v32);
            unint64_t v26 = *v31;
          }
          *(void *)(v23 + 88) = v32;
          operator delete(v26);
          *uint64_t v31 = 0;
          *(void *)(v23 + 88) = 0;
          *(void *)(v23 + 96) = 0;
        }
        *(_OWORD *)(v23 + 80) = v25[12];
        *(void *)(v23 + 96) = *((void *)v25 + 26);
        *((void *)v25 + 24) = 0;
        *((void *)v25 + 25) = 0;
        *((void *)v25 + 26) = 0;
        *(unsigned char *)(v23 + 104) = *((unsigned char *)v25 + 216);
        v23 += 112;
      }
      uint64_t v22 = v27 + 7;
      uint64_t v25 = v27;
    }
    while (v27 + 7 != (_OWORD *)v3);
    uint64_t v3 = a2[1];
  }
LABEL_48:

  return sub_B7C494((uint64_t)a2, v23, v3);
}

uint64_t (***sub_B7B044(uint64_t (***result)(), uint64_t *a2))()
{
  uint64_t v2 = *a2;
  uint64_t v24 = a2[1];
  if (*a2 != v24)
  {
    uint64_t v3 = result;
    while (1)
    {
      uint64_t v4 = *(void *)(v2 + 80);
      uint64_t v5 = *(void *)(v2 + 88);
      uint64_t v25 = v5;
      uint64_t v26 = v2;
      if (v4 != v5) {
        break;
      }
LABEL_3:
      v2 += 112;
      if (v2 == v24) {
        return result;
      }
    }
    while (1)
    {
      if (((*((_DWORD *)v3 + 9) >> *(unsigned char *)(v2 + 104)) & 1) == 0
        || ((*((_DWORD *)v3 + 10) >> *(unsigned char *)(v4 + 104)) & 1) == 0)
      {
        goto LABEL_7;
      }
      int v6 = *((_DWORD *)v3 + 11);
      if (v6 == 2) {
        break;
      }
      if (v6 == 1)
      {
        uint64_t v7 = off_243DC38;
LABEL_16:
        long long v30 = v7;
        uint64_t v8 = &v31;
LABEL_17:
        unsigned int *v8 = v3;
        double result = &v30;
        uint64_t v33 = &v30;
        uint64_t v9 = *(unsigned int **)(v4 + 80);
        long long v28 = *(unsigned int **)(v4 + 88);
        if (v9 == v28) {
          goto LABEL_18;
        }
        goto LABEL_21;
      }
      if (!v6)
      {
        uint64_t v7 = off_243DBA8;
        goto LABEL_16;
      }
      double result = 0;
      uint64_t v33 = 0;
      uint64_t v9 = *(unsigned int **)(v4 + 80);
      long long v28 = *(unsigned int **)(v4 + 88);
      if (v9 == v28)
      {
LABEL_18:
        if (result != &v30) {
          goto LABEL_36;
        }
        goto LABEL_6;
      }
LABEL_21:
      uint64_t v27 = v4;
      do
      {
        unsigned int v11 = *v9;
        uint64_t v12 = a2[3];
        uint64_t v13 = v12 + 160 * *v9;
        BOOL v15 = *(unsigned int **)(v13 + 72);
        uint64_t v14 = *(unsigned int **)(v13 + 80);
        if (v15 == v14)
        {
          char v10 = 0;
        }
        else
        {
          while (1)
          {
            unsigned int v16 = *v15;
            uint64_t v17 = a2[6];
            uint64_t v18 = v17 + 248 * *v15;
            uint64_t v20 = *(void *)(v18 + 72);
            uint64_t v19 = *(void *)(v18 + 80);
            if (v20 != v19) {
              break;
            }
LABEL_28:
            uint64_t v21 = v17 + 248 * v16;
            uint64_t v23 = *(void *)(v21 + 96);
            uint64_t v22 = *(void *)(v21 + 104);
            if (v23 != v22)
            {
              while ((sub_B7B3EC((uint64_t)v3, v23, (uint64_t)&v30) & 1) != 0)
              {
                v23 += 60;
                if (v23 == v22) {
                  goto LABEL_31;
                }
              }
              goto LABEL_33;
            }
LABEL_31:
            v15 += 4;
            if (v15 == v14)
            {
              char v10 = 0;
              goto LABEL_23;
            }
          }
          while ((sub_B7B3EC((uint64_t)v3, v20, (uint64_t)&v30) & 1) != 0)
          {
            v20 += 60;
            if (v20 == v19) {
              goto LABEL_28;
            }
          }
LABEL_33:
          char v10 = 1;
        }
LABEL_23:
        *(unsigned char *)(v12 + 160 * v11 + 157) |= v10;
        v9 += 4;
      }
      while (v9 != v28);
      double result = v33;
      uint64_t v2 = v26;
      uint64_t v4 = v27;
      uint64_t v5 = v25;
      if (v33 != &v30)
      {
LABEL_36:
        if (result) {
          double result = (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*result)[5])(result);
        }
        goto LABEL_7;
      }
LABEL_6:
      double result = (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))v30[4])(&v30);
LABEL_7:
      v4 += 112;
      if (v4 == v5) {
        goto LABEL_3;
      }
    }
    long long v30 = off_243DCB8;
    uint64_t v31 = v3;
    uint64_t v8 = (uint64_t (****)())&v32;
    goto LABEL_17;
  }
  return result;
}

void sub_B7B334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B7B35C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B7B348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B7B35C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_B7B35C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t sub_B7B3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_B7B5C8(a1, *(void *)(a2 + 28), *(_DWORD *)(a2 + 48), &v21);
  sub_B7B79C(a1, *(void *)(a2 + 28), *(_DWORD *)(a2 + 48), &__p);
  int v6 = (int *)__p;
  uint64_t v7 = v20;
  if (__p != v20)
  {
    while (1)
    {
      int v8 = *v6;
      uint64_t v9 = *(void *)(a3 + 24);
      int v24 = *(_DWORD *)(a2 + 48);
      int v23 = v8;
      if (!v9) {
        sub_29F82C();
      }
      if ((*(uint64_t (**)(uint64_t, uint64_t, int *, int *))(*(void *)v9 + 48))(v9, a2, &v24, &v23)) {
        break;
      }
      if (++v6 == v7) {
        goto LABEL_5;
      }
    }
    uint64_t v15 = 1;
LABEL_14:
    uint64_t v17 = (int *)__p;
    if (!__p) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_5:
  char v10 = v22;
  if (v21 != v22)
  {
    unsigned int v11 = (char *)v21 + 4;
    do
    {
      int v12 = *((_DWORD *)v11 - 1);
      uint64_t v13 = *(void *)(a3 + 24);
      int v24 = *(_DWORD *)(a2 + 48);
      int v23 = v12;
      if (!v13) {
        sub_29F82C();
      }
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, int *, int *))(*(void *)v13 + 48))(v13, a2, &v24, &v23);
      uint64_t v15 = v14;
      if (v11 == v10) {
        int v16 = 1;
      }
      else {
        int v16 = v14;
      }
      v11 += 4;
    }
    while (v16 != 1);
    goto LABEL_14;
  }
  uint64_t v15 = 0;
  uint64_t v17 = (int *)__p;
  if (__p)
  {
LABEL_15:
    uint64_t v20 = v17;
    operator delete(v17);
  }
LABEL_16:
  if (v21)
  {
    uint64_t v22 = (char *)v21;
    operator delete(v21);
  }
  return v15;
}

void sub_B7B570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_B7B5C8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  unint64_t v24 = a2;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v7 = sub_A1E760((void *)(a1 + 72), (uint64_t *)&v24);
  if (!v7) {
    sub_5AE8("unordered_map::at: key not found");
  }
  unsigned int v8 = *((_DWORD *)v7 + 6);
  uint64_t v9 = (int *)sub_A11094((void *)(*(void *)(a1 + 56) + 4136), v24);
  char v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0)
  {
    uint64_t result = sub_A10764((unsigned int *)((char *)v9 + v11 + *(unsigned int *)((char *)v9 + v11)), a3);
    if (v8 >= a3) {
      return result;
    }
  }
  else
  {
    uint64_t result = sub_A10764(0, a3);
    if (v8 >= a3) {
      return result;
    }
  }
  int v13 = *(unsigned __int8 *)(result + 14);
  do
  {
    unsigned int v23 = --a3;
    uint64_t v14 = (int *)sub_A11094((void *)(*(void *)(a1 + 56) + 4136), v24);
    uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
    if (*v15 >= 9u && (uint64_t v16 = v15[4]) != 0) {
      uint64_t v17 = (unsigned int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t result = sub_A10764(v17, a3);
    if (!*(unsigned char *)(a1 + 48) && *(unsigned __int8 *)(result + 14) != v13) {
      break;
    }
    unsigned int v18 = v23;
    uint64_t v19 = (int *)sub_A11094((void *)(*(void *)(a1 + 56) + 4136), v24);
    uint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
    if (*v20 >= 9u && (uint64_t v21 = v20[4]) != 0) {
      uint64_t v22 = (unsigned int *)((char *)v19 + v21 + *(unsigned int *)((char *)v19 + v21));
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t result = sub_A10764(v22, v18);
    if ((*(unsigned char *)(result + 15) & 2) != 0)
    {
      uint64_t result = (uint64_t)sub_745A4((uint64_t)a4, &v23);
      if (!*(unsigned char *)(a1 + 49)) {
        break;
      }
    }
  }
  while (a3 > v8);
  return result;
}

void sub_B7B780(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B7B79C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  unint64_t v28 = a2;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  unsigned int v8 = (int *)sub_A11094((void *)(*(void *)(a1 + 56) + 4136), a2);
  uint64_t v9 = 0;
  char v10 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v10 >= 9u)
  {
    uint64_t v11 = v10[4];
    if (v11) {
      uint64_t v9 = (unsigned int *)((char *)v8 + v11 + *(unsigned int *)((char *)v8 + v11));
    }
    else {
      uint64_t v9 = 0;
    }
  }
  int v12 = *(unsigned __int8 *)(sub_A10764(v9, a3) + 14);
  int v13 = sub_B7BC84(a1, a2, v12);
  uint64_t result = (uint64_t)sub_A1E760((void *)(a1 + 72), (uint64_t *)&v28);
  if (!result) {
    sub_5AE8("unordered_map::at: key not found");
  }
  unsigned int v15 = *(_DWORD *)(result + 28);
  unsigned int v16 = a3 + 1;
  unsigned int v27 = v16;
  if (v13 != -1 && v16 <= v15)
  {
    do
    {
      unsigned int v18 = (int *)sub_A11094((void *)(*(void *)(a1 + 56) + 4136), v28);
      uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v19 >= 9u && (uint64_t v20 = v19[4]) != 0) {
        uint64_t v21 = (unsigned int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t result = sub_A10764(v21, v16);
      if (!*(unsigned char *)(a1 + 48) && *(unsigned __int8 *)(result + 14) != v12) {
        break;
      }
      unsigned int v22 = v27;
      if (v27 == v13
        || ((unsigned int v23 = (int *)sub_A11094((void *)(*(void *)(a1 + 56) + 4136), v28),
             unint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23),
             *v24 < 9u)
         || (uint64_t v25 = v24[4]) == 0
          ? (uint64_t v26 = 0)
          : (uint64_t v26 = (unsigned int *)((char *)v23 + v25 + *(unsigned int *)((char *)v23 + v25))),
            uint64_t result = sub_A10764(v26, v22),
            (*(unsigned char *)(result + 15) & 2) != 0))
      {
        uint64_t result = (uint64_t)sub_745A4((uint64_t)a4, &v27);
        if (!*(unsigned char *)(a1 + 50)) {
          break;
        }
      }
      unsigned int v16 = v27 + 1;
      unsigned int v27 = v16;
    }
    while (v16 <= v15);
  }
  return result;
}

void sub_B7B97C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B7B998(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v5 = (int *)sub_A11094((void *)(*(void *)(a1 + 56) + 4136), a2);
  int v6 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v6 >= 9u && (uint64_t v7 = v6[4]) != 0) {
    unsigned int v8 = (unsigned int *)((char *)v5 + v7 + *(unsigned int *)((char *)v5 + v7));
  }
  else {
    unsigned int v8 = 0;
  }
  uint64_t v9 = __ROR8__(*(void *)sub_A10764(v8, a3), 32);
  v16[0] = 0x1FFFFFFFELL;
  v16[1] = v9;
  if (!sub_A0E0A8(*(void **)(a1 + 64), v16)) {
    return 0x7FFFFFFFLL;
  }
  char v10 = sub_A0E0A8(*(void **)(a1 + 64), v16);
  if (!v10) {
    sub_5AE8("unordered_map::at: key not found");
  }
  uint64_t v11 = v10;
  int v12 = *((_DWORD *)v10 + 8);
  uint64_t result = 0x7FFFFFFFLL;
  if (v12 != 0x7FFFFFFF)
  {
    int v14 = *((_DWORD *)v11 + 9);
    if (v14 != 0x7FFFFFFF)
    {
      int v15 = *((_DWORD *)v11 + 10);
      if (v15 != 0x7FFFFFFF) {
        return (v14 + v12 + v15);
      }
    }
  }
  return result;
}

uint64_t sub_B7BA90(uint64_t a1, unint64_t a2, unsigned int a3, int a4, int a5)
{
  char v10 = sub_A10650((void *)(*(void *)(a1 + 56) + 4136), a2);
  uint64_t v11 = (int *)v10;
  int v12 = &v10[-*(int *)v10];
  if (*(unsigned __int16 *)v12 < 5u)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = *((unsigned __int16 *)v12 + 2);
    if (v13) {
      v13 += (uint64_t)&v10[*(unsigned int *)&v10[v13]];
    }
  }
  uint64_t v14 = 4 * a2;
  int v15 = (int *)(v13 + v14 + 4 + *(unsigned int *)(v13 + v14 + 4));
  unsigned int v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 7u && (uint64_t v17 = v16[3]) != 0) {
    unsigned int v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
  }
  else {
    unsigned int v18 = 0;
  }
  uint64_t v19 = sub_A1FDE4(v18, a3);
  uint64_t v20 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v20 < 7u)
  {
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = (unsigned int *)v20[3];
    if (v21) {
      uint64_t v21 = (unsigned int *)((char *)v21 + (void)v11 + *(unsigned int *)((char *)v21 + (void)v11));
    }
  }
  int v22 = *(_DWORD *)(sub_A200AC(v21, *(_DWORD *)(v19 + 4) + a4) + 4);
  unsigned int v23 = sub_A10650((void *)(*(void *)(a1 + 56) + 4136), a2);
  unint64_t v24 = (int *)v23;
  uint64_t v25 = &v23[-*(int *)v23];
  if (*(unsigned __int16 *)v25 < 5u)
  {
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v26 = *((unsigned __int16 *)v25 + 2);
    if (v26) {
      v26 += (uint64_t)&v23[*(unsigned int *)&v23[v26]];
    }
  }
  unsigned int v27 = (int *)(v26 + v14 + 4 + *(unsigned int *)(v26 + v14 + 4));
  unint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
  if (*v28 >= 7u && (uint64_t v29 = v28[3]) != 0) {
    long long v30 = (unsigned int *)((char *)v27 + v29 + *(unsigned int *)((char *)v27 + v29));
  }
  else {
    long long v30 = 0;
  }
  uint64_t v31 = sub_A1FDE4(v30, a3);
  uint64_t v32 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v32 < 7u)
  {
    uint64_t v33 = 0;
  }
  else
  {
    uint64_t v33 = (unsigned int *)v32[3];
    if (v33) {
      uint64_t v33 = (unsigned int *)((char *)v33 + (void)v24 + *(unsigned int *)((char *)v33 + (void)v24));
    }
  }
  return (10 * (*(_DWORD *)(sub_A200AC(v33, *(_DWORD *)(v31 + 4) + a5) + 4) - v22));
}

uint64_t sub_B7BC84(uint64_t a1, unint64_t a2, int a3)
{
  int v6 = (int *)sub_A11094((void *)(*(void *)(a1 + 56) + 4136), a2);
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 < 9u)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v8 = v7[4];
    if (v8)
    {
      int v9 = *(int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
      if (v9)
      {
        uint64_t v10 = (v9 - 1);
        while (1)
        {
          uint64_t v11 = (int *)sub_A11094((void *)(*(void *)(a1 + 56) + 4136), a2);
          int v12 = (unsigned __int16 *)((char *)v11 - *v11);
          if (*v12 >= 9u && (uint64_t v13 = v12[4]) != 0) {
            uint64_t v14 = (unsigned int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
          }
          else {
            uint64_t v14 = 0;
          }
          int v15 = *(unsigned __int8 *)(sub_A10764(v14, v10) + 14);
          if (*(unsigned char *)(a1 + 48)) {
            BOOL v16 = 1;
          }
          else {
            BOOL v16 = a3 == v15;
          }
          if (v16)
          {
            uint64_t v17 = (int *)sub_A11094((void *)(*(void *)(a1 + 56) + 4136), a2);
            unsigned int v18 = (unsigned __int16 *)((char *)v17 - *v17);
            if (*v18 >= 9u && (uint64_t v19 = v18[4]) != 0)
            {
              if (*(unsigned char *)(sub_A10764((unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19)), v10)+ 15))return v10; {
            }
              }
            else if (*(unsigned char *)(sub_A10764(0, v10) + 15))
            {
              return v10;
            }
          }
          uint64_t v10 = (v10 - 1);
          if (v10 == -1) {
            return v10;
          }
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t *sub_B7BDF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = v10;
  uint64_t v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v25 + 10) = *(_DWORD *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        long long v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        long long v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      long long v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *long long v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  long long v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *long long v30 = *v29;
  *uint64_t v29 = v42[0];
LABEL_92:
  uint64_t v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_B7C238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B7C24C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_B7C264(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_B7C494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = a2;
    if (a3 != v6)
    {
      do
      {
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v5;
        long long v9 = *(_OWORD *)(v5 + 16);
        long long v10 = *(_OWORD *)(v5 + 32);
        long long v11 = *(_OWORD *)(v5 + 64);
        *(_OWORD *)(v7 + 48) = *(_OWORD *)(v5 + 48);
        *(_OWORD *)(v7 + 64) = v11;
        *(_OWORD *)(v7 + 16) = v9;
        *(_OWORD *)(v7 + 32) = v10;
        uint8x8_t v12 = (void **)(v7 + 80);
        uint64_t v13 = *(void *)(v7 + 80);
        if (v13)
        {
          uint64_t v14 = *(void *)(v7 + 88);
          unint64_t v8 = *(void **)(v7 + 80);
          if (v14 != v13)
          {
            do
            {
              uint64_t v15 = *(void **)(v14 - 32);
              if (v15)
              {
                *(void *)(v14 - 24) = v15;
                operator delete(v15);
              }
              v14 -= 112;
            }
            while (v14 != v13);
            unint64_t v8 = *v12;
          }
          *(void *)(v7 + 88) = v13;
          operator delete(v8);
          *uint8x8_t v12 = 0;
          *(void *)(v7 + 88) = 0;
          *(void *)(v7 + 96) = 0;
        }
        *(_OWORD *)(v7 + 80) = *(_OWORD *)(v5 + 80);
        *(void *)(v7 + 96) = *(void *)(v5 + 96);
        *(void *)(v5 + 80) = 0;
        *(void *)(v5 + 88) = 0;
        *(void *)(v5 + 96) = 0;
        *(unsigned char *)(v7 + 104) = *(unsigned char *)(v5 + 104);
        v5 += 112;
        v7 += 112;
      }
      while (v5 != v6);
      uint64_t v5 = *(void *)(a1 + 8);
    }
    while (v5 != v7)
    {
      uint64_t v17 = *(void *)(v5 - 32);
      if (v17)
      {
        uint64_t v18 = *(void *)(v5 - 24);
        uint64_t v16 = *(void **)(v5 - 32);
        if (v18 != v17)
        {
          do
          {
            uint64_t v19 = *(void **)(v18 - 32);
            if (v19)
            {
              *(void *)(v18 - 24) = v19;
              operator delete(v19);
            }
            v18 -= 112;
          }
          while (v18 != v17);
          uint64_t v16 = *(void **)(v5 - 32);
        }
        *(void *)(v5 - 24) = v17;
        operator delete(v16);
      }
      v5 -= 112;
    }
    *(void *)(a1 + 8) = v7;
  }
  return a2;
}

void sub_B7C5F8()
{
}

void *sub_B7C60C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_243DBA8;
  result[1] = v3;
  return result;
}

uint64_t sub_B7C654(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_243DBA8;
  a2[1] = v2;
  return result;
}

BOOL sub_B7C680(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v5 = *(void *)(a1 + 8);
  unsigned int v6 = *a3;
  unsigned int v7 = *a4;
  int v8 = sub_B7B998(v5, *(void *)(a2 + 28), *a3);
  int v9 = sub_B7B998(v5, *(void *)(a2 + 28), v7);
  if (v9 == 0x7FFFFFFF || v8 < v9) {
    return 0;
  }
  return v9 < v8 || v6 >= v7;
}

uint64_t sub_B7C714(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning23ScheduleGroupDomination23get_domination_functionENS2_19dominatio"
                     "n_method_tEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning23ScheduleGroupDomination23get_domination_functionENS2_"
                                "19domination_method_tEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning23ScheduleGroupDomination23get_domination_functionENS2_19domination_method_tEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning23ScheduleGroupDomination23get_domination_functionENS2_19domination_method_tEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B7C784()
{
}

void sub_B7C794()
{
}

void *sub_B7C7A8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_243DC38;
  result[1] = v3;
  return result;
}

uint64_t sub_B7C7F0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_243DC38;
  a2[1] = v2;
  return result;
}

BOOL sub_B7C81C(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *a3;
  unsigned int v7 = *a4;
  int v8 = sub_B7B998(v5, *(void *)(a2 + 28), *a3);
  int v9 = sub_B7B998(v5, *(void *)(a2 + 28), v7);
  int v10 = sub_B7BA90(v5, *(void *)(a2 + 28), *(_DWORD *)(a2 + 36), v6, v7) + v8;
  return v9 != 0x7FFFFFFF && v9 <= v10;
}

uint64_t sub_B7C8AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning23ScheduleGroupDomination23get_domination_functionENS2_19dominatio"
                     "n_method_tEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning23ScheduleGroupDomination23get_domination_functionENS2_"
                                "19domination_method_tEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning23ScheduleGroupDomination23get_domination_functionENS2_19domination_method_tEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning23ScheduleGroupDomination23get_domination_functionENS2_19domination_method_tEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B7C91C()
{
}

void sub_B7C92C()
{
}

__n128 sub_B7C940(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_243DCB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_B7C98C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_243DCB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_B7C9BC(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v6 = *a3;
  unsigned int v7 = *a4;
  uint64_t v8 = *(void *)(a1 + 8);
  int v9 = sub_B7B998(v8, *(void *)(a2 + 28), *a3);
  int v10 = sub_B7B998(v8, *(void *)(a2 + 28), v7);
  if (v10 == 0x7FFFFFFF || v9 < v10) {
    return 0;
  }
  if (v10 >= v9 && v6 < v7) {
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 16);
  int v14 = sub_B7B998(v13, *(void *)(a2 + 28), v6);
  int v15 = sub_B7B998(v13, *(void *)(a2 + 28), v7);
  int v16 = sub_B7BA90(v13, *(void *)(a2 + 28), *(_DWORD *)(a2 + 36), v6, v7) + v14;
  return v15 != 0x7FFFFFFF && v15 <= v16;
}

uint64_t sub_B7CAAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning23ScheduleGroupDomination23get_domination_functionENS2_19dominatio"
                     "n_method_tEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning23ScheduleGroupDomination23get_domination_functionENS2_"
                                "19domination_method_tEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning23ScheduleGroupDomination23get_domination_functionENS2_19domination_method_tEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning23ScheduleGroupDomination23get_domination_functionENS2_19domination_method_tEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B7CB1C()
{
}

uint64_t *sub_B7CB28(uint64_t *result, uint64_t *a2, void *a3)
{
  if (result != a2)
  {
    unint64_t v4 = a2;
    uint64_t v5 = result;
    unsigned int v6 = a3 + 9;
    uint64_t v70 = (uint64_t)(a3 + 9);
    while (1)
    {
      int v9 = (unint64_t *)((char *)v5 + 28);
      __n128 result = sub_A1E760(v6, (uint64_t *)((char *)v5 + 28));
      if (!result) {
        break;
      }
LABEL_6:
      uint64_t v5 = (uint64_t *)((char *)v5 + 60);
      if (v5 == v4) {
        return result;
      }
    }
    int v10 = *((_DWORD *)v5 + 12);
    if (v10 == -1)
    {
      unsigned int v11 = 0;
LABEL_61:
      LODWORD(v72) = v11;
      unint64_t v39 = (int *)sub_A11094((void *)(a3[7] + 4136), *v9);
      unint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
      if (*v40 < 9u || (uint64_t v41 = v40[4]) == 0)
      {
        unsigned int v7 = 0;
        goto LABEL_4;
      }
      unsigned int v8 = *(int *)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
      unsigned int v42 = *((_DWORD *)v5 + 12);
      if (v42 >= v8) {
        unsigned int v7 = v8;
      }
      else {
        unsigned int v7 = *((_DWORD *)v5 + 12);
      }
      if (v8 <= v42)
      {
LABEL_4:
        unsigned int v8 = v7 - 1;
LABEL_5:
        HIDWORD(v72) = v8;
        unsigned int v6 = (void *)v70;
        __n128 result = sub_B7D240(v70, (uint64_t *)((char *)v5 + 28), (uint64_t *)((char *)v5 + 28), &v72);
        unint64_t v4 = a2;
        goto LABEL_6;
      }
      while (1)
      {
        unint64_t v43 = *v9;
        int v44 = (void *)(a3[7] + 4136);
        unint64_t v45 = HIDWORD(*v9);
        if (sub_A10E20(v44, HIDWORD(*v9)))
        {
          uint64_t v46 = (int *)sub_A1120C(*(void *)(*v44 + 3944), v43);
          uint64_t v47 = (unsigned __int16 *)((char *)v46 - *v46);
          if (*v47 < 9u) {
            goto LABEL_84;
          }
        }
        else
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F7308))
          {
            sub_518C8(0x3B60u, 0x7FCAu);
            dword_24F7300 = v69 | 0x40000000;
            __cxa_guard_release(&qword_24F7308);
          }
          uint64_t v48 = *v44;
          if (dword_24F7300 == v45)
          {
            uint64_t v49 = sub_A10AD4(*(void *)(v48 + 3976));
            int v50 = &v49[-*(int *)v49];
            if (*(unsigned __int16 *)v50 >= 5u && (uint64_t v51 = *((unsigned __int16 *)v50 + 2)) != 0) {
              unsigned int v52 = (unsigned int *)&v49[v51 + *(unsigned int *)&v49[v51]];
            }
            else {
              unsigned int v52 = 0;
            }
            uint64_t v46 = (int *)sub_A1139C(v52, v43);
            uint64_t v47 = (unsigned __int16 *)((char *)v46 - *v46);
            if (*v47 < 9u) {
              goto LABEL_84;
            }
          }
          else
          {
            uint64_t v46 = (int *)sub_A11500(v48 + 24, v43, 0, "stop pattern");
            uint64_t v47 = (unsigned __int16 *)((char *)v46 - *v46);
            if (*v47 < 9u) {
              goto LABEL_84;
            }
          }
        }
        uint64_t v53 = v47[4];
        if (v53)
        {
          uint64_t v54 = (void *)sub_A10764((unsigned int *)((char *)v46 + v53 + *(unsigned int *)((char *)v46 + v53)), --v8);
          uint64_t v55 = (void *)a3[8];
          int8x8_t v56 = (int8x8_t)v55[1];
          if (v56) {
            goto LABEL_85;
          }
          goto LABEL_68;
        }
LABEL_84:
        uint64_t v54 = (void *)sub_A10764(0, --v8);
        uint64_t v55 = (void *)a3[8];
        int8x8_t v56 = (int8x8_t)v55[1];
        if (v56)
        {
LABEL_85:
          unint64_t v57 = __ROR8__(*v54, 32);
          unint64_t v58 = 0xC4CEB9FE1A85EC53
              * ((0xFF51AFD7ED558CCDLL * (v57 ^ (v57 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v57 ^ (v57 >> 33))) >> 33));
          unint64_t v59 = ((v58 ^ (v58 >> 33)) + 0x300357C1825D9FCCLL) ^ 0x506F9DC1424E4A4ELL;
          uint8x8_t v60 = (uint8x8_t)vcnt_s8(v56);
          v60.i16[0] = vaddlv_u8(v60);
          if (v60.u32[0] > 1uLL)
          {
            unint64_t v61 = v59;
            if (v59 >= *(void *)&v56) {
              unint64_t v61 = v59 % *(void *)&v56;
            }
          }
          else
          {
            unint64_t v61 = v59 & (*(void *)&v56 - 1);
          }
          long long v62 = *(uint64_t ***)(*v55 + 8 * v61);
          if (v62)
          {
            uint64_t v63 = *v62;
            if (v63)
            {
              if (v60.u32[0] < 2uLL)
              {
                uint64_t v64 = *(void *)&v56 - 1;
                while (1)
                {
                  uint64_t v67 = v63[1];
                  if (v59 == v67)
                  {
                    BOOL v68 = *((_DWORD *)v63 + 5) == 1 && *((_DWORD *)v63 + 4) == -2;
                    if (v68 && v63[3] == v57) {
                      goto LABEL_5;
                    }
                  }
                  else if ((v67 & v64) != v61)
                  {
                    goto LABEL_68;
                  }
                  uint64_t v63 = (uint64_t *)*v63;
                  if (!v63) {
                    goto LABEL_68;
                  }
                }
              }
              do
              {
                unint64_t v65 = v63[1];
                if (v59 == v65)
                {
                  BOOL v66 = *((_DWORD *)v63 + 5) == 1 && *((_DWORD *)v63 + 4) == -2;
                  if (v66 && v63[3] == v57) {
                    goto LABEL_5;
                  }
                }
                else
                {
                  if (v65 >= *(void *)&v56) {
                    v65 %= *(void *)&v56;
                  }
                  if (v65 != v61) {
                    break;
                  }
                }
                uint64_t v63 = (uint64_t *)*v63;
              }
              while (v63);
            }
          }
        }
LABEL_68:
        if (v8 == v7) {
          goto LABEL_4;
        }
      }
    }
    unsigned int v11 = 0;
    while (1)
    {
      unint64_t v12 = *v9;
      uint64_t v13 = (void *)(a3[7] + 4136);
      unint64_t v14 = HIDWORD(*v9);
      if (sub_A10E20(v13, HIDWORD(*v9)))
      {
        int v15 = (int *)sub_A1120C(*(void *)(*v13 + 3944), v12);
        int v16 = (unsigned __int16 *)((char *)v15 - *v15);
        if (*v16 < 9u) {
          goto LABEL_27;
        }
      }
      else
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_24F7308))
        {
          sub_518C8(0x3B60u, 0x7FCAu);
          dword_24F7300 = v38 | 0x40000000;
          __cxa_guard_release(&qword_24F7308);
        }
        uint64_t v17 = *v13;
        if (dword_24F7300 == v14)
        {
          uint64_t v18 = sub_A10AD4(*(void *)(v17 + 3976));
          uint64_t v19 = &v18[-*(int *)v18];
          if (*(unsigned __int16 *)v19 >= 5u && (uint64_t v20 = *((unsigned __int16 *)v19 + 2)) != 0) {
            uint64_t v21 = (unsigned int *)&v18[v20 + *(unsigned int *)&v18[v20]];
          }
          else {
            uint64_t v21 = 0;
          }
          int v15 = (int *)sub_A1139C(v21, v12);
          int v16 = (unsigned __int16 *)((char *)v15 - *v15);
          if (*v16 < 9u) {
            goto LABEL_27;
          }
        }
        else
        {
          int v15 = (int *)sub_A11500(v17 + 24, v12, 0, "stop pattern");
          int v16 = (unsigned __int16 *)((char *)v15 - *v15);
          if (*v16 < 9u) {
            goto LABEL_27;
          }
        }
      }
      uint64_t v22 = v16[4];
      if (v22)
      {
        uint64_t v23 = (void *)sub_A10764((unsigned int *)((char *)v15 + v22 + *(unsigned int *)((char *)v15 + v22)), v11);
        uint64_t v24 = (void *)a3[8];
        int8x8_t v25 = (int8x8_t)v24[1];
        if (v25) {
          goto LABEL_28;
        }
        goto LABEL_11;
      }
LABEL_27:
      uint64_t v23 = (void *)sub_A10764(0, v11);
      uint64_t v24 = (void *)a3[8];
      int8x8_t v25 = (int8x8_t)v24[1];
      if (v25)
      {
LABEL_28:
        unint64_t v26 = __ROR8__(*v23, 32);
        unint64_t v27 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v26 ^ (v26 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v26 ^ (v26 >> 33))) >> 33));
        unint64_t v28 = ((v27 ^ (v27 >> 33)) + 0x300357C1825D9FCCLL) ^ 0x506F9DC1424E4A4ELL;
        uint8x8_t v29 = (uint8x8_t)vcnt_s8(v25);
        v29.i16[0] = vaddlv_u8(v29);
        if (v29.u32[0] > 1uLL)
        {
          unint64_t v30 = v28;
          if (v28 >= *(void *)&v25) {
            unint64_t v30 = v28 % *(void *)&v25;
          }
        }
        else
        {
          unint64_t v30 = v28 & (*(void *)&v25 - 1);
        }
        BOOL v31 = *(uint64_t ***)(*v24 + 8 * v30);
        if (v31)
        {
          unint64_t v32 = *v31;
          if (v32)
          {
            if (v29.u32[0] < 2uLL)
            {
              uint64_t v33 = *(void *)&v25 - 1;
              while (1)
              {
                uint64_t v36 = v32[1];
                if (v28 == v36)
                {
                  BOOL v37 = *((_DWORD *)v32 + 5) == 1 && *((_DWORD *)v32 + 4) == -2;
                  if (v37 && v32[3] == v26) {
                    goto LABEL_61;
                  }
                }
                else if ((v36 & v33) != v30)
                {
                  goto LABEL_11;
                }
                unint64_t v32 = (uint64_t *)*v32;
                if (!v32) {
                  goto LABEL_11;
                }
              }
            }
            do
            {
              unint64_t v34 = v32[1];
              if (v28 == v34)
              {
                BOOL v35 = *((_DWORD *)v32 + 5) == 1 && *((_DWORD *)v32 + 4) == -2;
                if (v35 && v32[3] == v26) {
                  goto LABEL_61;
                }
              }
              else
              {
                if (v34 >= *(void *)&v25) {
                  v34 %= *(void *)&v25;
                }
                if (v34 != v30) {
                  break;
                }
              }
              unint64_t v32 = (uint64_t *)*v32;
            }
            while (v32);
          }
        }
      }
LABEL_11:
      BOOL v35 = v11++ == v10;
      if (v35)
      {
        unsigned int v11 = v10 + 1;
        goto LABEL_61;
      }
    }
  }
  return result;
}

void sub_B7D210(_Unwind_Exception *a1)
{
}

void sub_B7D228(_Unwind_Exception *a1)
{
}

void *sub_B7D240(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  unint64_t v9 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v10 = (0xC4CEB9FE1A85EC53 * (v9 ^ (v9 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v9 ^ (v9 >> 33))) >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = (0xC4CEB9FE1A85EC53 * (v9 ^ (v9 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v9 ^ (v9 >> 33))) >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 5) == HIDWORD(v8) && *((_DWORD *)v14 + 4) == v8) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            unint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 5) == HIDWORD(v8) && *((_DWORD *)v14 + 4) == v8) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  unint64_t v14 = operator new(0x20uLL);
  *unint64_t v14 = 0;
  v14[1] = v10;
  uint64_t v19 = *a4;
  v14[2] = *a3;
  uint64_t v14[3] = v19;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v11 && (float)(v21 * (float)v11) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      *unint64_t v14 = *v23;
LABEL_69:
      void *v23 = v14;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v31 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v10);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v10;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v10));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  *unint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    unint64_t v32 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v32 >= v11) {
        v32 %= v11;
      }
    }
    else
    {
      v32 &= v11 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_B7D58C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B7D5A0(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "add_extra_suggested_category");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  v65[23] = 11;
  strcpy(v65, "cell_scheme");
  uint64_t v5 = sub_561B0(a2, (uint64_t)v65);
  if (*(char *)(v5 + 23) < 0)
  {
    uint64_t v7 = *(void *)(v5 + 8);
    if (v7 != 31)
    {
      if (v7 != 41) {
        goto LABEL_67;
      }
      unsigned int v6 = *(uint64_t **)v5;
      goto LABEL_10;
    }
    if (**(void **)v5 != 0x646E615F656E696CLL
      || *(void *)(*(void *)v5 + 8) != 0x5F6E696769726F5FLL
      || *(void *)(*(void *)v5 + 16) != 0x5F6E6F6974617473
      || *(void *)(*(void *)v5 + 23) != 0x706F74735F726F5FLL)
    {
LABEL_67:
      exception = __cxa_allocate_exception(0x40uLL);
      std::operator+<char>();
      uint64_t v30 = std::string::append(&v66, "\" provided in configuration");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      __p[2] = (void *)v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      unint64_t v32 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
    }
LABEL_40:
    *(_DWORD *)(a1 + 4) = 0;
    if ((v65[23] & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (*(unsigned char *)(v5 + 23) == 31)
  {
    if (*(void *)v5 != 0x646E615F656E696CLL
      || *(void *)(v5 + 8) != 0x5F6E696769726F5FLL
      || *(void *)(v5 + 16) != 0x5F6E6F6974617473
      || *(void *)(v5 + 23) != 0x706F74735F726F5FLL)
    {
      goto LABEL_67;
    }
    goto LABEL_40;
  }
  unsigned int v6 = (uint64_t *)v5;
  if (*(unsigned char *)(v5 + 23) != 41) {
    goto LABEL_67;
  }
LABEL_10:
  uint64_t v8 = *v6;
  uint64_t v9 = v6[1];
  uint64_t v10 = v6[2];
  uint64_t v11 = v6[3];
  uint64_t v12 = v6[4];
  int v13 = *((unsigned __int8 *)v6 + 40);
  if (v8 != 0x6F5F6D6574737973
    || v9 != 0x615F656E696C5F72
    || v10 != 0x696769726F5F646ELL
    || v11 != 0x6F69746174735F6ELL
    || v12 != 0x6F74735F726F5F6ELL
    || v13 != 112)
  {
    goto LABEL_67;
  }
  *(_DWORD *)(a1 + 4) = 1;
  if ((v65[23] & 0x80000000) != 0) {
LABEL_41:
  }
    operator delete(*(void **)v65);
LABEL_42:
  *(void *)unint64_t v65 = operator new(0x20uLL);
  *(_OWORD *)&v65[8] = xmmword_20B91C0;
  strcpy(*(char **)v65, "standard_category_scheme");
  uint64_t v22 = sub_561B0(a2, (uint64_t)v65);
  if ((*(char *)(v22 + 23) & 0x80000000) == 0)
  {
    uint64_t v23 = (uint64_t *)v22;
    switch(*(unsigned char *)(v22 + 23))
    {
      case 6:
        if (*(_DWORD *)v22 != 1953724787 || *(_WORD *)(v22 + 4) != 28005) {
          goto LABEL_156;
        }
        goto LABEL_55;
      case 9:
        if (*(void *)v22 != 0x6574736567677573 || *(unsigned char *)(v22 + 8) != 100) {
          goto LABEL_156;
        }
        goto LABEL_149;
      case 0x1D:
        if (*(void *)v22 != 0x6C5F6D6574737973
          || *(void *)(v22 + 8) != 0x64657A696C61636FLL
          || *(void *)(v22 + 16) != 0x7469736E6172745FLL
          || *(void *)(v22 + 21) != 0x657079745F746973)
        {
          goto LABEL_156;
        }
        goto LABEL_125;
      case 0x25:
        goto LABEL_128;
      case 0x27:
        if (*(void *)v22 != 0x6F5F6D6574737973
          || *(void *)(v22 + 8) != 0x6D65747379735F72
          || *(void *)(v22 + 16) != 0x7A696C61636F6C5FLL
          || *(void *)(v22 + 24) != 0x736E6172745F6465
          || *(void *)(v22 + 31) != 0x657079745F746973)
        {
          goto LABEL_156;
        }
        goto LABEL_112;
      default:
        goto LABEL_156;
    }
  }
  switch(*(void *)(v22 + 8))
  {
    case 6:
      if (**(_DWORD **)v22 != 1953724787 || *(_WORD *)(*(void *)v22 + 4) != 28005) {
        goto LABEL_156;
      }
LABEL_55:
      *(_DWORD *)(a1 + 8) = 1;
      if ((v65[23] & 0x80000000) != 0) {
        goto LABEL_150;
      }
      goto LABEL_151;
    case 9:
      if (**(void **)v22 != 0x6574736567677573 || *(unsigned char *)(*(void *)v22 + 8) != 100) {
        goto LABEL_156;
      }
LABEL_149:
      *(_DWORD *)(a1 + 8) = 0;
      if ((v65[23] & 0x80000000) != 0) {
        goto LABEL_150;
      }
      goto LABEL_151;
    case 0x1DLL:
      if (**(void **)v22 != 0x6C5F6D6574737973
        || *(void *)(*(void *)v22 + 8) != 0x64657A696C61636FLL
        || *(void *)(*(void *)v22 + 16) != 0x7469736E6172745FLL
        || *(void *)(*(void *)v22 + 21) != 0x657079745F746973)
      {
        goto LABEL_156;
      }
LABEL_125:
      *(_DWORD *)(a1 + 8) = 2;
      if ((v65[23] & 0x80000000) != 0) {
        goto LABEL_150;
      }
      goto LABEL_151;
    case 0x25:
      uint64_t v23 = *(uint64_t **)v22;
LABEL_128:
      uint64_t v48 = *v23;
      uint64_t v49 = v23[1];
      uint64_t v50 = v23[2];
      uint64_t v51 = v23[3];
      uint64_t v52 = *(uint64_t *)((char *)v23 + 29);
      if (v48 != 0x6F5F6D6574737973
        || v49 != 0x6C5F656E696C5F72
        || v50 != 0x64657A696C61636FLL
        || v51 != 0x7469736E6172745FLL
        || v52 != 0x657079745F746973)
      {
        goto LABEL_156;
      }
      *(_DWORD *)(a1 + 8) = 4;
      if ((v65[23] & 0x80000000) != 0) {
        goto LABEL_150;
      }
      goto LABEL_151;
    case 0x27:
      if (**(void **)v22 != 0x6F5F6D6574737973
        || *(void *)(*(void *)v22 + 8) != 0x6D65747379735F72
        || *(void *)(*(void *)v22 + 16) != 0x7A696C61636F6C5FLL
        || *(void *)(*(void *)v22 + 24) != 0x736E6172745F6465
        || *(void *)(*(void *)v22 + 31) != 0x657079745F746973)
      {
        goto LABEL_156;
      }
LABEL_112:
      *(_DWORD *)(a1 + 8) = 3;
      if ((v65[23] & 0x80000000) != 0) {
LABEL_150:
      }
        operator delete(*(void **)v65);
LABEL_151:
      strcpy((char *)__p, "suggested_group_scheme");
      HIBYTE(__p[2]) = 22;
      uint64_t v58 = sub_561B0(a2, (uint64_t)__p);
      *(_DWORD *)(a1 + 12) = sub_B7DF54(v58);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      HIBYTE(__p[2]) = 21;
      strcpy((char *)__p, "standard_group_scheme");
      uint64_t v59 = sub_561B0(a2, (uint64_t)__p);
      *(_DWORD *)(a1 + 16) = sub_B7DF54(v59);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      return a1;
    default:
LABEL_156:
      unint64_t v61 = __cxa_allocate_exception(0x40uLL);
      std::operator+<char>();
      long long v62 = std::string::append(&v66, "\" provided in configuration");
      long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      __p[2] = (void *)v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      uint64_t v64 = (void *)sub_2F404((uint64_t)v61, (long long *)__p);
  }
}

void sub_B7DD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a14 & 0x80000000) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
LABEL_7:
    operator delete(a9);
    goto LABEL_8;
  }
  operator delete(a15);
  if ((a14 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t sub_B7DF54(uint64_t a1)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23) != 17)
    {
      uint64_t v1 = (uint64_t *)a1;
      if (*(unsigned char *)(a1 + 23) != 40) {
        goto LABEL_39;
      }
      goto LABEL_15;
    }
    if (*(void *)a1 != 0x5F6E6F6974617473
      || *(void *)(a1 + 8) != 0x6F74735F6E656874
      || *(unsigned char *)(a1 + 16) != 112)
    {
LABEL_39:
      exception = __cxa_allocate_exception(0x40uLL);
      std::operator+<char>();
      uint64_t v18 = std::string::append(&v21, "\" provided in configuration");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      std::string::size_type v23 = v18->__r_.__value_.__r.__words[2];
      long long v22 = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      float v20 = (void *)sub_2F404((uint64_t)exception, &v22);
    }
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == 17)
  {
    BOOL v3 = **(void **)a1 == 0x5F6E6F6974617473 && *(void *)(*(void *)a1 + 8) == 0x6F74735F6E656874;
    if (v3 && *(unsigned char *)(*(void *)a1 + 16) == 112) {
      return 0;
    }
  }
  if (v2 != 40) {
    goto LABEL_39;
  }
  uint64_t v1 = *(uint64_t **)a1;
LABEL_15:
  uint64_t v5 = *v1;
  uint64_t v6 = v1[1];
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  if (v5 != 0x5F6E6F6974617473
    || v6 != 0x6E696C5F6E656874
    || v7 != 0x696C61636F6C5F65
    || v8 != 0x6E6172745F64657ALL
    || v9 != 0x657079745F746973)
  {
    goto LABEL_39;
  }
  return 1;
}

void sub_B7E114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B7E16C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = sub_B7D5A0(a1, a3);
  *(void *)(result + 24) = a2;
  return result;
}

void sub_B7E198(uint64_t a1, uint64_t a2, unint64_t *a3, __n128 a4)
{
  uint64_t v8 = (char *)a3[3];
  uint64_t v9 = (char *)a3[4];
  uint64_t v7 = a3 + 3;
  while (v9 != v8)
  {
    uint64_t v10 = (void *)*((void *)v9 - 11);
    if (v10)
    {
      *((void *)v9 - 10) = v10;
      operator delete(v10);
    }
    v9 -= 160;
  }
  a3[4] = (unint64_t)v8;
  uint64_t v11 = (char *)*a3;
  for (uint64_t i = (char *)a3[1]; i != v11; i -= 112)
  {
    uint64_t v14 = *((void *)i - 4);
    if (v14)
    {
      uint64_t v15 = *((void *)i - 3);
      int v13 = (void *)*((void *)i - 4);
      if (v15 != v14)
      {
        do
        {
          int v16 = *(void **)(v15 - 32);
          if (v16)
          {
            *(void *)(v15 - 24) = v16;
            operator delete(v16);
          }
          v15 -= 112;
        }
        while (v15 != v14);
        int v13 = (void *)*((void *)i - 4);
      }
      *((void *)i - 3) = v14;
      operator delete(v13);
    }
  }
  a3[1] = (unint64_t)v11;
  sub_B7E5F8(a1, a3 + 6, *(_DWORD *)(a1 + 4), __p, a4);
  uint64_t v17 = (char *)a3[3];
  if (v17)
  {
    uint64_t v18 = (char *)a3[4];
    long long v19 = (char *)a3[3];
    if (v18 != v17)
    {
      do
      {
        float v20 = (void *)*((void *)v18 - 11);
        if (v20)
        {
          *((void *)v18 - 10) = v20;
          operator delete(v20);
        }
        v18 -= 160;
      }
      while (v18 != v17);
      long long v19 = (char *)*v7;
    }
    a3[4] = (unint64_t)v17;
    operator delete(v19);
    unint64_t *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  __n128 v21 = *(__n128 *)__p;
  *(_OWORD *)(a3 + 3) = *(_OWORD *)__p;
  a3[5] = (unint64_t)v55;
  if (*(unsigned char *)(a2 + 152))
  {
    if (*(unsigned char *)a1)
    {
      sub_B7EAA8(a1, v7, 0, (uint64_t)__p, v21);
      sub_B7FFB0((void **)a3, a3[1], (uint64_t)__p[0], (uint64_t)__p[1], 0x6DB6DB6DB6DB6DB7 * (((char *)__p[1] - (char *)__p[0]) >> 4));
      long long v22 = (char *)__p[0];
      if (__p[0])
      {
        std::string::size_type v23 = (char *)__p[1];
        BOOL v24 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            uint64_t v26 = *((void *)v23 - 4);
            if (v26)
            {
              uint64_t v27 = *((void *)v23 - 3);
              unint64_t v25 = (void *)*((void *)v23 - 4);
              if (v27 != v26)
              {
                do
                {
                  unint64_t v28 = *(void **)(v27 - 32);
                  if (v28)
                  {
                    *(void *)(v27 - 24) = v28;
                    operator delete(v28);
                  }
                  v27 -= 112;
                }
                while (v27 != v26);
                unint64_t v25 = (void *)*((void *)v23 - 4);
              }
              *((void *)v23 - 3) = v26;
              operator delete(v25);
            }
            v23 -= 112;
          }
          while (v23 != v22);
          BOOL v24 = __p[0];
        }
        __p[1] = v22;
        operator delete(v24);
      }
    }
    sub_B7EAA8(a1, v7, *(_DWORD *)(a1 + 8), (uint64_t)__p, v21);
    sub_B7FFB0((void **)a3, a3[1], (uint64_t)__p[0], (uint64_t)__p[1], 0x6DB6DB6DB6DB6DB7 * (((char *)__p[1] - (char *)__p[0]) >> 4));
    uint64_t v30 = (char *)__p[0];
    if (__p[0])
    {
      long long v31 = (char *)__p[1];
      unint64_t v32 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          uint64_t v34 = *((void *)v31 - 4);
          if (v34)
          {
            uint64_t v35 = *((void *)v31 - 3);
            uint64_t v33 = (void *)*((void *)v31 - 4);
            if (v35 != v34)
            {
              do
              {
                uint64_t v36 = *(void **)(v35 - 32);
                if (v36)
                {
                  *(void *)(v35 - 24) = v36;
                  operator delete(v36);
                }
                v35 -= 112;
              }
              while (v35 != v34);
              uint64_t v33 = (void *)*((void *)v31 - 4);
            }
            *((void *)v31 - 3) = v34;
            operator delete(v33);
          }
          v31 -= 112;
        }
        while (v31 != v30);
        unint64_t v32 = __p[0];
      }
      __p[1] = v30;
      operator delete(v32);
    }
    BOOL v37 = (char *)*a3;
    int v38 = (char *)a3[1];
    if ((char *)*a3 != v38)
    {
      do
      {
        uint64_t v39 = 16;
        if (!v37[104]) {
          uint64_t v39 = 12;
        }
        int v40 = *(_DWORD *)(a1 + v39);
        unsigned int v42 = (void **)(v37 + 80);
        uint64_t v41 = *((void *)v37 + 10);
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        uint64_t v51 = 0;
        int v44 = *(char **)(v41 + 80);
        unint64_t v43 = *(char **)(v41 + 88);
        uint64_t v45 = v43 - v44;
        if (v43 != v44)
        {
          if (v45 < 0) {
            sub_2E00();
          }
          uint64_t v46 = (char *)operator new((unint64_t)v45 >> 2);
          uint64_t v51 = v46;
          uint64_t v52 = v46;
          uint64_t v53 = &v46[4 * (v45 >> 4)];
          do
          {
            int v56 = *(_DWORD *)v44;
            uint64_t v46 = sub_B85978(&v51, v46, &v56) + 4;
            v44 += 16;
          }
          while (v44 != v43);
        }
        sub_B7F0A4(a1, v7, (unsigned int **)&v51, v40, __p, v29);
        uint64_t v47 = (char *)*v42;
        if (*v42)
        {
          uint64_t v48 = (char *)*((void *)v37 + 11);
          uint64_t v49 = *v42;
          if (v48 != v47)
          {
            do
            {
              uint64_t v50 = (void *)*((void *)v48 - 4);
              if (v50)
              {
                *((void *)v48 - 3) = v50;
                operator delete(v50);
              }
              v48 -= 112;
            }
            while (v48 != v47);
            uint64_t v49 = *v42;
          }
          *((void *)v37 + 11) = v47;
          operator delete(v49);
          void *v42 = 0;
          *((void *)v37 + 11) = 0;
          *((void *)v37 + 12) = 0;
        }
        __n128 v29 = *(__n128 *)__p;
        *((_OWORD *)v37 + 5) = *(_OWORD *)__p;
        *((void *)v37 + 12) = v55;
        __p[1] = 0;
        uint64_t v55 = 0;
        __p[0] = 0;
        if (v51)
        {
          uint64_t v52 = v51;
          operator delete(v51);
        }
        v37 += 112;
      }
      while (v37 != v38);
    }
  }
}

void sub_B7E5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_B7EFF4((void **)va);
  _Unwind_Resume(a1);
}

void sub_B7E5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_B7EFF4((void **)va);
  _Unwind_Resume(a1);
}

void sub_B7E5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B7E5F8(uint64_t a1@<X0>, unint64_t *a2@<X1>, int a3@<W2>, void *a4@<X8>, __n128 a5@<Q0>)
{
  unint64_t v10 = *a2;
  unint64_t v9 = a2[1];
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  unint64_t v32 = 0;
  uint64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if ((0xEF7BDEF7BDEF7BDFLL * (v11 >> 3)) >> 61) {
      sub_2E00();
    }
    uint64_t v12 = (char *)operator new(0x7BDEF7BDEF7BDEF8 * (v11 >> 3));
    unint64_t v32 = v12;
    uint64_t v34 = &v12[0x7BDEF7BDEF7BDEF8 * (v11 >> 3)];
    if ((unint64_t)(v11 - 248) >= 0x2E8)
    {
      unint64_t v15 = (v11 - 248) / 0xF8uLL + 1;
      unint64_t v13 = v10 + 248 * (v15 & 0x3FFFFFFFFFFFFFCLL);
      uint64_t v14 = &v12[8 * (v15 & 0x3FFFFFFFFFFFFFCLL)];
      int v16 = (int64x2_t *)(v12 + 16);
      a5 = (__n128)xmmword_20ED830;
      uint64_t v17 = v15 & 0x3FFFFFFFFFFFFFCLL;
      do
      {
        int64x2_t v18 = vdupq_n_s64(v10);
        v16[-1] = vaddq_s64(v18, (int64x2_t)xmmword_20ED830);
        *int v16 = vaddq_s64(v18, (int64x2_t)xmmword_20ED840);
        v10 += 992;
        v16 += 2;
        v17 -= 4;
      }
      while (v17);
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFCLL)) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v13 = v10;
      uint64_t v14 = v12;
    }
    do
    {
      *(void *)uint64_t v14 = v13;
      v14 += 8;
      v13 += 248;
    }
    while (v13 != v9);
LABEL_9:
    uint64_t v33 = v14;
  }
  if (a3 == 1)
  {
    long long v19 = off_243DDC8;
    goto LABEL_14;
  }
  if (!a3)
  {
    long long v19 = off_243DD38;
LABEL_14:
    v35[0] = v19;
    v35[1] = a1;
    uint64_t v36 = v35;
    goto LABEL_16;
  }
  uint64_t v36 = 0;
LABEL_16:
  sub_B7F470(&v32, v35, a5);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  for (uint64_t i = v32; i != v33; i += 8)
  {
    if (i == v32) {
      goto LABEL_20;
    }
    if (!v36) {
      sub_29F82C();
    }
    if ((*(unsigned int (**)(void *, char *, char *))(*v36 + 48))(v36, i - 8, i))
    {
LABEL_20:
      LOBYTE(v26[0]) = 0;
      *(void *)((char *)v26 + 4) = 0x8000000080000000;
      memset(&v26[1], 0, 48);
      long long v27 = 0u;
      long long v28 = 0u;
      *(void *)&long long v29 = 0x8000000080000000;
      DWORD2(v29) = 0x7FFFFFFF;
      WORD6(v29) = 0;
      *(void *)uint64_t v30 = 0x8000000080000000;
      *(_WORD *)&v30[8] = 0;
      *(_OWORD *)&v30[12] = xmmword_20EB6B0;
      *(void *)&v30[28] = 0xFFFFFFFF7FFFFFFFLL;
      *(_DWORD *)&v30[36] = -1;
      v30[40] = 1;
      __int16 v31 = 256;
      LOBYTE(v31) = sub_B7F64C(a1, *(void *)i, a3);
      uint64_t v21 = *(void *)i;
      long long v22 = *(_OWORD *)(*(void *)i + 124);
      long long v23 = *(_OWORD *)(*(void *)i + 156);
      *(_OWORD *)uint64_t v30 = *(_OWORD *)(*(void *)i + 140);
      *(_OWORD *)&v30[16] = v23;
      *(_OWORD *)&v30[25] = *(_OWORD *)(v21 + 165);
      long long v29 = v22;
      sub_B7F77C((uint64_t)a4, (uint64_t)v26);
      if (*((void *)&v27 + 1))
      {
        *(void *)&long long v28 = *((void *)&v27 + 1);
        operator delete(*((void **)&v27 + 1));
      }
    }
    BOOL v24 = (char **)(a4[1] - 88);
    v26[0] = 0xFFFFFFFFuLL;
    sub_3BFF8(v24, v26);
    *(_DWORD *)(*(void *)(a4[1] - 80) - 16) = sub_2E2964(0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)i - *a2) >> 3));
  }
  if (v36 == v35)
  {
    (*(void (**)(void *))(v35[0] + 32))(v35);
    unint64_t v25 = v32;
    if (v32)
    {
LABEL_27:
      uint64_t v33 = v25;
      operator delete(v25);
    }
  }
  else
  {
    if (v36) {
      (*(void (**)(void))(*v36 + 40))();
    }
    unint64_t v25 = v32;
    if (v32) {
      goto LABEL_27;
    }
  }
}

void sub_B7E9D4(_Unwind_Exception *a1)
{
  sub_B7F884((void *)(v1 - 144));
  BOOL v3 = *(void **)(v1 - 168);
  if (v3)
  {
    *(void *)(v1 - 160) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_B7EA1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0xB7E9F4);
}

void **sub_B7EA34(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    BOOL v3 = (char *)a1[1];
    BOOL v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 11);
        if (v5)
        {
          *((void *)v3 - 10) = v5;
          operator delete(v5);
        }
        v3 -= 160;
      }
      while (v3 != v2);
      BOOL v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_B7EAA8(uint64_t a1@<X0>, unint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  unint64_t v9 = *a2;
  unint64_t v8 = a2[1];
  unint64_t v43 = 0;
  int v44 = 0;
  unsigned int v42 = 0;
  uint64_t v10 = v8 - v9;
  if (v8 != v9)
  {
    if ((0xCCCCCCCCCCCCCCCDLL * (v10 >> 5)) >> 61) {
      sub_2E00();
    }
    uint64_t v11 = (int64x2_t *)operator new(0x6666666666666668 * (v10 >> 5));
    unsigned int v42 = v11;
    int v44 = &v11->i8[0x6666666666666668 * (v10 >> 5)];
    if ((unint64_t)(v10 - 160) >= 0x1E0)
    {
      unint64_t v14 = (v10 - 160) / 0xA0uLL + 1;
      unint64_t v12 = v9 + 160 * (v14 & 0x3FFFFFFFFFFFFFCLL);
      unint64_t v13 = &v11->i64[v14 & 0x3FFFFFFFFFFFFFCLL];
      unint64_t v15 = v11 + 1;
      a5 = (__n128)xmmword_20ED850;
      uint64_t v16 = v14 & 0x3FFFFFFFFFFFFFCLL;
      do
      {
        int64x2_t v17 = vdupq_n_s64(v9);
        v15[-1] = vaddq_s64(v17, (int64x2_t)xmmword_20ED850);
        int64x2_t *v15 = vaddq_s64(v17, (int64x2_t)xmmword_20ED860);
        v9 += 640;
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v14 == (v14 & 0x3FFFFFFFFFFFFFCLL)) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v12 = v9;
      unint64_t v13 = (uint64_t *)v11;
    }
    do
    {
      *v13++ = v12;
      v12 += 160;
    }
    while (v12 != v8);
LABEL_9:
    unint64_t v43 = v13;
  }
  switch(a3)
  {
    case 0u:
      uint64_t v45 = off_243DE48;
      uint64_t v48 = &v45;
      break;
    case 1u:
      int64x2_t v18 = off_243DED8;
      goto LABEL_15;
    case 2u:
      int64x2_t v18 = off_243DF58;
LABEL_15:
      uint64_t v45 = v18;
      uint64_t v46 = a1;
      uint64_t v48 = &v45;
      break;
    case 3u:
    case 4u:
      uint64_t v45 = off_243DFD8;
      uint64_t v46 = a3;
      uint64_t v47 = a1;
      uint64_t v48 = &v45;
      break;
    default:
      uint64_t v48 = 0;
      break;
  }
  sub_B7F914((char **)&v42, &v45, a5);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  long long v19 = (uint64_t *)v42;
  if (v42 != v43)
  {
    while (1)
    {
      if (v19 != v42)
      {
        if (!v48) {
          sub_29F82C();
        }
        if (!((unsigned int (*)(uint64_t (***)(), uint64_t *, uint64_t *))(*v48)[6])(v48, v19 - 1, v19))goto LABEL_41; {
      }
        }
      LOBYTE(v36) = 0;
      *(void *)((char *)&v36 + 4) = 0x8000000080000000;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      memset(__p, 0, 25);
      LOBYTE(__p[3]) = sub_B7FAF0(a1, (uint64_t)v19, a3);
      float v20 = (char *)__p[1];
      unint64_t v21 = 0x6DB6DB6DB6DB6DB7 * (((char *)__p[1] - (char *)__p[0]) >> 4);
      if (__p[1] == __p[0]) {
        break;
      }
      if (v21 < 2) {
        goto LABEL_29;
      }
      long long v22 = (char *)__p[0] + 112;
      while (v20 != v22)
      {
        long long v23 = (void *)*((void *)v20 - 4);
        if (v23)
        {
          *((void *)v20 - 3) = v23;
          operator delete(v23);
        }
        v20 -= 112;
      }
      __p[1] = v22;
      unint64_t v24 = *(void *)(a4 + 8);
      if (v24 < *(void *)(a4 + 16))
      {
LABEL_30:
        *(_OWORD *)unint64_t v24 = v36;
        long long v25 = v37;
        long long v26 = v38;
        long long v27 = v40;
        *(_OWORD *)(v24 + 48) = v39;
        *(_OWORD *)(v24 + 64) = v27;
        *(_OWORD *)(v24 + 16) = v25;
        *(_OWORD *)(v24 + 32) = v26;
        sub_B8065C((void *)(v24 + 80), (uint64_t *)__p);
        *(unsigned char *)(v24 + 104) = __p[3];
        long long v28 = (char *)(v24 + 112);
        *(void *)(a4 + 8) = v24 + 112;
        goto LABEL_33;
      }
LABEL_32:
      long long v28 = sub_B83BFC((void **)a4, (uint64_t)&v36);
LABEL_33:
      *(void *)(a4 + 8) = v28;
      long long v29 = (char *)__p[0];
      if (__p[0])
      {
        uint64_t v30 = (char *)__p[1];
        __int16 v31 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            unint64_t v32 = (void *)*((void *)v30 - 4);
            if (v32)
            {
              *((void *)v30 - 3) = v32;
              operator delete(v32);
            }
            v30 -= 112;
          }
          while (v30 != v29);
          __int16 v31 = __p[0];
        }
        __p[1] = v29;
        operator delete(v31);
      }
LABEL_41:
      uint64_t v33 = (char **)(*(void *)(*(void *)(a4 + 8) - 24) - 32);
      long long v36 = 0xFFFFFFFF;
      sub_3BFF8(v33, &v36);
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a4 + 8) - 24) - 24) - 16) = sub_2E2964(0xCCCCCCCCCCCCCCCDLL* ((uint64_t)(*v19++ - *a2) >> 5));
      if (v19 == v43) {
        goto LABEL_42;
      }
    }
    sub_B83944(__p, 1 - v21);
LABEL_29:
    unint64_t v24 = *(void *)(a4 + 8);
    if (v24 < *(void *)(a4 + 16)) {
      goto LABEL_30;
    }
    goto LABEL_32;
  }
LABEL_42:
  if (v48 == &v45)
  {
    ((void (*)(uint64_t (***)()))v45[4])(&v45);
    uint64_t v34 = (uint64_t *)v42;
    if (v42)
    {
LABEL_46:
      unint64_t v43 = v34;
      operator delete(v34);
    }
  }
  else
  {
    if (v48) {
      (*v48)[5]();
    }
    uint64_t v34 = (uint64_t *)v42;
    if (v42) {
      goto LABEL_46;
    }
  }
}

void sub_B7EF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  sub_B7FD1C((void *)(v26 - 144));
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void **sub_B7EFF4(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    BOOL v3 = (char *)a1[1];
    BOOL v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *((void *)v3 - 4);
        if (v6)
        {
          uint64_t v7 = *((void *)v3 - 3);
          uint64_t v5 = (void *)*((void *)v3 - 4);
          if (v7 != v6)
          {
            do
            {
              unint64_t v8 = *(void **)(v7 - 32);
              if (v8)
              {
                *(void *)(v7 - 24) = v8;
                operator delete(v8);
              }
              v7 -= 112;
            }
            while (v7 != v6);
            uint64_t v5 = (void *)*((void *)v3 - 4);
          }
          *((void *)v3 - 3) = v6;
          operator delete(v5);
        }
        v3 -= 112;
      }
      while (v3 != v2);
      BOOL v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_B7F0A4(uint64_t a1@<X0>, void *a2@<X1>, unsigned int **a3@<X2>, int a4@<W3>, void *a5@<X8>, __n128 a6@<Q0>)
{
  long long v19 = 0;
  float v20 = 0;
  unint64_t v21 = 0;
  uint64_t v11 = *a3;
  uint64_t v10 = a3[1];
  uint64_t v12 = (char *)v10 - (char *)*a3;
  if (v10 != *a3)
  {
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFDLL) {
      sub_2E00();
    }
    unint64_t v13 = (char *)operator new(2 * v12);
    long long v19 = v13;
    float v20 = v13;
    unint64_t v21 = &v13[8 * (v12 >> 2)];
    do
    {
      *(void *)&v18[0] = sub_A173AC(a2, *v11);
      unint64_t v13 = sub_B84B68((unint64_t *)&v19, v13, v18) + 8;
      ++v11;
    }
    while (v11 != v10);
  }
  if (a4 == 1)
  {
    unint64_t v14 = off_243E0D8;
    goto LABEL_9;
  }
  if (!a4)
  {
    unint64_t v14 = off_243E058;
LABEL_9:
    v22[0] = v14;
    v22[1] = a1;
    long long v23 = v22;
    goto LABEL_11;
  }
  long long v23 = 0;
LABEL_11:
  sub_B7F914((char **)&v19, v22, a6);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  unint64_t v15 = v19;
  if (v19 != v20)
  {
    do
    {
      if (v15 == v19) {
        goto LABEL_15;
      }
      if (!v23) {
        sub_29F82C();
      }
      if ((*(unsigned int (**)(void *, void *, void *))(*v23 + 48))(v23, v15 - 1, v15))
      {
LABEL_15:
        LOBYTE(v18[0]) = 0;
        *(void *)((char *)v18 + 4) = 0x8000000080000000;
        memset(&v18[1], 0, 89);
        BYTE8(v18[6]) = sub_B7FDAC(a1, (uint64_t)v15, a4);
        sub_B7FEC0((uint64_t)a5, (uint64_t)v18);
        if (*(void *)&v18[5])
        {
          *((void *)&v18[5] + 1) = *(void *)&v18[5];
          operator delete(*(void **)&v18[5]);
        }
      }
      uint64_t v16 = (char **)(a5[1] - 32);
      v18[0] = 0xFFFFFFFFuLL;
      sub_3BFF8(v16, v18);
      *(_DWORD *)(*(void *)(a5[1] - 24) - 16) = sub_2E2964(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v15++ - *a2) >> 5));
    }
    while (v15 != (void *)v20);
  }
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
    int64x2_t v17 = (char *)v19;
    if (v19)
    {
LABEL_22:
      float v20 = v17;
      operator delete(v17);
    }
  }
  else
  {
    if (v23) {
      (*(void (**)(void))(*v23 + 40))();
    }
    int64x2_t v17 = (char *)v19;
    if (v19) {
      goto LABEL_22;
    }
  }
}

void sub_B7F398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void **sub_B7F3FC(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    BOOL v3 = (char *)a1[1];
    BOOL v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 4);
        if (v5)
        {
          *((void *)v3 - 3) = v5;
          operator delete(v5);
        }
        v3 -= 112;
      }
      while (v3 != v2);
      BOOL v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_B7F470(char **a1, void *a2, __n128 a3)
{
  BOOL v3 = *a1;
  BOOL v4 = a1[1];
  uint64_t v5 = (void *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      unint64_t v13 = v12;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v12);
    }
    else
    {
      unint64_t v13 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  if (v4 - v3 < 1025)
  {
LABEL_10:
    unint64_t v9 = 0;
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = (v4 - v3) >> 3;
    while (1)
    {
      uint64_t v7 = (char *)operator new(8 * v6, &std::nothrow);
      if (v7) {
        break;
      }
      BOOL v8 = v6 > 1;
      v6 >>= 1;
      if (!v8) {
        goto LABEL_10;
      }
    }
    unint64_t v9 = v7;
  }
  __n128 v10 = sub_B80BA4(v3, v4, v12, (v4 - v3) >> 3, v9, v6, a3);
  if (v9) {
    operator delete(v9);
  }
  uint64_t result = (uint64_t)v13;
  if (v13 == v12) {
    return (*(uint64_t (**)(void *, __n128))(v12[0] + 32))(v12, v10);
  }
  if (v13) {
    return (*(uint64_t (**)(__n128))(*v13 + 40))(v10);
  }
  return result;
}

void sub_B7F62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    operator delete(v10);
  }
  sub_B7F884(&a10);
  _Unwind_Resume(a1);
}

BOOL sub_B7F64C(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 != 1) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 172);
  uint64_t v5 = (int *)sub_A11094((void *)(*(void *)(a1 + 24) + 4136), *(void *)(a2 + 152));
  unint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v7 = *v6;
  if (v7 < 5)
  {
    BOOL v8 = 0;
    goto LABEL_8;
  }
  if (!v6[2])
  {
    BOOL v8 = 0;
    if (v7 >= 9) {
      goto LABEL_14;
    }
LABEL_8:
    __n128 v10 = 0;
    goto LABEL_9;
  }
  BOOL v8 = (char *)v5 + v6[2] + *(unsigned int *)((char *)v5 + v6[2]);
  if (v7 < 9) {
    goto LABEL_8;
  }
LABEL_14:
  uint64_t v15 = v6[4];
  if (!v15) {
    goto LABEL_8;
  }
  __n128 v10 = (unsigned int *)((char *)v5 + v15 + *(unsigned int *)((char *)v5 + v15));
LABEL_9:
  uint64_t v11 = sub_A10764(v10, v4);
  uint64_t v12 = (int *)sub_8DFD1C(*(void *)(*(void *)(a1 + 24) + 4056) + 24, *(void *)&v8[8 * *(unsigned __int8 *)(v11 + 14) + 4], 0, "line");
  BOOL result = 0;
  unint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 >= 0x4Du)
  {
    uint64_t v14 = v13[38];
    return v14 && *((unsigned char *)v12 + v14) == 2;
  }
  return result;
}

char *sub_B7F77C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >= *(void *)(a1 + 16))
  {
    uint64_t v16 = sub_B81BF0((void **)a1, (long long *)a2);
  }
  else
  {
    *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v6 = *(_OWORD *)(a2 + 32);
    long long v7 = *(_OWORD *)(a2 + 48);
    *(void *)(v4 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(v4 + 32) = v6;
    *(_OWORD *)(v4 + 48) = v7;
    *(void *)(v4 + 72) = 0;
    *(_OWORD *)(v4 + 16) = v5;
    *(void *)(v4 + 80) = 0;
    *(void *)(v4 + 88) = 0;
    unint64_t v9 = *(unsigned char **)(a2 + 72);
    BOOL v8 = *(unsigned char **)(a2 + 80);
    int64_t v10 = v8 - v9;
    if (v8 != v9)
    {
      if (v10 < 0) {
        sub_2E00();
      }
      uint64_t v11 = (char *)operator new(v8 - v9);
      *(void *)(v4 + 72) = v11;
      *(void *)(v4 + 80) = v11;
      uint64_t v12 = &v11[16 * (v10 >> 4)];
      *(void *)(v4 + 88) = v12;
      memcpy(v11, v9, v10);
      *(void *)(v4 + 80) = v12;
    }
    long long v13 = *(_OWORD *)(a2 + 96);
    long long v14 = *(_OWORD *)(a2 + 112);
    long long v15 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v4 + 142) = *(_OWORD *)(a2 + 142);
    *(_OWORD *)(v4 + 112) = v14;
    *(_OWORD *)(v4 + 128) = v15;
    *(_OWORD *)(v4 + 96) = v13;
    uint64_t v16 = (char *)(v4 + 160);
    *(void *)(a1 + 8) = v4 + 160;
  }
  *(void *)(a1 + 8) = v16;
  return v16 - 160;
}

void sub_B7F864(_Unwind_Exception *exception_object)
{
  long long v5 = *v2;
  if (*v2)
  {
    *(void *)(v3 + 80) = v5;
    operator delete(v5);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

void *sub_B7F884(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t sub_B7F914(char **a1, void *a2, __n128 a3)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  long long v5 = (void *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      long long v13 = v12;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v12);
    }
    else
    {
      long long v13 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
  }
  else
  {
    long long v13 = 0;
  }
  if (v4 - v3 < 1025)
  {
LABEL_10:
    unint64_t v9 = 0;
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = (v4 - v3) >> 3;
    while (1)
    {
      long long v7 = (char *)operator new(8 * v6, &std::nothrow);
      if (v7) {
        break;
      }
      BOOL v8 = v6 > 1;
      v6 >>= 1;
      if (!v8) {
        goto LABEL_10;
      }
    }
    unint64_t v9 = v7;
  }
  __n128 v10 = sub_B828F8(v3, v4, v12, (v4 - v3) >> 3, v9, v6, a3);
  if (v9) {
    operator delete(v9);
  }
  uint64_t result = (uint64_t)v13;
  if (v13 == v12) {
    return (*(uint64_t (**)(void *, __n128))(v12[0] + 32))(v12, v10);
  }
  if (v13) {
    return (*(uint64_t (**)(__n128))(*v13 + 40))(v10);
  }
  return result;
}

void sub_B7FAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    operator delete(v10);
  }
  sub_B7FD1C(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_B7FAF0(uint64_t a1, uint64_t a2, int a3)
{
  if ((a3 - 3) >= 2)
  {
    if (a3 == 2) {
      LOBYTE(v4) = 2;
    }
    else {
      LOBYTE(v4) = a3 == 1;
    }
    return v4;
  }
  unsigned int v7 = *(_DWORD *)(*(void *)a2 + 144);
  BOOL v8 = (int *)sub_A11094((void *)(*(void *)(a1 + 24) + 4136), *(void *)(*(void *)a2 + 124));
  unint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  unsigned int v10 = *v9;
  if (v10 < 5)
  {
    uint64_t v11 = 0;
    goto LABEL_11;
  }
  if (!v9[2])
  {
    uint64_t v11 = 0;
    if (v10 >= 9) {
      goto LABEL_25;
    }
LABEL_11:
    uint64_t v12 = 0;
    goto LABEL_12;
  }
  uint64_t v11 = (char *)v8 + v9[2] + *(unsigned int *)((char *)v8 + v9[2]);
  if (v10 < 9) {
    goto LABEL_11;
  }
LABEL_25:
  uint64_t v22 = v9[4];
  if (!v22) {
    goto LABEL_11;
  }
  uint64_t v12 = (unsigned int *)((char *)v8 + v22 + *(unsigned int *)((char *)v8 + v22));
LABEL_12:
  uint64_t v13 = sub_A10764(v12, v7);
  long long v14 = (int *)sub_8DFD1C(*(void *)(*(void *)(a1 + 24) + 4056) + 24, *(void *)&v11[8 * *(unsigned __int8 *)(v13 + 14) + 4], 0, "line");
  long long v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 7u && (unsigned __int16 v16 = v15[3]) != 0) {
    unint64_t v17 = *(unsigned int *)((char *)v14 + v16 + 4) | ((unint64_t)*(unsigned int *)((char *)v14 + v16) << 32);
  }
  else {
    unint64_t v17 = 0xFFFFFFFFLL;
  }
  int64x2_t v18 = (int *)sub_8EF9B8(*(void *)(*(void *)(a1 + 24) + 4144) + 24, __ROR8__(v17, 32), 0, "system");
  long long v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 < 0x25u) {
    goto LABEL_20;
  }
  uint64_t v20 = v19[18];
  if (!v20) {
    goto LABEL_20;
  }
  int v4 = *((unsigned __int8 *)v18 + v20);
  if (v4 == 1) {
    return v4;
  }
  if (v4) {
    return 0;
  }
LABEL_20:
  if (a3 == 3) {
    return 2;
  }
  else {
    return 3;
  }
}

uint64_t sub_B7FCA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    int v4 = *(void **)(a1 + 80);
    if (v3 != v2)
    {
      do
      {
        long long v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(void *)(v3 - 24) = v5;
          operator delete(v5);
        }
        v3 -= 112;
      }
      while (v3 != v2);
      int v4 = *(void **)(a1 + 80);
    }
    *(void *)(a1 + 88) = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_B7FD1C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t sub_B7FDAC(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5 = *(_DWORD *)(*(void *)a2 + 144);
  unint64_t v6 = (int *)sub_A11094((void *)(*(void *)(a1 + 24) + 4136), *(void *)(*(void *)a2 + 124));
  unsigned int v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 9u && (uint64_t v8 = v7[4]) != 0) {
    unint64_t v9 = (unsigned int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
  }
  else {
    unint64_t v9 = 0;
  }
  unsigned int v10 = (unint64_t *)sub_A10764(v9, v5);
  uint64_t v11 = (int *)sub_498D5C(*(void *)(*(void *)(a1 + 24) + 4120) + 24, *v10, 0, "stop");
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 0xDu && (unsigned __int16 v13 = v12[6]) != 0) {
    unint64_t v14 = *(unsigned int *)((char *)v11 + v13 + 4) | ((unint64_t)*(unsigned int *)((char *)v11 + v13) << 32);
  }
  else {
    unint64_t v14 = 0xFFFFFFFFLL;
  }
  if (HIDWORD(v14)) {
    int v15 = 0;
  }
  else {
    int v15 = 3;
  }
  if (v14 == -1) {
    unsigned int v16 = 3;
  }
  else {
    unsigned int v16 = v15;
  }
  if (v14 == -1) {
    unsigned int v17 = 2;
  }
  else {
    unsigned int v17 = 2 * (HIDWORD(v14) == 0);
  }
  if (a3) {
    unsigned int v17 = 0;
  }
  if (a3 == 1) {
    return v16;
  }
  else {
    return v17;
  }
}

char *sub_B7FEC0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >= *(void *)(a1 + 16))
  {
    unsigned __int16 v13 = sub_B84ED8((void **)a1, a2);
  }
  else
  {
    *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v6 = *(_OWORD *)(a2 + 32);
    long long v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v4 + 64) = v7;
    *(void *)(v4 + 80) = 0;
    *(_OWORD *)(v4 + 16) = v5;
    *(_OWORD *)(v4 + 32) = v6;
    *(void *)(v4 + 88) = 0;
    *(void *)(v4 + 96) = 0;
    unint64_t v9 = *(unsigned char **)(a2 + 80);
    uint64_t v8 = *(unsigned char **)(a2 + 88);
    int64_t v10 = v8 - v9;
    if (v8 != v9)
    {
      if (v10 < 0) {
        sub_2E00();
      }
      uint64_t v11 = (char *)operator new(v8 - v9);
      *(void *)(v4 + 80) = v11;
      *(void *)(v4 + 88) = v11;
      uint64_t v12 = &v11[16 * (v10 >> 4)];
      *(void *)(v4 + 96) = v12;
      memcpy(v11, v9, v10);
      *(void *)(v4 + 88) = v12;
    }
    *(unsigned char *)(v4 + 104) = *(unsigned char *)(a2 + 104);
    unsigned __int16 v13 = (char *)(v4 + 112);
    *(void *)(a1 + 8) = v4 + 112;
  }
  *(void *)(a1 + 8) = v13;
  return v13 - 112;
}

void sub_B7FF90(_Unwind_Exception *exception_object)
{
  long long v5 = *v2;
  if (*v2)
  {
    *(void *)(v3 + 88) = v5;
    operator delete(v5);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

uint64_t sub_B7FFB0(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v5 = *a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 112;
  uint64_t v7 = (uint64_t)*a1 + 112 * v6;
  if (a5 < 1) {
    return v7;
  }
  int64_t v10 = a1;
  uint64_t v11 = a1[2];
  unint64_t v12 = (unint64_t)a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v11[-v12] >> 4) >= a5)
  {
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - v7) >> 4) >= a5)
    {
      uint64_t v18 = a3 + 112 * a5;
    }
    else
    {
      uint64_t v18 = a3 + 16 * ((uint64_t)(v12 - v7) >> 4);
      if (v18 == a4)
      {
        a1[1] = (void *)v12;
        if ((uint64_t)(v12 - v7) < 1) {
          return v7;
        }
      }
      else
      {
        uint64_t v59 = (a2 - (uint64_t)*a1) / 112;
        uint64_t v19 = 0;
        do
        {
          uint64_t v20 = v12 + v19;
          uint64_t v21 = v18 + v19;
          *(_OWORD *)uint64_t v20 = *(_OWORD *)(v18 + v19);
          long long v22 = *(_OWORD *)(v18 + v19 + 16);
          long long v23 = *(_OWORD *)(v18 + v19 + 32);
          long long v24 = *(_OWORD *)(v18 + v19 + 64);
          *(_OWORD *)(v20 + 48) = *(_OWORD *)(v18 + v19 + 48);
          *(_OWORD *)(v20 + 64) = v24;
          *(_OWORD *)(v20 + 16) = v22;
          *(_OWORD *)(v20 + 32) = v23;
          sub_B8065C((void *)(v12 + v19 + 80), (uint64_t *)(v18 + v19 + 80));
          *(unsigned char *)(v20 + 104) = *(unsigned char *)(v18 + v19 + 104);
          v19 += 112;
        }
        while (v21 + 112 != a4);
        long long v25 = (void *)(v12 + v19);
        uint64_t v6 = v59;
        int64_t v10 = a1;
        a1[1] = v25;
        if ((uint64_t)(v12 - v7) < 1) {
          return v7;
        }
      }
    }
    sub_B80444((uint64_t)v10, v7, v12, v7 + 112 * a5);
    if (v18 != a3)
    {
      uint64_t v26 = (uint64_t)&v5[112 * v6 + 80];
      uint64_t v27 = a3 + 88;
      do
      {
        uint64_t v28 = v27 - 88;
        *(_OWORD *)(v26 - 80) = *(_OWORD *)(v27 - 88);
        long long v29 = *(_OWORD *)(v27 - 72);
        long long v30 = *(_OWORD *)(v27 - 56);
        long long v31 = *(_OWORD *)(v27 - 24);
        *(_OWORD *)(v26 - 32) = *(_OWORD *)(v27 - 40);
        *(_OWORD *)(v26 - 16) = v31;
        *(_OWORD *)(v26 - 64) = v29;
        *(_OWORD *)(v26 - 48) = v30;
        if (v26 - 80 != v27 - 88) {
          sub_B808C0((uint64_t *)v26, *(void *)(v27 - 8), *(void *)v27, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)v27 - *(void *)(v27 - 8)) >> 4));
        }
        *(unsigned char *)(v26 + 24) = *(unsigned char *)(v27 + 16);
        v26 += 112;
        v27 += 112;
      }
      while (v28 + 112 != v18);
    }
    return v7;
  }
  unint64_t v13 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (void)v5) >> 4);
  if (v13 > 0x249249249249249) {
    sub_2E00();
  }
  unint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((v11 - v5) >> 4);
  if (2 * v14 > v13) {
    unint64_t v13 = 2 * v14;
  }
  if (v14 >= 0x124924924924924) {
    unint64_t v15 = 0x249249249249249;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 > 0x249249249249249) {
      sub_188D718();
    }
    unsigned int v16 = (char *)operator new(112 * v15);
  }
  else
  {
    unsigned int v16 = 0;
  }
  uint64_t v32 = 0;
  uint64_t v33 = &v16[112 * v6];
  unint64_t v61 = &v16[112 * v15];
  uint64_t v34 = 112 * a5;
  uint64_t v35 = &v33[v34];
  do
  {
    long long v36 = &v33[v32];
    *(_OWORD *)long long v36 = *(_OWORD *)(a3 + v32);
    long long v37 = *(_OWORD *)(a3 + v32 + 16);
    long long v38 = *(_OWORD *)(a3 + v32 + 32);
    long long v39 = *(_OWORD *)(a3 + v32 + 64);
    *((_OWORD *)v36 + 3) = *(_OWORD *)(a3 + v32 + 48);
    *((_OWORD *)v36 + 4) = v39;
    *((_OWORD *)v36 + 1) = v37;
    *((_OWORD *)v36 + 2) = v38;
    sub_B8065C(&v33[v32 + 80], (uint64_t *)(a3 + v32 + 80));
    v36[104] = *(unsigned char *)(a3 + v32 + 104);
    v32 += 112;
  }
  while (v34 != v32);
  long long v40 = v33;
  uint64_t v41 = *v10;
  unsigned int v42 = v33;
  if (*v10 != (void *)v7)
  {
    uint64_t v43 = 0;
    do
    {
      int v44 = &v33[v43];
      uint64_t v45 = v7 + v43;
      *((_OWORD *)v44 - 7) = *(_OWORD *)(v7 + v43 - 112);
      long long v46 = *(_OWORD *)(v7 + v43 - 96);
      long long v47 = *(_OWORD *)(v7 + v43 - 80);
      long long v48 = *(_OWORD *)(v7 + v43 - 48);
      *((_OWORD *)v44 - 4) = *(_OWORD *)(v7 + v43 - 64);
      *((_OWORD *)v44 - 3) = v48;
      *((_OWORD *)v44 - 6) = v46;
      *((_OWORD *)v44 - 5) = v47;
      *((void *)v44 - 3) = 0;
      *((void *)v44 - 2) = 0;
      *((void *)v44 - 4) = 0;
      *((_OWORD *)v44 - 2) = *(_OWORD *)(v7 + v43 - 32);
      *((void *)v44 - 2) = *(void *)(v7 + v43 - 16);
      *(void *)(v45 - 32) = 0;
      *(void *)(v45 - 24) = 0;
      *(void *)(v45 - 16) = 0;
      *(v44 - 8) = *(unsigned char *)(v7 + v43 - 8);
      v43 -= 112;
    }
    while ((void *)(v7 + v43) != v41);
    unsigned int v42 = &v33[v43];
  }
  uint64_t v49 = v10[1];
  if (v49 != (void *)v7)
  {
    do
    {
      *(_OWORD *)uint64_t v35 = *(_OWORD *)v7;
      long long v50 = *(_OWORD *)(v7 + 16);
      long long v51 = *(_OWORD *)(v7 + 32);
      long long v52 = *(_OWORD *)(v7 + 64);
      *((_OWORD *)v35 + 3) = *(_OWORD *)(v7 + 48);
      *((_OWORD *)v35 + 4) = v52;
      *((_OWORD *)v35 + 1) = v50;
      *((_OWORD *)v35 + 2) = v51;
      *((_OWORD *)v35 + 5) = *(_OWORD *)(v7 + 80);
      *((void *)v35 + 12) = *(void *)(v7 + 96);
      *(void *)(v7 + 80) = 0;
      *(void *)(v7 + 88) = 0;
      *(void *)(v7 + 96) = 0;
      v35[104] = *(unsigned char *)(v7 + 104);
      v35 += 112;
      v7 += 112;
    }
    while ((void *)v7 != v49);
    uint64_t v7 = (uint64_t)v10[1];
  }
  uint64_t v53 = *v10;
  unint64_t *v10 = v42;
  v10[1] = v35;
  v10[2] = v61;
  while ((void *)v7 != v53)
  {
    uint64_t v55 = *(void *)(v7 - 32);
    if (v55)
    {
      uint64_t v56 = *(void *)(v7 - 24);
      uint64_t v54 = *(void **)(v7 - 32);
      if (v56 != v55)
      {
        do
        {
          unint64_t v57 = *(void **)(v56 - 32);
          if (v57)
          {
            *(void *)(v56 - 24) = v57;
            operator delete(v57);
          }
          v56 -= 112;
        }
        while (v56 != v55);
        uint64_t v54 = *(void **)(v7 - 32);
      }
      *(void *)(v7 - 24) = v55;
      operator delete(v54);
    }
    v7 -= 112;
  }
  if (v53) {
    operator delete(v53);
  }
  return (uint64_t)v40;
}

void sub_B80408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13) {
    sub_20AE37C(v12 + v13, v12);
  }
  *(void *)(a12 + 8) = v12;
  _Unwind_Resume(exception_object);
}

void sub_B8042C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_B80590((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_B80444(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 + v5 - a4;
  uint64_t v7 = v5;
  if (v6 < a3)
  {
    unint64_t v8 = a2 + v5 - a4;
    uint64_t v7 = *(void *)(a1 + 8);
    do
    {
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      long long v9 = *(_OWORD *)(v8 + 16);
      long long v10 = *(_OWORD *)(v8 + 32);
      long long v11 = *(_OWORD *)(v8 + 64);
      *(_OWORD *)(v7 + 48) = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v7 + 64) = v11;
      *(_OWORD *)(v7 + 16) = v9;
      *(_OWORD *)(v7 + 32) = v10;
      *(void *)(v7 + 88) = 0;
      *(void *)(v7 + 96) = 0;
      *(void *)(v7 + 80) = 0;
      __n128 result = *(__n128 *)(v8 + 80);
      *(__n128 *)(v7 + 80) = result;
      *(void *)(v7 + 96) = *(void *)(v8 + 96);
      *(void *)(v8 + 80) = 0;
      *(void *)(v8 + 88) = 0;
      *(void *)(v8 + 96) = 0;
      *(unsigned char *)(v7 + 104) = *(unsigned char *)(v8 + 104);
      v7 += 112;
      v8 += 112;
    }
    while (v8 < a3);
  }
  *(void *)(a1 + 8) = v7;
  if (v5 != a4)
  {
    do
    {
      unint64_t v14 = (void **)(v5 - 32);
      unint64_t v15 = *(char **)(v5 - 32);
      *(_OWORD *)(v5 - 112) = *(_OWORD *)(v6 - 112);
      long long v16 = *(_OWORD *)(v6 - 96);
      long long v17 = *(_OWORD *)(v6 - 80);
      long long v18 = *(_OWORD *)(v6 - 48);
      *(_OWORD *)(v5 - 64) = *(_OWORD *)(v6 - 64);
      *(_OWORD *)(v5 - 48) = v18;
      *(_OWORD *)(v5 - 96) = v16;
      *(_OWORD *)(v5 - 80) = v17;
      if (v15)
      {
        uint64_t v19 = *(char **)(v5 - 24);
        uint64_t v13 = v15;
        if (v19 != v15)
        {
          do
          {
            uint64_t v20 = (void *)*((void *)v19 - 4);
            if (v20)
            {
              *((void *)v19 - 3) = v20;
              operator delete(v20);
            }
            v19 -= 112;
          }
          while (v19 != v15);
          uint64_t v13 = *v14;
        }
        *(void *)(v5 - 24) = v15;
        operator delete(v13);
        *unint64_t v14 = 0;
        *(void *)(v5 - 24) = 0;
        *(void *)(v5 - 16) = 0;
      }
      __n128 result = *(__n128 *)(v6 - 32);
      *(__n128 *)(v5 - 32) = result;
      *(void *)(v5 - 16) = *(void *)(v6 - 16);
      *(void *)(v6 - 32) = 0;
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(unsigned char *)(v5 - 8) = *(unsigned char *)(v6 - 8);
      v5 -= 112;
      v6 -= 112;
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t sub_B80590(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      while (1)
      {
        uint64_t v4 = i - 112;
        *(void *)(a1 + 16) = i - 112;
        uint64_t v5 = *(void *)(i - 32);
        if (v5) {
          break;
        }
        i -= 112;
        if (v4 == v2) {
          goto LABEL_12;
        }
      }
      uint64_t v6 = *(void *)(i - 24);
      uint64_t v7 = *(void **)(i - 32);
      if (v6 != v5) {
        break;
      }
      *(void *)(i - 24) = v5;
      operator delete(v7);
      uint64_t i = *(void *)(a1 + 16);
      if (i == v2) {
        goto LABEL_12;
      }
    }
    do
    {
      unint64_t v8 = *(void **)(v6 - 32);
      if (v8)
      {
        *(void *)(v6 - 24) = v8;
        operator delete(v8);
      }
      v6 -= 112;
    }
    while (v6 != v5);
    long long v9 = *(void **)(i - 32);
    *(void *)(i - 24) = v5;
    operator delete(v9);
  }
LABEL_12:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_B8065C(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 4);
    if (v7 >= 0x24924924924924ALL) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[112 * v7];
    a1[1] = sub_B80740(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_B80714(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_20AE3F4((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B80740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = a4 + 80;
    do
    {
      *(_OWORD *)(v6 - 80) = *(_OWORD *)v5;
      long long v8 = *(_OWORD *)(v5 + 16);
      long long v9 = *(_OWORD *)(v5 + 32);
      long long v10 = *(_OWORD *)(v5 + 64);
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v5 + 48);
      *(_OWORD *)(v6 - 16) = v10;
      *(_OWORD *)(v6 - 64) = v8;
      *(_OWORD *)(v6 - 48) = v9;
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      *(void *)uint64_t v6 = 0;
      uint64_t v12 = *(unsigned char **)(v5 + 80);
      long long v11 = *(unsigned char **)(v5 + 88);
      int64_t v13 = v11 - v12;
      if (v11 != v12)
      {
        if (v13 < 0) {
          sub_2E00();
        }
        unint64_t v14 = (char *)operator new(v11 - v12);
        *(void *)uint64_t v6 = v14;
        *(void *)(v6 + 8) = v14;
        unint64_t v7 = &v14[16 * (v13 >> 4)];
        *(void *)(v6 + 16) = v7;
        memcpy(v14, v12, v13);
        *(void *)(v6 + 8) = v7;
      }
      *(unsigned char *)(v6 + 24) = *(unsigned char *)(v5 + 104);
      v6 += 112;
      v5 += 112;
    }
    while (v5 != a3);
    return v6 - 80;
  }
  return a4;
}

void sub_B80834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_B8085C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_B8085C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 32);
      if (v5)
      {
        *(void *)(v3 - 24) = v5;
        operator delete(v5);
      }
      v3 -= 112;
    }
  }
  return a1;
}

void sub_B808C0(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *a1) >> 4) < a4)
  {
    if (v10)
    {
      uint64_t v11 = a1[1];
      uint64_t v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          int64_t v13 = *(void **)(v11 - 32);
          if (v13)
          {
            *(void *)(v11 - 24) = v13;
            operator delete(v13);
          }
          v11 -= 112;
        }
        while (v11 != v10);
        uint64_t v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x249249249249249) {
      goto LABEL_38;
    }
    unint64_t v28 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 4);
    uint64_t v29 = 2 * v28;
    if (2 * v28 <= a4) {
      uint64_t v29 = a4;
    }
    unint64_t v30 = v28 >= 0x124924924924924 ? 0x249249249249249 : v29;
    if (v30 > 0x249249249249249) {
LABEL_38:
    }
      sub_2E00();
    uint64_t v31 = 112 * v30;
    uint64_t v32 = operator new(112 * v30);
    *a1 = (uint64_t)v32;
    a1[1] = (uint64_t)v32;
    a1[2] = (uint64_t)v32 + v31;
    uint64_t v33 = sub_B80740(v9, a2, a3, (uint64_t)v32);
LABEL_31:
    a1[1] = v33;
    return;
  }
  uint64_t v14 = a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v14 - v10) >> 4) < a4)
  {
    uint64_t v15 = a2 + 16 * ((v14 - v10) >> 4);
    if (v14 != v10)
    {
      uint64_t v16 = v10 + 80;
      uint64_t v17 = a2 + 88;
      do
      {
        uint64_t v18 = v17 - 88;
        *(_OWORD *)(v16 - 80) = *(_OWORD *)(v17 - 88);
        long long v19 = *(_OWORD *)(v17 - 72);
        long long v20 = *(_OWORD *)(v17 - 56);
        long long v21 = *(_OWORD *)(v17 - 24);
        *(_OWORD *)(v16 - 32) = *(_OWORD *)(v17 - 40);
        *(_OWORD *)(v16 - 16) = v21;
        *(_OWORD *)(v16 - 64) = v19;
        *(_OWORD *)(v16 - 48) = v20;
        if (v16 - 80 != v17 - 88) {
          sub_457964((void *)v16, *(char **)(v17 - 8), *(char **)v17, (uint64_t)(*(void *)v17 - *(void *)(v17 - 8)) >> 4);
        }
        *(unsigned char *)(v16 + 24) = *(unsigned char *)(v17 + 16);
        v16 += 112;
        v17 += 112;
      }
      while (v18 + 112 != v15);
      uint64_t v10 = a1[1];
    }
    uint64_t v33 = sub_B80740(v9, v15, a3, v10);
    goto LABEL_31;
  }
  if (a2 != a3)
  {
    uint64_t v22 = v10 + 80;
    uint64_t v23 = a2 + 88;
    do
    {
      uint64_t v24 = v23 - 88;
      *(_OWORD *)(v22 - 80) = *(_OWORD *)(v23 - 88);
      long long v25 = *(_OWORD *)(v23 - 72);
      long long v26 = *(_OWORD *)(v23 - 56);
      long long v27 = *(_OWORD *)(v23 - 24);
      *(_OWORD *)(v22 - 32) = *(_OWORD *)(v23 - 40);
      *(_OWORD *)(v22 - 16) = v27;
      *(_OWORD *)(v22 - 64) = v25;
      *(_OWORD *)(v22 - 48) = v26;
      if (v22 - 80 != v23 - 88) {
        sub_457964((void *)v22, *(char **)(v23 - 8), *(char **)v23, (uint64_t)(*(void *)v23 - *(void *)(v23 - 8)) >> 4);
      }
      *(unsigned char *)(v22 + 24) = *(unsigned char *)(v23 + 16);
      v10 += 112;
      v22 += 112;
      v23 += 112;
    }
    while (v24 + 112 != a3);
    uint64_t v14 = a1[1];
  }
  while (v14 != v10)
  {
    uint64_t v34 = *(void **)(v14 - 32);
    if (v34)
    {
      *(void *)(v14 - 24) = v34;
      operator delete(v34);
    }
    v14 -= 112;
  }
  a1[1] = v10;
}

void sub_B80B94(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_B80B9C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

__n128 sub_B80BA4(char *a1, char *a2, void *a3, unint64_t a4, char *a5, uint64_t a6, __n128 result)
{
  if (a4 >= 2)
  {
    uint64_t v9 = a1;
    if (a4 == 2)
    {
      uint64_t v10 = a3[3];
      if (v10)
      {
        uint64_t v11 = a2 - 8;
        if ((*(unsigned int (**)(uint64_t, char *, void *))(*(void *)v10 + 48))(v10, a2 - 8, v9))
        {
          uint64_t v12 = *v9;
          void *v9 = *(void *)v11;
          *(void *)uint64_t v11 = v12;
        }
        return result;
      }
      goto LABEL_53;
    }
    if ((uint64_t)a4 <= 128)
    {
      if (a1 == a2) {
        return result;
      }
      uint64_t v14 = a1 + 8;
      if (a1 + 8 == a2) {
        return result;
      }
      uint64_t v15 = 0;
      uint64_t v16 = a1;
      while (1)
      {
        uint64_t v18 = a3[3];
        if (!v18) {
          break;
        }
        long long v19 = v14;
        if ((*(unsigned int (**)(uint64_t, char *, char *))(*(void *)v18 + 48))(v18, v14, v16))
        {
          uint64_t v58 = *(void *)v19;
          uint64_t v20 = v15;
          do
          {
            *(void *)((char *)v9 + v20 + 8) = *(void *)((char *)v9 + v20);
            if (!v20)
            {
              uint64_t v17 = v9;
              goto LABEL_11;
            }
            uint64_t v21 = a3[3];
            if (!v21) {
              goto LABEL_53;
            }
            v20 -= 8;
          }
          while (((*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(void *)v21 + 48))(v21, &v58, (char *)v9 + v20) & 1) != 0);
          uint64_t v17 = (void *)((char *)v9 + v20 + 8);
LABEL_11:
          *uint64_t v17 = v58;
        }
        uint64_t v14 = v19 + 8;
        v15 += 8;
        uint64_t v16 = v19;
        if (v19 + 8 == a2) {
          return result;
        }
      }
LABEL_53:
      sub_29F82C();
    }
    unint64_t v24 = a4 >> 1;
    long long v25 = &a1[8 * (a4 >> 1)];
    unint64_t v26 = a4 >> 1;
    if ((uint64_t)a4 <= a6)
    {
      sub_B80FA4(a1, v25, (uint64_t)a3, v26, a5);
      long long v27 = &a5[8 * v24];
      __n128 result = sub_B80FA4((char *)&v9[a4 >> 1], a2, (uint64_t)a3, a4 - (a4 >> 1), v27);
      unint64_t v28 = v27;
      uint64_t v29 = a5;
      unint64_t v30 = v9;
      uint64_t v31 = &a5[8 * a4];
      do
      {
        if (v28 == v31)
        {
          if (v29 == v27) {
            return result;
          }
          unint64_t v48 = &a5[8 * v24] - v29 - 8;
          if (v48 >= 0x38 && (unint64_t)((char *)v9 - v29) >= 0x20)
          {
            uint64_t v52 = 0;
            uint64_t v53 = (v48 >> 3) + 1;
            uint64_t v54 = v53 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v49 = &v29[v54 * 8];
            long long v50 = &v30[v54];
            uint64_t v55 = v53 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              uint64_t v56 = &v30[v52];
              __n128 result = *(__n128 *)&v29[v52 * 8];
              long long v57 = *(_OWORD *)&v29[v52 * 8 + 16];
              *(__n128 *)uint64_t v56 = result;
              *((_OWORD *)v56 + 1) = v57;
              v52 += 4;
              v55 -= 4;
            }
            while (v55);
            if (v53 == (v53 & 0x3FFFFFFFFFFFFFFCLL)) {
              return result;
            }
          }
          else
          {
            uint64_t v49 = v29;
            long long v50 = v30;
          }
          do
          {
            uint64_t v51 = *(void *)v49;
            v49 += 8;
            *v50++ = v51;
          }
          while (v49 != v27);
          return result;
        }
        uint64_t v32 = a3[3];
        if (!v32) {
          goto LABEL_53;
        }
        uint64_t v33 = v28;
        int v34 = (*(uint64_t (**)(uint64_t, char *, char *, __n128))(*(void *)v32 + 48))(v32, v28, v29, result);
        if (v34) {
          uint64_t v35 = v33;
        }
        else {
          uint64_t v35 = v29;
        }
        v29 += 8 * (v34 ^ 1u);
        unint64_t v28 = &v33[8 * v34];
        *v30++ = *(void *)v35;
        ++v9;
      }
      while (v29 != v27);
      if (v28 != v31)
      {
        uint64_t v36 = -8;
        if (!v34) {
          uint64_t v36 = 0;
        }
        unint64_t v37 = &a5[8 * a4] - v33 + v36 - 8;
        if (v37 < 0x68) {
          goto LABEL_56;
        }
        uint64_t v38 = 8;
        if (!v34) {
          uint64_t v38 = 0;
        }
        if ((unint64_t)((char *)v9 - v33 - v38) < 0x20) {
          goto LABEL_56;
        }
        uint64_t v39 = 0;
        uint64_t v40 = (v37 >> 3) + 1;
        uint64_t v41 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        unsigned int v42 = &v28[v41 * 8];
        uint64_t v43 = &v30[v41];
        uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v45 = &v30[v39];
          __n128 result = *(__n128 *)&v28[v39 * 8];
          long long v46 = *(_OWORD *)&v28[v39 * 8 + 16];
          *(__n128 *)uint64_t v45 = result;
          *((_OWORD *)v45 + 1) = v46;
          v39 += 4;
          v44 -= 4;
        }
        while (v44);
        unint64_t v28 = v42;
        unint64_t v30 = v43;
        if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_56:
          do
          {
            uint64_t v47 = *(void *)v28;
            v28 += 8;
            *v30++ = v47;
          }
          while (v28 != v31);
        }
      }
    }
    else
    {
      sub_B80BA4(a1, v25, a3, v26, a5, a6);
      sub_B80BA4(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
      sub_B81340((uint64_t)v9, (char *)&v9[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
    }
  }
  return result;
}

__n128 sub_B80FA4(char *a1, char *a2, uint64_t a3, unint64_t a4, void *a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    unint64_t v7 = a1;
    if (a4 == 1)
    {
LABEL_10:
      *uint64_t v5 = *(void *)v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v10 = *(void *)(a3 + 24);
      if (v10)
      {
        uint64_t v11 = a2 - 8;
        int v12 = (*(uint64_t (**)(uint64_t, void *, char *))(*(void *)v10 + 48))(v10, (void *)a2 - 1, v7);
        if (v12) {
          uint64_t v14 = v11;
        }
        else {
          uint64_t v14 = v7;
        }
        *v5++ = *(void *)v14;
        if (!v12) {
          unint64_t v7 = v11;
        }
        goto LABEL_10;
      }
LABEL_55:
      sub_29F82C();
    }
    if ((uint64_t)a4 <= 8)
    {
      if (a1 == a2) {
        return result;
      }
      uint64_t v15 = a1 + 8;
      *a5 = *(void *)a1;
      if (a1 + 8 == a2) {
        return result;
      }
      uint64_t v16 = 0;
      uint64_t v17 = a5;
      while (1)
      {
        uint64_t v20 = *(void *)(a3 + 24);
        if (!v20) {
          goto LABEL_55;
        }
        uint64_t v21 = v17++;
        int v22 = (*(uint64_t (**)(uint64_t, char *, void *))(*(void *)v20 + 48))(v20, v15, v21);
        uint64_t v18 = v17;
        if (v22)
        {
          v21[1] = *v21;
          uint64_t v18 = v5;
          if (v21 != v5)
          {
            uint64_t v23 = v16;
            do
            {
              uint64_t v24 = *(void *)(a3 + 24);
              if (!v24) {
                goto LABEL_55;
              }
              if (!(*(unsigned int (**)(uint64_t, char *, uint64_t))(*(void *)v24 + 48))(v24, v15, (uint64_t)v5 + v23 - 8))
              {
                uint64_t v18 = (void *)((char *)v5 + v23);
                goto LABEL_17;
              }
              *(void *)((char *)v5 + v23) = *(void *)((char *)v5 + v23 - 8);
              v23 -= 8;
            }
            while (v23);
            uint64_t v18 = v5;
          }
        }
LABEL_17:
        uint64_t v19 = *(void *)v15;
        v15 += 8;
        *uint64_t v18 = v19;
        v16 += 8;
        if (v15 == a2) {
          return result;
        }
      }
    }
    unint64_t v25 = a4 >> 1;
    uint64_t v26 = 8 * (a4 >> 1);
    long long v27 = &a1[v26];
    sub_B80BA4(a1, &a1[v26], a3, a4 >> 1, a5, a4 >> 1);
    sub_B80BA4(&v7[v26], a2, a3, a4 - v25, &v5[(unint64_t)v26 / 8], a4 - v25);
    unint64_t v28 = (char *)v5;
    uint64_t v29 = v7;
    unint64_t v30 = &v7[v26];
    do
    {
      if (v30 == a2)
      {
        if (v29 == v27) {
          return result;
        }
        unint64_t v47 = &v7[8 * v25] - v29 - 8;
        if (v47 >= 0x38 && (unint64_t)(v28 - v29) >= 0x20)
        {
          uint64_t v51 = 0;
          uint64_t v52 = (v47 >> 3) + 1;
          uint64_t v53 = v52 & 0x3FFFFFFFFFFFFFFCLL;
          unint64_t v48 = &v5[v53];
          uint64_t v49 = &v29[v53 * 8];
          uint64_t v54 = v52 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v55 = &v5[v51];
            __n128 result = *(__n128 *)&v29[v51 * 8];
            long long v56 = *(_OWORD *)&v29[v51 * 8 + 16];
            *(__n128 *)uint64_t v55 = result;
            *((_OWORD *)v55 + 1) = v56;
            v51 += 4;
            v54 -= 4;
          }
          while (v54);
          if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL)) {
            return result;
          }
        }
        else
        {
          unint64_t v48 = v5;
          uint64_t v49 = v29;
        }
        do
        {
          uint64_t v50 = *(void *)v49;
          v49 += 8;
          *v48++ = v50;
        }
        while (v49 != v27);
        return result;
      }
      uint64_t v31 = *(void *)(a3 + 24);
      if (!v31) {
        goto LABEL_55;
      }
      uint64_t v32 = v30;
      int v33 = (*(uint64_t (**)(uint64_t, char *, char *))(*(void *)v31 + 48))(v31, v30, v29);
      if (v33) {
        int v34 = v32;
      }
      else {
        int v34 = v29;
      }
      unint64_t v30 = &v32[8 * v33];
      v29 += 8 * (v33 ^ 1u);
      *v5++ = *(void *)v34;
      v28 += 8;
    }
    while (v29 != v27);
    if (v30 != a2)
    {
      uint64_t v35 = -8;
      if (!v33) {
        uint64_t v35 = 0;
      }
      unint64_t v36 = a2 - v32 + v35 - 8;
      if (v36 < 0x68) {
        goto LABEL_58;
      }
      uint64_t v37 = 8;
      if (!v33) {
        uint64_t v37 = 0;
      }
      if ((unint64_t)(v28 - &v32[v37]) < 0x20) {
        goto LABEL_58;
      }
      uint64_t v38 = 0;
      uint64_t v39 = (v36 >> 3) + 1;
      uint64_t v40 = v39 & 0x3FFFFFFFFFFFFFFCLL;
      uint64_t v41 = &v5[v40];
      unsigned int v42 = &v30[v40 * 8];
      uint64_t v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v44 = &v5[v38];
        __n128 result = *(__n128 *)&v30[v38 * 8];
        long long v45 = *(_OWORD *)&v30[v38 * 8 + 16];
        *(__n128 *)uint64_t v44 = result;
        *((_OWORD *)v44 + 1) = v45;
        v38 += 4;
        v43 -= 4;
      }
      while (v43);
      uint64_t v5 = v41;
      unint64_t v30 = v42;
      if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_58:
        do
        {
          uint64_t v46 = *(void *)v30;
          v30 += 8;
          *v5++ = v46;
        }
        while (v30 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_B81340(uint64_t result, char *a2, char *a3, void *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v56 = a6;
  if (a6)
  {
    uint64_t v11 = (char *)result;
    while (1)
    {
      if (v56 <= a8 || a5 <= a8) {
        return (uint64_t)sub_B818E0(v11, a2, a3, (uint64_t)a4, a5, v56, a7);
      }
      if (!a5) {
        return result;
      }
      uint64_t v12 = 0;
      uint64_t v13 = -a5;
      while (1)
      {
        uint64_t v14 = a4[3];
        if (!v14) {
          sub_29F82C();
        }
        __n128 result = (*(uint64_t (**)(uint64_t, char *, char *))(*(void *)v14 + 48))(v14, a2, &v11[v12]);
        if (result) {
          break;
        }
        v12 += 8;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      if (-v13 >= v56)
      {
        if (v13 == -1)
        {
          uint64_t v50 = *(void *)&v11[v12];
          *(void *)&v11[v12] = *(void *)a2;
          *(void *)a2 = v50;
          return result;
        }
        if (v13 <= 0) {
          uint64_t v28 = -v13;
        }
        else {
          uint64_t v28 = 1 - v13;
        }
        uint64_t v29 = (void *)a4[3];
        if (v29)
        {
          if (v29 == a4)
          {
            uint64_t v58 = v57;
            (*(void (**)(void *, void *))(*a4 + 24))(a4, v57);
          }
          else
          {
            uint64_t v58 = (void *)(*(uint64_t (**)(void *))(*v29 + 16))(v29);
          }
        }
        else
        {
          uint64_t v58 = 0;
        }
        uint64_t v21 = v28 >> 1;
        uint64_t v18 = &v11[8 * (v28 >> 1) + v12];
        uint64_t v17 = a2;
        if (a2 != a3)
        {
          uint64_t v52 = v28 >> 1;
          unint64_t v32 = (a3 - a2) >> 3;
          uint64_t v17 = a2;
          do
          {
            if (!v58) {
              sub_29F82C();
            }
            int v33 = &v17[8 * (v32 >> 1)];
            int v34 = (*(uint64_t (**)(void *, char *, char *))(*v58 + 48))(v58, v33, v18);
            if (v34) {
              v32 += ~(v32 >> 1);
            }
            else {
              v32 >>= 1;
            }
            if (v34) {
              uint64_t v17 = v33 + 8;
            }
          }
          while (v32);
          uint64_t v21 = v52;
        }
        if (v58 == v57)
        {
          (*(void (**)(void *))(v57[0] + 32))(v57);
          uint64_t v51 = (v17 - a2) >> 3;
          if (v18 != a2) {
            goto LABEL_24;
          }
        }
        else
        {
          if (v58) {
            (*(void (**)(void))(*v58 + 40))();
          }
          uint64_t v51 = (v17 - a2) >> 3;
          if (v18 != a2)
          {
LABEL_24:
            uint64_t v22 = v17 - a2;
            if (v17 == a2)
            {
              a2 = v18;
            }
            else
            {
              uint64_t v23 = v18 + 8;
              if (v18 + 8 == a2)
              {
                uint64_t v30 = v21;
                uint64_t v31 = *(void *)v18;
                memmove(v18, a2, v17 - a2);
                a2 = &v18[v22];
                *(void *)&v18[v22] = v31;
                uint64_t v21 = v30;
              }
              else
              {
                uint64_t v24 = a2 + 8;
                if (a2 + 8 == v17)
                {
                  uint64_t v36 = *((void *)v17 - 1);
                  a2 = v18 + 8;
                  if (v17 - 8 != v18) {
                    memmove(v18 + 8, v18, v17 - 8 - v18);
                  }
                  *(void *)uint64_t v18 = v36;
                }
                else
                {
                  uint64_t v25 = (a2 - v18) >> 3;
                  if (v25 == v22 >> 3)
                  {
                    do
                    {
                      uint64_t v26 = *((void *)v23 - 1);
                      *((void *)v23 - 1) = *((void *)v24 - 1);
                      *((void *)v24 - 1) = v26;
                      if (v23 == a2) {
                        break;
                      }
                      v23 += 8;
                      BOOL v27 = v24 == v17;
                      v24 += 8;
                    }
                    while (!v27);
                  }
                  else
                  {
                    uint64_t v37 = v22 >> 3;
                    uint64_t v38 = (a2 - v18) >> 3;
                    do
                    {
                      uint64_t v39 = v38;
                      uint64_t v38 = v37;
                      uint64_t v37 = v39 % v37;
                    }
                    while (v37);
                    if (v38)
                    {
                      uint64_t v40 = &v18[8 * v38];
                      do
                      {
                        uint64_t v42 = *((void *)v40 - 1);
                        v40 -= 8;
                        uint64_t v41 = v42;
                        uint64_t v43 = &v40[8 * v25];
                        uint64_t v44 = v40;
                        do
                        {
                          long long v45 = v43;
                          *(void *)uint64_t v44 = *(void *)v43;
                          uint64_t v46 = (v17 - v43) >> 3;
                          BOOL v47 = __OFSUB__(v25, v46);
                          uint64_t v49 = v25 - v46;
                          char v48 = (v49 < 0) ^ v47;
                          uint64_t v43 = &v18[8 * v49];
                          if (v48) {
                            uint64_t v43 = &v45[8 * v25];
                          }
                          uint64_t v44 = v45;
                        }
                        while (v43 != v40);
                        *(void *)long long v45 = v41;
                      }
                      while (v40 != v18);
                    }
                    a2 = &v18[8 * (v22 >> 3)];
                  }
                }
              }
            }
            goto LABEL_58;
          }
        }
      }
      else
      {
        if (v56 >= 0) {
          uint64_t v16 = v56;
        }
        else {
          uint64_t v16 = v56 + 1;
        }
        uint64_t v51 = v16 >> 1;
        uint64_t v17 = &a2[8 * (v16 >> 1)];
        uint64_t v18 = a2;
        if (a2 - v11 != v12)
        {
          unint64_t v19 = (a2 - v11 - v12) >> 3;
          uint64_t v18 = &v11[v12];
          do
          {
            uint64_t v20 = a4[3];
            if (!v20) {
              sub_29F82C();
            }
            if ((*(unsigned int (**)(uint64_t, char *, char *))(*(void *)v20 + 48))(v20, v17, &v18[8 * (v19 >> 1)]))
            {
              v19 >>= 1;
            }
            else
            {
              v18 += 8 * (v19 >> 1) + 8;
              v19 += ~(v19 >> 1);
            }
          }
          while (v19);
        }
        uint64_t v21 = (v18 - v11 - v12) >> 3;
        if (v18 != a2) {
          goto LABEL_24;
        }
      }
      a2 = v17;
LABEL_58:
      a5 = -v21 - v13;
      uint64_t v35 = v56 - v51;
      if (v21 + v51 >= v56 - (v21 + v51) - v13)
      {
        __n128 result = sub_B81340(a2, v17, a3, a4, -v21 - v13, v56 - v51, a7, a8);
        a3 = a2;
        a2 = v18;
        v11 += v12;
        a5 = v21;
        uint64_t v56 = v51;
        if (!v51) {
          return result;
        }
      }
      else
      {
        __n128 result = sub_B81340(&v11[v12], v18, a2, a4, v21, v51, a7, a8);
        uint64_t v11 = a2;
        a2 = v17;
        v56 -= v51;
        if (!v35) {
          return result;
        }
      }
    }
  }
  return result;
}

void sub_B818B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_B7F884((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B818C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_B7F884((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_B818E0(char *__dst, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *__src)
{
  unint64_t v7 = __src;
  uint64_t v9 = a3;
  uint64_t v10 = a2;
  uint64_t v11 = __dst;
  if (a5 <= a6)
  {
    if (__dst == a2) {
      return __dst;
    }
    unint64_t v21 = a2 - __dst - 8;
    if (v21 < 0x18)
    {
      uint64_t v22 = __src;
      uint64_t v23 = __dst;
    }
    else
    {
      uint64_t v22 = __src;
      uint64_t v23 = __dst;
      if ((unint64_t)(__src - __dst) >= 0x20)
      {
        uint64_t v24 = (v21 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v22 = &__src[v25];
        uint64_t v23 = &__dst[v25];
        uint64_t v26 = (long long *)(__dst + 16);
        BOOL v27 = __src + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *BOOL v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          if (v22 != __src)
          {
            while (v10 != v9)
            {
              uint64_t v40 = *(void *)(a4 + 24);
              if (!v40) {
LABEL_53:
              }
                sub_29F82C();
              long long __dst = (char *)(*(uint64_t (**)(uint64_t, char *, char *))(*(void *)v40 + 48))(v40, v10, v7);
              if (__dst) {
                uint64_t v41 = v10;
              }
              else {
                uint64_t v41 = v7;
              }
              v10 += 8 * __dst;
              v7 += 8 * (__dst ^ 1);
              *(void *)uint64_t v11 = *(void *)v41;
              v11 += 8;
              if (v7 == v22) {
                return __dst;
              }
            }
            return (char *)memmove(v11, v7, v22 - v7);
          }
          return __dst;
        }
      }
    }
    do
    {
      uint64_t v39 = *(void *)v23;
      v23 += 8;
      *(void *)uint64_t v22 = v39;
      v22 += 8;
    }
    while (v23 != a2);
    goto LABEL_38;
  }
  if (a2 == a3) {
    return __dst;
  }
  unint64_t v12 = a3 - a2 - 8;
  if (v12 < 0x18)
  {
    uint64_t v13 = __src;
    uint64_t v14 = a2;
  }
  else
  {
    uint64_t v13 = __src;
    uint64_t v14 = a2;
    if ((unint64_t)(__src - a2) >= 0x20)
    {
      uint64_t v15 = (v12 >> 3) + 1;
      uint64_t v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v13 = &__src[v16];
      uint64_t v14 = &a2[v16];
      uint64_t v17 = (long long *)(a2 + 16);
      uint64_t v18 = __src + 16;
      uint64_t v19 = v15 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v20 = *v17;
        *(v18 - 1) = *(v17 - 1);
        *uint64_t v18 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_18;
      }
    }
  }
  do
  {
    uint64_t v30 = *(void *)v14;
    v14 += 8;
    *(void *)uint64_t v13 = v30;
    v13 += 8;
  }
  while (v14 != a3);
LABEL_18:
  if (v13 == __src) {
    return __dst;
  }
  uint64_t v31 = a3;
  while (v10 != v11)
  {
    uint64_t v32 = *(void *)(a4 + 24);
    if (!v32) {
      goto LABEL_53;
    }
    long long __dst = (char *)(*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v32 + 48))(v32, (void *)v13 - 1, (void *)v10 - 1);
    if (__dst) {
      int v33 = v10;
    }
    else {
      int v33 = v13;
    }
    if (__dst) {
      v10 -= 8;
    }
    else {
      v13 -= 8;
    }
    *((void *)v31 - 1) = *((void *)v33 - 1);
    v31 -= 8;
    v9 -= 8;
    if (v13 == v7) {
      return __dst;
    }
  }
  unint64_t v34 = v13 - v7 - 8;
  if (v34 < 0x58 || (unint64_t)(v13 - v9) < 0x20)
  {
    uint64_t v35 = v13;
    uint64_t v36 = v31;
LABEL_33:
    uint64_t v37 = v36 - 8;
    do
    {
      uint64_t v38 = *((void *)v35 - 1);
      v35 -= 8;
      *(void *)uint64_t v37 = v38;
      v37 -= 8;
    }
    while (v35 != v7);
    return __dst;
  }
  uint64_t v42 = 0;
  uint64_t v43 = (v34 >> 3) + 1;
  uint64_t v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v35 = &v13[-v44];
  uint64_t v36 = &v31[-v44];
  uint64_t v45 = v43 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v46 = *(_OWORD *)&v13[v42 - 16];
    BOOL v47 = &v31[v42];
    *((_OWORD *)v47 - 2) = *(_OWORD *)&v13[v42 - 32];
    *((_OWORD *)v47 - 1) = v46;
    v42 -= 32;
    v45 -= 4;
  }
  while (v45);
  if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_33;
  }
  return __dst;
}

char *sub_B81BF0(void **a1, long long *a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (unsigned char *)*a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x199999999999999) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 5) > v5) {
    unint64_t v5 = 0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - v3) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v7 = 0x199999999999999;
  }
  else {
    unint64_t v7 = v5;
  }
  if (v7)
  {
    if (v7 > 0x199999999999999) {
      sub_188D718();
    }
    uint64_t v8 = (char *)operator new(160 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = &v8[160 * v4];
  uint64_t v35 = &v8[160 * v7];
  long long v10 = a2[3];
  *((_OWORD *)v9 + 2) = a2[2];
  *((_OWORD *)v9 + 3) = v10;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 9);
  *((void *)v9 + 8) = *((void *)a2 + 8);
  long long v13 = *a2;
  long long v12 = a2[1];
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = 0;
  uint64_t v14 = (char **)(v9 + 80);
  *(_OWORD *)uint64_t v9 = v13;
  *((_OWORD *)v9 + 1) = v12;
  *((void *)v9 + 11) = 0;
  uint64_t v15 = (unsigned char *)*((void *)a2 + 10);
  int64_t v16 = v15 - v11;
  if (v15 != v11)
  {
    if (v16 < 0) {
      sub_2E00();
    }
    uint64_t v17 = (char *)operator new(v15 - v11);
    *((void *)v9 + 9) = v17;
    *uint64_t v14 = v17;
    uint64_t v18 = &v17[16 * (v16 >> 4)];
    *((void *)v9 + 11) = v18;
    memcpy(v17, v11, v16);
    *uint64_t v14 = v18;
  }
  uint64_t v19 = &v8[160 * v4];
  long long v20 = a2[7];
  *((_OWORD *)v19 + 6) = a2[6];
  *((_OWORD *)v19 + 7) = v20;
  *((_OWORD *)v19 + 8) = a2[8];
  *(_OWORD *)(v19 + 142) = *(long long *)((char *)a2 + 142);
  unint64_t v21 = v9 + 160;
  if (v2 == v3)
  {
    *a1 = v9;
    a1[1] = v21;
    a1[2] = v35;
  }
  else
  {
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = &v9[v22];
      uint64_t v24 = &v2[v22];
      *((_OWORD *)v23 - 10) = *(_OWORD *)&v2[v22 - 160];
      long long v25 = *(_OWORD *)&v2[v22 - 144];
      long long v26 = *(_OWORD *)&v2[v22 - 128];
      long long v27 = *(_OWORD *)&v2[v22 - 112];
      *((void *)v23 - 12) = *(void *)&v2[v22 - 96];
      *((_OWORD *)v23 - 8) = v26;
      *((_OWORD *)v23 - 7) = v27;
      *((_OWORD *)v23 - 9) = v25;
      *((void *)v23 - 10) = 0;
      *((void *)v23 - 9) = 0;
      *(_OWORD *)(v23 - 88) = *(_OWORD *)&v2[v22 - 88];
      *((void *)v23 - 9) = *(void *)&v2[v22 - 72];
      *((void *)v24 - 11) = 0;
      *((void *)v24 - 10) = 0;
      *((void *)v24 - 9) = 0;
      long long v28 = *(_OWORD *)&v2[v22 - 64];
      long long v29 = *(_OWORD *)&v2[v22 - 48];
      long long v30 = *(_OWORD *)&v2[v22 - 32];
      *(_OWORD *)(v23 - 18) = *(_OWORD *)&v2[v22 - 18];
      *((_OWORD *)v23 - 3) = v29;
      *((_OWORD *)v23 - 2) = v30;
      *((_OWORD *)v23 - 4) = v28;
      v22 -= 160;
    }
    while (&v2[v22] != v3);
    uint64_t v31 = (char *)*a1;
    uint64_t v2 = (char *)a1[1];
    unint64_t v21 = v9 + 160;
    *a1 = &v9[v22];
    a1[1] = v9 + 160;
    a1[2] = v35;
    if (v2 != v31)
    {
      do
      {
        uint64_t v32 = (void *)*((void *)v2 - 11);
        if (v32)
        {
          *((void *)v2 - 10) = v32;
          operator delete(v32);
        }
        v2 -= 160;
      }
      while (v2 != v31);
      uint64_t v2 = v31;
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v21;
}

void sub_B81E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  unint64_t v7 = *v4;
  if (*v4)
  {
    *unint64_t v5 = v7;
    operator delete(v7);
  }
  sub_B81E90((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B81E90(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = v2 - 160;
        *(void *)(a1 + 16) = v2 - 160;
        unint64_t v5 = *(void **)(v2 - 88);
        if (!v5) {
          break;
        }
        *(void *)(v2 - 80) = v5;
        operator delete(v5);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 160;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_B81F04()
{
}

void *sub_B81F18(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_243DD38;
  result[1] = v3;
  return result;
}

uint64_t sub_B81F60(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_243DD38;
  a2[1] = v2;
  return result;
}

BOOL sub_B81F8C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  unsigned int v6 = *(_DWORD *)(*a2 + 172);
  unint64_t v7 = (int *)sub_A11094((void *)(*(void *)(v3 + 24) + 4136), *(void *)(*a2 + 152));
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0) {
    long long v10 = (unsigned int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
  }
  else {
    long long v10 = 0;
  }
  uint64_t v11 = (unint64_t *)sub_A10764(v10, v6);
  unint64_t v12 = *v11;
  long long v13 = (int *)sub_498D5C(*(void *)(*(void *)(v3 + 24) + 4120) + 24, *v11, 0, "stop");
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 0xDu && (unsigned __int16 v15 = v14[6]) != 0) {
    unint64_t v16 = *(unsigned int *)((char *)v13 + v15 + 4) | ((unint64_t)*(unsigned int *)((char *)v13 + v15) << 32);
  }
  else {
    unint64_t v16 = 0xFFFFFFFFLL;
  }
  unsigned int v17 = *(_DWORD *)(v5 + 172);
  uint64_t v18 = (int *)sub_A11094((void *)(*(void *)(v3 + 24) + 4136), *(void *)(v5 + 152));
  uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 >= 9u && (uint64_t v20 = v19[4]) != 0) {
    unint64_t v21 = (unsigned int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
  }
  else {
    unint64_t v21 = 0;
  }
  unint64_t v22 = __ROR8__(v12, 32);
  uint64_t v23 = (unint64_t *)sub_A10764(v21, v17);
  unint64_t v24 = __ROR8__(*v23, 32);
  long long v25 = (int *)sub_498D5C(*(void *)(*(void *)(v3 + 24) + 4120) + 24, *v23, 0, "stop");
  long long v26 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v26 >= 0xDu && (unsigned __int16 v27 = v26[6]) != 0) {
    unint64_t v28 = *(unsigned int *)((char *)v25 + v27 + 4) | ((unint64_t)*(unsigned int *)((char *)v25 + v27) << 32);
  }
  else {
    unint64_t v28 = 0xFFFFFFFFLL;
  }
  if (HIDWORD(v16)) {
    BOOL v29 = v16 == -1;
  }
  else {
    BOOL v29 = 1;
  }
  int v30 = v29;
  if (HIDWORD(v28)) {
    BOOL v31 = v28 == -1;
  }
  else {
    BOOL v31 = 1;
  }
  int v32 = !v31;
  if (v30) {
    unint64_t v33 = v22;
  }
  else {
    unint64_t v33 = v16;
  }
  if (v32) {
    unint64_t v34 = v28;
  }
  else {
    unint64_t v34 = v24;
  }
  unsigned int v35 = *(_DWORD *)(v4 + 172);
  uint64_t v36 = (int *)sub_A11094((void *)(*(void *)(v3 + 24) + 4136), *(void *)(v4 + 152));
  uint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
  unsigned int v38 = *v37;
  if (v38 < 5)
  {
    uint64_t v39 = 0;
    goto LABEL_40;
  }
  if (!v37[2])
  {
    uint64_t v39 = 0;
    if (v38 >= 9) {
      goto LABEL_59;
    }
LABEL_40:
    uint64_t v40 = 0;
    goto LABEL_41;
  }
  uint64_t v39 = (char *)v36 + v37[2] + *(unsigned int *)((char *)v36 + v37[2]);
  if (v38 < 9) {
    goto LABEL_40;
  }
LABEL_59:
  uint64_t v52 = v37[4];
  if (!v52) {
    goto LABEL_40;
  }
  uint64_t v40 = (unsigned int *)((char *)v36 + v52 + *(unsigned int *)((char *)v36 + v52));
LABEL_41:
  uint64_t v41 = __ROR8__(*(void *)&v39[8 * *(unsigned __int8 *)(sub_A10764(v40, v35) + 14) + 4], 32);
  unsigned int v42 = *(_DWORD *)(v5 + 172);
  uint64_t v43 = (int *)sub_A11094((void *)(*(void *)(v3 + 24) + 4136), *(void *)(v5 + 152));
  uint64_t v44 = (unsigned __int16 *)((char *)v43 - *v43);
  unsigned int v45 = *v44;
  if (v45 < 5)
  {
    long long v46 = 0;
    goto LABEL_46;
  }
  if (v44[2])
  {
    long long v46 = (char *)v43 + v44[2] + *(unsigned int *)((char *)v43 + v44[2]);
    if (v45 < 9) {
      goto LABEL_46;
    }
  }
  else
  {
    long long v46 = 0;
    if (v45 < 9) {
      goto LABEL_46;
    }
  }
  uint64_t v53 = v44[4];
  if (v53)
  {
    BOOL v47 = (unsigned int *)((char *)v43 + v53 + *(unsigned int *)((char *)v43 + v53));
    goto LABEL_47;
  }
LABEL_46:
  BOOL v47 = 0;
LABEL_47:
  uint64_t v48 = __ROR8__(*(void *)&v46[8 * *(unsigned __int8 *)(sub_A10764(v47, v42) + 14) + 4], 32);
  if (HIDWORD(v41) < HIDWORD(v48)) {
    return 1;
  }
  if (HIDWORD(v41) <= HIDWORD(v48) && v41 < v48) {
    return 1;
  }
  if (HIDWORD(v48) < HIDWORD(v41) || v48 < v41) {
    return 0;
  }
  if (((v30 | v32) & 1) == 0) {
    return 1;
  }
  if (v30 & v32) {
    return 0;
  }
  if (HIDWORD(v33) < HIDWORD(v34)) {
    return 1;
  }
  return HIDWORD(v33) <= HIDWORD(v34) && v33 < v34;
}

uint64_t sub_B822D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning16ScheduleGrouping19get_cell_comparatorENS2_13cell_scheme_tEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning16ScheduleGrouping19get_cell_comparatorENS2_13cell_scheme_tEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning16ScheduleGrouping19get_cell_comparatorENS2_13cell_scheme_tEE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning16ScheduleGrouping19get_cell_comparatorENS2_13cell_scheme_tEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

_UNKNOWN **sub_B82344()
{
}

void sub_B82354()
{
}

void *sub_B82368(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_243DDC8;
  result[1] = v3;
  return result;
}

uint64_t sub_B823B0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_243DDC8;
  a2[1] = v2;
  return result;
}

BOOL sub_B823DC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  unsigned int v6 = *(_DWORD *)(*a2 + 172);
  unint64_t v7 = (int *)sub_A11094((void *)(*(void *)(v3 + 24) + 4136), *(void *)(*a2 + 152));
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0) {
    long long v10 = (unsigned int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
  }
  else {
    long long v10 = 0;
  }
  uint64_t v11 = (unint64_t *)sub_A10764(v10, v6);
  unint64_t v12 = *v11;
  long long v13 = (int *)sub_498D5C(*(void *)(*(void *)(v3 + 24) + 4120) + 24, *v11, 0, "stop");
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 0xDu && (unsigned __int16 v15 = v14[6]) != 0) {
    unint64_t v16 = *(unsigned int *)((char *)v13 + v15 + 4) | ((unint64_t)*(unsigned int *)((char *)v13 + v15) << 32);
  }
  else {
    unint64_t v16 = 0xFFFFFFFFLL;
  }
  unsigned int v17 = *(_DWORD *)(v5 + 172);
  uint64_t v18 = (int *)sub_A11094((void *)(*(void *)(v3 + 24) + 4136), *(void *)(v5 + 152));
  uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 >= 9u && (uint64_t v20 = v19[4]) != 0) {
    unint64_t v21 = (unsigned int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
  }
  else {
    unint64_t v21 = 0;
  }
  unint64_t v22 = __ROR8__(v12, 32);
  uint64_t v23 = (unint64_t *)sub_A10764(v21, v17);
  unint64_t v24 = __ROR8__(*v23, 32);
  long long v25 = (int *)sub_498D5C(*(void *)(*(void *)(v3 + 24) + 4120) + 24, *v23, 0, "stop");
  long long v26 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v26 >= 0xDu && (unsigned __int16 v27 = v26[6]) != 0) {
    unint64_t v28 = *(unsigned int *)((char *)v25 + v27 + 4) | ((unint64_t)*(unsigned int *)((char *)v25 + v27) << 32);
  }
  else {
    unint64_t v28 = 0xFFFFFFFFLL;
  }
  if (HIDWORD(v16)) {
    BOOL v29 = v16 == -1;
  }
  else {
    BOOL v29 = 1;
  }
  int v30 = v29;
  if (HIDWORD(v28)) {
    BOOL v31 = v28 == -1;
  }
  else {
    BOOL v31 = 1;
  }
  int v32 = !v31;
  if (v30) {
    unint64_t v33 = v22;
  }
  else {
    unint64_t v33 = v16;
  }
  if (v32) {
    unint64_t v34 = v28;
  }
  else {
    unint64_t v34 = v24;
  }
  unsigned int v35 = *(_DWORD *)(v4 + 172);
  uint64_t v36 = (int *)sub_A11094((void *)(*(void *)(v3 + 24) + 4136), *(void *)(v4 + 152));
  uint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
  unsigned int v38 = *v37;
  if (v38 < 5)
  {
    uint64_t v39 = 0;
    goto LABEL_40;
  }
  if (v37[2])
  {
    uint64_t v39 = (char *)v36 + v37[2] + *(unsigned int *)((char *)v36 + v37[2]);
    if (v38 < 9) {
      goto LABEL_40;
    }
  }
  else
  {
    uint64_t v39 = 0;
    if (v38 < 9) {
      goto LABEL_40;
    }
  }
  uint64_t v65 = v37[4];
  if (v65)
  {
    uint64_t v40 = (unsigned int *)((char *)v36 + v65 + *(unsigned int *)((char *)v36 + v65));
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v40 = 0;
LABEL_41:
  unint64_t v41 = *(void *)&v39[8 * *(unsigned __int8 *)(sub_A10764(v40, v35) + 14) + 4];
  unsigned int v42 = (int *)sub_8DFD1C(*(void *)(*(void *)(v3 + 24) + 4056) + 24, v41, 0, "line");
  uint64_t v43 = (unsigned __int16 *)((char *)v42 - *v42);
  if (*v43 >= 7u && (unsigned __int16 v44 = v43[3]) != 0) {
    unint64_t v45 = *(unsigned int *)((char *)v42 + v44 + 4) | ((unint64_t)*(unsigned int *)((char *)v42 + v44) << 32);
  }
  else {
    unint64_t v45 = 0xFFFFFFFFLL;
  }
  long long v46 = (int *)sub_8DFD1C(*(void *)(*(void *)(v3 + 24) + 4056) + 24, v41, 0, "line");
  BOOL v47 = (unsigned __int16 *)((char *)v46 - *v46);
  if (*v47 >= 0x4Du && (uint64_t v48 = v47[38]) != 0 && *((unsigned char *)v46 + v48) == 2)
  {
    char v49 = 0;
  }
  else
  {
    unint64_t v45 = __ROR8__(v41, 32);
    char v49 = 1;
  }
  unsigned int v50 = *(_DWORD *)(v5 + 172);
  uint64_t v51 = (int *)sub_A11094((void *)(*(void *)(v3 + 24) + 4136), *(void *)(v5 + 152));
  uint64_t v52 = (unsigned __int16 *)((char *)v51 - *v51);
  unsigned int v53 = *v52;
  if (v53 < 5)
  {
    uint64_t v54 = 0;
    goto LABEL_55;
  }
  if (v52[2])
  {
    uint64_t v54 = (char *)v51 + v52[2] + *(unsigned int *)((char *)v51 + v52[2]);
    if (v53 < 9) {
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v54 = 0;
    if (v53 < 9) {
      goto LABEL_55;
    }
  }
  uint64_t v66 = v52[4];
  if (v66)
  {
    uint64_t v55 = (unsigned int *)((char *)v51 + v66 + *(unsigned int *)((char *)v51 + v66));
    goto LABEL_56;
  }
LABEL_55:
  uint64_t v55 = 0;
LABEL_56:
  unint64_t v56 = *(void *)&v54[8 * *(unsigned __int8 *)(sub_A10764(v55, v50) + 14) + 4];
  long long v57 = (int *)sub_8DFD1C(*(void *)(*(void *)(v3 + 24) + 4056) + 24, v56, 0, "line");
  uint64_t v58 = (unsigned __int16 *)((char *)v57 - *v57);
  if (*v58 >= 7u && (unsigned __int16 v59 = v58[3]) != 0) {
    unint64_t v60 = *(unsigned int *)((char *)v57 + v59 + 4) | ((unint64_t)*(unsigned int *)((char *)v57 + v59) << 32);
  }
  else {
    unint64_t v60 = 0xFFFFFFFFLL;
  }
  unint64_t v61 = (int *)sub_8DFD1C(*(void *)(*(void *)(v3 + 24) + 4056) + 24, v56, 0, "line");
  long long v62 = (unsigned __int16 *)((char *)v61 - *v61);
  if (*v62 >= 0x4Du && (uint64_t v63 = v62[38]) != 0 && *((unsigned char *)v61 + v63) == 2)
  {
    if (v49) {
      return 0;
    }
  }
  else
  {
    if ((v49 & 1) == 0) {
      return 1;
    }
    unint64_t v60 = __ROR8__(v56, 32);
  }
  if (v45 < v60) {
    return 1;
  }
  BOOL result = 0;
  if (HIDWORD(v60) >= HIDWORD(v45) && v60 >= v45)
  {
    if (((v30 | v32) & 1) == 0) {
      return 1;
    }
    if (v30 & v32) {
      return 0;
    }
    if (HIDWORD(v33) < HIDWORD(v34)) {
      return 1;
    }
    return HIDWORD(v33) <= HIDWORD(v34) && v33 < v34;
  }
  return result;
}

uint64_t sub_B8287C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning16ScheduleGrouping19get_cell_comparatorENS2_13cell_scheme_tEE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning16ScheduleGrouping19get_cell_comparatorENS2_13cell_scheme_tEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning16ScheduleGrouping19get_cell_comparatorENS2_13cell_scheme_tEE3$_1"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning16ScheduleGrouping19get_cell_comparatorENS2_13cell_scheme_tEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

_UNKNOWN **sub_B828EC()
{
}

__n128 sub_B828F8(char *a1, char *a2, void *a3, unint64_t a4, char *a5, uint64_t a6, __n128 result)
{
  if (a4 >= 2)
  {
    uint64_t v9 = a1;
    if (a4 == 2)
    {
      uint64_t v10 = a3[3];
      if (v10)
      {
        uint64_t v11 = a2 - 8;
        if ((*(unsigned int (**)(uint64_t, char *, void *))(*(void *)v10 + 48))(v10, a2 - 8, v9))
        {
          uint64_t v12 = *v9;
          void *v9 = *(void *)v11;
          *(void *)uint64_t v11 = v12;
        }
        return result;
      }
      goto LABEL_53;
    }
    if ((uint64_t)a4 <= 128)
    {
      if (a1 == a2) {
        return result;
      }
      uint64_t v14 = a1 + 8;
      if (a1 + 8 == a2) {
        return result;
      }
      uint64_t v15 = 0;
      unint64_t v16 = a1;
      while (1)
      {
        uint64_t v18 = a3[3];
        if (!v18) {
          break;
        }
        uint64_t v19 = v14;
        if ((*(unsigned int (**)(uint64_t, char *, char *))(*(void *)v18 + 48))(v18, v14, v16))
        {
          uint64_t v58 = *(void *)v19;
          uint64_t v20 = v15;
          do
          {
            *(void *)((char *)v9 + v20 + 8) = *(void *)((char *)v9 + v20);
            if (!v20)
            {
              unsigned int v17 = v9;
              goto LABEL_11;
            }
            uint64_t v21 = a3[3];
            if (!v21) {
              goto LABEL_53;
            }
            v20 -= 8;
          }
          while (((*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(void *)v21 + 48))(v21, &v58, (char *)v9 + v20) & 1) != 0);
          unsigned int v17 = (void *)((char *)v9 + v20 + 8);
LABEL_11:
          *unsigned int v17 = v58;
        }
        uint64_t v14 = v19 + 8;
        v15 += 8;
        unint64_t v16 = v19;
        if (v19 + 8 == a2) {
          return result;
        }
      }
LABEL_53:
      sub_29F82C();
    }
    unint64_t v24 = a4 >> 1;
    long long v25 = &a1[8 * (a4 >> 1)];
    unint64_t v26 = a4 >> 1;
    if ((uint64_t)a4 <= a6)
    {
      sub_B82CF8(a1, v25, (uint64_t)a3, v26, a5);
      unsigned __int16 v27 = &a5[8 * v24];
      BOOL result = sub_B82CF8((char *)&v9[a4 >> 1], a2, (uint64_t)a3, a4 - (a4 >> 1), v27);
      unint64_t v28 = v27;
      BOOL v29 = a5;
      int v30 = v9;
      BOOL v31 = &a5[8 * a4];
      do
      {
        if (v28 == v31)
        {
          if (v29 == v27) {
            return result;
          }
          unint64_t v48 = &a5[8 * v24] - v29 - 8;
          if (v48 >= 0x38 && (unint64_t)((char *)v9 - v29) >= 0x20)
          {
            uint64_t v52 = 0;
            uint64_t v53 = (v48 >> 3) + 1;
            uint64_t v54 = v53 & 0x3FFFFFFFFFFFFFFCLL;
            char v49 = &v29[v54 * 8];
            unsigned int v50 = &v30[v54];
            uint64_t v55 = v53 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              unint64_t v56 = &v30[v52];
              BOOL result = *(__n128 *)&v29[v52 * 8];
              long long v57 = *(_OWORD *)&v29[v52 * 8 + 16];
              *(__n128 *)unint64_t v56 = result;
              *((_OWORD *)v56 + 1) = v57;
              v52 += 4;
              v55 -= 4;
            }
            while (v55);
            if (v53 == (v53 & 0x3FFFFFFFFFFFFFFCLL)) {
              return result;
            }
          }
          else
          {
            char v49 = v29;
            unsigned int v50 = v30;
          }
          do
          {
            uint64_t v51 = *(void *)v49;
            v49 += 8;
            *v50++ = v51;
          }
          while (v49 != v27);
          return result;
        }
        uint64_t v32 = a3[3];
        if (!v32) {
          goto LABEL_53;
        }
        unint64_t v33 = v28;
        int v34 = (*(uint64_t (**)(uint64_t, char *, char *, __n128))(*(void *)v32 + 48))(v32, v28, v29, result);
        if (v34) {
          unsigned int v35 = v33;
        }
        else {
          unsigned int v35 = v29;
        }
        v29 += 8 * (v34 ^ 1u);
        unint64_t v28 = &v33[8 * v34];
        *v30++ = *(void *)v35;
        ++v9;
      }
      while (v29 != v27);
      if (v28 != v31)
      {
        uint64_t v36 = -8;
        if (!v34) {
          uint64_t v36 = 0;
        }
        unint64_t v37 = &a5[8 * a4] - v33 + v36 - 8;
        if (v37 < 0x68) {
          goto LABEL_56;
        }
        uint64_t v38 = 8;
        if (!v34) {
          uint64_t v38 = 0;
        }
        if ((unint64_t)((char *)v9 - v33 - v38) < 0x20) {
          goto LABEL_56;
        }
        uint64_t v39 = 0;
        uint64_t v40 = (v37 >> 3) + 1;
        uint64_t v41 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        unsigned int v42 = &v28[v41 * 8];
        uint64_t v43 = &v30[v41];
        uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          unint64_t v45 = &v30[v39];
          BOOL result = *(__n128 *)&v28[v39 * 8];
          long long v46 = *(_OWORD *)&v28[v39 * 8 + 16];
          *(__n128 *)unint64_t v45 = result;
          *((_OWORD *)v45 + 1) = v46;
          v39 += 4;
          v44 -= 4;
        }
        while (v44);
        unint64_t v28 = v42;
        int v30 = v43;
        if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_56:
          do
          {
            uint64_t v47 = *(void *)v28;
            v28 += 8;
            *v30++ = v47;
          }
          while (v28 != v31);
        }
      }
    }
    else
    {
      sub_B828F8(a1, v25, a3, v26, a5, a6);
      sub_B828F8(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
      sub_B83094((uint64_t)v9, (char *)&v9[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
    }
  }
  return result;
}

__n128 sub_B82CF8(char *a1, char *a2, uint64_t a3, unint64_t a4, void *a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    unint64_t v7 = a1;
    if (a4 == 1)
    {
LABEL_10:
      *uint64_t v5 = *(void *)v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v10 = *(void *)(a3 + 24);
      if (v10)
      {
        uint64_t v11 = a2 - 8;
        int v12 = (*(uint64_t (**)(uint64_t, void *, char *))(*(void *)v10 + 48))(v10, (void *)a2 - 1, v7);
        if (v12) {
          uint64_t v14 = v11;
        }
        else {
          uint64_t v14 = v7;
        }
        *v5++ = *(void *)v14;
        if (!v12) {
          unint64_t v7 = v11;
        }
        goto LABEL_10;
      }
LABEL_55:
      sub_29F82C();
    }
    if ((uint64_t)a4 <= 8)
    {
      if (a1 == a2) {
        return result;
      }
      uint64_t v15 = a1 + 8;
      *a5 = *(void *)a1;
      if (a1 + 8 == a2) {
        return result;
      }
      uint64_t v16 = 0;
      unsigned int v17 = a5;
      while (1)
      {
        uint64_t v20 = *(void *)(a3 + 24);
        if (!v20) {
          goto LABEL_55;
        }
        uint64_t v21 = v17++;
        int v22 = (*(uint64_t (**)(uint64_t, char *, void *))(*(void *)v20 + 48))(v20, v15, v21);
        uint64_t v18 = v17;
        if (v22)
        {
          v21[1] = *v21;
          uint64_t v18 = v5;
          if (v21 != v5)
          {
            uint64_t v23 = v16;
            do
            {
              uint64_t v24 = *(void *)(a3 + 24);
              if (!v24) {
                goto LABEL_55;
              }
              if (!(*(unsigned int (**)(uint64_t, char *, uint64_t))(*(void *)v24 + 48))(v24, v15, (uint64_t)v5 + v23 - 8))
              {
                uint64_t v18 = (void *)((char *)v5 + v23);
                goto LABEL_17;
              }
              *(void *)((char *)v5 + v23) = *(void *)((char *)v5 + v23 - 8);
              v23 -= 8;
            }
            while (v23);
            uint64_t v18 = v5;
          }
        }
LABEL_17:
        uint64_t v19 = *(void *)v15;
        v15 += 8;
        *uint64_t v18 = v19;
        v16 += 8;
        if (v15 == a2) {
          return result;
        }
      }
    }
    unint64_t v25 = a4 >> 1;
    uint64_t v26 = 8 * (a4 >> 1);
    unsigned __int16 v27 = &a1[v26];
    sub_B828F8(a1, &a1[v26], a3, a4 >> 1, a5, a4 >> 1);
    sub_B828F8(&v7[v26], a2, a3, a4 - v25, &v5[(unint64_t)v26 / 8], a4 - v25);
    unint64_t v28 = (char *)v5;
    BOOL v29 = v7;
    int v30 = &v7[v26];
    do
    {
      if (v30 == a2)
      {
        if (v29 == v27) {
          return result;
        }
        unint64_t v47 = &v7[8 * v25] - v29 - 8;
        if (v47 >= 0x38 && (unint64_t)(v28 - v29) >= 0x20)
        {
          uint64_t v51 = 0;
          uint64_t v52 = (v47 >> 3) + 1;
          uint64_t v53 = v52 & 0x3FFFFFFFFFFFFFFCLL;
          unint64_t v48 = &v5[v53];
          char v49 = &v29[v53 * 8];
          uint64_t v54 = v52 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v55 = &v5[v51];
            __n128 result = *(__n128 *)&v29[v51 * 8];
            long long v56 = *(_OWORD *)&v29[v51 * 8 + 16];
            *(__n128 *)uint64_t v55 = result;
            *((_OWORD *)v55 + 1) = v56;
            v51 += 4;
            v54 -= 4;
          }
          while (v54);
          if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL)) {
            return result;
          }
        }
        else
        {
          unint64_t v48 = v5;
          char v49 = v29;
        }
        do
        {
          uint64_t v50 = *(void *)v49;
          v49 += 8;
          *v48++ = v50;
        }
        while (v49 != v27);
        return result;
      }
      uint64_t v31 = *(void *)(a3 + 24);
      if (!v31) {
        goto LABEL_55;
      }
      uint64_t v32 = v30;
      int v33 = (*(uint64_t (**)(uint64_t, char *, char *))(*(void *)v31 + 48))(v31, v30, v29);
      if (v33) {
        int v34 = v32;
      }
      else {
        int v34 = v29;
      }
      int v30 = &v32[8 * v33];
      v29 += 8 * (v33 ^ 1u);
      *v5++ = *(void *)v34;
      v28 += 8;
    }
    while (v29 != v27);
    if (v30 != a2)
    {
      uint64_t v35 = -8;
      if (!v33) {
        uint64_t v35 = 0;
      }
      unint64_t v36 = a2 - v32 + v35 - 8;
      if (v36 < 0x68) {
        goto LABEL_58;
      }
      uint64_t v37 = 8;
      if (!v33) {
        uint64_t v37 = 0;
      }
      if ((unint64_t)(v28 - &v32[v37]) < 0x20) {
        goto LABEL_58;
      }
      uint64_t v38 = 0;
      uint64_t v39 = (v36 >> 3) + 1;
      uint64_t v40 = v39 & 0x3FFFFFFFFFFFFFFCLL;
      uint64_t v41 = &v5[v40];
      unsigned int v42 = &v30[v40 * 8];
      uint64_t v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v44 = &v5[v38];
        __n128 result = *(__n128 *)&v30[v38 * 8];
        long long v45 = *(_OWORD *)&v30[v38 * 8 + 16];
        *(__n128 *)uint64_t v44 = result;
        *((_OWORD *)v44 + 1) = v45;
        v38 += 4;
        v43 -= 4;
      }
      while (v43);
      uint64_t v5 = v41;
      int v30 = v42;
      if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_58:
        do
        {
          uint64_t v46 = *(void *)v30;
          v30 += 8;
          *v5++ = v46;
        }
        while (v30 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_B83094(uint64_t result, char *a2, char *a3, void *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v56 = a6;
  if (a6)
  {
    uint64_t v11 = (char *)result;
    while (1)
    {
      if (v56 <= a8 || a5 <= a8) {
        return (uint64_t)sub_B83634(v11, a2, a3, (uint64_t)a4, a5, v56, a7);
      }
      if (!a5) {
        return result;
      }
      uint64_t v12 = 0;
      uint64_t v13 = -a5;
      while (1)
      {
        uint64_t v14 = a4[3];
        if (!v14) {
          sub_29F82C();
        }
        __n128 result = (*(uint64_t (**)(uint64_t, char *, char *))(*(void *)v14 + 48))(v14, a2, &v11[v12]);
        if (result) {
          break;
        }
        v12 += 8;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      if (-v13 >= v56)
      {
        if (v13 == -1)
        {
          uint64_t v50 = *(void *)&v11[v12];
          *(void *)&v11[v12] = *(void *)a2;
          *(void *)a2 = v50;
          return result;
        }
        if (v13 <= 0) {
          uint64_t v28 = -v13;
        }
        else {
          uint64_t v28 = 1 - v13;
        }
        BOOL v29 = (void *)a4[3];
        if (v29)
        {
          if (v29 == a4)
          {
            uint64_t v58 = v57;
            (*(void (**)(void *, void *))(*a4 + 24))(a4, v57);
          }
          else
          {
            uint64_t v58 = (void *)(*(uint64_t (**)(void *))(*v29 + 16))(v29);
          }
        }
        else
        {
          uint64_t v58 = 0;
        }
        uint64_t v21 = v28 >> 1;
        uint64_t v18 = &v11[8 * (v28 >> 1) + v12];
        unsigned int v17 = a2;
        if (a2 != a3)
        {
          uint64_t v52 = v28 >> 1;
          unint64_t v32 = (a3 - a2) >> 3;
          unsigned int v17 = a2;
          do
          {
            if (!v58) {
              sub_29F82C();
            }
            int v33 = &v17[8 * (v32 >> 1)];
            int v34 = (*(uint64_t (**)(void *, char *, char *))(*v58 + 48))(v58, v33, v18);
            if (v34) {
              v32 += ~(v32 >> 1);
            }
            else {
              v32 >>= 1;
            }
            if (v34) {
              unsigned int v17 = v33 + 8;
            }
          }
          while (v32);
          uint64_t v21 = v52;
        }
        if (v58 == v57)
        {
          (*(void (**)(void *))(v57[0] + 32))(v57);
          uint64_t v51 = (v17 - a2) >> 3;
          if (v18 != a2) {
            goto LABEL_24;
          }
        }
        else
        {
          if (v58) {
            (*(void (**)(void))(*v58 + 40))();
          }
          uint64_t v51 = (v17 - a2) >> 3;
          if (v18 != a2)
          {
LABEL_24:
            uint64_t v22 = v17 - a2;
            if (v17 == a2)
            {
              a2 = v18;
            }
            else
            {
              uint64_t v23 = v18 + 8;
              if (v18 + 8 == a2)
              {
                uint64_t v30 = v21;
                uint64_t v31 = *(void *)v18;
                memmove(v18, a2, v17 - a2);
                a2 = &v18[v22];
                *(void *)&v18[v22] = v31;
                uint64_t v21 = v30;
              }
              else
              {
                uint64_t v24 = a2 + 8;
                if (a2 + 8 == v17)
                {
                  uint64_t v36 = *((void *)v17 - 1);
                  a2 = v18 + 8;
                  if (v17 - 8 != v18) {
                    memmove(v18 + 8, v18, v17 - 8 - v18);
                  }
                  *(void *)uint64_t v18 = v36;
                }
                else
                {
                  uint64_t v25 = (a2 - v18) >> 3;
                  if (v25 == v22 >> 3)
                  {
                    do
                    {
                      uint64_t v26 = *((void *)v23 - 1);
                      *((void *)v23 - 1) = *((void *)v24 - 1);
                      *((void *)v24 - 1) = v26;
                      if (v23 == a2) {
                        break;
                      }
                      v23 += 8;
                      BOOL v27 = v24 == v17;
                      v24 += 8;
                    }
                    while (!v27);
                  }
                  else
                  {
                    uint64_t v37 = v22 >> 3;
                    uint64_t v38 = (a2 - v18) >> 3;
                    do
                    {
                      uint64_t v39 = v38;
                      uint64_t v38 = v37;
                      uint64_t v37 = v39 % v37;
                    }
                    while (v37);
                    if (v38)
                    {
                      uint64_t v40 = &v18[8 * v38];
                      do
                      {
                        uint64_t v42 = *((void *)v40 - 1);
                        v40 -= 8;
                        uint64_t v41 = v42;
                        uint64_t v43 = &v40[8 * v25];
                        uint64_t v44 = v40;
                        do
                        {
                          long long v45 = v43;
                          *(void *)uint64_t v44 = *(void *)v43;
                          uint64_t v46 = (v17 - v43) >> 3;
                          BOOL v47 = __OFSUB__(v25, v46);
                          uint64_t v49 = v25 - v46;
                          char v48 = (v49 < 0) ^ v47;
                          uint64_t v43 = &v18[8 * v49];
                          if (v48) {
                            uint64_t v43 = &v45[8 * v25];
                          }
                          uint64_t v44 = v45;
                        }
                        while (v43 != v40);
                        *(void *)long long v45 = v41;
                      }
                      while (v40 != v18);
                    }
                    a2 = &v18[8 * (v22 >> 3)];
                  }
                }
              }
            }
            goto LABEL_58;
          }
        }
      }
      else
      {
        if (v56 >= 0) {
          uint64_t v16 = v56;
        }
        else {
          uint64_t v16 = v56 + 1;
        }
        uint64_t v51 = v16 >> 1;
        unsigned int v17 = &a2[8 * (v16 >> 1)];
        uint64_t v18 = a2;
        if (a2 - v11 != v12)
        {
          unint64_t v19 = (a2 - v11 - v12) >> 3;
          uint64_t v18 = &v11[v12];
          do
          {
            uint64_t v20 = a4[3];
            if (!v20) {
              sub_29F82C();
            }
            if ((*(unsigned int (**)(uint64_t, char *, char *))(*(void *)v20 + 48))(v20, v17, &v18[8 * (v19 >> 1)]))
            {
              v19 >>= 1;
            }
            else
            {
              v18 += 8 * (v19 >> 1) + 8;
              v19 += ~(v19 >> 1);
            }
          }
          while (v19);
        }
        uint64_t v21 = (v18 - v11 - v12) >> 3;
        if (v18 != a2) {
          goto LABEL_24;
        }
      }
      a2 = v17;
LABEL_58:
      a5 = -v21 - v13;
      uint64_t v35 = v56 - v51;
      if (v21 + v51 >= v56 - (v21 + v51) - v13)
      {
        __n128 result = sub_B83094(a2, v17, a3, a4, -v21 - v13, v56 - v51, a7, a8);
        a3 = a2;
        a2 = v18;
        v11 += v12;
        a5 = v21;
        uint64_t v56 = v51;
        if (!v51) {
          return result;
        }
      }
      else
      {
        __n128 result = sub_B83094(&v11[v12], v18, a2, a4, v21, v51, a7, a8);
        uint64_t v11 = a2;
        a2 = v17;
        v56 -= v51;
        if (!v35) {
          return result;
        }
      }
    }
  }
  return result;
}

void sub_B83608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_B7FD1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B8361C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_B7FD1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_B83634(char *__dst, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *__src)
{
  unint64_t v7 = __src;
  uint64_t v9 = a3;
  uint64_t v10 = a2;
  uint64_t v11 = __dst;
  if (a5 <= a6)
  {
    if (__dst == a2) {
      return __dst;
    }
    unint64_t v21 = a2 - __dst - 8;
    if (v21 < 0x18)
    {
      uint64_t v22 = __src;
      uint64_t v23 = __dst;
    }
    else
    {
      uint64_t v22 = __src;
      uint64_t v23 = __dst;
      if ((unint64_t)(__src - __dst) >= 0x20)
      {
        uint64_t v24 = (v21 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v22 = &__src[v25];
        uint64_t v23 = &__dst[v25];
        uint64_t v26 = (long long *)(__dst + 16);
        BOOL v27 = __src + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *BOOL v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_38:
          if (v22 != __src)
          {
            while (v10 != v9)
            {
              uint64_t v40 = *(void *)(a4 + 24);
              if (!v40) {
LABEL_53:
              }
                sub_29F82C();
              long long __dst = (char *)(*(uint64_t (**)(uint64_t, char *, char *))(*(void *)v40 + 48))(v40, v10, v7);
              if (__dst) {
                uint64_t v41 = v10;
              }
              else {
                uint64_t v41 = v7;
              }
              v10 += 8 * __dst;
              v7 += 8 * (__dst ^ 1);
              *(void *)uint64_t v11 = *(void *)v41;
              v11 += 8;
              if (v7 == v22) {
                return __dst;
              }
            }
            return (char *)memmove(v11, v7, v22 - v7);
          }
          return __dst;
        }
      }
    }
    do
    {
      uint64_t v39 = *(void *)v23;
      v23 += 8;
      *(void *)uint64_t v22 = v39;
      v22 += 8;
    }
    while (v23 != a2);
    goto LABEL_38;
  }
  if (a2 == a3) {
    return __dst;
  }
  unint64_t v12 = a3 - a2 - 8;
  if (v12 < 0x18)
  {
    uint64_t v13 = __src;
    uint64_t v14 = a2;
  }
  else
  {
    uint64_t v13 = __src;
    uint64_t v14 = a2;
    if ((unint64_t)(__src - a2) >= 0x20)
    {
      uint64_t v15 = (v12 >> 3) + 1;
      uint64_t v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v13 = &__src[v16];
      uint64_t v14 = &a2[v16];
      unsigned int v17 = (long long *)(a2 + 16);
      uint64_t v18 = __src + 16;
      uint64_t v19 = v15 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v20 = *v17;
        *(v18 - 1) = *(v17 - 1);
        *uint64_t v18 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_18;
      }
    }
  }
  do
  {
    uint64_t v30 = *(void *)v14;
    v14 += 8;
    *(void *)uint64_t v13 = v30;
    v13 += 8;
  }
  while (v14 != a3);
LABEL_18:
  if (v13 == __src) {
    return __dst;
  }
  uint64_t v31 = a3;
  while (v10 != v11)
  {
    uint64_t v32 = *(void *)(a4 + 24);
    if (!v32) {
      goto LABEL_53;
    }
    long long __dst = (char *)(*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v32 + 48))(v32, (void *)v13 - 1, (void *)v10 - 1);
    if (__dst) {
      int v33 = v10;
    }
    else {
      int v33 = v13;
    }
    if (__dst) {
      v10 -= 8;
    }
    else {
      v13 -= 8;
    }
    *((void *)v31 - 1) = *((void *)v33 - 1);
    v31 -= 8;
    v9 -= 8;
    if (v13 == v7) {
      return __dst;
    }
  }
  unint64_t v34 = v13 - v7 - 8;
  if (v34 < 0x58 || (unint64_t)(v13 - v9) < 0x20)
  {
    uint64_t v35 = v13;
    uint64_t v36 = v31;
LABEL_33:
    uint64_t v37 = v36 - 8;
    do
    {
      uint64_t v38 = *((void *)v35 - 1);
      v35 -= 8;
      *(void *)uint64_t v37 = v38;
      v37 -= 8;
    }
    while (v35 != v7);
    return __dst;
  }
  uint64_t v42 = 0;
  uint64_t v43 = (v34 >> 3) + 1;
  uint64_t v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v35 = &v13[-v44];
  uint64_t v36 = &v31[-v44];
  uint64_t v45 = v43 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v46 = *(_OWORD *)&v13[v42 - 16];
    BOOL v47 = &v31[v42];
    *((_OWORD *)v47 - 2) = *(_OWORD *)&v13[v42 - 32];
    *((_OWORD *)v47 - 1) = v46;
    v42 -= 32;
    v45 -= 4;
  }
  while (v45);
  if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_33;
  }
  return __dst;
}

void sub_B83944(void **a1, unint64_t a2)
{
  uint64_t v4 = (char *)a1[1];
  uint64_t v5 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v11 = &v4[112 * a2];
      do
      {
        *((_OWORD *)v4 + 5) = 0uLL;
        *((_OWORD *)v4 + 6) = 0uLL;
        *((_OWORD *)v4 + 3) = 0uLL;
        *((_OWORD *)v4 + 4) = 0uLL;
        *((_OWORD *)v4 + 1) = 0uLL;
        *((_OWORD *)v4 + 2) = 0uLL;
        *(_OWORD *)uint64_t v4 = 0uLL;
        *(void *)(v4 + 4) = 0x8000000080000000;
        *(_OWORD *)(v4 + 89) = 0uLL;
        v4 += 112;
      }
      while (v4 != v11);
      uint64_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((v4 - (unsigned char *)*a1) >> 4);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x249249249249249) {
      sub_2E00();
    }
    unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x124924924924924) {
      unint64_t v9 = 0x249249249249249;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x249249249249249) {
        sub_188D718();
      }
      uint64_t v10 = (char *)operator new(112 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    unint64_t v12 = &v10[112 * v6];
    uint64_t v13 = &v10[112 * v9];
    uint64_t v14 = &v12[112 * a2];
    uint64_t v15 = v12;
    do
    {
      *((_OWORD *)v15 + 5) = 0uLL;
      *((_OWORD *)v15 + 6) = 0uLL;
      *((_OWORD *)v15 + 3) = 0uLL;
      *((_OWORD *)v15 + 4) = 0uLL;
      *((_OWORD *)v15 + 1) = 0uLL;
      *((_OWORD *)v15 + 2) = 0uLL;
      *(_OWORD *)uint64_t v15 = 0uLL;
      *(void *)(v15 + 4) = 0x8000000080000000;
      *(_OWORD *)(v15 + 89) = 0uLL;
      v15 += 112;
    }
    while (v15 != v14);
    uint64_t v16 = (char *)*a1;
    unsigned int v17 = (char *)a1[1];
    if (v17 == *a1)
    {
      *a1 = v12;
      a1[1] = v14;
      a1[2] = v13;
      if (!v17) {
        return;
      }
      goto LABEL_29;
    }
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = &v12[v18];
      long long v20 = &v17[v18];
      *((_OWORD *)v19 - 7) = *(_OWORD *)&v17[v18 - 112];
      long long v21 = *(_OWORD *)&v17[v18 - 96];
      long long v22 = *(_OWORD *)&v17[v18 - 80];
      long long v23 = *(_OWORD *)&v17[v18 - 48];
      *((_OWORD *)v19 - 4) = *(_OWORD *)&v17[v18 - 64];
      *((_OWORD *)v19 - 3) = v23;
      *((_OWORD *)v19 - 6) = v21;
      *((_OWORD *)v19 - 5) = v22;
      *((void *)v19 - 3) = 0;
      *((void *)v19 - 2) = 0;
      *((void *)v19 - 4) = 0;
      *((_OWORD *)v19 - 2) = *(_OWORD *)&v17[v18 - 32];
      *((void *)v19 - 2) = *(void *)&v17[v18 - 16];
      *((void *)v20 - 4) = 0;
      *((void *)v20 - 3) = 0;
      *((void *)v20 - 2) = 0;
      *(v19 - 8) = v17[v18 - 8];
      v18 -= 112;
    }
    while (&v17[v18] != v16);
    uint64_t v24 = (char *)*a1;
    unsigned int v17 = (char *)a1[1];
    *a1 = &v12[v18];
    a1[1] = v14;
    a1[2] = v13;
    if (v17 != v24)
    {
      do
      {
        uint64_t v25 = (void *)*((void *)v17 - 4);
        if (v25)
        {
          *((void *)v17 - 3) = v25;
          operator delete(v25);
        }
        v17 -= 112;
      }
      while (v17 != v24);
      unsigned int v17 = v24;
    }
    if (v17)
    {
LABEL_29:
      operator delete(v17);
    }
  }
}

uint64_t sub_B83B8C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = v2 - 112;
        *(void *)(a1 + 16) = v2 - 112;
        uint64_t v5 = *(void **)(v2 - 32);
        if (!v5) {
          break;
        }
        *(void *)(v2 - 24) = v5;
        operator delete(v5);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 112;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_B83BFC(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x249249249249249) {
    sub_2E00();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)) >= 0x124924924924924) {
    unint64_t v6 = 0x249249249249249;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x249249249249249) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(112 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v26 = &v7[112 * v3];
  BOOL v27 = &v7[112 * v6];
  long long v8 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v26 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v26 + 3) = v8;
  *((_OWORD *)v26 + 4) = *(_OWORD *)(a2 + 64);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v26 = *(_OWORD *)a2;
  *((_OWORD *)v26 + 1) = v9;
  sub_B8065C((void *)v26 + 10, (uint64_t *)(a2 + 80));
  v26[104] = *(unsigned char *)(a2 + 104);
  uint64_t v10 = v26;
  uint64_t v11 = (char *)*a1;
  unint64_t v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    uint64_t v19 = (char *)a1[1];
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = &v26[v13];
      uint64_t v15 = &v12[v13];
      *((_OWORD *)v14 - 7) = *(_OWORD *)&v12[v13 - 112];
      long long v16 = *(_OWORD *)&v12[v13 - 96];
      long long v17 = *(_OWORD *)&v12[v13 - 80];
      long long v18 = *(_OWORD *)&v12[v13 - 48];
      *((_OWORD *)v14 - 4) = *(_OWORD *)&v12[v13 - 64];
      *((_OWORD *)v14 - 3) = v18;
      *((_OWORD *)v14 - 6) = v16;
      *((_OWORD *)v14 - 5) = v17;
      *((void *)v14 - 3) = 0;
      *((void *)v14 - 2) = 0;
      *((void *)v14 - 4) = 0;
      *((_OWORD *)v14 - 2) = *(_OWORD *)&v12[v13 - 32];
      *((void *)v14 - 2) = *(void *)&v12[v13 - 16];
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 3) = 0;
      *((void *)v15 - 2) = 0;
      *(v14 - 8) = v12[v13 - 8];
      v13 -= 112;
    }
    while (&v12[v13] != v11);
    uint64_t v19 = (char *)*a1;
    unint64_t v12 = (char *)a1[1];
    uint64_t v10 = &v26[v13];
  }
  *a1 = v10;
  a1[1] = v26 + 112;
  a1[2] = v27;
  if (v12 == v19)
  {
    if (v12) {
LABEL_18:
    }
      operator delete(v12);
  }
  else
  {
    do
    {
      long long v22 = v12 - 112;
      uint64_t v23 = *((void *)v12 - 4);
      if (v23)
      {
        uint64_t v24 = *((void *)v12 - 3);
        long long v21 = (void *)*((void *)v12 - 4);
        if (v24 != v23)
        {
          do
          {
            uint64_t v25 = *(void **)(v24 - 32);
            if (v25)
            {
              *(void *)(v24 - 24) = v25;
              operator delete(v25);
            }
            v24 -= 112;
          }
          while (v24 != v23);
          long long v21 = (void *)*((void *)v12 - 4);
        }
        *((void *)v12 - 3) = v23;
        operator delete(v21);
      }
      v12 -= 112;
    }
    while (v22 != v19);
    unint64_t v12 = v19;
    if (v19) {
      goto LABEL_18;
    }
  }
  return v26 + 112;
}

void sub_B83E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_B83E5C()
{
}

void *sub_B83E70()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_243DE48;
  return result;
}

void sub_B83EA8(uint64_t a1, void *a2)
{
  *a2 = off_243DE48;
}

uint64_t sub_B83ED0()
{
  return 0;
}

uint64_t sub_B83ED8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning16ScheduleGrouping23get_category_comparatorENS2_17category_scheme_tEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning16ScheduleGrouping23get_category_comparatorENS2_17categ"
                                "ory_scheme_tEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning16ScheduleGrouping23get_category_comparatorENS2_17category_scheme_tEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning16ScheduleGrouping23get_category_comparatorENS2_17category_scheme_tEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B83F48()
{
}

void sub_B83F58()
{
}

void *sub_B83F6C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_243DED8;
  result[1] = v3;
  return result;
}

uint64_t sub_B83FB4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_243DED8;
  a2[1] = v2;
  return result;
}

BOOL sub_B83FE0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *a3;
  unsigned int v5 = *(_DWORD *)(*(void *)a2 + 144);
  unint64_t v6 = (int *)sub_A11094((void *)(*(void *)(v3 + 24) + 4136), *(void *)(*(void *)a2 + 124));
  unint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  unsigned int v8 = *v7;
  if (v8 < 5)
  {
    long long v9 = 0;
    goto LABEL_6;
  }
  if (!v7[2])
  {
    long long v9 = 0;
    if (v8 >= 9) {
      goto LABEL_29;
    }
LABEL_6:
    uint64_t v10 = 0;
    goto LABEL_7;
  }
  long long v9 = (char *)v6 + v7[2] + *(unsigned int *)((char *)v6 + v7[2]);
  if (v8 < 9) {
    goto LABEL_6;
  }
LABEL_29:
  uint64_t v30 = v7[4];
  if (!v30) {
    goto LABEL_6;
  }
  uint64_t v10 = (unsigned int *)((char *)v6 + v30 + *(unsigned int *)((char *)v6 + v30));
LABEL_7:
  uint64_t v11 = __ROR8__(*(void *)&v9[8 * *(unsigned __int8 *)(sub_A10764(v10, v5) + 14) + 4], 32);
  unsigned int v12 = *(_DWORD *)(v4 + 144);
  uint64_t v13 = (int *)sub_A11094((void *)(*(void *)(v3 + 24) + 4136), *(void *)(v4 + 124));
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  unsigned int v15 = *v14;
  if (v15 < 5)
  {
    long long v16 = 0;
    goto LABEL_12;
  }
  if (v14[2])
  {
    long long v16 = (char *)v13 + v14[2] + *(unsigned int *)((char *)v13 + v14[2]);
    if (v15 < 9) {
      goto LABEL_12;
    }
  }
  else
  {
    long long v16 = 0;
    if (v15 < 9) {
      goto LABEL_12;
    }
  }
  uint64_t v31 = v14[4];
  if (v31)
  {
    long long v17 = (unsigned int *)((char *)v13 + v31 + *(unsigned int *)((char *)v13 + v31));
    goto LABEL_13;
  }
LABEL_12:
  long long v17 = 0;
LABEL_13:
  uint64_t v18 = __ROR8__(*(void *)&v16[8 * *(unsigned __int8 *)(sub_A10764(v17, v12) + 14) + 4], 32);
  uint64_t v19 = (int *)sub_8DFD1C(*(void *)(*(void *)(v3 + 24) + 4056) + 24, __ROR8__(v11, 32), 0, "line");
  long long v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 >= 7u && (unsigned __int16 v21 = v20[3]) != 0) {
    unint64_t v22 = *(unsigned int *)((char *)v19 + v21 + 4) | ((unint64_t)*(unsigned int *)((char *)v19 + v21) << 32);
  }
  else {
    unint64_t v22 = 0xFFFFFFFFLL;
  }
  uint64_t v23 = (int *)sub_8DFD1C(*(void *)(*(void *)(v3 + 24) + 4056) + 24, __ROR8__(v18, 32), 0, "line");
  uint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
  if (*v24 >= 7u && (unsigned __int16 v25 = v24[3]) != 0)
  {
    unint64_t v26 = *(unsigned int *)((char *)v23 + v25 + 4) | ((unint64_t)*(unsigned int *)((char *)v23 + v25) << 32);
    BOOL v27 = HIDWORD(v22) > HIDWORD(v26);
    if (HIDWORD(v22) < HIDWORD(v26)) {
      return 1;
    }
  }
  else
  {
    LODWORD(v26) = -1;
    BOOL v27 = HIDWORD(v22) != 0;
  }
  return !v27 && v22 < v26;
}

uint64_t sub_B8420C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning16ScheduleGrouping23get_category_comparatorENS2_17category_scheme_tEE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning16ScheduleGrouping23get_category_comparatorENS2_17categ"
                                "ory_scheme_tEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning16ScheduleGrouping23get_category_comparatorENS2_17category_scheme_tEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning16ScheduleGrouping23get_category_comparatorENS2_17category_scheme_tEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B8427C()
{
}

void sub_B8428C()
{
}

void *sub_B842A0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_243DF58;
  result[1] = v3;
  return result;
}

uint64_t sub_B842E8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_243DF58;
  a2[1] = v2;
  return result;
}

BOOL sub_B84314(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *a3;
  unsigned int v5 = *(_DWORD *)(*(void *)a2 + 144);
  unint64_t v6 = (int *)sub_A11094((void *)(*(void *)(v3 + 24) + 4136), *(void *)(*(void *)a2 + 124));
  unint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  unsigned int v8 = *v7;
  if (v8 < 5)
  {
    long long v9 = 0;
    goto LABEL_6;
  }
  if (!v7[2])
  {
    long long v9 = 0;
    if (v8 >= 9) {
      goto LABEL_30;
    }
LABEL_6:
    uint64_t v10 = 0;
    goto LABEL_7;
  }
  long long v9 = (char *)v6 + v7[2] + *(unsigned int *)((char *)v6 + v7[2]);
  if (v8 < 9) {
    goto LABEL_6;
  }
LABEL_30:
  uint64_t v35 = v7[4];
  if (!v35) {
    goto LABEL_6;
  }
  uint64_t v10 = (unsigned int *)((char *)v6 + v35 + *(unsigned int *)((char *)v6 + v35));
LABEL_7:
  uint64_t v11 = __ROR8__(*(void *)&v9[8 * *(unsigned __int8 *)(sub_A10764(v10, v5) + 14) + 4], 32);
  unsigned int v12 = *(_DWORD *)(v4 + 144);
  uint64_t v13 = (int *)sub_A11094((void *)(*(void *)(v3 + 24) + 4136), *(void *)(v4 + 124));
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  unsigned int v15 = *v14;
  if (v15 < 5)
  {
    long long v16 = 0;
    goto LABEL_12;
  }
  if (v14[2])
  {
    long long v16 = (char *)v13 + v14[2] + *(unsigned int *)((char *)v13 + v14[2]);
    if (v15 < 9) {
      goto LABEL_12;
    }
  }
  else
  {
    long long v16 = 0;
    if (v15 < 9) {
      goto LABEL_12;
    }
  }
  uint64_t v36 = v14[4];
  if (v36)
  {
    long long v17 = (unsigned int *)((char *)v13 + v36 + *(unsigned int *)((char *)v13 + v36));
    goto LABEL_13;
  }
LABEL_12:
  long long v17 = 0;
LABEL_13:
  uint64_t v18 = __ROR8__(*(void *)&v16[8 * *(unsigned __int8 *)(sub_A10764(v17, v12) + 14) + 4], 32);
  uint64_t v19 = (int *)sub_8DFD1C(*(void *)(*(void *)(v3 + 24) + 4056) + 24, __ROR8__(v11, 32), 0, "line");
  long long v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 >= 7u && (unsigned __int16 v21 = v20[3]) != 0) {
    unint64_t v22 = *(unsigned int *)((char *)v19 + v21 + 4) | ((unint64_t)*(unsigned int *)((char *)v19 + v21) << 32);
  }
  else {
    unint64_t v22 = 0xFFFFFFFFLL;
  }
  uint64_t v23 = (int *)sub_8DFD1C(*(void *)(*(void *)(v3 + 24) + 4056) + 24, __ROR8__(v18, 32), 0, "line");
  uint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
  if (*v24 >= 7u && (unsigned __int16 v25 = v24[3]) != 0) {
    unint64_t v26 = *(unsigned int *)((char *)v23 + v25 + 4) | ((unint64_t)*(unsigned int *)((char *)v23 + v25) << 32);
  }
  else {
    unint64_t v26 = 0xFFFFFFFFLL;
  }
  BOOL v27 = (int *)sub_8EF9B8(*(void *)(*(void *)(v3 + 24) + 4144) + 24, __ROR8__(v22, 32), 0, "system");
  uint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
  if (*v28 >= 0x23u && (uint64_t v29 = v28[17]) != 0) {
    unsigned int v30 = *(unsigned __int16 *)((char *)v27 + v29);
  }
  else {
    unsigned int v30 = 2;
  }
  uint64_t v31 = (int *)sub_8EF9B8(*(void *)(*(void *)(v3 + 24) + 4144) + 24, __ROR8__(v26, 32), 0, "system");
  uint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31);
  if (*v32 >= 0x23u && (uint64_t v33 = v32[17]) != 0) {
    return v30 < *(unsigned __int16 *)((char *)v31 + v33);
  }
  else {
    return v30 < 2;
  }
}

uint64_t sub_B845B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning16ScheduleGrouping23get_category_comparatorENS2_17category_scheme_tEE3$_2") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning16ScheduleGrouping23get_category_comparatorENS2_17categ"
                                "ory_scheme_tEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning16ScheduleGrouping23get_category_comparatorENS2_17category_scheme_tEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning16ScheduleGrouping23get_category_comparatorENS2_17category_scheme_tEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B84628()
{
}

void sub_B84638()
{
}

__n128 sub_B8464C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_243DFD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_B84698(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_243DFD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_B846C8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  unsigned int v5 = *(_DWORD *)(*(void *)a2 + 144);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = (int *)sub_A11094((void *)(*(void *)(v6 + 24) + 4136), *(void *)(*(void *)a2 + 124));
  unsigned int v8 = (unsigned __int16 *)((char *)v7 - *v7);
  unsigned int v9 = *v8;
  if (v9 < 5)
  {
    uint64_t v10 = 0;
    goto LABEL_6;
  }
  if (!v8[2])
  {
    uint64_t v10 = 0;
    if (v9 >= 9) {
      goto LABEL_25;
    }
LABEL_6:
    uint64_t v11 = 0;
    goto LABEL_7;
  }
  uint64_t v10 = (char *)v7 + v8[2] + *(unsigned int *)((char *)v7 + v8[2]);
  if (v9 < 9) {
    goto LABEL_6;
  }
LABEL_25:
  uint64_t v35 = v8[4];
  if (!v35) {
    goto LABEL_6;
  }
  uint64_t v11 = (unsigned int *)((char *)v7 + v35 + *(unsigned int *)((char *)v7 + v35));
LABEL_7:
  uint64_t v12 = __ROR8__(*(void *)&v10[8 * *(unsigned __int8 *)(sub_A10764(v11, v5) + 14) + 4], 32);
  unsigned int v13 = *(_DWORD *)(v4 + 144);
  uint64_t v14 = (int *)sub_A11094((void *)(*(void *)(v6 + 24) + 4136), *(void *)(v4 + 124));
  unsigned int v15 = (unsigned __int16 *)((char *)v14 - *v14);
  unsigned int v16 = *v15;
  if (v16 < 5)
  {
    long long v17 = 0;
    goto LABEL_12;
  }
  if (v15[2])
  {
    long long v17 = (char *)v14 + v15[2] + *(unsigned int *)((char *)v14 + v15[2]);
    if (v16 < 9) {
      goto LABEL_12;
    }
  }
  else
  {
    long long v17 = 0;
    if (v16 < 9) {
      goto LABEL_12;
    }
  }
  uint64_t v36 = v15[4];
  if (v36)
  {
    uint64_t v18 = (unsigned int *)((char *)v14 + v36 + *(unsigned int *)((char *)v14 + v36));
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v18 = 0;
LABEL_13:
  uint64_t v19 = __ROR8__(*(void *)&v17[8 * *(unsigned __int8 *)(sub_A10764(v18, v13) + 14) + 4], 32);
  unint64_t v20 = __ROR8__(v12, 32);
  unsigned __int16 v21 = (int *)sub_8DFD1C(*(void *)(*(void *)(v6 + 24) + 4056) + 24, v20, 0, "line");
  unint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 >= 7u && (unsigned __int16 v23 = v22[3]) != 0) {
    unint64_t v24 = *(unsigned int *)((char *)v21 + v23 + 4) | ((unint64_t)*(unsigned int *)((char *)v21 + v23) << 32);
  }
  else {
    unint64_t v24 = 0xFFFFFFFFLL;
  }
  unint64_t v25 = __ROR8__(v19, 32);
  unint64_t v26 = (int *)sub_8DFD1C(*(void *)(*(void *)(v6 + 24) + 4056) + 24, v25, 0, "line");
  BOOL v27 = (unsigned __int16 *)((char *)v26 - *v26);
  if (*v27 >= 7u && (unsigned __int16 v28 = v27[3]) != 0) {
    unint64_t v29 = *(unsigned int *)((char *)v26 + v28 + 4) | ((unint64_t)*(unsigned int *)((char *)v26 + v28) << 32);
  }
  else {
    unint64_t v29 = 0xFFFFFFFFLL;
  }
  unint64_t v30 = __ROR8__(v24, 32);
  uint64_t v31 = (int *)sub_8EF9B8(*(void *)(*(void *)(v6 + 24) + 4144) + 24, v30, 0, "system");
  unsigned int v32 = 0;
  uint64_t v33 = (unsigned __int16 *)((char *)v31 - *v31);
  if (*v33 >= 0x25u)
  {
    uint64_t v34 = v33[18];
    if (v34) {
      unsigned int v32 = *((unsigned __int8 *)v31 + v34);
    }
    else {
      unsigned int v32 = 0;
    }
  }
  unint64_t v37 = __ROR8__(v29, 32);
  uint64_t v38 = (int *)sub_8EF9B8(*(void *)(*(void *)(v6 + 24) + 4144) + 24, v37, 0, "system");
  LODWORD(v39) = 0;
  uint64_t v40 = (unsigned __int16 *)((char *)v38 - *v38);
  if (*v40 >= 0x25u)
  {
    uint64_t v39 = v40[18];
    if (v40[18]) {
      LODWORD(v39) = *((unsigned __int8 *)v38 + v39);
    }
  }
  BOOL v41 = v32 >= v39;
  if (v32 != v39) {
    return !v41;
  }
  if (v32 == 1)
  {
    if (HIDWORD(v24) < HIDWORD(v29)) {
      return 1;
    }
    BOOL v41 = HIDWORD(v24) > HIDWORD(v29) || v24 >= v29;
    return !v41;
  }
  if (v32) {
    return 0;
  }
  uint64_t v42 = *(void *)(v6 + 24);
  if (*(_DWORD *)(a1 + 8) == 3)
  {
    uint64_t v43 = (int *)sub_8EF9B8(*(void *)(v42 + 4144) + 24, v30, 0, "system");
    uint64_t v44 = (unsigned __int16 *)((char *)v43 - *v43);
    if (*v44 < 0x23u) {
      goto LABEL_50;
    }
    unsigned int v45 = v44[17];
    if (!v45) {
      goto LABEL_50;
    }
  }
  else
  {
    uint64_t v43 = (int *)sub_8DFD1C(*(void *)(v42 + 4056) + 24, v20, 0, "line");
    BOOL v47 = (unsigned __int16 *)((char *)v43 - *v43);
    if (*v47 < 0x2Bu || (unsigned int v45 = v47[21]) == 0)
    {
LABEL_50:
      unsigned int v48 = 2;
      uint64_t v49 = *(void *)(v6 + 24);
      if (*(_DWORD *)(a1 + 8) == 3) {
        goto LABEL_51;
      }
LABEL_47:
      uint64_t v50 = (int *)sub_8DFD1C(*(void *)(v49 + 4056) + 24, v25, 0, "line");
      uint64_t v51 = (unsigned __int16 *)((char *)v50 - *v50);
      if (*v51 >= 0x2Bu)
      {
        unsigned int v52 = v51[21];
        if (v52) {
          goto LABEL_53;
        }
      }
LABEL_54:
      unsigned int v54 = 2;
      goto LABEL_55;
    }
  }
  unsigned int v48 = *(unsigned __int16 *)((char *)v43 + v45);
  uint64_t v49 = *(void *)(v6 + 24);
  if (*(_DWORD *)(a1 + 8) != 3) {
    goto LABEL_47;
  }
LABEL_51:
  uint64_t v50 = (int *)sub_8EF9B8(*(void *)(v49 + 4144) + 24, v37, 0, "system");
  uint64_t v53 = (unsigned __int16 *)((char *)v50 - *v50);
  if (*v53 < 0x23u) {
    goto LABEL_54;
  }
  unsigned int v52 = v53[17];
  if (!v52) {
    goto LABEL_54;
  }
LABEL_53:
  unsigned int v54 = *(unsigned __int16 *)((char *)v50 + v52);
LABEL_55:
  BOOL v41 = v48 >= v54;
  return !v41;
}

uint64_t sub_B84AEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning16ScheduleGrouping23get_category_comparatorENS2_17category_scheme_tEE3$_3") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning16ScheduleGrouping23get_category_comparatorENS2_17categ"
                                "ory_scheme_tEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning16ScheduleGrouping23get_category_comparatorENS2_17category_scheme_tEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning16ScheduleGrouping23get_category_comparatorENS2_17category_scheme_tEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B84B5C()
{
}

char *sub_B84B68(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  unsigned int v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)unsigned int v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    unsigned int v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unsigned int v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        uint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v13 = (uint64_t *)((char *)v13 + v21);
          uint64_t v19 = (void *)(v5 + v21);
          unint64_t v22 = (_OWORD *)(v5 + 16);
          unsigned __int16 v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *unint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)unsigned int v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    unint64_t v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    unsigned int v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    unsigned int v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    unsigned int v54 = (char *)operator new(8 * v53);
    uint64_t v31 = &v54[8 * (v53 >> 2)];
    unsigned int v32 = &v54[8 * v53];
    if (v30)
    {
      uint64_t v55 = &v54[8 * v53];
      operator delete(v30);
      unsigned int v32 = v55;
      uint64_t v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      uint64_t v35 = v31 + 8;
      uint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  uint64_t v35 = v31 + 8;
  uint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    unint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    uint64_t v39 = v9;
    uint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    uint64_t v39 = v9;
    uint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v39 = &v9[-v41];
    uint64_t v36 = &v31[-v41];
    uint64_t v42 = v31 - 16;
    uint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)uint64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  BOOL v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    unsigned int v32 = v51;
  }
  unsigned int v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_B84EC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_B84ED8(void **a1, uint64_t a2)
{
  unint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((v2 - (unsigned char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x249249249249249) {
    sub_2E00();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - v3) >> 4) > v5) {
    unint64_t v5 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - v3) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - v3) >> 4)) >= 0x124924924924924) {
    unint64_t v7 = 0x249249249249249;
  }
  else {
    unint64_t v7 = v5;
  }
  if (v7)
  {
    if (v7 > 0x249249249249249) {
      sub_188D718();
    }
    uint64_t v8 = operator new(112 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  unsigned int v9 = &v8[112 * v4];
  unint64_t v29 = &v8[112 * v7];
  long long v10 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v9 + 3) = v10;
  *((_OWORD *)v9 + 4) = *(_OWORD *)(a2 + 64);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unsigned int v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v11;
  *((void *)v9 + 10) = 0;
  *((void *)v9 + 11) = 0;
  uint64_t v12 = (char **)(v9 + 88);
  *((void *)v9 + 12) = 0;
  unint64_t v14 = *(unsigned char **)(a2 + 80);
  unsigned int v13 = *(unsigned char **)(a2 + 88);
  int64_t v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0) {
      sub_2E00();
    }
    unint64_t v16 = (char *)operator new(v13 - v14);
    *((void *)v9 + 10) = v16;
    *uint64_t v12 = v16;
    unint64_t v17 = &v16[16 * (v15 >> 4)];
    *((void *)v9 + 12) = v17;
    memcpy(v16, v14, v15);
    *uint64_t v12 = v17;
  }
  v8[112 * v4 + 104] = *(unsigned char *)(a2 + 104);
  unint64_t v18 = v9 + 112;
  if (v2 == v3)
  {
    *a1 = v9;
    a1[1] = v18;
    a1[2] = v29;
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v20 = &v9[v19];
      uint64_t v21 = &v2[v19];
      *((_OWORD *)v20 - 7) = *(_OWORD *)&v2[v19 - 112];
      long long v22 = *(_OWORD *)&v2[v19 - 96];
      long long v23 = *(_OWORD *)&v2[v19 - 80];
      long long v24 = *(_OWORD *)&v2[v19 - 48];
      *((_OWORD *)v20 - 4) = *(_OWORD *)&v2[v19 - 64];
      *((_OWORD *)v20 - 3) = v24;
      *((_OWORD *)v20 - 6) = v22;
      *((_OWORD *)v20 - 5) = v23;
      *((void *)v20 - 3) = 0;
      *((void *)v20 - 2) = 0;
      *((_OWORD *)v20 - 2) = *(_OWORD *)&v2[v19 - 32];
      *((void *)v20 - 2) = *(void *)&v2[v19 - 16];
      *((void *)v21 - 4) = 0;
      *((void *)v21 - 3) = 0;
      *((void *)v21 - 2) = 0;
      *(v20 - 8) = v2[v19 - 8];
      v19 -= 112;
    }
    while (&v2[v19] != v3);
    long long v25 = (char *)*a1;
    uint64_t v2 = (char *)a1[1];
    unint64_t v18 = v9 + 112;
    *a1 = &v9[v19];
    a1[1] = v9 + 112;
    a1[2] = v29;
    if (v2 != v25)
    {
      do
      {
        unint64_t v26 = (void *)*((void *)v2 - 4);
        if (v26)
        {
          *((void *)v2 - 3) = v26;
          operator delete(v26);
        }
        v2 -= 112;
      }
      while (v2 != v25);
      uint64_t v2 = v25;
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v18;
}

void sub_B85144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  unint64_t v7 = *v4;
  if (*v4)
  {
    *unint64_t v5 = v7;
    operator delete(v7);
  }
  sub_B83B8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_B8516C()
{
}

void *sub_B85180(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_243E058;
  result[1] = v3;
  return result;
}

uint64_t sub_B851C8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_243E058;
  a2[1] = v2;
  return result;
}

BOOL sub_B851F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *a3;
  unsigned int v5 = *(_DWORD *)(*(void *)a2 + 144);
  unint64_t v6 = (int *)sub_A11094((void *)(*(void *)(v3 + 24) + 4136), *(void *)(*(void *)a2 + 124));
  unint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 9u && (uint64_t v8 = v7[4]) != 0) {
    unsigned int v9 = (unsigned int *)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
  }
  else {
    unsigned int v9 = 0;
  }
  long long v10 = (unint64_t *)sub_A10764(v9, v5);
  unint64_t v11 = *v10;
  uint64_t v12 = (int *)sub_498D5C(*(void *)(*(void *)(v3 + 24) + 4120) + 24, *v10, 0, "stop");
  unsigned int v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 >= 0xDu && (unsigned __int16 v14 = v13[6]) != 0) {
    unint64_t v15 = *(unsigned int *)((char *)v12 + v14 + 4) | ((unint64_t)*(unsigned int *)((char *)v12 + v14) << 32);
  }
  else {
    unint64_t v15 = 0xFFFFFFFFLL;
  }
  unint64_t v16 = *(void *)(v4 + 124);
  unsigned int v17 = *(_DWORD *)(v4 + 144);
  unint64_t v18 = (int *)sub_A11094((void *)(*(void *)(v3 + 24) + 4136), v16);
  uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 >= 9u && (uint64_t v20 = v19[4]) != 0) {
    uint64_t v21 = (unsigned int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
  }
  else {
    uint64_t v21 = 0;
  }
  long long v22 = (unint64_t *)sub_A10764(v21, v17);
  unint64_t v23 = *v22;
  long long v24 = (int *)sub_498D5C(*(void *)(*(void *)(v3 + 24) + 4120) + 24, *v22, 0, "stop");
  long long v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 >= 0xDu && (unsigned __int16 v26 = v25[6]) != 0) {
    unint64_t v27 = *(unsigned int *)((char *)v24 + v26 + 4) | ((unint64_t)*(unsigned int *)((char *)v24 + v26) << 32);
  }
  else {
    unint64_t v27 = 0xFFFFFFFFLL;
  }
  BOOL result = HIDWORD(v15) != 0;
  BOOL v30 = v27 != -1 && HIDWORD(v27) != 0;
  if (v15 == -1 || !HIDWORD(v15))
  {
    if (v30)
    {
      if (v15 == -1) {
        return 0;
      }
    }
    else
    {
      uint64_t v31 = __ROR8__(v11, 32);
      uint64_t v32 = __ROR8__(v23, 32);
      if (HIDWORD(v31) < HIDWORD(v32)) {
        return 1;
      }
      return HIDWORD(v31) <= HIDWORD(v32) && v31 < v32;
    }
  }
  else if (v30)
  {
    if (HIDWORD(v15) < HIDWORD(v27)) {
      return 1;
    }
    return HIDWORD(v15) <= HIDWORD(v27) && v15 < v27;
  }
  return result;
}

uint64_t sub_B85454(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning16ScheduleGrouping20get_group_comparatorENS2_14group_scheme_tEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning16ScheduleGrouping20get_group_comparatorENS2_14group_scheme_tEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning16ScheduleGrouping20get_group_comparatorENS2_14group_scheme_tEE3$_0"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning16ScheduleGrouping20get_group_comparatorENS2_14group_scheme_tEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

_UNKNOWN **sub_B854C4()
{
}

void sub_B854D4()
{
}

void *sub_B854E8(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_243E0D8;
  result[1] = v3;
  return result;
}

uint64_t sub_B85530(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_243E0D8;
  a2[1] = v2;
  return result;
}

BOOL sub_B8555C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  unsigned int v6 = *(_DWORD *)(*a2 + 144);
  unint64_t v7 = (int *)sub_A11094((void *)(*(void *)(v3 + 24) + 4136), *(void *)(*a2 + 124));
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0) {
    long long v10 = (unsigned int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
  }
  else {
    long long v10 = 0;
  }
  unint64_t v11 = (unint64_t *)sub_A10764(v10, v6);
  uint64_t v12 = (int *)sub_498D5C(*(void *)(*(void *)(v3 + 24) + 4120) + 24, *v11, 0, "stop");
  unsigned int v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 >= 0xDu && (unsigned __int16 v14 = v13[6]) != 0) {
    unint64_t v15 = *(unsigned int *)((char *)v12 + v14 + 4) | ((unint64_t)*(unsigned int *)((char *)v12 + v14) << 32);
  }
  else {
    unint64_t v15 = 0xFFFFFFFFLL;
  }
  unsigned int v16 = *(_DWORD *)(v5 + 144);
  unsigned int v17 = (int *)sub_A11094((void *)(*(void *)(v3 + 24) + 4136), *(void *)(v5 + 124));
  unint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 9u && (uint64_t v19 = v18[4]) != 0) {
    uint64_t v20 = (unsigned int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
  }
  else {
    uint64_t v20 = 0;
  }
  uint64_t v21 = (unint64_t *)sub_A10764(v20, v16);
  long long v22 = (int *)sub_498D5C(*(void *)(*(void *)(v3 + 24) + 4120) + 24, *v21, 0, "stop");
  unint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v23 >= 0xDu && (unsigned __int16 v24 = v23[6]) != 0) {
    unint64_t v25 = *(unsigned int *)((char *)v22 + v24 + 4) | ((unint64_t)*(unsigned int *)((char *)v22 + v24) << 32);
  }
  else {
    unint64_t v25 = 0xFFFFFFFFLL;
  }
  BOOL result = HIDWORD(v15) != 0;
  BOOL v28 = v25 != -1 && HIDWORD(v25) != 0;
  if (v15 == -1 || !HIDWORD(v15))
  {
    if (v28)
    {
      if (v15 == -1) {
        return 0;
      }
    }
    else
    {
      uint64_t v29 = sub_A104E8((void *)(*(void *)(v3 + 24) + 4136), *(void *)(v4 + 124), *(_DWORD *)(v4 + 144), *(_DWORD *)(v4 + 132));
      BOOL v30 = (int *)sub_369F8C(*(void *)(*(void *)(v3 + 24) + 4184) + 24, __ROR8__(v29, 32), 0, "trip");
      uint64_t v31 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v31 >= 7u && (unsigned __int16 v32 = v31[3]) != 0) {
        unint64_t v33 = *(unsigned int *)((char *)v30 + v32 + 4) | ((unint64_t)*(unsigned int *)((char *)v30 + v32) << 32);
      }
      else {
        unint64_t v33 = 0xFFFFFFFFLL;
      }
      uint64_t v34 = (int *)sub_8DFD1C(*(void *)(*(void *)(v3 + 24) + 4056) + 24, __ROR8__(v33, 32), 0, "line");
      uint64_t v35 = (unsigned __int16 *)((char *)v34 - *v34);
      if (*v35 >= 0x2Bu && (uint64_t v36 = v35[21]) != 0) {
        unsigned int v37 = *(unsigned __int16 *)((char *)v34 + v36);
      }
      else {
        unsigned int v37 = 2;
      }
      uint64_t v38 = sub_A104E8((void *)(*(void *)(v3 + 24) + 4136), *(void *)(v5 + 124), *(_DWORD *)(v5 + 144), *(_DWORD *)(v5 + 132));
      uint64_t v39 = (int *)sub_369F8C(*(void *)(*(void *)(v3 + 24) + 4184) + 24, __ROR8__(v38, 32), 0, "trip");
      uint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
      if (*v40 >= 7u && (unsigned __int16 v41 = v40[3]) != 0) {
        unint64_t v42 = *(unsigned int *)((char *)v39 + v41 + 4) | ((unint64_t)*(unsigned int *)((char *)v39 + v41) << 32);
      }
      else {
        unint64_t v42 = 0xFFFFFFFFLL;
      }
      uint64_t v43 = (int *)sub_8DFD1C(*(void *)(*(void *)(v3 + 24) + 4056) + 24, __ROR8__(v42, 32), 0, "line");
      uint64_t v44 = (unsigned __int16 *)((char *)v43 - *v43);
      if (*v44 >= 0x2Bu && (uint64_t v45 = v44[21]) != 0) {
        unsigned int v46 = *(unsigned __int16 *)((char *)v43 + v45);
      }
      else {
        unsigned int v46 = 2;
      }
      return v37 < v46;
    }
  }
  else if (v28)
  {
    return HIDWORD(v15) < HIDWORD(v25) || HIDWORD(v15) <= HIDWORD(v25) && v15 < v25;
  }
  return result;
}

uint64_t sub_B858FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning16ScheduleGrouping20get_group_comparatorENS2_14group_scheme_tEE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning16ScheduleGrouping20get_group_comparatorENS2_14group_scheme_tEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning16ScheduleGrouping20get_group_comparatorENS2_14group_scheme_tEE3$_1"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning16ScheduleGrouping20get_group_comparatorENS2_14group_scheme_tEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

_UNKNOWN **sub_B8596C()
{
}

char *sub_B85978(void **a1, unsigned char *a2, _DWORD *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 2;
  uint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)uint64_t v9 = *a3;
      a1[1] = v9 + 4;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 4);
    uint64_t v12 = v11 >> 2;
    unsigned int v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      uint64_t v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      unint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 4;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x2C)
      {
        uint64_t v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 2) + 1;
          uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          unsigned int v13 = (int *)((char *)v13 + v21);
          uint64_t v19 = (_DWORD *)(v5 + v21);
          long long v22 = (_OWORD *)(v5 + 16);
          unint64_t v23 = (long long *)(4 * v12 + 4 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *long long v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        int v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 4) {
      memmove((void *)(v5 - 4 * v12), v9, v11);
    }
    *(_DWORD *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v26 >> 62) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 1 > v26) {
    unint64_t v26 = v28 >> 1;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 62) {
      sub_188D718();
    }
    BOOL v30 = (char *)operator new(4 * v29);
    uint64_t v31 = &v30[4 * v8];
    unsigned __int16 v32 = &v30[4 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    BOOL v30 = 0;
    uint64_t v31 = (char *)(4 * v8);
    unsigned __int16 v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 1;
    }
    if (v52 >> 62) {
      sub_188D718();
    }
    unint64_t v53 = (char *)operator new(4 * v52);
    uint64_t v31 = &v53[v52 & 0xFFFFFFFFFFFFFFFCLL];
    unsigned __int16 v32 = &v53[4 * v52];
    if (v30)
    {
      unsigned int v54 = &v53[4 * v52];
      operator delete(v30);
      unsigned __int16 v32 = v54;
      uint64_t v34 = (char *)*a1;
      *(_DWORD *)uint64_t v31 = *a3;
      uint64_t v35 = v31 + 4;
      uint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 4 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(_DWORD *)uint64_t v31 = *a3;
  uint64_t v35 = v31 + 4;
  uint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    unsigned int v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    unint64_t v38 = v37 - v34 - 4;
    uint64_t v39 = v9;
    uint64_t v36 = v31;
    if (v38 < 0x2C) {
      goto LABEL_59;
    }
    uint64_t v39 = v9;
    uint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 2) + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v39 = &v9[-v41];
    uint64_t v36 = &v31[-v41];
    unint64_t v42 = v31 - 16;
    uint64_t v43 = (long long *)(v6 + 4 * v8 - 16);
    uint64_t v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)unint64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_59:
      do
      {
        int v46 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v36 - 1) = v46;
        v36 -= 4;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  BOOL v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    unsigned __int16 v32 = v51;
    uint64_t v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34) {
    operator delete(v34);
  }
  return v31;
}

void sub_B85CD0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B85CE8(uint64_t a1, void *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25DFBE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25DFBE8))
  {
    char v18 = 0;
    sub_B86544(__p, "in_service", &v18);
    char v17 = 1;
    sub_B86544(v21, "min_total_walking_duration", &v17);
    char v16 = 2;
    sub_B86544(v23, "min_on_street_walking_duration", &v16);
    char v15 = 3;
    sub_B86544(&v25, "max_absolute_system_popularity", &v15);
    char v14 = 4;
    sub_B86544(&v27, "max_absolute_system_popularity_log", &v14);
    char v13 = 5;
    sub_B86544(&v29, "max_absolute_line_popularity", &v13);
    char v12 = 6;
    sub_B86544(&v31, "max_absolute_line_popularity_log", &v12);
    char v11 = 7;
    sub_B86544(&v33, "max_absolute_stop_or_station_popularity", &v11);
    char v10 = 8;
    sub_B86544(&v35, "max_absolute_stop_or_station_popularity_log", &v10);
    char v9 = 9;
    sub_B86544(&v37, "max_system_significance", &v9);
    sub_B86604((uint64_t)qword_25DFC00, (uint64_t)__p, 10);
    if (v38 < 0)
    {
      operator delete(v37);
      if ((v36 & 0x80000000) == 0)
      {
LABEL_16:
        if ((v34 & 0x80000000) == 0) {
          goto LABEL_17;
        }
        goto LABEL_41;
      }
    }
    else if ((v36 & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(v35);
    if ((v34 & 0x80000000) == 0)
    {
LABEL_17:
      if ((v32 & 0x80000000) == 0) {
        goto LABEL_18;
      }
      goto LABEL_42;
    }
LABEL_41:
    operator delete(v33);
    if ((v32 & 0x80000000) == 0)
    {
LABEL_18:
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_43;
    }
LABEL_42:
    operator delete(v31);
    if ((v30 & 0x80000000) == 0)
    {
LABEL_19:
      if ((v28 & 0x80000000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_44;
    }
LABEL_43:
    operator delete(v29);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_20:
      if ((v26 & 0x80000000) == 0) {
        goto LABEL_21;
      }
      goto LABEL_45;
    }
LABEL_44:
    operator delete(v27);
    if ((v26 & 0x80000000) == 0)
    {
LABEL_21:
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_46;
    }
LABEL_45:
    operator delete(v25);
    if ((v24 & 0x80000000) == 0)
    {
LABEL_22:
      if ((v22 & 0x80000000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_47;
    }
LABEL_46:
    operator delete(v23[0]);
    if ((v22 & 0x80000000) == 0)
    {
LABEL_23:
      if ((v20 & 0x80000000) == 0)
      {
LABEL_24:
        __cxa_guard_release(&qword_25DFBE8);
        goto LABEL_2;
      }
LABEL_48:
      operator delete(*(void **)__p);
      goto LABEL_24;
    }
LABEL_47:
    operator delete(v21[0]);
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_48;
  }
LABEL_2:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25DFBF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25DFBF0))
  {
    char v18 = 0;
    sub_B86544(__p, "sum", &v18);
    char v17 = 1;
    sub_B86544(v21, "max", &v17);
    char v16 = 2;
    sub_B86544(v23, "scale", &v16);
    sub_B86688((uint64_t)qword_25DFC28, (uint64_t)__p, 3);
    if (v24 < 0)
    {
      operator delete(v23[0]);
      if ((v22 & 0x80000000) == 0)
      {
LABEL_28:
        if ((v20 & 0x80000000) == 0)
        {
LABEL_29:
          __cxa_guard_release(&qword_25DFBF0);
          goto LABEL_3;
        }
LABEL_38:
        operator delete(*(void **)__p);
        goto LABEL_29;
      }
    }
    else if ((v22 & 0x80000000) == 0)
    {
      goto LABEL_28;
    }
    operator delete(v21[0]);
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_38;
  }
LABEL_3:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25DFBF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25DFBF8))
  {
    char v18 = 0;
    sub_B86544(__p, "weighted_sum", &v18);
    char v17 = 1;
    sub_B86544(v21, "weighted_product", &v17);
    sub_B8670C((uint64_t)qword_25DFC50, (uint64_t)__p, 2);
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    if (v20 < 0) {
      operator delete(*(void **)__p);
    }
    __cxa_guard_release(&qword_25DFBF8);
  }
  char v20 = 19;
  strcpy(__p, "schedule_properties");
  uint64_t v4 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_B86790(a1, v4);
  if (v20 < 0) {
    operator delete(*(void **)__p);
  }
  char v20 = 15;
  strcpy(__p, "cell_properties");
  unint64_t v5 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_B86790(a1 + 88, v5);
  if (v20 < 0) {
    operator delete(*(void **)__p);
  }
  char v20 = 16;
  strcpy(__p, "group_properties");
  unint64_t v6 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_B86790(a1 + 176, v6);
  if (v20 < 0) {
    operator delete(*(void **)__p);
  }
  char v20 = 19;
  strcpy(__p, "category_properties");
  uint64_t v7 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_B86790(a1 + 264, v7);
  if (v20 < 0) {
    operator delete(*(void **)__p);
  }
  return a1;
}

void sub_B86288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,int a62,__int16 a63)
{
  if (a73 < 0)
  {
    operator delete(v73[36]);
    if ((a72 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a65 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a72 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v73[32]);
  if ((a65 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a58 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v73[28]);
  if ((a58 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a51 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v73[24]);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a44 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  operator delete(v73[20]);
  if ((a44 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a37 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v73[16]);
  if ((a37 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a30 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a32);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a23 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a25);
  if ((a23 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a16 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_21:
  operator delete(a18);
  if ((a16 & 0x80000000) == 0)
  {
LABEL_12:
    __cxa_guard_abort(&qword_25DFBE8);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(__p);
  goto LABEL_12;
}

void sub_B8651C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_B86544(unsigned char *a1, char *__s, unsigned char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v8 = operator new(v9 + 1);
    *((void *)a1 + 1) = v7;
    *((void *)a1 + 2) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
  }
  else
  {
    a1[23] = v6;
    uint64_t v8 = a1;
    if (!v6) {
      goto LABEL_9;
    }
  }
  memmove(v8, __s, v7);
LABEL_9:
  *((unsigned char *)v8 + v7) = 0;
  a1[24] = *a3;
  return a1;
}

uint64_t sub_B86604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      sub_B876CC(a1, a2, a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_B86668(_Unwind_Exception *a1)
{
  unint64_t v3 = *(void ***)(v1 + 16);
  if (v3) {
    sub_20A6300(v3);
  }
  sub_20A62E8((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B86688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      sub_B87B40(a1, a2, a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_B866EC(_Unwind_Exception *a1)
{
  unint64_t v3 = *(void ***)(v1 + 16);
  if (v3) {
    sub_20A6300(v3);
  }
  sub_20A62E8((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B8670C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      sub_B87FB4(a1, a2, a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_B86770(_Unwind_Exception *a1)
{
  unint64_t v3 = *(void ***)(v1 + 16);
  if (v3) {
    sub_20A6300(v3);
  }
  sub_20A62E8((void **)v1);
  _Unwind_Resume(a1);
}

void sub_B86790(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  char v16 = 16;
  strcpy(__p, "enabled_criteria");
  uint64_t v4 = sub_560F4(a2, (uint64_t)__p);
  uint64_t v5 = v4;
  if (v16 < 0)
  {
    operator delete(*(void **)__p);
    size_t v6 = *(uint64_t **)(v5 + 16);
    if (!v6) {
      goto LABEL_11;
    }
  }
  else
  {
    size_t v6 = *(uint64_t **)(v4 + 16);
    if (!v6) {
      goto LABEL_11;
    }
  }
  do
  {
    size_t v7 = sub_B8703C(qword_25DFC00, (uint64_t)(v6 + 2));
    if (!v7) {
      sub_5AE8("unordered_map::at: key not found");
    }
    if (*((_DWORD *)v6 + 12) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    uint64_t v8 = *((unsigned __int8 *)v7 + 40);
    uint64_t v9 = (void *)v6[5];
    char v16 = 6;
    strcpy(__p, "weight");
    *(double *)(a1 + 8 * v8) = sub_5C7E8(v9, (uint64_t)__p);
    if (v16 < 0) {
      operator delete(*(void **)__p);
    }
    size_t v6 = (uint64_t *)*v6;
  }
  while (v6);
LABEL_11:
  strcpy(__p, "criteria_normalisation");
  char v16 = 22;
  uint64_t v10 = sub_561B0(a2, (uint64_t)__p);
  char v11 = sub_B8726C(qword_25DFC28, v10);
  if (!v11) {
    sub_5AE8("unordered_map::at: key not found");
  }
  *(unsigned char *)(a1 + 80) = *((unsigned char *)v11 + 40);
  if (v16 < 0) {
    operator delete(*(void **)__p);
  }
  char v16 = 17;
  strcpy(__p, "scoring_algorithm");
  uint64_t v12 = sub_561B0(a2, (uint64_t)__p);
  char v13 = sub_B8749C(qword_25DFC50, v12);
  if (!v13) {
    sub_5AE8("unordered_map::at: key not found");
  }
  *(unsigned char *)(a1 + 81) = *((unsigned char *)v13 + 40);
  if (v16 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_B869C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_B869F0(uint64_t a1, void *a2)
{
  uint64_t v2 = sub_B85CE8(a1, a2);
  double result = 0.0;
  *(_OWORD *)(v2 + 352) = xmmword_20EE300;
  *(void *)(v2 + 376) = 0;
  *(void *)(v2 + 384) = 0;
  *(void *)(v2 + 368) = 0;
  return result;
}

void sub_B86A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  for (uint64_t i = *(void *)(a2 + 32); v2 != i; v2 += 160)
    sub_B88428(a1, a2, (void *)(v2 + 72));
}

void sub_B86A70(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v6 = *(void *)(v2 + 80);
    uint64_t i = *(void *)(v2 + 88);
    if (v6 != i) {
      goto LABEL_5;
    }
    while (1)
    {
      v2 += 112;
      if (v2 == v3) {
        break;
      }
      uint64_t v6 = *(void *)(v2 + 80);
      for (uint64_t i = *(void *)(v2 + 88); v6 != i; v6 += 112)
LABEL_5:
        sub_B89D48(a1, (uint64_t)a2, (void *)(v6 + 80));
    }
  }
}

void sub_B86AF4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      sub_B8A23C(a1, (uint64_t)a2, (void *)(v2 + 80));
      v2 += 112;
    }
    while (v2 != v3);
  }
}

void sub_B86B48(uint64_t a1, void *a2)
{
}

void sub_B86B50(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = *(char **)(a1 + 368);
  *(void *)(a1 + 376) = v5;
  *(void *)(a1 + 352) = 0;
  uint64_t v6 = a3[1] - *a3;
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v43 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 4);
    while (1)
    {
      uint64_t v8 = 0;
      unint64_t v47 = v7 + 1;
      while (2)
      {
        uint64_t v10 = v5;
        uint64_t v11 = *v3 + 112 * v7;
        switch((char)v8)
        {
          case 0:
            if (*(unsigned char *)v11) {
              double v12 = 1.0;
            }
            else {
              double v12 = 0.0;
            }
            uint64_t v13 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v7) {
              goto LABEL_35;
            }
            goto LABEL_7;
          case 1:
            int v14 = *(_DWORD *)(v11 + 4);
            goto LABEL_25;
          case 2:
            int v14 = *(_DWORD *)(v11 + 8);
LABEL_25:
            int v15 = v14 / 10;
            int v16 = v14 % 10;
            if (v14 < 0) {
              char v17 = -5;
            }
            else {
              char v17 = 5;
            }
            double v12 = (double)(int)(v15
                              + (((103 * (char)(v17 + v16)) >> 15) & 1)
                              + ((103 * (char)(v17 + v16)) >> 10));
            uint64_t v13 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v7) {
              goto LABEL_35;
            }
            goto LABEL_7;
          case 3:
            double v12 = *(double *)(v11 + 16);
            uint64_t v13 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v7) {
              goto LABEL_35;
            }
            goto LABEL_7;
          case 4:
            double v12 = *(double *)(v11 + 24);
            uint64_t v13 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v7) {
              goto LABEL_35;
            }
            goto LABEL_7;
          case 5:
            double v12 = *(double *)(v11 + 32);
            uint64_t v13 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v7) {
              goto LABEL_35;
            }
            goto LABEL_7;
          case 6:
            double v12 = *(double *)(v11 + 40);
            uint64_t v13 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v7) {
              goto LABEL_35;
            }
            goto LABEL_7;
          case 7:
            double v12 = *(double *)(v11 + 48);
            uint64_t v13 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v7) {
              goto LABEL_35;
            }
            goto LABEL_7;
          case 8:
            double v12 = *(double *)(v11 + 56);
            uint64_t v13 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v7) {
              goto LABEL_35;
            }
            goto LABEL_7;
          case 9:
            double v12 = *(double *)(v11 + 64);
            uint64_t v13 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) > v7) {
              goto LABEL_7;
            }
LABEL_35:
            *(void *)(a1 + 352) = v47;
            unint64_t v18 = v13 * v47;
            uint64_t v19 = *(unsigned char **)(a1 + 376);
            unint64_t v20 = (v19 - v10) >> 3;
            unint64_t v21 = v13 * v47 - v20;
            if (v13 * v47 <= v20)
            {
              if (v18 < v20)
              {
                uint64_t v9 = &v10[8 * v18];
LABEL_6:
                *(void *)(a1 + 376) = v9;
              }
LABEL_7:
              uint64_t v5 = v10;
              goto LABEL_8;
            }
            uint64_t v22 = *(void *)(a1 + 384);
            if (v21 <= (v22 - (uint64_t)v19) >> 3)
            {
              bzero(*(void **)(a1 + 376), 8 * v21);
              uint64_t v9 = &v19[8 * v21];
              goto LABEL_6;
            }
            if (v18 >> 61) {
              sub_2E00();
            }
            uint64_t v23 = v22 - (void)v10;
            if (v23 >> 2 > v18) {
              unint64_t v18 = v23 >> 2;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
            }
            if (v18 >> 61) {
              sub_188D718();
            }
            uint64_t v45 = 8 * v18;
            char v24 = operator new(8 * v18);
            int v46 = &v24[8 * v20];
            size_t v25 = 8 * v21;
            bzero(v46, v25);
            if (v19 == v10)
            {
              uint64_t v27 = v45;
              uint64_t v5 = &v24[8 * v20];
              goto LABEL_54;
            }
            unint64_t v26 = v19 - 8 - v10;
            if (v26 < 0x58)
            {
              uint64_t v27 = v45;
              uint64_t v5 = &v24[8 * v20];
              do
              {
LABEL_53:
                uint64_t v35 = *((void *)v19 - 1);
                v19 -= 8;
                *((void *)v5 - 1) = v35;
                v5 -= 8;
              }
              while (v19 != v10);
              goto LABEL_54;
            }
            uint64_t v27 = v45;
            uint64_t v5 = &v24[8 * v20];
            if ((unint64_t)(v10 - v24) < 0x20) {
              goto LABEL_53;
            }
            uint64_t v28 = (v26 >> 3) + 1;
            uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
            char v30 = &v19[-v29];
            uint64_t v5 = &v46[-v29];
            uint64_t v31 = &v24[8 * v20 - 16];
            char v32 = (long long *)(v19 - 16);
            uint64_t v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v34 = *v32;
              *(v31 - 1) = *(v32 - 1);
              *uint64_t v31 = v34;
              v31 -= 2;
              v32 -= 2;
              v33 -= 4;
            }
            while (v33);
            uint64_t v19 = v30;
            if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_53;
            }
LABEL_54:
            *(void *)(a1 + 368) = v5;
            *(void *)(a1 + 376) = &v46[v25];
            *(void *)(a1 + 384) = &v24[v27];
            uint64_t v3 = a3;
            if (v10)
            {
              operator delete(v10);
              uint64_t v13 = *(void *)(a1 + 360);
              uint64_t v5 = *(char **)(a1 + 368);
            }
LABEL_8:
            *(double *)&v5[8 * v8 + 8 * v13 * v7] = v12;
            if (++v8 != 10) {
              continue;
            }
            ++v7;
            if (v47 == v43) {
              goto LABEL_56;
            }
            break;
          default:
            exception = __cxa_allocate_exception(0x40uLL);
            int64_t v48 = (char *)operator new(0x28uLL);
            long long v49 = xmmword_20B9960;
            strcpy(v48, "Requested to evaluate unknown criterion");
            unint64_t v42 = (void *)sub_2F404((uint64_t)exception, (long long *)&v48);
        }
        break;
      }
    }
  }
LABEL_56:
  sub_B88918(a1 + 352, *(unsigned __int8 *)(a1 + 344));
  sub_B88FBC((uint64_t *)&v48, (unint64_t *)(a1 + 352), (double *)(a1 + 264), *(unsigned __int8 *)(a1 + 345));
  char v36 = v48;
  if ((char *)v49 == v48)
  {
    if (!v48) {
      return;
    }
  }
  else
  {
    uint64_t v37 = (uint64_t)(v49 - (void)v48) >> 3;
    char v38 = (void *)(*v3 + 72);
    uint64_t v39 = v48;
    do
    {
      uint64_t v40 = *(void *)v39;
      v39 += 8;
      *char v38 = v40;
      v38 += 14;
      --v37;
    }
    while (v37);
  }
  *(void *)&long long v49 = v36;
  operator delete(v36);
}

void sub_B86FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_B8703C(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  double v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          double result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        double result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_B8726C(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  double v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          double result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        double result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_B8749C(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  double v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          double result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        double result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_B876CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      char v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            char v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          char v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  char v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)char v25 = 0;
  *((void *)v25 + 1) = v10;
  unint64_t v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  v25[40] = *(unsigned char *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        char v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        char v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      char v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *char v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  char v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *char v30 = *v29;
  *uint64_t v29 = v42[0];
LABEL_92:
  char v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_B87B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B87B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_B87B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      char v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            char v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          char v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  char v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)char v25 = 0;
  *((void *)v25 + 1) = v10;
  unint64_t v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  v25[40] = *(unsigned char *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        char v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        char v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      char v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *char v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  char v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *char v30 = *v29;
  *uint64_t v29 = v42[0];
LABEL_92:
  char v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_B87F88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B87F9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_B87FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      char v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            char v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          char v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  char v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)char v25 = 0;
  *((void *)v25 + 1) = v10;
  unint64_t v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  v25[40] = *(unsigned char *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        char v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        char v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      char v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *char v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  char v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *char v30 = *v29;
  *uint64_t v29 = v42[0];
LABEL_92:
  char v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_B883FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B88410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B88428(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = a3;
  *(void *)(a1 + 376) = *(void *)(a1 + 368);
  *(void *)(a1 + 352) = 0;
  uint64_t v5 = a3[1] - *a3;
  if (v5)
  {
    unint64_t v6 = 0;
    unint64_t v7 = (void *)(a1 + 368);
    uint64_t v48 = v5 >> 4;
    unint64_t v8 = (void *)(a2 + 48);
    unint64_t v53 = (void *)(a1 + 368);
    while (1)
    {
      uint64_t v9 = 0;
      unint64_t v54 = v6;
      unint64_t v55 = v6 + 1;
      while (2)
      {
        uint64_t v10 = sub_B76884(v8, *(unsigned int *)(*v3 + 16 * v6));
        switch((char)v9)
        {
          case 0:
            if (*(unsigned char *)v10) {
              double v11 = 1.0;
            }
            else {
              double v11 = 0.0;
            }
            uint64_t v12 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v6) {
              goto LABEL_34;
            }
            goto LABEL_7;
          case 1:
            int v13 = *(_DWORD *)(v10 + 4);
            goto LABEL_24;
          case 2:
            int v13 = *(_DWORD *)(v10 + 8);
LABEL_24:
            int v14 = v13 / 10;
            int v15 = v13 % 10;
            if (v13 < 0) {
              char v16 = -5;
            }
            else {
              char v16 = 5;
            }
            double v11 = (double)(int)(v14
                              + (((103 * (char)(v16 + v15)) >> 15) & 1)
                              + ((103 * (char)(v16 + v15)) >> 10));
            uint64_t v12 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v6) {
              goto LABEL_34;
            }
            goto LABEL_7;
          case 3:
            double v11 = *(double *)(v10 + 16);
            uint64_t v12 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v6) {
              goto LABEL_34;
            }
            goto LABEL_7;
          case 4:
            double v11 = *(double *)(v10 + 24);
            uint64_t v12 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v6) {
              goto LABEL_34;
            }
            goto LABEL_7;
          case 5:
            double v11 = *(double *)(v10 + 32);
            uint64_t v12 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v6) {
              goto LABEL_34;
            }
            goto LABEL_7;
          case 6:
            double v11 = *(double *)(v10 + 40);
            uint64_t v12 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v6) {
              goto LABEL_34;
            }
            goto LABEL_7;
          case 7:
            double v11 = *(double *)(v10 + 48);
            uint64_t v12 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v6) {
              goto LABEL_34;
            }
            goto LABEL_7;
          case 8:
            double v11 = *(double *)(v10 + 56);
            uint64_t v12 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v6) {
              goto LABEL_34;
            }
            goto LABEL_7;
          case 9:
            double v11 = *(double *)(v10 + 64);
            uint64_t v12 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) > v6) {
              goto LABEL_7;
            }
LABEL_34:
            unint64_t v17 = v8;
            *(void *)(a1 + 352) = v55;
            unint64_t v18 = v12 * v55;
            uint64_t v19 = *(unsigned char **)(a1 + 368);
            uint64_t v20 = *(unsigned char **)(a1 + 376);
            unint64_t v21 = (v20 - v19) >> 3;
            BOOL v22 = v12 * v55 >= v21;
            unint64_t v23 = v12 * v55 - v21;
            if (v12 * v55 <= v21)
            {
              unint64_t v7 = v53;
              unint64_t v8 = v17;
              if (!v22) {
                *(void *)(a1 + 376) = &v19[8 * v18];
              }
              goto LABEL_6;
            }
            uint64_t v24 = *(void *)(a1 + 384);
            if (v23 <= (v24 - (uint64_t)v20) >> 3)
            {
              bzero(*(void **)(a1 + 376), 8 * v23);
              *(void *)(a1 + 376) = &v20[8 * v23];
              unint64_t v7 = v53;
              unint64_t v8 = v17;
LABEL_6:
              unint64_t v6 = v54;
              goto LABEL_7;
            }
            if (v18 >> 61) {
              sub_2E00();
            }
            uint64_t v25 = v24 - (void)v19;
            if (v25 >> 2 > v18) {
              unint64_t v18 = v25 >> 2;
            }
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
            }
            if (v18 >> 61) {
              sub_188D718();
            }
            uint64_t v52 = 8 * v18;
            uint64_t v51 = operator new(8 * v18);
            unint64_t v26 = &v51[8 * v21];
            uint64_t v50 = 8 * v23;
            bzero(v26, 8 * v23);
            if (v20 == v19)
            {
              uint64_t v29 = &v51[8 * v21];
              unint64_t v8 = v17;
              float v28 = v53;
              unint64_t v6 = v54;
              char v30 = v51;
              uint64_t v31 = v52;
              uint64_t v32 = v50;
              goto LABEL_53;
            }
            unint64_t v27 = v20 - 8 - v19;
            float v28 = v53;
            unint64_t v8 = v17;
            if (v27 < 0x58)
            {
              uint64_t v29 = &v51[8 * v21];
              unint64_t v6 = v54;
              char v30 = v51;
              uint64_t v31 = v52;
              uint64_t v32 = v50;
              do
              {
LABEL_52:
                uint64_t v40 = *((void *)v20 - 1);
                v20 -= 8;
                *((void *)v29 - 1) = v40;
                v29 -= 8;
              }
              while (v20 != v19);
              goto LABEL_53;
            }
            char v30 = v51;
            uint64_t v31 = v52;
            uint64_t v29 = &v51[8 * v21];
            unint64_t v6 = v54;
            uint64_t v32 = v50;
            if ((unint64_t)(v19 - v51) < 0x20) {
              goto LABEL_52;
            }
            uint64_t v33 = (v27 >> 3) + 1;
            uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            int8x8_t v35 = &v20[-v34];
            uint64_t v29 = &v26[-v34];
            unint64_t v36 = &v51[8 * v21 - 16];
            uint8x8_t v37 = (long long *)(v20 - 16);
            uint64_t v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v39 = *v37;
              *(v36 - 1) = *(v37 - 1);
              _OWORD *v36 = v39;
              v36 -= 2;
              v37 -= 2;
              v38 -= 4;
            }
            while (v38);
            uint64_t v20 = v35;
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_52;
            }
LABEL_53:
            *(void *)(a1 + 368) = v29;
            *(void *)(a1 + 376) = &v26[v32];
            *(void *)(a1 + 384) = &v30[v31];
            unint64_t v3 = a3;
            unint64_t v7 = v28;
            if (v19)
            {
              operator delete(v19);
              uint64_t v12 = *(void *)(a1 + 360);
            }
LABEL_7:
            *(double *)(*v7 + 8 * (v9 + v12 * v6)) = v11;
            if (++v9 != 10) {
              continue;
            }
            unint64_t v6 = v55;
            if (v55 == v48) {
              goto LABEL_55;
            }
            break;
          default:
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v56, "Requested to evaluate unknown criterion");
            unint64_t v47 = (void *)sub_2F404((uint64_t)exception, &v56);
        }
        break;
      }
    }
  }
LABEL_55:
  sub_B88918(a1 + 352, *(unsigned __int8 *)(a1 + 80));
  sub_B88FBC((uint64_t *)&v56, (unint64_t *)(a1 + 352), (double *)a1, *(unsigned __int8 *)(a1 + 81));
  uint64_t v41 = (void *)v56;
  if (*((void *)&v56 + 1) == (void)v56)
  {
    if (!(void)v56) {
      return;
    }
  }
  else
  {
    uint64_t v42 = (uint64_t)(*((void *)&v56 + 1) - v56) >> 3;
    char v43 = (void *)(*v3 + 8);
    uint64_t v44 = (uint64_t *)v56;
    do
    {
      uint64_t v45 = *v44++;
      void *v43 = v45;
      v43 += 2;
      --v42;
    }
    while (v42);
  }
  *((void *)&v56 + 1) = v41;
  operator delete(v41);
}

void sub_B888C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_B88918(uint64_t a1, int a2)
{
  uint64_t v66 = (unint64_t *)a1;
  uint64_t v57 = *(void *)(a1 + 8);
  if (v57)
  {
    int v2 = a2;
    uint64_t v4 = 0;
    uint64_t v5 = (void *)(a1 + 16);
    uint64_t v62 = a1 + 16;
    do
    {
      uint64_t v65 = 0;
      unint64_t v6 = *(void *)a1;
      uint64_t v63 = v4;
      if (!*(void *)a1)
      {
        uint64_t v65 = 0x7FEFFFFFFFFFFFFFLL;
LABEL_49:
        if (v2 == 2) {
          goto LABEL_38;
        }
        goto LABEL_50;
      }
      unint64_t v7 = 0;
      uint64_t v8 = *(void *)(a1 + 8);
      double v9 = 1.79769313e308;
      unint64_t v61 = *(void *)a1;
      do
      {
        unint64_t v11 = v7++;
        if (*(void *)a1 > v11) {
          goto LABEL_8;
        }
        *(void *)a1 = v7;
        unint64_t v12 = v8 * v7;
        int v13 = *(unsigned char **)(a1 + 16);
        int v14 = *(unsigned char **)(a1 + 24);
        unint64_t v15 = (v14 - v13) >> 3;
        unint64_t v16 = v8 * v7 - v15;
        if (v8 * v7 > v15)
        {
          uint64_t v17 = *(void *)(a1 + 32);
          if (v16 <= (v17 - (uint64_t)v14) >> 3)
          {
            bzero(*(void **)(a1 + 24), 8 * v16);
            unint64_t v6 = v61;
            *(void *)(a1 + 24) = &v14[8 * v16];
            uint64_t v4 = v63;
            goto LABEL_8;
          }
          if (v12 >> 61) {
            sub_2E00();
          }
          uint64_t v18 = v17 - (void)v13;
          if (v18 >> 2 > v12) {
            unint64_t v12 = v18 >> 2;
          }
          BOOL v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v19) {
            unint64_t v20 = v12;
          }
          if (v20 >> 61) {
            sub_188D718();
          }
          unint64_t v60 = v20;
          unint64_t v21 = operator new(8 * v20);
          size_t v22 = 8 * v16;
          unint64_t v23 = &v21[8 * v15];
          size_t v59 = v22;
          bzero(v23, v22);
          if (v14 == v13)
          {
            uint64_t v25 = &v21[8 * v15];
            unint64_t v6 = v61;
          }
          else
          {
            unint64_t v24 = v14 - 8 - v13;
            unint64_t v6 = v61;
            if (v24 < 0x58)
            {
              uint64_t v25 = &v21[8 * v15];
              goto LABEL_30;
            }
            uint64_t v25 = &v21[8 * v15];
            if ((unint64_t)(v13 - v21) < 0x20) {
              goto LABEL_86;
            }
            uint64_t v26 = (v24 >> 3) + 1;
            uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
            float v28 = &v14[-v27];
            uint64_t v25 = &v23[-v27];
            uint64_t v29 = &v21[8 * v15 - 16];
            char v30 = (long long *)(v14 - 16);
            uint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v32 = *v30;
              *(v29 - 1) = *(v30 - 1);
              *uint64_t v29 = v32;
              v29 -= 2;
              v30 -= 2;
              v31 -= 4;
            }
            while (v31);
            int v14 = v28;
            if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_86:
              do
              {
LABEL_30:
                uint64_t v33 = *((void *)v14 - 1);
                v14 -= 8;
                *((void *)v25 - 1) = v33;
                v25 -= 8;
              }
              while (v14 != v13);
            }
          }
          *(void *)(a1 + 16) = v25;
          *(void *)(a1 + 24) = &v23[v59];
          *(void *)(a1 + 32) = &v21[8 * v60];
          uint64_t v5 = (void *)v62;
          uint64_t v4 = v63;
          if (v13)
          {
            operator delete(v13);
            unint64_t v6 = v61;
            uint64_t v8 = *(void *)(a1 + 8);
          }
          goto LABEL_8;
        }
        uint64_t v4 = v63;
        if (v8 * v7 < v15) {
          *(void *)(a1 + 24) = &v13[8 * v12];
        }
LABEL_8:
        uint64_t v10 = v4 + v8 * v11;
        if (*(double *)(*v5 + 8 * v10) < v9) {
          double v9 = *(double *)(*v5 + 8 * v10);
        }
      }
      while (v7 != v6);
      uint64_t v65 = *(void *)&v9;
      int v2 = a2;
      if (v9 >= 0.0) {
        goto LABEL_49;
      }
      uint64_t v67 = off_243E158;
      BOOL v68 = &v65;
      uint64_t v70 = &v67;
      sub_B89738(&v66, v4, (uint64_t)&v67);
      if (v70 == &v67)
      {
        ((void (*)(uint64_t (***)()))v67[4])(&v67);
        uint64_t v65 = 0;
        if (a2 == 2) {
          goto LABEL_38;
        }
      }
      else
      {
        if (v70) {
          (*v70)[5]();
        }
        uint64_t v65 = 0;
        if (a2 == 2)
        {
LABEL_38:
          double v64 = 0.0;
          unint64_t v34 = *(void *)a1;
          if (*(void *)a1)
          {
            unint64_t v35 = 0;
            uint64_t v36 = *(void *)(a1 + 8);
            uint64_t v37 = *(void *)(a1 + 16);
            double v38 = -1.79769313e308;
            do
            {
              unint64_t v40 = v35 + 1;
              if (*(void *)a1 <= v35)
              {
                *(void *)a1 = v40;
                unint64_t v41 = (*(void *)(a1 + 24) - v37) >> 3;
                if (v36 * v40 > v41)
                {
                  sub_32808(v62, v36 * v40 - v41);
                  uint64_t v36 = *(void *)(a1 + 8);
                  uint64_t v37 = *(void *)(a1 + 16);
                  uint64_t v4 = v63;
                }
                else if (v36 * v40 < v41)
                {
                  *(void *)(a1 + 24) = v37 + 8 * v36 * v40;
                }
              }
              uint64_t v39 = v4 + v36 * v35;
              if (v38 < *(double *)(v37 + 8 * v39)) {
                double v38 = *(double *)(v37 + 8 * v39);
              }
              ++v35;
            }
            while (v34 != v40);
          }
          else
          {
            double v38 = -1.79769313e308;
          }
          double v64 = v38;
          uint64_t v67 = off_243E2D8;
          BOOL v68 = &v65;
          int v69 = &v64;
          uint64_t v70 = &v67;
          sub_B89738(&v66, v4, (uint64_t)&v67);
          goto LABEL_78;
        }
      }
LABEL_50:
      if (v2 == 1)
      {
        double v64 = 0.0;
        unint64_t v49 = *(void *)a1;
        if (*(void *)a1)
        {
          unint64_t v50 = 0;
          uint64_t v51 = *(void *)(a1 + 8);
          uint64_t v52 = *(void *)(a1 + 16);
          double v53 = -1.79769313e308;
          do
          {
            unint64_t v55 = v50 + 1;
            if (*(void *)a1 <= v50)
            {
              *(void *)a1 = v55;
              unint64_t v56 = (*(void *)(a1 + 24) - v52) >> 3;
              if (v51 * v55 > v56)
              {
                sub_32808(v62, v51 * v55 - v56);
                uint64_t v51 = *(void *)(a1 + 8);
                uint64_t v52 = *(void *)(a1 + 16);
                uint64_t v4 = v63;
              }
              else if (v51 * v55 < v56)
              {
                *(void *)(a1 + 24) = v52 + 8 * v51 * v55;
              }
            }
            uint64_t v54 = v4 + v51 * v50;
            if (v53 < *(double *)(v52 + 8 * v54)) {
              double v53 = *(double *)(v52 + 8 * v54);
            }
            ++v50;
          }
          while (v49 != v55);
        }
        else
        {
          double v53 = -1.79769313e308;
        }
        double v64 = v53;
        uint64_t v67 = off_243E258;
        BOOL v68 = (uint64_t *)&v64;
        uint64_t v70 = &v67;
        sub_B89738(&v66, v4, (uint64_t)&v67);
LABEL_78:
        int v2 = a2;
        uint64_t v5 = (void *)v62;
        if (v70 == &v67)
        {
          ((void (*)(uint64_t (***)()))v67[4])(&v67);
        }
        else if (v70)
        {
          (*v70)[5]();
        }
      }
      else if (!v2)
      {
        double v64 = 0.0;
        unint64_t v42 = *(void *)a1;
        if (*(void *)a1)
        {
          unint64_t v43 = 0;
          uint64_t v44 = *(void *)(a1 + 8);
          uint64_t v45 = *(void *)(a1 + 16);
          double v46 = 0.0;
          do
          {
            unint64_t v47 = v43 + 1;
            if (*(void *)a1 <= v43)
            {
              *(void *)a1 = v47;
              unint64_t v48 = (*(void *)(a1 + 24) - v45) >> 3;
              if (v44 * v47 > v48)
              {
                sub_32808(v62, v44 * v47 - v48);
                uint64_t v44 = *(void *)(a1 + 8);
                uint64_t v45 = *(void *)(a1 + 16);
                uint64_t v4 = v63;
              }
              else if (v44 * v47 < v48)
              {
                *(void *)(a1 + 24) = v45 + 8 * v44 * v47;
              }
            }
            double v46 = v46 + *(double *)(v45 + 8 * (v4 + v44 * v43++));
          }
          while (v42 != v47);
        }
        else
        {
          double v46 = 0.0;
        }
        double v64 = v46;
        uint64_t v67 = off_243E1D8;
        BOOL v68 = (uint64_t *)&v64;
        uint64_t v70 = &v67;
        sub_B89738(&v66, v4, (uint64_t)&v67);
        goto LABEL_78;
      }
      ++v4;
    }
    while (v4 != v57);
  }
}

void sub_B88F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_B66E2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B88F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_B66E2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B88F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_B66E2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B88FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_B66E2C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B88FBC(uint64_t *a1, unint64_t *a2, double *a3, int a4)
{
  unint64_t v4 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v93 = v4;
  if (!v4) {
    return;
  }
  if (v4 >> 61) {
    sub_2E00();
  }
  uint64_t v8 = (char *)operator new(8 * v4);
  *a1 = (uint64_t)v8;
  a1[2] = (uint64_t)&v8[8 * v93];
  bzero(v8, 8 * v93);
  a1[1] = (uint64_t)&v8[8 * v93];
  double v9 = (uint64_t *)(a2 + 2);
  char v103 = a3;
  if (!a4)
  {
    unint64_t v48 = 0;
    uint64_t v95 = v8;
    while (1)
    {
      unint64_t v102 = v48 + 1;
      unint64_t v64 = a2[1];
      if (*a2 <= v48) {
        break;
      }
      unint64_t v49 = (double *)(*v9 + 8 * v64 * v48);
      double v50 = a3[1];
      double v51 = *v49 * *a3 + *(double *)&v8[8 * v48];
      *(double *)&v8[8 * v48] = v51;
      double v52 = v49[1] * v50 + v51;
      *(double *)&v8[8 * v48] = v52;
      double v53 = a3[3];
      double v54 = v49[2] * a3[2] + v52;
      *(double *)&v8[8 * v48] = v54;
      double v55 = v49[3] * v53 + v54;
      *(double *)&v8[8 * v48] = v55;
      double v56 = a3[5];
      double v57 = v49[4] * a3[4] + v55;
      *(double *)&v8[8 * v48] = v57;
      double v58 = v49[5] * v56 + v57;
      *(double *)&v8[8 * v48] = v58;
      double v59 = a3[7];
      double v60 = v49[6] * a3[6] + v58;
      *(double *)&v8[8 * v48] = v60;
      double v61 = v49[7] * v59 + v60;
      *(double *)&v8[8 * v48] = v61;
      double v62 = a3[9];
      double v63 = v49[8] * a3[8] + v61;
      *(double *)&v8[8 * v48] = v63;
      *(double *)&v8[8 * v48] = v49[9] * v62 + v63;
LABEL_36:
      ++v48;
      if (v102 == v93) {
        return;
      }
    }
    uint64_t v65 = 0;
    while (1)
    {
      if (*a2 <= v48)
      {
        *a2 = v102;
        unint64_t v69 = v64 * v102;
        uint64_t v70 = (char *)a2[2];
        uint64_t v71 = (unsigned char *)a2[3];
        unint64_t v72 = (v71 - v70) >> 3;
        unint64_t v73 = v64 * v102 - v72;
        if (v64 * v102 <= v72)
        {
          a3 = v103;
          double v9 = (uint64_t *)(a2 + 2);
          if (v69 < v72) {
            a2[3] = (unint64_t)&v70[8 * v69];
          }
          goto LABEL_40;
        }
        unint64_t v74 = a2[4];
        if (v73 > (uint64_t)(v74 - (void)v71) >> 3)
        {
          if (v69 >> 61) {
            sub_2E00();
          }
          uint64_t v75 = v74 - (void)v70;
          if (v75 >> 2 > v69) {
            unint64_t v69 = v75 >> 2;
          }
          BOOL v34 = (unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v34) {
            unint64_t v76 = v69;
          }
          if (v76 >> 61) {
            sub_188D718();
          }
          unint64_t v77 = v64;
          unint64_t v100 = v76;
          uint64_t v78 = (char *)operator new(8 * v76);
          size_t v79 = 8 * v73;
          uint64_t v97 = v78;
          uint64_t v99 = 8 * v73;
          uint64_t v80 = &v78[8 * v72];
          bzero(v80, v79);
          if (v71 == v70)
          {
            char v83 = v80;
            unint64_t v64 = v77;
            uint64_t v8 = v95;
            int v84 = v97;
            double v81 = v80;
            double v9 = (uint64_t *)(a2 + 2);
          }
          else
          {
            double v81 = v80;
            unint64_t v82 = v71 - 8 - v70;
            double v9 = (uint64_t *)(a2 + 2);
            unint64_t v64 = v77;
            if (v82 < 0x58)
            {
              char v83 = v81;
              uint64_t v8 = v95;
              int v84 = v97;
              goto LABEL_60;
            }
            uint64_t v8 = v95;
            int v84 = v97;
            char v83 = v81;
            if ((unint64_t)(v70 - v97) < 0x20) {
              goto LABEL_71;
            }
            uint64_t v85 = (v82 >> 3) + 1;
            uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v87 = &v71[-v86];
            char v83 = &v81[-v86];
            uint64_t v88 = &v97[8 * v72 - 16];
            uint64_t v89 = (long long *)(v71 - 16);
            uint64_t v90 = v85 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v91 = *v89;
              *((_OWORD *)v88 - 1) = *(v89 - 1);
              *(_OWORD *)uint64_t v88 = v91;
              v88 -= 32;
              v89 -= 2;
              v90 -= 4;
            }
            while (v90);
            uint64_t v71 = v87;
            if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_71:
              do
              {
LABEL_60:
                uint64_t v92 = *((void *)v71 - 1);
                v71 -= 8;
                *((void *)v83 - 1) = v92;
                v83 -= 8;
              }
              while (v71 != v70);
            }
          }
          a2[2] = (unint64_t)v83;
          a2[3] = (unint64_t)&v81[v99];
          a2[4] = (unint64_t)&v84[8 * v100];
          a3 = v103;
          if (v70)
          {
            operator delete(v70);
            unint64_t v64 = a2[1];
          }
          goto LABEL_40;
        }
        uint64_t v66 = 8 * v73;
        size_t v67 = 8 * v73;
        unint64_t v68 = v64;
        bzero((void *)a2[3], v67);
        unint64_t v64 = v68;
        a2[3] = (unint64_t)&v71[v66];
        a3 = v103;
        double v9 = (uint64_t *)(a2 + 2);
      }
LABEL_40:
      *(double *)&v8[8 * v48] = *(double *)(*v9 + 8 * (v65 + v64 * v48)) * a3[v65] + *(double *)&v8[8 * v48];
      if (++v65 == 10) {
        goto LABEL_36;
      }
    }
  }
  if (a4 == 1)
  {
    unint64_t v10 = 0;
    while (1)
    {
      unint64_t v101 = v10 + 1;
      unint64_t v24 = a2[1];
      uint64_t v25 = 8 * v10;
      if (*a2 <= v10) {
        break;
      }
      uint64_t v11 = *v9;
      uint64_t v12 = *a1;
      double v13 = *(double *)(*a1 + 8 * v10);
      int v14 = (double *)(v11 + 8 * v24 * v10);
      long double v15 = v13 + *a3 * log(*v14 + 1.0);
      *(long double *)(v12 + v25) = v15;
      long double v16 = v15 + a3[1] * log(v14[1] + 1.0);
      *(long double *)(v12 + v25) = v16;
      long double v17 = v16 + a3[2] * log(v14[2] + 1.0);
      *(long double *)(v12 + v25) = v17;
      long double v18 = v17 + a3[3] * log(v14[3] + 1.0);
      *(long double *)(v12 + v25) = v18;
      long double v19 = v18 + a3[4] * log(v14[4] + 1.0);
      *(long double *)(v12 + v25) = v19;
      long double v20 = v19 + a3[5] * log(v14[5] + 1.0);
      *(long double *)(v12 + v25) = v20;
      long double v21 = v20 + a3[6] * log(v14[6] + 1.0);
      *(long double *)(v12 + v25) = v21;
      long double v22 = v21 + a3[7] * log(v14[7] + 1.0);
      *(long double *)(v12 + v25) = v22;
      long double v23 = v22 + a3[8] * log(v14[8] + 1.0);
      *(long double *)(v12 + v25) = v23;
      *(long double *)(v12 + v25) = v23 + a3[9] * log(v14[9] + 1.0);
      double v9 = (uint64_t *)(a2 + 2);
LABEL_7:
      unint64_t v10 = v101;
      if (v101 == v93) {
        return;
      }
    }
    uint64_t v26 = 0;
    while (1)
    {
      if (*a2 <= v10)
      {
        *a2 = v101;
        unint64_t v27 = v24 * v101;
        float v28 = (unsigned char *)a2[2];
        uint64_t v29 = (unsigned char *)a2[3];
        unint64_t v30 = (v29 - v28) >> 3;
        unint64_t v31 = v24 * v101 - v30;
        if (v24 * v101 <= v30)
        {
          a3 = v103;
          double v9 = (uint64_t *)(a2 + 2);
          if (v27 < v30) {
            a2[3] = (unint64_t)&v28[8 * v27];
          }
          goto LABEL_11;
        }
        unint64_t v32 = a2[4];
        if (v31 > (uint64_t)(v32 - (void)v29) >> 3)
        {
          if (v27 >> 61) {
            sub_2E00();
          }
          uint64_t v33 = v32 - (void)v28;
          if (v33 >> 2 > v27) {
            unint64_t v27 = v33 >> 2;
          }
          BOOL v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v34) {
            unint64_t v35 = v27;
          }
          if (v35 >> 61) {
            sub_188D718();
          }
          unint64_t v98 = v35;
          unsigned int v94 = operator new(8 * v35);
          uint64_t v96 = 8 * v31;
          bzero(&v94[8 * v30], 8 * v31);
          if (v29 == v28)
          {
            double v38 = &v94[8 * v30];
            a3 = v103;
            double v9 = (uint64_t *)(a2 + 2);
            uint64_t v39 = v94;
            uint64_t v37 = v38;
          }
          else
          {
            unint64_t v36 = v29 - 8 - v28;
            a3 = v103;
            if (v36 < 0x58)
            {
              uint64_t v37 = &v94[8 * v30];
              double v38 = v37;
              double v9 = (uint64_t *)(a2 + 2);
              uint64_t v39 = v94;
              goto LABEL_31;
            }
            uint64_t v39 = v94;
            uint64_t v37 = &v94[8 * v30];
            double v38 = v37;
            double v9 = (uint64_t *)(a2 + 2);
            if ((unint64_t)(v28 - v94) < 0x20) {
              goto LABEL_72;
            }
            uint64_t v40 = (v36 >> 3) + 1;
            uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v42 = &v29[-v41];
            double v38 = &v37[-v41];
            unint64_t v43 = &v94[8 * v30 - 16];
            uint64_t v44 = (long long *)(v29 - 16);
            uint64_t v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v46 = *v44;
              *(v43 - 1) = *(v44 - 1);
              _OWORD *v43 = v46;
              v43 -= 2;
              v44 -= 2;
              v45 -= 4;
            }
            while (v45);
            uint64_t v29 = v42;
            if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_72:
              do
              {
LABEL_31:
                uint64_t v47 = *((void *)v29 - 1);
                v29 -= 8;
                *((void *)v38 - 1) = v47;
                v38 -= 8;
              }
              while (v29 != v28);
            }
          }
          a2[2] = (unint64_t)v38;
          a2[3] = (unint64_t)&v37[v96];
          a2[4] = (unint64_t)&v39[8 * v98];
          if (v28)
          {
            operator delete(v28);
            unint64_t v24 = a2[1];
          }
          goto LABEL_11;
        }
        bzero((void *)a2[3], 8 * v31);
        a2[3] = (unint64_t)&v29[8 * v31];
        a3 = v103;
        double v9 = (uint64_t *)(a2 + 2);
      }
LABEL_11:
      *(long double *)(*a1 + 8 * v10) = *(double *)(*a1 + 8 * v10)
                                      + a3[v26] * log(*(double *)(*v9 + 8 * (v26 + v24 * v10)) + 1.0);
      if (++v26 == 10) {
        goto LABEL_7;
      }
    }
  }
}

void sub_B89708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  long double v19 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_B89738(unint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = **a1;
  if (v3)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = (uint64_t *)*a1;
      if (**a1 <= v7)
      {
        uint64_t *v8 = v7 + 1;
        uint64_t v9 = v8[2];
        unint64_t v10 = v8[1] * (v7 + 1);
        unint64_t v11 = (v8[3] - v9) >> 3;
        if (v10 <= v11)
        {
          if (v10 < v11) {
            v8[3] = v9 + 8 * v10;
          }
        }
        else
        {
          sub_32808((uint64_t)(v8 + 2), v10 - v11);
        }
      }
      uint64_t v19 = *(void *)(v8[2] + 8 * (a2 + v8[1] * v7));
      uint64_t v12 = *(void *)(a3 + 24);
      if (!v12) {
        sub_29F82C();
      }
      double v13 = (*(double (**)(uint64_t, uint64_t *))(*(void *)v12 + 48))(v12, &v19);
      int v14 = (uint64_t *)*a1;
      unint64_t v15 = v7 + 1;
      if (**a1 <= v7)
      {
        *int v14 = v15;
        uint64_t v16 = v14[2];
        unint64_t v17 = v14[1] * v15;
        unint64_t v18 = (v14[3] - v16) >> 3;
        if (v17 > v18)
        {
          sub_32808((uint64_t)(v14 + 2), v17 - v18);
        }
        else if (v17 < v18)
        {
          uint64_t v14[3] = v16 + 8 * v17;
        }
      }
      *(double *)(v14[2] + 8 * (a2 + v14[1] * v7++)) = v13;
    }
    while (v3 != v15);
  }
}

void sub_B898A0()
{
}

void *sub_B898B4(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_243E158;
  result[1] = v3;
  return result;
}

uint64_t sub_B898FC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_243E158;
  a2[1] = v2;
  return result;
}

double sub_B89928(uint64_t a1, double *a2)
{
  return *a2 - **(double **)(a1 + 8);
}

uint64_t sub_B8993C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing16journey_planning12_GLOBAL__N_19normaliseERNS_6common13DynamicMatrixIdEENS1_15Schedu"
                     "leScoring22normalisation_method_tEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3msl7routing16journey_planning12_GLOBAL__N_19normaliseERNS_6common13DynamicMatrixIdEEN"
                                "S1_15ScheduleScoring22normalisation_method_tEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing16journey_planning12_GLOBAL__N_19normaliseERNS_6common13DynamicMatrixIdEENS1_15ScheduleScoring22normalisation_method_tEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing16journey_planning12_GLOBAL__N_19normaliseERNS_6common13DynamicMatrixIdEENS1_15ScheduleScoring22normalisation_method_tEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B899AC()
{
}

void sub_B899BC()
{
}

void *sub_B899D0(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_243E1D8;
  result[1] = v3;
  return result;
}

uint64_t sub_B89A18(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_243E1D8;
  a2[1] = v2;
  return result;
}

double sub_B89A44(uint64_t a1, double *a2)
{
  uint64_t v2 = *(double **)(a1 + 8);
  double result = *a2 / *v2;
  if (*v2 == 0.0) {
    return 0.0;
  }
  return result;
}

uint64_t sub_B89A64(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing16journey_planning12_GLOBAL__N_19normaliseERNS_6common13DynamicMatrixIdEENS1_15Schedu"
                     "leScoring22normalisation_method_tEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3msl7routing16journey_planning12_GLOBAL__N_19normaliseERNS_6common13DynamicMatrixIdEEN"
                                "S1_15ScheduleScoring22normalisation_method_tEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing16journey_planning12_GLOBAL__N_19normaliseERNS_6common13DynamicMatrixIdEENS1_15ScheduleScoring22normalisation_method_tEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing16journey_planning12_GLOBAL__N_19normaliseERNS_6common13DynamicMatrixIdEENS1_15ScheduleScoring22normalisation_method_tEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B89AD4()
{
}

void sub_B89AE4()
{
}

void *sub_B89AF8(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_243E258;
  result[1] = v3;
  return result;
}

uint64_t sub_B89B40(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_243E258;
  a2[1] = v2;
  return result;
}

double sub_B89B6C(uint64_t a1, double *a2)
{
  uint64_t v2 = *(double **)(a1 + 8);
  double result = *a2 / *v2;
  if (*v2 == 0.0) {
    return 0.0;
  }
  return result;
}

uint64_t sub_B89B8C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing16journey_planning12_GLOBAL__N_19normaliseERNS_6common13DynamicMatrixIdEENS1_15Schedu"
                     "leScoring22normalisation_method_tEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3msl7routing16journey_planning12_GLOBAL__N_19normaliseERNS_6common13DynamicMatrixIdEEN"
                                "S1_15ScheduleScoring22normalisation_method_tEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing16journey_planning12_GLOBAL__N_19normaliseERNS_6common13DynamicMatrixIdEENS1_15ScheduleScoring22normalisation_method_tEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing16journey_planning12_GLOBAL__N_19normaliseERNS_6common13DynamicMatrixIdEENS1_15ScheduleScoring22normalisation_method_tEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B89BFC()
{
}

void sub_B89C0C()
{
}

__n128 sub_B89C20(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_243E2D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_B89C6C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_243E2D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_B89C9C(uint64_t a1, double *a2)
{
  uint64_t v2 = *(double **)(a1 + 8);
  unint64_t v3 = *(double **)(a1 + 16);
  if (*v2 == *v3) {
    return 0.0;
  }
  else {
    return (*a2 - *v2) / (*v3 - *v2);
  }
}

uint64_t sub_B89CCC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing16journey_planning12_GLOBAL__N_19normaliseERNS_6common13DynamicMatrixIdEENS1_15Schedu"
                     "leScoring22normalisation_method_tEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3msl7routing16journey_planning12_GLOBAL__N_19normaliseERNS_6common13DynamicMatrixIdEEN"
                                "S1_15ScheduleScoring22normalisation_method_tEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing16journey_planning12_GLOBAL__N_19normaliseERNS_6common13DynamicMatrixIdEENS1_15ScheduleScoring22normalisation_method_tEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing16journey_planning12_GLOBAL__N_19normaliseERNS_6common13DynamicMatrixIdEENS1_15ScheduleScoring22normalisation_method_tEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B89D3C()
{
}

void sub_B89D48(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = a3;
  *(void *)(a1 + 376) = *(void *)(a1 + 368);
  *(void *)(a1 + 352) = 0;
  uint64_t v5 = a3[1] - *a3;
  if (v5)
  {
    unint64_t v6 = 0;
    unint64_t v7 = (void *)(a1 + 368);
    uint64_t v48 = v5 >> 4;
    uint64_t v8 = (void *)(a2 + 24);
    double v53 = (void *)(a1 + 368);
    while (1)
    {
      uint64_t v9 = 0;
      unint64_t v54 = v6;
      unint64_t v55 = v6 + 1;
      while (2)
      {
        uint64_t v10 = sub_A173AC(v8, *(unsigned int *)(*v3 + 16 * v6));
        switch((char)v9)
        {
          case 0:
            if (*(unsigned char *)v10) {
              double v11 = 1.0;
            }
            else {
              double v11 = 0.0;
            }
            uint64_t v12 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v6) {
              goto LABEL_34;
            }
            goto LABEL_7;
          case 1:
            int v13 = *(_DWORD *)(v10 + 4);
            goto LABEL_24;
          case 2:
            int v13 = *(_DWORD *)(v10 + 8);
LABEL_24:
            int v14 = v13 / 10;
            int v15 = v13 % 10;
            if (v13 < 0) {
              char v16 = -5;
            }
            else {
              char v16 = 5;
            }
            double v11 = (double)(int)(v14
                              + (((103 * (char)(v16 + v15)) >> 15) & 1)
                              + ((103 * (char)(v16 + v15)) >> 10));
            uint64_t v12 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v6) {
              goto LABEL_34;
            }
            goto LABEL_7;
          case 3:
            double v11 = *(double *)(v10 + 16);
            uint64_t v12 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v6) {
              goto LABEL_34;
            }
            goto LABEL_7;
          case 4:
            double v11 = *(double *)(v10 + 24);
            uint64_t v12 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v6) {
              goto LABEL_34;
            }
            goto LABEL_7;
          case 5:
            double v11 = *(double *)(v10 + 32);
            uint64_t v12 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v6) {
              goto LABEL_34;
            }
            goto LABEL_7;
          case 6:
            double v11 = *(double *)(v10 + 40);
            uint64_t v12 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v6) {
              goto LABEL_34;
            }
            goto LABEL_7;
          case 7:
            double v11 = *(double *)(v10 + 48);
            uint64_t v12 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v6) {
              goto LABEL_34;
            }
            goto LABEL_7;
          case 8:
            double v11 = *(double *)(v10 + 56);
            uint64_t v12 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v6) {
              goto LABEL_34;
            }
            goto LABEL_7;
          case 9:
            double v11 = *(double *)(v10 + 64);
            uint64_t v12 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) > v6) {
              goto LABEL_7;
            }
LABEL_34:
            unint64_t v17 = v8;
            *(void *)(a1 + 352) = v55;
            unint64_t v18 = v12 * v55;
            uint64_t v19 = *(unsigned char **)(a1 + 368);
            long double v20 = *(unsigned char **)(a1 + 376);
            unint64_t v21 = (v20 - v19) >> 3;
            BOOL v22 = v12 * v55 >= v21;
            unint64_t v23 = v12 * v55 - v21;
            if (v12 * v55 <= v21)
            {
              unint64_t v7 = v53;
              uint64_t v8 = v17;
              if (!v22) {
                *(void *)(a1 + 376) = &v19[8 * v18];
              }
              goto LABEL_6;
            }
            uint64_t v24 = *(void *)(a1 + 384);
            if (v23 <= (v24 - (uint64_t)v20) >> 3)
            {
              bzero(*(void **)(a1 + 376), 8 * v23);
              *(void *)(a1 + 376) = &v20[8 * v23];
              unint64_t v7 = v53;
              uint64_t v8 = v17;
LABEL_6:
              unint64_t v6 = v54;
              goto LABEL_7;
            }
            if (v18 >> 61) {
              sub_2E00();
            }
            uint64_t v25 = v24 - (void)v19;
            if (v25 >> 2 > v18) {
              unint64_t v18 = v25 >> 2;
            }
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
            }
            if (v18 >> 61) {
              sub_188D718();
            }
            uint64_t v52 = 8 * v18;
            double v51 = operator new(8 * v18);
            uint64_t v26 = &v51[8 * v21];
            uint64_t v50 = 8 * v23;
            bzero(v26, 8 * v23);
            if (v20 == v19)
            {
              uint64_t v29 = &v51[8 * v21];
              uint64_t v8 = v17;
              float v28 = v53;
              unint64_t v6 = v54;
              unint64_t v30 = v51;
              uint64_t v31 = v52;
              uint64_t v32 = v50;
              goto LABEL_53;
            }
            unint64_t v27 = v20 - 8 - v19;
            float v28 = v53;
            uint64_t v8 = v17;
            if (v27 < 0x58)
            {
              uint64_t v29 = &v51[8 * v21];
              unint64_t v6 = v54;
              unint64_t v30 = v51;
              uint64_t v31 = v52;
              uint64_t v32 = v50;
              do
              {
LABEL_52:
                uint64_t v40 = *((void *)v20 - 1);
                v20 -= 8;
                *((void *)v29 - 1) = v40;
                v29 -= 8;
              }
              while (v20 != v19);
              goto LABEL_53;
            }
            unint64_t v30 = v51;
            uint64_t v31 = v52;
            uint64_t v29 = &v51[8 * v21];
            unint64_t v6 = v54;
            uint64_t v32 = v50;
            if ((unint64_t)(v19 - v51) < 0x20) {
              goto LABEL_52;
            }
            uint64_t v33 = (v27 >> 3) + 1;
            uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v35 = &v20[-v34];
            uint64_t v29 = &v26[-v34];
            unint64_t v36 = &v51[8 * v21 - 16];
            uint64_t v37 = (long long *)(v20 - 16);
            uint64_t v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v39 = *v37;
              *(v36 - 1) = *(v37 - 1);
              _OWORD *v36 = v39;
              v36 -= 2;
              v37 -= 2;
              v38 -= 4;
            }
            while (v38);
            long double v20 = v35;
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_52;
            }
LABEL_53:
            *(void *)(a1 + 368) = v29;
            *(void *)(a1 + 376) = &v26[v32];
            *(void *)(a1 + 384) = &v30[v31];
            unint64_t v3 = a3;
            unint64_t v7 = v28;
            if (v19)
            {
              operator delete(v19);
              uint64_t v12 = *(void *)(a1 + 360);
            }
LABEL_7:
            *(double *)(*v7 + 8 * (v9 + v12 * v6)) = v11;
            if (++v9 != 10) {
              continue;
            }
            unint64_t v6 = v55;
            if (v55 == v48) {
              goto LABEL_55;
            }
            break;
          default:
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v56, "Requested to evaluate unknown criterion");
            uint64_t v47 = (void *)sub_2F404((uint64_t)exception, &v56);
        }
        break;
      }
    }
  }
LABEL_55:
  sub_B88918(a1 + 352, *(unsigned __int8 *)(a1 + 168));
  sub_B88FBC((uint64_t *)&v56, (unint64_t *)(a1 + 352), (double *)(a1 + 88), *(unsigned __int8 *)(a1 + 169));
  uint64_t v41 = (void *)v56;
  if (*((void *)&v56 + 1) == (void)v56)
  {
    if (!(void)v56) {
      return;
    }
  }
  else
  {
    uint64_t v42 = (uint64_t)(*((void *)&v56 + 1) - v56) >> 3;
    unint64_t v43 = (void *)(*v3 + 8);
    uint64_t v44 = (uint64_t *)v56;
    do
    {
      uint64_t v45 = *v44++;
      void *v43 = v45;
      v43 += 2;
      --v42;
    }
    while (v42);
  }
  *((void *)&v56 + 1) = v41;
  operator delete(v41);
}

void sub_B8A1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_B8A23C(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(char **)(a1 + 368);
  *(void *)(a1 + 376) = v5;
  *(void *)(a1 + 352) = 0;
  uint64_t v6 = a3[1] - *a3;
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v43 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 4);
    while (1)
    {
      uint64_t v8 = 0;
      unint64_t v47 = v7 + 1;
      while (2)
      {
        uint64_t v10 = v5;
        uint64_t v11 = *v3 + 112 * v7;
        switch((char)v8)
        {
          case 0:
            if (*(unsigned char *)v11) {
              double v12 = 1.0;
            }
            else {
              double v12 = 0.0;
            }
            uint64_t v13 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v7) {
              goto LABEL_35;
            }
            goto LABEL_7;
          case 1:
            int v14 = *(_DWORD *)(v11 + 4);
            goto LABEL_25;
          case 2:
            int v14 = *(_DWORD *)(v11 + 8);
LABEL_25:
            int v15 = v14 / 10;
            int v16 = v14 % 10;
            if (v14 < 0) {
              char v17 = -5;
            }
            else {
              char v17 = 5;
            }
            double v12 = (double)(int)(v15
                              + (((103 * (char)(v17 + v16)) >> 15) & 1)
                              + ((103 * (char)(v17 + v16)) >> 10));
            uint64_t v13 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v7) {
              goto LABEL_35;
            }
            goto LABEL_7;
          case 3:
            double v12 = *(double *)(v11 + 16);
            uint64_t v13 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v7) {
              goto LABEL_35;
            }
            goto LABEL_7;
          case 4:
            double v12 = *(double *)(v11 + 24);
            uint64_t v13 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v7) {
              goto LABEL_35;
            }
            goto LABEL_7;
          case 5:
            double v12 = *(double *)(v11 + 32);
            uint64_t v13 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v7) {
              goto LABEL_35;
            }
            goto LABEL_7;
          case 6:
            double v12 = *(double *)(v11 + 40);
            uint64_t v13 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v7) {
              goto LABEL_35;
            }
            goto LABEL_7;
          case 7:
            double v12 = *(double *)(v11 + 48);
            uint64_t v13 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v7) {
              goto LABEL_35;
            }
            goto LABEL_7;
          case 8:
            double v12 = *(double *)(v11 + 56);
            uint64_t v13 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) <= v7) {
              goto LABEL_35;
            }
            goto LABEL_7;
          case 9:
            double v12 = *(double *)(v11 + 64);
            uint64_t v13 = *(void *)(a1 + 360);
            if (*(void *)(a1 + 352) > v7) {
              goto LABEL_7;
            }
LABEL_35:
            *(void *)(a1 + 352) = v47;
            unint64_t v18 = v13 * v47;
            uint64_t v19 = *(unsigned char **)(a1 + 376);
            unint64_t v20 = (v19 - v10) >> 3;
            unint64_t v21 = v13 * v47 - v20;
            if (v13 * v47 <= v20)
            {
              if (v18 < v20)
              {
                uint64_t v9 = &v10[8 * v18];
LABEL_6:
                *(void *)(a1 + 376) = v9;
              }
LABEL_7:
              uint64_t v5 = v10;
              goto LABEL_8;
            }
            uint64_t v22 = *(void *)(a1 + 384);
            if (v21 <= (v22 - (uint64_t)v19) >> 3)
            {
              bzero(*(void **)(a1 + 376), 8 * v21);
              uint64_t v9 = &v19[8 * v21];
              goto LABEL_6;
            }
            if (v18 >> 61) {
              sub_2E00();
            }
            uint64_t v23 = v22 - (void)v10;
            if (v23 >> 2 > v18) {
              unint64_t v18 = v23 >> 2;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
            }
            if (v18 >> 61) {
              sub_188D718();
            }
            uint64_t v45 = 8 * v18;
            uint64_t v24 = operator new(8 * v18);
            long long v46 = &v24[8 * v20];
            size_t v25 = 8 * v21;
            bzero(v46, v25);
            if (v19 == v10)
            {
              uint64_t v27 = v45;
              uint64_t v5 = &v24[8 * v20];
              goto LABEL_54;
            }
            unint64_t v26 = v19 - 8 - v10;
            if (v26 < 0x58)
            {
              uint64_t v27 = v45;
              uint64_t v5 = &v24[8 * v20];
              do
              {
LABEL_53:
                uint64_t v35 = *((void *)v19 - 1);
                v19 -= 8;
                *((void *)v5 - 1) = v35;
                v5 -= 8;
              }
              while (v19 != v10);
              goto LABEL_54;
            }
            uint64_t v27 = v45;
            uint64_t v5 = &v24[8 * v20];
            if ((unint64_t)(v10 - v24) < 0x20) {
              goto LABEL_53;
            }
            uint64_t v28 = (v26 >> 3) + 1;
            uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v30 = &v19[-v29];
            uint64_t v5 = &v46[-v29];
            uint64_t v31 = &v24[8 * v20 - 16];
            uint64_t v32 = (long long *)(v19 - 16);
            uint64_t v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v34 = *v32;
              *(v31 - 1) = *(v32 - 1);
              *uint64_t v31 = v34;
              v31 -= 2;
              v32 -= 2;
              v33 -= 4;
            }
            while (v33);
            uint64_t v19 = v30;
            if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_53;
            }
LABEL_54:
            *(void *)(a1 + 368) = v5;
            *(void *)(a1 + 376) = &v46[v25];
            *(void *)(a1 + 384) = &v24[v27];
            unint64_t v3 = a3;
            if (v10)
            {
              operator delete(v10);
              uint64_t v13 = *(void *)(a1 + 360);
              uint64_t v5 = *(char **)(a1 + 368);
            }
LABEL_8:
            *(double *)&v5[8 * v8 + 8 * v13 * v7] = v12;
            if (++v8 != 10) {
              continue;
            }
            ++v7;
            if (v47 == v43) {
              goto LABEL_56;
            }
            break;
          default:
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v48, "Requested to evaluate unknown criterion");
            uint64_t v42 = (void *)sub_2F404((uint64_t)exception, &v48);
        }
        break;
      }
    }
  }
LABEL_56:
  sub_B88918(a1 + 352, *(unsigned __int8 *)(a1 + 256));
  sub_B88FBC((uint64_t *)&v48, (unint64_t *)(a1 + 352), (double *)(a1 + 176), *(unsigned __int8 *)(a1 + 257));
  unint64_t v36 = (void *)v48;
  if (*((void *)&v48 + 1) == (void)v48)
  {
    if (!(void)v48) {
      return;
    }
  }
  else
  {
    uint64_t v37 = (uint64_t)(*((void *)&v48 + 1) - v48) >> 3;
    uint64_t v38 = (void *)(*v3 + 72);
    long long v39 = (uint64_t *)v48;
    do
    {
      uint64_t v40 = *v39++;
      *uint64_t v38 = v40;
      v38 += 14;
      --v37;
    }
    while (v37);
  }
  *((void *)&v48 + 1) = v36;
  operator delete(v36);
}

void sub_B8A6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B8A704(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  char v20 = a4;
  sub_B8AA6C(a1, a2, &v20, (uint64_t)v24);
  uint64_t v6 = a3[6];
  uint64_t v5 = a3[7];
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  unint64_t v21 = 0;
  if (v5 == v6)
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    uint64_t v11 = v25;
    if (!v25)
    {
LABEL_8:
      uint64_t v27 = v11;
      goto LABEL_10;
    }
  }
  else
  {
    if ((0xEF7BDEF7BDEF7BDFLL * ((v5 - v6) >> 3)) >> 62) {
      sub_2E00();
    }
    size_t v7 = 0xBDEF7BDEF7BDEF7CLL * ((v5 - v6) >> 3);
    uint64_t v8 = (char *)operator new(v7);
    uint64_t v9 = &v8[0xBDEF7BDEF7BDEF7CLL * ((v5 - v6) >> 3)];
    unint64_t v21 = v8;
    uint64_t v23 = v9;
    bzero(v8, v7);
    uint64_t v10 = operator new(v7);
    bzero(v10, v7);
    uint64_t v11 = v25;
    if (!v25) {
      goto LABEL_8;
    }
  }
  if (v11 != v24)
  {
    uint64_t v11 = (void *)(*(uint64_t (**)(void *))(*v11 + 16))(v11);
    goto LABEL_8;
  }
  uint64_t v27 = v26;
  (*(void (**)(void *, void *))(v24[0] + 24))(v24, v26);
LABEL_10:
  sub_B8D1C0(v6, v5, (unsigned int *)v8, v26);
  if (v27 == v26)
  {
    (*(void (**)(void *))(v26[0] + 32))(v26);
    uint64_t v12 = v9 - v8;
    if (v9 - v8 < 4) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  if (v27) {
    (*(void (**)(void))(*v27 + 40))();
  }
  uint64_t v12 = v9 - v8;
  if (v9 - v8 >= 4)
  {
LABEL_16:
    uint64_t v13 = 0;
    uint64_t v14 = (v12 >> 2) & ~(v12 >> 63);
    do
    {
      *((_DWORD *)v10 + *(unsigned int *)&v8[4 * v13]) = v13;
      ++v13;
    }
    while (v14 != v13);
  }
LABEL_18:
  sub_B8D32C(a3[6], a3[7], (uint64_t)v8);
  if (v8) {
    operator delete(v8);
  }
  uint64_t v15 = a3[3];
  uint64_t v16 = a3[4];
  while (v15 != v16)
  {
    char v17 = *(_DWORD **)(v15 + 72);
    for (uint64_t i = *(_DWORD **)(v15 + 80); v17 != i; v17 += 4)
      *char v17 = *((_DWORD *)v10 + *v17);
    v15 += 160;
  }
  if (v10) {
    operator delete(v10);
  }
  uint64_t result = (uint64_t)v25;
  if (v25 == v24) {
    return (*(uint64_t (**)(void *))(v24[0] + 32))(v24);
  }
  if (v25) {
    return (*(uint64_t (**)(void))(*v25 + 40))();
  }
  return result;
}

void sub_B8A9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  operator delete(v18);
  sub_B8AC3C(&a14);
  _Unwind_Resume(a1);
}

void sub_B8AA6C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a3)
  {
    *(void *)(a4 + 24) = 0;
  }
  else
  {
    sub_B8C4C4(a1, a2, &__p);
    *(_OWORD *)unint64_t v21 = 0u;
    *(_OWORD *)uint64_t v22 = 0u;
    int v23 = 1065353216;
    uint64_t v6 = v20;
    if (v20 != __p)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = ((unsigned char *)v20 - (unsigned char *)__p) >> 3;
      do
      {
        uint64_t v24 = v8;
        sub_B8CE60((uint64_t)v21, (uint64_t *)((char *)__p + v7), (char *)__p + v7, &v24);
        ++v8;
        v7 += 8;
      }
      while (v9 != v8);
      uint64_t v6 = __p;
    }
    if (v6)
    {
      char v20 = v6;
      operator delete(v6);
    }
    sub_B95194((uint64_t)v17, (uint64_t)v21);
    *(void *)(a4 + 24) = 0;
    uint64_t v10 = operator new(0x38uLL);
    void *v10 = off_243E358;
    v10[1] = a1;
    sub_B95194((uint64_t)(v10 + 2), (uint64_t)v17);
    *(void *)(a4 + 24) = v10;
    uint64_t v11 = v18;
    if (v18)
    {
      do
      {
        uint64_t v12 = (void *)*v11;
        operator delete(v11);
        uint64_t v11 = v12;
      }
      while (v12);
    }
    uint64_t v13 = v17[0];
    v17[0] = 0;
    if (v13) {
      operator delete(v13);
    }
    uint64_t v14 = v22[0];
    if (v22[0])
    {
      do
      {
        uint64_t v15 = (void *)*v14;
        operator delete(v14);
        uint64_t v14 = v15;
      }
      while (v15);
    }
    uint64_t v16 = v21[0];
    v21[0] = 0;
    if (v16) {
      operator delete(v16);
    }
  }
}

void sub_B8ABDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  operator delete(v19);
  sub_B8C65C((uint64_t)&a10);
  sub_12168((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_B8AC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void *sub_B8AC3C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t sub_B8ACCC(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  char v51 = a4;
  sub_B8B194(a1, a2, &v51, (uint64_t)v63);
  uint64_t v6 = a3[3];
  uint64_t v5 = a3[4];
  uint64_t v53 = 0;
  unint64_t v54 = 0;
  uint64_t v52 = 0;
  if (v5 == v6)
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    uint64_t v11 = v64;
    if (!v64)
    {
LABEL_8:
      uint64_t v66 = v11;
      goto LABEL_10;
    }
  }
  else
  {
    if ((0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 5)) >> 62) {
      sub_2E00();
    }
    size_t v7 = 0x3333333333333334 * ((v5 - v6) >> 5);
    uint64_t v8 = (char *)operator new(v7);
    uint64_t v9 = &v8[v7];
    uint64_t v52 = v8;
    unint64_t v54 = v9;
    bzero(v8, v7);
    uint64_t v10 = operator new(v7);
    bzero(v10, v7);
    uint64_t v11 = v64;
    if (!v64) {
      goto LABEL_8;
    }
  }
  if (v11 != v63)
  {
    uint64_t v11 = (void *)(*(uint64_t (**)(void *))(*v11 + 16))(v11);
    goto LABEL_8;
  }
  uint64_t v66 = v65;
  (*(void (**)(void *, void *))(v63[0] + 24))(v63, v65);
LABEL_10:
  sub_B8E76C(v6, v5, (unsigned int *)v8, v65);
  if (v66 == v65)
  {
    (*(void (**)(void *))(v65[0] + 32))(v65);
    uint64_t v12 = v9 - v8;
    if (v9 - v8 < 4) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  if (v66) {
    (*(void (**)(void *))(*v66 + 40))(v66);
  }
  uint64_t v12 = v9 - v8;
  if (v9 - v8 >= 4)
  {
LABEL_16:
    uint64_t v13 = 0;
    uint64_t v14 = (v12 >> 2) & ~(v12 >> 63);
    do
    {
      *((_DWORD *)v10 + *(unsigned int *)&v8[4 * v13]) = v13;
      ++v13;
    }
    while (v14 != v13);
  }
LABEL_18:
  uint64_t v15 = a3[3];
  uint64_t v16 = a3[4] - v15;
  if (v16 >= 160)
  {
    uint64_t v24 = 0;
    unint64_t v25 = (0xCCCCCCCCCCCCCCCDLL * (v16 >> 5)) & ~((uint64_t)(0xCCCCCCCCCCCCCCCDLL * (v16 >> 5)) >> 63);
    do
    {
      uint64_t v27 = &v8[4 * v24];
      uint64_t v28 = *(unsigned int *)v27;
      if (v28 == v24)
      {
        LODWORD(v26) = v24;
      }
      else
      {
        uint64_t v29 = v15 + 160 * v24;
        long long v30 = *(_OWORD *)(v29 + 72);
        uint64_t v31 = *(void *)(v29 + 88);
        uint64_t v26 = v24;
        do
        {
          uint64_t v32 = v26;
          uint64_t v33 = (long long *)(v15 + 160 * v26);
          long long v34 = v33[2];
          uint64_t v26 = v28;
          long long v61 = v33[3];
          uint64_t v35 = (long long *)(v15 + 160 * v28);
          uint64_t v62 = *((void *)v33 + 8);
          long long v36 = *v33;
          long long v59 = v33[1];
          long long v60 = v34;
          long long v58 = v36;
          *((void *)v33 + 10) = 0;
          *((void *)v33 + 11) = 0;
          long long v37 = v33[7];
          long long v55 = v33[6];
          long long v56 = v37;
          v57[0] = v33[8];
          *(_OWORD *)((char *)v57 + 14) = *(long long *)((char *)v33 + 142);
          *uint64_t v33 = *v35;
          long long v38 = v35[1];
          long long v39 = v35[2];
          long long v40 = v35[3];
          *((void *)v33 + 8) = *((void *)v35 + 8);
          *((void *)v33 + 9) = 0;
          v33[2] = v39;
          v33[3] = v40;
          v33[1] = v38;
          *(long long *)((char *)v33 + 72) = *(long long *)((char *)v35 + 72);
          *((void *)v33 + 11) = *((void *)v35 + 11);
          *((void *)v35 + 10) = 0;
          *((void *)v35 + 11) = 0;
          long long v42 = v35[7];
          long long v41 = v35[8];
          long long v43 = v35[6];
          *(long long *)((char *)v33 + 142) = *(long long *)((char *)v35 + 142);
          v33[7] = v42;
          v33[8] = v41;
          v33[6] = v43;
          long long v44 = v58;
          long long v45 = v59;
          long long v46 = v60;
          long long v47 = v61;
          *((void *)v35 + 8) = v62;
          v35[2] = v46;
          void v35[3] = v47;
          long long *v35 = v44;
          v35[1] = v45;
          *(long long *)((char *)v35 + 72) = v30;
          *((void *)v35 + 11) = v31;
          long long v48 = v55;
          long long v49 = v56;
          long long v50 = v57[0];
          *(long long *)((char *)v35 + 142) = *(_OWORD *)((char *)v57 + 14);
          v35[7] = v49;
          v35[8] = v50;
          v35[6] = v48;
          *(_DWORD *)&v8[4 * v32] = v32;
          uint64_t v27 = &v8[4 * v26];
          uint64_t v28 = *(unsigned int *)v27;
        }
        while (v28 != v24);
      }
      *(_DWORD *)uint64_t v27 = v26;
      ++v24;
    }
    while (v24 != v25);
    goto LABEL_20;
  }
  if (v8) {
LABEL_20:
  }
    operator delete(v8);
  uint64_t v17 = *a3;
  uint64_t v18 = a3[1];
  while (v17 != v18)
  {
    uint64_t v19 = *(void *)(v17 + 80);
    for (uint64_t i = *(void *)(v17 + 88); v19 != i; v19 += 112)
    {
      unint64_t v21 = *(_DWORD **)(v19 + 80);
      uint64_t v22 = *(_DWORD **)(v19 + 88);
      while (v21 != v22)
      {
        _DWORD *v21 = *((_DWORD *)v10 + *v21);
        v21 += 4;
      }
    }
    v17 += 112;
  }
  if (v10) {
    operator delete(v10);
  }
  uint64_t result = (uint64_t)v64;
  if (v64 == v63) {
    return (*(uint64_t (**)(void *))(v63[0] + 32))(v63);
  }
  if (v64) {
    return (*(uint64_t (**)(void *))(*v64 + 40))(v64);
  }
  return result;
}

void sub_B8B120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  operator delete(v11);
  sub_B8B364((void *)(v12 - 152));
  _Unwind_Resume(a1);
}

void sub_B8B180(_Unwind_Exception *a1)
{
  sub_B8B364((void *)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_B8B194(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a3)
  {
    *(void *)(a4 + 24) = 0;
  }
  else
  {
    sub_B8C4C4(a1, a2, &__p);
    *(_OWORD *)unint64_t v21 = 0u;
    *(_OWORD *)uint64_t v22 = 0u;
    int v23 = 1065353216;
    uint64_t v6 = v20;
    if (v20 != __p)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = ((unsigned char *)v20 - (unsigned char *)__p) >> 3;
      do
      {
        uint64_t v24 = v8;
        sub_B8CE60((uint64_t)v21, (uint64_t *)((char *)__p + v7), (char *)__p + v7, &v24);
        ++v8;
        v7 += 8;
      }
      while (v9 != v8);
      uint64_t v6 = __p;
    }
    if (v6)
    {
      char v20 = v6;
      operator delete(v6);
    }
    sub_B95194((uint64_t)v17, (uint64_t)v21);
    *(void *)(a4 + 24) = 0;
    uint64_t v10 = operator new(0x38uLL);
    void *v10 = off_243E3E8;
    v10[1] = a1;
    sub_B95194((uint64_t)(v10 + 2), (uint64_t)v17);
    *(void *)(a4 + 24) = v10;
    uint64_t v11 = v18;
    if (v18)
    {
      do
      {
        uint64_t v12 = (void *)*v11;
        operator delete(v11);
        uint64_t v11 = v12;
      }
      while (v12);
    }
    uint64_t v13 = v17[0];
    v17[0] = 0;
    if (v13) {
      operator delete(v13);
    }
    uint64_t v14 = v22[0];
    if (v22[0])
    {
      do
      {
        uint64_t v15 = (void *)*v14;
        operator delete(v14);
        uint64_t v14 = v15;
      }
      while (v15);
    }
    uint64_t v16 = v21[0];
    v21[0] = 0;
    if (v16) {
      operator delete(v16);
    }
  }
}

void sub_B8B304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  operator delete(v19);
  sub_B8C65C((uint64_t)&a10);
  sub_12168((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_B8B338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void *sub_B8B364(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t (***sub_B8B3F4(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, int a5))()
{
  if (a5 == 1)
  {
    uint64_t result = &v9;
    uint64_t v9 = off_243E508;
    uint64_t v10 = a4;
    uint64_t v11 = a1;
    uint64_t v12 = &v9;
    uint64_t v7 = *(void *)(a4 + 24);
    uint64_t v8 = *(void *)(a4 + 32);
    if (v7 == v8) {
      goto LABEL_6;
    }
    goto LABEL_10;
  }
  if (a5)
  {
    uint64_t result = 0;
    uint64_t v12 = 0;
    uint64_t v7 = *(void *)(a4 + 24);
    uint64_t v8 = *(void *)(a4 + 32);
    if (v7 == v8) {
      goto LABEL_6;
    }
    do
    {
LABEL_10:
      sub_B8B568((__n128 **)(v7 + 72), &v9, a2);
      v7 += 160;
    }
    while (v7 != v8);
    uint64_t result = v12;
    if (v12 != &v9) {
      goto LABEL_7;
    }
    return (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))v9[4])(&v9);
  }
  uint64_t result = &v9;
  uint64_t v9 = off_243E478;
  uint64_t v10 = a4;
  uint64_t v11 = a1;
  uint64_t v12 = &v9;
  uint64_t v7 = *(void *)(a4 + 24);
  uint64_t v8 = *(void *)(a4 + 32);
  if (v7 != v8) {
    goto LABEL_10;
  }
LABEL_6:
  if (result == &v9) {
    return (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))v9[4])(&v9);
  }
LABEL_7:
  if (result) {
    return (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))(*result)[5])(result);
  }
  return result;
}

void sub_B8B554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B8B744((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B8B568(__n128 **a1, void *a2, __n128 a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = (void *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      uint64_t v13 = v12;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v12);
    }
    else
    {
      uint64_t v13 = (void *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  if ((char *)v4 - (char *)v3 < 2049)
  {
LABEL_10:
    uint64_t v9 = 0;
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = v4 - v3;
    while (1)
    {
      uint64_t v7 = (__n128 *)operator new(16 * v6, &std::nothrow);
      if (v7) {
        break;
      }
      BOOL v8 = v6 > 1;
      v6 >>= 1;
      if (!v8) {
        goto LABEL_10;
      }
    }
    uint64_t v9 = v7;
  }
  __n128 v10 = sub_B8FABC(v3, v4, v12, v4 - v3, v9, v6, a3);
  if (v9) {
    operator delete(v9);
  }
  uint64_t result = (uint64_t)v13;
  if (v13 == v12) {
    return (*(uint64_t (**)(void *, __n128))(v12[0] + 32))(v12, v10);
  }
  if (v13) {
    return (*(uint64_t (**)(__n128))(*v13 + 40))(v10);
  }
  return result;
}

void sub_B8B724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    operator delete(v10);
  }
  sub_B8B744(&a10);
  _Unwind_Resume(a1);
}

void *sub_B8B744(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t sub_B8B7D4(uint64_t result, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v19 = (void *)result;
  char v20 = a4;
  uint64_t v4 = *a3;
  uint64_t v17 = a3[1];
  if (*a3 != v17)
  {
    while (1)
    {
      uint64_t v7 = *(void *)(v4 + 80);
      uint64_t v6 = *(void *)(v4 + 88);
      uint64_t v18 = v4;
      if (v7 != v6) {
        break;
      }
LABEL_3:
      uint64_t v4 = v18 + 112;
      if (v18 + 112 == v17) {
        return result;
      }
    }
    while (1)
    {
      sub_B8BAB4(v19, (uint64_t)a3, v7, &v20, v21);
      uint64_t v9 = *(__n128 **)(v7 + 80);
      __n128 v10 = *(__n128 **)(v7 + 88);
      uint64_t v11 = (uint64_t)v22;
      if (v22)
      {
        if (v22 == v21)
        {
          uint64_t v24 = v23;
          (*(void (**)(void *, void *))(v21[0] + 24))(v21, v23);
          goto LABEL_12;
        }
        uint64_t v11 = (*(uint64_t (**)(void))(*v22 + 16))();
      }
      uint64_t v24 = (void *)v11;
LABEL_12:
      if ((char *)v10 - (char *)v9 < 2049)
      {
LABEL_16:
        uint64_t v15 = 0;
        unint64_t v12 = 0;
      }
      else
      {
        unint64_t v12 = v10 - v9;
        while (1)
        {
          uint64_t v13 = (__n128 *)operator new(16 * v12, &std::nothrow);
          if (v13) {
            break;
          }
          BOOL v14 = v12 > 1;
          v12 >>= 1;
          if (!v14) {
            goto LABEL_16;
          }
        }
        uint64_t v15 = v13;
      }
      __n128 v16 = sub_B90860(v9, v10, v23, v10 - v9, v15, v12, v8);
      if (v15) {
        operator delete(v15);
      }
      if (v24 == v23)
      {
        (*(void (**)(void *, __n128))(v23[0] + 32))(v23, v16);
        uint64_t result = (uint64_t)v22;
        if (v22 != v21) {
          goto LABEL_26;
        }
LABEL_6:
        uint64_t result = (*(uint64_t (**)(void *))(v21[0] + 32))(v21);
        v7 += 112;
        if (v7 == v6) {
          goto LABEL_3;
        }
      }
      else
      {
        if (v24) {
          (*(void (**)(__n128))(*v24 + 40))(v16);
        }
        uint64_t result = (uint64_t)v22;
        if (v22 == v21) {
          goto LABEL_6;
        }
LABEL_26:
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t, __n128))(*(void *)result + 40))(result, v16);
        }
        v7 += 112;
        if (v7 == v6) {
          goto LABEL_3;
        }
      }
    }
  }
  return result;
}

void sub_B8BA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_B8BCD0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B8BA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v18) {
    operator delete(v18);
  }
  sub_B8BCD0(&a18);
  sub_B8BCD0(&a14);
  _Unwind_Resume(a1);
}

void sub_B8BAB4(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, void *a5@<X8>)
{
  if (*a4 == 1)
  {
    sub_B8C6A8(a1, a2, a3, &__p);
    *(_OWORD *)uint64_t v24 = 0u;
    *(_OWORD *)unint64_t v25 = 0u;
    int v26 = 1065353216;
    __n128 v8 = v23;
    if (v23 != __p)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = ((unsigned char *)v23 - (unsigned char *)__p) >> 3;
      do
      {
        uint64_t v27 = v10;
        sub_B8CE60((uint64_t)v24, (uint64_t *)((char *)__p + v9), (char *)__p + v9, &v27);
        ++v10;
        v9 += 8;
      }
      while (v11 != v10);
      __n128 v8 = __p;
    }
    if (v8)
    {
      int v23 = v8;
      operator delete(v8);
    }
    *(void *)&long long v19 = a1;
    *((void *)&v19 + 1) = a2;
    sub_B95194((uint64_t)v20, (uint64_t)v24);
    a5[3] = 0;
    unint64_t v12 = (char *)operator new(0x40uLL);
    *(void *)unint64_t v12 = off_243E618;
    *(_OWORD *)(v12 + 8) = v19;
    sub_B95194((uint64_t)(v12 + 24), (uint64_t)v20);
    a5[3] = v12;
    uint64_t v13 = v21;
    if (v21)
    {
      do
      {
        BOOL v14 = (void *)*v13;
        operator delete(v13);
        uint64_t v13 = v14;
      }
      while (v14);
    }
    uint64_t v15 = v20[0];
    v20[0] = 0;
    if (v15) {
      operator delete(v15);
    }
    __n128 v16 = v25[0];
    if (v25[0])
    {
      do
      {
        uint64_t v17 = (void *)*v16;
        operator delete(v16);
        __n128 v16 = v17;
      }
      while (v17);
    }
    uint64_t v18 = v24[0];
    v24[0] = 0;
    if (v18) {
      operator delete(v18);
    }
  }
  else if (*a4)
  {
    a5[3] = 0;
  }
  else
  {
    *a5 = off_243E588;
    a5[3] = a5;
  }
}

void sub_B8BC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  operator delete(v19);
  sub_B8C8D8((uint64_t)&a9);
  sub_12168((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_B8BCA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void *sub_B8BCD0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *sub_B8BD60(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  if (a4)
  {
    uint64_t result = 0;
    __n128 v8 = 0;
    uint64_t v5 = *a3;
    uint64_t v6 = a3[1];
    if (*a3 == v6) {
      goto LABEL_3;
    }
    do
    {
LABEL_7:
      sub_B8BE94((uint64_t *)(v5 + 80), v7);
      v5 += 112;
    }
    while (v5 != v6);
    uint64_t result = v8;
    if (v8 != v7) {
      goto LABEL_4;
    }
    return (void *)(*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  uint64_t result = v7;
  v7[0] = off_243E698;
  __n128 v8 = v7;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 != v6) {
    goto LABEL_7;
  }
LABEL_3:
  if (result == v7) {
    return (void *)(*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
LABEL_4:
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
  }
  return result;
}

void sub_B8BE80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B8C088((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B8BE94(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = (__n128 *)a1[1];
  uint64_t v4 = (void *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      uint64_t v11 = v10;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v10);
    }
    else
    {
      uint64_t v11 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  if ((uint64_t)v3 - v2 < 1)
  {
LABEL_10:
    __n128 v8 = 0;
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v5 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v3 - v2) >> 4);
    while (1)
    {
      uint64_t v6 = (__n128 *)operator new(112 * v5, &std::nothrow);
      if (v6) {
        break;
      }
      BOOL v7 = v5 > 1;
      v5 >>= 1;
      if (!v7) {
        goto LABEL_10;
      }
    }
    __n128 v8 = v6;
  }
  sub_B91604(v2, v3, v10, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v3 - v2) >> 4), v8, v5);
  if (v8) {
    operator delete(v8);
  }
  uint64_t result = (uint64_t)v11;
  if (v11 == v10) {
    return (*(uint64_t (**)(void *))(v10[0] + 32))(v10);
  }
  if (v11) {
    return (*(uint64_t (**)(void))(*v11 + 40))();
  }
  return result;
}

void sub_B8C068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    operator delete(v10);
  }
  sub_B8C088(&a10);
  _Unwind_Resume(a1);
}

void *sub_B8C088(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t sub_B8C118(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  if (a4 == 1)
  {
    uint64_t v4 = off_243E7B8;
    goto LABEL_5;
  }
  if (!a4)
  {
    uint64_t v4 = off_243E728;
LABEL_5:
    v6[0] = v4;
    BOOL v7 = v6;
    goto LABEL_7;
  }
  BOOL v7 = 0;
LABEL_7:
  sub_B8C248(a3, v6);
  uint64_t result = (uint64_t)v7;
  if (v7 == v6) {
    return (*(uint64_t (**)(void *))(v6[0] + 32))(v6);
  }
  if (v7) {
    return (*(uint64_t (**)(void))(*v7 + 40))();
  }
  return result;
}

void sub_B8C234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B8C434((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_B8C248(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = (__n128 *)a1[1];
  uint64_t v4 = (void *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      uint64_t v11 = v10;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v10);
    }
    else
    {
      uint64_t v11 = (void *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  if ((uint64_t)v3 - v2 < 1)
  {
LABEL_10:
    __n128 v8 = 0;
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v5 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v3 - v2) >> 4);
    while (1)
    {
      uint64_t v6 = operator new(112 * v5, &std::nothrow);
      if (v6) {
        break;
      }
      BOOL v7 = v5 > 1;
      v5 >>= 1;
      if (!v7) {
        goto LABEL_10;
      }
    }
    __n128 v8 = v6;
  }
  sub_B93328(v2, v3, v10, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v3 - v2) >> 4), (uint64_t)v8, v5);
  if (v8) {
    operator delete(v8);
  }
  uint64_t result = (uint64_t)v11;
  if (v11 == v10) {
    return (*(uint64_t (**)(void *))(v10[0] + 32))(v10);
  }
  if (v11) {
    return (*(uint64_t (**)(void))(*v11 + 40))();
  }
  return result;
}

void sub_B8C404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_B8C434(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_B8C4C4(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  switch(*(_DWORD *)(a2 + 24))
  {
    case 1:
      unint64_t v5 = (void *)(*(void *)a1 + 4120);
      uint64_t v6 = *(void *)(a2 + 16);
      sub_B8C924(v5, v6, (uint64_t)a3);
      return;
    case 2:
      BOOL v7 = (void *)(*(void *)a1 + 4040);
      uint64_t v8 = *(void *)(a2 + 16);
      sub_B8CA30(v7, v8, (uint64_t)a3);
      return;
    case 3:
      uint64_t v9 = (void *)(*(void *)a1 + 4112);
      uint64_t v10 = *(void *)(a2 + 16);
      sub_B8CB3C(v9, v10, (uint64_t)a3);
      return;
    case 4:
      sub_B8CC48((void *)(*(void *)a1 + 4008), *(void *)(a2 + 16), (uint64_t)&v12);
      uint64_t v11 = v12;
      if (v12 == v13)
      {
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        if (!v11) {
          return;
        }
LABEL_17:
        uint64_t v13 = v11;
        operator delete(v11);
        return;
      }
      sub_B8CB3C((void *)(*(void *)a1 + 4112), *v12, (uint64_t)a3);
      uint64_t v11 = v12;
      if (v12) {
        goto LABEL_17;
      }
      return;
    default:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return;
  }
}

void sub_B8C628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B8C65C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *sub_B8C6A8@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v5 = result;
  BOOL v7 = *(unsigned int **)(a3 + 80);
  if (v7 == *(unsigned int **)(a3 + 88))
  {
    uint64_t v16 = 0xFFFFFFFFLL;
    unsigned int v17 = *(unsigned __int8 *)(a3 + 104);
  }
  else
  {
    uint64_t v8 = *result;
    uint64_t v9 = sub_A173AC((void *)(a2 + 24), *v7);
    uint64_t v10 = (void *)(v8 + 4136);
    unsigned int v11 = *(_DWORD *)(v9 + 144);
    unint64_t v12 = (int *)sub_A11094(v10, *(void *)(v9 + 124));
    uint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v13 >= 9u && (uint64_t v14 = v13[4]) != 0) {
      uint64_t v15 = (unsigned int *)((char *)v12 + v14 + *(unsigned int *)((char *)v12 + v14));
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t result = (void *)sub_A10764(v15, v11);
    uint64_t v16 = __ROR8__(*result, 32);
    unsigned int v17 = *(unsigned __int8 *)(a3 + 104);
    if (v17 > 3)
    {
LABEL_13:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      return result;
    }
  }
  switch(v17)
  {
    case 0u:
      uint64_t v18 = (int *)sub_498D5C(*(void *)(*v5 + 4120) + 24, __ROR8__(v16, 32), 0, "stop");
      long long v19 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v19 >= 0xDu && (unsigned __int16 v20 = v19[6]) != 0) {
        unint64_t v21 = *(unsigned int *)((char *)v18 + v20 + 4) | ((unint64_t)*(unsigned int *)((char *)v18 + v20) << 32);
      }
      else {
        unint64_t v21 = 0xFFFFFFFFLL;
      }
      uint64_t v27 = (void *)(*v5 + 4112);
      uint64_t result = sub_B8CB3C(v27, v21, (uint64_t)a4);
      break;
    case 1u:
      uint64_t v22 = (int *)sub_498D5C(*(void *)(*v5 + 4120) + 24, __ROR8__(v16, 32), 0, "stop");
      int v23 = (unsigned __int16 *)((char *)v22 - *v22);
      if (*v23 >= 0xBu && (unsigned __int16 v24 = v23[5]) != 0) {
        unint64_t v25 = *(unsigned int *)((char *)v22 + v24 + 4) | ((unint64_t)*(unsigned int *)((char *)v22 + v24) << 32);
      }
      else {
        unint64_t v25 = 0xFFFFFFFFLL;
      }
      uint64_t v28 = (void *)(*v5 + 4040);
      uint64_t result = sub_B8CA30(v28, v25, (uint64_t)a4);
      break;
    case 2u:
      int v26 = (void *)(*v5 + 4120);
      uint64_t result = sub_B8C924(v26, v16, (uint64_t)a4);
      break;
    default:
      goto LABEL_13;
  }
  return result;
}

uint64_t sub_B8C8D8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

int *sub_B8C924@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (int *)sub_498D5C(*a1 + 24, __ROR8__(a2, 32), 0, "stop");
  unint64_t v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0xFu
    && (uint64_t v6 = v5[7]) != 0
    && (BOOL v7 = result,
        uint64_t v8 = *(unsigned int *)((char *)result + v6),
        uint64_t v9 = *(unsigned int *)((char *)result + v6 + v8),
        v9))
  {
    uint64_t v10 = v9;
    unsigned int v11 = operator new(8 * v9);
    *(void *)&long long v15 = v11;
    *((void *)&v15 + 1) = v11;
    uint64_t v16 = &v11[v10];
    unint64_t v12 = (unsigned int *)((char *)v7 + v8 + v6 + 8);
    do
    {
      unint64_t v17 = *v12 | ((unint64_t)*(v12 - 1) << 32);
      uint64_t result = (int *)sub_A19B54((unint64_t *)&v15, v11, &v17);
      unsigned int v11 = result + 2;
      v12 += 2;
      --v10;
    }
    while (v10 * 8);
    long long v13 = v15;
    uint64_t v14 = v16;
  }
  else
  {
    uint64_t v14 = 0;
    long long v13 = 0uLL;
  }
  *(_OWORD *)a3 = v13;
  *(void *)(a3 + 16) = v14;
  return result;
}

void sub_B8CA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_B8CA30@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (int *)sub_8ED3D4(*a1 + 24, __ROR8__(a2, 32), 0, "hall");
  unint64_t v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0xFu
    && (uint64_t v6 = v5[7]) != 0
    && (BOOL v7 = result,
        uint64_t v8 = *(unsigned int *)((char *)result + v6),
        uint64_t v9 = *(unsigned int *)((char *)result + v6 + v8),
        v9))
  {
    uint64_t v10 = v9;
    unsigned int v11 = operator new(8 * v9);
    *(void *)&long long v15 = v11;
    *((void *)&v15 + 1) = v11;
    uint64_t v16 = &v11[v10];
    unint64_t v12 = (unsigned int *)((char *)v7 + v8 + v6 + 8);
    do
    {
      unint64_t v17 = *v12 | ((unint64_t)*(v12 - 1) << 32);
      uint64_t result = (int *)sub_A19B54((unint64_t *)&v15, v11, &v17);
      unsigned int v11 = result + 2;
      v12 += 2;
      --v10;
    }
    while (v10 * 8);
    long long v13 = v15;
    uint64_t v14 = v16;
  }
  else
  {
    uint64_t v14 = 0;
    long long v13 = 0uLL;
  }
  *(_OWORD *)a3 = v13;
  *(void *)(a3 + 16) = v14;
  return result;
}

void sub_B8CB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_B8CB3C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (int *)sub_8ED928(*a1 + 24, __ROR8__(a2, 32), 0, "station");
  unint64_t v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0xFu
    && (uint64_t v6 = v5[7]) != 0
    && (BOOL v7 = result,
        uint64_t v8 = *(unsigned int *)((char *)result + v6),
        uint64_t v9 = *(unsigned int *)((char *)result + v6 + v8),
        v9))
  {
    uint64_t v10 = v9;
    unsigned int v11 = operator new(8 * v9);
    *(void *)&long long v15 = v11;
    *((void *)&v15 + 1) = v11;
    uint64_t v16 = &v11[v10];
    unint64_t v12 = (unsigned int *)((char *)v7 + v8 + v6 + 8);
    do
    {
      unint64_t v17 = *v12 | ((unint64_t)*(v12 - 1) << 32);
      uint64_t result = (int *)sub_A19B54((unint64_t *)&v15, v11, &v17);
      unsigned int v11 = result + 2;
      v12 += 2;
      --v10;
    }
    while (v10 * 8);
    long long v13 = v15;
    uint64_t v14 = v16;
  }
  else
  {
    uint64_t v14 = 0;
    long long v13 = 0uLL;
  }
  *(_OWORD *)a3 = v13;
  *(void *)(a3 + 16) = v14;
  return result;
}

void sub_B8CC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_B8CC48@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (int *)sub_499804(*a1 + 24, __ROR8__(a2, 32), 0, "access point");
  unint64_t v5 = (unsigned __int16 *)((char *)result - *result);
  if (*v5 >= 0x11u
    && (uint64_t v6 = v5[8]) != 0
    && (BOOL v7 = result,
        uint64_t v8 = *(unsigned int *)((char *)result + v6),
        uint64_t v9 = *(unsigned int *)((char *)result + v6 + v8),
        v9))
  {
    uint64_t v10 = v9;
    unsigned int v11 = operator new(8 * v9);
    *(void *)&long long v15 = v11;
    *((void *)&v15 + 1) = v11;
    uint64_t v16 = &v11[v10];
    unint64_t v12 = (unsigned int *)((char *)v7 + v8 + v6 + 8);
    do
    {
      unint64_t v17 = *v12 | ((unint64_t)*(v12 - 1) << 32);
      uint64_t result = (int *)sub_A19B54((unint64_t *)&v15, v11, &v17);
      unsigned int v11 = result + 2;
      v12 += 2;
      --v10;
    }
    while (v10 * 8);
    long long v13 = v15;
    uint64_t v14 = v16;
  }
  else
  {
    uint64_t v14 = 0;
    long long v13 = 0uLL;
  }
  *(_OWORD *)a3 = v13;
  *(void *)(a3 + 16) = v14;
  return result;
}

void sub_B8CD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B8CD54(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int v4 = *(_DWORD *)(a3 + 48);
  unint64_t v5 = (int *)sub_A11094((void *)(*(void *)a1 + 4136), *(void *)(a3 + 28));
  uint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v7 = *v6;
  if (v7 < 5)
  {
    uint64_t v8 = 0;
    goto LABEL_6;
  }
  if (!v6[2])
  {
    uint64_t v8 = 0;
    if (v7 >= 9) {
      goto LABEL_12;
    }
LABEL_6:
    uint64_t v9 = 0;
    goto LABEL_7;
  }
  uint64_t v8 = (char *)v5 + v6[2] + *(unsigned int *)((char *)v5 + v6[2]);
  if (v7 < 9) {
    goto LABEL_6;
  }
LABEL_12:
  uint64_t v12 = v6[4];
  if (!v12) {
    goto LABEL_6;
  }
  uint64_t v9 = (unsigned int *)((char *)v5 + v12 + *(unsigned int *)((char *)v5 + v12));
LABEL_7:
  uint64_t v13 = __ROR8__(*(void *)&v8[8 * *(unsigned __int8 *)(sub_A10764(v9, v4) + 14) + 4], 32);
  if (!sub_A1E760(a2, &v13)) {
    return -1;
  }
  uint64_t v10 = sub_A1E760(a2, &v13);
  if (!v10) {
    sub_5AE8("unordered_map::at: key not found");
  }
  return v10[3];
}

void *sub_B8CE60(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  unint64_t v9 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v10 = (0xC4CEB9FE1A85EC53 * (v9 ^ (v9 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v9 ^ (v9 >> 33))) >> 33);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = (0xC4CEB9FE1A85EC53 * (v9 ^ (v9 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v9 ^ (v9 >> 33))) >> 33);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (*((_DWORD *)v14 + 5) == HIDWORD(v8) && *((_DWORD *)v14 + 4) == v8) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 5) == HIDWORD(v8) && *((_DWORD *)v14 + 4) == v8) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_31:
  uint64_t v14 = operator new(0x20uLL);
  *uint64_t v14 = 0;
  v14[1] = v10;
  uint64_t v19 = *a4;
  v14[2] = *a3;
  uint64_t v14[3] = v19;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v11 && (float)(v21 * (float)v11) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    int v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      *uint64_t v14 = *v23;
LABEL_69:
      void *v23 = v14;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_45;
    }
    if (prime < v11)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v11) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v31 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v22 = *(void *)a1;
        int v23 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v22 = *(void *)a1;
        int v23 = *(void **)(*(void *)a1 + 8 * v10);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v10;
      uint64_t v22 = *(void *)a1;
      int v23 = *(void **)(*(void *)a1 + 8 * (v31 & v10));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    unint64_t v32 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v32 >= v11) {
        v32 %= v11;
      }
    }
    else
    {
      v32 &= v11 - 1;
    }
    int v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_B8D1AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_B8D1C0(uint64_t a1, uint64_t a2, unsigned int *a3, void *a4)
{
  uint64_t v19 = a1;
  uint64_t v5 = (a2 - a1) / 248;
  uint64_t v6 = &a3[v5];
  if (a2 != a1)
  {
    unint64_t v7 = (v5 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v7 < 7)
    {
      LODWORD(v8) = 0;
      unint64_t v9 = a3;
      do
      {
LABEL_7:
        *v9++ = v8;
        LODWORD(v8) = v8 + 1;
      }
      while (v9 != v6);
      goto LABEL_8;
    }
    unint64_t v10 = v7 + 1;
    uint64_t v8 = (v7 + 1) & 0x7FFFFFFFFFFFFFF8;
    unint64_t v9 = &a3[v8];
    int32x4_t v11 = (int32x4_t)xmmword_20B5E90;
    uint8x8_t v12 = (int32x4_t *)(a3 + 4);
    v13.i64[0] = 0x400000004;
    v13.i64[1] = 0x400000004;
    v14.i64[0] = 0x800000008;
    v14.i64[1] = 0x800000008;
    uint64_t v15 = v8;
    do
    {
      v12[-1] = v11;
      *uint8x8_t v12 = vaddq_s32(v11, v13);
      int32x4_t v11 = vaddq_s32(v11, v14);
      v12 += 2;
      v15 -= 8;
    }
    while (v15);
    if (v10 != v8) {
      goto LABEL_7;
    }
  }
LABEL_8:
  v20[0] = a4;
  v20[1] = &v19;
  if ((char *)v6 - (char *)a3 < 513)
  {
    uint64_t v17 = 0;
LABEL_14:
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v16 = v6 - a3;
    while (1)
    {
      uint64_t v17 = (unsigned int *)operator new(4 * v16, &std::nothrow);
      if (v17) {
        break;
      }
      BOOL v18 = v16 > 1;
      v16 >>= 1;
      if (!v18) {
        goto LABEL_14;
      }
    }
  }
  sub_B8D57C(a3, v6, v20, v6 - a3, v17, v16);
  if (v17) {
    operator delete(v17);
  }
}

void sub_B8D314(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B8D32C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 - result >= 248)
  {
    uint64_t v3 = 0;
    unint64_t v4 = (0xEF7BDEF7BDEF7BDFLL * ((a2 - result) >> 3)) & ~((uint64_t)(0xEF7BDEF7BDEF7BDFLL * ((a2 - result) >> 3)) >> 63);
    do
    {
      uint64_t v6 = (_DWORD *)(a3 + 4 * v3);
      uint64_t v7 = *v6;
      if (v7 == v3)
      {
        LODWORD(v5) = v3;
      }
      else
      {
        uint64_t v8 = result + 248 * v3;
        long long v9 = *(_OWORD *)(v8 + 224);
        uint64_t v10 = *(void *)(v8 + 240);
        long long v11 = *(_OWORD *)(v8 + 72);
        long long v12 = *(_OWORD *)(v8 + 88);
        long long v13 = *(_OWORD *)(v8 + 104);
        long long v14 = *(_OWORD *)(v8 + 184);
        uint64_t v15 = *(void *)(v8 + 200);
        uint64_t v5 = v3;
        do
        {
          uint64_t v16 = v5;
          uint64_t v17 = (long long *)(result + 248 * v5);
          uint64_t v5 = v7;
          long long v33 = v17[2];
          long long v34 = v17[3];
          BOOL v18 = (long long *)(result + 248 * v7);
          uint64_t v35 = *((void *)v17 + 8);
          long long v20 = *v17;
          long long v19 = v17[1];
          *(long long *)((char *)v17 + 88) = 0uLL;
          *(long long *)((char *)v17 + 104) = 0uLL;
          *((void *)v17 + 25) = 0;
          int v37 = *((_DWORD *)v17 + 54);
          uint64_t v36 = *((void *)v17 + 26);
          *uint64_t v17 = *v18;
          long long v21 = v18[1];
          long long v22 = v18[2];
          long long v23 = v18[3];
          *((void *)v17 + 8) = *((void *)v18 + 8);
          *((void *)v17 + 11) = *((void *)v18 + 11);
          *((void *)v17 + 14) = *((void *)v18 + 14);
          uint64_t v24 = *((void *)v18 + 25);
          uint64_t v25 = *((void *)v18 + 26);
          int v26 = *((_DWORD *)v18 + 54);
          *((void *)v17 + 24) = 0;
          *((void *)v17 + 25) = v24;
          long long v31 = v20;
          long long v32 = v19;
          *(long long *)((char *)v17 + 72) = 0uLL;
          *(_OWORD *)&v40[13] = *(long long *)((char *)v17 + 165);
          *(_OWORD *)long long v40 = *(long long *)((char *)v17 + 152);
          long long v38 = *(long long *)((char *)v17 + 120);
          long long v39 = *(long long *)((char *)v17 + 136);
          *((void *)v17 + 23) = 0;
          *((void *)v17 + 29) = 0;
          *((void *)v17 + 30) = 0;
          *((void *)v17 + 28) = 0;
          uint64_t v17[2] = v22;
          uint64_t v17[3] = v23;
          v17[1] = v21;
          *(long long *)((char *)v17 + 72) = *(long long *)((char *)v18 + 72);
          *((void *)v18 + 10) = 0;
          *((void *)v18 + 11) = 0;
          v17[6] = v18[6];
          *((void *)v18 + 13) = 0;
          *((void *)v18 + 14) = 0;
          long long v27 = *(long long *)((char *)v18 + 120);
          long long v28 = *(long long *)((char *)v18 + 136);
          long long v29 = *(long long *)((char *)v18 + 152);
          *(long long *)((char *)v17 + 165) = *(long long *)((char *)v18 + 165);
          *(long long *)((char *)v17 + 152) = v29;
          *(long long *)((char *)v17 + 136) = v28;
          *(long long *)((char *)v17 + 120) = v27;
          *(long long *)((char *)v17 + 184) = *(long long *)((char *)v18 + 184);
          *((void *)v18 + 24) = 0;
          *((void *)v18 + 25) = 0;
          *((_DWORD *)v17 + 54) = v26;
          *((void *)v17 + 26) = v25;
          uint64_t v30 = *((void *)v18 + 30);
          v17[14] = v18[14];
          *((void *)v17 + 30) = v30;
          *((void *)v18 + 29) = 0;
          *((void *)v18 + 30) = 0;
          *((void *)v18 + 8) = v35;
          void v18[2] = v33;
          v18[3] = v34;
          *BOOL v18 = v31;
          v18[1] = v32;
          *(long long *)((char *)v18 + 72) = v11;
          *(long long *)((char *)v18 + 88) = v12;
          *(long long *)((char *)v18 + 104) = v13;
          *(long long *)((char *)v18 + 165) = *(_OWORD *)&v40[13];
          *(long long *)((char *)v18 + 152) = *(_OWORD *)v40;
          *(long long *)((char *)v18 + 136) = v39;
          *(long long *)((char *)v18 + 120) = v38;
          *(long long *)((char *)v18 + 184) = v14;
          *((_DWORD *)v18 + 54) = v37;
          *((void *)v18 + 25) = v15;
          *((void *)v18 + 26) = v36;
          v18[14] = v9;
          *((void *)v18 + 30) = v10;
          *(_DWORD *)(a3 + 4 * v16) = v16;
          uint64_t v6 = (_DWORD *)(a3 + 4 * v5);
          uint64_t v7 = *v6;
        }
        while (v7 != v3);
      }
      _DWORD *v6 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_B8D57C(unsigned int *a1, unsigned int *a2, void **a3, unint64_t a4, unsigned int *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v8 = a1;
    if (a4 == 2)
    {
      uint64_t v9 = (*a3)[3];
      if (!v9) {
LABEL_44:
      }
        sub_29F82C();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 48))(v9, *a3[1] + 248 * *(a2 - 1), *a3[1] + 248 * *v8))
      {
        unsigned int v10 = *v8;
        unsigned int *v8 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unint64_t v14 = a4 >> 1;
      uint64_t v15 = &a1[a4 >> 1];
      unint64_t v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_B8DA5C(a1, v15, a3, v16, a5);
        uint64_t v17 = &a5[v14];
        __n128 v18 = sub_B8DA5C(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v17);
        long long v19 = v17;
        long long v20 = a5;
        long long v21 = v8;
        long long v22 = &a5[a4];
        do
        {
          if (v19 == v22)
          {
            if (v20 == v17) {
              return;
            }
            unint64_t v39 = (char *)&a5[a4 >> 1] - (char *)v20 - 4;
            if (v39 >= 0x1C && (unint64_t)((char *)v8 - (char *)v20) >= 0x20)
            {
              uint64_t v43 = 0;
              uint64_t v44 = (v39 >> 2) + 1;
              uint64_t v45 = v44 & 0x7FFFFFFFFFFFFFF8;
              long long v40 = &v20[v45];
              long long v41 = &v21[v45];
              uint64_t v46 = v44 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v47 = &v21[v43];
                long long v48 = *(_OWORD *)&v20[v43 + 4];
                *(_OWORD *)long long v47 = *(_OWORD *)&v20[v43];
                *((_OWORD *)v47 + 1) = v48;
                v43 += 8;
                v46 -= 8;
              }
              while (v46);
              if (v44 == (v44 & 0x7FFFFFFFFFFFFFF8)) {
                return;
              }
            }
            else
            {
              long long v40 = v20;
              long long v41 = v21;
            }
            do
            {
              unsigned int v42 = *v40++;
              *v41++ = v42;
            }
            while (v40 != v17);
            return;
          }
          long long v23 = v19;
          uint64_t v24 = (*a3)[3];
          if (!v24) {
            goto LABEL_44;
          }
          int v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)v24 + 48))(v24, *a3[1] + 248 * *v19, *a3[1] + 248 * *v20, v18);
          if (v25) {
            int v26 = v23;
          }
          else {
            int v26 = v20;
          }
          v20 += v25 ^ 1u;
          long long v19 = &v23[v25];
          *v21++ = *v26;
          ++v8;
        }
        while (v20 != v17);
        if (v19 != v22)
        {
          uint64_t v27 = -4;
          if (!v25) {
            uint64_t v27 = 0;
          }
          unint64_t v28 = (char *)&a5[a4] - (char *)v23 + v27 - 4;
          if (v28 < 0x3C) {
            goto LABEL_47;
          }
          uint64_t v29 = 4;
          if (!v25) {
            uint64_t v29 = 0;
          }
          if ((unint64_t)((char *)v8 - (char *)v23 - v29) < 0x20) {
            goto LABEL_47;
          }
          uint64_t v30 = 0;
          uint64_t v31 = (v28 >> 2) + 1;
          uint64_t v32 = v31 & 0x7FFFFFFFFFFFFFF8;
          long long v33 = &v19[v32];
          long long v34 = &v21[v32];
          uint64_t v35 = v31 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            uint64_t v36 = &v21[v30];
            long long v37 = *(_OWORD *)&v19[v30 + 4];
            *(_OWORD *)uint64_t v36 = *(_OWORD *)&v19[v30];
            *((_OWORD *)v36 + 1) = v37;
            v30 += 8;
            v35 -= 8;
          }
          while (v35);
          long long v19 = v33;
          long long v21 = v34;
          if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_47:
            do
            {
              unsigned int v38 = *v19++;
              *v21++ = v38;
            }
            while (v19 != v22);
          }
        }
      }
      else
      {
        sub_B8D57C(a1, v15, a3, v16, a5, a6);
        sub_B8D57C(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        sub_B8DD84((uint64_t)v8, (char *)&v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6);
      }
    }
    else
    {
      sub_B8D914((uint64_t)a1, a2, a3);
    }
  }
}

uint64_t sub_B8D914(uint64_t result, unsigned int *a2, void **a3)
{
  if ((unsigned int *)result != a2)
  {
    unint64_t v4 = (unsigned int *)result;
    uint64_t v5 = (unsigned int *)(result + 4);
    if ((unsigned int *)(result + 4) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (unsigned int *)result;
      do
      {
        unsigned int v10 = v5;
        uint64_t v11 = (*a3)[3];
        if (!v11) {
LABEL_15:
        }
          sub_29F82C();
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 48))(v11, *a3[1] + 248 * *v5, *a3[1] + 248 * *v8);
        if (result)
        {
          unsigned int v12 = *v10;
          uint64_t v13 = v7;
          do
          {
            *(unsigned int *)((char *)v4 + v13 + 4) = *(unsigned int *)((char *)v4 + v13);
            if (!v13)
            {
              uint64_t v9 = v4;
              goto LABEL_5;
            }
            uint64_t v14 = (*a3)[3];
            if (!v14) {
              goto LABEL_15;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 48))(v14, *a3[1] + 248 * v12, *a3[1] + 248 * *(unsigned int *)((char *)v4 + v13 - 4));
            v13 -= 4;
          }
          while ((result & 1) != 0);
          uint64_t v9 = (unsigned int *)((char *)v4 + v13 + 4);
LABEL_5:
          unsigned int *v9 = v12;
        }
        uint64_t v5 = v10 + 1;
        v7 += 4;
        uint64_t v8 = v10;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

__n128 sub_B8DA5C(unsigned int *a1, unsigned int *a2, void **a3, unint64_t a4, unsigned int *a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    if (a4 == 2)
    {
      uint64_t v10 = (*a3)[3];
      if (!v10) {
LABEL_44:
      }
        sub_29F82C();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 48))(v10, *a3[1] + 248 * *(a2 - 1), *a3[1] + 248 * *a1))
      {
        *uint64_t v5 = *(a2 - 1);
        unsigned int v12 = *a1;
      }
      else
      {
        *uint64_t v5 = *a1;
        unsigned int v12 = *(a2 - 1);
      }
      v5[1] = v12;
    }
    else
    {
      if (a4 == 1)
      {
        *a5 = *a1;
        return result;
      }
      if ((uint64_t)a4 > 8)
      {
        unint64_t v13 = a4 >> 1;
        uint64_t v14 = a4 >> 1;
        uint64_t v15 = &a1[v14];
        sub_B8D57C(a1, &a1[v14], a3, a4 >> 1, a5, a4 >> 1);
        sub_B8D57C(&a1[v14], a2, a3, a4 - v13, &v5[v14], a4 - v13);
        unint64_t v16 = v5;
        uint64_t v17 = a1;
        __n128 v18 = v15;
        do
        {
          if (v18 == a2)
          {
            if (v17 == v15) {
              return result;
            }
            unint64_t v35 = (char *)&a1[v13] - (char *)v17 - 4;
            if (v35 >= 0x1C && (unint64_t)((char *)v16 - (char *)v17) >= 0x20)
            {
              uint64_t v39 = 0;
              uint64_t v40 = (v35 >> 2) + 1;
              uint64_t v41 = v40 & 0x7FFFFFFFFFFFFFF8;
              uint64_t v36 = &v5[v41];
              long long v37 = &v17[v41];
              uint64_t v42 = v40 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                uint64_t v43 = &v5[v39];
                __n128 result = *(__n128 *)&v17[v39];
                long long v44 = *(_OWORD *)&v17[v39 + 4];
                *(__n128 *)uint64_t v43 = result;
                *((_OWORD *)v43 + 1) = v44;
                v39 += 8;
                v42 -= 8;
              }
              while (v42);
              if (v40 == (v40 & 0x7FFFFFFFFFFFFFF8)) {
                return result;
              }
            }
            else
            {
              uint64_t v36 = v5;
              long long v37 = v17;
            }
            do
            {
              unsigned int v38 = *v37++;
              *v36++ = v38;
            }
            while (v37 != v15);
            return result;
          }
          long long v19 = v18;
          uint64_t v20 = (*a3)[3];
          if (!v20) {
            goto LABEL_44;
          }
          int v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20 + 48))(v20, *a3[1] + 248 * *v18, *a3[1] + 248 * *v17);
          if (v21) {
            long long v22 = v19;
          }
          else {
            long long v22 = v17;
          }
          __n128 v18 = &v19[v21];
          v17 += v21 ^ 1u;
          *v5++ = *v22;
          ++v16;
        }
        while (v17 != v15);
        if (v18 != a2)
        {
          uint64_t v23 = -4;
          if (!v21) {
            uint64_t v23 = 0;
          }
          unint64_t v24 = (char *)a2 - (char *)v19 + v23 - 4;
          if (v24 < 0x3C) {
            goto LABEL_47;
          }
          uint64_t v25 = 4;
          if (!v21) {
            uint64_t v25 = 0;
          }
          if ((unint64_t)((char *)v16 - (char *)v19 - v25) < 0x20) {
            goto LABEL_47;
          }
          uint64_t v26 = 0;
          uint64_t v27 = (v24 >> 2) + 1;
          uint64_t v28 = v27 & 0x7FFFFFFFFFFFFFF8;
          uint64_t v29 = &v5[v28];
          uint64_t v30 = &v18[v28];
          uint64_t v31 = v27 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            uint64_t v32 = &v5[v26];
            __n128 result = *(__n128 *)&v18[v26];
            long long v33 = *(_OWORD *)&v18[v26 + 4];
            *(__n128 *)uint64_t v32 = result;
            *((_OWORD *)v32 + 1) = v33;
            v26 += 8;
            v31 -= 8;
          }
          while (v31);
          uint64_t v5 = v29;
          __n128 v18 = v30;
          if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_47:
            do
            {
              unsigned int v34 = *v18++;
              *v5++ = v34;
            }
            while (v18 != a2);
          }
        }
      }
      else
      {
        sub_B8E2C4(a1, a2, a5, a3);
      }
    }
  }
  return result;
}

uint64_t sub_B8DD84(uint64_t result, char *a2, unsigned int *a3, void **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v78 = a6;
  if (!a6) {
    return result;
  }
  unsigned int v12 = (char *)result;
  double v81 = a4;
  while (v78 > a8 && a5 > a8)
  {
    if (!a5) {
      return result;
    }
    unint64_t v13 = 0;
    uint64_t v14 = -a5;
    while (1)
    {
      uint64_t v15 = (*a4)[3];
      if (!v15) {
LABEL_74:
      }
        sub_29F82C();
      unint64_t v16 = v12;
      uint64_t v17 = a2;
      __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 48))(v15, *a4[1] + 248 * *(unsigned int *)a2, *a4[1] + 248 * *(unsigned int *)&v13[(void)v12]);
      if (result) {
        break;
      }
      v13 += 4;
      BOOL v18 = __CFADD__(v14++, 1);
      unsigned int v12 = v16;
      a2 = v17;
      a4 = (void **)v81;
      if (v18) {
        return result;
      }
    }
    uint64_t v19 = -v14;
    uint64_t v20 = v16;
    uint64_t v21 = v78;
    unint64_t v76 = &v13[(void)v16];
    unint64_t v77 = a3;
    if (-v14 >= v78)
    {
      unint64_t v24 = (unsigned int *)v17;
      if (v14 == -1)
      {
        int v71 = *(_DWORD *)&v13[(void)v16];
        *(_DWORD *)&v13[(void)v16] = *(_DWORD *)v17;
        *(_DWORD *)uint64_t v17 = v71;
        return result;
      }
      if (v14 > 0) {
        uint64_t v19 = 1 - v14;
      }
      uint64_t v72 = v19 >> 1;
      uint64_t v26 = (unsigned int *)&v16[4 * (v19 >> 1) + (void)v13];
      uint64_t v39 = a3;
      uint64_t v25 = v17;
      if (v17 != (char *)v39)
      {
        uint64_t v73 = a8;
        uint64_t v40 = (void *)*v81;
        uint64_t v80 = (void *)v81[1];
        unint64_t v41 = ((char *)v77 - v17) >> 2;
        uint64_t v25 = v17;
        do
        {
          uint64_t v42 = v40[3];
          if (!v42) {
            goto LABEL_74;
          }
          uint64_t v43 = (unsigned int *)&v25[4 * (v41 >> 1)];
          unsigned int v45 = *v43;
          long long v44 = (char *)(v43 + 1);
          int v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v42 + 48))(v42, *v80 + 248 * v45, *v80 + 248 * *v26);
          if (v46) {
            v41 += ~(v41 >> 1);
          }
          else {
            v41 >>= 1;
          }
          if (v46) {
            uint64_t v25 = v44;
          }
        }
        while (v41);
        a8 = v73;
        uint64_t v20 = v16;
        uint64_t v21 = v78;
        unint64_t v24 = (unsigned int *)v17;
      }
      uint64_t v23 = (v25 - (char *)v24) >> 2;
      uint64_t v32 = v72;
      if (v26 != v24)
      {
LABEL_25:
        uint64_t v33 = v25 - (char *)v24;
        if (v25 == (char *)v24)
        {
          unint64_t v24 = v26;
        }
        else
        {
          unsigned int v34 = v26 + 1;
          if (v26 + 1 == v24)
          {
            uint64_t v74 = a8;
            long long v47 = a7;
            unsigned int v48 = *v26;
            uint64_t v49 = v23;
            memmove(v26, v24, v25 - (char *)v24);
            uint64_t v23 = v49;
            uint64_t v20 = v16;
            unint64_t v24 = (unsigned int *)((char *)v26 + v33);
            *(unsigned int *)((char *)v26 + v33) = v48;
            a7 = v47;
            a8 = v74;
          }
          else
          {
            unint64_t v35 = (char *)(v24 + 1);
            if (v24 + 1 == (unsigned int *)v25)
            {
              uint64_t v75 = a8;
              unsigned int v50 = *((_DWORD *)v25 - 1);
              unint64_t v24 = v26 + 1;
              if (v25 - 4 != (char *)v26)
              {
                uint64_t v51 = v23;
                memmove(v26 + 1, v26, v25 - 4 - (char *)v26);
                uint64_t v23 = v51;
                unint64_t v24 = v26 + 1;
                uint64_t v20 = v16;
              }
              *uint64_t v26 = v50;
              a8 = v75;
            }
            else
            {
              uint64_t v36 = v24 - v26;
              if (v36 == v33 >> 2)
              {
                do
                {
                  int v37 = *(v34 - 1);
                  *(v34 - 1) = *((_DWORD *)v35 - 1);
                  *((_DWORD *)v35 - 1) = v37;
                  if (v34 == v24) {
                    break;
                  }
                  ++v34;
                  BOOL v38 = v35 == v25;
                  v35 += 4;
                }
                while (!v38);
              }
              else
              {
                uint64_t v52 = v33 >> 2;
                uint64_t v53 = v24 - v26;
                do
                {
                  uint64_t v54 = v53;
                  uint64_t v53 = v52;
                  uint64_t v52 = v54 % v52;
                }
                while (v52);
                if (v53)
                {
                  long long v55 = &v26[v53];
                  do
                  {
                    unsigned int v57 = *--v55;
                    unsigned int v56 = v57;
                    long long v58 = &v55[v36];
                    long long v59 = v55;
                    do
                    {
                      long long v60 = v58;
                      unsigned int *v59 = *v58;
                      uint64_t v61 = (v25 - (char *)v58) >> 2;
                      BOOL v62 = __OFSUB__(v36, v61);
                      uint64_t v64 = v36 - v61;
                      char v63 = (v64 < 0) ^ v62;
                      long long v58 = &v26[v64];
                      if (v63) {
                        long long v58 = &v60[v36];
                      }
                      long long v59 = v60;
                    }
                    while (v58 != v55);
                    unsigned int *v60 = v56;
                  }
                  while (v55 != v26);
                }
                unint64_t v24 = &v26[v33 >> 2];
              }
            }
          }
          uint64_t v21 = v78;
        }
        goto LABEL_64;
      }
    }
    else
    {
      if (v78 >= 0) {
        uint64_t v22 = v78;
      }
      else {
        uint64_t v22 = v78 + 1;
      }
      uint64_t v23 = v22 >> 1;
      unint64_t v24 = (unsigned int *)v17;
      uint64_t v25 = &v17[4 * (v22 >> 1)];
      uint64_t v26 = (unsigned int *)v17;
      if ((char *)(v17 - v16) != v13)
      {
        uint64_t v79 = v22 >> 1;
        unint64_t v27 = (v17 - v16 - (uint64_t)v13) >> 2;
        uint64_t v26 = (unsigned int *)&v13[(void)v16];
        do
        {
          uint64_t v28 = *(void *)(*v81 + 24);
          if (!v28) {
            goto LABEL_74;
          }
          uint64_t v29 = &v26[v27 >> 1];
          unsigned int v31 = *v29;
          uint64_t v30 = v29 + 1;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 48))(v28, *(void *)v81[1] + 248 * *(unsigned int *)v25, *(void *)v81[1] + 248 * v31))
          {
            v27 >>= 1;
          }
          else
          {
            uint64_t v26 = v30;
            v27 += ~(v27 >> 1);
          }
        }
        while (v27);
        uint64_t v20 = v16;
        uint64_t v21 = v78;
        uint64_t v23 = v79;
        unint64_t v24 = (unsigned int *)v17;
      }
      uint64_t v32 = ((char *)v26 - v20 - (uint64_t)v13) >> 2;
      if (v26 != v24) {
        goto LABEL_25;
      }
    }
    unint64_t v24 = (unsigned int *)v25;
LABEL_64:
    a5 = -(v32 + v14);
    uint64_t v65 = v21 - v23;
    if (v32 + v23 >= v21 - (v32 + v23) - v14)
    {
      unint64_t v68 = v24;
      uint64_t v69 = -(v32 + v14);
      uint64_t v70 = v23;
      __n128 result = sub_B8DD84(v24, v25, v77, v81, v69, v65, a7, a8);
      a2 = (char *)v26;
      a5 = v32;
      a3 = v68;
      unsigned int v12 = v76;
      uint64_t v78 = v70;
      a4 = (void **)v81;
      if (!v70) {
        return result;
      }
    }
    else
    {
      uint64_t v66 = &v13[(void)v20];
      size_t v67 = (char *)v24;
      __n128 result = sub_B8DD84(v66, v26, v24, v81, v32, v23, a7, a8);
      unsigned int v12 = v67;
      a2 = v25;
      a3 = v77;
      uint64_t v78 = v65;
      a4 = (void **)v81;
      if (!v65) {
        return result;
      }
    }
  }

  return (uint64_t)sub_B8E42C(v12, a2, a3, a4, a5, v78, a7);
}

unsigned int *sub_B8E2C4(unsigned int *result, unsigned int *a2, unsigned int *a3, void **a4)
{
  if (result != a2)
  {
    uint64_t v6 = result + 1;
    *a3 = *result;
    if (result + 1 != a2)
    {
      uint64_t v8 = 0;
      uint64_t v9 = a3;
      do
      {
        uint64_t v12 = (*a4)[3];
        if (!v12) {
LABEL_15:
        }
          sub_29F82C();
        unint64_t v13 = v9++;
        __n128 result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 48))(v12, *a4[1] + 248 * *v6, *a4[1] + 248 * *v13);
        uint64_t v10 = v9;
        if (result)
        {
          v13[1] = *v13;
          uint64_t v10 = a3;
          if (v13 != a3)
          {
            uint64_t v14 = v8;
            do
            {
              uint64_t v15 = (*a4)[3];
              if (!v15) {
                goto LABEL_15;
              }
              __n128 result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 48))(v15, *a4[1] + 248 * *v6, *a4[1] + 248 * *(unsigned int *)((char *)a3 + v14 - 4));
              if (!result)
              {
                uint64_t v10 = (unsigned int *)((char *)a3 + v14);
                goto LABEL_5;
              }
              *(unsigned int *)((char *)a3 + v14) = *(unsigned int *)((char *)a3 + v14 - 4);
              v14 -= 4;
            }
            while (v14);
            uint64_t v10 = a3;
          }
        }
LABEL_5:
        unsigned int v11 = *v6++;
        unsigned int *v10 = v11;
        v8 += 4;
      }
      while (v6 != a2);
    }
  }
  return result;
}

char *sub_B8E42C(char *__dst, char *a2, unsigned int *a3, void **a4, uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v7 = __src;
  uint64_t v9 = a3;
  uint64_t v10 = (unsigned int *)a2;
  unsigned int v11 = (unsigned int *)__dst;
  if (a5 <= a6)
  {
    if (__dst == a2) {
      return __dst;
    }
    unint64_t v21 = a2 - __dst - 4;
    if (v21 < 0x1C)
    {
      uint64_t v22 = __src;
      uint64_t v23 = __dst;
    }
    else
    {
      uint64_t v22 = __src;
      uint64_t v23 = __dst;
      if ((unint64_t)(__src - __dst) >= 0x20)
      {
        uint64_t v24 = (v21 >> 2) + 1;
        uint64_t v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v22 = &__src[v25];
        uint64_t v23 = &__dst[v25];
        uint64_t v26 = (long long *)(__dst + 16);
        unint64_t v27 = __src + 16;
        uint64_t v28 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *unint64_t v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 8;
        }
        while (v28);
        if (v24 == (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          if (v22 != __src)
          {
            while (v10 != v9)
            {
              uint64_t v40 = (*a4)[3];
              if (!v40) {
LABEL_53:
              }
                sub_29F82C();
              long long __dst = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v40 + 48))(v40, *a4[1] + 248 * *v10, *a4[1] + 248 * *(unsigned int *)v7);
              if (__dst) {
                unint64_t v41 = v10;
              }
              else {
                unint64_t v41 = (unsigned int *)v7;
              }
              v10 += __dst;
              v7 += 4 * (__dst ^ 1);
              *v11++ = *v41;
              if (v7 == v22) {
                return __dst;
              }
            }
            return (char *)memmove(v11, v7, v22 - v7);
          }
          return __dst;
        }
      }
    }
    do
    {
      int v39 = *(_DWORD *)v23;
      v23 += 4;
      *(_DWORD *)uint64_t v22 = v39;
      v22 += 4;
    }
    while (v23 != a2);
    goto LABEL_38;
  }
  if (a2 == (char *)a3) {
    return __dst;
  }
  unint64_t v12 = (char *)a3 - a2 - 4;
  if (v12 < 0x1C)
  {
    unint64_t v13 = __src;
    uint64_t v14 = a2;
  }
  else
  {
    unint64_t v13 = __src;
    uint64_t v14 = a2;
    if ((unint64_t)(__src - a2) >= 0x20)
    {
      uint64_t v15 = (v12 >> 2) + 1;
      uint64_t v16 = 4 * (v15 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v13 = &__src[v16];
      uint64_t v14 = &a2[v16];
      uint64_t v17 = (long long *)(a2 + 16);
      BOOL v18 = __src + 16;
      uint64_t v19 = v15 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v20 = *v17;
        *(v18 - 1) = *(v17 - 1);
        *BOOL v18 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 8;
      }
      while (v19);
      if (v15 == (v15 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_18;
      }
    }
  }
  do
  {
    int v30 = *(_DWORD *)v14;
    v14 += 4;
    *(_DWORD *)unint64_t v13 = v30;
    v13 += 4;
  }
  while (v14 != (char *)a3);
LABEL_18:
  if (v13 == __src) {
    return __dst;
  }
  unsigned int v31 = a3;
  while (v10 != v11)
  {
    uint64_t v32 = (*a4)[3];
    if (!v32) {
      goto LABEL_53;
    }
    long long __dst = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v32 + 48))(v32, *a4[1] + 248 * *((unsigned int *)v13 - 1), *a4[1] + 248 * *(v10 - 1));
    if (__dst) {
      uint64_t v33 = (char *)v10;
    }
    else {
      uint64_t v33 = v13;
    }
    if (__dst) {
      --v10;
    }
    else {
      v13 -= 4;
    }
    *--unsigned int v31 = *((_DWORD *)v33 - 1);
    --v9;
    if (v13 == v7) {
      return __dst;
    }
  }
  unint64_t v34 = v13 - v7 - 4;
  if (v34 < 0x2C || (unint64_t)(v13 - (char *)v9) < 0x20)
  {
    unint64_t v35 = (unsigned int *)v13;
    uint64_t v36 = v31;
LABEL_33:
    int v37 = v36 - 1;
    do
    {
      unsigned int v38 = *--v35;
      *v37-- = v38;
    }
    while (v35 != (unsigned int *)v7);
    return __dst;
  }
  uint64_t v42 = 0;
  uint64_t v43 = (v34 >> 2) + 1;
  uint64_t v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
  unint64_t v35 = (unsigned int *)&v13[-v44];
  uint64_t v36 = &v31[v44 / 0xFFFFFFFFFFFFFFFCLL];
  uint64_t v45 = v43 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v46 = *(_OWORD *)&v13[v42 * 4 - 16];
    long long v47 = &v31[v42];
    *((_OWORD *)v47 - 2) = *(_OWORD *)&v13[v42 * 4 - 32];
    *((_OWORD *)v47 - 1) = v46;
    v42 -= 8;
    v45 -= 8;
  }
  while (v45);
  if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_33;
  }
  return __dst;
}

void sub_B8E76C(uint64_t a1, uint64_t a2, unsigned int *a3, void *a4)
{
  uint64_t v19 = a1;
  uint64_t v5 = (a2 - a1) / 160;
  uint64_t v6 = &a3[v5];
  if (a2 != a1)
  {
    unint64_t v7 = (v5 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v7 < 7)
    {
      LODWORD(v8) = 0;
      uint64_t v9 = a3;
      do
      {
LABEL_7:
        *v9++ = v8;
        LODWORD(v8) = v8 + 1;
      }
      while (v9 != v6);
      goto LABEL_8;
    }
    unint64_t v10 = v7 + 1;
    uint64_t v8 = (v7 + 1) & 0x7FFFFFFFFFFFFFF8;
    uint64_t v9 = &a3[v8];
    int32x4_t v11 = (int32x4_t)xmmword_20B5E90;
    unint64_t v12 = (int32x4_t *)(a3 + 4);
    v13.i64[0] = 0x400000004;
    v13.i64[1] = 0x400000004;
    v14.i64[0] = 0x800000008;
    v14.i64[1] = 0x800000008;
    uint64_t v15 = v8;
    do
    {
      v12[-1] = v11;
      *unint64_t v12 = vaddq_s32(v11, v13);
      int32x4_t v11 = vaddq_s32(v11, v14);
      v12 += 2;
      v15 -= 8;
    }
    while (v15);
    if (v10 != v8) {
      goto LABEL_7;
    }
  }
LABEL_8:
  v20[0] = a4;
  v20[1] = &v19;
  if ((char *)v6 - (char *)a3 < 513)
  {
    uint64_t v17 = 0;
LABEL_14:
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v16 = v6 - a3;
    while (1)
    {
      uint64_t v17 = (unsigned int *)operator new(4 * v16, &std::nothrow);
      if (v17) {
        break;
      }
      BOOL v18 = v16 > 1;
      v16 >>= 1;
      if (!v18) {
        goto LABEL_14;
      }
    }
  }
  sub_B8E8CC(a3, v6, v20, v6 - a3, v17, v16);
  if (v17) {
    operator delete(v17);
  }
}

void sub_B8E8B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_B8E8CC(unsigned int *a1, unsigned int *a2, void **a3, unint64_t a4, unsigned int *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v8 = a1;
    if (a4 == 2)
    {
      uint64_t v9 = (*a3)[3];
      if (!v9) {
LABEL_44:
      }
        sub_29F82C();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 48))(v9, *a3[1] + 160 * *(a2 - 1), *a3[1] + 160 * *v8))
      {
        unsigned int v10 = *v8;
        unsigned int *v8 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      unint64_t v14 = a4 >> 1;
      uint64_t v15 = &a1[a4 >> 1];
      unint64_t v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_B8EDAC(a1, v15, a3, v16, a5);
        uint64_t v17 = &a5[v14];
        __n128 v18 = sub_B8EDAC(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v17);
        uint64_t v19 = v17;
        long long v20 = a5;
        unint64_t v21 = v8;
        uint64_t v22 = &a5[a4];
        do
        {
          if (v19 == v22)
          {
            if (v20 == v17) {
              return;
            }
            unint64_t v39 = (char *)&a5[a4 >> 1] - (char *)v20 - 4;
            if (v39 >= 0x1C && (unint64_t)((char *)v8 - (char *)v20) >= 0x20)
            {
              uint64_t v43 = 0;
              uint64_t v44 = (v39 >> 2) + 1;
              uint64_t v45 = v44 & 0x7FFFFFFFFFFFFFF8;
              uint64_t v40 = &v20[v45];
              unint64_t v41 = &v21[v45];
              uint64_t v46 = v44 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v47 = &v21[v43];
                long long v48 = *(_OWORD *)&v20[v43 + 4];
                *(_OWORD *)long long v47 = *(_OWORD *)&v20[v43];
                *((_OWORD *)v47 + 1) = v48;
                v43 += 8;
                v46 -= 8;
              }
              while (v46);
              if (v44 == (v44 & 0x7FFFFFFFFFFFFFF8)) {
                return;
              }
            }
            else
            {
              uint64_t v40 = v20;
              unint64_t v41 = v21;
            }
            do
            {
              unsigned int v42 = *v40++;
              *v41++ = v42;
            }
            while (v40 != v17);
            return;
          }
          uint64_t v23 = v19;
          uint64_t v24 = (*a3)[3];
          if (!v24) {
            goto LABEL_44;
          }
          int v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)v24 + 48))(v24, *a3[1] + 160 * *v19, *a3[1] + 160 * *v20, v18);
          if (v25) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v20;
          }
          v20 += v25 ^ 1u;
          uint64_t v19 = &v23[v25];
          *v21++ = *v26;
          ++v8;
        }
        while (v20 != v17);
        if (v19 != v22)
        {
          uint64_t v27 = -4;
          if (!v25) {
            uint64_t v27 = 0;
          }
          unint64_t v28 = (char *)&a5[a4] - (char *)v23 + v27 - 4;
          if (v28 < 0x3C) {
            goto LABEL_47;
          }
          uint64_t v29 = 4;
          if (!v25) {
            uint64_t v29 = 0;
          }
          if ((unint64_t)((char *)v8 - (char *)v23 - v29) < 0x20) {
            goto LABEL_47;
          }
          uint64_t v30 = 0;
          uint64_t v31 = (v28 >> 2) + 1;
          uint64_t v32 = v31 & 0x7FFFFFFFFFFFFFF8;
          uint64_t v33 = &v19[v32];
          unint64_t v34 = &v21[v32];
          uint64_t v35 = v31 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            uint64_t v36 = &v21[v30];
            long long v37 = *(_OWORD *)&v19[v30 + 4];
            *(_OWORD *)uint64_t v36 = *(_OWORD *)&v19[v30];
            *((_OWORD *)v36 + 1) = v37;
            v30 += 8;
            v35 -= 8;
          }
          while (v35);
          uint64_t v19 = v33;
          unint64_t v21 = v34;
          if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_47:
            do
            {
              unsigned int v38 = *v19++;
              *v21++ = v38;
            }
            while (v19 != v22);
          }
        }
      }
      else
      {
        sub_B8E8CC(a1, v15, a3, v16, a5, a6);
        sub_B8E8CC(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        sub_B8F0D4((uint64_t)v8, (char *)&v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6);
      }
    }
    else
    {
      sub_B8EC64((uint64_t)a1, a2, a3);
    }
  }
}

uint64_t sub_B8EC64(uint64_t result, unsigned int *a2, void **a3)
{
  if ((unsigned int *)result != a2)
  {
    unint64_t v4 = (unsigned int *)result;
    uint64_t v5 = (unsigned int *)(result + 4);
    if ((unsigned int *)(result + 4) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (unsigned int *)result;
      do
      {
        unsigned int v10 = v5;
        uint64_t v11 = (*a3)[3];
        if (!v11) {
LABEL_15:
        }
          sub_29F82C();
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 48))(v11, *a3[1] + 160 * *v5, *a3[1] + 160 * *v8);
        if (result)
        {
          unsigned int v12 = *v10;
          uint64_t v13 = v7;
          do
          {
            *(unsigned int *)((char *)v4 + v13 + 4) = *(unsigned int *)((char *)v4 + v13);
            if (!v13)
            {
              uint64_t v9 = v4;
              goto LABEL_5;
            }
            uint64_t v14 = (*a3)[3];
            if (!v14) {
              goto LABEL_15;
            }
            __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 48))(v14, *a3[1] + 160 * v12, *a3[1] + 160 * *(unsigned int *)((char *)v4 + v13 - 4));
            v13 -= 4;
          }
          while ((result & 1) != 0);
          uint64_t v9 = (unsigned int *)((char *)v4 + v13 + 4);
LABEL_5:
          unsigned int *v9 = v12;
        }
        uint64_t v5 = v10 + 1;
        v7 += 4;
        uint64_t v8 = v10;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

__n128 sub_B8EDAC(unsigned int *a1, unsigned int *a2, void **a3, unint64_t a4, unsigned int *a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    if (a4 == 2)
    {
      uint64_t v10 = (*a3)[3];
      if (!v10) {
LABEL_44:
      }
        sub_29F82C();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 48))(v10, *a3[1] + 160 * *(a2 - 1), *a3[1] + 160 * *a1))
      {
        *uint64_t v5 = *(a2 - 1);
        unsigned int v12 = *a1;
      }
      else
      {
        *uint64_t v5 = *a1;
        unsigned int v12 = *(a2 - 1);
      }
      v5[1] = v12;
    }
    else
    {
      if (a4 == 1)
      {
        *a5 = *a1;
        return result;
      }
      if ((uint64_t)a4 > 8)
      {
        unint64_t v13 = a4 >> 1;
        uint64_t v14 = a4 >> 1;
        uint64_t v15 = &a1[v14];
        sub_B8E8CC(a1, &a1[v14], a3, a4 >> 1, a5, a4 >> 1);
        sub_B8E8CC(&a1[v14], a2, a3, a4 - v13, &v5[v14], a4 - v13);
        unint64_t v16 = v5;
        uint64_t v17 = a1;
        __n128 v18 = v15;
        do
        {
          if (v18 == a2)
          {
            if (v17 == v15) {
              return result;
            }
            unint64_t v35 = (char *)&a1[v13] - (char *)v17 - 4;
            if (v35 >= 0x1C && (unint64_t)((char *)v16 - (char *)v17) >= 0x20)
            {
              uint64_t v39 = 0;
              uint64_t v40 = (v35 >> 2) + 1;
              uint64_t v41 = v40 & 0x7FFFFFFFFFFFFFF8;
              uint64_t v36 = &v5[v41];
              long long v37 = &v17[v41];
              uint64_t v42 = v40 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                uint64_t v43 = &v5[v39];
                __n128 result = *(__n128 *)&v17[v39];
                long long v44 = *(_OWORD *)&v17[v39 + 4];
                *(__n128 *)uint64_t v43 = result;
                *((_OWORD *)v43 + 1) = v44;
                v39 += 8;
                v42 -= 8;
              }
              while (v42);
              if (v40 == (v40 & 0x7FFFFFFFFFFFFFF8)) {
                return result;
              }
            }
            else
            {
              uint64_t v36 = v5;
              long long v37 = v17;
            }
            do
            {
              unsigned int v38 = *v37++;
              *v36++ = v38;
            }
            while (v37 != v15);
            return result;
          }
          uint64_t v19 = v18;
          uint64_t v20 = (*a3)[3];
          if (!v20) {
            goto LABEL_44;
          }
          int v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20 + 48))(v20, *a3[1] + 160 * *v18, *a3[1] + 160 * *v17);
          if (v21) {
            uint64_t v22 = v19;
          }
          else {
            uint64_t v22 = v17;
          }
          __n128 v18 = &v19[v21];
          v17 += v21 ^ 1u;
          *v5++ = *v22;
          ++v16;
        }
        while (v17 != v15);
        if (v18 != a2)
        {
          uint64_t v23 = -4;
          if (!v21) {
            uint64_t v23 = 0;
          }
          unint64_t v24 = (char *)a2 - (char *)v19 + v23 - 4;
          if (v24 < 0x3C) {
            goto LABEL_47;
          }
          uint64_t v25 = 4;
          if (!v21) {
            uint64_t v25 = 0;
          }
          if ((unint64_t)((char *)v16 - (char *)v19 - v25) < 0x20) {
            goto LABEL_47;
          }
          uint64_t v26 = 0;
          uint64_t v27 = (v24 >> 2) + 1;
          uint64_t v28 = v27 & 0x7FFFFFFFFFFFFFF8;
          uint64_t v29 = &v5[v28];
          uint64_t v30 = &v18[v28];
          uint64_t v31 = v27 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            uint64_t v32 = &v5[v26];
            __n128 result = *(__n128 *)&v18[v26];
            long long v33 = *(_OWORD *)&v18[v26 + 4];
            *(__n128 *)uint64_t v32 = result;
            *((_OWORD *)v32 + 1) = v33;
            v26 += 8;
            v31 -= 8;
          }
          while (v31);
          uint64_t v5 = v29;
          __n128 v18 = v30;
          if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_47:
            do
            {
              unsigned int v34 = *v18++;
              *v5++ = v34;
            }
            while (v18 != a2);
          }
        }
      }
      else
      {
        sub_B8F614(a1, a2, a5, a3);
      }
    }
  }
  return result;
}

uint64_t sub_B8F0D4(uint64_t result, char *a2, unsigned int *a3, void **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v78 = a6;
  if (!a6) {
    return result;
  }
  unsigned int v12 = (char *)result;
  double v81 = a4;
  while (v78 > a8 && a5 > a8)
  {
    if (!a5) {
      return result;
    }
    unint64_t v13 = 0;
    uint64_t v14 = -a5;
    while (1)
    {
      uint64_t v15 = (*a4)[3];
      if (!v15) {
LABEL_74:
      }
        sub_29F82C();
      unint64_t v16 = v12;
      uint64_t v17 = a2;
      __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 48))(v15, *a4[1] + 160 * *(unsigned int *)a2, *a4[1] + 160 * *(unsigned int *)&v13[(void)v12]);
      if (result) {
        break;
      }
      v13 += 4;
      BOOL v18 = __CFADD__(v14++, 1);
      unsigned int v12 = v16;
      a2 = v17;
      a4 = (void **)v81;
      if (v18) {
        return result;
      }
    }
    uint64_t v19 = -v14;
    uint64_t v20 = v16;
    uint64_t v21 = v78;
    unint64_t v76 = &v13[(void)v16];
    unint64_t v77 = a3;
    if (-v14 >= v78)
    {
      unint64_t v24 = (unsigned int *)v17;
      if (v14 == -1)
      {
        int v71 = *(_DWORD *)&v13[(void)v16];
        *(_DWORD *)&v13[(void)v16] = *(_DWORD *)v17;
        *(_DWORD *)uint64_t v17 = v71;
        return result;
      }
      if (v14 > 0) {
        uint64_t v19 = 1 - v14;
      }
      uint64_t v72 = v19 >> 1;
      uint64_t v26 = (unsigned int *)&v16[4 * (v19 >> 1) + (void)v13];
      uint64_t v39 = a3;
      uint64_t v25 = v17;
      if (v17 != (char *)v39)
      {
        uint64_t v73 = a8;
        uint64_t v40 = (void *)*v81;
        uint64_t v80 = (void *)v81[1];
        unint64_t v41 = ((char *)v77 - v17) >> 2;
        uint64_t v25 = v17;
        do
        {
          uint64_t v42 = v40[3];
          if (!v42) {
            goto LABEL_74;
          }
          uint64_t v43 = (unsigned int *)&v25[4 * (v41 >> 1)];
          unsigned int v45 = *v43;
          long long v44 = (char *)(v43 + 1);
          int v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v42 + 48))(v42, *v80 + 160 * v45, *v80 + 160 * *v26);
          if (v46) {
            v41 += ~(v41 >> 1);
          }
          else {
            v41 >>= 1;
          }
          if (v46) {
            uint64_t v25 = v44;
          }
        }
        while (v41);
        a8 = v73;
        uint64_t v20 = v16;
        uint64_t v21 = v78;
        unint64_t v24 = (unsigned int *)v17;
      }
      uint64_t v23 = (v25 - (char *)v24) >> 2;
      uint64_t v32 = v72;
      if (v26 != v24)
      {
LABEL_25:
        uint64_t v33 = v25 - (char *)v24;
        if (v25 == (char *)v24)
        {
          unint64_t v24 = v26;
        }
        else
        {
          unsigned int v34 = v26 + 1;
          if (v26 + 1 == v24)
          {
            uint64_t v74 = a8;
            long long v47 = a7;
            unsigned int v48 = *v26;
            uint64_t v49 = v23;
            memmove(v26, v24, v25 - (char *)v24);
            uint64_t v23 = v49;
            uint64_t v20 = v16;
            unint64_t v24 = (unsigned int *)((char *)v26 + v33);
            *(unsigned int *)((char *)v26 + v33) = v48;
            a7 = v47;
            a8 = v74;
          }
          else
          {
            unint64_t v35 = (char *)(v24 + 1);
            if (v24 + 1 == (unsigned int *)v25)
            {
              uint64_t v75 = a8;
              unsigned int v50 = *((_DWORD *)v25 - 1);
              unint64_t v24 = v26 + 1;
              if (v25 - 4 != (char *)v26)
              {
                uint64_t v51 = v23;
                memmove(v26 + 1, v26, v25 - 4 - (char *)v26);
                uint64_t v23 = v51;
                unint64_t v24 = v26 + 1;
                uint64_t v20 = v16;
              }
              *uint64_t v26 = v50;
              a8 = v75;
            }
            else
            {
              uint64_t v36 = v24 - v26;
              if (v36 == v33 >> 2)
              {
                do
                {
                  int v37 = *(v34 - 1);
                  *(v34 - 1) = *((_DWORD *)v35 - 1);
                  *((_DWORD *)v35 - 1) = v37;
                  if (v34 == v24) {
                    break;
                  }
                  ++v34;
                  BOOL v38 = v35 == v25;
                  v35 += 4;
                }
                while (!v38);
              }
              else
              {
                uint64_t v52 = v33 >> 2;
                uint64_t v53 = v24 - v26;
                do
                {
                  uint64_t v54 = v53;
                  uint64_t v53 = v52;
                  uint64_t v52 = v54 % v52;
                }
                while (v52);
                if (v53)
                {
                  long long v55 = &v26[v53];
                  do
                  {
                    unsigned int v57 = *--v55;
                    unsigned int v56 = v57;
                    long long v58 = &v55[v36];
                    long long v59 = v55;
                    do
                    {
                      long long v60 = v58;
                      unsigned int *v59 = *v58;
                      uint64_t v61 = (v25 - (char *)v58) >> 2;
                      BOOL v62 = __OFSUB__(v36, v61);
                      uint64_t v64 = v36 - v61;
                      char v63 = (v64 < 0) ^ v62;
                      long long v58 = &v26[v64];
                      if (v63) {
                        long long v58 = &v60[v36];
                      }
                      long long v59 = v60;
                    }
                    while (v58 != v55);
                    unsigned int *v60 = v56;
                  }
                  while (v55 != v26);
                }
                unint64_t v24 = &v26[v33 >> 2];
              }
            }
          }
          uint64_t v21 = v78;
        }
        goto LABEL_64;
      }
    }
    else
    {
      if (v78 >= 0) {
        uint64_t v22 = v78;
      }
      else {
        uint64_t v22 = v78 + 1;
      }
      uint64_t v23 = v22 >> 1;
      unint64_t v24 = (unsigned int *)v17;
      uint64_t v25 = &v17[4 * (v22 >> 1)];
      uint64_t v26 = (unsigned int *)v17;
      if ((char *)(v17 - v16) != v13)
      {
        uint64_t v79 = v22 >> 1;
        unint64_t v27 = (v17 - v16 - (uint64_t)v13) >> 2;
        uint64_t v26 = (unsigned int *)&v13[(void)v16];
        do
        {
          uint64_t v28 = *(void *)(*v81 + 24);
          if (!v28) {
            goto LABEL_74;
          }
          uint64_t v29 = &v26[v27 >> 1];
          unsigned int v31 = *v29;
          uint64_t v30 = v29 + 1;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 48))(v28, *(void *)v81[1] + 160 * *(unsigned int *)v25, *(void *)v81[1] + 160 * v31))
          {
            v27 >>= 1;
          }
          else
          {
            uint64_t v26 = v30;
            v27 += ~(v27 >> 1);
          }
        }
        while (v27);
        uint64_t v20 = v16;
        uint64_t v21 = v78;
        uint64_t v23 = v79;
        unint64_t v24 = (unsigned int *)v17;
      }
      uint64_t v32 = ((char *)v26 - v20 - (uint64_t)v13) >> 2;
      if (v26 != v24) {
        goto LABEL_25;
      }
    }
    unint64_t v24 = (unsigned int *)v25;
LABEL_64:
    a5 = -(v32 + v14);
    uint64_t v65 = v21 - v23;
    if (v32 + v23 >= v21 - (v32 + v23) - v14)
    {
      unint64_t v68 = v24;
      uint64_t v69 = -(v32 + v14);
      uint64_t v70 = v23;
      __n128 result = sub_B8F0D4(v24, v25, v77, v81, v69, v65, a7, a8);
      a2 = (char *)v26;
      a5 = v32;
      a3 = v68;
      unsigned int v12 = v76;
      uint64_t v78 = v70;
      a4 = (void **)v81;
      if (!v70) {
        return result;
      }
    }
    else
    {
      uint64_t v66 = &v13[(void)v20];
      size_t v67 = (char *)v24;
      __n128 result = sub_B8F0D4(v66, v26, v24, v81, v32, v23, a7, a8);
      unsigned int v12 = v67;
      a2 = v25;
      a3 = v77;
      uint64_t v78 = v65;
      a4 = (void **)v81;
      if (!v65) {
        return result;
      }
    }
  }

  return (uint64_t)sub_B8F77C(v12, a2, a3, a4, a5, v78, a7);
}

unsigned int *sub_B8F614(unsigned int *result, unsigned int *a2, unsigned int *a3, void **a4)
{
  if (result != a2)
  {
    uint64_t v6 = result + 1;
    *a3 = *result;
    if (result + 1 != a2)
    {
      uint64_t v8 = 0;
      uint64_t v9 = a3;
      do
      {
        uint64_t v12 = (*a4)[3];
        if (!v12) {
LABEL_15:
        }
          sub_29F82C();
        unint64_t v13 = v9++;
        __n128 result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 48))(v12, *a4[1] + 160 * *v6, *a4[1] + 160 * *v13);
        uint64_t v10 = v9;
        if (result)
        {
          v13[1] = *v13;
          uint64_t v10 = a3;
          if (v13 != a3)
          {
            uint64_t v14 = v8;
            do
            {
              uint64_t v15 = (*a4)[3];
              if (!v15) {
                goto LABEL_15;
              }
              __n128 result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 48))(v15, *a4[1] + 160 * *v6, *a4[1] + 160 * *(unsigned int *)((char *)a3 + v14 - 4));
              if (!result)
              {
                uint64_t v10 = (unsigned int *)((char *)a3 + v14);
                goto LABEL_5;
              }
              *(unsigned int *)((char *)a3 + v14) = *(unsigned int *)((char *)a3 + v14 - 4);
              v14 -= 4;
            }
            while (v14);
            uint64_t v10 = a3;
          }
        }
LABEL_5:
        unsigned int v11 = *v6++;
        unsigned int *v10 = v11;
        v8 += 4;
      }
      while (v6 != a2);
    }
  }
  return result;
}

char *sub_B8F77C(char *__dst, char *a2, unsigned int *a3, void **a4, uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v7 = __src;
  uint64_t v9 = a3;
  uint64_t v10 = (unsigned int *)a2;
  unsigned int v11 = (unsigned int *)__dst;
  if (a5 <= a6)
  {
    if (__dst == a2) {
      return __dst;
    }
    unint64_t v21 = a2 - __dst - 4;
    if (v21 < 0x1C)
    {
      uint64_t v22 = __src;
      uint64_t v23 = __dst;
    }
    else
    {
      uint64_t v22 = __src;
      uint64_t v23 = __dst;
      if ((unint64_t)(__src - __dst) >= 0x20)
      {
        uint64_t v24 = (v21 >> 2) + 1;
        uint64_t v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v22 = &__src[v25];
        uint64_t v23 = &__dst[v25];
        uint64_t v26 = (long long *)(__dst + 16);
        unint64_t v27 = __src + 16;
        uint64_t v28 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *unint64_t v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 8;
        }
        while (v28);
        if (v24 == (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_38:
          if (v22 != __src)
          {
            while (v10 != v9)
            {
              uint64_t v40 = (*a4)[3];
              if (!v40) {
LABEL_53:
              }
                sub_29F82C();
              long long __dst = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v40 + 48))(v40, *a4[1] + 160 * *v10, *a4[1] + 160 * *(unsigned int *)v7);
              if (__dst) {
                unint64_t v41 = v10;
              }
              else {
                unint64_t v41 = (unsigned int *)v7;
              }
              v10 += __dst;
              v7 += 4 * (__dst ^ 1);
              *v11++ = *v41;
              if (v7 == v22) {
                return __dst;
              }
            }
            return (char *)memmove(v11, v7, v22 - v7);
          }
          return __dst;
        }
      }
    }
    do
    {
      int v39 = *(_DWORD *)v23;
      v23 += 4;
      *(_DWORD *)uint64_t v22 = v39;
      v22 += 4;
    }
    while (v23 != a2);
    goto LABEL_38;
  }
  if (a2 == (char *)a3) {
    return __dst;
  }
  unint64_t v12 = (char *)a3 - a2 - 4;
  if (v12 < 0x1C)
  {
    unint64_t v13 = __src;
    uint64_t v14 = a2;
  }
  else
  {
    unint64_t v13 = __src;
    uint64_t v14 = a2;
    if ((unint64_t)(__src - a2) >= 0x20)
    {
      uint64_t v15 = (v12 >> 2) + 1;
      uint64_t v16 = 4 * (v15 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v13 = &__src[v16];
      uint64_t v14 = &a2[v16];
      uint64_t v17 = (long long *)(a2 + 16);
      BOOL v18 = __src + 16;
      uint64_t v19 = v15 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v20 = *v17;
        *(v18 - 1) = *(v17 - 1);
        *BOOL v18 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 8;
      }
      while (v19);
      if (v15 == (v15 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_18;
      }
    }
  }
  do
  {
    int v30 = *(_DWORD *)v14;
    v14 += 4;
    *(_DWORD *)unint64_t v13 = v30;
    v13 += 4;
  }
  while (v14 != (char *)a3);
LABEL_18:
  if (v13 == __src) {
    return __dst;
  }
  unsigned int v31 = a3;
  while (v10 != v11)
  {
    uint64_t v32 = (*a4)[3];
    if (!v32) {
      goto LABEL_53;
    }
    long long __dst = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v32 + 48))(v32, *a4[1] + 160 * *((unsigned int *)v13 - 1), *a4[1] + 160 * *(v10 - 1));
    if (__dst) {
      uint64_t v33 = (char *)v10;
    }
    else {
      uint64_t v33 = v13;
    }
    if (__dst) {
      --v10;
    }
    else {
      v13 -= 4;
    }
    *--unsigned int v31 = *((_DWORD *)v33 - 1);
    --v9;
    if (v13 == v7) {
      return __dst;
    }
  }
  unint64_t v34 = v13 - v7 - 4;
  if (v34 < 0x2C || (unint64_t)(v13 - (char *)v9) < 0x20)
  {
    unint64_t v35 = (unsigned int *)v13;
    uint64_t v36 = v31;
LABEL_33:
    int v37 = v36 - 1;
    do
    {
      unsigned int v38 = *--v35;
      *v37-- = v38;
    }
    while (v35 != (unsigned int *)v7);
    return __dst;
  }
  uint64_t v42 = 0;
  uint64_t v43 = (v34 >> 2) + 1;
  uint64_t v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
  unint64_t v35 = (unsigned int *)&v13[-v44];
  uint64_t v36 = &v31[v44 / 0xFFFFFFFFFFFFFFFCLL];
  uint64_t v45 = v43 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v46 = *(_OWORD *)&v13[v42 * 4 - 16];
    long long v47 = &v31[v42];
    *((_OWORD *)v47 - 2) = *(_OWORD *)&v13[v42 * 4 - 32];
    *((_OWORD *)v47 - 1) = v46;
    v42 -= 8;
    v45 -= 8;
  }
  while (v45);
  if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_33;
  }
  return __dst;
}

__n128 sub_B8FABC(__n128 *a1, __n128 *a2, void *a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 result)
{
  if (a4 >= 2)
  {
    uint64_t v9 = (long long *)a1;
    if (a4 == 2)
    {
      uint64_t v10 = a3[3];
      if (v10)
      {
        unsigned int v11 = (long long *)&a2[-1];
        if ((*(unsigned int (**)(uint64_t, __n128 *, long long *))(*(void *)v10 + 48))(v10, a2 - 1, v9))
        {
          __n128 result = (__n128)*v9;
          long long *v9 = *v11;
          *unsigned int v11 = (__int128)result;
        }
        return result;
      }
LABEL_38:
      sub_29F82C();
    }
    if ((uint64_t)a4 > 128)
    {
      uint64_t v22 = (char *)a5;
      unint64_t v23 = a4 >> 1;
      uint64_t v24 = &a1[a4 >> 1];
      unint64_t v25 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_B8FDCC(a1, v24, (uint64_t)a3, v25, a5);
        unint64_t v27 = (__n128 *)&v22[16 * v23];
        __n128 result = sub_B8FDCC((__n128 *)&v9[a4 >> 1], a2, (uint64_t)a3, a4 - (a4 >> 1), v27);
        uint64_t v28 = &v22[16 * a4];
        long long v29 = v27;
        while (v29 != (__n128 *)v28)
        {
          uint64_t v31 = a3[3];
          if (!v31) {
            goto LABEL_38;
          }
          if ((*(unsigned int (**)(uint64_t, __n128 *, char *, __n128))(*(void *)v31 + 48))(v31, v29, v22, result))
          {
            __n128 v32 = *v29++;
            __n128 result = v32;
            *v9++ = (__int128)v32;
            if (v22 == (char *)v27)
            {
LABEL_30:
              if (v29 != (__n128 *)v28)
              {
                uint64_t v33 = 0;
                do
                {
                  __n128 result = v29[v33];
                  v9[v33++] = (__int128)result;
                }
                while (&v29[v33] != (__n128 *)v28);
              }
              return result;
            }
          }
          else
          {
            __n128 v30 = *(__n128 *)v22;
            v22 += 16;
            __n128 result = v30;
            *v9++ = (__int128)v30;
            if (v22 == (char *)v27) {
              goto LABEL_30;
            }
          }
        }
        if (v22 != (char *)v27)
        {
          uint64_t v34 = 0;
          do
          {
            __n128 result = *(__n128 *)&v22[v34 * 16];
            v9[v34++] = (__int128)result;
          }
          while (&v22[v34 * 16] != (char *)v27);
        }
      }
      else
      {
        sub_B8FABC(a1, v24, a3, v25, a5, a6);
        sub_B8FABC(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), v22, a6);
        result.n128_u64[0] = sub_B90098(v9, &v9[a4 >> 1], (long long *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v22, a6, v26).n128_u64[0];
      }
    }
    else if (a1 != a2)
    {
      unint64_t v13 = a1 + 1;
      if (&a1[1] != a2)
      {
        uint64_t v14 = 0;
        uint64_t v15 = a1;
        while (1)
        {
          uint64_t v17 = a3[3];
          if (!v17) {
            goto LABEL_38;
          }
          BOOL v18 = v13;
          if ((*(unsigned int (**)(uint64_t, __n128 *, __n128 *))(*(void *)v17 + 48))(v17, v13, v15))
          {
            __n128 v35 = *v18;
            uint64_t v19 = v14;
            do
            {
              *(long long *)((char *)v9 + v19 + 16) = *(long long *)((char *)v9 + v19);
              if (!v19)
              {
                uint64_t v16 = v9;
                goto LABEL_11;
              }
              uint64_t v20 = a3[3];
              if (!v20) {
                goto LABEL_38;
              }
              v19 -= 16;
            }
            while (((*(uint64_t (**)(uint64_t, __n128 *, char *))(*(void *)v20 + 48))(v20, &v35, (char *)v9 + v19) & 1) != 0);
            uint64_t v16 = (long long *)((char *)v9 + v19 + 16);
LABEL_11:
            __n128 result = v35;
            *uint64_t v16 = v35;
          }
          unint64_t v13 = v18 + 1;
          v14 += 16;
          uint64_t v15 = v18;
          if (&v18[1] == a2) {
            return result;
          }
        }
      }
    }
  }
  return result;
}

__n128 sub_B8FDCC(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    uint64_t v9 = a1;
    if (a4 == 2)
    {
      uint64_t v11 = *(void *)(a3 + 24);
      if (!v11) {
        goto LABEL_37;
      }
      unint64_t v12 = a2 - 1;
      int v13 = (*(uint64_t (**)(uint64_t, __n128 *, __n128 *))(*(void *)v11 + 48))(v11, a2 - 1, v9);
      uint64_t v14 = v5 + 1;
      if (v13)
      {
        *uint64_t v5 = *v12;
        __n128 result = *v9;
        *uint64_t v14 = *v9;
      }
      else
      {
        *uint64_t v5 = *v9;
        __n128 result = *v12;
        *uint64_t v14 = *v12;
      }
    }
    else
    {
      if (a4 == 1)
      {
        __n128 result = *a1;
        *a5 = *a1;
        return result;
      }
      if ((uint64_t)a4 > 8)
      {
        unint64_t v25 = a4 >> 1;
        uint64_t v26 = a4 >> 1;
        unint64_t v27 = &a1[v26];
        sub_B8FABC(a1, &a1[v26], a3, a4 >> 1, a5, a4 >> 1);
        sub_B8FABC(&v9[v26], a2, a3, a4 - v25, &v5[v26], a4 - v25);
        uint64_t v28 = &v9[v26];
        while (v28 != a2)
        {
          uint64_t v30 = *(void *)(a3 + 24);
          if (!v30) {
            goto LABEL_37;
          }
          if ((*(unsigned int (**)(uint64_t, __n128 *, __n128 *))(*(void *)v30 + 48))(v30, v28, v9))
          {
            __n128 v31 = *v28++;
            __n128 result = v31;
            *v5++ = v31;
            if (v9 == v27)
            {
LABEL_29:
              if (v28 != a2)
              {
                uint64_t v32 = 0;
                do
                {
                  __n128 result = v28[v32];
                  v5[v32++] = result;
                }
                while (&v28[v32] != a2);
              }
              return result;
            }
          }
          else
          {
            __n128 v29 = *v9++;
            __n128 result = v29;
            *v5++ = v29;
            if (v9 == v27) {
              goto LABEL_29;
            }
          }
        }
        if (v9 != v27)
        {
          uint64_t v33 = 0;
          do
          {
            __n128 result = v9[v33];
            v5[v33++] = result;
          }
          while (&v9[v33] != v27);
        }
      }
      else if (a1 != a2)
      {
        uint64_t v15 = a1 + 1;
        __n128 result = *a1;
        *a5 = *a1;
        if (&a1[1] != a2)
        {
          uint64_t v16 = 0;
          uint64_t v17 = a5;
          while (1)
          {
            uint64_t v20 = *(void *)(a3 + 24);
            if (!v20) {
              break;
            }
            unint64_t v21 = v17++;
            int v22 = (*(uint64_t (**)(uint64_t, __n128 *, __n128 *))(*(void *)v20 + 48))(v20, v15, v21);
            BOOL v18 = v17;
            if (v22)
            {
              *uint64_t v17 = *v21;
              BOOL v18 = v5;
              if (v21 != v5)
              {
                uint64_t v23 = v16;
                do
                {
                  uint64_t v24 = *(void *)(a3 + 24);
                  if (!v24) {
                    goto LABEL_37;
                  }
                  if (!(*(unsigned int (**)(uint64_t, __n128 *, uint64_t))(*(void *)v24 + 48))(v24, v15, (uint64_t)&v5[-1] + v23))
                  {
                    BOOL v18 = (__n128 *)((char *)v5 + v23);
                    goto LABEL_13;
                  }
                  *(__n128 *)((char *)v5 + v23) = *(__n128 *)((char *)v5 + v23 - 16);
                  v23 -= 16;
                }
                while (v23);
                BOOL v18 = v5;
              }
            }
LABEL_13:
            __n128 v19 = *v15++;
            __n128 result = v19;
            *BOOL v18 = v19;
            v16 += 16;
            if (v15 == a2) {
              return result;
            }
          }
LABEL_37:
          sub_29F82C();
        }
      }
    }
  }
  return result;
}

__n128 sub_B90098(long long *a1, long long *a2, long long *a3, void *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 result)
{
  uint64_t v57 = a6;
  if (a6)
  {
    while (1)
    {
      if (v57 <= a8 || a5 <= a8)
      {
        sub_B90684(a1, a2, a3, (uint64_t)a4, a5, v57, a7);
        return result;
      }
      if (!a5) {
        return result;
      }
      unint64_t v13 = 0;
      uint64_t v14 = -a5;
      while (1)
      {
        uint64_t v15 = a4[3];
        if (!v15) {
          sub_29F82C();
        }
        if ((*(uint64_t (**)(uint64_t, long long *, long long *))(*(void *)v15 + 48))(v15, a2, &a1[v13 / 0x10]))break; {
        v13 += 16;
        }
        if (__CFADD__(v14++, 1)) {
          return result;
        }
      }
      uint64_t v51 = &a1[v13 / 0x10];
      if (-v14 >= v57)
      {
        if (v14 == -1)
        {
          __n128 v61 = (__n128)a1[v13 / 0x10];
          a1[v13 / 0x10] = *a2;
          __n128 result = v61;
          *a2 = (__int128)v61;
          return result;
        }
        if (v14 <= 0) {
          uint64_t v31 = -v14;
        }
        else {
          uint64_t v31 = 1 - v14;
        }
        uint64_t v32 = (void *)a4[3];
        if (v32)
        {
          if (v32 == a4)
          {
            char v63 = v62;
            (*(void (**)(void *, void *))(*a4 + 24))(a4, v62);
          }
          else
          {
            char v63 = (void *)(*(uint64_t (**)(void *))(*v32 + 16))(v32);
          }
        }
        else
        {
          char v63 = 0;
        }
        uint64_t v22 = v31 >> 1;
        __n128 v19 = &a1[v22 + v13 / 0x10];
        BOOL v18 = a2;
        if (a2 != a3)
        {
          uint64_t v53 = v22;
          unint64_t v33 = a3 - a2;
          BOOL v18 = a2;
          do
          {
            if (!v63) {
              sub_29F82C();
            }
            uint64_t v34 = &v18[v33 >> 1];
            int v35 = (*(uint64_t (**)(void *, long long *, long long *))(*v63 + 48))(v63, v34, v19);
            if (v35) {
              v33 += ~(v33 >> 1);
            }
            else {
              v33 >>= 1;
            }
            if (v35) {
              BOOL v18 = v34 + 1;
            }
          }
          while (v33);
          uint64_t v22 = v53;
        }
        if (v63 == v62)
        {
          (*(void (**)(void *))(v62[0] + 32))(v62);
          uint64_t v23 = a8;
          uint64_t v52 = v18 - a2;
          if (v19 != a2) {
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v23 = a8;
          if (v63) {
            (*(void (**)(void))(*v63 + 40))();
          }
          uint64_t v52 = v18 - a2;
          if (v19 != a2)
          {
LABEL_23:
            uint64_t v24 = v22;
            uint64_t v25 = (char *)v18 - (char *)a2;
            if (v18 == a2)
            {
              a2 = v19;
              uint64_t v22 = v24;
            }
            else
            {
              uint64_t v26 = v19 + 1;
              if (v19 + 1 == a2)
              {
                long long v59 = *v19;
                memmove(v19, a2, (char *)v18 - (char *)a2);
                a2 = (long long *)((char *)v19 + v25);
                *(long long *)((char *)v19 + v25) = v59;
                uint64_t v22 = v24;
              }
              else
              {
                unint64_t v27 = a2 + 1;
                if (a2 + 1 == v18)
                {
                  a2 = v19 + 1;
                  long long v60 = *(v18 - 1);
                  if (v18 - 1 != v19) {
                    memmove(v19 + 1, v19, (char *)(v18 - 1) - (char *)v19);
                  }
                  long long *v19 = v60;
                  uint64_t v22 = v24;
                }
                else
                {
                  uint64_t v28 = a2 - v19;
                  uint64_t v29 = v25 >> 4;
                  if (v28 == v25 >> 4)
                  {
                    uint64_t v22 = v24;
                    do
                    {
                      long long v58 = *(v26 - 1);
                      *(v26 - 1) = *(v27 - 1);
                      *(v27 - 1) = v58;
                      if (v26 == a2) {
                        break;
                      }
                      ++v26;
                    }
                    while (v27++ != v18);
                  }
                  else
                  {
                    uint64_t v39 = v25 >> 4;
                    uint64_t v40 = a2 - v19;
                    uint64_t v22 = v24;
                    do
                    {
                      uint64_t v41 = v40;
                      uint64_t v40 = v39;
                      uint64_t v39 = v41 % v39;
                    }
                    while (v39);
                    if (v40)
                    {
                      uint64_t v42 = &v19[v40];
                      do
                      {
                        long long v43 = *--v42;
                        uint64_t v44 = &v42[v28];
                        uint64_t v45 = v42;
                        do
                        {
                          long long v46 = v44;
                          *uint64_t v45 = *v44;
                          uint64_t v47 = v18 - v44;
                          BOOL v48 = __OFSUB__(v28, v47);
                          uint64_t v50 = v28 - v47;
                          char v49 = (v50 < 0) ^ v48;
                          uint64_t v44 = &v19[v50];
                          if (v49) {
                            uint64_t v44 = &v46[v28];
                          }
                          uint64_t v45 = v46;
                        }
                        while (v44 != v42);
                        *long long v46 = v43;
                      }
                      while (v42 != v19);
                    }
                    a2 = &v19[v29];
                  }
                }
              }
            }
            goto LABEL_58;
          }
        }
      }
      else
      {
        if (v57 >= 0) {
          uint64_t v17 = v57;
        }
        else {
          uint64_t v17 = v57 + 1;
        }
        uint64_t v52 = v17 >> 1;
        BOOL v18 = &a2[v17 >> 1];
        __n128 v19 = a2;
        if ((char *)a2 - (char *)a1 != v13)
        {
          unint64_t v20 = (uint64_t)((char *)a2 - (char *)a1 - v13) >> 4;
          __n128 v19 = &a1[v13 / 0x10];
          do
          {
            uint64_t v21 = a4[3];
            if (!v21) {
              sub_29F82C();
            }
            if ((*(unsigned int (**)(uint64_t, long long *, long long *))(*(void *)v21 + 48))(v21, v18, &v19[v20 >> 1]))
            {
              v20 >>= 1;
            }
            else
            {
              v19 += (v20 >> 1) + 1;
              v20 += ~(v20 >> 1);
            }
          }
          while (v20);
        }
        uint64_t v22 = (uint64_t)((char *)v19 - (char *)a1 - v13) >> 4;
        uint64_t v23 = a8;
        if (v19 != a2) {
          goto LABEL_23;
        }
      }
      a2 = v18;
LABEL_58:
      a5 = -v22 - v14;
      uint64_t v36 = v22;
      uint64_t v37 = v57 - v52;
      if (v36 + v52 >= v57 - (v36 + v52) - v14)
      {
        uint64_t v38 = v36;
        sub_B90098(a2, v18, a3, a4, a5, v57 - v52, a7, v23);
        a3 = a2;
        a2 = v19;
        a1 = v51;
        a5 = v38;
        uint64_t v57 = v52;
        if (!v52) {
          return result;
        }
      }
      else
      {
        sub_B90098(&a1[v13 / 0x10], v19, a2, a4, v36, v52, a7, v23);
        a1 = a2;
        a2 = v18;
        v57 -= v52;
        if (!v37) {
          return result;
        }
      }
    }
  }
  return result;
}

void sub_B90658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B8B744((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B9066C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B8B744((uint64_t *)va);
  _Unwind_Resume(a1);
}

long long *sub_B90684(long long *__dst, long long *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v10 = a2;
  uint64_t v11 = __dst;
  if (a5 <= a6)
  {
    if (__dst != a2)
    {
      unint64_t v17 = 0;
      do
      {
        *(_OWORD *)&__src[v17] = __dst[v17 / 0x10];
        v17 += 16;
      }
      while (&__dst[v17 / 0x10] != a2);
      if (v17)
      {
        BOOL v18 = &__src[v17];
        __n128 v19 = __src;
        while (v10 != a3)
        {
          uint64_t v21 = *(void *)(a4 + 24);
          if (!v21) {
LABEL_34:
          }
            sub_29F82C();
          long long __dst = (long long *)(*(uint64_t (**)(uint64_t, long long *, char *))(*(void *)v21 + 48))(v21, v10, v19);
          if (__dst)
          {
            long long v22 = *v10++;
            *v11++ = v22;
            if (v18 == v19) {
              return __dst;
            }
          }
          else
          {
            long long v20 = *(_OWORD *)v19;
            v19 += 16;
            *v11++ = v20;
            if (v18 == v19) {
              return __dst;
            }
          }
        }
        return (long long *)memmove(v11, v19, __src - v19 + v17);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v12 = 0;
    do
    {
      *(_OWORD *)&__src[v12 * 16] = a2[v12];
      ++v12;
    }
    while (&a2[v12] != a3);
    if (v12 * 16)
    {
      unint64_t v13 = &__src[v12 * 16];
      uint64_t v14 = a3 - 1;
      while (v10 != v11)
      {
        uint64_t v15 = *(void *)(a4 + 24);
        if (!v15) {
          goto LABEL_34;
        }
        long long __dst = (long long *)(*(uint64_t (**)(uint64_t, char *, long long *))(*(void *)v15 + 48))(v15, v13 - 16, v10 - 1);
        if (__dst) {
          uint64_t v16 = (char *)(v10 - 1);
        }
        else {
          uint64_t v16 = v13 - 16;
        }
        if (__dst) {
          --v10;
        }
        else {
          v13 -= 16;
        }
        *v14-- = *(_OWORD *)v16;
        if (v13 == __src) {
          return __dst;
        }
      }
      uint64_t v23 = 0;
      do
      {
        v14[v23] = *(_OWORD *)&v13[v23 * 16 - 16];
        --v23;
      }
      while (&v13[v23 * 16] != __src);
    }
  }
  return __dst;
}

__n128 sub_B90860(__n128 *a1, __n128 *a2, void *a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 result)
{
  if (a4 >= 2)
  {
    uint64_t v9 = (long long *)a1;
    if (a4 == 2)
    {
      uint64_t v10 = a3[3];
      if (v10)
      {
        uint64_t v11 = (long long *)&a2[-1];
        if ((*(unsigned int (**)(uint64_t, __n128 *, long long *))(*(void *)v10 + 48))(v10, a2 - 1, v9))
        {
          __n128 result = (__n128)*v9;
          long long *v9 = *v11;
          *uint64_t v11 = (__int128)result;
        }
        return result;
      }
LABEL_38:
      sub_29F82C();
    }
    if ((uint64_t)a4 > 128)
    {
      long long v22 = (char *)a5;
      unint64_t v23 = a4 >> 1;
      uint64_t v24 = &a1[a4 >> 1];
      unint64_t v25 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        sub_B90B70(a1, v24, (uint64_t)a3, v25, a5);
        unint64_t v27 = (__n128 *)&v22[16 * v23];
        __n128 result = sub_B90B70((__n128 *)&v9[a4 >> 1], a2, (uint64_t)a3, a4 - (a4 >> 1), v27);
        uint64_t v28 = &v22[16 * a4];
        uint64_t v29 = v27;
        while (v29 != (__n128 *)v28)
        {
          uint64_t v31 = a3[3];
          if (!v31) {
            goto LABEL_38;
          }
          if ((*(unsigned int (**)(uint64_t, __n128 *, char *, __n128))(*(void *)v31 + 48))(v31, v29, v22, result))
          {
            __n128 v32 = *v29++;
            __n128 result = v32;
            *v9++ = (__int128)v32;
            if (v22 == (char *)v27)
            {
LABEL_30:
              if (v29 != (__n128 *)v28)
              {
                uint64_t v33 = 0;
                do
                {
                  __n128 result = v29[v33];
                  v9[v33++] = (__int128)result;
                }
                while (&v29[v33] != (__n128 *)v28);
              }
              return result;
            }
          }
          else
          {
            __n128 v30 = *(__n128 *)v22;
            v22 += 16;
            __n128 result = v30;
            *v9++ = (__int128)v30;
            if (v22 == (char *)v27) {
              goto LABEL_30;
            }
          }
        }
        if (v22 != (char *)v27)
        {
          uint64_t v34 = 0;
          do
          {
            __n128 result = *(__n128 *)&v22[v34 * 16];
            v9[v34++] = (__int128)result;
          }
          while (&v22[v34 * 16] != (char *)v27);
        }
      }
      else
      {
        sub_B90860(a1, v24, a3, v25, a5, a6);
        sub_B90860(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), v22, a6);
        result.n128_u64[0] = sub_B90E3C(v9, &v9[a4 >> 1], (long long *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v22, a6, v26).n128_u64[0];
      }
    }
    else if (a1 != a2)
    {
      unint64_t v13 = a1 + 1;
      if (&a1[1] != a2)
      {
        uint64_t v14 = 0;
        uint64_t v15 = a1;
        while (1)
        {
          uint64_t v17 = a3[3];
          if (!v17) {
            goto LABEL_38;
          }
          BOOL v18 = v13;
          if ((*(unsigned int (**)(uint64_t, __n128 *, __n128 *))(*(void *)v17 + 48))(v17, v13, v15))
          {
            __n128 v35 = *v18;
            uint64_t v19 = v14;
            do
            {
              *(long long *)((char *)v9 + v19 + 16) = *(long long *)((char *)v9 + v19);
              if (!v19)
              {
                uint64_t v16 = v9;
                goto LABEL_11;
              }
              uint64_t v20 = a3[3];
              if (!v20) {
                goto LABEL_38;
              }
              v19 -= 16;
            }
            while (((*(uint64_t (**)(uint64_t, __n128 *, char *))(*(void *)v20 + 48))(v20, &v35, (char *)v9 + v19) & 1) != 0);
            uint64_t v16 = (long long *)((char *)v9 + v19 + 16);
LABEL_11:
            __n128 result = v35;
            *uint64_t v16 = v35;
          }
          unint64_t v13 = v18 + 1;
          v14 += 16;
          uint64_t v15 = v18;
          if (&v18[1] == a2) {
            return result;
          }
        }
      }
    }
  }
  return result;
}

__n128 sub_B90B70(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    uint64_t v9 = a1;
    if (a4 == 2)
    {
      uint64_t v11 = *(void *)(a3 + 24);
      if (!v11) {
        goto LABEL_37;
      }
      uint64_t v12 = a2 - 1;
      int v13 = (*(uint64_t (**)(uint64_t, __n128 *, __n128 *))(*(void *)v11 + 48))(v11, a2 - 1, v9);
      uint64_t v14 = v5 + 1;
      if (v13)
      {
        *uint64_t v5 = *v12;
        __n128 result = *v9;
        *uint64_t v14 = *v9;
      }
      else
      {
        *uint64_t v5 = *v9;
        __n128 result = *v12;
        *uint64_t v14 = *v12;
      }
    }
    else
    {
      if (a4 == 1)
      {
        __n128 result = *a1;
        *a5 = *a1;
        return result;
      }
      if ((uint64_t)a4 > 8)
      {
        unint64_t v25 = a4 >> 1;
        uint64_t v26 = a4 >> 1;
        unint64_t v27 = &a1[v26];
        sub_B90860(a1, &a1[v26], a3, a4 >> 1, a5, a4 >> 1);
        sub_B90860(&v9[v26], a2, a3, a4 - v25, &v5[v26], a4 - v25);
        uint64_t v28 = &v9[v26];
        while (v28 != a2)
        {
          uint64_t v30 = *(void *)(a3 + 24);
          if (!v30) {
            goto LABEL_37;
          }
          if ((*(unsigned int (**)(uint64_t, __n128 *, __n128 *))(*(void *)v30 + 48))(v30, v28, v9))
          {
            __n128 v31 = *v28++;
            __n128 result = v31;
            *v5++ = v31;
            if (v9 == v27)
            {
LABEL_29:
              if (v28 != a2)
              {
                uint64_t v32 = 0;
                do
                {
                  __n128 result = v28[v32];
                  v5[v32++] = result;
                }
                while (&v28[v32] != a2);
              }
              return result;
            }
          }
          else
          {
            __n128 v29 = *v9++;
            __n128 result = v29;
            *v5++ = v29;
            if (v9 == v27) {
              goto LABEL_29;
            }
          }
        }
        if (v9 != v27)
        {
          uint64_t v33 = 0;
          do
          {
            __n128 result = v9[v33];
            v5[v33++] = result;
          }
          while (&v9[v33] != v27);
        }
      }
      else if (a1 != a2)
      {
        uint64_t v15 = a1 + 1;
        __n128 result = *a1;
        *a5 = *a1;
        if (&a1[1] != a2)
        {
          uint64_t v16 = 0;
          uint64_t v17 = a5;
          while (1)
          {
            uint64_t v20 = *(void *)(a3 + 24);
            if (!v20) {
              break;
            }
            uint64_t v21 = v17++;
            int v22 = (*(uint64_t (**)(uint64_t, __n128 *, __n128 *))(*(void *)v20 + 48))(v20, v15, v21);
            BOOL v18 = v17;
            if (v22)
            {
              *uint64_t v17 = *v21;
              BOOL v18 = v5;
              if (v21 != v5)
              {
                uint64_t v23 = v16;
                do
                {
                  uint64_t v24 = *(void *)(a3 + 24);
                  if (!v24) {
                    goto LABEL_37;
                  }
                  if (!(*(unsigned int (**)(uint64_t, __n128 *, uint64_t))(*(void *)v24 + 48))(v24, v15, (uint64_t)&v5[-1] + v23))
                  {
                    BOOL v18 = (__n128 *)((char *)v5 + v23);
                    goto LABEL_13;
                  }
                  *(__n128 *)((char *)v5 + v23) = *(__n128 *)((char *)v5 + v23 - 16);
                  v23 -= 16;
                }
                while (v23);
                BOOL v18 = v5;
              }
            }
LABEL_13:
            __n128 v19 = *v15++;
            __n128 result = v19;
            *BOOL v18 = v19;
            v16 += 16;
            if (v15 == a2) {
              return result;
            }
          }
LABEL_37:
          sub_29F82C();
        }
      }
    }
  }
  return result;
}

__n128 sub_B90E3C(long long *a1, long long *a2, long long *a3, void *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 result)
{
  uint64_t v57 = a6;
  if (a6)
  {
    while (1)
    {
      if (v57 <= a8 || a5 <= a8)
      {
        sub_B91428(a1, a2, a3, (uint64_t)a4, a5, v57, a7);
        return result;
      }
      if (!a5) {
        return result;
      }
      unint64_t v13 = 0;
      uint64_t v14 = -a5;
      while (1)
      {
        uint64_t v15 = a4[3];
        if (!v15) {
          sub_29F82C();
        }
        if ((*(uint64_t (**)(uint64_t, long long *, long long *))(*(void *)v15 + 48))(v15, a2, &a1[v13 / 0x10]))break; {
        v13 += 16;
        }
        if (__CFADD__(v14++, 1)) {
          return result;
        }
      }
      uint64_t v51 = &a1[v13 / 0x10];
      if (-v14 >= v57)
      {
        if (v14 == -1)
        {
          __n128 v61 = (__n128)a1[v13 / 0x10];
          a1[v13 / 0x10] = *a2;
          __n128 result = v61;
          *a2 = (__int128)v61;
          return result;
        }
        if (v14 <= 0) {
          uint64_t v31 = -v14;
        }
        else {
          uint64_t v31 = 1 - v14;
        }
        uint64_t v32 = (void *)a4[3];
        if (v32)
        {
          if (v32 == a4)
          {
            char v63 = v62;
            (*(void (**)(void *, void *))(*a4 + 24))(a4, v62);
          }
          else
          {
            char v63 = (void *)(*(uint64_t (**)(void *))(*v32 + 16))(v32);
          }
        }
        else
        {
          char v63 = 0;
        }
        uint64_t v22 = v31 >> 1;
        __n128 v19 = &a1[v22 + v13 / 0x10];
        BOOL v18 = a2;
        if (a2 != a3)
        {
          uint64_t v53 = v22;
          unint64_t v33 = a3 - a2;
          BOOL v18 = a2;
          do
          {
            if (!v63) {
              sub_29F82C();
            }
            uint64_t v34 = &v18[v33 >> 1];
            int v35 = (*(uint64_t (**)(void *, long long *, long long *))(*v63 + 48))(v63, v34, v19);
            if (v35) {
              v33 += ~(v33 >> 1);
            }
            else {
              v33 >>= 1;
            }
            if (v35) {
              BOOL v18 = v34 + 1;
            }
          }
          while (v33);
          uint64_t v22 = v53;
        }
        if (v63 == v62)
        {
          (*(void (**)(void *))(v62[0] + 32))(v62);
          uint64_t v23 = a8;
          uint64_t v52 = v18 - a2;
          if (v19 != a2) {
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v23 = a8;
          if (v63) {
            (*(void (**)(void))(*v63 + 40))();
          }
          uint64_t v52 = v18 - a2;
          if (v19 != a2)
          {
LABEL_23:
            uint64_t v24 = v22;
            uint64_t v25 = (char *)v18 - (char *)a2;
            if (v18 == a2)
            {
              a2 = v19;
              uint64_t v22 = v24;
            }
            else
            {
              uint64_t v26 = v19 + 1;
              if (v19 + 1 == a2)
              {
                long long v59 = *v19;
                memmove(v19, a2, (char *)v18 - (char *)a2);
                a2 = (long long *)((char *)v19 + v25);
                *(long long *)((char *)v19 + v25) = v59;
                uint64_t v22 = v24;
              }
              else
              {
                unint64_t v27 = a2 + 1;
                if (a2 + 1 == v18)
                {
                  a2 = v19 + 1;
                  long long v60 = *(v18 - 1);
                  if (v18 - 1 != v19) {
                    memmove(v19 + 1, v19, (char *)(v18 - 1) - (char *)v19);
                  }
                  long long *v19 = v60;
                  uint64_t v22 = v24;
                }
                else
                {
                  uint64_t v28 = a2 - v19;
                  uint64_t v29 = v25 >> 4;
                  if (v28 == v25 >> 4)
                  {
                    uint64_t v22 = v24;
                    do
                    {
                      long long v58 = *(v26 - 1);
                      *(v26 - 1) = *(v27 - 1);
                      *(v27 - 1) = v58;
                      if (v26 == a2) {
                        break;
                      }
                      ++v26;
                    }
                    while (v27++ != v18);
                  }
                  else
                  {
                    uint64_t v39 = v25 >> 4;
                    uint64_t v40 = a2 - v19;
                    uint64_t v22 = v24;
                    do
                    {
                      uint64_t v41 = v40;
                      uint64_t v40 = v39;
                      uint64_t v39 = v41 % v39;
                    }
                    while (v39);
                    if (v40)
                    {
                      uint64_t v42 = &v19[v40];
                      do
                      {
                        long long v43 = *--v42;
                        uint64_t v44 = &v42[v28];
                        uint64_t v45 = v42;
                        do
                        {
                          long long v46 = v44;
                          *uint64_t v45 = *v44;
                          uint64_t v47 = v18 - v44;
                          BOOL v48 = __OFSUB__(v28, v47);
                          uint64_t v50 = v28 - v47;
                          char v49 = (v50 < 0) ^ v48;
                          uint64_t v44 = &v19[v50];
                          if (v49) {
                            uint64_t v44 = &v46[v28];
                          }
                          uint64_t v45 = v46;
                        }
                        while (v44 != v42);
                        *long long v46 = v43;
                      }
                      while (v42 != v19);
                    }
                    a2 = &v19[v29];
                  }
                }
              }
            }
            goto LABEL_58;
          }
        }
      }
      else
      {
        if (v57 >= 0) {
          uint64_t v17 = v57;
        }
        else {
          uint64_t v17 = v57 + 1;
        }
        uint64_t v52 = v17 >> 1;
        BOOL v18 = &a2[v17 >> 1];
        __n128 v19 = a2;
        if ((char *)a2 - (char *)a1 != v13)
        {
          unint64_t v20 = (uint64_t)((char *)a2 - (char *)a1 - v13) >> 4;
          __n128 v19 = &a1[v13 / 0x10];
          do
          {
            uint64_t v21 = a4[3];
            if (!v21) {
              sub_29F82C();
            }
            if ((*(unsigned int (**)(uint64_t, long long *, long long *))(*(void *)v21 + 48))(v21, v18, &v19[v20 >> 1]))
            {
              v20 >>= 1;
            }
            else
            {
              v19 += (v20 >> 1) + 1;
              v20 += ~(v20 >> 1);
            }
          }
          while (v20);
        }
        uint64_t v22 = (uint64_t)((char *)v19 - (char *)a1 - v13) >> 4;
        uint64_t v23 = a8;
        if (v19 != a2) {
          goto LABEL_23;
        }
      }
      a2 = v18;
LABEL_58:
      a5 = -v22 - v14;
      uint64_t v36 = v22;
      uint64_t v37 = v57 - v52;
      if (v36 + v52 >= v57 - (v36 + v52) - v14)
      {
        uint64_t v38 = v36;
        sub_B90E3C(a2, v18, a3, a4, a5, v57 - v52, a7, v23);
        a3 = a2;
        a2 = v19;
        a1 = v51;
        a5 = v38;
        uint64_t v57 = v52;
        if (!v52) {
          return result;
        }
      }
      else
      {
        sub_B90E3C(&a1[v13 / 0x10], v19, a2, a4, v36, v52, a7, v23);
        a1 = a2;
        a2 = v18;
        v57 -= v52;
        if (!v37) {
          return result;
        }
      }
    }
  }
  return result;
}

void sub_B913FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B8BCD0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B91410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_B8BCD0((uint64_t *)va);
  _Unwind_Resume(a1);
}

long long *sub_B91428(long long *__dst, long long *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v10 = a2;
  uint64_t v11 = __dst;
  if (a5 <= a6)
  {
    if (__dst != a2)
    {
      unint64_t v17 = 0;
      do
      {
        *(_OWORD *)&__src[v17] = __dst[v17 / 0x10];
        v17 += 16;
      }
      while (&__dst[v17 / 0x10] != a2);
      if (v17)
      {
        BOOL v18 = &__src[v17];
        __n128 v19 = __src;
        while (v10 != a3)
        {
          uint64_t v21 = *(void *)(a4 + 24);
          if (!v21) {
LABEL_34:
          }
            sub_29F82C();
          long long __dst = (long long *)(*(uint64_t (**)(uint64_t, long long *, char *))(*(void *)v21 + 48))(v21, v10, v19);
          if (__dst)
          {
            long long v22 = *v10++;
            *v11++ = v22;
            if (v18 == v19) {
              return __dst;
            }
          }
          else
          {
            long long v20 = *(_OWORD *)v19;
            v19 += 16;
            *v11++ = v20;
            if (v18 == v19) {
              return __dst;
            }
          }
        }
        return (long long *)memmove(v11, v19, __src - v19 + v17);
      }
    }
  }
  else if (a2 != a3)
  {
    uint64_t v12 = 0;
    do
    {
      *(_OWORD *)&__src[v12 * 16] = a2[v12];
      ++v12;
    }
    while (&a2[v12] != a3);
    if (v12 * 16)
    {
      unint64_t v13 = &__src[v12 * 16];
      uint64_t v14 = a3 - 1;
      while (v10 != v11)
      {
        uint64_t v15 = *(void *)(a4 + 24);
        if (!v15) {
          goto LABEL_34;
        }
        long long __dst = (long long *)(*(uint64_t (**)(uint64_t, char *, long long *))(*(void *)v15 + 48))(v15, v13 - 16, v10 - 1);
        if (__dst) {
          uint64_t v16 = (char *)(v10 - 1);
        }
        else {
          uint64_t v16 = v13 - 16;
        }
        if (__dst) {
          --v10;
        }
        else {
          v13 -= 16;
        }
        *v14-- = *(_OWORD *)v16;
        if (v13 == __src) {
          return __dst;
        }
      }
      uint64_t v23 = 0;
      do
      {
        v14[v23] = *(_OWORD *)&v13[v23 * 16 - 16];
        --v23;
      }
      while (&v13[v23 * 16] != __src);
    }
  }
  return __dst;
}

void sub_B91604(uint64_t a1, __n128 *a2, void *a3, unint64_t a4, __n128 *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      uint64_t v9 = a3[3];
      if (!v9) {
        sub_29F82C();
      }
      uint64_t v10 = a2 - 7;
      if ((*(unsigned int (**)(uint64_t, __n128 *, uint64_t))(*(void *)v9 + 48))(v9, a2 - 7, a1))
      {
        __n128 v31 = *(__n128 *)(a1 + 16);
        __n128 v32 = *(__n128 *)(a1 + 32);
        __n128 v33 = *(__n128 *)(a1 + 48);
        __n128 v11 = *(__n128 *)(a1 + 80);
        __n128 v34 = *(__n128 *)(a1 + 64);
        __n128 v30 = *(__n128 *)a1;
        unint64_t v12 = *(void *)(a1 + 96);
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        *(void *)(a1 + 80) = 0;
        unsigned __int8 v13 = *(unsigned char *)(a1 + 104);
        __n128 v15 = a2[-4];
        __n128 v14 = a2[-3];
        __n128 v16 = a2[-5];
        *(__n128 *)(a1 + 16) = a2[-6];
        *(__n128 *)(a1 + 32) = v16;
        *(__n128 *)(a1 + 48) = v15;
        *(__n128 *)(a1 + 64) = v14;
        *(__n128 *)a1 = *v10;
        *(__n128 *)(a1 + 80) = a2[-2];
        *(void *)(a1 + 96) = a2[-1].n128_u64[0];
        *(unsigned char *)(a1 + 104) = a2[-1].n128_u8[8];
        a2[-6] = v31;
        a2[-5] = v32;
        a2[-4] = v33;
        a2[-3] = v34;
        __n128 *v10 = v30;
        a2[-2] = v11;
        a2[-1].n128_u64[0] = v12;
        a2[-1].n128_u8[8] = v13;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      sub_B918E0((_OWORD *)a1, a2, (uint64_t)a3);
    }
    else
    {
      uint64_t v20 = a4 >> 1;
      uint64_t v21 = (long long *)(a1 + 112 * (a4 >> 1));
      if ((uint64_t)a4 <= a6)
      {
        unint64_t v29 = 0;
        v30.n128_u64[0] = (unint64_t)a5;
        v30.n128_u64[1] = (unint64_t)&v29;
        sub_B91B20(a1, (__n128 *)(a1 + 112 * (a4 >> 1)), (uint64_t)a3, a4 >> 1, (uint64_t)a5);
        unint64_t v29 = a4 >> 1;
        unint64_t v23 = a4 - v20;
        uint64_t v24 = &a5[7 * v20];
        sub_B91B20(a1 + 112 * (a4 >> 1), a2, (uint64_t)a3, v23, (uint64_t)v24);
        unint64_t v29 = a4;
        sub_B91E0C(a5, v24, (uint64_t)v24, (uint64_t)&a5[7 * a4], (unsigned char *)a1, (uint64_t)a3);
        if (a5)
        {
          unint64_t v25 = v29;
          if (v29)
          {
            unint64_t v26 = 0;
            unint64_t v27 = &a5[5].n128_u64[1];
            do
            {
              uint64_t v28 = (void *)*(v27 - 1);
              if (v28)
              {
                *unint64_t v27 = (unint64_t)v28;
                operator delete(v28);
                unint64_t v25 = v29;
              }
              ++v26;
              v27 += 14;
            }
            while (v26 < v25);
          }
        }
      }
      else
      {
        sub_B91604(a1, a1 + 112 * (a4 >> 1), a3, a4 >> 1, a5, a6);
        uint64_t v22 = a4 - v20;
        sub_B91604(v21, a2, a3, v22, a5, a6);
        sub_B920E0((__n128 *)a1, v21, (uint64_t)a2, a3, v20, v22, a5, a6);
      }
    }
  }
}

void sub_B918CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_B92068((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B918E0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 7;
    if (a1 + 7 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1;
      do
      {
        uint64_t v9 = *(void *)(a3 + 24);
        if (!v9) {
          sub_29F82C();
        }
        uint64_t v10 = v5;
        if ((*(unsigned int (**)(uint64_t, _OWORD *, _OWORD *))(*(void *)v9 + 48))(v9, v5, v8))
        {
          long long v31 = *v10;
          long long v11 = v10[1];
          long long v12 = v10[2];
          long long v13 = v10[4];
          long long v34 = v10[3];
          long long v35 = v13;
          long long v32 = v11;
          long long v33 = v12;
          long long v36 = v8[12];
          uint64_t v37 = *((void *)v8 + 26);
          *((void *)v8 + 24) = 0;
          *((void *)v8 + 25) = 0;
          *((void *)v8 + 26) = 0;
          char v38 = *((unsigned char *)v8 + 216);
          uint64_t v14 = v7;
          while (1)
          {
            uint64_t v15 = v14;
            uint64_t v16 = (uint64_t)a1 + v14;
            long long v17 = *(_OWORD *)((char *)a1 + v14 + 48);
            *(_OWORD *)(v16 + 144) = *(_OWORD *)((char *)a1 + v14 + 32);
            *(_OWORD *)(v16 + 160) = v17;
            *(_OWORD *)(v16 + 176) = *(_OWORD *)((char *)a1 + v14 + 64);
            long long v18 = *(_OWORD *)((char *)a1 + v14 + 16);
            *(_OWORD *)(v16 + 112) = *(_OWORD *)((char *)a1 + v14);
            *(_OWORD *)(v16 + 128) = v18;
            uint64_t v20 = (uint64_t)a1 + v14 + 192;
            __n128 v19 = *(void **)v20;
            if (*(void *)v20)
            {
              *(void *)(v16 + 200) = v19;
              operator delete(v19);
              *(void *)uint64_t v20 = 0;
              *(void *)(v20 + 8) = 0;
              *(void *)(v20 + 16) = 0;
            }
            *(_OWORD *)uint64_t v20 = *(_OWORD *)(v16 + 80);
            *(void *)(v16 + 208) = *(void *)(v16 + 96);
            *(void *)(v16 + 80) = 0;
            *(void *)(v16 + 88) = 0;
            *(void *)(v16 + 96) = 0;
            *(unsigned char *)(v16 + 216) = *(unsigned char *)(v16 + 104);
            if (!v15) {
              break;
            }
            uint64_t v21 = *(void *)(a3 + 24);
            if (!v21) {
              sub_29F82C();
            }
            char v22 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v21 + 48))(v21, &v31, (uint64_t)a1 + v15 - 112);
            uint64_t v14 = v15 - 112;
            if ((v22 & 1) == 0)
            {
              unint64_t v23 = (_OWORD *)((char *)a1 + v15);
              goto LABEL_16;
            }
          }
          unint64_t v23 = a1;
LABEL_16:
          _OWORD *v23 = v31;
          long long v24 = v32;
          long long v25 = v33;
          long long v26 = v35;
          void v23[3] = v34;
          v23[4] = v26;
          v23[1] = v24;
          v23[2] = v25;
          uint64_t v27 = (uint64_t)a1 + v15;
          __n128 v30 = *(void **)(v27 + 80);
          unint64_t v29 = (void *)(v27 + 80);
          uint64_t v28 = v30;
          if (v30)
          {
            *((void *)v23 + 11) = v28;
            operator delete(v28);
            *unint64_t v29 = 0;
            v29[1] = 0;
            v29[2] = 0;
          }
          *unint64_t v29 = v36;
          *((void *)v23 + 11) = *((void *)&v36 + 1);
          *((void *)v23 + 12) = v37;
          long long v36 = 0uLL;
          uint64_t v37 = 0;
          *((unsigned char *)v23 + 104) = v38;
        }
        uint64_t v5 = v10 + 7;
        v7 += 112;
        uint64_t v8 = v10;
      }
      while (v10 + 7 != a2);
    }
  }
}

void sub_B91B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B91B20(uint64_t a1, __n128 *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    if (a4 == 2)
    {
      uint64_t v13 = *(void *)(a3 + 24);
      if (!v13) {
        sub_29F82C();
      }
      uint64_t v14 = a2 - 7;
      int v15 = (*(uint64_t (**)(uint64_t, __n128 *, uint64_t))(*(void *)v13 + 48))(v13, a2 - 7, a1);
      uint64_t v16 = (void *)(a5 + 80);
      long long v17 = (__n128 *)(a5 + 112);
      long long v18 = (void *)(a5 + 192);
      if (v15)
      {
        *(__n128 *)a5 = *v14;
        __n128 v19 = a2[-6];
        __n128 v20 = a2[-5];
        __n128 v21 = a2[-3];
        *(__n128 *)(a5 + 48) = a2[-4];
        *(__n128 *)(a5 + 64) = v21;
        *(__n128 *)(a5 + 16) = v19;
        *(__n128 *)(a5 + 32) = v20;
        *(void *)(a5 + 88) = 0;
        *(void *)(a5 + 96) = 0;
        *uint64_t v16 = 0;
        *(__n128 *)(a5 + 80) = a2[-2];
        *(void *)(a5 + 96) = a2[-1].n128_u64[0];
        a2[-2].n128_u64[0] = 0;
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        *(unsigned char *)(a5 + 104) = a2[-1].n128_u8[8];
        *long long v17 = *(__n128 *)a1;
        long long v22 = *(_OWORD *)(a1 + 16);
        long long v23 = *(_OWORD *)(a1 + 32);
        long long v24 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)(a5 + 160) = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(a5 + 176) = v24;
        *(_OWORD *)(a5 + 128) = v22;
        *(_OWORD *)(a5 + 144) = v23;
        *(void *)(a5 + 200) = 0;
        *(void *)(a5 + 208) = 0;
        *long long v18 = 0;
        *(_OWORD *)(a5 + 192) = *(_OWORD *)(a1 + 80);
        *(void *)(a5 + 208) = *(void *)(a1 + 96);
        *(void *)(a1 + 80) = 0;
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        long long v25 = (unsigned __int8 *)(a1 + 104);
      }
      else
      {
        *(_OWORD *)a5 = *(_OWORD *)a1;
        long long v28 = *(_OWORD *)(a1 + 16);
        long long v29 = *(_OWORD *)(a1 + 32);
        long long v30 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)(a5 + 48) = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(a5 + 64) = v30;
        *(_OWORD *)(a5 + 16) = v28;
        *(_OWORD *)(a5 + 32) = v29;
        *(void *)(a5 + 88) = 0;
        *(void *)(a5 + 96) = 0;
        *uint64_t v16 = 0;
        *(_OWORD *)(a5 + 80) = *(_OWORD *)(a1 + 80);
        *(void *)(a5 + 96) = *(void *)(a1 + 96);
        *(void *)(a1 + 80) = 0;
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        *(unsigned char *)(a5 + 104) = *(unsigned char *)(a1 + 104);
        *long long v17 = *v14;
        __n128 v31 = a2[-6];
        __n128 v32 = a2[-5];
        __n128 v33 = a2[-3];
        *(__n128 *)(a5 + 160) = a2[-4];
        *(__n128 *)(a5 + 176) = v33;
        *(__n128 *)(a5 + 128) = v31;
        *(__n128 *)(a5 + 144) = v32;
        *(void *)(a5 + 200) = 0;
        *(void *)(a5 + 208) = 0;
        *long long v18 = 0;
        *(__n128 *)(a5 + 192) = a2[-2];
        *(void *)(a5 + 208) = a2[-1].n128_u64[0];
        a2[-2].n128_u64[0] = 0;
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        long long v25 = &a2[-1].n128_u8[8];
      }
      *(unsigned char *)(a5 + 216) = *v25;
    }
    else if (a4 == 1)
    {
      *(_OWORD *)a5 = *(_OWORD *)a1;
      long long v10 = *(_OWORD *)(a1 + 16);
      long long v11 = *(_OWORD *)(a1 + 32);
      long long v12 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a5 + 48) = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a5 + 64) = v12;
      *(_OWORD *)(a5 + 16) = v10;
      *(_OWORD *)(a5 + 32) = v11;
      *(void *)(a5 + 88) = 0;
      *(void *)(a5 + 96) = 0;
      *(void *)(a5 + 80) = 0;
      *(_OWORD *)(a5 + 80) = *(_OWORD *)(a1 + 80);
      *(void *)(a5 + 96) = *(void *)(a1 + 96);
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      *(void *)(a1 + 96) = 0;
      *(unsigned char *)(a5 + 104) = *(unsigned char *)(a1 + 104);
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v26 = a4 >> 1;
      uint64_t v27 = 112 * (a4 >> 1);
      sub_B91604(a1, a1 + v27, a3, a4 >> 1, a5, a4 >> 1);
      sub_B91604(a1 + v27, a2, a3, a4 - v26, a5 + v27, a4 - v26);
      sub_B92928((void *)a1, (void *)(a1 + v27), (void *)(a1 + v27), a2, (unsigned char *)a5, a3);
    }
    else
    {
      sub_B92608(a1, a2, a5, a3);
    }
  }
}

void sub_B91DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B92068((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 sub_B91E0C(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, unsigned char *a5, uint64_t a6)
{
  if (a1 == a2)
  {
LABEL_19:
    if (a3 != a4)
    {
      __n128 v32 = a5 + 80;
      do
      {
        *((_OWORD *)v32 - 5) = *(_OWORD *)a3;
        long long v33 = *(_OWORD *)(a3 + 16);
        long long v34 = *(_OWORD *)(a3 + 32);
        long long v35 = *(_OWORD *)(a3 + 64);
        *((_OWORD *)v32 - 2) = *(_OWORD *)(a3 + 48);
        *((_OWORD *)v32 - 1) = v35;
        *((_OWORD *)v32 - 4) = v33;
        *((_OWORD *)v32 - 3) = v34;
        long long v36 = *(void **)v32;
        if (*(void *)v32)
        {
          *((void *)v32 + 1) = v36;
          operator delete(v36);
          *(void *)__n128 v32 = 0;
          *((void *)v32 + 1) = 0;
          *((void *)v32 + 2) = 0;
        }
        __n128 result = *(__n128 *)(a3 + 80);
        *(__n128 *)__n128 v32 = result;
        *((void *)v32 + 2) = *(void *)(a3 + 96);
        *(void *)(a3 + 80) = 0;
        *(void *)(a3 + 88) = 0;
        *(void *)(a3 + 96) = 0;
        v32[24] = *(unsigned char *)(a3 + 104);
        v32 += 112;
        a3 += 112;
      }
      while (a3 != a4);
    }
  }
  else
  {
    long long v10 = a1;
    long long v11 = a5 + 104;
    while (a3 != a4)
    {
      uint64_t v13 = *(void *)(a6 + 24);
      if (!v13) {
        sub_29F82C();
      }
      uint64_t v14 = (__n128 *)(v11 - 104);
      int v15 = (void **)(v11 - 24);
      if ((*(unsigned int (**)(uint64_t, uint64_t, __n128 *))(*(void *)v13 + 48))(v13, a3, v10))
      {
        *uint64_t v14 = *(__n128 *)a3;
        long long v16 = *(_OWORD *)(a3 + 16);
        long long v17 = *(_OWORD *)(a3 + 32);
        long long v18 = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(v11 - 56) = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(v11 - 40) = v18;
        *(_OWORD *)(v11 - 88) = v16;
        *(_OWORD *)(v11 - 72) = v17;
        __n128 v19 = *v15;
        if (*v15)
        {
          *((void *)v11 - 2) = v19;
          operator delete(v19);
          __n128 *v15 = 0;
          *((void *)v11 - 2) = 0;
          *((void *)v11 - 1) = 0;
        }
        __n128 result = *(__n128 *)(a3 + 80);
        *(__n128 *)(v11 - 24) = result;
        *((void *)v11 - 1) = *(void *)(a3 + 96);
        *(void *)(a3 + 80) = 0;
        *(void *)(a3 + 88) = 0;
        *(void *)(a3 + 96) = 0;
        *long long v11 = *(unsigned char *)(a3 + 104);
        v11 += 112;
        a3 += 112;
        if (v10 == a2) {
          goto LABEL_18;
        }
      }
      else
      {
        *uint64_t v14 = *v10;
        __n128 v20 = v10[1];
        __n128 v21 = v10[2];
        __n128 v22 = v10[4];
        *(__n128 *)(v11 - 56) = v10[3];
        *(__n128 *)(v11 - 40) = v22;
        *(__n128 *)(v11 - 88) = v20;
        *(__n128 *)(v11 - 72) = v21;
        long long v23 = *v15;
        if (*v15)
        {
          *((void *)v11 - 2) = v23;
          operator delete(v23);
          __n128 *v15 = 0;
          *((void *)v11 - 2) = 0;
          *((void *)v11 - 1) = 0;
        }
        __n128 result = v10[5];
        *(__n128 *)(v11 - 24) = result;
        *((void *)v11 - 1) = v10[6].n128_u64[0];
        v10[5].n128_u64[0] = 0;
        v10[5].n128_u64[1] = 0;
        v10[6].n128_u64[0] = 0;
        *long long v11 = v10[6].n128_u8[8];
        v11 += 112;
        v10 += 7;
        if (v10 == a2)
        {
LABEL_18:
          a5 = v11 - 104;
          goto LABEL_19;
        }
      }
    }
    if (v10 != a2)
    {
      uint64_t v24 = 0;
      do
      {
        long long v25 = &v10[v24];
        unint64_t v26 = &v11[v24 * 16];
        long long v28 = (void **)&v11[v24 * 16 - 24];
        uint64_t v27 = *v28;
        *((__n128 *)v28 - 5) = v10[v24];
        __n128 v29 = v10[v24 + 1];
        __n128 v30 = v10[v24 + 2];
        __n128 v31 = v10[v24 + 4];
        *((__n128 *)v28 - 2) = v10[v24 + 3];
        *((__n128 *)v28 - 1) = v31;
        *((__n128 *)v28 - 4) = v29;
        *((__n128 *)v28 - 3) = v30;
        if (v27)
        {
          *((void *)v26 - 2) = v27;
          operator delete(v27);
          *long long v28 = 0;
          *(void *)&v11[v24 * 16 - 16] = 0;
          *(void *)&v11[v24 * 16 - 8] = 0;
        }
        __n128 result = v25[5];
        *(__n128 *)long long v28 = result;
        *((void *)v26 - 1) = v25[6].n128_u64[0];
        v25[5].n128_u64[0] = 0;
        v25[5].n128_u64[1] = 0;
        v25[6].n128_u64[0] = 0;
        *unint64_t v26 = v25[6].n128_u8[8];
        v24 += 7;
      }
      while (&v25[7] != a2);
    }
  }
  return result;
}

uint64_t *sub_B92068(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)a1[1];
    unint64_t v4 = *v3;
    if (*v3)
    {
      unint64_t v5 = 0;
      uint64_t v6 = (void *)(v2 + 88);
      do
      {
        uint64_t v7 = (void *)*(v6 - 1);
        if (v7)
        {
          void *v6 = v7;
          operator delete(v7);
          unint64_t v4 = *v3;
        }
        ++v5;
        v6 += 14;
      }
      while (v5 < v4);
    }
  }
  return a1;
}

__n128 sub_B920E0(__n128 *a1, long long *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, __n128 *a7, uint64_t a8)
{
  uint64_t v41 = a6;
  if (a6)
  {
    while (1)
    {
      if (v41 <= a8 || a5 <= a8)
      {
        sub_B92B6C(a1, (__n128 *)a2, a3, (uint64_t)a4, a5, v41, a7);
        return result;
      }
      if (!a5) {
        return result;
      }
      unint64_t v12 = 0;
      uint64_t v13 = -a5;
      while (1)
      {
        uint64_t v14 = a4[3];
        if (!v14) {
          sub_29F82C();
        }
        if ((*(uint64_t (**)(uint64_t, long long *, __n128 *))(*(void *)v14 + 48))(v14, a2, &a1[v12 / 0x10]))break; {
        v12 += 112;
        }
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      if (-v13 >= v41)
      {
        if (v13 == -1)
        {
          __n128 v30 = &a1[v12 / 0x10];
          __n128 v42 = a1[v12 / 0x10];
          __n128 v45 = a1[v12 / 0x10 + 3];
          __n128 v46 = a1[v12 / 0x10 + 4];
          __n128 v43 = a1[v12 / 0x10 + 1];
          __n128 v44 = a1[v12 / 0x10 + 2];
          unint64_t v31 = a1[v12 / 0x10 + 6].n128_u64[0];
          __n128 result = a1[v12 / 0x10 + 5];
          v30[5].n128_u64[0] = 0;
          v30[5].n128_u64[1] = 0;
          v30[6].n128_u64[0] = 0;
          unsigned __int8 v32 = a1[v12 / 0x10 + 6].n128_u8[8];
          long long v34 = a2[1];
          long long v33 = a2[2];
          long long v35 = a2[4];
          v30[3] = (__n128)a2[3];
          v30[4] = (__n128)v35;
          v30[1] = (__n128)v34;
          void v30[2] = (__n128)v33;
          *__n128 v30 = (__n128)*a2;
          v30[5] = (__n128)a2[5];
          v30[6].n128_u64[0] = *((void *)a2 + 12);
          v30[6].n128_u8[8] = *((unsigned char *)a2 + 104);
          a2[2] = (__int128)v44;
          a2[3] = (__int128)v45;
          *a2 = (__int128)v42;
          a2[1] = (__int128)v43;
          a2[4] = (__int128)v46;
          a2[5] = (__int128)result;
          *((void *)a2 + 12) = v31;
          *((unsigned char *)a2 + 104) = v32;
          return result;
        }
        if (v13 <= 0) {
          uint64_t v22 = -v13;
        }
        else {
          uint64_t v22 = 1 - v13;
        }
        long long v23 = (void *)a4[3];
        if (v23)
        {
          if (v23 == a4)
          {
            BOOL v48 = v47;
            (*(void (**)(void *, void *))(*a4 + 24))(a4, v47);
          }
          else
          {
            BOOL v48 = (void *)(*(uint64_t (**)(void *))(*v23 + 16))(v23);
          }
        }
        else
        {
          BOOL v48 = 0;
        }
        uint64_t v36 = v22 >> 1;
        __n128 v19 = (long long *)&a1[7 * (v22 >> 1) + v12 / 0x10];
        long long v18 = a2;
        if (a2 != (long long *)a3)
        {
          unint64_t v24 = 0x6DB6DB6DB6DB6DB7 * ((a3 - (uint64_t)a2) >> 4);
          long long v18 = a2;
          do
          {
            if (!v48) {
              sub_29F82C();
            }
            long long v25 = &v18[7 * (v24 >> 1)];
            int v26 = (*(uint64_t (**)(void *, long long *, long long *))(*v48 + 48))(v48, v25, v19);
            if (v26) {
              v24 += ~(v24 >> 1);
            }
            else {
              v24 >>= 1;
            }
            if (v26) {
              long long v18 = v25 + 7;
            }
          }
          while (v24);
        }
        if (v48 == v47)
        {
          (*(void (**)(void *))(v47[0] + 32))(v47);
        }
        else if (v48)
        {
          (*(void (**)(void))(*v48 + 40))();
        }
        uint64_t v37 = 0x6DB6DB6DB6DB6DB7 * (v18 - a2);
      }
      else
      {
        if (v41 >= 0) {
          uint64_t v17 = v41;
        }
        else {
          uint64_t v17 = v41 + 1;
        }
        uint64_t v37 = v17 >> 1;
        long long v18 = &a2[7 * (v17 >> 1)];
        __n128 v19 = a2;
        if ((char *)a2 - (char *)a1 != v12)
        {
          unint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((char *)a2 - (char *)a1 - v12) >> 4);
          __n128 v19 = (long long *)&a1[v12 / 0x10];
          do
          {
            uint64_t v21 = a4[3];
            if (!v21) {
              sub_29F82C();
            }
            if ((*(unsigned int (**)(uint64_t, long long *, long long *))(*(void *)v21 + 48))(v21, v18, &v19[7 * (v20 >> 1)]))
            {
              v20 >>= 1;
            }
            else
            {
              v19 += 7 * (v20 >> 1) + 7;
              v20 += ~(v20 >> 1);
            }
          }
          while (v20);
        }
        uint64_t v36 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((char *)v19 - (char *)a1 - v12) >> 4);
      }
      uint64_t v27 = sub_B92D58(v19, a2, v18);
      long long v28 = v27;
      a5 = -v36 - v13;
      uint64_t v29 = v41 - v37;
      if (v36 + v37 >= v41 - (v36 + v37) - v13)
      {
        sub_B920E0(v27, v18, a3, a4, -v36 - v13, v41 - v37, a7, a8);
        a2 = v19;
        a5 = v36;
        a3 = (uint64_t)v28;
        a1 = (__n128 *)((char *)a1 + v12);
        uint64_t v41 = v37;
        if (!v37) {
          return result;
        }
      }
      else
      {
        sub_B920E0(&a1[v12 / 0x10], v19, v27, a4, v36, v37, a7, a8);
        a1 = (__n128 *)v28;
        a2 = v18;
        v41 -= v37;
        if (!v29) {
          return result;
        }
      }
    }
  }
  return result;
}

void sub_B925DC(_Unwind_Exception *a1)
{
  sub_B8C088((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_B925F0(_Unwind_Exception *a1)
{
  sub_B8C088((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

__n128 sub_B92608(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  if ((__n128 *)a1 != a2)
  {
    uint64_t v6 = (__n128 *)a1;
    long long v7 = *(_OWORD *)(a1 + 16);
    long long v8 = *(_OWORD *)(a1 + 32);
    long long v9 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a3 + 64) = v9;
    *(_OWORD *)(a3 + 16) = v7;
    *(_OWORD *)(a3 + 32) = v8;
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    *(void *)(a3 + 80) = 0;
    __n128 result = *(__n128 *)(a1 + 80);
    *(__n128 *)(a3 + 80) = result;
    *(void *)(a3 + 96) = *(void *)(a1 + 96);
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    *(unsigned char *)(a3 + 104) = *(unsigned char *)(a1 + 104);
    uint64_t v37 = 1;
    long long v11 = (__n128 *)(a1 + 112);
    if ((__n128 *)(a1 + 112) != a2)
    {
      uint64_t v13 = 0;
      uint64_t v14 = (__n128 *)a3;
      do
      {
        while (1)
        {
          uint64_t v18 = *(void *)(a4 + 24);
          if (!v18) {
LABEL_20:
          }
            sub_29F82C();
          __n128 v19 = v11;
          unint64_t v20 = v14 + 7;
          if ((*(unsigned int (**)(uint64_t, __n128 *, __n128 *))(*(void *)v18 + 48))(v18, v11, v14)) {
            break;
          }
          *unint64_t v20 = *v19;
          __n128 v15 = v19[1];
          __n128 v16 = v19[2];
          __n128 v17 = v19[4];
          v14[10] = v19[3];
          v14[11] = v17;
          v14[8] = v15;
          v14[9] = v16;
          v14[12].n128_u64[1] = 0;
          v14[13].n128_u64[0] = 0;
          v14[12].n128_u64[0] = 0;
          __n128 result = v6[12];
          v14[12] = result;
          v14[13].n128_u64[0] = v6[13].n128_u64[0];
          v6[12].n128_u64[0] = 0;
          v6[12].n128_u64[1] = 0;
          v6[13].n128_u64[0] = 0;
          v14[13].n128_u8[8] = v6[13].n128_u8[8];
          ++v37;
          long long v11 = v19 + 7;
          v13 += 112;
          v14 += 7;
          uint64_t v6 = v19;
          if (&v19[7] == a2) {
            return result;
          }
        }
        __n128 v21 = v14[3];
        v14[9] = v14[2];
        v14[10] = v21;
        __n128 v22 = v14[5];
        v14[11] = v14[4];
        __n128 v23 = v14[1];
        *unint64_t v20 = *v14;
        v14[8] = v23;
        v14[12] = v22;
        v14[13].n128_u64[0] = v14[6].n128_u64[0];
        v14[5].n128_u64[0] = 0;
        v14[5].n128_u64[1] = 0;
        v14[13].n128_u8[8] = v14[6].n128_u8[8];
        ++v37;
        unint64_t v24 = (__n128 *)a3;
        v14[6].n128_u64[0] = 0;
        if (v14 != (__n128 *)a3)
        {
          uint64_t v25 = v13;
          do
          {
            uint64_t v26 = *(void *)(a4 + 24);
            if (!v26) {
              goto LABEL_20;
            }
            uint64_t v27 = (_OWORD *)(a3 + v25);
            if (!(*(unsigned int (**)(uint64_t, __n128 *, uint64_t))(*(void *)v26 + 48))(v26, v19, a3 + v25 - 112))
            {
              unint64_t v24 = (__n128 *)(a3 + v25);
              goto LABEL_16;
            }
            long long v28 = *(_OWORD *)(a3 + v25 - 64);
            v27[2] = *(_OWORD *)(a3 + v25 - 80);
            v27[3] = v28;
            v27[4] = *(_OWORD *)(a3 + v25 - 48);
            long long v29 = *(_OWORD *)(a3 + v25 - 96);
            *uint64_t v27 = *(_OWORD *)(a3 + v25 - 112);
            v27[1] = v29;
            uint64_t v30 = a3 + v25;
            unsigned __int8 v32 = (void **)(a3 + v25 + 80);
            unint64_t v31 = *v32;
            if (*v32)
            {
              *(void *)(v30 + 88) = v31;
              operator delete(v31);
              *unsigned __int8 v32 = 0;
              *(void *)(a3 + v25 + 88) = 0;
              *(void *)(a3 + v25 + 96) = 0;
            }
            *(_OWORD *)unsigned __int8 v32 = *(_OWORD *)(v30 - 32);
            *(void *)(v30 + 96) = *(void *)(v30 - 16);
            *(void *)(v30 - 24) = 0;
            *(void *)(v30 - 16) = 0;
            *(void *)(v30 - 32) = 0;
            *(unsigned char *)(v30 + 104) = *(unsigned char *)(v30 - 8);
            v25 -= 112;
          }
          while (v25);
          unint64_t v24 = (__n128 *)a3;
        }
LABEL_16:
        *unint64_t v24 = *v19;
        __n128 v33 = v19[1];
        __n128 v34 = v19[2];
        __n128 v35 = v19[4];
        void v24[3] = v19[3];
        v24[4] = v35;
        v24[1] = v33;
        v24[2] = v34;
        uint64_t v36 = (void *)v24[5].n128_u64[0];
        if (v36)
        {
          v24[5].n128_u64[1] = (unint64_t)v36;
          operator delete(v36);
          v24[5].n128_u64[0] = 0;
          v24[5].n128_u64[1] = 0;
          v24[6].n128_u64[0] = 0;
        }
        __n128 result = v6[12];
        v24[5] = result;
        v24[6].n128_u64[0] = v6[13].n128_u64[0];
        v6[12].n128_u64[0] = 0;
        v6[12].n128_u64[1] = 0;
        v6[13].n128_u64[0] = 0;
        v24[6].n128_u8[8] = v6[13].n128_u8[8];
        long long v11 = v19 + 7;
        v13 += 112;
        uint64_t v14 = v20;
        uint64_t v6 = v19;
      }
      while (&v19[7] != a2);
    }
  }
  return result;
}

void sub_B928EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B92068((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B92900(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B92068((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B92914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B92068((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 sub_B92928(void *a1, void *a2, void *a3, void *a4, unsigned char *a5, uint64_t a6)
{
  uint64_t v33 = 0;
  if (a1 == a2)
  {
LABEL_15:
    while (a3 != a4)
    {
      *(_OWORD *)a5 = *(_OWORD *)a3;
      long long v30 = *((_OWORD *)a3 + 1);
      long long v31 = *((_OWORD *)a3 + 2);
      long long v32 = *((_OWORD *)a3 + 4);
      *((_OWORD *)a5 + 3) = *((_OWORD *)a3 + 3);
      *((_OWORD *)a5 + 4) = v32;
      *((_OWORD *)a5 + 1) = v30;
      *((_OWORD *)a5 + 2) = v31;
      *((void *)a5 + 11) = 0;
      *((void *)a5 + 12) = 0;
      *((void *)a5 + 10) = 0;
      __n128 result = *((__n128 *)a3 + 5);
      *((__n128 *)a5 + 5) = result;
      *((void *)a5 + 12) = a3[12];
      a3[10] = 0;
      a3[11] = 0;
      a3[12] = 0;
      a5[104] = *((unsigned char *)a3 + 104);
      a3 += 14;
      a5 += 112;
    }
  }
  else
  {
    long long v10 = a1;
    long long v11 = a5 + 104;
    while (a3 != a4)
    {
      uint64_t v17 = *(void *)(a6 + 24);
      if (!v17) {
        sub_29F82C();
      }
      int v18 = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v17 + 48))(v17, a3, v10);
      __n128 v19 = v11 - 104;
      unint64_t v20 = v11 - 24;
      if (v18)
      {
        _OWORD *v19 = *(_OWORD *)a3;
        long long v21 = *((_OWORD *)a3 + 1);
        long long v22 = *((_OWORD *)a3 + 2);
        long long v23 = *((_OWORD *)a3 + 4);
        *(_OWORD *)(v11 - 56) = *((_OWORD *)a3 + 3);
        *(_OWORD *)(v11 - 40) = v23;
        *(_OWORD *)(v11 - 88) = v21;
        *(_OWORD *)(v11 - 72) = v22;
        *((void *)v11 - 2) = 0;
        *((void *)v11 - 1) = 0;
        *unint64_t v20 = 0;
        __n128 result = *((__n128 *)a3 + 5);
        *(__n128 *)(v11 - 24) = result;
        *((void *)v11 - 1) = a3[12];
        a3[10] = 0;
        a3[11] = 0;
        a3[12] = 0;
        __n128 v16 = a3;
        a3 += 14;
      }
      else
      {
        _OWORD *v19 = *(_OWORD *)v10;
        long long v12 = *((_OWORD *)v10 + 1);
        long long v13 = *((_OWORD *)v10 + 2);
        long long v14 = *((_OWORD *)v10 + 4);
        *(_OWORD *)(v11 - 56) = *((_OWORD *)v10 + 3);
        *(_OWORD *)(v11 - 40) = v14;
        *(_OWORD *)(v11 - 88) = v12;
        *(_OWORD *)(v11 - 72) = v13;
        *((void *)v11 - 2) = 0;
        *((void *)v11 - 1) = 0;
        *unint64_t v20 = 0;
        __n128 result = *((__n128 *)v10 + 5);
        *(__n128 *)(v11 - 24) = result;
        *((void *)v11 - 1) = v10[12];
        v10[10] = 0;
        v10[11] = 0;
        v10[12] = 0;
        __n128 v16 = v10;
        v10 += 14;
      }
      *long long v11 = v16[104];
      v11 += 112;
      ++v33;
      if (v10 == a2)
      {
        a5 = v11 - 104;
        goto LABEL_15;
      }
    }
    if (v10 != a2)
    {
      uint64_t v24 = 0;
      do
      {
        uint64_t v25 = &v11[v24 * 8];
        uint64_t v26 = &v10[v24];
        *(_OWORD *)(v25 - 104) = *(_OWORD *)&v10[v24];
        long long v27 = *(_OWORD *)&v10[v24 + 2];
        long long v28 = *(_OWORD *)&v10[v24 + 4];
        long long v29 = *(_OWORD *)&v10[v24 + 6];
        *(_OWORD *)(v25 - 40) = *(_OWORD *)&v10[v24 + 8];
        *(_OWORD *)(v25 - 56) = v29;
        *(_OWORD *)(v25 - 72) = v28;
        *(_OWORD *)(v25 - 88) = v27;
        *((void *)v25 - 2) = 0;
        *((void *)v25 - 1) = 0;
        *((void *)v25 - 3) = 0;
        __n128 result = *(__n128 *)&v10[v24 + 10];
        *(__n128 *)(v25 - 24) = result;
        *((void *)v25 - 1) = v10[v24 + 12];
        v26[10] = 0;
        v26[11] = 0;
        v26[12] = 0;
        *uint64_t v25 = v10[v24 + 13];
        v24 += 14;
      }
      while (v26 + 14 != a2);
    }
  }
  return result;
}

void sub_B92B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B92068((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B92B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B92068((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B92B6C(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 *a7)
{
  uint64_t v30 = 0;
  long long v28 = a7;
  long long v29 = &v30;
  if (a5 > a6)
  {
    uint64_t v10 = (uint64_t)a7;
    if (a2 != (__n128 *)a3)
    {
      uint64_t v11 = 0;
      uint64_t v10 = (uint64_t)a7;
      long long v12 = a2;
      do
      {
        *(__n128 *)uint64_t v10 = *v12;
        __n128 v13 = v12[1];
        __n128 v14 = v12[2];
        __n128 v15 = v12[4];
        *(__n128 *)(v10 + 48) = v12[3];
        *(__n128 *)(v10 + 64) = v15;
        *(__n128 *)(v10 + 16) = v13;
        *(__n128 *)(v10 + 32) = v14;
        *(void *)(v10 + 88) = 0;
        *(void *)(v10 + 96) = 0;
        *(void *)(v10 + 80) = 0;
        *(__n128 *)(v10 + 80) = v12[5];
        *(void *)(v10 + 96) = v12[6].n128_u64[0];
        v12[5].n128_u64[0] = 0;
        v12[5].n128_u64[1] = 0;
        v12[6].n128_u64[0] = 0;
        *(unsigned char *)(v10 + 104) = v12[6].n128_u8[8];
        ++v11;
        v10 += 112;
        v12 += 7;
      }
      while (v12 != (__n128 *)a3);
      uint64_t v30 = v11;
    }
    uint64_t v27 = a4;
    sub_B93164(v10, (_OWORD *)v10, (uint64_t)a7, a7, (uint64_t)a2, a2, (uint64_t)a1, a1, a3, a3, (uint64_t)&v27);
    if (!a7) {
      return;
    }
LABEL_13:
    long long v22 = (unint64_t *)v29;
    unint64_t v23 = *v29;
    if (*v29)
    {
      unint64_t v24 = 0;
      uint64_t v25 = &a7[5].n128_u64[1];
      do
      {
        uint64_t v26 = (void *)*(v25 - 1);
        if (v26)
        {
          *uint64_t v25 = (unint64_t)v26;
          operator delete(v26);
          unint64_t v23 = *v22;
        }
        ++v24;
        v25 += 14;
      }
      while (v24 < v23);
    }
    return;
  }
  __n128 v16 = a7;
  if (a1 != a2)
  {
    uint64_t v17 = 0;
    __n128 v16 = a7;
    int v18 = a1;
    do
    {
      *__n128 v16 = *v18;
      __n128 v19 = v18[1];
      __n128 v20 = v18[2];
      __n128 v21 = v18[4];
      v16[3] = v18[3];
      v16[4] = v21;
      v16[1] = v19;
      uint64_t v16[2] = v20;
      v16[5].n128_u64[1] = 0;
      v16[6].n128_u64[0] = 0;
      v16[5].n128_u64[0] = 0;
      v16[5] = v18[5];
      v16[6].n128_u64[0] = v18[6].n128_u64[0];
      v18[5].n128_u64[0] = 0;
      v18[5].n128_u64[1] = 0;
      v18[6].n128_u64[0] = 0;
      v16[6].n128_u8[8] = v18[6].n128_u8[8];
      ++v17;
      v16 += 7;
      v18 += 7;
    }
    while (v18 != a2);
    uint64_t v30 = v17;
  }
  sub_B92F88(a7, v16, (uint64_t)a2, a3, (uint64_t)a1, a4);
  a7 = v28;
  if (v28) {
    goto LABEL_13;
  }
}

void sub_B92D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_B92068((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B92D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_B92068((uint64_t *)va);
  _Unwind_Resume(a1);
}

long long *sub_B92D58(long long *a1, long long *a2, long long *a3)
{
  __n128 result = a3;
  if (a1 != a2)
  {
    if (a2 == a3)
    {
      return a1;
    }
    else
    {
      __n128 result = a1 + 7;
      unint64_t v5 = a1 + 7;
      uint64_t v6 = a2;
      while (1)
      {
        long long v33 = *(v5 - 5);
        long long v36 = *(v5 - 4);
        long long v7 = *(v5 - 2);
        long long v39 = *(v5 - 3);
        long long v27 = *(v5 - 7);
        long long v30 = *(v5 - 6);
        uint64_t v8 = *((void *)v5 - 2);
        *((void *)v5 - 3) = 0;
        *((void *)v5 - 2) = 0;
        *((void *)v5 - 4) = 0;
        char v9 = *((unsigned char *)v5 - 8);
        *(v5 - 7) = *v6;
        long long v10 = v6[2];
        long long v12 = v6[3];
        long long v11 = v6[4];
        *(v5 - 6) = v6[1];
        *(v5 - 5) = v10;
        *(v5 - 4) = v12;
        *(v5 - 3) = v11;
        *(v5 - 2) = v6[5];
        *((void *)v5 - 2) = *((void *)v6 + 12);
        *((unsigned char *)v5 - 8) = *((unsigned char *)v6 + 104);
        v6[2] = v33;
        void v6[3] = v36;
        long long *v6 = v27;
        v6[1] = v30;
        v6[4] = v39;
        v6[5] = v7;
        *((void *)v6 + 12) = v8;
        *((unsigned char *)v6 + 104) = v9;
        v6 += 7;
        if (v6 == a3) {
          break;
        }
        if (v5 == a2) {
          a2 = v6;
        }
        v5 += 7;
        result += 7;
      }
      if (v5 != a2)
      {
        __n128 v13 = a2;
        while (1)
        {
          long long v28 = *v5;
          long long v37 = v5[3];
          long long v40 = v5[4];
          long long v31 = v5[1];
          long long v34 = v5[2];
          uint64_t v14 = *((void *)v5 + 12);
          long long v15 = v5[5];
          *((void *)v5 + 11) = 0;
          *((void *)v5 + 12) = 0;
          *((void *)v5 + 10) = 0;
          char v16 = *((unsigned char *)v5 + 104);
          *unint64_t v5 = *v13;
          long long v17 = v13[4];
          long long v19 = v13[1];
          long long v18 = v13[2];
          v5[3] = v13[3];
          v5[4] = v17;
          v5[1] = v19;
          v5[2] = v18;
          v5[5] = v13[5];
          *((void *)v5 + 12) = *((void *)v13 + 12);
          *((unsigned char *)v5 + 104) = *((unsigned char *)v13 + 104);
          v13[3] = v37;
          v13[4] = v40;
          v13[1] = v31;
          v13[2] = v34;
          long long *v13 = v28;
          v13[5] = v15;
          *((void *)v13 + 12) = v14;
          *((unsigned char *)v13 + 104) = v16;
          v5 += 7;
          v13 += 7;
          BOOL v20 = v5 == a2;
          if (v13 == a3)
          {
            if (v5 == a2) {
              return result;
            }
            __n128 v13 = a2 + 7;
            while (1)
            {
              long long v29 = *v5;
              long long v38 = v5[3];
              long long v41 = v5[4];
              long long v32 = v5[1];
              long long v35 = v5[2];
              uint64_t v21 = *((void *)v5 + 12);
              long long v22 = v5[5];
              *((void *)v5 + 10) = 0;
              *((void *)v5 + 11) = 0;
              *((void *)v5 + 12) = 0;
              char v23 = *((unsigned char *)v5 + 104);
              long long v25 = a2[1];
              long long v24 = a2[2];
              long long v26 = a2[4];
              v5[3] = a2[3];
              v5[4] = v26;
              v5[1] = v25;
              v5[2] = v24;
              *unint64_t v5 = *a2;
              v5[5] = a2[5];
              *((void *)v5 + 12) = *((void *)a2 + 12);
              *((unsigned char *)v5 + 104) = *((unsigned char *)a2 + 104);
              *a2 = v29;
              a2[3] = v38;
              a2[4] = v41;
              a2[1] = v32;
              a2[2] = v35;
              a2[5] = v22;
              *((void *)a2 + 12) = v21;
              *((unsigned char *)a2 + 104) = v23;
              v5 += 7;
              BOOL v20 = v5 == a2;
              if (v13 != a3) {
                break;
              }
              if (v5 == a2) {
                return result;
              }
            }
          }
          if (v20) {
            a2 = v13;
          }
        }
      }
    }
  }
  return result;
}

__n128 sub_B92F88(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 != a2)
  {
    long long v10 = a1;
    uint64_t v11 = a5 + 80;
    while (a3 != a4)
    {
      uint64_t v13 = *(void *)(a6 + 24);
      if (!v13) {
        sub_29F82C();
      }
      uint64_t v14 = (__n128 *)(v11 - 80);
      if ((*(unsigned int (**)(uint64_t, uint64_t, __n128 *))(*(void *)v13 + 48))(v13, a3, v10))
      {
        *uint64_t v14 = *(__n128 *)a3;
        long long v15 = *(_OWORD *)(a3 + 16);
        long long v16 = *(_OWORD *)(a3 + 32);
        long long v17 = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(v11 - 32) = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(v11 - 16) = v17;
        *(_OWORD *)(v11 - 64) = v15;
        *(_OWORD *)(v11 - 48) = v16;
        long long v18 = *(void **)v11;
        if (*(void *)v11)
        {
          *(void *)(v11 + 8) = v18;
          operator delete(v18);
          *(void *)uint64_t v11 = 0;
          *(void *)(v11 + 8) = 0;
          *(void *)(v11 + 16) = 0;
        }
        __n128 result = *(__n128 *)(a3 + 80);
        *(__n128 *)uint64_t v11 = result;
        *(void *)(v11 + 16) = *(void *)(a3 + 96);
        *(void *)(a3 + 80) = 0;
        *(void *)(a3 + 88) = 0;
        *(void *)(a3 + 96) = 0;
        *(unsigned char *)(v11 + 24) = *(unsigned char *)(a3 + 104);
        a3 += 112;
        v11 += 112;
        if (v10 == a2) {
          return result;
        }
      }
      else
      {
        *uint64_t v14 = *v10;
        __n128 v19 = v10[1];
        __n128 v20 = v10[2];
        __n128 v21 = v10[4];
        *(__n128 *)(v11 - 32) = v10[3];
        *(__n128 *)(v11 - 16) = v21;
        *(__n128 *)(v11 - 64) = v19;
        *(__n128 *)(v11 - 48) = v20;
        long long v22 = *(void **)v11;
        if (*(void *)v11)
        {
          *(void *)(v11 + 8) = v22;
          operator delete(v22);
          *(void *)uint64_t v11 = 0;
          *(void *)(v11 + 8) = 0;
          *(void *)(v11 + 16) = 0;
        }
        __n128 result = v10[5];
        *(__n128 *)uint64_t v11 = result;
        *(void *)(v11 + 16) = v10[6].n128_u64[0];
        v10[5].n128_u64[0] = 0;
        v10[5].n128_u64[1] = 0;
        v10[6].n128_u64[0] = 0;
        *(unsigned char *)(v11 + 24) = v10[6].n128_u8[8];
        v10 += 7;
        v11 += 112;
        if (v10 == a2) {
          return result;
        }
      }
    }
    uint64_t v23 = 0;
    do
    {
      long long v24 = &v10[v23];
      uint64_t v25 = v11 + v23 * 16;
      *(__n128 *)(v25 - 80) = v10[v23];
      __n128 v26 = v10[v23 + 1];
      __n128 v27 = v10[v23 + 2];
      __n128 v28 = v10[v23 + 4];
      *(__n128 *)(v25 - 32) = v10[v23 + 3];
      *(__n128 *)(v25 - 16) = v28;
      *(__n128 *)(v25 - 64) = v26;
      *(__n128 *)(v25 - 48) = v27;
      long long v29 = *(void **)(v11 + v23 * 16);
      if (v29)
      {
        *(void *)(v25 + 8) = v29;
        operator delete(v29);
        *(void *)uint64_t v25 = 0;
        *(void *)(v25 + 8) = 0;
        *(void *)(v25 + 16) = 0;
      }
      __n128 result = v24[5];
      *(__n128 *)uint64_t v25 = result;
      *(void *)(v25 + 16) = v24[6].n128_u64[0];
      v24[5].n128_u64[0] = 0;
      v24[5].n128_u64[1] = 0;
      v24[6].n128_u64[0] = 0;
      *(unsigned char *)(v25 + 24) = v24[6].n128_u8[8];
      v23 += 7;
    }
    while (&v24[7] != a2);
  }
  return result;
}

__n128 sub_B93164(uint64_t a1, _OWORD *a2, uint64_t a3, _OWORD *a4, uint64_t a5, __n128 *a6, uint64_t a7, __n128 *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2 == a4) {
    return result;
  }
  uint64_t v14 = a2;
  uint64_t v15 = a10 - 32;
  while (a6 != a8)
  {
    uint64_t v23 = *(void *)(*(void *)a11 + 24);
    if (!v23) {
      sub_29F82C();
    }
    __n128 v21 = a6 - 7;
    long long v24 = v14 - 7;
    int v25 = (*(uint64_t (**)(uint64_t, _OWORD *, __n128 *))(*(void *)v23 + 48))(v23, v14 - 7, a6 - 7);
    __n128 v26 = (__n128 *)(v15 - 80);
    if (v25)
    {
      *__n128 v26 = *v21;
      __n128 v27 = a6[-6];
      __n128 v28 = a6[-5];
      __n128 v29 = a6[-3];
      *(__n128 *)(v15 - 32) = a6[-4];
      *(__n128 *)(v15 - 16) = v29;
      *(__n128 *)(v15 - 64) = v27;
      *(__n128 *)(v15 - 48) = v28;
      __n128 v19 = *(void **)v15;
      __n128 v20 = a6;
      long long v24 = v14;
      if (!*(void *)v15) {
        goto LABEL_5;
      }
LABEL_4:
      *(void *)(v15 + 8) = v19;
      operator delete(v19);
      *(void *)uint64_t v15 = 0;
      *(void *)(v15 + 8) = 0;
      uint64_t v14 = v24;
      *(void *)(v15 + 16) = 0;
      goto LABEL_5;
    }
    *__n128 v26 = *(__n128 *)v24;
    long long v16 = *(v14 - 6);
    long long v17 = *(v14 - 5);
    long long v18 = *(v14 - 3);
    *(_OWORD *)(v15 - 32) = *(v14 - 4);
    *(_OWORD *)(v15 - 16) = v18;
    *(_OWORD *)(v15 - 64) = v16;
    *(_OWORD *)(v15 - 48) = v17;
    __n128 v19 = *(void **)v15;
    __n128 v20 = (__n128 *)v14;
    __n128 v21 = a6;
    v14 -= 7;
    if (*(void *)v15) {
      goto LABEL_4;
    }
LABEL_5:
    __n128 result = v20[-2];
    *(__n128 *)uint64_t v15 = result;
    *(void *)(v15 + 16) = v20[-1].n128_u64[0];
    v20[-2].n128_u64[0] = 0;
    v20[-2].n128_u64[1] = 0;
    v20[-1].n128_u64[0] = 0;
    *(unsigned char *)(v15 + 24) = v20[-1].n128_u8[8];
    v15 -= 112;
    a6 = v21;
    if (v14 == a4) {
      return result;
    }
  }
  uint64_t v30 = 0;
  do
  {
    long long v31 = (__n128 *)&v14[v30];
    uint64_t v32 = v15 + v30 * 16;
    *(_OWORD *)(v32 - 80) = v14[v30 - 7];
    long long v33 = v14[v30 - 6];
    long long v34 = v14[v30 - 5];
    long long v35 = v14[v30 - 3];
    *(_OWORD *)(v32 - 32) = v14[v30 - 4];
    *(_OWORD *)(v32 - 16) = v35;
    *(_OWORD *)(v32 - 64) = v33;
    *(_OWORD *)(v32 - 48) = v34;
    long long v36 = *(void **)(v15 + v30 * 16);
    if (v36)
    {
      *(void *)(v32 + 8) = v36;
      operator delete(v36);
      *(void *)uint64_t v32 = 0;
      *(void *)(v32 + 8) = 0;
      *(void *)(v32 + 16) = 0;
    }
    __n128 result = v31[-2];
    *(__n128 *)uint64_t v32 = result;
    *(void *)(v32 + 16) = v31[-1].n128_u64[0];
    v31[-2].n128_u64[0] = 0;
    v31[-2].n128_u64[1] = 0;
    v31[-1].n128_u64[0] = 0;
    *(unsigned char *)(v32 + 24) = v31[-1].n128_u8[8];
    v30 -= 7;
  }
  while (&v14[v30] != a4);
  return result;
}

void sub_B93328(uint64_t a1, __n128 *a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      uint64_t v9 = a3[3];
      if (!v9) {
        sub_29F82C();
      }
      long long v10 = a2 - 7;
      if ((*(unsigned int (**)(uint64_t, __n128 *, uint64_t))(*(void *)v9 + 48))(v9, a2 - 7, a1))
      {
        __n128 v33 = *(__n128 *)(a1 + 16);
        __n128 v34 = *(__n128 *)(a1 + 32);
        __n128 v35 = *(__n128 *)(a1 + 48);
        __n128 v11 = *(__n128 *)(a1 + 80);
        __n128 v36 = *(__n128 *)(a1 + 64);
        __n128 v32 = *(__n128 *)a1;
        unint64_t v12 = *(void *)(a1 + 96);
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        *(void *)(a1 + 80) = 0;
        unsigned __int8 v13 = *(unsigned char *)(a1 + 104);
        __n128 v15 = a2[-4];
        __n128 v14 = a2[-3];
        __n128 v16 = a2[-5];
        *(__n128 *)(a1 + 16) = a2[-6];
        *(__n128 *)(a1 + 32) = v16;
        *(__n128 *)(a1 + 48) = v15;
        *(__n128 *)(a1 + 64) = v14;
        *(__n128 *)a1 = *v10;
        *(__n128 *)(a1 + 80) = a2[-2];
        *(void *)(a1 + 96) = a2[-1].n128_u64[0];
        *(unsigned char *)(a1 + 104) = a2[-1].n128_u8[8];
        a2[-6] = v33;
        a2[-5] = v34;
        a2[-4] = v35;
        a2[-3] = v36;
        __n128 *v10 = v32;
        a2[-2] = v11;
        a2[-1].n128_u64[0] = v12;
        a2[-1].n128_u8[8] = v13;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      sub_B93634((_OWORD *)a1, a2, (uint64_t)a3);
    }
    else
    {
      uint64_t v19 = a5;
      uint64_t v20 = a4 >> 1;
      __n128 v21 = (long long *)(a1 + 112 * (a4 >> 1));
      if ((uint64_t)a4 <= a6)
      {
        unint64_t v31 = 0;
        v32.n128_u64[0] = a5;
        v32.n128_u64[1] = (unint64_t)&v31;
        sub_B938DC(a1, (__n128 *)(a1 + 112 * (a4 >> 1)), (uint64_t)a3, a4 >> 1, a5);
        unint64_t v31 = a4 >> 1;
        unint64_t v23 = a4 - v20;
        uint64_t v24 = v19 + 112 * v20;
        sub_B938DC(a1 + 112 * (a4 >> 1), a2, (uint64_t)a3, v23, v24);
        unint64_t v31 = a4;
        sub_B93BC8(v19, v24, v24, v19 + 112 * a4, a1, (uint64_t)a3);
        if (v19)
        {
          unint64_t v25 = v31;
          if (v31)
          {
            unint64_t v26 = 0;
            do
            {
              uint64_t v28 = *(void *)(v19 + 80);
              if (v28)
              {
                uint64_t v29 = *(void *)(v19 + 88);
                __n128 v27 = *(void **)(v19 + 80);
                if (v29 != v28)
                {
                  do
                  {
                    uint64_t v30 = *(void **)(v29 - 32);
                    if (v30)
                    {
                      *(void *)(v29 - 24) = v30;
                      operator delete(v30);
                    }
                    v29 -= 112;
                  }
                  while (v29 != v28);
                  __n128 v27 = *(void **)(v19 + 80);
                }
                *(void *)(v19 + 88) = v28;
                operator delete(v27);
                unint64_t v25 = v31;
              }
              ++v26;
              v19 += 112;
            }
            while (v26 < v25);
          }
        }
      }
      else
      {
        sub_B93328(a1, a1 + 112 * (a4 >> 1), a3, a4 >> 1, a5, a6);
        uint64_t v22 = a4 - v20;
        sub_B93328(v21, a2, a3, v22, v19, a6);
        sub_B93F8C((__n128 *)a1, v21, a2, a3, v20, v22, v19, a6);
      }
    }
  }
}

void sub_B93620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_B93EDC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B93634(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unint64_t v5 = a1 + 7;
    if (a1 + 7 != a2)
    {
      long long v7 = a1;
      do
      {
        uint64_t v9 = *(void *)(a3 + 24);
        if (!v9) {
          sub_29F82C();
        }
        long long v10 = v5;
        if ((*(unsigned int (**)(uint64_t, _OWORD *, _OWORD *))(*(void *)v9 + 48))(v9, v5, v7))
        {
          long long v33 = *v10;
          long long v11 = v10[1];
          long long v12 = v10[2];
          long long v13 = v10[4];
          long long v36 = v10[3];
          long long v37 = v13;
          long long v34 = v11;
          long long v35 = v12;
          long long v38 = v7[12];
          uint64_t v39 = *((void *)v7 + 26);
          *((void *)v7 + 24) = 0;
          *((void *)v7 + 25) = 0;
          *((void *)v7 + 26) = 0;
          char v40 = *((unsigned char *)v7 + 216);
          __n128 v14 = v10;
          while (1)
          {
            __n128 v15 = v7;
            *__n128 v14 = *v7;
            long long v16 = v7[1];
            long long v17 = v7[2];
            long long v18 = v7[4];
            uint64_t v14[3] = v7[3];
            v14[4] = v18;
            v14[1] = v16;
            v14[2] = v17;
            uint64_t v19 = (void **)(v14 + 5);
            uint64_t v20 = *((void *)v14 + 10);
            if (v20)
            {
              uint64_t v21 = *((void *)v14 + 11);
              uint64_t v22 = (void *)*((void *)v14 + 10);
              if (v21 != v20)
              {
                do
                {
                  unint64_t v23 = *(void **)(v21 - 32);
                  if (v23)
                  {
                    *(void *)(v21 - 24) = v23;
                    operator delete(v23);
                  }
                  v21 -= 112;
                }
                while (v21 != v20);
                uint64_t v22 = *v19;
              }
              *((void *)v14 + 11) = v20;
              operator delete(v22);
              void *v19 = 0;
              *((void *)v14 + 11) = 0;
              *((void *)v14 + 12) = 0;
            }
            uint64_t v24 = v15 + 5;
            v14[5] = v15[5];
            *((void *)v14 + 12) = *((void *)v15 + 12);
            *((void *)v15 + 10) = 0;
            *((void *)v15 + 11) = 0;
            *((void *)v15 + 12) = 0;
            *((unsigned char *)v14 + 104) = *((unsigned char *)v15 + 104);
            if (v15 == a1) {
              break;
            }
            uint64_t v25 = *(void *)(a3 + 24);
            if (!v25) {
              sub_29F82C();
            }
            long long v7 = v15 - 7;
            __n128 v14 = v15;
            if (((*(uint64_t (**)(uint64_t, long long *, _OWORD *))(*(void *)v25 + 48))(v25, &v33, v15 - 7) & 1) == 0)
            {
              unint64_t v26 = v15;
              goto LABEL_24;
            }
          }
          unint64_t v26 = a1;
LABEL_24:
          *unint64_t v26 = v33;
          long long v27 = v34;
          long long v28 = v35;
          long long v29 = v37;
          void v26[3] = v36;
          _OWORD v26[4] = v29;
          v26[1] = v27;
          v26[2] = v28;
          uint64_t v30 = (char *)*((void *)v15 + 10);
          if (v30)
          {
            unint64_t v31 = (char *)*((void *)v26 + 11);
            uint64_t v8 = v30;
            if (v31 != v30)
            {
              do
              {
                __n128 v32 = (void *)*((void *)v31 - 4);
                if (v32)
                {
                  *((void *)v31 - 3) = v32;
                  operator delete(v32);
                }
                v31 -= 112;
              }
              while (v31 != v30);
              uint64_t v8 = *(char **)v24;
            }
            *((void *)v26 + 11) = v30;
            operator delete(v8);
            *(void *)uint64_t v24 = 0;
            *((void *)v24 + 1) = 0;
            *((void *)v24 + 2) = 0;
          }
          *(void *)uint64_t v24 = v38;
          *((void *)v26 + 11) = *((void *)&v38 + 1);
          *((void *)v26 + 12) = v39;
          long long v38 = 0uLL;
          uint64_t v39 = 0;
          *((unsigned char *)v26 + 104) = v40;
        }
        unint64_t v5 = v10 + 7;
        long long v7 = v10;
      }
      while (v10 + 7 != a2);
    }
  }
}

void sub_B938B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_B938C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_B938DC(uint64_t a1, __n128 *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    if (a4 == 2)
    {
      uint64_t v13 = *(void *)(a3 + 24);
      if (!v13) {
        sub_29F82C();
      }
      __n128 v14 = a2 - 7;
      int v15 = (*(uint64_t (**)(uint64_t, __n128 *, uint64_t))(*(void *)v13 + 48))(v13, a2 - 7, a1);
      long long v16 = (void *)(a5 + 80);
      long long v17 = (__n128 *)(a5 + 112);
      long long v18 = (void *)(a5 + 192);
      if (v15)
      {
        *(__n128 *)a5 = *v14;
        __n128 v19 = a2[-6];
        __n128 v20 = a2[-5];
        __n128 v21 = a2[-3];
        *(__n128 *)(a5 + 48) = a2[-4];
        *(__n128 *)(a5 + 64) = v21;
        *(__n128 *)(a5 + 16) = v19;
        *(__n128 *)(a5 + 32) = v20;
        *(void *)(a5 + 88) = 0;
        *(void *)(a5 + 96) = 0;
        *long long v16 = 0;
        *(__n128 *)(a5 + 80) = a2[-2];
        *(void *)(a5 + 96) = a2[-1].n128_u64[0];
        a2[-2].n128_u64[0] = 0;
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        *(unsigned char *)(a5 + 104) = a2[-1].n128_u8[8];
        *long long v17 = *(__n128 *)a1;
        long long v22 = *(_OWORD *)(a1 + 16);
        long long v23 = *(_OWORD *)(a1 + 32);
        long long v24 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)(a5 + 160) = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(a5 + 176) = v24;
        *(_OWORD *)(a5 + 128) = v22;
        *(_OWORD *)(a5 + 144) = v23;
        *(void *)(a5 + 200) = 0;
        *(void *)(a5 + 208) = 0;
        *long long v18 = 0;
        *(_OWORD *)(a5 + 192) = *(_OWORD *)(a1 + 80);
        *(void *)(a5 + 208) = *(void *)(a1 + 96);
        *(void *)(a1 + 80) = 0;
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        uint64_t v25 = (unsigned __int8 *)(a1 + 104);
      }
      else
      {
        *(_OWORD *)a5 = *(_OWORD *)a1;
        long long v28 = *(_OWORD *)(a1 + 16);
        long long v29 = *(_OWORD *)(a1 + 32);
        long long v30 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)(a5 + 48) = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(a5 + 64) = v30;
        *(_OWORD *)(a5 + 16) = v28;
        *(_OWORD *)(a5 + 32) = v29;
        *(void *)(a5 + 88) = 0;
        *(void *)(a5 + 96) = 0;
        *long long v16 = 0;
        *(_OWORD *)(a5 + 80) = *(_OWORD *)(a1 + 80);
        *(void *)(a5 + 96) = *(void *)(a1 + 96);
        *(void *)(a1 + 80) = 0;
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        *(unsigned char *)(a5 + 104) = *(unsigned char *)(a1 + 104);
        *long long v17 = *v14;
        __n128 v31 = a2[-6];
        __n128 v32 = a2[-5];
        __n128 v33 = a2[-3];
        *(__n128 *)(a5 + 160) = a2[-4];
        *(__n128 *)(a5 + 176) = v33;
        *(__n128 *)(a5 + 128) = v31;
        *(__n128 *)(a5 + 144) = v32;
        *(void *)(a5 + 200) = 0;
        *(void *)(a5 + 208) = 0;
        *long long v18 = 0;
        *(__n128 *)(a5 + 192) = a2[-2];
        *(void *)(a5 + 208) = a2[-1].n128_u64[0];
        a2[-2].n128_u64[0] = 0;
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        uint64_t v25 = &a2[-1].n128_u8[8];
      }
      *(unsigned char *)(a5 + 216) = *v25;
    }
    else if (a4 == 1)
    {
      *(_OWORD *)a5 = *(_OWORD *)a1;
      long long v10 = *(_OWORD *)(a1 + 16);
      long long v11 = *(_OWORD *)(a1 + 32);
      long long v12 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a5 + 48) = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a5 + 64) = v12;
      *(_OWORD *)(a5 + 16) = v10;
      *(_OWORD *)(a5 + 32) = v11;
      *(void *)(a5 + 88) = 0;
      *(void *)(a5 + 96) = 0;
      *(void *)(a5 + 80) = 0;
      *(_OWORD *)(a5 + 80) = *(_OWORD *)(a1 + 80);
      *(void *)(a5 + 96) = *(void *)(a1 + 96);
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      *(void *)(a1 + 96) = 0;
      *(unsigned char *)(a5 + 104) = *(unsigned char *)(a1 + 104);
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v26 = a4 >> 1;
      uint64_t v27 = 112 * (a4 >> 1);
      sub_B93328(a1, a1 + v27, a3, a4 >> 1, a5, a4 >> 1);
      sub_B93328(a1 + v27, a2, a3, a4 - v26, a5 + v27, a4 - v26);
      sub_B94834((void *)a1, (void *)(a1 + v27), (void *)(a1 + v27), a2, (unsigned char *)a5, a3);
    }
    else
    {
      sub_B944B4(a1, a2, a5, a3);
    }
  }
}

void sub_B93BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B93EDC((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 sub_B93BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 == a2)
  {
LABEL_28:
    while (a3 != a4)
    {
      *(_OWORD *)a5 = *(_OWORD *)a3;
      long long v30 = *(_OWORD *)(a3 + 16);
      long long v31 = *(_OWORD *)(a3 + 32);
      long long v32 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a5 + 48) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(a5 + 64) = v32;
      *(_OWORD *)(a5 + 16) = v30;
      *(_OWORD *)(a5 + 32) = v31;
      __n128 v33 = (void **)(a5 + 80);
      uint64_t v34 = *(void *)(a5 + 80);
      if (v34)
      {
        uint64_t v35 = *(void *)(a5 + 88);
        long long v29 = *(void **)(a5 + 80);
        if (v35 != v34)
        {
          do
          {
            long long v36 = *(void **)(v35 - 32);
            if (v36)
            {
              *(void *)(v35 - 24) = v36;
              operator delete(v36);
            }
            v35 -= 112;
          }
          while (v35 != v34);
          long long v29 = *v33;
        }
        *(void *)(a5 + 88) = v34;
        operator delete(v29);
        *__n128 v33 = 0;
        *(void *)(a5 + 88) = 0;
        *(void *)(a5 + 96) = 0;
      }
      __n128 result = *(__n128 *)(a3 + 80);
      *(__n128 *)(a5 + 80) = result;
      *(void *)(a5 + 96) = *(void *)(a3 + 96);
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 88) = 0;
      *(void *)(a3 + 96) = 0;
      *(unsigned char *)(a5 + 104) = *(unsigned char *)(a3 + 104);
      a3 += 112;
      a5 += 112;
    }
  }
  else
  {
    uint64_t v11 = a1;
    while (a3 != a4)
    {
      uint64_t v14 = *(void *)(a6 + 24);
      if (!v14) {
        sub_29F82C();
      }
      int v15 = (void **)(a5 + 80);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 48))(v14, a3, v11))
      {
        *(_OWORD *)a5 = *(_OWORD *)a3;
        long long v16 = *(_OWORD *)(a3 + 16);
        long long v17 = *(_OWORD *)(a3 + 32);
        long long v18 = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(a5 + 48) = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a5 + 64) = v18;
        *(_OWORD *)(a5 + 16) = v16;
        *(_OWORD *)(a5 + 32) = v17;
        uint64_t v19 = *(void *)(a5 + 80);
        if (v19)
        {
          uint64_t v20 = *(void *)(a5 + 88);
          __n128 v21 = *(void **)(a5 + 80);
          if (v20 != v19)
          {
            do
            {
              long long v22 = *(void **)(v20 - 32);
              if (v22)
              {
                *(void *)(v20 - 24) = v22;
                operator delete(v22);
              }
              v20 -= 112;
            }
            while (v20 != v19);
            __n128 v21 = *v15;
          }
          *(void *)(a5 + 88) = v19;
          operator delete(v21);
          _OWORD *v15 = 0;
          *(void *)(a5 + 88) = 0;
          *(void *)(a5 + 96) = 0;
        }
        __n128 result = *(__n128 *)(a3 + 80);
        *(__n128 *)(a5 + 80) = result;
        *(void *)(a5 + 96) = *(void *)(a3 + 96);
        *(void *)(a3 + 80) = 0;
        *(void *)(a3 + 88) = 0;
        *(void *)(a3 + 96) = 0;
        *(unsigned char *)(a5 + 104) = *(unsigned char *)(a3 + 104);
        a3 += 112;
        a5 += 112;
        if (v11 == a2) {
          goto LABEL_28;
        }
      }
      else
      {
        *(_OWORD *)a5 = *(_OWORD *)v11;
        long long v23 = *(_OWORD *)(v11 + 16);
        long long v24 = *(_OWORD *)(v11 + 32);
        long long v25 = *(_OWORD *)(v11 + 64);
        *(_OWORD *)(a5 + 48) = *(_OWORD *)(v11 + 48);
        *(_OWORD *)(a5 + 64) = v25;
        *(_OWORD *)(a5 + 16) = v23;
        *(_OWORD *)(a5 + 32) = v24;
        uint64_t v26 = *(void *)(a5 + 80);
        if (v26)
        {
          uint64_t v27 = *(void *)(a5 + 88);
          long long v12 = *(void **)(a5 + 80);
          if (v27 != v26)
          {
            do
            {
              long long v28 = *(void **)(v27 - 32);
              if (v28)
              {
                *(void *)(v27 - 24) = v28;
                operator delete(v28);
              }
              v27 -= 112;
            }
            while (v27 != v26);
            long long v12 = *v15;
          }
          *(void *)(a5 + 88) = v26;
          operator delete(v12);
          _OWORD *v15 = 0;
          *(void *)(a5 + 88) = 0;
          *(void *)(a5 + 96) = 0;
        }
        __n128 result = *(__n128 *)(v11 + 80);
        *(__n128 *)(a5 + 80) = result;
        *(void *)(a5 + 96) = *(void *)(v11 + 96);
        *(void *)(v11 + 80) = 0;
        *(void *)(v11 + 88) = 0;
        *(void *)(v11 + 96) = 0;
        *(unsigned char *)(a5 + 104) = *(unsigned char *)(v11 + 104);
        v11 += 112;
        a5 += 112;
        if (v11 == a2) {
          goto LABEL_28;
        }
      }
    }
    while (v11 != a2)
    {
      *(_OWORD *)a5 = *(_OWORD *)v11;
      long long v38 = *(_OWORD *)(v11 + 16);
      long long v39 = *(_OWORD *)(v11 + 32);
      long long v40 = *(_OWORD *)(v11 + 64);
      *(_OWORD *)(a5 + 48) = *(_OWORD *)(v11 + 48);
      *(_OWORD *)(a5 + 64) = v40;
      *(_OWORD *)(a5 + 16) = v38;
      *(_OWORD *)(a5 + 32) = v39;
      long long v41 = (void **)(a5 + 80);
      uint64_t v42 = *(void *)(a5 + 80);
      if (v42)
      {
        uint64_t v43 = *(void *)(a5 + 88);
        long long v37 = *(void **)(a5 + 80);
        if (v43 != v42)
        {
          do
          {
            __n128 v44 = *(void **)(v43 - 32);
            if (v44)
            {
              *(void *)(v43 - 24) = v44;
              operator delete(v44);
            }
            v43 -= 112;
          }
          while (v43 != v42);
          long long v37 = *v41;
        }
        *(void *)(a5 + 88) = v42;
        operator delete(v37);
        *long long v41 = 0;
        *(void *)(a5 + 88) = 0;
        *(void *)(a5 + 96) = 0;
      }
      __n128 result = *(__n128 *)(v11 + 80);
      *(__n128 *)(a5 + 80) = result;
      *(void *)(a5 + 96) = *(void *)(v11 + 96);
      *(void *)(v11 + 80) = 0;
      *(void *)(v11 + 88) = 0;
      *(void *)(v11 + 96) = 0;
      *(unsigned char *)(a5 + 104) = *(unsigned char *)(v11 + 104);
      v11 += 112;
      a5 += 112;
    }
  }
  return result;
}

uint64_t *sub_B93EDC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)a1[1];
    unint64_t v4 = *v3;
    if (*v3)
    {
      unint64_t v5 = 0;
      do
      {
        uint64_t v7 = *(void *)(v2 + 80);
        if (v7)
        {
          uint64_t v8 = *(void *)(v2 + 88);
          uint64_t v6 = *(void **)(v2 + 80);
          if (v8 != v7)
          {
            do
            {
              uint64_t v9 = *(void **)(v8 - 32);
              if (v9)
              {
                *(void *)(v8 - 24) = v9;
                operator delete(v9);
              }
              v8 -= 112;
            }
            while (v8 != v7);
            uint64_t v6 = *(void **)(v2 + 80);
          }
          *(void *)(v2 + 88) = v7;
          operator delete(v6);
          unint64_t v4 = *v3;
        }
        ++v5;
        v2 += 112;
      }
      while (v5 < v4);
    }
  }
  return a1;
}

__n128 sub_B93F8C(__n128 *a1, long long *a2, __n128 *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v41 = a6;
  if (a6)
  {
    while (1)
    {
      if (v41 <= a8 || a5 <= a8)
      {
        sub_B94A78(a1, (__n128 *)a2, a3, (uint64_t)a4, a5, v41, a7);
        return result;
      }
      if (!a5) {
        return result;
      }
      unint64_t v12 = 0;
      uint64_t v13 = -a5;
      while (1)
      {
        uint64_t v14 = a4[3];
        if (!v14) {
          sub_29F82C();
        }
        if ((*(uint64_t (**)(uint64_t, long long *, __n128 *))(*(void *)v14 + 48))(v14, a2, &a1[v12 / 0x10]))break; {
        v12 += 112;
        }
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      if (-v13 >= v41)
      {
        if (v13 == -1)
        {
          long long v30 = &a1[v12 / 0x10];
          __n128 v42 = a1[v12 / 0x10];
          __n128 v45 = a1[v12 / 0x10 + 3];
          __n128 v46 = a1[v12 / 0x10 + 4];
          __n128 v43 = a1[v12 / 0x10 + 1];
          __n128 v44 = a1[v12 / 0x10 + 2];
          unint64_t v31 = a1[v12 / 0x10 + 6].n128_u64[0];
          __n128 result = a1[v12 / 0x10 + 5];
          v30[5].n128_u64[0] = 0;
          v30[5].n128_u64[1] = 0;
          v30[6].n128_u64[0] = 0;
          unsigned __int8 v32 = a1[v12 / 0x10 + 6].n128_u8[8];
          long long v34 = a2[1];
          long long v33 = a2[2];
          long long v35 = a2[4];
          v30[3] = (__n128)a2[3];
          v30[4] = (__n128)v35;
          v30[1] = (__n128)v34;
          void v30[2] = (__n128)v33;
          *long long v30 = (__n128)*a2;
          v30[5] = (__n128)a2[5];
          v30[6].n128_u64[0] = *((void *)a2 + 12);
          v30[6].n128_u8[8] = *((unsigned char *)a2 + 104);
          a2[2] = (__int128)v44;
          a2[3] = (__int128)v45;
          *a2 = (__int128)v42;
          a2[1] = (__int128)v43;
          a2[4] = (__int128)v46;
          a2[5] = (__int128)result;
          *((void *)a2 + 12) = v31;
          *((unsigned char *)a2 + 104) = v32;
          return result;
        }
        if (v13 <= 0) {
          uint64_t v22 = -v13;
        }
        else {
          uint64_t v22 = 1 - v13;
        }
        long long v23 = (void *)a4[3];
        if (v23)
        {
          if (v23 == a4)
          {
            BOOL v48 = v47;
            (*(void (**)(void *, void *))(*a4 + 24))(a4, v47);
          }
          else
          {
            BOOL v48 = (void *)(*(uint64_t (**)(void *))(*v23 + 16))(v23);
          }
        }
        else
        {
          BOOL v48 = 0;
        }
        uint64_t v36 = v22 >> 1;
        uint64_t v19 = (long long *)&a1[7 * (v22 >> 1) + v12 / 0x10];
        long long v18 = a2;
        if (a2 != (long long *)a3)
        {
          unint64_t v24 = 0x6DB6DB6DB6DB6DB7 * (((char *)a3 - (char *)a2) >> 4);
          long long v18 = a2;
          do
          {
            if (!v48) {
              sub_29F82C();
            }
            long long v25 = &v18[7 * (v24 >> 1)];
            int v26 = (*(uint64_t (**)(void *, long long *, long long *))(*v48 + 48))(v48, v25, v19);
            if (v26) {
              v24 += ~(v24 >> 1);
            }
            else {
              v24 >>= 1;
            }
            if (v26) {
              long long v18 = v25 + 7;
            }
          }
          while (v24);
        }
        if (v48 == v47)
        {
          (*(void (**)(void *))(v47[0] + 32))(v47);
        }
        else if (v48)
        {
          (*(void (**)(void))(*v48 + 40))();
        }
        uint64_t v37 = 0x6DB6DB6DB6DB6DB7 * (v18 - a2);
      }
      else
      {
        if (v41 >= 0) {
          uint64_t v17 = v41;
        }
        else {
          uint64_t v17 = v41 + 1;
        }
        uint64_t v37 = v17 >> 1;
        long long v18 = &a2[7 * (v17 >> 1)];
        uint64_t v19 = a2;
        if ((char *)a2 - (char *)a1 != v12)
        {
          unint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((char *)a2 - (char *)a1 - v12) >> 4);
          uint64_t v19 = (long long *)&a1[v12 / 0x10];
          do
          {
            uint64_t v21 = a4[3];
            if (!v21) {
              sub_29F82C();
            }
            if ((*(unsigned int (**)(uint64_t, long long *, long long *))(*(void *)v21 + 48))(v21, v18, &v19[7 * (v20 >> 1)]))
            {
              v20 >>= 1;
            }
            else
            {
              v19 += 7 * (v20 >> 1) + 7;
              v20 += ~(v20 >> 1);
            }
          }
          while (v20);
        }
        uint64_t v36 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((char *)v19 - (char *)a1 - v12) >> 4);
      }
      uint64_t v27 = sub_B92D58(v19, a2, v18);
      long long v28 = v27;
      a5 = -v36 - v13;
      uint64_t v29 = v41 - v37;
      if (v36 + v37 >= v41 - (v36 + v37) - v13)
      {
        sub_B93F8C(v27, v18, a3, a4, -v36 - v13, v41 - v37, a7, a8);
        a2 = v19;
        a5 = v36;
        a3 = (__n128 *)v28;
        a1 = (__n128 *)((char *)a1 + v12);
        uint64_t v41 = v37;
        if (!v37) {
          return result;
        }
      }
      else
      {
        sub_B93F8C(&a1[v12 / 0x10], v19, v27, a4, v36, v37, a7, a8);
        a1 = (__n128 *)v28;
        a2 = v18;
        v41 -= v37;
        if (!v29) {
          return result;
        }
      }
    }
  }
  return result;
}

void sub_B94488(_Unwind_Exception *a1)
{
  sub_B8C434((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_B9449C(_Unwind_Exception *a1)
{
  sub_B8C434((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

__n128 sub_B944B4(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  if ((__n128 *)a1 != a2)
  {
    unint64_t v5 = (__n128 *)a1;
    long long v6 = *(_OWORD *)(a1 + 16);
    long long v7 = *(_OWORD *)(a1 + 32);
    long long v8 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a3 + 48) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a3 + 64) = v8;
    *(_OWORD *)(a3 + 16) = v6;
    *(_OWORD *)(a3 + 32) = v7;
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    *(void *)(a3 + 80) = 0;
    __n128 result = *(__n128 *)(a1 + 80);
    *(__n128 *)(a3 + 80) = result;
    *(void *)(a3 + 96) = *(void *)(a1 + 96);
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    *(unsigned char *)(a3 + 104) = *(unsigned char *)(a1 + 104);
    uint64_t v41 = 1;
    long long v10 = (__n128 *)(a1 + 112);
    if ((__n128 *)(a1 + 112) != a2)
    {
      unint64_t v12 = (__n128 *)a3;
      do
      {
        while (1)
        {
          uint64_t v16 = *(void *)(a4 + 24);
          if (!v16) {
LABEL_32:
          }
            sub_29F82C();
          uint64_t v17 = v10;
          long long v18 = v12 + 7;
          if ((*(unsigned int (**)(uint64_t, __n128 *, __n128 *))(*(void *)v16 + 48))(v16, v10, v12)) {
            break;
          }
          *long long v18 = *v17;
          __n128 v13 = v17[1];
          __n128 v14 = v17[2];
          __n128 v15 = v17[4];
          v12[10] = v17[3];
          v12[11] = v15;
          v12[8] = v13;
          v12[9] = v14;
          v12[12].n128_u64[1] = 0;
          v12[13].n128_u64[0] = 0;
          v12[12].n128_u64[0] = 0;
          __n128 result = v5[12];
          v12[12] = result;
          v12[13].n128_u64[0] = v5[13].n128_u64[0];
          v5[12].n128_u64[0] = 0;
          v5[12].n128_u64[1] = 0;
          v5[13].n128_u64[0] = 0;
          v12[13].n128_u8[8] = v5[13].n128_u8[8];
          ++v41;
          long long v10 = v17 + 7;
          v12 += 7;
          unint64_t v5 = v17;
          if (&v17[7] == a2) {
            return result;
          }
        }
        __n128 v19 = v12[3];
        v12[9] = v12[2];
        v12[10] = v19;
        __n128 v20 = v12[5];
        v12[11] = v12[4];
        __n128 v21 = v12[1];
        *long long v18 = *v12;
        v12[8] = v21;
        v12[12] = v20;
        v12[13].n128_u64[0] = v12[6].n128_u64[0];
        v12[5].n128_u64[0] = 0;
        v12[5].n128_u64[1] = 0;
        v12[13].n128_u8[8] = v12[6].n128_u8[8];
        ++v41;
        uint64_t v22 = (__n128 *)a3;
        v12[6].n128_u64[0] = 0;
        if (v12 != (__n128 *)a3)
        {
          do
          {
            uint64_t v24 = *(void *)(a4 + 24);
            if (!v24) {
              goto LABEL_32;
            }
            long long v25 = v12 - 7;
            if (!(*(unsigned int (**)(uint64_t, __n128 *, __n128 *))(*(void *)v24 + 48))(v24, v17, v12 - 7))
            {
              uint64_t v22 = v12;
              goto LABEL_22;
            }
            __n128 v26 = v12[-4];
            void v12[2] = v12[-5];
            void v12[3] = v26;
            v12[4] = v12[-3];
            __n128 v27 = v12[-6];
            *unint64_t v12 = *v25;
            v12[1] = v27;
            long long v28 = (void **)&v12[5];
            uint64_t v29 = v12[5].n128_i64[0];
            if (v29)
            {
              uint64_t v30 = v12[5].n128_i64[1];
              long long v23 = (void *)v12[5].n128_u64[0];
              if (v30 != v29)
              {
                do
                {
                  unint64_t v31 = *(void **)(v30 - 32);
                  if (v31)
                  {
                    *(void *)(v30 - 24) = v31;
                    operator delete(v31);
                  }
                  v30 -= 112;
                }
                while (v30 != v29);
                long long v23 = *v28;
              }
              v12[5].n128_u64[1] = v29;
              operator delete(v23);
              *long long v28 = 0;
              v12[5].n128_u64[1] = 0;
              v12[6].n128_u64[0] = 0;
            }
            v12[5] = v12[-2];
            v12[6].n128_u64[0] = v12[-1].n128_u64[0];
            v12[-2].n128_u64[1] = 0;
            v12[-1].n128_u64[0] = 0;
            v12[-2].n128_u64[0] = 0;
            v12[6].n128_u8[8] = v12[-1].n128_u8[8];
            v12 -= 7;
          }
          while (v25 != (__n128 *)a3);
          uint64_t v22 = (__n128 *)a3;
        }
LABEL_22:
        *uint64_t v22 = *v17;
        __n128 v32 = v17[1];
        __n128 v33 = v17[2];
        __n128 v34 = v17[4];
        void v22[3] = v17[3];
        v22[4] = v34;
        v22[1] = v32;
        v22[2] = v33;
        long long v35 = (void **)&v22[5];
        uint64_t v36 = v22[5].n128_i64[0];
        if (v36)
        {
          uint64_t v37 = v22[5].n128_i64[1];
          long long v38 = (void *)v22[5].n128_u64[0];
          if (v37 != v36)
          {
            do
            {
              long long v39 = *(void **)(v37 - 32);
              if (v39)
              {
                *(void *)(v37 - 24) = v39;
                operator delete(v39);
              }
              v37 -= 112;
            }
            while (v37 != v36);
            long long v38 = *v35;
          }
          v22[5].n128_u64[1] = v36;
          operator delete(v38);
          unsigned int *v35 = 0;
          v22[5].n128_u64[1] = 0;
          v22[6].n128_u64[0] = 0;
        }
        __n128 result = v5[12];
        long long v22[5] = result;
        v22[6].n128_u64[0] = v5[13].n128_u64[0];
        v5[12].n128_u64[0] = 0;
        v5[12].n128_u64[1] = 0;
        v5[13].n128_u64[0] = 0;
        v22[6].n128_u8[8] = v5[13].n128_u8[8];
        long long v10 = v17 + 7;
        unint64_t v12 = v18;
        unint64_t v5 = v17;
      }
      while (&v17[7] != a2);
    }
  }
  return result;
}

void sub_B947F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B93EDC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B9480C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B93EDC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B94820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B93EDC((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 sub_B94834(void *a1, void *a2, void *a3, void *a4, unsigned char *a5, uint64_t a6)
{
  uint64_t v33 = 0;
  if (a1 == a2)
  {
LABEL_15:
    while (a3 != a4)
    {
      *(_OWORD *)a5 = *(_OWORD *)a3;
      long long v30 = *((_OWORD *)a3 + 1);
      long long v31 = *((_OWORD *)a3 + 2);
      long long v32 = *((_OWORD *)a3 + 4);
      *((_OWORD *)a5 + 3) = *((_OWORD *)a3 + 3);
      *((_OWORD *)a5 + 4) = v32;
      *((_OWORD *)a5 + 1) = v30;
      *((_OWORD *)a5 + 2) = v31;
      *((void *)a5 + 11) = 0;
      *((void *)a5 + 12) = 0;
      *((void *)a5 + 10) = 0;
      __n128 result = *((__n128 *)a3 + 5);
      *((__n128 *)a5 + 5) = result;
      *((void *)a5 + 12) = a3[12];
      a3[10] = 0;
      a3[11] = 0;
      a3[12] = 0;
      a5[104] = *((unsigned char *)a3 + 104);
      a3 += 14;
      a5 += 112;
    }
  }
  else
  {
    long long v10 = a1;
    uint64_t v11 = a5 + 104;
    while (a3 != a4)
    {
      uint64_t v17 = *(void *)(a6 + 24);
      if (!v17) {
        sub_29F82C();
      }
      int v18 = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v17 + 48))(v17, a3, v10);
      __n128 v19 = v11 - 104;
      __n128 v20 = v11 - 24;
      if (v18)
      {
        _OWORD *v19 = *(_OWORD *)a3;
        long long v21 = *((_OWORD *)a3 + 1);
        long long v22 = *((_OWORD *)a3 + 2);
        long long v23 = *((_OWORD *)a3 + 4);
        *(_OWORD *)(v11 - 56) = *((_OWORD *)a3 + 3);
        *(_OWORD *)(v11 - 40) = v23;
        *(_OWORD *)(v11 - 88) = v21;
        *(_OWORD *)(v11 - 72) = v22;
        *((void *)v11 - 2) = 0;
        *((void *)v11 - 1) = 0;
        *__n128 v20 = 0;
        __n128 result = *((__n128 *)a3 + 5);
        *(__n128 *)(v11 - 24) = result;
        *((void *)v11 - 1) = a3[12];
        a3[10] = 0;
        a3[11] = 0;
        a3[12] = 0;
        uint64_t v16 = a3;
        a3 += 14;
      }
      else
      {
        _OWORD *v19 = *(_OWORD *)v10;
        long long v12 = *((_OWORD *)v10 + 1);
        long long v13 = *((_OWORD *)v10 + 2);
        long long v14 = *((_OWORD *)v10 + 4);
        *(_OWORD *)(v11 - 56) = *((_OWORD *)v10 + 3);
        *(_OWORD *)(v11 - 40) = v14;
        *(_OWORD *)(v11 - 88) = v12;
        *(_OWORD *)(v11 - 72) = v13;
        *((void *)v11 - 2) = 0;
        *((void *)v11 - 1) = 0;
        *__n128 v20 = 0;
        __n128 result = *((__n128 *)v10 + 5);
        *(__n128 *)(v11 - 24) = result;
        *((void *)v11 - 1) = v10[12];
        v10[10] = 0;
        v10[11] = 0;
        v10[12] = 0;
        uint64_t v16 = v10;
        v10 += 14;
      }
      *uint64_t v11 = v16[104];
      v11 += 112;
      ++v33;
      if (v10 == a2)
      {
        a5 = v11 - 104;
        goto LABEL_15;
      }
    }
    if (v10 != a2)
    {
      uint64_t v24 = 0;
      do
      {
        long long v25 = &v11[v24 * 8];
        __n128 v26 = &v10[v24];
        *(_OWORD *)(v25 - 104) = *(_OWORD *)&v10[v24];
        long long v27 = *(_OWORD *)&v10[v24 + 2];
        long long v28 = *(_OWORD *)&v10[v24 + 4];
        long long v29 = *(_OWORD *)&v10[v24 + 6];
        *(_OWORD *)(v25 - 40) = *(_OWORD *)&v10[v24 + 8];
        *(_OWORD *)(v25 - 56) = v29;
        *(_OWORD *)(v25 - 72) = v28;
        *(_OWORD *)(v25 - 88) = v27;
        *((void *)v25 - 2) = 0;
        *((void *)v25 - 1) = 0;
        *((void *)v25 - 3) = 0;
        __n128 result = *(__n128 *)&v10[v24 + 10];
        *(__n128 *)(v25 - 24) = result;
        *((void *)v25 - 1) = v10[v24 + 12];
        v26[10] = 0;
        v26[11] = 0;
        v26[12] = 0;
        *long long v25 = v10[v24 + 13];
        v24 += 14;
      }
      while (v26 + 14 != a2);
    }
  }
  return result;
}

void sub_B94A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B93EDC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B94A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B93EDC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B94A78(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v30 = a7;
  long long v31 = &v32;
  uint64_t v32 = 0;
  if (a5 > a6)
  {
    uint64_t v10 = a7;
    if (a2 != a3)
    {
      uint64_t v11 = 0;
      uint64_t v10 = a7;
      long long v12 = a2;
      do
      {
        *(__n128 *)uint64_t v10 = *v12;
        __n128 v13 = v12[1];
        __n128 v14 = v12[2];
        __n128 v15 = v12[4];
        *(__n128 *)(v10 + 48) = v12[3];
        *(__n128 *)(v10 + 64) = v15;
        *(__n128 *)(v10 + 16) = v13;
        *(__n128 *)(v10 + 32) = v14;
        *(void *)(v10 + 88) = 0;
        *(void *)(v10 + 96) = 0;
        *(void *)(v10 + 80) = 0;
        *(__n128 *)(v10 + 80) = v12[5];
        *(void *)(v10 + 96) = v12[6].n128_u64[0];
        v12[5].n128_u64[0] = 0;
        v12[5].n128_u64[1] = 0;
        v12[6].n128_u64[0] = 0;
        *(unsigned char *)(v10 + 104) = v12[6].n128_u8[8];
        ++v11;
        v10 += 112;
        v12 += 7;
      }
      while (v12 != a3);
      uint64_t v32 = v11;
    }
    uint64_t v29 = a4;
    sub_B94F10(v10, (_OWORD *)v10, a7, (_OWORD *)a7, (uint64_t)a2, a2, (uint64_t)a1, a1, (uint64_t)a3, a3, (uint64_t)&v29);
    if (!a7) {
      return;
    }
LABEL_13:
    long long v22 = (unint64_t *)v31;
    unint64_t v23 = *v31;
    if (*v31)
    {
      unint64_t v24 = 0;
      do
      {
        uint64_t v26 = *(void *)(a7 + 80);
        if (v26)
        {
          uint64_t v27 = *(void *)(a7 + 88);
          long long v25 = *(void **)(a7 + 80);
          if (v27 != v26)
          {
            do
            {
              long long v28 = *(void **)(v27 - 32);
              if (v28)
              {
                *(void *)(v27 - 24) = v28;
                operator delete(v28);
              }
              v27 -= 112;
            }
            while (v27 != v26);
            long long v25 = *(void **)(a7 + 80);
          }
          *(void *)(a7 + 88) = v26;
          operator delete(v25);
          unint64_t v23 = *v22;
        }
        ++v24;
        a7 += 112;
      }
      while (v24 < v23);
    }
    return;
  }
  uint64_t v16 = a7;
  if (a1 != a2)
  {
    uint64_t v17 = 0;
    uint64_t v16 = a7;
    int v18 = a1;
    do
    {
      *(__n128 *)uint64_t v16 = *v18;
      __n128 v19 = v18[1];
      __n128 v20 = v18[2];
      __n128 v21 = v18[4];
      *(__n128 *)(v16 + 48) = v18[3];
      *(__n128 *)(v16 + 64) = v21;
      *(__n128 *)(v16 + 16) = v19;
      *(__n128 *)(v16 + 32) = v20;
      *(void *)(v16 + 88) = 0;
      *(void *)(v16 + 96) = 0;
      *(void *)(v16 + 80) = 0;
      *(__n128 *)(v16 + 80) = v18[5];
      *(void *)(v16 + 96) = v18[6].n128_u64[0];
      v18[5].n128_u64[0] = 0;
      v18[5].n128_u64[1] = 0;
      v18[6].n128_u64[0] = 0;
      *(unsigned char *)(v16 + 104) = v18[6].n128_u8[8];
      ++v17;
      v16 += 112;
      v18 += 7;
    }
    while (v18 != a2);
    uint64_t v32 = v17;
  }
  sub_B94C9C(a7, v16, (uint64_t)a2, (uint64_t)a3, (uint64_t)a1, a4);
  a7 = v30;
  if (v30) {
    goto LABEL_13;
  }
}

void sub_B94C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_B93EDC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_B94C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_B93EDC((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 sub_B94C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 != a2)
  {
    uint64_t v11 = a1;
    while (a3 != a4)
    {
      uint64_t v14 = *(void *)(a6 + 24);
      if (!v14) {
        sub_29F82C();
      }
      __n128 v15 = (void **)(a5 + 80);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 48))(v14, a3, v11))
      {
        *(_OWORD *)a5 = *(_OWORD *)a3;
        long long v16 = *(_OWORD *)(a3 + 16);
        long long v17 = *(_OWORD *)(a3 + 32);
        long long v18 = *(_OWORD *)(a3 + 64);
        *(_OWORD *)(a5 + 48) = *(_OWORD *)(a3 + 48);
        *(_OWORD *)(a5 + 64) = v18;
        *(_OWORD *)(a5 + 16) = v16;
        *(_OWORD *)(a5 + 32) = v17;
        uint64_t v19 = *(void *)(a5 + 80);
        if (v19)
        {
          uint64_t v20 = *(void *)(a5 + 88);
          __n128 v21 = *(void **)(a5 + 80);
          if (v20 != v19)
          {
            do
            {
              long long v22 = *(void **)(v20 - 32);
              if (v22)
              {
                *(void *)(v20 - 24) = v22;
                operator delete(v22);
              }
              v20 -= 112;
            }
            while (v20 != v19);
            __n128 v21 = *v15;
          }
          *(void *)(a5 + 88) = v19;
          operator delete(v21);
          _OWORD *v15 = 0;
          *(void *)(a5 + 88) = 0;
          *(void *)(a5 + 96) = 0;
        }
        __n128 result = *(__n128 *)(a3 + 80);
        *(__n128 *)(a5 + 80) = result;
        *(void *)(a5 + 96) = *(void *)(a3 + 96);
        *(void *)(a3 + 80) = 0;
        *(void *)(a3 + 88) = 0;
        *(void *)(a3 + 96) = 0;
        *(unsigned char *)(a5 + 104) = *(unsigned char *)(a3 + 104);
        a3 += 112;
        a5 += 112;
        if (v11 == a2) {
          return result;
        }
      }
      else
      {
        *(_OWORD *)a5 = *(_OWORD *)v11;
        long long v23 = *(_OWORD *)(v11 + 16);
        long long v24 = *(_OWORD *)(v11 + 32);
        long long v25 = *(_OWORD *)(v11 + 64);
        *(_OWORD *)(a5 + 48) = *(_OWORD *)(v11 + 48);
        *(_OWORD *)(a5 + 64) = v25;
        *(_OWORD *)(a5 + 16) = v23;
        *(_OWORD *)(a5 + 32) = v24;
        uint64_t v26 = *(void *)(a5 + 80);
        if (v26)
        {
          uint64_t v27 = *(void *)(a5 + 88);
          long long v12 = *(void **)(a5 + 80);
          if (v27 != v26)
          {
            do
            {
              long long v28 = *(void **)(v27 - 32);
              if (v28)
              {
                *(void *)(v27 - 24) = v28;
                operator delete(v28);
              }
              v27 -= 112;
            }
            while (v27 != v26);
            long long v12 = *v15;
          }
          *(void *)(a5 + 88) = v26;
          operator delete(v12);
          _OWORD *v15 = 0;
          *(void *)(a5 + 88) = 0;
          *(void *)(a5 + 96) = 0;
        }
        __n128 result = *(__n128 *)(v11 + 80);
        *(__n128 *)(a5 + 80) = result;
        *(void *)(a5 + 96) = *(void *)(v11 + 96);
        *(void *)(v11 + 80) = 0;
        *(void *)(v11 + 88) = 0;
        *(void *)(v11 + 96) = 0;
        *(unsigned char *)(a5 + 104) = *(unsigned char *)(v11 + 104);
        v11 += 112;
        a5 += 112;
        if (v11 == a2) {
          return result;
        }
      }
    }
    do
    {
      *(_OWORD *)a5 = *(_OWORD *)v11;
      long long v30 = *(_OWORD *)(v11 + 16);
      long long v31 = *(_OWORD *)(v11 + 32);
      long long v32 = *(_OWORD *)(v11 + 64);
      *(_OWORD *)(a5 + 48) = *(_OWORD *)(v11 + 48);
      *(_OWORD *)(a5 + 64) = v32;
      *(_OWORD *)(a5 + 16) = v30;
      *(_OWORD *)(a5 + 32) = v31;
      uint64_t v33 = (void **)(a5 + 80);
      uint64_t v34 = *(void *)(a5 + 80);
      if (v34)
      {
        uint64_t v35 = *(void *)(a5 + 88);
        uint64_t v29 = *(void **)(a5 + 80);
        if (v35 != v34)
        {
          do
          {
            uint64_t v36 = *(void **)(v35 - 32);
            if (v36)
            {
              *(void *)(v35 - 24) = v36;
              operator delete(v36);
            }
            v35 -= 112;
          }
          while (v35 != v34);
          uint64_t v29 = *v33;
        }
        *(void *)(a5 + 88) = v34;
        operator delete(v29);
        *uint64_t v33 = 0;
        *(void *)(a5 + 88) = 0;
        *(void *)(a5 + 96) = 0;
      }
      __n128 result = *(__n128 *)(v11 + 80);
      *(__n128 *)(a5 + 80) = result;
      *(void *)(a5 + 96) = *(void *)(v11 + 96);
      *(void *)(v11 + 80) = 0;
      *(void *)(v11 + 88) = 0;
      *(void *)(v11 + 96) = 0;
      *(unsigned char *)(a5 + 104) = *(unsigned char *)(v11 + 104);
      v11 += 112;
      a5 += 112;
    }
    while (v11 != a2);
  }
  return result;
}

__n128 sub_B94F10(uint64_t a1, _OWORD *a2, uint64_t a3, _OWORD *a4, uint64_t a5, __n128 *a6, uint64_t a7, __n128 *a8, uint64_t a9, _OWORD *a10, uint64_t a11)
{
  if (a2 == a4) {
    return result;
  }
  uint64_t v14 = a2;
  while (1)
  {
    uint64_t v19 = a10;
    if (a6 == a8) {
      break;
    }
    uint64_t v20 = *(void *)(*(void *)a11 + 24);
    if (!v20) {
      sub_29F82C();
    }
    __n128 v21 = v14 - 7;
    a10 -= 7;
    long long v22 = (void **)(v19 - 2);
    if ((*(unsigned int (**)(uint64_t, _OWORD *, __n128 *))(*(void *)v20 + 48))(v20, v14 - 7, a6 - 7))
    {
      *a10 = a6[-7];
      __n128 v23 = a6[-6];
      __n128 v24 = a6[-5];
      __n128 v25 = a6[-3];
      *(v19 - 4) = a6[-4];
      *(v19 - 3) = v25;
      *(v19 - 6) = v23;
      *(v19 - 5) = v24;
      uint64_t v26 = (char *)*v22;
      if (!*v22)
      {
        long long v17 = a6;
        a6 -= 7;
        __n128 v21 = v14;
        goto LABEL_6;
      }
      uint64_t v27 = (char *)*((void *)v19 - 3);
      long long v16 = *v22;
      if (v27 != v26)
      {
        do
        {
          long long v28 = (void *)*((void *)v27 - 4);
          if (v28)
          {
            *((void *)v27 - 3) = v28;
            operator delete(v28);
          }
          v27 -= 112;
        }
        while (v27 != v26);
        long long v16 = *v22;
      }
      *((void *)v19 - 3) = v26;
      long long v17 = a6;
      a6 -= 7;
      __n128 v21 = v14;
    }
    else
    {
      *a10 = *v21;
      long long v29 = *(v14 - 6);
      long long v30 = *(v14 - 5);
      long long v31 = *(v14 - 3);
      *(v19 - 4) = *(v14 - 4);
      *(v19 - 3) = v31;
      *(v19 - 6) = v29;
      *(v19 - 5) = v30;
      long long v32 = (char *)*v22;
      if (!*v22)
      {
        long long v17 = (__n128 *)v14;
        goto LABEL_6;
      }
      uint64_t v33 = (char *)*((void *)v19 - 3);
      long long v16 = *v22;
      if (v33 != v32)
      {
        do
        {
          uint64_t v34 = (void *)*((void *)v33 - 4);
          if (v34)
          {
            *((void *)v33 - 3) = v34;
            operator delete(v34);
          }
          v33 -= 112;
        }
        while (v33 != v32);
        long long v16 = *v22;
      }
      *((void *)v19 - 3) = v32;
      long long v17 = (__n128 *)v14;
    }
    operator delete(v16);
    *long long v22 = 0;
    *((void *)v19 - 3) = 0;
    *((void *)v19 - 2) = 0;
LABEL_6:
    __n128 result = v17[-2];
    *(v19 - 2) = result;
    *((void *)v19 - 2) = v17[-1].n128_u64[0];
    v17[-2].n128_u64[0] = 0;
    v17[-2].n128_u64[1] = 0;
    v17[-1].n128_u64[0] = 0;
    *((unsigned char *)v19 - 8) = v17[-1].n128_u8[8];
    uint64_t v14 = v21;
    if (v21 == a4) {
      return result;
    }
  }
  do
  {
    uint64_t v36 = (void **)(v19 - 2);
    uint64_t v37 = (char *)*((void *)v19 - 4);
    *(v19 - 7) = *(v14 - 7);
    long long v38 = *(v14 - 6);
    long long v39 = *(v14 - 5);
    long long v40 = *(v14 - 3);
    *(v19 - 4) = *(v14 - 4);
    *(v19 - 3) = v40;
    *(v19 - 6) = v38;
    *(v19 - 5) = v39;
    if (v37)
    {
      uint64_t v41 = (char *)*((void *)v19 - 3);
      uint64_t v35 = v37;
      if (v41 != v37)
      {
        do
        {
          __n128 v42 = (void *)*((void *)v41 - 4);
          if (v42)
          {
            *((void *)v41 - 3) = v42;
            operator delete(v42);
          }
          v41 -= 112;
        }
        while (v41 != v37);
        uint64_t v35 = *v36;
      }
      *((void *)v19 - 3) = v37;
      operator delete(v35);
      void *v36 = 0;
      *((void *)v19 - 3) = 0;
      *((void *)v19 - 2) = 0;
    }
    __n128 result = *((__n128 *)v14 - 2);
    *(v19 - 2) = result;
    *((void *)v19 - 2) = *((void *)v14 - 2);
    *((void *)v14 - 4) = 0;
    *((void *)v14 - 3) = 0;
    *((void *)v14 - 2) = 0;
    *((unsigned char *)v19 - 8) = *((unsigned char *)v14 - 8);
    v19 -= 7;
    v14 -= 7;
  }
  while (v14 != a4);
  return result;
}

uint64_t sub_B95194(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_B952D8(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_B952B0(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_B952C4(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_B952D8(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v8 = (0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) >> 33);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = (0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v7 ^ (v7 >> 33))) >> 33);
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      long long v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v12[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v12 + 5) == HIDWORD(v6) && *((_DWORD *)v12 + 4) == v6) {
                return v12;
              }
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            long long v12 = (uint64_t *)*v12;
            if (!v12) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 5) == HIDWORD(v6) && *((_DWORD *)v12 + 4) == v6) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          long long v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  long long v18 = operator new(0x20uLL);
  *long long v18 = 0;
  v18[1] = v8;
  *((_OWORD *)v18 + 1) = *a3;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v9 && (float)(v20 * (float)v9) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    long long v22 = *(void **)(*(void *)a1 + 8 * v3);
    if (v22)
    {
LABEL_34:
      *long long v18 = *v22;
LABEL_69:
      *long long v22 = v18;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v9 >= 3) {
      BOOL v23 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v9);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_45;
    }
    if (prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v9) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v30 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        uint64_t v21 = *(void *)a1;
        long long v22 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        if (v22) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v8;
        uint64_t v21 = *(void *)a1;
        long long v22 = *(void **)(*(void *)a1 + 8 * v8);
        if (v22) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = v30 & v8;
      uint64_t v21 = *(void *)a1;
      long long v22 = *(void **)(*(void *)a1 + 8 * (v30 & v8));
      if (v22) {
        goto LABEL_34;
      }
    }
  }
  *long long v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v18)
  {
    unint64_t v31 = *(void *)(*v18 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v31 >= v9) {
        v31 %= v9;
      }
    }
    else
    {
      v31 &= v9 - 1;
    }
    long long v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v18;
}

void sub_B95628(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_B9563C(void *a1)
{
  *a1 = off_243E358;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)a1[2];
  a1[2] = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_B956A4(void *a1)
{
  *a1 = off_243E358;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)a1[2];
  a1[2] = 0;
  if (v4) {
    operator delete(v4);
  }

  operator delete();
}

void *sub_B9572C(uint64_t a1)
{
  uint64_t v2 = operator new(0x38uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_243E358;
  v2[1] = v3;
  sub_B95194((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_B95784(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B95798(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = off_243E358;
  a2[1] = v2;
  return sub_B95194((uint64_t)(a2 + 2), a1 + 16);
}

void sub_B957C8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

void sub_B95828(void *__p)
{
  uint64_t v2 = (void *)__p[4];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)__p[2];
  __p[2] = 0;
  if (v4) {
    operator delete(v4);
  }

  operator delete(__p);
}

uint64_t sub_B95884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = (void *)(a1 + 16);
  unint64_t v7 = sub_B8CD54((uint64_t)v5, (void *)(a1 + 16), a2 + 124);
  unint64_t v8 = (void *)(*v5 + 4136);
  unint64_t v9 = sub_B6EA30(v8, *(void *)(a2 + 152), *(_DWORD *)(a2 + 172));
  if (HIDWORD(v9)) {
    BOOL v10 = v9 == 0xFFFFFFFFLL;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    goto LABEL_6;
  }
  unint64_t v13 = (int *)sub_B61568(*v8 + 24, v9, 0, "routing direction name");
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 < 5u || (uint64_t v15 = v14[2]) == 0)
  {
    unsigned int v11 = 0;
    goto LABEL_12;
  }
  unsigned int v11 = *(int *)((char *)v13 + v15);
  if (v11 != -1)
  {
LABEL_12:
    int v12 = 0;
    goto LABEL_13;
  }
LABEL_6:
  unsigned int v11 = 0;
  int v12 = 1;
LABEL_13:
  long long v16 = (void *)(*v5 + 4136);
  unint64_t v17 = sub_B6E894(v16, *(void *)(a2 + 152), *(_DWORD *)(a2 + 172));
  if (HIDWORD(v17)) {
    BOOL v18 = v17 == 0xFFFFFFFFLL;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18) {
    goto LABEL_18;
  }
  uint64_t v21 = (int *)sub_B61ADC(*v16 + 24, v17, 0, "routing headsign");
  long long v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 < 5u || (uint64_t v23 = v22[2]) == 0)
  {
    unsigned int v20 = 0;
    unsigned int v19 = 0;
    goto LABEL_24;
  }
  unsigned int v19 = *(int *)((char *)v21 + v23);
  if (v19 == -1)
  {
LABEL_18:
    unsigned int v19 = 0;
    unsigned int v20 = 1;
  }
  else
  {
    unsigned int v20 = 0;
  }
LABEL_24:
  unint64_t v24 = sub_B8CD54((uint64_t)v5, v6, a3 + 124);
  unint64_t v25 = (void *)(*v5 + 4136);
  unint64_t v26 = sub_B6EA30(v25, *(void *)(a3 + 152), *(_DWORD *)(a3 + 172));
  if (!HIDWORD(v26) || v26 == 0xFFFFFFFFLL)
  {
LABEL_30:
    unsigned int v30 = 0;
    char v31 = 1;
    goto LABEL_32;
  }
  unint64_t v27 = (int *)sub_B61568(*v25 + 24, v26, 0, "routing direction name");
  uint8x8_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
  if (*v28 >= 5u)
  {
    uint64_t v29 = v28[2];
    if (v29)
    {
      unsigned int v30 = *(int *)((char *)v27 + v29);
      if (v30 != -1)
      {
        char v31 = 0;
        goto LABEL_32;
      }
      goto LABEL_30;
    }
  }
  char v31 = 0;
  unsigned int v30 = 0;
LABEL_32:
  long long v32 = (void *)(*v5 + 4136);
  unint64_t v33 = sub_B6E894(v32, *(void *)(a3 + 152), *(_DWORD *)(a3 + 172));
  if (!HIDWORD(v33) || v33 == 0xFFFFFFFFLL) {
    goto LABEL_39;
  }
  uint64_t v34 = (int *)sub_B61ADC(*v32 + 24, v33, 0, "routing headsign");
  uint64_t v35 = (unsigned __int16 *)((char *)v34 - *v34);
  if (*v35 < 5u)
  {
    int v37 = 0;
    LODWORD(v36) = 0;
    if (v7 < v24) {
      return 1;
    }
    goto LABEL_42;
  }
  uint64_t v36 = v35[2];
  if (v36 && (LODWORD(v36) = *(int *)((char *)v34 + v36), v36 == -1))
  {
LABEL_39:
    LODWORD(v36) = 0;
    int v37 = 1;
    if (v7 < v24) {
      return 1;
    }
  }
  else
  {
    int v37 = 0;
    if (v7 < v24) {
      return 1;
    }
  }
LABEL_42:
  if (v24 < v7) {
    return 0;
  }
  if (v31)
  {
    if ((v37 | v12 ^ 1)) {
      return 0;
    }
    goto LABEL_54;
  }
  if (v11 < v30) {
    char v39 = 1;
  }
  else {
    char v39 = v12;
  }
  if (v39) {
    return 1;
  }
  if (v30 < v11) {
    LOBYTE(v37) = 1;
  }
  if (v37) {
    return 0;
  }
LABEL_54:
  if (v19 < v36) {
    return 1;
  }
  else {
    return v20;
  }
}

uint64_t sub_B95BA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1_24SpaSched"
                     "uleLookupRequestERKNS2_21schedule_comparator_tEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1"
                                "_24SpaScheduleLookupRequestERKNS2_21schedule_comparator_tEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1_24SpaScheduleLookupRequestERKNS2_21schedule_comparator_tEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1_24SpaScheduleLookupRequestERKNS2_21schedule_comparator_tEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B95C14()
{
}

void *sub_B95C20(void *a1)
{
  *a1 = off_243E3E8;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)a1[2];
  a1[2] = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_B95C88(void *a1)
{
  *a1 = off_243E3E8;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)a1[2];
  a1[2] = 0;
  if (v4) {
    operator delete(v4);
  }

  operator delete();
}

void *sub_B95D10(uint64_t a1)
{
  uint64_t v2 = operator new(0x38uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_243E3E8;
  v2[1] = v3;
  sub_B95194((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_B95D68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B95D7C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = off_243E3E8;
  a2[1] = v2;
  return sub_B95194((uint64_t)(a2 + 2), a1 + 16);
}

void sub_B95DAC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

void sub_B95E0C(void *__p)
{
  uint64_t v2 = (void *)__p[4];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)__p[2];
  __p[2] = 0;
  if (v4) {
    operator delete(v4);
  }

  operator delete(__p);
}

BOOL sub_B95E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int8x8_t v5 = (void *)(a1 + 16);
  unint64_t v6 = sub_B8CD54(v4, (void *)(a1 + 16), a2 + 96);
  return v6 < sub_B8CD54(v4, v5, a3 + 96);
}

uint64_t sub_B95EC4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1_24SpaSched"
                     "uleLookupRequestERKNS2_17cell_comparator_tEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1"
                                "_24SpaScheduleLookupRequestERKNS2_17cell_comparator_tEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1_24SpaScheduleLookupRequestERKNS2_17cell_comparator_tEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1_24SpaScheduleLookupRequestERKNS2_17cell_comparator_tEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B95F34()
{
}

void sub_B95F44()
{
}

__n128 sub_B95F58(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_243E478;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_B95FA4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_243E478;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_B95FD4(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  int8x8_t v5 = *(uint64_t **)(a1 + 16);
  uint64_t v6 = sub_B76884((void *)(*(void *)(a1 + 8) + 48), *a2);
  uint64_t v7 = sub_B76884((void *)(*(void *)(a1 + 8) + 48), *a3);
  uint64_t v8 = *v5;
  unsigned int v9 = *(_DWORD *)(v6 + 172);
  BOOL v10 = (int *)sub_A11094((void *)(*v5 + 4136), *(void *)(v6 + 152));
  unsigned int v11 = (unsigned __int16 *)((char *)v10 - *v10);
  unsigned int v12 = *v11;
  if (v12 < 5)
  {
    unint64_t v13 = 0;
    goto LABEL_6;
  }
  if (!v11[2])
  {
    unint64_t v13 = 0;
    if (v12 >= 9) {
      goto LABEL_70;
    }
LABEL_6:
    uint64_t v14 = 0;
    goto LABEL_7;
  }
  unint64_t v13 = (char *)v10 + v11[2] + *(unsigned int *)((char *)v10 + v11[2]);
  if (v12 < 9) {
    goto LABEL_6;
  }
LABEL_70:
  uint64_t v60 = v11[4];
  if (!v60) {
    goto LABEL_6;
  }
  uint64_t v14 = (unsigned int *)((char *)v10 + v60 + *(unsigned int *)((char *)v10 + v60));
LABEL_7:
  uint64_t v15 = sub_A10764(v14, v9);
  long long v16 = (int *)sub_8DFD1C(*(void *)(v8 + 4056) + 24, *(void *)&v13[8 * *(unsigned __int8 *)(v15 + 14) + 4], 0, "line");
  unint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v17 >= 0x29u)
  {
    uint64_t v18 = v17[20];
    if (v18)
    {
      if (*((unsigned char *)v16 + v18)) {
        goto LABEL_15;
      }
    }
  }
  unsigned int v19 = (void *)(*v5 + 4136);
  unint64_t v20 = sub_B6EA30(v19, *(void *)(v6 + 152), *(_DWORD *)(v6 + 172));
  if (!HIDWORD(v20) || v20 == 0xFFFFFFFFLL) {
    goto LABEL_15;
  }
  unint64_t v24 = (int *)sub_B61568(*v19 + 24, v20, 0, "routing direction name");
  unint64_t v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 >= 5u && (uint64_t v26 = v25[2]) != 0)
  {
    unsigned int v22 = *(int *)((char *)v24 + v26);
    if (v22 == -1)
    {
LABEL_15:
      unsigned int v22 = 0;
      int v23 = 1;
      goto LABEL_22;
    }
  }
  else
  {
    unsigned int v22 = 0;
  }
  int v23 = 0;
LABEL_22:
  uint64_t v27 = *v5;
  unsigned int v28 = *(_DWORD *)(v7 + 172);
  uint64_t v29 = (int *)sub_A11094((void *)(*v5 + 4136), *(void *)(v7 + 152));
  unsigned int v30 = (unsigned __int16 *)((char *)v29 - *v29);
  unsigned int v31 = *v30;
  if (v31 < 5)
  {
    long long v32 = 0;
    goto LABEL_27;
  }
  if (!v30[2])
  {
    long long v32 = 0;
    if (v31 >= 9) {
      goto LABEL_73;
    }
LABEL_27:
    unint64_t v33 = 0;
    goto LABEL_28;
  }
  long long v32 = (char *)v29 + v30[2] + *(unsigned int *)((char *)v29 + v30[2]);
  if (v31 < 9) {
    goto LABEL_27;
  }
LABEL_73:
  uint64_t v61 = v30[4];
  if (!v61) {
    goto LABEL_27;
  }
  unint64_t v33 = (unsigned int *)((char *)v29 + v61 + *(unsigned int *)((char *)v29 + v61));
LABEL_28:
  uint64_t v34 = sub_A10764(v33, v28);
  uint64_t v35 = (int *)sub_8DFD1C(*(void *)(v27 + 4056) + 24, *(void *)&v32[8 * *(unsigned __int8 *)(v34 + 14) + 4], 0, "line");
  uint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35);
  if (*v36 >= 0x29u)
  {
    uint64_t v37 = v36[20];
    if (v37)
    {
      if (*((unsigned char *)v35 + v37)) {
        goto LABEL_36;
      }
    }
  }
  long long v38 = (void *)(*v5 + 4136);
  unint64_t v39 = sub_B6EA30(v38, *(void *)(v7 + 152), *(_DWORD *)(v7 + 172));
  if (!HIDWORD(v39) || v39 == 0xFFFFFFFFLL) {
    goto LABEL_36;
  }
  long long v40 = (int *)sub_B61568(*v38 + 24, v39, 0, "routing direction name");
  uint64_t v41 = (unsigned __int16 *)((char *)v40 - *v40);
  if (*v41 < 5u || (uint64_t v42 = v41[2]) == 0)
  {
    unsigned int v43 = 0;
    goto LABEL_38;
  }
  unsigned int v43 = *(int *)((char *)v40 + v42);
  if (v43 != -1)
  {
LABEL_38:
    char v44 = 0;
    goto LABEL_39;
  }
LABEL_36:
  unsigned int v43 = 0;
  char v44 = 1;
LABEL_39:
  __n128 v45 = (void *)(*v5 + 4136);
  unint64_t v46 = sub_B6E894(v45, *(void *)(v6 + 152), *(_DWORD *)(v6 + 172));
  if (!HIDWORD(v46) || v46 == 0xFFFFFFFFLL)
  {
LABEL_45:
    unsigned int v50 = 0;
    unsigned int v51 = 1;
    goto LABEL_47;
  }
  uint64_t v47 = (int *)sub_B61ADC(*v45 + 24, v46, 0, "routing headsign");
  BOOL v48 = (unsigned __int16 *)((char *)v47 - *v47);
  if (*v48 >= 5u)
  {
    uint64_t v49 = v48[2];
    if (v49)
    {
      unsigned int v50 = *(int *)((char *)v47 + v49);
      if (v50 != -1)
      {
        unsigned int v51 = 0;
        goto LABEL_47;
      }
      goto LABEL_45;
    }
  }
  unsigned int v51 = 0;
  unsigned int v50 = 0;
LABEL_47:
  uint64_t v52 = (void *)(*v5 + 4136);
  unint64_t v53 = sub_B6E894(v52, *(void *)(v7 + 152), *(_DWORD *)(v7 + 172));
  if (!HIDWORD(v53) || v53 == 0xFFFFFFFFLL) {
    goto LABEL_54;
  }
  uint64_t v54 = (int *)sub_B61ADC(*v52 + 24, v53, 0, "routing headsign");
  long long v55 = (unsigned __int16 *)((char *)v54 - *v54);
  if (*v55 < 5u)
  {
    int v57 = 0;
    LODWORD(v56) = 0;
    if ((v44 & 1) == 0) {
      goto LABEL_58;
    }
LABEL_55:
    if (((v57 | v23 ^ 1) & 1) == 0) {
      goto LABEL_66;
    }
    return 0;
  }
  uint64_t v56 = v55[2];
  if (v56)
  {
    LODWORD(v56) = *(int *)((char *)v54 + v56);
    if (v56 == -1)
    {
LABEL_54:
      LODWORD(v56) = 0;
      int v57 = 1;
      if ((v44 & 1) == 0) {
        goto LABEL_58;
      }
      goto LABEL_55;
    }
  }
  int v57 = 0;
  if (v44) {
    goto LABEL_55;
  }
LABEL_58:
  if (v22 < v43) {
    char v59 = 1;
  }
  else {
    char v59 = v23;
  }
  if (v59) {
    return 1;
  }
  if (v43 < v22) {
    LOBYTE(v57) = 1;
  }
  if (v57) {
    return 0;
  }
LABEL_66:
  if (v50 < v56) {
    return 1;
  }
  else {
    return v51;
  }
}

uint64_t sub_B96458(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1_25SpaSched"
                     "uleLookupResponseERKNS2_23cell_entry_comparator_tEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1"
                                "_25SpaScheduleLookupResponseERKNS2_23cell_entry_comparator_tEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1_25SpaScheduleLookupResponseERKNS2_23cell_entry_comparator_tEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1_25SpaScheduleLookupResponseERKNS2_23cell_entry_comparator_tEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B964C8()
{
}

void sub_B964D8()
{
}

__n128 sub_B964EC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_243E508;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_B96538(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_243E508;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_B96568(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  int8x8_t v5 = *(uint64_t **)(a1 + 16);
  uint64_t v6 = sub_B76884((void *)(*(void *)(a1 + 8) + 48), *a2);
  uint64_t v7 = sub_B76884((void *)(*(void *)(a1 + 8) + 48), *a3);
  uint64_t v8 = *v5;
  unsigned int v9 = *(_DWORD *)(v6 + 172);
  BOOL v10 = (int *)sub_A11094((void *)(*v5 + 4136), *(void *)(v6 + 152));
  unsigned int v11 = (unsigned __int16 *)((char *)v10 - *v10);
  unsigned int v12 = *v11;
  if (v12 < 5)
  {
    unint64_t v13 = 0;
    goto LABEL_6;
  }
  if (!v11[2])
  {
    unint64_t v13 = 0;
    if (v12 >= 9) {
      goto LABEL_79;
    }
LABEL_6:
    uint64_t v14 = 0;
    goto LABEL_7;
  }
  unint64_t v13 = (char *)v10 + v11[2] + *(unsigned int *)((char *)v10 + v11[2]);
  if (v12 < 9) {
    goto LABEL_6;
  }
LABEL_79:
  uint64_t v76 = v11[4];
  if (!v76) {
    goto LABEL_6;
  }
  uint64_t v14 = (unsigned int *)((char *)v10 + v76 + *(unsigned int *)((char *)v10 + v76));
LABEL_7:
  uint64_t v15 = sub_A10764(v14, v9);
  long long v16 = (int *)sub_8DFD1C(*(void *)(v8 + 4056) + 24, *(void *)&v13[8 * *(unsigned __int8 *)(v15 + 14) + 4], 0, "line");
  unint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v17 >= 0x29u)
  {
    uint64_t v18 = v17[20];
    if (v18)
    {
      if (*((unsigned char *)v16 + v18)) {
        goto LABEL_15;
      }
    }
  }
  unsigned int v19 = (void *)(*v5 + 4136);
  unint64_t v20 = sub_B6EA30(v19, *(void *)(v6 + 152), *(_DWORD *)(v6 + 172));
  if (!HIDWORD(v20) || v20 == 0xFFFFFFFFLL) {
    goto LABEL_15;
  }
  unint64_t v24 = (int *)sub_B61568(*v19 + 24, v20, 0, "routing direction name");
  unint64_t v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 >= 5u && (uint64_t v26 = v25[2]) != 0)
  {
    unsigned int v22 = *(int *)((char *)v24 + v26);
    if (v22 == -1)
    {
LABEL_15:
      unsigned int v22 = 0;
      int v23 = 1;
      goto LABEL_22;
    }
  }
  else
  {
    unsigned int v22 = 0;
  }
  int v23 = 0;
LABEL_22:
  uint64_t v27 = *v5;
  unsigned int v28 = *(_DWORD *)(v7 + 172);
  uint64_t v29 = (int *)sub_A11094((void *)(*v5 + 4136), *(void *)(v7 + 152));
  unsigned int v30 = (unsigned __int16 *)((char *)v29 - *v29);
  unsigned int v31 = *v30;
  if (v31 < 5)
  {
    long long v32 = 0;
    goto LABEL_27;
  }
  if (!v30[2])
  {
    long long v32 = 0;
    if (v31 >= 9) {
      goto LABEL_82;
    }
LABEL_27:
    unint64_t v33 = 0;
    goto LABEL_28;
  }
  long long v32 = (char *)v29 + v30[2] + *(unsigned int *)((char *)v29 + v30[2]);
  if (v31 < 9) {
    goto LABEL_27;
  }
LABEL_82:
  uint64_t v77 = v30[4];
  if (!v77) {
    goto LABEL_27;
  }
  unint64_t v33 = (unsigned int *)((char *)v29 + v77 + *(unsigned int *)((char *)v29 + v77));
LABEL_28:
  uint64_t v34 = sub_A10764(v33, v28);
  uint64_t v35 = (int *)sub_8DFD1C(*(void *)(v27 + 4056) + 24, *(void *)&v32[8 * *(unsigned __int8 *)(v34 + 14) + 4], 0, "line");
  uint64_t v36 = (unsigned __int16 *)((char *)v35 - *v35);
  unsigned int v81 = v22;
  if (*v36 >= 0x29u)
  {
    uint64_t v37 = v36[20];
    if (v37)
    {
      if (*((unsigned char *)v35 + v37)) {
        goto LABEL_36;
      }
    }
  }
  long long v38 = (void *)(*v5 + 4136);
  unint64_t v39 = sub_B6EA30(v38, *(void *)(v7 + 152), *(_DWORD *)(v7 + 172));
  if (!HIDWORD(v39) || v39 == 0xFFFFFFFFLL) {
    goto LABEL_36;
  }
  long long v40 = (int *)sub_B61568(*v38 + 24, v39, 0, "routing direction name");
  uint64_t v41 = (unsigned __int16 *)((char *)v40 - *v40);
  if (*v41 >= 5u && (uint64_t v42 = v41[2]) != 0)
  {
    unsigned int v43 = *(int *)((char *)v40 + v42);
    if (v43 == -1)
    {
LABEL_36:
      unsigned int v43 = 0;
      char v44 = 1;
      goto LABEL_39;
    }
  }
  else
  {
    unsigned int v43 = 0;
  }
  char v44 = 0;
LABEL_39:
  unsigned int v45 = *(_DWORD *)(v6 + 172);
  unint64_t v46 = (int *)sub_A11094((void *)(*v5 + 4136), *(void *)(v6 + 152));
  uint64_t v47 = (unsigned __int16 *)((char *)v46 - *v46);
  unsigned int v48 = *v47;
  if (v48 < 5)
  {
    uint64_t v49 = 0;
    goto LABEL_44;
  }
  if (v47[2])
  {
    uint64_t v49 = (char *)v46 + v47[2] + *(unsigned int *)((char *)v46 + v47[2]);
    if (v48 < 9) {
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v49 = 0;
    if (v48 < 9) {
      goto LABEL_44;
    }
  }
  uint64_t v78 = v47[4];
  if (v78)
  {
    unsigned int v50 = (unsigned int *)((char *)v46 + v78 + *(unsigned int *)((char *)v46 + v78));
    goto LABEL_45;
  }
LABEL_44:
  unsigned int v50 = 0;
LABEL_45:
  uint64_t v51 = *(void *)&v49[8 * *(unsigned __int8 *)(sub_A10764(v50, v45) + 14) + 4];
  uint64_t v52 = (void *)(*v5 + 4136);
  unint64_t v53 = sub_B6E894(v52, *(void *)(v6 + 152), *(_DWORD *)(v6 + 172));
  if (!HIDWORD(v53) || v53 == 0xFFFFFFFFLL)
  {
LABEL_51:
    unsigned int v57 = 0;
    unsigned int v58 = 1;
    goto LABEL_53;
  }
  uint64_t v54 = (int *)sub_B61ADC(*v52 + 24, v53, 0, "routing headsign");
  long long v55 = (unsigned __int16 *)((char *)v54 - *v54);
  if (*v55 >= 5u)
  {
    uint64_t v56 = v55[2];
    if (v56)
    {
      unsigned int v57 = *(int *)((char *)v54 + v56);
      if (v57 != -1)
      {
        unsigned int v58 = 0;
        goto LABEL_53;
      }
      goto LABEL_51;
    }
  }
  unsigned int v58 = 0;
  unsigned int v57 = 0;
LABEL_53:
  unsigned int v59 = *(_DWORD *)(v7 + 172);
  uint64_t v60 = (int *)sub_A11094((void *)(*v5 + 4136), *(void *)(v7 + 152));
  uint64_t v61 = (unsigned __int16 *)((char *)v60 - *v60);
  unsigned int v62 = *v61;
  if (v62 < 5)
  {
    char v63 = 0;
    goto LABEL_58;
  }
  if (v61[2])
  {
    char v63 = (char *)v60 + v61[2] + *(unsigned int *)((char *)v60 + v61[2]);
    if (v62 < 9) {
      goto LABEL_58;
    }
  }
  else
  {
    char v63 = 0;
    if (v62 < 9) {
      goto LABEL_58;
    }
  }
  uint64_t v79 = v61[4];
  if (v79)
  {
    uint64_t v64 = (unsigned int *)((char *)v60 + v79 + *(unsigned int *)((char *)v60 + v79));
    goto LABEL_59;
  }
LABEL_58:
  uint64_t v64 = 0;
LABEL_59:
  unint64_t v65 = __ROR8__(v51, 32);
  unint64_t v66 = __ROR8__(*(void *)&v63[8 * *(unsigned __int8 *)(sub_A10764(v64, v59) + 14) + 4], 32);
  size_t v67 = (void *)(*v5 + 4136);
  unint64_t v68 = sub_B6E894(v67, *(void *)(v7 + 152), *(_DWORD *)(v7 + 172));
  if (!HIDWORD(v68) || v68 == 0xFFFFFFFFLL) {
    goto LABEL_66;
  }
  uint64_t v69 = (int *)sub_B61ADC(*v67 + 24, v68, 0, "routing headsign");
  uint64_t v70 = (unsigned __int16 *)((char *)v69 - *v69);
  if (*v70 >= 5u)
  {
    uint64_t v71 = v70[2];
    if (!v71 || (LODWORD(v71) = *(int *)((char *)v69 + v71), v71 != -1))
    {
      int v72 = 0;
      unint64_t v73 = HIDWORD(v65);
      unint64_t v74 = HIDWORD(v66);
      if (HIDWORD(v65) >= HIDWORD(v66)) {
        goto LABEL_69;
      }
      return 1;
    }
LABEL_66:
    LODWORD(v71) = 0;
    int v72 = 1;
    unint64_t v73 = HIDWORD(v65);
    unint64_t v74 = HIDWORD(v66);
    if (HIDWORD(v65) >= HIDWORD(v66)) {
      goto LABEL_69;
    }
    return 1;
  }
  int v72 = 0;
  LODWORD(v71) = 0;
  unint64_t v73 = HIDWORD(v65);
  unint64_t v74 = HIDWORD(v66);
  if (HIDWORD(v65) < HIDWORD(v66)) {
    return 1;
  }
LABEL_69:
  if (v73 <= v74 && v65 < v66) {
    return 1;
  }
  uint64_t result = 0;
  if (v74 >= v73 && v66 >= v65)
  {
    if (v44)
    {
      if ((v72 | v23 ^ 1)) {
        return 0;
      }
    }
    else
    {
      if (v81 < v43) {
        char v80 = 1;
      }
      else {
        char v80 = v23;
      }
      if (v80) {
        return 1;
      }
      if (v43 < v81) {
        LOBYTE(v72) = 1;
      }
      if (v72) {
        return 0;
      }
    }
    if (v57 < v71) {
      return 1;
    }
    else {
      return v58;
    }
  }
  return result;
}

uint64_t sub_B96B6C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1_25SpaSched"
                     "uleLookupResponseERKNS2_23cell_entry_comparator_tEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1"
                                "_25SpaScheduleLookupResponseERKNS2_23cell_entry_comparator_tEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1_25SpaScheduleLookupResponseERKNS2_23cell_entry_comparator_tEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1_25SpaScheduleLookupResponseERKNS2_23cell_entry_comparator_tEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B96BDC()
{
}

void sub_B96BEC()
{
}

void *sub_B96C00()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_243E588;
  return result;
}

void sub_B96C38(uint64_t a1, void *a2)
{
  *a2 = off_243E588;
}

BOOL sub_B96C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + 8) > *(double *)(a3 + 8);
}

uint64_t sub_B96C74(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1_25SpaSched"
                     "uleLookupResponseERKNS1_16SpaScheduleGroupERKNS2_24group_entry_comparator_tEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1"
                                "_25SpaScheduleLookupResponseERKNS1_16SpaScheduleGroupERKNS2_24group_entry_comparator_tEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1_25SpaScheduleLookupResponseERKNS1_16SpaScheduleGroupERKNS2_24group_entry_comparator_tEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1_25SpaScheduleLookupResponseERKNS1_16SpaScheduleGroupERKNS2_24group_entry_comparator_tEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B96CE4()
{
}

void *sub_B96CF0(void *a1)
{
  *a1 = off_243E618;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_B96D58(void *a1)
{
  *a1 = off_243E618;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4) {
    operator delete(v4);
  }

  operator delete();
}

char *sub_B96DE0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = off_243E618;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  sub_B95194((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_B96E40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B96E54(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_243E618;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return sub_B95194(a2 + 24, a1 + 24);
}

void sub_B96E88(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

void sub_B96EE8(void *__p)
{
  uint64_t v2 = (void *)__p[5];
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)__p[3];
  __p[3] = 0;
  if (v4) {
    operator delete(v4);
  }

  operator delete(__p);
}

BOOL sub_B96F44(void *a1, double *a2, double *a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = sub_A173AC((void *)(a1[2] + 24), *(unsigned int *)a2) + 96;
  uint64_t v8 = sub_A173AC((void *)(a1[2] + 24), *(unsigned int *)a3) + 96;
  unsigned int v9 = a1 + 3;
  unint64_t v10 = sub_B8CD54(v6, a1 + 3, v7);
  double v11 = a2[1];
  unint64_t v12 = sub_B8CD54(v6, v9, v8);
  if (v10 < v12) {
    return 1;
  }
  return v11 > a3[1] && v12 >= v10;
}

uint64_t sub_B97000(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1_25SpaSched"
                     "uleLookupResponseERKNS1_16SpaScheduleGroupERKNS2_24group_entry_comparator_tEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1"
                                "_25SpaScheduleLookupResponseERKNS1_16SpaScheduleGroupERKNS2_24group_entry_comparator_tEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1_25SpaScheduleLookupResponseERKNS1_16SpaScheduleGroupERKNS2_24group_entry_comparator_tEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS1_25SpaScheduleLookupResponseERKNS1_16SpaScheduleGroupERKNS2_24group_entry_comparator_tEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B97070()
{
}

void sub_B97080()
{
}

void *sub_B97094()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_243E698;
  return result;
}

void sub_B970CC(uint64_t a1, void *a2)
{
  *a2 = off_243E698;
}

BOOL sub_B970F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + 72) > *(double *)(a3 + 72);
}

uint64_t sub_B97108(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS2_18group_co"
                     "mparator_tEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS2"
                                "_18group_comparator_tEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS2_18group_comparator_tEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS2_18group_comparator_tEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B97178()
{
}

void sub_B97188()
{
}

void *sub_B9719C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_243E728;
  return result;
}

void sub_B971D4(uint64_t a1, void *a2)
{
  *a2 = off_243E728;
}

BOOL sub_B971FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + 72) > *(double *)(a3 + 72);
}

uint64_t sub_B97210(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS2_21category"
                     "_comparator_tEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS2"
                                "_21category_comparator_tEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS2_21category_comparator_tEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS2_21category_comparator_tEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B97280()
{
}

void sub_B97290()
{
}

void *sub_B972A4()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_243E7B8;
  return result;
}

void sub_B972DC(uint64_t a1, void *a2)
{
  *a2 = off_243E7B8;
}

BOOL sub_B97304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 104)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(unsigned char *)(a3 + 104) == 0;
  }
  return !v3;
}

uint64_t sub_B9731C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS2_21category"
                     "_comparator_tEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS2"
                                "_21category_comparator_tEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS2_21category_comparator_tEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl7routing16journey_planning22ScheduleStableOrdering23get_comparator_functionERKNS2_21category_comparator_tEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_B9738C()
{
}

void sub_B97398(uint64_t a1@<X0>, int **a2@<X1>, int **a3@<X2>, unint64_t *a4@<X8>)
{
  switch(*(_DWORD *)(a1 + 12))
  {
    case 0:
      sub_B9979C(a2, a3, (*(_DWORD *)(a1 + 4) - 1), a4, *(double *)(a1 + 16));
      break;
    case 1:
      sub_B99E50(a2, a3, (*(_DWORD *)(a1 + 4) - 1), a4, *(double *)(a1 + 16));
      break;
    case 2:
      sub_B9A63C(a2, a3, (*(_DWORD *)(a1 + 4) - 1), a4, *(double *)(a1 + 16));
      break;
    case 3:
      sub_B9ACBC((unint64_t *)a2, a3, (*(_DWORD *)(a1 + 4) - 1), a4, *(double *)(a1 + 16));
      break;
    default:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      break;
  }
}

char *sub_B97450(char **a1, long long *a2)
{
  int8x8_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unsigned int v9 = *a1;
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (void)v9) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 > 0x666666666666666) {
        sub_188D718();
      }
      uint64_t v14 = (char *)operator new(40 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[40 * v10];
    long long v16 = a2[1];
    *(_OWORD *)uint64_t v15 = *a2;
    *((_OWORD *)v15 + 1) = v16;
    *((void *)v15 + 4) = *((void *)a2 + 4);
    uint64_t v8 = v15 + 40;
    if (v5 != v9)
    {
      do
      {
        long long v17 = *(_OWORD *)(v5 - 40);
        long long v18 = *(_OWORD *)(v5 - 24);
        *(v15 - 8) = *(v5 - 8);
        *(_OWORD *)(v15 - 24) = v18;
        *(_OWORD *)(v15 - 40) = v17;
        v15 -= 40;
        v5 -= 40;
      }
      while (v5 != v9);
      int8x8_t v5 = *a1;
    }
    *a1 = v15;
    a1[1] = v8;
    a1[2] = &v14[40 * v13];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    *((void *)v5 + 4) = *((void *)a2 + 4);
    *(_OWORD *)int8x8_t v5 = v6;
    *((_OWORD *)v5 + 1) = v7;
    uint64_t v8 = v5 + 40;
  }
  a1[1] = v8;
  return v8 - 40;
}

int *sub_B9759C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v6 = 0x8000000080000000;
  *((void *)&v6 + 1) = 0x8000000080000000;
  *(_OWORD *)a3 = v6;
  *(_DWORD *)(a3 + 16) = 0x7FFFFFFF;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = 0;
  unint64_t v7 = *(void *)(a2 + 28);
  unsigned int v8 = *(_DWORD *)(a2 + 36);
  int v9 = *(_DWORD *)(a2 + 48);
  unint64_t v10 = sub_A10650((void *)(*(void *)(a1 + 48) + 4136), v7);
  unint64_t v11 = (int *)v10;
  uint64_t v12 = 0;
  unint64_t v13 = &v10[-*(int *)v10];
  if (*(unsigned __int16 *)v13 >= 5u)
  {
    uint64_t v12 = *((unsigned __int16 *)v13 + 2);
    if (*((_WORD *)v13 + 2)) {
      v12 += (uint64_t)&v10[*(unsigned int *)&v10[v12]];
    }
  }
  uint64_t v14 = (int *)(v12 + 4 * v7 + 4 + *(unsigned int *)(v12 + 4 * v7 + 4));
  uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 7u && (uint64_t v16 = v15[3]) != 0) {
    long long v17 = (unsigned int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
  }
  else {
    long long v17 = 0;
  }
  uint64_t v18 = sub_A1FDE4(v17, v8);
  unsigned int v19 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v19 < 7u)
  {
    unint64_t v20 = 0;
  }
  else
  {
    unint64_t v20 = (unsigned int *)v19[3];
    if (v20) {
      unint64_t v20 = (unsigned int *)((char *)v20 + (void)v11 + *(unsigned int *)((char *)v20 + (void)v11));
    }
  }
  int v21 = *(_DWORD *)(sub_A200AC(v20, *(_DWORD *)(v18 + 4) + v9) + 4);
  *(_DWORD *)a3 = sub_A1FCE8((void *)(*(void *)(a1 + 48) + 4136), *(void *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40))+ v21;
  *(_DWORD *)(a3 + 4) = sub_A1FBEC((void *)(*(void *)(a1 + 48) + 4136), *(void *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40))+ v21;
  unsigned int v22 = (void *)(*(void *)(a1 + 48) + 4136);
  unint64_t v23 = *(void *)(a2 + 28);
  unsigned int v24 = *(_DWORD *)(a2 + 36);
  int v25 = *(_DWORD *)(a2 + 40);
  uint64_t v26 = sub_A10650(v22, v23);
  uint64_t v27 = (int *)v26;
  unsigned int v28 = &v26[-*(int *)v26];
  if (*(unsigned __int16 *)v28 < 5u)
  {
    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v29 = *((unsigned __int16 *)v28 + 2);
    if (v29) {
      v29 += (uint64_t)&v26[*(unsigned int *)&v26[v29]];
    }
  }
  unsigned int v30 = (int *)(v29 + 4 * v23 + 4 + *(unsigned int *)(v29 + 4 * v23 + 4));
  unsigned int v31 = (unsigned __int16 *)((char *)v30 - *v30);
  if (*v31 >= 7u && (uint64_t v32 = v31[3]) != 0) {
    unint64_t v33 = (unsigned int *)((char *)v30 + v32 + *(unsigned int *)((char *)v30 + v32));
  }
  else {
    unint64_t v33 = 0;
  }
  uint64_t v34 = sub_A1FDE4(v33, v24);
  uint64_t v35 = (unsigned __int16 *)((char *)v27 - *v27);
  if (*v35 < 9u)
  {
    uint64_t v36 = 0;
  }
  else
  {
    uint64_t v36 = (unsigned int *)v35[4];
    if (v36) {
      uint64_t v36 = (unsigned int *)((char *)v36 + (void)v27 + *(unsigned int *)((char *)v36 + (void)v27));
    }
  }
  uint64_t result = (int *)sub_A1FF48(v36, v25 + (*(_DWORD *)(v34 + 8) >> 8));
  int v38 = *result;
  int v39 = 10 * *result;
  *(_DWORD *)(a3 + 12) = v39;
  *(_DWORD *)(a3 + 16) = v39;
  *(_DWORD *)(a3 + 8) = v39;
  if (v38) {
    unint64_t v40 = (unint64_t)((double)(10 * (*(_DWORD *)(a3 + 4) - *(_DWORD *)a3)) / (double)v39);
  }
  else {
    unint64_t v40 = 0;
  }
  *(void *)(a3 + 24) = v40;
  *(unsigned char *)(a3 + 32) = 0;
  return result;
}

int *sub_B97828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v6 = 0x8000000080000000;
  *((void *)&v6 + 1) = 0x8000000080000000;
  *(_OWORD *)a3 = v6;
  *(_DWORD *)(a3 + 16) = 0x7FFFFFFF;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = 0;
  unint64_t v7 = *(void *)(a2 + 32);
  unsigned int v8 = *(_DWORD *)(a2 + 40);
  int v9 = *(_DWORD *)(a2 + 52);
  unint64_t v10 = sub_A10650((void *)(*(void *)(a1 + 48) + 4136), v7);
  unint64_t v11 = (int *)v10;
  uint64_t v12 = 0;
  unint64_t v13 = &v10[-*(int *)v10];
  if (*(unsigned __int16 *)v13 >= 5u)
  {
    uint64_t v12 = *((unsigned __int16 *)v13 + 2);
    if (*((_WORD *)v13 + 2)) {
      v12 += (uint64_t)&v10[*(unsigned int *)&v10[v12]];
    }
  }
  uint64_t v14 = (int *)(v12 + 4 * v7 + 4 + *(unsigned int *)(v12 + 4 * v7 + 4));
  uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 7u && (uint64_t v16 = v15[3]) != 0) {
    long long v17 = (unsigned int *)((char *)v14 + v16 + *(unsigned int *)((char *)v14 + v16));
  }
  else {
    long long v17 = 0;
  }
  uint64_t v18 = sub_A1FDE4(v17, v8);
  unsigned int v19 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v19 < 7u)
  {
    unint64_t v20 = 0;
  }
  else
  {
    unint64_t v20 = (unsigned int *)v19[3];
    if (v20) {
      unint64_t v20 = (unsigned int *)((char *)v20 + (void)v11 + *(unsigned int *)((char *)v20 + (void)v11));
    }
  }
  int v21 = *(_DWORD *)(sub_A200AC(v20, *(_DWORD *)(v18 + 4) + v9) + 4);
  *(_DWORD *)a3 = sub_A1FCE8((void *)(*(void *)(a1 + 48) + 4136), *(void *)(a2 + 32), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 44))+ v21;
  *(_DWORD *)(a3 + 4) = sub_A1FBEC((void *)(*(void *)(a1 + 48) + 4136), *(void *)(a2 + 32), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 44))+ v21;
  unsigned int v22 = (void *)(*(void *)(a1 + 48) + 4136);
  unint64_t v23 = *(void *)(a2 + 32);
  unsigned int v24 = *(_DWORD *)(a2 + 40);
  int v25 = *(_DWORD *)(a2 + 44);
  uint64_t v26 = sub_A10650(v22, v23);
  uint64_t v27 = (int *)v26;
  unsigned int v28 = &v26[-*(int *)v26];
  if (*(unsigned __int16 *)v28 < 5u)
  {
    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v29 = *((unsigned __int16 *)v28 + 2);
    if (v29) {
      v29 += (uint64_t)&v26[*(unsigned int *)&v26[v29]];
    }
  }
  unsigned int v30 = (int *)(v29 + 4 * v23 + 4 + *(unsigned int *)(v29 + 4 * v23 + 4));
  unsigned int v31 = (unsigned __int16 *)((char *)v30 - *v30);
  if (*v31 >= 7u && (uint64_t v32 = v31[3]) != 0) {
    unint64_t v33 = (unsigned int *)((char *)v30 + v32 + *(unsigned int *)((char *)v30 + v32));
  }
  else {
    unint64_t v33 = 0;
  }
  uint64_t v34 = sub_A1FDE4(v33, v24);
  uint64_t v35 = (unsigned __int16 *)((char *)v27 - *v27);
  if (*v35 < 9u)
  {
    uint64_t v36 = 0;
  }
  else
  {
    uint64_t v36 = (unsigned int *)v35[4];
    if (v36) {
      uint64_t v36 = (unsigned int *)((char *)v36 + (void)v27 + *(unsigned int *)((char *)v36 + (void)v27));
    }
  }
  uint64_t result = (int *)sub_A1FF48(v36, v25 + (*(_DWORD *)(v34 + 8) >> 8));
  int v38 = *result;
  int v39 = 10 * *result;
  *(_DWORD *)(a3 + 12) = v39;
  *(_DWORD *)(a3 + 16) = v39;
  *(_DWORD *)(a3 + 8) = v39;
  if (v38) {
    unint64_t v40 = (unint64_t)((double)(10 * (*(_DWORD *)(a3 + 4) - *(_DWORD *)a3)) / (double)v39);
  }
  else {
    unint64_t v40 = 0;
  }
  *(void *)(a3 + 24) = v40;
  *(unsigned char *)(a3 + 32) = 0;
  return result;
}

uint64_t sub_B97AB4(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "remove_duplicate_departures");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "min_num_departures");
  int v5 = sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 4) = v5;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "max_headway_minutes");
  *(_DWORD *)(a1 + 8) = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "penalty_factor");
  double v6 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 16) = v6;
  __p[0] = operator new(0x38uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A10;
  strcpy((char *)__p[0], "max_num_departures_in_places_frequency_calculator");
  unint64_t v7 = sub_5C9BC(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 24) = v7;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A80;
  strcpy((char *)__p[0], "enable_fallback_in_places_frequency_calculator");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 32) = v8;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "enable_fallback_to_mean_for_min_max");
  BOOL v9 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 33) = v9;
  HIBYTE(v30[2]) = 20;
  strcpy((char *)v30, "headway_distribution");
  uint64_t v10 = sub_561B0(a2, (uint64_t)v30);
  if ((*(char *)(v10 + 23) & 0x80000000) == 0)
  {
    uint64_t v11 = v10;
    switch(*(unsigned char *)(v10 + 23))
    {
      case 9:
        goto LABEL_24;
      case 0xB:
        if (*(void *)v10 != 0x6D5F6C616D726F6ELL || *(void *)(v10 + 3) != 0x6E61656D5F6C616DLL) {
          goto LABEL_64;
        }
        goto LABEL_62;
      case 0xF:
        if (*(void *)v10 != 0x6D5F6C616D726F6ELL || *(void *)(v10 + 7) != 0x7261765F6E61656DLL) {
          goto LABEL_64;
        }
        goto LABEL_46;
      case 0x10:
        if (*(void *)v10 != 0x746E656E6F707865 || *(void *)(v10 + 8) != 0x657461725F6C6169) {
          goto LABEL_64;
        }
        goto LABEL_53;
      default:
        goto LABEL_64;
    }
  }
  switch(*(void *)(v10 + 8))
  {
    case 9:
      uint64_t v11 = *(void *)v10;
LABEL_24:
      uint64_t v13 = *(void *)v11;
      int v14 = *(unsigned __int8 *)(v11 + 8);
      if (v13 != 0x6163697269706D65 || v14 != 108) {
        goto LABEL_64;
      }
      *(_DWORD *)(a1 + 12) = 3;
      if (SHIBYTE(v30[2]) < 0) {
        goto LABEL_54;
      }
      goto LABEL_55;
    case 0xBLL:
      if (**(void **)v10 != 0x6D5F6C616D726F6ELL || *(void *)(*(void *)v10 + 3) != 0x6E61656D5F6C616DLL) {
        goto LABEL_64;
      }
LABEL_62:
      *(_DWORD *)(a1 + 12) = 0;
      if (SHIBYTE(v30[2]) < 0) {
        goto LABEL_54;
      }
      goto LABEL_55;
    case 0xFLL:
      if (**(void **)v10 != 0x6D5F6C616D726F6ELL || *(void *)(*(void *)v10 + 7) != 0x7261765F6E61656DLL) {
        goto LABEL_64;
      }
LABEL_46:
      *(_DWORD *)(a1 + 12) = 1;
      if (SHIBYTE(v30[2]) < 0) {
        goto LABEL_54;
      }
      goto LABEL_55;
    case 0x10:
      if (**(void **)v10 != 0x746E656E6F707865 || *(void *)(*(void *)v10 + 8) != 0x657461725F6C6169) {
        goto LABEL_64;
      }
LABEL_53:
      *(_DWORD *)(a1 + 12) = 2;
      if (SHIBYTE(v30[2]) < 0) {
LABEL_54:
      }
        operator delete(v30[0]);
LABEL_55:
      if (*(_DWORD *)(a1 + 4) <= 1u)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        std::to_string(&v31, *(_DWORD *)(a1 + 4));
        uint64_t v27 = std::string::insert(&v31, 0, "Illegal value supplied for min_num_departures property: ");
        long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        __p[2] = (void *)v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        uint64_t v29 = (void *)sub_2F404((uint64_t)exception, (long long *)__p);
      }
      return a1;
    default:
LABEL_64:
      unsigned int v22 = __cxa_allocate_exception(0x40uLL);
      std::operator+<char>();
      unint64_t v23 = std::string::append(&v31, " given in configuration");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      __p[2] = (void *)v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      int v25 = (void *)sub_2F404((uint64_t)v22, (long long *)__p);
  }
}

void sub_B98098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B981F4(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "scheduled_properties");
  BOOL v4 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_B97AB4(a1, v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  strcpy((char *)v10, "unscheduled_properties");
  HIBYTE(v10[2]) = 22;
  int v5 = (void *)sub_560F4(a2, (uint64_t)v10);
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20E1380;
  strcpy((char *)__p[0], "enable_fallback_for_journey_legs_and_bundles");
  BOOL v6 = sub_29D62C(v5, (uint64_t)__p);
  BOOL v7 = v6;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    *(unsigned char *)(a1 + 40) = v7;
    if ((SHIBYTE(v10[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 40) = v6;
    if ((SHIBYTE(v10[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  operator delete(v10[0]);
LABEL_5:
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93E0;
  strcpy((char *)__p[0], "treat_unscheduled_alternatives_as_scheduled");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 41) = v8;
  return a1;
}

void sub_B9837C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B983C8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = sub_B981F4(a1, a3);
  *(void *)(result + 48) = a2;
  return result;
}

void sub_B983F4(unsigned char *a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  for (uint64_t i = *(void **)(a2 + 16); v2 != i; v2 += 37)
    sub_B98440(a1, v2);
}

void sub_B98440(unsigned char *a1, void *a2)
{
  BOOL v4 = (uint64_t *)a2[25];
  int v5 = (uint64_t *)a2[26];
  if (v4 == v5) {
    return;
  }
  if ((char *)v5 - (char *)v4 == 72 && *((unsigned char *)v4 + 24) == 1)
  {
    uint64_t v6 = *v4;
    int v7 = *(_DWORD *)(v6 + 160);
    uint64_t v8 = *(unsigned int *)(v6 + 4);
LABEL_11:
    unint64_t v12 = *(void *)(v6 + 8);
    unint64_t v13 = v8 | (v8 << 32);
    if (v7) {
      unint64_t v12 = v13;
    }
    goto LABEL_13;
  }
  uint64_t v6 = *v4;
  int v7 = *(_DWORD *)(v6 + 160);
  int v9 = *(_DWORD *)(v6 + 20);
  uint64_t v8 = *(unsigned int *)(v6 + 4);
  int v10 = *(_DWORD *)(v6 + 8);
  if (v7)
  {
    int v9 = *(_DWORD *)(v6 + 8);
    int v10 = *(_DWORD *)(v6 + 4);
  }
  if (v9 != v10) {
    goto LABEL_11;
  }
  uint64_t v11 = sub_A0D24C(a2 + 25, 1uLL);
  unint64_t v12 = *(unsigned int *)(*(void *)v11 + 4) | ((unint64_t)*(unsigned int *)(*(void *)v11 + 4) << 32);
  if (!*(_DWORD *)(*(void *)v11 + 160)) {
    unint64_t v12 = *(void *)(*(void *)v11 + 8);
  }
LABEL_13:
  if ((v12 & 0xFFFFFFFF00000000) >> 32 == 0x7FFFFFFF) {
    int v14 = v12;
  }
  else {
    int v14 = (v12 & 0xFFFFFFFF00000000) >> 32;
  }
  if (v14 != 0x7FFFFFFF)
  {
    uint64_t v16 = (_DWORD *)a2[28];
    uint64_t v15 = (_DWORD *)a2[29];
    if (v16 != v15)
    {
      while (1)
      {
        int v17 = *v16;
        if (v16[1] != 0x7FFFFFFF) {
          int v17 = v16[1];
        }
        if (v17 >= v14) {
          break;
        }
        v16 += 4;
        if (v16 == v15)
        {
          uint64_t v16 = (_DWORD *)a2[29];
          break;
        }
      }
    }
    int v21 = (int *)a2[29];
    unsigned int v22 = v16;
    sub_B985D8((uint64_t)a1, (uint64_t *)&v22, &v21, (uint64_t)&v23);
    uint64_t v18 = (void *)a2[31];
    if (v18)
    {
      a2[32] = v18;
      operator delete(v18);
    }
    *(_OWORD *)(a2 + 31) = v23;
    a2[33] = v24;
    uint64_t v20 = a2[25];
    for (uint64_t i = a2[26]; v20 != i; v20 += 72)
      sub_B989AC(a1, v20);
  }
}

void sub_B985D8(uint64_t a1@<X0>, uint64_t *a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_B9C4EC(a2, a3, &v33);
  int v7 = (char *)v33;
  uint64_t v8 = v34;
  uint64_t v32 = (char *)v33;
  if (v33 != v34)
  {
    do
    {
      while (1)
      {
        int v9 = *(_DWORD *)(a1 + 8);
        int v10 = v9 / 10;
        int v11 = v9 % 10;
        char v12 = v9 < 0 ? -5 : 5;
        signed int v13 = v10 + (((103 * (char)(v12 + v11)) >> 15) & 1) + ((103 * (char)(v12 + v11)) >> 10);
        if (*(_DWORD *)v7 <= v13) {
          break;
        }
        v7 += 4;
        uint64_t v32 = v7;
        if (v7 == v8) {
          goto LABEL_21;
        }
      }
      while (v13 >= *(_DWORD *)v7)
      {
        v7 += 4;
        if (v7 == v8)
        {
          int v7 = v8;
          break;
        }
      }
      std::string v31 = v7;
      sub_B97398(a1, (int **)&v32, (int **)&v31, (unint64_t *)&__p);
      int64_t v14 = (v32 - (unsigned char *)v33) >> 2;
      int64_t v15 = (v31 - (unsigned char *)v33) >> 2;
      if (__p == v30)
      {
        int v21 = (char *)(*a2 + 16 * v14);
        uint64_t v35 = (char *)(*a2 + 16 * v15 + 16);
        uint64_t v36 = v21;
        sub_B9C63C(a1, &v36, &v35, (uint64_t)v37);
        sub_B97450((char **)a4, v37);
      }
      else
      {
        uint64_t v36 = (char *)(*a2 + 16 * v14);
        uint64_t v35 = &v36[16 * *(void *)__p + 32];
        sub_B9C63C(a1, &v36, &v35, (uint64_t)v37);
        sub_B97450((char **)a4, v37);
        uint64_t v16 = v30;
        if (__p != v30)
        {
          int v17 = (char *)__p + 8;
          if ((char *)__p + 8 != v30)
          {
            do
            {
              uint64_t v18 = *a2 + 16 * v14;
              unsigned int v19 = (char *)(v18 + 16 * *(v17 - 1) + 16);
              uint64_t v35 = (char *)(v18 + 16 * *v17 + 32);
              uint64_t v36 = v19;
              sub_B9C63C(a1, &v36, &v35, (uint64_t)v37);
              sub_B97450((char **)a4, v37);
              ++v17;
            }
            while (v17 != v16);
            uint64_t v16 = v30;
          }
        }
        uint64_t v20 = (char *)(*a2 + 16 * v14 + 16 * *(v16 - 1) + 16);
        uint64_t v35 = (char *)(*a2 + 16 * v15 + 16);
        uint64_t v36 = v20;
        sub_B9C63C(a1, &v36, &v35, (uint64_t)v37);
        sub_B97450((char **)a4, v37);
      }
      int v7 = v31;
      uint64_t v32 = v31;
      if (__p)
      {
        unsigned int v30 = (char *)__p;
        operator delete(__p);
        int v7 = v32;
      }
      uint64_t v8 = v34;
    }
    while (v7 != v34);
LABEL_21:
    long long v23 = *(char **)a4;
    unsigned int v22 = *(char **)(a4 + 8);
    if (*(char **)a4 != v22)
    {
      while (1)
      {
        BOOL v24 = *(_DWORD *)v23 == 0x7FFFFFFF || *((_DWORD *)v23 + 1) == 0x7FFFFFFF;
        if (v24 || !*((_DWORD *)v23 + 3)) {
          break;
        }
        v23 += 40;
        if (v23 == v22) {
          goto LABEL_41;
        }
      }
      if (v23 != v22)
      {
        for (uint64_t i = v23 + 40; i != v22; i += 40)
        {
          BOOL v26 = *(_DWORD *)i == 0x7FFFFFFF || *((_DWORD *)i + 1) == 0x7FFFFFFF;
          if (!v26 && *((_DWORD *)i + 3))
          {
            long long v27 = *(_OWORD *)i;
            long long v28 = *((_OWORD *)i + 1);
            v23[32] = i[32];
            *(_OWORD *)long long v23 = v27;
            *((_OWORD *)v23 + 1) = v28;
            v23 += 40;
          }
        }
      }
      if (v23 != v22) {
        *(void *)(a4 + 8) = v23;
      }
    }
  }
LABEL_41:
  if (v33)
  {
    uint64_t v34 = (char *)v33;
    operator delete(v33);
  }
}

void sub_B9892C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  uint64_t v18 = *(void **)v16;
  if (!*(void *)v16) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v16 + 8) = v18;
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_B989AC(unsigned char *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24)) {
    return;
  }
  uint64_t v2 = *(void *)a2;
  uint64_t v39 = *(void *)(a2 + 8);
  if (*(void *)a2 == v39) {
    return;
  }
  unint64_t v3 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v4 = *(void *)a2;
  unsigned int v43 = 0;
  while (2)
  {
    uint64_t v6 = *(void *)(v4 + 64);
    uint64_t v5 = *(void *)(v4 + 72);
    uint64_t v40 = v4;
    while (v6 != v5)
    {
      int v8 = *(_DWORD *)(v2 + 8);
      int v9 = *(_DWORD *)(v6 + 8);
      if (v9 == 0x7FFFFFFF) {
        int v9 = *(_DWORD *)(v6 + 4);
      }
      if (*(_DWORD *)(v2 + 12) != 0x7FFFFFFF) {
        int v8 = *(_DWORD *)(v2 + 12);
      }
      if (v9 >= v8)
      {
        if (v3 < v43)
        {
          *(void *)unint64_t v3 = v6;
          uint64_t v7 = (uint64_t)(v3 + 8);
          goto LABEL_8;
        }
        uint64_t v10 = (v3 - v41) >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v12 = v43 - v41;
        if ((v43 - v41) >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          if (v13 >> 61) {
            sub_188D718();
          }
          int64_t v14 = operator new(8 * v13);
          int64_t v15 = &v14[8 * v10];
          *(void *)int64_t v15 = v6;
          uint64_t v7 = (uint64_t)(v15 + 8);
          if (v3 == v41)
          {
LABEL_26:
            uint64_t v41 = v15;
            unsigned int v43 = &v14[8 * v13];
            if (!v3) {
              goto LABEL_8;
            }
LABEL_33:
            operator delete(v3);
LABEL_8:
            uint64_t v42 = (char *)v7;
            unint64_t v3 = (char *)v7;
            goto LABEL_9;
          }
        }
        else
        {
          int64_t v14 = 0;
          int64_t v15 = (char *)(8 * v10);
          *(void *)(8 * v10) = v6;
          uint64_t v7 = 8 * v10 + 8;
          if (v3 == v41) {
            goto LABEL_26;
          }
        }
        unint64_t v16 = v3 - 8 - v41;
        if (v16 < 0x168)
        {
          int v17 = v3;
          goto LABEL_31;
        }
        if (&v14[v3 - v41 - 8 - (v16 & 0xFFFFFFFFFFFFFFF8)] > &v14[v3 - v41 - 8])
        {
          int v17 = v3;
          goto LABEL_31;
        }
        if (&v3[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] > v3 - 8)
        {
          int v17 = v3;
          goto LABEL_31;
        }
        if ((unint64_t)(v41 - v14) < 0x20)
        {
          int v17 = v3;
          goto LABEL_31;
        }
        uint64_t v19 = (v16 >> 3) + 1;
        uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
        int v17 = &v3[-v20];
        v15 -= v20;
        int v21 = &v14[8 * v10 - 16];
        unsigned int v22 = v3 - 16;
        uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          _OWORD *v21 = v24;
          v21 -= 2;
          v22 -= 32;
          v23 -= 4;
        }
        while (v23);
        if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_31:
            uint64_t v18 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v17 != v41);
        }
        unint64_t v3 = v41;
        uint64_t v41 = v15;
        unsigned int v43 = &v14[8 * v13];
        if (v3) {
          goto LABEL_33;
        }
        goto LABEL_8;
      }
LABEL_9:
      v6 += 60;
    }
    uint64_t v4 = v40 + 168;
    if (v40 + 168 != v39) {
      continue;
    }
    break;
  }
  unint64_t v25 = 126 - 2 * __clz((v3 - v41) >> 3);
  if (v3 == v41) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = v25;
  }
  sub_B9C918((uint64_t)v41, (uint64_t *)v3, v26, 1);
  long long v27 = v41;
  char v44 = v42;
  unsigned int v45 = v41;
  sub_B98D78(a1, &v45, &v44, (int **)&v46);
  uint64_t v29 = (unint64_t *)(a2 + 32);
  long long v28 = *(void **)(a2 + 32);
  if (v28)
  {
    *(void *)(a2 + 40) = v28;
    operator delete(v28);
    *uint64_t v29 = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
  }
  *(_OWORD *)(a2 + 32) = v46;
  *(void *)(a2 + 48) = v47;
  sub_B99150((uint64_t)a1, v29, v2);
  uint64_t v31 = *(void *)a2;
  uint64_t v30 = *(void *)(a2 + 8);
  if (*(void *)a2 != v30)
  {
    do
    {
      uint64_t v33 = *(void *)(v31 + 64);
      uint64_t v32 = *(void *)(v31 + 72);
      if (v33 != v32)
      {
        int v34 = *(_DWORD *)(v31 + 8);
        if (*(_DWORD *)(v31 + 12) != 0x7FFFFFFF) {
          int v34 = *(_DWORD *)(v31 + 12);
        }
        while (1)
        {
          int v35 = *(_DWORD *)(v33 + 8);
          if (v35 == 0x7FFFFFFF) {
            int v35 = *(_DWORD *)(v33 + 4);
          }
          if (v35 >= v34) {
            break;
          }
          v33 += 60;
          if (v33 == v32)
          {
            uint64_t v33 = *(void *)(v31 + 72);
            break;
          }
        }
      }
      char v44 = *(char **)(v31 + 72);
      unsigned int v45 = (char *)v33;
      sub_B99324(a1, (unint64_t *)&v45, (uint64_t *)&v44, (int **)&v46);
      uint64_t v36 = *(void **)(v31 + 120);
      if (v36)
      {
        *(void *)(v31 + 128) = v36;
        operator delete(v36);
      }
      *(_OWORD *)(v31 + 120) = v46;
      *(void *)(v31 + 136) = v47;
      sub_B99150((uint64_t)a1, (unint64_t *)(v31 + 120), v31);
      v31 += 168;
    }
    while (v31 != v30);
    long long v27 = v41;
  }
  if (v27) {
    operator delete(v27);
  }
}

void sub_B98D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B98D78(unsigned char *a1@<X0>, char **a2@<X1>, char **a3@<X2>, int **a4@<X8>)
{
  uint64_t v37 = 0;
  int v38 = 0;
  uint64_t v39 = 0;
  int v34 = 0;
  int v35 = 0;
  uint64_t v36 = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = *a3;
  if (a1[41])
  {
    sub_B9E350(&v37, *a2, *a3, (v7 - v6) >> 3);
  }
  else
  {
    uint64_t v31 = &v37;
    if (v6 != v7)
    {
      do
      {
        if (*(_DWORD *)(*(void *)v6 + 40) == -1) {
          sub_2A98DC((void ***)&v31, v6);
        }
        v6 += 8;
      }
      while (v6 != v7);
      uint64_t v23 = *a2;
      long long v24 = *a3;
      uint64_t v31 = &v34;
      while (v23 != v24)
      {
        if (*(_DWORD *)(*(void *)v23 + 40) != -1) {
          sub_2A98DC((void ***)&v31, v23);
        }
        v23 += 8;
      }
    }
  }
  int v8 = v37;
  int v9 = v38;
  if (*a1)
  {
    if (v37 == v38)
    {
      int v9 = v37;
    }
    else
    {
      uint64_t v10 = v37 + 8;
      while (v10 != v38)
      {
        uint64_t v11 = *((void *)v10 - 1);
        uint64_t v12 = *(void *)v10;
        if (*(_DWORD *)(v11 + 8) == 0x7FFFFFFF) {
          uint64_t v13 = 4;
        }
        else {
          uint64_t v13 = 8;
        }
        int v14 = *(_DWORD *)(v11 + v13);
        if (*(_DWORD *)(v12 + 8) == 0x7FFFFFFF) {
          uint64_t v15 = 4;
        }
        else {
          uint64_t v15 = 8;
        }
        v10 += 8;
        if (v14 == *(_DWORD *)(v12 + v15))
        {
          unint64_t v16 = v10 - 16;
          if (v10 != v38)
          {
            do
            {
              if (*(_DWORD *)(v11 + 8) == 0x7FFFFFFF) {
                uint64_t v17 = 4;
              }
              else {
                uint64_t v17 = 8;
              }
              int v18 = *(_DWORD *)(v11 + v17);
              uint64_t v19 = *(void *)v10;
              if (*(_DWORD *)(*(void *)v10 + 8) == 0x7FFFFFFF) {
                uint64_t v20 = 4;
              }
              else {
                uint64_t v20 = 8;
              }
              if (v18 != *(_DWORD *)(v19 + v20))
              {
                *((void *)v16 + 1) = v19;
                v16 += 8;
                uint64_t v11 = v19;
              }
              v10 += 8;
            }
            while (v10 != v9);
            int v9 = v38;
          }
          if (v16 + 8 != v9)
          {
            int v9 = v16 + 8;
            int v38 = v16 + 8;
          }
          break;
        }
      }
    }
  }
  uint64_t v31 = 0;
  long long __dst = 0;
  uint64_t v33 = 0;
  long long v27 = v9;
  long long v28 = v8;
  sub_B9DF68((uint64_t)a1, (uint64_t *)&v28, (uint64_t *)&v27, (uint64_t)&__p);
  sub_B9E49C((uint64_t)&v31, (char *)__dst, (char *)__p, v30, 0xCCCCCCCCCCCCCCCDLL * ((v30 - (unsigned char *)__p) >> 3));
  if (__p)
  {
    uint64_t v30 = (char *)__p;
    operator delete(__p);
  }
  long long v27 = v35;
  long long v28 = v34;
  sub_B9B4AC((uint64_t)a1, (const void **)&v28, (const void **)&v27, (uint64_t)&__p);
  sub_B9E49C((uint64_t)&v31, (char *)__dst, (char *)__p, v30, 0xCCCCCCCCCCCCCCCDLL * ((v30 - (unsigned char *)__p) >> 3));
  if (__p)
  {
    uint64_t v30 = (char *)__p;
    operator delete(__p);
  }
  unint64_t v25 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)__dst - (unsigned char *)v31) >> 3));
  std::string __p = sub_B9E33C;
  if (__dst == v31) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = v25;
  }
  sub_B9EBC8((unint64_t)v31, (long long *)__dst, (unsigned int (**)(uint64_t, char *))&__p, v26, 1);
  sub_B9B78C((char **)&v31, a4);
  if (v31)
  {
    long long __dst = v31;
    operator delete(v31);
  }
  if (v34)
  {
    int v35 = (char *)v34;
    operator delete(v34);
  }
  if (v37)
  {
    int v38 = v37;
    operator delete(v37);
  }
}