char **sub_40D678(char **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  void **v8;
  char *v9;
  char *v10;
  char *v11;
  long long v12;

  v4 = *a1;
  if (*a1)
  {
    v5 = a1[1];
    v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        v7 = (void *)*((void *)v5 - 3);
        if (v7)
        {
          *((void *)v5 - 2) = v7;
          operator delete(v7);
        }
        v5 -= 48;
      }
      while (v5 != v4);
      v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(char **)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  v8 = (void **)(a1 + 3);
  v9 = a1[3];
  if (v9)
  {
    v10 = a1[4];
    v11 = a1[3];
    if (v10 != v9)
    {
      do
      {
        if (*(v10 - 1) < 0) {
          operator delete(*((void **)v10 - 3));
        }
        v10 -= 48;
      }
      while (v10 != v9);
      v11 = (char *)*v8;
    }
    a1[4] = v9;
    operator delete(v11);
    *v8 = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(char **)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)((char *)a1 + 61) = *(_OWORD *)(a2 + 61);
  *((_OWORD *)a1 + 3) = v12;
  return a1;
}

uint64_t sub_40D794(uint64_t a1, int *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  unint64_t v5 = (v4 + (((v3 + 0x388152A534) ^ 0xDEADBEEFLL) << 6) + (((v3 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2) + 2654435769u) ^ (v3 + 0x388152A534) ^ 0xDEADBEEFLL;
  uint64_t v6 = a2[3];
  uint64_t v7 = (v6 + (v5 << 6) + (v5 >> 2) + 2654435769u) ^ v5;
  uint64_t v8 = -1;
  while (1)
  {
    uint64_t v9 = v7 & (*(void *)(a1 + 64) - 1);
    v10 = (_DWORD *)(*(void *)(a1 + 112) + 40 * v9);
    int v11 = *(unsigned __int8 *)v10;
    if (*(unsigned __int8 *)(a1 + 72) == v11
      && *(_DWORD *)(a1 + 76) == v10[1]
      && *(_DWORD *)(a1 + 80) == v10[2]
      && *(_DWORD *)(a1 + 84) == v10[3])
    {
      break;
    }
    if (*(void *)(a1 + 48)
      && *(unsigned __int8 *)(a1 + 32) == v11
      && *(_DWORD *)(a1 + 36) == v10[1]
      && *(_DWORD *)(a1 + 40) == v10[2]
      && *(_DWORD *)(a1 + 44) == v10[3])
    {
      if (v8 == -1) {
        uint64_t v8 = v9;
      }
    }
    else if (*(unsigned __int8 *)a2 == v11 && v3 == v10[1] && __PAIR64__(v6, v4) == *((void *)v10 + 1))
    {
      return v9;
    }
    uint64_t v7 = ++v2 + v9;
  }
  return -1;
}

uint64_t sub_40D8E4(uint64_t *a1, char *a2, int *a3, char *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x1555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 2) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 2);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x1555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x1555555555555555) {
      sub_188D718();
    }
    int v11 = (char *)operator new(12 * v10);
  }
  else
  {
    int v11 = 0;
  }
  uint64_t v12 = sub_87E68((uint64_t)&v11[12 * v5], *a2, *a3, *a4);
  uint64_t v13 = v12 + 12;
  v15 = (unsigned char *)*a1;
  v14 = (unsigned char *)a1[1];
  if (v14 != (unsigned char *)*a1)
  {
    do
    {
      uint64_t v16 = *(void *)(v14 - 12);
      v14 -= 12;
      char v17 = v14[8];
      *(void *)(v12 - 12) = v16;
      v12 -= 12;
      *(unsigned char *)(v12 + 8) = v17;
    }
    while (v14 != v15);
    v14 = (unsigned char *)*a1;
  }
  *a1 = v12;
  a1[1] = v13;
  a1[2] = (uint64_t)&v11[12 * v10];
  if (v14) {
    operator delete(v14);
  }
  return v13;
}

void sub_40DA10(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_40DA28(uint64_t *a1, char *a2, int *a3, char *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x1555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 2) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 2);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x1555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x1555555555555555) {
      sub_188D718();
    }
    int v11 = (char *)operator new(12 * v10);
  }
  else
  {
    int v11 = 0;
  }
  uint64_t v12 = sub_87E68((uint64_t)&v11[12 * v5], *a2, *a3, *a4);
  uint64_t v13 = v12 + 12;
  v15 = (unsigned char *)*a1;
  v14 = (unsigned char *)a1[1];
  if (v14 != (unsigned char *)*a1)
  {
    do
    {
      uint64_t v16 = *(void *)(v14 - 12);
      v14 -= 12;
      char v17 = v14[8];
      *(void *)(v12 - 12) = v16;
      v12 -= 12;
      *(unsigned char *)(v12 + 8) = v17;
    }
    while (v14 != v15);
    v14 = (unsigned char *)*a1;
  }
  *a1 = v12;
  a1[1] = v13;
  a1[2] = (uint64_t)&v11[12 * v10];
  if (v14) {
    operator delete(v14);
  }
  return v13;
}

void sub_40DB54(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_40DB6C(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          v19 = (void *)(v5 + v21);
          v22 = (_OWORD *)(v5 + 16);
          v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    v30 = (char *)operator new(8 * v29);
    v31 = &v30[8 * v8];
    v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    v30 = 0;
    v31 = (char *)(8 * v8);
    v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    v54 = (char *)operator new(8 * v53);
    v31 = &v54[8 * (v53 >> 2)];
    v32 = &v54[8 * v53];
    if (v30)
    {
      v55 = &v54[8 * v53];
      operator delete(v30);
      v32 = v55;
      v34 = (char *)*a1;
      *(void *)v31 = *a3;
      v35 = v31 + 8;
      v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  v34 = (char *)v6;
  *(void *)v31 = *a3;
  v35 = v31 + 8;
  v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    v39 = v9;
    v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    v39 = v9;
    v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v9[-v41];
    v36 = &v31[-v41];
    v42 = v31 - 16;
    v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    v49 = v9;
    size_t v50 = v47 - v9;
    v51 = v32;
    memmove(v35, v49, v50);
    v32 = v51;
  }
  v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_40DEC4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_40DEDC(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_40D794(a1, a2);
  if (v4 != -1) {
    return *(void *)(a1 + 112) + 40 * v4;
  }
  uint64_t v8 = v5;
  if (sub_40E028(a1, 1))
  {
    sub_3F8850(&v16);
    long long v13 = *(_OWORD *)a2;
    *(_OWORD *)__p = v16;
    uint64_t v15 = v17;
    uint64_t v9 = sub_40D794(a1, (int *)&v13);
    if (v9 == -1)
    {
      sub_40E2DC(a1, (uint64_t)&v13, v10, &v16);
      uint64_t v6 = *((void *)&v16 + 1);
      int64_t v11 = __p[0];
      if (!__p[0]) {
        return v6;
      }
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 112) + 40 * v9;
      int64_t v11 = __p[0];
      if (!__p[0]) {
        return v6;
      }
    }
  }
  else
  {
    sub_3F8850(&v16);
    long long v13 = *(_OWORD *)a2;
    *(_OWORD *)__p = v16;
    uint64_t v15 = v17;
    sub_40E2DC(a1, (uint64_t)&v13, v8, v12);
    uint64_t v6 = v12[1];
    int64_t v11 = __p[0];
    if (!__p[0]) {
      return v6;
    }
  }
  __p[1] = v11;
  operator delete(v11);
  return v6;
}

void sub_40E008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_40E028(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_40E4B4(a1);
    unint64_t v5 = *(void *)(a1 + 56);
    if (v5 >= ~a2) {
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 56);
    if (v5 >= ~a2) {
      goto LABEL_35;
    }
  }
  unint64_t v6 = *(void *)(a1 + 64);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    unint64_t v9 = vcvts_n_u32_f32(v8, 2uLL);
    unint64_t v10 = 4;
    if (v7 >= v9)
    {
      while ((v10 & 0x8000000000000000) == 0)
      {
        v10 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v10)) {
          goto LABEL_8;
        }
      }
LABEL_35:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_8:
    if (v10 > v6)
    {
      unint64_t v11 = *(void *)(a1 + 48);
      unint64_t v12 = v5 - v11 + a2;
      unint64_t v13 = 4;
      if (v6 > 4) {
        goto LABEL_11;
      }
LABEL_10:
      if (v12 >= (unint64_t)(float)(v8 * (float)v13))
      {
LABEL_11:
        while ((v13 & 0x8000000000000000) == 0)
        {
          v13 *= 2;
          if (v13 >= v6) {
            goto LABEL_10;
          }
        }
        goto LABEL_35;
      }
      unint64_t v14 = v7 - (v11 >> 2);
      unint64_t v15 = 4;
      if (v14 >= v9)
      {
        while ((v15 & 0x8000000000000000) == 0)
        {
          v15 *= 2;
          if (v14 < (unint64_t)(float)(v8 * (float)v15)) {
            goto LABEL_19;
          }
        }
        goto LABEL_35;
      }
LABEL_19:
      if (v13 <= 0x7FFFFFFFFFFFFFFELL
        && v13 < v15
        && v12 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v13)))
      {
        v13 *= 2;
      }
      sub_40E87C((uint64_t)v21, a1, v13);
      sub_40E5D8(a1, (uint64_t)v21);
      long long v16 = v25;
      if (v25)
      {
        uint64_t v17 = v22;
        if (v22)
        {
          uint64_t v18 = 0;
          do
          {
            v19 = *(void **)((char *)v25 + v18 + 16);
            if (v19)
            {
              *(void *)((char *)v25 + v18 + 24) = v19;
              operator delete(v19);
            }
            v18 += 40;
            --v17;
          }
          while (v17);
          long long v16 = v25;
        }
        free(v16);
      }
      if (__p)
      {
        uint64_t v24 = __p;
        operator delete(__p);
      }
      return 1;
    }
  }
  return result;
}

void sub_40E278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_40B2D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_40E28C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_40E2A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_40E2B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_40E2C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_40E2DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  if ((unint64_t)(v5 - v6) >= 0x666666666666666)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_2E18(exception, "insert overflow");
  }
  uint64_t v10 = *(void *)(a1 + 112);
  if (v6
    && (unint64_t v11 = (_DWORD *)(v10 + 40 * a3), *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)v11)
    && *(_DWORD *)(a1 + 36) == v11[1]
    && *(_DWORD *)(a1 + 40) == v11[2]
    && *(_DWORD *)(a1 + 44) == v11[3])
  {
    *(void *)(a1 + 48) = v6 - 1;
  }
  else
  {
    *(void *)(a1 + 56) = v5 + 1;
  }
  uint64_t v12 = v10 + 40 * a3;
  unint64_t v15 = *(void **)(v12 + 16);
  unint64_t v14 = (void *)(v12 + 16);
  unint64_t v13 = v15;
  if (v15)
  {
    *(void *)(v10 + 40 * a3 + 24) = v13;
    operator delete(v13);
  }
  *(_OWORD *)(v10 + 40 * a3) = *(_OWORD *)a2;
  v14[1] = 0;
  v14[2] = 0;
  void *v14 = 0;
  uint64_t v17 = *(unsigned char **)(a2 + 16);
  long long v16 = *(unsigned char **)(a2 + 24);
  int64_t v18 = v16 - v17;
  if (v16 != v17)
  {
    uint64_t v19 = v10 + 40 * a3;
    uint64_t v20 = (char **)(v19 + 24);
    if (v18 < 0) {
      sub_2E00();
    }
    uint64_t v21 = (char *)operator new(v18);
    void *v14 = v21;
    *uint64_t v20 = v21;
    uint64_t v22 = &v21[8 * (v18 >> 3)];
    *(void *)(v19 + 32) = v22;
    memcpy(v21, v17, v18);
    *uint64_t v20 = v22;
  }
  uint64_t v23 = *(void *)(a1 + 112);
  uint64_t v24 = v23 + 40 * a3;
  uint64_t v25 = v23 + 40 * *(void *)(a1 + 64);
  *a4 = a1;
  a4[1] = v24;
  a4[2] = v25;
}

void sub_40E47C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_40E490(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v1;
  if (!*v1) {
    _Unwind_Resume(exception_object);
  }
  *uint64_t v2 = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

uint64_t sub_40E4B4(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 56) - *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 64), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    float v6 = (float)v2;
    do
    {
      unint64_t v7 = v5;
      v5 >>= 1;
    }
    while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
    sub_40E87C((uint64_t)v13, a1, v5);
    sub_40E5D8(a1, (uint64_t)v13);
    float v8 = v17;
    if (v17)
    {
      uint64_t v9 = v14;
      if (v14)
      {
        uint64_t v10 = 0;
        do
        {
          unint64_t v11 = *(void **)((char *)v17 + v10 + 16);
          if (v11)
          {
            *(void *)((char *)v17 + v10 + 24) = v11;
            operator delete(v11);
          }
          v10 += 40;
          --v9;
        }
        while (v9);
        float v8 = v17;
      }
      free(v8);
    }
    if (__p)
    {
      long long v16 = __p;
      operator delete(__p);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_40E5C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_40B2D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64x2_t sub_40E5D8(uint64_t a1, uint64_t a2)
{
  uint64x2_t v5 = *(uint64x2_t *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(uint64x2_t *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v4;
  long long v7 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a2 + 32) = v7;
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = v8;
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v9;
  uint64_t v10 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v10;
  sub_3F8850(&__p);
  unint64_t v11 = (long long *)(a1 + 72);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  unint64_t v13 = *(unsigned char **)(a1 + 88);
  uint64_t v12 = *(unsigned char **)(a1 + 96);
  long long v29 = *v11;
  v31 = 0;
  v32 = 0;
  __p = 0;
  int64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      sub_2E00();
    }
    __p = operator new(v12 - v13);
    v31 = __p;
    unint64_t v15 = (char *)__p + 8 * (v14 >> 3);
    v32 = v15;
    memcpy(__p, v13, v14);
    v31 = v15;
  }
  long long v16 = (long long *)(a2 + 72);
  if (v13)
  {
    *(void *)(a1 + 96) = v13;
    operator delete(v13);
  }
  *unint64_t v11 = *v16;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v19 = *(unsigned char **)(a2 + 88);
  uint64_t v17 = *(unsigned char **)(a2 + 96);
  int64_t v18 = (void **)(a2 + 88);
  int64_t v20 = v17 - v19;
  if (v17 != v19)
  {
    if (v20 < 0) {
      sub_2E00();
    }
    uint64_t v21 = (char *)operator new(v17 - v19);
    *(void *)(a1 + 88) = v21;
    *(void *)(a1 + 96) = v21;
    uint64_t v22 = &v21[8 * (v20 >> 3)];
    *(void *)(a1 + 104) = v22;
    memcpy(v21, v19, v20);
    *(void *)(a1 + 96) = v22;
    uint64_t v19 = *v18;
  }
  if (v19)
  {
    *(void *)(a2 + 96) = v19;
    operator delete(v19);
  }
  *long long v16 = v29;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *int64_t v18 = 0;
  uint64_t v23 = __p;
  int64_t v24 = v31 - (unsigned char *)__p;
  if (v31 != __p)
  {
    if (v24 < 0) {
      sub_2E00();
    }
    uint64_t v25 = (char *)operator new(v31 - (unsigned char *)__p);
    *(void *)(a2 + 88) = v25;
    *(void *)(a2 + 96) = v25;
    unint64_t v26 = &v25[8 * (v24 >> 3)];
    *(void *)(a2 + 104) = v26;
    memcpy(v25, v23, v24);
    *(void *)(a2 + 96) = v26;
  }
  if (v23)
  {
    v31 = v23;
    operator delete(v23);
  }
  uint64_t v27 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = v27;
  *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)*(unint64_t *)(a1 + 64))));
  *(unsigned char *)(a1 + 24) = 0;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a2 + 16), (float)*(unint64_t *)(a2 + 64))));
  *(uint64x2_t *)a2 = result;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

void sub_40E828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  unint64_t v15 = *v13;
  if (*v13)
  {
    *(void *)(v12 + 96) = v15;
    operator delete(v15);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_40E87C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  long long v7 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = v7;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  uint64_t v9 = *(unsigned char **)(a2 + 88);
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  int64_t v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0) {
      sub_2E00();
    }
    unint64_t v11 = (char *)operator new(v8 - v9);
    *(void *)(a1 + 88) = v11;
    *(void *)(a1 + 96) = v11;
    uint64_t v12 = &v11[8 * (v10 >> 3)];
    *(void *)(a1 + 104) = v12;
    memcpy(v11, v9, v10);
    *(void *)(a1 + 96) = v12;
  }
  *(void *)(a1 + 112) = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(a1 + 16), 0)));
    *(unsigned char *)(a1 + 24) = 0;
    sub_40EA4C(a1, a2, a3);
  }
  else
  {
    unint64_t v13 = 4;
    if (a3 > 4) {
      goto LABEL_8;
    }
    while (1)
    {
      float v14 = *(float *)(a1 + 16) * (float)v13;
      if (*(void *)(a2 + 56) - *(void *)(a2 + 48) < (unint64_t)v14) {
        break;
      }
      do
      {
LABEL_8:
        if ((v13 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v13 *= 2;
      }
      while (v13 < a3);
    }
    *(void *)(a1 + 64) = v13;
    float v15 = *(float *)(a1 + 20) * (float)v13;
    *(void *)a1 = (unint64_t)v14;
    *(void *)(a1 + 8) = (unint64_t)v15;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_40EA1C(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_40EA4C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = *(void *)(a2 + 56) - *(void *)(a2 + 48);
  unint64_t v6 = 4;
  if (a3 <= 4) {
    goto LABEL_4;
  }
  do
  {
    do
    {
      if ((v6 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v6 *= 2;
    }
    while (v6 < a3);
LABEL_4:
    ;
  }
  while (v5 >= (unint64_t)(float)(*(float *)(a1 + 16) * (float)v6));
  sub_40EE84(a1, v6);
  uint64_t v7 = *(void *)(a2 + 64);
  if (v7)
  {
    int v8 = *(unsigned __int8 *)(a2 + 72);
    int v9 = *(_DWORD *)(a2 + 76);
    int v10 = *(_DWORD *)(a2 + 80);
    int v11 = *(_DWORD *)(a2 + 84);
    if (*(void *)(a2 + 48))
    {
      uint64_t v12 = 40 * v7;
      unint64_t v13 = *(unsigned __int8 **)(a2 + 112);
      while (1)
      {
        int v14 = *v13;
        if ((v8 != v14 || v9 != *((_DWORD *)v13 + 1) || v10 != *((_DWORD *)v13 + 2) || v11 != *((_DWORD *)v13 + 3))
          && (*(unsigned __int8 *)(a2 + 32) != v14
           || *(_DWORD *)(a2 + 36) != *((_DWORD *)v13 + 1)
           || *(_DWORD *)(a2 + 40) != *((_DWORD *)v13 + 2)
           || *(_DWORD *)(a2 + 44) != *((_DWORD *)v13 + 3)))
        {
          break;
        }
        v13 += 40;
        v12 -= 40;
        if (!v12) {
          goto LABEL_58;
        }
      }
    }
    else
    {
      uint64_t v41 = 40 * v7;
      unint64_t v13 = *(unsigned __int8 **)(a2 + 112);
      while (v8 == *v13 && v9 == *((_DWORD *)v13 + 1) && v10 == *((_DWORD *)v13 + 2) && v11 == *((_DWORD *)v13 + 3))
      {
        v13 += 40;
        v41 -= 40;
        if (!v41) {
          goto LABEL_58;
        }
      }
    }
  }
  else
  {
    unint64_t v13 = *(unsigned __int8 **)(a2 + 112);
  }
  uint64_t v15 = *(void *)(a2 + 112) + 40 * v7;
  if (v13 != (unsigned __int8 *)v15)
  {
    do
    {
      uint64_t v16 = *(void *)(a1 + 64) - 1;
      unint64_t v17 = (*((int *)v13 + 1) + 0x388152A534) ^ 0xDEADBEEFLL;
      unint64_t v18 = (*((int *)v13 + 2) + 2654435769 + (v17 << 6) + (v17 >> 2)) ^ v17;
      uint64_t v19 = (*((int *)v13 + 3) + 2654435769 + (v18 << 6) + (v18 >> 2)) ^ v18;
      uint64_t v20 = *(void *)(a1 + 112);
      for (uint64_t i = 1; ; ++i)
      {
        uint64_t v22 = v19 & v16;
        uint64_t v23 = (unsigned __int8 *)(v20 + 40 * (v19 & v16));
        if (*(unsigned __int8 *)(a1 + 72) == *v23
          && *(_DWORD *)(a1 + 76) == *((_DWORD *)v23 + 1)
          && *(_DWORD *)(a1 + 80) == *((_DWORD *)v23 + 2)
          && *(_DWORD *)(a1 + 84) == *((_DWORD *)v23 + 3))
        {
          break;
        }
        uint64_t v19 = i + v22;
      }
      uint64_t v24 = v20 + 40 * v22;
      uint64_t v27 = *(void **)(v24 + 16);
      unint64_t v26 = (void *)(v24 + 16);
      uint64_t v25 = v27;
      if (v27)
      {
        *(void *)(v20 + 40 * v22 + 24) = v25;
        operator delete(v25);
      }
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v13;
      v26[1] = 0;
      v26[2] = 0;
      *unint64_t v26 = 0;
      long long v29 = (unsigned char *)*((void *)v13 + 2);
      uint64_t v28 = (unsigned char *)*((void *)v13 + 3);
      int64_t v30 = v28 - v29;
      if (v28 != v29)
      {
        uint64_t v31 = v20 + 40 * v22;
        v32 = (char **)(v31 + 24);
        if (v30 < 0) {
          sub_2E00();
        }
        unint64_t v33 = (char *)operator new(v28 - v29);
        *unint64_t v26 = v33;
        char *v32 = v33;
        v34 = &v33[8 * (v30 >> 3)];
        *(void *)(v31 + 32) = v34;
        memcpy(v33, v29, v30);
        char *v32 = v34;
      }
      ++*(void *)(a1 + 56);
      v35 = v13 + 40;
      unint64_t v13 = (unsigned __int8 *)v15;
      if (v35 != (unsigned __int8 *)v15)
      {
        int v36 = *(unsigned __int8 *)(a2 + 72);
        int v37 = *(_DWORD *)(a2 + 76);
        int v38 = *(_DWORD *)(a2 + 80);
        int v39 = *(_DWORD *)(a2 + 84);
        if (*(void *)(a2 + 48))
        {
          while (1)
          {
            int v40 = *v35;
            if ((v36 != v40 || v37 != *((_DWORD *)v35 + 1)
                             || v38 != *((_DWORD *)v35 + 2)
                             || v39 != *((_DWORD *)v35 + 3))
              && (*(unsigned __int8 *)(a2 + 32) != v40
               || *(_DWORD *)(a2 + 36) != *((_DWORD *)v35 + 1)
               || *(_DWORD *)(a2 + 40) != *((_DWORD *)v35 + 2)
               || *(_DWORD *)(a2 + 44) != *((_DWORD *)v35 + 3)))
            {
              break;
            }
            v35 += 40;
            if (v35 == (unsigned __int8 *)v15) {
              goto LABEL_51;
            }
          }
        }
        else
        {
          while (v36 == *v35
               && v37 == *((_DWORD *)v35 + 1)
               && v38 == *((_DWORD *)v35 + 2)
               && v39 == *((_DWORD *)v35 + 3))
          {
            v35 += 40;
            if (v35 == (unsigned __int8 *)v15)
            {
LABEL_51:
              unint64_t v13 = (unsigned __int8 *)v15;
              goto LABEL_22;
            }
          }
        }
        unint64_t v13 = v35;
      }
LABEL_22:
      ;
    }
    while (v13 != (unsigned __int8 *)(*(void *)(a2 + 112) + 40 * *(void *)(a2 + 64)));
  }
LABEL_58:
  ++*(_DWORD *)(a1 + 28);
}

void sub_40EE50(_Unwind_Exception *exception_object)
{
  long long v4 = *v1;
  if (*v1)
  {
    *unint64_t v2 = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_40EE70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64x2_t sub_40EE84(uint64_t a1, unint64_t a2)
{
  long long v4 = *(void **)(a1 + 112);
  if (!v4)
  {
    int v9 = malloc_type_malloc(40 * a2, 0x10200408CE6DADBuLL);
LABEL_12:
    *(void *)(a1 + 112) = v9;
    long long v4 = v9;
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)(a1 + 64);
  if (!v5)
  {
    if (!a2) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = *(void *)(a1 + 112) + v6;
    int v8 = *(void **)(v7 + 16);
    if (v8)
    {
      *(void *)(v7 + 24) = v8;
      operator delete(v8);
    }
    v6 += 40;
    --v5;
  }
  while (v5);
  long long v4 = *(void **)(a1 + 112);
  if (*(void *)(a1 + 64) != a2)
  {
LABEL_11:
    int v9 = malloc_type_realloc(v4, 40 * a2, 0x10200408CE6DADBuLL);
    if (!v9)
    {
      fprintf(__stderrp, "sparsehash: FATAL ERROR: failed to reallocate %lu elements for ptr %p", a2, v4);
      exit(1);
    }
    goto LABEL_12;
  }
LABEL_13:
  sub_40CCD0((uint64_t)v4, (uint64_t)v4 + 40 * a2, a1 + 72);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)a2)));
  *(uint64x2_t *)a1 = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

void sub_40EFC0()
{
  unk_2558437 = 16641;
  word_2558420 = 65;
  byte_255844F = 1;
  byte_2558439 = 0;
}

uint64_t sub_40EFE8(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_40EFF0(uint64_t a1)
{
  return sub_3FA3A8(*(void *)(a1 + 8));
}

uint64_t sub_40EFF8(uint64_t a1, unint64_t a2)
{
  return sub_3FA0B8(*(void **)(a1 + 8), a2);
}

BOOL sub_40F000(uint64_t a1, unint64_t a2)
{
  return sub_3FA2B0(*(int8x8_t **)(a1 + 8), a2);
}

uint64_t sub_40F008(void *a1, uint64_t a2)
{
  return *a1 - 56 * a2;
}

uint64_t sub_40F020(void *a1, uint64_t a2)
{
  return *a1 + 56 * a2;
}

void sub_40F034()
{
  unk_2558467 = 16641;
  word_2558450 = 65;
  byte_255847F = 1;
  byte_2558469 = 0;
}

uint64_t sub_40F05C(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    unint64_t v2 = *(void **)(a1 + 8);
    if (!v2) {
      return a1;
    }
    goto LABEL_3;
  }
  unint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_40F0AC(uint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>, unint64_t a4@<D1>, unint64_t a5@<D2>, unint64_t a6@<D3>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1] - *a1;
  HIDWORD(v9) = -1;
  *(_OWORD *)a3 = xmmword_20E22C0;
  *(void *)(a3 + 16) = -1;
  if (0xAAAAAAAAAAAAAAABLL * (v8 >> 2) < 2) {
    return;
  }
  if (v8 != 12)
  {
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    uint64_t v11 = -1;
    int v26 = 0x7FFFFFFF;
    while (1)
    {
      HIDWORD(v27) = -1;
      uint64_t v56 = -1;
      uint64_t v28 = v7 + v24;
      long long v29 = (unsigned int *)(v7 + v24 + 12);
      unsigned int v30 = *v29;
      int v57 = 0x7FFFFFFF;
      LODWORD(v27) = *(_DWORD *)(v7 + v24);
      LODWORD(a5) = *(_DWORD *)(v7 + v24 + 4);
      double v31 = (double)v27;
      double v32 = (double)a5;
      LODWORD(a5) = *(_DWORD *)(v7 + v24 + 16);
      double v33 = (double)v30 - v31;
      double v34 = (double)a5 - v32;
      double v35 = v33 * v33 + v34 * v34;
      double v36 = fabs(v35);
      HIDWORD(v37) = 1018167296;
      if (v35 != 0.0 && v36 >= 2.22044605e-16)
      {
        LODWORD(v36) = *a2;
        LODWORD(v37) = a2[1];
        double v41 = (v33 * ((double)*(unint64_t *)&v36 - v31) + v34 * ((double)v37 - v32)) / v35;
        if (v41 <= 0.0)
        {
          uint64_t v39 = *(void *)v28;
          int v40 = *(_DWORD *)(v28 + 8);
          goto LABEL_22;
        }
        if (v41 < 1.0)
        {
          double v32 = v34 * v41 + v32;
          LODWORD(v56) = llround(v33 * v41 + v31);
          HIDWORD(v56) = llround(v32);
          uint64_t v42 = v7 + v24;
          int v43 = *(_DWORD *)(v7 + v24 + 8);
          if (v43 != 0x7FFFFFFF)
          {
            int v44 = *(_DWORD *)(v42 + 20);
            if (v44 != 0x7FFFFFFF)
            {
              double v32 = v41 * (double)(v44 - v43) + (double)v43;
              int v57 = (int)v32;
            }
          }
          goto LABEL_23;
        }
      }
      uint64_t v39 = *(void *)v29;
      int v40 = v29[2];
LABEL_22:
      int v57 = v40;
      uint64_t v56 = v39;
LABEL_23:
      sub_412F88((uint64_t)a2, (unsigned int *)&v56, v32);
      double v9 = v45 * 100.0;
      HIDWORD(a4) = 1105199103;
      BOOL v46 = v9 >= -2147483650.0 && v9 < 2147483650.0;
      signed int v47 = llround(v9);
      if (!v46) {
        signed int v47 = 0x7FFFFFFF;
      }
      if (v26 == 0x7FFFFFFF || v47 < v26)
      {
        *(void *)a3 = v56;
        *(_DWORD *)(a3 + 8) = v57;
        *(_DWORD *)(a3 + 12) = v47;
        *(void *)(a3 + 16) = v25;
        uint64_t v11 = v25;
        int v26 = v47;
      }
      ++v25;
      uint64_t v7 = *a1;
      v24 += 12;
      if (v25 >= -1 - 0x5555555555555555 * ((a1[1] - *a1) >> 2)) {
        goto LABEL_4;
      }
    }
  }
  uint64_t v11 = -1;
LABEL_4:
  uint64_t v12 = (_DWORD *)(v7 + 12 * v11);
  LODWORD(v9) = *v12;
  LODWORD(a5) = v12[1];
  LODWORD(a4) = *a2;
  LODWORD(a6) = a2[1];
  double v13 = (double)a4;
  HIDWORD(v14) = 1079574528;
  double v15 = ((double)*(unint64_t *)&v9 - v13) / 100.0;
  double v16 = (double)a5;
  double v17 = (double)a6;
  double v18 = (v16 - (double)a6) / 100.0;
  int v19 = v12[2];
  if (v19 == 0x7FFFFFFF || (int v20 = a2[2], v20 == 0x7FFFFFFF))
  {
    double v21 = v15 * v15;
    double v22 = v18 * v18;
  }
  else
  {
    int v48 = v19 - v20;
    if (v48 < 0) {
      int v48 = -v48;
    }
    double v14 = (double)v48 / 100.0;
    double v21 = v15 * v15 + v18 * v18;
    double v22 = v14 * v14;
  }
  double v49 = sqrt(v21 + v22);
  size_t v50 = (_DWORD *)(v7 + 12 * (v11 + 1));
  LODWORD(v22) = *v50;
  LODWORD(v14) = v50[1];
  double v51 = ((double)*(unint64_t *)&v22 - v13) / 100.0;
  int v52 = v50[2];
  double v53 = ((double)*(unint64_t *)&v14 - v17) / 100.0;
  if (v52 == 0x7FFFFFFF || (int v54 = a2[2], v54 == 0x7FFFFFFF))
  {
    if (v49 <= sqrt(v51 * v51 + v53 * v53)) {
      return;
    }
    goto LABEL_37;
  }
  int v55 = v52 - v54;
  if (v55 < 0) {
    int v55 = -v55;
  }
  if (v49 > sqrt(v51 * v51 + v53 * v53 + (double)v55 / 100.0 * ((double)v55 / 100.0))) {
LABEL_37:
  }
    *(void *)(a3 + 16) = v11 + 1;
}

uint64_t sub_40F434(uint64_t a1)
{
  return a1;
}

void sub_40F460(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::chrono::steady_clock::now();
  sub_40FC8C(a2, *a1, (uint64_t)(a1 + 1), &v27);
  uint64_t v6 = v27;
  if (0x8E38E38E38E38E39 * ((v28 - v27) >> 3) < 2)
  {
LABEL_2:
    if (!sub_110D440())
    {
LABEL_8:
      *(void *)(a3 + 112) = 0;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_DWORD *)(a3 + 120) = 1065353216;
      *(unsigned char *)(a3 + 128) = 0;
      goto LABEL_36;
    }
    sub_6BAC((uint64_t)&v23);
    sub_188FC78(&v23, (uint64_t)"Got less than 2 support points or not all necessary support points could be snapped.", 84);
    double v21 = operator new(0x88uLL);
    long long v22 = xmmword_20E7B30;
    strcpy((char *)v21, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/PathDecoder.cpp");
    std::stringbuf::str();
    sub_110D454((uint64_t)&v21, 48, (uint64_t)v19);
    if (v20 < 0)
    {
      operator delete(v19[0]);
      if ((SHIBYTE(v22) & 0x80000000) == 0) {
        goto LABEL_5;
      }
    }
    else if ((SHIBYTE(v22) & 0x80000000) == 0)
    {
LABEL_5:
      if (v26 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_8;
    }
    operator delete(v21);
    goto LABEL_5;
  }
  while (v6 != v28)
  {
    if (*((void *)v6 + 2) == *((void *)v6 + 3)) {
      goto LABEL_2;
    }
    v6 += 72;
  }
  if (sub_110D2C8())
  {
    sub_6BAC((uint64_t)&v23);
    sub_188FC78(&v23, (uint64_t)"Decoding path with ", 19);
    uint64_t v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" support points.", 16);
    double v21 = operator new(0x88uLL);
    long long v22 = xmmword_20E7B30;
    strcpy((char *)v21, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/PathDecoder.cpp");
    std::stringbuf::str();
    sub_110D2DC((uint64_t)&v21, 53, (uint64_t)v19);
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(v21);
    }
    if (v26 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (sub_40FF08((uint64_t)a1, (_DWORD **)&v27)) {
    sub_410294((uint64_t)a1, &v27, a3);
  }
  else {
    sub_410558((uint64_t)a1, (uint64_t *)&v27, a3);
  }
  uint64_t v8 = *(uint64_t (****)())(a2 + 56);
  if (!v8) {
    uint64_t v8 = &off_24F81B0;
  }
  int v9 = *((_DWORD *)v8 + 6);
  if (v9 == 2) {
    char v10 = 2;
  }
  else {
    char v10 = v9 == 1;
  }
  *(unsigned char *)(a3 + 128) = v10;
  std::chrono::steady_clock::now();
  if (sub_110D2C8())
  {
    sub_6BAC((uint64_t)&v23);
    sub_188FC78(&v23, (uint64_t)"Decoded path with ", 18);
    uint64_t v11 = (void *)std::ostream::operator<<();
    sub_188FC78(v11, (uint64_t)" segments (origin_fraction: ", 28);
    uint64_t v12 = (void *)std::ostream::operator<<();
    sub_188FC78(v12, (uint64_t)", destination_fraction: ", 24);
    double v13 = (void *)std::ostream::operator<<();
    sub_188FC78(v13, (uint64_t)") in ", 5);
    double v14 = (void *)std::ostream::operator<<();
    sub_188FC78(v14, (uint64_t)" ms.", 4);
    double v21 = operator new(0x88uLL);
    long long v22 = xmmword_20E7B30;
    strcpy((char *)v21, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/PathDecoder.cpp");
    std::stringbuf::str();
    sub_110D2DC((uint64_t)&v21, 67, (uint64_t)v19);
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(v21);
    }
    if (v26 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
LABEL_36:
  double v15 = v27;
  if (v27)
  {
    double v16 = v28;
    double v17 = v27;
    if (v28 != v27)
    {
      do
      {
        double v18 = (void *)*((void *)v16 - 7);
        if (v18)
        {
          *((void *)v16 - 6) = v18;
          operator delete(v18);
        }
        v16 -= 72;
      }
      while (v16 != v15);
      double v17 = v27;
    }
    uint64_t v28 = v15;
    operator delete(v17);
  }
}

void sub_40FB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  sub_111ECAC((uint64_t)&a21);
  sub_4106F8(v21);
  sub_410794((void **)(v22 - 88));
  _Unwind_Resume(a1);
}

void sub_40FC78(_Unwind_Exception *a1)
{
  sub_410794((void **)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_40FC8C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = (uint64_t *)(v6 + 8);
  if (!v6) {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(int *)(a1 + 32);
  if (!v8)
  {
    unint64_t v17 = 0;
    goto LABEL_19;
  }
  uint64_t v9 = (v8 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (!v9)
  {
    unint64_t v17 = 0;
    double v14 = v7;
LABEL_15:
    double v18 = &v7[v8];
    do
    {
      uint64_t v19 = *v14++;
      if (*(_DWORD *)(v19 + 84) == 1) {
        ++v17;
      }
    }
    while (v14 != v18);
    goto LABEL_19;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = v9 + 1;
  uint64_t v13 = (v9 + 1) & 0x3FFFFFFFFFFFFFFELL;
  double v14 = &v7[v13];
  double v15 = v7 + 1;
  uint64_t v16 = v13;
  do
  {
    if (*(_DWORD *)(*(v15 - 1) + 84) == 1) {
      ++v10;
    }
    if (*(_DWORD *)(*v15 + 84) == 1) {
      ++v11;
    }
    v15 += 2;
    v16 -= 2;
  }
  while (v16);
  unint64_t v17 = v11 + v10;
  if (v12 != v13) {
    goto LABEL_15;
  }
LABEL_19:
  sub_413EC0(a4, v17);
  int v20 = *(_DWORD *)(a1 + 32);
  if (v20 >= 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    unint64_t v37 = v17 - 1;
    char v24 = 1;
    do
    {
      uint64_t v25 = *(void *)(*(void *)(a1 + 40) + 8 * v21 + 8);
      if (*(_DWORD *)(v25 + 84) == 1)
      {
        if ((v24 & 1) != 0 || (*(void *)(v25 + 48) != v22 ? (BOOL v26 = v23 == v37) : (BOOL v26 = 1), v26)) {
          int v27 = 1;
        }
        else {
          int v27 = (*(unsigned __int8 *)(v25 + 16) >> 2) & 1;
        }
        sub_413F90(*(void *)(*(void *)(a1 + 40) + 8 * v21 + 8), v23 == 0, v27, a2, a3, (uint64_t)&v40);
        uint64_t v28 = a4;
        uint64_t v29 = *a4;
        uint64_t v30 = *a4 + 72 * v23;
        uint64_t v31 = v40;
        *(_DWORD *)(v30 + 8) = v41;
        *(void *)uint64_t v30 = v31;
        double v34 = *(void **)(v30 + 16);
        double v33 = (void *)(v30 + 16);
        double v32 = v34;
        if (v34)
        {
          *(void *)(v29 + 72 * v23 + 24) = v32;
          operator delete(v32);
          *double v33 = 0;
          v33[1] = 0;
          v33[2] = 0;
        }
        *(_OWORD *)double v33 = *(_OWORD *)__p;
        uint64_t v35 = v29 + 72 * v23;
        *(void *)(v35 + 32) = v43;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v43 = 0;
        int v36 = v44;
        *(_WORD *)(v35 + 44) = v45;
        *(_DWORD *)(v35 + 40) = v36;
        *(unsigned char *)(v35 + 48) = v46;
        *(void *)(v35 + 56) = v47;
        *(void *)(v35 + 64) = v48;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (*(void *)(*v28 + 72 * v23 + 16) == *(void *)(*v28 + 72 * v23 + 24)) {
          return;
        }
        a4 = v28;
        ++v23;
        uint64_t v22 = *(void *)(v25 + 48);
        v24 &= v22 == 0;
        int v20 = *(_DWORD *)(a1 + 32);
      }
      ++v21;
    }
    while (v21 < v20);
  }
}

void sub_40FEF4(_Unwind_Exception *a1)
{
  sub_410794(v1);
  _Unwind_Resume(a1);
}

BOOL sub_40FF08(uint64_t a1, _DWORD **a2)
{
  long long v4 = (void **)*a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = **((void **)*a2 + 2);
  uint64_t v23 = v6;
  if (v4 == (void **)v5)
  {
LABEL_5:
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a1 + 32))(&v17);
    if (v20)
    {
      if (sub_110D20C())
      {
        sub_6BAC((uint64_t)v15);
        sub_188FC78(v15, (uint64_t)"Computing origin/destination fractions.", 39);
        uint64_t v13 = operator new(0x88uLL);
        long long v14 = xmmword_20E7B30;
        strcpy((char *)v13, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/PathDecoder.cpp");
        std::stringbuf::str();
        sub_110D220((uint64_t)&v13, 110, (uint64_t)&__p);
        if (v12 < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v14) < 0) {
          operator delete(v13);
        }
        if (v16 < 0) {
          operator delete((void *)v15[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      double v8 = sub_41084C(a1, (uint64_t)&v23, *a2);
      BOOL v9 = v8 <= sub_41084C(a1, (uint64_t)&v23, a2[1] - 18);
      if ((v22 & 0x80000000) == 0) {
        goto LABEL_16;
      }
    }
    else
    {
      BOOL v9 = 0;
      if ((v22 & 0x80000000) == 0)
      {
LABEL_16:
        if (v18)
        {
          uint64_t v19 = v18;
          operator delete(v18);
        }
        return v9;
      }
    }
    operator delete(v21);
    goto LABEL_16;
  }
  while (1)
  {
    uint64_t v7 = v4[2];
    if (__PAIR64__(*((unsigned __int16 *)v7 + 2), *(_DWORD *)v7) != __PAIR64__(WORD2(v6), v6)
      || ((v6 & 0x1000000000000) == 0) != (*((unsigned char *)v7 + 6) == 0))
    {
      return 0;
    }
    v4 += 9;
    if (v4 == (void **)v5) {
      goto LABEL_5;
    }
  }
}

void sub_4101E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    sub_111ECAC((uint64_t)&a21);
    sub_40F05C(v21 - 136);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a21);
  sub_40F05C(v21 - 136);
  _Unwind_Resume(a1);
}

void sub_410244(_Unwind_Exception *a1)
{
  sub_40F05C(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_410258(_Unwind_Exception *a1)
{
  sub_40F05C(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_41026C(_Unwind_Exception *a1)
{
  sub_40F05C(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_410280(_Unwind_Exception *a1)
{
  sub_40F05C(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_410294(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 112) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 120) = 1065353216;
  *(unsigned char *)(a3 + 128) = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = *(void **)(*a2 + 16);
  double v8 = operator new(8uLL);
  *double v8 = *v7;
  *(void *)(a3 + 24) = v8 + 1;
  *(void *)(a3 + 32) = v8 + 1;
  *(void *)(a3 + 16) = v8;
  BOOL v9 = operator new(1uLL);
  *BOOL v9 = *(unsigned char *)(v6 + 45);
  *(void *)(a3 + 48) = v9 + 1;
  *(void *)(a3 + 56) = v9 + 1;
  *(void *)(a3 + 40) = v9;
  uint64_t v32 = (uint64_t)a2;
  uint64_t v10 = a2[1];
  if (v6 != v10)
  {
    double v33 = (void **)(a3 + 64);
    do
    {
      uint64_t v13 = (long long *)(v6 + 48);
      if ((sub_51D60((unsigned __int8 *)(v6 + 48)) & 1) == 0) {
        goto LABEL_5;
      }
      double v14 = sub_41084C(a1, *(void *)(a3 + 16), (_DWORD *)v6);
      double v15 = v14;
      uint64_t v17 = *(double **)(a3 + 72);
      unint64_t v16 = *(void *)(a3 + 80);
      if ((unint64_t)v17 < v16)
      {
        *uint64_t v17 = 0.0;
        v17[1] = v14;
        long long v11 = *v13;
        v17[4] = *(double *)(v6 + 64);
        *((_OWORD *)v17 + 1) = v11;
        *((unsigned char *)v17 + 40) = 0;
        char v12 = (char *)(v17 + 6);
      }
      else
      {
        double v18 = (double *)*v33;
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (unsigned char *)*v33) >> 4);
        unint64_t v20 = v19 + 1;
        if (v19 + 1 > 0x555555555555555) {
          sub_2E00();
        }
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (void)v18) >> 4);
        if (2 * v21 > v20) {
          unint64_t v20 = 2 * v21;
        }
        if (v21 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v22 = 0x555555555555555;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22 > 0x555555555555555) {
          sub_188D718();
        }
        uint64_t v23 = (char *)operator new(48 * v22);
        char v24 = (double *)&v23[48 * v19];
        *char v24 = 0.0;
        v24[1] = v15;
        long long v25 = *v13;
        v24[4] = *(double *)(v6 + 64);
        *((_OWORD *)v24 + 1) = v25;
        *((unsigned char *)v24 + 40) = 0;
        if (v17 != v18)
        {
          BOOL v26 = &v23[48 * v19];
          do
          {
            int v27 = v26 - 48;
            long long v28 = *((_OWORD *)v17 - 3);
            long long v29 = *((_OWORD *)v17 - 1);
            *((_OWORD *)v26 - 2) = *((_OWORD *)v17 - 2);
            *((_OWORD *)v26 - 1) = v29;
            *((_OWORD *)v26 - 3) = v28;
            v17 -= 6;
            v26 -= 48;
          }
          while (v17 != v18);
          uint64_t v30 = &v23[48 * v22];
          char v12 = (char *)(v24 + 6);
          *(void *)(a3 + 64) = v27;
          *(void *)(a3 + 72) = v24 + 6;
          *(void *)(a3 + 80) = v30;
          if (!v18) {
            goto LABEL_4;
          }
LABEL_21:
          operator delete(v18);
          goto LABEL_4;
        }
        uint64_t v31 = &v23[48 * v22];
        char v12 = (char *)(v24 + 6);
        *(void *)(a3 + 64) = v24;
        *(void *)(a3 + 72) = v24 + 6;
        *(void *)(a3 + 80) = v31;
        if (v18) {
          goto LABEL_21;
        }
      }
LABEL_4:
      *(void *)(a3 + 72) = v12;
LABEL_5:
      v6 += 72;
    }
    while (v6 != v10);
  }
  sub_410C1C(a1, a3, v32);
}

void sub_4104F4(_Unwind_Exception *a1)
{
  sub_4106F8(v1);
  _Unwind_Resume(a1);
}

void sub_410508(_Unwind_Exception *a1)
{
  sub_4106F8(v1);
  _Unwind_Resume(a1);
}

void sub_41051C(_Unwind_Exception *a1)
{
  sub_4106F8(v1);
  _Unwind_Resume(a1);
}

void sub_410530(_Unwind_Exception *a1)
{
  sub_4106F8(v1);
  _Unwind_Resume(a1);
}

void sub_410544(_Unwind_Exception *a1)
{
  sub_4106F8(v1);
  _Unwind_Resume(a1);
}

void sub_410558(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 8;
  if (!*(unsigned char *)(a1 + 121))
  {
    sub_411D9C(a2, *(void *)a1, v6, &__p);
    if (sub_412728(*(void *)a1, v6, &__p, a2))
    {
      sub_41128C(a1, (uint64_t)&__p, (_DWORD **)a2, a3);
      uint64_t v7 = (char *)__p;
      if (!__p) {
        return;
      }
    }
    else
    {
      *(void *)(a3 + 112) = 0;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_DWORD *)(a3 + 120) = 1065353216;
      *(unsigned char *)(a3 + 128) = 0;
      uint64_t v7 = (char *)__p;
      if (!__p) {
        return;
      }
    }
    uint64_t v13 = v18;
    BOOL v9 = v7;
    if (v18 != v7)
    {
      double v14 = v18;
      do
      {
        unint64_t v16 = (void *)*((void *)v14 - 3);
        v14 -= 24;
        double v15 = v16;
        if (v16)
        {
          *(v13 - 2) = v15;
          operator delete(v15);
        }
        uint64_t v13 = v14;
      }
      while (v14 != v7);
      goto LABEL_17;
    }
LABEL_18:
    double v18 = v7;
    operator delete(v9);
    return;
  }
  sub_410EB0(*(void *)a1, v6, a2, &__p);
  sub_41128C(a1, (uint64_t)&__p, (_DWORD **)a2, a3);
  uint64_t v7 = (char *)__p;
  if (__p)
  {
    double v8 = v18;
    BOOL v9 = __p;
    if (v18 != __p)
    {
      uint64_t v10 = v18;
      do
      {
        char v12 = (void *)*((void *)v10 - 3);
        v10 -= 24;
        long long v11 = v12;
        if (v12)
        {
          *(v8 - 2) = v11;
          operator delete(v11);
        }
        double v8 = v10;
      }
      while (v10 != v7);
LABEL_17:
      BOOL v9 = __p;
      goto LABEL_18;
    }
    goto LABEL_18;
  }
}

void sub_4106D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_4106E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void *sub_4106F8(void *a1)
{
  unint64_t v2 = (void *)a1[13];
  if (v2)
  {
    do
    {
      double v8 = (void *)*v2;
      BOOL v9 = (void *)v2[3];
      if (v9)
      {
        v2[4] = v9;
        operator delete(v9);
      }
      operator delete(v2);
      unint64_t v2 = v8;
    }
    while (v8);
  }
  unint64_t v3 = (void *)a1[11];
  a1[11] = 0;
  if (v3) {
    operator delete(v3);
  }
  long long v4 = (void *)a1[8];
  if (v4)
  {
    a1[9] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[5];
  if (v5)
  {
    a1[6] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[2];
  if (v6)
  {
    a1[3] = v6;
    operator delete(v6);
  }
  return a1;
}

void **sub_410794(void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    long long v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 7);
        if (v5)
        {
          *((void *)v3 - 6) = v5;
          operator delete(v5);
        }
        v3 -= 72;
      }
      while (v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_410808(uint64_t a1, uint64_t a2, char a3)
{
}

__n128 sub_410814(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[2];
  *(_OWORD *)(a1 + 56) = a2[3];
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 8) = v2;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_WORD *)(a1 + 120) = *((_WORD *)a2 + 56);
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  *(__n128 *)(a1 + 72) = result;
  return result;
}

double sub_41084C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a1 + 32))(&v31);
  sub_40F0AC((uint64_t *)&v32, a3, (uint64_t)v29, v4, v5, v6);
  if (v30 != -1 && v29[3] != 0x7FFFFFFF && (v29[0] != -1 || v29[1] != -1))
  {
    uint64_t v10 = v32;
    double v11 = 0.0;
    if (0xAAAAAAAAAAAAAAABLL * ((v33 - (char *)v32) >> 2) >= 2 && v32 + 3 != (unsigned int *)v33)
    {
      double v13 = 1.79769313e308;
      double v14 = 0.0;
      double v15 = 0.0;
      do
      {
        sub_412F88((uint64_t)v10, v10 + 3, v7);
        double v17 = v16;
        sub_412F88((uint64_t)v10, v29, v16);
        double v19 = v18;
        sub_412F88((uint64_t)v29, v10 + 3, v18);
        double v7 = fmax(v19 + v20 - v17, 0.0);
        if (v7 < v13)
        {
          double v13 = v7;
          double v15 = v14 + v19;
        }
        double v14 = v14 + v17;
        unint64_t v21 = (char *)(v10 + 6);
        v10 += 3;
      }
      while (v21 != v33);
      double v11 = 0.0;
      if (v14 != 0.0)
      {
        if (v15 / v14 <= 1.0) {
          double v11 = v15 / v14;
        }
        else {
          double v11 = 1.0;
        }
      }
    }
    goto LABEL_27;
  }
  double v11 = 0.0;
  if (!sub_110D440()) {
    goto LABEL_27;
  }
  sub_6BAC((uint64_t)v27);
  sub_188FC78(v27, (uint64_t)"Could not snap the location onto the road.", 42);
  long long v25 = operator new(0x88uLL);
  long long v26 = xmmword_20E7B30;
  strcpy((char *)v25, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/PathDecoder.cpp");
  std::stringbuf::str();
  sub_110D454((uint64_t)&v25, 258, (uint64_t)&v23);
  if (v24 < 0)
  {
    operator delete(v23);
    if ((SHIBYTE(v26) & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_33:
    operator delete(v25);
    goto LABEL_24;
  }
  if (SHIBYTE(v26) < 0) {
    goto LABEL_33;
  }
LABEL_24:
  if (v28 < 0) {
    operator delete((void *)v27[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_27:
  if (v35 < 0) {
    operator delete(v34);
  }
  if (v32)
  {
    double v33 = (char *)v32;
    operator delete(v32);
  }
  return v11;
}

void sub_410B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    sub_111ECAC((uint64_t)&a21);
    sub_40F05C(v21 - 144);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a21);
  sub_40F05C(v21 - 144);
  _Unwind_Resume(a1);
}

void sub_410BF4(_Unwind_Exception *a1)
{
  sub_40F05C(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_410C08(_Unwind_Exception *a1)
{
  sub_40F05C(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_410C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_110D20C()) {
    goto LABEL_7;
  }
  sub_6BAC((uint64_t)v10);
  sub_188FC78(v10, (uint64_t)"Computing origin/destination fractions.", 39);
  double v8 = operator new(0x88uLL);
  long long v9 = xmmword_20E7B30;
  strcpy((char *)v8, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/PathDecoder.cpp");
  std::stringbuf::str();
  sub_110D220((uint64_t)&v8, 240, (uint64_t)&v6);
  if (v7 < 0)
  {
    operator delete(v6);
    if ((SHIBYTE(v9) & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_9:
    operator delete(v8);
    goto LABEL_4;
  }
  if (SHIBYTE(v9) < 0) {
    goto LABEL_9;
  }
LABEL_4:
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_7:
  *(double *)a2 = sub_41084C(a1, *(void *)(a2 + 16), *(_DWORD **)a3);
  *(double *)(a2 + 8) = sub_41084C(a1, *(void *)(a2 + 24) - 8, (_DWORD *)(*(void *)(a3 + 8) - 72));
}

void sub_410E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      sub_111ECAC((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  sub_111ECAC((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_410E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_410E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_410EB0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  unint64_t v6 = 0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 3);
  if (v6 > 1)
  {
    sub_417D70(&v30, v6 - 1);
    long long v9 = v31;
    if (v31 == v30)
    {
      double v14 = v31;
LABEL_11:
      *a4 = v14;
      a4[1] = v9;
      a4[2] = v32;
    }
    else
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        sub_417E3C(a1, a2, a3, &v30, v11, (const void **)&v26);
        char v12 = &v30[v10];
        double v13 = *(void **)&v30[v10];
        if (v13)
        {
          *((void *)v12 + 1) = v13;
          operator delete(v13);
          *(void *)char v12 = 0;
          *((void *)v12 + 1) = 0;
          *((void *)v12 + 2) = 0;
        }
        *(_OWORD *)char v12 = v26;
        *((void *)v12 + 2) = v27;
        double v14 = v30;
        if (*(void *)&v30[v10] == *(void *)&v30[v10 + 8]) {
          break;
        }
        ++v11;
        long long v9 = v31;
        v10 += 24;
        if (v11 >= 0xAAAAAAAAAAAAAAABLL * ((v31 - v30) >> 3)) {
          goto LABEL_11;
        }
      }
      if (sub_110D384())
      {
        sub_6BAC((uint64_t)&v26);
        sub_188FC78(&v26, (uint64_t)"Pathlet ", 8);
        double v15 = (void *)std::ostream::operator<<();
        sub_188FC78(v15, (uint64_t)" NOT FOUND. Aborting decoding", 29);
        char v24 = operator new(0x90uLL);
        long long v25 = xmmword_20E7B40;
        strcpy((char *)v24, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletDijkstraDecoder.h");
        std::stringbuf::str();
        sub_110D398((uint64_t)&v24, 193, (uint64_t)&__p);
        if (v23 < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v25) < 0) {
          operator delete(v24);
        }
        if (v29 < 0) {
          operator delete(v28);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      double v16 = v30;
      if (v30)
      {
        double v17 = v31;
        double v18 = v30;
        if (v31 != v30)
        {
          double v19 = v31;
          do
          {
            uint64_t v21 = (void *)*((void *)v19 - 3);
            v19 -= 24;
            double v20 = v21;
            if (v21)
            {
              *((void *)v17 - 2) = v20;
              operator delete(v20);
            }
            double v17 = v19;
          }
          while (v19 != v16);
          double v18 = v30;
        }
        uint64_t v31 = v16;
        operator delete(v18);
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_4111EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    sub_111ECAC((uint64_t)&a21);
    sub_36094((void **)(v21 - 104));
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a21);
  sub_36094((void **)(v21 - 104));
  _Unwind_Resume(a1);
}

void sub_411278(_Unwind_Exception *a1)
{
  sub_36094((void **)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_41128C(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  if (!sub_110D20C()) {
    goto LABEL_7;
  }
  sub_6BAC((uint64_t)&v75);
  sub_188FC78(&v75, (uint64_t)"Start stitching pathlets", 24);
  v65[0] = operator new(0x88uLL);
  *(_OWORD *)&v65[1] = xmmword_20E7B30;
  strcpy((char *)v65[0], "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/PathDecoder.cpp");
  std::stringbuf::str();
  sub_110D220((uint64_t)v65, 181, (uint64_t)&v73);
  if (SHIBYTE(v74) < 0)
  {
    operator delete(v73);
    if ((SHIBYTE(v65[2]) & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_84:
    operator delete(v65[0]);
    goto LABEL_4;
  }
  if (SHIBYTE(v65[2]) < 0) {
    goto LABEL_84;
  }
LABEL_4:
  if (v78 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_7:
  uint64_t v70 = 0;
  *(_OWORD *)v68 = 0u;
  *(_OWORD *)v69 = 0u;
  *(_OWORD *)v67 = 0u;
  memset(v66, 0, sizeof(v66));
  memset(v65, 0, sizeof(v65));
  int v71 = 1065353216;
  char v7 = (unsigned __int8 *)(*a3 + 12);
  char v72 = 0;
  v61 = a3;
  if (!sub_51D60(v7)) {
    goto LABEL_23;
  }
  double v8 = sub_41084C(a1, **(void **)a2, *a3);
  double v9 = v8;
  uint64_t v10 = (uint64_t)(*a3 + 12);
  unint64_t v11 = (char *)v67[1];
  if (v67[1] >= v68[0])
  {
    double v14 = (char *)v67[0];
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v67[1] - (char *)v67[0]) >> 4);
    unint64_t v16 = v15 + 1;
    if (v15 + 1 > 0x555555555555555) {
      sub_2E00();
    }
    if (0x5555555555555556 * (((char *)v68[0] - (char *)v67[0]) >> 4) > v16) {
      unint64_t v16 = 0x5555555555555556 * (((char *)v68[0] - (char *)v67[0]) >> 4);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v68[0] - (char *)v67[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v17 = 0x555555555555555;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17 > 0x555555555555555) {
      sub_188D718();
    }
    double v18 = (char *)operator new(48 * v17);
    double v19 = (double *)&v18[48 * v15];
    double *v19 = 0.0;
    v19[1] = v9;
    long long v20 = *(_OWORD *)v10;
    uint64_t v21 = &v18[48 * v17];
    v19[4] = *(double *)(v10 + 16);
    *((_OWORD *)v19 + 1) = v20;
    *((unsigned char *)v19 + 40) = 0;
    double v13 = v19 + 6;
    if (v11 == v14)
    {
      a3 = v61;
      v67[0] = &v18[48 * v15];
      v67[1] = v19 + 6;
      v68[0] = v21;
      if (!v14) {
        goto LABEL_22;
      }
    }
    else
    {
      a3 = v61;
      do
      {
        unint64_t v22 = (char *)(v19 - 6);
        long long v23 = *((_OWORD *)v11 - 3);
        long long v24 = *((_OWORD *)v11 - 1);
        *((_OWORD *)v19 - 2) = *((_OWORD *)v11 - 2);
        *((_OWORD *)v19 - 1) = v24;
        *((_OWORD *)v19 - 3) = v23;
        v11 -= 48;
        v19 -= 6;
      }
      while (v11 != v14);
      v67[0] = v22;
      v67[1] = v13;
      v68[0] = v21;
      if (!v14) {
        goto LABEL_22;
      }
    }
    operator delete(v14);
  }
  else
  {
    *(void *)v67[1] = 0;
    *((double *)v11 + 1) = v8;
    long long v12 = *(_OWORD *)v10;
    *((void *)v11 + 4) = *(void *)(v10 + 16);
    *((_OWORD *)v11 + 1) = v12;
    v11[40] = 0;
    double v13 = v11 + 48;
  }
LABEL_22:
  v67[1] = v13;
LABEL_23:
  uint64_t v60 = a4;
  long long v25 = *(uint64_t **)a2;
  if (*(void *)(a2 + 8) == *(void *)a2)
  {
LABEL_54:
    sub_410C1C(a1, (uint64_t)v65, (uint64_t)a3);
    long long v50 = *(_OWORD *)&v65[2];
    *(_OWORD *)uint64_t v60 = *(_OWORD *)v65;
    *(_OWORD *)(v60 + 16) = v50;
    *(void **)(v60 + 32) = v66[0];
    v65[2] = 0;
    v65[3] = 0;
    *(_OWORD *)(v60 + 40) = *(_OWORD *)&v66[1];
    *(void **)(v60 + 56) = v66[3];
    memset(v66, 0, sizeof(v66));
    *(_OWORD *)(v60 + 64) = *(_OWORD *)v67;
    v67[0] = 0;
    v67[1] = 0;
    int v52 = v68[0];
    double v51 = v68[1];
    v68[0] = 0;
    v68[1] = 0;
    *(void *)(v60 + 80) = v52;
    *(void *)(v60 + 88) = v51;
    unint64_t v53 = (unint64_t)v69[0];
    int v54 = v69[1];
    *(void **)(v60 + 96) = v69[0];
    v69[0] = 0;
    uint64_t v55 = v70;
    *(void *)(v60 + 104) = v54;
    *(void *)(v60 + 112) = v55;
    *(_DWORD *)(v60 + 120) = v71;
    if (v55)
    {
      unint64_t v56 = v54[1];
      if ((v53 & (v53 - 1)) != 0)
      {
        if (v56 >= v53) {
          v56 %= v53;
        }
      }
      else
      {
        v56 &= v53 - 1;
      }
      int v54 = 0;
      v51[v56] = v60 + 104;
      v69[1] = 0;
      uint64_t v70 = 0;
    }
    *(unsigned char *)(v60 + 128) = v72;
    if (!v54) {
      goto LABEL_71;
    }
    goto LABEL_81;
  }
  unint64_t v26 = 0;
  while (1)
  {
    uint64_t v27 = (char *)v25[3 * v26];
    char v28 = (char *)v25[3 * v26 + 1];
    if (v27 != v28) {
      break;
    }
    ++v26;
LABEL_26:
    long long v25 = *(uint64_t **)a2;
    if (v26 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3)) {
      goto LABEL_54;
    }
  }
  char v29 = (char *)v65[2];
  if (v65[2] == v65[3])
  {
LABEL_32:
    sub_3455C4((uint64_t)&v65[2], (uint64_t)v29, (unint64_t)v27, v28, (v28 - v27) >> 3);
    unint64_t v30 = ((char *)v65[3] - (char *)v65[2]) >> 3;
    if (v30 <= (char *)v66[2] - (char *)v66[1])
    {
      if (v30 < (char *)v66[2] - (char *)v66[1]) {
        v66[2] = (char *)v66[1] + v30;
      }
    }
    else
    {
      sub_413BA0((uint64_t)&v66[1], v30 - ((char *)v66[2] - (char *)v66[1]), (const char *)&(*a3)[18 * v26 + 11] + 1);
    }
    ++v26;
    uint64_t v31 = (uint64_t)&(*a3)[18 * v26];
    uint64_t v32 = v31 + 48;
    if (!sub_51D60((unsigned __int8 *)(v31 + 48))) {
      goto LABEL_26;
    }
    double v33 = sub_41084C(a1, (uint64_t)v65[3] - 8, (_DWORD *)v31);
    double v34 = v33;
    int64_t v35 = (((char *)v65[3] - (char *)v65[2]) >> 3) - 1;
    int v36 = (char *)v67[1];
    if (v67[1] >= v68[0])
    {
      uint64_t v39 = (char *)v67[0];
      unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (((char *)v67[1] - (char *)v67[0]) >> 4);
      unint64_t v41 = v40 + 1;
      if (v40 + 1 > 0x555555555555555) {
        sub_2E00();
      }
      if (0x5555555555555556 * (((char *)v68[0] - (char *)v67[0]) >> 4) > v41) {
        unint64_t v41 = 0x5555555555555556 * (((char *)v68[0] - (char *)v67[0]) >> 4);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v68[0] - (char *)v67[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v42 = 0x555555555555555;
      }
      else {
        unint64_t v42 = v41;
      }
      if (v42 > 0x555555555555555) {
        sub_188D718();
      }
      uint64_t v43 = (char *)operator new(48 * v42);
      int v44 = (double *)&v43[48 * v40];
      *(void *)int v44 = v35;
      v44[1] = v34;
      long long v45 = *(_OWORD *)v32;
      v44[4] = *(double *)(v32 + 16);
      *((_OWORD *)v44 + 1) = v45;
      *((unsigned char *)v44 + 40) = 0;
      if (v36 == v39)
      {
        a3 = v61;
        int v38 = v44 + 6;
        v67[0] = v44;
        v67[1] = v44 + 6;
        v68[0] = &v43[48 * v42];
        if (!v39) {
          goto LABEL_51;
        }
      }
      else
      {
        char v46 = &v43[48 * v40];
        a3 = v61;
        do
        {
          uint64_t v47 = v46 - 48;
          long long v48 = *((_OWORD *)v36 - 3);
          long long v49 = *((_OWORD *)v36 - 1);
          *((_OWORD *)v46 - 2) = *((_OWORD *)v36 - 2);
          *((_OWORD *)v46 - 1) = v49;
          *((_OWORD *)v46 - 3) = v48;
          v36 -= 48;
          v46 -= 48;
        }
        while (v36 != v39);
        int v38 = v44 + 6;
        v67[0] = v47;
        v67[1] = v44 + 6;
        v68[0] = &v43[48 * v42];
        if (!v39) {
          goto LABEL_51;
        }
      }
      operator delete(v39);
    }
    else
    {
      *(void *)v67[1] = v35;
      *((double *)v36 + 1) = v33;
      long long v37 = *(_OWORD *)v32;
      *((void *)v36 + 4) = *(void *)(v31 + 64);
      *((_OWORD *)v36 + 1) = v37;
      v36[40] = 0;
      int v38 = v36 + 48;
    }
LABEL_51:
    v67[1] = v38;
    goto LABEL_26;
  }
  char v29 = (char *)v65[3] - 8;
  if (__PAIR64__(*((unsigned __int16 *)v65[3] - 2), *((_DWORD *)v65[3] - 2)) == __PAIR64__((unsigned __int16)WORD2(*(void *)v27), *(void *)v27)&& ((*(void *)v27 & 0x1000000000000) == 0) == (*((unsigned char *)v65[3] - 2) == 0))
  {
    v65[3] = (char *)v65[3] - 8;
    --v66[2];
    char v28 = (char *)v25[3 * v26 + 1];
    goto LABEL_32;
  }
  if (sub_110D440())
  {
    sub_6BAC((uint64_t)&v75);
    sub_188FC78(&v75, (uint64_t)"Decoded path is disconnected.", 29);
    v73 = operator new(0x88uLL);
    long long v74 = xmmword_20E7B30;
    strcpy((char *)v73, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/PathDecoder.cpp");
    std::stringbuf::str();
    sub_110D454((uint64_t)&v73, 202, (uint64_t)&v63);
    if (v64 < 0) {
      operator delete(v63);
    }
    if (SHIBYTE(v74) < 0) {
      operator delete(v73);
    }
    if (v78 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(void *)(v60 + 112) = 0;
  *(_OWORD *)(v60 + 80) = 0u;
  *(_OWORD *)(v60 + 96) = 0u;
  *(_OWORD *)(v60 + 48) = 0u;
  *(_OWORD *)(v60 + 64) = 0u;
  *(_OWORD *)(v60 + 16) = 0u;
  *(_OWORD *)(v60 + 32) = 0u;
  *(_OWORD *)uint64_t v60 = 0u;
  *(_DWORD *)(v60 + 120) = 1065353216;
  *(unsigned char *)(v60 + 128) = 0;
  int v54 = v69[1];
  if (v69[1])
  {
    do
    {
LABEL_81:
      v58 = (void *)*v54;
      v59 = (void *)v54[3];
      if (v59)
      {
        v54[4] = v59;
        operator delete(v59);
      }
      operator delete(v54);
      int v54 = v58;
    }
    while (v58);
  }
LABEL_71:
  int v57 = v68[1];
  v68[1] = 0;
  if (v57) {
    operator delete(v57);
  }
  if (v67[0])
  {
    v67[1] = v67[0];
    operator delete(v67[0]);
  }
  if (v66[1])
  {
    v66[2] = v66[1];
    operator delete(v66[1]);
  }
  if (v65[2])
  {
    v65[3] = v65[2];
    operator delete(v65[2]);
  }
}

void sub_411BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a42 < 0)
  {
    operator delete(a37);
    sub_111ECAC((uint64_t)&a43);
    sub_4106F8(&a20);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a43);
  sub_4106F8(&a20);
  _Unwind_Resume(a1);
}

void sub_411C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_411C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_411C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_411C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  if (a42 < 0)
  {
    operator delete(__p);
    if (a22 < 0)
    {
LABEL_5:
      operator delete(a17);
      sub_111ECAC((uint64_t)&a43);
      _Unwind_Resume(a1);
    }
  }
  else if (a22 < 0)
  {
    goto LABEL_5;
  }
  sub_111ECAC((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_411CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_411CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_411CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_411D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_411D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_411D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_411D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_411D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_411D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_411D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_411D9C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_417D70(&v57, 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3) - 1);
  unint64_t v6 = v58;
  if (v58 != v57)
  {
    uint64_t v7 = 0;
    uint64_t v8 = -24;
    uint64_t v9 = 88;
    while (1)
    {
      sub_41D4C4((char *)(*a1 + v9 - 88), (uint64_t)v47);
      sub_41D4C4((char *)(*a1 + v9 - 16), (uint64_t)&v52);
      sub_41BCA8((uint64_t)v47, (uint64_t)&v52, a2, a3, &v55);
      unint64_t v11 = &v57[v8];
      uint64_t v13 = (uint64_t)&v57[v8 + 24];
      long long v12 = *(void **)v13;
      if (*(void *)v13)
      {
        *((void *)v11 + 4) = v12;
        operator delete(v12);
        *(void *)uint64_t v13 = 0;
        *(void *)(v13 + 8) = 0;
        *(void *)(v13 + 16) = 0;
      }
      *(_OWORD *)uint64_t v13 = v55;
      *((void *)v11 + 5) = v56;
      long long v55 = 0uLL;
      uint64_t v56 = 0;
      if (*((void *)&v53 + 1))
      {
        uint64_t v54 = *((void *)&v53 + 1);
        operator delete(*((void **)&v53 + 1));
      }
      if (__p)
      {
        long long v49 = __p;
        operator delete(__p);
      }
      unint64_t v14 = v7 + 1;
      unint64_t v15 = v57;
      uint64_t v16 = *(void *)&v57[v8 + 24];
      uint64_t v17 = *(void *)&v57[v8 + 32];
      if (v16 != v17)
      {
        unint64_t v18 = v17 - v16;
        if (v18 < 9) {
          goto LABEL_27;
        }
        goto LABEL_13;
      }
      if (sub_110D384()) {
        break;
      }
LABEL_23:
      sub_41BCA8(*a1 + v9 - 88, *a1 + v9 - 16, a2, a3, v47);
      long long v23 = &v57[v8];
      uint64_t v25 = (uint64_t)&v57[v8 + 24];
      long long v24 = *(void **)v25;
      if (*(void *)v25)
      {
        *((void *)v23 + 4) = v24;
        operator delete(v24);
        *(void *)uint64_t v25 = 0;
        *(void *)(v25 + 8) = 0;
        *(void *)(v25 + 16) = 0;
      }
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v47;
      *((void *)v23 + 5) = __p;
      unint64_t v15 = v57;
      uint64_t v16 = *(void *)&v57[v8 + 24];
      uint64_t v26 = *(void *)&v57[v8 + 32];
      if (v16 != v26)
      {
        unint64_t v18 = v26 - v16;
        if (v18 < 9)
        {
LABEL_27:
          if (v7)
          {
            uint64_t v20 = v7 - 1;
            char v28 = &v15[v8];
            uint64_t v27 = *(void *)&v15[v8];
            unint64_t v29 = *((void *)v28 + 1) - v27;
            if (v29 >= 9)
            {
              uint64_t v30 = *a1;
              int v52 = *(char **)(v29 + v27 - 16);
              v47[0] = 0;
              v47[1] = 0;
              __p = 0;
              (*(void (**)(uint64_t, char **, void **))(*(void *)a2 + 72))(a2, &v52, v47);
              *(void *)&long long v55 = v47;
              sub_422084(v30 + v9, (unint64_t ***)&v55);
              if (v47[0])
              {
                v47[1] = v47[0];
                operator delete(v47[0]);
              }
            }
            goto LABEL_31;
          }
LABEL_33:
          if (sub_110D2C8())
          {
            sub_6BAC((uint64_t)v47);
            sub_188FC78(v47, (uint64_t)"Found DFS pathlet between ", 26);
            uint64_t v32 = (void *)std::ostream::operator<<();
            sub_188FC78(v32, (uint64_t)" and ", 5);
            double v33 = (void *)std::ostream::operator<<();
            sub_188FC78(v33, (uint64_t)", ", 2);
            double v34 = (void *)std::ostream::operator<<();
            sub_188FC78(v34, (uint64_t)" segments", 9);
            int v52 = (char *)operator new(0x90uLL);
            long long v53 = xmmword_20E7B50;
            strcpy(v52, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletDFSDecoder.h");
            std::stringbuf::str();
            sub_110D2DC((uint64_t)&v52, 434, (uint64_t)&v55);
            goto LABEL_35;
          }
          goto LABEL_4;
        }
LABEL_13:
        uint64_t v19 = *a1;
        int v52 = *(char **)(v18 + v16 - 16);
        v47[0] = 0;
        v47[1] = 0;
        __p = 0;
        (*(void (**)(uint64_t, char **, void **))(*(void *)a2 + 72))(a2, &v52, v47);
        *(void *)&long long v55 = v47;
        sub_422084(v19 + v9, (unint64_t ***)&v55);
        if (v47[0])
        {
          v47[1] = v47[0];
          operator delete(v47[0]);
        }
        if (v7)
        {
          uint64_t v20 = v7 - 1;
LABEL_31:
          uint64_t v31 = &v57[24 * v20];
          if (*(void *)v31 != *((void *)v31 + 1)
            && !sub_41D608(a2, (unint64_t **)&v57[v8 + 24], (void **)v31))
          {
            *a4 = 0;
            a4[1] = 0;
            a4[2] = 0;
            long long v37 = v57;
            if (v57)
            {
              int v38 = v58;
              uint64_t v39 = v57;
              if (v58 != v57)
              {
                unint64_t v40 = v58;
                do
                {
                  unint64_t v42 = (void *)*((void *)v40 - 3);
                  v40 -= 24;
                  unint64_t v41 = v42;
                  if (v42)
                  {
                    *((void *)v38 - 2) = v41;
                    operator delete(v41);
                  }
                  int v38 = v40;
                }
                while (v40 != v37);
                uint64_t v39 = v57;
              }
              v58 = v37;
              operator delete(v39);
            }
            return;
          }
        }
        goto LABEL_33;
      }
      if (sub_110D384())
      {
        sub_6BAC((uint64_t)v47);
        sub_188FC78(v47, (uint64_t)"Decoding pathlet between ", 25);
        int64_t v35 = (void *)std::ostream::operator<<();
        sub_188FC78(v35, (uint64_t)" and ", 5);
        int v36 = (void *)std::ostream::operator<<();
        sub_188FC78(v36, (uint64_t)" failed using all scored segment(s).", 36);
        int v52 = (char *)operator new(0x90uLL);
        long long v53 = xmmword_20E7B50;
        strcpy(v52, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletDFSDecoder.h");
        std::stringbuf::str();
        sub_110D398((uint64_t)&v52, 411, (uint64_t)&v55);
LABEL_35:
        if (SHIBYTE(v56) < 0)
        {
          operator delete((void *)v55);
          if ((SHIBYTE(v53) & 0x80000000) == 0) {
            goto LABEL_37;
          }
        }
        else if ((SHIBYTE(v53) & 0x80000000) == 0)
        {
LABEL_37:
          v47[0] = v45;
          *(void **)((char *)v47 + *((void *)v45 - 3)) = v44;
          if (v51 < 0) {
            operator delete(v50);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
          goto LABEL_4;
        }
        operator delete(v52);
        goto LABEL_37;
      }
LABEL_4:
      uint64_t v10 = v57;
      unint64_t v6 = v58;
      v9 += 72;
      v8 += 24;
      ++v7;
      if (v14 >= 0xAAAAAAAAAAAAAAABLL * ((v58 - v57) >> 3)) {
        goto LABEL_46;
      }
    }
    sub_6BAC((uint64_t)v47);
    sub_188FC78(v47, (uint64_t)"Decoding pathlet between ", 25);
    uint64_t v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)" and ", 5);
    unint64_t v22 = (void *)std::ostream::operator<<();
    sub_188FC78(v22, (uint64_t)" failed using best scored segment(s).", 37);
    int v52 = (char *)operator new(0x90uLL);
    long long v53 = xmmword_20E7B50;
    strcpy(v52, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletDFSDecoder.h");
    std::stringbuf::str();
    sub_110D398((uint64_t)&v52, 406, (uint64_t)&v55);
    if (SHIBYTE(v56) < 0)
    {
      operator delete((void *)v55);
      if ((SHIBYTE(v53) & 0x80000000) == 0) {
        goto LABEL_20;
      }
    }
    else if ((SHIBYTE(v53) & 0x80000000) == 0)
    {
LABEL_20:
      v47[0] = v45;
      *(void **)((char *)v47 + *((void *)v45 - 3)) = v44;
      if (v51 < 0) {
        operator delete(v50);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_23;
    }
    operator delete(v52);
    goto LABEL_20;
  }
  uint64_t v10 = v58;
LABEL_46:
  *a4 = v10;
  a4[1] = v6;
  a4[2] = v59;
}

void sub_4125D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, void *a19, uint64_t a20)
{
  if (*(char *)(v20 - 121) < 0) {
    operator delete(*(void **)(v20 - 144));
  }
  if (*(char *)(v20 - 193) < 0) {
    operator delete(*(void **)(v20 - 216));
  }
  sub_111ECAC((uint64_t)&__p);
  sub_36094((void **)(v20 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_412728(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  uint64_t v5 = a4[1];
  unint64_t v6 = 0x8E38E38E38E38E39 * ((v5 - *a4) >> 3);
  if (v6 < 2) {
    return 1;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) != v6 - 1) {
    return 0;
  }
  v47[0] = (int8x8_t)a1;
  v47[1] = (int8x8_t)a1;
  int v54 = 0;
  char v51 = (char *)operator new(0x194uLL);
  int v52 = v51;
  long long v53 = v51 + 404;
  uint64_t v39 = 0;
  uint64_t v12 = 0;
  long long v48 = (char *)operator new(0x3F8uLL);
  long long v49 = v48;
  long long v50 = v48 + 1016;
  long long v55 = 0u;
  long long v56 = 0u;
  int v57 = 1065353216;
  v58 = 0;
  uint64_t v59 = 0;
  unint64_t v13 = 1;
  uint64_t v60 = 0;
  uint64_t v61 = a2;
  do
  {
    unint64_t v15 = v13 - 1;
    uint64_t v16 = *a3 + 24 * (v13 - 1);
    uint64_t v17 = *(unint64_t **)v16;
    if (*(void *)v16 != *(void *)(v16 + 8))
    {
      if (v12 != v15)
      {
        uint64_t v18 = v4 + 72 * v15;
        uint64_t v21 = *(_OWORD **)(v18 + 16);
        uint64_t v19 = (void *)(v18 + 16);
        uint64_t v20 = v21;
        long long v23 = v19 + 1;
        unint64_t v22 = (_OWORD *)v19[1];
        long long v24 = v21;
        if (v21 != v22)
        {
          unint64_t v25 = *v17;
          long long v24 = v20;
          while (__PAIR64__(*((unsigned __int16 *)v24 + 2), *(_DWORD *)v24) != __PAIR64__(WORD2(v25), v25)
               || (HIWORD(v25) & 1) == (*((unsigned char *)v24 + 6) == 0))
          {
            v24 += 2;
            if (v24 == v22) {
              goto LABEL_22;
            }
          }
        }
        if (v24 == v22)
        {
LABEL_22:
          if (sub_110D440())
          {
            sub_6BAC((uint64_t)v44);
            sub_188FC78(v44, (uint64_t)"Start segment of pathlet ", 25);
            uint64_t v32 = (void *)std::ostream::operator<<();
            sub_188FC78(v32, (uint64_t)" not found in the possible segments of point ", 45);
            std::ostream::operator<<();
            unint64_t v42 = operator new(0x90uLL);
            long long v43 = xmmword_20E7B50;
            strcpy((char *)v42, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletP2PDecoder.h");
            std::stringbuf::str();
            sub_110D454((uint64_t)&v42, 235, (uint64_t)__p);
            goto LABEL_24;
          }
LABEL_31:
          uint64_t v7 = 0;
          goto LABEL_32;
        }
        *(_OWORD *)int v44 = *v20;
        long long v26 = *(_OWORD *)v44;
        *(_OWORD *)&v44[16] = v20[1];
        long long v27 = *(_OWORD *)((char *)v24 + 12);
        *uint64_t v20 = *v24;
        *(_OWORD *)((char *)v20 + 12) = v27;
        *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)&v44[12];
        *long long v24 = v26;
        uint64_t v28 = *v19 + 32;
        if (v28 != *v23) {
          uint64_t *v23 = v28;
        }
        if ((sub_422210(a1, v47, a4, v12, v13 - 1, a2, a3) & 1) == 0)
        {
          if (sub_110D440())
          {
            sub_6BAC((uint64_t)v44);
            sub_188FC78(v44, (uint64_t)"Could not decode path between ", 30);
            unint64_t v29 = (void *)std::ostream::operator<<();
            sub_188FC78(v29, (uint64_t)" and ", 5);
            uint64_t v30 = (void *)std::ostream::operator<<();
            sub_188FC78(v30, (uint64_t)" (out of ", 9);
            uint64_t v31 = (void *)std::ostream::operator<<();
            sub_188FC78(v31, (uint64_t)")", 1);
            unint64_t v42 = operator new(0x90uLL);
            long long v43 = xmmword_20E7B50;
            strcpy((char *)v42, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletP2PDecoder.h");
            std::stringbuf::str();
            sub_110D454((uint64_t)&v42, 246, (uint64_t)__p);
            goto LABEL_24;
          }
          goto LABEL_31;
        }
        ++v39;
        uint64_t v4 = *a4;
        uint64_t v5 = a4[1];
      }
      uint64_t v12 = v13;
    }
    ++v13;
    unint64_t v14 = 0x8E38E38E38E38E39 * ((v5 - v4) >> 3);
  }
  while (v13 < v14);
  if ((sub_422210(a1, v47, a4, v12, v14 - 1, a2, a3) & 1) == 0)
  {
    if (sub_110D440())
    {
      sub_6BAC((uint64_t)v44);
      sub_188FC78(v44, (uint64_t)"Could not decode path between ", 30);
      int v38 = (void *)std::ostream::operator<<();
      sub_188FC78(v38, (uint64_t)" and ", 5);
      std::ostream::operator<<();
      unint64_t v42 = operator new(0x90uLL);
      long long v43 = xmmword_20E7B50;
      strcpy((char *)v42, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletP2PDecoder.h");
      std::stringbuf::str();
      sub_110D454((uint64_t)&v42, 258, (uint64_t)__p);
LABEL_24:
      if (v41 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v43) < 0) {
        operator delete(v42);
      }
      if (v46 < 0) {
        operator delete(v45);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    goto LABEL_31;
  }
  if (v39 && sub_110D2C8())
  {
    sub_6BAC((uint64_t)v44);
    sub_188FC78(v44, (uint64_t)"Ran ", 4);
    long long v37 = (void *)std::ostream::operator<<();
    sub_188FC78(v37, (uint64_t)" queries", 8);
    sub_5E5C(&v42, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletP2PDecoder.h");
    std::stringbuf::str();
    sub_110D2DC((uint64_t)&v42, 264, (uint64_t)__p);
    if (v41 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v43) < 0) {
      operator delete(v42);
    }
    sub_111ECAC((uint64_t)v44);
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 1;
  }
LABEL_32:
  if (v58)
  {
    uint64_t v59 = v58;
    operator delete(v58);
  }
  double v33 = (void *)v56;
  if ((void)v56)
  {
    do
    {
      double v34 = (void *)*v33;
      operator delete(v33);
      double v33 = v34;
    }
    while (v34);
  }
  int64_t v35 = (void *)v55;
  *(void *)&long long v55 = 0;
  if (v35) {
    operator delete(v35);
  }
  if (v51)
  {
    int v52 = v51;
    operator delete(v51);
  }
  if (v48)
  {
    long long v49 = v48;
    operator delete(v48);
  }
  return v7;
}

void sub_412E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    sub_111ECAC((uint64_t)&a23);
    sub_41B2CC((void *)(v23 - 240));
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a23);
  sub_41B2CC((void *)(v23 - 240));
  _Unwind_Resume(a1);
}

void sub_412F88(uint64_t a1, unsigned int *a2, double a3)
{
  LODWORD(a3) = *(_DWORD *)(a1 + 4);
  long double v5 = 3.14159265 - (double)*(unint64_t *)&a3 * 6.28318531 / 4294967300.0;
  double v6 = exp(v5);
  long double v7 = exp(-v5);
  long double v8 = atan((v6 - v7) * 0.5) * 57.2957795 * 0.0174532925;
  unint64_t v9 = *(void *)a1;
  unsigned int v21 = *(void *)a1;
  LODWORD(v9) = a2[1];
  long double v10 = 3.14159265 - (double)v9 * 6.28318531 / 4294967300.0;
  double v11 = exp(v10);
  long double v12 = exp(-v10);
  long double v13 = atan((v11 - v12) * 0.5) * 57.2957795 * 0.0174532925;
  v14.i64[0] = v21;
  v14.i64[1] = *a2;
  int64x2_t v15 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v14), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v22 = vsubq_f64((float64x2_t)v15, (float64x2_t)vdupq_laneq_s64(v15, 1)).f64[0];
  long double v16 = sin((v8 - v13) * 0.5);
  long double v17 = v16 * v16;
  double v18 = cos(v8);
  long double v19 = v18 * cos(v13);
  long double v20 = sin(0.5 * v22);
  atan2(sqrt(v17 + v19 * (v20 * v20)), sqrt(1.0 - (v17 + v19 * (v20 * v20))));
}

uint64_t *sub_413198(uint64_t *a1, uint64_t a2, double a3)
{
  uint64_t v5 = *a1;
  double v6 = (char *)a1 + *(void *)(*a1 - 24);
  int v7 = *((_DWORD *)v6 + 2);
  *((void *)v6 + 2) = 6;
  *(_DWORD *)((char *)a1 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(v5 - 24) + 8) & 0xFFFFFEFB | 4;
  LODWORD(a3) = *(_DWORD *)(a2 + 4);
  long double v8 = (double)*(unint64_t *)&a3 * -6.28318531 / 4294967300.0 + 3.14159265;
  double v9 = exp(v8);
  long double v10 = exp(-v8);
  atan((v9 - v10) * 0.5);
  double v11 = (void *)std::ostream::operator<<();
  sub_188FC78(v11, (uint64_t)",", 1);
  std::ostream::operator<<();
  if (*(_DWORD *)(a2 + 8) != 0x7FFFFFFF)
  {
    sub_188FC78(a1, (uint64_t)",", 1);
    std::ostream::operator<<();
  }
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = v7;
  return a1;
}

double sub_413338(char *a1, char *a2)
{
  sub_41366C(a1, (char *)&__s1);
  sub_41366C(a2, (char *)__p);
  uint64_t v3 = v16;
  unsigned __int8 v4 = v16;
  if ((v16 & 0x80u) == 0) {
    size_t v5 = v16;
  }
  else {
    size_t v5 = __n;
  }
  unint64_t v6 = v13;
  int v7 = (char)v13;
  if ((v13 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  double v8 = 1.0;
  if (v5 != v6) {
    goto LABEL_16;
  }
  if ((v13 & 0x80u) == 0) {
    double v9 = __p;
  }
  else {
    double v9 = (void **)__p[0];
  }
  if (((char)v16 & 0x80000000) == 0)
  {
    if (v16)
    {
      p_s1 = &__s1;
      while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v9)
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        double v9 = (void **)((char *)v9 + 1);
        if (!--v3) {
          goto LABEL_15;
        }
      }
    }
    else
    {
LABEL_15:
      double v8 = 0.0;
    }
LABEL_16:
    if (((char)v13 & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_23:
    operator delete(__p[0]);
    if ((v16 & 0x80) == 0) {
      return v8;
    }
    goto LABEL_24;
  }
  if (!memcmp(__s1, v9, __n)) {
    double v8 = 0.0;
  }
  else {
    double v8 = 1.0;
  }
  if (v7 < 0) {
    goto LABEL_23;
  }
LABEL_17:
  if ((v4 & 0x80) == 0) {
    return v8;
  }
LABEL_24:
  operator delete(__s1);
  return v8;
}

void sub_413448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_413464(_DWORD *a1, _DWORD *a2, double a3, double a4, double a5, double a6)
{
  LODWORD(a3) = *a2;
  LODWORD(a4) = a2[1];
  LODWORD(a6) = *a1;
  double v21 = (double)*(unint64_t *)&a3 * 360.0 / 4294967300.0
      + -180.0
      - ((double)*(unint64_t *)&a6 * 360.0 / 4294967300.0
       + -180.0);
  long double v7 = 3.14159265 - (double)*(unint64_t *)&a4 * 6.28318531 / 4294967300.0;
  double v8 = exp(v7);
  long double v9 = exp(-v7);
  *(double *)&unint64_t v10 = atan((v8 - v9) * 0.5);
  double v11 = *(double *)&v10 * 57.2957795;
  LODWORD(v10) = a1[1];
  long double v12 = 3.14159265 - (double)v10 * 6.28318531 / 4294967300.0;
  double v13 = exp(v12);
  long double v14 = exp(-v12);
  long double v15 = atan((v13 - v14) * 0.5) * 57.2957795;
  long double v16 = cos((v11 + v15) * 0.5 * 3.14159265 / 180.0);
  double v17 = atan2(v21 * v16, v11 - v15);
  if (v17 < 0.0) {
    double v17 = v17 + 6.28318531;
  }
  for (double i = v17 * 180.0 / 3.14159265; i >= 180.0; double i = i + -360.0)
    ;
  for (; i < -180.0; double i = i + 360.0)
    ;
  for (; i < 0.0; double i = i + 360.0)
    ;
  unsigned int v19 = llround(i);
  return v19 - 360 * (((int)(11651 * v19) >> 22) + ((11651 * v19) >> 31));
}

void *sub_41366C@<X0>(char *a1@<X0>, char *a2@<X8>)
{
  int v3 = a1[23];
  if (v3 >= 0) {
    unsigned __int8 v4 = a1;
  }
  else {
    unsigned __int8 v4 = *(char **)a1;
  }
  if (v3 >= 0) {
    unint64_t v5 = a1[23];
  }
  else {
    unint64_t v5 = *((void *)a1 + 1);
  }
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    __n128 result = operator new(v7 + 1);
    *((void *)a2 + 1) = v5;
    *((void *)a2 + 2) = v8 | 0x8000000000000000;
    *(void *)a2 = result;
  }
  else
  {
    a2[23] = v5;
    __n128 result = a2;
    if (!v5)
    {
      *a2 = 0;
      return result;
    }
  }
  if (v5 < 0x20 || (unint64_t)((unsigned char *)result - v4) < 0x20)
  {
    long double v9 = result;
    unint64_t v10 = v4;
    do
    {
LABEL_21:
      char v15 = *v10++;
      *v9++ = v15;
    }
    while (v10 != &v4[v5]);
    goto LABEL_22;
  }
  long double v9 = (char *)result + (v5 & 0xFFFFFFFFFFFFFFE0);
  unint64_t v10 = &v4[v5 & 0xFFFFFFFFFFFFFFE0];
  double v11 = (long long *)(v4 + 16);
  long double v12 = (char *)result + 16;
  unint64_t v13 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v14 = *v11;
    *(v12 - 1) = *(v11 - 1);
    *long double v12 = v14;
    v11 += 2;
    v12 += 2;
    v13 -= 32;
  }
  while (v13);
  if (v5 != (v5 & 0x7FFFFFFFFFFFFFE0)) {
    goto LABEL_21;
  }
LABEL_22:
  *long double v9 = 0;
  if (a2[23] >= 0) {
    long double v16 = a2;
  }
  else {
    long double v16 = *(char **)a2;
  }
  do
  {
    __n128 result = (void *)__tolower(*v4);
    *v16++ = (char)result;
    ++v4;
    --v5;
  }
  while (v5);
  return result;
}

void sub_4137B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_4137CC(uint64_t *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = *(unsigned int *)(v3 + 4 * a2);
  uint64_t v5 = *a1;
  uint64_t v6 = *a1 + 8 * v4;
  unsigned int v7 = *(_DWORD *)(v6 + 4);
  *(_DWORD *)(v6 + 4) = *a3;
  if (*a3 >= v7)
  {
    unsigned int v21 = (4 * v4) | 1;
    unsigned int v22 = *((_DWORD *)a1 + 12);
    if (v21 < v22)
    {
      int v23 = 4 * v4;
      do
      {
        unsigned int v24 = v23 + 5;
        if (v24 >= v22) {
          uint64_t v25 = v22;
        }
        else {
          uint64_t v25 = v24;
        }
        if (v21 >= v25) {
          break;
        }
        uint64_t v26 = v4;
        unsigned int v27 = *(_DWORD *)(v5 + 8 * v4 + 4);
        uint64_t v28 = v21;
        unint64_t v29 = (unsigned int *)(v5 + 4 + 8 * v21);
        LODWORD(v4) = -1;
        unsigned int v30 = v27;
        do
        {
          unsigned int v32 = *v29;
          v29 += 2;
          unsigned int v31 = v32;
          if (v32 < v30)
          {
            unsigned int v30 = v31;
            LODWORD(v4) = v28;
          }
          ++v28;
        }
        while (v25 != v28);
        if (v4 >= v22) {
          break;
        }
        uint64_t v33 = 8 * v26;
        int v34 = *(_DWORD *)(v5 + 8 * v26);
        int64_t v35 = (double *)(v5 + 8 * v4);
        double result = *v35;
        *(_DWORD *)int64_t v35 = v34;
        *((_DWORD *)v35 + 1) = v27;
        *(double *)(v5 + v33) = result;
        uint64_t v37 = 4 * *(unsigned int *)v35;
        uint64_t v38 = 4 * LODWORD(result);
        int v39 = *(_DWORD *)(v3 + v37);
        *(_DWORD *)(v3 + v37) = *(_DWORD *)(v3 + v38);
        *(_DWORD *)(v3 + v38) = v39;
        int v23 = 4 * v4;
        unsigned int v21 = (4 * v4) | 1;
        unsigned int v22 = *((_DWORD *)a1 + 12);
      }
      while (v21 < v22);
    }
  }
  else if (v4)
  {
    do
    {
      unsigned int v8 = v4 - 1;
      uint64_t v9 = (v4 - 1) >> 2;
      uint64_t v10 = v5 + 8 * v9;
      unsigned int v13 = *(_DWORD *)(v10 + 4);
      double v11 = (unsigned int *)(v10 + 4);
      unsigned int v12 = v13;
      uint64_t v14 = v5 + 8 * v4;
      unsigned int v17 = *(_DWORD *)(v14 + 4);
      char v15 = (unsigned int *)(v14 + 4);
      unsigned int v16 = v17;
      if (v12 < v17) {
        break;
      }
      uint64_t v18 = 8 * v4;
      uint64_t v19 = *(unsigned int *)(v5 + v18);
      *(_DWORD *)(v5 + v18) = *(_DWORD *)(v5 + 8 * v9);
      *(_DWORD *)(v5 + 8 * v9) = v19;
      unsigned int *v15 = v12;
      *double v11 = v16;
      uint64_t v4 = 4 * *(unsigned int *)(v5 + v18);
      int v20 = *(_DWORD *)(v3 + v4);
      *(_DWORD *)(v3 + v4) = *(_DWORD *)(v3 + 4 * v19);
      *(_DWORD *)(v3 + 4 * v19) = v20;
      LODWORD(v4) = v8 >> 2;
    }
    while (v8 >= 4);
  }
  return result;
}

void sub_41392C(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  unint64_t v5 = a2;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = a1 + 24;
  uint64_t v9 = v7 - v6;
  unint64_t v10 = (v7 - v6) >> 2;
  if (v10 <= a2)
  {
    do
    {
      unint64_t v15 = (v9 >> 1) | 1;
      if (v15 > v10)
      {
        sub_500DC(v8, v15 - v10, &flt_20E7BB0);
        uint64_t v6 = *(void *)(a1 + 24);
        uint64_t v7 = *(void *)(a1 + 32);
      }
      else if (v15 < v10)
      {
        uint64_t v7 = v6 + 4 * v15;
        *(void *)(a1 + 32) = v7;
      }
      uint64_t v9 = v7 - v6;
      unint64_t v10 = (v7 - v6) >> 2;
    }
    while (v10 <= v5);
  }
  unint64_t v11 = v5 | ((unint64_t)*a3 << 32);
  unsigned int v13 = *(char **)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  if ((unint64_t)v13 < v12)
  {
    *(void *)unsigned int v13 = v11;
    uint64_t v14 = (uint64_t)(v13 + 8);
    goto LABEL_30;
  }
  unsigned int v16 = *(char **)a1;
  uint64_t v17 = (uint64_t)&v13[-*(void *)a1];
  uint64_t v18 = v17 >> 3;
  unint64_t v19 = (v17 >> 3) + 1;
  if (v19 >> 61) {
    sub_2E00();
  }
  uint64_t v20 = v12 - (void)v16;
  if (v20 >> 2 > v19) {
    unint64_t v19 = v20 >> 2;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v19;
  }
  if (v21)
  {
    if (v21 >> 61) {
      sub_188D718();
    }
    unsigned int v22 = operator new(8 * v21);
    int v23 = (unint64_t *)&v22[8 * v18];
    unsigned int v24 = &v22[8 * v21];
    unint64_t *v23 = v11;
    uint64_t v14 = (uint64_t)(v23 + 1);
    uint64_t v25 = (char *)(v13 - v16);
    if (v13 == v16) {
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  unsigned int v22 = 0;
  int v23 = (unint64_t *)(8 * v18);
  unsigned int v24 = 0;
  *(void *)(8 * v18) = v11;
  uint64_t v14 = 8 * v18 + 8;
  uint64_t v25 = (char *)(v13 - v16);
  if (v13 != v16)
  {
LABEL_21:
    unint64_t v26 = (unint64_t)(v25 - 8);
    if (v26 < 0x58) {
      goto LABEL_39;
    }
    if ((unint64_t)(v13 - v22 - v17) < 0x20) {
      goto LABEL_39;
    }
    uint64_t v27 = (v26 >> 3) + 1;
    uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v29 = &v13[-v28];
    int v23 = (unint64_t *)((char *)v23 - v28);
    unsigned int v30 = &v22[8 * v18 - 16];
    unsigned int v31 = v13 - 16;
    uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      _OWORD *v30 = v33;
      v30 -= 2;
      v31 -= 32;
      v32 -= 4;
    }
    while (v32);
    unsigned int v13 = v29;
    if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_39:
      do
      {
        unint64_t v34 = *((void *)v13 - 1);
        v13 -= 8;
        *--int v23 = v34;
      }
      while (v13 != v16);
    }
    unsigned int v13 = *(char **)a1;
  }
LABEL_28:
  *(void *)a1 = v23;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v24;
  if (v13) {
    operator delete(v13);
  }
LABEL_30:
  *(void *)(a1 + 8) = v14;
  uint64_t v35 = *(void *)(a1 + 24);
  *(_DWORD *)(v35 + 4 * v5) = *(_DWORD *)(a1 + 48);
  unsigned int v36 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v36 + 1;
  if (v36)
  {
    uint64_t v37 = *(char **)a1;
    do
    {
      unsigned int v38 = v36 - 1;
      uint64_t v39 = (v36 - 1) >> 2;
      unint64_t v40 = &v37[8 * v39];
      unsigned int v43 = *((_DWORD *)v40 + 1);
      char v41 = (unsigned int *)(v40 + 4);
      unsigned int v42 = v43;
      int v44 = &v37[8 * v36];
      unsigned int v47 = *((_DWORD *)v44 + 1);
      long long v45 = (unsigned int *)(v44 + 4);
      unsigned int v46 = v47;
      if (v42 < v47) {
        break;
      }
      uint64_t v48 = 8 * v36;
      uint64_t v49 = *(unsigned int *)&v37[v48];
      *(_DWORD *)&v37[v48] = *(_DWORD *)&v37[8 * v39];
      *(_DWORD *)&v37[8 * v39] = v49;
      *long long v45 = v42;
      *char v41 = v46;
      uint64_t v50 = 4 * *(unsigned int *)&v37[v48];
      int v51 = *(_DWORD *)(v35 + v50);
      *(_DWORD *)(v35 + v50) = *(_DWORD *)(v35 + 4 * v49);
      *(_DWORD *)(v35 + 4 * v49) = v51;
      unsigned int v36 = v38 >> 2;
    }
    while (v38 > 3);
  }
}

void sub_413BA0(uint64_t a1, unint64_t a2, const char *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = (char *)v7;
  if (v6 - v7 >= a2)
  {
    if (!a2)
    {
LABEL_58:
      *(void *)(a1 + 8) = v8;
      return;
    }
    uint64_t v18 = (char *)(v7 + a2);
    if (a2 >= 8 && (v7 >= (unint64_t)(a3 + 1) || v18 <= a3))
    {
      if (a2 < 0x20)
      {
        unint64_t v20 = 0;
        goto LABEL_36;
      }
      unint64_t v20 = a2 & 0xFFFFFFFFFFFFFFE0;
      int8x16_t v28 = vld1q_dup_s8(a3);
      unint64_t v29 = (int8x16_t *)(v7 + 16);
      unint64_t v30 = a2 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v29[-1] = v28;
        *unint64_t v29 = v28;
        v29 += 2;
        v30 -= 32;
      }
      while (v30);
      if (v20 == a2) {
        goto LABEL_57;
      }
      if ((a2 & 0x18) != 0)
      {
LABEL_36:
        uint64_t v8 = (char *)(v7 + (a2 & 0xFFFFFFFFFFFFFFF8));
        int8x8_t v31 = vld1_dup_s8(a3);
        uint64_t v32 = (int8x8_t *)(v7 + v20);
        unint64_t v33 = v20 - (a2 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          *v32++ = v31;
          v33 += 8;
        }
        while (v33);
        if ((a2 & 0xFFFFFFFFFFFFFFF8) == a2) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      uint64_t v8 = (char *)(v7 + v20);
    }
    do
LABEL_56:
      *v8++ = *a3;
    while (v8 != v18);
LABEL_57:
    uint64_t v8 = (char *)(v7 + a2);
    goto LABEL_58;
  }
  uint64_t v9 = *(char **)a1;
  unint64_t v10 = v7 - *(void *)a1;
  unint64_t v11 = v10 + a2;
  if ((uint64_t)(v10 + a2) < 0) {
    sub_2E00();
  }
  unint64_t v12 = v6 - (void)v9;
  if (2 * v12 > v11) {
    unint64_t v11 = 2 * v12;
  }
  if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v13 = v11;
  }
  if (v13)
  {
    uint64_t v14 = operator new(v13);
    unint64_t v15 = (unint64_t)&v14[v10];
    unsigned int v16 = &v14[v10 + a2];
    uint64_t v17 = &v14[v10];
    if (a2 < 8) {
      goto LABEL_41;
    }
  }
  else
  {
    uint64_t v14 = 0;
    unint64_t v15 = v7 - *(void *)a1;
    unsigned int v16 = (char *)(v10 + a2);
    uint64_t v17 = (char *)v15;
    if (a2 < 8) {
      goto LABEL_41;
    }
  }
  if (v15 < (unint64_t)(a3 + 1))
  {
    uint64_t v17 = (char *)v15;
    if (v16 > a3) {
      goto LABEL_41;
    }
  }
  if (a2 < 0x20)
  {
    unint64_t v21 = 0;
    goto LABEL_28;
  }
  unint64_t v21 = a2 & 0xFFFFFFFFFFFFFFE0;
  int8x16_t v22 = vld1q_dup_s8(a3);
  int v23 = (int8x16_t *)&v14[v10 + 16];
  unint64_t v24 = a2 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v23[-1] = v22;
    int8x16_t *v23 = v22;
    v23 += 2;
    v24 -= 32;
  }
  while (v24);
  if (v21 != a2)
  {
    if ((a2 & 0x18) == 0)
    {
      uint64_t v17 = (char *)(v15 + v21);
      goto LABEL_41;
    }
LABEL_28:
    uint64_t v17 = (char *)(v15 + (a2 & 0xFFFFFFFFFFFFFFF8));
    int8x8_t v25 = vld1_dup_s8(a3);
    unint64_t v26 = (int8x8_t *)&v14[v21 + v7 - (void)v9];
    unint64_t v27 = v21 - (a2 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *v26++ = v25;
      v27 += 8;
    }
    while (v27);
    if ((a2 & 0xFFFFFFFFFFFFFFF8) == a2) {
      goto LABEL_42;
    }
    do
LABEL_41:
      *v17++ = *a3;
    while (v17 != v16);
  }
LABEL_42:
  if ((char *)v7 == v9) {
    goto LABEL_63;
  }
  if (v10 >= 8 && (unint64_t)(v9 - v14) >= 0x20)
  {
    if (v10 < 0x20)
    {
      unint64_t v34 = 0;
      goto LABEL_51;
    }
    unint64_t v34 = v10 & 0xFFFFFFFFFFFFFFE0;
    uint64_t v35 = (long long *)(v7 - 16);
    unsigned int v36 = &v14[v7 - 16 - (void)v9];
    unint64_t v37 = v10 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v38 = *v35;
      *(v36 - 1) = *(v35 - 1);
      _OWORD *v36 = v38;
      v36 -= 2;
      v35 -= 2;
      v37 -= 32;
    }
    while (v37);
    if (v10 == v34) {
      goto LABEL_62;
    }
    if ((v10 & 0x18) != 0)
    {
LABEL_51:
      uint64_t v8 = (char *)(v7 - (v10 & 0xFFFFFFFFFFFFFFF8));
      v15 -= v10 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v39 = (char *)(v7 - v34 - 8);
      int64_t v40 = v39 - v9;
      unint64_t v41 = v34 - (v10 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v42 = *(void *)v39;
        v39 -= 8;
        *(void *)&v14[v40] = v42;
        v40 -= 8;
        v41 += 8;
      }
      while (v41);
      if (v10 == (v10 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_62;
      }
      goto LABEL_60;
    }
    v15 -= v34;
    uint64_t v8 = (char *)(v7 - v34);
  }
LABEL_60:
  unsigned int v43 = (unsigned char *)(v15 - 1);
  do
  {
    char v44 = *--v8;
    *v43-- = v44;
  }
  while (v8 != v9);
LABEL_62:
  unint64_t v15 = (unint64_t)v14;
LABEL_63:
  *(void *)a1 = v15;
  *(void *)(a1 + 8) = v16;
  *(void *)(a1 + 16) = &v14[v13];
  if (v9)
  {
    operator delete(v9);
  }
}

void *sub_413EC0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL) {
      sub_2E00();
    }
    uint64_t v3 = 72 * a2;
    uint64_t v4 = (char *)operator new(72 * a2);
    *a1 = v4;
    a1[1] = v4;
    unint64_t v5 = &v4[v3];
    a1[2] = &v4[v3];
    do
    {
      *(_OWORD *)(v4 + 8) = 0uLL;
      *(_OWORD *)(v4 + 24) = 0uLL;
      *(_OWORD *)(v4 + 40) = 0uLL;
      *(void *)uint64_t v4 = -1;
      *((_DWORD *)v4 + 2) = 0x7FFFFFFF;
      *((void *)v4 + 2) = 0;
      *((void *)v4 + 3) = 0;
      *((void *)v4 + 4) = 0;
      *((_DWORD *)v4 + 10) = 0x7FFFFFFF;
      *((void *)v4 + 7) = 0;
      *((void *)v4 + 8) = 0;
      v4 += 72;
      v3 -= 72;
    }
    while (v3);
    a1[1] = v5;
  }
  return a1;
}

void sub_413F70(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20A848C((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_413F90(uint64_t a1@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v96 = 0;
  unint64_t v97 = 0;
  v95 = 0;
  LODWORD(v98) = 0x7FFFFFFF;
  BYTE8(v98) = 0;
  long long v99 = 0uLL;
  unint64_t v11 = &off_24F8110;
  if (*(void *)(a1 + 32)) {
    unint64_t v11 = *(uint64_t (****)())(a1 + 32);
  }
  double v12 = (double)*((int *)v11 + 7) / 10000000.0;
  uint64_t v13 = -1;
  if (v12 <= 180.0)
  {
    double v14 = (double)*((int *)v11 + 6) / 10000000.0;
    if (v14 >= -85.0511288 && v14 <= 85.0511288 && v12 >= -180.0)
    {
      double v15 = fmax(v14, -85.0511288);
      double v16 = v15 * 3.14159265 / 180.0;
      BOOL v17 = v15 < 85.0511288;
      double v18 = 1.48442223;
      if (v17) {
        double v18 = v16;
      }
      long double v19 = sin(v18);
      LODWORD(v20) = ((log((v19 + 1.0) / (1.0 - v19)) / -12.5663706 + 0.5) * 4294967300.0);
      if (v20 >= 0xFFFFFFFE) {
        uint64_t v20 = 4294967294;
      }
      else {
        uint64_t v20 = v20;
      }
      uint64_t v13 = ((v12 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v20 << 32);
    }
  }
  uint64_t v93 = v13;
  int v94 = 0x7FFFFFFF;
  int v21 = *(_DWORD *)(a1 + 16);
  if ((v21 & 0x10) != 0) {
    int v94 = *(_DWORD *)(a1 + 56);
  }
  if ((v21 & 0x100) != 0)
  {
    unsigned int v22 = *(_DWORD *)(a1 + 72);
    if (v22 >= 0x7FFFFFFF) {
      unsigned int v22 = 0x7FFFFFFF;
    }
    LODWORD(v98) = v22;
  }
  BYTE4(v98) = *(unsigned char *)(a1 + 76);
  unsigned int v23 = *(_DWORD *)(a1 + 80);
  if (v23 >= 4) {
    LOBYTE(v23) = 0;
  }
  BYTE5(v98) = v23 & (v21 << 21 >> 31);
  if ((v21 & 4) != 0)
  {
    sub_110C758((uint64_t)v87, *(void *)(a1 + 40));
    BYTE8(v98) = v87[0];
    long long v99 = *(_OWORD *)&v87[8];
  }
  if (*(unsigned char *)(a5 + 112)) {
    char v24 = a2;
  }
  else {
    char v24 = 0;
  }
  if ((v24 & 1) != 0
    || (v80 = (void *)(**(uint64_t (***)(uint64_t, void))a4)(a4, *(void *)(a1 + 48)), int v81 = v25,
                                                                                                   !(_BYTE)v25))
  {
    if (!sub_110D2C8()) {
      goto LABEL_41;
    }
    sub_6BAC((uint64_t)v87);
    sub_188FC78(v87, (uint64_t)"Road ID ", 8);
    unint64_t v30 = (void *)std::ostream::operator<<();
    sub_188FC78(v30, (uint64_t)" not found or origin segment, fallback to map-matching.", 55);
    v85 = operator new(0x90uLL);
    long long v86 = xmmword_20E7B60;
    strcpy((char *)v85, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/SupportPointSnapper.h");
    std::stringbuf::str();
    sub_110D2DC((uint64_t)&v85, 255, (uint64_t)&v83);
    if (SHIBYTE(v84) < 0)
    {
      operator delete(v83);
      if ((SHIBYTE(v86) & 0x80000000) == 0) {
        goto LABEL_38;
      }
    }
    else if ((SHIBYTE(v86) & 0x80000000) == 0)
    {
LABEL_38:
      if (v92 < 0) {
        operator delete(v91);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
LABEL_41:
      v85 = 0;
      long long v86 = 0uLL;
      (*(void (**)(uint64_t, uint64_t *, void, void **))(*(void *)a4 + 24))(a4, &v93, *(unsigned int *)(a5 + 8), &v85);
      if (!sub_110D2C8()) {
        goto LABEL_47;
      }
      sub_6BAC((uint64_t)v87);
      sub_188FC78(v87, (uint64_t)"Found ", 6);
      int8x8_t v31 = (void *)std::ostream::operator<<();
      sub_188FC78(v31, (uint64_t)" nearest candidates", 19);
      v83 = operator new(0x90uLL);
      long long v84 = xmmword_20E7B60;
      strcpy((char *)v83, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/SupportPointSnapper.h");
      std::stringbuf::str();
      sub_110D2DC((uint64_t)&v83, 258, (uint64_t)&v80);
      if (v82 < 0)
      {
        operator delete(v80);
        if ((SHIBYTE(v84) & 0x80000000) == 0) {
          goto LABEL_44;
        }
      }
      else if ((SHIBYTE(v84) & 0x80000000) == 0)
      {
LABEL_44:
        if (v92 < 0) {
          operator delete(v91);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
LABEL_47:
        unint64_t v33 = (uint64_t *)v85;
        uint64_t v32 = (uint64_t *)v86;
        if (v85 == (void *)v86) {
          goto LABEL_58;
        }
        if (v24)
        {
          v83 = &v95;
          if (v85 == (void *)v86)
          {
LABEL_54:
            unint64_t v35 = 126 - 2 * __clz(((char *)v96 - (char *)v95) >> 5);
            if (v96 == v95) {
              uint64_t v36 = 0;
            }
            else {
              uint64_t v36 = v35;
            }
            sub_415BD4(v95, v96, (uint64_t)v87, v36, 1);
            sub_415A80((long long **)&v95);
            unint64_t v37 = v95;
            double v38 = *((double *)v95 + 2);
            if (v38 == 1.79769313e308)
            {
LABEL_58:
              *(_OWORD *)(a6 + 8) = 0u;
              *(_OWORD *)(a6 + 24) = 0u;
              *(_OWORD *)(a6 + 40) = 0u;
              *(void *)a6 = -1;
              *(_DWORD *)(a6 + 8) = 0x7FFFFFFF;
              *(void *)(a6 + 16) = 0;
              *(void *)(a6 + 24) = 0;
              *(void *)(a6 + 32) = 0;
              *(_DWORD *)(a6 + 40) = 0x7FFFFFFF;
              *(unsigned char *)(a6 + 45) = 0;
              *(void *)(a6 + 56) = 0;
              *(void *)(a6 + 64) = 0;
              uint64_t v39 = v85;
              if (!v85) {
                goto LABEL_134;
              }
LABEL_133:
              *(void *)&long long v86 = v39;
              operator delete(v39);
              goto LABEL_134;
            }
            if (v95 == v96) {
              goto LABEL_131;
            }
            if (v38 > v38 + *(double *)a5)
            {
              long long v45 = v95;
LABEL_83:
              v96 = v45;
              unint64_t v37 = v45;
LABEL_131:
              long long v75 = v99;
              *(_OWORD *)(a6 + 40) = v98;
LABEL_132:
              *(void *)a6 = v93;
              *(_DWORD *)(a6 + 8) = v94;
              unint64_t v76 = v97;
              *(void *)(a6 + 16) = v95;
              *(void *)(a6 + 24) = v37;
              *(void *)(a6 + 32) = v76;
              v96 = 0;
              unint64_t v97 = 0;
              v95 = 0;
              *(_OWORD *)(a6 + 56) = v75;
              uint64_t v39 = v85;
              if (!v85) {
                goto LABEL_134;
              }
              goto LABEL_133;
            }
            while (1)
            {
              if (!sub_110D2C8()) {
                goto LABEL_118;
              }
              sub_6BAC((uint64_t)v87);
              sub_188FC78(v87, (uint64_t)"Candidate segment for geoid ", 28);
              v63 = (void *)std::ostream::operator<<();
              sub_188FC78(v63, (uint64_t)"(index=", 7);
              char v64 = (void *)std::ostream::operator<<();
              v65 = sub_188FC78(v64, (uint64_t)") (", 3);
              v67 = sub_413198(v65, (uint64_t)&v93, v66);
              v68 = sub_188FC78(v67, (uint64_t)"): ", 3);
              v69 = sub_2DD928(v68, *(void *)v37);
              sub_188FC78(v69, (uint64_t)", fraction: ", 12);
              uint64_t v70 = (void *)std::ostream::operator<<();
              sub_188FC78(v70, (uint64_t)", score: ", 9);
              std::ostream::operator<<();
              v83 = operator new(0x90uLL);
              long long v84 = xmmword_20E7B60;
              strcpy((char *)v83, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/SupportPointSnapper.h");
              std::stringbuf::str();
              sub_110D2DC((uint64_t)&v83, 314, (uint64_t)&v80);
              if (v82 < 0)
              {
                operator delete(v80);
                if (SHIBYTE(v84) < 0) {
LABEL_122:
                }
                  operator delete(v83);
              }
              else if (SHIBYTE(v84) < 0)
              {
                goto LABEL_122;
              }
              *(void *)v87 = v78;
              *(void *)&v87[*(void *)(v78 - 24)] = v77;
              if (v92 < 0) {
                operator delete(v91);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
LABEL_118:
              long long v45 = v37 + 8;
              if (v37 + 8 == v96)
              {
                v37 += 8;
                goto LABEL_131;
              }
              double v71 = *((double *)v37 + 6);
              v37 += 8;
              if (v71 > v38 + *(double *)a5) {
                goto LABEL_83;
              }
            }
          }
        }
        else
        {
          while (1)
          {
            uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a4 + 16))(a4, v33);
            if ((v41 & 1) != 0 && v40 == *(void *)(a1 + 48)) {
              break;
            }
            if (++v33 == v32) {
              goto LABEL_64;
            }
          }
          uint64_t v32 = v33;
LABEL_64:
          if (v32 != (uint64_t *)v86)
          {
            sub_414FBC(&v93, v32, a4, a3, (uint64_t)v87);
            uint64_t v42 = (long long *)v96;
            if ((unint64_t)v96 >= v97)
            {
              int v52 = v95;
              int64_t v53 = ((char *)v96 - (char *)v95) >> 5;
              unint64_t v54 = v53 + 1;
              if ((unint64_t)(v53 + 1) >> 59) {
                sub_2E00();
              }
              uint64_t v55 = v97 - (void)v95;
              if ((uint64_t)(v97 - (void)v95) >> 4 > v54) {
                unint64_t v54 = v55 >> 4;
              }
              if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v56 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v56 = v54;
              }
              if (v56)
              {
                if (v56 >> 59) {
                  sub_188D718();
                }
                int v57 = (char *)operator new(32 * v56);
              }
              else
              {
                int v57 = 0;
              }
              char v72 = (long long *)&v57[32 * v53];
              long long v73 = *(_OWORD *)&v87[16];
              *char v72 = *(_OWORD *)v87;
              v72[1] = v73;
              unint64_t v37 = (unsigned int *)(v72 + 2);
              if (v42 != (long long *)v52)
              {
                do
                {
                  long long v74 = *(v42 - 2);
                  *(long long *)((char *)v72 - 20) = *(long long *)((char *)v42 - 20);
                  *(v72 - 2) = v74;
                  v72 -= 2;
                  v42 -= 2;
                }
                while (v42 != (long long *)v52);
                uint64_t v42 = (long long *)v95;
              }
              v95 = (unsigned int *)v72;
              v96 = v37;
              unint64_t v97 = (unint64_t)&v57[32 * v56];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              long long v43 = *(_OWORD *)&v87[16];
              *(_OWORD *)v96 = *(_OWORD *)v87;
              v42[1] = v43;
              unint64_t v37 = (unsigned int *)(v42 + 2);
            }
            long long v75 = v99;
            *(_OWORD *)(a6 + 40) = v98;
            v96 = v37;
            goto LABEL_132;
          }
          unint64_t v33 = (uint64_t *)v85;
          v83 = &v95;
          if (v85 == v32) {
            goto LABEL_54;
          }
        }
        do
        {
          if (*(void *)(a1 + 48)) {
            char v34 = a2;
          }
          else {
            char v34 = 0;
          }
          sub_4154D4(&v93, a1, v33, a4, a5, v34, (uint64_t)v87);
          sub_4153B8((char ***)&v83, v87);
          ++v33;
        }
        while (v33 != v32);
        goto LABEL_54;
      }
      operator delete(v83);
      goto LABEL_44;
    }
    operator delete(v85);
    goto LABEL_38;
  }
  (*(void (**)(unsigned char *__return_ptr, uint64_t, void **, void))(*(void *)a4 + 32))(v87, a4, &v80, 0);
  int v26 = v88;
  if (v90 < 0) {
    operator delete(__p);
  }
  if (*(void *)&v87[8])
  {
    *(void *)&v87[16] = *(void *)&v87[8];
    operator delete(*(void **)&v87[8]);
  }
  if (v26)
  {
    sub_414FBC(&v93, &v80, a4, a3, (uint64_t)v87);
    unint64_t v27 = (long long *)v96;
    if ((unint64_t)v96 >= v97)
    {
      unsigned int v46 = v95;
      int64_t v47 = ((char *)v96 - (char *)v95) >> 5;
      unint64_t v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 59) {
        sub_2E00();
      }
      uint64_t v49 = v97 - (void)v95;
      if ((uint64_t)(v97 - (void)v95) >> 4 > v48) {
        unint64_t v48 = v49 >> 4;
      }
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v50 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v50 = v48;
      }
      if (v50)
      {
        if (v50 >> 59) {
          sub_188D718();
        }
        int v51 = (char *)operator new(32 * v50);
      }
      else
      {
        int v51 = 0;
      }
      v58 = (long long *)&v51[32 * v47];
      long long v59 = *(_OWORD *)&v87[16];
      long long *v58 = *(_OWORD *)v87;
      v58[1] = v59;
      unint64_t v29 = (unsigned int *)(v58 + 2);
      if (v27 != (long long *)v46)
      {
        do
        {
          long long v60 = *(v27 - 2);
          *(long long *)((char *)v58 - 20) = *(long long *)((char *)v27 - 20);
          *(v58 - 2) = v60;
          v58 -= 2;
          v27 -= 2;
        }
        while (v27 != (long long *)v46);
        unint64_t v27 = (long long *)v95;
      }
      v95 = (unsigned int *)v58;
      v96 = v29;
      unint64_t v97 = (unint64_t)&v51[32 * v50];
      if (v27) {
        operator delete(v27);
      }
    }
    else
    {
      long long v28 = *(_OWORD *)&v87[16];
      *(_OWORD *)v96 = *(_OWORD *)v87;
      v27[1] = v28;
      unint64_t v29 = (unsigned int *)(v27 + 2);
    }
    long long v61 = v99;
    *(_OWORD *)(a6 + 40) = v98;
    *(void *)a6 = v93;
    *(_DWORD *)(a6 + 8) = v94;
    unint64_t v62 = v97;
    *(void *)(a6 + 16) = v95;
    *(void *)(a6 + 24) = v29;
    *(void *)(a6 + 32) = v62;
    v96 = 0;
    unint64_t v97 = 0;
    v95 = 0;
    *(_OWORD *)(a6 + 56) = v61;
  }
  else
  {
    if (sub_110D2C8())
    {
      sub_6BAC((uint64_t)v87);
      sub_188FC78(v87, (uint64_t)"Road ID ", 8);
      char v44 = (void *)std::ostream::operator<<();
      sub_188FC78(v44, (uint64_t)" is no longer navigable.", 24);
      v85 = operator new(0x90uLL);
      long long v86 = xmmword_20E7B60;
      strcpy((char *)v85, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/SupportPointSnapper.h");
      std::stringbuf::str();
      sub_110D2DC((uint64_t)&v85, 243, (uint64_t)&v83);
      if (SHIBYTE(v84) < 0) {
        operator delete(v83);
      }
      if (SHIBYTE(v86) < 0) {
        operator delete(v85);
      }
      if (v92 < 0) {
        operator delete(v91);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(_OWORD *)(a6 + 8) = 0u;
    *(_OWORD *)(a6 + 24) = 0u;
    *(_OWORD *)(a6 + 40) = 0u;
    *(void *)a6 = -1;
    *(_DWORD *)(a6 + 8) = 0x7FFFFFFF;
    *(void *)(a6 + 16) = 0;
    *(void *)(a6 + 24) = 0;
    *(void *)(a6 + 32) = 0;
    *(_DWORD *)(a6 + 40) = 0x7FFFFFFF;
    *(unsigned char *)(a6 + 45) = 0;
    *(void *)(a6 + 56) = 0;
    *(void *)(a6 + 64) = 0;
  }
LABEL_134:
  if (v95)
  {
    v96 = v95;
    operator delete(v95);
  }
}

void sub_414E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  sub_111ECAC((uint64_t)&a35);
  unint64_t v37 = *(void **)(v35 - 160);
  if (!v37) {
    _Unwind_Resume(a1);
  }
  *(void *)(v35 - 152) = v37;
  operator delete(v37);
  _Unwind_Resume(a1);
}

void sub_414FBC(_DWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  double v7 = 0.5;
  if (!a4) {
    goto LABEL_24;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void *, uint64_t))(*(void *)a3 + 32))(&v35, a3, a2, 1);
  sub_40F0AC((uint64_t *)&v36, a1, (uint64_t)v34, v9, v10, v11);
  uint64_t v13 = v36;
  BOOL v14 = 0xAAAAAAAAAAAAAAABLL * ((v37 - (char *)v36) >> 2) < 2 || v36 + 3 == (unsigned int *)v37;
  double v15 = 0.0;
  if (!v14)
  {
    double v16 = 1.79769313e308;
    double v17 = 0.0;
    double v18 = 0.0;
    do
    {
      sub_412F88((uint64_t)v13, v13 + 3, v12);
      double v20 = v19;
      sub_412F88((uint64_t)v13, v34, v19);
      double v22 = v21;
      sub_412F88((uint64_t)v34, v13 + 3, v21);
      double v12 = fmax(v22 + v23 - v20, 0.0);
      if (v12 < v16)
      {
        double v16 = v12;
        double v18 = v17 + v22;
      }
      double v17 = v17 + v20;
      char v24 = (char *)(v13 + 6);
      v13 += 3;
    }
    while (v24 != v37);
    double v15 = 0.0;
    if (v17 != 0.0)
    {
      if (v18 / v17 <= 1.0) {
        double v15 = v18 / v17;
      }
      else {
        double v15 = 1.0;
      }
    }
  }
  double v7 = fmax(v15, 0.0);
  if (sub_110D2C8())
  {
    sub_6BAC((uint64_t)v32);
    int v25 = sub_188FC78(v32, (uint64_t)"Support point start/end of path (", 33);
    unint64_t v27 = sub_413198(v25, (uint64_t)a1, v26);
    sub_188FC78(v27, (uint64_t)") fraction: ", 12);
    std::ostream::operator<<();
    unint64_t v30 = operator new(0x90uLL);
    long long v31 = xmmword_20E7B60;
    strcpy((char *)v30, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/SupportPointSnapper.h");
    std::stringbuf::str();
    sub_110D2DC((uint64_t)&v30, 97, (uint64_t)&v28);
    if (v29 < 0)
    {
      operator delete(v28);
      if ((SHIBYTE(v31) & 0x80000000) == 0) {
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v31) & 0x80000000) == 0)
    {
LABEL_17:
      if (v33 < 0) {
        operator delete((void *)v32[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_20;
    }
    operator delete(v30);
    goto LABEL_17;
  }
LABEL_20:
  if (v39 < 0) {
    operator delete(v38);
  }
  if (v36)
  {
    unint64_t v37 = (char *)v36;
    operator delete(v36);
  }
LABEL_24:
  *(void *)a5 = *a2;
  *(double *)(a5 + 8) = v7;
  *(void *)(a5 + 16) = 0;
  *(_DWORD *)(a5 + 24) = 0;
}

void sub_41532C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    sub_111ECAC((uint64_t)&a21);
    sub_40F05C(v21 - 176);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a21);
  sub_40F05C(v21 - 176);
  _Unwind_Resume(a1);
}

void sub_4153A4(_Unwind_Exception *a1)
{
  sub_40F05C(v1 - 176);
  _Unwind_Resume(a1);
}

char ***sub_4153B8(char ***a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v9 = *v4;
    uint64_t v10 = (v6 - *v4) >> 5;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59) {
      sub_2E00();
    }
    uint64_t v12 = v5 - (void)v9;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 59) {
        sub_188D718();
      }
      BOOL v14 = (char *)operator new(32 * v13);
    }
    else
    {
      BOOL v14 = 0;
    }
    double v15 = &v14[32 * v10];
    long long v16 = a2[1];
    *(_OWORD *)double v15 = *a2;
    *((_OWORD *)v15 + 1) = v16;
    uint64_t v8 = v15 + 32;
    if (v6 != v9)
    {
      do
      {
        long long v17 = *((_OWORD *)v6 - 2);
        *(_OWORD *)(v15 - 20) = *(_OWORD *)(v6 - 20);
        *((_OWORD *)v15 - 2) = v17;
        v15 -= 32;
        v6 -= 32;
      }
      while (v6 != v9);
      uint64_t v6 = *v4;
    }
    *uint64_t v4 = v15;
    v4[1] = v8;
    v4[2] = &v14[32 * v13];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    long long v7 = a2[1];
    *(_OWORD *)uint64_t v6 = *a2;
    *((_OWORD *)v6 + 1) = v7;
    uint64_t v8 = v6 + 32;
  }
  v4[1] = v8;
  return a1;
}

void sub_4154D4(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t))(*(void *)a4 + 32))(&v78, a4, a3, 1);
  sub_40F0AC((uint64_t *)&v79, a1, (uint64_t)v76, v11, v12, v13);
  double v19 = (unsigned int *)v79;
  double v18 = v80;
  BOOL v20 = 0xAAAAAAAAAAAAAAABLL * ((v80 - (unsigned char *)v79) >> 2) < 2 || (char *)v79 + 12 == v80;
  double v21 = 0.0;
  if (!v20)
  {
    double v22 = 1.79769313e308;
    double v23 = 0.0;
    double v24 = 0.0;
    do
    {
      int v25 = (char *)(v19 + 3);
      sub_412F88((uint64_t)v19, v19 + 3, v14);
      double v27 = v26;
      sub_412F88((uint64_t)v19, v76, v26);
      double v29 = v28;
      sub_412F88((uint64_t)v76, v19 + 3, v28);
      double v14 = fmax(v29 + v30 - v27, 0.0);
      if (v14 < v22)
      {
        double v22 = v14;
        double v24 = v23 + v29;
      }
      double v23 = v23 + v27;
      long long v31 = (char *)(v19 + 6);
      v19 += 3;
    }
    while (v31 != v80);
    double v18 = v25 + 12;
    double v14 = 0.0;
    double v15 = v24 / v23;
    double v16 = 1.0;
    if (v24 / v23 > 1.0) {
      double v15 = 1.0;
    }
    if (v23 == 0.0) {
      double v21 = 0.0;
    }
    else {
      double v21 = v15;
    }
  }
  int v67 = v76[3];
  unint64_t v32 = v77;
  unsigned int v33 = *(__int16 *)(a2 + 60)
      - 360 * (((11651 * *(__int16 *)(a2 + 60)) >> 22) + ((11651 * *(__int16 *)(a2 + 60)) >> 31));
  uint64_t v65 = *(void *)(a2 + 64);
  unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (unsigned char *)v79) >> 2) - 2;
  if (v34 >= v77) {
    unint64_t v34 = v77;
  }
  unsigned int v35 = sub_413464((_DWORD *)v79 + 3 * v34, (_DWORD *)v79 + 3 * v34 + 3, v14, v15, v16, v17);
  __int16 v40 = v35 - v33;
  int v41 = (__int16)(v35 - v33);
  int v42 = v35 - v33 - 360;
  if (v41 > 180) {
    __int16 v40 = v35 - v33 - 360;
  }
  if (v40 < -179) {
    v40 += 360;
  }
  if (v40 >= 0) {
    LOWORD(v43) = v40;
  }
  else {
    int v43 = -v40;
  }
  unsigned int v44 = v35;
  if ((unsigned __int16)v43 >= 0x5Au) {
    unsigned int v44 = (unsigned __int16)(v35 + 180) % 0x168u;
  }
  if (v32)
  {
    uint64_t v45 = v32 - 1;
    if (-2 - 0x5555555555555555 * ((v80 - (unsigned char *)v79) >> 2) < v32 - 1) {
      uint64_t v45 = -2 - 0x5555555555555555 * ((v80 - (unsigned char *)v79) >> 2);
    }
    unsigned int v35 = sub_413464((_DWORD *)v79 + 3 * v45, (_DWORD *)v79 + 3 * v45 + 3, v36, v37, v38, v39);
    int v41 = v35 - v33;
    int v42 = v35 - v33 - 360;
  }
  if ((__int16)v41 <= 180) {
    LOWORD(v46) = v41;
  }
  else {
    LOWORD(v46) = v42;
  }
  if ((__int16)v46 < -179) {
    LOWORD(v46) = v46 + 360;
  }
  if ((v46 & 0x8000u) != 0) {
    int v46 = -(__int16)v46;
  }
  if ((unsigned __int16)v46 >= 0x5Au)
  {
    unsigned int v35 = (unsigned __int16)(v35 + 180) % 0x168u;
    int v41 = v35 - v33;
    int v42 = v35 - v33 - 360;
  }
  double v47 = fmax(v21, 0.0);
  BOOL v48 = (unsigned __int16)v46 > 0x59u;
  v49.i32[0] = v42;
  v49.i32[1] = v44 - v33 - 360;
  int32x2_t v50 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(vshr_n_s32(vshl_n_s32((int32x2_t)__PAIR64__(v44 - v33, v41), 0x10uLL), 0x10uLL), (int32x2_t)0xB4000000B4), v49, (int8x8_t)__PAIR64__(v44 - v33, v41));
  int32x2_t v51 = vabs_s32(vshr_n_s32(vshl_n_s32((int32x2_t)vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xB2000000B2, vshr_n_s32(vshl_n_s32(v50, 0x10uLL), 0x10uLL)), (int8x8_t)vadd_s32(v50, vdup_n_s32(0x168u)), (int8x8_t)v50), 0x10uLL), 0x10uLL));
  if (vcgt_u32((uint32x2_t)vand_s8((int8x8_t)vdup_lane_s32(v51, 1), (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)vand_s8((int8x8_t)v51, (int8x8_t)0xFFFF0000FFFFLL)).u32[0])LOWORD(v44) = v35; {
  if ((unsigned __int16)v44 == (unsigned __int16)v35)
  }
    BOOL v52 = v48;
  else {
    BOOL v52 = (unsigned __int16)v43 > 0x59u;
  }
  uint64_t v75 = *a3;
  if (v52)
  {
    uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a4 + 8))(a4, a3);
    double v47 = 1.0 - v47;
    LODWORD(v75) = v53;
    BYTE6(v75) = BYTE6(v53);
    WORD2(v75) = WORD2(v53);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, void))(*(void *)a4 + 32))(&v69, a4, &v75, 0);
  int v54 = v72;
  if (v74 < 0) {
    operator delete(__p);
  }
  if (v70)
  {
    double v71 = v70;
    operator delete(v70);
  }
  if (v54)
  {
    double v55 = 0.0;
    double v56 = 0.0;
    if (v65 && (a6 & 1) == 0)
    {
      unsigned int v57 = v65 - (unsigned __int16)v78;
      if (v65 <= (unsigned __int16)v78) {
        unsigned int v57 = (unsigned __int16)v78 - v65;
      }
      if (HIDWORD(v65) == WORD1(v78)) {
        double v56 = 0.0;
      }
      else {
        double v56 = 1.0;
      }
      double v55 = (double)v57;
    }
    double v58 = sub_413338((char *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL), (char *)&v81);
    LOWORD(v59) = v44 - v33;
    if ((__int16)(v44 - v33) > 180) {
      LOWORD(v59) = v44 - v33 - 360;
    }
    if ((__int16)v59 < -179) {
      LOWORD(v59) = v59 + 360;
    }
    if ((v59 & 0x8000u) != 0) {
      int v59 = -(__int16)v59;
    }
    unsigned int v60 = (unsigned __int16)v59;
    int v61 = v67;
    double v62 = pow((double)v67 / 100.0, *(long double *)(a5 + 16));
    double v63 = v62
        + pow((double)v60, *(long double *)(a5 + 24))
        + v55 * *(double *)(a5 + 32)
        + v56 * *(double *)(a5 + 40)
        + v58 * *(double *)(a5 + 48);
  }
  else
  {
    double v63 = 1.79769313e308;
    int v61 = v67;
  }
  *(void *)a7 = v75;
  *(double *)(a7 + 8) = v47;
  *(double *)(a7 + 16) = v63;
  *(_DWORD *)(a7 + 24) = v61;
  if (v82 < 0) {
    operator delete(v81);
  }
  if (v79)
  {
    v80 = (char *)v79;
    operator delete(v79);
  }
}

void sub_415A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_415A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_415A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_415A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

long long **sub_415A80(long long **result)
{
  long long v2 = *result;
  uint64_t v1 = result[1];
  if (*result != v1 && *result + 2 != v1)
  {
    uint64_t v4 = 0;
    LODWORD(v5) = *(_DWORD *)v2;
    while (1)
    {
      int v6 = v5;
      unint64_t v5 = *(void *)&v2[v4 + 2];
      if (v6 == v5 && WORD2(v2[v4]) == WORD2(v5))
      {
        long long v7 = &v2[v4];
        if ((HIWORD(v5) & 1) != (BYTE6(v2[v4]) == 0)) {
          break;
        }
      }
      v4 += 2;
      if (&v2[v4 + 2] == v1) {
        return result;
      }
    }
    if (v7 != v1)
    {
      uint64_t v8 = &v2[v4 + 4];
      if (v8 != v1)
      {
        do
        {
          if (__PAIR64__(*((unsigned __int16 *)v7 + 2), *(_DWORD *)v7) != __PAIR64__((unsigned __int16)WORD2(*(void *)v8), *(void *)v8)|| (HIWORD(*(void *)v8) & 1) == (*((unsigned char *)v7 + 6) == 0))
          {
            long long v9 = *v8;
            *(long long *)((char *)v7 + 44) = *(long long *)((char *)v8 + 12);
            v7[2] = v9;
            v7 += 2;
          }
          v8 += 2;
        }
        while (v8 != v1);
        uint64_t v1 = result[1];
      }
      if (v7 + 2 != v1) {
        result[1] = v7 + 2;
      }
    }
  }
  return result;
}

void sub_415BD4(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
_OWORD *sub_416094(_OWORD *result, _OWORD *a2)
{
  if (result != a2)
  {
    long long v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      while (1)
      {
        char v6 = v4;
        uint64_t v4 = v2;
        double v7 = *((double *)v6 + 6);
        double v8 = *((double *)v6 + 2);
        if (v7 >= v8)
        {
          if (v8 < v7) {
            goto LABEL_6;
          }
          int v9 = *((_DWORD *)v6 + 14);
          int v18 = *((_DWORD *)v6 + 6);
          if (v9 >= v18
            && (v18 < v9
             || (((unint64_t)*(unsigned int *)v4 << 32) | ((unint64_t)*((unsigned __int16 *)v6 + 18) << 16) | (*((unsigned char *)v6 + 38) == 0)) >= ((*(void *)v6 >> 16) & 0xFFFF0000 | (*(void *)v6 << 32) | (unint64_t)((*(void *)v6 & 0xFF000000000000) == 0))))
          {
            goto LABEL_6;
          }
        }
        else
        {
          int v9 = *((_DWORD *)v6 + 14);
        }
        uint64_t v10 = *((unsigned int *)v6 + 8);
        uint64_t v11 = *((unsigned __int16 *)v6 + 18);
        int v12 = *((unsigned __int8 *)v6 + 38);
        uint64_t v19 = *(void *)((char *)v6 + 39);
        char v20 = *((unsigned char *)v6 + 47);
        *uint64_t v4 = *v6;
        char v5 = result;
        *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)((char *)v6 + 12);
        if (v6 == result) {
          goto LABEL_5;
        }
        uint64_t v13 = v3;
        while (1)
        {
          uint64_t v14 = (_OWORD *)((char *)result + v13);
          uint64_t v15 = (_OWORD *)((char *)result + v13 - 32);
          double v16 = *(double *)((char *)result + v13 - 16);
          if (v7 >= v16)
          {
            if (v16 < v7) {
              goto LABEL_23;
            }
            int v17 = *((_DWORD *)v14 - 2);
            if (v9 >= v17) {
              break;
            }
          }
LABEL_11:
          v6 -= 2;
          _OWORD *v14 = *v15;
          *(_OWORD *)((char *)v14 + 12) = *(_OWORD *)((char *)result + v13 - 20);
          v13 -= 32;
          if (!v13)
          {
            char v5 = result;
            goto LABEL_5;
          }
        }
        if (v17 >= v9) {
          break;
        }
LABEL_23:
        char v5 = v6;
LABEL_5:
        *(_DWORD *)char v5 = v10;
        *((_WORD *)v5 + 2) = v11;
        *((unsigned char *)v5 + 6) = v12;
        *((unsigned char *)v5 + 15) = v20;
        *(void *)((char *)v5 + 7) = v19;
        *((double *)v5 + 2) = v7;
        *((_DWORD *)v5 + 6) = v9;
LABEL_6:
        long long v2 = v4 + 2;
        v3 += 32;
        if (v4 + 2 == a2) {
          return result;
        }
      }
      if (((v10 << 32) | (v11 << 16) | (unint64_t)(v12 == 0)) >= ((*(void *)v15 >> 16) & 0xFFFF0000 | (*(void *)v15 << 32) | (unint64_t)((*(void *)v15 & 0xFF000000000000) == 0)))
      {
        char v5 = (_OWORD *)((char *)result + v13);
        goto LABEL_5;
      }
      goto LABEL_11;
    }
  }
  return result;
}

unsigned int *sub_41628C(unsigned int *result, unsigned int *a2)
{
  if (result != a2)
  {
    while (1)
    {
      if (result + 8 == a2) {
        return result;
      }
      long long v2 = result;
      result += 8;
      double v3 = *((double *)v2 + 6);
      double v4 = *((double *)v2 + 2);
      if (v3 >= v4)
      {
        if (v4 >= v3)
        {
          signed int v5 = v2[14];
          signed int v6 = v2[6];
          if (v5 < v6
            || v6 >= v5
            && (((unint64_t)*result << 32) | ((unint64_t)*((unsigned __int16 *)v2 + 18) << 16) | (*((unsigned char *)v2 + 38) == 0)) < ((*(void *)v2 >> 16) & 0xFFFF0000 | (*(void *)v2 << 32) | (unint64_t)((*(void *)v2 & 0xFF000000000000) == 0)))
          {
            goto LABEL_11;
          }
        }
      }
      else
      {
        signed int v5 = v2[14];
LABEL_11:
        uint64_t v7 = *result;
        uint64_t v8 = *((unsigned __int16 *)v2 + 18);
        char v9 = *((unsigned char *)v2 + 38);
        uint64_t v13 = *(void *)((char *)v2 + 39);
        char v14 = *((unsigned char *)v2 + 47);
        for (double i = result; ; i -= 8)
        {
          *(_OWORD *)double i = *((_OWORD *)i - 2);
          *(_OWORD *)(i + 3) = *(_OWORD *)(i - 5);
          double v11 = *((double *)i - 6);
          if (v3 >= v11)
          {
            if (v11 < v3) {
              break;
            }
            signed int v12 = *(i - 10);
            if (v5 >= v12
              && (v12 < v5
               || ((v7 << 32) | (v8 << 16) | (unint64_t)(v9 == 0)) >= ((*((void *)i - 8) >> 16) & 0xFFFF0000 | (*((void *)i - 8) << 32) | (unint64_t)((*((void *)i - 8) & 0xFF000000000000) == 0))))
            {
              break;
            }
          }
        }
        *(i - 8) = v7;
        *((_WORD *)i - 14) = v8;
        *((unsigned char *)i - 26) = v9;
        *(void *)((char *)i - 25) = v13;
        *((unsigned char *)i - 17) = v14;
        *((double *)i - 2) = v3;
        *(i - 2) = v5;
      }
    }
  }
  return result;
}

uint64_t sub_41642C(long long *a1, unsigned int *a2, unsigned int *a3)
{
  double v3 = *((double *)a2 + 2);
  double v4 = *((double *)a1 + 2);
  if (v3 < v4
    || v4 >= v3
    && ((signed int v20 = a2[6], v21 = *((_DWORD *)a1 + 6), v20 < v21)
     || v21 >= v20
     && (((unint64_t)*a2 << 32) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 16) | (*((unsigned char *)a2 + 6) == 0)) < ((*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | (unint64_t)((*(void *)a1 & 0xFF000000000000) == 0))))
  {
    double v5 = *((double *)a3 + 2);
    if (v5 < v3
      || v3 >= v5
      && ((signed int v22 = a3[6], v23 = a2[6], v22 < v23)
       || v23 >= v22
       && (((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0)) < ((*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | (unint64_t)((*(void *)a2 & 0xFF000000000000) == 0))))
    {
      *(_OWORD *)double v36 = *a1;
      long long v24 = *a1;
      *(_OWORD *)&v36[16] = a1[1];
      long long v25 = *(_OWORD *)(a3 + 3);
      *a1 = *(_OWORD *)a3;
      *(long long *)((char *)a1 + 12) = v25;
      *(_OWORD *)a3 = v24;
      *(_OWORD *)(a3 + 3) = *(_OWORD *)&v36[12];
      return 1;
    }
    *(_OWORD *)signed int v32 = *a1;
    long long v6 = *a1;
    *(_OWORD *)&v32[16] = a1[1];
    long long v7 = *(_OWORD *)(a2 + 3);
    *a1 = *(_OWORD *)a2;
    *(long long *)((char *)a1 + 12) = v7;
    *(_OWORD *)a2 = v6;
    *(_OWORD *)(a2 + 3) = *(_OWORD *)&v32[12];
    double v8 = *((double *)a3 + 2);
    double v9 = *((double *)a2 + 2);
    if (v8 < v9) {
      goto LABEL_5;
    }
    if (v9 < v8) {
      return 1;
    }
    signed int v28 = a3[6];
    signed int v29 = a2[6];
    if (v28 < v29) {
      goto LABEL_5;
    }
    if (v29 < v28) {
      return 1;
    }
    if ((((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0)) < ((*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | (unint64_t)((*(void *)a2 & 0xFF000000000000) == 0)))
    {
LABEL_5:
      *(_OWORD *)long long v33 = *(_OWORD *)a2;
      long long v10 = *(_OWORD *)a2;
      *(_OWORD *)&v33[16] = *((_OWORD *)a2 + 1);
      long long v11 = *(_OWORD *)(a3 + 3);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 3) = v11;
      *(_OWORD *)a3 = v10;
      *(_OWORD *)(a3 + 3) = *(_OWORD *)&v33[12];
      return 2;
    }
    return 1;
  }
  else
  {
    double v13 = *((double *)a3 + 2);
    if (v13 < v3) {
      goto LABEL_8;
    }
    if (v3 < v13) {
      return 0;
    }
    signed int v26 = a3[6];
    signed int v27 = a2[6];
    if (v26 < v27) {
      goto LABEL_8;
    }
    if (v27 < v26) {
      return 0;
    }
    if ((((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0)) < ((*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | (unint64_t)((*(void *)a2 & 0xFF000000000000) == 0)))
    {
LABEL_8:
      *(_OWORD *)unint64_t v34 = *(_OWORD *)a2;
      long long v14 = *(_OWORD *)a2;
      *(_OWORD *)&v34[16] = *((_OWORD *)a2 + 1);
      long long v15 = *(_OWORD *)(a3 + 3);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 3) = v15;
      *(_OWORD *)a3 = v14;
      *(_OWORD *)(a3 + 3) = *(_OWORD *)&v34[12];
      double v16 = *((double *)a2 + 2);
      double v17 = *((double *)a1 + 2);
      if (v16 < v17)
      {
LABEL_9:
        *(_OWORD *)unsigned int v35 = *a1;
        long long v18 = *a1;
        *(_OWORD *)&v35[16] = a1[1];
        long long v19 = *(_OWORD *)(a2 + 3);
        *a1 = *(_OWORD *)a2;
        *(long long *)((char *)a1 + 12) = v19;
        *(_OWORD *)a2 = v18;
        *(_OWORD *)(a2 + 3) = *(_OWORD *)&v35[12];
        return 2;
      }
      if (v17 >= v16)
      {
        signed int v30 = a2[6];
        signed int v31 = *((_DWORD *)a1 + 6);
        if (v30 < v31) {
          goto LABEL_9;
        }
        if (v31 >= v30)
        {
          if ((((unint64_t)*a2 << 32) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 16) | (*((unsigned char *)a2 + 6) == 0)) < ((*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | (unint64_t)((*(void *)a1 & 0xFF000000000000) == 0))) {
            goto LABEL_9;
          }
          return 1;
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
}

unsigned int *sub_4167B4(unsigned int *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned __int16 *)a1 + 2);
  int v4 = *((unsigned __int8 *)a1 + 6);
  uint64_t v27 = *(void *)((char *)a1 + 7);
  char v28 = *((unsigned char *)a1 + 15);
  double v5 = *((double *)a1 + 2);
  signed int v6 = a1[6];
  double v7 = *(double *)(a2 - 16);
  if (v5 < v7
    || v7 >= v5
    && ((signed int v8 = *(_DWORD *)(a2 - 8), v6 < v8)
     || v8 >= v6
     && ((v2 << 32) | (v3 << 16) | (unint64_t)(v4 == 0)) < ((*(void *)(a2 - 32) >> 16) & 0xFFFF0000 | (*(void *)(a2 - 32) << 32) | (unint64_t)((*(void *)(a2 - 32) & 0xFF000000000000) == 0))))
  {
    double i = a1 + 8;
    double v10 = *((double *)a1 + 6);
    if (v5 < v10) {
      goto LABEL_24;
    }
    long long v11 = a1 + 14;
    while (1)
    {
      if (v10 >= v5)
      {
        if (v6 < (int)*v11)
        {
LABEL_23:
          double i = v11 - 6;
          goto LABEL_24;
        }
        if ((int)*v11 >= v6
          && ((v2 << 32) | (v3 << 16) | (unint64_t)(v4 == 0)) < ((*((void *)v11 - 3) >> 16) & 0xFFFF0000 | (*((void *)v11 - 3) << 32) | (unint64_t)((*((void *)v11 - 3) & 0xFF000000000000) == 0)))
        {
          goto LABEL_24;
        }
      }
      i += 8;
      double v10 = *((double *)v11 + 3);
      v11 += 8;
      if (v5 < v10) {
        goto LABEL_23;
      }
    }
  }
  for (double i = a1 + 8; (unint64_t)i < a2; i += 8)
  {
    double v12 = *((double *)i + 2);
    if (v5 < v12) {
      break;
    }
    if (v12 >= v5)
    {
      signed int v13 = i[6];
      if (v6 < v13
        || v13 >= v6
        && ((v2 << 32) | (v3 << 16) | (unint64_t)(v4 == 0)) < ((*(void *)i >> 16) & 0xFFFF0000 | (*(void *)i << 32) | (unint64_t)((*(void *)i & 0xFF000000000000) == 0)))
      {
        break;
      }
    }
  }
LABEL_24:
  if ((unint64_t)i < a2)
  {
    for (unint64_t j = a2 - 48; ; j -= 32)
    {
      if (v5 >= v7)
      {
        if (v7 < v5) {
          break;
        }
        signed int v16 = *(_DWORD *)(j + 40);
        if (v6 >= v16
          && (v16 < v6
           || ((v2 << 32) | (v3 << 16) | (unint64_t)(v4 == 0)) >= ((*(void *)(j + 16) >> 16) & 0xFFFF0000 | (*(void *)(j + 16) << 32) | (unint64_t)((*(void *)(j + 16) & 0xFF000000000000) == 0))))
        {
          break;
        }
      }
      double v15 = *(double *)j;
      double v7 = v15;
    }
    a2 = j + 16;
  }
  if ((unint64_t)i < a2)
  {
    unint64_t v17 = (v2 << 32) | (v3 << 16) | (v4 == 0);
    do
    {
      *(_OWORD *)signed int v26 = *(_OWORD *)i;
      *(_OWORD *)&v26[16] = *((_OWORD *)i + 1);
      long long v18 = *(_OWORD *)a2;
      *(_OWORD *)(i + 3) = *(_OWORD *)(a2 + 12);
      *(_OWORD *)double i = v18;
      *(_OWORD *)(a2 + 12) = *(_OWORD *)&v26[12];
      *(_OWORD *)a2 = *(_OWORD *)v26;
      long long v19 = i + 8;
      double v20 = *((double *)i + 6);
      if (v5 < v20)
      {
        i += 8;
        goto LABEL_46;
      }
      signed int v21 = i + 14;
      while (1)
      {
        if (v20 < v5) {
          goto LABEL_39;
        }
        if (v6 < (int)*v21) {
          break;
        }
        if ((int)*v21 >= v6
          && v17 < ((*((void *)v21 - 3) >> 16) & 0xFFFF0000 | (*((void *)v21 - 3) << 32) | (unint64_t)((*((void *)v21 - 3) & 0xFF000000000000) == 0)))
        {
LABEL_44:
          double i = v21 - 6;
          goto LABEL_46;
        }
LABEL_39:
        v19 += 8;
        double v20 = *((double *)v21 + 3);
        v21 += 8;
        if (v5 < v20) {
          goto LABEL_44;
        }
      }
      double i = v19;
      do
      {
        do
        {
LABEL_46:
          a2 -= 32;
          double v22 = *(double *)(a2 + 16);
        }
        while (v5 < v22);
        if (v22 < v5) {
          break;
        }
        signed int v23 = *(_DWORD *)(a2 + 24);
      }
      while (v6 < v23
           || v23 >= v6
           && v17 < ((*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | (unint64_t)((*(void *)a2 & 0xFF000000000000) == 0)));
    }
    while ((unint64_t)i < a2);
  }
  if (i - 8 != a1)
  {
    long long v24 = *((_OWORD *)i - 2);
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(i - 5);
    *(_OWORD *)a1 = v24;
  }
  *(i - 8) = v2;
  *((_WORD *)i - 14) = v3;
  *((unsigned char *)i - 26) = v4;
  *((unsigned char *)i - 17) = v28;
  *(void *)((char *)i - 25) = v27;
  *((double *)i - 2) = v5;
  *(i - 2) = v6;
  return i;
}

unsigned int *sub_416B64(unsigned int *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  double v3 = *(double *)a1;
  uint64_t v4 = *((void *)a1 + 1);
  double v5 = *((double *)a1 + 2);
  signed int v6 = a1[6];
  unint64_t v7 = (*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | ((*(void *)a1 & 0xFF000000000000) == 0);
  while (1)
  {
    signed int v8 = (uint64_t *)&a1[v2];
    double v9 = *(double *)&a1[v2 + 12];
    if (v9 >= v5)
    {
      if (v5 < v9) {
        break;
      }
      signed int v10 = *((_DWORD *)v8 + 14);
      if (v10 >= v6
        && (v6 < v10
         || (((unint64_t)*((unsigned int *)v8 + 8) << 32) | ((unint64_t)LOWORD(a1[v2 + 9]) << 16) | (BYTE2(a1[v2 + 9]) == 0)) >= v7))
      {
        break;
      }
    }
    v2 += 8;
  }
  unint64_t v11 = (unint64_t)&a1[v2 + 8];
  if (v2 * 4)
  {
    double v12 = (_OWORD *)(a2 - 32);
    double v13 = *(double *)(a2 - 16);
    if (v13 >= v5)
    {
      unint64_t v14 = a2 - 48;
      while (1)
      {
        if (v5 >= v13)
        {
          signed int v16 = *(_DWORD *)(v14 + 40);
          if (v16 < v6) {
            goto LABEL_31;
          }
          if (v6 >= v16
            && (((unint64_t)*(unsigned int *)(v14 + 16) << 32) | ((unint64_t)*(unsigned __int16 *)(v14 + 20) << 16) | (*(unsigned char *)(v14 + 22) == 0)) < v7)
          {
            break;
          }
        }
        v12 -= 2;
        double v15 = *(double *)v14;
        v14 -= 32;
        double v13 = v15;
        if (v15 < v5) {
          goto LABEL_31;
        }
      }
    }
  }
  else
  {
    if (v11 >= a2)
    {
      double v22 = &a1[v2 + 8];
      goto LABEL_51;
    }
    double v12 = (_OWORD *)(a2 - 32);
    double v17 = *(double *)(a2 - 16);
    if (v17 >= v5)
    {
      unint64_t v14 = a2 - 48;
      while (1)
      {
        unint64_t v19 = v14 + 16;
        if (v5 < v17) {
          goto LABEL_20;
        }
        signed int v20 = *(_DWORD *)(v14 + 40);
        if (v20 < v6)
        {
LABEL_31:
          double v12 = (_OWORD *)(v14 + 16);
          break;
        }
        if (v6 < v20)
        {
LABEL_20:
          if (v11 >= v19) {
            break;
          }
        }
        else if ((((unint64_t)*(unsigned int *)(v14 + 16) << 32) | ((unint64_t)*(unsigned __int16 *)(v14 + 20) << 16) | (*(unsigned char *)(v14 + 22) == 0)) < v7 {
               || v11 >= v19)
        }
        {
          break;
        }
        v12 -= 2;
        double v18 = *(double *)v14;
        v14 -= 32;
        double v17 = v18;
        if (v18 < v5) {
          goto LABEL_31;
        }
      }
    }
  }
  double v22 = (unsigned int *)v11;
  if (v11 < (unint64_t)v12)
  {
    signed int v23 = v12;
    do
    {
      *(_OWORD *)unint64_t v34 = *(_OWORD *)v22;
      *(_OWORD *)&v34[16] = *((_OWORD *)v22 + 1);
      long long v25 = *v23;
      *(_OWORD *)(v22 + 3) = *(_OWORD *)((char *)v23 + 12);
      *(_OWORD *)double v22 = v25;
      *(_OWORD *)((char *)v23 + 12) = *(_OWORD *)&v34[12];
      _OWORD *v23 = *(_OWORD *)v34;
      do
      {
        do
        {
          v22 += 8;
          double v26 = *((double *)v22 + 2);
        }
        while (v26 < v5);
        if (v5 < v26) {
          break;
        }
        signed int v27 = v22[6];
      }
      while (v27 < v6
           || v6 >= v27
           && (((unint64_t)*v22 << 32) | ((unint64_t)*((unsigned __int16 *)v22 + 2) << 16) | (*((unsigned char *)v22 + 6) == 0)) < v7);
      long long v24 = v23 - 2;
      double v28 = *((double *)v23 - 2);
      if (v28 >= v5)
      {
        signed int v29 = v23 - 3;
        do
        {
          if (v5 >= v28)
          {
            signed int v31 = *((_DWORD *)v29 + 10);
            if (v31 < v6) {
              goto LABEL_35;
            }
            if (v6 >= v31
              && (((unint64_t)*((unsigned int *)v29 + 4) << 32) | ((unint64_t)*((unsigned __int16 *)v29
                                                                                            + 10) << 16) | (*((unsigned char *)v29 + 22) == 0)) < v7)
            {
              break;
            }
          }
          v24 -= 2;
          double v30 = *(double *)v29;
          v29 -= 2;
          double v28 = v30;
        }
        while (v30 >= v5);
        long long v24 = v29 + 1;
      }
LABEL_35:
      signed int v23 = v24;
    }
    while (v22 < (unsigned int *)v24);
  }
LABEL_51:
  if (v22 - 8 != a1)
  {
    long long v32 = *((_OWORD *)v22 - 2);
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(v22 - 5);
    *(_OWORD *)a1 = v32;
  }
  *((double *)v22 - 4) = v3;
  *((void *)v22 - 3) = v4;
  *((double *)v22 - 2) = v5;
  *(v22 - 2) = v6;
  return v22 - 8;
}

BOOL sub_416E54(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *((double *)a2 - 2);
      double v7 = *(double *)(a1 + 16);
      if (v6 < v7
        || v7 >= v6
        && ((int v28 = *(a2 - 2), v29 = *(_DWORD *)(a1 + 24), v28 < v29)
         || v29 >= v28
         && (((unint64_t)*(a2 - 8) << 32) | ((unint64_t)*((unsigned __int16 *)a2 - 14) << 16) | (*((unsigned char *)a2 - 26) == 0)) < ((*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | (unint64_t)((*(void *)a1 & 0xFF000000000000) == 0))))
      {
        signed int v8 = a2 - 8;
        *(_OWORD *)double v30 = *(_OWORD *)a1;
        long long v9 = *(_OWORD *)a1;
        *(_OWORD *)&v30[16] = *(_OWORD *)(a1 + 16);
        long long v10 = *(_OWORD *)(a2 - 5);
        *(_OWORD *)a1 = *((_OWORD *)a2 - 2);
        *(_OWORD *)(a1 + 12) = v10;
        *(_OWORD *)signed int v8 = v9;
        *(_OWORD *)(v8 + 3) = *(_OWORD *)&v30[12];
      }
      return result;
    case 3:
      sub_41642C((long long *)a1, (unsigned int *)(a1 + 32), a2 - 8);
      return 1;
    case 4:
      sub_4171DC(a1, (unsigned int *)(a1 + 32), (unsigned int *)(a1 + 64), a2 - 8);
      return 1;
    case 5:
      sub_4173E8(a1, (unsigned int *)(a1 + 32), (unsigned int *)(a1 + 64), (unsigned int *)(a1 + 96), a2 - 8);
      return 1;
    default:
      unint64_t v11 = (unsigned int *)(a1 + 64);
      sub_41642C((long long *)a1, (unsigned int *)(a1 + 32), (unsigned int *)(a1 + 64));
      double v12 = (unsigned int *)(a1 + 96);
      if ((unsigned int *)(a1 + 96) == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (2)
  {
    double v16 = *((double *)v12 + 2);
    double v17 = *((double *)v11 + 2);
    if (v16 >= v17)
    {
      if (v17 < v16) {
        goto LABEL_8;
      }
      signed int v18 = v12[6];
      signed int v27 = v11[6];
      if (v18 >= v27
        && (v27 < v18
         || (((unint64_t)*v12 << 32) | ((unint64_t)*((unsigned __int16 *)v12 + 2) << 16) | (*((unsigned char *)v12 + 6) == 0)) >= ((*(void *)v11 >> 16) & 0xFFFF0000 | (*(void *)v11 << 32) | (unint64_t)((*(void *)v11 & 0xFF000000000000) == 0))))
      {
        goto LABEL_8;
      }
    }
    else
    {
      signed int v18 = v12[6];
    }
    uint64_t v19 = *v12;
    uint64_t v20 = *((unsigned __int16 *)v12 + 2);
    int v21 = *((unsigned __int8 *)v12 + 6);
    uint64_t v31 = *(void *)((char *)v12 + 7);
    char v32 = *((unsigned char *)v12 + 15);
    *(_OWORD *)(v12 + 3) = *(_OWORD *)(v11 + 3);
    *(_OWORD *)double v12 = *(_OWORD *)v11;
    uint64_t v15 = a1;
    if (v11 == (unsigned int *)a1) {
      goto LABEL_7;
    }
    uint64_t v22 = v13;
    while (1)
    {
      uint64_t v23 = a1 + v22;
      long long v24 = (_OWORD *)(a1 + v22 + 32);
      double v25 = *(double *)(a1 + v22 + 48);
      if (v16 >= v25)
      {
        if (v25 < v16) {
          goto LABEL_25;
        }
        signed int v26 = *(_DWORD *)(v23 + 56);
        if (v18 >= v26) {
          break;
        }
      }
LABEL_13:
      v11 -= 8;
      *(_OWORD *)(v23 + 64) = *v24;
      *(_OWORD *)(v23 + 76) = *(_OWORD *)(a1 + v22 + 44);
      v22 -= 32;
      if (v22 == -64)
      {
        uint64_t v15 = a1;
        goto LABEL_7;
      }
    }
    if (v26 >= v18)
    {
      if (((v19 << 32) | (v20 << 16) | (unint64_t)(v21 == 0)) >= ((*(void *)v24 >> 16) & 0xFFFF0000 | (*(void *)v24 << 32) | (unint64_t)((*(void *)v24 & 0xFF000000000000) == 0)))
      {
        uint64_t v15 = a1 + v22 + 64;
        goto LABEL_7;
      }
      goto LABEL_13;
    }
LABEL_25:
    uint64_t v15 = (uint64_t)v11;
LABEL_7:
    *(_DWORD *)uint64_t v15 = v19;
    *(_WORD *)(v15 + 4) = v20;
    *(unsigned char *)(v15 + 6) = v21;
    *(unsigned char *)(v15 + 15) = v32;
    *(void *)(v15 + 7) = v31;
    *(double *)(v15 + 16) = v16;
    *(_DWORD *)(v15 + 24) = v18;
    if (++v14 == 8) {
      return v12 + 8 == a2;
    }
LABEL_8:
    unint64_t v11 = v12;
    v13 += 32;
    v12 += 8;
    if (v12 != a2) {
      continue;
    }
    return 1;
  }
}

__n128 sub_4171DC(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  sub_41642C((long long *)a1, a2, a3);
  result.n128_u64[0] = *((void *)a4 + 2);
  double v9 = *((double *)a3 + 2);
  if (result.n128_f64[0] < v9
    || v9 >= result.n128_f64[0]
    && ((v10 = a4[6], signed int v11 = a3[6], v10 < v11)
     || v11 >= v10
     && (((unint64_t)*a4 << 32) | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 16) | (*((unsigned char *)a4 + 6) == 0)) < ((*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | (unint64_t)((*(void *)a3 & 0xFF000000000000) == 0))))
  {
    *(_OWORD *)long long v24 = *(_OWORD *)a3;
    long long v12 = *(_OWORD *)a3;
    *(_OWORD *)&v24[16] = *((_OWORD *)a3 + 1);
    long long v13 = *(_OWORD *)(a4 + 3);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 3) = v13;
    *(_OWORD *)a4 = v12;
    result.n128_u64[1] = *(void *)&v24[20];
    *(_OWORD *)(a4 + 3) = *(_OWORD *)&v24[12];
    result.n128_u64[0] = *((void *)a3 + 2);
    double v14 = *((double *)a2 + 2);
    if (result.n128_f64[0] < v14
      || v14 >= result.n128_f64[0]
      && ((v15 = a3[6], signed int v16 = a2[6], v15 < v16)
       || v16 >= v15
       && (((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0)) < ((*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | (unint64_t)((*(void *)a2 & 0xFF000000000000) == 0))))
    {
      *(_OWORD *)double v25 = *(_OWORD *)a2;
      long long v17 = *(_OWORD *)a2;
      *(_OWORD *)&v25[16] = *((_OWORD *)a2 + 1);
      long long v18 = *(_OWORD *)(a3 + 3);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 3) = v18;
      *(_OWORD *)a3 = v17;
      result.n128_u64[1] = *(void *)&v25[20];
      *(_OWORD *)(a3 + 3) = *(_OWORD *)&v25[12];
      result.n128_u64[0] = *((void *)a2 + 2);
      double v19 = *(double *)(a1 + 16);
      if (result.n128_f64[0] < v19
        || v19 >= result.n128_f64[0]
        && ((signed int v20 = a2[6], v21 = *(_DWORD *)(a1 + 24), v20 < v21)
         || v21 >= v20
         && (((unint64_t)*a2 << 32) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 16) | (*((unsigned char *)a2 + 6) == 0)) < ((*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | (unint64_t)((*(void *)a1 & 0xFF000000000000) == 0))))
      {
        *(_OWORD *)signed int v26 = *(_OWORD *)a1;
        long long v22 = *(_OWORD *)a1;
        *(_OWORD *)&v26[16] = *(_OWORD *)(a1 + 16);
        long long v23 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 12) = v23;
        *(_OWORD *)a2 = v22;
        __n128 result = *(__n128 *)&v26[12];
        *(_OWORD *)(a2 + 3) = *(_OWORD *)&v26[12];
      }
    }
  }
  return result;
}

void sub_4173E8(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  sub_4171DC(a1, a2, a3, a4);
  double v10 = *((double *)a5 + 2);
  double v11 = *((double *)a4 + 2);
  if (v10 < v11
    || v11 >= v10
    && ((v32 = a5[6], signed int v33 = a4[6], v32 < v33)
     || v33 >= v32
     && (((unint64_t)*a5 << 32) | ((unint64_t)*((unsigned __int16 *)a5 + 2) << 16) | (*((unsigned char *)a5 + 6) == 0)) < ((*(void *)a4 >> 16) & 0xFFFF0000 | (*(void *)a4 << 32) | (unint64_t)((*(void *)a4 & 0xFF000000000000) == 0))))
  {
    *(_OWORD *)unint64_t v34 = *(_OWORD *)a4;
    long long v12 = *(_OWORD *)a4;
    *(_OWORD *)&v34[16] = *((_OWORD *)a4 + 1);
    long long v13 = *(_OWORD *)(a5 + 3);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 3) = v13;
    *(_OWORD *)a5 = v12;
    *(_OWORD *)(a5 + 3) = *(_OWORD *)&v34[12];
    double v14 = *((double *)a4 + 2);
    double v15 = *((double *)a3 + 2);
    if (v14 < v15
      || v15 >= v14
      && ((signed int v16 = a4[6], v17 = a3[6], v16 < v17)
       || v17 >= v16
       && (((unint64_t)*a4 << 32) | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 16) | (*((unsigned char *)a4 + 6) == 0)) < ((*(void *)a3 >> 16) & 0xFFFF0000 | (*(void *)a3 << 32) | (unint64_t)((*(void *)a3 & 0xFF000000000000) == 0))))
    {
      *(_OWORD *)unsigned int v35 = *(_OWORD *)a3;
      long long v18 = *(_OWORD *)a3;
      *(_OWORD *)&v35[16] = *((_OWORD *)a3 + 1);
      long long v19 = *(_OWORD *)(a4 + 3);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 3) = v19;
      *(_OWORD *)a4 = v18;
      *(_OWORD *)(a4 + 3) = *(_OWORD *)&v35[12];
      double v20 = *((double *)a3 + 2);
      double v21 = *((double *)a2 + 2);
      if (v20 < v21
        || v21 >= v20
        && ((signed int v22 = a3[6], v23 = a2[6], v22 < v23)
         || v23 >= v22
         && (((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0)) < ((*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | (unint64_t)((*(void *)a2 & 0xFF000000000000) == 0))))
      {
        *(_OWORD *)double v36 = *(_OWORD *)a2;
        long long v24 = *(_OWORD *)a2;
        *(_OWORD *)&v36[16] = *((_OWORD *)a2 + 1);
        long long v25 = *(_OWORD *)(a3 + 3);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 3) = v25;
        *(_OWORD *)a3 = v24;
        *(_OWORD *)(a3 + 3) = *(_OWORD *)&v36[12];
        double v26 = *((double *)a2 + 2);
        double v27 = *(double *)(a1 + 16);
        if (v26 < v27
          || v27 >= v26
          && ((signed int v28 = a2[6], v29 = *(_DWORD *)(a1 + 24), v28 < v29)
           || v29 >= v28
           && (((unint64_t)*a2 << 32) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 16) | (*((unsigned char *)a2 + 6) == 0)) < ((*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | (unint64_t)((*(void *)a1 & 0xFF000000000000) == 0))))
        {
          *(_OWORD *)double v37 = *(_OWORD *)a1;
          long long v30 = *(_OWORD *)a1;
          *(_OWORD *)&v37[16] = *(_OWORD *)(a1 + 16);
          long long v31 = *(_OWORD *)(a2 + 3);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 12) = v31;
          *(_OWORD *)a2 = v30;
          *(_OWORD *)(a2 + 3) = *(_OWORD *)&v37[12];
        }
      }
    }
  }
}

unsigned int *sub_4176B0(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  if ((unsigned int *)a1 != a2)
  {
    double v6 = a2;
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) >> 5;
    if ((uint64_t)a2 - a1 >= 33)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (uint64_t *)(a1 + 32 * v10);
      do
      {
        sub_417988(a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    long long v13 = v6;
    if (v6 != a3)
    {
      double v14 = v6;
      do
      {
        double v17 = *((double *)v14 + 2);
        double v18 = *(double *)(a1 + 16);
        if (v17 < v18
          || v18 >= v17
          && ((v19 = v14[6], signed int v20 = *(_DWORD *)(a1 + 24), v19 < v20)
           || v20 >= v19
           && (((unint64_t)*v14 << 32) | ((unint64_t)*((unsigned __int16 *)v14 + 2) << 16) | (*((unsigned char *)v14 + 6) == 0)) < ((*(void *)a1 >> 16) & 0xFFFF0000 | (*(void *)a1 << 32) | (unint64_t)((*(void *)a1 & 0xFF000000000000) == 0))))
        {
          *(_OWORD *)unsigned int v35 = *(_OWORD *)v14;
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)&v35[16] = *((_OWORD *)v14 + 1);
          long long v16 = *(_OWORD *)(a1 + 12);
          *(_OWORD *)double v14 = *(_OWORD *)a1;
          *(_OWORD *)(v14 + 3) = v16;
          *(_OWORD *)a1 = v15;
          *(_OWORD *)(a1 + 12) = *(_OWORD *)&v35[12];
          sub_417988(a1, a4, v9, (uint64_t *)a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 >= 33)
    {
      uint64_t v21 = (unint64_t)v8 >> 5;
      do
      {
        while (1)
        {
          uint64_t v24 = 0;
          *(_OWORD *)double v36 = *(_OWORD *)a1;
          *(_OWORD *)&v36[16] = *(_OWORD *)(a1 + 16);
          long long v25 = (unsigned int *)a1;
          do
          {
            double v27 = v25;
            v25 += 8 * v24 + 8;
            uint64_t v28 = 2 * v24;
            uint64_t v24 = (2 * v24) | 1;
            uint64_t v29 = v28 + 2;
            if (v29 < v21)
            {
              double v30 = *((double *)v25 + 2);
              double v31 = *((double *)v25 + 6);
              if (v30 < v31
                || v31 >= v30
                && ((v32 = v25[6], signed int v33 = v25[14], v32 < v33)
                 || v33 >= v32
                 && (((unint64_t)*v25 << 32) | ((unint64_t)*((unsigned __int16 *)v25 + 2) << 16) | (*((unsigned char *)v25 + 6) == 0)) < ((*((void *)v25 + 4) >> 16) & 0xFFFF0000 | (*((void *)v25 + 4) << 32) | (unint64_t)((*((void *)v25 + 4) & 0xFF000000000000) == 0))))
              {
                v25 += 8;
                uint64_t v24 = v29;
              }
            }
            long long v26 = *(_OWORD *)v25;
            *(_OWORD *)(v27 + 3) = *(_OWORD *)(v25 + 3);
            *(_OWORD *)double v27 = v26;
          }
          while (v24 <= (uint64_t)((unint64_t)(v21 - 2) >> 1));
          v6 -= 8;
          if (v25 == v6) {
            break;
          }
          long long v22 = *(_OWORD *)v6;
          *(_OWORD *)(v25 + 3) = *(_OWORD *)(v6 + 3);
          *(_OWORD *)long long v25 = v22;
          *(_OWORD *)double v6 = *(_OWORD *)v36;
          *(_OWORD *)(v6 + 3) = *(_OWORD *)&v36[12];
          sub_417C0C(a1, (uint64_t)(v25 + 8), a4, ((uint64_t)v25 - a1 + 32) >> 5);
          BOOL v23 = v21-- <= 2;
          if (v23) {
            return v13;
          }
        }
        *(_OWORD *)(v25 + 3) = *(_OWORD *)&v36[12];
        *(_OWORD *)long long v25 = *(_OWORD *)v36;
        BOOL v23 = v21-- <= 2;
      }
      while (!v23);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_417988(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 5)
    {
      uint64_t v6 = v4 >> 4;
      uint64_t v7 = (v4 >> 4) + 1;
      uint64_t v8 = (unsigned int *)(result + 32 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        double v10 = *((double *)v8 + 2);
        double v11 = *((double *)v8 + 6);
        if (v10 < v11
          || v11 >= v10
          && ((signed int v12 = v8[6], v13 = v8[14], v12 < v13)
           || v13 >= v12
           && (((unint64_t)*v8 << 32) | ((unint64_t)*((unsigned __int16 *)v8 + 2) << 16) | (*((unsigned char *)v8 + 6) == 0)) < ((*((void *)v8 + 4) >> 16) & 0xFFFF0000 | (*((void *)v8 + 4) << 32) | (unint64_t)((*((void *)v8 + 4) & 0xFF000000000000) == 0))))
        {
          v8 += 8;
          uint64_t v7 = v9;
        }
      }
      double v14 = *((double *)v8 + 2);
      double v15 = *((double *)a4 + 2);
      if (v14 >= v15)
      {
        signed int v16 = *((_DWORD *)a4 + 6);
        if (v15 >= v14)
        {
          signed int v18 = v8[6];
          if (v18 < v16) {
            return result;
          }
          unint64_t v17 = *a4;
          if (v16 >= v18
            && (((unint64_t)*v8 << 32) | ((unint64_t)*((unsigned __int16 *)v8 + 2) << 16) | (*((unsigned char *)v8 + 6) == 0)) < ((v17 >> 16) & 0xFFFF0000 | (v17 << 32) | ((v17 & 0xFF000000000000) == 0)))
          {
            return result;
          }
        }
        else
        {
          unint64_t v17 = *a4;
        }
        uint64_t v19 = a4[1];
        long long v20 = *(_OWORD *)v8;
        *(_OWORD *)((char *)a4 + 12) = *(_OWORD *)(v8 + 3);
        *(_OWORD *)a4 = v20;
        if (v5 >= v7)
        {
          while (1)
          {
            long long v22 = v8;
            uint64_t v23 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v8 = (unsigned int *)(result + 32 * v7);
            uint64_t v24 = v23 + 2;
            if (v24 < a3)
            {
              double v25 = *((double *)v8 + 2);
              double v26 = *((double *)v8 + 6);
              if (v25 < v26
                || v26 >= v25
                && ((v27 = v8[6], signed int v28 = v8[14], v27 < v28)
                 || v28 >= v27
                 && (((unint64_t)*v8 << 32) | ((unint64_t)*((unsigned __int16 *)v8 + 2) << 16) | (*((unsigned char *)v8 + 6) == 0)) < ((*((void *)v8 + 4) >> 16) & 0xFFFF0000 | (*((void *)v8 + 4) << 32) | (unint64_t)((*((void *)v8 + 4) & 0xFF000000000000) == 0))))
              {
                v8 += 8;
                uint64_t v7 = v24;
              }
            }
            double v29 = *((double *)v8 + 2);
            if (v29 < v15) {
              break;
            }
            if (v15 >= v29)
            {
              signed int v30 = v8[6];
              if (v30 < v16
                || v16 >= v30
                && (((unint64_t)*v8 << 32) | ((unint64_t)*((unsigned __int16 *)v8 + 2) << 16) | (*((unsigned char *)v8 + 6) == 0)) < ((v17 >> 16) & 0xFFFF0000 | (v17 << 32) | ((v17 & 0xFF000000000000) == 0)))
              {
                break;
              }
            }
            long long v21 = *(_OWORD *)v8;
            *(_OWORD *)((char *)v22 + 12) = *(_OWORD *)(v8 + 3);
            _OWORD *v22 = v21;
            if (v5 < v7) {
              goto LABEL_32;
            }
          }
          uint64_t v8 = (unsigned int *)v22;
        }
LABEL_32:
        *(void *)uint64_t v8 = v17;
        *((void *)v8 + 1) = v19;
        *((double *)v8 + 2) = v15;
        v8[6] = v16;
      }
    }
  }
  return result;
}

uint64_t sub_417C0C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (unsigned int *)(result + 32 * (v4 >> 1));
    uint64_t v7 = (void *)(a2 - 32);
    double v8 = *((double *)v6 + 2);
    double v9 = *(double *)(a2 - 16);
    if (v8 >= v9)
    {
      if (v9 < v8) {
        return result;
      }
      signed int v19 = v6[6];
      signed int v10 = *(_DWORD *)(a2 - 8);
      if (v19 >= v10
        && (v10 < v19
         || (((unint64_t)*v6 << 32) | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 16) | (*((unsigned char *)v6 + 6) == 0)) >= ((*v7 >> 16) & 0xFFFF0000 | (*v7 << 32) | (unint64_t)((*v7 & 0xFF000000000000) == 0))))
      {
        return result;
      }
    }
    else
    {
      signed int v10 = *(_DWORD *)(a2 - 8);
    }
    unint64_t v11 = *(void *)(a2 - 32);
    uint64_t v12 = *(void *)(a2 - 24);
    long long v13 = *(_OWORD *)v6;
    *(_OWORD *)(a2 - 20) = *(_OWORD *)(v6 + 3);
    *(_OWORD *)uint64_t v7 = v13;
    if (v4 >= 2)
    {
      while (1)
      {
        double v15 = v6;
        unint64_t v16 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (unsigned int *)(result + 32 * v5);
        double v17 = *((double *)v6 + 2);
        if (v17 >= v9)
        {
          if (v9 < v17) {
            break;
          }
          signed int v18 = v6[6];
          if (v18 >= v10
            && (v10 < v18
             || (((unint64_t)*v6 << 32) | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 16) | (*((unsigned char *)v6 + 6) == 0)) >= ((v11 >> 16) & 0xFFFF0000 | (v11 << 32) | ((v11 & 0xFF000000000000) == 0))))
          {
            break;
          }
        }
        long long v14 = *(_OWORD *)v6;
        *(_OWORD *)((char *)v15 + 12) = *(_OWORD *)(v6 + 3);
        _OWORD *v15 = v14;
        if (v16 <= 1) {
          goto LABEL_13;
        }
      }
      uint64_t v6 = (unsigned int *)v15;
    }
LABEL_13:
    *(void *)uint64_t v6 = v11;
    *((void *)v6 + 1) = v12;
    *((double *)v6 + 2) = v9;
    v6[6] = v10;
  }
  return result;
}

void *sub_417D70(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    unint64_t v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_417E1C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20A73AC((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_417E3C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, const void **a6@<X8>)
{
  uint64_t v186 = a5;
  v171[0] = (int8x8_t)a1;
  v171[1] = (int8x8_t)a1;
  int v178 = 0;
  v175 = operator new(0x194uLL);
  v176 = v175;
  v177 = (char *)v175 + 404;
  v172 = operator new(0x3F8uLL);
  v173 = v172;
  v174 = (char *)v172 + 1016;
  long long v179 = 0u;
  long long v180 = 0u;
  int v181 = 1065353216;
  v182 = 0;
  v183 = 0;
  uint64_t v184 = 0;
  uint64_t v185 = a2;
  unint64_t v11 = operator new(0x20uLL);
  long long v167 = xmmword_20E7BB4;
  v165 = (char *)(v11 + 8);
  *(_WORD *)unint64_t v11 = 10;
  v11[1] = 0;
  *((_WORD *)v11 + 4) = 60;
  v11[3] = 4;
  *((_WORD *)v11 + 8) = 120;
  v11[5] = 16;
  *((_WORD *)v11 + 12) = 180;
  v11[7] = 45;
  v163 = v11;
  v164 = v11 + 8;
  char v166 = 0;
  long long v168 = unk_20E7BC4;
  int v170 = 0;
  int v169 = 0;
  int v162 = 200000;
  uint64_t v12 = *a3;
  uint64_t v13 = *a3 + 72 * a5;
  int v14 = *(_DWORD *)(v13 + 8);
  uint64_t v155 = *(void *)v13;
  int v156 = v14;
  v159 = 0;
  v157 = 0;
  v158 = 0;
  unint64_t v16 = *(unsigned char **)(v13 + 16);
  double v15 = *(unsigned char **)(v13 + 24);
  uint64_t v17 = v15 - v16;
  if (v15 == v16)
  {
    uint64_t v28 = v12 + 72 * a5;
    long long v21 = *(_OWORD *)(v28 + 40);
    long long v161 = *(_OWORD *)(v28 + 56);
    long long v160 = v21;
  }
  else
  {
    if (v17 < 0) {
      sub_2E00();
    }
    signed int v18 = (char *)operator new(v15 - v16);
    signed int v19 = &v18[32 * (v17 >> 5)];
    v157 = v18;
    v159 = v19;
    memcpy(v18, v16, v17 - 4);
    v158 = v19;
    uint64_t v20 = v12 + 72 * a5;
    long long v21 = *(_OWORD *)(v20 + 56);
    long long v160 = *(_OWORD *)(v20 + 40);
    long long v161 = v21;
    if (a5)
    {
      uint64_t v22 = 0;
      uint64_t v23 = *a4 + 24 * a5;
      uint64_t v25 = *(void *)(v23 - 16);
      uint64_t v24 = (void *)(v23 - 16);
      uint64_t v26 = *(void *)(v25 - 8);
      uint64_t v27 = 32 * (v17 >> 5);
      while (__PAIR64__(*(unsigned __int16 *)&v18[v22 + 4], *(_DWORD *)&v18[v22]) == __PAIR64__(WORD2(v26), v26)
           && ((v26 & 0x1000000000000) == 0) == (v18[v22 + 6] == 0))
      {
        v22 += 32;
        if (v27 == v22) {
          goto LABEL_19;
        }
      }
      if (v27 != v22)
      {
        double v29 = &v18[v22];
        if (v27 - 32 != v22)
        {
          uint64_t v30 = v27 - v22 - 32;
          double v31 = v29 + 32;
          do
          {
            uint64_t v32 = *(void *)(*v24 - 8);
            if (__PAIR64__(*((unsigned __int16 *)v31 + 2), *(_DWORD *)v31) == __PAIR64__(WORD2(v32), v32)
              && ((v32 & 0x1000000000000) == 0) == (*((unsigned char *)v31 + 6) == 0))
            {
              long long v21 = *v31;
              *(_OWORD *)(v29 + 12) = *(_OWORD *)((char *)v31 + 12);
              *(_OWORD *)double v29 = v21;
              v29 += 32;
            }
            v31 += 2;
            v30 -= 32;
          }
          while (v30);
        }
        if (v29 != v19) {
          v158 = v29;
        }
      }
    }
  }
LABEL_19:
  uint64_t v33 = a5 + 1;
  uint64_t v34 = *a3;
  unsigned int v35 = (unsigned int *)(*a3 + 72 * (a5 + 1));
  if (v155 == -1)
  {
    int v36 = 0x7FFFFFFF;
  }
  else
  {
    int v36 = 0x7FFFFFFF;
    if (*v35 != -1 || v35[1] != -1)
    {
      sub_412F88((uint64_t)&v155, v35, *(double *)&v21);
      double v39 = v38 * 100.0;
      BOOL v40 = v39 >= -2147483650.0 && v39 < 2147483650.0;
      unsigned int v41 = llround(v39);
      if (v40) {
        int v36 = v41;
      }
      else {
        int v36 = 0x7FFFFFFF;
      }
    }
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  int v42 = (const void **)(v34 + 72 * v33);
  int v43 = (double *)v42[2];
  v42 += 2;
  double v44 = v43[2];
  v154[0] = a1;
  v154[1] = (uint64_t)&v186;
  uint64_t v45 = (char *)*v42;
  v120 = v42;
  v121 = (const void **)(v34 + 72 * v33 + 24);
  v119 = (char *)*v121;
  if (*v42 != *v121)
  {
    double v46 = v44 + 5.0;
    v118 = (long long *)(v34 + 72 * v33 + 40);
    int v113 = 10000000;
    signed int v115 = llround((double)v36 * 5.0);
    do
    {
      if (*((double *)v45 + 2) > v46) {
        break;
      }
      double v47 = *(void **)v35;
      LODWORD(v149) = v35[2];
      v148 = v47;
      uint64_t v150 = 0;
      uint64_t v151 = 0;
      *((void *)&v149 + 1) = 0;
      BOOL v48 = *v120;
      uint64_t v49 = (unsigned char *)*v121 - (unsigned char *)*v120;
      if (*v121 != *v120)
      {
        if (v49 < 0) {
          sub_2E00();
        }
        *((void *)&v149 + 1) = operator new((unsigned char *)*v121 - (unsigned char *)*v120);
        uint64_t v150 = *((void *)&v149 + 1);
        uint64_t v50 = *((void *)&v149 + 1) + 32 * (v49 >> 5);
        uint64_t v151 = v50;
        memcpy(*((void **)&v149 + 1), v48, v49 - 4);
        uint64_t v150 = v50;
      }
      long long v51 = v118[1];
      long long v152 = *v118;
      long long v153 = v51;
      long long v52 = *(_OWORD *)v45;
      *(_OWORD *)&__src[12] = *(_OWORD *)(v45 + 12);
      *(_OWORD *)__src = v52;
      sub_41B348((void *)&v149 + 1, __src, v188, 1uLL);
      sub_419918(v171, (uint64_t)&v155, (uint64_t)&v148, (uint64_t *)&v163, &v162, v146);
      unint64_t v53 = v146[0];
      unint64_t v54 = v146[1];
      if (v146[0] == v146[1]) {
        goto LABEL_68;
      }
      if ((unint64_t)(((uint64_t)(v146[1] - v146[0]) >> 3) - 3) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        signed int v55 = 0;
        unsigned int v56 = 2;
        unint64_t v57 = 1;
        while (1)
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t, unint64_t, void))(*(void *)a1 + 32))(__src, a1, v53 + 8 * v57, 0);
          int v58 = *(_DWORD *)&__src[4];
          if ((v190 & 0x80000000) == 0) {
            break;
          }
          operator delete(__p);
          int v59 = *(void **)&__src[8];
          if (*(void *)&__src[8]) {
            goto LABEL_46;
          }
LABEL_41:
          v55 += v58;
          unint64_t v57 = v56;
          unint64_t v53 = v146[0];
          unint64_t v54 = v146[1];
          ++v56;
          if (((uint64_t)(v146[1] - v146[0]) >> 3) - 1 <= v57) {
            goto LABEL_48;
          }
        }
        int v59 = *(void **)&__src[8];
        if (!*(void *)&__src[8]) {
          goto LABEL_41;
        }
LABEL_46:
        *(void *)&__src[16] = v59;
        operator delete(v59);
        goto LABEL_41;
      }
      signed int v55 = 0;
LABEL_48:
      if (v53 == v54 || v55 > v115)
      {
LABEL_68:
        if (!sub_110D2C8()) {
          goto LABEL_89;
        }
        sub_6BAC((uint64_t)__src);
        uint64_t v65 = operator new(0x20uLL);
        v141 = 0;
        v142 = v65;
        long long v143 = xmmword_20B9800;
        strcpy((char *)v65, "**Skipping (empty or too long)");
        v139 = 0;
        v140 = 0;
        double v66 = (const void *)v146[0];
        int64_t v67 = v146[1] - v146[0];
        if (v146[1] != v146[0])
        {
          if (v67 < 0) {
            sub_2E00();
          }
          v139 = operator new(v146[1] - v146[0]);
          v140 = v139;
          v68 = (char *)v139 + 8 * (v67 >> 3);
          v141 = v68;
          memcpy(v139, v66, v67 - 1);
          v140 = v68;
        }
        sub_41AF78(v154, (uint64_t)&v142, (uint64_t)&v139);
        if (v145 >= 0) {
          uint64_t v69 = &v144;
        }
        else {
          uint64_t v69 = v144;
        }
        if (v145 >= 0) {
          uint64_t v70 = HIBYTE(v145);
        }
        else {
          uint64_t v70 = v145;
        }
        sub_188FC78(__src, (uint64_t)v69, v70);
        if (SHIBYTE(v145) < 0)
        {
          operator delete(v144);
          double v71 = v139;
          if (v139)
          {
LABEL_80:
            v140 = v71;
            operator delete(v71);
          }
        }
        else
        {
          double v71 = v139;
          if (v139) {
            goto LABEL_80;
          }
        }
        if (SHIBYTE(v143) < 0) {
          operator delete(v142);
        }
        v144 = operator new(0x90uLL);
        long long v145 = xmmword_20E7B40;
        strcpy((char *)v144, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletDijkstraDecoder.h");
        std::stringbuf::str();
        sub_110D2DC((uint64_t)&v144, 137, (uint64_t)&v142);
LABEL_84:
        if (SHIBYTE(v143) < 0)
        {
          operator delete(v142);
          if ((SHIBYTE(v145) & 0x80000000) == 0) {
            goto LABEL_86;
          }
        }
        else if ((SHIBYTE(v145) & 0x80000000) == 0)
        {
LABEL_86:
          *(void *)__src = v117;
          *(void *)&__src[*(void *)(v117 - 24)] = v116;
          if (v192 < 0) {
            operator delete(v191);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
          goto LABEL_89;
        }
        operator delete(v144);
        goto LABEL_86;
      }
      if (v55 > v113)
      {
        if (!sub_110D2C8()) {
          goto LABEL_89;
        }
        sub_6BAC((uint64_t)__src);
        v142 = operator new(0x20uLL);
        long long v143 = xmmword_20B91B0;
        strcpy((char *)v142, "**Skipping (seen better one)");
        v137 = 0;
        v138 = 0;
        v136 = 0;
        unsigned int v60 = (const void *)v146[0];
        int64_t v61 = v146[1] - v146[0];
        if (v146[1] != v146[0])
        {
          if (v61 < 0) {
            sub_2E00();
          }
          v136 = operator new(v146[1] - v146[0]);
          v137 = v136;
          double v62 = (char *)v136 + 8 * (v61 >> 3);
          v138 = v62;
          memcpy(v136, v60, v61 - 1);
          v137 = v62;
        }
        sub_41AF78(v154, (uint64_t)&v142, (uint64_t)&v136);
        if (v145 >= 0) {
          double v63 = &v144;
        }
        else {
          double v63 = v144;
        }
        if (v145 >= 0) {
          uint64_t v64 = HIBYTE(v145);
        }
        else {
          uint64_t v64 = v145;
        }
        sub_188FC78(__src, (uint64_t)v63, v64);
        if (SHIBYTE(v145) < 0) {
          operator delete(v144);
        }
        if (v136)
        {
          v137 = v136;
          operator delete(v136);
        }
        if (SHIBYTE(v143) < 0) {
          operator delete(v142);
        }
        v144 = operator new(0x90uLL);
        long long v145 = xmmword_20E7B40;
        strcpy((char *)v144, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletDijkstraDecoder.h");
        std::stringbuf::str();
        sub_110D2DC((uint64_t)&v144, 142, (uint64_t)&v142);
        goto LABEL_84;
      }
      if (v186 + 2 >= 0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 3)) {
        goto LABEL_171;
      }
      unsigned __int8 v72 = (unsigned int *)(*a3 + 72 * (v186 + 2));
      sub_419918(v171, (uint64_t)&v148, (uint64_t)v72, (uint64_t *)&v163, &v162, (unint64_t *)&v144);
      char v74 = v144;
      uint64_t v75 = (void *)v145;
      if (v144 == (void *)v145)
      {
        signed int v76 = 0;
        uint64_t v75 = v144;
        if (v148 == -1) {
          goto LABEL_113;
        }
        goto LABEL_114;
      }
      if ((unint64_t)(((uint64_t)(v145 - (void)v144) >> 3) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      {
        signed int v76 = 0;
        if (v148 == -1) {
          goto LABEL_113;
        }
LABEL_114:
        if (*v72 == -1 && v72[1] == -1) {
          goto LABEL_116;
        }
        sub_412F88((uint64_t)&v148, v72, v73);
        double v83 = v82 * 100.0;
        BOOL v84 = v83 >= -2147483650.0 && v83 < 2147483650.0;
        unsigned int v85 = llround(v83);
        if (v84) {
          int v81 = v85;
        }
        else {
          int v81 = 0x7FFFFFFF;
        }
        if (v144 != (void *)v145) {
          goto LABEL_125;
        }
LABEL_126:
        if (sub_110D2C8())
        {
          sub_6BAC((uint64_t)__src);
          long long v86 = operator new(0x30uLL);
          v133 = 0;
          v134 = v86;
          long long v135 = xmmword_20B93E0;
          strcpy((char *)v86, "**Skipping (NEXT pathlet empty or too long)");
          v131 = 0;
          v132 = 0;
          v87 = (const void *)v146[0];
          int64_t v88 = v146[1] - v146[0];
          if (v146[1] != v146[0])
          {
            if (v88 < 0) {
              sub_2E00();
            }
            v131 = operator new(v146[1] - v146[0]);
            v132 = v131;
            v89 = (char *)v131 + 8 * (v88 >> 3);
            v133 = v89;
            memcpy(v131, v87, v88 - 1);
            v132 = v89;
          }
          sub_41AF78(v154, (uint64_t)&v134, (uint64_t)&v131);
          if (v143 >= 0) {
            char v90 = &v142;
          }
          else {
            char v90 = v142;
          }
          if (v143 >= 0) {
            uint64_t v91 = HIBYTE(v143);
          }
          else {
            uint64_t v91 = v143;
          }
          sub_188FC78(__src, (uint64_t)v90, v91);
          if (SHIBYTE(v143) < 0) {
            operator delete(v142);
          }
          if (v131)
          {
            v132 = v131;
            operator delete(v131);
          }
          if (SHIBYTE(v135) < 0) {
            operator delete(v134);
          }
          v142 = operator new(0x90uLL);
          long long v143 = xmmword_20E7B40;
          strcpy((char *)v142, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletDijkstraDecoder.h");
          std::stringbuf::str();
          sub_110D2DC((uint64_t)&v142, 156, (uint64_t)&v134);
          if (SHIBYTE(v135) < 0)
          {
            operator delete(v134);
            if (SHIBYTE(v143) < 0) {
              goto LABEL_200;
            }
          }
          else
          {
            if ((SHIBYTE(v143) & 0x80000000) == 0) {
              goto LABEL_144;
            }
LABEL_200:
            operator delete(v142);
          }
LABEL_144:
          *(void *)__src = v117;
          *(void *)&__src[*(void *)(v117 - 24)] = v116;
          if (v192 < 0) {
            operator delete(v191);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        if (sub_110D2C8())
        {
          sub_6BAC((uint64_t)__src);
          v134 = operator new(0x28uLL);
          long long v135 = xmmword_20B9280;
          strcpy((char *)v134, "****  Next (which failed the test)");
          v129 = 0;
          v130 = 0;
          v128 = 0;
          char v92 = v144;
          uint64_t v93 = v145 - (void)v144;
          if ((void *)v145 != v144)
          {
            if (v93 < 0) {
              sub_2E00();
            }
            v128 = operator new(v145 - (void)v144);
            v129 = v128;
            int v94 = (char *)v128 + 8 * (v93 >> 3);
            v130 = v94;
            memcpy(v128, v92, v93 - 1);
            v129 = v94;
          }
          sub_41AF78(v154, (uint64_t)&v134, (uint64_t)&v128);
          if (v143 >= 0) {
            v95 = &v142;
          }
          else {
            v95 = v142;
          }
          if (v143 >= 0) {
            uint64_t v96 = HIBYTE(v143);
          }
          else {
            uint64_t v96 = v143;
          }
          sub_188FC78(__src, (uint64_t)v95, v96);
          if (SHIBYTE(v143) < 0) {
            operator delete(v142);
          }
          if (v128)
          {
            v129 = v128;
            operator delete(v128);
          }
          if (SHIBYTE(v135) < 0) {
            operator delete(v134);
          }
          v142 = operator new(0x90uLL);
          long long v143 = xmmword_20E7B40;
          strcpy((char *)v142, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletDijkstraDecoder.h");
          std::stringbuf::str();
          sub_110D2DC((uint64_t)&v142, 157, (uint64_t)&v134);
          if (SHIBYTE(v135) < 0)
          {
            operator delete(v134);
            if (SHIBYTE(v143) < 0) {
              goto LABEL_202;
            }
          }
          else
          {
            if ((SHIBYTE(v143) & 0x80000000) == 0) {
              goto LABEL_165;
            }
LABEL_202:
            operator delete(v142);
          }
LABEL_165:
          *(void *)__src = v117;
          *(void *)&__src[*(void *)(v117 - 24)] = v116;
          if (v192 < 0) {
            operator delete(v191);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        char v97 = 0;
        long long v98 = v144;
        if (!v144) {
          goto LABEL_170;
        }
LABEL_169:
        *(void *)&long long v145 = v98;
        operator delete(v98);
        goto LABEL_170;
      }
      v112 = a6;
      signed int v76 = 0;
      unsigned int v77 = 2;
      unint64_t v78 = 1;
      do
      {
        (*(void (**)(unsigned char *__return_ptr, uint64_t, unint64_t, void))(*(void *)a1 + 32))(__src, a1, (unint64_t)v74 + 8 * v78, 0);
        int v79 = *(_DWORD *)&__src[4];
        if (v190 < 0)
        {
          operator delete(__p);
          v80 = *(void **)&__src[8];
          if (!*(void *)&__src[8]) {
            goto LABEL_100;
          }
LABEL_105:
          *(void *)&__src[16] = v80;
          operator delete(v80);
          goto LABEL_100;
        }
        v80 = *(void **)&__src[8];
        if (*(void *)&__src[8]) {
          goto LABEL_105;
        }
LABEL_100:
        v76 += v79;
        unint64_t v78 = v77;
        char v74 = v144;
        uint64_t v75 = (void *)v145;
        ++v77;
      }
      while (((uint64_t)(v145 - (void)v144) >> 3) - 1 > v78);
      a6 = v112;
      if (v148 != -1) {
        goto LABEL_114;
      }
LABEL_113:
      if (HIDWORD(v148) != -1) {
        goto LABEL_114;
      }
LABEL_116:
      int v81 = 0x7FFFFFFF;
      if (v74 == v75) {
        goto LABEL_126;
      }
LABEL_125:
      if (v76 > (int)llround((double)v81 * 5.0)) {
        goto LABEL_126;
      }
      char v97 = 1;
      long long v98 = v144;
      if (v144) {
        goto LABEL_169;
      }
LABEL_170:
      if (v97)
      {
LABEL_171:
        if (sub_110D2C8())
        {
          sub_6BAC((uint64_t)__src);
          v142 = operator new(0x19uLL);
          long long v143 = xmmword_20B9250;
          strcpy((char *)v142, "**Accepting tentatively");
          v126 = 0;
          v127 = 0;
          v125 = 0;
          long long v99 = (const void *)v146[0];
          int64_t v100 = v146[1] - v146[0];
          if (v146[1] != v146[0])
          {
            if (v100 < 0) {
              sub_2E00();
            }
            v125 = operator new(v146[1] - v146[0]);
            v126 = v125;
            v101 = (char *)v125 + 8 * (v100 >> 3);
            v127 = v101;
            memcpy(v125, v99, v100 - 1);
            v126 = v101;
          }
          sub_41AF78(v154, (uint64_t)&v142, (uint64_t)&v125);
          if (v145 >= 0) {
            v102 = &v144;
          }
          else {
            v102 = v144;
          }
          if (v145 >= 0) {
            uint64_t v103 = HIBYTE(v145);
          }
          else {
            uint64_t v103 = v145;
          }
          sub_188FC78(__src, (uint64_t)v102, v103);
          if (SHIBYTE(v145) < 0) {
            operator delete(v144);
          }
          if (v125)
          {
            v126 = v125;
            operator delete(v125);
          }
          if (SHIBYTE(v143) < 0) {
            operator delete(v142);
          }
          v144 = operator new(0x90uLL);
          long long v145 = xmmword_20E7B40;
          strcpy((char *)v144, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletDijkstraDecoder.h");
          std::stringbuf::str();
          sub_110D2DC((uint64_t)&v144, 161, (uint64_t)&v142);
          if (SHIBYTE(v143) < 0)
          {
            operator delete(v142);
            if (SHIBYTE(v145) < 0) {
              goto LABEL_198;
            }
          }
          else
          {
            if ((SHIBYTE(v145) & 0x80000000) == 0) {
              goto LABEL_189;
            }
LABEL_198:
            operator delete(v144);
          }
LABEL_189:
          *(void *)__src = v117;
          *(void *)&__src[*(void *)(v117 - 24)] = v116;
          if (v192 < 0) {
            operator delete(v191);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        if (v146 != (unint64_t *)a6) {
          sub_2D8554(a6, (char *)v146[0], (char *)v146[1], (uint64_t)(v146[1] - v146[0]) >> 3);
        }
        int v113 = v55;
      }
LABEL_89:
      if (v146[0])
      {
        v146[1] = v146[0];
        operator delete((void *)v146[0]);
      }
      if (*((void *)&v149 + 1))
      {
        uint64_t v150 = *((void *)&v149 + 1);
        operator delete(*((void **)&v149 + 1));
      }
      v45 += 32;
    }
    while (v45 != v119);
  }
  if (sub_110D2C8())
  {
    sub_6BAC((uint64_t)__src);
    char v147 = 12;
    strcpy((char *)v146, "Final choice");
    v123 = 0;
    v124 = 0;
    v122 = 0;
    v105 = *a6;
    v104 = a6[1];
    uint64_t v106 = v104 - (unsigned char *)*a6;
    if (v104 != *a6)
    {
      if (v106 < 0) {
        sub_2E00();
      }
      v122 = operator new(v104 - (unsigned char *)*a6);
      v124 = (char *)v122 + 8 * (v106 >> 3);
      memcpy(v122, v105, v106 - 1);
      v123 = v124;
    }
    sub_41AF78(v154, (uint64_t)v146, (uint64_t)&v122);
    if (v149 >= 0) {
      v107 = &v148;
    }
    else {
      v107 = v148;
    }
    if (v149 >= 0) {
      uint64_t v108 = HIBYTE(v149);
    }
    else {
      uint64_t v108 = v149;
    }
    sub_188FC78(__src, (uint64_t)v107, v108);
    if (SHIBYTE(v149) < 0) {
      operator delete(v148);
    }
    if (v122)
    {
      v123 = v122;
      operator delete(v122);
    }
    if (v147 < 0) {
      operator delete((void *)v146[0]);
    }
    v148 = operator new(0x90uLL);
    long long v149 = xmmword_20E7B40;
    strcpy((char *)v148, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletDijkstraDecoder.h");
    std::stringbuf::str();
    sub_110D2DC((uint64_t)&v148, 165, (uint64_t)v146);
    if (v147 < 0)
    {
      operator delete((void *)v146[0]);
      if ((SHIBYTE(v149) & 0x80000000) == 0) {
        goto LABEL_221;
      }
    }
    else if ((SHIBYTE(v149) & 0x80000000) == 0)
    {
LABEL_221:
      if (v192 < 0) {
        operator delete(v191);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_224;
    }
    operator delete(v148);
    goto LABEL_221;
  }
LABEL_224:
  if (v157)
  {
    v158 = v157;
    operator delete(v157);
  }
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  if (v182)
  {
    v183 = v182;
    operator delete(v182);
  }
  v109 = (void *)v180;
  if ((void)v180)
  {
    do
    {
      v110 = (void *)*v109;
      operator delete(v109);
      v109 = v110;
    }
    while (v110);
  }
  v111 = (void *)v179;
  *(void *)&long long v179 = 0;
  if (v111) {
    operator delete(v111);
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (v172)
  {
    v173 = v172;
    operator delete(v172);
  }
}

void sub_4194FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  sub_111ECAC((uint64_t)&STACK[0x350]);
  if (a63) {
    operator delete(a63);
  }
  if (a66)
  {
    operator delete(a66);
    unsigned __int8 v72 = a71;
    if (!a71)
    {
LABEL_9:
      double v73 = *(void **)a10;
      if (!*(void *)a10) {
        goto LABEL_10;
      }
      goto LABEL_15;
    }
  }
  else
  {
    unsigned __int8 v72 = a71;
    if (!a71) {
      goto LABEL_9;
    }
  }
  operator delete(v72);
  double v73 = *(void **)a10;
  if (!*(void *)a10)
  {
LABEL_10:
    char v74 = (void *)STACK[0x230];
    if (!STACK[0x230]) {
      goto LABEL_11;
    }
    goto LABEL_16;
  }
LABEL_15:
  *(void *)(a10 + 8) = v73;
  operator delete(v73);
  char v74 = (void *)STACK[0x230];
  if (!STACK[0x230])
  {
LABEL_11:
    uint64_t v75 = (void *)STACK[0x270];
    if (!STACK[0x270]) {
      goto LABEL_12;
    }
    goto LABEL_17;
  }
LABEL_16:
  STACK[0x238] = (unint64_t)v74;
  operator delete(v74);
  uint64_t v75 = (void *)STACK[0x270];
  if (!STACK[0x270])
  {
LABEL_12:
    sub_41B2CC(&STACK[0x2B8]);
    _Unwind_Resume(a1);
  }
LABEL_17:
  STACK[0x278] = (unint64_t)v75;
  operator delete(v75);
  sub_41B2CC(&STACK[0x2B8]);
  _Unwind_Resume(a1);
}

void sub_419918(int8x8_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _DWORD *a5@<X4>, unint64_t *a6@<X8>)
{
  v177.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  int8x8_t v9 = a1[2];
  a1[6] = a1[5];
  a1[3] = v9;
  a1[8].i32[0] = 0;
  signed int v10 = a1 + 9;
  uint64_t v186 = (uint64_t *)&a1[2];
  if (a1[12])
  {
    unint64_t v11 = (void *)a1[11];
    if (v11)
    {
      do
      {
        uint64_t v12 = (void *)*v11;
        operator delete(v11);
        unint64_t v11 = v12;
      }
      while (v12);
    }
    a1[11] = 0;
    int8x8_t v13 = a1[10];
    if (v13)
    {
      uint64_t v14 = 0;
      do
        *(void *)(*(void *)v10 + 8 * v14++) = 0;
      while (*(void *)&v13 != v14);
    }
    a1[12] = 0;
  }
  char v190 = a1 + 9;
  v191 = (void **)&a1[14];
  a1[15] = a1[14];
  unint64_t v206 = 0;
  v207 = 0;
  v208 = 0;
  uint64_t v15 = *(void *)(a2 + 16);
  uint64_t v184 = *(void *)(a2 + 24);
  long long v179 = a6;
  if (v15 != v184)
  {
    uint64_t v182 = a2;
    while (1)
    {
      (*(void (**)(void ***__return_ptr))(**(void **)a1 + 32))(&v197);
      if (!v200)
      {
        int v20 = 3;
        if (v202 < 0) {
          goto LABEL_23;
        }
        goto LABEL_24;
      }
      uint64_t v16 = *(void *)(a3 + 16);
      uint64_t v17 = *(void *)(a3 + 24);
      if (v16 != v17)
      {
        unint64_t v18 = *(void *)v15;
        do
        {
          if (__PAIR64__(*(unsigned __int16 *)(v16 + 4), *(_DWORD *)v16) == __PAIR64__(WORD2(v18), v18)
            && (HIWORD(v18) & 1) != (*(unsigned char *)(v16 + 6) == 0)
            && *(double *)(v15 + 8) <= *(double *)(v16 + 8))
          {
            LODWORD(v195) = *(_DWORD *)v15;
            *(_DWORD *)((char *)&v195 + 3) = *(_DWORD *)(v15 + 3);
            a6[1] = 0;
            a6[2] = 0;
            *a6 = 0;
            signed int v19 = operator new(8uLL);
            a6[1] = (unint64_t)(v19 + 2);
            a6[2] = (unint64_t)(v19 + 2);
            _DWORD *v19 = v195;
            *(_DWORD *)((char *)v19 + 3) = *(_DWORD *)((char *)&v195 + 3);
            *a6 = (unint64_t)v19;
            int v20 = 1;
            if (v202 < 0) {
              goto LABEL_23;
            }
            goto LABEL_24;
          }
          v16 += 32;
        }
        while (v16 != v17);
      }
      int8x8_t v22 = a1[14];
      int8x8_t v21 = a1[15];
      v195 = (void *)v15;
      *((_DWORD *)sub_41B8F8((uint64_t)v10, (unint64_t *)v15, (uint64_t)&unk_20F06E0, (void **)&v195) + 6) = -1431655765 * ((*(void *)&v21 - *(void *)&v22) >> 3);
      uint64_t v24 = (char *)a1[15];
      unint64_t v23 = (unint64_t)a1[16];
      if ((unint64_t)v24 < v23)
      {
        *(void *)uint64_t v24 = *(void *)v15;
        *(_OWORD *)(v24 + 8) = xmmword_20E7B90;
        uint64_t v25 = v24 + 24;
        goto LABEL_41;
      }
      uint64_t v26 = (char *)*v191;
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (unsigned char *)*v191) >> 3);
      unint64_t v28 = v27 + 1;
      if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_2E00();
      }
      unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - (void)v26) >> 3);
      if (2 * v29 > v28) {
        unint64_t v28 = 2 * v29;
      }
      if (v29 >= 0x555555555555555) {
        unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      double v31 = (char *)operator new(24 * v30);
      uint64_t v32 = &v31[24 * v27];
      *(void *)uint64_t v32 = *(void *)v15;
      *(_OWORD *)(v32 + 8) = xmmword_20E7B90;
      if (v24 != v26) {
        break;
      }
      uint64_t v25 = v32 + 24;
      a1[14] = (int8x8_t)v32;
      a1[15] = (int8x8_t)(v32 + 24);
      a1[16] = (int8x8_t)&v31[24 * v30];
      if (v26) {
        goto LABEL_40;
      }
LABEL_41:
      a1[15] = (int8x8_t)v25;
      sub_41B498(a1, v15, (uint64_t *)&v206, *(unsigned char *)(a2 + 44) == 0);
      int v36 = (unint64_t *)v206;
      double v37 = v207;
      if (*(unsigned char *)(a2 + 44)) {
        uint64_t v38 = 2;
      }
      else {
        uint64_t v38 = 1;
      }
      if (v207 != (unint64_t *)v206)
      {
        uint64_t v187 = (uint64_t)((uint64_t)v207 - v206) >> 3;
        while (1)
        {
          unint64_t v39 = *v36;
          int8x8_t v40 = a1[10];
          if (v40)
          {
            unint64_t v41 = 0x2127599BF4325C37
                * (((v39 >> 16) & 0xFFFF0000 | (v39 << 32) | ((*v36 & 0xFF000000000000) == 0)) ^ (((v39 >> 16) & 0xFFFF0000 | (v39 << 32)) >> 23));
            unint64_t v42 = v41 ^ (v41 >> 47);
            uint8x8_t v43 = (uint8x8_t)vcnt_s8(v40);
            v43.i16[0] = vaddlv_u8(v43);
            if (v43.u32[0] > 1uLL)
            {
              unint64_t v44 = v42;
              if (v42 >= *(void *)&v40) {
                unint64_t v44 = v42 % *(void *)&v40;
              }
            }
            else
            {
              unint64_t v44 = v42 & (*(void *)&v40 - 1);
            }
            uint64_t v45 = *(uint64_t ***)(*(void *)v10 + 8 * v44);
            if (v45)
            {
              double v46 = *v45;
              if (v46)
              {
                if (v43.u32[0] < 2uLL)
                {
                  uint64_t v47 = *(void *)&v40 - 1;
                  while (1)
                  {
                    uint64_t v49 = v46[1];
                    if (v42 == v49)
                    {
                      if (__PAIR64__(*((unsigned __int16 *)v46 + 10), *((_DWORD *)v46 + 4)) == __PAIR64__(WORD2(v39), v39)&& (HIWORD(v39) & 1) != (*((unsigned char *)v46 + 22) == 0))
                      {
                        goto LABEL_86;
                      }
                    }
                    else if ((v49 & v47) != v44)
                    {
                      goto LABEL_71;
                    }
                    double v46 = (uint64_t *)*v46;
                    if (!v46) {
                      goto LABEL_71;
                    }
                  }
                }
                do
                {
                  unint64_t v48 = v46[1];
                  if (v42 == v48)
                  {
                    if (__PAIR64__(*((unsigned __int16 *)v46 + 10), *((_DWORD *)v46 + 4)) == __PAIR64__(WORD2(v39), v39)&& (HIWORD(v39) & 1) != (*((unsigned char *)v46 + 22) == 0))
                    {
                      goto LABEL_86;
                    }
                  }
                  else
                  {
                    if (v48 >= *(void *)&v40) {
                      v48 %= *(void *)&v40;
                    }
                    if (v48 != v44) {
                      break;
                    }
                  }
                  double v46 = (uint64_t *)*v46;
                }
                while (v46);
              }
            }
          }
LABEL_71:
          int8x8_t v51 = a1[14];
          int8x8_t v50 = a1[15];
          v195 = v36;
          *((_DWORD *)sub_41B8F8((uint64_t)v10, v36, (uint64_t)&unk_20F06E0, (void **)&v195) + 6) = -1431655765 * ((*(void *)&v50 - *(void *)&v51) >> 3);
          unint64_t v53 = (char *)a1[15];
          unint64_t v52 = (unint64_t)a1[16];
          if ((unint64_t)v53 < v52)
          {
            *(void *)unint64_t v53 = *v36;
            *(_OWORD *)(v53 + 8) = xmmword_20E7BA0;
            unint64_t v54 = v53 + 24;
            goto LABEL_85;
          }
          signed int v55 = (char *)*v191;
          unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((v53 - (unsigned char *)*v191) >> 3);
          unint64_t v57 = v56 + 1;
          if (v56 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_2E00();
          }
          unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - (void)v55) >> 3);
          if (2 * v58 > v57) {
            unint64_t v57 = 2 * v58;
          }
          if (v58 >= 0x555555555555555) {
            unint64_t v59 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v59 = v57;
          }
          if (v59 > 0xAAAAAAAAAAAAAAALL) {
            sub_188D718();
          }
          unsigned int v60 = (char *)operator new(24 * v59);
          int64_t v61 = &v60[24 * v56];
          *(void *)int64_t v61 = *v36;
          *(_OWORD *)(v61 + 8) = xmmword_20E7BA0;
          if (v53 == v55)
          {
            signed int v10 = a1 + 9;
            unint64_t v78 = &v60[24 * v59];
            unint64_t v54 = v61 + 24;
            a1[14] = (int8x8_t)v61;
            a1[15] = (int8x8_t)(v61 + 24);
            a1[16] = (int8x8_t)v78;
            if (v55) {
              goto LABEL_84;
            }
          }
          else
          {
            double v62 = &v60[24 * v56];
            signed int v10 = a1 + 9;
            do
            {
              long long v63 = *(_OWORD *)(v53 - 24);
              uint64_t v64 = v62 - 24;
              *((void *)v62 - 1) = *((void *)v53 - 1);
              *(_OWORD *)(v62 - 24) = v63;
              v53 -= 24;
              v62 -= 24;
            }
            while (v53 != v55);
            uint64_t v65 = &v60[24 * v59];
            unint64_t v54 = v61 + 24;
            a1[14] = (int8x8_t)v64;
            a1[15] = (int8x8_t)(v61 + 24);
            a1[16] = (int8x8_t)v65;
            if (v55) {
LABEL_84:
            }
              operator delete(v55);
          }
LABEL_85:
          a1[15] = (int8x8_t)v54;
LABEL_86:
          v195 = v36;
          unint64_t v66 = *((unsigned int *)sub_41B8F8((uint64_t)v10, v36, (uint64_t)&unk_20F06E0, (void **)&v195) + 6);
          int64_t v67 = (void *)sub_41B608(&a1[1], 1.0 - *(double *)(v15 + 8), v15, (uint64_t)v36, a4, v187 == v38);
          v195 = v67;
          uint64_t v68 = (uint64_t)*v191 + 24 * v66;
          unsigned int v71 = *(_DWORD *)(v68 + 16);
          uint64_t v69 = (void *)(v68 + 16);
          unsigned int v70 = v71;
          if (v71 == -1
            || ((int v72 = *((_DWORD *)*v191 + 6 * v66 + 5), v72 != 0x7FFFFFFF)
              ? (BOOL v73 = v70 > v67)
              : (BOOL v73 = 1),
                v73 || (v70 >= v67 ? (BOOL v74 = v72 <= SHIDWORD(v67)) : (BOOL v74 = 1), !v74)))
          {
            void *v69 = v67;
            uint64_t v75 = *(void *)&a1[14] + 24 * v66;
            int v76 = *(_DWORD *)v15;
            *(_DWORD *)(v75 + 11) = *(_DWORD *)(v15 + 3);
            *(_DWORD *)(v75 + 8) = v76;
            int8x8_t v77 = a1[5];
            if (v66 >= (uint64_t)(*(void *)&a1[6] - *(void *)&v77) >> 2
              || *(_DWORD *)(*(void *)&v77 + 4 * v66) == -1)
            {
              sub_41392C((uint64_t)v186, v66, (unsigned int *)&v195);
            }
            else
            {
              sub_4137CC(v186, v66, (unsigned int *)&v195);
            }
          }
          if (++v36 == v37)
          {
            int v20 = 0;
            a6 = v179;
            a2 = v182;
            if (v202 < 0) {
              goto LABEL_23;
            }
            goto LABEL_24;
          }
        }
      }
      int v20 = 0;
      a6 = v179;
      if (v202 < 0) {
LABEL_23:
      }
        operator delete(__p);
LABEL_24:
      if (v198)
      {
        v199 = v198;
        operator delete(v198);
      }
      if (v20 != 3 && v20) {
        goto LABEL_239;
      }
      v15 += 32;
      if (v15 == v184) {
        goto LABEL_106;
      }
    }
    uint64_t v33 = &v31[24 * v27];
    do
    {
      long long v34 = *(_OWORD *)(v24 - 24);
      unsigned int v35 = v33 - 24;
      *((void *)v33 - 1) = *((void *)v24 - 1);
      *(_OWORD *)(v33 - 24) = v34;
      v24 -= 24;
      v33 -= 24;
    }
    while (v24 != v26);
    uint64_t v25 = v32 + 24;
    a1[14] = (int8x8_t)v35;
    a1[15] = (int8x8_t)(v32 + 24);
    a1[16] = (int8x8_t)&v31[24 * v30];
    if (!v26) {
      goto LABEL_41;
    }
LABEL_40:
    operator delete(v26);
    goto LABEL_41;
  }
LABEL_106:
  if (!a1[8].i32[0])
  {
LABEL_238:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
LABEL_239:
    v176 = (unint64_t *)v206;
    if (!v206) {
      return;
    }
LABEL_240:
    v207 = v176;
    operator delete(v176);
    return;
  }
  int v79 = 0;
  v80 = a1 + 1;
  int v81 = &unk_20F06E0;
  while (1)
  {
    double v82 = (void *)*v186;
    double v83 = *v191;
    BOOL v84 = (unint64_t *)((char *)*v191 + 24 * *(unsigned int *)*v186);
    unint64_t v85 = *v84;
    unint64_t v205 = *v84;
    unint64_t v86 = v84[2];
    for (uint64_t i = *(void *)(a3 + 16); i != *(void *)(a3 + 24); i += 32)
    {
      if (__PAIR64__(*(unsigned __int16 *)(i + 4), *(_DWORD *)i) == __PAIR64__(WORD2(v85), v85)
        && (HIWORD(v85) & 1) != (*(unsigned char *)(i + 6) == 0))
      {
        unint64_t v154 = v206;
        v207 = (unint64_t *)v206;
        v195 = (void *)v83[3 * *(unsigned int *)v82];
        BOOL v155 = (~(unint64_t)v195 & 0xFFFFFFFFFFFFLL) != 0 || ((unint64_t)v195 & 0xFF000000000000) == 0;
        unint64_t v156 = v206;
        if (!v155)
        {
LABEL_252:
          *a6 = v156;
          a6[1] = v154;
          a6[2] = (unint64_t)v208;
          return;
        }
        while (2)
        {
          uint64_t v157 = (uint64_t)v207;
          if (v207 < (unint64_t *)v208)
          {
            unint64_t *v207 = (unint64_t)v195;
            uint64_t v158 = v157 + 8;
            uint64_t v159 = (uint64_t)v190;
            goto LABEL_229;
          }
          unint64_t v160 = v206;
          uint64_t v161 = (uint64_t)((uint64_t)v207 - v206) >> 3;
          unint64_t v162 = v161 + 1;
          if ((unint64_t)(v161 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v163 = (uint64_t)&v208[-v206];
          if ((uint64_t)&v208[-v206] >> 2 > v162) {
            unint64_t v162 = v163 >> 2;
          }
          if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v164 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v164 = v162;
          }
          if (v164)
          {
            if (v164 >> 61) {
              sub_188D718();
            }
            v165 = (char *)operator new(8 * v164);
            uint64_t v166 = (uint64_t)&v165[8 * v161];
            *(void *)uint64_t v166 = v195;
            uint64_t v158 = v166 + 8;
            if (v157 == v160) {
              goto LABEL_227;
            }
            do
            {
LABEL_224:
              int v167 = *(_DWORD *)(v157 - 8);
              v157 -= 8;
              int v168 = *(_DWORD *)(v157 + 3);
              *(_DWORD *)(v166 - 8) = v167;
              v166 -= 8;
              *(_DWORD *)(v166 + 3) = v168;
            }
            while (v157 != v160);
            uint64_t v157 = v206;
            unint64_t v206 = v166;
            v207 = (unint64_t *)v158;
            v208 = &v165[8 * v164];
            uint64_t v159 = (uint64_t)v190;
            if (!v157)
            {
LABEL_229:
              v207 = (unint64_t *)v158;
              v197 = &v195;
              uint64_t v169 = (uint64_t)*v191
                   + 24
                   * *((unsigned int *)sub_41B8F8(v159, (unint64_t *)&v195, (uint64_t)&unk_20F06E0, &v197) + 6);
              int v170 = *(_DWORD *)(v169 + 8);
              *(_DWORD *)((char *)&v195 + 3) = *(_DWORD *)(v169 + 11);
              LODWORD(v195) = v170;
              if (v170 == -1 && WORD2(v195) == 0xFFFF && BYTE6(v195))
              {
                unint64_t v156 = v206;
                unint64_t v154 = (unint64_t)v207;
                if ((unint64_t *)v206 == v207)
                {
                  a6 = v179;
                }
                else
                {
                  v171 = v207 - 1;
                  a6 = v179;
                  if ((unint64_t)(v207 - 1) > v206)
                  {
                    unint64_t v172 = v206 + 8;
                    do
                    {
                      uint64_t v173 = *(void *)(v172 - 8);
                      int v174 = *(_DWORD *)v171;
                      *(_DWORD *)(v172 - 5) = *(_DWORD *)((char *)v171 + 3);
                      *(_DWORD *)(v172 - 8) = v174;
                      *(_DWORD *)v171 = v173;
                      *((unsigned char *)v171 + 6) = BYTE6(v173);
                      *((_WORD *)v171-- + 2) = WORD2(v173);
                      BOOL v175 = v172 >= (unint64_t)v171;
                      v172 += 8;
                    }
                    while (!v175);
                    unint64_t v156 = v206;
                    unint64_t v154 = (unint64_t)v207;
                  }
                }
                goto LABEL_252;
              }
              continue;
            }
          }
          else
          {
            v165 = 0;
            uint64_t v166 = 8 * v161;
            *(void *)(8 * v161) = v195;
            uint64_t v158 = 8 * v161 + 8;
            if (v157 != v160) {
              goto LABEL_224;
            }
LABEL_227:
            unint64_t v206 = v166;
            v207 = (unint64_t *)v158;
            v208 = &v165[8 * v164];
            uint64_t v159 = (uint64_t)v190;
            if (!v157) {
              goto LABEL_229;
            }
          }
          break;
        }
        operator delete((void *)v157);
        goto LABEL_229;
      }
    }
    int8x8_t v88 = a1[5];
    *(_DWORD *)(*(void *)&v88 + 4 * *(unsigned int *)v82) = -1;
    unsigned int v89 = a1[8].i32[0] - 1;
    a1[8].i32[0] = v89;
    if (v89)
    {
      uint64_t v90 = v82[v89];
      *double v82 = v90;
      *(_DWORD *)(*(void *)&v88 + 4 * v90) = 0;
      unsigned int v91 = a1[8].u32[0];
      if (v91 >= 2)
      {
        int v92 = 0;
        unsigned int v93 = 0;
        unsigned int v94 = 1;
        do
        {
          unsigned int v95 = v92 + 5;
          if (v95 >= v91) {
            uint64_t v96 = v91;
          }
          else {
            uint64_t v96 = v95;
          }
          if (v94 >= v96) {
            break;
          }
          uint64_t v97 = v93;
          unsigned int v98 = HIDWORD(v82[v93]);
          uint64_t v99 = v94;
          int64_t v100 = (unsigned int *)&v82[v94] + 1;
          unsigned int v93 = -1;
          unsigned int v101 = v98;
          do
          {
            unsigned int v103 = *v100;
            v100 += 2;
            unsigned int v102 = v103;
            if (v103 < v101)
            {
              unsigned int v101 = v102;
              unsigned int v93 = v99;
            }
            ++v99;
          }
          while (v96 != v99);
          if (v93 >= v91) {
            break;
          }
          v104 = (unsigned int *)&v82[v93];
          uint64_t v105 = *(void *)v104;
          unsigned int *v104 = v82[v97];
          v104[1] = v98;
          v82[v97] = v105;
          uint64_t v106 = 4 * *v104;
          uint64_t v107 = 4 * v105;
          int v108 = *(_DWORD *)(*(void *)&v88 + v106);
          *(_DWORD *)(*(void *)&v88 + v106) = *(_DWORD *)(*(void *)&v88 + v107);
          *(_DWORD *)(*(void *)&v88 + v107) = v108;
          int v92 = 4 * v93;
          unsigned int v94 = (4 * v93) | 1;
          unsigned int v91 = a1[8].u32[0];
        }
        while (v94 < v91);
      }
    }
    *(void *)&a1[3] -= 8;
    if (sub_110D20C())
    {
      sub_6BAC((uint64_t)&v197);
      v109 = sub_188FC78(&v197, (uint64_t)"Exploring ", 10);
      sub_2DD928(v109, v205);
      v195 = operator new(0x88uLL);
      long long v196 = xmmword_20E7B80;
      strcpy((char *)v195, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/Dijkstra.h");
      std::stringbuf::str();
      sub_110D220((uint64_t)&v195, 219, (uint64_t)v193);
      if (v194 < 0)
      {
        operator delete(v193[0]);
        if ((SHIBYTE(v196) & 0x80000000) == 0) {
          goto LABEL_131;
        }
      }
      else if ((SHIBYTE(v196) & 0x80000000) == 0)
      {
LABEL_131:
        v197 = v181;
        *(void ***)((char *)&v197 + (void)*(v181 - 3)) = v183;
        if (v204 < 0) {
          operator delete(v203);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        goto LABEL_134;
      }
      operator delete(v195);
      goto LABEL_131;
    }
LABEL_134:
    int v110 = v79 + 1;
    HIDWORD(v111) = 989560465 * v110;
    LODWORD(v111) = 989560465 * v110;
    if ((v111 >> 4) <= 0x68DB8
      && (std::chrono::steady_clock::now().__d_.__rep_ - v177.__d_.__rep_) / 1000000 > *(unsigned int *)(*(void *)&a1[17] + 76))
    {
      break;
    }
    sub_41B498(a1, (uint64_t)&v205, (uint64_t *)&v206, 1);
    int v178 = v110;
    int v113 = (unint64_t *)v206;
    v112 = v207;
    v188 = (int *)((char *)v207 - v206);
    if (v207 != (unint64_t *)v206)
    {
      while (1)
      {
        unint64_t v114 = *v113;
        int8x8_t v115 = a1[10];
        if (v115)
        {
          unint64_t v116 = 0x2127599BF4325C37
               * (((v114 >> 16) & 0xFFFF0000 | (v114 << 32) | ((*v113 & 0xFF000000000000) == 0)) ^ (((v114 >> 16) & 0xFFFF0000 | (v114 << 32)) >> 23));
          unint64_t v117 = v116 ^ (v116 >> 47);
          uint8x8_t v118 = (uint8x8_t)vcnt_s8(v115);
          v118.i16[0] = vaddlv_u8(v118);
          if (v118.u32[0] > 1uLL)
          {
            unint64_t v119 = v117;
            if (v117 >= *(void *)&v115) {
              unint64_t v119 = v117 % *(void *)&v115;
            }
          }
          else
          {
            unint64_t v119 = v117 & (*(void *)&v115 - 1);
          }
          v120 = *(uint64_t ***)(*(void *)v190 + 8 * v119);
          if (v120)
          {
            v121 = *v120;
            if (v121)
            {
              if (v118.u32[0] < 2uLL)
              {
                uint64_t v122 = *(void *)&v115 - 1;
                while (1)
                {
                  uint64_t v124 = v121[1];
                  if (v117 == v124)
                  {
                    if (__PAIR64__(*((unsigned __int16 *)v121 + 10), *((_DWORD *)v121 + 4)) == __PAIR64__(WORD2(v114), v114)&& (HIWORD(v114) & 1) != (*((unsigned char *)v121 + 22) == 0))
                    {
                      goto LABEL_179;
                    }
                  }
                  else if ((v124 & v122) != v119)
                  {
                    goto LABEL_163;
                  }
                  v121 = (uint64_t *)*v121;
                  if (!v121) {
                    goto LABEL_163;
                  }
                }
              }
              do
              {
                unint64_t v123 = v121[1];
                if (v117 == v123)
                {
                  if (__PAIR64__(*((unsigned __int16 *)v121 + 10), *((_DWORD *)v121 + 4)) == __PAIR64__(WORD2(v114), v114)&& (HIWORD(v114) & 1) != (*((unsigned char *)v121 + 22) == 0))
                  {
                    goto LABEL_179;
                  }
                }
                else
                {
                  if (v123 >= *(void *)&v115) {
                    v123 %= *(void *)&v115;
                  }
                  if (v123 != v119) {
                    break;
                  }
                }
                v121 = (uint64_t *)*v121;
              }
              while (v121);
            }
          }
        }
LABEL_163:
        int8x8_t v126 = a1[14];
        int8x8_t v125 = a1[15];
        v197 = (void **)v113;
        *((_DWORD *)sub_41B8F8((uint64_t)v190, v113, (uint64_t)v81, &v197) + 6) = -1431655765
                                                                              * ((*(void *)&v125 - *(void *)&v126) >> 3);
        v128 = (char *)a1[15];
        unint64_t v127 = (unint64_t)a1[16];
        if ((unint64_t)v128 >= v127) {
          break;
        }
        *(void *)v128 = *v113;
        *(_OWORD *)(v128 + 8) = xmmword_20E7BA0;
        v129 = v128 + 24;
LABEL_178:
        a1[15] = (int8x8_t)v129;
LABEL_179:
        v197 = (void **)v113;
        unint64_t v142 = *((unsigned int *)sub_41B8F8((uint64_t)v190, v113, (uint64_t)v81, &v197) + 6);
        unint64_t v143 = sub_41B608(v80, 1.0, (uint64_t)&v205, (uint64_t)v113, a4, v188 == dword_8);
        unsigned int v144 = v143 + v86;
        unint64_t v145 = (v143 & 0xFFFFFFFF00000000) + v86;
        unint64_t v146 = HIDWORD(v145);
        unint64_t v192 = v145 & 0xFFFFFFFF00000000 | (v143 + v86);
        if (*a5 == 0x7FFFFFFF || *a5 > SHIDWORD(v145))
        {
          unsigned int v147 = *((_DWORD *)*v191 + 6 * v142 + 4);
          if (v147 == -1
            || ((int v148 = *((_DWORD *)*v191 + 6 * v142 + 5), v148 != 0x7FFFFFFF)
              ? (BOOL v149 = v147 > v144)
              : (BOOL v149 = 1),
                v149 || (v147 >= v144 ? (BOOL v150 = v148 <= (int)v146) : (BOOL v150 = 1), !v150)))
          {
            int8x8_t v151 = a1[5];
            if (v142 >= (uint64_t)(*(void *)&a1[6] - *(void *)&v151) >> 2
              || *(_DWORD *)(*(void *)&v151 + 4 * v142) == -1)
            {
              sub_41392C((uint64_t)v186, v142, (unsigned int *)&v192);
            }
            else
            {
              sub_4137CC(v186, v142, (unsigned int *)&v192);
            }
            *((void *)*v191 + 3 * v142 + 2) = v192;
            uint64_t v152 = (uint64_t)*v191 + 24 * v142;
            int v153 = v205;
            *(_DWORD *)(v152 + 11) = *(_DWORD *)((char *)&v205 + 3);
            *(_DWORD *)(v152 + 8) = v153;
          }
          goto LABEL_139;
        }
        if (sub_110D20C())
        {
          sub_6BAC((uint64_t)&v197);
          sub_188FC78(&v197, (uint64_t)"Exceeding the search radius, pruning the search here.", 53);
          v195 = operator new(0x88uLL);
          long long v196 = xmmword_20E7B80;
          strcpy((char *)v195, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/Dijkstra.h");
          std::stringbuf::str();
          sub_110D220((uint64_t)&v195, 260, (uint64_t)v193);
          if (v194 < 0)
          {
            operator delete(v193[0]);
            if ((SHIBYTE(v196) & 0x80000000) == 0) {
              goto LABEL_184;
            }
          }
          else if ((SHIBYTE(v196) & 0x80000000) == 0)
          {
LABEL_184:
            v197 = v181;
            *(void ***)((char *)&v197 + (void)*(v181 - 3)) = v183;
            if (v204 < 0) {
              operator delete(v203);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
            goto LABEL_139;
          }
          operator delete(v195);
          goto LABEL_184;
        }
LABEL_139:
        if (++v113 == v112) {
          goto LABEL_108;
        }
      }
      v130 = (char *)*v191;
      unint64_t v131 = 0xAAAAAAAAAAAAAAABLL * ((v128 - (unsigned char *)*v191) >> 3);
      unint64_t v132 = v131 + 1;
      if (v131 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_2E00();
      }
      v133 = v81;
      v134 = v80;
      unint64_t v135 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v127 - (void)v130) >> 3);
      if (2 * v135 > v132) {
        unint64_t v132 = 2 * v135;
      }
      if (v135 >= 0x555555555555555) {
        unint64_t v136 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v136 = v132;
      }
      if (v136 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      v137 = (char *)operator new(24 * v136);
      v138 = &v137[24 * v131];
      *(void *)v138 = *v113;
      *(_OWORD *)(v138 + 8) = xmmword_20E7BA0;
      if (v128 == v130)
      {
        v129 = v138 + 24;
        a1[14] = (int8x8_t)v138;
        a1[15] = (int8x8_t)(v138 + 24);
        a1[16] = (int8x8_t)&v137[24 * v136];
        if (!v130) {
          goto LABEL_177;
        }
      }
      else
      {
        v139 = &v137[24 * v131];
        do
        {
          long long v140 = *(_OWORD *)(v128 - 24);
          v141 = v139 - 24;
          *((void *)v139 - 1) = *((void *)v128 - 1);
          *(_OWORD *)(v139 - 24) = v140;
          v128 -= 24;
          v139 -= 24;
        }
        while (v128 != v130);
        v129 = v138 + 24;
        a1[14] = (int8x8_t)v141;
        a1[15] = (int8x8_t)(v138 + 24);
        a1[16] = (int8x8_t)&v137[24 * v136];
        if (!v130) {
          goto LABEL_177;
        }
      }
      operator delete(v130);
LABEL_177:
      v80 = v134;
      int v81 = v133;
      goto LABEL_178;
    }
LABEL_108:
    a6 = v179;
    int v79 = v178;
    if (!a1[8].i32[0]) {
      goto LABEL_238;
    }
  }
  if (sub_110D2C8())
  {
    sub_6BAC((uint64_t)&v197);
    sub_188FC78(&v197, (uint64_t)"Reached time limit for exploration.", 35);
    v195 = operator new(0x88uLL);
    long long v196 = xmmword_20E7B80;
    strcpy((char *)v195, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/Dijkstra.h");
    std::stringbuf::str();
    sub_110D2DC((uint64_t)&v195, 229, (uint64_t)v193);
    if (v194 < 0) {
      operator delete(v193[0]);
    }
    if (SHIBYTE(v196) < 0) {
      operator delete(v195);
    }
    v197 = v181;
    *(void ***)((char *)&v197 + (void)*(v181 - 3)) = v183;
    if (v204 < 0) {
      operator delete(v203);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *long long v179 = 0;
  v179[1] = 0;
  v179[2] = 0;
  v176 = (unint64_t *)v206;
  if (v206) {
    goto LABEL_240;
  }
}

void sub_41AE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  sub_111ECAC((uint64_t)&a43);
  uint64_t v45 = *(void **)(v43 - 128);
  if (v45)
  {
    *(void *)(v43 - 120) = v45;
    operator delete(v45);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_41AF78(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_6BAC((uint64_t)v26);
  uint64_t v6 = *(uint64_t **)a3;
  uint64_t v7 = *(void *)(a3 + 8);
  if (*(void *)a3 != v7 && (unint64_t)(((v7 - (uint64_t)v6) >> 3) - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v8 = 0;
    uint64_t v9 = *a1;
    unsigned int v10 = 2;
    unint64_t v11 = 1;
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, void))(*(void *)v9 + 32))(&v28, v9, &v6[v11], 0);
      int v12 = HIDWORD(v28);
      if ((v32 & 0x80000000) == 0) {
        break;
      }
      operator delete(v31);
      int8x8_t v13 = v29;
      if (v29) {
        goto LABEL_9;
      }
LABEL_4:
      v8 += v12;
      unint64_t v11 = v10;
      uint64_t v6 = *(uint64_t **)a3;
      ++v10;
      if (((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3) - 1 <= v11) {
        goto LABEL_10;
      }
    }
    int8x8_t v13 = v29;
    if (!v29) {
      goto LABEL_4;
    }
LABEL_9:
    unint64_t v30 = v13;
    operator delete(v13);
    goto LABEL_4;
  }
LABEL_10:
  sub_188FC78(v26, (uint64_t)"Pathlet ", 8);
  uint64_t v14 = (void *)std::ostream::operator<<();
  uint64_t v15 = sub_188FC78(v14, (uint64_t)" search: ", 9);
  int v16 = *(char *)(a2 + 23);
  if (v16 >= 0) {
    uint64_t v17 = a2;
  }
  else {
    uint64_t v17 = *(void *)a2;
  }
  if (v16 >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v18 = *(void *)(a2 + 8);
  }
  signed int v19 = sub_188FC78(v15, v17, v18);
  sub_188FC78(v19, (uint64_t)": ", 2);
  if (*(void *)a3 == *(void *)(a3 + 8))
  {
    sub_188FC78(v26, (uint64_t)"empty pathlet", 13);
  }
  else
  {
    sub_188FC78(v26, (uint64_t)"pathlet (segments:", 18);
    int v20 = (void *)std::ostream::operator<<();
    sub_188FC78(v20, (uint64_t)", distance_m:", 13);
    int8x8_t v21 = (void *)std::ostream::operator<<();
    sub_188FC78(v21, (uint64_t)")", 1);
    int8x8_t v22 = sub_188FC78(v26, (uint64_t)"start:", 6);
    unint64_t v23 = sub_2DD928(v22, **(void **)a3);
    uint64_t v24 = sub_188FC78(v23, (uint64_t)", end:", 6);
    sub_2DD928(v24, *(void *)(*(void *)(a3 + 8) - 8));
  }
  std::stringbuf::str();
  if (v27 < 0) {
    operator delete((void *)v26[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_41B2A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_41B2B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_41B2CC(void *a1)
{
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  double v3 = (void *)a1[11];
  if (v3)
  {
    do
    {
      unint64_t v4 = (void *)*v3;
      operator delete(v3);
      double v3 = v4;
    }
    while (v4);
  }
  size_t v5 = (void *)a1[9];
  a1[9] = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[5];
  if (v6)
  {
    a1[6] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[2];
  if (v7)
  {
    a1[3] = v7;
    operator delete(v7);
  }
  return a1;
}

void *sub_41B348(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 5)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 59) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 59) {
LABEL_22:
    }
      sub_2E00();
    uint64_t v13 = 4 * v12;
    __n128 result = operator new(32 * v12);
    uint64_t v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = a3 - v6;
    if (v14) {
      __n128 result = memcpy(result, v6, v14 - 4);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  int v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 5;
  if (v17 >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    size_t v19 = v14 - 4;
    int v20 = (void *)*result;
LABEL_20:
    __n128 result = memmove(v20, __src, v19);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[32 * v17];
  if (v16 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v16 - v9 - 4);
    uint64_t v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v18;
  if (v14)
  {
    size_t v19 = v14 - 4;
    int v20 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  void *v15 = &v9[v14];
  return result;
}

unint64_t sub_41B498(void *a1, uint64_t a2, uint64_t *a3, int a4)
{
  unint64_t result = (*(uint64_t (**)(void))(*(void *)*a1 + 72))(*a1);
  if (a4)
  {
    unint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 8))(*a1, a2);
    uint64_t v10 = (int *)*a3;
    uint64_t v9 = (int *)a3[1];
    if ((int *)*a3 != v9)
    {
      while (__PAIR64__(*((unsigned __int16 *)v10 + 2), *v10) != __PAIR64__(WORD2(result), result)
           || (HIWORD(result) & 1) == (*((unsigned char *)v10 + 6) == 0))
      {
        v10 += 2;
        if (v10 == v9) {
          return result;
        }
      }
      if (v10 != v9)
      {
        BOOL v11 = v10 + 2;
        if (v10 + 2 != v9)
        {
          do
          {
            if (__PAIR64__(*((unsigned __int16 *)v11 + 2), *v11) != __PAIR64__(WORD2(result), result)
              || (HIWORD(result) & 1) == (*((unsigned char *)v11 + 6) == 0))
            {
              int v12 = *v11;
              *(int *)((char *)v10 + 3) = *(int *)((char *)v11 + 3);
              int *v10 = v12;
              v10 += 2;
            }
            v11 += 2;
          }
          while (v11 != v9);
          uint64_t v9 = (int *)a3[1];
        }
      }
      if (v10 != v9) {
        a3[1] = (uint64_t)v10;
      }
    }
  }
  return result;
}

unint64_t sub_41B608(void *a1, double a2, uint64_t a3, uint64_t a4, uint64_t *a5, char a6)
{
  int v11 = (*(uint64_t (**)(void))(*(void *)*a1 + 56))(*a1);
  int v12 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 48))(*a1, a4);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 32))(&v40);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a1 + 32))(&v35);
  int v15 = (unsigned __int16)v40;
  double v16 = 1.0;
  if ((unsigned __int16)v40 <= 7u)
  {
    LODWORD(v14) = *((_DWORD *)a5 + (unsigned __int16)v40 + 7);
    double v16 = (double)v14;
  }
  if (a6) {
    goto LABEL_15;
  }
  int v17 = v12 + 360 * ((unsigned __int16)(v11 + 180) / 0x168u) - (v11 + 180);
  if ((__int16)(v12 + 360 * ((unsigned __int16)(v11 + 180) / 0x168u) - (v11 + 180)) > 180) {
    LOWORD(v17) = v17 - 360;
  }
  if ((__int16)v17 < -179) {
    LOWORD(v17) = v17 + 360;
  }
  if ((v17 & 0x8000u) != 0) {
    int v17 = -(__int16)v17;
  }
  uint64_t v13 = *a5;
  uint64_t v18 = a5[1];
  if (*a5 == v18)
  {
LABEL_15:
    int v21 = 0;
  }
  else
  {
    uint64_t v19 = 0;
    while (1)
    {
      unsigned int v20 = *(unsigned __int16 *)(v13 + v19);
      if (v20 >= (unsigned __int16)v17) {
        break;
      }
      v19 += 8;
      if (v13 + v19 == v18) {
        goto LABEL_20;
      }
    }
    if (v13 + v19 == v18)
    {
LABEL_20:
      int v21 = *(_DWORD *)(v18 - 4);
      goto LABEL_21;
    }
    if (v19 && *((unsigned char *)a5 + 24))
    {
      uint64_t v22 = v13 + v19;
      int v23 = *(unsigned __int16 *)(v22 - 8);
      int v24 = *(_DWORD *)(v22 + 4);
      uint64_t v13 = *(unsigned int *)(v22 - 4);
      int v21 = v13
          + vcvtad_u64_f64((double)((unsigned __int16)v17 - v23) / (double)(int)(v20 - v23) * (double)(v24 - v13));
    }
    else
    {
      int v21 = *(_DWORD *)(v13 + v19 + 4);
    }
  }
LABEL_21:
  int v25 = HIDWORD(v40);
  int v26 = (unsigned __int16)v35;
  int v27 = WORD1(v40);
  int v28 = WORD1(v35);
  int v30 = *((_DWORD *)a5 + 15);
  int v29 = *((_DWORD *)a5 + 16);
  if (v39 < 0) {
    operator delete(__p);
  }
  if (v36)
  {
    double v37 = v36;
    operator delete(v36);
  }
  if (v44 < 0) {
    operator delete(v43);
  }
  if (v41)
  {
    unint64_t v42 = v41;
    operator delete(v41);
  }
  if (v15 == v26) {
    int v31 = 0;
  }
  else {
    int v31 = v30;
  }
  LODWORD(v13) = llround((double)v25 * a2);
  unsigned int v32 = fmax(round((double)(int)llround((double)(int)v13 / 100.0) / v16), 1.0);
  if (v27 == v28) {
    int v33 = 0;
  }
  else {
    int v33 = v29;
  }
  return (v21 + v31 + v33 + v32) | (unint64_t)(v13 << 32);
}

void sub_41B8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_40F05C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_41B8F8(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = (*a2 >> 16) & 0xFFFF0000 | (*a2 << 32);
  unint64_t v9 = 0x2127599BF4325C37 * ((v8 | ((*a2 & 0xFF000000000000) == 0)) ^ (v8 >> 23));
  unint64_t v10 = v9 ^ (v9 >> 47);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9 ^ (v9 >> 47);
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v14[1];
            if (v15 == v10)
            {
              if (__PAIR64__(*((unsigned __int16 *)v14 + 10), *((_DWORD *)v14 + 4)) == __PAIR64__(WORD2(v7), v7)
                && (HIWORD(v7) & 1) != (*((unsigned char *)v14 + 22) == 0))
              {
                return v14;
              }
            }
            else if ((v15 & (v11 - 1)) != v4)
            {
              goto LABEL_26;
            }
            unint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_26;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            if (__PAIR64__(*((unsigned __int16 *)v14 + 10), *((_DWORD *)v14 + 4)) == __PAIR64__(WORD2(v7), v7)
              && (HIWORD(v7) & 1) != (*((unsigned char *)v14 + 22) == 0))
            {
              return v14;
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v4) {
              break;
            }
          }
          unint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_26:
  uint64_t v18 = operator new(0x20uLL);
  *uint64_t v18 = 0;
  v18[1] = v10;
  v18[2] = **a4;
  *((_DWORD *)v18 + 6) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
    if (v22)
    {
LABEL_29:
      *uint64_t v18 = *v22;
LABEL_64:
      void *v22 = v18;
      goto LABEL_65;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v11 >= 3) {
      BOOL v23 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v11);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_40;
    }
    if (prime < v11)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v11) {
LABEL_40:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v22) {
          goto LABEL_29;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void **)(*(void *)a1 + 8 * v10);
        if (v22) {
          goto LABEL_29;
        }
      }
    }
    else
    {
      unint64_t v4 = v30 & v10;
      uint64_t v21 = *(void *)a1;
      uint64_t v22 = *(void **)(*(void *)a1 + 8 * (v30 & v10));
      if (v22) {
        goto LABEL_29;
      }
    }
  }
  *uint64_t v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    unint64_t v31 = *(void *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11) {
        v31 %= v11;
      }
    }
    else
    {
      v31 &= v11 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_64;
  }
LABEL_65:
  ++*(void *)(a1 + 24);
  return v18;
}

void sub_41BC94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_41BCA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v7 = a1;
  unint64_t v9 = (uint64_t **)(a1 + 16);
  sub_41DC68((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16), a3, (uint64_t)v170);
  BOOL v10 = *(_DWORD *)v170 == -1 && *(unsigned __int16 *)&v170[4] == 0xFFFF;
  if (!v10 || v170[6] == 0)
  {
    if (!sub_110D20C())
    {
LABEL_15:
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      uint64_t v13 = operator new(8uLL);
      a5[1] = v13 + 2;
      a5[2] = v13 + 2;
      *uint64_t v13 = *(_DWORD *)v170;
      *(_DWORD *)((char *)v13 + 3) = *(_DWORD *)&v170[3];
      *a5 = v13;
      return;
    }
    sub_6BAC((uint64_t)&v165);
    sub_188FC78(&v165, (uint64_t)"Decoded single-segment path.", 28);
    uint64_t v152 = operator new(0x90uLL);
    *(_OWORD *)int v153 = xmmword_20E7B50;
    strcpy((char *)v152, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletDFSDecoder.h");
    std::stringbuf::str();
    sub_110D220((uint64_t)&v152, 155, (uint64_t)v159);
    if (SBYTE7(v160) < 0)
    {
      operator delete(v159[0]);
      uint8x8_t v12 = a5;
      if ((SHIBYTE(v153[1]) & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }
    else
    {
      uint8x8_t v12 = a5;
      if ((SHIBYTE(v153[1]) & 0x80000000) == 0)
      {
LABEL_12:
        if (v169 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        a5 = v12;
        goto LABEL_15;
      }
    }
    operator delete(v152);
    goto LABEL_12;
  }
  int v14 = *(_DWORD *)(v7 + 40);
  if (v14 != 0x7FFFFFFF)
  {
    int v15 = *(_DWORD *)(a2 + 40);
    if (v15 != 0x7FFFFFFF)
    {
      int v16 = v15 - v14;
      if (v16 < 0) {
        int v16 = -v16;
      }
      int v17 = *(_DWORD *)(a4 + 72) + v16;
      signed int v18 = llround(*(double *)(a4 + 64) * (double)v16);
      if (v17 > v18) {
        signed int v18 = v17;
      }
      signed int v140 = v18;
      uint64_t v139 = a2;
      if (!sub_110D20C()) {
        goto LABEL_30;
      }
LABEL_25:
      sub_6BAC((uint64_t)&v165);
      sub_188FC78(&v165, (uint64_t)"Max exploration distance: ", 26);
      float v19 = (void *)std::ostream::operator<<();
      sub_188FC78(v19, (uint64_t)" m.", 3);
      uint64_t v152 = operator new(0x90uLL);
      *(_OWORD *)int v153 = xmmword_20E7B50;
      strcpy((char *)v152, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletDFSDecoder.h");
      std::stringbuf::str();
      sub_110D220((uint64_t)&v152, 161, (uint64_t)v159);
      if (SBYTE7(v160) < 0)
      {
        operator delete(v159[0]);
        float v20 = a5;
        if ((SHIBYTE(v153[1]) & 0x80000000) == 0) {
          goto LABEL_27;
        }
      }
      else
      {
        float v20 = a5;
        if ((SHIBYTE(v153[1]) & 0x80000000) == 0)
        {
LABEL_27:
          if (v169 < 0) {
            operator delete(__p);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
          a5 = v20;
          goto LABEL_30;
        }
      }
      operator delete(v152);
      goto LABEL_27;
    }
  }
  signed int v140 = llround((double)*(int *)(a4 + 56) * 1.2);
  uint64_t v139 = a2;
  if (sub_110D20C()) {
    goto LABEL_25;
  }
LABEL_30:
  unint64_t v162 = 0;
  uint64_t v163 = 0;
  unint64_t v164 = 0;
  long long v160 = 0u;
  long long v161 = 0u;
  *(_OWORD *)uint64_t v159 = 0u;
  uint64_t v21 = *(uint64_t **)(v7 + 24);
  if (v21 == *(uint64_t **)(v7 + 16))
  {
LABEL_170:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_421EEC((uint64_t)v159);
    uint64_t v99 = (char *)v162;
    if (!v162) {
      return;
    }
    goto LABEL_171;
  }
  unint64_t v135 = a5;
  uint64_t v142 = v7;
  do
  {
    v21 -= 4;
    (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)a3 + 72))(a3, v21, &v162);
    if (*(unsigned char *)(v7 + 44))
    {
      unint64_t v24 = v162;
      uint64_t v25 = *v21;
      uint64_t v156 = 0;
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      int64_t v26 = v163 - (unsigned char *)v162;
      if (v163 == v162) {
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a3 + 8))(a3, v21);
      unint64_t v31 = (char *)v162;
      unint64_t v30 = v163;
      if (v162 == v163)
      {
LABEL_52:
        uint64_t v25 = *v21;
        uint64_t v156 = 0;
        uint64_t v157 = 0;
        uint64_t v158 = 0;
        unint64_t v24 = v162;
        int64_t v26 = v31 - (unsigned char *)v162;
        if (v31 == v162) {
          goto LABEL_35;
        }
      }
      else
      {
        while (__PAIR64__(*((unsigned __int16 *)v31 + 2), *(_DWORD *)v31) != __PAIR64__(WORD2(v29), v29)
             || (HIWORD(v29) & 1) == (v31[6] == 0))
        {
          v31 += 8;
          if (v31 == v163)
          {
            unint64_t v31 = v163;
            goto LABEL_52;
          }
        }
        if (v31 == v163 || (unsigned int v32 = v31 + 8, v31 + 8 == v163))
        {
          if (v31 != v163) {
            goto LABEL_44;
          }
        }
        else
        {
          do
          {
            if (__PAIR64__(*((unsigned __int16 *)v32 + 2), *v32) != __PAIR64__(WORD2(v29), v29)
              || (HIWORD(v29) & 1) == (*((unsigned char *)v32 + 6) == 0))
            {
              int v33 = *v32;
              *(_DWORD *)(v31 + 3) = *(_DWORD *)((char *)v32 + 3);
              *(_DWORD *)unint64_t v31 = v33;
              v31 += 8;
            }
            v32 += 2;
          }
          while (v32 != (_DWORD *)v30);
          unint64_t v30 = v163;
          if (v31 != v163)
          {
LABEL_44:
            uint64_t v163 = v31;
            uint64_t v25 = *v21;
            uint64_t v156 = 0;
            uint64_t v157 = 0;
            uint64_t v158 = 0;
            unint64_t v24 = v162;
            int64_t v26 = v31 - (unsigned char *)v162;
            if (v31 != v162) {
              goto LABEL_53;
            }
LABEL_35:
            unint64_t v27 = 0;
            uint8x8_t v28 = 0;
            goto LABEL_55;
          }
        }
        uint64_t v25 = *v21;
        uint64_t v156 = 0;
        uint64_t v157 = 0;
        uint64_t v158 = 0;
        unint64_t v24 = v162;
        int64_t v26 = v30 - (unsigned char *)v162;
        if (v30 == v162) {
          goto LABEL_35;
        }
      }
    }
LABEL_53:
    if (v26 < 0) {
      sub_2E00();
    }
    uint8x8_t v28 = operator new(v26);
    unint64_t v27 = (unint64_t)v28 + 8 * (v26 >> 3);
    memcpy(v28, v24, v26 - 1);
LABEL_55:
    long long v34 = v159[1];
    uint64_t v156 = 0;
    uint64_t v157 = 0;
    uint64_t v158 = 0;
    if ((void *)v160 == v159[1]) {
      uint64_t v35 = 0;
    }
    else {
      uint64_t v35 = 73 * ((uint64_t)(v160 - (unint64_t)v159[1]) >> 3) - 1;
    }
    unint64_t v36 = *((void *)&v161 + 1) + v161;
    if (v35 == *((void *)&v161 + 1) + (void)v161)
    {
      sub_41DFD8((uint64_t)v159);
      long long v34 = v159[1];
      unint64_t v36 = *((void *)&v161 + 1) + v161;
    }
    unint64_t v22 = v34[v36 / 0x49] + 56 * (v36 % 0x49);
    *(void *)(v22 + 16) = 0;
    *(void *)(v22 + 24) = 0;
    *(void *)unint64_t v22 = v25;
    *(void *)(v22 + 8) = v28;
    *(int64x2_t *)(v22 + 16) = vdupq_n_s64(v27);
    *(void *)(v22 + 32) = -1;
    *(void *)(v22 + 40) = 0;
    *(_DWORD *)(v22 + 48) = 0;
    uint64_t v23 = ++*((void *)&v161 + 1);
    uint64_t v7 = v142;
  }
  while (v21 != *v9);
  if (!v23 || !*(_DWORD *)(a4 + 80))
  {
LABEL_173:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    sub_421EEC((uint64_t)v159);
    uint64_t v99 = (char *)v162;
    if (!v162) {
      return;
    }
LABEL_171:
    uint64_t v163 = v99;
    operator delete(v99);
    return;
  }
  unint64_t v37 = 0;
LABEL_66:
  uint64_t v38 = v23 - 1;
  uint64_t v39 = v161;
  uint64_t v40 = v159[1];
  unint64_t v41 = v161 + v23 - 1;
  uint64_t v42 = *((void *)v159[1] + v41 / 0x49);
  unint64_t v43 = v41 % 0x49;
  char v44 = (uint64_t *)(v42 + 56 * (v41 % 0x49));
  double v46 = v44 + 1;
  uint64_t v45 = (int *)v44[1];
  unint64_t v48 = v44 + 4;
  uint64_t v47 = v44[4];
  uint64_t v49 = (int **)(v44 + 2);
  if (v47 == (v44[2] - (uint64_t)v45) >> 3)
  {
    if (v45)
    {
      char *v49 = v45;
      operator delete(v45);
      uint64_t v23 = *((void *)&v161 + 1);
      uint64_t v39 = v161;
      uint64_t v40 = v159[1];
      uint64_t v38 = *((void *)&v161 + 1) - 1;
    }
    uint64_t v50 = v160 - (void)v40;
    BOOL v10 = v50 == 0;
    uint64_t v51 = 73 * (v50 >> 3) - 1;
    *((void *)&v161 + 1) = v38;
    if (v10) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    if ((unint64_t)(v52 - (v39 + v23) + 1) >= 0x92)
    {
      operator delete(*(void **)(v160 - 8));
      *(void *)&long long v160 = v160 - 8;
    }
    goto LABEL_168;
  }
  if (v47 != -1)
  {
    unint64_t v53 = (uint64_t *)&v45[2 * v47];
    *unint64_t v48 = v47 + 1;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t *, void))(*(void *)a3 + 32))(&v152, a3, v53, 0);
    uint64_t v54 = v42 + 56 * v43;
    int v56 = *(_DWORD *)(v54 + 48);
    signed int v55 = (int *)(v54 + 48);
    if (v56 + HIDWORD(v152) <= v140)
    {
      (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)a3 + 72))(a3, v53, &v162);
      if (*(void *)(v42 + 56 * v43 + 40)) {
        BOOL v65 = 1;
      }
      else {
        BOOL v65 = *(unsigned char *)(v7 + 44) == 0;
      }
      if (v65)
      {
        unint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a3 + 8))(a3, v53);
        unsigned int v70 = (char *)v162;
        int64_t v67 = v163;
        if (v162 != v163)
        {
          while (__PAIR64__(*((unsigned __int16 *)v70 + 2), *(_DWORD *)v70) != __PAIR64__(WORD2(v66), v66)
               || (HIWORD(v66) & 1) == (v70[6] == 0))
          {
            v70 += 8;
            if (v70 == v163) {
              goto LABEL_155;
            }
          }
          if (v70 != v163)
          {
            uint64_t v68 = v70 + 8;
            if (v70 + 8 != v163)
            {
              do
              {
                if (__PAIR64__(*((unsigned __int16 *)v68 + 2), *(_DWORD *)v68) != __PAIR64__(WORD2(v66), v66)
                  || (HIWORD(v66) & 1) == (v68[6] == 0))
                {
                  int v69 = *(_DWORD *)v68;
                  *(_DWORD *)(v70 + 3) = *(_DWORD *)(v68 + 3);
                  *(_DWORD *)unsigned int v70 = v69;
                  v70 += 8;
                }
                v68 += 8;
              }
              while (v68 != v67);
              int64_t v67 = v163;
            }
          }
          if (v70 != v67)
          {
            uint64_t v163 = v70;
            goto LABEL_156;
          }
LABEL_155:
          unsigned int v70 = v67;
        }
      }
      else
      {
        unsigned int v70 = v163;
      }
LABEL_156:
      uint64_t v88 = *v53;
      uint64_t v145 = 0;
      uint64_t v146 = 0;
      uint64_t v147 = 0;
      unsigned int v89 = v162;
      uint64_t v90 = v70 - (unsigned char *)v162;
      if (v70 == v162)
      {
        unint64_t v92 = 0;
        unsigned int v91 = 0;
      }
      else
      {
        if (v90 < 0) {
          sub_2E00();
        }
        unsigned int v91 = operator new(v70 - (unsigned char *)v162);
        unint64_t v92 = (unint64_t)v91 + 8 * (v90 >> 3);
        memcpy(v91, v89, v90 - 1);
      }
      unsigned int v93 = v159[1];
      int v94 = HIDWORD(v152);
      int v95 = *v55;
      uint64_t v146 = 0;
      uint64_t v147 = 0;
      uint64_t v145 = 0;
      if ((void *)v160 == v159[1]) {
        uint64_t v96 = 0;
      }
      else {
        uint64_t v96 = 73 * ((uint64_t)(v160 - (unint64_t)v159[1]) >> 3) - 1;
      }
      unint64_t v97 = *((void *)&v161 + 1) + v161;
      if (v96 == *((void *)&v161 + 1) + (void)v161)
      {
        sub_41DFD8((uint64_t)v159);
        unsigned int v93 = v159[1];
        unint64_t v97 = *((void *)&v161 + 1) + v161;
      }
      unint64_t v98 = v93[v97 / 0x49] + 56 * (v97 % 0x49);
      *(void *)(v98 + 16) = 0;
      *(void *)(v98 + 24) = 0;
      *(void *)unint64_t v98 = v88;
      *(void *)(v98 + 8) = v91;
      *(int64x2_t *)(v98 + 16) = vdupq_n_s64(v92);
      *(void *)(v98 + 32) = -1;
      *(void *)(v98 + 40) = v44;
      *(_DWORD *)(v98 + 48) = v95 + v94;
      ++*((void *)&v161 + 1);
      uint64_t v7 = v142;
      if ((v155 & 0x80000000) == 0)
      {
LABEL_83:
        unint64_t v58 = v153[0];
        if (!v153[0]) {
          goto LABEL_168;
        }
LABEL_167:
        v153[1] = v58;
        operator delete(v58);
        goto LABEL_168;
      }
LABEL_166:
      operator delete(v154);
      unint64_t v58 = v153[0];
      if (!v153[0]) {
        goto LABEL_168;
      }
      goto LABEL_167;
    }
    if (!sub_110D20C())
    {
LABEL_82:
      if ((v155 & 0x80000000) == 0) {
        goto LABEL_83;
      }
      goto LABEL_166;
    }
    sub_6BAC((uint64_t)&v165);
    unint64_t v57 = sub_188FC78(&v165, (uint64_t)"Reached max exploration at ", 27);
    sub_2DD928(v57, *v53);
    BOOL v150 = operator new(0x90uLL);
    long long v151 = xmmword_20E7B50;
    strcpy((char *)v150, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletDFSDecoder.h");
    std::stringbuf::str();
    sub_110D220((uint64_t)&v150, 210, (uint64_t)v148);
    if (v149 < 0)
    {
      operator delete(v148[0]);
      if ((SHIBYTE(v151) & 0x80000000) == 0) {
        goto LABEL_79;
      }
    }
    else if ((SHIBYTE(v151) & 0x80000000) == 0)
    {
LABEL_79:
      uint64_t v165 = v138;
      *(uint64_t *)((char *)&v165 + *(void *)(v138 - 24)) = v137;
      if (v169 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_82;
    }
    operator delete(v150);
    goto LABEL_79;
  }
  if (sub_110D20C())
  {
    sub_6BAC((uint64_t)&v165);
    unint64_t v59 = sub_188FC78(&v165, (uint64_t)"Exploring ", 10);
    sub_2DD928(v59, *v44);
    uint64_t v152 = operator new(0x90uLL);
    *(_OWORD *)int v153 = xmmword_20E7B50;
    strcpy((char *)v152, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletDFSDecoder.h");
    std::stringbuf::str();
    sub_110D220((uint64_t)&v152, 233, (uint64_t)&v150);
    if (SHIBYTE(v151) < 0)
    {
      operator delete(v150);
      unint64_t v136 = v37;
      if (SHIBYTE(v153[1]) < 0) {
        goto LABEL_134;
      }
    }
    else
    {
      unint64_t v136 = v37;
      if ((SHIBYTE(v153[1]) & 0x80000000) == 0) {
        goto LABEL_88;
      }
LABEL_134:
      operator delete(v152);
    }
LABEL_88:
    uint64_t v165 = v138;
    *(uint64_t *)((char *)&v165 + *(void *)(v138 - 24)) = v137;
    if (v169 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    unint64_t v37 = v136;
  }
  *unint64_t v48 = 0;
  unsigned int v60 = *(unint64_t **)(v139 + 16);
  int64_t v61 = *(unint64_t **)(v139 + 24);
  if (v60 == v61)
  {
    ++v37;
    if ((unint64_t)*v49 - *v46 >= 9) {
      goto LABEL_122;
    }
    goto LABEL_168;
  }
  double v62 = *v49;
  if ((int *)*v46 == *v49)
  {
    ++v37;
    goto LABEL_168;
  }
  while (1)
  {
    unint64_t v63 = *v60;
    uint64_t v64 = (int *)*v46;
    while (__PAIR64__(*((unsigned __int16 *)v64 + 2), *v64) != __PAIR64__(WORD2(v63), v63)
         || (HIWORD(v63) & 1) == (*((unsigned char *)v64 + 6) == 0))
    {
      v64 += 2;
      if (v64 == v62) {
        goto LABEL_94;
      }
    }
    if (v64 != v62) {
      break;
    }
LABEL_94:
    v60 += 4;
    if (v60 == v61)
    {
      ++v37;
      if ((unint64_t)v62 - *v46 >= 9)
      {
LABEL_122:
        LOWORD(v148[0]) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a3 + 56))(a3, v44);
        if (*(_DWORD *)(v42 + 56 * v43 + 48)) {
          BOOL v71 = 1;
        }
        else {
          BOOL v71 = *(unsigned char *)(v7 + 44) == 0;
        }
        char v72 = !v71;
        char v144 = v72;
        if (v71)
        {
          uint64_t v165 = a3;
          uint64_t v166 = v148;
          uint64_t v167 = a4;
          sub_41DDE8(v46, &v165);
        }
        uint64_t v73 = *v46;
        BOOL v74 = *v49;
        if ((int *)*v46 == *v49)
        {
          uint64_t v75 = *((void *)&v161 + 1);
          uint64_t v76 = v161;
          uint64_t v77 = *((void *)&v161 + 1) - 1;
          unint64_t v78 = v159[1];
          unint64_t v79 = *((void *)&v161 + 1) - 1 + v161;
          uint64_t v80 = *((void *)v159[1] + v79 / 0x49);
          unint64_t v81 = v79 % 0x49;
          double v82 = *(void **)(v80 + 56 * v81 + 8);
          if (v82)
          {
            *(void *)(v80 + 56 * v81 + 16) = v82;
            operator delete(v82);
            uint64_t v75 = *((void *)&v161 + 1);
            uint64_t v76 = v161;
            unint64_t v78 = v159[1];
            uint64_t v77 = *((void *)&v161 + 1) - 1;
          }
          uint64_t v83 = v160 - (void)v78;
          BOOL v10 = v83 == 0;
          uint64_t v84 = 73 * (v83 >> 3) - 1;
          *((void *)&v161 + 1) = v77;
          if (v10) {
            uint64_t v85 = 0;
          }
          else {
            uint64_t v85 = v84;
          }
          if ((unint64_t)(v85 - (v76 + v75) + 1) >= 0x92)
          {
            operator delete(*(void **)(v160 - 8));
            *(void *)&long long v160 = v160 - 8;
          }
          if (sub_110D20C())
          {
            sub_6BAC((uint64_t)&v165);
            unint64_t v86 = sub_188FC78(&v165, (uint64_t)"Segment ", 8);
            v87 = sub_2DD928(v86, *v44);
            sub_188FC78(v87, (uint64_t)" does not have any outgoing segments after pruning.", 51);
            uint64_t v152 = operator new(0x90uLL);
            *(_OWORD *)int v153 = xmmword_20E7B50;
            strcpy((char *)v152, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletDFSDecoder.h");
            std::stringbuf::str();
            sub_110D220((uint64_t)&v152, 268, (uint64_t)&v150);
            if (SHIBYTE(v151) < 0) {
              operator delete(v150);
            }
            if (SHIBYTE(v153[1]) < 0) {
              operator delete(v152);
            }
            uint64_t v165 = v138;
            *(uint64_t *)((char *)&v165 + *(void *)(v138 - 24)) = v137;
            if (v169 < 0) {
              operator delete(__p);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
        }
        else
        {
          v143[0] = a3;
          v143[1] = v148;
          v143[2] = &v144;
          sub_41E5A8(v73, v74, v143, 126 - 2 * __clz(((uint64_t)v74 - v73) >> 3), 1);
        }
      }
LABEL_168:
      uint64_t v23 = *((void *)&v161 + 1);
      if (!*((void *)&v161 + 1)) {
        goto LABEL_173;
      }
      if (v37 >= *(unsigned int *)(a4 + 80)) {
        goto LABEL_170;
      }
      goto LABEL_66;
    }
  }
  int64_t v100 = (_DWORD *)*v46;
  uint64_t v101 = *(void *)*v46;
  int v102 = *v64;
  *(_DWORD *)((char *)v100 + 3) = *(int *)((char *)v64 + 3);
  *int64_t v100 = v102;
  *uint64_t v64 = v101;
  *((unsigned char *)v64 + 6) = BYTE6(v101);
  *((_WORD *)v64 + 2) = WORD2(v101);
  *unint64_t v48 = 1;
  unsigned int v103 = (char *)v162;
  uint64_t v163 = (char *)v162;
  v104 = (void *)(*((void *)v159[1] + (*((void *)&v161 + 1) + (void)v161 - 1) / 0x49uLL)
                  + 56 * ((*((void *)&v161 + 1) + (void)v161 - 1) % 0x49uLL));
  while (2)
  {
    while (1)
    {
      uint64_t v105 = v104;
      uint64_t v106 = v104[4] - 1;
      uint64_t v107 = v104[1];
      if (v103 >= v164) {
        break;
      }
      *(void *)unsigned int v103 = *(void *)(v107 + 8 * v106);
      v103 += 8;
      uint64_t v163 = v103;
      v104 = (void *)v104[5];
      if (!v104) {
        goto LABEL_198;
      }
    }
    int v108 = (char *)v162;
    uint64_t v109 = (v103 - (unsigned char *)v162) >> 3;
    unint64_t v110 = v109 + 1;
    if ((unint64_t)(v109 + 1) >> 61) {
      goto LABEL_228;
    }
    uint64_t v111 = v164 - (unsigned char *)v162;
    if ((v164 - (unsigned char *)v162) >> 2 > v110) {
      unint64_t v110 = v111 >> 2;
    }
    if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v112 = v110;
    }
    if (v112)
    {
      if (v112 >> 61) {
        goto LABEL_229;
      }
      int v113 = (char *)operator new(8 * v112);
      unint64_t v114 = &v113[8 * v109];
      *(void *)unint64_t v114 = *(void *)(v107 + 8 * v106);
      uint64_t v115 = (uint64_t)(v114 + 8);
      if (v103 == v108)
      {
LABEL_195:
        unint64_t v162 = v114;
        uint64_t v163 = (char *)v115;
        unint64_t v164 = &v113[8 * v112];
        if (v103) {
          goto LABEL_196;
        }
        goto LABEL_197;
      }
    }
    else
    {
      int v113 = 0;
      unint64_t v114 = (char *)(8 * v109);
      *(void *)(8 * v109) = *(void *)(v107 + 8 * v106);
      uint64_t v115 = 8 * v109 + 8;
      if (v103 == v108) {
        goto LABEL_195;
      }
    }
    do
    {
      int v116 = *((_DWORD *)v103 - 2);
      v103 -= 8;
      int v117 = *(_DWORD *)(v103 + 3);
      *((_DWORD *)v114 - 2) = v116;
      v114 -= 8;
      *(_DWORD *)(v114 + 3) = v117;
    }
    while (v103 != v108);
    unsigned int v103 = (char *)v162;
    unint64_t v162 = v114;
    uint64_t v163 = (char *)v115;
    unint64_t v164 = &v113[8 * v112];
    if (v103) {
LABEL_196:
    }
      operator delete(v103);
LABEL_197:
    unsigned int v103 = (char *)v115;
    uint64_t v163 = (char *)v115;
    v104 = (void *)v105[5];
    if (v104) {
      continue;
    }
    break;
  }
LABEL_198:
  if (v103 < v164)
  {
    *(void *)unsigned int v103 = *v105;
    uint8x8_t v118 = v103 + 8;
    goto LABEL_216;
  }
  unint64_t v119 = (char *)v162;
  uint64_t v120 = (v103 - (unsigned char *)v162) >> 3;
  unint64_t v121 = v120 + 1;
  if ((unint64_t)(v120 + 1) >> 61) {
LABEL_228:
  }
    sub_2E00();
  uint64_t v122 = v164 - (unsigned char *)v162;
  if ((v164 - (unsigned char *)v162) >> 2 > v121) {
    unint64_t v121 = v122 >> 2;
  }
  if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v123 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v123 = v121;
  }
  if (v123)
  {
    if (v123 >> 61) {
LABEL_229:
    }
      sub_188D718();
    uint64_t v124 = (char *)operator new(8 * v123);
  }
  else
  {
    uint64_t v124 = 0;
  }
  int8x8_t v125 = &v124[8 * v120];
  *(void *)int8x8_t v125 = *v105;
  uint8x8_t v118 = v125 + 8;
  if (v103 == v119)
  {
    unint64_t v162 = &v124[8 * v120];
    uint64_t v163 = v125 + 8;
    unint64_t v164 = &v124[8 * v123];
LABEL_215:
    operator delete(v103);
    goto LABEL_216;
  }
  do
  {
    int v126 = *((_DWORD *)v103 - 2);
    v103 -= 8;
    int v127 = *(_DWORD *)(v103 + 3);
    *((_DWORD *)v125 - 2) = v126;
    v125 -= 8;
    *(_DWORD *)(v125 + 3) = v127;
  }
  while (v103 != v119);
  unsigned int v103 = (char *)v162;
  unint64_t v162 = v125;
  uint64_t v163 = v118;
  unint64_t v164 = &v124[8 * v123];
  if (v103) {
    goto LABEL_215;
  }
LABEL_216:
  uint64_t v163 = v118;
  v128 = v162;
  unint64_t v129 = (unint64_t)(v118 - 8);
  if (v162 != v118 && v129 > (unint64_t)v162)
  {
    unint64_t v131 = (char *)v162 + 8;
    do
    {
      uint64_t v132 = *((void *)v131 - 1);
      int v133 = *(_DWORD *)v129;
      *(_DWORD *)(v131 - 5) = *(_DWORD *)(v129 + 3);
      *((_DWORD *)v131 - 2) = v133;
      *(_DWORD *)unint64_t v129 = v132;
      *(unsigned char *)(v129 + 6) = BYTE6(v132);
      *(_WORD *)(v129 + 4) = WORD2(v132);
      v129 -= 8;
      BOOL v134 = (unint64_t)v131 >= v129;
      v131 += 8;
    }
    while (!v134);
    v128 = v162;
    uint8x8_t v118 = v163;
  }
  *unint64_t v135 = v128;
  v135[1] = v118;
  v135[2] = v164;
  unint64_t v162 = 0;
  uint64_t v163 = 0;
  unint64_t v164 = 0;
  sub_421EEC((uint64_t)v159);
  uint64_t v99 = (char *)v162;
  if (v162) {
    goto LABEL_171;
  }
}

void sub_41D2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  sub_111ECAC((uint64_t)&a62);
  sub_421EEC((uint64_t)&a53);
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  _Unwind_Resume(a1);
}

char *sub_41D4C4@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  size_t v5 = (double *)*((void *)result + 2);
  unint64_t v4 = (double *)*((void *)result + 3);
  double v6 = v5[2];
  *(void *)a2 = *(void *)result;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)result + 2);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  uint64_t v7 = (char *)v4 - (char *)v5;
  if (v4 == v5)
  {
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(result + 40);
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(result + 56);
  }
  else
  {
    if (v7 < 0) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new((char *)v4 - (char *)v5);
    uint64_t v9 = v7 >> 5;
    *(void *)(a2 + 16) = v8;
    uint64_t v10 = 32 * (v7 >> 5);
    unint64_t v11 = &v8[v10];
    *(void *)(a2 + 32) = &v8[v10];
    unint64_t result = (char *)memcpy(v8, v5, v7 - 4);
    uint64_t v12 = 0;
    *(void *)(a2 + 24) = &v8[v10];
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(v2 + 40);
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(v2 + 56);
    while (*(double *)&v8[v12 + 16] <= v6)
    {
      v12 += 32;
      if (v10 == v12) {
        return result;
      }
    }
    if (v12 != 32 * v9)
    {
      uint64_t v13 = &v8[v12];
      int v14 = &v8[32 * v9];
      int64_t v15 = v11 - v14;
      if (v11 != v14) {
        unint64_t result = (char *)memmove(v13, v14, v15 - 4);
      }
      *(void *)(a2 + 24) = &v13[v15];
    }
  }
  return result;
}

void sub_41D5EC(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_41D608(uint64_t a1, unint64_t **a2, void **a3)
{
  size_t v5 = a3[1];
  unint64_t v6 = **a2;
  if (__PAIR64__(*((unsigned __int16 *)v5 - 2), *(v5 - 2)) == __PAIR64__(WORD2(v6), v6)
    && (HIWORD(v6) & 1) != (*((unsigned char *)v5 - 2) == 0))
  {
    return 1;
  }
  unint64_t v8 = (char *)v5 - (unsigned char *)*a3;
  if (v8 <= 0xF)
  {
    if (!sub_110D2C8()) {
      return 0;
    }
    sub_6BAC((uint64_t)&v33);
    sub_188FC78(&v33, (uint64_t)"Previous pathlet is a single-segment pathlet, alignment not possible.", 69);
    unint64_t v31 = operator new(0x90uLL);
    long long v32 = xmmword_20E7B50;
    strcpy((char *)v31, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletDFSDecoder.h");
    std::stringbuf::str();
    sub_110D2DC((uint64_t)&v31, 338, (uint64_t)&v29);
    if (SHIBYTE(v30) < 0)
    {
      operator delete(v29);
      if ((SHIBYTE(v32) & 0x80000000) == 0) {
        goto LABEL_8;
      }
    }
    else if ((SHIBYTE(v32) & 0x80000000) == 0)
    {
LABEL_8:
      if (v36 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      return 0;
    }
    operator delete(v31);
    goto LABEL_8;
  }
  uint64_t v28 = *(void *)((char *)*a3 + v8 - 16);
  unint64_t v31 = 0;
  long long v32 = 0uLL;
  (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)a1 + 64))(a1, &v28, &v31);
  uint64_t v9 = v31;
  if (v31 != (void *)v32)
  {
    unint64_t v10 = **a2;
    while (__PAIR64__(*((unsigned __int16 *)v9 + 2), *(_DWORD *)v9) != __PAIR64__(WORD2(v10), v10)
         || (HIWORD(v10) & 1) == (v9[6] == 0))
    {
      v9 += 8;
      if (v9 == (unsigned char *)v32) {
        goto LABEL_20;
      }
    }
  }
  if (v9 != (unsigned char *)v32)
  {
    uint64_t v12 = (char *)a3[1];
    unint64_t v11 = (unint64_t)a3[2];
    uint64_t v13 = v12 - 8;
    a3[1] = v12 - 8;
    if ((unint64_t)(v12 - 8) < v11)
    {
      *(void *)uint64_t v13 = *(void *)v9;
      goto LABEL_49;
    }
    int v16 = (char *)*a3;
    uint64_t v17 = (v13 - (unsigned char *)*a3) >> 3;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v19 = v11 - (void)v16;
    if (v19 >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 61) {
        sub_188D718();
      }
      uint64_t v21 = (char *)operator new(8 * v20);
    }
    else
    {
      uint64_t v21 = 0;
    }
    unint64_t v22 = &v21[8 * v17];
    uint64_t v23 = &v21[8 * v20];
    *(void *)unint64_t v22 = *(void *)v9;
    uint64_t v12 = v22 + 8;
    if (v13 == v16)
    {
      *a3 = v22;
      a3[1] = v12;
      a3[2] = v23;
    }
    else
    {
      do
      {
        int v24 = *((_DWORD *)v13 - 2);
        v13 -= 8;
        int v25 = *(_DWORD *)(v13 + 3);
        *((_DWORD *)v22 - 2) = v24;
        v22 -= 8;
        *(_DWORD *)(v22 + 3) = v25;
      }
      while (v13 != v16);
      uint64_t v13 = (char *)*a3;
      *a3 = v22;
      a3[1] = v12;
      a3[2] = v23;
      if (!v13)
      {
LABEL_49:
        a3[1] = v12;
        uint64_t v7 = 1;
        int v14 = v31;
        if (!v31) {
          return v7;
        }
        goto LABEL_29;
      }
    }
    operator delete(v13);
    goto LABEL_49;
  }
LABEL_20:
  if (sub_110D440())
  {
    sub_6BAC((uint64_t)&v33);
    sub_188FC78(&v33, (uint64_t)"Could not align pathlets.", 25);
    unint64_t v29 = operator new(0x90uLL);
    long long v30 = xmmword_20E7B50;
    strcpy((char *)v29, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletDFSDecoder.h");
    std::stringbuf::str();
    sub_110D454((uint64_t)&v29, 351, (uint64_t)&v26);
    if (v27 < 0) {
      operator delete(v26);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(v29);
    }
    if (v36 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v7 = 0;
  int v14 = v31;
  if (v31)
  {
LABEL_29:
    *(void *)&long long v32 = v14;
    operator delete(v14);
  }
  return v7;
}

void sub_41DB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_111ECAC((uint64_t)&a29);
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

__n128 sub_41DC68@<Q0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a1;
  if (*a1 != a1[1])
  {
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 32))(&v15, a3, v5, 1);
      int v10 = HIDWORD(v15);
      if ((v19 & 0x80000000) == 0) {
        break;
      }
      operator delete(v18);
      unint64_t v11 = __p;
      if (__p) {
        goto LABEL_6;
      }
LABEL_7:
      uint64_t v12 = *a2;
      uint64_t v13 = a2[1];
      if (*a2 != v13)
      {
        while (__PAIR64__(*(unsigned __int16 *)(v5 + 4), *(_DWORD *)v5) != __PAIR64__((unsigned __int16)WORD2(*(void *)v12), *(void *)v12)|| (HIWORD(*(void *)v12) & 1) == (*(unsigned char *)(v5 + 6) == 0))
        {
          v12 += 32;
          if (v12 == v13) {
            goto LABEL_3;
          }
        }
      }
      if (v12 != v13)
      {
        result.n128_f64[0] = *(double *)(v12 + 8) * (double)v10;
        if ((int)llround(*(double *)(v5 + 8) * (double)v10) <= (int)llround(result.n128_f64[0]))
        {
          __n128 result = *(__n128 *)v12;
          long long v14 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)a4 = *(_OWORD *)v12;
          *(_OWORD *)(a4 + 16) = v14;
          return result;
        }
      }
LABEL_3:
      v5 += 32;
      if (v5 == a1[1]) {
        goto LABEL_17;
      }
    }
    unint64_t v11 = __p;
    if (!__p) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v17 = v11;
    operator delete(v11);
    goto LABEL_7;
  }
LABEL_17:
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)a4 = 0x1FFFFFFFFFFFFLL;
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 24) = 0x7FFFFFFF;
  return result;
}

void *sub_41DDE8(void *result, uint64_t *a2)
{
  uint64_t v2 = result;
  double v3 = (int *)*result;
  unint64_t v4 = (int *)result[1];
  if ((int *)*result == v4) {
    goto LABEL_24;
  }
  uint64_t v5 = (int *)result[1];
  uint64_t v6 = *a2;
  uint64_t v7 = (_WORD *)a2[1];
  uint64_t v8 = a2[2];
  while (1)
  {
    __n128 result = (void *)(*(uint64_t (**)(uint64_t, int *))(*(void *)v6 + 48))(v6, v3);
    int v9 = result + 360 * ((unsigned __int16)(*v7 + 180) / 0x168u) - ((unsigned __int16)*v7 + 180);
    if ((__int16)((_WORD)result + 360 * ((unsigned __int16)(*v7 + 180) / 0x168u) - (*v7 + 180)) > 180) {
      LOWORD(v9) = v9 - 360;
    }
    if ((__int16)v9 < -179) {
      LOWORD(v9) = v9 + 360;
    }
    int v9 = (__int16)v9;
    if ((v9 & 0x8000u) != 0) {
      int v9 = -(__int16)v9;
    }
    if (v9 > *(__int16 *)(v8 + 84)) {
      break;
    }
    v3 += 2;
    if (v3 == v4) {
      goto LABEL_25;
    }
  }
  if (v3 != v4)
  {
    int v10 = v3 + 2;
    if (v3 + 2 != v4)
    {
      uint64_t v5 = v3;
      do
      {
        __n128 result = (void *)(*(uint64_t (**)(uint64_t, int *))(*(void *)v6 + 48))(v6, v10);
        int v11 = result + 360 * ((unsigned __int16)(*v7 + 180) / 0x168u) - ((unsigned __int16)*v7 + 180);
        if ((__int16)((_WORD)result + 360 * ((unsigned __int16)(*v7 + 180) / 0x168u) - (*v7 + 180)) > 180) {
          LOWORD(v11) = v11 - 360;
        }
        if ((__int16)v11 < -179) {
          LOWORD(v11) = v11 + 360;
        }
        int v11 = (__int16)v11;
        if ((v11 & 0x8000u) != 0) {
          int v11 = -(__int16)v11;
        }
        if (v11 <= *(__int16 *)(v8 + 84))
        {
          int v12 = *v10;
          *(int *)((char *)v5 + 3) = *(int *)((char *)v10 + 3);
          *uint64_t v5 = v12;
          v5 += 2;
        }
        v10 += 2;
      }
      while (v10 != v4);
      goto LABEL_25;
    }
LABEL_24:
    uint64_t v5 = v3;
  }
LABEL_25:
  if (v5 != (int *)v2[1]) {
    v2[1] = v5;
  }
  return result;
}

void sub_41DFD8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x49;
  unint64_t v4 = v2 - 73;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    int v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        long long v34 = (char *)operator new(8 * v31);
        uint64_t v35 = &v34[8 * v32];
        char v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            BOOL v74 = &v34[8 * v32];
            uint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v40 = &v35[v76];
              v7 += v76;
              uint64_t v77 = (long long *)(v6 + 3);
              unint64_t v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *unint64_t v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_188D718();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      unsigned int v91 = operator new(0xFF8uLL);
      sub_22368((char **)a1, &v91);
      return;
    }
    unsigned int v91 = operator new(0xFF8uLL);
    sub_224F8((void **)a1, &v91);
    unint64_t v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    int v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        long long v34 = (char *)operator new(8 * v42);
        uint64_t v35 = &v34[8 * v43];
        char v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            double v82 = &v34[8 * v43];
            uint64_t v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v47 = &v35[v84];
              v7 += v84;
              uint64_t v85 = (long long *)(v41 + 3);
              unint64_t v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *unint64_t v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  int v25 = (char *)operator new(8 * v24);
  int64_t v26 = operator new(0xFF8uLL);
  char v27 = &v25[8 * v21];
  uint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    uint64_t v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_188D718();
      }
      uint64_t v49 = (char *)operator new(8 * v48);
      char v27 = &v49[8 * (v48 >> 2)];
      uint64_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      int v25 = v49;
      *(void *)char v27 = v90;
      unint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)char v27 = v26;
      unint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_188D718();
          }
          unsigned int v60 = (char *)operator new(8 * v59);
          int v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          unint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          unint64_t v29 = v53;
          if (!v37)
          {
            unint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            uint64_t v64 = &v60[8 * v61];
            BOOL v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            uint64_t v64 = &v60[8 * v61];
            BOOL v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v64 = &v53[v68];
            BOOL v65 = &v27[v68];
            int v69 = (long long *)(v27 + 16);
            unsigned int v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)unsigned int v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)uint64_t v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          uint64_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          unint64_t v57 = &v29[8 * (v56 >> 1)];
          unint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          unint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          int v25 = v27;
        }
      }
      else
      {
        unint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      uint64_t v51 = v53 - 8;
      char v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)char v27 = v26;
  unint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  uint64_t v51 = v27;
LABEL_46:
  uint64_t v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_41E548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_41E564(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_41E578(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_41E590(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_41E5A8(uint64_t result, int *a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = a2 - 2;
  uint64_t v12 = (int *)v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    uint64_t v10 = (uint64_t)v12;
    uint64_t v14 = (char *)a2 - (char *)v12;
    unint64_t v15 = v14 >> 3;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v33 = (*(uint64_t (**)(void, void *))(*(void *)*a3 + 48))(*a3, (void *)a2 - 1);
          int v34 = v33 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
          if ((__int16)(v33 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
            LOWORD(v34) = v34 - 360;
          }
          if ((__int16)v34 < -179) {
            LOWORD(v34) = v34 + 360;
          }
          if ((v34 & 0x8000u) != 0) {
            int v34 = -(__int16)v34;
          }
          unsigned int v35 = (unsigned __int16)v34;
          __n128 result = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 48))(*a3, v10);
          int v36 = result + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
          if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
            LOWORD(v36) = v36 - 360;
          }
          if ((__int16)v36 < -179) {
            LOWORD(v36) = v36 + 360;
          }
          if ((v36 & 0x8000u) != 0) {
            int v36 = -(__int16)v36;
          }
          BOOL v5 = v35 >= (unsigned __int16)v36;
          BOOL v37 = v35 > (unsigned __int16)v36;
          int v38 = !v5;
          if (!*(unsigned char *)a3[2]) {
            BOOL v37 = v38;
          }
          if (v37)
          {
            uint64_t v39 = *(void *)v10;
            int v40 = *v11;
            *(_DWORD *)(v10 + 3) = *(int *)((char *)a2 - 5);
            *(_DWORD *)uint64_t v10 = v40;
            *uint64_t v11 = v39;
            *((unsigned char *)a2 - 2) = BYTE6(v39);
            *((_WORD *)a2 - 2) = WORD2(v39);
          }
          break;
        case 3uLL:
          __n128 result = sub_41F248((uint64_t *)v10, (int *)(v10 + 8), a2 - 2, a3);
          break;
        case 4uLL:
          __n128 result = sub_420B38(v10, (uint64_t *)(v10 + 8), (uint64_t *)(v10 + 16), a2 - 2, a3);
          break;
        case 5uLL:
          __n128 result = sub_420F5C(v10, (int *)(v10 + 8), (int *)(v10 + 16), (uint64_t *)(v10 + 24), a2 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191)
    {
      if (a5)
      {
        return sub_41EC4C(v10, a2, a3);
      }
      else
      {
        return sub_41EF5C(v10, a2, a3);
      }
    }
    uint64_t v16 = v13;
    if (v13 == 1) {
      break;
    }
    unint64_t v17 = v15 >> 1;
    unint64_t v18 = v10 + 8 * (v15 >> 1);
    if ((unint64_t)v14 < 0x401)
    {
      sub_41F248((uint64_t *)v18, (int *)v10, a2 - 2, a3);
      if (a5) {
        goto LABEL_30;
      }
    }
    else
    {
      sub_41F248((uint64_t *)v10, (int *)v18, a2 - 2, a3);
      uint64_t v19 = 8 * v17;
      uint64_t v20 = (int *)(8 * v17 + v10 - 8);
      sub_41F248((uint64_t *)(v10 + 8), v20, a2 - 4, a3);
      sub_41F248((uint64_t *)(v10 + 16), (int *)(v10 + 8 + v19), a2 - 6, a3);
      sub_41F248((uint64_t *)v20, (int *)v18, (int *)(v10 + 8 + v19), a3);
      uint64_t v21 = *(void *)v10;
      int v22 = *(_DWORD *)(v18 + 3);
      *(_DWORD *)uint64_t v10 = *(_DWORD *)v18;
      *(_DWORD *)(v10 + 3) = v22;
      *(_DWORD *)unint64_t v18 = v21;
      *(unsigned char *)(v18 + 6) = BYTE6(v21);
      *(_WORD *)(v18 + 4) = WORD2(v21);
      if (a5) {
        goto LABEL_30;
      }
    }
    int v23 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 48))(*a3, v10 - 8);
    int v24 = v23 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
    if ((__int16)(v23 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
      LOWORD(v24) = v24 - 360;
    }
    if ((__int16)v24 < -179) {
      LOWORD(v24) = v24 + 360;
    }
    if ((v24 & 0x8000u) != 0) {
      int v24 = -(__int16)v24;
    }
    unsigned int v25 = (unsigned __int16)v24;
    int v26 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 48))(*a3, v10);
    int v27 = v26 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
    if ((__int16)(v26 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
      LOWORD(v27) = v27 - 360;
    }
    if ((__int16)v27 < -179) {
      LOWORD(v27) = v27 + 360;
    }
    if ((v27 & 0x8000u) != 0) {
      int v27 = -(__int16)v27;
    }
    BOOL v5 = v25 >= (unsigned __int16)v27;
    BOOL v28 = v25 > (unsigned __int16)v27;
    char v29 = !v5;
    if (!*(unsigned char *)a3[2]) {
      BOOL v28 = v29;
    }
    if (!v28)
    {
      __n128 result = (uint64_t)sub_41F7E4((uint64_t *)v10, a2, a3);
      uint64_t v12 = (int *)result;
      goto LABEL_35;
    }
LABEL_30:
    unint64_t v30 = sub_41FF60((int *)v10, a2, a3);
    if ((v31 & 1) == 0) {
      goto LABEL_33;
    }
    BOOL v32 = sub_4205EC(v10, v30, a3);
    uint64_t v12 = v30 + 2;
    __n128 result = sub_4205EC((uint64_t)(v30 + 2), a2, a3);
    if (result)
    {
      a4 = -v16;
      a2 = v30;
      if (v32) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v16 + 1;
    if (!v32)
    {
LABEL_33:
      __n128 result = sub_41E5A8(v10, v30, a3, -v16, a5 & 1);
      uint64_t v12 = v30 + 2;
LABEL_35:
      a5 = 0;
      a4 = -v16;
      goto LABEL_3;
    }
  }
  if ((int *)v10 != a2)
  {
    unint64_t v41 = (v15 - 2) >> 1;
    unint64_t v42 = v41 + 1;
    unint64_t v43 = (_DWORD *)(v10 + 8 * v41);
    do
    {
      sub_4214C0(v10, a3, v14 >> 3, v43);
      v43 -= 2;
      --v42;
    }
    while (v42);
    uint64_t v44 = (unint64_t)v14 >> 3;
    do
    {
      while (1)
      {
        uint64_t v47 = *(void *)v10;
        __n128 result = (uint64_t)sub_421A34((_DWORD *)v10, a3, v44);
        if (v11 == (int *)result) {
          break;
        }
        int v45 = *v11;
        *(_DWORD *)(result + 3) = *(int *)((char *)v11 + 3);
        *(_DWORD *)__n128 result = v45;
        *((unsigned char *)v11 + 6) = BYTE6(v47);
        *((_WORD *)v11 + 2) = WORD2(v47);
        *uint64_t v11 = v47;
        v11 -= 2;
        __n128 result = sub_421C18(v10, result + 8, a3, (result + 8 - v10) >> 3);
        BOOL v46 = v44-- <= 2;
        if (v46) {
          return result;
        }
      }
      *(_DWORD *)__n128 result = v47;
      *(unsigned char *)(result + 6) = BYTE6(v47);
      *(_WORD *)(result + 4) = WORD2(v47);
      v11 -= 2;
      BOOL v46 = v44-- <= 2;
    }
    while (!v46);
  }
  return result;
}

uint64_t sub_41EC4C(uint64_t result, void *a2, void *a3)
{
  if ((void *)result != a2)
  {
    v29[11] = v3;
    v29[12] = v4;
    BOOL v5 = a2;
    char v6 = (_DWORD *)result;
    uint64_t v7 = (void *)(result + 8);
    if ((void *)(result + 8) != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (void *)result;
      do
      {
        uint64_t v12 = v10;
        uint64_t v10 = v7;
        int v13 = (*(uint64_t (**)(void, void *))(*(void *)*a3 + 48))(*a3, v7);
        int v14 = v13 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
        if ((__int16)(v13 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
          LOWORD(v14) = v14 - 360;
        }
        if ((__int16)v14 < -179) {
          LOWORD(v14) = v14 + 360;
        }
        if ((v14 & 0x8000u) != 0) {
          int v14 = -(__int16)v14;
        }
        unsigned int v15 = (unsigned __int16)v14;
        __n128 result = (*(uint64_t (**)(void, void *))(*(void *)*a3 + 48))(*a3, v12);
        int v16 = result + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
        if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
          LOWORD(v16) = v16 - 360;
        }
        if ((__int16)v16 < -179) {
          LOWORD(v16) = v16 + 360;
        }
        if ((v16 & 0x8000u) != 0) {
          int v16 = -(__int16)v16;
        }
        BOOL v17 = v15 >= (unsigned __int16)v16;
        BOOL v18 = v15 > (unsigned __int16)v16;
        int v19 = !v17;
        if (!*(unsigned char *)a3[2]) {
          BOOL v18 = v19;
        }
        if (v18)
        {
          v29[0] = *v10;
          uint64_t v20 = v9;
          do
          {
            uint64_t v21 = (char *)v6 + v20;
            *((_DWORD *)v21 + 2) = *(_DWORD *)((char *)v6 + v20);
            *(_DWORD *)(v21 + 11) = *(_DWORD *)((char *)v6 + v20 + 3);
            if (!v20)
            {
              uint64_t v11 = v6;
              goto LABEL_5;
            }
            v20 -= 8;
            int v22 = (*(uint64_t (**)(void, void *))(*(void *)*a3 + 48))(*a3, v29);
            int v23 = v22 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
            if ((__int16)(v22 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
              LOWORD(v23) = v23 - 360;
            }
            if ((__int16)v23 < -179) {
              LOWORD(v23) = v23 + 360;
            }
            if ((v23 & 0x8000u) != 0) {
              int v23 = -(__int16)v23;
            }
            unsigned int v24 = (unsigned __int16)v23;
            __n128 result = (*(uint64_t (**)(void, char *))(*(void *)*a3 + 48))(*a3, (char *)v6 + v20);
            int v25 = result
                + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                - (*(unsigned __int16 *)a3[1]
                 + 180);
            if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
              LOWORD(v25) = v25 - 360;
            }
            if ((__int16)v25 < -179) {
              LOWORD(v25) = v25 + 360;
            }
            if ((v25 & 0x8000u) != 0) {
              int v25 = -(__int16)v25;
            }
            BOOL v17 = v24 >= (unsigned __int16)v25;
            BOOL v26 = v24 > (unsigned __int16)v25;
            char v27 = !v17;
            if (!*(unsigned char *)a3[2]) {
              BOOL v26 = v27;
            }
          }
          while (v26);
          uint64_t v11 = (_DWORD *)((char *)v6 + v20 + 8);
LABEL_5:
          BOOL v5 = a2;
          *uint64_t v11 = v29[0];
          *(_DWORD *)((char *)v11 + 3) = *(_DWORD *)((char *)v29 + 3);
        }
        uint64_t v7 = v10 + 1;
        v9 += 8;
      }
      while (v10 + 1 != v5);
    }
  }
  return result;
}

uint64_t sub_41EF5C(uint64_t result, void *a2, void *a3)
{
  if ((void *)result != a2)
  {
    v25[11] = v3;
    v25[12] = v4;
    char v6 = (void *)result;
    uint64_t v7 = (void *)(result + 8);
    if ((void *)(result + 8) != a2)
    {
      uint64_t v9 = (_DWORD *)(result - 8);
      do
      {
        uint64_t v10 = v6;
        char v6 = v7;
        int v11 = (*(uint64_t (**)(void, void *))(*(void *)*a3 + 48))(*a3, v7);
        int v12 = v11 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
        if ((__int16)(v11 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
          LOWORD(v12) = v12 - 360;
        }
        if ((__int16)v12 < -179) {
          LOWORD(v12) = v12 + 360;
        }
        if ((v12 & 0x8000u) != 0) {
          int v12 = -(__int16)v12;
        }
        unsigned int v13 = (unsigned __int16)v12;
        __n128 result = (*(uint64_t (**)(void, void *))(*(void *)*a3 + 48))(*a3, v10);
        int v14 = result + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
        if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
          LOWORD(v14) = v14 - 360;
        }
        if ((__int16)v14 < -179) {
          LOWORD(v14) = v14 + 360;
        }
        if ((v14 & 0x8000u) != 0) {
          int v14 = -(__int16)v14;
        }
        BOOL v15 = v13 >= (unsigned __int16)v14;
        BOOL v16 = v13 > (unsigned __int16)v14;
        int v17 = !v15;
        if (!*(unsigned char *)a3[2]) {
          BOOL v16 = v17;
        }
        if (v16)
        {
          v25[0] = *v6;
          BOOL v18 = v9;
          do
          {
            v18[4] = v18[2];
            *(_DWORD *)((char *)v18 + 19) = *(_DWORD *)((char *)v18 + 11);
            int v19 = (*(uint64_t (**)(void, void *))(*(void *)*a3 + 48))(*a3, v25);
            int v20 = v19 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
            if ((__int16)(v19 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
              LOWORD(v20) = v20 - 360;
            }
            if ((__int16)v20 < -179) {
              LOWORD(v20) = v20 + 360;
            }
            if ((v20 & 0x8000u) != 0) {
              int v20 = -(__int16)v20;
            }
            unsigned int v21 = (unsigned __int16)v20;
            __n128 result = (*(uint64_t (**)(void, _DWORD *))(*(void *)*a3 + 48))(*a3, v18);
            int v22 = result
                + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                - (*(unsigned __int16 *)a3[1]
                 + 180);
            if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
              LOWORD(v22) = v22 - 360;
            }
            if ((__int16)v22 < -179) {
              LOWORD(v22) = v22 + 360;
            }
            if ((v22 & 0x8000u) != 0) {
              int v22 = -(__int16)v22;
            }
            BOOL v15 = v21 >= (unsigned __int16)v22;
            BOOL v23 = v21 > (unsigned __int16)v22;
            char v24 = !v15;
            if (!*(unsigned char *)a3[2]) {
              BOOL v23 = v24;
            }
            v18 -= 2;
          }
          while (v23);
          v18[4] = v25[0];
          *(_DWORD *)((char *)v18 + 19) = *(_DWORD *)((char *)v25 + 3);
        }
        uint64_t v7 = v6 + 1;
        v9 += 2;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_41F248(uint64_t *a1, int *a2, int *a3, void *a4)
{
  int v8 = (*(uint64_t (**)(void))(*(void *)*a4 + 48))();
  int v9 = v8 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
  if ((__int16)(v8 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180) {
    LOWORD(v9) = v9 - 360;
  }
  if ((__int16)v9 < -179) {
    LOWORD(v9) = v9 + 360;
  }
  if ((v9 & 0x8000u) != 0) {
    int v9 = -(__int16)v9;
  }
  unsigned int v10 = (unsigned __int16)v9;
  int v11 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a4 + 48))(*a4, a1);
  int v12 = v11 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
  if ((__int16)(v11 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180) {
    LOWORD(v12) = v12 - 360;
  }
  if ((__int16)v12 < -179) {
    LOWORD(v12) = v12 + 360;
  }
  if ((v12 & 0x8000u) != 0) {
    int v12 = -(__int16)v12;
  }
  BOOL v13 = v10 >= (unsigned __int16)v12;
  BOOL v14 = v10 > (unsigned __int16)v12;
  char v15 = !v13;
  if (*(unsigned char *)a4[2]) {
    char v16 = v14;
  }
  else {
    char v16 = v15;
  }
  int v17 = (*(uint64_t (**)(void, int *))(*(void *)*a4 + 48))(*a4, a3);
  int v18 = v17 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
  if ((__int16)(v17 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180) {
    LOWORD(v18) = v18 - 360;
  }
  if ((__int16)v18 < -179) {
    LOWORD(v18) = v18 + 360;
  }
  if ((v18 & 0x8000u) != 0) {
    int v18 = -(__int16)v18;
  }
  unsigned int v19 = (unsigned __int16)v18;
  int v20 = (*(uint64_t (**)(void, int *))(*(void *)*a4 + 48))(*a4, a2);
  int v21 = v20 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
  if ((__int16)(v20 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180) {
    LOWORD(v21) = v21 - 360;
  }
  if ((__int16)v21 < -179) {
    LOWORD(v21) = v21 + 360;
  }
  if ((v21 & 0x8000u) != 0) {
    int v21 = -(__int16)v21;
  }
  BOOL v13 = v19 >= (unsigned __int16)v21;
  BOOL v22 = v19 > (unsigned __int16)v21;
  int v23 = !v13;
  if (*(unsigned char *)a4[2]) {
    int v24 = v22;
  }
  else {
    int v24 = v23;
  }
  if (v16)
  {
    uint64_t v25 = *a1;
    if (v24)
    {
      int v26 = *a3;
      *(_DWORD *)((char *)a1 + 3) = *(int *)((char *)a3 + 3);
      *(_DWORD *)a1 = v26;
      *((unsigned char *)a3 + 6) = BYTE6(v25);
      *((_WORD *)a3 + 2) = WORD2(v25);
      *a3 = v25;
      return 1;
    }
    int v38 = *a2;
    *(_DWORD *)((char *)a1 + 3) = *(int *)((char *)a2 + 3);
    *(_DWORD *)a1 = v38;
    *((unsigned char *)a2 + 6) = BYTE6(v25);
    *((_WORD *)a2 + 2) = WORD2(v25);
    *a2 = v25;
    int v39 = (*(uint64_t (**)(void, int *))(*(void *)*a4 + 48))(*a4, a3);
    int v40 = v39 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
    if ((__int16)(v39 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180) {
      LOWORD(v40) = v40 - 360;
    }
    if ((__int16)v40 < -179) {
      LOWORD(v40) = v40 + 360;
    }
    if ((v40 & 0x8000u) != 0) {
      int v40 = -(__int16)v40;
    }
    unsigned int v41 = (unsigned __int16)v40;
    int v42 = (*(uint64_t (**)(void, int *))(*(void *)*a4 + 48))(*a4, a2);
    int v43 = v42 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
    if ((__int16)(v42 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180) {
      LOWORD(v43) = v43 - 360;
    }
    if ((__int16)v43 < -179) {
      LOWORD(v43) = v43 + 360;
    }
    if ((v43 & 0x8000u) != 0) {
      int v43 = -(__int16)v43;
    }
    BOOL v13 = v41 >= (unsigned __int16)v43;
    BOOL v44 = v41 > (unsigned __int16)v43;
    int v45 = !v13;
    if (!*(unsigned char *)a4[2]) {
      BOOL v44 = v45;
    }
    if (!v44) {
      return 1;
    }
    uint64_t v46 = *(void *)a2;
    int v47 = *a3;
    *(int *)((char *)a2 + 3) = *(int *)((char *)a3 + 3);
    *a2 = v47;
    *a3 = v46;
    *((unsigned char *)a3 + 6) = BYTE6(v46);
    *((_WORD *)a3 + 2) = WORD2(v46);
    return 2;
  }
  if (v24)
  {
    uint64_t v27 = *(void *)a2;
    int v28 = *a3;
    *(int *)((char *)a2 + 3) = *(int *)((char *)a3 + 3);
    *a2 = v28;
    *a3 = v27;
    *((unsigned char *)a3 + 6) = BYTE6(v27);
    *((_WORD *)a3 + 2) = WORD2(v27);
    int v29 = (*(uint64_t (**)(void, int *))(*(void *)*a4 + 48))(*a4, a2);
    int v30 = v29 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
    if ((__int16)(v29 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180) {
      LOWORD(v30) = v30 - 360;
    }
    if ((__int16)v30 < -179) {
      LOWORD(v30) = v30 + 360;
    }
    if ((v30 & 0x8000u) != 0) {
      int v30 = -(__int16)v30;
    }
    unsigned int v31 = (unsigned __int16)v30;
    int v32 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a4 + 48))(*a4, a1);
    int v33 = v32 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
    if ((__int16)(v32 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180) {
      LOWORD(v33) = v33 - 360;
    }
    if ((__int16)v33 < -179) {
      LOWORD(v33) = v33 + 360;
    }
    if ((v33 & 0x8000u) != 0) {
      int v33 = -(__int16)v33;
    }
    BOOL v13 = v31 >= (unsigned __int16)v33;
    BOOL v34 = v31 > (unsigned __int16)v33;
    int v35 = !v13;
    if (!*(unsigned char *)a4[2]) {
      BOOL v34 = v35;
    }
    if (!v34) {
      return 1;
    }
    uint64_t v36 = *a1;
    int v37 = *a2;
    *(_DWORD *)((char *)a1 + 3) = *(int *)((char *)a2 + 3);
    *(_DWORD *)a1 = v37;
    *a2 = v36;
    *((unsigned char *)a2 + 6) = BYTE6(v36);
    *((_WORD *)a2 + 2) = WORD2(v36);
    return 2;
  }
  return 0;
}

uint64_t *sub_41F7E4(uint64_t *a1, int *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v59 = *a1;
  char v6 = a2 - 2;
  int v7 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a3 + 48))(*a3, &v59);
  int v8 = v7 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
  if ((__int16)(v7 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
    LOWORD(v8) = v8 - 360;
  }
  if ((__int16)v8 < -179) {
    LOWORD(v8) = v8 + 360;
  }
  if ((v8 & 0x8000u) != 0) {
    int v8 = -(__int16)v8;
  }
  unsigned int v9 = (unsigned __int16)v8;
  int v10 = (*(uint64_t (**)(void, int *))(*(void *)*a3 + 48))(*a3, v6);
  int v11 = v10 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
  if ((__int16)(v10 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
    LOWORD(v11) = v11 - 360;
  }
  if ((__int16)v11 < -179) {
    LOWORD(v11) = v11 + 360;
  }
  if ((v11 & 0x8000u) != 0) {
    int v11 = -(__int16)v11;
  }
  BOOL v12 = v9 >= (unsigned __int16)v11;
  BOOL v13 = v9 > (unsigned __int16)v11;
  char v14 = !v12;
  if (!*(unsigned char *)a3[2]) {
    BOOL v13 = v14;
  }
  if (v13)
  {
    char v15 = a1;
    do
    {
      ++v15;
      int v16 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a3 + 48))(*a3, &v59);
      int v17 = v16 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v16 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v17) = v17 - 360;
      }
      if ((__int16)v17 < -179) {
        LOWORD(v17) = v17 + 360;
      }
      if ((v17 & 0x8000u) != 0) {
        int v17 = -(__int16)v17;
      }
      unsigned int v18 = (unsigned __int16)v17;
      int v19 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a3 + 48))(*a3, v15);
      int v20 = v19 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v19 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v20) = v20 - 360;
      }
      if ((__int16)v20 < -179) {
        LOWORD(v20) = v20 + 360;
      }
      if ((v20 & 0x8000u) != 0) {
        int v20 = -(__int16)v20;
      }
      BOOL v12 = v18 >= (unsigned __int16)v20;
      BOOL v21 = v18 > (unsigned __int16)v20;
      char v22 = !v12;
      if (!*(unsigned char *)a3[2]) {
        BOOL v21 = v22;
      }
    }
    while (!v21);
  }
  else
  {
    int v23 = a1 + 1;
    do
    {
      char v15 = v23;
      if (v23 >= (uint64_t *)v4) {
        break;
      }
      int v24 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a3 + 48))(*a3, &v59);
      int v25 = v24 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v24 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v25) = v25 - 360;
      }
      if ((__int16)v25 < -179) {
        LOWORD(v25) = v25 + 360;
      }
      if ((v25 & 0x8000u) != 0) {
        int v25 = -(__int16)v25;
      }
      unsigned int v26 = (unsigned __int16)v25;
      int v27 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a3 + 48))(*a3, v15);
      int v28 = v27 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v27 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v28) = v28 - 360;
      }
      if ((__int16)v28 < -179) {
        LOWORD(v28) = v28 + 360;
      }
      if ((v28 & 0x8000u) != 0) {
        int v28 = -(__int16)v28;
      }
      BOOL v12 = v26 >= (unsigned __int16)v28;
      BOOL v29 = v26 > (unsigned __int16)v28;
      BOOL v30 = !v12;
      BOOL v31 = *(unsigned char *)a3[2] ? v29 : v30;
      int v23 = v15 + 1;
    }
    while (!v31);
  }
  if (v15 < (uint64_t *)v4)
  {
    do
    {
      v4 -= 2;
      int v32 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a3 + 48))(*a3, &v59);
      int v33 = v32 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v32 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v33) = v33 - 360;
      }
      if ((__int16)v33 < -179) {
        LOWORD(v33) = v33 + 360;
      }
      if ((v33 & 0x8000u) != 0) {
        int v33 = -(__int16)v33;
      }
      unsigned int v34 = (unsigned __int16)v33;
      int v35 = (*(uint64_t (**)(void, int *))(*(void *)*a3 + 48))(*a3, v4);
      int v36 = v35 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v35 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v36) = v36 - 360;
      }
      if ((__int16)v36 < -179) {
        LOWORD(v36) = v36 + 360;
      }
      if ((v36 & 0x8000u) != 0) {
        int v36 = -(__int16)v36;
      }
      BOOL v12 = v34 >= (unsigned __int16)v36;
      BOOL v37 = v34 > (unsigned __int16)v36;
      char v38 = !v12;
      if (!*(unsigned char *)a3[2]) {
        BOOL v37 = v38;
      }
    }
    while (v37);
  }
  while (v15 < (uint64_t *)v4)
  {
    uint64_t v39 = *v15;
    int v40 = *v4;
    *(_DWORD *)((char *)v15 + 3) = *(int *)((char *)v4 + 3);
    *(_DWORD *)char v15 = v40;
    *uint64_t v4 = v39;
    *((unsigned char *)v4 + 6) = BYTE6(v39);
    *((_WORD *)v4 + 2) = WORD2(v39);
    do
    {
      ++v15;
      int v41 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a3 + 48))(*a3, &v59);
      int v42 = v41 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v41 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v42) = v42 - 360;
      }
      if ((__int16)v42 < -179) {
        LOWORD(v42) = v42 + 360;
      }
      if ((v42 & 0x8000u) != 0) {
        int v42 = -(__int16)v42;
      }
      unsigned int v43 = (unsigned __int16)v42;
      int v44 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a3 + 48))(*a3, v15);
      int v45 = v44 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v44 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v45) = v45 - 360;
      }
      if ((__int16)v45 < -179) {
        LOWORD(v45) = v45 + 360;
      }
      if ((v45 & 0x8000u) != 0) {
        int v45 = -(__int16)v45;
      }
      BOOL v12 = v43 >= (unsigned __int16)v45;
      BOOL v46 = v43 > (unsigned __int16)v45;
      int v47 = !v12;
      if (!*(unsigned char *)a3[2]) {
        BOOL v46 = v47;
      }
    }
    while (!v46);
    do
    {
      v4 -= 2;
      int v48 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a3 + 48))(*a3, &v59);
      int v49 = v48 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v48 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v49) = v49 - 360;
      }
      if ((__int16)v49 < -179) {
        LOWORD(v49) = v49 + 360;
      }
      if ((v49 & 0x8000u) != 0) {
        int v49 = -(__int16)v49;
      }
      unsigned int v50 = (unsigned __int16)v49;
      int v51 = (*(uint64_t (**)(void, int *))(*(void *)*a3 + 48))(*a3, v4);
      int v52 = v51 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v51 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v52) = v52 - 360;
      }
      if ((__int16)v52 < -179) {
        LOWORD(v52) = v52 + 360;
      }
      if ((v52 & 0x8000u) != 0) {
        int v52 = -(__int16)v52;
      }
      BOOL v12 = v50 >= (unsigned __int16)v52;
      BOOL v53 = v50 > (unsigned __int16)v52;
      char v54 = !v12;
      if (!*(unsigned char *)a3[2]) {
        BOOL v53 = v54;
      }
    }
    while (v53);
  }
  uint64_t v55 = (int *)(v15 - 1);
  if (v15 - 1 != a1)
  {
    int v56 = *v55;
    *(_DWORD *)((char *)a1 + 3) = *(_DWORD *)((char *)v15 - 5);
    *(_DWORD *)a1 = v56;
  }
  int v57 = v59;
  *(_DWORD *)((char *)v15 - 5) = *(_DWORD *)((char *)&v59 + 3);
  int *v55 = v57;
  return v15;
}

int *sub_41FF60(int *a1, int *a2, void *a3)
{
  uint64_t v6 = 0;
  uint64_t v52 = *(void *)a1;
  do
  {
    v6 += 2;
    int v7 = (*(uint64_t (**)(void, int *))(*(void *)*a3 + 48))(*a3, &a1[v6]);
    int v8 = v7 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
    if ((__int16)(v7 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
      LOWORD(v8) = v8 - 360;
    }
    if ((__int16)v8 < -179) {
      LOWORD(v8) = v8 + 360;
    }
    if ((v8 & 0x8000u) != 0) {
      int v8 = -(__int16)v8;
    }
    unsigned int v9 = (unsigned __int16)v8;
    int v10 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a3 + 48))(*a3, &v52);
    int v11 = v10 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
    if ((__int16)(v10 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
      LOWORD(v11) = v11 - 360;
    }
    if ((__int16)v11 < -179) {
      LOWORD(v11) = v11 + 360;
    }
    if ((v11 & 0x8000u) != 0) {
      int v11 = -(__int16)v11;
    }
    BOOL v12 = v9 >= (unsigned __int16)v11;
    BOOL v13 = v9 > (unsigned __int16)v11;
    char v14 = !v12;
    if (!*(unsigned char *)a3[2]) {
      BOOL v13 = v14;
    }
  }
  while (v13);
  char v15 = &a1[v6];
  int v16 = &a1[v6 - 2];
  if (v6 == 2)
  {
    do
    {
      if (v15 >= a2) {
        break;
      }
      a2 -= 2;
      int v24 = (*(uint64_t (**)(void, int *))(*(void *)*a3 + 48))(*a3, a2);
      int v25 = v24 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v24 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v25) = v25 - 360;
      }
      if ((__int16)v25 < -179) {
        LOWORD(v25) = v25 + 360;
      }
      if ((v25 & 0x8000u) != 0) {
        int v25 = -(__int16)v25;
      }
      unsigned int v26 = (unsigned __int16)v25;
      int v27 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a3 + 48))(*a3, &v52);
      int v28 = v27 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v27 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v28) = v28 - 360;
      }
      if ((__int16)v28 < -179) {
        LOWORD(v28) = v28 + 360;
      }
      if ((v28 & 0x8000u) != 0) {
        int v28 = -(__int16)v28;
      }
      BOOL v12 = v26 >= (unsigned __int16)v28;
      BOOL v29 = v26 > (unsigned __int16)v28;
      char v30 = !v12;
      if (!*(unsigned char *)a3[2]) {
        BOOL v29 = v30;
      }
    }
    while (!v29);
  }
  else
  {
    do
    {
      a2 -= 2;
      int v17 = (*(uint64_t (**)(void, int *))(*(void *)*a3 + 48))(*a3, a2);
      int v18 = v17 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v17 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v18) = v18 - 360;
      }
      if ((__int16)v18 < -179) {
        LOWORD(v18) = v18 + 360;
      }
      if ((v18 & 0x8000u) != 0) {
        int v18 = -(__int16)v18;
      }
      unsigned int v19 = (unsigned __int16)v18;
      int v20 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a3 + 48))(*a3, &v52);
      int v21 = v20 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v20 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v21) = v21 - 360;
      }
      if ((__int16)v21 < -179) {
        LOWORD(v21) = v21 + 360;
      }
      if ((v21 & 0x8000u) != 0) {
        int v21 = -(__int16)v21;
      }
      BOOL v12 = v19 >= (unsigned __int16)v21;
      BOOL v22 = v19 > (unsigned __int16)v21;
      int v23 = !v12;
      if (!*(unsigned char *)a3[2]) {
        BOOL v22 = v23;
      }
    }
    while (!v22);
  }
  if (v15 < a2)
  {
    BOOL v31 = &a1[v6];
    int v32 = a2;
    do
    {
      uint64_t v33 = *(void *)v31;
      int v34 = *v32;
      *(int *)((char *)v31 + 3) = *(int *)((char *)v32 + 3);
      int *v31 = v34;
      int *v32 = v33;
      *((unsigned char *)v32 + 6) = BYTE6(v33);
      *((_WORD *)v32 + 2) = WORD2(v33);
      do
      {
        v31 += 2;
        int v35 = (*(uint64_t (**)(void, int *))(*(void *)*a3 + 48))(*a3, v31);
        int v36 = v35 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
        if ((__int16)(v35 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
          LOWORD(v36) = v36 - 360;
        }
        if ((__int16)v36 < -179) {
          LOWORD(v36) = v36 + 360;
        }
        if ((v36 & 0x8000u) != 0) {
          int v36 = -(__int16)v36;
        }
        unsigned int v37 = (unsigned __int16)v36;
        int v38 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a3 + 48))(*a3, &v52);
        int v39 = v38 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
        if ((__int16)(v38 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
          LOWORD(v39) = v39 - 360;
        }
        if ((__int16)v39 < -179) {
          LOWORD(v39) = v39 + 360;
        }
        if ((v39 & 0x8000u) != 0) {
          int v39 = -(__int16)v39;
        }
        BOOL v12 = v37 >= (unsigned __int16)v39;
        BOOL v40 = v37 > (unsigned __int16)v39;
        char v41 = !v12;
        if (!*(unsigned char *)a3[2]) {
          BOOL v40 = v41;
        }
      }
      while (v40);
      do
      {
        v32 -= 2;
        int v42 = (*(uint64_t (**)(void, int *))(*(void *)*a3 + 48))(*a3, v32);
        int v43 = v42 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
        if ((__int16)(v42 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
          LOWORD(v43) = v43 - 360;
        }
        if ((__int16)v43 < -179) {
          LOWORD(v43) = v43 + 360;
        }
        if ((v43 & 0x8000u) != 0) {
          int v43 = -(__int16)v43;
        }
        unsigned int v44 = (unsigned __int16)v43;
        int v45 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a3 + 48))(*a3, &v52);
        int v46 = v45 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
        if ((__int16)(v45 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
          LOWORD(v46) = v46 - 360;
        }
        if ((__int16)v46 < -179) {
          LOWORD(v46) = v46 + 360;
        }
        if ((v46 & 0x8000u) != 0) {
          int v46 = -(__int16)v46;
        }
        BOOL v12 = v44 >= (unsigned __int16)v46;
        BOOL v47 = v44 > (unsigned __int16)v46;
        int v48 = !v12;
        if (!*(unsigned char *)a3[2]) {
          BOOL v47 = v48;
        }
      }
      while (!v47);
    }
    while (v31 < v32);
    int v16 = v31 - 2;
  }
  if (v16 != a1)
  {
    int v49 = *v16;
    *(int *)((char *)a1 + 3) = *(int *)((char *)v16 + 3);
    *a1 = v49;
  }
  int v50 = v52;
  *(int *)((char *)v16 + 3) = *(_DWORD *)((char *)&v52 + 3);
  *int v16 = v50;
  return v16;
}

BOOL sub_4205EC(uint64_t a1, int *a2, void *a3)
{
  uint64_t v5 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v7 = a2 - 2;
      int v8 = (*(uint64_t (**)(void, void *))(*(void *)*a3 + 48))(*a3, (void *)a2 - 1);
      int v9 = v8 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v8 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v9) = v9 - 360;
      }
      if ((__int16)v9 < -179) {
        LOWORD(v9) = v9 + 360;
      }
      if ((v9 & 0x8000u) != 0) {
        int v9 = -(__int16)v9;
      }
      unsigned int v10 = (unsigned __int16)v9;
      int v11 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 48))(*a3, a1);
      int v12 = v11 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v11 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v12) = v12 - 360;
      }
      if ((__int16)v12 < -179) {
        LOWORD(v12) = v12 + 360;
      }
      if ((v12 & 0x8000u) != 0) {
        int v12 = -(__int16)v12;
      }
      BOOL v13 = v10 >= (unsigned __int16)v12;
      BOOL v14 = v10 > (unsigned __int16)v12;
      int v15 = !v13;
      if (!*(unsigned char *)a3[2]) {
        BOOL v14 = v15;
      }
      if (v14)
      {
        uint64_t v16 = *(void *)a1;
        int v17 = *v7;
        *(_DWORD *)(a1 + 3) = *(int *)((char *)v7 + 3);
        *(_DWORD *)a1 = v17;
        *int v7 = v16;
        *((unsigned char *)v7 + 6) = BYTE6(v16);
        *((_WORD *)v7 + 2) = WORD2(v16);
      }
      return 1;
    case 3:
      sub_41F248((uint64_t *)a1, (int *)(a1 + 8), a2 - 2, a3);
      return 1;
    case 4:
      sub_420B38(a1, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 16), a2 - 2, a3);
      return 1;
    case 5:
      sub_420F5C(a1, (int *)(a1 + 8), (int *)(a1 + 16), (uint64_t *)(a1 + 24), a2 - 2, a3);
      return 1;
    default:
      int v18 = (void *)(a1 + 16);
      sub_41F248((uint64_t *)a1, (int *)(a1 + 8), (int *)(a1 + 16), a3);
      unsigned int v19 = (void *)(a1 + 24);
      if ((int *)(a1 + 24) == a2) {
        return 1;
      }
      uint64_t v20 = 0;
      int v39 = 0;
      break;
  }
  while (1)
  {
    int v21 = (*(uint64_t (**)(void, void *))(*(void *)*a3 + 48))(*a3, v19);
    int v22 = v21 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
    if ((__int16)(v21 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
      LOWORD(v22) = v22 - 360;
    }
    if ((__int16)v22 < -179) {
      LOWORD(v22) = v22 + 360;
    }
    if ((v22 & 0x8000u) != 0) {
      int v22 = -(__int16)v22;
    }
    unsigned int v23 = (unsigned __int16)v22;
    int v24 = (*(uint64_t (**)(void, void *))(*(void *)*a3 + 48))(*a3, v18);
    int v25 = v24 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
    if ((__int16)(v24 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
      LOWORD(v25) = v25 - 360;
    }
    if ((__int16)v25 < -179) {
      LOWORD(v25) = v25 + 360;
    }
    if ((v25 & 0x8000u) != 0) {
      int v25 = -(__int16)v25;
    }
    BOOL v13 = v23 >= (unsigned __int16)v25;
    BOOL v26 = v23 > (unsigned __int16)v25;
    int v27 = !v13;
    if (!*(unsigned char *)a3[2]) {
      BOOL v26 = v27;
    }
    if (!v26) {
      goto LABEL_23;
    }
    uint64_t v41 = *v19;
    uint64_t v28 = v20;
    while (1)
    {
      uint64_t v29 = a1 + v28;
      *(_DWORD *)(v29 + 24) = *(_DWORD *)(a1 + v28 + 16);
      *(_DWORD *)(v29 + 27) = *(_DWORD *)(a1 + v28 + 19);
      if (v28 == -16) {
        break;
      }
      uint64_t v30 = v29 + 8;
      int v31 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a3 + 48))(*a3, &v41);
      int v32 = v31 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v31 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v32) = v32 - 360;
      }
      if ((__int16)v32 < -179) {
        LOWORD(v32) = v32 + 360;
      }
      if ((v32 & 0x8000u) != 0) {
        int v32 = -(__int16)v32;
      }
      unsigned int v33 = (unsigned __int16)v32;
      int v34 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 48))(*a3, v30);
      int v35 = v34 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v34 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
        LOWORD(v35) = v35 - 360;
      }
      if ((__int16)v35 < -179) {
        LOWORD(v35) = v35 + 360;
      }
      if ((v35 & 0x8000u) != 0) {
        int v35 = -(__int16)v35;
      }
      BOOL v13 = v33 >= (unsigned __int16)v35;
      BOOL v36 = v33 > (unsigned __int16)v35;
      char v37 = !v13;
      if (!*(unsigned char *)a3[2]) {
        BOOL v36 = v37;
      }
      v28 -= 8;
      if (!v36)
      {
        int v38 = (_DWORD *)(a1 + v28 + 24);
        goto LABEL_64;
      }
    }
    int v38 = (_DWORD *)a1;
LABEL_64:
    *int v38 = v41;
    *(_DWORD *)((char *)v38 + 3) = *(_DWORD *)((char *)&v41 + 3);
    if (v39 == 7) {
      return v19 + 1 == (void *)a2;
    }
    ++v39;
LABEL_23:
    int v18 = v19;
    v20 += 8;
    if (++v19 == (void *)a2) {
      return 1;
    }
  }
}

uint64_t sub_420B38(uint64_t a1, uint64_t *a2, uint64_t *a3, int *a4, void *a5)
{
  sub_41F248((uint64_t *)a1, (int *)a2, (int *)a3, a5);
  int v10 = (*(uint64_t (**)(void, int *))(*(void *)*a5 + 48))(*a5, a4);
  int v11 = v10 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(unsigned __int16 *)a5[1] + 180);
  if ((__int16)(v10 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(_WORD *)a5[1] + 180)) > 180) {
    LOWORD(v11) = v11 - 360;
  }
  if ((__int16)v11 < -179) {
    LOWORD(v11) = v11 + 360;
  }
  if ((v11 & 0x8000u) != 0) {
    int v11 = -(__int16)v11;
  }
  unsigned int v12 = (unsigned __int16)v11;
  uint64_t result = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a5 + 48))(*a5, a3);
  int v14 = result + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(unsigned __int16 *)a5[1] + 180);
  if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(_WORD *)a5[1] + 180)) > 180) {
    LOWORD(v14) = v14 - 360;
  }
  if ((__int16)v14 < -179) {
    LOWORD(v14) = v14 + 360;
  }
  if ((v14 & 0x8000u) != 0) {
    int v14 = -(__int16)v14;
  }
  BOOL v15 = v12 >= (unsigned __int16)v14;
  BOOL v16 = v12 > (unsigned __int16)v14;
  int v17 = !v15;
  if (!*(unsigned char *)a5[2]) {
    BOOL v16 = v17;
  }
  if (v16)
  {
    uint64_t v18 = *a3;
    int v19 = *a4;
    *(_DWORD *)((char *)a3 + 3) = *(int *)((char *)a4 + 3);
    *(_DWORD *)a3 = v19;
    *a4 = v18;
    *((unsigned char *)a4 + 6) = BYTE6(v18);
    *((_WORD *)a4 + 2) = WORD2(v18);
    int v20 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a5 + 48))(*a5, a3);
    int v21 = v20 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(unsigned __int16 *)a5[1] + 180);
    if ((__int16)(v20 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(_WORD *)a5[1] + 180)) > 180) {
      LOWORD(v21) = v21 - 360;
    }
    if ((__int16)v21 < -179) {
      LOWORD(v21) = v21 + 360;
    }
    if ((v21 & 0x8000u) != 0) {
      int v21 = -(__int16)v21;
    }
    unsigned int v22 = (unsigned __int16)v21;
    uint64_t result = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a5 + 48))(*a5, a2);
    int v23 = result + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(unsigned __int16 *)a5[1] + 180);
    if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(_WORD *)a5[1] + 180)) > 180) {
      LOWORD(v23) = v23 - 360;
    }
    if ((__int16)v23 < -179) {
      LOWORD(v23) = v23 + 360;
    }
    if ((v23 & 0x8000u) != 0) {
      int v23 = -(__int16)v23;
    }
    BOOL v15 = v22 >= (unsigned __int16)v23;
    BOOL v24 = v22 > (unsigned __int16)v23;
    int v25 = !v15;
    if (!*(unsigned char *)a5[2]) {
      BOOL v24 = v25;
    }
    if (v24)
    {
      uint64_t v26 = *a2;
      int v27 = *(_DWORD *)a3;
      *(_DWORD *)((char *)a2 + 3) = *(_DWORD *)((char *)a3 + 3);
      *(_DWORD *)a2 = v27;
      *(_DWORD *)a3 = v26;
      *((unsigned char *)a3 + 6) = BYTE6(v26);
      *((_WORD *)a3 + 2) = WORD2(v26);
      int v28 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a5 + 48))(*a5, a2);
      int v29 = v28 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(unsigned __int16 *)a5[1] + 180);
      if ((__int16)(v28 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(_WORD *)a5[1] + 180)) > 180) {
        LOWORD(v29) = v29 - 360;
      }
      if ((__int16)v29 < -179) {
        LOWORD(v29) = v29 + 360;
      }
      if ((v29 & 0x8000u) != 0) {
        int v29 = -(__int16)v29;
      }
      unsigned int v30 = (unsigned __int16)v29;
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)*a5 + 48))(*a5, a1);
      int v31 = result + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(unsigned __int16 *)a5[1] + 180);
      if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(_WORD *)a5[1] + 180)) > 180) {
        LOWORD(v31) = v31 - 360;
      }
      if ((__int16)v31 < -179) {
        LOWORD(v31) = v31 + 360;
      }
      if ((v31 & 0x8000u) != 0) {
        int v31 = -(__int16)v31;
      }
      BOOL v15 = v30 >= (unsigned __int16)v31;
      BOOL v32 = v30 > (unsigned __int16)v31;
      int v33 = !v15;
      if (!*(unsigned char *)a5[2]) {
        BOOL v32 = v33;
      }
      if (v32)
      {
        uint64_t v34 = *(void *)a1;
        int v35 = *(_DWORD *)a2;
        *(_DWORD *)(a1 + 3) = *(_DWORD *)((char *)a2 + 3);
        *(_DWORD *)a1 = v35;
        *(_DWORD *)a2 = v34;
        *((unsigned char *)a2 + 6) = BYTE6(v34);
        *((_WORD *)a2 + 2) = WORD2(v34);
      }
    }
  }
  return result;
}

uint64_t sub_420F5C(uint64_t a1, int *a2, int *a3, uint64_t *a4, int *a5, void *a6)
{
  sub_420B38(a1, (uint64_t *)a2, (uint64_t *)a3, (int *)a4, a6);
  int v12 = (*(uint64_t (**)(void, int *))(*(void *)*a6 + 48))(*a6, a5);
  int v13 = v12 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
  if ((__int16)(v12 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180) {
    LOWORD(v13) = v13 - 360;
  }
  if ((__int16)v13 < -179) {
    LOWORD(v13) = v13 + 360;
  }
  if ((v13 & 0x8000u) != 0) {
    int v13 = -(__int16)v13;
  }
  unsigned int v14 = (unsigned __int16)v13;
  uint64_t result = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a6 + 48))(*a6, a4);
  int v16 = result + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
  if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180) {
    LOWORD(v16) = v16 - 360;
  }
  if ((__int16)v16 < -179) {
    LOWORD(v16) = v16 + 360;
  }
  if ((v16 & 0x8000u) != 0) {
    int v16 = -(__int16)v16;
  }
  BOOL v17 = v14 >= (unsigned __int16)v16;
  BOOL v18 = v14 > (unsigned __int16)v16;
  int v19 = !v17;
  if (!*(unsigned char *)a6[2]) {
    BOOL v18 = v19;
  }
  if (v18)
  {
    uint64_t v20 = *a4;
    int v21 = *a5;
    *(_DWORD *)((char *)a4 + 3) = *(int *)((char *)a5 + 3);
    *(_DWORD *)a4 = v21;
    *a5 = v20;
    *((unsigned char *)a5 + 6) = BYTE6(v20);
    *((_WORD *)a5 + 2) = WORD2(v20);
    int v22 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a6 + 48))(*a6, a4);
    int v23 = v22 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
    if ((__int16)(v22 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180) {
      LOWORD(v23) = v23 - 360;
    }
    if ((__int16)v23 < -179) {
      LOWORD(v23) = v23 + 360;
    }
    if ((v23 & 0x8000u) != 0) {
      int v23 = -(__int16)v23;
    }
    unsigned int v24 = (unsigned __int16)v23;
    uint64_t result = (*(uint64_t (**)(void, int *))(*(void *)*a6 + 48))(*a6, a3);
    int v25 = result + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
    if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180) {
      LOWORD(v25) = v25 - 360;
    }
    if ((__int16)v25 < -179) {
      LOWORD(v25) = v25 + 360;
    }
    if ((v25 & 0x8000u) != 0) {
      int v25 = -(__int16)v25;
    }
    BOOL v17 = v24 >= (unsigned __int16)v25;
    BOOL v26 = v24 > (unsigned __int16)v25;
    int v27 = !v17;
    if (!*(unsigned char *)a6[2]) {
      BOOL v26 = v27;
    }
    if (v26)
    {
      uint64_t v28 = *(void *)a3;
      int v29 = *(_DWORD *)a4;
      *(int *)((char *)a3 + 3) = *(_DWORD *)((char *)a4 + 3);
      *a3 = v29;
      *(_DWORD *)a4 = v28;
      *((unsigned char *)a4 + 6) = BYTE6(v28);
      *((_WORD *)a4 + 2) = WORD2(v28);
      int v30 = (*(uint64_t (**)(void, int *))(*(void *)*a6 + 48))(*a6, a3);
      int v31 = v30 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
      if ((__int16)(v30 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180) {
        LOWORD(v31) = v31 - 360;
      }
      if ((__int16)v31 < -179) {
        LOWORD(v31) = v31 + 360;
      }
      if ((v31 & 0x8000u) != 0) {
        int v31 = -(__int16)v31;
      }
      unsigned int v32 = (unsigned __int16)v31;
      uint64_t result = (*(uint64_t (**)(void, int *))(*(void *)*a6 + 48))(*a6, a2);
      int v33 = result + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
      if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180) {
        LOWORD(v33) = v33 - 360;
      }
      if ((__int16)v33 < -179) {
        LOWORD(v33) = v33 + 360;
      }
      if ((v33 & 0x8000u) != 0) {
        int v33 = -(__int16)v33;
      }
      BOOL v17 = v32 >= (unsigned __int16)v33;
      BOOL v34 = v32 > (unsigned __int16)v33;
      int v35 = !v17;
      if (!*(unsigned char *)a6[2]) {
        BOOL v34 = v35;
      }
      if (v34)
      {
        uint64_t v36 = *(void *)a2;
        int v37 = *a3;
        *(int *)((char *)a2 + 3) = *(int *)((char *)a3 + 3);
        *a2 = v37;
        *a3 = v36;
        *((unsigned char *)a3 + 6) = BYTE6(v36);
        *((_WORD *)a3 + 2) = WORD2(v36);
        int v38 = (*(uint64_t (**)(void, int *))(*(void *)*a6 + 48))(*a6, a2);
        int v39 = v38 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
        if ((__int16)(v38 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180) {
          LOWORD(v39) = v39 - 360;
        }
        if ((__int16)v39 < -179) {
          LOWORD(v39) = v39 + 360;
        }
        if ((v39 & 0x8000u) != 0) {
          int v39 = -(__int16)v39;
        }
        unsigned int v40 = (unsigned __int16)v39;
        uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)*a6 + 48))(*a6, a1);
        int v41 = result + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
        if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180) {
          LOWORD(v41) = v41 - 360;
        }
        if ((__int16)v41 < -179) {
          LOWORD(v41) = v41 + 360;
        }
        if ((v41 & 0x8000u) != 0) {
          int v41 = -(__int16)v41;
        }
        BOOL v17 = v40 >= (unsigned __int16)v41;
        BOOL v42 = v40 > (unsigned __int16)v41;
        int v43 = !v17;
        if (!*(unsigned char *)a6[2]) {
          BOOL v42 = v43;
        }
        if (v42)
        {
          uint64_t v44 = *(void *)a1;
          int v45 = *a2;
          *(_DWORD *)(a1 + 3) = *(int *)((char *)a2 + 3);
          *(_DWORD *)a1 = v45;
          *a2 = v44;
          *((unsigned char *)a2 + 6) = BYTE6(v44);
          *((_WORD *)a2 + 2) = WORD2(v44);
        }
      }
    }
  }
  return result;
}

uint64_t sub_4214C0(uint64_t result, void *a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    int64_t v45 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v8 = ((uint64_t)a4 - result) >> 2;
      uint64_t v9 = v8 + 1;
      int v10 = (_DWORD *)(result + 8 * (v8 + 1));
      uint64_t v11 = v8 + 2;
      if (v8 + 2 < a3)
      {
        int v12 = (*(uint64_t (**)(void, _DWORD *))(*(void *)*a2 + 48))(*a2, v10);
        int v13 = v12 + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(unsigned __int16 *)a2[1] + 180);
        if ((__int16)(v12 + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(_WORD *)a2[1] + 180)) > 180) {
          LOWORD(v13) = v13 - 360;
        }
        if ((__int16)v13 < -179) {
          LOWORD(v13) = v13 + 360;
        }
        if ((v13 & 0x8000u) != 0) {
          int v13 = -(__int16)v13;
        }
        unsigned int v14 = (unsigned __int16)v13;
        int v15 = (*(uint64_t (**)(void, _DWORD *))(*(void *)*a2 + 48))(*a2, v10 + 2);
        int v16 = v15 + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(unsigned __int16 *)a2[1] + 180);
        if ((__int16)(v15 + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(_WORD *)a2[1] + 180)) > 180) {
          LOWORD(v16) = v16 - 360;
        }
        if ((__int16)v16 < -179) {
          LOWORD(v16) = v16 + 360;
        }
        if ((v16 & 0x8000u) != 0) {
          int v16 = -(__int16)v16;
        }
        BOOL v17 = v14 >= (unsigned __int16)v16;
        BOOL v18 = v14 > (unsigned __int16)v16;
        int v19 = !v17;
        if (!*(unsigned char *)a2[2]) {
          BOOL v18 = v19;
        }
        if (v18)
        {
          v10 += 2;
          uint64_t v9 = v11;
        }
      }
      int v20 = (*(uint64_t (**)(void, _DWORD *))(*(void *)*a2 + 48))(*a2, v10);
      int v21 = v20 + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(unsigned __int16 *)a2[1] + 180);
      if ((__int16)(v20 + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(_WORD *)a2[1] + 180)) > 180) {
        LOWORD(v21) = v21 - 360;
      }
      if ((__int16)v21 < -179) {
        LOWORD(v21) = v21 + 360;
      }
      if ((v21 & 0x8000u) != 0) {
        int v21 = -(__int16)v21;
      }
      unsigned int v22 = (unsigned __int16)v21;
      uint64_t result = (*(uint64_t (**)(void, _DWORD *))(*(void *)*a2 + 48))(*a2, v5);
      int v23 = result + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(unsigned __int16 *)a2[1] + 180);
      if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(_WORD *)a2[1] + 180)) > 180) {
        LOWORD(v23) = v23 - 360;
      }
      if ((__int16)v23 < -179) {
        LOWORD(v23) = v23 + 360;
      }
      if ((v23 & 0x8000u) != 0) {
        int v23 = -(__int16)v23;
      }
      BOOL v17 = v22 >= (unsigned __int16)v23;
      BOOL v24 = v22 > (unsigned __int16)v23;
      char v25 = !v17;
      if (!*(unsigned char *)a2[2]) {
        BOOL v24 = v25;
      }
      if (!v24)
      {
        uint64_t v47 = *(void *)v5;
        uint64_t v44 = v6;
        do
        {
          unsigned int v32 = v10;
          int v33 = *v10;
          *(_DWORD *)((char *)v5 + 3) = *(_DWORD *)((char *)v10 + 3);
          *uint64_t v5 = v33;
          if (v45 < v9) {
            break;
          }
          uint64_t v34 = (2 * v9) | 1;
          int v10 = (_DWORD *)(v6 + 8 * v34);
          uint64_t v35 = 2 * v9 + 2;
          if (v35 < a3)
          {
            int v36 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 48))(*a2, v6 + 8 * v34);
            int v37 = v36 + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(unsigned __int16 *)a2[1] + 180);
            if ((__int16)(v36 + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(_WORD *)a2[1] + 180)) > 180) {
              LOWORD(v37) = v37 - 360;
            }
            if ((__int16)v37 < -179) {
              LOWORD(v37) = v37 + 360;
            }
            if ((v37 & 0x8000u) != 0) {
              int v37 = -(__int16)v37;
            }
            unsigned int v38 = (unsigned __int16)v37;
            int v39 = (*(uint64_t (**)(void, _DWORD *))(*(void *)*a2 + 48))(*a2, v10 + 2);
            int v40 = v39 + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(unsigned __int16 *)a2[1] + 180);
            if ((__int16)(v39 + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(_WORD *)a2[1] + 180)) > 180) {
              LOWORD(v40) = v40 - 360;
            }
            if ((__int16)v40 < -179) {
              LOWORD(v40) = v40 + 360;
            }
            if ((v40 & 0x8000u) != 0) {
              int v40 = -(__int16)v40;
            }
            BOOL v17 = v38 >= (unsigned __int16)v40;
            BOOL v41 = v38 > (unsigned __int16)v40;
            int v42 = !v17;
            if (!*(unsigned char *)a2[2]) {
              BOOL v41 = v42;
            }
            if (v41)
            {
              v10 += 2;
              uint64_t v34 = v35;
            }
          }
          int v26 = (*(uint64_t (**)(void, _DWORD *))(*(void *)*a2 + 48))(*a2, v10);
          int v27 = v26 + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(unsigned __int16 *)a2[1] + 180);
          if ((__int16)(v26 + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(_WORD *)a2[1] + 180)) > 180) {
            LOWORD(v27) = v27 - 360;
          }
          if ((__int16)v27 < -179) {
            LOWORD(v27) = v27 + 360;
          }
          if ((v27 & 0x8000u) != 0) {
            int v27 = -(__int16)v27;
          }
          unsigned int v28 = (unsigned __int16)v27;
          uint64_t result = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a2 + 48))(*a2, &v47);
          int v29 = result + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(unsigned __int16 *)a2[1] + 180);
          if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(_WORD *)a2[1] + 180)) > 180) {
            LOWORD(v29) = v29 - 360;
          }
          if ((__int16)v29 < -179) {
            LOWORD(v29) = v29 + 360;
          }
          if ((v29 & 0x8000u) != 0) {
            int v29 = -(__int16)v29;
          }
          BOOL v17 = v28 >= (unsigned __int16)v29;
          BOOL v30 = v28 > (unsigned __int16)v29;
          BOOL v31 = !v17;
          if (!*(unsigned char *)a2[2]) {
            BOOL v30 = v31;
          }
          uint64_t v5 = v32;
          uint64_t v9 = v34;
          uint64_t v6 = v44;
        }
        while (!v30);
        int v43 = v47;
        *(_DWORD *)((char *)v32 + 3) = *(_DWORD *)((char *)&v47 + 3);
        _DWORD *v32 = v43;
      }
    }
  }
  return result;
}

_DWORD *sub_421A34(_DWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  uint64_t v22 = v7 >> 1;
  do
  {
    int v10 = &a1[2 * v6 + 2];
    uint64_t v11 = (2 * v6) | 1;
    uint64_t v12 = 2 * v6 + 2;
    if (v12 < a3)
    {
      int v13 = (*(uint64_t (**)(void, _DWORD *))(*(void *)*a2 + 48))(*a2, v10);
      int v14 = v13 + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(unsigned __int16 *)a2[1] + 180);
      if ((__int16)(v13 + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(_WORD *)a2[1] + 180)) > 180) {
        LOWORD(v14) = v14 - 360;
      }
      if ((__int16)v14 < -179) {
        LOWORD(v14) = v14 + 360;
      }
      if ((v14 & 0x8000u) != 0) {
        int v14 = -(__int16)v14;
      }
      unsigned int v15 = (unsigned __int16)v14;
      int v16 = (*(uint64_t (**)(void, _DWORD *))(*(void *)*a2 + 48))(*a2, v10 + 2);
      int v17 = v16 + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(unsigned __int16 *)a2[1] + 180);
      if ((__int16)(v16 + 360 * ((unsigned __int16)(*(_WORD *)a2[1] + 180) / 0x168u) - (*(_WORD *)a2[1] + 180)) > 180) {
        LOWORD(v17) = v17 - 360;
      }
      if ((__int16)v17 < -179) {
        LOWORD(v17) = v17 + 360;
      }
      if ((v17 & 0x8000u) != 0) {
        int v17 = -(__int16)v17;
      }
      BOOL v18 = v15 >= (unsigned __int16)v17;
      BOOL v19 = v15 > (unsigned __int16)v17;
      int v20 = !v18;
      if (!*(unsigned char *)a2[2]) {
        BOOL v19 = v20;
      }
      uint64_t v8 = v22;
      if (v19)
      {
        v10 += 2;
        uint64_t v11 = v12;
      }
    }
    int v9 = *v10;
    *(_DWORD *)((char *)a1 + 3) = *(_DWORD *)((char *)v10 + 3);
    *a1 = v9;
    a1 = v10;
    uint64_t v6 = v11;
  }
  while (v11 <= v8);
  return v10;
}

uint64_t sub_421C18(uint64_t result, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    void v27[11] = v4;
    v27[12] = v5;
    uint64_t v8 = result;
    unint64_t v9 = v6 >> 1;
    int v10 = (_DWORD *)(result + 8 * (v6 >> 1));
    uint64_t v11 = (_DWORD *)(a2 - 8);
    int v12 = (*(uint64_t (**)(void, _DWORD *))(*(void *)*a3 + 48))(*a3, v10);
    int v13 = v12 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
    if ((__int16)(v12 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
      LOWORD(v13) = v13 - 360;
    }
    if ((__int16)v13 < -179) {
      LOWORD(v13) = v13 + 360;
    }
    if ((v13 & 0x8000u) != 0) {
      int v13 = -(__int16)v13;
    }
    unsigned int v14 = (unsigned __int16)v13;
    uint64_t result = (*(uint64_t (**)(void, _DWORD *))(*(void *)*a3 + 48))(*a3, v11);
    int v15 = result + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
    if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
      LOWORD(v15) = v15 - 360;
    }
    if ((__int16)v15 < -179) {
      LOWORD(v15) = v15 + 360;
    }
    if ((v15 & 0x8000u) != 0) {
      int v15 = -(__int16)v15;
    }
    BOOL v16 = v14 >= (unsigned __int16)v15;
    BOOL v17 = v14 > (unsigned __int16)v15;
    int v18 = !v16;
    if (!*(unsigned char *)a3[2]) {
      BOOL v17 = v18;
    }
    if (v17)
    {
      v27[0] = *(void *)v11;
      do
      {
        BOOL v19 = v10;
        int v20 = *v10;
        *(_DWORD *)((char *)v11 + 3) = *(_DWORD *)((char *)v10 + 3);
        *uint64_t v11 = v20;
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        int v10 = (_DWORD *)(v8 + 8 * v9);
        int v21 = (*(uint64_t (**)(void, _DWORD *))(*(void *)*a3 + 48))(*a3, v10);
        int v22 = v21 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
        if ((__int16)(v21 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
          LOWORD(v22) = v22 - 360;
        }
        if ((__int16)v22 < -179) {
          LOWORD(v22) = v22 + 360;
        }
        if ((v22 & 0x8000u) != 0) {
          int v22 = -(__int16)v22;
        }
        unsigned int v23 = (unsigned __int16)v22;
        uint64_t result = (*(uint64_t (**)(void, void *))(*(void *)*a3 + 48))(*a3, v27);
        int v24 = result + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
        if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180) {
          LOWORD(v24) = v24 - 360;
        }
        if ((__int16)v24 < -179) {
          LOWORD(v24) = v24 + 360;
        }
        if ((v24 & 0x8000u) != 0) {
          int v24 = -(__int16)v24;
        }
        BOOL v16 = v23 >= (unsigned __int16)v24;
        BOOL v25 = v23 > (unsigned __int16)v24;
        BOOL v26 = !v16;
        if (!*(unsigned char *)a3[2]) {
          BOOL v25 = v26;
        }
        uint64_t v11 = v19;
      }
      while (v25);
      _DWORD *v19 = v27[0];
      *(_DWORD *)((char *)v19 + 3) = *(_DWORD *)((char *)v27 + 3);
    }
  }
  return result;
}

uint64_t sub_421EEC(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v3 = *(void ***)(a1 + 8);
    *(void *)(a1 + 40) = 0;
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = &v2[v4 / 0x49];
    unint64_t v6 = (unint64_t)*v5;
    unint64_t v7 = (unint64_t)*v5 + 56 * (v4 % 0x49);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v4) / 0x49] + 56 * ((*(void *)(a1 + 40) + v4) % 0x49);
    if (v7 != v8)
    {
      do
      {
        unint64_t v9 = *(void **)(v7 + 8);
        if (v9)
        {
          *(void *)(v7 + 16) = v9;
          operator delete(v9);
          unint64_t v6 = (unint64_t)*v5;
        }
        v7 += 56;
        if (v7 - v6 == 4088)
        {
          unint64_t v10 = (unint64_t)v5[1];
          ++v5;
          unint64_t v6 = v10;
          unint64_t v7 = v10;
        }
      }
      while (v7 != v8);
      unint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
    *(void *)(a1 + 40) = 0;
    unint64_t v11 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        uint64_t v3 = *(void ***)(a1 + 16);
        unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
        *(void *)(a1 + 8) = v2;
        unint64_t v11 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 36;
    goto LABEL_17;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 73;
LABEL_17:
    *(void *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      unsigned int v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unint64_t sub_422084(unint64_t result, unint64_t ***a2)
{
  uint64_t v3 = *(long long **)result;
  unint64_t v2 = *(long long **)(result + 8);
  if (*(long long **)result == v2) {
    return result;
  }
  unint64_t v4 = result;
  uint64_t v5 = *a2;
  unint64_t v6 = **a2;
  unint64_t v7 = (*a2)[1];
  if (v6 == v7)
  {
LABEL_10:
    if (v3 == v2) {
      return result;
    }
    if (v6 == v7 || (unint64_t v11 = v3 + 2, v3 + 2 == v2))
    {
      unint64_t v12 = v3;
      if (v3 == v2) {
        return result;
      }
    }
    else
    {
      unint64_t v12 = v3;
      do
      {
        uint64_t v13 = v3;
        uint64_t v3 = v11;
        unsigned int v14 = *v5;
        uint64_t v15 = v5[1];
        if (*v5 != v15)
        {
          int v16 = *((unsigned __int16 *)v13 + 18);
          int v17 = *((unsigned __int8 *)v13 + 38);
          while (1)
          {
            unint64_t v18 = *v14;
            if (*(_DWORD *)v3 == *v14 && v16 == WORD2(v18) && (v17 == 0) != (HIWORD(v18) & 1)) {
              break;
            }
            if (++v14 == v15) {
              goto LABEL_14;
            }
          }
          long long v19 = *v3;
          *(long long *)((char *)v12 + 12) = *(long long *)((char *)v3 + 12);
          *unint64_t v12 = v19;
          v12 += 2;
        }
LABEL_14:
        unint64_t v11 = v3 + 2;
      }
      while (v3 + 2 != v2);
      if (v12 == *(long long **)(v4 + 8)) {
        return result;
      }
    }
    *(void *)(v4 + 8) = v12;
    return result;
  }
  do
  {
    unint64_t v8 = **a2;
    int v9 = *((unsigned __int8 *)v3 + 6);
    while (1)
    {
      unint64_t v10 = *v8;
      if (*(_DWORD *)v3 == *v8)
      {
        uint64_t result = HIDWORD(v10);
        if (*((unsigned __int16 *)v3 + 2) == WORD2(v10))
        {
          uint64_t result = v9 == 0;
          if ((v9 == 0) != (HIWORD(v10) & 1)) {
            break;
          }
        }
      }
      if (++v8 == v7) {
        goto LABEL_10;
      }
    }
    v3 += 2;
  }
  while (v3 != v2);
  return result;
}

uint64_t sub_422210(uint64_t a1, int8x8_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a5 == a4) {
    return 1;
  }
  uint64_t v11 = a4;
  if (a5 - a4 == 1)
  {
    uint64_t v15 = operator new(0x18uLL);
    int v16 = v15 + 12;
    int v51 = v15;
    BOOL v53 = v15 + 12;
    _WORD *v15 = 10;
    v15[4] = 20;
    *((_DWORD *)v15 + 3) = 300;
    v15[8] = 120;
    *((_DWORD *)v15 + 5) = 900;
    char v17 = 1;
  }
  else
  {
    uint64_t v15 = operator new(0x20uLL);
    char v17 = 0;
    _WORD *v15 = 10;
    v15[4] = 60;
    *((_DWORD *)v15 + 3) = 4;
    v15[8] = 120;
    *((_DWORD *)v15 + 5) = 16;
    v15[12] = 180;
    *((_DWORD *)v15 + 7) = 45;
    int v16 = v15 + 16;
    int v51 = v15;
    BOOL v53 = v15 + 16;
  }
  *((_DWORD *)v15 + 1) = 0;
  uint64_t v52 = v16;
  char v54 = v17;
  long long v55 = xmmword_20E7BB4;
  long long v56 = unk_20E7BC4;
  int v57 = 0;
  int v58 = 0;
  sub_422624(*a3 + 72 * v11, *a3 + 72 * a5, a2, (uint64_t *)&v51, a6, (unint64_t *)&__p);
  unint64_t v18 = __p;
  if (__p != v50)
  {
    sub_422950(a3, v11, a5, (uint64_t *)&__p, &v47);
    long long v19 = v47;
    int v20 = v48;
    if (v47 == v48)
    {
      uint64_t v7 = 0;
      if (!v47) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    uint64_t v44 = a1;
    if (v48 - v47 == 8)
    {
LABEL_9:
      if (v11)
      {
        uint64_t v7 = sub_41D608(v44, (unint64_t **)(*a7 + 24 * v11), (void **)(*a7 + 24 * v11 - 24));
        long long v19 = v47;
        if (!v47) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v7 = 1;
        if (!v19)
        {
LABEL_16:
          unint64_t v18 = __p;
          if (!__p) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
      }
LABEL_15:
      int v48 = v19;
      operator delete(v19);
      goto LABEL_16;
    }
    unint64_t v22 = 0;
    int64_t v45 = a7;
    uint64_t v46 = v11;
    while (1)
    {
      unint64_t v23 = v22 + v11;
      uint64_t v24 = *a7;
      uint64_t v25 = *a7 + 24 * (v22 + v11);
      BOOL v26 = *(_DWORD **)v25;
      *(void *)(v25 + 8) = *(void *)v25;
      int v27 = (void *)(v25 + 8);
      uint64_t v28 = *(void *)&v19[8 * v22++];
      uint64_t v29 = *(void *)&v19[8 * v22] + 1;
      if (v28 != v29) {
        break;
      }
LABEL_23:
      if (v22 >= ((v20 - v19) >> 3) - 1) {
        goto LABEL_9;
      }
    }
    BOOL v30 = (char *)__p + 8 * v29;
    BOOL v31 = (char *)__p + 8 * v28;
    unsigned int v32 = (void *)(v24 + 24 * v23 + 16);
    while ((unint64_t)v26 < *v32)
    {
      *(void *)BOOL v26 = *(void *)v31;
      int v33 = v26 + 2;
LABEL_27:
      *int v27 = v33;
      v31 += 8;
      BOOL v26 = v33;
      if (v31 == v30)
      {
        long long v19 = v47;
        int v20 = v48;
        a7 = v45;
        uint64_t v11 = v46;
        goto LABEL_23;
      }
    }
    uint64_t v34 = *(_DWORD **)v25;
    uint64_t v35 = ((uint64_t)v26 - *(void *)v25) >> 3;
    unint64_t v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v37 = *v32 - (void)v34;
    if (v37 >> 2 > v36) {
      unint64_t v36 = v37 >> 2;
    }
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v38 = v36;
    }
    if (v38)
    {
      if (v38 >> 61) {
        sub_188D718();
      }
      int v39 = (char *)operator new(8 * v38);
      uint64_t v40 = (uint64_t)&v39[8 * v35];
      *(void *)uint64_t v40 = *(void *)v31;
      int v33 = (void *)(v40 + 8);
      if (v26 == v34)
      {
LABEL_38:
        *(void *)uint64_t v25 = v40;
        *int v27 = v33;
        void *v32 = &v39[8 * v38];
        if (!v26) {
          goto LABEL_27;
        }
        goto LABEL_43;
      }
    }
    else
    {
      int v39 = 0;
      uint64_t v40 = 8 * v35;
      BOOL v41 = (void *)(8 * v35);
      *BOOL v41 = *(void *)v31;
      int v33 = v41 + 1;
      if (v26 == v34) {
        goto LABEL_38;
      }
    }
    do
    {
      int v42 = *(v26 - 2);
      v26 -= 2;
      int v43 = *(_DWORD *)((char *)v26 + 3);
      *(_DWORD *)(v40 - 8) = v42;
      v40 -= 8;
      *(_DWORD *)(v40 + 3) = v43;
    }
    while (v26 != v34);
    BOOL v26 = *(_DWORD **)v25;
    *(void *)uint64_t v25 = v40;
    *int v27 = v33;
    void *v32 = &v39[8 * v38];
    if (!v26) {
      goto LABEL_27;
    }
LABEL_43:
    operator delete(v26);
    goto LABEL_27;
  }
  uint64_t v7 = 0;
  if (__p)
  {
LABEL_17:
    int v50 = v18;
    operator delete(v18);
  }
LABEL_18:
  if (v51)
  {
    uint64_t v52 = v51;
    operator delete(v51);
  }
  return v7;
}

void sub_4225A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    int v20 = a15;
    if (!a15)
    {
LABEL_3:
      int v21 = a18;
      if (!a18) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int v20 = a15;
    if (!a15) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  int v21 = a18;
  if (!a18) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v21);
  _Unwind_Resume(exception_object);
}

void sub_422624(uint64_t a1@<X0>, uint64_t a2@<X1>, int8x8_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  int v11 = *(_DWORD *)(a1 + 40);
  if (v11 == 0x7FFFFFFF || (int v12 = *(_DWORD *)(a2 + 40), v12 == 0x7FFFFFFF))
  {
    unsigned int v24 = llround((double)*(int *)(a5 + 56) * 1.2);
    if (!sub_110D20C()) {
      goto LABEL_16;
    }
LABEL_11:
    sub_6BAC((uint64_t)v22);
    sub_188FC78(v22, (uint64_t)"Max exploration radius: ", 24);
    char v17 = (void *)std::ostream::operator<<();
    sub_188FC78(v17, (uint64_t)" m.", 3);
    int v20 = operator new(0x90uLL);
    long long v21 = xmmword_20E7B50;
    strcpy((char *)v20, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletP2PDecoder.h");
    std::stringbuf::str();
    sub_110D220((uint64_t)&v20, 46, (uint64_t)&v18);
    if (v19 < 0)
    {
      operator delete(v18);
      if ((SHIBYTE(v21) & 0x80000000) == 0) {
        goto LABEL_13;
      }
    }
    else if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
LABEL_13:
      if (v23 < 0) {
        operator delete((void *)v22[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_16;
    }
    operator delete(v20);
    goto LABEL_13;
  }
  int v13 = v12 - v11;
  if (v13 < 0) {
    int v13 = -v13;
  }
  signed int v14 = *(_DWORD *)(a5 + 72) + v13;
  signed int v15 = llround(*(double *)(a5 + 64) * (double)v13);
  if (v14 <= v15) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = v14;
  }
  unsigned int v24 = v16;
  if (sub_110D20C()) {
    goto LABEL_11;
  }
LABEL_16:
  sub_419918(a3, a1, a2, a4, &v24, a6);
}

void sub_4228CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      sub_111ECAC((uint64_t)&a21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  sub_111ECAC((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_422928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_42293C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_422950(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  int v9 = 0;
  unint64_t v10 = 0;
  unint64_t v11 = a3 - a2;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  unint64_t v12 = a3 - a2 + 1;
  if (a3 - a2 != -1)
  {
    if (v12 >> 61) {
      sub_2E00();
    }
    unint64_t v10 = operator new(8 * v12);
    int v9 = &v10[v12];
    bzero(v10, 8 * v11 + 8);
  }
  void *v10 = 0;
  uint64_t v13 = *a4;
  unint64_t v14 = (a4[1] - *a4) >> 3;
  *(v9 - 1) = v14 - 1;
  if (v11 < 2)
  {
LABEL_15:
    *a5 = v10;
    a5[1] = v9;
    a5[2] = v9;
    return;
  }
  unint64_t v15 = 0;
  uint64_t v16 = *a1;
  uint64_t v17 = 1;
  while (v15 < v14)
  {
    uint64_t v18 = v16 + 72 * (v17 + a2);
    uint64_t v19 = *(void *)(v18 + 16);
    uint64_t v20 = *(void *)(v18 + 24);
    if (v19 == v20) {
      break;
    }
LABEL_10:
    unint64_t v21 = *(void *)(v13 + 8 * v15);
    uint64_t v22 = v19;
    while (__PAIR64__(*(unsigned __int16 *)(v22 + 4), *(_DWORD *)v22) != __PAIR64__(WORD2(v21), v21)
         || (HIWORD(v21) & 1) == (*(unsigned char *)(v22 + 6) == 0))
    {
      v22 += 32;
      if (v22 == v20)
      {
        if (++v15 == v14) {
          goto LABEL_16;
        }
        goto LABEL_10;
      }
    }
    v10[v17++] = v15;
    if (v17 == v11) {
      goto LABEL_15;
    }
  }
LABEL_16:
  if (sub_110D2C8())
  {
    sub_6BAC((uint64_t)v28);
    sub_188FC78(v28, (uint64_t)"No path segment could be matched with any of the segments of point ", 67);
    char v23 = (void *)std::ostream::operator<<();
    sub_188FC78(v23, (uint64_t)".", 1);
    BOOL v26 = operator new(0x90uLL);
    long long v27 = xmmword_20E7B50;
    strcpy((char *)v26, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/include/path-codec/PathletP2PDecoder.h");
    std::stringbuf::str();
    sub_110D2DC((uint64_t)&v26, 104, (uint64_t)&v24);
    if (v25 < 0)
    {
      operator delete(v24);
      if ((SHIBYTE(v27) & 0x80000000) == 0) {
        goto LABEL_19;
      }
    }
    else if ((SHIBYTE(v27) & 0x80000000) == 0)
    {
LABEL_19:
      if (v29 < 0) {
        operator delete((void *)v28[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_22;
    }
    operator delete(v26);
    goto LABEL_19;
  }
LABEL_22:
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  operator delete(v10);
}

void sub_422C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  sub_111ECAC((uint64_t)&a21);
  operator delete(v21);
  _Unwind_Resume(a1);
}

unint64_t sub_422CF0(_DWORD *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  unint64_t v8 = *(char **)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(void *)a2 != v9 && *(_DWORD *)v8 == *a1 && *((_DWORD *)v8 + 1) == a1[1]) {
    return 0;
  }
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v8) >> 2);
  if (v11 >= 2)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    double v17 = 1.79769313e308;
    unint64_t v10 = 1;
    while (1)
    {
      uint64_t v19 = &v8[v15];
      if (*(_DWORD *)&v8[v15 + 12] == *a1 && *((_DWORD *)v19 + 4) == a1[1]) {
        break;
      }
      uint64_t v29 = -1;
      int v30 = 0x7FFFFFFF;
      double v18 = sub_429870(v19, &v8[v15 + 12], a1, (uint64_t)&v29, NAN, a4, a5, a6);
      if (v18 < v17)
      {
        double v17 = v18;
        unint64_t v16 = v10;
      }
      ++v10;
      unint64_t v8 = *(char **)a2;
      v15 += 12;
      if (v10 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2))
      {
        sub_429580((char **)a2, (uint64_t)&v8[12 * v16], (uint64_t)a1);
        return v16;
      }
    }
  }
  else
  {
    unint64_t v12 = *(void *)(a2 + 16);
    if (v9 >= v12)
    {
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v8) >> 2);
      if (2 * v20 <= v11 + 1) {
        uint64_t v21 = v11 + 1;
      }
      else {
        uint64_t v21 = 2 * v20;
      }
      if (v20 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v22 = 0x1555555555555555;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22 > 0x1555555555555555) {
        sub_188D718();
      }
      uint64_t v23 = 12 * v22;
      unsigned int v24 = (char *)operator new(12 * v22);
      char v25 = &v24[4 * ((uint64_t)(v9 - (void)v8) >> 2)];
      *(void *)char v25 = *(void *)a1;
      *((_DWORD *)v25 + 2) = a1[2];
      for (uint64_t i = v25 + 12; (char *)v9 != v8; *((_DWORD *)v25 + 2) = v27)
      {
        uint64_t v26 = *(void *)(v9 - 12);
        v9 -= 12;
        int v27 = *(_DWORD *)(v9 + 8);
        *(void *)(v25 - 12) = v26;
        v25 -= 12;
      }
      *(void *)a2 = v25;
      *(void *)(a2 + 8) = i;
      *(void *)(a2 + 16) = &v24[v23];
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      uint64_t v13 = *(void *)a1;
      *(_DWORD *)(v9 + 8) = a1[2];
      *(void *)unint64_t v9 = v13;
      uint64_t i = (char *)(v9 + 12);
    }
    *(void *)(a2 + 8) = i;
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&i[-*(void *)a2] >> 2) - 1;
  }
  return v10;
}

unint64_t sub_422FAC(char **a1, int a2, int a3, uint64_t a4, int a5)
{
  if (a3 < 1) {
    return 0;
  }
  if (a3 >= a2) {
    return 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2) - 1;
  }
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = v6 - *a1;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
  if (v6 == *a1)
  {
    unint64_t v16 = 0;
    uint64_t v13 = 0;
LABEL_11:
    unint64_t v17 = (v13 - (char *)v16) >> 2;
    if (v17 <= 1) {
      unint64_t v17 = 1;
    }
    if ((unint64_t)(v13 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18 >> 61) {
      sub_188D718();
    }
    unint64_t v12 = (double *)operator new(8 * v18);
    uint64_t v13 = (char *)&v12[v18];
    *unint64_t v12 = 0.0;
    unint64_t v14 = v12 + 1;
    if (v16)
    {
      operator delete(v16);
      uint64_t v7 = *a1;
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
    }
    goto LABEL_19;
  }
  if (v9 >> 61) {
    sub_2E00();
  }
  unint64_t v10 = (double *)operator new(0x5555555555555558 * (v8 >> 2));
  unint64_t v12 = v10;
  uint64_t v13 = (char *)&v10[0xAAAAAAAAAAAAAABLL * (v8 >> 2)];
  if (v8 < 1)
  {
    unint64_t v16 = v10;
    goto LABEL_11;
  }
  double *v10 = 0.0;
  unint64_t v14 = v10 + 1;
LABEL_19:
  if (v9 >= 2)
  {
    unint64_t v19 = 1;
    while (1)
    {
      sub_412F88((uint64_t)&v7[12 * v19 - 12], (unsigned int *)&v7[12 * v19], *(double *)&v11);
      double v21 = *(double *)&v11 + *(v14 - 1);
      if (v14 >= (double *)v13) {
        break;
      }
      double *v14 = v21;
      unint64_t v20 = v14 + 1;
LABEL_22:
      ++v19;
      uint64_t v7 = *a1;
      unint64_t v14 = v20;
      if (v19 >= 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2)) {
        goto LABEL_50;
      }
    }
    unint64_t v22 = v13;
    uint64_t v23 = v14 - v12;
    unint64_t v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61) {
      sub_2E00();
    }
    if ((v22 - (char *)v12) >> 2 > v24) {
      unint64_t v24 = (v22 - (char *)v12) >> 2;
    }
    if ((unint64_t)(v22 - (char *)v12) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25)
    {
      if (v25 >> 61) {
        sub_188D718();
      }
      uint64_t v26 = operator new(8 * v25);
      int v27 = (double *)&v26[8 * v23];
      *int v27 = v21;
      unint64_t v20 = v27 + 1;
      if (v14 != v12)
      {
LABEL_33:
        unint64_t v28 = (char *)(v14 - 1) - (char *)v12;
        if (v28 < 0x168
          || &v26[(char *)v14 - (char *)v12 - 8 - (v28 & 0xFFFFFFFFFFFFFFF8)] > &v26[(char *)v14 - (char *)v12 - 8]
          || (double *)((char *)v14 - (v28 & 0xFFFFFFFFFFFFFFF8) - 8) > v14 - 1
          || (unint64_t)((char *)v12 - v26) < 0x20)
        {
          uint64_t v29 = v14;
        }
        else
        {
          uint64_t v31 = (v28 >> 3) + 1;
          uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v29 = &v14[v32 / 0xFFFFFFFFFFFFFFF8];
          int v27 = (double *)((char *)v27 - v32);
          int v33 = &v26[8 * v23 - 16];
          uint64_t v34 = v14 - 2;
          uint64_t v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v11 = *(_OWORD *)v34;
            *(v33 - 1) = *((_OWORD *)v34 - 1);
            *int v33 = v11;
            v33 -= 2;
            v34 -= 4;
            v35 -= 4;
          }
          while (v35);
          if (v31 == (v31 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_36:
            uint64_t v13 = &v26[8 * v25];
            if (!v12)
            {
LABEL_38:
              unint64_t v12 = v27;
              goto LABEL_22;
            }
LABEL_37:
            operator delete(v12);
            goto LABEL_38;
          }
        }
        do
        {
          uint64_t v30 = *((void *)v29-- - 1);
          *(void *)&long long v11 = v30;
          *((void *)v27-- - 1) = v30;
        }
        while (v29 != v12);
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v26 = 0;
      int v27 = (double *)(8 * v23);
      *(double *)(8 * v23) = v21;
      unint64_t v20 = (double *)(8 * v23 + 8);
      if (v14 != v12) {
        goto LABEL_33;
      }
    }
    uint64_t v13 = &v26[8 * v25];
    if (!v12) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  unint64_t v20 = v14;
LABEL_50:
  double v36 = (double)a3 / 100.0 * (*(v20 - 1) / ((double)a2 / 100.0));
  if (v20 == v12)
  {
    int v38 = a5;
  }
  else
  {
    unint64_t v37 = v20 - v12;
    unint64_t v20 = v12;
    int v38 = a5;
    do
    {
      unint64_t v39 = v37 >> 1;
      uint64_t v40 = &v20[v37 >> 1];
      double v42 = *v40;
      BOOL v41 = v40 + 1;
      v37 += ~(v37 >> 1);
      if (v42 < v36) {
        unint64_t v20 = v41;
      }
      else {
        unint64_t v37 = v39;
      }
    }
    while (v37);
  }
  double v43 = (double)v38 / 100.0;
  uint64_t v15 = v20 - v12;
  double v44 = *v20;
  if (*v20 - v36 < v43)
  {
    uint64_t v45 = v20 - v12;
LABEL_70:
    operator delete(v12);
    return v45;
  }
  uint64_t v45 = v15 - 1;
  double v46 = v12[v15 - 1];
  double v47 = v36 - v46;
  if (v47 < v43) {
    goto LABEL_70;
  }
  double v48 = v47 / (v44 - v46);
  int v49 = (unsigned int *)&v7[12 * v45];
  unsigned int v50 = *v49;
  unsigned int v51 = v49[1];
  int v52 = v49[2];
  BOOL v53 = (unsigned int *)&v7[12 * v15];
  int v54 = v53[2];
  double v55 = 1.0 - v48;
  BOOL v56 = v52 == 0x7FFFFFFF || v54 == 0x7FFFFFFF;
  int v57 = llround(v55 * (double)v52 + v48 * (double)v54);
  if (v56) {
    int v57 = 0x7FFFFFFF;
  }
  unsigned int v58 = llround(v55 * (double)v51 + v48 * (double)v53[1]);
  unsigned int v59 = llround(v55 * (double)v50 + v48 * (double)*v53);
  unsigned int v60 = v58 >= 0xFFFFFFFE ? -2 : v58;
  unint64_t v65 = v59 | ((unint64_t)v60 << 32);
  int v66 = v57;
  sub_429580(a1, (uint64_t)v53, (uint64_t)&v65);
  uint64_t v45 = v15;
  if (v12) {
    goto LABEL_70;
  }
  return v15;
}

void sub_4234B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_4234F0(char **a1@<X0>, int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  int64_t v6 = v4 - *a1;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 2);
  BOOL v8 = v7 < 3 || *a2 == 0;
  uint64_t v90 = (char **)a3;
  if (v8)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (v4 != v5)
    {
      if (v7 > 0x1555555555555555) {
        sub_2E00();
      }
      unint64_t v9 = (char *)operator new(v6);
      *a3 = v9;
      unint64_t v10 = &v9[4 * (v6 >> 2)];
      a3[2] = v10;
      memcpy(v9, v5, v6);
      a3[1] = v10;
    }
    return;
  }
  unint64_t v97 = 0;
  unint64_t v98 = 0;
  unint64_t v99 = 0;
  if (v6 < 0) {
    sub_2E00();
  }
  unint64_t v12 = v7 - 1;
  unint64_t v13 = (v7 - 1) >> 6;
  unint64_t v14 = operator new(8 * (v13 + 1));
  uint64_t v15 = v14;
  unint64_t v98 = v7;
  unint64_t v99 = v13 + 1;
  unint64_t v97 = v14;
  if (v7 >= 0x41) {
    unint64_t v16 = (v7 - 1) >> 6;
  }
  else {
    unint64_t v16 = 0;
  }
  v14[v16] = 0;
  if (v7 >= 0x40) {
    bzero(v14, 8 * (v7 >> 6));
  }
  if ((v7 & 0x3F) != 0) {
    v15[v7 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F));
  }
  *v15 |= 1uLL;
  v15[v13] |= 1 << v12;
  long long v95 = 0u;
  long long v96 = 0u;
  *(_OWORD *)__p = 0u;
  sub_42BEC((uint64_t)__p);
  unint64_t v17 = (void *)(*(void *)((char *)__p[1] + (((*((void *)&v96 + 1) + (void)v96) >> 5) & 0x7FFFFFFFFFFFFF8))
                 + 16 * (BYTE8(v96) + v96));
  *unint64_t v17 = 0;
  v17[1] = v12;
  BOOL v18 = __CFADD__(*((void *)&v96 + 1), 1);
  uint64_t v19 = ++*((void *)&v96 + 1);
  if (v18)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    unint64_t v20 = a3 + 2;
    uint64_t v21 = 2;
    goto LABEL_63;
  }
  double v22 = (double)*a2 / 100.0;
  unsigned int v23 = 2;
  do
  {
    while (1)
    {
      unint64_t v24 = (void *)v95;
      unint64_t v25 = 32 * (v95 - (unint64_t)__p[1]) - 1;
      if ((void *)v95 == __p[1]) {
        unint64_t v25 = 0;
      }
      uint64_t v26 = (uint64_t *)(*(void *)((char *)__p[1] + (((unint64_t)(v96 + v19 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (v96 + v19 - 1));
      uint64_t v28 = *v26;
      unint64_t v27 = v26[1];
      *((void *)&v96 + 1) = v19 - 1;
      if (v25 - (v19 + (void)v96) + 1 >= 0x200)
      {
        operator delete(*(void **)(v95 - 8));
        unint64_t v24 = (void *)(v95 - 8);
        *(void *)&long long v95 = v95 - 8;
      }
      uint64_t v29 = *a1;
      unint64_t v30 = v28 + 1;
      unint64_t v92 = -1;
      int v93 = 0x7FFFFFFF;
      double v31 = 0.0;
      if (v28 + 1 < v27)
      {
        uint64_t v32 = (unsigned int *)&v29[12 * v28];
        int v33 = (unsigned int *)&v29[12 * v27];
        uint64_t v34 = v32 + 1;
        uint64_t v35 = v33 + 1;
        double v36 = (int *)(v32 + 2);
        unint64_t v37 = v33 + 2;
        int v38 = v32 + 5;
        int v39 = 0x7FFFFFFF;
        unint64_t v40 = v28 + 1;
        while (1)
        {
          double v41 = (double)*v32;
          double v42 = (double)*v34;
          unsigned int v43 = *v33;
          unsigned int v44 = *v35;
          double v45 = (double)*v33 - v41;
          double v46 = (double)*v35 - v42;
          *(double *)&unint64_t v47 = v45 * v45;
          double v48 = v45 * v45 + v46 * v46;
          double v49 = fabs(v48);
          LODWORD(v47) = *(v38 - 2);
          double v50 = (double)v47;
          BOOL v51 = v48 == 0.0 || v49 < 2.22044605e-16;
          double v52 = (double)*(v38 - 1);
          if (v51) {
            goto LABEL_33;
          }
          double v53 = (v45 * (v50 - v41) + v46 * (v52 - v42)) / v48;
          if (v53 <= 0.0)
          {
            int v39 = v32[2];
            unsigned int v43 = *v32;
            unsigned int v44 = *v34;
            goto LABEL_40;
          }
          if (v53 >= 1.0)
          {
LABEL_33:
            int v39 = v33[2];
          }
          else
          {
            unsigned int v43 = llround(v45 * v53 + v41);
            unsigned int v44 = llround(v46 * v53 + v42);
            if (*v36 != 0x7FFFFFFF && *v37 != 0x7FFFFFFF) {
              int v39 = (int)(v53 * (double)(*v37 - *v36) + (double)*v36);
            }
          }
LABEL_40:
          double v54 = (v50 - (double)v43) / 100.0;
          double v55 = (v52 - (double)v44) / 100.0;
          if (*v38 != 0x7FFFFFFF && v39 != 0x7FFFFFFF)
          {
            int v56 = *v38 - v39;
            if (v56 < 0) {
              int v56 = v39 - *v38;
            }
            double v57 = v54 * v54 + v55 * v55 + (double)v56 / 100.0 * ((double)v56 / 100.0);
            if (v57 <= v31) {
              goto LABEL_27;
            }
LABEL_47:
            unint64_t v92 = __PAIR64__(v44, v43);
            unint64_t v40 = v30;
            double v31 = v57;
            int v93 = v39;
            goto LABEL_27;
          }
          double v57 = v54 * v54 + v55 * v55;
          if (v57 > v31) {
            goto LABEL_47;
          }
LABEL_27:
          ++v30;
          v38 += 3;
          if (v27 == v30) {
            goto LABEL_49;
          }
        }
      }
      unint64_t v40 = v28 + 1;
LABEL_49:
      if (v31 >= v22 * v22)
      {
        if (v31 >= v22 * v22 * 16.0) {
          goto LABEL_53;
        }
        sub_412F88((uint64_t)&v29[12 * v40], (unsigned int *)&v92, v31);
        if (v58 >= v22) {
          break;
        }
      }
      uint64_t v19 = *((void *)&v96 + 1);
      if (!*((void *)&v96 + 1)) {
        goto LABEL_61;
      }
    }
    unint64_t v24 = (void *)v95;
LABEL_53:
    unsigned int v59 = (char *)__p[1];
    BOOL v8 = v24 == __p[1];
    unint64_t v60 = 32 * ((void)v24 - (unint64_t)__p[1]) - 1;
    *(void *)((char *)v15 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
    if (v8) {
      unint64_t v61 = 0;
    }
    else {
      unint64_t v61 = v60;
    }
    uint64_t v62 = v96;
    unint64_t v63 = *((void *)&v96 + 1) + v96;
    if (v61 == *((void *)&v96 + 1) + (void)v96)
    {
      sub_42BEC((uint64_t)__p);
      unsigned int v59 = (char *)__p[1];
      uint64_t v62 = v96;
      unint64_t v63 = *((void *)&v96 + 1) + v96;
      unint64_t v60 = 32 * (v95 - (unint64_t)__p[1]) - 1;
    }
    uint64_t v64 = (unint64_t *)(*(void *)&v59[(v63 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v63);
    *uint64_t v64 = v40;
    v64[1] = v27;
    ++*((void *)&v96 + 1);
    unint64_t v65 = v62 + *((void *)&v96 + 1);
    if (v60 == v65)
    {
      sub_42BEC((uint64_t)__p);
      unsigned int v59 = (char *)__p[1];
      unint64_t v65 = *((void *)&v96 + 1) + v96;
    }
    ++v23;
    int v66 = (void *)(*(void *)&v59[(v65 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v65);
    *int v66 = v28;
    v66[1] = v40;
    uint64_t v19 = *((void *)&v96 + 1) + 1;
    *((void *)&v96 + 1) = v19;
  }
  while (v19);
LABEL_61:
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v20 = a3 + 2;
  if (v23)
  {
    uint64_t v21 = v23;
LABEL_63:
    uint64_t v67 = (char *)operator new(12 * v21);
    *a3 = v67;
    a3[1] = v67;
    a3[2] = &v67[12 * v21];
    int v69 = *a1;
    uint64_t v68 = a1[1];
    if (v68 != *a1)
    {
LABEL_64:
      unint64_t v70 = 0;
      while (2)
      {
        if (((*(void *)((char *)v97 + ((v70 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v70) & 1) == 0) {
          goto LABEL_67;
        }
        uint64_t v73 = &v69[12 * v70];
        if ((unint64_t)v67 < *v20)
        {
          uint64_t v71 = *(void *)v73;
          *((_DWORD *)v67 + 2) = *((_DWORD *)v73 + 2);
          *(void *)uint64_t v67 = v71;
          long long v72 = v67 + 12;
        }
        else
        {
          BOOL v74 = (char *)*a3;
          unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v67[-*a3] >> 2);
          unint64_t v76 = v75 + 1;
          if (v75 + 1 > 0x1555555555555555) {
            sub_2E00();
          }
          if (0x5555555555555556 * ((uint64_t)(*v20 - (void)v74) >> 2) > v76) {
            unint64_t v76 = 0x5555555555555556 * ((uint64_t)(*v20 - (void)v74) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v20 - (void)v74) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v77 = 0x1555555555555555;
          }
          else {
            unint64_t v77 = v76;
          }
          if (v77)
          {
            if (v77 > 0x1555555555555555) {
              sub_188D718();
            }
            unint64_t v78 = (char *)operator new(12 * v77);
          }
          else
          {
            unint64_t v78 = 0;
          }
          uint64_t v79 = *(void *)v73;
          long long v80 = &v78[12 * v75];
          *((_DWORD *)v80 + 2) = *((_DWORD *)v73 + 2);
          *(void *)long long v80 = v79;
          uint64_t v81 = v80;
          if (v67 == v74)
          {
            a3 = v90;
            long long v72 = v80 + 12;
            *uint64_t v90 = v80;
            v90[1] = v80 + 12;
            v90[2] = &v78[12 * v77];
            if (v67) {
              goto LABEL_84;
            }
          }
          else
          {
            a3 = v90;
            do
            {
              uint64_t v82 = *(void *)(v67 - 12);
              v67 -= 12;
              int v83 = *((_DWORD *)v67 + 2);
              *(void *)(v81 - 12) = v82;
              v81 -= 12;
              *((_DWORD *)v81 + 2) = v83;
            }
            while (v67 != v74);
            uint64_t v67 = *v90;
            long long v72 = v80 + 12;
            *uint64_t v90 = v81;
            v90[1] = v80 + 12;
            v90[2] = &v78[12 * v77];
            if (v67) {
LABEL_84:
            }
              operator delete(v67);
          }
        }
        a3[1] = v72;
        uint64_t v67 = v72;
        int v69 = *a1;
        uint64_t v68 = a1[1];
LABEL_67:
        if (++v70 >= 0xAAAAAAAAAAAAAAABLL * ((v68 - v69) >> 2)) {
          break;
        }
        continue;
      }
    }
  }
  else
  {
    uint64_t v67 = 0;
    int v69 = *a1;
    uint64_t v68 = a1[1];
    if (v68 != *a1) {
      goto LABEL_64;
    }
  }
  uint64_t v84 = (void **)__p[1];
  uint64_t v85 = (void **)v95;
  *((void *)&v96 + 1) = 0;
  unint64_t v86 = v95 - (unint64_t)__p[1];
  if ((unint64_t)v95 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v84);
      uint64_t v85 = (void **)v95;
      uint64_t v84 = (void **)((char *)__p[1] + 8);
      __p[1] = v84;
      unint64_t v86 = v95 - (void)v84;
    }
    while ((void)v95 - (void)v84 > 0x10uLL);
  }
  unint64_t v87 = v86 >> 3;
  if (v87 == 1)
  {
    uint64_t v88 = 128;
LABEL_95:
    *(void *)&long long v96 = v88;
  }
  else if (v87 == 2)
  {
    uint64_t v88 = 256;
    goto LABEL_95;
  }
  if (v84 != v85)
  {
    do
    {
      uint64_t v89 = *v84++;
      operator delete(v89);
    }
    while (v84 != v85);
    if ((void *)v95 != __p[1]) {
      *(void *)&long long v95 = v95 + (((unint64_t)__p[1] - v95 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v97) {
    operator delete(v97);
  }
}

void sub_423CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_431BC((uint64_t)va);
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_423D38(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = sub_3750CC(a2);
  sub_42CBF8(a1 + 16, *(void **)a1);
  *(void *)(a1 + 928) = a1 + 16;
  *(void *)(a1 + 936) = 0x4039000000000000;
  *(void *)(a1 + 944) = 5000;
  *(void *)(a1 + 952) = 0x3FF4CCCCCCCCCCCDLL;
  *(_OWORD *)(a1 + 960) = xmmword_20E7BE0;
  *(_OWORD *)(a1 + 976) = xmmword_20E7BF0;
  *(void *)(a1 + 992) = 20000000;
  *(void *)(a1 + 1000) = 0x3FF199999999999ALL;
  *(void *)(a1 + 1008) = 0x3E800002710;
  *(void *)(a1 + 1016) = 0xA00002710;
  *(_OWORD *)(a1 + 1024) = xmmword_20E7C00;
  *(void *)(a1 + 1040) = 0x3FE6147AE147AE14;
  *(void *)(a1 + 1048) = 0;
  *(void *)(a1 + 1056) = a3;
  *(void *)(a1 + 1064) = a4;
  sub_110D164((uint64_t)&off_24F6948, 4);
  return a1;
}

void sub_423E38(_Unwind_Exception *a1)
{
  sub_110D1C4();
  sub_423E80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_423E54(uint64_t a1)
{
  return a1;
}

void *sub_423E80(void *a1)
{
  *a1 = off_24396A0;
  unint64_t v2 = a1 + 17;
  uint64_t v3 = a1 + 113;
  do
  {
    unint64_t v4 = v3 - 6;
    uint64_t v5 = *(v3 - 3);
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      BOOL v8 = v3 - 5;
      do
      {
        if ((*(char *)(*v4 + v7) & 0x80000000) == 0)
        {
          uint64_t v9 = *v8 + v6;
          unint64_t v10 = *(void **)(v9 + 8);
          if (v10)
          {
            *(void *)(v9 + 16) = v10;
            operator delete(v10);
            uint64_t v5 = *(v3 - 3);
          }
        }
        ++v7;
        v6 += 32;
      }
      while (v7 != v5);
      operator delete((void *)*(v3 - 6));
      *(v3 - 6) = &unk_20E1710;
      *(v3 - 1) = 0;
      *(v3 - 4) = 0;
      *(v3 - 3) = 0;
      *BOOL v8 = 0;
    }
    v3 -= 6;
  }
  while (v4 != v2);
  return a1;
}

uint64_t sub_423F6C(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_423D38(a1, a2, a3, a3);
}

uint64_t sub_423F74(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = sub_3750CC(a2);
  sub_42DBBC(a1 + 16, *(void **)a1);
  *(void *)(a1 + 928) = a1 + 16;
  *(void *)(a1 + 936) = 0x4039000000000000;
  *(void *)(a1 + 944) = 5000;
  *(void *)(a1 + 952) = 0x3FF4CCCCCCCCCCCDLL;
  *(_OWORD *)(a1 + 960) = xmmword_20E7BE0;
  *(_OWORD *)(a1 + 976) = xmmword_20E7BF0;
  *(void *)(a1 + 992) = 20000000;
  *(void *)(a1 + 1000) = 0x3FF199999999999ALL;
  *(void *)(a1 + 1008) = 0x3E800002710;
  *(void *)(a1 + 1016) = 0xA00002710;
  *(_OWORD *)(a1 + 1024) = xmmword_20E7C00;
  *(void *)(a1 + 1040) = 0x3FE6147AE147AE14;
  *(void *)(a1 + 1048) = 0;
  *(void *)(a1 + 1056) = a3;
  *(void *)(a1 + 1064) = a4;
  sub_110D164((uint64_t)&off_24F6948, 4);
  return a1;
}

void sub_424074(_Unwind_Exception *a1)
{
  sub_110D1C4();
  sub_424090(v1);
  _Unwind_Resume(a1);
}

void *sub_424090(void *a1)
{
  *a1 = off_2439728;
  unint64_t v2 = a1 + 17;
  uint64_t v3 = a1 + 113;
  do
  {
    unint64_t v4 = v3 - 6;
    uint64_t v5 = *(v3 - 3);
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      BOOL v8 = v3 - 5;
      do
      {
        if ((*(char *)(*v4 + v7) & 0x80000000) == 0)
        {
          uint64_t v9 = *v8 + v6;
          unint64_t v10 = *(void **)(v9 + 8);
          if (v10)
          {
            *(void *)(v9 + 16) = v10;
            operator delete(v10);
            uint64_t v5 = *(v3 - 3);
          }
        }
        ++v7;
        v6 += 32;
      }
      while (v7 != v5);
      operator delete((void *)*(v3 - 6));
      *(v3 - 6) = &unk_20E1710;
      *(v3 - 1) = 0;
      *(v3 - 4) = 0;
      *(v3 - 3) = 0;
      *BOOL v8 = 0;
    }
    v3 -= 6;
  }
  while (v4 != v2);
  return a1;
}

uint64_t sub_42417C(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_423F74(a1, a2, a3, a3);
}

uint64_t sub_424184(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = sub_3750CC(a2);
  sub_42EB80(a1 + 16, *(void **)a1);
  *(void *)(a1 + 928) = a1 + 16;
  *(void *)(a1 + 936) = 0x4039000000000000;
  *(void *)(a1 + 944) = 5000;
  *(void *)(a1 + 952) = 0x3FF4CCCCCCCCCCCDLL;
  *(_OWORD *)(a1 + 960) = xmmword_20E7BE0;
  *(_OWORD *)(a1 + 976) = xmmword_20E7BF0;
  *(void *)(a1 + 992) = 20000000;
  *(void *)(a1 + 1000) = 0x3FF199999999999ALL;
  *(void *)(a1 + 1008) = 0x3E800002710;
  *(void *)(a1 + 1016) = 0xA00002710;
  *(_OWORD *)(a1 + 1024) = xmmword_20E7C00;
  *(void *)(a1 + 1040) = 0x3FE6147AE147AE14;
  *(void *)(a1 + 1048) = 0;
  *(void *)(a1 + 1056) = a3;
  *(void *)(a1 + 1064) = a4;
  sub_110D164((uint64_t)&off_24F6948, 4);
  return a1;
}

void sub_424284(_Unwind_Exception *a1)
{
  sub_110D1C4();
  sub_4242A0(v1);
  _Unwind_Resume(a1);
}

void *sub_4242A0(void *a1)
{
  *a1 = off_24397A0;
  unint64_t v2 = a1 + 17;
  uint64_t v3 = a1 + 113;
  do
  {
    unint64_t v4 = v3 - 6;
    uint64_t v5 = *(v3 - 3);
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      BOOL v8 = v3 - 5;
      do
      {
        if ((*(char *)(*v4 + v7) & 0x80000000) == 0)
        {
          uint64_t v9 = *v8 + v6;
          unint64_t v10 = *(void **)(v9 + 8);
          if (v10)
          {
            *(void *)(v9 + 16) = v10;
            operator delete(v10);
            uint64_t v5 = *(v3 - 3);
          }
        }
        ++v7;
        v6 += 32;
      }
      while (v7 != v5);
      operator delete((void *)*(v3 - 6));
      *(v3 - 6) = &unk_20E1710;
      *(v3 - 1) = 0;
      *(v3 - 4) = 0;
      *(v3 - 3) = 0;
      *BOOL v8 = 0;
    }
    v3 -= 6;
  }
  while (v4 != v2);
  return a1;
}

uint64_t sub_42438C(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_424184(a1, a2, a3, a3);
}

uint64_t sub_424394(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = operator new(0x30uLL);
  long long v20 = xmmword_20B9A80;
  strcpy((char *)v19, "centerline_geometry_simplification_tolerance_m");
  double v6 = sub_5C7E8(a3, (uint64_t)&v19) * 100.0;
  if (v6 >= 0.0)
  {
    double v7 = v6;
    if (v6 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v8 = (uint64_t)(v6 + v6) + 1;
  }
  else
  {
    double v7 = v6;
    if (v6 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v8 = (uint64_t)(v6 + v6);
    if (v8 >= 1) {
      --v8;
    }
  }
  double v7 = (double)(v8 >> 1);
LABEL_9:
  if (v7 >= 9.22337204e18)
  {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_20;
  }
  if (v6 >= 0.0)
  {
    if (v6 < 4.50359963e15)
    {
      uint64_t v9 = (uint64_t)(v6 + v6) + 1;
LABEL_18:
      double v6 = (double)(v9 >> 1);
    }
  }
  else if (v6 > -4.50359963e15)
  {
    uint64_t v9 = (uint64_t)(v6 + v6);
    if (v9 >= 1) {
      --v9;
    }
    goto LABEL_18;
  }
  uint64_t v10 = (uint64_t)v6;
LABEL_20:
  __p = operator new(0x30uLL);
  long long v18 = xmmword_20E1380;
  strcpy((char *)__p, "flowline_geometry_simplification_tolerance_m");
  double v11 = sub_5C7E8(a3, (uint64_t)&__p) * 100.0;
  if (v11 >= 0.0)
  {
    double v12 = v11;
    if (v11 >= 4.50359963e15) {
      goto LABEL_28;
    }
    uint64_t v13 = (uint64_t)(v11 + v11) + 1;
  }
  else
  {
    double v12 = v11;
    if (v11 <= -4.50359963e15) {
      goto LABEL_28;
    }
    uint64_t v13 = (uint64_t)(v11 + v11);
    if (v13 >= 1) {
      --v13;
    }
  }
  double v12 = (double)(v13 >> 1);
LABEL_28:
  if (v12 >= 9.22337204e18)
  {
    uint64_t v15 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_39;
  }
  if (v11 >= 0.0)
  {
    if (v11 < 4.50359963e15)
    {
      uint64_t v14 = (uint64_t)(v11 + v11) + 1;
LABEL_37:
      double v11 = (double)(v14 >> 1);
    }
  }
  else if (v11 > -4.50359963e15)
  {
    uint64_t v14 = (uint64_t)(v11 + v11);
    if (v14 >= 1) {
      --v14;
    }
    goto LABEL_37;
  }
  uint64_t v15 = (uint64_t)v11;
LABEL_39:
  sub_424184(a1, a2, v10, v15);
  if (SHIBYTE(v18) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v20) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v19);
  return a1;
}

void sub_424640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_42469C(uint64_t a1, void *a2)
{
  char v16 = 15;
  uint64_t v14 = 0;
  strcpy((char *)v15, "ResponseBuilder");
  double v12 = 0;
  uint64_t v13 = 0;
  unint64_t v4 = sub_374CDC((uint64_t)a2, (uint64_t)v15, (uint64_t *)&v12);
  sub_3CB370(v4, 2, 0, __p);
  sub_424394(a1, a2, __p);
  uint64_t v5 = v18;
  if (v18)
  {
    do
    {
      uint64_t v10 = *(char **)v5;
      sub_57AC8((uint64_t *)v5 + 5);
      if (v5[39] < 0) {
        operator delete(*((void **)v5 + 2));
      }
      operator delete(v5);
      uint64_t v5 = v10;
    }
    while (v10);
  }
  double v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  double v7 = (void **)v12;
  if (v12)
  {
    uint64_t v8 = v13;
    uint64_t v9 = v12;
    if (v13 != v12)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = v12;
    }
    uint64_t v13 = v7;
    operator delete(v9);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  return a1;
}

void sub_4247E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_424818(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, int a5@<W4>, void *a6@<X8>)
{
  uint64_t v69 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v62 = 0u;
  int v70 = 1065353216;
  char v71 = 0;
  uint64_t v8 = *a3;
  uint64_t v9 = a1 + 16;
  double v49 = (unsigned char *)(a2 + 9976);
  if (*(unsigned char *)(a2 + 9976))
  {
    unint64_t v10 = sub_46C760((void *)a2);
    if (v10)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        unint64_t v12 = *(void *)(sub_46C8EC((void *)a2, i) + 32);
        uint64_t v13 = sub_64EF20(a2, i);
        sub_42D7DC(v9, v12, (char **)v13);
      }
    }
  }
  uint64_t v14 = *(int64x2_t **)(a2 + 1032);
  uint64_t v15 = *(int64x2_t **)(a2 + 1040);
  if (v14 != v15)
  {
    if (!v8)
    {
      do
      {
        uint64_t v33 = v14->i64[0];
        uint64_t v32 = v14->i64[1];
        if (v14->i64[0] <= (unint64_t)(v32 + 1)) {
          uint64_t v34 = v32 + 1;
        }
        else {
          uint64_t v34 = v14->i64[0];
        }
        if (v14->i64[0] < (unint64_t)(v32 + 1))
        {
          uint64_t v35 = 24 * v33;
          do
          {
            uint64_t v36 = sub_46C8EC((void *)a2, v33);
            sub_42D7DC(v9, *(void *)(v36 + 32), (char **)(v14[2].i64[0] - 24 * v14->i64[0] + v35));
            ++v33;
            v35 += 24;
          }
          while (v34 != v33);
        }
        v14 += 4;
      }
      while (v14 != v15);
      goto LABEL_36;
    }
    do
    {
      uint64_t v17 = v14->i64[0];
      uint64_t v16 = v14->i64[1];
      if (v14->i64[0] <= (unint64_t)(v16 + 1)) {
        uint64_t v18 = v16 + 1;
      }
      else {
        uint64_t v18 = v14->i64[0];
      }
      if (v14->i64[0] < (unint64_t)(v16 + 1))
      {
        uint64_t v19 = 24 * v17;
        do
        {
          uint64_t v20 = sub_46C8EC((void *)a2, v17);
          sub_42D7DC(v9, *(void *)(v20 + 32), (char **)(v14[2].i64[0] - 24 * v14->i64[0] + v19));
          ++v17;
          v19 += 24;
        }
        while (v18 != v17);
      }
      *(_DWORD *)(v8 + 40) |= 0x100000u;
      uint64_t v21 = *(void *)(v8 + 816);
      if (v21)
      {
        double v22 = *(_DWORD **)(v21 + 32);
        if (!v22) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v23 = *(void *)(v8 + 8);
        unint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
        if (v23) {
          unint64_t v24 = (void *)*v24;
        }
        uint64_t v21 = sub_13DAD88((uint64_t)v24);
        *(void *)(v8 + 816) = v21;
        double v22 = *(_DWORD **)(v21 + 32);
        if (!v22) {
          goto LABEL_24;
        }
      }
      uint64_t v25 = *(int *)(v21 + 24);
      if ((int)v25 < *v22)
      {
        *(_DWORD *)(v21 + 24) = v25 + 1;
        uint64_t v26 = *(void *)&v22[2 * v25 + 2];
        *(_DWORD *)(v26 + 16) |= 1u;
        unint64_t v27 = *(int32x2_t **)(v26 + 24);
        if (!v27) {
          goto LABEL_25;
        }
        goto LABEL_8;
      }
LABEL_24:
      uint64_t v28 = v21 + 16;
      uint64_t v29 = sub_13DAD10(*(void *)(v21 + 16));
      uint64_t v26 = sub_188CDC8(v28, (uint64_t)v29);
      *(_DWORD *)(v26 + 16) |= 1u;
      unint64_t v27 = *(int32x2_t **)(v26 + 24);
      if (!v27)
      {
LABEL_25:
        uint64_t v30 = *(void *)(v26 + 8);
        double v31 = (void *)(v30 & 0xFFFFFFFFFFFFFFFCLL);
        if (v30) {
          double v31 = (void *)*v31;
        }
        unint64_t v27 = (int32x2_t *)sub_13DAC98((uint64_t)v31);
        *(void *)(v26 + 24) = v27;
      }
LABEL_8:
      v27[2].i32[0] |= 3u;
      v27[3] = vmovn_s64(v14[1]);
      v14 += 4;
    }
    while (v14 != v15);
  }
LABEL_36:
  uint64_t v51 = sub_46C7EC(a2);
  unint64_t v52 = v37;
  sub_42A95C(&v51, (uint64_t)&v66, v38);
  sub_46C77C((void *)a2, &v51);
  sub_42AFD8((void *)v51, v52, (void *)v53, *((unint64_t *)&v53 + 1), (unint64_t *)&v63, *((char **)&v63 + 1));
  *(double *)&long long v62 = (double)(1000000000 - sub_46CABC(a2)) / 1000000000.0;
  *((double *)&v62 + 1) = (double)sub_46CAC4(a2) / 1000000000.0;
  uint64_t v39 = 1064;
  if (!*v49) {
    uint64_t v39 = 1056;
  }
  unsigned int v40 = *(_DWORD *)(a1 + v39);
  if (v40 >= 0x7FFFFFFF) {
    int v41 = 0x7FFFFFFF;
  }
  else {
    int v41 = v40;
  }
  sub_424DC4((void *)(a1 + 928), (size_t)&v62, v41, a6);
  uint64_t v42 = *(void *)(a1 + 8);
  sub_42D844(v9);
  sub_47A4F8(a2, v42, (uint64_t)a6);
  if ((a4 & 1) == 0) {
    sub_426B04((uint64_t)(a6 + 3));
  }
  if (a5)
  {
    uint64_t v55 = 0;
    uint64_t v51 = 0x4039000000000000;
    unint64_t v52 = 5000;
    long long v53 = xmmword_20E7C10;
    long long v54 = xmmword_20E7C20;
    uint64_t v56 = 20000000;
    uint64_t v57 = 0x3FF199999999999ALL;
    uint64_t v58 = 0x3E800002710;
    uint64_t v59 = 0xA00002710;
    long long v60 = xmmword_20E7C00;
    long long v61 = 0x3FE6147AE147AE14uLL;
    sub_1109790((uint64_t)&v51, (uint64_t)a6);
  }
  unsigned int v43 = (void *)*((void *)&v68 + 1);
  if (*((void *)&v68 + 1))
  {
    do
    {
      double v45 = (void *)*v43;
      double v46 = (void *)v43[3];
      if (v46)
      {
        v43[4] = v46;
        operator delete(v46);
      }
      operator delete(v43);
      unsigned int v43 = v45;
    }
    while (v45);
  }
  unsigned int v44 = (void *)*((void *)&v67 + 1);
  *((void *)&v67 + 1) = 0;
  if (v44) {
    operator delete(v44);
  }
  if ((void)v66)
  {
    *((void *)&v66 + 1) = v66;
    operator delete((void *)v66);
  }
  if (*((void *)&v64 + 1))
  {
    *(void *)&long long v65 = *((void *)&v64 + 1);
    operator delete(*((void **)&v64 + 1));
  }
  if ((void)v63)
  {
    *((void *)&v63 + 1) = v63;
    operator delete((void *)v63);
  }
}

void sub_424CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_424D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_424D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_424D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_424D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_424DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_424DC4(void *a1@<X0>, size_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  unint64_t j = a4;
  v197[0] = a3;
  sub_1115F80(a4, 0, 0);
  if (*(void *)(a2 + 16) == *(void *)(a2 + 24)) {
    return;
  }
  std::chrono::steady_clock::now();
  (*(void (**)(char **__return_ptr))(*(void *)*a1 + 32))(&v190);
  v188 = 0;
  long long v189 = 0uLL;
  uint64_t v186 = 0;
  uint64_t v185 = 0;
  uint64_t v187 = 0;
  double v7 = *(double *)a2;
  int v8 = HIDWORD(v190);
  uint64_t v183 = -1;
  int v184 = 0x7FFFFFFF;
  unsigned int v163 = (*(uint64_t (**)(void))(*(void *)*a1 + 40))();
  uint64_t v167 = j;
  if (sub_110D2C8())
  {
    sub_6BAC((uint64_t)&v173);
    sub_188FC78(&v173, (uint64_t)"Encoding a path with ", 21);
    uint64_t v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" segments. Origin_fraction: ", 28);
    unint64_t v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)", destination_fraction: ", 24);
    std::ostream::operator<<();
    v171 = operator new(0x88uLL);
    long long v172 = xmmword_20E7B30;
    strcpy((char *)v171, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/PathEncoder.cpp");
    std::stringbuf::str();
    sub_110D2DC((uint64_t)&v171, 88, (uint64_t)&v170);
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v170.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v172) & 0x80000000) == 0) {
        goto LABEL_5;
      }
    }
    else if ((SHIBYTE(v172) & 0x80000000) == 0)
    {
LABEL_5:
      if (SBYTE7(v180) < 0) {
        operator delete((void *)__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_8;
    }
    operator delete(v171);
    goto LABEL_5;
  }
LABEL_8:
  if (*(void *)(a2 + 24) != *(void *)(a2 + 16))
  {
    unint64_t v11 = 0;
    int v12 = 0;
    int v13 = 0;
    unsigned int v156 = llround(-(v7 * (double)v8));
    uint64_t v166 = j + 3;
    double v14 = 0.5;
    long long v161 = (void *)a2;
    char v155 = a1;
    do
    {
      (*(void (**)(char **__return_ptr))(*(void *)*a1 + 32))(&v173);
      char v190 = v173;
      if ((void)v191)
      {
        *((void *)&v191 + 1) = v191;
        operator delete((void *)v191);
      }
      long long v191 = v174;
      uint64_t v192 = v175;
      uint64_t v175 = 0;
      long long v174 = 0uLL;
      int v193 = (int)v176;
      char v194 = BYTE4(v176);
      if (SHIBYTE(v196) < 0)
      {
        operator delete((void *)v195);
        long long v195 = v177;
        uint64_t v196 = v178;
        HIBYTE(v178) = 0;
        LOBYTE(v177) = 0;
        if ((void)v174)
        {
          *((void *)&v174 + 1) = v174;
          operator delete((void *)v174);
        }
      }
      else
      {
        long long v195 = v177;
        uint64_t v196 = v178;
      }
      int v165 = HIDWORD(v190);
      v12 += HIDWORD(v190);
      sub_4285DC(a1, a2, v11, (uint64_t)&v190, v13, v12, (unsigned int **)&v185);
      int v154 = v13;
      int8x8_t v23 = *(int8x8_t *)(a2 + 96);
      unint64_t v24 = &v191;
      if (v23)
      {
        uint8x8_t v19 = (uint8x8_t)vcnt_s8(v23);
        v19.i16[0] = vaddlv_u8(v19);
        if (v19.u32[0] > 1uLL)
        {
          unint64_t v25 = v11;
          if (*(void *)&v23 <= v11) {
            unint64_t v25 = v11 % *(void *)&v23;
          }
        }
        else
        {
          unint64_t v25 = (*(void *)&v23 - 1) & v11;
        }
        uint64_t v26 = *(void *)(a2 + 88);
        unint64_t v27 = *(void **)(v26 + 8 * v25);
        unint64_t v24 = &v191;
        if (v27)
        {
          uint64_t v28 = (void *)*v27;
          unint64_t v24 = &v191;
          if (v28)
          {
            uint64_t v29 = *(void *)&v23 - 1;
            if (v19.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v30 = v28[1];
                if (v30 == v11)
                {
                  if (v28[2] == v11) {
                    goto LABEL_40;
                  }
                }
                else if ((v30 & v29) != v25)
                {
                  goto LABEL_39;
                }
                uint64_t v28 = (void *)*v28;
                if (!v28) {
                  goto LABEL_39;
                }
              }
            }
            while (1)
            {
              unint64_t v31 = v28[1];
              if (v31 == v11)
              {
                if (v28[2] == v11)
                {
LABEL_40:
                  if (v19.u32[0] > 1uLL)
                  {
                    unint64_t v32 = v11;
                    if (*(void *)&v23 <= v11) {
                      unint64_t v32 = v11 % *(void *)&v23;
                    }
                  }
                  else
                  {
                    unint64_t v32 = v29 & v11;
                  }
                  uint64_t v33 = *(void **)(v26 + 8 * v32);
                  if (!v33 || (uint64_t v34 = (void *)*v33) == 0) {
LABEL_239:
                  }
                    sub_5AE8("unordered_map::at: key not found");
                  if (v19.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      uint64_t v35 = v34[1];
                      if (v35 == v11)
                      {
                        if (v34[2] == v11) {
                          goto LABEL_52;
                        }
                      }
                      else if ((v35 & v29) != v32)
                      {
                        goto LABEL_239;
                      }
                      uint64_t v34 = (void *)*v34;
                      if (!v34) {
                        goto LABEL_239;
                      }
                    }
                  }
                  while (1)
                  {
                    unint64_t v47 = v34[1];
                    if (v47 == v11)
                    {
                      if (v34[2] == v11)
                      {
LABEL_52:
                        unint64_t v24 = (long long *)(v34 + 3);
                        goto LABEL_53;
                      }
                    }
                    else
                    {
                      if (v47 >= *(void *)&v23) {
                        v47 %= *(void *)&v23;
                      }
                      if (v47 != v32) {
                        goto LABEL_239;
                      }
                    }
                    uint64_t v34 = (void *)*v34;
                    if (!v34) {
                      goto LABEL_239;
                    }
                  }
                }
              }
              else
              {
                if (v31 >= *(void *)&v23) {
                  v31 %= *(void *)&v23;
                }
                if (v31 != v25)
                {
LABEL_39:
                  unint64_t v24 = &v191;
                  break;
                }
              }
              uint64_t v28 = (void *)*v28;
              if (!v28) {
                goto LABEL_39;
              }
            }
          }
        }
      }
LABEL_53:
      long long v172 = 0uLL;
      v171 = 0;
      unint64_t v37 = *(const void **)v24;
      uint64_t v36 = *((void *)v24 + 1);
      int64_t v38 = v36 - *(void *)v24;
      if (v36 != *(void *)v24)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v38 >> 2) > 0x1555555555555555) {
          sub_2E00();
        }
        v171 = operator new(v38);
        *(void *)&long long v172 = v171;
        uint64_t v39 = (char *)v171 + 4 * (v38 >> 2);
        *((void *)&v172 + 1) = v39;
        memcpy(v171, v37, v38);
        *(void *)&long long v172 = v39;
        unint64_t j = v167;
      }
      unint64_t v162 = v11;
      if (v154 < 1)
      {
        unint64_t v40 = 0;
        double v46 = (char *)v185;
        unint64_t v164 = v186;
        if (v185 != v186) {
          goto LABEL_77;
        }
LABEL_204:
        if (v188 == (char *)v189) {
          unint64_t v145 = v40;
        }
        else {
          unint64_t v145 = v40 + 1;
        }
        sub_46C6C((uint64_t)&v188, v189, (char *)v171 + 12 * v145, (char *)v172, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v172 - ((void)v171 + 12 * v145)) >> 2));
        uint64_t v15 = v171;
        v156 += v165;
        a2 = (size_t)v161;
        unint64_t v18 = v162;
        a1 = v155;
        int v13 = v154;
        if (!v171) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }
      unint64_t v40 = sub_422CF0(&v183, (uint64_t)&v171, *(double *)&v19, v20, v21, v22);
      if ((double)*((int *)a1 + 26) / 100.0 * ((double)*((int *)a1 + 26) / 100.0) >= v41 || !sub_110D440()) {
        goto LABEL_64;
      }
      sub_6BAC((uint64_t)&v173);
      uint64_t v42 = sub_188FC78(&v173, (uint64_t)"Inserted point (", 16);
      unsigned int v44 = sub_413198(v42, (uint64_t)&v183, v43);
      sub_188FC78(v44, (uint64_t)") is too far (", 14);
      double v45 = (void *)std::ostream::operator<<();
      sub_188FC78(v45, (uint64_t)" m^2) from segment geometry.", 28);
      v170.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x88uLL);
      *(_OWORD *)&v170.__r_.__value_.__r.__words[1] = xmmword_20E7B30;
      strcpy(v170.__r_.__value_.__l.__data_, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/PathEncoder.cpp");
      std::stringbuf::str();
      sub_110D454((uint64_t)&v170, 115, (uint64_t)v168);
      if (v169 < 0)
      {
        operator delete(v168[0]);
        if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
LABEL_210:
        }
          operator delete(v170.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_210;
      }
      uint64_t v173 = v160;
      *(char **)((char *)&v173 + *((void *)v160 - 3)) = v159;
      if (SBYTE7(v180) < 0) {
        operator delete((void *)__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
LABEL_64:
      int v154 = 0;
      double v46 = (char *)v185;
      unint64_t v164 = v186;
      if (v185 == v186) {
        goto LABEL_204;
      }
      do
      {
LABEL_77:
        while (1)
        {
          double v49 = v171;
          uint64_t v48 = v172;
          unint64_t v50 = sub_422FAC((char **)&v171, v165, *(_DWORD *)v46, v163, 10);
          unint64_t v54 = v50;
          if (v50 >= v40)
          {
            uint64_t v55 = v48 - (void)v49;
            uint64_t v56 = (char *)v171;
            uint64_t v57 = v172 - (void)v171;
            if (v50 != v40 || v55 == v57) {
              break;
            }
          }
          if (sub_110D384())
          {
            uint64_t v173 = v158;
            *(char **)((char *)&v173 + *((void *)v158 - 3)) = v157;
            uint64_t v85 = (std::ios_base *)((char *)&v173 + *((void *)v173 - 3));
            std::ios_base::init(v85, &v174);
            v85[1].__vftable = 0;
            v85[1].__fmtflags_ = -1;
            std::streambuf::basic_streambuf();
            long long __p = 0u;
            long long v180 = 0u;
            int v181 = 16;
            unint64_t v86 = sub_188FC78(&v173, (uint64_t)"Support point for segment ", 26);
            unint64_t v87 = sub_2DD928(v86, *(void *)(v161[2] + 8 * v162));
            sub_188FC78(v87, (uint64_t)" could not be encoded at index ", 31);
            uint64_t v88 = (void *)std::ostream::operator<<();
            sub_188FC78(v88, (uint64_t)" since the encoding of the segment is already finalized up until index ", 71);
            std::ostream::operator<<();
            v170.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x88uLL);
            *(_OWORD *)&v170.__r_.__value_.__r.__words[1] = xmmword_20E7B30;
            strcpy(v170.__r_.__value_.__l.__data_, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/PathEncoder.cpp");
            std::stringbuf::str();
            sub_110D398((uint64_t)&v170, 134, (uint64_t)v168);
            if (v169 < 0)
            {
              operator delete(v168[0]);
              if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_111;
              }
            }
            else if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_111:
              uint64_t v173 = v160;
              *(char **)((char *)&v173 + *((void *)v160 - 3)) = v159;
              if (SBYTE7(v180) < 0) {
                operator delete((void *)__p);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
              goto LABEL_76;
            }
            operator delete(v170.__r_.__value_.__l.__data_);
            goto LABEL_111;
          }
LABEL_76:
          ++v40;
          unint64_t j = v167;
          v46 += 16;
          if (v46 == v164) {
            goto LABEL_201;
          }
        }
        unint64_t v59 = -2 - 0x5555555555555555 * (v57 >> 2);
        if (v59 >= v50) {
          unint64_t v59 = v50;
        }
        long long v60 = (char *)v171 + 12 * v59;
        LODWORD(v51) = v60[3];
        LODWORD(v52) = v60[4];
        LODWORD(v53) = *v60;
        double v61 = (double)v51 * 360.0 / 4294967300.0 + -180.0 - ((double)v53 * 360.0 / 4294967300.0 + -180.0);
        long double v62 = 3.14159265 - (double)v52 * 6.28318531 / 4294967300.0;
        double v63 = exp(v62);
        long double v64 = exp(-v62);
        *(double *)&unint64_t v65 = atan((v63 - v64) * v14);
        double v66 = *(double *)&v65 * 57.2957795;
        LODWORD(v65) = v60[1];
        long double v67 = 3.14159265 - (double)v65 * 6.28318531 / 4294967300.0;
        double v68 = exp(v67);
        long double v69 = exp(-v67);
        long double v70 = atan((v68 - v69) * 0.5) * 57.2957795;
        double v14 = 0.5;
        long double v71 = cos((v66 + v70) * 0.5 * 3.14159265 / 180.0);
        double v72 = atan2(v61 * v71, v66 - v70);
        if (v72 < 0.0) {
          double v72 = v72 + 6.28318531;
        }
        for (double i = v72 * 180.0 / 3.14159265; i >= 180.0; double i = i + -360.0)
          ;
        for (j = v167; i < -180.0; double i = i + 360.0)
          ;
        for (; i < 0.0; double i = i + 360.0)
          ;
        if (*((int *)v167 + 8) >= 1)
        {
          BOOL v74 = (char *)v189;
          uint64_t v75 = v189 - (void)v188;
          if ((char *)v189 == v188) {
            unint64_t v76 = v40;
          }
          else {
            unint64_t v76 = v40 + 1;
          }
          unint64_t v77 = &v56[12 * v76];
          uint64_t v78 = (uint64_t)&v56[12 * v54 + 12];
          if (v78 - (uint64_t)v77 < 1) {
            goto LABEL_138;
          }
          uint64_t v79 = (v78 - (uint64_t)v77) / 12;
          uint64_t v80 = v75 / 12;
          uint64_t v81 = &v188[12 * (v75 / 12)];
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v189 + 1) - v189) >> 2)) < v79)
          {
            unint64_t v82 = v79 + v80;
            if ((unint64_t)(v79 + v80) > 0x1555555555555555) {
              sub_2E00();
            }
            if (0x5555555555555556 * ((uint64_t)(*((void *)&v189 + 1) - (void)v188) >> 2) > v82) {
              unint64_t v82 = 0x5555555555555556 * ((uint64_t)(*((void *)&v189 + 1) - (void)v188) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v189 + 1) - (void)v188) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v83 = 0x1555555555555555;
            }
            else {
              unint64_t v83 = v82;
            }
            unint64_t v152 = v83;
            if (v83)
            {
              if (v83 > 0x1555555555555555) {
                sub_188D718();
              }
              uint64_t v84 = (char *)operator new(12 * v83);
            }
            else
            {
              uint64_t v84 = 0;
            }
            uint64_t v101 = &v84[12 * v80];
            uint64_t v102 = 12 * v79;
            unsigned int v103 = &v101[12 * v79];
            v104 = v101;
            do
            {
              uint64_t v105 = *(void *)v77;
              *((_DWORD *)v104 + 2) = *((_DWORD *)v77 + 2);
              *(void *)v104 = v105;
              v104 += 12;
              v77 += 12;
              v102 -= 12;
            }
            while (v102);
            uint64_t v106 = v188;
            if (v188 != v81)
            {
              uint64_t v107 = v81;
              do
              {
                uint64_t v108 = *(void *)(v107 - 12);
                v107 -= 12;
                int v109 = *((_DWORD *)v107 + 2);
                *(void *)(v101 - 12) = v108;
                v101 -= 12;
                *((_DWORD *)v101 + 2) = v109;
              }
              while (v107 != v106);
              BOOL v74 = (char *)v189;
            }
            if (v74 != v81) {
              memmove(v103, v81, v74 - v81);
            }
            unint64_t v110 = v188;
            v188 = v101;
            *(void *)&long long v189 = &v103[v74 - v81];
            *((void *)&v189 + 1) = &v84[12 * v152];
            unint64_t j = v167;
            if (v110) {
              operator delete(v110);
            }
            goto LABEL_138;
          }
          uint64_t v89 = v189 - (void)v81;
          int64_t v90 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v189 - (void)v81) >> 2);
          if (v90 >= v79)
          {
            int v93 = (char *)v189;
            long long v95 = (unsigned char *)v78;
            unint64_t j = v167;
            uint64_t v96 = 12 * v79;
            unint64_t v97 = v189 - 12 * v79;
            unint64_t v98 = (char *)v189;
            if (v97 >= (unint64_t)v189) {
              goto LABEL_123;
            }
            do
            {
LABEL_122:
              uint64_t v99 = *(void *)v97;
              *((_DWORD *)v98 + 2) = *(_DWORD *)(v97 + 8);
              *(void *)unint64_t v98 = v99;
              v98 += 12;
              v97 += 12;
            }
            while (v97 < (unint64_t)v74);
LABEL_123:
            int64_t v100 = &v81[v96];
            *(void *)&long long v189 = v98;
            if (v93 != v100) {
              memmove(v100, v81, v93 - v100);
            }
            if (v95 != v77) {
              memmove(v81, v77, v95 - v77);
            }
          }
          else
          {
            int v153 = &v188[12 * (v75 / 12)];
            unsigned int v91 = &v77[4 * ((uint64_t)(v189 - (void)v81) >> 2)];
            uint64_t v92 = v78 - (void)v91;
            if ((char *)v78 != v91) {
              memmove((void *)v189, &v77[12 * v90], v78 - (void)v91);
            }
            int v93 = &v74[v92];
            *(void *)&long long v189 = &v74[v92];
            BOOL v94 = v89 < 1;
            unint64_t j = v167;
            if (!v94)
            {
              long long v95 = v91;
              uint64_t v81 = v153;
              uint64_t v96 = 12 * v79;
              unint64_t v97 = (unint64_t)&v93[-12 * v79];
              unint64_t v98 = v93;
              if (v97 >= (unint64_t)v74) {
                goto LABEL_123;
              }
              goto LABEL_122;
            }
          }
LABEL_138:
          sub_4234F0(&v188, v197, &v173);
          uint64_t v111 = v166;
          if (v188)
          {
            *(void *)&long long v189 = v188;
            operator delete(v188);
          }
          unint64_t v112 = v173;
          v188 = v173;
          long long v189 = v174;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v174 - (void)v173) >> 2) < 3)
          {
LABEL_141:
            *(void *)&long long v189 = v112;
            goto LABEL_142;
          }
          uint64_t v119 = 0;
          unint64_t v120 = 1;
          while (2)
          {
            unint64_t v121 = (_DWORD *)j[5];
            if (v121 && (uint64_t v122 = *((int *)j + 8), (int)v122 < *v121))
            {
              *((_DWORD *)j + 8) = v122 + 1;
              unint64_t v123 = *(std::string **)&v121[2 * v122 + 2];
            }
            else
            {
              sub_111704C(*v111);
              unint64_t v123 = (std::string *)sub_188CDC8((uint64_t)v111, v124);
              unint64_t v112 = v188;
            }
            double v125 = sub_1113FA8((uint64_t)&v173, 0, 0);
            HIDWORD(__p) = 2;
            DWORD2(v174) |= 0x802u;
            int v126 = v176;
            if (!v176)
            {
              int v127 = (void *)(v174 & 0xFFFFFFFFFFFFFFFCLL);
              if (v174) {
                int v127 = (void *)*v127;
              }
              int v126 = sub_1116F58((uint64_t)v127);
              v176 = v126;
            }
            LODWORD(v125) = *(_DWORD *)&v112[v119 + 16];
            long double v128 = (double)*(unint64_t *)&v125 * -6.28318531 / 4294967300.0 + 3.14159265;
            double v129 = exp(v128);
            long double v130 = exp(-v128);
            double v131 = atan((v129 - v130) * 0.5) * 57.2957795 * 10000000.0;
            int v132 = v126[4];
            v126[4] = v132 | 1;
            v126[6] = llround(v131);
            LODWORD(v131) = *(_DWORD *)&v112[v119 + 12];
            v126[4] = v132 | 3;
            v126[7] = llround(((double)*(unint64_t *)&v131 * 360.0 / 4294967300.0 + -180.0) * 10000000.0);
            int v133 = *(_DWORD *)&v112[v119 + 20];
            if (v133 != 0x7FFFFFFF)
            {
              DWORD2(v174) |= 0x10u;
              LODWORD(v178) = v133;
            }
            uint64_t v111 = v166;
            unint64_t j = v167;
            if (v123 == (std::string *)&v173) {
              goto LABEL_152;
            }
            std::string::size_type size = v123->__r_.__value_.__l.__size_;
            if ((size & 2) != 0)
            {
              unint64_t v135 = 0;
              uint64_t v136 = v174;
              if ((v174 & 2) == 0) {
                goto LABEL_167;
              }
            }
            else
            {
              unint64_t v135 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
              if (size)
              {
                unint64_t v135 = (void *)*v135;
                uint64_t v136 = v174;
                if ((v174 & 2) == 0) {
                  goto LABEL_167;
                }
              }
              else
              {
                uint64_t v136 = v174;
                if ((v174 & 2) == 0)
                {
LABEL_167:
                  uint64_t v137 = (void *)(v136 & 0xFFFFFFFFFFFFFFFCLL);
                  if (v136) {
                    uint64_t v137 = (void *)*v137;
                  }
LABEL_171:
                  if (v135 == v137) {
                    sub_1115810((uint64_t)v123, (uint64_t)&v173);
                  }
                  else {
                    sub_1115798(v123, (uint64_t)&v173);
                  }
LABEL_152:
                  sub_1114258(&v173);
                  ++v120;
                  unint64_t v112 = v188;
                  v119 += 12;
                  if (v120 >= -1 - 0x5555555555555555 * ((uint64_t)(v189 - (void)v188) >> 2)) {
                    goto LABEL_141;
                  }
                  continue;
                }
              }
            }
            break;
          }
          uint64_t v137 = 0;
          goto LABEL_171;
        }
LABEL_142:
        int v113 = (_DWORD *)j[5];
        if (v113 && (uint64_t v114 = *((int *)j + 8), (int)v114 < *v113))
        {
          *((_DWORD *)j + 8) = v114 + 1;
          uint64_t v115 = *(std::string **)&v113[2 * v114 + 2];
        }
        else
        {
          sub_111704C(*v166);
          uint64_t v115 = (std::string *)sub_188CDC8((uint64_t)v166, v116);
        }
        sub_428CAC(v155, *(void *)v46, *((void *)v46 + 1), v161, v162, (_DWORD *)v171 + 3 * v54, (__int16)llround(i) % 360, *(_DWORD *)v46 + v156, (uint64_t)&v173, (unsigned __int16 *)&v190);
        if (v115 != (std::string *)&v173)
        {
          std::string::size_type v117 = v115->__r_.__value_.__l.__size_;
          if ((v117 & 2) != 0)
          {
            uint8x8_t v118 = 0;
          }
          else
          {
            uint8x8_t v118 = (void *)(v117 & 0xFFFFFFFFFFFFFFFCLL);
            if (v117) {
              uint8x8_t v118 = (void *)*v118;
            }
          }
          if ((v174 & 2) != 0)
          {
            uint64_t v138 = 0;
          }
          else
          {
            uint64_t v138 = (void *)(v174 & 0xFFFFFFFFFFFFFFFCLL);
            if (v174) {
              uint64_t v138 = (void *)*v138;
            }
          }
          if (v118 == v138) {
            sub_1115810((uint64_t)v115, (uint64_t)&v173);
          }
          else {
            sub_1115798(v115, (uint64_t)&v173);
          }
        }
        sub_1114258(&v173);
        if (sub_110D2C8())
        {
          uint64_t v173 = v158;
          *(char **)((char *)&v173 + *((void *)v158 - 3)) = v157;
          uint64_t v139 = (std::ios_base *)((char *)&v173 + *((void *)v173 - 3));
          std::ios_base::init(v139, &v174);
          v139[1].__vftable = 0;
          v139[1].__fmtflags_ = -1;
          std::streambuf::basic_streambuf();
          long long __p = 0u;
          long long v180 = 0u;
          int v181 = 16;
          signed int v140 = sub_188FC78(&v173, (uint64_t)"Adding support point for segment ", 33);
          v141 = sub_2DD928(v140, *(void *)(v161[2] + 8 * v162));
          uint64_t v142 = sub_188FC78(v141, (uint64_t)": ", 2);
          sub_188AB38((unint64_t)v115, &v170);
          if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v143 = &v170;
          }
          else {
            unint64_t v143 = (std::string *)v170.__r_.__value_.__r.__words[0];
          }
          if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v144 = HIBYTE(v170.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v144 = v170.__r_.__value_.__l.__size_;
          }
          sub_188FC78(v142, (uint64_t)v143, v144);
          if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v170.__r_.__value_.__l.__data_);
          }
          v170.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x88uLL);
          *(_OWORD *)&v170.__r_.__value_.__r.__words[1] = xmmword_20E7B30;
          strcpy(v170.__r_.__value_.__l.__data_, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/PathEncoder.cpp");
          std::stringbuf::str();
          sub_110D2DC((uint64_t)&v170, 169, (uint64_t)v168);
          if (v169 < 0)
          {
            operator delete(v168[0]);
            if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_194;
            }
          }
          else if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_194:
            uint64_t v173 = v160;
            *(char **)((char *)&v173 + *((void *)v160 - 3)) = v159;
            if (SBYTE7(v180) < 0) {
              operator delete((void *)__p);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
            goto LABEL_197;
          }
          operator delete(v170.__r_.__value_.__l.__data_);
          goto LABEL_194;
        }
LABEL_197:
        int v12 = 0;
        unint64_t v40 = v54;
        v46 += 16;
      }
      while (v46 != v164);
LABEL_201:
      if (v185 == v186) {
        goto LABEL_204;
      }
      if (!*(v186 - 12)) {
        goto LABEL_204;
      }
      a2 = (size_t)v161;
      if (*((void *)v186 - 1) >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v161[9] - v161[8]) >> 4)) {
        goto LABEL_204;
      }
      uint64_t v15 = v171;
      uint64_t v16 = (char *)v171 + 12 * v40;
      int v13 = v165 - *((_DWORD *)v186 - 4);
      int v17 = *((_DWORD *)v16 + 2);
      uint64_t v183 = *(void *)v16;
      int v184 = v17;
      v156 += *((_DWORD *)v186 - 4) - v13;
      a1 = v155;
      unint64_t v18 = v162;
LABEL_11:
      *(void *)&long long v172 = v15;
      operator delete(v15);
LABEL_12:
      unint64_t v11 = v18 + 1;
    }
    while (v11 < (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  }
  int v146 = *(unsigned __int8 *)(a2 + 128);
  if (*(unsigned char *)(a2 + 128))
  {
    *((_DWORD *)j + 4) |= 2u;
    uint64_t v147 = j[7];
    if (!v147)
    {
      uint64_t v148 = j[1];
      char v149 = (void *)(v148 & 0xFFFFFFFFFFFFFFFCLL);
      if (v148) {
        char v149 = (void *)*v149;
      }
      uint64_t v147 = sub_11170E4((uint64_t)v149);
      j[7] = v147;
      int v146 = *(unsigned __int8 *)(a2 + 128);
    }
    if (v146 == 2) {
      int v150 = 2;
    }
    else {
      int v150 = v146 == 1;
    }
    *(_DWORD *)(v147 + 16) |= 1u;
    *(_DWORD *)(v147 + 24) = v150;
  }
  std::chrono::steady_clock::now();
  if (!sub_110D2C8()) {
    goto LABEL_226;
  }
  sub_6BAC((uint64_t)&v173);
  sub_188FC78(&v173, (uint64_t)"Encoded path in ", 16);
  long long v151 = (void *)std::ostream::operator<<();
  sub_188FC78(v151, (uint64_t)" ms.", 4);
  v171 = operator new(0x88uLL);
  long long v172 = xmmword_20E7B30;
  strcpy((char *)v171, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/PathEncoder.cpp");
  std::stringbuf::str();
  sub_110D2DC((uint64_t)&v171, 210, (uint64_t)&v170);
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v170.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v172) & 0x80000000) == 0) {
      goto LABEL_223;
    }
LABEL_238:
    operator delete(v171);
    goto LABEL_223;
  }
  if (SHIBYTE(v172) < 0) {
    goto LABEL_238;
  }
LABEL_223:
  if (SBYTE7(v180) < 0) {
    operator delete((void *)__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_226:
  if (v185)
  {
    uint64_t v186 = (char *)v185;
    operator delete(v185);
  }
  if (v188)
  {
    *(void *)&long long v189 = v188;
    operator delete(v188);
  }
  if (SHIBYTE(v196) < 0) {
    operator delete((void *)v195);
  }
  if ((void)v191)
  {
    *((void *)&v191 + 1) = v191;
    operator delete((void *)v191);
  }
}

void sub_42685C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  sub_111ECAC((uint64_t)&a56);
  uint64_t v58 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v58;
    operator delete(v58);
    unint64_t v59 = *(void **)(v56 - 248);
    if (!v59)
    {
LABEL_8:
      sub_40F05C(v56 - 224);
      sub_1116458(a40);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    unint64_t v59 = *(void **)(v56 - 248);
    if (!v59) {
      goto LABEL_8;
    }
  }
  *(void *)(v56 - 240) = v59;
  operator delete(v59);
  goto LABEL_8;
}

std::string **sub_426B04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    uint64_t v3 = (std::string **)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = sub_42B160(v3, &v3[*(int *)(a1 + 8)]);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    uint64_t v6 = v5 + 8;
  }
  else {
    uint64_t v6 = 0;
  }
  unint64_t v7 = (unint64_t)result - v6;
  int v8 = *(_DWORD *)(a1 + 8) - (v7 >> 3);
  if (v8 >= 1)
  {
    uint64_t v9 = 8 * (int)((uint64_t)v7 >> 3) + 8;
    uint64_t v10 = *(_DWORD *)(a1 + 8) - (v7 >> 3);
    do
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 16) + v9);
      if (v11) {
        BOOL v12 = *(void *)a1 == 0;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12)
      {
        sub_1114258(v11);
        operator delete();
      }
      v9 += 8;
      --v10;
    }
    while (v10);
    return (std::string **)sub_188CC74(a1, v7 >> 3, v8);
  }
  return result;
}

void sub_426BFC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, int a5@<W4>, void *a6@<X8>)
{
  uint64_t v69 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v62 = 0u;
  int v70 = 1065353216;
  char v71 = 0;
  uint64_t v8 = *a3;
  uint64_t v9 = a1 + 16;
  double v49 = (unsigned char *)(a2 + 9976);
  if (*(unsigned char *)(a2 + 9976))
  {
    unint64_t v10 = sub_46C760((void *)a2);
    if (v10)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        unint64_t v12 = *(void *)(sub_46C8EC((void *)a2, i) + 32);
        int v13 = sub_650EEC(a2, i);
        sub_42D7DC(v9, v12, (char **)v13);
      }
    }
  }
  double v14 = *(int64x2_t **)(a2 + 1032);
  uint64_t v15 = *(int64x2_t **)(a2 + 1040);
  if (v14 != v15)
  {
    if (!v8)
    {
      do
      {
        uint64_t v33 = v14->i64[0];
        uint64_t v32 = v14->i64[1];
        if (v14->i64[0] <= (unint64_t)(v32 + 1)) {
          uint64_t v34 = v32 + 1;
        }
        else {
          uint64_t v34 = v14->i64[0];
        }
        if (v14->i64[0] < (unint64_t)(v32 + 1))
        {
          uint64_t v35 = 24 * v33;
          do
          {
            uint64_t v36 = sub_46C8EC((void *)a2, v33);
            sub_42D7DC(v9, *(void *)(v36 + 32), (char **)(v14[2].i64[0] - 24 * v14->i64[0] + v35));
            ++v33;
            v35 += 24;
          }
          while (v34 != v33);
        }
        v14 += 4;
      }
      while (v14 != v15);
      goto LABEL_36;
    }
    do
    {
      uint64_t v17 = v14->i64[0];
      uint64_t v16 = v14->i64[1];
      if (v14->i64[0] <= (unint64_t)(v16 + 1)) {
        uint64_t v18 = v16 + 1;
      }
      else {
        uint64_t v18 = v14->i64[0];
      }
      if (v14->i64[0] < (unint64_t)(v16 + 1))
      {
        uint64_t v19 = 24 * v17;
        do
        {
          uint64_t v20 = sub_46C8EC((void *)a2, v17);
          sub_42D7DC(v9, *(void *)(v20 + 32), (char **)(v14[2].i64[0] - 24 * v14->i64[0] + v19));
          ++v17;
          v19 += 24;
        }
        while (v18 != v17);
      }
      *(_DWORD *)(v8 + 40) |= 0x100000u;
      uint64_t v21 = *(void *)(v8 + 816);
      if (v21)
      {
        double v22 = *(_DWORD **)(v21 + 32);
        if (!v22) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v23 = *(void *)(v8 + 8);
        unint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
        if (v23) {
          unint64_t v24 = (void *)*v24;
        }
        uint64_t v21 = sub_13DAD88((uint64_t)v24);
        *(void *)(v8 + 816) = v21;
        double v22 = *(_DWORD **)(v21 + 32);
        if (!v22) {
          goto LABEL_24;
        }
      }
      uint64_t v25 = *(int *)(v21 + 24);
      if ((int)v25 < *v22)
      {
        *(_DWORD *)(v21 + 24) = v25 + 1;
        uint64_t v26 = *(void *)&v22[2 * v25 + 2];
        *(_DWORD *)(v26 + 16) |= 1u;
        unint64_t v27 = *(int32x2_t **)(v26 + 24);
        if (!v27) {
          goto LABEL_25;
        }
        goto LABEL_8;
      }
LABEL_24:
      uint64_t v28 = v21 + 16;
      uint64_t v29 = sub_13DAD10(*(void *)(v21 + 16));
      uint64_t v26 = sub_188CDC8(v28, (uint64_t)v29);
      *(_DWORD *)(v26 + 16) |= 1u;
      unint64_t v27 = *(int32x2_t **)(v26 + 24);
      if (!v27)
      {
LABEL_25:
        uint64_t v30 = *(void *)(v26 + 8);
        unint64_t v31 = (void *)(v30 & 0xFFFFFFFFFFFFFFFCLL);
        if (v30) {
          unint64_t v31 = (void *)*v31;
        }
        unint64_t v27 = (int32x2_t *)sub_13DAC98((uint64_t)v31);
        *(void *)(v26 + 24) = v27;
      }
LABEL_8:
      v27[2].i32[0] |= 3u;
      v27[3] = vmovn_s64(v14[1]);
      v14 += 4;
    }
    while (v14 != v15);
  }
LABEL_36:
  uint64_t v51 = sub_46C7EC(a2);
  unint64_t v52 = v37;
  sub_42A95C(&v51, (uint64_t)&v66, v38);
  sub_46C77C((void *)a2, &v51);
  sub_42AFD8((void *)v51, v52, (void *)v53, *((unint64_t *)&v53 + 1), (unint64_t *)&v63, *((char **)&v63 + 1));
  *(double *)&long long v62 = (double)(1000000000 - sub_46CABC(a2)) / 1000000000.0;
  *((double *)&v62 + 1) = (double)sub_46CAC4(a2) / 1000000000.0;
  uint64_t v39 = 1064;
  if (!*v49) {
    uint64_t v39 = 1056;
  }
  unsigned int v40 = *(_DWORD *)(a1 + v39);
  if (v40 >= 0x7FFFFFFF) {
    int v41 = 0x7FFFFFFF;
  }
  else {
    int v41 = v40;
  }
  sub_424DC4((void *)(a1 + 928), (size_t)&v62, v41, a6);
  uint64_t v42 = *(void *)(a1 + 8);
  sub_42D844(v9);
  sub_47B7C8(a2, v42, (uint64_t)a6);
  if ((a4 & 1) == 0) {
    sub_4271A8((uint64_t)(a6 + 3));
  }
  if (a5)
  {
    uint64_t v55 = 0;
    uint64_t v51 = 0x4039000000000000;
    unint64_t v52 = 5000;
    long long v53 = xmmword_20E7C10;
    long long v54 = xmmword_20E7C20;
    uint64_t v56 = 20000000;
    uint64_t v57 = 0x3FF199999999999ALL;
    uint64_t v58 = 0x3E800002710;
    uint64_t v59 = 0xA00002710;
    long long v60 = xmmword_20E7C00;
    long long v61 = 0x3FE6147AE147AE14uLL;
    sub_1109790((uint64_t)&v51, (uint64_t)a6);
  }
  double v43 = (void *)*((void *)&v68 + 1);
  if (*((void *)&v68 + 1))
  {
    do
    {
      double v45 = (void *)*v43;
      double v46 = (void *)v43[3];
      if (v46)
      {
        v43[4] = v46;
        operator delete(v46);
      }
      operator delete(v43);
      double v43 = v45;
    }
    while (v45);
  }
  unsigned int v44 = (void *)*((void *)&v67 + 1);
  *((void *)&v67 + 1) = 0;
  if (v44) {
    operator delete(v44);
  }
  if ((void)v66)
  {
    *((void *)&v66 + 1) = v66;
    operator delete((void *)v66);
  }
  if (*((void *)&v64 + 1))
  {
    *(void *)&long long v65 = *((void *)&v64 + 1);
    operator delete(*((void **)&v64 + 1));
  }
  if ((void)v63)
  {
    *((void *)&v63 + 1) = v63;
    operator delete((void *)v63);
  }
}

void sub_4270BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_427144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_427158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_42716C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_427180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_427194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

std::string **sub_4271A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    uint64_t v3 = (std::string **)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = sub_42B254(v3, &v3[*(int *)(a1 + 8)]);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    uint64_t v6 = v5 + 8;
  }
  else {
    uint64_t v6 = 0;
  }
  unint64_t v7 = (unint64_t)result - v6;
  int v8 = *(_DWORD *)(a1 + 8) - (v7 >> 3);
  if (v8 >= 1)
  {
    uint64_t v9 = 8 * (int)((uint64_t)v7 >> 3) + 8;
    uint64_t v10 = *(_DWORD *)(a1 + 8) - (v7 >> 3);
    do
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 16) + v9);
      if (v11) {
        BOOL v12 = *(void *)a1 == 0;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12)
      {
        sub_1114258(v11);
        operator delete();
      }
      v9 += 8;
      --v10;
    }
    while (v10);
    return (std::string **)sub_188CC74(a1, v7 >> 3, v8);
  }
  return result;
}

void sub_4272A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, int a5@<W4>, void *a6@<X8>)
{
  uint64_t v72 = 0;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v65 = 0u;
  int v73 = 1065353216;
  char v74 = 0;
  uint64_t v9 = *a3;
  uint64_t v10 = a1 + 16;
  unint64_t v52 = (unsigned char *)(a2 + 9976);
  if (*(unsigned char *)(a2 + 9976))
  {
    unint64_t v11 = sub_470ADC((void *)a2);
    if (v11)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        int v13 = (unsigned int *)sub_470B40((void *)a2, i);
        uint64_t v14 = *v13;
        unsigned int v15 = v13[1];
        uint64_t v16 = sub_652D48(a2, i);
        sub_42D7DC(v10, (((unint64_t)(v15 & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v15 << 32) | v14) ^ 0x1000000000000, (char **)v16);
      }
    }
  }
  unint64_t v50 = a6;
  uint64_t v17 = *(int64x2_t **)(a2 + 1032);
  uint64_t v18 = *(int64x2_t **)(a2 + 1040);
  if (v17 != v18)
  {
    if (v9)
    {
      while (1)
      {
        uint64_t v20 = v17->i64[0];
        uint64_t v19 = v17->i64[1];
        if (v17->i64[0] <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        else {
          uint64_t v21 = v17->i64[0];
        }
        if (v17->i64[0] < (unint64_t)(v19 + 1))
        {
          uint64_t v22 = 24 * v20;
          do
          {
            uint64_t v23 = (unsigned int *)sub_470B40((void *)a2, v20);
            sub_42D7DC(v10, (((unint64_t)(v23[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v23[1] << 32) | *v23) ^ 0x1000000000000, (char **)(v17[2].i64[0] - 24 * v17->i64[0] + v22));
            ++v20;
            v22 += 24;
          }
          while (v21 != v20);
        }
        *(_DWORD *)(v9 + 40) |= 0x100000u;
        uint64_t v24 = *(void *)(v9 + 816);
        if (v24)
        {
          uint64_t v25 = *(_DWORD **)(v24 + 32);
          if (!v25) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v26 = *(void *)(v9 + 8);
          unint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
          if (v26) {
            unint64_t v27 = (void *)*v27;
          }
          uint64_t v24 = sub_13DAD88((uint64_t)v27);
          *(void *)(v9 + 816) = v24;
          uint64_t v25 = *(_DWORD **)(v24 + 32);
          if (!v25) {
            goto LABEL_24;
          }
        }
        uint64_t v28 = *(int *)(v24 + 24);
        if ((int)v28 < *v25)
        {
          *(_DWORD *)(v24 + 24) = v28 + 1;
          uint64_t v29 = *(void *)&v25[2 * v28 + 2];
          *(_DWORD *)(v29 + 16) |= 1u;
          uint64_t v30 = *(int32x2_t **)(v29 + 24);
          if (!v30) {
            goto LABEL_25;
          }
          goto LABEL_8;
        }
LABEL_24:
        uint64_t v31 = v24 + 16;
        uint64_t v32 = sub_13DAD10(*(void *)(v24 + 16));
        uint64_t v29 = sub_188CDC8(v31, (uint64_t)v32);
        *(_DWORD *)(v29 + 16) |= 1u;
        uint64_t v30 = *(int32x2_t **)(v29 + 24);
        if (!v30)
        {
LABEL_25:
          uint64_t v33 = *(void *)(v29 + 8);
          uint64_t v34 = (void *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
          if (v33) {
            uint64_t v34 = (void *)*v34;
          }
          uint64_t v30 = (int32x2_t *)sub_13DAC98((uint64_t)v34);
          *(void *)(v29 + 24) = v30;
        }
LABEL_8:
        v30[2].i32[0] |= 3u;
        v30[3] = vmovn_s64(v17[1]);
        v17 += 4;
        if (v17 == v18) {
          goto LABEL_37;
        }
      }
    }
    do
    {
      uint64_t v36 = v17->i64[0];
      uint64_t v35 = v17->i64[1];
      if (v17->i64[0] <= (unint64_t)(v35 + 1)) {
        uint64_t v37 = v35 + 1;
      }
      else {
        uint64_t v37 = v17->i64[0];
      }
      if (v17->i64[0] < (unint64_t)(v35 + 1))
      {
        uint64_t v38 = 24 * v36;
        do
        {
          uint64_t v39 = (unsigned int *)sub_470B40((void *)a2, v36);
          sub_42D7DC(v10, (((unint64_t)(v39[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v39[1] << 32) | *v39) ^ 0x1000000000000, (char **)(v17[2].i64[0] - 24 * v17->i64[0] + v38));
          ++v36;
          v38 += 24;
        }
        while (v37 != v36);
      }
      v17 += 4;
    }
    while (v17 != v18);
  }
LABEL_37:
  uint64_t v54 = sub_46C7EC(a2);
  unint64_t v55 = v40;
  sub_42A95C(&v54, (uint64_t)&v69, v41);
  sub_470AF8((void *)a2, &v54);
  sub_42B348((void *)v54, v55, (void *)v56, *((unint64_t *)&v56 + 1), (unint64_t *)&v66, *((char **)&v66 + 1));
  *(double *)&long long v65 = (double)(1000000000 - sub_46CABC(a2)) / 1000000000.0;
  *((double *)&v65 + 1) = (double)sub_46CAC4(a2) / 1000000000.0;
  uint64_t v42 = 1064;
  if (!*v52) {
    uint64_t v42 = 1056;
  }
  unsigned int v43 = *(_DWORD *)(a1 + v42);
  if (v43 >= 0x7FFFFFFF) {
    int v44 = 0x7FFFFFFF;
  }
  else {
    int v44 = v43;
  }
  sub_424DC4((void *)(a1 + 928), (size_t)&v65, v44, v50);
  uint64_t v45 = *(void *)(a1 + 8);
  sub_42D844(v10);
  sub_47CA98(a2, v45, (uint64_t)v50);
  if ((a4 & 1) == 0) {
    sub_4278A0((uint64_t)(v50 + 3));
  }
  if (a5)
  {
    uint64_t v58 = 0;
    uint64_t v54 = 0x4039000000000000;
    unint64_t v55 = 5000;
    long long v56 = xmmword_20E7C10;
    long long v57 = xmmword_20E7C20;
    uint64_t v59 = 20000000;
    uint64_t v60 = 0x3FF199999999999ALL;
    uint64_t v61 = 0x3E800002710;
    uint64_t v62 = 0xA00002710;
    long long v63 = xmmword_20E7C00;
    long long v64 = 0x3FE6147AE147AE14uLL;
    sub_1109790((uint64_t)&v54, (uint64_t)v50);
  }
  double v46 = (void *)*((void *)&v71 + 1);
  if (*((void *)&v71 + 1))
  {
    do
    {
      uint64_t v48 = (void *)*v46;
      double v49 = (void *)v46[3];
      if (v49)
      {
        v46[4] = v49;
        operator delete(v49);
      }
      operator delete(v46);
      double v46 = v48;
    }
    while (v48);
  }
  unint64_t v47 = (void *)*((void *)&v70 + 1);
  *((void *)&v70 + 1) = 0;
  if (v47) {
    operator delete(v47);
  }
  if ((void)v69)
  {
    *((void *)&v69 + 1) = v69;
    operator delete((void *)v69);
  }
  if (*((void *)&v67 + 1))
  {
    *(void *)&long long v68 = *((void *)&v67 + 1);
    operator delete(*((void **)&v67 + 1));
  }
  if ((void)v66)
  {
    *((void *)&v66 + 1) = v66;
    operator delete((void *)v66);
  }
}

void sub_4277B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_42783C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_427850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_427864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_427878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_42788C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

std::string **sub_4278A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    uint64_t v3 = (std::string **)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = sub_42B518(v3, &v3[*(int *)(a1 + 8)]);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    uint64_t v6 = v5 + 8;
  }
  else {
    uint64_t v6 = 0;
  }
  unint64_t v7 = (unint64_t)result - v6;
  int v8 = *(_DWORD *)(a1 + 8) - (v7 >> 3);
  if (v8 >= 1)
  {
    uint64_t v9 = 8 * (int)((uint64_t)v7 >> 3) + 8;
    uint64_t v10 = *(_DWORD *)(a1 + 8) - (v7 >> 3);
    do
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 16) + v9);
      if (v11) {
        BOOL v12 = *(void *)a1 == 0;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12)
      {
        sub_1114258(v11);
        operator delete();
      }
      v9 += 8;
      --v10;
    }
    while (v10);
    return (std::string **)sub_188CC74(a1, v7 >> 3, v8);
  }
  return result;
}

void sub_427998(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  uint64_t v5 = 0;
  sub_424818(a1, a2, &v5, a3, a4, a5);
}

void sub_4279C8(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  uint64_t v5 = 0;
  sub_426BFC(a1, a2, &v5, a3, a4, a5);
}

void sub_4279F8(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  uint64_t v5 = 0;
  sub_4272A0(a1, a2, &v5, a3, a4, a5);
}

void sub_427A28(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
}

void sub_427A58(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W3>, int a4@<W4>, void *a5@<X8>)
{
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  int v36 = 1065353216;
  char v37 = 0;
  uint64_t v17 = sub_46C7EC((uint64_t)a2);
  unint64_t v18 = v10;
  sub_42A95C(&v17, (uint64_t)&v32, v11);
  sub_470AF8(a2, &v17);
  sub_42B348((void *)v17, v18, (void *)v19, *((unint64_t *)&v19 + 1), (unint64_t *)&v29, *((char **)&v29 + 1));
  *(double *)&long long v28 = (double)(1000000000 - sub_46CABC((uint64_t)a2)) / 1000000000.0;
  *((double *)&v28 + 1) = (double)sub_46CAC4((uint64_t)a2) / 1000000000.0;
  if (*(_DWORD *)(a1 + 1056) >= 0x7FFFFFFFu) {
    int v12 = 0x7FFFFFFF;
  }
  else {
    int v12 = *(_DWORD *)(a1 + 1056);
  }
  sub_424DC4((void *)(a1 + 928), (size_t)&v28, v12, a5);
  if ((a3 & 1) == 0) {
    sub_42B60C((uint64_t)(a5 + 3));
  }
  if (a4)
  {
    uint64_t v21 = 0;
    uint64_t v17 = 0x4039000000000000;
    unint64_t v18 = 5000;
    long long v19 = xmmword_20E7C10;
    long long v20 = xmmword_20E7C20;
    uint64_t v22 = 20000000;
    uint64_t v23 = 0x3FF199999999999ALL;
    uint64_t v24 = 0x3E800002710;
    uint64_t v25 = 0xA00002710;
    long long v26 = xmmword_20E7C00;
    long long v27 = 0x3FE6147AE147AE14uLL;
    sub_1109790((uint64_t)&v17, (uint64_t)a5);
  }
  int v13 = (void *)*((void *)&v34 + 1);
  if (*((void *)&v34 + 1))
  {
    do
    {
      unsigned int v15 = (void *)*v13;
      uint64_t v16 = (void *)v13[3];
      if (v16)
      {
        v13[4] = v16;
        operator delete(v16);
      }
      operator delete(v13);
      int v13 = v15;
    }
    while (v15);
  }
  uint64_t v14 = (void *)*((void *)&v33 + 1);
  *((void *)&v33 + 1) = 0;
  if (v14) {
    operator delete(v14);
  }
  if ((void)v32)
  {
    *((void *)&v32 + 1) = v32;
    operator delete((void *)v32);
  }
  if (*((void *)&v30 + 1))
  {
    *(void *)&long long v31 = *((void *)&v30 + 1);
    operator delete(*((void **)&v30 + 1));
  }
  if ((void)v29)
  {
    *((void *)&v29 + 1) = v29;
    operator delete((void *)v29);
  }
}

void sub_427CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1116458(v17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_427CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_427CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_427CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_427D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_427D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_427D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_427D3C(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
}

void sub_427D6C(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W3>, int a4@<W4>, void *a5@<X8>)
{
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  int v34 = 1065353216;
  char v35 = 0;
  sub_EAE168(a2, &v15);
  sub_42B8F0((void *)v15, v16, (void *)v17, *((unint64_t *)&v17 + 1), (unint64_t *)&v27, *((char **)&v27 + 1));
  *(double *)&long long v26 = (double)(1000000000 - sub_EAE428((uint64_t)a2)) / 1000000000.0;
  *((double *)&v26 + 1) = (double)sub_486A4C((uint64_t)a2) / 1000000000.0;
  if (*(_DWORD *)(a1 + 1056) >= 0x7FFFFFFFu) {
    int v10 = 0x7FFFFFFF;
  }
  else {
    int v10 = *(_DWORD *)(a1 + 1056);
  }
  sub_424DC4((void *)(a1 + 928), (size_t)&v26, v10, a5);
  if ((a3 & 1) == 0) {
    sub_42B7F8((uint64_t)(a5 + 3));
  }
  if (a4)
  {
    uint64_t v19 = 0;
    uint64_t v15 = 0x4039000000000000;
    unint64_t v16 = 5000;
    long long v17 = xmmword_20E7C10;
    long long v18 = xmmword_20E7C20;
    uint64_t v20 = 20000000;
    uint64_t v21 = 0x3FF199999999999ALL;
    uint64_t v22 = 0x3E800002710;
    uint64_t v23 = 0xA00002710;
    long long v24 = xmmword_20E7C00;
    long long v25 = 0x3FE6147AE147AE14uLL;
    sub_1109790((uint64_t)&v15, (uint64_t)a5);
  }
  __n128 v11 = (void *)*((void *)&v32 + 1);
  if (*((void *)&v32 + 1))
  {
    do
    {
      int v13 = (void *)*v11;
      uint64_t v14 = (void *)v11[3];
      if (v14)
      {
        v11[4] = v14;
        operator delete(v14);
      }
      operator delete(v11);
      __n128 v11 = v13;
    }
    while (v13);
  }
  int v12 = (void *)*((void *)&v31 + 1);
  *((void *)&v31 + 1) = 0;
  if (v12) {
    operator delete(v12);
  }
  if ((void)v30)
  {
    *((void *)&v30 + 1) = v30;
    operator delete((void *)v30);
  }
  if (*((void *)&v28 + 1))
  {
    *(void *)&long long v29 = *((void *)&v28 + 1);
    operator delete(*((void **)&v28 + 1));
  }
  if ((void)v27)
  {
    *((void *)&v27 + 1) = v27;
    operator delete((void *)v27);
  }
}

void sub_427F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1116458(v17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_427FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_427FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_427FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_427FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_428008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_42801C(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
}

void sub_42804C(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W3>, int a4@<W4>, void *a5@<X8>)
{
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  int v34 = 1065353216;
  char v35 = 0;
  sub_EB04FC(a2, &v15);
  sub_42BC64((void *)v15, v16, (void *)v17, *((unint64_t *)&v17 + 1), (unint64_t *)&v27, *((char **)&v27 + 1));
  *(double *)&long long v26 = (double)(1000000000 - sub_EAE428((uint64_t)a2)) / 1000000000.0;
  *((double *)&v26 + 1) = (double)sub_486A4C((uint64_t)a2) / 1000000000.0;
  if (*(_DWORD *)(a1 + 1056) >= 0x7FFFFFFFu) {
    int v10 = 0x7FFFFFFF;
  }
  else {
    int v10 = *(_DWORD *)(a1 + 1056);
  }
  sub_424DC4((void *)(a1 + 928), (size_t)&v26, v10, a5);
  if ((a3 & 1) == 0) {
    sub_42BB6C((uint64_t)(a5 + 3));
  }
  if (a4)
  {
    uint64_t v19 = 0;
    uint64_t v15 = 0x4039000000000000;
    unint64_t v16 = 5000;
    long long v17 = xmmword_20E7C10;
    long long v18 = xmmword_20E7C20;
    uint64_t v20 = 20000000;
    uint64_t v21 = 0x3FF199999999999ALL;
    uint64_t v22 = 0x3E800002710;
    uint64_t v23 = 0xA00002710;
    long long v24 = xmmword_20E7C00;
    long long v25 = 0x3FE6147AE147AE14uLL;
    sub_1109790((uint64_t)&v15, (uint64_t)a5);
  }
  __n128 v11 = (void *)*((void *)&v32 + 1);
  if (*((void *)&v32 + 1))
  {
    do
    {
      int v13 = (void *)*v11;
      uint64_t v14 = (void *)v11[3];
      if (v14)
      {
        v11[4] = v14;
        operator delete(v14);
      }
      operator delete(v11);
      __n128 v11 = v13;
    }
    while (v13);
  }
  int v12 = (void *)*((void *)&v31 + 1);
  *((void *)&v31 + 1) = 0;
  if (v12) {
    operator delete(v12);
  }
  if ((void)v30)
  {
    *((void *)&v30 + 1) = v30;
    operator delete((void *)v30);
  }
  if (*((void *)&v28 + 1))
  {
    *(void *)&long long v29 = *((void *)&v28 + 1);
    operator delete(*((void **)&v28 + 1));
  }
  if ((void)v27)
  {
    *((void *)&v27 + 1) = v27;
    operator delete((void *)v27);
  }
}

void sub_428278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1116458(v17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_428298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_4282AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_4282C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_4282D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_4282E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_4282FC(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
}

void sub_42832C(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, int a4@<W4>, void *a5@<X8>)
{
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  int v34 = 1065353216;
  char v35 = 0;
  sub_EB2EE8(a2, &v15);
  sub_42BFD8(v15, v16, v17, *((unint64_t *)&v17 + 1), (unint64_t *)&v27, *((char **)&v27 + 1));
  *(double *)&long long v26 = (double)(1000000000 - sub_EB3214(a2)) / 1000000000.0;
  *((double *)&v26 + 1) = (double)sub_EB3228(a2) / 1000000000.0;
  if (*(_DWORD *)(a1 + 1056) >= 0x7FFFFFFFu) {
    int v10 = 0x7FFFFFFF;
  }
  else {
    int v10 = *(_DWORD *)(a1 + 1056);
  }
  sub_424DC4((void *)(a1 + 928), (size_t)&v26, v10, a5);
  if ((a3 & 1) == 0) {
    sub_42BEE0((uint64_t)(a5 + 3));
  }
  if (a4)
  {
    uint64_t v19 = 0;
    uint64_t v15 = 0x4039000000000000;
    unint64_t v16 = 5000;
    long long v17 = xmmword_20E7C10;
    long long v18 = xmmword_20E7C20;
    uint64_t v20 = 20000000;
    uint64_t v21 = 0x3FF199999999999ALL;
    uint64_t v22 = 0x3E800002710;
    uint64_t v23 = 0xA00002710;
    long long v24 = xmmword_20E7C00;
    long long v25 = 0x3FE6147AE147AE14uLL;
    sub_1109790((uint64_t)&v15, (uint64_t)a5);
  }
  __n128 v11 = (void *)*((void *)&v32 + 1);
  if (*((void *)&v32 + 1))
  {
    do
    {
      int v13 = (void *)*v11;
      uint64_t v14 = (void *)v11[3];
      if (v14)
      {
        v11[4] = v14;
        operator delete(v14);
      }
      operator delete(v11);
      __n128 v11 = v13;
    }
    while (v13);
  }
  int v12 = (void *)*((void *)&v31 + 1);
  *((void *)&v31 + 1) = 0;
  if (v12) {
    operator delete(v12);
  }
  if ((void)v30)
  {
    *((void *)&v30 + 1) = v30;
    operator delete((void *)v30);
  }
  if (*((void *)&v28 + 1))
  {
    *(void *)&long long v29 = *((void *)&v28 + 1);
    operator delete(*((void **)&v28 + 1));
  }
  if ((void)v27)
  {
    *((void *)&v27 + 1) = v27;
    operator delete((void *)v27);
  }
}

void sub_428558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1116458(v17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_428578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_42858C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_4285A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_4285B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_4285C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4106F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_4285DC(void *a1, size_t __sz, unint64_t a3, uint64_t a4, int a5, int a6, unsigned int **a7)
{
  unint64_t v7 = a7;
  uint64_t v8 = a4;
  unint64_t v9 = a3;
  size_t v10 = __sz;
  __n128 v11 = *a7;
  a7[1] = *a7;
  if (a3) {
    goto LABEL_21;
  }
  uint64_t v12 = *(void *)(__sz + 64);
  if (v12 == *(void *)(__sz + 72))
  {
    double v13 = *(double *)__sz;
  }
  else
  {
    double v13 = *(double *)__sz;
    if (!*(void *)v12)
    {
      double v14 = *(double *)(v12 + 8);
      double v15 = vabdd_f64(v14, v13);
      if (v14 == v13 || v15 < 2.22044605e-16) {
        goto LABEL_21;
      }
    }
  }
  unsigned int v17 = llround(v13 * (double)*(int *)(a4 + 4));
  unint64_t v18 = (unint64_t)a7[2];
  if ((unint64_t)v11 >= v18)
  {
    uint64_t v20 = v18 - (void)v11;
    uint64_t v21 = v20 >> 3;
    if ((unint64_t)(v20 >> 3) <= 1) {
      uint64_t v21 = 1;
    }
    BOOL v22 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
    if (!v22) {
      unint64_t v23 = v21;
    }
    if (v23 >> 60) {
      goto LABEL_107;
    }
    uint64_t v24 = 16 * v23;
    long long v25 = (char *)operator new(16 * v23);
    *(_DWORD *)long long v25 = v17;
    v25[4] = 0;
    *((void *)v25 + 1) = -1;
    uint64_t v19 = (unsigned int *)(v25 + 16);
    *unint64_t v7 = (unsigned int *)v25;
    v7[1] = (unsigned int *)(v25 + 16);
    v7[2] = (unsigned int *)&v25[v24];
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *__n128 v11 = v17;
    *((unsigned char *)v11 + 4) = 0;
    *((void *)v11 + 1) = -1;
    uint64_t v19 = v11 + 4;
  }
  v7[1] = v19;
  __n128 v11 = v19;
LABEL_21:
  uint64_t v27 = *(void *)(v10 + 64);
  uint64_t v26 = *(void *)(v10 + 72);
  if (v26 != v27)
  {
    uint64_t v28 = 0;
    size_t v101 = v10;
    while (1)
    {
      unint64_t v30 = *(void *)(v27 + 48 * v28);
      if (v30 < v9) {
        goto LABEL_25;
      }
      if (v30 > v9) {
        goto LABEL_44;
      }
      uint64_t v31 = v27 + 48 * v28;
      unsigned int v32 = llround(*(double *)(v31 + 8) * (double)*(int *)(v8 + 4));
      uint64_t v33 = (char *)(v31 + 40);
      unint64_t v34 = (unint64_t)v7[2];
      if ((unint64_t)v11 >= v34) {
        break;
      }
      char v29 = *v33;
      *__n128 v11 = v32;
      *((unsigned char *)v11 + 4) = v29;
      *((void *)v11 + 1) = v28;
      v11 += 4;
LABEL_24:
      v7[1] = v11;
      uint64_t v27 = *(void *)(v10 + 64);
      uint64_t v26 = *(void *)(v10 + 72);
LABEL_25:
      if (++v28 >= 0xAAAAAAAAAAAAAAABLL * ((v26 - v27) >> 4)) {
        goto LABEL_44;
      }
    }
    unint64_t v35 = v9;
    uint64_t v36 = v8;
    char v37 = *v7;
    uint64_t v38 = ((char *)v11 - (char *)*v7) >> 4;
    unint64_t v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 60) {
      goto LABEL_106;
    }
    uint64_t v40 = v34 - (void)v37;
    if (v40 >> 3 > v39) {
      unint64_t v39 = v40 >> 3;
    }
    BOOL v22 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
    if (!v22) {
      unint64_t v41 = v39;
    }
    if (v41 >> 60) {
      goto LABEL_107;
    }
    uint64_t v42 = 16 * v41;
    unsigned int v43 = (char *)operator new(16 * v41);
    char v44 = *v33;
    uint64_t v45 = &v43[16 * v38];
    *(_DWORD *)uint64_t v45 = v32;
    v45[4] = v44;
    *((void *)v45 + 1) = v28;
    if (v11 == v37)
    {
      uint64_t v8 = v36;
      __n128 v11 = (unsigned int *)(v45 + 16);
      *unint64_t v7 = (unsigned int *)v45;
      v7[1] = (unsigned int *)(v45 + 16);
      v7[2] = (unsigned int *)&v43[v42];
      unint64_t v9 = v35;
      if (!v37) {
        goto LABEL_40;
      }
    }
    else
    {
      double v46 = &v43[16 * v38];
      uint64_t v8 = v36;
      do
      {
        unint64_t v47 = v46 - 16;
        *((_OWORD *)v46 - 1) = *((_OWORD *)v11 - 1);
        v11 -= 4;
        v46 -= 16;
      }
      while (v11 != v37);
      __n128 v11 = (unsigned int *)(v45 + 16);
      *unint64_t v7 = (unsigned int *)v47;
      v7[1] = (unsigned int *)(v45 + 16);
      v7[2] = (unsigned int *)&v43[v42];
      unint64_t v9 = v35;
      if (!v37) {
        goto LABEL_40;
      }
    }
    operator delete(v37);
LABEL_40:
    size_t v10 = v101;
    goto LABEL_24;
  }
  uint64_t v27 = *(void *)(v10 + 72);
LABEL_44:
  uint64_t v48 = *(void *)(v10 + 16);
  unint64_t v49 = ((*(void *)(v10 + 24) - v48) >> 3) - 1;
  if (v49 == v9)
  {
    if (v27 == v26
      || *(void *)(v26 - 48) != v9
      || ((double v50 = *(double *)(v26 - 40), v51 = *(double *)(v10 + 8), v52 = vabdd_f64(v50, v51), v50 != v51)
        ? (BOOL v53 = v52 < 2.22044605e-16)
        : (BOOL v53 = 1),
          !v53))
    {
      unsigned int v54 = llround(*(double *)(v10 + 8) * (double)*(int *)(v8 + 4));
      unint64_t v55 = (unint64_t)v7[2];
      if ((unint64_t)v11 >= v55)
      {
        long long v57 = *v7;
        uint64_t v58 = ((char *)v11 - (char *)*v7) >> 4;
        unint64_t v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 60) {
          goto LABEL_106;
        }
        uint64_t v60 = v55 - (void)v57;
        if (v60 >> 3 > v59) {
          unint64_t v59 = v60 >> 3;
        }
        BOOL v22 = (unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0;
        unint64_t v61 = 0xFFFFFFFFFFFFFFFLL;
        if (!v22) {
          unint64_t v61 = v59;
        }
        if (v61 >> 60) {
          goto LABEL_107;
        }
        uint64_t v62 = (char **)v7;
        uint64_t v63 = 16 * v61;
        long long v64 = (char *)operator new(16 * v61);
        long long v65 = &v64[16 * v58];
        long long v66 = &v64[v63];
        *(_DWORD *)long long v65 = v54;
        v65[4] = 0;
        *((void *)v65 + 1) = -1;
        long long v56 = v65 + 16;
        if (v11 == v57)
        {
          unint64_t v7 = (unsigned int **)v62;
          *uint64_t v62 = v65;
          v62[1] = v56;
          v62[2] = v66;
          if (!v57) {
            goto LABEL_64;
          }
        }
        else
        {
          unint64_t v7 = (unsigned int **)v62;
          do
          {
            long long v67 = v65 - 16;
            *((_OWORD *)v65 - 1) = *((_OWORD *)v11 - 1);
            v11 -= 4;
            v65 -= 16;
          }
          while (v11 != v57);
          *uint64_t v62 = v67;
          v62[1] = v56;
          v62[2] = v66;
          if (!v57) {
            goto LABEL_64;
          }
        }
        operator delete(v57);
      }
      else
      {
        *__n128 v11 = v54;
        *((unsigned char *)v11 + 4) = 0;
        *((void *)v11 + 1) = -1;
        long long v56 = (char *)(v11 + 4);
      }
LABEL_64:
      v7[1] = (unsigned int *)v56;
      uint64_t v48 = *(void *)(v10 + 16);
      unint64_t v49 = ((*(void *)(v10 + 24) - v48) >> 3) - 1;
    }
  }
  if (v49 > v9)
  {
    unint64_t v68 = (*(uint64_t (**)(void, unint64_t))(*(void *)*a1 + 8))(*a1, v48 + 8 * v9);
    if (*(_DWORD *)(v48 + 8 * (v9 + 1)) == v68)
    {
      uint64_t v69 = v48 + 8 * (v9 + 1);
      if (*(unsigned __int16 *)(v69 + 4) == WORD2(v68) && (HIWORD(v68) & 1) != (*(unsigned char *)(v69 + 6) == 0))
      {
        long long v71 = (char *)*v7;
        long long v70 = (char *)v7[1];
        if (*v7 == (unsigned int *)v70 || !*(v70 - 12))
        {
          int v72 = *(_DWORD *)(v8 + 4);
          unint64_t v73 = (unint64_t)v7[2];
          if ((unint64_t)v70 >= v73)
          {
            uint64_t v76 = (v70 - v71) >> 4;
            unint64_t v77 = v76 + 1;
            if ((unint64_t)(v76 + 1) >> 60) {
              goto LABEL_106;
            }
            uint64_t v78 = v73 - (void)v71;
            if (v78 >> 3 > v77) {
              unint64_t v77 = v78 >> 3;
            }
            BOOL v22 = (unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0;
            unint64_t v79 = 0xFFFFFFFFFFFFFFFLL;
            if (!v22) {
              unint64_t v79 = v77;
            }
            if (v79 >> 60) {
              goto LABEL_107;
            }
            size_t v74 = v10;
            uint64_t v80 = 16 * v79;
            uint64_t v81 = (char *)operator new(16 * v79);
            unint64_t v82 = &v81[16 * v76];
            *(_DWORD *)unint64_t v82 = v72;
            v82[4] = 1;
            *((void *)v82 + 1) = -1;
            uint64_t v75 = v82 + 16;
            if (v71 == v70)
            {
              unint64_t v83 = &v81[16 * v76];
            }
            else
            {
              do
              {
                unint64_t v83 = v82 - 16;
                *((_OWORD *)v82 - 1) = *((_OWORD *)v70 - 1);
                v70 -= 16;
                v82 -= 16;
              }
              while (v70 != v71);
            }
            *unint64_t v7 = (unsigned int *)v83;
            v7[1] = (unsigned int *)v75;
            v7[2] = (unsigned int *)&v81[v80];
            if (v71) {
              operator delete(v71);
            }
          }
          else
          {
            size_t v74 = v10;
            *(_DWORD *)long long v70 = v72;
            v70[4] = 1;
            *((void *)v70 + 1) = -1;
            uint64_t v75 = v70 + 16;
          }
          v7[1] = (unsigned int *)v75;
          size_t v10 = v74;
        }
      }
    }
  }
  if (*v7 == v7[1] && sub_429258(a1, (void *)v10, v9, a6))
  {
    unsigned int v84 = llround((double)(*(_DWORD *)(v8 + 4) + a5) * 0.5);
    unint64_t v86 = v7[1];
    unint64_t v85 = (unint64_t)v7[2];
    if ((unint64_t)v86 < v85)
    {
      *unint64_t v86 = v84;
      *((unsigned char *)v86 + 4) = 0;
      *((void *)v86 + 1) = -1;
      unint64_t v87 = (char *)(v86 + 4);
      goto LABEL_102;
    }
    uint64_t v88 = *v7;
    uint64_t v89 = ((char *)v86 - (char *)*v7) >> 4;
    unint64_t v90 = v89 + 1;
    if (!((unint64_t)(v89 + 1) >> 60))
    {
      uint64_t v91 = v85 - (void)v88;
      if (v91 >> 3 > v90) {
        unint64_t v90 = v91 >> 3;
      }
      BOOL v22 = (unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0;
      unint64_t v92 = 0xFFFFFFFFFFFFFFFLL;
      if (!v22) {
        unint64_t v92 = v90;
      }
      if (!(v92 >> 60))
      {
        uint64_t v93 = 16 * v92;
        BOOL v94 = (char *)operator new(16 * v92);
        long long v95 = &v94[16 * v89];
        uint64_t v96 = &v94[v93];
        *(_DWORD *)long long v95 = v84;
        v95[4] = 0;
        *((void *)v95 + 1) = -1;
        unint64_t v87 = v95 + 16;
        if (v86 == v88)
        {
          *unint64_t v7 = (unsigned int *)v95;
          v7[1] = (unsigned int *)v87;
          v7[2] = (unsigned int *)v96;
          if (!v88) {
            goto LABEL_102;
          }
        }
        else
        {
          do
          {
            unint64_t v97 = v95 - 16;
            *((_OWORD *)v95 - 1) = *((_OWORD *)v86 - 1);
            v86 -= 4;
            v95 -= 16;
          }
          while (v86 != v88);
          *unint64_t v7 = (unsigned int *)v97;
          v7[1] = (unsigned int *)v87;
          v7[2] = (unsigned int *)v96;
          if (!v88) {
            goto LABEL_102;
          }
        }
        operator delete(v88);
LABEL_102:
        v7[1] = (unsigned int *)v87;
        return;
      }
LABEL_107:
      sub_188D718();
    }
LABEL_106:
    sub_2E00();
  }
}

void sub_428CAC(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X3>, unint64_t a5@<X4>, _DWORD *a6@<X5>, unsigned __int16 a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, unsigned __int16 *a10)
{
  double v19 = sub_1113FA8(a9, 0, 0);
  *(_DWORD *)(a9 + 16) |= 0x800u;
  *(_DWORD *)(a9 + 84) = 1;
  uint64_t v20 = (*(uint64_t (**)(void, unint64_t, double))(*(void *)*a1 + 16))(*a1, a4[2] + 8 * a5, v19);
  int v22 = *(_DWORD *)(a9 + 16);
  if (v23)
  {
    v22 |= 8u;
    *(_DWORD *)(a9 + 16) = v22;
    *(void *)(a9 + 48) = v20;
  }
  int v24 = a10[1];
  *(_DWORD *)(a9 + 64) = *a10;
  *(_DWORD *)(a9 + 68) = v24;
  int v25 = v22 | 0x1C0;
  *(_DWORD *)(a9 + 16) = v22 | 0x1C0;
  *(_DWORD *)(a9 + 72) = a8;
  if ((a2 & 0x100000000) != 0)
  {
    int v25 = v22 | 0x3C0;
    *(_DWORD *)(a9 + 16) = v22 | 0x3C0;
    *(unsigned char *)(a9 + 76) = 1;
  }
  *(_DWORD *)(a9 + 16) = v25 | 2;
  uint64_t v26 = *(_DWORD **)(a9 + 32);
  if (!v26)
  {
    uint64_t v27 = *(void *)(a9 + 8);
    uint64_t v28 = (void *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
    if (v27) {
      uint64_t v28 = (void *)*v28;
    }
    uint64_t v26 = sub_1116F58((uint64_t)v28);
    *(void *)(a9 + 32) = v26;
  }
  LODWORD(v21) = a6[1];
  long double v29 = (double)v21 * -6.28318531 / 4294967300.0 + 3.14159265;
  double v30 = exp(v29);
  long double v31 = exp(-v29);
  double v32 = atan((v30 - v31) * 0.5) * 57.2957795 * 10000000.0;
  int v33 = v26[4];
  v26[4] = v33 | 1;
  v26[6] = llround(v32);
  LODWORD(v32) = *a6;
  v26[4] = v33 | 3;
  v26[7] = llround(((double)*(unint64_t *)&v32 * 360.0 / 4294967300.0 + -180.0) * 10000000.0);
  int v34 = *(_DWORD *)(a9 + 16);
  int v35 = v34 | 0x20;
  *(_DWORD *)(a9 + 16) = v34 | 0x20;
  *(_DWORD *)(a9 + 60) = a7;
  int v36 = a6[2];
  if (v36 != 0x7FFFFFFF)
  {
    int v35 = v34 | 0x30;
    *(_DWORD *)(a9 + 16) = v34 | 0x30;
    *(_DWORD *)(a9 + 56) = v36;
  }
  uint64_t v37 = *((unsigned __int8 *)a10 + 63);
  if ((v37 & 0x80u) != 0) {
    uint64_t v37 = *((void *)a10 + 6);
  }
  if (v37)
  {
    *(_DWORD *)(a9 + 16) = v35 | 1;
    uint64_t v38 = *(void *)(a9 + 8);
    unint64_t v39 = (uint64_t *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
    if (v38) {
      unint64_t v39 = (uint64_t *)*v39;
    }
    sub_1881DF4((std::string **)(a9 + 24), (long long *)(a10 + 20), v39);
  }
  uint64_t v40 = a4[8];
  if (a3 < 0xAAAAAAAAAAAAAAABLL * ((a4[9] - v40) >> 4))
  {
    *(_DWORD *)(a9 + 16) |= 4u;
    unint64_t v41 = *(void **)(a9 + 40);
    if (!v41)
    {
      uint64_t v42 = *(void *)(a9 + 8);
      unsigned int v43 = (void *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
      if (v42) {
        unsigned int v43 = (void *)*v43;
      }
      unint64_t v41 = sub_1116FD0((uint64_t)v43);
      *(void *)(a9 + 40) = v41;
    }
    char v44 = (unsigned __int8 *)(v40 + 48 * a3 + 16);
    if (sub_51D60(v44))
    {
      uint64_t v45 = sub_52060((uint64_t)v44);
      *((_DWORD *)v41 + 4) |= 2u;
      v41[4] = v45;
      uint64_t v46 = sub_52058((uint64_t)v44);
      *((_DWORD *)v41 + 4) |= 1u;
      v41[3] = v46;
    }
    else if (sub_110D384())
    {
      sub_6BAC((uint64_t)v55);
      sub_188FC78(v55, (uint64_t)"Skip encoding the UUID for anchor ", 34);
      unint64_t v47 = (void *)std::ostream::operator<<();
      sub_188FC78(v47, (uint64_t)" because it is invalid.", 23);
      BOOL v53 = operator new(0x88uLL);
      long long v54 = xmmword_20E7B30;
      strcpy((char *)v53, "/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/submodules/path-codec/src/path-codec/PathEncoder.cpp");
      std::stringbuf::str();
      sub_110D398((uint64_t)&v53, 278, (uint64_t)&__p);
      if (v52 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v54) < 0) {
        operator delete(v53);
      }
      if (v56 < 0) {
        operator delete((void *)v55[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
  uint64_t v48 = a4[5];
  if (a4[6] - v48 <= a5 || (unsigned int v49 = *(unsigned __int8 *)(v48 + a5) - 1, v49 > 2)) {
    int v50 = 0;
  }
  else {
    int v50 = v49 + 1;
  }
  *(_DWORD *)(a9 + 16) |= 0x400u;
  *(_DWORD *)(a9 + 80) = v50;
}

void sub_4291A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    sub_111ECAC((uint64_t)&a22);
    sub_1114258(v22);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a22);
  sub_1114258(v22);
  _Unwind_Resume(a1);
}

void sub_42921C(_Unwind_Exception *a1)
{
  sub_1114258(v1);
  _Unwind_Resume(a1);
}

void sub_429230(_Unwind_Exception *a1)
{
  sub_1114258(v1);
  _Unwind_Resume(a1);
}

void sub_429244(_Unwind_Exception *a1)
{
  sub_1114258(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_429258(void *a1, void *a2, unint64_t a3, int a4)
{
  if (*((_DWORD *)a1 + 16) <= a4) {
    return 1;
  }
  unint64_t v7 = a3 - 1;
  uint64_t v8 = *(void *)(a2[2] + 8 * (a3 - 1));
  uint64_t v27 = 0;
  uint64_t v28 = v8;
  long long __p = 0;
  uint64_t v26 = 0;
  (*(void (**)(void, uint64_t *, void **))(*(void *)*a1 + 72))(*a1, &v28, &__p);
  unint64_t v9 = *(void *)(a2[2] + 8 * a3);
  unint64_t v10 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a1 + 8))(*a1, &v28);
  BOOL v11 = v10 == v9 && WORD2(v10) == WORD2(v9);
  if (v11 && (HIWORD(v9) & 1) != ((v10 & 0xFF000000000000) == 0))
  {
    uint64_t v12 = 1;
    double v13 = (uint64_t *)__p;
    goto LABEL_35;
  }
  double v15 = (uint64_t *)__p;
  double v14 = v26;
  if (__p == v26)
  {
LABEL_26:
    uint64_t v18 = a2[5];
    unint64_t v19 = a2[6] - v18;
    if (v19 <= v7) {
      goto LABEL_31;
    }
LABEL_27:
    int v20 = *(unsigned __int8 *)(v18 + v7);
    if (v19 > a3) {
      goto LABEL_32;
    }
LABEL_28:
    double v13 = (uint64_t *)__p;
    if (!v20) {
      goto LABEL_33;
    }
    goto LABEL_29;
  }
  while (__PAIR64__(*((unsigned __int16 *)v15 + 2), *(_DWORD *)v15) != __PAIR64__(WORD2(v10), v10)
       || (HIWORD(v10) & 1) == (*((unsigned char *)v15 + 6) == 0))
  {
    if (++v15 == v26) {
      goto LABEL_30;
    }
  }
  if (v15 != v26)
  {
    unint64_t v16 = v15 + 1;
    if (v15 + 1 != v26)
    {
      do
      {
        if (__PAIR64__(*((unsigned __int16 *)v16 + 2), *(_DWORD *)v16) != __PAIR64__(WORD2(v10), v10)
          || (HIWORD(v10) & 1) == (*((unsigned char *)v16 + 6) == 0))
        {
          int v17 = *(_DWORD *)v16;
          *(_DWORD *)((char *)v15 + 3) = *(_DWORD *)((char *)v16 + 3);
          *(_DWORD *)v15++ = v17;
        }
        ++v16;
      }
      while (v16 != v14);
      double v14 = v26;
    }
  }
  if (v15 != v14)
  {
    uint64_t v26 = v15;
    goto LABEL_26;
  }
LABEL_30:
  double v15 = v14;
  uint64_t v18 = a2[5];
  unint64_t v19 = a2[6] - v18;
  if (v19 > v7) {
    goto LABEL_27;
  }
LABEL_31:
  int v20 = 0;
  if (v19 <= a3) {
    goto LABEL_28;
  }
LABEL_32:
  double v13 = (uint64_t *)__p;
  if (v20 == *(unsigned __int8 *)(v18 + a3))
  {
LABEL_33:
    if ((char *)v15 - (char *)v13 == 8)
    {
      uint64_t v12 = 0;
    }
    else
    {
      __int16 v24 = (*(uint64_t (**)(void, uint64_t *))(*(void *)*a1 + 56))(*a1, &v28);
      v29[0] = a1;
      v29[1] = &v24;
      uint64_t v22 = sub_42C29C((uint64_t *)__p, v26, v29);
      double v13 = (uint64_t *)__p;
      uint64_t v12 = 1;
      uint64_t v23 = (char *)v22 - (unsigned char *)__p;
      if (v23 && v23 <= 8 && __PAIR64__(*((unsigned __int16 *)__p + 2), *(_DWORD *)__p) == __PAIR64__(WORD2(v9), v9)) {
        uint64_t v12 = ((v9 & 0x1000000000000) == 0) ^ (*((unsigned char *)__p + 6) == 0);
      }
    }
    goto LABEL_35;
  }
LABEL_29:
  uint64_t v12 = 1;
LABEL_35:
  if (v13)
  {
    uint64_t v26 = v13;
    operator delete(v13);
  }
  return v12;
}

void sub_429558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_429580(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 12;
  uint64_t v8 = &(*a1)[12 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v6) >> 2) + 1;
    if (v14 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v6) >> 2);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x1555555555555555;
    }
    else {
      unint64_t v16 = v14;
    }
    int v35 = a1 + 2;
    if (v16)
    {
      if (v16 > 0x1555555555555555) {
        sub_188D718();
      }
      int v17 = (char *)operator new(12 * v16);
    }
    else
    {
      int v17 = 0;
    }
    uint64_t v31 = (uint64_t)v17;
    double v32 = &v17[12 * v7];
    __dst = v32;
    int v34 = &v17[12 * v16];
    sub_32D80((uint64_t)&v31, (uint64_t *)a3);
    unint64_t v19 = v32;
    int v20 = *a1;
    unint64_t v21 = v32;
    if (*a1 != v8)
    {
      uint64_t v22 = v8;
      unint64_t v21 = v32;
      do
      {
        uint64_t v23 = *(void *)(v22 - 12);
        v22 -= 12;
        int v24 = *((_DWORD *)v22 + 2);
        *(void *)(v21 - 12) = v23;
        v21 -= 12;
        *((_DWORD *)v21 + 2) = v24;
      }
      while (v22 != v20);
    }
    double v32 = v21;
    int v25 = a1[1];
    uint64_t v26 = (char *)__dst;
    int64_t v27 = v25 - v8;
    if (v25 != v8)
    {
      memmove(__dst, v8, v25 - v8);
      unint64_t v21 = v32;
      uint64_t v8 = a1[1];
    }
    uint64_t v28 = *a1;
    *a1 = v21;
    a1[1] = &v26[v27];
    long double v29 = a1[2];
    a1[2] = v34;
    __dst = v8;
    int v34 = v29;
    uint64_t v31 = (uint64_t)v28;
    double v32 = v28;
    if (v8 != v28) {
      __dst = &v28[(v8 - v28 - 12) % 0xCuLL];
    }
    if (v28) {
      operator delete(v28);
    }
    return v19;
  }
  else if (v8 == (char *)v5)
  {
    uint64_t v18 = *(void *)a3;
    *((_DWORD *)v8 + 2) = *(_DWORD *)(a3 + 8);
    *(void *)uint64_t v8 = v18;
    a1[1] = v8 + 12;
  }
  else
  {
    uint64_t v31 = *(void *)a3;
    LODWORD(v32) = *(_DWORD *)(a3 + 8);
    unint64_t v10 = v8 + 12;
    unint64_t v11 = v5 - 12;
    unint64_t v12 = v5;
    if (v5 >= 0xC)
    {
      do
      {
        uint64_t v13 = *(void *)v11;
        *(_DWORD *)(v12 + 8) = *(_DWORD *)(v11 + 8);
        *(void *)unint64_t v12 = v13;
        v12 += 12;
        v11 += 12;
      }
      while (v11 < v5);
    }
    a1[1] = (char *)v12;
    if ((_DWORD *)v5 != v10) {
      memmove(v8 + 12, v8, v5 - (void)v10);
    }
    *(void *)uint64_t v8 = v31;
    *((_DWORD *)v8 + 2) = v32;
  }
  return v8;
}

void sub_429814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  if (a11 == a10)
  {
    unint64_t v12 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v12 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v12);
  _Unwind_Resume(exception_object);
}

double sub_429870(_DWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  LODWORD(a5) = *a1;
  LODWORD(a7) = a1[1];
  double v8 = (double)*(unint64_t *)&a5;
  double v9 = (double)*(unint64_t *)&a7;
  LODWORD(a7) = *a2;
  LODWORD(a8) = a2[1];
  double v10 = (double)*(unint64_t *)&a8;
  double v11 = (double)*(unint64_t *)&a7 - v8;
  double v12 = v10 - v9;
  double v13 = v11 * v11 + v12 * v12;
  double v14 = fabs(v13);
  HIDWORD(v15) = 1018167296;
  if (v13 == 0.0 || v14 < 2.22044605e-16) {
    goto LABEL_6;
  }
  LODWORD(v14) = *a3;
  LODWORD(v15) = a3[1];
  double v19 = (v11 * ((double)*(unint64_t *)&v14 - v8) + v12 * ((double)v15 - v9)) / v13;
  if (v19 <= 0.0)
  {
    uint64_t v17 = *(void *)a1;
    int v18 = a1[2];
    goto LABEL_13;
  }
  if (v19 >= 1.0)
  {
LABEL_6:
    uint64_t v17 = *(void *)a2;
    int v18 = a2[2];
LABEL_13:
    *(_DWORD *)(a4 + 8) = v18;
    *(void *)a4 = v17;
    goto LABEL_14;
  }
  *(_DWORD *)a4 = llround(v11 * v19 + v8);
  *(_DWORD *)(a4 + 4) = llround(v12 * v19 + v9);
  int v20 = a1[2];
  if (v20 != 0x7FFFFFFF)
  {
    int v21 = a2[2];
    if (v21 != 0x7FFFFFFF) {
      *(_DWORD *)(a4 + 8) = (int)(v19 * (double)(v21 - v20) + (double)v20);
    }
  }
LABEL_14:
  v22.i64[0] = *(void *)a3;
  v22.i64[1] = HIDWORD(*(void *)a3);
  float64x2_t v23 = vcvtq_f64_u64(v22);
  v22.i64[0] = *(void *)a4;
  v22.i64[1] = HIDWORD(*(void *)a4);
  float64x2_t v24 = vdivq_f64(vsubq_f64(v23, vcvtq_f64_u64(v22)), (float64x2_t)vdupq_n_s64(0x4059000000000000uLL));
  int v25 = a3[2];
  if (v25 == 0x7FFFFFFF) {
    return vaddvq_f64(vmulq_f64(v24, v24));
  }
  int v26 = *(_DWORD *)(a4 + 8);
  if (v26 == 0x7FFFFFFF) {
    return vaddvq_f64(vmulq_f64(v24, v24));
  }
  int v28 = v25 - v26;
  if (v28 < 0) {
    int v28 = -v28;
  }
  return vaddvq_f64(vmulq_f64(v24, v24)) + (double)v28 / 100.0 * ((double)v28 / 100.0);
}

void sub_4299E0()
{
}

uint64_t sub_4299F4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_723EC(2u);
  if (result)
  {
    sub_6BAC((uint64_t)v9);
    int v4 = *(char *)(a2 + 23);
    if (v4 >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = *(void *)a2;
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    sub_188FC78(v9, v5, v6);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v8 < 0) {
      operator delete(__p);
    }
    if (v10 < 0) {
      operator delete((void *)v9[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_429B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_429BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_42A5C0(a2, a3, a4);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 16))(a1, &__p);
  if (v6 < 0) {
    operator delete(__p);
  }
}

void sub_429C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_429C50(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_723EC(2u);
  if (result)
  {
    sub_6BAC((uint64_t)v9);
    int v4 = *(char *)(a2 + 23);
    if (v4 >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = *(void *)a2;
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    sub_188FC78(v9, v5, v6);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v8 < 0) {
      operator delete(__p);
    }
    if (v10 < 0) {
      operator delete((void *)v9[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_429DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_429E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_42A5C0(a2, a3, a4);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 32))(a1, &__p);
  if (v6 < 0) {
    operator delete(__p);
  }
}

void sub_429E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_429EAC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_723EC(1u);
  if (result)
  {
    sub_6BAC((uint64_t)v9);
    int v4 = *(char *)(a2 + 23);
    if (v4 >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = *(void *)a2;
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    sub_188FC78(v9, v5, v6);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v8 < 0) {
      operator delete(__p);
    }
    if (v10 < 0) {
      operator delete((void *)v9[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_42A018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_42A064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_42A5C0(a2, a3, a4);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 48))(a1, &__p);
  if (v6 < 0) {
    operator delete(__p);
  }
}

void sub_42A0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_42A108(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_723EC(1u);
  if (result)
  {
    sub_6BAC((uint64_t)v9);
    int v4 = *(char *)(a2 + 23);
    if (v4 >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = *(void *)a2;
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    sub_188FC78(v9, v5, v6);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v8 < 0) {
      operator delete(__p);
    }
    if (v10 < 0) {
      operator delete((void *)v9[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_42A274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_42A2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_42A5C0(a2, a3, a4);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 64))(a1, &__p);
  if (v6 < 0) {
    operator delete(__p);
  }
}

void sub_42A348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_42A364(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)v9);
    int v4 = *(char *)(a2 + 23);
    if (v4 >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = *(void *)a2;
    }
    if (v4 >= 0) {
      uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    sub_188FC78(v9, v5, v6);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v8 < 0) {
      operator delete(__p);
    }
    if (v10 < 0) {
      operator delete((void *)v9[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_42A4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_42A51C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_42A5C0(a2, a3, a4);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 80))(a1, &__p);
  if (v6 < 0) {
    operator delete(__p);
  }
}

void sub_42A5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_42A5C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_6BAC((uint64_t)v15);
  int v5 = *(char *)(a1 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)a1;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  char v8 = sub_188FC78(v15, v6, v7);
  sub_188FC78(v8, (uint64_t)":", 1);
  double v9 = (void *)std::ostream::operator<<();
  char v10 = sub_188FC78(v9, (uint64_t)" | ", 3);
  int v11 = *(char *)(a3 + 23);
  if (v11 >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = *(void *)a3;
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a3 + 8);
  }
  sub_188FC78(v10, v12, v13);
  std::stringbuf::str();
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_42A75C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_42A770(uint64_t a1, uint64_t a2, int **a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 64))(a1);
  uint64_t result = sub_42A7FC(*a3, a3[1], a1);
  if (a3[1] != result) {
    a3[1] = result;
  }
  return result;
}

int *sub_42A7FC(int *a1, int *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a2;
  }
  int v5 = a1;
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, int *, void))(*(void *)a3 + 32))(&v13, a3, v5, 0);
    int v6 = v16;
    if ((v18 & 0x80000000) == 0)
    {
      uint64_t v7 = __p;
      if (!__p) {
        goto LABEL_6;
      }
LABEL_5:
      unint64_t v15 = v7;
      operator delete(v7);
      goto LABEL_6;
    }
    operator delete(v17);
    uint64_t v7 = __p;
    if (__p) {
      goto LABEL_5;
    }
LABEL_6:
    if (!v6) {
      break;
    }
    v5 += 2;
    if (v5 == a2) {
      return a2;
    }
  }
  if (v5 != a2)
  {
    for (uint64_t i = v5 + 2; ; i += 2)
    {
      if (i == a2) {
        return v5;
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t, int *, void))(*(void *)a3 + 32))(&v13, a3, i, 0);
      int v9 = v16;
      if ((v18 & 0x80000000) == 0) {
        break;
      }
      operator delete(v17);
      char v10 = __p;
      if (__p) {
        goto LABEL_17;
      }
LABEL_18:
      if (v9)
      {
        int v11 = *i;
        *(int *)((char *)v5 + 3) = *(int *)((char *)i + 3);
        *int v5 = v11;
        v5 += 2;
      }
    }
    char v10 = __p;
    if (!__p) {
      goto LABEL_18;
    }
LABEL_17:
    unint64_t v15 = v10;
    operator delete(v10);
    goto LABEL_18;
  }
  return a2;
}

void sub_42A95C(uint64_t *a1, uint64_t a2, __n128 a3)
{
  int v5 = *(__n128 **)a2;
  int v6 = *(__n128 **)(a2 + 8);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(void *)a2) >> 4);
  uint64_t v8 = a1[1];
  unint64_t v9 = v7 + v8;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)a2) >> 4) < v7 + v8)
  {
    if (v9 >= 0x555555555555556) {
      sub_2E00();
    }
    uint64_t v10 = 48 * v9;
    int v11 = (char *)operator new(48 * v9);
    uint64_t v12 = &v11[48 * v7];
    if (v6 != v5)
    {
      uint64_t v13 = (__n128 *)&v11[48 * v7];
      do
      {
        uint64_t v12 = (char *)&v13[-3];
        a3 = v6[-3];
        __n128 v14 = v6[-1];
        v13[-2] = v6[-2];
        v13[-1] = v14;
        v13[-3] = a3;
        v6 -= 3;
        v13 -= 3;
      }
      while (v6 != v5);
    }
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = &v11[48 * v7];
    *(void *)(a2 + 16) = &v11[v10];
    if (v5)
    {
      operator delete(v5);
      uint64_t v8 = a1[1];
    }
  }
  if (v8)
  {
    uint64_t v15 = *a1;
    uint64_t v16 = *a1 + 48 * v8;
    uint64_t v17 = *(__n128 **)(a2 + 8);
    do
    {
      v19.n128_u64[0] = *(void *)v15;
      a3.n128_u32[0] = *(_DWORD *)(v15 + 8);
      v19.n128_f64[1] = (double)a3.n128_u64[0] / 1000000000.0;
      char v20 = sub_51D60((unsigned __int8 *)(v15 + 16));
      uint64_t v21 = sub_51D68(v15 + 16);
      uint64_t v22 = v18;
      char v23 = *(unsigned char *)(v15 + 40);
      uint64_t v17 = sub_42AADC((__n128 **)a2, (uint64_t)v17, &v19) + 3;
      v15 += 48;
    }
    while (v15 != v16);
  }
}

__n128 *sub_42AADC(__n128 **a1, uint64_t a2, __n128 *a3)
{
  int v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 48;
  uint64_t v8 = &(*a1)[3 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v21 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v5) >> 4);
    if (2 * v22 > v21) {
      unint64_t v21 = 2 * v22;
    }
    if (v22 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v23 = 0x555555555555555;
    }
    else {
      unint64_t v23 = v21;
    }
    uint64_t v45 = a1 + 2;
    if (v23)
    {
      if (v23 > 0x555555555555555) {
        sub_188D718();
      }
      float64x2_t v24 = (__n128 *)operator new(48 * v23);
    }
    else
    {
      float64x2_t v24 = 0;
    }
    unint64_t v41 = v24;
    uint64_t v42 = &v24[3 * v7];
    unsigned int v43 = v42;
    char v44 = (char *)&v24[3 * v23];
    sub_42AE1C((uint64_t)&v41, a3);
    int64_t v27 = v42;
    int v28 = *a1;
    long double v29 = v42;
    if (*a1 != v8)
    {
      double v30 = v8;
      uint64_t v31 = v42;
      do
      {
        long double v29 = v31 - 3;
        __n128 v32 = v30[-3];
        __n128 v33 = v30[-1];
        v31[-2] = v30[-2];
        v31[-1] = v33;
        v31[-3] = v32;
        v30 -= 3;
        v31 -= 3;
      }
      while (v30 != v28);
    }
    int v34 = a1[1];
    int v35 = v43;
    if (v34 != v8)
    {
      do
      {
        __n128 v36 = *v8;
        __n128 v37 = v8[2];
        v35[1] = v8[1];
        v35[2] = v37;
        __n128 *v35 = v36;
        v35 += 3;
        v8 += 3;
      }
      while (v8 != v34);
      uint64_t v8 = a1[1];
    }
    uint64_t v38 = *a1;
    *a1 = v29;
    a1[1] = v35;
    unint64_t v39 = (char *)a1[2];
    a1[2] = (__n128 *)v44;
    unsigned int v43 = v8;
    char v44 = v39;
    unint64_t v41 = v38;
    uint64_t v42 = v38;
    if (v8 != v38) {
      unsigned int v43 = (__n128 *)((char *)v38 + ((char *)v8 - (char *)v38 - 48) % 0x30uLL);
    }
    if (v38) {
      operator delete(v38);
    }
    return v27;
  }
  else if (v8 == (__n128 *)v6)
  {
    __n128 v25 = *a3;
    __n128 v26 = a3[2];
    v8[1] = a3[1];
    v8[2] = v26;
    *uint64_t v8 = v25;
    a1[1] = v8 + 3;
  }
  else
  {
    uint64_t v10 = v8 + 3;
    int v11 = (long long *)(v6 - 48);
    uint64_t v12 = a1[1];
    if (v6 >= 0x30)
    {
      do
      {
        long long v13 = *v11;
        long long v14 = v11[2];
        v12[1] = (__n128)v11[1];
        v12[2] = (__n128)v14;
        *uint64_t v12 = (__n128)v13;
        v12 += 3;
        v11 += 3;
      }
      while ((unint64_t)v11 < v6);
    }
    a1[1] = v12;
    if ((__n128 *)v6 != v10)
    {
      unint64_t v15 = 0;
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v10) >> 4);
      uint64_t v17 = &v5[3 * v7 + ((uint64_t)(v6 - (void)v10) >> 4)];
      uint64_t v18 = -48 * v16;
      do
      {
        unint64_t v19 = v6 + v15;
        *(__n128 *)(v19 - 48) = v17[v15 / 0x10 - 3];
        *(unsigned char *)(v19 - 32) = v17[v15 / 0x10 - 2].n128_u8[0];
        *(void *)(v19 - 24) = *((void *)&v17[v15 / 0x10 - 1] - 1);
        *(void *)(v19 - 16) = v17[v15 / 0x10 - 1].n128_u64[0];
        *(unsigned char *)(v19 - 8) = v17[v15 / 0x10 - 1].n128_u8[8];
        v15 -= 48;
      }
      while (v18 != v15);
    }
    *uint64_t v8 = *a3;
    char v20 = &v5[3 * v7];
    v20[1].n128_u8[0] = a3[1].n128_u8[0];
    v20[1].n128_u64[1] = a3[1].n128_u64[1];
    v20[2].n128_u64[0] = a3[2].n128_u64[0];
    v20[2].n128_u8[8] = a3[2].n128_u8[8];
  }
  return v8;
}

void sub_42ADC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    long long v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_42AE1C(uint64_t a1, __n128 *a2)
{
  int v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    int v5 = *(__n128 **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    if (v6 <= *(void *)a1)
    {
      unint64_t v14 = 0x5555555555555556 * (v4 - v5);
      if (v4 == v5) {
        unint64_t v14 = 1;
      }
      if (v14 >= 0x555555555555556) {
        sub_188D718();
      }
      unint64_t v15 = v14 >> 2;
      uint64_t v16 = 48 * v14;
      uint64_t v17 = (char *)operator new(48 * v14);
      uint64_t v18 = (__n128 *)&v17[48 * v15];
      uint64_t v20 = (uint64_t)v4 - v6;
      BOOL v19 = v4 == (__n128 *)v6;
      int v4 = v18;
      if (!v19)
      {
        uint64_t v21 = v20 / 48;
        int v4 = &v18[3 * v21];
        uint64_t v22 = 48 * v21;
        unint64_t v23 = &v17[48 * v15];
        do
        {
          __n128 v24 = *(__n128 *)v6;
          long long v25 = *(_OWORD *)(v6 + 32);
          *((_OWORD *)v23 + 1) = *(_OWORD *)(v6 + 16);
          *((_OWORD *)v23 + 2) = v25;
          *(__n128 *)unint64_t v23 = v24;
          v23 += 48;
          v6 += 48;
          v22 -= 48;
        }
        while (v22);
      }
      *(void *)a1 = v17;
      *(void *)(a1 + 8) = v18;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v17[v16];
      if (v5)
      {
        operator delete(v5);
        int v4 = *(__n128 **)(a1 + 16);
      }
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(void *)a1) >> 4);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -(v8 >> 1);
      if ((__n128 *)v6 == v4)
      {
        long long v13 = (__n128 *)(v6 - 48 * v9);
      }
      else
      {
        do
        {
          unint64_t v11 = v6 + 48 * v10;
          *(_OWORD *)unint64_t v11 = *(_OWORD *)v6;
          *(unsigned char *)(v11 + 16) = *(unsigned char *)(v6 + 16);
          uint64_t v12 = *(void *)(v6 + 32);
          *(void *)(v11 + 24) = *(void *)(v6 + 24);
          *(void *)(v11 + 32) = v12;
          *(unsigned char *)(v11 + 40) = *(unsigned char *)(v6 + 40);
          v6 += 48;
        }
        while ((__n128 *)v6 != v4);
        int v4 = *(__n128 **)(a1 + 8);
        long long v13 = (__n128 *)(v6 + 48 * v10);
      }
      *(void *)(a1 + 8) = &v4[3 * v10];
      *(void *)(a1 + 16) = v13;
      int v4 = v13;
    }
  }
  __n128 result = *a2;
  __n128 v27 = a2[2];
  v4[1] = a2[1];
  v4[2] = v27;
  *int v4 = result;
  *(void *)(a1 + 16) += 48;
  return result;
}

unint64_t *sub_42AFD8(void *a1, unint64_t a2, void *a3, unint64_t a4, unint64_t *a5, char *a6)
{
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v12 = sub_46C760(a1);
        unint64_t v13 = sub_46C760(a3);
        if (a2 >= v12 || a4 >= v13)
        {
          if (a2 < v12 == a4 < v13) {
            return a5;
          }
        }
        else
        {
          uint64_t v14 = sub_46C8EC(a1, a2);
          if (v14 == sub_46C8EC(a3, a4)) {
            return a5;
          }
        }
        uint64_t v16 = *(void *)(sub_46C8EC(a1, a2) + 32);
        a6 = sub_2D6254(a5, a6, (int *)&v16) + 8;
        ++a2;
      }
    }
    while (a2 < sub_46C760(a1))
    {
      uint64_t v16 = *(void *)(sub_46C8EC(a1, a2) + 32);
      a6 = sub_2D6254(a5, a6, (int *)&v16) + 8;
      ++a2;
    }
  }
  else if (a3 && a4 < sub_46C760(a3))
  {
    do
    {
      uint64_t v16 = *(void *)(sub_46C8EC(0, a2) + 32);
      a6 = sub_2D6254(a5, a6, (int *)&v16) + 8;
      ++a2;
    }
    while (a4 < sub_46C760(a3));
  }
  return a5;
}

std::string **sub_42B160(std::string **a1, std::string **a2)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v3 = a1;
  while (((*v3)->__r_.__value_.__s.__data_[17] & 8) != 0 && HIDWORD((*v3)[3].__r_.__value_.__r.__words[1]) == 1)
  {
    if (++v3 == a2) {
      return a2;
    }
  }
  if (v3 != a2)
  {
    for (uint64_t i = (uint64_t *)(v3 + 1); i != (uint64_t *)a2; ++i)
    {
      uint64_t v6 = *i;
      if ((*(unsigned char *)(*i + 17) & 8) != 0 && *(_DWORD *)(v6 + 84) == 1)
      {
        int64_t v7 = *v3;
        if (*v3 != (std::string *)v6)
        {
          std::string::size_type size = v7->__r_.__value_.__l.__size_;
          if ((size & 2) != 0)
          {
            uint64_t v9 = 0;
          }
          else
          {
            uint64_t v9 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
            if (size) {
              uint64_t v9 = (void *)*v9;
            }
          }
          uint64_t v10 = *(void *)(v6 + 8);
          if ((v10 & 2) != 0)
          {
            unint64_t v11 = 0;
          }
          else
          {
            unint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
            if (v10) {
              unint64_t v11 = (void *)*v11;
            }
          }
          if (v9 == v11) {
            sub_1115810((uint64_t)v7, v6);
          }
          else {
            sub_1115798(v7, v6);
          }
        }
        ++v3;
      }
    }
  }
  return v3;
}

std::string **sub_42B254(std::string **a1, std::string **a2)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v3 = a1;
  while (((*v3)->__r_.__value_.__s.__data_[17] & 8) != 0 && HIDWORD((*v3)[3].__r_.__value_.__r.__words[1]) == 1)
  {
    if (++v3 == a2) {
      return a2;
    }
  }
  if (v3 != a2)
  {
    for (uint64_t i = (uint64_t *)(v3 + 1); i != (uint64_t *)a2; ++i)
    {
      uint64_t v6 = *i;
      if ((*(unsigned char *)(*i + 17) & 8) != 0 && *(_DWORD *)(v6 + 84) == 1)
      {
        int64_t v7 = *v3;
        if (*v3 != (std::string *)v6)
        {
          std::string::size_type size = v7->__r_.__value_.__l.__size_;
          if ((size & 2) != 0)
          {
            uint64_t v9 = 0;
          }
          else
          {
            uint64_t v9 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
            if (size) {
              uint64_t v9 = (void *)*v9;
            }
          }
          uint64_t v10 = *(void *)(v6 + 8);
          if ((v10 & 2) != 0)
          {
            unint64_t v11 = 0;
          }
          else
          {
            unint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
            if (v10) {
              unint64_t v11 = (void *)*v11;
            }
          }
          if (v9 == v11) {
            sub_1115810((uint64_t)v7, v6);
          }
          else {
            sub_1115798(v7, v6);
          }
        }
        ++v3;
      }
    }
  }
  return v3;
}

unint64_t *sub_42B348(void *a1, unint64_t a2, void *a3, unint64_t a4, unint64_t *a5, char *a6)
{
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v13 = sub_470ADC(a1);
        unint64_t v14 = sub_470ADC(a3);
        if (a2 >= v13 || a4 >= v14)
        {
          if (a2 < v13 == a4 < v14) {
            return a5;
          }
        }
        else
        {
          uint64_t v15 = sub_470B40(a1, a2);
          if (v15 == sub_470B40(a3, a4)) {
            return a5;
          }
        }
        unint64_t v12 = (unsigned int *)sub_470B40(a1, a2);
        unint64_t v19 = (((unint64_t)(v12[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v12[1] << 32) | *v12) ^ 0x1000000000000;
        a6 = sub_2D6254(a5, a6, (int *)&v19) + 8;
        ++a2;
      }
    }
    while (a2 < sub_470ADC(a1))
    {
      uint64_t v16 = (unsigned int *)sub_470B40(a1, a2);
      unint64_t v19 = (((unint64_t)(v16[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v16[1] << 32) | *v16) ^ 0x1000000000000;
      a6 = sub_2D6254(a5, a6, (int *)&v19) + 8;
      ++a2;
    }
  }
  else if (a3 && a4 < sub_470ADC(a3))
  {
    do
    {
      uint64_t v17 = (unsigned int *)sub_470B40(0, a2);
      unint64_t v19 = (((unint64_t)(v17[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v17[1] << 32) | *v17) ^ 0x1000000000000;
      a6 = sub_2D6254(a5, a6, (int *)&v19) + 8;
      ++a2;
    }
    while (a4 < sub_470ADC(a3));
  }
  return a5;
}

std::string **sub_42B518(std::string **a1, std::string **a2)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v3 = a1;
  while (((*v3)->__r_.__value_.__s.__data_[17] & 8) != 0 && HIDWORD((*v3)[3].__r_.__value_.__r.__words[1]) == 1)
  {
    if (++v3 == a2) {
      return a2;
    }
  }
  if (v3 != a2)
  {
    for (uint64_t i = (uint64_t *)(v3 + 1); i != (uint64_t *)a2; ++i)
    {
      uint64_t v6 = *i;
      if ((*(unsigned char *)(*i + 17) & 8) != 0 && *(_DWORD *)(v6 + 84) == 1)
      {
        int64_t v7 = *v3;
        if (*v3 != (std::string *)v6)
        {
          std::string::size_type size = v7->__r_.__value_.__l.__size_;
          if ((size & 2) != 0)
          {
            uint64_t v9 = 0;
          }
          else
          {
            uint64_t v9 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
            if (size) {
              uint64_t v9 = (void *)*v9;
            }
          }
          uint64_t v10 = *(void *)(v6 + 8);
          if ((v10 & 2) != 0)
          {
            unint64_t v11 = 0;
          }
          else
          {
            unint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
            if (v10) {
              unint64_t v11 = (void *)*v11;
            }
          }
          if (v9 == v11) {
            sub_1115810((uint64_t)v7, v6);
          }
          else {
            sub_1115798(v7, v6);
          }
        }
        ++v3;
      }
    }
  }
  return v3;
}

std::string **sub_42B60C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    uint64_t v3 = (std::string **)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  __n128 result = sub_42B704(v3, &v3[*(int *)(a1 + 8)]);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    uint64_t v6 = v5 + 8;
  }
  else {
    uint64_t v6 = 0;
  }
  unint64_t v7 = (unint64_t)result - v6;
  int v8 = *(_DWORD *)(a1 + 8) - (v7 >> 3);
  if (v8 >= 1)
  {
    uint64_t v9 = 8 * (int)((uint64_t)v7 >> 3) + 8;
    uint64_t v10 = *(_DWORD *)(a1 + 8) - (v7 >> 3);
    do
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 16) + v9);
      if (v11) {
        BOOL v12 = *(void *)a1 == 0;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12)
      {
        sub_1114258(v11);
        operator delete();
      }
      v9 += 8;
      --v10;
    }
    while (v10);
    return (std::string **)sub_188CC74(a1, v7 >> 3, v8);
  }
  return result;
}

std::string **sub_42B704(std::string **a1, std::string **a2)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v3 = a1;
  while (((*v3)->__r_.__value_.__s.__data_[17] & 8) != 0 && HIDWORD((*v3)[3].__r_.__value_.__r.__words[1]) == 1)
  {
    if (++v3 == a2) {
      return a2;
    }
  }
  if (v3 != a2)
  {
    for (uint64_t i = (uint64_t *)(v3 + 1); i != (uint64_t *)a2; ++i)
    {
      uint64_t v6 = *i;
      if ((*(unsigned char *)(*i + 17) & 8) != 0 && *(_DWORD *)(v6 + 84) == 1)
      {
        unint64_t v7 = *v3;
        if (*v3 != (std::string *)v6)
        {
          std::string::size_type size = v7->__r_.__value_.__l.__size_;
          if ((size & 2) != 0)
          {
            uint64_t v9 = 0;
          }
          else
          {
            uint64_t v9 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
            if (size) {
              uint64_t v9 = (void *)*v9;
            }
          }
          uint64_t v10 = *(void *)(v6 + 8);
          if ((v10 & 2) != 0)
          {
            uint64_t v11 = 0;
          }
          else
          {
            uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
            if (v10) {
              uint64_t v11 = (void *)*v11;
            }
          }
          if (v9 == v11) {
            sub_1115810((uint64_t)v7, v6);
          }
          else {
            sub_1115798(v7, v6);
          }
        }
        ++v3;
      }
    }
  }
  return v3;
}

std::string **sub_42B7F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    uint64_t v3 = (std::string **)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  __n128 result = sub_42BA78(v3, &v3[*(int *)(a1 + 8)]);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    uint64_t v6 = v5 + 8;
  }
  else {
    uint64_t v6 = 0;
  }
  unint64_t v7 = (unint64_t)result - v6;
  int v8 = *(_DWORD *)(a1 + 8) - (v7 >> 3);
  if (v8 >= 1)
  {
    uint64_t v9 = 8 * (int)((uint64_t)v7 >> 3) + 8;
    uint64_t v10 = *(_DWORD *)(a1 + 8) - (v7 >> 3);
    do
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 16) + v9);
      if (v11) {
        BOOL v12 = *(void *)a1 == 0;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12)
      {
        sub_1114258(v11);
        operator delete();
      }
      v9 += 8;
      --v10;
    }
    while (v10);
    return (std::string **)sub_188CC74(a1, v7 >> 3, v8);
  }
  return result;
}

unint64_t *sub_42B8F0(void *a1, unint64_t a2, void *a3, unint64_t a4, unint64_t *a5, char *a6)
{
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v12 = sub_EAE104(a1);
        unint64_t v13 = sub_EAE104(a3);
        if (a2 >= v12 || a4 >= v13)
        {
          if (a2 < v12 == a4 < v13) {
            return a5;
          }
        }
        else
        {
          uint64_t v14 = sub_EAE1B8(a1, a2);
          if (v14 == sub_EAE1B8(a3, a4)) {
            return a5;
          }
        }
        uint64_t v16 = *(void *)(sub_EAE1B8(a1, a2) + 32);
        a6 = sub_2D6254(a5, a6, (int *)&v16) + 8;
        ++a2;
      }
    }
    while (a2 < sub_EAE104(a1))
    {
      uint64_t v16 = *(void *)(sub_EAE1B8(a1, a2) + 32);
      a6 = sub_2D6254(a5, a6, (int *)&v16) + 8;
      ++a2;
    }
  }
  else if (a3 && a4 < sub_EAE104(a3))
  {
    do
    {
      uint64_t v16 = *(void *)(sub_EAE1B8(0, a2) + 32);
      a6 = sub_2D6254(a5, a6, (int *)&v16) + 8;
      ++a2;
    }
    while (a4 < sub_EAE104(a3));
  }
  return a5;
}

std::string **sub_42BA78(std::string **a1, std::string **a2)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v3 = a1;
  while (((*v3)->__r_.__value_.__s.__data_[17] & 8) != 0 && HIDWORD((*v3)[3].__r_.__value_.__r.__words[1]) == 1)
  {
    if (++v3 == a2) {
      return a2;
    }
  }
  if (v3 != a2)
  {
    for (uint64_t i = (uint64_t *)(v3 + 1); i != (uint64_t *)a2; ++i)
    {
      uint64_t v6 = *i;
      if ((*(unsigned char *)(*i + 17) & 8) != 0 && *(_DWORD *)(v6 + 84) == 1)
      {
        unint64_t v7 = *v3;
        if (*v3 != (std::string *)v6)
        {
          std::string::size_type size = v7->__r_.__value_.__l.__size_;
          if ((size & 2) != 0)
          {
            uint64_t v9 = 0;
          }
          else
          {
            uint64_t v9 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
            if (size) {
              uint64_t v9 = (void *)*v9;
            }
          }
          uint64_t v10 = *(void *)(v6 + 8);
          if ((v10 & 2) != 0)
          {
            uint64_t v11 = 0;
          }
          else
          {
            uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
            if (v10) {
              uint64_t v11 = (void *)*v11;
            }
          }
          if (v9 == v11) {
            sub_1115810((uint64_t)v7, v6);
          }
          else {
            sub_1115798(v7, v6);
          }
        }
        ++v3;
      }
    }
  }
  return v3;
}

std::string **sub_42BB6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    uint64_t v3 = (std::string **)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  __n128 result = sub_42BDEC(v3, &v3[*(int *)(a1 + 8)]);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    uint64_t v6 = v5 + 8;
  }
  else {
    uint64_t v6 = 0;
  }
  unint64_t v7 = (unint64_t)result - v6;
  int v8 = *(_DWORD *)(a1 + 8) - (v7 >> 3);
  if (v8 >= 1)
  {
    uint64_t v9 = 8 * (int)((uint64_t)v7 >> 3) + 8;
    uint64_t v10 = *(_DWORD *)(a1 + 8) - (v7 >> 3);
    do
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 16) + v9);
      if (v11) {
        BOOL v12 = *(void *)a1 == 0;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12)
      {
        sub_1114258(v11);
        operator delete();
      }
      v9 += 8;
      --v10;
    }
    while (v10);
    return (std::string **)sub_188CC74(a1, v7 >> 3, v8);
  }
  return result;
}

unint64_t *sub_42BC64(void *a1, unint64_t a2, void *a3, unint64_t a4, unint64_t *a5, char *a6)
{
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v12 = sub_EB04C4(a1);
        unint64_t v13 = sub_EB04C4(a3);
        if (a2 >= v12 || a4 >= v13)
        {
          if (a2 < v12 == a4 < v13) {
            return a5;
          }
        }
        else
        {
          uint64_t v14 = sub_EB0624(a1, a2);
          if (v14 == sub_EB0624(a3, a4)) {
            return a5;
          }
        }
        uint64_t v16 = *(void *)(sub_EB0624(a1, a2) + 32);
        a6 = sub_2D6254(a5, a6, (int *)&v16) + 8;
        ++a2;
      }
    }
    while (a2 < sub_EB04C4(a1))
    {
      uint64_t v16 = *(void *)(sub_EB0624(a1, a2) + 32);
      a6 = sub_2D6254(a5, a6, (int *)&v16) + 8;
      ++a2;
    }
  }
  else if (a3 && a4 < sub_EB04C4(a3))
  {
    do
    {
      uint64_t v16 = *(void *)(sub_EB0624(0, a2) + 32);
      a6 = sub_2D6254(a5, a6, (int *)&v16) + 8;
      ++a2;
    }
    while (a4 < sub_EB04C4(a3));
  }
  return a5;
}

std::string **sub_42BDEC(std::string **a1, std::string **a2)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v3 = a1;
  while (((*v3)->__r_.__value_.__s.__data_[17] & 8) != 0 && HIDWORD((*v3)[3].__r_.__value_.__r.__words[1]) == 1)
  {
    if (++v3 == a2) {
      return a2;
    }
  }
  if (v3 != a2)
  {
    for (uint64_t i = (uint64_t *)(v3 + 1); i != (uint64_t *)a2; ++i)
    {
      uint64_t v6 = *i;
      if ((*(unsigned char *)(*i + 17) & 8) != 0 && *(_DWORD *)(v6 + 84) == 1)
      {
        unint64_t v7 = *v3;
        if (*v3 != (std::string *)v6)
        {
          std::string::size_type size = v7->__r_.__value_.__l.__size_;
          if ((size & 2) != 0)
          {
            uint64_t v9 = 0;
          }
          else
          {
            uint64_t v9 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
            if (size) {
              uint64_t v9 = (void *)*v9;
            }
          }
          uint64_t v10 = *(void *)(v6 + 8);
          if ((v10 & 2) != 0)
          {
            uint64_t v11 = 0;
          }
          else
          {
            uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
            if (v10) {
              uint64_t v11 = (void *)*v11;
            }
          }
          if (v9 == v11) {
            sub_1115810((uint64_t)v7, v6);
          }
          else {
            sub_1115798(v7, v6);
          }
        }
        ++v3;
      }
    }
  }
  return v3;
}

std::string **sub_42BEE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    uint64_t v3 = (std::string **)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  __n128 result = sub_42C1A8(v3, &v3[*(int *)(a1 + 8)]);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    uint64_t v6 = v5 + 8;
  }
  else {
    uint64_t v6 = 0;
  }
  unint64_t v7 = (unint64_t)result - v6;
  int v8 = *(_DWORD *)(a1 + 8) - (v7 >> 3);
  if (v8 >= 1)
  {
    uint64_t v9 = 8 * (int)((uint64_t)v7 >> 3) + 8;
    uint64_t v10 = *(_DWORD *)(a1 + 8) - (v7 >> 3);
    do
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 16) + v9);
      if (v11) {
        BOOL v12 = *(void *)a1 == 0;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12)
      {
        sub_1114258(v11);
        operator delete();
      }
      v9 += 8;
      --v10;
    }
    while (v10);
    return (std::string **)sub_188CC74(a1, v7 >> 3, v8);
  }
  return result;
}

unint64_t *sub_42BFD8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5, char *a6)
{
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v13 = sub_EB2E84(a1);
        unint64_t v14 = sub_EB2E84(a3);
        if (a2 >= v13 || a4 >= v14)
        {
          if (a2 < v13 == a4 < v14) {
            return a5;
          }
        }
        else
        {
          uint64_t v15 = sub_EB2F38(a1, a2);
          if (v15 == sub_EB2F38(a3, a4)) {
            return a5;
          }
        }
        BOOL v12 = (unsigned int *)sub_EB2F38(a1, a2);
        unint64_t v19 = (((unint64_t)(v12[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v12[1] << 32) | *v12) ^ 0x1000000000000;
        a6 = sub_2D6254(a5, a6, (int *)&v19) + 8;
        ++a2;
      }
    }
    while (a2 < sub_EB2E84(a1))
    {
      uint64_t v16 = (unsigned int *)sub_EB2F38(a1, a2);
      unint64_t v19 = (((unint64_t)(v16[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v16[1] << 32) | *v16) ^ 0x1000000000000;
      a6 = sub_2D6254(a5, a6, (int *)&v19) + 8;
      ++a2;
    }
  }
  else if (a3 && a4 < sub_EB2E84(a3))
  {
    do
    {
      uint64_t v17 = (unsigned int *)sub_EB2F38(0, a2);
      unint64_t v19 = (((unint64_t)(v17[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v17[1] << 32) | *v17) ^ 0x1000000000000;
      a6 = sub_2D6254(a5, a6, (int *)&v19) + 8;
      ++a2;
    }
    while (a4 < sub_EB2E84(a3));
  }
  return a5;
}

std::string **sub_42C1A8(std::string **a1, std::string **a2)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v3 = a1;
  while (((*v3)->__r_.__value_.__s.__data_[17] & 8) != 0 && HIDWORD((*v3)[3].__r_.__value_.__r.__words[1]) == 1)
  {
    if (++v3 == a2) {
      return a2;
    }
  }
  if (v3 != a2)
  {
    for (uint64_t i = (uint64_t *)(v3 + 1); i != (uint64_t *)a2; ++i)
    {
      uint64_t v6 = *i;
      if ((*(unsigned char *)(*i + 17) & 8) != 0 && *(_DWORD *)(v6 + 84) == 1)
      {
        unint64_t v7 = *v3;
        if (*v3 != (std::string *)v6)
        {
          std::string::size_type size = v7->__r_.__value_.__l.__size_;
          if ((size & 2) != 0)
          {
            uint64_t v9 = 0;
          }
          else
          {
            uint64_t v9 = (void *)(size & 0xFFFFFFFFFFFFFFFCLL);
            if (size) {
              uint64_t v9 = (void *)*v9;
            }
          }
          uint64_t v10 = *(void *)(v6 + 8);
          if ((v10 & 2) != 0)
          {
            uint64_t v11 = 0;
          }
          else
          {
            uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
            if (v10) {
              uint64_t v11 = (void *)*v11;
            }
          }
          if (v9 == v11) {
            sub_1115810((uint64_t)v7, v6);
          }
          else {
            sub_1115798(v7, v6);
          }
        }
        ++v3;
      }
    }
  }
  return v3;
}

uint64_t *sub_42C29C(uint64_t *a1, uint64_t *a2, _WORD **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    uint64_t v3 = a2;
    while (1)
    {
LABEL_3:
      uint64_t v6 = (uint64_t)*a3;
      int v7 = (*(uint64_t (**)(void, uint64_t *))(**(void **)*a3 + 48))(*(void *)*a3, v5);
      int v8 = v7 + 360 * ((unsigned __int16)(*a3[1] + 180) / 0x168u) - ((unsigned __int16)*a3[1] + 180);
      if ((__int16)(v7 + 360 * ((unsigned __int16)(*a3[1] + 180) / 0x168u) - (*a3[1] + 180)) > 180) {
        LOWORD(v8) = v8 - 360;
      }
      if ((__int16)v8 < -179) {
        LOWORD(v8) = v8 + 360;
      }
      int v8 = (__int16)v8;
      if ((v8 & 0x8000u) != 0) {
        int v8 = -(__int16)v8;
      }
      if (v8 >= *(__int16 *)(v6 + 92)) {
        break;
      }
      if (++v5 == v3) {
        return v3;
      }
    }
    do
    {
      if (--v3 == v5) {
        return v5;
      }
      uint64_t v9 = (uint64_t)*a3;
      int v10 = (*(uint64_t (**)(void, uint64_t *))(**(void **)*a3 + 48))(*(void *)*a3, v3);
      int v11 = v10 + 360 * ((unsigned __int16)(*a3[1] + 180) / 0x168u) - ((unsigned __int16)*a3[1] + 180);
      if ((__int16)(v10 + 360 * ((unsigned __int16)(*a3[1] + 180) / 0x168u) - (*a3[1] + 180)) > 180) {
        LOWORD(v11) = v11 - 360;
      }
      if ((__int16)v11 < -179) {
        LOWORD(v11) = v11 + 360;
      }
      int v11 = (__int16)v11;
      if ((v11 & 0x8000u) != 0) {
        int v11 = -(__int16)v11;
      }
    }
    while (v11 >= *(__int16 *)(v9 + 92));
    uint64_t v12 = *v5;
    int v13 = *(_DWORD *)v3;
    *(_DWORD *)((char *)v5 + 3) = *(_DWORD *)((char *)v3 + 3);
    *(_DWORD *)v5++ = v13;
    *(_DWORD *)uint64_t v3 = v12;
    *((unsigned char *)v3 + 6) = BYTE6(v12);
    *((_WORD *)v3 + 2) = WORD2(v12);
    if (v3 != v5) {
      goto LABEL_3;
    }
  }
  return v3;
}

double sub_42C464()
{
  byte_2558497 = 1;
  word_2558480 = 65;
  byte_25584AF = 1;
  word_2558498 = 65;
  byte_25584C7 = 8;
  strcpy((char *)&qword_25584B0, "any_mode");
  byte_25584DF = 7;
  strcpy((char *)&dword_25584C8, "cycling");
  byte_25584F7 = 7;
  strcpy((char *)&dword_25584E0, "driving");
  byte_255850F = 7;
  strcpy((char *)&dword_25584F8, "walking");
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2558540 = 0u;
  *(_OWORD *)&qword_2558550 = 0u;
  dword_2558560 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2558540, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2558540, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2558540, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2558540, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_2558518 = 0;
  qword_2558520 = 0;
  qword_2558510 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2558510 = (uint64_t)v0;
  qword_2558518 = (uint64_t)(v0 + 9);
  qword_2558520 = (uint64_t)(v0 + 9);
  qword_2558528 = 0;
  qword_2558530 = 0;
  unk_2558538 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2558530 = (uint64_t)(v1 + 9);
  unk_2558538 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2558528 = (uint64_t)v1;
  return result;
}

void sub_42C720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2558550) {
    sub_20A84F0((void **)qword_2558550);
  }
  __n128 v37 = (void *)xmmword_2558540;
  *(void *)&xmmword_2558540 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_42C7C0(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0x4039000000000000;
  *(_DWORD *)(a1 + 16) = 5000;
  *(_OWORD *)(a1 + 24) = xmmword_20E7C10;
  *(_OWORD *)(a1 + 40) = xmmword_20E7C20;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 20000000;
  *(void *)(a1 + 72) = 0x3FF199999999999ALL;
  *(void *)(a1 + 80) = 0x3E800002710;
  *(_DWORD *)(a1 + 88) = 10000;
  *(_WORD *)(a1 + 92) = 10;
  *(_OWORD *)(a1 + 96) = xmmword_20E7C00;
  *(void *)(a1 + 112) = 0x3FE6147AE147AE14;
  *(_WORD *)(a1 + 120) = 0;
  *(void *)a1 = off_24396A0;
  uint64_t v4 = sub_3750CC(a2);
  *(void *)(a1 + 136) = &unk_20E1710;
  *(void *)(a1 + 128) = v4;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = &unk_20E1710;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = &unk_20E1710;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = &unk_20E1710;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = &unk_20E1710;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = &unk_20E1710;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = &unk_20E1710;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = &unk_20E1710;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = &unk_20E1710;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 568) = &unk_20E1710;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 616) = &unk_20E1710;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 664) = &unk_20E1710;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 712) = &unk_20E1710;
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 760) = &unk_20E1710;
  *(void *)(a1 + 800) = 0;
  *(void *)(a1 + 776) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 784) = 0;
  *(void *)(a1 + 808) = &unk_20E1710;
  *(void *)(a1 + 848) = 0;
  *(void *)(a1 + 824) = 0;
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 856) = &unk_20E1710;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 880) = 0;
  HIBYTE(v17[2]) = 20;
  strcpy((char *)v17, "PathCodecRoadNetwork");
  int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v5 = sub_374CDC((uint64_t)a2, (uint64_t)v17, (uint64_t *)&v14);
  sub_3CB2F0(v5, (uint64_t)__p);
  HIBYTE(v20[2]) = 17;
  strcpy((char *)v20, "include_road_name");
  BOOL v6 = sub_29D62C(__p, (uint64_t)v20);
  if (SHIBYTE(v20[2]) < 0) {
    operator delete(v20[0]);
  }
  *(unsigned char *)(a1 + 904) = v6;
  char v7 = v19;
  if (v19)
  {
    do
    {
      uint64_t v12 = *(char **)v7;
      sub_57AC8((uint64_t *)v7 + 5);
      if (v7[39] < 0) {
        operator delete(*((void **)v7 + 2));
      }
      operator delete(v7);
      char v7 = v12;
    }
    while (v12);
  }
  int v8 = __p[0];
  __p[0] = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = (void **)v14;
  if (v14)
  {
    char v10 = v15;
    int v11 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      int v11 = v14;
    }
    uint64_t v15 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  return a1;
}

void sub_42CAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (*(char *)(v20 - 41) < 0) {
    operator delete(*(void **)(v20 - 64));
  }
  sub_5450C((uint64_t)&a19);
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_42CB30(v19);
  _Unwind_Resume(a1);
}

void *sub_42CB30(void *a1)
{
  uint64_t v2 = a1 + 96;
  do
  {
    uint64_t v3 = v2 - 6;
    uint64_t v4 = *(v2 - 3);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      char v7 = v2 - 5;
      do
      {
        if ((*(char *)(*v3 + v6) & 0x80000000) == 0)
        {
          uint64_t v8 = *v7 + v5;
          uint64_t v9 = *(void **)(v8 + 8);
          if (v9)
          {
            *(void *)(v8 + 16) = v9;
            operator delete(v9);
            uint64_t v4 = *(v2 - 3);
          }
        }
        ++v6;
        v5 += 32;
      }
      while (v6 != v4);
      operator delete((void *)*(v2 - 6));
      *(v2 - 6) = &unk_20E1710;
      *(v2 - 1) = 0;
      *(v2 - 4) = 0;
      *(v2 - 3) = 0;
      *char v7 = 0;
    }
    v2 -= 6;
  }
  while (v3 != a1);
  return a1;
}

uint64_t sub_42CBFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void *)(a1 + 128);
  if (a2 < 0) {
    a2 = -a2;
  }
  unint64_t v4 = sub_2FD4C0(v3, a2);
  BOOL v5 = v2 < 1;
  BOOL v6 = v4 > 0xFFFFFFFEFFFFFFFFLL || v4 == 0;
  int v7 = v6;
  if (v6) {
    BOOL v5 = 1;
  }
  BOOL v6 = !v5;
  uint64_t v8 = 0x1000000000000;
  if (v6) {
    uint64_t v8 = 0;
  }
  if (v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
  }
  return v8 | v9;
}

uint64_t sub_42CC6C(uint64_t a1, void *a2)
{
  return *a2 ^ 0x1000000000000;
}

uint64_t sub_42CC78(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *a2;
  unint64_t v4 = *a2 & 0xFFFFFFFFFFFFLL;
  BOOL v5 = (int *)sub_2D5D58(v2, v4);
  if (*(unsigned char *)(v2 + 7772)) {
    sub_2DB8E0(v2 + 3896, v3, 0);
  }
  sub_2E5C38(v2, v4, 1);
  BOOL v6 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v6 < 0x1Du)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = v6[14];
    if (v7) {
      uint64_t v7 = *(void *)((char *)v5 + v7);
    }
  }
  if ((v3 & 0xFF000000000000) != 0) {
    return -v7;
  }
  else {
    return v7;
  }
}

void sub_42CD18(uint64_t a1, unsigned int *a2, int a3, uint64_t a4)
{
  LODWORD(v6) = a2[1];
  unsigned int v5 = a2[2];
  if (v6 >= 0xFFFFFFFE) {
    uint64_t v6 = 4294967294;
  }
  else {
    uint64_t v6 = v6;
  }
  unint64_t v38 = *a2 | (unint64_t)(v6 << 32);
  unsigned int v39 = v5;
  sub_4071CC(*(void *)(a1 + 128), (unsigned int *)&v38, 0xAu, a3, (uint64_t)sub_29C8, &v36);
  uint64_t v7 = *(uint64_t **)a4;
  *(void *)(a4 + 8) = *(void *)a4;
  uint64_t v8 = v36;
  uint64_t v9 = v37;
  if (v36 == v37) {
    goto LABEL_44;
  }
  do
  {
    uint64_t v10 = *((unsigned int *)v8 + 2);
    uint64_t v11 = *((unsigned __int16 *)v8 + 6);
    unint64_t v12 = *(void *)(a4 + 16);
    if ((unint64_t)v7 < v12)
    {
      *uint64_t v7 = v10 | (v11 << 32);
      char v13 = v7 + 1;
      goto LABEL_26;
    }
    int v14 = *(uint64_t **)a4;
    uint64_t v15 = ((uint64_t)v7 - *(void *)a4) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v17 = v12 - (void)v14;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        sub_188D718();
      }
      unint64_t v19 = (char *)operator new(8 * v18);
      uint64_t v20 = (uint64_t)&v19[8 * v15];
      *(void *)uint64_t v20 = v10 | (v11 << 32);
      char v13 = (uint64_t *)(v20 + 8);
      if (v7 == v14)
      {
LABEL_24:
        *(void *)a4 = v20;
        *(void *)(a4 + 8) = v13;
        *(void *)(a4 + 16) = &v19[8 * v18];
        if (!v7) {
          goto LABEL_26;
        }
LABEL_25:
        operator delete(v7);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v19 = 0;
      uint64_t v20 = 8 * v15;
      *(void *)(8 * v15) = v10 | (v11 << 32);
      char v13 = (uint64_t *)(8 * v15 + 8);
      if (v7 == v14) {
        goto LABEL_24;
      }
    }
    do
    {
      int v21 = *((_DWORD *)v7-- - 2);
      int v22 = *(_DWORD *)((char *)v7 + 3);
      *(_DWORD *)(v20 - 8) = v21;
      v20 -= 8;
      *(_DWORD *)(v20 + 3) = v22;
    }
    while (v7 != v14);
    uint64_t v7 = *(uint64_t **)a4;
    *(void *)a4 = v20;
    *(void *)(a4 + 8) = v13;
    *(void *)(a4 + 16) = &v19[8 * v18];
    if (v7) {
      goto LABEL_25;
    }
LABEL_26:
    *(void *)(a4 + 8) = v13;
    uint64_t v23 = *((unsigned int *)v8 + 2);
    uint64_t v24 = *((unsigned __int16 *)v8 + 6);
    unint64_t v25 = *(void *)(a4 + 16);
    if ((unint64_t)v13 < v25)
    {
      *char v13 = v23 | (v24 << 32) | 0x1000000000000;
      uint64_t v7 = v13 + 1;
      goto LABEL_7;
    }
    __n128 v26 = *(uint64_t **)a4;
    uint64_t v27 = ((uint64_t)v13 - *(void *)a4) >> 3;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v29 = v25 - (void)v26;
    if (v29 >> 2 > v28) {
      unint64_t v28 = v29 >> 2;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v28;
    }
    if (v30)
    {
      if (v30 >> 61) {
        sub_188D718();
      }
      uint64_t v31 = (char *)operator new(8 * v30);
    }
    else
    {
      uint64_t v31 = 0;
    }
    __n128 v32 = &v31[8 * v27];
    __n128 v33 = &v31[8 * v30];
    *(void *)__n128 v32 = v23 | (v24 << 32) | 0x1000000000000;
    uint64_t v7 = (uint64_t *)(v32 + 8);
    if (v13 == v26)
    {
      *(void *)a4 = v32;
      *(void *)(a4 + 8) = v7;
      *(void *)(a4 + 16) = v33;
LABEL_42:
      operator delete(v13);
      goto LABEL_7;
    }
    do
    {
      int v34 = *((_DWORD *)v13-- - 2);
      int v35 = *(_DWORD *)((char *)v13 + 3);
      *((_DWORD *)v32 - 2) = v34;
      v32 -= 8;
      *(_DWORD *)(v32 + 3) = v35;
    }
    while (v13 != v26);
    char v13 = *(uint64_t **)a4;
    *(void *)a4 = v32;
    *(void *)(a4 + 8) = v7;
    *(void *)(a4 + 16) = v33;
    if (v13) {
      goto LABEL_42;
    }
LABEL_7:
    *(void *)(a4 + 8) = v7;
    v8 += 48;
  }
  while (v8 != v9);
  uint64_t v8 = v36;
LABEL_44:
  if (v8)
  {
    __n128 v37 = v8;
    operator delete(v8);
  }
}

void sub_42CFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_42CFFC@<D0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 128);
  unint64_t v9 = *a2;
  unint64_t v10 = *a2 & 0xFFFFFFFFFFFFLL;
  uint64_t v11 = (int *)sub_2D5D58(v8, v10);
  if (*(unsigned char *)(v8 + 7772)) {
    sub_2DB8E0(v8 + 3896, v9, 0);
  }
  sub_2E5C38(v8, v10, 1);
  uint64_t v12 = *v11;
  if (*(unsigned __int16 *)((char *)v11 - v12) < 9u)
  {
    int v14 = 0;
    if (a3) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v13 = *(unsigned __int16 *)((char *)v11 - v12 + 8);
    if (*(_WORD *)((char *)v11 - v12 + 8)) {
      LODWORD(v13) = *(int *)((char *)v11 + v13);
    }
    if (v13 >= 0x7FFFFFFF) {
      int v14 = 0x7FFFFFFF;
    }
    else {
      int v14 = v13;
    }
    if (a3)
    {
LABEL_10:
      sub_2D6A20(a1 + 136, a2, v37);
      if (v37[0])
      {
        *(void *)&long long v33 = a1;
        sub_42D398((unsigned int **)(v39 + 8), (uint64_t)__p);
        long long v32 = *(_OWORD *)__p;
        uint64_t v15 = v36;
      }
      else
      {
        sub_2954EC(*(void *)(a1 + 128), *a2, (uint64_t)__p);
        long long v33 = 0uLL;
        int v34 = 0;
        unint64_t v17 = sub_42F978((uint64_t)__p);
        unint64_t v18 = v17;
        if (v17)
        {
          if (v17 >= 0x1555555555555556) {
            sub_2E00();
          }
          unint64_t v19 = (char *)operator new(12 * v17);
          *(void *)&long long v33 = v19;
          *((void *)&v33 + 1) = v19;
          int v34 = &v19[12 * v18];
        }
        else
        {
          unint64_t v19 = 0;
        }
        sub_42FBE8((uint64_t)__p, (char **)&v33, (uint64_t)v19);
        long long v32 = v33;
        uint64_t v15 = v34;
        if (__p[1])
        {
          __n128 v36 = (char *)__p[1];
          operator delete(__p[1]);
        }
      }
      unint64_t v16 = (unsigned __int16 *)((char *)v11 - *v11);
      if (*v16 < 0x1Bu) {
        goto LABEL_24;
      }
      goto LABEL_22;
    }
  }
  uint64_t v15 = 0;
  long long v32 = 0u;
  unint64_t v16 = (unsigned __int16 *)((char *)v11 - v12);
  if (*v16 < 0x1Bu)
  {
LABEL_24:
    __int16 v21 = 0;
    goto LABEL_25;
  }
LABEL_22:
  uint64_t v20 = v16[13];
  if (!v20) {
    goto LABEL_24;
  }
  __int16 v21 = *((unsigned __int8 *)v11 + v20);
LABEL_25:
  int v22 = (int *)sub_2D5D58(*(void *)(a1 + 128), *(unsigned int *)a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32));
  uint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v23 >= 0x13u && (uint64_t v24 = v23[9]) != 0) {
    char v25 = *((unsigned char *)v22 + v24);
  }
  else {
    char v25 = 0;
  }
  char v26 = sub_42D498(a1, *a2);
  char v27 = *(unsigned char *)(a1 + 904);
  if (v27)
  {
    unint64_t v28 = *(int **)(a1 + 128);
    unint64_t v29 = sub_2E68E8((uint64_t)v28, *a2);
    sub_3BDB4C(v28, v29, v37);
    char v27 = v38 < 0;
  }
  else
  {
    HIBYTE(v38) = 0;
    LOBYTE(v37[0]) = 0;
  }
  *(_WORD *)a4 = v21;
  *(_WORD *)(a4 + 2) = v25;
  *(_DWORD *)(a4 + 4) = v14;
  *(_OWORD *)(a4 + 8) = v32;
  *(void *)(a4 + 24) = v15;
  *(_DWORD *)(a4 + 32) = 23593320;
  unint64_t v30 = (unsigned char *)(a4 + 40);
  *(unsigned char *)(a4 + 36) = v26;
  if (v27)
  {
    sub_4200(v30, v37[0], (unint64_t)v37[1]);
    if (SHIBYTE(v38) < 0) {
      operator delete(v37[0]);
    }
  }
  else
  {
    double result = *(double *)v37;
    *(_OWORD *)unint64_t v30 = *(_OWORD *)v37;
    *(void *)(a4 + 56) = v38;
  }
  return result;
}

void sub_42D2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

int64_t sub_42D398@<X0>(unsigned int **a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  int64_t result = (char *)v3 - (char *)*a1;
  if (!result)
  {
    uint64_t v7 = 0;
    if (v3 == v4) {
      return result;
    }
    goto LABEL_6;
  }
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (result >> 2);
  if (v6 >= 0x1555555555555556) {
    sub_2E00();
  }
  int64_t result = (int64_t)operator new(result);
  uint64_t v7 = result;
  *(void *)a2 = result;
  *(void *)(a2 + 8) = result;
  for (*(void *)(a2 + 16) = result + 12 * v6; v4 != v3; v4 += 3)
  {
LABEL_6:
    LODWORD(v9) = v4[1];
    unsigned int v8 = v4[2];
    if (v9 >= 0xFFFFFFFE) {
      uint64_t v9 = 4294967294;
    }
    else {
      uint64_t v9 = v9;
    }
    unint64_t v10 = *v4 | (unint64_t)(v9 << 32);
    unsigned int v11 = v8;
    int64_t result = (int64_t)sub_42F6C4((char **)a2, v7, (uint64_t)&v10);
    uint64_t v7 = result + 12;
  }
  return result;
}

void sub_42D478(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_42D498(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  uint64_t v4 = a2 & 0xFF000000000000;
  unsigned int v5 = (int *)sub_2D5D58(*(void *)(a1 + 128), a2 & 0xFFFFFFFFFFFFLL);
  unint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v7 = *v6;
  if (v4)
  {
    if (v7 >= 0x47)
    {
      unsigned int v8 = v6[35];
      if (v8)
      {
        if ((*(int *)((char *)v5 + v8) & 2) != 0) {
          return 1;
        }
      }
    }
  }
  else if (v7 >= 0x47)
  {
    unsigned int v9 = v6[35];
    if (v9)
    {
      if (*(int *)((char *)v5 + v9)) {
        return 1;
      }
    }
  }
  unint64_t v10 = (int *)sub_2D5D58(*(void *)(a1 + 128), v3);
  unsigned int v11 = (unsigned __int16 *)((char *)v10 - *v10);
  unsigned int v12 = *v11;
  if (!v4)
  {
    if (v12 >= 0x39)
    {
      uint64_t v15 = v11[28];
      if (v15)
      {
        unsigned int v14 = *(int *)((char *)v10 + v15);
        if ((v14 & 1) == 0) {
          goto LABEL_17;
        }
        return 1;
      }
    }
    return 0;
  }
  if (v12 < 0x39) {
    return 0;
  }
  uint64_t v13 = v11[28];
  if (!v13) {
    return 0;
  }
  unsigned int v14 = *(int *)((char *)v10 + v13);
  if ((v14 & 2) != 0) {
    return 1;
  }
LABEL_17:
  if ((v14 & 7) == 4) {
    return 1;
  }
  if ((v14 & 3) != 0) {
    return 0;
  }
  return (v14 >> 5) & 1;
}

uint64_t sub_42D5B0()
{
  return 0;
}

uint64_t sub_42D5B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *a2;
  unint64_t v4 = *a2 & 0xFFFFFFFFFFFFLL;
  unsigned int v5 = (int *)sub_2D5D58(v2, v4);
  if (*(unsigned char *)(v2 + 7772)) {
    sub_2DB8E0(v2 + 3896, v3, 0);
  }
  sub_2E5C38(v2, v4, 1);
  unsigned int v7 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v8 = *v7;
  if ((v3 & 0xFF000000000000) != 0)
  {
    if (v8 < 0x4B || (unsigned int v9 = v7[37]) == 0)
    {
LABEL_10:
      double v10 = 65535.0;
      goto LABEL_11;
    }
  }
  else
  {
    if (v8 < 0x49) {
      goto LABEL_10;
    }
    unsigned int v9 = v7[36];
    if (!v9) {
      goto LABEL_10;
    }
  }
  LOWORD(v6) = *(_WORD *)((char *)v5 + v9);
  double v10 = (double)v6;
LABEL_11:
  unsigned int v11 = llround(v10 / 100.0);
  return v11 - 360 * (((int)(11651 * v11) >> 22) + ((11651 * v11) >> 31));
}

uint64_t sub_42D69C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *a2;
  unint64_t v4 = *a2 & 0xFFFFFFFFFFFFLL;
  unsigned int v5 = (int *)sub_2D5D58(v2, v4);
  if (*(unsigned char *)(v2 + 7772)) {
    sub_2DB8E0(v2 + 3896, v3, 0);
  }
  sub_2E5C38(v2, v4, 1);
  unsigned int v7 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v8 = *v7;
  if ((v3 & 0xFF000000000000) != 0)
  {
    if (v8 < 0x49 || (unsigned int v9 = v7[36]) == 0)
    {
LABEL_10:
      double v10 = 65535.0;
      goto LABEL_11;
    }
  }
  else
  {
    if (v8 < 0x4B) {
      goto LABEL_10;
    }
    unsigned int v9 = v7[37];
    if (!v9) {
      goto LABEL_10;
    }
  }
  LOWORD(v6) = *(_WORD *)((char *)v5 + v9);
  double v10 = (double)v6;
LABEL_11:
  unsigned int v11 = llround(v10 / 100.0);
  return v11 - 360 * (((int)(11651 * v11) >> 22) + ((11651 * v11) >> 31));
}

BOOL sub_42D780(uint64_t a1, void *a2, char **a3)
{
  unsigned int v5 = (unsigned int *)sub_2D5EC4(*(void *)(a1 + 128), *a2 & 0xFFFFFFFFFFFFLL, (*a2 & 0xFF000000000000) == 0);
  uint64_t v6 = *(void *)(a1 + 128);

  return sub_2D5904(v6, v5, 0, a3);
}

void *sub_42D7DC(uint64_t a1, unint64_t a2, char **a3)
{
  unint64_t v5 = a2;
  sub_2D7D20(a1 + 136, &v5, (uint64_t)v6);
  int64_t result = (void *)(v7 + 8);
  if ((char **)(v7 + 8) != a3) {
    return sub_31AF54(result, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2));
  }
  return result;
}

void sub_42D844(uint64_t a1)
{
}

uint64_t sub_42D84C(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0x4039000000000000;
  *(_DWORD *)(a1 + 16) = 5000;
  *(_OWORD *)(a1 + 24) = xmmword_20E7C10;
  *(_OWORD *)(a1 + 40) = xmmword_20E7C20;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 20000000;
  *(void *)(a1 + 72) = 0x3FF199999999999ALL;
  *(void *)(a1 + 80) = 0x3E800002710;
  *(_DWORD *)(a1 + 88) = 10000;
  *(_WORD *)(a1 + 92) = 10;
  *(_OWORD *)(a1 + 96) = xmmword_20E7C00;
  *(void *)(a1 + 112) = 0x3FE6147AE147AE14;
  *(_WORD *)(a1 + 120) = 0;
  *(void *)a1 = off_2439728;
  uint64_t v4 = sub_3750CC(a2);
  *(void *)(a1 + 136) = &unk_20E1710;
  *(void *)(a1 + 128) = v4;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = &unk_20E1710;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = &unk_20E1710;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = &unk_20E1710;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = &unk_20E1710;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = &unk_20E1710;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = &unk_20E1710;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = &unk_20E1710;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = &unk_20E1710;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 568) = &unk_20E1710;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 616) = &unk_20E1710;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 664) = &unk_20E1710;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 712) = &unk_20E1710;
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 760) = &unk_20E1710;
  *(void *)(a1 + 800) = 0;
  *(void *)(a1 + 776) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 784) = 0;
  *(void *)(a1 + 808) = &unk_20E1710;
  *(void *)(a1 + 848) = 0;
  *(void *)(a1 + 824) = 0;
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 856) = &unk_20E1710;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 880) = 0;
  HIBYTE(v17[2]) = 20;
  strcpy((char *)v17, "PathCodecRoadNetwork");
  unsigned int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  unint64_t v5 = sub_374CDC((uint64_t)a2, (uint64_t)v17, (uint64_t *)&v14);
  sub_3CB560(v5, (uint64_t)__p);
  HIBYTE(v20[2]) = 17;
  strcpy((char *)v20, "include_road_name");
  BOOL v6 = sub_29D62C(__p, (uint64_t)v20);
  if (SHIBYTE(v20[2]) < 0) {
    operator delete(v20[0]);
  }
  *(unsigned char *)(a1 + 904) = v6;
  uint64_t v7 = v19;
  if (v19)
  {
    do
    {
      unsigned int v12 = *(char **)v7;
      sub_57AC8((uint64_t *)v7 + 5);
      if (v7[39] < 0) {
        operator delete(*((void **)v7 + 2));
      }
      operator delete(v7);
      uint64_t v7 = v12;
    }
    while (v12);
  }
  unsigned int v8 = __p[0];
  __p[0] = 0;
  if (v8) {
    operator delete(v8);
  }
  unsigned int v9 = (void **)v14;
  if (v14)
  {
    double v10 = v15;
    unsigned int v11 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      unsigned int v11 = v14;
    }
    uint64_t v15 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  return a1;
}

void sub_42DB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (*(char *)(v20 - 41) < 0) {
    operator delete(*(void **)(v20 - 64));
  }
  sub_5450C((uint64_t)&a19);
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_42CB30(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_42DBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void *)(a1 + 128);
  if (a2 < 0) {
    a2 = -a2;
  }
  unint64_t v4 = sub_2FD4C0(v3, a2);
  BOOL v5 = v2 < 1;
  BOOL v6 = v4 > 0xFFFFFFFEFFFFFFFFLL || v4 == 0;
  int v7 = v6;
  if (v6) {
    BOOL v5 = 1;
  }
  BOOL v6 = !v5;
  uint64_t v8 = 0x1000000000000;
  if (v6) {
    uint64_t v8 = 0;
  }
  if (v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
  }
  return v8 | v9;
}

uint64_t sub_42DC30(uint64_t a1, void *a2)
{
  return *a2 ^ 0x1000000000000;
}

uint64_t sub_42DC3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *a2;
  unint64_t v4 = *a2 & 0xFFFFFFFFFFFFLL;
  BOOL v5 = (int *)sub_2D5D58(v2, v4);
  if (*(unsigned char *)(v2 + 7772)) {
    sub_2DB8E0(v2 + 3896, v3, 0);
  }
  sub_2E5C38(v2, v4, 1);
  BOOL v6 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v6 < 0x1Du)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = v6[14];
    if (v7) {
      uint64_t v7 = *(void *)((char *)v5 + v7);
    }
  }
  if ((v3 & 0xFF000000000000) != 0) {
    return -v7;
  }
  else {
    return v7;
  }
}

void sub_42DCDC(uint64_t a1, unsigned int *a2, int a3, uint64_t a4)
{
  LODWORD(v6) = a2[1];
  unsigned int v5 = a2[2];
  if (v6 >= 0xFFFFFFFE) {
    uint64_t v6 = 4294967294;
  }
  else {
    uint64_t v6 = v6;
  }
  unint64_t v38 = *a2 | (unint64_t)(v6 << 32);
  unsigned int v39 = v5;
  sub_4071CC(*(void *)(a1 + 128), (unsigned int *)&v38, 0xAu, a3, (uint64_t)sub_29C8, &v36);
  uint64_t v7 = *(uint64_t **)a4;
  *(void *)(a4 + 8) = *(void *)a4;
  uint64_t v8 = v36;
  uint64_t v9 = v37;
  if (v36 == v37) {
    goto LABEL_44;
  }
  do
  {
    uint64_t v10 = *((unsigned int *)v8 + 2);
    uint64_t v11 = *((unsigned __int16 *)v8 + 6);
    unint64_t v12 = *(void *)(a4 + 16);
    if ((unint64_t)v7 < v12)
    {
      *uint64_t v7 = v10 | (v11 << 32);
      uint64_t v13 = v7 + 1;
      goto LABEL_26;
    }
    unsigned int v14 = *(uint64_t **)a4;
    uint64_t v15 = ((uint64_t)v7 - *(void *)a4) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v17 = v12 - (void)v14;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        sub_188D718();
      }
      unint64_t v19 = (char *)operator new(8 * v18);
      uint64_t v20 = (uint64_t)&v19[8 * v15];
      *(void *)uint64_t v20 = v10 | (v11 << 32);
      uint64_t v13 = (uint64_t *)(v20 + 8);
      if (v7 == v14)
      {
LABEL_24:
        *(void *)a4 = v20;
        *(void *)(a4 + 8) = v13;
        *(void *)(a4 + 16) = &v19[8 * v18];
        if (!v7) {
          goto LABEL_26;
        }
LABEL_25:
        operator delete(v7);
        goto LABEL_26;
      }
    }
    else
    {
      unint64_t v19 = 0;
      uint64_t v20 = 8 * v15;
      *(void *)(8 * v15) = v10 | (v11 << 32);
      uint64_t v13 = (uint64_t *)(8 * v15 + 8);
      if (v7 == v14) {
        goto LABEL_24;
      }
    }
    do
    {
      int v21 = *((_DWORD *)v7-- - 2);
      int v22 = *(_DWORD *)((char *)v7 + 3);
      *(_DWORD *)(v20 - 8) = v21;
      v20 -= 8;
      *(_DWORD *)(v20 + 3) = v22;
    }
    while (v7 != v14);
    uint64_t v7 = *(uint64_t **)a4;
    *(void *)a4 = v20;
    *(void *)(a4 + 8) = v13;
    *(void *)(a4 + 16) = &v19[8 * v18];
    if (v7) {
      goto LABEL_25;
    }
LABEL_26:
    *(void *)(a4 + 8) = v13;
    uint64_t v23 = *((unsigned int *)v8 + 2);
    uint64_t v24 = *((unsigned __int16 *)v8 + 6);
    unint64_t v25 = *(void *)(a4 + 16);
    if ((unint64_t)v13 < v25)
    {
      *uint64_t v13 = v23 | (v24 << 32) | 0x1000000000000;
      uint64_t v7 = v13 + 1;
      goto LABEL_7;
    }
    char v26 = *(uint64_t **)a4;
    uint64_t v27 = ((uint64_t)v13 - *(void *)a4) >> 3;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v29 = v25 - (void)v26;
    if (v29 >> 2 > v28) {
      unint64_t v28 = v29 >> 2;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v28;
    }
    if (v30)
    {
      if (v30 >> 61) {
        sub_188D718();
      }
      uint64_t v31 = (char *)operator new(8 * v30);
    }
    else
    {
      uint64_t v31 = 0;
    }
    long long v32 = &v31[8 * v27];
    long long v33 = &v31[8 * v30];
    *(void *)long long v32 = v23 | (v24 << 32) | 0x1000000000000;
    uint64_t v7 = (uint64_t *)(v32 + 8);
    if (v13 == v26)
    {
      *(void *)a4 = v32;
      *(void *)(a4 + 8) = v7;
      *(void *)(a4 + 16) = v33;
LABEL_42:
      operator delete(v13);
      goto LABEL_7;
    }
    do
    {
      int v34 = *((_DWORD *)v13-- - 2);
      int v35 = *(_DWORD *)((char *)v13 + 3);
      *((_DWORD *)v32 - 2) = v34;
      v32 -= 8;
      *(_DWORD *)(v32 + 3) = v35;
    }
    while (v13 != v26);
    uint64_t v13 = *(uint64_t **)a4;
    *(void *)a4 = v32;
    *(void *)(a4 + 8) = v7;
    *(void *)(a4 + 16) = v33;
    if (v13) {
      goto LABEL_42;
    }
LABEL_7:
    *(void *)(a4 + 8) = v7;
    v8 += 48;
  }
  while (v8 != v9);
  uint64_t v8 = v36;
LABEL_44:
  if (v8)
  {
    __n128 v37 = v8;
    operator delete(v8);
  }
}

void sub_42DF98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_42DFC0@<D0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 128);
  unint64_t v9 = *a2;
  unint64_t v10 = *a2 & 0xFFFFFFFFFFFFLL;
  uint64_t v11 = (int *)sub_2D5D58(v8, v10);
  if (*(unsigned char *)(v8 + 7772)) {
    sub_2DB8E0(v8 + 3896, v9, 0);
  }
  sub_2E5C38(v8, v10, 1);
  uint64_t v12 = *v11;
  if (*(unsigned __int16 *)((char *)v11 - v12) < 9u)
  {
    int v14 = 0;
    if (a3) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v13 = *(unsigned __int16 *)((char *)v11 - v12 + 8);
    if (*(_WORD *)((char *)v11 - v12 + 8)) {
      LODWORD(v13) = *(int *)((char *)v11 + v13);
    }
    if (v13 >= 0x7FFFFFFF) {
      int v14 = 0x7FFFFFFF;
    }
    else {
      int v14 = v13;
    }
    if (a3)
    {
LABEL_10:
      sub_2D6A20(a1 + 136, a2, v37);
      if (v37[0])
      {
        *(void *)&long long v33 = a1;
        sub_42E35C((unsigned int **)(v39 + 8), (uint64_t)__p);
        long long v32 = *(_OWORD *)__p;
        uint64_t v15 = v36;
      }
      else
      {
        sub_2954EC(*(void *)(a1 + 128), *a2, (uint64_t)__p);
        long long v33 = 0uLL;
        int v34 = 0;
        unint64_t v17 = sub_42F978((uint64_t)__p);
        unint64_t v18 = v17;
        if (v17)
        {
          if (v17 >= 0x1555555555555556) {
            sub_2E00();
          }
          unint64_t v19 = (char *)operator new(12 * v17);
          *(void *)&long long v33 = v19;
          *((void *)&v33 + 1) = v19;
          int v34 = &v19[12 * v18];
        }
        else
        {
          unint64_t v19 = 0;
        }
        sub_42FBE8((uint64_t)__p, (char **)&v33, (uint64_t)v19);
        long long v32 = v33;
        uint64_t v15 = v34;
        if (__p[1])
        {
          __n128 v36 = (char *)__p[1];
          operator delete(__p[1]);
        }
      }
      unint64_t v16 = (unsigned __int16 *)((char *)v11 - *v11);
      if (*v16 < 0x1Bu) {
        goto LABEL_24;
      }
      goto LABEL_22;
    }
  }
  uint64_t v15 = 0;
  long long v32 = 0u;
  unint64_t v16 = (unsigned __int16 *)((char *)v11 - v12);
  if (*v16 < 0x1Bu)
  {
LABEL_24:
    __int16 v21 = 0;
    goto LABEL_25;
  }
LABEL_22:
  uint64_t v20 = v16[13];
  if (!v20) {
    goto LABEL_24;
  }
  __int16 v21 = *((unsigned __int8 *)v11 + v20);
LABEL_25:
  int v22 = (int *)sub_2D5D58(*(void *)(a1 + 128), *(unsigned int *)a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32));
  uint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v23 >= 0x13u && (uint64_t v24 = v23[9]) != 0) {
    char v25 = *((unsigned char *)v22 + v24);
  }
  else {
    char v25 = 0;
  }
  char v26 = sub_42E45C(a1, *a2);
  char v27 = *(unsigned char *)(a1 + 904);
  if (v27)
  {
    unint64_t v28 = *(int **)(a1 + 128);
    unint64_t v29 = sub_2E68E8((uint64_t)v28, *a2);
    sub_3BDB4C(v28, v29, v37);
    char v27 = v38 < 0;
  }
  else
  {
    HIBYTE(v38) = 0;
    LOBYTE(v37[0]) = 0;
  }
  *(_WORD *)a4 = v21;
  *(_WORD *)(a4 + 2) = v25;
  *(_DWORD *)(a4 + 4) = v14;
  *(_OWORD *)(a4 + 8) = v32;
  *(void *)(a4 + 24) = v15;
  *(_DWORD *)(a4 + 32) = 23593320;
  unint64_t v30 = (unsigned char *)(a4 + 40);
  *(unsigned char *)(a4 + 36) = v26;
  if (v27)
  {
    sub_4200(v30, v37[0], (unint64_t)v37[1]);
    if (SHIBYTE(v38) < 0) {
      operator delete(v37[0]);
    }
  }
  else
  {
    double result = *(double *)v37;
    *(_OWORD *)unint64_t v30 = *(_OWORD *)v37;
    *(void *)(a4 + 56) = v38;
  }
  return result;
}

void sub_42E2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

int64_t sub_42E35C@<X0>(unsigned int **a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  int64_t result = (char *)v3 - (char *)*a1;
  if (!result)
  {
    uint64_t v7 = 0;
    if (v3 == v4) {
      return result;
    }
    goto LABEL_6;
  }
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (result >> 2);
  if (v6 >= 0x1555555555555556) {
    sub_2E00();
  }
  int64_t result = (int64_t)operator new(result);
  uint64_t v7 = result;
  *(void *)a2 = result;
  *(void *)(a2 + 8) = result;
  for (*(void *)(a2 + 16) = result + 12 * v6; v4 != v3; v4 += 3)
  {
LABEL_6:
    LODWORD(v9) = v4[1];
    unsigned int v8 = v4[2];
    if (v9 >= 0xFFFFFFFE) {
      uint64_t v9 = 4294967294;
    }
    else {
      uint64_t v9 = v9;
    }
    unint64_t v10 = *v4 | (unint64_t)(v9 << 32);
    unsigned int v11 = v8;
    int64_t result = (int64_t)sub_42F6C4((char **)a2, v7, (uint64_t)&v10);
    uint64_t v7 = result + 12;
  }
  return result;
}

void sub_42E43C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_42E45C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  uint64_t v4 = a2 & 0xFF000000000000;
  unsigned int v5 = (int *)sub_2D5D58(*(void *)(a1 + 128), a2 & 0xFFFFFFFFFFFFLL);
  unint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v7 = *v6;
  if (v4)
  {
    if (v7 >= 0xB)
    {
      unsigned int v8 = v6[5];
      if (v8)
      {
        if ((*(int *)((char *)v5 + v8) & 2) != 0) {
          return 1;
        }
      }
    }
  }
  else if (v7 >= 0xB)
  {
    unsigned int v9 = v6[5];
    if (v9)
    {
      if (*(int *)((char *)v5 + v9)) {
        return 1;
      }
    }
  }
  unint64_t v10 = (int *)sub_2D5D58(*(void *)(a1 + 128), v3);
  unsigned int v11 = (unsigned __int16 *)((char *)v10 - *v10);
  unsigned int v12 = *v11;
  if (v4)
  {
    if (v12 < 0xB) {
      goto LABEL_18;
    }
    unsigned int v13 = v11[5];
    if (!v13 || (*(int *)((char *)v10 + v13) & 1) == 0) {
      goto LABEL_18;
    }
    return 0;
  }
  if (v12 >= 0xB)
  {
    unsigned int v14 = v11[5];
    if (v14)
    {
      if ((*(int *)((char *)v10 + v14) & 2) != 0) {
        return 0;
      }
    }
  }
LABEL_18:
  unint64_t v16 = (int *)sub_2D5D58(*(void *)(a1 + 128), v3);
  unint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
  unsigned int v18 = *v17;
  if (!v4)
  {
    if (v18 >= 0x39)
    {
      uint64_t v21 = v17[28];
      if (v21)
      {
        unsigned int v20 = *(int *)((char *)v16 + v21);
        if ((v20 & 1) == 0) {
          goto LABEL_26;
        }
        return 1;
      }
    }
    return 0;
  }
  if (v18 < 0x39) {
    return 0;
  }
  uint64_t v19 = v17[28];
  if (!v19) {
    return 0;
  }
  unsigned int v20 = *(int *)((char *)v16 + v19);
  if ((v20 & 2) != 0) {
    return 1;
  }
LABEL_26:
  if ((v20 & 7) == 4) {
    return 1;
  }
  if ((v20 & 3) != 0) {
    return 0;
  }
  return (v20 >> 5) & 1;
}

uint64_t sub_42E5E4()
{
  return 0;
}

uint64_t sub_42E5EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *a2;
  unint64_t v4 = *a2 & 0xFFFFFFFFFFFFLL;
  unsigned int v5 = (int *)sub_2D5D58(v2, v4);
  if (*(unsigned char *)(v2 + 7772)) {
    sub_2DB8E0(v2 + 3896, v3, 0);
  }
  sub_2E5C38(v2, v4, 1);
  unsigned int v7 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v8 = *v7;
  if ((v3 & 0xFF000000000000) != 0)
  {
    if (v8 < 0x4B || (unsigned int v9 = v7[37]) == 0)
    {
LABEL_10:
      double v10 = 65535.0;
      goto LABEL_11;
    }
  }
  else
  {
    if (v8 < 0x49) {
      goto LABEL_10;
    }
    unsigned int v9 = v7[36];
    if (!v9) {
      goto LABEL_10;
    }
  }
  LOWORD(v6) = *(_WORD *)((char *)v5 + v9);
  double v10 = (double)v6;
LABEL_11:
  unsigned int v11 = llround(v10 / 100.0);
  return v11 - 360 * (((int)(11651 * v11) >> 22) + ((11651 * v11) >> 31));
}

uint64_t sub_42E6D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *a2;
  unint64_t v4 = *a2 & 0xFFFFFFFFFFFFLL;
  unsigned int v5 = (int *)sub_2D5D58(v2, v4);
  if (*(unsigned char *)(v2 + 7772)) {
    sub_2DB8E0(v2 + 3896, v3, 0);
  }
  sub_2E5C38(v2, v4, 1);
  unsigned int v7 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v8 = *v7;
  if ((v3 & 0xFF000000000000) != 0)
  {
    if (v8 < 0x49 || (unsigned int v9 = v7[36]) == 0)
    {
LABEL_10:
      double v10 = 65535.0;
      goto LABEL_11;
    }
  }
  else
  {
    if (v8 < 0x4B) {
      goto LABEL_10;
    }
    unsigned int v9 = v7[37];
    if (!v9) {
      goto LABEL_10;
    }
  }
  LOWORD(v6) = *(_WORD *)((char *)v5 + v9);
  double v10 = (double)v6;
LABEL_11:
  unsigned int v11 = llround(v10 / 100.0);
  return v11 - 360 * (((int)(11651 * v11) >> 22) + ((11651 * v11) >> 31));
}

BOOL sub_42E7B4(uint64_t a1, void *a2, char **a3)
{
  unsigned int v5 = (unsigned int *)sub_2D5EC4(*(void *)(a1 + 128), *a2 & 0xFFFFFFFFFFFFLL, (*a2 & 0xFF000000000000) == 0);
  uint64_t v6 = *(void *)(a1 + 128);

  return sub_2D5904(v6, v5, 0, a3);
}

uint64_t sub_42E810(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0x4039000000000000;
  *(_DWORD *)(a1 + 16) = 5000;
  *(_OWORD *)(a1 + 24) = xmmword_20E7C10;
  *(_OWORD *)(a1 + 40) = xmmword_20E7C20;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 20000000;
  *(void *)(a1 + 72) = 0x3FF199999999999ALL;
  *(void *)(a1 + 80) = 0x3E800002710;
  *(_DWORD *)(a1 + 88) = 10000;
  *(_WORD *)(a1 + 92) = 10;
  *(_OWORD *)(a1 + 96) = xmmword_20E7C00;
  *(void *)(a1 + 112) = 0x3FE6147AE147AE14;
  *(_WORD *)(a1 + 120) = 0;
  *(void *)a1 = off_24397A0;
  uint64_t v4 = sub_3750CC(a2);
  *(void *)(a1 + 136) = &unk_20E1710;
  *(void *)(a1 + 128) = v4;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = &unk_20E1710;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = &unk_20E1710;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = &unk_20E1710;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = &unk_20E1710;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = &unk_20E1710;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = &unk_20E1710;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = &unk_20E1710;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = &unk_20E1710;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 568) = &unk_20E1710;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 616) = &unk_20E1710;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 664) = &unk_20E1710;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 712) = &unk_20E1710;
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 760) = &unk_20E1710;
  *(void *)(a1 + 800) = 0;
  *(void *)(a1 + 776) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 784) = 0;
  *(void *)(a1 + 808) = &unk_20E1710;
  *(void *)(a1 + 848) = 0;
  *(void *)(a1 + 824) = 0;
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 856) = &unk_20E1710;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 880) = 0;
  HIBYTE(v17[2]) = 20;
  strcpy((char *)v17, "PathCodecRoadNetwork");
  unsigned int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  unsigned int v5 = sub_374CDC((uint64_t)a2, (uint64_t)v17, (uint64_t *)&v14);
  sub_3CB5E0(v5, (uint64_t)__p);
  HIBYTE(v20[2]) = 17;
  strcpy((char *)v20, "include_road_name");
  BOOL v6 = sub_29D62C(__p, (uint64_t)v20);
  if (SHIBYTE(v20[2]) < 0) {
    operator delete(v20[0]);
  }
  *(unsigned char *)(a1 + 904) = v6;
  unsigned int v7 = v19;
  if (v19)
  {
    do
    {
      unsigned int v12 = *(char **)v7;
      sub_57AC8((uint64_t *)v7 + 5);
      if (v7[39] < 0) {
        operator delete(*((void **)v7 + 2));
      }
      operator delete(v7);
      unsigned int v7 = v12;
    }
    while (v12);
  }
  unsigned int v8 = __p[0];
  __p[0] = 0;
  if (v8) {
    operator delete(v8);
  }
  unsigned int v9 = (void **)v14;
  if (v14)
  {
    double v10 = v15;
    unsigned int v11 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      unsigned int v11 = v14;
    }
    uint64_t v15 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v17[2]) < 0) {
    operator delete(v17[0]);
  }
  return a1;
}

void sub_42EB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (*(char *)(v20 - 41) < 0) {
    operator delete(*(void **)(v20 - 64));
  }
  sub_5450C((uint64_t)&a19);
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_42CB30(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_42EB84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void *)(a1 + 128);
  if (a2 < 0) {
    a2 = -a2;
  }
  unint64_t v4 = sub_2FD4C0(v3, a2);
  BOOL v5 = v2 < 1;
  BOOL v6 = v4 > 0xFFFFFFFEFFFFFFFFLL || v4 == 0;
  int v7 = v6;
  if (v6) {
    BOOL v5 = 1;
  }
  BOOL v6 = !v5;
  uint64_t v8 = 0x1000000000000;
  if (v6) {
    uint64_t v8 = 0;
  }
  if (v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v4 & 0xFFFFFFFFFFFFLL;
  }
  return v8 | v9;
}

uint64_t sub_42EBF4(uint64_t a1, void *a2)
{
  return *a2 ^ 0x1000000000000;
}

uint64_t sub_42EC00(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *a2;
  unint64_t v4 = *a2 & 0xFFFFFFFFFFFFLL;
  BOOL v5 = (int *)sub_2D5D58(v2, v4);
  if (*(unsigned char *)(v2 + 7772)) {
    sub_2DB8E0(v2 + 3896, v3, 0);
  }
  sub_2E5C38(v2, v4, 1);
  BOOL v6 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v6 < 0x1Du)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = v6[14];
    if (v7) {
      uint64_t v7 = *(void *)((char *)v5 + v7);
    }
  }
  if ((v3 & 0xFF000000000000) != 0) {
    return -v7;
  }
  else {
    return v7;
  }
}

void sub_42ECA0(uint64_t a1, unsigned int *a2, int a3, uint64_t a4)
{
  LODWORD(v6) = a2[1];
  unsigned int v5 = a2[2];
  if (v6 >= 0xFFFFFFFE) {
    uint64_t v6 = 4294967294;
  }
  else {
    uint64_t v6 = v6;
  }
  unint64_t v38 = *a2 | (unint64_t)(v6 << 32);
  unsigned int v39 = v5;
  sub_4071CC(*(void *)(a1 + 128), (unsigned int *)&v38, 0xAu, a3, (uint64_t)sub_29C8, &v36);
  uint64_t v7 = *(uint64_t **)a4;
  *(void *)(a4 + 8) = *(void *)a4;
  uint64_t v8 = v36;
  uint64_t v9 = v37;
  if (v36 == v37) {
    goto LABEL_44;
  }
  do
  {
    uint64_t v10 = *((unsigned int *)v8 + 2);
    uint64_t v11 = *((unsigned __int16 *)v8 + 6);
    unint64_t v12 = *(void *)(a4 + 16);
    if ((unint64_t)v7 < v12)
    {
      *uint64_t v7 = v10 | (v11 << 32);
      unsigned int v13 = v7 + 1;
      goto LABEL_26;
    }
    unsigned int v14 = *(uint64_t **)a4;
    uint64_t v15 = ((uint64_t)v7 - *(void *)a4) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v17 = v12 - (void)v14;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        sub_188D718();
      }
      uint64_t v19 = (char *)operator new(8 * v18);
      uint64_t v20 = (uint64_t)&v19[8 * v15];
      *(void *)uint64_t v20 = v10 | (v11 << 32);
      unsigned int v13 = (uint64_t *)(v20 + 8);
      if (v7 == v14)
      {
LABEL_24:
        *(void *)a4 = v20;
        *(void *)(a4 + 8) = v13;
        *(void *)(a4 + 16) = &v19[8 * v18];
        if (!v7) {
          goto LABEL_26;
        }
LABEL_25:
        operator delete(v7);
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = 8 * v15;
      *(void *)(8 * v15) = v10 | (v11 << 32);
      unsigned int v13 = (uint64_t *)(8 * v15 + 8);
      if (v7 == v14) {
        goto LABEL_24;
      }
    }
    do
    {
      int v21 = *((_DWORD *)v7-- - 2);
      int v22 = *(_DWORD *)((char *)v7 + 3);
      *(_DWORD *)(v20 - 8) = v21;
      v20 -= 8;
      *(_DWORD *)(v20 + 3) = v22;
    }
    while (v7 != v14);
    uint64_t v7 = *(uint64_t **)a4;
    *(void *)a4 = v20;
    *(void *)(a4 + 8) = v13;
    *(void *)(a4 + 16) = &v19[8 * v18];
    if (v7) {
      goto LABEL_25;
    }
LABEL_26:
    *(void *)(a4 + 8) = v13;
    uint64_t v23 = *((unsigned int *)v8 + 2);
    uint64_t v24 = *((unsigned __int16 *)v8 + 6);
    unint64_t v25 = *(void *)(a4 + 16);
    if ((unint64_t)v13 < v25)
    {
      *unsigned int v13 = v23 | (v24 << 32) | 0x1000000000000;
      uint64_t v7 = v13 + 1;
      goto LABEL_7;
    }
    char v26 = *(uint64_t **)a4;
    uint64_t v27 = ((uint64_t)v13 - *(void *)a4) >> 3;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v29 = v25 - (void)v26;
    if (v29 >> 2 > v28) {
      unint64_t v28 = v29 >> 2;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v28;
    }
    if (v30)
    {
      if (v30 >> 61) {
        sub_188D718();
      }
      uint64_t v31 = (char *)operator new(8 * v30);
    }
    else
    {
      uint64_t v31 = 0;
    }
    long long v32 = &v31[8 * v27];
    long long v33 = &v31[8 * v30];
    *(void *)long long v32 = v23 | (v24 << 32) | 0x1000000000000;
    uint64_t v7 = (uint64_t *)(v32 + 8);
    if (v13 == v26)
    {
      *(void *)a4 = v32;
      *(void *)(a4 + 8) = v7;
      *(void *)(a4 + 16) = v33;
LABEL_42:
      operator delete(v13);
      goto LABEL_7;
    }
    do
    {
      int v34 = *((_DWORD *)v13-- - 2);
      int v35 = *(_DWORD *)((char *)v13 + 3);
      *((_DWORD *)v32 - 2) = v34;
      v32 -= 8;
      *(_DWORD *)(v32 + 3) = v35;
    }
    while (v13 != v26);
    unsigned int v13 = *(uint64_t **)a4;
    *(void *)a4 = v32;
    *(void *)(a4 + 8) = v7;
    *(void *)(a4 + 16) = v33;
    if (v13) {
      goto LABEL_42;
    }
LABEL_7:
    *(void *)(a4 + 8) = v7;
    v8 += 48;
  }
  while (v8 != v9);
  uint64_t v8 = v36;
LABEL_44:
  if (v8)
  {
    __n128 v37 = v8;
    operator delete(v8);
  }
}

void sub_42EF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_42EF84@<D0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 128);
  unint64_t v9 = *a2;
  unint64_t v10 = *a2 & 0xFFFFFFFFFFFFLL;
  uint64_t v11 = (int *)sub_2D5D58(v8, v10);
  if (*(unsigned char *)(v8 + 7772)) {
    sub_2DB8E0(v8 + 3896, v9, 0);
  }
  sub_2E5C38(v8, v10, 1);
  uint64_t v12 = *v11;
  if (*(unsigned __int16 *)((char *)v11 - v12) < 9u)
  {
    int v14 = 0;
    if (a3) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v13 = *(unsigned __int16 *)((char *)v11 - v12 + 8);
    if (*(_WORD *)((char *)v11 - v12 + 8)) {
      LODWORD(v13) = *(int *)((char *)v11 + v13);
    }
    if (v13 >= 0x7FFFFFFF) {
      int v14 = 0x7FFFFFFF;
    }
    else {
      int v14 = v13;
    }
    if (a3)
    {
LABEL_10:
      sub_2D6A20(a1 + 136, a2, v44);
      if (v44[0])
      {
        *(void *)&long long v40 = a1;
        sub_42F398((unsigned int **)(v46 + 8), (uint64_t)__p);
        long long v39 = *(_OWORD *)__p;
        uint64_t v15 = v43;
      }
      else
      {
        sub_2954EC(*(void *)(a1 + 128), *a2, (uint64_t)__p);
        long long v40 = 0uLL;
        unint64_t v41 = 0;
        unint64_t v17 = sub_42F978((uint64_t)__p);
        unint64_t v18 = v17;
        if (v17)
        {
          if (v17 >= 0x1555555555555556) {
            sub_2E00();
          }
          uint64_t v19 = (char *)operator new(12 * v17);
          *(void *)&long long v40 = v19;
          *((void *)&v40 + 1) = v19;
          unint64_t v41 = &v19[12 * v18];
        }
        else
        {
          uint64_t v19 = 0;
        }
        sub_42FBE8((uint64_t)__p, (char **)&v40, (uint64_t)v19);
        long long v39 = v40;
        uint64_t v15 = v41;
        if (__p[1])
        {
          unsigned int v43 = (char *)__p[1];
          operator delete(__p[1]);
        }
      }
      unint64_t v16 = (unsigned __int16 *)((char *)v11 - *v11);
      if (*v16 < 0x1Bu) {
        goto LABEL_24;
      }
      goto LABEL_22;
    }
  }
  uint64_t v15 = 0;
  long long v39 = 0u;
  unint64_t v16 = (unsigned __int16 *)((char *)v11 - v12);
  if (*v16 < 0x1Bu)
  {
LABEL_24:
    __int16 v21 = 0;
    goto LABEL_25;
  }
LABEL_22:
  uint64_t v20 = v16[13];
  if (!v20) {
    goto LABEL_24;
  }
  __int16 v21 = *((unsigned __int8 *)v11 + v20);
LABEL_25:
  int v22 = (int *)sub_2D5D58(*(void *)(a1 + 128), *(unsigned int *)a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32));
  uint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v23 >= 0x13u && (uint64_t v24 = v23[9]) != 0) {
    char v25 = *((unsigned char *)v22 + v24);
  }
  else {
    char v25 = 0;
  }
  unint64_t v26 = *a2;
  uint64_t v27 = (int *)sub_2D5D58(*(void *)(a1 + 128), *a2 & 0xFFFFFFFFFFFFLL);
  unint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
  unsigned int v29 = *v28;
  if ((v26 & 0xFF000000000000) == 0)
  {
    if (v29 < 0x39) {
      goto LABEL_41;
    }
    uint64_t v32 = v28[28];
    if (!v32) {
      goto LABEL_41;
    }
    unsigned int v31 = *(int *)((char *)v27 + v32);
    if (v31) {
      goto LABEL_38;
    }
LABEL_37:
    if ((v31 & 7) == 4) {
      goto LABEL_38;
    }
    if ((v31 & 3) == 0)
    {
      int v33 = (v31 >> 5) & 1;
      char v34 = *(unsigned char *)(a1 + 904);
      if (!v34) {
        goto LABEL_39;
      }
      goto LABEL_42;
    }
LABEL_41:
    LOBYTE(v33) = 0;
    char v34 = *(unsigned char *)(a1 + 904);
    if (!v34) {
      goto LABEL_39;
    }
    goto LABEL_42;
  }
  if (v29 < 0x39) {
    goto LABEL_41;
  }
  uint64_t v30 = v28[28];
  if (!v30) {
    goto LABEL_41;
  }
  unsigned int v31 = *(int *)((char *)v27 + v30);
  if ((v31 & 2) == 0) {
    goto LABEL_37;
  }
LABEL_38:
  LOBYTE(v33) = 1;
  char v34 = *(unsigned char *)(a1 + 904);
  if (!v34)
  {
LABEL_39:
    HIBYTE(v45) = 0;
    LOBYTE(v44[0]) = 0;
    goto LABEL_43;
  }
LABEL_42:
  int v35 = *(int **)(a1 + 128);
  unint64_t v36 = sub_2E68E8((uint64_t)v35, *a2);
  sub_3BDB4C(v35, v36, v44);
  char v34 = v45 < 0;
LABEL_43:
  *(_WORD *)a4 = v21;
  *(_WORD *)(a4 + 2) = v25;
  *(_DWORD *)(a4 + 4) = v14;
  *(_OWORD *)(a4 + 8) = v39;
  *(void *)(a4 + 24) = v15;
  *(_DWORD *)(a4 + 32) = 23593320;
  __n128 v37 = (unsigned char *)(a4 + 40);
  *(unsigned char *)(a4 + 36) = v33;
  if (v34)
  {
    sub_4200(v37, v44[0], (unint64_t)v44[1]);
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
  }
  else
  {
    double result = *(double *)v44;
    *(_OWORD *)__n128 v37 = *(_OWORD *)v44;
    *(void *)(a4 + 56) = v45;
  }
  return result;
}

void sub_42F2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

int64_t sub_42F398@<X0>(unsigned int **a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  int64_t result = (char *)v3 - (char *)*a1;
  if (!result)
  {
    uint64_t v7 = 0;
    if (v3 == v4) {
      return result;
    }
    goto LABEL_6;
  }
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (result >> 2);
  if (v6 >= 0x1555555555555556) {
    sub_2E00();
  }
  int64_t result = (int64_t)operator new(result);
  uint64_t v7 = result;
  *(void *)a2 = result;
  *(void *)(a2 + 8) = result;
  for (*(void *)(a2 + 16) = result + 12 * v6; v4 != v3; v4 += 3)
  {
LABEL_6:
    LODWORD(v9) = v4[1];
    unsigned int v8 = v4[2];
    if (v9 >= 0xFFFFFFFE) {
      uint64_t v9 = 4294967294;
    }
    else {
      uint64_t v9 = v9;
    }
    unint64_t v10 = *v4 | (unint64_t)(v9 << 32);
    unsigned int v11 = v8;
    int64_t result = (int64_t)sub_42F6C4((char **)a2, v7, (uint64_t)&v10);
    uint64_t v7 = result + 12;
  }
  return result;
}

void sub_42F478(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_42F498()
{
  return 0;
}

uint64_t sub_42F4A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *a2;
  unint64_t v4 = *a2 & 0xFFFFFFFFFFFFLL;
  unsigned int v5 = (int *)sub_2D5D58(v2, v4);
  if (*(unsigned char *)(v2 + 7772)) {
    sub_2DB8E0(v2 + 3896, v3, 0);
  }
  sub_2E5C38(v2, v4, 1);
  uint64_t v7 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v8 = *v7;
  if ((v3 & 0xFF000000000000) != 0)
  {
    if (v8 < 0x4B || (unsigned int v9 = v7[37]) == 0)
    {
LABEL_10:
      double v10 = 65535.0;
      goto LABEL_11;
    }
  }
  else
  {
    if (v8 < 0x49) {
      goto LABEL_10;
    }
    unsigned int v9 = v7[36];
    if (!v9) {
      goto LABEL_10;
    }
  }
  LOWORD(v6) = *(_WORD *)((char *)v5 + v9);
  double v10 = (double)v6;
LABEL_11:
  unsigned int v11 = llround(v10 / 100.0);
  return v11 - 360 * (((int)(11651 * v11) >> 22) + ((11651 * v11) >> 31));
}

uint64_t sub_42F584(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *a2;
  unint64_t v4 = *a2 & 0xFFFFFFFFFFFFLL;
  unsigned int v5 = (int *)sub_2D5D58(v2, v4);
  if (*(unsigned char *)(v2 + 7772)) {
    sub_2DB8E0(v2 + 3896, v3, 0);
  }
  sub_2E5C38(v2, v4, 1);
  uint64_t v7 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v8 = *v7;
  if ((v3 & 0xFF000000000000) != 0)
  {
    if (v8 < 0x49 || (unsigned int v9 = v7[36]) == 0)
    {
LABEL_10:
      double v10 = 65535.0;
      goto LABEL_11;
    }
  }
  else
  {
    if (v8 < 0x4B) {
      goto LABEL_10;
    }
    unsigned int v9 = v7[37];
    if (!v9) {
      goto LABEL_10;
    }
  }
  LOWORD(v6) = *(_WORD *)((char *)v5 + v9);
  double v10 = (double)v6;
LABEL_11:
  unsigned int v11 = llround(v10 / 100.0);
  return v11 - 360 * (((int)(11651 * v11) >> 22) + ((11651 * v11) >> 31));
}

BOOL sub_42F668(uint64_t a1, void *a2, char **a3)
{
  unsigned int v5 = (unsigned int *)sub_2D5EC4(*(void *)(a1 + 128), *a2 & 0xFFFFFFFFFFFFLL, (*a2 & 0xFF000000000000) == 0);
  uint64_t v6 = *(void *)(a1 + 128);

  return sub_2D5904(v6, v5, 0, a3);
}

char *sub_42F6C4(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 12;
  unsigned int v8 = &(*a1)[12 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v6) >> 2) + 1;
    if (v15 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v6) >> 2);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v17 = 0x1555555555555555;
    }
    else {
      unint64_t v17 = v15;
    }
    unint64_t v36 = a1 + 2;
    if (v17)
    {
      if (v17 > 0x1555555555555555) {
        sub_188D718();
      }
      unint64_t v18 = (char *)operator new(12 * v17);
    }
    else
    {
      unint64_t v18 = 0;
    }
    uint64_t v32 = v18;
    int v33 = &v18[12 * v7];
    __dst = v33;
    int v35 = &v18[12 * v17];
    sub_32D80((uint64_t)&v32, (uint64_t *)a3);
    uint64_t v20 = v33;
    __int16 v21 = *a1;
    int v22 = v33;
    if (*a1 != v8)
    {
      uint64_t v23 = v8;
      int v22 = v33;
      do
      {
        uint64_t v24 = *(void *)(v23 - 12);
        v23 -= 12;
        int v25 = *((_DWORD *)v23 + 2);
        *(void *)(v22 - 12) = v24;
        v22 -= 12;
        *((_DWORD *)v22 + 2) = v25;
      }
      while (v23 != v21);
    }
    int v33 = v22;
    unint64_t v26 = a1[1];
    uint64_t v27 = (char *)__dst;
    int64_t v28 = v26 - v8;
    if (v26 != v8)
    {
      memmove(__dst, v8, v26 - v8);
      int v22 = v33;
      unsigned int v8 = a1[1];
    }
    unsigned int v29 = *a1;
    *a1 = v22;
    a1[1] = &v27[v28];
    uint64_t v30 = a1[2];
    a1[2] = v35;
    __dst = v8;
    int v35 = v30;
    uint64_t v32 = v29;
    int v33 = v29;
    if (v8 != v29) {
      __dst = &v29[(v8 - v29 - 12) % 0xCuLL];
    }
    if (v29) {
      operator delete(v29);
    }
    return v20;
  }
  else if (v8 == (char *)v5)
  {
    uint64_t v19 = *(void *)a3;
    *((_DWORD *)v8 + 2) = *(_DWORD *)(a3 + 8);
    *(void *)unsigned int v8 = v19;
    a1[1] = v8 + 12;
  }
  else
  {
    double v10 = v8 + 12;
    unint64_t v11 = v5 - 12;
    uint64_t v12 = a1[1];
    if (v5 >= 0xC)
    {
      do
      {
        uint64_t v13 = *(void *)v11;
        *((_DWORD *)v12 + 2) = *(_DWORD *)(v11 + 8);
        *(void *)uint64_t v12 = v13;
        v12 += 12;
        v11 += 12;
      }
      while (v11 < v5);
    }
    a1[1] = v12;
    if ((_DWORD *)v5 != v10) {
      memmove(v8 + 12, v8, v5 - (void)v10);
    }
    uint64_t v14 = *(void *)a3;
    *((_DWORD *)v8 + 2) = *(_DWORD *)(a3 + 8);
    *(void *)unsigned int v8 = v14;
  }
  return v8;
}

void sub_42F91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    uint64_t v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_42F978(uint64_t a1)
{
  sub_2E51EC(a1, (uint64_t)v17);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 32))
  {
    if (v3 == v2) {
      LODWORD(v4) = 0;
    }
    else {
      LODWORD(v4) = -1;
    }
    int v5 = v4;
  }
  else if (v3 == v2)
  {
    LODWORD(v4) = 0;
    int v5 = 0;
  }
  else
  {
    unint64_t v6 = *(void *)(v2 - 8);
    uint64_t v7 = sub_2964C4(*(void *)a1, v6, 1);
    unsigned int v8 = &v7[*(unsigned __int16 *)&v7[-*(int *)v7 + 4]];
    uint64_t v9 = (uint64_t)&v8[4 * HIDWORD(v6) + *(unsigned int *)v8];
    double v10 = (int *)(v9 + 4 + *(unsigned int *)(v9 + 4));
    uint64_t v4 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
    unint64_t v11 = (unsigned int *)((char *)v10 + *(unsigned __int16 *)((char *)v10 - *v10 + 6));
    int v5 = *(unsigned int *)((char *)v11 + *v11);
  }
  v19[0] = v17[0];
  v19[1] = v17[1];
  v19[2] = v17[2];
  long long v20 = v18;
  int v12 = DWORD1(v18);
  BOOL v13 = v18 == v4;
  for (uint64_t i = 0; !v13 || v12 != v5; ++i)
  {
    if (BYTE8(v20)) {
      sub_2E7608((uint64_t)v19);
    }
    else {
      sub_2E74E8((uint64_t)v19);
    }
    int v12 = DWORD1(v20);
    BOOL v13 = v20 == v4;
  }
  return sub_42FA98(i);
}

uint64_t sub_42FA98(uint64_t result)
{
  uint64_t v1 = result;
  if (result < 0)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v8, v1);
    uint64_t v3 = std::string::insert(&v8, 0, "narrowing ");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    int v5 = std::string::append(&v9, " failed");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v5->__r_.__value_.__r.__words[2];
    long long v10 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return result;
}

void sub_42FB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

char **sub_42FBE8(uint64_t a1, char **a2, uint64_t a3)
{
  sub_2E51EC(a1, (uint64_t)v37);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 32))
  {
    if (v7 == v6) {
      LODWORD(v8) = 0;
    }
    else {
      LODWORD(v8) = -1;
    }
    int v9 = v8;
    unsigned int v10 = v43;
    if (v42 != v8 || v43 != v8) {
      goto LABEL_25;
    }
    return a2;
  }
  if (v7 == v6)
  {
    LODWORD(v8) = 0;
    int v9 = 0;
    unsigned int v10 = v43;
    if (v42) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v43 == 0;
    }
    if (v19) {
      return a2;
    }
LABEL_25:
    while (1)
    {
      uint64_t v20 = v39 + 4 * v10;
      int v21 = *(unsigned __int16 *)(v20 + 4);
      int v22 = *(unsigned __int16 *)(v20 + 6);
      unsigned int v23 = sub_511FC(v40);
      unsigned int v24 = v40 & ~(-1 << (v23 & 0xFE));
      int v25 = sub_51938(v24);
      int v26 = sub_51938(v24 >> 1);
      uint64_t v27 = (unsigned __int16 *)((char *)v38 - *v38);
      unsigned int v28 = *v27;
      if (v28 < 0xD) {
        break;
      }
      if (!v27[6]) {
        goto LABEL_29;
      }
      int v29 = *(int *)((char *)&v38[v43 + 1] + v27[6] + *(unsigned int *)((char *)v38 + v27[6]));
LABEL_36:
      int v33 = 1 << -(v23 >> 1);
      if (v23 < 2) {
        int v33 = -2;
      }
      LODWORD(v34) = v33 * v26 + 4 * v22;
      if (v34 >= 0xFFFFFFFE) {
        uint64_t v34 = 4294967294;
      }
      else {
        uint64_t v34 = v34;
      }
      unint64_t v45 = (v33 * v25 + 4 * v21) | (unint64_t)(v34 << 32);
      int v46 = v29;
      int v35 = sub_42F6C4(a2, a3, (uint64_t)&v45);
      if (v44)
      {
        sub_2E7608((uint64_t)v37);
        a3 = (uint64_t)(v35 + 12);
        unsigned int v10 = v43;
        if (v42 == v8) {
          goto LABEL_24;
        }
      }
      else
      {
        sub_2E74E8((uint64_t)v37);
        a3 = (uint64_t)(v35 + 12);
        unsigned int v10 = v43;
        if (v42 == v8)
        {
LABEL_24:
          if (v10 == v9) {
            return a2;
          }
        }
      }
    }
    if (v28 >= 0xB)
    {
LABEL_29:
      if (v27[5])
      {
        int v30 = *(unsigned __int16 *)((char *)v38 + 2 * v43 + v27[5] + *(int *)((char *)v38 + v27[5]) + 4);
        if (v30 != 0xFFFF)
        {
          uint64_t v31 = v27[4];
          if (v31) {
            int v32 = *(int *)((char *)v38 + v31);
          }
          else {
            int v32 = 0;
          }
          int v29 = v41 + v30 + v32;
          goto LABEL_36;
        }
      }
    }
    int v29 = 0x7FFFFFFF;
    goto LABEL_36;
  }
  unint64_t v12 = *(void *)(v6 - 8);
  BOOL v13 = sub_2964C4(*(void *)a1, v12, 1);
  uint64_t v14 = &v13[*(unsigned __int16 *)&v13[-*(int *)v13 + 4]];
  uint64_t v15 = (uint64_t)&v14[4 * HIDWORD(v12) + *(unsigned int *)v14];
  unint64_t v16 = (int *)(v15 + 4 + *(unsigned int *)(v15 + 4));
  uint64_t v8 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
  unint64_t v17 = (unsigned int *)((char *)v16 + *(unsigned __int16 *)((char *)v16 - *v16 + 6));
  int v9 = *(unsigned int *)((char *)v17 + *v17);
  unsigned int v10 = v43;
  if (v42 != v8 || v43 != v9) {
    goto LABEL_25;
  }
  return a2;
}

void sub_42FE7C()
{
  unk_255857F = 16641;
  word_2558568 = 65;
  byte_2558597 = 1;
  byte_2558581 = 0;
  byte_25585AF = 8;
  strcpy((char *)&qword_2558598, "any_mode");
  byte_25585C7 = 7;
  strcpy((char *)&dword_25585B0, "cycling");
  byte_25585DF = 7;
  strcpy((char *)&dword_25585C8, "driving");
  byte_25585F7 = 7;
  strcpy((char *)&dword_25585E0, "walking");
}

uint64_t sub_42FF28(uint64_t a1, uint64_t a2, char a3)
{
  char v15 = 15;
  uint64_t v13 = 0;
  strcpy((char *)v14, "UserPathDecoder");
  long long __p = 0;
  unint64_t v12 = 0;
  uint64_t v6 = sub_374CDC(a2, (uint64_t)v14, (uint64_t *)&__p);
  sub_435D70(a1, v6);
  uint64_t v7 = (void **)__p;
  if (__p)
  {
    uint64_t v8 = v12;
    int v9 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      int v9 = __p;
    }
    unint64_t v12 = v7;
    operator delete(v9);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = sub_37D0C0(a2);
  *(unsigned char *)(a1 + 40) = a3;
  return a1;
}

void sub_43001C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_430044()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  long long v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  char v56 = 17;
  strcpy(__p, "RequestWithGeoIds");
  uint64_t v8 = *(uint64_t **)(v0 + 32);
  uint64_t v9 = *v8;
  if (*v8)
  {
    sub_443118((uint64_t)v37, *v8);
  }
  else
  {
    BOOL v53 = 0;
    char v52 = 0;
    uint64_t v54 = 0;
    uint64_t v51 = 0;
    *(_OWORD *)int v50 = 0u;
    long long v49 = 0u;
    *(_OWORD *)uint64_t v48 = 0u;
    *(_OWORD *)unint64_t v47 = 0u;
    char v46 = 0;
    LOBYTE(v45) = 0;
    char v44 = 0;
    uint64_t v43 = 0;
    int v42 = 0;
    uint64_t v41 = 0;
    sub_29DC44((uint64_t)v37, (long long **)&v52, (long long *)v47, &v45, &v43, 0, (uint64_t)&v41, 1);
  }
  sub_710A8(1, (uint64_t)__p, (uint64_t)v37);
  sub_29E11C((uint64_t)v37);
  if (v9)
  {
LABEL_5:
    if (v56 < 0) {
      goto LABEL_6;
    }
    goto LABEL_7;
  }
  uint64_t v13 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    uint64_t v14 = v44;
    if (!v44)
    {
LABEL_18:
      if ((v46 & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_54;
    }
  }
  else
  {
    uint64_t v14 = v44;
    if (!v44) {
      goto LABEL_18;
    }
  }
  if (atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if ((v46 & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v51) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }
LABEL_54:
  operator delete((void *)v45);
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v49) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_55:
  operator delete(v50[0]);
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v48[0]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  operator delete(v48[1]);
  if ((SHIBYTE(v48[0]) & 0x80000000) == 0)
  {
LABEL_22:
    char v15 = (void **)v52;
    if (!v52) {
      goto LABEL_5;
    }
    goto LABEL_58;
  }
LABEL_57:
  operator delete(v47[0]);
  char v15 = (void **)v52;
  if (!v52) {
    goto LABEL_5;
  }
LABEL_58:
  int v32 = v53;
  if (v53 == v15)
  {
    BOOL v53 = v15;
    operator delete(v15);
    if (v56 < 0) {
      goto LABEL_6;
    }
    goto LABEL_7;
  }
  do
  {
    while (*((char *)v32 - 1) < 0)
    {
      operator delete(*(v32 - 3));
      if (*((char *)v32 - 25) < 0) {
        goto LABEL_65;
      }
LABEL_62:
      v32 -= 6;
      if (v32 == v15) {
        goto LABEL_66;
      }
    }
    if ((*((char *)v32 - 25) & 0x80000000) == 0) {
      goto LABEL_62;
    }
LABEL_65:
    operator delete(*(v32 - 6));
    v32 -= 6;
  }
  while (v32 != v15);
LABEL_66:
  BOOL v53 = v15;
  operator delete(v52);
  if (v56 < 0) {
LABEL_6:
  }
    operator delete(*(void **)__p);
LABEL_7:
  sub_47E0E4(&v57);
  unsigned __int8 v64 = 0;
  memset(v61, 0, sizeof(v61));
  sub_44CFD4(v37, *(void **)(v5 + 24));
  sub_44EF70(v37, v4, __p);
  sub_EA94B8((uint64_t)&v33, (long long *)__p);
  uint64_t v10 = v57;
  if ((void)v57)
  {
    uint64_t v11 = *((void *)&v57 + 1);
    unint64_t v12 = (void *)v57;
    if (*((void *)&v57 + 1) != (void)v57)
    {
      do
        uint64_t v11 = sub_405F44(v11 - 472);
      while (v11 != v10);
      unint64_t v12 = (void *)v57;
    }
    *((void *)&v57 + 1) = v10;
    operator delete(v12);
  }
  long long v57 = v33;
  uint64_t v58 = v34;
  uint64_t v34 = 0;
  long long v33 = 0uLL;
  if (SHIBYTE(v60) < 0)
  {
    operator delete((void *)v59);
    uint64_t v16 = v33;
    long long v59 = v35;
    uint64_t v60 = v36;
    HIBYTE(v36) = 0;
    LOBYTE(v35) = 0;
    if ((void)v33)
    {
      uint64_t v17 = *((void *)&v33 + 1);
      long long v18 = (void *)v33;
      if (*((void *)&v33 + 1) != (void)v33)
      {
        do
          uint64_t v17 = sub_405F44(v17 - 472);
        while (v17 != v16);
        long long v18 = (void *)v33;
      }
      *((void *)&v33 + 1) = v16;
      operator delete(v18);
    }
  }
  else
  {
    long long v59 = v35;
    uint64_t v60 = v36;
    HIBYTE(v36) = 0;
    LOBYTE(v35) = 0;
  }
  sub_405F44((uint64_t)__p);
  if (sub_EA80FC((char **)&v57)) {
    goto LABEL_49;
  }
  uint64_t v19 = *((void *)&v61[0] + 1);
  unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v61[0] + 1) - *(void *)&v61[0]) >> 3);
  if (*((void *)&v61[0] + 1) == *(void *)&v61[0])
  {
    sub_4467FC((uint64_t)v61, 1 - v20);
  }
  else if (v20 >= 2)
  {
    uint64_t v21 = *(void *)&v61[0] + 24;
    if (*((void *)&v61[0] + 1) != *(void *)&v61[0] + 24)
    {
      uint64_t v22 = *((void *)&v61[0] + 1);
      do
      {
        unsigned int v24 = *(void **)(v22 - 24);
        v22 -= 24;
        unsigned int v23 = v24;
        if (v24)
        {
          *(void *)(v19 - 16) = v23;
          operator delete(v23);
        }
        uint64_t v19 = v22;
      }
      while (v22 != v21);
    }
    *((void *)&v61[0] + 1) = v21;
  }
  int v25 = *(void **)&v61[0];
  unint64_t v26 = sub_EA9998((uint64_t)&v57);
  unint64_t v27 = (uint64_t)(v25[1] - *v25) >> 2;
  if (v26 <= v27)
  {
    if (v26 < v27) {
      v25[1] = *v25 + 4 * v26;
    }
  }
  else
  {
    sub_446A04((uint64_t)v25, v26 - v27);
  }
  if (!sub_43070C(v5, v2, (uint64_t)&v57))
  {
LABEL_49:
    sub_47E0E4((_OWORD *)v7);
    *(unsigned char *)(v7 + 120) = 0;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    int v30 = v39;
    if (v39) {
      goto LABEL_47;
    }
  }
  else
  {
    sub_430DCC(v5, v2, (uint64_t)&v57);
    *(_OWORD *)uint64_t v7 = v57;
    *(void *)(v7 + 16) = v58;
    long long v57 = 0uLL;
    *(_OWORD *)(v7 + 24) = v59;
    *(void *)(v7 + 40) = v60;
    long long v59 = 0uLL;
    uint64_t v60 = 0;
    *(_OWORD *)(v7 + 48) = v61[0];
    uint64_t v28 = *((void *)&v61[2] + 1);
    *(void *)(v7 + 64) = *(void *)&v61[1];
    memset(v61, 0, 24);
    *(_OWORD *)(v7 + 72) = *(_OWORD *)((char *)&v61[1] + 8);
    *(void *)(v7 + 88) = v28;
    uint64_t v58 = 0;
    memset((char *)&v61[1] + 8, 0, 24);
    int v29 = v64;
    *(unsigned char *)(v7 + 120) = v64;
    if (v29)
    {
      *(_OWORD *)(v7 + 96) = v62;
      *(void *)(v7 + 112) = v63;
      uint64_t v63 = 0;
      long long v62 = 0uLL;
    }
    int v30 = v39;
    if (v39)
    {
LABEL_47:
      unsigned int v40 = v30;
      operator delete(v30);
    }
  }
  sub_3A6318(v38);
  return sub_443A30((uint64_t)&v57);
}

void sub_430634(_Unwind_Exception *a1)
{
  sub_14A84((uint64_t)&STACK[0x1098]);
  sub_14A84((uint64_t)&STACK[0x10A8]);
  if (*(char *)(v1 + 23) < 0) {
    operator delete((void *)STACK[0x10B8]);
  }
  sub_29D7B0((uint64_t)&STACK[0x10D0]);
  sub_1A6DC((void **)&STACK[0x1118]);
  if (*(char *)(v1 + 143) < 0) {
    operator delete((void *)STACK[0x1130]);
  }
  _Unwind_Resume(a1);
}

BOOL sub_43070C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_DAA288(a2)) {
    return 1;
  }
  uint64_t v5 = sub_40EFE8(a3);
  if (v5 != sub_52058(a3)) {
    sub_435F20(a1);
  }
  BOOL result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)v9);
    sub_188FC78(v9, (uint64_t)"Could not locate the user on the path", 37);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v8 < 0) {
      operator delete(__p);
    }
    if (v10 < 0) {
      operator delete(v9[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  return result;
}

void sub_430D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_430DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_3750CC(*(void **)(a1 + 24));
  uint64_t v6 = sub_40EFE8(a3);
  uint64_t result = sub_52058(a3);
  if (v6 != result)
  {
    uint64_t v91 = a2;
    unint64_t v92 = (void **)(a3 + 72);
    uint64_t v89 = a2 + 96;
    uint64_t v90 = v5;
    do
    {
      unint64_t v11 = *(void *)(a3 + 80);
      if (v11 >= *(void *)(a3 + 88))
      {
        unint64_t v12 = sub_448AF0(v92);
      }
      else
      {
        *(_OWORD *)(v11 + 8) = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        *(_OWORD *)(v11 + 40) = 0u;
        *(_OWORD *)(v11 + 56) = 0u;
        *(_OWORD *)(v11 + 88) = 0u;
        *(_OWORD *)(v11 + 72) = 0u;
        *(void *)(v11 + 152) = 0;
        *(_OWORD *)(v11 + 136) = 0u;
        *(_OWORD *)(v11 + 120) = 0u;
        *(_OWORD *)(v11 + 104) = 0u;
        *(void *)unint64_t v11 = -1;
        *(_DWORD *)(v11 + 8) = 0x7FFFFFFF;
        *(void *)(v11 + 16) = -1;
        *(void *)(v11 + 24) = -1;
        *(void *)(v11 + 32) = 0x7FFFFFFFFFFFFFFFLL;
        *(_DWORD *)(v11 + 48) = -1935635296;
        *(void *)(v11 + 56) = 0;
        *(_DWORD *)(v11 + 63) = 0;
        *(void *)(v11 + 80) = 0;
        *(void *)(v11 + 88) = 0;
        *(_DWORD *)(v11 + 96) = 0;
        *(void *)(v11 + 72) = 0;
        *(unsigned char *)(v11 + 100) = 100;
        *(void *)(v11 + 151) = 0;
        *(_OWORD *)(v11 + 136) = 0u;
        *(_OWORD *)(v11 + 120) = 0u;
        *(_OWORD *)(v11 + 104) = 0u;
        unint64_t v12 = (char *)(v11 + 160);
      }
      *(void *)(a3 + 80) = v12;
      *((_DWORD *)v12 - 2) = 2 * (v6 != sub_40EFE8(a3));
      uint64_t v13 = (void *)sub_EADD1C(v6);
      uint64_t v14 = (unsigned __int16 *)(*v13 - *(int *)*v13);
      if (*v14 >= 9u && (uint64_t v15 = v14[4]) != 0) {
        uint64_t v16 = *(unsigned int *)(*v13 + v15);
      }
      else {
        uint64_t v16 = 0;
      }
      LODWORD(v17) = *(_DWORD *)sub_69134(v6);
      double v18 = (double)v17 / 1000000000.0 * (double)v16;
      if (v18 >= 0.0)
      {
        if (v18 >= 4.50359963e15) {
          goto LABEL_21;
        }
        uint64_t v19 = (uint64_t)(v18 + v18) + 1;
      }
      else
      {
        if (v18 <= -4.50359963e15) {
          goto LABEL_21;
        }
        uint64_t v19 = (uint64_t)(v18 + v18);
        if (v19 >= 1) {
          --v19;
        }
      }
      double v18 = (double)(v19 >> 1);
LABEL_21:
      uint64_t v20 = (uint64_t)v18;
      uint64_t v21 = sub_EADD1C(v6);
      unint64_t v22 = *(unsigned int *)(v21 + 32) | ((unint64_t)*(unsigned __int16 *)(v21 + 36) << 32);
      __int16 v23 = *(unsigned __int8 *)(sub_EADD1C(v6) + 38);
      int v25 = (char *)*((void *)v12 - 6);
      unint64_t v24 = *((void *)v12 - 5);
      if ((unint64_t)v25 < v24)
      {
        *(void *)int v25 = 0;
        *((void *)v25 + 1) = -1;
        *((_DWORD *)v25 + 4) = 0x7FFFFFFF;
        *((void *)v25 + 3) = v20;
        *((void *)v25 + 4) = v22;
        *((_WORD *)v25 + 20) = v23 | 0x100;
        *((_WORD *)v25 + 21) = 257;
        *((void *)v25 + 6) = 0;
        unint64_t v26 = v25 + 64;
        v25[56] = 0;
        goto LABEL_35;
      }
      unint64_t v27 = (unsigned char *)*((void *)v12 - 7);
      uint64_t v28 = (v25 - v27) >> 6;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 58) {
        goto LABEL_85;
      }
      uint64_t v30 = v24 - (void)v27;
      if (v30 >> 5 > v29) {
        unint64_t v29 = v30 >> 5;
      }
      BOOL v31 = (unint64_t)v30 >= 0x7FFFFFFFFFFFFFC0;
      unint64_t v32 = 0x3FFFFFFFFFFFFFFLL;
      if (!v31) {
        unint64_t v32 = v29;
      }
      if (v32 >> 58) {
        goto LABEL_86;
      }
      unint64_t v33 = v32 << 6;
      uint64_t v34 = (char *)operator new(v32 << 6);
      long long v35 = &v34[64 * v28];
      *(void *)long long v35 = 0;
      *((void *)v35 + 1) = -1;
      *((_DWORD *)v35 + 4) = 0x7FFFFFFF;
      *((void *)v35 + 3) = v20;
      *((void *)v35 + 4) = v22;
      *((_WORD *)v35 + 20) = v23 | 0x100;
      *((_WORD *)v35 + 21) = 257;
      *((void *)v35 + 6) = 0;
      v35[56] = 0;
      if (v25 == v27)
      {
        unint64_t v26 = v35 + 64;
        *((void *)v12 - 7) = v35;
        *((void *)v12 - 6) = v35 + 64;
        *((void *)v12 - 5) = &v34[v33];
        if (!v27) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v36 = &v34[64 * v28];
        do
        {
          __n128 v37 = v36 - 64;
          long long v38 = *((_OWORD *)v25 - 4);
          long long v39 = *((_OWORD *)v25 - 3);
          *((void *)v36 - 4) = *((void *)v25 - 4);
          *((_OWORD *)v36 - 4) = v38;
          *((_OWORD *)v36 - 3) = v39;
          *((_WORD *)v36 - 12) = *((_WORD *)v25 - 12);
          *((_WORD *)v36 - 11) = *((_WORD *)v25 - 11);
          uint64_t v40 = *((void *)v25 - 2);
          *(v36 - 8) = *(v25 - 8);
          *((void *)v36 - 2) = v40;
          v25 -= 64;
          v36 -= 64;
        }
        while (v25 != v27);
        unint64_t v26 = v35 + 64;
        *((void *)v12 - 7) = v37;
        *((void *)v12 - 6) = v35 + 64;
        *((void *)v12 - 5) = &v34[v33];
        if (!v27) {
          goto LABEL_34;
        }
      }
      operator delete(v27);
LABEL_34:
      uint64_t v5 = v90;
      a2 = v91;
LABEL_35:
      *((void *)v12 - 6) = v26;
      uint64_t v41 = sub_EADD1C(v6);
      sub_2954EC(v5, *(void *)(v41 + 32), (uint64_t)v93);
      int v42 = __p;
      if (__p == v95)
      {
        unint64_t v45 = 0xFFFFFFFF00000000;
        uint64_t v46 = 0xFFFFFFFFLL;
        int v48 = 0x7FFFFFFF;
        if (!__p) {
          goto LABEL_38;
        }
LABEL_37:
        long long v95 = v42;
        operator delete(v42);
        goto LABEL_38;
      }
      unint64_t v43 = sub_2E1AA4((uint64_t)v93);
      unsigned int v44 = v43;
      unint64_t v45 = v43 & 0xFFFFFFFF00000000;
      int v42 = __p;
      uint64_t v46 = v44;
      int v48 = v47;
      if (__p) {
        goto LABEL_37;
      }
LABEL_38:
      *((void *)v12 - 20) = v45 | v46;
      *((_DWORD *)v12 - 38) = v48;
      if (v6 == sub_40EFE8(a3) && sub_DAA288(a2))
      {
        long long v49 = v12 - 160;
        *(_OWORD *)long long v49 = *(_OWORD *)a2;
        long long v50 = *(_OWORD *)(a2 + 16);
        long long v51 = *(_OWORD *)(a2 + 32);
        long long v52 = *(_OWORD *)(a2 + 48);
        *(_DWORD *)(v49 + 63) = *(_DWORD *)(a2 + 63);
        *((_OWORD *)v49 + 2) = v51;
        *((_OWORD *)v49 + 3) = v52;
        *((_OWORD *)v49 + 1) = v50;
        if (v12 - 160 != (char *)a2) {
          sub_147D0((void *)v12 - 11, *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
        }
        int v53 = *(_DWORD *)v89;
        *(v12 - 60) = *(unsigned char *)(v89 + 4);
        *((_DWORD *)v12 - 16) = v53;
      }
      unint64_t v54 = *(void *)(a3 + 80);
      if (v54 >= *(void *)(a3 + 88))
      {
        unint64_t v55 = sub_448AF0(v92);
      }
      else
      {
        *(_OWORD *)(v54 + 8) = 0u;
        *(_OWORD *)(v54 + 24) = 0u;
        *(_OWORD *)(v54 + 40) = 0u;
        *(_OWORD *)(v54 + 56) = 0u;
        *(_OWORD *)(v54 + 88) = 0u;
        *(_OWORD *)(v54 + 72) = 0u;
        *(void *)(v54 + 152) = 0;
        *(_OWORD *)(v54 + 136) = 0u;
        *(_OWORD *)(v54 + 120) = 0u;
        *(_OWORD *)(v54 + 104) = 0u;
        *(void *)unint64_t v54 = -1;
        *(_DWORD *)(v54 + 8) = 0x7FFFFFFF;
        *(void *)(v54 + 16) = -1;
        *(void *)(v54 + 24) = -1;
        *(void *)(v54 + 32) = 0x7FFFFFFFFFFFFFFFLL;
        *(_DWORD *)(v54 + 48) = -1935635296;
        *(void *)(v54 + 56) = 0;
        *(_DWORD *)(v54 + 63) = 0;
        *(void *)(v54 + 80) = 0;
        *(void *)(v54 + 88) = 0;
        *(_DWORD *)(v54 + 96) = 0;
        *(void *)(v54 + 72) = 0;
        *(unsigned char *)(v54 + 100) = 100;
        *(void *)(v54 + 151) = 0;
        *(_OWORD *)(v54 + 136) = 0u;
        *(_OWORD *)(v54 + 120) = 0u;
        *(_OWORD *)(v54 + 104) = 0u;
        unint64_t v55 = (char *)(v54 + 160);
      }
      *(void *)(a3 + 80) = v55;
      if (v6 == sub_52058(a3) - 472) {
        int v56 = 1;
      }
      else {
        int v56 = 2;
      }
      *((_DWORD *)v55 - 2) = v56;
      long long v57 = (void *)sub_EADD34(v6);
      uint64_t v58 = (unsigned __int16 *)(*v57 - *(int *)*v57);
      if (*v58 >= 9u && (uint64_t v59 = v58[4]) != 0) {
        uint64_t v60 = *(unsigned int *)(*v57 + v59);
      }
      else {
        uint64_t v60 = 0;
      }
      LODWORD(v61) = *(_DWORD *)sub_EADAD0(v6);
      double v62 = (double)v61 / 1000000000.0 * (double)v60;
      if (v62 >= 0.0)
      {
        if (v62 >= 4.50359963e15) {
          goto LABEL_61;
        }
        uint64_t v63 = (uint64_t)(v62 + v62) + 1;
      }
      else
      {
        if (v62 <= -4.50359963e15) {
          goto LABEL_61;
        }
        uint64_t v63 = (uint64_t)(v62 + v62);
        if (v63 >= 1) {
          --v63;
        }
      }
      double v62 = (double)(v63 >> 1);
LABEL_61:
      uint64_t v64 = (uint64_t)v62;
      uint64_t v65 = sub_EADD34(v6);
      unint64_t v66 = *(unsigned int *)(v65 + 32) | ((unint64_t)*(unsigned __int16 *)(v65 + 36) << 32);
      __int16 v67 = *(unsigned __int8 *)(sub_EADD34(v6) + 38);
      uint64_t v69 = (char *)*((void *)v55 - 6);
      unint64_t v68 = *((void *)v55 - 5);
      if ((unint64_t)v69 < v68)
      {
        *(void *)uint64_t v69 = 0;
        *((void *)v69 + 1) = -1;
        *((_DWORD *)v69 + 4) = 0x7FFFFFFF;
        *((void *)v69 + 3) = v64;
        *((void *)v69 + 4) = v66;
        *((_WORD *)v69 + 20) = v67 | 0x100;
        *((_WORD *)v69 + 21) = 257;
        *((void *)v69 + 6) = 0;
        long long v70 = v69 + 64;
        v69[56] = 0;
        goto LABEL_75;
      }
      long long v71 = (unsigned char *)*((void *)v55 - 7);
      uint64_t v72 = (v69 - v71) >> 6;
      unint64_t v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) >> 58) {
LABEL_85:
      }
        sub_2E00();
      uint64_t v74 = v68 - (void)v71;
      if (v74 >> 5 > v73) {
        unint64_t v73 = v74 >> 5;
      }
      BOOL v31 = (unint64_t)v74 >= 0x7FFFFFFFFFFFFFC0;
      unint64_t v75 = 0x3FFFFFFFFFFFFFFLL;
      if (!v31) {
        unint64_t v75 = v73;
      }
      if (v75 >> 58) {
LABEL_86:
      }
        sub_188D718();
      unint64_t v76 = v75 << 6;
      unint64_t v77 = (char *)operator new(v75 << 6);
      uint64_t v78 = &v77[64 * v72];
      *(void *)uint64_t v78 = 0;
      *((void *)v78 + 1) = -1;
      *((_DWORD *)v78 + 4) = 0x7FFFFFFF;
      *((void *)v78 + 3) = v64;
      *((void *)v78 + 4) = v66;
      *((_WORD *)v78 + 20) = v67 | 0x100;
      *((_WORD *)v78 + 21) = 257;
      *((void *)v78 + 6) = 0;
      v78[56] = 0;
      if (v69 == v71)
      {
        long long v70 = v78 + 64;
        *((void *)v55 - 7) = v78;
        *((void *)v55 - 6) = v78 + 64;
        *((void *)v55 - 5) = &v77[v76];
        if (!v71) {
          goto LABEL_74;
        }
      }
      else
      {
        unint64_t v79 = &v77[64 * v72];
        do
        {
          uint64_t v80 = v79 - 64;
          long long v81 = *((_OWORD *)v69 - 4);
          long long v82 = *((_OWORD *)v69 - 3);
          *((void *)v79 - 4) = *((void *)v69 - 4);
          *((_OWORD *)v79 - 4) = v81;
          *((_OWORD *)v79 - 3) = v82;
          *((_WORD *)v79 - 12) = *((_WORD *)v69 - 12);
          *((_WORD *)v79 - 11) = *((_WORD *)v69 - 11);
          uint64_t v83 = *((void *)v69 - 2);
          *(v79 - 8) = *(v69 - 8);
          *((void *)v79 - 2) = v83;
          v69 -= 64;
          v79 -= 64;
        }
        while (v69 != v71);
        long long v70 = v78 + 64;
        *((void *)v55 - 7) = v80;
        *((void *)v55 - 6) = v78 + 64;
        *((void *)v55 - 5) = &v77[v76];
        if (!v71) {
          goto LABEL_74;
        }
      }
      operator delete(v71);
LABEL_74:
      uint64_t v5 = v90;
      a2 = v91;
LABEL_75:
      *((void *)v55 - 6) = v70;
      uint64_t v84 = sub_EADD34(v6);
      sub_2954EC(v5, *(void *)(v84 + 32), (uint64_t)v93);
      unint64_t v85 = __p;
      if (__p != v95)
      {
        unint64_t v86 = sub_2E40A4((uint64_t)v93);
        unsigned int v87 = v86;
        unint64_t v8 = v86 & 0xFFFFFFFF00000000;
        unint64_t v85 = __p;
        uint64_t v9 = v87;
        int v10 = v88;
        if (!__p) {
          goto LABEL_5;
        }
LABEL_4:
        long long v95 = v85;
        operator delete(v85);
        goto LABEL_5;
      }
      unint64_t v8 = 0xFFFFFFFF00000000;
      uint64_t v9 = 0xFFFFFFFFLL;
      int v10 = 0x7FFFFFFF;
      if (__p) {
        goto LABEL_4;
      }
LABEL_5:
      *((void *)v55 - 20) = v8 | v9;
      *((_DWORD *)v55 - 38) = v10;
      v6 += 472;
      uint64_t result = sub_52058(a3);
    }
    while (v6 != result);
  }
  return result;
}

void sub_431594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_4315B4(void *a1)
{
  uint64_t v2 = (void *)a1[520];
  if (v2)
  {
    a1[521] = v2;
    operator delete(v2);
  }
  sub_3A6318(a1 + 4);
  return a1;
}

uint64_t sub_4315F0()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  long long v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  char v30 = 20;
  strcpy(__p, "RequestWithZilchPath");
  unint64_t v8 = *(uint64_t **)(v0 + 32);
  uint64_t v9 = *v8;
  if (*v8)
  {
    sub_443118((uint64_t)&v31, *v8);
  }
  else
  {
    long long v51 = 0;
    long long v50 = 0;
    uint64_t v52 = 0;
    uint64_t v49 = 0;
    long long v48 = 0u;
    long long v47 = 0u;
    long long v46 = 0u;
    long long v45 = 0u;
    char v44 = 0;
    LOBYTE(v43) = 0;
    int v42 = 0;
    uint64_t v41 = 0;
    uint64_t v40 = 0;
    uint64_t v39 = 0;
    sub_29DC44((uint64_t)&v31, (long long **)&v50, &v45, &v43, &v41, 0, (uint64_t)&v39, 1);
  }
  sub_710A8(1, (uint64_t)__p, (uint64_t)&v31);
  sub_29E11C((uint64_t)&v31);
  if (v9)
  {
LABEL_5:
    if (v30 < 0) {
      goto LABEL_6;
    }
    goto LABEL_7;
  }
  uint64_t v16 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unint64_t v17 = v42;
    if (!v42)
    {
LABEL_23:
      if ((v44 & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_48;
    }
  }
  else
  {
    unint64_t v17 = v42;
    if (!v42) {
      goto LABEL_23;
    }
  }
  if (atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if ((v44 & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v49) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_49;
  }
LABEL_48:
  operator delete((void *)v43);
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
LABEL_25:
    if ((SHIBYTE(v47) & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }
LABEL_49:
  operator delete((void *)v48);
  if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SBYTE7(v46) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }
LABEL_50:
  operator delete(*((void **)&v46 + 1));
  if ((SBYTE7(v46) & 0x80000000) == 0)
  {
LABEL_27:
    double v18 = (void **)v50;
    if (!v50) {
      goto LABEL_5;
    }
    goto LABEL_52;
  }
LABEL_51:
  operator delete((void *)v45);
  double v18 = (void **)v50;
  if (!v50) {
    goto LABEL_5;
  }
LABEL_52:
  uint64_t v28 = v51;
  if (v51 == v18)
  {
    long long v51 = v18;
    operator delete(v18);
    if (v30 < 0) {
      goto LABEL_6;
    }
    goto LABEL_7;
  }
  do
  {
    while (*((char *)v28 - 1) < 0)
    {
      operator delete(*(v28 - 3));
      if (*((char *)v28 - 25) < 0) {
        goto LABEL_59;
      }
LABEL_56:
      v28 -= 6;
      if (v28 == v18) {
        goto LABEL_60;
      }
    }
    if ((*((char *)v28 - 25) & 0x80000000) == 0) {
      goto LABEL_56;
    }
LABEL_59:
    operator delete(*(v28 - 6));
    v28 -= 6;
  }
  while (v28 != v18);
LABEL_60:
  long long v51 = v18;
  operator delete(v50);
  if (v30 < 0) {
LABEL_6:
  }
    operator delete(*(void **)__p);
LABEL_7:
  sub_47E0E4(&v53);
  unsigned __int8 v61 = 0;
  long long v57 = 0u;
  memset(v58, 0, sizeof(v58));
  __n128 v37 = 0;
  uint64_t v36 = 0;
  uint64_t v38 = 0;
  uint64_t v10 = *v4;
  if (*v4 != v4[1])
  {
    if (*(char *)(v10 + 23) < 0)
    {
      uint64_t v12 = *(void *)v10;
      uint64_t v11 = *(void *)(v10 + 8);
    }
    else
    {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
      uint64_t v12 = *v4;
    }
    sub_1108B94((uint64_t)&v35, v12, v11);
    sub_1106C64();
  }
  sub_EA9174((uint64_t)&v31, (uint64_t)&v36);
  uint64_t v13 = v53;
  if ((void)v53)
  {
    uint64_t v14 = *((void *)&v53 + 1);
    uint64_t v15 = (void *)v53;
    if (*((void *)&v53 + 1) != (void)v53)
    {
      do
        uint64_t v14 = sub_405F44(v14 - 472);
      while (v14 != v13);
      uint64_t v15 = (void *)v53;
    }
    *((void *)&v53 + 1) = v13;
    operator delete(v15);
  }
  long long v53 = v31;
  uint64_t v54 = v32;
  uint64_t v32 = 0;
  long long v31 = 0uLL;
  if (SHIBYTE(v56) < 0)
  {
    operator delete((void *)v55);
    long long v55 = v33;
    uint64_t v19 = v31;
    uint64_t v56 = v34;
    HIBYTE(v34) = 0;
    LOBYTE(v33) = 0;
    if ((void)v31)
    {
      uint64_t v20 = *((void *)&v31 + 1);
      uint64_t v21 = (void *)v31;
      if (*((void *)&v31 + 1) != (void)v31)
      {
        do
          uint64_t v20 = sub_405F44(v20 - 472);
        while (v20 != v19);
        uint64_t v21 = (void *)v31;
      }
      *((void *)&v31 + 1) = v19;
      operator delete(v21);
    }
  }
  else
  {
    long long v55 = v33;
    uint64_t v56 = v34;
  }
  if (!sub_43070C(v5, v2, (uint64_t)&v53))
  {
    sub_47E0E4((_OWORD *)v7);
    *(unsigned char *)(v7 + 120) = 0;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
LABEL_39:
    unint64_t v24 = v36;
    if (v36) {
      goto LABEL_40;
    }
    return sub_443A30((uint64_t)&v53);
  }
  sub_430DCC(v5, v2, (uint64_t)&v53);
  uint64_t v22 = v58[0];
  *(void *)(v7 + 16) = v54;
  *(void *)(v7 + 40) = v56;
  *(_OWORD *)uint64_t v7 = v53;
  long long v53 = 0uLL;
  *(_OWORD *)(v7 + 24) = v55;
  long long v55 = 0uLL;
  uint64_t v56 = 0;
  *(_OWORD *)(v7 + 48) = v57;
  *(void *)(v7 + 64) = v22;
  v58[0] = 0;
  long long v57 = 0uLL;
  *(_OWORD *)(v7 + 72) = *(_OWORD *)&v58[1];
  *(void *)(v7 + 88) = v58[3];
  uint64_t v54 = 0;
  memset(&v58[1], 0, 24);
  int v23 = v61;
  *(unsigned char *)(v7 + 120) = v61;
  if (!v23) {
    goto LABEL_39;
  }
  *(_OWORD *)(v7 + 96) = v59;
  *(void *)(v7 + 112) = v60;
  uint64_t v60 = 0;
  long long v59 = 0uLL;
  unint64_t v24 = v36;
  if (!v36) {
    return sub_443A30((uint64_t)&v53);
  }
LABEL_40:
  uint64_t v25 = (uint64_t)v37;
  unint64_t v26 = v24;
  if (v37 != v24)
  {
    do
      uint64_t v25 = sub_405F44(v25 - 472);
    while ((void *)v25 != v24);
    unint64_t v26 = v36;
  }
  __n128 v37 = v24;
  operator delete(v26);
  return sub_443A30((uint64_t)&v53);
}

void sub_432204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&STACK[0x200]);
  sub_1106CAC((uint64_t *)&STACK[0x1260]);
  sub_4323C0((void **)&STACK[0x1290]);
  sub_443A30(v44 - 240);
  _Unwind_Resume(a1);
}

void **sub_4323C0(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_405F44(v3 - 472);
      while ((void *)v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_43241C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  if (a6) {
    uint64_t v10 = "RequestWithPathCodecDecoderPath";
  }
  else {
    uint64_t v10 = "RequestWithPathCodecDecoderPath.Sky";
  }
  if (a6) {
    size_t v11 = 31;
  }
  else {
    size_t v11 = 35;
  }
  v316 = (char *)((v11 | 7) - 0x7FFFFFFFFFFFFFFFLL);
  __p[0] = operator new((v11 | 7) + 1);
  __p[1] = (void *)v11;
  memcpy(__p[0], v10, v11);
  *((unsigned char *)__p[0] + v11) = 0;
  uint64_t v239 = a1;
  uint64_t v12 = *(uint64_t **)(a1 + 32);
  uint64_t v13 = *v12;
  if (*v12)
  {
    sub_443118((uint64_t)v343, *v12);
  }
  else
  {
    v358 = 0;
    v357 = 0;
    uint64_t v359 = 0;
    uint64_t v356 = 0;
    long long v355 = 0u;
    long long v354 = 0u;
    long long v353 = 0u;
    long long v352 = 0u;
    char v351 = 0;
    LOBYTE(v350) = 0;
    v349 = 0;
    uint64_t v348 = 0;
    v347 = 0;
    uint64_t v346 = 0;
    sub_29DC44((uint64_t)v343, (long long **)&v357, &v352, &v350, &v348, 0, (uint64_t)&v346, 1);
  }
  sub_710A8(1, (uint64_t)__p, (uint64_t)v343);
  sub_29E11C((uint64_t)v343);
  if (v13)
  {
LABEL_11:
    if (SHIBYTE(v316) < 0) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  unint64_t v152 = v347;
  if (v347 && !atomic_fetch_add(&v347->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
    std::__shared_weak_count::__release_weak(v152);
    int v153 = v349;
    if (!v349)
    {
LABEL_253:
      if ((v351 & 0x80000000) == 0) {
        goto LABEL_254;
      }
      goto LABEL_297;
    }
  }
  else
  {
    int v153 = v349;
    if (!v349) {
      goto LABEL_253;
    }
  }
  if (atomic_fetch_add(&v153->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_253;
  }
  ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
  std::__shared_weak_count::__release_weak(v153);
  if ((v351 & 0x80000000) == 0)
  {
LABEL_254:
    if ((SHIBYTE(v356) & 0x80000000) == 0) {
      goto LABEL_255;
    }
    goto LABEL_298;
  }
LABEL_297:
  operator delete((void *)v350);
  if ((SHIBYTE(v356) & 0x80000000) == 0)
  {
LABEL_255:
    if ((SHIBYTE(v354) & 0x80000000) == 0) {
      goto LABEL_256;
    }
    goto LABEL_299;
  }
LABEL_298:
  operator delete((void *)v355);
  if ((SHIBYTE(v354) & 0x80000000) == 0)
  {
LABEL_256:
    if ((SBYTE7(v353) & 0x80000000) == 0) {
      goto LABEL_257;
    }
    goto LABEL_300;
  }
LABEL_299:
  operator delete(*((void **)&v353 + 1));
  if ((SBYTE7(v353) & 0x80000000) == 0)
  {
LABEL_257:
    int v154 = (void **)v357;
    if (!v357) {
      goto LABEL_11;
    }
    goto LABEL_301;
  }
LABEL_300:
  operator delete((void *)v352);
  int v154 = (void **)v357;
  if (!v357) {
    goto LABEL_11;
  }
LABEL_301:
  long long v172 = v358;
  if (v358 == v154)
  {
    v358 = v154;
    operator delete(v154);
    if (SHIBYTE(v316) < 0) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  do
  {
    while (*((char *)v172 - 1) < 0)
    {
      operator delete(*(v172 - 3));
      if (*((char *)v172 - 25) < 0) {
        goto LABEL_308;
      }
LABEL_305:
      v172 -= 6;
      if (v172 == v154) {
        goto LABEL_309;
      }
    }
    if ((*((char *)v172 - 25) & 0x80000000) == 0) {
      goto LABEL_305;
    }
LABEL_308:
    operator delete(*(v172 - 6));
    v172 -= 6;
  }
  while (v172 != v154);
LABEL_309:
  v358 = v154;
  operator delete(v357);
  if (SHIBYTE(v316) < 0) {
LABEL_12:
  }
    operator delete(__p[0]);
LABEL_13:
  sub_47E0E4(&v360);
  char v369 = 0;
  long long v364 = 0u;
  long long v365 = 0u;
  long long v366 = 0u;
  sub_42CBF8((uint64_t)v343, *(void **)(a1 + 24));
  *(void *)&v338[0] = 0x4039000000000000;
  DWORD2(v338[0]) = 5000;
  v338[1] = xmmword_20E7C10;
  v338[2] = xmmword_20E7C20;
  *(void *)&long long v339 = 0;
  DWORD2(v339) = 20000000;
  *(void *)&long long v340 = 0x3FF199999999999ALL;
  *((void *)&v340 + 1) = 0x3E800002710;
  *(_DWORD *)v341 = 10000;
  strcpy(&v341[4], "\n");
  *(_OWORD *)&v341[8] = xmmword_20E7C00;
  *(void *)&v341[24] = 0x3FE6147AE147AE14;
  long long v334 = v340;
  long long v335 = *(_OWORD *)v341;
  long long v336 = *(_OWORD *)&v341[16];
  long long v330 = v338[0];
  long long v331 = xmmword_20E7C10;
  long long v332 = xmmword_20E7C20;
  LOWORD(v342) = 0;
  v329 = v343;
  uint64_t v337 = v342;
  long long v333 = v339;
  sub_410808((uint64_t)&v329, (uint64_t)&off_24F6948, 4);
  uint64_t v245 = sub_3750CC(*(void **)(a1 + 24));
  v327 = 0;
  v326 = 0;
  unint64_t v328 = 0;
  uint64_t v242 = *a2;
  uint64_t v237 = a2[1];
  if (*a2 == v237)
  {
    char v155 = 0;
    goto LABEL_343;
  }
  char v244 = 0;
  uint64_t v14 = "PathCodecDecodingFailure.Sky.TransportModeFlip";
  if (!a7) {
    uint64_t v14 = "PathCodecDecodingFailure.Sky";
  }
  __src = v14;
  uint64_t v15 = 28;
  if (a7) {
    uint64_t v15 = 46;
  }
  size_t v229 = v15;
  uint64_t v16 = v15 | 7;
  size_t __sz = v16 + 1;
  uint64_t v228 = v16 - 0x7FFFFFFFFFFFFFFFLL;
  v235 = (_OWORD *)(a8 + 48);
  char v247 = 1;
  char v248 = 1;
  while (2)
  {
    sub_1115F80(v255, 0, 0);
    if ((sub_1880FAC(v255, v242) & 1) == 0)
    {
      if (a6)
      {
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)__p);
          sub_188FC78(__p, (uint64_t)"Could not parse the path_leg.", 29);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&v291, 3u);
          if (SBYTE7(v292) < 0) {
            operator delete((void *)v291);
          }
          __p[0] = v232;
          *(void **)((char *)__p + *((void *)v232 - 3)) = v233;
          if (v325 < 0) {
            operator delete(v324);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        v313 = operator new(0x20uLL);
        long long v314 = xmmword_20B91C0;
        strcpy((char *)v313, "PathCodecDecodingFailure");
        unsigned int v156 = *(uint64_t **)(v239 + 32);
        uint64_t v157 = *v156;
        if (*v156)
        {
          sub_443118((uint64_t)__p, *v156);
        }
        else
        {
          long long v312 = 0uLL;
          v311 = 0;
          v295 = 0;
          long long v293 = 0u;
          long long v294 = 0u;
          long long v291 = 0u;
          long long v292 = 0u;
          HIBYTE(v310) = 0;
          LOBYTE(v309) = 0;
          v308 = 0;
          uint64_t v307 = 0;
          v306 = 0;
          uint64_t v305 = 0;
          sub_29DC44((uint64_t)__p, (long long **)&v311, &v291, (long long *)&v309, &v307, 0, (uint64_t)&v305, 1);
        }
        sub_710A8(1, (uint64_t)&v313, (uint64_t)__p);
        sub_29E11C((uint64_t)__p);
        if (v157)
        {
LABEL_465:
          if (SHIBYTE(v314) < 0) {
            operator delete(v313);
          }
          sub_47E0E4((_OWORD *)a8);
          *(unsigned char *)(a8 + 120) = 0;
          _OWORD *v235 = 0u;
          *(_OWORD *)(a8 + 64) = 0u;
          *(_OWORD *)(a8 + 80) = 0u;
          sub_1116458(v255);
          char v204 = (char *)v326;
          if (v326) {
            goto LABEL_410;
          }
          goto LABEL_414;
        }
        uint64_t v173 = v306;
        if (v306 && !atomic_fetch_add(&v306->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
          std::__shared_weak_count::__release_weak(v173);
        }
        long long v174 = v308;
        if (v308 && !atomic_fetch_add(&v308->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
        }
        if (SHIBYTE(v310) < 0)
        {
          operator delete(v309);
          if ((SHIBYTE(v295) & 0x80000000) == 0)
          {
LABEL_321:
            if ((SHIBYTE(v293) & 0x80000000) == 0) {
              goto LABEL_322;
            }
            goto LABEL_438;
          }
        }
        else if ((SHIBYTE(v295) & 0x80000000) == 0)
        {
          goto LABEL_321;
        }
        operator delete((void *)v294);
        if ((SHIBYTE(v293) & 0x80000000) == 0)
        {
LABEL_322:
          if ((SBYTE7(v292) & 0x80000000) == 0) {
            goto LABEL_323;
          }
          goto LABEL_439;
        }
LABEL_438:
        operator delete(*((void **)&v292 + 1));
        if ((SBYTE7(v292) & 0x80000000) == 0)
        {
LABEL_323:
          uint64_t v175 = (void **)v311;
          if (!v311) {
            goto LABEL_465;
          }
LABEL_440:
          v219 = (void **)v312;
          v220 = v175;
          if ((void **)v312 == v175)
          {
LABEL_448:
            *(void *)&long long v312 = v175;
LABEL_464:
            operator delete(v220);
            goto LABEL_465;
          }
          while (1)
          {
            if (*((char *)v219 - 1) < 0)
            {
              operator delete(*(v219 - 3));
              if ((*((char *)v219 - 25) & 0x80000000) == 0) {
                goto LABEL_443;
              }
LABEL_446:
              operator delete(*(v219 - 6));
              v219 -= 6;
              if (v219 == v175)
              {
LABEL_447:
                v220 = v311;
                goto LABEL_448;
              }
            }
            else
            {
              if (*((char *)v219 - 25) < 0) {
                goto LABEL_446;
              }
LABEL_443:
              v219 -= 6;
              if (v219 == v175) {
                goto LABEL_447;
              }
            }
          }
        }
LABEL_439:
        operator delete((void *)v291);
        uint64_t v175 = (void **)v311;
        if (!v311) {
          goto LABEL_465;
        }
        goto LABEL_440;
      }
      uint64_t v158 = sub_69510();
      LODWORD(__p[0]) = sub_69124((uint64_t)v158);
      sub_677F0((unsigned int *)__p, (uint64_t)&v313);
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        uint64_t v159 = sub_188FC78(__p, (uint64_t)"Could not parse the path_leg from ", 34);
        if (v314 >= 0) {
          long long v160 = &v313;
        }
        else {
          long long v160 = v313;
        }
        if (v314 >= 0) {
          uint64_t v161 = HIBYTE(v314);
        }
        else {
          uint64_t v161 = v314;
        }
        unint64_t v162 = sub_188FC78(v159, (uint64_t)v160, v161);
        unsigned int v163 = sub_188FC78(v162, (uint64_t)" request ", 9);
        uint64_t v164 = sub_68EE4((uint64_t)v158);
        int v165 = *(char *)(v164 + 23);
        if (v165 >= 0) {
          uint64_t v166 = v164;
        }
        else {
          uint64_t v166 = *(void *)v164;
        }
        if (v165 >= 0) {
          uint64_t v167 = *(unsigned __int8 *)(v164 + 23);
        }
        else {
          uint64_t v167 = *(void *)(v164 + 8);
        }
        sub_188FC78(v163, v166, v167);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v291, 3u);
        if (SBYTE7(v292) < 0) {
          operator delete((void *)v291);
        }
        __p[0] = v232;
        *(void **)((char *)__p + *((void *)v232 - 3)) = v233;
        if (v325 < 0) {
          operator delete(v324);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      v311 = operator new(0x20uLL);
      long long v312 = xmmword_20B91B0;
      strcpy((char *)v311, "PathCodecDecodingFailure.Sky");
      int v168 = *(uint64_t **)(v239 + 32);
      uint64_t v169 = *v168;
      if (*v168)
      {
        sub_443118((uint64_t)__p, *v168);
      }
      else
      {
        long long v310 = 0uLL;
        v309 = 0;
        v295 = 0;
        long long v293 = 0u;
        long long v294 = 0u;
        long long v291 = 0u;
        long long v292 = 0u;
        HIBYTE(v304) = 0;
        LOBYTE(v303) = 0;
        v302 = 0;
        uint64_t v301 = 0;
        v300 = 0;
        uint64_t v299 = 0;
        sub_29DC44((uint64_t)__p, (long long **)&v309, &v291, &v303, &v301, 0, (uint64_t)&v299, 1);
      }
      sub_710A8(1, (uint64_t)&v311, (uint64_t)__p);
      sub_29E11C((uint64_t)__p);
      if (v169) {
        goto LABEL_462;
      }
      v176 = v300;
      if (v300 && !atomic_fetch_add(&v300->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
      }
      long long v177 = v302;
      if (v302 && !atomic_fetch_add(&v302->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
      if (SHIBYTE(v304) < 0)
      {
        operator delete((void *)v303);
        if ((SHIBYTE(v295) & 0x80000000) == 0)
        {
LABEL_335:
          if ((SHIBYTE(v293) & 0x80000000) == 0) {
            goto LABEL_336;
          }
          goto LABEL_451;
        }
      }
      else if ((SHIBYTE(v295) & 0x80000000) == 0)
      {
        goto LABEL_335;
      }
      operator delete((void *)v294);
      if ((SHIBYTE(v293) & 0x80000000) == 0)
      {
LABEL_336:
        if ((SBYTE7(v292) & 0x80000000) == 0) {
          goto LABEL_337;
        }
LABEL_452:
        operator delete((void *)v291);
        uint64_t v178 = (void **)v309;
        if (v309) {
          goto LABEL_453;
        }
LABEL_462:
        if ((SHIBYTE(v312) & 0x80000000) == 0) {
          goto LABEL_465;
        }
        v220 = v311;
        goto LABEL_464;
      }
LABEL_451:
      operator delete(*((void **)&v292 + 1));
      if ((SBYTE7(v292) & 0x80000000) == 0)
      {
LABEL_337:
        uint64_t v178 = (void **)v309;
        if (!v309) {
          goto LABEL_462;
        }
LABEL_453:
        v221 = (void **)v310;
        v222 = v178;
        if ((void **)v310 == v178)
        {
LABEL_461:
          *(void *)&long long v310 = v178;
          operator delete(v222);
          goto LABEL_462;
        }
        while (1)
        {
          if (*((char *)v221 - 1) < 0)
          {
            operator delete(*(v221 - 3));
            if ((*((char *)v221 - 25) & 0x80000000) == 0) {
              goto LABEL_456;
            }
LABEL_459:
            operator delete(*(v221 - 6));
            v221 -= 6;
            if (v221 == v178)
            {
LABEL_460:
              v222 = v309;
              goto LABEL_461;
            }
          }
          else
          {
            if (*((char *)v221 - 25) < 0) {
              goto LABEL_459;
            }
LABEL_456:
            v221 -= 6;
            if (v221 == v178) {
              goto LABEL_460;
            }
          }
        }
      }
      goto LABEL_452;
    }
    sub_110B110((uint64_t)v338, (uint64_t)v255);
    if ((int)v256 >= 1)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 8 * v256;
      do
      {
        while (1)
        {
          uint64_t v19 = *(void *)(*((void *)&v256 + 1) + v17 + 8);
          if (*(_DWORD *)(v19 + 84) != 2) {
            break;
          }
          char v244 = 1;
          v17 += 8;
          if (v18 == v17) {
            goto LABEL_30;
          }
        }
        sub_42CBFC((uint64_t)v343, *(void *)(v19 + 48));
        char v21 = a6 ^ 1;
        if (v17) {
          char v21 = 0;
        }
        if (v20) {
          char v22 = 1;
        }
        else {
          char v22 = v21;
        }
        sub_42CBFC((uint64_t)v343, *(void *)(v19 + 48));
        v247 &= v22;
        v248 &= (v23 & 1) == 0;
        v17 += 8;
      }
      while (v18 != v17);
    }
LABEL_30:
    LOBYTE(v342) = v326 == v327;
    sub_410814((uint64_t)&v329, v338);
    sub_40F460((uint64_t *)&v329, (uint64_t)v255, (uint64_t)&v291);
    LOBYTE(v342) = 0;
    uint64_t v240 = *((void *)&v292 + 1);
    uint64_t v241 = v292;
    if ((void)v292 == *((void *)&v292 + 1))
    {
      if (a6)
      {
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)__p);
          sub_188FC78(__p, (uint64_t)"Decoding path with path-codec failed.", 37);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&v313, 3u);
          if (SHIBYTE(v314) < 0) {
            operator delete(v313);
          }
          __p[0] = v232;
          *(void **)((char *)__p + *((void *)v232 - 3)) = v233;
          if (v325 < 0) {
            operator delete(v324);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        v313 = operator new(0x20uLL);
        long long v314 = xmmword_20B91C0;
        strcpy((char *)v313, "PathCodecDecodingFailure");
        uint64_t v115 = *(uint64_t **)(v239 + 32);
        uint64_t v116 = *v115;
        if (*v115)
        {
          sub_443118((uint64_t)__p, *v115);
        }
        else
        {
          v289 = 0;
          v288 = 0;
          uint64_t v290 = 0;
          uint64_t v287 = 0;
          long long v285 = 0u;
          long long v286 = 0u;
          long long v283 = 0u;
          long long v284 = 0u;
          char v282 = 0;
          LOBYTE(v281) = 0;
          v280 = 0;
          uint64_t v279 = 0;
          v278 = 0;
          uint64_t v277 = 0;
          sub_29DC44((uint64_t)__p, (long long **)&v288, &v283, &v281, &v279, 0, (uint64_t)&v277, 1);
        }
        sub_710A8(1, (uint64_t)&v313, (uint64_t)__p);
        sub_29E11C((uint64_t)__p);
        if (v116) {
          goto LABEL_210;
        }
        signed int v140 = v278;
        if (v278 && !atomic_fetch_add(&v278->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
          v141 = v280;
          if (!v280) {
            goto LABEL_173;
          }
        }
        else
        {
          v141 = v280;
          if (!v280) {
            goto LABEL_173;
          }
        }
        if (!atomic_fetch_add(&v141->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
          if ((v282 & 0x80000000) == 0)
          {
LABEL_174:
            if ((SHIBYTE(v287) & 0x80000000) == 0) {
              goto LABEL_175;
            }
            goto LABEL_197;
          }
LABEL_196:
          operator delete((void *)v281);
          if ((SHIBYTE(v287) & 0x80000000) == 0)
          {
LABEL_175:
            if ((SHIBYTE(v285) & 0x80000000) == 0) {
              goto LABEL_176;
            }
            goto LABEL_198;
          }
LABEL_197:
          operator delete((void *)v286);
          if ((SHIBYTE(v285) & 0x80000000) == 0)
          {
LABEL_176:
            if ((SBYTE7(v284) & 0x80000000) == 0) {
              goto LABEL_177;
            }
            goto LABEL_199;
          }
LABEL_198:
          operator delete(*((void **)&v284 + 1));
          if ((SBYTE7(v284) & 0x80000000) == 0)
          {
LABEL_177:
            uint64_t v142 = (void **)v288;
            if (!v288) {
              goto LABEL_210;
            }
            goto LABEL_200;
          }
LABEL_199:
          operator delete((void *)v283);
          uint64_t v142 = (void **)v288;
          if (!v288) {
            goto LABEL_210;
          }
LABEL_200:
          uint64_t v147 = v289;
          unint64_t v143 = v142;
          if (v289 == v142)
          {
LABEL_208:
            v289 = v142;
LABEL_209:
            operator delete(v143);
            goto LABEL_210;
          }
          while (1)
          {
            if (*((char *)v147 - 1) < 0)
            {
              operator delete(*(v147 - 3));
              if ((*((char *)v147 - 25) & 0x80000000) == 0) {
                goto LABEL_203;
              }
LABEL_206:
              operator delete(*(v147 - 6));
              v147 -= 6;
              if (v147 == v142)
              {
LABEL_207:
                unint64_t v143 = v288;
                goto LABEL_208;
              }
            }
            else
            {
              if (*((char *)v147 - 25) < 0) {
                goto LABEL_206;
              }
LABEL_203:
              v147 -= 6;
              if (v147 == v142) {
                goto LABEL_207;
              }
            }
          }
        }
LABEL_173:
        if ((v282 & 0x80000000) == 0) {
          goto LABEL_174;
        }
        goto LABEL_196;
      }
      std::string::size_type v117 = sub_69510();
      LODWORD(__p[0]) = sub_69124((uint64_t)v117);
      sub_677F0((unsigned int *)__p, (uint64_t)&v313);
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        uint8x8_t v118 = sub_188FC78(__p, (uint64_t)"Decoding path with path-codec failed for ", 41);
        if (v314 >= 0) {
          uint64_t v119 = &v313;
        }
        else {
          uint64_t v119 = v313;
        }
        if (v314 >= 0) {
          uint64_t v120 = HIBYTE(v314);
        }
        else {
          uint64_t v120 = v314;
        }
        unint64_t v121 = sub_188FC78(v118, (uint64_t)v119, v120);
        uint64_t v122 = sub_188FC78(v121, (uint64_t)" request (os_version: ", 22);
        uint64_t v123 = sub_69134((uint64_t)v117);
        int v124 = *(char *)(v123 + 23);
        if (v124 >= 0) {
          uint64_t v125 = v123;
        }
        else {
          uint64_t v125 = *(void *)v123;
        }
        if (v124 >= 0) {
          uint64_t v126 = *(unsigned __int8 *)(v123 + 23);
        }
        else {
          uint64_t v126 = *(void *)(v123 + 8);
        }
        int v127 = sub_188FC78(v122, v125, v126);
        long double v128 = sub_188FC78(v127, (uint64_t)", all_geo_ids_invalid: ", 23);
        *(_DWORD *)((char *)v128 + *(void *)(*v128 - 24) + 8) |= 1u;
        double v129 = (void *)std::ostream::operator<<();
        sub_188FC78(v129, (uint64_t)", all_geo_ids_valid: ", 21);
        long double v130 = (void *)std::ostream::operator<<();
        sub_188FC78(v130, (uint64_t)", transport_mode_flip=", 22);
        double v131 = (void *)std::ostream::operator<<();
        int v132 = sub_188FC78(v131, (uint64_t)") ", 2);
        uint64_t v133 = sub_68EE4((uint64_t)v117);
        int v134 = *(char *)(v133 + 23);
        if (v134 >= 0) {
          uint64_t v135 = v133;
        }
        else {
          uint64_t v135 = *(void *)v133;
        }
        if (v134 >= 0) {
          uint64_t v136 = *(unsigned __int8 *)(v133 + 23);
        }
        else {
          uint64_t v136 = *(void *)(v133 + 8);
        }
        sub_188FC78(v132, v135, v136);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v311, 3u);
        if (SHIBYTE(v312) < 0) {
          operator delete(v311);
        }
        __p[0] = v232;
        *(void **)((char *)__p + *((void *)v232 - 3)) = v233;
        if (v325 < 0) {
          operator delete(v324);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      uint64_t v137 = operator new(__sz);
      *((void *)&v312 + 1) = v228;
      v311 = v137;
      *(void *)&long long v312 = v229;
      memcpy(v137, __src, v229);
      *((unsigned char *)v137 + v229) = 0;
      uint64_t v138 = *(uint64_t **)(v239 + 32);
      uint64_t v139 = *v138;
      if (*v138)
      {
        sub_443118((uint64_t)__p, *v138);
      }
      else
      {
        v275 = 0;
        v274 = 0;
        uint64_t v276 = 0;
        uint64_t v273 = 0;
        long long v271 = 0u;
        long long v272 = 0u;
        long long v269 = 0u;
        long long v270 = 0u;
        char v268 = 0;
        LOBYTE(v267) = 0;
        uint64_t v265 = 0;
        v266 = 0;
        uint64_t v263 = 0;
        v264 = 0;
        sub_29DC44((uint64_t)__p, (long long **)&v274, &v269, &v267, &v265, 0, (uint64_t)&v263, 1);
      }
      sub_710A8(1, (uint64_t)&v311, (uint64_t)__p);
      sub_29E11C((uint64_t)__p);
      if (v139)
      {
LABEL_181:
        if (SHIBYTE(v312) < 0) {
          goto LABEL_182;
        }
        goto LABEL_210;
      }
      std::string::size_type v144 = v264;
      if (v264 && !atomic_fetch_add(&v264->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
        unint64_t v145 = v266;
        if (!v266) {
          goto LABEL_187;
        }
      }
      else
      {
        unint64_t v145 = v266;
        if (!v266) {
          goto LABEL_187;
        }
      }
      if (!atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
        if ((v268 & 0x80000000) == 0)
        {
LABEL_188:
          if ((SHIBYTE(v273) & 0x80000000) == 0) {
            goto LABEL_189;
          }
          goto LABEL_229;
        }
LABEL_228:
        operator delete((void *)v267);
        if ((SHIBYTE(v273) & 0x80000000) == 0)
        {
LABEL_189:
          if ((SHIBYTE(v271) & 0x80000000) == 0) {
            goto LABEL_190;
          }
          goto LABEL_230;
        }
LABEL_229:
        operator delete((void *)v272);
        if ((SHIBYTE(v271) & 0x80000000) == 0)
        {
LABEL_190:
          if ((SBYTE7(v270) & 0x80000000) == 0) {
            goto LABEL_191;
          }
          goto LABEL_231;
        }
LABEL_230:
        operator delete(*((void **)&v270 + 1));
        if ((SBYTE7(v270) & 0x80000000) == 0)
        {
LABEL_191:
          int v146 = (void **)v274;
          if (!v274) {
            goto LABEL_181;
          }
          goto LABEL_232;
        }
LABEL_231:
        operator delete((void *)v269);
        int v146 = (void **)v274;
        if (!v274) {
          goto LABEL_181;
        }
LABEL_232:
        char v149 = v275;
        if (v275 == v146)
        {
          v275 = v146;
          operator delete(v146);
          if (SHIBYTE(v312) < 0) {
            goto LABEL_182;
          }
          goto LABEL_210;
        }
        while (1)
        {
          if (*((char *)v149 - 1) < 0)
          {
            operator delete(*(v149 - 3));
            if ((*((char *)v149 - 25) & 0x80000000) == 0) {
              goto LABEL_236;
            }
LABEL_239:
            operator delete(*(v149 - 6));
            v149 -= 6;
            if (v149 == v146)
            {
LABEL_240:
              v275 = v146;
              operator delete(v274);
              if (SHIBYTE(v312) < 0)
              {
LABEL_182:
                unint64_t v143 = v311;
                goto LABEL_209;
              }
LABEL_210:
              if (SHIBYTE(v314) < 0) {
                operator delete(v313);
              }
              sub_47E0E4((_OWORD *)a8);
              *(unsigned char *)(a8 + 120) = 0;
              _OWORD *v235 = 0u;
              *(_OWORD *)(a8 + 64) = 0u;
              *(_OWORD *)(a8 + 80) = 0u;
              goto LABEL_213;
            }
          }
          else
          {
            if (*((char *)v149 - 25) < 0) {
              goto LABEL_239;
            }
LABEL_236:
            v149 -= 6;
            if (v149 == v146) {
              goto LABEL_240;
            }
          }
        }
      }
LABEL_187:
      if ((v268 & 0x80000000) == 0) {
        goto LABEL_188;
      }
      goto LABEL_228;
    }
    sub_43517C((uint64_t)&v291, (uint64_t)v343, *(unsigned char *)(v239 + 16), (uint64_t *)&v313);
    unint64_t v24 = (double *)v313;
    v246 = (double *)v314;
    if (v313 == (void *)v314)
    {
      if (!v313) {
        goto LABEL_128;
      }
LABEL_33:
      uint64_t v25 = (double *)v314;
      unint64_t v26 = v24;
      if ((double *)v314 != v24)
      {
        do
        {
          v25 -= 17;
          sub_443B90((uint64_t)&v314 + 8, v25);
        }
        while (v25 != v24);
        unint64_t v26 = v313;
      }
      *(void *)&long long v314 = v24;
      operator delete(v26);
      if (v295 == v296) {
        goto LABEL_213;
      }
LABEL_129:
      sub_447A9C((uint64_t *)&v295, (uint64_t)__p);
      if (v369)
      {
        if ((void)v367)
        {
          *((void *)&v367 + 1) = v367;
          operator delete((void *)v367);
        }
        long long v367 = *(_OWORD *)__p;
        v368 = v316;
        uint64_t v114 = v298;
        if (!v298) {
          goto LABEL_214;
        }
      }
      else
      {
        long long v367 = *(_OWORD *)__p;
        v368 = v316;
        char v369 = 1;
        uint64_t v114 = v298;
        if (!v298) {
          goto LABEL_214;
        }
      }
      do
      {
LABEL_247:
        int v150 = (void *)*v114;
        long long v151 = (void *)v114[3];
        if (v151)
        {
          v114[4] = v151;
          operator delete(v151);
        }
        operator delete(v114);
        uint64_t v114 = v150;
      }
      while (v150);
      goto LABEL_214;
    }
    while (2)
    {
      uint64_t v28 = v327;
      if ((unint64_t)v327 < v328)
      {
        sub_EAD400((uint64_t)v327);
        unint64_t v29 = v28 + 472;
        goto LABEL_61;
      }
      unint64_t v30 = 0xCBEEA4E1A08AD8F3 * ((v327 - (unsigned char *)v326) >> 3);
      unint64_t v31 = v30 + 1;
      if (v30 + 1 > 0x8AD8F2FBA93868) {
        sub_2E00();
      }
      if (0x97DD49C34115B1E6 * ((uint64_t)(v328 - (void)v326) >> 3) > v31) {
        unint64_t v31 = 0x97DD49C34115B1E6 * ((uint64_t)(v328 - (void)v326) >> 3);
      }
      if (0xCBEEA4E1A08AD8F3 * ((uint64_t)(v328 - (void)v326) >> 3) >= 0x456C797DD49C34) {
        unint64_t v32 = 0x8AD8F2FBA93868;
      }
      else {
        unint64_t v32 = v31;
      }
      *((void *)&v317 + 1) = &v328;
      if (v32)
      {
        if (v32 > 0x8AD8F2FBA93868) {
          sub_188D718();
        }
        long long v33 = (char *)operator new(472 * v32);
      }
      else
      {
        long long v33 = 0;
      }
      __p[0] = v33;
      __p[1] = &v33[472 * v30];
      v316 = (char *)__p[1];
      *(void *)&long long v317 = &v33[472 * v32];
      sub_EAD400((uint64_t)__p[1]);
      uint64_t v34 = (char *)__p[1];
      unint64_t v29 = v316 + 472;
      uint64_t v35 = (void **)v327;
      uint64_t v36 = (void **)v326;
      if (v327 == v326)
      {
        v326 = __p[1];
        v327 = v316 + 472;
        unint64_t v328 = v317;
        if (v35) {
          goto LABEL_60;
        }
      }
      else
      {
        uint64_t v37 = 0;
        do
        {
          long long v46 = &v34[v37 * 8];
          uint64_t v47 = (uint64_t)&v34[v37 * 8 - 472];
          long long v48 = &v35[v37];
          uint64_t v49 = (uint64_t)&v35[v37 - 59];
          long long v50 = *(_OWORD *)v49;
          *(void *)(v47 + 16) = v35[v37 - 57];
          *(_OWORD *)uint64_t v47 = v50;
          *(void *)(v49 + 8) = 0;
          *(void *)(v49 + 16) = 0;
          *(void *)uint64_t v49 = 0;
          long long v51 = &v34[v37 * 8 - 448];
          uint64_t v52 = (uint64_t)&v35[v37 - 56];
          *(void *)&v34[v37 * 8 - 440] = 0;
          *(void *)long long v51 = 0;
          *((void *)v51 + 2) = 0;
          *(_OWORD *)long long v51 = *(_OWORD *)v52;
          *(void *)&v34[v37 * 8 - 432] = v35[v37 - 54];
          v35[v37 - 55] = 0;
          *(void *)uint64_t v52 = 0;
          *(void *)(v52 + 16) = 0;
          long long v53 = &v34[v37 * 8 - 424];
          long long v54 = *(_OWORD *)&v35[v37 - 53];
          long long v55 = *(_OWORD *)&v35[v37 - 51];
          long long v56 = *(_OWORD *)&v35[v37 - 49];
          *(_OWORD *)(v53 + 46) = *(_OWORD *)((char *)&v35[v37 - 47] - 2);
          *((_OWORD *)v53 + 1) = v55;
          *((_OWORD *)v53 + 2) = v56;
          *(_OWORD *)long long v53 = v54;
          long long v57 = &v34[v37 * 8 - 360];
          uint64_t v58 = (uint64_t)&v35[v37 - 45];
          *((void *)v57 + 1) = 0;
          *((void *)v57 + 2) = 0;
          *(void *)long long v57 = 0;
          *(_OWORD *)long long v57 = *(_OWORD *)v58;
          *(void *)&v34[v37 * 8 - 344] = v35[v37 - 43];
          v35[v37 - 44] = 0;
          *(void *)uint64_t v58 = 0;
          *(void *)(v58 + 16) = 0;
          long long v59 = &v34[v37 * 8 - 336];
          uint64_t v60 = (uint64_t)&v35[v37 - 42];
          *(void *)&v34[v37 * 8 - 328] = 0;
          *(void *)long long v59 = 0;
          *((void *)v59 + 2) = 0;
          *(_OWORD *)long long v59 = *(_OWORD *)v60;
          *(void *)&v34[v37 * 8 - 320] = v35[v37 - 40];
          v35[v37 - 41] = 0;
          *(void *)uint64_t v60 = 0;
          *(void *)(v60 + 16) = 0;
          unsigned __int8 v61 = &v34[v37 * 8 - 312];
          uint64_t v62 = (uint64_t)&v35[v37 - 39];
          *(void *)&v34[v37 * 8 - 304] = 0;
          *(void *)unsigned __int8 v61 = 0;
          *((void *)v61 + 2) = 0;
          *(_OWORD *)unsigned __int8 v61 = *(_OWORD *)v62;
          *(void *)&v34[v37 * 8 - 296] = v35[v37 - 37];
          v35[v37 - 38] = 0;
          *(void *)uint64_t v62 = 0;
          *(void *)(v62 + 16) = 0;
          uint64_t v63 = &v34[v37 * 8 - 288];
          long long v64 = *(_OWORD *)&v35[v37 - 34];
          uint64_t v65 = v35[v37 - 32];
          *(_OWORD *)uint64_t v63 = *(_OWORD *)&v35[v37 - 36];
          *((_OWORD *)v63 + 1) = v64;
          *((void *)v46 - 32) = v65;
          *((void *)v46 - 31) = 0;
          *((void *)v46 - 30) = 0;
          *((void *)v46 - 29) = 0;
          *(_OWORD *)(v46 - 248) = *(_OWORD *)&v35[v37 - 31];
          *((void *)v46 - 29) = v35[v37 - 29];
          *(v48 - 31) = 0;
          *(v48 - 30) = 0;
          *(v48 - 29) = 0;
          *((void *)v46 - 28) = 0;
          *((void *)v46 - 27) = 0;
          *((void *)v46 - 26) = 0;
          *((_OWORD *)v46 - 14) = *(_OWORD *)&v35[v37 - 28];
          *((void *)v46 - 26) = v35[v37 - 26];
          *(v48 - 28) = 0;
          *(v48 - 27) = 0;
          *(v48 - 26) = 0;
          *(_OWORD *)(v46 - 200) = *(_OWORD *)&v35[v37 - 25];
          *((_DWORD *)v46 - 44) = v35[v37 - 22];
          if (LODWORD(v35[v37 - 22]) < 2) {
            *((void *)v46 - 23) = *(v48 - 23);
          }
          uint64_t v38 = &v34[v37 * 8];
          *(_OWORD *)(v38 - 168) = *(_OWORD *)&v35[v37 - 21];
          long long v39 = *(_OWORD *)&v35[v37 - 13];
          long long v40 = *(_OWORD *)&v35[v37 - 11];
          long long v41 = *(_OWORD *)&v35[v37 - 9];
          *(_OWORD *)(v38 - 120) = *(_OWORD *)&v35[v37 - 15];
          *(_OWORD *)(v38 - 72) = v41;
          *(_OWORD *)(v38 - 88) = v40;
          *(_OWORD *)(v38 - 104) = v39;
          long long v42 = *(_OWORD *)&v35[v37 - 5];
          long long v43 = *(_OWORD *)&v35[v37 - 3];
          uint64_t v44 = *(uint64_t *)((char *)&v35[v37 - 1] - 1);
          *(_OWORD *)(v38 - 56) = *(_OWORD *)&v35[v37 - 7];
          *(void *)(v38 - 9) = v44;
          *(_OWORD *)(v38 - 24) = v43;
          *(_OWORD *)(v38 - 40) = v42;
          long long v45 = *(_OWORD *)&v35[v37 - 19];
          *(_OWORD *)(v38 - 136) = *(_OWORD *)&v35[v37 - 17];
          *(_OWORD *)(v38 - 152) = v45;
          v37 -= 59;
        }
        while (&v35[v37] != v36);
        uint64_t v35 = (void **)v326;
        unint64_t v66 = (void **)v327;
        v326 = &v34[v37 * 8];
        v327 = v29;
        unint64_t v328 = v317;
        if (v66 != v35)
        {
          do
          {
            long long v70 = *(v66 - 28);
            if (v70)
            {
              *(v66 - 27) = v70;
              operator delete(v70);
            }
            long long v71 = *(v66 - 31);
            if (v71)
            {
              *(v66 - 30) = v71;
              operator delete(v71);
            }
            uint64_t v72 = *(v66 - 39);
            if (v72)
            {
              *(v66 - 38) = v72;
              operator delete(v72);
            }
            unint64_t v73 = *(v66 - 42);
            if (v73)
            {
              *(v66 - 41) = v73;
              operator delete(v73);
            }
            uint64_t v74 = (char *)*(v66 - 45);
            if (v74)
            {
              unint64_t v75 = (char *)*(v66 - 44);
              unint64_t v76 = *(v66 - 45);
              if (v75 != v74)
              {
                do
                {
                  unint64_t v77 = (void *)*((void *)v75 - 3);
                  if (v77)
                  {
                    *((void *)v75 - 2) = v77;
                    operator delete(v77);
                  }
                  v75 -= 56;
                }
                while (v75 != v74);
                unint64_t v76 = *(v66 - 45);
              }
              *(v66 - 44) = v74;
              operator delete(v76);
            }
            uint64_t v78 = *(v66 - 56);
            if (v78)
            {
              *(v66 - 55) = v78;
              operator delete(v78);
            }
            unint64_t v79 = v66 - 59;
            if (*((char *)v66 - 449) < 0) {
              operator delete(*v79);
            }
            v66 -= 59;
          }
          while (v79 != v35);
        }
        if (v35) {
LABEL_60:
        }
          operator delete(v35);
      }
LABEL_61:
      v327 = v29;
      uint64_t v67 = (uint64_t)(v29 - 472);
      sub_435578((uint64_t)v24, v245, v67);
      LODWORD(__p[0]) = 0;
      __p[1] = 0;
      v316 = 0;
      LOBYTE(v317) = 0;
      *((void *)&v317 + 1) = 0x3FF0000000000000;
      LOBYTE(v318) = 1;
      uint64_t v319 = 0;
      uint64_t v320 = 0;
      char v321 = 0;
      int v322 = 36000;
      char v323 = 0;
      LODWORD(__p[0]) = vcvtad_u64_f64(*v24 * 1000000000.0);
      sub_EAD920(v67, (uint64_t)__p);
      LODWORD(__p[0]) = vcvtad_u64_f64(v24[1] * 1000000000.0);
      sub_EADAA8(v67, (uint64_t)__p);
      unint64_t v68 = (void *)*((void *)&v364 + 1);
      if (*((void *)&v364 + 1) >= (unint64_t)v365)
      {
        uint64_t v80 = (void *)v364;
        unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v364 + 1) - v364) >> 3);
        unint64_t v82 = v81 + 1;
        if (v81 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_2E00();
        }
        if (0x5555555555555556 * ((uint64_t)(v365 - v364) >> 3) > v82) {
          unint64_t v82 = 0x5555555555555556 * ((uint64_t)(v365 - v364) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v365 - v364) >> 3) >= 0x555555555555555) {
          unint64_t v83 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v83 = v82;
        }
        if (v83)
        {
          if (v83 > 0xAAAAAAAAAAAAAAALL) {
            sub_188D718();
          }
          uint64_t v84 = (char *)operator new(24 * v83);
        }
        else
        {
          uint64_t v84 = 0;
        }
        unint64_t v85 = &v84[24 * v81];
        *(void *)unint64_t v85 = 0;
        *((void *)v85 + 1) = 0;
        *((void *)v85 + 2) = 0;
        uint64_t v69 = v85 + 24;
        if (v68 == v80)
        {
          *(void *)&long long v364 = &v84[24 * v81];
          *((void *)&v364 + 1) = v85 + 24;
          *(void *)&long long v365 = &v84[24 * v83];
        }
        else
        {
          do
          {
            unint64_t v86 = v85;
            *((void *)v85 - 2) = 0;
            *((void *)v85 - 1) = 0;
            long long v87 = *(_OWORD *)(v68 - 3);
            v68 -= 3;
            *(_OWORD *)(v85 - 24) = v87;
            v85 -= 24;
            *((void *)v86 - 1) = v68[2];
            void *v68 = 0;
            v68[1] = 0;
            v68[2] = 0;
          }
          while (v68 != v80);
          int v88 = (void *)*((void *)&v364 + 1);
          unint64_t v68 = (void *)v364;
          *(void *)&long long v364 = v85;
          *((void *)&v364 + 1) = v69;
          *(void *)&long long v365 = &v84[24 * v83];
          if (v88 != v68)
          {
            uint64_t v89 = v88;
            do
            {
              uint64_t v91 = (void *)*(v89 - 3);
              v89 -= 3;
              uint64_t v90 = v91;
              if (v91)
              {
                *(v88 - 2) = v90;
                operator delete(v90);
              }
              int v88 = v89;
            }
            while (v89 != v68);
          }
        }
        if (v68) {
          operator delete(v68);
        }
      }
      else
      {
        **((void **)&v364 + 1) = 0;
        v68[1] = 0;
        uint64_t v69 = v68 + 3;
        v68[2] = 0;
      }
      *((void *)&v364 + 1) = v69;
      uint64_t v93 = (unsigned char *)*(v69 - 3);
      unint64_t v92 = (unsigned char *)*(v69 - 2);
      uint64_t v94 = *((void *)v24 + 3) - *((void *)v24 + 2);
      unint64_t v95 = v94 >> 3;
      uint64_t v96 = v92 - v93;
      unint64_t v97 = (v92 - v93) >> 2;
      unint64_t v98 = (v94 >> 3) - v97;
      if (v94 >> 3 <= v97)
      {
        if (v94 >> 3 < v97) {
          *(v69 - 2) = &v93[4 * v95];
        }
      }
      else
      {
        uint64_t v99 = *(v69 - 1);
        if (v98 <= (v99 - (uint64_t)v92) >> 2)
        {
          unint64_t v27 = &v92[4 * v98];
          memset((void *)*(v69 - 2), 255, (((v94 >> 1) - v96 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
          *(v69 - 2) = v27;
        }
        else
        {
          if (v94 < 0) {
            sub_2E00();
          }
          unint64_t v100 = v99 - (void)v93;
          unint64_t v101 = (v99 - (uint64_t)v93) >> 1;
          if (v101 <= v95) {
            unint64_t v101 = v94 >> 3;
          }
          if (v100 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v101 = 0x3FFFFFFFFFFFFFFFLL;
          }
          if (v101 >> 62) {
            sub_188D718();
          }
          unint64_t v102 = v101;
          v243 = operator new(4 * v101);
          unsigned int v103 = &v243[4 * v97];
          memset(v103, 255, ((((unint64_t)v94 >> 1) - v96 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
          if (v92 == v93)
          {
            uint64_t v105 = v243;
          }
          else
          {
            unint64_t v104 = v92 - 4 - v93;
            if (v104 < 0x2C)
            {
              uint64_t v105 = v243;
              goto LABEL_124;
            }
            uint64_t v105 = v243;
            if ((unint64_t)(v93 - v243) < 0x20) {
              goto LABEL_493;
            }
            uint64_t v106 = (v104 >> 2) + 1;
            uint64_t v107 = 4 * (v106 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v108 = &v92[-v107];
            v103 -= v107;
            int v109 = &v243[4 * v97 - 16];
            unint64_t v110 = (long long *)(v92 - 16);
            uint64_t v111 = v106 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v112 = *v110;
              *(v109 - 1) = *(v110 - 1);
              _OWORD *v109 = v112;
              v109 -= 2;
              v110 -= 2;
              v111 -= 8;
            }
            while (v111);
            unint64_t v92 = v108;
            if (v106 != (v106 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_493:
              do
              {
LABEL_124:
                int v113 = *((_DWORD *)v92 - 1);
                v92 -= 4;
                *((_DWORD *)v103 - 1) = v113;
                v103 -= 4;
              }
              while (v92 != v93);
            }
          }
          *(v69 - 3) = v103;
          *(v69 - 2) = &v105[4 * v95];
          *(v69 - 1) = &v105[4 * v102];
          if (v93) {
            operator delete(v93);
          }
        }
      }
      v24 += 17;
      if (v24 != v246) {
        continue;
      }
      break;
    }
    unint64_t v24 = (double *)v313;
    if (v313) {
      goto LABEL_33;
    }
LABEL_128:
    if (v295 != v296) {
      goto LABEL_129;
    }
LABEL_213:
    uint64_t v114 = v298;
    if (v298) {
      goto LABEL_247;
    }
LABEL_214:
    uint64_t v148 = v297;
    v297 = 0;
    if (v148) {
      operator delete(v148);
    }
    if (v295)
    {
      v296 = v295;
      operator delete(v295);
    }
    if (*((void *)&v293 + 1))
    {
      *(void *)&long long v294 = *((void *)&v293 + 1);
      operator delete(*((void **)&v293 + 1));
    }
    if ((void)v292)
    {
      *((void *)&v292 + 1) = v292;
      operator delete((void *)v292);
    }
    sub_1116458(v255);
    if (v241 == v240) {
      goto LABEL_409;
    }
    v242 += 24;
    if (v242 != v237) {
      continue;
    }
    break;
  }
  if ((v247 & 1) == 0)
  {
    char v155 = v244;
    v255[0] = operator new(0x19uLL);
    *(_OWORD *)&v255[1] = xmmword_20B9250;
    strcpy((char *)v255[0], "PathCodec.UnknownGeoIds");
    std::string v170 = *(uint64_t **)(v239 + 32);
    uint64_t v171 = *v170;
    if (*v170)
    {
      sub_443118((uint64_t)__p, *v170);
    }
    else
    {
      long long v314 = 0uLL;
      v313 = 0;
      v295 = 0;
      long long v293 = 0u;
      long long v294 = 0u;
      long long v291 = 0u;
      long long v292 = 0u;
      HIBYTE(v312) = 0;
      LOBYTE(v311) = 0;
      uint64_t v261 = 0;
      v262 = 0;
      uint64_t v259 = 0;
      v260 = 0;
      sub_29DC44((uint64_t)__p, (long long **)&v313, &v291, (long long *)&v311, &v261, 0, (uint64_t)&v259, 1);
    }
    sub_710A8(1, (uint64_t)v255, (uint64_t)__p);
    sub_29E11C((uint64_t)__p);
    if (v171)
    {
      if ((SHIBYTE(v255[2]) & 0x80000000) == 0) {
        goto LABEL_342;
      }
      goto LABEL_483;
    }
    v216 = v260;
    if (v260 && !atomic_fetch_add(&v260->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
    v217 = v262;
    if (v262 && !atomic_fetch_add(&v262->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
    if (SHIBYTE(v312) < 0)
    {
      operator delete(v311);
      if ((SHIBYTE(v295) & 0x80000000) == 0)
      {
LABEL_432:
        if ((SHIBYTE(v293) & 0x80000000) == 0) {
          goto LABEL_433;
        }
        goto LABEL_471;
      }
    }
    else if ((SHIBYTE(v295) & 0x80000000) == 0)
    {
      goto LABEL_432;
    }
    operator delete((void *)v294);
    if ((SHIBYTE(v293) & 0x80000000) == 0)
    {
LABEL_433:
      if ((SBYTE7(v292) & 0x80000000) == 0) {
        goto LABEL_434;
      }
      goto LABEL_472;
    }
LABEL_471:
    operator delete(*((void **)&v292 + 1));
    if ((SBYTE7(v292) & 0x80000000) == 0)
    {
LABEL_434:
      v218 = (void **)v313;
      if (!v313)
      {
LABEL_482:
        char v155 = v244;
        if ((SHIBYTE(v255[2]) & 0x80000000) == 0)
        {
LABEL_342:
          if ((v248 & 1) == 0) {
            goto LABEL_375;
          }
          goto LABEL_343;
        }
LABEL_483:
        operator delete(v255[0]);
        if (v248) {
          goto LABEL_343;
        }
LABEL_375:
        if (v155) {
          goto LABEL_378;
        }
        goto LABEL_396;
      }
      goto LABEL_473;
    }
LABEL_472:
    operator delete((void *)v291);
    v218 = (void **)v313;
    if (!v313) {
      goto LABEL_482;
    }
LABEL_473:
    v223 = (void **)v314;
    v224 = v218;
    if ((void **)v314 == v218)
    {
LABEL_481:
      *(void *)&long long v314 = v218;
      operator delete(v224);
      goto LABEL_482;
    }
    while (1)
    {
      if (*((char *)v223 - 1) < 0)
      {
        operator delete(*(v223 - 3));
        if ((*((char *)v223 - 25) & 0x80000000) == 0) {
          goto LABEL_476;
        }
LABEL_479:
        operator delete(*(v223 - 6));
        v223 -= 6;
        if (v223 == v218)
        {
LABEL_480:
          v224 = v313;
          goto LABEL_481;
        }
      }
      else
      {
        if (*((char *)v223 - 25) < 0) {
          goto LABEL_479;
        }
LABEL_476:
        v223 -= 6;
        if (v223 == v218) {
          goto LABEL_480;
        }
      }
    }
  }
  char v155 = v244;
  if ((v248 & 1) == 0) {
    goto LABEL_375;
  }
LABEL_343:
  v309 = operator new(0x20uLL);
  long long v310 = xmmword_20B5EB0;
  strcpy((char *)v309, "PathCodec.AllUnknownGeoIds");
  long long v179 = *(uint64_t **)(v239 + 32);
  uint64_t v180 = *v179;
  if (*v179)
  {
    sub_443118((uint64_t)__p, *v179);
  }
  else
  {
    long long v303 = 0uLL;
    uint64_t v304 = 0;
    uint64_t v258 = 0;
    long long v256 = 0u;
    *(_OWORD *)v257 = 0u;
    memset(v255, 0, sizeof(v255));
    char v254 = 0;
    LOBYTE(v253) = 0;
    uint64_t v251 = 0;
    v252 = 0;
    uint64_t v249 = 0;
    v250 = 0;
    sub_29DC44((uint64_t)__p, (long long **)&v303, (long long *)v255, &v253, &v251, 0, (uint64_t)&v249, 1);
  }
  sub_710A8(1, (uint64_t)&v309, (uint64_t)__p);
  sub_29E11C((uint64_t)__p);
  if (v180)
  {
    if (SHIBYTE(v310) < 0) {
      goto LABEL_377;
    }
    goto LABEL_375;
  }
  char v181 = v155;
  uint64_t v182 = v250;
  if (v250 && !atomic_fetch_add(&v250->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
    std::__shared_weak_count::__release_weak(v182);
  }
  uint64_t v183 = v252;
  if (v252 && !atomic_fetch_add(&v252->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
    std::__shared_weak_count::__release_weak(v183);
  }
  if (v254 < 0)
  {
    operator delete((void *)v253);
    if (SHIBYTE(v258) < 0) {
      goto LABEL_371;
    }
LABEL_357:
    if ((SHIBYTE(v256) & 0x80000000) == 0) {
      goto LABEL_358;
    }
LABEL_372:
    operator delete(v255[3]);
    if (SHIBYTE(v255[2]) < 0) {
      goto LABEL_373;
    }
LABEL_359:
    int v184 = (void **)v303;
    if (!(void)v303)
    {
LABEL_374:
      char v155 = v181;
      if (SHIBYTE(v310) < 0) {
        goto LABEL_377;
      }
      goto LABEL_375;
    }
  }
  else
  {
    if ((SHIBYTE(v258) & 0x80000000) == 0) {
      goto LABEL_357;
    }
LABEL_371:
    operator delete(v257[0]);
    if (SHIBYTE(v256) < 0) {
      goto LABEL_372;
    }
LABEL_358:
    if ((SHIBYTE(v255[2]) & 0x80000000) == 0) {
      goto LABEL_359;
    }
LABEL_373:
    operator delete(v255[0]);
    int v184 = (void **)v303;
    if (!(void)v303) {
      goto LABEL_374;
    }
  }
  uint64_t v185 = (void **)*((void *)&v303 + 1);
  if (*((void ***)&v303 + 1) == v184)
  {
    *((void *)&v303 + 1) = v184;
    operator delete(v184);
    char v155 = v181;
    if (SHIBYTE(v310) < 0) {
      goto LABEL_377;
    }
    goto LABEL_375;
  }
  while (2)
  {
    while (2)
    {
      if (*((char *)v185 - 1) < 0)
      {
        operator delete(*(v185 - 3));
        if (*((char *)v185 - 25) < 0) {
          break;
        }
        goto LABEL_364;
      }
      if ((*((char *)v185 - 25) & 0x80000000) == 0)
      {
LABEL_364:
        v185 -= 6;
        if (v185 == v184) {
          goto LABEL_368;
        }
        continue;
      }
      break;
    }
    operator delete(*(v185 - 6));
    v185 -= 6;
    if (v185 != v184) {
      continue;
    }
    break;
  }
LABEL_368:
  *((void *)&v303 + 1) = v184;
  operator delete((void *)v303);
  char v155 = v181;
  if ((SHIBYTE(v310) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_377:
  operator delete(v309);
  if (v155)
  {
LABEL_378:
    uint64_t v186 = sub_69510();
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)__p);
      uint64_t v187 = sub_188FC78(__p, (uint64_t)"Got a path-codec encoded path containing Geometry points. They are not required for decoding. OS version: ", 106);
      uint64_t v188 = sub_69134((uint64_t)v186);
      int v189 = *(char *)(v188 + 23);
      if (v189 >= 0) {
        uint64_t v190 = v188;
      }
      else {
        uint64_t v190 = *(void *)v188;
      }
      if (v189 >= 0) {
        uint64_t v191 = *(unsigned __int8 *)(v188 + 23);
      }
      else {
        uint64_t v191 = *(void *)(v188 + 8);
      }
      uint64_t v192 = sub_188FC78(v187, v190, v191);
      int v193 = sub_188FC78(v192, (uint64_t)", Request: ", 11);
      uint64_t v194 = sub_68EE4((uint64_t)v186);
      int v195 = *(char *)(v194 + 23);
      if (v195 >= 0) {
        uint64_t v196 = v194;
      }
      else {
        uint64_t v196 = *(void *)v194;
      }
      if (v195 >= 0) {
        uint64_t v197 = *(unsigned __int8 *)(v194 + 23);
      }
      else {
        uint64_t v197 = *(void *)(v194 + 8);
      }
      sub_188FC78(v193, v196, v197);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v309, 1u);
      if (SHIBYTE(v310) < 0) {
        operator delete(v309);
      }
      if (v325 < 0) {
        operator delete(v324);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
LABEL_396:
  sub_EA9174((uint64_t)__p, (uint64_t)&v326);
  uint64_t v198 = v360;
  if ((void)v360)
  {
    uint64_t v199 = *((void *)&v360 + 1);
    char v200 = (void *)v360;
    if (*((void *)&v360 + 1) != (void)v360)
    {
      do
        uint64_t v199 = sub_405F44(v199 - 472);
      while (v199 != v198);
      char v200 = (void *)v360;
    }
    *((void *)&v360 + 1) = v198;
    operator delete(v200);
  }
  long long v360 = *(_OWORD *)__p;
  v361 = v316;
  v316 = 0;
  __p[1] = 0;
  __p[0] = 0;
  if (SHIBYTE(v363) < 0)
  {
    operator delete((void *)v362);
    long long v362 = v317;
    v201 = __p[0];
    uint64_t v363 = v318;
    HIBYTE(v318) = 0;
    LOBYTE(v317) = 0;
    if (__p[0])
    {
      char v202 = __p[1];
      v203 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          char v202 = (void *)sub_405F44((uint64_t)v202 - 472);
        while (v202 != v201);
        v203 = __p[0];
      }
      __p[1] = v201;
      operator delete(v203);
    }
  }
  else
  {
    long long v362 = v317;
    uint64_t v363 = v318;
  }
  sub_435A98(v239, (uint64_t *)&v360, a3, a4, a5, a8);
LABEL_409:
  char v204 = (char *)v326;
  if (v326)
  {
LABEL_410:
    unint64_t v205 = v327;
    unint64_t v206 = v204;
    if (v327 != v204)
    {
      do
        unint64_t v205 = (char *)sub_405F44((uint64_t)(v205 - 472));
      while (v205 != v204);
      unint64_t v206 = v326;
    }
    v327 = v204;
    operator delete(v206);
  }
LABEL_414:
  sub_40F434((uint64_t)&v329);
  v343[0] = off_24396A0;
  v207 = &v345;
  do
  {
    v208 = v207 - 6;
    uint64_t v209 = *(v207 - 3);
    if (v209)
    {
      uint64_t v210 = 0;
      uint64_t v211 = 0;
      v212 = v207 - 5;
      do
      {
        if ((*(char *)(*v208 + v211) & 0x80000000) == 0)
        {
          uint64_t v213 = *v212 + v210;
          v214 = *(void **)(v213 + 8);
          if (v214)
          {
            *(void *)(v213 + 16) = v214;
            operator delete(v214);
            uint64_t v209 = *(v207 - 3);
          }
        }
        ++v211;
        v210 += 32;
      }
      while (v211 != v209);
      operator delete((void *)*(v207 - 6));
      *(v207 - 6) = (uint64_t)&unk_20E1710;
      *(v207 - 1) = 0;
      *(v207 - 4) = 0;
      *(v207 - 3) = 0;
      uint64_t *v212 = 0;
    }
    v207 -= 6;
  }
  while (v208 != &v344);
  return sub_443A30((uint64_t)&v360);
}

void sub_434C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  sub_14A84((uint64_t)&a61);
  sub_14A84((uint64_t)&a63);
  if (SLOBYTE(STACK[0x3F7]) < 0) {
    operator delete((void *)STACK[0x3E0]);
  }
  sub_29D7B0((uint64_t)&STACK[0x2E0]);
  sub_1A6DC((void **)&STACK[0x3F8]);
  if (a54 < 0) {
    operator delete(a49);
  }
  sub_4323C0((void **)&STACK[0x518]);
  sub_40F434((uint64_t)&STACK[0x530]);
  sub_423E80(&STACK[0x628]);
  sub_443A30(v63 - 240);
  _Unwind_Resume(a1);
}

uint64_t sub_43517C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  long long v4 = (void *)a1;
  uint64_t v5 = a4;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
  {
    unint64_t v7 = *(void *)(a1 + 64);
    uint64_t v6 = *(void *)(a1 + 72);
    if (v7 == v6) {
      goto LABEL_13;
    }
    if (*(void *)v7)
    {
      BOOL v8 = 0;
    }
    else
    {
      double v10 = *(double *)(v7 + 8);
      BOOL v8 = v10 == *(double *)a1;
      if (vabdd_f64(v10, *(double *)a1) < 2.22044605e-16) {
        BOOL v8 = 1;
      }
    }
    v7 += 48 * v8;
    if (*(void *)(v6 - 48) != ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3) - 1)
    {
LABEL_13:
      LODWORD(v14) = 0;
    }
    else
    {
      double v11 = *(double *)(v6 - 40);
      double v12 = *(double *)(a1 + 8);
      uint64_t v13 = vabdd_f64(v11, v12) < 2.22044605e-16 || v11 == v12;
      uint64_t v14 = v13 << 63 >> 63;
    }
    uint64_t result = sub_447954(v5);
    v5[1] = result;
    *(void *)(result - 136) = *v4;
    uint64_t v15 = v4[2];
    if (v4[3] != v15)
    {
      unint64_t v16 = 0;
      unint64_t v17 = v6 + 48 * (int)v14;
      long long v42 = v4;
      while (1)
      {
        uint64_t v18 = v5[1];
        char v20 = *(void **)(v18 - 112);
        unint64_t v19 = *(void *)(v18 - 104);
        if ((unint64_t)v20 < v19)
        {
          *char v20 = *(void *)(v15 + 8 * v16);
          *(void *)(v18 - 112) = v20 + 1;
          if (v7 < v17) {
            goto LABEL_38;
          }
          goto LABEL_17;
        }
        char v21 = *(void **)(v18 - 120);
        uint64_t v22 = v20 - v21;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61) {
          sub_2E00();
        }
        unint64_t v24 = v7;
        unint64_t v25 = v17;
        uint64_t v26 = v19 - (void)v21;
        if (v26 >> 2 > v23) {
          unint64_t v23 = v26 >> 2;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v23;
        }
        if (v27)
        {
          if (v27 >> 61) {
            sub_188D718();
          }
          uint64_t v28 = (char *)operator new(8 * v27);
          uint64_t v29 = (uint64_t)&v28[8 * v22];
          *(void *)uint64_t v29 = *(void *)(v15 + 8 * v16);
          uint64_t v30 = v29 + 8;
          if (v20 == v21)
          {
LABEL_35:
            *(void *)(v18 - 120) = v29;
            *(void *)(v18 - 112) = v30;
            *(void *)(v18 - 104) = &v28[8 * v27];
            uint64_t v5 = a4;
            if (!v20) {
              goto LABEL_37;
            }
LABEL_36:
            operator delete(v20);
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v28 = 0;
          uint64_t v29 = 8 * v22;
          *(void *)(8 * v22) = *(void *)(v15 + 8 * v16);
          uint64_t v30 = 8 * v22 + 8;
          if (v20 == v21) {
            goto LABEL_35;
          }
        }
        do
        {
          int v31 = *((_DWORD *)v20-- - 2);
          int v32 = *(_DWORD *)((char *)v20 + 3);
          *(_DWORD *)(v29 - 8) = v31;
          v29 -= 8;
          *(_DWORD *)(v29 + 3) = v32;
        }
        while (v20 != v21);
        char v20 = *(void **)(v18 - 120);
        *(void *)(v18 - 120) = v29;
        *(void *)(v18 - 112) = v30;
        *(void *)(v18 - 104) = &v28[8 * v27];
        uint64_t v5 = a4;
        if (v20) {
          goto LABEL_36;
        }
LABEL_37:
        unint64_t v17 = v25;
        unint64_t v7 = v24;
        long long v4 = v42;
        *(void *)(v18 - 112) = v30;
        if (v7 < v17)
        {
LABEL_38:
          if (*(void *)v7 == v16)
          {
            double v33 = *(double *)(v7 + 8);
            unint64_t v34 = v5[1];
            unint64_t v35 = v5[2];
            *(double *)(v34 - 128) = v33;
            if (v34 >= v35)
            {
              uint64_t v36 = sub_447954(v5);
            }
            else
            {
              *(void *)(v34 + 128) = 0;
              *(_OWORD *)(v34 + 96) = 0u;
              *(_OWORD *)(v34 + 112) = 0u;
              *(_OWORD *)(v34 + 64) = 0u;
              *(_OWORD *)(v34 + 80) = 0u;
              *(_OWORD *)(v34 + 32) = 0u;
              *(_OWORD *)(v34 + 48) = 0u;
              *(_OWORD *)unint64_t v34 = 0u;
              *(_OWORD *)(v34 + 16) = 0u;
              uint64_t v36 = v34 + 136;
              *(_DWORD *)(v34 + 120) = 1065353216;
            }
            v7 += 48;
            v5[1] = v36;
            unint64_t v37 = v16 + 1;
            uint64_t v38 = v4[2];
            if (v16 + 1 >= (v4[3] - v38) >> 3
              || (unint64_t v39 = sub_42CC6C(a2, (void *)(v38 + 8 * v16)), *(_DWORD *)(v38 + 8 * v37) != v39)
              || (uint64_t v40 = v38 + 8 * v37, *(unsigned __int16 *)(v40 + 4) != WORD2(v39))
              || (HIWORD(v39) & 1) == (*(unsigned char *)(v40 + 6) == 0)
              || v7 < v17 && *(void *)v7 == v16)
            {
              *(double *)(v5[1] - 136) = v33;
              --v16;
            }
            else
            {
              *(double *)(v5[1] - 136) = 1.0 - v33;
            }
          }
        }
LABEL_17:
        ++v16;
        uint64_t v15 = v4[2];
        if (v16 >= (v4[3] - v15) >> 3)
        {
          uint64_t result = v5[1];
          break;
        }
      }
    }
    *(void *)(result - 128) = v4[1];
  }
  else
  {
    uint64_t result = sub_446EF4(a4, (long long *)a1);
    v5[1] = result;
  }
  return result;
}

void sub_435500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_435514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_435528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_43553C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_435550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_435564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_435578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(uint64_t **)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24) - (void)v4;
  if (v5 == 8)
  {
    uint64_t v6 = *v4;
    uint64_t v7 = *v4 & 0xFF000000000000;
    uint64_t v8 = ((unint64_t)*v4 >> 16) & 0xFFFF0000 | (*v4 << 32) | (2 * (v7 == 0));
    unint64_t v9 = HIDWORD(*v4);
    uint64_t v10 = sub_2D5D58(a2, *v4 & 0xFFFFFFFFFFFFLL);
    if (*(unsigned char *)(a2 + 7772))
    {
      double v11 = sub_2DB8E0(a2 + 3896, v6, 0);
      double v12 = &v11[-*(int *)v11];
      if (*(unsigned __int16 *)v12 < 5u)
      {
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v13 = *((unsigned __int16 *)v12 + 2);
        if (v13) {
          v13 += (uint64_t)&v11[*(unsigned int *)&v11[v13]];
        }
      }
      uint64_t v48 = v13 + 4 * (unsigned __int16)v9 + 4 + *(unsigned int *)(v13 + 4 * (unsigned __int16)v9 + 4);
    }
    else
    {
      uint64_t v48 = 0;
    }
    *(void *)&long long v55 = v10;
    *((void *)&v55 + 1) = v48;
    *(void *)&long long v56 = sub_2E5C38(a2, v6 & 0xFFFFFFFFFFFFLL, 1);
    *((void *)&v56 + 1) = v49;
    LODWORD(v57) = v6;
    WORD2(v57) = v9;
    BYTE6(v57) = v7 != 0;
    sub_EADAD8(a3, v8, &v55);
    return;
  }
  uint64_t v14 = v5 >> 3;
  long long v70 = 0;
  long long v71 = 0;
  uint64_t v72 = 0;
  if ((unint64_t)(v5 >> 3) <= 1) {
    uint64_t v14 = 1;
  }
  if ((unint64_t)v5 >= 0x10)
  {
    uint64_t v15 = 0;
    long long v53 = (unsigned char *)(a2 + 7772);
    uint64_t v52 = a2 + 3896;
    uint64_t v50 = v14 - 1;
    while (1)
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 16) + 8 * v15);
      uint64_t v17 = sub_2D5D58(a2, v16 & 0xFFFFFFFFFFFFLL);
      if (*v53)
      {
        uint64_t v18 = sub_2DB8E0(v52, v16, 0);
        unint64_t v19 = &v18[-*(int *)v18];
        if (*(unsigned __int16 *)v19 < 5u)
        {
          uint64_t v20 = 0;
        }
        else
        {
          uint64_t v20 = *((unsigned __int16 *)v19 + 2);
          if (v20) {
            v20 += (uint64_t)&v18[*(unsigned int *)&v18[v20]];
          }
        }
        uint64_t v21 = v20 + 4 * WORD2(v16) + 4 + *(unsigned int *)(v20 + 4 * WORD2(v16) + 4);
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t v22 = sub_2E5C38(a2, v16 & 0xFFFFFFFFFFFFLL, 1);
      *(void *)&long long v67 = v17;
      *((void *)&v67 + 1) = v21;
      *(void *)&long long v68 = v22;
      *((void *)&v68 + 1) = v23;
      LODWORD(v69) = v16;
      WORD2(v69) = WORD2(v16);
      BYTE6(v69) = (v16 & 0xFF000000000000) != 0;
      uint64_t v24 = *(void *)(*(void *)(a1 + 16) + 8 * v15 + 8);
      unint64_t v25 = (int *)sub_2D5D58(a2, v24 & 0xFFFFFFFFFFFFLL);
      if (*v53)
      {
        uint64_t v26 = sub_2DB8E0(v52, v24, 0);
        unint64_t v27 = &v26[-*(int *)v26];
        if (*(unsigned __int16 *)v27 < 5u)
        {
          uint64_t v28 = 0;
        }
        else
        {
          uint64_t v28 = *((unsigned __int16 *)v27 + 2);
          if (v28) {
            v28 += (uint64_t)&v26[*(unsigned int *)&v26[v28]];
          }
        }
        uint64_t v29 = v28 + 4 * WORD2(v24) + 4 + *(unsigned int *)(v28 + 4 * WORD2(v24) + 4);
      }
      else
      {
        uint64_t v29 = 0;
      }
      uint64_t v30 = sub_2E5C38(a2, v24 & 0xFFFFFFFFFFFFLL, 1);
      uint64_t v32 = v31;
      uint64_t v33 = v24 & 0xFF000000000000;
      unint64_t v34 = (unsigned int *)sub_2E4738((int **)&v67);
      sub_2E45D4(a2, v34, (uint64_t)&v70, 0, 0, 0);
      unint64_t v35 = (unsigned __int16 *)(v67 - *(int *)v67);
      unsigned int v36 = *v35;
      if (BYTE6(v69))
      {
        if (v36 < 0xB) {
          goto LABEL_44;
        }
        uint64_t v37 = v35[5];
        if (!v37) {
          goto LABEL_44;
        }
        int v38 = *(_DWORD *)(v67 + v37);
        if ((v38 & 2) == 0 && (v38 & 1) == 0) {
          goto LABEL_44;
        }
      }
      else if (v36 < 0xB || (v39 = v35[5]) == 0 || (int v38 = *(_DWORD *)(v67 + v39), (v38 & 1) == 0) && (v38 & 2) == 0)
      {
LABEL_44:
        BOOL v40 = 1;
        long long v41 = (unsigned __int16 *)((char *)v25 - *v25);
        BOOL v42 = *v41 >= 0xBu;
        if (v33) {
          goto LABEL_45;
        }
        goto LABEL_38;
      }
      BOOL v40 = (v38 & 0x40000) != 0 || (v38 & 0xA0000) != 0;
      long long v41 = (unsigned __int16 *)((char *)v25 - *v25);
      BOOL v42 = *v41 >= 0xBu;
      if (v33)
      {
LABEL_45:
        if (!v42) {
          goto LABEL_52;
        }
        uint64_t v45 = v41[5];
        if (!v45) {
          goto LABEL_52;
        }
        int v44 = *(int *)((char *)v25 + v45);
        if ((v44 & 2) == 0 && (v44 & 1) == 0) {
          goto LABEL_52;
        }
        goto LABEL_50;
      }
LABEL_38:
      if (!v42 || (v43 = v41[5]) == 0 || (int v44 = *(int *)((char *)v25 + v43), (v44 & 1) == 0) && (v44 & 2) == 0)
      {
LABEL_52:
        BOOL v46 = 1;
        goto LABEL_53;
      }
LABEL_50:
      if ((v44 & 0x40000) != 0) {
        goto LABEL_52;
      }
      BOOL v46 = (v44 & 0xA0000) != 0;
LABEL_53:
      long long v55 = v67;
      long long v56 = v68;
      uint64_t v57 = v69;
      uint64_t v58 = v25;
      uint64_t v59 = v29;
      uint64_t v60 = v30;
      uint64_t v61 = v32;
      int v62 = v24;
      __int16 v63 = WORD2(v24);
      BOOL v64 = (v24 & 0xFF000000000000) != 0;
      int v65 = 0;
      if (v46) {
        char v47 = 2;
      }
      else {
        char v47 = 0;
      }
      char v66 = v47 | v40 | (4 * (v71 - v70 == 80)) | v66 & 0xF8;
      sub_EADC28(a3, (int **)&v55);
      if (v50 == ++v15)
      {
        if (v70)
        {
          long long v71 = v70;
          operator delete(v70);
        }
        return;
      }
    }
  }
}

void sub_435A08(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(void *)(v1 - 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_435A2C(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    long long v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 17;
        sub_443B90((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v2);
      long long v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

double sub_435A98@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  if (!a5 || sub_436868(a1, a4, a2) || sub_43070C(a1, a3, (uint64_t)a2))
  {
    if (sub_DAA288(a3) && !sub_EA80FC((char **)a2))
    {
      uint64_t v10 = sub_EA841C(a2);
      long long v12 = *(_OWORD *)(v10 + 32);
      long long v11 = *(_OWORD *)(v10 + 48);
      uint64_t v13 = *(void *)(v10 + 64);
      long long v17 = *(_OWORD *)(v10 + 16);
      long long v16 = *(_OWORD *)v10;
      uint64_t v20 = v13;
      long long v18 = v12;
      long long v19 = v11;
      *(double *)&long long v17 = *(double *)(a3 + 56) * 3.6;
      uint64_t v14 = sub_40EFE8((uint64_t)a2);
      sub_EAD920(v14, (uint64_t)&v16);
    }
    sub_430DCC(a1, a3, (uint64_t)a2);
    sub_443C44((void *)a6, (uint64_t)a2);
  }
  else
  {
    sub_47E0E4((_OWORD *)a6);
    *(unsigned char *)(a6 + 120) = 0;
    double result = 0.0;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
  }
  return result;
}

double sub_435BAC@<D0>(_OWORD *a1@<X8>)
{
  sub_47E0E4(a1);
  *(unsigned char *)(v1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  return result;
}

void sub_435BD8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_435CA4(a2, (uint64_t)&__p);
  sub_43241C(a1, (uint64_t *)&__p, a3, 0x7FFFFFFFFFFFFFFFLL, 1, 1, 0, a4);
  uint64_t v7 = (void **)__p;
  if (__p)
  {
    uint64_t v8 = v11;
    unint64_t v9 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = __p;
    }
    long long v11 = v7;
    operator delete(v9);
  }
}

void sub_435C90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_435CA4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    uint64_t v5 = 0;
    do
    {
      sub_448064(v2, &__p);
      uint64_t v6 = sub_8B3D0((void ***)a2, v5, &__p);
      if (v8 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      uint64_t v5 = v6 + 24;
      v2 += 144;
    }
    while (v2 != v3);
  }
}

void sub_435D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1A668(v14);
    _Unwind_Resume(a1);
  }
  sub_1A668(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_435D70(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "max_user_distance_from_path_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 16) = 1;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "decode_name_scoring_factor");
  long long v4 = sub_58070(a2, (uint64_t)__p);
  uint64_t v5 = (void *)a1;
  if (v4)
  {
    uint64_t v5 = v4 + 5;
    if (*((_DWORD *)v4 + 12) != 1) {
      uint64_t v5 = (void *)a1;
    }
  }
  *(void *)a1 = *v5;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "split_anchor_paths");
  uint64_t v6 = sub_58070(a2, (uint64_t)__p);
  if (v6)
  {
    int v7 = *((_DWORD *)v6 + 12);
    if ((v7 & 0xFFFFFFFE) == 4)
    {
      *(unsigned char *)(a1 + 16) = v7 == 4;
      if (SHIBYTE(__p[2]) < 0) {
        goto LABEL_14;
      }
      return a1;
    }
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 16) != 0;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    return a1;
  }
LABEL_14:
  operator delete(__p[0]);
  return a1;
}

void sub_435EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_435F20(uint64_t a1)
{
  *(_OWORD *)char v8 = 0u;
  *(_OWORD *)unint64_t v9 = 0u;
  int v10 = 1065353216;
  sub_46B058();
  uint64_t v3 = v2;
  unint64_t v5 = v4;
  sub_EADA68();
  sub_43610C(v3, v5, v6, v7, (uint64_t)v8);
  sub_4362AC(a1);
}

void sub_4360C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  long long v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
  }
  sub_436498((uint64_t)&a15);
  sub_12168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_43610C(void *a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v11 = sub_EAE104(a1);
        unint64_t v12 = sub_EAE104(a3);
        if (a2 >= v11 || a4 >= v12)
        {
          if (a2 < v11 == a4 < v12) {
            return a5;
          }
        }
        else
        {
          uint64_t v13 = sub_EAE1B8(a1, a2);
          if (v13 == sub_EAE1B8(a3, a4)) {
            return a5;
          }
        }
        uint64_t v10 = sub_EAE1B8(a1, a2);
        unint64_t v17 = *(unsigned int *)(v10 + 32) | ((unint64_t)*(unsigned __int16 *)(v10 + 36) << 32);
        sub_448348(a5, &v17, &v17);
        ++a2;
      }
    }
    while (a2 < sub_EAE104(a1))
    {
      uint64_t v14 = sub_EAE1B8(a1, a2);
      unint64_t v17 = *(unsigned int *)(v14 + 32) | ((unint64_t)*(unsigned __int16 *)(v14 + 36) << 32);
      sub_448348(a5, &v17, &v17);
      ++a2;
    }
  }
  else if (a3 && a4 < sub_EAE104(a3))
  {
    do
    {
      uint64_t v15 = sub_EAE1B8(0, a2);
      unint64_t v17 = *(unsigned int *)(v15 + 32) | ((unint64_t)*(unsigned __int16 *)(v15 + 36) << 32);
      sub_448348(a5, &v17, &v17);
      ++a2;
    }
    while (a4 < sub_EAE104(a3));
  }
  return a5;
}

void sub_4362AC(uint64_t a1)
{
  sub_10A42C4((uint64_t)v1, *(void **)(a1 + 24), 3, 1, 0);
}

void sub_43645C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_4364F4((void **)va);
  unint64_t v5 = *(void **)(v3 - 104);
  if (v5)
  {
    *(void *)(v3 - 96) = v5;
    operator delete(v5);
  }
  sub_10A45FC(va1);
  _Unwind_Resume(a1);
}

uint64_t sub_436498(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 136);
    if (v2)
    {
      *(void *)(a1 + 144) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 112);
    if (v3)
    {
      *(void *)(a1 + 120) = v3;
      operator delete(v3);
    }
    unint64_t v4 = *(void **)(a1 + 80);
    if (v4)
    {
      *(void *)(a1 + 88) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

void **sub_4364F4(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = (void *)*((void *)v3 - 4);
        if (v5)
        {
          *((void *)v3 - 3) = v5;
          operator delete(v5);
        }
        v3 -= 104;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_436568(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9 = nullsub_1(a5);
  uint64_t v10 = sub_40EFE8(a5);
  uint64_t v11 = sub_40EFE8(a5) + 472 * a2 - v10;
  if (v11)
  {
    uint64_t v12 = v10 + v11;
    uint64_t v13 = *(void *)(v9 + 8);
    if (v10 + v11 != v13)
    {
      uint64_t v14 = 8 * (v11 >> 3);
      do
      {
        sub_448838(v10, (long long *)(v10 + v14));
        v10 += 472;
      }
      while (v10 + v14 != v13);
      uint64_t v12 = *(void *)(v9 + 8);
    }
    while (v12 != v10)
      uint64_t v12 = sub_405F44(v12 - 472);
    *(void *)(v9 + 8) = v10;
  }
  if (a2)
  {
    uint64_t v15 = *(void *)(a5 + 48);
    uint64_t v16 = *(void *)(a5 + 56);
    uint64_t v17 = v15 + 24 * a2;
    if (v17 == v16)
    {
      uint64_t v19 = *(void *)(a5 + 48);
      if (v17 == v15)
      {
LABEL_22:
        *(void *)(a5 + 56) = v19;
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v18 = 24 * a2;
      uint64_t v19 = *(void *)(a5 + 48);
      do
      {
        uint64_t v21 = *(void **)v15;
        if (*(void *)v15)
        {
          *(void *)(v15 + 8) = v21;
          operator delete(v21);
          *(void *)(v15 + 8) = 0;
          *(void *)(v15 + 16) = 0;
        }
        uint64_t v20 = (void *)(v15 + v18);
        *(_OWORD *)uint64_t v15 = *(_OWORD *)(v15 + 24 * a2);
        *(void *)(v15 + 16) = *(void *)(v15 + v18 + 16);
        *uint64_t v20 = 0;
        v20[1] = 0;
        v20[2] = 0;
        v15 += 24;
        v19 += 24;
      }
      while (v15 + v18 != v16);
      uint64_t v17 = *(void *)(a5 + 56);
      if (v17 == v19) {
        goto LABEL_22;
      }
    }
    uint64_t v22 = v17;
    do
    {
      uint64_t v24 = *(void **)(v22 - 24);
      v22 -= 24;
      uint64_t v23 = v24;
      if (v24)
      {
        *(void *)(v17 - 16) = v23;
        operator delete(v23);
      }
      uint64_t v17 = v22;
    }
    while (v22 != v19);
    goto LABEL_22;
  }
LABEL_23:
  unint64_t v25 = *(void **)nullsub_1(a5);
  uint64_t v26 = *(void ***)(a5 + 48);
  if (a3 + 1 == sub_EAE104(v25))
  {
    unint64_t v27 = sub_EADCD0((uint64_t)v25);
    uint64_t v28 = (long long *)sub_EADD34((uint64_t)v25);
    sub_EADAD8((uint64_t)v25, v27, v28);
    if (!a3) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v29 = (int **)sub_3C80F8((uint64_t)v25);
    uint64_t v30 = sub_3C80F8((uint64_t)v25);
    sub_EAF478((uint64_t)v25, v29, (int **)(v30 + 88 * a3), 1);
    if (!a3) {
      goto LABEL_30;
    }
  }
  uint64_t v32 = (char *)*v26;
  uint64_t v31 = (char *)v26[1];
  uint64_t v33 = (char *)*v26 + 4 * a3;
  int64_t v34 = v31 - v33;
  if (v31 != v33) {
    memmove(*v26, v33, v31 - v33);
  }
  v26[1] = &v32[v34];
LABEL_30:
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  char v44 = 0;
  uint64_t v45 = 0x3FF0000000000000;
  char v46 = 1;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  char v49 = 0;
  int v50 = 36000;
  char v51 = 0;
  unsigned int v41 = a4;
  if (sub_EADC78((uint64_t)v25) && *(_DWORD *)sub_EADAD0((uint64_t)v25) < a4) {
    unsigned int v41 = *(_DWORD *)sub_EADAD0((uint64_t)v25);
  }
  sub_EAD920((uint64_t)v25, (uint64_t)&v41);
  if (*(unsigned char *)(a5 + 120) && a2)
  {
    uint64_t v35 = *(void *)(a5 + 96);
    uint64_t v36 = *(void *)(a5 + 104);
    uint64_t v37 = v35 + 24 * a2;
    if (v37 != v36)
    {
      uint64_t v38 = 0;
      do
      {
        uint64_t v39 = v35 + v38;
        *(unsigned char *)uint64_t v39 = *(unsigned char *)(v37 + v38);
        uint64_t v40 = *(void *)(v37 + v38 + 16);
        *(void *)(v39 + 8) = *(void *)(v37 + v38 + 8);
        *(void *)(v39 + 16) = v40;
        v38 += 24;
      }
      while (v37 + v38 != v36);
      v35 += v38;
    }
    *(void *)(a5 + 104) = v35;
  }
}

BOOL sub_436868(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  uint64_t v5 = a2;
  unint64_t v7 = (void *)nullsub_1(a3);
  uint64_t v8 = v7[1] - *v7;
  if (!v8)
  {
LABEL_26:
    BOOL result = sub_723EC(3u);
    if (result)
    {
      sub_6BAC((uint64_t)v30);
      sub_188FC78(v30, (uint64_t)"Could not locate the user offset on the path", 44);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v29 < 0) {
        operator delete(__p);
      }
      if (v31 < 0) {
        operator delete((void *)v30[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      return 0;
    }
    return result;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0xCBEEA4E1A08AD8F3 * (v8 >> 3);
  while (1)
  {
    uint64_t v12 = (void *)sub_EA8060(a3, v9);
    if (v5 <= sub_EAF548((uint64_t)v12)) {
      break;
    }
    uint64_t v11 = v5 - sub_EAF548((uint64_t)v12);
LABEL_6:
    ++v9;
    uint64_t v5 = v11;
    if (v9 == v10) {
      goto LABEL_26;
    }
  }
  uint64_t v13 = sub_EAE104(v12);
  if (!v13)
  {
    uint64_t v11 = v5;
    goto LABEL_6;
  }
  uint64_t v14 = v13;
  unint64_t v15 = 0;
  while (1)
  {
    uint64_t v16 = sub_EAE234((uint64_t)v12, v15);
    uint64_t v11 = v5 - v16;
    if (v5 <= v16) {
      break;
    }
    ++v15;
    v5 -= v16;
    if (v14 == v15) {
      goto LABEL_6;
    }
  }
  int v17 = *(_DWORD *)sub_69134((uint64_t)v12);
  if (v15) {
    int v18 = 0;
  }
  else {
    int v18 = v17;
  }
  uint64_t v19 = (void *)sub_EAE1B8(v12, v15);
  unsigned int v20 = 0;
  uint64_t v21 = (unsigned __int16 *)(*v19 - *(int *)*v19);
  if (*v21 >= 9u)
  {
    uint64_t v22 = v21[4];
    if (v22)
    {
      unsigned int v20 = 0;
      if (v5 != 0x7FFFFFFFFFFFFFFFLL)
      {
        unsigned int v23 = *(_DWORD *)(*v19 + v22);
        if (v23)
        {
          double v24 = (double)v5 / (double)v23;
          double v25 = 1000000000.0;
          if (v24 <= 1.0) {
            double v25 = v24 * 1000000000.0;
          }
          BOOL v26 = v24 < 0.0;
          double v27 = 0.0;
          if (!v26) {
            double v27 = v25;
          }
          unsigned int v20 = vcvtad_u64_f64(v27);
        }
      }
    }
    else
    {
      unsigned int v20 = 0;
    }
  }
  sub_436568(a1, v9, v15, v20 + v18, (uint64_t)a3);
  return 1;
}

void sub_436B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_436BB8(uint64_t a1, uint64_t a2, char a3)
{
  char v15 = 15;
  uint64_t v13 = 0;
  strcpy((char *)v14, "UserPathDecoder");
  __n128 __p = 0;
  uint64_t v12 = 0;
  uint64_t v6 = sub_374CDC(a2, (uint64_t)v14, (uint64_t *)&__p);
  sub_43C8E0(a1, v6);
  unint64_t v7 = (void **)__p;
  if (__p)
  {
    uint64_t v8 = v12;
    uint64_t v9 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = __p;
    }
    uint64_t v12 = v7;
    operator delete(v9);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = sub_37D0C0(a2);
  *(unsigned char *)(a1 + 40) = a3;
  return a1;
}

void sub_436CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_436CD4()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  char v56 = 17;
  strcpy(__p, "RequestWithGeoIds");
  uint64_t v8 = *(uint64_t **)(v0 + 32);
  uint64_t v9 = *v8;
  if (*v8)
  {
    sub_443118((uint64_t)v37, *v8);
  }
  else
  {
    long long v53 = 0;
    uint64_t v52 = 0;
    uint64_t v54 = 0;
    uint64_t v51 = 0;
    *(_OWORD *)int v50 = 0u;
    long long v49 = 0u;
    *(_OWORD *)uint64_t v48 = 0u;
    *(_OWORD *)uint64_t v47 = 0u;
    char v46 = 0;
    LOBYTE(v45) = 0;
    char v44 = 0;
    uint64_t v43 = 0;
    uint64_t v42 = 0;
    uint64_t v41 = 0;
    sub_29DC44((uint64_t)v37, (long long **)&v52, (long long *)v47, &v45, &v43, 0, (uint64_t)&v41, 1);
  }
  sub_710A8(1, (uint64_t)__p, (uint64_t)v37);
  sub_29E11C((uint64_t)v37);
  if (v9)
  {
LABEL_5:
    if (v56 < 0) {
      goto LABEL_6;
    }
    goto LABEL_7;
  }
  uint64_t v13 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    uint64_t v14 = v44;
    if (!v44)
    {
LABEL_18:
      if ((v46 & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_54;
    }
  }
  else
  {
    uint64_t v14 = v44;
    if (!v44) {
      goto LABEL_18;
    }
  }
  if (atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if ((v46 & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v51) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }
LABEL_54:
  operator delete((void *)v45);
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v49) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_55:
  operator delete(v50[0]);
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v48[0]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  operator delete(v48[1]);
  if ((SHIBYTE(v48[0]) & 0x80000000) == 0)
  {
LABEL_22:
    char v15 = (void **)v52;
    if (!v52) {
      goto LABEL_5;
    }
    goto LABEL_58;
  }
LABEL_57:
  operator delete(v47[0]);
  char v15 = (void **)v52;
  if (!v52) {
    goto LABEL_5;
  }
LABEL_58:
  uint64_t v32 = v53;
  if (v53 == v15)
  {
    long long v53 = v15;
    operator delete(v15);
    if (v56 < 0) {
      goto LABEL_6;
    }
    goto LABEL_7;
  }
  do
  {
    while (*((char *)v32 - 1) < 0)
    {
      operator delete(*(v32 - 3));
      if (*((char *)v32 - 25) < 0) {
        goto LABEL_65;
      }
LABEL_62:
      v32 -= 6;
      if (v32 == v15) {
        goto LABEL_66;
      }
    }
    if ((*((char *)v32 - 25) & 0x80000000) == 0) {
      goto LABEL_62;
    }
LABEL_65:
    operator delete(*(v32 - 6));
    v32 -= 6;
  }
  while (v32 != v15);
LABEL_66:
  long long v53 = v15;
  operator delete(v52);
  if (v56 < 0) {
LABEL_6:
  }
    operator delete(*(void **)__p);
LABEL_7:
  sub_47E0E4(&v57);
  unsigned __int8 v64 = 0;
  memset(v61, 0, sizeof(v61));
  sub_4498BC(v37, *(void **)(v5 + 24));
  sub_44B974(v37, v4, __p);
  sub_EA7B04((uint64_t)&v33, (long long *)__p);
  uint64_t v10 = v57;
  if ((void)v57)
  {
    uint64_t v11 = *((void *)&v57 + 1);
    uint64_t v12 = (void *)v57;
    if (*((void *)&v57 + 1) != (void)v57)
    {
      do
        uint64_t v11 = sub_405F44(v11 - 472);
      while (v11 != v10);
      uint64_t v12 = (void *)v57;
    }
    *((void *)&v57 + 1) = v10;
    operator delete(v12);
  }
  long long v57 = v33;
  uint64_t v58 = v34;
  uint64_t v34 = 0;
  long long v33 = 0uLL;
  if (SHIBYTE(v60) < 0)
  {
    operator delete((void *)v59);
    uint64_t v16 = v33;
    long long v59 = v35;
    uint64_t v60 = v36;
    HIBYTE(v36) = 0;
    LOBYTE(v35) = 0;
    if ((void)v33)
    {
      uint64_t v17 = *((void *)&v33 + 1);
      int v18 = (void *)v33;
      if (*((void *)&v33 + 1) != (void)v33)
      {
        do
          uint64_t v17 = sub_405F44(v17 - 472);
        while (v17 != v16);
        int v18 = (void *)v33;
      }
      *((void *)&v33 + 1) = v16;
      operator delete(v18);
    }
  }
  else
  {
    long long v59 = v35;
    uint64_t v60 = v36;
    HIBYTE(v36) = 0;
    LOBYTE(v35) = 0;
  }
  sub_405F44((uint64_t)__p);
  if (sub_EA80FC((char **)&v57)) {
    goto LABEL_49;
  }
  uint64_t v19 = *((void *)&v61[0] + 1);
  unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v61[0] + 1) - *(void *)&v61[0]) >> 3);
  if (*((void *)&v61[0] + 1) == *(void *)&v61[0])
  {
    sub_4467FC((uint64_t)v61, 1 - v20);
  }
  else if (v20 >= 2)
  {
    uint64_t v21 = *(void *)&v61[0] + 24;
    if (*((void *)&v61[0] + 1) != *(void *)&v61[0] + 24)
    {
      uint64_t v22 = *((void *)&v61[0] + 1);
      do
      {
        double v24 = *(void **)(v22 - 24);
        v22 -= 24;
        unsigned int v23 = v24;
        if (v24)
        {
          *(void *)(v19 - 16) = v23;
          operator delete(v23);
        }
        uint64_t v19 = v22;
      }
      while (v22 != v21);
    }
    *((void *)&v61[0] + 1) = v21;
  }
  double v25 = *(void **)&v61[0];
  unint64_t v26 = sub_EA8464((uint64_t)&v57);
  unint64_t v27 = (uint64_t)(v25[1] - *v25) >> 2;
  if (v26 <= v27)
  {
    if (v26 < v27) {
      v25[1] = *v25 + 4 * v26;
    }
  }
  else
  {
    sub_446A04((uint64_t)v25, v26 - v27);
  }
  if (!sub_43739C(v5, v2, (uint64_t)&v57))
  {
LABEL_49:
    sub_47E0E4((_OWORD *)v7);
    *(unsigned char *)(v7 + 120) = 0;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    uint64_t v30 = v39;
    if (v39) {
      goto LABEL_47;
    }
  }
  else
  {
    sub_437A5C(v5, v2, (uint64_t)&v57);
    *(_OWORD *)uint64_t v7 = v57;
    *(void *)(v7 + 16) = v58;
    long long v57 = 0uLL;
    *(_OWORD *)(v7 + 24) = v59;
    *(void *)(v7 + 40) = v60;
    long long v59 = 0uLL;
    uint64_t v60 = 0;
    *(_OWORD *)(v7 + 48) = v61[0];
    uint64_t v28 = *((void *)&v61[2] + 1);
    *(void *)(v7 + 64) = *(void *)&v61[1];
    memset(v61, 0, 24);
    *(_OWORD *)(v7 + 72) = *(_OWORD *)((char *)&v61[1] + 8);
    *(void *)(v7 + 88) = v28;
    uint64_t v58 = 0;
    memset((char *)&v61[1] + 8, 0, 24);
    int v29 = v64;
    *(unsigned char *)(v7 + 120) = v64;
    if (v29)
    {
      *(_OWORD *)(v7 + 96) = v62;
      *(void *)(v7 + 112) = v63;
      uint64_t v63 = 0;
      long long v62 = 0uLL;
    }
    uint64_t v30 = v39;
    if (v39)
    {
LABEL_47:
      uint64_t v40 = v30;
      operator delete(v30);
    }
  }
  sub_3A6318(v38);
  return sub_443A30((uint64_t)&v57);
}

void sub_4372C4(_Unwind_Exception *a1)
{
  sub_14A84((uint64_t)&STACK[0x1098]);
  sub_14A84((uint64_t)&STACK[0x10A8]);
  if (*(char *)(v1 + 23) < 0) {
    operator delete((void *)STACK[0x10B8]);
  }
  sub_29D7B0((uint64_t)&STACK[0x10D0]);
  sub_1A6DC((void **)&STACK[0x1118]);
  if (*(char *)(v1 + 143) < 0) {
    operator delete((void *)STACK[0x1130]);
  }
  _Unwind_Resume(a1);
}

BOOL sub_43739C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_DAA288(a2)) {
    return 1;
  }
  uint64_t v5 = sub_40EFE8(a3);
  if (v5 != sub_52058(a3)) {
    sub_43CA90(a1);
  }
  BOOL result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)v9);
    sub_188FC78(v9, (uint64_t)"Could not locate the user on the path", 37);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v8 < 0) {
      operator delete(__p);
    }
    if (v10 < 0) {
      operator delete(v9[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  return result;
}

void sub_4379C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_437A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_3750CC(*(void **)(a1 + 24));
  uint64_t v6 = sub_40EFE8(a3);
  uint64_t result = sub_52058(a3);
  if (v6 != result)
  {
    uint64_t v91 = a2;
    unint64_t v92 = (void **)(a3 + 72);
    uint64_t v89 = a2 + 96;
    uint64_t v90 = v5;
    do
    {
      unint64_t v11 = *(void *)(a3 + 80);
      if (v11 >= *(void *)(a3 + 88))
      {
        uint64_t v12 = sub_448AF0(v92);
      }
      else
      {
        *(_OWORD *)(v11 + 8) = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        *(_OWORD *)(v11 + 40) = 0u;
        *(_OWORD *)(v11 + 56) = 0u;
        *(_OWORD *)(v11 + 88) = 0u;
        *(_OWORD *)(v11 + 72) = 0u;
        *(void *)(v11 + 152) = 0;
        *(_OWORD *)(v11 + 136) = 0u;
        *(_OWORD *)(v11 + 120) = 0u;
        *(_OWORD *)(v11 + 104) = 0u;
        *(void *)unint64_t v11 = -1;
        *(_DWORD *)(v11 + 8) = 0x7FFFFFFF;
        *(void *)(v11 + 16) = -1;
        *(void *)(v11 + 24) = -1;
        *(void *)(v11 + 32) = 0x7FFFFFFFFFFFFFFFLL;
        *(_DWORD *)(v11 + 48) = -1935635296;
        *(void *)(v11 + 56) = 0;
        *(_DWORD *)(v11 + 63) = 0;
        *(void *)(v11 + 80) = 0;
        *(void *)(v11 + 88) = 0;
        *(_DWORD *)(v11 + 96) = 0;
        *(void *)(v11 + 72) = 0;
        *(unsigned char *)(v11 + 100) = 100;
        *(void *)(v11 + 151) = 0;
        *(_OWORD *)(v11 + 136) = 0u;
        *(_OWORD *)(v11 + 120) = 0u;
        *(_OWORD *)(v11 + 104) = 0u;
        uint64_t v12 = (char *)(v11 + 160);
      }
      *(void *)(a3 + 80) = v12;
      *((_DWORD *)v12 - 2) = 2 * (v6 != sub_40EFE8(a3));
      uint64_t v13 = (void *)sub_EADD1C(v6);
      uint64_t v14 = (unsigned __int16 *)(*v13 - *(int *)*v13);
      if (*v14 >= 9u && (uint64_t v15 = v14[4]) != 0) {
        uint64_t v16 = *(unsigned int *)(*v13 + v15);
      }
      else {
        uint64_t v16 = 0;
      }
      LODWORD(v17) = *(_DWORD *)sub_69134(v6);
      double v18 = (double)v17 / 1000000000.0 * (double)v16;
      if (v18 >= 0.0)
      {
        if (v18 >= 4.50359963e15) {
          goto LABEL_21;
        }
        uint64_t v19 = (uint64_t)(v18 + v18) + 1;
      }
      else
      {
        if (v18 <= -4.50359963e15) {
          goto LABEL_21;
        }
        uint64_t v19 = (uint64_t)(v18 + v18);
        if (v19 >= 1) {
          --v19;
        }
      }
      double v18 = (double)(v19 >> 1);
LABEL_21:
      uint64_t v20 = (uint64_t)v18;
      uint64_t v21 = sub_EADD1C(v6);
      unint64_t v22 = *(unsigned int *)(v21 + 32) | ((unint64_t)*(unsigned __int16 *)(v21 + 36) << 32);
      __int16 v23 = *(unsigned __int8 *)(sub_EADD1C(v6) + 38);
      double v25 = (char *)*((void *)v12 - 6);
      unint64_t v24 = *((void *)v12 - 5);
      if ((unint64_t)v25 < v24)
      {
        *(void *)double v25 = 0;
        *((void *)v25 + 1) = -1;
        *((_DWORD *)v25 + 4) = 0x7FFFFFFF;
        *((void *)v25 + 3) = v20;
        *((void *)v25 + 4) = v22;
        *((_WORD *)v25 + 20) = v23 | 0x100;
        *((_WORD *)v25 + 21) = 257;
        *((void *)v25 + 6) = 0;
        unint64_t v26 = v25 + 64;
        v25[56] = 0;
        goto LABEL_35;
      }
      unint64_t v27 = (unsigned char *)*((void *)v12 - 7);
      uint64_t v28 = (v25 - v27) >> 6;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 58) {
        goto LABEL_85;
      }
      uint64_t v30 = v24 - (void)v27;
      if (v30 >> 5 > v29) {
        unint64_t v29 = v30 >> 5;
      }
      BOOL v31 = (unint64_t)v30 >= 0x7FFFFFFFFFFFFFC0;
      unint64_t v32 = 0x3FFFFFFFFFFFFFFLL;
      if (!v31) {
        unint64_t v32 = v29;
      }
      if (v32 >> 58) {
        goto LABEL_86;
      }
      unint64_t v33 = v32 << 6;
      uint64_t v34 = (char *)operator new(v32 << 6);
      long long v35 = &v34[64 * v28];
      *(void *)long long v35 = 0;
      *((void *)v35 + 1) = -1;
      *((_DWORD *)v35 + 4) = 0x7FFFFFFF;
      *((void *)v35 + 3) = v20;
      *((void *)v35 + 4) = v22;
      *((_WORD *)v35 + 20) = v23 | 0x100;
      *((_WORD *)v35 + 21) = 257;
      *((void *)v35 + 6) = 0;
      v35[56] = 0;
      if (v25 == v27)
      {
        unint64_t v26 = v35 + 64;
        *((void *)v12 - 7) = v35;
        *((void *)v12 - 6) = v35 + 64;
        *((void *)v12 - 5) = &v34[v33];
        if (!v27) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v36 = &v34[64 * v28];
        do
        {
          uint64_t v37 = v36 - 64;
          long long v38 = *((_OWORD *)v25 - 4);
          long long v39 = *((_OWORD *)v25 - 3);
          *((void *)v36 - 4) = *((void *)v25 - 4);
          *((_OWORD *)v36 - 4) = v38;
          *((_OWORD *)v36 - 3) = v39;
          *((_WORD *)v36 - 12) = *((_WORD *)v25 - 12);
          *((_WORD *)v36 - 11) = *((_WORD *)v25 - 11);
          uint64_t v40 = *((void *)v25 - 2);
          *(v36 - 8) = *(v25 - 8);
          *((void *)v36 - 2) = v40;
          v25 -= 64;
          v36 -= 64;
        }
        while (v25 != v27);
        unint64_t v26 = v35 + 64;
        *((void *)v12 - 7) = v37;
        *((void *)v12 - 6) = v35 + 64;
        *((void *)v12 - 5) = &v34[v33];
        if (!v27) {
          goto LABEL_34;
        }
      }
      operator delete(v27);
LABEL_34:
      uint64_t v5 = v90;
      a2 = v91;
LABEL_35:
      *((void *)v12 - 6) = v26;
      uint64_t v41 = sub_EADD1C(v6);
      sub_2954EC(v5, *(void *)(v41 + 32), (uint64_t)v93);
      uint64_t v42 = __p;
      if (__p == v95)
      {
        unint64_t v45 = 0xFFFFFFFF00000000;
        uint64_t v46 = 0xFFFFFFFFLL;
        int v48 = 0x7FFFFFFF;
        if (!__p) {
          goto LABEL_38;
        }
LABEL_37:
        unint64_t v95 = v42;
        operator delete(v42);
        goto LABEL_38;
      }
      unint64_t v43 = sub_2E1AA4((uint64_t)v93);
      unsigned int v44 = v43;
      unint64_t v45 = v43 & 0xFFFFFFFF00000000;
      uint64_t v42 = __p;
      uint64_t v46 = v44;
      int v48 = v47;
      if (__p) {
        goto LABEL_37;
      }
LABEL_38:
      *((void *)v12 - 20) = v45 | v46;
      *((_DWORD *)v12 - 38) = v48;
      if (v6 == sub_40EFE8(a3) && sub_DAA288(a2))
      {
        long long v49 = v12 - 160;
        *(_OWORD *)long long v49 = *(_OWORD *)a2;
        long long v50 = *(_OWORD *)(a2 + 16);
        long long v51 = *(_OWORD *)(a2 + 32);
        long long v52 = *(_OWORD *)(a2 + 48);
        *(_DWORD *)(v49 + 63) = *(_DWORD *)(a2 + 63);
        *((_OWORD *)v49 + 2) = v51;
        *((_OWORD *)v49 + 3) = v52;
        *((_OWORD *)v49 + 1) = v50;
        if (v12 - 160 != (char *)a2) {
          sub_147D0((void *)v12 - 11, *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
        }
        int v53 = *(_DWORD *)v89;
        *(v12 - 60) = *(unsigned char *)(v89 + 4);
        *((_DWORD *)v12 - 16) = v53;
      }
      unint64_t v54 = *(void *)(a3 + 80);
      if (v54 >= *(void *)(a3 + 88))
      {
        long long v55 = sub_448AF0(v92);
      }
      else
      {
        *(_OWORD *)(v54 + 8) = 0u;
        *(_OWORD *)(v54 + 24) = 0u;
        *(_OWORD *)(v54 + 40) = 0u;
        *(_OWORD *)(v54 + 56) = 0u;
        *(_OWORD *)(v54 + 88) = 0u;
        *(_OWORD *)(v54 + 72) = 0u;
        *(void *)(v54 + 152) = 0;
        *(_OWORD *)(v54 + 136) = 0u;
        *(_OWORD *)(v54 + 120) = 0u;
        *(_OWORD *)(v54 + 104) = 0u;
        *(void *)unint64_t v54 = -1;
        *(_DWORD *)(v54 + 8) = 0x7FFFFFFF;
        *(void *)(v54 + 16) = -1;
        *(void *)(v54 + 24) = -1;
        *(void *)(v54 + 32) = 0x7FFFFFFFFFFFFFFFLL;
        *(_DWORD *)(v54 + 48) = -1935635296;
        *(void *)(v54 + 56) = 0;
        *(_DWORD *)(v54 + 63) = 0;
        *(void *)(v54 + 80) = 0;
        *(void *)(v54 + 88) = 0;
        *(_DWORD *)(v54 + 96) = 0;
        *(void *)(v54 + 72) = 0;
        *(unsigned char *)(v54 + 100) = 100;
        *(void *)(v54 + 151) = 0;
        *(_OWORD *)(v54 + 136) = 0u;
        *(_OWORD *)(v54 + 120) = 0u;
        *(_OWORD *)(v54 + 104) = 0u;
        long long v55 = (char *)(v54 + 160);
      }
      *(void *)(a3 + 80) = v55;
      if (v6 == sub_52058(a3) - 472) {
        int v56 = 1;
      }
      else {
        int v56 = 2;
      }
      *((_DWORD *)v55 - 2) = v56;
      long long v57 = (void *)sub_EAFF60(v6);
      uint64_t v58 = (unsigned __int16 *)(*v57 - *(int *)*v57);
      if (*v58 >= 9u && (uint64_t v59 = v58[4]) != 0) {
        uint64_t v60 = *(unsigned int *)(*v57 + v59);
      }
      else {
        uint64_t v60 = 0;
      }
      LODWORD(v61) = *(_DWORD *)sub_EADAD0(v6);
      double v62 = (double)v61 / 1000000000.0 * (double)v60;
      if (v62 >= 0.0)
      {
        if (v62 >= 4.50359963e15) {
          goto LABEL_61;
        }
        uint64_t v63 = (uint64_t)(v62 + v62) + 1;
      }
      else
      {
        if (v62 <= -4.50359963e15) {
          goto LABEL_61;
        }
        uint64_t v63 = (uint64_t)(v62 + v62);
        if (v63 >= 1) {
          --v63;
        }
      }
      double v62 = (double)(v63 >> 1);
LABEL_61:
      uint64_t v64 = (uint64_t)v62;
      uint64_t v65 = sub_EAFF60(v6);
      unint64_t v66 = *(unsigned int *)(v65 + 32) | ((unint64_t)*(unsigned __int16 *)(v65 + 36) << 32);
      __int16 v67 = *(unsigned __int8 *)(sub_EAFF60(v6) + 38);
      uint64_t v69 = (char *)*((void *)v55 - 6);
      unint64_t v68 = *((void *)v55 - 5);
      if ((unint64_t)v69 < v68)
      {
        *(void *)uint64_t v69 = 0;
        *((void *)v69 + 1) = -1;
        *((_DWORD *)v69 + 4) = 0x7FFFFFFF;
        *((void *)v69 + 3) = v64;
        *((void *)v69 + 4) = v66;
        *((_WORD *)v69 + 20) = v67 | 0x100;
        *((_WORD *)v69 + 21) = 257;
        *((void *)v69 + 6) = 0;
        long long v70 = v69 + 64;
        v69[56] = 0;
        goto LABEL_75;
      }
      long long v71 = (unsigned char *)*((void *)v55 - 7);
      uint64_t v72 = (v69 - v71) >> 6;
      unint64_t v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) >> 58) {
LABEL_85:
      }
        sub_2E00();
      uint64_t v74 = v68 - (void)v71;
      if (v74 >> 5 > v73) {
        unint64_t v73 = v74 >> 5;
      }
      BOOL v31 = (unint64_t)v74 >= 0x7FFFFFFFFFFFFFC0;
      unint64_t v75 = 0x3FFFFFFFFFFFFFFLL;
      if (!v31) {
        unint64_t v75 = v73;
      }
      if (v75 >> 58) {
LABEL_86:
      }
        sub_188D718();
      unint64_t v76 = v75 << 6;
      unint64_t v77 = (char *)operator new(v75 << 6);
      uint64_t v78 = &v77[64 * v72];
      *(void *)uint64_t v78 = 0;
      *((void *)v78 + 1) = -1;
      *((_DWORD *)v78 + 4) = 0x7FFFFFFF;
      *((void *)v78 + 3) = v64;
      *((void *)v78 + 4) = v66;
      *((_WORD *)v78 + 20) = v67 | 0x100;
      *((_WORD *)v78 + 21) = 257;
      *((void *)v78 + 6) = 0;
      v78[56] = 0;
      if (v69 == v71)
      {
        long long v70 = v78 + 64;
        *((void *)v55 - 7) = v78;
        *((void *)v55 - 6) = v78 + 64;
        *((void *)v55 - 5) = &v77[v76];
        if (!v71) {
          goto LABEL_74;
        }
      }
      else
      {
        unint64_t v79 = &v77[64 * v72];
        do
        {
          uint64_t v80 = v79 - 64;
          long long v81 = *((_OWORD *)v69 - 4);
          long long v82 = *((_OWORD *)v69 - 3);
          *((void *)v79 - 4) = *((void *)v69 - 4);
          *((_OWORD *)v79 - 4) = v81;
          *((_OWORD *)v79 - 3) = v82;
          *((_WORD *)v79 - 12) = *((_WORD *)v69 - 12);
          *((_WORD *)v79 - 11) = *((_WORD *)v69 - 11);
          uint64_t v83 = *((void *)v69 - 2);
          *(v79 - 8) = *(v69 - 8);
          *((void *)v79 - 2) = v83;
          v69 -= 64;
          v79 -= 64;
        }
        while (v69 != v71);
        long long v70 = v78 + 64;
        *((void *)v55 - 7) = v80;
        *((void *)v55 - 6) = v78 + 64;
        *((void *)v55 - 5) = &v77[v76];
        if (!v71) {
          goto LABEL_74;
        }
      }
      operator delete(v71);
LABEL_74:
      uint64_t v5 = v90;
      a2 = v91;
LABEL_75:
      *((void *)v55 - 6) = v70;
      uint64_t v84 = sub_EAFF60(v6);
      sub_2954EC(v5, *(void *)(v84 + 32), (uint64_t)v93);
      unint64_t v85 = __p;
      if (__p != v95)
      {
        unint64_t v86 = sub_2E40A4((uint64_t)v93);
        unsigned int v87 = v86;
        unint64_t v8 = v86 & 0xFFFFFFFF00000000;
        unint64_t v85 = __p;
        uint64_t v9 = v87;
        int v10 = v88;
        if (!__p) {
          goto LABEL_5;
        }
LABEL_4:
        unint64_t v95 = v85;
        operator delete(v85);
        goto LABEL_5;
      }
      unint64_t v8 = 0xFFFFFFFF00000000;
      uint64_t v9 = 0xFFFFFFFFLL;
      int v10 = 0x7FFFFFFF;
      if (__p) {
        goto LABEL_4;
      }
LABEL_5:
      *((void *)v55 - 20) = v8 | v9;
      *((_DWORD *)v55 - 38) = v10;
      v6 += 472;
      uint64_t result = sub_52058(a3);
    }
    while (v6 != result);
  }
  return result;
}

void sub_438224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_438244()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  char v30 = 20;
  strcpy(__p, "RequestWithZilchPath");
  unint64_t v8 = *(uint64_t **)(v0 + 32);
  uint64_t v9 = *v8;
  if (*v8)
  {
    sub_443118((uint64_t)&v31, *v8);
  }
  else
  {
    long long v51 = 0;
    long long v50 = 0;
    uint64_t v52 = 0;
    uint64_t v49 = 0;
    long long v48 = 0u;
    long long v47 = 0u;
    long long v46 = 0u;
    long long v45 = 0u;
    char v44 = 0;
    LOBYTE(v43) = 0;
    uint64_t v42 = 0;
    uint64_t v41 = 0;
    uint64_t v40 = 0;
    uint64_t v39 = 0;
    sub_29DC44((uint64_t)&v31, (long long **)&v50, &v45, &v43, &v41, 0, (uint64_t)&v39, 1);
  }
  sub_710A8(1, (uint64_t)__p, (uint64_t)&v31);
  sub_29E11C((uint64_t)&v31);
  if (v9)
  {
LABEL_5:
    if (v30 < 0) {
      goto LABEL_6;
    }
    goto LABEL_7;
  }
  uint64_t v16 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unint64_t v17 = v42;
    if (!v42)
    {
LABEL_23:
      if ((v44 & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_48;
    }
  }
  else
  {
    unint64_t v17 = v42;
    if (!v42) {
      goto LABEL_23;
    }
  }
  if (atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if ((v44 & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v49) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_49;
  }
LABEL_48:
  operator delete((void *)v43);
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
LABEL_25:
    if ((SHIBYTE(v47) & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }
LABEL_49:
  operator delete((void *)v48);
  if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SBYTE7(v46) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }
LABEL_50:
  operator delete(*((void **)&v46 + 1));
  if ((SBYTE7(v46) & 0x80000000) == 0)
  {
LABEL_27:
    double v18 = (void **)v50;
    if (!v50) {
      goto LABEL_5;
    }
    goto LABEL_52;
  }
LABEL_51:
  operator delete((void *)v45);
  double v18 = (void **)v50;
  if (!v50) {
    goto LABEL_5;
  }
LABEL_52:
  uint64_t v28 = v51;
  if (v51 == v18)
  {
    long long v51 = v18;
    operator delete(v18);
    if (v30 < 0) {
      goto LABEL_6;
    }
    goto LABEL_7;
  }
  do
  {
    while (*((char *)v28 - 1) < 0)
    {
      operator delete(*(v28 - 3));
      if (*((char *)v28 - 25) < 0) {
        goto LABEL_59;
      }
LABEL_56:
      v28 -= 6;
      if (v28 == v18) {
        goto LABEL_60;
      }
    }
    if ((*((char *)v28 - 25) & 0x80000000) == 0) {
      goto LABEL_56;
    }
LABEL_59:
    operator delete(*(v28 - 6));
    v28 -= 6;
  }
  while (v28 != v18);
LABEL_60:
  long long v51 = v18;
  operator delete(v50);
  if (v30 < 0) {
LABEL_6:
  }
    operator delete(*(void **)__p);
LABEL_7:
  sub_47E0E4(&v53);
  unsigned __int8 v61 = 0;
  long long v57 = 0u;
  memset(v58, 0, sizeof(v58));
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v38 = 0;
  uint64_t v10 = *v4;
  if (*v4 != v4[1])
  {
    if (*(char *)(v10 + 23) < 0)
    {
      uint64_t v12 = *(void *)v10;
      uint64_t v11 = *(void *)(v10 + 8);
    }
    else
    {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
      uint64_t v12 = *v4;
    }
    sub_1108B94((uint64_t)&v35, v12, v11);
    sub_1106C64();
  }
  sub_EA77C0((uint64_t)&v31, (uint64_t)&v36);
  uint64_t v13 = v53;
  if ((void)v53)
  {
    uint64_t v14 = *((void *)&v53 + 1);
    uint64_t v15 = (void *)v53;
    if (*((void *)&v53 + 1) != (void)v53)
    {
      do
        uint64_t v14 = sub_405F44(v14 - 472);
      while (v14 != v13);
      uint64_t v15 = (void *)v53;
    }
    *((void *)&v53 + 1) = v13;
    operator delete(v15);
  }
  long long v53 = v31;
  uint64_t v54 = v32;
  uint64_t v32 = 0;
  long long v31 = 0uLL;
  if (SHIBYTE(v56) < 0)
  {
    operator delete((void *)v55);
    long long v55 = v33;
    uint64_t v19 = v31;
    uint64_t v56 = v34;
    HIBYTE(v34) = 0;
    LOBYTE(v33) = 0;
    if ((void)v31)
    {
      uint64_t v20 = *((void *)&v31 + 1);
      uint64_t v21 = (void *)v31;
      if (*((void *)&v31 + 1) != (void)v31)
      {
        do
          uint64_t v20 = sub_405F44(v20 - 472);
        while (v20 != v19);
        uint64_t v21 = (void *)v31;
      }
      *((void *)&v31 + 1) = v19;
      operator delete(v21);
    }
  }
  else
  {
    long long v55 = v33;
    uint64_t v56 = v34;
  }
  if (!sub_43739C(v5, v2, (uint64_t)&v53))
  {
    sub_47E0E4((_OWORD *)v7);
    *(unsigned char *)(v7 + 120) = 0;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
LABEL_39:
    unint64_t v24 = v36;
    if (v36) {
      goto LABEL_40;
    }
    return sub_443A30((uint64_t)&v53);
  }
  sub_437A5C(v5, v2, (uint64_t)&v53);
  uint64_t v22 = v58[0];
  *(void *)(v7 + 16) = v54;
  *(void *)(v7 + 40) = v56;
  *(_OWORD *)uint64_t v7 = v53;
  long long v53 = 0uLL;
  *(_OWORD *)(v7 + 24) = v55;
  long long v55 = 0uLL;
  uint64_t v56 = 0;
  *(_OWORD *)(v7 + 48) = v57;
  *(void *)(v7 + 64) = v22;
  v58[0] = 0;
  long long v57 = 0uLL;
  *(_OWORD *)(v7 + 72) = *(_OWORD *)&v58[1];
  *(void *)(v7 + 88) = v58[3];
  uint64_t v54 = 0;
  memset(&v58[1], 0, 24);
  int v23 = v61;
  *(unsigned char *)(v7 + 120) = v61;
  if (!v23) {
    goto LABEL_39;
  }
  *(_OWORD *)(v7 + 96) = v59;
  *(void *)(v7 + 112) = v60;
  uint64_t v60 = 0;
  long long v59 = 0uLL;
  unint64_t v24 = v36;
  if (!v36) {
    return sub_443A30((uint64_t)&v53);
  }
LABEL_40:
  uint64_t v25 = (uint64_t)v37;
  unint64_t v26 = v24;
  if (v37 != v24)
  {
    do
      uint64_t v25 = sub_405F44(v25 - 472);
    while ((void *)v25 != v24);
    unint64_t v26 = v36;
  }
  uint64_t v37 = v24;
  operator delete(v26);
  return sub_443A30((uint64_t)&v53);
}

void sub_438E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&STACK[0x200]);
  sub_1106CAC((uint64_t *)&STACK[0x1260]);
  sub_4323C0((void **)&STACK[0x1290]);
  sub_443A30(v44 - 240);
  _Unwind_Resume(a1);
}

uint64_t sub_439014@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  if (a6) {
    uint64_t v10 = "RequestWithPathCodecDecoderPath";
  }
  else {
    uint64_t v10 = "RequestWithPathCodecDecoderPath.Sky";
  }
  if (a6) {
    size_t v11 = 31;
  }
  else {
    size_t v11 = 35;
  }
  v316 = (char *)((v11 | 7) - 0x7FFFFFFFFFFFFFFFLL);
  __p[0] = operator new((v11 | 7) + 1);
  __p[1] = (void *)v11;
  memcpy(__p[0], v10, v11);
  *((unsigned char *)__p[0] + v11) = 0;
  uint64_t v239 = a1;
  uint64_t v12 = *(uint64_t **)(a1 + 32);
  uint64_t v13 = *v12;
  if (*v12)
  {
    sub_443118((uint64_t)v343, *v12);
  }
  else
  {
    v358 = 0;
    v357 = 0;
    uint64_t v359 = 0;
    uint64_t v356 = 0;
    long long v355 = 0u;
    long long v354 = 0u;
    long long v353 = 0u;
    long long v352 = 0u;
    char v351 = 0;
    LOBYTE(v350) = 0;
    v349 = 0;
    uint64_t v348 = 0;
    v347 = 0;
    uint64_t v346 = 0;
    sub_29DC44((uint64_t)v343, (long long **)&v357, &v352, &v350, &v348, 0, (uint64_t)&v346, 1);
  }
  sub_710A8(1, (uint64_t)__p, (uint64_t)v343);
  sub_29E11C((uint64_t)v343);
  if (v13)
  {
LABEL_11:
    if (SHIBYTE(v316) < 0) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  unint64_t v152 = v347;
  if (v347 && !atomic_fetch_add(&v347->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
    std::__shared_weak_count::__release_weak(v152);
    int v153 = v349;
    if (!v349)
    {
LABEL_253:
      if ((v351 & 0x80000000) == 0) {
        goto LABEL_254;
      }
      goto LABEL_297;
    }
  }
  else
  {
    int v153 = v349;
    if (!v349) {
      goto LABEL_253;
    }
  }
  if (atomic_fetch_add(&v153->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_253;
  }
  ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
  std::__shared_weak_count::__release_weak(v153);
  if ((v351 & 0x80000000) == 0)
  {
LABEL_254:
    if ((SHIBYTE(v356) & 0x80000000) == 0) {
      goto LABEL_255;
    }
    goto LABEL_298;
  }
LABEL_297:
  operator delete((void *)v350);
  if ((SHIBYTE(v356) & 0x80000000) == 0)
  {
LABEL_255:
    if ((SHIBYTE(v354) & 0x80000000) == 0) {
      goto LABEL_256;
    }
    goto LABEL_299;
  }
LABEL_298:
  operator delete((void *)v355);
  if ((SHIBYTE(v354) & 0x80000000) == 0)
  {
LABEL_256:
    if ((SBYTE7(v353) & 0x80000000) == 0) {
      goto LABEL_257;
    }
    goto LABEL_300;
  }
LABEL_299:
  operator delete(*((void **)&v353 + 1));
  if ((SBYTE7(v353) & 0x80000000) == 0)
  {
LABEL_257:
    int v154 = (void **)v357;
    if (!v357) {
      goto LABEL_11;
    }
    goto LABEL_301;
  }
LABEL_300:
  operator delete((void *)v352);
  int v154 = (void **)v357;
  if (!v357) {
    goto LABEL_11;
  }
LABEL_301:
  long long v172 = v358;
  if (v358 == v154)
  {
    v358 = v154;
    operator delete(v154);
    if (SHIBYTE(v316) < 0) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  do
  {
    while (*((char *)v172 - 1) < 0)
    {
      operator delete(*(v172 - 3));
      if (*((char *)v172 - 25) < 0) {
        goto LABEL_308;
      }
LABEL_305:
      v172 -= 6;
      if (v172 == v154) {
        goto LABEL_309;
      }
    }
    if ((*((char *)v172 - 25) & 0x80000000) == 0) {
      goto LABEL_305;
    }
LABEL_308:
    operator delete(*(v172 - 6));
    v172 -= 6;
  }
  while (v172 != v154);
LABEL_309:
  v358 = v154;
  operator delete(v357);
  if (SHIBYTE(v316) < 0) {
LABEL_12:
  }
    operator delete(__p[0]);
LABEL_13:
  sub_47E0E4(&v360);
  char v369 = 0;
  long long v364 = 0u;
  long long v365 = 0u;
  long long v366 = 0u;
  sub_42DBBC((uint64_t)v343, *(void **)(a1 + 24));
  *(void *)&v338[0] = 0x4039000000000000;
  DWORD2(v338[0]) = 5000;
  v338[1] = xmmword_20E7C10;
  v338[2] = xmmword_20E7C20;
  *(void *)&long long v339 = 0;
  DWORD2(v339) = 20000000;
  *(void *)&long long v340 = 0x3FF199999999999ALL;
  *((void *)&v340 + 1) = 0x3E800002710;
  *(_DWORD *)v341 = 10000;
  strcpy(&v341[4], "\n");
  *(_OWORD *)&v341[8] = xmmword_20E7C00;
  *(void *)&v341[24] = 0x3FE6147AE147AE14;
  long long v334 = v340;
  long long v335 = *(_OWORD *)v341;
  long long v336 = *(_OWORD *)&v341[16];
  long long v330 = v338[0];
  long long v331 = xmmword_20E7C10;
  long long v332 = xmmword_20E7C20;
  LOWORD(v342) = 0;
  v329 = v343;
  uint64_t v337 = v342;
  long long v333 = v339;
  sub_410808((uint64_t)&v329, (uint64_t)&off_24F6948, 4);
  uint64_t v245 = sub_3750CC(*(void **)(a1 + 24));
  v327 = 0;
  v326 = 0;
  unint64_t v328 = 0;
  uint64_t v242 = *a2;
  uint64_t v237 = a2[1];
  if (*a2 == v237)
  {
    char v155 = 0;
    goto LABEL_343;
  }
  char v244 = 0;
  uint64_t v14 = "PathCodecDecodingFailure.Sky.TransportModeFlip";
  if (!a7) {
    uint64_t v14 = "PathCodecDecodingFailure.Sky";
  }
  __src = v14;
  uint64_t v15 = 28;
  if (a7) {
    uint64_t v15 = 46;
  }
  size_t v229 = v15;
  uint64_t v16 = v15 | 7;
  size_t __sz = v16 + 1;
  uint64_t v228 = v16 - 0x7FFFFFFFFFFFFFFFLL;
  v235 = (_OWORD *)(a8 + 48);
  char v247 = 1;
  char v248 = 1;
  while (2)
  {
    sub_1115F80(v255, 0, 0);
    if ((sub_1880FAC(v255, v242) & 1) == 0)
    {
      if (a6)
      {
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)__p);
          sub_188FC78(__p, (uint64_t)"Could not parse the path_leg.", 29);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&v291, 3u);
          if (SBYTE7(v292) < 0) {
            operator delete((void *)v291);
          }
          __p[0] = v232;
          *(void **)((char *)__p + *((void *)v232 - 3)) = v233;
          if (v325 < 0) {
            operator delete(v324);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        v313 = operator new(0x20uLL);
        long long v314 = xmmword_20B91C0;
        strcpy((char *)v313, "PathCodecDecodingFailure");
        unsigned int v156 = *(uint64_t **)(v239 + 32);
        uint64_t v157 = *v156;
        if (*v156)
        {
          sub_443118((uint64_t)__p, *v156);
        }
        else
        {
          long long v312 = 0uLL;
          v311 = 0;
          v295 = 0;
          long long v293 = 0u;
          long long v294 = 0u;
          long long v291 = 0u;
          long long v292 = 0u;
          HIBYTE(v310) = 0;
          LOBYTE(v309) = 0;
          v308 = 0;
          uint64_t v307 = 0;
          v306 = 0;
          uint64_t v305 = 0;
          sub_29DC44((uint64_t)__p, (long long **)&v311, &v291, (long long *)&v309, &v307, 0, (uint64_t)&v305, 1);
        }
        sub_710A8(1, (uint64_t)&v313, (uint64_t)__p);
        sub_29E11C((uint64_t)__p);
        if (v157)
        {
LABEL_465:
          if (SHIBYTE(v314) < 0) {
            operator delete(v313);
          }
          sub_47E0E4((_OWORD *)a8);
          *(unsigned char *)(a8 + 120) = 0;
          _OWORD *v235 = 0u;
          *(_OWORD *)(a8 + 64) = 0u;
          *(_OWORD *)(a8 + 80) = 0u;
          sub_1116458(v255);
          char v204 = (char *)v326;
          if (v326) {
            goto LABEL_410;
          }
          goto LABEL_414;
        }
        uint64_t v173 = v306;
        if (v306 && !atomic_fetch_add(&v306->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
          std::__shared_weak_count::__release_weak(v173);
        }
        long long v174 = v308;
        if (v308 && !atomic_fetch_add(&v308->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
        }
        if (SHIBYTE(v310) < 0)
        {
          operator delete(v309);
          if ((SHIBYTE(v295) & 0x80000000) == 0)
          {
LABEL_321:
            if ((SHIBYTE(v293) & 0x80000000) == 0) {
              goto LABEL_322;
            }
            goto LABEL_438;
          }
        }
        else if ((SHIBYTE(v295) & 0x80000000) == 0)
        {
          goto LABEL_321;
        }
        operator delete((void *)v294);
        if ((SHIBYTE(v293) & 0x80000000) == 0)
        {
LABEL_322:
          if ((SBYTE7(v292) & 0x80000000) == 0) {
            goto LABEL_323;
          }
          goto LABEL_439;
        }
LABEL_438:
        operator delete(*((void **)&v292 + 1));
        if ((SBYTE7(v292) & 0x80000000) == 0)
        {
LABEL_323:
          uint64_t v175 = (void **)v311;
          if (!v311) {
            goto LABEL_465;
          }
LABEL_440:
          v219 = (void **)v312;
          v220 = v175;
          if ((void **)v312 == v175)
          {
LABEL_448:
            *(void *)&long long v312 = v175;
LABEL_464:
            operator delete(v220);
            goto LABEL_465;
          }
          while (1)
          {
            if (*((char *)v219 - 1) < 0)
            {
              operator delete(*(v219 - 3));
              if ((*((char *)v219 - 25) & 0x80000000) == 0) {
                goto LABEL_443;
              }
LABEL_446:
              operator delete(*(v219 - 6));
              v219 -= 6;
              if (v219 == v175)
              {
LABEL_447:
                v220 = v311;
                goto LABEL_448;
              }
            }
            else
            {
              if (*((char *)v219 - 25) < 0) {
                goto LABEL_446;
              }
LABEL_443:
              v219 -= 6;
              if (v219 == v175) {
                goto LABEL_447;
              }
            }
          }
        }
LABEL_439:
        operator delete((void *)v291);
        uint64_t v175 = (void **)v311;
        if (!v311) {
          goto LABEL_465;
        }
        goto LABEL_440;
      }
      uint64_t v158 = sub_69510();
      LODWORD(__p[0]) = sub_69124((uint64_t)v158);
      sub_677F0((unsigned int *)__p, (uint64_t)&v313);
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        uint64_t v159 = sub_188FC78(__p, (uint64_t)"Could not parse the path_leg from ", 34);
        if (v314 >= 0) {
          long long v160 = &v313;
        }
        else {
          long long v160 = v313;
        }
        if (v314 >= 0) {
          uint64_t v161 = HIBYTE(v314);
        }
        else {
          uint64_t v161 = v314;
        }
        unint64_t v162 = sub_188FC78(v159, (uint64_t)v160, v161);
        unsigned int v163 = sub_188FC78(v162, (uint64_t)" request ", 9);
        uint64_t v164 = sub_68EE4((uint64_t)v158);
        int v165 = *(char *)(v164 + 23);
        if (v165 >= 0) {
          uint64_t v166 = v164;
        }
        else {
          uint64_t v166 = *(void *)v164;
        }
        if (v165 >= 0) {
          uint64_t v167 = *(unsigned __int8 *)(v164 + 23);
        }
        else {
          uint64_t v167 = *(void *)(v164 + 8);
        }
        sub_188FC78(v163, v166, v167);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v291, 3u);
        if (SBYTE7(v292) < 0) {
          operator delete((void *)v291);
        }
        __p[0] = v232;
        *(void **)((char *)__p + *((void *)v232 - 3)) = v233;
        if (v325 < 0) {
          operator delete(v324);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      v311 = operator new(0x20uLL);
      long long v312 = xmmword_20B91B0;
      strcpy((char *)v311, "PathCodecDecodingFailure.Sky");
      int v168 = *(uint64_t **)(v239 + 32);
      uint64_t v169 = *v168;
      if (*v168)
      {
        sub_443118((uint64_t)__p, *v168);
      }
      else
      {
        long long v310 = 0uLL;
        v309 = 0;
        v295 = 0;
        long long v293 = 0u;
        long long v294 = 0u;
        long long v291 = 0u;
        long long v292 = 0u;
        HIBYTE(v304) = 0;
        LOBYTE(v303) = 0;
        v302 = 0;
        uint64_t v301 = 0;
        v300 = 0;
        uint64_t v299 = 0;
        sub_29DC44((uint64_t)__p, (long long **)&v309, &v291, &v303, &v301, 0, (uint64_t)&v299, 1);
      }
      sub_710A8(1, (uint64_t)&v311, (uint64_t)__p);
      sub_29E11C((uint64_t)__p);
      if (v169) {
        goto LABEL_462;
      }
      v176 = v300;
      if (v300 && !atomic_fetch_add(&v300->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
      }
      long long v177 = v302;
      if (v302 && !atomic_fetch_add(&v302->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
      if (SHIBYTE(v304) < 0)
      {
        operator delete((void *)v303);
        if ((SHIBYTE(v295) & 0x80000000) == 0)
        {
LABEL_335:
          if ((SHIBYTE(v293) & 0x80000000) == 0) {
            goto LABEL_336;
          }
          goto LABEL_451;
        }
      }
      else if ((SHIBYTE(v295) & 0x80000000) == 0)
      {
        goto LABEL_335;
      }
      operator delete((void *)v294);
      if ((SHIBYTE(v293) & 0x80000000) == 0)
      {
LABEL_336:
        if ((SBYTE7(v292) & 0x80000000) == 0) {
          goto LABEL_337;
        }
LABEL_452:
        operator delete((void *)v291);
        uint64_t v178 = (void **)v309;
        if (v309) {
          goto LABEL_453;
        }
LABEL_462:
        if ((SHIBYTE(v312) & 0x80000000) == 0) {
          goto LABEL_465;
        }
        v220 = v311;
        goto LABEL_464;
      }
LABEL_451:
      operator delete(*((void **)&v292 + 1));
      if ((SBYTE7(v292) & 0x80000000) == 0)
      {
LABEL_337:
        uint64_t v178 = (void **)v309;
        if (!v309) {
          goto LABEL_462;
        }
LABEL_453:
        v221 = (void **)v310;
        v222 = v178;
        if ((void **)v310 == v178)
        {
LABEL_461:
          *(void *)&long long v310 = v178;
          operator delete(v222);
          goto LABEL_462;
        }
        while (1)
        {
          if (*((char *)v221 - 1) < 0)
          {
            operator delete(*(v221 - 3));
            if ((*((char *)v221 - 25) & 0x80000000) == 0) {
              goto LABEL_456;
            }
LABEL_459:
            operator delete(*(v221 - 6));
            v221 -= 6;
            if (v221 == v178)
            {
LABEL_460:
              v222 = v309;
              goto LABEL_461;
            }
          }
          else
          {
            if (*((char *)v221 - 25) < 0) {
              goto LABEL_459;
            }
LABEL_456:
            v221 -= 6;
            if (v221 == v178) {
              goto LABEL_460;
            }
          }
        }
      }
      goto LABEL_452;
    }
    sub_110B110((uint64_t)v338, (uint64_t)v255);
    if ((int)v256 >= 1)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 8 * v256;
      do
      {
        while (1)
        {
          uint64_t v19 = *(void *)(*((void *)&v256 + 1) + v17 + 8);
          if (*(_DWORD *)(v19 + 84) != 2) {
            break;
          }
          char v244 = 1;
          v17 += 8;
          if (v18 == v17) {
            goto LABEL_30;
          }
        }
        sub_42DBC0((uint64_t)v343, *(void *)(v19 + 48));
        char v21 = a6 ^ 1;
        if (v17) {
          char v21 = 0;
        }
        if (v20) {
          char v22 = 1;
        }
        else {
          char v22 = v21;
        }
        sub_42DBC0((uint64_t)v343, *(void *)(v19 + 48));
        v247 &= v22;
        v248 &= (v23 & 1) == 0;
        v17 += 8;
      }
      while (v18 != v17);
    }
LABEL_30:
    LOBYTE(v342) = v326 == v327;
    sub_410814((uint64_t)&v329, v338);
    sub_40F460((uint64_t *)&v329, (uint64_t)v255, (uint64_t)&v291);
    LOBYTE(v342) = 0;
    uint64_t v240 = *((void *)&v292 + 1);
    uint64_t v241 = v292;
    if ((void)v292 == *((void *)&v292 + 1))
    {
      if (a6)
      {
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)__p);
          sub_188FC78(__p, (uint64_t)"Decoding path with path-codec failed.", 37);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&v313, 3u);
          if (SHIBYTE(v314) < 0) {
            operator delete(v313);
          }
          __p[0] = v232;
          *(void **)((char *)__p + *((void *)v232 - 3)) = v233;
          if (v325 < 0) {
            operator delete(v324);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        v313 = operator new(0x20uLL);
        long long v314 = xmmword_20B91C0;
        strcpy((char *)v313, "PathCodecDecodingFailure");
        uint64_t v115 = *(uint64_t **)(v239 + 32);
        uint64_t v116 = *v115;
        if (*v115)
        {
          sub_443118((uint64_t)__p, *v115);
        }
        else
        {
          v289 = 0;
          v288 = 0;
          uint64_t v290 = 0;
          uint64_t v287 = 0;
          long long v285 = 0u;
          long long v286 = 0u;
          long long v283 = 0u;
          long long v284 = 0u;
          char v282 = 0;
          LOBYTE(v281) = 0;
          v280 = 0;
          uint64_t v279 = 0;
          v278 = 0;
          uint64_t v277 = 0;
          sub_29DC44((uint64_t)__p, (long long **)&v288, &v283, &v281, &v279, 0, (uint64_t)&v277, 1);
        }
        sub_710A8(1, (uint64_t)&v313, (uint64_t)__p);
        sub_29E11C((uint64_t)__p);
        if (v116) {
          goto LABEL_210;
        }
        signed int v140 = v278;
        if (v278 && !atomic_fetch_add(&v278->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
          v141 = v280;
          if (!v280) {
            goto LABEL_173;
          }
        }
        else
        {
          v141 = v280;
          if (!v280) {
            goto LABEL_173;
          }
        }
        if (!atomic_fetch_add(&v141->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
          if ((v282 & 0x80000000) == 0)
          {
LABEL_174:
            if ((SHIBYTE(v287) & 0x80000000) == 0) {
              goto LABEL_175;
            }
            goto LABEL_197;
          }
LABEL_196:
          operator delete((void *)v281);
          if ((SHIBYTE(v287) & 0x80000000) == 0)
          {
LABEL_175:
            if ((SHIBYTE(v285) & 0x80000000) == 0) {
              goto LABEL_176;
            }
            goto LABEL_198;
          }
LABEL_197:
          operator delete((void *)v286);
          if ((SHIBYTE(v285) & 0x80000000) == 0)
          {
LABEL_176:
            if ((SBYTE7(v284) & 0x80000000) == 0) {
              goto LABEL_177;
            }
            goto LABEL_199;
          }
LABEL_198:
          operator delete(*((void **)&v284 + 1));
          if ((SBYTE7(v284) & 0x80000000) == 0)
          {
LABEL_177:
            uint64_t v142 = (void **)v288;
            if (!v288) {
              goto LABEL_210;
            }
            goto LABEL_200;
          }
LABEL_199:
          operator delete((void *)v283);
          uint64_t v142 = (void **)v288;
          if (!v288) {
            goto LABEL_210;
          }
LABEL_200:
          uint64_t v147 = v289;
          unint64_t v143 = v142;
          if (v289 == v142)
          {
LABEL_208:
            v289 = v142;
LABEL_209:
            operator delete(v143);
            goto LABEL_210;
          }
          while (1)
          {
            if (*((char *)v147 - 1) < 0)
            {
              operator delete(*(v147 - 3));
              if ((*((char *)v147 - 25) & 0x80000000) == 0) {
                goto LABEL_203;
              }
LABEL_206:
              operator delete(*(v147 - 6));
              v147 -= 6;
              if (v147 == v142)
              {
LABEL_207:
                unint64_t v143 = v288;
                goto LABEL_208;
              }
            }
            else
            {
              if (*((char *)v147 - 25) < 0) {
                goto LABEL_206;
              }
LABEL_203:
              v147 -= 6;
              if (v147 == v142) {
                goto LABEL_207;
              }
            }
          }
        }
LABEL_173:
        if ((v282 & 0x80000000) == 0) {
          goto LABEL_174;
        }
        goto LABEL_196;
      }
      std::string::size_type v117 = sub_69510();
      LODWORD(__p[0]) = sub_69124((uint64_t)v117);
      sub_677F0((unsigned int *)__p, (uint64_t)&v313);
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        uint8x8_t v118 = sub_188FC78(__p, (uint64_t)"Decoding path with path-codec failed for ", 41);
        if (v314 >= 0) {
          uint64_t v119 = &v313;
        }
        else {
          uint64_t v119 = v313;
        }
        if (v314 >= 0) {
          uint64_t v120 = HIBYTE(v314);
        }
        else {
          uint64_t v120 = v314;
        }
        unint64_t v121 = sub_188FC78(v118, (uint64_t)v119, v120);
        uint64_t v122 = sub_188FC78(v121, (uint64_t)" request (os_version: ", 22);
        uint64_t v123 = sub_69134((uint64_t)v117);
        int v124 = *(char *)(v123 + 23);
        if (v124 >= 0) {
          uint64_t v125 = v123;
        }
        else {
          uint64_t v125 = *(void *)v123;
        }
        if (v124 >= 0) {
          uint64_t v126 = *(unsigned __int8 *)(v123 + 23);
        }
        else {
          uint64_t v126 = *(void *)(v123 + 8);
        }
        int v127 = sub_188FC78(v122, v125, v126);
        long double v128 = sub_188FC78(v127, (uint64_t)", all_geo_ids_invalid: ", 23);
        *(_DWORD *)((char *)v128 + *(void *)(*v128 - 24) + 8) |= 1u;
        double v129 = (void *)std::ostream::operator<<();
        sub_188FC78(v129, (uint64_t)", all_geo_ids_valid: ", 21);
        long double v130 = (void *)std::ostream::operator<<();
        sub_188FC78(v130, (uint64_t)", transport_mode_flip=", 22);
        double v131 = (void *)std::ostream::operator<<();
        int v132 = sub_188FC78(v131, (uint64_t)") ", 2);
        uint64_t v133 = sub_68EE4((uint64_t)v117);
        int v134 = *(char *)(v133 + 23);
        if (v134 >= 0) {
          uint64_t v135 = v133;
        }
        else {
          uint64_t v135 = *(void *)v133;
        }
        if (v134 >= 0) {
          uint64_t v136 = *(unsigned __int8 *)(v133 + 23);
        }
        else {
          uint64_t v136 = *(void *)(v133 + 8);
        }
        sub_188FC78(v132, v135, v136);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v311, 3u);
        if (SHIBYTE(v312) < 0) {
          operator delete(v311);
        }
        __p[0] = v232;
        *(void **)((char *)__p + *((void *)v232 - 3)) = v233;
        if (v325 < 0) {
          operator delete(v324);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      uint64_t v137 = operator new(__sz);
      *((void *)&v312 + 1) = v228;
      v311 = v137;
      *(void *)&long long v312 = v229;
      memcpy(v137, __src, v229);
      *((unsigned char *)v137 + v229) = 0;
      uint64_t v138 = *(uint64_t **)(v239 + 32);
      uint64_t v139 = *v138;
      if (*v138)
      {
        sub_443118((uint64_t)__p, *v138);
      }
      else
      {
        v275 = 0;
        v274 = 0;
        uint64_t v276 = 0;
        uint64_t v273 = 0;
        long long v271 = 0u;
        long long v272 = 0u;
        long long v269 = 0u;
        long long v270 = 0u;
        char v268 = 0;
        LOBYTE(v267) = 0;
        uint64_t v265 = 0;
        v266 = 0;
        uint64_t v263 = 0;
        v264 = 0;
        sub_29DC44((uint64_t)__p, (long long **)&v274, &v269, &v267, &v265, 0, (uint64_t)&v263, 1);
      }
      sub_710A8(1, (uint64_t)&v311, (uint64_t)__p);
      sub_29E11C((uint64_t)__p);
      if (v139)
      {
LABEL_181:
        if (SHIBYTE(v312) < 0) {
          goto LABEL_182;
        }
        goto LABEL_210;
      }
      std::string::size_type v144 = v264;
      if (v264 && !atomic_fetch_add(&v264->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
        unint64_t v145 = v266;
        if (!v266) {
          goto LABEL_187;
        }
      }
      else
      {
        unint64_t v145 = v266;
        if (!v266) {
          goto LABEL_187;
        }
      }
      if (!atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
        if ((v268 & 0x80000000) == 0)
        {
LABEL_188:
          if ((SHIBYTE(v273) & 0x80000000) == 0) {
            goto LABEL_189;
          }
          goto LABEL_229;
        }
LABEL_228:
        operator delete((void *)v267);
        if ((SHIBYTE(v273) & 0x80000000) == 0)
        {
LABEL_189:
          if ((SHIBYTE(v271) & 0x80000000) == 0) {
            goto LABEL_190;
          }
          goto LABEL_230;
        }
LABEL_229:
        operator delete((void *)v272);
        if ((SHIBYTE(v271) & 0x80000000) == 0)
        {
LABEL_190:
          if ((SBYTE7(v270) & 0x80000000) == 0) {
            goto LABEL_191;
          }
          goto LABEL_231;
        }
LABEL_230:
        operator delete(*((void **)&v270 + 1));
        if ((SBYTE7(v270) & 0x80000000) == 0)
        {
LABEL_191:
          int v146 = (void **)v274;
          if (!v274) {
            goto LABEL_181;
          }
          goto LABEL_232;
        }
LABEL_231:
        operator delete((void *)v269);
        int v146 = (void **)v274;
        if (!v274) {
          goto LABEL_181;
        }
LABEL_232:
        char v149 = v275;
        if (v275 == v146)
        {
          v275 = v146;
          operator delete(v146);
          if (SHIBYTE(v312) < 0) {
            goto LABEL_182;
          }
          goto LABEL_210;
        }
        while (1)
        {
          if (*((char *)v149 - 1) < 0)
          {
            operator delete(*(v149 - 3));
            if ((*((char *)v149 - 25) & 0x80000000) == 0) {
              goto LABEL_236;
            }
LABEL_239:
            operator delete(*(v149 - 6));
            v149 -= 6;
            if (v149 == v146)
            {
LABEL_240:
              v275 = v146;
              operator delete(v274);
              if (SHIBYTE(v312) < 0)
              {
LABEL_182:
                unint64_t v143 = v311;
                goto LABEL_209;
              }
LABEL_210:
              if (SHIBYTE(v314) < 0) {
                operator delete(v313);
              }
              sub_47E0E4((_OWORD *)a8);
              *(unsigned char *)(a8 + 120) = 0;
              _OWORD *v235 = 0u;
              *(_OWORD *)(a8 + 64) = 0u;
              *(_OWORD *)(a8 + 80) = 0u;
              goto LABEL_213;
            }
          }
          else
          {
            if (*((char *)v149 - 25) < 0) {
              goto LABEL_239;
            }
LABEL_236:
            v149 -= 6;
            if (v149 == v146) {
              goto LABEL_240;
            }
          }
        }
      }
LABEL_187:
      if ((v268 & 0x80000000) == 0) {
        goto LABEL_188;
      }
      goto LABEL_228;
    }
    sub_43BD74((uint64_t)&v291, (uint64_t)v343, *(unsigned char *)(v239 + 16), (uint64_t *)&v313);
    unint64_t v24 = (double *)v313;
    v246 = (double *)v314;
    if (v313 == (void *)v314)
    {
      if (!v313) {
        goto LABEL_128;
      }
LABEL_33:
      uint64_t v25 = (double *)v314;
      unint64_t v26 = v24;
      if ((double *)v314 != v24)
      {
        do
        {
          v25 -= 17;
          sub_443B90((uint64_t)&v314 + 8, v25);
        }
        while (v25 != v24);
        unint64_t v26 = v313;
      }
      *(void *)&long long v314 = v24;
      operator delete(v26);
      if (v295 == v296) {
        goto LABEL_213;
      }
LABEL_129:
      sub_448D70((uint64_t *)&v295, (uint64_t)__p);
      if (v369)
      {
        if ((void)v367)
        {
          *((void *)&v367 + 1) = v367;
          operator delete((void *)v367);
        }
        long long v367 = *(_OWORD *)__p;
        v368 = v316;
        uint64_t v114 = v298;
        if (!v298) {
          goto LABEL_214;
        }
      }
      else
      {
        long long v367 = *(_OWORD *)__p;
        v368 = v316;
        char v369 = 1;
        uint64_t v114 = v298;
        if (!v298) {
          goto LABEL_214;
        }
      }
      do
      {
LABEL_247:
        int v150 = (void *)*v114;
        long long v151 = (void *)v114[3];
        if (v151)
        {
          v114[4] = v151;
          operator delete(v151);
        }
        operator delete(v114);
        uint64_t v114 = v150;
      }
      while (v150);
      goto LABEL_214;
    }
    while (2)
    {
      uint64_t v28 = v327;
      if ((unint64_t)v327 < v328)
      {
        sub_EAFC08((uint64_t)v327);
        unint64_t v29 = v28 + 472;
        goto LABEL_61;
      }
      unint64_t v30 = 0xCBEEA4E1A08AD8F3 * ((v327 - (unsigned char *)v326) >> 3);
      unint64_t v31 = v30 + 1;
      if (v30 + 1 > 0x8AD8F2FBA93868) {
        sub_2E00();
      }
      if (0x97DD49C34115B1E6 * ((uint64_t)(v328 - (void)v326) >> 3) > v31) {
        unint64_t v31 = 0x97DD49C34115B1E6 * ((uint64_t)(v328 - (void)v326) >> 3);
      }
      if (0xCBEEA4E1A08AD8F3 * ((uint64_t)(v328 - (void)v326) >> 3) >= 0x456C797DD49C34) {
        unint64_t v32 = 0x8AD8F2FBA93868;
      }
      else {
        unint64_t v32 = v31;
      }
      *((void *)&v317 + 1) = &v328;
      if (v32)
      {
        if (v32 > 0x8AD8F2FBA93868) {
          sub_188D718();
        }
        long long v33 = (char *)operator new(472 * v32);
      }
      else
      {
        long long v33 = 0;
      }
      __p[0] = v33;
      __p[1] = &v33[472 * v30];
      v316 = (char *)__p[1];
      *(void *)&long long v317 = &v33[472 * v32];
      sub_EAFC08((uint64_t)__p[1]);
      uint64_t v34 = (char *)__p[1];
      unint64_t v29 = v316 + 472;
      uint64_t v35 = (void **)v327;
      uint64_t v36 = (void **)v326;
      if (v327 == v326)
      {
        v326 = __p[1];
        v327 = v316 + 472;
        unint64_t v328 = v317;
        if (v35) {
          goto LABEL_60;
        }
      }
      else
      {
        uint64_t v37 = 0;
        do
        {
          long long v46 = &v34[v37 * 8];
          uint64_t v47 = (uint64_t)&v34[v37 * 8 - 472];
          long long v48 = &v35[v37];
          uint64_t v49 = (uint64_t)&v35[v37 - 59];
          long long v50 = *(_OWORD *)v49;
          *(void *)(v47 + 16) = v35[v37 - 57];
          *(_OWORD *)uint64_t v47 = v50;
          *(void *)(v49 + 8) = 0;
          *(void *)(v49 + 16) = 0;
          *(void *)uint64_t v49 = 0;
          long long v51 = &v34[v37 * 8 - 448];
          uint64_t v52 = (uint64_t)&v35[v37 - 56];
          *(void *)&v34[v37 * 8 - 440] = 0;
          *(void *)long long v51 = 0;
          *((void *)v51 + 2) = 0;
          *(_OWORD *)long long v51 = *(_OWORD *)v52;
          *(void *)&v34[v37 * 8 - 432] = v35[v37 - 54];
          v35[v37 - 55] = 0;
          *(void *)uint64_t v52 = 0;
          *(void *)(v52 + 16) = 0;
          long long v53 = &v34[v37 * 8 - 424];
          long long v54 = *(_OWORD *)&v35[v37 - 53];
          long long v55 = *(_OWORD *)&v35[v37 - 51];
          long long v56 = *(_OWORD *)&v35[v37 - 49];
          *(_OWORD *)(v53 + 46) = *(_OWORD *)((char *)&v35[v37 - 47] - 2);
          *((_OWORD *)v53 + 1) = v55;
          *((_OWORD *)v53 + 2) = v56;
          *(_OWORD *)long long v53 = v54;
          long long v57 = &v34[v37 * 8 - 360];
          uint64_t v58 = (uint64_t)&v35[v37 - 45];
          *((void *)v57 + 1) = 0;
          *((void *)v57 + 2) = 0;
          *(void *)long long v57 = 0;
          *(_OWORD *)long long v57 = *(_OWORD *)v58;
          *(void *)&v34[v37 * 8 - 344] = v35[v37 - 43];
          v35[v37 - 44] = 0;
          *(void *)uint64_t v58 = 0;
          *(void *)(v58 + 16) = 0;
          long long v59 = &v34[v37 * 8 - 336];
          uint64_t v60 = (uint64_t)&v35[v37 - 42];
          *(void *)&v34[v37 * 8 - 328] = 0;
          *(void *)long long v59 = 0;
          *((void *)v59 + 2) = 0;
          *(_OWORD *)long long v59 = *(_OWORD *)v60;
          *(void *)&v34[v37 * 8 - 320] = v35[v37 - 40];
          v35[v37 - 41] = 0;
          *(void *)uint64_t v60 = 0;
          *(void *)(v60 + 16) = 0;
          unsigned __int8 v61 = &v34[v37 * 8 - 312];
          uint64_t v62 = (uint64_t)&v35[v37 - 39];
          *(void *)&v34[v37 * 8 - 304] = 0;
          *(void *)unsigned __int8 v61 = 0;
          *((void *)v61 + 2) = 0;
          *(_OWORD *)unsigned __int8 v61 = *(_OWORD *)v62;
          *(void *)&v34[v37 * 8 - 296] = v35[v37 - 37];
          v35[v37 - 38] = 0;
          *(void *)uint64_t v62 = 0;
          *(void *)(v62 + 16) = 0;
          uint64_t v63 = &v34[v37 * 8 - 288];
          long long v64 = *(_OWORD *)&v35[v37 - 34];
          uint64_t v65 = v35[v37 - 32];
          *(_OWORD *)uint64_t v63 = *(_OWORD *)&v35[v37 - 36];
          *((_OWORD *)v63 + 1) = v64;
          *((void *)v46 - 32) = v65;
          *((void *)v46 - 31) = 0;
          *((void *)v46 - 30) = 0;
          *((void *)v46 - 29) = 0;
          *(_OWORD *)(v46 - 248) = *(_OWORD *)&v35[v37 - 31];
          *((void *)v46 - 29) = v35[v37 - 29];
          *(v48 - 31) = 0;
          *(v48 - 30) = 0;
          *(v48 - 29) = 0;
          *((void *)v46 - 28) = 0;
          *((void *)v46 - 27) = 0;
          *((void *)v46 - 26) = 0;
          *((_OWORD *)v46 - 14) = *(_OWORD *)&v35[v37 - 28];
          *((void *)v46 - 26) = v35[v37 - 26];
          *(v48 - 28) = 0;
          *(v48 - 27) = 0;
          *(v48 - 26) = 0;
          *(_OWORD *)(v46 - 200) = *(_OWORD *)&v35[v37 - 25];
          *((_DWORD *)v46 - 44) = v35[v37 - 22];
          if (LODWORD(v35[v37 - 22]) < 2) {
            *((void *)v46 - 23) = *(v48 - 23);
          }
          uint64_t v38 = &v34[v37 * 8];
          *(_OWORD *)(v38 - 168) = *(_OWORD *)&v35[v37 - 21];
          long long v39 = *(_OWORD *)&v35[v37 - 13];
          long long v40 = *(_OWORD *)&v35[v37 - 11];
          long long v41 = *(_OWORD *)&v35[v37 - 9];
          *(_OWORD *)(v38 - 120) = *(_OWORD *)&v35[v37 - 15];
          *(_OWORD *)(v38 - 72) = v41;
          *(_OWORD *)(v38 - 88) = v40;
          *(_OWORD *)(v38 - 104) = v39;
          long long v42 = *(_OWORD *)&v35[v37 - 5];
          long long v43 = *(_OWORD *)&v35[v37 - 3];
          uint64_t v44 = *(uint64_t *)((char *)&v35[v37 - 1] - 1);
          *(_OWORD *)(v38 - 56) = *(_OWORD *)&v35[v37 - 7];
          *(void *)(v38 - 9) = v44;
          *(_OWORD *)(v38 - 24) = v43;
          *(_OWORD *)(v38 - 40) = v42;
          long long v45 = *(_OWORD *)&v35[v37 - 19];
          *(_OWORD *)(v38 - 136) = *(_OWORD *)&v35[v37 - 17];
          *(_OWORD *)(v38 - 152) = v45;
          v37 -= 59;
        }
        while (&v35[v37] != v36);
        uint64_t v35 = (void **)v326;
        unint64_t v66 = (void **)v327;
        v326 = &v34[v37 * 8];
        v327 = v29;
        unint64_t v328 = v317;
        if (v66 != v35)
        {
          do
          {
            long long v70 = *(v66 - 28);
            if (v70)
            {
              *(v66 - 27) = v70;
              operator delete(v70);
            }
            long long v71 = *(v66 - 31);
            if (v71)
            {
              *(v66 - 30) = v71;
              operator delete(v71);
            }
            uint64_t v72 = *(v66 - 39);
            if (v72)
            {
              *(v66 - 38) = v72;
              operator delete(v72);
            }
            unint64_t v73 = *(v66 - 42);
            if (v73)
            {
              *(v66 - 41) = v73;
              operator delete(v73);
            }
            uint64_t v74 = (char *)*(v66 - 45);
            if (v74)
            {
              unint64_t v75 = (char *)*(v66 - 44);
              unint64_t v76 = *(v66 - 45);
              if (v75 != v74)
              {
                do
                {
                  unint64_t v77 = (void *)*((void *)v75 - 3);
                  if (v77)
                  {
                    *((void *)v75 - 2) = v77;
                    operator delete(v77);
                  }
                  v75 -= 56;
                }
                while (v75 != v74);
                unint64_t v76 = *(v66 - 45);
              }
              *(v66 - 44) = v74;
              operator delete(v76);
            }
            uint64_t v78 = *(v66 - 56);
            if (v78)
            {
              *(v66 - 55) = v78;
              operator delete(v78);
            }
            unint64_t v79 = v66 - 59;
            if (*((char *)v66 - 449) < 0) {
              operator delete(*v79);
            }
            v66 -= 59;
          }
          while (v79 != v35);
        }
        if (v35) {
LABEL_60:
        }
          operator delete(v35);
      }
LABEL_61:
      v327 = v29;
      uint64_t v67 = (uint64_t)(v29 - 472);
      sub_43C170((uint64_t)v24, v245, v67);
      LODWORD(__p[0]) = 0;
      __p[1] = 0;
      v316 = 0;
      LOBYTE(v317) = 0;
      *((void *)&v317 + 1) = 0x3FF0000000000000;
      LOBYTE(v318) = 1;
      uint64_t v319 = 0;
      uint64_t v320 = 0;
      char v321 = 0;
      int v322 = 36000;
      char v323 = 0;
      LODWORD(__p[0]) = vcvtad_u64_f64(*v24 * 1000000000.0);
      sub_EAD920(v67, (uint64_t)__p);
      LODWORD(__p[0]) = vcvtad_u64_f64(v24[1] * 1000000000.0);
      sub_EADAA8(v67, (uint64_t)__p);
      unint64_t v68 = (void *)*((void *)&v364 + 1);
      if (*((void *)&v364 + 1) >= (unint64_t)v365)
      {
        uint64_t v80 = (void *)v364;
        unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v364 + 1) - v364) >> 3);
        unint64_t v82 = v81 + 1;
        if (v81 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_2E00();
        }
        if (0x5555555555555556 * ((uint64_t)(v365 - v364) >> 3) > v82) {
          unint64_t v82 = 0x5555555555555556 * ((uint64_t)(v365 - v364) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v365 - v364) >> 3) >= 0x555555555555555) {
          unint64_t v83 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v83 = v82;
        }
        if (v83)
        {
          if (v83 > 0xAAAAAAAAAAAAAAALL) {
            sub_188D718();
          }
          uint64_t v84 = (char *)operator new(24 * v83);
        }
        else
        {
          uint64_t v84 = 0;
        }
        unint64_t v85 = &v84[24 * v81];
        *(void *)unint64_t v85 = 0;
        *((void *)v85 + 1) = 0;
        *((void *)v85 + 2) = 0;
        uint64_t v69 = v85 + 24;
        if (v68 == v80)
        {
          *(void *)&long long v364 = &v84[24 * v81];
          *((void *)&v364 + 1) = v85 + 24;
          *(void *)&long long v365 = &v84[24 * v83];
        }
        else
        {
          do
          {
            unint64_t v86 = v85;
            *((void *)v85 - 2) = 0;
            *((void *)v85 - 1) = 0;
            long long v87 = *(_OWORD *)(v68 - 3);
            v68 -= 3;
            *(_OWORD *)(v85 - 24) = v87;
            v85 -= 24;
            *((void *)v86 - 1) = v68[2];
            void *v68 = 0;
            v68[1] = 0;
            v68[2] = 0;
          }
          while (v68 != v80);
          int v88 = (void *)*((void *)&v364 + 1);
          unint64_t v68 = (void *)v364;
          *(void *)&long long v364 = v85;
          *((void *)&v364 + 1) = v69;
          *(void *)&long long v365 = &v84[24 * v83];
          if (v88 != v68)
          {
            uint64_t v89 = v88;
            do
            {
              uint64_t v91 = (void *)*(v89 - 3);
              v89 -= 3;
              uint64_t v90 = v91;
              if (v91)
              {
                *(v88 - 2) = v90;
                operator delete(v90);
              }
              int v88 = v89;
            }
            while (v89 != v68);
          }
        }
        if (v68) {
          operator delete(v68);
        }
      }
      else
      {
        **((void **)&v364 + 1) = 0;
        v68[1] = 0;
        uint64_t v69 = v68 + 3;
        v68[2] = 0;
      }
      *((void *)&v364 + 1) = v69;
      uint64_t v93 = (unsigned char *)*(v69 - 3);
      unint64_t v92 = (unsigned char *)*(v69 - 2);
      uint64_t v94 = *((void *)v24 + 3) - *((void *)v24 + 2);
      unint64_t v95 = v94 >> 3;
      uint64_t v96 = v92 - v93;
      unint64_t v97 = (v92 - v93) >> 2;
      unint64_t v98 = (v94 >> 3) - v97;
      if (v94 >> 3 <= v97)
      {
        if (v94 >> 3 < v97) {
          *(v69 - 2) = &v93[4 * v95];
        }
      }
      else
      {
        uint64_t v99 = *(v69 - 1);
        if (v98 <= (v99 - (uint64_t)v92) >> 2)
        {
          unint64_t v27 = &v92[4 * v98];
          memset((void *)*(v69 - 2), 255, (((v94 >> 1) - v96 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
          *(v69 - 2) = v27;
        }
        else
        {
          if (v94 < 0) {
            sub_2E00();
          }
          unint64_t v100 = v99 - (void)v93;
          unint64_t v101 = (v99 - (uint64_t)v93) >> 1;
          if (v101 <= v95) {
            unint64_t v101 = v94 >> 3;
          }
          if (v100 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v101 = 0x3FFFFFFFFFFFFFFFLL;
          }
          if (v101 >> 62) {
            sub_188D718();
          }
          unint64_t v102 = v101;
          v243 = operator new(4 * v101);
          unsigned int v103 = &v243[4 * v97];
          memset(v103, 255, ((((unint64_t)v94 >> 1) - v96 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
          if (v92 == v93)
          {
            uint64_t v105 = v243;
          }
          else
          {
            unint64_t v104 = v92 - 4 - v93;
            if (v104 < 0x2C)
            {
              uint64_t v105 = v243;
              goto LABEL_124;
            }
            uint64_t v105 = v243;
            if ((unint64_t)(v93 - v243) < 0x20) {
              goto LABEL_493;
            }
            uint64_t v106 = (v104 >> 2) + 1;
            uint64_t v107 = 4 * (v106 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v108 = &v92[-v107];
            v103 -= v107;
            int v109 = &v243[4 * v97 - 16];
            unint64_t v110 = (long long *)(v92 - 16);
            uint64_t v111 = v106 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v112 = *v110;
              *(v109 - 1) = *(v110 - 1);
              _OWORD *v109 = v112;
              v109 -= 2;
              v110 -= 2;
              v111 -= 8;
            }
            while (v111);
            unint64_t v92 = v108;
            if (v106 != (v106 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_493:
              do
              {
LABEL_124:
                int v113 = *((_DWORD *)v92 - 1);
                v92 -= 4;
                *((_DWORD *)v103 - 1) = v113;
                v103 -= 4;
              }
              while (v92 != v93);
            }
          }
          *(v69 - 3) = v103;
          *(v69 - 2) = &v105[4 * v95];
          *(v69 - 1) = &v105[4 * v102];
          if (v93) {
            operator delete(v93);
          }
        }
      }
      v24 += 17;
      if (v24 != v246) {
        continue;
      }
      break;
    }
    unint64_t v24 = (double *)v313;
    if (v313) {
      goto LABEL_33;
    }
LABEL_128:
    if (v295 != v296) {
      goto LABEL_129;
    }
LABEL_213:
    uint64_t v114 = v298;
    if (v298) {
      goto LABEL_247;
    }
LABEL_214:
    uint64_t v148 = v297;
    v297 = 0;
    if (v148) {
      operator delete(v148);
    }
    if (v295)
    {
      v296 = v295;
      operator delete(v295);
    }
    if (*((void *)&v293 + 1))
    {
      *(void *)&long long v294 = *((void *)&v293 + 1);
      operator delete(*((void **)&v293 + 1));
    }
    if ((void)v292)
    {
      *((void *)&v292 + 1) = v292;
      operator delete((void *)v292);
    }
    sub_1116458(v255);
    if (v241 == v240) {
      goto LABEL_409;
    }
    v242 += 24;
    if (v242 != v237) {
      continue;
    }
    break;
  }
  if ((v247 & 1) == 0)
  {
    char v155 = v244;
    v255[0] = operator new(0x19uLL);
    *(_OWORD *)&v255[1] = xmmword_20B9250;
    strcpy((char *)v255[0], "PathCodec.UnknownGeoIds");
    std::string v170 = *(uint64_t **)(v239 + 32);
    uint64_t v171 = *v170;
    if (*v170)
    {
      sub_443118((uint64_t)__p, *v170);
    }
    else
    {
      long long v314 = 0uLL;
      v313 = 0;
      v295 = 0;
      long long v293 = 0u;
      long long v294 = 0u;
      long long v291 = 0u;
      long long v292 = 0u;
      HIBYTE(v312) = 0;
      LOBYTE(v311) = 0;
      uint64_t v261 = 0;
      v262 = 0;
      uint64_t v259 = 0;
      v260 = 0;
      sub_29DC44((uint64_t)__p, (long long **)&v313, &v291, (long long *)&v311, &v261, 0, (uint64_t)&v259, 1);
    }
    sub_710A8(1, (uint64_t)v255, (uint64_t)__p);
    sub_29E11C((uint64_t)__p);
    if (v171)
    {
      if ((SHIBYTE(v255[2]) & 0x80000000) == 0) {
        goto LABEL_342;
      }
      goto LABEL_483;
    }
    v216 = v260;
    if (v260 && !atomic_fetch_add(&v260->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
    v217 = v262;
    if (v262 && !atomic_fetch_add(&v262->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
    if (SHIBYTE(v312) < 0)
    {
      operator delete(v311);
      if ((SHIBYTE(v295) & 0x80000000) == 0)
      {
LABEL_432:
        if ((SHIBYTE(v293) & 0x80000000) == 0) {
          goto LABEL_433;
        }
        goto LABEL_471;
      }
    }
    else if ((SHIBYTE(v295) & 0x80000000) == 0)
    {
      goto LABEL_432;
    }
    operator delete((void *)v294);
    if ((SHIBYTE(v293) & 0x80000000) == 0)
    {
LABEL_433:
      if ((SBYTE7(v292) & 0x80000000) == 0) {
        goto LABEL_434;
      }
      goto LABEL_472;
    }
LABEL_471:
    operator delete(*((void **)&v292 + 1));
    if ((SBYTE7(v292) & 0x80000000) == 0)
    {
LABEL_434:
      v218 = (void **)v313;
      if (!v313)
      {
LABEL_482:
        char v155 = v244;
        if ((SHIBYTE(v255[2]) & 0x80000000) == 0)
        {
LABEL_342:
          if ((v248 & 1) == 0) {
            goto LABEL_375;
          }
          goto LABEL_343;
        }
LABEL_483:
        operator delete(v255[0]);
        if (v248) {
          goto LABEL_343;
        }
LABEL_375:
        if (v155) {
          goto LABEL_378;
        }
        goto LABEL_396;
      }
      goto LABEL_473;
    }
LABEL_472:
    operator delete((void *)v291);
    v218 = (void **)v313;
    if (!v313) {
      goto LABEL_482;
    }
LABEL_473:
    v223 = (void **)v314;
    v224 = v218;
    if ((void **)v314 == v218)
    {
LABEL_481:
      *(void *)&long long v314 = v218;
      operator delete(v224);
      goto LABEL_482;
    }
    while (1)
    {
      if (*((char *)v223 - 1) < 0)
      {
        operator delete(*(v223 - 3));
        if ((*((char *)v223 - 25) & 0x80000000) == 0) {
          goto LABEL_476;
        }
LABEL_479:
        operator delete(*(v223 - 6));
        v223 -= 6;
        if (v223 == v218)
        {
LABEL_480:
          v224 = v313;
          goto LABEL_481;
        }
      }
      else
      {
        if (*((char *)v223 - 25) < 0) {
          goto LABEL_479;
        }
LABEL_476:
        v223 -= 6;
        if (v223 == v218) {
          goto LABEL_480;
        }
      }
    }
  }
  char v155 = v244;
  if ((v248 & 1) == 0) {
    goto LABEL_375;
  }
LABEL_343:
  v309 = operator new(0x20uLL);
  long long v310 = xmmword_20B5EB0;
  strcpy((char *)v309, "PathCodec.AllUnknownGeoIds");
  long long v179 = *(uint64_t **)(v239 + 32);
  uint64_t v180 = *v179;
  if (*v179)
  {
    sub_443118((uint64_t)__p, *v179);
  }
  else
  {
    long long v303 = 0uLL;
    uint64_t v304 = 0;
    uint64_t v258 = 0;
    long long v256 = 0u;
    *(_OWORD *)v257 = 0u;
    memset(v255, 0, sizeof(v255));
    char v254 = 0;
    LOBYTE(v253) = 0;
    uint64_t v251 = 0;
    v252 = 0;
    uint64_t v249 = 0;
    v250 = 0;
    sub_29DC44((uint64_t)__p, (long long **)&v303, (long long *)v255, &v253, &v251, 0, (uint64_t)&v249, 1);
  }
  sub_710A8(1, (uint64_t)&v309, (uint64_t)__p);
  sub_29E11C((uint64_t)__p);
  if (v180)
  {
    if (SHIBYTE(v310) < 0) {
      goto LABEL_377;
    }
    goto LABEL_375;
  }
  char v181 = v155;
  uint64_t v182 = v250;
  if (v250 && !atomic_fetch_add(&v250->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
    std::__shared_weak_count::__release_weak(v182);
  }
  uint64_t v183 = v252;
  if (v252 && !atomic_fetch_add(&v252->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
    std::__shared_weak_count::__release_weak(v183);
  }
  if (v254 < 0)
  {
    operator delete((void *)v253);
    if (SHIBYTE(v258) < 0) {
      goto LABEL_371;
    }
LABEL_357:
    if ((SHIBYTE(v256) & 0x80000000) == 0) {
      goto LABEL_358;
    }
LABEL_372:
    operator delete(v255[3]);
    if (SHIBYTE(v255[2]) < 0) {
      goto LABEL_373;
    }
LABEL_359:
    int v184 = (void **)v303;
    if (!(void)v303)
    {
LABEL_374:
      char v155 = v181;
      if (SHIBYTE(v310) < 0) {
        goto LABEL_377;
      }
      goto LABEL_375;
    }
  }
  else
  {
    if ((SHIBYTE(v258) & 0x80000000) == 0) {
      goto LABEL_357;
    }
LABEL_371:
    operator delete(v257[0]);
    if (SHIBYTE(v256) < 0) {
      goto LABEL_372;
    }
LABEL_358:
    if ((SHIBYTE(v255[2]) & 0x80000000) == 0) {
      goto LABEL_359;
    }
LABEL_373:
    operator delete(v255[0]);
    int v184 = (void **)v303;
    if (!(void)v303) {
      goto LABEL_374;
    }
  }
  uint64_t v185 = (void **)*((void *)&v303 + 1);
  if (*((void ***)&v303 + 1) == v184)
  {
    *((void *)&v303 + 1) = v184;
    operator delete(v184);
    char v155 = v181;
    if (SHIBYTE(v310) < 0) {
      goto LABEL_377;
    }
    goto LABEL_375;
  }
  while (2)
  {
    while (2)
    {
      if (*((char *)v185 - 1) < 0)
      {
        operator delete(*(v185 - 3));
        if (*((char *)v185 - 25) < 0) {
          break;
        }
        goto LABEL_364;
      }
      if ((*((char *)v185 - 25) & 0x80000000) == 0)
      {
LABEL_364:
        v185 -= 6;
        if (v185 == v184) {
          goto LABEL_368;
        }
        continue;
      }
      break;
    }
    operator delete(*(v185 - 6));
    v185 -= 6;
    if (v185 != v184) {
      continue;
    }
    break;
  }
LABEL_368:
  *((void *)&v303 + 1) = v184;
  operator delete((void *)v303);
  char v155 = v181;
  if ((SHIBYTE(v310) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_377:
  operator delete(v309);
  if (v155)
  {
LABEL_378:
    uint64_t v186 = sub_69510();
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)__p);
      uint64_t v187 = sub_188FC78(__p, (uint64_t)"Got a path-codec encoded path containing Geometry points. They are not required for decoding. OS version: ", 106);
      uint64_t v188 = sub_69134((uint64_t)v186);
      int v189 = *(char *)(v188 + 23);
      if (v189 >= 0) {
        uint64_t v190 = v188;
      }
      else {
        uint64_t v190 = *(void *)v188;
      }
      if (v189 >= 0) {
        uint64_t v191 = *(unsigned __int8 *)(v188 + 23);
      }
      else {
        uint64_t v191 = *(void *)(v188 + 8);
      }
      uint64_t v192 = sub_188FC78(v187, v190, v191);
      int v193 = sub_188FC78(v192, (uint64_t)", Request: ", 11);
      uint64_t v194 = sub_68EE4((uint64_t)v186);
      int v195 = *(char *)(v194 + 23);
      if (v195 >= 0) {
        uint64_t v196 = v194;
      }
      else {
        uint64_t v196 = *(void *)v194;
      }
      if (v195 >= 0) {
        uint64_t v197 = *(unsigned __int8 *)(v194 + 23);
      }
      else {
        uint64_t v197 = *(void *)(v194 + 8);
      }
      sub_188FC78(v193, v196, v197);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v309, 1u);
      if (SHIBYTE(v310) < 0) {
        operator delete(v309);
      }
      if (v325 < 0) {
        operator delete(v324);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
LABEL_396:
  sub_EA77C0((uint64_t)__p, (uint64_t)&v326);
  uint64_t v198 = v360;
  if ((void)v360)
  {
    uint64_t v199 = *((void *)&v360 + 1);
    char v200 = (void *)v360;
    if (*((void *)&v360 + 1) != (void)v360)
    {
      do
        uint64_t v199 = sub_405F44(v199 - 472);
      while (v199 != v198);
      char v200 = (void *)v360;
    }
    *((void *)&v360 + 1) = v198;
    operator delete(v200);
  }
  long long v360 = *(_OWORD *)__p;
  v361 = v316;
  v316 = 0;
  __p[1] = 0;
  __p[0] = 0;
  if (SHIBYTE(v363) < 0)
  {
    operator delete((void *)v362);
    long long v362 = v317;
    v201 = __p[0];
    uint64_t v363 = v318;
    HIBYTE(v318) = 0;
    LOBYTE(v317) = 0;
    if (__p[0])
    {
      char v202 = __p[1];
      v203 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          char v202 = (void *)sub_405F44((uint64_t)v202 - 472);
        while (v202 != v201);
        v203 = __p[0];
      }
      __p[1] = v201;
      operator delete(v203);
    }
  }
  else
  {
    long long v362 = v317;
    uint64_t v363 = v318;
  }
  sub_43C634(v239, (uint64_t *)&v360, a3, a4, a5, a8);
LABEL_409:
  char v204 = (char *)v326;
  if (v326)
  {
LABEL_410:
    unint64_t v205 = v327;
    unint64_t v206 = v204;
    if (v327 != v204)
    {
      do
        unint64_t v205 = (char *)sub_405F44((uint64_t)(v205 - 472));
      while (v205 != v204);
      unint64_t v206 = v326;
    }
    v327 = v204;
    operator delete(v206);
  }
LABEL_414:
  sub_40F434((uint64_t)&v329);
  v343[0] = off_2439728;
  v207 = &v345;
  do
  {
    v208 = v207 - 6;
    uint64_t v209 = *(v207 - 3);
    if (v209)
    {
      uint64_t v210 = 0;
      uint64_t v211 = 0;
      v212 = v207 - 5;
      do
      {
        if ((*(char *)(*v208 + v211) & 0x80000000) == 0)
        {
          uint64_t v213 = *v212 + v210;
          v214 = *(void **)(v213 + 8);
          if (v214)
          {
            *(void *)(v213 + 16) = v214;
            operator delete(v214);
            uint64_t v209 = *(v207 - 3);
          }
        }
        ++v211;
        v210 += 32;
      }
      while (v211 != v209);
      operator delete((void *)*(v207 - 6));
      *(v207 - 6) = (uint64_t)&unk_20E1710;
      *(v207 - 1) = 0;
      *(v207 - 4) = 0;
      *(v207 - 3) = 0;
      uint64_t *v212 = 0;
    }
    v207 -= 6;
  }
  while (v208 != &v344);
  return sub_443A30((uint64_t)&v360);
}

void sub_43B880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  sub_14A84((uint64_t)&a61);
  sub_14A84((uint64_t)&a63);
  if (SLOBYTE(STACK[0x3F7]) < 0) {
    operator delete((void *)STACK[0x3E0]);
  }
  sub_29D7B0((uint64_t)&STACK[0x2E0]);
  sub_1A6DC((void **)&STACK[0x3F8]);
  if (a54 < 0) {
    operator delete(a49);
  }
  sub_4323C0((void **)&STACK[0x518]);
  sub_40F434((uint64_t)&STACK[0x530]);
  sub_424090(&STACK[0x628]);
  sub_443A30(v63 - 240);
  _Unwind_Resume(a1);
}

uint64_t sub_43BD74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  unint64_t v4 = (void *)a1;
  uint64_t v5 = a4;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
  {
    unint64_t v7 = *(void *)(a1 + 64);
    uint64_t v6 = *(void *)(a1 + 72);
    if (v7 == v6) {
      goto LABEL_13;
    }
    if (*(void *)v7)
    {
      BOOL v8 = 0;
    }
    else
    {
      double v10 = *(double *)(v7 + 8);
      BOOL v8 = v10 == *(double *)a1;
      if (vabdd_f64(v10, *(double *)a1) < 2.22044605e-16) {
        BOOL v8 = 1;
      }
    }
    v7 += 48 * v8;
    if (*(void *)(v6 - 48) != ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3) - 1)
    {
LABEL_13:
      LODWORD(v14) = 0;
    }
    else
    {
      double v11 = *(double *)(v6 - 40);
      double v12 = *(double *)(a1 + 8);
      uint64_t v13 = vabdd_f64(v11, v12) < 2.22044605e-16 || v11 == v12;
      uint64_t v14 = v13 << 63 >> 63;
    }
    uint64_t result = sub_447954(v5);
    v5[1] = result;
    *(void *)(result - 136) = *v4;
    uint64_t v15 = v4[2];
    if (v4[3] != v15)
    {
      unint64_t v16 = 0;
      unint64_t v17 = v6 + 48 * (int)v14;
      long long v42 = v4;
      while (1)
      {
        uint64_t v18 = v5[1];
        char v20 = *(void **)(v18 - 112);
        unint64_t v19 = *(void *)(v18 - 104);
        if ((unint64_t)v20 < v19)
        {
          *char v20 = *(void *)(v15 + 8 * v16);
          *(void *)(v18 - 112) = v20 + 1;
          if (v7 < v17) {
            goto LABEL_38;
          }
          goto LABEL_17;
        }
        char v21 = *(void **)(v18 - 120);
        uint64_t v22 = v20 - v21;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61) {
          sub_2E00();
        }
        unint64_t v24 = v7;
        unint64_t v25 = v17;
        uint64_t v26 = v19 - (void)v21;
        if (v26 >> 2 > v23) {
          unint64_t v23 = v26 >> 2;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v23;
        }
        if (v27)
        {
          if (v27 >> 61) {
            sub_188D718();
          }
          uint64_t v28 = (char *)operator new(8 * v27);
          uint64_t v29 = (uint64_t)&v28[8 * v22];
          *(void *)uint64_t v29 = *(void *)(v15 + 8 * v16);
          uint64_t v30 = v29 + 8;
          if (v20 == v21)
          {
LABEL_35:
            *(void *)(v18 - 120) = v29;
            *(void *)(v18 - 112) = v30;
            *(void *)(v18 - 104) = &v28[8 * v27];
            uint64_t v5 = a4;
            if (!v20) {
              goto LABEL_37;
            }
LABEL_36:
            operator delete(v20);
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v28 = 0;
          uint64_t v29 = 8 * v22;
          *(void *)(8 * v22) = *(void *)(v15 + 8 * v16);
          uint64_t v30 = 8 * v22 + 8;
          if (v20 == v21) {
            goto LABEL_35;
          }
        }
        do
        {
          int v31 = *((_DWORD *)v20-- - 2);
          int v32 = *(_DWORD *)((char *)v20 + 3);
          *(_DWORD *)(v29 - 8) = v31;
          v29 -= 8;
          *(_DWORD *)(v29 + 3) = v32;
        }
        while (v20 != v21);
        char v20 = *(void **)(v18 - 120);
        *(void *)(v18 - 120) = v29;
        *(void *)(v18 - 112) = v30;
        *(void *)(v18 - 104) = &v28[8 * v27];
        uint64_t v5 = a4;
        if (v20) {
          goto LABEL_36;
        }
LABEL_37:
        unint64_t v17 = v25;
        unint64_t v7 = v24;
        unint64_t v4 = v42;
        *(void *)(v18 - 112) = v30;
        if (v7 < v17)
        {
LABEL_38:
          if (*(void *)v7 == v16)
          {
            double v33 = *(double *)(v7 + 8);
            unint64_t v34 = v5[1];
            unint64_t v35 = v5[2];
            *(double *)(v34 - 128) = v33;
            if (v34 >= v35)
            {
              uint64_t v36 = sub_447954(v5);
            }
            else
            {
              *(void *)(v34 + 128) = 0;
              *(_OWORD *)(v34 + 96) = 0u;
              *(_OWORD *)(v34 + 112) = 0u;
              *(_OWORD *)(v34 + 64) = 0u;
              *(_OWORD *)(v34 + 80) = 0u;
              *(_OWORD *)(v34 + 32) = 0u;
              *(_OWORD *)(v34 + 48) = 0u;
              *(_OWORD *)unint64_t v34 = 0u;
              *(_OWORD *)(v34 + 16) = 0u;
              uint64_t v36 = v34 + 136;
              *(_DWORD *)(v34 + 120) = 1065353216;
            }
            v7 += 48;
            v5[1] = v36;
            unint64_t v37 = v16 + 1;
            uint64_t v38 = v4[2];
            if (v16 + 1 >= (v4[3] - v38) >> 3
              || (unint64_t v39 = sub_42DC30(a2, (void *)(v38 + 8 * v16)), *(_DWORD *)(v38 + 8 * v37) != v39)
              || (uint64_t v40 = v38 + 8 * v37, *(unsigned __int16 *)(v40 + 4) != WORD2(v39))
              || (HIWORD(v39) & 1) == (*(unsigned char *)(v40 + 6) == 0)
              || v7 < v17 && *(void *)v7 == v16)
            {
              *(double *)(v5[1] - 136) = v33;
              --v16;
            }
            else
            {
              *(double *)(v5[1] - 136) = 1.0 - v33;
            }
          }
        }
LABEL_17:
        ++v16;
        uint64_t v15 = v4[2];
        if (v16 >= (v4[3] - v15) >> 3)
        {
          uint64_t result = v5[1];
          break;
        }
      }
    }
    *(void *)(result - 128) = v4[1];
  }
  else
  {
    uint64_t result = sub_446EF4(a4, (long long *)a1);
    v5[1] = result;
  }
  return result;
}

void sub_43C0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_43C10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_43C120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_43C134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_43C148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_43C15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_43C170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(uint64_t **)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24) - (void)v4;
  if (v5 == 8)
  {
    uint64_t v6 = *v4;
    uint64_t v7 = *v4 & 0xFF000000000000;
    uint64_t v8 = ((unint64_t)*v4 >> 16) & 0xFFFF0000 | (*v4 << 32) | (2 * (v7 == 0));
    unint64_t v9 = HIDWORD(*v4);
    uint64_t v10 = sub_2D5D58(a2, *v4 & 0xFFFFFFFFFFFFLL);
    if (*(unsigned char *)(a2 + 7772))
    {
      double v11 = sub_2DB8E0(a2 + 3896, v6, 0);
      double v12 = &v11[-*(int *)v11];
      if (*(unsigned __int16 *)v12 < 5u)
      {
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v13 = *((unsigned __int16 *)v12 + 2);
        if (v13) {
          v13 += (uint64_t)&v11[*(unsigned int *)&v11[v13]];
        }
      }
      uint64_t v48 = v13 + 4 * (unsigned __int16)v9 + 4 + *(unsigned int *)(v13 + 4 * (unsigned __int16)v9 + 4);
    }
    else
    {
      uint64_t v48 = 0;
    }
    *(void *)&long long v55 = v10;
    *((void *)&v55 + 1) = v48;
    *(void *)&long long v56 = sub_2E5C38(a2, v6 & 0xFFFFFFFFFFFFLL, 1);
    *((void *)&v56 + 1) = v49;
    LODWORD(v57) = v6;
    WORD2(v57) = v9;
    BYTE6(v57) = v7 != 0;
    sub_EAFC44(a3, v8, &v55);
    return;
  }
  uint64_t v14 = v5 >> 3;
  long long v70 = 0;
  long long v71 = 0;
  uint64_t v72 = 0;
  if ((unint64_t)(v5 >> 3) <= 1) {
    uint64_t v14 = 1;
  }
  if ((unint64_t)v5 >= 0x10)
  {
    uint64_t v15 = 0;
    long long v53 = (unsigned char *)(a2 + 7772);
    uint64_t v52 = a2 + 3896;
    uint64_t v50 = v14 - 1;
    while (1)
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 16) + 8 * v15);
      uint64_t v17 = sub_2D5D58(a2, v16 & 0xFFFFFFFFFFFFLL);
      if (*v53)
      {
        uint64_t v18 = sub_2DB8E0(v52, v16, 0);
        unint64_t v19 = &v18[-*(int *)v18];
        if (*(unsigned __int16 *)v19 < 5u)
        {
          uint64_t v20 = 0;
        }
        else
        {
          uint64_t v20 = *((unsigned __int16 *)v19 + 2);
          if (v20) {
            v20 += (uint64_t)&v18[*(unsigned int *)&v18[v20]];
          }
        }
        uint64_t v21 = v20 + 4 * WORD2(v16) + 4 + *(unsigned int *)(v20 + 4 * WORD2(v16) + 4);
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t v22 = sub_2E5C38(a2, v16 & 0xFFFFFFFFFFFFLL, 1);
      *(void *)&long long v67 = v17;
      *((void *)&v67 + 1) = v21;
      *(void *)&long long v68 = v22;
      *((void *)&v68 + 1) = v23;
      LODWORD(v69) = v16;
      WORD2(v69) = WORD2(v16);
      BYTE6(v69) = (v16 & 0xFF000000000000) != 0;
      uint64_t v24 = *(void *)(*(void *)(a1 + 16) + 8 * v15 + 8);
      unint64_t v25 = (int *)sub_2D5D58(a2, v24 & 0xFFFFFFFFFFFFLL);
      if (*v53)
      {
        uint64_t v26 = sub_2DB8E0(v52, v24, 0);
        unint64_t v27 = &v26[-*(int *)v26];
        if (*(unsigned __int16 *)v27 < 5u)
        {
          uint64_t v28 = 0;
        }
        else
        {
          uint64_t v28 = *((unsigned __int16 *)v27 + 2);
          if (v28) {
            v28 += (uint64_t)&v26[*(unsigned int *)&v26[v28]];
          }
        }
        uint64_t v29 = v28 + 4 * WORD2(v24) + 4 + *(unsigned int *)(v28 + 4 * WORD2(v24) + 4);
      }
      else
      {
        uint64_t v29 = 0;
      }
      uint64_t v30 = sub_2E5C38(a2, v24 & 0xFFFFFFFFFFFFLL, 1);
      uint64_t v32 = v31;
      uint64_t v33 = v24 & 0xFF000000000000;
      unint64_t v34 = (unsigned int *)sub_2E4738((int **)&v67);
      sub_2E45D4(a2, v34, (uint64_t)&v70, 0, 0, 0);
      unint64_t v35 = (unsigned __int16 *)(v67 - *(int *)v67);
      unsigned int v36 = *v35;
      if (BYTE6(v69))
      {
        if (v36 < 0xB) {
          goto LABEL_44;
        }
        uint64_t v37 = v35[5];
        if (!v37) {
          goto LABEL_44;
        }
        int v38 = *(_DWORD *)(v67 + v37);
        if ((v38 & 2) == 0 && (v38 & 1) == 0) {
          goto LABEL_44;
        }
      }
      else if (v36 < 0xB || (v39 = v35[5]) == 0 || (int v38 = *(_DWORD *)(v67 + v39), (v38 & 1) == 0) && (v38 & 2) == 0)
      {
LABEL_44:
        BOOL v40 = 1;
        long long v41 = (unsigned __int16 *)((char *)v25 - *v25);
        BOOL v42 = *v41 >= 0xBu;
        if (v33) {
          goto LABEL_45;
        }
        goto LABEL_38;
      }
      BOOL v40 = (v38 & 0x40000) != 0 || (v38 & 0xA0000) != 0;
      long long v41 = (unsigned __int16 *)((char *)v25 - *v25);
      BOOL v42 = *v41 >= 0xBu;
      if (v33)
      {
LABEL_45:
        if (!v42) {
          goto LABEL_52;
        }
        uint64_t v45 = v41[5];
        if (!v45) {
          goto LABEL_52;
        }
        int v44 = *(int *)((char *)v25 + v45);
        if ((v44 & 2) == 0 && (v44 & 1) == 0) {
          goto LABEL_52;
        }
        goto LABEL_50;
      }
LABEL_38:
      if (!v42 || (v43 = v41[5]) == 0 || (int v44 = *(int *)((char *)v25 + v43), (v44 & 1) == 0) && (v44 & 2) == 0)
      {
LABEL_52:
        BOOL v46 = 1;
        goto LABEL_53;
      }
LABEL_50:
      if ((v44 & 0x40000) != 0) {
        goto LABEL_52;
      }
      BOOL v46 = (v44 & 0xA0000) != 0;
LABEL_53:
      long long v55 = v67;
      long long v56 = v68;
      uint64_t v57 = v69;
      uint64_t v58 = v25;
      uint64_t v59 = v29;
      uint64_t v60 = v30;
      uint64_t v61 = v32;
      int v62 = v24;
      __int16 v63 = WORD2(v24);
      BOOL v64 = (v24 & 0xFF000000000000) != 0;
      uint64_t v65 = 0x28000000000;
      if (v46) {
        char v47 = 2;
      }
      else {
        char v47 = 0;
      }
      char v66 = v47 | v40 | (4 * (v71 - v70 == 80)) | v66 & 0xE0;
      sub_EAFD8C(a3, (int **)&v55);
      if (v50 == ++v15)
      {
        if (v70)
        {
          long long v71 = v70;
          operator delete(v70);
        }
        return;
      }
    }
  }
}

void sub_43C610(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(void *)(v1 - 120) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_43C634@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  if (!a5 || sub_43D304(a1, a4, a2) || sub_43739C(a1, a3, (uint64_t)a2))
  {
    if (sub_DAA288(a3) && !sub_EA80FC((char **)a2))
    {
      uint64_t v10 = sub_EA841C(a2);
      long long v12 = *(_OWORD *)(v10 + 32);
      long long v11 = *(_OWORD *)(v10 + 48);
      uint64_t v13 = *(void *)(v10 + 64);
      long long v17 = *(_OWORD *)(v10 + 16);
      long long v16 = *(_OWORD *)v10;
      uint64_t v20 = v13;
      long long v18 = v12;
      long long v19 = v11;
      *(double *)&long long v17 = *(double *)(a3 + 56) * 3.6;
      uint64_t v14 = sub_40EFE8((uint64_t)a2);
      sub_EAD920(v14, (uint64_t)&v16);
    }
    sub_437A5C(a1, a3, (uint64_t)a2);
    sub_444AF0((void *)a6, (uint64_t)a2);
  }
  else
  {
    sub_47E0E4((_OWORD *)a6);
    *(unsigned char *)(a6 + 120) = 0;
    double result = 0.0;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
  }
  return result;
}

void sub_43C748(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_43C814(a2, (uint64_t)&__p);
  sub_439014(a1, (uint64_t *)&__p, a3, 0x7FFFFFFFFFFFFFFFLL, 1, 1, 0, a4);
  uint64_t v7 = (void **)__p;
  if (__p)
  {
    uint64_t v8 = v11;
    unint64_t v9 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = __p;
    }
    long long v11 = v7;
    operator delete(v9);
  }
}

void sub_43C800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_43C814(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    uint64_t v5 = 0;
    do
    {
      sub_448E80(v2, &__p);
      uint64_t v6 = sub_8B3D0((void ***)a2, v5, &__p);
      if (v8 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      uint64_t v5 = v6 + 24;
      v2 += 144;
    }
    while (v2 != v3);
  }
}

void sub_43C8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1A668(v14);
    _Unwind_Resume(a1);
  }
  sub_1A668(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_43C8E0(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "max_user_distance_from_path_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 16) = 1;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "decode_name_scoring_factor");
  unint64_t v4 = sub_58070(a2, (uint64_t)__p);
  uint64_t v5 = (void *)a1;
  if (v4)
  {
    uint64_t v5 = v4 + 5;
    if (*((_DWORD *)v4 + 12) != 1) {
      uint64_t v5 = (void *)a1;
    }
  }
  *(void *)a1 = *v5;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "split_anchor_paths");
  uint64_t v6 = sub_58070(a2, (uint64_t)__p);
  if (v6)
  {
    int v7 = *((_DWORD *)v6 + 12);
    if ((v7 & 0xFFFFFFFE) == 4)
    {
      *(unsigned char *)(a1 + 16) = v7 == 4;
      if (SHIBYTE(__p[2]) < 0) {
        goto LABEL_14;
      }
      return a1;
    }
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 16) != 0;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    return a1;
  }
LABEL_14:
  operator delete(__p[0]);
  return a1;
}

void sub_43CA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_43CA90(uint64_t a1)
{
  *(_OWORD *)char v8 = 0u;
  *(_OWORD *)unint64_t v9 = 0u;
  int v10 = 1065353216;
  sub_46B058();
  uint64_t v3 = v2;
  unint64_t v5 = v4;
  sub_EAFC0C();
  sub_43CC7C(v3, v5, v6, v7, (uint64_t)v8);
  sub_43CE1C(a1);
}

void sub_43CC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  long long v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
  }
  sub_436498((uint64_t)&a15);
  sub_12168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_43CC7C(void *a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v11 = sub_EB04C4(a1);
        unint64_t v12 = sub_EB04C4(a3);
        if (a2 >= v11 || a4 >= v12)
        {
          if (a2 < v11 == a4 < v12) {
            return a5;
          }
        }
        else
        {
          uint64_t v13 = sub_EB0624(a1, a2);
          if (v13 == sub_EB0624(a3, a4)) {
            return a5;
          }
        }
        uint64_t v10 = sub_EB0624(a1, a2);
        unint64_t v17 = *(unsigned int *)(v10 + 32) | ((unint64_t)*(unsigned __int16 *)(v10 + 36) << 32);
        sub_448348(a5, &v17, &v17);
        ++a2;
      }
    }
    while (a2 < sub_EB04C4(a1))
    {
      uint64_t v14 = sub_EB0624(a1, a2);
      unint64_t v17 = *(unsigned int *)(v14 + 32) | ((unint64_t)*(unsigned __int16 *)(v14 + 36) << 32);
      sub_448348(a5, &v17, &v17);
      ++a2;
    }
  }
  else if (a3 && a4 < sub_EB04C4(a3))
  {
    do
    {
      uint64_t v15 = sub_EB0624(0, a2);
      unint64_t v17 = *(unsigned int *)(v15 + 32) | ((unint64_t)*(unsigned __int16 *)(v15 + 36) << 32);
      sub_448348(a5, &v17, &v17);
      ++a2;
    }
    while (a4 < sub_EB04C4(a3));
  }
  return a5;
}

void sub_43CE1C(uint64_t a1)
{
  sub_10A42F0((uint64_t)v1, *(void **)(a1 + 24), 0, 1, 0);
}

void sub_43CFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_4364F4((void **)va);
  unint64_t v5 = *(void **)(v3 - 104);
  if (v5)
  {
    *(void *)(v3 - 96) = v5;
    operator delete(v5);
  }
  sub_10A4318((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_43D004(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9 = nullsub_1(a5);
  uint64_t v10 = sub_40EFE8(a5);
  uint64_t v11 = sub_40EFE8(a5) + 472 * a2 - v10;
  if (v11)
  {
    uint64_t v12 = v10 + v11;
    uint64_t v13 = *(void *)(v9 + 8);
    if (v10 + v11 != v13)
    {
      uint64_t v14 = 8 * (v11 >> 3);
      do
      {
        sub_448838(v10, (long long *)(v10 + v14));
        v10 += 472;
      }
      while (v10 + v14 != v13);
      uint64_t v12 = *(void *)(v9 + 8);
    }
    while (v12 != v10)
      uint64_t v12 = sub_405F44(v12 - 472);
    *(void *)(v9 + 8) = v10;
  }
  if (a2)
  {
    uint64_t v15 = *(void *)(a5 + 48);
    uint64_t v16 = *(void *)(a5 + 56);
    uint64_t v17 = v15 + 24 * a2;
    if (v17 == v16)
    {
      uint64_t v19 = *(void *)(a5 + 48);
      if (v17 == v15)
      {
LABEL_22:
        *(void *)(a5 + 56) = v19;
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v18 = 24 * a2;
      uint64_t v19 = *(void *)(a5 + 48);
      do
      {
        uint64_t v21 = *(void **)v15;
        if (*(void *)v15)
        {
          *(void *)(v15 + 8) = v21;
          operator delete(v21);
          *(void *)(v15 + 8) = 0;
          *(void *)(v15 + 16) = 0;
        }
        uint64_t v20 = (void *)(v15 + v18);
        *(_OWORD *)uint64_t v15 = *(_OWORD *)(v15 + 24 * a2);
        *(void *)(v15 + 16) = *(void *)(v15 + v18 + 16);
        *uint64_t v20 = 0;
        v20[1] = 0;
        v20[2] = 0;
        v15 += 24;
        v19 += 24;
      }
      while (v15 + v18 != v16);
      uint64_t v17 = *(void *)(a5 + 56);
      if (v17 == v19) {
        goto LABEL_22;
      }
    }
    uint64_t v22 = v17;
    do
    {
      uint64_t v24 = *(void **)(v22 - 24);
      v22 -= 24;
      uint64_t v23 = v24;
      if (v24)
      {
        *(void *)(v17 - 16) = v23;
        operator delete(v23);
      }
      uint64_t v17 = v22;
    }
    while (v22 != v19);
    goto LABEL_22;
  }
LABEL_23:
  unint64_t v25 = *(void **)nullsub_1(a5);
  uint64_t v26 = *(void ***)(a5 + 48);
  if (a3 + 1 == sub_EB04C4(v25))
  {
    unint64_t v27 = sub_EAFF14((uint64_t)v25);
    uint64_t v28 = (long long *)sub_EAFF60((uint64_t)v25);
    sub_EAFC44((uint64_t)v25, v27, v28);
    if (!a3) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v29 = (int **)sub_3C80F8((uint64_t)v25);
    uint64_t v30 = sub_3C80F8((uint64_t)v25);
    sub_EB1504((uint64_t)v25, v29, (int **)(v30 + 96 * a3), 1);
    if (!a3) {
      goto LABEL_30;
    }
  }
  uint64_t v32 = (char *)*v26;
  uint64_t v31 = (char *)v26[1];
  uint64_t v33 = (char *)*v26 + 4 * a3;
  int64_t v34 = v31 - v33;
  if (v31 != v33) {
    memmove(*v26, v33, v31 - v33);
  }
  v26[1] = &v32[v34];
LABEL_30:
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  char v44 = 0;
  uint64_t v45 = 0x3FF0000000000000;
  char v46 = 1;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  char v49 = 0;
  int v50 = 36000;
  char v51 = 0;
  unsigned int v41 = a4;
  if (sub_EADC78((uint64_t)v25) && *(_DWORD *)sub_EADAD0((uint64_t)v25) < a4) {
    unsigned int v41 = *(_DWORD *)sub_EADAD0((uint64_t)v25);
  }
  sub_EAD920((uint64_t)v25, (uint64_t)&v41);
  if (*(unsigned char *)(a5 + 120) && a2)
  {
    uint64_t v35 = *(void *)(a5 + 96);
    uint64_t v36 = *(void *)(a5 + 104);
    uint64_t v37 = v35 + 24 * a2;
    if (v37 != v36)
    {
      uint64_t v38 = 0;
      do
      {
        uint64_t v39 = v35 + v38;
        *(unsigned char *)uint64_t v39 = *(unsigned char *)(v37 + v38);
        uint64_t v40 = *(void *)(v37 + v38 + 16);
        *(void *)(v39 + 8) = *(void *)(v37 + v38 + 8);
        *(void *)(v39 + 16) = v40;
        v38 += 24;
      }
      while (v37 + v38 != v36);
      v35 += v38;
    }
    *(void *)(a5 + 104) = v35;
  }
}

BOOL sub_43D304(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  uint64_t v5 = a2;
  unint64_t v7 = (void *)nullsub_1(a3);
  uint64_t v8 = v7[1] - *v7;
  if (!v8)
  {
LABEL_26:
    BOOL result = sub_723EC(3u);
    if (result)
    {
      sub_6BAC((uint64_t)v30);
      sub_188FC78(v30, (uint64_t)"Could not locate the user offset on the path", 44);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v29 < 0) {
        operator delete(__p);
      }
      if (v31 < 0) {
        operator delete((void *)v30[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      return 0;
    }
    return result;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0xCBEEA4E1A08AD8F3 * (v8 >> 3);
  while (1)
  {
    uint64_t v12 = (void *)sub_EA8060(a3, v9);
    if (v5 <= sub_EB15DC((uint64_t)v12)) {
      break;
    }
    uint64_t v11 = v5 - sub_EB15DC((uint64_t)v12);
LABEL_6:
    ++v9;
    uint64_t v5 = v11;
    if (v9 == v10) {
      goto LABEL_26;
    }
  }
  unint64_t v13 = sub_EB04C4(v12);
  if (!v13)
  {
    uint64_t v11 = v5;
    goto LABEL_6;
  }
  unint64_t v14 = v13;
  unint64_t v15 = 0;
  while (1)
  {
    uint64_t v16 = sub_EB0698((uint64_t)v12, v15);
    uint64_t v11 = v5 - v16;
    if (v5 <= v16) {
      break;
    }
    ++v15;
    v5 -= v16;
    if (v14 == v15) {
      goto LABEL_6;
    }
  }
  int v17 = *(_DWORD *)sub_69134((uint64_t)v12);
  if (v15) {
    int v18 = 0;
  }
  else {
    int v18 = v17;
  }
  uint64_t v19 = (void *)sub_EB0624(v12, v15);
  unsigned int v20 = 0;
  uint64_t v21 = (unsigned __int16 *)(*v19 - *(int *)*v19);
  if (*v21 >= 9u)
  {
    uint64_t v22 = v21[4];
    if (v22)
    {
      unsigned int v20 = 0;
      if (v5 != 0x7FFFFFFFFFFFFFFFLL)
      {
        unsigned int v23 = *(_DWORD *)(*v19 + v22);
        if (v23)
        {
          double v24 = (double)v5 / (double)v23;
          double v25 = 1000000000.0;
          if (v24 <= 1.0) {
            double v25 = v24 * 1000000000.0;
          }
          BOOL v26 = v24 < 0.0;
          double v27 = 0.0;
          if (!v26) {
            double v27 = v25;
          }
          unsigned int v20 = vcvtad_u64_f64(v27);
        }
      }
    }
    else
    {
      unsigned int v20 = 0;
    }
  }
  sub_43D004(a1, v9, v15, v20 + v18, (uint64_t)a3);
  return 1;
}

void sub_43D608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_43D654(uint64_t a1, uint64_t a2, char a3)
{
  char v15 = 15;
  uint64_t v13 = 0;
  strcpy((char *)v14, "UserPathDecoder");
  __n128 __p = 0;
  uint64_t v12 = 0;
  uint64_t v6 = sub_374CDC(a2, (uint64_t)v14, (uint64_t *)&__p);
  sub_441260(a1, v6);
  unint64_t v7 = (void **)__p;
  if (__p)
  {
    uint64_t v8 = v12;
    uint64_t v9 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = __p;
    }
    uint64_t v12 = v7;
    operator delete(v9);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = sub_37D0C0(a2);
  *(unsigned char *)(a1 + 40) = a3;
  return a1;
}

void sub_43D748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_43D770@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  if (a6) {
    unint64_t v10 = "RequestWithPathCodecDecoderPath";
  }
  else {
    unint64_t v10 = "RequestWithPathCodecDecoderPath.Sky";
  }
  if (a6) {
    size_t v11 = 31;
  }
  else {
    size_t v11 = 35;
  }
  v316 = (char *)((v11 | 7) - 0x7FFFFFFFFFFFFFFFLL);
  __p[0] = operator new((v11 | 7) + 1);
  __p[1] = (void *)v11;
  memcpy(__p[0], v10, v11);
  *((unsigned char *)__p[0] + v11) = 0;
  uint64_t v239 = a1;
  uint64_t v12 = *(uint64_t **)(a1 + 32);
  uint64_t v13 = *v12;
  if (*v12)
  {
    sub_443118((uint64_t)v343, *v12);
  }
  else
  {
    v358 = 0;
    v357 = 0;
    uint64_t v359 = 0;
    uint64_t v356 = 0;
    long long v355 = 0u;
    long long v354 = 0u;
    long long v353 = 0u;
    long long v352 = 0u;
    char v351 = 0;
    LOBYTE(v350) = 0;
    v349 = 0;
    uint64_t v348 = 0;
    v347 = 0;
    uint64_t v346 = 0;
    sub_29DC44((uint64_t)v343, (long long **)&v357, &v352, &v350, &v348, 0, (uint64_t)&v346, 1);
  }
  sub_710A8(1, (uint64_t)__p, (uint64_t)v343);
  sub_29E11C((uint64_t)v343);
  if (v13)
  {
LABEL_11:
    if (SHIBYTE(v316) < 0) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  unint64_t v152 = v347;
  if (v347 && !atomic_fetch_add(&v347->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
    std::__shared_weak_count::__release_weak(v152);
    int v153 = v349;
    if (!v349)
    {
LABEL_253:
      if ((v351 & 0x80000000) == 0) {
        goto LABEL_254;
      }
      goto LABEL_297;
    }
  }
  else
  {
    int v153 = v349;
    if (!v349) {
      goto LABEL_253;
    }
  }
  if (atomic_fetch_add(&v153->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_253;
  }
  ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
  std::__shared_weak_count::__release_weak(v153);
  if ((v351 & 0x80000000) == 0)
  {
LABEL_254:
    if ((SHIBYTE(v356) & 0x80000000) == 0) {
      goto LABEL_255;
    }
    goto LABEL_298;
  }
LABEL_297:
  operator delete((void *)v350);
  if ((SHIBYTE(v356) & 0x80000000) == 0)
  {
LABEL_255:
    if ((SHIBYTE(v354) & 0x80000000) == 0) {
      goto LABEL_256;
    }
    goto LABEL_299;
  }
LABEL_298:
  operator delete((void *)v355);
  if ((SHIBYTE(v354) & 0x80000000) == 0)
  {
LABEL_256:
    if ((SBYTE7(v353) & 0x80000000) == 0) {
      goto LABEL_257;
    }
    goto LABEL_300;
  }
LABEL_299:
  operator delete(*((void **)&v353 + 1));
  if ((SBYTE7(v353) & 0x80000000) == 0)
  {
LABEL_257:
    int v154 = (void **)v357;
    if (!v357) {
      goto LABEL_11;
    }
    goto LABEL_301;
  }
LABEL_300:
  operator delete((void *)v352);
  int v154 = (void **)v357;
  if (!v357) {
    goto LABEL_11;
  }
LABEL_301:
  long long v172 = v358;
  if (v358 == v154)
  {
    v358 = v154;
    operator delete(v154);
    if (SHIBYTE(v316) < 0) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  do
  {
    while (*((char *)v172 - 1) < 0)
    {
      operator delete(*(v172 - 3));
      if (*((char *)v172 - 25) < 0) {
        goto LABEL_308;
      }
LABEL_305:
      v172 -= 6;
      if (v172 == v154) {
        goto LABEL_309;
      }
    }
    if ((*((char *)v172 - 25) & 0x80000000) == 0) {
      goto LABEL_305;
    }
LABEL_308:
    operator delete(*(v172 - 6));
    v172 -= 6;
  }
  while (v172 != v154);
LABEL_309:
  v358 = v154;
  operator delete(v357);
  if (SHIBYTE(v316) < 0) {
LABEL_12:
  }
    operator delete(__p[0]);
LABEL_13:
  sub_47E0E4(&v360);
  char v369 = 0;
  long long v364 = 0u;
  long long v365 = 0u;
  long long v366 = 0u;
  sub_42EB80((uint64_t)v343, *(void **)(a1 + 24));
  *(void *)&v338[0] = 0x4039000000000000;
  DWORD2(v338[0]) = 5000;
  v338[1] = xmmword_20E7C10;
  v338[2] = xmmword_20E7C20;
  *(void *)&long long v339 = 0;
  DWORD2(v339) = 20000000;
  *(void *)&long long v340 = 0x3FF199999999999ALL;
  *((void *)&v340 + 1) = 0x3E800002710;
  *(_DWORD *)v341 = 10000;
  strcpy(&v341[4], "\n");
  *(_OWORD *)&v341[8] = xmmword_20E7C00;
  *(void *)&v341[24] = 0x3FE6147AE147AE14;
  long long v334 = v340;
  long long v335 = *(_OWORD *)v341;
  long long v336 = *(_OWORD *)&v341[16];
  long long v330 = v338[0];
  long long v331 = xmmword_20E7C10;
  long long v332 = xmmword_20E7C20;
  LOWORD(v342) = 0;
  v329 = v343;
  uint64_t v337 = v342;
  long long v333 = v339;
  sub_410808((uint64_t)&v329, (uint64_t)&off_24F6948, 4);
  uint64_t v245 = sub_3750CC(*(void **)(a1 + 24));
  v327 = 0;
  v326 = 0;
  unint64_t v328 = 0;
  uint64_t v242 = *a2;
  uint64_t v237 = a2[1];
  if (*a2 == v237)
  {
    char v155 = 0;
    goto LABEL_343;
  }
  char v244 = 0;
  unint64_t v14 = "PathCodecDecodingFailure.Sky.TransportModeFlip";
  if (!a7) {
    unint64_t v14 = "PathCodecDecodingFailure.Sky";
  }
  __src = v14;
  uint64_t v15 = 28;
  if (a7) {
    uint64_t v15 = 46;
  }
  size_t v229 = v15;
  uint64_t v16 = v15 | 7;
  size_t __sz = v16 + 1;
  uint64_t v228 = v16 - 0x7FFFFFFFFFFFFFFFLL;
  v235 = (_OWORD *)(a8 + 48);
  char v247 = 1;
  char v248 = 1;
  while (2)
  {
    sub_1115F80(v255, 0, 0);
    if ((sub_1880FAC(v255, v242) & 1) == 0)
    {
      if (a6)
      {
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)__p);
          sub_188FC78(__p, (uint64_t)"Could not parse the path_leg.", 29);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&v291, 3u);
          if (SBYTE7(v292) < 0) {
            operator delete((void *)v291);
          }
          __p[0] = v232;
          *(void **)((char *)__p + *((void *)v232 - 3)) = v233;
          if (v325 < 0) {
            operator delete(v324);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        v313 = operator new(0x20uLL);
        long long v314 = xmmword_20B91C0;
        strcpy((char *)v313, "PathCodecDecodingFailure");
        unsigned int v156 = *(uint64_t **)(v239 + 32);
        uint64_t v157 = *v156;
        if (*v156)
        {
          sub_443118((uint64_t)__p, *v156);
        }
        else
        {
          long long v312 = 0uLL;
          v311 = 0;
          v295 = 0;
          long long v293 = 0u;
          long long v294 = 0u;
          long long v291 = 0u;
          long long v292 = 0u;
          HIBYTE(v310) = 0;
          LOBYTE(v309) = 0;
          v308 = 0;
          uint64_t v307 = 0;
          v306 = 0;
          uint64_t v305 = 0;
          sub_29DC44((uint64_t)__p, (long long **)&v311, &v291, (long long *)&v309, &v307, 0, (uint64_t)&v305, 1);
        }
        sub_710A8(1, (uint64_t)&v313, (uint64_t)__p);
        sub_29E11C((uint64_t)__p);
        if (v157)
        {
LABEL_465:
          if (SHIBYTE(v314) < 0) {
            operator delete(v313);
          }
          sub_47E0E4((_OWORD *)a8);
          *(unsigned char *)(a8 + 120) = 0;
          _OWORD *v235 = 0u;
          *(_OWORD *)(a8 + 64) = 0u;
          *(_OWORD *)(a8 + 80) = 0u;
          sub_1116458(v255);
          char v204 = v326;
          if (v326) {
            goto LABEL_410;
          }
          goto LABEL_414;
        }
        uint64_t v173 = v306;
        if (v306 && !atomic_fetch_add(&v306->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
          std::__shared_weak_count::__release_weak(v173);
        }
        long long v174 = v308;
        if (v308 && !atomic_fetch_add(&v308->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
        }
        if (SHIBYTE(v310) < 0)
        {
          operator delete(v309);
          if ((SHIBYTE(v295) & 0x80000000) == 0)
          {
LABEL_321:
            if ((SHIBYTE(v293) & 0x80000000) == 0) {
              goto LABEL_322;
            }
            goto LABEL_438;
          }
        }
        else if ((SHIBYTE(v295) & 0x80000000) == 0)
        {
          goto LABEL_321;
        }
        operator delete((void *)v294);
        if ((SHIBYTE(v293) & 0x80000000) == 0)
        {
LABEL_322:
          if ((SBYTE7(v292) & 0x80000000) == 0) {
            goto LABEL_323;
          }
          goto LABEL_439;
        }
LABEL_438:
        operator delete(*((void **)&v292 + 1));
        if ((SBYTE7(v292) & 0x80000000) == 0)
        {
LABEL_323:
          uint64_t v175 = (void **)v311;
          if (!v311) {
            goto LABEL_465;
          }
LABEL_440:
          v219 = (void **)v312;
          v220 = v175;
          if ((void **)v312 == v175)
          {
LABEL_448:
            *(void *)&long long v312 = v175;
LABEL_464:
            operator delete(v220);
            goto LABEL_465;
          }
          while (1)
          {
            if (*((char *)v219 - 1) < 0)
            {
              operator delete(*(v219 - 3));
              if ((*((char *)v219 - 25) & 0x80000000) == 0) {
                goto LABEL_443;
              }
LABEL_446:
              operator delete(*(v219 - 6));
              v219 -= 6;
              if (v219 == v175)
              {
LABEL_447:
                v220 = v311;
                goto LABEL_448;
              }
            }
            else
            {
              if (*((char *)v219 - 25) < 0) {
                goto LABEL_446;
              }
LABEL_443:
              v219 -= 6;
              if (v219 == v175) {
                goto LABEL_447;
              }
            }
          }
        }
LABEL_439:
        operator delete((void *)v291);
        uint64_t v175 = (void **)v311;
        if (!v311) {
          goto LABEL_465;
        }
        goto LABEL_440;
      }
      uint64_t v158 = sub_69510();
      LODWORD(__p[0]) = sub_69124((uint64_t)v158);
      sub_677F0((unsigned int *)__p, (uint64_t)&v313);
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        uint64_t v159 = sub_188FC78(__p, (uint64_t)"Could not parse the path_leg from ", 34);
        if (v314 >= 0) {
          long long v160 = &v313;
        }
        else {
          long long v160 = v313;
        }
        if (v314 >= 0) {
          uint64_t v161 = HIBYTE(v314);
        }
        else {
          uint64_t v161 = v314;
        }
        unint64_t v162 = sub_188FC78(v159, (uint64_t)v160, v161);
        unsigned int v163 = sub_188FC78(v162, (uint64_t)" request ", 9);
        uint64_t v164 = sub_68EE4((uint64_t)v158);
        int v165 = *(char *)(v164 + 23);
        if (v165 >= 0) {
          uint64_t v166 = v164;
        }
        else {
          uint64_t v166 = *(void *)v164;
        }
        if (v165 >= 0) {
          uint64_t v167 = *(unsigned __int8 *)(v164 + 23);
        }
        else {
          uint64_t v167 = *(void *)(v164 + 8);
        }
        sub_188FC78(v163, v166, v167);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v291, 3u);
        if (SBYTE7(v292) < 0) {
          operator delete((void *)v291);
        }
        __p[0] = v232;
        *(void **)((char *)__p + *((void *)v232 - 3)) = v233;
        if (v325 < 0) {
          operator delete(v324);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      v311 = operator new(0x20uLL);
      long long v312 = xmmword_20B91B0;
      strcpy((char *)v311, "PathCodecDecodingFailure.Sky");
      int v168 = *(uint64_t **)(v239 + 32);
      uint64_t v169 = *v168;
      if (*v168)
      {
        sub_443118((uint64_t)__p, *v168);
      }
      else
      {
        long long v310 = 0uLL;
        v309 = 0;
        v295 = 0;
        long long v293 = 0u;
        long long v294 = 0u;
        long long v291 = 0u;
        long long v292 = 0u;
        HIBYTE(v304) = 0;
        LOBYTE(v303) = 0;
        v302 = 0;
        uint64_t v301 = 0;
        v300 = 0;
        uint64_t v299 = 0;
        sub_29DC44((uint64_t)__p, (long long **)&v309, &v291, &v303, &v301, 0, (uint64_t)&v299, 1);
      }
      sub_710A8(1, (uint64_t)&v311, (uint64_t)__p);
      sub_29E11C((uint64_t)__p);
      if (v169) {
        goto LABEL_462;
      }
      v176 = v300;
      if (v300 && !atomic_fetch_add(&v300->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
      }
      long long v177 = v302;
      if (v302 && !atomic_fetch_add(&v302->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
        std::__shared_weak_count::__release_weak(v177);
      }
      if (SHIBYTE(v304) < 0)
      {
        operator delete((void *)v303);
        if ((SHIBYTE(v295) & 0x80000000) == 0)
        {
LABEL_335:
          if ((SHIBYTE(v293) & 0x80000000) == 0) {
            goto LABEL_336;
          }
          goto LABEL_451;
        }
      }
      else if ((SHIBYTE(v295) & 0x80000000) == 0)
      {
        goto LABEL_335;
      }
      operator delete((void *)v294);
      if ((SHIBYTE(v293) & 0x80000000) == 0)
      {
LABEL_336:
        if ((SBYTE7(v292) & 0x80000000) == 0) {
          goto LABEL_337;
        }
LABEL_452:
        operator delete((void *)v291);
        uint64_t v178 = (void **)v309;
        if (v309) {
          goto LABEL_453;
        }
LABEL_462:
        if ((SHIBYTE(v312) & 0x80000000) == 0) {
          goto LABEL_465;
        }
        v220 = v311;
        goto LABEL_464;
      }
LABEL_451:
      operator delete(*((void **)&v292 + 1));
      if ((SBYTE7(v292) & 0x80000000) == 0)
      {
LABEL_337:
        uint64_t v178 = (void **)v309;
        if (!v309) {
          goto LABEL_462;
        }
LABEL_453:
        v221 = (void **)v310;
        v222 = v178;
        if ((void **)v310 == v178)
        {
LABEL_461:
          *(void *)&long long v310 = v178;
          operator delete(v222);
          goto LABEL_462;
        }
        while (1)
        {
          if (*((char *)v221 - 1) < 0)
          {
            operator delete(*(v221 - 3));
            if ((*((char *)v221 - 25) & 0x80000000) == 0) {
              goto LABEL_456;
            }
LABEL_459:
            operator delete(*(v221 - 6));
            v221 -= 6;
            if (v221 == v178)
            {
LABEL_460:
              v222 = v309;
              goto LABEL_461;
            }
          }
          else
          {
            if (*((char *)v221 - 25) < 0) {
              goto LABEL_459;
            }
LABEL_456:
            v221 -= 6;
            if (v221 == v178) {
              goto LABEL_460;
            }
          }
        }
      }
      goto LABEL_452;
    }
    sub_110B110((uint64_t)v338, (uint64_t)v255);
    if ((int)v256 >= 1)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 8 * v256;
      do
      {
        while (1)
        {
          uint64_t v19 = *(void *)(*((void *)&v256 + 1) + v17 + 8);
          if (*(_DWORD *)(v19 + 84) != 2) {
            break;
          }
          char v244 = 1;
          v17 += 8;
          if (v18 == v17) {
            goto LABEL_30;
          }
        }
        sub_42EB84((uint64_t)v343, *(void *)(v19 + 48));
        char v21 = a6 ^ 1;
        if (v17) {
          char v21 = 0;
        }
        if (v20) {
          char v22 = 1;
        }
        else {
          char v22 = v21;
        }
        sub_42EB84((uint64_t)v343, *(void *)(v19 + 48));
        v247 &= v22;
        v248 &= (v23 & 1) == 0;
        v17 += 8;
      }
      while (v18 != v17);
    }
LABEL_30:
    LOBYTE(v342) = v326 == v327;
    sub_410814((uint64_t)&v329, v338);
    sub_40F460((uint64_t *)&v329, (uint64_t)v255, (uint64_t)&v291);
    LOBYTE(v342) = 0;
    uint64_t v240 = *((void *)&v292 + 1);
    uint64_t v241 = v292;
    if ((void)v292 == *((void *)&v292 + 1))
    {
      if (a6)
      {
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)__p);
          sub_188FC78(__p, (uint64_t)"Decoding path with path-codec failed.", 37);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&v313, 3u);
          if (SHIBYTE(v314) < 0) {
            operator delete(v313);
          }
          __p[0] = v232;
          *(void **)((char *)__p + *((void *)v232 - 3)) = v233;
          if (v325 < 0) {
            operator delete(v324);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        v313 = operator new(0x20uLL);
        long long v314 = xmmword_20B91C0;
        strcpy((char *)v313, "PathCodecDecodingFailure");
        uint64_t v115 = *(uint64_t **)(v239 + 32);
        uint64_t v116 = *v115;
        if (*v115)
        {
          sub_443118((uint64_t)__p, *v115);
        }
        else
        {
          v289 = 0;
          v288 = 0;
          uint64_t v290 = 0;
          uint64_t v287 = 0;
          long long v285 = 0u;
          long long v286 = 0u;
          long long v283 = 0u;
          long long v284 = 0u;
          char v282 = 0;
          LOBYTE(v281) = 0;
          v280 = 0;
          uint64_t v279 = 0;
          v278 = 0;
          uint64_t v277 = 0;
          sub_29DC44((uint64_t)__p, (long long **)&v288, &v283, &v281, &v279, 0, (uint64_t)&v277, 1);
        }
        sub_710A8(1, (uint64_t)&v313, (uint64_t)__p);
        sub_29E11C((uint64_t)__p);
        if (v116) {
          goto LABEL_210;
        }
        signed int v140 = v278;
        if (v278 && !atomic_fetch_add(&v278->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
          v141 = v280;
          if (!v280) {
            goto LABEL_173;
          }
        }
        else
        {
          v141 = v280;
          if (!v280) {
            goto LABEL_173;
          }
        }
        if (!atomic_fetch_add(&v141->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
          if ((v282 & 0x80000000) == 0)
          {
LABEL_174:
            if ((SHIBYTE(v287) & 0x80000000) == 0) {
              goto LABEL_175;
            }
            goto LABEL_197;
          }
LABEL_196:
          operator delete((void *)v281);
          if ((SHIBYTE(v287) & 0x80000000) == 0)
          {
LABEL_175:
            if ((SHIBYTE(v285) & 0x80000000) == 0) {
              goto LABEL_176;
            }
            goto LABEL_198;
          }
LABEL_197:
          operator delete((void *)v286);
          if ((SHIBYTE(v285) & 0x80000000) == 0)
          {
LABEL_176:
            if ((SBYTE7(v284) & 0x80000000) == 0) {
              goto LABEL_177;
            }
            goto LABEL_199;
          }
LABEL_198:
          operator delete(*((void **)&v284 + 1));
          if ((SBYTE7(v284) & 0x80000000) == 0)
          {
LABEL_177:
            uint64_t v142 = (void **)v288;
            if (!v288) {
              goto LABEL_210;
            }
            goto LABEL_200;
          }
LABEL_199:
          operator delete((void *)v283);
          uint64_t v142 = (void **)v288;
          if (!v288) {
            goto LABEL_210;
          }
LABEL_200:
          uint64_t v147 = v289;
          unint64_t v143 = v142;
          if (v289 == v142)
          {
LABEL_208:
            v289 = v142;
LABEL_209:
            operator delete(v143);
            goto LABEL_210;
          }
          while (1)
          {
            if (*((char *)v147 - 1) < 0)
            {
              operator delete(*(v147 - 3));
              if ((*((char *)v147 - 25) & 0x80000000) == 0) {
                goto LABEL_203;
              }
LABEL_206:
              operator delete(*(v147 - 6));
              v147 -= 6;
              if (v147 == v142)
              {
LABEL_207:
                unint64_t v143 = v288;
                goto LABEL_208;
              }
            }
            else
            {
              if (*((char *)v147 - 25) < 0) {
                goto LABEL_206;
              }
LABEL_203:
              v147 -= 6;
              if (v147 == v142) {
                goto LABEL_207;
              }
            }
          }
        }
LABEL_173:
        if ((v282 & 0x80000000) == 0) {
          goto LABEL_174;
        }
        goto LABEL_196;
      }
      std::string::size_type v117 = sub_69510();
      LODWORD(__p[0]) = sub_69124((uint64_t)v117);
      sub_677F0((unsigned int *)__p, (uint64_t)&v313);
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        uint8x8_t v118 = sub_188FC78(__p, (uint64_t)"Decoding path with path-codec failed for ", 41);
        if (v314 >= 0) {
          uint64_t v119 = &v313;
        }
        else {
          uint64_t v119 = v313;
        }
        if (v314 >= 0) {
          uint64_t v120 = HIBYTE(v314);
        }
        else {
          uint64_t v120 = v314;
        }
        unint64_t v121 = sub_188FC78(v118, (uint64_t)v119, v120);
        uint64_t v122 = sub_188FC78(v121, (uint64_t)" request (os_version: ", 22);
        uint64_t v123 = sub_69134((uint64_t)v117);
        int v124 = *(char *)(v123 + 23);
        if (v124 >= 0) {
          uint64_t v125 = v123;
        }
        else {
          uint64_t v125 = *(void *)v123;
        }
        if (v124 >= 0) {
          uint64_t v126 = *(unsigned __int8 *)(v123 + 23);
        }
        else {
          uint64_t v126 = *(void *)(v123 + 8);
        }
        int v127 = sub_188FC78(v122, v125, v126);
        long double v128 = sub_188FC78(v127, (uint64_t)", all_geo_ids_invalid: ", 23);
        *(_DWORD *)((char *)v128 + *(void *)(*v128 - 24) + 8) |= 1u;
        double v129 = (void *)std::ostream::operator<<();
        sub_188FC78(v129, (uint64_t)", all_geo_ids_valid: ", 21);
        long double v130 = (void *)std::ostream::operator<<();
        sub_188FC78(v130, (uint64_t)", transport_mode_flip=", 22);
        double v131 = (void *)std::ostream::operator<<();
        int v132 = sub_188FC78(v131, (uint64_t)") ", 2);
        uint64_t v133 = sub_68EE4((uint64_t)v117);
        int v134 = *(char *)(v133 + 23);
        if (v134 >= 0) {
          uint64_t v135 = v133;
        }
        else {
          uint64_t v135 = *(void *)v133;
        }
        if (v134 >= 0) {
          uint64_t v136 = *(unsigned __int8 *)(v133 + 23);
        }
        else {
          uint64_t v136 = *(void *)(v133 + 8);
        }
        sub_188FC78(v132, v135, v136);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v311, 3u);
        if (SHIBYTE(v312) < 0) {
          operator delete(v311);
        }
        __p[0] = v232;
        *(void **)((char *)__p + *((void *)v232 - 3)) = v233;
        if (v325 < 0) {
          operator delete(v324);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      uint64_t v137 = operator new(__sz);
      *((void *)&v312 + 1) = v228;
      v311 = v137;
      *(void *)&long long v312 = v229;
      memcpy(v137, __src, v229);
      *((unsigned char *)v137 + v229) = 0;
      uint64_t v138 = *(uint64_t **)(v239 + 32);
      uint64_t v139 = *v138;
      if (*v138)
      {
        sub_443118((uint64_t)__p, *v138);
      }
      else
      {
        v275 = 0;
        v274 = 0;
        uint64_t v276 = 0;
        uint64_t v273 = 0;
        long long v271 = 0u;
        long long v272 = 0u;
        long long v269 = 0u;
        long long v270 = 0u;
        char v268 = 0;
        LOBYTE(v267) = 0;
        uint64_t v265 = 0;
        v266 = 0;
        uint64_t v263 = 0;
        v264 = 0;
        sub_29DC44((uint64_t)__p, (long long **)&v274, &v269, &v267, &v265, 0, (uint64_t)&v263, 1);
      }
      sub_710A8(1, (uint64_t)&v311, (uint64_t)__p);
      sub_29E11C((uint64_t)__p);
      if (v139)
      {
LABEL_181:
        if (SHIBYTE(v312) < 0) {
          goto LABEL_182;
        }
        goto LABEL_210;
      }
      std::string::size_type v144 = v264;
      if (v264 && !atomic_fetch_add(&v264->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
        unint64_t v145 = v266;
        if (!v266) {
          goto LABEL_187;
        }
      }
      else
      {
        unint64_t v145 = v266;
        if (!v266) {
          goto LABEL_187;
        }
      }
      if (!atomic_fetch_add(&v145->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
        if ((v268 & 0x80000000) == 0)
        {
LABEL_188:
          if ((SHIBYTE(v273) & 0x80000000) == 0) {
            goto LABEL_189;
          }
          goto LABEL_229;
        }
LABEL_228:
        operator delete((void *)v267);
        if ((SHIBYTE(v273) & 0x80000000) == 0)
        {
LABEL_189:
          if ((SHIBYTE(v271) & 0x80000000) == 0) {
            goto LABEL_190;
          }
          goto LABEL_230;
        }
LABEL_229:
        operator delete((void *)v272);
        if ((SHIBYTE(v271) & 0x80000000) == 0)
        {
LABEL_190:
          if ((SBYTE7(v270) & 0x80000000) == 0) {
            goto LABEL_191;
          }
          goto LABEL_231;
        }
LABEL_230:
        operator delete(*((void **)&v270 + 1));
        if ((SBYTE7(v270) & 0x80000000) == 0)
        {
LABEL_191:
          int v146 = (void **)v274;
          if (!v274) {
            goto LABEL_181;
          }
          goto LABEL_232;
        }
LABEL_231:
        operator delete((void *)v269);
        int v146 = (void **)v274;
        if (!v274) {
          goto LABEL_181;
        }
LABEL_232:
        char v149 = v275;
        if (v275 == v146)
        {
          v275 = v146;
          operator delete(v146);
          if (SHIBYTE(v312) < 0) {
            goto LABEL_182;
          }
          goto LABEL_210;
        }
        while (1)
        {
          if (*((char *)v149 - 1) < 0)
          {
            operator delete(*(v149 - 3));
            if ((*((char *)v149 - 25) & 0x80000000) == 0) {
              goto LABEL_236;
            }
LABEL_239:
            operator delete(*(v149 - 6));
            v149 -= 6;
            if (v149 == v146)
            {
LABEL_240:
              v275 = v146;
              operator delete(v274);
              if (SHIBYTE(v312) < 0)
              {
LABEL_182:
                unint64_t v143 = v311;
                goto LABEL_209;
              }
LABEL_210:
              if (SHIBYTE(v314) < 0) {
                operator delete(v313);
              }
              sub_47E0E4((_OWORD *)a8);
              *(unsigned char *)(a8 + 120) = 0;
              _OWORD *v235 = 0u;
              *(_OWORD *)(a8 + 64) = 0u;
              *(_OWORD *)(a8 + 80) = 0u;
              goto LABEL_213;
            }
          }
          else
          {
            if (*((char *)v149 - 25) < 0) {
              goto LABEL_239;
            }
LABEL_236:
            v149 -= 6;
            if (v149 == v146) {
              goto LABEL_240;
            }
          }
        }
      }
LABEL_187:
      if ((v268 & 0x80000000) == 0) {
        goto LABEL_188;
      }
      goto LABEL_228;
    }
    sub_4404B8((uint64_t)&v291, (uint64_t)v343, *(unsigned char *)(v239 + 16), (uint64_t *)&v313);
    double v24 = (double *)v313;
    v246 = (double *)v314;
    if (v313 == (void *)v314)
    {
      if (!v313) {
        goto LABEL_128;
      }
LABEL_33:
      double v25 = (double *)v314;
      BOOL v26 = v24;
      if ((double *)v314 != v24)
      {
        do
        {
          v25 -= 17;
          sub_443B90((uint64_t)&v314 + 8, v25);
        }
        while (v25 != v24);
        BOOL v26 = v313;
      }
      *(void *)&long long v314 = v24;
      operator delete(v26);
      if (v295 == v296) {
        goto LABEL_213;
      }
LABEL_129:
      sub_4491B8((uint64_t *)&v295, (uint64_t)__p);
      if (v369)
      {
        if ((void)v367)
        {
          *((void *)&v367 + 1) = v367;
          operator delete((void *)v367);
        }
        long long v367 = *(_OWORD *)__p;
        v368 = v316;
        uint64_t v114 = v298;
        if (!v298) {
          goto LABEL_214;
        }
      }
      else
      {
        long long v367 = *(_OWORD *)__p;
        v368 = v316;
        char v369 = 1;
        uint64_t v114 = v298;
        if (!v298) {
          goto LABEL_214;
        }
      }
      do
      {
LABEL_247:
        int v150 = (void *)*v114;
        long long v151 = (void *)v114[3];
        if (v151)
        {
          v114[4] = v151;
          operator delete(v151);
        }
        operator delete(v114);
        uint64_t v114 = v150;
      }
      while (v150);
      goto LABEL_214;
    }
    while (2)
    {
      uint64_t v28 = v327;
      if ((unint64_t)v327 < v328)
      {
        sub_EB1D94(v327);
        char v29 = v28 + 480;
        goto LABEL_61;
      }
      unint64_t v30 = 0xEEEEEEEEEEEEEEEFLL * ((v327 - (unsigned char *)v326) >> 5);
      unint64_t v31 = v30 + 1;
      if (v30 + 1 > 0x88888888888888) {
        sub_2E00();
      }
      if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v328 - (void)v326) >> 5) > v31) {
        unint64_t v31 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(v328 - (void)v326) >> 5);
      }
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v328 - (void)v326) >> 5) >= 0x44444444444444) {
        unint64_t v32 = 0x88888888888888;
      }
      else {
        unint64_t v32 = v31;
      }
      *((void *)&v317 + 1) = &v328;
      if (v32)
      {
        if (v32 > 0x88888888888888) {
          sub_188D718();
        }
        uint64_t v33 = (char *)operator new(480 * v32);
      }
      else
      {
        uint64_t v33 = 0;
      }
      __p[0] = v33;
      __p[1] = &v33[480 * v30];
      v316 = (char *)__p[1];
      *(void *)&long long v317 = &v33[480 * v32];
      sub_EB1D94(__p[1]);
      int64_t v34 = (char *)__p[1];
      char v29 = v316 + 480;
      uint64_t v35 = (void **)v327;
      uint64_t v36 = (void **)v326;
      if (v327 == v326)
      {
        v326 = __p[1];
        v327 = v316 + 480;
        unint64_t v328 = v317;
        if (v35) {
          goto LABEL_60;
        }
      }
      else
      {
        uint64_t v37 = 0;
        do
        {
          char v46 = &v34[v37 * 8];
          uint64_t v47 = (uint64_t)&v34[v37 * 8 - 480];
          uint64_t v48 = &v35[v37];
          uint64_t v49 = (uint64_t)&v35[v37 - 60];
          long long v50 = *(_OWORD *)v49;
          *(void *)(v47 + 16) = v35[v37 - 58];
          *(_OWORD *)uint64_t v47 = v50;
          *(void *)(v49 + 8) = 0;
          *(void *)(v49 + 16) = 0;
          *(void *)uint64_t v49 = 0;
          char v51 = &v34[v37 * 8 - 456];
          uint64_t v52 = (uint64_t)&v35[v37 - 57];
          *(void *)&v34[v37 * 8 - 448] = 0;
          *(void *)char v51 = 0;
          *((void *)v51 + 2) = 0;
          *(_OWORD *)char v51 = *(_OWORD *)v52;
          *(void *)&v34[v37 * 8 - 440] = v35[v37 - 55];
          *(void *)(v52 + 16) = 0;
          v35[v37 - 56] = 0;
          *(void *)uint64_t v52 = 0;
          uint64_t v53 = (uint64_t)&v34[v37 * 8 - 432];
          long long v54 = *(_OWORD *)&v35[v37 - 52];
          long long v55 = *(_OWORD *)&v35[v37 - 50];
          long long v56 = *(_OWORD *)&v35[v37 - 48];
          *(void *)(v53 + 62) = *(void **)((char *)&v35[v37 - 46] - 2);
          *(_OWORD *)(v53 + 32) = v55;
          *(_OWORD *)(v53 + 48) = v56;
          *(_OWORD *)(v53 + 16) = v54;
          *(_OWORD *)uint64_t v53 = *(_OWORD *)&v35[v37 - 54];
          uint64_t v57 = &v34[v37 * 8 - 360];
          uint64_t v58 = (uint64_t)&v35[v37 - 45];
          *((void *)v57 + 1) = 0;
          *((void *)v57 + 2) = 0;
          *(void *)uint64_t v57 = 0;
          *(_OWORD *)uint64_t v57 = *(_OWORD *)v58;
          *(void *)&v34[v37 * 8 - 344] = v35[v37 - 43];
          v35[v37 - 44] = 0;
          *(void *)uint64_t v58 = 0;
          *(void *)(v58 + 16) = 0;
          uint64_t v59 = &v34[v37 * 8 - 336];
          uint64_t v60 = (uint64_t)&v35[v37 - 42];
          *(void *)&v34[v37 * 8 - 328] = 0;
          *(void *)uint64_t v59 = 0;
          *((void *)v59 + 2) = 0;
          *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
          *(void *)&v34[v37 * 8 - 320] = v35[v37 - 40];
          v35[v37 - 41] = 0;
          *(void *)uint64_t v60 = 0;
          *(void *)(v60 + 16) = 0;
          uint64_t v61 = &v34[v37 * 8 - 312];
          uint64_t v62 = (uint64_t)&v35[v37 - 39];
          *(void *)&v34[v37 * 8 - 304] = 0;
          *(void *)uint64_t v61 = 0;
          *((void *)v61 + 2) = 0;
          *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
          *(void *)&v34[v37 * 8 - 296] = v35[v37 - 37];
          v35[v37 - 38] = 0;
          *(void *)uint64_t v62 = 0;
          *(void *)(v62 + 16) = 0;
          __int16 v63 = &v34[v37 * 8 - 288];
          long long v64 = *(_OWORD *)&v35[v37 - 34];
          uint64_t v65 = v35[v37 - 32];
          *(_OWORD *)__int16 v63 = *(_OWORD *)&v35[v37 - 36];
          *((_OWORD *)v63 + 1) = v64;
          *((void *)v46 - 32) = v65;
          *((void *)v46 - 31) = 0;
          *((void *)v46 - 30) = 0;
          *((void *)v46 - 29) = 0;
          *(_OWORD *)(v46 - 248) = *(_OWORD *)&v35[v37 - 31];
          *((void *)v46 - 29) = v35[v37 - 29];
          *(v48 - 31) = 0;
          *(v48 - 30) = 0;
          *(v48 - 29) = 0;
          *((void *)v46 - 28) = 0;
          *((void *)v46 - 27) = 0;
          *((void *)v46 - 26) = 0;
          *((_OWORD *)v46 - 14) = *(_OWORD *)&v35[v37 - 28];
          *((void *)v46 - 26) = v35[v37 - 26];
          *(v48 - 28) = 0;
          *(v48 - 27) = 0;
          *(v48 - 26) = 0;
          *(_OWORD *)(v46 - 200) = *(_OWORD *)&v35[v37 - 25];
          *((_DWORD *)v46 - 44) = v35[v37 - 22];
          if (LODWORD(v35[v37 - 22]) < 2) {
            *((void *)v46 - 23) = *(v48 - 23);
          }
          uint64_t v38 = &v34[v37 * 8];
          *(_OWORD *)(v38 - 168) = *(_OWORD *)&v35[v37 - 21];
          long long v39 = *(_OWORD *)&v35[v37 - 13];
          long long v40 = *(_OWORD *)&v35[v37 - 11];
          long long v41 = *(_OWORD *)&v35[v37 - 9];
          *(_OWORD *)(v38 - 120) = *(_OWORD *)&v35[v37 - 15];
          *(_OWORD *)(v38 - 72) = v41;
          *(_OWORD *)(v38 - 88) = v40;
          *(_OWORD *)(v38 - 104) = v39;
          long long v42 = *(_OWORD *)&v35[v37 - 5];
          long long v43 = *(_OWORD *)&v35[v37 - 3];
          uint64_t v44 = *(uint64_t *)((char *)&v35[v37 - 1] - 1);
          *(_OWORD *)(v38 - 56) = *(_OWORD *)&v35[v37 - 7];
          *(void *)(v38 - 9) = v44;
          *(_OWORD *)(v38 - 24) = v43;
          *(_OWORD *)(v38 - 40) = v42;
          long long v45 = *(_OWORD *)&v35[v37 - 19];
          *(_OWORD *)(v38 - 136) = *(_OWORD *)&v35[v37 - 17];
          *(_OWORD *)(v38 - 152) = v45;
          v37 -= 60;
        }
        while (&v35[v37] != v36);
        uint64_t v35 = (void **)v326;
        char v66 = (void **)v327;
        v326 = &v34[v37 * 8];
        v327 = v29;
        unint64_t v328 = v317;
        if (v66 != v35)
        {
          do
          {
            long long v70 = *(v66 - 28);
            if (v70)
            {
              *(v66 - 27) = v70;
              operator delete(v70);
            }
            long long v71 = *(v66 - 31);
            if (v71)
            {
              *(v66 - 30) = v71;
              operator delete(v71);
            }
            uint64_t v72 = *(v66 - 39);
            if (v72)
            {
              *(v66 - 38) = v72;
              operator delete(v72);
            }
            unint64_t v73 = *(v66 - 42);
            if (v73)
            {
              *(v66 - 41) = v73;
              operator delete(v73);
            }
            uint64_t v74 = (char *)*(v66 - 45);
            if (v74)
            {
              unint64_t v75 = (char *)*(v66 - 44);
              unint64_t v76 = *(v66 - 45);
              if (v75 != v74)
              {
                do
                {
                  unint64_t v77 = (void *)*((void *)v75 - 3);
                  if (v77)
                  {
                    *((void *)v75 - 2) = v77;
                    operator delete(v77);
                  }
                  v75 -= 56;
                }
                while (v75 != v74);
                unint64_t v76 = *(v66 - 45);
              }
              *(v66 - 44) = v74;
              operator delete(v76);
            }
            uint64_t v78 = *(v66 - 57);
            if (v78)
            {
              *(v66 - 56) = v78;
              operator delete(v78);
            }
            unint64_t v79 = v66 - 60;
            if (*((char *)v66 - 457) < 0) {
              operator delete(*v79);
            }
            v66 -= 60;
          }
          while (v79 != v35);
        }
        if (v35) {
LABEL_60:
        }
          operator delete(v35);
      }
LABEL_61:
      v327 = v29;
      uint64_t v67 = (uint64_t)(v29 - 480);
      sub_4408B4((uint64_t)v24, v245, v67);
      LODWORD(__p[0]) = 0;
      __p[1] = 0;
      v316 = 0;
      LOBYTE(v317) = 0;
      *((void *)&v317 + 1) = 0x3FF0000000000000;
      LOBYTE(v318) = 1;
      uint64_t v319 = 0;
      uint64_t v320 = 0;
      char v321 = 0;
      int v322 = 36000;
      char v323 = 0;
      LODWORD(__p[0]) = vcvtad_u64_f64(*v24 * 1000000000.0);
      sub_EB22B4(v67, (uint64_t)__p);
      LODWORD(__p[0]) = vcvtad_u64_f64(v24[1] * 1000000000.0);
      sub_EB241C(v67, (uint64_t)__p);
      long long v68 = (void *)*((void *)&v364 + 1);
      if (*((void *)&v364 + 1) >= (unint64_t)v365)
      {
        uint64_t v80 = (void *)v364;
        unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v364 + 1) - v364) >> 3);
        unint64_t v82 = v81 + 1;
        if (v81 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_2E00();
        }
        if (0x5555555555555556 * ((uint64_t)(v365 - v364) >> 3) > v82) {
          unint64_t v82 = 0x5555555555555556 * ((uint64_t)(v365 - v364) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v365 - v364) >> 3) >= 0x555555555555555) {
          unint64_t v83 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v83 = v82;
        }
        if (v83)
        {
          if (v83 > 0xAAAAAAAAAAAAAAALL) {
            sub_188D718();
          }
          uint64_t v84 = (char *)operator new(24 * v83);
        }
        else
        {
          uint64_t v84 = 0;
        }
        unint64_t v85 = &v84[24 * v81];
        *(void *)unint64_t v85 = 0;
        *((void *)v85 + 1) = 0;
        *((void *)v85 + 2) = 0;
        uint64_t v69 = v85 + 24;
        if (v68 == v80)
        {
          *(void *)&long long v364 = &v84[24 * v81];
          *((void *)&v364 + 1) = v85 + 24;
          *(void *)&long long v365 = &v84[24 * v83];
        }
        else
        {
          do
          {
            unint64_t v86 = v85;
            *((void *)v85 - 2) = 0;
            *((void *)v85 - 1) = 0;
            long long v87 = *(_OWORD *)(v68 - 3);
            v68 -= 3;
            *(_OWORD *)(v85 - 24) = v87;
            v85 -= 24;
            *((void *)v86 - 1) = v68[2];
            void *v68 = 0;
            v68[1] = 0;
            v68[2] = 0;
          }
          while (v68 != v80);
          int v88 = (void *)*((void *)&v364 + 1);
          long long v68 = (void *)v364;
          *(void *)&long long v364 = v85;
          *((void *)&v364 + 1) = v69;
          *(void *)&long long v365 = &v84[24 * v83];
          if (v88 != v68)
          {
            uint64_t v89 = v88;
            do
            {
              uint64_t v91 = (void *)*(v89 - 3);
              v89 -= 3;
              uint64_t v90 = v91;
              if (v91)
              {
                *(v88 - 2) = v90;
                operator delete(v90);
              }
              int v88 = v89;
            }
            while (v89 != v68);
          }
        }
        if (v68) {
          operator delete(v68);
        }
      }
      else
      {
        **((void **)&v364 + 1) = 0;
        v68[1] = 0;
        uint64_t v69 = v68 + 3;
        v68[2] = 0;
      }
      *((void *)&v364 + 1) = v69;
      uint64_t v93 = (unsigned char *)*(v69 - 3);
      unint64_t v92 = (unsigned char *)*(v69 - 2);
      uint64_t v94 = *((void *)v24 + 3) - *((void *)v24 + 2);
      unint64_t v95 = v94 >> 3;
      uint64_t v96 = v92 - v93;
      unint64_t v97 = (v92 - v93) >> 2;
      unint64_t v98 = (v94 >> 3) - v97;
      if (v94 >> 3 <= v97)
      {
        if (v94 >> 3 < v97) {
          *(v69 - 2) = &v93[4 * v95];
        }
      }
      else
      {
        uint64_t v99 = *(v69 - 1);
        if (v98 <= (v99 - (uint64_t)v92) >> 2)
        {
          double v27 = &v92[4 * v98];
          memset((void *)*(v69 - 2), 255, (((v94 >> 1) - v96 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
          *(v69 - 2) = v27;
        }
        else
        {
          if (v94 < 0) {
            sub_2E00();
          }
          unint64_t v100 = v99 - (void)v93;
          unint64_t v101 = (v99 - (uint64_t)v93) >> 1;
          if (v101 <= v95) {
            unint64_t v101 = v94 >> 3;
          }
          if (v100 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v101 = 0x3FFFFFFFFFFFFFFFLL;
          }
          if (v101 >> 62) {
            sub_188D718();
          }
          unint64_t v102 = v101;
          v243 = operator new(4 * v101);
          unsigned int v103 = &v243[4 * v97];
          memset(v103, 255, ((((unint64_t)v94 >> 1) - v96 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
          if (v92 == v93)
          {
            uint64_t v105 = v243;
          }
          else
          {
            unint64_t v104 = v92 - 4 - v93;
            if (v104 < 0x2C)
            {
              uint64_t v105 = v243;
              goto LABEL_124;
            }
            uint64_t v105 = v243;
            if ((unint64_t)(v93 - v243) < 0x20) {
              goto LABEL_493;
            }
            uint64_t v106 = (v104 >> 2) + 1;
            uint64_t v107 = 4 * (v106 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v108 = &v92[-v107];
            v103 -= v107;
            int v109 = &v243[4 * v97 - 16];
            unint64_t v110 = (long long *)(v92 - 16);
            uint64_t v111 = v106 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v112 = *v110;
              *(v109 - 1) = *(v110 - 1);
              _OWORD *v109 = v112;
              v109 -= 2;
              v110 -= 2;
              v111 -= 8;
            }
            while (v111);
            unint64_t v92 = v108;
            if (v106 != (v106 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_493:
              do
              {
LABEL_124:
                int v113 = *((_DWORD *)v92 - 1);
                v92 -= 4;
                *((_DWORD *)v103 - 1) = v113;
                v103 -= 4;
              }
              while (v92 != v93);
            }
          }
          *(v69 - 3) = v103;
          *(v69 - 2) = &v105[4 * v95];
          *(v69 - 1) = &v105[4 * v102];
          if (v93) {
            operator delete(v93);
          }
        }
      }
      v24 += 17;
      if (v24 != v246) {
        continue;
      }
      break;
    }
    double v24 = (double *)v313;
    if (v313) {
      goto LABEL_33;
    }
LABEL_128:
    if (v295 != v296) {
      goto LABEL_129;
    }
LABEL_213:
    uint64_t v114 = v298;
    if (v298) {
      goto LABEL_247;
    }
LABEL_214:
    uint64_t v148 = v297;
    v297 = 0;
    if (v148) {
      operator delete(v148);
    }
    if (v295)
    {
      v296 = v295;
      operator delete(v295);
    }
    if (*((void *)&v293 + 1))
    {
      *(void *)&long long v294 = *((void *)&v293 + 1);
      operator delete(*((void **)&v293 + 1));
    }
    if ((void)v292)
    {
      *((void *)&v292 + 1) = v292;
      operator delete((void *)v292);
    }
    sub_1116458(v255);
    if (v241 == v240) {
      goto LABEL_409;
    }
    v242 += 24;
    if (v242 != v237) {
      continue;
    }
    break;
  }
  if ((v247 & 1) == 0)
  {
    char v155 = v244;
    v255[0] = operator new(0x19uLL);
    *(_OWORD *)&v255[1] = xmmword_20B9250;
    strcpy((char *)v255[0], "PathCodec.UnknownGeoIds");
    std::string v170 = *(uint64_t **)(v239 + 32);
    uint64_t v171 = *v170;
    if (*v170)
    {
      sub_443118((uint64_t)__p, *v170);
    }
    else
    {
      long long v314 = 0uLL;
      v313 = 0;
      v295 = 0;
      long long v293 = 0u;
      long long v294 = 0u;
      long long v291 = 0u;
      long long v292 = 0u;
      HIBYTE(v312) = 0;
      LOBYTE(v311) = 0;
      uint64_t v261 = 0;
      v262 = 0;
      uint64_t v259 = 0;
      v260 = 0;
      sub_29DC44((uint64_t)__p, (long long **)&v313, &v291, (long long *)&v311, &v261, 0, (uint64_t)&v259, 1);
    }
    sub_710A8(1, (uint64_t)v255, (uint64_t)__p);
    sub_29E11C((uint64_t)__p);
    if (v171)
    {
      if ((SHIBYTE(v255[2]) & 0x80000000) == 0) {
        goto LABEL_342;
      }
      goto LABEL_483;
    }
    v216 = v260;
    if (v260 && !atomic_fetch_add(&v260->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
    v217 = v262;
    if (v262 && !atomic_fetch_add(&v262->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
      std::__shared_weak_count::__release_weak(v217);
    }
    if (SHIBYTE(v312) < 0)
    {
      operator delete(v311);
      if ((SHIBYTE(v295) & 0x80000000) == 0)
      {
LABEL_432:
        if ((SHIBYTE(v293) & 0x80000000) == 0) {
          goto LABEL_433;
        }
        goto LABEL_471;
      }
    }
    else if ((SHIBYTE(v295) & 0x80000000) == 0)
    {
      goto LABEL_432;
    }
    operator delete((void *)v294);
    if ((SHIBYTE(v293) & 0x80000000) == 0)
    {
LABEL_433:
      if ((SBYTE7(v292) & 0x80000000) == 0) {
        goto LABEL_434;
      }
      goto LABEL_472;
    }
LABEL_471:
    operator delete(*((void **)&v292 + 1));
    if ((SBYTE7(v292) & 0x80000000) == 0)
    {
LABEL_434:
      v218 = (void **)v313;
      if (!v313)
      {
LABEL_482:
        char v155 = v244;
        if ((SHIBYTE(v255[2]) & 0x80000000) == 0)
        {
LABEL_342:
          if ((v248 & 1) == 0) {
            goto LABEL_375;
          }
          goto LABEL_343;
        }
LABEL_483:
        operator delete(v255[0]);
        if (v248) {
          goto LABEL_343;
        }
LABEL_375:
        if (v155) {
          goto LABEL_378;
        }
        goto LABEL_396;
      }
      goto LABEL_473;
    }
LABEL_472:
    operator delete((void *)v291);
    v218 = (void **)v313;
    if (!v313) {
      goto LABEL_482;
    }
LABEL_473:
    v223 = (void **)v314;
    v224 = v218;
    if ((void **)v314 == v218)
    {
LABEL_481:
      *(void *)&long long v314 = v218;
      operator delete(v224);
      goto LABEL_482;
    }
    while (1)
    {
      if (*((char *)v223 - 1) < 0)
      {
        operator delete(*(v223 - 3));
        if ((*((char *)v223 - 25) & 0x80000000) == 0) {
          goto LABEL_476;
        }
LABEL_479:
        operator delete(*(v223 - 6));
        v223 -= 6;
        if (v223 == v218)
        {
LABEL_480:
          v224 = v313;
          goto LABEL_481;
        }
      }
      else
      {
        if (*((char *)v223 - 25) < 0) {
          goto LABEL_479;
        }
LABEL_476:
        v223 -= 6;
        if (v223 == v218) {
          goto LABEL_480;
        }
      }
    }
  }
  char v155 = v244;
  if ((v248 & 1) == 0) {
    goto LABEL_375;
  }
LABEL_343:
  v309 = operator new(0x20uLL);
  long long v310 = xmmword_20B5EB0;
  strcpy((char *)v309, "PathCodec.AllUnknownGeoIds");
  long long v179 = *(uint64_t **)(v239 + 32);
  uint64_t v180 = *v179;
  if (*v179)
  {
    sub_443118((uint64_t)__p, *v179);
  }
  else
  {
    long long v303 = 0uLL;
    uint64_t v304 = 0;
    uint64_t v258 = 0;
    long long v256 = 0u;
    *(_OWORD *)v257 = 0u;
    memset(v255, 0, sizeof(v255));
    char v254 = 0;
    LOBYTE(v253) = 0;
    uint64_t v251 = 0;
    v252 = 0;
    uint64_t v249 = 0;
    v250 = 0;
    sub_29DC44((uint64_t)__p, (long long **)&v303, (long long *)v255, &v253, &v251, 0, (uint64_t)&v249, 1);
  }
  sub_710A8(1, (uint64_t)&v309, (uint64_t)__p);
  sub_29E11C((uint64_t)__p);
  if (v180)
  {
    if (SHIBYTE(v310) < 0) {
      goto LABEL_377;
    }
    goto LABEL_375;
  }
  char v181 = v155;
  uint64_t v182 = v250;
  if (v250 && !atomic_fetch_add(&v250->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
    std::__shared_weak_count::__release_weak(v182);
  }
  uint64_t v183 = v252;
  if (v252 && !atomic_fetch_add(&v252->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
    std::__shared_weak_count::__release_weak(v183);
  }
  if (v254 < 0)
  {
    operator delete((void *)v253);
    if (SHIBYTE(v258) < 0) {
      goto LABEL_371;
    }
LABEL_357:
    if ((SHIBYTE(v256) & 0x80000000) == 0) {
      goto LABEL_358;
    }
LABEL_372:
    operator delete(v255[3]);
    if (SHIBYTE(v255[2]) < 0) {
      goto LABEL_373;
    }
LABEL_359:
    int v184 = (void **)v303;
    if (!(void)v303)
    {
LABEL_374:
      char v155 = v181;
      if (SHIBYTE(v310) < 0) {
        goto LABEL_377;
      }
      goto LABEL_375;
    }
  }
  else
  {
    if ((SHIBYTE(v258) & 0x80000000) == 0) {
      goto LABEL_357;
    }
LABEL_371:
    operator delete(v257[0]);
    if (SHIBYTE(v256) < 0) {
      goto LABEL_372;
    }
LABEL_358:
    if ((SHIBYTE(v255[2]) & 0x80000000) == 0) {
      goto LABEL_359;
    }
LABEL_373:
    operator delete(v255[0]);
    int v184 = (void **)v303;
    if (!(void)v303) {
      goto LABEL_374;
    }
  }
  uint64_t v185 = (void **)*((void *)&v303 + 1);
  if (*((void ***)&v303 + 1) == v184)
  {
    *((void *)&v303 + 1) = v184;
    operator delete(v184);
    char v155 = v181;
    if (SHIBYTE(v310) < 0) {
      goto LABEL_377;
    }
    goto LABEL_375;
  }
  while (2)
  {
    while (2)
    {
      if (*((char *)v185 - 1) < 0)
      {
        operator delete(*(v185 - 3));
        if (*((char *)v185 - 25) < 0) {
          break;
        }
        goto LABEL_364;
      }
      if ((*((char *)v185 - 25) & 0x80000000) == 0)
      {
LABEL_364:
        v185 -= 6;
        if (v185 == v184) {
          goto LABEL_368;
        }
        continue;
      }
      break;
    }
    operator delete(*(v185 - 6));
    v185 -= 6;
    if (v185 != v184) {
      continue;
    }
    break;
  }
LABEL_368:
  *((void *)&v303 + 1) = v184;
  operator delete((void *)v303);
  char v155 = v181;
  if ((SHIBYTE(v310) & 0x80000000) == 0) {
    goto LABEL_375;
  }
LABEL_377:
  operator delete(v309);
  if (v155)
  {
LABEL_378:
    uint64_t v186 = sub_69510();
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)__p);
      uint64_t v187 = sub_188FC78(__p, (uint64_t)"Got a path-codec encoded path containing Geometry points. They are not required for decoding. OS version: ", 106);
      uint64_t v188 = sub_69134((uint64_t)v186);
      int v189 = *(char *)(v188 + 23);
      if (v189 >= 0) {
        uint64_t v190 = v188;
      }
      else {
        uint64_t v190 = *(void *)v188;
      }
      if (v189 >= 0) {
        uint64_t v191 = *(unsigned __int8 *)(v188 + 23);
      }
      else {
        uint64_t v191 = *(void *)(v188 + 8);
      }
      uint64_t v192 = sub_188FC78(v187, v190, v191);
      int v193 = sub_188FC78(v192, (uint64_t)", Request: ", 11);
      uint64_t v194 = sub_68EE4((uint64_t)v186);
      int v195 = *(char *)(v194 + 23);
      if (v195 >= 0) {
        uint64_t v196 = v194;
      }
      else {
        uint64_t v196 = *(void *)v194;
      }
      if (v195 >= 0) {
        uint64_t v197 = *(unsigned __int8 *)(v194 + 23);
      }
      else {
        uint64_t v197 = *(void *)(v194 + 8);
      }
      sub_188FC78(v193, v196, v197);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v309, 1u);
      if (SHIBYTE(v310) < 0) {
        operator delete(v309);
      }
      if (v325 < 0) {
        operator delete(v324);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
LABEL_396:
  sub_EA8544((uint64_t)__p, (uint64_t)&v326);
  uint64_t v198 = v360;
  if ((void)v360)
  {
    uint64_t v199 = *((void *)&v360 + 1);
    char v200 = (void *)v360;
    if (*((void *)&v360 + 1) != (void)v360)
    {
      do
        uint64_t v199 = sub_4451C0(v199 - 480);
      while (v199 != v198);
      char v200 = (void *)v360;
    }
    *((void *)&v360 + 1) = v198;
    operator delete(v200);
  }
  long long v360 = *(_OWORD *)__p;
  v361 = v316;
  v316 = 0;
  __p[1] = 0;
  __p[0] = 0;
  if (SHIBYTE(v363) < 0)
  {
    operator delete((void *)v362);
    long long v362 = v317;
    v201 = __p[0];
    uint64_t v363 = v318;
    HIBYTE(v318) = 0;
    LOBYTE(v317) = 0;
    if (__p[0])
    {
      char v202 = __p[1];
      v203 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          char v202 = (void *)sub_4451C0((uint64_t)v202 - 480);
        while (v202 != v201);
        v203 = __p[0];
      }
      __p[1] = v201;
      operator delete(v203);
    }
  }
  else
  {
    long long v362 = v317;
    uint64_t v363 = v318;
  }
  sub_440F58(v239, (uint64_t *)&v360, a3, a4, a5, a8);
LABEL_409:
  char v204 = v326;
  if (v326)
  {
LABEL_410:
    uint64_t v205 = (uint64_t)v327;
    unint64_t v206 = v204;
    if (v327 != v204)
    {
      do
        uint64_t v205 = sub_4451C0(v205 - 480);
      while ((unsigned char *)v205 != v204);
      unint64_t v206 = v326;
    }
    v327 = v204;
    operator delete(v206);
  }
LABEL_414:
  sub_40F434((uint64_t)&v329);
  v343[0] = off_24397A0;
  v207 = &v345;
  do
  {
    v208 = v207 - 6;
    uint64_t v209 = *(v207 - 3);
    if (v209)
    {
      uint64_t v210 = 0;
      uint64_t v211 = 0;
      v212 = v207 - 5;
      do
      {
        if ((*(char *)(*v208 + v211) & 0x80000000) == 0)
        {
          uint64_t v213 = *v212 + v210;
          v214 = *(void **)(v213 + 8);
          if (v214)
          {
            *(void *)(v213 + 16) = v214;
            operator delete(v214);
            uint64_t v209 = *(v207 - 3);
          }
        }
        ++v211;
        v210 += 32;
      }
      while (v211 != v209);
      operator delete((void *)*(v207 - 6));
      *(v207 - 6) = (uint64_t)&unk_20E1710;
      *(v207 - 1) = 0;
      *(v207 - 4) = 0;
      *(v207 - 3) = 0;
      uint64_t *v212 = 0;
    }
    v207 -= 6;
  }
  while (v208 != &v344);
  return sub_4452A8((uint64_t)&v360);
}

void sub_43FFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  sub_14A84((uint64_t)&a61);
  sub_14A84((uint64_t)&a63);
  if (SLOBYTE(STACK[0x3F7]) < 0) {
    operator delete((void *)STACK[0x3E0]);
  }
  sub_29D7B0((uint64_t)&STACK[0x2E0]);
  sub_1A6DC((void **)&STACK[0x3F8]);
  if (a54 < 0) {
    operator delete(a49);
  }
  sub_44106C((void **)&STACK[0x518]);
  sub_40F434((uint64_t)&STACK[0x530]);
  sub_4242A0(&STACK[0x628]);
  sub_4452A8(v63 - 240);
  _Unwind_Resume(a1);
}

uint64_t sub_4404B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  unint64_t v4 = (void *)a1;
  uint64_t v5 = a4;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
  {
    unint64_t v7 = *(void *)(a1 + 64);
    uint64_t v6 = *(void *)(a1 + 72);
    if (v7 == v6) {
      goto LABEL_13;
    }
    if (*(void *)v7)
    {
      BOOL v8 = 0;
    }
    else
    {
      double v10 = *(double *)(v7 + 8);
      BOOL v8 = v10 == *(double *)a1;
      if (vabdd_f64(v10, *(double *)a1) < 2.22044605e-16) {
        BOOL v8 = 1;
      }
    }
    v7 += 48 * v8;
    if (*(void *)(v6 - 48) != ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3) - 1)
    {
LABEL_13:
      LODWORD(v14) = 0;
    }
    else
    {
      double v11 = *(double *)(v6 - 40);
      double v12 = *(double *)(a1 + 8);
      uint64_t v13 = vabdd_f64(v11, v12) < 2.22044605e-16 || v11 == v12;
      uint64_t v14 = v13 << 63 >> 63;
    }
    uint64_t result = sub_447954(v5);
    v5[1] = result;
    *(void *)(result - 136) = *v4;
    uint64_t v15 = v4[2];
    if (v4[3] != v15)
    {
      unint64_t v16 = 0;
      unint64_t v17 = v6 + 48 * (int)v14;
      long long v42 = v4;
      while (1)
      {
        uint64_t v18 = v5[1];
        char v20 = *(void **)(v18 - 112);
        unint64_t v19 = *(void *)(v18 - 104);
        if ((unint64_t)v20 < v19)
        {
          *char v20 = *(void *)(v15 + 8 * v16);
          *(void *)(v18 - 112) = v20 + 1;
          if (v7 < v17) {
            goto LABEL_38;
          }
          goto LABEL_17;
        }
        char v21 = *(void **)(v18 - 120);
        uint64_t v22 = v20 - v21;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61) {
          sub_2E00();
        }
        unint64_t v24 = v7;
        unint64_t v25 = v17;
        uint64_t v26 = v19 - (void)v21;
        if (v26 >> 2 > v23) {
          unint64_t v23 = v26 >> 2;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v23;
        }
        if (v27)
        {
          if (v27 >> 61) {
            sub_188D718();
          }
          uint64_t v28 = (char *)operator new(8 * v27);
          uint64_t v29 = (uint64_t)&v28[8 * v22];
          *(void *)uint64_t v29 = *(void *)(v15 + 8 * v16);
          uint64_t v30 = v29 + 8;
          if (v20 == v21)
          {
LABEL_35:
            *(void *)(v18 - 120) = v29;
            *(void *)(v18 - 112) = v30;
            *(void *)(v18 - 104) = &v28[8 * v27];
            uint64_t v5 = a4;
            if (!v20) {
              goto LABEL_37;
            }
LABEL_36:
            operator delete(v20);
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v28 = 0;
          uint64_t v29 = 8 * v22;
          *(void *)(8 * v22) = *(void *)(v15 + 8 * v16);
          uint64_t v30 = 8 * v22 + 8;
          if (v20 == v21) {
            goto LABEL_35;
          }
        }
        do
        {
          int v31 = *((_DWORD *)v20-- - 2);
          int v32 = *(_DWORD *)((char *)v20 + 3);
          *(_DWORD *)(v29 - 8) = v31;
          v29 -= 8;
          *(_DWORD *)(v29 + 3) = v32;
        }
        while (v20 != v21);
        char v20 = *(void **)(v18 - 120);
        *(void *)(v18 - 120) = v29;
        *(void *)(v18 - 112) = v30;
        *(void *)(v18 - 104) = &v28[8 * v27];
        uint64_t v5 = a4;
        if (v20) {
          goto LABEL_36;
        }
LABEL_37:
        unint64_t v17 = v25;
        unint64_t v7 = v24;
        unint64_t v4 = v42;
        *(void *)(v18 - 112) = v30;
        if (v7 < v17)
        {
LABEL_38:
          if (*(void *)v7 == v16)
          {
            double v33 = *(double *)(v7 + 8);
            unint64_t v34 = v5[1];
            unint64_t v35 = v5[2];
            *(double *)(v34 - 128) = v33;
            if (v34 >= v35)
            {
              uint64_t v36 = sub_447954(v5);
            }
            else
            {
              *(void *)(v34 + 128) = 0;
              *(_OWORD *)(v34 + 96) = 0u;
              *(_OWORD *)(v34 + 112) = 0u;
              *(_OWORD *)(v34 + 64) = 0u;
              *(_OWORD *)(v34 + 80) = 0u;
              *(_OWORD *)(v34 + 32) = 0u;
              *(_OWORD *)(v34 + 48) = 0u;
              *(_OWORD *)unint64_t v34 = 0u;
              *(_OWORD *)(v34 + 16) = 0u;
              uint64_t v36 = v34 + 136;
              *(_DWORD *)(v34 + 120) = 1065353216;
            }
            v7 += 48;
            v5[1] = v36;
            unint64_t v37 = v16 + 1;
            uint64_t v38 = v4[2];
            if (v16 + 1 >= (v4[3] - v38) >> 3
              || (unint64_t v39 = sub_42EBF4(a2, (void *)(v38 + 8 * v16)), *(_DWORD *)(v38 + 8 * v37) != v39)
              || (uint64_t v40 = v38 + 8 * v37, *(unsigned __int16 *)(v40 + 4) != WORD2(v39))
              || (HIWORD(v39) & 1) == (*(unsigned char *)(v40 + 6) == 0)
              || v7 < v17 && *(void *)v7 == v16)
            {
              *(double *)(v5[1] - 136) = v33;
              --v16;
            }
            else
            {
              *(double *)(v5[1] - 136) = 1.0 - v33;
            }
          }
        }
LABEL_17:
        ++v16;
        uint64_t v15 = v4[2];
        if (v16 >= (v4[3] - v15) >> 3)
        {
          uint64_t result = v5[1];
          break;
        }
      }
    }
    *(void *)(result - 128) = v4[1];
  }
  else
  {
    uint64_t result = sub_446EF4(a4, (long long *)a1);
    v5[1] = result;
  }
  return result;
}

void sub_44083C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_440850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_440864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_440878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_44088C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_4408A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_4408B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  unint64_t v4 = *(uint64_t **)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24) - (void)v4;
  if (v5 == 8)
  {
    uint64_t v6 = *v4;
    int v7 = sub_2E431C(a2, *v4);
    int64_t v8 = ((unint64_t)((v6 & 0xFF000000000000) == 0) << 61) | ((unint64_t)(v7 == 2) << 62) | ((unint64_t)(v7 == 1) << 63) | v6 & 0xFFFFFFFFFFFFLL;
    unint64_t v9 = ((unint64_t)((v6 & 0xFF000000000000) == 0) << 48) | v6 & 0xFFFFFFFFFFFFLL;
    uint64_t v10 = sub_2D5D58(v3, v6 & 0xFFFFFFFFFFFFLL);
    if (*(unsigned char *)(v3 + 7772))
    {
      uint64_t v11 = v6;
      double v12 = sub_2DB8E0(v3 + 3896, v6, 0);
      uint64_t v13 = &v12[-*(int *)v12];
      if (*(unsigned __int16 *)v13 < 5u)
      {
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v14 = *((unsigned __int16 *)v13 + 2);
        if (v14) {
          v14 += (uint64_t)&v12[*(unsigned int *)&v12[v14]];
        }
      }
      uint64_t v61 = v3;
      unint64_t v63 = HIDWORD(v9);
      uint64_t v62 = v14 + 4 * WORD2(v9) + 4 + *(unsigned int *)(v14 + 4 * WORD2(v9) + 4);
    }
    else
    {
      uint64_t v61 = v3;
      uint64_t v62 = 0;
      uint64_t v11 = v6;
      unint64_t v63 = HIDWORD(v9);
    }
    uint64_t v64 = sub_2E5C38(v61, v6 & 0xFFFFFFFFFFFFLL, 1);
    unsigned int v66 = HIDWORD(v8) & 0x40000000;
    BOOL v67 = (v8 & 0x4000000000000000) == 0;
    BOOL v68 = v8 < 0;
    BOOL v69 = !v67 || !v68;
    if (v67 && v68) {
      unsigned int v70 = 0x80000000;
    }
    else {
      unsigned int v70 = 0;
    }
    LODWORD(v79) = v6;
    DWORD1(v79) = v70 | (((v6 & 0xFF000000000000) == 0) << 29) | WORD2(v9) | v66;
    *((void *)&v79 + 1) = v10;
    *(void *)&long long v80 = v62;
    *((void *)&v80 + 1) = v64;
    *(void *)&long long v81 = v65;
    DWORD2(v81) = v6;
    WORD6(v81) = v63;
    BYTE14(v81) = (unint64_t)((v6 & 0xFF000000000000) == 0) << 48 == 0;
    if (v69) {
      int v71 = 0;
    }
    else {
      int v71 = 0x40000000;
    }
    sub_EB2444(a3, v11 | ((((unint64_t)v8 >> 33) & 0x10000000 | HIDWORD(v8) & 0xFFFFFFF | (v66 >> 1) | v71) << 32), &v79);
    return;
  }
  uint64_t v15 = v5 >> 3;
  unint64_t v95 = 0;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  if ((unint64_t)(v5 >> 3) <= 1) {
    uint64_t v15 = 1;
  }
  if ((unint64_t)v5 >= 0x10)
  {
    uint64_t v16 = 0;
    unint64_t v76 = (unsigned char *)(a2 + 7772);
    uint64_t v74 = a2 + 3896;
    uint64_t v72 = v15 - 1;
    while (1)
    {
      uint64_t v78 = v16;
      uint64_t v17 = *(void *)(*(void *)(a1 + 16) + 8 * v16);
      int v18 = sub_2E431C(v3, v17);
      uint64_t v19 = (v17 & 0xFF000000000000) == 0;
      uint64_t v20 = v18 == 1;
      uint64_t v21 = v18 == 2;
      uint64_t v22 = v3;
      uint64_t v23 = sub_2D5D58(v3, v17 & 0xFFFFFFFFFFFFLL);
      uint64_t v24 = (v19 << 48) | v17 & 0xFFFFFFFFFFFFLL;
      if (*v76)
      {
        unint64_t v25 = sub_2DB8E0(v74, v17, 0);
        uint64_t v26 = &v25[-*(int *)v25];
        if (*(unsigned __int16 *)v26 < 5u)
        {
          uint64_t v27 = 0;
        }
        else
        {
          uint64_t v27 = *((unsigned __int16 *)v26 + 2);
          if (v27) {
            v27 += (uint64_t)&v25[*(unsigned int *)&v25[v27]];
          }
        }
        uint64_t v28 = v27 + 4 * WORD2(v24) + 4 + *(unsigned int *)(v27 + 4 * WORD2(v24) + 4);
      }
      else
      {
        uint64_t v28 = 0;
      }
      uint64_t v29 = sub_2E5C38(v22, v17 & 0xFFFFFFFFFFFFLL, 1);
      uint64_t v31 = (v19 << 61) | (v21 << 62) | (v20 << 63) | v17 & 0xFFFFFFFFFFFFLL;
      int v32 = HIDWORD(v31) & 0x40000000;
      if (v31 < 0 && v32 == 0) {
        unsigned int v34 = 0x80000000;
      }
      else {
        unsigned int v34 = 0;
      }
      LODWORD(v92) = v17;
      DWORD1(v92) = v34 | (v19 << 29) | WORD2(v24) | v32;
      *((void *)&v92 + 1) = v23;
      *(void *)&long long v93 = v28;
      *((void *)&v93 + 1) = v29;
      *(void *)&long long v94 = v30;
      DWORD2(v94) = v17;
      WORD6(v94) = ((v19 << 48) | v17 & 0xFFFFFFFFFFFFuLL) >> 32;
      BYTE14(v94) = (unint64_t)((v17 & 0xFF000000000000) == 0) << 48 == 0;
      uint64_t v35 = *(void *)(*(void *)(a1 + 16) + 8 * v78 + 8);
      uint64_t v3 = v22;
      int v36 = sub_2E431C(v22, v35);
      uint64_t v37 = v36 == 1;
      uint64_t v38 = v36 == 2;
      unint64_t v39 = (int *)sub_2D5D58(v22, v35 & 0xFFFFFFFFFFFFLL);
      unint64_t v40 = ((unint64_t)((v35 & 0xFF000000000000) == 0) << 48) | v35 & 0xFFFFFFFFFFFFLL;
      if (*v76)
      {
        long long v41 = sub_2DB8E0(v74, v35, 0);
        long long v42 = &v41[-*(int *)v41];
        if (*(unsigned __int16 *)v42 < 5u)
        {
          uint64_t v43 = 0;
        }
        else
        {
          uint64_t v43 = *((unsigned __int16 *)v42 + 2);
          if (v43) {
            v43 += (uint64_t)&v41[*(unsigned int *)&v41[v43]];
          }
        }
        uint64_t v75 = v43 + 4 * WORD2(v40) + 4 + *(unsigned int *)(v43 + 4 * WORD2(v40) + 4);
      }
      else
      {
        uint64_t v75 = 0;
      }
      uint64_t v44 = sub_2E5C38(v22, v35 & 0xFFFFFFFFFFFFLL, 1);
      uint64_t v46 = v45;
      int64_t v47 = ((unint64_t)((v35 & 0xFF000000000000) == 0) << 61) | (v38 << 62) | (v37 << 63) | v35 & 0xFFFFFFFFFFFFLL;
      int v48 = HIDWORD(v47) & 0x40000000;
      if (v47 < 0 && v48 == 0) {
        unsigned int v50 = 0x80000000;
      }
      else {
        unsigned int v50 = 0;
      }
      char v51 = (unsigned int *)sub_2E4738((int **)&v92 + 1);
      sub_2E45D4(v22, v51, (uint64_t)&v95, 0, 0, 0);
      uint64_t v52 = (unsigned __int16 *)(*((void *)&v92 + 1) - (int)**((_DWORD **)&v92 + 1));
      unsigned int v53 = *v52;
      if (v53 < 0x39)
      {
        if (v53 < 0xB) {
          goto LABEL_46;
        }
      }
      else if (v52[28] && (*(unsigned char *)(*((void *)&v92 + 1) + v52[28] + 1) & 1) != 0)
      {
        int v54 = 1;
        long long v55 = (unsigned __int16 *)((char *)v39 - *v39);
        unsigned int v56 = *v55;
        if (v56 < 0x39) {
          goto LABEL_44;
        }
        goto LABEL_47;
      }
      uint64_t v57 = v52[5];
      if (v57)
      {
        int v54 = HIBYTE(*(_DWORD *)(*((void *)&v92 + 1) + v57)) & 1;
        long long v55 = (unsigned __int16 *)((char *)v39 - *v39);
        unsigned int v56 = *v55;
        if (v56 < 0x39) {
          goto LABEL_44;
        }
        goto LABEL_47;
      }
LABEL_46:
      int v54 = 0;
      long long v55 = (unsigned __int16 *)((char *)v39 - *v39);
      unsigned int v56 = *v55;
      if (v56 < 0x39)
      {
LABEL_44:
        if (v56 >= 0xB) {
          goto LABEL_49;
        }
        LODWORD(v58) = 0;
        goto LABEL_52;
      }
LABEL_47:
      if (!v55[28] || (*((unsigned char *)v39 + v55[28] + 1) & 1) == 0)
      {
LABEL_49:
        uint64_t v58 = v55[5];
        if (v58) {
          LODWORD(v58) = HIBYTE(*(unsigned int *)((char *)v39 + v58)) & 1;
        }
        goto LABEL_52;
      }
      LODWORD(v58) = 1;
LABEL_52:
      long long v79 = v92;
      long long v80 = v93;
      long long v81 = v94;
      int v82 = v35;
      int v83 = v50 | (((v35 & 0xFF000000000000) == 0) << 29) | WORD2(v40) | v48;
      uint64_t v84 = v39;
      uint64_t v85 = v75;
      uint64_t v86 = v44;
      uint64_t v87 = v46;
      int v88 = v35;
      __int16 v89 = (((unint64_t)((v35 & 0xFF000000000000) == 0) << 48) | v35 & 0xFFFFFFFFFFFFLL) >> 32;
      BOOL v90 = (unint64_t)((v35 & 0xFF000000000000) == 0) << 48 == 0;
      if (v54) {
        int v59 = 0x8000000;
      }
      else {
        int v59 = 0;
      }
      if (v58) {
        int v60 = 0x10000000;
      }
      else {
        int v60 = 0;
      }
      int v91 = v60 | v59 | ((v96 - v95 == 80) << 29);
      sub_EB258C(a3, &v79);
      uint64_t v16 = v78 + 1;
      if (v72 == v78 + 1)
      {
        if (v95)
        {
          uint64_t v96 = v95;
          operator delete(v95);
        }
        return;
      }
    }
  }
}

void sub_440EA8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(void *)(v1 - 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_440ED4(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    uint64_t v2 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
  }
  else
  {
    uint64_t v2 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
  }
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = v2;
  if ((void *)v4 != v2)
  {
    do
      uint64_t v4 = sub_4451C0(v4 - 480);
    while ((void *)v4 != v2);
    uint64_t v5 = *(void **)a1;
  }
  *(void *)(a1 + 8) = v2;
  operator delete(v5);
  return a1;
}

double sub_440F58@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  if (!a5 || sub_442338(a1, a4, a2) || sub_441988(a1, a3, (uint64_t)a2))
  {
    if (sub_DAA288(a3) && !sub_EA8E90(a2))
    {
      uint64_t v10 = sub_EA904C(a2);
      long long v12 = *(_OWORD *)(v10 + 32);
      long long v11 = *(_OWORD *)(v10 + 48);
      uint64_t v13 = *(void *)(v10 + 64);
      long long v17 = *(_OWORD *)(v10 + 16);
      long long v16 = *(_OWORD *)v10;
      uint64_t v20 = v13;
      long long v18 = v12;
      long long v19 = v11;
      *(double *)&long long v17 = *(double *)(a3 + 56) * 3.6;
      uint64_t v14 = sub_40EFE8((uint64_t)a2);
      sub_EB22B4(v14, (uint64_t)&v16);
    }
    sub_442680(a1, a3, (uint64_t)a2);
    sub_445408((void *)a6, (uint64_t)a2);
  }
  else
  {
    sub_47E0E4((_OWORD *)a6);
    *(unsigned char *)(a6 + 120) = 0;
    double result = 0.0;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
  }
  return result;
}

void **sub_44106C(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_4451C0(v3 - 480);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_4410C8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_441194(a2, (uint64_t)&__p);
  sub_43D770(a1, (uint64_t *)&__p, a3, 0x7FFFFFFFFFFFFFFFLL, 1, 1, 0, a4);
  int v7 = (void **)__p;
  if (__p)
  {
    int64_t v8 = v11;
    unint64_t v9 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      unint64_t v9 = __p;
    }
    long long v11 = v7;
    operator delete(v9);
  }
}

void sub_441180(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_441194(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    uint64_t v5 = 0;
    do
    {
      sub_4492C8(v2, &__p);
      uint64_t v6 = sub_8B3D0((void ***)a2, v5, &__p);
      if (v8 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      uint64_t v5 = v6 + 24;
      v2 += 144;
    }
    while (v2 != v3);
  }
}

void sub_441228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1A668(v14);
    _Unwind_Resume(a1);
  }
  sub_1A668(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_441260(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "max_user_distance_from_path_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 16) = 1;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "decode_name_scoring_factor");
  uint64_t v4 = sub_58070(a2, (uint64_t)__p);
  uint64_t v5 = (void *)a1;
  if (v4)
  {
    uint64_t v5 = v4 + 5;
    if (*((_DWORD *)v4 + 12) != 1) {
      uint64_t v5 = (void *)a1;
    }
  }
  *(void *)a1 = *v5;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "split_anchor_paths");
  uint64_t v6 = sub_58070(a2, (uint64_t)__p);
  if (v6)
  {
    int v7 = *((_DWORD *)v6 + 12);
    if ((v7 & 0xFFFFFFFE) == 4)
    {
      *(unsigned char *)(a1 + 16) = v7 == 4;
      if (SHIBYTE(__p[2]) < 0) {
        goto LABEL_14;
      }
      return a1;
    }
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 16) != 0;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
    return a1;
  }
LABEL_14:
  operator delete(__p[0]);
  return a1;
}

void sub_4413EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_441410(uint64_t a1)
{
  *(_OWORD *)char v8 = 0u;
  *(_OWORD *)unint64_t v9 = 0u;
  int v10 = 1065353216;
  sub_46B058();
  uint64_t v3 = v2;
  unint64_t v5 = v4;
  sub_EB23DC();
  sub_4415FC(v3, v5, v6, v7, (uint64_t)v8);
  sub_44179C(a1);
}

void sub_4415B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  long long v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
  }
  sub_436498((uint64_t)&a15);
  sub_12168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_4415FC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v11 = sub_EB2E84(a1);
        unint64_t v12 = sub_EB2E84(a3);
        if (a2 >= v11 || a4 >= v12)
        {
          if (a2 < v11 == a4 < v12) {
            return a5;
          }
        }
        else
        {
          uint64_t v13 = sub_EB2F38(a1, a2);
          if (v13 == sub_EB2F38(a3, a4)) {
            return a5;
          }
        }
        int v10 = (unsigned int *)sub_EB2F38(a1, a2);
        unint64_t v17 = *v10 | ((unint64_t)(v10[1] & 0x1FFFFFFF) << 32);
        sub_448348(a5, &v17, &v17);
        ++a2;
      }
    }
    while (a2 < sub_EB2E84(a1))
    {
      uint64_t v14 = (unsigned int *)sub_EB2F38(a1, a2);
      unint64_t v17 = *v14 | ((unint64_t)(v14[1] & 0x1FFFFFFF) << 32);
      sub_448348(a5, &v17, &v17);
      ++a2;
    }
  }
  else if (a3 && a4 < sub_EB2E84(a3))
  {
    do
    {
      uint64_t v15 = (unsigned int *)sub_EB2F38(0, a2);
      unint64_t v17 = *v15 | ((unint64_t)(v15[1] & 0x1FFFFFFF) << 32);
      sub_448348(a5, &v17, &v17);
      ++a2;
    }
    while (a4 < sub_EB2E84(a3));
  }
  return a5;
}

void sub_44179C(uint64_t a1)
{
  sub_10A42C4((uint64_t)v1, *(void **)(a1 + 24), 2, 1, 0);
}

void sub_44194C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_4364F4((void **)va);
  unint64_t v5 = *(void **)(v3 - 104);
  if (v5)
  {
    *(void *)(v3 - 96) = v5;
    operator delete(v5);
  }
  sub_10A45FC(va1);
  _Unwind_Resume(a1);
}

BOOL sub_441988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_DAA288(a2)) {
    return 1;
  }
  uint64_t v5 = sub_40EFE8(a3);
  if (v5 != sub_52058(a3)) {
    sub_441410(a1);
  }
  BOOL result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)v9);
    sub_188FC78(v9, (uint64_t)"Could not locate the user on the path", 37);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v8 < 0) {
      operator delete(__p);
    }
    if (v10 < 0) {
      operator delete(v9[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  return result;
}

void sub_441FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_442040(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9 = nullsub_1(a5);
  uint64_t v10 = sub_40EFE8(a5);
  uint64_t v11 = sub_40EFE8(a5) + 480 * a2 - v10;
  if (v11)
  {
    uint64_t v12 = v10 + v11;
    uint64_t v13 = *(void *)(v9 + 8);
    if (v10 + v11 != v13)
    {
      uint64_t v14 = 32 * (v11 >> 5);
      do
      {
        sub_4495AC(v10, (long long *)(v10 + v14));
        v10 += 480;
      }
      while (v10 + v14 != v13);
      uint64_t v12 = *(void *)(v9 + 8);
    }
    while (v12 != v10)
      uint64_t v12 = sub_4451C0(v12 - 480);
    *(void *)(v9 + 8) = v10;
  }
  if (a2)
  {
    uint64_t v15 = *(void *)(a5 + 48);
    uint64_t v16 = *(void *)(a5 + 56);
    uint64_t v17 = v15 + 24 * a2;
    if (v17 == v16)
    {
      uint64_t v19 = *(void *)(a5 + 48);
      if (v17 == v15)
      {
LABEL_22:
        *(void *)(a5 + 56) = v19;
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v18 = 24 * a2;
      uint64_t v19 = *(void *)(a5 + 48);
      do
      {
        uint64_t v21 = *(void **)v15;
        if (*(void *)v15)
        {
          *(void *)(v15 + 8) = v21;
          operator delete(v21);
          *(void *)(v15 + 8) = 0;
          *(void *)(v15 + 16) = 0;
        }
        uint64_t v20 = (void *)(v15 + v18);
        *(_OWORD *)uint64_t v15 = *(_OWORD *)(v15 + 24 * a2);
        *(void *)(v15 + 16) = *(void *)(v15 + v18 + 16);
        *uint64_t v20 = 0;
        v20[1] = 0;
        v20[2] = 0;
        v15 += 24;
        v19 += 24;
      }
      while (v15 + v18 != v16);
      uint64_t v17 = *(void *)(a5 + 56);
      if (v17 == v19) {
        goto LABEL_22;
      }
    }
    uint64_t v22 = v17;
    do
    {
      uint64_t v24 = *(void **)(v22 - 24);
      v22 -= 24;
      uint64_t v23 = v24;
      if (v24)
      {
        *(void *)(v17 - 16) = v23;
        operator delete(v23);
      }
      uint64_t v17 = v22;
    }
    while (v22 != v19);
    goto LABEL_22;
  }
LABEL_23:
  uint64_t v25 = *(void *)nullsub_1(a5);
  uint64_t v26 = *(void ***)(a5 + 48);
  if (a3 + 1 == sub_EB2E84(v25))
  {
    unint64_t v27 = sub_EB2A48(v25);
    uint64_t v28 = (long long *)sub_EB2ABC(v25);
    sub_EB2444(v25, v27, v28);
    if (!a3) {
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v29 = (char *)sub_3C80F8(v25);
    uint64_t v30 = sub_3C80F8(v25);
    sub_EB3FE8(v25, v29, (char *)(v30 + 104 * a3), 1);
    if (!a3) {
      goto LABEL_30;
    }
  }
  int v32 = (char *)*v26;
  uint64_t v31 = (char *)v26[1];
  double v33 = (char *)*v26 + 4 * a3;
  int64_t v34 = v31 - v33;
  if (v31 != v33) {
    memmove(*v26, v33, v31 - v33);
  }
  v26[1] = &v32[v34];
LABEL_30:
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  char v44 = 0;
  uint64_t v45 = 0x3FF0000000000000;
  char v46 = 1;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  char v49 = 0;
  int v50 = 36000;
  char v51 = 0;
  unsigned int v41 = a4;
  if (sub_EB29DC(v25) && *(_DWORD *)sub_486CB4(v25) < a4) {
    unsigned int v41 = *(_DWORD *)sub_486CB4(v25);
  }
  sub_EB22B4(v25, (uint64_t)&v41);
  if (*(unsigned char *)(a5 + 120) && a2)
  {
    uint64_t v35 = *(void *)(a5 + 96);
    uint64_t v36 = *(void *)(a5 + 104);
    uint64_t v37 = v35 + 24 * a2;
    if (v37 != v36)
    {
      uint64_t v38 = 0;
      do
      {
        uint64_t v39 = v35 + v38;
        *(unsigned char *)uint64_t v39 = *(unsigned char *)(v37 + v38);
        uint64_t v40 = *(void *)(v37 + v38 + 16);
        *(void *)(v39 + 8) = *(void *)(v37 + v38 + 8);
        *(void *)(v39 + 16) = v40;
        v38 += 24;
      }
      while (v37 + v38 != v36);
      v35 += v38;
    }
    *(void *)(a5 + 104) = v35;
  }
}

BOOL sub_442338(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  uint64_t v5 = a2;
  unint64_t v7 = (void *)nullsub_1(a3);
  uint64_t v8 = v7[1] - *v7;
  if (!v8)
  {
LABEL_26:
    BOOL result = sub_723EC(3u);
    if (result)
    {
      sub_6BAC((uint64_t)v31);
      sub_188FC78(v31, (uint64_t)"Could not locate the user offset on the path", 44);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v30 < 0) {
        operator delete(__p);
      }
      if (v32 < 0) {
        operator delete((void *)v31[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      return 0;
    }
    return result;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * (v8 >> 5);
  while (1)
  {
    uint64_t v12 = sub_EA8DF4(a3, v9);
    if (v5 <= sub_EB40C0(v12)) {
      break;
    }
    uint64_t v11 = v5 - sub_EB40C0(v12);
LABEL_6:
    ++v9;
    uint64_t v5 = v11;
    if (v9 == v10) {
      goto LABEL_26;
    }
  }
  uint64_t v13 = sub_EB2E84(v12);
  if (!v13)
  {
    uint64_t v11 = v5;
    goto LABEL_6;
  }
  uint64_t v14 = v13;
  unint64_t v15 = 0;
  while (1)
  {
    uint64_t v16 = sub_EB3020(v12, v15);
    uint64_t v11 = v5 - v16;
    if (v5 <= v16) {
      break;
    }
    ++v15;
    v5 -= v16;
    if (v14 == v15) {
      goto LABEL_6;
    }
  }
  int v17 = *(_DWORD *)sub_EB22DC(v12);
  if (v15) {
    int v18 = 0;
  }
  else {
    int v18 = v17;
  }
  uint64_t v19 = sub_EB2F38(v12, v15);
  unsigned int v20 = 0;
  uint64_t v21 = *(int **)(v19 + 8);
  uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 >= 9u)
  {
    uint64_t v23 = v22[4];
    if (v23)
    {
      unsigned int v20 = 0;
      if (v5 != 0x7FFFFFFFFFFFFFFFLL)
      {
        unsigned int v24 = *(int *)((char *)v21 + v23);
        if (v24)
        {
          double v25 = (double)v5 / (double)v24;
          double v26 = 1000000000.0;
          if (v25 <= 1.0) {
            double v26 = v25 * 1000000000.0;
          }
          BOOL v27 = v25 < 0.0;
          double v28 = 0.0;
          if (!v27) {
            double v28 = v26;
          }
          unsigned int v20 = vcvtad_u64_f64(v28);
        }
      }
    }
    else
    {
      unsigned int v20 = 0;
    }
  }
  sub_442040(a1, v9, v15, v20 + v18, (uint64_t)a3);
  return 1;
}

void sub_442634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_442680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_3750CC(*(void **)(a1 + 24));
  uint64_t v6 = sub_40EFE8(a3);
  uint64_t result = sub_52058(a3);
  if (v6 != result)
  {
    uint64_t v81 = a2;
    int v82 = (void **)(a3 + 72);
    uint64_t v79 = a2 + 96;
    uint64_t v80 = v5;
    do
    {
      unint64_t v11 = *(void *)(a3 + 80);
      if (v11 >= *(void *)(a3 + 88))
      {
        uint64_t v12 = sub_448AF0(v82);
      }
      else
      {
        *(_OWORD *)(v11 + 8) = 0u;
        *(_OWORD *)(v11 + 24) = 0u;
        *(_OWORD *)(v11 + 40) = 0u;
        *(_OWORD *)(v11 + 56) = 0u;
        *(_OWORD *)(v11 + 88) = 0u;
        *(_OWORD *)(v11 + 72) = 0u;
        *(void *)(v11 + 152) = 0;
        *(_OWORD *)(v11 + 136) = 0u;
        *(_OWORD *)(v11 + 120) = 0u;
        *(_OWORD *)(v11 + 104) = 0u;
        *(void *)unint64_t v11 = -1;
        *(_DWORD *)(v11 + 8) = 0x7FFFFFFF;
        *(void *)(v11 + 16) = -1;
        *(void *)(v11 + 24) = -1;
        *(void *)(v11 + 32) = 0x7FFFFFFFFFFFFFFFLL;
        *(_DWORD *)(v11 + 48) = -1935635296;
        *(void *)(v11 + 56) = 0;
        *(_DWORD *)(v11 + 63) = 0;
        *(void *)(v11 + 80) = 0;
        *(void *)(v11 + 88) = 0;
        *(_DWORD *)(v11 + 96) = 0;
        *(void *)(v11 + 72) = 0;
        *(unsigned char *)(v11 + 100) = 100;
        *(void *)(v11 + 151) = 0;
        *(_OWORD *)(v11 + 136) = 0u;
        *(_OWORD *)(v11 + 120) = 0u;
        *(_OWORD *)(v11 + 104) = 0u;
        uint64_t v12 = (char *)(v11 + 160);
      }
      *(void *)(a3 + 80) = v12;
      *((_DWORD *)v12 - 2) = 2 * (v6 != sub_40EFE8(a3));
      uint64_t v13 = *(int **)(sub_EB2AA4(v6) + 8);
      uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v14 >= 9u && (uint64_t v15 = v14[4]) != 0) {
        uint64_t v16 = *(unsigned int *)((char *)v13 + v15);
      }
      else {
        uint64_t v16 = 0;
      }
      LODWORD(v17) = *(_DWORD *)sub_EB22DC(v6);
      double v18 = (double)v17 / 1000000000.0 * (double)v16;
      if (v18 >= 0.0)
      {
        if (v18 >= 4.50359963e15) {
          goto LABEL_20;
        }
        uint64_t v19 = (uint64_t)(v18 + v18) + 1;
      }
      else
      {
        if (v18 <= -4.50359963e15) {
          goto LABEL_20;
        }
        uint64_t v19 = (uint64_t)(v18 + v18);
        if (v19 >= 1) {
          --v19;
        }
      }
      double v18 = (double)(v19 >> 1);
LABEL_20:
      uint64_t v20 = (uint64_t)v18;
      uint64_t v21 = (unsigned int *)sub_EB2AA4(v6);
      unint64_t v22 = *v21 | ((unint64_t)(v21[1] & 0x1FFFFFFF) << 32);
      int v23 = *(_DWORD *)(sub_EB2AA4(v6) + 4);
      double v25 = (char *)*((void *)v12 - 6);
      unint64_t v24 = *((void *)v12 - 5);
      if ((unint64_t)v25 >= v24)
      {
        BOOL v27 = (char *)*((void *)v12 - 7);
        uint64_t v28 = (v25 - v27) >> 6;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 58) {
          goto LABEL_75;
        }
        uint64_t v30 = v24 - (void)v27;
        if (v30 >> 5 > v29) {
          unint64_t v29 = v30 >> 5;
        }
        BOOL v31 = (unint64_t)v30 >= 0x7FFFFFFFFFFFFFC0;
        unint64_t v32 = 0x3FFFFFFFFFFFFFFLL;
        if (!v31) {
          unint64_t v32 = v29;
        }
        if (v32 >> 58) {
          goto LABEL_76;
        }
        __int16 v33 = (v23 & 0x20000000) == 0;
        unint64_t v34 = v32 << 6;
        uint64_t v35 = (char *)operator new(v32 << 6);
        uint64_t v36 = &v35[64 * v28];
        *(void *)uint64_t v36 = 0;
        *((void *)v36 + 1) = -1;
        *((_DWORD *)v36 + 4) = 0x7FFFFFFF;
        *((void *)v36 + 3) = v20;
        *((void *)v36 + 4) = v22;
        *((_WORD *)v36 + 20) = v33 | 0x100;
        *((_WORD *)v36 + 21) = 257;
        *((void *)v36 + 6) = 0;
        v36[56] = 0;
        if (v25 == v27)
        {
          a2 = v81;
          double v26 = v36 + 64;
          *((void *)v12 - 7) = v36;
          *((void *)v12 - 6) = v36 + 64;
          *((void *)v12 - 5) = &v35[v34];
          if (v27) {
            goto LABEL_32;
          }
        }
        else
        {
          uint64_t v37 = &v35[64 * v28];
          a2 = v81;
          do
          {
            uint64_t v38 = v37 - 64;
            long long v39 = *((_OWORD *)v25 - 4);
            long long v40 = *((_OWORD *)v25 - 3);
            *((void *)v37 - 4) = *((void *)v25 - 4);
            *((_OWORD *)v37 - 4) = v39;
            *((_OWORD *)v37 - 3) = v40;
            *((_WORD *)v37 - 12) = *((_WORD *)v25 - 12);
            *((_WORD *)v37 - 11) = *((_WORD *)v25 - 11);
            uint64_t v41 = *((void *)v25 - 2);
            *(v37 - 8) = *(v25 - 8);
            *((void *)v37 - 2) = v41;
            v25 -= 64;
            v37 -= 64;
          }
          while (v25 != v27);
          double v26 = v36 + 64;
          *((void *)v12 - 7) = v38;
          *((void *)v12 - 6) = v36 + 64;
          *((void *)v12 - 5) = &v35[v34];
          if (v27) {
LABEL_32:
          }
            operator delete(v27);
        }
        uint64_t v5 = v80;
        goto LABEL_34;
      }
      *(void *)double v25 = 0;
      *((void *)v25 + 1) = -1;
      *((_DWORD *)v25 + 4) = 0x7FFFFFFF;
      *((void *)v25 + 3) = v20;
      *((void *)v25 + 4) = v22;
      *((_WORD *)v25 + 20) = ((v23 & 0x20000000) == 0) | 0x100;
      *((_WORD *)v25 + 21) = 257;
      *((void *)v25 + 6) = 0;
      double v26 = v25 + 64;
      v25[56] = 0;
LABEL_34:
      *((void *)v12 - 6) = v26;
      uint64_t v42 = (unsigned int *)sub_EB2AA4(v6);
      *((void *)v12 - 20) = sub_3BE8C8(v5, v42, 0);
      *((_DWORD *)v12 - 38) = v43;
      if (v6 == sub_40EFE8(a3) && sub_DAA288(a2))
      {
        char v44 = v12 - 160;
        *(_OWORD *)char v44 = *(_OWORD *)a2;
        long long v45 = *(_OWORD *)(a2 + 16);
        long long v46 = *(_OWORD *)(a2 + 32);
        long long v47 = *(_OWORD *)(a2 + 48);
        *(_DWORD *)(v44 + 63) = *(_DWORD *)(a2 + 63);
        *((_OWORD *)v44 + 2) = v46;
        *((_OWORD *)v44 + 3) = v47;
        *((_OWORD *)v44 + 1) = v45;
        if (v12 - 160 != (char *)a2) {
          sub_147D0((void *)v12 - 11, *(char **)(a2 + 72), *(char **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
        }
        int v48 = *(_DWORD *)v79;
        *(v12 - 60) = *(unsigned char *)(v79 + 4);
        *((_DWORD *)v12 - 16) = v48;
      }
      unint64_t v49 = *(void *)(a3 + 80);
      if (v49 >= *(void *)(a3 + 88))
      {
        int v50 = sub_448AF0(v82);
      }
      else
      {
        *(_OWORD *)(v49 + 8) = 0u;
        *(_OWORD *)(v49 + 24) = 0u;
        *(_OWORD *)(v49 + 40) = 0u;
        *(_OWORD *)(v49 + 56) = 0u;
        *(_OWORD *)(v49 + 88) = 0u;
        *(_OWORD *)(v49 + 72) = 0u;
        *(void *)(v49 + 152) = 0;
        *(_OWORD *)(v49 + 136) = 0u;
        *(_OWORD *)(v49 + 120) = 0u;
        *(_OWORD *)(v49 + 104) = 0u;
        *(void *)unint64_t v49 = -1;
        *(_DWORD *)(v49 + 8) = 0x7FFFFFFF;
        *(void *)(v49 + 16) = -1;
        *(void *)(v49 + 24) = -1;
        *(void *)(v49 + 32) = 0x7FFFFFFFFFFFFFFFLL;
        *(_DWORD *)(v49 + 48) = -1935635296;
        *(void *)(v49 + 56) = 0;
        *(_DWORD *)(v49 + 63) = 0;
        *(void *)(v49 + 80) = 0;
        *(void *)(v49 + 88) = 0;
        *(_DWORD *)(v49 + 96) = 0;
        *(void *)(v49 + 72) = 0;
        *(unsigned char *)(v49 + 100) = 100;
        *(void *)(v49 + 151) = 0;
        *(_OWORD *)(v49 + 136) = 0u;
        *(_OWORD *)(v49 + 120) = 0u;
        *(_OWORD *)(v49 + 104) = 0u;
        int v50 = (char *)(v49 + 160);
      }
      *(void *)(a3 + 80) = v50;
      if (v6 == sub_52058(a3) - 480) {
        int v51 = 1;
      }
      else {
        int v51 = 2;
      }
      *((_DWORD *)v50 - 2) = v51;
      uint64_t v52 = *(int **)(sub_EB2ABC(v6) + 8);
      unsigned int v53 = (unsigned __int16 *)((char *)v52 - *v52);
      if (*v53 >= 9u && (uint64_t v54 = v53[4]) != 0) {
        uint64_t v55 = *(unsigned int *)((char *)v52 + v54);
      }
      else {
        uint64_t v55 = 0;
      }
      LODWORD(v56) = *(_DWORD *)sub_486CB4(v6);
      double v57 = (double)v56 / 1000000000.0 * (double)v55;
      if (v57 >= 0.0)
      {
        if (v57 >= 4.50359963e15) {
          goto LABEL_57;
        }
        uint64_t v58 = (uint64_t)(v57 + v57) + 1;
      }
      else
      {
        if (v57 <= -4.50359963e15) {
          goto LABEL_57;
        }
        uint64_t v58 = (uint64_t)(v57 + v57);
        if (v58 >= 1) {
          --v58;
        }
      }
      double v57 = (double)(v58 >> 1);
LABEL_57:
      uint64_t v59 = (uint64_t)v57;
      int v60 = (unsigned int *)sub_EB2ABC(v6);
      unint64_t v61 = *v60 | ((unint64_t)(v60[1] & 0x1FFFFFFF) << 32);
      int v62 = *(_DWORD *)(sub_EB2ABC(v6) + 4);
      uint64_t v64 = (char *)*((void *)v50 - 6);
      unint64_t v63 = *((void *)v50 - 5);
      if ((unint64_t)v64 >= v63)
      {
        uint64_t v65 = (char *)*((void *)v50 - 7);
        uint64_t v66 = (v64 - v65) >> 6;
        unint64_t v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 58) {
LABEL_75:
        }
          sub_2E00();
        uint64_t v68 = v63 - (void)v65;
        if (v68 >> 5 > v67) {
          unint64_t v67 = v68 >> 5;
        }
        BOOL v31 = (unint64_t)v68 >= 0x7FFFFFFFFFFFFFC0;
        unint64_t v69 = 0x3FFFFFFFFFFFFFFLL;
        if (!v31) {
          unint64_t v69 = v67;
        }
        if (v69 >> 58) {
LABEL_76:
        }
          sub_188D718();
        __int16 v70 = (v62 & 0x20000000) == 0;
        unint64_t v71 = v69 << 6;
        uint64_t v72 = (char *)operator new(v69 << 6);
        unint64_t v73 = &v72[64 * v66];
        *(void *)unint64_t v73 = 0;
        *((void *)v73 + 1) = -1;
        *((_DWORD *)v73 + 4) = 0x7FFFFFFF;
        *((void *)v73 + 3) = v59;
        *((void *)v73 + 4) = v61;
        *((_WORD *)v73 + 20) = v70 | 0x100;
        *((_WORD *)v73 + 21) = 257;
        *((void *)v73 + 6) = 0;
        v73[56] = 0;
        if (v64 == v65)
        {
          a2 = v81;
          uint64_t v8 = v73 + 64;
          *((void *)v50 - 7) = v73;
          *((void *)v50 - 6) = v73 + 64;
          *((void *)v50 - 5) = &v72[v71];
          if (v65) {
            goto LABEL_68;
          }
        }
        else
        {
          uint64_t v74 = &v72[64 * v66];
          a2 = v81;
          do
          {
            uint64_t v75 = v74 - 64;
            long long v76 = *((_OWORD *)v64 - 4);
            long long v77 = *((_OWORD *)v64 - 3);
            *((void *)v74 - 4) = *((void *)v64 - 4);
            *((_OWORD *)v74 - 4) = v76;
            *((_OWORD *)v74 - 3) = v77;
            *((_WORD *)v74 - 12) = *((_WORD *)v64 - 12);
            *((_WORD *)v74 - 11) = *((_WORD *)v64 - 11);
            uint64_t v78 = *((void *)v64 - 2);
            *(v74 - 8) = *(v64 - 8);
            *((void *)v74 - 2) = v78;
            v64 -= 64;
            v74 -= 64;
          }
          while (v64 != v65);
          uint64_t v8 = v73 + 64;
          *((void *)v50 - 7) = v75;
          *((void *)v50 - 6) = v73 + 64;
          *((void *)v50 - 5) = &v72[v71];
          if (v65) {
LABEL_68:
          }
            operator delete(v65);
        }
        uint64_t v5 = v80;
        goto LABEL_4;
      }
      *(void *)uint64_t v64 = 0;
      *((void *)v64 + 1) = -1;
      *((_DWORD *)v64 + 4) = 0x7FFFFFFF;
      *((void *)v64 + 3) = v59;
      *((void *)v64 + 4) = v61;
      *((_WORD *)v64 + 20) = ((v62 & 0x20000000) == 0) | 0x100;
      *((_WORD *)v64 + 21) = 257;
      *((void *)v64 + 6) = 0;
      uint64_t v8 = v64 + 64;
      v64[56] = 0;
LABEL_4:
      *((void *)v50 - 6) = v8;
      uint64_t v9 = (unsigned int *)sub_EB2ABC(v6);
      *((void *)v50 - 20) = sub_3BE8C8(v5, v9, 1);
      *((_DWORD *)v50 - 38) = v10;
      v6 += 480;
      uint64_t result = sub_52058(a3);
    }
    while (v6 != result);
  }
  return result;
}

void sub_442DE8(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  if (a2 == (unsigned int *)-1)
  {
    sub_47E0E4((_OWORD *)a5);
    goto LABEL_22;
  }
  uint64_t v8 = a2;
  int v10 = (uint64_t *)sub_377754(*(void **)(a1 + 24));
  __p[0] = (void *)-1;
  LODWORD(__p[1]) = 0x7FFFFFFF;
  unint64_t v11 = sub_4461D4((uint64_t)(v10 + 2), 1u, 0);
  uint64_t v12 = &v11[-*(int *)v11];
  if (*(unsigned __int16 *)v12 >= 5u)
  {
    uint64_t v13 = *((unsigned __int16 *)v12 + 2);
    if (v13)
    {
      uint64_t v14 = &v11[v13 + *(unsigned int *)&v11[v13]];
      uint64_t v15 = &v14[-*(int *)v14];
      if (*(unsigned __int16 *)v15 >= 5u)
      {
        uint64_t v16 = *((unsigned __int16 *)v15 + 2);
        if (v16)
        {
          if (v14[v16]) {
            uint64_t v8 = (unsigned int *)nullsub_1(v8);
          }
        }
      }
    }
  }
  unint64_t v17 = sub_445B68(v10, v8, (uint64_t)__p);
  if (v17 == -1
    || (!v18 ? (BOOL v19 = HIDWORD(v17) == 0) : (BOOL v19 = 1),
        (unint64_t v20 = __ROR8__(v17, 32), v19) ? (v21 = 0xFFFFFFFF00000000) : (v21 = v20),
        v21 <= 0xFFFFFFFEFFFFFFFFLL ? (BOOL v22 = v21 == 0) : (BOOL v22 = 1),
        v22))
  {
    sub_47E0E4((_OWORD *)a5);
LABEL_22:
    *(unsigned char *)(a5 + 120) = 0;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
    return;
  }
  sub_47E0E4(__p);
  char v42 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  sub_1064F10(*(void **)(a1 + 24), v21, (uint64_t)v29);
  int v23 = __p[0];
  if (__p[0])
  {
    unint64_t v24 = __p[1];
    double v25 = __p[0];
    if (__p[1] != __p[0])
    {
      do
        unint64_t v24 = (void *)sub_4451C0((uint64_t)v24 - 480);
      while (v24 != v23);
      double v25 = __p[0];
    }
    __p[1] = v23;
    operator delete(v25);
  }
  *(_OWORD *)__n128 __p = *(_OWORD *)v29;
  uint64_t v34 = v30;
  v29[1] = 0;
  uint64_t v30 = 0;
  v29[0] = 0;
  if (SHIBYTE(v36) < 0)
  {
    operator delete((void *)v35);
    double v26 = v29[0];
    long long v35 = v31;
    uint64_t v36 = v32;
    HIBYTE(v32) = 0;
    LOBYTE(v31) = 0;
    if (v29[0])
    {
      BOOL v27 = v29[1];
      uint64_t v28 = v29[0];
      if (v29[1] != v29[0])
      {
        do
          BOOL v27 = (void *)sub_4451C0((uint64_t)v27 - 480);
        while (v27 != v26);
        uint64_t v28 = v29[0];
      }
      v29[1] = v26;
      operator delete(v28);
    }
  }
  else
  {
    long long v35 = v31;
    uint64_t v36 = v32;
  }
  sub_1065698(__p, (uint64_t)v29);
  if (v42)
  {
    if (v40[0])
    {
      v40[1] = v40[0];
      operator delete(v40[0]);
    }
    *(_OWORD *)long long v40 = *(_OWORD *)v29;
    uint64_t v41 = v30;
  }
  else
  {
    *(_OWORD *)long long v40 = *(_OWORD *)v29;
    uint64_t v41 = v30;
    char v42 = 1;
  }
  sub_440F58(a1, (uint64_t *)__p, a3, 0x7FFFFFFFFFFFFFFFLL, a4, a5);
  sub_4452A8((uint64_t)__p);
}

void sub_4430D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4452A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_4430EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4452A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_443100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4452A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_443118(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_29DDA8((char **)a1, (long long **)a2);
  sub_29E004((char *)v4 + 24, (long long *)(a2 + 24));
  if (*(char *)(a2 + 119) < 0)
  {
    sub_4200((unsigned char *)(a1 + 96), *(void **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v5;
  }
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  uint64_t v6 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  sub_44324C(a1 + 168, a2 + 168);
  return a1;
}

void sub_4431F4(_Unwind_Exception *a1)
{
  sub_29D7B0(v2);
  sub_1A6DC(v1);
  _Unwind_Resume(a1);
}

void sub_443238(_Unwind_Exception *a1)
{
  sub_1A6DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_44324C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_443390(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_443368(_Unwind_Exception *a1)
{
  sub_29E2C4(v1);
  _Unwind_Resume(a1);
}

void sub_44337C(_Unwind_Exception *a1)
{
  sub_29E2C4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_443390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v39, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  sub_4437B0(a1, v10, a3, (uint64_t)v39);
  float v25 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v26 = *(float *)(a1 + 32);
  if (!v11 || (float)(v26 * (float)v11) < v25)
  {
    BOOL v28 = 1;
    if (v11 >= 3) {
      BOOL v28 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v11);
    unint64_t v30 = vcvtps_u32_f32(v25 / v26);
    if (v29 <= v30) {
      size_t prime = v30;
    }
    else {
      size_t prime = v29;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v32) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v32)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v32 < 3uLL || (uint8x8_t v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (prime <= v33) {
        size_t prime = v33;
      }
      if (prime < *(void *)&v32) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v36 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        BOOL v27 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v27) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        BOOL v27 = *(void **)(*(void *)a1 + 8 * v10);
        if (v27) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v36 & v10;
      BOOL v27 = *(void **)(*(void *)a1 + 8 * (v36 & v10));
      if (v27) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *(void *)v39[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v39[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v39[0])
    {
      unint64_t v37 = *(void *)(*(void *)v39[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v37 >= v11) {
          v37 %= v11;
        }
      }
      else
      {
        v37 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v37) = v39[0];
    }
    goto LABEL_89;
  }
  BOOL v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v27) {
    goto LABEL_78;
  }
LABEL_54:
  *(void *)v39[0] = *v27;
  *BOOL v27 = v39[0];
LABEL_89:
  uint64_t v14 = (uint64_t *)v39[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_443798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7206C((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_4437B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  unint64_t v9 = v8;
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v8 + 16, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  *((void *)v9 + 5) = 0;
  *((void *)v9 + 6) = 0;
  *((void *)v9 + 7) = 0;
  uint64_t result = sub_44388C(v9 + 40, *(void *)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 5);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_443854(_Unwind_Exception *a1)
{
  sub_7206C(v1);
  _Unwind_Resume(a1);
}

void sub_443868(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  sub_7206C(v1);
  _Unwind_Resume(a1);
}

char *sub_44388C(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int8x8_t v5 = result;
    if (a4 >> 59) {
      sub_2E00();
    }
    uint64_t result = (char *)operator new(32 * a4);
    unint64_t v8 = result;
    *int8x8_t v5 = result;
    v5[1] = result;
    v5[2] = &result[32 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = &v8[v9];
        uint64_t v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          uint64_t result = (char *)sub_4200(result, *(void **)v10, *(void *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v10;
          *((void *)result + 2) = *(void *)(v10 + 16);
        }
        *(void *)&v8[v9 + 24] = *(void *)(a2 + v9 + 24);
        v9 += 32;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_44396C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_443980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 32)
  {
    if (*(char *)(v10 + v11 - 9) < 0) {
      operator delete(*(void **)(v10 + v11 - 32));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_3D68C4(&a9);
  _Unwind_Resume(a1);
}

void **sub_4439BC(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        int8x8_t v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_443A30(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v2 = *(void **)(a1 + 96);
    if (v2)
    {
      *(void *)(a1 + 104) = v2;
      operator delete(v2);
    }
    *(unsigned char *)(a1 + 120) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 80);
    int8x8_t v5 = *(void **)(a1 + 72);
    if (v4 != v3)
    {
      do
      {
        BOOL v6 = *(void **)(v4 - 32);
        if (v6)
        {
          *(void *)(v4 - 24) = v6;
          operator delete(v6);
        }
        uint64_t v7 = *(void **)(v4 - 56);
        if (v7)
        {
          *(void *)(v4 - 48) = v7;
          operator delete(v7);
        }
        unint64_t v8 = *(void **)(v4 - 88);
        if (v8)
        {
          *(void *)(v4 - 80) = v8;
          operator delete(v8);
        }
        v4 -= 160;
      }
      while (v4 != v3);
      int8x8_t v5 = *(void **)(a1 + 72);
    }
    *(void *)(a1 + 80) = v3;
    operator delete(v5);
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void **)(a1 + 48);
    if (v10 != v9)
    {
      uint64_t v12 = *(void *)(a1 + 56);
      do
      {
        uint64_t v14 = *(void **)(v12 - 24);
        v12 -= 24;
        uint64_t v13 = v14;
        if (v14)
        {
          *(void *)(v10 - 16) = v13;
          operator delete(v13);
        }
        uint64_t v10 = v12;
      }
      while (v12 != v9);
      uint64_t v11 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v9;
    operator delete(v11);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    char v15 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
  }
  else
  {
    char v15 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
  }
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v18 = v15;
  if ((void *)v17 != v15)
  {
    do
      uint64_t v17 = sub_405F44(v17 - 472);
    while ((void *)v17 != v15);
    uint64_t v18 = *(void **)a1;
  }
  *(void *)(a1 + 8) = v15;
  operator delete(v18);
  return a1;
}

void sub_443B90(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[13];
  if (v3)
  {
    do
    {
      unint64_t v8 = (void *)*v3;
      uint64_t v9 = (void *)v3[3];
      if (v9)
      {
        v3[4] = v9;
        operator delete(v9);
      }
      operator delete(v3);
      uint64_t v3 = v8;
    }
    while (v8);
  }
  uint64_t v4 = (void *)a2[11];
  a2[11] = 0;
  if (v4) {
    operator delete(v4);
  }
  int8x8_t v5 = (void *)a2[8];
  if (v5)
  {
    a2[9] = v5;
    operator delete(v5);
  }
  BOOL v6 = (void *)a2[5];
  if (v6)
  {
    a2[6] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a2[2];
  if (v7)
  {
    a2[3] = v7;
    operator delete(v7);
  }
}

void *sub_443C44(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_443D6C(a1, *(void *)a2, *(void *)(a2 + 8), 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  uint64_t v4 = a1 + 3;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_4200(v4, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    a1[5] = *(void *)(a2 + 40);
    *(_OWORD *)uint64_t v4 = v5;
  }
  sub_44440C(a1 + 6, (uint64_t *)(a2 + 48));
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  sub_4445E8((uint64_t)(a1 + 9), *(void *)(a2 + 72), *(void *)(a2 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 5));
  sub_444A04((uint64_t)(a1 + 12), a2 + 96);
  return a1;
}

void sub_443D20(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20A8534((uint64_t)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_443D3C(_Unwind_Exception *a1)
{
  sub_36094(v2);
  sub_405E28(v1);
  _Unwind_Resume(a1);
}

void sub_443D58(_Unwind_Exception *a1)
{
  sub_405E28(v1);
  _Unwind_Resume(a1);
}

void *sub_443D6C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0x8AD8F2FBA93869) {
      sub_2E00();
    }
    uint64_t result = operator new(472 * a4);
    unint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = &result[59 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t result = sub_443EFC((char *)&v8[v9 / 8], (long long *)(a2 + v9));
        v9 += 472;
      }
      while (a2 + v9 != a3);
      unint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_443E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_443E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 472)
    sub_405F44(v10 - 472 + v11);
  *(void *)(v9 + 8) = v10;
  sub_443E74(&a9);
  _Unwind_Resume(a1);
}

void ***sub_443E74(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_405F44(v4 - 472);
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

char *sub_443EFC(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
    *((void *)__dst + 3) = 0;
    *((void *)__dst + 4) = 0;
    *((void *)__dst + 5) = 0;
    BOOL v6 = (unsigned char *)*((void *)a2 + 3);
    unint64_t v8 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v8 - v6;
    if (v8 == v6) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
    *((void *)__dst + 3) = 0;
    *((void *)__dst + 4) = 0;
    *((void *)__dst + 5) = 0;
    BOOL v6 = (unsigned char *)*((void *)a2 + 3);
    long long v5 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v5 - v6;
    if (v5 == v6) {
      goto LABEL_7;
    }
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v7 >> 3)) >= 0x2E8BA2E8BA2E8BBLL) {
    sub_2E00();
  }
  uint64_t v9 = (char *)operator new(v7);
  *((void *)__dst + 3) = v9;
  *((void *)__dst + 4) = v9;
  uint64_t v10 = &v9[8 * (v7 >> 3)];
  *((void *)__dst + 5) = v10;
  memcpy(v9, v6, v7);
  *((void *)__dst + 4) = v10;
LABEL_7:
  long long v11 = a2[3];
  long long v12 = a2[4];
  long long v13 = a2[5];
  *(_OWORD *)(__dst + 94) = *(long long *)((char *)a2 + 94);
  *((_OWORD *)__dst + 4) = v12;
  *((_OWORD *)__dst + 5) = v13;
  *((_OWORD *)__dst + 3) = v11;
  sub_4441C0((void *)__dst + 14, (uint64_t *)a2 + 14);
  *((void *)__dst + 17) = 0;
  *((void *)__dst + 18) = 0;
  *((void *)__dst + 19) = 0;
  char v15 = (unsigned char *)*((void *)a2 + 17);
  uint64_t v14 = (unsigned char *)*((void *)a2 + 18);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v16 >> 3)) >= 0x492492492492493) {
      sub_2E00();
    }
    uint64_t v17 = (char *)operator new(v16);
    *((void *)__dst + 17) = v17;
    *((void *)__dst + 18) = v17;
    uint64_t v18 = &v17[8 * (v16 >> 3)];
    *((void *)__dst + 19) = v18;
    memcpy(v17, v15, v16 - 7);
    *((void *)__dst + 18) = v18;
  }
  *((void *)__dst + 20) = 0;
  *((void *)__dst + 21) = 0;
  *((void *)__dst + 22) = 0;
  uint64_t v20 = (unsigned char *)*((void *)a2 + 20);
  uint64_t v19 = (unsigned char *)*((void *)a2 + 21);
  int64_t v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0) {
      sub_2E00();
    }
    uint64_t v22 = (char *)operator new(v19 - v20);
    *((void *)__dst + 20) = v22;
    *((void *)__dst + 21) = v22;
    uint64_t v23 = &v22[8 * (v21 >> 3)];
    *((void *)__dst + 22) = v23;
    memcpy(v22, v20, v21);
    *((void *)__dst + 21) = v23;
  }
  sub_3B1DC8((uint64_t)(__dst + 184), (long long *)((char *)a2 + 184));
  long long v24 = a2[21];
  *((_OWORD *)__dst + 20) = a2[20];
  *((_OWORD *)__dst + 21) = v24;
  long long v25 = a2[22];
  long long v26 = a2[23];
  long long v27 = a2[25];
  *((_OWORD *)__dst + 24) = a2[24];
  *((_OWORD *)__dst + 25) = v27;
  *((_OWORD *)__dst + 22) = v25;
  *((_OWORD *)__dst + 23) = v26;
  long long v28 = a2[26];
  long long v29 = a2[27];
  long long v30 = a2[28];
  *(void *)(__dst + 463) = *(void *)((char *)a2 + 463);
  *((_OWORD *)__dst + 27) = v29;
  *((_OWORD *)__dst + 28) = v30;
  *((_OWORD *)__dst + 26) = v28;
  return __dst;
}

void sub_444144(_Unwind_Exception *a1)
{
  int64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 168) = v7;
    operator delete(v7);
  }
  unint64_t v8 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 144) = v8;
    operator delete(v8);
  }
  sub_4439BC(v3);
  uint64_t v9 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v9;
    operator delete(v9);
    if (*(char *)(v1 + 23) < 0)
    {
LABEL_7:
      operator delete(*(void **)v1);
      _Unwind_Resume(a1);
    }
  }
  else if (*(char *)(v1 + 23) < 0)
  {
    goto LABEL_7;
  }
  _Unwind_Resume(a1);
}

void *sub_4441C0(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 3);
    if (v7 >= 0x492492492492493) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[56 * v7];
    a1[1] = sub_4442A4(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_444278(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20A8584((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_4442A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    int64_t v6 = (void *)(a4 + 32);
    do
    {
      long long v8 = *(_OWORD *)(v5 + 16);
      *((_OWORD *)v6 - 2) = *(_OWORD *)v5;
      *((_OWORD *)v6 - 1) = v8;
      v6[1] = 0;
      v6[2] = 0;
      *int64_t v6 = 0;
      uint64_t v10 = *(unsigned char **)(v5 + 32);
      uint64_t v9 = *(unsigned char **)(v5 + 40);
      int64_t v11 = v9 - v10;
      if (v9 != v10)
      {
        if (v11 < 0) {
          sub_2E00();
        }
        long long v12 = (char *)operator new(v9 - v10);
        *int64_t v6 = v12;
        v6[1] = v12;
        unint64_t v7 = &v12[16 * (v11 >> 4)];
        v6[2] = v7;
        memcpy(v12, v10, v11);
        v6[1] = v7;
      }
      v6 += 7;
      v5 += 56;
    }
    while (v5 != a3);
    return v6 - 4;
  }
  return (void *)a4;
}

void sub_444380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_4443A8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_4443A8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(void *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 56;
    }
  }
  return a1;
}

void *sub_44440C(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    long long v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_4444E4(v3, v4, v5, v8);
  }
  return a1;
}

void sub_4444B8(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_20A63BC((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_4444E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      int64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          sub_2E00();
        }
        int64_t v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        unint64_t v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_4445B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4445C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_46B68((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_4445E8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x19999999999999ALL) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(160 * a4);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = result + 160 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_44479C(v8 + v9, a2 + v9);
        v9 += 160;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_4446A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_4446BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_20A85E8(v10 + v11, v10);
  }
  *(void *)(v9 + 8) = v10;
  sub_4446E4(&a9);
  _Unwind_Resume(a1);
}

void ***sub_4446E4(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = (void *)*((void *)v4 - 4);
          if (v6)
          {
            *((void *)v4 - 3) = v6;
            operator delete(v6);
          }
          unint64_t v7 = (void *)*((void *)v4 - 7);
          if (v7)
          {
            *((void *)v4 - 6) = v7;
            operator delete(v7);
          }
          uint64_t v8 = (void *)*((void *)v4 - 11);
          if (v8)
          {
            *((void *)v4 - 10) = v8;
            operator delete(v8);
          }
          v4 -= 160;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_44479C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 72);
  unint64_t v7 = *(unsigned char **)(a2 + 80);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      sub_2E00();
    }
    uint64_t v10 = (char *)operator new(v7 - v8);
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = v10;
    uint64_t v11 = &v10[4 * (v9 >> 2)];
    *(void *)(a1 + 88) = v11;
    memcpy(v10, v8, v9);
    *(void *)(a1 + 80) = v11;
  }
  int v12 = *(_DWORD *)(a2 + 96);
  char v13 = *(unsigned char *)(a2 + 100);
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 100) = v13;
  *(_DWORD *)(a1 + 96) = v12;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v14 = *(void *)(a2 + 104);
  uint64_t v15 = *(void *)(a2 + 112);
  uint64_t v16 = v15 - v14;
  if (v15 != v14)
  {
    if (v16 < 0) {
      sub_2E00();
    }
    uint64_t v17 = (char *)operator new(v15 - v14);
    uint64_t v18 = 0;
    *(void *)(a1 + 104) = v17;
    *(void *)(a1 + 112) = v17;
    *(void *)(a1 + 120) = &v17[64 * (v16 >> 6)];
    do
    {
      uint64_t v19 = v14 + v18;
      uint64_t v20 = &v17[v18];
      long long v21 = *(_OWORD *)(v14 + v18);
      long long v22 = *(_OWORD *)(v14 + v18 + 16);
      *((void *)v20 + 4) = *(void *)(v14 + v18 + 32);
      *(_OWORD *)uint64_t v20 = v21;
      *((_OWORD *)v20 + 1) = v22;
      *((_WORD *)v20 + 20) = *(_WORD *)(v14 + v18 + 40);
      *((_WORD *)v20 + 21) = *(_WORD *)(v14 + v18 + 42);
      uint64_t v23 = *(void *)(v14 + v18 + 48);
      v20[56] = *(unsigned char *)(v14 + v18 + 56);
      *((void *)v20 + 6) = v23;
      v18 += 64;
    }
    while (v19 + 64 != v15);
    *(void *)(a1 + 112) = &v17[v18];
  }
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  uint64_t v24 = *(void *)(a2 + 128);
  uint64_t v25 = *(void *)(a2 + 136);
  uint64_t v26 = v25 - v24;
  if (v25 != v24)
  {
    if (v26 < 0) {
      sub_2E00();
    }
    long long v27 = (char *)operator new(v25 - v24);
    uint64_t v28 = 0;
    *(void *)(a1 + 128) = v27;
    *(void *)(a1 + 136) = v27;
    *(void *)(a1 + 144) = &v27[64 * (v26 >> 6)];
    do
    {
      uint64_t v29 = v24 + v28;
      long long v30 = &v27[v28];
      long long v31 = *(_OWORD *)(v24 + v28);
      long long v32 = *(_OWORD *)(v24 + v28 + 16);
      *((void *)v30 + 4) = *(void *)(v24 + v28 + 32);
      *(_OWORD *)long long v30 = v31;
      *((_OWORD *)v30 + 1) = v32;
      *((_WORD *)v30 + 20) = *(_WORD *)(v24 + v28 + 40);
      *((_WORD *)v30 + 21) = *(_WORD *)(v24 + v28 + 42);
      uint64_t v33 = *(void *)(v24 + v28 + 48);
      v30[56] = *(unsigned char *)(v24 + v28 + 56);
      *((void *)v30 + 6) = v33;
      v28 += 64;
    }
    while (v29 + 64 != v25);
    *(void *)(a1 + 136) = &v27[v28];
  }
  int v34 = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 155) = *(_DWORD *)(a2 + 155);
  *(_DWORD *)(a1 + 152) = v34;
  return a1;
}

void sub_444994(_Unwind_Exception *exception_object)
{
  long long v6 = *v4;
  if (*v4)
  {
    v1[17] = v6;
    operator delete(v6);
    unint64_t v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      uint64_t v8 = *v2;
      if (!*v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    unint64_t v7 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[14] = v7;
  operator delete(v7);
  uint64_t v8 = *v2;
  if (!*v2) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[10] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_4449F4()
{
  if (!*v0) {
    JUMPOUT(0x4449B8);
  }
  JUMPOUT(0x4449B0);
}

uint64_t sub_444A04(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a2 + 24);
  *(unsigned char *)(a1 + 24) = v3;
  if (v3)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    long long v5 = *(const void **)a2;
    uint64_t v4 = *(void *)(a2 + 8);
    int64_t v6 = v4 - *(void *)a2;
    if (v4 != *(void *)a2)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v6 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
        sub_2E00();
      }
      unint64_t v7 = (char *)operator new(v6);
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = &v7[8 * (v6 >> 3)];
      size_t v8 = 24 * ((v6 - 24) / 0x18uLL) + 24;
      memcpy(v7, v5, v8);
      *(void *)(a1 + 8) = &v7[v8];
    }
  }
  return a1;
}

void sub_444AD4(void *a1)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  sub_58CC(a1);
}

void *sub_444AF0(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_444C18(a1, *(void *)a2, *(void *)(a2 + 8), 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  uint64_t v4 = a1 + 3;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_4200(v4, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    a1[5] = *(void *)(a2 + 40);
    *(_OWORD *)uint64_t v4 = v5;
  }
  sub_44440C(a1 + 6, (uint64_t *)(a2 + 48));
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  sub_4445E8((uint64_t)(a1 + 9), *(void *)(a2 + 72), *(void *)(a2 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 5));
  sub_444A04((uint64_t)(a1 + 12), a2 + 96);
  return a1;
}

void sub_444BCC(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20A8534((uint64_t)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_444BE8(_Unwind_Exception *a1)
{
  sub_36094(v2);
  sub_405E28(v1);
  _Unwind_Resume(a1);
}

void sub_444C04(_Unwind_Exception *a1)
{
  sub_405E28(v1);
  _Unwind_Resume(a1);
}

void *sub_444C18(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0x8AD8F2FBA93869) {
      sub_2E00();
    }
    uint64_t result = operator new(472 * a4);
    size_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = &result[59 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t result = sub_444D20((char *)&v8[v9 / 8], (long long *)(a2 + v9));
        v9 += 472;
      }
      while (a2 + v9 != a3);
      size_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_444CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_444CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 472)
    sub_405F44(v10 - 472 + v11);
  *(void *)(v9 + 8) = v10;
  sub_443E74(&a9);
  _Unwind_Resume(a1);
}

char *sub_444D20(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
    *((void *)__dst + 3) = 0;
    *((void *)__dst + 4) = 0;
    *((void *)__dst + 5) = 0;
    int64_t v6 = (unsigned char *)*((void *)a2 + 3);
    size_t v8 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v8 - v6;
    if (v8 == v6) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
    *((void *)__dst + 3) = 0;
    *((void *)__dst + 4) = 0;
    *((void *)__dst + 5) = 0;
    int64_t v6 = (unsigned char *)*((void *)a2 + 3);
    long long v5 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v5 - v6;
    if (v5 == v6) {
      goto LABEL_7;
    }
  }
  if (0xAAAAAAAAAAAAAAABLL * (v7 >> 5) >= 0x2AAAAAAAAAAAAABLL) {
    sub_2E00();
  }
  uint64_t v9 = (char *)operator new(v7);
  *((void *)__dst + 3) = v9;
  *((void *)__dst + 4) = v9;
  uint64_t v10 = &v9[32 * (v7 >> 5)];
  *((void *)__dst + 5) = v10;
  memcpy(v9, v6, v7 - 4);
  *((void *)__dst + 4) = v10;
LABEL_7:
  long long v11 = a2[3];
  long long v12 = a2[4];
  long long v13 = a2[5];
  *(_OWORD *)(__dst + 94) = *(long long *)((char *)a2 + 94);
  *((_OWORD *)__dst + 4) = v12;
  *((_OWORD *)__dst + 5) = v13;
  *((_OWORD *)__dst + 3) = v11;
  sub_444FD8((void *)__dst + 14, (uint64_t *)a2 + 14);
  *((void *)__dst + 17) = 0;
  *((void *)__dst + 18) = 0;
  *((void *)__dst + 19) = 0;
  uint64_t v15 = (unsigned char *)*((void *)a2 + 17);
  uint64_t v14 = (unsigned char *)*((void *)a2 + 18);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v16 >> 3)) >= 0x492492492492493) {
      sub_2E00();
    }
    uint64_t v17 = (char *)operator new(v16);
    *((void *)__dst + 17) = v17;
    *((void *)__dst + 18) = v17;
    uint64_t v18 = &v17[8 * (v16 >> 3)];
    *((void *)__dst + 19) = v18;
    memcpy(v17, v15, v16 - 7);
    *((void *)__dst + 18) = v18;
  }
  *((void *)__dst + 20) = 0;
  *((void *)__dst + 21) = 0;
  *((void *)__dst + 22) = 0;
  uint64_t v20 = (unsigned char *)*((void *)a2 + 20);
  uint64_t v19 = (unsigned char *)*((void *)a2 + 21);
  int64_t v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0) {
      sub_2E00();
    }
    long long v22 = (char *)operator new(v19 - v20);
    *((void *)__dst + 20) = v22;
    *((void *)__dst + 21) = v22;
    uint64_t v23 = &v22[8 * (v21 >> 3)];
    *((void *)__dst + 22) = v23;
    memcpy(v22, v20, v21);
    *((void *)__dst + 21) = v23;
  }
  sub_3B1DC8((uint64_t)(__dst + 184), (long long *)((char *)a2 + 184));
  long long v24 = a2[21];
  *((_OWORD *)__dst + 20) = a2[20];
  *((_OWORD *)__dst + 21) = v24;
  long long v25 = a2[22];
  long long v26 = a2[23];
  long long v27 = a2[25];
  *((_OWORD *)__dst + 24) = a2[24];
  *((_OWORD *)__dst + 25) = v27;
  *((_OWORD *)__dst + 22) = v25;
  *((_OWORD *)__dst + 23) = v26;
  long long v28 = a2[26];
  long long v29 = a2[27];
  long long v30 = a2[28];
  *(void *)(__dst + 463) = *(void *)((char *)a2 + 463);
  *((_OWORD *)__dst + 27) = v29;
  *((_OWORD *)__dst + 28) = v30;
  *((_OWORD *)__dst + 26) = v28;
  return __dst;
}

void sub_444F5C(_Unwind_Exception *a1)
{
  int64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 168) = v7;
    operator delete(v7);
  }
  size_t v8 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 144) = v8;
    operator delete(v8);
  }
  sub_4439BC(v3);
  uint64_t v9 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v9;
    operator delete(v9);
    if (*(char *)(v1 + 23) < 0)
    {
LABEL_7:
      operator delete(*(void **)v1);
      _Unwind_Resume(a1);
    }
  }
  else if (*(char *)(v1 + 23) < 0)
  {
    goto LABEL_7;
  }
  _Unwind_Resume(a1);
}

void *sub_444FD8(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 3);
    if (v7 >= 0x492492492492493) {
      sub_2E00();
    }
    size_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[56 * v7];
    a1[1] = sub_4450BC(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_445090(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20A8584((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_4450BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    int64_t v6 = (void *)(a4 + 32);
    do
    {
      long long v8 = *(_OWORD *)(v5 + 16);
      *((_OWORD *)v6 - 2) = *(_OWORD *)v5;
      *((_OWORD *)v6 - 1) = v8;
      v6[1] = 0;
      v6[2] = 0;
      *int64_t v6 = 0;
      uint64_t v10 = *(unsigned char **)(v5 + 32);
      uint64_t v9 = *(unsigned char **)(v5 + 40);
      int64_t v11 = v9 - v10;
      if (v9 != v10)
      {
        if (v11 < 0) {
          sub_2E00();
        }
        long long v12 = (char *)operator new(v9 - v10);
        *int64_t v6 = v12;
        v6[1] = v12;
        unint64_t v7 = &v12[16 * (v11 >> 4)];
        v6[2] = v7;
        memcpy(v12, v10, v11);
        v6[1] = v7;
      }
      v6 += 7;
      v5 += 56;
    }
    while (v5 != a3);
    return v6 - 4;
  }
  return (void *)a4;
}

void sub_445198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_4443A8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_4451C0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 256);
  if (v2)
  {
    *(void *)(a1 + 264) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 232);
  if (v3)
  {
    *(void *)(a1 + 240) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 168);
  if (v4)
  {
    *(void *)(a1 + 176) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 144);
  if (v5)
  {
    *(void *)(a1 + 152) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 128);
    long long v8 = *(void **)(a1 + 120);
    if (v7 != v6)
    {
      do
      {
        uint64_t v9 = *(void **)(v7 - 24);
        if (v9)
        {
          *(void *)(v7 - 16) = v9;
          operator delete(v9);
        }
        v7 -= 56;
      }
      while (v7 != v6);
      long long v8 = *(void **)(a1 + 120);
    }
    *(void *)(a1 + 128) = v6;
    operator delete(v8);
  }
  uint64_t v10 = *(void **)(a1 + 24);
  if (v10)
  {
    *(void *)(a1 + 32) = v10;
    operator delete(v10);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_4452A8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v2 = *(void **)(a1 + 96);
    if (v2)
    {
      *(void *)(a1 + 104) = v2;
      operator delete(v2);
    }
    *(unsigned char *)(a1 + 120) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 80);
    uint64_t v5 = *(void **)(a1 + 72);
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = *(void **)(v4 - 32);
        if (v6)
        {
          *(void *)(v4 - 24) = v6;
          operator delete(v6);
        }
        uint64_t v7 = *(void **)(v4 - 56);
        if (v7)
        {
          *(void *)(v4 - 48) = v7;
          operator delete(v7);
        }
        long long v8 = *(void **)(v4 - 88);
        if (v8)
        {
          *(void *)(v4 - 80) = v8;
          operator delete(v8);
        }
        v4 -= 160;
      }
      while (v4 != v3);
      uint64_t v5 = *(void **)(a1 + 72);
    }
    *(void *)(a1 + 80) = v3;
    operator delete(v5);
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 56);
    int64_t v11 = *(void **)(a1 + 48);
    if (v10 != v9)
    {
      uint64_t v12 = *(void *)(a1 + 56);
      do
      {
        uint64_t v14 = *(void **)(v12 - 24);
        v12 -= 24;
        long long v13 = v14;
        if (v14)
        {
          *(void *)(v10 - 16) = v13;
          operator delete(v13);
        }
        uint64_t v10 = v12;
      }
      while (v12 != v9);
      int64_t v11 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v9;
    operator delete(v11);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    uint64_t v15 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
  }
  else
  {
    uint64_t v15 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
  }
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v18 = v15;
  if ((void *)v17 != v15)
  {
    do
      uint64_t v17 = sub_4451C0(v17 - 480);
    while ((void *)v17 != v15);
    uint64_t v18 = *(void **)a1;
  }
  *(void *)(a1 + 8) = v15;
  operator delete(v18);
  return a1;
}

void *sub_445408(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_445528(a1, *(void *)a2, *(void *)(a2 + 8), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5));
  uint64_t v4 = a1 + 3;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_4200(v4, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    a1[5] = *(void *)(a2 + 40);
    *(_OWORD *)uint64_t v4 = v5;
  }
  sub_44440C(a1 + 6, (uint64_t *)(a2 + 48));
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  sub_4445E8((uint64_t)(a1 + 9), *(void *)(a2 + 72), *(void *)(a2 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 5));
  sub_444A04((uint64_t)(a1 + 12), a2 + 96);
  return a1;
}

void sub_4454DC(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20A8648((uint64_t)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_4454F8(_Unwind_Exception *a1)
{
  sub_36094(v2);
  sub_440ED4(v1);
  _Unwind_Resume(a1);
}

void sub_445514(_Unwind_Exception *a1)
{
  sub_440ED4(v1);
  _Unwind_Resume(a1);
}

void *sub_445528(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0x88888888888889) {
      sub_2E00();
    }
    uint64_t result = operator new(480 * a4);
    long long v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = &result[60 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t result = sub_4456B4((char *)&v8[v9 / 8], (long long *)(a2 + v9));
        v9 += 480;
      }
      while (a2 + v9 != a3);
      long long v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_4455E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_4455FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 480)
    sub_4451C0(v10 - 480 + v11);
  *(void *)(v9 + 8) = v10;
  sub_44562C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_44562C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_4451C0(v4 - 480);
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

char *sub_4456B4(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
    *((void *)__dst + 3) = 0;
    *((void *)__dst + 4) = 0;
    *((void *)__dst + 5) = 0;
    uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    long long v8 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v8 - v6;
    if (v8 == v6) {
      goto LABEL_7;
    }
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
    *((void *)__dst + 3) = 0;
    *((void *)__dst + 4) = 0;
    *((void *)__dst + 5) = 0;
    uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    long long v5 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v5 - v6;
    if (v5 == v6) {
      goto LABEL_7;
    }
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (v7 >> 3)) >= 0x276276276276277) {
    sub_2E00();
  }
  uint64_t v9 = (char *)operator new(v7);
  *((void *)__dst + 3) = v9;
  *((void *)__dst + 4) = v9;
  uint64_t v10 = &v9[8 * (v7 >> 3)];
  *((void *)__dst + 5) = v10;
  memcpy(v9, v6, v7 - 4);
  *((void *)__dst + 4) = v10;
LABEL_7:
  *((_OWORD *)__dst + 3) = a2[3];
  long long v11 = a2[4];
  long long v12 = a2[5];
  long long v13 = a2[6];
  *(void *)(__dst + 110) = *(void *)((char *)a2 + 110);
  *((_OWORD *)__dst + 5) = v12;
  *((_OWORD *)__dst + 6) = v13;
  *((_OWORD *)__dst + 4) = v11;
  sub_445980((void *)__dst + 15, (uint64_t *)a2 + 15);
  *((void *)__dst + 18) = 0;
  *((void *)__dst + 19) = 0;
  *((void *)__dst + 20) = 0;
  uint64_t v15 = (unsigned char *)*((void *)a2 + 18);
  uint64_t v14 = (unsigned char *)*((void *)a2 + 19);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v16 >> 3)) >= 0x492492492492493) {
      sub_2E00();
    }
    uint64_t v17 = (char *)operator new(v16);
    *((void *)__dst + 18) = v17;
    *((void *)__dst + 19) = v17;
    uint64_t v18 = &v17[8 * (v16 >> 3)];
    *((void *)__dst + 20) = v18;
    memcpy(v17, v15, v16 - 7);
    *((void *)__dst + 19) = v18;
  }
  *((void *)__dst + 21) = 0;
  *((void *)__dst + 22) = 0;
  *((void *)__dst + 23) = 0;
  uint64_t v20 = (unsigned char *)*((void *)a2 + 21);
  uint64_t v19 = (unsigned char *)*((void *)a2 + 22);
  int64_t v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0) {
      sub_2E00();
    }
    long long v22 = (char *)operator new(v19 - v20);
    *((void *)__dst + 21) = v22;
    *((void *)__dst + 22) = v22;
    uint64_t v23 = &v22[8 * (v21 >> 3)];
    *((void *)__dst + 23) = v23;
    memcpy(v22, v20, v21);
    *((void *)__dst + 22) = v23;
  }
  sub_3B1DC8((uint64_t)(__dst + 192), a2 + 12);
  long long v24 = *(long long *)((char *)a2 + 344);
  *(_OWORD *)(__dst + 328) = *(long long *)((char *)a2 + 328);
  *(_OWORD *)(__dst + 344) = v24;
  long long v25 = *(long long *)((char *)a2 + 360);
  long long v26 = *(long long *)((char *)a2 + 376);
  long long v27 = *(long long *)((char *)a2 + 408);
  *(_OWORD *)(__dst + 392) = *(long long *)((char *)a2 + 392);
  *(_OWORD *)(__dst + 408) = v27;
  *(_OWORD *)(__dst + 360) = v25;
  *(_OWORD *)(__dst + 376) = v26;
  long long v28 = *(long long *)((char *)a2 + 424);
  long long v29 = *(long long *)((char *)a2 + 440);
  long long v30 = *(long long *)((char *)a2 + 456);
  *(void *)(__dst + 471) = *(void *)((char *)a2 + 471);
  *(_OWORD *)(__dst + 440) = v29;
  *(_OWORD *)(__dst + 456) = v30;
  *(_OWORD *)(__dst + 424) = v28;
  return __dst;
}

void sub_445904(_Unwind_Exception *a1)
{
  int64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 176) = v7;
    operator delete(v7);
  }
  long long v8 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 152) = v8;
    operator delete(v8);
  }
  sub_4439BC(v3);
  uint64_t v9 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v9;
    operator delete(v9);
    if (*(char *)(v1 + 23) < 0)
    {
LABEL_7:
      operator delete(*(void **)v1);
      _Unwind_Resume(a1);
    }
  }
  else if (*(char *)(v1 + 23) < 0)
  {
    goto LABEL_7;
  }
  _Unwind_Resume(a1);
}

void *sub_445980(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 3);
    if (v7 >= 0x492492492492493) {
      sub_2E00();
    }
    long long v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[56 * v7];
    a1[1] = sub_445A64(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_445A38(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20A8584((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_445A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    int64_t v6 = (void *)(a4 + 32);
    do
    {
      long long v8 = *(_OWORD *)(v5 + 16);
      *((_OWORD *)v6 - 2) = *(_OWORD *)v5;
      *((_OWORD *)v6 - 1) = v8;
      v6[1] = 0;
      v6[2] = 0;
      *int64_t v6 = 0;
      uint64_t v10 = *(unsigned char **)(v5 + 32);
      uint64_t v9 = *(unsigned char **)(v5 + 40);
      int64_t v11 = v9 - v10;
      if (v9 != v10)
      {
        if (v11 < 0) {
          sub_2E00();
        }
        long long v12 = (char *)operator new(v9 - v10);
        *int64_t v6 = v12;
        v6[1] = v12;
        unint64_t v7 = &v12[16 * (v11 >> 4)];
        v6[2] = v7;
        memcpy(v12, v10, v11);
        v6[1] = v7;
      }
      v6 += 7;
      v5 += 56;
    }
    while (v5 != a3);
    return v6 - 4;
  }
  return (void *)a4;
}

void sub_445B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_4443A8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_445B68(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  if (!*a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v46 = a3;
  LODWORD(__key) = 1;
  *(_OWORD *)__n128 __p = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  sub_2A3640(__p, (int *)&__key, 1uLL);
  uint64_t v5 = *((void *)&v45 + 1);
  if (!*((void *)&v45 + 1)) {
    goto LABEL_28;
  }
  while (1)
  {
    unsigned int v6 = *(_DWORD *)(*(void *)((char *)__p[1] + (((unint64_t)v45 >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * (v45 & 0x3FF));
    *(void *)&long long v45 = v45 + 1;
    *((void *)&v45 + 1) = v5 - 1;
    if ((unint64_t)v45 >= 0x800)
    {
      operator delete(*(void **)__p[1]);
      __p[1] = (char *)__p[1] + 8;
      *(void *)&long long v45 = v45 - 1024;
    }
    unint64_t v7 = (unsigned int *)sub_2AB884(*a1, 39, v6, 1);
    if (v8)
    {
      uint64_t v9 = (int *)((char *)v7 + *v7);
      uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
      if (*v10 >= 7u)
      {
        uint64_t v11 = v10[3];
        if (v11)
        {
          long long v12 = (unsigned int *)((char *)v9 + v11);
          uint64_t v13 = *v12;
          __key = a2;
          uint64_t v14 = bsearch(&__key, (char *)v12 + v13 + 4, *(unsigned int *)((char *)v12 + v13), 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_2A4AF4);
          if (v14)
          {
            unint64_t v15 = v14[1];
            if (HIDWORD(v15)) {
              break;
            }
          }
        }
      }
    }
    unsigned int v16 = sub_511FC(v6);
    unsigned int v17 = v16 >> 1;
    unsigned int v18 = sub_511FC(v6) >> 1;
    if (v16 > 0x1D || v18 > v17)
    {
      __key = 0;
      uint64_t v41 = 0;
      char v42 = 0;
    }
    else
    {
      unsigned int v20 = 2 * (v17 - (sub_511FC(v6) >> 1));
      unsigned int v21 = v20 + 2;
      uint64_t v22 = (1 << (v20 + 2));
      uint64_t v23 = (unsigned int *)operator new(4 * v22);
      __key = v23;
      char v42 = &v23[v22];
      bzero(v23, 4 * v22);
      uint64_t v41 = &v23[v22];
      unsigned int v24 = v6 << v21;
      if (v21 < 3) {
        goto LABEL_45;
      }
      int32x4_t v25 = vdupq_n_s32(v24);
      int32x4_t v26 = vdupq_n_s32(v24 + 4);
      long long v27 = (int32x4_t *)(v23 + 4);
      uint64_t v28 = v22 & 0x55555550;
      int32x4_t v29 = (int32x4_t)xmmword_20B5E90;
      v30.i64[0] = 0x800000008;
      v30.i64[1] = 0x800000008;
      do
      {
        v27[-1] = vaddq_s32(v25, v29);
        *long long v27 = vaddq_s32(v26, v29);
        int32x4_t v29 = vaddq_s32(v29, v30);
        v27 += 2;
        v28 -= 8;
      }
      while (v28);
      if ((v22 & 0x55555550) == 0)
      {
LABEL_45:
        do
        {
          *v23++ = v24++;
          LODWORD(v22) = v22 - 1;
        }
        while (v22);
      }
    }
    v39[0] = (uint64_t)&v46;
    v39[1] = (uint64_t)a1;
    sub_445F58(&__key, __p, v39);
    if (__key)
    {
      uint64_t v41 = __key;
      operator delete(__key);
    }
    uint64_t v5 = *((void *)&v45 + 1);
    if (!*((void *)&v45 + 1)) {
      goto LABEL_28;
    }
  }
  if (sub_2AB7E4(*a1)) {
    unint64_t v31 = v15 & 0xFFFFFFFF00000000 | (v15 >> 4);
  }
  else {
LABEL_28:
  }
    unint64_t v31 = 0xFFFFFFFFLL;
  long long v32 = (void **)__p[1];
  uint64_t v33 = (void **)v44;
  *((void *)&v45 + 1) = 0;
  unint64_t v34 = v44 - (unint64_t)__p[1];
  if ((unint64_t)v44 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v32);
      uint64_t v33 = (void **)v44;
      long long v32 = (void **)((char *)__p[1] + 8);
      __p[1] = v32;
      unint64_t v34 = v44 - (void)v32;
    }
    while ((void)v44 - (void)v32 > 0x10uLL);
  }
  unint64_t v35 = v34 >> 3;
  if (v35 == 1)
  {
    uint64_t v36 = 512;
  }
  else
  {
    if (v35 != 2) {
      goto LABEL_36;
    }
    uint64_t v36 = 1024;
  }
  *(void *)&long long v45 = v36;
LABEL_36:
  if (v32 != v33)
  {
    do
    {
      unint64_t v37 = *v32++;
      operator delete(v37);
    }
    while (v32 != v33);
    if ((void *)v44 != __p[1]) {
      *(void *)&long long v44 = v44 + (((unint64_t)__p[1] - v44 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return v31;
}

void sub_445EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2A4918((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_445EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19)
{
  if (a19 == a18)
  {
    unsigned int v20 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned int v20 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void sub_445F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
  {
    operator delete(__p);
    sub_2A4918((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_2A4918((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void *sub_445F58(unsigned int **a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    uint64_t v6 = *a3;
    unint64_t v7 = (uint64_t *)a3[1];
    do
    {
      unsigned int v8 = *v4;
      if (sub_44606C(v6, *v4))
      {
        uint64_t v9 = (unsigned int *)sub_2AB884(*v7, 39, v8, 1);
        if (v10)
        {
          uint64_t v11 = (int *)((char *)v9 + *v9);
          long long v12 = (unsigned __int16 *)((char *)v11 - *v11);
          if (*v12 >= 5u)
          {
            uint64_t v13 = v12[2];
            if (v13)
            {
              if (*((unsigned char *)v11 + v13))
              {
                uint64_t v14 = a2[2];
                uint64_t v15 = a2[1];
                if (v14 == v15) {
                  uint64_t v16 = 0;
                }
                else {
                  uint64_t v16 = ((v14 - v15) << 7) - 1;
                }
                uint64_t v17 = a2[5];
                unint64_t v18 = v17 + a2[4];
                if (v16 == v18)
                {
                  sub_2A4348((uint64_t)a2);
                  uint64_t v15 = a2[1];
                  uint64_t v17 = a2[5];
                  unint64_t v18 = a2[4] + v17;
                }
                *(_DWORD *)(*(void *)(v15 + ((v18 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v18 & 0x3FF)) = *v4;
                a2[5] = v17 + 1;
              }
            }
          }
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
  return a2;
}

uint64_t sub_44606C(uint64_t a1, unsigned int a2)
{
  unsigned int v21 = a2;
  if (!a2 || **(_DWORD **)a1 == -1 && *(_DWORD *)(*(void *)a1 + 4) == -1) {
    return 1;
  }
  uint64_t v4 = sub_73724(0x26u);
  unsigned int v5 = sub_511FC(a2);
  unsigned int v7 = *((_DWORD *)v4 + 1);
  int v6 = *((_DWORD *)v4 + 2);
  unsigned int v8 = operator new(4uLL);
  __n128 __p = v8;
  *unsigned int v8 = a2;
  uint64_t v9 = v8 + 1;
  if (v7 < v5 >> 1) {
    int v10 = 1;
  }
  else {
    int v10 = v6;
  }
  uint64_t v23 = v9;
  unsigned int v24 = v9;
  sub_29D0((unsigned int **)&__p, v10, &v19);
  if (__p)
  {
    uint64_t v23 = __p;
    operator delete(__p);
  }
  sub_745A4((uint64_t)&v19, &v21);
  uint64_t v11 = v19;
  long long v12 = v20;
  if (v19 == v20)
  {
    uint64_t v16 = 0;
    if (!v19) {
      return v16;
    }
LABEL_19:
    unsigned int v20 = v11;
    operator delete(v11);
    return v16;
  }
  uint64_t v13 = *(_DWORD **)a1;
  uint64_t v14 = v19 + 1;
  do
  {
    unsigned int v25 = *(v14 - 1);
    sub_383CC(&v25, (uint64_t)&__p);
    uint64_t v15 = sub_34554(&__p, v13);
    uint64_t v16 = v15;
    if (v14 == v12) {
      int v17 = 1;
    }
    else {
      int v17 = v15;
    }
    ++v14;
  }
  while (v17 != 1);
  uint64_t v11 = v19;
  if (v19) {
    goto LABEL_19;
  }
  return v16;
}

void sub_4461A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_4461D4(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 3664) == a2)
    {
      unsigned int v7 = 152;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 3688) == a2)
    {
      unsigned int v7 = 153;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 3712) == a2)
    {
      unsigned int v7 = 154;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 3736) == a2)
    {
      unsigned int v7 = 155;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      uint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 3720);
    unint64_t v12 = *(void *)(a1 + 3696);
    unint64_t v13 = *(void *)(a1 + 3672);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 3672);
    }
    int v15 = 152;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 3696);
    }
    int v17 = 153;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 3720);
    }
    unint64_t v19 = *(void *)(a1 + 3744);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 154;
    }
    unsigned int v21 = (unsigned int *)sub_2AB884(v5, 38, a2, 1);
    unsigned int v22 = 155;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_446364(v24);
  return 0;
}

uint64_t sub_446364(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = sub_736EC(0x26u);
      int v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_4464BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

void *sub_446590(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0x276276276276277) {
      sub_2E00();
    }
    unsigned int v7 = (char *)operator new(104 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[104 * a3];
    a1[1] = sub_446668(v4, a2, a2 + 104 * a3, (uint64_t)v7);
  }
  return a1;
}

void sub_44663C(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20A8698((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_446668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = a4 + 72;
    do
    {
      *(_OWORD *)(v6 - 72) = *(_OWORD *)v5;
      long long v9 = *(_OWORD *)(v5 + 16);
      long long v10 = *(_OWORD *)(v5 + 32);
      long long v11 = *(_OWORD *)(v5 + 48);
      *(_DWORD *)(v6 - 9) = *(_DWORD *)(v5 + 63);
      *(_OWORD *)(v6 - 24) = v11;
      *(_OWORD *)(v6 - 40) = v10;
      *(_OWORD *)(v6 - 56) = v9;
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      *(void *)uint64_t v6 = 0;
      unint64_t v13 = *(unsigned char **)(v5 + 72);
      unint64_t v12 = *(unsigned char **)(v5 + 80);
      int64_t v14 = v12 - v13;
      if (v12 != v13)
      {
        if (v14 < 0) {
          sub_2E00();
        }
        std::string v15 = (char *)operator new(v12 - v13);
        *(void *)uint64_t v6 = v15;
        *(void *)(v6 + 8) = v15;
        unsigned int v7 = &v15[4 * (v14 >> 2)];
        *(void *)(v6 + 16) = v7;
        memcpy(v15, v13, v14);
        *(void *)(v6 + 8) = v7;
      }
      int v8 = *(_DWORD *)(v5 + 96);
      *(unsigned char *)(v6 + 28) = *(unsigned char *)(v5 + 100);
      *(_DWORD *)(v6 + 24) = v8;
      v6 += 104;
      v5 += 104;
    }
    while (v5 != a3);
    return v6 - 72;
  }
  return a4;
}

void sub_446770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_446798((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_446798(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 32);
      if (v5)
      {
        *(void *)(v3 - 24) = v5;
        operator delete(v5);
      }
      v3 -= 104;
    }
  }
  return a1;
}

void sub_4467FC(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      uint64_t v5 = (void *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(void **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      long long v11 = (char *)operator new(24 * v10);
    }
    else
    {
      long long v11 = 0;
    }
    unint64_t v13 = &v11[24 * v7];
    int64_t v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    std::string v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v5) {
        return;
      }
      goto LABEL_24;
    }
    do
    {
      std::string v17 = v13;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      long long v18 = *(_OWORD *)(v5 - 3);
      v5 -= 3;
      *(_OWORD *)(v13 - 24) = v18;
      v13 -= 24;
      *((void *)v17 - 1) = v5[2];
      *uint64_t v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    while (v5 != v6);
    std::string::size_type v19 = *(void **)a1;
    uint64_t v5 = *(void **)(a1 + 8);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5 != v19)
    {
      int v20 = v5;
      do
      {
        unsigned int v22 = (void *)*(v20 - 3);
        v20 -= 3;
        unsigned int v21 = v22;
        if (v22)
        {
          *(v5 - 2) = v21;
          operator delete(v21);
        }
        uint64_t v5 = v20;
      }
      while (v20 != v19);
      uint64_t v5 = v19;
    }
    if (v5)
    {
LABEL_24:
      operator delete(v5);
    }
  }
}

void sub_446A04(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      memset(v5, 255, 4 * a2);
      uint64_t v6 = &v5[4 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    unint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + a2;
    if (v10 >> 62) {
      sub_2E00();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        sub_188D718();
      }
      unint64_t v13 = operator new(4 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    int64_t v14 = &v13[4 * v9];
    size_t v15 = 4 * a2;
    std::string v16 = &v13[4 * v12];
    memset(v14, 255, v15);
    std::string v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 4;
      if (v18 < 0x2C) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      unsigned int v21 = &v13[4 * v9 - 16];
      unsigned int v22 = v5 - 16;
      uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *unsigned int v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          int v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t sub_446BBC(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xCBEEA4E1A08AD8F3 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x8AD8F2FBA93868) {
    sub_2E00();
  }
  if (0x97DD49C34115B1E6 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x97DD49C34115B1E6 * ((a1[2] - *a1) >> 3);
  }
  if (0xCBEEA4E1A08AD8F3 * ((a1[2] - *a1) >> 3) >= 0x456C797DD49C34) {
    unint64_t v6 = 0x8AD8F2FBA93868;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x8AD8F2FBA93868) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(472 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[472 * v3];
  uint64_t v9 = &v7[472 * v6];
  sub_446D30((uint64_t)(a1 + 2), v8, a2);
  uint64_t v10 = v8 + 472;
  unint64_t v12 = (long long *)*a1;
  uint64_t v11 = (long long *)a1[1];
  if (v11 == (long long *)*a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
    if (!v11) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v8 -= 472;
    uint64_t v11 = (long long *)((char *)v11 - 472);
    sub_446D30((uint64_t)(a1 + 2), v8, v11);
  }
  while (v11 != v12);
  unint64_t v13 = (long long *)*a1;
  uint64_t v11 = (long long *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = (uint64_t)v9;
  if (v11 != v13)
  {
    do
    {
      uint64_t v11 = (long long *)((char *)v11 - 472);
      sub_405F44((uint64_t)v11);
    }
    while (v11 != v13);
    uint64_t v11 = v13;
  }
  if (v11) {
LABEL_17:
  }
    operator delete(v11);
  return v10;
}

__n128 sub_446D30(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 40) = *((void *)a3 + 5);
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  long long v4 = a3[3];
  long long v5 = a3[4];
  long long v6 = a3[5];
  *(_OWORD *)(a2 + 94) = *(long long *)((char *)a3 + 94);
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 48) = v4;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 112) = a3[7];
  *(void *)(a2 + 128) = *((void *)a3 + 16);
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  *((void *)a3 + 16) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(_OWORD *)(a2 + 136) = *(long long *)((char *)a3 + 136);
  *(void *)(a2 + 152) = *((void *)a3 + 19);
  *((void *)a3 + 17) = 0;
  *((void *)a3 + 18) = 0;
  *((void *)a3 + 19) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(_OWORD *)(a2 + 160) = a3[10];
  *(void *)(a2 + 176) = *((void *)a3 + 22);
  *((void *)a3 + 20) = 0;
  *((void *)a3 + 21) = 0;
  *((void *)a3 + 22) = 0;
  long long v7 = *(long long *)((char *)a3 + 184);
  uint64_t v8 = *((void *)a3 + 27);
  *(_OWORD *)(a2 + 200) = *(long long *)((char *)a3 + 200);
  *(_OWORD *)(a2 + 184) = v7;
  *(void *)(a2 + 216) = v8;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  *(_OWORD *)(a2 + 224) = a3[14];
  *(void *)(a2 + 240) = *((void *)a3 + 30);
  *((void *)a3 + 28) = 0;
  *((void *)a3 + 29) = 0;
  *((void *)a3 + 30) = 0;
  *(void *)(a2 + 248) = 0;
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  *(_OWORD *)(a2 + 248) = *(long long *)((char *)a3 + 248);
  *(void *)(a2 + 264) = *((void *)a3 + 33);
  *((void *)a3 + 31) = 0;
  *((void *)a3 + 32) = 0;
  *((void *)a3 + 33) = 0;
  *(_OWORD *)(a2 + 272) = a3[17];
  *(_DWORD *)(a2 + 296) = *((_DWORD *)a3 + 74);
  if (*((_DWORD *)a3 + 74) <= 1u) {
    *(void *)(a2 + 288) = *((void *)a3 + 36);
  }
  *(_OWORD *)(a2 + 304) = a3[19];
  long long v9 = a3[25];
  long long v11 = a3[22];
  long long v10 = a3[23];
  *(_OWORD *)(a2 + 384) = a3[24];
  *(_OWORD *)(a2 + 400) = v9;
  *(_OWORD *)(a2 + 352) = v11;
  *(_OWORD *)(a2 + 368) = v10;
  long long v13 = a3[27];
  long long v12 = a3[28];
  long long v14 = a3[26];
  *(void *)(a2 + 463) = *(void *)((char *)a3 + 463);
  *(_OWORD *)(a2 + 432) = v13;
  *(_OWORD *)(a2 + 448) = v12;
  *(_OWORD *)(a2 + 416) = v14;
  __n128 result = (__n128)a3[20];
  long long v16 = a3[21];
  *(__n128 *)(a2 + 320) = result;
  *(_OWORD *)(a2 + 336) = v16;
  return result;
}

uint64_t sub_446EA0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 472;
    sub_405F44(i - 472);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_446EF4(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1) {
    sub_2E00();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0) {
    unint64_t v6 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v16 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x1E1E1E1E1E1E1E1) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(136 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  __n128 __p = v7;
  long long v13 = &v7[136 * v3];
  size_t v15 = &v7[136 * v6];
  sub_44703C((uint64_t)v13, a2);
  long long v14 = v13 + 136;
  sub_4477AC(a1, &__p);
  uint64_t v8 = a1[1];
  uint64_t v10 = (uint64_t)v13;
  for (uint64_t i = v14; v14 != (char *)v10; uint64_t i = v14)
  {
    long long v14 = i - 136;
    sub_443B90((uint64_t)v16, (void *)i - 17);
  }
  if (__p) {
    operator delete(__p);
  }
  return v8;
}

void sub_447028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4478FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_44703C(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  unint64_t v6 = (unsigned char *)*((void *)a2 + 2);
  long long v5 = (unsigned char *)*((void *)a2 + 3);
  uint64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v8;
    long long v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 32) = v9;
    memcpy(v8, v6, v7 - 1);
    *(void *)(a1 + 24) = v9;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  long long v11 = (unsigned char *)*((void *)a2 + 5);
  uint64_t v10 = (unsigned char *)*((void *)a2 + 6);
  size_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      sub_2E00();
    }
    long long v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v13;
    long long v14 = &v13[v12];
    *(void *)(a1 + 56) = &v13[v12];
    memcpy(v13, v11, v12);
    *(void *)(a1 + 48) = v14;
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  long long v16 = (unsigned char *)*((void *)a2 + 8);
  size_t v15 = (unsigned char *)*((void *)a2 + 9);
  int64_t v17 = v15 - v16;
  if (v15 != v16)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v17 >> 4) >= 0x555555555555556) {
      sub_2E00();
    }
    unint64_t v18 = (char *)operator new(v17);
    *(void *)(a1 + 64) = v18;
    *(void *)(a1 + 72) = v18;
    *(void *)(a1 + 80) = &v18[16 * (v17 >> 4)];
    size_t v19 = 48 * ((v17 - 48) / 0x30uLL) + 48;
    memcpy(v18, v16, v19);
    *(void *)(a1 + 72) = &v18[v19];
  }
  sub_447244(a1 + 88, (uint64_t)a2 + 88);
  *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
  return a1;
}

void sub_4471D0(_Unwind_Exception *exception_object)
{
  unint64_t v6 = *v4;
  if (*v4)
  {
    v1[9] = v6;
    operator delete(v6);
    uint64_t v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      uint64_t v8 = *v2;
      if (!*v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v7 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[6] = v7;
  operator delete(v7);
  uint64_t v8 = *v2;
  if (!*v2) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[3] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_447234()
{
  if (!*v0) {
    JUMPOUT(0x4471F8);
  }
  JUMPOUT(0x4471F0);
}

uint64_t sub_447244(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_447388(a1, i + 2, i + 2);
  return a1;
}

void sub_447360(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void sub_447374(_Unwind_Exception *a1)
{
  sub_3AB00(v1);
  _Unwind_Resume(a1);
}

void *sub_447388(uint64_t a1, uint64_t *a2, void *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    uint8x8_t v8 = *(void **)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      __n128 result = (void *)*v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v11 = result[1];
            if (v11 == v5)
            {
              if (result[2] == v5) {
                return result;
              }
            }
            else if ((v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            __n128 result = (void *)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v10 = result[1];
          if (v10 == v5)
          {
            if (result[2] == v5) {
              return result;
            }
          }
          else
          {
            if (v10 >= v6) {
              v10 %= v6;
            }
            if (v10 != v3) {
              break;
            }
          }
          __n128 result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  sub_4476B4(a1, *a2, a3, (uint64_t)&v25);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v15 = 1;
    if (v6 >= 3) {
      BOOL v15 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v6);
    unint64_t v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v19) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v19)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v19 < 3uLL || (uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < *(void *)&v19) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v6 = *(void *)(a1 + 8);
    unint64_t v23 = v6 - 1;
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
      {
        unint64_t v3 = v5 % v6;
        long long v14 = *(void **)(*(void *)a1 + 8 * (v5 % v6));
        if (v14) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v5;
        long long v14 = *(void **)(*(void *)a1 + 8 * v5);
        if (v14) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v23 & v5;
      long long v14 = *(void **)(*(void *)a1 + 8 * (v23 & v5));
      if (v14) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *int v25 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v25)
    {
      unint64_t v24 = *(void *)(*v25 + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v24 >= v6) {
          v24 %= v6;
        }
      }
      else
      {
        v24 &= v6 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v25;
    }
    goto LABEL_61;
  }
  long long v14 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v14) {
    goto LABEL_50;
  }
LABEL_26:
  *int v25 = *v14;
  void *v14 = v25;
LABEL_61:
  __n128 result = v25;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_4476A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_4476B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  __n128 result = operator new(0x30uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *__n128 result = 0;
  result[1] = a2;
  uint64_t v9 = (unsigned char *)a3[1];
  result[2] = *a3;
  result[3] = 0;
  result[4] = 0;
  result[5] = 0;
  unint64_t v10 = (unsigned char *)a3[2];
  int64_t v11 = v10 - v9;
  if (v10 != v9)
  {
    float v12 = result;
    if (0xAAAAAAAAAAAAAAABLL * (v11 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    float v13 = (char *)operator new(v11);
    void v12[3] = v13;
    v12[4] = v13;
    long long v14 = &v13[4 * (v11 >> 2)];
    v12[5] = v14;
    __n128 result = memcpy(v13, v9, v11);
    v12[4] = v14;
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_447788(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 32) = v5;
    operator delete(v5);
  }
  sub_3AEA0(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_4477AC(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v7 = v4 + v5;
      uint64_t v8 = v2 + v5;
      *(_OWORD *)(v7 - 136) = *(_OWORD *)(v2 + v5 - 136);
      *(void *)(v7 - 120) = 0;
      *(_OWORD *)(v7 - 112) = 0uLL;
      *(_OWORD *)(v7 - 120) = *(_OWORD *)(v2 + v5 - 120);
      *(void *)(v7 - 104) = *(void *)(v2 + v5 - 104);
      *(void *)(v8 - 104) = 0;
      *(_OWORD *)(v8 - 120) = 0uLL;
      *(void *)(v7 - 80) = 0;
      *(_OWORD *)(v7 - 96) = 0uLL;
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(v2 + v5 - 96);
      *(void *)(v7 - 80) = *(void *)(v2 + v5 - 80);
      *(void *)(v8 - 80) = 0;
      *(_OWORD *)(v8 - 96) = 0uLL;
      *(void *)(v7 - 56) = 0;
      *(_OWORD *)(v7 - 72) = 0uLL;
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(v2 + v5 - 72);
      *(void *)(v7 - 56) = *(void *)(v2 + v5 - 56);
      *(_OWORD *)(v8 - 72) = 0uLL;
      uint64_t v9 = *(void *)(v2 + v5 - 48);
      *(_OWORD *)(v8 - 56) = 0uLL;
      *(void *)(v7 - 48) = v9;
      *(void *)(v7 - 40) = *(void *)(v2 + v5 - 40);
      *(void *)(v8 - 40) = 0;
      uint64_t v10 = *(void *)(v2 + v5 - 32);
      *(void *)(v4 + v5 - 32) = v10;
      uint64_t v11 = *(void *)(v2 + v5 - 24);
      *(void *)(v7 - 24) = v11;
      *(_DWORD *)(v7 - 16) = *(_DWORD *)(v2 + v5 - 16);
      if (v11)
      {
        unint64_t v6 = *(void *)(v10 + 8);
        unint64_t v12 = *(void *)(v7 - 40);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v6 >= v12) {
            v6 %= v12;
          }
        }
        else
        {
          v6 &= v12 - 1;
        }
        *(void *)(v9 + 8 * v6) = v4 + v5 - 32;
        *(void *)(v2 + v5 - 32) = 0;
        *(void *)(v2 + v5 - 24) = 0;
      }
      *(unsigned char *)(v7 - 8) = *(unsigned char *)(v8 - 8);
      v5 -= 136;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v13 = *result;
  *__n128 result = v4;
  a2[1] = v13;
  uint64_t v14 = result[1];
  result[1] = a2[2];
  a2[2] = v14;
  uint64_t v15 = result[2];
  result[2] = a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

uint64_t sub_4478FC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 136;
    sub_443B90(v4, (void *)(i - 136));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_447954(uint64_t *a1)
{
  unint64_t v2 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x1E1E1E1E1E1E1E1) {
    sub_2E00();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0) {
    unint64_t v4 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v4 = v3;
  }
  unint64_t v16 = a1 + 2;
  if (v4 > 0x1E1E1E1E1E1E1E1) {
    sub_188D718();
  }
  uint64_t v5 = 136 * v4;
  unint64_t v6 = (char *)operator new(136 * v4);
  uint64_t v7 = &v6[136 * v2];
  __n128 __p = v6;
  uint64_t v13 = v7;
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((void *)v7 + 16) = 0;
  *((_DWORD *)v7 + 30) = 1065353216;
  uint64_t v14 = v7 + 136;
  uint64_t v15 = &v6[v5];
  sub_4477AC(a1, &__p);
  uint64_t v8 = a1[1];
  uint64_t v10 = v13;
  for (uint64_t i = v14; v14 != v10; uint64_t i = v14)
  {
    uint64_t v14 = i - 136;
    sub_443B90((uint64_t)v16, (void *)i - 17);
  }
  if (__p) {
    operator delete(__p);
  }
  return v8;
}

void sub_447A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4478FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_447A9C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = *result;
  uint64_t v3 = result[1];
  if (v3 != *result)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *result) >> 4);
    if (v5 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    __n128 result = (uint64_t *)operator new(8 * ((v3 - *result) >> 4));
    uint64_t v6 = (uint64_t)result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[3 * v5]; v4 != v3; v4 += 48)
    {
      v8.n128_u8[0] = sub_51D60((unsigned __int8 *)(v4 + 16));
      v8.n128_u64[1] = sub_51D68(v4 + 16);
      uint64_t v9 = v7;
      __n128 result = (uint64_t *)sub_447BAC((char **)a2, v6, &v8);
      uint64_t v6 = (uint64_t)(result + 3);
    }
  }
  return result;
}

void sub_447B8C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_447BAC(char **a1, uint64_t a2, __n128 *a3)
{
  unint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v8 = (uint64_t)&(*a1)[24 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v5) >> 3) + 1;
    if (v18 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v5) >> 3);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0x555555555555555) {
      unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v20 = v18;
    }
    long long v39 = a1 + 2;
    if (v20)
    {
      if (v20 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      uint8x8_t v21 = (char *)operator new(24 * v20);
    }
    else
    {
      uint8x8_t v21 = 0;
    }
    unint64_t v35 = v21;
    uint64_t v36 = &v21[24 * v7];
    unint64_t v37 = v36;
    long long v38 = &v21[24 * v20];
    sub_447EBC((uint64_t)&v35, a3);
    unint64_t v23 = v36;
    unint64_t v24 = *a1;
    int v25 = v36;
    if (*a1 != (char *)v8)
    {
      uint64_t v26 = v8;
      long long v27 = v36;
      do
      {
        int v25 = v27 - 24;
        long long v28 = *(_OWORD *)(v26 - 24);
        *((void *)v27 - 1) = *(void *)(v26 - 8);
        *(_OWORD *)(v27 - 24) = v28;
        v26 -= 24;
        v27 -= 24;
      }
      while ((char *)v26 != v24);
    }
    uint64_t v36 = v25;
    int32x4_t v29 = a1[1];
    int32x4_t v30 = v37;
    if (v29 != (char *)v8)
    {
      do
      {
        long long v31 = *(_OWORD *)v8;
        *((void *)v30 + 2) = *(void *)(v8 + 16);
        *(_OWORD *)int32x4_t v30 = v31;
        v30 += 24;
        v8 += 24;
      }
      while ((char *)v8 != v29);
      int v25 = v36;
      uint64_t v8 = (uint64_t)a1[1];
    }
    long long v32 = *a1;
    *a1 = v25;
    a1[1] = v30;
    uint64_t v33 = a1[2];
    a1[2] = v38;
    unint64_t v37 = (char *)v8;
    long long v38 = v33;
    unint64_t v35 = v32;
    uint64_t v36 = v32;
    if ((char *)v8 != v32) {
      unint64_t v37 = &v32[(v8 - (uint64_t)v32 - 24) % 0x18uLL];
    }
    if (v32) {
      operator delete(v32);
    }
    return (uint64_t)v23;
  }
  else if (v8 == v6)
  {
    __n128 v22 = *a3;
    *(void *)(v8 + 16) = a3[1].n128_u64[0];
    *(__n128 *)uint64_t v8 = v22;
    a1[1] = (char *)(v8 + 24);
  }
  else
  {
    uint64_t v10 = v8 + 24;
    unint64_t v11 = v6 - 24;
    unint64_t v12 = a1[1];
    if (v6 >= 0x18)
    {
      do
      {
        long long v13 = *(_OWORD *)v11;
        *((void *)v12 + 2) = *(void *)(v11 + 16);
        *(_OWORD *)unint64_t v12 = v13;
        v12 += 24;
        v11 += 24;
      }
      while (v11 < v6);
    }
    a1[1] = v12;
    if (v6 != v10)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v10) >> 3);
      uint64_t v15 = (void *)(v6 - 8);
      uint64_t v16 = 24 * v14;
      do
      {
        *((unsigned char *)v15 - 16) = *(unsigned char *)(v8 + v16 - 24);
        *(v15 - 1) = *(void *)(v8 + v16 - 16);
        void *v15 = *(void *)(v8 + v16 - 8);
        v15 -= 3;
        v16 -= 24;
      }
      while (v16);
    }
    *(unsigned char *)uint64_t v8 = a3->n128_u8[0];
    unint64_t v17 = &v5[24 * v7];
    *((void *)v17 + 1) = a3->n128_u64[1];
    *((void *)v17 + 2) = a3[1].n128_u64[0];
  }
  return v8;
}

void sub_447E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    long long v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_447EBC(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(__n128 **)(a1 + 16);
  unint64_t v5 = v4;
  if (v4 == *(__n128 **)(a1 + 24))
  {
    unint64_t v6 = *(__n128 **)a1;
    uint64_t v7 = *(__n128 **)(a1 + 8);
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v15 = 0x5555555555555556 * (((char *)v4 - (char *)v6) >> 3);
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0xAAAAAAAAAAAAAABLL) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 24 * v15;
      unint64_t v18 = (char *)operator new(24 * v15);
      unint64_t v19 = (__n128 *)&v18[24 * v16];
      unint64_t v5 = v19;
      int64_t v20 = (char *)v4 - (char *)v7;
      if (v4 != v7)
      {
        unint64_t v5 = (__n128 *)((char *)v19 + 24 * (v20 / 24));
        uint64_t v21 = 24 * (v20 / 24);
        __n128 v22 = &v18[24 * v16];
        do
        {
          __n128 v23 = *v7;
          *((void *)v22 + 2) = v7[1].n128_u64[0];
          *(__n128 *)__n128 v22 = v23;
          v22 += 24;
          uint64_t v7 = (__n128 *)((char *)v7 + 24);
          v21 -= 24;
        }
        while (v21);
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v5;
      *(void *)(a1 + 24) = &v18[v17];
      if (v6)
      {
        operator delete(v6);
        unint64_t v5 = *(__n128 **)(a1 + 16);
      }
    }
    else
    {
      int64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *(void *)a1) >> 3);
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      unint64_t v11 = (__n128 *)((char *)v7 - 24 * (v9 >> 1));
      unint64_t v5 = v11;
      if (v7 != v4)
      {
        uint64_t v12 = -v10;
        uint64_t v13 = -24 * v10;
        do
        {
          uint64_t v14 = (uint64_t)v7 + v13;
          *(unsigned char *)uint64_t v14 = v7->n128_u8[0];
          *(void *)(v14 + 8) = v7->n128_u64[1];
          *(void *)(v14 + 16) = v7[1].n128_u64[0];
          uint64_t v7 = (__n128 *)((char *)v7 + 24);
        }
        while (v7 != v4);
        unint64_t v5 = (__n128 *)((char *)v7 + 24 * v12);
      }
      *(void *)(a1 + 8) = v11;
      *(void *)(a1 + 16) = v5;
    }
  }
  __n128 result = *a2;
  v5[1].n128_u64[0] = a2[1].n128_u64[0];
  *unint64_t v5 = result;
  *(void *)(a1 + 16) += 24;
  return result;
}

void *sub_448064@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  __n128 result = a2;
  uint64_t v4 = (_OWORD *)(a1 + 56);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 79))
    {
      *(_OWORD *)__n128 result = *v4;
      result[2] = *(void *)(a1 + 72);
      return result;
    }
    goto LABEL_8;
  }
  unint64_t v5 = *(void *)(a1 + 64);
  if (!v5)
  {
LABEL_8:
    uint64_t v21 = (uint64_t)result;
    sub_1115F80(v22, 0, 0);
    int64_t v8 = *(uint64_t **)(a1 + 32);
    for (uint64_t i = *(uint64_t **)(a1 + 40); v8 != i; v8 += 4)
    {
      if (v25 && (uint64_t v13 = v24, v24 < *v25))
      {
        ++v24;
        uint64_t v14 = *(void *)&v25[2 * v13 + 2];
      }
      else
      {
        sub_111704C(v23);
        uint64_t v14 = sub_188CDC8((uint64_t)&v23, v15);
      }
      uint64_t v16 = *v8;
      int v17 = *(_DWORD *)(v14 + 16);
      *(_DWORD *)(v14 + 16) = v17 | 8;
      *(void *)(v14 + 48) = v16;
      LODWORD(v16) = *((unsigned __int8 *)v8 + 22);
      *(_DWORD *)(v14 + 16) = v17 | 0x48;
      *(_DWORD *)(v14 + 64) = v16;
      *(_DWORD *)(v14 + 68) = *((unsigned __int8 *)v8 + 23);
      *(_DWORD *)(v14 + 16) = v17 | 0xCA;
      unint64_t v18 = *(_DWORD **)(v14 + 32);
      if (!v18)
      {
        uint64_t v19 = *(void *)(v14 + 8);
        int64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
        if (v19) {
          int64_t v20 = (void *)*v20;
        }
        unint64_t v18 = sub_1116F58((uint64_t)v20);
        *(void *)(v14 + 32) = v18;
      }
      LODWORD(v7) = *((_DWORD *)v8 + 3);
      long double v10 = exp((double)*(unint64_t *)&v7 * -6.28318531 / 4294967300.0 + 3.14159265);
      double v11 = atan((v10 + -1.0 / v10) * 0.5) * 57.2957795 * 10000000.0;
      v18[4] |= 1u;
      v18[6] = llround(v11);
      *(_DWORD *)(v14 + 16) |= 2u;
      LODWORD(v11) = *((_DWORD *)v8 + 2);
      double v12 = ((double)*(unint64_t *)&v11 * 360.0 / 4294967300.0 + -180.0) * 10000000.0;
      v18[4] |= 2u;
      v18[7] = llround(v12);
      LOWORD(v12) = *((_WORD *)v8 + 10);
      double v7 = (double)*(unint64_t *)&v12 / 100.0;
      *(_DWORD *)(v14 + 16) |= 0x20u;
      *(_DWORD *)(v14 + 60) = vcvtad_u64_f64(v7);
    }
    sub_188B428((uint64_t)v22, v21);
    return (void *)sub_1116458(v22);
  }
  unint64_t v6 = *(void **)v4;

  return sub_4200(result, v6, v5);
}

void sub_448320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1116458(va);
  _Unwind_Resume(a1);
}

void sub_448334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1116458(va);
  _Unwind_Resume(a1);
}

uint64_t *sub_448348(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = __ROR8__(*a2, 32);
  unint64_t v8 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) >> 33));
  unint64_t v9 = v8 ^ (v8 >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8 ^ (v8 >> 33);
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    double v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint64_t v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  uint64_t v19 = operator new(0x18uLL);
  void *v19 = 0;
  v19[1] = v9;
  v19[2] = *a3;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
    if (v23)
    {
LABEL_34:
      void *v19 = *v23;
LABEL_69:
      void *v23 = v19;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  void *v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v19)
  {
    unint64_t v32 = *(void *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_44869C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_4486B0(void **a1, long long *a2)
{
  unint64_t v5 = (char *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    *((void *)v5 + 4) = *((void *)a2 + 4);
    *(_OWORD *)unint64_t v5 = v6;
    *((_OWORD *)v5 + 1) = v7;
    *((_WORD *)v5 + 20) = *((_WORD *)a2 + 20);
    *((_WORD *)v5 + 21) = *((_WORD *)a2 + 21);
    uint64_t v8 = *((void *)a2 + 6);
    v5[56] = *((unsigned char *)a2 + 56);
    *((void *)v5 + 6) = v8;
    unint64_t v9 = v5 + 64;
LABEL_3:
    a1[1] = v9;
    return;
  }
  unint64_t v10 = (char *)*a1;
  uint64_t v11 = (v5 - (unsigned char *)*a1) >> 6;
  unint64_t v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 58) {
    sub_2E00();
  }
  uint64_t v13 = v4 - (void)v10;
  if (v13 >> 5 > v12) {
    unint64_t v12 = v13 >> 5;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v14 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 58) {
      sub_188D718();
    }
    uint64_t v15 = (char *)operator new(v14 << 6);
  }
  else
  {
    uint64_t v15 = 0;
  }
  long long v16 = a2[1];
  int v17 = &v15[64 * v11];
  *(_OWORD *)int v17 = *a2;
  *((_OWORD *)v17 + 1) = v16;
  *((void *)v17 + 4) = *((void *)a2 + 4);
  *((_DWORD *)v17 + 10) = *((_DWORD *)a2 + 10);
  *((void *)v17 + 6) = *((void *)a2 + 6);
  char v18 = *((unsigned char *)a2 + 56);
  unint64_t v9 = v17 + 64;
  v17[56] = v18;
  if (v5 != v10)
  {
    do
    {
      long long v19 = *((_OWORD *)v5 - 4);
      long long v20 = *((_OWORD *)v5 - 3);
      *((void *)v17 - 4) = *((void *)v5 - 4);
      *((_OWORD *)v17 - 4) = v19;
      *((_OWORD *)v17 - 3) = v20;
      *((_WORD *)v17 - 12) = *((_WORD *)v5 - 12);
      *((_WORD *)v17 - 11) = *((_WORD *)v5 - 11);
      uint64_t v21 = *((void *)v5 - 2);
      *(v17 - 8) = *(v5 - 8);
      *((void *)v17 - 2) = v21;
      v17 -= 64;
      v5 -= 64;
    }
    while (v5 != v10);
    unint64_t v5 = (char *)*a1;
  }
  *a1 = v17;
  a1[1] = v9;
  a1[2] = &v15[64 * v14];
  if (!v5) {
    goto LABEL_3;
  }
  operator delete(v5);
  a1[1] = v9;
}

uint64_t sub_448838(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  unint64_t v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  long long v6 = *(long long *)((char *)a2 + 94);
  long long v7 = a2[5];
  uint64_t v8 = (void **)(a1 + 112);
  unint64_t v9 = *(char **)(a1 + 112);
  long long v10 = a2[3];
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 94) = v6;
  *(_OWORD *)(a1 + 48) = v10;
  if (v9)
  {
    uint64_t v11 = *(char **)(a1 + 120);
    unint64_t v12 = v9;
    if (v11 != v9)
    {
      do
      {
        uint64_t v13 = (void *)*((void *)v11 - 3);
        if (v13)
        {
          *((void *)v11 - 2) = v13;
          operator delete(v13);
        }
        v11 -= 56;
      }
      while (v11 != v9);
      unint64_t v12 = *v8;
    }
    *(void *)(a1 + 120) = v9;
    operator delete(v12);
    *uint64_t v8 = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
  }
  *(_OWORD *)(a1 + 112) = a2[7];
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  unint64_t v14 = *(void **)(a1 + 136);
  if (v14)
  {
    *(void *)(a1 + 144) = v14;
    operator delete(v14);
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(long long *)((char *)a2 + 136);
  *(void *)(a1 + 152) = *((void *)a2 + 19);
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  uint64_t v15 = *(void **)(a1 + 160);
  if (v15)
  {
    *(void *)(a1 + 168) = v15;
    operator delete(v15);
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
  }
  *(_OWORD *)(a1 + 160) = a2[10];
  *(void *)(a1 + 176) = *((void *)a2 + 22);
  *((void *)a2 + 20) = 0;
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  long long v16 = *(long long *)((char *)a2 + 184);
  long long v17 = *(long long *)((char *)a2 + 200);
  char v18 = *(void **)(a1 + 224);
  *(void *)(a1 + 216) = *((void *)a2 + 27);
  *(_OWORD *)(a1 + 200) = v17;
  *(_OWORD *)(a1 + 184) = v16;
  if (v18)
  {
    *(void *)(a1 + 232) = v18;
    operator delete(v18);
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
  }
  *(_OWORD *)(a1 + 224) = a2[14];
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *((void *)a2 + 28) = 0;
  *((void *)a2 + 29) = 0;
  *((void *)a2 + 30) = 0;
  long long v19 = *(void **)(a1 + 248);
  if (v19)
  {
    *(void *)(a1 + 256) = v19;
    operator delete(v19);
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 264) = 0;
  }
  *(_OWORD *)(a1 + 248) = *(long long *)((char *)a2 + 248);
  *(void *)(a1 + 264) = *((void *)a2 + 33);
  *((void *)a2 + 31) = 0;
  *((void *)a2 + 32) = 0;
  *((void *)a2 + 33) = 0;
  *(_OWORD *)(a1 + 272) = a2[17];
  if ((long long *)a1 != a2)
  {
    unsigned int v20 = *(_DWORD *)(a1 + 296);
    int v21 = *((_DWORD *)a2 + 74);
    if (v20 == v21)
    {
      if (v20 <= 1) {
        *(void *)(a1 + 288) = *((void *)a2 + 36);
      }
    }
    else
    {
      if (v21 == 1)
      {
        *(void *)(a1 + 288) = *((void *)a2 + 36);
        int v21 = *((_DWORD *)a2 + 74);
      }
      else if (!v21)
      {
        *(void *)(a1 + 288) = *((void *)a2 + 36);
      }
      *(_DWORD *)(a1 + 296) = v21;
    }
  }
  *(_OWORD *)(a1 + 304) = a2[19];
  long long v22 = a2[25];
  long long v24 = a2[22];
  long long v23 = a2[23];
  *(_OWORD *)(a1 + 384) = a2[24];
  *(_OWORD *)(a1 + 400) = v22;
  *(_OWORD *)(a1 + 352) = v24;
  *(_OWORD *)(a1 + 368) = v23;
  long long v26 = a2[27];
  long long v25 = a2[28];
  long long v27 = a2[26];
  *(void *)(a1 + 463) = *(void *)((char *)a2 + 463);
  *(_OWORD *)(a1 + 432) = v26;
  *(_OWORD *)(a1 + 448) = v25;
  *(_OWORD *)(a1 + 416) = v27;
  long long v28 = a2[21];
  *(_OWORD *)(a1 + 320) = a2[20];
  *(_OWORD *)(a1 + 336) = v28;
  return a1;
}

char *sub_448AF0(void **a1)
{
  unint64_t v3 = (char *)*a1;
  unint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (unsigned char *)*a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x199999999999999) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 5) > v5) {
    unint64_t v5 = 0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - v3) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v6 = 0x199999999999999;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0x199999999999999) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(160 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v8 = &v7[160 * v4];
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  unint64_t v9 = &v7[160 * v6];
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *((void *)v8 + 19) = 0;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(void *)uint64_t v8 = -1;
  *((_DWORD *)v8 + 2) = 0x7FFFFFFF;
  *((void *)v8 + 2) = -1;
  *((void *)v8 + 3) = -1;
  *((void *)v8 + 4) = 0x7FFFFFFFFFFFFFFFLL;
  *((_DWORD *)v8 + 12) = -1935635296;
  *((void *)v8 + 7) = 0;
  *(_DWORD *)(v8 + 63) = 0;
  *((void *)v8 + 10) = 0;
  *((void *)v8 + 11) = 0;
  *((_DWORD *)v8 + 24) = 0;
  *((void *)v8 + 9) = 0;
  v8[100] = 100;
  *(void *)(v8 + 151) = 0;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  long long v10 = v8 + 160;
  *(_OWORD *)(v8 + 104) = 0u;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_25;
  }
  uint64_t v11 = 0;
  do
  {
    unint64_t v12 = &v2[v11];
    uint64_t v13 = &v8[v11];
    *((_OWORD *)v13 - 10) = *(_OWORD *)&v2[v11 - 160];
    long long v14 = *(_OWORD *)&v2[v11 - 144];
    long long v15 = *(_OWORD *)&v2[v11 - 128];
    long long v16 = *(_OWORD *)&v2[v11 - 112];
    *(_DWORD *)(v13 - 97) = *(_DWORD *)&v2[v11 - 97];
    *((_OWORD *)v13 - 8) = v15;
    *((_OWORD *)v13 - 7) = v16;
    *((void *)v13 - 10) = 0;
    *((void *)v13 - 9) = 0;
    *((_OWORD *)v13 - 9) = v14;
    *(_OWORD *)(v13 - 88) = *(_OWORD *)&v2[v11 - 88];
    *((void *)v13 - 9) = *(void *)&v2[v11 - 72];
    *((void *)v12 - 11) = 0;
    *((void *)v12 - 10) = 0;
    *((void *)v12 - 9) = 0;
    int v17 = *(_DWORD *)&v2[v11 - 64];
    *(v13 - 60) = v2[v11 - 60];
    *((void *)v13 - 6) = 0;
    *((void *)v13 - 5) = 0;
    *((_DWORD *)v13 - 16) = v17;
    *(_OWORD *)(v13 - 56) = *(_OWORD *)&v2[v11 - 56];
    *((void *)v13 - 5) = *(void *)&v2[v11 - 40];
    *((void *)v12 - 7) = 0;
    *((void *)v12 - 6) = 0;
    *((void *)v12 - 5) = 0;
    *((void *)v13 - 3) = 0;
    *((void *)v13 - 2) = 0;
    *((_OWORD *)v13 - 2) = *(_OWORD *)&v2[v11 - 32];
    *((void *)v13 - 2) = *(void *)&v2[v11 - 16];
    *((void *)v12 - 4) = 0;
    *((void *)v12 - 3) = 0;
    *((void *)v12 - 2) = 0;
    int v18 = *(_DWORD *)&v2[v11 - 8];
    *(_DWORD *)(v13 - 5) = *(_DWORD *)&v2[v11 - 5];
    *((_DWORD *)v13 - 2) = v18;
    v11 -= 160;
  }
  while (&v2[v11] != v3);
  long long v19 = (char *)*a1;
  unint64_t v2 = (char *)a1[1];
  *a1 = &v8[v11];
  a1[1] = v10;
  a1[2] = v9;
  if (v2 != v19)
  {
    do
    {
      unsigned int v20 = (void *)*((void *)v2 - 4);
      if (v20)
      {
        *((void *)v2 - 3) = v20;
        operator delete(v20);
      }
      int v21 = (void *)*((void *)v2 - 7);
      if (v21)
      {
        *((void *)v2 - 6) = v21;
        operator delete(v21);
      }
      long long v22 = (void *)*((void *)v2 - 11);
      if (v22)
      {
        *((void *)v2 - 10) = v22;
        operator delete(v22);
      }
      v2 -= 160;
    }
    while (v2 != v19);
    unint64_t v2 = v19;
  }
  if (v2) {
LABEL_25:
  }
    operator delete(v2);
  return v10;
}

uint64_t *sub_448D70@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = *result;
  uint64_t v3 = result[1];
  if (v3 != *result)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *result) >> 4);
    if (v5 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    __n128 result = (uint64_t *)operator new(8 * ((v3 - *result) >> 4));
    uint64_t v6 = (uint64_t)result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[3 * v5]; v4 != v3; v4 += 48)
    {
      v8.n128_u8[0] = sub_51D60((unsigned __int8 *)(v4 + 16));
      v8.n128_u64[1] = sub_51D68(v4 + 16);
      uint64_t v9 = v7;
      __n128 result = (uint64_t *)sub_447BAC((char **)a2, v6, &v8);
      uint64_t v6 = (uint64_t)(result + 3);
    }
  }
  return result;
}

void sub_448E60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_448E80@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  __n128 result = a2;
  uint64_t v4 = (_OWORD *)(a1 + 56);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 79))
    {
      *(_OWORD *)__n128 result = *v4;
      result[2] = *(void *)(a1 + 72);
      return result;
    }
    goto LABEL_8;
  }
  unint64_t v5 = *(void *)(a1 + 64);
  if (!v5)
  {
LABEL_8:
    uint64_t v21 = (uint64_t)result;
    sub_1115F80(v22, 0, 0);
    __n128 v8 = *(uint64_t **)(a1 + 32);
    for (uint64_t i = *(uint64_t **)(a1 + 40); v8 != i; v8 += 4)
    {
      if (v25 && (uint64_t v13 = v24, v24 < *v25))
      {
        ++v24;
        uint64_t v14 = *(void *)&v25[2 * v13 + 2];
      }
      else
      {
        sub_111704C(v23);
        uint64_t v14 = sub_188CDC8((uint64_t)&v23, v15);
      }
      uint64_t v16 = *v8;
      int v17 = *(_DWORD *)(v14 + 16);
      *(_DWORD *)(v14 + 16) = v17 | 8;
      *(void *)(v14 + 48) = v16;
      LODWORD(v16) = *((unsigned __int8 *)v8 + 22);
      *(_DWORD *)(v14 + 16) = v17 | 0x48;
      *(_DWORD *)(v14 + 64) = v16;
      *(_DWORD *)(v14 + 68) = *((unsigned __int8 *)v8 + 23);
      *(_DWORD *)(v14 + 16) = v17 | 0xCA;
      int v18 = *(_DWORD **)(v14 + 32);
      if (!v18)
      {
        uint64_t v19 = *(void *)(v14 + 8);
        unsigned int v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
        if (v19) {
          unsigned int v20 = (void *)*v20;
        }
        int v18 = sub_1116F58((uint64_t)v20);
        *(void *)(v14 + 32) = v18;
      }
      LODWORD(v7) = *((_DWORD *)v8 + 3);
      long double v10 = exp((double)*(unint64_t *)&v7 * -6.28318531 / 4294967300.0 + 3.14159265);
      double v11 = atan((v10 + -1.0 / v10) * 0.5) * 57.2957795 * 10000000.0;
      v18[4] |= 1u;
      v18[6] = llround(v11);
      *(_DWORD *)(v14 + 16) |= 2u;
      LODWORD(v11) = *((_DWORD *)v8 + 2);
      double v12 = ((double)*(unint64_t *)&v11 * 360.0 / 4294967300.0 + -180.0) * 10000000.0;
      v18[4] |= 2u;
      v18[7] = llround(v12);
      LOWORD(v12) = *((_WORD *)v8 + 10);
      double v7 = (double)*(unint64_t *)&v12 / 100.0;
      *(_DWORD *)(v14 + 16) |= 0x20u;
      *(_DWORD *)(v14 + 60) = vcvtad_u64_f64(v7);
    }
    sub_188B428((uint64_t)v22, v21);
    return (void *)sub_1116458(v22);
  }
  uint64_t v6 = *(void **)v4;

  return sub_4200(result, v6, v5);
}

void sub_44913C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1116458(va);
  _Unwind_Resume(a1);
}

void sub_449150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1116458(va);
  _Unwind_Resume(a1);
}

uint64_t sub_449164(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 480;
    sub_4451C0(i - 480);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_4491B8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = *result;
  uint64_t v3 = result[1];
  if (v3 != *result)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *result) >> 4);
    if (v5 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    __n128 result = (uint64_t *)operator new(8 * ((v3 - *result) >> 4));
    uint64_t v6 = (uint64_t)result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[3 * v5]; v4 != v3; v4 += 48)
    {
      v8.n128_u8[0] = sub_51D60((unsigned __int8 *)(v4 + 16));
      v8.n128_u64[1] = sub_51D68(v4 + 16);
      uint64_t v9 = v7;
      __n128 result = (uint64_t *)sub_447BAC((char **)a2, v6, &v8);
      uint64_t v6 = (uint64_t)(result + 3);
    }
  }
  return result;
}

void sub_4492A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_4492C8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  __n128 result = a2;
  uint64_t v4 = (_OWORD *)(a1 + 56);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 79))
    {
      *(_OWORD *)__n128 result = *v4;
      result[2] = *(void *)(a1 + 72);
      return result;
    }
    goto LABEL_8;
  }
  unint64_t v5 = *(void *)(a1 + 64);
  if (!v5)
  {
LABEL_8:
    uint64_t v21 = (uint64_t)result;
    sub_1115F80(v22, 0, 0);
    __n128 v8 = *(uint64_t **)(a1 + 32);
    for (uint64_t i = *(uint64_t **)(a1 + 40); v8 != i; v8 += 4)
    {
      if (v25 && (uint64_t v13 = v24, v24 < *v25))
      {
        ++v24;
        uint64_t v14 = *(void *)&v25[2 * v13 + 2];
      }
      else
      {
        sub_111704C(v23);
        uint64_t v14 = sub_188CDC8((uint64_t)&v23, v15);
      }
      uint64_t v16 = *v8;
      int v17 = *(_DWORD *)(v14 + 16);
      *(_DWORD *)(v14 + 16) = v17 | 8;
      *(void *)(v14 + 48) = v16;
      LODWORD(v16) = *((unsigned __int8 *)v8 + 22);
      *(_DWORD *)(v14 + 16) = v17 | 0x48;
      *(_DWORD *)(v14 + 64) = v16;
      *(_DWORD *)(v14 + 68) = *((unsigned __int8 *)v8 + 23);
      *(_DWORD *)(v14 + 16) = v17 | 0xCA;
      int v18 = *(_DWORD **)(v14 + 32);
      if (!v18)
      {
        uint64_t v19 = *(void *)(v14 + 8);
        unsigned int v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
        if (v19) {
          unsigned int v20 = (void *)*v20;
        }
        int v18 = sub_1116F58((uint64_t)v20);
        *(void *)(v14 + 32) = v18;
      }
      LODWORD(v7) = *((_DWORD *)v8 + 3);
      long double v10 = exp((double)*(unint64_t *)&v7 * -6.28318531 / 4294967300.0 + 3.14159265);
      double v11 = atan((v10 + -1.0 / v10) * 0.5) * 57.2957795 * 10000000.0;
      v18[4] |= 1u;
      v18[6] = llround(v11);
      *(_DWORD *)(v14 + 16) |= 2u;
      LODWORD(v11) = *((_DWORD *)v8 + 2);
      double v12 = ((double)*(unint64_t *)&v11 * 360.0 / 4294967300.0 + -180.0) * 10000000.0;
      v18[4] |= 2u;
      v18[7] = llround(v12);
      LOWORD(v12) = *((_WORD *)v8 + 10);
      double v7 = (double)*(unint64_t *)&v12 / 100.0;
      *(_DWORD *)(v14 + 16) |= 0x20u;
      *(_DWORD *)(v14 + 60) = vcvtad_u64_f64(v7);
    }
    sub_188B428((uint64_t)v22, v21);
    return (void *)sub_1116458(v22);
  }
  uint64_t v6 = *(void **)v4;

  return sub_4200(result, v6, v5);
}

void sub_449584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1116458(va);
  _Unwind_Resume(a1);
}

void sub_449598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1116458(va);
  _Unwind_Resume(a1);
}

uint64_t sub_4495AC(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  unint64_t v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  long long v7 = a2[5];
  long long v6 = a2[6];
  uint64_t v8 = *(void *)((char *)a2 + 110);
  uint64_t v9 = (void **)(a1 + 120);
  long double v10 = *(char **)(a1 + 120);
  *(_OWORD *)(a1 + 64) = a2[4];
  *(void *)(a1 + 110) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 48) = a2[3];
  if (v10)
  {
    double v11 = *(char **)(a1 + 128);
    double v12 = v10;
    if (v11 != v10)
    {
      do
      {
        uint64_t v13 = (void *)*((void *)v11 - 3);
        if (v13)
        {
          *((void *)v11 - 2) = v13;
          operator delete(v13);
        }
        v11 -= 56;
      }
      while (v11 != v10);
      double v12 = *v9;
    }
    *(void *)(a1 + 128) = v10;
    operator delete(v12);
    *uint64_t v9 = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  uint64_t v14 = *(void **)(a1 + 144);
  if (v14)
  {
    *(void *)(a1 + 152) = v14;
    operator delete(v14);
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
  }
  *(_OWORD *)(a1 + 144) = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  *((void *)a2 + 20) = 0;
  uint64_t v15 = *(void **)(a1 + 168);
  if (v15)
  {
    *(void *)(a1 + 176) = v15;
    operator delete(v15);
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
  }
  *(_OWORD *)(a1 + 168) = *(long long *)((char *)a2 + 168);
  *(void *)(a1 + 184) = *((void *)a2 + 23);
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = 0;
  long long v16 = a2[12];
  long long v17 = a2[13];
  int v18 = *(void **)(a1 + 232);
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  *(_OWORD *)(a1 + 208) = v17;
  *(_OWORD *)(a1 + 192) = v16;
  if (v18)
  {
    *(void *)(a1 + 240) = v18;
    operator delete(v18);
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
  }
  *(_OWORD *)(a1 + 232) = *(long long *)((char *)a2 + 232);
  *(void *)(a1 + 248) = *((void *)a2 + 31);
  *((void *)a2 + 29) = 0;
  *((void *)a2 + 30) = 0;
  *((void *)a2 + 31) = 0;
  uint64_t v19 = *(void **)(a1 + 256);
  if (v19)
  {
    *(void *)(a1 + 264) = v19;
    operator delete(v19);
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
  }
  *(_OWORD *)(a1 + 256) = a2[16];
  *(void *)(a1 + 272) = *((void *)a2 + 34);
  *((void *)a2 + 32) = 0;
  *((void *)a2 + 33) = 0;
  *((void *)a2 + 34) = 0;
  *(_OWORD *)(a1 + 280) = *(long long *)((char *)a2 + 280);
  if ((long long *)a1 != a2)
  {
    unsigned int v20 = *(_DWORD *)(a1 + 304);
    int v21 = *((_DWORD *)a2 + 76);
    if (v20 == v21)
    {
      if (v20 <= 1) {
        *(void *)(a1 + 296) = *((void *)a2 + 37);
      }
    }
    else
    {
      if (v21 == 1)
      {
        *(void *)(a1 + 296) = *((void *)a2 + 37);
        int v21 = *((_DWORD *)a2 + 76);
      }
      else if (!v21)
      {
        *(void *)(a1 + 296) = *((void *)a2 + 37);
      }
      *(_DWORD *)(a1 + 304) = v21;
    }
  }
  *(_OWORD *)(a1 + 312) = *(long long *)((char *)a2 + 312);
  long long v22 = *(long long *)((char *)a2 + 408);
  long long v24 = *(long long *)((char *)a2 + 360);
  long long v23 = *(long long *)((char *)a2 + 376);
  *(_OWORD *)(a1 + 392) = *(long long *)((char *)a2 + 392);
  *(_OWORD *)(a1 + 408) = v22;
  *(_OWORD *)(a1 + 360) = v24;
  *(_OWORD *)(a1 + 376) = v23;
  long long v26 = *(long long *)((char *)a2 + 440);
  long long v25 = *(long long *)((char *)a2 + 456);
  long long v27 = *(long long *)((char *)a2 + 424);
  *(void *)(a1 + 471) = *(void *)((char *)a2 + 471);
  *(_OWORD *)(a1 + 440) = v26;
  *(_OWORD *)(a1 + 456) = v25;
  *(_OWORD *)(a1 + 424) = v27;
  long long v28 = *(long long *)((char *)a2 + 344);
  *(_OWORD *)(a1 + 328) = *(long long *)((char *)a2 + 328);
  *(_OWORD *)(a1 + 344) = v28;
  return a1;
}

uint64_t sub_44987C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_449894()
{
  unk_255860F = 16641;
  word_25585F8 = 65;
  byte_2558627 = 1;
  byte_2558611 = 0;
}

uint64_t *sub_4498BC(uint64_t *a1, void *a2)
{
  uint64_t v4 = sub_3750CC(a2);
  *a1 = v4;
  sub_458644(a1 + 1, v4);
  sub_ED82AC((uint64_t)(a1 + 3), a2);
  a1[523] = sub_3750CC(a2);
  return a1;
}

void sub_449924(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)v1[520];
  if (v3)
  {
    v1[521] = v3;
    operator delete(v3);
  }
  sub_3A6318(v1 + 4);
  _Unwind_Resume(a1);
}

void sub_449948(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1105674(v39);
  sub_1105674(v40);
  uint64_t v45 = 0;
  long long __p = 0u;
  long long v43 = 0u;
  *(_OWORD *)uint64_t v41 = 0u;
  *(_OWORD *)char v42 = 0u;
  if (!sub_449F5C((uint64_t)a1, a2, (uint64_t)v39))
  {
    sub_47E0E4((_OWORD *)a3);
    *(unsigned char *)(a3 + 120) = 0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    long long v6 = (void *)__p;
    if (!(void)__p) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  sub_44A42C(a1, (uint64_t)v39, (uint64_t)&v49);
  if (sub_EA80FC((char **)&v49))
  {
    sub_47E0E4((_OWORD *)a3);
    *(unsigned char *)(a3 + 120) = 0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    goto LABEL_32;
  }
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v20 = sub_EA8430((uint64_t *)&v49);
  sub_ED83E8((uint64_t)(a1 + 3), HIDWORD(v20) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v20) << 32), &v36);
  int v21 = (unint64_t *)v36;
  long long v22 = v37;
  if (v36 == v37)
  {
LABEL_24:
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v46);
      sub_188FC78(v46, (uint64_t)"Reconstructing zilch path failed after finding a base path", 58);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v32, 3u);
      if (SHIBYTE(v33) < 0) {
        operator delete(v32[0]);
      }
      if (v48 < 0) {
        operator delete(v47);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    sub_47E0E4((_OWORD *)a3);
    *(unsigned char *)(a3 + 120) = 0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    long long v24 = (unint64_t *)v36;
    if (!v36) {
      goto LABEL_32;
    }
LABEL_31:
    unint64_t v37 = v24;
    operator delete(v24);
    goto LABEL_32;
  }
  while (1)
  {
    long long v23 = (long long **)nullsub_1(&v49);
    sub_44ACFC((uint64_t)a1, *v23, *v21, (char *)v46);
    if (!sub_EAE144(v46)) {
      break;
    }
    sub_405F44((uint64_t)v46);
    if (++v21 == v22) {
      goto LABEL_24;
    }
  }
  sub_EA7B04((uint64_t)v32, v46);
  uint64_t v25 = v49;
  if ((void)v49)
  {
    uint64_t v26 = *((void *)&v49 + 1);
    long long v27 = (void *)v49;
    if (*((void *)&v49 + 1) != (void)v49)
    {
      do
        uint64_t v26 = sub_405F44(v26 - 472);
      while (v26 != v25);
      long long v27 = (void *)v49;
    }
    *((void *)&v49 + 1) = v25;
    operator delete(v27);
  }
  long long v49 = *(_OWORD *)v32;
  uint64_t v50 = v33;
  v32[1] = 0;
  uint64_t v33 = 0;
  v32[0] = 0;
  if (SHIBYTE(v52) < 0)
  {
    operator delete((void *)v51);
    long long v28 = v32[0];
    long long v51 = v34;
    uint64_t v52 = v35;
    HIBYTE(v35) = 0;
    LOBYTE(v34) = 0;
    if (v32[0])
    {
      uint8x8_t v29 = v32[1];
      uint64_t v30 = v32[0];
      if (v32[1] != v32[0])
      {
        do
          uint8x8_t v29 = (void *)sub_405F44((uint64_t)v29 - 472);
        while (v29 != v28);
        uint64_t v30 = v32[0];
      }
      v32[1] = v28;
      operator delete(v30);
    }
  }
  else
  {
    long long v51 = v34;
    uint64_t v52 = v35;
  }
  *(_OWORD *)a3 = v49;
  *(void *)(a3 + 16) = v50;
  long long v49 = 0uLL;
  uint64_t v50 = 0;
  *(_OWORD *)(a3 + 24) = v51;
  *(void *)(a3 + 40) = v52;
  long long v51 = 0uLL;
  uint64_t v52 = 0;
  *(_OWORD *)(a3 + 48) = v53;
  *(void *)(a3 + 64) = v54;
  uint64_t v54 = 0;
  long long v53 = 0uLL;
  *(_OWORD *)(a3 + 72) = v55;
  *(void *)(a3 + 88) = v56;
  long long v55 = 0uLL;
  uint64_t v56 = 0;
  int v31 = v59;
  *(unsigned char *)(a3 + 120) = v59;
  if (v31)
  {
    *(_OWORD *)(a3 + 96) = v57;
    *(void *)(a3 + 112) = v58;
    uint64_t v58 = 0;
    long long v57 = 0uLL;
  }
  sub_405F44((uint64_t)v46);
  long long v24 = (unint64_t *)v36;
  if (v36) {
    goto LABEL_31;
  }
LABEL_32:
  sub_443A30((uint64_t)&v49);
  long long v6 = (void *)__p;
  if ((void)__p)
  {
LABEL_5:
    *((void *)&__p + 1) = v6;
    operator delete(v6);
  }
LABEL_6:
  long long v7 = (void (***)(void))v42[1];
  if (v42[1])
  {
    uint64_t v8 = v42[1];
    if ((void *)v43 != v42[1])
    {
      uint64_t v9 = v43 - 48;
      long double v10 = (void (***)(void))(v43 - 48);
      double v11 = (void (***)(void))(v43 - 48);
      do
      {
        double v12 = *v11;
        v11 -= 6;
        (*v12)(v10);
        v9 -= 48;
        BOOL v13 = v10 == v7;
        long double v10 = v11;
      }
      while (!v13);
      uint64_t v8 = v42[1];
    }
    *(void *)&long long v43 = v7;
    operator delete(v8);
  }
  uint64_t v14 = (char *)v41[0];
  if (v41[0])
  {
    uint64_t v15 = v41[0];
    if (v41[1] != v41[0])
    {
      long long v16 = (char *)v41[1] - 64;
      long long v17 = (char *)v41[1] - 64;
      int v18 = (void (***)(char *))((char *)v41[1] - 64);
      do
      {
        uint64_t v19 = *v18;
        v18 -= 8;
        (*v19)(v17);
        v16 -= 64;
        BOOL v13 = v17 == v14;
        long long v17 = (char *)v18;
      }
      while (!v13);
      uint64_t v15 = v41[0];
    }
    v41[1] = v14;
    operator delete(v15);
  }
}

void sub_449E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_405F44((uint64_t)&a33);
  if (__p) {
    operator delete(__p);
  }
  sub_443A30(v33 - 240);
  sub_44B860(&a21);
  _Unwind_Resume(a1);
}

BOOL sub_449F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_1106DFC(a2) < 2) {
    return 0;
  }
  uint64_t v11 = a1 + 8;
  LODWORD(v12) = 1;
  uint64_t v13 = 0x4031000000000000;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  LODWORD(v17) = 0;
  if (sub_1106DFC(a2) != 1) {
    sub_451050();
  }
  sub_450670((uint64_t)&v14);
  if (*(void *)(a3 + 72) == *(void *)(a3 + 80))
  {
    uint64_t v11 = a1 + 8;
    LODWORD(v12) = 2;
    uint64_t v13 = 0x4032000000000000;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    LODWORD(v17) = 0;
    if (sub_1106DFC(a2) != 1) {
      sub_451050();
    }
    sub_450670((uint64_t)&v14);
    if (*(void *)(a3 + 72) == *(void *)(a3 + 80))
    {
      uint64_t v11 = a1 + 8;
      LODWORD(v12) = 3;
      uint64_t v13 = 0x4033000000000000;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      LODWORD(v17) = 0;
      if (sub_1106DFC(a2) != 1) {
        sub_451050();
      }
      sub_450670((uint64_t)&v14);
      if (*(void *)(a3 + 72) == *(void *)(a3 + 80))
      {
        uint64_t v11 = a1 + 8;
        LODWORD(v12) = 4;
        uint64_t v13 = 0x4034000000000000;
        long long v14 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        LODWORD(v17) = 0;
        if (sub_1106DFC(a2) != 1) {
          sub_451050();
        }
        sub_450670((uint64_t)&v14);
        if (*(void *)(a3 + 72) == *(void *)(a3 + 80))
        {
          uint64_t v11 = a1 + 8;
          LODWORD(v12) = 5;
          uint64_t v13 = 0x4035000000000000;
          long long v14 = 0u;
          long long v15 = 0u;
          long long v16 = 0u;
          LODWORD(v17) = 0;
          if (sub_1106DFC(a2) != 1) {
            sub_451050();
          }
          sub_450670((uint64_t)&v14);
        }
      }
    }
  }
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v11);
    sub_188FC78(&v11, (uint64_t)"zilch::PathDecoder with distance ", 33);
    long long v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" and angle ", 11);
    uint64_t v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" returned path of size ", 23);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v10 < 0) {
      operator delete(__p);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return *(void *)(a3 + 80) != *(void *)(a3 + 72);
}

void sub_44A368(_Unwind_Exception *a1)
{
  sub_450670(v1);
  _Unwind_Resume(a1);
}

void sub_44A37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_44A404(_Unwind_Exception *a1)
{
  sub_450670(v1);
  _Unwind_Resume(a1);
}

void sub_44A418(_Unwind_Exception *a1)
{
  sub_450670(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_44A42C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_47E0E4(&v95);
  unsigned __int8 v102 = 0;
  memset(v99, 0, sizeof(v99));
  long long v6 = sub_3B3B0((char **)v99);
  *((void *)&v99[0] + 1) = v6;
  sub_EAFC08((uint64_t)v94);
  uint64_t v8 = *(int **)(a2 + 72);
  long long v7 = *(int **)(a2 + 80);
  uint64_t v9 = (char *)v7 - (char *)v8;
  uint64_t v84 = a3;
  int v82 = a1;
  if (v7 != v8)
  {
    int v10 = *v8;
    uint64_t v11 = *((void *)v8 + 1);
    uint64_t v12 = *(void *)(a2 + 24) + (v11 << 6);
    uint64_t v13 = *(void *)(a2 + 48) + 48 * v11;
    if (v10) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v12;
    }
    uint64_t v83 = (uint64_t)(v6 - 24);
    if (sub_40A44C(v14))
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 1;
      if (v9 != 16)
      {
LABEL_56:
        uint64_t v64 = 0;
        for (uint64_t i = (v9 >> 4) - 1; i; --i)
        {
          uint64_t v66 = *(void *)(a2 + 72) + v64;
          int v67 = *(_DWORD *)(v66 + 16);
          uint64_t v68 = *(void *)(v66 + 24);
          uint64_t v69 = *(void *)(a2 + 24) + (v68 << 6);
          uint64_t v70 = *(void *)(a2 + 48) + 48 * v68;
          if (v67) {
            uint64_t v71 = v70;
          }
          else {
            uint64_t v71 = v69;
          }
          if (!sub_40A44C(v71))
          {
            uint64_t v72 = *(void *)(a2 + 72) + v64;
            int v73 = *(_DWORD *)(v72 + 16);
            uint64_t v74 = *(void *)(v72 + 24);
            uint64_t v75 = (const void *)(*(void *)(a2 + 24) + (v74 << 6));
            uint64_t v76 = *(void *)(a2 + 48) + 48 * v74;
            if (v73) {
              long long v77 = (const void *)v76;
            }
            else {
              long long v77 = v75;
            }
            if (!v78) {
              goto LABEL_71;
            }
            uint64_t v79 = (uint64_t)v78;
            unint64_t v80 = v78[3];
            sub_44C36C((uint64_t)(v82 + 3), (v17 << 48) | (v15 << 32) | v16, v80, (uint64_t)__p);
            if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)__p), (int32x4_t)vceqzq_s64(*(int64x2_t *)&v91[24])))) & 1) != 0|| !*(_DWORD *)&v91[16]|| !v93)
            {
              sub_47E0E4((_OWORD *)v84);
              *(unsigned char *)(v81 + 120) = 0;
              *(_OWORD *)(v81 + 48) = 0u;
              *(_OWORD *)(v81 + 64) = 0u;
              *(_OWORD *)(v81 + 80) = 0u;
              goto LABEL_55;
            }
            sub_EAFD8C((uint64_t)v94, (int **)__p);
            uint64_t v88 = sub_52060(v79);
            sub_3A998(v83, &v88);
            uint64_t v16 = v80;
            uint64_t v15 = WORD2(v80);
            uint64_t v17 = BYTE6(v80);
          }
          v64 += 16;
        }
      }
    }
    else
    {
      char v18 = *(int **)(a2 + 72);
      int v19 = *v18;
      uint64_t v20 = *((void *)v18 + 1);
      int v21 = (const void *)(*(void *)(a2 + 24) + (v20 << 6));
      uint64_t v22 = *(void *)(a2 + 48) + 48 * v20;
      if (v19) {
        long long v23 = (const void *)v22;
      }
      else {
        long long v23 = v21;
      }
      if (!v24) {
LABEL_71:
      }
        __cxa_bad_cast();
      uint64_t v25 = v24[3];
      __p[0] = (void *)sub_52060((uint64_t)v24);
      sub_3A998(v83, __p);
      uint64_t v16 = v25;
      uint64_t v15 = WORD2(v25);
      uint64_t v17 = BYTE6(v25);
      if (v9 != 16) {
        goto LABEL_56;
      }
    }
    if (*(void *)(a2 + 80) - *(void *)(a2 + 72) == 16)
    {
      sub_ED7040((uint64_t)(v82 + 3), (((unint64_t)(v17 == 0) << 48) | (v15 << 32) | v16) ^ 0x1000000000000, (uint64_t)__p);
      sub_EAFC44((uint64_t)v94, (v15 << 16) | (v16 << 32) | (2 * (v17 == 0)), (long long *)__p);
    }
  }
  LODWORD(__p[0]) = sub_53FA4(a2);
  double v27 = sub_1106ACC(__p, v26);
  LODWORD(v86) = sub_4F44((unsigned int *)a2);
  double v29 = sub_1106C0C(&v86, v28);
  uint64_t v30 = -1;
  if (v29 <= 180.0 && v27 >= -85.0511288 && v27 <= 85.0511288 && v29 >= -180.0)
  {
    double v31 = fmax(v27, -85.0511288);
    double v32 = v31 * 3.14159265 / 180.0;
    BOOL v33 = v31 < 85.0511288;
    double v34 = 1.48442223;
    if (v33) {
      double v34 = v32;
    }
    long double v35 = sin(v34);
    LODWORD(v36) = ((log((v35 + 1.0) / (1.0 - v35)) / -12.5663706 + 0.5) * 4294967300.0);
    if (v36 >= 0xFFFFFFFE) {
      uint64_t v36 = 4294967294;
    }
    else {
      uint64_t v36 = v36;
    }
    uint64_t v30 = ((v29 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v36 << 32);
  }
  uint64_t v88 = v30;
  int v89 = 0x7FFFFFFF;
  uint64_t v37 = sub_EADD1C((uint64_t)v94);
  sub_44C4E0(v82, v37, (unsigned int *)&v88, (uint64_t)__p);
  sub_EAD920((uint64_t)v94, (uint64_t)__p);
  LODWORD(__p[0]) = sub_53FA4(a2 + 12);
  double v39 = sub_1106ACC(__p, v38);
  int v85 = sub_4F44((unsigned int *)(a2 + 12));
  double v41 = sub_1106C0C(&v85, v40);
  uint64_t v42 = -1;
  if (v41 <= 180.0 && v39 >= -85.0511288 && v39 <= 85.0511288 && v41 >= -180.0)
  {
    double v43 = fmax(v39, -85.0511288);
    double v44 = v43 * 3.14159265 / 180.0;
    BOOL v33 = v43 < 85.0511288;
    double v45 = 1.48442223;
    if (v33) {
      double v45 = v44;
    }
    long double v46 = sin(v45);
    LODWORD(v47) = ((log((v46 + 1.0) / (1.0 - v46)) / -12.5663706 + 0.5) * 4294967300.0);
    if (v47 >= 0xFFFFFFFE) {
      uint64_t v47 = 4294967294;
    }
    else {
      uint64_t v47 = v47;
    }
    uint64_t v42 = ((v41 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v47 << 32);
  }
  uint64_t v86 = v42;
  int v87 = 0x7FFFFFFF;
  uint64_t v48 = sub_EAFF60((uint64_t)v94);
  sub_44C4E0(v82, v48, (unsigned int *)&v86, (uint64_t)__p);
  sub_EADAA8((uint64_t)v94, (uint64_t)__p);
  if (*(void *)(a2 + 80) - *(void *)(a2 + 72) == 16)
  {
    long long v49 = (_DWORD *)sub_69134((uint64_t)v94);
    if (*v49 > *(_DWORD *)sub_EADAD0((uint64_t)v94))
    {
      uint64_t v50 = sub_EADAD0((uint64_t)v94);
      *(_OWORD *)long long __p = *(_OWORD *)v50;
      long long v51 = *(_OWORD *)(v50 + 16);
      long long v52 = *(_OWORD *)(v50 + 32);
      long long v53 = *(_OWORD *)(v50 + 48);
      uint64_t v92 = *(void *)(v50 + 64);
      *(_OWORD *)&v91[16] = v52;
      *(_OWORD *)&v91[32] = v53;
      *(_OWORD *)int v91 = v51;
      uint64_t v54 = (int *)sub_69134((uint64_t)v94);
      int v55 = (int)__p[0];
      if (*v54 > LODWORD(__p[0])) {
        int v55 = *v54;
      }
      LODWORD(__p[0]) = v55;
      sub_EADAA8((uint64_t)v94, (uint64_t)__p);
    }
  }
  sub_EA7B04((uint64_t)__p, v94);
  uint64_t v56 = v95;
  if ((void)v95)
  {
    uint64_t v57 = *((void *)&v95 + 1);
    uint64_t v58 = (void *)v95;
    if (*((void *)&v95 + 1) != (void)v95)
    {
      do
        uint64_t v57 = sub_405F44(v57 - 472);
      while (v57 != v56);
      uint64_t v58 = (void *)v95;
    }
    *((void *)&v95 + 1) = v56;
    operator delete(v58);
  }
  long long v95 = *(_OWORD *)__p;
  uint64_t v96 = *(void *)v91;
  __p[1] = 0;
  *(void *)int v91 = 0;
  __p[0] = 0;
  if (SHIBYTE(v98) < 0)
  {
    operator delete((void *)v97);
    unsigned __int8 v59 = __p[0];
    long long v97 = *(_OWORD *)&v91[8];
    uint64_t v98 = *(void *)&v91[24];
    v91[31] = 0;
    v91[8] = 0;
    if (__p[0])
    {
      int v60 = __p[1];
      unint64_t v61 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          int v60 = (void *)sub_405F44((uint64_t)v60 - 472);
        while (v60 != v59);
        unint64_t v61 = __p[0];
      }
      __p[1] = v59;
      operator delete(v61);
    }
  }
  else
  {
    long long v97 = *(_OWORD *)&v91[8];
    uint64_t v98 = *(void *)&v91[24];
  }
  *(_OWORD *)uint64_t v84 = v95;
  *(void *)(v84 + 16) = v96;
  long long v95 = 0uLL;
  uint64_t v96 = 0;
  *(_OWORD *)(v84 + 24) = v97;
  *(void *)(v84 + 40) = v98;
  long long v97 = 0uLL;
  uint64_t v98 = 0;
  *(_OWORD *)(v84 + 48) = v99[0];
  *(void *)(v84 + 64) = *(void *)&v99[1];
  memset(v99, 0, 24);
  *(_OWORD *)(v84 + 72) = *(_OWORD *)((char *)&v99[1] + 8);
  *(void *)(v84 + 88) = *((void *)&v99[2] + 1);
  *((void *)&v99[1] + 1) = 0;
  v99[2] = 0uLL;
  int v62 = v102;
  *(unsigned char *)(v84 + 120) = v102;
  if (v62)
  {
    *(_OWORD *)(v84 + 96) = v100;
    *(void *)(v84 + 112) = v101;
    uint64_t v101 = 0;
    long long v100 = 0uLL;
  }
LABEL_55:
  sub_405F44((uint64_t)v94);
  return sub_443A30((uint64_t)&v95);
}

void sub_44AC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

void sub_44ACFC(uint64_t a1@<X0>, long long *a2@<X1>, unint64_t a3@<X2>, char *a4@<X8>)
{
  unint64_t v101 = a3;
  if (sub_EB04A8((uint64_t)a2))
  {
    long long v99 = 0u;
    long long v100 = 0u;
    long long v98 = 0u;
    long long v95 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    uint64_t v92 = 0;
    int v93 = 0;
    uint64_t v94 = 0;
    uint64_t v7 = sub_3C80F8((uint64_t)a2);
    unint64_t v8 = *(void *)(v7 + 72);
    unint64_t v9 = ((unint64_t)*(unsigned int *)(v7 + 80) >> 14) & 0x3FFFC;
    *(void *)&long long v102 = (((((v8 >> 16) & 0xFFFF0000 | (v8 << 32) | (2 * ((v8 & 0xFF000000000000) == 0))) + v9) << 16) & 0xFFFF00000000 | ((((v8 >> 16) & 0xFFFF0000 | (v8 << 32) | (2 * ((v8 & 0xFF000000000000) == 0))) + v9) >> 32) | ((unint64_t)((v8 & 0xFF000000000000) == 0) << 48)) ^ 0x1000000000000;
    sub_44C208(a1, &v101, &v102, &v90);
    int v10 = v90;
    uint64_t v11 = v91;
    if (v90 == v91)
    {
      sub_EAFC08((uint64_t)a4);
      goto LABEL_65;
    }
    uint64_t v78 = (uint64_t)a4;
    do
    {
      *(void *)&long long v102 = -1;
      sub_44CA30((char **)&v95, v10, &v102);
      uint64_t v14 = *((void *)&v98 + 1);
      uint64_t v15 = 32 * (v99 - *((void *)&v98 + 1)) - 1;
      uint64_t v16 = v95;
      uint64_t v17 = v96;
      if ((void)v99 == *((void *)&v98 + 1)) {
        uint64_t v15 = 0;
      }
      unint64_t v18 = *((void *)&v100 + 1) + v100;
      if (v15 == *((void *)&v100 + 1) + (void)v100)
      {
        sub_42BEC((uint64_t)&v98);
        uint64_t v14 = *((void *)&v98 + 1);
        unint64_t v18 = *((void *)&v100 + 1) + v100;
      }
      uint64_t v12 = (void *)(*(void *)(v14 + ((v18 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v18);
      *uint64_t v12 = 0;
      v12[1] = 0x4EC4EC4EC4EC4EC5 * ((v17 - v16) >> 3) - 1;
      uint64_t v13 = ++*((void *)&v100 + 1);
      v10 += 6;
    }
    while (v10 != v11);
    int v87 = 0;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    if (!v13)
    {
LABEL_44:
      sub_EAFC08((uint64_t)&v102);
      uint64_t v42 = (uint64_t)v92;
      if (v92 == v93)
      {
        sub_EAFC08(v78);
      }
      else
      {
        sub_EAFD8C((uint64_t)&v102, (int **)v92);
        while (1)
        {
          unint64_t v43 = *(void *)(v42 + 96);
          if (v43 == -1) {
            break;
          }
          uint64_t v42 = sub_44CBE8(&v95, v43);
          sub_EAFD8C((uint64_t)&v102, (int **)v42);
        }
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v82);
          sub_188FC78(&v82, (uint64_t)"Reconstructed engine path of ", 29);
          sub_EB04A8((uint64_t)&v102);
          double v44 = (void *)std::ostream::operator<<();
          sub_188FC78(v44, (uint64_t)" arcs", 5);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 2u);
          if (v81 < 0) {
            operator delete(__p);
          }
          if ((v86[31] & 0x80000000) != 0) {
            operator delete(*(void **)&v86[8]);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unint64_t v45 = sub_3C80F8((uint64_t)&v102);
        uint64_t v46 = sub_3FA3A8((uint64_t)&v102);
        if (v45 != v46)
        {
          uint64_t v47 = (_OWORD *)(v46 - 96);
          if (v46 - 96 > v45)
          {
            unint64_t v48 = v45 + 96;
            do
            {
              long long v84 = *(_OWORD *)(v48 - 64);
              long long v85 = *(_OWORD *)(v48 - 48);
              *(_OWORD *)uint64_t v86 = *(_OWORD *)(v48 - 32);
              *(_OWORD *)&v86[16] = *(_OWORD *)(v48 - 16);
              long long v82 = *(_OWORD *)(v48 - 96);
              long long v83 = *(_OWORD *)(v48 - 80);
              long long v49 = v47[1];
              *(_OWORD *)(v48 - 96) = *v47;
              *(_OWORD *)(v48 - 80) = v49;
              long long v51 = v47[3];
              long long v50 = v47[4];
              long long v52 = v47[2];
              *(_OWORD *)(v48 - 20) = *(_OWORD *)((char *)v47 + 76);
              *(_OWORD *)(v48 - 48) = v51;
              *(_OWORD *)(v48 - 32) = v50;
              *(_OWORD *)(v48 - 64) = v52;
              v47[4] = *(_OWORD *)v86;
              *(_OWORD *)((char *)v47 + 76) = *(_OWORD *)&v86[12];
              _OWORD *v47 = v82;
              v47[3] = v85;
              int8x8_t v47[2] = v84;
              v47[1] = v83;
              v47 -= 6;
              BOOL v53 = v48 >= (unint64_t)v47;
              v48 += 96;
            }
            while (!v53);
          }
        }
        uint64_t v54 = sub_69134((uint64_t)a2);
        sub_EAD920((uint64_t)&v102, v54);
        uint64_t v55 = sub_EADAD0((uint64_t)a2);
        sub_EADAA8((uint64_t)&v102, v55);
        uint64_t v56 = v105;
        *(void *)(v78 + 16) = v103;
        *(void *)(v78 + 40) = v56;
        uint64_t v57 = v112;
        *(void *)(v78 + 128) = v110;
        *(void *)(v78 + 152) = v57;
        uint64_t v58 = v117;
        *(void *)(v78 + 176) = v114;
        *(_OWORD *)uint64_t v78 = v102;
        long long v102 = 0uLL;
        *(_OWORD *)(v78 + 24) = v104;
        uint64_t v103 = 0;
        long long v104 = 0uLL;
        uint64_t v105 = 0;
        long long v59 = v106;
        long long v60 = v107;
        long long v61 = v108[0];
        *(_OWORD *)(v78 + 94) = *(_OWORD *)((char *)v108 + 14);
        *(_OWORD *)(v78 + 64) = v60;
        *(_OWORD *)(v78 + 80) = v61;
        *(_OWORD *)(v78 + 48) = v59;
        *(_OWORD *)(v78 + 112) = v109;
        long long v109 = 0uLL;
        *(_OWORD *)(v78 + 136) = v111;
        uint64_t v110 = 0;
        long long v111 = 0uLL;
        uint64_t v112 = 0;
        *(_OWORD *)(v78 + 160) = v113;
        long long v113 = 0uLL;
        long long v62 = v115;
        long long v63 = v116;
        *(void *)(v78 + 216) = v58;
        *(_OWORD *)(v78 + 200) = v63;
        *(_OWORD *)(v78 + 184) = v62;
        *(_OWORD *)(v78 + 224) = v118;
        uint64_t v64 = v121;
        *(void *)(v78 + 240) = v119;
        uint64_t v114 = 0;
        long long v118 = 0uLL;
        uint64_t v119 = 0;
        *(_OWORD *)(v78 + 248) = v120;
        *(void *)(v78 + 264) = v64;
        long long v120 = 0uLL;
        uint64_t v121 = 0;
        *(_OWORD *)(v78 + 272) = v122;
        unsigned int v65 = v124;
        *(_DWORD *)(v78 + 296) = v124;
        if (v65 <= 1) {
          *(void *)(v78 + 288) = v123;
        }
        long long v66 = *(_OWORD *)v134;
        *(_OWORD *)(v78 + 432) = v133;
        *(_OWORD *)(v78 + 448) = v66;
        long long v67 = v130;
        *(_OWORD *)(v78 + 368) = v129;
        *(_OWORD *)(v78 + 384) = v67;
        long long v68 = v132;
        *(_OWORD *)(v78 + 400) = v131;
        *(_OWORD *)(v78 + 416) = v68;
        long long v69 = v126;
        *(_OWORD *)(v78 + 304) = v125;
        *(_OWORD *)(v78 + 320) = v69;
        long long v70 = v128;
        *(_OWORD *)(v78 + 336) = v127;
        *(_OWORD *)(v78 + 352) = v70;
        *(void *)(v78 + 463) = *(void *)&v134[15];
      }
      sub_405F44((uint64_t)&v102);
      if (v87)
      {
        uint64_t v88 = v87;
        operator delete(v87);
      }
LABEL_65:
      if (v90)
      {
        int v91 = v90;
        operator delete(v90);
      }
      if (v92)
      {
        int v93 = v92;
        operator delete(v92);
      }
      if (v95)
      {
        uint64_t v96 = v95;
        operator delete(v95);
      }
      uint64_t v71 = (void **)*((void *)&v98 + 1);
      uint64_t v72 = (void **)v99;
      *((void *)&v100 + 1) = 0;
      unint64_t v73 = v99 - *((void *)&v98 + 1);
      if ((void)v99 - *((void *)&v98 + 1) >= 0x11uLL)
      {
        do
        {
          operator delete(*v71);
          uint64_t v72 = (void **)v99;
          uint64_t v71 = (void **)(*((void *)&v98 + 1) + 8);
          *((void *)&v98 + 1) = v71;
          unint64_t v73 = v99 - (void)v71;
        }
        while ((void)v99 - (void)v71 > 0x10uLL);
      }
      unint64_t v74 = v73 >> 3;
      if (v74 == 1)
      {
        uint64_t v75 = 128;
      }
      else
      {
        if (v74 != 2) {
          goto LABEL_78;
        }
        uint64_t v75 = 256;
      }
      *(void *)&long long v100 = v75;
LABEL_78:
      if (v71 != v72)
      {
        do
        {
          uint64_t v76 = *v71++;
          operator delete(v76);
        }
        while (v71 != v72);
        if ((void)v99 != *((void *)&v98 + 1)) {
          *(void *)&long long v99 = v99 + ((*((void *)&v98 + 1) - v99 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
      }
      if ((void)v98) {
        operator delete((void *)v98);
      }
      return;
    }
    uint64_t v19 = a1 + 24;
    while (1)
    {
      uint64_t v20 = 32 * (v99 - *((void *)&v98 + 1)) - 1;
      if ((void)v99 == *((void *)&v98 + 1)) {
        uint64_t v20 = 0;
      }
      long long v102 = *(_OWORD *)(*(void *)(*((void *)&v98 + 1)
                                   + (((unint64_t)(v100 + v13 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (v100 + v13 - 1));
      *((void *)&v100 + 1) = v13 - 1;
      if ((unint64_t)(v20 - (v13 + v100) + 1) >= 0x200)
      {
        operator delete(*(void **)(v99 - 8));
        *(void *)&long long v99 = v99 - 8;
      }
      uint64_t v21 = sub_EAFDCC((uint64_t)a2, v102);
      uint64_t v22 = sub_44CBE8(&v95, *((unint64_t *)&v102 + 1));
      uint64_t v23 = v102;
      if (v23 + 1 == sub_EB04A8((uint64_t)a2))
      {
        uint64_t v24 = *(void *)(v22 + 72);
        unint64_t v25 = *(void *)(v21 + 72);
        if ((v24 & 0xFFFFFFFFFFFFLL) == (v25 & 0xFFFFFFFFFFFFLL)
          && ((v24 & 0xFF000000000000) == 0) != (HIWORD(v25) & 1))
        {
          break;
        }
      }
      uint64_t v26 = sub_44CBE8(&v95, *((unint64_t *)&v102 + 1));
      sub_ED8808(v19, (((*(void *)(v26 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v26 + 72) << 32) | (2* ((*(void *)(v26 + 72) & 0xFF000000000000) == 0)))+ (((unint64_t)*(unsigned int *)(v26 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v26 + 88) >> 1) & 1, 0, &v87, 0);
      double v27 = v87;
      double v28 = v88;
      while (v27 != v28)
      {
        uint64_t v30 = *(void *)(v21 + 72);
        uint64_t v31 = v27[4];
        if ((v30 & 0xFFFFFFFFFFFFLL) == (v31 & 0xFFFFFFFFFFFFLL)
          && ((v30 & 0xFF000000000000) == 0) == ((v31 & 0x1000000000000) == 0))
        {
          sub_44CA30((char **)&v95, v27, (void *)&v102 + 1);
          uint64_t v32 = v102;
          if (v32 + 1 >= sub_EB04A8((uint64_t)a2))
          {
            double v38 = (long long *)sub_44CBE8(&v95, *((unint64_t *)&v102 + 1));
            sub_44CE28((char **)&v92, v38);
            double v39 = (void **)*((void *)&v98 + 1);
            *((void *)&v100 + 1) = 0;
            unint64_t v40 = v99 - *((void *)&v98 + 1);
            if ((void)v99 - *((void *)&v98 + 1) >= 0x11uLL)
            {
              do
              {
                operator delete(*v39);
                double v39 = (void **)(*((void *)&v98 + 1) + 8);
                *((void *)&v98 + 1) = v39;
                unint64_t v40 = v99 - (void)v39;
              }
              while ((void)v99 - (void)v39 > 0x10uLL);
            }
            goto LABEL_36;
          }
          uint64_t v33 = *((void *)&v98 + 1);
          uint64_t v34 = 32 * (v99 - *((void *)&v98 + 1)) - 1;
          uint64_t v79 = v102;
          long double v35 = v95;
          uint64_t v36 = v96;
          if ((void)v99 == *((void *)&v98 + 1)) {
            uint64_t v34 = 0;
          }
          unint64_t v37 = *((void *)&v100 + 1) + v100;
          if (v34 == *((void *)&v100 + 1) + (void)v100)
          {
            sub_42BEC((uint64_t)&v98);
            uint64_t v33 = *((void *)&v98 + 1);
            unint64_t v37 = *((void *)&v100 + 1) + v100;
          }
          v29.i64[0] = v79;
          v29.i64[1] = 0x4EC4EC4EC4EC4EC5 * ((v36 - v35) >> 3);
          *(int64x2_t *)(*(void *)(v33 + ((v37 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v37) = vaddq_s64(v29, (int64x2_t)xmmword_20B8D90);
          ++*((void *)&v100 + 1);
        }
        v27 += 12;
      }
      uint64_t v13 = *((void *)&v100 + 1);
      if (!*((void *)&v100 + 1)) {
        goto LABEL_44;
      }
    }
    sub_44CE28((char **)&v92, (long long *)v22);
    long long v77 = (void **)*((void *)&v98 + 1);
    *((void *)&v100 + 1) = 0;
    unint64_t v40 = v99 - *((void *)&v98 + 1);
    if ((void)v99 - *((void *)&v98 + 1) >= 0x11uLL)
    {
      do
      {
        operator delete(*v77);
        long long v77 = (void **)(*((void *)&v98 + 1) + 8);
        *((void *)&v98 + 1) = v77;
        unint64_t v40 = v99 - (void)v77;
      }
      while ((void)v99 - (void)v77 > 0x10uLL);
    }
LABEL_36:
    if (v40 >> 3 == 1)
    {
      uint64_t v41 = 128;
    }
    else
    {
      if (v40 >> 3 != 2)
      {
LABEL_41:
        sub_457D90(&v98);
        if ((void)v99 != *((void *)&v98 + 1)) {
          *(void *)&long long v99 = v99 + ((*((void *)&v98 + 1) - v99 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        sub_457E84((uint64_t)&v98);
        long long v99 = 0u;
        long long v100 = 0u;
        long long v98 = 0u;
        goto LABEL_44;
      }
      uint64_t v41 = 256;
    }
    *(void *)&long long v100 = v41;
    goto LABEL_41;
  }

  sub_444D20(a4, a2);
}

void sub_44B740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (__p)
  {
    operator delete(__p);
    long long v66 = a56;
    if (!a56)
    {
LABEL_3:
      long long v67 = a59;
      if (!a59) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    long long v66 = a56;
    if (!a56) {
      goto LABEL_3;
    }
  }
  operator delete(v66);
  long long v67 = a59;
  if (!a59)
  {
LABEL_4:
    long long v68 = a62;
    if (!a62) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v67);
  long long v68 = a62;
  if (!a62)
  {
LABEL_5:
    sub_431BC((uint64_t)&a65);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v68);
  sub_431BC((uint64_t)&a65);
  _Unwind_Resume(a1);
}

void *sub_44B860(void *a1)
{
  unint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void (***)(void))a1[6];
  if (v3)
  {
    uint64_t v4 = (void (***)(void))a1[7];
    unint64_t v5 = (void *)a1[6];
    if (v4 != v3)
    {
      long long v6 = v4 - 6;
      uint64_t v7 = v4 - 6;
      unint64_t v8 = v4 - 6;
      do
      {
        unint64_t v9 = *v8;
        v8 -= 6;
        (*v9)(v7);
        v6 -= 6;
        BOOL v10 = v7 == v3;
        uint64_t v7 = v8;
      }
      while (!v10);
      unint64_t v5 = (void *)a1[6];
    }
    a1[7] = v3;
    operator delete(v5);
  }
  uint64_t v11 = (void (***)(void))a1[3];
  if (v11)
  {
    uint64_t v12 = (void (***)(void))a1[4];
    uint64_t v13 = (void *)a1[3];
    if (v12 != v11)
    {
      uint64_t v14 = v12 - 8;
      uint64_t v15 = v12 - 8;
      uint64_t v16 = v12 - 8;
      do
      {
        uint64_t v17 = *v16;
        v16 -= 8;
        (*v17)(v15);
        v14 -= 8;
        BOOL v10 = v15 == v11;
        uint64_t v15 = v16;
      }
      while (!v10);
      uint64_t v13 = (void *)a1[3];
    }
    a1[4] = v11;
    operator delete(v13);
  }
  return a1;
}

uint64_t sub_44B974@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X1>, char *a3@<X8>)
{
  sub_44BDCC(a1, a2, (uint64_t)v18);
  if (sub_EAE144(v18))
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v14);
      sub_188FC78(&v14, (uint64_t)"Reconstructing base path from geoIDs failed", 43);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (SHIBYTE(v13) < 0) {
        operator delete(__p);
      }
      if (v17 < 0) {
        operator delete(v16);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    sub_EAFC08((uint64_t)a3);
  }
  else
  {
    long long __p = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v5 = sub_EAFECC((uint64_t)v18);
    sub_ED83E8((uint64_t)(a1 + 3), HIDWORD(v5) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v5) << 32), &__p);
    long long v6 = (unint64_t *)__p;
    uint64_t v7 = v12;
    if (__p == v12)
    {
LABEL_12:
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&v14);
        sub_188FC78(&v14, (uint64_t)"Reconstructing geoID path failed after finding a base path", 58);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v9, 3u);
        if (v10 < 0) {
          operator delete(v9);
        }
        if (v17 < 0) {
          operator delete(v16);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_EAFC08((uint64_t)a3);
    }
    else
    {
      while (1)
      {
        sub_44ACFC((uint64_t)a1, v18, *v6, a3);
        if (!sub_EAE144(a3)) {
          break;
        }
        sub_405F44((uint64_t)a3);
        if (++v6 == v7) {
          goto LABEL_12;
        }
      }
    }
    if (__p)
    {
      uint64_t v12 = (unint64_t *)__p;
      operator delete(__p);
    }
  }
  return sub_405F44((uint64_t)v18);
}

void sub_44BCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a22);
  if (a16) {
    operator delete(a16);
  }
  sub_405F44((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t sub_44BDCC@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  sub_EAFC08((uint64_t)&v56);
  long long v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v34 = a2;
    LOWORD(v8) = 0;
    uint64_t v9 = 0;
    unsigned __int8 v10 = 1;
    do
    {
      uint64_t v11 = *v6;
      if (*v6 >= 0) {
        uint64_t v12 = *v6;
      }
      else {
        uint64_t v12 = -v11;
      }
      unint64_t v13 = sub_2FD4C0(*a1, v12);
      BOOL v14 = v13 > 0xFFFFFFFEFFFFFFFFLL || v13 == 0;
      int v15 = v14;
      if (v14) {
        unint64_t v16 = 0;
      }
      else {
        unint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
      }
      if (!v16)
      {
LABEL_28:
        sub_EAFC08(a3);
        return sub_405F44((uint64_t)&v56);
      }
      if (v11 < 1) {
        int v17 = 1;
      }
      else {
        int v17 = v15;
      }
      if (v9)
      {
        uint64_t v18 = 0x1000000000000;
        if (!v17) {
          uint64_t v18 = 0;
        }
        sub_44C36C((uint64_t)(a1 + 3), ((unint64_t)(unsigned __int16)v8 << 32) | ((unint64_t)v10 << 48) | v9, v18 | v16, (uint64_t)&v46);
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(v46), (int32x4_t)vceqzq_s64(v50)))) & 1) != 0
          || !v49
          || !v55)
        {
          goto LABEL_28;
        }
        sub_EAFD8C((uint64_t)&v56, (int **)&v46);
      }
      unint64_t v8 = HIDWORD(v16);
      uint64_t v9 = v16;
      ++v6;
      unsigned __int8 v10 = v17;
    }
    while (v6 != v7);
    if ((char *)v34[1] - (char *)*v34 == 8)
    {
      sub_ED7040((uint64_t)(a1 + 3), ((v8 << 32) | ((unint64_t)(v17 == 0) << 48) | v16) ^ 0x1000000000000, (uint64_t)&v46);
      sub_EAFC44((uint64_t)&v56, ((unint64_t)v16 << 32) | (v8 << 16) | (2 * (v17 == 0)), (long long *)v46.i8);
    }
  }
  v46.i64[1] = 0;
  uint64_t v47 = 0;
  char v48 = 0;
  uint64_t v49 = 0x3FF0000000000000;
  v50.i8[0] = 1;
  v50.i64[1] = 0;
  uint64_t v51 = 0;
  char v52 = 0;
  int v53 = 36000;
  char v54 = 0;
  v46.i32[0] = 0;
  sub_EAD920((uint64_t)&v56, (uint64_t)&v46);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  char v38 = 0;
  uint64_t v39 = 0x3FF0000000000000;
  char v40 = 1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  char v43 = 0;
  int v44 = 36000;
  char v45 = 0;
  int v35 = 1000000000;
  sub_EADAA8((uint64_t)&v56, (uint64_t)&v35);
  uint64_t v19 = v59;
  *(void *)(a3 + 16) = v57;
  *(void *)(a3 + 40) = v19;
  uint64_t v20 = v66;
  *(void *)(a3 + 128) = v64;
  *(_OWORD *)a3 = v56;
  long long v56 = 0uLL;
  *(_OWORD *)(a3 + 24) = v58;
  uint64_t v57 = 0;
  long long v58 = 0uLL;
  uint64_t v59 = 0;
  long long v21 = v60;
  long long v22 = v61;
  long long v23 = v62[0];
  *(_OWORD *)(a3 + 94) = *(_OWORD *)((char *)v62 + 14);
  *(_OWORD *)(a3 + 64) = v22;
  *(_OWORD *)(a3 + 80) = v23;
  *(_OWORD *)(a3 + 48) = v21;
  *(_OWORD *)(a3 + 112) = v63;
  long long v63 = 0uLL;
  *(_OWORD *)(a3 + 136) = v65;
  *(void *)(a3 + 152) = v20;
  uint64_t v64 = 0;
  long long v65 = 0uLL;
  uint64_t v66 = 0;
  *(_OWORD *)(a3 + 160) = v67;
  uint64_t v24 = v71;
  *(void *)(a3 + 176) = v68;
  long long v67 = 0uLL;
  long long v25 = v69;
  long long v26 = v70;
  *(void *)(a3 + 216) = v24;
  *(_OWORD *)(a3 + 200) = v26;
  *(_OWORD *)(a3 + 184) = v25;
  *(_OWORD *)(a3 + 224) = v72;
  uint64_t v27 = v75;
  *(void *)(a3 + 240) = v73;
  uint64_t v68 = 0;
  long long v72 = 0uLL;
  *(_OWORD *)(a3 + 248) = v74;
  *(void *)(a3 + 264) = v27;
  uint64_t v75 = 0;
  uint64_t v73 = 0;
  long long v74 = 0uLL;
  *(_OWORD *)(a3 + 272) = v76;
  LODWORD(v20) = v78;
  *(_DWORD *)(a3 + 296) = v78;
  if (v20 <= 1) {
    *(void *)(a3 + 288) = v77;
  }
  long long v28 = *(_OWORD *)v88;
  *(_OWORD *)(a3 + 432) = v87;
  *(_OWORD *)(a3 + 448) = v28;
  long long v29 = v84;
  *(_OWORD *)(a3 + 368) = v83;
  *(_OWORD *)(a3 + 384) = v29;
  long long v30 = v86;
  *(_OWORD *)(a3 + 400) = v85;
  *(_OWORD *)(a3 + 416) = v30;
  long long v31 = v80;
  *(_OWORD *)(a3 + 304) = v79;
  *(_OWORD *)(a3 + 320) = v31;
  long long v32 = v82;
  *(_OWORD *)(a3 + 336) = v81;
  *(_OWORD *)(a3 + 352) = v32;
  *(void *)(a3 + 463) = *(void *)&v88[15];
  return sub_405F44((uint64_t)&v56);
}

void sub_44C178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_44C18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_44C1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_44C1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_44C1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_44C1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_44C1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_44C208(uint64_t a1@<X0>, unint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_ED8808(a1 + 24, *a2, 0, a4, 0);
  long long v6 = (_OWORD *)a4[1];
  if ((_OWORD *)*a4 != v6)
  {
    for (uint64_t i = *a4 + 96; ; i += 96)
    {
      uint64_t v8 = *(void *)(i - 24);
      if ((v8 & 0xFFFFFFFFFFFFLL) != (*a3 & 0xFFFFFFFFFFFFLL)
        || ((*a3 & 0x1000000000000) == 0) != ((v8 & 0xFF000000000000) == 0))
      {
        break;
      }
      if (i == (void)v6) {
        return;
      }
    }
    unsigned __int8 v10 = (_OWORD *)(i - 96);
    if ((_OWORD *)(i - 96) != v6)
    {
      while ((_OWORD *)i != v6)
      {
        uint64_t v11 = *(void *)(i + 72);
        if ((v11 & 0xFFFFFFFFFFFFLL) == (*a3 & 0xFFFFFFFFFFFFLL)
          && ((v11 & 0xFF000000000000) == 0) == ((*a3 & 0x1000000000000) == 0))
        {
          long long v12 = *(_OWORD *)(i + 16);
          _OWORD *v10 = *(_OWORD *)i;
          v10[1] = v12;
          long long v13 = *(_OWORD *)(i + 32);
          long long v14 = *(_OWORD *)(i + 48);
          long long v15 = *(_OWORD *)(i + 64);
          *(_OWORD *)((char *)v10 + 76) = *(_OWORD *)(i + 76);
          v10[3] = v14;
          v10[4] = v15;
          v10[2] = v13;
          v10 += 6;
        }
        i += 96;
      }
    }
    if (v10 != v6) {
      a4[1] = v10;
    }
  }
}

void sub_44C350(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_44C36C(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_ED8808(a1, (a2 >> 16) & 0xFFFF0000 | (a2 << 32) | (2 * ((a2 & 0xFF000000000000) == 0)), 0, &v19, 1);
  long long v6 = v19;
  uint64_t v7 = v19;
  if (v19 != v20)
  {
    uint64_t v7 = v19;
    while (1)
    {
      unint64_t v8 = *((void *)v7 + 9);
      uint64_t v9 = (v8 >> 16) & 0xFFFF0000 | (v8 << 32);
      BOOL v10 = (v8 & 0xFF000000000000) == 0;
      unint64_t v11 = (v9 | (2 * v10)) + (((unint64_t)*((unsigned int *)v7 + 20) >> 14) & 0x3FFFC);
      unint64_t v12 = HIDWORD(v11);
      int v13 = WORD1(v11);
      BOOL v14 = v12 == a3 && v13 == WORD2(a3);
      if (v14 && ((HIWORD(a3) & 1 ^ v10) & 1) != 0) {
        break;
      }
      v7 += 6;
      if (v7 == v20) {
        goto LABEL_13;
      }
    }
  }
  if (v7 == v20)
  {
LABEL_13:
    *(_DWORD *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_WORD *)(a4 + 36) = -1;
    *(unsigned char *)(a4 + 38) = 0;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_DWORD *)(a4 + 72) = 0;
    *(_WORD *)(a4 + 76) = -1;
    *(unsigned char *)(a4 + 78) = 0;
    *(_DWORD *)(a4 + 80) = 0;
    *(_WORD *)(a4 + 84) = *(_WORD *)(a4 + 84) & 0x8000 | 0x280;
    *(_WORD *)(a4 + 86) = 0;
    *(unsigned char *)(a4 + 88) &= 0xE0u;
    if (!v6) {
      return;
    }
    goto LABEL_14;
  }
  long long v15 = v7[1];
  *(_OWORD *)a4 = *v7;
  *(_OWORD *)(a4 + 16) = v15;
  long long v16 = v7[2];
  long long v17 = v7[3];
  long long v18 = v7[5];
  *(_OWORD *)(a4 + 64) = v7[4];
  *(_OWORD *)(a4 + 80) = v18;
  *(_OWORD *)(a4 + 32) = v16;
  *(_OWORD *)(a4 + 48) = v17;
  if (v6)
  {
LABEL_14:
    uint64_t v20 = v6;
    operator delete(v6);
  }
}

void sub_44C4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_44C4E0(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  long long v6 = (void *)(a4 + 8);
  *(void *)(a4 + 16) = 0;
  *(unsigned char *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0x3FF0000000000000;
  *(unsigned char *)(a4 + 40) = 1;
  *(void *)(a4 + 48) = 0;
  *(void *)(a4 + 56) = 0;
  *(unsigned char *)(a4 + 64) = 0;
  *(_DWORD *)(a4 + 66) = 36000;
  *(unsigned char *)(a4 + 70) = 0;
  sub_2954EC(*a1, *(void *)(a2 + 32), (uint64_t)&v50);
  sub_2E4B5C((uint64_t)&v50, &v54);
  if (__p)
  {
    char v52 = (double *)__p;
    operator delete(__p);
  }
  unint64_t v11 = v54;
  unint64_t v12 = v55;
  if (v54 == v55)
  {
    unint64_t v13 = -1;
    unint64_t v12 = v54;
    int v14 = 0x7FFFFFFF;
  }
  else if ((char *)v55 - (unsigned char *)v54 == 12)
  {
    unint64_t v13 = *(void *)v54;
    int v14 = *((_DWORD *)v54 + 2);
  }
  else
  {
    unint64_t v15 = sub_450B4C((uint64_t *)&v54, 0, 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (unsigned char *)v54) >> 2) - 1, a3, 0, 0x7FFFFFFFFFFFFFFFLL, 1, v7, v8, v9, v10);
    if (v15 >= -1 - 0x5555555555555555 * (((char *)v55 - (unsigned char *)v54) >> 2)) {
      unint64_t v18 = v15;
    }
    else {
      unint64_t v18 = v15 + 1;
    }
    unint64_t v13 = sub_450830((_DWORD *)v54 + 3 * v15, (_DWORD *)v54 + 3 * v18, a3, v16, v17);
    unint64_t v11 = v54;
    unint64_t v12 = v55;
  }
  unint64_t v48 = v13;
  int v49 = v14;
  uint64_t v58 = 0x7FEFFFFFFFFFFFFFLL;
  double v19 = NAN;
  uint64_t v56 = -1;
  int v57 = 0x7FFFFFFF;
  int64x2_t v50 = (double *)&v48;
  long long __p = &v58;
  char v52 = (double *)&v56;
  if (v11 != v12 && v11 + 3 != v12)
  {
    do
    {
      sub_457FB8((uint64_t)&v50, v11, v11 + 3, v19, v8, v9, v10);
      uint64_t v20 = v11 + 6;
      v11 += 3;
    }
    while (v20 != v12);
    unint64_t v11 = v54;
    unint64_t v12 = v55;
  }
  double v60 = 0.0;
  double v61 = 0.0;
  uint64_t v59 = 0x7FEFFFFFFFFFFFFFLL;
  int64x2_t v50 = (double *)&v56;
  long long __p = &v59;
  char v52 = &v60;
  int v53 = &v61;
  if (v11 == v12 || v11 + 3 == v12)
  {
    *(_DWORD *)a4 = vcvtad_u64_f64(0.0);
    unsigned int v23 = v48;
    unsigned int v22 = HIDWORD(v48);
    if (v48 == -1 && HIDWORD(v48) == -1) {
      goto LABEL_39;
    }
  }
  else
  {
    do
    {
      double v19 = sub_4582C8(&v50, (uint64_t)v11, v11 + 3, v19);
      uint64_t v21 = v11 + 6;
      v11 += 3;
    }
    while (v21 != v12);
    if (v61 == 0.0)
    {
      *(_DWORD *)a4 = vcvtad_u64_f64(0.0);
      unsigned int v23 = v48;
      unsigned int v22 = HIDWORD(v48);
      if (v48 != -1 || HIDWORD(v48) != -1) {
        goto LABEL_37;
      }
LABEL_39:
      *long long v6 = 0x7FFFFFFFFFFFFFFFLL;
      long long v30 = v54;
      if (!v54) {
        return;
      }
      goto LABEL_40;
    }
    if (v60 / v61 <= 1.0) {
      double v26 = v60 / v61 * 1000000000.0;
    }
    else {
      double v26 = 1000000000.0;
    }
    *(_DWORD *)a4 = vcvtad_u64_f64(v26);
    unsigned int v23 = v48;
    unsigned int v22 = HIDWORD(v48);
    if (v48 == -1 && HIDWORD(v48) == -1) {
      goto LABEL_39;
    }
  }
LABEL_37:
  unsigned int v29 = *a3;
  unsigned int v28 = a3[1];
  if (v29 == -1 && v28 == -1) {
    goto LABEL_39;
  }
  long double v31 = exp(3.14159265 - (double)v22 * 6.28318531 / 4294967300.0);
  long double v32 = atan((v31 - 1.0 / v31) * 0.5) * 57.2957795 * 0.0174532925;
  v33.i64[0] = v23;
  v33.i64[1] = v29;
  long double v34 = exp(3.14159265 - (double)v28 * 6.28318531 / 4294967300.0);
  long double v35 = atan((v34 - 1.0 / v34) * 0.5) * 57.2957795 * 0.0174532925;
  int64x2_t v36 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v33), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v47 = vsubq_f64((float64x2_t)v36, (float64x2_t)vdupq_laneq_s64(v36, 1)).f64[0];
  long double v37 = sin((v32 - v35) * 0.5);
  long double v38 = v37 * v37;
  double v39 = cos(v32);
  long double v40 = v39 * cos(v35);
  long double v41 = sin(0.5 * v47);
  long double v42 = atan2(sqrt(v41 * v41 * v40 + v38), sqrt(1.0 - (v41 * v41 * v40 + v38)));
  double v43 = (v42 + v42) * 6372797.56 * 100.0;
  if (v43 >= 0.0)
  {
    double v44 = v43;
    if (v43 >= 4.50359963e15) {
      goto LABEL_50;
    }
    uint64_t v45 = (uint64_t)(v43 + v43) + 1;
  }
  else
  {
    double v44 = v43;
    if (v43 <= -4.50359963e15) {
      goto LABEL_50;
    }
    uint64_t v45 = (uint64_t)(v43 + v43);
    if (v45 >= 1) {
      --v45;
    }
  }
  double v44 = (double)(v45 >> 1);
LABEL_50:
  if (v44 < 9.22337204e18)
  {
    if (v43 >= 0.0)
    {
      if (v43 >= 4.50359963e15) {
        goto LABEL_61;
      }
      uint64_t v46 = (uint64_t)(v43 + v43) + 1;
    }
    else
    {
      if (v43 <= -4.50359963e15) {
        goto LABEL_61;
      }
      uint64_t v46 = (uint64_t)(v43 + v43);
      if (v46 >= 1) {
        --v46;
      }
    }
    double v43 = (double)(v46 >> 1);
LABEL_61:
    *long long v6 = (uint64_t)v43;
    long long v30 = v54;
    if (!v54) {
      return;
    }
    goto LABEL_40;
  }
  *long long v6 = 0x7FFFFFFFFFFFFFFELL;
  long long v30 = v54;
  if (v54)
  {
LABEL_40:
    int v55 = v30;
    operator delete(v30);
  }
}

void sub_44C9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_44CA30(char **a1, _OWORD *a2, void *a3)
{
  double v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 < v6)
  {
    long long v8 = a2[1];
    *(_OWORD *)double v7 = *a2;
    *((_OWORD *)v7 + 1) = v8;
    long long v9 = a2[2];
    long long v10 = a2[3];
    long long v11 = a2[5];
    *((_OWORD *)v7 + 4) = a2[4];
    *((_OWORD *)v7 + 5) = v11;
    *((_OWORD *)v7 + 2) = v9;
    *((_OWORD *)v7 + 3) = v10;
    *((void *)v7 + 12) = *a3;
    unint64_t v12 = v7 + 104;
    goto LABEL_14;
  }
  unint64_t v13 = *a1;
  uint64_t v14 = 0x4EC4EC4EC4EC4EC5 * ((v7 - *a1) >> 3);
  unint64_t v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) > 0x276276276276276) {
    sub_2E00();
  }
  unint64_t v16 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v6 - (void)v13) >> 3);
  if (2 * v16 > v15) {
    unint64_t v15 = 2 * v16;
  }
  if (v16 >= 0x13B13B13B13B13BLL) {
    unint64_t v17 = 0x276276276276276;
  }
  else {
    unint64_t v17 = v15;
  }
  if (v17 > 0x276276276276276) {
    sub_188D718();
  }
  uint64_t v18 = 104 * v17;
  double v19 = (char *)operator new(104 * v17);
  long long v20 = a2[3];
  uint64_t v21 = &v19[104 * v14];
  unsigned int v22 = &v19[v18];
  *((_OWORD *)v21 + 2) = a2[2];
  *((_OWORD *)v21 + 3) = v20;
  long long v23 = a2[5];
  *((_OWORD *)v21 + 4) = a2[4];
  *((_OWORD *)v21 + 5) = v23;
  long long v24 = a2[1];
  *(_OWORD *)uint64_t v21 = *a2;
  *((_OWORD *)v21 + 1) = v24;
  *((void *)v21 + 12) = *a3;
  unint64_t v12 = v21 + 104;
  if (v7 == v13)
  {
    *a1 = v21;
    a1[1] = v12;
    a1[2] = v22;
    if (!v13) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  do
  {
    long long v25 = v21 - 104;
    long long v26 = *(_OWORD *)(v7 - 104);
    long long v27 = *(_OWORD *)(v7 - 88);
    *(_OWORD *)(v21 - 72) = *(_OWORD *)(v7 - 72);
    *(_OWORD *)(v21 - 88) = v27;
    *(_OWORD *)(v21 - 104) = v26;
    long long v28 = *(_OWORD *)(v7 - 56);
    long long v29 = *(_OWORD *)(v7 - 40);
    long long v30 = *(_OWORD *)(v7 - 24);
    *((void *)v21 - 1) = *((void *)v7 - 1);
    *(_OWORD *)(v21 - 24) = v30;
    *(_OWORD *)(v21 - 40) = v29;
    *(_OWORD *)(v21 - 56) = v28;
    v7 -= 104;
    v21 -= 104;
  }
  while (v7 != v13);
  *a1 = v25;
  a1[1] = v12;
  a1[2] = v22;
  if (v13) {
LABEL_13:
  }
    operator delete(v13);
LABEL_14:
  a1[1] = v12;
  return v12 - 104;
}

uint64_t sub_44CBE8(void *a1, unint64_t a2)
{
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    long long v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v10 = &v15;
    }
    else {
      long long v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 104 * a2;
}

void sub_44CD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

char *sub_44CE28(char **a1, long long *a2)
{
  unint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v12 = *a1;
    uint64_t v13 = 0x4EC4EC4EC4EC4EC5 * ((v5 - *a1) >> 3);
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) > 0x276276276276276) {
      sub_2E00();
    }
    unint64_t v15 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v4 - (void)v12) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x13B13B13B13B13BLL) {
      unint64_t v16 = 0x276276276276276;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 > 0x276276276276276) {
        sub_188D718();
      }
      std::string v17 = (char *)operator new(104 * v16);
    }
    else
    {
      std::string v17 = 0;
    }
    long long v18 = a2[5];
    long long v19 = &v17[104 * v13];
    *((_OWORD *)v19 + 4) = a2[4];
    *((_OWORD *)v19 + 5) = v18;
    *((void *)v19 + 12) = *((void *)a2 + 12);
    long long v20 = a2[1];
    *(_OWORD *)long long v19 = *a2;
    *((_OWORD *)v19 + 1) = v20;
    long long v21 = a2[3];
    *((_OWORD *)v19 + 2) = a2[2];
    *((_OWORD *)v19 + 3) = v21;
    long long v11 = v19 + 104;
    if (v5 != v12)
    {
      do
      {
        long long v22 = *(_OWORD *)(v5 - 104);
        long long v23 = *(_OWORD *)(v5 - 88);
        *(_OWORD *)(v19 - 72) = *(_OWORD *)(v5 - 72);
        *(_OWORD *)(v19 - 88) = v23;
        *(_OWORD *)(v19 - 104) = v22;
        long long v24 = *(_OWORD *)(v5 - 56);
        long long v25 = *(_OWORD *)(v5 - 40);
        long long v26 = *(_OWORD *)(v5 - 24);
        *((void *)v19 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v19 - 24) = v26;
        *(_OWORD *)(v19 - 40) = v25;
        *(_OWORD *)(v19 - 56) = v24;
        v19 -= 104;
        v5 -= 104;
      }
      while (v5 != v12);
      unint64_t v5 = *a1;
    }
    *a1 = v19;
    a1[1] = v11;
    a1[2] = &v17[104 * v16];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[2];
    *((_OWORD *)v5 + 1) = a2[1];
    *((_OWORD *)v5 + 2) = v7;
    *(_OWORD *)unint64_t v5 = v6;
    long long v8 = a2[3];
    long long v9 = a2[4];
    long long v10 = a2[5];
    *((void *)v5 + 12) = *((void *)a2 + 12);
    *((_OWORD *)v5 + 4) = v9;
    *((_OWORD *)v5 + 5) = v10;
    *((_OWORD *)v5 + 3) = v8;
    long long v11 = v5 + 104;
  }
  a1[1] = v11;
  return v11 - 104;
}

uint64_t *sub_44CFD4(uint64_t *a1, void *a2)
{
  uint64_t v4 = sub_3750CC(a2);
  *a1 = v4;
  sub_458644(a1 + 1, v4);
  sub_ED6F04((uint64_t)(a1 + 3), a2);
  a1[523] = sub_3750CC(a2);
  return a1;
}

void sub_44D03C(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)v1[520];
  if (v3)
  {
    v1[521] = v3;
    operator delete(v3);
  }
  sub_3A6318(v1 + 4);
  _Unwind_Resume(a1);
}

void sub_44D060(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1105674(v39);
  sub_1105674(v40);
  uint64_t v45 = 0;
  long long __p = 0u;
  long long v43 = 0u;
  *(_OWORD *)long double v41 = 0u;
  *(_OWORD *)long double v42 = 0u;
  if (!sub_44D674((uint64_t)a1, a2, (uint64_t)v39))
  {
    sub_47E0E4((_OWORD *)a3);
    *(unsigned char *)(a3 + 120) = 0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    long long v6 = (void *)__p;
    if (!(void)__p) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  sub_44DB44(a1, (uint64_t)v39, (uint64_t)&v49);
  if (sub_EA80FC((char **)&v49))
  {
    sub_47E0E4((_OWORD *)a3);
    *(unsigned char *)(a3 + 120) = 0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    goto LABEL_32;
  }
  int64x2_t v36 = 0;
  long double v37 = 0;
  uint64_t v38 = 0;
  unint64_t v20 = sub_EA9990((uint64_t *)&v49);
  sub_ED712C((uint64_t)(a1 + 3), HIDWORD(v20) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v20) << 32), &v36);
  long long v21 = (unint64_t *)v36;
  long long v22 = v37;
  if (v36 == v37)
  {
LABEL_24:
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v46);
      sub_188FC78(v46, (uint64_t)"Reconstructing zilch path failed after finding a base path", 58);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v32, 3u);
      if (SHIBYTE(v33) < 0) {
        operator delete(v32[0]);
      }
      if (v48 < 0) {
        operator delete(v47);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    sub_47E0E4((_OWORD *)a3);
    *(unsigned char *)(a3 + 120) = 0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    long long v24 = (unint64_t *)v36;
    if (!v36) {
      goto LABEL_32;
    }
LABEL_31:
    long double v37 = v24;
    operator delete(v24);
    goto LABEL_32;
  }
  while (1)
  {
    long long v23 = (long long **)nullsub_1(&v49);
    sub_44E414((uint64_t)a1, *v23, *v21, (char *)v46);
    if (!sub_EAE144(v46)) {
      break;
    }
    sub_405F44((uint64_t)v46);
    if (++v21 == v22) {
      goto LABEL_24;
    }
  }
  sub_EA94B8((uint64_t)v32, v46);
  uint64_t v25 = v49;
  if ((void)v49)
  {
    uint64_t v26 = *((void *)&v49 + 1);
    long long v27 = (void *)v49;
    if (*((void *)&v49 + 1) != (void)v49)
    {
      do
        uint64_t v26 = sub_405F44(v26 - 472);
      while (v26 != v25);
      long long v27 = (void *)v49;
    }
    *((void *)&v49 + 1) = v25;
    operator delete(v27);
  }
  long long v49 = *(_OWORD *)v32;
  uint64_t v50 = v33;
  v32[1] = 0;
  uint64_t v33 = 0;
  v32[0] = 0;
  if (SHIBYTE(v52) < 0)
  {
    operator delete((void *)v51);
    long long v28 = v32[0];
    long long v51 = v34;
    uint64_t v52 = v35;
    HIBYTE(v35) = 0;
    LOBYTE(v34) = 0;
    if (v32[0])
    {
      long long v29 = v32[1];
      long long v30 = v32[0];
      if (v32[1] != v32[0])
      {
        do
          long long v29 = (void *)sub_405F44((uint64_t)v29 - 472);
        while (v29 != v28);
        long long v30 = v32[0];
      }
      v32[1] = v28;
      operator delete(v30);
    }
  }
  else
  {
    long long v51 = v34;
    uint64_t v52 = v35;
  }
  *(_OWORD *)a3 = v49;
  *(void *)(a3 + 16) = v50;
  long long v49 = 0uLL;
  uint64_t v50 = 0;
  *(_OWORD *)(a3 + 24) = v51;
  *(void *)(a3 + 40) = v52;
  long long v51 = 0uLL;
  uint64_t v52 = 0;
  *(_OWORD *)(a3 + 48) = v53;
  *(void *)(a3 + 64) = v54;
  uint64_t v54 = 0;
  long long v53 = 0uLL;
  *(_OWORD *)(a3 + 72) = v55;
  *(void *)(a3 + 88) = v56;
  long long v55 = 0uLL;
  uint64_t v56 = 0;
  int v31 = v59;
  *(unsigned char *)(a3 + 120) = v59;
  if (v31)
  {
    *(_OWORD *)(a3 + 96) = v57;
    *(void *)(a3 + 112) = v58;
    uint64_t v58 = 0;
    long long v57 = 0uLL;
  }
  sub_405F44((uint64_t)v46);
  long long v24 = (unint64_t *)v36;
  if (v36) {
    goto LABEL_31;
  }
LABEL_32:
  sub_443A30((uint64_t)&v49);
  long long v6 = (void *)__p;
  if ((void)__p)
  {
LABEL_5:
    *((void *)&__p + 1) = v6;
    operator delete(v6);
  }
LABEL_6:
  long long v7 = (void (***)(void))v42[1];
  if (v42[1])
  {
    long long v8 = v42[1];
    if ((void *)v43 != v42[1])
    {
      uint64_t v9 = v43 - 48;
      long long v10 = (void (***)(void))(v43 - 48);
      long long v11 = (void (***)(void))(v43 - 48);
      do
      {
        unint64_t v12 = *v11;
        v11 -= 6;
        (*v12)(v10);
        v9 -= 48;
        BOOL v13 = v10 == v7;
        long long v10 = v11;
      }
      while (!v13);
      long long v8 = v42[1];
    }
    *(void *)&long long v43 = v7;
    operator delete(v8);
  }
  unint64_t v14 = (char *)v41[0];
  if (v41[0])
  {
    unint64_t v15 = v41[0];
    if (v41[1] != v41[0])
    {
      unint64_t v16 = (char *)v41[1] - 64;
      std::string v17 = (char *)v41[1] - 64;
      long long v18 = (void (***)(char *))((char *)v41[1] - 64);
      do
      {
        long long v19 = *v18;
        v18 -= 8;
        (*v19)(v17);
        v16 -= 64;
        BOOL v13 = v17 == v14;
        std::string v17 = (char *)v18;
      }
      while (!v13);
      unint64_t v15 = v41[0];
    }
    v41[1] = v14;
    operator delete(v15);
  }
}

void sub_44D5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_405F44((uint64_t)&a33);
  if (__p) {
    operator delete(__p);
  }
  sub_443A30(v33 - 240);
  sub_44B860(&a21);
  _Unwind_Resume(a1);
}

BOOL sub_44D674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_1106DFC(a2) < 2) {
    return 0;
  }
  uint64_t v11 = a1 + 8;
  LODWORD(v12) = 1;
  uint64_t v13 = 0x4031000000000000;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  LODWORD(v17) = 0;
  if (sub_1106DFC(a2) != 1) {
    sub_451050();
  }
  sub_450670((uint64_t)&v14);
  if (*(void *)(a3 + 72) == *(void *)(a3 + 80))
  {
    uint64_t v11 = a1 + 8;
    LODWORD(v12) = 2;
    uint64_t v13 = 0x4032000000000000;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    LODWORD(v17) = 0;
    if (sub_1106DFC(a2) != 1) {
      sub_451050();
    }
    sub_450670((uint64_t)&v14);
    if (*(void *)(a3 + 72) == *(void *)(a3 + 80))
    {
      uint64_t v11 = a1 + 8;
      LODWORD(v12) = 3;
      uint64_t v13 = 0x4033000000000000;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      LODWORD(v17) = 0;
      if (sub_1106DFC(a2) != 1) {
        sub_451050();
      }
      sub_450670((uint64_t)&v14);
      if (*(void *)(a3 + 72) == *(void *)(a3 + 80))
      {
        uint64_t v11 = a1 + 8;
        LODWORD(v12) = 4;
        uint64_t v13 = 0x4034000000000000;
        long long v14 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        LODWORD(v17) = 0;
        if (sub_1106DFC(a2) != 1) {
          sub_451050();
        }
        sub_450670((uint64_t)&v14);
        if (*(void *)(a3 + 72) == *(void *)(a3 + 80))
        {
          uint64_t v11 = a1 + 8;
          LODWORD(v12) = 5;
          uint64_t v13 = 0x4035000000000000;
          long long v14 = 0u;
          long long v15 = 0u;
          long long v16 = 0u;
          LODWORD(v17) = 0;
          if (sub_1106DFC(a2) != 1) {
            sub_451050();
          }
          sub_450670((uint64_t)&v14);
        }
      }
    }
  }
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v11);
    sub_188FC78(&v11, (uint64_t)"zilch::PathDecoder with distance ", 33);
    long long v7 = (void *)std::ostream::operator<<();
    sub_188FC78(v7, (uint64_t)" and angle ", 11);
    long long v8 = (void *)std::ostream::operator<<();
    sub_188FC78(v8, (uint64_t)" returned path of size ", 23);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v10 < 0) {
      operator delete(__p);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return *(void *)(a3 + 80) != *(void *)(a3 + 72);
}

void sub_44DA80(_Unwind_Exception *a1)
{
  sub_450670(v1);
  _Unwind_Resume(a1);
}

void sub_44DA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_44DB1C(_Unwind_Exception *a1)
{
  sub_450670(v1);
  _Unwind_Resume(a1);
}

void sub_44DB30(_Unwind_Exception *a1)
{
  sub_450670(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_44DB44@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_47E0E4(&v95);
  unsigned __int8 v102 = 0;
  memset(v99, 0, sizeof(v99));
  long long v6 = sub_3B3B0((char **)v99);
  *((void *)&v99[0] + 1) = v6;
  sub_EAD400((uint64_t)v94);
  long long v8 = *(int **)(a2 + 72);
  long long v7 = *(int **)(a2 + 80);
  uint64_t v9 = (char *)v7 - (char *)v8;
  uint64_t v84 = a3;
  long long v82 = a1;
  if (v7 != v8)
  {
    int v10 = *v8;
    uint64_t v11 = *((void *)v8 + 1);
    uint64_t v12 = *(void *)(a2 + 24) + (v11 << 6);
    uint64_t v13 = *(void *)(a2 + 48) + 48 * v11;
    if (v10) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v12;
    }
    uint64_t v83 = (uint64_t)(v6 - 24);
    if (sub_40A44C(v14))
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 1;
      if (v9 != 16)
      {
LABEL_56:
        uint64_t v64 = 0;
        for (uint64_t i = (v9 >> 4) - 1; i; --i)
        {
          uint64_t v66 = *(void *)(a2 + 72) + v64;
          int v67 = *(_DWORD *)(v66 + 16);
          uint64_t v68 = *(void *)(v66 + 24);
          uint64_t v69 = *(void *)(a2 + 24) + (v68 << 6);
          uint64_t v70 = *(void *)(a2 + 48) + 48 * v68;
          if (v67) {
            uint64_t v71 = v70;
          }
          else {
            uint64_t v71 = v69;
          }
          if (!sub_40A44C(v71))
          {
            uint64_t v72 = *(void *)(a2 + 72) + v64;
            int v73 = *(_DWORD *)(v72 + 16);
            uint64_t v74 = *(void *)(v72 + 24);
            uint64_t v75 = (const void *)(*(void *)(a2 + 24) + (v74 << 6));
            uint64_t v76 = *(void *)(a2 + 48) + 48 * v74;
            if (v73) {
              uint64_t v77 = (const void *)v76;
            }
            else {
              uint64_t v77 = v75;
            }
            if (!v78) {
              goto LABEL_71;
            }
            uint64_t v79 = (uint64_t)v78;
            unint64_t v80 = v78[3];
            sub_44F968((uint64_t)(v82 + 3), (v17 << 48) | (v15 << 32) | v16, v80, (uint64_t)__p);
            if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)&v91[24]), (int32x4_t)vceqzq_s64(*(int64x2_t *)__p)))) & 1) != 0|| !v93|| !*(_DWORD *)&v91[16])
            {
              sub_47E0E4((_OWORD *)v84);
              *(unsigned char *)(v81 + 120) = 0;
              *(_OWORD *)(v81 + 48) = 0u;
              *(_OWORD *)(v81 + 64) = 0u;
              *(_OWORD *)(v81 + 80) = 0u;
              goto LABEL_55;
            }
            sub_EADC28((uint64_t)v94, (int **)__p);
            uint64_t v88 = sub_52060(v79);
            sub_3A998(v83, &v88);
            uint64_t v16 = v80;
            uint64_t v15 = WORD2(v80);
            uint64_t v17 = BYTE6(v80);
          }
          v64 += 16;
        }
      }
    }
    else
    {
      char v18 = *(int **)(a2 + 72);
      int v19 = *v18;
      uint64_t v20 = *((void *)v18 + 1);
      long long v21 = (const void *)(*(void *)(a2 + 24) + (v20 << 6));
      uint64_t v22 = *(void *)(a2 + 48) + 48 * v20;
      if (v19) {
        long long v23 = (const void *)v22;
      }
      else {
        long long v23 = v21;
      }
      if (!v24) {
LABEL_71:
      }
        __cxa_bad_cast();
      uint64_t v25 = v24[3];
      __p[0] = (void *)sub_52060((uint64_t)v24);
      sub_3A998(v83, __p);
      uint64_t v16 = v25;
      uint64_t v15 = WORD2(v25);
      uint64_t v17 = BYTE6(v25);
      if (v9 != 16) {
        goto LABEL_56;
      }
    }
    if (*(void *)(a2 + 80) - *(void *)(a2 + 72) == 16)
    {
      sub_ED7040((uint64_t)(v82 + 3), (((unint64_t)(v17 == 0) << 48) | (v15 << 32) | v16) ^ 0x1000000000000, (uint64_t)__p);
      sub_EADAD8((uint64_t)v94, (v15 << 16) | (v16 << 32) | (2 * (v17 == 0)), (long long *)__p);
    }
  }
  LODWORD(__p[0]) = sub_53FA4(a2);
  double v27 = sub_1106ACC(__p, v26);
  LODWORD(v86) = sub_4F44((unsigned int *)a2);
  double v29 = sub_1106C0C(&v86, v28);
  uint64_t v30 = -1;
  if (v29 <= 180.0 && v27 >= -85.0511288 && v27 <= 85.0511288 && v29 >= -180.0)
  {
    double v31 = fmax(v27, -85.0511288);
    double v32 = v31 * 3.14159265 / 180.0;
    BOOL v33 = v31 < 85.0511288;
    double v34 = 1.48442223;
    if (v33) {
      double v34 = v32;
    }
    long double v35 = sin(v34);
    LODWORD(v36) = ((log((v35 + 1.0) / (1.0 - v35)) / -12.5663706 + 0.5) * 4294967300.0);
    if (v36 >= 0xFFFFFFFE) {
      uint64_t v36 = 4294967294;
    }
    else {
      uint64_t v36 = v36;
    }
    uint64_t v30 = ((v29 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v36 << 32);
  }
  uint64_t v88 = v30;
  int v89 = 0x7FFFFFFF;
  uint64_t v37 = sub_EADD1C((uint64_t)v94);
  sub_44FACC(v82, v37, (unsigned int *)&v88, (uint64_t)__p);
  sub_EAD920((uint64_t)v94, (uint64_t)__p);
  LODWORD(__p[0]) = sub_53FA4(a2 + 12);
  double v39 = sub_1106ACC(__p, v38);
  int v85 = sub_4F44((unsigned int *)(a2 + 12));
  double v41 = sub_1106C0C(&v85, v40);
  uint64_t v42 = -1;
  if (v41 <= 180.0 && v39 >= -85.0511288 && v39 <= 85.0511288 && v41 >= -180.0)
  {
    double v43 = fmax(v39, -85.0511288);
    double v44 = v43 * 3.14159265 / 180.0;
    BOOL v33 = v43 < 85.0511288;
    double v45 = 1.48442223;
    if (v33) {
      double v45 = v44;
    }
    long double v46 = sin(v45);
    LODWORD(v47) = ((log((v46 + 1.0) / (1.0 - v46)) / -12.5663706 + 0.5) * 4294967300.0);
    if (v47 >= 0xFFFFFFFE) {
      uint64_t v47 = 4294967294;
    }
    else {
      uint64_t v47 = v47;
    }
    uint64_t v42 = ((v41 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v47 << 32);
  }
  uint64_t v86 = v42;
  int v87 = 0x7FFFFFFF;
  uint64_t v48 = sub_EADD34((uint64_t)v94);
  sub_44FACC(v82, v48, (unsigned int *)&v86, (uint64_t)__p);
  sub_EADAA8((uint64_t)v94, (uint64_t)__p);
  if (*(void *)(a2 + 80) - *(void *)(a2 + 72) == 16)
  {
    long long v49 = (_DWORD *)sub_69134((uint64_t)v94);
    if (*v49 > *(_DWORD *)sub_EADAD0((uint64_t)v94))
    {
      uint64_t v50 = sub_EADAD0((uint64_t)v94);
      *(_OWORD *)long long __p = *(_OWORD *)v50;
      long long v51 = *(_OWORD *)(v50 + 16);
      long long v52 = *(_OWORD *)(v50 + 32);
      long long v53 = *(_OWORD *)(v50 + 48);
      uint64_t v92 = *(void *)(v50 + 64);
      *(_OWORD *)&v91[16] = v52;
      *(_OWORD *)&v91[32] = v53;
      *(_OWORD *)int v91 = v51;
      uint64_t v54 = (int *)sub_69134((uint64_t)v94);
      int v55 = (int)__p[0];
      if (*v54 > LODWORD(__p[0])) {
        int v55 = *v54;
      }
      LODWORD(__p[0]) = v55;
      sub_EADAA8((uint64_t)v94, (uint64_t)__p);
    }
  }
  sub_EA94B8((uint64_t)__p, v94);
  uint64_t v56 = v95;
  if ((void)v95)
  {
    uint64_t v57 = *((void *)&v95 + 1);
    uint64_t v58 = (void *)v95;
    if (*((void *)&v95 + 1) != (void)v95)
    {
      do
        uint64_t v57 = sub_405F44(v57 - 472);
      while (v57 != v56);
      uint64_t v58 = (void *)v95;
    }
    *((void *)&v95 + 1) = v56;
    operator delete(v58);
  }
  long long v95 = *(_OWORD *)__p;
  uint64_t v96 = *(void *)v91;
  __p[1] = 0;
  *(void *)int v91 = 0;
  __p[0] = 0;
  if (SHIBYTE(v98) < 0)
  {
    operator delete((void *)v97);
    unsigned __int8 v59 = __p[0];
    long long v97 = *(_OWORD *)&v91[8];
    uint64_t v98 = *(void *)&v91[24];
    v91[31] = 0;
    v91[8] = 0;
    if (__p[0])
    {
      double v60 = __p[1];
      double v61 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          double v60 = (void *)sub_405F44((uint64_t)v60 - 472);
        while (v60 != v59);
        double v61 = __p[0];
      }
      __p[1] = v59;
      operator delete(v61);
    }
  }
  else
  {
    long long v97 = *(_OWORD *)&v91[8];
    uint64_t v98 = *(void *)&v91[24];
  }
  *(_OWORD *)uint64_t v84 = v95;
  *(void *)(v84 + 16) = v96;
  long long v95 = 0uLL;
  uint64_t v96 = 0;
  *(_OWORD *)(v84 + 24) = v97;
  *(void *)(v84 + 40) = v98;
  long long v97 = 0uLL;
  uint64_t v98 = 0;
  *(_OWORD *)(v84 + 48) = v99[0];
  *(void *)(v84 + 64) = *(void *)&v99[1];
  memset(v99, 0, 24);
  *(_OWORD *)(v84 + 72) = *(_OWORD *)((char *)&v99[1] + 8);
  *(void *)(v84 + 88) = *((void *)&v99[2] + 1);
  *((void *)&v99[1] + 1) = 0;
  v99[2] = 0uLL;
  int v62 = v102;
  *(unsigned char *)(v84 + 120) = v102;
  if (v62)
  {
    *(_OWORD *)(v84 + 96) = v100;
    *(void *)(v84 + 112) = v101;
    uint64_t v101 = 0;
    long long v100 = 0uLL;
  }
LABEL_55:
  sub_405F44((uint64_t)v94);
  return sub_443A30((uint64_t)&v95);
}

void sub_44E388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_44E414(uint64_t a1@<X0>, long long *a2@<X1>, unint64_t a3@<X2>, char *a4@<X8>)
{
  unint64_t v103 = a3;
  if (sub_EAE0E0((uint64_t)a2))
  {
    long long v101 = 0u;
    long long v102 = 0u;
    long long v100 = 0u;
    long long v97 = 0;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    uint64_t v94 = 0;
    long long v95 = 0;
    uint64_t v96 = 0;
    uint64_t v7 = sub_3C80F8((uint64_t)a2);
    unint64_t v8 = *(void *)(v7 + 72);
    unint64_t v9 = ((unint64_t)*(unsigned int *)(v7 + 80) >> 14) & 0x3FFFC;
    *(void *)&long long v104 = (((((v8 >> 16) & 0xFFFF0000 | (v8 << 32) | (2 * ((v8 & 0xFF000000000000) == 0))) + v9) << 16) & 0xFFFF00000000 | ((((v8 >> 16) & 0xFFFF0000 | (v8 << 32) | (2 * ((v8 & 0xFF000000000000) == 0))) + v9) >> 32) | ((unint64_t)((v8 & 0xFF000000000000) == 0) << 48)) ^ 0x1000000000000;
    sub_44F804(a1, &v103, &v104, &v92);
    int v10 = (char *)v92;
    uint64_t v11 = v93;
    if (v92 == v93)
    {
      sub_EAD400((uint64_t)a4);
      goto LABEL_65;
    }
    uint64_t v78 = (uint64_t)a4;
    do
    {
      *(void *)&long long v104 = -1;
      sub_45001C((char **)&v97, (uint64_t)v10, &v104);
      uint64_t v14 = *((void *)&v100 + 1);
      uint64_t v15 = 32 * (v101 - *((void *)&v100 + 1)) - 1;
      uint64_t v16 = v97;
      uint64_t v17 = v98;
      if ((void)v101 == *((void *)&v100 + 1)) {
        uint64_t v15 = 0;
      }
      unint64_t v18 = *((void *)&v102 + 1) + v102;
      if (v15 == *((void *)&v102 + 1) + (void)v102)
      {
        sub_42BEC((uint64_t)&v100);
        uint64_t v14 = *((void *)&v100 + 1);
        unint64_t v18 = *((void *)&v102 + 1) + v102;
      }
      uint64_t v12 = (void *)(*(void *)(v14 + ((v18 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v18);
      *uint64_t v12 = 0;
      v12[1] = -1 - 0x5555555555555555 * ((v17 - v16) >> 5);
      uint64_t v13 = ++*((void *)&v102 + 1);
      v10 += 88;
    }
    while (v10 != v11);
    int v89 = 0;
    BOOL v90 = 0;
    uint64_t v91 = 0;
    if (!v13)
    {
LABEL_44:
      sub_EAD400((uint64_t)&v104);
      uint64_t v42 = (uint64_t)v94;
      if (v94 == v95)
      {
        sub_EAD400(v78);
      }
      else
      {
        sub_EADC28((uint64_t)&v104, (int **)v94);
        while (1)
        {
          unint64_t v43 = *(void *)(v42 + 88);
          if (v43 == -1) {
            break;
          }
          uint64_t v42 = sub_4501AC(&v97, v43);
          sub_EADC28((uint64_t)&v104, (int **)v42);
        }
        if (sub_723EC(2u))
        {
          sub_6BAC((uint64_t)&v82);
          sub_188FC78(&v82, (uint64_t)"Reconstructed engine path of ", 29);
          sub_EAE0E0((uint64_t)&v104);
          double v44 = (void *)std::ostream::operator<<();
          sub_188FC78(v44, (uint64_t)" arcs", 5);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 2u);
          if (v81 < 0) {
            operator delete(__p);
          }
          if (v88 < 0) {
            operator delete(*((void **)&v86 + 1));
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        unint64_t v45 = sub_3C80F8((uint64_t)&v104);
        uint64_t v46 = sub_3FA3A8((uint64_t)&v104);
        if (v45 != v46)
        {
          unint64_t v47 = v46 - 88;
          if (v46 - 88 > v45)
          {
            unint64_t v48 = v45 + 88;
            do
            {
              long long v84 = *(_OWORD *)(v48 - 56);
              long long v85 = *(_OWORD *)(v48 - 40);
              long long v86 = *(_OWORD *)(v48 - 24);
              uint64_t v87 = *(void *)(v48 - 8);
              long long v82 = *(_OWORD *)(v48 - 88);
              long long v83 = *(_OWORD *)(v48 - 72);
              long long v49 = *(_OWORD *)(v47 + 16);
              *(_OWORD *)(v48 - 88) = *(_OWORD *)v47;
              *(_OWORD *)(v48 - 72) = v49;
              long long v51 = *(_OWORD *)(v47 + 48);
              long long v50 = *(_OWORD *)(v47 + 64);
              uint64_t v52 = *(void *)(v47 + 80);
              *(_OWORD *)(v48 - 56) = *(_OWORD *)(v47 + 32);
              *(void *)(v48 - 8) = v52;
              *(_OWORD *)(v48 - 24) = v50;
              *(_OWORD *)(v48 - 40) = v51;
              *(_OWORD *)unint64_t v47 = v82;
              *(void *)(v47 + 80) = v87;
              *(_OWORD *)(v47 + 64) = v86;
              *(_OWORD *)(v47 + 48) = v85;
              *(_OWORD *)(v47 + 32) = v84;
              *(_OWORD *)(v47 + 16) = v83;
              v47 -= 88;
              BOOL v53 = v48 >= v47;
              v48 += 88;
            }
            while (!v53);
          }
        }
        uint64_t v54 = sub_69134((uint64_t)a2);
        sub_EAD920((uint64_t)&v104, v54);
        uint64_t v55 = sub_EADAD0((uint64_t)a2);
        sub_EADAA8((uint64_t)&v104, v55);
        uint64_t v56 = v107;
        *(void *)(v78 + 16) = v105;
        *(void *)(v78 + 40) = v56;
        uint64_t v57 = v114;
        *(void *)(v78 + 128) = v112;
        *(void *)(v78 + 152) = v57;
        uint64_t v58 = v119;
        *(void *)(v78 + 176) = v116;
        *(_OWORD *)uint64_t v78 = v104;
        long long v104 = 0uLL;
        *(_OWORD *)(v78 + 24) = v106;
        uint64_t v105 = 0;
        long long v106 = 0uLL;
        uint64_t v107 = 0;
        long long v59 = v108;
        long long v60 = v109;
        long long v61 = v110[0];
        *(_OWORD *)(v78 + 94) = *(_OWORD *)((char *)v110 + 14);
        *(_OWORD *)(v78 + 64) = v60;
        *(_OWORD *)(v78 + 80) = v61;
        *(_OWORD *)(v78 + 48) = v59;
        *(_OWORD *)(v78 + 112) = v111;
        long long v111 = 0uLL;
        *(_OWORD *)(v78 + 136) = v113;
        uint64_t v112 = 0;
        long long v113 = 0uLL;
        uint64_t v114 = 0;
        *(_OWORD *)(v78 + 160) = v115;
        long long v115 = 0uLL;
        long long v62 = v117;
        long long v63 = v118;
        *(void *)(v78 + 216) = v58;
        *(_OWORD *)(v78 + 200) = v63;
        *(_OWORD *)(v78 + 184) = v62;
        *(_OWORD *)(v78 + 224) = v120;
        uint64_t v64 = v123;
        *(void *)(v78 + 240) = v121;
        uint64_t v116 = 0;
        long long v120 = 0uLL;
        uint64_t v121 = 0;
        *(_OWORD *)(v78 + 248) = v122;
        *(void *)(v78 + 264) = v64;
        long long v122 = 0uLL;
        uint64_t v123 = 0;
        *(_OWORD *)(v78 + 272) = v124;
        unsigned int v65 = v126;
        *(_DWORD *)(v78 + 296) = v126;
        if (v65 <= 1) {
          *(void *)(v78 + 288) = v125;
        }
        long long v66 = *(_OWORD *)v136;
        *(_OWORD *)(v78 + 432) = v135;
        *(_OWORD *)(v78 + 448) = v66;
        long long v67 = v132;
        *(_OWORD *)(v78 + 368) = v131;
        *(_OWORD *)(v78 + 384) = v67;
        long long v68 = v134;
        *(_OWORD *)(v78 + 400) = v133;
        *(_OWORD *)(v78 + 416) = v68;
        long long v69 = v128;
        *(_OWORD *)(v78 + 304) = v127;
        *(_OWORD *)(v78 + 320) = v69;
        long long v70 = v130;
        *(_OWORD *)(v78 + 336) = v129;
        *(_OWORD *)(v78 + 352) = v70;
        *(void *)(v78 + 463) = *(void *)&v136[15];
      }
      sub_405F44((uint64_t)&v104);
      if (v89)
      {
        BOOL v90 = v89;
        operator delete(v89);
      }
LABEL_65:
      if (v92)
      {
        int v93 = (char *)v92;
        operator delete(v92);
      }
      if (v94)
      {
        long long v95 = v94;
        operator delete(v94);
      }
      if (v97)
      {
        uint64_t v98 = v97;
        operator delete(v97);
      }
      uint64_t v71 = (void **)*((void *)&v100 + 1);
      uint64_t v72 = (void **)v101;
      *((void *)&v102 + 1) = 0;
      unint64_t v73 = v101 - *((void *)&v100 + 1);
      if ((void)v101 - *((void *)&v100 + 1) >= 0x11uLL)
      {
        do
        {
          operator delete(*v71);
          uint64_t v72 = (void **)v101;
          uint64_t v71 = (void **)(*((void *)&v100 + 1) + 8);
          *((void *)&v100 + 1) = v71;
          unint64_t v73 = v101 - (void)v71;
        }
        while ((void)v101 - (void)v71 > 0x10uLL);
      }
      unint64_t v74 = v73 >> 3;
      if (v74 == 1)
      {
        uint64_t v75 = 128;
      }
      else
      {
        if (v74 != 2) {
          goto LABEL_78;
        }
        uint64_t v75 = 256;
      }
      *(void *)&long long v102 = v75;
LABEL_78:
      if (v71 != v72)
      {
        do
        {
          uint64_t v76 = *v71++;
          operator delete(v76);
        }
        while (v71 != v72);
        if ((void)v101 != *((void *)&v100 + 1)) {
          *(void *)&long long v101 = v101 + ((*((void *)&v100 + 1) - v101 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
      }
      if ((void)v100) {
        operator delete((void *)v100);
      }
      return;
    }
    uint64_t v19 = a1 + 24;
    while (1)
    {
      uint64_t v20 = 32 * (v101 - *((void *)&v100 + 1)) - 1;
      if ((void)v101 == *((void *)&v100 + 1)) {
        uint64_t v20 = 0;
      }
      long long v104 = *(_OWORD *)(*(void *)(*((void *)&v100 + 1)
                                   + (((unint64_t)(v102 + v13 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (v102 + v13 - 1));
      *((void *)&v102 + 1) = v13 - 1;
      if ((unint64_t)(v20 - (v13 + v102) + 1) >= 0x200)
      {
        operator delete(*(void **)(v101 - 8));
        *(void *)&long long v101 = v101 - 8;
      }
      uint64_t v21 = sub_EADC68((uint64_t)a2, v104);
      uint64_t v22 = sub_4501AC(&v97, *((unint64_t *)&v104 + 1));
      uint64_t v23 = v104;
      if (v23 + 1 == sub_EAE0E0((uint64_t)a2))
      {
        uint64_t v24 = *(void *)(v22 + 72);
        unint64_t v25 = *(void *)(v21 + 72);
        if ((v24 & 0xFFFFFFFFFFFFLL) == (v25 & 0xFFFFFFFFFFFFLL)
          && ((v24 & 0xFF000000000000) == 0) != (HIWORD(v25) & 1))
        {
          break;
        }
      }
      uint64_t v26 = sub_4501AC(&v97, *((unint64_t *)&v104 + 1));
      sub_ED75C0(v19, (((*(void *)(v26 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v26 + 72) << 32) | (2* ((*(void *)(v26 + 72) & 0xFF000000000000) == 0)))+ (((unint64_t)*(unsigned int *)(v26 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v26 + 84) >> 1) & 1, 0, &v89, 0);
      double v27 = v89;
      double v28 = v90;
      while (v27 != v28)
      {
        uint64_t v30 = *(void *)(v21 + 72);
        uint64_t v31 = v27[4];
        if ((v30 & 0xFFFFFFFFFFFFLL) == (v31 & 0xFFFFFFFFFFFFLL)
          && ((v30 & 0xFF000000000000) == 0) == ((v31 & 0x1000000000000) == 0))
        {
          sub_45001C((char **)&v97, (uint64_t)v27, (void *)&v104 + 1);
          uint64_t v32 = v104;
          if (v32 + 1 >= (unint64_t)sub_EAE0E0((uint64_t)a2))
          {
            double v38 = (_OWORD *)sub_4501AC(&v97, *((unint64_t *)&v104 + 1));
            sub_4503DC((char **)&v94, v38);
            double v39 = (void **)*((void *)&v100 + 1);
            *((void *)&v102 + 1) = 0;
            unint64_t v40 = v101 - *((void *)&v100 + 1);
            if ((void)v101 - *((void *)&v100 + 1) >= 0x11uLL)
            {
              do
              {
                operator delete(*v39);
                double v39 = (void **)(*((void *)&v100 + 1) + 8);
                *((void *)&v100 + 1) = v39;
                unint64_t v40 = v101 - (void)v39;
              }
              while ((void)v101 - (void)v39 > 0x10uLL);
            }
            goto LABEL_36;
          }
          uint64_t v33 = *((void *)&v100 + 1);
          uint64_t v34 = 32 * (v101 - *((void *)&v100 + 1)) - 1;
          uint64_t v79 = v104;
          long double v35 = v97;
          uint64_t v36 = v98;
          if ((void)v101 == *((void *)&v100 + 1)) {
            uint64_t v34 = 0;
          }
          unint64_t v37 = *((void *)&v102 + 1) + v102;
          if (v34 == *((void *)&v102 + 1) + (void)v102)
          {
            sub_42BEC((uint64_t)&v100);
            uint64_t v33 = *((void *)&v100 + 1);
            unint64_t v37 = *((void *)&v102 + 1) + v102;
          }
          v29.i64[0] = v79;
          v29.i64[1] = 0xAAAAAAAAAAAAAAABLL * ((v36 - v35) >> 5);
          *(int64x2_t *)(*(void *)(v33 + ((v37 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v37) = vaddq_s64(v29, (int64x2_t)xmmword_20B8D90);
          ++*((void *)&v102 + 1);
        }
        v27 += 11;
      }
      uint64_t v13 = *((void *)&v102 + 1);
      if (!*((void *)&v102 + 1)) {
        goto LABEL_44;
      }
    }
    sub_4503DC((char **)&v94, (_OWORD *)v22);
    uint64_t v77 = (void **)*((void *)&v100 + 1);
    *((void *)&v102 + 1) = 0;
    unint64_t v40 = v101 - *((void *)&v100 + 1);
    if ((void)v101 - *((void *)&v100 + 1) >= 0x11uLL)
    {
      do
      {
        operator delete(*v77);
        uint64_t v77 = (void **)(*((void *)&v100 + 1) + 8);
        *((void *)&v100 + 1) = v77;
        unint64_t v40 = v101 - (void)v77;
      }
      while ((void)v101 - (void)v77 > 0x10uLL);
    }
LABEL_36:
    if (v40 >> 3 == 1)
    {
      uint64_t v41 = 128;
    }
    else
    {
      if (v40 >> 3 != 2)
      {
LABEL_41:
        sub_457D90(&v100);
        if ((void)v101 != *((void *)&v100 + 1)) {
          *(void *)&long long v101 = v101 + ((*((void *)&v100 + 1) - v101 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        sub_457E84((uint64_t)&v100);
        long long v101 = 0u;
        long long v102 = 0u;
        long long v100 = 0u;
        goto LABEL_44;
      }
      uint64_t v41 = 256;
    }
    *(void *)&long long v102 = v41;
    goto LABEL_41;
  }

  sub_443EFC(a4, a2);
}

void sub_44EE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (__p)
  {
    operator delete(__p);
    long long v66 = a56;
    if (!a56)
    {
LABEL_3:
      long long v67 = a59;
      if (!a59) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    long long v66 = a56;
    if (!a56) {
      goto LABEL_3;
    }
  }
  operator delete(v66);
  long long v67 = a59;
  if (!a59)
  {
LABEL_4:
    long long v68 = a62;
    if (!a62) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v67);
  long long v68 = a62;
  if (!a62)
  {
LABEL_5:
    sub_431BC((uint64_t)&a65);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v68);
  sub_431BC((uint64_t)&a65);
  _Unwind_Resume(a1);
}

uint64_t sub_44EF70@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X1>, char *a3@<X8>)
{
  sub_44F3C8(a1, a2, (uint64_t)v18);
  if (sub_EAE144(v18))
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v14);
      sub_188FC78(&v14, (uint64_t)"Reconstructing base path from geoIDs failed", 43);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (SHIBYTE(v13) < 0) {
        operator delete(__p);
      }
      if (v17 < 0) {
        operator delete(v16);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    sub_EAD400((uint64_t)a3);
  }
  else
  {
    long long __p = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v5 = sub_EADC88((uint64_t)v18);
    sub_ED712C((uint64_t)(a1 + 3), HIDWORD(v5) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v5) << 32), &__p);
    long long v6 = (unint64_t *)__p;
    uint64_t v7 = v12;
    if (__p == v12)
    {
LABEL_12:
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&v14);
        sub_188FC78(&v14, (uint64_t)"Reconstructing geoID path failed after finding a base path", 58);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v9, 3u);
        if (v10 < 0) {
          operator delete(v9);
        }
        if (v17 < 0) {
          operator delete(v16);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_EAD400((uint64_t)a3);
    }
    else
    {
      while (1)
      {
        sub_44E414((uint64_t)a1, v18, *v6, a3);
        if (!sub_EAE144(a3)) {
          break;
        }
        sub_405F44((uint64_t)a3);
        if (++v6 == v7) {
          goto LABEL_12;
        }
      }
    }
    if (__p)
    {
      uint64_t v12 = (unint64_t *)__p;
      operator delete(__p);
    }
  }
  return sub_405F44((uint64_t)v18);
}

void sub_44F2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a22);
  if (a16) {
    operator delete(a16);
  }
  sub_405F44((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t sub_44F3C8@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  sub_EAD400((uint64_t)&v56);
  long long v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v34 = a2;
    LOWORD(v8) = 0;
    uint64_t v9 = 0;
    unsigned __int8 v10 = 1;
    do
    {
      uint64_t v11 = *v6;
      if (*v6 >= 0) {
        uint64_t v12 = *v6;
      }
      else {
        uint64_t v12 = -v11;
      }
      unint64_t v13 = sub_2FD4C0(*a1, v12);
      BOOL v14 = v13 > 0xFFFFFFFEFFFFFFFFLL || v13 == 0;
      int v15 = v14;
      if (v14) {
        unint64_t v16 = 0;
      }
      else {
        unint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
      }
      if (!v16)
      {
LABEL_28:
        sub_EAD400(a3);
        return sub_405F44((uint64_t)&v56);
      }
      if (v11 < 1) {
        int v17 = 1;
      }
      else {
        int v17 = v15;
      }
      if (v9)
      {
        uint64_t v18 = 0x1000000000000;
        if (!v17) {
          uint64_t v18 = 0;
        }
        sub_44F968((uint64_t)(a1 + 3), ((unint64_t)(unsigned __int16)v8 << 32) | ((unint64_t)v10 << 48) | v9, v18 | v16, (uint64_t)&v46);
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(v50), (int32x4_t)vceqzq_s64(v46)))) & 1) != 0
          || !v55
          || !v49)
        {
          goto LABEL_28;
        }
        sub_EADC28((uint64_t)&v56, (int **)&v46);
      }
      unint64_t v8 = HIDWORD(v16);
      uint64_t v9 = v16;
      ++v6;
      unsigned __int8 v10 = v17;
    }
    while (v6 != v7);
    if ((char *)v34[1] - (char *)*v34 == 8)
    {
      sub_ED7040((uint64_t)(a1 + 3), ((v8 << 32) | ((unint64_t)(v17 == 0) << 48) | v16) ^ 0x1000000000000, (uint64_t)&v46);
      sub_EADAD8((uint64_t)&v56, ((unint64_t)v16 << 32) | (v8 << 16) | (2 * (v17 == 0)), (long long *)v46.i8);
    }
  }
  v46.i64[1] = 0;
  uint64_t v47 = 0;
  char v48 = 0;
  uint64_t v49 = 0x3FF0000000000000;
  v50.i8[0] = 1;
  v50.i64[1] = 0;
  uint64_t v51 = 0;
  char v52 = 0;
  int v53 = 36000;
  char v54 = 0;
  v46.i32[0] = 0;
  sub_EAD920((uint64_t)&v56, (uint64_t)&v46);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  char v38 = 0;
  uint64_t v39 = 0x3FF0000000000000;
  char v40 = 1;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  char v43 = 0;
  int v44 = 36000;
  char v45 = 0;
  int v35 = 1000000000;
  sub_EADAA8((uint64_t)&v56, (uint64_t)&v35);
  uint64_t v19 = v59;
  *(void *)(a3 + 16) = v57;
  *(void *)(a3 + 40) = v19;
  uint64_t v20 = v66;
  *(void *)(a3 + 128) = v64;
  *(_OWORD *)a3 = v56;
  long long v56 = 0uLL;
  *(_OWORD *)(a3 + 24) = v58;
  uint64_t v57 = 0;
  long long v58 = 0uLL;
  uint64_t v59 = 0;
  long long v21 = v60;
  long long v22 = v61;
  long long v23 = v62[0];
  *(_OWORD *)(a3 + 94) = *(_OWORD *)((char *)v62 + 14);
  *(_OWORD *)(a3 + 64) = v22;
  *(_OWORD *)(a3 + 80) = v23;
  *(_OWORD *)(a3 + 48) = v21;
  *(_OWORD *)(a3 + 112) = v63;
  long long v63 = 0uLL;
  *(_OWORD *)(a3 + 136) = v65;
  *(void *)(a3 + 152) = v20;
  uint64_t v64 = 0;
  long long v65 = 0uLL;
  uint64_t v66 = 0;
  *(_OWORD *)(a3 + 160) = v67;
  uint64_t v24 = v71;
  *(void *)(a3 + 176) = v68;
  long long v67 = 0uLL;
  long long v25 = v69;
  long long v26 = v70;
  *(void *)(a3 + 216) = v24;
  *(_OWORD *)(a3 + 200) = v26;
  *(_OWORD *)(a3 + 184) = v25;
  *(_OWORD *)(a3 + 224) = v72;
  uint64_t v27 = v75;
  *(void *)(a3 + 240) = v73;
  uint64_t v68 = 0;
  long long v72 = 0uLL;
  *(_OWORD *)(a3 + 248) = v74;
  *(void *)(a3 + 264) = v27;
  uint64_t v75 = 0;
  uint64_t v73 = 0;
  long long v74 = 0uLL;
  *(_OWORD *)(a3 + 272) = v76;
  LODWORD(v20) = v78;
  *(_DWORD *)(a3 + 296) = v78;
  if (v20 <= 1) {
    *(void *)(a3 + 288) = v77;
  }
  long long v28 = *(_OWORD *)v88;
  *(_OWORD *)(a3 + 432) = v87;
  *(_OWORD *)(a3 + 448) = v28;
  long long v29 = v84;
  *(_OWORD *)(a3 + 368) = v83;
  *(_OWORD *)(a3 + 384) = v29;
  long long v30 = v86;
  *(_OWORD *)(a3 + 400) = v85;
  *(_OWORD *)(a3 + 416) = v30;
  long long v31 = v80;
  *(_OWORD *)(a3 + 304) = v79;
  *(_OWORD *)(a3 + 320) = v31;
  long long v32 = v82;
  *(_OWORD *)(a3 + 336) = v81;
  *(_OWORD *)(a3 + 352) = v32;
  *(void *)(a3 + 463) = *(void *)&v88[15];
  return sub_405F44((uint64_t)&v56);
}

void sub_44F774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_44F788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_44F79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_44F7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_44F7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_44F7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_44F7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_44F804(uint64_t a1@<X0>, unint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_ED75C0(a1 + 24, *a2, 0, a4, 0);
  uint64_t v6 = a4[1];
  if (*a4 != v6)
  {
    for (uint64_t i = *a4 + 88; ; i += 88)
    {
      uint64_t v8 = *(void *)(i - 16);
      if ((v8 & 0xFFFFFFFFFFFFLL) != (*a3 & 0xFFFFFFFFFFFFLL)
        || ((*a3 & 0x1000000000000) == 0) != ((v8 & 0xFF000000000000) == 0))
      {
        break;
      }
      if (i == v6) {
        return;
      }
    }
    uint64_t v10 = i - 88;
    if (i - 88 != v6)
    {
      while (i != v6)
      {
        uint64_t v11 = *(void *)(i + 72);
        if ((v11 & 0xFFFFFFFFFFFFLL) == (*a3 & 0xFFFFFFFFFFFFLL)
          && ((v11 & 0xFF000000000000) == 0) == ((*a3 & 0x1000000000000) == 0))
        {
          long long v12 = *(_OWORD *)(i + 16);
          *(_OWORD *)uint64_t v10 = *(_OWORD *)i;
          *(_OWORD *)(v10 + 16) = v12;
          long long v13 = *(_OWORD *)(i + 32);
          long long v14 = *(_OWORD *)(i + 48);
          long long v15 = *(_OWORD *)(i + 64);
          *(void *)(v10 + 80) = *(void *)(i + 80);
          *(_OWORD *)(v10 + 48) = v14;
          *(_OWORD *)(v10 + 64) = v15;
          *(_OWORD *)(v10 + 32) = v13;
          v10 += 88;
        }
        i += 88;
      }
    }
    if (v10 != v6) {
      a4[1] = v10;
    }
  }
}

void sub_44F94C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_44F968(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_ED75C0(a1, (a2 >> 16) & 0xFFFF0000 | (a2 << 32) | (2 * ((a2 & 0xFF000000000000) == 0)), 0, &v19, 1);
  uint64_t v6 = v19;
  uint64_t v7 = v19;
  if (v19 != v20)
  {
    uint64_t v7 = v19;
    while (1)
    {
      unint64_t v8 = *((void *)v7 + 9);
      uint64_t v9 = (v8 >> 16) & 0xFFFF0000 | (v8 << 32);
      BOOL v10 = (v8 & 0xFF000000000000) == 0;
      unint64_t v11 = (v9 | (2 * v10)) + (((unint64_t)*((unsigned int *)v7 + 20) >> 14) & 0x3FFFC);
      unint64_t v12 = HIDWORD(v11);
      int v13 = WORD1(v11);
      BOOL v14 = v12 == a3 && v13 == WORD2(a3);
      if (v14 && ((HIWORD(a3) & 1 ^ v10) & 1) != 0) {
        break;
      }
      uint64_t v7 = (_OWORD *)((char *)v7 + 88);
      if (v7 == v20) {
        goto LABEL_13;
      }
    }
  }
  if (v7 == v20)
  {
LABEL_13:
    *(_DWORD *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_WORD *)(a4 + 36) = -1;
    *(unsigned char *)(a4 + 38) = 0;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_DWORD *)(a4 + 72) = 0;
    *(_WORD *)(a4 + 76) = -1;
    *(unsigned char *)(a4 + 78) = 0;
    *(_DWORD *)(a4 + 80) = 0;
    *(unsigned char *)(a4 + 84) &= 0xF8u;
    if (!v6) {
      return;
    }
    goto LABEL_14;
  }
  long long v15 = v7[1];
  *(_OWORD *)a4 = *v7;
  *(_OWORD *)(a4 + 16) = v15;
  long long v16 = v7[2];
  long long v17 = v7[3];
  long long v18 = v7[4];
  *(void *)(a4 + 80) = *((void *)v7 + 10);
  *(_OWORD *)(a4 + 48) = v17;
  *(_OWORD *)(a4 + 64) = v18;
  *(_OWORD *)(a4 + 32) = v16;
  if (v6)
  {
LABEL_14:
    uint64_t v20 = v6;
    operator delete(v6);
  }
}

void sub_44FAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_44FACC(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  uint64_t v6 = (void *)(a4 + 8);
  *(void *)(a4 + 16) = 0;
  *(unsigned char *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0x3FF0000000000000;
  *(unsigned char *)(a4 + 40) = 1;
  *(void *)(a4 + 48) = 0;
  *(void *)(a4 + 56) = 0;
  *(unsigned char *)(a4 + 64) = 0;
  *(_DWORD *)(a4 + 66) = 36000;
  *(unsigned char *)(a4 + 70) = 0;
  sub_2954EC(*a1, *(void *)(a2 + 32), (uint64_t)&v50);
  sub_2E4B5C((uint64_t)&v50, &v54);
  if (__p)
  {
    char v52 = (double *)__p;
    operator delete(__p);
  }
  unint64_t v11 = v54;
  unint64_t v12 = v55;
  if (v54 == v55)
  {
    unint64_t v13 = -1;
    unint64_t v12 = v54;
    int v14 = 0x7FFFFFFF;
  }
  else if ((char *)v55 - (unsigned char *)v54 == 12)
  {
    unint64_t v13 = *(void *)v54;
    int v14 = *((_DWORD *)v54 + 2);
  }
  else
  {
    unint64_t v15 = sub_450B4C((uint64_t *)&v54, 0, 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (unsigned char *)v54) >> 2) - 1, a3, 0, 0x7FFFFFFFFFFFFFFFLL, 1, v7, v8, v9, v10);
    if (v15 >= -1 - 0x5555555555555555 * (((char *)v55 - (unsigned char *)v54) >> 2)) {
      unint64_t v18 = v15;
    }
    else {
      unint64_t v18 = v15 + 1;
    }
    unint64_t v13 = sub_450830((_DWORD *)v54 + 3 * v15, (_DWORD *)v54 + 3 * v18, a3, v16, v17);
    unint64_t v11 = v54;
    unint64_t v12 = v55;
  }
  unint64_t v48 = v13;
  int v49 = v14;
  uint64_t v58 = 0x7FEFFFFFFFFFFFFFLL;
  double v19 = NAN;
  uint64_t v56 = -1;
  int v57 = 0x7FFFFFFF;
  int64x2_t v50 = (double *)&v48;
  long long __p = &v58;
  char v52 = (double *)&v56;
  if (v11 != v12 && v11 + 3 != v12)
  {
    do
    {
      sub_457FB8((uint64_t)&v50, v11, v11 + 3, v19, v8, v9, v10);
      uint64_t v20 = v11 + 6;
      v11 += 3;
    }
    while (v20 != v12);
    unint64_t v11 = v54;
    unint64_t v12 = v55;
  }
  double v60 = 0.0;
  double v61 = 0.0;
  uint64_t v59 = 0x7FEFFFFFFFFFFFFFLL;
  int64x2_t v50 = (double *)&v56;
  long long __p = &v59;
  char v52 = &v60;
  int v53 = &v61;
  if (v11 == v12 || v11 + 3 == v12)
  {
    *(_DWORD *)a4 = vcvtad_u64_f64(0.0);
    unsigned int v23 = v48;
    unsigned int v22 = HIDWORD(v48);
    if (v48 == -1 && HIDWORD(v48) == -1) {
      goto LABEL_39;
    }
  }
  else
  {
    do
    {
      double v19 = sub_4582C8(&v50, (uint64_t)v11, v11 + 3, v19);
      uint64_t v21 = v11 + 6;
      v11 += 3;
    }
    while (v21 != v12);
    if (v61 == 0.0)
    {
      *(_DWORD *)a4 = vcvtad_u64_f64(0.0);
      unsigned int v23 = v48;
      unsigned int v22 = HIDWORD(v48);
      if (v48 != -1 || HIDWORD(v48) != -1) {
        goto LABEL_37;
      }
LABEL_39:
      *uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
      long long v30 = v54;
      if (!v54) {
        return;
      }
      goto LABEL_40;
    }
    if (v60 / v61 <= 1.0) {
      double v26 = v60 / v61 * 1000000000.0;
    }
    else {
      double v26 = 1000000000.0;
    }
    *(_DWORD *)a4 = vcvtad_u64_f64(v26);
    unsigned int v23 = v48;
    unsigned int v22 = HIDWORD(v48);
    if (v48 == -1 && HIDWORD(v48) == -1) {
      goto LABEL_39;
    }
  }
LABEL_37:
  unsigned int v29 = *a3;
  unsigned int v28 = a3[1];
  if (v29 == -1 && v28 == -1) {
    goto LABEL_39;
  }
  long double v31 = exp(3.14159265 - (double)v22 * 6.28318531 / 4294967300.0);
  long double v32 = atan((v31 - 1.0 / v31) * 0.5) * 57.2957795 * 0.0174532925;
  v33.i64[0] = v23;
  v33.i64[1] = v29;
  long double v34 = exp(3.14159265 - (double)v28 * 6.28318531 / 4294967300.0);
  long double v35 = atan((v34 - 1.0 / v34) * 0.5) * 57.2957795 * 0.0174532925;
  int64x2_t v36 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v33), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v47 = vsubq_f64((float64x2_t)v36, (float64x2_t)vdupq_laneq_s64(v36, 1)).f64[0];
  long double v37 = sin((v32 - v35) * 0.5);
  long double v38 = v37 * v37;
  double v39 = cos(v32);
  long double v40 = v39 * cos(v35);
  long double v41 = sin(0.5 * v47);
  long double v42 = atan2(sqrt(v41 * v41 * v40 + v38), sqrt(1.0 - (v41 * v41 * v40 + v38)));
  double v43 = (v42 + v42) * 6372797.56 * 100.0;
  if (v43 >= 0.0)
  {
    double v44 = v43;
    if (v43 >= 4.50359963e15) {
      goto LABEL_50;
    }
    uint64_t v45 = (uint64_t)(v43 + v43) + 1;
  }
  else
  {
    double v44 = v43;
    if (v43 <= -4.50359963e15) {
      goto LABEL_50;
    }
    uint64_t v45 = (uint64_t)(v43 + v43);
    if (v45 >= 1) {
      --v45;
    }
  }
  double v44 = (double)(v45 >> 1);
LABEL_50:
  if (v44 < 9.22337204e18)
  {
    if (v43 >= 0.0)
    {
      if (v43 >= 4.50359963e15) {
        goto LABEL_61;
      }
      uint64_t v46 = (uint64_t)(v43 + v43) + 1;
    }
    else
    {
      if (v43 <= -4.50359963e15) {
        goto LABEL_61;
      }
      uint64_t v46 = (uint64_t)(v43 + v43);
      if (v46 >= 1) {
        --v46;
      }
    }
    double v43 = (double)(v46 >> 1);
LABEL_61:
    *uint64_t v6 = (uint64_t)v43;
    long long v30 = v54;
    if (!v54) {
      return;
    }
    goto LABEL_40;
  }
  *uint64_t v6 = 0x7FFFFFFFFFFFFFFELL;
  long long v30 = v54;
  if (v54)
  {
LABEL_40:
    int v55 = v30;
    operator delete(v30);
  }
}

void sub_44FFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_45001C(char **a1, uint64_t a2, void *a3)
{
  double v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 < v6)
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)double v7 = *(_OWORD *)a2;
    *((_OWORD *)v7 + 1) = v8;
    long long v9 = *(_OWORD *)(a2 + 32);
    long long v10 = *(_OWORD *)(a2 + 48);
    long long v11 = *(_OWORD *)(a2 + 64);
    *((void *)v7 + 10) = *(void *)(a2 + 80);
    *((_OWORD *)v7 + 3) = v10;
    *((_OWORD *)v7 + 4) = v11;
    *((_OWORD *)v7 + 2) = v9;
    *((void *)v7 + 11) = *a3;
    unint64_t v12 = v7 + 96;
    goto LABEL_14;
  }
  unint64_t v13 = *a1;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 5);
  unint64_t v15 = v14 + 1;
  if (v14 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v13) >> 5);
  if (2 * v16 > v15) {
    unint64_t v15 = 2 * v16;
  }
  if (v16 >= 0x155555555555555) {
    unint64_t v17 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v17 = v15;
  }
  if (v17 > 0x2AAAAAAAAAAAAAALL) {
    sub_188D718();
  }
  uint64_t v18 = 96 * v17;
  double v19 = (char *)operator new(96 * v17);
  long long v20 = *(_OWORD *)(a2 + 48);
  uint64_t v21 = &v19[96 * v14];
  unsigned int v22 = &v19[v18];
  *((_OWORD *)v21 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v21 + 3) = v20;
  *((_OWORD *)v21 + 4) = *(_OWORD *)(a2 + 64);
  uint64_t v23 = *(void *)(a2 + 80);
  long long v24 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)a2;
  *((_OWORD *)v21 + 1) = v24;
  uint64_t v25 = *a3;
  *((void *)v21 + 10) = v23;
  *((void *)v21 + 11) = v25;
  unint64_t v12 = v21 + 96;
  if (v7 == v13)
  {
    *a1 = v21;
    a1[1] = v12;
    a1[2] = v22;
    if (!v13) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  do
  {
    double v26 = v21 - 96;
    long long v27 = *((_OWORD *)v7 - 5);
    *((_OWORD *)v21 - 6) = *((_OWORD *)v7 - 6);
    *((_OWORD *)v21 - 5) = v27;
    long long v28 = *((_OWORD *)v7 - 4);
    long long v29 = *((_OWORD *)v7 - 3);
    long long v30 = *((_OWORD *)v7 - 1);
    *((_OWORD *)v21 - 2) = *((_OWORD *)v7 - 2);
    *((_OWORD *)v21 - 1) = v30;
    *((_OWORD *)v21 - 4) = v28;
    *((_OWORD *)v21 - 3) = v29;
    v7 -= 96;
    v21 -= 96;
  }
  while (v7 != v13);
  *a1 = v26;
  a1[1] = v12;
  a1[2] = v22;
  if (v13) {
LABEL_13:
  }
    operator delete(v13);
LABEL_14:
  a1[1] = v12;
  return v12 - 96;
}

uint64_t sub_4501AC(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 5) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    long long v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 5));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v10 = &v15;
    }
    else {
      long long v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 96 * a2;
}

void sub_4502FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

char *sub_4503DC(char **a1, _OWORD *a2)
{
  unint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    long long v11 = *a1;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x2AAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v11) >> 5);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x155555555555555) {
      unint64_t v15 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 > 0x2AAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      std::string v16 = (char *)operator new(96 * v15);
    }
    else
    {
      std::string v16 = 0;
    }
    long long v17 = a2[3];
    std::string v18 = &v16[96 * v12];
    *((_OWORD *)v18 + 2) = a2[2];
    *((_OWORD *)v18 + 3) = v17;
    long long v19 = a2[5];
    *((_OWORD *)v18 + 4) = a2[4];
    *((_OWORD *)v18 + 5) = v19;
    long long v20 = a2[1];
    *(_OWORD *)std::string v18 = *a2;
    *((_OWORD *)v18 + 1) = v20;
    long long v10 = v18 + 96;
    if (v5 != v11)
    {
      do
      {
        long long v21 = *((_OWORD *)v5 - 5);
        *((_OWORD *)v18 - 6) = *((_OWORD *)v5 - 6);
        *((_OWORD *)v18 - 5) = v21;
        long long v22 = *((_OWORD *)v5 - 4);
        long long v23 = *((_OWORD *)v5 - 3);
        long long v24 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v18 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v18 - 1) = v24;
        *((_OWORD *)v18 - 4) = v22;
        *((_OWORD *)v18 - 3) = v23;
        v18 -= 96;
        v5 -= 96;
      }
      while (v5 != v11);
      unint64_t v5 = *a1;
    }
    *a1 = v18;
    a1[1] = v10;
    a1[2] = &v16[96 * v15];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = a2[1];
    *(_OWORD *)unint64_t v5 = *a2;
    *((_OWORD *)v5 + 1) = v6;
    long long v7 = a2[2];
    long long v8 = a2[3];
    long long v9 = a2[5];
    *((_OWORD *)v5 + 4) = a2[4];
    *((_OWORD *)v5 + 5) = v9;
    *((_OWORD *)v5 + 2) = v7;
    *((_OWORD *)v5 + 3) = v8;
    long long v10 = v5 + 96;
  }
  a1[1] = v10;
  return v10 - 96;
}

void **sub_450538(void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      unint64_t v5 = v3 - 48;
      long long v6 = v3 - 48;
      long long v7 = v3 - 48;
      do
      {
        long long v8 = *(void (***)(char *))v7;
        v7 -= 48;
        (*v8)(v6);
        v5 -= 48;
        BOOL v9 = v6 == v2;
        long long v6 = v7;
      }
      while (!v9);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_4505D4(void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      unint64_t v5 = v3 - 64;
      long long v6 = v3 - 64;
      long long v7 = v3 - 64;
      do
      {
        long long v8 = *(void (***)(char *))v7;
        v7 -= 64;
        (*v8)(v6);
        v5 -= 64;
        BOOL v9 = v6 == v2;
        long long v6 = v7;
      }
      while (!v9);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_450670(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v3 = *(void ***)(a1 + 8);
    *(void *)(a1 + 40) = 0;
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    unint64_t v5 = &v2[v4 >> 8];
    uint64_t v6 = (uint64_t)*v5 + 16 * v4;
    uint64_t v7 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(unsigned char *)(a1 + 40) + v4);
    if (v6 != v7)
    {
      while (1)
      {
        long long v8 = *(std::__shared_weak_count **)(v6 + 8);
        if (v8)
        {
          if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        v6 += 16;
        if (v6 - (void)*v5 == 4096) {
          goto LABEL_8;
        }
LABEL_4:
        if (v6 == v7)
        {
          unint64_t v2 = *(void ***)(a1 + 8);
          uint64_t v3 = *(void ***)(a1 + 16);
          goto LABEL_12;
        }
      }
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v6 += 16;
      if (v6 - (void)*v5 != 4096) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t v9 = (uint64_t)v5[1];
      ++v5;
      uint64_t v6 = v9;
      goto LABEL_4;
    }
LABEL_12:
    *(void *)(a1 + 40) = 0;
    unint64_t v10 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        uint64_t v3 = *(void ***)(a1 + 16);
        unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
        *(void *)(a1 + 8) = v2;
        unint64_t v10 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 128;
    goto LABEL_19;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 256;
LABEL_19:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unint64_t sub_450830(_DWORD *a1, _DWORD *a2, _DWORD *a3, double a4, double a5)
{
  LODWORD(a4) = *a2;
  LODWORD(a5) = a2[1];
  *(double *)&unint64_t v7 = (double)*(unint64_t *)&a4 * 360.0 / 4294967300.0 + -180.0;
  double v30 = *(double *)&v7;
  LODWORD(v7) = *a1;
  double v8 = (double)v7 * 360.0 / 4294967300.0 + -180.0;
  long double v9 = exp(3.14159265 - (double)*(unint64_t *)&a5 * 6.28318531 / 4294967300.0);
  *(double *)&unint64_t v10 = atan((v9 - 1.0 / v9) * 0.5);
  double v11 = *(double *)&v10 * 57.2957795;
  LODWORD(v10) = a1[1];
  long double v12 = exp(3.14159265 - (double)v10 * 6.28318531 / 4294967300.0);
  double v13 = atan((v12 - 1.0 / v12) * 0.5) * 57.2957795;
  double v31 = v8;
  double v14 = v30 - v8;
  double v15 = v14 * v14;
  double v16 = v11 - v13;
  double v17 = v14 * v14 + v16 * v16;
  double v18 = 0.0;
  if (v17 > 0.0)
  {
    LODWORD(v15) = a3[1];
    long double v19 = exp((double)*(unint64_t *)&v15 * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v20 = atan((v19 - 1.0 / v19) * 0.5);
    LODWORD(v21) = *a3;
    double v22 = fmax((v16 * (v20 * 57.2957795 - v13) + v14 * ((double)v21 * 360.0 / 4294967300.0 + -180.0 - v31)) / v17, 0.0);
    if (v22 <= 1.0) {
      double v18 = v22;
    }
    else {
      double v18 = 1.0;
    }
  }
  double v23 = fmax(v13 + v16 * v18, -85.0511288);
  double v24 = v23 * 3.14159265 / 180.0;
  BOOL v25 = v23 < 85.0511288;
  double v26 = 1.48442223;
  if (v25) {
    double v26 = v24;
  }
  long double v27 = sin(v26);
  LODWORD(v28) = ((log((v27 + 1.0) / (1.0 - v27)) / -12.5663706 + 0.5) * 4294967300.0);
  if (v28 >= 0xFFFFFFFE) {
    uint64_t v28 = 4294967294;
  }
  else {
    uint64_t v28 = v28;
  }
  return ((v31 + v14 * v18 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v28 << 32);
}

unint64_t sub_450B4C(uint64_t *a1, unint64_t a2, unint64_t a3, _DWORD *a4, int a5, uint64_t a6, uint64_t a7, double a8, double a9, double a10, double a11)
{
  unint64_t v14 = a2;
  double v16 = NAN;
  uint64_t v65 = -1;
  int v66 = 0x7FFFFFFF;
  unint64_t v17 = a3 - 1;
  if (a2 <= 1) {
    unint64_t v18 = 1;
  }
  else {
    unint64_t v18 = a2;
  }
  if (a6 == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (a7)
    {
      if (a2 < a3)
      {
        uint64_t v19 = 12 * a2;
        double v20 = 1.79769313e308;
        unint64_t v21 = a2;
        do
        {
          unint64_t v22 = v21 + 1;
          sub_3BD4EC((_DWORD *)(*a1 + v19), (_DWORD *)(*a1 + v19 + 12), a4, (unsigned int *)&v65, v16, a9, a10, a11, 0, a5);
          if (v16 < v20)
          {
            unint64_t v14 = v21;
            double v20 = v16;
          }
          v19 += 12;
          ++v21;
        }
        while (a3 != v22);
      }
    }
    else if (v17 >= v18)
    {
      uint64_t v51 = 12 * a3;
      double v52 = 1.79769313e308;
      do
      {
        sub_3BD4EC((_DWORD *)(*a1 + v51 - 12), (_DWORD *)(*a1 + v51), a4, (unsigned int *)&v65, v16, a9, a10, a11, 0, a5);
        if (v16 < v52)
        {
          unint64_t v14 = v17;
          double v52 = v16;
        }
        --v17;
        v51 -= 12;
      }
      while (v17 >= v18);
    }
    return v14;
  }
  unint64_t v58 = v18;
  uint64_t v24 = 0;
  if (a7) {
    unint64_t v25 = a2;
  }
  else {
    unint64_t v25 = a3 - 1;
  }
  double v26 = 1.79769313e308;
  int64x2_t v27 = vdupq_n_s64(0x4076800000000000uLL);
  float64x2_t v56 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
  float64x2_t v57 = (float64x2_t)v27;
  float64x2_t v55 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  int64x2_t v28 = vdupq_n_s64(0x41EFFFFFFFE00000uLL);
  float64x2_t v54 = (float64x2_t)v28;
  if (!a7) {
    goto LABEL_18;
  }
LABEL_16:
  if (v25 < a3)
  {
    do
    {
      uint64_t v29 = a7;
      unint64_t v30 = v25 + 1;
      uint64_t v31 = 12 * v25 + 12;
      sub_3BD4EC((_DWORD *)(*a1 + 12 * v25), (_DWORD *)(*a1 + v31), a4, (unsigned int *)&v65, *(double *)v28.i64, *(double *)v27.i64, a10, a11, 0, a5);
      if (v32 < v26)
      {
        unint64_t v14 = v25;
        double v26 = v32;
      }
      uint64_t v33 = *a1;
      long double v34 = (unsigned int *)(*a1 + 12 * v25);
      long double v35 = (unsigned int *)(*a1 + v31);
      if (a5)
      {
        unint64_t v36 = *(unsigned int *)(v33 + 12 * v25 + 4) - (unint64_t)*(unsigned int *)(v33 + 12 * v30 + 4);
        a7 = v29;
        *(double *)v28.i64 = sqrt((double)((*v34 - (unint64_t)*v35) * (*v34 - (unint64_t)*v35) + v36 * v36))
                           / 100.0
                           * 100.0;
        if (*(double *)v28.i64 >= 0.0) {
          goto LABEL_23;
        }
      }
      else
      {
        LODWORD(v32) = *(_DWORD *)(v33 + 12 * v25 + 4);
        long double v38 = exp(3.14159265 - (double)*(unint64_t *)&v32 * 6.28318531 / 4294967300.0);
        *(double *)&unint64_t v39 = atan((v38 - 1.0 / v38) * 0.5) * 57.2957795;
        long double v40 = *(double *)&v39 * 0.0174532925;
        LODWORD(v39) = *(_DWORD *)(v33 + 12 * v30 + 4);
        long double v41 = exp(3.14159265 - (double)v39 * 6.28318531 / 4294967300.0);
        unsigned int v60 = *v34;
        long double v42 = atan((v41 - 1.0 / v41) * 0.5) * 57.2957795 * 0.0174532925;
        v43.i64[0] = v60;
        v43.i64[1] = *v35;
        int64x2_t v44 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v43), v57), v54), v56), v55);
        double v61 = vsubq_f64((float64x2_t)v44, (float64x2_t)vdupq_laneq_s64(v44, 1)).f64[0];
        long double v45 = sin((v40 - v42) * 0.5);
        long double v46 = v45 * v45;
        double v47 = cos(v40);
        long double v48 = v47 * cos(v42);
        long double v49 = sin(0.5 * v61);
        *(double *)v28.i64 = atan2(sqrt(v46 + v48 * (v49 * v49)), sqrt(1.0 - (v46 + v48 * (v49 * v49))));
        a7 = v29;
        *(double *)v28.i64 = (*(double *)v28.i64 + *(double *)v28.i64) * 6372797.56 * 100.0;
        if (*(double *)v28.i64 >= 0.0)
        {
LABEL_23:
          v27.i64[0] = v28.i64[0];
          if (*(double *)v28.i64 >= 4.50359963e15) {
            goto LABEL_30;
          }
          uint64_t v37 = (uint64_t)(*(double *)v28.i64 + *(double *)v28.i64) + 1;
          goto LABEL_29;
        }
      }
      v27.i64[0] = v28.i64[0];
      if (*(double *)v28.i64 <= -4.50359963e15) {
        goto LABEL_30;
      }
      uint64_t v37 = (uint64_t)(*(double *)v28.i64 + *(double *)v28.i64);
      if (v37 >= 1) {
        --v37;
      }
LABEL_29:
      *(double *)v27.i64 = (double)(v37 >> 1);
LABEL_30:
      a10 = 9.22337204e18;
      if (*(double *)v27.i64 >= 9.22337204e18)
      {
        v24 += 0x7FFFFFFFFFFFFFFELL;
        if (v24 > a6) {
          return v14;
        }
        goto LABEL_42;
      }
      if (*(double *)v28.i64 >= 0.0)
      {
        v27.i64[0] = 0x4330000000000000;
        if (*(double *)v28.i64 >= 4.50359963e15) {
          goto LABEL_41;
        }
        uint64_t v50 = (uint64_t)(*(double *)v28.i64 + *(double *)v28.i64) + 1;
      }
      else
      {
        v27.i64[0] = 0xC330000000000000;
        if (*(double *)v28.i64 <= -4.50359963e15) {
          goto LABEL_41;
        }
        uint64_t v50 = (uint64_t)(*(double *)v28.i64 + *(double *)v28.i64);
        if (v50 >= 1) {
          --v50;
        }
      }
      *(double *)v28.i64 = (double)(v50 >> 1);
LABEL_41:
      v24 += (uint64_t)*(double *)v28.i64;
      if (v24 > a6) {
        return v14;
      }
LABEL_42:
      if (a7) {
        ++v25;
      }
      else {
        --v25;
      }
      if (a7) {
        goto LABEL_16;
      }
LABEL_18:
      ;
    }
    while (v25 >= v58);
  }
  return v14;
}

void sub_451050()
{
}

void sub_45115C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_451170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_451184()
{
}

void sub_4511A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_4511BC(uint64_t a1, void **a2, uint64_t a3)
{
  if (!sub_1106DFC((uint64_t)a2)) {
    return 1;
  }
  uint64_t v6 = *(void *)(a1 + 64);
  if (!v6) {
    return 1;
  }
  long long v27 = 0uLL;
  int v7 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 72) = v7 + 1;
  if (v7 <= 74999)
  {
    unint64_t v8 = v6 + *(void *)(a1 + 56) - 1;
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8));
    long long v10 = *(_OWORD *)(v9 + 16 * v8);
    uint64_t v11 = *(void *)(v9 + 16 * v8 + 8);
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    long long v27 = v10;
    unint64_t v12 = *(void *)(a1 + 64) + *(void *)(a1 + 56) - 1;
    double v13 = *(std::__shared_weak_count **)(*(void *)(*(void *)(a1 + 32) + ((v12 >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * v12
                                       + 8);
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v16 = v14 - v15;
    BOOL v17 = v14 == v15;
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v18 - 1;
    uint64_t v20 = 32 * v16 - 1;
    if (v17) {
      uint64_t v20 = 0;
    }
    if ((unint64_t)(v20 - (v18 + v19) + 1) >= 0x200)
    {
      operator delete(*(void **)(v14 - 8));
      *(void *)(a1 + 40) -= 8;
    }
    int v21 = *(_DWORD *)(v27 + 320);
    if (v21 + 1 < sub_1106DFC((uint64_t)a2))
    {
      unint64_t v22 = (_DWORD *)sub_1106DE8(a2, v21 + 1);
      int v23 = sub_4570E0(v27, v22);
      int v24 = sub_1106DFC((uint64_t)a2) - 2;
      switch(v23)
      {
        case 0:
          if (!sub_50E294(v22)) {
            operator new();
          }
          sub_45165C(v27, *(void *)a1, v22, (void *)(a1 + 24), v24 == v21, 0);
          uint64_t v25 = 0;
          goto LABEL_23;
        case 1:
          sub_45165C(v27, *(void *)a1, v22, (void *)(a1 + 24), v24 == v21, 1);
          if (v24 != v21) {
            goto LABEL_28;
          }
          sub_4571DC(a3, (long long *)(v27 + 32));
          break;
        case 2:
          sub_453894(v27, *(void *)a1, (void *)(a1 + 24));
          goto LABEL_28;
        case 3:
          operator new();
        default:
LABEL_28:
          uint64_t v25 = 0;
          goto LABEL_23;
      }
    }
  }
  uint64_t v25 = 1;
LABEL_23:
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(void))(**((void **)&v27 + 1) + 16))(*((void *)&v27 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v27 + 1));
  }
  return v25;
}

void sub_451584()
{
}

void sub_4515C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_4515FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_451610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_451624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_451638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_45165C(uint64_t a1, uint64_t a2, _DWORD *a3, void *a4, int a5, int a6)
{
  if (*(int *)(a1 + 312) > 1) {
    return;
  }
  uint64_t v9 = (uint64_t)a3;
  ++*(void *)(a1 + 320);
  if (sub_50E294(a3))
  {
    uint64_t v12 = *(void *)a1;
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)&long long __p = *(void *)a1;
    if (v11)
    {
      double v13 = std::__shared_weak_count::lock(v11);
      *((void *)&__p + 1) = v13;
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = a4[2];
        uint64_t v16 = a4[1];
        if (v15 == v16) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = 32 * (v15 - v16) - 1;
        }
        uint64_t v18 = a4[5];
        unint64_t v19 = v18 + a4[4];
        if (v17 != v19) {
          goto LABEL_20;
        }
        sub_453D98((uint64_t)a4);
LABEL_19:
        uint64_t v16 = a4[1];
        uint64_t v18 = a4[5];
        unint64_t v19 = v18 + a4[4];
LABEL_20:
        double v26 = (uint64_t *)(*(void *)(v16 + ((v19 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v19);
        *double v26 = v12;
        v26[1] = (uint64_t)v14;
        a4[5] = v18 + 1;
        return;
      }
    }
    goto LABEL_114;
  }
  uint64_t v98 = a4;
  unint64_t v20 = *(void *)(a1 + 328);
  *(void *)(a1 + 328) = 0;
  int v21 = (unint64_t *)a1;
  if (*(void *)(a1 + 104) == *(void *)(a1 + 112))
  {
    uint64_t v27 = sub_BBB4(v9);
    int v28 = *(_DWORD *)(v27 + 8);
    *(void *)(a1 + 32) = *(void *)v27;
    *(_DWORD *)(a1 + 40) = v28;
    if (a5) {
      goto LABEL_12;
    }
  }
  else if (a5)
  {
LABEL_12:
    sub_453180(a1 + 32, v9);
    uint64_t v12 = *(void *)a1;
    unint64_t v22 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)&long long __p = *(void *)a1;
    if (v22)
    {
      int v23 = std::__shared_weak_count::lock(v22);
      *((void *)&__p + 1) = v23;
      if (v23)
      {
        uint64_t v14 = v23;
        a4 = v98;
        uint64_t v24 = v98[2];
        uint64_t v16 = v98[1];
        if (v24 == v16) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = 32 * (v24 - v16) - 1;
        }
        uint64_t v18 = v98[5];
        unint64_t v19 = v18 + v98[4];
        if (v25 != v19) {
          goto LABEL_20;
        }
        sub_453D98((uint64_t)v98);
        goto LABEL_19;
      }
    }
LABEL_114:
    sub_2F0F80();
  }
  uint64_t v99 = (unint64_t *)a1;
  uint64_t v101 = v9;
  if (*(void *)(a1 + 104) == *(void *)(a1 + 112))
  {
    uint64_t v49 = *(void *)(a1 + 248);
    if (*(void *)(a1 + 256) != v49) {
      *(void *)(a1 + 256) = v49;
    }
    unsigned __int16 v116 = sub_110545C(v9);
    sub_BBB4(v9);
    (**(void (***)(void))a2)();
    double v113 = 0.0;
    uint64_t v114 = 0;
    unint64_t v115 = 0;
    uint64_t v50 = *(void *)(a1 + 248);
    if (*(void *)(a1 + 256) == v50)
    {
      int v78 = 0;
LABEL_91:
      if (v114 != v78)
      {
        uint64_t v97 = *(void *)(*(void *)(a1 + 248) + 8 * *(void *)v78);
        sub_11065D0((uint64_t)&__p);
        sub_BB6C(&v110, 0);
        sub_BB6C(&v111, 9);
        uint64_t v112 = -1;
        (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a2 + 8))(a2, v97, &__p);
        operator new();
      }
      if (v78)
      {
        uint64_t v114 = v78;
        operator delete(v78);
      }
      return;
    }
    unint64_t v51 = 0;
    while (1)
    {
      uint64_t v52 = *(void *)(v50 + 8 * v51);
      sub_11065D0((uint64_t)&__p);
      sub_BB6C(&v110, 0);
      sub_BB6C(&v111, 9);
      uint64_t v112 = -1;
      (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a2 + 8))(a2, v52, &__p);
      sub_11060FC((uint64_t)&__p, (uint64_t)v107);
      int v53 = (unsigned int *)sub_BBB4(v9);
      sub_1106208((uint64_t **)v107, v53, &v116);
      LOWORD(v52) = sub_1105D44(v107);
      __int16 v54 = sub_110545C(v101);
      int v55 = sub_1105464(v101);
      unsigned int v56 = sub_110546C(v101);
      double v104 = sub_454738(a1, v54, v55, v56, v52, v110, v111);
      uint64_t v9 = v101;
      uint64_t v102 = sub_1105D34((uint64_t)v107);
      LODWORD(v103) = v57;
      unint64_t v58 = (unsigned int *)sub_BBB4(v101);
      unsigned int v59 = sub_1105880((unsigned int *)&v102, v58);
      sub_1108B30(&v106, 0.1);
      if (!sub_1108B60(&v104, v106)) {
        goto LABEL_77;
      }
      sub_1108B30(&v105, (double)v59 * 0.05);
      double v60 = sub_1108B7C(&v104, v105);
      double v61 = v60;
      long long v62 = v114;
      if ((unint64_t)v114 >= v115)
      {
        double v64 = v113;
        int64_t v65 = ((uint64_t)v114 - *(void *)&v113) >> 4;
        unint64_t v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 60) {
          sub_2E00();
        }
        uint64_t v67 = v115 - *(void *)&v113;
        if ((uint64_t)(v115 - *(void *)&v113) >> 3 > v66) {
          unint64_t v66 = v67 >> 3;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v68 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v66;
        }
        if (v68)
        {
          if (v68 >> 60) {
            sub_188D718();
          }
          long long v69 = (char *)operator new(16 * v68);
          long long v70 = (double *)&v69[16 * v65];
          *(void *)long long v70 = v51;
          v70[1] = v61;
          uint64_t v71 = v70;
          if (v62 != *(double **)&v64)
          {
            do
            {
LABEL_71:
              *((_OWORD *)v71 - 1) = *((_OWORD *)v62 - 1);
              v71 -= 2;
              v62 -= 2;
            }
            while (v62 != *(double **)&v64);
            long long v62 = *(double **)&v113;
            long long v63 = v70 + 2;
            double v113 = *(double *)&v71;
            unint64_t v115 = (unint64_t)&v69[16 * v68];
            if (!v62) {
              goto LABEL_76;
            }
LABEL_75:
            operator delete(v62);
            goto LABEL_76;
          }
        }
        else
        {
          long long v69 = 0;
          long long v70 = (double *)(16 * v65);
          *(void *)long long v70 = v51;
          v70[1] = v60;
          uint64_t v71 = (double *)(16 * v65);
          if (v62 != *(double **)&v64) {
            goto LABEL_71;
          }
        }
        long long v63 = v70 + 2;
        double v113 = *(double *)&v71;
        unint64_t v115 = (unint64_t)&v69[16 * v68];
        if (v62) {
          goto LABEL_75;
        }
      }
      else
      {
        *(void *)uint64_t v114 = v51;
        v62[1] = v60;
        long long v63 = v62 + 2;
      }
LABEL_76:
      uint64_t v9 = v101;
      uint64_t v114 = v63;
LABEL_77:
      long long v72 = (std::__shared_weak_count *)*((void *)&__p + 1);
      if (*((void *)&__p + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__p + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
      ++v51;
      uint64_t v50 = *(void *)(a1 + 248);
      if (v51 >= (*(void *)(a1 + 256) - v50) >> 3)
      {
        int v78 = *(double **)&v113;
        if ((unint64_t)v114 - *(void *)&v113 > 0x10)
        {
          unint64_t v81 = 126 - 2 * __clz(((uint64_t)v114 - *(void *)&v113) >> 4);
          if (v114 == *(double **)&v113) {
            uint64_t v82 = 0;
          }
          else {
            uint64_t v82 = v81;
          }
          sub_454898(*(double **)&v113, v114, (uint64_t)&__p, v82, 1);
        }
        goto LABEL_91;
      }
    }
  }
  if (a6 != 1)
  {
    sub_11060FC(a1 + 144, (uint64_t)&__p);
    LOWORD(v102) = sub_110545C(v9);
    uint64_t v73 = (unsigned int *)sub_BBB4(v9);
    sub_1106208((uint64_t **)&__p, v73, (unsigned __int16 *)&v102);
    unsigned __int16 v74 = sub_1105D44(&__p);
    __int16 v75 = sub_110545C(v9);
    int v76 = sub_1105464(v9);
    unsigned int v77 = sub_110546C(v9);
    double v113 = sub_454738(a1, v75, v76, v77, v74, *(_DWORD *)(a1 + 168), *(_DWORD *)(a1 + 172));
    sub_1108B30(&v117, 0.1);
    if (sub_1108B60(&v113, v117))
    {
      sub_453140((uint64_t *)a1, v107);
      sub_4530B0(v98, v107);
      sub_14A84((uint64_t)v107);
    }
    return;
  }
  unint64_t v96 = v20;
  long long __p = 0uLL;
  long long v109 = 0;
  if (*(void *)(a1 + 208) == *(void *)(a1 + 200))
  {
    long long v79 = 0;
    uint64_t v29 = 0;
    uint64_t v80 = 0;
    goto LABEL_97;
  }
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  do
  {
    uint64_t v32 = *(void *)(a1 + 224);
    __int16 v33 = sub_110545C(v101);
    int v34 = sub_1105464(v101);
    unsigned int v35 = sub_110546C(v101);
    unsigned __int16 v36 = sub_1106898(v32 + 40 * v30);
    v107[0].n128_u64[0] = sub_454738(a1, v33, v34, v35, v36, *(_DWORD *)(v32 + 40 * v30 + 24), *(_DWORD *)(v32 + 40 * v30 + 28));
    uint64_t v37 = *(void *)(a1 + 200);
    unint64_t v38 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(a1 + 136));
    if (*(_DWORD *)(v37 + 8 * v30) == v38)
    {
      uint64_t v39 = v37 + 8 * v30;
      if (*(unsigned __int16 *)(v39 + 4) == WORD2(v38) && (HIWORD(v38) & 1) != (*(unsigned char *)(v39 + 6) == 0))
      {
        sub_1108B30(v119, 0.9);
        v107[0].n128_u64[0] = sub_1108B70(v107[0].n128_f64, v119[0]);
      }
    }
    sub_1108B30(&v118, 0.1);
    if (sub_1108B60(v107[0].n128_f64, v118))
    {
      unint64_t v40 = v107[0].n128_u64[0];
      if (v29 < v109)
      {
        *uint64_t v29 = v30;
        v29[1] = v40;
        uint64_t v31 = v29 + 2;
        goto LABEL_28;
      }
      long double v41 = (unint64_t *)__p;
      uint64_t v42 = (uint64_t)((uint64_t)v29 - __p) >> 4;
      unint64_t v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 60) {
        sub_2E00();
      }
      uint64_t v44 = (uint64_t)v109 - __p;
      if ((uint64_t)((uint64_t)v109 - __p) >> 3 > v43) {
        unint64_t v43 = v44 >> 3;
      }
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v45 = v43;
      }
      if (v45)
      {
        if (v45 >> 60) {
          sub_188D718();
        }
        long double v46 = (char *)operator new(16 * v45);
        double v47 = (unint64_t *)&v46[16 * v42];
        unint64_t *v47 = v30;
        v47[1] = v40;
        uint64_t v48 = (uint64_t)v47;
        if (v29 == v41)
        {
LABEL_50:
          uint64_t v31 = v47 + 2;
          *(void *)&long long __p = v48;
          *((void *)&__p + 1) = v47 + 2;
          long long v109 = (unint64_t *)&v46[16 * v45];
          if (v29) {
LABEL_51:
          }
            operator delete(v29);
LABEL_28:
          *((void *)&__p + 1) = v31;
          uint64_t v29 = v31;
          goto LABEL_29;
        }
      }
      else
      {
        long double v46 = 0;
        double v47 = (unint64_t *)(16 * v42);
        unint64_t *v47 = v30;
        v47[1] = v40;
        uint64_t v48 = 16 * v42;
        if (v29 == v41) {
          goto LABEL_50;
        }
      }
      do
      {
        *(_OWORD *)(v48 - 16) = *((_OWORD *)v29 - 1);
        v48 -= 16;
        v29 -= 2;
      }
      while (v29 != v41);
      uint64_t v29 = (unint64_t *)__p;
      uint64_t v31 = v47 + 2;
      *(void *)&long long __p = v48;
      *((void *)&__p + 1) = v47 + 2;
      long long v109 = (unint64_t *)&v46[16 * v45];
      if (!v29) {
        goto LABEL_28;
      }
      goto LABEL_51;
    }
LABEL_29:
    ++v30;
  }
  while (v30 < (uint64_t)(*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 3);
  long long v79 = (unint64_t *)__p;
  uint64_t v80 = (uint64_t)v29 - __p;
  if ((unint64_t)((unint64_t)v29 - __p) > 0x10) {
    sub_453850((double *)__p, (double *)v29);
  }
LABEL_97:
  if (v29 == v79) {
    goto LABEL_110;
  }
  uint64_t v83 = 0;
  unint64_t v84 = 0;
  unint64_t v85 = v80 >> 4;
  do
  {
    if (v84 != v85 - 1) {
      operator new();
    }
    sub_45573C((uint64_t)v21, *(void *)(v21[25] + 8 * v79[v83]), (uint64_t *)(v21[28] + 40 * v79[v83]), (uint64_t *)(v21[28] + 40 * v79[v83]), a2, *(double *)&v79[v83 + 1]);
    unint64_t v88 = *v21;
    long long v87 = (std::__shared_weak_count *)v21[1];
    v107[0].n128_u64[0] = *v21;
    if (!v87 || (int v89 = std::__shared_weak_count::lock(v87), (v107[0].n128_u64[1] = (unint64_t)v89) == 0)) {
      sub_2F0F80();
    }
    BOOL v90 = v89;
    uint64_t v91 = v98[2];
    uint64_t v92 = v98[1];
    if (v91 == v92) {
      uint64_t v93 = 0;
    }
    else {
      uint64_t v93 = 32 * (v91 - v92) - 1;
    }
    uint64_t v94 = v98[5];
    unint64_t v95 = v94 + v98[4];
    if (v93 == v95)
    {
      sub_453D98((uint64_t)v98);
      uint64_t v92 = v98[1];
      uint64_t v94 = v98[5];
      unint64_t v95 = v94 + v98[4];
    }
    long long v86 = (unint64_t *)(*(void *)(v92 + ((v95 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v95);
    *long long v86 = v88;
    v86[1] = (unint64_t)v90;
    v98[5] = v94 + 1;
    int v21 = v99;
    ++v84;
    unint64_t v85 = ((char *)v29 - (char *)v79) >> 4;
    v83 += 2;
  }
  while (v84 < v85);
  if (v79 == v29)
  {
LABEL_110:
    --v21[40];
    v21[41] = v96;
    sub_453894((uint64_t)v21, a2, v98);
  }
  if (v79)
  {
    *((void *)&__p + 1) = v79;
    operator delete(v79);
  }
}

void sub_452760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_452774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v39 = *(void **)(v37 - 176);
  if (!v39) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v37 - 168) = v39;
  operator delete(v39);
  _Unwind_Resume(exception_object);
}

uint64_t sub_4529DC(uint64_t a1, int a2, double a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = a2;
  *(double *)(a1 + 24) = a3;
  sub_1105674((_DWORD *)(a1 + 32));
  sub_1105674((_DWORD *)(a1 + 44));
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(double *)(a1 + 128) = sub_1108B38();
  *(_DWORD *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 142) = 1;
  sub_11065D0(a1 + 144);
  sub_BB6C((_DWORD *)(a1 + 168), 0);
  sub_BB6C((_DWORD *)(a1 + 172), 9);
  *(void *)(a1 + 176) = -1;
  unint64_t v4 = sub_1105674((_DWORD *)(a1 + 184));
  *(void *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *(_DWORD *)(a1 + 304) = 1065353216;
  *(_DWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 320) = xmmword_20E7D40;
  return a1;
}

void sub_452AC8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  sub_14A84(v4);
  sub_44B860(v2);
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  _Unwind_Resume(a1);
}

void sub_452B28(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_452C6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_452C80((void **)va);
  _Unwind_Resume(a1);
}

void **sub_452C80(void **a1)
{
  unint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_452DC0(v2);
    operator delete();
  }
  return a1;
}

void sub_452CCC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *sub_452D04(uint64_t a1)
{
  __n128 result = *(void **)(a1 + 24);
  if (result)
  {
    sub_452DC0(result);
    operator delete();
  }
  return result;
}

uint64_t sub_452D4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN5zilch14PathHypothesisIN3msl4data21DirectedRoadSegmentIdEEEE27__shared_ptr_def"
                     "ault_deleteIS6_S6_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN5zilch14PathHypothesisIN3msl4data21DirectedRoadSegmentIdEEEE27__sha"
                                "red_ptr_default_deleteIS6_S6_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN5zilch14PathHypothesisIN3msl4data21DirectedRoadSegmentIdEEEE27__shared_ptr_default_deleteIS6_S6_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN5zilch14PathHypothesisIN3msl4data21DirectedRoadSegmentIdEEEE27__shared_ptr_default_deleteIS6_S6_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void *sub_452DC0(void *a1)
{
  unint64_t v2 = (void *)a1[36];
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)a1[34];
  a1[34] = 0;
  if (v4) {
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[31];
  if (v5)
  {
    a1[32] = v5;
    operator delete(v5);
  }
  uint64_t v6 = a1[28];
  if (v6)
  {
    uint64_t v7 = a1[29];
    unint64_t v8 = (void *)a1[28];
    if (v7 != v6)
    {
      do
      {
        uint64_t v9 = *(std::__shared_weak_count **)(v7 - 32);
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        v7 -= 40;
      }
      while (v7 != v6);
      unint64_t v8 = (void *)a1[28];
    }
    a1[29] = v6;
    operator delete(v8);
  }
  long long v10 = (void *)a1[25];
  if (v10)
  {
    a1[26] = v10;
    operator delete(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)a1[19];
  if (!v11 || atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v12 = (void *)a1[13];
    if (!v12) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  uint64_t v12 = (void *)a1[13];
  if (v12)
  {
LABEL_21:
    a1[14] = v12;
    operator delete(v12);
  }
LABEL_22:
  double v13 = (void (***)(void))a1[10];
  if (v13)
  {
    uint64_t v14 = (void (***)(void))a1[11];
    uint64_t v15 = (void *)a1[10];
    if (v14 != v13)
    {
      uint64_t v16 = v14 - 6;
      uint64_t v17 = v14 - 6;
      uint64_t v18 = v14 - 6;
      do
      {
        unint64_t v19 = *v18;
        v18 -= 6;
        (*v19)(v17);
        v16 -= 6;
        BOOL v20 = v17 == v13;
        uint64_t v17 = v18;
      }
      while (!v20);
      uint64_t v15 = (void *)a1[10];
    }
    a1[11] = v13;
    operator delete(v15);
  }
  int v21 = (void (***)(void))a1[7];
  if (v21)
  {
    unint64_t v22 = (void (***)(void))a1[8];
    int v23 = (void *)a1[7];
    if (v22 != v21)
    {
      uint64_t v24 = v22 - 8;
      uint64_t v25 = v22 - 8;
      double v26 = v22 - 8;
      do
      {
        uint64_t v27 = *v26;
        v26 -= 8;
        (*v27)(v25);
        v24 -= 8;
        BOOL v20 = v25 == v21;
        uint64_t v25 = v26;
      }
      while (!v20);
      int v23 = (void *)a1[7];
    }
    a1[8] = v21;
    operator delete(v23);
  }
  int v28 = (std::__shared_weak_count *)a1[1];
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  return a1;
}

void **sub_452FFC(void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 4);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

__n128 sub_4530B0(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_453D98((uint64_t)a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

std::__shared_weak_count *sub_453140@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  *a2 = v4;
  if (!v3)
  {
    a2[1] = 0;
LABEL_5:
    sub_2F0F80();
  }
  __n128 result = std::__shared_weak_count::lock(v3);
  a2[1] = result;
  if (!result) {
    goto LABEL_5;
  }
  return result;
}

uint64_t sub_453180(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_BBB4(a2);
  int v5 = *(_DWORD *)(result + 8);
  *(void *)(a1 + 12) = *(void *)result;
  *(_DWORD *)(a1 + 20) = v5;
  uint64_t v6 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 72) != v6 && !*(_DWORD *)(v6 - 16))
  {
    sub_11060FC(*(void *)(a1 + 24) + ((((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 6) - 1) << 6) + 32, (uint64_t)v9);
    unsigned __int16 v8 = sub_110545C(a2);
    unint64_t v7 = (unsigned int *)sub_BBB4(a2);
    uint64_t result = sub_1106208(v9, v7, &v8);
    if (result)
    {
      uint64_t result = sub_1105D00((uint64_t)v9);
      if ((result & 1) == 0) {
        operator new();
      }
    }
  }
  return result;
}

void sub_453794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_4537B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_4537C4()
{
  uint64_t v1 = *(void **)v0;
  if (*(void *)v0)
  {
    *(void *)(v0 + 8) = v1;
    operator delete(v1);
  }
  operator delete();
}

void sub_4537F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_45380C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_453828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_45383C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_453850(double *a1, double *a2)
{
  unint64_t v2 = 126 - 2 * __clz(((char *)a2 - (char *)a1) >> 4);
  if (a2 == a1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  sub_454898(a1, a2, (uint64_t)&v4, v3, 1);
}

void sub_453894(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(void *)(a1 + 104) == *(void *)(a1 + 112)) {
    return;
  }
  if (*(int *)(a1 + 312) > 1) {
    return;
  }
  unint64_t v4 = *(void *)(a1 + 328) + *(unsigned int *)(a1 + 180);
  *(void *)(a1 + 328) = v4;
  if (v4 > 0x5DC0) {
    return;
  }
  unint64_t v40 = 0;
  long double v41 = 0;
  uint64_t v42 = 0;
  uint64_t v5 = *(void *)(a1 + 200);
  if (*(void *)(a1 + 208) == v5) {
    return;
  }
  unint64_t v7 = 0;
  unsigned __int16 v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  do
  {
    if (sub_456AAC(a1, *(void *)(v5 + 8 * v10), *(void *)(a1 + 224) + 40 * v10, a2, v10))
    {
      __int16 v11 = sub_35E640();
      int v12 = *(_DWORD *)(a1 + 168);
      unsigned int v13 = *(_DWORD *)(a1 + 172);
      unsigned __int16 v14 = sub_35E640();
      double v15 = sub_454738(a1, v11, v12, v13, v14, *(_DWORD *)(*(void *)(a1 + 224) + 40 * v10 + 24), *(_DWORD *)(*(void *)(a1 + 224) + 40 * v10 + 28));
      double v16 = v15;
      if (v9 < v8)
      {
        *(void *)uint64_t v9 = v10;
        v9[1] = v15;
        v9 += 2;
LABEL_7:
        long double v41 = v9;
        goto LABEL_8;
      }
      uint64_t v17 = ((char *)v9 - (char *)v7) >> 4;
      unint64_t v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 60) {
        sub_2E00();
      }
      if (v8 - v7 > v18) {
        unint64_t v18 = v8 - v7;
      }
      if ((unint64_t)((char *)v8 - (char *)v7) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19)
      {
        if (v19 >> 60) {
          sub_188D718();
        }
        BOOL v20 = (char *)operator new(16 * v19);
        int v21 = (double *)&v20[16 * v17];
        *(void *)int v21 = v10;
        v21[1] = v16;
        if (v9 != v7)
        {
LABEL_20:
          unint64_t v22 = v21;
          do
          {
            int v23 = v22 - 2;
            *((_OWORD *)v22 - 1) = *((_OWORD *)v9 - 1);
            v9 -= 2;
            v22 -= 2;
          }
          while (v9 != v7);
          unsigned __int16 v8 = (double *)&v20[16 * v19];
          uint64_t v9 = v21 + 2;
          unint64_t v40 = v23;
          uint64_t v42 = v8;
          if (!v7) {
            goto LABEL_24;
          }
LABEL_23:
          operator delete(v7);
LABEL_24:
          unint64_t v7 = v23;
          goto LABEL_7;
        }
      }
      else
      {
        BOOL v20 = 0;
        int v21 = (double *)(16 * v17);
        *(void *)int v21 = v10;
        v21[1] = v15;
        if (v9 != v7) {
          goto LABEL_20;
        }
      }
      int v23 = v21;
      unsigned __int16 v8 = (double *)&v20[16 * v19];
      uint64_t v9 = v21 + 2;
      unint64_t v40 = v21;
      uint64_t v42 = v8;
      if (!v7) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
LABEL_8:
    ++v10;
    uint64_t v5 = *(void *)(a1 + 200);
  }
  while (v10 < (*(void *)(a1 + 208) - v5) >> 3);
  if (v7 != v9)
  {
    sub_454898(v7, v9, (uint64_t)v39, 126 - 2 * __clz(((char *)v9 - (char *)v7) >> 4), 1);
    uint64_t v9 = v40;
    uint64_t v24 = v41;
    if (v41 == v40)
    {
      uint64_t v9 = v41;
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      unint64_t v27 = ((char *)v41 - (char *)v40) >> 4;
      do
      {
        if (v26 != v27 - 1) {
          operator new();
        }
        sub_45573C(a1, *(void *)(*(void *)(a1 + 200) + 8 * *(void *)&v9[v25]), (uint64_t *)(*(void *)(a1 + 224) + 40 * *(void *)&v9[v25]), (uint64_t *)(*(void *)(a1 + 224) + 40 * *(void *)&v9[v25]), a2, v9[v25 + 1]);
        uint64_t v30 = *(void *)a1;
        uint64_t v29 = *(std::__shared_weak_count **)(a1 + 8);
        v39[0] = *(void *)a1;
        if (!v29 || (uint64_t v31 = std::__shared_weak_count::lock(v29), (v39[1] = v31) == 0)) {
          sub_2F0F80();
        }
        uint64_t v32 = v31;
        uint64_t v33 = a3[2];
        uint64_t v34 = a3[1];
        if (v33 == v34) {
          uint64_t v35 = 0;
        }
        else {
          uint64_t v35 = 32 * (v33 - v34) - 1;
        }
        uint64_t v36 = a3[5];
        unint64_t v37 = v36 + a3[4];
        if (v35 == v37)
        {
          sub_453D98((uint64_t)a3);
          uint64_t v34 = a3[1];
          uint64_t v36 = a3[5];
          unint64_t v37 = v36 + a3[4];
        }
        int v28 = (void *)(*(void *)(v34 + ((v37 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v37);
        *int v28 = v30;
        v28[1] = v32;
        a3[5] = v36 + 1;
        ++v26;
        unint64_t v27 = ((char *)v24 - (char *)v9) >> 4;
        v25 += 2;
      }
      while (v26 < v27);
    }
  }
  if (v9)
  {
    long double v41 = v9;
    operator delete(v9);
  }
}

void sub_453D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_453D98(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        uint64_t v34 = (char *)operator new(8 * v31);
        uint64_t v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            unsigned __int16 v74 = &v34[8 * v32];
            unint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v40 = &v35[v76];
              v7 += v76;
              unsigned int v77 = (long long *)(v6 + 3);
              int v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *int v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_188D718();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    double v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v91 = operator new(0x1000uLL);
      sub_22368((char **)a1, &v91);
      return;
    }
    uint64_t v91 = operator new(0x1000uLL);
    sub_224F8((void **)a1, &v91);
    long double v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        uint64_t v34 = (char *)operator new(8 * v42);
        uint64_t v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            uint64_t v82 = &v34[8 * v43];
            double v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              double v47 = &v35[v84];
              v7 += v84;
              unint64_t v85 = (long long *)(v41 + 3);
              long long v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *long long v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            double v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)double v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  unint64_t v26 = operator new(0x1000uLL);
  unint64_t v27 = &v25[8 * v21];
  int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    BOOL v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_188D718();
      }
      uint64_t v49 = (char *)operator new(8 * v48);
      unint64_t v27 = &v49[8 * (v48 >> 2)];
      int v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v49;
      *(void *)unint64_t v27 = v90;
      uint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)unint64_t v27 = v26;
      uint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_188D718();
          }
          double v60 = (char *)operator new(8 * v59);
          uint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          int v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v53;
          if (!v37)
          {
            uint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            double v64 = &v60[8 * v61];
            int64_t v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            double v64 = &v60[8 * v61];
            int64_t v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            double v64 = &v53[v68];
            int64_t v65 = &v27[v68];
            long long v69 = (long long *)(v27 + 16);
            long long v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)long long v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)double v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          int v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          int v57 = &v29[8 * (v56 >> 1)];
          int v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          uint64_t v25 = v27;
        }
      }
      else
      {
        int v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      unint64_t v51 = v53 - 8;
      unint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)unint64_t v27 = v26;
  uint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  unint64_t v51 = v27;
LABEL_46:
  uint64_t v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_454308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_454324(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_454338(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_454350(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_454368(void *result)
{
  uint64_t v1 = result;
  *uint64_t result = off_2439890;
  unint64_t v2 = (std::__shared_weak_count *)result[5];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_454400(void *a1)
{
  *a1 = off_2439890;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

uint64_t sub_4544A8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_E1B4((uint64_t)v15);
  sub_2DD928(v16, *(void *)(a1 + 24));
  uint64_t v4 = sub_52060(a1);
  std::stringbuf::str();
  if (v14 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  snprintf(__str, 0x400uLL, "%lu: RPE(%s)", v4, p_p);
  if (v14 < 0) {
    operator delete(__p);
  }
  size_t v6 = strlen(__str);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v10 = operator new(v8 + 1);
    a2[1] = v7;
    a2[2] = v9 | 0x8000000000000000;
    *a2 = v10;
    a2 = v10;
    goto LABEL_13;
  }
  *((unsigned char *)a2 + 23) = v6;
  if (v6) {
LABEL_13:
  }
    memcpy(a2, __str, v7);
  *((unsigned char *)a2 + v7) = 0;
  *(void *)((char *)v15
  v16[0] = v11;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_45470C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_454724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_454738(uint64_t a1, __int16 a2, int a3, unsigned int a4, unsigned __int16 a5, int a6, unsigned int a7)
{
  __int16 v25 = a2;
  unsigned int v23 = a4;
  int v24 = a3;
  unsigned int v21 = a7;
  int v22 = a6;
  double v26 = sub_1108B38();
  double v9 = sub_1105208(&v25, a5, v26);
  sub_1108B30(&v20, fmax(v9 / *(double *)(a1 + 24) * (v9 / *(double *)(a1 + 24)) * -0.9 + 1.0, 0.0));
  sub_1108B40(&v26, v20);
  sub_BB6C(&v19, 0);
  if (sub_11055B4(&v24, v19))
  {
    sub_BB6C(&v18, 0);
    if (sub_11055B4(&v22, v18) && sub_11055B4(&v24, v22))
    {
      sub_1108B30(&v17, 0.5);
      sub_1108B40(&v26, v17);
    }
  }
  sub_BB6C(&v16, 9);
  if (sub_11055B4(&v23, v16))
  {
    sub_BB6C(&v15, 9);
    if (sub_11055B4(&v21, v15))
    {
      int v10 = sub_4F44(&v23);
      int v11 = v10 - sub_4F44(&v21);
      if (v11 < 0) {
        int v11 = -v11;
      }
      double v12 = exp2(-(double)v11);
      sub_1108B30(&v14, v12);
      sub_1108B40(&v26, v14);
    }
  }
  return v26;
}

void sub_454898(double *a1, double *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t sub_454D88(double *a1, double *a2, double *a3)
{
  char v6 = a2 + 1;
  BOOL v7 = sub_1108B50(a2 + 1, a1[1]);
  uint64_t result = sub_1108B50(a3 + 1, a2[1]);
  if (v7)
  {
    if (result)
    {
      long long v9 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v9;
      return 1;
    }
    long long v12 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v12;
    if (sub_1108B50(a3 + 1, a2[1]))
    {
      long long v13 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v13;
      return 2;
    }
    return 1;
  }
  if (result)
  {
    long long v10 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v10;
    if (sub_1108B50(v6, a1[1]))
    {
      long long v11 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v11;
      return 2;
    }
    return 1;
  }
  return result;
}

unint64_t sub_454EAC(double *a1, double *a2)
{
  unint64_t v2 = a2;
  long long v15 = *(_OWORD *)a1;
  if (sub_1108B50((double *)&v15 + 1, *(a2 - 1)))
  {
    uint64_t v4 = a1;
    do
    {
      unint64_t v5 = (unint64_t)(v4 + 2);
      BOOL v6 = sub_1108B50((double *)&v15 + 1, v4[3]);
      uint64_t v4 = (double *)v5;
    }
    while (!v6);
  }
  else
  {
    BOOL v7 = a1 + 2;
    do
    {
      unint64_t v5 = (unint64_t)v7;
      if (v7 >= v2) {
        break;
      }
      BOOL v8 = sub_1108B50((double *)&v15 + 1, v7[1]);
      BOOL v7 = (double *)(v5 + 16);
    }
    while (!v8);
  }
  if (v5 >= (unint64_t)v2)
  {
    long long v9 = v2;
  }
  else
  {
    do
    {
      long long v9 = v2 - 2;
      BOOL v10 = sub_1108B50((double *)&v15 + 1, *(v2 - 1));
      v2 -= 2;
    }
    while (v10);
  }
  while (v5 < (unint64_t)v9)
  {
    long long v16 = *(_OWORD *)v5;
    *(_OWORD *)unint64_t v5 = *(_OWORD *)v9;
    *(_OWORD *)long long v9 = v16;
    do
    {
      double v11 = *(double *)(v5 + 24);
      v5 += 16;
    }
    while (!sub_1108B50((double *)&v15 + 1, v11));
    do
    {
      double v12 = *(v9 - 1);
      v9 -= 2;
    }
    while (sub_1108B50((double *)&v15 + 1, v12));
  }
  long long v13 = (_OWORD *)(v5 - 16);
  if ((double *)(v5 - 16) != a1) {
    *(_OWORD *)a1 = *v13;
  }
  *long long v13 = v15;
  return v5;
}

double *sub_454FE0(double *a1, double *a2)
{
  uint64_t v4 = 0;
  double v5 = *a1;
  double v6 = a1[1];
  do
  {
    BOOL v7 = sub_1108B50(&a1[v4 + 3], v6);
    v4 += 2;
  }
  while (v7);
  BOOL v8 = &a1[v4];
  if (v4 == 2)
  {
    while (v8 < a2)
    {
      long long v9 = a2 - 2;
      BOOL v11 = sub_1108B50(a2 - 1, v6);
      a2 -= 2;
      if (v11) {
        goto LABEL_9;
      }
    }
    long long v9 = a2;
  }
  else
  {
    do
    {
      long long v9 = a2 - 2;
      BOOL v10 = sub_1108B50(a2 - 1, v6);
      a2 -= 2;
    }
    while (!v10);
  }
LABEL_9:
  double v12 = v8;
  if (v8 < v9)
  {
    long long v13 = v9;
    do
    {
      long long v14 = *(_OWORD *)v12;
      *(_OWORD *)double v12 = *(_OWORD *)v13;
      *(_OWORD *)long long v13 = v14;
      do
      {
        long long v15 = v12 + 3;
        v12 += 2;
      }
      while (sub_1108B50(v15, v6));
      do
      {
        long long v16 = v13 - 1;
        v13 -= 2;
      }
      while (!sub_1108B50(v16, v6));
    }
    while (v12 < v13);
  }
  uint64_t result = v12 - 2;
  if (v12 - 2 != a1) {
    *(_OWORD *)a1 = *(_OWORD *)result;
  }
  *(v12 - 2) = v5;
  *(v12 - 1) = v6;
  return result;
}

BOOL sub_45510C(double *a1, double *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_1108B50(a2 - 1, a1[1]))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v6;
      }
      return 1;
    case 3:
      sub_454D88(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      long long v13 = (long long *)(a1 + 2);
      long long v14 = (long long *)(a1 + 4);
      sub_454D88(a1, a1 + 2, a1 + 4);
      if (sub_1108B50(a2 - 1, a1[5]))
      {
        long long v15 = *v14;
        long long *v14 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v15;
        if (sub_1108B50(a1 + 5, a1[3]))
        {
          long long v16 = *v13;
          *long long v13 = *v14;
          long long *v14 = v16;
          if (sub_1108B50(a1 + 3, a1[1]))
          {
            long long v17 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v13;
            *long long v13 = v17;
          }
        }
      }
      return 1;
    case 5:
      sub_45535C(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      BOOL v7 = a1 + 4;
      sub_454D88(a1, a1 + 2, a1 + 4);
      BOOL v8 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (!sub_1108B50(v8 + 1, v7[1]))
  {
LABEL_13:
    BOOL v7 = v8;
    v9 += 16;
    v8 += 2;
    if (v8 == a2) {
      return 1;
    }
  }
  long long v18 = *(_OWORD *)v8;
  uint64_t v11 = v9;
  do
  {
    double v12 = (double *)((char *)a1 + v11);
    *(_OWORD *)((char *)a1 + v11 + 48) = *(_OWORD *)((char *)a1 + v11 + 32);
    if (v11 == -32)
    {
      *(_OWORD *)a1 = v18;
      if (++v10 != 8) {
        goto LABEL_13;
      }
      return v8 + 2 == a2;
    }
    v11 -= 16;
  }
  while (sub_1108B50((double *)&v18 + 1, v12[3]));
  *(_OWORD *)((char *)a1 + v11 + 48) = v18;
  if (++v10 != 8) {
    goto LABEL_13;
  }
  return v8 + 2 == a2;
}

__n128 sub_45535C(double *a1, double *a2, double *a3, double *a4, double *a5)
{
  sub_454D88(a1, a2, a3);
  if (sub_1108B50(a4 + 1, a3[1]))
  {
    long long v10 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v10;
    if (sub_1108B50(a3 + 1, a2[1]))
    {
      long long v11 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v11;
      if (sub_1108B50(a2 + 1, a1[1]))
      {
        __n128 v12 = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = v12;
      }
    }
  }
  if (sub_1108B50(a5 + 1, a4[1]))
  {
    long long v14 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v14;
    if (sub_1108B50(a4 + 1, a3[1]))
    {
      long long v15 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v15;
      if (sub_1108B50(a3 + 1, a2[1]))
      {
        long long v16 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v16;
        if (sub_1108B50(a2 + 1, a1[1]))
        {
          __n128 result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

BOOL sub_4554A4(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    BOOL v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - result) >> 4)
    {
      uint64_t v9 = (a4 - result) >> 3;
      uint64_t v10 = v9 + 1;
      uint64_t v11 = result + 16 * (v9 + 1);
      uint64_t v12 = v9 + 2;
      if (v9 + 2 < a3)
      {
        BOOL v13 = sub_1108B50((double *)(v11 + 8), *(double *)(v11 + 24));
        v11 += 16 * v13;
        if (v13) {
          uint64_t v10 = v12;
        }
      }
      __n128 result = sub_1108B50((double *)(v11 + 8), *(double *)(v5 + 8));
      if (!result)
      {
        uint64_t v14 = *(void *)v5;
        double v15 = *(double *)(v5 + 8);
        do
        {
          long long v16 = (_OWORD *)v5;
          uint64_t v5 = v11;
          *long long v16 = *(_OWORD *)v11;
          if (v7 < v10) {
            break;
          }
          uint64_t v17 = (2 * v10) | 1;
          uint64_t v11 = v6 + 16 * v17;
          uint64_t v18 = 2 * v10 + 2;
          if (v18 < a3)
          {
            BOOL v19 = sub_1108B50((double *)(v11 + 8), *(double *)(v11 + 24));
            v11 += 16 * v19;
            if (v19) {
              uint64_t v17 = v18;
            }
          }
          __n128 result = sub_1108B50((double *)(v11 + 8), v15);
          uint64_t v10 = v17;
        }
        while (!result);
        *(void *)uint64_t v5 = v14;
        *(double *)(v5 + 8) = v15;
      }
    }
  }
  return result;
}

BOOL sub_4555C0(BOOL result, _OWORD *a2)
{
  if ((uint64_t)a2 - result >= 17)
  {
    unint64_t v2 = a2;
    BOOL v3 = (double *)result;
    uint64_t v4 = ((unint64_t)a2 - result) >> 4;
    do
    {
      uint64_t v6 = 0;
      long long v16 = *(_OWORD *)v3;
      int64_t v7 = v3;
      do
      {
        BOOL v8 = &v7[2 * v6 + 2];
        uint64_t v9 = (2 * v6) | 1;
        uint64_t v10 = 2 * v6 + 2;
        if (v10 < v4)
        {
          __n128 result = sub_1108B50(v8 + 1, v8[3]);
          v8 += 2 * result;
          if (result) {
            uint64_t v9 = v10;
          }
        }
        *(_OWORD *)int64_t v7 = *(_OWORD *)v8;
        int64_t v7 = v8;
        uint64_t v6 = v9;
      }
      while (v9 <= (uint64_t)((unint64_t)(v4 - 2) >> 1));
      if (v8 == (double *)--v2)
      {
        *(_OWORD *)BOOL v8 = v16;
      }
      else
      {
        *(_OWORD *)BOOL v8 = *v2;
        *unint64_t v2 = v16;
        uint64_t v11 = (char *)v8 - (char *)v3 + 16;
        if (v11 >= 17)
        {
          unint64_t v12 = (((unint64_t)v11 >> 4) - 2) >> 1;
          __n128 result = sub_1108B50(&v3[2 * v12 + 1], v8[1]);
          if (result)
          {
            uint64_t v13 = *(void *)v8;
            double v14 = v8[1];
            do
            {
              double v15 = v8;
              BOOL v8 = &v3[2 * v12];
              *(_OWORD *)double v15 = *(_OWORD *)v8;
              if (!v12) {
                break;
              }
              unint64_t v12 = (v12 - 1) >> 1;
              __n128 result = sub_1108B50(&v3[2 * v12 + 1], v14);
            }
            while (result);
            *(void *)BOOL v8 = v13;
            v8[1] = v14;
          }
        }
      }
    }
    while (v4-- > 2);
  }
  return result;
}

void sub_45573C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, double a6)
{
  uint64_t v31 = a2;
  *(_DWORD *)(a1 + 136) = a2;
  *(_DWORD *)(a1 + 139) = *(_DWORD *)((char *)&v31 + 3);
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 152);
  *(void *)(a1 + 144) = v12;
  *(void *)(a1 + 152) = v11;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_DWORD *)(a1 + 160) = *((_DWORD *)a3 + 4);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a3 + 3);
  sub_1108B40((double *)(a1 + 128), a6);
  sub_4559EC((void *)(a1 + 32), v31, a4, *(void *)(a1 + 320));
  sub_2DC0DC(a1 + 272, (unint64_t *)&v31, &v31);
  if ((v14 & 1) == 0) {
    ++*(_DWORD *)(a1 + 312);
  }
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  sub_1105674(&v28);
  long long v15 = 0uLL;
  uint64_t v30 = 0;
  long long v29 = 0u;
  *(void *)(a1 + 184) = v28;
  *(_DWORD *)(a1 + 192) = DWORD2(v28);
  long long v16 = *(void **)(a1 + 200);
  if (v16)
  {
    *(void *)(a1 + 208) = v16;
    operator delete(v16);
    long long v15 = v29;
    uint64_t v17 = v30;
  }
  else
  {
    uint64_t v17 = 0;
  }
  *(_OWORD *)(a1 + 200) = v15;
  *(void *)(a1 + 216) = v17;
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)a5 + 16))(a5, *(void *)(a1 + 136), a1 + 184);
  uint64_t v18 = *(void *)(a1 + 224);
  unint64_t v19 = (uint64_t)(*(void *)(a1 + 208) - *(void *)(a1 + 200)) >> 3;
  uint64_t v20 = *(void *)(a1 + 232);
  unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - v18) >> 3);
  unint64_t v22 = v19 - v21;
  if (v19 <= v21)
  {
    if (v19 < v21)
    {
      for (uint64_t i = v18 + 40 * v19; v20 != i; v20 -= 40)
      {
        int v24 = *(std::__shared_weak_count **)(v20 - 32);
        if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v24->__on_zero_shared)(v24, v22);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      *(void *)(a1 + 232) = i;
    }
  }
  else
  {
    sub_455E90((void **)(a1 + 224), v22);
  }
  uint64_t v25 = *(void *)(a1 + 200);
  if (*(void *)(a1 + 208) != v25)
  {
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    do
    {
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)a5 + 8))(a5, *(void *)(v25 + 8 * v27++), *(void *)(a1 + 224) + v26);
      uint64_t v25 = *(void *)(a1 + 200);
      v26 += 40;
    }
    while (v27 < (*(void *)(a1 + 208) - v25) >> 3);
  }
}

uint64_t sub_4559EC(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  int64_t v7 = (void **)(a1 + 3);
  sub_11088C8((uint64_t)&v27, 0, a4);
  unint64_t v27 = off_2439890;
  uint64_t v11 = *a3;
  uint64_t v10 = a3[1];
  uint64_t v29 = a2;
  *(void *)&long long v30 = v11;
  *((void *)&v30 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  int v31 = *((_DWORD *)a3 + 4);
  int v32 = 0;
  unint64_t v12 = a1[4];
  if (v12 < a1[5])
  {
    *(void *)unint64_t v12 = off_24398B8;
    *(_OWORD *)(v12 + 8) = v28;
    *(void *)unint64_t v12 = off_2439890;
    *(void *)(v12 + 24) = v29;
    *(_OWORD *)(v12 + 32) = v30;
    long long v30 = 0uLL;
    *(_DWORD *)(v12 + 48) = v31;
    *(_DWORD *)(v12 + 56) = v32;
    a1[4] = v12 + 64;
    uint64_t v13 = (v9 - v8) >> 6;
    long long v15 = (char *)a1[10];
    unint64_t v14 = a1[11];
    if ((unint64_t)v15 >= v14) {
      goto LABEL_11;
    }
LABEL_9:
    *(_DWORD *)long long v15 = 0;
    *((void *)v15 + 1) = v13;
    uint64_t v18 = v15 + 16;
    goto LABEL_26;
  }
  long long v16 = sub_455C94(v7, (uint64_t)&v27);
  uint64_t v17 = (std::__shared_weak_count *)*((void *)&v30 + 1);
  a1[4] = v16;
  unint64_t v27 = off_2439890;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    uint64_t v13 = (v9 - v8) >> 6;
    long long v15 = (char *)a1[10];
    unint64_t v14 = a1[11];
    if ((unint64_t)v15 < v14) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = (v9 - v8) >> 6;
    long long v15 = (char *)a1[10];
    unint64_t v14 = a1[11];
    if ((unint64_t)v15 < v14) {
      goto LABEL_9;
    }
  }
LABEL_11:
  unint64_t v19 = (unsigned char *)a1[9];
  uint64_t v20 = (v15 - v19) >> 4;
  unint64_t v21 = v20 + 1;
  if ((unint64_t)(v20 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v22 = v14 - (void)v19;
  if (v22 >> 3 > v21) {
    unint64_t v21 = v22 >> 3;
  }
  if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v23 = v21;
  }
  if (v23)
  {
    if (v23 >> 60) {
      sub_188D718();
    }
    int v24 = (char *)operator new(16 * v23);
  }
  else
  {
    int v24 = 0;
  }
  uint64_t v25 = &v24[16 * v20];
  *(_DWORD *)uint64_t v25 = 0;
  *((void *)v25 + 1) = v13;
  uint64_t v18 = v25 + 16;
  if (v15 != v19)
  {
    do
    {
      *((_OWORD *)v25 - 1) = *((_OWORD *)v15 - 1);
      v25 -= 16;
      v15 -= 16;
    }
    while (v15 != v19);
    long long v15 = (char *)a1[9];
  }
  a1[9] = v25;
  a1[10] = v18;
  a1[11] = &v24[16 * v23];
  if (v15) {
    operator delete(v15);
  }
LABEL_26:
  a1[10] = v18;
  return a1[4] - 64;
}

void sub_455C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_455C94(void **a1, uint64_t a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    sub_2E00();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 5 > v4) {
    unint64_t v4 = v5 >> 5;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFC0;
  unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 58) {
    sub_188D718();
  }
  unint64_t v9 = v7 << 6;
  uint64_t v10 = (char *)operator new(v7 << 6);
  uint64_t v11 = &v10[64 * v3];
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)uint64_t v11 = off_2439890;
  unint64_t v12 = &v10[v9];
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((_DWORD *)v11 + 12) = *(_DWORD *)(a2 + 48);
  *((_DWORD *)v11 + 14) = *(_DWORD *)(a2 + 56);
  uint64_t v13 = v11 + 64;
  unint64_t v14 = (char *)*a1;
  long long v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = &v11[v16];
      *((void *)v17 - 8) = off_24398B8;
      uint64_t v18 = &v15[v16];
      *(_OWORD *)(v17 - 56) = *(_OWORD *)&v15[v16 - 56];
      *((void *)v17 - 8) = off_2439890;
      *((void *)v17 - 5) = *(void *)&v15[v16 - 40];
      *((_OWORD *)v17 - 2) = *(_OWORD *)&v15[v16 - 32];
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      *((_DWORD *)v17 - 4) = *(_DWORD *)&v15[v16 - 16];
      *((_DWORD *)v17 - 2) = *(_DWORD *)&v15[v16 - 8];
      v16 -= 64;
    }
    while (&v15[v16] != v14);
    long long v15 = (char *)*a1;
    unint64_t v19 = (char *)a1[1];
    *a1 = &v11[v16];
    a1[1] = v13;
    a1[2] = v12;
    if (v19 == v15)
    {
      long long v15 = v19;
      if (!v19) {
        return v13;
      }
      goto LABEL_17;
    }
    uint64_t v20 = v19 - 64;
    unint64_t v21 = v19 - 64;
    uint64_t v22 = (void (***)(char *))(v19 - 64);
    do
    {
      unint64_t v23 = *v22;
      v22 -= 8;
      (*v23)(v21);
      v20 -= 64;
      BOOL v24 = v21 == v15;
      unint64_t v21 = (char *)v22;
    }
    while (!v24);
  }
  if (v15) {
LABEL_17:
  }
    operator delete(v15);
  return v13;
}

void sub_455E90(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v11 = &v5[40 * a2];
      unint64_t v12 = v5 + 24;
      uint64_t v13 = 40 * a2;
      do
      {
        sub_11065D0((uint64_t)(v12 - 24));
        sub_BB6C(v12, 0);
        sub_BB6C((_DWORD *)v12 + 1, 9);
        *((void *)v12 + 1) = -1;
        v12 += 40;
        v13 -= 40;
      }
      while (v13);
    }
    else
    {
      uint64_t v11 = (char *)a1[1];
    }
    a1[1] = v11;
  }
  else
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x333333333333333) {
      unint64_t v9 = 0x666666666666666;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x666666666666666) {
        sub_188D718();
      }
      uint64_t v10 = (char *)operator new(40 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v14 = 0;
    long long v15 = &v10[40 * v6];
    long long v28 = &v10[40 * v9];
    uint64_t v16 = 40 * a2;
    uint64_t v17 = &v15[40 * a2];
    do
    {
      uint64_t v18 = sub_11065D0((uint64_t)&v15[v14]);
      sub_BB6C((_DWORD *)(v18 + 24), 0);
      sub_BB6C(&v15[v14 + 28], 9);
      *(void *)&v15[v14 + 32] = -1;
      v14 += 40;
    }
    while (v16 != v14);
    uint64_t v20 = (char *)*a1;
    unint64_t v19 = (char *)a1[1];
    unint64_t v21 = v15;
    if (v19 == *a1)
    {
      uint64_t v25 = (char *)a1[1];
    }
    else
    {
      uint64_t v22 = 0;
      do
      {
        unint64_t v23 = &v15[v22];
        BOOL v24 = &v19[v22];
        *(_OWORD *)(v23 - 40) = *(_OWORD *)&v19[v22 - 40];
        *((void *)v24 - 5) = 0;
        *((void *)v24 - 4) = 0;
        *((_DWORD *)v23 - 6) = *(_DWORD *)&v19[v22 - 24];
        *((_OWORD *)v23 - 1) = *(_OWORD *)&v19[v22 - 16];
        v22 -= 40;
      }
      while (&v19[v22] != v20);
      uint64_t v25 = (char *)*a1;
      unint64_t v19 = (char *)a1[1];
      unint64_t v21 = &v15[v22];
    }
    *a1 = v21;
    a1[1] = v17;
    a1[2] = v28;
    if (v19 != v25)
    {
      do
      {
        unint64_t v27 = v19 - 40;
        uint64_t v26 = (std::__shared_weak_count *)*((void *)v19 - 4);
        if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        unint64_t v19 = v27;
      }
      while (v27 != v25);
      unint64_t v19 = v25;
    }
    if (v19) {
      operator delete(v19);
    }
  }
}

void sub_456128(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_456130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  a12 = v13 + v12;
  sub_4561B4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_45614C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *a10)
{
  uint64_t v14 = *(void *)(v12 - 16);
  if (v14)
  {
    sub_20A8700(v14);
    exception_object = a10;
  }
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void sub_456178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *a15)
{
  uint64_t v18 = *(void *)(v16 + v15 + 8);
  if (v18)
  {
    sub_20A8700(v18);
    a1 = a15;
  }
  a12 = v16 + v15;
  sub_4561B4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_4561B4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    unint64_t v4 = *(std::__shared_weak_count **)(i - 32);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_45625C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6, double a7)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  sub_45642C(a1 + 32, (long long *)(a2 + 32));
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 142) = 1;
  sub_11065D0(a1 + 144);
  sub_BB6C((_DWORD *)(a1 + 168), 0);
  sub_BB6C((_DWORD *)(a1 + 172), 9);
  *(void *)(a1 + 176) = -1;
  sub_1105674((_DWORD *)(a1 + 184));
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  sub_456968(a1 + 272, a2 + 272);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  sub_45573C(a1, a3, a4, a5, a6, a7);
  return a1;
}

void sub_45638C(_Unwind_Exception *a1)
{
  sub_12168(v4);
  unint64_t v7 = (void *)v1[31];
  if (v7)
  {
    v1[32] = v7;
    operator delete(v7);
  }
  sub_452FFC(v5 + 3);
  unint64_t v8 = *v5;
  if (*v5)
  {
    v1[26] = v8;
    operator delete(v8);
  }
  sub_14A84(v3);
  sub_44B860(v2);
  unint64_t v9 = (std::__shared_weak_count *)v1[1];
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_45642C(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_456538((char *)(a1 + 24), *((void *)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 6);
  sub_456708((void *)(a1 + 48), (uint64_t *)a2 + 6);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  unint64_t v6 = (unsigned char *)*((void *)a2 + 9);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 10);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 72) = v8;
    *(void *)(a1 + 80) = v8;
    unint64_t v9 = &v8[16 * (v7 >> 4)];
    *(void *)(a1 + 88) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 80) = v9;
  }
  return a1;
}

void sub_4564F8(_Unwind_Exception *a1)
{
  sub_4505D4(v1);
  _Unwind_Resume(a1);
}

void sub_45650C(_Unwind_Exception *a1)
{
  unint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 80) = v6;
    operator delete(v6);
  }
  sub_450538(v3);
  sub_4505D4(v2);
  _Unwind_Resume(a1);
}

char *sub_456538(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >> 58) {
      sub_2E00();
    }
    __n128 result = (char *)operator new(a4 << 6);
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[64 * a4];
    if (a2 != a3)
    {
      uint64_t v8 = 0;
      do
      {
        unint64_t v9 = &result[v8];
        uint64_t v10 = a2 + v8;
        *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + v8 + 8);
        *(void *)unint64_t v9 = off_2439890;
        uint64_t v11 = *(void *)(a2 + v8 + 32);
        *((void *)v9 + 3) = *(void *)(a2 + v8 + 24);
        *((void *)v9 + 4) = v11;
        uint64_t v12 = *(void *)(a2 + v8 + 40);
        *((void *)v9 + 5) = v12;
        if (v12) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
        }
        *((_DWORD *)v9 + 12) = *(_DWORD *)(v10 + 48);
        *((_DWORD *)v9 + 14) = *(_DWORD *)(v10 + 56);
        v8 += 64;
      }
      while (a2 + v8 != a3);
      result += v8;
    }
    v5[1] = result;
  }
  return result;
}

void sub_456630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ***sub_456644(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      long long v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        unint64_t v6 = v4 - 64;
        int64_t v7 = v4 - 64;
        uint64_t v8 = v4 - 64;
        do
        {
          unint64_t v9 = *(void (***)(char *))v8;
          v8 -= 64;
          (*v9)(v7);
          v6 -= 64;
          BOOL v10 = v7 == v3;
          int64_t v7 = v8;
        }
        while (!v10);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *sub_456708(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[48 * v7];
    a1[1] = sub_4567E0(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_4567B4(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_20A8758((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4567E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v9 = a4 + v7;
      *(void *)uint64_t v9 = off_24398B8;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + v7 + 8);
      *(void *)uint64_t v9 = off_2441628;
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 40) = 0;
      *(void *)(v9 + 24) = 0;
      uint64_t v11 = *(unsigned char **)(a2 + v7 + 24);
      BOOL v10 = *(unsigned char **)(a2 + v7 + 32);
      int64_t v12 = v10 - v11;
      if (v10 != v11)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v12 >> 2) >= 0x1555555555555556) {
          sub_2E00();
        }
        uint64_t v13 = (char *)operator new(v12);
        *(void *)(v9 + 24) = v13;
        *(void *)(v9 + 32) = v13;
        uint64_t v8 = &v13[4 * (v12 >> 2)];
        *(void *)(v9 + 40) = v8;
        memcpy(v13, v11, v12);
        *(void *)(v9 + 32) = v8;
      }
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_45690C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)(v1 + v2 + 24);
  if (v4)
  {
    *(void *)(v1 + v2 + 32) = v4;
    operator delete(v4);
  }
  if (v2)
  {
    uint64_t v5 = v1 - 48;
    do
    {
      (**(void (***)(void))(v5 + v2))();
      v2 -= 48;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_456968(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_2DC0DC(a1, i + 2, i + 2);
  return a1;
}

void sub_456A84(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_456A98(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_456AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 200);
  uint64_t v6 = (*(void *)(a1 + 208) - v5) >> 3;
  if (v6 != 1)
  {
    if (v6 == 2
      && (uint64_t v12 = 1 - a5,
          uint64_t v13 = 8 * (1 - a5),
          unint64_t v14 = (*(uint64_t (**)(uint64_t, void))(*(void *)a4 + 24))(a4, *(void *)(a1 + 136)),
          *(_DWORD *)(v5 + v13) == v14)
      && (uint64_t v15 = v5 + 8 * v12, *(unsigned __int16 *)(v15 + 4) == WORD2(v14))
      && (HIWORD(v14) & 1) != (*(unsigned char *)(v15 + 6) == 0))
    {
      uint64_t v16 = (*(uint64_t (**)(uint64_t, void))(*(void *)a4 + 24))(a4, *(void *)(a1 + 136));
      if ((a2 & 0xFFFFFFFFFFFFLL) == (v16 & 0xFFFFFFFFFFFFLL))
      {
        LOBYTE(v6) = a5 == 0 || ((a2 & 0xFF000000000000) == 0) == (BYTE6(v16) & 1);
        return v6 & 1;
      }
    }
    else
    {
      sub_BB6C(&v54, 9);
      if (sub_11055B4((_DWORD *)(a1 + 172), v54))
      {
        sub_BB6C(&v53, 9);
        if (sub_11055B4((_DWORD *)(a3 + 28), v53))
        {
          int v17 = sub_4F44((unsigned int *)(a1 + 172));
          int v18 = v17 - sub_4F44((unsigned int *)(a3 + 28));
          if (v18 < 0) {
            int v18 = -v18;
          }
          if (v18 > 1) {
            goto LABEL_48;
          }
        }
      }
      sub_BB6C(&v52, 0);
      if (sub_11055B4((_DWORD *)(a1 + 168), v52))
      {
        sub_BB6C(&v51, 0);
        if (sub_11055B4((_DWORD *)(a3 + 24), v51) && sub_11055B4((_DWORD *)(a1 + 168), *(_DWORD *)(a3 + 24))) {
          goto LABEL_48;
        }
      }
      sub_BB6C(&v50, 1);
      if (sub_11055A4((_DWORD *)(a1 + 168), v50))
      {
        sub_BB6C(&v49, 1);
        if (sub_11055A4((_DWORD *)(a3 + 24), v49))
        {
          uint64_t v19 = *(void *)(a1 + 200);
          if (*(void *)(a1 + 208) == v19) {
            goto LABEL_49;
          }
          uint64_t v20 = 0;
          unint64_t v21 = 0;
          uint64_t v22 = 24;
          do
          {
            if (__PAIR64__(*(unsigned __int16 *)(v19 + v20 + 4), *(_DWORD *)(v19 + v20)) != __PAIR64__(WORD2(a2), a2)
              || ((a2 & 0x1000000000000) == 0) != (*(unsigned char *)(v19 + v20 + 6) == 0))
            {
              uint64_t v24 = (*(uint64_t (**)(uint64_t, void))(*(void *)a4 + 24))(a4, *(void *)(a1 + 136));
              if (__PAIR64__(*(unsigned __int16 *)(v19 + v20 + 4), *(_DWORD *)(v19 + v20)) != __PAIR64__(WORD2(v24), v24)|| ((v24 & 0x1000000000000) == 0) != (*(unsigned char *)(v19 + v20 + 6) == 0))
              {
                unint64_t v23 = (_DWORD *)(*(void *)(a1 + 224) + v22);
                sub_BB6C(&v48, 10);
                if (sub_11055B4(v23, v48)) {
                  break;
                }
              }
            }
            ++v21;
            uint64_t v19 = *(void *)(a1 + 200);
            v20 += 8;
            v22 += 40;
          }
          while (v21 < (*(void *)(a1 + 208) - v19) >> 3);
        }
      }
      sub_BB6C(&v47, 4);
      if (sub_11055A4((_DWORD *)(a1 + 168), v47))
      {
        sub_BB6C(&v46, 4);
        if (sub_11055A4((_DWORD *)(a3 + 24), v46))
        {
          uint64_t v26 = *(void *)(a1 + 200);
          uint64_t v25 = *(void *)(a1 + 208);
          if (v25 != v26)
          {
            uint64_t v27 = 0;
            unint64_t v28 = 0;
            uint64_t v29 = 24;
            do
            {
              if (__PAIR64__(*(unsigned __int16 *)(v26 + v27 + 4), *(_DWORD *)(v26 + v27)) != __PAIR64__(WORD2(a2), a2)
                || ((a2 & 0x1000000000000) == 0) != (*(unsigned char *)(v26 + v27 + 6) == 0))
              {
                long long v30 = (_DWORD *)(*(void *)(a1 + 224) + v29);
                sub_BB6C(&v45, 4);
                if (sub_11055A4(v30, v45)) {
                  goto LABEL_37;
                }
                uint64_t v26 = *(void *)(a1 + 200);
                uint64_t v25 = *(void *)(a1 + 208);
              }
              ++v28;
              v29 += 40;
              v27 += 8;
            }
            while (v28 < (v25 - v26) >> 3);
          }
          goto LABEL_49;
        }
      }
LABEL_37:
      unsigned __int16 v31 = sub_11068C8((uint64_t *)(a1 + 144));
      __int16 v44 = sub_1106898(a3);
      unsigned __int16 v32 = v31;
      if (sub_1105208(&v44, v31, v33) > 20.0) {
        goto LABEL_48;
      }
      uint64_t v35 = *(void *)(a1 + 200);
      uint64_t v34 = *(void *)(a1 + 208);
      if (v34 != v35)
      {
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        unint64_t v38 = 0;
        double v39 = 360.0;
        do
        {
          if (__PAIR64__(*(unsigned __int16 *)(v35 + v37 + 4), *(_DWORD *)(v35 + v37)) != __PAIR64__(WORD2(a2), a2)
            || ((a2 & 0x1000000000000) == 0) != (*(unsigned char *)(v35 + v37 + 6) == 0))
          {
            __int16 v43 = sub_1106898(*(void *)(a1 + 224) + v36);
            double v41 = sub_1105208(&v43, v32, v40);
            if (v41 < v39) {
              double v39 = v41;
            }
            uint64_t v35 = *(void *)(a1 + 200);
            uint64_t v34 = *(void *)(a1 + 208);
          }
          ++v38;
          v36 += 40;
          v37 += 8;
        }
        while (v38 < (v34 - v35) >> 3);
        if (v39 < 25.0)
        {
LABEL_48:
          LOBYTE(v6) = 0;
          return v6 & 1;
        }
      }
    }
LABEL_49:
    LOBYTE(v6) = 1;
  }
  return v6 & 1;
}

void sub_456FC0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_456FF8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_45705C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x80000000020E7F71) {
    return a1 + 24;
  }
  if (((v3 & 0x80000000020E7F71 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000000020E7F71)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000000020E7F71 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t sub_4570E0(uint64_t a1, _DWORD *a2)
{
  if (sub_50E294(a2)) {
    unsigned int v4 = *(_DWORD *)(a1 + 16) + 3;
  }
  else {
    unsigned int v4 = *(_DWORD *)(a1 + 16);
  }
  if (*(void *)(a1 + 104) == *(void *)(a1 + 112)) {
    return 1;
  }
  unsigned int v13 = 0;
  unint64_t v12 = 0;
  uint64_t v5 = (unsigned int *)sub_BBB4((uint64_t)a2);
  sub_1106680((uint64_t **)(a1 + 144), v5, &v13, &v12);
  unint64_t v6 = v12;
  unint64_t v7 = sub_1105C70(a1 + 144);
  uint8x8_t v8 = (unsigned int *)sub_BBB4((uint64_t)a2);
  unsigned int v9 = sub_1105880((unsigned int *)(a1 + 184), v8);
  if (!sub_50E294(a2) && v9 < v4) {
    return 1;
  }
  if (v6 >= v7 - 1 || v13 >= v4) {
    return 2;
  }
  else {
    return 0;
  }
}

uint64_t sub_4571DC(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  if ((long long *)a1 != a2)
  {
    sub_457268((char **)(a1 + 24), *((void *)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 6);
    sub_457698((uint64_t *)(a1 + 48), *((void *)a2 + 6), *((void *)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 4));
    sub_457964((void *)(a1 + 72), *((char **)a2 + 9), *((char **)a2 + 10), (uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 4);
  }
  return a1;
}

void sub_457268(char **a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  unsigned int v9 = *a1;
  if (__sz <= (v8 - (uint64_t)*a1) >> 6)
  {
    uint64_t v27 = a1[1];
    unint64_t v28 = (v27 - v9) >> 6;
    if (v28 >= __sz)
    {
      if (a2 != a3)
      {
        uint64_t v37 = v9 + 32;
        do
        {
          *(_OWORD *)(v37 - 24) = *(_OWORD *)(v6 + 8);
          int v38 = *(_DWORD *)(v6 + 24);
          *(_DWORD *)(v37 - 5) = *(_DWORD *)(v6 + 27);
          *((_DWORD *)v37 - 2) = v38;
          uint64_t v40 = *(void *)(v6 + 32);
          uint64_t v39 = *(void *)(v6 + 40);
          if (v39) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
          }
          double v41 = (std::__shared_weak_count *)*((void *)v37 + 1);
          *(void *)uint64_t v37 = v40;
          *((void *)v37 + 1) = v39;
          if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
          *((_DWORD *)v37 + 4) = *(_DWORD *)(v6 + 48);
          *((_DWORD *)v37 + 6) = *(_DWORD *)(v6 + 56);
          v6 += 64;
          v9 += 64;
          v37 += 64;
        }
        while (v6 != a3);
        uint64_t v27 = a1[1];
      }
      if (v27 != v9)
      {
        int v47 = v27 - 64;
        int v48 = v27 - 64;
        int v49 = v27 - 64;
        do
        {
          int v50 = *(void (***)(char *))v49;
          v49 -= 64;
          (*v50)(v48);
          v47 -= 64;
          BOOL v16 = v48 == v9;
          int v48 = v49;
        }
        while (!v16);
      }
      a1[1] = v9;
    }
    else
    {
      uint64_t v29 = a2 + (v28 << 6);
      if (v27 != v9)
      {
        long long v30 = v9 + 32;
        unsigned __int16 v31 = (uint64_t *)(a2 + 32);
        unint64_t v32 = v28 << 6;
        do
        {
          *(_OWORD *)(v30 - 24) = *(_OWORD *)(v31 - 3);
          int v33 = *((_DWORD *)v31 - 2);
          *(_DWORD *)(v30 - 5) = *(_DWORD *)((char *)v31 - 5);
          *((_DWORD *)v30 - 2) = v33;
          uint64_t v35 = *v31;
          uint64_t v34 = v31[1];
          if (v34) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v36 = (std::__shared_weak_count *)*((void *)v30 + 1);
          *(void *)long long v30 = v35;
          *((void *)v30 + 1) = v34;
          if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
          *((_DWORD *)v30 + 4) = *((_DWORD *)v31 + 4);
          *((_DWORD *)v30 + 6) = *((_DWORD *)v31 + 6);
          v30 += 64;
          v31 += 8;
          v32 -= 64;
        }
        while (v32);
        unsigned int v9 = a1[1];
      }
      unint64_t v42 = v9;
      if (v29 != a3)
      {
        unint64_t v43 = 0;
        do
        {
          __int16 v44 = &v9[v43];
          *(void *)__int16 v44 = off_24398B8;
          uint64_t v45 = v29 + v43;
          *(_OWORD *)(v44 + 8) = *(_OWORD *)(v29 + v43 + 8);
          *(void *)__int16 v44 = off_2439890;
          *((void *)v44 + 3) = *(void *)(v29 + v43 + 24);
          uint64_t v46 = *(void *)(v29 + v43 + 40);
          *((void *)v44 + 4) = *(void *)(v29 + v43 + 32);
          *((void *)v44 + 5) = v46;
          if (v46) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
          }
          *((_DWORD *)v44 + 12) = *(_DWORD *)(v45 + 48);
          *((_DWORD *)v44 + 14) = *(_DWORD *)(v45 + 56);
          v43 += 64;
        }
        while (v29 + v43 != a3);
        unint64_t v42 = &v9[v43];
      }
      a1[1] = v42;
    }
  }
  else
  {
    if (v9)
    {
      BOOL v10 = a1[1];
      uint64_t v11 = *a1;
      if (v10 != v9)
      {
        unint64_t v12 = v10 - 64;
        unsigned int v13 = v10 - 64;
        unint64_t v14 = v10 - 64;
        do
        {
          uint64_t v15 = *(void (***)(char *))v14;
          v14 -= 64;
          (*v15)(v13);
          v12 -= 64;
          BOOL v16 = v13 == v9;
          unsigned int v13 = v14;
        }
        while (!v16);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz >> 58) {
      goto LABEL_53;
    }
    uint64_t v17 = v8 >> 5;
    if (v8 >> 5 <= __sz) {
      uint64_t v17 = __sz;
    }
    BOOL v18 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0;
    unint64_t v19 = 0x3FFFFFFFFFFFFFFLL;
    if (!v18) {
      unint64_t v19 = v17;
    }
    if (v19 >> 58) {
LABEL_53:
    }
      sub_2E00();
    unint64_t v20 = v19 << 6;
    unint64_t v21 = (char *)operator new(v19 << 6);
    *a1 = v21;
    a1[1] = v21;
    a1[2] = &v21[v20];
    if (v6 != a3)
    {
      uint64_t v22 = 0;
      do
      {
        unint64_t v23 = &v21[v22];
        uint64_t v24 = v6 + v22;
        *(_OWORD *)(v23 + 8) = *(_OWORD *)(v6 + v22 + 8);
        *(void *)unint64_t v23 = off_2439890;
        uint64_t v25 = *(void *)(v6 + v22 + 32);
        *((void *)v23 + 3) = *(void *)(v6 + v22 + 24);
        *((void *)v23 + 4) = v25;
        uint64_t v26 = *(void *)(v6 + v22 + 40);
        *((void *)v23 + 5) = v26;
        if (v26) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
        }
        *((_DWORD *)v23 + 12) = *(_DWORD *)(v24 + 48);
        *((_DWORD *)v23 + 14) = *(_DWORD *)(v24 + 56);
        v22 += 64;
      }
      while (v6 + v22 != a3);
      v21 += v22;
    }
    a1[1] = v21;
  }
}

uint64_t *sub_457698(uint64_t *result, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v7 = (uint64_t)result;
  uint64_t v9 = (uint64_t)(result + 2);
  uint64_t v8 = result[2];
  uint64_t v10 = *result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 4) < __sz)
  {
    if (v10)
    {
      uint64_t v11 = result[1];
      unint64_t v12 = (void *)*result;
      if (v11 != v10)
      {
        uint64_t v13 = v11 - 48;
        unint64_t v14 = (void (***)(void))(v11 - 48);
        uint64_t v15 = (void (***)(void))(v11 - 48);
        do
        {
          BOOL v16 = *v15;
          v15 -= 6;
          (*v16)(v14);
          v13 -= 48;
          BOOL v17 = v14 == (void (***)(void))v10;
          unint64_t v14 = v15;
        }
        while (!v17);
        unint64_t v12 = *(void **)v7;
      }
      *(void *)(v7 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    if (__sz > 0x555555555555555) {
      goto LABEL_38;
    }
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v19 = 2 * v18;
    if (2 * v18 <= __sz) {
      uint64_t v19 = __sz;
    }
    unint64_t v20 = v18 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v19;
    if (v20 > 0x555555555555555) {
LABEL_38:
    }
      sub_2E00();
    uint64_t v21 = 48 * v20;
    uint64_t v22 = (char *)operator new(48 * v20);
    *(void *)uint64_t v7 = v22;
    *(void *)(v7 + 8) = v22;
    *(void *)(v7 + 16) = &v22[v21];
    __n128 result = (uint64_t *)sub_4567E0(v9, v6, a3, (uint64_t)v22);
LABEL_30:
    *(void *)(v7 + 8) = result;
    return result;
  }
  uint64_t v23 = result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v23 - v10) >> 4) < __sz)
  {
    uint64_t v24 = a2 + 16 * ((v23 - v10) >> 4);
    if (v23 != v10)
    {
      uint64_t v25 = 16 * ((v23 - v10) >> 4);
      do
      {
        *(_OWORD *)(v10 + 8) = *(_OWORD *)(v6 + 8);
        if (v6 != v10) {
          sub_31AF54((void *)(v10 + 24), *(char **)(v6 + 24), *(char **)(v6 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 32) - *(void *)(v6 + 24)) >> 2));
        }
        v6 += 48;
        v10 += 48;
        v25 -= 48;
      }
      while (v25);
      uint64_t v10 = *(void *)(v7 + 8);
    }
    __n128 result = (uint64_t *)sub_4567E0(v9, v24, a3, v10);
    goto LABEL_30;
  }
  if (a2 != a3)
  {
    uint64_t v26 = *result;
    do
    {
      *(_OWORD *)(v10 + 8) = *(_OWORD *)(v6 + 8);
      if (v6 != v10) {
        __n128 result = sub_31AF54((void *)(v10 + 24), *(char **)(v6 + 24), *(char **)(v6 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 32) - *(void *)(v6 + 24)) >> 2));
      }
      v6 += 48;
      v10 += 48;
      v26 += 48;
    }
    while (v6 != a3);
    uint64_t v23 = *(void *)(v7 + 8);
    if (v23 == v26) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
  uint64_t v26 = *result;
  if (v23 != v10)
  {
LABEL_34:
    uint64_t v27 = v23 - 48;
    unint64_t v28 = (uint64_t (***)(void))(v23 - 48);
    uint64_t v29 = (uint64_t (***)(void))(v23 - 48);
    do
    {
      long long v30 = *v29;
      v29 -= 6;
      __n128 result = (uint64_t *)(*v30)(v28);
      v27 -= 48;
      BOOL v17 = v28 == (uint64_t (***)(void))v26;
      unint64_t v28 = v29;
    }
    while (!v17);
  }
LABEL_37:
  *(void *)(v7 + 8) = v26;
  return result;
}

void sub_457954(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_45795C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_457964(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
LABEL_22:
    }
      sub_2E00();
    uint64_t v13 = 2 * v12;
    __n128 result = operator new(16 * v12);
    uint64_t v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      __n128 result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  BOOL v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    uint64_t v19 = (void *)*result;
LABEL_20:
    __n128 result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  unint64_t v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  char *v15 = &v9[v14];
  return result;
}

uint64_t sub_457AAC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  sub_45642C(a1 + 32, (long long *)(a2 + 32));
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  uint64_t v4 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  uint64_t v5 = *(void *)(a2 + 184);
  int v6 = *(_DWORD *)(a2 + 192);
  *(void *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 192) = v6;
  *(void *)(a1 + 184) = v5;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 200);
  uint64_t v7 = *(unsigned char **)(a2 + 208);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0) {
      sub_2E00();
    }
    uint64_t v10 = (char *)operator new(v7 - v8);
    *(void *)(a1 + 200) = v10;
    *(void *)(a1 + 208) = v10;
    BOOL v11 = &v10[8 * (v9 >> 3)];
    *(void *)(a1 + 216) = v11;
    memcpy(v10, v8, v9 - 1);
    *(void *)(a1 + 208) = v11;
  }
  sub_457C98((void *)(a1 + 224), (uint64_t *)(a2 + 224));
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  uint64_t v13 = *(unsigned char **)(a2 + 248);
  unint64_t v12 = *(unsigned char **)(a2 + 256);
  uint64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      sub_2E00();
    }
    uint64_t v15 = (char *)operator new(v12 - v13);
    *(void *)(a1 + 248) = v15;
    *(void *)(a1 + 256) = v15;
    BOOL v16 = &v15[8 * (v14 >> 3)];
    *(void *)(a1 + 264) = v16;
    memcpy(v15, v13, v14 - 1);
    *(void *)(a1 + 256) = v16;
  }
  sub_456968(a1 + 272, a2 + 272);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  return a1;
}

void sub_457C30(_Unwind_Exception *a1)
{
  uint64_t v8 = *v6;
  if (*v6)
  {
    v1[32] = v8;
    operator delete(v8);
  }
  sub_452FFC(v5);
  uint64_t v9 = *v4;
  if (*v4)
  {
    v1[26] = v9;
    operator delete(v9);
  }
  sub_14A84(v3);
  sub_44B860(v2);
  uint64_t v10 = (std::__shared_weak_count *)v1[1];
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(a1);
}

void *sub_457C98(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 3);
    if (v6 >= 0x666666666666667) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(v5);
    uint64_t v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[40 * v6];
    do
    {
      uint64_t v9 = v3 + v8;
      uint64_t v10 = &v7[v8];
      uint64_t v11 = *(void *)(v3 + v8 + 8);
      *(void *)uint64_t v10 = *(void *)(v3 + v8);
      *((void *)v10 + 1) = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v10 + 4) = *(_DWORD *)(v9 + 16);
      *(_OWORD *)(v10 + 24) = *(_OWORD *)(v9 + 24);
      v8 += 40;
    }
    while (v9 + 40 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_457D70(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    sub_20A87FC((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_457D90(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2)
  {
    unint64_t v3 = a1[4];
    uint64_t v4 = (void **)a1[1];
    if (v3 >= 0x100)
    {
      operator delete(*v4);
      uint64_t v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      uint64_t v2 = a1[5];
      unint64_t v3 = a1[4] - 256;
      a1[4] = v3;
    }
    int64_t v5 = (void **)a1[2];
    if (v5 == v4) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = 32 * ((char *)v5 - (char *)v4) - 1;
    }
    if (v6 - (v2 + v3) >= 0x100)
    {
      operator delete(*(v5 - 1));
      a1[2] -= 8;
    }
    uint64_t v7 = (uint64_t)a1;
  }
  else
  {
    uint64_t v8 = a1[2];
    if (v8 != a1[1])
    {
      do
      {
        operator delete(*(void **)(v8 - 8));
        uint64_t v9 = a1[1];
        uint64_t v8 = a1[2] - 8;
        a1[2] = v8;
      }
      while (v8 != v9);
    }
    a1[4] = 0;
    uint64_t v7 = (uint64_t)a1;
  }
  sub_457E84(v7);
}

void sub_457E84(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 16);
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(char **)(a1 + 8);
  int64_t v4 = v1 - v3;
  unint64_t v5 = (v1 - v3) >> 3;
  if (v5 >= (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 3) {
    return;
  }
  if (v1 == v3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * v5;
    goto LABEL_13;
  }
  if (v4 < 0) {
    sub_188D718();
  }
  uint64_t v7 = operator new(v1 - v3);
  uint64_t v8 = (uint64_t)&v7[v5];
  if ((unint64_t)(v4 - 8) < 0x18)
  {
    uint64_t v9 = v7;
    do
    {
LABEL_12:
      uint64_t v17 = *(void *)v3;
      v3 += 8;
      *v9++ = v17;
    }
    while (v9 != (void *)v8);
    goto LABEL_13;
  }
  uint64_t v9 = v7;
  if ((unint64_t)((char *)v7 - v3) < 0x20) {
    goto LABEL_12;
  }
  uint64_t v10 = 0;
  unint64_t v11 = ((unint64_t)(v4 - 8) >> 3) + 1;
  uint64_t v12 = v11 & 0x3FFFFFFFFFFFFFFCLL;
  uint64_t v9 = &v7[v12];
  uint64_t v13 = &v3[v12 * 8];
  uint64_t v14 = v11 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    uint64_t v15 = &v7[v10];
    long long v16 = *(_OWORD *)&v3[v10 * 8 + 16];
    _OWORD *v15 = *(_OWORD *)&v3[v10 * 8];
    v15[1] = v16;
    v10 += 4;
    v14 -= 4;
  }
  while (v14);
  unint64_t v3 = v13;
  if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_12;
  }
LABEL_13:
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v8;
  if (v2)
  {
    operator delete(v2);
  }
}

void sub_457FB8(uint64_t a1, _DWORD *a2, _DWORD *a3, double a4, double a5, double a6, double a7)
{
  LODWORD(a4) = *a2;
  LODWORD(a5) = a2[1];
  double v8 = (double)*(unint64_t *)&a4;
  double v9 = (double)*(unint64_t *)&a5;
  LODWORD(a4) = *a3;
  LODWORD(a7) = a3[1];
  double v10 = (double)*(unint64_t *)&a7;
  double v11 = (double)*(unint64_t *)&a4 - v8;
  double v12 = v10 - v9;
  double v13 = v11 * v11 + v12 * v12;
  double v14 = fabs(v13);
  unsigned int v16 = **(_DWORD **)a1;
  unsigned int v15 = *(_DWORD *)(*(void *)a1 + 4);
  if (v13 == 0.0 || v14 < 2.22044605e-16)
  {
    double v18 = (double)v15;
    double v52 = (double)v16;
    goto LABEL_7;
  }
  double v18 = (double)v15;
  double v22 = (v11 * ((double)v16 - v8) + v12 * ((double)v15 - v9)) / v13;
  double v52 = (double)v16;
  if (v22 <= 0.0)
  {
    uint64_t v19 = *(void *)a2;
    uint64_t v20 = HIDWORD(*(void *)a2);
    unsigned int v21 = a2[2];
    goto LABEL_30;
  }
  if (v22 >= 1.0)
  {
LABEL_7:
    uint64_t v19 = *(void *)a3;
    uint64_t v20 = HIDWORD(*(void *)a3);
    unsigned int v21 = a3[2];
    goto LABEL_30;
  }
  int v23 = a2[2];
  if (v23 == 0x7FFFFFFF)
  {
    BOOL v24 = 0;
    double v25 = 0.0;
  }
  else
  {
    double v26 = (double)v23;
    int v27 = a3[2];
    BOOL v28 = v27 == 0x7FFFFFFF;
    double v25 = v22 * ((double)v27 - v26) + v26;
    BOOL v24 = v27 != 0x7FFFFFFF;
    if (v28) {
      double v25 = 0.0;
    }
  }
  double v29 = v12 * v22;
  double v30 = v11 * v22 + v8;
  if (v30 < 0.0) {
    double v31 = -0.5;
  }
  else {
    double v31 = 0.5;
  }
  LODWORD(v19) = (v30 + v31);
  double v32 = v29 + v9;
  if (v32 < 0.0) {
    double v33 = -0.5;
  }
  else {
    double v33 = 0.5;
  }
  unsigned int v34 = (v32 + v33);
  if (v25 < 0.0) {
    double v35 = -0.5;
  }
  else {
    double v35 = 0.5;
  }
  if (v24) {
    unsigned int v21 = (v25 + v35);
  }
  else {
    unsigned int v21 = 0x7FFFFFFF;
  }
  if (v34 >= 0xFFFFFFFE) {
    LODWORD(v20) = -2;
  }
  else {
    LODWORD(v20) = v34;
  }
LABEL_30:
  long double v36 = exp(3.14159265 - v18 * 6.28318531 / 4294967300.0);
  long double v37 = atan((v36 - 1.0 / v36) * 0.5) * 57.2957795 * 0.0174532925;
  long double v38 = exp(3.14159265 - (double)v20 * 6.28318531 / 4294967300.0);
  long double v39 = atan((v38 - 1.0 / v38) * 0.5);
  v40.f64[0] = v52;
  v40.f64[1] = (double)v19;
  long double v41 = v39 * 57.2957795 * 0.0174532925;
  float64x2_t v42 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(v40, (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v53 = vsubq_f64(v42, (float64x2_t)vdupq_laneq_s64((int64x2_t)v42, 1)).f64[0];
  long double v43 = sin((v37 - v41) * 0.5);
  long double v44 = v43 * v43;
  double v45 = cos(v37);
  long double v46 = v45 * cos(v41);
  long double v47 = sin(0.5 * v53);
  long double v48 = atan2(sqrt(v44 + v46 * (v47 * v47)), sqrt(1.0 - (v44 + v46 * (v47 * v47))));
  double v49 = (v48 + v48) * 6372797.56;
  int v50 = *(double **)(a1 + 8);
  if (v49 < *v50)
  {
    *int v50 = v49;
    uint64_t v51 = *(void *)(a1 + 16);
    *(void *)uint64_t v51 = v19 | ((unint64_t)v20 << 32);
    *(_DWORD *)(v51 + 8) = v21;
  }
}

double sub_4582C8(double **a1, uint64_t a2, unsigned int *a3, double a4)
{
  LODWORD(a4) = *(_DWORD *)(a2 + 4);
  long double v7 = exp(3.14159265 - (double)*(unint64_t *)&a4 * 6.28318531 / 4294967300.0);
  long double v37 = atan((v7 - 1.0 / v7) * 0.5) * 57.2957795 * 0.0174532925;
  unint64_t v8 = *(void *)a2;
  unsigned int v42 = *(void *)a2;
  LODWORD(v8) = a3[1];
  long double v9 = exp(3.14159265 - (double)v8 * 6.28318531 / 4294967300.0);
  long double v10 = atan((v9 - 1.0 / v9) * 0.5) * 57.2957795 * 0.0174532925;
  v11.i64[0] = v42;
  v11.i64[1] = *a3;
  float64x2_t v38 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v11), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v39 = v10;
  long double v12 = sin((v37 - v10) * 0.5);
  long double v13 = v12 * v12;
  double v14 = cos(v37);
  double v41 = cos(v10);
  long double v15 = sin((v38.f64[0] - v38.f64[1]) * 0.5);
  long double v16 = atan2(sqrt(v13 + v14 * v41 * (v15 * v15)), sqrt(1.0 - (v13 + v14 * v41 * (v15 * v15))));
  *(double *)&unint64_t v17 = (v16 + v16) * 6372797.56;
  double v40 = *(double *)&v17;
  double v18 = *a1;
  LODWORD(v17) = *((_DWORD *)*a1 + 1);
  long double v19 = exp(3.14159265 - (double)v17 * 6.28318531 / 4294967300.0);
  *(double *)&unint64_t v20 = atan((v19 - 1.0 / v19) * 0.5) * 57.2957795;
  long double v21 = *(double *)&v20 * 0.0174532925;
  LODWORD(v20) = *(_DWORD *)v18;
  double v22 = ((double)v20 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925;
  long double v23 = sin((v37 - v21) * 0.5);
  long double v24 = v23 * v23;
  double v25 = cos(v21);
  long double v26 = sin((v38.f64[0] - v22) * 0.5);
  long double v27 = atan2(sqrt(v24 + v14 * v25 * (v26 * v26)), sqrt(1.0 - (v24 + v14 * v25 * (v26 * v26))));
  double v28 = (v27 + v27) * 6372797.56;
  long double v29 = sin((v21 - v39) * 0.5);
  long double v30 = v29 * v29;
  long double v31 = sin((v22 - v38.f64[1]) * 0.5);
  long double v32 = atan2(sqrt(v30 + v41 * v25 * (v31 * v31)), sqrt(1.0 - (v30 + v41 * v25 * (v31 * v31))));
  double v33 = fmax(v28 + (v32 + v32) * 6372797.56 - v40, 0.0);
  unsigned int v34 = a1[1];
  double v35 = a1[3];
  if (v33 < *v34)
  {
    *a1[2] = v28 + *v35;
    double *v34 = v33;
  }
  double result = v40 + *v35;
  double *v35 = result;
  return result;
}

void sub_458610()
{
  *(void *)uint64_t v0 = v2;
  *(_DWORD *)(v0 + 8) = v1;
}

void sub_45861C()
{
  unk_255863F = 16641;
  word_2558628 = 65;
  byte_2558657 = 1;
  byte_2558641 = 0;
}

void *sub_458644(void *result, uint64_t a2)
{
  *double result = off_2439930;
  result[1] = a2;
  return result;
}

void sub_458664(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t *a4)
{
  LODWORD(v48) = sub_53FA4((uint64_t)a2);
  double v9 = sub_1106ACC(&v48, v8);
  int v50 = sub_4F44(a2);
  double v11 = sub_1106C0C(&v50, v10);
  uint64_t v12 = -1;
  if (v11 <= 180.0 && v9 >= -85.0511288 && v9 <= 85.0511288 && v11 >= -180.0)
  {
    double v13 = fmax(v9, -85.0511288);
    double v14 = v13 * 3.14159265 / 180.0;
    BOOL v15 = v13 < 85.0511288;
    double v16 = 1.48442223;
    if (v15) {
      double v16 = v14;
    }
    long double v17 = sin(v16);
    LODWORD(v18) = ((log((v17 + 1.0) / (1.0 - v17)) / -12.5663706 + 0.5) * 4294967300.0);
    if (v18 >= 0xFFFFFFFE) {
      uint64_t v18 = 4294967294;
    }
    else {
      uint64_t v18 = v18;
    }
    uint64_t v12 = ((v11 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v18 << 32);
  }
  uint64_t v51 = v12;
  int v52 = 0x7FFFFFFF;
  sub_4071CC(*(void *)(a1 + 8), (unsigned int *)&v51, 0xAu, 100 * a3, (uint64_t)sub_29C8, &v48);
  long double v19 = v48;
  unint64_t v20 = v49;
  if (v48 != v49)
  {
    long double v21 = (uint64_t *)a4[1];
    while (1)
    {
      uint64_t v22 = *((void *)v19 + 1) & 0xFFFFFFFFFFFFLL;
      unint64_t v23 = a4[2];
      if ((unint64_t)v21 < v23)
      {
        *long double v21 = v22;
        long double v24 = v21 + 1;
        goto LABEL_28;
      }
      double v25 = (uint64_t *)*a4;
      uint64_t v26 = ((uint64_t)v21 - *a4) >> 3;
      unint64_t v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v28 = v23 - (void)v25;
      if (v28 >> 2 > v27) {
        unint64_t v27 = v28 >> 2;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29)
      {
        if (v29 >> 61) {
          sub_188D718();
        }
        long double v30 = (char *)operator new(8 * v29);
        uint64_t v31 = (uint64_t)&v30[8 * v26];
        *(void *)uint64_t v31 = v22;
        long double v24 = (uint64_t *)(v31 + 8);
        if (v21 == v25)
        {
LABEL_26:
          *a4 = v31;
          a4[1] = (uint64_t)v24;
          a4[2] = (uint64_t)&v30[8 * v29];
          if (!v21) {
            goto LABEL_28;
          }
LABEL_27:
          operator delete(v21);
          goto LABEL_28;
        }
      }
      else
      {
        long double v30 = 0;
        uint64_t v31 = 8 * v26;
        unsigned int v42 = (uint64_t *)(8 * v26);
        uint64_t *v42 = v22;
        long double v24 = v42 + 1;
        if (v21 == v25) {
          goto LABEL_26;
        }
      }
      do
      {
        int v43 = *((_DWORD *)v21-- - 2);
        int v44 = *(_DWORD *)((char *)v21 + 3);
        *(_DWORD *)(v31 - 8) = v43;
        v31 -= 8;
        *(_DWORD *)(v31 + 3) = v44;
      }
      while (v21 != v25);
      long double v21 = (uint64_t *)*a4;
      *a4 = v31;
      a4[1] = (uint64_t)v24;
      a4[2] = (uint64_t)&v30[8 * v29];
      if (v21) {
        goto LABEL_27;
      }
LABEL_28:
      a4[1] = (uint64_t)v24;
      uint64_t v32 = *((void *)v19 + 1) & 0xFFFFFFFFFFFFLL | 0x1000000000000;
      unint64_t v33 = a4[2];
      if ((unint64_t)v24 >= v33)
      {
        unsigned int v34 = (uint64_t *)*a4;
        uint64_t v35 = ((uint64_t)v24 - *a4) >> 3;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v37 = v33 - (void)v34;
        if (v37 >> 2 > v36) {
          unint64_t v36 = v37 >> 2;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          if (v38 >> 61) {
            sub_188D718();
          }
          double v39 = (char *)operator new(8 * v38);
          uint64_t v40 = (uint64_t)&v39[8 * v35];
          double v41 = &v39[8 * v38];
          *(void *)uint64_t v40 = v32;
          long double v21 = (uint64_t *)(v40 + 8);
          if (v24 == v34)
          {
LABEL_47:
            *a4 = v40;
            a4[1] = (uint64_t)v21;
            a4[2] = (uint64_t)v41;
LABEL_48:
            operator delete(v24);
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v40 = 8 * v35;
          double v41 = 0;
          double v45 = (uint64_t *)(8 * v35);
          *double v45 = v32;
          long double v21 = v45 + 1;
          if (v24 == v34) {
            goto LABEL_47;
          }
        }
        do
        {
          int v46 = *((_DWORD *)v24-- - 2);
          int v47 = *(_DWORD *)((char *)v24 + 3);
          *(_DWORD *)(v40 - 8) = v46;
          v40 -= 8;
          *(_DWORD *)(v40 + 3) = v47;
        }
        while (v24 != v34);
        long double v24 = (uint64_t *)*a4;
        *a4 = v40;
        a4[1] = (uint64_t)v21;
        a4[2] = (uint64_t)v41;
        if (!v24) {
          goto LABEL_14;
        }
        goto LABEL_48;
      }
      *long double v24 = v32;
      long double v21 = v24 + 1;
LABEL_14:
      a4[1] = (uint64_t)v21;
      v19 += 48;
      if (v19 == v20)
      {
        long double v19 = v48;
        break;
      }
    }
  }
  if (v19)
  {
    double v49 = v19;
    operator delete(v19);
  }
}

void sub_458A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_458A60(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  long double v7 = (int *)sub_2D5D58(*(void *)(a1 + 8), a2 & 0xFFFFFFFFFFFFLL);
  double v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 0x1Bu && (uint64_t v9 = v8[13]) != 0) {
    int v10 = *((unsigned __int8 *)v7 + v9);
  }
  else {
    int v10 = 0;
  }
  sub_BB6C(v42, v10);
  a3[7] = v42[0];
  double v11 = (int *)sub_2D5D58(*(void *)(a1 + 8), v6);
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 < 0x13u || (uint64_t v13 = v12[9]) == 0)
  {
    LOBYTE(v14) = 0;
LABEL_10:
    int v15 = (char)v14;
    goto LABEL_11;
  }
  int v14 = *((unsigned __int8 *)v11 + v13);
  if ((v14 - 51) < 3)
  {
    int v15 = 10;
    goto LABEL_11;
  }
  int v15 = 0;
  if (v14 != 54 && v14 != 255) {
    goto LABEL_10;
  }
LABEL_11:
  sub_BB6C(v42, v15);
  a3[6] = v42[0];
  double v16 = (int *)sub_2D5D58(*(void *)(a1 + 8), v6);
  long double v17 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v17 < 9u)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[4];
    if (v18) {
      LODWORD(v18) = *(int *)((char *)v16 + v18);
    }
  }
  if (v18 % 0x64 <= 0x31) {
    unsigned int v19 = v18 / 0x64;
  }
  else {
    unsigned int v19 = v18 / 0x64 + 1;
  }
  a3[9] = v19;
  unint64_t v20 = (std::__shared_weak_count *)operator new(0x30uLL);
  v20->__shared_owners_ = 0;
  v20->__shared_weak_owners_ = 0;
  v20[1].__vftable = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)off_2439A00;
  v20[1].__shared_owners_ = 0;
  v20[1].__shared_weak_owners_ = 0;
  long double v48 = &v20[1].__vftable;
  double v49 = v20;
  sub_2954EC(*(void *)(a1 + 8), a2, (uint64_t)&v44);
  sub_2E51EC((uint64_t)&v44, (uint64_t)v42);
  if (v47)
  {
    if (__p == v46) {
      int v21 = 0;
    }
    else {
      int v21 = -1;
    }
    LODWORD(v22) = v21;
  }
  else if (__p == v46)
  {
    int v21 = 0;
    LODWORD(v22) = 0;
  }
  else
  {
    unint64_t v23 = *((void *)v46 - 1);
    long double v24 = sub_2964C4(v44, v23, 1);
    double v25 = &v24[*(unsigned __int16 *)&v24[-*(int *)v24 + 4]];
    uint64_t v26 = (uint64_t)&v25[4 * HIDWORD(v23) + *(unsigned int *)v25];
    unint64_t v27 = (int *)(v26 + 4 + *(unsigned int *)(v26 + 4));
    unint64_t v22 = (unint64_t)(v46 - (unsigned char *)__p) >> 3;
    uint64_t v28 = (unsigned int *)((char *)v27 + *(unsigned __int16 *)((char *)v27 - *v27 + 6));
    int v21 = *(unsigned int *)((char *)v28 + *v28);
  }
  while (v42[12] != v22 || v42[13] != v21)
  {
    unint64_t v29 = sub_2E1BC0((uint64_t)v42);
    unsigned int v30 = HIDWORD(v29);
    int v41 = sub_1106B8C((double)v29 * 360.0 / 4294967300.0 + -180.0);
    long double v31 = exp((double)v30 * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v32 = atan((v31 + -1.0 / v31) * 0.5);
    int v33 = sub_1106A34(v32 * 57.2957795);
    int v40 = v33;
    unint64_t shared_owners = v20[1].__shared_owners_;
    if (shared_owners >= v20[1].__shared_weak_owners_)
    {
      uint64_t v35 = sub_45A108(&v20[1].__vftable, &v41, &v40);
    }
    else
    {
      sub_11056AC((_DWORD *)v20[1].__shared_owners_, v41, v33);
      uint64_t v35 = (_DWORD *)(shared_owners + 12);
      v20[1].__shared_owners_ = shared_owners + 12;
    }
    v20[1].__shared_owners_ = (uint64_t)v35;
    if (v43) {
      sub_2E7608((uint64_t)v42);
    }
    else {
      sub_2E74E8((uint64_t)v42);
    }
  }
  unint64_t v38 = &v20[1].__vftable;
  double v39 = v20;
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_11065DC((uint64_t)a3, (uint64_t *)&v38, 0);
  unint64_t v36 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  if (__p)
  {
    int v46 = (char *)__p;
    operator delete(__p);
  }
  uint64_t v37 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
}

void sub_458E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  sub_14A84(v22 - 64);
  _Unwind_Resume(a1);
}

void sub_458EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2954EC(*(void *)(a1 + 8), a2, (uint64_t)v38);
  unint64_t v6 = (unsigned int *)sub_2D5EC4(*(void *)(a1 + 8), a2 & 0xFFFFFFFFFFFFLL, (a2 & 0xFF000000000000) == 0);
  unint64_t v7 = sub_2E40A4((uint64_t)v38);
  unsigned int v8 = HIDWORD(v7);
  int v9 = sub_1106B8C((double)v7 * 360.0 / 4294967300.0 + -180.0);
  long double v10 = exp((double)v8 * -6.28318531 / 4294967300.0 + 3.14159265);
  long double v11 = atan((v10 + -1.0 / v10) * 0.5);
  int v12 = sub_1106A34(v11 * 57.2957795);
  sub_BB5C((_DWORD *)a3, v9, v12);
  uint64_t v13 = *(void *)(a1 + 8);
  sub_2D5904(v13, v6, 0, (char **)(v13 + 7800));
  int v14 = *(unsigned char **)(v13 + 7800);
  int v15 = *(unsigned char **)(v13 + 7808);
  uint64_t v16 = v15 - v14;
  if (v15 == v14) {
    goto LABEL_29;
  }
  if (v16 < 0) {
    sub_2E00();
  }
  long double v17 = (unsigned int *)operator new(v15 - v14);
  uint64_t v18 = &v17[2 * (v16 >> 3)];
  long long __p = v17;
  memcpy(v17, v14, v16 - 1);
  unint64_t v36 = (void **)(a3 + 16);
  do
  {
    uint64_t v20 = *((unsigned __int16 *)v17 + 2);
    uint64_t v21 = *v17;
    if (v20 != WORD2(a2) || v21 != a2)
    {
      unint64_t v23 = v21 | (v20 << 32) | ((unint64_t)*((unsigned __int8 *)v17 + 6) << 48);
      double v25 = *(_DWORD **)(a3 + 24);
      unint64_t v24 = *(void *)(a3 + 32);
      if ((unint64_t)v25 < v24)
      {
        *(void *)double v25 = v23;
        unsigned int v19 = v25 + 2;
LABEL_5:
        *(void *)(a3 + 24) = v19;
        goto LABEL_6;
      }
      uint64_t v26 = *v36;
      uint64_t v27 = ((char *)v25 - (unsigned char *)*v36) >> 3;
      unint64_t v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v29 = v24 - (void)v26;
      if (v29 >> 2 > v28) {
        unint64_t v28 = v29 >> 2;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30)
      {
        if (v30 >> 61) {
          sub_188D718();
        }
        long double v31 = (char *)operator new(8 * v30);
        uint64_t v32 = (uint64_t)&v31[8 * v27];
        *(void *)uint64_t v32 = v23;
        unsigned int v19 = (void *)(v32 + 8);
        if (v25 == v26)
        {
LABEL_21:
          *(void *)(a3 + 16) = v32;
          *(void *)(a3 + 24) = v19;
          *(void *)(a3 + 32) = &v31[8 * v30];
          if (!v25) {
            goto LABEL_5;
          }
          goto LABEL_26;
        }
      }
      else
      {
        long double v31 = 0;
        uint64_t v32 = 8 * v27;
        int v33 = (unint64_t *)(8 * v27);
        *int v33 = v23;
        unsigned int v19 = v33 + 1;
        if (v25 == v26) {
          goto LABEL_21;
        }
      }
      do
      {
        int v34 = *(v25 - 2);
        v25 -= 2;
        int v35 = *(_DWORD *)((char *)v25 + 3);
        *(_DWORD *)(v32 - 8) = v34;
        v32 -= 8;
        *(_DWORD *)(v32 + 3) = v35;
      }
      while (v25 != v26);
      double v25 = *v36;
      *(void *)(a3 + 16) = v32;
      *(void *)(a3 + 24) = v19;
      *(void *)(a3 + 32) = &v31[8 * v30];
      if (!v25) {
        goto LABEL_5;
      }
LABEL_26:
      operator delete(v25);
      goto LABEL_5;
    }
LABEL_6:
    v17 += 2;
  }
  while (v17 != v18);
  if (__p) {
    operator delete(__p);
  }
LABEL_29:
  if (v39)
  {
    int v40 = v39;
    operator delete(v39);
  }
}

void sub_4591DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_459234(uint64_t a1, uint64_t a2)
{
  return a2 ^ 0x1000000000000;
}

void *sub_45923C(void *result, uint64_t a2)
{
  *double result = off_2439970;
  result[1] = a2;
  return result;
}

void sub_45925C(uint64_t a1, unsigned int *a2, unsigned int a3, unint64_t **a4)
{
  LODWORD(v62) = sub_53FA4((uint64_t)a2);
  double v9 = sub_1106ACC(&v62, v8);
  int v64 = sub_4F44(a2);
  double v11 = sub_1106C0C(&v64, v10);
  uint64_t v12 = -1;
  if (v11 <= 180.0 && v9 >= -85.0511288 && v9 <= 85.0511288 && v11 >= -180.0)
  {
    double v13 = fmax(v9, -85.0511288);
    double v14 = v13 * 3.14159265 / 180.0;
    BOOL v15 = v13 < 85.0511288;
    double v16 = 1.48442223;
    if (v15) {
      double v16 = v14;
    }
    long double v17 = sin(v16);
    LODWORD(v18) = ((log((v17 + 1.0) / (1.0 - v17)) / -12.5663706 + 0.5) * 4294967300.0);
    if (v18 >= 0xFFFFFFFE) {
      uint64_t v18 = 4294967294;
    }
    else {
      uint64_t v18 = v18;
    }
    uint64_t v12 = ((v11 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v18 << 32);
  }
  uint64_t v65 = v12;
  int v66 = 0x7FFFFFFF;
  sub_4071CC(*(void *)(a1 + 8), (unsigned int *)&v65, 0xAu, 100 * a3, (uint64_t)sub_29C8, &v62);
  unsigned int v19 = v62;
  uint64_t v20 = v63;
  if (v62 != v63)
  {
    uint64_t v21 = a4[1];
    while (1)
    {
      unint64_t v22 = *((void *)v19 + 1) & 0x1FFFFFFFFFFFFFFFLL | 0xA000000000000000;
      unint64_t v23 = (unint64_t)a4[2];
      if ((unint64_t)v21 < v23)
      {
        *uint64_t v21 = v22;
        unint64_t v24 = v21 + 1;
        goto LABEL_28;
      }
      double v25 = *a4;
      uint64_t v26 = (char *)v21 - (char *)*a4;
      uint64_t v27 = v26 >> 3;
      unint64_t v28 = (v26 >> 3) + 1;
      if (v28 >> 61) {
        sub_2E00();
      }
      uint64_t v29 = v23 - (void)v25;
      if (v29 >> 2 > v28) {
        unint64_t v28 = v29 >> 2;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30)
      {
        if (v30 >> 61) {
          sub_188D718();
        }
        long double v31 = operator new(8 * v30);
        uint64_t v32 = (unint64_t *)&v31[8 * v27];
        unint64_t *v32 = v22;
        unint64_t v24 = v32 + 1;
        if (v21 == v25)
        {
LABEL_26:
          *a4 = v32;
          a4[1] = v24;
          a4[2] = (unint64_t *)&v31[8 * v30];
          if (!v21) {
            goto LABEL_28;
          }
LABEL_27:
          operator delete(v21);
          goto LABEL_28;
        }
      }
      else
      {
        long double v31 = 0;
        uint64_t v32 = (unint64_t *)(8 * v27);
        *(void *)(8 * v27) = v22;
        unint64_t v24 = (unint64_t *)(8 * v27 + 8);
        if (v21 == v25) {
          goto LABEL_26;
        }
      }
      unint64_t v47 = (char *)(v21 - 1) - (char *)v25;
      if (v47 < 0x168)
      {
        long double v48 = v21;
        goto LABEL_46;
      }
      if (&v31[v26 - 8 - (v47 & 0xFFFFFFFFFFFFFFF8)] > &v31[v26 - 8]) {
        break;
      }
      if ((unint64_t *)((char *)v21 - (v47 & 0xFFFFFFFFFFFFFFF8) - 8) > v21 - 1)
      {
        long double v48 = v21;
        goto LABEL_46;
      }
      if ((unint64_t)((char *)v21 - v31 - v26) < 0x20)
      {
        long double v48 = v21;
        goto LABEL_46;
      }
      uint64_t v50 = (v47 >> 3) + 1;
      uint64_t v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
      long double v48 = &v21[v51 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v32 = (unint64_t *)((char *)v32 - v51);
      int v52 = &v31[8 * v27 - 16];
      double v53 = v21 - 2;
      uint64_t v54 = v50 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v55 = *(_OWORD *)v53;
        *(v52 - 1) = *((_OWORD *)v53 - 1);
        _OWORD *v52 = v55;
        v52 -= 2;
        v53 -= 4;
        v54 -= 4;
      }
      while (v54);
      if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_46;
      }
LABEL_47:
      uint64_t v21 = *a4;
      *a4 = v32;
      a4[1] = v24;
      a4[2] = (unint64_t *)&v31[8 * v30];
      if (v21) {
        goto LABEL_27;
      }
LABEL_28:
      a4[1] = v24;
      unint64_t v33 = *((void *)v19 + 1) & 0x1FFFFFFFFFFFFFFFLL | 0x8000000000000000;
      unint64_t v34 = (unint64_t)a4[2];
      if ((unint64_t)v24 >= v34)
      {
        int v35 = *a4;
        uint64_t v36 = (char *)v24 - (char *)*a4;
        uint64_t v37 = v36 >> 3;
        unint64_t v38 = (v36 >> 3) + 1;
        if (v38 >> 61) {
          sub_2E00();
        }
        uint64_t v39 = v34 - (void)v35;
        if (v39 >> 2 > v38) {
          unint64_t v38 = v39 >> 2;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          if (v40 >> 61) {
            sub_188D718();
          }
          int v41 = operator new(8 * v40);
          unsigned int v42 = (unint64_t *)&v41[8 * v37];
          char v43 = (unint64_t *)&v41[8 * v40];
          unint64_t *v42 = v33;
          uint64_t v21 = v42 + 1;
          if (v24 != v35)
          {
LABEL_38:
            unint64_t v44 = (char *)(v24 - 1) - (char *)v35;
            if (v44 < 0x168)
            {
              double v45 = v24;
              goto LABEL_40;
            }
            if (&v41[v36 - 8 - (v44 & 0xFFFFFFFFFFFFFFF8)] > &v41[v36 - 8])
            {
              double v45 = v24;
              goto LABEL_40;
            }
            if ((unint64_t *)((char *)v24 - (v44 & 0xFFFFFFFFFFFFFFF8) - 8) > v24 - 1)
            {
              double v45 = v24;
              goto LABEL_40;
            }
            if ((unint64_t)((char *)v24 - v41 - v36) < 0x20)
            {
              double v45 = v24;
              goto LABEL_40;
            }
            uint64_t v56 = (v44 >> 3) + 1;
            uint64_t v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
            double v45 = &v24[v57 / 0xFFFFFFFFFFFFFFF8];
            unsigned int v42 = (unint64_t *)((char *)v42 - v57);
            size_t v58 = &v41[8 * v37 - 16];
            unint64_t v59 = v24 - 2;
            uint64_t v60 = v56 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v61 = *(_OWORD *)v59;
              *(v58 - 1) = *((_OWORD *)v59 - 1);
              _OWORD *v58 = v61;
              v58 -= 2;
              v59 -= 4;
              v60 -= 4;
            }
            while (v60);
            if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_40:
                unint64_t v46 = *--v45;
                *--unsigned int v42 = v46;
              }
              while (v45 != v35);
            }
            unint64_t v24 = *a4;
            *a4 = v42;
            a4[1] = v21;
            a4[2] = v43;
            if (!v24) {
              goto LABEL_14;
            }
LABEL_51:
            operator delete(v24);
            goto LABEL_14;
          }
        }
        else
        {
          int v41 = 0;
          unsigned int v42 = (unint64_t *)(8 * v37);
          char v43 = 0;
          *(void *)(8 * v37) = v33;
          uint64_t v21 = (unint64_t *)(8 * v37 + 8);
          if (v24 != v35) {
            goto LABEL_38;
          }
        }
        *a4 = v42;
        a4[1] = v21;
        a4[2] = v43;
        goto LABEL_51;
      }
      *unint64_t v24 = v33;
      uint64_t v21 = v24 + 1;
LABEL_14:
      a4[1] = v21;
      v19 += 48;
      if (v19 == v20)
      {
        unsigned int v19 = v62;
        goto LABEL_73;
      }
    }
    long double v48 = v21;
    do
    {
LABEL_46:
      unint64_t v49 = *--v48;
      *--uint64_t v32 = v49;
    }
    while (v48 != v25);
    goto LABEL_47;
  }
LABEL_73:
  if (v19)
  {
    unint64_t v63 = v19;
    operator delete(v19);
  }
}

void sub_459788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_4597B0(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6 = a2 & 0x1FFFFFFFFFFFFFFFLL;
  unint64_t v7 = (int *)sub_2D5D58(*(void *)(a1 + 8), a2 & 0x1FFFFFFFFFFFFFFFLL);
  double v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 0x1Bu && (uint64_t v9 = v8[13]) != 0) {
    int v10 = *((unsigned __int8 *)v7 + v9);
  }
  else {
    int v10 = 0;
  }
  sub_BB6C(v42, v10);
  a3[7] = v42[0];
  double v11 = (int *)sub_2D5D58(*(void *)(a1 + 8), v6);
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 < 0x13u || (uint64_t v13 = v12[9]) == 0)
  {
    LOBYTE(v14) = 0;
LABEL_10:
    int v15 = (char)v14;
    goto LABEL_11;
  }
  int v14 = *((unsigned __int8 *)v11 + v13);
  if ((v14 - 51) < 3)
  {
    int v15 = 10;
    goto LABEL_11;
  }
  int v15 = 0;
  if (v14 != 54 && v14 != 255) {
    goto LABEL_10;
  }
LABEL_11:
  sub_BB6C(v42, v15);
  a3[6] = v42[0];
  double v16 = (int *)sub_2D5D58(*(void *)(a1 + 8), v6);
  long double v17 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v17 < 9u)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    uint64_t v18 = v17[4];
    if (v18) {
      LODWORD(v18) = *(int *)((char *)v16 + v18);
    }
  }
  if (v18 % 0x64 <= 0x31) {
    unsigned int v19 = v18 / 0x64;
  }
  else {
    unsigned int v19 = v18 / 0x64 + 1;
  }
  a3[9] = v19;
  uint64_t v20 = (std::__shared_weak_count *)operator new(0x30uLL);
  v20->__shared_owners_ = 0;
  v20->__shared_weak_owners_ = 0;
  v20[1].__vftable = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)off_2439A00;
  v20[1].__shared_owners_ = 0;
  v20[1].__shared_weak_owners_ = 0;
  long double v48 = &v20[1].__vftable;
  unint64_t v49 = v20;
  sub_2954EC(*(void *)(a1 + 8), (a2 & 0xFFFFFFFFFFFFLL | (((a2 >> 61) & 1) << 48)) ^ 0x1000000000000, (uint64_t)&v44);
  sub_2E51EC((uint64_t)&v44, (uint64_t)v42);
  if (v47)
  {
    if (__p == v46) {
      int v21 = 0;
    }
    else {
      int v21 = -1;
    }
    LODWORD(v22) = v21;
  }
  else if (__p == v46)
  {
    int v21 = 0;
    LODWORD(v22) = 0;
  }
  else
  {
    unint64_t v23 = *((void *)v46 - 1);
    unint64_t v24 = sub_2964C4(v44, v23, 1);
    double v25 = &v24[*(unsigned __int16 *)&v24[-*(int *)v24 + 4]];
    uint64_t v26 = (uint64_t)&v25[4 * HIDWORD(v23) + *(unsigned int *)v25];
    uint64_t v27 = (int *)(v26 + 4 + *(unsigned int *)(v26 + 4));
    unint64_t v22 = (unint64_t)(v46 - (unsigned char *)__p) >> 3;
    unint64_t v28 = (unsigned int *)((char *)v27 + *(unsigned __int16 *)((char *)v27 - *v27 + 6));
    int v21 = *(unsigned int *)((char *)v28 + *v28);
  }
  while (v42[12] != v22 || v42[13] != v21)
  {
    unint64_t v29 = sub_2E1BC0((uint64_t)v42);
    unsigned int v30 = HIDWORD(v29);
    int v41 = sub_1106B8C((double)v29 * 360.0 / 4294967300.0 + -180.0);
    long double v31 = exp((double)v30 * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v32 = atan((v31 + -1.0 / v31) * 0.5);
    int v33 = sub_1106A34(v32 * 57.2957795);
    int v40 = v33;
    unint64_t shared_owners = v20[1].__shared_owners_;
    if (shared_owners >= v20[1].__shared_weak_owners_)
    {
      int v35 = sub_45A108(&v20[1].__vftable, &v41, &v40);
    }
    else
    {
      sub_11056AC((_DWORD *)v20[1].__shared_owners_, v41, v33);
      int v35 = (_DWORD *)(shared_owners + 12);
      v20[1].__shared_owners_ = shared_owners + 12;
    }
    v20[1].__shared_owners_ = (uint64_t)v35;
    if (v43) {
      sub_2E7608((uint64_t)v42);
    }
    else {
      sub_2E74E8((uint64_t)v42);
    }
  }
  unint64_t v38 = &v20[1].__vftable;
  uint64_t v39 = v20;
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_11065DC((uint64_t)a3, (uint64_t *)&v38, 0);
  uint64_t v36 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  if (__p)
  {
    unint64_t v46 = (char *)__p;
    operator delete(__p);
  }
  uint64_t v37 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
}

void sub_459BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  sub_14A84(v22 - 64);
  _Unwind_Resume(a1);
}

void sub_459C54(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  unint64_t v6 = a2 >> 13;
  unint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
  sub_2954EC(*(void *)(a1 + 8), ((a2 >> 13) & 0x1000000000000 | a2 & 0xFFFFFFFFFFFFLL) ^ 0x1000000000000, (uint64_t)v52);
  double v8 = (unsigned int *)sub_2D5EC4(*(void *)(a1 + 8), v7, HIWORD(v6) & 1);
  unint64_t v9 = sub_2E40A4((uint64_t)v52);
  unsigned int v10 = HIDWORD(v9);
  int v11 = sub_1106B8C((double)v9 * 360.0 / 4294967300.0 + -180.0);
  long double v12 = exp((double)v10 * -6.28318531 / 4294967300.0 + 3.14159265);
  long double v13 = atan((v12 + -1.0 / v12) * 0.5);
  int v14 = sub_1106A34(v13 * 57.2957795);
  sub_BB5C((_DWORD *)a3, v11, v14);
  uint64_t v15 = *(void *)(a1 + 8);
  sub_2D5904(v15, v8, 0, (char **)(v15 + 7800));
  double v16 = *(unsigned char **)(v15 + 7800);
  long double v17 = *(unsigned char **)(v15 + 7808);
  uint64_t v18 = v17 - v16;
  if (v17 == v16) {
    goto LABEL_38;
  }
  if (v18 < 0) {
    sub_2E00();
  }
  unsigned int v19 = (unsigned int *)operator new(v17 - v16);
  uint64_t v20 = &v19[2 * (v18 >> 3)];
  long long __p = v19;
  memcpy(v19, v16, v18 - 1);
  int v21 = HIDWORD(v4) & 0x1FFFFFFF;
  int v49 = v4;
  uint64_t v50 = (unint64_t **)(a3 + 16);
  int v48 = HIDWORD(v4) & 0x1FFFFFFF;
  do
  {
    uint64_t v23 = *((unsigned __int16 *)v19 + 2);
    uint64_t v24 = *v19;
    if (v24 != v4 || v21 != v23)
    {
      uint64_t v26 = v24 | (v23 << 32);
      if (*((unsigned char *)v19 + 6)) {
        unint64_t v27 = 0x8000000000000000;
      }
      else {
        unint64_t v27 = 0xA000000000000000;
      }
      unint64_t v28 = v26 | v27;
      unsigned int v30 = *(unint64_t **)(a3 + 24);
      unint64_t v29 = *(void *)(a3 + 32);
      if ((unint64_t)v30 < v29)
      {
        unint64_t *v30 = v28;
        uint64_t v22 = (uint64_t)(v30 + 1);
LABEL_5:
        *(void *)(a3 + 24) = v22;
        goto LABEL_6;
      }
      long double v31 = *v50;
      uint64_t v32 = (char *)v30 - (char *)*v50;
      uint64_t v33 = v32 >> 3;
      unint64_t v34 = (v32 >> 3) + 1;
      if (v34 >> 61) {
        sub_2E00();
      }
      uint64_t v35 = v29 - (void)v31;
      if (v35 >> 2 > v34) {
        unint64_t v34 = v35 >> 2;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36)
      {
        if (v36 >> 61) {
          sub_188D718();
        }
        uint64_t v37 = operator new(8 * v36);
        unint64_t v38 = (unint64_t *)&v37[8 * v33];
        *unint64_t v38 = v28;
        uint64_t v22 = (uint64_t)(v38 + 1);
        if (v30 == v31)
        {
LABEL_24:
          *(void *)(a3 + 16) = v38;
          *(void *)(a3 + 24) = v22;
          *(void *)(a3 + 32) = &v37[8 * v36];
          if (!v30)
          {
LABEL_26:
            LODWORD(v4) = v49;
            int v21 = v48;
            goto LABEL_5;
          }
LABEL_25:
          operator delete(v30);
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v37 = 0;
        unint64_t v38 = (unint64_t *)(8 * v33);
        *(void *)(8 * v33) = v28;
        uint64_t v22 = 8 * v33 + 8;
        if (v30 == v31) {
          goto LABEL_24;
        }
      }
      unint64_t v39 = (char *)(v30 - 1) - (char *)v31;
      if (v39 < 0x58) {
        goto LABEL_46;
      }
      if ((unint64_t)((char *)v30 - &v37[v32]) < 0x20) {
        goto LABEL_46;
      }
      uint64_t v40 = (v39 >> 3) + 1;
      uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
      unsigned int v42 = &v30[v41 / 0xFFFFFFFFFFFFFFF8];
      unint64_t v38 = (unint64_t *)((char *)v38 - v41);
      char v43 = &v37[8 * v33 - 16];
      uint64_t v44 = v30 - 2;
      uint64_t v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v46 = *(_OWORD *)v44;
        *(v43 - 1) = *((_OWORD *)v44 - 1);
        _OWORD *v43 = v46;
        v43 -= 2;
        v44 -= 4;
        v45 -= 4;
      }
      while (v45);
      unsigned int v30 = v42;
      if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_46:
        do
        {
          unint64_t v47 = *--v30;
          *--unint64_t v38 = v47;
        }
        while (v30 != v31);
      }
      unsigned int v30 = *v50;
      *(void *)(a3 + 16) = v38;
      *(void *)(a3 + 24) = v22;
      *(void *)(a3 + 32) = &v37[8 * v36];
      if (!v30) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
LABEL_6:
    v19 += 2;
  }
  while (v19 != v20);
  if (__p) {
    operator delete(__p);
  }
LABEL_38:
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
}

void sub_459FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_45A030(uint64_t a1, unint64_t a2)
{
  return (a2 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(a2 >> 62 == 2) << 63)) ^ 0x2000000000000000;
}

void sub_45A04C()
{
}

void sub_45A064()
{
}

void sub_45A078(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2439A00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_45A098(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2439A00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_45A0EC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

_DWORD *sub_45A108(void *a1, int *a2, int *a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x1555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x1555555555555555) {
      sub_188D718();
    }
    unint64_t v9 = operator new(12 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  unsigned int v10 = sub_11056AC(&v9[3 * v4], *a2, *a3);
  int v11 = v10 + 3;
  long double v13 = (_DWORD *)*a1;
  long double v12 = (_DWORD *)a1[1];
  if (v12 != (_DWORD *)*a1)
  {
    do
    {
      uint64_t v14 = *(void *)(v12 - 3);
      v12 -= 3;
      int v15 = v12[2];
      *(void *)(v10 - 3) = v14;
      v10 -= 3;
      v10[2] = v15;
    }
    while (v12 != v13);
    long double v12 = (_DWORD *)*a1;
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = &v9[3 * v8];
  if (v12) {
    operator delete(v12);
  }
  return v11;
}

void sub_45A22C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_45A244()
{
  byte_255866F = 1;
  word_2558658 = 65;
}

uint64_t sub_45A260@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      uint64_t v2 = "STATUS_SUCCESS";
      goto LABEL_11;
    case 1:
      *(unsigned char *)(a2 + 23) = 13;
      strcpy((char *)a2, "STATUS_FAILED");
      break;
    case 2:
      *(unsigned char *)(a2 + 23) = 17;
      strcpy((char *)a2, "STATUS_INCOMPLETE");
      break;
    case 5:
      *(unsigned char *)(a2 + 23) = 15;
      strcpy((char *)a2, "INVALID_REQUEST");
      break;
    case 20:
      *(unsigned char *)(a2 + 23) = 16;
      strcpy((char *)a2, "FAILED_NO_RESULT");
      break;
    case 30:
      *(unsigned char *)(a2 + 23) = 16;
      strcpy((char *)a2, "NEEDS_REFINEMENT");
      break;
    case 40:
      *(unsigned char *)(a2 + 23) = 21;
      strcpy((char *)a2, "FAILED_NOT_AUTHORIZED");
      break;
    case 50:
      uint64_t v2 = "STATUS_DEDUPED";
LABEL_11:
      *(unsigned char *)(a2 + 23) = 14;
      *(void *)a2 = *(void *)v2;
      *(void *)(a2 + 6) = *(void *)(v2 + 6);
      *(unsigned char *)(a2 + 14) = 0;
      break;
    case 60:
      *(unsigned char *)(a2 + 23) = 16;
      strcpy((char *)a2, "VERSION_MISMATCH");
      break;
    default:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "UNKNOWN");
      break;
  }
  return result;
}

double sub_45A4DC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 38)) {
    uint64_t v2 = (int **)(a2 + 24);
  }
  else {
    uint64_t v2 = (int **)(a2 + 16);
  }
  unint64_t v3 = *v2;
  if (!*v2) {
    return sub_32A584(a1, *(void *)(a2 + 32));
  }
  unint64_t v4 = (unsigned __int16 *)((char *)v3 - *v3);
  unsigned int v5 = *v4;
  if (v5 >= 9 && v4[4])
  {
    unsigned int v6 = *(unsigned __int16 *)((char *)v3 + v4[4]);
    unsigned int v7 = *(unsigned __int16 *)(a1 + 3872);
    if (!*(_WORD *)(a1 + 3872)) {
      goto LABEL_14;
    }
  }
  else
  {
    unsigned int v6 = 0xFFFF;
    unsigned int v7 = *(unsigned __int16 *)(a1 + 3872);
    if (!*(_WORD *)(a1 + 3872)) {
      goto LABEL_14;
    }
  }
  if (v5 >= 0xF)
  {
    uint64_t v8 = v4[7];
    if (v8)
    {
      unint64_t v9 = (unsigned int *)((char *)v3 + v8 + *(unsigned int *)((char *)v3 + v8));
      if (*v9 >= v7)
      {
        unsigned int v10 = *((unsigned __int16 *)v9 + v7 + 1);
        if ((unsigned __int16)(v10 + 1) > 1u)
        {
          double v12 = (double)v10;
          return v12 / 100.0;
        }
      }
    }
  }
LABEL_14:
  double result = -1.0;
  if ((unsigned __int16)(v6 - 1) > 0xFFFDu) {
    return result;
  }
  double v12 = (double)v6;
  return v12 / 100.0;
}

uint64_t *sub_45A5C4(uint64_t a1, int **a2, int **a3)
{
  uint64_t v6 = (uint64_t)a2[4];
  uint64_t v7 = (uint64_t)a3[4];
  uint64_t v8 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v9 = *v8;
  if ((v6 & 0xFF000000000000) != 0)
  {
    if (v9 < 0x29) {
      goto LABEL_11;
    }
    unsigned int v10 = v8[20];
    if (!v10) {
      goto LABEL_11;
    }
  }
  else if (v9 < 0x27 || (unsigned int v10 = v8[19]) == 0)
  {
LABEL_11:
    unsigned int v11 = 0;
    double v12 = *a3;
    long double v13 = (unsigned __int16 *)((char *)*a3 - **a3);
    unsigned int v14 = *v13;
    if ((v7 & 0xFF000000000000) != 0) {
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  unsigned int v11 = *(int *)((char *)*a2 + v10 + *(int *)((char *)*a2 + v10));
  double v12 = *a3;
  long double v13 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v14 = *v13;
  if ((v7 & 0xFF000000000000) != 0)
  {
LABEL_12:
    if (v14 >= 0x29)
    {
      unsigned int v15 = v13[20];
      if (v15) {
        goto LABEL_14;
      }
    }
    goto LABEL_16;
  }
LABEL_8:
  if (v14 >= 0x27)
  {
    unsigned int v15 = v13[19];
    if (v15)
    {
LABEL_14:
      unsigned int v16 = *(int *)((char *)v12 + v15 + *(int *)((char *)v12 + v15));
      long double v17 = &qword_25586A0;
      if (v11 > 1) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }
LABEL_16:
  unsigned int v16 = 0;
  long double v17 = &qword_25586A0;
  if (v11 > 1) {
    goto LABEL_18;
  }
LABEL_17:
  if (v16 < 2) {
    return v17;
  }
LABEL_18:
  v148[0] = a2[4];
  v148[1] = v7;
  sub_45C460(a1 + 104, v148, v147);
  if (v147[0]) {
    return v147[3] + 2;
  }
  unsigned int v19 = (unsigned __int16 *)((char *)*a2 - **a2);
  unsigned int v20 = *v19;
  if (*((unsigned char *)a2 + 38))
  {
    if (v20 < 0x29) {
      goto LABEL_35;
    }
    unsigned int v21 = v19[20];
    if (!v21) {
      goto LABEL_35;
    }
  }
  else
  {
    if (v20 < 0x27) {
      goto LABEL_35;
    }
    unsigned int v21 = v19[19];
    if (!v21) {
      goto LABEL_35;
    }
  }
  uint64_t v22 = (unsigned int *)((char *)*a2 + v21 + *(int *)((char *)*a2 + v21));
  uint64_t v23 = *v22;
  if (v23)
  {
    unint64_t v24 = 0;
    unint64_t v25 = 0;
    uint64_t v26 = 4 * v23;
    do
    {
      uint64_t v27 = v22[v24 / 4 + 1];
      unint64_t v28 = (char *)&v22[v24 / 4] + v27 - *(int *)((char *)&v22[v24 / 4 + 1] + v27);
      if (*((unsigned __int16 *)v28 + 2) >= 5u)
      {
        uint64_t v29 = *((unsigned __int16 *)v28 + 4);
        if (v29) {
          v25 += (*((unsigned __int8 *)&v22[v24 / 4 + 1] + v27 + v29) >> 2) & 1;
        }
      }
      v24 += 4;
    }
    while (v26 != v24);
  }
  else
  {
    unint64_t v25 = 0;
  }
  if (sub_2E2964(v25)) {
    goto LABEL_58;
  }
LABEL_35:
  unsigned int v30 = (unsigned __int16 *)((char *)*a3 - **a3);
  unsigned int v31 = *v30;
  if (*((unsigned char *)a3 + 38))
  {
    if (v31 < 0x29) {
      goto LABEL_50;
    }
    unsigned int v32 = v30[20];
    if (!v32) {
      goto LABEL_50;
    }
LABEL_41:
    uint64_t v33 = (unsigned int *)((char *)*a3 + v32 + *(int *)((char *)*a3 + v32));
    uint64_t v34 = *v33;
    if (v34)
    {
      unint64_t v35 = 0;
      unint64_t v36 = 0;
      uint64_t v37 = 4 * v34;
      do
      {
        uint64_t v38 = v33[v35 / 4 + 1];
        unint64_t v39 = (char *)&v33[v35 / 4] + v38 - *(int *)((char *)&v33[v35 / 4 + 1] + v38);
        if (*((unsigned __int16 *)v39 + 2) >= 5u)
        {
          uint64_t v40 = *((unsigned __int16 *)v39 + 4);
          if (v40) {
            v36 += (*((unsigned __int8 *)&v33[v35 / 4 + 1] + v38 + v40) >> 2) & 1;
          }
        }
        v35 += 4;
      }
      while (v37 != v35);
    }
    else
    {
      unint64_t v36 = 0;
    }
    if (sub_2E2964(v36)) {
      goto LABEL_58;
    }
    goto LABEL_50;
  }
  if (v31 >= 0x27)
  {
    unsigned int v32 = v30[19];
    if (v32) {
      goto LABEL_41;
    }
  }
LABEL_50:
  if (v11 == v16)
  {
    unint64_t v41 = sub_2E68E8(*(void *)a1, v6);
    unint64_t v42 = sub_2E68E8(*(void *)a1, v7);
    if (v41)
    {
      if (HIDWORD(v41) != -1 && v42 && HIDWORD(v42) != -1 && v41 == v42)
      {
        sub_45D3BC(a1 + 104, v148, (uint64_t)v149);
        if ((uint64_t *)(v150 + 16) != &qword_25586A0) {
          sub_45DD90((void *)(v150 + 16), (char *)qword_25586A0, (char *)qword_25586A8, (qword_25586A8 - qword_25586A0) >> 1);
        }
        return v17;
      }
    }
  }
LABEL_58:
  sub_45D3BC(a1 + 104, v148, (uint64_t)v149);
  uint64_t v43 = v150;
  long double v17 = (uint64_t *)(v150 + 16);
  sub_45C5F0(a2, v7, v150 + 16, 1);
  sub_45B000(a3, (unint64_t *)(a1 + 56));
  uint64_t v45 = *(void *)(v43 + 16);
  uint64_t v44 = *(unsigned char **)(v43 + 24);
  if ((unsigned char *)v45 == v44)
  {
    uint64_t v44 = *(unsigned char **)(v43 + 16);
  }
  else
  {
    long long v46 = *(unsigned __int8 **)(a1 + 64);
    unint64_t v47 = *(unsigned char **)(v43 + 16);
    if (v46 != *(unsigned __int8 **)(a1 + 56))
    {
      unint64_t v47 = *(unsigned char **)(v43 + 16);
      while (1)
      {
        int v48 = *(unsigned __int8 **)(a1 + 56);
        while (*v48 != v47[1])
        {
          if (++v48 == v46)
          {
            int v48 = *(unsigned __int8 **)(a1 + 64);
            break;
          }
        }
        if (v48 == v46) {
          break;
        }
        v47 += 2;
        if (v47 == v44) {
          goto LABEL_129;
        }
      }
    }
    if (v47 != v44)
    {
      int v49 = v47 + 2;
      if (v47 + 2 == v44)
      {
        uint64_t v50 = v47;
      }
      else
      {
        uint64_t v50 = v47;
        do
        {
          uint64_t v51 = v49;
          double v53 = *(unsigned __int8 **)(a1 + 56);
          int v52 = *(unsigned __int8 **)(a1 + 64);
          if (v53 != v52)
          {
            while (*v53 != v47[3])
            {
              if (++v53 == v52)
              {
                double v53 = *(unsigned __int8 **)(a1 + 64);
                break;
              }
            }
          }
          if (v53 != v52)
          {
            *uint64_t v50 = *v51;
            v50[1] = v47[3];
            v50 += 2;
          }
          int v49 = v51 + 2;
          unint64_t v47 = v51;
        }
        while (v51 + 2 != v44);
        uint64_t v45 = *(void *)(v43 + 16);
        uint64_t v44 = *(unsigned char **)(v43 + 24);
      }
      if (v50 != v44)
      {
        unint64_t v54 = (unint64_t)&v50[-v45];
        long long v55 = (_OWORD *)(v45 + ((unint64_t)&v50[-v45] & 0xFFFFFFFFFFFFFFFELL));
        uint64_t v56 = v44 - v50;
        uint64_t v57 = (char *)v55 + v56;
        if ((char *)v55 + v56 == v44)
        {
LABEL_128:
          *(void *)(v43 + 24) = v55;
          uint64_t v44 = v55;
          goto LABEL_129;
        }
        unint64_t v58 = v54 & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v59 = (unint64_t)&v44[-(v54 & 0xFFFFFFFFFFFFFFFELL) - v45 - v56 - 2];
        if (v59 >= 0x5E)
        {
          unint64_t v61 = v58 + (v59 & 0xFFFFFFFFFFFFFFFELL);
          unint64_t v62 = v45 + (v61 | 1);
          unint64_t v63 = v45 + (v54 | 1);
          unint64_t v64 = v61 + v45 + 2;
          unint64_t v65 = v56 + v58 + v45;
          unint64_t v66 = v65 + (v59 & 0xFFFFFFFFFFFFFFFELL);
          unint64_t v67 = v66 + 1;
          unint64_t v68 = v65 + 1;
          unint64_t v69 = v66 + 2;
          BOOL v71 = (unint64_t)v55 < v66 + 1 && (unint64_t)v57 < v62;
          BOOL v73 = (unint64_t)v55 < v69 && v68 < v62;
          BOOL v75 = v63 < v67 && (unint64_t)v57 < v64;
          BOOL v77 = v63 < v69 && v68 < v64;
          if (v63 >= v62 || (unint64_t)v55 >= v64)
          {
            if (v71)
            {
              uint64_t v60 = v55;
            }
            else if (v73)
            {
              uint64_t v60 = v55;
            }
            else if (v75)
            {
              uint64_t v60 = v55;
            }
            else if (v77)
            {
              uint64_t v60 = v55;
            }
            else
            {
              uint64_t v79 = v56 >> 1;
              uint64_t v80 = (v59 >> 1) + 1;
              unint64_t v81 = 2 * (v80 & 0xFFFFFFFFFFFFFFE0);
              uint64_t v60 = (char *)v55 + v81;
              v57 += v81;
              uint64_t v82 = 2 * v79;
              unint64_t v83 = v80 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v84 = *(_OWORD *)((char *)v55 + v82 + 16);
                long long v86 = *(_OWORD *)((char *)v55 + v82 + 32);
                long long v85 = *(_OWORD *)((char *)v55 + v82 + 48);
                _OWORD *v55 = *(_OWORD *)((char *)v55 + v82);
                v55[1] = v84;
                v55[2] = v86;
                v55[3] = v85;
                v55 += 4;
                v83 -= 32;
              }
              while (v83);
              if (v80 == (v80 & 0xFFFFFFFFFFFFFFE0)) {
                goto LABEL_127;
              }
            }
          }
          else
          {
            uint64_t v60 = v55;
          }
        }
        else
        {
          uint64_t v60 = v55;
        }
        do
        {
          *uint64_t v60 = *v57;
          v60[1] = v57[1];
          v60 += 2;
          v57 += 2;
        }
        while (v57 != v44);
LABEL_127:
        uint64_t v45 = *v17;
        long long v55 = v60;
        goto LABEL_128;
      }
    }
  }
LABEL_129:
  uint64_t v87 = (uint64_t)&v44[-v45];
  int v88 = sub_2E35CC(a2);
  uint64_t v89 = *(unsigned __int8 **)(v43 + 16);
  BOOL v90 = *(unsigned __int8 **)(v43 + 24);
  if (v88 == v87 >> 1)
  {
    uint64_t v91 = v90 - v89;
    int v92 = sub_2E35CC(a3);
    uint64_t v89 = *(unsigned __int8 **)(v43 + 16);
    BOOL v90 = *(unsigned __int8 **)(v43 + 24);
    if (v92 == v91 >> 1)
    {
      if (v89 == v90)
      {
LABEL_135:
        *(void *)(v43 + 24) = v89;
        return v17;
      }
      uint64_t v93 = *(unsigned __int8 **)(v43 + 16);
      while (v93[1] == *v93)
      {
        v93 += 2;
        if (v93 == v90) {
          goto LABEL_135;
        }
      }
    }
  }
  if (v89 != v90) {
    return v17;
  }
  *(void *)(v43 + 24) = v90;
  uint64_t v94 = (void *)(a1 + 32);
  sub_45B000(a2, (unint64_t *)(a1 + 32));
  unint64_t v96 = *(unsigned char **)(a1 + 32);
  unint64_t v95 = *(unsigned char **)(a1 + 40);
  uint64_t v98 = *(unsigned char **)(a1 + 56);
  uint64_t v97 = *(unsigned char **)(a1 + 64);
  BOOL v99 = v98 == v97;
  BOOL v100 = v96 == v95;
  if (v96 == v95)
  {
    unint64_t v102 = *(void *)(a1 + 48);
    if ((unint64_t)v96 >= v102)
    {
      unint64_t v104 = v102 - (void)v96;
      uint64_t v105 = 2 * v104;
      if (2 * v104 <= 1) {
        uint64_t v105 = 1;
      }
      if (v104 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v106 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v106 = v105;
      }
      uint64_t v107 = operator new(v106);
      long long v108 = &v107[v106];
      unsigned char *v107 = 0;
      uint64_t v103 = v107 + 1;
      *(void *)(a1 + 32) = v107;
      *(void *)(a1 + 40) = v107 + 1;
      *(void *)(a1 + 48) = v108;
      if (v96)
      {
        operator delete(v96);
        uint64_t v97 = *(unsigned char **)(a1 + 64);
      }
    }
    else
    {
      unsigned char *v96 = 0;
      uint64_t v103 = v96 + 1;
    }
    *(void *)(a1 + 40) = v103;
    uint64_t v98 = *(unsigned char **)(a1 + 56);
    int v101 = v100 ^ v99;
    if (v98 != v97)
    {
LABEL_139:
      if (!v101) {
        goto LABEL_176;
      }
      goto LABEL_161;
    }
  }
  else
  {
    int v101 = v100 ^ v99;
    if (v98 != v97) {
      goto LABEL_139;
    }
  }
  unint64_t v109 = *(void *)(a1 + 72);
  if ((unint64_t)v98 >= v109)
  {
    unint64_t v111 = v109 - (void)v98;
    uint64_t v112 = 2 * v111;
    if (2 * v111 <= 1) {
      uint64_t v112 = 1;
    }
    if (v111 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v113 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v113 = v112;
    }
    uint64_t v114 = operator new(v113);
    *uint64_t v114 = 0;
    int v110 = v114 + 1;
    *(void *)(a1 + 56) = v114;
    *(void *)(a1 + 64) = v114 + 1;
    *(void *)(a1 + 72) = &v114[v113];
    if (v98) {
      operator delete(v98);
    }
  }
  else
  {
    *uint64_t v98 = 0;
    int v110 = v98 + 1;
  }
  *(void *)(a1 + 64) = v110;
  if (!v101)
  {
LABEL_176:
    long long v127 = *a2;
    long long v128 = (unsigned __int16 *)((char *)*a2 - **a2);
    unsigned int v129 = *v128;
    if (*((unsigned char *)a2 + 38))
    {
      long long v130 = (void *)(a1 + 56);
      if (v129 < 0x49 || (unsigned int v131 = v128[36]) == 0)
      {
LABEL_183:
        __int16 v132 = -1;
LABEL_184:
        long long v133 = (unsigned __int16 *)((char *)*a3 - **a3);
        unsigned int v134 = *v133;
        if (*((unsigned char *)a3 + 38))
        {
          if (v134 < 0x4B || (unsigned int v135 = v133[37]) == 0)
          {
LABEL_191:
            int v136 = 0xFFFF;
LABEL_192:
            unsigned __int16 v137 = v132 + 18000;
            unsigned __int16 v138 = v132 - 18000;
            if ((unsigned __int16)(v137 >> 5) < 0x465u) {
              unsigned __int16 v138 = v137;
            }
            int v139 = v136 - v138;
            if (v139 > 18000) {
              v139 -= 36000;
            }
            if (v139 < -17999) {
              v139 += 36000;
            }
            double v140 = (double)v139 / 100.0;
            if (v129 >= 0xB && (uint64_t v141 = v128[5]) != 0 && (*((unsigned char *)v127 + v141 + 1) & 0x80) != 0)
            {
              BOOL v142 = v140 > *(double *)(a1 + 888);
              if (fabs(v140) < *(double *)(a1 + 880))
              {
LABEL_202:
                uint64_t v143 = *(void *)(a1 + 56);
                if ((unint64_t)(*(void *)(a1 + 64) - v143) >= *(void *)(a1 + 40) - *(void *)(a1 + 32)) {
                  uint64_t v144 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
                }
                else {
                  uint64_t v144 = *(void *)(a1 + 64) - v143;
                }
                if (!v144) {
                  return v17;
                }
LABEL_209:
                if (v142)
                {
                  for (uint64_t i = 0; i != v144; ++i)
                    sub_45C934((uint64_t)v17, (unsigned char *)(*v94 + i), (unsigned char *)(*v130 + i));
                }
                else
                {
                  uint64_t v146 = -1;
                  do
                  {
                    sub_45C934((uint64_t)v17, (unsigned char *)(*(void *)(a1 + 40) + v146), (unsigned char *)(*(void *)(a1 + 64) + v146));
                    --v146;
                  }
                  while (v144 + v146 != -1);
                }
                return v17;
              }
            }
            else
            {
              BOOL v142 = v140 < *(double *)(a1 + 888);
              if (fabs(v140) < *(double *)(a1 + 880)) {
                goto LABEL_202;
              }
            }
            uint64_t v144 = 1;
            goto LABEL_209;
          }
        }
        else
        {
          if (v134 < 0x49) {
            goto LABEL_191;
          }
          unsigned int v135 = v133[36];
          if (!v135) {
            goto LABEL_191;
          }
        }
        int v136 = *(unsigned __int16 *)((char *)*a3 + v135);
        goto LABEL_192;
      }
    }
    else
    {
      long long v130 = (void *)(a1 + 56);
      if (v129 < 0x4B) {
        goto LABEL_183;
      }
      unsigned int v131 = v128[37];
      if (!v128[37]) {
        goto LABEL_183;
      }
    }
    __int16 v132 = *(_WORD *)((char *)v127 + v131);
    goto LABEL_184;
  }
LABEL_161:
  uint64_t v115 = *(void *)a1;
  unsigned __int16 v116 = (unsigned int *)sub_2E4738(a2);
  sub_2D5904(v115, v116, 0, (char **)(a1 + 80));
  double v117 = *(void **)(a1 + 80);
  double v118 = *(void **)(a1 + 88);
  if (v117 != v118)
  {
    uint64_t v119 = 0;
    do
    {
      long long v120 = (int *)sub_2D5D58(*(void *)a1, *v117 & 0xFFFFFFFFFFFFLL);
      uint64_t v121 = (unsigned __int16 *)((char *)v120 - *v120);
      if (*v121 >= 0xBu)
      {
        uint64_t v122 = v121[5];
        if (v122)
        {
          if ((*(int *)((char *)v120 + v122) & 3) != 0) {
            ++v119;
          }
        }
      }
      ++v117;
    }
    while (v117 != v118);
    if (v119 > 2) {
      goto LABEL_176;
    }
  }
  uint64_t v123 = *(unsigned char **)(a1 + 32);
  long long v124 = *(unsigned char **)(a1 + 40);
  if (v123 != v124 && *(void *)(a1 + 56) != *(void *)(a1 + 64))
  {
    do
    {
      uint64_t v125 = *(unsigned char **)(a1 + 56);
      for (unint64_t j = *(unsigned char **)(a1 + 64); v125 != j; ++v125)
        sub_45C934((uint64_t)v17, v123, v125);
      ++v123;
    }
    while (v123 != v124);
  }
  return v17;
}

void sub_45B000(int **a1, unint64_t *a2)
{
  unint64_t v3 = (unsigned char *)*a2;
  a2[1] = *a2;
  unint64_t v4 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v5 = *v4;
  if (*((unsigned char *)a1 + 38))
  {
    if (v5 < 0x29) {
      return;
    }
    unsigned int v6 = v4[20];
    if (!v6) {
      return;
    }
    goto LABEL_7;
  }
  if (v5 >= 0x27)
  {
    unsigned int v6 = v4[19];
    if (v6)
    {
LABEL_7:
      uint64_t v7 = (unsigned int *)((char *)*a1 + v6);
      uint64_t v8 = *v7;
      unsigned int v10 = (unsigned int *)((char *)v7 + v8 + 4);
      uint64_t v9 = *(unsigned int *)((char *)v7 + v8);
      if (!v9) {
        return;
      }
      char v11 = 0;
      double v12 = &v10[v9];
      while (1)
      {
        unsigned int v14 = (int *)((char *)v10 + *v10);
        unsigned int v15 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v15 >= 5u)
        {
          uint64_t v16 = v15[2];
          if (v16)
          {
            if ((*((unsigned char *)v14 + v16) & 4) != 0) {
              goto LABEL_11;
            }
          }
        }
        unint64_t v17 = a2[2];
        if ((unint64_t)v3 >= v17) {
          break;
        }
        *unint64_t v3 = v11;
        uint64_t v13 = (uint64_t)(v3 + 1);
LABEL_10:
        a2[1] = v13;
        unint64_t v3 = (unsigned char *)v13;
LABEL_11:
        ++v11;
        if (++v10 == v12) {
          return;
        }
      }
      unint64_t v18 = *a2;
      unint64_t v19 = (unint64_t)&v3[-*a2];
      unint64_t v20 = v19 + 1;
      if ((uint64_t)(v19 + 1) < 0) {
        sub_2E00();
      }
      unint64_t v21 = v17 - v18;
      if (2 * v21 > v20) {
        unint64_t v20 = 2 * v21;
      }
      if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v22 = v20;
      }
      if (v22)
      {
        uint64_t v23 = operator new(v22);
        unint64_t v24 = (char *)v23 + v19;
        *((unsigned char *)v23 + v19) = v11;
        uint64_t v13 = (uint64_t)v23 + v19 + 1;
        if (v3 == (unsigned char *)v18)
        {
LABEL_34:
          *a2 = (unint64_t)v24;
          a2[1] = v13;
          a2[2] = (unint64_t)v23 + v22;
          if (v3) {
            operator delete(v3);
          }
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v23 = 0;
        unint64_t v24 = &v3[-*a2];
        *(unsigned char *)unint64_t v19 = v11;
        uint64_t v13 = v19 + 1;
        if (v3 == (unsigned char *)v18) {
          goto LABEL_34;
        }
      }
      if (v19 < 8
        || (char *)v23 + v19 + v18 - (void)v3 > (char *)v23 + v19 - 1
        || v18 > (unint64_t)(v3 - 1)
        || v18 - (unint64_t)v23 < 0x20)
      {
        unint64_t v25 = v3;
        goto LABEL_31;
      }
      if (v19 >= 0x20)
      {
        unint64_t v28 = v19 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v29 = (char *)v23 + v19 - 16;
        unsigned int v30 = (long long *)(v3 - 16);
        unint64_t v31 = v19 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v32 = *v30;
          *(v29 - 1) = *(v30 - 1);
          *uint64_t v29 = v32;
          v29 -= 2;
          v30 -= 2;
          v31 -= 32;
        }
        while (v31);
        if (v19 == v28) {
          goto LABEL_33;
        }
        if ((v19 & 0x18) == 0)
        {
          v24 -= v28;
          unint64_t v25 = &v3[-v28];
LABEL_31:
          uint64_t v26 = v24 - 1;
          do
          {
            char v27 = *--v25;
            *v26-- = v27;
          }
          while (v25 != (unsigned char *)v18);
LABEL_33:
          unint64_t v3 = (unsigned char *)*a2;
          unint64_t v24 = (char *)v23;
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v28 = 0;
      }
      unint64_t v25 = &v3[-(v19 & 0xFFFFFFFFFFFFFFF8)];
      v24 -= v19 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v33 = &v3[-v28 - v18 - 8 + (void)v23];
      uint64_t v34 = (uint64_t *)&v3[-v28 - 8];
      unint64_t v35 = v28 - (v19 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v36 = *v34--;
        *v33-- = v36;
        v35 += 8;
      }
      while (v35);
      if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_33;
      }
      goto LABEL_31;
    }
  }
}

char *sub_45B284@<X0>(uint64_t a1@<X1>, unsigned __int8 **a2@<X2>, uint64_t *a3@<X3>, unsigned __int8 **a4@<X4>, void *a5@<X8>)
{
  unsigned int v10 = a2[1];
  uint64_t v11 = *(v10 - 1) + 1;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  double result = (char *)operator new(40 * v11);
  uint64_t v13 = &result[40 * v11];
  *a5 = result;
  a5[2] = v13;
  unsigned int v14 = result;
  do
  {
    *(_DWORD *)unsigned int v14 = -1;
    *((void *)v14 + 1) = 0x7FFFFFFFFFFFFFFFLL;
    *((_DWORD *)v14 + 4) = 0x7FFFFFFF;
    *((void *)v14 + 3) = 0;
    *((_DWORD *)v14 + 8) = 0;
    v14 += 40;
  }
  while (v14 != v13);
  a5[1] = v13;
  unsigned int v15 = *a4;
  uint64_t v16 = a4[1];
  if (*a4 != v16)
  {
    uint64_t v17 = *a3;
    do
    {
      int v21 = v15[1];
      size_t v22 = &result[40 * v15[1]];
      unsigned int v23 = *v15;
      unint64_t v24 = (unsigned int *)(v17 + 40 * *v15);
      uint64_t v25 = *((void *)v22 + 1);
      if (v25 == 0x7FFFFFFFFFFFFFFFLL)
      {
        unsigned int v18 = *v24;
      }
      else
      {
        uint64_t v26 = *(void *)(v17 + 40 * *v15 + 8);
        if (v26 == 0x7FFFFFFFFFFFFFFFLL) {
          goto LABEL_7;
        }
        unsigned int v18 = *v24;
        if (v18 == *(_DWORD *)v22)
        {
          if (v26 <= v25) {
            goto LABEL_7;
          }
        }
        else if (v18 >= *(_DWORD *)v22)
        {
          goto LABEL_7;
        }
      }
      *(_DWORD *)size_t v22 = v18;
      uint64_t v19 = v17 + 40 * v23;
      *((void *)v22 + 1) = *(void *)(v19 + 8);
      unint64_t v20 = &result[40 * v21];
      *((_DWORD *)v20 + 4) = *(_DWORD *)(v19 + 16);
      *((void *)v20 + 3) = *(void *)(v19 + 24);
      *((_DWORD *)v20 + 8) = *(_DWORD *)(v19 + 32);
LABEL_7:
      v15 += 2;
    }
    while (v15 != v16);
  }
  if (v11)
  {
    int v27 = 0;
    unint64_t v28 = *a2;
    do
    {
      uint64_t v29 = v27;
      unsigned int v30 = &result[40 * v27];
      if (*((void *)v30 + 1) != 0x7FFFFFFFFFFFFFFFLL)
      {
        if (v11 <= v29) {
          int v31 = v29;
        }
        else {
          int v31 = v11;
        }
        if (v29 < v11)
        {
          int v32 = 0;
          for (unsigned __int8 i = v29; v31 != i; ++i)
          {
            unint64_t v35 = v28;
            if (v28 != v10)
            {
              do
              {
                if (*v35 == i) {
                  goto LABEL_32;
                }
                ++v35;
              }
              while (v35 != v10);
              unint64_t v35 = v10;
            }
LABEL_32:
            if (v35 != v10)
            {
              if (v29 != i)
              {
                unsigned int v36 = *(_DWORD *)v30 + v32;
                uint64_t v37 = &result[40 * i];
                uint64_t v38 = *((void *)v37 + 1);
                if (v38 != 0x7FFFFFFFFFFFFFFFLL)
                {
                  if (v36 == *(_DWORD *)v37)
                  {
                    if ((v38 & 0x8000000000000000) == 0) {
                      break;
                    }
                  }
                  else if (v36 >= *(_DWORD *)v37)
                  {
                    break;
                  }
                }
                *(_DWORD *)uint64_t v37 = v36;
                *((void *)v37 + 1) = 0;
                uint64_t v34 = &result[40 * i];
                *((_DWORD *)v34 + 4) = 0;
                *((void *)v34 + 3) = a1;
                *((_DWORD *)v34 + 8) = v32;
              }
              ++v32;
            }
          }
        }
        int v39 = 0;
        if ((int)v29 >= -1) {
          int v40 = -1;
        }
        else {
          int v40 = v29;
        }
        for (uint64_t j = v29; v40 != j; --j)
        {
          uint64_t v43 = v28;
          if (v28 != v10)
          {
            while (*v43 != j)
            {
              if (++v43 == v10)
              {
                uint64_t v43 = v10;
                break;
              }
            }
          }
          if (v43 != v10)
          {
            if (j != v29)
            {
              unsigned int v44 = *(_DWORD *)v30 + v39;
              uint64_t v45 = &result[40 * j];
              uint64_t v46 = *((void *)v45 + 1);
              if (v46 != 0x7FFFFFFFFFFFFFFFLL)
              {
                if (v44 == *(_DWORD *)v45)
                {
                  if ((v46 & 0x8000000000000000) == 0) {
                    break;
                  }
                }
                else if (v44 >= *(_DWORD *)v45)
                {
                  break;
                }
              }
              *(_DWORD *)uint64_t v45 = v44;
              *((void *)v45 + 1) = 0;
              unint64_t v42 = &result[40 * j];
              *((_DWORD *)v42 + 4) = 0;
              *((void *)v42 + 3) = a1;
              *((_DWORD *)v42 + 8) = v39;
            }
            ++v39;
          }
        }
      }
      int v27 = v29 + 1;
    }
    while (v29 + 1 != v11);
  }
  return result;
}

void sub_45B574(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 872)) {
    goto LABEL_3;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 24);
  if (v6 - v5 == 1) {
    goto LABEL_3;
  }
  uint64_t v8 = sub_45E284(*(void **)a2, v5, *(void **)(a2 + 16), v6);
  uint64_t v9 = v8;
  unint64_t v11 = v10;
  uint64_t v13 = *(void **)(a2 + 16);
  unint64_t v12 = *(void *)(a2 + 24);
  uint64_t v76 = a3;
  if (!v8)
  {
    if (!v13 || v12 >= sub_46C760(v13)) {
      goto LABEL_3;
    }
    goto LABEL_17;
  }
  unint64_t v14 = sub_46C760(v8);
  unint64_t v15 = v14;
  if (!v13)
  {
    if (v11 < v14) {
      goto LABEL_17;
    }
LABEL_3:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  unint64_t v16 = sub_46C760(v13);
  if (v11 >= v15 || v12 >= v16)
  {
    if (v11 < v15 != v12 < v16) {
      goto LABEL_17;
    }
    goto LABEL_3;
  }
  uint64_t v17 = sub_46C8EC(v9, v11);
  if (v17 == sub_46C8EC(v13, v12)) {
    goto LABEL_3;
  }
LABEL_17:
  v81[0] = 0;
  v81[1] = 0;
  uint64_t v82 = 0;
  unsigned int v18 = (int **)sub_46C8EC(v9, v11);
  uint64_t v19 = (unsigned __int16 *)((char *)*v18 - **v18);
  unsigned int v20 = *v19;
  if (!*((unsigned char *)v18 + 38))
  {
    if (v20 < 0x27) {
      goto LABEL_26;
    }
    unsigned int v21 = v19[19];
    if (!v21) {
      goto LABEL_26;
    }
LABEL_23:
    unsigned int v22 = *(int *)((char *)*v18 + v21 + *(int *)((char *)*v18 + v21));
    if (v22 <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = v22;
    }
    goto LABEL_27;
  }
  if (v20 >= 0x29)
  {
    unsigned int v21 = v19[20];
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_26:
  uint64_t v23 = 1;
LABEL_27:
  uint64_t v79 = operator new(40 * v23);
  *((void *)&v80 + 1) = (char *)v79 + 40 * v23;
  bzero(v79, 40 * ((40 * v23 - 40) / 0x28uLL) + 40);
  int v73 = 0;
  *(void *)&long long v80 = *((void *)&v80 + 1);
  long long v72 = (unint64_t *)(a1 + 56);
LABEL_28:
  unint64_t v24 = v79;
LABEL_29:
  unint64_t v25 = v11;
  long long __p = v24;
LABEL_30:
  unint64_t v26 = v25;
  int v27 = (void *)v80;
  uint64_t v74 = v25;
  while (1)
  {
    unint64_t v11 = v26 + 1;
    unint64_t v28 = *(void **)(a2 + 16);
    unint64_t v29 = *(void *)(a2 + 24);
    if (v9)
    {
      unint64_t v30 = sub_46C760(v9);
      BOOL v31 = v11 < v30;
      if (!v28)
      {
        if (v11 >= v30) {
          goto LABEL_115;
        }
        goto LABEL_44;
      }
    }
    else
    {
      if (!v28) {
        goto LABEL_115;
      }
      BOOL v31 = 0;
    }
    unint64_t v32 = sub_46C760(v28);
    if (v29 >= v32 || !v31) {
      break;
    }
    uint64_t v34 = sub_46C8EC(v9, v26 + 1);
    if (v34 == sub_46C8EC(v28, v29)) {
      goto LABEL_115;
    }
LABEL_44:
    unint64_t v35 = (int **)sub_46C8EC(v9, v26 + 1);
    unsigned int v36 = v35;
    uint64_t v37 = v76;
    if (*(unsigned char *)(a1 + 873))
    {
      uint64_t v38 = (unsigned __int16 *)((char *)*v35 - **v35);
      if (*v38 < 0xBu) {
        goto LABEL_116;
      }
      uint64_t v39 = v38[5];
      if (!v39 || (*((unsigned char *)*v35 + v39 + 3) & 2) == 0) {
        goto LABEL_116;
      }
    }
    uint64_t v40 = sub_46C8EC(v9, v26);
    uint64_t v42 = sub_46CCC8(v9, v26, v41);
    double v43 = sub_45A4DC(*(void *)(a1 + 8), v40);
    if ((*(uint64_t *)&v43 <= -1 || ((*(void *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
      && (unint64_t)(*(void *)&v43 - 1) >= 0xFFFFFFFFFFFFFLL
      && (*(void *)&v43 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    {
      double v43 = *(double *)(a1 + 896);
    }
    double v47 = (double)v42 / 100.0 * 10.0 / (v43 / 3.6);
    if (v47 >= 0.0)
    {
      if (v47 < 4.50359963e15)
      {
        uint64_t v48 = (uint64_t)(v47 + v47) + 1;
LABEL_66:
        double v47 = (double)(v48 >> 1);
      }
    }
    else if (v47 > -4.50359963e15)
    {
      uint64_t v48 = (uint64_t)(v47 + v47);
      if (v48 >= 1) {
        --v48;
      }
      goto LABEL_66;
    }
    if (__p != v27)
    {
      int v49 = __p;
      do
      {
        uint64_t v50 = v49[1];
        if (v50 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v49[1] = v50 + v42;
          *((_DWORD *)v49 + 4) += (int)v47;
        }
        v49 += 5;
      }
      while (v49 != v27);
    }
    uint64_t v51 = *v36;
    int v52 = (unsigned __int16 *)((char *)*v36 - **v36);
    unsigned int v53 = *v52;
    if (v53 >= 0xB)
    {
      if (v52[5])
      {
        unint64_t v26 = v11;
        if ((*((unsigned char *)v51 + v52[5] + 3) & 4) != 0) {
          continue;
        }
      }
    }
    if (*((unsigned char *)v36 + 38))
    {
      if (v53 >= 0x29)
      {
        unsigned int v54 = v52[20];
        if (v54) {
          goto LABEL_81;
        }
      }
    }
    else if (v53 >= 0x27)
    {
      unsigned int v54 = v52[19];
      if (v54)
      {
LABEL_81:
        if (*(int *)((char *)v51 + v54 + *(int *)((char *)v51 + v54))) {
          goto LABEL_86;
        }
      }
    }
    long long v55 = v36[1];
    if (v55)
    {
      uint64_t v56 = (unsigned __int16 *)((char *)v55 - *v55);
      if (*v56 >= 0x11u)
      {
        uint64_t v57 = v56[8];
        if (v57)
        {
          unint64_t v26 = v11;
          if ((*(_WORD *)((unsigned char *)v55 + v57) & 4) != 0) {
            continue;
          }
        }
      }
    }
LABEL_86:
    unint64_t v58 = (int **)sub_46C8EC(v9, v74);
    unint64_t v59 = sub_45A5C4(a1, v58, v36);
    unint64_t v25 = v11;
    if (*v59 == v59[1]) {
      goto LABEL_30;
    }
    sub_45B000(v36, v72);
    uint64_t v60 = *(unsigned char **)(a1 + 56);
    if (v60 == *(unsigned char **)(a1 + 64))
    {
      unint64_t v61 = *(void *)(a1 + 72);
      if ((unint64_t)v60 >= v61)
      {
        unint64_t v63 = v61 - (void)v60;
        uint64_t v64 = 2 * v63;
        if (2 * v63 <= 1) {
          uint64_t v64 = 1;
        }
        if (v63 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v65 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v65 = v64;
        }
        unint64_t v66 = operator new(v65);
        *unint64_t v66 = 0;
        unint64_t v62 = v66 + 1;
        *(void *)(a1 + 56) = v66;
        *(void *)(a1 + 64) = v66 + 1;
        *(void *)(a1 + 72) = &v66[v65];
        if (v60) {
          operator delete(v60);
        }
      }
      else
      {
        *uint64_t v60 = 0;
        unint64_t v62 = v60 + 1;
      }
      *(void *)(a1 + 64) = v62;
    }
    sub_45B284(v11, (unsigned __int8 **)v72, (uint64_t *)&v79, (unsigned __int8 **)v59, &v77);
    if (__p)
    {
      *(void *)&long long v80 = __p;
      operator delete(__p);
    }
    unint64_t v24 = v77;
    uint64_t v79 = v77;
    long long v80 = v78;
    unint64_t v67 = (int *)v77;
    if (v77 != (char *)v78)
    {
      unint64_t v68 = v77 + 40;
      unint64_t v67 = (int *)v77;
      if (v77 + 40 != (char *)v78)
      {
        unint64_t v67 = (int *)v77;
        do
        {
          uint64_t v69 = *((void *)v67 + 1);
          if (v69 != 0x7FFFFFFFFFFFFFFFLL)
          {
            uint64_t v70 = *((void *)v68 + 1);
            if (v70 == 0x7FFFFFFFFFFFFFFFLL) {
              goto LABEL_104;
            }
            if (*(_DWORD *)v68 == *v67)
            {
              if (v70 <= v69) {
                goto LABEL_104;
              }
            }
            else if (*(_DWORD *)v68 >= *v67)
            {
              goto LABEL_104;
            }
          }
          unint64_t v67 = (int *)v68;
LABEL_104:
          v68 += 40;
        }
        while (v68 != (char *)v78);
      }
    }
    int v71 = *v67;
    if (*v67 != v73 && v67[8])
    {
      BOOL v77 = (char *)v11;
      sub_45E0EC((char **)v81, v67, (uint64_t *)&v77);
      int v73 = v71;
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  if ((v31 ^ (v29 < v32))) {
    goto LABEL_44;
  }
LABEL_115:
  *(_OWORD *)uint64_t v76 = *(_OWORD *)v81;
  v76[2] = v82;
  uint64_t v37 = v81;
LABEL_116:
  char *v37 = 0;
  v37[1] = 0;
  v37[2] = 0;
  if (v79) {
    operator delete(v79);
  }
  if (v81[0])
  {
    v81[1] = v81[0];
    operator delete(v81[0]);
  }
}

void sub_45BBD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v23 = a21;
    if (!a21) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v23 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  operator delete(v23);
  _Unwind_Resume(exception_object);
}

void sub_45BC40(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v6 = (void *)sub_46C8EC(a2, *a3);
  uint64_t v7 = (unsigned __int16 *)(*v6 - *(int *)*v6);
  if (*v7 < 0x2Fu
    || (uint64_t v8 = v7[23]) == 0
    || ((unsigned int v9 = *(unsigned __int8 *)(*v6 + v8), v10 = v9 > 0x1A, v11 = (1 << v9) & 0x4810001, !v10)
      ? (BOOL v12 = v11 == 0)
      : (BOOL v12 = 1),
        v12))
  {
    uint64_t v13 = a1 + 912;
    int v14 = *(_DWORD *)(a1 + 920);
    if (*(double *)(a1 + 928) <= 0.0) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v13 = a1 + 944;
    int v14 = *(_DWORD *)(a1 + 952);
    if (*(double *)(a1 + 960) <= 0.0) {
      goto LABEL_22;
    }
  }
  if (*a3) {
    uint64_t v15 = *a3 - 1;
  }
  else {
    uint64_t v15 = 0;
  }
  if ((int)v15 >= 1)
  {
    while (1)
    {
      unint64_t v16 = (void *)sub_46C8EC(a2, v15);
      uint64_t v17 = (unsigned __int16 *)(*v16 - *(int *)*v16);
      if (*v17 < 0xBu) {
        break;
      }
      uint64_t v18 = v17[5];
      if (!v18 || (*(unsigned char *)(*v16 + v18 + 3) & 4) == 0) {
        break;
      }
      BOOL v10 = v15-- <= 1;
      if (v10)
      {
        int v19 = 0;
        goto LABEL_21;
      }
    }
  }
  int v19 = v15;
LABEL_21:
  uint64_t v20 = *(void *)(a1 + 16);
  uint64_t v21 = sub_46C8EC(a2, v19);
  unint64_t v22 = sub_3A5DDC(v20, *(void *)(v21 + 32));
  int v14 = (int)(round(*(double *)(v13 + 16) * (double)(unsigned __int16)sub_29A160(*(void *)(a1 + 24), v22))
            + (double)v14);
LABEL_22:
  unint64_t v24 = *a3;
  unint64_t v23 = a3[1];
  double v25 = 0.0;
  double v26 = 0.0;
  if (*a3 <= v23) {
    uint64_t v27 = a3[1];
  }
  else {
    uint64_t v27 = *a3;
  }
  if (*a3 < v23)
  {
    do
    {
      unint64_t v28 = (int **)sub_46C8EC(a2, v24);
      unint64_t v30 = (unsigned __int16 *)((char *)*v28 - **v28);
      unsigned int v31 = *v30;
      if (*((unsigned char *)v28 + 38))
      {
        if (v31 >= 0x29)
        {
          unsigned int v32 = v30[20];
          if (v32) {
            goto LABEL_36;
          }
        }
      }
      else if (v31 >= 0x27)
      {
        unsigned int v32 = v30[19];
        if (v32)
        {
LABEL_36:
          unsigned int v33 = *(int *)((char *)*v28 + v32 + *(int *)((char *)*v28 + v32));
          if (v33)
          {
            double v34 = (double)sub_46CCC8(a2, v24, v29);
            double v26 = v26 + (double)v33 * v34;
            unint64_t v35 = sub_3A5DDC(*(void *)(a1 + 16), (uint64_t)v28[4]);
            unsigned __int16 v36 = sub_29A160(*(void *)(a1 + 24), v35);
            double v25 = v25 + pow((double)((v36 - v14) & ~((v36 - v14) >> 31)), *(long double *)v13) * v34;
          }
        }
      }
      ++v24;
    }
    while (v27 != v24);
  }
  if (*(double *)(v13 + 24) != 1.0) {
    sub_45BED4((uint64_t *)a1, a2, a3);
  }
}

uint64_t sub_45BED4(uint64_t *a1, void *a2, void *a3)
{
  char v5 = 0;
  uint64_t v6 = (int)*a3;
  uint64_t v7 = (int)(*a3 & ((int)*a3 >> 31));
  while (1)
  {
    if (v7 == v6) {
      return v5 & 1;
    }
    uint64_t v8 = v6 - 1;
    unsigned int v9 = (void *)sub_46C8EC(a2, v6 - 1);
    BOOL v10 = (unsigned __int16 *)(*v9 - *(int *)*v9);
    if (*v10 < 0xBu || (uint64_t v11 = v10[5]) == 0 || (*(unsigned char *)(*v9 + v11 + 3) & 2) == 0)
    {
      char v5 = 1;
      return v5 & 1;
    }
    uint64_t v12 = *a1;
    uint64_t v13 = sub_46C8EC(a2, v6 - 1);
    char v14 = sub_45E400(v12, *(void *)(v13 + 32), a1[113], 1);
    uint64_t v15 = (int **)sub_46C8EC(a2, v6);
    uint64_t v16 = sub_2E3710(v15, 1, *a1);
    if (v16)
    {
      uint64_t v17 = *(void *)(sub_46C8EC(a2, v8) + 32);
      if (v16 != v17
        || WORD2(v16) != WORD2(v17)
        || ((v16 & 0xFF000000000000) == 0) != ((v17 & 0x1000000000000) == 0))
      {
        break;
      }
    }
    v5 |= v14;
    uint64_t v18 = (void *)sub_46C8EC(a2, v8);
    int v19 = (unsigned __int16 *)(*v18 - *(int *)*v18);
    if (*v19 >= 0xBu)
    {
      uint64_t v20 = v19[5];
      if (v20)
      {
        uint64_t v6 = v8;
        if ((*(_DWORD *)(*v18 + v20) & 0x4000000) != 0) {
          continue;
        }
      }
    }
    return v5 & 1;
  }
  uint64_t v22 = *a1;
  uint64_t v23 = a1[113];

  return sub_45E400(v22, v16, v23, 1);
}

uint64_t sub_45C074(uint64_t a1, void *a2, void *a3)
{
  *(void *)a1 = sub_3750CC(a2);
  *(void *)(a1 + 8) = sub_3766F8(a2);
  *(void *)(a1 + 16) = sub_376B90(a2);
  uint64_t v6 = sub_374D14(a2);
  *(void *)(a1 + 104) = &unk_20E1710;
  *(void *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = &unk_20E1710;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = &unk_20E1710;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = &unk_20E1710;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = &unk_20E1710;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = &unk_20E1710;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = &unk_20E1710;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = &unk_20E1710;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = &unk_20E1710;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 536) = &unk_20E1710;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 584) = &unk_20E1710;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 592) = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 632) = &unk_20E1710;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 680) = &unk_20E1710;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 728) = &unk_20E1710;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 776) = &unk_20E1710;
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 792) = 0;
  *(void *)(a1 + 784) = 0;
  *(void *)(a1 + 800) = 0;
  *(void *)(a1 + 824) = &unk_20E1710;
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 840) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 848) = 0;
  sub_45CAAC(a1 + 872, a3);
  return a1;
}

void sub_45C1F4(_Unwind_Exception *a1)
{
  sub_45C228(v2);
  unint64_t v4 = *(void **)(v1 + 80);
  if (v4)
  {
    *(void *)(v1 + 88) = v4;
    operator delete(v4);
  }
  sub_20A88B0((void **)(v1 + 56), (void **)(v1 + 32), v1);
  _Unwind_Resume(a1);
}

void *sub_45C228(void *a1)
{
  uint64_t v2 = a1 + 96;
  do
  {
    unint64_t v3 = v2 - 6;
    uint64_t v4 = *(v2 - 3);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = v2 - 5;
      do
      {
        if ((*(char *)(*v3 + v6) & 0x80000000) == 0)
        {
          uint64_t v8 = *v7 + v5;
          unsigned int v9 = *(void **)(v8 + 16);
          if (v9)
          {
            *(void *)(v8 + 24) = v9;
            operator delete(v9);
            uint64_t v4 = *(v2 - 3);
          }
        }
        ++v6;
        v5 += 40;
      }
      while (v6 != v4);
      operator delete((void *)*(v2 - 6));
      *(v2 - 6) = &unk_20E1710;
      *(v2 - 1) = 0;
      *(v2 - 4) = 0;
      *(v2 - 3) = 0;
      *uint64_t v7 = 0;
    }
    v2 -= 6;
  }
  while (v3 != a1);
  return a1;
}

void sub_45C2F4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (void *)nullsub_1(a2);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  sub_2A6D40(a3, 0xF83E0F83E0F83E1 * ((uint64_t)(v5[1] - *v5) >> 5));
  uint64_t v6 = (void *)*v5;
  uint64_t v7 = (void *)v5[1];
  if ((void *)*v5 != v7)
  {
    uint64_t v8 = *(void *)(a3 + 8);
    do
    {
      sub_46C77C(v6, v11);
      sub_45B574(a1, (uint64_t)v11, (void **)&__p);
      unsigned int v9 = sub_45CF48((char **)a3, v8, &__p);
      if (__p.n128_u64[0])
      {
        __p.n128_u64[1] = __p.n128_u64[0];
        operator delete((void *)__p.n128_u64[0]);
      }
      uint64_t v8 = (uint64_t)(v9 + 24);
      v6 += 132;
    }
    while (v6 != v7);
  }
}

void sub_45C3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = (char *)*v11;
  if (*v11)
  {
    char v14 = (char *)v11[1];
    uint64_t v15 = *v11;
    if (v14 != v13)
    {
      uint64_t v16 = (char *)v11[1];
      do
      {
        uint64_t v18 = (void *)*((void *)v16 - 3);
        v16 -= 24;
        uint64_t v17 = v18;
        if (v18)
        {
          *((void *)v14 - 2) = v17;
          operator delete(v17);
        }
        char v14 = v16;
      }
      while (v16 != v13);
      uint64_t v15 = *v11;
    }
    v11[1] = v13;
    operator delete(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_45C460@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t **a3@<X8>)
{
  unint64_t v5 = a2[1];
  unint64_t v6 = (*a2 >> 16) & 0xFFFF0000 | (*a2 << 32);
  unint64_t v7 = 0x2127599BF4325C37 * ((v6 | ((*a2 & 0xFF000000000000) == 0)) ^ (v6 >> 23));
  unint64_t v8 = (0x2127599BF4325C37
      * (((v5 >> 16) & 0xFFFF0000 | (v5 << 32) | ((v5 & 0xFF000000000000) == 0)) ^ (((v5 >> 16) & 0xFFFF0000 | (v5 << 32)) >> 23))) ^ ((0x2127599BF4325C37 * (((v5 >> 16) & 0xFFFF0000 | (v5 << 32) | ((v5 & 0xFF000000000000) == 0)) ^ (((v5 >> 16) & 0xFFFF0000 | (v5 << 32)) >> 23))) >> 47);
  unint64_t v9 = 0x2BC6D2A9D6CE166BLL
     * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v8) ^ ((0xC6A4A7935BD1E995 * v8) >> 47))) ^ (v7 >> 47) ^ v7)
     + 0x1CCA8C862B949BLL;
  unint64_t v10 = 21 * ((265 * (v9 ^ (v9 >> 24))) ^ ((265 * (v9 ^ (v9 >> 24))) >> 14));
  uint64_t v11 = (uint64_t *)(a1
                  + 48
                  * (((((unsigned __int16)(v10 ^ (v10 >> 28)) >> 8) ^ ((-2147483647
                                                                                       * (v10 ^ (v10 >> 28))) >> 16)) ^ ((-2147483647 * (v10 ^ (v10 >> 28))) >> 24)) & 0xF));
  unint64_t v16 = 0;
  uint64_t result = sub_45D2AC(v11, a2, 2147483649u * (v10 ^ (v10 >> 28)), &v16);
  if (!result
    || (uint64_t v13 = (uint64_t *)(*v11 + v16), v14 = v11[1] + 40 * v16, v15 = *v11 + v11[3], (uint64_t *)v15 == v13))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[4] = 0;
  }
  else
  {
    *a3 = v11;
    a3[1] = (uint64_t *)(a1 + 768);
    a3[2] = v13;
    a3[3] = (uint64_t *)v14;
    a3[4] = (uint64_t *)v15;
  }
  return result;
}

void sub_45C5F0(int **a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v5 = *(unsigned char **)a3;
  *(void *)(a3 + 8) = *(void *)a3;
  unint64_t v6 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v7 = *v6;
  if (*((unsigned char *)a1 + 38))
  {
    if (v7 < 0x29) {
      return;
    }
    unsigned int v8 = v6[20];
    if (!v8) {
      return;
    }
    goto LABEL_7;
  }
  if (v7 >= 0x27)
  {
    unsigned int v8 = v6[19];
    if (v8)
    {
LABEL_7:
      unint64_t v9 = (unsigned int *)((char *)*a1 + v8);
      uint64_t v10 = *v9;
      uint64_t v12 = (unsigned int *)((char *)v9 + v10 + 4);
      uint64_t v11 = *(unsigned int *)((char *)v9 + v10);
      if (!v11) {
        return;
      }
      char v61 = 0;
      uint64_t v58 = a2 & 0xFF000000000000;
      uint64_t v59 = a2 & 0xFFFFFFFFFFFFLL;
      uint64_t v56 = &v12[v11];
      while (1)
      {
        uint64_t v13 = (int *)((char *)v12 + *v12);
        unint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
        uint64_t v57 = v12;
        if (*v14 >= 0xDu)
        {
          uint64_t v15 = v14[6];
          if (v14[6])
          {
            if (!a4 || (uint64_t v16 = v14[2]) == 0 || (*((unsigned char *)v13 + v16) & 4) == 0)
            {
              uint64_t v17 = (unsigned int *)((char *)v13 + v15);
              uint64_t v18 = *v17;
              uint64_t v20 = (unsigned int *)((char *)v17 + v18 + 4);
              uint64_t v19 = *(unsigned int *)((char *)v17 + v18);
              if (v19) {
                break;
              }
            }
          }
        }
LABEL_9:
        ++v61;
        uint64_t v12 = v57 + 1;
        if (v57 + 1 == v56) {
          return;
        }
      }
      uint64_t v60 = &v20[v19];
      while (1)
      {
        uint64_t v21 = (int *)((char *)v20 + *v20);
        uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
        uint64_t v23 = *(void *)((char *)v21 + v22[2]);
        if (v59 == (v23 & 0xFFFFFFFFFFFFLL))
        {
          int v24 = (v58 == 0) ^ ((v23 & 0xFF000000000000) == 0);
          if (*v22 >= 7u && v24 != 0)
          {
            uint64_t v26 = v22[3];
            if (v26)
            {
              uint64_t v27 = (unsigned int *)((char *)v21 + v26);
              uint64_t v28 = *v27;
              unint64_t v30 = (char *)v27 + v28 + 4;
              uint64_t v29 = *(unsigned int *)((char *)v27 + v28);
              if (v29) {
                break;
              }
            }
          }
        }
LABEL_17:
        if (++v20 == v60) {
          goto LABEL_9;
        }
      }
      unsigned int v31 = &v30[v29];
      while (1)
      {
        char v32 = *v30;
        unint64_t v33 = *(void *)(a3 + 16);
        if ((unint64_t)v5 < v33)
        {
          *unint64_t v5 = v61;
          v5[1] = v32;
          v5 += 2;
        }
        else
        {
          double v34 = *(unsigned char **)a3;
          uint64_t v35 = (uint64_t)&v5[-*(void *)a3];
          if (v35 <= -3) {
            sub_2E00();
          }
          uint64_t v36 = v35 >> 1;
          unint64_t v37 = v33 - (void)v34;
          if (v37 <= (v35 >> 1) + 1) {
            unint64_t v38 = v36 + 1;
          }
          else {
            unint64_t v38 = v37;
          }
          BOOL v39 = v37 >= 0x7FFFFFFFFFFFFFFELL;
          uint64_t v40 = 0x7FFFFFFFFFFFFFFFLL;
          if (!v39) {
            uint64_t v40 = v38;
          }
          if (v40 < 0) {
            sub_188D718();
          }
          uint64_t v41 = 2 * v40;
          uint64_t v42 = operator new(2 * v40);
          double v43 = &v42[2 * v36];
          unsigned char *v43 = v61;
          v43[1] = v32;
          if (v5 != v34)
          {
            unint64_t v44 = v5 - 2 - v34;
            if (v44 < 0x5E
              || (&v42[(v35 & 0xFFFFFFFFFFFFFFFELL) - 2 - (v44 & 0xFFFFFFFFFFFFFFFELL)] <= &v42[(v35 & 0xFFFFFFFFFFFFFFFELL)
                                                                                              - 2]
                ? (BOOL v45 = &v5[-(v44 & 0xFFFFFFFFFFFFFFFELL) - 2] > v5 - 2)
                : (BOOL v45 = 1),
                  v45 || (unint64_t)(&v5[-(v35 & 0xFFFFFFFFFFFFFFFELL)] - v42) < 0x20))
            {
              uint64_t v46 = v5;
              double v47 = &v42[2 * v36];
              goto LABEL_44;
            }
            uint64_t v49 = (v44 >> 1) + 1;
            unint64_t v50 = 2 * (v49 & 0xFFFFFFFFFFFFFFF0);
            uint64_t v46 = &v5[-v50];
            double v47 = &v43[-v50];
            uint64_t v51 = &v42[2 * v36 - 16];
            int v52 = (long long *)(v5 - 16);
            unint64_t v53 = v49 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              long long v54 = *v52;
              *(v51 - 1) = *(v52 - 1);
              _OWORD *v51 = v54;
              v51 -= 2;
              v52 -= 2;
              v53 -= 16;
            }
            while (v53);
            if (v49 != (v49 & 0xFFFFFFFFFFFFFFF0))
            {
              do
              {
LABEL_44:
                __int16 v48 = *((_WORD *)v46 - 1);
                v46 -= 2;
                *((_WORD *)v47 - 1) = v48;
                v47 -= 2;
              }
              while (v46 != v34);
            }
            unint64_t v5 = v43 + 2;
            *(void *)a3 = v47;
            *(void *)(a3 + 8) = v43 + 2;
            *(void *)(a3 + 16) = &v42[v41];
            if (!v34) {
              goto LABEL_27;
            }
LABEL_48:
            operator delete(v34);
            goto LABEL_27;
          }
          unint64_t v5 = v43 + 2;
          *(void *)a3 = v43;
          *(void *)(a3 + 8) = v43 + 2;
          *(void *)(a3 + 16) = &v42[v41];
          if (v34) {
            goto LABEL_48;
          }
        }
LABEL_27:
        *(void *)(a3 + 8) = v5;
        if (++v30 == v31) {
          goto LABEL_17;
        }
      }
    }
  }
}

unsigned char *sub_45C934(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  unsigned int v7 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  unsigned int v8 = v7;
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = *(unsigned char **)a1;
    uint64_t v11 = (uint64_t)&v7[-*(void *)a1];
    if (v11 <= -3) {
      sub_2E00();
    }
    uint64_t v12 = v11 >> 1;
    unint64_t v13 = v6 - (void)v10;
    if (v13 <= (v11 >> 1) + 1) {
      unint64_t v14 = v12 + 1;
    }
    else {
      unint64_t v14 = v13;
    }
    BOOL v15 = v13 >= 0x7FFFFFFFFFFFFFFELL;
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v15) {
      uint64_t v16 = v14;
    }
    if (v16 < 0) {
      sub_188D718();
    }
    uint64_t v17 = 2 * v16;
    uint64_t v18 = operator new(2 * v16);
    uint64_t v19 = &v18[2 * v12];
    unsigned char *v19 = *a2;
    v19[1] = *a3;
    unint64_t v9 = v19 + 2;
    if (v7 != v10)
    {
      unint64_t v20 = v7 - v10 - 2;
      if (v20 < 0x1E) {
        goto LABEL_24;
      }
      if ((unint64_t)(&v7[-(v11 & 0xFFFFFFFFFFFFFFFELL)] - v18) < 0x20) {
        goto LABEL_24;
      }
      uint64_t v21 = (v20 >> 1) + 1;
      unint64_t v22 = 2 * (v21 & 0xFFFFFFFFFFFFFFF0);
      unsigned int v8 = &v7[-v22];
      v19 -= v22;
      uint64_t v23 = &v18[2 * v12 - 16];
      int v24 = (long long *)(v7 - 16);
      unint64_t v25 = v21 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        _OWORD *v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 16;
      }
      while (v25);
      if (v21 != (v21 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_24:
        do
        {
          __int16 v27 = *((_WORD *)v8 - 1);
          v8 -= 2;
          *((_WORD *)v19 - 1) = v27;
          v19 -= 2;
        }
        while (v8 != v10);
      }
    }
    *(void *)a1 = v19;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = &v18[v17];
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *unsigned int v7 = *a2;
    v7[1] = *a3;
    unint64_t v9 = v7 + 2;
  }
  *(void *)(a1 + 8) = v9;
  return v9 - 2;
}

uint64_t sub_45CAAC(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "enable");
  BOOL v4 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)a1 = v4;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "kittyhawk_only");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 1) = v5;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "min_turn_angle");
  double v6 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 8) = v6;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "inner_to_outer_angle");
  double v7 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 16) = v7;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "fallback_speed_kph");
  *(double *)(a1 + 24) = sub_5D138(a2, __p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "traffic_sign_search_radius_m");
  *(void *)(a1 + 32) = 100 * sub_31AC04(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9240;
  strcpy((char *)__p[0], "regular_lane_change_live_observations");
  unsigned int v8 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_45CD9C(a1 + 40, v8);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9240;
  strcpy((char *)__p[0], "freeway_lane_change_live_observations");
  unint64_t v9 = (void *)sub_560F4(a2, (uint64_t)__p);
  sub_45CD9C(a1 + 72, v9);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_45CD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_45CD9C(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "observation_exponent");
  double v4 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)a1 = v4;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "observation_threshold");
  int v5 = sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 8) = v5;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "route_observation_offset_factor");
  double v6 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 16) = v6;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8870;
  strcpy((char *)__p[0], "traffic_controlled_factor");
  double v7 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)(a1 + 24) = v7;
  return a1;
}

void sub_45CF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_45CF48(char **a1, uint64_t a2, __n128 *a3)
{
  double v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 24;
  unsigned int v8 = &(*a1)[24 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v6) >> 3) + 1;
    if (v14 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v6) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x555555555555555) {
      unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v16 = v14;
    }
    unint64_t v38 = a1 + 2;
    if (v16)
    {
      if (v16 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      uint64_t v17 = (char *)operator new(24 * v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    double v34 = v17;
    uint64_t v35 = &v17[24 * v7];
    uint64_t v36 = v35;
    unint64_t v37 = &v17[24 * v16];
    sub_2A7254((uint64_t)&v34, a3);
    uint64_t v18 = v35;
    uint64_t v19 = *a1;
    unint64_t v20 = v35;
    if (*a1 != v8)
    {
      unint64_t v20 = v35;
      uint64_t v21 = v8;
      do
      {
        *((void *)v20 - 3) = 0;
        *((void *)v20 - 2) = 0;
        v20 -= 24;
        *((void *)v20 + 2) = 0;
        long long v22 = *(_OWORD *)(v21 - 24);
        v21 -= 24;
        *(_OWORD *)unint64_t v20 = v22;
        *((void *)v20 + 2) = *((void *)v21 + 2);
        *(void *)uint64_t v21 = 0;
        *((void *)v21 + 1) = 0;
        *((void *)v21 + 2) = 0;
      }
      while (v21 != v19);
    }
    uint64_t v35 = v20;
    uint64_t v23 = a1[1];
    int v24 = v36;
    if (v23 != v8)
    {
      do
      {
        *(void *)int v24 = 0;
        *((void *)v24 + 1) = 0;
        *((void *)v24 + 2) = 0;
        *(_OWORD *)int v24 = *(_OWORD *)v8;
        *((void *)v24 + 2) = *((void *)v8 + 2);
        *(void *)unsigned int v8 = 0;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = 0;
        v24 += 24;
        v8 += 24;
      }
      while (v8 != v23);
      unint64_t v20 = v35;
      unsigned int v8 = a1[1];
    }
    unint64_t v25 = *a1;
    *a1 = v20;
    a1[1] = v24;
    long long v26 = a1[2];
    a1[2] = v37;
    uint64_t v36 = v8;
    unint64_t v37 = v26;
    double v34 = v25;
    uint64_t v35 = v25;
    if (v8 == v25)
    {
      if (!v8) {
        return v18;
      }
    }
    else
    {
      do
      {
        while (1)
        {
          uint64_t v28 = v8 - 24;
          __int16 v27 = (void *)*((void *)v8 - 3);
          uint64_t v36 = v8 - 24;
          if (!v27) {
            break;
          }
          *((void *)v8 - 2) = v27;
          operator delete(v27);
          unsigned int v8 = v36;
          if (v36 == v25) {
            goto LABEL_32;
          }
        }
        v8 -= 24;
      }
      while (v28 != v25);
LABEL_32:
      unsigned int v8 = v34;
      if (!v34) {
        return v18;
      }
    }
    operator delete(v8);
    return v18;
  }
  if (v8 == (char *)v5)
  {
    *(void *)unsigned int v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    *(__n128 *)unsigned int v8 = *a3;
    *((void *)v8 + 2) = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a1[1] = v8 + 24;
    return v8;
  }
  uint64_t v10 = v8 + 24;
  unint64_t v11 = v5 - 24;
  if (v5 >= 0x18)
  {
    unint64_t v12 = v5 - 24;
    unint64_t v13 = a1[1];
    do
    {
      *(void *)unint64_t v13 = 0;
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = 0;
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v12;
      *((void *)v13 + 2) = *(void *)(v12 + 16);
      *(void *)unint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      v13 += 24;
      v12 += 24;
    }
    while (v12 < v5);
    a1[1] = v13;
    if ((void *)v5 == v10) {
      goto LABEL_39;
    }
LABEL_35:
    uint64_t v29 = 8 * ((uint64_t)(v5 - (void)v10) >> 3);
    do
    {
      unsigned int v31 = *(void **)v11;
      if (*(void *)v11)
      {
        *(void *)(v11 + 8) = v31;
        operator delete(v31);
        *(void *)unint64_t v11 = 0;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
      }
      uint64_t v30 = (uint64_t)&v8[v29 - 24];
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v30;
      *(void *)(v11 + 16) = *(void *)&v8[v29 - 8];
      *(void *)uint64_t v30 = 0;
      *(void *)(v30 + 8) = 0;
      *(void *)(v30 + 16) = 0;
      v11 -= 24;
      v29 -= 24;
    }
    while (v29);
    goto LABEL_39;
  }
  a1[1] = (char *)v5;
  if ((void *)v5 != v10) {
    goto LABEL_35;
  }
LABEL_39:
  char v32 = *(void **)v8;
  if (*(void *)v8)
  {
    *((void *)v8 + 1) = v32;
    operator delete(v32);
    *(void *)unsigned int v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
  }
  *(__n128 *)unsigned int v8 = *a3;
  *((void *)v8 + 2) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return v8;
}

void sub_45D298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2A6E80((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_45D2AC(uint64_t *a1, void *a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v4 = 0;
  unint64_t v5 = a3 >> 7;
  uint64_t v6 = a1[3];
  uint64_t v7 = *a1;
  uint64_t v8 = 0x101010101010101 * (a3 & 0x7F);
  while (1)
  {
    uint64_t v9 = v5 & v6;
    uint64_t v10 = *(void *)(v7 + v9);
    unint64_t v11 = ((v10 ^ v8) - 0x101010101010101) & ~(v10 ^ v8) & 0x8080808080808080;
    if (v11) {
      break;
    }
LABEL_10:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0) {
      return 0;
    }
    v4 += 8;
    unint64_t v5 = v4 + v9;
  }
  uint64_t v12 = a1[1];
  while (1)
  {
    unint64_t v13 = (v9 + (__clz(__rbit64(v11)) >> 3)) & v6;
    *a4 = v13;
    uint64_t v14 = v12 + 40 * v13;
    if (__PAIR64__(*(unsigned __int16 *)(v14 + 4), *(_DWORD *)v14) == __PAIR64__((unsigned __int16)WORD2(*a2), *a2)
      && (HIWORD(*a2) & 1) != (*(unsigned char *)(v14 + 6) == 0))
    {
      unint64_t v15 = a2[1];
      if (__PAIR64__(*(unsigned __int16 *)(v14 + 12), *(_DWORD *)(v14 + 8)) == __PAIR64__(WORD2(v15), v15)
        && (HIWORD(v15) & 1) != (*(unsigned char *)(v14 + 14) == 0))
      {
        return 1;
      }
    }
    v11 &= v11 - 1;
    if (!v11) {
      goto LABEL_10;
    }
  }
}

unint64_t sub_45D3BC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = a2[1];
  unint64_t v7 = (*a2 >> 16) & 0xFFFF0000 | (*a2 << 32);
  unint64_t v8 = 0x2127599BF4325C37 * ((v7 | ((*a2 & 0xFF000000000000) == 0)) ^ (v7 >> 23));
  unint64_t v9 = (0x2127599BF4325C37
      * (((v6 >> 16) & 0xFFFF0000 | (v6 << 32) | ((v6 & 0xFF000000000000) == 0)) ^ (((v6 >> 16) & 0xFFFF0000 | (v6 << 32)) >> 23))) ^ ((0x2127599BF4325C37 * (((v6 >> 16) & 0xFFFF0000 | (v6 << 32) | ((v6 & 0xFF000000000000) == 0)) ^ (((v6 >> 16) & 0xFFFF0000 | (v6 << 32)) >> 23))) >> 47);
  unint64_t v10 = 0x2BC6D2A9D6CE166BLL
      * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v9) ^ ((0xC6A4A7935BD1E995 * v9) >> 47))) ^ (v8 >> 47) ^ v8)
      + 0x1CCA8C862B949BLL;
  unint64_t v11 = 21 * ((265 * (v10 ^ (v10 >> 24))) ^ ((265 * (v10 ^ (v10 >> 24))) >> 14));
  uint64_t v12 = (uint64_t *)(a1
                  + 48
                  * (((((unsigned __int16)(v11 ^ (v11 >> 28)) >> 8) ^ ((-2147483647
                                                                                       * (v11 ^ (v11 >> 28))) >> 16)) ^ ((-2147483647 * (v11 ^ (v11 >> 28))) >> 24)) & 0xF));
  unint64_t result = sub_45D51C(v12, a2, 2147483649u * (v11 ^ (v11 >> 28)));
  if (v14)
  {
    uint64_t v15 = v12[1] + 40 * result;
    *(_OWORD *)uint64_t v15 = *(_OWORD *)a2;
    *(void *)(v15 + 24) = 0;
    *(void *)(v15 + 32) = 0;
    *(void *)(v15 + 16) = 0;
  }
  unint64_t v16 = *v12 + result;
  uint64_t v17 = v12[1] + 40 * result;
  uint64_t v18 = *v12 + v12[3];
  *(void *)a3 = v12;
  *(void *)(a3 + 8) = a1 + 768;
  *(void *)(a3 + 16) = v16;
  *(void *)(a3 + 24) = v17;
  *(void *)(a3 + 32) = v18;
  *(unsigned char *)(a3 + 48) = v14;
  return result;
}

unint64_t sub_45D51C(uint64_t *a1, void *a2, unint64_t a3)
{
  uint64_t v3 = 0;
  unint64_t v4 = a3 >> 7;
  uint64_t v5 = a1[3];
  unint64_t v6 = a2[1];
  while (1)
  {
    unint64_t v7 = v4 & v5;
    uint64_t v8 = *(void *)(*a1 + (v4 & v5));
    unint64_t v9 = ((v8 ^ (0x101010101010101 * (a3 & 0x7F))) - 0x101010101010101) & ~(v8 ^ (0x101010101010101 * (a3 & 0x7F))) & 0x8080808080808080;
    if (v9) {
      break;
    }
LABEL_8:
    if ((v8 & (~v8 << 6) & 0x8080808080808080) != 0) {
      return sub_45D654(a1, a3);
    }
    v3 += 8;
    unint64_t v4 = v3 + v7;
  }
  while (1)
  {
    unint64_t v10 = (v7 + (__clz(__rbit64(v9)) >> 3)) & v5;
    uint64_t v11 = a1[1] + 40 * v10;
    if (__PAIR64__(*(unsigned __int16 *)(v11 + 4), *(_DWORD *)v11) == __PAIR64__((unsigned __int16)WORD2(*a2), *a2)
      && (HIWORD(*a2) & 1) != (*(unsigned char *)(v11 + 6) == 0)
      && __PAIR64__(*(unsigned __int16 *)(v11 + 12), *(_DWORD *)(v11 + 8)) == __PAIR64__(WORD2(v6), v6)
      && (HIWORD(v6) & 1) != (*(unsigned char *)(v11 + 14) == 0))
    {
      return v10;
    }
    v9 &= v9 - 1;
    if (!v9) {
      goto LABEL_8;
    }
  }
}

unint64_t sub_45D654(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_45D74C((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

void sub_45D74C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_45D77C((char **)a1, v2);
    return;
  }
  sub_45D9DC(a1);
}

void sub_45D77C(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v8 = (char *)operator new(v7 + 40 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (unsigned __int8 i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        char v14 = &v5[40 * (void)i];
        unint64_t v15 = *((void *)v14 + 1);
        unint64_t v16 = (*(void *)v14 >> 16) & 0xFFFF0000 | (*(void *)v14 << 32);
        unint64_t v17 = 0x2127599BF4325C37 * ((v16 | ((*(void *)v14 & 0xFF000000000000) == 0)) ^ (v16 >> 23));
        unint64_t v18 = (v15 >> 16) & 0xFFFF0000 | (v15 << 32);
        unint64_t v19 = 0xC6A4A7935BD1E995
            * ((0x2127599BF4325C37 * ((v18 | ((v15 & 0xFF000000000000) == 0)) ^ (v18 >> 23))) ^ ((0x2127599BF4325C37 * ((v18 | ((v15 & 0xFF000000000000) == 0)) ^ (v18 >> 23))) >> 47));
        unint64_t v20 = 0x2BC6D2A9D6CE166BLL * ((0xC6A4A7935BD1E995 * (v19 ^ (v19 >> 47))) ^ (v17 >> 47) ^ v17)
            + 0x1CCA8C862B949BLL;
        unint64_t v21 = 21 * ((265 * (v20 ^ (v20 >> 24))) ^ ((265 * (v20 ^ (v20 >> 24))) >> 14));
        unint64_t v22 = 2147483649u * (v21 ^ (v21 >> 28));
        uint64_t v23 = a1[3];
        int v24 = *a1;
        unint64_t v25 = (unint64_t)v23 & (v22 >> 7);
        unint64_t v26 = *(void *)&(*a1)[v25] & (~*(void *)&(*a1)[v25] << 7) & 0x8080808080808080;
        if (!v26)
        {
          uint64_t v27 = 8;
          do
          {
            unint64_t v25 = (v25 + v27) & (unint64_t)v23;
            v27 += 8;
            unint64_t v26 = *(void *)&v24[v25] & (~*(void *)&v24[v25] << 7) & 0x8080808080808080;
          }
          while (!v26);
        }
        unint64_t v11 = (v25 + (__clz(__rbit64(v26)) >> 3)) & (unint64_t)v23;
        char v12 = v22 & 0x7F;
        v24[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        uint64_t v13 = (uint64_t)&a1[1][40 * v11];
        *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
        *(void *)(v13 + 24) = 0;
        *(void *)(v13 + 32) = 0;
        *(void *)(v13 + 16) = 0;
        *(_OWORD *)(v13 + 16) = *((_OWORD *)v14 + 1);
        *(void *)(v13 + 32) = *((void *)v14 + 4);
        *((void *)v14 + 2) = 0;
        *((void *)v14 + 3) = 0;
        *((void *)v14 + 4) = 0;
      }
    }
    operator delete(v4);
  }
}

uint64_t sub_45D9DC(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_28;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (v13)
  {
    for (unint64_t i = 0; i != v13; ++i)
    {
      unint64_t v17 = *(int8x16_t **)result;
      if (*(unsigned __int8 *)(*(void *)result + i) == 254)
      {
        unint64_t v18 = (unint64_t *)(*(void *)(result + 8) + 40 * i);
        unint64_t v20 = *v18;
        unint64_t v19 = v18[1];
        unint64_t v21 = 0x2127599BF4325C37
            * (((v20 >> 16) & 0xFFFF0000 | (v20 << 32) | ((v20 & 0xFF000000000000) == 0)) ^ (((v20 >> 16) & 0xFFFF0000 | (v20 << 32)) >> 23));
        unint64_t v22 = (v19 >> 16) & 0xFFFF0000 | (v19 << 32);
        unint64_t v23 = 0xC6A4A7935BD1E995
            * ((0x2127599BF4325C37 * ((v22 | ((v19 & 0xFF000000000000) == 0)) ^ (v22 >> 23))) ^ ((0x2127599BF4325C37 * ((v22 | ((v19 & 0xFF000000000000) == 0)) ^ (v22 >> 23))) >> 47));
        unint64_t v24 = 0x2BC6D2A9D6CE166BLL * ((0xC6A4A7935BD1E995 * (v23 ^ (v23 >> 47))) ^ (v21 >> 47) ^ v21)
            + 0x1CCA8C862B949BLL;
        unint64_t v25 = 21 * ((265 * (v24 ^ (v24 >> 24))) ^ ((265 * (v24 ^ (v24 >> 24))) >> 14));
        unint64_t v26 = 2147483649u * (v25 ^ (v25 >> 28));
        unint64_t v27 = v13 & (v26 >> 7);
        unint64_t v28 = *(uint64_t *)((unsigned char *)v17->i64 + v27) & (~*(uint64_t *)((char *)v17->i64 + v27) << 7) & 0x8080808080808080;
        if (v28)
        {
          unint64_t v15 = v13 & (v26 >> 7);
        }
        else
        {
          uint64_t v29 = 8;
          unint64_t v15 = v13 & (v26 >> 7);
          do
          {
            unint64_t v15 = (v15 + v29) & v13;
            v29 += 8;
            unint64_t v28 = *(uint64_t *)((unsigned char *)v17->i64 + v15) & (~*(uint64_t *)((char *)v17->i64 + v15) << 7) & 0x8080808080808080;
          }
          while (!v28);
        }
        unint64_t v16 = (v15 + (__clz(__rbit64(v28)) >> 3)) & v13;
        if ((((v16 - v27) ^ (i - v27)) & v13) > 7)
        {
          int v30 = v17->u8[v16];
          v17->i8[v16] = v26 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (v16 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v26 & 0x7F;
          uint64_t v31 = *(void *)(result + 8);
          if (v30 == 128)
          {
            uint64_t v32 = v31 + 40 * v16;
            uint64_t v33 = v31 + 40 * i;
            *(void *)(v32 + 24) = 0;
            *(void *)(v32 + 32) = 0;
            *(void *)(v32 + 16) = 0;
            long long v34 = *(_OWORD *)(v33 + 16);
            *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
            *(_OWORD *)(v32 + 16) = v34;
            *(void *)(v32 + 32) = *(void *)(v33 + 32);
            *(void *)(v33 + 24) = 0;
            *(void *)(v33 + 32) = 0;
            *(void *)(v33 + 16) = 0;
            *(unsigned char *)(*(void *)result + i) = 0x80;
            *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
          }
          else
          {
            uint64_t v35 = (long long *)(v31 + 40 * i);
            long long v36 = v35[1];
            long long v46 = *v35;
            uint64_t v37 = *((void *)v35 + 4);
            *((void *)v35 + 3) = 0;
            *((void *)v35 + 4) = 0;
            *((void *)v35 + 2) = 0;
            uint64_t v38 = *(void *)(result + 8);
            uint64_t v39 = v38 + 40 * i;
            uint64_t v40 = v38 + 40 * v16;
            *(void *)(v39 + 16) = 0;
            *(void *)(v39 + 24) = 0;
            *(void *)(v39 + 32) = 0;
            long long v41 = *(_OWORD *)(v40 + 16);
            *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
            *(_OWORD *)(v39 + 16) = v41;
            *(void *)(v39 + 32) = *(void *)(v40 + 32);
            *(void *)(v40 + 24) = 0;
            *(void *)(v40 + 32) = 0;
            *(void *)(v40 + 16) = 0;
            uint64_t v42 = *(void *)(result + 8) + 40 * v16;
            *(_OWORD *)uint64_t v42 = v46;
            *(_OWORD *)(v42 + 16) = v36;
            *(void *)(v42 + 32) = v37;
            --i;
          }
        }
        else
        {
          v17->i8[i] = v26 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v26 & 0x7F;
        }
      }
      uint64_t v13 = *(void *)(result + 24);
    }
    uint64_t v43 = i - (i >> 3);
    BOOL v44 = i == 7;
    uint64_t v45 = 6;
    if (!v44) {
      uint64_t v45 = v43;
    }
  }
  else
  {
    uint64_t v45 = 0;
  }
  *(void *)(result + 40) = v45 - *(void *)(result + 16);
  return result;
}

void *sub_45DD90(void *result, char *a2, char *a3, size_t __sz)
{
  unint64_t v7 = result;
  size_t v8 = result[2];
  unint64_t v9 = *result;
  uint64_t v10 = (char *)*result;
  if (__sz <= (uint64_t)(v8 - *result) >> 1)
  {
    unint64_t v17 = (char **)(result + 1);
    uint64_t v18 = result[1];
    uint64_t v19 = v18 - v9;
    unint64_t v20 = (uint64_t)(v18 - v9) >> 1;
    if (v20 < __sz)
    {
      unint64_t v21 = &a2[2 * v20];
      if (v18 == v9) {
        goto LABEL_47;
      }
      unint64_t v22 = v19 - 2;
      if ((unint64_t)(v19 - 2) < 0xE)
      {
        unint64_t v23 = a2;
        goto LABEL_45;
      }
      BOOL v28 = v9 < (unint64_t)&a2[v19 & 0xFFFFFFFFFFFFFFFELL]
         && v9 + (v19 & 0xFFFFFFFFFFFFFFFELL) > (unint64_t)a2;
      unint64_t v23 = a2;
      if (v28) {
        goto LABEL_45;
      }
      uint64_t v29 = (v22 >> 1) + 1;
      if (v22 >= 0x3E)
      {
        unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v40 = (long long *)(a2 + 32);
        long long v41 = (_OWORD *)(v9 + 32);
        unint64_t v42 = v29 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v44 = *(v40 - 2);
          long long v43 = *(v40 - 1);
          long long v46 = *v40;
          long long v45 = v40[1];
          v40 += 4;
          *(v41 - 2) = v44;
          *(v41 - 1) = v43;
          *long long v41 = v46;
          v41[1] = v45;
          v41 += 4;
          v42 -= 32;
        }
        while (v42);
        if (v29 == v30) {
          goto LABEL_46;
        }
        if ((v29 & 0x18) == 0)
        {
          unint64_t v23 = &a2[2 * v30];
          uint64_t v10 = (char *)(v9 + 2 * v30);
          do
          {
LABEL_45:
            char *v10 = *v23;
            v10[1] = v23[1];
            v23 += 2;
            v10 += 2;
          }
          while (v23 != v21);
LABEL_46:
          uint64_t v10 = *v17;
LABEL_47:
          int v52 = v10;
          if (v21 != a3)
          {
            unint64_t v53 = &a2[v19];
            unint64_t v54 = a3 - &a2[v19] - 2;
            if (v54 < 0x1E)
            {
              int v52 = v10;
            }
            else
            {
              unint64_t v55 = v10 - v53;
              int v52 = v10;
              if (v55 >= 0x20)
              {
                uint64_t v56 = (v54 >> 1) + 1;
                unint64_t v57 = 2 * (v56 & 0xFFFFFFFFFFFFFFF0);
                v21 += v57;
                int v52 = &v10[v57];
                uint64_t v58 = v10 + 16;
                uint64_t v59 = &a2[2 * v20 + 16];
                unint64_t v60 = v56 & 0xFFFFFFFFFFFFFFF0;
                do
                {
                  long long v61 = *(_OWORD *)v59;
                  *(v58 - 1) = *((_OWORD *)v59 - 1);
                  _OWORD *v58 = v61;
                  v58 += 2;
                  v59 += 32;
                  v60 -= 16;
                }
                while (v60);
                if (v56 == (v56 & 0xFFFFFFFFFFFFFFF0)) {
                  goto LABEL_56;
                }
              }
            }
            do
            {
              __int16 v62 = *(_WORD *)v21;
              v21 += 2;
              *(_WORD *)int v52 = v62;
              v52 += 2;
            }
            while (v21 != a3);
          }
LABEL_56:
          uint64_t v16 = v52 - v10;
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v30 = 0;
      }
      unint64_t v47 = 2 * (v29 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v10 = (char *)(v9 + v47);
      unint64_t v23 = &a2[v47];
      __int16 v48 = &a2[2 * v30];
      uint64_t v49 = (_OWORD *)(v9 + 2 * v30);
      unint64_t v50 = v30 - (v29 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        long long v51 = *(_OWORD *)v48;
        v48 += 16;
        *v49++ = v51;
        v50 += 8;
      }
      while (v50);
      if (v29 == (v29 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_46;
      }
      goto LABEL_45;
    }
    if (a2 == a3)
    {
      uint64_t v16 = (uint64_t)&v10[-v9];
      goto LABEL_57;
    }
    unint64_t v24 = a3 - a2 - 2;
    if (v24 >= 0x3E
      && ((unint64_t v25 = (v24 & 0xFFFFFFFFFFFFFFFELL) + 2, v9 >= (unint64_t)&a2[v25]) || v9 + v25 <= (unint64_t)a2))
    {
      uint64_t v31 = (v24 >> 1) + 1;
      unint64_t v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFE0);
      unint64_t v26 = (char *)(v9 + v32);
      unint64_t v27 = &a2[v32];
      uint64_t v33 = (long long *)(a2 + 32);
      long long v34 = (_OWORD *)(v9 + 32);
      unint64_t v35 = v31 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v37 = *(v33 - 2);
        long long v36 = *(v33 - 1);
        long long v39 = *v33;
        long long v38 = v33[1];
        v33 += 4;
        *(v34 - 2) = v37;
        *(v34 - 1) = v36;
        _OWORD *v34 = v39;
        v34[1] = v38;
        v34 += 4;
        v35 -= 32;
      }
      while (v35);
      if (v31 == (v31 & 0xFFFFFFFFFFFFFFE0)) {
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v26 = (char *)*result;
      unint64_t v27 = a2;
    }
    do
    {
      *unint64_t v26 = *v27;
      v26[1] = v27[1];
      v26 += 2;
      v27 += 2;
    }
    while (v27 != a3);
LABEL_24:
    uint64_t v16 = (uint64_t)&v26[-v9];
    goto LABEL_57;
  }
  if (v10)
  {
    result[1] = v10;
    operator delete(v10);
    size_t v8 = 0;
    *unint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  if ((__sz & 0x8000000000000000) != 0) {
    goto LABEL_58;
  }
  if (v8 <= __sz) {
    size_t v11 = __sz;
  }
  else {
    size_t v11 = v8;
  }
  BOOL v12 = v8 >= 0x7FFFFFFFFFFFFFFELL;
  uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  if (!v12) {
    uint64_t v13 = v11;
  }
  if (v13 < 0) {
LABEL_58:
  }
    sub_2E00();
  uint64_t v14 = 2 * v13;
  unint64_t result = operator new(2 * v13);
  uint64_t v10 = (char *)result;
  *unint64_t v7 = result;
  v7[1] = result;
  v7[2] = (char *)result + v14;
  unint64_t v15 = (char *)result;
  if (a2 != a3)
  {
    unint64_t result = memcpy(result, a2, ((a3 - a2 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2);
    unint64_t v15 = &v10[((a3 - a2 - 2) & 0xFFFFFFFFFFFFFFFELL) + 2];
  }
  uint64_t v16 = v15 - v10;
  unint64_t v17 = (char **)(v7 + 1);
LABEL_57:
  *unint64_t v17 = &v10[v16];
  return result;
}

char *sub_45E0EC(char **a1, int *a2, uint64_t *a3)
{
  unint64_t v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 < v6)
  {
    uint64_t v8 = *a3;
    *(void *)unint64_t v7 = *((void *)a2 + 3);
    *((void *)v7 + 1) = v8;
    *((_DWORD *)v7 + 4) = a2[8];
    *((_DWORD *)v7 + 5) = *a2;
    *((void *)v7 + 3) = *((void *)a2 + 1);
    *((_DWORD *)v7 + 8) = a2[4];
    unint64_t v9 = v7 + 40;
    goto LABEL_14;
  }
  uint64_t v10 = *a1;
  unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
  unint64_t v12 = v11 + 1;
  if (v11 + 1 > 0x666666666666666) {
    sub_2E00();
  }
  unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)v10) >> 3);
  if (2 * v13 > v12) {
    unint64_t v12 = 2 * v13;
  }
  if (v13 >= 0x333333333333333) {
    unint64_t v14 = 0x666666666666666;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14 > 0x666666666666666) {
    sub_188D718();
  }
  uint64_t v15 = 40 * v14;
  uint64_t v16 = (char *)operator new(40 * v14);
  uint64_t v17 = *a3;
  uint64_t v18 = &v16[40 * v11];
  uint64_t v19 = &v16[v15];
  *(void *)uint64_t v18 = *((void *)a2 + 3);
  *((void *)v18 + 1) = v17;
  int v20 = *a2;
  *((_DWORD *)v18 + 4) = a2[8];
  *((_DWORD *)v18 + 5) = v20;
  *((void *)v18 + 3) = *((void *)a2 + 1);
  *((_DWORD *)v18 + 8) = a2[4];
  unint64_t v9 = v18 + 40;
  if (v7 == v10)
  {
    *a1 = v18;
    a1[1] = v9;
    a1[2] = v19;
    if (!v10) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  do
  {
    unint64_t v21 = v18 - 40;
    long long v22 = *(_OWORD *)(v7 - 40);
    long long v23 = *(_OWORD *)(v7 - 24);
    *((void *)v18 - 1) = *((void *)v7 - 1);
    *(_OWORD *)(v18 - 24) = v23;
    *(_OWORD *)(v18 - 40) = v22;
    v7 -= 40;
    v18 -= 40;
  }
  while (v7 != v10);
  *a1 = v21;
  a1[1] = v9;
  a1[2] = v19;
  if (v10) {
LABEL_13:
  }
    operator delete(v10);
LABEL_14:
  a1[1] = v9;
  return v9 - 40;
}

void *sub_45E284(void *a1, unint64_t a2, void *a3, unint64_t a4)
{
  while (a1)
  {
    unint64_t v8 = sub_46C760(a1);
    unint64_t v9 = v8;
    if (a3)
    {
      unint64_t v10 = sub_46C760(a3);
      if (a2 >= v9 || a4 >= v10)
      {
        if (a2 < v9 == a4 < v10) {
          return a1;
        }
      }
      else
      {
        uint64_t v11 = sub_46C8EC(a1, a2);
        if (v11 == sub_46C8EC(a3, a4)) {
          return a1;
        }
      }
    }
    else if (a2 >= v8)
    {
      return a1;
    }
LABEL_15:
    unint64_t v12 = (int **)sub_46C8EC(a1, a2);
    unint64_t v13 = (char *)*v12;
    unint64_t v14 = (unsigned __int16 *)((char *)*v12 - **v12);
    unsigned int v15 = *v14;
    if (v15 >= 0xB && v14[5] && (v13[v14[5] + 3] & 4) != 0) {
      goto LABEL_2;
    }
    if (*((unsigned char *)v12 + 38))
    {
      if (v15 < 0x29) {
        goto LABEL_25;
      }
      unsigned int v16 = v14[20];
      if (!v16) {
        goto LABEL_25;
      }
    }
    else
    {
      if (v15 < 0x27) {
        goto LABEL_25;
      }
      unsigned int v16 = v14[19];
      if (!v16) {
        goto LABEL_25;
      }
    }
    if (*(_DWORD *)&v13[v16 + *(unsigned int *)&v13[v16]]) {
      return a1;
    }
LABEL_25:
    uint64_t v17 = v12[1];
    if (!v17) {
      return a1;
    }
    uint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v18 < 0x11u) {
      return a1;
    }
    uint64_t v19 = v18[8];
    if (!v19 || (*(_WORD *)((unsigned char *)v17 + v19) & 4) == 0) {
      return a1;
    }
LABEL_2:
    ++a2;
  }
  if (a3 && a4 < sub_46C760(a3)) {
    goto LABEL_15;
  }
  return a1;
}

uint64_t sub_45E400(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = 0;
  if (a2 && a3 >= 1)
  {
    uint64_t v9 = 0;
    while (1)
    {
      unint64_t v10 = (int *)sub_2D5D58(a1, v4 & 0xFFFFFFFFFFFFLL);
      v18[0] = v10;
      memset(&v18[1], 0, 24);
      int v19 = v4;
      __int16 v20 = WORD2(v4);
      BOOL v21 = (v4 & 0xFF000000000000) != 0;
      uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
      unsigned int v12 = *v11;
      if ((v4 & 0xFF000000000000) != 0)
      {
        if (v12 < 0xB) {
          return 0;
        }
        unsigned int v13 = v11[5];
        if (!v11[5]) {
          return 0;
        }
        int v14 = 33554434;
      }
      else
      {
        if (v12 < 0xB) {
          return 0;
        }
        unsigned int v13 = v11[5];
        int v14 = 33554433;
        if (!v11[5]) {
          return 0;
        }
      }
      if ((v14 & ~*(int *)((char *)v10 + v13)) != 0) {
        return 0;
      }
      if ((v4 & 0xFF000000000000) != 0)
      {
        if (v12 < 0x4D) {
          goto LABEL_20;
        }
        uint64_t v15 = v11[38];
        if (!v11[38]) {
          goto LABEL_20;
        }
        if ((*((unsigned char *)v10 + v15) & 8) != 0) {
          return 1;
        }
        LODWORD(v5) = 2;
      }
      else
      {
        if (v12 < 0x4D) {
          goto LABEL_20;
        }
        uint64_t v15 = v11[38];
        if (!v11[38]) {
          goto LABEL_20;
        }
        uint64_t v5 = 1;
        if ((*((unsigned char *)v10 + v15) & 4) != 0) {
          return v5;
        }
      }
      if ((*(int *)((char *)v10 + v15) & v5) != 0) {
        return 1;
      }
LABEL_20:
      if (v11[4]) {
        uint64_t v16 = *(unsigned int *)((char *)v10 + v11[4]);
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v4 = sub_2E3710(v18, a4, a1);
      uint64_t v5 = 0;
      if (v4)
      {
        v9 += v16;
        if (v9 < a3) {
          continue;
        }
      }
      return v5;
    }
  }
  return v5;
}

void sub_45E580()
{
  unk_2558687 = 16641;
  word_2558670 = 65;
  byte_255869F = 1;
  byte_2558689 = 0;
  qword_25586A8 = 0;
  unk_25586B0 = 0;
  qword_25586A0 = 0;
}

__n128 sub_45E5B0(__n128 *a1, __n128 *a2)
{
  a1[1].n128_u32[0] = -1;
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u32[0] = 0;
  a1[1].n128_u8[8] = 0;
  return result;
}

uint64_t sub_45E5CC(uint64_t **a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = **a1;
  uint64_t v3 = v2 + 424 * (void)v1;
  uint64_t v4 = v2 + 648 * (void)v1;
  if (*((_DWORD *)a1 + 4)) {
    return v4;
  }
  else {
    return v3;
  }
}

BOOL sub_45E5F4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) == 0;
}

uint64_t sub_45E604(uint64_t a1)
{
  return *(void *)a1;
}

BOOL sub_45E610@<W0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X8>)
{
  signed int v4 = *((_DWORD *)a1 + 4);
  if (v4 <= 1)
  {
    unint64_t v3 = *a1;
    a3 = a1[1];
    signed int v5 = *((_DWORD *)a2 + 4);
    if (v4 >= v5) {
      goto LABEL_3;
    }
    return 1;
  }
  signed int v5 = *((_DWORD *)a2 + 4);
  if (v4 < v5) {
    return 1;
  }
LABEL_3:
  if (v5 < v4) {
    return 0;
  }
  unint64_t v8 = *a2;
  unint64_t v7 = a2[1];
  if (v4 == 1)
  {
    if (v3 < v8) {
      return 1;
    }
    if (v3 == v8 && a3 < v7) {
      return 1;
    }
  }
  else if (!v4)
  {
    if (v3 < v8) {
      return 1;
    }
    if (v3 == v8 && a3 < v7) {
      return 1;
    }
  }
  if (v5 == 1)
  {
    if (v8 < v3) {
      return 0;
    }
    if (v8 == v3 && v7 < a3) {
      return 0;
    }
  }
  else if (!v5)
  {
    if (v8 < v3) {
      return 0;
    }
    if (v8 == v3 && v7 < a3) {
      return 0;
    }
  }
  return (*((unsigned __int8 *)a1 + 24) ^ 1u) < (*((unsigned __int8 *)a2 + 24) ^ 1u);
}

BOOL sub_45E718(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 16);
  return v2 == *(_DWORD *)(a2 + 16)
      && (v2 == -1 || v2 <= 1 && *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8))
      && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
}

void sub_45E778()
{
  unk_25586CF = 16641;
  word_25586B8 = 65;
  byte_25586E7 = 1;
  byte_25586D1 = 0;
}

void *sub_45E7A0(uint64_t a1, uint64_t a2)
{
  signed int v4 = *(void **)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  if (v4 == (void *)v3)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 808);
    *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 803);
    *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 805);
    *(unsigned char *)(a1 + 31) = *(unsigned char *)(a2 + 807);
  }
  *(unsigned char *)(a1 + 30) = *(unsigned char *)(a2 + 806);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 804);
  *(unsigned char *)(a1 + 24) |= *(unsigned char *)(a2 + 800);
  *(unsigned char *)(a1 + 25) |= *(unsigned char *)(a2 + 801);
  *(unsigned char *)(a1 + 26) |= *(unsigned char *)(a2 + 802);
  *(unsigned char *)(a1 + 48) &= *(unsigned char *)(a2 + 824);
  *(unsigned char *)(a1 + 51) |= *(unsigned char *)(a2 + 827);
  *(unsigned char *)(a1 + 50) |= *(unsigned char *)(a2 + 826);
  *(unsigned char *)(a1 + 52) |= *(unsigned char *)(a2 + 828);
  *(unsigned char *)(a1 + 53) = *(unsigned char *)(a2 + 829);
  *(unsigned char *)(a1 + 54) = *(unsigned char *)(a2 + 830);
  *(unsigned char *)(a1 + 49) = *(unsigned char *)(a2 + 825);
  *(unsigned char *)(a1 + 60) |= *(unsigned char *)(a2 + 836);
  *(int32x4_t *)(a1 + 64) = vaddq_s32(*(int32x4_t *)(a1 + 64), *(int32x4_t *)(a2 + 840));
  int32x2_t v5 = *(int32x2_t *)(a1 + 80);
  uint8x8_t v6 = (uint8x8_t)vadd_s32(v5, *(int32x2_t *)(a2 + 856));
  *(uint8x8_t *)(a1 + 80) = v6;
  *(unsigned char *)(a1 + 59) |= *(unsigned char *)(a2 + 835);
  v6.i32[0] = *(_DWORD *)(a2 + 831);
  int16x8_t v7 = (int16x8_t)vmovl_u8(v6);
  v5.i32[0] = *(_DWORD *)(a1 + 55);
  *(int8x8_t *)v7.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v5), *(int8x8_t *)v7.i8);
  *(_DWORD *)(a1 + 55) = vmovn_s16(v7).u32[0];
  if (v3 >= *(void *)(a1 + 16))
  {
    __n128 result = sub_4635F4((void **)a1, a2);
  }
  else
  {
    sub_463750(v3, a2);
    __n128 result = (void *)(v8 + 1056);
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void *sub_45E914(void *a1)
{
  unsigned int v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  return a1;
}

__n128 sub_45E958@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_45E964(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_45E970(uint64_t a1)
{
  return *(void *)a1;
}

void sub_45E97C(char *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_45E9A4(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_4611C0(a1, (uint64_t)v5);
  sub_461500(a1, (uint64_t)__p);
  sub_4615F4(a2, (uint64_t)v5, (uint64_t)__p, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_45EA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    int v14 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v14 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

__n128 sub_45EA74@<Q0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_4617E8(a1, (uint64_t)&v11);
  sub_4618DC(a1, (uint64_t)&v9);
  *(void *)a2 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_20E7D40;
  uint64_t v4 = v11;
  *(void *)(a2 + 24) = v11;
  uint64_t v5 = v12;
  *(_OWORD *)(a2 + 32) = v12;
  uint64_t v11 = 0;
  long long v12 = 0uLL;
  uint64_t v6 = v9;
  *(void *)(a2 + 48) = v9;
  result.n128_u64[0] = v10;
  *(_OWORD *)(a2 + 56) = v10;
  uint64_t v9 = 0;
  long long v10 = 0uLL;
  if (v4 != v5)
  {
    uint64_t v8 = ((int64_t)(result.n128_u64[0] - v6) >> 4) - 1;
    *(void *)(a2 + 16) = v8;
    __n128 result = *(__n128 *)(v6 + 16 * v8);
    *(__n128 *)a2 = result;
  }
  return result;
}

void sub_45EB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_45EB40(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_45E9A4(a1, (uint64_t)&v13);
  sub_4617E8(a1, (uint64_t)&v20);
  sub_4618DC(a1, (uint64_t)&v18);
  *(void *)uint64_t v8 = 0;
  *(_OWORD *)&v8[8] = xmmword_20E7D40;
  uint64_t v9 = v20;
  uint64_t v4 = v20;
  long long v10 = v21;
  uint64_t v5 = (void *)v21;
  __int16 v20 = 0;
  long long v21 = 0uLL;
  uint64_t v6 = v18;
  __n128 __p = v18;
  uint64_t v7 = v19;
  long long v12 = v19;
  uint64_t v18 = 0;
  long long v19 = 0uLL;
  if (v4 != v5)
  {
    *(void *)&v8[16] = ((v7 - (uint64_t)v6) >> 4) - 1;
    *(_OWORD *)uint64_t v8 = v6[*(void *)&v8[16]];
  }
  sub_39ECCC(a2, &v13);
  sub_39ECCC(a2 + 72, (long long *)v8);
  if (__p)
  {
    *(void *)&long long v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    *(void *)&long long v10 = v9;
    operator delete(v9);
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    uint64_t v15 = v14;
    operator delete(v14);
  }
}

void sub_45EC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  long long v13 = *(void **)(v11 - 40);
  if (v13)
  {
    *(void *)(v11 - 32) = v13;
    operator delete(v13);
    sub_39EB70((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_45EC9C(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_4619D0(a1, (uint64_t)&v15);
  sub_461AC4(a1, (uint64_t)&v13);
  *(void *)uint64_t v8 = 0;
  *(_OWORD *)&v8[8] = xmmword_20E7D40;
  uint64_t v9 = v15;
  uint64_t v4 = v15;
  long long v10 = v16;
  uint64_t v5 = (void *)v16;
  uint64_t v15 = 0;
  long long v16 = 0uLL;
  uint64_t v6 = v13;
  __n128 __p = v13;
  uint64_t v7 = v14;
  long long v12 = v14;
  long long v13 = 0;
  long long v14 = 0uLL;
  if (v4 != v5)
  {
    *(void *)&v8[16] = ((v7 - (uint64_t)v6) >> 4) - 1;
    *(_OWORD *)uint64_t v8 = v6[*(void *)&v8[16]];
  }
  sub_39ECCC(a2, (long long *)v8);
  sub_39ECCC(a2 + 72, (long long *)v8);
  if (__p)
  {
    *(void *)&long long v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    *(void *)&long long v10 = v9;
    operator delete(v9);
  }
}

void sub_45ED84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = (void *)v9[6];
  if (v11)
  {
    v9[7] = v11;
    operator delete(v11);
    long long v12 = (void *)v9[3];
    if (!v12)
    {
LABEL_3:
      sub_39EB70(&a9);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    long long v12 = (void *)v9[3];
    if (!v12) {
      goto LABEL_3;
    }
  }
  v9[4] = v12;
  operator delete(v12);
  sub_39EB70(&a9);
  _Unwind_Resume(a1);
}

void sub_45EDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_45EDE4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 - 40);
  if (v3)
  {
    *(void *)(v1 - 32) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_45EE00(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_45EED0(a1, (uint64_t)&v3);
  sub_39ECCC(a2, &v3);
  sub_39ECCC(a2 + 72, &v3);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  if (v4)
  {
    uint64_t v5 = v4;
    operator delete(v4);
  }
}

void sub_45EE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = (void *)v9[6];
  if (v11)
  {
    v9[7] = v11;
    operator delete(v11);
    long long v12 = (void *)v9[3];
    if (!v12)
    {
LABEL_3:
      sub_39EB70(&a9);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    long long v12 = (void *)v9[3];
    if (!v12) {
      goto LABEL_3;
    }
  }
  v9[4] = v12;
  operator delete(v12);
  sub_39EB70(&a9);
  _Unwind_Resume(a1);
}

void sub_45EEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_45EED0(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_461BB8(a1, (uint64_t)v5);
  sub_461CAC(a1, (uint64_t)__p);
  sub_4615F4(a2, (uint64_t)v5, (uint64_t)__p, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_45EF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    long long v14 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    long long v14 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_45EFA0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_461DA0(a1, &v14);
  __n128 result = sub_462204(a1, (unint64_t *)&v12);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v6 = v13;
  unint64_t v5 = v14;
  *(void *)(a2 + 16) = v14;
  uint64_t v7 = v15;
  *(_OWORD *)(a2 + 24) = v15;
  unint64_t v14 = 0;
  long long v15 = 0uLL;
  uint64_t v8 = v12;
  *(_OWORD *)(a2 + 40) = v12;
  *(void *)(a2 + 56) = v6;
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  if (v5 != v7)
  {
    uint64_t v9 = (uint64_t)(v7 - v5) >> 3;
    uint64_t v10 = v9 - 1;
    if (v9 == 1)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = 0;
      while (*(void *)(v5 + 8 * v11) == *(void *)(v8 + 8 * v11))
      {
        *(void *)(a2 + 8) = ++v11;
        if (v10 == v11)
        {
          uint64_t v11 = v10;
          break;
        }
      }
    }
    *(void *)a2 = *(void *)(v5 + 8 * v11);
  }
  return result;
}

void sub_45F074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_45F090@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_4622F8(a1, &v12);
  __n128 result = sub_4623EC(a1, &v10);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  unint64_t v5 = v12;
  *(void *)(a2 + 16) = v12;
  uint64_t v6 = v13;
  *(_OWORD *)(a2 + 24) = v13;
  unint64_t v12 = 0;
  long long v13 = 0uLL;
  unint64_t v7 = v10;
  *(void *)(a2 + 40) = v10;
  uint64_t v8 = v11;
  *(_OWORD *)(a2 + 48) = v11;
  unint64_t v10 = 0;
  long long v11 = 0uLL;
  if (v5 != v6)
  {
    uint64_t v9 = ((uint64_t)(v8 - v7) >> 3) - 1;
    *(void *)a2 = *(void *)(v7 + 8 * v9);
    *(void *)(a2 + 8) = v9;
  }
  return result;
}

void sub_45F130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_45F14C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_45EFA0(a1, (uint64_t)&v13);
  sub_4622F8(a1, (unint64_t *)&v20);
  sub_4623EC(a1, (unint64_t *)&v18);
  long long v8 = 0uLL;
  uint64_t v9 = v20;
  uint64_t v4 = v20;
  long long v10 = v21;
  unint64_t v5 = (void *)v21;
  __int16 v20 = 0;
  long long v21 = 0uLL;
  uint64_t v6 = v18;
  __n128 __p = v18;
  uint64_t v7 = v19;
  long long v12 = v19;
  uint64_t v18 = 0;
  long long v19 = 0uLL;
  if (v4 != v5)
  {
    *((void *)&v8 + 1) = ((v7 - (uint64_t)v6) >> 3) - 1;
    *(void *)&long long v8 = v6[*((void *)&v8 + 1)];
  }
  sub_460E84(a2, &v13);
  sub_460E84(a2 + 64, &v8);
  if (__p)
  {
    *(void *)&long long v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    *(void *)&long long v10 = v9;
    operator delete(v9);
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    long long v15 = v14;
    operator delete(v14);
  }
}

void sub_45F258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  long long v12 = *(void **)(v10 - 40);
  if (v12)
  {
    *(void *)(v10 - 32) = v12;
    operator delete(v12);
    sub_2FC938((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  sub_2FC938((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_45F294@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v14 = a2;
  long long v12 = &v14;
  long long v13 = &v14;
  sub_4624E0(a1, &v13, &v17);
  __n128 result = sub_4629A0(a1, &v12, (unint64_t *)&v15);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = v17;
  *(void *)(a3 + 16) = v17;
  uint64_t v7 = v18;
  *(_OWORD *)(a3 + 24) = v18;
  unint64_t v17 = 0;
  long long v18 = 0uLL;
  uint64_t v8 = v15;
  *(_OWORD *)(a3 + 40) = v15;
  *(void *)(a3 + 56) = v16;
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  if (v6 != v7)
  {
    uint64_t v9 = (uint64_t)(v7 - v6) >> 3;
    uint64_t v10 = v9 - 1;
    if (v9 == 1)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = 0;
      while (*(void *)(v6 + 8 * v11) == *(void *)(v8 + 8 * v11))
      {
        *(void *)(a3 + 8) = ++v11;
        if (v10 == v11)
        {
          uint64_t v11 = v10;
          break;
        }
      }
    }
    *(void *)a3 = *(void *)(v6 + 8 * v11);
  }
  return result;
}

void sub_45F378(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)(v1 - 40);
  if (v3)
  {
    *(void *)(v1 - 32) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_45F394@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v13 = a2;
  uint64_t v11 = &v13;
  long long v12 = &v13;
  sub_462AF0(a1, &v12, &v16);
  __n128 result = sub_462C40(a1, &v11, &v14);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = v16;
  *(void *)(a3 + 16) = v16;
  uint64_t v7 = v17;
  *(_OWORD *)(a3 + 24) = v17;
  unint64_t v16 = 0;
  long long v17 = 0uLL;
  unint64_t v8 = v14;
  *(void *)(a3 + 40) = v14;
  uint64_t v9 = v15;
  *(_OWORD *)(a3 + 48) = v15;
  unint64_t v14 = 0;
  long long v15 = 0uLL;
  if (v6 != v7)
  {
    uint64_t v10 = ((uint64_t)(v9 - v8) >> 3) - 1;
    *(void *)a3 = *(void *)(v8 + 8 * v10);
    *(void *)(a3 + 8) = v10;
  }
  return result;
}

void sub_45F440(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)(v1 - 40);
  if (v3)
  {
    *(void *)(v1 - 32) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_45F45C@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v14 = a2;
  long long v12 = &v14;
  char v13 = &v14;
  sub_462D90(a1, (unsigned __int8 **)&v13, &v17);
  __n128 result = sub_463200(a1, (unsigned __int8 **)&v12, (unint64_t *)&v15);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v6 = v17;
  *(void *)(a3 + 16) = v17;
  uint64_t v7 = v18;
  *(_OWORD *)(a3 + 24) = v18;
  unint64_t v17 = 0;
  long long v18 = 0uLL;
  uint64_t v8 = v15;
  *(_OWORD *)(a3 + 40) = v15;
  *(void *)(a3 + 56) = v16;
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  if (v6 != v7)
  {
    uint64_t v9 = (uint64_t)(v7 - v6) >> 3;
    uint64_t v10 = v9 - 1;
    if (v9 == 1)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = 0;
      while (*(void *)(v6 + 8 * v11) == *(void *)(v8 + 8 * v11))
      {
        *(void *)(a3 + 8) = ++v11;
        if (v10 == v11)
        {
          uint64_t v11 = v10;
          break;
        }
      }
    }
    *(void *)a3 = *(void *)(v6 + 8 * v11);
  }
  return result;
}

void sub_45F540(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)(v1 - 40);
  if (v3)
  {
    *(void *)(v1 - 32) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_45F55C(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  sub_45F45C(a1, a2, (uint64_t)&v15);
  char v22 = a2;
  __int16 v20 = &v22;
  long long v21 = &v22;
  sub_463300(a1, (unsigned __int8 **)&v21, (unint64_t *)&v25);
  sub_463400(a1, (unsigned __int8 **)&v20, (unint64_t *)&v23);
  long long v10 = 0uLL;
  uint64_t v11 = v25;
  unint64_t v6 = v25;
  long long v12 = v26;
  uint64_t v7 = (void *)v26;
  unint64_t v25 = 0;
  long long v26 = 0uLL;
  uint64_t v8 = v23;
  __n128 __p = v23;
  uint64_t v9 = v24;
  long long v14 = v24;
  long long v23 = 0;
  long long v24 = 0uLL;
  if (v6 != v7)
  {
    *((void *)&v10 + 1) = ((v9 - (uint64_t)v8) >> 3) - 1;
    *(void *)&long long v10 = v8[*((void *)&v10 + 1)];
  }
  sub_4610AC(a3, &v15);
  sub_4610AC(a3 + 64, &v10);
  if (__p)
  {
    *(void *)&long long v14 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    *(void *)&long long v12 = v11;
    operator delete(v11);
  }
  if (v18)
  {
    long long v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    unint64_t v17 = v16;
    operator delete(v16);
  }
}

void sub_45F680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  long long v12 = *(void **)(v10 - 56);
  if (v12)
  {
    *(void *)(v10 - 48) = v12;
    operator delete(v12);
    sub_2FC938((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  sub_2FC938((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_45F6BC@<X0>(uint64_t a1@<X0>, void **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_4617E8((char *)a1, (uint64_t)v62);
  sub_4618DC((char *)a1, (uint64_t)&v60);
  *(void *)unint64_t v55 = 0;
  *(_OWORD *)&v55[8] = xmmword_20E7D40;
  uint64_t v56 = *(void *)&v62[0];
  uint64_t v8 = *(void **)&v62[0];
  long long v57 = *(_OWORD *)((char *)v62 + 8);
  uint64_t v9 = (void *)*((void *)&v62[0] + 1);
  memset(v62, 0, 24);
  uint64_t v10 = (_OWORD *)v60;
  uint64_t v58 = v60;
  uint64_t v11 = (_OWORD *)v61;
  long long v59 = v61;
  uint64_t v60 = 0;
  long long v61 = 0uLL;
  if (v8 == v9)
  {
    uint64_t v12 = 0;
    char v13 = a2[6];
    long long v14 = a2[7];
    long long v15 = v11;
    if (v13 == v14) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v12 = v11 - v10 - 1;
    *(void *)&v55[16] = v12;
    *(_OWORD *)unint64_t v55 = v10[v12];
    char v13 = a2[6];
    long long v14 = a2[7];
    long long v15 = v11;
    if (v13 == v14)
    {
LABEL_15:
      int v23 = (v10 == v15) == (v13 == v14);
      if (!v10) {
        goto LABEL_19;
      }
LABEL_18:
      operator delete(v10);
      goto LABEL_19;
    }
  }
  if (v10 == v15) {
    goto LABEL_15;
  }
  if (a2[2] != (void *)v12)
  {
    int v23 = 0;
    if (!v10) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (*a2)
  {
    unint64_t v16 = (unint64_t)a2[1];
    BOOL v17 = v16 < sub_46C760(*a2);
    long long v18 = *(void **)v55;
    if (*(void *)v55) {
      goto LABEL_9;
    }
LABEL_39:
    BOOL v20 = 0;
    goto LABEL_40;
  }
  BOOL v17 = 0;
  long long v18 = *(void **)v55;
  if (!*(void *)v55) {
    goto LABEL_39;
  }
LABEL_9:
  unint64_t v19 = sub_46C760(v18);
  BOOL v20 = *(void *)&v55[8] < v19;
  if (*(void *)&v55[8] < v19 && v17)
  {
    uint64_t v22 = sub_46C8EC(*a2, (uint64_t)a2[1]);
    int v23 = v22 == sub_46C8EC(v18, *(uint64_t *)&v55[8]);
    if (!v10) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_40:
  int v23 = v17 ^ v20 ^ 1;
  if (v10) {
    goto LABEL_18;
  }
LABEL_19:
  if (v8) {
    operator delete(v8);
  }
  if (v23) {
    return sub_45F090((uint64_t *)a1, a4);
  }
  unint64_t v25 = a2[1];
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v27 = *(void *)a1 + 1056 * (void)a2[2];
  uint64_t v28 = sub_3C80F8(v27);
  uint64_t v29 = sub_3FA3A8(v27);
  if (v29 - v28 >= 56)
  {
    if (v29 - v28 != 56)
    {
      unint64_t v30 = (v29 - v28) / 0x38uLL;
      do
      {
        uint64_t v31 = 56 * (v30 >> 2);
        _X12 = v28 + v31;
        __asm { PRFM            #0, [X12] }
        unint64_t v38 = v28 + 56 * (v30 >> 1);
        _X11 = v38 + v31;
        __asm { PRFM            #0, [X11] }
        BOOL v41 = *(void *)(v38 + 32) <= (unint64_t)v25;
        BOOL v42 = *(void *)(v38 + 24) < (unint64_t)v25;
        if (!a3) {
          BOOL v41 = v42;
        }
        if (v41) {
          unint64_t v43 = v30 >> 1;
        }
        else {
          unint64_t v43 = 0;
        }
        v28 += 56 * v43;
        v30 -= v30 >> 1;
      }
      while ((uint64_t)v30 > 1);
    }
    BOOL v44 = *(void *)(v28 + 32) <= (unint64_t)v25;
    if (!a3) {
      BOOL v44 = *(void *)(v28 + 24) < (unint64_t)v25;
    }
    v28 += 56 * v44;
  }
  uint64_t v54 = v28;
  if (v28 == sub_3FA3A8(v27))
  {
    v27 += 1056;
    if (v27 == v26) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v54 = sub_3C80F8(v27);
    }
  }
  memset(v55, 0, sizeof(v55));
  uint64_t v45 = *(void *)a1;
  for (*(void *)&v62[0] = v55; v45 != v27; v45 += 1056)
  {
    uint64_t v60 = sub_3FA3A8(v45);
    sub_2A98DC((void ***)v62, &v60);
  }
  if (v27 != v26)
  {
    sub_29603C((void **)v55, &v54);
    uint64_t v46 = v27 + 1056;
    uint64_t v47 = *(void *)(a1 + 8);
    for (*(void *)&v62[0] = v55; v46 != v47; v46 += 1056)
    {
      uint64_t v60 = sub_3C80F8(v46);
      sub_2A98DC((void ***)v62, &v60);
    }
  }
  __n128 result = sub_463500((uint64_t *)a1, (unint64_t *)v62);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  uint64_t v48 = *(void *)v55;
  *(void *)(a4 + 16) = *(void *)v55;
  uint64_t v49 = *(void *)&v55[8];
  *(_OWORD *)(a4 + 24) = *(_OWORD *)&v55[8];
  memset(v55, 0, sizeof(v55));
  uint64_t v50 = *(void *)&v62[0];
  *(_OWORD *)(a4 + 40) = v62[0];
  *(void *)(a4 + 56) = *(void *)&v62[1];
  memset(v62, 0, 24);
  if (v48 != v49)
  {
    uint64_t v51 = (v49 - v48) >> 3;
    uint64_t v52 = v51 - 1;
    if (v51 == 1)
    {
      uint64_t v53 = 0;
    }
    else
    {
      uint64_t v53 = 0;
      while (*(void *)(v48 + 8 * v53) == *(void *)(v50 + 8 * v53))
      {
        *(void *)(a4 + 8) = ++v53;
        if (v52 == v53)
        {
          uint64_t v53 = v52;
          break;
        }
      }
    }
    *(void *)a4 = *(void *)(v48 + 8 * v53);
  }
  return result;
}

void sub_45FAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_45FB28(void *a1, uint64_t a2)
{
  return *a1 + 1056 * a2;
}

BOOL sub_45FB38(void *a1)
{
  return *a1 == a1[1];
}

BOOL sub_45FB48(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  unsigned int v2 = *(void **)(a1 + 8);
  if (*(void **)a1 == v2) {
    return 0;
  }
  do
  {
    BOOL result = sub_46DFC8(v1);
    if (!result) {
      break;
    }
    v1 += 132;
  }
  while (v1 != v2);
  return result;
}

BOOL sub_45FB98(int ****a1)
{
  uint64_t v1 = *a1;
  unsigned int v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  do
  {
    BOOL result = sub_46DE70(v1);
    if (!result) {
      break;
    }
    v1 += 132;
  }
  while (v1 != v2);
  return result;
}

uint64_t sub_45FBE8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

BOOL sub_45FBF0(uint64_t a1)
{
  return sub_475124((int *)(*(void *)a1 + 448));
}

uint64_t sub_45FBFC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 52);
}

BOOL sub_45FC04(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 64)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 56)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 57)) {
    return 0;
  }
  return *(unsigned char *)(a1 + 48) != 0;
}

BOOL sub_45FC44(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 92) < 2u;
}

uint64_t sub_45FC54(uint64_t *a1)
{
  return sub_3AEFFC(*a1);
}

uint64_t sub_45FC5C(uint64_t a1)
{
  return sub_46CAA4(*(void *)(a1 + 8) - 1056);
}

uint64_t sub_45FC68(uint64_t *a1)
{
  return sub_40EFE8(*a1);
}

uint64_t sub_45FC70(uint64_t a1)
{
  return sub_46C8FC(*(void *)(a1 + 8) - 1056);
}

uint64_t sub_45FC7C(void *a1)
{
  return 0xF83E0F83E0F83E1 * ((uint64_t)(a1[1] - *a1) >> 5);
}

uint64_t sub_45FCA0(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  else {
    return 0xF83E0F83E0F83E1 * ((v1 - *a1) >> 5) - 1;
  }
}

BOOL sub_45FCD8(void *a1)
{
  return (unint64_t)(0xF83E0F83E0F83E1 * ((uint64_t)(a1[1] - *a1) >> 5)) > 1;
}

uint64_t sub_45FD04(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  unsigned int v2 = *(void **)(a1 + 8);
  if (*(void **)a1 == v2) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    uint64_t v3 = v3 + sub_46C760(v1);
    v1 += 132;
  }
  while (v1 != v2);
  return v3;
}

uint64_t sub_45FD6C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  unint64_t v3 = v1 - v2 - 1056;
  if (v3 < 0x420)
  {
    uint64_t result = 0;
    uint64_t v5 = v2;
    do
    {
LABEL_8:
      result += *(void *)(v5 + 504);
      v5 += 1056;
    }
    while (v5 != v1);
    return result;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = v3 / 0x420 + 1;
  uint64_t v5 = v2 + 1056 * (v8 & 0x7FFFFFFFFFFFFELL);
  uint64_t v9 = v8 & 0x7FFFFFFFFFFFFELL;
  do
  {
    v6 += *(void *)(v2 + 504);
    v7 += *(void *)(v2 + 1560);
    v2 += 2112;
    v9 -= 2;
  }
  while (v9);
  uint64_t result = v7 + v6;
  if (v8 != (v8 & 0x7FFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_45FE10(uint64_t a1)
{
  return *(unsigned int *)(*(void *)a1 + 512);
}

uint64_t sub_45FE1C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 92);
}

uint64_t sub_45FE24(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_45FE2C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 92) = a2;
  return result;
}

uint64_t sub_45FE34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 88) = a2;
  return result;
}

std::string *sub_45FE3C(std::string *a1, const std::string::value_type *a2)
{
  uint64_t v2 = a1 + 4;
  std::string::size_type v3 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    std::string::size_type v4 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    std::string::size_type v4 = v3;
  }
  return std::string::append(v2, a2, v4);
}

uint64_t sub_45FE5C(uint64_t a1)
{
  return a1 + 96;
}

void **sub_45FE64(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    std::string::size_type v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_3AFFFC(v3 - 1056);
      while ((void *)v3 != v2);
      std::string::size_type v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_45FEC0(uint64_t a1, void *a2, void *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 49) = 0;
  *(unsigned char *)(a1 + 53) = 1;
  *(_DWORD *)(a1 + 54) = 0;
  *(_DWORD *)(a1 + 57) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(unsigned char *)(a1 + 92) = 0;
  uint64_t v6 = sub_5231C((uint64_t)a2);
  if (*(char *)(v6 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 96), *(void **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    *(void *)(a1 + 112) = *(void *)(v6 + 16);
    *(_OWORD *)(a1 + 96) = v7;
  }
  unint64_t v8 = sub_EA8440(a2);
  if (v8)
  {
    uint64_t v9 = 0;
    for (uint64_t i = 0; i != v8; ++i)
    {
      uint64_t v11 = sub_EA8060(a2, i);
      uint64_t v12 = *a3 + v9;
      long long v20 = 0u;
      int v16 = 0;
      int v14 = 0x7FFFFFFF;
      uint64_t v15 = 0x7FFFFFFF7FFFFFFFLL;
      long long v18 = 0;
      uint64_t v19 = 0;
      __n128 __p = 0;
      *(void *)&long long v20 = 0x8000000080000000;
      DWORD2(v20) = 0x7FFFFFFF;
      sub_4600B0(a1, v11, v12, (uint64_t)&v14);
      if (__p)
      {
        long long v18 = __p;
        operator delete(__p);
      }
      v9 += 288;
    }
  }
  return a1;
}

void sub_46002C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if ((*(char *)(v13 + 119) & 0x80000000) == 0)
  {
    sub_45FE64((void **)v13);
    _Unwind_Resume(a1);
  }
  operator delete(*a9);
  sub_45FE64((void **)v13);
  _Unwind_Resume(a1);
}

void sub_4600B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_46B054(v8, a2, a3, a4, &__p);
  sub_45E7A0(a1, (uint64_t)v8);
  sub_3AFFFC((uint64_t)v8);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_46013C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_46016C(uint64_t a1, uint64_t a2, long long *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 49) = 0;
  *(unsigned char *)(a1 + 53) = 1;
  *(_DWORD *)(a1 + 54) = 0;
  *(_DWORD *)(a1 + 57) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(unsigned char *)(a1 + 92) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 96), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    *(void *)(a1 + 112) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 96) = v5;
  }
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 120);
  sub_45E7A0(a1, a2);
  return a1;
}

void sub_460214(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (!*v1) {
    _Unwind_Resume(exception_object);
  }
  uint64_t v4 = (uint64_t)v1[1];
  long long v5 = *v1;
  if ((void *)v4 != v3)
  {
    do
      uint64_t v4 = sub_3AFFFC(v4 - 1056);
    while ((void *)v4 != v3);
    long long v5 = *v1;
  }
  v1[1] = v3;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

void sub_460288(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_463C44(a1, (uint64_t)v5);
  sub_463F84(a1, (uint64_t)__p);
  sub_464078(a2, (uint64_t)v5, (uint64_t)__p, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_46030C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    int v14 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v14 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

void sub_460358(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_460288(a1, (uint64_t)&v13);
  sub_46426C(a1, (uint64_t)&v20);
  sub_464360(a1, (uint64_t)&v18);
  *(void *)unint64_t v8 = 0;
  *(_OWORD *)&v8[8] = xmmword_20E7D40;
  uint64_t v9 = v20;
  uint64_t v4 = v20;
  long long v10 = v21;
  long long v5 = (void *)v21;
  long long v20 = 0;
  long long v21 = 0uLL;
  uint64_t v6 = v18;
  __n128 __p = v18;
  uint64_t v7 = v19;
  long long v12 = v19;
  long long v18 = 0;
  long long v19 = 0uLL;
  if (v4 != v5)
  {
    *(void *)&v8[16] = ((v7 - (uint64_t)v6) >> 4) - 1;
    *(_OWORD *)unint64_t v8 = v6[*(void *)&v8[16]];
  }
  sub_3BD6C8(a2, &v13);
  sub_3BD6C8(a2 + 72, (long long *)v8);
  if (__p)
  {
    *(void *)&long long v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    *(void *)&long long v10 = v9;
    operator delete(v9);
  }
  if (v16)
  {
    BOOL v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    uint64_t v15 = v14;
    operator delete(v14);
  }
}

void sub_460478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  long long v13 = *(void **)(v11 - 40);
  if (v13)
  {
    *(void *)(v11 - 32) = v13;
    operator delete(v13);
    sub_39EB70((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_4604B4(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_464454(a1, (uint64_t)&v15);
  sub_464548(a1, (uint64_t)&v13);
  *(void *)unint64_t v8 = 0;
  *(_OWORD *)&v8[8] = xmmword_20E7D40;
  uint64_t v9 = v15;
  uint64_t v4 = v15;
  long long v10 = v16;
  long long v5 = (void *)v16;
  uint64_t v15 = 0;
  long long v16 = 0uLL;
  uint64_t v6 = v13;
  __n128 __p = v13;
  uint64_t v7 = v14;
  long long v12 = v14;
  long long v13 = 0;
  long long v14 = 0uLL;
  if (v4 != v5)
  {
    *(void *)&v8[16] = ((v7 - (uint64_t)v6) >> 4) - 1;
    *(_OWORD *)unint64_t v8 = v6[*(void *)&v8[16]];
  }
  sub_3BD6C8(a2, (long long *)v8);
  sub_3BD6C8(a2 + 72, (long long *)v8);
  if (__p)
  {
    *(void *)&long long v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    *(void *)&long long v10 = v9;
    operator delete(v9);
  }
}

void sub_46059C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = (void *)v9[6];
  if (v11)
  {
    v9[7] = v11;
    operator delete(v11);
    long long v12 = (void *)v9[3];
    if (!v12)
    {
LABEL_3:
      sub_39EB70(&a9);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    long long v12 = (void *)v9[3];
    if (!v12) {
      goto LABEL_3;
    }
  }
  v9[4] = v12;
  operator delete(v12);
  sub_39EB70(&a9);
  _Unwind_Resume(a1);
}

void sub_4605E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_4605FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 40);
  if (v3)
  {
    *(void *)(v1 - 32) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_460618(int ****a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  do
  {
    BOOL result = sub_46C908(v1);
    if (!result) {
      break;
    }
    v1 += 132;
  }
  while (v1 != v2);
  return result;
}

uint64_t sub_460668(uint64_t a1, void *a2, void *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 49) = 0;
  *(unsigned char *)(a1 + 53) = 1;
  *(_DWORD *)(a1 + 54) = 0;
  *(_DWORD *)(a1 + 57) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(unsigned char *)(a1 + 92) = 0;
  uint64_t v6 = sub_5231C((uint64_t)a2);
  if (*(char *)(v6 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 96), *(void **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    *(void *)(a1 + 112) = *(void *)(v6 + 16);
    *(_OWORD *)(a1 + 96) = v7;
  }
  unint64_t v8 = sub_EA9088(a2);
  if (v8)
  {
    uint64_t v9 = 0;
    for (uint64_t i = 0; i != v8; ++i)
    {
      uint64_t v11 = sub_EA8DF4(a2, i);
      uint64_t v12 = *a3 + v9;
      long long v20 = 0u;
      int v16 = 0;
      int v14 = 0x7FFFFFFF;
      uint64_t v15 = 0x7FFFFFFF7FFFFFFFLL;
      long long v18 = 0;
      uint64_t v19 = 0;
      __n128 __p = 0;
      *(void *)&long long v20 = 0x8000000080000000;
      DWORD2(v20) = 0x7FFFFFFF;
      sub_460858(a1, v11, v12, (uint64_t)&v14);
      if (__p)
      {
        long long v18 = __p;
        operator delete(__p);
      }
      v9 += 288;
    }
  }
  return a1;
}

void sub_4607D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if ((*(char *)(v13 + 119) & 0x80000000) == 0)
  {
    sub_45FE64((void **)v13);
    _Unwind_Resume(a1);
  }
  operator delete(*a9);
  sub_45FE64((void **)v13);
  _Unwind_Resume(a1);
}

void sub_460858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_46FAD8(v8, a2, a3, a4, &__p);
  sub_45E7A0(a1, (uint64_t)v8);
  sub_3AFFFC((uint64_t)v8);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
}

void sub_4608E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_460914(uint64_t a1, uint64_t a2, long long *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 49) = 0;
  *(unsigned char *)(a1 + 53) = 1;
  *(_DWORD *)(a1 + 54) = 0;
  *(_DWORD *)(a1 + 57) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(unsigned char *)(a1 + 92) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200((unsigned char *)(a1 + 96), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    *(void *)(a1 + 112) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 96) = v5;
  }
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 120);
  sub_45E7A0(a1, a2);
  return a1;
}

void sub_4609BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (!*v1) {
    _Unwind_Resume(exception_object);
  }
  uint64_t v4 = (uint64_t)v1[1];
  long long v5 = *v1;
  if ((void *)v4 != v3)
  {
    do
      uint64_t v4 = sub_3AFFFC(v4 - 1056);
    while ((void *)v4 != v3);
    long long v5 = *v1;
  }
  v1[1] = v3;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

void sub_460A30(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_46463C(a1, (uint64_t)v5);
  sub_46497C(a1, (uint64_t)__p);
  sub_464A70(a2, (uint64_t)v5, (uint64_t)__p, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_460AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    int v14 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v14 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

void sub_460B00(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_460A30(a1, (uint64_t)&v13);
  sub_464C64(a1, (uint64_t)&v20);
  sub_464D58(a1, (uint64_t)&v18);
  *(void *)unint64_t v8 = 0;
  *(_OWORD *)&v8[8] = xmmword_20E7D40;
  uint64_t v9 = v20;
  uint64_t v4 = v20;
  long long v10 = v21;
  long long v5 = (void *)v21;
  long long v20 = 0;
  long long v21 = 0uLL;
  uint64_t v6 = v18;
  __n128 __p = v18;
  uint64_t v7 = v19;
  long long v12 = v19;
  long long v18 = 0;
  long long v19 = 0uLL;
  if (v4 != v5)
  {
    *(void *)&v8[16] = ((v7 - (uint64_t)v6) >> 4) - 1;
    *(_OWORD *)unint64_t v8 = v6[*(void *)&v8[16]];
  }
  sub_3BD7E4(a2, &v13);
  sub_3BD7E4(a2 + 72, (long long *)v8);
  if (__p)
  {
    *(void *)&long long v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    *(void *)&long long v10 = v9;
    operator delete(v9);
  }
  if (v16)
  {
    BOOL v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    uint64_t v15 = v14;
    operator delete(v14);
  }
}

void sub_460C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  long long v13 = *(void **)(v11 - 40);
  if (v13)
  {
    *(void *)(v11 - 32) = v13;
    operator delete(v13);
    sub_39EB70((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_460C5C(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_464E4C(a1, (uint64_t)&v15);
  sub_464F40(a1, (uint64_t)&v13);
  *(void *)unint64_t v8 = 0;
  *(_OWORD *)&v8[8] = xmmword_20E7D40;
  uint64_t v9 = v15;
  uint64_t v4 = v15;
  long long v10 = v16;
  long long v5 = (void *)v16;
  uint64_t v15 = 0;
  long long v16 = 0uLL;
  uint64_t v6 = v13;
  __n128 __p = v13;
  uint64_t v7 = v14;
  long long v12 = v14;
  long long v13 = 0;
  long long v14 = 0uLL;
  if (v4 != v5)
  {
    *(void *)&v8[16] = ((v7 - (uint64_t)v6) >> 4) - 1;
    *(_OWORD *)unint64_t v8 = v6[*(void *)&v8[16]];
  }
  sub_3BD7E4(a2, (long long *)v8);
  sub_3BD7E4(a2 + 72, (long long *)v8);
  if (__p)
  {
    *(void *)&long long v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    *(void *)&long long v10 = v9;
    operator delete(v9);
  }
}

void sub_460D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = (void *)v9[6];
  if (v11)
  {
    v9[7] = v11;
    operator delete(v11);
    long long v12 = (void *)v9[3];
    if (!v12)
    {
LABEL_3:
      sub_39EB70(&a9);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    long long v12 = (void *)v9[3];
    if (!v12) {
      goto LABEL_3;
    }
  }
  v9[4] = v12;
  operator delete(v12);
  sub_39EB70(&a9);
  _Unwind_Resume(a1);
}

void sub_460D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_460DA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 40);
  if (v3)
  {
    *(void *)(v1 - 32) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_460DC0(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  do
  {
    BOOL result = sub_470C10(v1);
    if (!result) {
      break;
    }
    v1 += 132;
  }
  while (v1 != v2);
  return result;
}

uint64_t sub_460E10(uint64_t a1)
{
  return sub_470B50(*(void *)(a1 + 8) - 1056);
}

uint64_t sub_460E1C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(a1 + 8);
  if (*(void **)a1 == v2) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    uint64_t v3 = v3 + sub_470ADC(v1);
    v1 += 132;
  }
  while (v1 != v2);
  return v3;
}

uint64_t sub_460E84(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 2);
  long long v5 = (unsigned char *)*((void *)a2 + 3);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 32) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 24) = v9;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 5);
  long long v10 = (unsigned char *)*((void *)a2 + 6);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    long long v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v13;
    long long v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 56) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_460F64(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_460F98(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 2);
  long long v5 = (unsigned char *)*((void *)a2 + 3);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 32) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 24) = v9;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 5);
  long long v10 = (unsigned char *)*((void *)a2 + 6);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    long long v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v13;
    long long v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 56) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_461078(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4610AC(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 2);
  long long v5 = (unsigned char *)*((void *)a2 + 3);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 32) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 24) = v9;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 5);
  long long v10 = (unsigned char *)*((void *)a2 + 6);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    long long v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v13;
    long long v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 56) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_46118C(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

char *sub_4611C0@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    BOOL result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46B058();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      BOOL result = sub_4612B4((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_461294(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_4612B4(char **a1, char *a2, _OWORD *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      *(_OWORD *)uint64_t v8 = *a3;
      a1[1] = v8 + 16;
    }
    else
    {
      long long v10 = v8 + 16;
      uint64_t v11 = (long long *)(v5 - 16);
      int64_t v12 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          long long v13 = *v11++;
          *(_OWORD *)int64_t v12 = v13;
          v12 += 16;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10) {
        memmove((void *)(v5 - 16 * ((uint64_t)(v5 - (void)v10) >> 4)), v8, v5 - (void)v10);
      }
      *(_OWORD *)uint64_t v8 = *a3;
    }
    return v8;
  }
  unint64_t v14 = ((uint64_t)(v5 - (void)v6) >> 4) + 1;
  if (v14 >> 60) {
    sub_2E00();
  }
  uint64_t v16 = v9 - (void)v6;
  if (v16 >> 3 > v14) {
    unint64_t v14 = v16 >> 3;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v14;
  }
  if (v17)
  {
    if (v17 >> 60) {
      sub_188D718();
    }
    long long v18 = (char *)operator new(16 * v17);
    uint64_t v19 = v7 >> 4;
    long long v20 = &v18[16 * (v7 >> 4)];
    long long v21 = &v18[16 * v17];
    if (v7 >> 4 != v17) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  long long v18 = 0;
  uint64_t v19 = v7 >> 4;
  long long v20 = (char *)(16 * (v7 >> 4));
  long long v21 = 0;
  if (!(v7 >> 4))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v7 >> 3;
      }
      if (v23 >> 60) {
        sub_188D718();
      }
      long long v24 = (char *)operator new(16 * v23);
      long long v20 = &v24[16 * (v23 >> 2)];
      long long v21 = &v24[16 * v23];
      if (v18)
      {
        operator delete(v18);
        uint64_t v6 = *a1;
      }
    }
    else
    {
      if (v19 >= -1) {
        unint64_t v22 = v19 + 1;
      }
      else {
        unint64_t v22 = v19 + 2;
      }
      v20 -= 16 * (v22 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)long long v20 = *a3;
  unint64_t v25 = v20;
  if (v6 != v8)
  {
    uint64_t v26 = v8;
    uint64_t v27 = v20;
    do
    {
      unint64_t v25 = v27 - 16;
      *((_OWORD *)v27 - 1) = *((_OWORD *)v26 - 1);
      v26 -= 16;
      v27 -= 16;
    }
    while (v26 != v6);
  }
  uint64_t v28 = a1[1];
  int64_t v29 = v28 - v8;
  if (v28 != v8) {
    memmove(v20 + 16, v8, v28 - v8);
  }
  unint64_t v30 = *a1;
  *a1 = v25;
  a1[1] = &v20[v29 + 16];
  a1[2] = v21;
  if (v30) {
    operator delete(v30);
  }
  return v20;
}

void sub_4614E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_461500@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    BOOL result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46B060();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      BOOL result = sub_4612B4((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_4615D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_4615F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  *(void *)(a1 + 40) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  unint64_t v5 = (uint64_t *)(a1 + 48);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a3;
  *(void *)(a1 + 64) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v7 != v6)
  {
    if (a4)
    {
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = ((*(void *)(a1 + 56) - v8) >> 4) - 1;
      *(void *)(a1 + 16) = v9;
      long long v10 = (_OWORD *)(v8 + 16 * v9);
LABEL_21:
      *(_OWORD *)a1 = *v10;
      return a1;
    }
    unint64_t v11 = *(void *)(a1 + 16);
    if (v11 >= ((v6 - v7) >> 4) - 1)
    {
LABEL_20:
      long long v10 = (_OWORD *)(v7 + 16 * v11);
      goto LABEL_21;
    }
    while (1)
    {
      int64_t v12 = (void **)(v7 + 16 * v11);
      uint64_t v13 = *v5;
      unint64_t v14 = (void **)(*v5 + 16 * v11);
      if (*v12)
      {
        unint64_t v15 = *(void *)(v7 + 16 * v11 + 8);
        unint64_t v16 = sub_46C760(*v12);
        BOOL v17 = v15 < v16;
        long long v18 = *v14;
        if (!*v14)
        {
          if (v15 < v16) {
            goto LABEL_19;
          }
          goto LABEL_7;
        }
      }
      else
      {
        long long v18 = *v14;
        if (!*v14) {
          goto LABEL_7;
        }
        BOOL v17 = 0;
      }
      uint64_t v19 = v13 + 16 * v11;
      unint64_t v22 = *(void *)(v19 + 8);
      long long v20 = (uint64_t *)(v19 + 8);
      unint64_t v21 = v22;
      unint64_t v23 = sub_46C760(v18);
      if (v22 < v23 && v17)
      {
        uint64_t v25 = sub_46C8EC(*v12, *(void *)(v7 + 16 * v11 + 8));
        if (v25 != sub_46C8EC(*v14, *v20))
        {
LABEL_19:
          unint64_t v11 = *(void *)(a1 + 16);
          uint64_t v7 = *(void *)(a1 + 24);
          goto LABEL_20;
        }
      }
      else if ((v17 ^ (v21 < v23)))
      {
        goto LABEL_19;
      }
LABEL_7:
      uint64_t v7 = *(void *)(a1 + 24);
      unint64_t v11 = *(void *)(a1 + 16) + 1;
      *(void *)(a1 + 16) = v11;
      if (v11 >= ((*(void *)(a1 + 32) - v7) >> 4) - 1) {
        goto LABEL_19;
      }
    }
  }
  return a1;
}

void sub_4617AC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[7] = v4;
    operator delete(v4);
    unint64_t v5 = (void *)v1[3];
    if (!v5) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v5 = (void *)v1[3];
    if (!v5) {
      goto LABEL_3;
    }
  }
  v1[4] = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

char *sub_4617E8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    BOOL result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46B058();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      BOOL result = sub_4612B4((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_4618BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_4618DC@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    BOOL result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46B060();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      BOOL result = sub_4612B4((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_4619B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_4619D0@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    BOOL result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46B058();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      BOOL result = sub_4612B4((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_461AA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_461AC4@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    BOOL result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46B060();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      BOOL result = sub_4612B4((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_461B98(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_461BB8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    BOOL result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46B058();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      BOOL result = sub_4612B4((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_461C8C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_461CAC@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    BOOL result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46B060();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      BOOL result = sub_4612B4((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_461D80(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_461DA0@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  if (v4 != *result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *result) >> 5);
    if (v5 >> 61) {
      sub_2E00();
    }
    BOOL result = (uint64_t *)operator new(0x7C1F07C1F07C1F08 * ((v4 - *result) >> 5));
    uint64_t v6 = result;
    *a2 = (unint64_t)result;
    a2[1] = (unint64_t)result;
    for (a2[2] = (unint64_t)&result[v5]; v3 != v4; v3 += 1056)
    {
      uint64_t v7 = sub_3C80F8(v3);
      BOOL result = (uint64_t *)sub_461E94(a2, v6, &v7);
      uint64_t v6 = result + 1;
    }
  }
  return result;
}

void sub_461E74(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_461E94(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  long long v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)long long v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        uint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          uint64_t v19 = (void *)(v5 + v21);
          unint64_t v22 = (_OWORD *)(v5 + 16);
          unint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)long long v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    unint64_t v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    unint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    unint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    uint64_t v54 = (char *)operator new(8 * v53);
    uint64_t v31 = &v54[8 * (v53 >> 2)];
    unint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      unint64_t v55 = &v54[8 * v53];
      operator delete(v30);
      unint64_t v32 = v55;
      long long v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      unint64_t v35 = v31 + 8;
      long long v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  long long v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  unint64_t v35 = v31 + 8;
  long long v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    long long v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    long long v39 = v9;
    long long v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    long long v39 = v9;
    long long v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    long long v39 = &v9[-v41];
    long long v36 = &v31[-v41];
    BOOL v42 = v31 - 16;
    unint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)BOOL v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    unint64_t v32 = v51;
  }
  uint64_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_4621EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_462204@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  if (v4 != *result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *result) >> 5);
    if (v5 >> 61) {
      sub_2E00();
    }
    BOOL result = (uint64_t *)operator new(0x7C1F07C1F07C1F08 * ((v4 - *result) >> 5));
    unint64_t v6 = result;
    *a2 = (unint64_t)result;
    a2[1] = (unint64_t)result;
    for (a2[2] = (unint64_t)&result[v5]; v3 != v4; v3 += 1056)
    {
      uint64_t v7 = sub_3FA3A8(v3);
      BOOL result = (uint64_t *)sub_461E94(a2, v6, &v7);
      unint64_t v6 = result + 1;
    }
  }
  return result;
}

void sub_4622D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_4622F8@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  if (v4 != *result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *result) >> 5);
    if (v5 >> 61) {
      sub_2E00();
    }
    BOOL result = (uint64_t *)operator new(0x7C1F07C1F07C1F08 * ((v4 - *result) >> 5));
    unint64_t v6 = result;
    *a2 = (unint64_t)result;
    a2[1] = (unint64_t)result;
    for (a2[2] = (unint64_t)&result[v5]; v3 != v4; v3 += 1056)
    {
      uint64_t v7 = sub_3C80F8(v3);
      BOOL result = (uint64_t *)sub_461E94(a2, v6, &v7);
      unint64_t v6 = result + 1;
    }
  }
  return result;
}

void sub_4623CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_4623EC@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  if (v4 != *result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *result) >> 5);
    if (v5 >> 61) {
      sub_2E00();
    }
    BOOL result = (uint64_t *)operator new(0x7C1F07C1F07C1F08 * ((v4 - *result) >> 5));
    unint64_t v6 = result;
    *a2 = (unint64_t)result;
    a2[1] = (unint64_t)result;
    for (a2[2] = (unint64_t)&result[v5]; v3 != v4; v3 += 1056)
    {
      uint64_t v7 = sub_3FA3A8(v3);
      BOOL result = (uint64_t *)sub_461E94(a2, v6, &v7);
      unint64_t v6 = result + 1;
    }
  }
  return result;
}

void sub_4624C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_4624E0@<X0>(void *result@<X0>, unsigned char **a2@<X1>, unint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v6 = (uint64_t *)*result;
  unint64_t v5 = (uint64_t *)result[1];
  if (v5 != (uint64_t *)*result)
  {
    unint64_t v7 = 0xF83E0F83E0F83E1 * (((uint64_t)v5 - *result) >> 5);
    if (v7 >> 61) {
      sub_2E00();
    }
    BOOL result = operator new(0x7C1F07C1F07C1F08 * (((uint64_t)v5 - *result) >> 5));
    uint64_t v8 = result;
    *a3 = (unint64_t)result;
    a3[1] = (unint64_t)result;
    a3[2] = (unint64_t)&result[v7];
    if (v5 != v6)
    {
      long long v9 = *a2;
      do
      {
        switch(*v9)
        {
          case 1:
            unint64_t v10 = v6 + 69;
            break;
          case 2:
            unint64_t v10 = v6 + 72;
            break;
          default:
            unint64_t v10 = v6 + 66;
            break;
        }
        uint64_t v11 = *v10;
        BOOL result = sub_462630(a3, v8, &v11);
        uint64_t v8 = result + 1;
        v6 += 132;
      }
      while (v6 != v5);
    }
  }
  return result;
}

void sub_4625F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_462630(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  long long v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)long long v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        uint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          uint64_t v19 = (void *)(v5 + v21);
          unint64_t v22 = (_OWORD *)(v5 + 16);
          unint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)long long v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    unint64_t v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    unint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    unint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    uint64_t v54 = (char *)operator new(8 * v53);
    uint64_t v31 = &v54[8 * (v53 >> 2)];
    unint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      unint64_t v55 = &v54[8 * v53];
      operator delete(v30);
      unint64_t v32 = v55;
      long long v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      unint64_t v35 = v31 + 8;
      long long v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  long long v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  unint64_t v35 = v31 + 8;
  long long v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    long long v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    long long v39 = v9;
    long long v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    long long v39 = v9;
    long long v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    long long v39 = &v9[-v41];
    long long v36 = &v31[-v41];
    BOOL v42 = v31 - 16;
    unint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)BOOL v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    unint64_t v32 = v51;
  }
  uint64_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_462988(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_4629A0@<X0>(void *result@<X0>, unsigned char **a2@<X1>, unint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = *result;
  uint64_t v5 = result[1];
  if (v5 != *result)
  {
    unint64_t v7 = 0xF83E0F83E0F83E1 * ((v5 - *result) >> 5);
    if (v7 >> 61) {
      sub_2E00();
    }
    BOOL result = operator new(0x7C1F07C1F07C1F08 * ((v5 - *result) >> 5));
    uint64_t v8 = result;
    *a3 = (unint64_t)result;
    a3[1] = (unint64_t)result;
    a3[2] = (unint64_t)&result[v7];
    if (v5 != v6)
    {
      long long v9 = *a2;
      do
      {
        switch(*v9)
        {
          case 1:
            uint64_t v10 = v6 + 552;
            break;
          case 2:
            uint64_t v10 = v6 + 576;
            break;
          default:
            uint64_t v10 = v6 + 528;
            break;
        }
        uint64_t v11 = *(void *)(v10 + 8);
        BOOL result = sub_462630(a3, v8, &v11);
        uint64_t v8 = result + 1;
        v6 += 1056;
      }
      while (v6 != v5);
    }
  }
  return result;
}

void sub_462AB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_462AF0@<X0>(void *result@<X0>, unsigned char **a2@<X1>, unint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (uint64_t *)*result;
  uint64_t v5 = (uint64_t *)result[1];
  if (v5 != (uint64_t *)*result)
  {
    unint64_t v7 = 0xF83E0F83E0F83E1 * (((uint64_t)v5 - *result) >> 5);
    if (v7 >> 61) {
      sub_2E00();
    }
    BOOL result = operator new(0x7C1F07C1F07C1F08 * (((uint64_t)v5 - *result) >> 5));
    uint64_t v8 = result;
    *a3 = (unint64_t)result;
    a3[1] = (unint64_t)result;
    a3[2] = (unint64_t)&result[v7];
    if (v5 != v6)
    {
      long long v9 = *a2;
      do
      {
        switch(*v9)
        {
          case 1:
            uint64_t v10 = v6 + 69;
            break;
          case 2:
            uint64_t v10 = v6 + 72;
            break;
          default:
            uint64_t v10 = v6 + 66;
            break;
        }
        uint64_t v11 = *v10;
        BOOL result = sub_462630(a3, v8, &v11);
        uint64_t v8 = result + 1;
        v6 += 132;
      }
      while (v6 != v5);
    }
  }
  return result;
}

void sub_462C08(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_462C40@<X0>(void *result@<X0>, unsigned char **a2@<X1>, unint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = *result;
  uint64_t v5 = result[1];
  if (v5 != *result)
  {
    unint64_t v7 = 0xF83E0F83E0F83E1 * ((v5 - *result) >> 5);
    if (v7 >> 61) {
      sub_2E00();
    }
    BOOL result = operator new(0x7C1F07C1F07C1F08 * ((v5 - *result) >> 5));
    uint64_t v8 = result;
    *a3 = (unint64_t)result;
    a3[1] = (unint64_t)result;
    a3[2] = (unint64_t)&result[v7];
    if (v5 != v6)
    {
      long long v9 = *a2;
      do
      {
        switch(*v9)
        {
          case 1:
            uint64_t v10 = v6 + 552;
            break;
          case 2:
            uint64_t v10 = v6 + 576;
            break;
          default:
            uint64_t v10 = v6 + 528;
            break;
        }
        uint64_t v11 = *(void *)(v10 + 8);
        BOOL result = sub_462630(a3, v8, &v11);
        uint64_t v8 = result + 1;
        v6 += 1056;
      }
      while (v6 != v5);
    }
  }
  return result;
}

void sub_462D58(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_462D90@<X0>(void *result@<X0>, unsigned __int8 **a2@<X1>, unint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = *result;
  uint64_t v5 = result[1];
  if (v5 != *result)
  {
    unint64_t v7 = 0xF83E0F83E0F83E1 * ((v5 - *result) >> 5);
    if (v7 >> 61) {
      sub_2E00();
    }
    BOOL result = operator new(0x7C1F07C1F07C1F08 * ((v5 - *result) >> 5));
    uint64_t v8 = result;
    *a3 = (unint64_t)result;
    a3[1] = (unint64_t)result;
    a3[2] = (unint64_t)&result[v7];
    if (v5 != v6)
    {
      long long v9 = *a2;
      do
      {
        uint64_t v10 = *(void *)(v6 + 24 * *v9 + 864);
        BOOL result = sub_462E90(a3, v8, &v10);
        uint64_t v8 = result + 1;
        v6 += 1056;
      }
      while (v6 != v5);
    }
  }
  return result;
}

void sub_462E70(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_462E90(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  long long v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)long long v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        uint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          uint64_t v19 = (void *)(v5 + v21);
          unint64_t v22 = (_OWORD *)(v5 + 16);
          unint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)long long v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    unint64_t v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    unint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    unint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    uint64_t v54 = (char *)operator new(8 * v53);
    uint64_t v31 = &v54[8 * (v53 >> 2)];
    unint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      unint64_t v55 = &v54[8 * v53];
      operator delete(v30);
      unint64_t v32 = v55;
      long long v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      unint64_t v35 = v31 + 8;
      long long v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  long long v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  unint64_t v35 = v31 + 8;
  long long v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    long long v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    long long v39 = v9;
    long long v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    long long v39 = v9;
    long long v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    long long v39 = &v9[-v41];
    long long v36 = &v31[-v41];
    BOOL v42 = v31 - 16;
    unint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)BOOL v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    unint64_t v32 = v51;
  }
  uint64_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_4631E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_463200@<X0>(void *result@<X0>, unsigned __int8 **a2@<X1>, unint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = *result;
  uint64_t v5 = result[1];
  if (v5 != *result)
  {
    unint64_t v7 = 0xF83E0F83E0F83E1 * ((v5 - *result) >> 5);
    if (v7 >> 61) {
      sub_2E00();
    }
    BOOL result = operator new(0x7C1F07C1F07C1F08 * ((v5 - *result) >> 5));
    uint64_t v8 = result;
    *a3 = (unint64_t)result;
    a3[1] = (unint64_t)result;
    a3[2] = (unint64_t)&result[v7];
    if (v5 != v6)
    {
      long long v9 = *a2;
      do
      {
        uint64_t v10 = *(void *)(v6 + 24 * *v9 + 872);
        BOOL result = sub_462E90(a3, v8, &v10);
        uint64_t v8 = result + 1;
        v6 += 1056;
      }
      while (v6 != v5);
    }
  }
  return result;
}

void sub_4632E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_463300@<X0>(void *result@<X0>, unsigned __int8 **a2@<X1>, unint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = *result;
  uint64_t v5 = result[1];
  if (v5 != *result)
  {
    unint64_t v7 = 0xF83E0F83E0F83E1 * ((v5 - *result) >> 5);
    if (v7 >> 61) {
      sub_2E00();
    }
    BOOL result = operator new(0x7C1F07C1F07C1F08 * ((v5 - *result) >> 5));
    uint64_t v8 = result;
    *a3 = (unint64_t)result;
    a3[1] = (unint64_t)result;
    a3[2] = (unint64_t)&result[v7];
    if (v5 != v6)
    {
      long long v9 = *a2;
      do
      {
        uint64_t v10 = *(void *)(v6 + 24 * *v9 + 864);
        BOOL result = sub_462E90(a3, v8, &v10);
        uint64_t v8 = result + 1;
        v6 += 1056;
      }
      while (v6 != v5);
    }
  }
  return result;
}

void sub_4633E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_463400@<X0>(void *result@<X0>, unsigned __int8 **a2@<X1>, unint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = *result;
  uint64_t v5 = result[1];
  if (v5 != *result)
  {
    unint64_t v7 = 0xF83E0F83E0F83E1 * ((v5 - *result) >> 5);
    if (v7 >> 61) {
      sub_2E00();
    }
    BOOL result = operator new(0x7C1F07C1F07C1F08 * ((v5 - *result) >> 5));
    uint64_t v8 = result;
    *a3 = (unint64_t)result;
    a3[1] = (unint64_t)result;
    a3[2] = (unint64_t)&result[v7];
    if (v5 != v6)
    {
      long long v9 = *a2;
      do
      {
        uint64_t v10 = *(void *)(v6 + 24 * *v9 + 872);
        BOOL result = sub_462E90(a3, v8, &v10);
        uint64_t v8 = result + 1;
        v6 += 1056;
      }
      while (v6 != v5);
    }
  }
  return result;
}

void sub_4634E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_463500@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  if (v4 != *result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *result) >> 5);
    if (v5 >> 61) {
      sub_2E00();
    }
    BOOL result = (uint64_t *)operator new(0x7C1F07C1F07C1F08 * ((v4 - *result) >> 5));
    uint64_t v6 = result;
    *a2 = (unint64_t)result;
    a2[1] = (unint64_t)result;
    for (a2[2] = (unint64_t)&result[v5]; v3 != v4; v3 += 1056)
    {
      uint64_t v7 = sub_3FA3A8(v3);
      BOOL result = (uint64_t *)sub_461E94(a2, v6, &v7);
      uint64_t v6 = result + 1;
    }
  }
  return result;
}

void sub_4635D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_4635F4(void **a1, uint64_t a2)
{
  uint64_t v3 = 0xF83E0F83E0F83E1 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x3E0F83E0F83E0FLL) {
    sub_2E00();
  }
  if (0x1F07C1F07C1F07C2 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0x1F07C1F07C1F07C2 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if ((unint64_t)(0xF83E0F83E0F83E1 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5)) >= 0x1F07C1F07C1F07) {
    unint64_t v6 = 0x3E0F83E0F83E0FLL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x3E0F83E0F83E0FLL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(1056 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[1056 * v6];
  sub_463750((uint64_t)&v7[1056 * v3], a2);
  uint64_t v10 = v9 + 1056;
  uint64_t v12 = (char *)*a1;
  int64_t v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v8;
    if (!v11) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v11 -= 1056;
    sub_463750((uint64_t)(v9 - 1056), (uint64_t)v11);
  }
  while (v11 != v12);
  uint64_t v13 = (char *)*a1;
  int64_t v11 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v8;
  if (v11 != v13)
  {
    do
    {
      v11 -= 1056;
      sub_3AFFFC((uint64_t)v11);
    }
    while (v11 != v13);
    int64_t v11 = v13;
  }
  if (v11) {
LABEL_17:
  }
    operator delete(v11);
  return v10;
}

double sub_463750(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  long long v2 = *(_OWORD *)(a2 + 152);
  uint64_t v3 = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v2;
  *(void *)(a1 + 184) = v3;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  if (*(_DWORD *)(a2 + 264) <= 1u) {
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
  }
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
  long long v4 = *(_OWORD *)(a2 + 312);
  uint64_t v5 = *(void *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = v4;
  *(void *)(a1 + 344) = v5;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a2 + 352) = 0;
  *(void *)(a2 + 360) = 0;
  *(void *)(a2 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  uint64_t v6 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v6;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a2 + 376) = 0;
  *(void *)(a2 + 384) = 0;
  *(void *)(a2 + 392) = 0;
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a2 + 424);
  if (*(_DWORD *)(a2 + 424) <= 1u) {
    *(void *)(a1 + 416) = *(void *)(a2 + 416);
  }
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  uint64_t v7 = *(void *)(a2 + 448);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(void *)(a1 + 448) = v7;
  *(void *)(a1 + 464) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(void *)(a2 + 480) = 0;
  *(_OWORD *)(a2 + 464) = 0u;
  uint64_t v9 = *(void *)(a2 + 488);
  *(_DWORD *)(a1 + 496) = *(_DWORD *)(a2 + 496);
  *(void *)(a1 + 488) = v9;
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  uint64_t v10 = *(void *)(a2 + 512);
  *(_DWORD *)(a1 + 520) = *(_DWORD *)(a2 + 520);
  *(void *)(a1 + 512) = v10;
  *(void *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a2 + 544) = 0;
  *(_OWORD *)(a2 + 528) = 0u;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(void *)(a2 + 568) = 0;
  *(_OWORD *)(a2 + 552) = 0u;
  *(void *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a2 + 592) = 0;
  *(_OWORD *)(a2 + 576) = 0u;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a2 + 616) = 0;
  *(_OWORD *)(a2 + 600) = 0u;
  *(void *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  *(void *)(a2 + 640) = 0;
  *(_OWORD *)(a2 + 624) = 0u;
  *(void *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  *(void *)(a2 + 664) = 0;
  *(_OWORD *)(a2 + 648) = 0u;
  *(void *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  *(void *)(a2 + 688) = 0;
  *(_OWORD *)(a2 + 672) = 0u;
  *(void *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  *(void *)(a1 + 704) = *(void *)(a2 + 704);
  *(void *)(a1 + 712) = *(void *)(a2 + 712);
  *(void *)(a2 + 712) = 0;
  *(_OWORD *)(a2 + 696) = 0u;
  *(void *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  *(void *)(a2 + 736) = 0;
  *(_OWORD *)(a2 + 720) = 0u;
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(void *)(a1 + 744) = *(void *)(a2 + 744);
  *(void *)(a1 + 752) = *(void *)(a2 + 752);
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  *(void *)(a2 + 760) = 0;
  *(_OWORD *)(a2 + 744) = 0u;
  long long v11 = *(_OWORD *)(a2 + 784);
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 784) = v11;
  long long v12 = *(_OWORD *)(a2 + 800);
  long long v13 = *(_OWORD *)(a2 + 816);
  long long v14 = *(_OWORD *)(a2 + 848);
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 848) = v14;
  *(_OWORD *)(a1 + 800) = v12;
  *(_OWORD *)(a1 + 816) = v13;
  *(void *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
  *(void *)(a1 + 880) = *(void *)(a2 + 880);
  *(void *)(a2 + 880) = 0;
  *(_OWORD *)(a2 + 864) = 0u;
  *(void *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  *(void *)(a2 + 904) = 0;
  *(_OWORD *)(a2 + 888) = 0u;
  *(void *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 912) = *(_OWORD *)(a2 + 912);
  *(void *)(a1 + 928) = *(void *)(a2 + 928);
  *(void *)(a2 + 928) = 0;
  *(_OWORD *)(a2 + 912) = 0u;
  *(void *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  *(void *)(a1 + 936) = *(void *)(a2 + 936);
  *(void *)(a1 + 944) = *(void *)(a2 + 944);
  *(void *)(a1 + 952) = *(void *)(a2 + 952);
  *(void *)(a2 + 952) = 0;
  *(_OWORD *)(a2 + 936) = 0u;
  *(void *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 960) = *(_OWORD *)(a2 + 960);
  *(void *)(a1 + 976) = *(void *)(a2 + 976);
  *(void *)(a2 + 976) = 0;
  *(_OWORD *)(a2 + 960) = 0u;
  *(void *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 984) = 0u;
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  *(void *)(a2 + 1000) = 0;
  *(_OWORD *)(a2 + 984) = 0u;
  *(void *)(a1 + 1024) = 0;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  *(void *)(a2 + 1024) = 0;
  *(_OWORD *)(a2 + 1008) = 0u;
  *(void *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  *(void *)(a1 + 1040) = *(void *)(a2 + 1040);
  *(void *)(a1 + 1048) = *(void *)(a2 + 1048);
  *(void *)(a2 + 1048) = 0;
  *(_OWORD *)(a2 + 1032) = 0u;
  return result;
}

char *sub_463C44@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    double result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46B058();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      double result = sub_463D38((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_463D18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_463D38(char **a1, char *a2, _OWORD *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      *(_OWORD *)uint64_t v8 = *a3;
      a1[1] = v8 + 16;
    }
    else
    {
      uint64_t v10 = v8 + 16;
      long long v11 = (long long *)(v5 - 16);
      long long v12 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          long long v13 = *v11++;
          *(_OWORD *)long long v12 = v13;
          v12 += 16;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10) {
        memmove((void *)(v5 - 16 * ((uint64_t)(v5 - (void)v10) >> 4)), v8, v5 - (void)v10);
      }
      *(_OWORD *)uint64_t v8 = *a3;
    }
    return v8;
  }
  unint64_t v14 = ((uint64_t)(v5 - (void)v6) >> 4) + 1;
  if (v14 >> 60) {
    sub_2E00();
  }
  uint64_t v16 = v9 - (void)v6;
  if (v16 >> 3 > v14) {
    unint64_t v14 = v16 >> 3;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v14;
  }
  if (v17)
  {
    if (v17 >> 60) {
      sub_188D718();
    }
    unint64_t v18 = (char *)operator new(16 * v17);
    uint64_t v19 = v7 >> 4;
    uint64_t v20 = &v18[16 * (v7 >> 4)];
    uint64_t v21 = &v18[16 * v17];
    if (v7 >> 4 != v17) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  unint64_t v18 = 0;
  uint64_t v19 = v7 >> 4;
  uint64_t v20 = (char *)(16 * (v7 >> 4));
  uint64_t v21 = 0;
  if (!(v7 >> 4))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v7 >> 3;
      }
      if (v23 >> 60) {
        sub_188D718();
      }
      uint64_t v24 = (char *)operator new(16 * v23);
      uint64_t v20 = &v24[16 * (v23 >> 2)];
      uint64_t v21 = &v24[16 * v23];
      if (v18)
      {
        operator delete(v18);
        uint64_t v6 = *a1;
      }
    }
    else
    {
      if (v19 >= -1) {
        unint64_t v22 = v19 + 1;
      }
      else {
        unint64_t v22 = v19 + 2;
      }
      v20 -= 16 * (v22 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)uint64_t v20 = *a3;
  long long v25 = v20;
  if (v6 != v8)
  {
    unint64_t v26 = v8;
    uint64_t v27 = v20;
    do
    {
      long long v25 = v27 - 16;
      *((_OWORD *)v27 - 1) = *((_OWORD *)v26 - 1);
      v26 -= 16;
      v27 -= 16;
    }
    while (v26 != v6);
  }
  uint64_t v28 = a1[1];
  int64_t v29 = v28 - v8;
  if (v28 != v8) {
    memmove(v20 + 16, v8, v28 - v8);
  }
  unint64_t v30 = *a1;
  *a1 = v25;
  a1[1] = &v20[v29 + 16];
  a1[2] = v21;
  if (v30) {
    operator delete(v30);
  }
  return v20;
}

void sub_463F6C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_463F84@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    double result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46B060();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      double result = sub_463D38((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_464058(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_464078(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  *(void *)(a1 + 40) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  unint64_t v5 = (uint64_t *)(a1 + 48);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a3;
  *(void *)(a1 + 64) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v7 != v6)
  {
    if (a4)
    {
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = ((*(void *)(a1 + 56) - v8) >> 4) - 1;
      *(void *)(a1 + 16) = v9;
      uint64_t v10 = (_OWORD *)(v8 + 16 * v9);
LABEL_21:
      *(_OWORD *)a1 = *v10;
      return a1;
    }
    unint64_t v11 = *(void *)(a1 + 16);
    if (v11 >= ((v6 - v7) >> 4) - 1)
    {
LABEL_20:
      uint64_t v10 = (_OWORD *)(v7 + 16 * v11);
      goto LABEL_21;
    }
    while (1)
    {
      long long v12 = (void **)(v7 + 16 * v11);
      uint64_t v13 = *v5;
      unint64_t v14 = (void **)(*v5 + 16 * v11);
      if (*v12)
      {
        unint64_t v15 = *(void *)(v7 + 16 * v11 + 8);
        unint64_t v16 = sub_46C760(*v12);
        BOOL v17 = v15 < v16;
        unint64_t v18 = *v14;
        if (!*v14)
        {
          if (v15 < v16) {
            goto LABEL_19;
          }
          goto LABEL_7;
        }
      }
      else
      {
        unint64_t v18 = *v14;
        if (!*v14) {
          goto LABEL_7;
        }
        BOOL v17 = 0;
      }
      uint64_t v19 = v13 + 16 * v11;
      unint64_t v22 = *(void *)(v19 + 8);
      uint64_t v20 = (uint64_t *)(v19 + 8);
      unint64_t v21 = v22;
      unint64_t v23 = sub_46C760(v18);
      if (v22 < v23 && v17)
      {
        uint64_t v25 = sub_46C8EC(*v12, *(void *)(v7 + 16 * v11 + 8));
        if (v25 != sub_46C8EC(*v14, *v20))
        {
LABEL_19:
          unint64_t v11 = *(void *)(a1 + 16);
          uint64_t v7 = *(void *)(a1 + 24);
          goto LABEL_20;
        }
      }
      else if ((v17 ^ (v21 < v23)))
      {
        goto LABEL_19;
      }
LABEL_7:
      uint64_t v7 = *(void *)(a1 + 24);
      unint64_t v11 = *(void *)(a1 + 16) + 1;
      *(void *)(a1 + 16) = v11;
      if (v11 >= ((*(void *)(a1 + 32) - v7) >> 4) - 1) {
        goto LABEL_19;
      }
    }
  }
  return a1;
}

void sub_464230(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[7] = v4;
    operator delete(v4);
    unint64_t v5 = (void *)v1[3];
    if (!v5) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v5 = (void *)v1[3];
    if (!v5) {
      goto LABEL_3;
    }
  }
  v1[4] = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

char *sub_46426C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    double result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46B058();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      double result = sub_463D38((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_464340(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_464360@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    double result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46B060();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      double result = sub_463D38((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_464434(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_464454@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    double result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46B058();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      double result = sub_463D38((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_464528(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_464548@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    double result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46B060();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      double result = sub_463D38((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_46461C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_46463C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    double result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46B058();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      double result = sub_464730((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_464710(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_464730(char **a1, char *a2, _OWORD *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      *(_OWORD *)uint64_t v8 = *a3;
      a1[1] = v8 + 16;
    }
    else
    {
      uint64_t v10 = v8 + 16;
      unint64_t v11 = (long long *)(v5 - 16);
      long long v12 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          long long v13 = *v11++;
          *(_OWORD *)long long v12 = v13;
          v12 += 16;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10) {
        memmove((void *)(v5 - 16 * ((uint64_t)(v5 - (void)v10) >> 4)), v8, v5 - (void)v10);
      }
      *(_OWORD *)uint64_t v8 = *a3;
    }
    return v8;
  }
  unint64_t v14 = ((uint64_t)(v5 - (void)v6) >> 4) + 1;
  if (v14 >> 60) {
    sub_2E00();
  }
  uint64_t v16 = v9 - (void)v6;
  if (v16 >> 3 > v14) {
    unint64_t v14 = v16 >> 3;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v14;
  }
  if (v17)
  {
    if (v17 >> 60) {
      sub_188D718();
    }
    unint64_t v18 = (char *)operator new(16 * v17);
    uint64_t v19 = v7 >> 4;
    uint64_t v20 = &v18[16 * (v7 >> 4)];
    unint64_t v21 = &v18[16 * v17];
    if (v7 >> 4 != v17) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  unint64_t v18 = 0;
  uint64_t v19 = v7 >> 4;
  uint64_t v20 = (char *)(16 * (v7 >> 4));
  unint64_t v21 = 0;
  if (!(v7 >> 4))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v7 >> 3;
      }
      if (v23 >> 60) {
        sub_188D718();
      }
      uint64_t v24 = (char *)operator new(16 * v23);
      uint64_t v20 = &v24[16 * (v23 >> 2)];
      unint64_t v21 = &v24[16 * v23];
      if (v18)
      {
        operator delete(v18);
        uint64_t v6 = *a1;
      }
    }
    else
    {
      if (v19 >= -1) {
        unint64_t v22 = v19 + 1;
      }
      else {
        unint64_t v22 = v19 + 2;
      }
      v20 -= 16 * (v22 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)uint64_t v20 = *a3;
  uint64_t v25 = v20;
  if (v6 != v8)
  {
    unint64_t v26 = v8;
    uint64_t v27 = v20;
    do
    {
      uint64_t v25 = v27 - 16;
      *((_OWORD *)v27 - 1) = *((_OWORD *)v26 - 1);
      v26 -= 16;
      v27 -= 16;
    }
    while (v26 != v6);
  }
  uint64_t v28 = a1[1];
  int64_t v29 = v28 - v8;
  if (v28 != v8) {
    memmove(v20 + 16, v8, v28 - v8);
  }
  unint64_t v30 = *a1;
  *a1 = v25;
  a1[1] = &v20[v29 + 16];
  a1[2] = v21;
  if (v30) {
    operator delete(v30);
  }
  return v20;
}

void sub_464964(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_46497C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    double result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46FF18();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      double result = sub_464730((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_464A50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_464A70(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  *(void *)(a1 + 40) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  unint64_t v5 = (uint64_t *)(a1 + 48);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a3;
  *(void *)(a1 + 64) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v7 != v6)
  {
    if (a4)
    {
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = ((*(void *)(a1 + 56) - v8) >> 4) - 1;
      *(void *)(a1 + 16) = v9;
      uint64_t v10 = (_OWORD *)(v8 + 16 * v9);
LABEL_21:
      *(_OWORD *)a1 = *v10;
      return a1;
    }
    unint64_t v11 = *(void *)(a1 + 16);
    if (v11 >= ((v6 - v7) >> 4) - 1)
    {
LABEL_20:
      uint64_t v10 = (_OWORD *)(v7 + 16 * v11);
      goto LABEL_21;
    }
    while (1)
    {
      long long v12 = (void **)(v7 + 16 * v11);
      uint64_t v13 = *v5;
      unint64_t v14 = (void **)(*v5 + 16 * v11);
      if (*v12)
      {
        unint64_t v15 = *(void *)(v7 + 16 * v11 + 8);
        unint64_t v16 = sub_470ADC(*v12);
        BOOL v17 = v15 < v16;
        unint64_t v18 = *v14;
        if (!*v14)
        {
          if (v15 < v16) {
            goto LABEL_19;
          }
          goto LABEL_7;
        }
      }
      else
      {
        unint64_t v18 = *v14;
        if (!*v14) {
          goto LABEL_7;
        }
        BOOL v17 = 0;
      }
      uint64_t v19 = v13 + 16 * v11;
      unint64_t v22 = *(void *)(v19 + 8);
      uint64_t v20 = (uint64_t *)(v19 + 8);
      unint64_t v21 = v22;
      unint64_t v23 = sub_470ADC(v18);
      if (v22 < v23 && v17)
      {
        uint64_t v25 = sub_470B40(*v12, *(void *)(v7 + 16 * v11 + 8));
        if (v25 != sub_470B40(*v14, *v20))
        {
LABEL_19:
          unint64_t v11 = *(void *)(a1 + 16);
          uint64_t v7 = *(void *)(a1 + 24);
          goto LABEL_20;
        }
      }
      else if ((v17 ^ (v21 < v23)))
      {
        goto LABEL_19;
      }
LABEL_7:
      uint64_t v7 = *(void *)(a1 + 24);
      unint64_t v11 = *(void *)(a1 + 16) + 1;
      *(void *)(a1 + 16) = v11;
      if (v11 >= ((*(void *)(a1 + 32) - v7) >> 4) - 1) {
        goto LABEL_19;
      }
    }
  }
  return a1;
}

void sub_464C28(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[7] = v4;
    operator delete(v4);
    unint64_t v5 = (void *)v1[3];
    if (!v5) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v5 = (void *)v1[3];
    if (!v5) {
      goto LABEL_3;
    }
  }
  v1[4] = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

char *sub_464C64@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    double result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46B058();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      double result = sub_464730((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_464D38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_464D58@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    double result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46FF18();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      double result = sub_464730((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_464E2C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_464E4C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    double result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46B058();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      double result = sub_464730((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_464F20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_464F40@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xF83E0F83E0F83E1 * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    double result = (char *)operator new(0xF83E0F83E0F83E10 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 1056)
    {
      sub_46FF18();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      double result = sub_464730((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_465014(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_465034()
{
  unk_25586FF = 16641;
  word_25586E8 = 65;
  byte_2558717 = 1;
  byte_2558701 = 0;
}

void *sub_46505C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v6 = a4;
  sub_4650A4(a1, &v8, &v7);
  return sub_A4710(a1 + 24, &v6);
}

void *sub_4650A4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = *(void **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 < v6)
  {
    *uint64_t v7 = *a2;
    v7[1] = *a3;
    uint64_t v8 = v7 + 2;
    goto LABEL_13;
  }
  long long v9 = *(void **)a1;
  uint64_t v10 = ((uint64_t)v7 - *(void *)a1) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
  if (!v13) {
    unint64_t v14 = v11;
  }
  if (v14 >> 60) {
    sub_188D718();
  }
  uint64_t v15 = 16 * v14;
  unint64_t v16 = (char *)operator new(16 * v14);
  uint64_t v17 = *a3;
  unint64_t v18 = &v16[16 * v10];
  uint64_t v19 = &v16[v15];
  *(void *)unint64_t v18 = *a2;
  *((void *)v18 + 1) = v17;
  uint64_t v8 = v18 + 16;
  if (v7 == v9)
  {
    *(void *)a1 = v18;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v19;
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    uint64_t v20 = v18 - 16;
    *((_OWORD *)v18 - 1) = *((_OWORD *)v7 - 1);
    v7 -= 2;
    v18 -= 16;
  }
  while (v7 != v9);
  *(void *)a1 = v20;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v19;
  if (v9) {
LABEL_12:
  }
    operator delete(v9);
LABEL_13:
  *(void *)(a1 + 8) = v8;
  return v8 - 2;
}

BOOL sub_4651D0(void *a1)
{
  return a1[1] - *a1 < 0x20uLL;
}

void sub_4651E4(void *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  memset(v72, 0, sizeof(v72));
  memset(v71, 0, sizeof(v71));
  *(_OWORD *)uint64_t v70 = 0u;
  unint64_t v5 = sub_46C760(a1);
  if (!v5)
  {
LABEL_116:
    BOOL v48 = sub_4651D0(v70);
    if (*a3) {
      char v50 = v48;
    }
    else {
      char v50 = 1;
    }
    if ((v50 & 1) == 0)
    {
      sub_465F08((uint64_t *)v70, a1, a2, &v64, v49);
      sub_466334((uint64_t *)v70, (uint64_t)a3, &v64, (uint64_t)&v67, v51);
      if (v72[0]) {
        operator delete(v72[0]);
      }
      v72[0] = v67;
      *(_OWORD *)&v72[1] = v68;
      if (v64) {
        operator delete(v64);
      }
    }
    *(_OWORD *)a5 = *(_OWORD *)v70;
    *(void **)(a5 + 16) = v71[0];
    v70[0] = 0;
    v70[1] = 0;
    *(_OWORD *)(a5 + 24) = *(_OWORD *)&v71[1];
    uint64_t v52 = v71[3];
    memset(v71, 0, sizeof(v71));
    unint64_t v53 = v72[0];
    *(void *)(a5 + 40) = v52;
    *(void *)(a5 + 48) = v53;
    *(_OWORD *)(a5 + 56) = *(_OWORD *)&v72[1];
    memset(v72, 0, sizeof(v72));
    goto LABEL_127;
  }
  uint64_t v61 = 0;
  uint64_t v6 = 0;
  unint64_t v57 = v5;
  while (1)
  {
    unint64_t v69 = v6;
    uint64_t v7 = (int **)sub_46C8EC(a1, v6);
    sub_2954EC(a4, (uint64_t)v7[4], (uint64_t)&v64);
    sub_2E4B5C((uint64_t)&v64, &v67);
    if (__p)
    {
      unint64_t v66 = __p;
      operator delete(__p);
    }
    long long v9 = (unsigned __int16 *)((char *)*v7 - **v7);
    if (*v9 >= 9u && (uint64_t v10 = v9[4]) != 0) {
      uint64_t v11 = *(unsigned int *)((char *)*v7 + v10);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = sub_46CCC8(a1, v69, v8);
    double v13 = (double)v11;
    double v14 = (double)sub_46CACC((uint64_t)a1, v69) / 1000000000.0 * (double)v11;
    if (v14 >= 0.0)
    {
      if (v14 >= 4.50359963e15) {
        goto LABEL_17;
      }
      uint64_t v15 = (uint64_t)(v14 + v14) + 1;
    }
    else
    {
      if (v14 <= -4.50359963e15) {
        goto LABEL_17;
      }
      uint64_t v15 = (uint64_t)(v14 + v14);
      if (v15 >= 1) {
        --v15;
      }
    }
    double v14 = (double)(v15 >> 1);
LABEL_17:
    double v16 = (double)sub_46CB48((uint64_t)a1, v69) / 1000000000.0 * v13;
    if (v16 >= 0.0)
    {
      if (v16 >= 4.50359963e15) {
        goto LABEL_25;
      }
      uint64_t v17 = (uint64_t)(v16 + v16) + 1;
    }
    else
    {
      if (v16 <= -4.50359963e15) {
        goto LABEL_25;
      }
      uint64_t v17 = (uint64_t)(v16 + v16);
      if (v17 >= 1) {
        --v17;
      }
    }
    double v16 = (double)(v17 >> 1);
LABEL_25:
    sub_465AD0((uint64_t)&v67, (uint64_t)&v64);
    if ((void *)v68 != v67)
    {
      uint64_t v59 = v12 + v61;
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      uint64_t v20 = (uint64_t)v14;
      uint64_t v21 = (uint64_t)v16;
      uint64_t v22 = ((void)v68 - (void)v67) / 12;
      while (1)
      {
        int v23 = *(_DWORD *)((char *)v67 + v18 + 8);
        if (v23 == 0x7FFFFFFF)
        {
LABEL_114:
          char v46 = 0;
          *(void *)(a5 + 64) = 0;
          *(_OWORD *)(a5 + 32) = 0u;
          *(_OWORD *)(a5 + 48) = 0u;
          *(_OWORD *)a5 = 0u;
          *(_OWORD *)(a5 + 16) = 0u;
          uint64_t v47 = v64;
          if (v64) {
            goto LABEL_106;
          }
          goto LABEL_107;
        }
        double v24 = *(double *)sub_465BD0(&v64, v19) * v13;
        if (v24 >= 0.0)
        {
          if (v24 < 4.50359963e15)
          {
            uint64_t v25 = (uint64_t)(v24 + v24) + 1;
LABEL_37:
            double v24 = (double)(v25 >> 1);
          }
        }
        else if (v24 > -4.50359963e15)
        {
          uint64_t v25 = (uint64_t)(v24 + v24);
          if (v25 >= 1) {
            --v25;
          }
          goto LABEL_37;
        }
        uint64_t v26 = (uint64_t)v24;
        uint64_t v27 = v20 - (uint64_t)v24;
        if (v20 <= (uint64_t)v24 || v19 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - (void)v67) >> 2)) {
          goto LABEL_69;
        }
        uint64_t v28 = (int *)((char *)v67 + v18);
        if (*(_DWORD *)((char *)v67 + v18 + 20) == 0x7FFFFFFF) {
          goto LABEL_114;
        }
        double v29 = *(double *)sub_465BD0(&v64, v19 + 1) * v13;
        if (v29 >= 0.0)
        {
          if (v29 >= 4.50359963e15) {
            goto LABEL_49;
          }
          uint64_t v30 = (uint64_t)(v29 + v29) + 1;
        }
        else
        {
          if (v29 <= -4.50359963e15) {
            goto LABEL_49;
          }
          uint64_t v30 = (uint64_t)(v29 + v29);
          if (v30 >= 1) {
            --v30;
          }
        }
        double v29 = (double)(v30 >> 1);
LABEL_49:
        if (v20 < (uint64_t)v29)
        {
          double v31 = 0.0;
          uint64_t v32 = (uint64_t)v29 - v26;
          if (v32) {
            double v31 = (double)v27 / (double)v32;
          }
          double v33 = (1.0 - v31) * (double)v23;
          if (v33 >= 0.0)
          {
            if (v33 < 4.50359963e15)
            {
              uint64_t v34 = (uint64_t)(v33 + v33) + 1;
              goto LABEL_59;
            }
          }
          else if (v33 > -4.50359963e15)
          {
            uint64_t v34 = (uint64_t)(v33 + v33);
            if (v34 >= 1) {
              --v34;
            }
LABEL_59:
            double v33 = (double)(v34 >> 1);
          }
          double v35 = v31 * (double)v28[5];
          if (v35 >= 0.0)
          {
            if (v35 < 4.50359963e15)
            {
              uint64_t v36 = (uint64_t)(v35 + v35) + 1;
              goto LABEL_67;
            }
          }
          else if (v35 > -4.50359963e15)
          {
            uint64_t v36 = (uint64_t)(v35 + v35);
            if (v36 >= 1) {
              --v36;
            }
LABEL_67:
            double v35 = (double)(v36 >> 1);
          }
          sub_46505C((uint64_t)v70, v61, (int)v35 + (int)v33, v69);
        }
LABEL_69:
        if (v19 && v21 < v26)
        {
          long long v37 = (char *)v67;
          double v38 = *(double *)sub_465BD0(&v64, v19 - 1) * v13;
          if (v38 >= 0.0)
          {
            if (v38 < 4.50359963e15)
            {
              uint64_t v39 = (uint64_t)(v38 + v38) + 1;
              goto LABEL_78;
            }
          }
          else if (v38 > -4.50359963e15)
          {
            uint64_t v39 = (uint64_t)(v38 + v38);
            if (v39 >= 1) {
              --v39;
            }
LABEL_78:
            double v38 = (double)(v39 >> 1);
          }
          if (v21 <= (uint64_t)v38) {
            goto LABEL_99;
          }
          double v40 = 0.0;
          uint64_t v41 = v26 - (uint64_t)v38;
          if (v41) {
            double v40 = (double)(v21 - (uint64_t)v38) / (double)v41;
          }
          double v42 = (1.0 - v40) * (double)*(int *)&v37[v18 - 4];
          if (v42 >= 0.0)
          {
            if (v42 < 4.50359963e15)
            {
              uint64_t v43 = (uint64_t)(v42 + v42) + 1;
              goto LABEL_89;
            }
          }
          else if (v42 > -4.50359963e15)
          {
            uint64_t v43 = (uint64_t)(v42 + v42);
            if (v43 >= 1) {
              --v43;
            }
LABEL_89:
            double v42 = (double)(v43 >> 1);
          }
          double v44 = v40 * (double)v23;
          if (v44 >= 0.0)
          {
            if (v44 < 4.50359963e15)
            {
              uint64_t v45 = (uint64_t)(v44 + v44) + 1;
              goto LABEL_97;
            }
          }
          else if (v44 > -4.50359963e15)
          {
            uint64_t v45 = (uint64_t)(v44 + v44);
            if (v45 >= 1) {
              --v45;
            }
LABEL_97:
            double v44 = (double)(v45 >> 1);
          }
          sub_46505C((uint64_t)v70, v59, (int)v44 + (int)v42, v69);
        }
LABEL_99:
        if (v20 <= v26)
        {
          if (v21 < v26)
          {
LABEL_112:
            char v46 = 1;
            uint64_t v61 = v59;
            uint64_t v47 = v64;
            if (v64) {
              goto LABEL_106;
            }
            goto LABEL_107;
          }
          if (v70[0] != v70[1] && *((void *)v70[1] - 2) == v26 - v20 + v61 && *((void *)v70[1] - 1) == v23)
          {
            *((void *)v71[2] - 1) = v69;
          }
          else
          {
            uint64_t v63 = v26 - v20 + v61;
            int v62 = v23;
            sub_465DE0((uint64_t)v70, &v63, &v62);
            sub_A4710((uint64_t)&v71[1], &v69);
          }
        }
        ++v19;
        v18 += 12;
        if (v22 == v19) {
          goto LABEL_112;
        }
      }
    }
    char v46 = 1;
    v61 += v12;
    uint64_t v47 = v64;
    if (v64)
    {
LABEL_106:
      __n128 __p = v47;
      operator delete(v47);
    }
LABEL_107:
    if (v67)
    {
      *(void *)&long long v68 = v67;
      operator delete(v67);
    }
    if ((v46 & 1) == 0) {
      break;
    }
    if (++v6 == v57) {
      goto LABEL_116;
    }
  }
  if (v72[0]) {
    operator delete(v72[0]);
  }
LABEL_127:
  if (v71[1])
  {
    v71[2] = v71[1];
    operator delete(v71[1]);
  }
  if (v70[0])
  {
    v70[1] = v70[0];
    operator delete(v70[0]);
  }
}

void sub_4659BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (__p)
  {
    operator delete(__p);
    sub_46645C((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_46645C((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_465AD0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 __p = 0;
  long long v9 = 0;
  uint64_t v10 = 0;
  uint64_t v4 = *(void *)(a1 + 8) - *(void *)a1;
  if (v4)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 2);
    if (v5 >> 61) {
      sub_2E00();
    }
    __n128 __p = operator new(0x5555555555555558 * (v4 >> 2));
    long long v9 = __p;
    uint64_t v10 = (char *)__p + 8 * v5;
  }
  p_p = 0;
  sub_319A8((uint64_t)&__p, &p_p);
  p_p = &__p;
  sub_46881C(*(void **)a1, *(unsigned int **)(a1 + 8), (uint64_t *)&p_p);
  p_p = (void **)*(v9 - 1);
  p_p_p = &p_p;
  sub_468A38((char *)&__p, (double **)&p_p_p, a2);
  if (__p)
  {
    long long v9 = __p;
    operator delete(__p);
  }
}

void sub_465BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_465BD0(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    double v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 3);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    double v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 8 * a2;
}

void sub_465D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void *sub_465DE0(uint64_t a1, void *a2, int *a3)
{
  long long v7 = *(void **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 < v6)
  {
    uint64_t v8 = *a3;
    *long long v7 = *a2;
    v7[1] = v8;
    long long v9 = v7 + 2;
    goto LABEL_13;
  }
  uint64_t v10 = *(void **)a1;
  uint64_t v11 = ((uint64_t)v7 - *(void *)a1) >> 4;
  unint64_t v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v13 = v6 - (void)v10;
  if (v13 >> 3 > v12) {
    unint64_t v12 = v13 >> 3;
  }
  BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14) {
    unint64_t v15 = v12;
  }
  if (v15 >> 60) {
    sub_188D718();
  }
  uint64_t v16 = 16 * v15;
  std::string v17 = (char *)operator new(16 * v15);
  uint64_t v18 = *a3;
  long long v19 = &v17[16 * v11];
  std::string::size_type v20 = &v17[v16];
  *(void *)long long v19 = *a2;
  *((void *)v19 + 1) = v18;
  long long v9 = v19 + 16;
  if (v7 == v10)
  {
    *(void *)a1 = v19;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v20;
    if (!v10) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    uint64_t v21 = v19 - 16;
    *((_OWORD *)v19 - 1) = *((_OWORD *)v7 - 1);
    v7 -= 2;
    v19 -= 16;
  }
  while (v7 != v10);
  *(void *)a1 = v21;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v20;
  if (v10) {
LABEL_12:
  }
    operator delete(v10);
LABEL_13:
  *(void *)(a1 + 8) = v9;
  return v9 - 2;
}

void sub_465F08(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v56 = -1;
  uint64_t v57 = -1;
  uint64_t v7 = a1[1] - *a1;
  if (v7)
  {
    uint64_t v54 = a4;
    unint64_t v10 = 0;
    uint64_t v11 = v7 >> 4;
    while (1)
    {
      unint64_t v12 = (uint64_t *)sub_468B3C(a1 + 3, v10);
      uint64_t v13 = (int **)sub_46C8EC(a2, *v12);
      BOOL v14 = v13;
      if (!*(unsigned char *)a3) {
        goto LABEL_19;
      }
      unint64_t v15 = (unsigned __int16 *)((char *)*v13 - **v13);
      if (*v15 < 0x2Fu) {
        break;
      }
      uint64_t v16 = v15[23];
      if (!v16) {
        break;
      }
      int v17 = *((unsigned __int8 *)*v13 + v16);
      BOOL v19 = v17 != 9 && v17 != 20;
      if (v56 == -1 && !v19)
      {
        uint64_t v56 = v10;
        goto LABEL_19;
      }
      if (v56 != -1)
      {
        BOOL v30 = v17 == 20 || v17 == 9;
        if (!v30 || v10 + 1 == (a1[1] - *a1) >> 4) {
          goto LABEL_18;
        }
      }
LABEL_19:
      if (!*(unsigned char *)(a3 + 1)) {
        goto LABEL_4;
      }
      std::string::size_type v20 = (unsigned __int16 *)((char *)*v14 - **v14);
      unsigned int v21 = *v20;
      if (*((unsigned char *)v14 + 38))
      {
        if (v21 < 0x47) {
          goto LABEL_29;
        }
        unsigned int v22 = v20[35];
        if (!v22) {
          goto LABEL_29;
        }
        int v23 = 2;
      }
      else
      {
        if (v21 < 0x47 || (unsigned int v22 = v20[35]) == 0)
        {
LABEL_29:
          BOOL v24 = 0;
          unint64_t v25 = v57;
          if (v57 != -1) {
            goto LABEL_31;
          }
          goto LABEL_30;
        }
        int v23 = 1;
      }
      BOOL v24 = (*(int *)((char *)*v14 + v22) & v23) != 0;
      unint64_t v25 = v57;
      if (v57 != -1) {
        goto LABEL_31;
      }
LABEL_30:
      if (v24)
      {
LABEL_31:
        if (v25 != -1 && (v24 || v10 + 1 == (a1[1] - *a1) >> 4))
        {
          unint64_t v26 = *(void *)sub_468B3C(a1 + 3, v25);
          uint64_t v27 = *(void *)sub_468B3C(a1 + 3, v10);
          if (v26 <= v27 + 1) {
            unint64_t v28 = v27 + 1;
          }
          else {
            unint64_t v28 = v26;
          }
          uint64_t v29 = 0;
          if (v26 < v27 + 1)
          {
            do
              v29 += sub_46CCC8(a2, v26++, a5.n128_f64[0]);
            while (v28 != v26);
          }
          if (v29 >= *(void *)(a3 + 8))
          {
            unint64_t v55 = v10;
            sub_29AC28((uint64_t)&v58, &v57, (uint64_t *)&v55);
          }
          uint64_t v57 = -1;
        }
        goto LABEL_4;
      }
      uint64_t v57 = v10;
LABEL_4:
      if (++v10 == v11)
      {
        double v31 = v58;
        uint64_t v32 = v59;
        a4 = v54;
        goto LABEL_52;
      }
    }
    if (v56 == -1) {
      goto LABEL_19;
    }
LABEL_18:
    unint64_t v55 = v10;
    sub_29AC28((uint64_t)&v58, &v56, (uint64_t *)&v55);
    uint64_t v56 = -1;
    goto LABEL_19;
  }
  uint64_t v32 = 0;
  double v31 = 0;
LABEL_52:
  unint64_t v33 = 126 - 2 * __clz(((char *)v32 - (char *)v31) >> 4);
  if (v32 == (uint64x2_t *)v31) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = v33;
  }
  sub_468D4C(v31, v32, (uint64_t)&v55, v34, 1, a5);
  double v35 = (uint64_t *)v59;
  if (v58 != (__n128 *)v59)
  {
    uint64_t v36 = v58 + 1;
    if (&v58[1] != (__n128 *)v59)
    {
      do
      {
        unint64_t v37 = v36[-1].n128_u64[0];
        unint64_t v38 = v36->n128_u64[1];
        if (v37 <= v36->n128_u64[0]) {
          unint64_t v39 = v36->n128_u64[0];
        }
        else {
          unint64_t v39 = v36[-1].n128_u64[0];
        }
        unint64_t v40 = v36[-1].n128_u64[1];
        if (v38 < v40) {
          unint64_t v40 = v36->n128_u64[1];
        }
        if (v39 <= v40)
        {
          if (v37 >= v36->n128_u64[0]) {
            unint64_t v37 = v36->n128_u64[0];
          }
          unint64_t v41 = v36[-1].n128_u64[1];
          if (v38 > v41) {
            unint64_t v41 = v36->n128_u64[1];
          }
          v36->n128_u64[0] = v37;
          v36->n128_u64[1] = v41;
          v36[-1].n128_u64[0] = -1;
          v36[-1].n128_u64[1] = -1;
        }
        ++v36;
      }
      while (v36 != (__n128 *)v35);
    }
  }
  uint64_t v43 = *a1;
  uint64_t v42 = a1[1];
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v44 = v42 - v43;
  if (v44)
  {
    if (v44 < 0) {
      sub_2E00();
    }
    unint64_t v45 = v44 >> 4;
    unint64_t v46 = ((unint64_t)((v44 >> 4) - 1) >> 6) + 1;
    *a4 = operator new(8 * v46);
    a4[1] = 0;
    a4[2] = (void *)v46;
    sub_43284(a4, v45, 0);
  }
  uint64_t v47 = v58;
  BOOL v48 = (uint64_t *)v59;
  if (v58 != (__n128 *)v59)
  {
    __n128 v49 = (char *)*a4;
    unint64_t v50 = (a1[1] - *a1) >> 4;
    unint64_t v51 = v58;
    do
    {
      unint64_t v52 = v51->n128_u64[0];
      if (v51->n128_u64[0] != -1)
      {
        if (v52) {
          *(void *)&v49[(v52 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v52;
        }
        unint64_t v53 = v51->n128_u64[1];
        if (v53 + 1 < v50) {
          *(void *)&v49[(v53 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v53;
        }
      }
      ++v51;
    }
    while (v51 != (__n128 *)v48);
  }
  if (v47)
  {
    uint64_t v59 = (uint64x2_t *)v47;
    operator delete(v47);
  }
}

void sub_4662FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_466334(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>, unint64_t a5@<D0>)
{
  if (*(_DWORD *)a2 == 1)
  {
    LODWORD(a5) = *(_DWORD *)(a2 + 4);
    double v8 = (double)a5;
    sub_41F28(a1, a3, (void **)a4, v8);
  }
  else if (*(_DWORD *)a2 == 2)
  {
    double v6 = *(double *)(a2 + 8) * 10000.0;
    unint64_t v7 = (a1[1] - *a1) >> 4;
    sub_40738(a1, v7, a3, (void **)a4, v6);
  }
  else
  {
    uint64_t v10 = *a1;
    uint64_t v9 = a1[1];
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    uint64_t v11 = v9 - v10;
    if (v11)
    {
      if (v11 < 0) {
        sub_2E00();
      }
      unint64_t v12 = v11 >> 4;
      unint64_t v13 = ((unint64_t)((v11 >> 4) - 1) >> 6) + 1;
      *(void *)a4 = operator new(8 * v13);
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = v13;
      sub_43284((void *)a4, v12, 1);
    }
  }
}

uint64_t sub_46645C(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 48);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_4664AC(void *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  memset(v72, 0, sizeof(v72));
  memset(v71, 0, sizeof(v71));
  *(_OWORD *)uint64_t v70 = 0u;
  unint64_t v5 = sub_46C760(a1);
  if (!v5)
  {
LABEL_116:
    BOOL v48 = sub_4651D0(v70);
    if (*a3) {
      char v50 = v48;
    }
    else {
      char v50 = 1;
    }
    if ((v50 & 1) == 0)
    {
      sub_466D98((uint64_t *)v70, a1, a2, &v64, v49);
      sub_466334((uint64_t *)v70, (uint64_t)a3, &v64, (uint64_t)&v67, v51);
      if (v72[0]) {
        operator delete(v72[0]);
      }
      v72[0] = v67;
      *(_OWORD *)&v72[1] = v68;
      if (v64) {
        operator delete(v64);
      }
    }
    *(_OWORD *)a5 = *(_OWORD *)v70;
    *(void **)(a5 + 16) = v71[0];
    v70[0] = 0;
    v70[1] = 0;
    *(_OWORD *)(a5 + 24) = *(_OWORD *)&v71[1];
    unint64_t v52 = v71[3];
    memset(v71, 0, sizeof(v71));
    unint64_t v53 = v72[0];
    *(void *)(a5 + 40) = v52;
    *(void *)(a5 + 48) = v53;
    *(_OWORD *)(a5 + 56) = *(_OWORD *)&v72[1];
    memset(v72, 0, sizeof(v72));
    goto LABEL_127;
  }
  uint64_t v61 = 0;
  uint64_t v6 = 0;
  unint64_t v57 = v5;
  while (1)
  {
    unint64_t v69 = v6;
    unint64_t v7 = (int **)sub_46C8EC(a1, v6);
    sub_2954EC(a4, (uint64_t)v7[4], (uint64_t)&v64);
    sub_2E4B5C((uint64_t)&v64, &v67);
    if (__p)
    {
      unint64_t v66 = __p;
      operator delete(__p);
    }
    uint64_t v9 = (unsigned __int16 *)((char *)*v7 - **v7);
    if (*v9 >= 9u && (uint64_t v10 = v9[4]) != 0) {
      uint64_t v11 = *(unsigned int *)((char *)*v7 + v10);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = sub_46CCC8(a1, v69, v8);
    double v13 = (double)v11;
    double v14 = (double)sub_46CACC((uint64_t)a1, v69) / 1000000000.0 * (double)v11;
    if (v14 >= 0.0)
    {
      if (v14 >= 4.50359963e15) {
        goto LABEL_17;
      }
      uint64_t v15 = (uint64_t)(v14 + v14) + 1;
    }
    else
    {
      if (v14 <= -4.50359963e15) {
        goto LABEL_17;
      }
      uint64_t v15 = (uint64_t)(v14 + v14);
      if (v15 >= 1) {
        --v15;
      }
    }
    double v14 = (double)(v15 >> 1);
LABEL_17:
    double v16 = (double)sub_46CB48((uint64_t)a1, v69) / 1000000000.0 * v13;
    if (v16 >= 0.0)
    {
      if (v16 >= 4.50359963e15) {
        goto LABEL_25;
      }
      uint64_t v17 = (uint64_t)(v16 + v16) + 1;
    }
    else
    {
      if (v16 <= -4.50359963e15) {
        goto LABEL_25;
      }
      uint64_t v17 = (uint64_t)(v16 + v16);
      if (v17 >= 1) {
        --v17;
      }
    }
    double v16 = (double)(v17 >> 1);
LABEL_25:
    sub_465AD0((uint64_t)&v67, (uint64_t)&v64);
    if ((void *)v68 != v67)
    {
      uint64_t v59 = v12 + v61;
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      uint64_t v20 = (uint64_t)v14;
      uint64_t v21 = (uint64_t)v16;
      uint64_t v22 = ((void)v68 - (void)v67) / 12;
      while (1)
      {
        int v23 = *(_DWORD *)((char *)v67 + v18 + 8);
        if (v23 == 0x7FFFFFFF)
        {
LABEL_114:
          char v46 = 0;
          *(void *)(a5 + 64) = 0;
          *(_OWORD *)(a5 + 32) = 0u;
          *(_OWORD *)(a5 + 48) = 0u;
          *(_OWORD *)a5 = 0u;
          *(_OWORD *)(a5 + 16) = 0u;
          uint64_t v47 = v64;
          if (v64) {
            goto LABEL_106;
          }
          goto LABEL_107;
        }
        double v24 = *(double *)sub_465BD0(&v64, v19) * v13;
        if (v24 >= 0.0)
        {
          if (v24 < 4.50359963e15)
          {
            uint64_t v25 = (uint64_t)(v24 + v24) + 1;
LABEL_37:
            double v24 = (double)(v25 >> 1);
          }
        }
        else if (v24 > -4.50359963e15)
        {
          uint64_t v25 = (uint64_t)(v24 + v24);
          if (v25 >= 1) {
            --v25;
          }
          goto LABEL_37;
        }
        uint64_t v26 = (uint64_t)v24;
        uint64_t v27 = v20 - (uint64_t)v24;
        if (v20 <= (uint64_t)v24 || v19 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - (void)v67) >> 2)) {
          goto LABEL_69;
        }
        unint64_t v28 = (int *)((char *)v67 + v18);
        if (*(_DWORD *)((char *)v67 + v18 + 20) == 0x7FFFFFFF) {
          goto LABEL_114;
        }
        double v29 = *(double *)sub_465BD0(&v64, v19 + 1) * v13;
        if (v29 >= 0.0)
        {
          if (v29 >= 4.50359963e15) {
            goto LABEL_49;
          }
          uint64_t v30 = (uint64_t)(v29 + v29) + 1;
        }
        else
        {
          if (v29 <= -4.50359963e15) {
            goto LABEL_49;
          }
          uint64_t v30 = (uint64_t)(v29 + v29);
          if (v30 >= 1) {
            --v30;
          }
        }
        double v29 = (double)(v30 >> 1);
LABEL_49:
        if (v20 < (uint64_t)v29)
        {
          double v31 = 0.0;
          uint64_t v32 = (uint64_t)v29 - v26;
          if (v32) {
            double v31 = (double)v27 / (double)v32;
          }
          double v33 = (1.0 - v31) * (double)v23;
          if (v33 >= 0.0)
          {
            if (v33 < 4.50359963e15)
            {
              uint64_t v34 = (uint64_t)(v33 + v33) + 1;
              goto LABEL_59;
            }
          }
          else if (v33 > -4.50359963e15)
          {
            uint64_t v34 = (uint64_t)(v33 + v33);
            if (v34 >= 1) {
              --v34;
            }
LABEL_59:
            double v33 = (double)(v34 >> 1);
          }
          double v35 = v31 * (double)v28[5];
          if (v35 >= 0.0)
          {
            if (v35 < 4.50359963e15)
            {
              uint64_t v36 = (uint64_t)(v35 + v35) + 1;
              goto LABEL_67;
            }
          }
          else if (v35 > -4.50359963e15)
          {
            uint64_t v36 = (uint64_t)(v35 + v35);
            if (v36 >= 1) {
              --v36;
            }
LABEL_67:
            double v35 = (double)(v36 >> 1);
          }
          sub_46505C((uint64_t)v70, v61, (int)v35 + (int)v33, v69);
        }
LABEL_69:
        if (v19 && v21 < v26)
        {
          unint64_t v37 = (char *)v67;
          double v38 = *(double *)sub_465BD0(&v64, v19 - 1) * v13;
          if (v38 >= 0.0)
          {
            if (v38 < 4.50359963e15)
            {
              uint64_t v39 = (uint64_t)(v38 + v38) + 1;
              goto LABEL_78;
            }
          }
          else if (v38 > -4.50359963e15)
          {
            uint64_t v39 = (uint64_t)(v38 + v38);
            if (v39 >= 1) {
              --v39;
            }
LABEL_78:
            double v38 = (double)(v39 >> 1);
          }
          if (v21 <= (uint64_t)v38) {
            goto LABEL_99;
          }
          double v40 = 0.0;
          uint64_t v41 = v26 - (uint64_t)v38;
          if (v41) {
            double v40 = (double)(v21 - (uint64_t)v38) / (double)v41;
          }
          double v42 = (1.0 - v40) * (double)*(int *)&v37[v18 - 4];
          if (v42 >= 0.0)
          {
            if (v42 < 4.50359963e15)
            {
              uint64_t v43 = (uint64_t)(v42 + v42) + 1;
              goto LABEL_89;
            }
          }
          else if (v42 > -4.50359963e15)
          {
            uint64_t v43 = (uint64_t)(v42 + v42);
            if (v43 >= 1) {
              --v43;
            }
LABEL_89:
            double v42 = (double)(v43 >> 1);
          }
          double v44 = v40 * (double)v23;
          if (v44 >= 0.0)
          {
            if (v44 < 4.50359963e15)
            {
              uint64_t v45 = (uint64_t)(v44 + v44) + 1;
              goto LABEL_97;
            }
          }
          else if (v44 > -4.50359963e15)
          {
            uint64_t v45 = (uint64_t)(v44 + v44);
            if (v45 >= 1) {
              --v45;
            }
LABEL_97:
            double v44 = (double)(v45 >> 1);
          }
          sub_46505C((uint64_t)v70, v59, (int)v44 + (int)v42, v69);
        }
LABEL_99:
        if (v20 <= v26)
        {
          if (v21 < v26)
          {
LABEL_112:
            char v46 = 1;
            uint64_t v61 = v59;
            uint64_t v47 = v64;
            if (v64) {
              goto LABEL_106;
            }
            goto LABEL_107;
          }
          if (v70[0] != v70[1] && *((void *)v70[1] - 2) == v26 - v20 + v61 && *((void *)v70[1] - 1) == v23)
          {
            *((void *)v71[2] - 1) = v69;
          }
          else
          {
            uint64_t v63 = v26 - v20 + v61;
            int v62 = v23;
            sub_465DE0((uint64_t)v70, &v63, &v62);
            sub_A4710((uint64_t)&v71[1], &v69);
          }
        }
        ++v19;
        v18 += 12;
        if (v22 == v19) {
          goto LABEL_112;
        }
      }
    }
    char v46 = 1;
    v61 += v12;
    uint64_t v47 = v64;
    if (v64)
    {
LABEL_106:
      __n128 __p = v47;
      operator delete(v47);
    }
LABEL_107:
    if (v67)
    {
      *(void *)&long long v68 = v67;
      operator delete(v67);
    }
    if ((v46 & 1) == 0) {
      break;
    }
    if (++v6 == v57) {
      goto LABEL_116;
    }
  }
  if (v72[0]) {
    operator delete(v72[0]);
  }
LABEL_127:
  if (v71[1])
  {
    v71[2] = v71[1];
    operator delete(v71[1]);
  }
  if (v70[0])
  {
    v70[1] = v70[0];
    operator delete(v70[0]);
  }
}

void sub_466C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (__p)
  {
    operator delete(__p);
    sub_46645C((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_46645C((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_466D98(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v56 = -1;
  uint64_t v57 = -1;
  uint64_t v7 = a1[1] - *a1;
  if (v7)
  {
    uint64_t v54 = a4;
    unint64_t v10 = 0;
    uint64_t v11 = v7 >> 4;
    while (1)
    {
      uint64_t v12 = (uint64_t *)sub_468B3C(a1 + 3, v10);
      double v13 = (int **)sub_46C8EC(a2, *v12);
      double v14 = v13;
      if (!*(unsigned char *)a3) {
        goto LABEL_19;
      }
      uint64_t v15 = (unsigned __int16 *)((char *)*v13 - **v13);
      if (*v15 < 0x2Fu) {
        break;
      }
      uint64_t v16 = v15[23];
      if (!v16) {
        break;
      }
      int v17 = *((unsigned __int8 *)*v13 + v16);
      BOOL v19 = v17 != 9 && v17 != 20;
      if (v56 == -1 && !v19)
      {
        uint64_t v56 = v10;
        goto LABEL_19;
      }
      if (v56 != -1)
      {
        BOOL v30 = v17 == 20 || v17 == 9;
        if (!v30 || v10 + 1 == (a1[1] - *a1) >> 4) {
          goto LABEL_18;
        }
      }
LABEL_19:
      if (!*(unsigned char *)(a3 + 1)) {
        goto LABEL_4;
      }
      uint64_t v20 = (unsigned __int16 *)((char *)*v14 - **v14);
      unsigned int v21 = *v20;
      if (*((unsigned char *)v14 + 38))
      {
        if (v21 < 0xB) {
          goto LABEL_29;
        }
        unsigned int v22 = v20[5];
        if (!v22) {
          goto LABEL_29;
        }
        int v23 = 2;
      }
      else
      {
        if (v21 < 0xB || (unsigned int v22 = v20[5]) == 0)
        {
LABEL_29:
          BOOL v24 = 0;
          unint64_t v25 = v57;
          if (v57 != -1) {
            goto LABEL_31;
          }
          goto LABEL_30;
        }
        int v23 = 1;
      }
      BOOL v24 = (*(int *)((char *)*v14 + v22) & v23) != 0;
      unint64_t v25 = v57;
      if (v57 != -1) {
        goto LABEL_31;
      }
LABEL_30:
      if (v24)
      {
LABEL_31:
        if (v25 != -1 && (v24 || v10 + 1 == (a1[1] - *a1) >> 4))
        {
          unint64_t v26 = *(void *)sub_468B3C(a1 + 3, v25);
          uint64_t v27 = *(void *)sub_468B3C(a1 + 3, v10);
          if (v26 <= v27 + 1) {
            unint64_t v28 = v27 + 1;
          }
          else {
            unint64_t v28 = v26;
          }
          uint64_t v29 = 0;
          if (v26 < v27 + 1)
          {
            do
              v29 += sub_46CCC8(a2, v26++, a5.n128_f64[0]);
            while (v28 != v26);
          }
          if (v29 >= *(void *)(a3 + 8))
          {
            unint64_t v55 = v10;
            sub_29AC28((uint64_t)&v58, &v57, (uint64_t *)&v55);
          }
          uint64_t v57 = -1;
        }
        goto LABEL_4;
      }
      uint64_t v57 = v10;
LABEL_4:
      if (++v10 == v11)
      {
        double v31 = v58;
        uint64_t v32 = v59;
        a4 = v54;
        goto LABEL_52;
      }
    }
    if (v56 == -1) {
      goto LABEL_19;
    }
LABEL_18:
    unint64_t v55 = v10;
    sub_29AC28((uint64_t)&v58, &v56, (uint64_t *)&v55);
    uint64_t v56 = -1;
    goto LABEL_19;
  }
  uint64_t v32 = 0;
  double v31 = 0;
LABEL_52:
  unint64_t v33 = 126 - 2 * __clz(((char *)v32 - (char *)v31) >> 4);
  if (v32 == (uint64x2_t *)v31) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = v33;
  }
  sub_468D4C(v31, v32, (uint64_t)&v55, v34, 1, a5);
  double v35 = (uint64_t *)v59;
  if (v58 != (__n128 *)v59)
  {
    uint64_t v36 = v58 + 1;
    if (&v58[1] != (__n128 *)v59)
    {
      do
      {
        unint64_t v37 = v36[-1].n128_u64[0];
        unint64_t v38 = v36->n128_u64[1];
        if (v37 <= v36->n128_u64[0]) {
          unint64_t v39 = v36->n128_u64[0];
        }
        else {
          unint64_t v39 = v36[-1].n128_u64[0];
        }
        unint64_t v40 = v36[-1].n128_u64[1];
        if (v38 < v40) {
          unint64_t v40 = v36->n128_u64[1];
        }
        if (v39 <= v40)
        {
          if (v37 >= v36->n128_u64[0]) {
            unint64_t v37 = v36->n128_u64[0];
          }
          unint64_t v41 = v36[-1].n128_u64[1];
          if (v38 > v41) {
            unint64_t v41 = v36->n128_u64[1];
          }
          v36->n128_u64[0] = v37;
          v36->n128_u64[1] = v41;
          v36[-1].n128_u64[0] = -1;
          v36[-1].n128_u64[1] = -1;
        }
        ++v36;
      }
      while (v36 != (__n128 *)v35);
    }
  }
  uint64_t v43 = *a1;
  uint64_t v42 = a1[1];
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v44 = v42 - v43;
  if (v44)
  {
    if (v44 < 0) {
      sub_2E00();
    }
    unint64_t v45 = v44 >> 4;
    unint64_t v46 = ((unint64_t)((v44 >> 4) - 1) >> 6) + 1;
    *a4 = operator new(8 * v46);
    a4[1] = 0;
    a4[2] = (void *)v46;
    sub_43284(a4, v45, 0);
  }
  uint64_t v47 = v58;
  BOOL v48 = (uint64_t *)v59;
  if (v58 != (__n128 *)v59)
  {
    __n128 v49 = (char *)*a4;
    unint64_t v50 = (a1[1] - *a1) >> 4;
    unint64_t v51 = v58;
    do
    {
      unint64_t v52 = v51->n128_u64[0];
      if (v51->n128_u64[0] != -1)
      {
        if (v52) {
          *(void *)&v49[(v52 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v52;
        }
        unint64_t v53 = v51->n128_u64[1];
        if (v53 + 1 < v50) {
          *(void *)&v49[(v53 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v53;
        }
      }
      ++v51;
    }
    while (v51 != (__n128 *)v48);
  }
  if (v47)
  {
    uint64_t v59 = (uint64x2_t *)v47;
    operator delete(v47);
  }
}

void sub_46718C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_4671C4(void *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  memset(v73, 0, sizeof(v73));
  memset(v72, 0, sizeof(v72));
  *(_OWORD *)int v71 = 0u;
  unint64_t v5 = sub_470ADC(a1);
  if (!v5)
  {
LABEL_116:
    BOOL v49 = sub_4651D0(v71);
    if (*a3) {
      char v51 = v49;
    }
    else {
      char v51 = 1;
    }
    if ((v51 & 1) == 0)
    {
      sub_467AC8((uint64_t *)v71, a1, a2, &v65, v50);
      sub_466334((uint64_t *)v71, (uint64_t)a3, &v65, (uint64_t)&v68, v52);
      if (v73[0]) {
        operator delete(v73[0]);
      }
      v73[0] = v68;
      *(_OWORD *)&v73[1] = v69;
      if (v65) {
        operator delete(v65);
      }
    }
    *(_OWORD *)a5 = *(_OWORD *)v71;
    *(void **)(a5 + 16) = v72[0];
    v71[0] = 0;
    v71[1] = 0;
    *(_OWORD *)(a5 + 24) = *(_OWORD *)&v72[1];
    unint64_t v53 = v72[3];
    memset(v72, 0, sizeof(v72));
    uint64_t v54 = v73[0];
    *(void *)(a5 + 40) = v53;
    *(void *)(a5 + 48) = v54;
    *(_OWORD *)(a5 + 56) = *(_OWORD *)&v73[1];
    memset(v73, 0, sizeof(v73));
    goto LABEL_127;
  }
  uint64_t v62 = 0;
  uint64_t v6 = 0;
  unint64_t v58 = v5;
  while (1)
  {
    unint64_t v70 = v6;
    uint64_t v7 = (unsigned int *)sub_470B40(a1, v6);
    sub_2954EC(a4, (((unint64_t)(v7[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v7[1] << 32) | *v7) ^ 0x1000000000000, (uint64_t)&v65);
    sub_2E4B5C((uint64_t)&v65, &v68);
    if (__p)
    {
      unint64_t v67 = __p;
      operator delete(__p);
    }
    uint64_t v9 = (int *)*((void *)v7 + 1);
    unint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
    if (*v10 >= 9u && (uint64_t v11 = v10[4]) != 0) {
      uint64_t v12 = *(unsigned int *)((char *)v9 + v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = sub_470F2C(a1, v70, v8);
    double v14 = (double)v12;
    double v15 = (double)sub_46CACC((uint64_t)a1, v70) / 1000000000.0 * (double)v12;
    if (v15 >= 0.0)
    {
      if (v15 >= 4.50359963e15) {
        goto LABEL_17;
      }
      uint64_t v16 = (uint64_t)(v15 + v15) + 1;
    }
    else
    {
      if (v15 <= -4.50359963e15) {
        goto LABEL_17;
      }
      uint64_t v16 = (uint64_t)(v15 + v15);
      if (v16 >= 1) {
        --v16;
      }
    }
    double v15 = (double)(v16 >> 1);
LABEL_17:
    double v17 = (double)sub_470DAC((uint64_t)a1, v70) / 1000000000.0 * v14;
    if (v17 >= 0.0)
    {
      if (v17 >= 4.50359963e15) {
        goto LABEL_25;
      }
      uint64_t v18 = (uint64_t)(v17 + v17) + 1;
    }
    else
    {
      if (v17 <= -4.50359963e15) {
        goto LABEL_25;
      }
      uint64_t v18 = (uint64_t)(v17 + v17);
      if (v18 >= 1) {
        --v18;
      }
    }
    double v17 = (double)(v18 >> 1);
LABEL_25:
    sub_465AD0((uint64_t)&v68, (uint64_t)&v65);
    if ((void *)v69 != v68)
    {
      uint64_t v60 = v13 + v62;
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      uint64_t v21 = (uint64_t)v15;
      uint64_t v22 = (uint64_t)v17;
      uint64_t v23 = ((void)v69 - (void)v68) / 12;
      while (1)
      {
        int v24 = *(_DWORD *)((char *)v68 + v19 + 8);
        if (v24 == 0x7FFFFFFF)
        {
LABEL_114:
          char v47 = 0;
          *(void *)(a5 + 64) = 0;
          *(_OWORD *)(a5 + 32) = 0u;
          *(_OWORD *)(a5 + 48) = 0u;
          *(_OWORD *)a5 = 0u;
          *(_OWORD *)(a5 + 16) = 0u;
          BOOL v48 = v65;
          if (v65) {
            goto LABEL_106;
          }
          goto LABEL_107;
        }
        double v25 = *(double *)sub_465BD0(&v65, v20) * v14;
        if (v25 >= 0.0)
        {
          if (v25 < 4.50359963e15)
          {
            uint64_t v26 = (uint64_t)(v25 + v25) + 1;
LABEL_37:
            double v25 = (double)(v26 >> 1);
          }
        }
        else if (v25 > -4.50359963e15)
        {
          uint64_t v26 = (uint64_t)(v25 + v25);
          if (v26 >= 1) {
            --v26;
          }
          goto LABEL_37;
        }
        uint64_t v27 = (uint64_t)v25;
        uint64_t v28 = v21 - (uint64_t)v25;
        if (v21 <= (uint64_t)v25 || v20 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - (void)v68) >> 2)) {
          goto LABEL_69;
        }
        uint64_t v29 = (int *)((char *)v68 + v19);
        if (*(_DWORD *)((char *)v68 + v19 + 20) == 0x7FFFFFFF) {
          goto LABEL_114;
        }
        double v30 = *(double *)sub_465BD0(&v65, v20 + 1) * v14;
        if (v30 >= 0.0)
        {
          if (v30 >= 4.50359963e15) {
            goto LABEL_49;
          }
          uint64_t v31 = (uint64_t)(v30 + v30) + 1;
        }
        else
        {
          if (v30 <= -4.50359963e15) {
            goto LABEL_49;
          }
          uint64_t v31 = (uint64_t)(v30 + v30);
          if (v31 >= 1) {
            --v31;
          }
        }
        double v30 = (double)(v31 >> 1);
LABEL_49:
        if (v21 < (uint64_t)v30)
        {
          double v32 = 0.0;
          uint64_t v33 = (uint64_t)v30 - v27;
          if (v33) {
            double v32 = (double)v28 / (double)v33;
          }
          double v34 = (1.0 - v32) * (double)v24;
          if (v34 >= 0.0)
          {
            if (v34 < 4.50359963e15)
            {
              uint64_t v35 = (uint64_t)(v34 + v34) + 1;
              goto LABEL_59;
            }
          }
          else if (v34 > -4.50359963e15)
          {
            uint64_t v35 = (uint64_t)(v34 + v34);
            if (v35 >= 1) {
              --v35;
            }
LABEL_59:
            double v34 = (double)(v35 >> 1);
          }
          double v36 = v32 * (double)v29[5];
          if (v36 >= 0.0)
          {
            if (v36 < 4.50359963e15)
            {
              uint64_t v37 = (uint64_t)(v36 + v36) + 1;
              goto LABEL_67;
            }
          }
          else if (v36 > -4.50359963e15)
          {
            uint64_t v37 = (uint64_t)(v36 + v36);
            if (v37 >= 1) {
              --v37;
            }
LABEL_67:
            double v36 = (double)(v37 >> 1);
          }
          sub_46505C((uint64_t)v71, v62, (int)v36 + (int)v34, v70);
        }
LABEL_69:
        if (v20 && v22 < v27)
        {
          unint64_t v38 = (char *)v68;
          double v39 = *(double *)sub_465BD0(&v65, v20 - 1) * v14;
          if (v39 >= 0.0)
          {
            if (v39 < 4.50359963e15)
            {
              uint64_t v40 = (uint64_t)(v39 + v39) + 1;
              goto LABEL_78;
            }
          }
          else if (v39 > -4.50359963e15)
          {
            uint64_t v40 = (uint64_t)(v39 + v39);
            if (v40 >= 1) {
              --v40;
            }
LABEL_78:
            double v39 = (double)(v40 >> 1);
          }
          if (v22 <= (uint64_t)v39) {
            goto LABEL_99;
          }
          double v41 = 0.0;
          uint64_t v42 = v27 - (uint64_t)v39;
          if (v42) {
            double v41 = (double)(v22 - (uint64_t)v39) / (double)v42;
          }
          double v43 = (1.0 - v41) * (double)*(int *)&v38[v19 - 4];
          if (v43 >= 0.0)
          {
            if (v43 < 4.50359963e15)
            {
              uint64_t v44 = (uint64_t)(v43 + v43) + 1;
              goto LABEL_89;
            }
          }
          else if (v43 > -4.50359963e15)
          {
            uint64_t v44 = (uint64_t)(v43 + v43);
            if (v44 >= 1) {
              --v44;
            }
LABEL_89:
            double v43 = (double)(v44 >> 1);
          }
          double v45 = v41 * (double)v24;
          if (v45 >= 0.0)
          {
            if (v45 < 4.50359963e15)
            {
              uint64_t v46 = (uint64_t)(v45 + v45) + 1;
              goto LABEL_97;
            }
          }
          else if (v45 > -4.50359963e15)
          {
            uint64_t v46 = (uint64_t)(v45 + v45);
            if (v46 >= 1) {
              --v46;
            }
LABEL_97:
            double v45 = (double)(v46 >> 1);
          }
          sub_46505C((uint64_t)v71, v60, (int)v45 + (int)v43, v70);
        }
LABEL_99:
        if (v21 <= v27)
        {
          if (v22 < v27)
          {
LABEL_112:
            char v47 = 1;
            uint64_t v62 = v60;
            BOOL v48 = v65;
            if (v65) {
              goto LABEL_106;
            }
            goto LABEL_107;
          }
          if (v71[0] != v71[1] && *((void *)v71[1] - 2) == v27 - v21 + v62 && *((void *)v71[1] - 1) == v24)
          {
            *((void *)v72[2] - 1) = v70;
          }
          else
          {
            uint64_t v64 = v27 - v21 + v62;
            int v63 = v24;
            sub_465DE0((uint64_t)v71, &v64, &v63);
            sub_A4710((uint64_t)&v72[1], &v70);
          }
        }
        ++v20;
        v19 += 12;
        if (v23 == v20) {
          goto LABEL_112;
        }
      }
    }
    char v47 = 1;
    v62 += v13;
    BOOL v48 = v65;
    if (v65)
    {
LABEL_106:
      __n128 __p = v48;
      operator delete(v48);
    }
LABEL_107:
    if (v68)
    {
      *(void *)&long long v69 = v68;
      operator delete(v68);
    }
    if ((v47 & 1) == 0) {
      break;
    }
    if (++v6 == v58) {
      goto LABEL_116;
    }
  }
  if (v73[0]) {
    operator delete(v73[0]);
  }
LABEL_127:
  if (v72[1])
  {
    v72[2] = v72[1];
    operator delete(v72[1]);
  }
  if (v71[0])
  {
    v71[1] = v71[0];
    operator delete(v71[0]);
  }
}

void sub_4679B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (__p)
  {
    operator delete(__p);
    sub_46645C((uint64_t)&a29);
    _Unwind_Resume(a1);
  }
  sub_46645C((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_467AC8(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v57 = 0;
  unint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v55 = -1;
  unint64_t v56 = -1;
  uint64_t v7 = a1[1] - *a1;
  if (v7)
  {
    unint64_t v53 = a4;
    unint64_t v10 = 0;
    uint64_t v11 = v7 >> 4;
    while (1)
    {
      uint64_t v12 = (uint64_t *)sub_468B3C(a1 + 3, v10);
      uint64_t v13 = sub_470B40(a2, *v12);
      uint64_t v14 = v13;
      if (*(unsigned char *)a3)
      {
        double v15 = *(int **)(v13 + 8);
        uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
        if (*v16 >= 0x2Fu && (uint64_t v17 = v16[23]) != 0)
        {
          int v18 = *((unsigned __int8 *)v15 + v17);
          BOOL v20 = v18 != 9 && v18 != 20;
          if (v55 != -1 || v20)
          {
            if (v55 == -1) {
              goto LABEL_19;
            }
            BOOL v29 = v18 == 20 || v18 == 9;
            if (v29 && v10 + 1 != (a1[1] - *a1) >> 4) {
              goto LABEL_19;
            }
LABEL_18:
            unint64_t v54 = v10;
            sub_29AC28((uint64_t)&v57, &v55, (uint64_t *)&v54);
            uint64_t v55 = -1;
            goto LABEL_19;
          }
          uint64_t v55 = v10;
        }
        else if (v55 != -1)
        {
          goto LABEL_18;
        }
      }
LABEL_19:
      if (*(unsigned char *)(a3 + 1))
      {
        unsigned int v21 = *(_DWORD *)(v14 + 4);
        if ((v21 & 0x40000000) != 0) {
          int v22 = 2;
        }
        else {
          int v22 = v21 >> 31;
        }
        BOOL v23 = sub_3F4FC8((int **)(v14 + 8), v22);
        char v24 = v56 != -1 || v23;
        if (v24)
        {
          if (v56 != -1 && (v23 || v10 + 1 == (a1[1] - *a1) >> 4))
          {
            unint64_t v25 = *(void *)sub_468B3C(a1 + 3, v56);
            uint64_t v26 = *(void *)sub_468B3C(a1 + 3, v10);
            if (v25 <= v26 + 1) {
              unint64_t v27 = v26 + 1;
            }
            else {
              unint64_t v27 = v25;
            }
            uint64_t v28 = 0;
            if (v25 < v26 + 1)
            {
              do
                v28 += sub_470F2C(a2, v25++, a5.n128_f64[0]);
              while (v27 != v25);
            }
            if (v28 >= *(void *)(a3 + 8))
            {
              unint64_t v54 = v10;
              sub_29AC28((uint64_t)&v57, &v56, (uint64_t *)&v54);
            }
            unint64_t v56 = -1;
          }
        }
        else
        {
          unint64_t v56 = v10;
        }
      }
      if (++v10 == v11)
      {
        double v30 = v57;
        uint64_t v31 = v58;
        a4 = v53;
        goto LABEL_48;
      }
    }
  }
  uint64_t v31 = 0;
  double v30 = 0;
LABEL_48:
  unint64_t v32 = 126 - 2 * __clz(((char *)v31 - (char *)v30) >> 4);
  if (v31 == (uint64x2_t *)v30) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = v32;
  }
  sub_468D4C(v30, v31, (uint64_t)&v54, v33, 1, a5);
  double v34 = (uint64_t *)v58;
  if (v57 != (__n128 *)v58)
  {
    uint64_t v35 = v57 + 1;
    if (&v57[1] != (__n128 *)v58)
    {
      do
      {
        unint64_t v36 = v35[-1].n128_u64[0];
        unint64_t v37 = v35->n128_u64[1];
        if (v36 <= v35->n128_u64[0]) {
          unint64_t v38 = v35->n128_u64[0];
        }
        else {
          unint64_t v38 = v35[-1].n128_u64[0];
        }
        unint64_t v39 = v35[-1].n128_u64[1];
        if (v37 < v39) {
          unint64_t v39 = v35->n128_u64[1];
        }
        if (v38 <= v39)
        {
          if (v36 >= v35->n128_u64[0]) {
            unint64_t v36 = v35->n128_u64[0];
          }
          unint64_t v40 = v35[-1].n128_u64[1];
          if (v37 > v40) {
            unint64_t v40 = v35->n128_u64[1];
          }
          v35->n128_u64[0] = v36;
          v35->n128_u64[1] = v40;
          v35[-1].n128_u64[0] = -1;
          v35[-1].n128_u64[1] = -1;
        }
        ++v35;
      }
      while (v35 != (__n128 *)v34);
    }
  }
  uint64_t v42 = *a1;
  uint64_t v41 = a1[1];
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v43 = v41 - v42;
  if (v43)
  {
    if (v43 < 0) {
      sub_2E00();
    }
    unint64_t v44 = v43 >> 4;
    unint64_t v45 = ((unint64_t)((v43 >> 4) - 1) >> 6) + 1;
    *a4 = operator new(8 * v45);
    a4[1] = 0;
    a4[2] = (void *)v45;
    sub_43284(a4, v44, 0);
  }
  uint64_t v46 = v57;
  char v47 = (uint64_t *)v58;
  if (v57 != (__n128 *)v58)
  {
    BOOL v48 = (char *)*a4;
    unint64_t v49 = (a1[1] - *a1) >> 4;
    __n128 v50 = v57;
    do
    {
      unint64_t v51 = v50->n128_u64[0];
      if (v50->n128_u64[0] != -1)
      {
        if (v51) {
          *(void *)&v48[(v51 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v51;
        }
        unint64_t v52 = v50->n128_u64[1];
        if (v52 + 1 < v49) {
          *(void *)&v48[(v52 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v52;
        }
      }
      ++v50;
    }
    while (v50 != (__n128 *)v47);
  }
  if (v46)
  {
    unint64_t v58 = (uint64x2_t *)v46;
    operator delete(v46);
  }
}

void sub_467E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_467EB4(uint64_t a1, void *a2)
{
  __n128 __p = operator new(0x20uLL);
  long long v8 = xmmword_20B8870;
  strcpy((char *)__p, "enable_stairs_restriction");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)a1 = v4;
  __n128 __p = operator new(0x28uLL);
  long long v8 = xmmword_20B9390;
  strcpy((char *)__p, "enable_non_navigable_restriction");
  BOOL v5 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 1) = v5;
  __n128 __p = operator new(0x28uLL);
  long long v8 = xmmword_20E12D0;
  strcpy((char *)__p, "non_navigable_restriction_min_length_m");
  *(void *)(a1 + 8) = sub_5CDE0(a2, &__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_468000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_468028(uint64_t a1, void *a2)
{
  uint64_t v16 = operator new(0x20uLL);
  long long v17 = xmmword_20B91C0;
  strcpy((char *)v16, "simplification_algorithm");
  uint64_t v4 = sub_561B0(a2, (uint64_t)&v16);
  uint64_t v5 = v4;
  int v6 = *(char *)(v4 + 23);
  if ((v6 & 0x80000000) == 0)
  {
    if (v6 != 2) {
      goto LABEL_11;
    }
    uint64_t v7 = (_WORD *)v4;
    if (*(_WORD *)v4 != 28772) {
      goto LABEL_4;
    }
LABEL_9:
    int v8 = 1;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (*(void *)(v4 + 8) != 2) {
    goto LABEL_11;
  }
  uint64_t v7 = *(_WORD **)v4;
  if (**(_WORD **)v4 == 28772) {
    goto LABEL_9;
  }
LABEL_4:
  if (*v7 == 30582)
  {
    int v8 = 2;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_11:
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v20);
    uint64_t v9 = sub_188FC78(&v20, (uint64_t)"Unknown simplification algorithm: ", 34);
    int v10 = *(char *)(v5 + 23);
    if (v10 >= 0) {
      uint64_t v11 = v5;
    }
    else {
      uint64_t v11 = *(void *)v5;
    }
    if (v10 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      uint64_t v12 = *(void *)(v5 + 8);
    }
    sub_188FC78(v9, v11, v12);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v19 < 0) {
      operator delete(__p);
    }
    if (v23 < 0) {
      operator delete(v22);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v8 = 0;
  if (SHIBYTE(v17) < 0) {
LABEL_24:
  }
    operator delete(v16);
LABEL_25:
  *(_DWORD *)a1 = v8;
  BOOL v20 = operator new(0x20uLL);
  long long v21 = xmmword_20B91A0;
  strcpy((char *)v20, "simplification_tolerance_cm");
  int v13 = sub_31AC04(a2, (uint64_t)&v20);
  if (SHIBYTE(v21) < 0) {
    operator delete(v20);
  }
  *(_DWORD *)(a1 + 4) = v13;
  BOOL v20 = operator new(0x28uLL);
  long long v21 = xmmword_20B9390;
  strcpy((char *)v20, "simplification_area_tolerance_m2");
  double v14 = sub_5C7E8(a2, (uint64_t)&v20);
  if (SHIBYTE(v21) < 0) {
    operator delete(v20);
  }
  *(double *)(a1 + 8) = v14;
  return a1;
}

void sub_468334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a22);
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_468398(uint64_t a1, void *a2)
{
  char v11 = 10;
  strcpy((char *)__p, "min_run_cm");
  int v4 = sub_31AC04(a2, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)a1 = v4;
  char v11 = 6;
  strcpy((char *)__p, "uphill");
  uint64_t v5 = sub_5D58C(a2, (uint64_t)__p);
  if (*((_DWORD *)v5 + 2) != 2)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  sub_468590((double *)(a1 + 8), (void *)*v5);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  char v11 = 8;
  strcpy((char *)__p, "downhill");
  int v6 = sub_5D58C(a2, (uint64_t)__p);
  if (*((_DWORD *)v6 + 2) != 2)
  {
    uint64_t v9 = __cxa_allocate_exception(8uLL);
    *uint64_t v9 = &off_23FDF58;
  }
  sub_468590((double *)(a1 + 64), (void *)*v6);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_468568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double *sub_468590(double *a1, void *a2)
{
  strcpy((char *)__p, "gentle_slope_threshold");
  HIBYTE(__p[2]) = 22;
  double v4 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "moderate_slope_threshold");
  double v5 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "steep_slope_threshold");
  double v6 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[2] = v6;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9380;
  strcpy((char *)__p[0], "gentle_min_absolute_elevation_change_required_m");
  double v7 = sub_5C7E8(a2, (uint64_t)__p);
  uint64_t v12 = operator new(0x30uLL);
  long long v13 = xmmword_20B9380;
  strcpy((char *)v12, "gentle_max_absolute_elevation_change_required_m");
  double v8 = sub_5C7E8(a2, (uint64_t)&v12);
  double v9 = a1[1];
  double v10 = (v7 - v8) / (v9 - *a1);
  a1[3] = v10;
  a1[4] = v7 - v9 * v10;
  a1[5] = v8;
  a1[6] = v7;
  if (SHIBYTE(v13) < 0)
  {
    operator delete(v12);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(__p[0]);
  return a1;
}

void sub_468790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  _Unwind_Resume(exception_object);
}

void *sub_46881C(void *result, unsigned int *a2, uint64_t *a3)
{
  if (result != (void *)a2)
  {
    v37[1] = v12;
    v37[2] = v11;
    v37[3] = v10;
    uint64_t v37[4] = v9;
    v37[5] = v8;
    v37[6] = v7;
    v37[7] = v6;
    v37[8] = v5;
    v37[15] = v3;
    unsigned char v37[16] = v4;
    double v14 = (unsigned int *)result + 3;
    if ((unsigned int *)((char *)result + 12) != a2)
    {
      float64x2_t v34 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
      float64x2_t v35 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
      float64x2_t v33 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
      float64x2_t v32 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
      HIDWORD(v16) = 1096306543;
      do
      {
        LODWORD(v16) = *(v14 - 2);
        long double v17 = exp(3.14159265 - (double)v16 * 6.28318531 / 4294967300.0);
        *(double *)&unint64_t v18 = atan((v17 - 1.0 / v17) * 0.5) * 57.2957795;
        long double v19 = *(double *)&v18 * 0.0174532925;
        unsigned int v20 = *(v14 - 3);
        LODWORD(v18) = v14[1];
        long double v21 = exp(3.14159265 - (double)v18 * 6.28318531 / 4294967300.0);
        long double v22 = atan((v21 - 1.0 / v21) * 0.5) * 57.2957795 * 0.0174532925;
        v23.i64[0] = v20;
        v23.i64[1] = *v14;
        int64x2_t v24 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v23), v35), v33), v34), v32);
        double v36 = vsubq_f64((float64x2_t)v24, (float64x2_t)vdupq_laneq_s64(v24, 1)).f64[0];
        long double v25 = sin((v19 - v22) * 0.5);
        long double v26 = v25 * v25;
        double v27 = cos(v19);
        long double v28 = v27 * cos(v22);
        long double v29 = sin(0.5 * v36);
        long double v30 = atan2(sqrt(v26 + v28 * (v29 * v29)), sqrt(1.0 - (v26 + v28 * (v29 * v29))));
        uint64_t v31 = *a3;
        v37[0] = (v30 + v30) * 6372797.56 + *(double *)(*(void *)(*a3 + 8) - 8);
        double result = sub_319A8(v31, v37);
        v14 += 3;
      }
      while (v14 != a2);
    }
  }
  return result;
}

char *sub_468A38@<X0>(char *result@<X0>, double **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  double v6 = *(double **)result;
  double v5 = (double *)*((void *)result + 1);
  uint64_t v7 = (uint64_t)v5 - *(void *)result;
  if (v5 != *(double **)result)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    double result = (char *)operator new((size_t)v5 - *(void *)result);
    double v8 = result;
    *(void *)a3 = result;
    *(void *)(a3 + 8) = result;
    *(void *)(a3 + 16) = &result[8 * (v7 >> 3)];
    if (v5 != v6)
    {
      double v9 = *a2;
      do
      {
        double v10 = 0.0;
        if (*v9 != 0.0)
        {
          double v10 = *v6 / *v9;
          if (v10 > 1.0) {
            double v10 = 1.0;
          }
        }
        double v11 = v10;
        double result = sub_CC00((void **)a3, v8, &v11);
        double v8 = result + 8;
        ++v6;
      }
      while (v6 != v5);
    }
  }
  return result;
}

void sub_468B1C(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_468B3C(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    double v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    double v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 3);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v10 = &v15;
    }
    else {
      double v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    double v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    double v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 8 * a2;
}

void sub_468C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_468D4C(__n128 *a1, uint64x2_t *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  while (2)
  {
    long long v13 = (__n128 *)&a2[-1];
    long long v160 = a2 - 2;
    double v14 = a2 - 3;
    std::string v15 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v15;
          uint64_t v16 = (char *)a2 - (char *)v15;
          unint64_t v17 = ((char *)a2 - (char *)v15) >> 4;
          if (!(!v7 & v6))
          {
            switch(v17)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                unint64_t v121 = a2[-1].u64[0];
                unint64_t v122 = a2[-1].u64[1];
                uint64_t v123 = (__n128 *)&a2[-1];
                BOOL v7 = v121 == v15->n128_u64[0];
                BOOL v124 = v121 < v15->n128_u64[0];
                if (v7) {
                  BOOL v124 = v122 < v15->n128_u64[1];
                }
                if (v124)
                {
                  __n128 v180 = *v15;
                  __n128 *v15 = *v123;
                  __n128 *v123 = v180;
                }
                break;
              case 3uLL:
                uint64_t v114 = v15 + 1;
                unint64_t v115 = v15[1].n128_u64[0];
                unint64_t v116 = v15[1].n128_u64[1];
                BOOL v117 = v115 < v15->n128_u64[0];
                if (v115 == v15->n128_u64[0]) {
                  BOOL v117 = v116 < v15->n128_u64[1];
                }
                unint64_t v119 = a2[-1].u64[0];
                double v118 = (__n128 *)&a2[-1];
                BOOL v7 = v119 == v115;
                BOOL v120 = v119 < v115;
                if (v7) {
                  BOOL v120 = a2[-1].i64[1] < v116;
                }
                if (v117)
                {
                  if (v120)
                  {
                    __n128 v179 = *v15;
                    __n128 *v15 = *v118;
                    __n128 *v118 = v179;
                  }
                  else
                  {
                    __n128 v182 = *v15;
                    __n128 *v15 = *v114;
                    *uint64_t v114 = v182;
                    unint64_t v156 = v15[1].n128_u64[0];
                    unint64_t v157 = a2[-1].u64[0];
                    BOOL v7 = v157 == v156;
                    BOOL v158 = v157 < v156;
                    if (v7) {
                      BOOL v158 = a2[-1].i64[1] < v15[1].n128_u64[1];
                    }
                    if (v158)
                    {
                      __n128 v159 = *v114;
                      *uint64_t v114 = *v118;
                      __n128 *v118 = v159;
                    }
                  }
                }
                else if (v120)
                {
                  __n128 v142 = *v114;
                  *uint64_t v114 = *v118;
                  __n128 *v118 = v142;
                  unint64_t v143 = v15[1].n128_u64[0];
                  BOOL v144 = v143 < v15->n128_u64[0];
                  if (v143 == v15->n128_u64[0]) {
                    BOOL v144 = v15[1].n128_u64[1] < v15->n128_u64[1];
                  }
                  if (v144)
                  {
                    __n128 v181 = *v15;
                    __n128 *v15 = *v114;
                    *uint64_t v114 = v181;
                  }
                }
                break;
              case 4uLL:
                sub_469DC8(v15, v15 + 1, v15 + 2, (__n128 *)&a2[-1], a6);
                break;
              case 5uLL:
                sub_469F4C(v15, v15 + 1, v15 + 2, v15 + 3, (__n128 *)&a2[-1], a6);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v16 <= 383)
          {
            uint64_t v125 = v15 + 1;
            BOOL v127 = v15 == (__n128 *)a2 || v125 == (__n128 *)a2;
            if (a5)
            {
              if (!v127)
              {
                uint64_t v128 = 0;
                unsigned int v129 = v15;
                do
                {
                  unint64_t v131 = v129->n128_u64[0];
                  unint64_t v132 = v129->n128_u64[1];
                  unint64_t v134 = v129[1].n128_u64[0];
                  unint64_t v133 = v129[1].n128_u64[1];
                  unsigned int v129 = v125;
                  BOOL v135 = v133 < v132;
                  BOOL v7 = v134 == v131;
                  BOOL v136 = v134 < v131;
                  if (!v7) {
                    BOOL v135 = v136;
                  }
                  if (v135)
                  {
                    uint64_t v137 = v128;
                    do
                    {
                      unsigned __int16 v138 = (char *)v15 + v137;
                      *(__n128 *)((char *)v15 + v137 + 16) = *(__n128 *)((char *)v15 + v137);
                      if (!v137)
                      {
                        long long v130 = v15;
                        goto LABEL_160;
                      }
                      unint64_t v139 = *((void *)v138 - 2);
                      BOOL v140 = v133 < *((void *)v138 - 1);
                      BOOL v7 = v134 == v139;
                      BOOL v141 = v134 < v139;
                      if (!v7) {
                        BOOL v140 = v141;
                      }
                      v137 -= 16;
                    }
                    while (v140);
                    long long v130 = (__n128 *)((char *)v15 + v137 + 16);
LABEL_160:
                    v130->n128_u64[0] = v134;
                    v130->n128_u64[1] = v133;
                  }
                  uint64_t v125 = v129 + 1;
                  v128 += 16;
                }
                while (&v129[1] != (__n128 *)a2);
              }
            }
            else if (!v127)
            {
              do
              {
                unint64_t v145 = a1->n128_u64[0];
                unint64_t v146 = a1->n128_u64[1];
                unint64_t v148 = a1[1].n128_u64[0];
                unint64_t v147 = a1[1].n128_u64[1];
                a1 = v125;
                BOOL v149 = v147 < v146;
                BOOL v7 = v148 == v145;
                BOOL v150 = v148 < v145;
                if (!v7) {
                  BOOL v149 = v150;
                }
                if (v149)
                {
                  long long v151 = a1;
                  do
                  {
                    *long long v151 = v151[-1];
                    unint64_t v152 = v151[-2].n128_u64[0];
                    unint64_t v153 = v151[-2].n128_u64[1];
                    --v151;
                    BOOL v154 = v147 < v153;
                    BOOL v7 = v148 == v152;
                    BOOL v155 = v148 < v152;
                    if (v7) {
                      BOOL v155 = v154;
                    }
                  }
                  while (v155);
                  v151->n128_u64[0] = v148;
                  v151->n128_u64[1] = v147;
                }
                uint64_t v125 = a1 + 1;
              }
              while (&a1[1] != (__n128 *)a2);
            }
            return;
          }
          if (!a4)
          {
            if (v15 != (__n128 *)a2)
            {
              sub_46A06C((uint64x2_t *)v15, a2, a2, a3);
            }
            return;
          }
          unint64_t v18 = v17 >> 1;
          long long v19 = &v15[v17 >> 1];
          unint64_t v20 = a2[-1].u64[0];
          unint64_t v21 = a2[-1].u64[1];
          if ((unint64_t)v16 < 0x801)
          {
            unint64_t v27 = v15->n128_u64[0];
            unint64_t v28 = v15->n128_u64[1];
            long double v29 = &v15[v18].n128_u64[1];
            BOOL v30 = v28 < *v29;
            if (v15->n128_u64[0] != v19->n128_u64[0]) {
              BOOL v30 = v15->n128_u64[0] < v19->n128_u64[0];
            }
            BOOL v31 = v21 < v28;
            BOOL v7 = v20 == v27;
            BOOL v32 = v20 < v27;
            if (v7) {
              BOOL v32 = v31;
            }
            if (!v30)
            {
              if (v32)
              {
                __n128 v165 = *v15;
                __n128 *v15 = *v13;
                a6 = v165;
                *long long v13 = v165;
                BOOL v34 = v15->n128_u64[1] < *v29;
                if (v15->n128_u64[0] != v19->n128_u64[0]) {
                  BOOL v34 = v15->n128_u64[0] < v19->n128_u64[0];
                }
                if (v34)
                {
                  __n128 v166 = *v19;
                  __n128 *v19 = *v15;
                  a6 = v166;
                  __n128 *v15 = v166;
                  --a4;
                  unint64_t v35 = v15->n128_u64[0];
                  if (a5) {
                    goto LABEL_55;
                  }
                  goto LABEL_95;
                }
              }
              goto LABEL_54;
            }
            if (v32)
            {
              __n128 v162 = *v19;
              __n128 *v19 = *v13;
            }
            else
            {
              __n128 v169 = *v19;
              __n128 *v19 = *v15;
              a6 = v169;
              __n128 *v15 = v169;
              unint64_t v55 = a2[-1].u64[0];
              BOOL v56 = v55 < v15->n128_u64[0];
              if (v55 == v15->n128_u64[0]) {
                BOOL v56 = a2[-1].i64[1] < v15->n128_u64[1];
              }
              if (!v56)
              {
LABEL_54:
                --a4;
                unint64_t v35 = v15->n128_u64[0];
                if (a5) {
                  goto LABEL_55;
                }
                goto LABEL_95;
              }
              __n128 v162 = *v15;
              __n128 *v15 = *v13;
            }
            a6 = v162;
            *long long v13 = v162;
            goto LABEL_54;
          }
          unint64_t v22 = v19->n128_u64[0];
          uint64x2_t v23 = &v15[v18].n128_u64[1];
          BOOL v24 = v19->n128_u64[0] < v15->n128_u64[0];
          if (v19->n128_u64[0] == v15->n128_u64[0]) {
            BOOL v24 = *v23 < v15->n128_u64[1];
          }
          BOOL v25 = v21 < *v23;
          BOOL v7 = v20 == v22;
          BOOL v26 = v20 < v22;
          if (v7) {
            BOOL v26 = v25;
          }
          if (v24)
          {
            if (v26)
            {
              __n128 v161 = *v15;
              __n128 *v15 = *v13;
LABEL_36:
              *long long v13 = v161;
              goto LABEL_37;
            }
            __n128 v167 = *v15;
            __n128 *v15 = *v19;
            __n128 *v19 = v167;
            unint64_t v36 = a2[-1].u64[0];
            BOOL v37 = v36 < v19->n128_u64[0];
            if (v36 == v19->n128_u64[0]) {
              BOOL v37 = a2[-1].i64[1] < *v23;
            }
            if (v37)
            {
              __n128 v161 = *v19;
              __n128 *v19 = *v13;
              goto LABEL_36;
            }
          }
          else if (v26)
          {
            __n128 v163 = *v19;
            __n128 *v19 = *v13;
            *long long v13 = v163;
            BOOL v33 = v19->n128_u64[0] < v15->n128_u64[0];
            if (v19->n128_u64[0] == v15->n128_u64[0]) {
              BOOL v33 = *v23 < v15->n128_u64[1];
            }
            if (v33)
            {
              __n128 v164 = *v15;
              __n128 *v15 = *v19;
              __n128 *v19 = v164;
            }
          }
LABEL_37:
          unint64_t v38 = v15 + 1;
          unint64_t v39 = v15[1].n128_u64[0];
          unint64_t v40 = &v15[v18];
          unint64_t v43 = v40[-1].n128_u64[0];
          uint64_t v41 = v40 - 1;
          unint64_t v42 = v43;
          unint64_t v44 = &v41->n128_u64[1];
          unint64_t v45 = v41->n128_u64[1];
          BOOL v46 = v45 < v15[1].n128_u64[1];
          BOOL v7 = v43 == v39;
          BOOL v47 = v43 < v39;
          if (!v7) {
            BOOL v46 = v47;
          }
          unint64_t v48 = a2[-2].u64[0];
          BOOL v49 = a2[-2].i64[1] < v45;
          BOOL v7 = v48 == v42;
          BOOL v50 = v48 < v42;
          if (v7) {
            BOOL v50 = v49;
          }
          if (v46)
          {
            if (v50)
            {
              __n128 v51 = *v38;
              *unint64_t v38 = *(__n128 *)v160;
              *long long v160 = (uint64x2_t)v51;
            }
            else
            {
              __n128 v58 = *v38;
              *unint64_t v38 = *v41;
              *uint64_t v41 = v58;
              unint64_t v59 = a2[-2].u64[0];
              BOOL v60 = v59 < v41->n128_u64[0];
              if (v59 == v41->n128_u64[0]) {
                BOOL v60 = a2[-2].i64[1] < *v44;
              }
              if (v60)
              {
                uint64x2_t v170 = *(uint64x2_t *)v41;
                *uint64_t v41 = *(__n128 *)v160;
                *long long v160 = v170;
              }
            }
          }
          else if (v50)
          {
            uint64x2_t v168 = *(uint64x2_t *)v41;
            *uint64_t v41 = *(__n128 *)v160;
            *long long v160 = v168;
            unint64_t v52 = v15[1].n128_u64[0];
            BOOL v53 = v41->n128_u64[0] < v52;
            if (v41->n128_u64[0] == v52) {
              BOOL v53 = *v44 < v15[1].n128_u64[1];
            }
            if (v53)
            {
              __n128 v54 = *v38;
              *unint64_t v38 = *v41;
              *uint64_t v41 = v54;
            }
          }
          uint64_t v61 = v15 + 2;
          unint64_t v62 = v15[2].n128_u64[0];
          int v63 = &v15[v18];
          unint64_t v66 = v63[1].n128_u64[0];
          uint64_t v64 = v63 + 1;
          unint64_t v65 = v66;
          unint64_t v67 = &v64->n128_u64[1];
          unint64_t v68 = v64->n128_u64[1];
          BOOL v69 = v68 < v15[2].n128_u64[1];
          BOOL v7 = v66 == v62;
          BOOL v70 = v66 < v62;
          if (!v7) {
            BOOL v69 = v70;
          }
          unint64_t v71 = a2[-3].u64[0];
          BOOL v72 = a2[-3].i64[1] < v68;
          BOOL v7 = v71 == v65;
          BOOL v73 = v71 < v65;
          if (v7) {
            BOOL v73 = v72;
          }
          if (v69)
          {
            if (v73)
            {
              __n128 v74 = *v61;
              *uint64_t v61 = *(__n128 *)v14;
LABEL_76:
              uint64x2_t *v14 = (uint64x2_t)v74;
              goto LABEL_77;
            }
            __n128 v78 = *v61;
            *uint64_t v61 = *v64;
            *uint64_t v64 = v78;
            unint64_t v79 = a2[-3].u64[0];
            BOOL v80 = v79 < v64->n128_u64[0];
            if (v79 == v64->n128_u64[0]) {
              BOOL v80 = a2[-3].i64[1] < *v67;
            }
            if (v80)
            {
              __n128 v172 = *v64;
              *uint64_t v64 = *(__n128 *)v14;
              __n128 v74 = v172;
              goto LABEL_76;
            }
          }
          else if (v73)
          {
            uint64x2_t v171 = *(uint64x2_t *)v64;
            *uint64_t v64 = *(__n128 *)v14;
            uint64x2_t *v14 = v171;
            unint64_t v75 = v15[2].n128_u64[0];
            BOOL v76 = v64->n128_u64[0] < v75;
            if (v64->n128_u64[0] == v75) {
              BOOL v76 = *v67 < v15[2].n128_u64[1];
            }
            if (v76)
            {
              __n128 v77 = *v61;
              *uint64_t v61 = *v64;
              *uint64_t v64 = v77;
            }
          }
LABEL_77:
          unint64_t v81 = v19->n128_u64[0];
          BOOL v82 = v19->n128_u64[0] < v41->n128_u64[0];
          if (v19->n128_u64[0] == v41->n128_u64[0]) {
            BOOL v82 = *v23 < *v44;
          }
          BOOL v7 = v64->n128_u64[0] == v81;
          BOOL v83 = v64->n128_u64[0] < v81;
          if (v7) {
            BOOL v83 = *v67 < *v23;
          }
          if (v82)
          {
            if (v83)
            {
              __n128 v173 = *v41;
              *uint64_t v41 = *v64;
LABEL_93:
              *uint64_t v64 = v173;
              goto LABEL_94;
            }
            __n128 v176 = *v41;
            *uint64_t v41 = *v19;
            __n128 *v19 = v176;
            BOOL v85 = *v67 < *v23;
            if (v64->n128_u64[0] != v19->n128_u64[0]) {
              BOOL v85 = v64->n128_u64[0] < v19->n128_u64[0];
            }
            if (v85)
            {
              __n128 v173 = *v19;
              __n128 *v19 = *v64;
              goto LABEL_93;
            }
          }
          else if (v83)
          {
            __n128 v174 = *v19;
            __n128 *v19 = *v64;
            *uint64_t v64 = v174;
            BOOL v84 = *v23 < *v44;
            if (v19->n128_u64[0] != v41->n128_u64[0]) {
              BOOL v84 = v19->n128_u64[0] < v41->n128_u64[0];
            }
            if (v84)
            {
              __n128 v175 = *v41;
              *uint64_t v41 = *v19;
              __n128 *v19 = v175;
            }
          }
LABEL_94:
          __n128 v177 = *v15;
          __n128 *v15 = *v19;
          a6 = v177;
          __n128 *v19 = v177;
          --a4;
          unint64_t v35 = v15->n128_u64[0];
          if (a5)
          {
LABEL_55:
            unint64_t v57 = v15->n128_u64[1];
            break;
          }
LABEL_95:
          unint64_t v57 = v15->n128_u64[1];
          unint64_t v86 = v15[-1].n128_u64[0];
          BOOL v7 = v86 == v35;
          BOOL v87 = v86 < v35;
          if (v7) {
            BOOL v87 = v15[-1].n128_u64[1] < v57;
          }
          if (v87) {
            break;
          }
          std::string v15 = (__n128 *)sub_4698BC(v15->n128_u64, (unint64_t *)a2);
          a5 = 0;
        }
        uint64_t v88 = 0;
        do
        {
          unint64_t v89 = v15[v88 + 1].n128_u64[0];
          BOOL v90 = v15[v88 + 1].n128_u64[1] < v57;
          BOOL v7 = v89 == v35;
          BOOL v91 = v89 < v35;
          if (!v7) {
            BOOL v90 = v91;
          }
          ++v88;
        }
        while (v90);
        int v92 = &v15[v88];
        uint64_t v93 = a2;
        if (v88 == 1)
        {
          uint64_t v93 = a2;
          do
          {
            if (v92 >= (__n128 *)v93) {
              break;
            }
            unint64_t v98 = v93[-1].u64[0];
            unint64_t v99 = v93[-1].u64[1];
            --v93;
            BOOL v100 = v99 < v57;
            BOOL v7 = v98 == v35;
            BOOL v101 = v98 < v35;
            if (v7) {
              BOOL v101 = v100;
            }
          }
          while (!v101);
        }
        else
        {
          do
          {
            unint64_t v94 = v93[-1].u64[0];
            unint64_t v95 = v93[-1].u64[1];
            --v93;
            BOOL v96 = v95 < v57;
            BOOL v7 = v94 == v35;
            BOOL v97 = v94 < v35;
            if (v7) {
              BOOL v97 = v96;
            }
          }
          while (!v97);
        }
        std::string v15 = v92;
        if (v92 < (__n128 *)v93)
        {
          unint64_t v102 = (__n128 *)v93;
          do
          {
            __n128 v178 = *v15;
            __n128 *v15 = *v102;
            a6 = v178;
            __n128 *v102 = v178;
            do
            {
              unint64_t v103 = v15[1].n128_u64[0];
              unint64_t v104 = v15[1].n128_u64[1];
              ++v15;
              BOOL v105 = v104 < v57;
              BOOL v7 = v103 == v35;
              BOOL v106 = v103 < v35;
              if (v7) {
                BOOL v106 = v105;
              }
            }
            while (v106);
            do
            {
              unint64_t v107 = v102[-1].n128_u64[0];
              unint64_t v108 = v102[-1].n128_u64[1];
              --v102;
              BOOL v109 = v108 < v57;
              BOOL v7 = v107 == v35;
              BOOL v110 = v107 < v35;
              if (v7) {
                BOOL v110 = v109;
              }
            }
            while (!v110);
          }
          while (v15 < v102);
        }
        unint64_t v111 = v15 - 1;
        if (&v15[-1] != a1)
        {
          a6 = *v111;
          *a1 = *v111;
        }
        v15[-1].n128_u64[0] = v35;
        v15[-1].n128_u64[1] = v57;
        if (v92 >= (__n128 *)v93) {
          break;
        }
LABEL_127:
        sub_468D4C(a1, &v15[-1], a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v112 = sub_4699E0(a1, v15 - 1, a6);
      if (sub_4699E0(v15, (__n128 *)a2, v113)) {
        break;
      }
      if (!v112) {
        goto LABEL_127;
      }
    }
    a2 = (uint64x2_t *)&v15[-1];
    if (!v112) {
      continue;
    }
    break;
  }
}

unint64_t *sub_4698BC(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = *(a2 - 2);
  BOOL v5 = *a1 == v4;
  BOOL v6 = *a1 < v4;
  if (v5) {
    BOOL v6 = v3 < *(a2 - 1);
  }
  if (v6)
  {
    BOOL v7 = a1;
    do
    {
      unint64_t v8 = v7[2];
      unint64_t v9 = v7[3];
      v7 += 2;
      BOOL v10 = v3 < v9;
      BOOL v5 = v2 == v8;
      BOOL v11 = v2 < v8;
      if (v5) {
        BOOL v11 = v10;
      }
    }
    while (!v11);
  }
  else
  {
    double v12 = a1 + 2;
    do
    {
      BOOL v7 = v12;
      if (v12 >= a2) {
        break;
      }
      unint64_t v13 = *v12;
      BOOL v14 = v3 < v7[1];
      BOOL v5 = v2 == v13;
      BOOL v15 = v2 < v13;
      if (!v5) {
        BOOL v14 = v15;
      }
      double v12 = v7 + 2;
    }
    while (!v14);
  }
  if (v7 < a2)
  {
    do
    {
      unint64_t v16 = *(a2 - 2);
      unint64_t v17 = *(a2 - 1);
      a2 -= 2;
      BOOL v18 = v3 < v17;
      BOOL v5 = v2 == v16;
      BOOL v19 = v2 < v16;
      if (v5) {
        BOOL v19 = v18;
      }
    }
    while (v19);
  }
  while (v7 < a2)
  {
    long long v29 = *(_OWORD *)v7;
    *(_OWORD *)BOOL v7 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v29;
    do
    {
      unint64_t v20 = v7[2];
      unint64_t v21 = v7[3];
      v7 += 2;
      BOOL v22 = v3 < v21;
      BOOL v5 = v2 == v20;
      BOOL v23 = v2 < v20;
      if (v5) {
        BOOL v23 = v22;
      }
    }
    while (!v23);
    do
    {
      unint64_t v24 = *(a2 - 2);
      unint64_t v25 = *(a2 - 1);
      a2 -= 2;
      BOOL v26 = v3 < v25;
      BOOL v5 = v2 == v24;
      BOOL v27 = v2 < v24;
      if (v5) {
        BOOL v27 = v26;
      }
    }
    while (v27);
  }
  if (v7 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v7 - 1);
  }
  *(v7 - 2) = v2;
  *(v7 - 1) = v3;
  return v7;
}

BOOL sub_4699E0(__n128 *a1, __n128 *a2, __n128 a3)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      unint64_t v7 = a2[-1].n128_u64[0];
      unint64_t v5 = a2[-1].n128_u64[1];
      unint64_t v4 = a2 - 1;
      BOOL v6 = v7 == a1->n128_u64[0];
      LODWORD(v7) = v7 < a1->n128_u64[0];
      if (v6) {
        unint64_t v7 = v5 < a1->n128_u64[1];
      }
      else {
        unint64_t v7 = v7;
      }
      if (v7 != 1) {
        return 1;
      }
      __n128 v8 = *a1;
      *a1 = *v4;
      *unint64_t v4 = v8;
      return v7;
    case 3:
      unint64_t v9 = a1 + 1;
      unint64_t v10 = a1[1].n128_u64[0];
      unint64_t v11 = a1[1].n128_u64[1];
      BOOL v12 = v10 < a1->n128_u64[0];
      if (v10 == a1->n128_u64[0]) {
        BOOL v12 = v11 < a1->n128_u64[1];
      }
      unint64_t v14 = a2[-1].n128_u64[0];
      unint64_t v13 = a2 - 1;
      BOOL v6 = v14 == v10;
      BOOL v15 = v14 < v10;
      if (v6) {
        BOOL v15 = a2[-1].n128_u64[1] < v11;
      }
      if (v12)
      {
        if (v15)
        {
          __n128 v16 = *a1;
          *a1 = *v13;
          *unint64_t v13 = v16;
          return 1;
        }
        __n128 v38 = *a1;
        *a1 = *v9;
        *unint64_t v9 = v38;
        unint64_t v39 = a1[1].n128_u64[0];
        unint64_t v40 = a2[-1].n128_u64[0];
        BOOL v6 = v40 == v39;
        BOOL v41 = v40 < v39;
        if (v6) {
          BOOL v41 = a2[-1].n128_u64[1] < a1[1].n128_u64[1];
        }
        if (!v41) {
          return 1;
        }
        __n128 v42 = *v9;
        *unint64_t v9 = *v13;
        *unint64_t v13 = v42;
        return 1;
      }
      else
      {
        if (!v15) {
          return 1;
        }
        __n128 v29 = *v9;
        *unint64_t v9 = *v13;
        *unint64_t v13 = v29;
        unint64_t v30 = a1[1].n128_u64[0];
        BOOL v31 = v30 < a1->n128_u64[0];
        if (v30 == a1->n128_u64[0]) {
          BOOL v31 = a1[1].n128_u64[1] < a1->n128_u64[1];
        }
        if (!v31) {
          return 1;
        }
        __n128 v32 = *a1;
        *a1 = *v9;
        *unint64_t v9 = v32;
        return 1;
      }
    case 4:
      sub_469DC8(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_469F4C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unint64_t v17 = a1 + 2;
      unint64_t v18 = a1[2].n128_u64[0];
      BOOL v19 = a1 + 1;
      unint64_t v20 = a1[1].n128_u64[0];
      unint64_t v21 = a1->n128_u64[0];
      unint64_t v22 = a1->n128_u64[1];
      unint64_t v23 = a1[1].n128_u64[1];
      BOOL v24 = v20 < a1->n128_u64[0];
      if (v20 == a1->n128_u64[0]) {
        BOOL v24 = v23 < v22;
      }
      unint64_t v25 = a1[2].n128_u64[1];
      BOOL v26 = v25 < v23;
      BOOL v6 = v18 == v20;
      BOOL v27 = v18 < v20;
      if (v6) {
        BOOL v27 = v26;
      }
      if (v24)
      {
        if (v27)
        {
          __n128 v28 = *a1;
          *a1 = *v17;
LABEL_43:
          *unint64_t v17 = v28;
          goto LABEL_44;
        }
        __n128 v43 = *a1;
        *a1 = *v19;
        __n128 *v19 = v43;
        unint64_t v44 = a1[1].n128_u64[0];
        BOOL v6 = v18 == v44;
        BOOL v45 = v18 < v44;
        if (v6) {
          BOOL v45 = v25 < a1[1].n128_u64[1];
        }
        if (v45)
        {
          __n128 v28 = *v19;
          __n128 *v19 = *v17;
          goto LABEL_43;
        }
      }
      else if (v27)
      {
        __n128 v33 = *v19;
        __n128 *v19 = *v17;
        *unint64_t v17 = v33;
        unint64_t v34 = a1[1].n128_u64[0];
        BOOL v35 = a1[1].n128_u64[1] < v22;
        BOOL v6 = v34 == v21;
        BOOL v36 = v34 < v21;
        if (v6) {
          BOOL v36 = v35;
        }
        if (v36)
        {
          __n128 v37 = *a1;
          *a1 = *v19;
          __n128 *v19 = v37;
        }
      }
LABEL_44:
      BOOL v46 = a1 + 3;
      if (&a1[3] == a2) {
        return 1;
      }
      uint64_t v47 = 0;
      int v48 = 0;
      while (1)
      {
        unint64_t v49 = v17->n128_u64[0];
        unint64_t v50 = v17->n128_u64[1];
        unint64_t v52 = v46->n128_u64[0];
        unint64_t v51 = v46->n128_u64[1];
        BOOL v53 = v51 < v50;
        BOOL v6 = v46->n128_u64[0] == v49;
        BOOL v54 = v46->n128_u64[0] < v49;
        if (v6) {
          BOOL v54 = v53;
        }
        if (v54) {
          break;
        }
LABEL_57:
        unint64_t v17 = v46;
        v47 += 16;
        if (++v46 == a2) {
          return 1;
        }
      }
      uint64_t v55 = v47;
      do
      {
        BOOL v56 = (char *)a1 + v55;
        *(__n128 *)((char *)a1 + v55 + 48) = *(__n128 *)((char *)a1 + v55 + 32);
        if (v55 == -32)
        {
          a1->n128_u64[0] = v52;
          a1->n128_u64[1] = v51;
          if (++v48 != 8) {
            goto LABEL_57;
          }
          return &v46[1] == a2;
        }
        unint64_t v57 = *((void *)v56 + 2);
        BOOL v58 = v51 < *((void *)v56 + 3);
        BOOL v6 = v52 == v57;
        BOOL v59 = v52 < v57;
        if (!v6) {
          BOOL v58 = v59;
        }
        v55 -= 16;
      }
      while (v58);
      BOOL v60 = (char *)a1 + v55;
      *((void *)v60 + 6) = v52;
      *((void *)v60 + 7) = v51;
      if (++v48 != 8) {
        goto LABEL_57;
      }
      return &v46[1] == a2;
  }
}

__n128 sub_469DC8(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  unint64_t v5 = a2->n128_u64[0];
  unint64_t v6 = a2->n128_u64[1];
  BOOL v7 = v6 < a1->n128_u64[1];
  if (a2->n128_u64[0] != a1->n128_u64[0]) {
    BOOL v7 = a2->n128_u64[0] < a1->n128_u64[0];
  }
  BOOL v8 = a3->n128_u64[1] < v6;
  BOOL v9 = a3->n128_u64[0] < v5;
  if (a3->n128_u64[0] == v5) {
    BOOL v9 = v8;
  }
  if (v7)
  {
    if (v9)
    {
      double result = *a1;
      *a1 = *a3;
LABEL_17:
      *a3 = result;
      goto LABEL_18;
    }
    double result = *a1;
    *a1 = *a2;
    *a2 = result;
    BOOL v11 = a3->n128_u64[0] < a2->n128_u64[0];
    if (a3->n128_u64[0] == a2->n128_u64[0]) {
      BOOL v11 = a3->n128_u64[1] < a2->n128_u64[1];
    }
    if (v11)
    {
      double result = *a2;
      *a2 = *a3;
      goto LABEL_17;
    }
  }
  else if (v9)
  {
    double result = *a2;
    *a2 = *a3;
    *a3 = result;
    BOOL v10 = a2->n128_u64[0] < a1->n128_u64[0];
    if (a2->n128_u64[0] == a1->n128_u64[0]) {
      BOOL v10 = a2->n128_u64[1] < a1->n128_u64[1];
    }
    if (v10)
    {
      double result = *a1;
      *a1 = *a2;
      *a2 = result;
    }
  }
LABEL_18:
  BOOL v12 = a4->n128_u64[0] < a3->n128_u64[0];
  if (a4->n128_u64[0] == a3->n128_u64[0]) {
    BOOL v12 = a4->n128_u64[1] < a3->n128_u64[1];
  }
  if (v12)
  {
    double result = *a3;
    *a3 = *a4;
    *a4 = result;
    BOOL v13 = a3->n128_u64[0] < a2->n128_u64[0];
    if (a3->n128_u64[0] == a2->n128_u64[0]) {
      BOOL v13 = a3->n128_u64[1] < a2->n128_u64[1];
    }
    if (v13)
    {
      double result = *a2;
      *a2 = *a3;
      *a3 = result;
      BOOL v14 = a2->n128_u64[0] < a1->n128_u64[0];
      if (a2->n128_u64[0] == a1->n128_u64[0]) {
        BOOL v14 = a2->n128_u64[1] < a1->n128_u64[1];
      }
      if (v14)
      {
        double result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_469F4C(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 a6)
{
  result.n128_u64[0] = sub_469DC8(a1, a2, a3, a4, a6).n128_u64[0];
  BOOL v12 = a5->n128_u64[0] < a4->n128_u64[0];
  if (a5->n128_u64[0] == a4->n128_u64[0]) {
    BOOL v12 = a5->n128_u64[1] < a4->n128_u64[1];
  }
  if (v12)
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    BOOL v13 = a4->n128_u64[0] < a3->n128_u64[0];
    if (a4->n128_u64[0] == a3->n128_u64[0]) {
      BOOL v13 = a4->n128_u64[1] < a3->n128_u64[1];
    }
    if (v13)
    {
      __n128 result = *a3;
      *a3 = *a4;
      *a4 = result;
      BOOL v14 = a3->n128_u64[0] < a2->n128_u64[0];
      if (a3->n128_u64[0] == a2->n128_u64[0]) {
        BOOL v14 = a3->n128_u64[1] < a2->n128_u64[1];
      }
      if (v14)
      {
        __n128 result = *a2;
        *a2 = *a3;
        *a3 = result;
        BOOL v15 = a2->n128_u64[0] < a1->n128_u64[0];
        if (a2->n128_u64[0] == a1->n128_u64[0]) {
          BOOL v15 = a2->n128_u64[1] < a1->n128_u64[1];
        }
        if (v15)
        {
          __n128 result = *a1;
          *a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

uint64x2_t *sub_46A06C(uint64x2_t *a1, uint64x2_t *a2, uint64x2_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unint64_t v5 = a2;
    uint64_t v7 = (char *)a2 - (char *)a1;
    uint64_t v8 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v8 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      i64 = a1[v10].i64;
      do
      {
        sub_46A434((uint64_t)a1, a4, v8, i64);
        i64 -= 2;
        --v11;
      }
      while (v11);
    }
    BOOL v13 = v5;
    if (v5 != a3)
    {
      if (v7 >= 32)
      {
        unint64_t v17 = v5;
        do
        {
          BOOL v18 = v17->i64[0] < (unint64_t)a1->i64[0];
          if (v17->i64[0] == a1->i64[0]) {
            BOOL v18 = v17->i64[1] < (unint64_t)a1->i64[1];
          }
          if (v18)
          {
            uint64x2_t v19 = *v17;
            *unint64_t v17 = *a1;
            *a1 = v19;
            unint64_t v20 = a1[1].u64[0];
            if (v7 == 32)
            {
              unint64_t v21 = a1 + 1;
              uint64_t v22 = 1;
            }
            else
            {
              unint64_t v23 = a1[2].u64[0];
              BOOL v24 = a1[1].i64[1] < (unint64_t)a1[2].i64[1];
              if (v20 != v23) {
                BOOL v24 = v20 < v23;
              }
              BOOL v25 = !v24;
              if (v24)
              {
                unint64_t v20 = a1[2].u64[0];
                unint64_t v21 = a1 + 2;
              }
              else
              {
                unint64_t v21 = a1 + 1;
              }
              if (v25) {
                uint64_t v22 = 1;
              }
              else {
                uint64_t v22 = 2;
              }
            }
            unint64_t v26 = a1->i64[0];
            unint64_t v27 = a1->u64[1];
            BOOL v25 = v20 == a1->i64[0];
            BOOL v28 = v20 < a1->i64[0];
            if (v25) {
              BOOL v28 = v21->i64[1] < v27;
            }
            if (!v28)
            {
              __n128 v29 = (uint64_t *)a1;
              do
              {
                BOOL v35 = (uint64x2_t *)v29;
                __n128 v29 = (uint64_t *)v21;
                uint64x2_t *v35 = *v21;
                if ((uint64_t)((unint64_t)(v8 - 2) >> 1) < v22) {
                  break;
                }
                uint64_t v36 = (2 * v22) | 1;
                unint64_t v21 = &a1[v36];
                uint64_t v22 = 2 * v22 + 2;
                if (v22 < v8)
                {
                  unint64_t v30 = v21->i64[0];
                  int32x2_t v31 = vmovn_s64((int64x2_t)vcgtq_u64(v21[1], *v21));
                  __int8 v32 = v31.i8[4];
                  if (v21->i64[0] != v21[1].i64[0]) {
                    __int8 v32 = v31.i8[0];
                  }
                  if (v32)
                  {
                    unint64_t v30 = v21[1].u64[0];
                    ++v21;
                  }
                  else
                  {
                    uint64_t v22 = v36;
                  }
                }
                else
                {
                  unint64_t v30 = v21->i64[0];
                  uint64_t v22 = v36;
                }
                BOOL v33 = v21->i64[1] < v27;
                BOOL v25 = v30 == v26;
                BOOL v34 = v30 < v26;
                if (!v25) {
                  BOOL v33 = v34;
                }
              }
              while (!v33);
              *__n128 v29 = v26;
              v29[1] = v27;
            }
          }
          ++v17;
        }
        while (v17 != a3);
      }
      else
      {
        BOOL v14 = v5;
        do
        {
          BOOL v15 = v14->i64[0] < (unint64_t)a1->i64[0];
          if (v14->i64[0] == a1->i64[0]) {
            BOOL v15 = v14->i64[1] < (unint64_t)a1->i64[1];
          }
          if (v15)
          {
            uint64x2_t v16 = *v14;
            uint64x2_t *v14 = *a1;
            *a1 = v16;
          }
          ++v14;
        }
        while (v14 != a3);
      }
      BOOL v13 = a3;
    }
    if (v7 >= 17)
    {
      uint64_t v37 = (unint64_t)v7 >> 4;
      do
      {
        uint64_t v39 = 0;
        uint64x2_t v57 = *a1;
        unint64_t v40 = a1;
        do
        {
          uint64_t v41 = (uint64_t)&v40[v39 + 1];
          uint64_t v42 = (2 * v39) | 1;
          uint64_t v43 = 2 * v39 + 2;
          if (v43 < v37)
          {
            int64x2_t v44 = *(int64x2_t *)(v41 + 16);
            unsigned __int8 v45 = vmovn_s64(vceqq_s64(*(int64x2_t *)v41, v44)).u8[0];
            int32x2_t v46 = vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)v44, *(uint64x2_t *)v41));
            __int8 v47 = (v45 & 1) != 0 ? v46.i8[4] : v46.i8[0];
            if (v47)
            {
              v41 += 16;
              uint64_t v42 = v43;
            }
          }
          *unint64_t v40 = *(_OWORD *)v41;
          unint64_t v40 = (_OWORD *)v41;
          uint64_t v39 = v42;
        }
        while (v42 <= (uint64_t)((unint64_t)(v37 - 2) >> 1));
        if ((uint64x2_t *)v41 == --v5)
        {
          *(uint64x2_t *)uint64_t v41 = v57;
        }
        else
        {
          *(uint64x2_t *)uint64_t v41 = *v5;
          *unint64_t v5 = v57;
          uint64_t v48 = v41 - (void)a1 + 16;
          if (v48 >= 17)
          {
            unint64_t v49 = (((unint64_t)v48 >> 4) - 2) >> 1;
            unint64_t v50 = &a1[v49];
            unint64_t v51 = *(void *)v41;
            unint64_t v52 = *(void *)(v41 + 8);
            BOOL v53 = v50->i64[0] < *(void *)v41;
            if (v50->i64[0] == *(void *)v41) {
              BOOL v53 = v50->i64[1] < v52;
            }
            if (v53)
            {
              do
              {
                BOOL v54 = (_OWORD *)v41;
                uint64_t v41 = (uint64_t)v50;
                _OWORD *v54 = *v50;
                if (!v49) {
                  break;
                }
                unint64_t v49 = (v49 - 1) >> 1;
                unint64_t v50 = &a1[v49];
                BOOL v55 = v50->i64[0] < v51;
                if (v50->i64[0] == v51) {
                  BOOL v55 = v50->i64[1] < v52;
                }
              }
              while (v55);
              *(void *)uint64_t v41 = v51;
              *(void *)(v41 + 8) = v52;
            }
          }
        }
      }
      while (v37-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_46A434(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (uint64x2_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        unint64_t v10 = v8->i64[0];
      }
      else
      {
        unint64_t v10 = v8->i64[0];
        int32x2_t v11 = vmovn_s64((int64x2_t)vcgtq_u64(v8[1], *v8));
        __int8 v12 = v11.i8[4];
        if (v8->i64[0] != v8[1].i64[0]) {
          __int8 v12 = v11.i8[0];
        }
        if (v12)
        {
          unint64_t v10 = v8[1].u64[0];
          ++v8;
          uint64_t v7 = v9;
        }
      }
      unint64_t v13 = *a4;
      unint64_t v14 = a4[1];
      BOOL v15 = v10 == *a4;
      BOOL v16 = v10 < *a4;
      if (v15) {
        BOOL v16 = v8->i64[1] < v14;
      }
      if (!v16)
      {
        do
        {
          uint64_t v22 = (uint64x2_t *)a4;
          a4 = (uint64_t *)v8;
          uint64x2_t *v22 = *v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v23 = (2 * v7) | 1;
          uint64_t v8 = (uint64x2_t *)(result + 16 * v23);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 < a3)
          {
            unint64_t v17 = v8->i64[0];
            int32x2_t v18 = vmovn_s64((int64x2_t)vcgtq_u64(v8[1], *v8));
            __int8 v19 = v18.i8[4];
            if (v8->i64[0] != v8[1].i64[0]) {
              __int8 v19 = v18.i8[0];
            }
            if (v19)
            {
              unint64_t v17 = v8[1].u64[0];
              ++v8;
            }
            else
            {
              uint64_t v7 = v23;
            }
          }
          else
          {
            unint64_t v17 = v8->i64[0];
            uint64_t v7 = v23;
          }
          BOOL v20 = v8->i64[1] < v14;
          BOOL v15 = v17 == v13;
          BOOL v21 = v17 < v13;
          if (!v15) {
            BOOL v20 = v21;
          }
        }
        while (!v20);
        *a4 = v13;
        a4[1] = v14;
      }
    }
  }
  return result;
}

double sub_46A570()
{
  byte_255872F = 1;
  word_2558718 = 65;
  byte_2558747 = 1;
  word_2558730 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_2558778 = 0u;
  *(_OWORD *)&qword_2558788 = 0u;
  dword_2558798 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_2558778, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_2558778, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_2558778, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_2558778, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_2558750 = 0;
  qword_2558758 = 0;
  qword_2558748 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_2558748 = (uint64_t)v0;
  qword_2558750 = (uint64_t)(v0 + 9);
  qword_2558758 = (uint64_t)(v0 + 9);
  qword_2558760 = 0;
  qword_2558768 = 0;
  unk_2558770 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_2558768 = (uint64_t)(v1 + 9);
  unk_2558770 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_2558760 = (uint64_t)v1;
  return result;
}

void sub_46A7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_2558788) {
    sub_20A890C((void **)qword_2558788);
  }
  uint64_t v37 = (void *)xmmword_2558778;
  *(void *)&xmmword_2558778 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_46A84C(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  sub_EADD78(a2, a1);
  uint64_t v10 = sub_3AEFFC((uint64_t)a2);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  __int8 v12 = *(const void **)v10;
  uint64_t v11 = *(void *)(v10 + 8);
  int64_t v13 = v11 - *(void *)v10;
  if (v11 != *(void *)v10)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v13 >> 3)) >= 0x492492492492493) {
      sub_2E00();
    }
    int v14 = (char *)operator new(v13);
    *(void *)(a1 + 24) = v14;
    *(void *)(a1 + 32) = v14;
    BOOL v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 40) = v15;
    memcpy(v14, v12, v13 - 7);
    *(void *)(a1 + 32) = v15;
  }
  uint64_t v16 = sub_EADE98((uint64_t)a2);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  int32x2_t v18 = *(const void **)v16;
  uint64_t v17 = *(void *)(v16 + 8);
  int64_t v19 = v17 - *(void *)v16;
  if (v17 != *(void *)v16)
  {
    if (v19 < 0) {
      sub_2E00();
    }
    BOOL v20 = (char *)operator new(v17 - *(void *)v16);
    *(void *)(a1 + 48) = v20;
    *(void *)(a1 + 56) = v20;
    BOOL v21 = &v20[8 * (v19 >> 3)];
    *(void *)(a1 + 64) = v21;
    memcpy(v20, v18, v19);
    *(void *)(a1 + 56) = v21;
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = -1;
  sub_46ACA4(a1 + 128, (uint64_t)a2);
  sub_46AE04(a1 + 288, (uint64_t)a2);
  uint64_t v22 = *a4;
  *(_DWORD *)(a1 + 456) = *((_DWORD *)a4 + 2);
  *(void *)(a1 + 448) = v22;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 464) = *((_OWORD *)a4 + 1);
  *(void *)(a1 + 480) = a4[4];
  a4[2] = 0;
  a4[3] = 0;
  a4[4] = 0;
  uint64_t v23 = a4[5];
  *(_DWORD *)(a1 + 496) = *((_DWORD *)a4 + 12);
  *(void *)(a1 + 488) = v23;
  *(void *)(a1 + 504) = sub_EAF548((uint64_t)a2);
  uint64_t v24 = *a3;
  *(_DWORD *)(a1 + 520) = *((_DWORD *)a3 + 2);
  *(void *)(a1 + 512) = v24;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 528) = *((_OWORD *)a3 + 1);
  *(void *)(a1 + 544) = a3[4];
  a3[2] = 0;
  a3[3] = 0;
  a3[4] = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a3 + 5);
  *(void *)(a1 + 568) = a3[7];
  a3[5] = 0;
  a3[6] = 0;
  a3[7] = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = *((_OWORD *)a3 + 4);
  *(void *)(a1 + 592) = a3[10];
  a3[8] = 0;
  a3[9] = 0;
  a3[10] = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a3 + 11);
  *(void *)(a1 + 616) = a3[13];
  a3[11] = 0;
  a3[12] = 0;
  a3[13] = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 624) = *((_OWORD *)a3 + 7);
  *(void *)(a1 + 640) = a3[16];
  a3[14] = 0;
  a3[15] = 0;
  a3[16] = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(a3 + 17);
  *(void *)(a1 + 664) = a3[19];
  a3[17] = 0;
  a3[18] = 0;
  a3[19] = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 672) = *((_OWORD *)a3 + 10);
  *(void *)(a1 + 688) = a3[22];
  a3[20] = 0;
  a3[21] = 0;
  a3[22] = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a3 + 23);
  *(void *)(a1 + 712) = a3[25];
  a3[23] = 0;
  a3[24] = 0;
  a3[25] = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = *((_OWORD *)a3 + 13);
  *(void *)(a1 + 736) = a3[28];
  a3[26] = 0;
  a3[27] = 0;
  a3[28] = 0;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a3 + 29);
  *(void *)(a1 + 760) = a3[31];
  a3[29] = 0;
  a3[30] = 0;
  a3[31] = 0;
  long long v25 = *((_OWORD *)a3 + 17);
  *(_OWORD *)(a1 + 768) = *((_OWORD *)a3 + 16);
  *(_OWORD *)(a1 + 784) = v25;
  sub_46AF64((uint64_t)a2, a1 + 800);
  *(void *)(a1 + 1024) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)a5;
  *(void *)(a1 + 1024) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = 0;
  *(_OWORD *)a5 = 0u;
  *(void *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  return a1;
}

void sub_46ABCC(_Unwind_Exception *a1)
{
  sub_3B0290(v7);
  uint64_t v9 = *(void **)(v1 + 464);
  if (v9)
  {
    *(void *)(v1 + 472) = v9;
    operator delete(v9);
  }
  sub_3B024C(v6);
  sub_3B024C(v5);
  sub_3310C(v4);
  uint64_t v10 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v10;
    operator delete(v10);
    uint64_t v11 = *v2;
    if (!*v2)
    {
LABEL_5:
      __int8 v12 = *(void **)v1;
      if (!*(void *)v1) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = *v2;
    if (!*v2) {
      goto LABEL_5;
    }
  }
  *(void *)(v1 + 32) = v11;
  operator delete(v11);
  __int8 v12 = *(void **)v1;
  if (!*(void *)v1) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_9:
  *(void *)(v1 + 8) = v12;
  operator delete(v12);
  _Unwind_Resume(a1);
}

void sub_46ACA4(uint64_t a1, uint64_t a2)
{
  int v4 = sub_EAE428(a2);
  BOOL v5 = *(double *)(sub_69134(a2) + 32) > 0.95;
  char v6 = *(unsigned char *)(sub_69134(a2) + 68);
  int v7 = *(_DWORD *)sub_EADD50(a2);
  *(_OWORD *)&v10[4] = 0u;
  int v15 = 0;
  uint64_t v18 = 0;
  uint64_t v8 = 0x7FFFFFFFLL;
  int v9 = 0x7FFFFFFF;
  *(void *)uint64_t v10 = 0x7FFFFFFF7FFFFFFFLL;
  unint64_t v11 = 0x8000000080000000;
  *(_OWORD *)__int8 v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)__p_8 = 0u;
  unint64_t v16 = 0x8000000080000000;
  int v17 = 0x7FFFFFFF;
  uint64_t v19 = 0xFFFFFFFFLL;
  long long v20 = xmmword_20E8160;
  *(_DWORD *)a1 = v7;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 20) = v5;
  *(unsigned char *)(a1 + 21) = v6;
  sub_3B1DC8(a1 + 24, (long long *)&v8);
  if (*((void *)&v13 + 1))
  {
    __p_8[0] = *((void **)&v13 + 1);
    operator delete(*((void **)&v13 + 1));
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_46ADF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_46AE04(uint64_t a1, uint64_t a2)
{
  int v4 = sub_486A4C(a2);
  BOOL v5 = *(double *)(sub_EADAD0(a2) + 32) > 0.95;
  char v6 = *(unsigned char *)(sub_EADAD0(a2) + 68);
  int v7 = *(_DWORD *)sub_EADD58(a2);
  *(_OWORD *)&v10[4] = 0u;
  int v15 = 0;
  uint64_t v18 = 0;
  uint64_t v8 = 0x7FFFFFFFLL;
  int v9 = 0x7FFFFFFF;
  *(void *)uint64_t v10 = 0x7FFFFFFF7FFFFFFFLL;
  unint64_t v11 = 0x8000000080000000;
  *(_OWORD *)__int8 v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)__p_8 = 0u;
  unint64_t v16 = 0x8000000080000000;
  int v17 = 0x7FFFFFFF;
  uint64_t v19 = 0xFFFFFFFFLL;
  long long v20 = xmmword_20E8160;
  *(_DWORD *)a1 = v7;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 20) = v5;
  *(unsigned char *)(a1 + 21) = v6;
  sub_3B1DC8(a1 + 24, (long long *)&v8);
  if (*((void *)&v13 + 1))
  {
    __p_8[0] = *((void **)&v13 + 1);
    operator delete(*((void **)&v13 + 1));
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_46AF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *sub_46AF64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  *(_DWORD *)(a2 + 25) = 0;
  *(unsigned char *)(a2 + 29) = 1;
  *(_DWORD *)(a2 + 30) = 0;
  *(_DWORD *)(a2 + 33) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 3) = *(unsigned char *)(sub_69134(a1) + 64);
  *(unsigned char *)(a2 + 5) = *(unsigned char *)(sub_EAD918(a1) + 2);
  *(unsigned char *)(a2 + 6) = *(unsigned char *)(sub_EAD918(a1) + 3);
  *(unsigned char *)(a2 + 7) = *(unsigned char *)(sub_EAD918(a1) + 4);
  *(unsigned char *)(a2 + 30) = *(unsigned char *)(sub_EAD918(a1) + 6);
  *(void *)(a2 + 8) = *(void *)(sub_69134(a1) + 16);
  *(void *)(a2 + 16) = *(void *)(sub_69134(a1) + 8);
  *(unsigned char *)(a2 + 35) = *(unsigned char *)(sub_EAD918(a1) + 8);
  *(unsigned char *)(a2 + 34) = *(unsigned char *)(sub_EAD918(a1) + 9);
  double result = (_DWORD *)sub_45FE5C(a1);
  *(unsigned char *)(a2 + 2) = (*result & 0x200) != 0;
  *(_WORD *)a2 = 0;
  return result;
}

void **sub_46B07C(void **a1)
{
  unint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *((void *)v3 - 4);
        if (v6)
        {
          uint64_t v7 = *((void *)v3 - 3);
          BOOL v5 = (void *)*((void *)v3 - 4);
          if (v7 != v6)
          {
            uint64_t v8 = *((void *)v3 - 3);
            do
            {
              uint64_t v10 = *(void **)(v8 - 24);
              v8 -= 24;
              int v9 = v10;
              if (v10)
              {
                *(void *)(v7 - 16) = v9;
                operator delete(v9);
              }
              uint64_t v7 = v8;
            }
            while (v8 != v6);
            BOOL v5 = (void *)*((void *)v3 - 4);
          }
          *((void *)v3 - 3) = v6;
          operator delete(v5);
        }
        v3 -= 64;
      }
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_46B130(uint64_t *a1, uint64_t *a2, uint64_t **a3, uint64_t a4)
{
  a1[14] = 0;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  uint64_t v6 = (uint64_t)a1 + 324;
  uint64_t v71 = (uint64_t)(a1 + 9);
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_DWORD *)a1 + 32) = -1;
  BOOL v73 = a1 + 16;
  a1[17] = 0;
  BOOL v69 = a1 + 17;
  *((_DWORD *)a1 + 30) = -1;
  *(uint64_t *)((char *)a1 + 142) = 0;
  *((_DWORD *)a1 + 38) = 0x7FFFFFFF;
  unint64_t v68 = a1 + 19;
  *(_OWORD *)(a1 + 21) = 0u;
  *((_DWORD *)a1 + 40) = 0x7FFFFFFF;
  *(uint64_t *)((char *)a1 + 164) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)&long long v7 = 0x8000000080000000;
  a1[23] = 0x8000000080000000;
  *((_OWORD *)a1 + 12) = 0u;
  BOOL v70 = a1 + 24;
  *((unsigned char *)a1 + 240) = 0;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *(uint64_t *)((char *)a1 + 244) = 0x8000000080000000;
  *((_DWORD *)a1 + 63) = 0x7FFFFFFF;
  *((_DWORD *)a1 + 66) = -1;
  *((_OWORD *)a1 + 17) = xmmword_20E8160;
  *((_DWORD *)a1 + 72) = -1;
  a1[37] = 0;
  BOOL v72 = a1 + 36;
  *(uint64_t *)((char *)a1 + 302) = 0;
  *((_DWORD *)a1 + 78) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 41) = 0u;
  *((_DWORD *)a1 + 80) = 0x7FFFFFFF;
  *(uint64_t *)((char *)a1 + 324) = 0x7FFFFFFF7FFFFFFFLL;
  a1[43] = 0x8000000080000000;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((unsigned char *)a1 + 400) = 0;
  *((_DWORD *)a1 + 101) = 0x7FFFFFFF;
  a1[51] = 0x8000000080000000;
  *((_DWORD *)a1 + 106) = -1;
  *((_OWORD *)a1 + 27) = xmmword_20E8160;
  *((_DWORD *)a1 + 112) = 0x7FFFFFFF;
  *(uint64_t *)((char *)a1 + 452) = 0x7FFFFFFF7FFFFFFFLL;
  a1[60] = 0;
  *((_OWORD *)a1 + 29) = 0u;
  a1[61] = 0x8000000080000000;
  *((_DWORD *)a1 + 124) = 0x7FFFFFFF;
  a1[63] = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v77 = (uint64_t)(a1 + 64);
  a1[64] = 0x8000000080000000;
  *((_DWORD *)a1 + 130) = 0x7FFFFFFF;
  *((_OWORD *)a1 + 33) = 0u;
  *((_OWORD *)a1 + 34) = 0u;
  *((_OWORD *)a1 + 35) = 0u;
  *((_OWORD *)a1 + 36) = 0u;
  *((_OWORD *)a1 + 37) = 0u;
  *((_OWORD *)a1 + 38) = 0u;
  *((_OWORD *)a1 + 39) = 0u;
  *((_OWORD *)a1 + 40) = 0u;
  *((_OWORD *)a1 + 41) = 0u;
  *((_OWORD *)a1 + 42) = 0u;
  *((_OWORD *)a1 + 43) = 0u;
  *((_OWORD *)a1 + 44) = 0u;
  *((_OWORD *)a1 + 45) = 0u;
  *((_OWORD *)a1 + 46) = 0u;
  *((void *)&v7 + 1) = 0x8000000080000000;
  *((_OWORD *)a1 + 47) = 0u;
  *((_OWORD *)a1 + 48) = v7;
  uint64_t v8 = a1 + 100;
  a1[102] = 0;
  *((_OWORD *)a1 + 49) = v7;
  *((_OWORD *)a1 + 50) = 0u;
  *((unsigned char *)a1 + 824) = 1;
  *(_DWORD *)((char *)a1 + 825) = 0;
  *((unsigned char *)a1 + 829) = 1;
  int v9 = (int32x4_t *)(a1 + 105);
  *(_DWORD *)((char *)a1 + 833) = 0;
  *(_DWORD *)((char *)a1 + 830) = 0;
  a1[131] = 0;
  *(_OWORD *)(a1 + 127) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  *(_OWORD *)(a1 + 123) = 0u;
  *(_OWORD *)(a1 + 125) = 0u;
  *(_OWORD *)(a1 + 119) = 0u;
  *(_OWORD *)(a1 + 121) = 0u;
  *(_OWORD *)(a1 + 115) = 0u;
  *(_OWORD *)(a1 + 117) = 0u;
  *(_OWORD *)(a1 + 111) = 0u;
  *(_OWORD *)(a1 + 113) = 0u;
  *(_OWORD *)(a1 + 107) = 0u;
  *(_OWORD *)(a1 + 109) = 0u;
  *(_OWORD *)(a1 + 105) = 0u;
  if (!sub_EA80FC((char **)a2))
  {
    *(_OWORD *)unint64_t v89 = 0u;
    *(_OWORD *)BOOL v90 = 0u;
    int v91 = 1065353216;
    v88[0] = a4;
    v88[1] = (uint64_t)v89;
    uint64_t v10 = (void **)nullsub_1(a2);
    sub_EADD78(*v10, (uint64_t)__dst);
    unint64_t v11 = (void *)*a1;
    if (*a1)
    {
      a1[1] = (uint64_t)v11;
      operator delete(v11);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)__dst;
    a1[2] = *(void *)&__dst[16];
    sub_3C7658(v77, *a3);
    __int8 v12 = (uint64_t *)nullsub_1(a2);
    sub_46AF64(*v12, (uint64_t)__dst);
    long long v13 = *(_OWORD *)&__dst[16];
    *uint64_t v8 = *(_OWORD *)__dst;
    v8[1] = v13;
    long long v14 = *(_OWORD *)&__dst[48];
    v8[2] = *(_OWORD *)&__dst[32];
    v8[3] = v14;
    int v15 = (uint64_t *)nullsub_1(a2);
    unint64_t v16 = (int *)sub_69134(*v15);
    sub_46BAE4(v88, 0, *v16, 0, 0);
    uint64_t v67 = v6;
    unint64_t v17 = sub_EA8440(a2);
    if (v17 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v17;
    }
    uint64_t v75 = v18;
    if (v17 >= 2)
    {
      __n128 v74 = (__int32 *)(v6 + 507);
      uint64_t v19 = 1;
      uint64_t v20 = 36;
      do
      {
        BOOL v21 = (long long *)sub_EA8060(a2, v19);
        sub_443EFC(__dst, v21);
        uint64_t v22 = v19 - 1;
        uint64_t v23 = (long long *)sub_EA8060(a2, v19 - 1);
        sub_443EFC(v92, v23);
        uint64_t v24 = *(void *)(sub_EADD1C((uint64_t)__dst) + 32);
        uint64_t v25 = *(void *)(sub_EADD34((uint64_t)v92) + 32);
        if ((v25 & 0xFFFFFFFFFFFFLL) == (v24 & 0xFFFFFFFFFFFFLL)) {
          char v26 = ((v24 & 0x1000000000000) == 0) ^ ((v25 & 0xFF000000000000) == 0);
        }
        else {
          char v26 = 0;
        }
        uint64_t v27 = sub_EADD34((uint64_t)v92);
        unint64_t v28 = *(void *)(sub_EADD1C((uint64_t)__dst) + 32);
        if (__PAIR64__(*(unsigned __int16 *)(v27 + 36), *(_DWORD *)(v27 + 32)) == __PAIR64__(WORD2(v28), v28)) {
          unsigned int v29 = HIWORD(v28) & 1 ^ (*(unsigned char *)(v27 + 38) == 0);
        }
        else {
          unsigned int v29 = 0;
        }
        sub_46B058();
        int32x2_t v31 = v30;
        uint64_t v33 = v32;
        uint64_t v34 = *a1;
        uint64_t v35 = a1[1];
        sub_EADA68();
        sub_472EC8((const void **)a1, v35, v31, v33 + v29, v36, v37, v37 - (v33 + v29));
        sub_46BD04(v77, (uint64_t)&(*a3)[v20], v29);
        sub_46AF64((uint64_t)__dst, (uint64_t)v82);
        *((unsigned char *)a1 + 800) |= v82[0];
        *((unsigned char *)a1 + 801) |= v82[1];
        *((unsigned char *)a1 + 802) |= v82[2];
        *((unsigned char *)a1 + 824) &= v82[24];
        *((unsigned char *)a1 + 827) |= v82[27];
        *((unsigned char *)a1 + 826) |= v82[26];
        *((unsigned char *)a1 + 828) |= v82[28];
        *((unsigned char *)a1 + 829) = v82[29];
        *((unsigned char *)a1 + 830) = v82[30];
        *((unsigned char *)a1 + 825) = v82[25];
        *((unsigned char *)a1 + 836) |= v85;
        *int v9 = vaddq_s32(*v9, v86);
        int32x2_t v38 = (int32x2_t)a1[107];
        uint8x8_t v39 = (uint8x8_t)vadd_s32(v38, v87);
        a1[107] = (uint64_t)v39;
        *((unsigned char *)a1 + 835) |= v84;
        v39.i32[0] = v83;
        int16x8_t v40 = (int16x8_t)vmovl_u8(v39);
        v38.i32[0] = *v74;
        *(int8x8_t *)v40.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v38), *(int8x8_t *)v40.i8);
        *__n128 v74 = vmovn_s16(v40).u32[0];
        uint64_t v41 = (int *)sub_EADAD0((uint64_t)v92);
        sub_46BAE4(v88, -1 - 0x3333333333333333 * ((v35 - v34) >> 3), *v41, v22 + 1, v26);
        sub_405F44((uint64_t)v92);
        sub_405F44((uint64_t)__dst);
        v20 += 36;
        uint64_t v19 = v22 + 2;
      }
      while (v22 + 2 != v75);
    }
    uint64_t v43 = (const void *)*a1;
    uint64_t v42 = a1[1];
    uint64_t v44 = nullsub_1(a2);
    int v45 = *(_DWORD *)sub_EADAD0(*(void *)(v44 + 8) - 472);
    unint64_t v46 = sub_EA8440(a2);
    sub_46BAE4(v88, -1 - 0x3333333333333333 * ((v42 - (uint64_t)v43) >> 3), v45, v46, 0);
    sub_46C158(v71, v89, v79);
    if (__p)
    {
      unint64_t v81 = __p;
      operator delete(__p);
    }
    if (v79[0])
    {
      v79[1] = v79[0];
      operator delete(v79[0]);
    }
    __int8 v47 = (uint64_t *)nullsub_1(a2);
    sub_46ACA4((uint64_t)__dst, *v47);
    uint64_t v48 = *(void *)&__dst[56];
    void *v69 = *(void *)&__dst[8];
    *(void *)((char *)v69 + 6) = *(void *)&__dst[14];
    *(_DWORD *)BOOL v73 = *(_DWORD *)__dst;
    long long v49 = *(_OWORD *)&__dst[40];
    *(_OWORD *)unint64_t v68 = *(_OWORD *)&__dst[24];
    *((_OWORD *)v68 + 1) = v49;
    v68[4] = v48;
    unint64_t v50 = (void *)*v70;
    if (*v70)
    {
      a1[25] = (uint64_t)v50;
      operator delete(v50);
      *BOOL v70 = 0;
      v70[1] = 0;
      v70[2] = 0;
    }
    unint64_t v51 = (void *)a1[27];
    *((_OWORD *)a1 + 12) = *(_OWORD *)v94;
    a1[26] = v95;
    v94[1] = 0;
    uint64_t v95 = 0;
    v94[0] = 0;
    if (v51)
    {
      a1[28] = (uint64_t)v51;
      operator delete(v51);
      a1[27] = 0;
      a1[28] = 0;
      a1[29] = 0;
    }
    *(_OWORD *)(a1 + 27) = v96;
    a1[29] = v97;
    uint64_t v97 = 0;
    long long v96 = 0uLL;
    *((_OWORD *)a1 + 15) = v98;
    if (v73 != __dst)
    {
      unsigned int v52 = *((_DWORD *)a1 + 66);
      unsigned int v53 = v100;
      if (v52 == v100)
      {
        if (v52 <= 1) {
          a1[32] = v99;
        }
      }
      else
      {
        if (v100 <= 1) {
          a1[32] = v99;
        }
        *((_DWORD *)a1 + 66) = v53;
      }
    }
    *((_OWORD *)a1 + 17) = v101;
    if (v94[0])
    {
      v94[1] = v94[0];
      operator delete(v94[0]);
    }
    uint64_t v54 = nullsub_1(a2);
    sub_46AE04((uint64_t)__dst, *(void *)(v54 + 8) - 472);
    uint64_t v55 = *(void *)&__dst[56];
    a1[37] = *(void *)&__dst[8];
    *(uint64_t *)((char *)a1 + 302) = *(void *)&__dst[14];
    *(_DWORD *)BOOL v72 = *(_DWORD *)__dst;
    long long v56 = *(_OWORD *)&__dst[40];
    *(_OWORD *)(a1 + 39) = *(_OWORD *)&__dst[24];
    *(_OWORD *)(a1 + 41) = v56;
    a1[43] = v55;
    uint64x2_t v57 = (void *)a1[44];
    if (v57)
    {
      a1[45] = (uint64_t)v57;
      operator delete(v57);
      a1[44] = 0;
      a1[45] = 0;
      a1[46] = 0;
    }
    *((_OWORD *)a1 + 22) = *(_OWORD *)v94;
    a1[46] = v95;
    v94[1] = 0;
    uint64_t v95 = 0;
    v94[0] = 0;
    BOOL v58 = (void *)(v67 + 52);
    BOOL v59 = (void *)a1[47];
    if (v59)
    {
      a1[48] = (uint64_t)v59;
      operator delete(v59);
      void *v58 = 0;
      *(void *)(v67 + 60) = 0;
      *(void *)(v67 + 68) = 0;
    }
    *(_OWORD *)BOOL v58 = v96;
    a1[49] = v97;
    uint64_t v97 = 0;
    long long v96 = 0uLL;
    *((_OWORD *)a1 + 25) = v98;
    if (v72 != __dst)
    {
      unsigned int v60 = *((_DWORD *)a1 + 106);
      unsigned int v61 = v100;
      if (v60 == v100)
      {
        if (v60 <= 1) {
          a1[52] = v99;
        }
      }
      else
      {
        if (v100 <= 1) {
          a1[52] = v99;
        }
        *((_DWORD *)a1 + 106) = v61;
      }
    }
    *((_OWORD *)a1 + 27) = v101;
    if (v94[0])
    {
      v94[1] = v94[0];
      operator delete(v94[0]);
    }
    a1[63] = sub_EA9A00(a2);
    unint64_t v62 = v90[0];
    if (v90[0])
    {
      do
      {
        unint64_t v65 = (void *)*v62;
        unint64_t v66 = (void *)v62[3];
        if (v66)
        {
          v62[4] = v66;
          operator delete(v66);
        }
        operator delete(v62);
        unint64_t v62 = v65;
      }
      while (v65);
    }
    int v63 = v89[0];
    v89[0] = 0;
    if (v63) {
      operator delete(v63);
    }
  }
  return a1;
}

void sub_46B9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_3AB00((uint64_t)&a39);
  uint64_t v41 = (void **)(v39 + 464);
  sub_46B07C((void **)(v39 + 1032));
  uint64_t v42 = *(void **)(v39 + 1008);
  if (v42)
  {
    *(void *)(v39 + 1016) = v42;
    operator delete(v42);
  }
  sub_3B01C8(v39 + 864);
  sub_3B0290(a21);
  uint64_t v43 = *v41;
  if (*v41)
  {
    *(void *)(v39 + 472) = v43;
    operator delete(v43);
  }
  sub_3B024C(a15);
  sub_3B024C(a16);
  sub_3310C(a14);
  uint64_t v44 = *(void **)(v39 + 48);
  if (v44)
  {
    *(void *)(v39 + 56) = v44;
    operator delete(v44);
    int v45 = *(void **)(v39 + 24);
    if (!v45)
    {
LABEL_7:
      unint64_t v46 = *(void **)v39;
      if (!*(void *)v39) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v45 = *(void **)(v39 + 24);
    if (!v45) {
      goto LABEL_7;
    }
  }
  *(void *)(v39 + 32) = v45;
  operator delete(v45);
  unint64_t v46 = *(void **)v39;
  if (!*(void *)v39) {
LABEL_8:
  }
    _Unwind_Resume(a1);
LABEL_11:
  *(void *)(v39 + 8) = v46;
  operator delete(v46);
  _Unwind_Resume(a1);
}

void sub_46BAE4(uint64_t *a1, unint64_t a2, int a3, uint64_t a4, char a5)
{
  unint64_t v25 = a2;
  uint64_t v7 = *(void *)*a1;
  if (v7 == *(void *)(*a1 + 8))
  {
    char v9 = 0;
    memset(&v26[1], 0, 23);
  }
  else
  {
    uint64_t v8 = v7 + 24 * a4;
    char v9 = *(unsigned char *)v8;
    *(_OWORD *)&v26[1] = *(_OWORD *)(v8 + 1);
    *(uint64_t **)((char *)&v26[2] + 7) = *(uint64_t **)(v8 + 16);
  }
  uint64_t v10 = a1[1];
  v26[0] = (uint64_t *)&v25;
  unint64_t v11 = sub_47188C(v10, &v25, (uint64_t)&unk_20F06E0, v26);
  long long v13 = (char *)v11[4];
  unint64_t v12 = v11[5];
  if ((unint64_t)v13 < v12)
  {
    *(void *)long long v13 = v25;
    *((_DWORD *)v13 + 2) = a3;
    v13[16] = v9;
    *(_OWORD *)(v13 + 17) = *(_OWORD *)&v26[1];
    *((uint64_t **)v13 + 4) = *(uint64_t **)((char *)&v26[2] + 7);
    v13[40] = a5;
    long long v14 = v13 + 48;
    goto LABEL_17;
  }
  int v15 = (unsigned char *)v11[3];
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v15) >> 4) + 1;
  if (v16 > 0x555555555555555) {
    sub_2E00();
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v15) >> 4);
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v18 = 0x555555555555555;
  }
  else {
    unint64_t v18 = v16;
  }
  if (v18 > 0x555555555555555) {
    sub_188D718();
  }
  uint64_t v19 = (char *)operator new(48 * v18);
  uint64_t v20 = &v19[16 * ((v13 - v15) >> 4)];
  BOOL v21 = &v19[48 * v18];
  *(void *)uint64_t v20 = v25;
  *((_DWORD *)v20 + 2) = a3;
  v20[16] = v9;
  *(_OWORD *)(v20 + 17) = *(_OWORD *)&v26[1];
  *((uint64_t **)v20 + 4) = *(uint64_t **)((char *)&v26[2] + 7);
  v20[40] = a5;
  long long v14 = v20 + 48;
  if (v13 == v15)
  {
    v11[3] = v20;
    void v11[4] = v14;
    v11[5] = v21;
    if (!v15) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  do
  {
    uint64_t v22 = v20 - 48;
    long long v23 = *((_OWORD *)v13 - 3);
    long long v24 = *((_OWORD *)v13 - 1);
    *((_OWORD *)v20 - 2) = *((_OWORD *)v13 - 2);
    *((_OWORD *)v20 - 1) = v24;
    *((_OWORD *)v20 - 3) = v23;
    v13 -= 48;
    v20 -= 48;
  }
  while (v13 != v15);
  v11[3] = v22;
  void v11[4] = v14;
  v11[5] = v21;
  if (v15) {
LABEL_16:
  }
    operator delete(v15);
LABEL_17:
  void v11[4] = v14;
}

char *sub_46BD04(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = *(_DWORD *)(a1 + 4);
  int v7 = *(_DWORD *)(a2 + 4);
  BOOL v8 = v7 == 0x7FFFFFFF || v6 == 0x7FFFFFFF;
  int v9 = v7 + v6;
  if (v8) {
    int v9 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a1 + 4) = v9;
  unint64_t v11 = *(char **)(a2 + 16);
  uint64_t v10 = *(char **)(a2 + 24);
  if (v11 != v10)
  {
    uint64_t v12 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 16) != v12)
    {
      uint64_t v13 = a1 + 16;
      if (a3)
      {
        int v14 = *(_DWORD *)(v12 - 4);
        int v15 = *(_DWORD *)v11;
        BOOL v16 = v15 == 0x7FFFFFFF || v14 == 0x7FFFFFFF;
        int v17 = v15 + v14;
        if (v16) {
          int v17 = 0x7FFFFFFF;
        }
        *(_DWORD *)(v12 - 4) = v17;
        uint64_t v12 = *(void *)(a1 + 24);
        unint64_t v11 = *(char **)(a2 + 16);
        uint64_t v10 = *(char **)(a2 + 24);
        uint64_t v18 = 1;
      }
      else
      {
        uint64_t v18 = 0;
      }
      sub_471BC0(v13, v12, &v11[4 * v18], v10, (v10 - &v11[4 * v18]) >> 2);
    }
  }
  uint64_t v20 = *(char **)(a2 + 40);
  uint64_t v19 = *(char **)(a2 + 48);
  if (v20 != v19)
  {
    uint64_t v21 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 40) != v21)
    {
      if (a3)
      {
        int v22 = *(_DWORD *)(v21 - 4);
        int v23 = *(_DWORD *)v20;
        BOOL v24 = v23 == 0x7FFFFFFF || v22 == 0x7FFFFFFF;
        int v25 = v23 + v22;
        if (v24) {
          int v25 = 0x7FFFFFFF;
        }
        *(_DWORD *)(v21 - 4) = v25;
        uint64_t v21 = *(void *)(a1 + 48);
        uint64_t v20 = *(char **)(a2 + 40);
        uint64_t v19 = *(char **)(a2 + 48);
        uint64_t v26 = 1;
      }
      else
      {
        uint64_t v26 = 0;
      }
      sub_471BC0(a1 + 40, v21, &v20[4 * v26], v19, (v19 - &v20[4 * v26]) >> 2);
    }
  }
  unint64_t v28 = *(char **)(a2 + 64);
  uint64_t v27 = *(char **)(a2 + 72);
  if (v28 != v27)
  {
    uint64_t v29 = *(void *)(a1 + 72);
    if (*(void *)(a1 + 64) != v29)
    {
      if (a3)
      {
        int v30 = *(_DWORD *)(v29 - 4);
        int v31 = *(_DWORD *)v28;
        BOOL v32 = v31 == 0x7FFFFFFF || v30 == 0x7FFFFFFF;
        int v33 = v31 + v30;
        if (v32) {
          int v33 = 0x7FFFFFFF;
        }
        *(_DWORD *)(v29 - 4) = v33;
        uint64_t v29 = *(void *)(a1 + 72);
        unint64_t v28 = *(char **)(a2 + 64);
        uint64_t v27 = *(char **)(a2 + 72);
        uint64_t v34 = 1;
      }
      else
      {
        uint64_t v34 = 0;
      }
      sub_471BC0(a1 + 64, v29, &v28[4 * v34], v27, (v27 - &v28[4 * v34]) >> 2);
    }
  }
  uint64_t v36 = *(char **)(a2 + 88);
  uint64_t v35 = *(char **)(a2 + 96);
  if (v36 != v35)
  {
    uint64_t v37 = *(void *)(a1 + 96);
    if (*(void *)(a1 + 88) != v37)
    {
      if (a3)
      {
        int v38 = *(_DWORD *)(v37 - 4);
        int v39 = *(_DWORD *)v36;
        BOOL v40 = v39 == 0x7FFFFFFF || v38 == 0x7FFFFFFF;
        int v41 = v39 + v38;
        if (v40) {
          int v41 = 0x7FFFFFFF;
        }
        *(_DWORD *)(v37 - 4) = v41;
        uint64_t v37 = *(void *)(a1 + 96);
        uint64_t v36 = *(char **)(a2 + 88);
        uint64_t v35 = *(char **)(a2 + 96);
        uint64_t v42 = 1;
      }
      else
      {
        uint64_t v42 = 0;
      }
      sub_471BC0(a1 + 88, v37, &v36[4 * v42], v35, (v35 - &v36[4 * v42]) >> 2);
    }
  }
  uint64_t v44 = *(char **)(a2 + 112);
  uint64_t v43 = *(char **)(a2 + 120);
  if (v44 != v43)
  {
    uint64_t v45 = *(void *)(a1 + 120);
    if (*(void *)(a1 + 112) != v45)
    {
      if (a3)
      {
        int v46 = *(_DWORD *)(v45 - 4);
        int v47 = *(_DWORD *)v44;
        BOOL v48 = v47 == 0x7FFFFFFF || v46 == 0x7FFFFFFF;
        int v49 = v47 + v46;
        if (v48) {
          int v49 = 0x7FFFFFFF;
        }
        *(_DWORD *)(v45 - 4) = v49;
        uint64_t v45 = *(void *)(a1 + 120);
        uint64_t v44 = *(char **)(a2 + 112);
        uint64_t v43 = *(char **)(a2 + 120);
        uint64_t v50 = 1;
      }
      else
      {
        uint64_t v50 = 0;
      }
      sub_471BC0(a1 + 112, v45, &v44[4 * v50], v43, (v43 - &v44[4 * v50]) >> 2);
    }
  }
  unsigned int v52 = *(char **)(a2 + 136);
  unint64_t v51 = *(char **)(a2 + 144);
  if (v52 != v51)
  {
    uint64_t v53 = *(void *)(a1 + 144);
    if (*(void *)(a1 + 136) != v53)
    {
      if (a3)
      {
        int v54 = *(_DWORD *)(v53 - 4);
        int v55 = *(_DWORD *)v52;
        BOOL v56 = v55 == 0x7FFFFFFF || v54 == 0x7FFFFFFF;
        int v57 = v55 + v54;
        if (v56) {
          int v57 = 0x7FFFFFFF;
        }
        *(_DWORD *)(v53 - 4) = v57;
        uint64_t v53 = *(void *)(a1 + 144);
        unsigned int v52 = *(char **)(a2 + 136);
        unint64_t v51 = *(char **)(a2 + 144);
        uint64_t v58 = 1;
      }
      else
      {
        uint64_t v58 = 0;
      }
      sub_471BC0(a1 + 136, v53, &v52[4 * v58], v51, (v51 - &v52[4 * v58]) >> 2);
    }
  }
  unsigned int v60 = *(char **)(a2 + 160);
  BOOL v59 = *(char **)(a2 + 168);
  if (v60 != v59)
  {
    uint64_t v61 = *(void *)(a1 + 168);
    if (*(void *)(a1 + 160) != v61)
    {
      if (a3)
      {
        int v62 = *(_DWORD *)(v61 - 4);
        int v63 = *(_DWORD *)v60;
        BOOL v64 = v63 == 0x7FFFFFFF || v62 == 0x7FFFFFFF;
        int v65 = v63 + v62;
        if (v64) {
          int v65 = 0x7FFFFFFF;
        }
        *(_DWORD *)(v61 - 4) = v65;
        uint64_t v61 = *(void *)(a1 + 168);
        unsigned int v60 = *(char **)(a2 + 160);
        BOOL v59 = *(char **)(a2 + 168);
        uint64_t v66 = 1;
      }
      else
      {
        uint64_t v66 = 0;
      }
      sub_471BC0(a1 + 160, v61, &v60[4 * v66], v59, (v59 - &v60[4 * v66]) >> 2);
    }
  }
  if ((a3 & 1) == 0)
  {
    int v92 = 0;
    sub_3B79D0((void **)(a1 + 184), &v92);
  }
  sub_471BC0(a1 + 184, *(void *)(a1 + 192), *(char **)(a2 + 184), *(char **)(a2 + 192), (uint64_t)(*(void *)(a2 + 192) - *(void *)(a2 + 184)) >> 2);
  if ((a3 & 1) == 0)
  {
    int v93 = 0;
    sub_3B79D0((void **)(a1 + 208), &v93);
  }
  sub_471BC0(a1 + 208, *(void *)(a1 + 216), *(char **)(a2 + 208), *(char **)(a2 + 216), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 2);
  if ((a3 & 1) == 0)
  {
    int v94 = 0;
    sub_3B79D0((void **)(a1 + 232), &v94);
  }
  double result = sub_471BC0(a1 + 232, *(void *)(a1 + 240), *(char **)(a2 + 232), *(char **)(a2 + 240), (uint64_t)(*(void *)(a2 + 240) - *(void *)(a2 + 232)) >> 2);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  int v68 = *(_DWORD *)(a1 + 264);
  int v69 = *(_DWORD *)(a2 + 264);
  BOOL v70 = v69 == 0x7FFFFFFF || v68 == 0x7FFFFFFF;
  int v71 = v69 + v68;
  if (v70) {
    int v71 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a1 + 264) = v71;
  int v72 = *(_DWORD *)(a1 + 268);
  int v73 = *(_DWORD *)(a2 + 268);
  BOOL v74 = v73 == 0x7FFFFFFF || v72 == 0x7FFFFFFF;
  int v75 = v73 + v72;
  if (v74) {
    int v75 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a1 + 268) = v75;
  int v76 = *(_DWORD *)(a1 + 272);
  int v77 = *(_DWORD *)(a2 + 272);
  BOOL v78 = v77 == 0x7FFFFFFF || v76 == 0x7FFFFFFF;
  int v79 = v77 + v76;
  if (v78) {
    int v79 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a1 + 272) = v79;
  int v80 = *(_DWORD *)(a1 + 276);
  int v81 = *(_DWORD *)(a2 + 276);
  BOOL v82 = v81 == 0x7FFFFFFF || v80 == 0x7FFFFFFF;
  int v83 = v81 + v80;
  if (v82) {
    int v83 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a1 + 276) = v83;
  int v84 = *(_DWORD *)(a1 + 280);
  int v85 = *(_DWORD *)(a2 + 280);
  BOOL v86 = v85 == 0x7FFFFFFF || v84 == 0x7FFFFFFF;
  int v87 = v85 + v84;
  if (v86) {
    int v87 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a1 + 280) = v87;
  int v88 = *(_DWORD *)(a1 + 284);
  int v89 = *(_DWORD *)(a2 + 284);
  BOOL v90 = v89 == 0x7FFFFFFF || v88 == 0x7FFFFFFF;
  int v91 = v89 + v88;
  if (v90) {
    int v91 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a1 + 284) = v91;
  return result;
}

void sub_46C158(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 24);
  int v68 = (char **)(a1 + 24);
  *(void *)(a1 + 8) = *(void *)a1;
  *(void *)(a1 + 32) = v5;
  __n128 __p = 0;
  int v71 = 0;
  uint64_t v72 = 0;
  int v6 = (void *)a2[2];
  if (!v6) {
    goto LABEL_19;
  }
  unint64_t v8 = 0;
  do
  {
    uint64_t v9 = v6[3];
    uint64_t v10 = v6[4];
    if (v9 != v10)
    {
      sub_A4710((uint64_t)&__p, v6 + 2);
      v8 -= 0x5555555555555555 * ((v10 - v9) >> 4);
    }
    int v6 = (void *)*v6;
  }
  while (v6);
  if (__p == v71)
  {
LABEL_19:
    sub_3B1C7C(a3, a1);
    goto LABEL_82;
  }
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  unint64_t v11 = *(unsigned char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < v8)
  {
    if (v8 >= 0x555555555555556) {
      sub_2E00();
    }
    uint64_t v12 = *(unsigned char **)(a1 + 8);
    uint64_t v13 = (char *)operator new(48 * v8);
    int v14 = &v13[48 * ((v12 - v11) / 48)];
    int v15 = v14;
    if (v12 != v11)
    {
      BOOL v16 = &v13[48 * ((v12 - v11) / 48)];
      do
      {
        int v15 = v16 - 48;
        long long v17 = *((_OWORD *)v12 - 3);
        long long v18 = *((_OWORD *)v12 - 1);
        *((_OWORD *)v16 - 2) = *((_OWORD *)v12 - 2);
        *((_OWORD *)v16 - 1) = v18;
        *((_OWORD *)v16 - 3) = v17;
        v12 -= 48;
        v16 -= 48;
      }
      while (v12 != v11);
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = &v13[48 * v8];
    if (v11) {
      operator delete(v11);
    }
  }
  unint64_t v19 = *(v71 - 1) + 1;
  uint64_t v20 = *(unsigned char **)(a1 + 24);
  if (v19 <= (uint64_t)(*(void *)(a1 + 40) - (void)v20) >> 3) {
    goto LABEL_27;
  }
  if (v19 >> 61) {
    sub_2E00();
  }
  uint64_t v21 = *(unsigned char **)(a1 + 32);
  int v22 = (char *)operator new(8 * v19);
  uint64_t v23 = v21 - v20;
  BOOL v24 = &v22[(v21 - v20) & 0xFFFFFFFFFFFFFFF8];
  int v25 = v24;
  if (v21 != v20)
  {
    if ((unint64_t)(v23 - 8) < 0x58)
    {
      int v25 = &v22[(v21 - v20) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_24:
        uint64_t v34 = *((void *)v21 - 1);
        v21 -= 8;
        *((void *)v25 - 1) = v34;
        v25 -= 8;
      }
      while (v21 != v20);
      goto LABEL_25;
    }
    int v25 = &v22[(v21 - v20) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v21[-(v23 & 0xFFFFFFFFFFFFFFF8)] - v22) < 0x20) {
      goto LABEL_24;
    }
    uint64_t v26 = v23 >> 3;
    unint64_t v27 = ((unint64_t)(v23 - 8) >> 3) + 1;
    uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v29 = &v21[-v28];
    int v25 = &v24[-v28];
    int v30 = &v22[8 * v26 - 16];
    int v31 = (long long *)(v21 - 16);
    uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v33 = *v31;
      *((_OWORD *)v30 - 1) = *(v31 - 1);
      *(_OWORD *)int v30 = v33;
      v30 -= 32;
      v31 -= 2;
      v32 -= 4;
    }
    while (v32);
    uint64_t v21 = v29;
    if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_24;
    }
  }
LABEL_25:
  *(void *)(a1 + 24) = v25;
  *(void *)(a1 + 32) = v24;
  *(void *)(a1 + 40) = &v22[8 * v19];
  if (v20) {
    operator delete(v20);
  }
LABEL_27:
  uint64_t v67 = a2;
  int v65 = a3;
  LODWORD(v69) = 0;
  sub_2EBAD4((uint64_t)v68, (int *)&v69);
  uint64_t v35 = (unint64_t *)__p;
  uint64_t v66 = v71;
  if (__p == v71) {
    goto LABEL_81;
  }
  do
  {
    unint64_t v36 = *v35;
    uint64_t v37 = *(char **)(a1 + 24);
    int v38 = *(char **)(a1 + 32);
    unint64_t v39 = (v38 - v37) >> 3;
    while (v36 >= v39)
    {
      unint64_t v41 = *(void *)(a1 + 40);
      if ((unint64_t)v38 < v41)
      {
        *(void *)int v38 = *((void *)v38 - 1);
        uint64_t v40 = (uint64_t)(v38 + 8);
        goto LABEL_30;
      }
      unint64_t v42 = v39 + 1;
      if ((v39 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v43 = v41 - (void)v37;
      if (v43 >> 2 > v42) {
        unint64_t v42 = v43 >> 2;
      }
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v42;
      }
      if (v44)
      {
        if (v44 >> 61) {
          sub_188D718();
        }
        uint64_t v45 = operator new(8 * v44);
        int v46 = &v45[8 * v39];
        *(void *)int v46 = *((void *)v38 - 1);
        uint64_t v40 = (uint64_t)(v46 + 8);
        if (v38 == v37) {
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t v45 = 0;
        int v46 = (char *)(8 * v39);
        *(void *)(8 * v39) = *((void *)v38 - 1);
        uint64_t v40 = 8 * v39 + 8;
        if (v38 == v37) {
          goto LABEL_47;
        }
      }
      unint64_t v47 = v38 - 8 - v37;
      if (v47 >= 0x168)
      {
        uint64_t v50 = 8 * v39;
        if (&v45[8 * v39 - 8 - (v47 & 0xFFFFFFFFFFFFFFF8)] > &v45[8 * v39 - 8])
        {
          BOOL v48 = v38;
        }
        else if (&v38[-(v47 & 0xFFFFFFFFFFFFFFF8) - 8] > v38 - 8)
        {
          BOOL v48 = v38;
        }
        else if ((unint64_t)(v38 - &v45[v50]) >= 0x20)
        {
          uint64_t v51 = (v47 >> 3) + 1;
          uint64_t v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v48 = &v38[-v52];
          v46 -= v52;
          uint64_t v53 = &v45[v50 - 16];
          int v54 = v38 - 16;
          uint64_t v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v56 = *(_OWORD *)v54;
            *(v53 - 1) = *((_OWORD *)v54 - 1);
            *uint64_t v53 = v56;
            v53 -= 2;
            v54 -= 32;
            v55 -= 4;
          }
          while (v55);
          if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_47;
          }
        }
        else
        {
          BOOL v48 = v38;
        }
      }
      else
      {
        BOOL v48 = v38;
      }
      do
      {
        uint64_t v49 = *((void *)v48 - 1);
        v48 -= 8;
        *((void *)v46 - 1) = v49;
        v46 -= 8;
      }
      while (v48 != v37);
LABEL_47:
      *(void *)(a1 + 24) = v46;
      *(void *)(a1 + 32) = v40;
      *(void *)(a1 + 40) = &v45[8 * v44];
      if (v37)
      {
        operator delete(v37);
        uint64_t v37 = *v68;
      }
      else
      {
        uint64_t v37 = v46;
      }
LABEL_30:
      *(void *)(a1 + 32) = v40;
      unint64_t v39 = (v40 - (uint64_t)v37) >> 3;
      int v38 = (char *)v40;
    }
    int8x8_t v57 = (int8x8_t)v67[1];
    if (!*(void *)&v57) {
      goto LABEL_85;
    }
    uint8x8_t v58 = (uint8x8_t)vcnt_s8(v57);
    v58.i16[0] = vaddlv_u8(v58);
    if (v58.u32[0] > 1uLL)
    {
      unint64_t v59 = v36;
      if (v36 >= *(void *)&v57) {
        unint64_t v59 = v36 % *(void *)&v57;
      }
    }
    else
    {
      unint64_t v59 = (*(void *)&v57 - 1) & v36;
    }
    unsigned int v60 = *(uint64_t ****)(*v67 + 8 * v59);
    if (!v60 || (uint64_t v61 = *v60) == 0) {
LABEL_85:
    }
      sub_5AE8("unordered_map::at: key not found");
    if (v58.u32[0] < 2uLL)
    {
      uint64_t v62 = *(void *)&v57 - 1;
      while (1)
      {
        BOOL v64 = v61[1];
        if ((uint64_t *)v36 == v64)
        {
          if (v61[2] == (uint64_t *)v36) {
            goto LABEL_80;
          }
        }
        else if (((unint64_t)v64 & v62) != v59)
        {
          goto LABEL_85;
        }
        uint64_t v61 = (uint64_t **)*v61;
        if (!v61) {
          goto LABEL_85;
        }
      }
    }
    while (2)
    {
      unint64_t v63 = (unint64_t)v61[1];
      if (v36 != v63)
      {
        if (v63 >= *(void *)&v57) {
          v63 %= *(void *)&v57;
        }
        if (v63 != v59) {
          goto LABEL_85;
        }
LABEL_70:
        uint64_t v61 = (uint64_t **)*v61;
        if (!v61) {
          goto LABEL_85;
        }
        continue;
      }
      break;
    }
    if (v61[2] != (uint64_t *)v36) {
      goto LABEL_70;
    }
LABEL_80:
    sub_473468((char **)a1, *(void *)(a1 + 8), v61[3], (long long *)v61[4], 0xAAAAAAAAAAAAAAABLL * (((char *)v61[4] - (char *)v61[3]) >> 4));
    unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
    sub_A4710((uint64_t)v68, &v69);
    ++v35;
  }
  while (v35 != v66);
LABEL_81:
  sub_3B1C7C(v65, a1);
LABEL_82:
  if (__p)
  {
    int v71 = (unint64_t *)__p;
    operator delete(__p);
  }
}

void sub_46C728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_46C760(void *a1)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3);
}

void *sub_46C77C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(result[1] - *result) >> 3);
  *a2 = result;
  a2[1] = 0;
  a2[2] = result;
  a2[3] = v2;
  return result;
}

void *sub_46C7A0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(result[1] - *result) >> 3);
  *a2 = result;
  a2[1] = v2;
  a2[2] = result;
  a2[3] = v2;
  return result;
}

uint64_t sub_46C7C4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  a2[1] = 0;
  a2[2] = result;
  a2[3] = 0;
  return result;
}

uint64_t sub_46C7D0(uint64_t a1)
{
  return *(void *)(a1 + 1008);
}

uint64_t sub_46C7D8(uint64_t a1)
{
  return *(void *)(a1 + 1016);
}

__n128 sub_46C7E0@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[63];
  *a2 = result;
  return result;
}

uint64_t sub_46C7EC(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void *sub_46C80C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_3B1C7C(a2, a1 + 72);
}

char **sub_46C818(uint64_t a1, char **a2)
{
  __n128 result = (char **)(a1 + 72);
  if (result != a2)
  {
    sub_471F78(result, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
    uint64_t v5 = a2[3];
    int v6 = a2[4];
    return (char **)sub_326C0((void *)(a1 + 96), v5, v6, (v6 - v5) >> 3);
  }
  return result;
}

uint64_t sub_46C894(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[12];
  uint64_t v3 = a1[13] - v2;
  uint64_t result = a1[9];
  if (a2 + 1 < (unint64_t)(v3 >> 3)) {
    result += 48 * *(void *)(v2 + 8 * a2);
  }
  return result;
}

uint64_t sub_46C8E0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = result;
  a4[3] = a3;
  return result;
}

uint64_t sub_46C8EC(void *a1, uint64_t a2)
{
  return *a1 + 40 * a2;
}

uint64_t sub_46C8FC(uint64_t a1)
{
  return *(void *)(a1 + 8) - 40;
}

BOOL sub_46C908(int ***a1)
{
  uint64_t v1 = (char *)a1[1] - (char *)*a1;
  if (!v1) {
    return 0;
  }
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (v1 >> 3);
  if (v3 != ((char *)a1[67] - (char *)a1[66]) >> 2
    || v3 != ((char *)a1[70] - (char *)a1[69]) >> 2
    || v3 != ((char *)a1[73] - (char *)a1[72]) >> 2
    || sub_475108((uint64_t)(a1 + 56)) && sub_475108((uint64_t)(a1 + 56)) != v3)
  {
    return 0;
  }
  char v9 = 1;
  unint64_t v8 = &v9;
  int v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5 && v4 + 5 != v5)
  {
    do
    {
      sub_4737A0(&v8, v4, v4 + 5);
      int v6 = v4 + 10;
      v4 += 5;
    }
    while (v6 != v5);
    int v4 = *a1;
    uint64_t v5 = a1[1];
  }
  for (uint64_t i = &v9; v4 != v5; v4 += 5)
    sub_473A10((uint64_t)&i, v4);
  return v9 != 0;
}

uint64_t sub_46CA54(int ***a1)
{
  if (*a1 == a1[1]) {
    return 2;
  }
  uint64_t v1 = **a1;
  uint64_t v2 = (unsigned __int16 *)((char *)v1 - *v1);
  return *v2 < 0xBu || (uint64_t v3 = v2[5]) == 0 || (*((unsigned char *)v1 + v3 + 1) & 0x80) == 0;
}

uint64_t sub_46CAA4(uint64_t a1)
{
  return a1 + 296;
}

uint64_t sub_46CAAC(uint64_t a1)
{
  return a1 + 312;
}

double sub_46CAB4(uint64_t a1)
{
  return *(double *)(a1 + 808);
}

uint64_t sub_46CABC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 144);
}

uint64_t sub_46CAC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 304);
}

uint64_t sub_46CACC(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return (1000000000 - *(_DWORD *)(a1 + 144));
  }
  uint64_t v2 = *(void *)(a1 + 96);
  if (a2 < (*(void *)(a1 + 104) - v2) >> 3
    && (uint64_t v3 = (void *)(v2 + 8 * a2), v4 = *(v3 - 1), (v5 = 48 * (*v3 - v4)) != 0)
    && (uint64_t v6 = *(void *)(a1 + 72) + 48 * v4 + v5, *(unsigned char *)(v6 - 8)))
  {
    return (1000000000 - *(_DWORD *)(v6 - 40));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_46CB48(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 + 1;
  if (a2 + 1 == 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
  {
    if (a2)
    {
      uint64_t v3 = *(void *)(a1 + 96);
      if (a2 >= (*(void *)(a1 + 104) - v3) >> 3) {
        return *(unsigned int *)(a1 + 304);
      }
      uint64_t v4 = (void *)(v3 + 8 * a2);
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = 48 * (*v4 - v5);
      if (!v6) {
        return *(unsigned int *)(a1 + 304);
      }
      uint64_t v7 = *(void *)(a1 + 72) + 48 * v5 + v6;
      if (!*(unsigned char *)(v7 - 8)) {
        return *(unsigned int *)(a1 + 304);
      }
      unint64_t v8 = (_DWORD *)(v7 - 40);
    }
    else
    {
      unint64_t v8 = (_DWORD *)(a1 + 144);
    }
    unsigned int v20 = 1000000000 - *v8;
    unsigned int v21 = *(_DWORD *)(a1 + 304);
    if (v20 <= v21) {
      return v21;
    }
    else {
      return v20;
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 96);
    unint64_t v10 = (*(void *)(a1 + 104) - v9) >> 3;
    if (v2 >= v10) {
      return 1000000000;
    }
    uint64_t v11 = *(void *)(v9 + 8 * a2);
    uint64_t v12 = 48 * (*(void *)(v9 + 8 * v2) - v11);
    if (!v12) {
      return 1000000000;
    }
    uint64_t v13 = *(void *)(a1 + 72);
    uint64_t v14 = v13 + 48 * v11 + v12;
    if (!*(unsigned char *)(v14 - 8)) {
      return 1000000000;
    }
    if (a2)
    {
      if (v10 <= a2) {
        return *(unsigned int *)(v14 - 40);
      }
      uint64_t v15 = *(void *)(v9 + 8 * a2 - 8);
      uint64_t v16 = 48 * (v11 - v15);
      if (!v16) {
        return *(unsigned int *)(v14 - 40);
      }
      uint64_t v17 = v13 + 48 * v15 + v16;
      if (!*(unsigned char *)(v17 - 8)) {
        return *(unsigned int *)(v14 - 40);
      }
      long long v18 = (_DWORD *)(v17 - 40);
    }
    else
    {
      long long v18 = (_DWORD *)(a1 + 144);
    }
    unsigned int v22 = 1000000000 - *v18;
    unsigned int v23 = *(_DWORD *)(v14 - 40);
    if (v22 <= v23) {
      return v23;
    }
    else {
      return v22;
    }
  }
}

uint64_t sub_46CCC8(void *a1, unint64_t a2, double a3)
{
  uint64_t v5 = *(int **)(*a1 + 40 * a2);
  uint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  double v7 = 0.0;
  if (*v6 >= 9u)
  {
    uint64_t v8 = v6[4];
    if (v8)
    {
      LODWORD(a3) = *(int *)((char *)v5 + v8);
      double v7 = (double)*(unint64_t *)&a3;
    }
  }
  int v9 = sub_46CB48((uint64_t)a1, a2);
  if (a2)
  {
    uint64_t v10 = a1[12];
    if (a2 >= (a1[13] - v10) >> 3
      || (uint64_t v11 = (void *)(v10 + 8 * a2), v12 = *(v11 - 1), (v13 = 48 * (*v11 - v12)) == 0)
      || (uint64_t v14 = a1[9] + 48 * v12 + v13, !*(unsigned char *)(v14 - 8)))
    {
      int v16 = 0;
      goto LABEL_12;
    }
    uint64_t v15 = (_DWORD *)(v14 - 40);
  }
  else
  {
    uint64_t v15 = a1 + 18;
  }
  int v16 = *v15 - 1000000000;
LABEL_12:
  double v17 = v7 * ((double)(v16 + v9) / 1000000000.0);
  if (v17 >= 0.0)
  {
    if (v17 < 4.50359963e15)
    {
      uint64_t v18 = (uint64_t)(v17 + v17) + 1;
      return (uint64_t)(double)(v18 >> 1);
    }
  }
  else if (v17 > -4.50359963e15)
  {
    uint64_t v18 = (uint64_t)(v17 + v17);
    if (v18 >= 1) {
      --v18;
    }
    return (uint64_t)(double)(v18 >> 1);
  }
  return (uint64_t)v17;
}

uint64_t sub_46CE10(void *a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5, double a6)
{
  unint64_t v6 = (a3 ^ 1u) + a2;
  unint64_t v7 = a4 + a5;
  if (v6 <= v7) {
    uint64_t v8 = a4 + a5;
  }
  else {
    uint64_t v8 = (a3 ^ 1u) + a2;
  }
  if (v6 >= v7) {
    return 0;
  }
  uint64_t v10 = 0;
  do
    v10 += sub_46CCC8(a1, v6++, a6);
  while (v8 != v6);
  return v10;
}

uint64_t sub_46CE8C(void *a1, uint64_t a2, double a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v5 = 0;
  for (unint64_t i = 0; i != a2; ++i)
    v5 += sub_46CCC8(a1, i, a3);
  return v5;
}

uint64_t sub_46CEFC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 520);
}

uint64_t sub_46CF04(uint64_t a1)
{
  return *(unsigned int *)(a1 + 512);
}

uint64_t sub_46CF0C(unsigned int *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[129];
      break;
    case 1:
      uint64_t result = a1[194];
      break;
    case 2:
      uint64_t result = a1[195];
      break;
    case 3:
      uint64_t result = a1[196];
      break;
    case 4:
      uint64_t result = a1[197];
      break;
    case 5:
      uint64_t result = a1[198];
      break;
    default:
      uint64_t result = 0x7FFFFFFFLL;
      break;
  }
  return result;
}

uint64_t sub_46CF88(void *a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 1:
      uint64_t result = *(unsigned int *)(a1[69] + 4 * a2);
      break;
    case 2:
      uint64_t result = *(unsigned int *)(a1[72] + 4 * a2);
      break;
    default:
      uint64_t result = *(unsigned int *)(a1[66] + 4 * a2);
      break;
  }
  return result;
}

uint64_t sub_46CFFC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unint64_t **)(a1 + 1032);
  uint64_t v3 = *(unint64_t **)(a1 + 1040);
  if (v2 == v3) {
    return 0;
  }
  do
  {
    BOOL v4 = *v2 <= a2 && v2[1] >= a2;
    uint64_t result = v4;
    if (v4) {
      break;
    }
    v2 += 8;
  }
  while (v2 != v3);
  return result;
}

uint64_t sub_46D038(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, long long *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v18 = *(const void **)a2;
  uint64_t v17 = *(void *)(a2 + 8);
  int64_t v19 = v17 - *(void *)a2;
  if (v17 != *(void *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v19 >> 3) >= 0x666666666666667) {
      sub_2E00();
    }
    unsigned int v20 = (char *)operator new(v19);
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = v20;
    unsigned int v21 = &v20[8 * (v19 >> 3)];
    *(void *)(a1 + 16) = v21;
    memcpy(v20, v18, v19);
    *(void *)(a1 + 8) = v21;
  }
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  sub_3B1C7C((void *)(a1 + 72), a10);
  *(_DWORD *)(a1 + 120) = -1;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)a6;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a6 + 8);
  sub_3B1DC8(a1 + 152, (long long *)(a6 + 24));
  *(_DWORD *)(a1 + 288) = *(_DWORD *)a7;
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a7 + 8);
  sub_3B1DC8(a1 + 312, (long long *)(a7 + 24));
  *(_DWORD *)(a1 + 448) = 0x7FFFFFFF;
  *(void *)(a1 + 452) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 488) = 0x8000000080000000;
  *(_DWORD *)(a1 + 496) = 0x7FFFFFFF;
  *(void *)(a1 + 504) = *a4;
  sub_3B1F44(a1 + 512, a3);
  long long v22 = *a5;
  long long v23 = a5[1];
  long long v24 = a5[3];
  *(_OWORD *)(a1 + 832) = a5[2];
  *(_OWORD *)(a1 + 848) = v24;
  *(_OWORD *)(a1 + 800) = v22;
  *(_OWORD *)(a1 + 816) = v23;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(void *)(a1 + 1024) = 0;
  int v25 = *(const void **)a8;
  int64_t v26 = *(void *)(a8 + 8) - *(void *)a8;
  if (v26)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v26 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    unint64_t v27 = (char *)operator new(v26);
    *(void *)(a1 + 1008) = v27;
    *(void *)(a1 + 1016) = v27;
    uint64_t v28 = &v27[8 * (v26 >> 3)];
    *(void *)(a1 + 1024) = v28;
    memcpy(v27, v25, v26 - 4);
    *(void *)(a1 + 1016) = v28;
  }
  *(void *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  sub_3B271C((void *)(a1 + 1032), *a9, a9[1], (a9[1] - *a9) >> 6);
  return a1;
}

void sub_46D264(_Unwind_Exception *a1)
{
  int v9 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 1016) = v9;
    operator delete(v9);
  }
  sub_3B01C8(v1 + 864);
  sub_3B0290(v5);
  uint64_t v10 = *(void **)(v1 + 464);
  if (v10)
  {
    *(void *)(v1 + 472) = v10;
    operator delete(v10);
  }
  sub_3B024C(v4);
  sub_3B024C(v3);
  sub_3310C(v2);
  uint64_t v11 = *(void **)(v1 + 48);
  if (v11)
  {
    *(void *)(v1 + 56) = v11;
    operator delete(v11);
    uint64_t v12 = *v7;
    if (!*v7)
    {
LABEL_7:
      uint64_t v13 = *(void **)v1;
      if (!*(void *)v1) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v12 = *v7;
    if (!*v7) {
      goto LABEL_7;
    }
  }
  *(void *)(v1 + 32) = v12;
  operator delete(v12);
  uint64_t v13 = *(void **)v1;
  if (!*(void *)v1) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_8:
  *(void *)(v1 + 8) = v13;
  operator delete(v13);
  goto LABEL_9;
}

void sub_46D324()
{
  if (!*v0) {
    JUMPOUT(0x46D2F8);
  }
  JUMPOUT(0x46D2F0);
}

uint64_t sub_46D334(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  sub_EB00A0(a2, a1);
  uint64_t v10 = sub_3AEFFC((uint64_t)a2);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v12 = *(const void **)v10;
  uint64_t v11 = *(void *)(v10 + 8);
  int64_t v13 = v11 - *(void *)v10;
  if (v11 != *(void *)v10)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v13 >> 3)) >= 0x492492492492493) {
      sub_2E00();
    }
    uint64_t v14 = (char *)operator new(v13);
    *(void *)(a1 + 24) = v14;
    *(void *)(a1 + 32) = v14;
    uint64_t v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 40) = v15;
    memcpy(v14, v12, v13 - 7);
    *(void *)(a1 + 32) = v15;
  }
  uint64_t v16 = sub_EADE98((uint64_t)a2);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v18 = *(const void **)v16;
  uint64_t v17 = *(void *)(v16 + 8);
  int64_t v19 = v17 - *(void *)v16;
  if (v17 != *(void *)v16)
  {
    if (v19 < 0) {
      sub_2E00();
    }
    unsigned int v20 = (char *)operator new(v17 - *(void *)v16);
    *(void *)(a1 + 48) = v20;
    *(void *)(a1 + 56) = v20;
    unsigned int v21 = &v20[8 * (v19 >> 3)];
    *(void *)(a1 + 64) = v21;
    memcpy(v20, v18, v19);
    *(void *)(a1 + 56) = v21;
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = -1;
  sub_46D78C(a1 + 128, (uint64_t)a2);
  sub_46D8EC(a1 + 288, (uint64_t)a2);
  uint64_t v22 = *a4;
  *(_DWORD *)(a1 + 456) = *((_DWORD *)a4 + 2);
  *(void *)(a1 + 448) = v22;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 464) = *((_OWORD *)a4 + 1);
  *(void *)(a1 + 480) = a4[4];
  a4[2] = 0;
  a4[3] = 0;
  a4[4] = 0;
  uint64_t v23 = a4[5];
  *(_DWORD *)(a1 + 496) = *((_DWORD *)a4 + 12);
  *(void *)(a1 + 488) = v23;
  *(void *)(a1 + 504) = sub_EB15DC((uint64_t)a2);
  uint64_t v24 = *a3;
  *(_DWORD *)(a1 + 520) = *((_DWORD *)a3 + 2);
  *(void *)(a1 + 512) = v24;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 528) = *((_OWORD *)a3 + 1);
  *(void *)(a1 + 544) = a3[4];
  a3[2] = 0;
  a3[3] = 0;
  a3[4] = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a3 + 5);
  *(void *)(a1 + 568) = a3[7];
  a3[5] = 0;
  a3[6] = 0;
  a3[7] = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = *((_OWORD *)a3 + 4);
  *(void *)(a1 + 592) = a3[10];
  a3[8] = 0;
  a3[9] = 0;
  a3[10] = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a3 + 11);
  *(void *)(a1 + 616) = a3[13];
  a3[11] = 0;
  a3[12] = 0;
  a3[13] = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 624) = *((_OWORD *)a3 + 7);
  *(void *)(a1 + 640) = a3[16];
  a3[14] = 0;
  a3[15] = 0;
  a3[16] = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(a3 + 17);
  *(void *)(a1 + 664) = a3[19];
  a3[17] = 0;
  a3[18] = 0;
  a3[19] = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 672) = *((_OWORD *)a3 + 10);
  *(void *)(a1 + 688) = a3[22];
  a3[20] = 0;
  a3[21] = 0;
  a3[22] = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a3 + 23);
  *(void *)(a1 + 712) = a3[25];
  a3[23] = 0;
  a3[24] = 0;
  a3[25] = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = *((_OWORD *)a3 + 13);
  *(void *)(a1 + 736) = a3[28];
  a3[26] = 0;
  a3[27] = 0;
  a3[28] = 0;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a3 + 29);
  *(void *)(a1 + 760) = a3[31];
  a3[29] = 0;
  a3[30] = 0;
  a3[31] = 0;
  long long v25 = *((_OWORD *)a3 + 17);
  *(_OWORD *)(a1 + 768) = *((_OWORD *)a3 + 16);
  *(_OWORD *)(a1 + 784) = v25;
  sub_46DA4C((uint64_t)a2, a1 + 800);
  *(void *)(a1 + 1024) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)a5;
  *(void *)(a1 + 1024) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = 0;
  *(_OWORD *)a5 = 0u;
  *(void *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  return a1;
}

void sub_46D6B4(_Unwind_Exception *a1)
{
  sub_3B0290(v7);
  int v9 = *(void **)(v1 + 464);
  if (v9)
  {
    *(void *)(v1 + 472) = v9;
    operator delete(v9);
  }
  sub_3B024C(v6);
  sub_3B024C(v5);
  sub_3310C(v4);
  uint64_t v10 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v10;
    operator delete(v10);
    uint64_t v11 = *v2;
    if (!*v2)
    {
LABEL_5:
      uint64_t v12 = *(void **)v1;
      if (!*(void *)v1) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = *v2;
    if (!*v2) {
      goto LABEL_5;
    }
  }
  *(void *)(v1 + 32) = v11;
  operator delete(v11);
  uint64_t v12 = *(void **)v1;
  if (!*(void *)v1) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_9:
  *(void *)(v1 + 8) = v12;
  operator delete(v12);
  _Unwind_Resume(a1);
}

void sub_46D78C(uint64_t a1, uint64_t a2)
{
  int v4 = sub_EAE428(a2);
  BOOL v5 = *(double *)(sub_69134(a2) + 32) > 0.95;
  char v6 = *(unsigned char *)(sub_69134(a2) + 68);
  int v7 = *(_DWORD *)sub_EADD50(a2);
  *(_OWORD *)&v10[4] = 0u;
  int v15 = 0;
  uint64_t v18 = 0;
  uint64_t v8 = 0x7FFFFFFFLL;
  int v9 = 0x7FFFFFFF;
  *(void *)uint64_t v10 = 0x7FFFFFFF7FFFFFFFLL;
  unint64_t v11 = 0x8000000080000000;
  *(_OWORD *)uint64_t v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)__p_8 = 0u;
  unint64_t v16 = 0x8000000080000000;
  int v17 = 0x7FFFFFFF;
  uint64_t v19 = 0xFFFFFFFFLL;
  long long v20 = xmmword_20E8160;
  *(_DWORD *)a1 = v7;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 20) = v5;
  *(unsigned char *)(a1 + 21) = v6;
  sub_3B1DC8(a1 + 24, (long long *)&v8);
  if (*((void *)&v13 + 1))
  {
    __p_8[0] = *((void **)&v13 + 1);
    operator delete(*((void **)&v13 + 1));
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_46D8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_46D8EC(uint64_t a1, uint64_t a2)
{
  int v4 = sub_486A4C(a2);
  BOOL v5 = *(double *)(sub_EADAD0(a2) + 32) > 0.95;
  char v6 = *(unsigned char *)(sub_EADAD0(a2) + 68);
  int v7 = *(_DWORD *)sub_EADD58(a2);
  *(_OWORD *)&v10[4] = 0u;
  int v15 = 0;
  uint64_t v18 = 0;
  uint64_t v8 = 0x7FFFFFFFLL;
  int v9 = 0x7FFFFFFF;
  *(void *)uint64_t v10 = 0x7FFFFFFF7FFFFFFFLL;
  unint64_t v11 = 0x8000000080000000;
  *(_OWORD *)uint64_t v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)__p_8 = 0u;
  unint64_t v16 = 0x8000000080000000;
  int v17 = 0x7FFFFFFF;
  uint64_t v19 = 0xFFFFFFFFLL;
  long long v20 = xmmword_20E8160;
  *(_DWORD *)a1 = v7;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 20) = v5;
  *(unsigned char *)(a1 + 21) = v6;
  sub_3B1DC8(a1 + 24, (long long *)&v8);
  if (*((void *)&v13 + 1))
  {
    __p_8[0] = *((void **)&v13 + 1);
    operator delete(*((void **)&v13 + 1));
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_46DA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_46DA4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  *(_DWORD *)(a2 + 25) = 0;
  *(unsigned char *)(a2 + 29) = 1;
  *(_DWORD *)(a2 + 30) = 0;
  *(_DWORD *)(a2 + 33) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 3) = *(unsigned char *)(sub_69134(a1) + 64);
  *(unsigned char *)(a2 + 5) = *(unsigned char *)(sub_EAD918(a1) + 2);
  *(unsigned char *)(a2 + 6) = *(unsigned char *)(sub_EAD918(a1) + 3);
  *(unsigned char *)(a2 + 7) = *(unsigned char *)(sub_EAD918(a1) + 4);
  *(unsigned char *)(a2 + 30) = *(unsigned char *)(sub_EAD918(a1) + 6);
  *(void *)(a2 + 8) = *(void *)(sub_69134(a1) + 16);
  *(void *)(a2 + 16) = *(void *)(sub_69134(a1) + 8);
  *(unsigned char *)(a2 + 35) = *(unsigned char *)(sub_EAD918(a1) + 8);
  *(unsigned char *)(a2 + 34) = *(unsigned char *)(sub_EAD918(a1) + 9);
  *(unsigned char *)(a2 + 2) = (*(unsigned char *)sub_45FE5C(a1) & 4) != 0;
  uint64_t result = (char *)sub_45FE5C(a1);
  char v5 = *result;
  *(unsigned char *)a2 = *result & 1;
  *(unsigned char *)(a2 + 1) = (v5 & 2) != 0;
  return result;
}

uint64_t *sub_46DB58@<X0>(uint64_t *result@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - *result) >> 3);
  if (v4 == 1)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 1;
    uint64_t v5 = 1;
    goto LABEL_27;
  }
  if (v4 == 2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 1;
    uint64_t v7 = 1;
    goto LABEL_27;
  }
  uint64_t v8 = (int **)(v3 + 48);
  uint64_t v6 = 1;
  uint64_t v9 = 2;
  while (1)
  {
    uint64_t v10 = *(v8 - 1);
    unint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
    unsigned int v12 = *v11;
    if (v12 >= 0xB)
    {
      if (v11[5])
      {
        int v13 = *(int *)((char *)v10 + v11[5]);
        if ((v13 & 0x2000000) != 0)
        {
          if ((v13 & 0x4000000) == 0) {
            goto LABEL_23;
          }
          goto LABEL_7;
        }
      }
    }
    uint64_t v14 = *v8;
    if (!*v8) {
      break;
    }
    int v15 = (unsigned __int16 *)((char *)v14 - *v14);
    if (*v15 < 0x11u) {
      break;
    }
    uint64_t v16 = v15[8];
    if (!v16) {
      break;
    }
    __int16 v17 = *(_WORD *)((char *)v14 + v16);
    if (v12 < 0xB || (v17 & 4) != 0)
    {
      if ((v17 & 4) == 0) {
        goto LABEL_23;
      }
      goto LABEL_7;
    }
LABEL_21:
    uint64_t v19 = v11[5];
    if (!v19 || (*((unsigned char *)v10 + v19 + 2) & 1) == 0)
    {
LABEL_23:
      uint64_t v5 = 0;
      goto LABEL_26;
    }
LABEL_7:
    ++v6;
    ++v9;
    v8 += 5;
    if (v4 == v9)
    {
      uint64_t v5 = 0;
      uint64_t v6 = v4 - 1;
      uint64_t v7 = v4 - 1;
      goto LABEL_27;
    }
  }
  if (v12 >= 0xB) {
    goto LABEL_21;
  }
  uint64_t v5 = 0;
  uint64_t v6 = v9 - 1;
LABEL_26:
  uint64_t v7 = v6;
LABEL_27:
  unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - *result) >> 3);
  if (v2 == v3)
  {
    unint64_t v20 = v4 + 1;
    if (v4 + 1 < v4 - 1)
    {
      unsigned int v21 = (int **)(v2 + 8 * ((v2 - *result) >> 3) + 48);
      uint64_t v22 = 1;
      while (1)
      {
        uint64_t v23 = *(v21 - 1);
        uint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
        unsigned int v25 = *v24;
        if (v25 >= 0xB && v24[5] && (int v26 = *(int *)((char *)v23 + v24[5]), (v26 & 0x2000000) != 0))
        {
          if ((v26 & 0x4000000) == 0) {
            break;
          }
        }
        else
        {
          unint64_t v27 = *v21;
          if (!*v21 || (uint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27), *v28 < 0x11u) || (v29 = v28[8]) == 0)
          {
            if (v25 < 0xB)
            {
              unint64_t v20 = v4 + v22;
              break;
            }
LABEL_45:
            uint64_t v32 = v24[5];
            if (!v32 || (*((unsigned char *)v23 + v32 + 2) & 1) == 0) {
              break;
            }
            goto LABEL_31;
          }
          __int16 v30 = *(_WORD *)((char *)v27 + v29);
          if (v25 >= 0xB && (v30 & 4) == 0) {
            goto LABEL_45;
          }
          if ((v30 & 4) == 0) {
            break;
          }
        }
LABEL_31:
        ++v20;
        ++v22;
        v21 += 5;
        if (v22 == -1)
        {
          unint64_t v20 = v4 - 1;
          break;
        }
      }
    }
  }
  *a2 = result;
  a2[1] = (uint64_t *)v5;
  a2[2] = (uint64_t *)v6;
  a2[3] = result;
  a2[4] = 0;
  a2[5] = result;
  a2[6] = (uint64_t *)v7;
  a2[7] = result;
  a2[8] = (uint64_t *)v4;
  a2[9] = (uint64_t *)v20;
  a2[10] = result;
  a2[11] = (uint64_t *)v4;
  a2[12] = result;
  a2[13] = (uint64_t *)v20;
  return result;
}

__n128 sub_46DD68@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 24);
  *a2 = result;
  return result;
}

uint64_t sub_46DD74(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_46DD80(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

__n128 sub_46DD8C(void *a1, __n128 *a2)
{
  uint64_t v5 = a1 + 3;
  unint64_t v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
    *uint64_t v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  __n128 result = *a2;
  *(__n128 *)(a1 + 3) = *a2;
  a1[5] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_46DDEC(__n128 *a1, __n128 *a2)
{
  uint64_t v5 = a1 + 3;
  unint64_t v4 = (void *)a1[3].n128_u64[0];
  if (v4)
  {
    a1[3].n128_u64[1] = (unint64_t)v4;
    operator delete(v4);
    v5->n128_u64[0] = 0;
    v5->n128_u64[1] = 0;
    v5[1].n128_u64[0] = 0;
  }
  __n128 result = *a2;
  a1[3] = *a2;
  a1[4].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_46DE4C(uint64_t a1)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
}

BOOL sub_46DE70(int ***a1)
{
  uint64_t v1 = (char *)a1[1] - (char *)*a1;
  if (!v1) {
    return 0;
  }
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (v1 >> 3);
  if (v3 != ((char *)a1[67] - (char *)a1[66]) >> 2
    || v3 != ((char *)a1[70] - (char *)a1[69]) >> 2
    || v3 != ((char *)a1[73] - (char *)a1[72]) >> 2
    || sub_475108((uint64_t)(a1 + 56)) && sub_475108((uint64_t)(a1 + 56)) != v3)
  {
    return 0;
  }
  if (a1[3] == a1[4]) {
    return 0;
  }
  char v9 = 1;
  uint64_t v8 = &v9;
  unint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5 && v4 + 5 != v5)
  {
    do
    {
      sub_473E90(&v8, v4, v4 + 5);
      uint64_t v6 = v4 + 10;
      v4 += 5;
    }
    while (v6 != v5);
    unint64_t v4 = *a1;
    uint64_t v5 = a1[1];
  }
  for (unint64_t i = &v9; v4 != v5; v4 += 5)
    sub_474100((uint64_t)&i, v4);
  return v9 != 0;
}

BOOL sub_46DFC8(void *a1)
{
  uint64_t v1 = a1[1] - *a1;
  if (v1
    && (unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (v1 >> 3), v3 == (uint64_t)(a1[67] - a1[66]) >> 2)
    && v3 == (uint64_t)(a1[70] - a1[69]) >> 2
    && v3 == (uint64_t)(a1[73] - a1[72]) >> 2
    && (!sub_475108((uint64_t)(a1 + 56)) || sub_475108((uint64_t)(a1 + 56)) == v3))
  {
    return a1[3] != a1[4];
  }
  else
  {
    return 0;
  }
}

BOOL sub_46E088(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 840)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 832)) {
    return 1;
  }
  return *(unsigned char *)(a1 + 833) != 0;
}

uint64_t sub_46E0B8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 824);
}

BOOL sub_46E0C0(void *a1)
{
  return sub_475108((uint64_t)(a1 + 56)) == 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3);
}

uint64_t sub_46E108(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 803);
}

uint64_t sub_46E110(uint64_t a1)
{
  return sub_52060(a1 + 160);
}

uint64_t sub_46E118(uint64_t a1)
{
  return *(void *)(a1 + 816);
}

uint64_t sub_46E120(unsigned int *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[129];
      break;
    case 1:
      uint64_t result = a1[194];
      break;
    case 2:
      uint64_t result = a1[195];
      break;
    case 3:
      uint64_t result = a1[196];
      break;
    case 4:
      uint64_t result = a1[197];
      break;
    case 5:
      uint64_t result = a1[198];
      break;
    default:
      uint64_t result = 0x7FFFFFFFLL;
      break;
  }
  return result;
}

uint64_t sub_46E19C(void *a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 1:
      uint64_t result = *(unsigned int *)(a1[69] + 4 * a2);
      break;
    case 2:
      uint64_t result = *(unsigned int *)(a1[72] + 4 * a2);
      break;
    default:
      uint64_t result = *(unsigned int *)(a1[66] + 4 * a2);
      break;
  }
  return result;
}

uint64_t sub_46E210(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  switch(a4)
  {
    case 1:
      unint64_t v4 = a1 + 69;
      break;
    case 2:
      unint64_t v4 = a1 + 72;
      break;
    default:
      unint64_t v4 = a1 + 66;
      break;
  }
  if (a2 == a3) {
    return 0;
  }
  uint64_t v6 = *v4;
  uint64_t v7 = (int *)(*v4 + 4 * a2);
  unint64_t v8 = 4 * a3 - 4 * a2 - 4;
  if (v8 < 0x1C)
  {
    LODWORD(result) = 0;
LABEL_10:
    uint64_t v14 = (int *)(v6 + 4 * a3);
    do
    {
      int v15 = *v7++;
      uint64_t result = (v15 + result);
    }
    while (v7 != v14);
    return result;
  }
  uint64_t v9 = (v8 >> 2) + 1;
  v7 += v9 & 0x7FFFFFFFFFFFFFF8;
  uint64_t v10 = (int32x4_t *)(4 * a2 + v6 + 16);
  int32x4_t v11 = 0uLL;
  uint64_t v12 = v9 & 0x7FFFFFFFFFFFFFF8;
  int32x4_t v13 = 0uLL;
  do
  {
    int32x4_t v11 = vaddq_s32(v10[-1], v11);
    int32x4_t v13 = vaddq_s32(*v10, v13);
    v10 += 2;
    v12 -= 8;
  }
  while (v12);
  uint64_t result = vaddvq_s32(vaddq_s32(v13, v11));
  if (v9 != (v9 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_10;
  }
  return result;
}

void sub_46E308(__n128 *a1, uint64_t a2, void *a3, double a4)
{
  if (a1->n128_u64[0] != a1->n128_u64[1])
  {
    uint64_t v6 = *(char **)a2;
    uint64_t v7 = *(void *)(a2 + 8);
    if (*(void *)a2 == v7) {
      return;
    }
    uint64_t v8 = 0;
    int v9 = 0;
    unint64_t v10 = 0;
    int v80 = &a1[8].n128_u64[1];
    unsigned __int32 v75 = a1[9].n128_u32[0];
    BOOL v78 = a1 + 19;
    unsigned __int32 v76 = a1[19].n128_u32[0];
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (uint64_t)v6) >> 3);
    uint64_t v12 = *(void *)(a1->n128_u64[0] + 32);
    int v79 = (char **)(a2 + 528);
    uint64_t v13 = 32;
    do
    {
      uint64_t v14 = *(void *)&v6[v13];
      if ((v14 & 0xFFFFFFFFFFFFLL) == (v12 & 0xFFFFFFFFFFFFLL)
        && ((v12 & 0x1000000000000) == 0) == ((v14 & 0xFF000000000000) == 0))
      {
        break;
      }
      v8 += sub_46CCC8((void *)a2, v10, a4);
      v9 += *(_DWORD *)(*(void *)(a2 + 528) + 4 * v10++);
      uint64_t v6 = *(char **)a2;
      unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
      v13 += 40;
    }
    while (v10 < v11);
    BOOL v90 = v10 < v11;
    if (v10 >= v11)
    {
      uint64_t v23 = 0;
LABEL_31:
      a1[31].n128_u64[1] += v8 - v23;
      uint64_t v29 = *(char **)a2;
      __int16 v30 = *(char **)(a2 + 8);
      unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v30[-*(void *)a2] >> 3);
      if (v30 == *(char **)a2 || v10 >= v31)
      {
        if ((v30 != v29) != v10 < v31) {
          goto LABEL_42;
        }
      }
      else if (v10 != v31 - 1)
      {
        goto LABEL_42;
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1->n128_u64[1] - a1->n128_u64[0]) >> 3) >= 2)
      {
        uint64_t v32 = *(int **)&v29[40 * v10];
        long long v33 = (unsigned __int16 *)((char *)v32 - *v32);
        if (*v33 >= 9u && (uint64_t v34 = v33[4]) != 0) {
          uint64_t v35 = *(unsigned int *)((char *)v32 + v34);
        }
        else {
          uint64_t v35 = 0;
        }
        a1[31].n128_u64[1] += v35 - sub_46CCC8((void *)a2, v10, a4);
      }
LABEL_42:
      uint64_t v36 = a1->n128_u64[0];
      if (v10 >= v11)
      {
        uint64_t v37 = *(char **)a2;
        goto LABEL_52;
      }
      uint64_t v37 = *(char **)a2;
      if (a1->n128_u64[1] - v36 != 40) {
        goto LABEL_52;
      }
      int v38 = *(char **)(a2 + 8);
      unint64_t v39 = 0xCCCCCCCCCCCCCCCDLL * ((v38 - v37) >> 3);
      if (v38 == v37 || v10 >= v39)
      {
        if ((v38 != v37) != v10 < v39) {
          goto LABEL_47;
        }
      }
      else if (v10 != v39 - 1)
      {
LABEL_47:
        int v40 = 1000000000;
LABEL_51:
        v78->n128_u32[0] = v40;
LABEL_52:
        uint64_t v89 = v10;
        sub_473C00((uint64_t)a1, v36, v37, &v37[40 * v10], v10);
        v88[0] = &v89;
        v88[1] = (uint64_t *)&v90;
        if (v10 >= v11)
        {
          int v41 = 0;
          int v43 = 0;
          unint64_t v42 = v79;
        }
        else
        {
          int v41 = *(_DWORD *)a1[33].n128_u64[0];
          unint64_t v42 = v79;
          int v43 = *(_DWORD *)&(*v79)[4 * v10];
        }
        sub_46EEC0(v88, v42, (uint64_t)&a1[33], (uint64_t)&v81);
        unint64_t v44 = (void *)a1[33].n128_u64[0];
        if (v44)
        {
          a1[33].n128_u64[1] = (unint64_t)v44;
          operator delete(v44);
          a1[33].n128_u64[0] = 0;
          a1[33].n128_u64[1] = 0;
          a1[34].n128_u64[0] = 0;
        }
        a1[33] = v81;
        a1[34].n128_u64[0] = (unint64_t)__p;
        uint64_t v45 = &a1[34].n128_u64[1];
        sub_46EEC0(v88, (char **)(a2 + 552), (uint64_t)&a1[34].n128_i64[1], (uint64_t)&v81);
        int v46 = (void *)a1[34].n128_u64[1];
        if (v46)
        {
          a1[35].n128_u64[0] = (unint64_t)v46;
          operator delete(v46);
          *uint64_t v45 = 0;
          a1[35].n128_u64[0] = 0;
          a1[35].n128_u64[1] = 0;
        }
        *(__n128 *)uint64_t v45 = v81;
        a1[35].n128_u64[1] = (unint64_t)__p;
        sub_46EEC0(v88, (char **)(a2 + 576), (uint64_t)&a1[36], (uint64_t)&v81);
        unint64_t v47 = (void *)a1[36].n128_u64[0];
        if (v47)
        {
          a1[36].n128_u64[1] = (unint64_t)v47;
          operator delete(v47);
          a1[36].n128_u64[0] = 0;
          a1[36].n128_u64[1] = 0;
          a1[37].n128_u64[0] = 0;
        }
        a1[36] = v81;
        a1[37].n128_u64[0] = (unint64_t)__p;
        a1[32].n128_u32[1] += v9 - v41;
        if (v9 < v43) {
          char v48 = -5;
        }
        else {
          char v48 = 5;
        }
        a1[32].n128_u32[0] += (v9 - v43) / -10
                            + (((-103 * (char)(v48 + (v9 - v43) % 10)) >> 15) & 1)
                            + ((-103 * (char)(v48 + (v9 - v43) % 10)) >> 10);
        a1[48].n128_u32[0] = *(_DWORD *)(a2 + 768);
        a1[8].n128_u32[0] = *(_DWORD *)(a2 + 128);
        unint64_t v49 = *(void *)(a2 + 136);
        *(unint64_t *)((char *)v80 + 6) = *(void *)(a2 + 142);
        unint64_t *v80 = v49;
        __n128 v50 = *(__n128 *)(a2 + 152);
        __n128 v51 = *(__n128 *)(a2 + 168);
        a1[11].n128_u64[1] = *(void *)(a2 + 184);
        *(__n128 *)((char *)a1 + 168) = v51;
        *(__n128 *)((char *)a1 + 152) = v50;
        if (a1 != (__n128 *)a2)
        {
          sub_472BC8((__n128 *)a1[12].n128_u64, *(char **)(a2 + 192), *(char **)(a2 + 200), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 2));
          sub_472BC8(&a1[13].n128_u64[1], *(char **)(a2 + 216), *(char **)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 2));
          a1[15] = *(__n128 *)(a2 + 240);
          unsigned int v52 = a1[16].n128_u32[2];
          unsigned __int32 v53 = *(_DWORD *)(a2 + 264);
          if (v52 != v53)
          {
            if (v53 == 1)
            {
              a1[16].n128_u64[0] = *(void *)(a2 + 256);
              unsigned __int32 v53 = *(_DWORD *)(a2 + 264);
            }
            else if (!v53)
            {
              a1[16].n128_u64[0] = *(void *)(a2 + 256);
            }
            a1[16].n128_u32[2] = v53;
            a1[17] = *(__n128 *)(a2 + 272);
            uint64_t v54 = a2 + 448;
            if (!sub_475124((int *)(a2 + 448))) {
              goto LABEL_80;
            }
            goto LABEL_75;
          }
          if (v52 <= 1) {
            a1[16].n128_u64[0] = *(void *)(a2 + 256);
          }
        }
        a1[17] = *(__n128 *)(a2 + 272);
        uint64_t v54 = a2 + 448;
        if (!sub_475124((int *)(a2 + 448)))
        {
LABEL_80:
          if (v89 < 1)
          {
            unsigned __int32 v64 = a1[19].n128_u32[0];
            if (v75 != a1[9].n128_u32[0])
            {
              int v65 = (void *)a1[1].n128_u64[1];
              unint64_t v67 = v65[3];
              unint64_t v66 = v65[4];
              if (v67 <= v66) {
                uint64_t v68 = v65[4];
              }
              else {
                uint64_t v68 = v65[3];
              }
              uint64_t v69 = 0;
              if (v67 < v66)
              {
                do
                  v69 += sub_46CCC8(a1, v67++, v55);
                while (v68 != v67);
              }
              v65[5] = v69;
            }
            if (v76 != v64)
            {
              unint64_t v70 = a1[2].n128_u64[0];
              unint64_t v72 = *(void *)(v70 - 32);
              unint64_t v71 = *(void *)(v70 - 24);
              if (v72 <= v71) {
                uint64_t v73 = *(void *)(v70 - 24);
              }
              else {
                uint64_t v73 = *(void *)(v70 - 32);
              }
              uint64_t v74 = 0;
              if (v72 < v71)
              {
                do
                  v74 += sub_46CCC8(a1, v72++, v55);
                while (v73 != v72);
              }
              *(void *)(v70 - 16) = v74;
            }
          }
          else
          {
            sub_1083110((uint64_t)&v81, a3);
            sub_1082C90((uint64_t)&v81, a1);
            if (v84)
            {
              int v85 = v84;
              operator delete(v84);
            }
          }
          return;
        }
LABEL_75:
        long long v56 = a1 + 28;
        if (sub_475124((int *)&a1[28]))
        {
          uint64_t v86 = sub_474FB0(v54);
          int v87 = v57;
          uint8x8_t v58 = (char *)sub_52060(v54);
          uint64_t v59 = sub_52060(v54);
          sub_474F50((uint64_t)&v81, &v86, v58, (char *)(v59 + 12 * v89 + 12 * v90));
          uint64_t v60 = sub_52060((uint64_t)&a1[28]);
          BOOL v61 = v90;
          uint64_t v62 = (int *)sub_3C80F8((uint64_t)&a1[28]);
          sub_475174((uint64_t *)&v81, (int *)(v60 + 12 * v61), v62);
          v56->n128_u64[0] = v81.n128_u64[0];
          a1[28].n128_u32[2] = v81.n128_u32[2];
          if (v56 != &v81) {
            sub_31AF54((__n128 *)a1[29].n128_u64, (char *)__p, v83, 0xAAAAAAAAAAAAAAABLL * ((v83 - (unsigned char *)__p) >> 2));
          }
          unint64_t v63 = (char *)__p;
          a1[30].n128_u64[1] = (unint64_t)v84;
          a1[31].n128_u32[0] = v85;
          if (v63)
          {
            int v83 = v63;
            operator delete(v63);
          }
        }
        goto LABEL_80;
      }
      int v40 = *(_DWORD *)(a2 + 304);
      goto LABEL_51;
    }
    uint64_t v15 = sub_46CCC8((void *)a2, v10, a4);
    uint64_t v16 = *(int **)a1->n128_u64[0];
    __int16 v17 = (unsigned __int16 *)((char *)v16 - *v16);
    double v18 = 0.0;
    if (*v17 >= 9u)
    {
      uint64_t v19 = v17[4];
      if (v19)
      {
        LODWORD(v18) = *(int *)((char *)v16 + v19);
        double v18 = (double)*(unint64_t *)&v18;
      }
    }
    unsigned int v20 = 1000000000;
    unsigned int v21 = (unsigned int *)v78;
    if (a1->n128_u64[1] - a1->n128_u64[0] != 40)
    {
      uint64_t v24 = (uint64_t *)a1[6].n128_u64[0];
      if (a1[6].n128_u64[1] - (unint64_t)v24 < 9) {
        goto LABEL_22;
      }
      uint64_t v25 = *v24;
      uint64_t v26 = 48 * (v24[1] - *v24);
      if (!v26) {
        goto LABEL_22;
      }
      unint64_t v27 = a1[4].n128_u64[1] + 48 * v25 + v26;
      if (!*(unsigned char *)(v27 - 8)) {
        goto LABEL_22;
      }
      unsigned int v21 = (unsigned int *)(v27 - 40);
    }
    unsigned int v20 = 1000000000 - a1[9].n128_u32[0];
    unsigned int v22 = *v21;
    if (v20 <= v22) {
      unsigned int v20 = v22;
    }
LABEL_22:
    v8 += v15;
    v9 += *(_DWORD *)(*(void *)(a2 + 528) + 4 * v10);
    a4 = v18 * ((double)(v20 - 1000000000 + a1[9].n128_u32[0]) / 1000000000.0);
    if (a4 >= 0.0)
    {
      if (a4 < 4.50359963e15)
      {
        uint64_t v28 = (uint64_t)(a4 + a4) + 1;
LABEL_29:
        a4 = (double)(v28 >> 1);
      }
    }
    else if (a4 > -4.50359963e15)
    {
      uint64_t v28 = (uint64_t)(a4 + a4);
      if (v28 >= 1) {
        --v28;
      }
      goto LABEL_29;
    }
    uint64_t v23 = (uint64_t)a4;
    goto LABEL_31;
  }

  sub_46EB78((uint64_t)a1, a2);
}

void sub_46EB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_46EB78(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_4721B0((void *)a1, *(char **)a2, *(char **)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    sub_47232C((void *)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
    sub_326C0((void *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
    sub_471F78((void *)(a1 + 72), *(char **)(a2 + 72), *(char **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 4));
    sub_326C0((void *)(a1 + 96), *(char **)(a2 + 96), *(char **)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3);
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  uint64_t v4 = *(void *)(a2 + 136);
  *(void *)(a1 + 142) = *(void *)(a2 + 142);
  *(void *)(a1 + 136) = v4;
  long long v5 = *(_OWORD *)(a2 + 152);
  long long v6 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v6;
  *(_OWORD *)(a1 + 152) = v5;
  if (a1 != a2)
  {
    sub_472BC8((void *)(a1 + 192), *(char **)(a2 + 192), *(char **)(a2 + 200), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 2));
    sub_472BC8((void *)(a1 + 216), *(char **)(a2 + 216), *(char **)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 2));
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    unsigned int v7 = *(_DWORD *)(a1 + 264);
    int v8 = *(_DWORD *)(a2 + 264);
    if (v7 == v8)
    {
      if (v7 <= 1) {
        *(void *)(a1 + 256) = *(void *)(a2 + 256);
      }
    }
    else
    {
      if (v8 == 1)
      {
        *(void *)(a1 + 256) = *(void *)(a2 + 256);
        int v8 = *(_DWORD *)(a2 + 264);
      }
      else if (!v8)
      {
        *(void *)(a1 + 256) = *(void *)(a2 + 256);
      }
      *(_DWORD *)(a1 + 264) = v8;
    }
  }
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  uint64_t v9 = *(void *)(a2 + 296);
  *(void *)(a1 + 302) = *(void *)(a2 + 302);
  *(void *)(a1 + 296) = v9;
  long long v10 = *(_OWORD *)(a2 + 312);
  long long v11 = *(_OWORD *)(a2 + 328);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = v11;
  *(_OWORD *)(a1 + 312) = v10;
  if (a1 == a2)
  {
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    uint64_t v14 = *(void *)(a2 + 448);
    *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
    *(void *)(a1 + 448) = v14;
  }
  else
  {
    sub_472BC8((void *)(a1 + 352), *(char **)(a2 + 352), *(char **)(a2 + 360), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2));
    sub_472BC8((void *)(a1 + 376), *(char **)(a2 + 376), *(char **)(a2 + 384), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 384) - *(void *)(a2 + 376)) >> 2));
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    unsigned int v12 = *(_DWORD *)(a1 + 424);
    int v13 = *(_DWORD *)(a2 + 424);
    if (v12 == v13)
    {
      if (v12 <= 1) {
        *(void *)(a1 + 416) = *(void *)(a2 + 416);
      }
    }
    else
    {
      if (v13 == 1)
      {
        *(void *)(a1 + 416) = *(void *)(a2 + 416);
        int v13 = *(_DWORD *)(a2 + 424);
      }
      else if (!v13)
      {
        *(void *)(a1 + 416) = *(void *)(a2 + 416);
      }
      *(_DWORD *)(a1 + 424) = v13;
    }
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    uint64_t v15 = *(void *)(a2 + 448);
    *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
    *(void *)(a1 + 448) = v15;
    sub_31AF54((void *)(a1 + 464), *(char **)(a2 + 464), *(char **)(a2 + 472), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 472) - *(void *)(a2 + 464)) >> 2));
  }
  uint64_t v16 = *(void *)(a2 + 488);
  *(_DWORD *)(a1 + 496) = *(_DWORD *)(a2 + 496);
  *(void *)(a1 + 488) = v16;
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  sub_3C7658(a1 + 512, (uint64_t *)(a2 + 512));
  long long v17 = *(_OWORD *)(a2 + 848);
  long long v19 = *(_OWORD *)(a2 + 800);
  long long v18 = *(_OWORD *)(a2 + 816);
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 848) = v17;
  *(_OWORD *)(a1 + 800) = v19;
  *(_OWORD *)(a1 + 816) = v18;
  sub_4724D0((char **)(a1 + 864), (char **)(a2 + 864));
  if (a1 != a2)
  {
    sub_4726C4((void *)(a1 + 1008), *(char **)(a2 + 1008), *(char **)(a2 + 1016), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1016) - *(void *)(a2 + 1008)) >> 3));
    sub_472848((void **)(a1 + 1032), *(uint64_t **)(a2 + 1032), *(uint64_t **)(a2 + 1040), (uint64_t)(*(void *)(a2 + 1040) - *(void *)(a2 + 1032)) >> 6);
  }
  return a1;
}

double sub_46EEC0@<D0>(uint64_t **a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  memset(v14, 0, sizeof(v14));
  uint64_t v15 = 0;
  uint64_t v8 = **a1;
  unint64_t v9 = v8 + ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  if (v9)
  {
    if (v9 >> 62) {
      sub_2E00();
    }
    long long v10 = (char *)operator new(4 * v9);
    *(void *)uint64_t v14 = v10;
    *(void *)&v14[2] = v10;
    uint64_t v15 = &v10[4 * v9];
  }
  else
  {
    long long v10 = 0;
  }
  long long v11 = &(*a2)[4 * v8 + 4 * *(unsigned __int8 *)a1[1]];
  sub_471BC0((uint64_t)v14, (uint64_t)v10, *a2, v11, (v11 - *a2) >> 2);
  unsigned int v12 = (char *)(*(void *)a3 + 4 * *(unsigned __int8 *)a1[1]);
  sub_471BC0((uint64_t)v14, *(uint64_t *)&v14[2], v12, *(char **)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - (void)v12) >> 2);
  double result = *(double *)v14;
  *(_OWORD *)a4 = *(_OWORD *)v14;
  *(void *)(a4 + 16) = v15;
  return result;
}

void sub_46EFB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_46EFD4(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, long long *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  long long v18 = *(const void **)a2;
  uint64_t v17 = *(void *)(a2 + 8);
  int64_t v19 = v17 - *(void *)a2;
  if (v17 != *(void *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v19 >> 3) >= 0x666666666666667) {
      sub_2E00();
    }
    unsigned int v20 = (char *)operator new(v19);
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = v20;
    unsigned int v21 = &v20[8 * (v19 >> 3)];
    *(void *)(a1 + 16) = v21;
    memcpy(v20, v18, v19);
    *(void *)(a1 + 8) = v21;
  }
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  sub_3B1C7C((void *)(a1 + 72), a10);
  *(_DWORD *)(a1 + 120) = -1;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)a6;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a6 + 8);
  sub_3B1DC8(a1 + 152, (long long *)(a6 + 24));
  *(_DWORD *)(a1 + 288) = *(_DWORD *)a7;
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a7 + 8);
  sub_3B1DC8(a1 + 312, (long long *)(a7 + 24));
  *(_DWORD *)(a1 + 448) = 0x7FFFFFFF;
  *(void *)(a1 + 452) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 488) = 0x8000000080000000;
  *(_DWORD *)(a1 + 496) = 0x7FFFFFFF;
  *(void *)(a1 + 504) = *a4;
  sub_3B1F44(a1 + 512, a3);
  long long v22 = *a5;
  long long v23 = a5[1];
  long long v24 = a5[3];
  *(_OWORD *)(a1 + 832) = a5[2];
  *(_OWORD *)(a1 + 848) = v24;
  *(_OWORD *)(a1 + 800) = v22;
  *(_OWORD *)(a1 + 816) = v23;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(void *)(a1 + 1024) = 0;
  uint64_t v25 = *(const void **)a8;
  int64_t v26 = *(void *)(a8 + 8) - *(void *)a8;
  if (v26)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v26 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    unint64_t v27 = (char *)operator new(v26);
    *(void *)(a1 + 1008) = v27;
    *(void *)(a1 + 1016) = v27;
    uint64_t v28 = &v27[8 * (v26 >> 3)];
    *(void *)(a1 + 1024) = v28;
    memcpy(v27, v25, v26 - 4);
    *(void *)(a1 + 1016) = v28;
  }
  *(void *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  sub_3B271C((void *)(a1 + 1032), *a9, a9[1], (a9[1] - *a9) >> 6);
  return a1;
}

void sub_46F200(_Unwind_Exception *a1)
{
  unint64_t v9 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 1016) = v9;
    operator delete(v9);
  }
  sub_3B01C8(v1 + 864);
  sub_3B0290(v5);
  long long v10 = *(void **)(v1 + 464);
  if (v10)
  {
    *(void *)(v1 + 472) = v10;
    operator delete(v10);
  }
  sub_3B024C(v4);
  sub_3B024C(v3);
  sub_3310C(v2);
  long long v11 = *(void **)(v1 + 48);
  if (v11)
  {
    *(void *)(v1 + 56) = v11;
    operator delete(v11);
    unsigned int v12 = *v7;
    if (!*v7)
    {
LABEL_7:
      int v13 = *(void **)v1;
      if (!*(void *)v1) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v12 = *v7;
    if (!*v7) {
      goto LABEL_7;
    }
  }
  *(void *)(v1 + 32) = v12;
  operator delete(v12);
  int v13 = *(void **)v1;
  if (!*(void *)v1) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_8:
  *(void *)(v1 + 8) = v13;
  operator delete(v13);
  goto LABEL_9;
}

void sub_46F2C0()
{
  if (!*v0) {
    JUMPOUT(0x46F294);
  }
  JUMPOUT(0x46F28CLL);
}

uint64_t sub_46F2D0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  sub_EB2AF8(a2, a1);
  uint64_t v10 = sub_EB2C18(a2);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  unsigned int v12 = *(const void **)v10;
  uint64_t v11 = *(void *)(v10 + 8);
  int64_t v13 = v11 - *(void *)v10;
  if (v11 != *(void *)v10)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v13 >> 3)) >= 0x492492492492493) {
      sub_2E00();
    }
    uint64_t v14 = (char *)operator new(v13);
    *(void *)(a1 + 24) = v14;
    *(void *)(a1 + 32) = v14;
    uint64_t v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 40) = v15;
    memcpy(v14, v12, v13 - 7);
    *(void *)(a1 + 32) = v15;
  }
  uint64_t v16 = sub_6845BC(a2);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  long long v18 = *(const void **)v16;
  uint64_t v17 = *(void *)(v16 + 8);
  int64_t v19 = v17 - *(void *)v16;
  if (v17 != *(void *)v16)
  {
    if (v19 < 0) {
      sub_2E00();
    }
    unsigned int v20 = (char *)operator new(v17 - *(void *)v16);
    *(void *)(a1 + 48) = v20;
    *(void *)(a1 + 56) = v20;
    unsigned int v21 = &v20[8 * (v19 >> 3)];
    *(void *)(a1 + 64) = v21;
    memcpy(v20, v18, v19);
    *(void *)(a1 + 56) = v21;
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = -1;
  sub_46F728(a1 + 128, a2);
  sub_46F888(a1 + 288, a2);
  uint64_t v22 = *a4;
  *(_DWORD *)(a1 + 456) = *((_DWORD *)a4 + 2);
  *(void *)(a1 + 448) = v22;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 464) = *((_OWORD *)a4 + 1);
  *(void *)(a1 + 480) = a4[4];
  a4[2] = 0;
  a4[3] = 0;
  a4[4] = 0;
  uint64_t v23 = a4[5];
  *(_DWORD *)(a1 + 496) = *((_DWORD *)a4 + 12);
  *(void *)(a1 + 488) = v23;
  *(void *)(a1 + 504) = sub_EB40C0(a2);
  uint64_t v24 = *a3;
  *(_DWORD *)(a1 + 520) = *((_DWORD *)a3 + 2);
  *(void *)(a1 + 512) = v24;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 528) = *((_OWORD *)a3 + 1);
  *(void *)(a1 + 544) = a3[4];
  a3[2] = 0;
  a3[3] = 0;
  a3[4] = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a3 + 5);
  *(void *)(a1 + 568) = a3[7];
  a3[5] = 0;
  a3[6] = 0;
  a3[7] = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = *((_OWORD *)a3 + 4);
  *(void *)(a1 + 592) = a3[10];
  a3[8] = 0;
  a3[9] = 0;
  a3[10] = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a3 + 11);
  *(void *)(a1 + 616) = a3[13];
  a3[11] = 0;
  a3[12] = 0;
  a3[13] = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 624) = *((_OWORD *)a3 + 7);
  *(void *)(a1 + 640) = a3[16];
  a3[14] = 0;
  a3[15] = 0;
  a3[16] = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(a3 + 17);
  *(void *)(a1 + 664) = a3[19];
  a3[17] = 0;
  a3[18] = 0;
  a3[19] = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 672) = *((_OWORD *)a3 + 10);
  *(void *)(a1 + 688) = a3[22];
  a3[20] = 0;
  a3[21] = 0;
  a3[22] = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a3 + 23);
  *(void *)(a1 + 712) = a3[25];
  a3[23] = 0;
  a3[24] = 0;
  a3[25] = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = *((_OWORD *)a3 + 13);
  *(void *)(a1 + 736) = a3[28];
  a3[26] = 0;
  a3[27] = 0;
  a3[28] = 0;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a3 + 29);
  *(void *)(a1 + 760) = a3[31];
  a3[29] = 0;
  a3[30] = 0;
  a3[31] = 0;
  long long v25 = *((_OWORD *)a3 + 17);
  *(_OWORD *)(a1 + 768) = *((_OWORD *)a3 + 16);
  *(_OWORD *)(a1 + 784) = v25;
  sub_46F9E8(a2, a1 + 800);
  *(void *)(a1 + 1024) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)a5;
  *(void *)(a1 + 1024) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = 0;
  *(_OWORD *)a5 = 0u;
  *(void *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  return a1;
}

void sub_46F650(_Unwind_Exception *a1)
{
  sub_3B0290(v7);
  unint64_t v9 = *(void **)(v1 + 464);
  if (v9)
  {
    *(void *)(v1 + 472) = v9;
    operator delete(v9);
  }
  sub_3B024C(v6);
  sub_3B024C(v5);
  sub_3310C(v4);
  uint64_t v10 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v10;
    operator delete(v10);
    uint64_t v11 = *v2;
    if (!*v2)
    {
LABEL_5:
      unsigned int v12 = *(void **)v1;
      if (!*(void *)v1) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = *v2;
    if (!*v2) {
      goto LABEL_5;
    }
  }
  *(void *)(v1 + 32) = v11;
  operator delete(v11);
  unsigned int v12 = *(void **)v1;
  if (!*(void *)v1) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_9:
  *(void *)(v1 + 8) = v12;
  operator delete(v12);
  _Unwind_Resume(a1);
}

void sub_46F728(uint64_t a1, uint64_t a2)
{
  int v4 = sub_EB3214(a2);
  BOOL v5 = *(double *)(sub_EB22DC(a2) + 32) > 0.95;
  char v6 = *(unsigned char *)(sub_EB22DC(a2) + 68);
  int v7 = *(_DWORD *)sub_69134(a2);
  *(_OWORD *)&v10[4] = 0u;
  int v15 = 0;
  uint64_t v18 = 0;
  uint64_t v8 = 0x7FFFFFFFLL;
  int v9 = 0x7FFFFFFF;
  *(void *)uint64_t v10 = 0x7FFFFFFF7FFFFFFFLL;
  unint64_t v11 = 0x8000000080000000;
  *(_OWORD *)unsigned int v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)__p_8 = 0u;
  unint64_t v16 = 0x8000000080000000;
  int v17 = 0x7FFFFFFF;
  uint64_t v19 = 0xFFFFFFFFLL;
  long long v20 = xmmword_20E8160;
  *(_DWORD *)a1 = v7;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 20) = v5;
  *(unsigned char *)(a1 + 21) = v6;
  sub_3B1DC8(a1 + 24, (long long *)&v8);
  if (*((void *)&v13 + 1))
  {
    __p_8[0] = *((void **)&v13 + 1);
    operator delete(*((void **)&v13 + 1));
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_46F874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_46F888(uint64_t a1, uint64_t a2)
{
  int v4 = sub_EB3228(a2);
  BOOL v5 = *(double *)(sub_486CB4(a2) + 32) > 0.95;
  char v6 = *(unsigned char *)(sub_486CB4(a2) + 68);
  int v7 = *(_DWORD *)sub_EB2AD8(a2);
  *(_OWORD *)&v10[4] = 0u;
  int v15 = 0;
  uint64_t v18 = 0;
  uint64_t v8 = 0x7FFFFFFFLL;
  int v9 = 0x7FFFFFFF;
  *(void *)uint64_t v10 = 0x7FFFFFFF7FFFFFFFLL;
  unint64_t v11 = 0x8000000080000000;
  *(_OWORD *)unsigned int v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)__p_8 = 0u;
  unint64_t v16 = 0x8000000080000000;
  int v17 = 0x7FFFFFFF;
  uint64_t v19 = 0xFFFFFFFFLL;
  long long v20 = xmmword_20E8160;
  *(_DWORD *)a1 = v7;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 20) = v5;
  *(unsigned char *)(a1 + 21) = v6;
  sub_3B1DC8(a1 + 24, (long long *)&v8);
  if (*((void *)&v13 + 1))
  {
    __p_8[0] = *((void **)&v13 + 1);
    operator delete(*((void **)&v13 + 1));
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_46F9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *sub_46F9E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  *(_DWORD *)(a2 + 25) = 0;
  *(unsigned char *)(a2 + 29) = 1;
  *(_DWORD *)(a2 + 30) = 0;
  *(_DWORD *)(a2 + 33) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 3) = *(unsigned char *)(sub_EB22DC(a1) + 64);
  *(unsigned char *)(a2 + 5) = *(unsigned char *)(sub_EB22AC(a1) + 2);
  *(unsigned char *)(a2 + 6) = *(unsigned char *)(sub_EB22AC(a1) + 3);
  *(unsigned char *)(a2 + 7) = *(unsigned char *)(sub_EB22AC(a1) + 4);
  *(unsigned char *)(a2 + 30) = *(unsigned char *)(sub_EB22AC(a1) + 6);
  *(void *)(a2 + 8) = *(void *)(sub_EB22DC(a1) + 16);
  *(void *)(a2 + 16) = *(void *)(sub_EB22DC(a1) + 8);
  *(unsigned char *)(a2 + 35) = *(unsigned char *)(sub_EB22AC(a1) + 8);
  *(unsigned char *)(a2 + 34) = *(unsigned char *)(sub_EB22AC(a1) + 9);
  double result = (unsigned char *)sub_68EAC(a1);
  *(unsigned char *)(a2 + 2) = *result & 1;
  *(_WORD *)a2 = 0;
  return result;
}

uint64_t sub_46FADC(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, uint64_t *a5)
{
  sub_EB2AF8(a2, a1);
  uint64_t v10 = sub_EB2C18(a2);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  unsigned int v12 = *(const void **)v10;
  uint64_t v11 = *(void *)(v10 + 8);
  int64_t v13 = v11 - *(void *)v10;
  if (v11 != *(void *)v10)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v13 >> 3)) >= 0x492492492492493) {
      sub_2E00();
    }
    uint64_t v14 = (char *)operator new(v13);
    *(void *)(a1 + 24) = v14;
    *(void *)(a1 + 32) = v14;
    int v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 40) = v15;
    memcpy(v14, v12, v13 - 7);
    *(void *)(a1 + 32) = v15;
  }
  uint64_t v16 = sub_6845BC(a2);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v18 = *(const void **)v16;
  uint64_t v17 = *(void *)(v16 + 8);
  int64_t v19 = v17 - *(void *)v16;
  if (v17 != *(void *)v16)
  {
    if (v19 < 0) {
      sub_2E00();
    }
    long long v20 = (char *)operator new(v17 - *(void *)v16);
    *(void *)(a1 + 48) = v20;
    *(void *)(a1 + 56) = v20;
    unsigned int v21 = &v20[8 * (v19 >> 3)];
    *(void *)(a1 + 64) = v21;
    memcpy(v20, v18, v19);
    *(void *)(a1 + 56) = v21;
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = a4;
  sub_46F728(a1 + 128, a2);
  sub_46F888(a1 + 288, a2);
  uint64_t v22 = *a5;
  *(_DWORD *)(a1 + 456) = *((_DWORD *)a5 + 2);
  *(void *)(a1 + 448) = v22;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 464) = *((_OWORD *)a5 + 1);
  *(void *)(a1 + 480) = a5[4];
  a5[2] = 0;
  a5[3] = 0;
  a5[4] = 0;
  uint64_t v23 = a5[5];
  *(_DWORD *)(a1 + 496) = *((_DWORD *)a5 + 12);
  *(void *)(a1 + 488) = v23;
  *(void *)(a1 + 504) = sub_EB40C0(a2);
  uint64_t v24 = *a3;
  *(_DWORD *)(a1 + 520) = *((_DWORD *)a3 + 2);
  *(void *)(a1 + 512) = v24;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 528) = *((_OWORD *)a3 + 1);
  *(void *)(a1 + 544) = a3[4];
  a3[2] = 0;
  a3[3] = 0;
  a3[4] = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = *(_OWORD *)(a3 + 5);
  *(void *)(a1 + 568) = a3[7];
  a3[5] = 0;
  a3[6] = 0;
  a3[7] = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = *((_OWORD *)a3 + 4);
  *(void *)(a1 + 592) = a3[10];
  a3[8] = 0;
  a3[9] = 0;
  a3[10] = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 600) = *(_OWORD *)(a3 + 11);
  *(void *)(a1 + 616) = a3[13];
  a3[11] = 0;
  a3[12] = 0;
  a3[13] = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 624) = *((_OWORD *)a3 + 7);
  *(void *)(a1 + 640) = a3[16];
  a3[14] = 0;
  a3[15] = 0;
  a3[16] = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(a3 + 17);
  *(void *)(a1 + 664) = a3[19];
  a3[17] = 0;
  a3[18] = 0;
  a3[19] = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 672) = *((_OWORD *)a3 + 10);
  *(void *)(a1 + 688) = a3[22];
  a3[20] = 0;
  a3[21] = 0;
  a3[22] = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a3 + 23);
  *(void *)(a1 + 712) = a3[25];
  a3[23] = 0;
  a3[24] = 0;
  a3[25] = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = *((_OWORD *)a3 + 13);
  *(void *)(a1 + 736) = a3[28];
  a3[26] = 0;
  a3[27] = 0;
  a3[28] = 0;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a3 + 29);
  *(void *)(a1 + 760) = a3[31];
  a3[29] = 0;
  a3[30] = 0;
  a3[31] = 0;
  long long v25 = *((_OWORD *)a3 + 17);
  *(_OWORD *)(a1 + 768) = *((_OWORD *)a3 + 16);
  *(_OWORD *)(a1 + 784) = v25;
  sub_46F9E8(a2, a1 + 800);
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  return a1;
}

void sub_46FE38(_Unwind_Exception *a1)
{
  sub_3B0290(v7);
  int v9 = *(void **)(v1 + 464);
  if (v9)
  {
    *(void *)(v1 + 472) = v9;
    operator delete(v9);
  }
  sub_3B024C(v6);
  sub_3B024C(v5);
  sub_3310C(v4);
  uint64_t v10 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v10;
    operator delete(v10);
    uint64_t v11 = *v2;
    if (!*v2)
    {
LABEL_5:
      unsigned int v12 = *(void **)v1;
      if (!*(void *)v1) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = *v2;
    if (!*v2) {
      goto LABEL_5;
    }
  }
  *(void *)(v1 + 32) = v11;
  operator delete(v11);
  unsigned int v12 = *(void **)v1;
  if (!*(void *)v1) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_9:
  *(void *)(v1 + 8) = v12;
  operator delete(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_46FF10(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, uint64_t *a5)
{
  return sub_46FADC(a1, a2, a3, a4, a5);
}

uint64_t *sub_46FF34(uint64_t *a1, uint64_t *a2, uint64_t **a3, uint64_t a4)
{
  a1[14] = 0;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  uint64_t v6 = (uint64_t)a1 + 324;
  uint64_t v74 = (uint64_t)(a1 + 9);
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_DWORD *)a1 + 32) = -1;
  unsigned __int32 v76 = a1 + 16;
  a1[17] = 0;
  unint64_t v72 = a1 + 17;
  *((_DWORD *)a1 + 30) = -1;
  *(uint64_t *)((char *)a1 + 142) = 0;
  *((_DWORD *)a1 + 38) = 0x7FFFFFFF;
  unint64_t v71 = a1 + 19;
  *(_OWORD *)(a1 + 21) = 0u;
  *((_DWORD *)a1 + 40) = 0x7FFFFFFF;
  *(uint64_t *)((char *)a1 + 164) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)&long long v7 = 0x8000000080000000;
  a1[23] = 0x8000000080000000;
  *((_OWORD *)a1 + 12) = 0u;
  uint64_t v73 = a1 + 24;
  *((unsigned char *)a1 + 240) = 0;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *(uint64_t *)((char *)a1 + 244) = 0x8000000080000000;
  *((_DWORD *)a1 + 63) = 0x7FFFFFFF;
  *((_DWORD *)a1 + 66) = -1;
  *((_OWORD *)a1 + 17) = xmmword_20E8160;
  *((_DWORD *)a1 + 72) = -1;
  a1[37] = 0;
  unsigned __int32 v75 = a1 + 36;
  *(uint64_t *)((char *)a1 + 302) = 0;
  *((_DWORD *)a1 + 78) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 41) = 0u;
  *((_DWORD *)a1 + 80) = 0x7FFFFFFF;
  *(uint64_t *)((char *)a1 + 324) = 0x7FFFFFFF7FFFFFFFLL;
  a1[43] = 0x8000000080000000;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((unsigned char *)a1 + 400) = 0;
  *((_DWORD *)a1 + 101) = 0x7FFFFFFF;
  a1[51] = 0x8000000080000000;
  *((_DWORD *)a1 + 106) = -1;
  *((_OWORD *)a1 + 27) = xmmword_20E8160;
  *((_DWORD *)a1 + 112) = 0x7FFFFFFF;
  *(uint64_t *)((char *)a1 + 452) = 0x7FFFFFFF7FFFFFFFLL;
  a1[60] = 0;
  *((_OWORD *)a1 + 29) = 0u;
  a1[61] = 0x8000000080000000;
  *((_DWORD *)a1 + 124) = 0x7FFFFFFF;
  a1[63] = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v80 = (uint64_t)(a1 + 64);
  a1[64] = 0x8000000080000000;
  *((_DWORD *)a1 + 130) = 0x7FFFFFFF;
  *((_OWORD *)a1 + 33) = 0u;
  *((_OWORD *)a1 + 34) = 0u;
  *((_OWORD *)a1 + 35) = 0u;
  *((_OWORD *)a1 + 36) = 0u;
  *((_OWORD *)a1 + 37) = 0u;
  *((_OWORD *)a1 + 38) = 0u;
  *((_OWORD *)a1 + 39) = 0u;
  *((_OWORD *)a1 + 40) = 0u;
  *((_OWORD *)a1 + 41) = 0u;
  *((_OWORD *)a1 + 42) = 0u;
  *((_OWORD *)a1 + 43) = 0u;
  *((_OWORD *)a1 + 44) = 0u;
  *((_OWORD *)a1 + 45) = 0u;
  *((_OWORD *)a1 + 46) = 0u;
  *((void *)&v7 + 1) = 0x8000000080000000;
  *((_OWORD *)a1 + 47) = 0u;
  *((_OWORD *)a1 + 48) = v7;
  uint64_t v8 = a1 + 100;
  a1[102] = 0;
  *((_OWORD *)a1 + 49) = v7;
  *((_OWORD *)a1 + 50) = 0u;
  *((unsigned char *)a1 + 824) = 1;
  *(_DWORD *)((char *)a1 + 825) = 0;
  *((unsigned char *)a1 + 829) = 1;
  int v9 = (int32x4_t *)(a1 + 105);
  *(_DWORD *)((char *)a1 + 833) = 0;
  *(_DWORD *)((char *)a1 + 830) = 0;
  a1[131] = 0;
  *(_OWORD *)(a1 + 127) = 0u;
  *(_OWORD *)(a1 + 129) = 0u;
  *(_OWORD *)(a1 + 123) = 0u;
  *(_OWORD *)(a1 + 125) = 0u;
  *(_OWORD *)(a1 + 119) = 0u;
  *(_OWORD *)(a1 + 121) = 0u;
  *(_OWORD *)(a1 + 115) = 0u;
  *(_OWORD *)(a1 + 117) = 0u;
  *(_OWORD *)(a1 + 111) = 0u;
  *(_OWORD *)(a1 + 113) = 0u;
  *(_OWORD *)(a1 + 107) = 0u;
  *(_OWORD *)(a1 + 109) = 0u;
  *(_OWORD *)(a1 + 105) = 0u;
  if (!sub_EA8E90(a2))
  {
    *(_OWORD *)int v92 = 0u;
    *(_OWORD *)int v93 = 0u;
    int v94 = 1065353216;
    v91[0] = a4;
    v91[1] = (uint64_t)v92;
    uint64_t v10 = (uint64_t *)nullsub_1(a2);
    sub_EB2AF8(*v10, (uint64_t)__dst);
    uint64_t v11 = (void *)*a1;
    if (*a1)
    {
      a1[1] = (uint64_t)v11;
      operator delete(v11);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)__dst;
    a1[2] = *(void *)&__dst[16];
    sub_3C7658(v80, *a3);
    unsigned int v12 = (uint64_t *)nullsub_1(a2);
    sub_46F9E8(*v12, (uint64_t)__dst);
    long long v13 = *(_OWORD *)&__dst[16];
    *uint64_t v8 = *(_OWORD *)__dst;
    v8[1] = v13;
    long long v14 = *(_OWORD *)&__dst[48];
    v8[2] = *(_OWORD *)&__dst[32];
    v8[3] = v14;
    int v15 = (uint64_t *)nullsub_1(a2);
    uint64_t v16 = (int *)sub_EB22DC(*v15);
    sub_4708B8(v91, 0, *v16, 0, 0);
    uint64_t v70 = v6;
    unint64_t v17 = sub_EA9088(a2);
    if (v17 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v17;
    }
    uint64_t v78 = v18;
    if (v17 >= 2)
    {
      int v77 = (__int32 *)(v6 + 507);
      uint64_t v19 = 1;
      uint64_t v20 = 36;
      do
      {
        unsigned int v21 = (long long *)sub_EA8DF4(a2, v19);
        sub_4456B4(__dst, v21);
        uint64_t v22 = v19 - 1;
        uint64_t v23 = (long long *)sub_EA8DF4(a2, v19 - 1);
        sub_4456B4(v95, v23);
        uint64_t v24 = (int *)sub_EB2AA4((uint64_t)__dst);
        int v26 = *v24;
        unsigned int v25 = v24[1];
        unint64_t v27 = (_DWORD *)sub_EB2ABC((uint64_t)v95);
        LOBYTE(v28) = 0;
        if (*v27 == v26 && (unsigned __int16)v27[1] == (unsigned __int16)v25) {
          unsigned int v28 = ((v25 ^ v27[1]) >> 29) & 1;
        }
        uint64_t v29 = (_DWORD *)sub_EB2ABC((uint64_t)v95);
        __int16 v30 = (_DWORD *)sub_EB2AA4((uint64_t)__dst);
        BOOL v32 = *v29 == *v30 && v29[1] == v30[1];
        sub_46B058();
        uint64_t v34 = v33;
        uint64_t v36 = v35;
        uint64_t v37 = *a1;
        uint64_t v38 = a1[1];
        sub_EB23DC();
        sub_4742F0((void **)a1, v38, v34, v36 + v32, v39, v40, v40 - (v36 + v32));
        sub_46BD04(v80, (uint64_t)&(*a3)[v20], v32);
        sub_46F9E8((uint64_t)__dst, (uint64_t)v85);
        *((unsigned char *)a1 + 800) |= v85[0];
        *((unsigned char *)a1 + 801) |= v85[1];
        *((unsigned char *)a1 + 802) |= v85[2];
        *((unsigned char *)a1 + 824) &= v85[24];
        *((unsigned char *)a1 + 827) |= v85[27];
        *((unsigned char *)a1 + 826) |= v85[26];
        *((unsigned char *)a1 + 828) |= v85[28];
        *((unsigned char *)a1 + 829) = v85[29];
        *((unsigned char *)a1 + 830) = v85[30];
        *((unsigned char *)a1 + 825) = v85[25];
        *((unsigned char *)a1 + 836) |= v88;
        *int v9 = vaddq_s32(*v9, v89);
        int32x2_t v41 = (int32x2_t)a1[107];
        uint8x8_t v42 = (uint8x8_t)vadd_s32(v41, v90);
        a1[107] = (uint64_t)v42;
        *((unsigned char *)a1 + 835) |= v87;
        v42.i32[0] = v86;
        int16x8_t v43 = (int16x8_t)vmovl_u8(v42);
        v41.i32[0] = *v77;
        *(int8x8_t *)v43.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v41), *(int8x8_t *)v43.i8);
        *int v77 = vmovn_s16(v43).u32[0];
        unint64_t v44 = (int *)sub_486CB4((uint64_t)v95);
        sub_4708B8(v91, -1 - 0x5555555555555555 * ((v38 - v37) >> 4), *v44, v22 + 1, v28);
        sub_4451C0((uint64_t)v95);
        sub_4451C0((uint64_t)__dst);
        v20 += 36;
        uint64_t v19 = v22 + 2;
      }
      while (v22 + 2 != v78);
    }
    int v46 = (void *)*a1;
    uint64_t v45 = a1[1];
    uint64_t v47 = nullsub_1(a2);
    int v48 = *(_DWORD *)sub_486CB4(*(void *)(v47 + 8) - 480);
    unint64_t v49 = sub_EA9088(a2);
    sub_4708B8(v91, -1 - 0x5555555555555555 * ((v45 - (uint64_t)v46) >> 4), v48, v49, 0);
    sub_46C158(v74, v92, v82);
    if (__p)
    {
      int v84 = __p;
      operator delete(__p);
    }
    if (v82[0])
    {
      v82[1] = v82[0];
      operator delete(v82[0]);
    }
    __n128 v50 = (uint64_t *)nullsub_1(a2);
    sub_46F728((uint64_t)__dst, *v50);
    uint64_t v51 = *(void *)&__dst[56];
    *unint64_t v72 = *(void *)&__dst[8];
    *(void *)((char *)v72 + 6) = *(void *)&__dst[14];
    *(_DWORD *)unsigned __int32 v76 = *(_DWORD *)__dst;
    long long v52 = *(_OWORD *)&__dst[40];
    *(_OWORD *)unint64_t v71 = *(_OWORD *)&__dst[24];
    *((_OWORD *)v71 + 1) = v52;
    v71[4] = v51;
    unsigned __int32 v53 = (void *)*v73;
    if (*v73)
    {
      a1[25] = (uint64_t)v53;
      operator delete(v53);
      uint64_t *v73 = 0;
      v73[1] = 0;
      v73[2] = 0;
    }
    uint64_t v54 = (void *)a1[27];
    *((_OWORD *)a1 + 12) = *(_OWORD *)v97;
    a1[26] = v98;
    v97[1] = 0;
    uint64_t v98 = 0;
    v97[0] = 0;
    if (v54)
    {
      a1[28] = (uint64_t)v54;
      operator delete(v54);
      a1[27] = 0;
      a1[28] = 0;
      a1[29] = 0;
    }
    *(_OWORD *)(a1 + 27) = v99;
    a1[29] = v100;
    uint64_t v100 = 0;
    long long v99 = 0uLL;
    *((_OWORD *)a1 + 15) = v101;
    if (v76 != __dst)
    {
      unsigned int v55 = *((_DWORD *)a1 + 66);
      unsigned int v56 = v103;
      if (v55 == v103)
      {
        if (v55 <= 1) {
          a1[32] = v102;
        }
      }
      else
      {
        if (v103 <= 1) {
          a1[32] = v102;
        }
        *((_DWORD *)a1 + 66) = v56;
      }
    }
    *((_OWORD *)a1 + 17) = v104;
    if (v97[0])
    {
      v97[1] = v97[0];
      operator delete(v97[0]);
    }
    uint64_t v57 = nullsub_1(a2);
    sub_46F888((uint64_t)__dst, *(void *)(v57 + 8) - 480);
    uint64_t v58 = *(void *)&__dst[56];
    a1[37] = *(void *)&__dst[8];
    *(uint64_t *)((char *)a1 + 302) = *(void *)&__dst[14];
    *(_DWORD *)unsigned __int32 v75 = *(_DWORD *)__dst;
    long long v59 = *(_OWORD *)&__dst[40];
    *(_OWORD *)(a1 + 39) = *(_OWORD *)&__dst[24];
    *(_OWORD *)(a1 + 41) = v59;
    a1[43] = v58;
    uint64_t v60 = (void *)a1[44];
    if (v60)
    {
      a1[45] = (uint64_t)v60;
      operator delete(v60);
      a1[44] = 0;
      a1[45] = 0;
      a1[46] = 0;
    }
    *((_OWORD *)a1 + 22) = *(_OWORD *)v97;
    a1[46] = v98;
    v97[1] = 0;
    uint64_t v98 = 0;
    v97[0] = 0;
    BOOL v61 = (void *)(v70 + 52);
    uint64_t v62 = (void *)a1[47];
    if (v62)
    {
      a1[48] = (uint64_t)v62;
      operator delete(v62);
      *BOOL v61 = 0;
      *(void *)(v70 + 60) = 0;
      *(void *)(v70 + 68) = 0;
    }
    *(_OWORD *)BOOL v61 = v99;
    a1[49] = v100;
    uint64_t v100 = 0;
    long long v99 = 0uLL;
    *((_OWORD *)a1 + 25) = v101;
    if (v75 != __dst)
    {
      unsigned int v63 = *((_DWORD *)a1 + 106);
      unsigned int v64 = v103;
      if (v63 == v103)
      {
        if (v63 <= 1) {
          a1[52] = v102;
        }
      }
      else
      {
        if (v103 <= 1) {
          a1[52] = v102;
        }
        *((_DWORD *)a1 + 106) = v64;
      }
    }
    *((_OWORD *)a1 + 27) = v104;
    if (v97[0])
    {
      v97[1] = v97[0];
      operator delete(v97[0]);
    }
    a1[63] = sub_EA910C(a2);
    int v65 = v93[0];
    if (v93[0])
    {
      do
      {
        uint64_t v68 = (void *)*v65;
        uint64_t v69 = (void *)v65[3];
        if (v69)
        {
          v65[4] = v69;
          operator delete(v69);
        }
        operator delete(v65);
        int v65 = v68;
      }
      while (v68);
    }
    unint64_t v66 = v92[0];
    v92[0] = 0;
    if (v66) {
      operator delete(v66);
    }
  }
  return a1;
}

void sub_4707A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_3AB00((uint64_t)&a39);
  int32x2_t v41 = (void **)(v39 + 464);
  sub_46B07C((void **)(v39 + 1032));
  uint8x8_t v42 = *(void **)(v39 + 1008);
  if (v42)
  {
    *(void *)(v39 + 1016) = v42;
    operator delete(v42);
  }
  sub_3B01C8(v39 + 864);
  sub_3B0290(a21);
  int16x8_t v43 = *v41;
  if (*v41)
  {
    *(void *)(v39 + 472) = v43;
    operator delete(v43);
  }
  sub_3B024C(a15);
  sub_3B024C(a16);
  sub_3310C(a14);
  unint64_t v44 = *(void **)(v39 + 48);
  if (v44)
  {
    *(void *)(v39 + 56) = v44;
    operator delete(v44);
    uint64_t v45 = *(void **)(v39 + 24);
    if (!v45)
    {
LABEL_7:
      int v46 = *(void **)v39;
      if (!*(void *)v39) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v45 = *(void **)(v39 + 24);
    if (!v45) {
      goto LABEL_7;
    }
  }
  *(void *)(v39 + 32) = v45;
  operator delete(v45);
  int v46 = *(void **)v39;
  if (!*(void *)v39) {
LABEL_8:
  }
    _Unwind_Resume(a1);
LABEL_11:
  *(void *)(v39 + 8) = v46;
  operator delete(v46);
  _Unwind_Resume(a1);
}

void sub_4708B8(uint64_t *a1, unint64_t a2, int a3, uint64_t a4, char a5)
{
  unint64_t v25 = a2;
  uint64_t v7 = *(void *)*a1;
  if (v7 == *(void *)(*a1 + 8))
  {
    char v9 = 0;
    memset(&v26[1], 0, 23);
  }
  else
  {
    uint64_t v8 = v7 + 24 * a4;
    char v9 = *(unsigned char *)v8;
    *(_OWORD *)&v26[1] = *(_OWORD *)(v8 + 1);
    *(uint64_t **)((char *)&v26[2] + 7) = *(uint64_t **)(v8 + 16);
  }
  uint64_t v10 = a1[1];
  v26[0] = (uint64_t *)&v25;
  uint64_t v11 = sub_47188C(v10, &v25, (uint64_t)&unk_20F06E0, v26);
  long long v13 = (char *)v11[4];
  unint64_t v12 = v11[5];
  if ((unint64_t)v13 < v12)
  {
    *(void *)long long v13 = v25;
    *((_DWORD *)v13 + 2) = a3;
    v13[16] = v9;
    *(_OWORD *)(v13 + 17) = *(_OWORD *)&v26[1];
    *((uint64_t **)v13 + 4) = *(uint64_t **)((char *)&v26[2] + 7);
    v13[40] = a5;
    long long v14 = v13 + 48;
    goto LABEL_17;
  }
  int v15 = (unsigned char *)v11[3];
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v15) >> 4) + 1;
  if (v16 > 0x555555555555555) {
    sub_2E00();
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v15) >> 4);
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v18 = 0x555555555555555;
  }
  else {
    unint64_t v18 = v16;
  }
  if (v18 > 0x555555555555555) {
    sub_188D718();
  }
  uint64_t v19 = (char *)operator new(48 * v18);
  uint64_t v20 = &v19[16 * ((v13 - v15) >> 4)];
  unsigned int v21 = &v19[48 * v18];
  *(void *)uint64_t v20 = v25;
  *((_DWORD *)v20 + 2) = a3;
  v20[16] = v9;
  *(_OWORD *)(v20 + 17) = *(_OWORD *)&v26[1];
  *((uint64_t **)v20 + 4) = *(uint64_t **)((char *)&v26[2] + 7);
  v20[40] = a5;
  long long v14 = v20 + 48;
  if (v13 == v15)
  {
    v11[3] = v20;
    void v11[4] = v14;
    v11[5] = v21;
    if (!v15) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  do
  {
    uint64_t v22 = v20 - 48;
    long long v23 = *((_OWORD *)v13 - 3);
    long long v24 = *((_OWORD *)v13 - 1);
    *((_OWORD *)v20 - 2) = *((_OWORD *)v13 - 2);
    *((_OWORD *)v20 - 1) = v24;
    *((_OWORD *)v20 - 3) = v23;
    v13 -= 48;
    v20 -= 48;
  }
  while (v13 != v15);
  v11[3] = v22;
  void v11[4] = v14;
  v11[5] = v21;
  if (v15) {
LABEL_16:
  }
    operator delete(v15);
LABEL_17:
  void v11[4] = v14;
}

unint64_t sub_470ADC(void *a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4);
}

void *sub_470AF8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[1] - *result) >> 4);
  *a2 = result;
  a2[1] = 0;
  a2[2] = result;
  a2[3] = v2;
  return result;
}

void *sub_470B1C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[1] - *result) >> 4);
  *a2 = result;
  a2[1] = v2;
  a2[2] = result;
  a2[3] = v2;
  return result;
}

uint64_t sub_470B40(void *a1, uint64_t a2)
{
  return *a1 + 48 * a2;
}

uint64_t sub_470B50(uint64_t a1)
{
  return *(void *)(a1 + 8) - 48;
}

BOOL sub_470B5C(void *a1)
{
  uint64_t v1 = a1[1] - *a1;
  if (!v1) {
    return 0;
  }
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (v1 >> 4);
  if (v2 != (uint64_t)(a1[67] - a1[66]) >> 2
    || v2 != (uint64_t)(a1[70] - a1[69]) >> 2
    || v2 != (uint64_t)(a1[73] - a1[72]) >> 2)
  {
    return 0;
  }
  uint64_t v3 = (uint64_t)(a1 + 56);
  return !sub_475108((uint64_t)(a1 + 56)) || sub_475108(v3) == v2;
}

BOOL sub_470C10(uint64_t *a1)
{
  uint64_t v1 = a1[1] - *a1;
  if (!v1) {
    return 0;
  }
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (v1 >> 4);
  if (v3 != (a1[67] - a1[66]) >> 2
    || v3 != (a1[70] - a1[69]) >> 2
    || v3 != (a1[73] - a1[72]) >> 2
    || sub_475108((uint64_t)(a1 + 56)) && sub_475108((uint64_t)(a1 + 56)) != v3)
  {
    return 0;
  }
  char v9 = 1;
  uint64_t v8 = &v9;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5 && v4 + 48 != v5)
  {
    do
    {
      sub_474888(&v8, v4, v4 + 48);
      uint64_t v6 = v4 + 96;
      v4 += 48;
    }
    while (v6 != v5);
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
  }
  for (unint64_t i = &v9; v4 != v5; v4 += 48)
    sub_474AFC((uint64_t)&i, v4);
  return v9 != 0;
}

uint64_t sub_470D5C(void *a1)
{
  if (*a1 == a1[1]) {
    return 2;
  }
  uint64_t v1 = *(int **)(*a1 + 8);
  unint64_t v2 = (unsigned __int16 *)((char *)v1 - *v1);
  return *v2 < 0xBu || (uint64_t v3 = v2[5]) == 0 || (*((unsigned char *)v1 + v3 + 1) & 0x80) == 0;
}

uint64_t sub_470DAC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 + 1;
  if (a2 + 1 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4))
  {
    if (a2)
    {
      uint64_t v3 = *(void *)(a1 + 96);
      if (a2 >= (*(void *)(a1 + 104) - v3) >> 3) {
        return *(unsigned int *)(a1 + 304);
      }
      uint64_t v4 = (void *)(v3 + 8 * a2);
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = 48 * (*v4 - v5);
      if (!v6) {
        return *(unsigned int *)(a1 + 304);
      }
      uint64_t v7 = *(void *)(a1 + 72) + 48 * v5 + v6;
      if (!*(unsigned char *)(v7 - 8)) {
        return *(unsigned int *)(a1 + 304);
      }
      uint64_t v8 = (_DWORD *)(v7 - 40);
    }
    else
    {
      uint64_t v8 = (_DWORD *)(a1 + 144);
    }
    unsigned int v20 = 1000000000 - *v8;
    unsigned int v21 = *(_DWORD *)(a1 + 304);
    if (v20 <= v21) {
      return v21;
    }
    else {
      return v20;
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 96);
    unint64_t v10 = (*(void *)(a1 + 104) - v9) >> 3;
    if (v2 >= v10) {
      return 1000000000;
    }
    uint64_t v11 = *(void *)(v9 + 8 * a2);
    uint64_t v12 = 48 * (*(void *)(v9 + 8 * v2) - v11);
    if (!v12) {
      return 1000000000;
    }
    uint64_t v13 = *(void *)(a1 + 72);
    uint64_t v14 = v13 + 48 * v11 + v12;
    if (!*(unsigned char *)(v14 - 8)) {
      return 1000000000;
    }
    if (a2)
    {
      if (v10 <= a2) {
        return *(unsigned int *)(v14 - 40);
      }
      uint64_t v15 = *(void *)(v9 + 8 * a2 - 8);
      uint64_t v16 = 48 * (v11 - v15);
      if (!v16) {
        return *(unsigned int *)(v14 - 40);
      }
      uint64_t v17 = v13 + 48 * v15 + v16;
      if (!*(unsigned char *)(v17 - 8)) {
        return *(unsigned int *)(v14 - 40);
      }
      unint64_t v18 = (_DWORD *)(v17 - 40);
    }
    else
    {
      unint64_t v18 = (_DWORD *)(a1 + 144);
    }
    unsigned int v22 = 1000000000 - *v18;
    unsigned int v23 = *(_DWORD *)(v14 - 40);
    if (v22 <= v23) {
      return v23;
    }
    else {
      return v22;
    }
  }
}

uint64_t sub_470F2C(void *a1, unint64_t a2, double a3)
{
  uint64_t v5 = *(int **)(*a1 + 48 * a2 + 8);
  uint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  double v7 = 0.0;
  if (*v6 >= 9u)
  {
    uint64_t v8 = v6[4];
    if (v8)
    {
      LODWORD(a3) = *(int *)((char *)v5 + v8);
      double v7 = (double)*(unint64_t *)&a3;
    }
  }
  int v9 = sub_470DAC((uint64_t)a1, a2);
  if (a2)
  {
    uint64_t v10 = a1[12];
    if (a2 >= (a1[13] - v10) >> 3
      || (uint64_t v11 = (void *)(v10 + 8 * a2), v12 = *(v11 - 1), (v13 = 48 * (*v11 - v12)) == 0)
      || (uint64_t v14 = a1[9] + 48 * v12 + v13, !*(unsigned char *)(v14 - 8)))
    {
      int v16 = 0;
      goto LABEL_12;
    }
    uint64_t v15 = (_DWORD *)(v14 - 40);
  }
  else
  {
    uint64_t v15 = a1 + 18;
  }
  int v16 = *v15 - 1000000000;
LABEL_12:
  double v17 = v7 * ((double)(v16 + v9) / 1000000000.0);
  if (v17 >= 0.0)
  {
    if (v17 < 4.50359963e15)
    {
      uint64_t v18 = (uint64_t)(v17 + v17) + 1;
      return (uint64_t)(double)(v18 >> 1);
    }
  }
  else if (v17 > -4.50359963e15)
  {
    uint64_t v18 = (uint64_t)(v17 + v17);
    if (v18 >= 1) {
      --v18;
    }
    return (uint64_t)(double)(v18 >> 1);
  }
  return (uint64_t)v17;
}

uint64_t sub_471074(void *a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5, double a6)
{
  unint64_t v6 = (a3 ^ 1u) + a2;
  unint64_t v7 = a4 + a5;
  if (v6 <= v7) {
    uint64_t v8 = a4 + a5;
  }
  else {
    uint64_t v8 = (a3 ^ 1u) + a2;
  }
  if (v6 >= v7) {
    return 0;
  }
  uint64_t v10 = 0;
  do
    v10 += sub_470F2C(a1, v6++, a6);
  while (v8 != v6);
  return v10;
}

uint64_t sub_4710F0(void *a1, uint64_t a2, double a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v5 = 0;
  for (unint64_t i = 0; i != a2; ++i)
    v5 += sub_470F2C(a1, i, a3);
  return v5;
}

uint64_t sub_471160(unsigned int *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = a1[129];
      break;
    case 1:
      uint64_t result = a1[194];
      break;
    case 2:
      uint64_t result = a1[195];
      break;
    case 3:
      uint64_t result = a1[196];
      break;
    case 4:
      uint64_t result = a1[197];
      break;
    case 5:
      uint64_t result = a1[198];
      break;
    default:
      uint64_t result = 0x7FFFFFFFLL;
      break;
  }
  return result;
}

uint64_t sub_4711DC(void *a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 1:
      uint64_t result = *(unsigned int *)(a1[69] + 4 * a2);
      break;
    case 2:
      uint64_t result = *(unsigned int *)(a1[72] + 4 * a2);
      break;
    default:
      uint64_t result = *(unsigned int *)(a1[66] + 4 * a2);
      break;
  }
  return result;
}

uint64_t sub_471250(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_472D4C((void *)a1, *(char **)a2, *(char **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
    sub_47232C((void *)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
    sub_326C0((void *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
    sub_471F78((void *)(a1 + 72), *(char **)(a2 + 72), *(char **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 4));
    sub_326C0((void *)(a1 + 96), *(char **)(a2 + 96), *(char **)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3);
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  uint64_t v4 = *(void *)(a2 + 136);
  *(void *)(a1 + 142) = *(void *)(a2 + 142);
  *(void *)(a1 + 136) = v4;
  long long v5 = *(_OWORD *)(a2 + 152);
  long long v6 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v6;
  *(_OWORD *)(a1 + 152) = v5;
  if (a1 != a2)
  {
    sub_472BC8((void *)(a1 + 192), *(char **)(a2 + 192), *(char **)(a2 + 200), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 2));
    sub_472BC8((void *)(a1 + 216), *(char **)(a2 + 216), *(char **)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 2));
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    unsigned int v7 = *(_DWORD *)(a1 + 264);
    int v8 = *(_DWORD *)(a2 + 264);
    if (v7 == v8)
    {
      if (v7 <= 1) {
        *(void *)(a1 + 256) = *(void *)(a2 + 256);
      }
    }
    else
    {
      if (v8 == 1)
      {
        *(void *)(a1 + 256) = *(void *)(a2 + 256);
        int v8 = *(_DWORD *)(a2 + 264);
      }
      else if (!v8)
      {
        *(void *)(a1 + 256) = *(void *)(a2 + 256);
      }
      *(_DWORD *)(a1 + 264) = v8;
    }
  }
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  uint64_t v9 = *(void *)(a2 + 296);
  *(void *)(a1 + 302) = *(void *)(a2 + 302);
  *(void *)(a1 + 296) = v9;
  long long v10 = *(_OWORD *)(a2 + 312);
  long long v11 = *(_OWORD *)(a2 + 328);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = v11;
  *(_OWORD *)(a1 + 312) = v10;
  if (a1 == a2)
  {
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    uint64_t v14 = *(void *)(a2 + 448);
    *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
    *(void *)(a1 + 448) = v14;
  }
  else
  {
    sub_472BC8((void *)(a1 + 352), *(char **)(a2 + 352), *(char **)(a2 + 360), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2));
    sub_472BC8((void *)(a1 + 376), *(char **)(a2 + 376), *(char **)(a2 + 384), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 384) - *(void *)(a2 + 376)) >> 2));
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    unsigned int v12 = *(_DWORD *)(a1 + 424);
    int v13 = *(_DWORD *)(a2 + 424);
    if (v12 == v13)
    {
      if (v12 <= 1) {
        *(void *)(a1 + 416) = *(void *)(a2 + 416);
      }
    }
    else
    {
      if (v13 == 1)
      {
        *(void *)(a1 + 416) = *(void *)(a2 + 416);
        int v13 = *(_DWORD *)(a2 + 424);
      }
      else if (!v13)
      {
        *(void *)(a1 + 416) = *(void *)(a2 + 416);
      }
      *(_DWORD *)(a1 + 424) = v13;
    }
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    uint64_t v15 = *(void *)(a2 + 448);
    *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
    *(void *)(a1 + 448) = v15;
    sub_31AF54((void *)(a1 + 464), *(char **)(a2 + 464), *(char **)(a2 + 472), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 472) - *(void *)(a2 + 464)) >> 2));
  }
  uint64_t v16 = *(void *)(a2 + 488);
  *(_DWORD *)(a1 + 496) = *(_DWORD *)(a2 + 496);
  *(void *)(a1 + 488) = v16;
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  sub_3C7658(a1 + 512, (uint64_t *)(a2 + 512));
  long long v17 = *(_OWORD *)(a2 + 848);
  long long v19 = *(_OWORD *)(a2 + 800);
  long long v18 = *(_OWORD *)(a2 + 816);
  *(_OWORD *)(a1 + 832) = *(_OWORD *)(a2 + 832);
  *(_OWORD *)(a1 + 848) = v17;
  *(_OWORD *)(a1 + 800) = v19;
  *(_OWORD *)(a1 + 816) = v18;
  sub_4724D0((char **)(a1 + 864), (char **)(a2 + 864));
  if (a1 != a2)
  {
    sub_4726C4((void *)(a1 + 1008), *(char **)(a2 + 1008), *(char **)(a2 + 1016), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 1016) - *(void *)(a2 + 1008)) >> 3));
    sub_472848((void **)(a1 + 1032), *(uint64_t **)(a2 + 1032), *(uint64_t **)(a2 + 1040), (uint64_t)(*(void *)(a2 + 1040) - *(void *)(a2 + 1032)) >> 6);
  }
  return a1;
}

uint64_t sub_471590(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, long long *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  long long v18 = *(const void **)a2;
  uint64_t v17 = *(void *)(a2 + 8);
  int64_t v19 = v17 - *(void *)a2;
  if (v17 != *(void *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v19 >> 4) >= 0x555555555555556) {
      sub_2E00();
    }
    unsigned int v20 = (char *)operator new(v19);
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = v20;
    unsigned int v21 = &v20[16 * (v19 >> 4)];
    *(void *)(a1 + 16) = v21;
    memcpy(v20, v18, v19);
    *(void *)(a1 + 8) = v21;
  }
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  sub_3B1C7C((void *)(a1 + 72), a10);
  *(_DWORD *)(a1 + 120) = -1;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)a6;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a6 + 8);
  sub_3B1DC8(a1 + 152, (long long *)(a6 + 24));
  *(_DWORD *)(a1 + 288) = *(_DWORD *)a7;
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a7 + 8);
  sub_3B1DC8(a1 + 312, (long long *)(a7 + 24));
  *(_DWORD *)(a1 + 448) = 0x7FFFFFFF;
  *(void *)(a1 + 452) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 488) = 0x8000000080000000;
  *(_DWORD *)(a1 + 496) = 0x7FFFFFFF;
  *(void *)(a1 + 504) = *a4;
  sub_3B1F44(a1 + 512, a3);
  long long v22 = *a5;
  long long v23 = a5[1];
  long long v24 = a5[3];
  *(_OWORD *)(a1 + 832) = a5[2];
  *(_OWORD *)(a1 + 848) = v24;
  *(_OWORD *)(a1 + 800) = v22;
  *(_OWORD *)(a1 + 816) = v23;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(void *)(a1 + 1024) = 0;
  unint64_t v25 = *(const void **)a8;
  int64_t v26 = *(void *)(a8 + 8) - *(void *)a8;
  if (v26)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v26 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    unint64_t v27 = (char *)operator new(v26);
    *(void *)(a1 + 1008) = v27;
    *(void *)(a1 + 1016) = v27;
    unsigned int v28 = &v27[8 * (v26 >> 3)];
    *(void *)(a1 + 1024) = v28;
    memcpy(v27, v25, v26 - 4);
    *(void *)(a1 + 1016) = v28;
  }
  *(void *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  sub_3B271C((void *)(a1 + 1032), *a9, a9[1], (a9[1] - *a9) >> 6);
  return a1;
}

void sub_4717BC(_Unwind_Exception *a1)
{
  uint64_t v9 = *v6;
  if (*v6)
  {
    *(void *)(v1 + 1016) = v9;
    operator delete(v9);
  }
  sub_3B01C8(v1 + 864);
  sub_3B0290(v5);
  long long v10 = *(void **)(v1 + 464);
  if (v10)
  {
    *(void *)(v1 + 472) = v10;
    operator delete(v10);
  }
  sub_3B024C(v4);
  sub_3B024C(v3);
  sub_3310C(v2);
  long long v11 = *(void **)(v1 + 48);
  if (v11)
  {
    *(void *)(v1 + 56) = v11;
    operator delete(v11);
    unsigned int v12 = *v7;
    if (!*v7)
    {
LABEL_7:
      int v13 = *(void **)v1;
      if (!*(void *)v1) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v12 = *v7;
    if (!*v7) {
      goto LABEL_7;
    }
  }
  *(void *)(v1 + 32) = v12;
  operator delete(v12);
  int v13 = *(void **)v1;
  if (!*(void *)v1) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_8:
  *(void *)(v1 + 8) = v13;
  operator delete(v13);
  goto LABEL_9;
}

void sub_47187C()
{
  if (!*v0) {
    JUMPOUT(0x471850);
  }
  JUMPOUT(0x471848);
}

void *sub_47188C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    long long v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      long long v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            long long v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  uint64_t v14 = (void *)(a1 + 16);
  long long v11 = operator new(0x30uLL);
  *long long v11 = 0;
  v11[1] = v7;
  uint64_t v15 = **a4;
  void v11[4] = 0;
  v11[5] = 0;
  v11[2] = v15;
  v11[3] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    uint64_t v18 = *(void *)a1;
    int64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *long long v11 = *v19;
LABEL_61:
      void *v19 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v20 = 1;
    if (v8 >= 3) {
      BOOL v20 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v8);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_37;
    }
    if (prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < v8) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    unint64_t v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        unint64_t v4 = v7 % v8;
        uint64_t v18 = *(void *)a1;
        int64_t v19 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        uint64_t v18 = *(void *)a1;
        int64_t v19 = *(void **)(*(void *)a1 + 8 * v7);
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v27 & v7;
      uint64_t v18 = *(void *)a1;
      int64_t v19 = *(void **)(*(void *)a1 + 8 * (v27 & v7));
      if (v19) {
        goto LABEL_26;
      }
    }
  }
  *long long v11 = *v14;
  void *v14 = v11;
  *(void *)(v18 + 8 * v4) = v14;
  if (*v11)
  {
    unint64_t v28 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8) {
        v28 %= v8;
      }
    }
    else
    {
      v28 &= v8 - 1;
    }
    int64_t v19 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_471BAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_471BC0(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = *(void *)a1;
  uint64_t v6 = a2 - *(void *)a1;
  unint64_t v7 = (char *)(*(void *)a1 + (v6 & 0xFFFFFFFFFFFFFFFCLL));
  uint64_t v8 = a5 - 1;
  if (a5 < 1) {
    return v7;
  }
  uint64_t v12 = v6 >> 2;
  uint64_t v14 = *(char **)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  if (a5 > (v13 - (uint64_t)v14) >> 2)
  {
    unint64_t v15 = a5 + ((uint64_t)&v14[-v5] >> 2);
    if (v15 >> 62) {
      sub_2E00();
    }
    uint64_t v16 = v13 - v5;
    if (v16 >> 1 > v15) {
      unint64_t v15 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 62) {
        sub_188D718();
      }
      unint64_t v18 = v17;
      int64_t v19 = operator new(4 * v17);
      unint64_t v17 = v18;
      uint64_t v12 = v6 >> 2;
    }
    else
    {
      int64_t v19 = 0;
    }
    unint64_t v40 = &v19[4 * v12];
    int32x2_t v41 = &v40[4 * a5];
    uint8x8_t v42 = v40;
    int16x8_t v43 = __src;
    if ((v8 & 0x3FFFFFFFFFFFFFFFuLL) < 7) {
      goto LABEL_59;
    }
    uint8x8_t v42 = &v19[4 * v12];
    int16x8_t v43 = __src;
    if ((unint64_t)(&v19[v6 & 0xFFFFFFFFFFFFFFFCLL] - __src) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v44 = (v8 & 0x3FFFFFFFFFFFFFFFLL) + 1;
    uint64_t v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
    uint8x8_t v42 = &v40[v45];
    int16x8_t v43 = &__src[v45];
    int v46 = (long long *)(__src + 16);
    uint64_t v47 = &v19[4 * v12 + 16];
    uint64_t v48 = v44 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v49 = *v46;
      *(v47 - 1) = *(v46 - 1);
      _OWORD *v47 = v49;
      v46 += 2;
      v47 += 2;
      v48 -= 8;
    }
    while (v48);
    if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_59:
      do
      {
        int v50 = *(_DWORD *)v43;
        v43 += 4;
        *(_DWORD *)uint8x8_t v42 = v50;
        v42 += 4;
      }
      while (v42 != v41);
    }
    uint64_t v51 = *(char **)a1;
    if (*(char **)a1 == v7)
    {
      unsigned int v55 = &v19[4 * v12];
      int v65 = &v19[4 * v17];
      size_t v66 = v14 - v7;
      if (v14 == v7) {
        goto LABEL_43;
      }
    }
    else
    {
      long long v52 = (char *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + v5);
      unint64_t v53 = v52 - v51 - 4;
      uint64_t v54 = v7;
      unsigned int v55 = &v19[4 * v12];
      if (v53 < 0x3C) {
        goto LABEL_60;
      }
      uint64_t v54 = v7;
      unsigned int v55 = &v19[4 * v12];
      if ((unint64_t)(v52 - &v19[v6 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20) {
        goto LABEL_60;
      }
      uint64_t v56 = (v53 >> 2) + 1;
      uint64_t v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v54 = &v7[-v57];
      unsigned int v55 = &v40[-v57];
      uint64_t v58 = 4 * v12 - 16;
      long long v59 = &v19[v58];
      uint64_t v60 = (long long *)(v5 + v58);
      uint64_t v61 = v56 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        _OWORD *v59 = v62;
        v59 -= 2;
        v60 -= 2;
        v61 -= 8;
      }
      while (v61);
      if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_60:
        do
        {
          int v63 = *((_DWORD *)v54 - 1);
          v54 -= 4;
          *((_DWORD *)v55 - 1) = v63;
          v55 -= 4;
        }
        while (v54 != v51);
      }
      unsigned int v64 = *(unsigned char **)(a1 + 8);
      int v65 = &v19[4 * v17];
      size_t v66 = v64 - v7;
      if (v64 == v7) {
        goto LABEL_43;
      }
    }
    memmove(v41, v7, v66);
LABEL_43:
    unint64_t v67 = *(void **)a1;
    *(void *)a1 = v55;
    *(void *)(a1 + 8) = &v41[v66];
    *(void *)(a1 + 16) = v65;
    if (v67) {
      operator delete(v67);
    }
    return v40;
  }
  uint64_t v20 = (v14 - v7) >> 2;
  if (v20 >= a5)
  {
    unint64_t v21 = &__src[4 * a5];
    long long v23 = *(char **)(a1 + 8);
    goto LABEL_18;
  }
  unint64_t v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21)
  {
    uint64_t v70 = &__src[4 * v20];
    memmove(*(void **)(a1 + 8), v70, a4 - v21);
    uint64_t v12 = v6 >> 2;
    unint64_t v21 = v70;
  }
  long long v23 = &v14[v22];
  *(void *)(a1 + 8) = &v14[v22];
  if (v14 - v7 >= 1)
  {
LABEL_18:
    unint64_t v24 = &v7[4 * a5];
    size_t v25 = v23 - v24;
    uint64_t v26 = (v23 - v24) >> 2;
    unint64_t v27 = &v23[-4 * a5];
    unint64_t v28 = v23;
    if (v27 < v14)
    {
      unint64_t v29 = (v6 & 0xFFFFFFFFFFFFFFFCLL) + v25;
      __int16 v30 = (char *)(v29 + v5);
      unint64_t v31 = v29 + v5 + 4;
      if ((unint64_t)v14 > v31) {
        unint64_t v31 = (unint64_t)v14;
      }
      unint64_t v32 = v31 + ~v5 - v29;
      if (v32 < 0x2C)
      {
        unint64_t v28 = v23;
      }
      else
      {
        unint64_t v33 = v23 - v30;
        unint64_t v28 = v23;
        if (v33 >= 0x20)
        {
          uint64_t v34 = (v32 >> 2) + 1;
          uint64_t v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
          v27 += v35;
          unint64_t v28 = &v23[v35];
          uint64_t v36 = v23 + 16;
          uint64_t v37 = (long long *)(4 * v26 + 4 * v12 + v5 + 16);
          uint64_t v38 = v34 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v39 = *v37;
            *(v36 - 1) = *(v37 - 1);
            _OWORD *v36 = v39;
            v36 += 2;
            v37 += 2;
            v38 -= 8;
          }
          while (v38);
          if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        int v68 = *(_DWORD *)v27;
        v27 += 4;
        *(_DWORD *)unint64_t v28 = v68;
        v28 += 4;
      }
      while (v27 < v14);
    }
LABEL_50:
    *(void *)(a1 + 8) = v28;
    if (v23 != v24) {
      memmove(&v23[-4 * v26], v7, v25);
    }
    if (v21 != __src) {
      memmove(v7, __src, v21 - __src);
    }
  }
  return v7;
}

void *sub_471F78(void *result, char *a2, char *a3, size_t __sz)
{
  uint64_t v6 = a2;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  uint8x8_t v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 4) >= __sz)
  {
    uint64_t v16 = (char **)(result + 1);
    unint64_t v17 = (char *)result[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v17 - v9) >> 4) >= __sz)
    {
      uint64_t v24 = *result;
      if (a2 != a3)
      {
        uint64_t v25 = *result;
        do
        {
          uint64_t v26 = *(void *)v6;
          *(_DWORD *)(v25 + 8) = *((_DWORD *)v6 + 2);
          *(void *)uint64_t v25 = v26;
          *(unsigned char *)(v25 + 16) = v6[16];
          *(_OWORD *)(v25 + 24) = *(_OWORD *)(v6 + 24);
          *(unsigned char *)(v25 + 40) = v6[40];
          v24 += 48;
          v6 += 48;
          v25 += 48;
        }
        while (v6 != a3);
      }
      int64_t v15 = v24 - (void)v9;
    }
    else
    {
      unint64_t v18 = &a2[16 * ((v17 - v9) >> 4)];
      if (v17 != v9)
      {
        do
        {
          uint64_t v19 = *(void *)v6;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
          *(void *)uint8x8_t v9 = v19;
          v9[16] = v6[16];
          *(_OWORD *)(v9 + 24) = *(_OWORD *)(v6 + 24);
          v9[40] = v6[40];
          v6 += 48;
          v9 += 48;
        }
        while (v6 != v18);
        uint8x8_t v9 = *v16;
      }
      uint64_t v20 = v9;
      if (v18 != a3)
      {
        uint64_t v20 = v9;
        unint64_t v21 = v9;
        do
        {
          long long v22 = *(_OWORD *)v18;
          long long v23 = *((_OWORD *)v18 + 2);
          *((_OWORD *)v21 + 1) = *((_OWORD *)v18 + 1);
          *((_OWORD *)v21 + 2) = v23;
          *(_OWORD *)unint64_t v21 = v22;
          v21 += 48;
          v18 += 48;
          v20 += 48;
        }
        while (v18 != a3);
      }
      int64_t v15 = v20 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x555555555555555) {
      goto LABEL_27;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v11;
    if (v12 > 0x555555555555555) {
LABEL_27:
    }
      sub_2E00();
    uint64_t v13 = 6 * v12;
    uint64_t result = operator new(48 * v12);
    uint8x8_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = (char *)result;
    if (v6 != a3)
    {
      uint64_t result = memcpy(result, v6, 48 * ((a3 - v6 - 48) / 0x30uLL) + 48);
      uint64_t v14 = &v9[48 * ((a3 - v6 - 48) / 0x30uLL) + 48];
    }
    int64_t v15 = v14 - v9;
    uint64_t v16 = (char **)(v7 + 1);
  }
  *uint64_t v16 = &v9[v15];
  return result;
}

void *sub_4721B0(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  uint8x8_t v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x666666666666666) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 5 * v12;
    uint64_t result = operator new(40 * v12);
    uint8x8_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    int64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  int64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 3) >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    unint64_t v18 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  unint64_t v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    uint8x8_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    unint64_t v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  _DWORD *v15 = &v9[v14];
  return result;
}

void *sub_47232C(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  uint8x8_t v9 = (char *)*result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *result) >> 3) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x492492492492492) {
      goto LABEL_23;
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0x249249249249249 ? 0x492492492492492 : v11;
    if (v12 > 0x492492492492492) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 7 * v12;
    uint64_t result = operator new(56 * v12);
    uint8x8_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14 - 7);
    }
    int64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  int64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v16 - v9) >> 3) >= a4)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    size_t v18 = v14 - 7;
    uint64_t v19 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  unint64_t v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9 - 7);
    uint8x8_t v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v17;
  if (v14)
  {
    size_t v18 = v14 - 7;
    uint64_t v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  _DWORD *v15 = &v9[v14];
  return result;
}

char **sub_4724D0(char **a1, char **a2)
{
  if (a1 != a2)
  {
    sub_47257C(a1, *a2, a2[1], (a2[1] - *a2) >> 5);
    sub_47257C(a1 + 3, a2[3], a2[4], (a2[4] - a2[3]) >> 5);
    sub_47257C(a1 + 6, a2[6], a2[7], (a2[7] - a2[6]) >> 5);
    sub_47257C(a1 + 9, a2[9], a2[10], (a2[10] - a2[9]) >> 5);
    sub_47257C(a1 + 12, a2[12], a2[13], (a2[13] - a2[12]) >> 5);
    sub_47257C(a1 + 15, a2[15], a2[16], (a2[16] - a2[15]) >> 5);
  }
  return a1;
}

void *sub_47257C(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  uint8x8_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 5)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 59) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 59) {
LABEL_22:
    }
      sub_2E00();
    uint64_t v13 = 4 * v12;
    uint64_t result = operator new(32 * v12);
    uint8x8_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    int64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  int64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 5;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    uint64_t v19 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  size_t v18 = &__src[32 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    uint8x8_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  _DWORD *v15 = &v9[v14];
  return result;
}

void *sub_4726C4(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  uint8x8_t v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 3 * v12;
    uint64_t result = operator new(24 * v12);
    uint8x8_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14 - 4);
    }
    int64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  int64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 3) >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    size_t v18 = v14 - 4;
    uint64_t v19 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  unint64_t v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9 - 4);
    uint8x8_t v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v17;
  if (v14)
  {
    size_t v18 = v14 - 4;
    uint64_t v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  _DWORD *v15 = &v9[v14];
  return result;
}

void sub_472848(void **a1, uint64_t *a2, uint64_t *a3, size_t __sz)
{
  uint64_t v8 = (uint64_t)a1[2];
  uint8x8_t v9 = (char *)*a1;
  if (__sz > (v8 - (uint64_t)*a1) >> 6)
  {
    if (v9)
    {
      unint64_t v10 = (char *)a1[1];
      uint64_t v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          uint64_t v13 = *((void *)v10 - 4);
          if (v13)
          {
            uint64_t v14 = *((void *)v10 - 3);
            unint64_t v12 = (void *)*((void *)v10 - 4);
            if (v14 != v13)
            {
              uint64_t v15 = *((void *)v10 - 3);
              do
              {
                unint64_t v17 = *(void **)(v15 - 24);
                v15 -= 24;
                uint64_t v16 = v17;
                if (v17)
                {
                  *(void *)(v14 - 16) = v16;
                  operator delete(v16);
                }
                uint64_t v14 = v15;
              }
              while (v15 != v13);
              unint64_t v12 = (void *)*((void *)v10 - 4);
            }
            *((void *)v10 - 3) = v13;
            operator delete(v12);
          }
          v10 -= 64;
        }
        while (v10 != v9);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz >> 58) {
      goto LABEL_56;
    }
    uint64_t v29 = v8 >> 5;
    if (v8 >> 5 <= __sz) {
      uint64_t v29 = __sz;
    }
    BOOL v30 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0;
    unint64_t v31 = 0x3FFFFFFFFFFFFFFLL;
    if (!v30) {
      unint64_t v31 = v29;
    }
    if (v31 >> 58) {
LABEL_56:
    }
      sub_2E00();
    unint64_t v32 = v31 << 6;
    uint8x8_t v9 = (char *)operator new(v31 << 6);
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[v32];
    if (a2 != a3)
    {
      uint64_t v33 = 0;
      do
      {
        uint64_t v34 = &v9[v33 * 8];
        uint64_t v35 = &a2[v33];
        long long v36 = *(_OWORD *)&a2[v33 + 2];
        *(_OWORD *)uint64_t v34 = *(_OWORD *)&a2[v33];
        *((_OWORD *)v34 + 1) = v36;
        sub_4D4C4(&v9[v33 * 8 + 32], &a2[v33 + 4]);
        *((void *)v34 + 7) = a2[v33 + 7];
        v33 += 8;
      }
      while (v35 + 8 != a3);
      v9 += v33 * 8;
    }
LABEL_37:
    a1[1] = v9;
    return;
  }
  size_t v18 = a1[1];
  unint64_t v19 = (v18 - v9) >> 6;
  if (v19 >= __sz)
  {
    if (a2 != a3)
    {
      uint64_t v25 = (uint64_t)(v9 + 32);
      uint64_t v26 = a2 + 5;
      do
      {
        unint64_t v27 = v26 - 5;
        long long v28 = *(_OWORD *)(v26 - 3);
        *(_OWORD *)(v25 - 32) = *(_OWORD *)(v26 - 5);
        *(_OWORD *)(v25 - 16) = v28;
        if ((uint64_t *)(v25 - 32) != v26 - 5) {
          sub_31ACC4(v25, (char **)*(v26 - 1), *v26, 0xAAAAAAAAAAAAAAABLL * ((*v26 - *(v26 - 1)) >> 3));
        }
        *(void *)(v25 + 24) = v26[2];
        v9 += 64;
        v25 += 64;
        v26 += 8;
      }
      while (v27 + 8 != a3);
      size_t v18 = a1[1];
    }
    while (v18 != v9)
    {
      uint64_t v43 = *((void *)v18 - 4);
      if (v43)
      {
        uint64_t v44 = *((void *)v18 - 3);
        uint8x8_t v42 = (void *)*((void *)v18 - 4);
        if (v44 != v43)
        {
          uint64_t v45 = *((void *)v18 - 3);
          do
          {
            uint64_t v47 = *(void **)(v45 - 24);
            v45 -= 24;
            int v46 = v47;
            if (v47)
            {
              *(void *)(v44 - 16) = v46;
              operator delete(v46);
            }
            uint64_t v44 = v45;
          }
          while (v45 != v43);
          uint8x8_t v42 = (void *)*((void *)v18 - 4);
        }
        *((void *)v18 - 3) = v43;
        operator delete(v42);
      }
      v18 -= 64;
    }
    goto LABEL_37;
  }
  uint64_t v20 = &a2[8 * v19];
  if (v18 != v9)
  {
    uint64_t v21 = (uint64_t)(v9 + 32);
    long long v22 = a2 + 5;
    do
    {
      long long v23 = v22 - 5;
      long long v24 = *(_OWORD *)(v22 - 3);
      *(_OWORD *)(v21 - 32) = *(_OWORD *)(v22 - 5);
      *(_OWORD *)(v21 - 16) = v24;
      if ((uint64_t *)(v21 - 32) != v22 - 5) {
        sub_31ACC4(v21, (char **)*(v22 - 1), *v22, 0xAAAAAAAAAAAAAAABLL * ((*v22 - *(v22 - 1)) >> 3));
      }
      *(void *)(v21 + 24) = v22[2];
      v21 += 64;
      v22 += 8;
    }
    while (v23 + 8 != v20);
    uint8x8_t v9 = (char *)a1[1];
  }
  uint64_t v37 = v9;
  if (v20 != a3)
  {
    uint64_t v38 = 0;
    do
    {
      long long v39 = &v9[v38 * 8];
      unint64_t v40 = &v20[v38];
      long long v41 = *(_OWORD *)&v20[v38 + 2];
      *(_OWORD *)long long v39 = *(_OWORD *)&v20[v38];
      *((_OWORD *)v39 + 1) = v41;
      sub_4D4C4(&v9[v38 * 8 + 32], &v20[v38 + 4]);
      *((void *)v39 + 7) = v20[v38 + 7];
      v38 += 8;
    }
    while (v40 + 8 != a3);
    uint64_t v37 = &v9[v38 * 8];
  }
  a1[1] = v37;
}

void sub_472B88(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    sub_20A8950();
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void *sub_472BC8(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  uint8x8_t v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 2) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x1555555555555555) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 12 * v12;
    uint64_t result = operator new(12 * v12);
    uint8x8_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    uint64_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14 - 3);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  uint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 2) >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    size_t v18 = v14 - 3;
    unint64_t v19 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  unint64_t v17 = &__src[4 * ((v16 - v9) >> 2)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9 - 3);
    uint8x8_t v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v17;
  if (v14)
  {
    size_t v18 = v14 - 3;
    unint64_t v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  _DWORD *v15 = &v9[v14];
  return result;
}

void *sub_472D4C(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  uint8x8_t v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 4) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x555555555555555) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v11;
    if (v12 > 0x555555555555555) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 6 * v12;
    uint64_t result = operator new(48 * v12);
    uint8x8_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  uint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 4) >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    size_t v18 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  unint64_t v17 = &__src[16 * ((v16 - v9) >> 4)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    uint8x8_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    size_t v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  _DWORD *v15 = &v9[v14];
  return result;
}

char *sub_472EC8(const void **a1, uint64_t a2, void *a3, unint64_t a4, void *a5, unint64_t a6, uint64_t a7)
{
  unint64_t v7 = (char *)*a1;
  uint64_t v8 = (a2 - (uint64_t)*a1) / 40;
  uint8x8_t v9 = (char *)*a1 + 40 * v8;
  if (a7 >= 1)
  {
    unint64_t v11 = a4;
    uint64_t v16 = a1[2];
    uint64_t v14 = (uint64_t)(a1 + 2);
    uint64_t v15 = v16;
    unint64_t v17 = *(void *)(v14 - 8);
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v16[-v17] >> 3)) >= a7)
    {
      int64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - (void)v9) >> 3);
      if (v23 >= a7)
      {
        unint64_t v24 = a4 + a7;
        uint64_t v25 = *(void *)(v14 - 8);
      }
      else
      {
        unint64_t v24 = v23 + a4;
        uint64_t v25 = sub_4731A8(v14, a3, v23 + a4, a5, a6, *(void *)(v14 - 8));
        a1[1] = (const void *)v25;
        if ((uint64_t)(v17 - (void)v9) < 1) {
          return v9;
        }
      }
      uint64_t v26 = &v9[40 * a7];
      unint64_t v27 = v25 - 40 * a7;
      uint64_t v28 = v25;
      if (v27 < v17)
      {
        uint64_t v28 = v25;
        do
        {
          long long v29 = *(_OWORD *)v27;
          long long v30 = *(_OWORD *)(v27 + 16);
          *(void *)(v28 + 32) = *(void *)(v27 + 32);
          *(_OWORD *)uint64_t v28 = v29;
          *(_OWORD *)(v28 + 16) = v30;
          v27 += 40;
          v28 += 40;
        }
        while (v27 < v17);
      }
      a1[1] = (const void *)v28;
      if ((char *)v25 != v26) {
        memmove(&v9[40 * a7], v9, v25 - (void)v26);
      }
      sub_473300(a3, v11, a3, v24, (uint64_t)v9, v50);
    }
    else
    {
      unint64_t v18 = a7 - 0x3333333333333333 * ((uint64_t)(v17 - (void)v7) >> 3);
      if (v18 > 0x666666666666666) {
        sub_2E00();
      }
      unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((v15 - v7) >> 3);
      uint64_t v20 = 2 * v19;
      if (2 * v19 <= v18) {
        uint64_t v20 = v18;
      }
      if (v19 >= 0x333333333333333) {
        unint64_t v21 = 0x666666666666666;
      }
      else {
        unint64_t v21 = v20;
      }
      if (v21)
      {
        if (v21 > 0x666666666666666) {
          sub_188D718();
        }
        long long v22 = (char *)operator new(40 * v21);
      }
      else
      {
        long long v22 = 0;
      }
      uint64_t v31 = 0;
      unint64_t v32 = &v22[40 * v8];
      uint64_t v33 = &v22[40 * v21];
      uint64_t v34 = 40 * a7;
      uint64_t v35 = &v32[40 * a7];
      do
      {
        uint64_t v36 = sub_EAE1B8(a3, v11);
        uint64_t v37 = &v32[v31];
        long long v38 = *(_OWORD *)v36;
        long long v39 = *(_OWORD *)(v36 + 16);
        *((void *)v37 + 4) = *(void *)(v36 + 32);
        *(_OWORD *)uint64_t v37 = v38;
        *((_OWORD *)v37 + 1) = v39;
        ++v11;
        v31 += 40;
      }
      while (v34 != v31);
      unint64_t v40 = (char *)*a1;
      long long v41 = v32;
      if (*a1 != v9)
      {
        uint8x8_t v42 = v9;
        uint64_t v43 = v32;
        do
        {
          long long v44 = *(_OWORD *)(v42 - 40);
          long long v45 = *(_OWORD *)(v42 - 24);
          long long v41 = v43 - 40;
          *((void *)v43 - 1) = *((void *)v42 - 1);
          *(_OWORD *)(v43 - 24) = v45;
          *(_OWORD *)(v43 - 40) = v44;
          v42 -= 40;
          v43 -= 40;
        }
        while (v42 != v40);
      }
      int v46 = a1[1];
      uint64_t v47 = v46 - v9;
      if (v46 != v9) {
        memmove(v35, v9, v46 - v9);
      }
      uint64_t v48 = (void *)*a1;
      *a1 = v41;
      a1[1] = &v35[v47];
      a1[2] = v33;
      if (v48) {
        operator delete(v48);
      }
      return v32;
    }
  }
  return v9;
}

void sub_473180(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_473188(_Unwind_Exception *exception_object)
{
  if (!v1) {
    _Unwind_Resume(exception_object);
  }
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_4731A8(uint64_t a1, void *a2, unint64_t a3, void *a4, unint64_t a5, uint64_t a6)
{
  if (a2)
  {
    if (a4)
    {
      while (1)
      {
        unint64_t v14 = sub_EAE104(a2);
        unint64_t v15 = sub_EAE104(a4);
        if (a3 >= v14 || a5 >= v15)
        {
          if (a3 < v14 == a5 < v15) {
            return a6;
          }
        }
        else
        {
          uint64_t v16 = sub_EAE1B8(a2, a3);
          if (v16 == sub_EAE1B8(a4, a5)) {
            return a6;
          }
        }
        uint64_t v11 = sub_EAE1B8(a2, a3);
        uint64_t v12 = *(void *)(v11 + 32);
        long long v13 = *(_OWORD *)(v11 + 16);
        *(_OWORD *)a6 = *(_OWORD *)v11;
        *(_OWORD *)(a6 + 16) = v13;
        *(void *)(a6 + 32) = v12;
        ++a3;
        a6 += 40;
      }
    }
    while (a3 < sub_EAE104(a2))
    {
      uint64_t v17 = sub_EAE1B8(a2, a3);
      uint64_t v18 = *(void *)(v17 + 32);
      long long v19 = *(_OWORD *)(v17 + 16);
      *(_OWORD *)a6 = *(_OWORD *)v17;
      *(_OWORD *)(a6 + 16) = v19;
      *(void *)(a6 + 32) = v18;
      ++a3;
      a6 += 40;
    }
  }
  else if (a4 && a5 < sub_EAE104(a4))
  {
    do
    {
      uint64_t v20 = sub_EAE1B8(0, a3);
      uint64_t v21 = *(void *)(v20 + 32);
      long long v22 = *(_OWORD *)(v20 + 16);
      *(_OWORD *)a6 = *(_OWORD *)v20;
      *(_OWORD *)(a6 + 16) = v22;
      *(void *)(a6 + 32) = v21;
      ++a3;
      a6 += 40;
    }
    while (a5 < sub_EAE104(a4));
  }
  return a6;
}

void sub_473300(void *a1@<X1>, unint64_t a2@<X2>, void *a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v15 = sub_EAE104(a1);
        unint64_t v16 = sub_EAE104(a3);
        if (a2 >= v15 || a4 >= v16)
        {
          if (a2 < v15 == a4 < v16) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v17 = sub_EAE1B8(a1, a2);
          if (v17 == sub_EAE1B8(a3, a4)) {
            goto LABEL_16;
          }
        }
        uint64_t v12 = sub_EAE1B8(a1, a2);
        uint64_t v13 = *(void *)(v12 + 32);
        long long v14 = *(_OWORD *)(v12 + 16);
        *(_OWORD *)a5 = *(_OWORD *)v12;
        *(_OWORD *)(a5 + 16) = v14;
        *(void *)(a5 + 32) = v13;
        ++a2;
        a5 += 40;
      }
    }
    while (a2 < sub_EAE104(a1))
    {
      uint64_t v18 = sub_EAE1B8(a1, a2);
      uint64_t v19 = *(void *)(v18 + 32);
      long long v20 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)a5 = *(_OWORD *)v18;
      *(_OWORD *)(a5 + 16) = v20;
      *(void *)(a5 + 32) = v19;
      ++a2;
      a5 += 40;
    }
  }
  else if (a3 && a4 < sub_EAE104(a3))
  {
    do
    {
      uint64_t v21 = sub_EAE1B8(0, a2);
      uint64_t v22 = *(void *)(v21 + 32);
      long long v23 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)a5 = *(_OWORD *)v21;
      *(_OWORD *)(a5 + 16) = v23;
      *(void *)(a5 + 32) = v22;
      ++a2;
      a5 += 40;
    }
    while (a4 < sub_EAE104(a3));
  }
LABEL_16:
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a5;
}

char *sub_473468(char **a1, uint64_t a2, uint64_t *a3, long long *a4, uint64_t a5)
{
  unint64_t v5 = *a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 48;
  unint64_t v7 = &(*a1)[48 * v6];
  if (a5 < 1) {
    return v7;
  }
  uint8x8_t v9 = (long long *)a3;
  uint64_t v12 = a1[1];
  uint64_t v11 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 4)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v12 - v7) >> 4)) >= a5)
    {
      uint64_t v18 = (long long *)&a3[6 * a5];
      uint64_t v19 = a1[1];
    }
    else
    {
      uint64_t v18 = (long long *)&a3[2 * ((v12 - v7) >> 4)];
      uint64_t v19 = a1[1];
      if (v18 != a4)
      {
        long long v20 = (long long *)&a3[2 * ((v12 - v7) >> 4)];
        uint64_t v21 = a1[1];
        do
        {
          long long v22 = *v20;
          long long v23 = v20[2];
          *((_OWORD *)v21 + 1) = v20[1];
          *((_OWORD *)v21 + 2) = v23;
          *(_OWORD *)uint64_t v21 = v22;
          v21 += 48;
          v20 += 3;
          v19 += 48;
        }
        while (v20 != a4);
      }
      a1[1] = v19;
      if (v12 - v7 < 1) {
        return v7;
      }
    }
    unint64_t v24 = &v7[48 * a5];
    uint64_t v25 = &v19[-48 * a5];
    uint64_t v26 = v19;
    if (v25 < v12)
    {
      uint64_t v26 = v19;
      do
      {
        long long v27 = *(_OWORD *)v25;
        long long v28 = *((_OWORD *)v25 + 2);
        *((_OWORD *)v26 + 1) = *((_OWORD *)v25 + 1);
        *((_OWORD *)v26 + 2) = v28;
        *(_OWORD *)uint64_t v26 = v27;
        v26 += 48;
        v25 += 48;
      }
      while (v25 < v12);
    }
    a1[1] = v26;
    if (v19 != v24)
    {
      unint64_t v29 = 0;
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v24) >> 4);
      uint64_t v31 = &v5[48 * v6 + 48 * v30];
      uint64_t v32 = -48 * v30;
      do
      {
        uint64_t v33 = &v19[v29];
        uint64_t v34 = *(void *)&v31[v29 - 48];
        *((_DWORD *)v33 - 10) = *(_DWORD *)&v31[v29 - 40];
        *((void *)v33 - 6) = v34;
        *(v33 - 32) = v31[v29 - 32];
        *((void *)v33 - 3) = *(void *)&v31[v29 - 24];
        *((void *)v33 - 2) = *(void *)&v31[v29 - 16];
        *(v33 - 8) = v31[v29 - 8];
        v29 -= 48;
      }
      while (v32 != v29);
    }
    if (v18 != (long long *)a3)
    {
      uint64_t v35 = v7;
      do
      {
        uint64_t v36 = *(void *)v9;
        *((_DWORD *)v35 + 2) = *((_DWORD *)v9 + 2);
        *(void *)uint64_t v35 = v36;
        *((unsigned char *)v35 + 16) = *((unsigned char *)v9 + 16);
        *(_OWORD *)((char *)v35 + 24) = *(long long *)((char *)v9 + 24);
        *((unsigned char *)v35 + 40) = *((unsigned char *)v9 + 40);
        v9 += 3;
        v35 += 3;
      }
      while (v9 != v18);
    }
    return v7;
  }
  unint64_t v13 = a5 - 0x5555555555555555 * ((v12 - v5) >> 4);
  if (v13 > 0x555555555555555) {
    sub_2E00();
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 4);
  uint64_t v15 = 2 * v14;
  if (2 * v14 <= v13) {
    uint64_t v15 = v13;
  }
  if (v14 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v16 = 0x555555555555555;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16)
  {
    if (v16 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v17 = (char *)operator new(48 * v16);
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v37 = &v17[48 * v6];
  uint64_t v38 = 48 * a5;
  long long v39 = &v37[48 * a5];
  unint64_t v40 = v37;
  do
  {
    long long v41 = *v9;
    long long v42 = v9[2];
    *((_OWORD *)v40 + 1) = v9[1];
    *((_OWORD *)v40 + 2) = v42;
    *(_OWORD *)unint64_t v40 = v41;
    v40 += 48;
    v9 += 3;
    v38 -= 48;
  }
  while (v38);
  uint64_t v43 = *a1;
  long long v44 = v37;
  if (*a1 != v7)
  {
    long long v45 = v7;
    long long v44 = v37;
    do
    {
      long long v46 = *((_OWORD *)v45 - 3);
      long long v47 = *((_OWORD *)v45 - 1);
      *((_OWORD *)v44 - 2) = *((_OWORD *)v45 - 2);
      *((_OWORD *)v44 - 1) = v47;
      *((_OWORD *)v44 - 3) = v46;
      v44 -= 48;
      v45 -= 48;
    }
    while (v45 != v43);
    uint64_t v12 = a1[1];
  }
  for (unint64_t i = &v17[48 * v16]; v7 != v12; v7 += 48)
  {
    long long v49 = *(_OWORD *)v7;
    long long v50 = *((_OWORD *)v7 + 2);
    *((_OWORD *)v39 + 1) = *((_OWORD *)v7 + 1);
    *((_OWORD *)v39 + 2) = v50;
    *(_OWORD *)long long v39 = v49;
    v39 += 48;
  }
  uint64_t v51 = *a1;
  *a1 = v44;
  a1[1] = v39;
  a1[2] = i;
  if (v51) {
    operator delete(v51);
  }
  return v37;
}

unint64_t sub_4737A0(unsigned char **a1, int **a2, int **a3)
{
  unint64_t v6 = sub_2E4738(a2);
  unint64_t result = sub_2E48C4(a3);
  if (v6 != result)
  {
    unint64_t result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)v16);
      uint64_t v8 = sub_188FC78(v16, (uint64_t)"RouteLeg inconsistency found, intersection ids do not match: ", 61);
      int v9 = sub_2E4738(a2);
      unint64_t v10 = sub_51960(v8, v9);
      sub_188FC78(v10, (uint64_t)".", 1);
      std::ostream::operator<<();
      uint64_t v11 = sub_188FC78(v8, (uint64_t)" != ", 4);
      int v12 = sub_2E48C4(a3);
      unint64_t v13 = sub_51960(v11, v12);
      sub_188FC78(v13, (uint64_t)".", 1);
      std::ostream::operator<<();
      sub_188FC78(v11, (uint64_t)".", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v15 < 0) {
        operator delete(__p);
      }
      if (v17 < 0) {
        operator delete((void *)v16[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      unint64_t result = std::ios::~ios();
    }
    **a1 = 0;
  }
  return result;
}

void sub_4739C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_473A10(uint64_t result, void *a2)
{
  if (*((_DWORD *)a2 + 8)) {
    BOOL v2 = *a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2 || a2[1] == 0)
  {
    unint64_t v5 = (unsigned char **)result;
    unint64_t result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)v10);
      unint64_t v6 = sub_188FC78(v10, (uint64_t)"RouteLeg inconsistency found, segment is invalid: ", 50);
      unint64_t v7 = sub_2DD928(v6, a2[4]);
      sub_188FC78(v7, (uint64_t)".", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v9 < 0) {
        operator delete(__p);
      }
      if (v11 < 0) {
        operator delete((void *)v10[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      unint64_t result = std::ios::~ios();
    }
    **unint64_t v5 = 0;
  }
  return result;
}

void sub_473BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

char *sub_473C00(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = *(char **)a1;
  uint64_t v6 = (a2 - *(void *)a1) / 40;
  unint64_t v7 = (char *)(*(void *)a1 + 40 * v6);
  if (a5 < 1) {
    return v7;
  }
  char v9 = __src;
  int v12 = *(unsigned char **)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v11 - (uint64_t)v12) >> 3)) < a5)
  {
    unint64_t v13 = a5 - 0x3333333333333333 * ((v12 - v5) >> 3);
    if (v13 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - (uint64_t)v5) >> 3);
    uint64_t v15 = 2 * v14;
    if (2 * v14 <= v13) {
      uint64_t v15 = v13;
    }
    if (v14 >= 0x333333333333333) {
      unint64_t v16 = 0x666666666666666;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 > 0x666666666666666) {
        sub_188D718();
      }
      char v17 = (char *)operator new(40 * v16);
    }
    else
    {
      char v17 = 0;
    }
    uint64_t v26 = &v17[40 * v6];
    uint64_t v27 = 40 * a5;
    long long v28 = &v26[40 * a5];
    unint64_t v29 = v26;
    do
    {
      long long v30 = *(_OWORD *)v9;
      long long v31 = *((_OWORD *)v9 + 1);
      *((void *)v29 + 4) = *((void *)v9 + 4);
      *(_OWORD *)unint64_t v29 = v30;
      *((_OWORD *)v29 + 1) = v31;
      v29 += 40;
      v9 += 40;
      v27 -= 40;
    }
    while (v27);
    uint64_t v32 = 40 * v16;
    uint64_t v33 = *(char **)a1;
    uint64_t v34 = v26;
    if (*(char **)a1 != v7)
    {
      uint64_t v35 = v7;
      uint64_t v34 = v26;
      do
      {
        long long v36 = *(_OWORD *)(v35 - 40);
        long long v37 = *(_OWORD *)(v35 - 24);
        *((void *)v34 - 1) = *((void *)v35 - 1);
        *(_OWORD *)(v34 - 24) = v37;
        *(_OWORD *)(v34 - 40) = v36;
        v34 -= 40;
        v35 -= 40;
      }
      while (v35 != v33);
      int v12 = *(unsigned char **)(a1 + 8);
    }
    uint64_t v38 = &v17[v32];
    if (v12 != v7) {
      memmove(v28, v7, v12 - v7);
    }
    long long v39 = *(char **)a1;
    *(void *)a1 = v34;
    *(void *)(a1 + 8) = &v28[v12 - v7];
    *(void *)(a1 + 16) = v38;
    if (v39) {
      operator delete(v39);
    }
    return v26;
  }
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v12 - v7) >> 3)) >= a5)
  {
    uint64_t v18 = &__src[40 * a5];
    long long v20 = *(char **)(a1 + 8);
LABEL_18:
    uint64_t v21 = &v7[40 * a5];
    unint64_t v22 = (unint64_t)&v20[-40 * a5];
    long long v23 = v20;
    if (v22 < (unint64_t)v12)
    {
      long long v23 = v20;
      do
      {
        long long v24 = *(_OWORD *)v22;
        long long v25 = *(_OWORD *)(v22 + 16);
        *((void *)v23 + 4) = *(void *)(v22 + 32);
        *(_OWORD *)long long v23 = v24;
        *((_OWORD *)v23 + 1) = v25;
        v22 += 40;
        v23 += 40;
      }
      while (v22 < (unint64_t)v12);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&v7[40 * a5], v7, v20 - v21);
    }
    if (v18 != v9) {
      memmove(v7, v9, v18 - v9);
    }
    return v7;
  }
  uint64_t v18 = &__src[8 * ((v12 - v7) >> 3)];
  int64_t v19 = a4 - v18;
  if (a4 != v18) {
    memmove(*(void **)(a1 + 8), &__src[8 * ((v12 - v7) >> 3)], a4 - v18);
  }
  long long v20 = &v12[v19];
  *(void *)(a1 + 8) = &v12[v19];
  if (v12 - v7 >= 1) {
    goto LABEL_18;
  }
  return v7;
}

unint64_t sub_473E90(unsigned char **a1, int **a2, int **a3)
{
  unint64_t v6 = sub_2E4738(a2);
  unint64_t result = sub_2E48C4(a3);
  if (v6 != result)
  {
    unint64_t result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)v16);
      uint64_t v8 = sub_188FC78(v16, (uint64_t)"RouteLeg inconsistency found, intersection ids do not match: ", 61);
      int v9 = sub_2E4738(a2);
      unint64_t v10 = sub_51960(v8, v9);
      sub_188FC78(v10, (uint64_t)".", 1);
      std::ostream::operator<<();
      uint64_t v11 = sub_188FC78(v8, (uint64_t)" != ", 4);
      int v12 = sub_2E48C4(a3);
      unint64_t v13 = sub_51960(v11, v12);
      sub_188FC78(v13, (uint64_t)".", 1);
      std::ostream::operator<<();
      sub_188FC78(v11, (uint64_t)".", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v15 < 0) {
        operator delete(__p);
      }
      if (v17 < 0) {
        operator delete((void *)v16[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      unint64_t result = std::ios::~ios();
    }
    **a1 = 0;
  }
  return result;
}

void sub_4740B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_474100(uint64_t result, void *a2)
{
  if (*((_DWORD *)a2 + 8)) {
    BOOL v2 = *a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2 || a2[1] == 0)
  {
    unint64_t v5 = (unsigned char **)result;
    unint64_t result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)v10);
      unint64_t v6 = sub_188FC78(v10, (uint64_t)"RouteLeg inconsistency found, segment is invalid: ", 50);
      unint64_t v7 = sub_2DD928(v6, a2[4]);
      sub_188FC78(v7, (uint64_t)".", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v9 < 0) {
        operator delete(__p);
      }
      if (v11 < 0) {
        operator delete((void *)v10[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      unint64_t result = std::ios::~ios();
    }
    **unint64_t v5 = 0;
  }
  return result;
}

void sub_4742A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

char *sub_4742F0(void **a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  unint64_t v7 = (char *)*a1;
  uint64_t v8 = (a2 - (uint64_t)*a1) / 48;
  char v9 = (char *)*a1 + 48 * v8;
  if (a7 >= 1)
  {
    unint64_t v11 = a4;
    unint64_t v16 = a1[2];
    uint64_t v14 = (uint64_t)(a1 + 2);
    char v15 = v16;
    unint64_t v17 = *(void *)(v14 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v16[-v17] >> 4)) >= a7)
    {
      int64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)v9) >> 4);
      if (v23 >= a7)
      {
        unint64_t v24 = a4 + a7;
        long long v25 = *(char **)(v14 - 8);
      }
      else
      {
        unint64_t v24 = v23 + a4;
        long long v25 = (char *)sub_4745C8(v14, a3, v23 + a4, a5, a6, *(_OWORD **)(v14 - 8));
        a1[1] = v25;
        if ((uint64_t)(v17 - (void)v9) < 1) {
          return v9;
        }
      }
      uint64_t v26 = &v9[48 * a7];
      uint64_t v27 = &v25[-48 * a7];
      long long v28 = v25;
      if ((unint64_t)v27 < v17)
      {
        long long v28 = v25;
        do
        {
          long long v29 = *(_OWORD *)v27;
          long long v30 = *((_OWORD *)v27 + 2);
          *((_OWORD *)v28 + 1) = *((_OWORD *)v27 + 1);
          *((_OWORD *)v28 + 2) = v30;
          *(_OWORD *)long long v28 = v29;
          v28 += 48;
          v27 += 48;
        }
        while ((unint64_t)v27 < v17);
      }
      a1[1] = v28;
      if (v25 != v26) {
        memmove(&v9[48 * a7], v9, v25 - v26);
      }
      sub_474720(a3, v11, a3, v24, v9, v50);
    }
    else
    {
      unint64_t v18 = a7 - 0x5555555555555555 * ((uint64_t)(v17 - (void)v7) >> 4);
      if (v18 > 0x555555555555555) {
        sub_2E00();
      }
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v7) >> 4);
      uint64_t v20 = 2 * v19;
      if (2 * v19 <= v18) {
        uint64_t v20 = v18;
      }
      if (v19 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v21 = 0x555555555555555;
      }
      else {
        unint64_t v21 = v20;
      }
      if (v21)
      {
        if (v21 > 0x555555555555555) {
          sub_188D718();
        }
        unint64_t v22 = (char *)operator new(48 * v21);
      }
      else
      {
        unint64_t v22 = 0;
      }
      uint64_t v31 = 0;
      uint64_t v32 = &v22[48 * v8];
      uint64_t v33 = &v22[48 * v21];
      uint64_t v34 = 48 * a7;
      uint64_t v35 = &v32[48 * a7];
      do
      {
        long long v36 = (long long *)sub_EB2F38(a3, v11);
        long long v37 = &v32[v31];
        long long v38 = *v36;
        long long v39 = v36[2];
        *((_OWORD *)v37 + 1) = v36[1];
        *((_OWORD *)v37 + 2) = v39;
        *(_OWORD *)long long v37 = v38;
        ++v11;
        v31 += 48;
      }
      while (v34 != v31);
      unint64_t v40 = (char *)*a1;
      long long v41 = v32;
      if (*a1 != v9)
      {
        long long v42 = v9;
        uint64_t v43 = v32;
        do
        {
          long long v44 = *((_OWORD *)v42 - 3);
          long long v45 = *((_OWORD *)v42 - 1);
          long long v41 = v43 - 48;
          *((_OWORD *)v43 - 2) = *((_OWORD *)v42 - 2);
          *((_OWORD *)v43 - 1) = v45;
          *((_OWORD *)v43 - 3) = v44;
          v42 -= 48;
          v43 -= 48;
        }
        while (v42 != v40);
      }
      long long v46 = a1[1];
      uint64_t v47 = v46 - v9;
      if (v46 != v9) {
        memmove(v35, v9, v46 - v9);
      }
      uint64_t v48 = *a1;
      *a1 = v41;
      a1[1] = &v35[v47];
      a1[2] = v33;
      if (v48) {
        operator delete(v48);
      }
      return v32;
    }
  }
  return v9;
}

void sub_4745A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_4745A8(_Unwind_Exception *exception_object)
{
  if (!v1) {
    _Unwind_Resume(exception_object);
  }
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

_OWORD *sub_4745C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, _OWORD *a6)
{
  if (a2)
  {
    if (a4)
    {
      while (1)
      {
        unint64_t v14 = sub_EB2E84(a2);
        unint64_t v15 = sub_EB2E84(a4);
        if (a3 >= v14 || a5 >= v15)
        {
          if (a3 < v14 == a5 < v15) {
            return a6;
          }
        }
        else
        {
          uint64_t v16 = sub_EB2F38(a2, a3);
          if (v16 == sub_EB2F38(a4, a5)) {
            return a6;
          }
        }
        unint64_t v11 = (_OWORD *)sub_EB2F38(a2, a3);
        long long v13 = v11[1];
        long long v12 = v11[2];
        *a6 = *v11;
        a6[1] = v13;
        a6[2] = v12;
        ++a3;
        a6 += 3;
      }
    }
    while (a3 < sub_EB2E84(a2))
    {
      unint64_t v17 = (_OWORD *)sub_EB2F38(a2, a3);
      long long v19 = v17[1];
      long long v18 = v17[2];
      *a6 = *v17;
      a6[1] = v19;
      a6[2] = v18;
      ++a3;
      a6 += 3;
    }
  }
  else if (a4 && a5 < sub_EB2E84(a4))
  {
    do
    {
      uint64_t v20 = (_OWORD *)sub_EB2F38(0, a3);
      long long v22 = v20[1];
      long long v21 = v20[2];
      *a6 = *v20;
      a6[1] = v22;
      a6[2] = v21;
      ++a3;
      a6 += 3;
    }
    while (a5 < sub_EB2E84(a4));
  }
  return a6;
}

void sub_474720(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, _OWORD *a5@<X5>, uint64_t *a6@<X8>)
{
  if (a1)
  {
    if (a3)
    {
      while (1)
      {
        unint64_t v15 = sub_EB2E84(a1);
        unint64_t v16 = sub_EB2E84(a3);
        if (a2 >= v15 || a4 >= v16)
        {
          if (a2 < v15 == a4 < v16) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v17 = sub_EB2F38(a1, a2);
          if (v17 == sub_EB2F38(a3, a4)) {
            goto LABEL_16;
          }
        }
        long long v12 = (_OWORD *)sub_EB2F38(a1, a2);
        long long v14 = v12[1];
        long long v13 = v12[2];
        *a5 = *v12;
        a5[1] = v14;
        a5[2] = v13;
        ++a2;
        a5 += 3;
      }
    }
    while (a2 < sub_EB2E84(a1))
    {
      long long v18 = (_OWORD *)sub_EB2F38(a1, a2);
      long long v20 = v18[1];
      long long v19 = v18[2];
      *a5 = *v18;
      a5[1] = v20;
      a5[2] = v19;
      ++a2;
      a5 += 3;
    }
  }
  else if (a3 && a4 < sub_EB2E84(a3))
  {
    do
    {
      long long v21 = (_OWORD *)sub_EB2F38(0, a2);
      long long v23 = v21[1];
      long long v22 = v21[2];
      *a5 = *v21;
      a5[1] = v23;
      a5[2] = v22;
      ++a2;
      a5 += 3;
    }
    while (a4 < sub_EB2E84(a3));
  }
LABEL_16:
  *a6 = a1;
  a6[1] = a2;
  a6[2] = (uint64_t)a5;
}

unint64_t sub_474888(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (int **)(a2 + 8);
  unint64_t v6 = sub_2E4738((int **)(a2 + 8));
  unint64_t v7 = (int **)(a3 + 8);
  unint64_t result = sub_2E48C4(v7);
  if (v6 != result)
  {
    unint64_t result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)v17);
      char v9 = sub_188FC78(v17, (uint64_t)"RouteLeg inconsistency found, intersection ids do not match: ", 61);
      int v10 = sub_2E4738(v5);
      unint64_t v11 = sub_51960(v9, v10);
      sub_188FC78(v11, (uint64_t)".", 1);
      std::ostream::operator<<();
      long long v12 = sub_188FC78(v9, (uint64_t)" != ", 4);
      int v13 = sub_2E48C4(v7);
      long long v14 = sub_51960(v12, v13);
      sub_188FC78(v14, (uint64_t)".", 1);
      std::ostream::operator<<();
      sub_188FC78(v12, (uint64_t)".", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v16 < 0) {
        operator delete(__p);
      }
      if (v18 < 0) {
        operator delete((void *)v17[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      unint64_t result = std::ios::~ios();
    }
    **a1 = 0;
  }
  return result;
}

void sub_474AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_474AFC(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)a2) {
    BOOL v2 = *(_DWORD *)(a2 + 40) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2 || *(void *)(a2 + 8) == 0 || *(void *)(a2 + 16) == 0)
  {
    unint64_t v6 = (unsigned char **)result;
    unint64_t result = sub_723EC(1u);
    if (result)
    {
      sub_6BAC((uint64_t)v17);
      unint64_t v7 = sub_188FC78(v17, (uint64_t)"RouteLeg inconsistency found, segment is invalid: ", 50);
      unsigned int v8 = *(_DWORD *)(a2 + 4);
      char v9 = (void *)std::ostream::operator<<();
      sub_188FC78(v9, (uint64_t)".", 1);
      int v10 = (void *)std::ostream::operator<<();
      unint64_t v11 = sub_188FC78(v10, (uint64_t)" ", 1);
      long long v12 = sub_670B8(v11, (v8 & 0x20000000) == 0);
      int v13 = sub_188FC78(v12, (uint64_t)" ", 1);
      if ((v8 & 0x40000000) != 0) {
        int v14 = 2;
      }
      else {
        int v14 = v8 >> 31;
      }
      sub_670FC(v13, v14);
      sub_188FC78(v7, (uint64_t)".", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v16 < 0) {
        operator delete(__p);
      }
      if (v18 < 0) {
        operator delete((void *)v17[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      unint64_t result = std::ios::~ios();
    }
    **unint64_t v6 = 0;
  }
  return result;
}

void sub_474D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_474D54()
{
  return v0;
}

void sub_474D64()
{
  unk_25587B7 = 16641;
  word_25587A0 = 65;
  byte_25587CF = 1;
  byte_25587B9 = 0;
}

uint64_t sub_474D8C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v5;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(void *)(a1 + 32) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  LODWORD(v5) = *(_DWORD *)(a4 + 8);
  *(void *)(a1 + 40) = *(void *)a4;
  unint64_t v6 = (_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 48) = v5;
  if (sub_40A45C((int *)a1) && !sub_40A820(v6))
  {
    unint64_t v7 = *(int **)(a1 + 16);
    unsigned int v8 = *(int **)(a1 + 24);
    uint64_t v12 = sub_40A454(a1);
    uint64_t v13 = sub_40A674((uint64_t)&v12);
    int v14 = v9;
    *(void *)(a1 + 40) = sub_40A72C(v7, v8, &v13);
    *(_DWORD *)(a1 + 48) = v10;
  }
  return a1;
}

void sub_474E54(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_474E78(uint64_t a1, uint64_t *a2, char *a3, char *a4)
{
  uint64_t v5 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v5;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0x8000000080000000;
  *(_DWORD *)(a1 + 48) = 0x7FFFFFFF;
  sub_46C6C(a1 + 16, 0, a3, a4, 0xAAAAAAAAAAAAAAABLL * ((a4 - a3) >> 2));
  unint64_t v6 = *(int **)(a1 + 16);
  unint64_t v7 = *(int **)(a1 + 24);
  uint64_t v11 = sub_40A454(a1);
  uint64_t v12 = sub_40A674((uint64_t)&v11);
  int v13 = v8;
  *(void *)(a1 + 40) = sub_40A72C(v6, v7, &v12);
  *(_DWORD *)(a1 + 48) = v9;
  return a1;
}

void sub_474F30(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

double sub_474F54@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(void *)a1;
  int v8 = v5;
  sub_3FB100((uint64_t)&v9, &v7, a2);
  *(void *)&double result = sub_4752EC(a3, &v9, *(void *)(a1 + 16)).n128_u64[0];
  return result;
}

uint64_t sub_474FB0(uint64_t a1)
{
  return *(void *)a1;
}

double sub_474FC0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v8 = sub_475024(a1);
  int v9 = v6;
  sub_3FB100((uint64_t)&v10, &v8, a2);
  *(void *)&double result = sub_4752EC(a3, &v10, *(void *)(a1 + 24)).n128_u64[0];
  return result;
}

uint64_t sub_475024(uint64_t a1)
{
  uint64_t v2 = sub_40A454(a1);
  uint64_t v6 = v2;
  if (v2 == 0x7FFFFFFF || HIDWORD(v2) == 0x7FFFFFFF || (int)v2 > SHIDWORD(v2))
  {
    *(_DWORD *)uint64_t v7 = 0x7FFFFFFF;
    *(void *)&v7[4] = 0x7FFFFFFF7FFFFFFFLL;
  }
  else if (sub_4F44((unsigned int *)a1) == 0x7FFFFFFF {
         || (int v4 = sub_4F44((unsigned int *)a1), v5 = sub_40A8CC((int *)(a1 + 40), v4), v5 == 0x7FFFFFFF))
  }
  {
    *(void *)uint64_t v7 = sub_40A30C(&v6);
  }
  else
  {
    sub_40A2E4((uint64_t)v7, v5, &v6);
  }
  return *(void *)v7;
}

uint64_t sub_475100(uint64_t a1)
{
  return a1 + 40;
}

unint64_t sub_475108(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
}

uint64_t sub_475128(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)double result = v2;
  return result;
}

BOOL sub_47513C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = v2 + 12;
  do
  {
    int v4 = *(_DWORD *)(v3 - 4);
    BOOL result = v4 != 0x7FFFFFFF;
    BOOL v6 = v4 == 0x7FFFFFFF || v3 == v1;
    v3 += 12;
  }
  while (!v6);
  return result;
}

unsigned int *sub_475174(uint64_t *a1, int *a2, int *a3)
{
  int v6 = *((_DWORD *)a1 + 2);
  uint64_t v10 = *a1;
  int v11 = v6;
  uint64_t v12 = sub_40A454((uint64_t)&v10);
  uint64_t v13 = sub_40A674((uint64_t)&v12);
  int v14 = v7;
  uint64_t v15 = sub_40A72C(a2, a3, &v13);
  int v16 = v8;
  sub_46C6C((uint64_t)(a1 + 2), a1[3], (char *)a2, (char *)a3, 0xAAAAAAAAAAAAAAABLL * (a3 - a2));
  return sub_40A864((unsigned int *)a1 + 10, &v15);
}

uint64_t sub_475224(uint64_t a1)
{
  uint64_t v12 = sub_475024(a1);
  int i = v2;
  uint64_t result = sub_40A4AC((int *)&v12);
  if ((result & 1) == 0 && *(void *)(a1 + 16) != *(void *)(a1 + 24))
  {
    uint64_t v11 = sub_40A454(a1);
    int v10 = HIDWORD(v11) + 1000;
    unint64_t v4 = sub_40A680(&v10, &v11);
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(v5 - 12) = v4;
    *(_DWORD *)(v5 - 4) = v6;
    uint64_t result = sub_40A674((uint64_t)&v11);
    int v8 = *(signed int **)(a1 + 16);
    int v9 = *(signed int **)(a1 + 24);
    uint64_t v12 = result;
    for (int i = v7; v8 != v9; v8 += 3)
    {
      uint64_t result = sub_40AAA0((int *)&v12, v8);
      uint64_t v12 = result;
      int i = v7;
    }
    *(void *)(a1 + 40) = result;
    *(_DWORD *)(a1 + 48) = v7;
  }
  return result;
}

__n128 sub_4752EC(__n128 *a1, __n128 *a2, unint64_t a3)
{
  __n128 result = *a2;
  unint64_t v4 = a2[1].n128_u64[0];
  *a1 = *a2;
  a1[1].n128_u64[0] = v4;
  a1[1].n128_u64[1] = a3;
  return result;
}

uint64_t sub_475300(uint64_t a1)
{
  if (sub_40A45C((int *)a1))
  {
    uint64_t v5 = sub_40A918(*(int **)(a1 + 24), (unsigned int *)a1);
    int v6 = v2;
    uint64_t v3 = sub_52060(a1);
    sub_3FB100((uint64_t)&v7, &v5, v3);
    *(_OWORD *)a1 = v7;
    *(void *)(a1 + 16) = v8;
  }
  *(void *)(a1 + 24) += 12;
  return a1;
}

uint64_t sub_47537C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v3 = *(_OWORD *)(result + 16);
  *(_OWORD *)a3 = *(_OWORD *)result;
  *(_OWORD *)(a3 + 16) = v3;
  if (a2 >= 1)
  {
    uint64_t v5 = a2 & ~(a2 >> 63);
    do
    {
      __n128 result = sub_40A45C((int *)a3);
      if (result)
      {
        uint64_t v8 = sub_40A918(*(int **)(a3 + 24), (unsigned int *)a3);
        int v9 = v6;
        uint64_t v7 = sub_52060(a3);
        __n128 result = sub_3FB100((uint64_t)&v10, &v8, v7);
        *(_OWORD *)a3 = v10;
        *(void *)(a3 + 16) = v11;
      }
      *(void *)(a3 + 24) += 12;
      --v5;
    }
    while (v5);
  }
  return result;
}

BOOL sub_47541C(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 24) == *(void *)(a2 + 24);
}

BOOL sub_475430(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 24) != *(void *)(a2 + 24);
}

BOOL sub_475444(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24) >= *(void *)(a1 + 24);
}

void *sub_475458(void *result)
{
  result[1] = *result;
  result[4] = result[3];
  result[7] = result[6];
  result[10] = result[9];
  result[13] = result[12];
  result[16] = result[15];
  return result;
}

void *sub_47548C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  int v2 = &qword_25587E0;
  do
  {
    int v2 = (uint64_t *)*v2;
    if (!v2)
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      return result;
    }
  }
  while (*((unsigned __int8 *)v2 + 40) != result);
  if (*((char *)v2 + 39) < 0) {
    return sub_4200((unsigned char *)a2, (void *)v2[2], v2[3]);
  }
  long long v3 = *((_OWORD *)v2 + 1);
  *(void *)(a2 + 16) = v2[4];
  *(_OWORD *)a2 = v3;
  return result;
}

uint64_t *sub_4754DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      int v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            int v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          int v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  long long v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)long long v25 = 0;
  *((void *)v25 + 1) = v10;
  uint64_t v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  v25[40] = *(unsigned char *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        long long v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        long long v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        long long v29 = *(void **)(*(void *)a1 + 8 * v10);
        long long v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      long long v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      long long v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  long long v29 = *(void **)(*(void *)a1 + 8 * v3);
  long long v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  void *v30 = *v29;
  *long long v29 = v42[0];
LABEL_92:
  int v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_475924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_475938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_475950()
{
  uint64_t v0 = operator new(0x20uLL);
  long long v1 = xmmword_20B91A0;
  strcpy((char *)v0, "num_historical_observations");
  char v2 = 0;
  __int16 v4 = 277;
  strcpy(v3, "num_live_observations");
  HIBYTE(v5[2]) = 22;
  strcpy((char *)v5, "historical_load_factor");
  char v6 = 2;
  __int16 v8 = 784;
  strcpy(v7, "live_load_factor");
  *(_WORD *)((char *)&v9[2] + 7) = 1043;
  strcpy((char *)v9, "normalized_capacity");
  __n128 __p = operator new(0x20uLL);
  long long v11 = xmmword_20B8890;
  strcpy((char *)__p, "remaining_normalized_capacity");
  char v12 = 5;
  xmmword_25587D0 = 0u;
  *(_OWORD *)&qword_25587E0 = 0u;
  dword_25587F0 = 1065353216;
  sub_4754DC((uint64_t)&xmmword_25587D0, (uint64_t)&v0, (uint64_t)&v0);
  sub_4754DC((uint64_t)&xmmword_25587D0, (uint64_t)v3, (uint64_t)v3);
  sub_4754DC((uint64_t)&xmmword_25587D0, (uint64_t)v5, (uint64_t)v5);
  sub_4754DC((uint64_t)&xmmword_25587D0, (uint64_t)v7, (uint64_t)v7);
  sub_4754DC((uint64_t)&xmmword_25587D0, (uint64_t)v9, (uint64_t)v9);
  sub_4754DC((uint64_t)&xmmword_25587D0, (uint64_t)&__p, (uint64_t)&__p);
  if (SHIBYTE(v11) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v9[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if (((char)v8 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((SHIBYTE(v9[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v9[0]);
  if (((char)v8 & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v5[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)v7);
  if ((SHIBYTE(v5[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if (((char)v4 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v5[0]);
  if (((char)v4 & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v1) & 0x80000000) == 0) {
      return;
    }
LABEL_13:
    operator delete(v0);
    return;
  }
LABEL_12:
  operator delete(*(void **)v3);
  if (SHIBYTE(v1) < 0) {
    goto LABEL_13;
  }
}

void sub_475BD8(_Unwind_Exception *a1)
{
  char v2 = v1;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_475BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (qword_25587E0) {
    sub_20A89C0((void **)qword_25587E0);
  }
  uint64_t v51 = (void *)xmmword_25587D0;
  *(void *)&xmmword_25587D0 = 0;
  if (v51)
  {
    operator delete(v51);
    if ((a50 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a43 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
  }
  else if ((a50 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a43 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a36 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a38);
  if ((a36 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a29 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a31);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a15 & 0x80000000) == 0) {
LABEL_18:
    }
      _Unwind_Resume(exception_object);
LABEL_17:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_16:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_18;
  }
  goto LABEL_17;
}

void *sub_475CC0(void *a1, void *a2)
{
  uint64_t v11 = 0;
  char v12 = operator new(0x28uLL);
  long long v13 = xmmword_20B9260;
  strcpy((char *)v12, "RouteSegmentGeometryPatchAnalyzer");
  __n128 __p = 0;
  unint64_t v10 = 0;
  __int16 v4 = sub_374CDC((uint64_t)a2, (uint64_t)&v12, (uint64_t *)&__p);
  sub_476A2C((uint64_t)a1, v4);
  uint64_t v5 = (void **)__p;
  if (__p)
  {
    char v6 = v10;
    unint64_t v7 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      unint64_t v7 = __p;
    }
    unint64_t v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
  a1[1] = a2;
  a1[2] = sub_374D14(a2);
  a1[3] = sub_3750CC(a2);
  a1[4] = sub_376B90(a2);
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void sub_475DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_475DF4@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (!*(unsigned char *)result) {
    return result;
  }
  uint64_t v5 = result;
  __n128 result = (uint64_t *)sub_37B3B0(result[1]);
  if (result <= 0xE && *(unsigned char *)v5 != 3) {
    return result;
  }
  unsigned int v44 = result;
  uint64_t v55 = 0;
  char v6 = (uint64_t *)sub_3C80F8(a2);
LABEL_6:
  uint64_t v54 = v6;
  __n128 result = (uint64_t *)sub_3FA3A8(a2);
  if (v54 != result)
  {
    uint64_t v7 = sub_3242C0(v5[4], *v54);
    if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_5;
    }
    sub_29B898((void *)v5[2], v7, 0, (uint64_t)&v52);
    if (v52 == v53
      || (__int16 v8 = v54, v8 + 7 != (uint64_t *)sub_3FA3A8(a2))
      && (*(void *)&long long v45 = sub_3242C0(v5[4], v54[7]), sub_4786C4((uint64_t *)v52, v53, (uint64_t)v5, (uint64_t *)&v45)))
    {
LABEL_64:
      v55 += v54[5];
      goto LABEL_65;
    }
    char v9 = 0;
    for (int i = v54; ; int i = v51 + 7)
    {
      uint64_t v51 = i;
      uint64_t v11 = (uint64_t *)sub_3FA3A8(a2);
      if (v51 == v11)
      {
LABEL_63:
        if ((v9 & 1) == 0) {
          goto LABEL_64;
        }
LABEL_65:
        if (v52)
        {
          unint64_t v53 = (uint64_t *)v52;
          operator delete(v52);
        }
LABEL_5:
        char v6 = v54 + 7;
        goto LABEL_6;
      }
      uint64_t v12 = *v51;
      if ((*v51 & 0x8000000000000000) == 0)
      {
        uint64_t v13 = v5[4];
        int v14 = sub_2E5E08(v13 + 16, v12, 1);
        if (v14)
        {
          char v15 = &v14[-*(int *)v14];
          if (*(unsigned __int16 *)v15 >= 5u)
          {
            if (*((_WORD *)v15 + 2))
            {
              uint64_t v16 = (unsigned int *)&v14[*((unsigned __int16 *)v15 + 2)
                                       + *(unsigned int *)&v14[*((unsigned __int16 *)v15 + 2)]];
              if (*v16 > (HIDWORD(v12) & 0x3FFFFFFFu)) {
                break;
              }
            }
          }
        }
      }
LABEL_12:
      ;
    }
    unint64_t v17 = (int *)((char *)v16
                + 4 * HIDWORD(v12)
                + *(unsigned int *)((char *)v16 + (4 * HIDWORD(v12)) + 4)
                + 4);
    uint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
    unsigned int v19 = *v18;
    if (v19 >= 0xB)
    {
      if (!v18[5] || (int v20 = *(unsigned __int8 *)(v13 + 3889), v20 == 254))
      {
LABEL_27:
        uint64_t v25 = v18[3];
        if (v25)
        {
          uint64_t v26 = *(void *)((char *)v17 + v25);
          if ((v12 & 0x4000000000000000) != 0) {
            uint64_t v27 = v26;
          }
          else {
            uint64_t v27 = -v26;
          }
          if (v27 == 0x7FFFFFFFFFFFFFFFLL) {
            goto LABEL_12;
          }
LABEL_34:
          sub_29B898((void *)v5[2], v27, 1, (uint64_t)v50);
          *(void *)&long long v45 = v5;
          *((void *)&v45 + 1) = a2;
          *(void *)&long long v46 = &v54;
          *((void *)&v46 + 1) = &v51;
          float v28 = (uint64_t *)sub_476394((uint64_t *)&v52, (uint64_t *)v50, (uint64_t *)&v45);
          if (v53 == v28) {
            goto LABEL_55;
          }
          sub_476528((uint64_t)v5, a2, *v28, *v29, v54, v51, &v55, (uint64_t)&v45);
          if (*((void *)&v45 + 1) < (unint64_t)v45 || (void)v46 == 0x7FFFFFFFFFFFFFFFLL) {
            goto LABEL_45;
          }
          char v30 = 0;
          if (*((void *)&v46 + 1) == 0x7FFFFFFFFFFFFFFFLL || (uint64_t)v46 >= *((uint64_t *)&v46 + 1))
          {
            int v35 = 0;
          }
          else
          {
            BOOL v31 = __p[0];
            if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3) != *((void *)&v45 + 1)
                                                                                  - (void)v45
                                                                                  + 1)
            {
LABEL_45:
              char v30 = 0;
              int v35 = 0;
              goto LABEL_46;
            }
            if (__p[0] != __p[1])
            {
              while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31[1] - *v31) >> 2) > 1)
              {
                v31 += 3;
                if (v31 == __p[1]) {
                  goto LABEL_43;
                }
              }
              goto LABEL_45;
            }
LABEL_43:
            unint64_t v32 = *(void *)(a3 + 8);
            if (v32 >= *(void *)(a3 + 16))
            {
              uint64_t v34 = sub_4788F4((void **)a3, (uint64_t)&v45);
            }
            else
            {
              long long v33 = v46;
              *(_OWORD *)unint64_t v32 = v45;
              *(_OWORD *)(v32 + 16) = v33;
              *(void *)(v32 + 40) = 0;
              *(void *)(v32 + 48) = 0;
              *(void *)(v32 + 32) = 0;
              *(_OWORD *)(v32 + 32) = *(_OWORD *)__p;
              *(void *)(v32 + 48) = v48;
              __p[0] = 0;
              __p[1] = 0;
              uint64_t v48 = 0;
              *(void *)(v32 + 56) = v49;
              uint64_t v34 = (char *)(v32 + 64);
            }
            *(void *)(a3 + 8) = v34;
            uint64_t v54 = v51;
            int v35 = 5;
            char v30 = 1;
            char v9 = 1;
          }
LABEL_46:
          unint64_t v36 = (char *)__p[0];
          if (__p[0])
          {
            uint8x8_t v37 = __p[1];
            uint64_t v38 = __p[0];
            if (__p[1] != __p[0])
            {
              unint64_t v39 = (char *)__p[1];
              do
              {
                long long v41 = (void *)*((void *)v39 - 3);
                v39 -= 24;
                unint64_t v40 = v41;
                if (v41)
                {
                  *(v37 - 2) = v40;
                  operator delete(v40);
                }
                uint8x8_t v37 = v39;
              }
              while (v39 != v36);
              uint64_t v38 = __p[0];
            }
            __p[1] = v36;
            operator delete(v38);
          }
          if (v30)
          {
LABEL_56:
            if (v50[0])
            {
              v50[1] = v50[0];
              operator delete(v50[0]);
            }
            if (v35) {
              goto LABEL_63;
            }
            goto LABEL_12;
          }
LABEL_55:
          int v35 = 0;
          goto LABEL_56;
        }
LABEL_33:
        uint64_t v27 = 0;
        goto LABEL_34;
      }
      uint64_t v21 = (int *)((char *)v17 + v18[5] + *(unsigned int *)((char *)v17 + v18[5]));
      unsigned int v24 = *v21;
      uint64_t v22 = (unsigned __int8 *)(v21 + 1);
      uint64_t v23 = v24;
      if (!v24) {
        goto LABEL_12;
      }
      while (v20 != *v22)
      {
        ++v22;
        if (!--v23) {
          goto LABEL_12;
        }
      }
    }
    if (v19 < 7) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  int v42 = *(unsigned __int8 *)v5;
  if (v42 != 3 && (v44 < 0x11 || v42 == 1))
  {
    uint64_t v43 = sub_478BE4(*(void *)a3, *(void *)(a3 + 8));
    return (uint64_t *)sub_478A8C(a3, v43, *(void *)(a3 + 8));
  }
  return result;
}

void sub_476298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  sub_4769B4((uint64_t)&a11);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v26 = a23;
    if (!a23)
    {
LABEL_3:
      sub_46B07C(v24);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v26 = a23;
    if (!a23) {
      goto LABEL_3;
    }
  }
  a24 = (uint64_t)v26;
  operator delete(v26);
  sub_46B07C(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_476394(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  uint64_t result = a1[1];
  if (v6 != result)
  {
    uint64_t v7 = a2[1];
    if (*a2 == v7) {
      return result;
    }
    while (*a2 == v7)
    {
LABEL_5:
      v6 += 8;
      if (v6 == result) {
        return result;
      }
    }
    uint64_t v9 = *a2;
    while (1)
    {
      unint64_t v10 = *(void *)(*(void *)v6 + 16);
      if (v10 == *(void *)(*(void *)v9 + 16))
      {
        uint64_t v11 = *a3;
        uint64_t v12 = *(void *)a3[2];
        uint64_t v13 = *(void *)a3[3];
        int v14 = sub_29BA30(*(uint64_t **)(*a3 + 16), v10);
        uint64_t v15 = *((unsigned __int8 *)v14 + 23);
        if ((v15 & 0x80u) != 0) {
          uint64_t v15 = v14[1];
        }
        if (v15)
        {
          uint64_t v16 = (uint64_t)v14;
          if (((v14[10] - v14[9]) & 0x3FFFFFFFCLL) != 4
            && ((v14[25] - v14[24]) & 0x3FFFFFFFCLL) != 4
            && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14[34] - v14[33]) >> 2) >= 2)
          {
            if (!*(unsigned char *)(v11 + 1)) {
              break;
            }
            if (v14[36] == v14[37]) {
              break;
            }
            sub_46B058();
            uint64_t v18 = v17;
            unint64_t v20 = v19 + *(void *)(v12 + 24);
            sub_46B058();
            if (sub_478F24(v18, v20, v22, v21 + *(void *)(v13 + 32), v16)) {
              break;
            }
          }
        }
      }
      v9 += 8;
      if (v9 == a2[1])
      {
        uint64_t result = a1[1];
        uint64_t v7 = v9;
        goto LABEL_5;
      }
    }
  }
  return v6;
}

void sub_476528(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X6>, uint64_t a8@<X8>)
{
  int v14 = sub_29BA30(*(uint64_t **)(a1 + 16), *(void *)(a3 + 16));
  *(void *)a8 = 0;
  *(void *)(a8 + 8) = 0;
  *(int64x2_t *)(a8 + 16) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  uint64_t v15 = *(unsigned int *)(a3 + 24);
  sub_478614((uint64_t)(v14 + 3), *(_DWORD *)(a3 + 24));
  uint64_t v16 = v14[9];
  int v17 = *(_DWORD *)(v16 + 4 * v15);
  int v18 = *(_DWORD *)(v16 + 4 * (v15 + 1));
  uint64_t v19 = *(unsigned int *)(a4 + 28);
  sub_478614((uint64_t)(v14 + 18), *(_DWORD *)(a4 + 28));
  unsigned int v20 = v19 + 1;
  uint64_t v21 = v14[24];
  int v22 = *(_DWORD *)(v21 + 4 * v19);
  int v23 = *(_DWORD *)(v21 + 4 * v20);
  uint64_t v24 = 4;
  if (v18 == v17) {
    uint64_t v25 = 3;
  }
  else {
    uint64_t v25 = 4;
  }
  unint64_t v26 = a5[v25];
  *(void *)a8 = v26;
  if (v23 != v22) {
    uint64_t v24 = 3;
  }
  unint64_t v27 = a6[v24];
  if (v27 <= 1) {
    unint64_t v27 = 1;
  }
  unint64_t v28 = v27 - 1;
  *(void *)(a8 + 8) = v28;
  if (v26 <= v28)
  {
    int v56 = v23;
    long long v62 = 0;
    int v63 = 0;
    uint64_t v64 = 0;
    if ((sub_477024((void *)a1, v14, 0, a5, *(_DWORD *)(a3 + 24), (uint64_t *)&v62) & 1) == 0)
    {
LABEL_56:
      if (v62)
      {
        int v63 = (char *)v62;
        operator delete(v62);
      }
      return;
    }
    int v53 = v22;
    long long v29 = v63;
    uint64_t v54 = a7;
    long long v52 = v62;
    if (v62 == v63)
    {
      int v55 = 0x7FFFFFFF;
      BOOL v31 = (uint64_t *)v14[33];
      char v30 = (uint64_t *)v14[34];
      for (__p = &v62; v31 != v30; BOOL v31 = (uint64_t *)((char *)v31 + 12))
LABEL_12:
        sub_3BDEE8((char ***)&__p, v31);
    }
    else
    {
      int v55 = *((_DWORD *)v63 - 1);
      BOOL v31 = (uint64_t *)v14[33];
      char v30 = (uint64_t *)v14[34];
      __n128 __p = &v62;
      if (v31 != v30) {
        goto LABEL_12;
      }
    }
    __n128 __p = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    if (sub_477024((void *)a1, v14, 1, a6, *(_DWORD *)(a4 + 28), (uint64_t *)&__p))
    {
      long long v33 = (uint64_t *)__p;
      unint64_t v32 = v60;
      int v34 = v55;
      if (__p != v60) {
        int v34 = *((_DWORD *)v60 - 1);
      }
      if (v55 == 0x7FFFFFFF || v34 == 0x7FFFFFFF)
      {
        int v39 = v53;
      }
      else
      {
        unint64_t v35 = (v29 - v52) / 12;
        uint64_t v36 = (v63 - (unsigned char *)v62) >> 2;
        unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * v36;
        if (v35 <= 0xAAAAAAAAAAAAAAABLL * v36) {
          uint64_t v38 = 0xAAAAAAAAAAAAAAABLL * v36;
        }
        else {
          uint64_t v38 = (v29 - v52) / 12;
        }
        int v39 = v53;
        if (v35 < 0xAAAAAAAAAAAAAAABLL * v36)
        {
          unint64_t v40 = 0;
          double v41 = (double)(v37 + ~v35);
          double v42 = (double)v34;
          unint64_t v43 = v38 - v35;
          uint64_t v44 = 12 * v35 + 8;
          while (1)
          {
            double v46 = (double)v40 / v41;
            double v47 = (1.0 - v46) * (double)v55;
            if (v47 >= 0.0)
            {
              if (v47 >= 4.50359963e15) {
                goto LABEL_33;
              }
              uint64_t v48 = (uint64_t)(v47 + v47) + 1;
            }
            else
            {
              if (v47 <= -4.50359963e15) {
                goto LABEL_33;
              }
              uint64_t v48 = (uint64_t)(v47 + v47);
              if (v48 >= 1) {
                --v48;
              }
            }
            double v47 = (double)(v48 >> 1);
LABEL_33:
            double v45 = v46 * v42;
            if (v45 >= 0.0)
            {
              if (v45 >= 4.50359963e15) {
                goto LABEL_24;
              }
              uint64_t v49 = (uint64_t)(v45 + v45) + 1;
            }
            else
            {
              if (v45 <= -4.50359963e15) {
                goto LABEL_24;
              }
              uint64_t v49 = (uint64_t)(v45 + v45);
              if (v49 >= 1) {
                --v49;
              }
            }
            double v45 = (double)(v49 >> 1);
LABEL_24:
            *(_DWORD *)((char *)v62 + v44) = (int)v45 + (int)v47;
            ++v40;
            v44 += 12;
            if (v43 == v40)
            {
              long long v33 = (uint64_t *)__p;
              unint64_t v32 = v60;
              break;
            }
          }
        }
      }
      int v65 = (char **)&v62;
      while (v32 != v33)
      {
        unint64_t v32 = (uint64_t *)((char *)v32 - 12);
        sub_3BDEE8(&v65, v32);
      }
      if (v18 == v17) {
        uint64_t v50 = 0;
      }
      else {
        uint64_t v50 = a5[5];
      }
      *v54 += v50;
      sub_47745C(a1, a2, (uint64_t *)&v62, (void *)a8, v54);
      if (v56 == v39) {
        uint64_t v51 = 0;
      }
      else {
        uint64_t v51 = a6[5];
      }
      *v54 += v51;
      *(void *)(a8 + 56) = v14;
    }
    if (__p)
    {
      uint64_t v60 = (uint64_t *)__p;
      operator delete(__p);
    }
    goto LABEL_56;
  }
}

void sub_476924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p)
  {
    operator delete(__p);
    int v22 = a19;
    if (!a19)
    {
LABEL_3:
      sub_4769B4(v20);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int v22 = a19;
    if (!a19) {
      goto LABEL_3;
    }
  }
  operator delete(v22);
  sub_4769B4(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_4769B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    __int16 v4 = *(void **)(a1 + 32);
    if (v3 != v2)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      __int16 v4 = *(void **)(a1 + 32);
    }
    *(void *)(a1 + 40) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_476A2C(uint64_t a1, void *a2)
{
  *(_WORD *)a1 = 0;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "enabled_market");
  uint64_t v4 = sub_561B0(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  char v6 = v5;
  uint64_t v7 = *(void *)(v4 + 8);
  if ((v5 & 0x80u) == 0) {
    uint64_t v8 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v4 + 8);
  }
  if (v8 == 4)
  {
    if ((v5 & 0x80u) == 0) {
      uint64_t v9 = (char *)v4;
    }
    else {
      uint64_t v9 = *(char **)v4;
    }
    __darwin_ct_rune_t v10 = *v9;
    __darwin_ct_rune_t v11 = __toupper(110);
    if (v11 == __toupper(v10))
    {
      __darwin_ct_rune_t v12 = v9[1];
      __darwin_ct_rune_t v13 = __toupper(111);
      if (v13 == __toupper(v12))
      {
        __darwin_ct_rune_t v14 = v9[2];
        __darwin_ct_rune_t v15 = __toupper(110);
        if (v15 == __toupper(v14))
        {
          __darwin_ct_rune_t v16 = v9[3];
          __darwin_ct_rune_t v17 = __toupper(101);
          if (v17 == __toupper(v16))
          {
            *(unsigned char *)a1 = 0;
            goto LABEL_68;
          }
        }
      }
    }
    uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v7 = *(void *)(v4 + 8);
    char v6 = *(unsigned char *)(v4 + 23);
  }
  if (v6 >= 0) {
    uint64_t v18 = v5;
  }
  else {
    uint64_t v18 = v7;
  }
  if (v18 == 3)
  {
    if (v6 >= 0) {
      uint64_t v19 = (char *)v4;
    }
    else {
      uint64_t v19 = *(char **)v4;
    }
    __darwin_ct_rune_t v20 = *v19;
    __darwin_ct_rune_t v21 = __toupper(115);
    if (v21 == __toupper(v20))
    {
      __darwin_ct_rune_t v22 = v19[1];
      __darwin_ct_rune_t v23 = __toupper(112);
      if (v23 == __toupper(v22))
      {
        __darwin_ct_rune_t v24 = v19[2];
        __darwin_ct_rune_t v25 = __toupper(114);
        if (v25 == __toupper(v24))
        {
          *(unsigned char *)a1 = 1;
          goto LABEL_68;
        }
      }
    }
    uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v7 = *(void *)(v4 + 8);
    char v6 = *(unsigned char *)(v4 + 23);
  }
  if (v6 >= 0) {
    uint64_t v26 = v5;
  }
  else {
    uint64_t v26 = v7;
  }
  if (v26 == 9)
  {
    if (v6 >= 0) {
      unint64_t v27 = (char *)v4;
    }
    else {
      unint64_t v27 = *(char **)v4;
    }
    __darwin_ct_rune_t v28 = *v27;
    __darwin_ct_rune_t v29 = __toupper(115);
    if (v29 == __toupper(v28))
    {
      __darwin_ct_rune_t v30 = v27[1];
      __darwin_ct_rune_t v31 = __toupper(117);
      if (v31 == __toupper(v30))
      {
        __darwin_ct_rune_t v32 = v27[2];
        __darwin_ct_rune_t v33 = __toupper(112);
        if (v33 == __toupper(v32))
        {
          __darwin_ct_rune_t v34 = v27[3];
          __darwin_ct_rune_t v35 = __toupper(112);
          if (v35 == __toupper(v34))
          {
            __darwin_ct_rune_t v36 = v27[4];
            __darwin_ct_rune_t v37 = __toupper(111);
            if (v37 == __toupper(v36))
            {
              __darwin_ct_rune_t v38 = v27[5];
              __darwin_ct_rune_t v39 = __toupper(114);
              if (v39 == __toupper(v38))
              {
                __darwin_ct_rune_t v40 = v27[6];
                __darwin_ct_rune_t v41 = __toupper(116);
                if (v41 == __toupper(v40))
                {
                  __darwin_ct_rune_t v42 = v27[7];
                  __darwin_ct_rune_t v43 = __toupper(101);
                  if (v43 == __toupper(v42))
                  {
                    __darwin_ct_rune_t v44 = v27[8];
                    __darwin_ct_rune_t v45 = __toupper(100);
                    if (v45 == __toupper(v44))
                    {
                      *(unsigned char *)a1 = 2;
                      goto LABEL_68;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v7 = *(void *)(v4 + 8);
    char v6 = *(unsigned char *)(v4 + 23);
  }
  if (v6 < 0) {
    uint64_t v5 = v7;
  }
  if (v5 == 3
    && (v6 >= 0 ? (double v46 = (char *)v4) : (double v46 = *(char **)v4),
        (v47 = *v46, __darwin_ct_rune_t v48 = __toupper(97), v48 == __toupper(v47))
     && (v49 = v46[1], __darwin_ct_rune_t v50 = __toupper(108), v50 == __toupper(v49))
     && (__darwin_ct_rune_t v51 = v46[2], v52 = __toupper(108), v52 == __toupper(v51))))
  {
    *(unsigned char *)a1 = 3;
  }
  else if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)__p);
    int v53 = sub_188FC78(__p, (uint64_t)"Invalid enabled_market value (", 30);
    int v54 = *(char *)(v4 + 23);
    if (v54 >= 0) {
      uint64_t v55 = v4;
    }
    else {
      uint64_t v55 = *(void *)v4;
    }
    if (v54 >= 0) {
      uint64_t v56 = *(unsigned __int8 *)(v4 + 23);
    }
    else {
      uint64_t v56 = *(void *)(v4 + 8);
    }
    uint64_t v57 = sub_188FC78(v53, v55, v56);
    sub_188FC78(v57, (uint64_t)")", 1);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v59, 3u);
    if (v60 < 0) {
      operator delete(v59);
    }
    if (v62 < 0) {
      operator delete(__p[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
LABEL_68:
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "require_original_route_closure_match");
  *(unsigned char *)(a1 + 1) = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_476FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_477024(void *a1, void *a2, int a3, void *a4, unsigned int a5, uint64_t *a6)
{
  unsigned int v7 = a5;
  unsigned __int8 v54 = a3 ^ 1;
  if (a3) {
    __darwin_ct_rune_t v11 = a2 + 18;
  }
  else {
    __darwin_ct_rune_t v11 = a2 + 3;
  }
  *(void *)&long long v52 = a1;
  *((void *)&v52 + 1) = &v54;
  int v53 = a6;
  uint64_t v12 = a5;
  sub_478614((uint64_t)v11, a5);
  if (*(_DWORD *)(v11[6] + 4 * (v7 + 1)) != *(_DWORD *)(v11[6] + 4 * v7))
  {
    sub_478614((uint64_t)v11, v12);
    unsigned int v7 = *(_DWORD *)(v11[9] + 4 * *(unsigned int *)(v11[6] + 4 * v12));
  }
  uint64_t v13 = v7;
  sub_478614((uint64_t)v11, v7);
  if (*(_DWORD *)(v11[6] + 4 * (v7 + 1)) != *(_DWORD *)(v11[6] + 4 * v7))
  {
    do
    {
      __darwin_ct_rune_t v23 = (uint64_t *)a1[4];
      uint64_t v24 = *(void *)sub_477E78(v11, v13);
      if (v24 == 0x7FFFFFFFFFFFFFFFLL) {
        return 0;
      }
      uint64_t v25 = v24 >= 0 ? v24 : -v24;
      unint64_t v26 = sub_2ABB48(*v23, 22, v25);
      if (!HIDWORD(v26) || v27 != 0) {
        return 0;
      }
      *((void *)&v29 + 1) = v26 & 0x3FFFFFFF | ((v24 > 0) << 30);
      *(void *)&long long v29 = v26;
      sub_318C48(a1[4], v29 >> 32, a1 + 5);
      if (v54)
      {
        __darwin_ct_rune_t v30 = (uint64_t *)a1[5];
        __darwin_ct_rune_t v31 = (uint64_t *)a1[6];
        long long v59 = v52;
        char v60 = v53;
        while (v30 != v31)
        {
          uint64_t v32 = *v30++;
          sub_47919C((uint64_t)&v59, v32);
        }
      }
      else
      {
        uint64_t v34 = a1[5];
        uint64_t v33 = a1[6];
        long long v59 = v52;
        char v60 = v53;
        while (v33 != v34)
        {
          uint64_t v35 = *(void *)(v33 - 8);
          v33 -= 8;
          sub_47919C((uint64_t)&v59, v35);
        }
      }
      sub_478614((uint64_t)v11, v13);
      uint64_t v21 = v11[9];
      uint64_t v22 = *(unsigned int *)(v11[6] + 4 * v13);
      uint64_t v13 = *(unsigned int *)(v21 + 4 * v22);
      sub_478614((uint64_t)v11, *(_DWORD *)(v21 + 4 * v22));
    }
    while (*(_DWORD *)(v11[6] + 4 * (v13 + 1)) != *(_DWORD *)(v11[6] + 4 * v13));
  }
  __darwin_ct_rune_t v14 = (uint64_t *)a1[4];
  uint64_t v15 = *(void *)sub_477E78(v11, v13);
  if (v15 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0;
  }
  uint64_t v16 = v15 >= 0 ? v15 : -v15;
  unint64_t v17 = sub_2ABB48(*v14, 22, v16);
  if (!HIDWORD(v17) || v18 != 0) {
    return 0;
  }
  *((void *)&v36 + 1) = v17 & 0x3FFFFFFF | ((v15 > 0) << 30);
  *(void *)&long long v36 = v17;
  sub_318C48(a1[4], v36 >> 32, a1 + 5);
  __darwin_ct_rune_t v37 = (uint64_t *)a1[5];
  if ((v36 & 0xFFFFFFFF00000000 | (4 * (unint64_t)(v36 & 0x3FFFFFFF)) | (2 * (v15 > 0))) == ((*a4 >> 30) & 0xFFFFFFFCLL | (*a4 << 32) | (*a4 >> 63) | (*a4 >> 61) & 2))
  {
    __darwin_ct_rune_t v38 = &v37[a4[2]];
    if (v38 != (uint64_t *)a1[6]) {
      a1[6] = v38;
    }
    uint64_t v39 = a4[1];
    if (v39)
    {
      __darwin_ct_rune_t v40 = &v37[v39];
      __darwin_ct_rune_t v41 = v37;
      int64_t v42 = (char *)v38 - (char *)v40;
      if (v38 != v40)
      {
        memmove(v37, v40, v42 - 1);
        __darwin_ct_rune_t v41 = (uint64_t *)a1[5];
      }
      __darwin_ct_rune_t v38 = (uint64_t *)((char *)v37 + v42);
      a1[6] = (char *)v37 + v42;
      __darwin_ct_rune_t v37 = v41;
    }
  }
  else
  {
    __darwin_ct_rune_t v38 = (uint64_t *)a1[6];
  }
  int v43 = v54;
  if (v54) {
    uint64_t v44 = a2[33];
  }
  else {
    uint64_t v44 = a2[34] - 12;
  }
  uint64_t v57 = -1;
  int v58 = 0x7FFFFFFF;
  uint64_t v56 = 0x7FEFFFFFFFFFFFFFLL;
  LODWORD(v55) = 0;
  WORD2(v55) = 0;
  BYTE6(v55) = 1;
  *(void *)&long long v59 = a1;
  *((void *)&v59 + 1) = v44;
  char v60 = &v57;
  uint64_t v61 = &v56;
  char v62 = &v55;
  if (v37 != v38)
  {
    do
    {
      uint64_t v45 = *v37++;
      sub_47979C((uint64_t)&v59, v45);
    }
    while (v37 != v38);
    int v43 = v54;
  }
  uint64_t v57 = v55;
  LOBYTE(v56) = 0;
  if (v43)
  {
    double v46 = (uint64_t *)a1[5];
    __darwin_ct_rune_t v47 = (uint64_t *)a1[6];
    *(void *)&long long v59 = &v56;
    *((void *)&v59 + 1) = &v57;
    char v60 = (uint64_t *)&v52;
    uint64_t v61 = a1;
    char v62 = (uint64_t *)v44;
    int v63 = &v54;
    uint64_t v64 = a6;
    while (v46 != v47)
    {
      uint64_t v48 = *v46++;
      sub_479D84((uint64_t)&v59, v48);
    }
  }
  else
  {
    uint64_t v50 = a1[5];
    uint64_t v49 = a1[6];
    *(void *)&long long v59 = &v56;
    *((void *)&v59 + 1) = &v57;
    char v60 = (uint64_t *)&v52;
    uint64_t v61 = a1;
    char v62 = (uint64_t *)v44;
    int v63 = &v54;
    uint64_t v64 = a6;
    while (v49 != v50)
    {
      uint64_t v51 = *(void *)(v49 - 8);
      v49 -= 8;
      sub_479D84((uint64_t)&v59, v51);
    }
  }
  return 1;
}

void sub_47745C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, void *a5)
{
  uint64_t v5 = a4;
  a4[2] = *a5;
  sub_46B058();
  uint64_t v8 = v7;
  unint64_t v10 = v9 + *v5;
  sub_46B058();
  long long v130 = v11;
  unint64_t v13 = v5[1] + v12 + 1;
  uint64_t v134 = -1;
  int v135 = 0x7FFFFFFF;
  unsigned int v126 = (char **)(v5 + 4);
  uint64_t v125 = v5;
  while (v8)
  {
    unint64_t v14 = sub_46C760(v8);
    unint64_t v15 = v14;
    if (v130)
    {
      BOOL v16 = v10 < v14;
      unint64_t v17 = sub_46C760(v130);
      if (v13 < v17 && v16)
      {
        uint64_t v19 = sub_46C8EC(v8, v10);
        if (v19 == sub_46C8EC(v130, v13)) {
          goto LABEL_131;
        }
      }
      else if (v10 < v15 == v13 < v17)
      {
        goto LABEL_131;
      }
    }
    else if (v10 >= v14)
    {
      goto LABEL_131;
    }
LABEL_17:
    if (*a3 == a3[1])
    {
      __darwin_ct_rune_t v20 = (void *)v5[5];
      uint64_t v21 = *(v20 - 2);
      *(void *)uint64_t v137 = *(void *)(v21 - 12);
      *(_DWORD *)&v137[8] = *(_DWORD *)(v21 - 4);
      *(void *)&v137[12] = *(void *)v137;
      *(_DWORD *)&v137[20] = *(_DWORD *)&v137[8];
      uint64_t v22 = operator new(0x18uLL);
      __p[1] = v22 + 3;
      unint64_t v133 = (char *)(v22 + 3);
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v137;
      v22[2] = *(void *)&v137[16];
      __p[0] = v22;
      if ((unint64_t)v20 >= v5[6])
      {
        __darwin_ct_rune_t v23 = sub_4D088(v126, (uint64_t)__p);
        uint64_t v24 = __p[0];
        v5[5] = v23;
        if (v24)
        {
          __p[1] = v24;
          operator delete(v24);
        }
      }
      else
      {
        *__darwin_ct_rune_t v20 = 0;
        v20[1] = 0;
        v20[2] = 0;
        *(_OWORD *)__darwin_ct_rune_t v20 = *(_OWORD *)__p;
        v20[2] = v133;
        v5[5] = v20 + 3;
      }
    }
    uint64_t v25 = *(void *)(a1 + 24);
    uint64_t v26 = sub_46C8EC(v8, v10);
    sub_2954EC(v25, *(void *)(v26 + 32), (uint64_t)__p);
    sub_2E4B5C((uint64_t)__p, v137);
    if (__p[1])
    {
      unint64_t v133 = (char *)__p[1];
      operator delete(__p[1]);
    }
    sub_46B058();
    __darwin_ct_rune_t v28 = v27;
    unint64_t v30 = v29;
    if (v8)
    {
      unint64_t v31 = sub_46C760(v8);
      BOOL v32 = v10 < v31;
      if (!v28)
      {
        if (v10 < v31) {
          goto LABEL_35;
        }
        goto LABEL_37;
      }
    }
    else
    {
      if (!v27) {
        goto LABEL_37;
      }
      BOOL v32 = 0;
    }
    unint64_t v33 = sub_46C760(v28);
    if (v30 < v33 && v32)
    {
      uint64_t v35 = sub_46C8EC(v8, v10);
      if (v35 != sub_46C8EC(v28, v30)) {
        goto LABEL_35;
      }
    }
    else if ((v32 ^ (v30 < v33)))
    {
LABEL_35:
      unint64_t v36 = 0;
      goto LABEL_42;
    }
LABEL_37:
    __darwin_ct_rune_t v37 = (void *)sub_46C8EC(v8, v10);
    uint64_t v39 = (unsigned __int16 *)(*v37 - *(int *)*v37);
    if (*v39 >= 9u && (uint64_t v40 = v39[4]) != 0) {
      uint64_t v41 = *(unsigned int *)(*v37 + v40);
    }
    else {
      uint64_t v41 = 0;
    }
    uint64_t v42 = sub_46CCC8(v8, v10, v38);
    unint64_t v36 = sub_477F48((uint64_t)a3, (double)(v41 - v42) / 100.0, 0.1);
LABEL_42:
    sub_46B060();
    unint64_t v129 = v10 + 1;
    if (v10 + 1 >= v47)
    {
      uint64_t v49 = sub_46CCC8(v8, v10, v43);
      unint64_t v50 = sub_477F48((uint64_t)v137, (double)v49 / 100.0, 0.1);
      uint64_t v48 = (_DWORD *)(*(void *)v137 + 12 * v50);
    }
    else
    {
      uint64_t v48 = (_DWORD *)(*(void *)&v137[8] - 12);
    }
    uint64_t v51 = v48;
    unint64_t v52 = sub_450B4C(a3, 0, -1 - 0x5555555555555555 * ((a3[1] - *a3) >> 2), v48, 0, 0x7FFFFFFFFFFFFFFFLL, 1, v43, v44, v45, v46);
    __p[0] = 0;
    __p[1] = 0;
    unint64_t v133 = 0;
    uint64_t v55 = *a3;
    uint64_t v56 = *a3 + 12 * v36;
    unint64_t v131 = v52;
    uint64_t v57 = *a3 + 12 * v52;
    if (v56 != v57 + 12)
    {
      int v58 = 0;
      do
      {
        while (v58 < v133)
        {
          uint64_t v59 = *(void *)v56;
          *((_DWORD *)v58 + 2) = *(_DWORD *)(v56 + 8);
          *(void *)int v58 = v59;
          __p[1] = v58 + 12;
          v58 += 12;
          BOOL v60 = v56 == v57;
          v56 += 12;
          if (v60) {
            goto LABEL_66;
          }
        }
        uint64_t v61 = (char *)__p[0];
        unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((v58 - (char *)__p[0]) >> 2);
        unint64_t v63 = v62 + 1;
        if (v62 + 1 > 0x1555555555555555) {
          sub_2E00();
        }
        unint64_t v64 = v13;
        int v65 = v8;
        size_t v66 = a3;
        if (0x5555555555555556 * ((v133 - (char *)__p[0]) >> 2) > v63) {
          unint64_t v63 = 0x5555555555555556 * ((v133 - (char *)__p[0]) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v133 - (char *)__p[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v67 = 0x1555555555555555;
        }
        else {
          unint64_t v67 = v63;
        }
        if (v67)
        {
          if (v67 > 0x1555555555555555) {
            sub_188D718();
          }
          int v68 = (char *)operator new(12 * v67);
        }
        else
        {
          int v68 = 0;
        }
        uint64_t v69 = *(void *)v56;
        uint64_t v70 = &v68[12 * v62];
        *((_DWORD *)v70 + 2) = *(_DWORD *)(v56 + 8);
        *(void *)uint64_t v70 = v69;
        unint64_t v71 = v70;
        if (v58 != v61)
        {
          do
          {
            uint64_t v72 = *(void *)(v58 - 12);
            v58 -= 12;
            int v73 = *((_DWORD *)v58 + 2);
            *(void *)(v71 - 12) = v72;
            v71 -= 12;
            *((_DWORD *)v71 + 2) = v73;
          }
          while (v58 != v61);
          int v58 = (char *)__p[0];
        }
        uint64_t v74 = v70 + 12;
        __p[0] = v71;
        __p[1] = v70 + 12;
        unint64_t v133 = &v68[12 * v67];
        if (v58) {
          operator delete(v58);
        }
        a3 = v66;
        uint64_t v8 = v65;
        unint64_t v13 = v64;
        __p[1] = v74;
        int v58 = v74;
        BOOL v60 = v56 == v57;
        v56 += 12;
      }
      while (!v60);
LABEL_66:
      uint64_t v55 = *a3;
      uint64_t v5 = v125;
    }
    unsigned __int32 v75 = (_DWORD *)(v55 + 12 * v131);
    LODWORD(v53) = *v75;
    LODWORD(v54) = v75[1];
    double v76 = (double)v53;
    double v77 = (double)v54;
    LODWORD(v54) = v75[4];
    double v78 = (double)v54;
    double v79 = (double)v75[3] - v76;
    double v80 = v78 - v77;
    double v81 = v79 * v79 + v80 * v80;
    double v82 = fabs(v81);
    HIDWORD(v83) = 1018167296;
    if (v81 == 0.0 || v82 < 2.22044605e-16)
    {
LABEL_72:
      uint64_t v85 = *(void *)(v75 + 3);
      int v86 = v75[5];
LABEL_78:
      int v135 = v86;
      uint64_t v134 = v85;
      unint64_t v88 = v131;
      goto LABEL_79;
    }
    LODWORD(v82) = *v51;
    LODWORD(v83) = v51[1];
    double v87 = (v79 * ((double)*(unint64_t *)&v82 - v76) + v80 * ((double)v83 - v77)) / v81;
    if (v87 <= 0.0)
    {
      uint64_t v85 = *(void *)v75;
      int v86 = v75[2];
      goto LABEL_78;
    }
    if (v87 >= 1.0) {
      goto LABEL_72;
    }
    unint64_t v88 = v131;
    int v89 = *(_DWORD *)(v55 + 12 * v131 + 8);
    if (v89 == 0x7FFFFFFF)
    {
      BOOL v90 = 0;
      double v91 = 0.0;
    }
    else
    {
      int v115 = *(_DWORD *)(v55 + 12 * (v131 + 1) + 8);
      BOOL v60 = v115 == 0x7FFFFFFF;
      double v91 = v87 * ((double)v115 - (double)v89) + (double)v89;
      BOOL v90 = v115 != 0x7FFFFFFF;
      if (v60) {
        double v91 = 0.0;
      }
    }
    double v116 = v80 * v87;
    double v117 = v79 * v87 + v76;
    if (v117 < 0.0) {
      double v118 = -0.5;
    }
    else {
      double v118 = 0.5;
    }
    uint64_t v119 = (v117 + v118);
    double v120 = v116 + v77;
    if (v120 < 0.0) {
      double v121 = -0.5;
    }
    else {
      double v121 = 0.5;
    }
    LODWORD(v122) = (v120 + v121);
    if (v91 < 0.0) {
      double v123 = -0.5;
    }
    else {
      double v123 = 0.5;
    }
    if (v90) {
      unsigned int v124 = (v91 + v123);
    }
    else {
      unsigned int v124 = 0x7FFFFFFF;
    }
    if (v122 >= 0xFFFFFFFE) {
      uint64_t v122 = 4294967294;
    }
    else {
      uint64_t v122 = v122;
    }
    uint64_t v134 = v119 | (v122 << 32);
    int v135 = v124;
LABEL_79:
    sub_30C0C((char **)__p, &v134);
    int v93 = (uint64_t *)__p[0];
    int v92 = (unsigned int *)__p[1];
    int v94 = (unsigned int *)__p[0];
    if (__p[0] == __p[1])
    {
LABEL_89:
      long long v101 = __p[0];
      if (v94 == __p[1]) {
        goto LABEL_93;
      }
    }
    else
    {
      uint64_t v95 = (unsigned int *)__p[0];
      do
      {
        long long v96 = v95 + 3;
        if (v95 + 3 == v92)
        {
          int v94 = v92;
          goto LABEL_89;
        }
        BOOL v97 = sub_479F80((uint64_t)&v136, v95, v95 + 3);
        uint64_t v95 = v96;
      }
      while (!v97);
      uint64_t v98 = v96 + 3;
      long long v99 = v96 - 3;
      while (v98 != v92)
      {
        if (!sub_479F80((uint64_t)&v136, v99, v98))
        {
          unsigned int v100 = v98[2];
          *(void *)(v99 + 3) = *(void *)v98;
          v99 += 3;
          v99[2] = v100;
        }
        v98 += 3;
      }
      int v94 = v99 + 3;
      long long v101 = __p[0];
      if (v94 == __p[1])
      {
LABEL_93:
        int64_t v102 = (char *)v94 - v101;
        if (v102 != 12) {
          goto LABEL_95;
        }
        goto LABEL_94;
      }
    }
    __p[1] = v94;
    int64_t v102 = (char *)v94 - v101;
    if (v102 != 12) {
      goto LABEL_95;
    }
LABEL_94:
    sub_30C0C((char **)__p, v93);
    int64_t v102 = (char *)__p[1] - (char *)__p[0];
LABEL_95:
    unint64_t v103 = 0xAAAAAAAAAAAAAAABLL * (v102 >> 2);
    if (v103 <= 1) {
      uint64_t v104 = 1;
    }
    else {
      uint64_t v104 = v103;
    }
    BOOL v136 = __p;
    if (v103 >= 2)
    {
      uint64_t v105 = 0;
      uint64_t v106 = 1;
      do
        uint64_t v105 = sub_47A214((uint64_t **)&v136, v105, v106++);
      while (v104 != v106);
    }
    else
    {
      uint64_t v105 = 0;
    }
    *a5 += v105;
    unint64_t v107 = (void *)v5[5];
    if ((unint64_t)v107 >= v5[6])
    {
      unint64_t v108 = sub_4D088(v126, (uint64_t)__p);
    }
    else
    {
      void *v107 = 0;
      v107[1] = 0;
      __n128 v107[2] = 0;
      *(_OWORD *)unint64_t v107 = *(_OWORD *)__p;
      __n128 v107[2] = v133;
      __p[0] = 0;
      __p[1] = 0;
      unint64_t v133 = 0;
      unint64_t v108 = (char *)(v107 + 3);
    }
    v5[5] = v108;
    uint64_t v109 = *a3 + 12 * v88;
    uint64_t v110 = v134;
    *(_DWORD *)(v109 + 8) = v135;
    *(void *)uint64_t v109 = v110;
    if (v88)
    {
      uint64_t v112 = *a3;
      unint64_t v111 = (unsigned char *)a3[1];
      __n128 v113 = (unsigned char *)(*a3 + 12 * v88);
      int64_t v114 = v111 - v113;
      if (v111 != v113) {
        memmove((void *)*a3, v113, v111 - v113);
      }
      a3[1] = v112 + v114;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)v137)
    {
      *(void *)&v137[8] = *(void *)v137;
      operator delete(*(void **)v137);
    }
    unint64_t v10 = v129;
  }
  if (v130 && v13 < sub_46C760(v130)) {
    goto LABEL_17;
  }
LABEL_131:
  v5[3] = *a5;
}

void sub_477DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_477E78(void *a1, unsigned int a2)
{
  uint64_t v3 = a2;
  sub_478614((uint64_t)a1, a2);
  uint64_t v4 = a1[12];
  if (((a1[7] - a1[6]) >> 2) - 1 > (unint64_t)((a1[13] - v4) >> 3))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v8, "no or incomplete vertex data stored");
    unsigned int v7 = (void *)sub_2F404((uint64_t)exception, &v8);
  }
  return v4 + 8 * v3;
}

void sub_477F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_477F48(uint64_t a1, double a2, double a3)
{
  uint64_t v3 = *(char **)a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  if (v4 < 2) {
    return 0;
  }
  uint64_t v5 = 0;
  unint64_t v8 = v4 - 1;
  uint64_t v9 = (int *)(v3 + 8);
  double v10 = 0.0;
  double v44 = a2;
  do
  {
    if (v8 == v5) {
      return v8;
    }
    double v11 = v10;
    ++v5;
    LODWORD(v10) = *(v9 - 1);
    double v43 = (double)*(unint64_t *)&v10;
    double v46 = v11;
    long double v12 = exp(3.14159265 - (double)*(unint64_t *)&v10 * 6.28318531 / 4294967300.0);
    *(double *)&unint64_t v13 = atan((v12 - 1.0 / v12) * 0.5) * 57.2957795;
    long double v14 = *(double *)&v13 * 0.0174532925;
    LODWORD(v13) = *(v9 - 2);
    double v42 = (double)v13;
    *(double *)&unint64_t v15 = ((double)v13 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925;
    double v45 = *(double *)&v15;
    LODWORD(v15) = v9[2];
    double v41 = (double)v15;
    long double v16 = exp(3.14159265 - (double)v15 * 6.28318531 / 4294967300.0);
    *(double *)&unint64_t v17 = atan((v16 - 1.0 / v16) * 0.5) * 57.2957795;
    long double v18 = *(double *)&v17 * 0.0174532925;
    LODWORD(v17) = v9[1];
    double v19 = (double)v17;
    double v20 = v45 - ((double)v17 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925;
    long double v21 = sin((v14 - v18) * 0.5);
    long double v22 = v21 * v21;
    double v23 = cos(v14);
    long double v24 = v23 * cos(v18);
    long double v25 = sin(v20 * 0.5);
    long double v26 = atan2(sqrt(v22 + v24 * (v25 * v25)), sqrt(1.0 - (v22 + v24 * (v25 * v25))));
    double v27 = (v26 + v26) * 6372797.56;
    double v10 = v46 + v27;
    v3 += 12;
    v9 += 3;
  }
  while (v27 == 0.0 || v10 < v44);
  if (v44 - v46 < a3) {
    return --v5;
  }
  if (v10 - v44 >= a3)
  {
    double v30 = (v44 - v46) / v27;
    double v31 = 1.0 - v30;
    uint64_t v32 = (v30 * v19 + (1.0 - v30) * v42 + 0.5);
    LODWORD(v33) = (v30 * v41 + (1.0 - v30) * v43 + 0.5);
    int v34 = 0x7FFFFFFF;
    if (*v9 == 0x7FFFFFFF || (int v35 = *(v9 - 3), v35 == 0x7FFFFFFF))
    {
LABEL_32:
      if (v33 >= 0xFFFFFFFE) {
        uint64_t v33 = 4294967294;
      }
      else {
        uint64_t v33 = v33;
      }
      uint64_t v47 = v32 | (v33 << 32);
      int v48 = v34;
      sub_478324((char **)a1, (uint64_t)v3, (uint64_t)&v47);
      return v5;
    }
    double v36 = v30 * (double)*v9;
    if (v36 >= 0.0)
    {
      if (v36 < 4.50359963e15) {
        double v36 = (double)(((uint64_t)(v36 + v36) + 1) >> 1);
      }
    }
    else if (v36 > -4.50359963e15)
    {
      uint64_t v37 = (uint64_t)(v36 + v36);
      if (v37 >= 1) {
        --v37;
      }
      double v36 = (double)(v37 >> 1);
    }
    double v38 = v31 * (double)v35;
    if (v38 >= 0.0)
    {
      if (v38 < 4.50359963e15)
      {
        uint64_t v39 = (uint64_t)(v38 + v38) + 1;
LABEL_30:
        double v38 = (double)(v39 >> 1);
      }
    }
    else if (v38 > -4.50359963e15)
    {
      uint64_t v39 = (uint64_t)(v38 + v38);
      if (v39 >= 1) {
        --v39;
      }
      goto LABEL_30;
    }
    int v34 = (int)v38 + (int)v36;
    goto LABEL_32;
  }
  return v5;
}

char *sub_478324(char **a1, uint64_t a2, uint64_t a3)
{
  char v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 12;
  unint64_t v8 = &(*a1)[12 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v6) >> 2) + 1;
    if (v14 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v6) >> 2);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x1555555555555555;
    }
    else {
      unint64_t v16 = v14;
    }
    int v35 = a1 + 2;
    if (v16)
    {
      if (v16 > 0x1555555555555555) {
        sub_188D718();
      }
      unint64_t v17 = (char *)operator new(12 * v16);
    }
    else
    {
      unint64_t v17 = 0;
    }
    uint64_t v31 = (uint64_t)v17;
    uint64_t v32 = &v17[12 * v7];
    __dst = v32;
    int v34 = &v17[12 * v16];
    sub_32D80((uint64_t)&v31, (uint64_t *)a3);
    double v19 = v32;
    double v20 = *a1;
    long double v21 = v32;
    if (*a1 != v8)
    {
      long double v22 = v8;
      long double v21 = v32;
      do
      {
        uint64_t v23 = *(void *)(v22 - 12);
        v22 -= 12;
        int v24 = *((_DWORD *)v22 + 2);
        *(void *)(v21 - 12) = v23;
        v21 -= 12;
        *((_DWORD *)v21 + 2) = v24;
      }
      while (v22 != v20);
    }
    uint64_t v32 = v21;
    long double v25 = a1[1];
    long double v26 = (char *)__dst;
    int64_t v27 = v25 - v8;
    if (v25 != v8)
    {
      memmove(__dst, v8, v25 - v8);
      long double v21 = v32;
      unint64_t v8 = a1[1];
    }
    __darwin_ct_rune_t v28 = *a1;
    *a1 = v21;
    a1[1] = &v26[v27];
    unint64_t v29 = a1[2];
    a1[2] = v34;
    __dst = v8;
    int v34 = v29;
    uint64_t v31 = (uint64_t)v28;
    uint64_t v32 = v28;
    if (v8 != v28) {
      __dst = &v28[(v8 - v28 - 12) % 0xCuLL];
    }
    if (v28) {
      operator delete(v28);
    }
    return v19;
  }
  else if (v8 == (char *)v5)
  {
    uint64_t v18 = *(void *)a3;
    *((_DWORD *)v8 + 2) = *(_DWORD *)(a3 + 8);
    *(void *)unint64_t v8 = v18;
    a1[1] = v8 + 12;
  }
  else
  {
    uint64_t v31 = *(void *)a3;
    LODWORD(v32) = *(_DWORD *)(a3 + 8);
    double v10 = v8 + 12;
    unint64_t v11 = v5 - 12;
    unint64_t v12 = v5;
    if (v5 >= 0xC)
    {
      do
      {
        uint64_t v13 = *(void *)v11;
        *(_DWORD *)(v12 + 8) = *(_DWORD *)(v11 + 8);
        *(void *)unint64_t v12 = v13;
        v12 += 12;
        v11 += 12;
      }
      while (v11 < v5);
    }
    a1[1] = (char *)v12;
    if ((_DWORD *)v5 != v10) {
      memmove(v8 + 12, v8, v5 - (void)v10);
    }
    *(void *)unint64_t v8 = v31;
    *((_DWORD *)v8 + 2) = v32;
  }
  return v8;
}

void sub_4785B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  if (a11 == a10)
  {
    unint64_t v12 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v12 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v12);
  _Unwind_Resume(exception_object);
}