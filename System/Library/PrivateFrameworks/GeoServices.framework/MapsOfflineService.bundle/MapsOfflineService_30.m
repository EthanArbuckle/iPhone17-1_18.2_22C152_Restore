void sub_CDA1C4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  void **v5;
  void **v6;
  void *v7;
  uint64_t *v8;
  void *v9[3];
  void *v10;
  long long v11;
  void *v12;
  long long v13;
  void *__p;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned char v19[16];

  v0 = __chkstk_darwin();
  v2 = v1;
  v3 = v0;
  v12 = operator new(0x48uLL);
  v13 = xmmword_20B9A00;
  strcpy((char *)v12, "routing/transit/schedule_lookup/TransitRegionClassification.json");
  v15 = 0;
  __p = 0;
  v16 = 0;
  v4 = sub_374CDC((uint64_t)v2, (uint64_t)&v12, (uint64_t *)&__p);
  sub_BC2BF8((uint64_t)v19, (uint64_t)v2, v4);
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v15;
    v7 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v15 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
  sub_BC259C((uint64_t)v19, v3, &v17);
  v10 = operator new(0x28uLL);
  v11 = xmmword_20B93A0;
  strcpy((char *)v10, "routing/transit/ScheduleLookup.json");
  v8 = sub_374CDC((uint64_t)v2, (uint64_t)&v10, &v17);
  memset(v9, 0, sizeof(v9));
  sub_8A6F8((char *)v9, v17, v18, 0xAAAAAAAAAAAAAAABLL * ((v18 - v17) >> 3));
  sub_A03F70((uint64_t)&v12, v2, v8);
}

void sub_CDA520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, int a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  sub_CDA5A8((uint64_t)&STACK[0x1318]);
  sub_CDA60C(&a21);
  sub_1A668(&a12);
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_1A668((void **)(v21 - 88));
  _Unwind_Resume(a1);
}

void sub_CDA580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xCDA578);
}

uint64_t sub_CDA5A8(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    v2 = *(void **)(a1 + 8);
    if (v2)
    {
      v3 = *(void **)(a1 + 16);
      v4 = *(void **)(a1 + 8);
      if (v3 != v2)
      {
        do
          v3 = sub_A05730(v3 - 19);
        while (v3 != v2);
        v4 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 16) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void *sub_CDA60C(void *a1)
{
  uint64_t v2 = a1[601];
  if (v2)
  {
    uint64_t v3 = a1[602];
    v4 = (void *)a1[601];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[601];
    }
    a1[602] = v2;
    operator delete(v4);
  }
  sub_49DA2C(a1 + 5);
  return a1;
}

void sub_CDA688()
{
  unk_25E5E27 = 16641;
  word_25E5E10 = 65;
  byte_25E5E3F = 1;
  byte_25E5E29 = 0;
}

double sub_CDA6B0@<D0>(int a1@<W0>, uint64_t a2@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 92) = 0u;
  *(_DWORD *)(a2 + 144) = 1065353216;
  *(_DWORD *)a2 = a1;
  return result;
}

void sub_CDA6D8()
{
  unk_25E5E57 = 16641;
  word_25E5E40 = 65;
  byte_25E5E6F = 1;
  byte_25E5E59 = 0;
}

void sub_CDA700(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v12);
  v4 = *(_DWORD **)(a1 + 8);
  v5 = *(_DWORD **)(a1 + 16);
  if (v4 != v5)
  {
    v6 = *(_DWORD **)(a1 + 8);
    while (*v6)
    {
      v6 += 42;
      if (v6 == v5) {
        goto LABEL_5;
      }
    }
    do
    {
      if (*v4 == 1) {
        sub_10B5A04((uint64_t)v11, *(void **)a1);
      }
      v4 += 42;
    }
    while (v4 != v5);
  }
LABEL_5:
  v11[0].n128_u64[0] = 1;
  v11[0].n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(v8, v11);
  *(unsigned char *)a2 = 0;
  __n128 v7 = v8[1];
  *(__n128 *)(a2 + 8) = v8[0];
  *(__n128 *)(a2 + 24) = v7;
  *(void *)(a2 + 40) = v9;
  *(_DWORD *)(a2 + 48) = v10;
}

void sub_CDB1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  if (a65 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a24);
  v66 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v66;
    operator delete(v66);
  }
  a24 = (uint64_t)&STACK[0x270];
  sub_BC2EEC((void ***)&a24);
  sub_10A4318((uint64_t)&STACK[0x2D8]);
  _Unwind_Resume(a1);
}

uint64_t sub_CDB298(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 168);
    if (v2)
    {
      *(void *)(a1 + 176) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 136);
    if (v3)
    {
      *(void *)(a1 + 144) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a1 + 112);
    if (v4)
    {
      *(void *)(a1 + 120) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 80);
    if (v5)
    {
      *(void *)(a1 + 88) = v5;
      operator delete(v5);
    }
  }
  return a1;
}

void sub_CDB304()
{
  unk_25E5E87 = 16641;
  word_25E5E70 = 65;
  byte_25E5E9F = 1;
  byte_25E5E89 = 0;
}

void sub_CDB32C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_105F210(v10, a1, (__int16 *)(a2 + 8));
  sub_105F2F0((unint64_t)v10, a3);
  v4 = (void **)__p;
  if (__p)
  {
    v5 = v14;
    v6 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = __p;
    }
    v14 = v4;
    operator delete(v6);
  }
  __n128 v7 = (void **)v11;
  if (v11)
  {
    v8 = v12;
    uint64_t v9 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      uint64_t v9 = v11;
    }
    v12 = v7;
    operator delete(v9);
  }
}

void sub_CDB404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_CDB418(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[2];
  if (v5)
  {
    uint64_t v6 = a1[3];
    __n128 v7 = (void *)a1[2];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      __n128 v7 = (void *)a1[2];
    }
    a1[3] = v5;
    operator delete(v7);
  }
  return a1;
}

void *sub_CDB4D4@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = result[1];
  uint64_t v4 = v3 - *result;
  if (v3 != *result)
  {
    uint64_t v5 = result;
    uint64_t v6 = sub_CDCA00(a2, (uint64_t *)(*result + 8));
    a2[1] = (uint64_t)v6;
    double result = (void *)sub_45FE2C((uint64_t)(v6 - 120), 0);
    if (v4 != 232)
    {
      uint64_t v7 = v4 / 232 - 1;
      uint64_t v8 = 240;
      do
      {
        uint64_t v9 = (uint64_t *)(*v5 + v8);
        unint64_t v10 = a2[1];
        if (v10 >= a2[2])
        {
          v11 = sub_CDCA00(a2, v9);
        }
        else
        {
          sub_CDC900((uint64_t)a2, v9);
          v11 = (char *)(v10 + 120);
        }
        a2[1] = (uint64_t)v11;
        double result = (void *)sub_45FE2C((uint64_t)(v11 - 120), 2);
        v8 += 232;
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

void sub_CDB5AC(_Unwind_Exception *a1)
{
  sub_5AB1B0(v1);
  _Unwind_Resume(a1);
}

void sub_CDB5C0(_Unwind_Exception *a1)
{
  sub_5AB1B0(v1);
  _Unwind_Resume(a1);
}

void sub_CDB5D4(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, uint64_t a4@<X8>)
{
  sub_CDCCDC(&v51, *a3, a3[1]);
  sub_CDB32C(a1, a2, (uint64_t *)&v51);
  uint64_t v8 = (uint64_t **)v51;
  uint64_t v9 = v52;
  if (v51 == v52)
  {
    *(unsigned char *)a4 = 1;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 8) = 0;
LABEL_20:
    v53.n128_u64[0] = 16;
    v53.n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814((__n128 *)__p, &v53);
    v54[0] = 0;
    long long v55 = *(_OWORD *)__p;
    long long v56 = v48;
    uint64_t v57 = v49;
    long long v48 = 0uLL;
    uint64_t v49 = 0;
    int v58 = v50;
    sub_CDBAC8(a4, (uint64_t)v54);
    sub_C68C60((uint64_t)v54);
    uint64_t v25 = v48;
    if (!(void)v48) {
      goto LABEL_60;
    }
    uint64_t v26 = *((void *)&v48 + 1);
    v27 = (void *)v48;
    if (*((void *)&v48 + 1) == (void)v48) {
      goto LABEL_56;
    }
    do
    {
      if (*(char *)(v26 - 1) < 0) {
        operator delete(*(void **)(v26 - 24));
      }
      v26 -= 32;
    }
    while (v26 != v25);
    goto LABEL_55;
  }
  LODWORD(v7) = *(_DWORD *)a2;
  double v10 = (double)v7;
  v11 = (char *)v51 + 232;
  while (1)
  {
    *(void *)&long long v12 = *((void *)v11 - 3);
    if (*(double *)&v12 > v10) {
      break;
    }
    BOOL v13 = v11 == v52;
    v11 += 232;
    if (v13) {
      goto LABEL_11;
    }
  }
  v14 = v11 - 232;
  if (v11 - 232 != v52)
  {
    while (v11 != v9)
    {
      LODWORD(v12) = *(_DWORD *)a2;
      *(double *)&long long v12 = (double)(unint64_t)v12;
      if (*((double *)v11 + 26) <= *(double *)&v12)
      {
        long long v15 = *(_OWORD *)v11;
        long long v16 = *((_OWORD *)v11 + 2);
        *((_OWORD *)v14 + 1) = *((_OWORD *)v11 + 1);
        *((_OWORD *)v14 + 2) = v16;
        *(_OWORD *)v14 = v15;
        long long v17 = *((_OWORD *)v11 + 3);
        long long v18 = *((_OWORD *)v11 + 4);
        long long v19 = *((_OWORD *)v11 + 6);
        *((_OWORD *)v14 + 5) = *((_OWORD *)v11 + 5);
        *((_OWORD *)v14 + 6) = v19;
        *((_OWORD *)v14 + 3) = v17;
        *((_OWORD *)v14 + 4) = v18;
        long long v20 = *((_OWORD *)v11 + 7);
        long long v21 = *((_OWORD *)v11 + 8);
        long long v22 = *((_OWORD *)v11 + 10);
        *((_OWORD *)v14 + 9) = *((_OWORD *)v11 + 9);
        *((_OWORD *)v14 + 10) = v22;
        *((_OWORD *)v14 + 7) = v20;
        *((_OWORD *)v14 + 8) = v21;
        long long v23 = *((_OWORD *)v11 + 11);
        long long v12 = *((_OWORD *)v11 + 12);
        long long v24 = *((_OWORD *)v11 + 13);
        *((void *)v14 + 28) = *((void *)v11 + 28);
        *((_OWORD *)v14 + 12) = v12;
        *((_OWORD *)v14 + 13) = v24;
        *((_OWORD *)v14 + 11) = v23;
        v14 += 232;
      }
      v11 += 232;
    }
  }
  if (v14 != v9)
  {
    uint64_t v9 = v14;
    v52 = v14;
  }
LABEL_11:
  *(unsigned char *)a4 = 1;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 8) = 0;
  if (v8 == (uint64_t **)v9) {
    goto LABEL_20;
  }
  if (*(unsigned char *)(a2 + 64))
  {
    while (sub_45FD6C(v8[1]) <= *(void *)(a2 + 72))
    {
      v8 += 29;
      if (v8 == (uint64_t **)v9) {
        goto LABEL_32;
      }
    }
    if (v8 == (uint64_t **)v9)
    {
LABEL_32:
      uint64_t v8 = (uint64_t **)v9;
      goto LABEL_33;
    }
    for (i = (char *)(v8 + 29); i != v9; i += 232)
    {
      if (sub_45FD6C(*((uint64_t **)i + 1)) <= *(void *)(a2 + 72))
      {
        long long v29 = *(_OWORD *)i;
        long long v30 = *((_OWORD *)i + 2);
        *((_OWORD *)v8 + 1) = *((_OWORD *)i + 1);
        *((_OWORD *)v8 + 2) = v30;
        *(_OWORD *)uint64_t v8 = v29;
        long long v31 = *((_OWORD *)i + 3);
        long long v32 = *((_OWORD *)i + 4);
        long long v33 = *((_OWORD *)i + 6);
        *((_OWORD *)v8 + 5) = *((_OWORD *)i + 5);
        *((_OWORD *)v8 + 6) = v33;
        *((_OWORD *)v8 + 3) = v31;
        *((_OWORD *)v8 + 4) = v32;
        long long v34 = *((_OWORD *)i + 7);
        long long v35 = *((_OWORD *)i + 8);
        long long v36 = *((_OWORD *)i + 10);
        *((_OWORD *)v8 + 9) = *((_OWORD *)i + 9);
        *((_OWORD *)v8 + 10) = v36;
        *((_OWORD *)v8 + 7) = v34;
        *((_OWORD *)v8 + 8) = v35;
        long long v37 = *((_OWORD *)i + 11);
        long long v38 = *((_OWORD *)i + 12);
        long long v39 = *((_OWORD *)i + 13);
        v8[28] = (uint64_t *)*((void *)i + 28);
        *((_OWORD *)v8 + 12) = v38;
        *((_OWORD *)v8 + 13) = v39;
        *((_OWORD *)v8 + 11) = v37;
        v8 += 29;
      }
    }
LABEL_33:
    uint64_t v9 = (char *)v8;
    if (v8 != (uint64_t **)v52) {
      v52 = (char *)v8;
    }
    uint64_t v8 = (uint64_t **)v51;
  }
  if (v8 != (uint64_t **)v9)
  {
    sub_CDB4D4(&v51, (uint64_t *)__p);
    v54[0] = 1;
    long long v55 = *(_OWORD *)__p;
    *(void *)&long long v56 = v48;
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v48 = 0;
    sub_CDBAC8(a4, (uint64_t)v54);
    sub_C68C60((uint64_t)v54);
    v40 = (void **)__p[0];
    if (!__p[0]) {
      goto LABEL_60;
    }
    v41 = (void **)__p[1];
    v27 = __p[0];
    if (__p[1] == __p[0])
    {
LABEL_58:
      __p[1] = v40;
      goto LABEL_59;
    }
    while (1)
    {
      if (*((char *)v41 - 1) < 0)
      {
        operator delete(*(v41 - 3));
        v42 = v41 - 15;
        v43 = *(v41 - 15);
        if (v43)
        {
LABEL_46:
          uint64_t v44 = (uint64_t)*(v41 - 14);
          v45 = v43;
          if ((void *)v44 != v43)
          {
            do
              uint64_t v44 = sub_3AFFFC(v44 - 1056);
            while ((void *)v44 != v43);
            v45 = *v42;
          }
          *(v41 - 14) = v43;
          operator delete(v45);
        }
      }
      else
      {
        v42 = v41 - 15;
        v43 = *(v41 - 15);
        if (v43) {
          goto LABEL_46;
        }
      }
      v41 = v42;
      if (v42 == v40)
      {
        v27 = __p[0];
        goto LABEL_58;
      }
    }
  }
  v53.n128_u64[0] = 15;
  v53.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814((__n128 *)__p, &v53);
  v54[0] = 0;
  long long v55 = *(_OWORD *)__p;
  long long v56 = v48;
  uint64_t v57 = v49;
  long long v48 = 0uLL;
  uint64_t v49 = 0;
  int v58 = v50;
  sub_CDBAC8(a4, (uint64_t)v54);
  sub_C68C60((uint64_t)v54);
  uint64_t v25 = v48;
  if (!(void)v48) {
    goto LABEL_60;
  }
  uint64_t v46 = *((void *)&v48 + 1);
  v27 = (void *)v48;
  if (*((void *)&v48 + 1) != (void)v48)
  {
    do
    {
      if (*(char *)(v46 - 1) < 0) {
        operator delete(*(void **)(v46 - 24));
      }
      v46 -= 32;
    }
    while (v46 != v25);
LABEL_55:
    v27 = (void *)v48;
  }
LABEL_56:
  *((void *)&v48 + 1) = v25;
LABEL_59:
  operator delete(v27);
LABEL_60:
  if (v51)
  {
    v52 = (char *)v51;
    operator delete(v51);
  }
}

void sub_CDBA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  sub_C68C60(v17);
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_CDBAC8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2) {
      sub_CDC3A4((void ***)(a1 + 8), (__n128 *)(a2 + 8));
    }
    else {
      sub_CDC2A0(a1, a1 + 8, (void ***)(a1 + 8), a2 + 8);
    }
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 8);
    uint64_t v5 = (void *)(a2 + 8);
    if (*(unsigned char *)a2)
    {
      uint64_t v6 = *(void *)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = *(void **)(a1 + 24);
        if (v7 != v6)
        {
          do
          {
            if (*(char *)(v7 - 1) < 0) {
              operator delete(*(void **)(v7 - 24));
            }
            v7 -= 32;
          }
          while (v7 != v6);
          uint64_t v8 = *(void **)(a1 + 24);
        }
        *(void *)(a1 + 32) = v6;
        operator delete(v8);
      }
      void *v4 = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      void *v5 = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
    }
    else
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 24) = 0;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    }
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

void sub_CDBBEC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v64);
  *(_OWORD *)v62 = 0u;
  memset(v63, 0, sizeof(v63));
  char v80 = 0;
  uint64_t v4 = **(void ****)a1;
  uint64_t v5 = *(void ***)(*(void *)a1 + 8);
  if (v4 == v5) {
    goto LABEL_40;
  }
  uint64_t v56 = a2;
  do
  {
    sub_CDB5D4(*(void *)(a1 + 8), a1 + 24, v4, (uint64_t)v71);
    if (v71[0])
    {
      uint64_t v6 = (char *)v62[1];
      if (v62[1] >= (void *)*(void *)v63)
      {
        v62[1] = sub_CDCDFC((void ***)v62, (long long **)&v71[8]);
      }
      else
      {
        sub_CDD030((void *)v62[1], (long long **)&v71[8]);
        v62[1] = v6 + 24;
      }
      goto LABEL_4;
    }
    if (v80) {
      goto LABEL_4;
    }
    __n128 v57 = *(__n128 *)&v71[8];
    v59 = 0;
    uint64_t v60 = 0;
    int v58 = 0;
    sub_3E7BF4(&v58, *(uint64_t *)&v71[24], v72, (v72 - *(void *)&v71[24]) >> 5);
    int v61 = v74;
    char v70 = 1;
    __n128 v65 = v57;
    uint64_t v7 = v58;
    uint64_t v8 = (uint64_t)v59;
    __p = v58;
    v67 = v59;
    uint64_t v9 = v60;
    uint64_t v68 = v60;
    v59 = 0;
    uint64_t v60 = 0;
    int v58 = 0;
    int v69 = v74;
    if (!v80)
    {
      __n128 v75 = v57;
      v76 = v7;
      v77 = (unsigned char *)v8;
      uint64_t v78 = v9;
      v67 = 0;
      uint64_t v68 = 0;
      __p = 0;
      int v79 = v74;
      char v80 = 1;
LABEL_18:
      char v70 = 0;
      goto LABEL_19;
    }
    sub_CDD248((uint64_t)&v75, (uint64_t)&v65);
    if (v70)
    {
      long long v15 = (void **)__p;
      if (__p)
      {
        double v10 = v67;
        v11 = __p;
        if (v67 != __p)
        {
          do
          {
            if (*((char *)v10 - 1) < 0) {
              operator delete(*(v10 - 3));
            }
            v10 -= 4;
          }
          while (v10 != v15);
          v11 = __p;
        }
        v67 = v15;
        operator delete(v11);
      }
      goto LABEL_18;
    }
LABEL_19:
    long long v12 = (void **)v58;
    if (v58)
    {
      BOOL v13 = v59;
      v14 = v58;
      if (v59 != v58)
      {
        do
        {
          if (*((char *)v13 - 1) < 0) {
            operator delete(*(v13 - 3));
          }
          v13 -= 4;
        }
        while (v13 != v12);
        v14 = v58;
      }
      v59 = v12;
      operator delete(v14);
    }
LABEL_4:
    sub_C68C60((uint64_t)v71);
    v4 += 3;
  }
  while (v4 != v5);
  a2 = v56;
  if (v62[0] == v62[1])
  {
LABEL_40:
    if (v80)
    {
      *(__n128 *)v71 = v75;
      uint64_t v72 = 0;
      *(_OWORD *)&v71[16] = 0uLL;
      sub_3E7BF4(&v71[16], (uint64_t)v76, (uint64_t)v77, (v77 - v76) >> 5);
      int v27 = v79;
      int v73 = v79;
    }
    else
    {
      v65.n128_u64[0] = 43;
      v65.n128_u64[1] = (unint64_t)&off_2439090;
      sub_3E7814((__n128 *)v71, &v65);
      int v27 = v73;
    }
    *(unsigned char *)a2 = 0;
    long long v28 = *(_OWORD *)&v71[16];
    *(_OWORD *)(a2 + 8) = *(_OWORD *)v71;
    *(_OWORD *)(a2 + 24) = v28;
    *(void *)(a2 + 40) = v72;
    *(_DWORD *)(a2 + 48) = v27;
    if (v80) {
      goto LABEL_54;
    }
    goto LABEL_62;
  }
  int v16 = sub_486180(*(void *)(a1 + 16));
  uint64_t v17 = (uint64_t *)v62[0];
  long long v18 = (uint64_t *)v62[1];
  if (v62[0] != v62[1])
  {
    int v19 = v16;
    uint64_t v20 = *(void *)v62[0];
    uint64_t v21 = *((void *)v62[0] + 1);
    if (*(void *)v62[0] != v21) {
      goto LABEL_35;
    }
    while (1)
    {
      v17 += 3;
      if (v17 == v18) {
        break;
      }
      uint64_t v20 = *v17;
      uint64_t v21 = v17[1];
      if (*v17 != v21)
      {
        do
        {
LABEL_35:
          sub_45FE34(v20, v19++);
          v20 += 120;
        }
        while (v20 != v21);
      }
    }
  }
  *(void *)&v63[8] = sub_72688((uint64_t)v64);
  long long v22 = v62[0];
  long long v23 = v62[1];
  if (v62[0] == v62[1])
  {
    double v29 = 0.0;
  }
  else
  {
    unint64_t v24 = (char *)v62[1] - (char *)v62[0] - 24;
    if (v24 >= 0x60)
    {
      unint64_t v30 = v24 / 0x18 + 1;
      uint64_t v31 = v30 & 3;
      if ((v30 & 3) == 0) {
        uint64_t v31 = 4;
      }
      unint64_t v32 = v30 - v31;
      uint64_t v26 = (uint64_t *)((char *)v62[0] + 24 * v32);
      int64x2_t v33 = 0uLL;
      long long v34 = (const double *)v62[0];
      int64x2_t v35 = 0uLL;
      do
      {
        long long v36 = v34;
        v34 += 12;
        float64x2x3_t v81 = vld3q_f64(v36);
        v36 += 6;
        v81.val[0] = (float64x2_t)vshrq_n_s64(vsubq_s64((int64x2_t)v81.val[1], (int64x2_t)v81.val[0]), 3uLL);
        float64_t v37 = v81.val[0].f64[1];
        *(float64x2x3_t *)((char *)&v81 + 16) = vld3q_f64(v36);
        unint64_t v38 = 0xEEEEEEEEEEEEEEEFLL * *(void *)&v81.val[0].f64[0];
        v81.val[0] = (float64x2_t)vshrq_n_s64(vsubq_s64((int64x2_t)v81.val[2], (int64x2_t)v81.val[1]), 3uLL);
        *(void *)&v81.val[1].f64[0] = v38;
        *(void *)&v81.val[1].f64[1] = 0xEEEEEEEEEEEEEEEFLL * *(void *)&v37;
        *(void *)&v81.val[0].f64[0] *= 0xEEEEEEEEEEEEEEEFLL;
        *(void *)&v81.val[0].f64[1] *= 0xEEEEEEEEEEEEEEEFLL;
        int64x2_t v33 = vaddq_s64((int64x2_t)v81.val[1], v33);
        int64x2_t v35 = vaddq_s64((int64x2_t)v81.val[0], v35);
        v32 -= 4;
      }
      while (v32);
      unint64_t v25 = vaddvq_s64(vaddq_s64(v35, v33));
    }
    else
    {
      unint64_t v25 = 0;
      uint64_t v26 = (uint64_t *)v62[0];
    }
    do
    {
      uint64_t v39 = *v26;
      uint64_t v40 = v26[1];
      v26 += 3;
      v25 -= 0x1111111111111111 * ((v40 - v39) >> 3);
    }
    while (v26 != v62[1]);
    double v29 = (double)(v25 / (0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3)));
  }
  *(double *)&v63[16] = v29;
  *(unsigned char *)uint64_t v56 = 1;
  *(void *)(v56 + 8) = v22;
  *(void *)(v56 + 16) = v23;
  *(void *)(v56 + 24) = *(void *)v63;
  v62[1] = 0;
  *(void *)v63 = 0;
  v62[0] = 0;
  *(_OWORD *)(v56 + 32) = *(_OWORD *)&v63[8];
  if (v80)
  {
LABEL_54:
    uint64_t v41 = (uint64_t)v76;
    if (v76)
    {
      uint64_t v42 = (uint64_t)v77;
      v43 = v76;
      if (v77 != v76)
      {
        do
        {
          if (*(char *)(v42 - 1) < 0) {
            operator delete(*(void **)(v42 - 24));
          }
          v42 -= 32;
        }
        while (v42 != v41);
        v43 = v76;
      }
      v77 = (unsigned char *)v41;
      operator delete(v43);
    }
  }
LABEL_62:
  uint64_t v44 = (void **)v62[0];
  if (v62[0])
  {
    v45 = (void **)v62[1];
    uint64_t v46 = v62[0];
    if (v62[1] == v62[0])
    {
LABEL_81:
      v62[1] = v44;
      operator delete(v46);
      return;
    }
    v47 = (void **)v62[1];
    while (2)
    {
      int v50 = (void **)*(v47 - 3);
      v47 -= 3;
      uint64_t v49 = v50;
      if (!v50)
      {
LABEL_67:
        v45 = v47;
        if (v47 == v44)
        {
          uint64_t v46 = v62[0];
          goto LABEL_81;
        }
        continue;
      }
      break;
    }
    v51 = (void **)*(v45 - 2);
    long long v48 = v49;
    if (v51 == v49)
    {
LABEL_66:
      *(v45 - 2) = v49;
      operator delete(v48);
      goto LABEL_67;
    }
    while (2)
    {
      if (*((char *)v51 - 1) < 0)
      {
        operator delete(*(v51 - 3));
        v52 = v51 - 15;
        __n128 v53 = *(v51 - 15);
        if (!v53) {
          goto LABEL_72;
        }
      }
      else
      {
        v52 = v51 - 15;
        __n128 v53 = *(v51 - 15);
        if (!v53) {
          goto LABEL_72;
        }
      }
      uint64_t v54 = (uint64_t)*(v51 - 14);
      long long v55 = v53;
      if ((void *)v54 != v53)
      {
        do
          uint64_t v54 = sub_3AFFFC(v54 - 1056);
        while ((void *)v54 != v53);
        long long v55 = *v52;
      }
      *(v51 - 14) = v53;
      operator delete(v55);
LABEL_72:
      v51 = v52;
      if (v52 == v49)
      {
        long long v48 = *v47;
        goto LABEL_66;
      }
      continue;
    }
  }
}

void sub_CDC1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_CDC220(v9 - 160);
  sub_C66564((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_CDC220(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v4 = *(void **)(a1 + 16);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0) {
            operator delete(*(void **)(v3 - 24));
          }
          v3 -= 32;
        }
        while (v3 != v2);
        uint64_t v4 = *(void **)(a1 + 16);
      }
      *(void *)(a1 + 24) = v2;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 48) = 0;
  }
  return a1;
}

__n128 sub_CDC2A0(uint64_t a1, uint64_t a2, void ***a3, uint64_t a4)
{
  uint64_t v6 = *a3;
  if (*a3)
  {
    uint64_t v8 = a3[1];
    uint64_t v9 = *a3;
    if (v8 == v6)
    {
LABEL_14:
      a3[1] = v6;
      operator delete(v9);
      goto LABEL_15;
    }
    while (1)
    {
      if (*((char *)v8 - 1) < 0)
      {
        operator delete(*(v8 - 3));
        double v10 = v8 - 15;
        v11 = *(v8 - 15);
        if (v11)
        {
LABEL_10:
          uint64_t v12 = (uint64_t)*(v8 - 14);
          BOOL v13 = v11;
          if ((void *)v12 != v11)
          {
            do
              uint64_t v12 = sub_3AFFFC(v12 - 1056);
            while ((void *)v12 != v11);
            BOOL v13 = *v10;
          }
          *(v8 - 14) = v11;
          operator delete(v13);
        }
      }
      else
      {
        double v10 = v8 - 15;
        v11 = *(v8 - 15);
        if (v11) {
          goto LABEL_10;
        }
      }
      uint64_t v8 = v10;
      if (v10 == v6)
      {
        uint64_t v9 = *a3;
        goto LABEL_14;
      }
    }
  }
LABEL_15:
  *(_OWORD *)a2 = *(_OWORD *)a4;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  __n128 result = *(__n128 *)(a4 + 16);
  *(__n128 *)(a2 + 16) = result;
  *(void *)(a2 + 32) = *(void *)(a4 + 32);
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a4 + 40);
  return result;
}

__n128 sub_CDC3A4(void ***a1, __n128 *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = *a1;
    if (v5 == v4)
    {
LABEL_14:
      a1[1] = v4;
      operator delete(v6);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      goto LABEL_15;
    }
    while (1)
    {
      if (*((char *)v5 - 1) < 0)
      {
        operator delete(*(v5 - 3));
        uint64_t v7 = v5 - 15;
        uint64_t v8 = *(v5 - 15);
        if (v8)
        {
LABEL_10:
          uint64_t v9 = (uint64_t)*(v5 - 14);
          double v10 = v8;
          if ((void *)v9 != v8)
          {
            do
              uint64_t v9 = sub_3AFFFC(v9 - 1056);
            while ((void *)v9 != v8);
            double v10 = *v7;
          }
          *(v5 - 14) = v8;
          operator delete(v10);
        }
      }
      else
      {
        uint64_t v7 = v5 - 15;
        uint64_t v8 = *(v5 - 15);
        if (v8) {
          goto LABEL_10;
        }
      }
      uint64_t v5 = v7;
      if (v7 == v4)
      {
        uint64_t v6 = *a1;
        goto LABEL_14;
      }
    }
  }
LABEL_15:
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  a1[2] = (void **)a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t *sub_CDC48C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_B128((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    BOOL v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  unint64_t v25 = (char *)operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)unint64_t v25 = 0;
  *((void *)v25 + 1) = v10;
  uint64_t v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_4200(v26, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  v25[40] = *(unsigned char *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        double v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        unint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        double v29 = *(void **)(*(void *)a1 + 8 * v10);
        unint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      double v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      unint64_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *unint64_t v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  double v29 = *(void **)(*(void *)a1 + 8 * v3);
  unint64_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *unint64_t v30 = *v29;
  *double v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_CDC8D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_CDC8E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_24F64((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_CDC900(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *a2;
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  sub_97B130(v3, *(void *)v4, *(void *)(v4 + 8), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 5));
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v4 + 24);
  long long v5 = *(_OWORD *)(v4 + 40);
  long long v6 = *(_OWORD *)(v4 + 56);
  long long v7 = *(_OWORD *)(v4 + 72);
  *(void *)(v3 + 85) = *(void *)(v4 + 85);
  *(_OWORD *)(v3 + 72) = v7;
  *(_OWORD *)(v3 + 56) = v6;
  *(_OWORD *)(v3 + 40) = v5;
  __n128 result = (unsigned char *)(v3 + 96);
  if (*(char *)(v4 + 119) < 0)
  {
    __n128 result = sub_4200(result, *(void **)(v4 + 96), *(void *)(v4 + 104));
  }
  else
  {
    long long v9 = *(_OWORD *)(v4 + 96);
    *(void *)(v3 + 112) = *(void *)(v4 + 112);
    *(_OWORD *)__n128 result = v9;
  }
  *(void *)(a1 + 8) = v3 + 120;
  return result;
}

void sub_CDC9D0(_Unwind_Exception *exception_object)
{
  if (*v2)
  {
    sub_20A9E18((uint64_t)v2);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *sub_CDCA00(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x222222222222222) {
    sub_2E00();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) >= 0x111111111111111) {
    unint64_t v6 = 0x222222222222222;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x222222222222222) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(120 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v29 = (uint64_t)&v7[120 * v3];
  BOOL v31 = &v7[120 * v6];
  uint64_t v8 = *a2;
  *(void *)(v29 + 8) = 0;
  *(void *)(v29 + 16) = 0;
  *(void *)uint64_t v29 = 0;
  sub_97B130(v29, *(void *)v8, *(void *)(v8 + 8), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 5));
  *(_OWORD *)(v29 + 24) = *(_OWORD *)(v8 + 24);
  long long v9 = *(_OWORD *)(v8 + 40);
  long long v10 = *(_OWORD *)(v8 + 56);
  long long v11 = *(_OWORD *)(v8 + 72);
  *(void *)(v29 + 85) = *(void *)(v8 + 85);
  *(_OWORD *)(v29 + 72) = v11;
  *(_OWORD *)(v29 + 56) = v10;
  *(_OWORD *)(v29 + 40) = v9;
  uint8x8_t v12 = (unsigned char *)(v29 + 96);
  if (*(char *)(v8 + 119) < 0)
  {
    sub_4200(v12, *(void **)(v8 + 96), *(void *)(v8 + 104));
  }
  else
  {
    long long v13 = *(_OWORD *)(v8 + 96);
    *(void *)(v29 + 112) = *(void *)(v8 + 112);
    *(_OWORD *)uint8x8_t v12 = v13;
  }
  v14 = &v7[120 * v3];
  unint64_t v30 = v14;
  char v15 = v14 + 120;
  uint64_t v16 = (void **)*a1;
  unint64_t v17 = (void **)a1[1];
  if (v17 == (void **)*a1)
  {
    *a1 = v29;
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v31;
    goto LABEL_29;
  }
  do
  {
    *((void *)v14 - 15) = 0;
    *((void *)v14 - 14) = 0;
    v14 -= 120;
    *((void *)v14 + 2) = 0;
    long long v18 = *(_OWORD *)(v17 - 15);
    v17 -= 15;
    *(_OWORD *)v14 = v18;
    *((void *)v14 + 2) = v17[2];
    v17[1] = 0;
    v17[2] = 0;
    *unint64_t v17 = 0;
    long long v19 = *(_OWORD *)(v17 + 7);
    long long v20 = *(_OWORD *)(v17 + 9);
    uint64_t v21 = *(uint64_t *)((char *)v17 + 85);
    *(_OWORD *)(v14 + 40) = *(_OWORD *)(v17 + 5);
    *(void *)(v14 + 85) = v21;
    *(_OWORD *)(v14 + 72) = v20;
    *(_OWORD *)(v14 + 56) = v19;
    *(_OWORD *)(v14 + 24) = *(_OWORD *)(v17 + 3);
    long long v22 = *((_OWORD *)v17 + 6);
    *((void *)v14 + 14) = v17[14];
    *((_OWORD *)v14 + 6) = v22;
    v17[13] = 0;
    v17[14] = 0;
    v17[12] = 0;
  }
  while (v17 != v16);
  uint64_t v23 = (void **)*a1;
  unint64_t v17 = (void **)a1[1];
  *a1 = (uint64_t)v14;
  a1[1] = (uint64_t)v15;
  a1[2] = (uint64_t)v31;
  if (v17 == v23) {
    goto LABEL_29;
  }
  do
  {
    if (*((char *)v17 - 1) < 0)
    {
      operator delete(*(v17 - 3));
      uint64_t v24 = v17 - 15;
      unint64_t v25 = *(v17 - 15);
      if (!v25) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v24 = v17 - 15;
      unint64_t v25 = *(v17 - 15);
      if (!v25) {
        goto LABEL_20;
      }
    }
    uint64_t v26 = (uint64_t)*(v17 - 14);
    float v27 = v25;
    if ((void *)v26 != v25)
    {
      do
        uint64_t v26 = sub_3AFFFC(v26 - 1056);
      while ((void *)v26 != v25);
      float v27 = *v24;
    }
    *(v17 - 14) = v25;
    operator delete(v27);
LABEL_20:
    unint64_t v17 = v24;
  }
  while (v24 != v23);
  unint64_t v17 = v23;
LABEL_29:
  if (v17) {
    operator delete(v17);
  }
  return v30 + 120;
}

void sub_CDCCA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*v2)
  {
    sub_20A9E18((uint64_t)v2);
    sub_5AC2CC((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_5AC2CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_CDCCDC(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3 != a2)
  {
    unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * (a3 - a2);
    if (v4 >= 0x11A7B9611A7B962) {
      sub_2E00();
    }
    unint64_t v6 = a2;
    long long v7 = (char *)operator new(0x8888888888888898 * (a3 - a2));
    uint64_t v8 = v7;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[232 * v4];
    if (v6 != a3)
    {
      long long v9 = v7;
      do
      {
        *(void *)long long v9 = sub_45FB28(v6, 0);
        *((void *)v9 + 1) = v6;
        *((_OWORD *)v9 + 1) = 0u;
        *((_OWORD *)v9 + 2) = 0u;
        *((_OWORD *)v9 + 3) = 0u;
        *((_OWORD *)v9 + 4) = 0u;
        *((_OWORD *)v9 + 5) = 0u;
        *((_OWORD *)v9 + 6) = 0u;
        *((_OWORD *)v9 + 7) = 0u;
        *((_OWORD *)v9 + 8) = 0u;
        *((_OWORD *)v9 + 9) = 0u;
        *((_OWORD *)v9 + 10) = 0u;
        *((_OWORD *)v9 + 11) = 0u;
        *((_OWORD *)v9 + 12) = 0u;
        v6 += 15;
        *((_OWORD *)v9 + 13) = 0u;
        *((void *)v9 + 28) = 0;
        v9 += 232;
      }
      while (v6 != a3);
      uint64_t v8 = v9;
    }
    a1[1] = v8;
  }
  return a1;
}

void sub_CDCDD4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_CDCDFC(void ***a1, long long **a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x5555555555555556 * (a1[2] - *a1);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(24 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v23 = &v7[24 * v3];
  uint64_t v24 = &v7[24 * v6];
  sub_CDD030(v23, a2);
  uint64_t v8 = (void **)v23;
  long long v9 = *a1;
  long long v10 = a1[1];
  if (v10 == *a1)
  {
    uint8x8_t v12 = a1[1];
  }
  else
  {
    do
    {
      *(v8 - 3) = 0;
      *(v8 - 2) = 0;
      v8 -= 3;
      __n128 v8[2] = 0;
      long long v11 = *(_OWORD *)(v10 - 3);
      v10 -= 3;
      *(_OWORD *)uint64_t v8 = v11;
      __n128 v8[2] = v10[2];
      *long long v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
    }
    while (v10 != v9);
    uint8x8_t v12 = *a1;
    long long v10 = a1[1];
  }
  *a1 = v8;
  a1[1] = (void **)(v23 + 24);
  a1[2] = (void **)v24;
  if (v10 != v12)
  {
    long long v13 = v10;
    while (1)
    {
      uint64_t v16 = (void **)*(v13 - 3);
      v13 -= 3;
      char v15 = v16;
      if (v16) {
        break;
      }
LABEL_19:
      long long v10 = v13;
      if (v13 == v12)
      {
        long long v10 = v12;
        goto LABEL_33;
      }
    }
    unint64_t v17 = (void **)*(v10 - 2);
    if (v17 == v15)
    {
      v14 = v15;
LABEL_18:
      *(v10 - 2) = v15;
      operator delete(v14);
      goto LABEL_19;
    }
    while (1)
    {
      if (*((char *)v17 - 1) < 0)
      {
        operator delete(*(v17 - 3));
        long long v18 = v17 - 15;
        long long v19 = *(v17 - 15);
        if (v19)
        {
LABEL_29:
          uint64_t v20 = (uint64_t)*(v17 - 14);
          uint64_t v21 = v19;
          if ((void *)v20 != v19)
          {
            do
              uint64_t v20 = sub_3AFFFC(v20 - 1056);
            while ((void *)v20 != v19);
            uint64_t v21 = *v18;
          }
          *(v17 - 14) = v19;
          operator delete(v21);
        }
      }
      else
      {
        long long v18 = v17 - 15;
        long long v19 = *(v17 - 15);
        if (v19) {
          goto LABEL_29;
        }
      }
      unint64_t v17 = v18;
      if (v18 == v15)
      {
        v14 = *v13;
        goto LABEL_18;
      }
    }
  }
LABEL_33:
  if (v10) {
    operator delete(v10);
  }
  return v23 + 24;
}

void sub_CDD01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_CDD030(void *a1, long long **a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  unint64_t v4 = *a2;
  long long v5 = a2[1];
  int64_t v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xEEEEEEEEEEEEEEEFLL * (v6 >> 3);
    if (v7 >= 0x222222222222223) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[120 * v7];
    a1[1] = sub_CDD108(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_CDD0DC(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20AF994(v1 + 1, *v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_CDD108(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v14 = a4;
  if (a2 != a3)
  {
    int64_t v6 = a2 + 6;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      uint64_t v8 = v6 - 6;
      sub_97B130(v4, *((void *)v6 - 12), *((void *)v6 - 11), 0xF83E0F83E0F83E1 * ((uint64_t)(*((void *)v6 - 11) - *((void *)v6 - 12)) >> 5));
      *(_OWORD *)(v4 + 24) = *(long long *)((char *)v6 - 72);
      long long v9 = *(long long *)((char *)v6 - 56);
      long long v10 = *(long long *)((char *)v6 - 40);
      long long v11 = *(long long *)((char *)v6 - 24);
      *(void *)(v4 + 85) = *(void *)((char *)v6 - 11);
      *(_OWORD *)(v4 + 72) = v11;
      *(_OWORD *)(v4 + 56) = v10;
      *(_OWORD *)(v4 + 40) = v9;
      uint8x8_t v12 = (unsigned char *)(v4 + 96);
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v12, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        *(void *)(v4 + 112) = *((void *)v6 + 2);
        *(_OWORD *)uint8x8_t v12 = v7;
      }
      uint64_t v4 = v14 + 120;
      v14 += 120;
      int64_t v6 = (long long *)((char *)v6 + 120);
    }
    while ((long long *)((char *)v8 + 120) != a3);
  }
  return v4;
}

void sub_CDD210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*v9)
  {
    sub_20AEE38((uint64_t)v9);
    sub_97B074((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_97B074((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_CDD248(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 24);
    long long v7 = *(void **)(a1 + 16);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 32;
      }
      while (v6 != v5);
      long long v7 = *(void **)v4;
    }
    *(void *)(a1 + 24) = v5;
    operator delete(v7);
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
  }
  __n128 result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 16) = result;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

void sub_CDD2F8()
{
  byte_25E5EB7 = 1;
  word_25E5EA0 = 65;
  byte_25E5ECF = 1;
  word_25E5EB8 = 65;
  byte_25E5EE7 = 8;
  strcpy((char *)&qword_25E5ED0, "any_mode");
  byte_25E5EFF = 7;
  strcpy((char *)&dword_25E5EE8, "cycling");
  byte_25E5F17 = 7;
  strcpy((char *)&dword_25E5F00, "driving");
  byte_25E5F2F = 7;
  strcpy((char *)&dword_25E5F18, "walking");
  byte_25E5F47 = 21;
  strcpy((char *)&xmmword_25E5F30, "enable_coverage_check");
  byte_25E5F5F = 14;
  strcpy((char *)&qword_25E5F48, "default_region");
  byte_25E5F77 = 17;
  strcpy((char *)&xmmword_25E5F60, "supported_regions");
  byte_25E5F8F = 17;
  strcpy(byte_25E5F78, "preflight_regions");
  qword_25E5F90 = (uint64_t)operator new(0x19uLL);
  unk_25E5F98 = xmmword_20B9250;
  strcpy((char *)qword_25E5F90, "supported_country_codes");
  qword_25E5FA8 = (uint64_t)operator new(0x19uLL);
  xmmword_25E5FB0 = xmmword_20B9250;
  strcpy((char *)qword_25E5FA8, "preflight_country_codes");
  __int16 v3 = 17;
  strcpy(v2, "segment_curviness");
  __int16 v5 = 262;
  strcpy((char *)v4, "length");
  __int16 v7 = 529;
  strcpy(v6, "length_on_ferries");
  HIBYTE(v8[2]) = 21;
  strcpy((char *)v8, "num_impeding_barriers");
  char v9 = 3;
  HIBYTE(v10[2]) = 16;
  strcpy((char *)v10, "num_name_changes");
  char v11 = 4;
  uint8x8_t v12 = operator new(0x20uLL);
  long long v13 = xmmword_20B8890;
  strcpy((char *)v12, "num_dangerous_zone_violations");
  char v14 = 5;
  char v15 = operator new(0x28uLL);
  long long v16 = xmmword_20B9390;
  strcpy((char *)v15, "num_terminal_use_zone_violations");
  char v17 = 6;
  __int16 v19 = 1806;
  strcpy((char *)v18, "traversal_time");
  HIBYTE(v20[2]) = 22;
  strcpy((char *)v20, "display_traversal_time");
  char v21 = 8;
  v22[0] = operator new(0x20uLL);
  v22[1] = &dword_1C + 3;
  unint64_t v23 = 0x8000000000000020;
  strcpy((char *)v22[0], "time_violating_avoid_busy_roads");
  char v24 = 9;
  v25[0] = operator new(0x20uLL);
  v25[1] = &dword_18 + 3;
  unint64_t v26 = 0x8000000000000020;
  strcpy((char *)v25[0], "time_violating_avoid_stairs");
  char v27 = 10;
  v28[0] = operator new(0x28uLL);
  v28[1] = &stru_20;
  unint64_t v29 = 0x8000000000000028;
  strcpy((char *)v28[0], "time_violating_avoid_steep_hills");
  char v30 = 11;
  strcpy((char *)v31, "time_on_dangerous_road");
  HIBYTE(v31[2]) = 22;
  char v32 = 12;
  HIBYTE(v33[2]) = 20;
  strcpy((char *)v33, "time_on_terminal_fow");
  char v34 = 13;
  v0 = operator new(0x20uLL);
  unint64_t v36 = 0x8000000000000020;
  v35[0] = v0;
  v35[1] = &dword_18 + 3;
  strcpy((char *)v0, "time_on_pathway_fow_in_park");
  char v37 = 14;
  uint64_t v1 = operator new(0x20uLL);
  unint64_t v39 = 0x8000000000000020;
  v38[0] = v1;
  v38[1] = &dword_1C + 3;
  strcpy((char *)v1, "time_on_named_trail_fow_in_park");
  char v40 = 15;
  v41[0] = operator new(0x20uLL);
  unint64_t v42 = 0x8000000000000020;
  v41[1] = &dword_18 + 2;
  strcpy((char *)v41[0], "time_on_duplicate_segments");
  char v43 = 16;
  v44[0] = operator new(0x20uLL);
  unint64_t v45 = 0x8000000000000020;
  v44[1] = &dword_18 + 1;
  strcpy((char *)v44[0], "uses_contingency_terminal");
  char v46 = 17;
  *(_WORD *)((char *)&v47[2] + 7) = 4624;
  strcpy((char *)v47, "route_jaggedness");
  v48[0] = operator new(0x20uLL);
  unint64_t v49 = 0x8000000000000020;
  v48[1] = &dword_18 + 1;
  strcpy((char *)v48[0], "extra_elevation_change_cm");
  char v50 = 19;
  v51[0] = operator new(0x20uLL);
  unint64_t v52 = 0x8000000000000020;
  v51[1] = &dword_1C + 1;
  strcpy((char *)v51[0], "extra_elevation_violations_cm");
  char v53 = 20;
  *(_WORD *)((char *)&v54[2] + 7) = 5393;
  strcpy((char *)v54, "hiking_difficulty");
  *(_WORD *)((char *)&v55[2] + 7) = 5650;
  strcpy((char *)v55, "time_inside_a_park");
  v56[0] = operator new(0x20uLL);
  unint64_t v57 = 0x8000000000000020;
  v56[1] = &dword_18 + 3;
  strcpy((char *)v56[0], "normalized_park_probe_count");
  char v58 = 23;
  __p[0] = operator new(0x20uLL);
  unint64_t v60 = 0x8000000000000020;
  __p[1] = &dword_1C + 1;
  strcpy((char *)__p[0], "length_in_unsupported_regions");
  char v61 = 24;
  xmmword_25E5FC0 = 0u;
  *(_OWORD *)&qword_25E5FD0 = 0u;
  dword_25E5FE0 = 1065353216;
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v2, (uint64_t)v2);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v4, (uint64_t)v4);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v6, (uint64_t)v6);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v8, (uint64_t)v8);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v10, (uint64_t)v10);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)&v12, (uint64_t)&v12);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)&v15, (uint64_t)&v15);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v18, (uint64_t)v18);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v20, (uint64_t)v20);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v22, (uint64_t)v22);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v25, (uint64_t)v25);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v28, (uint64_t)v28);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v31, (uint64_t)v31);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v33, (uint64_t)v33);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v35, (uint64_t)v35);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v38, (uint64_t)v38);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v41, (uint64_t)v41);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v44, (uint64_t)v44);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v47, (uint64_t)v47);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v48, (uint64_t)v48);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v51, (uint64_t)v51);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v54, (uint64_t)v54);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v55, (uint64_t)v55);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)v56, (uint64_t)v56);
  sub_CDC48C((uint64_t)&xmmword_25E5FC0, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v60) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v57) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v55[2]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((SHIBYTE(v57) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v56[0]);
  if ((SHIBYTE(v55[2]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v54[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v55[0]);
  if ((SHIBYTE(v54[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SHIBYTE(v52) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v54[0]);
  if ((SHIBYTE(v52) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v49) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v51[0]);
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
LABEL_7:
    if ((SHIBYTE(v47[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v48[0]);
  if ((SHIBYTE(v47[2]) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v45) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v47[0]);
  if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v42) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v44[0]);
  if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v41[0]);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v36) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v38[0]);
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v33[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v35[0]);
  if ((SHIBYTE(v33[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v31[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v33[0]);
  if ((SHIBYTE(v31[2]) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v29) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v31[0]);
  if ((SHIBYTE(v29) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v26) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v28[0]);
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v25[0]);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v20[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v22[0]);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if (((char)v19 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v20[0]);
  if (((char)v19 & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v16) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v18[0]);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v15);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v10[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  operator delete(v12);
  if ((SHIBYTE(v10[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v8[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v10[0]);
  if ((SHIBYTE(v8[2]) & 0x80000000) == 0)
  {
LABEL_23:
    if (((char)v7 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }
LABEL_48:
  operator delete(v8[0]);
  if (((char)v7 & 0x80000000) == 0)
  {
LABEL_24:
    if (((char)v5 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_50;
  }
LABEL_49:
  operator delete(*(void **)v6);
  if (((char)v5 & 0x80000000) == 0)
  {
LABEL_25:
    if (((char)v3 & 0x80000000) == 0) {
      return;
    }
LABEL_51:
    operator delete(*(void **)v2);
    return;
  }
LABEL_50:
  operator delete(v4[0]);
  if ((char)v3 < 0) {
    goto LABEL_51;
  }
}

void sub_CDDE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  char v21 = v19;
  while (1)
  {
    if (*((char *)v21 - 9) < 0) {
      operator delete(*(v21 - 4));
    }
    v21 -= 4;
    if (v21 == &a19) {
      _Unwind_Resume(a1);
    }
  }
}

void sub_CDE1D8()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v254 = v1;
  memset(v329, 0, 36);
  *(_OWORD *)v328 = 0u;
  sub_725D0((uint64_t)v327);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = v2 + 40;
  BOOL v5 = v2 == v3 || v4 == v3;
  if (!v5)
  {
    do
    {
      uint64_t v8 = *(void *)(v2 + 32);
      if (v8 != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v9 = *(void *)(v4 + 32);
        if (v8 < v9 || v9 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v2 = v4;
        }
      }
      v4 += 40;
    }
    while (v4 != v3);
  }
  if (v2 == v3 || (uint64_t v6 = *(void *)(v2 + 32), v6 == 0x7FFFFFFFFFFFFFFFLL)) {
    uint64_t v6 = 0x7FFFFFFFFFFFFFFELL;
  }
  if (v6 > *(void *)(v0 + 136))
  {
    __p.n128_u64[0] = 15;
    __p.n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814(v308, &__p);
    *(unsigned char *)uint64_t v254 = 0;
    __n128 v7 = v308[1];
    *(__n128 *)(v254 + 8) = v308[0];
    *(__n128 *)(v254 + 24) = v7;
    *(void *)(v254 + 40) = v309;
    *(_DWORD *)(v254 + 48) = v310;
    goto LABEL_504;
  }
  char v11 = *(uint64_t **)(v0 + 104);
  v308[1].n128_u8[7] = 10;
  strcpy((char *)v308, "WalkingETA");
  __n128 __p = 0uLL;
  uint64_t v321 = 0;
  uint8x8_t v12 = sub_374CDC((uint64_t)v11, (uint64_t)v308, (uint64_t *)&__p);
  sub_54214((uint64_t)v325, (uint64_t)v12);
  unint64_t v13 = __p.n128_u64[0];
  if (__p.n128_u64[0])
  {
    unint64_t v14 = __p.n128_u64[1];
    char v15 = (void *)__p.n128_u64[0];
    if (__p.n128_u64[1] != __p.n128_u64[0])
    {
      do
      {
        if (*(char *)(v14 - 1) < 0) {
          operator delete(*(void **)(v14 - 24));
        }
        v14 -= 24;
      }
      while (v14 != v13);
      char v15 = (void *)__p.n128_u64[0];
    }
    __p.n128_u64[1] = v13;
    operator delete(v15);
  }
  if (v308[1].n128_i8[7] < 0) {
    operator delete((void *)v308[0].n128_u64[0]);
  }
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v308);
    long long v16 = sub_188FC78(v308, (uint64_t)"Using walking cost function ", 28);
    uint64_t v17 = *(void *)(v0 + 200);
    uint64_t v20 = *(void *)(v17 + 8);
    uint64_t v18 = v17 + 8;
    uint64_t v19 = v20;
    int v21 = *(char *)(v18 + 23);
    if (v21 >= 0) {
      uint64_t v22 = v18;
    }
    else {
      uint64_t v22 = v19;
    }
    if (v21 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(v18 + 23);
    }
    else {
      uint64_t v23 = *(void *)(v18 + 8);
    }
    sub_188FC78(v16, v22, v23);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (SHIBYTE(v321) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (v312 < 0) {
      operator delete(v311);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  char v24 = *(void **)(v0 + 192);
  strcpy((char *)v308, "enable_u_turn_clipping");
  v308[1].n128_u8[7] = 22;
  BOOL v265 = sub_29D62C(v24, (uint64_t)v308);
  if (v308[1].n128_i8[7] < 0) {
    operator delete((void *)v308[0].n128_u64[0]);
  }
  sub_BEF160((uint64_t)&__p, v11, 1);
  v308[1].n128_u8[7] = 11;
  strcpy((char *)v308, "PathFinding");
  memset(v334, 0, 24);
  unint64_t v25 = sub_374CDC((uint64_t)v11, (uint64_t)v308, (uint64_t *)v334);
  unint64_t v26 = v334[0].n128_u64[0];
  if (v334[0].n128_u64[0])
  {
    unint64_t v27 = v334[0].n128_u64[1];
    float v28 = (void *)v334[0].n128_u64[0];
    if (v334[0].n128_u64[1] != v334[0].n128_u64[0])
    {
      do
      {
        if (*(char *)(v27 - 1) < 0) {
          operator delete(*(void **)(v27 - 24));
        }
        v27 -= 24;
      }
      while (v27 != v26);
      float v28 = (void *)v334[0].n128_u64[0];
    }
    v334[0].n128_u64[1] = v26;
    operator delete(v28);
  }
  if (v308[1].n128_i8[7] < 0) {
    operator delete((void *)v308[0].n128_u64[0]);
  }
  v308[1].n128_u8[7] = 12;
  strcpy((char *)v308, "use_dijkstra");
  BOOL v29 = sub_29D62C(v25, (uint64_t)v308);
  if (v308[1].n128_i8[7] < 0) {
    operator delete((void *)v308[0].n128_u64[0]);
  }
  v308[1].n128_u8[7] = 21;
  strcpy((char *)v308, "max_num_scanned_nodes");
  int v30 = sub_31AC04(v25, (uint64_t)v308);
  if (v308[1].n128_i8[7] < 0) {
    operator delete((void *)v308[0].n128_u64[0]);
  }
  v308[1].n128_u8[7] = 19;
  strcpy((char *)v308, "WalkingPathAnalyzer");
  memset(v334, 0, 24);
  BOOL v31 = sub_374CDC((uint64_t)v11, (uint64_t)v308, (uint64_t *)v334);
  __t[23] = 7;
  strcpy(__t, "default");
  char v32 = (void *)sub_560F4(v31, (uint64_t)__t);
  sub_106AD24(v318, v11, v32, 2);
  if ((__t[23] & 0x80000000) != 0) {
    operator delete(*(void **)__t);
  }
  unint64_t v33 = v334[0].n128_u64[0];
  if (v334[0].n128_u64[0])
  {
    unint64_t v34 = v334[0].n128_u64[1];
    int8x8_t v35 = (void *)v334[0].n128_u64[0];
    if (v334[0].n128_u64[1] != v334[0].n128_u64[0])
    {
      do
      {
        if (*(char *)(v34 - 1) < 0) {
          operator delete(*(void **)(v34 - 24));
        }
        v34 -= 24;
      }
      while (v34 != v33);
      int8x8_t v35 = (void *)v334[0].n128_u64[0];
    }
    v334[0].n128_u64[1] = v33;
    operator delete(v35);
  }
  if (v308[1].n128_i8[7] < 0) {
    operator delete((void *)v308[0].n128_u64[0]);
  }
  if (*(unsigned char *)(v0 + 128)) {
    unint64_t v36 = "hiking";
  }
  else {
    unint64_t v36 = "walking";
  }
  if (*(unsigned char *)(v0 + 128)) {
    size_t v37 = 6;
  }
  else {
    size_t v37 = 7;
  }
  v334[1].n128_u8[7] = v37;
  memcpy(v334, v36, v37);
  *(unsigned char *)((unint64_t)v334 | v37) = 0;
  sub_1072C74((uint64_t)v308, v11, (uint64_t)v334, 2);
  if (v334[1].n128_i8[7] < 0) {
    operator delete((void *)v334[0].n128_u64[0]);
  }
  sub_F41B0C((uint64_t)v301, v25, (uint64_t)v11, (uint64_t)v318, (uint64_t)v308, (uint64_t)&__p);
  v299 = 0;
  v298 = 0;
  unint64_t v300 = 0;
  int v38 = *(_DWORD *)(v0 + 152);
  uint64_t v272 = v0;
  int v39 = v29 - 1;
  switch(v38)
  {
    case 0:
      v334[0].n128_u64[0] = (unint64_t)operator new(0x20uLL);
      *(__n128 *)((char *)v334 + 8) = (__n128)xmmword_20B91C0;
      strcpy((char *)v334[0].n128_u64[0], "OneToManyPathComputation");
      memset(__t, 0, sizeof(__t));
      char v40 = sub_374CDC((uint64_t)v11, (uint64_t)v334, (uint64_t *)__t);
      v273[1].i8[7] = 7;
      strcpy(v273[0].i8, "default");
      uint64_t v41 = sub_560F4(v40, (uint64_t)v273);
      if (v273[1].i8[7] < 0) {
        operator delete((void *)v273[0].i64[0]);
      }
      uint64_t v42 = *(void *)__t;
      if (*(void *)__t)
      {
        uint64_t v43 = *(void *)&__t[8];
        uint64_t v44 = *(void **)__t;
        if (*(void *)&__t[8] != *(void *)__t)
        {
          do
          {
            if (*(char *)(v43 - 1) < 0) {
              operator delete(*(void **)(v43 - 24));
            }
            v43 -= 24;
          }
          while (v43 != v42);
          uint64_t v44 = *(void **)__t;
        }
        *(void *)&__t[8] = v42;
        operator delete(v44);
      }
      if (v334[1].n128_i8[7] < 0) {
        operator delete((void *)v334[0].n128_u64[0]);
      }
      sub_F5982C((uint64_t)v334, v41, (uint64_t)v11, (uint64_t)&__p, v39, v30);
      sub_CE3C68(v273, *(void *)(v0 + 56), *(void *)(v0 + 64));
      *(void *)__t = v0;
      *(void *)&__t[8] = v273;
      *(void *)&__t[16] = *(void *)(v0 + 200);
      v294[0] = std::chrono::system_clock::now();
      LODWORD(v330[0]) = std::chrono::system_clock::to_time_t(v294);
      HIDWORD(v330[0]) = v330[0];
      LODWORD(v330[1]) = 0;
      v281 = v330;
      LOBYTE(v282) = 0;
      sub_F4D388((uint64_t)v301, (uint64_t)v334, 1, 0, 0, (uint64_t)__t, 0x7FFFFFFFFFFFFFFFLL, (uint64_t *)v332);
      unint64_t v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v0 + 64) - *(void *)(v0 + 56)) >> 3);
      unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * (((char *)v299 - (unsigned char *)v298) >> 3);
      if (v67 <= v68)
      {
        if (v67 < v68)
        {
          int v69 = (void ***)((char *)v298
                         + 0x3333333333333338 * ((uint64_t)(*(void *)(v0 + 64) - *(void *)(v0 + 56)) >> 3));
          if (v299 != v69)
          {
            char v70 = v299 - 3;
            do
            {
              if (*v70)
              {
                sub_CE2264((uint64_t)v70, *v70);
                operator delete(*v70);
              }
              BOOL v5 = v70 == v69;
              v70 -= 3;
            }
            while (!v5);
          }
          v299 = v69;
        }
      }
      else
      {
        sub_CE3E90((uint64_t)&v298, v67 - v68);
      }
      v123 = (char *)v332[1];
      if (v332[1] == v332[0]) {
        goto LABEL_292;
      }
      uint64_t v124 = 0;
      unint64_t v125 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v332[1] - (char *)v332[0]) >> 5);
      break;
    case 1:
      uint64_t v45 = sub_37B3A8((uint64_t)v11);
      uint64_t v46 = *(void *)v45;
      int v297 = *(_DWORD *)(v45 + 8);
      uint64_t v296 = v46;
      strcpy(__t, "MinCostPathComputation");
      __t[23] = 22;
      memset(v273, 0, 24);
      v47 = sub_374CDC((uint64_t)v11, (uint64_t)__t, v273[0].i64);
      HIBYTE(v333[0]) = 7;
      strcpy((char *)v332, "default");
      uint64_t v48 = sub_560F4(v47, (uint64_t)v332);
      sub_F58E2C((uint64_t)v334, v48, (uint64_t)v11, (uint64_t)&__p, v29 - 1, v30);
      if (SHIBYTE(v333[0]) < 0) {
        operator delete(v332[0]);
      }
      uint64_t v49 = v273[0].i64[0];
      if (v273[0].i64[0])
      {
        uint64_t v50 = v273[0].i64[1];
        v51 = (void *)v273[0].i64[0];
        if (v273[0].i64[1] != v273[0].i64[0])
        {
          do
          {
            if (*(char *)(v50 - 1) < 0) {
              operator delete(*(void **)(v50 - 24));
            }
            v50 -= 24;
          }
          while (v50 != v49);
          v51 = (void *)v273[0].i64[0];
        }
        v273[0].i64[1] = v49;
        operator delete(v51);
      }
      if ((__t[23] & 0x80000000) != 0) {
        operator delete(*(void **)__t);
      }
      v273[0].i64[0] = (uint64_t)operator new(0x20uLL);
      *(int64x2_t *)((char *)v273 + 8) = (int64x2_t)xmmword_20B8870;
      strcpy((char *)v273[0].i64[0], "ViaNodePathSetComputation");
      v332[1] = 0;
      v332[0] = 0;
      v333[0] = 0;
      v85 = sub_374CDC((uint64_t)v11, (uint64_t)v273, (uint64_t *)v332);
      char v331 = 7;
      strcpy((char *)v330, "default");
      uint64_t v86 = sub_560F4(v85, (uint64_t)v330);
      sub_F58E2C((uint64_t)__t, v86, (uint64_t)v11, (uint64_t)&__p, v29 - 1, v30);
      if (v331 < 0) {
        operator delete(v330[0]);
      }
      v87 = (void **)v332[0];
      if (v332[0])
      {
        v88 = (void **)v332[1];
        v89 = v332[0];
        if (v332[1] != v332[0])
        {
          do
          {
            if (*((char *)v88 - 1) < 0) {
              operator delete(*(v88 - 3));
            }
            v88 -= 3;
          }
          while (v88 != v87);
          v89 = v332[0];
        }
        v332[1] = v87;
        operator delete(v89);
      }
      if (v273[1].i8[7] < 0) {
        operator delete((void *)v273[0].i64[0]);
      }
      uint64_t v102 = *(void *)(v0 + 56);
      for (uint64_t i = *(void *)(v0 + 64); v102 != i; v102 += 40)
      {
        v332[1] = 0;
        v332[0] = 0;
        v333[0] = 0;
        v273[0].i64[0] = v0;
        v273[0].i64[1] = v102;
        v273[1].i64[0] = *(void *)(v0 + 200);
        v273[1].i64[1] = (uint64_t)&v296;
        LOBYTE(v274) = 2;
        sub_F4B510((uint64_t)v301, (uint64_t)v334, 1, 0, 1, 0x7FFFFFFFFFFFFFFFLL, (uint64_t *)v330);
        v294[1].__d_.__rep_ = 0;
        v294[0].__d_.__rep_ = 0;
        unint64_t v295 = 0;
        if (v330[0] != v330[1] && sub_EB3230((uint64_t)v330[1] - 480))
        {
          v273[0].i64[0] = v0;
          v273[0].i64[1] = v102;
          v273[1].i64[0] = *(void *)(v0 + 200);
          v273[1].i64[1] = (uint64_t)&v296;
          LOBYTE(v274) = 2;
          sub_F6A780();
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = v294[0].__d_.__rep_;
          if (v294[0].__d_.__rep_)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v105 = v294[1].__d_.__rep_;
            v106 = (void *)v294[0].__d_.__rep_;
            if (v294[1].__d_.__rep_ != v294[0].__d_.__rep_)
            {
              do
                std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v105 = sub_4451C0(v105 - 480);
              while (v105 != rep);
              v106 = (void *)v294[0].__d_.__rep_;
            }
            v294[1].__d_.__rep_ = rep;
            operator delete(v106);
          }
          *(_OWORD *)&v294[0].__d_.__rep_ = *(_OWORD *)&v292[0].__d_.__rep_;
          unint64_t v295 = v293;
          sub_1079A74((uint64_t)v294, (uint64_t)v318, (uint64_t)v308, v11);
        }
        char v322 = 0;
        nullsub_1(&__p.n128_i8[8]);
        sub_CE3520((uint64_t)&v323);
        sub_CE35E0((uint64_t)&v324);
        v107 = v11;
        v108 = (long long *)v330[0];
        v109 = (long long *)v330[1];
        v110 = (char *)v332[1];
        while (v108 != v109)
        {
          if ((unint64_t)v110 < v333[0])
          {
            sub_CE3918((uint64_t)v333, (uint64_t)v110, v108);
            v110 += 480;
          }
          else
          {
            v110 = (char *)sub_CE37BC((uint64_t *)v332, v108);
          }
          v332[1] = v110;
          v108 += 30;
        }
        v111 = (long long *)v294[0].__d_.__rep_;
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v112 = v294[1].__d_.__rep_;
        while (v111 != (long long *)v112)
        {
          if ((unint64_t)v110 < v333[0])
          {
            sub_CE3918((uint64_t)v333, (uint64_t)v110, v111);
            v110 += 480;
          }
          else
          {
            v110 = (char *)sub_CE37BC((uint64_t *)v332, v111);
          }
          v332[1] = v110;
          v111 += 30;
        }
        memset(v273, 0, 24);
        v292[1].__d_.__rep_ = 0;
        v292[0].__d_.__rep_ = 0;
        unint64_t v293 = 0;
        sub_CE2494((unint64_t *)v292, 0xEEEEEEEEEEEEEEEFLL * ((v110 - (char *)v332[0]) >> 5));
        sub_CE3A98((long long *)v332[0], (long long *)v332[1], (char **)v292, (char *)v292[1].__d_.__rep_);
        uint64_t v0 = v272;
        char v11 = v107;
        sub_EB7700(v273, &v292[0].__d_.__rep_, 1);
        if (v292[0].__d_.__rep_)
        {
          sub_CE2264((uint64_t)v292, (void **)v292[0].__d_.__rep_);
          operator delete((void *)v292[0].__d_.__rep_);
        }
        v113 = (int64x2_t *)v299;
        if ((unint64_t)v299 >= v300)
        {
          v299 = sub_CE3240((void ****)&v298, (uint64_t)v273);
          if (v273[0].i64[0])
          {
            sub_CE2264((uint64_t)v273, (void **)v273[0].i64[0]);
            operator delete((void *)v273[0].i64[0]);
          }
        }
        else
        {
          *v299 = 0;
          v113->i64[1] = 0;
          v113[1].i64[0] = 0;
          int64x2_t *v113 = v273[0];
          v113[1].i64[0] = v273[1].i64[0];
          v299 = (void ***)&v113[1].i64[1];
        }
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v114 = v294[0].__d_.__rep_;
        if (v294[0].__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v115 = v294[1].__d_.__rep_;
          v116 = (void *)v294[0].__d_.__rep_;
          if (v294[1].__d_.__rep_ != v294[0].__d_.__rep_)
          {
            do
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v115 = sub_4451C0(v115 - 480);
            while (v115 != v114);
            v116 = (void *)v294[0].__d_.__rep_;
          }
          v294[1].__d_.__rep_ = v114;
          operator delete(v116);
        }
        v117 = v330[0];
        if (v330[0])
        {
          v118 = v330[1];
          v119 = v330[0];
          if (v330[1] != v330[0])
          {
            do
              v118 = (void *)sub_4451C0((uint64_t)v118 - 480);
            while (v118 != v117);
            v119 = v330[0];
          }
          v330[1] = v117;
          operator delete(v119);
        }
        v120 = v332[0];
        if (v332[0])
        {
          v121 = v332[1];
          v122 = v332[0];
          if (v332[1] != v332[0])
          {
            do
              v121 = (void *)sub_4451C0((uint64_t)v121 - 480);
            while (v121 != v120);
            v122 = v332[0];
          }
          v332[1] = v120;
          operator delete(v122);
        }
      }
      goto LABEL_306;
    case 2:
      sub_F58E2C((uint64_t)v334, *(void *)(v0 + 192), (uint64_t)v11, (uint64_t)&__p, v29 - 1, v30);
      unint64_t v52 = v299;
      if ((unint64_t)v299 >= v300)
      {
        char v53 = sub_CE33B8((void ****)&v298);
      }
      else
      {
        *v299 = 0;
        v52[1] = 0;
        char v53 = v52 + 3;
        v52[2] = 0;
      }
      v299 = v53;
      *(std::chrono::system_clock::time_point *)__t = std::chrono::system_clock::now();
      LODWORD(v332[0]) = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)__t);
      HIDWORD(v332[0]) = v332[0];
      LODWORD(v332[1]) = 0;
      *(void *)__t = v0;
      uint64_t v64 = sub_CE23F0((uint64_t *)(v0 + 160));
      uint64_t v65 = *(void *)(v0 + 200);
      *(void *)&__t[8] = v64;
      *(void *)&__t[16] = v65;
      v281 = v332;
      LOBYTE(v282) = 0;
      HIDWORD(v282) = *(_DWORD *)(v0 + 208);
      sub_F52034(v301, (uint64_t)v334, 1, 0, 0, 0x7FFFFFFFFFFFFFFFLL, (uint64_t)v273);
      sub_EB7700((int64x2_t *)(v53 - 3), v273[0].i64, 1);
      if (v273[0].i64[0])
      {
        sub_CE2264((uint64_t)v273, (void **)v273[0].i64[0]);
        v66 = (void (__cdecl **)(std::stringbuf *__hidden))v273[0].i64[0];
        goto LABEL_305;
      }
      goto LABEL_306;
    case 3:
      v334[0].n128_u64[0] = (unint64_t)operator new(0x19uLL);
      long long v271 = xmmword_20B9250;
      *(__n128 *)((char *)v334 + 8) = (__n128)xmmword_20B9250;
      strcpy((char *)v334[0].n128_u64[0], "WaypointPathComputation");
      memset(__t, 0, sizeof(__t));
      uint64_t v54 = sub_374CDC((uint64_t)v11, (uint64_t)v334, (uint64_t *)__t);
      v273[1].i8[7] = 7;
      strcpy(v273[0].i8, "default");
      uint64_t v55 = sub_560F4(v54, (uint64_t)v273);
      if (v273[1].i8[7] < 0) {
        operator delete((void *)v273[0].i64[0]);
      }
      uint64_t v56 = *(void *)__t;
      if (*(void *)__t)
      {
        uint64_t v57 = *(void *)&__t[8];
        char v58 = *(void **)__t;
        if (*(void *)&__t[8] != *(void *)__t)
        {
          do
          {
            if (*(char *)(v57 - 1) < 0) {
              operator delete(*(void **)(v57 - 24));
            }
            v57 -= 24;
          }
          while (v57 != v56);
          char v58 = *(void **)__t;
        }
        *(void *)&__t[8] = v56;
        operator delete(v58);
      }
      if (v334[1].n128_i8[7] < 0) {
        operator delete((void *)v334[0].n128_u64[0]);
      }
      v334[1].n128_u8[7] = 19;
      strcpy((char *)v334, "WalkingRouteFinding");
      memset(__t, 0, sizeof(__t));
      v71 = sub_374CDC((uint64_t)v11, (uint64_t)v334, (uint64_t *)__t);
      v273[1].i8[7] = 21;
      strcpy(v273[0].i8, "waypoint_path_finding");
      uint64_t v72 = (void *)sub_560F4(v71, (uint64_t)v273);
      if (v273[1].i8[7] < 0) {
        operator delete((void *)v273[0].i64[0]);
      }
      uint64_t v73 = *(void *)__t;
      if (*(void *)__t)
      {
        uint64_t v74 = v55;
        __n128 v75 = v11;
        uint64_t v76 = *(void *)&__t[8];
        v77 = *(void **)__t;
        if (*(void *)&__t[8] != *(void *)__t)
        {
          do
          {
            if (*(char *)(v76 - 1) < 0) {
              operator delete(*(void **)(v76 - 24));
            }
            v76 -= 24;
          }
          while (v76 != v73);
          v77 = *(void **)__t;
        }
        *(void *)&__t[8] = v73;
        operator delete(v77);
        char v11 = v75;
        uint64_t v55 = v74;
      }
      if (v334[1].n128_i8[7] < 0) {
        operator delete((void *)v334[0].n128_u64[0]);
      }
      int v90 = *(_DWORD *)(v0 + 124);
      v334[0].n128_u64[0] = (unint64_t)operator new(0x20uLL);
      *(__n128 *)((char *)v334 + 8) = (__n128)xmmword_20B91C0;
      strcpy((char *)v334[0].n128_u64[0], "enforce_single_leg_paths");
      if (sub_29D62C(v72, (uint64_t)v334))
      {
        int v91 = 0;
      }
      else
      {
        *(void *)__t = operator new(0x19uLL);
        *(_OWORD *)&__t[8] = v271;
        strcpy(*(char **)__t, "enforce_multi_leg_paths");
        int v91 = sub_29D62C(v72, (uint64_t)__t) | ((v90 & 4) >> 2);
        if ((__t[23] & 0x80000000) != 0) {
          operator delete(*(void **)__t);
        }
      }
      if (v334[1].n128_i8[7] < 0) {
        operator delete((void *)v334[0].n128_u64[0]);
      }
      sub_F6FC9C((uint64_t)v334, v55, (uint64_t)v11, (uint64_t)&__p, v39, v30);
      memset(v273, 0, 24);
      uint64_t v92 = *(void *)(v0 + 56);
      v93 = *(void **)(v0 + 200);
      *(void *)__t = v0;
      *(void *)&__t[8] = v0 + 32;
      *(void *)&__t[16] = v92;
      v281 = v93;
      uint64_t v282 = 0;
      sub_F4F200((uint64_t)v301, (uint64_t)v334, 1, 0, 0, 0x7FFFFFFFFFFFFFFFLL, (uint64_t *)v332);
      sub_EB6A90((unint64_t)v273, (long long **)v332, 1);
      v94 = v332[0];
      if (v332[0])
      {
        v95 = v332[1];
        v96 = v332[0];
        if (v332[1] != v332[0])
        {
          do
            v95 = (void *)sub_4451C0((uint64_t)v95 - 480);
          while (v95 != v94);
          v96 = v332[0];
        }
        v332[1] = v94;
        operator delete(v96);
      }
      if (v91) {
        sub_CE16D4((uint64_t)v273, (uint64_t **)(v0 + 32), (int64x2_t *)__t);
      }
      else {
        sub_CE1BB0(v273, (uint64_t)__t);
      }
      v97 = v299;
      if ((unint64_t)v299 >= v300)
      {
        v299 = sub_CE3240((void ****)&v298, (uint64_t)__t);
        if (*(void *)__t)
        {
          sub_CE2264((uint64_t)__t, *(void ***)__t);
          operator delete(*(void **)__t);
        }
      }
      else
      {
        *v299 = 0;
        v97[1] = 0;
        v97[2] = 0;
        *(_OWORD *)v97 = *(_OWORD *)__t;
        v97[2] = *(void ***)&__t[16];
        v299 = v97 + 3;
      }
      uint64_t v98 = v273[0].i64[0];
      if (v273[0].i64[0])
      {
        uint64_t v99 = v273[0].i64[1];
        v100 = (void *)v273[0].i64[0];
        if (v273[0].i64[1] != v273[0].i64[0])
        {
          do
            uint64_t v99 = sub_4451C0(v99 - 480);
          while (v99 != v98);
          v100 = (void *)v273[0].i64[0];
        }
        v273[0].i64[1] = v98;
        operator delete(v100);
      }
      v83 = v338;
      if (v338)
      {
        v101 = v339;
        v66 = v338;
        if (v339 == v338) {
          goto LABEL_202;
        }
        do
        {
          if (*((char *)v101 - 1) < 0) {
            operator delete(*(v101 - 3));
          }
          v101 -= 4;
        }
        while (v101 != v83);
        goto LABEL_201;
      }
      goto LABEL_306;
    case 4:
      v334[0].n128_u64[0] = (unint64_t)operator new(0x19uLL);
      *(__n128 *)((char *)v334 + 8) = (__n128)xmmword_20B9250;
      strcpy((char *)v334[0].n128_u64[0], "WaypointPathComputation");
      memset(__t, 0, sizeof(__t));
      v59 = sub_374CDC((uint64_t)v11, (uint64_t)v334, (uint64_t *)__t);
      v273[1].i8[7] = 7;
      strcpy(v273[0].i8, "default");
      uint64_t v60 = sub_560F4(v59, (uint64_t)v273);
      if (v273[1].i8[7] < 0) {
        operator delete((void *)v273[0].i64[0]);
      }
      uint64_t v61 = *(void *)__t;
      if (*(void *)__t)
      {
        uint64_t v62 = *(void *)&__t[8];
        v63 = *(void **)__t;
        if (*(void *)&__t[8] != *(void *)__t)
        {
          do
          {
            if (*(char *)(v62 - 1) < 0) {
              operator delete(*(void **)(v62 - 24));
            }
            v62 -= 24;
          }
          while (v62 != v61);
          v63 = *(void **)__t;
        }
        *(void *)&__t[8] = v61;
        operator delete(v63);
      }
      if (v334[1].n128_i8[7] < 0) {
        operator delete((void *)v334[0].n128_u64[0]);
      }
      sub_F6FC9C((uint64_t)v334, v60, (uint64_t)v11, (uint64_t)&__p, v39, v30);
      uint64_t v78 = v299;
      if ((unint64_t)v299 >= v300)
      {
        int v79 = sub_CE33B8((void ****)&v298);
      }
      else
      {
        *v299 = 0;
        v78[1] = 0;
        int v79 = v78 + 3;
        v78[2] = 0;
      }
      v299 = v79;
      uint64_t v80 = *(void *)(v0 + 56);
      float64x2x3_t v81 = *(void **)(v0 + 200);
      uint64_t v82 = *(void *)(v0 + 160);
      *(void *)__t = v0;
      *(void *)&__t[8] = v0 + 32;
      *(void *)&__t[16] = v80;
      v281 = v81;
      uint64_t v282 = v82;
      sub_F51078(v301, (uint64_t)v334, 1, 0, 0, 0x7FFFFFFFFFFFFFFFLL, (uint64_t)v332);
      v273[0] = *(int64x2_t *)v332;
      v273[1].i64[0] = v333[0];
      v333[0] = 0;
      v332[1] = 0;
      v332[0] = 0;
      sub_EB7700((int64x2_t *)(v79 - 3), v273[0].i64, 1);
      if (v273[0].i64[0])
      {
        sub_CE2264((uint64_t)v273, (void **)v273[0].i64[0]);
        operator delete((void *)v273[0].i64[0]);
      }
      if (v332[0])
      {
        sub_CE2264((uint64_t)v332, (void **)v332[0]);
        operator delete(v332[0]);
      }
      v83 = v338;
      if (v338)
      {
        v84 = v339;
        v66 = v338;
        if (v339 != v338)
        {
          do
          {
            if (*((char *)v84 - 1) < 0) {
              operator delete(*(v84 - 3));
            }
            v84 -= 4;
          }
          while (v84 != v83);
LABEL_201:
          v66 = v338;
        }
LABEL_202:
        v339 = v83;
LABEL_305:
        operator delete(v66);
      }
      goto LABEL_306;
    default:
      goto LABEL_306;
  }
  do
  {
    v126 = (char *)v298;
    sub_EA868C((uint64_t)__t, (uint64_t)v332[0] + 480 * v124);
    sub_EB74FC((int64x2_t *)&v126[24 * v124], (uint64_t)__t, 1);
    if (v283 < 0)
    {
      operator delete(v281);
      v127 = *(void **)__t;
      if (!*(void *)__t) {
        goto LABEL_256;
      }
    }
    else
    {
      v127 = *(void **)__t;
      if (!*(void *)__t) {
        goto LABEL_256;
      }
    }
    uint64_t v128 = *(void *)&__t[8];
    v129 = v127;
    if (*(void **)&__t[8] != v127)
    {
      do
        uint64_t v128 = sub_4451C0(v128 - 480);
      while ((void *)v128 != v127);
      v129 = *(void **)__t;
    }
    *(void *)&__t[8] = v127;
    operator delete(v129);
LABEL_256:
    ++v124;
  }
  while (v124 != v125);
  v130 = (char *)v332[0];
  v123 = (char *)v332[1];
  if (v332[0] != v332[1])
  {
LABEL_267:
    uint64_t v131 = sub_3C80F8((uint64_t)v130);
    uint64_t v132 = sub_3FA3A8((uint64_t)v130);
    while (1)
    {
      if (v131 == v132)
      {
        v130 += 480;
        if (v130 == v123) {
          goto LABEL_291;
        }
        goto LABEL_267;
      }
      v133 = *(int **)(v131 + 8);
      v134 = (unsigned __int16 *)((char *)v133 - *v133);
      if (*v134 >= 0xBu)
      {
        uint64_t v135 = v134[5];
        if (v135)
        {
          if ((*((unsigned char *)v133 + v135) & 8) != 0) {
            break;
          }
        }
      }
      v131 += 104;
    }
    __t[23] = 13;
    strcpy(__t, "avoid_ferries");
    uint64_t v136 = sub_374E2C(v11, (uint64_t)__t);
    if ((__t[23] & 0x80000000) != 0) {
      operator delete(*(void **)__t);
    }
    *(void *)__t = v0;
    *(void *)&__t[8] = v273;
    *(void *)&__t[16] = v136;
    v292[0] = std::chrono::system_clock::now();
    LODWORD(v294[0].__d_.__rep_) = std::chrono::system_clock::to_time_t(v292);
    HIDWORD(v294[0].__d_.__rep_) = v294[0].__d_.__rep_;
    LODWORD(v294[1].__d_.__rep_) = 0;
    v281 = v294;
    LOBYTE(v282) = 0;
    sub_F4D388((uint64_t)v301, (uint64_t)v334, 1, 0, 0, (uint64_t)__t, 0x7FFFFFFFFFFFFFFFLL, (uint64_t *)v330);
    v137 = v330[1];
    if (v330[1] != v330[0])
    {
      uint64_t v138 = 0;
      unint64_t v139 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v330[1] - (char *)v330[0]) >> 5);
      do
      {
        v140 = (char *)v298;
        sub_EA8898((uint64_t)__t, (long long *)v330[0] + 30 * v138);
        sub_EB74FC((int64x2_t *)&v140[24 * v138], (uint64_t)__t, 1);
        if (v283 < 0) {
          operator delete(v281);
        }
        uint64_t v141 = *(void *)__t;
        if (*(void *)__t)
        {
          uint64_t v142 = *(void *)&__t[8];
          v143 = *(void **)__t;
          if (*(void *)&__t[8] != *(void *)__t)
          {
            do
              uint64_t v142 = sub_4451C0(v142 - 480);
            while (v142 != v141);
            v143 = *(void **)__t;
          }
          *(void *)&__t[8] = v141;
          operator delete(v143);
        }
        ++v138;
      }
      while (v138 != v139);
      v137 = v330[0];
    }
    if (v137)
    {
      v144 = v330[1];
      v145 = v137;
      if (v330[1] != v137)
      {
        do
          v144 = (void *)sub_4451C0((uint64_t)v144 - 480);
        while (v144 != v137);
        v145 = v330[0];
      }
      v330[1] = v137;
      operator delete(v145);
    }
LABEL_291:
    v123 = (char *)v332[0];
  }
LABEL_292:
  if (v123)
  {
    v146 = (char *)v332[1];
    v147 = v123;
    if (v332[1] != v123)
    {
      do
        v146 = (char *)sub_4451C0((uint64_t)(v146 - 480));
      while (v146 != v123);
      v147 = (char *)v332[0];
    }
    v332[1] = v123;
    operator delete(v147);
  }
  uint64_t v148 = v273[0].i64[0];
  if (v273[0].i64[0])
  {
    uint64_t v149 = v273[0].i64[1];
    v66 = (void (__cdecl **)(std::stringbuf *__hidden))v273[0].i64[0];
    if (v273[0].i64[1] != v273[0].i64[0])
    {
      uint64_t v150 = v273[0].i64[1];
      do
      {
        v152 = *(void **)(v150 - 32);
        v150 -= 32;
        v151 = v152;
        if (v152)
        {
          *(void *)(v149 - 24) = v151;
          operator delete(v151);
        }
        uint64_t v149 = v150;
      }
      while (v150 != v148);
      v66 = (void (__cdecl **)(std::stringbuf *__hidden))v273[0].i64[0];
    }
    v273[0].i64[1] = v148;
    goto LABEL_305;
  }
LABEL_306:
  v153 = *(void **)(v0 + 192);
  v334[0].n128_u64[0] = (unint64_t)operator new(0x20uLL);
  *(__n128 *)((char *)v334 + 8) = (__n128)xmmword_20B8870;
  strcpy((char *)v334[0].n128_u64[0], "enable_arc_cost_debugging");
  BOOL v154 = sub_29D62C(v153, (uint64_t)v334);
  BOOL v155 = v154;
  if (v334[1].n128_i8[7] < 0)
  {
    operator delete((void *)v334[0].n128_u64[0]);
    if (!v155) {
      goto LABEL_318;
    }
  }
  else if (!v154)
  {
    goto LABEL_318;
  }
  sub_1078840(v334, v11);
  v156 = *(int **)(v0 + 200);
  v157 = (int *)sub_37B3A8((uint64_t)v11);
  v158 = (void ***)v298;
  v159 = v299;
  if (v298 != v299)
  {
    int v160 = *v157;
    do
    {
      v161 = (uint64_t *)sub_40EFE8((uint64_t)v158);
      for (uint64_t j = sub_52058((uint64_t)v158); v161 != (uint64_t *)j; v161 += 6)
        sub_10789BC((uint64_t *)v334, v161, v156, v160, 2);
      v158 += 3;
    }
    while (v158 != v159);
  }
  *(void **)((char *)v337
  v338 = v163;
  if (v343 < 0) {
    operator delete(v342);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
LABEL_318:
  v334[1].n128_u8[7] = 13;
  strcpy((char *)v334, "eta_evaluator");
  uint64_t v164 = sub_561B0(v325, (uint64_t)v334);
  v273[1].i8[7] = 13;
  strcpy(v273[0].i8, "cost_function");
  uint64_t v165 = sub_561B0(v325, (uint64_t)v273);
  sub_F00E44((uint64_t *)__t, v11, v164, v165);
  if (v273[1].i8[7] < 0)
  {
    operator delete((void *)v273[0].i64[0]);
    if (v334[1].n128_i8[7] < 0) {
      goto LABEL_457;
    }
  }
  else
  {
    if ((v334[1].n128_i8[7] & 0x80000000) == 0) {
      goto LABEL_320;
    }
LABEL_457:
    operator delete((void *)v334[0].n128_u64[0]);
  }
LABEL_320:
  sub_CE1DF8((uint64_t)v328, 0xAAAAAAAAAAAAAAABLL * (((char *)v299 - (unsigned char *)v298) >> 3));
  v166 = *(void **)(v0 + 192);
  v334[0].n128_u64[0] = (unint64_t)operator new(0x20uLL);
  *(__n128 *)((char *)v334 + 8) = (__n128)xmmword_20B91C0;
  strcpy((char *)v334[0].n128_u64[0], "available_regions_filter");
  v167 = (void *)sub_560F4(v166, (uint64_t)v334);
  if (v334[1].n128_i8[7] < 0) {
    operator delete((void *)v334[0].n128_u64[0]);
  }
  v334[1].n128_u8[7] = 7;
  strcpy((char *)v334, "enabled");
  BOOL v269 = sub_29D62C(v167, (uint64_t)v334);
  if (v334[1].n128_i8[7] < 0) {
    operator delete((void *)v334[0].n128_u64[0]);
  }
  v334[1].n128_u8[7] = 7;
  strcpy((char *)v334, "slack_m");
  uint64_t v263 = sub_5CDE0(v167, v334);
  if (v334[1].n128_i8[7] < 0) {
    operator delete((void *)v334[0].n128_u64[0]);
  }
  uint64_t v261 = sub_3777C0(v11);
  int v260 = sub_486180(*(void *)(v0 + 112));
  v168 = (void ***)v298;
  v262 = v299;
  if (v298 != v299)
  {
    int v252 = 0;
    int v169 = 0;
    int v264 = 0;
    int v259 = 0;
    v266 = v337;
    v253 = &v273[1].i64[1];
    v255 = &v276;
    v256 = (_DWORD *)((char *)&v275 + 6);
    v257 = &v278;
    v258 = (uint64_t *)(v0 + 176);
    while (1)
    {
      sub_107EE70((uint64_t)v168, 1);
      v294[1].__d_.__rep_ = 0;
      v294[0].__d_.__rep_ = 0;
      unint64_t v295 = 0;
      v171 = (void *)nullsub_1(v168);
      if (*v171 == v171[1]) {
        ++v169;
      }
      v172 = (__n128 *)sub_40EFE8((uint64_t)v168);
      uint64_t v173 = sub_52058((uint64_t)v168);
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
                while (1)
                {
                  while (1)
                  {
                    if (v172 == (__n128 *)v173) {
                      goto LABEL_432;
                    }
                    if (sub_EA8F24((uint64_t *)v172)) {
                      break;
                    }
                    if (sub_723EC(1u))
                    {
                      v334[0].n128_u64[0] = v268;
                      *(unint64_t *)((char *)v334[0].n128_u64 + *(void *)(v268 - 24)) = v267;
                      v175 = (std::ios_base *)((char *)v334 + *(void *)(v334[0].n128_u64[0] - 24));
                      std::ios_base::init(v175, &v334[0].n128_i8[8]);
                      v175[1].__vftable = 0;
                      v175[1].__fmtflags_ = -1;
                      std::streambuf::basic_streambuf();
                      *(_OWORD *)v266 = 0u;
                      *((_OWORD *)v266 + 1) = 0u;
                      int v340 = 16;
                      sub_188FC78(v334, (uint64_t)"Dropping inconsistent path before U-turn clipping.", 50);
                      std::stringbuf::str();
                      sub_7246C(v273[0].i64, 1u);
                      if (v273[1].i8[7] < 0) {
                        operator delete((void *)v273[0].i64[0]);
                      }
                      v334[0].n128_u64[0] = v271;
                      *(unint64_t *)((char *)v334[0].n128_u64 + *(void *)(v271 - 24)) = v270;
                      if (SHIBYTE(v338) < 0) {
                        operator delete(v337[0]);
                      }
                      std::streambuf::~streambuf();
                      std::ostream::~ostream();
                      std::ios::~ios();
                    }
                    ++v169;
                    v172 += 3;
                  }
                  if (sub_1079F14(*(void **)(v272 + 104), (char *)v172)) {
                    break;
                  }
                  ++v169;
                  v172 += 3;
                }
                if (!v269 || sub_106B9B8(v172, v263, *(void **)(v272 + 104))) {
                  break;
                }
                ++v264;
                v172 += 3;
              }
              BOOL v174 = v265;
              if (*(_DWORD *)(v272 + 152) == 3) {
                BOOL v174 = 0;
              }
              if (v174) {
                sub_109A318((uint64_t)v172);
              }
              if (sub_EA8F24((uint64_t *)v172)) {
                break;
              }
              if (sub_723EC(1u))
              {
                sub_6BAC((uint64_t)v334);
                sub_188FC78(v334, (uint64_t)"Dropping inconsistent path after U-turn clipping.", 49);
                std::stringbuf::str();
                sub_7246C(v273[0].i64, 1u);
                if (v273[1].i8[7] < 0) {
                  operator delete((void *)v273[0].i64[0]);
                }
                v334[0].n128_u64[0] = v271;
                *(unint64_t *)((char *)v334[0].n128_u64 + *(void *)(v271 - 24)) = v270;
                if (SHIBYTE(v338) < 0) {
                  operator delete(v337[0]);
                }
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                std::ios::~ios();
              }
              ++v169;
              v172 += 3;
            }
            if (!sub_EA8E90((uint64_t *)v172)) {
              break;
            }
            ++v169;
            v172 += 3;
          }
          if (sub_3D4450(v261, (uint64_t *)v172, *(unsigned __int8 *)(v272 + 120))) {
            break;
          }
          ++v259;
          v172 += 3;
        }
        uint64_t v176 = v272;
        if (*(void *)(v272 + 144) != 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v177 = sub_EA910C((uint64_t *)v172);
          uint64_t v176 = v272;
          if (v177 > *(void *)(v272 + 144)) {
            break;
          }
        }
        sub_F00EA0((uint64_t)__t, (uint64_t)v172, *(_DWORD *)(v176 + 80), *(_DWORD *)(v176 + 88), 0, &v292[0].__d_.__rep_);
        if (sub_EA8E90((uint64_t *)v172))
        {
          long long v276 = 0u;
          long long v277 = 0u;
          long long v274 = 0u;
          long long v275 = 0u;
          memset(v273, 0, sizeof(v273));
          LOBYTE(v275) = 1;
          BYTE5(v275) = 1;
          _DWORD *v256 = 0;
          *(_DWORD *)((char *)v256 + 3) = 0;
          *(void *)v255 = 0;
          *((void *)v255 + 1) = 0;
          *((void *)v255 + 2) = 0;
          DWORD2(v277) = -1;
          v257[1] = 0;
          v257[2] = 0;
          *v257 = 0;
          goto LABEL_384;
        }
        if (*(unsigned char *)(v272 + 168) == 2)
        {
          uint64_t v178 = *(void *)(sub_CC1B10(v258) + 8);
          unint64_t v179 = sub_EA9088(v172);
          v180 = operator new(0x30uLL);
          uint64_t v181 = (uint64_t)(v180 + 3);
          v333[0] = v180 + 3;
          _OWORD *v180 = 0u;
          v180[1] = 0u;
          v180[2] = 0u;
          v332[0] = v180;
          v332[1] = v180 + 3;
          uint64_t v182 = sub_CC1B10(v258);
          sub_CE40A4(v332, v181, (long long *)(v178 - 24 * v179 + 24), *(long long **)(v182 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v182 + 8) - (v178 - 24 * v179 + 24)) >> 3));
          sub_470AD8((uint64_t *)v334, (uint64_t *)v172, (uint64_t **)v292, (uint64_t)v332);
          char v331 = 0;
          LOBYTE(v330[0]) = 0;
          sub_460914((uint64_t)v273, (uint64_t)v334, (long long *)v330);
          if (v331 < 0)
          {
            operator delete(v330[0]);
            sub_3AFFFC((uint64_t)v334);
            v183 = v332[0];
            if (!v332[0]) {
              goto LABEL_384;
            }
LABEL_382:
            v332[1] = v183;
LABEL_383:
            operator delete(v183);
            goto LABEL_384;
          }
          sub_3AFFFC((uint64_t)v334);
          v183 = v332[0];
          if (v332[0]) {
            goto LABEL_382;
          }
        }
        else
        {
          if (!*v258)
          {
            v334[0] = *(__n128 *)&v292[0].__d_.__rep_;
            v334[1].n128_u64[0] = v293;
            unint64_t v293 = 0;
            v292[1].__d_.__rep_ = 0;
            v292[0].__d_.__rep_ = 0;
            sub_460910((uint64_t)v273, v172, v334);
            unint64_t v185 = v334[0].n128_u64[0];
            if (!v334[0].n128_u64[0]) {
              goto LABEL_384;
            }
            v186 = (void *)v334[0].n128_u64[1];
            unint64_t v187 = v334[0].n128_u64[0];
            if (v334[0].n128_u64[1] != v334[0].n128_u64[0])
            {
              do
                v186 = sub_3B0290(v186 - 36);
              while (v186 != (void *)v185);
              unint64_t v187 = v334[0].n128_u64[0];
            }
            v334[0].n128_u64[1] = v185;
            v183 = (void *)v187;
            goto LABEL_383;
          }
          uint64_t v184 = sub_CC1B10(v258);
          sub_470AD8((uint64_t *)v334, (uint64_t *)v172, (uint64_t **)v292, v184);
          HIBYTE(v333[0]) = 0;
          LOBYTE(v332[0]) = 0;
          sub_460914((uint64_t)v273, (uint64_t)v334, (long long *)v332);
          if (SHIBYTE(v333[0]) < 0) {
            operator delete(v332[0]);
          }
          sub_3AFFFC((uint64_t)v334);
        }
LABEL_384:
        if (sub_460DC0((uint64_t **)v273))
        {
          sub_45FE34((uint64_t)v273, v260);
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v188 = v294[1].__d_.__rep_;
          if (v294[1].__d_.__rep_ >= v295)
          {
            v193 = sub_CC1BB4((void **)v294, (uint64_t)v273);
          }
          else
          {
            *(void *)v294[1].__d_.__rep_ = 0;
            *(void *)(v188 + 8) = 0;
            *(void *)(v188 + 16) = 0;
            *(int64x2_t *)std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v188 = v273[0];
            *(void *)(v188 + 16) = v273[1].i64[0];
            memset(v273, 0, 24);
            *(_OWORD *)(v188 + 24) = *(_OWORD *)v253;
            long long v190 = *((_OWORD *)v253 + 2);
            long long v189 = *((_OWORD *)v253 + 3);
            uint64_t v191 = *(uint64_t *)((char *)v253 + 61);
            *(_OWORD *)(v188 + 40) = *((_OWORD *)v253 + 1);
            *(void *)(v188 + 85) = v191;
            *(_OWORD *)(v188 + 72) = v189;
            *(_OWORD *)(v188 + 56) = v190;
            long long v192 = *(_OWORD *)v257;
            *(void *)(v188 + 112) = v257[2];
            *(_OWORD *)(v188 + 96) = v192;
            v257[1] = 0;
            v257[2] = 0;
            *v257 = 0;
            v193 = (char *)(v188 + 120);
          }
          ++v260;
          v294[1].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v193;
          if (v279 < 0) {
            goto LABEL_397;
          }
        }
        else
        {
          if (sub_723EC(1u))
          {
            sub_6BAC((uint64_t)v334);
            sub_188FC78(v334, (uint64_t)"Dropping inconsistent route.", 28);
            std::stringbuf::str();
            sub_7246C((uint64_t *)v332, 1u);
            if (SHIBYTE(v333[0]) < 0) {
              operator delete(v332[0]);
            }
            v334[0].n128_u64[0] = v271;
            *(unint64_t *)((char *)v334[0].n128_u64 + *(void *)(v271 - 24)) = v270;
            if (SHIBYTE(v338) < 0) {
              operator delete(v337[0]);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          ++v169;
          if (v279 < 0) {
LABEL_397:
          }
            operator delete(v278);
        }
        uint64_t v194 = v273[0].i64[0];
        if (v273[0].i64[0])
        {
          uint64_t v195 = v273[0].i64[1];
          v196 = (void *)v273[0].i64[0];
          if (v273[0].i64[1] != v273[0].i64[0])
          {
            do
              uint64_t v195 = sub_3AFFFC(v195 - 1056);
            while (v195 != v194);
            v196 = (void *)v273[0].i64[0];
          }
          v273[0].i64[1] = v194;
          operator delete(v196);
        }
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v197 = v292[0].__d_.__rep_;
        if (v292[0].__d_.__rep_)
        {
          v198 = (void *)v292[0].__d_.__rep_;
          if (v292[1].__d_.__rep_ != v292[0].__d_.__rep_)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v199 = v292[1].__d_.__rep_ - 128;
            do
            {
              v201 = *(void **)(v199 + 72);
              if (v201)
              {
                *(void *)(v199 + 80) = v201;
                operator delete(v201);
              }
              v202 = *(void **)(v199 + 48);
              if (v202)
              {
                *(void *)(v199 + 56) = v202;
                operator delete(v202);
              }
              v203 = *(void **)(v199 + 24);
              if (v203)
              {
                *(void *)(v199 + 32) = v203;
                operator delete(v203);
              }
              v204 = *(void **)v199;
              if (*(void *)v199)
              {
                *(void *)(v199 + 8) = v204;
                operator delete(v204);
              }
              v205 = *(void **)(v199 - 24);
              if (v205)
              {
                *(void *)(v199 - 16) = v205;
                operator delete(v205);
              }
              v206 = *(void **)(v199 - 48);
              if (v206)
              {
                *(void *)(v199 - 40) = v206;
                operator delete(v206);
              }
              v207 = *(void **)(v199 - 72);
              if (v207)
              {
                *(void *)(v199 - 64) = v207;
                operator delete(v207);
              }
              v208 = *(void **)(v199 - 96);
              if (v208)
              {
                *(void *)(v199 - 88) = v208;
                operator delete(v208);
              }
              v209 = *(void **)(v199 - 120);
              if (v209)
              {
                *(void *)(v199 - 112) = v209;
                operator delete(v209);
              }
              v210 = *(void **)(v199 - 144);
              if (v210)
              {
                *(void *)(v199 - 136) = v210;
                operator delete(v210);
              }
              std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v200 = v199 - 160;
              v199 -= 288;
            }
            while (v200 != v197);
            v198 = (void *)v292[0].__d_.__rep_;
          }
          v292[1].__d_.__rep_ = v197;
          operator delete(v198);
        }
        v172 += 3;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v211 = v294[1].__d_.__rep_;
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v212 = v294[0].__d_.__rep_;
      if (v294[1].__d_.__rep_ != v294[0].__d_.__rep_) {
        break;
      }
LABEL_431:
      ++v252;
      v294[1].__d_.__rep_ = v212;
LABEL_432:
      v213 = (char *)v328[1];
      if (v328[1] >= (void *)*(void *)v329)
      {
        v214 = sub_CE4394((void ***)v328, (long long **)v294);
      }
      else
      {
        sub_CDD030((void *)v328[1], (long long **)v294);
        v214 = v213 + 24;
      }
      v328[1] = v214;
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v215 = v294[0].__d_.__rep_;
      if (v294[0].__d_.__rep_)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v216 = v294[1].__d_.__rep_;
        v170 = (void *)v294[0].__d_.__rep_;
        if (v294[1].__d_.__rep_ == v294[0].__d_.__rep_)
        {
LABEL_329:
          v294[1].__d_.__rep_ = v215;
          operator delete(v170);
          goto LABEL_330;
        }
        while (2)
        {
          if (*(char *)(v216 - 1) < 0)
          {
            operator delete(*(void **)(v216 - 24));
            v217 = (void **)(v216 - 120);
            v218 = *(void **)(v216 - 120);
            if (!v218) {
              goto LABEL_439;
            }
          }
          else
          {
            v217 = (void **)(v216 - 120);
            v218 = *(void **)(v216 - 120);
            if (!v218) {
              goto LABEL_439;
            }
          }
          uint64_t v219 = *(void *)(v216 - 112);
          v220 = v218;
          if ((void *)v219 != v218)
          {
            do
              uint64_t v219 = sub_3AFFFC(v219 - 1056);
            while ((void *)v219 != v218);
            v220 = *v217;
          }
          *(void *)(v216 - 112) = v218;
          operator delete(v220);
LABEL_439:
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v216 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v217;
          if (v217 == (void **)v215)
          {
            v170 = (void *)v294[0].__d_.__rep_;
            goto LABEL_329;
          }
          continue;
        }
      }
LABEL_330:
      v168 += 3;
      if (v168 == v262) {
        goto LABEL_459;
      }
    }
    while (2)
    {
      if (*(char *)(v211 - 1) < 0)
      {
        operator delete(*(void **)(v211 - 24));
        v221 = (void **)(v211 - 120);
        v222 = *(void **)(v211 - 120);
        if (!v222) {
          goto LABEL_448;
        }
      }
      else
      {
        v221 = (void **)(v211 - 120);
        v222 = *(void **)(v211 - 120);
        if (!v222) {
          goto LABEL_448;
        }
      }
      uint64_t v223 = *(void *)(v211 - 112);
      v224 = v222;
      if ((void *)v223 != v222)
      {
        do
          uint64_t v223 = sub_3AFFFC(v223 - 1056);
        while ((void *)v223 != v222);
        v224 = *v221;
      }
      *(void *)(v211 - 112) = v222;
      operator delete(v224);
LABEL_448:
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v211 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v221;
      if (v221 == (void **)v212) {
        goto LABEL_431;
      }
      continue;
    }
  }
  int v259 = 0;
  int v264 = 0;
  int v169 = 0;
  int v252 = 0;
LABEL_459:
  v225 = v328[0];
  if (v328[0] == v328[1])
  {
LABEL_462:
    if (v264)
    {
      v273[0].i64[0] = 23;
      v273[0].i64[1] = (uint64_t)&off_2439090;
      sub_3E7814(v334, (__n128 *)v273);
    }
    else if (v259)
    {
      v273[0].i64[0] = 16;
      v273[0].i64[1] = (uint64_t)&off_2439090;
      sub_3E7814(v334, (__n128 *)v273);
    }
    else
    {
      if (!v252)
      {
        if (v169)
        {
          v273[0].i64[0] = 10;
          v273[0].i64[1] = (uint64_t)&off_2439090;
          sub_3E7814(v334, (__n128 *)v273);
        }
        else
        {
          v273[0].i64[0] = 43;
          v273[0].i64[1] = (uint64_t)&off_2439090;
          sub_3E7814(v334, (__n128 *)v273);
        }
        *(unsigned char *)uint64_t v254 = 0;
        __n128 v251 = v334[1];
        *(__n128 *)(v254 + 8) = v334[0];
        *(__n128 *)(v254 + 24) = v251;
        *(void *)(v254 + 40) = v335;
        v334[1] = 0uLL;
        uint64_t v335 = 0;
        *(_DWORD *)(v254 + 48) = v336;
        sub_C7E3C8((uint64_t)v334);
        v228 = v290;
        if (!v290) {
          goto LABEL_472;
        }
LABEL_471:
        v291 = v228;
        operator delete(v228);
        goto LABEL_472;
      }
      v273[0].i64[0] = 13;
      v273[0].i64[1] = (uint64_t)&off_2439090;
      sub_3E7814(v334, (__n128 *)v273);
    }
    *(unsigned char *)uint64_t v254 = 0;
    __n128 v229 = v334[1];
    *(__n128 *)(v254 + 8) = v334[0];
    *(__n128 *)(v254 + 24) = v229;
    *(void *)(v254 + 40) = v335;
    *(_DWORD *)(v254 + 48) = v336;
    v228 = v290;
    if (!v290) {
      goto LABEL_472;
    }
    goto LABEL_471;
  }
  while (*v225 == v225[1])
  {
    v225 += 3;
    if (v225 == v328[1]) {
      goto LABEL_462;
    }
  }
  *(void *)&v329[8] = vcvtad_u64_f64(sub_72688((uint64_t)v327));
  *(_DWORD *)&v329[16] = v259;
  *(_DWORD *)&v329[20] = v169;
  *(_DWORD *)&v329[24] = v252;
  uint64_t v226 = sub_68EB4((uint64_t)v301);
  *(_DWORD *)&v329[28] = *(_DWORD *)sub_CE1FD0((void *)(v226 + 8), 0);
  *(_DWORD *)&v329[32] = *(_DWORD *)(sub_68EB4((uint64_t)v301) + 4);
  *(unsigned char *)uint64_t v254 = 1;
  *(_OWORD *)(v254 + 8) = *(_OWORD *)v328;
  *(void *)(v254 + 24) = *(void *)v329;
  v328[0] = 0;
  v328[1] = 0;
  *(void *)v329 = 0;
  long long v227 = *(_OWORD *)&v329[24];
  *(_OWORD *)(v254 + 32) = *(_OWORD *)&v329[8];
  *(_OWORD *)(v254 + 48) = v227;
  v228 = v290;
  if (v290) {
    goto LABEL_471;
  }
LABEL_472:
  if (v288)
  {
    v289 = v288;
    operator delete(v288);
  }
  if (v286)
  {
    v287 = v286;
    operator delete(v286);
  }
  v230 = v285;
  if (v285)
  {
    do
    {
      v231 = (void *)*v230;
      operator delete(v230);
      v230 = v231;
    }
    while (v231);
  }
  v232 = v284;
  v284 = 0;
  if (v232) {
    operator delete(v232);
  }
  v233 = (void ***)v298;
  if (v298)
  {
    v234 = v298;
    if (v299 != v298)
    {
      v235 = v299 - 3;
      do
      {
        if (*v235)
        {
          sub_CE2264((uint64_t)v235, *v235);
          operator delete(*v235);
        }
        BOOL v5 = v235 == v233;
        v235 -= 3;
      }
      while (!v5);
      v234 = v298;
    }
    v299 = v233;
    operator delete(v234);
  }
  if (v306)
  {
    v307 = v306;
    operator delete(v306);
  }
  if (v304)
  {
    v305 = v304;
    operator delete(v304);
  }
  if (v302)
  {
    v303 = v302;
    operator delete(v302);
  }
  if (v316)
  {
    v317 = v316;
    operator delete(v316);
  }
  sub_32834C(v315);
  if ((v314 & 0x80000000) == 0)
  {
    if ((v319 & 0x80000000) == 0) {
      goto LABEL_498;
    }
LABEL_501:
    operator delete(v318[12]);
    sub_BF1258(&__p);
    v236 = v326;
    if (!v326) {
      goto LABEL_502;
    }
    do
    {
LABEL_508:
      v242 = (void **)*v236;
      sub_55198((uint64_t)(v236 + 5));
      if (*((char *)v236 + 39) < 0) {
        operator delete(v236[2]);
      }
      operator delete(v236);
      v236 = v242;
    }
    while (v242);
    goto LABEL_502;
  }
  operator delete(v313);
  if (v319 < 0) {
    goto LABEL_501;
  }
LABEL_498:
  sub_BF1258(&__p);
  v236 = v326;
  if (v326) {
    goto LABEL_508;
  }
LABEL_502:
  v237 = v325[0];
  v325[0] = 0;
  if (v237) {
    operator delete(v237);
  }
LABEL_504:
  v238 = (void **)v328[0];
  if (!v328[0]) {
    return;
  }
  v239 = (void **)v328[1];
  v240 = v328[0];
  if (v328[1] != v328[0])
  {
    v241 = (void **)v328[1];
    while (1)
    {
      v245 = (void **)*(v241 - 3);
      v241 -= 3;
      v244 = v245;
      if (!v245) {
        goto LABEL_512;
      }
      v246 = (void **)*(v239 - 2);
      v243 = v244;
      if (v246 != v244) {
        break;
      }
LABEL_511:
      *(v239 - 2) = v244;
      operator delete(v243);
LABEL_512:
      v239 = v241;
      if (v241 == v238)
      {
        v240 = v328[0];
        goto LABEL_526;
      }
    }
    while (1)
    {
      if (*((char *)v246 - 1) < 0)
      {
        operator delete(*(v246 - 3));
        v247 = v246 - 15;
        v248 = *(v246 - 15);
        if (v248)
        {
LABEL_522:
          uint64_t v249 = (uint64_t)*(v246 - 14);
          v250 = v248;
          if ((void *)v249 != v248)
          {
            do
              uint64_t v249 = sub_3AFFFC(v249 - 1056);
            while ((void *)v249 != v248);
            v250 = *v247;
          }
          *(v246 - 14) = v248;
          operator delete(v250);
        }
      }
      else
      {
        v247 = v246 - 15;
        v248 = *(v246 - 15);
        if (v248) {
          goto LABEL_522;
        }
      }
      v246 = v247;
      if (v247 == v244)
      {
        v243 = *v241;
        goto LABEL_511;
      }
    }
  }
LABEL_526:
  v328[1] = v238;
  operator delete(v240);
}

void sub_CE0FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  if (SLOBYTE(STACK[0x2347]) < 0) {
    operator delete((void *)STACK[0x2330]);
  }
  sub_BF1258(&STACK[0x2388]);
  sub_5450C((uint64_t)&STACK[0x2A60]);
  sub_C66564((void ***)&STACK[0x2AA0]);
  _Unwind_Resume(a1);
}

void sub_CE16D4(uint64_t a1@<X0>, uint64_t **a2@<X1>, int64x2_t *a3@<X8>)
{
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  a3[1].i64[0] = 0;
  uint64_t v5 = sub_40EFE8(a1);
  for (uint64_t i = sub_52058(a1); v5 != i; v5 += 480)
  {
    sub_107C480(v5, a2, &__p, 0.95);
    if (sub_EA8E90((uint64_t *)&__p))
    {
      sub_107C480(v5, a2, &v47, 0.0);
      std::string::size_type v8 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        long long v10 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            char v11 = *(void **)(size - 224);
            if (v11)
            {
              *(void *)(size - 216) = v11;
              operator delete(v11);
            }
            uint8x8_t v12 = *(void **)(size - 248);
            if (v12)
            {
              *(void *)(size - 240) = v12;
              operator delete(v12);
            }
            unint64_t v13 = *(void **)(size - 312);
            if (v13)
            {
              *(void *)(size - 304) = v13;
              operator delete(v13);
            }
            unint64_t v14 = *(void **)(size - 336);
            if (v14)
            {
              *(void *)(size - 328) = v14;
              operator delete(v14);
            }
            uint64_t v15 = *(void *)(size - 360);
            if (v15)
            {
              uint64_t v16 = *(void *)(size - 352);
              uint64_t v17 = *(void **)(size - 360);
              if (v16 != v15)
              {
                do
                {
                  uint64_t v18 = *(void **)(v16 - 24);
                  if (v18)
                  {
                    *(void *)(v16 - 16) = v18;
                    operator delete(v18);
                  }
                  v16 -= 56;
                }
                while (v16 != v15);
                uint64_t v17 = *(void **)(size - 360);
              }
              *(void *)(size - 352) = v15;
              operator delete(v17);
            }
            uint64_t v19 = *(void **)(size - 456);
            if (v19)
            {
              *(void *)(size - 448) = v19;
              operator delete(v19);
            }
            uint64_t v20 = (void **)(size - 480);
            if (*(char *)(size - 457) < 0) {
              operator delete(*v20);
            }
            size -= 480;
          }
          while (v20 != (void **)v8);
          long long v10 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v8;
        operator delete(v10);
      }
      std::string __p = v47;
      memset(&v47, 0, sizeof(v47));
      if (SHIBYTE(v52) < 0)
      {
        operator delete((void *)v51);
        std::string::size_type v21 = v47.__r_.__value_.__r.__words[0];
        long long v51 = v48;
        uint64_t v52 = v49;
        HIBYTE(v49) = 0;
        LOBYTE(v48) = 0;
        if (v47.__r_.__value_.__r.__words[0])
        {
          std::string::size_type v22 = v47.__r_.__value_.__l.__size_;
          uint64_t v23 = (void *)v47.__r_.__value_.__r.__words[0];
          if (v47.__r_.__value_.__l.__size_ != v47.__r_.__value_.__r.__words[0])
          {
            do
            {
              char v24 = *(void **)(v22 - 224);
              if (v24)
              {
                *(void *)(v22 - 216) = v24;
                operator delete(v24);
              }
              unint64_t v25 = *(void **)(v22 - 248);
              if (v25)
              {
                *(void *)(v22 - 240) = v25;
                operator delete(v25);
              }
              unint64_t v26 = *(void **)(v22 - 312);
              if (v26)
              {
                *(void *)(v22 - 304) = v26;
                operator delete(v26);
              }
              unint64_t v27 = *(void **)(v22 - 336);
              if (v27)
              {
                *(void *)(v22 - 328) = v27;
                operator delete(v27);
              }
              uint64_t v28 = *(void *)(v22 - 360);
              if (v28)
              {
                uint64_t v29 = *(void *)(v22 - 352);
                int v30 = *(void **)(v22 - 360);
                if (v29 != v28)
                {
                  do
                  {
                    BOOL v31 = *(void **)(v29 - 24);
                    if (v31)
                    {
                      *(void *)(v29 - 16) = v31;
                      operator delete(v31);
                    }
                    v29 -= 56;
                  }
                  while (v29 != v28);
                  int v30 = *(void **)(v22 - 360);
                }
                *(void *)(v22 - 352) = v28;
                operator delete(v30);
              }
              char v32 = *(void **)(v22 - 456);
              if (v32)
              {
                *(void *)(v22 - 448) = v32;
                operator delete(v32);
              }
              unint64_t v33 = (void **)(v22 - 480);
              if (*(char *)(v22 - 457) < 0) {
                operator delete(*v33);
              }
              v22 -= 480;
            }
            while (v33 != (void **)v21);
            uint64_t v23 = (void *)v47.__r_.__value_.__r.__words[0];
          }
          v47.__r_.__value_.__l.__size_ = v21;
          operator delete(v23);
        }
      }
      else
      {
        long long v51 = v48;
        uint64_t v52 = v49;
      }
    }
    if (!sub_EA8E90((uint64_t *)&__p)) {
      sub_EB733C(a3, &__p, 0);
    }
    if (SHIBYTE(v52) < 0)
    {
      operator delete((void *)v51);
      std::string::size_type v34 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
LABEL_67:
        std::string::size_type v35 = __p.__r_.__value_.__l.__size_;
        __n128 v7 = (void *)v34;
        if (__p.__r_.__value_.__l.__size_ != v34)
        {
          do
          {
            unint64_t v36 = *(void **)(v35 - 224);
            if (v36)
            {
              *(void *)(v35 - 216) = v36;
              operator delete(v36);
            }
            size_t v37 = *(void **)(v35 - 248);
            if (v37)
            {
              *(void *)(v35 - 240) = v37;
              operator delete(v37);
            }
            int v38 = *(void **)(v35 - 312);
            if (v38)
            {
              *(void *)(v35 - 304) = v38;
              operator delete(v38);
            }
            int v39 = *(void **)(v35 - 336);
            if (v39)
            {
              *(void *)(v35 - 328) = v39;
              operator delete(v39);
            }
            uint64_t v40 = *(void *)(v35 - 360);
            if (v40)
            {
              uint64_t v41 = *(void *)(v35 - 352);
              uint64_t v42 = *(void **)(v35 - 360);
              if (v41 != v40)
              {
                do
                {
                  uint64_t v43 = *(void **)(v41 - 24);
                  if (v43)
                  {
                    *(void *)(v41 - 16) = v43;
                    operator delete(v43);
                  }
                  v41 -= 56;
                }
                while (v41 != v40);
                uint64_t v42 = *(void **)(v35 - 360);
              }
              *(void *)(v35 - 352) = v40;
              operator delete(v42);
            }
            uint64_t v44 = *(void **)(v35 - 456);
            if (v44)
            {
              *(void *)(v35 - 448) = v44;
              operator delete(v44);
            }
            uint64_t v45 = (void **)(v35 - 480);
            if (*(char *)(v35 - 457) < 0) {
              operator delete(*v45);
            }
            v35 -= 480;
          }
          while (v45 != (void **)v34);
          __n128 v7 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v34;
        operator delete(v7);
      }
    }
    else
    {
      std::string::size_type v34 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_67;
      }
    }
  }
}

void sub_CE1B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void ***a10)
{
}

void sub_CE1B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void ***a10)
{
}

void sub_CE1B7C(_Unwind_Exception *a1, uint64_t a2, void ***a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_440ED4((uint64_t)va);
  sub_CE1C80(a3);
  _Unwind_Resume(a1);
}

double sub_CE1BB0@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v9 = 0uLL;
  uint64_t v10 = 0;
  unsigned int v4 = sub_EB6A74(a1);
  sub_CE2494((unint64_t *)&v9, v4);
  uint64_t v5 = (char *)*((void *)&v9 + 1);
  uint64_t v6 = (long long *)sub_40EFE8((uint64_t)a1);
  __n128 v7 = (long long *)sub_52058((uint64_t)a1);
  sub_CE2778(v6, v7, (char **)&v9, v5);
  if (*(void *)a2)
  {
    sub_CE2264(a2, *(void ***)a2);
    operator delete(*(void **)a2);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  double result = *(double *)&v9;
  *(_OWORD *)a2 = v9;
  *(void *)(a2 + 16) = v10;
  return result;
}

void sub_CE1C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_CE1C80(&a9);
  sub_CE1C80(v9);
  _Unwind_Resume(a1);
}

void ***sub_CE1C80(void ***a1)
{
  if (*a1)
  {
    sub_CE2264((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_CE1CBC(uint64_t a1)
{
  *(void *)(a1 + 88) = v3;
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return a1;
}

void sub_CE1DF8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_2E00();
  }
  unsigned int v4 = *(char **)(a1 + 8);
  uint64_t v5 = 24 * a2;
  uint64_t v6 = (char *)operator new(24 * a2);
  __n128 v7 = &v6[v5];
  std::string::size_type v8 = &v6[24 * ((v4 - (char *)v2) / 24)];
  if (v4 == (char *)v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_25;
  }
  long long v9 = &v6[24 * ((v4 - (char *)v2) / 24)];
  do
  {
    long long v10 = *(_OWORD *)(v4 - 24);
    v4 -= 24;
    *(_OWORD *)(v9 - 24) = v10;
    v9 -= 24;
    *((void *)v9 + 2) = *((void *)v4 + 2);
    *(void *)unsigned int v4 = 0;
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
  }
  while (v4 != (char *)v2);
  char v11 = *(void ***)a1;
  uint64_t v2 = *(void ***)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v11)
  {
    uint8x8_t v12 = v2;
    while (1)
    {
      uint64_t v15 = (void **)*(v12 - 3);
      v12 -= 3;
      unint64_t v14 = v15;
      if (!v15) {
        goto LABEL_10;
      }
      uint64_t v16 = (void **)*(v2 - 2);
      unint64_t v13 = v14;
      if (v16 != v14) {
        break;
      }
LABEL_9:
      *(v2 - 2) = v14;
      operator delete(v13);
LABEL_10:
      uint64_t v2 = v12;
      if (v12 == v11)
      {
        uint64_t v2 = v11;
        goto LABEL_24;
      }
    }
    while (1)
    {
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        uint64_t v17 = v16 - 15;
        uint64_t v18 = *(v16 - 15);
        if (v18)
        {
LABEL_20:
          uint64_t v19 = (uint64_t)*(v16 - 14);
          uint64_t v20 = v18;
          if ((void *)v19 != v18)
          {
            do
              uint64_t v19 = sub_3AFFFC(v19 - 1056);
            while ((void *)v19 != v18);
            uint64_t v20 = *v17;
          }
          *(v16 - 14) = v18;
          operator delete(v20);
        }
      }
      else
      {
        uint64_t v17 = v16 - 15;
        uint64_t v18 = *(v16 - 15);
        if (v18) {
          goto LABEL_20;
        }
      }
      uint64_t v16 = v17;
      if (v17 == v14)
      {
        unint64_t v13 = *v12;
        goto LABEL_9;
      }
    }
  }
LABEL_24:
  if (!v2) {
    return;
  }
LABEL_25:

  operator delete(v2);
}

uint64_t sub_CE1FD0(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 3);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v10 = &v15;
    }
    else {
      long long v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    uint8x8_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 8 * a2;
}

void sub_CE2100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void ****sub_CE21E0(void ****a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    unsigned int v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 3;
      do
      {
        if (*v5)
        {
          sub_CE2264((uint64_t)v5, *v5);
          operator delete(*v5);
        }
        BOOL v6 = v5 == v2;
        v5 -= 3;
      }
      while (!v6);
      unsigned int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_CE2264(uint64_t a1, void **a2)
{
  unsigned int v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      if (*((char *)v4 - 1) < 0)
      {
        operator delete(*(v4 - 3));
        BOOL v6 = v4 - 6;
        long long v7 = (void **)*(v4 - 6);
        if (v7)
        {
LABEL_10:
          std::string::size_type v8 = (void **)*(v4 - 5);
          uint64_t v5 = v7;
          if (v8 != v7)
          {
            do
            {
              long long v9 = *(v8 - 28);
              if (v9)
              {
                *(v8 - 27) = v9;
                operator delete(v9);
              }
              long long v10 = *(v8 - 31);
              if (v10)
              {
                *(v8 - 30) = v10;
                operator delete(v10);
              }
              char v11 = *(v8 - 39);
              if (v11)
              {
                *(v8 - 38) = v11;
                operator delete(v11);
              }
              uint8x8_t v12 = *(v8 - 42);
              if (v12)
              {
                *(v8 - 41) = v12;
                operator delete(v12);
              }
              long long v13 = (char *)*(v8 - 45);
              if (v13)
              {
                unint64_t v14 = (char *)*(v8 - 44);
                std::string v15 = *(v8 - 45);
                if (v14 != v13)
                {
                  do
                  {
                    std::string v16 = (void *)*((void *)v14 - 3);
                    if (v16)
                    {
                      *((void *)v14 - 2) = v16;
                      operator delete(v16);
                    }
                    v14 -= 56;
                  }
                  while (v14 != v13);
                  std::string v15 = *(v8 - 45);
                }
                *(v8 - 44) = v13;
                operator delete(v15);
              }
              std::string v17 = *(v8 - 57);
              if (v17)
              {
                *(v8 - 56) = v17;
                operator delete(v17);
              }
              std::string v18 = v8 - 60;
              if (*((char *)v8 - 457) < 0) {
                operator delete(*v18);
              }
              v8 -= 60;
            }
            while (v18 != v7);
            uint64_t v5 = *v6;
          }
          *(v4 - 5) = v7;
          operator delete(v5);
        }
      }
      else
      {
        BOOL v6 = v4 - 6;
        long long v7 = (void **)*(v4 - 6);
        if (v7) {
          goto LABEL_10;
        }
      }
      unsigned int v4 = v6;
    }
    while (v6 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_CE23F0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "Bad optional access.");
    uint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return result;
}

void sub_CE2464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_CE2494(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      sub_2E00();
    }
    unint64_t v5 = a1[1];
    std::string v16 = a1 + 2;
    uint64_t v6 = 48 * a2;
    long long v7 = (char *)operator new(48 * a2);
    std::string::size_type v8 = &v7[v5 - v3];
    if (v5 == v3)
    {
      int64x2_t v12 = vdupq_n_s64(v3);
      long long v9 = &v7[v5 - v3];
    }
    else
    {
      long long v9 = &v7[v5 - v3];
      do
      {
        long long v10 = *(_OWORD *)(v5 - 48);
        v5 -= 48;
        *((_OWORD *)v9 - 3) = v10;
        v9 -= 48;
        *((void *)v9 + 2) = *(void *)(v5 + 16);
        *(void *)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        long long v11 = *(_OWORD *)(v5 + 24);
        *((void *)v9 + 5) = *(void *)(v5 + 40);
        *(_OWORD *)(v9 + 24) = v11;
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        *(void *)(v5 + 24) = 0;
      }
      while (v5 != v3);
      int64x2_t v12 = *(int64x2_t *)a1;
      unint64_t v2 = a1[2];
    }
    *a1 = (unint64_t)v9;
    a1[1] = (unint64_t)v8;
    int64x2_t v14 = v12;
    a1[2] = (unint64_t)&v7[v6];
    unint64_t v15 = v2;
    std::string __p = (void *)v12.i64[0];
    sub_CE25EC((uint64_t)&__p, v12.i64[0]);
    if (__p) {
      operator delete(__p);
    }
  }
}

uint64_t sub_CE25B4(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_CE25EC(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v6 = (void **)(i - 48);
    *(void *)(a1 + 16) = i - 48;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      long long v7 = (void **)*v6;
      if (*v6)
      {
LABEL_10:
        std::string::size_type v8 = *(void ***)(i - 40);
        unint64_t v5 = v7;
        if (v8 != v7)
        {
          do
          {
            long long v9 = *(v8 - 28);
            if (v9)
            {
              *(v8 - 27) = v9;
              operator delete(v9);
            }
            long long v10 = *(v8 - 31);
            if (v10)
            {
              *(v8 - 30) = v10;
              operator delete(v10);
            }
            long long v11 = *(v8 - 39);
            if (v11)
            {
              *(v8 - 38) = v11;
              operator delete(v11);
            }
            int64x2_t v12 = *(v8 - 42);
            if (v12)
            {
              *(v8 - 41) = v12;
              operator delete(v12);
            }
            long long v13 = (char *)*(v8 - 45);
            if (v13)
            {
              int64x2_t v14 = (char *)*(v8 - 44);
              unint64_t v15 = *(v8 - 45);
              if (v14 != v13)
              {
                do
                {
                  std::string v16 = (void *)*((void *)v14 - 3);
                  if (v16)
                  {
                    *((void *)v14 - 2) = v16;
                    operator delete(v16);
                  }
                  v14 -= 56;
                }
                while (v14 != v13);
                unint64_t v15 = *(v8 - 45);
              }
              *(v8 - 44) = v13;
              operator delete(v15);
            }
            std::string v17 = *(v8 - 57);
            if (v17)
            {
              *(v8 - 56) = v17;
              operator delete(v17);
            }
            std::string v18 = v8 - 60;
            if (*((char *)v8 - 457) < 0) {
              operator delete(*v18);
            }
            v8 -= 60;
          }
          while (v18 != v7);
          unint64_t v5 = *v6;
        }
        *(void *)(i - 40) = v7;
        operator delete(v5);
      }
    }
    else
    {
      long long v7 = (void **)*v6;
      if (*v6) {
        goto LABEL_10;
      }
    }
  }
}

char **sub_CE2778(long long *a1, long long *a2, char **a3, char *a4)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; i += 30)
    {
      sub_EA8898((uint64_t)&__p, i);
      long long v9 = sub_CE2948(a3, a4, (uint64_t)&__p);
      if (v26 < 0)
      {
        operator delete(v25);
        long long v10 = (void **)__p;
        if (__p)
        {
LABEL_10:
          long long v11 = v24;
          std::string::size_type v8 = v10;
          if (v24 != v10)
          {
            do
            {
              int64x2_t v12 = *(v11 - 28);
              if (v12)
              {
                *(v11 - 27) = v12;
                operator delete(v12);
              }
              long long v13 = *(v11 - 31);
              if (v13)
              {
                *(v11 - 30) = v13;
                operator delete(v13);
              }
              int64x2_t v14 = *(v11 - 39);
              if (v14)
              {
                *(v11 - 38) = v14;
                operator delete(v14);
              }
              unint64_t v15 = *(v11 - 42);
              if (v15)
              {
                *(v11 - 41) = v15;
                operator delete(v15);
              }
              std::string v16 = (char *)*(v11 - 45);
              if (v16)
              {
                std::string v17 = (char *)*(v11 - 44);
                std::string v18 = *(v11 - 45);
                if (v17 != v16)
                {
                  do
                  {
                    long long v19 = (void *)*((void *)v17 - 3);
                    if (v19)
                    {
                      *((void *)v17 - 2) = v19;
                      operator delete(v19);
                    }
                    v17 -= 56;
                  }
                  while (v17 != v16);
                  std::string v18 = *(v11 - 45);
                }
                *(v11 - 44) = v16;
                operator delete(v18);
              }
              std::string::size_type v20 = *(v11 - 57);
              if (v20)
              {
                *(v11 - 56) = v20;
                operator delete(v20);
              }
              std::string::size_type v21 = v11 - 60;
              if (*((char *)v11 - 457) < 0) {
                operator delete(*v21);
              }
              v11 -= 60;
            }
            while (v21 != v10);
            std::string::size_type v8 = __p;
          }
          char v24 = v10;
          operator delete(v8);
        }
      }
      else
      {
        long long v10 = (void **)__p;
        if (__p) {
          goto LABEL_10;
        }
      }
      a4 = v9 + 48;
    }
  }
  return a3;
}

void sub_CE2934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_CE2948(char **a1, char *a2, uint64_t a3)
{
  long long v4 = a2;
  long long v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a2 - *a1) >> 4);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v7) >> 4) + 1;
    if (v18 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v7) >> 4);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v20 = 0x555555555555555;
    }
    else {
      unint64_t v20 = v18;
    }
    uint64_t v40 = a1 + 2;
    if (v20)
    {
      if (v20 > 0x555555555555555) {
        sub_188D718();
      }
      std::string::size_type v21 = (char *)operator new(48 * v20);
    }
    else
    {
      std::string::size_type v21 = 0;
    }
    std::string __p = v21;
    size_t v37 = &v21[48 * v8];
    int v38 = v37;
    int v39 = &v21[48 * v20];
    sub_CE2CB4((uint64_t)&__p, a3);
    char v24 = v37;
    unint64_t v25 = *a1;
    char v26 = v37;
    if (*a1 != v4)
    {
      char v26 = v37;
      unint64_t v27 = v4;
      do
      {
        *((void *)v26 - 6) = 0;
        *((void *)v26 - 5) = 0;
        v26 -= 48;
        *((void *)v26 + 2) = 0;
        long long v28 = *((_OWORD *)v27 - 3);
        v27 -= 48;
        *(_OWORD *)char v26 = v28;
        *((void *)v26 + 2) = *((void *)v27 + 2);
        *(void *)unint64_t v27 = 0;
        *((void *)v27 + 1) = 0;
        *((void *)v27 + 2) = 0;
        long long v29 = *(_OWORD *)(v27 + 24);
        *((void *)v26 + 5) = *((void *)v27 + 5);
        *(_OWORD *)(v26 + 24) = v29;
        *((void *)v27 + 4) = 0;
        *((void *)v27 + 5) = 0;
        *((void *)v27 + 3) = 0;
      }
      while (v27 != v25);
    }
    size_t v37 = v26;
    int v30 = a1[1];
    BOOL v31 = v38;
    if (v30 != v4)
    {
      do
      {
        *(void *)BOOL v31 = 0;
        *((void *)v31 + 1) = 0;
        *((void *)v31 + 2) = 0;
        *(_OWORD *)BOOL v31 = *(_OWORD *)v4;
        *((void *)v31 + 2) = *((void *)v4 + 2);
        *(void *)long long v4 = 0;
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        long long v32 = *(_OWORD *)(v4 + 24);
        *((void *)v31 + 5) = *((void *)v4 + 5);
        *(_OWORD *)(v31 + 24) = v32;
        *((void *)v4 + 4) = 0;
        *((void *)v4 + 5) = 0;
        *((void *)v4 + 3) = 0;
        v31 += 48;
        v4 += 48;
      }
      while (v4 != v30);
      char v26 = v37;
      long long v4 = a1[1];
    }
    uint64_t v33 = *a1;
    *a1 = v26;
    a1[1] = v31;
    std::string::size_type v34 = a1[2];
    a1[2] = v39;
    int v38 = v4;
    int v39 = v34;
    std::string __p = v33;
    size_t v37 = v33;
    sub_CE25EC((uint64_t)&__p, (uint64_t)v33);
    if (__p) {
      operator delete(__p);
    }
    return v24;
  }
  else if (a2 == (char *)v6)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((void *)a2 + 2) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::string::size_type v22 = &v7[48 * v8];
    long long v23 = *(_OWORD *)(a3 + 24);
    *((void *)v22 + 5) = *(void *)(a3 + 40);
    *(_OWORD *)(v22 + 24) = v23;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 24) = 0;
    a1[1] = a2 + 48;
  }
  else
  {
    long long v10 = a1[1];
    if (v6 >= 0x30)
    {
      unint64_t v11 = v6 - 48;
      long long v10 = a1[1];
      do
      {
        *(void *)long long v10 = 0;
        *((void *)v10 + 1) = 0;
        *((void *)v10 + 2) = 0;
        *(_OWORD *)long long v10 = *(_OWORD *)v11;
        *((void *)v10 + 2) = *(void *)(v11 + 16);
        *(void *)unint64_t v11 = 0;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        long long v12 = *(_OWORD *)(v11 + 24);
        *((void *)v10 + 5) = *(void *)(v11 + 40);
        *(_OWORD *)(v10 + 24) = v12;
        *(void *)(v11 + 32) = 0;
        *(void *)(v11 + 40) = 0;
        *(void *)(v11 + 24) = 0;
        v10 += 48;
        v11 += 48;
      }
      while (v11 < v6);
    }
    a1[1] = v10;
    sub_CE2E9C((uint64_t)&__p, a2, (void *)(v6 - 48), v6);
    uint64_t v13 = *(void *)v4;
    if (*(void *)v4)
    {
      uint64_t v14 = *((void *)v4 + 1);
      unint64_t v15 = *(void **)v4;
      if (v14 != v13)
      {
        do
          uint64_t v14 = sub_4451C0(v14 - 480);
        while (v14 != v13);
        unint64_t v15 = *(void **)v4;
      }
      *((void *)v4 + 1) = v13;
      operator delete(v15);
      *(void *)long long v4 = 0;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
    }
    *(_OWORD *)long long v4 = *(_OWORD *)a3;
    *((void *)v4 + 2) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::string v16 = (void **)&v7[48 * v8 + 24];
    if (v4[47] < 0) {
      operator delete(*v16);
    }
    long long v17 = *(_OWORD *)(a3 + 24);
    *(void *)&v7[48 * v8 + 40] = *(void *)(a3 + 40);
    *(_OWORD *)std::string v16 = v17;
    *(unsigned char *)(a3 + 47) = 0;
    *(unsigned char *)(a3 + 24) = 0;
  }
  return v4;
}

void sub_CE2CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_CE25B4((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_CE2CB4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 == *(void *)(a1 + 24))
  {
    unint64_t v6 = *(void **)a1;
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= *(void *)a1)
    {
      unint64_t v11 = 0x5555555555555556 * ((uint64_t)(v4 - (void)v6) >> 4);
      if ((void *)v4 == v6) {
        unint64_t v11 = 1;
      }
      uint64_t v24 = *(void *)(a1 + 32);
      if (v11 >= 0x555555555555556) {
        sub_188D718();
      }
      unint64_t v12 = v11 >> 2;
      uint64_t v13 = 48 * v11;
      uint64_t v14 = (char *)operator new(48 * v11);
      unint64_t v15 = &v14[48 * v12];
      if (v4 == v5)
      {
        int64x2_t v19 = vdupq_n_s64(v4);
        std::string v16 = &v14[48 * v12];
      }
      else
      {
        std::string v16 = &v15[v4 - v5];
        long long v17 = &v14[48 * v12];
        do
        {
          *(_OWORD *)long long v17 = *(_OWORD *)v5;
          *((void *)v17 + 2) = *(void *)(v5 + 16);
          *(void *)unint64_t v5 = 0;
          *(void *)(v5 + 8) = 0;
          *(void *)(v5 + 16) = 0;
          long long v18 = *(_OWORD *)(v5 + 24);
          *((void *)v17 + 5) = *(void *)(v5 + 40);
          *(_OWORD *)(v17 + 24) = v18;
          *(void *)(v5 + 32) = 0;
          *(void *)(v5 + 40) = 0;
          *(void *)(v5 + 24) = 0;
          v17 += 48;
          v5 += 48;
        }
        while (v17 != v16);
        unint64_t v6 = *(void **)a1;
        int64x2_t v19 = *(int64x2_t *)(a1 + 8);
        unint64_t v4 = *(void *)(a1 + 24);
      }
      std::string __p = v6;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v15;
      int64x2_t v22 = v19;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v14[v13];
      unint64_t v23 = v4;
      sub_CE25EC((uint64_t)&__p, v19.i64[0]);
      if (__p) {
        operator delete(__p);
      }
      unint64_t v4 = *(void *)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(void *)a1) >> 4);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -48 * (v8 >> 1);
      sub_CE3078((uint64_t)&__p, *(void *)(a1 + 8), v4, v5 - 48 * (v8 >> 1));
      unint64_t v4 = v10;
      *(void *)(a1 + 8) += v9;
      *(void *)(a1 + 16) = v10;
    }
  }
  *(void *)unint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
  *(void *)(v4 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  __n128 result = *(__n128 *)(a2 + 24);
  *(void *)(v4 + 40) = *(void *)(a2 + 40);
  *(__n128 *)(v4 + 24) = result;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 16) += 48;
  return result;
}

void *sub_CE2E9C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (a3 != a2)
  {
    unint64_t v6 = a3;
    uint64_t v7 = a4;
    do
    {
      unint64_t v10 = *(void ***)(v7 - 48);
      v7 -= 48;
      uint64_t v9 = v10;
      if (v10)
      {
        unint64_t v11 = *(void ***)(v4 - 40);
        unint64_t v12 = v9;
        if (v11 != v9)
        {
          do
          {
            uint64_t v13 = *(v11 - 28);
            if (v13)
            {
              *(v11 - 27) = v13;
              operator delete(v13);
            }
            uint64_t v14 = *(v11 - 31);
            if (v14)
            {
              *(v11 - 30) = v14;
              operator delete(v14);
            }
            unint64_t v15 = *(v11 - 39);
            if (v15)
            {
              *(v11 - 38) = v15;
              operator delete(v15);
            }
            std::string v16 = *(v11 - 42);
            if (v16)
            {
              *(v11 - 41) = v16;
              operator delete(v16);
            }
            long long v17 = (char *)*(v11 - 45);
            if (v17)
            {
              long long v18 = (char *)*(v11 - 44);
              int64x2_t v19 = *(v11 - 45);
              if (v18 != v17)
              {
                do
                {
                  unint64_t v20 = (void *)*((void *)v18 - 3);
                  if (v20)
                  {
                    *((void *)v18 - 2) = v20;
                    operator delete(v20);
                  }
                  v18 -= 56;
                }
                while (v18 != v17);
                int64x2_t v19 = *(v11 - 45);
              }
              *(v11 - 44) = v17;
              operator delete(v19);
            }
            std::string::size_type v21 = *(v11 - 57);
            if (v21)
            {
              *(v11 - 56) = v21;
              operator delete(v21);
            }
            int64x2_t v22 = v11 - 60;
            if (*((char *)v11 - 457) < 0) {
              operator delete(*v22);
            }
            v11 -= 60;
          }
          while (v22 != v9);
          unint64_t v12 = *(void ***)v7;
        }
        *(void *)(v4 - 40) = v9;
        operator delete(v12);
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0;
      }
      unint64_t v23 = v6 - 6;
      *(_OWORD *)(v4 - 48) = *((_OWORD *)v6 - 3);
      *(void *)(v4 - 32) = *(v6 - 4);
      *unint64_t v23 = 0;
      v23[1] = 0;
      v23[2] = 0;
      uint64_t v24 = (void **)(v4 - 24);
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*v24);
      }
      long long v8 = *(_OWORD *)(v6 - 3);
      *(void *)(v4 - 8) = *(v6 - 1);
      *(_OWORD *)uint64_t v24 = v8;
      *((unsigned char *)v6 - 1) = 0;
      *((unsigned char *)v6 - 24) = 0;
      uint64_t v4 = v7;
      v6 -= 6;
    }
    while (v23 != a2);
  }
  return a3;
}

uint64_t sub_CE3078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v8 = *(void ***)a4;
      if (*(void *)a4)
      {
        uint64_t v9 = *(void ***)(a4 + 8);
        unint64_t v10 = *(void ***)a4;
        if (v9 != v8)
        {
          do
          {
            unint64_t v11 = *(v9 - 28);
            if (v11)
            {
              *(v9 - 27) = v11;
              operator delete(v11);
            }
            unint64_t v12 = *(v9 - 31);
            if (v12)
            {
              *(v9 - 30) = v12;
              operator delete(v12);
            }
            uint64_t v13 = *(v9 - 39);
            if (v13)
            {
              *(v9 - 38) = v13;
              operator delete(v13);
            }
            uint64_t v14 = *(v9 - 42);
            if (v14)
            {
              *(v9 - 41) = v14;
              operator delete(v14);
            }
            unint64_t v15 = (char *)*(v9 - 45);
            if (v15)
            {
              std::string v16 = (char *)*(v9 - 44);
              long long v17 = *(v9 - 45);
              if (v16 != v15)
              {
                do
                {
                  long long v18 = (void *)*((void *)v16 - 3);
                  if (v18)
                  {
                    *((void *)v16 - 2) = v18;
                    operator delete(v18);
                  }
                  v16 -= 56;
                }
                while (v16 != v15);
                long long v17 = *(v9 - 45);
              }
              *(v9 - 44) = v15;
              operator delete(v17);
            }
            int64x2_t v19 = *(v9 - 57);
            if (v19)
            {
              *(v9 - 56) = v19;
              operator delete(v19);
            }
            unint64_t v20 = v9 - 60;
            if (*((char *)v9 - 457) < 0) {
              operator delete(*v20);
            }
            v9 -= 60;
          }
          while (v20 != v8);
          unint64_t v10 = *(void ***)a4;
        }
        *(void *)(a4 + 8) = v8;
        operator delete(v10);
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(void *)(a4 + 16) = 0;
      }
      *(_OWORD *)a4 = *(_OWORD *)v5;
      *(void *)(a4 + 16) = *(void *)(v5 + 16);
      *(void *)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
      std::string::size_type v21 = (void **)(a4 + 24);
      if (*(char *)(a4 + 47) < 0) {
        operator delete(*v21);
      }
      long long v7 = *(_OWORD *)(v5 + 24);
      *(void *)(a4 + 40) = *(void *)(v5 + 40);
      *(_OWORD *)std::string::size_type v21 = v7;
      *(unsigned char *)(v5 + 47) = 0;
      *(unsigned char *)(v5 + 24) = 0;
      v5 += 48;
      a4 += 48;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void ***sub_CE3240(void ****a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x5555555555555556 * (a1[2] - *a1);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(24 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  long long v8 = &v7[24 * v3];
  uint64_t v9 = (void ***)&v7[24 * v6];
  *(_OWORD *)long long v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v10 = (void ***)(v8 + 24);
  unint64_t v11 = *a1;
  unint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = (void ***)v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      uint64_t v13 = v8;
      *((void *)v8 - 2) = 0;
      *((void *)v8 - 1) = 0;
      long long v14 = *(_OWORD *)(v12 - 3);
      v12 -= 3;
      *(_OWORD *)(v8 - 24) = v14;
      v8 -= 24;
      *((void *)v13 - 1) = v12[2];
      *unint64_t v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
    }
    while (v12 != v11);
    unint64_t v12 = *a1;
    unint64_t v15 = a1[1];
    *a1 = (void ***)v8;
    a1[1] = v10;
    a1[2] = v9;
    if (v15 == v12)
    {
      unint64_t v12 = v15;
      if (!v15) {
        return v10;
      }
      goto LABEL_20;
    }
    std::string v16 = v15 - 3;
    do
    {
      if (*v16)
      {
        sub_CE2264((uint64_t)v16, *v16);
        operator delete(*v16);
      }
      BOOL v17 = v16 == v12;
      v16 -= 3;
    }
    while (!v17);
  }
  if (v12) {
LABEL_20:
  }
    operator delete(v12);
  return v10;
}

void ***sub_CE33B8(void ****a1)
{
  unint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (v2 - *a1);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (a1[2] - v3) > v5) {
    unint64_t v5 = 0x5555555555555556 * (a1[2] - v3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - v3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(24 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  long long v8 = &v7[24 * v4];
  uint64_t v9 = (void ***)&v7[24 * v6];
  *(void *)long long v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  unint64_t v10 = (void ***)(v8 + 24);
  if (v2 == v3)
  {
    *a1 = (void ***)v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      unint64_t v11 = v8;
      *((void *)v8 - 2) = 0;
      *((void *)v8 - 1) = 0;
      long long v12 = *(_OWORD *)(v2 - 3);
      v2 -= 3;
      *(_OWORD *)(v8 - 24) = v12;
      v8 -= 24;
      *((void *)v11 - 1) = v2[2];
      void *v2 = 0;
      v2[1] = 0;
      v2[2] = 0;
    }
    while (v2 != v3);
    unint64_t v2 = *a1;
    uint64_t v13 = a1[1];
    *a1 = (void ***)v8;
    a1[1] = v10;
    a1[2] = v9;
    if (v13 == v2)
    {
      unint64_t v2 = v13;
      if (!v13) {
        return v10;
      }
      goto LABEL_20;
    }
    long long v14 = v13 - 3;
    do
    {
      if (*v14)
      {
        sub_CE2264((uint64_t)v14, *v14);
        operator delete(*v14);
      }
      BOOL v15 = v14 == v2;
      v14 -= 3;
    }
    while (!v15);
  }
  if (v2) {
LABEL_20:
  }
    operator delete(v2);
  return v10;
}

double sub_CE3520(uint64_t a1)
{
  LODWORD(result) = *(_DWORD *)(a1 + 16);
  unint64_t v2 = 4;
  if (!vcvts_n_u32_f32(*(float *)&result, 2uLL))
  {
    do
    {
      if ((v2 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v2 *= 2;
    }
    while (!(unint64_t)(float)(*(float *)&result * (float)v2));
  }
  if (*(void *)(a1 + 48) || v2 != *(void *)(a1 + 56))
  {
    *(void *)&double result = sub_C74D8C(a1, v2).u64[0];
  }
  return result;
}

void sub_CE35CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_CE35E0(uint64_t a1)
{
  LODWORD(result) = *(_DWORD *)(a1 + 16);
  unint64_t v2 = 4;
  if (!vcvts_n_u32_f32(*(float *)&result, 2uLL))
  {
    do
    {
      if ((v2 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v2 *= 2;
    }
    while (!(unint64_t)(float)(*(float *)&result * (float)v2));
  }
  if (*(void *)(a1 + 144) || v2 != *(void *)(a1 + 152))
  {
    *(void *)&double result = sub_CE36A0(a1, v2).u64[0];
  }
  return result;
}

void sub_CE368C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64x2_t sub_CE36A0(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(_OWORD **)(a1 + 264);
  if (v4)
  {
    if (*(void *)(a1 + 152) == a2) {
      goto LABEL_7;
    }
    unint64_t v5 = malloc_type_realloc(*(void **)(a1 + 264), 104 * a2, 0x1060040F760E5CBuLL);
    if (!v5)
    {
      fprintf(__stderrp, "sparsehash: FATAL ERROR: failed to reallocate %lu elements for ptr %p", a2, v4);
      exit(1);
    }
  }
  else
  {
    unint64_t v5 = malloc_type_malloc(104 * a2, 0x1060040F760E5CBuLL);
  }
  *(void *)(a1 + 264) = v5;
  unint64_t v4 = v5;
LABEL_7:
  if (a2)
  {
    uint64_t v6 = 104 * a2;
    do
    {
      long long v7 = *(_OWORD *)(a1 + 160);
      long long v8 = *(_OWORD *)(a1 + 192);
      v4[1] = *(_OWORD *)(a1 + 176);
      v4[2] = v8;
      _OWORD *v4 = v7;
      long long v9 = *(_OWORD *)(a1 + 208);
      long long v10 = *(_OWORD *)(a1 + 224);
      long long v11 = *(_OWORD *)(a1 + 240);
      *((void *)v4 + 12) = *(void *)(a1 + 256);
      v4[4] = v10;
      v4[5] = v11;
      v4[3] = v9;
      unint64_t v4 = (_OWORD *)((char *)v4 + 104);
      v6 -= 104;
    }
    while (v6);
  }
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = a2;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)a2)));
  *(uint64x2_t *)a1 = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_CE37BC(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x88888888888888) {
    sub_2E00();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 5);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 5) >= 0x44444444444444) {
    unint64_t v6 = 0x88888888888888;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x88888888888888) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(480 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[480 * v3];
  long long v9 = &v7[480 * v6];
  sub_CE3918((uint64_t)(a1 + 2), v8, a2);
  uint64_t v10 = v8 + 480;
  long long v12 = (long long *)*a1;
  long long v11 = (long long *)a1[1];
  if (v11 == (long long *)*a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
    if (!v11) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v8 -= 480;
    v11 -= 30;
    sub_CE3918((uint64_t)(a1 + 2), v8, v11);
  }
  while (v11 != v12);
  uint64_t v13 = (long long *)*a1;
  long long v11 = (long long *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = (uint64_t)v9;
  if (v11 != v13)
  {
    do
    {
      v11 -= 30;
      sub_4451C0((uint64_t)v11);
    }
    while (v11 != v13);
    long long v11 = v13;
  }
  if (v11) {
LABEL_17:
  }
    operator delete(v11);
  return v10;
}

__n128 sub_CE3918(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 40) = *((void *)a3 + 5);
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 3) = 0;
  long long v4 = a3[4];
  long long v5 = a3[5];
  long long v6 = a3[6];
  *(void *)(a2 + 110) = *(void *)((char *)a3 + 110);
  *(_OWORD *)(a2 + 80) = v5;
  *(_OWORD *)(a2 + 96) = v6;
  *(_OWORD *)(a2 + 64) = v4;
  *(_OWORD *)(a2 + 48) = a3[3];
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 120) = 0;
  *(_OWORD *)(a2 + 120) = *(long long *)((char *)a3 + 120);
  *(void *)(a2 + 136) = *((void *)a3 + 17);
  *((void *)a3 + 15) = 0;
  *((void *)a3 + 16) = 0;
  *((void *)a3 + 17) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 144) = a3[9];
  *(void *)(a2 + 160) = *((void *)a3 + 20);
  *((void *)a3 + 18) = 0;
  *((void *)a3 + 19) = 0;
  *((void *)a3 + 20) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 168) = *(long long *)((char *)a3 + 168);
  *(void *)(a2 + 184) = *((void *)a3 + 23);
  *((void *)a3 + 21) = 0;
  *((void *)a3 + 22) = 0;
  *((void *)a3 + 23) = 0;
  long long v7 = a3[13];
  uint64_t v8 = *((void *)a3 + 28);
  *(_OWORD *)(a2 + 192) = a3[12];
  *(_OWORD *)(a2 + 208) = v7;
  *(void *)(a2 + 224) = v8;
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  *(_OWORD *)(a2 + 232) = *(long long *)((char *)a3 + 232);
  *(void *)(a2 + 248) = *((void *)a3 + 31);
  *((void *)a3 + 29) = 0;
  *((void *)a3 + 30) = 0;
  *((void *)a3 + 31) = 0;
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  *(_OWORD *)(a2 + 256) = a3[16];
  *(void *)(a2 + 272) = *((void *)a3 + 34);
  *((void *)a3 + 32) = 0;
  *((void *)a3 + 33) = 0;
  *((void *)a3 + 34) = 0;
  *(_OWORD *)(a2 + 280) = *(long long *)((char *)a3 + 280);
  *(_DWORD *)(a2 + 304) = *((_DWORD *)a3 + 76);
  if (*((_DWORD *)a3 + 76) <= 1u) {
    *(void *)(a2 + 296) = *((void *)a3 + 37);
  }
  *(_OWORD *)(a2 + 312) = *(long long *)((char *)a3 + 312);
  long long v9 = *(long long *)((char *)a3 + 408);
  long long v11 = *(long long *)((char *)a3 + 360);
  long long v10 = *(long long *)((char *)a3 + 376);
  *(_OWORD *)(a2 + 392) = *(long long *)((char *)a3 + 392);
  *(_OWORD *)(a2 + 408) = v9;
  *(_OWORD *)(a2 + 360) = v11;
  *(_OWORD *)(a2 + 376) = v10;
  long long v13 = *(long long *)((char *)a3 + 440);
  long long v12 = *(long long *)((char *)a3 + 456);
  long long v14 = *(long long *)((char *)a3 + 424);
  *(void *)(a2 + 471) = *(void *)((char *)a3 + 471);
  *(_OWORD *)(a2 + 440) = v13;
  *(_OWORD *)(a2 + 456) = v12;
  *(_OWORD *)(a2 + 424) = v14;
  __n128 result = *(__n128 *)((char *)a3 + 328);
  long long v16 = *(long long *)((char *)a3 + 344);
  *(__n128 *)(a2 + 328) = result;
  *(_OWORD *)(a2 + 344) = v16;
  return result;
}

char **sub_CE3A98(long long *a1, long long *a2, char **a3, char *a4)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; i += 30)
    {
      sub_EA8898((uint64_t)&__p, i);
      long long v9 = sub_CE2948(a3, a4, (uint64_t)&__p);
      if (v26 < 0)
      {
        operator delete(v25);
        long long v10 = (void **)__p;
        if (__p)
        {
LABEL_10:
          long long v11 = v24;
          uint64_t v8 = v10;
          if (v24 != v10)
          {
            do
            {
              long long v12 = *(v11 - 28);
              if (v12)
              {
                *(v11 - 27) = v12;
                operator delete(v12);
              }
              long long v13 = *(v11 - 31);
              if (v13)
              {
                *(v11 - 30) = v13;
                operator delete(v13);
              }
              long long v14 = *(v11 - 39);
              if (v14)
              {
                *(v11 - 38) = v14;
                operator delete(v14);
              }
              BOOL v15 = *(v11 - 42);
              if (v15)
              {
                *(v11 - 41) = v15;
                operator delete(v15);
              }
              long long v16 = (char *)*(v11 - 45);
              if (v16)
              {
                BOOL v17 = (char *)*(v11 - 44);
                long long v18 = *(v11 - 45);
                if (v17 != v16)
                {
                  do
                  {
                    int64x2_t v19 = (void *)*((void *)v17 - 3);
                    if (v19)
                    {
                      *((void *)v17 - 2) = v19;
                      operator delete(v19);
                    }
                    v17 -= 56;
                  }
                  while (v17 != v16);
                  long long v18 = *(v11 - 45);
                }
                *(v11 - 44) = v16;
                operator delete(v18);
              }
              unint64_t v20 = *(v11 - 57);
              if (v20)
              {
                *(v11 - 56) = v20;
                operator delete(v20);
              }
              std::string::size_type v21 = v11 - 60;
              if (*((char *)v11 - 457) < 0) {
                operator delete(*v21);
              }
              v11 -= 60;
            }
            while (v21 != v10);
            uint64_t v8 = __p;
          }
          uint64_t v24 = v10;
          operator delete(v8);
        }
      }
      else
      {
        long long v10 = (void **)__p;
        if (__p) {
          goto LABEL_10;
        }
      }
      a4 = v9 + 48;
    }
  }
  return a3;
}

void sub_CE3C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_CE3C68(void *a1, uint64_t a2, uint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3 != a2)
  {
    unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 3);
    if (v5 >> 59) {
      sub_2E00();
    }
    uint64_t v8 = operator new(0x99999999999999A0 * ((a3 - a2) >> 3));
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[4 * v5];
    a1[1] = sub_CE3D38(v4, a2, a3, v8);
  }
  return a1;
}

void sub_CE3D0C(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20AE8FC((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_CE3D38(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      long long v10 = *(const void **)v6;
      uint64_t v9 = *(void *)(v6 + 8);
      int64_t v11 = v9 - *(void *)v6;
      if (v9 != *(void *)v6)
      {
        if (0xCCCCCCCCCCCCCCCDLL * (v11 >> 4) >= 0x333333333333334) {
          sub_2E00();
        }
        long long v7 = (char *)operator new(v11);
        *a4 = v7;
        a4[1] = v7;
        a4[2] = &v7[16 * (v11 >> 4)];
        size_t v8 = 80 * ((v11 - 80) / 0x50uLL) + 80;
        memcpy(v7, v10, v8);
        a4[1] = &v7[v8];
      }
      a4[3] = *(void *)(v6 + 24);
      a4 += 4;
      v6 += 40;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_CE3E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_CE3E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_BEF7C0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_CE3E90(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = *(void ****)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) < a2)
  {
    uint64_t v6 = *(void ****)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      int64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      int64_t v11 = 0;
    }
    long long v13 = &v11[24 * v7];
    long long v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    long long v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        BOOL v17 = v13;
        *((void *)v13 - 2) = 0;
        *((void *)v13 - 1) = 0;
        long long v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((void *)v17 - 1) = v5[2];
        _OWORD *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      unint64_t v5 = *(void ****)a1;
      int64x2_t v19 = *(void ****)(a1 + 8);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (v19 == v5)
      {
        unint64_t v5 = v19;
        if (!v19) {
          return;
        }
        goto LABEL_24;
      }
      unint64_t v20 = v19 - 3;
      do
      {
        if (*v20)
        {
          sub_CE2264((uint64_t)v20, *v20);
          operator delete(*v20);
        }
        BOOL v21 = v20 == v5;
        v20 -= 3;
      }
      while (!v21);
    }
    if (!v5) {
      return;
    }
LABEL_24:
    operator delete(v5);
    return;
  }
  if (a2)
  {
    size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(*(void **)(a1 + 8), v12);
    unint64_t v5 = (void ***)((char *)v5 + v12);
  }
  *(void *)(a1 + 8) = v5;
}

uint64_t sub_CE40A4(void **a1, uint64_t a2, long long *a3, long long *a4, uint64_t a5)
{
  unint64_t v5 = *a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v7 = (uint64_t)*a1 + 24 * v6;
  if (a5 < 1) {
    return v7;
  }
  unint64_t v9 = a3;
  size_t v12 = (long long *)a1[1];
  int64_t v11 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)v12) >> 3)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v7) >> 3)) >= a5)
    {
      long long v18 = (long long *)((char *)a3 + 24 * a5);
      int64x2_t v19 = (char *)a1[1];
    }
    else
    {
      long long v18 = (long long *)((char *)a3 + 8 * (((uint64_t)v12 - v7) >> 3));
      int64x2_t v19 = (char *)a1[1];
      if (v18 != a4)
      {
        unint64_t v20 = (long long *)((char *)a3 + 8 * (((uint64_t)v12 - v7) >> 3));
        BOOL v21 = a1[1];
        do
        {
          long long v22 = *v20;
          v21[2] = *((void *)v20 + 2);
          *(_OWORD *)BOOL v21 = v22;
          v21 += 3;
          unint64_t v20 = (long long *)((char *)v20 + 24);
          v19 += 24;
        }
        while (v20 != a4);
      }
      a1[1] = v19;
      if ((uint64_t)v12 - v7 < 1) {
        return v7;
      }
    }
    uint64_t v23 = v7 + 24 * a5;
    uint64_t v24 = (long long *)&v19[-24 * a5];
    unint64_t v25 = v19;
    if (v24 < v12)
    {
      unint64_t v25 = v19;
      do
      {
        long long v26 = *v24;
        *((void *)v25 + 2) = *((void *)v24 + 2);
        *(_OWORD *)unint64_t v25 = v26;
        v25 += 24;
        uint64_t v24 = (long long *)((char *)v24 + 24);
      }
      while (v24 < v12);
    }
    a1[1] = v25;
    if (v19 != (char *)v23)
    {
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v19[-v23] >> 3);
      long long v28 = v19 - 8;
      uint64_t v29 = 24 * v27;
      do
      {
        *(v28 - 16) = *(unsigned char *)(v7 + v29 - 24);
        *((void *)v28 - 1) = *(void *)(v7 + v29 - 16);
        *(void *)long long v28 = *(void *)(v7 + v29 - 8);
        v28 -= 24;
        v29 -= 24;
      }
      while (v29);
    }
    if (v18 != a3)
    {
      uint64_t v30 = v7;
      do
      {
        *(unsigned char *)uint64_t v30 = *(unsigned char *)v9;
        *(_OWORD *)(v30 + 8) = *(long long *)((char *)v9 + 8);
        unint64_t v9 = (long long *)((char *)v9 + 24);
        v30 += 24;
      }
      while (v9 != v18);
    }
    return v7;
  }
  unint64_t v13 = a5 - 0x5555555555555555 * (((char *)v12 - v5) >> 3);
  if (v13 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 3);
  uint64_t v15 = 2 * v14;
  if (2 * v14 <= v13) {
    uint64_t v15 = v13;
  }
  if (v14 >= 0x555555555555555) {
    unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16)
  {
    if (v16 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    BOOL v17 = (char *)operator new(24 * v16);
  }
  else
  {
    BOOL v17 = 0;
  }
  BOOL v31 = &v17[24 * v6];
  uint64_t v32 = 24 * a5;
  uint64_t v33 = &v31[24 * a5];
  std::string::size_type v34 = v31;
  do
  {
    long long v35 = *v9;
    *((void *)v34 + 2) = *((void *)v9 + 2);
    *(_OWORD *)std::string::size_type v34 = v35;
    v34 += 24;
    unint64_t v9 = (long long *)((char *)v9 + 24);
    v32 -= 24;
  }
  while (v32);
  unint64_t v36 = *a1;
  size_t v37 = v31;
  if (*a1 != (void *)v7)
  {
    uint64_t v38 = v7;
    size_t v37 = v31;
    do
    {
      long long v39 = *(_OWORD *)(v38 - 24);
      *((void *)v37 - 1) = *(void *)(v38 - 8);
      *(_OWORD *)(v37 - 24) = v39;
      v37 -= 24;
      v38 -= 24;
    }
    while ((void *)v38 != v36);
    size_t v12 = (long long *)a1[1];
  }
  for (uint64_t i = &v17[24 * v16]; (long long *)v7 != v12; v7 += 24)
  {
    long long v41 = *(_OWORD *)v7;
    *((void *)v33 + 2) = *(void *)(v7 + 16);
    *(_OWORD *)uint64_t v33 = v41;
    v33 += 24;
  }
  uint64_t v42 = *a1;
  *a1 = v37;
  a1[1] = v33;
  a1[2] = i;
  if (v42) {
    operator delete(v42);
  }
  return (uint64_t)v31;
}

char *sub_CE4394(void ***a1, long long **a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x5555555555555556 * (a1[2] - *a1);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v23 = &v7[24 * v3];
  uint64_t v24 = &v7[24 * v6];
  sub_CDD030(v23, a2);
  unint64_t v8 = (void **)v23;
  unint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  if (v10 == *a1)
  {
    size_t v12 = a1[1];
  }
  else
  {
    do
    {
      *(v8 - 3) = 0;
      *(v8 - 2) = 0;
      v8 -= 3;
      __n128 v8[2] = 0;
      long long v11 = *(_OWORD *)(v10 - 3);
      v10 -= 3;
      *(_OWORD *)unint64_t v8 = v11;
      __n128 v8[2] = v10[2];
      *unint64_t v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
    }
    while (v10 != v9);
    size_t v12 = *a1;
    unint64_t v10 = a1[1];
  }
  *a1 = v8;
  a1[1] = (void **)(v23 + 24);
  a1[2] = (void **)v24;
  if (v10 != v12)
  {
    unint64_t v13 = v10;
    while (1)
    {
      unint64_t v16 = (void **)*(v13 - 3);
      v13 -= 3;
      uint64_t v15 = v16;
      if (v16) {
        break;
      }
LABEL_19:
      unint64_t v10 = v13;
      if (v13 == v12)
      {
        unint64_t v10 = v12;
        goto LABEL_33;
      }
    }
    BOOL v17 = (void **)*(v10 - 2);
    if (v17 == v15)
    {
      unint64_t v14 = v15;
LABEL_18:
      *(v10 - 2) = v15;
      operator delete(v14);
      goto LABEL_19;
    }
    while (1)
    {
      if (*((char *)v17 - 1) < 0)
      {
        operator delete(*(v17 - 3));
        long long v18 = v17 - 15;
        int64x2_t v19 = *(v17 - 15);
        if (v19)
        {
LABEL_29:
          uint64_t v20 = (uint64_t)*(v17 - 14);
          BOOL v21 = v19;
          if ((void *)v20 != v19)
          {
            do
              uint64_t v20 = sub_3AFFFC(v20 - 1056);
            while ((void *)v20 != v19);
            BOOL v21 = *v18;
          }
          *(v17 - 14) = v19;
          operator delete(v21);
        }
      }
      else
      {
        long long v18 = v17 - 15;
        int64x2_t v19 = *(v17 - 15);
        if (v19) {
          goto LABEL_29;
        }
      }
      BOOL v17 = v18;
      if (v18 == v15)
      {
        unint64_t v14 = *v13;
        goto LABEL_18;
      }
    }
  }
LABEL_33:
  if (v10) {
    operator delete(v10);
  }
  return v23 + 24;
}

void sub_CE45B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_CE45C8()
{
  unk_25E5FFF = 16641;
  word_25E5FE8 = 65;
  byte_25E6017 = 1;
  byte_25E6001 = 0;
}

void sub_CE45F0(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v5 = sub_3750CC(a1);
  sub_460B00(*(char **)(a2 + 8), (uint64_t)&v37);
  sub_3BD7E4((uint64_t)&v30, &v37);
  sub_3BD7E4((uint64_t)&v23, &v42);
  while (1)
  {
    if (v35 == v36 || v28 == v29)
    {
      if ((v35 == v36) == (v28 == v29)) {
        break;
      }
      goto LABEL_22;
    }
    uint64_t v7 = v30;
    if (v32 != v25) {
      goto LABEL_23;
    }
    if (v30)
    {
      unint64_t v8 = v31;
      int v9 = v8 < sub_470ADC(v30);
      unint64_t v10 = v23;
      if (!v23) {
        goto LABEL_20;
      }
    }
    else
    {
      int v9 = 0;
      unint64_t v10 = v23;
      if (!v23)
      {
LABEL_20:
        int v13 = 0;
        goto LABEL_21;
      }
    }
    unint64_t v11 = v24;
    unint64_t v12 = sub_470ADC(v10);
    int v13 = v11 < v12;
    if (v11 < v12) {
      int v14 = v9;
    }
    else {
      int v14 = 0;
    }
    if (v14 == 1)
    {
      uint64_t v15 = sub_470B40(v30, v31);
      if (v15 == sub_470B40(v23, v24)) {
        break;
      }
      goto LABEL_22;
    }
LABEL_21:
    if (v9 == v13) {
      break;
    }
LABEL_22:
    uint64_t v7 = v30;
LABEL_23:
    unint64_t v16 = (unsigned int *)sub_470B40(v7, v31);
    sub_2954EC(v5, (((unint64_t)(v16[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v16[1] << 32) | *v16) ^ 0x1000000000000, (uint64_t)v18);
    unint64_t v21 = sub_2E40A4((uint64_t)v18);
    int v22 = v17;
    sub_30C0C((char **)a3, (uint64_t *)&v21);
    if (__p)
    {
      uint64_t v20 = __p;
      operator delete(__p);
    }
    sub_3BD3D4(&v30);
  }
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    unint64_t v27 = v26;
    operator delete(v26);
  }
  if (v35)
  {
    unint64_t v36 = v35;
    operator delete(v35);
  }
  if (v33)
  {
    std::string::size_type v34 = v33;
    operator delete(v33);
  }
  if (v45)
  {
    uint64_t v46 = v45;
    operator delete(v45);
  }
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  if (v40)
  {
    long long v41 = v40;
    operator delete(v40);
  }
  if (v38)
  {
    long long v39 = v38;
    operator delete(v38);
  }
}

void sub_CE4810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  long long v28 = *(void **)v26;
  if (*(void *)v26)
  {
    *(void *)(v26 + 8) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

double sub_CE487C(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  double v8 = a1[1];
  if (v8 != 0.0)
  {
    double v47 = v8 * vabdd_f64(*(double *)(a2 + 72), *(double *)(a3 + 72));
    sub_319A8((uint64_t)&v48, &v47);
  }
  double v9 = a1[2];
  if (v9 != 0.0)
  {
    double v47 = v9 * vabdd_f64(*(double *)(a2 + 184), *(double *)(a3 + 184));
    sub_319A8((uint64_t)&v48, &v47);
  }
  if (a1[3] != 0.0)
  {
    uint64_t v10 = *(void *)a2;
    unint64_t v11 = (uint64_t *)sub_3AEFFC(v10);
    uint64_t v12 = *(void *)(v10 + 504);
    uint64_t v13 = *v11;
    uint64_t v14 = *(void *)sub_46CAA4(v10);
    uint64_t v15 = *(void *)a3;
    unint64_t v16 = (uint64_t *)sub_3AEFFC(*(void *)a3);
    uint64_t v17 = *(void *)(v15 + 504);
    uint64_t v18 = *v16;
    double v19 = (double)(v12 + v17 - (v13 + v14 + v18 + *(void *)sub_46CAA4(v15))) * 0.5;
    if (v19 >= 0.0)
    {
      if (v19 < 4.50359963e15)
      {
        uint64_t v20 = (uint64_t)(v19 + v19) + 1;
LABEL_13:
        double v19 = (double)(v20 >> 1);
      }
    }
    else if (v19 > -4.50359963e15)
    {
      uint64_t v20 = (uint64_t)(v19 + v19);
      if (v20 >= 1) {
        --v20;
      }
      goto LABEL_13;
    }
    unint64_t v21 = *(char **)(a3 + 8);
    double v47 = NAN;
    double v47 = fabs((double)((uint64_t)v19 - sub_10983E0(a4, v21, &v47)) / 100.0) * a1[3];
    sub_319A8((uint64_t)&v48, &v47);
  }
  int v22 = v48;
  uint64_t v23 = v49;
  if (v48 == v49)
  {
    double v31 = 0.0;
    if (!v48) {
      return v31;
    }
    goto LABEL_32;
  }
  long double v24 = *a1;
  if (*a1 == -INFINITY)
  {
    uint64_t v25 = v48 + 1;
    uint64_t v26 = v48;
    if (v48 + 1 != v49)
    {
      double v27 = *v48;
      uint64_t v26 = v48;
      long long v28 = v48 + 1;
      do
      {
        double v29 = *v28++;
        double v30 = v29;
        if (v29 < v27)
        {
          double v27 = v30;
          uint64_t v26 = v25;
        }
        uint64_t v25 = v28;
      }
      while (v28 != v49);
    }
  }
  else
  {
    if (v24 != INFINITY)
    {
      unint64_t v38 = (char *)v49 - (char *)v48 - 8;
      long double v39 = 0.0;
      uint64_t v40 = v48;
      if (v38 < 8) {
        goto LABEL_43;
      }
      uint64_t v41 = (v38 >> 3) + 1;
      uint64_t v40 = &v48[v41 & 0x3FFFFFFFFFFFFFFELL];
      long long v42 = v48 + 1;
      uint64_t v43 = v41 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        long double v44 = *v42;
        double v45 = pow(*(v42 - 1), v24);
        long double v39 = v39 + v45 + pow(v44, v24);
        v42 += 2;
        v43 -= 2;
      }
      while (v43);
      if (v41 != (v41 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_43:
        do
        {
          long double v46 = *v40++;
          long double v39 = v39 + pow(v46, v24);
        }
        while (v40 != v23);
      }
      double v31 = pow(v39, 1.0 / v24);
      if (v22) {
        goto LABEL_32;
      }
      return v31;
    }
    uint64_t v32 = v48 + 1;
    uint64_t v26 = v48;
    if (v48 + 1 != v49)
    {
      double v33 = *v48;
      uint64_t v26 = v48;
      std::string::size_type v34 = v48 + 1;
      do
      {
        double v35 = *v34++;
        double v36 = v35;
        if (v33 < v35)
        {
          double v33 = v36;
          uint64_t v26 = v32;
        }
        uint64_t v32 = v34;
      }
      while (v34 != v49);
    }
  }
  double v31 = *v26;
  if (v48)
  {
LABEL_32:
    uint64_t v49 = v22;
    operator delete(v22);
  }
  return v31;
}

void sub_CE4BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_CE4BDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!*(unsigned char *)(a2 + 209)) {
    return;
  }
  uint64_t v4 = a2;
  uint64_t v5 = (void *)a1;
  HIBYTE(v90[2]) = 19;
  strcpy((char *)v90, "WalkingRouteScoring");
  v87[0] = 0;
  v87[1] = 0;
  v88[0] = 0;
  unint64_t v6 = sub_374CDC(a1, (uint64_t)v90, (uint64_t *)v87);
  HIBYTE(v94) = 8;
  strcpy((char *)&__p, "standard");
  sub_1063EC8(v95, v6, (uint64_t)&__p);
  if (SHIBYTE(v94) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v7 = (void **)v87[0];
  if (v87[0])
  {
    double v8 = (void **)v87[1];
    double v9 = v87[0];
    if (v87[1] != v87[0])
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      double v9 = v87[0];
    }
    v87[1] = v7;
    operator delete(v9);
  }
  if ((SHIBYTE(v90[2]) & 0x80000000) == 0)
  {
    if (v97 != 0.0) {
      goto LABEL_17;
    }
LABEL_16:
    if (v96 == 0.0) {
      return;
    }
    goto LABEL_17;
  }
  operator delete(v90[0]);
  if (v97 == 0.0) {
    goto LABEL_16;
  }
LABEL_17:
  uint64_t v11 = *a3;
  uint64_t v10 = a3[1];
  if (*a3 == v10) {
    return;
  }
  uint64_t v80 = (unsigned char *)(v4 + 48);
  uint64_t v81 = v4;
  uint64_t v12 = (_DWORD *)(v4 + 64);
  v77 = v5;
  uint64_t v78 = (_DWORD *)(v4 + 64);
  uint64_t v79 = v10;
  while (2)
  {
    uint64_t v13 = *(void **)v11;
    uint64_t v14 = sub_3750CC(v5);
    sub_4671C4(v13, (uint64_t)v80, v12, v14, (uint64_t)v90);
    if (sub_4651D0(v90)) {
      goto LABEL_121;
    }
    *(_OWORD *)v87 = 0u;
    *(_OWORD *)v88 = 0u;
    int v89 = 1065353216;
    long long __p = 0uLL;
    v94 = 0;
    v84 = 0;
    v85 = 0;
    uint64_t v86 = 0;
    if (v90[1] == v90[0])
    {
      uint64_t v50 = 0;
      uint64_t v52 = -1;
      goto LABEL_68;
    }
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    int64_t v82 = ((char *)v90[1] - (char *)v90[0]) >> 4;
    do
    {
      uint64_t v18 = (void *)sub_5BF948(&v92, v16);
      if ((*v18 & v19) != 0)
      {
        uint64_t v20 = (char *)v90[0] + 16 * v16;
        if (v15 < v94)
        {
          *(_OWORD *)uint64_t v15 = *v20;
          v15 += 16;
          goto LABEL_42;
        }
        unint64_t v21 = (char *)__p;
        uint64_t v22 = (uint64_t)&v15[-__p] >> 4;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 60) {
          sub_2E00();
        }
        uint64_t v24 = (uint64_t)&v94[-__p];
        if ((uint64_t)&v94[-__p] >> 3 > v23) {
          unint64_t v23 = v24 >> 3;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          if (v25 >> 60) {
            goto LABEL_128;
          }
          uint64_t v26 = (char *)operator new(16 * v25);
          double v27 = &v26[16 * v22];
          *(_OWORD *)double v27 = *v20;
          if (v15 != v21)
          {
LABEL_38:
            long long v28 = v27;
            do
            {
              *((_OWORD *)v28 - 1) = *((_OWORD *)v15 - 1);
              v28 -= 16;
              v15 -= 16;
            }
            while (v15 != v21);
            double v29 = (char *)__p;
            uint64_t v15 = v27 + 16;
            *(void *)&long long __p = v28;
            *((void *)&__p + 1) = v27 + 16;
            v94 = &v26[16 * v25];
            if (v29) {
              goto LABEL_41;
            }
            goto LABEL_42;
          }
        }
        else
        {
          uint64_t v26 = 0;
          double v27 = (char *)(16 * v22);
          *(_OWORD *)(16 * v22) = *v20;
          if (v15 != v21) {
            goto LABEL_38;
          }
        }
        double v29 = v15;
        uint64_t v15 = v27 + 16;
        *(void *)&long long __p = v27;
        *((void *)&__p + 1) = v27 + 16;
        v94 = &v26[16 * v25];
        if (v29) {
LABEL_41:
        }
          operator delete(v29);
LABEL_42:
        *((void *)&__p + 1) = v15;
        double v30 = (void *)sub_468B3C(v91, v16);
        double v31 = v30;
        uint64_t v32 = v85;
        if (v85 < v86)
        {
          *(void *)v85 = *v30;
          uint64_t v17 = (uint64_t)(v32 + 8);
LABEL_24:
          uint64_t v4 = v81;
          v85 = (char *)v17;
          goto LABEL_25;
        }
        double v33 = (char *)v84;
        int64_t v34 = v85 - (unsigned char *)v84;
        uint64_t v35 = (v85 - (unsigned char *)v84) >> 3;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v37 = v86 - (unsigned char *)v84;
        if ((v86 - (unsigned char *)v84) >> 2 > v36) {
          unint64_t v36 = v37 >> 2;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          if (v38 >> 61) {
LABEL_128:
          }
            sub_188D718();
          long double v39 = (char *)operator new(8 * v38);
          uint64_t v40 = &v39[8 * v35];
          *(void *)uint64_t v40 = *v31;
          uint64_t v17 = (uint64_t)(v40 + 8);
          if (v32 == v33) {
            goto LABEL_63;
          }
        }
        else
        {
          long double v39 = 0;
          uint64_t v40 = (char *)(8 * v35);
          *(void *)(8 * v35) = *v31;
          uint64_t v17 = 8 * v35 + 8;
          if (v32 == v33)
          {
LABEL_63:
            v84 = v40;
            v85 = (char *)v17;
            uint64_t v86 = &v39[8 * v38];
            if (v33) {
              operator delete(v33);
            }
            goto LABEL_24;
          }
        }
        unint64_t v41 = v32 - 8 - v33;
        if (v41 < 0x58) {
          goto LABEL_133;
        }
        if ((unint64_t)(v32 - &v39[v34]) < 0x20) {
          goto LABEL_133;
        }
        uint64_t v42 = (v41 >> 3) + 1;
        uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
        long double v44 = &v32[-v43];
        v40 -= v43;
        double v45 = &v39[8 * v35 - 16];
        long double v46 = v32 - 16;
        uint64_t v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v48 = *(_OWORD *)v46;
          *((_OWORD *)v45 - 1) = *((_OWORD *)v46 - 1);
          *(_OWORD *)double v45 = v48;
          v45 -= 32;
          v46 -= 32;
          v47 -= 4;
        }
        while (v47);
        uint64_t v32 = v44;
        if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_133:
          do
          {
            uint64_t v49 = *((void *)v32 - 1);
            v32 -= 8;
            *((void *)v40 - 1) = v49;
            v40 -= 8;
          }
          while (v32 != v33);
        }
        goto LABEL_63;
      }
LABEL_25:
      ++v16;
    }
    while (v16 != v82);
    uint64_t v50 = (int64x2_t *)__p;
    uint64_t v51 = (uint64_t)&v15[-__p] >> 4;
    uint64_t v52 = v51 - 1;
    if (v51 != 1)
    {
LABEL_68:
      unint64_t v53 = 0;
      do
      {
        unint64_t v54 = v53++;
        int64x2_t v55 = vsubq_s64(v50[v53], v50[v54]);
        if (v55.i64[0] >= *(unsigned int *)(v4 + 44))
        {
          if (v55.i64[0] < 1)
          {
            double v57 = 0.0;
            if (*(double *)(v4 + 104) <= 0.0) {
              goto LABEL_76;
            }
          }
          else
          {
            int64x2_t v56 = (int64x2_t)vcvtq_f64_s64(v55);
            double v57 = vdivq_f64((float64x2_t)vdupq_laneq_s64(v56, 1), (float64x2_t)v56).f64[0];
            if (v57 >= *(double *)(v4 + 104)) {
              goto LABEL_76;
            }
          }
          if (v57 <= -*(double *)(v4 + 160))
          {
LABEL_76:
            unint64_t v58 = *(void *)sub_5BFE38(&v84, v54);
            if (!*v80
              || (v59 = *(int **)(sub_470B40(v13, v58) + 8), uint64_t v60 = (unsigned __int16 *)((char *)v59 - *v59),
                                                             *v60 < 0x2Fu)
              || (uint64_t v61 = v60[23]) == 0
              || ((int v62 = *((unsigned __int8 *)v59 + v61), v62 != 9) ? (v63 = v62 == 20) : (v63 = 1), !v63))
            {
              uint64_t v64 = *(void *)sub_5BFE38(&v84, v53);
              uint64_t v65 = v58 <= v64 + 1 ? v64 + 1 : v58;
              if (v58 < v64 + 1)
              {
                do
                {
                  unint64_t v83 = v58;
                  if (v87[1])
                  {
                    uint8x8_t v66 = (uint8x8_t)vcnt_s8((int8x8_t)v87[1]);
                    v66.i16[0] = vaddlv_u8(v66);
                    if (v66.u32[0] > 1uLL)
                    {
                      unint64_t v67 = v58;
                      if ((void *)v58 >= v87[1]) {
                        unint64_t v67 = v58 % (unint64_t)v87[1];
                      }
                    }
                    else
                    {
                      unint64_t v67 = ((unint64_t)v87[1] - 1) & v58;
                    }
                    unint64_t v68 = (void *)*((void *)v87[0] + v67);
                    if (v68)
                    {
                      int v69 = (void *)*v68;
                      if (v69)
                      {
                        if (v66.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            uint64_t v71 = v69[1];
                            if (v58 == v71)
                            {
                              if (v69[2] == v58) {
                                goto LABEL_108;
                              }
                            }
                            else if ((v71 & ((uint64_t)v87[1] - 1)) != v67)
                            {
                              goto LABEL_107;
                            }
                            int v69 = (void *)*v69;
                            if (!v69) {
                              goto LABEL_107;
                            }
                          }
                        }
                        do
                        {
                          unint64_t v70 = v69[1];
                          if (v58 == v70)
                          {
                            if (v69[2] == v58) {
                              goto LABEL_108;
                            }
                          }
                          else
                          {
                            if ((void *)v70 >= v87[1]) {
                              v70 %= (unint64_t)v87[1];
                            }
                            if (v70 != v67) {
                              break;
                            }
                          }
                          int v69 = (void *)*v69;
                        }
                        while (v69);
                      }
                    }
                  }
LABEL_107:
                  *(double *)(v11 + 104) = *(double *)(v11 + 104) + (double)(int)sub_4711DC(v13, v58, 0);
                  sub_7A06C8((uint64_t)v87, &v83, &v83);
LABEL_108:
                  ++v58;
                }
                while (v58 != v65);
              }
            }
          }
        }
      }
      while (v53 != v52);
    }
    double v72 = *(double *)(v11 + 104);
    if (v72 <= 0.0)
    {
      double v73 = *(double *)(v11 + 224);
    }
    else
    {
      double v73 = v97 + *(double *)(v11 + 224);
      *(double *)(v11 + 224) = v73;
    }
    uint64_t v12 = v78;
    uint64_t v10 = v79;
    *(double *)(v11 + 224) = v73 + v72 * v96;
    if (v84)
    {
      v85 = (char *)v84;
      operator delete(v84);
    }
    if (v50) {
      operator delete(v50);
    }
    uint64_t v74 = v88[0];
    if (v88[0])
    {
      do
      {
        __n128 v75 = (void *)*v74;
        operator delete(v74);
        uint64_t v74 = v75;
      }
      while (v75);
    }
    uint64_t v76 = v87[0];
    v87[0] = 0;
    uint64_t v5 = v77;
    if (v76) {
      operator delete(v76);
    }
LABEL_121:
    if (v92) {
      operator delete(v92);
    }
    if (v91[0])
    {
      v91[1] = v91[0];
      operator delete(v91[0]);
    }
    if (v90[0])
    {
      v90[1] = v90[0];
      operator delete(v90[0]);
    }
    v11 += 232;
    if (v11 != v10) {
      continue;
    }
    break;
  }
}

void sub_CE5350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  sub_1A668(&a21);
  if (a32 < 0)
  {
    operator delete(a27);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_CE53E8(uint64_t a1, uint64_t *a2)
{
  HIBYTE(v13[2]) = 19;
  strcpy((char *)v13, "WalkingRouteScoring");
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v3 = sub_374CDC(a1, (uint64_t)v13, (uint64_t *)&v10);
  char v9 = 8;
  strcpy((char *)__p, "standard");
  sub_1063EC8(v14, v3, (uint64_t)__p);
  sub_1063ECC(v15, v14);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = (void **)v10;
  if (v10)
  {
    uint64_t v5 = v11;
    unint64_t v6 = v10;
    if (v11 != v10)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      unint64_t v6 = v10;
    }
    uint64_t v11 = v4;
    operator delete(v6);
  }
  if (SHIBYTE(v13[2]) < 0) {
    operator delete(v13[0]);
  }
  return sub_1063ED4((uint64_t)v15, a2);
}

void sub_CE5504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a23 & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_CE5568(uint64_t result, void *a2)
{
  if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(a2[1] - *a2) >> 3)) >= 2)
  {
    uint64_t v3 = result;
    double v4 = *(double *)(*a2 + 216);
    if (v4 < 0.0)
    {
      __n128 result = sub_723EC(1u);
      if (result)
      {
        sub_6BAC((uint64_t)v34);
        uint64_t v5 = sub_188FC78(v34, (uint64_t)"[WalkingRouteSelectionModule] Best score found is negative for request: ", 72);
        unint64_t v6 = sub_69510();
        uint64_t v7 = sub_68EE4((uint64_t)v6);
        int v8 = *(char *)(v7 + 23);
        if (v8 >= 0) {
          uint64_t v9 = v7;
        }
        else {
          uint64_t v9 = *(void *)v7;
        }
        if (v8 >= 0) {
          uint64_t v10 = *(unsigned __int8 *)(v7 + 23);
        }
        else {
          uint64_t v10 = *(void *)(v7 + 8);
        }
        sub_188FC78(v5, v9, v10);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        if (v33 < 0) {
          operator delete(__p);
        }
        if (v35 < 0) {
          operator delete((void *)v34[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        __n128 result = std::ios::~ios();
      }
    }
    uint64_t v11 = a2[1];
    if (*a2 != v11)
    {
      double v12 = *(double *)(v3 + 32);
      double v13 = 2.0 - v12;
      if (v4 < 0.0) {
        double v12 = 2.0 - v12;
      }
      double v14 = v4 * v12;
      LODWORD(v13) = *(_DWORD *)(v3 + 40);
      double v15 = v4 + (double)*(unint64_t *)&v13;
      for (uint64_t i = *a2 + 232; ; i += 232)
      {
        *(void *)&long long v17 = *(void *)(i - 16);
        if (v14 < *(double *)&v17 || v15 < *(double *)&v17) {
          break;
        }
        if (i == v11) {
          return result;
        }
      }
      uint64_t v20 = i - 232;
      if (i - 232 != v11)
      {
        if (i != v11)
        {
          do
          {
            double v21 = *(double *)(i + 216);
            if (v14 >= v21)
            {
              LODWORD(v17) = *(_DWORD *)(v3 + 40);
              *(double *)&long long v17 = v4 + (double)(unint64_t)v17;
              if (*(double *)&v17 >= v21)
              {
                long long v22 = *(_OWORD *)i;
                long long v23 = *(_OWORD *)(i + 32);
                *(_OWORD *)(v20 + 16) = *(_OWORD *)(i + 16);
                *(_OWORD *)(v20 + 32) = v23;
                *(_OWORD *)uint64_t v20 = v22;
                long long v24 = *(_OWORD *)(i + 48);
                long long v25 = *(_OWORD *)(i + 64);
                long long v26 = *(_OWORD *)(i + 96);
                *(_OWORD *)(v20 + 80) = *(_OWORD *)(i + 80);
                *(_OWORD *)(v20 + 96) = v26;
                *(_OWORD *)(v20 + 48) = v24;
                *(_OWORD *)(v20 + 64) = v25;
                long long v27 = *(_OWORD *)(i + 112);
                long long v28 = *(_OWORD *)(i + 128);
                long long v29 = *(_OWORD *)(i + 160);
                *(_OWORD *)(v20 + 144) = *(_OWORD *)(i + 144);
                *(_OWORD *)(v20 + 160) = v29;
                *(_OWORD *)(v20 + 112) = v27;
                *(_OWORD *)(v20 + 128) = v28;
                long long v30 = *(_OWORD *)(i + 176);
                long long v17 = *(_OWORD *)(i + 192);
                long long v31 = *(_OWORD *)(i + 208);
                *(void *)(v20 + 224) = *(void *)(i + 224);
                *(_OWORD *)(v20 + 192) = v17;
                *(_OWORD *)(v20 + 208) = v31;
                *(_OWORD *)(v20 + 176) = v30;
                v20 += 232;
              }
            }
            i += 232;
          }
          while (i != v11);
          uint64_t v11 = a2[1];
        }
        if (v20 != v11) {
          a2[1] = v20;
        }
      }
    }
  }
  return result;
}

void sub_CE5858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_CE58A4(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if ((unint64_t)(0x34F72C234F72C235 * ((a3[1] - *a3) >> 3)) >= 2)
  {
    long long v71 = *(_OWORD *)(v3 + 176);
    long long v72 = *(_OWORD *)(v3 + 192);
    long long v73 = *(_OWORD *)(v3 + 208);
    uint64_t v74 = *(void *)(v3 + 224);
    long long v67 = *(_OWORD *)(v3 + 112);
    long long v68 = *(_OWORD *)(v3 + 128);
    long long v69 = *(_OWORD *)(v3 + 144);
    long long v70 = *(_OWORD *)(v3 + 160);
    long long v63 = *(_OWORD *)(v3 + 48);
    long long v64 = *(_OWORD *)(v3 + 64);
    long long v65 = *(_OWORD *)(v3 + 80);
    long long v66 = *(_OWORD *)(v3 + 96);
    *(_OWORD *)uint64_t v60 = *(_OWORD *)v3;
    long long v61 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)int v62 = *(_OWORD *)(v3 + 32);
    uint64_t v7 = operator new(0xE8uLL);
    uint64_t v76 = (char *)v7 + 232;
    long long v8 = v73;
    v7[12] = v72;
    v7[13] = v8;
    *((void *)v7 + 28) = v74;
    long long v9 = v69;
    v7[8] = v68;
    v7[9] = v9;
    long long v10 = v71;
    v7[10] = v70;
    v7[11] = v10;
    long long v11 = v65;
    v7[4] = v64;
    v7[5] = v11;
    long long v12 = v67;
    v7[6] = v66;
    v7[7] = v12;
    long long v13 = v61;
    *uint64_t v7 = *(_OWORD *)v60;
    v7[1] = v13;
    long long v14 = v63;
    v7[2] = *(_OWORD *)v62;
    v7[3] = v14;
    *(void *)&long long v75 = v7;
    *((void *)&v75 + 1) = (char *)v7 + 232;
    uint64_t v15 = *(void *)v7;
    unint64_t v16 = (uint64_t *)sub_3AEFFC(*(void *)v7);
    uint64_t v17 = *(void *)(v15 + 504);
    uint64_t v18 = *v16;
    uint64_t v19 = *(void *)sub_46CAA4(v15);
    sub_CE45F0(a1, *((void *)&v75 + 1) - 232, (uint64_t)&v58);
    uint64_t v20 = v19 + v18;
    if (v17 == v20 || v58 == v59)
    {
      unint64_t v38 = (char *)a3[2];
      long long v39 = v75;
      a3[2] = (uint64_t)v76;
      long long v40 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v39;
      long long v75 = v40;
      uint64_t v76 = v38;
    }
    else
    {
      sub_1091FB4((uint64_t)v60, a1);
      int64x2_t v55 = 0;
      int64x2_t v56 = 0;
      uint64_t v57 = 0;
      sub_1098760((uint64_t)v60, *(char **)(*((void *)&v75 + 1) - 224));
      sub_1090EFC((uint64_t)&v55, (const void **)&v58);
      uint64_t v22 = *a3;
      uint64_t v21 = a3[1];
      unint64_t v23 = 0x34F72C234F72C235 * ((v21 - *a3) >> 3);
      if (v23 <= 1) {
        uint64_t v24 = 1;
      }
      else {
        uint64_t v24 = 0x34F72C234F72C235 * ((v21 - *a3) >> 3);
      }
      if (v23 >= 2)
      {
        uint64_t v52 = v17 - v20;
        unint64_t v25 = 1;
        while (1)
        {
          if (0x34F72C234F72C235 * ((uint64_t)(*((void *)&v75 + 1) - v75) >> 3) >= (unint64_t)*(unsigned int *)(a2 + 8))
          {
LABEL_26:
            uint64_t v22 = *a3;
            uint64_t v21 = a3[1];
            break;
          }
          long long v26 = (uint64_t *)sub_CE5DA0(a3, v25);
          uint64_t v27 = *v26;
          long long v28 = (uint64_t *)sub_3AEFFC(*v26);
          uint64_t v29 = *(void *)(v27 + 504);
          uint64_t v30 = *v28;
          uint64_t v31 = *(void *)sub_46CAA4(v27) + v30;
          uint64_t v32 = v29 - v31;
          if (v29 != v31 && v58 != v59)
          {
            char v33 = (char *)v26[1];
            long long __p = (void *)0x7FFFFFFFFFFFFFFELL;
            uint64_t v34 = sub_1098AD0((uint64_t)v60, v33, &__p);
            uint64_t v35 = v52;
            if (v52 >= v32) {
              uint64_t v35 = v32;
            }
            if ((double)v34 / (double)v35 <= *(double *)(a2 + 16))
            {
              sub_CE45F0(a1, (uint64_t)v26, (uint64_t)&__p);
              unint64_t v36 = __p;
              if (__p == v54)
              {
                if (!__p) {
                  goto LABEL_9;
                }
              }
              else
              {
                uint64_t v37 = sub_1090FF0((uint64_t **)&v55, (uint64_t)&__p);
                if (v37 != 0x7FFFFFFFFFFFFFFFLL && v37 >= *(unsigned int *)(a2 + 24))
                {
                  sub_CE5FE0((char **)&v75, (long long *)v26);
                  sub_1098760((uint64_t)v60, *(char **)(*((void *)&v75 + 1) - 224));
                  sub_1090EFC((uint64_t)&v55, (const void **)&__p);
                }
                unint64_t v36 = __p;
                if (!__p) {
                  goto LABEL_9;
                }
              }
              unint64_t v54 = v36;
              operator delete(v36);
            }
          }
LABEL_9:
          if (v24 == ++v25) {
            goto LABEL_26;
          }
        }
      }
      unint64_t v41 = (char *)a3[2];
      *(_OWORD *)a3 = v75;
      a3[2] = (uint64_t)v76;
      *(void *)&long long v75 = v22;
      *((void *)&v75 + 1) = v21;
      uint64_t v76 = v41;
      uint64_t v42 = (char *)v55;
      if (v55)
      {
        uint64_t v43 = v56;
        long double v44 = v55;
        if (v56 != v55)
        {
          double v45 = v56;
          do
          {
            uint64_t v47 = (void *)*((void *)v45 - 3);
            v45 -= 24;
            long double v46 = v47;
            if (v47)
            {
              *((void *)v43 - 2) = v46;
              operator delete(v46);
            }
            uint64_t v43 = v45;
          }
          while (v45 != v42);
          long double v44 = v55;
        }
        int64x2_t v56 = v42;
        operator delete(v44);
      }
      if (v62[0])
      {
        v62[1] = v62[0];
        operator delete(v62[0]);
      }
      long long v48 = (char *)v60[1];
      if (v60[1])
      {
        uint64_t v49 = (char *)v61;
        uint64_t v50 = v60[1];
        if ((void *)v61 != v60[1])
        {
          do
          {
            uint64_t v51 = (void *)*((void *)v49 - 1);
            if (v51) {
              free(v51);
            }
            v49 -= 80;
          }
          while (v49 != v48);
          uint64_t v50 = v60[1];
        }
        *(void *)&long long v61 = v48;
        operator delete(v50);
      }
    }
    if (v58)
    {
      v59 = v58;
      operator delete(v58);
    }
    if ((void)v75)
    {
      *((void *)&v75 + 1) = v75;
      operator delete((void *)v75);
    }
  }
}

void sub_CE5D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = *(void **)(v19 - 128);
    if (!v21) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v21 = *(void **)(v19 - 128);
    if (!v21) {
      goto LABEL_3;
    }
  }
  *(void *)(v19 - 120) = v21;
  operator delete(v21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_CE5DA0(void *a1, unint64_t a2)
{
  if (0x34F72C234F72C235 * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    long long v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0x34F72C234F72C235 * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v10 = &v15;
    }
    else {
      long long v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    long long v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    long long v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 232 * a2;
}

void sub_CE5F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

char *sub_CE5FE0(char **a1, long long *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    std::string v18 = *a1;
    uint64_t v19 = 0x34F72C234F72C235 * ((v5 - *a1) >> 3);
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) > 0x11A7B9611A7B961) {
      sub_2E00();
    }
    unint64_t v21 = 0x34F72C234F72C235 * ((uint64_t)(v4 - (void)v18) >> 3);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0x8D3DCB08D3DCB0) {
      unint64_t v22 = 0x11A7B9611A7B961;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 > 0x11A7B9611A7B961) {
        sub_188D718();
      }
      unint64_t v23 = (char *)operator new(232 * v22);
    }
    else
    {
      unint64_t v23 = 0;
    }
    long long v24 = a2[13];
    unint64_t v25 = &v23[232 * v19];
    *((_OWORD *)v25 + 12) = a2[12];
    *((_OWORD *)v25 + 13) = v24;
    *((void *)v25 + 28) = *((void *)a2 + 28);
    long long v26 = a2[9];
    *((_OWORD *)v25 + 8) = a2[8];
    *((_OWORD *)v25 + 9) = v26;
    long long v27 = a2[11];
    *((_OWORD *)v25 + 10) = a2[10];
    *((_OWORD *)v25 + 11) = v27;
    long long v28 = a2[5];
    *((_OWORD *)v25 + 4) = a2[4];
    *((_OWORD *)v25 + 5) = v28;
    long long v29 = a2[7];
    *((_OWORD *)v25 + 6) = a2[6];
    *((_OWORD *)v25 + 7) = v29;
    long long v30 = a2[1];
    *(_OWORD *)unint64_t v25 = *a2;
    *((_OWORD *)v25 + 1) = v30;
    long long v32 = a2[2];
    long long v31 = a2[3];
    std::string v17 = v25 + 232;
    *((_OWORD *)v25 + 2) = v32;
    *((_OWORD *)v25 + 3) = v31;
    if (v5 != v18)
    {
      do
      {
        long long v33 = *(_OWORD *)(v5 - 232);
        long long v34 = *(_OWORD *)(v5 - 216);
        *(_OWORD *)(v25 - 200) = *(_OWORD *)(v5 - 200);
        *(_OWORD *)(v25 - 216) = v34;
        *(_OWORD *)(v25 - 232) = v33;
        long long v35 = *(_OWORD *)(v5 - 184);
        long long v36 = *(_OWORD *)(v5 - 168);
        long long v37 = *(_OWORD *)(v5 - 152);
        *(_OWORD *)(v25 - 136) = *(_OWORD *)(v5 - 136);
        *(_OWORD *)(v25 - 152) = v37;
        *(_OWORD *)(v25 - 168) = v36;
        *(_OWORD *)(v25 - 184) = v35;
        long long v38 = *(_OWORD *)(v5 - 120);
        long long v39 = *(_OWORD *)(v5 - 104);
        long long v40 = *(_OWORD *)(v5 - 88);
        *(_OWORD *)(v25 - 72) = *(_OWORD *)(v5 - 72);
        *(_OWORD *)(v25 - 88) = v40;
        *(_OWORD *)(v25 - 104) = v39;
        *(_OWORD *)(v25 - 120) = v38;
        long long v41 = *(_OWORD *)(v5 - 56);
        long long v42 = *(_OWORD *)(v5 - 40);
        long long v43 = *(_OWORD *)(v5 - 24);
        *((void *)v25 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v25 - 24) = v43;
        *(_OWORD *)(v25 - 40) = v42;
        *(_OWORD *)(v25 - 56) = v41;
        v25 -= 232;
        v5 -= 232;
      }
      while (v5 != v18);
      uint64_t v5 = *a1;
    }
    *a1 = v25;
    a1[1] = v17;
    a1[2] = &v23[232 * v22];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[2];
    *((_OWORD *)v5 + 1) = a2[1];
    *((_OWORD *)v5 + 2) = v7;
    *(_OWORD *)uint64_t v5 = v6;
    long long v8 = a2[3];
    long long v9 = a2[4];
    long long v10 = a2[6];
    *((_OWORD *)v5 + 5) = a2[5];
    *((_OWORD *)v5 + 6) = v10;
    *((_OWORD *)v5 + 3) = v8;
    *((_OWORD *)v5 + 4) = v9;
    long long v11 = a2[7];
    long long v12 = a2[8];
    long long v13 = a2[10];
    *((_OWORD *)v5 + 9) = a2[9];
    *((_OWORD *)v5 + 10) = v13;
    *((_OWORD *)v5 + 7) = v11;
    *((_OWORD *)v5 + 8) = v12;
    long long v14 = a2[11];
    long long v15 = a2[12];
    long long v16 = a2[13];
    *((void *)v5 + 28) = *((void *)a2 + 28);
    *((_OWORD *)v5 + 12) = v15;
    *((_OWORD *)v5 + 13) = v16;
    *((_OWORD *)v5 + 11) = v14;
    std::string v17 = v5 + 232;
  }
  a1[1] = v17;
  return v17 - 232;
}

void sub_CE620C(void *a1, uint64_t a2, void **a3)
{
  uint64_t v3 = *a3;
  if ((unint64_t)(0x34F72C234F72C235 * (((unsigned char *)a3[1] - (unsigned char *)*a3) >> 3)) < 2) {
    return;
  }
  unint64_t v4 = a3;
  long long v95 = v3[11];
  long long v96 = v3[12];
  long long v97 = v3[13];
  uint64_t v98 = *((void *)v3 + 28);
  long long v91 = v3[7];
  long long v92 = v3[8];
  long long v93 = v3[9];
  long long v94 = v3[10];
  long long v87 = v3[3];
  long long v88 = v3[4];
  long long v89 = v3[5];
  long long v90 = v3[6];
  *(_OWORD *)v85 = *v3;
  *(_OWORD *)&v85[16] = v3[1];
  *(_OWORD *)long long __p = v3[2];
  long long v7 = operator new(0xE8uLL);
  long long v8 = v95;
  long long v9 = v97;
  v7[12] = v96;
  v7[13] = v9;
  long long v10 = v91;
  long long v11 = v93;
  long long v12 = v94;
  v7[8] = v92;
  v7[9] = v11;
  v100 = (char *)v7 + 232;
  *((void *)v7 + 28) = v98;
  v7[10] = v12;
  v7[11] = v8;
  long long v13 = v89;
  v7[4] = v88;
  v7[5] = v13;
  v7[6] = v90;
  v7[7] = v10;
  long long v14 = *(_OWORD *)&v85[16];
  *long long v7 = *(_OWORD *)v85;
  v7[1] = v14;
  long long v15 = v87;
  v7[2] = *(_OWORD *)__p;
  v7[3] = v15;
  *(void *)&long long v99 = v7;
  *((void *)&v99 + 1) = (char *)v7 + 232;
  sub_1091FB4((uint64_t)v85, a1);
  long long v16 = (char *)operator new(0x38uLL);
  std::string v17 = v16 + 56;
  int64_t v82 = v16;
  v84 = v16 + 56;
  sub_CE9700(v16, v85);
  unint64_t v83 = v17;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v18 = *(void *)&v85[8];
  if (*(void *)&v85[8])
  {
    uint64_t v19 = *(void *)&v85[16];
    unint64_t v20 = *(void **)&v85[8];
    if (*(void *)&v85[16] != *(void *)&v85[8])
    {
      do
      {
        unint64_t v21 = *(void **)(v19 - 8);
        if (v21) {
          free(v21);
        }
        v19 -= 80;
      }
      while (v19 != v18);
      unint64_t v20 = *(void **)&v85[8];
    }
    *(void *)&v85[16] = v18;
    operator delete(v20);
  }
  sub_109809C((uint64_t)(v83 - 56), *(char **)(*((void *)&v99 + 1) - 224));
  unint64_t v22 = (char *)*v4;
  unint64_t v23 = v4[1];
  unint64_t v24 = 0x34F72C234F72C235 * ((v23 - (unsigned char *)*v4) >> 3);
  if (v24 <= 1) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = 0x34F72C234F72C235 * ((v23 - (unsigned char *)*v4) >> 3);
  }
  uint64_t v81 = v25;
  if (v24 < 2) {
    goto LABEL_73;
  }
  uint64_t v79 = a1;
  uint64_t v26 = 1;
  uint64_t v80 = v4;
  do
  {
    unint64_t v28 = 0x34F72C234F72C235 * ((uint64_t)(*((void *)&v99 + 1) - v99) >> 3);
    unint64_t v22 = (char *)*v4;
    if (v28 >= *(unsigned int *)(a2 + 8)) {
      goto LABEL_72;
    }
    long long v29 = (long long *)&v22[232 * v26];
    if (*((void *)&v99 + 1) != (void)v99)
    {
      uint64_t v30 = 0;
      long long v31 = (double *)&v22[232 * v26 + 216];
      while (1)
      {
        uint64_t v32 = v99;
        double v33 = sub_CE487C((double *)(a2 + 264), v99 + 232 * v30, (uint64_t)v29, (uint64_t)v82 + 56 * v30);
        long long v34 = *(double **)(a2 + 216);
        double v35 = *v34;
        if (v33 <= *v34) {
          break;
        }
        long long v36 = *(double **)(a2 + 224);
        if ((char *)v36 - (char *)v34 >= 16)
        {
          if ((char *)v36 - (char *)v34 != 16)
          {
            unint64_t v37 = (unint64_t)((char *)v36 - (char *)v34) >> 4;
            do
            {
              unint64_t v38 = (4 * v37) & 0xFFFFFFFFFFFFFFF0;
              _X13 = (char *)v34 + v38;
              __asm { PRFM            #0, [X13] }
              long double v44 = &v34[2 * (v37 >> 1)];
              _X12 = (char *)v44 + v38;
              __asm { PRFM            #0, [X12] }
              if (*v44 >= v33) {
                unint64_t v47 = 0;
              }
              else {
                unint64_t v47 = v37 >> 1;
              }
              v34 += 2 * v47;
              v37 -= v37 >> 1;
            }
            while ((uint64_t)v37 > 1);
            double v35 = *v34;
          }
          v34 += 2 * (v35 < v33);
        }
        if (v34 == v36)
        {
          double v49 = *(v36 - 1);
          uint64_t v50 = *(double **)(a2 + 240);
          double v51 = *v50;
          if (v33 <= *v50) {
            goto LABEL_52;
          }
        }
        else
        {
          double v48 = *(v34 - 2);
          if (v48 == *v34) {
            break;
          }
          double v49 = *(v34 - 1) + (v33 - v48) / (*v34 - v48) * (v34[1] - *(v34 - 1));
          uint64_t v50 = *(double **)(a2 + 240);
          double v51 = *v50;
          if (v33 <= *v50) {
            goto LABEL_52;
          }
        }
LABEL_41:
        uint64_t v52 = *(double **)(a2 + 248);
        if ((char *)v52 - (char *)v50 >= 16)
        {
          if ((char *)v52 - (char *)v50 != 16)
          {
            unint64_t v53 = (unint64_t)((char *)v52 - (char *)v50) >> 4;
            do
            {
              unint64_t v54 = (4 * v53) & 0xFFFFFFFFFFFFFFF0;
              _X13 = (char *)v50 + v54;
              __asm { PRFM            #0, [X13] }
              uint64_t v57 = &v50[2 * (v53 >> 1)];
              _X12 = (char *)v57 + v54;
              __asm { PRFM            #0, [X12] }
              if (*v57 >= v33) {
                unint64_t v60 = 0;
              }
              else {
                unint64_t v60 = v53 >> 1;
              }
              v50 += 2 * v60;
              v53 -= v53 >> 1;
            }
            while ((uint64_t)v53 > 1);
            double v51 = *v50;
          }
          v50 += 2 * (v51 < v33);
        }
        if (v50 == v52)
        {
          double v62 = *(v52 - 1);
        }
        else
        {
          double v61 = *(v50 - 2);
          if (v61 == *v50)
          {
LABEL_52:
            double v62 = v50[1];
            goto LABEL_55;
          }
          double v62 = *(v50 - 1) + (v33 - v61) / (*v50 - v61) * (v50[1] - *(v50 - 1));
        }
LABEL_55:
        double v63 = *(double *)(v32 + 232 * v30 + 216);
        double v64 = v62 + v63;
        if (*v31 >= v49 * v63 || *v31 >= v64) {
          goto LABEL_20;
        }
        if (++v30 == v28) {
          goto LABEL_61;
        }
      }
      double v49 = v34[1];
      uint64_t v50 = *(double **)(a2 + 240);
      double v51 = *v50;
      if (v33 <= *v50) {
        goto LABEL_52;
      }
      goto LABEL_41;
    }
LABEL_61:
    sub_CE5FE0((char **)&v99, v29);
    sub_1091FB4((uint64_t)v85, v79);
    long long v66 = v83;
    if (v83 >= v84)
    {
      unint64_t v83 = sub_CE9D2C((char **)&v82, (uint64_t)v85);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    else
    {
      *(void *)unint64_t v83 = *(void *)v85;
      *((void *)v66 + 1) = 0;
      *((void *)v66 + 3) = 0;
      *((void *)v66 + 4) = 0;
      *((void *)v66 + 2) = 0;
      *(_OWORD *)(v66 + 8) = *(_OWORD *)&v85[8];
      *((void *)v66 + 3) = *(void *)&v85[24];
      memset(&v85[8], 0, 24);
      *((void *)v66 + 5) = 0;
      *((void *)v66 + 6) = 0;
      *((_OWORD *)v66 + 2) = *(_OWORD *)__p;
      *((void *)v66 + 6) = v87;
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&long long v87 = 0;
      unint64_t v83 = v66 + 56;
    }
    uint64_t v67 = *(void *)&v85[8];
    if (*(void *)&v85[8])
    {
      uint64_t v68 = *(void *)&v85[16];
      long long v27 = *(void **)&v85[8];
      if (*(void *)&v85[16] != *(void *)&v85[8])
      {
        do
        {
          long long v69 = *(void **)(v68 - 8);
          if (v69) {
            free(v69);
          }
          v68 -= 80;
        }
        while (v68 != v67);
        long long v27 = *(void **)&v85[8];
      }
      *(void *)&v85[16] = v67;
      operator delete(v27);
    }
    sub_109809C((uint64_t)(v83 - 56), *(char **)(*((void *)&v99 + 1) - 224));
LABEL_20:
    ++v26;
    unint64_t v4 = v80;
  }
  while (v26 != v81);
  unint64_t v22 = (char *)*v80;
LABEL_72:
  unint64_t v23 = v4[1];
LABEL_73:
  long long v70 = (char *)v4[2];
  *(_OWORD *)unint64_t v4 = v99;
  v4[2] = v100;
  *(void *)&long long v99 = v22;
  *((void *)&v99 + 1) = v23;
  v100 = v70;
  long long v71 = (char *)v82;
  if (v82)
  {
    long long v72 = v83;
    long long v73 = v82;
    if (v83 != v82)
    {
      do
      {
        long long v75 = (void *)*((void *)v72 - 3);
        if (v75)
        {
          *((void *)v72 - 2) = v75;
          operator delete(v75);
        }
        uint64_t v76 = *((void *)v72 - 6);
        if (v76)
        {
          uint64_t v77 = *((void *)v72 - 5);
          uint64_t v74 = (void *)*((void *)v72 - 6);
          if (v77 != v76)
          {
            do
            {
              uint64_t v78 = *(void **)(v77 - 8);
              if (v78) {
                free(v78);
              }
              v77 -= 80;
            }
            while (v77 != v76);
            uint64_t v74 = (void *)*((void *)v72 - 6);
          }
          *((void *)v72 - 5) = v76;
          operator delete(v74);
        }
        v72 -= 56;
      }
      while (v72 != v71);
      long long v73 = v82;
    }
    unint64_t v83 = v71;
    operator delete(v73);
    unint64_t v22 = (char *)v99;
  }
  if (v22)
  {
    *((void *)&v99 + 1) = v22;
    operator delete(v22);
  }
}

void sub_CE6840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_CE68A4((void **)va);
  long long v8 = *(void **)(v6 - 128);
  if (v8)
  {
    *(void *)(v6 - 120) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void **sub_CE68A4(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v3 - 3);
        if (v6)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        uint64_t v7 = *((void *)v3 - 6);
        if (v7)
        {
          uint64_t v8 = *((void *)v3 - 5);
          uint64_t v5 = (void *)*((void *)v3 - 6);
          if (v8 != v7)
          {
            do
            {
              long long v9 = *(void **)(v8 - 8);
              if (v9) {
                free(v9);
              }
              v8 -= 80;
            }
            while (v8 != v7);
            uint64_t v5 = (void *)*((void *)v3 - 6);
          }
          *((void *)v3 - 5) = v7;
          operator delete(v5);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_CE6960@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = result[1];
  uint64_t v4 = v3 - *result;
  if (v3 != *result)
  {
    uint64_t v5 = result;
    uint64_t v6 = sub_CDCA00(a2, (uint64_t *)(*result + 8));
    a2[1] = (uint64_t)v6;
    __n128 result = (void *)sub_45FE2C((uint64_t)(v6 - 120), 0);
    if (v4 != 232)
    {
      uint64_t v7 = v4 / 232 - 1;
      uint64_t v8 = 240;
      do
      {
        long long v9 = (uint64_t *)(*v5 + v8);
        unint64_t v10 = a2[1];
        if (v10 >= a2[2])
        {
          long long v11 = sub_CDCA00(a2, v9);
        }
        else
        {
          sub_CDC900((uint64_t)a2, v9);
          long long v11 = (char *)(v10 + 120);
        }
        a2[1] = (uint64_t)v11;
        __n128 result = (void *)sub_45FE2C((uint64_t)(v11 - 120), 2);
        v8 += 232;
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

void sub_CE6A38(_Unwind_Exception *a1)
{
  sub_5AB1B0(v1);
  _Unwind_Resume(a1);
}

void sub_CE6A4C(_Unwind_Exception *a1)
{
  sub_5AB1B0(v1);
  _Unwind_Resume(a1);
}

void sub_CE6A60(void *a1@<X0>, uint64_t a2@<X1>, long long **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = (char *)a3[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((v7 - (char *)*a3) >> 3) >= 2 && *(unsigned char *)a2 == 0)
  {
    sub_CDCCDC(&__p, *a3, v7);
    sub_10605C8((uint64_t *)v28, (uint64_t)a1);
    sub_1060748(v28, (unsigned char *)(a2 + 200), (uint64_t *)&__p);
    sub_CE53E8((uint64_t)a1, (uint64_t *)&__p);
    long long v11 = __p;
    long long v12 = v27;
    unint64_t v13 = 0x34F72C234F72C235 * ((v27 - (unsigned char *)__p) >> 3);
    if (v27 - (unsigned char *)__p < 29697)
    {
LABEL_10:
      std::string v17 = 0;
      unint64_t v14 = 0;
    }
    else
    {
      unint64_t v14 = 0x34F72C234F72C235 * ((v27 - (unsigned char *)__p) >> 3);
      while (1)
      {
        long long v15 = operator new(232 * v14, &std::nothrow);
        if (v15) {
          break;
        }
        BOOL v16 = v14 > 1;
        v14 >>= 1;
        if (!v16) {
          goto LABEL_10;
        }
      }
      std::string v17 = v15;
    }
    sub_CE7060((uint64_t)v11, v12, v13, (uint64_t)v17, v14, v10);
    if (v17) {
      operator delete(v17);
    }
    int v18 = *(_DWORD *)(a2 + 4);
    if (v18 == 1)
    {
      sub_CE620C(a1, a2, &__p);
    }
    else if (!v18)
    {
      sub_CE5568(a2, &__p);
      sub_CE58A4(a1, a2, (uint64_t *)&__p);
    }
    sub_CE4BDC((uint64_t)a1, a2, (uint64_t *)&__p);
    unint64_t v20 = __p;
    unint64_t v21 = v27;
    unint64_t v22 = 0x34F72C234F72C235 * ((v27 - (unsigned char *)__p) >> 3);
    if (v27 - (unsigned char *)__p < 29697)
    {
LABEL_22:
      uint64_t v25 = 0;
      unint64_t v23 = 0;
    }
    else
    {
      unint64_t v23 = 0x34F72C234F72C235 * ((v27 - (unsigned char *)__p) >> 3);
      while (1)
      {
        unint64_t v24 = operator new(232 * v23, &std::nothrow);
        if (v24) {
          break;
        }
        BOOL v16 = v23 > 1;
        v23 >>= 1;
        if (!v16) {
          goto LABEL_22;
        }
      }
      uint64_t v25 = v24;
    }
    sub_CE861C((uint64_t)v20, v21, v22, (uint64_t)v25, v23, v19);
    if (v25) {
      operator delete(v25);
    }
    sub_CE6960(&__p, a4);
    if (__p)
    {
      long long v27 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    sub_CDD030(a4, a3);
  }
}

void sub_CE6CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_CE6CF8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_725D0((uint64_t)v41);
  memset(v40, 0, sizeof(v40));
  uint64_t v4 = **(long long ****)a1;
  uint64_t v5 = *(long long ***)(*(void *)a1 + 8);
  while (v4 != v5)
  {
    sub_CE6A60(*(void **)(a1 + 8), a1 + 24, v4, (uint64_t *)__p);
    uint64_t v6 = *(void *)&v40[8];
    if (*(void *)&v40[8] < *(void *)&v40[16])
    {
      **(void **)&v40[8] = 0;
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
      *(void *)(v6 + 16) = v39;
      *(void *)&v40[8] = v6 + 24;
    }
    else
    {
      uint64_t v7 = sub_C7B464((void ***)v40, (uint64_t)__p);
      uint64_t v8 = (void **)__p[0];
      *(void *)&v40[8] = v7;
      if (__p[0])
      {
        long long v9 = (void **)__p[1];
        __n128 v10 = __p[0];
        if (__p[1] == __p[0])
        {
LABEL_19:
          __p[1] = v8;
          operator delete(v10);
          goto LABEL_4;
        }
        while (2)
        {
          if (*((char *)v9 - 1) < 0)
          {
            operator delete(*(v9 - 3));
            long long v11 = v9 - 15;
            long long v12 = *(v9 - 15);
            if (!v12) {
              goto LABEL_10;
            }
          }
          else
          {
            long long v11 = v9 - 15;
            long long v12 = *(v9 - 15);
            if (!v12) {
              goto LABEL_10;
            }
          }
          uint64_t v13 = (uint64_t)*(v9 - 14);
          unint64_t v14 = v12;
          if ((void *)v13 != v12)
          {
            do
              uint64_t v13 = sub_3AFFFC(v13 - 1056);
            while ((void *)v13 != v12);
            unint64_t v14 = *v11;
          }
          *(v9 - 14) = v12;
          operator delete(v14);
LABEL_10:
          long long v9 = v11;
          if (v11 == v8)
          {
            __n128 v10 = __p[0];
            goto LABEL_19;
          }
          continue;
        }
      }
    }
LABEL_4:
    v4 += 3;
  }
  int v15 = sub_486180(*(void *)(a1 + 16));
  std::string v17 = *(uint64_t **)&v40[8];
  BOOL v16 = *(uint64_t **)v40;
  if (*(void *)v40 != *(void *)&v40[8])
  {
    int v18 = v15;
    uint64_t v19 = **(void **)v40;
    uint64_t v20 = *(void *)(*(void *)v40 + 8);
    if (**(void **)v40 != v20) {
      goto LABEL_24;
    }
    while (1)
    {
      v16 += 3;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *v16;
      uint64_t v20 = v16[1];
      if (*v16 != v20)
      {
        do
        {
LABEL_24:
          sub_45FE34(v19, v18++);
          v19 += 120;
        }
        while (v19 != v20);
      }
    }
  }
  *(void *)&v40[24] = sub_72688((uint64_t)v41);
  long long v21 = *(_OWORD *)v40;
  if (*(void *)v40 == *(void *)&v40[8])
  {
    double v25 = 0.0;
  }
  else
  {
    unint64_t v22 = *(void *)&v40[8] - *(void *)v40 - 24;
    if (v22 >= 0x60)
    {
      unint64_t v26 = v22 / 0x18 + 1;
      uint64_t v27 = v26 & 3;
      if ((v26 & 3) == 0) {
        uint64_t v27 = 4;
      }
      unint64_t v28 = v26 - v27;
      unint64_t v24 = (uint64_t *)(*(void *)v40 + 24 * v28);
      int64x2_t v29 = 0uLL;
      uint64_t v30 = *(const double **)v40;
      int64x2_t v31 = 0uLL;
      do
      {
        uint64_t v32 = v30;
        v30 += 12;
        float64x2x3_t v42 = vld3q_f64(v32);
        v32 += 6;
        v42.val[0] = (float64x2_t)vshrq_n_s64(vsubq_s64((int64x2_t)v42.val[1], (int64x2_t)v42.val[0]), 3uLL);
        float64_t v33 = v42.val[0].f64[1];
        *(float64x2x3_t *)((char *)&v42 + 16) = vld3q_f64(v32);
        unint64_t v34 = 0xEEEEEEEEEEEEEEEFLL * *(void *)&v42.val[0].f64[0];
        v42.val[0] = (float64x2_t)vshrq_n_s64(vsubq_s64((int64x2_t)v42.val[2], (int64x2_t)v42.val[1]), 3uLL);
        *(void *)&v42.val[1].f64[0] = v34;
        *(void *)&v42.val[1].f64[1] = 0xEEEEEEEEEEEEEEEFLL * *(void *)&v33;
        *(void *)&v42.val[0].f64[0] *= 0xEEEEEEEEEEEEEEEFLL;
        *(void *)&v42.val[0].f64[1] *= 0xEEEEEEEEEEEEEEEFLL;
        int64x2_t v29 = vaddq_s64((int64x2_t)v42.val[1], v29);
        int64x2_t v31 = vaddq_s64((int64x2_t)v42.val[0], v31);
        v28 -= 4;
      }
      while (v28);
      unint64_t v23 = vaddvq_s64(vaddq_s64(v31, v29));
    }
    else
    {
      unint64_t v23 = 0;
      unint64_t v24 = *(uint64_t **)v40;
    }
    do
    {
      uint64_t v35 = *v24;
      uint64_t v36 = v24[1];
      v24 += 3;
      v23 -= 0x1111111111111111 * ((v36 - v35) >> 3);
    }
    while (v24 != *(uint64_t **)&v40[8]);
    double v25 = (double)(v23 / (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v40[8] - *(void *)v40) >> 3)));
  }
  *(double *)&v40[32] = v25;
  *(unsigned char *)a2 = 1;
  *(_OWORD *)(a2 + 8) = v21;
  *(void *)(a2 + 24) = *(void *)&v40[16];
  double result = *(double *)&v40[24];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v40[24];
  return result;
}

void sub_CE7008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_C66564((void ***)va);
  _Unwind_Resume(a1);
}

void sub_CE701C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
}

void sub_CE7038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_C66564((void ***)va);
  _Unwind_Resume(a1);
}

void sub_CE704C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_C66564((void ***)va);
  _Unwind_Resume(a1);
}

__n128 sub_CE7060(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  if (a3 >= 2)
  {
    uint64_t v7 = a1;
    if (a3 == 2)
    {
      result.n128_u64[0] = *((void *)a2 - 2);
      if (result.n128_f64[0] < *(double *)(a1 + 216))
      {
        long long v112 = *(_OWORD *)(a1 + 192);
        long long v114 = *(_OWORD *)(a1 + 208);
        uint64_t v116 = *(void *)(a1 + 224);
        long long v104 = *(_OWORD *)(a1 + 128);
        long long v106 = *(_OWORD *)(a1 + 144);
        long long v108 = *(_OWORD *)(a1 + 160);
        long long v110 = *(_OWORD *)(a1 + 176);
        long long v96 = *(_OWORD *)(a1 + 64);
        long long v98 = *(_OWORD *)(a1 + 80);
        long long v100 = *(_OWORD *)(a1 + 96);
        long long v102 = *(_OWORD *)(a1 + 112);
        __n128 v88 = *(__n128 *)a1;
        long long v90 = *(_OWORD *)(a1 + 16);
        long long v92 = *(_OWORD *)(a1 + 32);
        long long v94 = *(_OWORD *)(a1 + 48);
        long long v8 = *(_OWORD *)(a2 - 232);
        long long v9 = *(_OWORD *)(a2 - 200);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 - 216);
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)a1 = v8;
        long long v10 = *(_OWORD *)(a2 - 184);
        long long v11 = *(_OWORD *)(a2 - 168);
        long long v12 = *(_OWORD *)(a2 - 136);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 - 152);
        *(_OWORD *)(a1 + 96) = v12;
        *(_OWORD *)(a1 + 48) = v10;
        *(_OWORD *)(a1 + 64) = v11;
        long long v13 = *(_OWORD *)(a2 - 120);
        long long v14 = *(_OWORD *)(a2 - 104);
        long long v15 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 160) = v15;
        *(_OWORD *)(a1 + 112) = v13;
        *(_OWORD *)(a1 + 128) = v14;
        long long v16 = *(_OWORD *)(a2 - 56);
        long long v17 = *(_OWORD *)(a2 - 40);
        long long v18 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 224) = *((void *)a2 - 1);
        *(_OWORD *)(a1 + 192) = v17;
        *(_OWORD *)(a1 + 208) = v18;
        *(_OWORD *)(a1 + 176) = v16;
        *(_OWORD *)(a2 - 56) = v110;
        *(_OWORD *)(a2 - 40) = v112;
        *(_OWORD *)(a2 - 24) = v114;
        *((void *)a2 - 1) = v116;
        *(_OWORD *)(a2 - 120) = v102;
        *(_OWORD *)(a2 - 104) = v104;
        *(_OWORD *)(a2 - 88) = v106;
        *(_OWORD *)(a2 - 72) = v108;
        *(_OWORD *)(a2 - 184) = v94;
        *(_OWORD *)(a2 - 168) = v96;
        *(_OWORD *)(a2 - 152) = v98;
        *(_OWORD *)(a2 - 136) = v100;
        double result = v88;
        *(__n128 *)(a2 - 232) = v88;
        *(_OWORD *)(a2 - 216) = v90;
        *(_OWORD *)(a2 - 200) = v92;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      uint64_t v37 = a4;
      unint64_t v38 = a3 >> 1;
      uint64_t v39 = a1 + 232 * (a3 >> 1);
      unint64_t v40 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_CE7580(a1, v39, v40, a4);
        uint64_t v41 = v37 + 232 * v38;
        sub_CE7580(v7 + 232 * (a3 >> 1), (uint64_t)a2, a3 - (a3 >> 1), v41);
        unint64_t v42 = v37 + 232 * a3;
        uint64_t v43 = v41;
        while (v43 != v42)
        {
          if (*(double *)(v43 + 216) >= *(double *)(v37 + 216))
          {
            long long v44 = *(_OWORD *)v37;
            long long v45 = *(_OWORD *)(v37 + 32);
            *(_OWORD *)(v7 + 16) = *(_OWORD *)(v37 + 16);
            *(_OWORD *)(v7 + 32) = v45;
            *(_OWORD *)uint64_t v7 = v44;
            long long v46 = *(_OWORD *)(v37 + 48);
            long long v47 = *(_OWORD *)(v37 + 64);
            long long v48 = *(_OWORD *)(v37 + 96);
            *(_OWORD *)(v7 + 80) = *(_OWORD *)(v37 + 80);
            *(_OWORD *)(v7 + 96) = v48;
            *(_OWORD *)(v7 + 48) = v46;
            *(_OWORD *)(v7 + 64) = v47;
            long long v49 = *(_OWORD *)(v37 + 112);
            long long v50 = *(_OWORD *)(v37 + 128);
            long long v51 = *(_OWORD *)(v37 + 160);
            *(_OWORD *)(v7 + 144) = *(_OWORD *)(v37 + 144);
            *(_OWORD *)(v7 + 160) = v51;
            *(_OWORD *)(v7 + 112) = v49;
            *(_OWORD *)(v7 + 128) = v50;
            double result = *(__n128 *)(v37 + 176);
            long long v52 = *(_OWORD *)(v37 + 192);
            long long v53 = *(_OWORD *)(v37 + 208);
            *(void *)(v7 + 224) = *(void *)(v37 + 224);
            *(_OWORD *)(v7 + 192) = v52;
            *(_OWORD *)(v7 + 208) = v53;
            *(__n128 *)(v7 + 176) = result;
            v37 += 232;
            v7 += 232;
            if (v37 == v41) {
              goto LABEL_26;
            }
          }
          else
          {
            long long v54 = *(_OWORD *)v43;
            long long v55 = *(_OWORD *)(v43 + 32);
            *(_OWORD *)(v7 + 16) = *(_OWORD *)(v43 + 16);
            *(_OWORD *)(v7 + 32) = v55;
            *(_OWORD *)uint64_t v7 = v54;
            long long v56 = *(_OWORD *)(v43 + 48);
            long long v57 = *(_OWORD *)(v43 + 64);
            long long v58 = *(_OWORD *)(v43 + 96);
            *(_OWORD *)(v7 + 80) = *(_OWORD *)(v43 + 80);
            *(_OWORD *)(v7 + 96) = v58;
            *(_OWORD *)(v7 + 48) = v56;
            *(_OWORD *)(v7 + 64) = v57;
            long long v59 = *(_OWORD *)(v43 + 112);
            long long v60 = *(_OWORD *)(v43 + 128);
            long long v61 = *(_OWORD *)(v43 + 160);
            *(_OWORD *)(v7 + 144) = *(_OWORD *)(v43 + 144);
            *(_OWORD *)(v7 + 160) = v61;
            *(_OWORD *)(v7 + 112) = v59;
            *(_OWORD *)(v7 + 128) = v60;
            double result = *(__n128 *)(v43 + 176);
            long long v62 = *(_OWORD *)(v43 + 192);
            long long v63 = *(_OWORD *)(v43 + 208);
            *(void *)(v7 + 224) = *(void *)(v43 + 224);
            *(_OWORD *)(v7 + 192) = v62;
            *(_OWORD *)(v7 + 208) = v63;
            *(__n128 *)(v7 + 176) = result;
            v43 += 232;
            v7 += 232;
            if (v37 == v41)
            {
LABEL_26:
              if (v43 != v42)
              {
                uint64_t v64 = 0;
                do
                {
                  uint64_t v65 = v7 + v64;
                  long long v66 = *(_OWORD *)(v43 + v64);
                  long long v67 = *(_OWORD *)(v43 + v64 + 32);
                  *(_OWORD *)(v65 + 16) = *(_OWORD *)(v43 + v64 + 16);
                  *(_OWORD *)(v65 + 32) = v67;
                  *(_OWORD *)uint64_t v65 = v66;
                  long long v68 = *(_OWORD *)(v43 + v64 + 48);
                  long long v69 = *(_OWORD *)(v43 + v64 + 64);
                  long long v70 = *(_OWORD *)(v43 + v64 + 96);
                  *(_OWORD *)(v65 + 80) = *(_OWORD *)(v43 + v64 + 80);
                  *(_OWORD *)(v65 + 96) = v70;
                  *(_OWORD *)(v65 + 48) = v68;
                  *(_OWORD *)(v65 + 64) = v69;
                  long long v71 = *(_OWORD *)(v43 + v64 + 112);
                  long long v72 = *(_OWORD *)(v43 + v64 + 128);
                  long long v73 = *(_OWORD *)(v43 + v64 + 160);
                  *(_OWORD *)(v65 + 144) = *(_OWORD *)(v43 + v64 + 144);
                  *(_OWORD *)(v65 + 160) = v73;
                  *(_OWORD *)(v65 + 112) = v71;
                  *(_OWORD *)(v65 + 128) = v72;
                  double result = *(__n128 *)(v43 + v64 + 176);
                  long long v74 = *(_OWORD *)(v43 + v64 + 192);
                  long long v75 = *(_OWORD *)(v43 + v64 + 208);
                  *(void *)(v65 + 224) = *(void *)(v43 + v64 + 224);
                  *(_OWORD *)(v65 + 192) = v74;
                  *(_OWORD *)(v65 + 208) = v75;
                  *(__n128 *)(v65 + 176) = result;
                  v64 += 232;
                }
                while (v43 + v64 != v42);
              }
              return result;
            }
          }
        }
        if (v37 != v41)
        {
          uint64_t v76 = 0;
          do
          {
            uint64_t v77 = v7 + v76;
            long long v78 = *(_OWORD *)(v37 + v76);
            long long v79 = *(_OWORD *)(v37 + v76 + 32);
            *(_OWORD *)(v77 + 16) = *(_OWORD *)(v37 + v76 + 16);
            *(_OWORD *)(v77 + 32) = v79;
            *(_OWORD *)uint64_t v77 = v78;
            long long v80 = *(_OWORD *)(v37 + v76 + 48);
            long long v81 = *(_OWORD *)(v37 + v76 + 64);
            long long v82 = *(_OWORD *)(v37 + v76 + 96);
            *(_OWORD *)(v77 + 80) = *(_OWORD *)(v37 + v76 + 80);
            *(_OWORD *)(v77 + 96) = v82;
            *(_OWORD *)(v77 + 48) = v80;
            *(_OWORD *)(v77 + 64) = v81;
            long long v83 = *(_OWORD *)(v37 + v76 + 112);
            long long v84 = *(_OWORD *)(v37 + v76 + 128);
            long long v85 = *(_OWORD *)(v37 + v76 + 160);
            *(_OWORD *)(v77 + 144) = *(_OWORD *)(v37 + v76 + 144);
            *(_OWORD *)(v77 + 160) = v85;
            *(_OWORD *)(v77 + 112) = v83;
            *(_OWORD *)(v77 + 128) = v84;
            double result = *(__n128 *)(v37 + v76 + 176);
            long long v86 = *(_OWORD *)(v37 + v76 + 192);
            long long v87 = *(_OWORD *)(v37 + v76 + 208);
            *(void *)(v77 + 224) = *(void *)(v37 + v76 + 224);
            *(_OWORD *)(v77 + 192) = v86;
            *(_OWORD *)(v77 + 208) = v87;
            *(__n128 *)(v77 + 176) = result;
            v76 += 232;
          }
          while (v37 + v76 != v41);
        }
      }
      else
      {
        sub_CE7060(a1, v39, v40, a4, a5);
        sub_CE7060(v7 + 232 * (a3 >> 1), a2, a3 - (a3 >> 1), v37, a5);
        sub_CE7B14((double *)v7, (double *)(v7 + 232 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (char *)v37, a5);
      }
    }
    else if ((char *)a1 != a2)
    {
      uint64_t v20 = a1 + 232;
      if ((char *)(a1 + 232) != a2)
      {
        uint64_t v21 = 0;
        uint64_t v22 = a1;
        do
        {
          uint64_t v24 = v20;
          result.n128_u64[0] = *(void *)(v22 + 448);
          if (result.n128_f64[0] < *(double *)(v22 + 216))
          {
            long long v109 = *(_OWORD *)(v20 + 160);
            long long v111 = *(_OWORD *)(v20 + 176);
            long long v113 = *(_OWORD *)(v20 + 192);
            uint64_t v115 = *(void *)(v20 + 208);
            long long v101 = *(_OWORD *)(v20 + 96);
            long long v103 = *(_OWORD *)(v20 + 112);
            long long v105 = *(_OWORD *)(v20 + 128);
            long long v107 = *(_OWORD *)(v20 + 144);
            long long v93 = *(_OWORD *)(v20 + 32);
            long long v95 = *(_OWORD *)(v20 + 48);
            long long v97 = *(_OWORD *)(v20 + 64);
            long long v99 = *(_OWORD *)(v20 + 80);
            long long v89 = *(_OWORD *)v20;
            long long v91 = *(_OWORD *)(v20 + 16);
            uint64_t v25 = v21;
            uint64_t v26 = *(void *)(v22 + 456);
            do
            {
              uint64_t v27 = a1 + v25;
              unint64_t v28 = (_OWORD *)(a1 + v25 + 232);
              long long v29 = *(_OWORD *)(a1 + v25 + 208);
              v28[12] = *(_OWORD *)(a1 + v25 + 192);
              v28[13] = v29;
              *(void *)(v27 + 456) = *(void *)(a1 + v25 + 224);
              long long v30 = *(_OWORD *)(a1 + v25 + 144);
              v28[8] = *(_OWORD *)(a1 + v25 + 128);
              v28[9] = v30;
              long long v31 = *(_OWORD *)(a1 + v25 + 176);
              v28[10] = *(_OWORD *)(a1 + v25 + 160);
              v28[11] = v31;
              long long v32 = *(_OWORD *)(a1 + v25 + 80);
              v28[4] = *(_OWORD *)(a1 + v25 + 64);
              v28[5] = v32;
              long long v33 = *(_OWORD *)(a1 + v25 + 112);
              v28[6] = *(_OWORD *)(a1 + v25 + 96);
              v28[7] = v33;
              long long v34 = *(_OWORD *)(a1 + v25 + 16);
              *(_OWORD *)(v27 + 232) = *(_OWORD *)(a1 + v25);
              *(_OWORD *)(v27 + 248) = v34;
              long long v35 = *(_OWORD *)(a1 + v25 + 48);
              v28[2] = *(_OWORD *)(a1 + v25 + 32);
              v28[3] = v35;
              if (!v25)
              {
                uint64_t v23 = a1;
                goto LABEL_10;
              }
              v25 -= 232;
            }
            while (result.n128_f64[0] < *(double *)(v27 - 16));
            uint64_t v23 = a1 + v25 + 232;
LABEL_10:
            *(_OWORD *)(v23 + 160) = v109;
            *(_OWORD *)(v23 + 176) = v111;
            *(_OWORD *)(v23 + 192) = v113;
            *(void *)(v23 + 208) = v115;
            *(_OWORD *)(v23 + 96) = v101;
            *(_OWORD *)(v23 + 112) = v103;
            *(_OWORD *)(v23 + 128) = v105;
            *(_OWORD *)(v23 + 144) = v107;
            *(_OWORD *)(v23 + 32) = v93;
            *(_OWORD *)(v23 + 48) = v95;
            *(_OWORD *)(v23 + 64) = v97;
            *(_OWORD *)(v23 + 80) = v99;
            *(_OWORD *)uint64_t v23 = v89;
            *(_OWORD *)(v23 + 16) = v91;
            *(void *)(v23 + 216) = result.n128_u64[0];
            *(void *)(v23 + 224) = v26;
          }
          uint64_t v20 = v24 + 232;
          v21 += 232;
          uint64_t v22 = v24;
        }
        while ((char *)(v24 + 232) != a2);
      }
    }
  }
  return result;
}

uint64_t sub_CE7580(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v7 = result;
    if (a3 == 2)
    {
      uint64_t v19 = (long long *)(a2 - 232);
      uint64_t v20 = (_OWORD *)(a4 + 232);
      if (*(double *)(a2 - 16) >= *(double *)(result + 216))
      {
        long long v87 = *(_OWORD *)result;
        long long v88 = *(_OWORD *)(result + 32);
        *(_OWORD *)(a4 + 16) = *(_OWORD *)(result + 16);
        *(_OWORD *)(a4 + 32) = v88;
        *(_OWORD *)a4 = v87;
        long long v89 = *(_OWORD *)(result + 48);
        long long v90 = *(_OWORD *)(result + 64);
        long long v91 = *(_OWORD *)(result + 96);
        *(_OWORD *)(a4 + 80) = *(_OWORD *)(result + 80);
        *(_OWORD *)(a4 + 96) = v91;
        *(_OWORD *)(a4 + 48) = v89;
        *(_OWORD *)(a4 + 64) = v90;
        long long v92 = *(_OWORD *)(result + 112);
        long long v93 = *(_OWORD *)(result + 128);
        long long v94 = *(_OWORD *)(result + 160);
        *(_OWORD *)(a4 + 144) = *(_OWORD *)(result + 144);
        *(_OWORD *)(a4 + 160) = v94;
        *(_OWORD *)(a4 + 112) = v92;
        *(_OWORD *)(a4 + 128) = v93;
        long long v95 = *(_OWORD *)(result + 176);
        long long v96 = *(_OWORD *)(result + 192);
        long long v97 = *(_OWORD *)(result + 208);
        *(void *)(a4 + 224) = *(void *)(result + 224);
        *(_OWORD *)(a4 + 192) = v96;
        *(_OWORD *)(a4 + 208) = v97;
        *(_OWORD *)(a4 + 176) = v95;
        long long v98 = *v19;
        long long v99 = *(_OWORD *)(a2 - 200);
        *(_OWORD *)(a4 + 248) = *(_OWORD *)(a2 - 216);
        *(_OWORD *)(a4 + 264) = v99;
        *uint64_t v20 = v98;
        long long v100 = *(_OWORD *)(a2 - 184);
        long long v101 = *(_OWORD *)(a2 - 168);
        long long v102 = *(_OWORD *)(a2 - 136);
        *(_OWORD *)(a4 + 312) = *(_OWORD *)(a2 - 152);
        *(_OWORD *)(a4 + 328) = v102;
        *(_OWORD *)(a4 + 280) = v100;
        *(_OWORD *)(a4 + 296) = v101;
        long long v103 = *(_OWORD *)(a2 - 120);
        long long v104 = *(_OWORD *)(a2 - 104);
        long long v105 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a4 + 376) = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a4 + 392) = v105;
        *(_OWORD *)(a4 + 344) = v103;
        *(_OWORD *)(a4 + 360) = v104;
        long long v40 = *(_OWORD *)(a2 - 56);
        long long v41 = *(_OWORD *)(a2 - 40);
        long long v42 = *(_OWORD *)(a2 - 24);
        uint64_t v43 = *(void *)(a2 - 8);
      }
      else
      {
        long long v21 = *v19;
        long long v22 = *(_OWORD *)(a2 - 200);
        *(_OWORD *)(a4 + 16) = *(_OWORD *)(a2 - 216);
        *(_OWORD *)(a4 + 32) = v22;
        *(_OWORD *)a4 = v21;
        long long v23 = *(_OWORD *)(a2 - 184);
        long long v24 = *(_OWORD *)(a2 - 168);
        long long v25 = *(_OWORD *)(a2 - 136);
        *(_OWORD *)(a4 + 80) = *(_OWORD *)(a2 - 152);
        *(_OWORD *)(a4 + 96) = v25;
        *(_OWORD *)(a4 + 48) = v23;
        *(_OWORD *)(a4 + 64) = v24;
        long long v26 = *(_OWORD *)(a2 - 120);
        long long v27 = *(_OWORD *)(a2 - 104);
        long long v28 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a4 + 144) = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a4 + 160) = v28;
        *(_OWORD *)(a4 + 112) = v26;
        *(_OWORD *)(a4 + 128) = v27;
        long long v29 = *(_OWORD *)(a2 - 56);
        long long v30 = *(_OWORD *)(a2 - 40);
        long long v31 = *(_OWORD *)(a2 - 24);
        *(void *)(a4 + 224) = *(void *)(a2 - 8);
        *(_OWORD *)(a4 + 192) = v30;
        *(_OWORD *)(a4 + 208) = v31;
        *(_OWORD *)(a4 + 176) = v29;
        long long v32 = *(_OWORD *)result;
        long long v33 = *(_OWORD *)(result + 32);
        *(_OWORD *)(a4 + 248) = *(_OWORD *)(result + 16);
        *(_OWORD *)(a4 + 264) = v33;
        *uint64_t v20 = v32;
        long long v34 = *(_OWORD *)(result + 48);
        long long v35 = *(_OWORD *)(result + 64);
        long long v36 = *(_OWORD *)(result + 96);
        *(_OWORD *)(a4 + 312) = *(_OWORD *)(result + 80);
        *(_OWORD *)(a4 + 328) = v36;
        *(_OWORD *)(a4 + 280) = v34;
        *(_OWORD *)(a4 + 296) = v35;
        long long v37 = *(_OWORD *)(result + 112);
        long long v38 = *(_OWORD *)(result + 128);
        long long v39 = *(_OWORD *)(result + 160);
        *(_OWORD *)(a4 + 376) = *(_OWORD *)(result + 144);
        *(_OWORD *)(a4 + 392) = v39;
        *(_OWORD *)(a4 + 344) = v37;
        *(_OWORD *)(a4 + 360) = v38;
        long long v40 = *(_OWORD *)(result + 176);
        long long v41 = *(_OWORD *)(result + 192);
        long long v42 = *(_OWORD *)(result + 208);
        uint64_t v43 = *(void *)(result + 224);
      }
      *(void *)(a4 + 456) = v43;
      *(_OWORD *)(a4 + 424) = v41;
      *(_OWORD *)(a4 + 440) = v42;
      *(_OWORD *)(a4 + 408) = v40;
    }
    else if (a3 == 1)
    {
      long long v8 = *(_OWORD *)result;
      long long v9 = *(_OWORD *)(result + 32);
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(result + 16);
      *(_OWORD *)(a4 + 32) = v9;
      *(_OWORD *)a4 = v8;
      long long v10 = *(_OWORD *)(result + 48);
      long long v11 = *(_OWORD *)(result + 64);
      long long v12 = *(_OWORD *)(result + 96);
      *(_OWORD *)(a4 + 80) = *(_OWORD *)(result + 80);
      *(_OWORD *)(a4 + 96) = v12;
      *(_OWORD *)(a4 + 48) = v10;
      *(_OWORD *)(a4 + 64) = v11;
      long long v13 = *(_OWORD *)(result + 112);
      long long v14 = *(_OWORD *)(result + 128);
      long long v15 = *(_OWORD *)(result + 160);
      *(_OWORD *)(a4 + 144) = *(_OWORD *)(result + 144);
      *(_OWORD *)(a4 + 160) = v15;
      *(_OWORD *)(a4 + 112) = v13;
      *(_OWORD *)(a4 + 128) = v14;
      long long v16 = *(_OWORD *)(result + 176);
      long long v17 = *(_OWORD *)(result + 192);
      long long v18 = *(_OWORD *)(result + 208);
      *(void *)(a4 + 224) = *(void *)(result + 224);
      *(_OWORD *)(a4 + 192) = v17;
      *(_OWORD *)(a4 + 208) = v18;
      *(_OWORD *)(a4 + 176) = v16;
    }
    else if ((uint64_t)a3 > 8)
    {
      unint64_t v106 = a3 >> 1;
      uint64_t v107 = 232 * (a3 >> 1);
      uint64_t v108 = result + v107;
      sub_CE7060(result, result + v107, a3 >> 1, a4, a3 >> 1);
      double result = sub_CE7060(v7 + v107, a2, a3 - v106, v4 + v107, a3 - v106);
      uint64_t v109 = v7 + v107;
      while (v109 != a2)
      {
        if (*(double *)(v109 + 216) >= *(double *)(v7 + 216))
        {
          long long v110 = *(_OWORD *)v7;
          long long v111 = *(_OWORD *)(v7 + 32);
          *(_OWORD *)(v4 + 16) = *(_OWORD *)(v7 + 16);
          *(_OWORD *)(v4 + 32) = v111;
          *(_OWORD *)uint64_t v4 = v110;
          long long v112 = *(_OWORD *)(v7 + 48);
          long long v113 = *(_OWORD *)(v7 + 64);
          long long v114 = *(_OWORD *)(v7 + 96);
          *(_OWORD *)(v4 + 80) = *(_OWORD *)(v7 + 80);
          *(_OWORD *)(v4 + 96) = v114;
          *(_OWORD *)(v4 + 48) = v112;
          *(_OWORD *)(v4 + 64) = v113;
          long long v115 = *(_OWORD *)(v7 + 112);
          long long v116 = *(_OWORD *)(v7 + 128);
          long long v117 = *(_OWORD *)(v7 + 160);
          *(_OWORD *)(v4 + 144) = *(_OWORD *)(v7 + 144);
          *(_OWORD *)(v4 + 160) = v117;
          *(_OWORD *)(v4 + 112) = v115;
          *(_OWORD *)(v4 + 128) = v116;
          long long v118 = *(_OWORD *)(v7 + 176);
          long long v119 = *(_OWORD *)(v7 + 192);
          long long v120 = *(_OWORD *)(v7 + 208);
          *(void *)(v4 + 224) = *(void *)(v7 + 224);
          *(_OWORD *)(v4 + 192) = v119;
          *(_OWORD *)(v4 + 208) = v120;
          *(_OWORD *)(v4 + 176) = v118;
          v7 += 232;
          v4 += 232;
          if (v7 == v108) {
            goto LABEL_26;
          }
        }
        else
        {
          long long v121 = *(_OWORD *)v109;
          long long v122 = *(_OWORD *)(v109 + 32);
          *(_OWORD *)(v4 + 16) = *(_OWORD *)(v109 + 16);
          *(_OWORD *)(v4 + 32) = v122;
          *(_OWORD *)uint64_t v4 = v121;
          long long v123 = *(_OWORD *)(v109 + 48);
          long long v124 = *(_OWORD *)(v109 + 64);
          long long v125 = *(_OWORD *)(v109 + 96);
          *(_OWORD *)(v4 + 80) = *(_OWORD *)(v109 + 80);
          *(_OWORD *)(v4 + 96) = v125;
          *(_OWORD *)(v4 + 48) = v123;
          *(_OWORD *)(v4 + 64) = v124;
          long long v126 = *(_OWORD *)(v109 + 112);
          long long v127 = *(_OWORD *)(v109 + 128);
          long long v128 = *(_OWORD *)(v109 + 160);
          *(_OWORD *)(v4 + 144) = *(_OWORD *)(v109 + 144);
          *(_OWORD *)(v4 + 160) = v128;
          *(_OWORD *)(v4 + 112) = v126;
          *(_OWORD *)(v4 + 128) = v127;
          long long v129 = *(_OWORD *)(v109 + 176);
          long long v130 = *(_OWORD *)(v109 + 192);
          long long v131 = *(_OWORD *)(v109 + 208);
          *(void *)(v4 + 224) = *(void *)(v109 + 224);
          *(_OWORD *)(v4 + 192) = v130;
          *(_OWORD *)(v4 + 208) = v131;
          *(_OWORD *)(v4 + 176) = v129;
          v109 += 232;
          v4 += 232;
          if (v7 == v108)
          {
LABEL_26:
            if (v109 != a2)
            {
              uint64_t v132 = 0;
              do
              {
                uint64_t v133 = v4 + v132;
                long long v134 = *(_OWORD *)(v109 + v132);
                long long v135 = *(_OWORD *)(v109 + v132 + 32);
                *(_OWORD *)(v133 + 16) = *(_OWORD *)(v109 + v132 + 16);
                *(_OWORD *)(v133 + 32) = v135;
                *(_OWORD *)uint64_t v133 = v134;
                long long v136 = *(_OWORD *)(v109 + v132 + 48);
                long long v137 = *(_OWORD *)(v109 + v132 + 64);
                long long v138 = *(_OWORD *)(v109 + v132 + 96);
                *(_OWORD *)(v133 + 80) = *(_OWORD *)(v109 + v132 + 80);
                *(_OWORD *)(v133 + 96) = v138;
                *(_OWORD *)(v133 + 48) = v136;
                *(_OWORD *)(v133 + 64) = v137;
                long long v139 = *(_OWORD *)(v109 + v132 + 112);
                long long v140 = *(_OWORD *)(v109 + v132 + 128);
                long long v141 = *(_OWORD *)(v109 + v132 + 160);
                *(_OWORD *)(v133 + 144) = *(_OWORD *)(v109 + v132 + 144);
                *(_OWORD *)(v133 + 160) = v141;
                *(_OWORD *)(v133 + 112) = v139;
                *(_OWORD *)(v133 + 128) = v140;
                long long v142 = *(_OWORD *)(v109 + v132 + 176);
                long long v143 = *(_OWORD *)(v109 + v132 + 192);
                long long v144 = *(_OWORD *)(v109 + v132 + 208);
                *(void *)(v133 + 224) = *(void *)(v109 + v132 + 224);
                *(_OWORD *)(v133 + 192) = v143;
                *(_OWORD *)(v133 + 208) = v144;
                *(_OWORD *)(v133 + 176) = v142;
                v132 += 232;
              }
              while (v109 + v132 != a2);
            }
            return result;
          }
        }
      }
      if (v7 != v108)
      {
        uint64_t v145 = 0;
        do
        {
          uint64_t v146 = v4 + v145;
          long long v147 = *(_OWORD *)(v7 + v145);
          long long v148 = *(_OWORD *)(v7 + v145 + 32);
          *(_OWORD *)(v146 + 16) = *(_OWORD *)(v7 + v145 + 16);
          *(_OWORD *)(v146 + 32) = v148;
          *(_OWORD *)uint64_t v146 = v147;
          long long v149 = *(_OWORD *)(v7 + v145 + 48);
          long long v150 = *(_OWORD *)(v7 + v145 + 64);
          long long v151 = *(_OWORD *)(v7 + v145 + 96);
          *(_OWORD *)(v146 + 80) = *(_OWORD *)(v7 + v145 + 80);
          *(_OWORD *)(v146 + 96) = v151;
          *(_OWORD *)(v146 + 48) = v149;
          *(_OWORD *)(v146 + 64) = v150;
          long long v152 = *(_OWORD *)(v7 + v145 + 112);
          long long v153 = *(_OWORD *)(v7 + v145 + 128);
          long long v154 = *(_OWORD *)(v7 + v145 + 160);
          *(_OWORD *)(v146 + 144) = *(_OWORD *)(v7 + v145 + 144);
          *(_OWORD *)(v146 + 160) = v154;
          *(_OWORD *)(v146 + 112) = v152;
          *(_OWORD *)(v146 + 128) = v153;
          long long v155 = *(_OWORD *)(v7 + v145 + 176);
          long long v156 = *(_OWORD *)(v7 + v145 + 192);
          long long v157 = *(_OWORD *)(v7 + v145 + 208);
          *(void *)(v146 + 224) = *(void *)(v7 + v145 + 224);
          *(_OWORD *)(v146 + 192) = v156;
          *(_OWORD *)(v146 + 208) = v157;
          *(_OWORD *)(v146 + 176) = v155;
          v145 += 232;
        }
        while (v7 + v145 != v108);
      }
    }
    else if (result != a2)
    {
      long long v44 = *(_OWORD *)result;
      long long v45 = *(_OWORD *)(result + 32);
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(result + 16);
      *(_OWORD *)(a4 + 32) = v45;
      *(_OWORD *)a4 = v44;
      long long v46 = *(_OWORD *)(result + 48);
      long long v47 = *(_OWORD *)(result + 64);
      long long v48 = *(_OWORD *)(result + 96);
      *(_OWORD *)(a4 + 80) = *(_OWORD *)(result + 80);
      *(_OWORD *)(a4 + 96) = v48;
      *(_OWORD *)(a4 + 48) = v46;
      *(_OWORD *)(a4 + 64) = v47;
      long long v49 = *(_OWORD *)(result + 112);
      long long v50 = *(_OWORD *)(result + 128);
      long long v51 = *(_OWORD *)(result + 160);
      *(_OWORD *)(a4 + 144) = *(_OWORD *)(result + 144);
      *(_OWORD *)(a4 + 160) = v51;
      *(_OWORD *)(a4 + 112) = v49;
      *(_OWORD *)(a4 + 128) = v50;
      long long v52 = *(_OWORD *)(result + 176);
      long long v53 = *(_OWORD *)(result + 192);
      long long v54 = *(_OWORD *)(result + 208);
      *(void *)(a4 + 224) = *(void *)(result + 224);
      *(_OWORD *)(a4 + 192) = v53;
      *(_OWORD *)(a4 + 208) = v54;
      *(_OWORD *)(a4 + 176) = v52;
      uint64_t v55 = result + 232;
      if (result + 232 != a2)
      {
        uint64_t v56 = 0;
        uint64_t v57 = a4;
        do
        {
          uint64_t v69 = v7;
          uint64_t v70 = v57;
          uint64_t v7 = v55;
          v57 += 232;
          uint64_t v71 = v57;
          if (*(double *)(v69 + 448) < *(double *)(v70 + 216))
          {
            long long v72 = *(_OWORD *)(v70 + 208);
            *(_OWORD *)(v57 + 192) = *(_OWORD *)(v70 + 192);
            *(_OWORD *)(v57 + 208) = v72;
            *(void *)(v57 + 224) = *(void *)(v70 + 224);
            long long v73 = *(_OWORD *)(v70 + 144);
            *(_OWORD *)(v57 + 128) = *(_OWORD *)(v70 + 128);
            *(_OWORD *)(v57 + 144) = v73;
            long long v74 = *(_OWORD *)(v70 + 176);
            *(_OWORD *)(v57 + 160) = *(_OWORD *)(v70 + 160);
            *(_OWORD *)(v57 + 176) = v74;
            long long v75 = *(_OWORD *)(v70 + 80);
            *(_OWORD *)(v57 + 64) = *(_OWORD *)(v70 + 64);
            *(_OWORD *)(v57 + 80) = v75;
            long long v76 = *(_OWORD *)(v70 + 112);
            *(_OWORD *)(v57 + 96) = *(_OWORD *)(v70 + 96);
            *(_OWORD *)(v57 + 112) = v76;
            long long v77 = *(_OWORD *)(v70 + 16);
            *(_OWORD *)uint64_t v57 = *(_OWORD *)v70;
            *(_OWORD *)(v57 + 16) = v77;
            long long v78 = *(_OWORD *)(v70 + 48);
            uint64_t v71 = a4;
            *(_OWORD *)(v57 + 32) = *(_OWORD *)(v70 + 32);
            *(_OWORD *)(v57 + 48) = v78;
            if (v70 != a4)
            {
              uint64_t v79 = v56;
              while (1)
              {
                uint64_t v71 = a4 + v79;
                if (*(double *)(v69 + 448) >= *(double *)(a4 + v79 - 16)) {
                  break;
                }
                long long v80 = *(_OWORD *)(v71 - 56);
                long long v81 = *(_OWORD *)(v71 - 24);
                *(_OWORD *)(v71 + 192) = *(_OWORD *)(v71 - 40);
                *(_OWORD *)(v71 + 208) = v81;
                *(void *)(v71 + 224) = *(void *)(v71 - 8);
                long long v82 = *(_OWORD *)(v71 - 120);
                long long v83 = *(_OWORD *)(v71 - 88);
                *(_OWORD *)(v71 + 128) = *(_OWORD *)(v71 - 104);
                *(_OWORD *)(v71 + 144) = v83;
                *(_OWORD *)(v71 + 160) = *(_OWORD *)(v71 - 72);
                *(_OWORD *)(v71 + 176) = v80;
                long long v84 = *(_OWORD *)(v71 - 184);
                long long v85 = *(_OWORD *)(v71 - 152);
                *(_OWORD *)(v71 + 64) = *(_OWORD *)(v71 - 168);
                *(_OWORD *)(v71 + 80) = v85;
                *(_OWORD *)(v71 + 96) = *(_OWORD *)(v71 - 136);
                *(_OWORD *)(v71 + 112) = v82;
                long long v86 = *(_OWORD *)(v71 - 216);
                *(_OWORD *)uint64_t v71 = *(_OWORD *)(v71 - 232);
                *(_OWORD *)(v71 + 16) = v86;
                *(_OWORD *)(v71 + 32) = *(_OWORD *)(v71 - 200);
                *(_OWORD *)(v71 + 48) = v84;
                v79 -= 232;
                if (!v79)
                {
                  uint64_t v71 = a4;
                  break;
                }
              }
            }
          }
          long long v58 = *(_OWORD *)v7;
          long long v59 = *(_OWORD *)(v7 + 32);
          *(_OWORD *)(v71 + 16) = *(_OWORD *)(v7 + 16);
          *(_OWORD *)(v71 + 32) = v59;
          *(_OWORD *)uint64_t v71 = v58;
          long long v60 = *(_OWORD *)(v7 + 48);
          long long v61 = *(_OWORD *)(v7 + 64);
          long long v62 = *(_OWORD *)(v7 + 96);
          *(_OWORD *)(v71 + 80) = *(_OWORD *)(v7 + 80);
          *(_OWORD *)(v71 + 96) = v62;
          *(_OWORD *)(v71 + 48) = v60;
          *(_OWORD *)(v71 + 64) = v61;
          long long v63 = *(_OWORD *)(v7 + 112);
          long long v64 = *(_OWORD *)(v7 + 128);
          long long v65 = *(_OWORD *)(v7 + 160);
          *(_OWORD *)(v71 + 144) = *(_OWORD *)(v7 + 144);
          *(_OWORD *)(v71 + 160) = v65;
          *(_OWORD *)(v71 + 112) = v63;
          *(_OWORD *)(v71 + 128) = v64;
          long long v66 = *(_OWORD *)(v7 + 176);
          long long v67 = *(_OWORD *)(v7 + 192);
          long long v68 = *(_OWORD *)(v7 + 208);
          *(void *)(v71 + 224) = *(void *)(v7 + 224);
          *(_OWORD *)(v71 + 192) = v67;
          *(_OWORD *)(v71 + 208) = v68;
          *(_OWORD *)(v71 + 176) = v66;
          uint64_t v55 = v7 + 232;
          v56 += 232;
        }
        while (v7 + 232 != a2);
      }
    }
  }
  return result;
}

double *sub_CE7B14(double *result, double *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v9 = a5;
    long long v11 = result;
    while (v9 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      unint64_t v12 = 0;
      uint64_t v13 = -a4;
      while (1)
      {
        long long v14 = (char *)&v11[v12 / 8];
        if (a2[27] < v11[v12 / 8 + 27]) {
          break;
        }
        v12 += 232;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v16 = -v13;
      long long v131 = a3;
      __src = a6;
      uint64_t v130 = a7;
      if (-v13 >= v9)
      {
        if (v13 == -1)
        {
          long long v105 = &v11[v12 / 8];
          long long v134 = *(_OWORD *)&v11[v12 / 8 + 2];
          long long v135 = *(_OWORD *)&v11[v12 / 8 + 4];
          long long v133 = *(_OWORD *)&v11[v12 / 8];
          long long v138 = *(_OWORD *)&v11[v12 / 8 + 10];
          long long v139 = *(_OWORD *)&v11[v12 / 8 + 12];
          long long v136 = *(_OWORD *)&v11[v12 / 8 + 6];
          long long v137 = *(_OWORD *)&v11[v12 / 8 + 8];
          long long v142 = *(_OWORD *)&v11[v12 / 8 + 18];
          long long v143 = *(_OWORD *)&v11[v12 / 8 + 20];
          long long v140 = *(_OWORD *)&v11[v12 / 8 + 14];
          long long v141 = *(_OWORD *)&v11[v12 / 8 + 16];
          double v147 = v11[v12 / 8 + 28];
          long long v145 = *(_OWORD *)&v11[v12 / 8 + 24];
          long long v146 = *(_OWORD *)&v11[v12 / 8 + 26];
          long long v144 = *(_OWORD *)&v11[v12 / 8 + 22];
          long long v106 = *(_OWORD *)a2;
          long long v107 = *((_OWORD *)a2 + 2);
          *((_OWORD *)v105 + 1) = *((_OWORD *)a2 + 1);
          *((_OWORD *)v105 + 2) = v107;
          *(_OWORD *)long long v105 = v106;
          long long v108 = *((_OWORD *)a2 + 3);
          long long v109 = *((_OWORD *)a2 + 4);
          long long v110 = *((_OWORD *)a2 + 6);
          *((_OWORD *)v105 + 5) = *((_OWORD *)a2 + 5);
          *((_OWORD *)v105 + 6) = v110;
          *((_OWORD *)v105 + 3) = v108;
          *((_OWORD *)v105 + 4) = v109;
          long long v111 = *((_OWORD *)a2 + 7);
          long long v112 = *((_OWORD *)a2 + 8);
          long long v113 = *((_OWORD *)a2 + 10);
          *((_OWORD *)v105 + 9) = *((_OWORD *)a2 + 9);
          *((_OWORD *)v105 + 10) = v113;
          *((_OWORD *)v105 + 7) = v111;
          *((_OWORD *)v105 + 8) = v112;
          long long v114 = *((_OWORD *)a2 + 11);
          long long v115 = *((_OWORD *)a2 + 12);
          long long v116 = *((_OWORD *)a2 + 13);
          v105[28] = a2[28];
          *((_OWORD *)v105 + 12) = v115;
          *((_OWORD *)v105 + 13) = v116;
          *((_OWORD *)v105 + 11) = v114;
          *((_OWORD *)a2 + 12) = v145;
          *((_OWORD *)a2 + 13) = v146;
          a2[28] = v147;
          *((_OWORD *)a2 + 8) = v141;
          *((_OWORD *)a2 + 9) = v142;
          *((_OWORD *)a2 + 10) = v143;
          *((_OWORD *)a2 + 11) = v144;
          *((_OWORD *)a2 + 4) = v137;
          *((_OWORD *)a2 + 5) = v138;
          *((_OWORD *)a2 + 6) = v139;
          *((_OWORD *)a2 + 7) = v140;
          *(_OWORD *)a2 = v133;
          *((_OWORD *)a2 + 1) = v134;
          *((_OWORD *)a2 + 2) = v135;
          *((_OWORD *)a2 + 3) = v136;
          return result;
        }
        if (v13 > 0) {
          uint64_t v16 = 1 - v13;
        }
        uint64_t v26 = v16 >> 1;
        uint64_t v20 = &v11[29 * (v16 >> 1) + v12 / 8];
        uint64_t v19 = (char *)a2;
        if (a2 != (double *)a3)
        {
          unint64_t v27 = 0x34F72C234F72C235 * ((a3 - (char *)a2) >> 3);
          uint64_t v19 = (char *)a2;
          do
          {
            unint64_t v28 = v27 >> 1;
            long long v29 = &v19[232 * (v27 >> 1)];
            double v30 = *((double *)v29 + 27);
            long long v31 = v29 + 232;
            v27 += ~(v27 >> 1);
            if (v30 < v20[27]) {
              uint64_t v19 = v31;
            }
            else {
              unint64_t v27 = v28;
            }
          }
          while (v27);
        }
        uint64_t v18 = 0x34F72C234F72C235 * ((v19 - (char *)a2) >> 3);
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v17 = v9;
        }
        else {
          uint64_t v17 = v9 + 1;
        }
        uint64_t v18 = v17 >> 1;
        uint64_t v19 = (char *)&a2[29 * (v17 >> 1)];
        uint64_t v20 = a2;
        if ((char *)a2 - (char *)v11 != v12)
        {
          unint64_t v21 = 0x34F72C234F72C235 * ((uint64_t)((char *)a2 - (char *)v11 - v12) >> 3);
          uint64_t v20 = &v11[v12 / 8];
          do
          {
            unint64_t v22 = v21 >> 1;
            long long v23 = (char *)&v20[29 * (v21 >> 1)];
            double v24 = *((double *)v23 + 27);
            long long v25 = (double *)(v23 + 232);
            v21 += ~(v21 >> 1);
            if (v24 > *((double *)v19 + 27)) {
              unint64_t v21 = v22;
            }
            else {
              uint64_t v20 = v25;
            }
          }
          while (v21);
        }
        uint64_t v26 = 0x34F72C234F72C235 * ((uint64_t)((char *)v20 - (char *)v11 - v12) >> 3);
      }
      a4 = -v26 - v13;
      uint64_t v32 = v26;
      long long v33 = sub_CE815C((char *)v20, (char *)a2, v19);
      uint64_t v34 = v32;
      long long v35 = v33;
      if (v34 + v18 >= v9 - (v34 + v18) - v13)
      {
        long long v37 = v19;
        uint64_t v38 = v34;
        a7 = v130;
        double result = (double *)sub_CE7B14(v33, v37, v131, a4, v9 - v18, __src, v130);
        a2 = v20;
        a6 = __src;
        a4 = v38;
        a3 = v35;
      }
      else
      {
        long long v36 = v20;
        a6 = __src;
        double result = (double *)sub_CE7B14(&v11[v12 / 8], v36, v33, v34, v18, __src, v130);
        long long v14 = v35;
        a2 = (double *)v19;
        a7 = v130;
        a3 = v131;
        uint64_t v18 = v9 - v18;
      }
      uint64_t v9 = v18;
      long long v11 = (double *)v14;
      if (!v18) {
        return result;
      }
    }
    if (a4 <= v9)
    {
      if (v11 != a2)
      {
        uint64_t v68 = 0;
        do
        {
          uint64_t v69 = &a6[v68 * 8];
          long long v70 = *(_OWORD *)&v11[v68];
          long long v71 = *(_OWORD *)&v11[v68 + 4];
          *((_OWORD *)v69 + 1) = *(_OWORD *)&v11[v68 + 2];
          *((_OWORD *)v69 + 2) = v71;
          *(_OWORD *)uint64_t v69 = v70;
          long long v72 = *(_OWORD *)&v11[v68 + 6];
          long long v73 = *(_OWORD *)&v11[v68 + 8];
          long long v74 = *(_OWORD *)&v11[v68 + 12];
          *((_OWORD *)v69 + 5) = *(_OWORD *)&v11[v68 + 10];
          *((_OWORD *)v69 + 6) = v74;
          *((_OWORD *)v69 + 3) = v72;
          *((_OWORD *)v69 + 4) = v73;
          long long v75 = *(_OWORD *)&v11[v68 + 14];
          long long v76 = *(_OWORD *)&v11[v68 + 16];
          long long v77 = *(_OWORD *)&v11[v68 + 20];
          *((_OWORD *)v69 + 9) = *(_OWORD *)&v11[v68 + 18];
          *((_OWORD *)v69 + 10) = v77;
          *((_OWORD *)v69 + 7) = v75;
          *((_OWORD *)v69 + 8) = v76;
          long long v78 = *(_OWORD *)&v11[v68 + 22];
          long long v79 = *(_OWORD *)&v11[v68 + 24];
          long long v80 = *(_OWORD *)&v11[v68 + 26];
          *((double *)v69 + 28) = v11[v68 + 28];
          *((_OWORD *)v69 + 12) = v79;
          *((_OWORD *)v69 + 13) = v80;
          *((_OWORD *)v69 + 11) = v78;
          v68 += 29;
        }
        while (&v11[v68] != a2);
        if (v68 * 8)
        {
          long long v81 = &a6[v68 * 8];
          long long v82 = a6;
          while (a2 != (double *)a3)
          {
            if (a2[27] >= *((double *)v82 + 27))
            {
              long long v83 = *(_OWORD *)v82;
              long long v84 = *((_OWORD *)v82 + 2);
              *((_OWORD *)v11 + 1) = *((_OWORD *)v82 + 1);
              *((_OWORD *)v11 + 2) = v84;
              *(_OWORD *)long long v11 = v83;
              long long v85 = *((_OWORD *)v82 + 3);
              long long v86 = *((_OWORD *)v82 + 4);
              long long v87 = *((_OWORD *)v82 + 6);
              *((_OWORD *)v11 + 5) = *((_OWORD *)v82 + 5);
              *((_OWORD *)v11 + 6) = v87;
              *((_OWORD *)v11 + 3) = v85;
              *((_OWORD *)v11 + 4) = v86;
              long long v88 = *((_OWORD *)v82 + 7);
              long long v89 = *((_OWORD *)v82 + 8);
              long long v90 = *((_OWORD *)v82 + 10);
              *((_OWORD *)v11 + 9) = *((_OWORD *)v82 + 9);
              *((_OWORD *)v11 + 10) = v90;
              *((_OWORD *)v11 + 7) = v88;
              *((_OWORD *)v11 + 8) = v89;
              long long v91 = *((_OWORD *)v82 + 11);
              long long v92 = *((_OWORD *)v82 + 12);
              long long v93 = *((_OWORD *)v82 + 13);
              v11[28] = *((double *)v82 + 28);
              *((_OWORD *)v11 + 12) = v92;
              *((_OWORD *)v11 + 13) = v93;
              *((_OWORD *)v11 + 11) = v91;
              v82 += 232;
              v11 += 29;
              if (v81 == v82) {
                return result;
              }
            }
            else
            {
              long long v94 = *(_OWORD *)a2;
              long long v95 = *((_OWORD *)a2 + 2);
              *((_OWORD *)v11 + 1) = *((_OWORD *)a2 + 1);
              *((_OWORD *)v11 + 2) = v95;
              *(_OWORD *)long long v11 = v94;
              long long v96 = *((_OWORD *)a2 + 3);
              long long v97 = *((_OWORD *)a2 + 4);
              long long v98 = *((_OWORD *)a2 + 6);
              *((_OWORD *)v11 + 5) = *((_OWORD *)a2 + 5);
              *((_OWORD *)v11 + 6) = v98;
              *((_OWORD *)v11 + 3) = v96;
              *((_OWORD *)v11 + 4) = v97;
              long long v99 = *((_OWORD *)a2 + 7);
              long long v100 = *((_OWORD *)a2 + 8);
              long long v101 = *((_OWORD *)a2 + 10);
              *((_OWORD *)v11 + 9) = *((_OWORD *)a2 + 9);
              *((_OWORD *)v11 + 10) = v101;
              *((_OWORD *)v11 + 7) = v99;
              *((_OWORD *)v11 + 8) = v100;
              long long v102 = *((_OWORD *)a2 + 11);
              long long v103 = *((_OWORD *)a2 + 12);
              long long v104 = *((_OWORD *)a2 + 13);
              v11[28] = a2[28];
              *((_OWORD *)v11 + 12) = v103;
              *((_OWORD *)v11 + 13) = v104;
              *((_OWORD *)v11 + 11) = v102;
              a2 += 29;
              v11 += 29;
              if (v81 == v82) {
                return result;
              }
            }
          }
          return (double *)memmove(v11, v82, a6 - v82 + v68 * 8);
        }
      }
    }
    else if (a3 != (char *)a2)
    {
      uint64_t v39 = 0;
      do
      {
        long long v40 = &a6[v39 * 8];
        long long v41 = *(_OWORD *)&a2[v39];
        long long v42 = *(_OWORD *)&a2[v39 + 4];
        *((_OWORD *)v40 + 1) = *(_OWORD *)&a2[v39 + 2];
        *((_OWORD *)v40 + 2) = v42;
        *(_OWORD *)long long v40 = v41;
        long long v43 = *(_OWORD *)&a2[v39 + 6];
        long long v44 = *(_OWORD *)&a2[v39 + 8];
        long long v45 = *(_OWORD *)&a2[v39 + 12];
        *((_OWORD *)v40 + 5) = *(_OWORD *)&a2[v39 + 10];
        *((_OWORD *)v40 + 6) = v45;
        *((_OWORD *)v40 + 3) = v43;
        *((_OWORD *)v40 + 4) = v44;
        long long v46 = *(_OWORD *)&a2[v39 + 14];
        long long v47 = *(_OWORD *)&a2[v39 + 16];
        long long v48 = *(_OWORD *)&a2[v39 + 20];
        *((_OWORD *)v40 + 9) = *(_OWORD *)&a2[v39 + 18];
        *((_OWORD *)v40 + 10) = v48;
        *((_OWORD *)v40 + 7) = v46;
        *((_OWORD *)v40 + 8) = v47;
        long long v49 = *(_OWORD *)&a2[v39 + 22];
        long long v50 = *(_OWORD *)&a2[v39 + 24];
        long long v51 = *(_OWORD *)&a2[v39 + 26];
        *((double *)v40 + 28) = a2[v39 + 28];
        *((_OWORD *)v40 + 12) = v50;
        *((_OWORD *)v40 + 13) = v51;
        *((_OWORD *)v40 + 11) = v49;
        v39 += 29;
      }
      while (&a2[v39] != (double *)a3);
      if (v39 * 8)
      {
        long long v52 = (double *)&a6[v39 * 8];
        long long v53 = a3 - 232;
        while (a2 != v11)
        {
          double v54 = *(a2 - 2);
          double v55 = *(v52 - 2);
          if (v55 >= v54) {
            uint64_t v56 = (char *)(v52 - 29);
          }
          else {
            uint64_t v56 = (char *)(a2 - 29);
          }
          if (v55 >= v54) {
            v52 -= 29;
          }
          else {
            a2 -= 29;
          }
          long long v57 = *((_OWORD *)v56 + 6);
          long long v59 = *((_OWORD *)v56 + 3);
          long long v58 = *((_OWORD *)v56 + 4);
          *((_OWORD *)v53 + 5) = *((_OWORD *)v56 + 5);
          *((_OWORD *)v53 + 6) = v57;
          *((_OWORD *)v53 + 3) = v59;
          *((_OWORD *)v53 + 4) = v58;
          long long v60 = *((_OWORD *)v56 + 10);
          long long v62 = *((_OWORD *)v56 + 7);
          long long v61 = *((_OWORD *)v56 + 8);
          *((_OWORD *)v53 + 9) = *((_OWORD *)v56 + 9);
          *((_OWORD *)v53 + 10) = v60;
          *((_OWORD *)v53 + 7) = v62;
          *((_OWORD *)v53 + 8) = v61;
          long long v64 = *((_OWORD *)v56 + 12);
          long long v63 = *((_OWORD *)v56 + 13);
          long long v65 = *((_OWORD *)v56 + 11);
          *((void *)v53 + 28) = *((void *)v56 + 28);
          *((_OWORD *)v53 + 12) = v64;
          *((_OWORD *)v53 + 13) = v63;
          *((_OWORD *)v53 + 11) = v65;
          long long v66 = *(_OWORD *)v56;
          long long v67 = *((_OWORD *)v56 + 2);
          *((_OWORD *)v53 + 1) = *((_OWORD *)v56 + 1);
          *((_OWORD *)v53 + 2) = v67;
          *(_OWORD *)long long v53 = v66;
          v53 -= 232;
          if (v52 == (double *)a6) {
            return result;
          }
        }
        uint64_t v117 = 0;
        do
        {
          long long v118 = &v53[v117 * 8];
          long long v119 = *(_OWORD *)&v52[v117 - 29];
          long long v120 = *(_OWORD *)&v52[v117 - 25];
          *((_OWORD *)v118 + 1) = *(_OWORD *)&v52[v117 - 27];
          *((_OWORD *)v118 + 2) = v120;
          *(_OWORD *)long long v118 = v119;
          long long v121 = *(_OWORD *)&v52[v117 - 23];
          long long v122 = *(_OWORD *)&v52[v117 - 21];
          long long v123 = *(_OWORD *)&v52[v117 - 17];
          *((_OWORD *)v118 + 5) = *(_OWORD *)&v52[v117 - 19];
          *((_OWORD *)v118 + 6) = v123;
          *((_OWORD *)v118 + 3) = v121;
          *((_OWORD *)v118 + 4) = v122;
          long long v124 = *(_OWORD *)&v52[v117 - 15];
          long long v125 = *(_OWORD *)&v52[v117 - 13];
          long long v126 = *(_OWORD *)&v52[v117 - 9];
          *((_OWORD *)v118 + 9) = *(_OWORD *)&v52[v117 - 11];
          *((_OWORD *)v118 + 10) = v126;
          *((_OWORD *)v118 + 7) = v124;
          *((_OWORD *)v118 + 8) = v125;
          long long v127 = *(_OWORD *)&v52[v117 - 7];
          long long v128 = *(_OWORD *)&v52[v117 - 5];
          long long v129 = *(_OWORD *)&v52[v117 - 3];
          *((double *)v118 + 28) = v52[v117 - 1];
          *((_OWORD *)v118 + 12) = v128;
          *((_OWORD *)v118 + 13) = v129;
          *((_OWORD *)v118 + 11) = v127;
          v117 -= 29;
        }
        while (&v52[v117] != (double *)a6);
      }
    }
  }
  return result;
}

char *sub_CE815C(char *__src, char *a2, char *a3)
{
  uint64_t v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 232 == a2)
    {
      long long v99 = *((_OWORD *)__src + 12);
      long long v103 = *((_OWORD *)__src + 13);
      uint64_t v107 = *((void *)__src + 28);
      long long v83 = *((_OWORD *)__src + 8);
      long long v87 = *((_OWORD *)__src + 9);
      long long v91 = *((_OWORD *)__src + 10);
      long long v95 = *((_OWORD *)__src + 11);
      long long v67 = *((_OWORD *)__src + 4);
      long long v71 = *((_OWORD *)__src + 5);
      long long v75 = *((_OWORD *)__src + 6);
      long long v79 = *((_OWORD *)__src + 7);
      long long v51 = *(_OWORD *)__src;
      long long v55 = *((_OWORD *)__src + 1);
      int64_t v21 = a3 - a2;
      long long v59 = *((_OWORD *)__src + 2);
      long long v63 = *((_OWORD *)__src + 3);
      memmove(__src, a2, a3 - a2);
      uint64_t v4 = &__src[v21];
      *((_OWORD *)v4 + 12) = v99;
      *((_OWORD *)v4 + 13) = v103;
      *((void *)v4 + 28) = v107;
      *((_OWORD *)v4 + 8) = v83;
      *((_OWORD *)v4 + 9) = v87;
      *((_OWORD *)v4 + 10) = v91;
      *((_OWORD *)v4 + 11) = v95;
      *((_OWORD *)v4 + 4) = v67;
      *((_OWORD *)v4 + 5) = v71;
      *((_OWORD *)v4 + 6) = v75;
      *((_OWORD *)v4 + 7) = v79;
      *(_OWORD *)uint64_t v4 = v51;
      *((_OWORD *)v4 + 1) = v55;
      *((_OWORD *)v4 + 2) = v59;
      *((_OWORD *)v4 + 3) = v63;
    }
    else if (a2 + 232 == a3)
    {
      uint64_t v4 = __src + 232;
      long long v100 = *(_OWORD *)(a3 - 40);
      long long v104 = *(_OWORD *)(a3 - 24);
      uint64_t v108 = *((void *)a3 - 1);
      long long v84 = *(_OWORD *)(a3 - 104);
      long long v88 = *(_OWORD *)(a3 - 88);
      long long v92 = *(_OWORD *)(a3 - 72);
      long long v96 = *(_OWORD *)(a3 - 56);
      long long v68 = *(_OWORD *)(a3 - 168);
      long long v72 = *(_OWORD *)(a3 - 152);
      long long v76 = *(_OWORD *)(a3 - 136);
      long long v80 = *(_OWORD *)(a3 - 120);
      long long v52 = *(_OWORD *)(a3 - 232);
      long long v56 = *(_OWORD *)(a3 - 216);
      long long v60 = *(_OWORD *)(a3 - 200);
      long long v64 = *(_OWORD *)(a3 - 184);
      size_t v22 = a3 - 232 - __src;
      if (a3 - 232 != __src) {
        memmove(__src + 232, __src, v22);
      }
      *((_OWORD *)__src + 12) = v100;
      *((_OWORD *)__src + 13) = v104;
      *((void *)__src + 28) = v108;
      *((_OWORD *)__src + 8) = v84;
      *((_OWORD *)__src + 9) = v88;
      *((_OWORD *)__src + 10) = v92;
      *((_OWORD *)__src + 11) = v96;
      *((_OWORD *)__src + 4) = v68;
      *((_OWORD *)__src + 5) = v72;
      *((_OWORD *)__src + 6) = v76;
      *((_OWORD *)__src + 7) = v80;
      *(_OWORD *)__src = v52;
      *((_OWORD *)__src + 1) = v56;
      *((_OWORD *)__src + 2) = v60;
      *((_OWORD *)__src + 3) = v64;
    }
    else
    {
      uint64_t v6 = 0x34F72C234F72C235 * ((a2 - __src) >> 3);
      if (v6 == 0x34F72C234F72C235 * ((a3 - a2) >> 3))
      {
        uint64_t v7 = __src + 232;
        long long v8 = a2 + 232;
        do
        {
          long long v98 = *(_OWORD *)(v7 - 40);
          long long v102 = *(_OWORD *)(v7 - 24);
          uint64_t v106 = *((void *)v7 - 1);
          long long v82 = *(_OWORD *)(v7 - 104);
          long long v86 = *(_OWORD *)(v7 - 88);
          long long v90 = *(_OWORD *)(v7 - 72);
          long long v94 = *(_OWORD *)(v7 - 56);
          long long v66 = *(_OWORD *)(v7 - 168);
          long long v70 = *(_OWORD *)(v7 - 152);
          long long v74 = *(_OWORD *)(v7 - 136);
          long long v78 = *(_OWORD *)(v7 - 120);
          long long v50 = *(_OWORD *)(v7 - 232);
          long long v54 = *(_OWORD *)(v7 - 216);
          long long v58 = *(_OWORD *)(v7 - 200);
          long long v62 = *(_OWORD *)(v7 - 184);
          long long v9 = *(_OWORD *)(v8 - 232);
          long long v10 = *(_OWORD *)(v8 - 216);
          *(_OWORD *)(v7 - 200) = *(_OWORD *)(v8 - 200);
          *(_OWORD *)(v7 - 216) = v10;
          *(_OWORD *)(v7 - 232) = v9;
          long long v11 = *(_OWORD *)(v8 - 184);
          long long v12 = *(_OWORD *)(v8 - 168);
          long long v13 = *(_OWORD *)(v8 - 152);
          *(_OWORD *)(v7 - 136) = *(_OWORD *)(v8 - 136);
          *(_OWORD *)(v7 - 152) = v13;
          *(_OWORD *)(v7 - 168) = v12;
          *(_OWORD *)(v7 - 184) = v11;
          long long v14 = *(_OWORD *)(v8 - 120);
          long long v15 = *(_OWORD *)(v8 - 104);
          long long v16 = *(_OWORD *)(v8 - 88);
          *(_OWORD *)(v7 - 72) = *(_OWORD *)(v8 - 72);
          *(_OWORD *)(v7 - 88) = v16;
          *(_OWORD *)(v7 - 104) = v15;
          *(_OWORD *)(v7 - 120) = v14;
          long long v17 = *(_OWORD *)(v8 - 56);
          long long v18 = *(_OWORD *)(v8 - 40);
          long long v19 = *(_OWORD *)(v8 - 24);
          *((void *)v7 - 1) = *((void *)v8 - 1);
          *(_OWORD *)(v7 - 24) = v19;
          *(_OWORD *)(v7 - 40) = v18;
          *(_OWORD *)(v7 - 56) = v17;
          *(_OWORD *)(v8 - 56) = v94;
          *(_OWORD *)(v8 - 40) = v98;
          *(_OWORD *)(v8 - 24) = v102;
          *((void *)v8 - 1) = v106;
          *(_OWORD *)(v8 - 120) = v78;
          *(_OWORD *)(v8 - 104) = v82;
          *(_OWORD *)(v8 - 88) = v86;
          *(_OWORD *)(v8 - 72) = v90;
          *(_OWORD *)(v8 - 184) = v62;
          *(_OWORD *)(v8 - 168) = v66;
          *(_OWORD *)(v8 - 152) = v70;
          *(_OWORD *)(v8 - 136) = v74;
          *(_OWORD *)(v8 - 232) = v50;
          *(_OWORD *)(v8 - 216) = v54;
          *(_OWORD *)(v8 - 200) = v58;
          if (v7 == a2) {
            break;
          }
          v7 += 232;
          BOOL v20 = v8 == a3;
          v8 += 232;
        }
        while (!v20);
        return a2;
      }
      else
      {
        uint64_t v23 = 0x34F72C234F72C235 * ((a3 - a2) >> 3);
        uint64_t v24 = 0x34F72C234F72C235 * ((a2 - __src) >> 3);
        do
        {
          uint64_t v25 = v24;
          uint64_t v24 = v23;
          uint64_t v23 = v25 % v23;
        }
        while (v23);
        if (v24)
        {
          uint64_t v26 = &__src[232 * v24];
          do
          {
            long long v101 = *(_OWORD *)(v26 - 40);
            long long v105 = *(_OWORD *)(v26 - 24);
            uint64_t v27 = *((void *)v26 - 1);
            long long v85 = *(_OWORD *)(v26 - 104);
            long long v89 = *(_OWORD *)(v26 - 88);
            long long v93 = *(_OWORD *)(v26 - 72);
            long long v97 = *(_OWORD *)(v26 - 56);
            long long v28 = *(_OWORD *)(v26 - 184);
            long long v69 = *(_OWORD *)(v26 - 168);
            long long v73 = *(_OWORD *)(v26 - 152);
            long long v77 = *(_OWORD *)(v26 - 136);
            long long v81 = *(_OWORD *)(v26 - 120);
            long long v53 = *(_OWORD *)(v26 - 232);
            long long v57 = *(_OWORD *)(v26 - 216);
            long long v29 = *(_OWORD *)(v26 - 200);
            v26 -= 232;
            uint64_t v109 = v27;
            double v30 = &v26[8 * ((a2 - __src) >> 3)];
            long long v31 = v26;
            long long v61 = v29;
            long long v65 = v28;
            do
            {
              uint64_t v32 = v30;
              long long v33 = *(_OWORD *)v30;
              long long v34 = *((_OWORD *)v30 + 2);
              *((_OWORD *)v31 + 1) = *((_OWORD *)v30 + 1);
              *((_OWORD *)v31 + 2) = v34;
              *(_OWORD *)long long v31 = v33;
              long long v35 = *((_OWORD *)v30 + 3);
              long long v36 = *((_OWORD *)v30 + 4);
              long long v37 = *((_OWORD *)v30 + 6);
              *((_OWORD *)v31 + 5) = *((_OWORD *)v30 + 5);
              *((_OWORD *)v31 + 6) = v37;
              *((_OWORD *)v31 + 3) = v35;
              *((_OWORD *)v31 + 4) = v36;
              long long v38 = *((_OWORD *)v30 + 7);
              long long v39 = *((_OWORD *)v30 + 8);
              long long v40 = *((_OWORD *)v30 + 10);
              *((_OWORD *)v31 + 9) = *((_OWORD *)v30 + 9);
              *((_OWORD *)v31 + 10) = v40;
              *((_OWORD *)v31 + 7) = v38;
              *((_OWORD *)v31 + 8) = v39;
              long long v41 = *((_OWORD *)v30 + 11);
              long long v42 = *((_OWORD *)v30 + 12);
              long long v43 = *((_OWORD *)v30 + 13);
              *((void *)v31 + 28) = *((void *)v30 + 28);
              *((_OWORD *)v31 + 12) = v42;
              *((_OWORD *)v31 + 13) = v43;
              *((_OWORD *)v31 + 11) = v41;
              uint64_t v44 = 0x34F72C234F72C235 * ((a3 - v30) >> 3);
              v30 += 8 * ((a2 - __src) >> 3);
              BOOL v45 = __OFSUB__(v6, v44);
              uint64_t v47 = v6 - v44;
              char v46 = (v47 < 0) ^ v45;
              long long v48 = &__src[232 * v47];
              if (!v46) {
                double v30 = v48;
              }
              long long v31 = v32;
            }
            while (v30 != v26);
            *((_OWORD *)v32 + 1) = v57;
            *((_OWORD *)v32 + 2) = v61;
            *(_OWORD *)uint64_t v32 = v53;
            *((_OWORD *)v32 + 5) = v73;
            *((_OWORD *)v32 + 6) = v77;
            *((_OWORD *)v32 + 3) = v65;
            *((_OWORD *)v32 + 4) = v69;
            *((_OWORD *)v32 + 9) = v89;
            *((_OWORD *)v32 + 10) = v93;
            *((_OWORD *)v32 + 7) = v81;
            *((_OWORD *)v32 + 8) = v85;
            *((void *)v32 + 28) = v109;
            *((_OWORD *)v32 + 12) = v101;
            *((_OWORD *)v32 + 13) = v105;
            *((_OWORD *)v32 + 11) = v97;
          }
          while (v26 != __src);
        }
        return &__src[8 * ((a3 - a2) >> 3)];
      }
    }
  }
  return v4;
}

__n128 sub_CE861C(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  if (a3 >= 2)
  {
    uint64_t v7 = a1;
    if (a3 == 2)
    {
      result.n128_u64[0] = *((void *)a2 - 1);
      if (result.n128_f64[0] < *(double *)(a1 + 224))
      {
        long long v112 = *(_OWORD *)(a1 + 192);
        long long v114 = *(_OWORD *)(a1 + 208);
        uint64_t v116 = *(void *)(a1 + 224);
        long long v104 = *(_OWORD *)(a1 + 128);
        long long v106 = *(_OWORD *)(a1 + 144);
        long long v108 = *(_OWORD *)(a1 + 160);
        long long v110 = *(_OWORD *)(a1 + 176);
        long long v96 = *(_OWORD *)(a1 + 64);
        long long v98 = *(_OWORD *)(a1 + 80);
        long long v100 = *(_OWORD *)(a1 + 96);
        long long v102 = *(_OWORD *)(a1 + 112);
        __n128 v88 = *(__n128 *)a1;
        long long v90 = *(_OWORD *)(a1 + 16);
        long long v92 = *(_OWORD *)(a1 + 32);
        long long v94 = *(_OWORD *)(a1 + 48);
        long long v8 = *(_OWORD *)(a2 - 232);
        long long v9 = *(_OWORD *)(a2 - 200);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 - 216);
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)a1 = v8;
        long long v10 = *(_OWORD *)(a2 - 184);
        long long v11 = *(_OWORD *)(a2 - 168);
        long long v12 = *(_OWORD *)(a2 - 136);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 - 152);
        *(_OWORD *)(a1 + 96) = v12;
        *(_OWORD *)(a1 + 48) = v10;
        *(_OWORD *)(a1 + 64) = v11;
        long long v13 = *(_OWORD *)(a2 - 120);
        long long v14 = *(_OWORD *)(a2 - 104);
        long long v15 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a1 + 160) = v15;
        *(_OWORD *)(a1 + 112) = v13;
        *(_OWORD *)(a1 + 128) = v14;
        long long v16 = *(_OWORD *)(a2 - 56);
        long long v17 = *(_OWORD *)(a2 - 40);
        long long v18 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 224) = *((void *)a2 - 1);
        *(_OWORD *)(a1 + 192) = v17;
        *(_OWORD *)(a1 + 208) = v18;
        *(_OWORD *)(a1 + 176) = v16;
        *(_OWORD *)(a2 - 56) = v110;
        *(_OWORD *)(a2 - 40) = v112;
        *(_OWORD *)(a2 - 24) = v114;
        *((void *)a2 - 1) = v116;
        *(_OWORD *)(a2 - 120) = v102;
        *(_OWORD *)(a2 - 104) = v104;
        *(_OWORD *)(a2 - 88) = v106;
        *(_OWORD *)(a2 - 72) = v108;
        *(_OWORD *)(a2 - 184) = v94;
        *(_OWORD *)(a2 - 168) = v96;
        *(_OWORD *)(a2 - 152) = v98;
        *(_OWORD *)(a2 - 136) = v100;
        double result = v88;
        *(__n128 *)(a2 - 232) = v88;
        *(_OWORD *)(a2 - 216) = v90;
        *(_OWORD *)(a2 - 200) = v92;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      uint64_t v37 = a4;
      unint64_t v38 = a3 >> 1;
      uint64_t v39 = a1 + 232 * (a3 >> 1);
      unint64_t v40 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_CE8B24(a1, v39, v40, a4);
        uint64_t v41 = v37 + 232 * v38;
        sub_CE8B24(v7 + 232 * (a3 >> 1), (uint64_t)a2, a3 - (a3 >> 1), v41);
        unint64_t v42 = v37 + 232 * a3;
        uint64_t v43 = v41;
        while (v43 != v42)
        {
          if (*(double *)(v43 + 224) >= *(double *)(v37 + 224))
          {
            long long v44 = *(_OWORD *)v37;
            long long v45 = *(_OWORD *)(v37 + 32);
            *(_OWORD *)(v7 + 16) = *(_OWORD *)(v37 + 16);
            *(_OWORD *)(v7 + 32) = v45;
            *(_OWORD *)uint64_t v7 = v44;
            long long v46 = *(_OWORD *)(v37 + 48);
            long long v47 = *(_OWORD *)(v37 + 64);
            long long v48 = *(_OWORD *)(v37 + 96);
            *(_OWORD *)(v7 + 80) = *(_OWORD *)(v37 + 80);
            *(_OWORD *)(v7 + 96) = v48;
            *(_OWORD *)(v7 + 48) = v46;
            *(_OWORD *)(v7 + 64) = v47;
            long long v49 = *(_OWORD *)(v37 + 112);
            long long v50 = *(_OWORD *)(v37 + 128);
            long long v51 = *(_OWORD *)(v37 + 160);
            *(_OWORD *)(v7 + 144) = *(_OWORD *)(v37 + 144);
            *(_OWORD *)(v7 + 160) = v51;
            *(_OWORD *)(v7 + 112) = v49;
            *(_OWORD *)(v7 + 128) = v50;
            double result = *(__n128 *)(v37 + 176);
            long long v52 = *(_OWORD *)(v37 + 192);
            long long v53 = *(_OWORD *)(v37 + 208);
            *(void *)(v7 + 224) = *(void *)(v37 + 224);
            *(_OWORD *)(v7 + 192) = v52;
            *(_OWORD *)(v7 + 208) = v53;
            *(__n128 *)(v7 + 176) = result;
            v37 += 232;
            v7 += 232;
            if (v37 == v41) {
              goto LABEL_26;
            }
          }
          else
          {
            long long v54 = *(_OWORD *)v43;
            long long v55 = *(_OWORD *)(v43 + 32);
            *(_OWORD *)(v7 + 16) = *(_OWORD *)(v43 + 16);
            *(_OWORD *)(v7 + 32) = v55;
            *(_OWORD *)uint64_t v7 = v54;
            long long v56 = *(_OWORD *)(v43 + 48);
            long long v57 = *(_OWORD *)(v43 + 64);
            long long v58 = *(_OWORD *)(v43 + 96);
            *(_OWORD *)(v7 + 80) = *(_OWORD *)(v43 + 80);
            *(_OWORD *)(v7 + 96) = v58;
            *(_OWORD *)(v7 + 48) = v56;
            *(_OWORD *)(v7 + 64) = v57;
            long long v59 = *(_OWORD *)(v43 + 112);
            long long v60 = *(_OWORD *)(v43 + 128);
            long long v61 = *(_OWORD *)(v43 + 160);
            *(_OWORD *)(v7 + 144) = *(_OWORD *)(v43 + 144);
            *(_OWORD *)(v7 + 160) = v61;
            *(_OWORD *)(v7 + 112) = v59;
            *(_OWORD *)(v7 + 128) = v60;
            double result = *(__n128 *)(v43 + 176);
            long long v62 = *(_OWORD *)(v43 + 192);
            long long v63 = *(_OWORD *)(v43 + 208);
            *(void *)(v7 + 224) = *(void *)(v43 + 224);
            *(_OWORD *)(v7 + 192) = v62;
            *(_OWORD *)(v7 + 208) = v63;
            *(__n128 *)(v7 + 176) = result;
            v43 += 232;
            v7 += 232;
            if (v37 == v41)
            {
LABEL_26:
              if (v43 != v42)
              {
                uint64_t v64 = 0;
                do
                {
                  uint64_t v65 = v7 + v64;
                  long long v66 = *(_OWORD *)(v43 + v64);
                  long long v67 = *(_OWORD *)(v43 + v64 + 32);
                  *(_OWORD *)(v65 + 16) = *(_OWORD *)(v43 + v64 + 16);
                  *(_OWORD *)(v65 + 32) = v67;
                  *(_OWORD *)uint64_t v65 = v66;
                  long long v68 = *(_OWORD *)(v43 + v64 + 48);
                  long long v69 = *(_OWORD *)(v43 + v64 + 64);
                  long long v70 = *(_OWORD *)(v43 + v64 + 96);
                  *(_OWORD *)(v65 + 80) = *(_OWORD *)(v43 + v64 + 80);
                  *(_OWORD *)(v65 + 96) = v70;
                  *(_OWORD *)(v65 + 48) = v68;
                  *(_OWORD *)(v65 + 64) = v69;
                  long long v71 = *(_OWORD *)(v43 + v64 + 112);
                  long long v72 = *(_OWORD *)(v43 + v64 + 128);
                  long long v73 = *(_OWORD *)(v43 + v64 + 160);
                  *(_OWORD *)(v65 + 144) = *(_OWORD *)(v43 + v64 + 144);
                  *(_OWORD *)(v65 + 160) = v73;
                  *(_OWORD *)(v65 + 112) = v71;
                  *(_OWORD *)(v65 + 128) = v72;
                  double result = *(__n128 *)(v43 + v64 + 176);
                  long long v74 = *(_OWORD *)(v43 + v64 + 192);
                  long long v75 = *(_OWORD *)(v43 + v64 + 208);
                  *(void *)(v65 + 224) = *(void *)(v43 + v64 + 224);
                  *(_OWORD *)(v65 + 192) = v74;
                  *(_OWORD *)(v65 + 208) = v75;
                  *(__n128 *)(v65 + 176) = result;
                  v64 += 232;
                }
                while (v43 + v64 != v42);
              }
              return result;
            }
          }
        }
        if (v37 != v41)
        {
          uint64_t v76 = 0;
          do
          {
            uint64_t v77 = v7 + v76;
            long long v78 = *(_OWORD *)(v37 + v76);
            long long v79 = *(_OWORD *)(v37 + v76 + 32);
            *(_OWORD *)(v77 + 16) = *(_OWORD *)(v37 + v76 + 16);
            *(_OWORD *)(v77 + 32) = v79;
            *(_OWORD *)uint64_t v77 = v78;
            long long v80 = *(_OWORD *)(v37 + v76 + 48);
            long long v81 = *(_OWORD *)(v37 + v76 + 64);
            long long v82 = *(_OWORD *)(v37 + v76 + 96);
            *(_OWORD *)(v77 + 80) = *(_OWORD *)(v37 + v76 + 80);
            *(_OWORD *)(v77 + 96) = v82;
            *(_OWORD *)(v77 + 48) = v80;
            *(_OWORD *)(v77 + 64) = v81;
            long long v83 = *(_OWORD *)(v37 + v76 + 112);
            long long v84 = *(_OWORD *)(v37 + v76 + 128);
            long long v85 = *(_OWORD *)(v37 + v76 + 160);
            *(_OWORD *)(v77 + 144) = *(_OWORD *)(v37 + v76 + 144);
            *(_OWORD *)(v77 + 160) = v85;
            *(_OWORD *)(v77 + 112) = v83;
            *(_OWORD *)(v77 + 128) = v84;
            double result = *(__n128 *)(v37 + v76 + 176);
            long long v86 = *(_OWORD *)(v37 + v76 + 192);
            long long v87 = *(_OWORD *)(v37 + v76 + 208);
            *(void *)(v77 + 224) = *(void *)(v37 + v76 + 224);
            *(_OWORD *)(v77 + 192) = v86;
            *(_OWORD *)(v77 + 208) = v87;
            *(__n128 *)(v77 + 176) = result;
            v76 += 232;
          }
          while (v37 + v76 != v41);
        }
      }
      else
      {
        sub_CE861C(a1, v39, v40, a4, a5);
        sub_CE861C(v7 + 232 * (a3 >> 1), a2, a3 - (a3 >> 1), v37, a5);
        sub_CE90B8((double *)v7, (double *)(v7 + 232 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (char *)v37, a5);
      }
    }
    else if ((char *)a1 != a2)
    {
      BOOL v20 = (_OWORD *)(a1 + 232);
      if ((char *)(a1 + 232) != a2)
      {
        uint64_t v21 = 0;
        size_t v22 = (_OWORD *)a1;
        do
        {
          result.n128_u64[0] = *((void *)v22 + 57);
          double v24 = *((double *)v22 + 28);
          size_t v22 = v20;
          if (result.n128_f64[0] < v24)
          {
            long long v109 = v20[10];
            long long v111 = v20[11];
            long long v113 = v20[12];
            long long v115 = v20[13];
            long long v101 = v20[6];
            long long v103 = v20[7];
            long long v105 = v20[8];
            long long v107 = v20[9];
            long long v93 = v20[2];
            long long v95 = v20[3];
            long long v97 = v20[4];
            long long v99 = v20[5];
            long long v25 = v20[1];
            uint64_t v26 = v21;
            long long v89 = *v22;
            long long v91 = v25;
            do
            {
              uint64_t v27 = a1 + v26;
              long long v28 = (_OWORD *)(a1 + v26 + 232);
              long long v29 = *(_OWORD *)(a1 + v26 + 208);
              v28[12] = *(_OWORD *)(a1 + v26 + 192);
              v28[13] = v29;
              *(void *)(v27 + 456) = *(void *)(a1 + v26 + 224);
              long long v30 = *(_OWORD *)(a1 + v26 + 144);
              v28[8] = *(_OWORD *)(a1 + v26 + 128);
              v28[9] = v30;
              long long v31 = *(_OWORD *)(a1 + v26 + 176);
              v28[10] = *(_OWORD *)(a1 + v26 + 160);
              v28[11] = v31;
              long long v32 = *(_OWORD *)(a1 + v26 + 80);
              v28[4] = *(_OWORD *)(a1 + v26 + 64);
              v28[5] = v32;
              long long v33 = *(_OWORD *)(a1 + v26 + 112);
              v28[6] = *(_OWORD *)(a1 + v26 + 96);
              v28[7] = v33;
              long long v34 = *(_OWORD *)(a1 + v26 + 16);
              *(_OWORD *)(v27 + 232) = *(_OWORD *)(a1 + v26);
              *(_OWORD *)(v27 + 248) = v34;
              long long v35 = *(_OWORD *)(a1 + v26 + 48);
              v28[2] = *(_OWORD *)(a1 + v26 + 32);
              v28[3] = v35;
              if (!v26)
              {
                uint64_t v23 = a1;
                goto LABEL_10;
              }
              v26 -= 232;
            }
            while (result.n128_f64[0] < *(double *)(v27 - 8));
            uint64_t v23 = a1 + v26 + 232;
LABEL_10:
            *(_OWORD *)(v23 + 160) = v109;
            *(_OWORD *)(v23 + 176) = v111;
            *(_OWORD *)(v23 + 192) = v113;
            *(_OWORD *)(v23 + 208) = v115;
            *(_OWORD *)(v23 + 96) = v101;
            *(_OWORD *)(v23 + 112) = v103;
            *(_OWORD *)(v23 + 128) = v105;
            *(_OWORD *)(v23 + 144) = v107;
            *(_OWORD *)(v23 + 32) = v93;
            *(_OWORD *)(v23 + 48) = v95;
            *(_OWORD *)(v23 + 64) = v97;
            *(_OWORD *)(v23 + 80) = v99;
            *(_OWORD *)uint64_t v23 = v89;
            *(_OWORD *)(v23 + 16) = v91;
            *(void *)(v23 + 224) = result.n128_u64[0];
          }
          BOOL v20 = (_OWORD *)((char *)v22 + 232);
          v21 += 232;
        }
        while ((char *)v22 + 232 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_CE8B24(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v7 = result;
    if (a3 == 2)
    {
      long long v19 = (long long *)(a2 - 232);
      BOOL v20 = (_OWORD *)(a4 + 232);
      if (*(double *)(a2 - 8) >= *(double *)(result + 224))
      {
        long long v87 = *(_OWORD *)result;
        long long v88 = *(_OWORD *)(result + 32);
        *(_OWORD *)(a4 + 16) = *(_OWORD *)(result + 16);
        *(_OWORD *)(a4 + 32) = v88;
        *(_OWORD *)a4 = v87;
        long long v89 = *(_OWORD *)(result + 48);
        long long v90 = *(_OWORD *)(result + 64);
        long long v91 = *(_OWORD *)(result + 96);
        *(_OWORD *)(a4 + 80) = *(_OWORD *)(result + 80);
        *(_OWORD *)(a4 + 96) = v91;
        *(_OWORD *)(a4 + 48) = v89;
        *(_OWORD *)(a4 + 64) = v90;
        long long v92 = *(_OWORD *)(result + 112);
        long long v93 = *(_OWORD *)(result + 128);
        long long v94 = *(_OWORD *)(result + 160);
        *(_OWORD *)(a4 + 144) = *(_OWORD *)(result + 144);
        *(_OWORD *)(a4 + 160) = v94;
        *(_OWORD *)(a4 + 112) = v92;
        *(_OWORD *)(a4 + 128) = v93;
        long long v95 = *(_OWORD *)(result + 176);
        long long v96 = *(_OWORD *)(result + 192);
        long long v97 = *(_OWORD *)(result + 208);
        *(void *)(a4 + 224) = *(void *)(result + 224);
        *(_OWORD *)(a4 + 192) = v96;
        *(_OWORD *)(a4 + 208) = v97;
        *(_OWORD *)(a4 + 176) = v95;
        long long v98 = *v19;
        long long v99 = *(_OWORD *)(a2 - 200);
        *(_OWORD *)(a4 + 248) = *(_OWORD *)(a2 - 216);
        *(_OWORD *)(a4 + 264) = v99;
        *BOOL v20 = v98;
        long long v100 = *(_OWORD *)(a2 - 184);
        long long v101 = *(_OWORD *)(a2 - 168);
        long long v102 = *(_OWORD *)(a2 - 136);
        *(_OWORD *)(a4 + 312) = *(_OWORD *)(a2 - 152);
        *(_OWORD *)(a4 + 328) = v102;
        *(_OWORD *)(a4 + 280) = v100;
        *(_OWORD *)(a4 + 296) = v101;
        long long v103 = *(_OWORD *)(a2 - 120);
        long long v104 = *(_OWORD *)(a2 - 104);
        long long v105 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a4 + 376) = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a4 + 392) = v105;
        *(_OWORD *)(a4 + 344) = v103;
        *(_OWORD *)(a4 + 360) = v104;
        long long v40 = *(_OWORD *)(a2 - 56);
        long long v41 = *(_OWORD *)(a2 - 40);
        long long v42 = *(_OWORD *)(a2 - 24);
        uint64_t v43 = *(void *)(a2 - 8);
      }
      else
      {
        long long v21 = *v19;
        long long v22 = *(_OWORD *)(a2 - 200);
        *(_OWORD *)(a4 + 16) = *(_OWORD *)(a2 - 216);
        *(_OWORD *)(a4 + 32) = v22;
        *(_OWORD *)a4 = v21;
        long long v23 = *(_OWORD *)(a2 - 184);
        long long v24 = *(_OWORD *)(a2 - 168);
        long long v25 = *(_OWORD *)(a2 - 136);
        *(_OWORD *)(a4 + 80) = *(_OWORD *)(a2 - 152);
        *(_OWORD *)(a4 + 96) = v25;
        *(_OWORD *)(a4 + 48) = v23;
        *(_OWORD *)(a4 + 64) = v24;
        long long v26 = *(_OWORD *)(a2 - 120);
        long long v27 = *(_OWORD *)(a2 - 104);
        long long v28 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a4 + 144) = *(_OWORD *)(a2 - 88);
        *(_OWORD *)(a4 + 160) = v28;
        *(_OWORD *)(a4 + 112) = v26;
        *(_OWORD *)(a4 + 128) = v27;
        long long v29 = *(_OWORD *)(a2 - 56);
        long long v30 = *(_OWORD *)(a2 - 40);
        long long v31 = *(_OWORD *)(a2 - 24);
        *(void *)(a4 + 224) = *(void *)(a2 - 8);
        *(_OWORD *)(a4 + 192) = v30;
        *(_OWORD *)(a4 + 208) = v31;
        *(_OWORD *)(a4 + 176) = v29;
        long long v32 = *(_OWORD *)result;
        long long v33 = *(_OWORD *)(result + 32);
        *(_OWORD *)(a4 + 248) = *(_OWORD *)(result + 16);
        *(_OWORD *)(a4 + 264) = v33;
        *BOOL v20 = v32;
        long long v34 = *(_OWORD *)(result + 48);
        long long v35 = *(_OWORD *)(result + 64);
        long long v36 = *(_OWORD *)(result + 96);
        *(_OWORD *)(a4 + 312) = *(_OWORD *)(result + 80);
        *(_OWORD *)(a4 + 328) = v36;
        *(_OWORD *)(a4 + 280) = v34;
        *(_OWORD *)(a4 + 296) = v35;
        long long v37 = *(_OWORD *)(result + 112);
        long long v38 = *(_OWORD *)(result + 128);
        long long v39 = *(_OWORD *)(result + 160);
        *(_OWORD *)(a4 + 376) = *(_OWORD *)(result + 144);
        *(_OWORD *)(a4 + 392) = v39;
        *(_OWORD *)(a4 + 344) = v37;
        *(_OWORD *)(a4 + 360) = v38;
        long long v40 = *(_OWORD *)(result + 176);
        long long v41 = *(_OWORD *)(result + 192);
        long long v42 = *(_OWORD *)(result + 208);
        uint64_t v43 = *(void *)(result + 224);
      }
      *(void *)(a4 + 456) = v43;
      *(_OWORD *)(a4 + 424) = v41;
      *(_OWORD *)(a4 + 440) = v42;
      *(_OWORD *)(a4 + 408) = v40;
    }
    else if (a3 == 1)
    {
      long long v8 = *(_OWORD *)result;
      long long v9 = *(_OWORD *)(result + 32);
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(result + 16);
      *(_OWORD *)(a4 + 32) = v9;
      *(_OWORD *)a4 = v8;
      long long v10 = *(_OWORD *)(result + 48);
      long long v11 = *(_OWORD *)(result + 64);
      long long v12 = *(_OWORD *)(result + 96);
      *(_OWORD *)(a4 + 80) = *(_OWORD *)(result + 80);
      *(_OWORD *)(a4 + 96) = v12;
      *(_OWORD *)(a4 + 48) = v10;
      *(_OWORD *)(a4 + 64) = v11;
      long long v13 = *(_OWORD *)(result + 112);
      long long v14 = *(_OWORD *)(result + 128);
      long long v15 = *(_OWORD *)(result + 160);
      *(_OWORD *)(a4 + 144) = *(_OWORD *)(result + 144);
      *(_OWORD *)(a4 + 160) = v15;
      *(_OWORD *)(a4 + 112) = v13;
      *(_OWORD *)(a4 + 128) = v14;
      long long v16 = *(_OWORD *)(result + 176);
      long long v17 = *(_OWORD *)(result + 192);
      long long v18 = *(_OWORD *)(result + 208);
      *(void *)(a4 + 224) = *(void *)(result + 224);
      *(_OWORD *)(a4 + 192) = v17;
      *(_OWORD *)(a4 + 208) = v18;
      *(_OWORD *)(a4 + 176) = v16;
    }
    else if ((uint64_t)a3 > 8)
    {
      unint64_t v106 = a3 >> 1;
      uint64_t v107 = 232 * (a3 >> 1);
      uint64_t v108 = result + v107;
      sub_CE861C(result, result + v107, a3 >> 1, a4, a3 >> 1);
      double result = sub_CE861C(v7 + v107, a2, a3 - v106, v4 + v107, a3 - v106);
      uint64_t v109 = v7 + v107;
      while (v109 != a2)
      {
        if (*(double *)(v109 + 224) >= *(double *)(v7 + 224))
        {
          long long v110 = *(_OWORD *)v7;
          long long v111 = *(_OWORD *)(v7 + 32);
          *(_OWORD *)(v4 + 16) = *(_OWORD *)(v7 + 16);
          *(_OWORD *)(v4 + 32) = v111;
          *(_OWORD *)uint64_t v4 = v110;
          long long v112 = *(_OWORD *)(v7 + 48);
          long long v113 = *(_OWORD *)(v7 + 64);
          long long v114 = *(_OWORD *)(v7 + 96);
          *(_OWORD *)(v4 + 80) = *(_OWORD *)(v7 + 80);
          *(_OWORD *)(v4 + 96) = v114;
          *(_OWORD *)(v4 + 48) = v112;
          *(_OWORD *)(v4 + 64) = v113;
          long long v115 = *(_OWORD *)(v7 + 112);
          long long v116 = *(_OWORD *)(v7 + 128);
          long long v117 = *(_OWORD *)(v7 + 160);
          *(_OWORD *)(v4 + 144) = *(_OWORD *)(v7 + 144);
          *(_OWORD *)(v4 + 160) = v117;
          *(_OWORD *)(v4 + 112) = v115;
          *(_OWORD *)(v4 + 128) = v116;
          long long v118 = *(_OWORD *)(v7 + 176);
          long long v119 = *(_OWORD *)(v7 + 192);
          long long v120 = *(_OWORD *)(v7 + 208);
          *(void *)(v4 + 224) = *(void *)(v7 + 224);
          *(_OWORD *)(v4 + 192) = v119;
          *(_OWORD *)(v4 + 208) = v120;
          *(_OWORD *)(v4 + 176) = v118;
          v7 += 232;
          v4 += 232;
          if (v7 == v108) {
            goto LABEL_26;
          }
        }
        else
        {
          long long v121 = *(_OWORD *)v109;
          long long v122 = *(_OWORD *)(v109 + 32);
          *(_OWORD *)(v4 + 16) = *(_OWORD *)(v109 + 16);
          *(_OWORD *)(v4 + 32) = v122;
          *(_OWORD *)uint64_t v4 = v121;
          long long v123 = *(_OWORD *)(v109 + 48);
          long long v124 = *(_OWORD *)(v109 + 64);
          long long v125 = *(_OWORD *)(v109 + 96);
          *(_OWORD *)(v4 + 80) = *(_OWORD *)(v109 + 80);
          *(_OWORD *)(v4 + 96) = v125;
          *(_OWORD *)(v4 + 48) = v123;
          *(_OWORD *)(v4 + 64) = v124;
          long long v126 = *(_OWORD *)(v109 + 112);
          long long v127 = *(_OWORD *)(v109 + 128);
          long long v128 = *(_OWORD *)(v109 + 160);
          *(_OWORD *)(v4 + 144) = *(_OWORD *)(v109 + 144);
          *(_OWORD *)(v4 + 160) = v128;
          *(_OWORD *)(v4 + 112) = v126;
          *(_OWORD *)(v4 + 128) = v127;
          long long v129 = *(_OWORD *)(v109 + 176);
          long long v130 = *(_OWORD *)(v109 + 192);
          long long v131 = *(_OWORD *)(v109 + 208);
          *(void *)(v4 + 224) = *(void *)(v109 + 224);
          *(_OWORD *)(v4 + 192) = v130;
          *(_OWORD *)(v4 + 208) = v131;
          *(_OWORD *)(v4 + 176) = v129;
          v109 += 232;
          v4 += 232;
          if (v7 == v108)
          {
LABEL_26:
            if (v109 != a2)
            {
              uint64_t v132 = 0;
              do
              {
                uint64_t v133 = v4 + v132;
                long long v134 = *(_OWORD *)(v109 + v132);
                long long v135 = *(_OWORD *)(v109 + v132 + 32);
                *(_OWORD *)(v133 + 16) = *(_OWORD *)(v109 + v132 + 16);
                *(_OWORD *)(v133 + 32) = v135;
                *(_OWORD *)uint64_t v133 = v134;
                long long v136 = *(_OWORD *)(v109 + v132 + 48);
                long long v137 = *(_OWORD *)(v109 + v132 + 64);
                long long v138 = *(_OWORD *)(v109 + v132 + 96);
                *(_OWORD *)(v133 + 80) = *(_OWORD *)(v109 + v132 + 80);
                *(_OWORD *)(v133 + 96) = v138;
                *(_OWORD *)(v133 + 48) = v136;
                *(_OWORD *)(v133 + 64) = v137;
                long long v139 = *(_OWORD *)(v109 + v132 + 112);
                long long v140 = *(_OWORD *)(v109 + v132 + 128);
                long long v141 = *(_OWORD *)(v109 + v132 + 160);
                *(_OWORD *)(v133 + 144) = *(_OWORD *)(v109 + v132 + 144);
                *(_OWORD *)(v133 + 160) = v141;
                *(_OWORD *)(v133 + 112) = v139;
                *(_OWORD *)(v133 + 128) = v140;
                long long v142 = *(_OWORD *)(v109 + v132 + 176);
                long long v143 = *(_OWORD *)(v109 + v132 + 192);
                long long v144 = *(_OWORD *)(v109 + v132 + 208);
                *(void *)(v133 + 224) = *(void *)(v109 + v132 + 224);
                *(_OWORD *)(v133 + 192) = v143;
                *(_OWORD *)(v133 + 208) = v144;
                *(_OWORD *)(v133 + 176) = v142;
                v132 += 232;
              }
              while (v109 + v132 != a2);
            }
            return result;
          }
        }
      }
      if (v7 != v108)
      {
        uint64_t v145 = 0;
        do
        {
          uint64_t v146 = v4 + v145;
          long long v147 = *(_OWORD *)(v7 + v145);
          long long v148 = *(_OWORD *)(v7 + v145 + 32);
          *(_OWORD *)(v146 + 16) = *(_OWORD *)(v7 + v145 + 16);
          *(_OWORD *)(v146 + 32) = v148;
          *(_OWORD *)uint64_t v146 = v147;
          long long v149 = *(_OWORD *)(v7 + v145 + 48);
          long long v150 = *(_OWORD *)(v7 + v145 + 64);
          long long v151 = *(_OWORD *)(v7 + v145 + 96);
          *(_OWORD *)(v146 + 80) = *(_OWORD *)(v7 + v145 + 80);
          *(_OWORD *)(v146 + 96) = v151;
          *(_OWORD *)(v146 + 48) = v149;
          *(_OWORD *)(v146 + 64) = v150;
          long long v152 = *(_OWORD *)(v7 + v145 + 112);
          long long v153 = *(_OWORD *)(v7 + v145 + 128);
          long long v154 = *(_OWORD *)(v7 + v145 + 160);
          *(_OWORD *)(v146 + 144) = *(_OWORD *)(v7 + v145 + 144);
          *(_OWORD *)(v146 + 160) = v154;
          *(_OWORD *)(v146 + 112) = v152;
          *(_OWORD *)(v146 + 128) = v153;
          long long v155 = *(_OWORD *)(v7 + v145 + 176);
          long long v156 = *(_OWORD *)(v7 + v145 + 192);
          long long v157 = *(_OWORD *)(v7 + v145 + 208);
          *(void *)(v146 + 224) = *(void *)(v7 + v145 + 224);
          *(_OWORD *)(v146 + 192) = v156;
          *(_OWORD *)(v146 + 208) = v157;
          *(_OWORD *)(v146 + 176) = v155;
          v145 += 232;
        }
        while (v7 + v145 != v108);
      }
    }
    else if (result != a2)
    {
      long long v44 = *(_OWORD *)result;
      long long v45 = *(_OWORD *)(result + 32);
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(result + 16);
      *(_OWORD *)(a4 + 32) = v45;
      *(_OWORD *)a4 = v44;
      long long v46 = *(_OWORD *)(result + 48);
      long long v47 = *(_OWORD *)(result + 64);
      long long v48 = *(_OWORD *)(result + 96);
      *(_OWORD *)(a4 + 80) = *(_OWORD *)(result + 80);
      *(_OWORD *)(a4 + 96) = v48;
      *(_OWORD *)(a4 + 48) = v46;
      *(_OWORD *)(a4 + 64) = v47;
      long long v49 = *(_OWORD *)(result + 112);
      long long v50 = *(_OWORD *)(result + 128);
      long long v51 = *(_OWORD *)(result + 160);
      *(_OWORD *)(a4 + 144) = *(_OWORD *)(result + 144);
      *(_OWORD *)(a4 + 160) = v51;
      *(_OWORD *)(a4 + 112) = v49;
      *(_OWORD *)(a4 + 128) = v50;
      long long v52 = *(_OWORD *)(result + 176);
      long long v53 = *(_OWORD *)(result + 192);
      long long v54 = *(_OWORD *)(result + 208);
      *(void *)(a4 + 224) = *(void *)(result + 224);
      *(_OWORD *)(a4 + 192) = v53;
      *(_OWORD *)(a4 + 208) = v54;
      *(_OWORD *)(a4 + 176) = v52;
      uint64_t v55 = result + 232;
      if (result + 232 != a2)
      {
        uint64_t v56 = 0;
        uint64_t v57 = a4;
        do
        {
          uint64_t v69 = v7;
          uint64_t v70 = v57;
          uint64_t v7 = v55;
          v57 += 232;
          uint64_t v71 = v57;
          if (*(double *)(v69 + 456) < *(double *)(v70 + 224))
          {
            long long v72 = *(_OWORD *)(v70 + 208);
            *(_OWORD *)(v57 + 192) = *(_OWORD *)(v70 + 192);
            *(_OWORD *)(v57 + 208) = v72;
            *(void *)(v57 + 224) = *(void *)(v70 + 224);
            long long v73 = *(_OWORD *)(v70 + 144);
            *(_OWORD *)(v57 + 128) = *(_OWORD *)(v70 + 128);
            *(_OWORD *)(v57 + 144) = v73;
            long long v74 = *(_OWORD *)(v70 + 176);
            *(_OWORD *)(v57 + 160) = *(_OWORD *)(v70 + 160);
            *(_OWORD *)(v57 + 176) = v74;
            long long v75 = *(_OWORD *)(v70 + 80);
            *(_OWORD *)(v57 + 64) = *(_OWORD *)(v70 + 64);
            *(_OWORD *)(v57 + 80) = v75;
            long long v76 = *(_OWORD *)(v70 + 112);
            *(_OWORD *)(v57 + 96) = *(_OWORD *)(v70 + 96);
            *(_OWORD *)(v57 + 112) = v76;
            long long v77 = *(_OWORD *)(v70 + 16);
            *(_OWORD *)uint64_t v57 = *(_OWORD *)v70;
            *(_OWORD *)(v57 + 16) = v77;
            long long v78 = *(_OWORD *)(v70 + 48);
            uint64_t v71 = a4;
            *(_OWORD *)(v57 + 32) = *(_OWORD *)(v70 + 32);
            *(_OWORD *)(v57 + 48) = v78;
            if (v70 != a4)
            {
              uint64_t v79 = v56;
              while (1)
              {
                uint64_t v71 = a4 + v79;
                if (*(double *)(v69 + 456) >= *(double *)(a4 + v79 - 8)) {
                  break;
                }
                long long v80 = *(_OWORD *)(v71 - 56);
                long long v81 = *(_OWORD *)(v71 - 24);
                *(_OWORD *)(v71 + 192) = *(_OWORD *)(v71 - 40);
                *(_OWORD *)(v71 + 208) = v81;
                *(void *)(v71 + 224) = *(void *)(v71 - 8);
                long long v82 = *(_OWORD *)(v71 - 120);
                long long v83 = *(_OWORD *)(v71 - 88);
                *(_OWORD *)(v71 + 128) = *(_OWORD *)(v71 - 104);
                *(_OWORD *)(v71 + 144) = v83;
                *(_OWORD *)(v71 + 160) = *(_OWORD *)(v71 - 72);
                *(_OWORD *)(v71 + 176) = v80;
                long long v84 = *(_OWORD *)(v71 - 184);
                long long v85 = *(_OWORD *)(v71 - 152);
                *(_OWORD *)(v71 + 64) = *(_OWORD *)(v71 - 168);
                *(_OWORD *)(v71 + 80) = v85;
                *(_OWORD *)(v71 + 96) = *(_OWORD *)(v71 - 136);
                *(_OWORD *)(v71 + 112) = v82;
                long long v86 = *(_OWORD *)(v71 - 216);
                *(_OWORD *)uint64_t v71 = *(_OWORD *)(v71 - 232);
                *(_OWORD *)(v71 + 16) = v86;
                *(_OWORD *)(v71 + 32) = *(_OWORD *)(v71 - 200);
                *(_OWORD *)(v71 + 48) = v84;
                v79 -= 232;
                if (!v79)
                {
                  uint64_t v71 = a4;
                  break;
                }
              }
            }
          }
          long long v58 = *(_OWORD *)v7;
          long long v59 = *(_OWORD *)(v7 + 32);
          *(_OWORD *)(v71 + 16) = *(_OWORD *)(v7 + 16);
          *(_OWORD *)(v71 + 32) = v59;
          *(_OWORD *)uint64_t v71 = v58;
          long long v60 = *(_OWORD *)(v7 + 48);
          long long v61 = *(_OWORD *)(v7 + 64);
          long long v62 = *(_OWORD *)(v7 + 96);
          *(_OWORD *)(v71 + 80) = *(_OWORD *)(v7 + 80);
          *(_OWORD *)(v71 + 96) = v62;
          *(_OWORD *)(v71 + 48) = v60;
          *(_OWORD *)(v71 + 64) = v61;
          long long v63 = *(_OWORD *)(v7 + 112);
          long long v64 = *(_OWORD *)(v7 + 128);
          long long v65 = *(_OWORD *)(v7 + 160);
          *(_OWORD *)(v71 + 144) = *(_OWORD *)(v7 + 144);
          *(_OWORD *)(v71 + 160) = v65;
          *(_OWORD *)(v71 + 112) = v63;
          *(_OWORD *)(v71 + 128) = v64;
          long long v66 = *(_OWORD *)(v7 + 176);
          long long v67 = *(_OWORD *)(v7 + 192);
          long long v68 = *(_OWORD *)(v7 + 208);
          *(void *)(v71 + 224) = *(void *)(v7 + 224);
          *(_OWORD *)(v71 + 192) = v67;
          *(_OWORD *)(v71 + 208) = v68;
          *(_OWORD *)(v71 + 176) = v66;
          uint64_t v55 = v7 + 232;
          v56 += 232;
        }
        while (v7 + 232 != a2);
      }
    }
  }
  return result;
}

double *sub_CE90B8(double *result, double *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v9 = a5;
    long long v11 = result;
    while (v9 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      unint64_t v12 = 0;
      uint64_t v13 = -a4;
      while (1)
      {
        long long v14 = (char *)&v11[v12 / 8];
        if (a2[28] < v11[v12 / 8 + 28]) {
          break;
        }
        v12 += 232;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v16 = -v13;
      long long v131 = a3;
      __src = a6;
      uint64_t v130 = a7;
      if (-v13 >= v9)
      {
        if (v13 == -1)
        {
          long long v105 = &v11[v12 / 8];
          long long v134 = *(_OWORD *)&v11[v12 / 8 + 2];
          long long v135 = *(_OWORD *)&v11[v12 / 8 + 4];
          long long v133 = *(_OWORD *)&v11[v12 / 8];
          long long v138 = *(_OWORD *)&v11[v12 / 8 + 10];
          long long v139 = *(_OWORD *)&v11[v12 / 8 + 12];
          long long v136 = *(_OWORD *)&v11[v12 / 8 + 6];
          long long v137 = *(_OWORD *)&v11[v12 / 8 + 8];
          long long v142 = *(_OWORD *)&v11[v12 / 8 + 18];
          long long v143 = *(_OWORD *)&v11[v12 / 8 + 20];
          long long v140 = *(_OWORD *)&v11[v12 / 8 + 14];
          long long v141 = *(_OWORD *)&v11[v12 / 8 + 16];
          double v147 = v11[v12 / 8 + 28];
          long long v145 = *(_OWORD *)&v11[v12 / 8 + 24];
          long long v146 = *(_OWORD *)&v11[v12 / 8 + 26];
          long long v144 = *(_OWORD *)&v11[v12 / 8 + 22];
          long long v106 = *(_OWORD *)a2;
          long long v107 = *((_OWORD *)a2 + 2);
          *((_OWORD *)v105 + 1) = *((_OWORD *)a2 + 1);
          *((_OWORD *)v105 + 2) = v107;
          *(_OWORD *)long long v105 = v106;
          long long v108 = *((_OWORD *)a2 + 3);
          long long v109 = *((_OWORD *)a2 + 4);
          long long v110 = *((_OWORD *)a2 + 6);
          *((_OWORD *)v105 + 5) = *((_OWORD *)a2 + 5);
          *((_OWORD *)v105 + 6) = v110;
          *((_OWORD *)v105 + 3) = v108;
          *((_OWORD *)v105 + 4) = v109;
          long long v111 = *((_OWORD *)a2 + 7);
          long long v112 = *((_OWORD *)a2 + 8);
          long long v113 = *((_OWORD *)a2 + 10);
          *((_OWORD *)v105 + 9) = *((_OWORD *)a2 + 9);
          *((_OWORD *)v105 + 10) = v113;
          *((_OWORD *)v105 + 7) = v111;
          *((_OWORD *)v105 + 8) = v112;
          long long v114 = *((_OWORD *)a2 + 11);
          long long v115 = *((_OWORD *)a2 + 12);
          long long v116 = *((_OWORD *)a2 + 13);
          v105[28] = a2[28];
          *((_OWORD *)v105 + 12) = v115;
          *((_OWORD *)v105 + 13) = v116;
          *((_OWORD *)v105 + 11) = v114;
          *((_OWORD *)a2 + 12) = v145;
          *((_OWORD *)a2 + 13) = v146;
          a2[28] = v147;
          *((_OWORD *)a2 + 8) = v141;
          *((_OWORD *)a2 + 9) = v142;
          *((_OWORD *)a2 + 10) = v143;
          *((_OWORD *)a2 + 11) = v144;
          *((_OWORD *)a2 + 4) = v137;
          *((_OWORD *)a2 + 5) = v138;
          *((_OWORD *)a2 + 6) = v139;
          *((_OWORD *)a2 + 7) = v140;
          *(_OWORD *)a2 = v133;
          *((_OWORD *)a2 + 1) = v134;
          *((_OWORD *)a2 + 2) = v135;
          *((_OWORD *)a2 + 3) = v136;
          return result;
        }
        if (v13 > 0) {
          uint64_t v16 = 1 - v13;
        }
        uint64_t v26 = v16 >> 1;
        BOOL v20 = &v11[29 * (v16 >> 1) + v12 / 8];
        long long v19 = (char *)a2;
        if (a2 != (double *)a3)
        {
          unint64_t v27 = 0x34F72C234F72C235 * ((a3 - (char *)a2) >> 3);
          long long v19 = (char *)a2;
          do
          {
            unint64_t v28 = v27 >> 1;
            long long v29 = &v19[232 * (v27 >> 1)];
            double v30 = *((double *)v29 + 28);
            long long v31 = v29 + 232;
            v27 += ~(v27 >> 1);
            if (v30 < v20[28]) {
              long long v19 = v31;
            }
            else {
              unint64_t v27 = v28;
            }
          }
          while (v27);
        }
        uint64_t v18 = 0x34F72C234F72C235 * ((v19 - (char *)a2) >> 3);
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v17 = v9;
        }
        else {
          uint64_t v17 = v9 + 1;
        }
        uint64_t v18 = v17 >> 1;
        long long v19 = (char *)&a2[29 * (v17 >> 1)];
        BOOL v20 = a2;
        if ((char *)a2 - (char *)v11 != v12)
        {
          unint64_t v21 = 0x34F72C234F72C235 * ((uint64_t)((char *)a2 - (char *)v11 - v12) >> 3);
          BOOL v20 = &v11[v12 / 8];
          do
          {
            unint64_t v22 = v21 >> 1;
            long long v23 = (char *)&v20[29 * (v21 >> 1)];
            double v24 = *((double *)v23 + 28);
            long long v25 = (double *)(v23 + 232);
            v21 += ~(v21 >> 1);
            if (v24 > *((double *)v19 + 28)) {
              unint64_t v21 = v22;
            }
            else {
              BOOL v20 = v25;
            }
          }
          while (v21);
        }
        uint64_t v26 = 0x34F72C234F72C235 * ((uint64_t)((char *)v20 - (char *)v11 - v12) >> 3);
      }
      a4 = -v26 - v13;
      uint64_t v32 = v26;
      long long v33 = sub_CE815C((char *)v20, (char *)a2, v19);
      uint64_t v34 = v32;
      long long v35 = v33;
      if (v34 + v18 >= v9 - (v34 + v18) - v13)
      {
        long long v37 = v19;
        uint64_t v38 = v34;
        a7 = v130;
        double result = (double *)sub_CE90B8(v33, v37, v131, a4, v9 - v18, __src, v130);
        a2 = v20;
        a6 = __src;
        a4 = v38;
        a3 = v35;
      }
      else
      {
        long long v36 = v20;
        a6 = __src;
        double result = (double *)sub_CE90B8(&v11[v12 / 8], v36, v33, v34, v18, __src, v130);
        long long v14 = v35;
        a2 = (double *)v19;
        a7 = v130;
        a3 = v131;
        uint64_t v18 = v9 - v18;
      }
      uint64_t v9 = v18;
      long long v11 = (double *)v14;
      if (!v18) {
        return result;
      }
    }
    if (a4 <= v9)
    {
      if (v11 != a2)
      {
        uint64_t v68 = 0;
        do
        {
          uint64_t v69 = &a6[v68 * 8];
          long long v70 = *(_OWORD *)&v11[v68];
          long long v71 = *(_OWORD *)&v11[v68 + 4];
          *((_OWORD *)v69 + 1) = *(_OWORD *)&v11[v68 + 2];
          *((_OWORD *)v69 + 2) = v71;
          *(_OWORD *)uint64_t v69 = v70;
          long long v72 = *(_OWORD *)&v11[v68 + 6];
          long long v73 = *(_OWORD *)&v11[v68 + 8];
          long long v74 = *(_OWORD *)&v11[v68 + 12];
          *((_OWORD *)v69 + 5) = *(_OWORD *)&v11[v68 + 10];
          *((_OWORD *)v69 + 6) = v74;
          *((_OWORD *)v69 + 3) = v72;
          *((_OWORD *)v69 + 4) = v73;
          long long v75 = *(_OWORD *)&v11[v68 + 14];
          long long v76 = *(_OWORD *)&v11[v68 + 16];
          long long v77 = *(_OWORD *)&v11[v68 + 20];
          *((_OWORD *)v69 + 9) = *(_OWORD *)&v11[v68 + 18];
          *((_OWORD *)v69 + 10) = v77;
          *((_OWORD *)v69 + 7) = v75;
          *((_OWORD *)v69 + 8) = v76;
          long long v78 = *(_OWORD *)&v11[v68 + 22];
          long long v79 = *(_OWORD *)&v11[v68 + 24];
          long long v80 = *(_OWORD *)&v11[v68 + 26];
          *((double *)v69 + 28) = v11[v68 + 28];
          *((_OWORD *)v69 + 12) = v79;
          *((_OWORD *)v69 + 13) = v80;
          *((_OWORD *)v69 + 11) = v78;
          v68 += 29;
        }
        while (&v11[v68] != a2);
        if (v68 * 8)
        {
          long long v81 = &a6[v68 * 8];
          long long v82 = a6;
          while (a2 != (double *)a3)
          {
            if (a2[28] >= *((double *)v82 + 28))
            {
              long long v83 = *(_OWORD *)v82;
              long long v84 = *((_OWORD *)v82 + 2);
              *((_OWORD *)v11 + 1) = *((_OWORD *)v82 + 1);
              *((_OWORD *)v11 + 2) = v84;
              *(_OWORD *)long long v11 = v83;
              long long v85 = *((_OWORD *)v82 + 3);
              long long v86 = *((_OWORD *)v82 + 4);
              long long v87 = *((_OWORD *)v82 + 6);
              *((_OWORD *)v11 + 5) = *((_OWORD *)v82 + 5);
              *((_OWORD *)v11 + 6) = v87;
              *((_OWORD *)v11 + 3) = v85;
              *((_OWORD *)v11 + 4) = v86;
              long long v88 = *((_OWORD *)v82 + 7);
              long long v89 = *((_OWORD *)v82 + 8);
              long long v90 = *((_OWORD *)v82 + 10);
              *((_OWORD *)v11 + 9) = *((_OWORD *)v82 + 9);
              *((_OWORD *)v11 + 10) = v90;
              *((_OWORD *)v11 + 7) = v88;
              *((_OWORD *)v11 + 8) = v89;
              long long v91 = *((_OWORD *)v82 + 11);
              long long v92 = *((_OWORD *)v82 + 12);
              long long v93 = *((_OWORD *)v82 + 13);
              v11[28] = *((double *)v82 + 28);
              *((_OWORD *)v11 + 12) = v92;
              *((_OWORD *)v11 + 13) = v93;
              *((_OWORD *)v11 + 11) = v91;
              v82 += 232;
              v11 += 29;
              if (v81 == v82) {
                return result;
              }
            }
            else
            {
              long long v94 = *(_OWORD *)a2;
              long long v95 = *((_OWORD *)a2 + 2);
              *((_OWORD *)v11 + 1) = *((_OWORD *)a2 + 1);
              *((_OWORD *)v11 + 2) = v95;
              *(_OWORD *)long long v11 = v94;
              long long v96 = *((_OWORD *)a2 + 3);
              long long v97 = *((_OWORD *)a2 + 4);
              long long v98 = *((_OWORD *)a2 + 6);
              *((_OWORD *)v11 + 5) = *((_OWORD *)a2 + 5);
              *((_OWORD *)v11 + 6) = v98;
              *((_OWORD *)v11 + 3) = v96;
              *((_OWORD *)v11 + 4) = v97;
              long long v99 = *((_OWORD *)a2 + 7);
              long long v100 = *((_OWORD *)a2 + 8);
              long long v101 = *((_OWORD *)a2 + 10);
              *((_OWORD *)v11 + 9) = *((_OWORD *)a2 + 9);
              *((_OWORD *)v11 + 10) = v101;
              *((_OWORD *)v11 + 7) = v99;
              *((_OWORD *)v11 + 8) = v100;
              long long v102 = *((_OWORD *)a2 + 11);
              long long v103 = *((_OWORD *)a2 + 12);
              long long v104 = *((_OWORD *)a2 + 13);
              v11[28] = a2[28];
              *((_OWORD *)v11 + 12) = v103;
              *((_OWORD *)v11 + 13) = v104;
              *((_OWORD *)v11 + 11) = v102;
              a2 += 29;
              v11 += 29;
              if (v81 == v82) {
                return result;
              }
            }
          }
          return (double *)memmove(v11, v82, a6 - v82 + v68 * 8);
        }
      }
    }
    else if (a3 != (char *)a2)
    {
      uint64_t v39 = 0;
      do
      {
        long long v40 = &a6[v39 * 8];
        long long v41 = *(_OWORD *)&a2[v39];
        long long v42 = *(_OWORD *)&a2[v39 + 4];
        *((_OWORD *)v40 + 1) = *(_OWORD *)&a2[v39 + 2];
        *((_OWORD *)v40 + 2) = v42;
        *(_OWORD *)long long v40 = v41;
        long long v43 = *(_OWORD *)&a2[v39 + 6];
        long long v44 = *(_OWORD *)&a2[v39 + 8];
        long long v45 = *(_OWORD *)&a2[v39 + 12];
        *((_OWORD *)v40 + 5) = *(_OWORD *)&a2[v39 + 10];
        *((_OWORD *)v40 + 6) = v45;
        *((_OWORD *)v40 + 3) = v43;
        *((_OWORD *)v40 + 4) = v44;
        long long v46 = *(_OWORD *)&a2[v39 + 14];
        long long v47 = *(_OWORD *)&a2[v39 + 16];
        long long v48 = *(_OWORD *)&a2[v39 + 20];
        *((_OWORD *)v40 + 9) = *(_OWORD *)&a2[v39 + 18];
        *((_OWORD *)v40 + 10) = v48;
        *((_OWORD *)v40 + 7) = v46;
        *((_OWORD *)v40 + 8) = v47;
        long long v49 = *(_OWORD *)&a2[v39 + 22];
        long long v50 = *(_OWORD *)&a2[v39 + 24];
        long long v51 = *(_OWORD *)&a2[v39 + 26];
        *((double *)v40 + 28) = a2[v39 + 28];
        *((_OWORD *)v40 + 12) = v50;
        *((_OWORD *)v40 + 13) = v51;
        *((_OWORD *)v40 + 11) = v49;
        v39 += 29;
      }
      while (&a2[v39] != (double *)a3);
      if (v39 * 8)
      {
        long long v52 = (double *)&a6[v39 * 8];
        long long v53 = a3 - 232;
        while (a2 != v11)
        {
          double v54 = *(a2 - 1);
          double v55 = *(v52 - 1);
          if (v55 >= v54) {
            uint64_t v56 = (char *)(v52 - 29);
          }
          else {
            uint64_t v56 = (char *)(a2 - 29);
          }
          if (v55 >= v54) {
            v52 -= 29;
          }
          else {
            a2 -= 29;
          }
          long long v57 = *((_OWORD *)v56 + 6);
          long long v59 = *((_OWORD *)v56 + 3);
          long long v58 = *((_OWORD *)v56 + 4);
          *((_OWORD *)v53 + 5) = *((_OWORD *)v56 + 5);
          *((_OWORD *)v53 + 6) = v57;
          *((_OWORD *)v53 + 3) = v59;
          *((_OWORD *)v53 + 4) = v58;
          long long v60 = *((_OWORD *)v56 + 10);
          long long v62 = *((_OWORD *)v56 + 7);
          long long v61 = *((_OWORD *)v56 + 8);
          *((_OWORD *)v53 + 9) = *((_OWORD *)v56 + 9);
          *((_OWORD *)v53 + 10) = v60;
          *((_OWORD *)v53 + 7) = v62;
          *((_OWORD *)v53 + 8) = v61;
          long long v64 = *((_OWORD *)v56 + 12);
          long long v63 = *((_OWORD *)v56 + 13);
          long long v65 = *((_OWORD *)v56 + 11);
          *((void *)v53 + 28) = *((void *)v56 + 28);
          *((_OWORD *)v53 + 12) = v64;
          *((_OWORD *)v53 + 13) = v63;
          *((_OWORD *)v53 + 11) = v65;
          long long v66 = *(_OWORD *)v56;
          long long v67 = *((_OWORD *)v56 + 2);
          *((_OWORD *)v53 + 1) = *((_OWORD *)v56 + 1);
          *((_OWORD *)v53 + 2) = v67;
          *(_OWORD *)long long v53 = v66;
          v53 -= 232;
          if (v52 == (double *)a6) {
            return result;
          }
        }
        uint64_t v117 = 0;
        do
        {
          long long v118 = &v53[v117 * 8];
          long long v119 = *(_OWORD *)&v52[v117 - 29];
          long long v120 = *(_OWORD *)&v52[v117 - 25];
          *((_OWORD *)v118 + 1) = *(_OWORD *)&v52[v117 - 27];
          *((_OWORD *)v118 + 2) = v120;
          *(_OWORD *)long long v118 = v119;
          long long v121 = *(_OWORD *)&v52[v117 - 23];
          long long v122 = *(_OWORD *)&v52[v117 - 21];
          long long v123 = *(_OWORD *)&v52[v117 - 17];
          *((_OWORD *)v118 + 5) = *(_OWORD *)&v52[v117 - 19];
          *((_OWORD *)v118 + 6) = v123;
          *((_OWORD *)v118 + 3) = v121;
          *((_OWORD *)v118 + 4) = v122;
          long long v124 = *(_OWORD *)&v52[v117 - 15];
          long long v125 = *(_OWORD *)&v52[v117 - 13];
          long long v126 = *(_OWORD *)&v52[v117 - 9];
          *((_OWORD *)v118 + 9) = *(_OWORD *)&v52[v117 - 11];
          *((_OWORD *)v118 + 10) = v126;
          *((_OWORD *)v118 + 7) = v124;
          *((_OWORD *)v118 + 8) = v125;
          long long v127 = *(_OWORD *)&v52[v117 - 7];
          long long v128 = *(_OWORD *)&v52[v117 - 5];
          long long v129 = *(_OWORD *)&v52[v117 - 3];
          *((double *)v118 + 28) = v52[v117 - 1];
          *((_OWORD *)v118 + 12) = v128;
          *((_OWORD *)v118 + 13) = v129;
          *((_OWORD *)v118 + 11) = v127;
          v117 -= 29;
        }
        while (&v52[v117] != (double *)a6);
      }
    }
  }
  return result;
}

void *sub_CE9700(void *a1, void *a2)
{
  *a1 = *a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  sub_CE97D8(a1 + 1, a2[1], a2[2], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[2] - a2[1]) >> 4));
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  uint64_t v5 = (unsigned char *)a2[4];
  uint64_t v4 = (unsigned char *)a2[5];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    a1[4] = v7;
    a1[5] = v7;
    long long v8 = &v7[8 * (v6 >> 3)];
    a1[6] = v8;
    memcpy(v7, v5, v6);
    a1[5] = v8;
  }
  return a1;
}

void sub_CE97B0(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  sub_20AFAEC((void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_CE97D8(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x333333333333334) {
      sub_2E00();
    }
    long long v8 = (char *)operator new(80 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[80 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        sub_CE9980((uint64_t)&v8[v9], a2 + v9, 0x20uLL);
        v9 += 80;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_CE989C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_CE98B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 80)
  {
    uint64_t v13 = *(void **)(v10 - 8 + v11);
    if (v13) {
      free(v13);
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_CE98EC(&a9);
  _Unwind_Resume(a1);
}

void ***sub_CE98EC(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          int64_t v6 = (void *)*((void *)v4 - 1);
          if (v6) {
            free(v6);
          }
          v4 -= 80;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

float sub_CE9980(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(a1 + 16), 0)));
    *(unsigned char *)(a1 + 24) = 0;
    sub_CE9ABC(a1, a2, a3);
  }
  else
  {
    unint64_t v6 = 4;
    if (a3 > 4) {
      goto LABEL_5;
    }
    while (1)
    {
      float v7 = *(float *)(a1 + 16) * (float)v6;
      if (*(void *)(a2 + 48) - *(void *)(a2 + 40) < (unint64_t)v7) {
        break;
      }
      do
      {
LABEL_5:
        if ((v6 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v6 *= 2;
      }
      while (v6 < a3);
    }
    *(void *)(a1 + 56) = v6;
    float result = *(float *)(a1 + 20) * (float)v6;
    *(void *)a1 = (unint64_t)v7;
    *(void *)(a1 + 8) = (unint64_t)result;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_CE9AA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_CE9ABC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = *(void *)(a2 + 48) - *(void *)(a2 + 40);
  unint64_t v6 = 4;
  if (a3 <= 4) {
    goto LABEL_4;
  }
  do
  {
    do
    {
      if ((v6 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v6 *= 2;
    }
    while (v6 < a3);
LABEL_4:
    ;
  }
  while (v5 >= (unint64_t)(float)(*(float *)(a1 + 16) * (float)v6));
  sub_C74D8C(a1, v6);
  uint64_t v7 = *(void *)(a2 + 56);
  if (v7)
  {
    int v8 = *(_DWORD *)(a2 + 64);
    int v9 = *(_DWORD *)(a2 + 68);
    if (*(void *)(a2 + 40))
    {
      uint64_t v10 = 8 * v7;
      uint64_t v11 = *(_DWORD **)(a2 + 72);
      while (1)
      {
        int v12 = v11[1];
        if ((v8 != *v11 || v9 != v12) && (*(_DWORD *)(a2 + 32) != *v11 || *(_DWORD *)(a2 + 36) != v12)) {
          break;
        }
        v11 += 2;
        v10 -= 8;
        if (!v10) {
          goto LABEL_60;
        }
      }
    }
    else
    {
      uint64_t v40 = 8 * v7;
      uint64_t v11 = *(_DWORD **)(a2 + 72);
      while (v8 == *v11 && v9 == v11[1])
      {
        v11 += 2;
        v40 -= 8;
        if (!v40) {
          goto LABEL_60;
        }
      }
    }
  }
  else
  {
    uint64_t v11 = *(_DWORD **)(a2 + 72);
  }
  uint64_t v15 = *(void *)(a2 + 72) + 8 * v7;
  if (v11 != (_DWORD *)v15)
  {
    do
    {
      uint64_t v16 = *(void *)(a1 + 56) - 1;
      unint64_t v17 = __ROR8__(*(void *)v11, 32);
      unint64_t v18 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v17 ^ (v17 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v17 ^ (v17 >> 33))) >> 33));
      unint64_t v19 = v18 ^ (v18 >> 33);
      uint64_t v20 = *(void *)(a1 + 72);
      int v21 = *(_DWORD *)(a1 + 64);
      int v22 = *(_DWORD *)(a1 + 68);
      uint64_t v23 = v19 & v16;
      double v24 = (int *)(v20 + 8 * v23);
      int v26 = *v24;
      int v25 = v24[1];
      if (v21 != v26 || v22 != v25)
      {
        uint64_t v28 = 1;
        do
        {
          uint64_t v23 = (v23 + v28) & v16;
          long long v29 = (int *)(v20 + 8 * v23);
          int v31 = *v29;
          int v30 = v29[1];
          ++v28;
        }
        while (v21 != v31 || v22 != v30);
      }
      *(void *)(v20 + 8 * v23) = *(void *)v11;
      ++*(void *)(a1 + 48);
      long long v33 = v11 + 2;
      uint64_t v11 = (_DWORD *)v15;
      if (v33 != (_DWORD *)v15)
      {
        int v34 = *(_DWORD *)(a2 + 64);
        int v35 = *(_DWORD *)(a2 + 68);
        if (*(void *)(a2 + 40))
        {
          while (1)
          {
            int v36 = v33[1];
            if ((v34 != *v33 || v35 != v36) && (*(_DWORD *)(a2 + 32) != *v33 || *(_DWORD *)(a2 + 36) != v36)) {
              break;
            }
            v33 += 2;
            if (v33 == (_DWORD *)v15) {
              goto LABEL_21;
            }
          }
        }
        else
        {
          while (v34 == *v33 && v35 == v33[1])
          {
            v33 += 2;
            if (v33 == (_DWORD *)v15)
            {
LABEL_21:
              uint64_t v11 = (_DWORD *)v15;
              goto LABEL_22;
            }
          }
        }
        uint64_t v11 = v33;
      }
LABEL_22:
      ;
    }
    while (v11 != (_DWORD *)(*(void *)(a2 + 72) + 8 * *(void *)(a2 + 56)));
  }
LABEL_60:
  ++*(_DWORD *)(a1 + 28);
}

void sub_CE9D18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_CE9D2C(char **a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    sub_2E00();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v5 = 0x492492492492492;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x492492492492492) {
    sub_188D718();
  }
  uint64_t v7 = 56 * v5;
  int v8 = (char *)operator new(56 * v5);
  int v9 = &v8[56 * v3];
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = 0;
  uint64_t v10 = &v8[v7];
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)int v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v11;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  int v12 = v9 + 56;
  uint64_t v13 = *a1;
  long long v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    if (!v14) {
      return v12;
    }
    goto LABEL_25;
  }
  do
  {
    uint64_t v15 = *((void *)v14 - 7);
    v14 -= 56;
    *((void *)v9 - 7) = v15;
    v9 -= 56;
    *(_OWORD *)(v9 + 8) = *(_OWORD *)(v14 + 8);
    *((void *)v9 + 3) = *((void *)v14 + 3);
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *((void *)v14 + 3) = 0;
    *((_OWORD *)v9 + 2) = *((_OWORD *)v14 + 2);
    *((void *)v9 + 6) = *((void *)v14 + 6);
    *((void *)v14 + 4) = 0;
    *((void *)v14 + 5) = 0;
    *((void *)v14 + 6) = 0;
  }
  while (v14 != v13);
  uint64_t v16 = *a1;
  long long v14 = a1[1];
  *a1 = v9;
  a1[1] = v12;
  a1[2] = v10;
  if (v14 != v16)
  {
    do
    {
      unint64_t v18 = (void *)*((void *)v14 - 3);
      if (v18)
      {
        *((void *)v14 - 2) = v18;
        operator delete(v18);
      }
      uint64_t v19 = *((void *)v14 - 6);
      if (v19)
      {
        uint64_t v20 = *((void *)v14 - 5);
        unint64_t v17 = (void *)*((void *)v14 - 6);
        if (v20 != v19)
        {
          do
          {
            int v21 = *(void **)(v20 - 8);
            if (v21) {
              free(v21);
            }
            v20 -= 80;
          }
          while (v20 != v19);
          unint64_t v17 = (void *)*((void *)v14 - 6);
        }
        *((void *)v14 - 5) = v19;
        operator delete(v17);
      }
      v14 -= 56;
    }
    while (v14 != v16);
    long long v14 = v16;
  }
  if (v14) {
LABEL_25:
  }
    operator delete(v14);
  return v12;
}

void sub_CE9F14()
{
  byte_25E602F = 1;
  word_25E6018 = 65;
  byte_25E6047 = 1;
  word_25E6030 = 65;
  byte_25E605F = 8;
  strcpy((char *)&qword_25E6048, "any_mode");
  byte_25E6077 = 7;
  strcpy((char *)&dword_25E6060, "cycling");
  byte_25E608F = 7;
  strcpy((char *)&dword_25E6078, "driving");
  byte_25E60A7 = 7;
  strcpy((char *)&dword_25E6090, "walking");
  __int16 v3 = 17;
  strcpy(v2, "segment_curviness");
  __int16 v5 = 262;
  strcpy((char *)v4, "length");
  __int16 v7 = 529;
  strcpy(v6, "length_on_ferries");
  __int16 v9 = 789;
  strcpy(v8, "num_impeding_barriers");
  HIBYTE(v10[2]) = 16;
  strcpy((char *)v10, "num_name_changes");
  char v11 = 4;
  int v12 = operator new(0x20uLL);
  long long v13 = xmmword_20B8890;
  strcpy((char *)v12, "num_dangerous_zone_violations");
  char v14 = 5;
  uint64_t v15 = operator new(0x28uLL);
  long long v16 = xmmword_20B9390;
  strcpy((char *)v15, "num_terminal_use_zone_violations");
  char v17 = 6;
  __int16 v19 = 1806;
  strcpy((char *)v18, "traversal_time");
  HIBYTE(v20[2]) = 22;
  strcpy((char *)v20, "display_traversal_time");
  char v21 = 8;
  v22[0] = operator new(0x20uLL);
  v22[1] = &dword_1C + 3;
  unint64_t v23 = 0x8000000000000020;
  strcpy((char *)v22[0], "time_violating_avoid_busy_roads");
  char v24 = 9;
  v25[0] = operator new(0x20uLL);
  v25[1] = &dword_18 + 3;
  unint64_t v26 = 0x8000000000000020;
  strcpy((char *)v25[0], "time_violating_avoid_stairs");
  char v27 = 10;
  v28[0] = operator new(0x28uLL);
  v28[1] = &stru_20;
  unint64_t v29 = 0x8000000000000028;
  strcpy((char *)v28[0], "time_violating_avoid_steep_hills");
  char v30 = 11;
  strcpy((char *)v31, "time_on_dangerous_road");
  HIBYTE(v31[2]) = 22;
  char v32 = 12;
  HIBYTE(v33[2]) = 20;
  strcpy((char *)v33, "time_on_terminal_fow");
  char v34 = 13;
  uint64_t v0 = operator new(0x20uLL);
  unint64_t v36 = 0x8000000000000020;
  v35[0] = v0;
  v35[1] = &dword_18 + 3;
  strcpy((char *)v0, "time_on_pathway_fow_in_park");
  char v37 = 14;
  uint64_t v1 = operator new(0x20uLL);
  unint64_t v39 = 0x8000000000000020;
  v38[0] = v1;
  v38[1] = &dword_1C + 3;
  strcpy((char *)v1, "time_on_named_trail_fow_in_park");
  char v40 = 15;
  v41[0] = operator new(0x20uLL);
  unint64_t v42 = 0x8000000000000020;
  v41[1] = &dword_18 + 2;
  strcpy((char *)v41[0], "time_on_duplicate_segments");
  char v43 = 16;
  v44[0] = operator new(0x20uLL);
  unint64_t v45 = 0x8000000000000020;
  v44[1] = &dword_18 + 1;
  strcpy((char *)v44[0], "uses_contingency_terminal");
  char v46 = 17;
  *(_WORD *)((char *)&v47[2] + 7) = 4624;
  strcpy((char *)v47, "route_jaggedness");
  v48[0] = operator new(0x20uLL);
  unint64_t v49 = 0x8000000000000020;
  v48[1] = &dword_18 + 1;
  strcpy((char *)v48[0], "extra_elevation_change_cm");
  char v50 = 19;
  v51[0] = operator new(0x20uLL);
  unint64_t v52 = 0x8000000000000020;
  v51[1] = &dword_1C + 1;
  strcpy((char *)v51[0], "extra_elevation_violations_cm");
  char v53 = 20;
  *(_WORD *)((char *)&v54[2] + 7) = 5393;
  strcpy((char *)v54, "hiking_difficulty");
  *(_WORD *)((char *)&v55[2] + 7) = 5650;
  strcpy((char *)v55, "time_inside_a_park");
  v56[0] = operator new(0x20uLL);
  unint64_t v57 = 0x8000000000000020;
  v56[1] = &dword_18 + 3;
  strcpy((char *)v56[0], "normalized_park_probe_count");
  char v58 = 23;
  __p[0] = operator new(0x20uLL);
  unint64_t v60 = 0x8000000000000020;
  __p[1] = &dword_1C + 1;
  strcpy((char *)__p[0], "length_in_unsupported_regions");
  char v61 = 24;
  xmmword_25E60A8 = 0u;
  *(_OWORD *)&qword_25E60B8 = 0u;
  dword_25E60C8 = 1065353216;
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v2, (uint64_t)v2);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v4, (uint64_t)v4);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v6, (uint64_t)v6);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v8, (uint64_t)v8);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v10, (uint64_t)v10);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)&v12, (uint64_t)&v12);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)&v15, (uint64_t)&v15);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v18, (uint64_t)v18);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v20, (uint64_t)v20);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v22, (uint64_t)v22);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v25, (uint64_t)v25);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v28, (uint64_t)v28);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v31, (uint64_t)v31);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v33, (uint64_t)v33);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v35, (uint64_t)v35);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v38, (uint64_t)v38);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v41, (uint64_t)v41);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v44, (uint64_t)v44);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v47, (uint64_t)v47);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v48, (uint64_t)v48);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v51, (uint64_t)v51);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v54, (uint64_t)v54);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v55, (uint64_t)v55);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)v56, (uint64_t)v56);
  sub_CDC48C((uint64_t)&xmmword_25E60A8, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v60) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v57) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(v55[2]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((SHIBYTE(v57) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v56[0]);
  if ((SHIBYTE(v55[2]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(v54[2]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v55[0]);
  if ((SHIBYTE(v54[2]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SHIBYTE(v52) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v54[0]);
  if ((SHIBYTE(v52) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v49) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v51[0]);
  if ((SHIBYTE(v49) & 0x80000000) == 0)
  {
LABEL_7:
    if ((SHIBYTE(v47[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v48[0]);
  if ((SHIBYTE(v47[2]) & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v45) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v47[0]);
  if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v42) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v44[0]);
  if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v41[0]);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v36) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v38[0]);
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v33[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v35[0]);
  if ((SHIBYTE(v33[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v31[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v33[0]);
  if ((SHIBYTE(v31[2]) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v29) & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v31[0]);
  if ((SHIBYTE(v29) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v26) & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v28[0]);
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v23) & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v25[0]);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v20[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v22[0]);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if (((char)v19 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v20[0]);
  if (((char)v19 & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v16) & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v18[0]);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v15);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v10[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  operator delete(v12);
  if ((SHIBYTE(v10[2]) & 0x80000000) == 0)
  {
LABEL_22:
    if (((char)v9 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }
LABEL_47:
  operator delete(v10[0]);
  if (((char)v9 & 0x80000000) == 0)
  {
LABEL_23:
    if (((char)v7 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }
LABEL_48:
  operator delete(*(void **)v8);
  if (((char)v7 & 0x80000000) == 0)
  {
LABEL_24:
    if (((char)v5 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_50;
  }
LABEL_49:
  operator delete(*(void **)v6);
  if (((char)v5 & 0x80000000) == 0)
  {
LABEL_25:
    if (((char)v3 & 0x80000000) == 0) {
      return;
    }
LABEL_51:
    operator delete(*(void **)v2);
    return;
  }
LABEL_50:
  operator delete(v4[0]);
  if ((char)v3 < 0) {
    goto LABEL_51;
  }
}

void sub_CEA9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  char v21 = v19;
  while (1)
  {
    if (*((char *)v21 - 9) < 0) {
      operator delete(*(v21 - 4));
    }
    v21 -= 4;
    if (v21 == &a19) {
      _Unwind_Resume(a1);
    }
  }
}

double sub_CEAD10@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10AF640(a1, a2);
}

void sub_CEAD18()
{
  unk_25E60E7 = 16641;
  word_25E60D0 = 65;
  byte_25E60FF = 1;
  byte_25E60E9 = 0;
}

void sub_CEAD40()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  __int16 v3 = (void *)v0;
  uint64_t v4 = *(void *)sub_37D0C0(v1);
  sub_725D0((uint64_t)&v147);
  char v146 = 18;
  sub_D53E44(18, (uint64_t)v3, v2);
  __p[0].__r_.__value_.__r.__words[0] = 0;
  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)&off_2439090;
  sub_3E7814(&v142, (__n128 *)__p);
  unsigned __int8 v143 = 18;
  uint64_t v144 = v4;
  int v145 = 0;
  unsigned int v5 = sub_DB7034((uint64_t)v3);
  sub_DB6A08((uint64_t)v3, (uint64_t)v200);
  sub_494284(1, v5, (uint64_t)v200);
  long long v98 = (void *)v2;
  int v6 = sub_486A5C((uint64_t)v200);
  char v7 = 1;
  if (v6 != 3 && v6 != 5)
  {
    *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 19;
    strcpy((char *)__p, "TransportTypeChange");
    sub_710A8(18, (uint64_t)__p, v4);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    char v7 = 0;
  }
  v140[1] = 0;
  v140[0] = 0;
  long long v141 = 0;
  memset(__p, 0, 24);
  long long v137 = operator new(0x18uLL);
  long long v139 = (char *)v137 + 24;
  sub_CF23F4(v137, (uint64_t *)__p);
  long long v138 = (char *)v137 + 24;
  if (__p[0].__r_.__value_.__r.__words[0])
  {
    sub_C64384((uint64_t)__p, (void **)__p[0].__r_.__value_.__l.__data_);
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  v135[1] = 0;
  v135[0] = 0;
  uint64_t v136 = 0;
  v133[1] = 0;
  v133[0] = 0;
  uint64_t v134 = 0;
  v131[1] = 0;
  v131[0] = 0;
  uint64_t v132 = 0;
  v129[1] = 0;
  v129[0] = 0;
  uint64_t v130 = 0;
  v127[1] = 0;
  v127[0] = 0;
  uint64_t v128 = 0;
  long long v120 = 0u;
  long long v119 = 0u;
  long long v118 = 0u;
  *(_OWORD *)uint64_t v117 = 0u;
  LOBYTE(v120) = 1;
  BYTE5(v120) = 1;
  *(_DWORD *)((char *)&v120 + 6) = 0;
  *(_DWORD *)((char *)&v120 + 9) = 0;
  long long v121 = 0uLL;
  uint64_t v122 = 0;
  uint64_t v123 = 0xFFFFFFFFLL;
  uint64_t v126 = 0;
  long long v124 = 0;
  uint64_t v125 = 0;
  v115[1] = 0;
  v115[0] = 0;
  uint64_t v116 = 0;
  sub_11B16A4((uint64_t)v111, 0, 0);
  long long v114 = 0u;
  long long v113 = 0u;
  long long v112 = 0u;
  sub_162C594(v109, 0, 0);
  sub_162C594(&v110, 0, 0);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v3;
  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v146;
  __p[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v98;
  __p[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v200;
  HIBYTE(v202[0]) = 0;
  LOBYTE(v201[0]) = 0;
  sub_CF27C0((uint64_t)&v142, (uint64_t)__p, (uint64_t)v201, (uint64_t)v106);
  if (SHIBYTE(v202[0]) < 0)
  {
    operator delete(v201[0]);
    if (v106[0]) {
      goto LABEL_20;
    }
  }
  else if (v106[0])
  {
    goto LABEL_20;
  }
  int v8 = (void **)v107;
  if (v107)
  {
    __int16 v9 = v108;
    uint64_t v10 = v107;
    if (v108 != v107)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 4;
      }
      while (v9 != v8);
      uint64_t v10 = v107;
    }
    long long v108 = v8;
    operator delete(v10);
  }
LABEL_20:
  HIBYTE(v150[2]) = 0;
  LOBYTE(v150[0]) = 0;
  ++v145;
  v102[0] = 1;
  memset(v103, 0, sizeof(v103));
  __int16 v104 = 1;
  char v105 = 0;
  if ((void (***)(std::error_category *__hidden))v142.n128_u64[1] == &off_2439090 && !v142.n128_u32[0])
  {
    v201[0] = v3;
    LODWORD(v201[1]) = 0;
    v202[0] = v98;
    LOBYTE(v202[1]) = sub_DC5CDC(v201);
    LOBYTE(v204) = 0;
    sub_C9CA80((uint64_t)v201, (uint64_t)__p);
    sub_C9D2A4((uint64_t)v102, (uint64_t)__p);
    if (__p[0].__r_.__value_.__s.__data_[0])
    {
      std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
      if (__p[0].__r_.__value_.__l.__size_)
      {
        uint64_t v12 = __p[0].__r_.__value_.__r.__words[2];
        long long v13 = (void *)__p[0].__r_.__value_.__l.__size_;
        if (__p[0].__r_.__value_.__r.__words[2] != __p[0].__r_.__value_.__l.__size_)
        {
          do
          {
            v12 -= 376;
            sub_402C7C(v12);
          }
          while (v12 != size);
          long long v13 = (void *)__p[0].__r_.__value_.__l.__size_;
        }
        __p[0].__r_.__value_.__r.__words[2] = size;
LABEL_68:
        operator delete(v13);
      }
    }
    else
    {
      std::string::pointer data = __p[1].__r_.__value_.__l.__data_;
      if (__p[1].__r_.__value_.__r.__words[0])
      {
        char v20 = v7;
        std::string::size_type v21 = __p[1].__r_.__value_.__l.__size_;
        long long v13 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v21 - 1) < 0) {
              operator delete(*(void **)(v21 - 24));
            }
            v21 -= 32;
          }
          while ((std::string::pointer)v21 != data);
          long long v13 = __p[1].__r_.__value_.__l.__data_;
        }
        __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)data;
        char v7 = v20;
        goto LABEL_68;
      }
    }
    int v27 = v143;
    if (v102[0])
    {
      sub_CF2E84((uint64_t)&v103[24], (uint64_t)__p);
      sub_717B8(v27, (uint64_t)v150, (uint64_t)__p, v144);
      std::string::pointer v28 = __p[1].__r_.__value_.__l.__data_;
      if (__p[1].__r_.__value_.__r.__words[0])
      {
        std::string::size_type v29 = __p[1].__r_.__value_.__l.__size_;
        std::string::pointer v30 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v29 - 25) < 0) {
              operator delete(*(void **)(v29 - 48));
            }
            v29 -= 48;
          }
          while ((std::string::pointer)v29 != v28);
          std::string::pointer v30 = __p[1].__r_.__value_.__l.__data_;
        }
        __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v28;
        operator delete(v30);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      unint64_t v49 = v140[0];
      if (v140[0])
      {
        char v50 = v140[1];
        long long v51 = v140[0];
        if (v140[1] != v140[0])
        {
          do
            char v50 = (void *)sub_402C7C((uint64_t)v50 - 376);
          while (v50 != v49);
          long long v51 = v140[0];
        }
        v140[1] = v49;
        operator delete(v51);
      }
      *(_OWORD *)long long v140 = *(_OWORD *)v103;
      long long v141 = *(void **)&v103[16];
      memset(v103, 0, 24);
      if (SHIBYTE(v150[2]) < 0) {
        goto LABEL_52;
      }
      goto LABEL_94;
    }
    sub_71424(v143, (const std::error_condition *)v103, v144);
    *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 18;
    strcpy((char *)__p, "InternalError[All]");
    sub_710A8(v143, (uint64_t)__p, v144);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)__p);
      sub_70954(v143, (uint64_t)&v99, v31);
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v32 = &v99;
      }
      else {
        char v32 = (std::string *)v99.__r_.__value_.__r.__words[0];
      }
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v33 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v33 = v99.__r_.__value_.__l.__size_;
      }
      char v34 = sub_188FC78(__p, (uint64_t)v32, v33);
      sub_188FC78(v34, (uint64_t)" failed in step ", 16);
      int v35 = (void *)std::ostream::operator<<();
      unint64_t v36 = sub_188FC78(v35, (uint64_t)" (", 2);
      char v37 = (char *)operator new(0x28uLL);
      strcpy(v37, "InputPointTransformerModuleOutput");
      uint64_t v38 = sub_188FC78(v36, (uint64_t)v37, 33);
      unint64_t v39 = sub_188FC78(v38, (uint64_t)") with error: ", 14);
      sub_CF2D60(v39, (uint64_t)v103);
      operator delete(v37);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v99, 3u);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
      if (v208 < 0) {
        operator delete(v207);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    sub_3E7A10((uint64_t)&v142, (uint64_t)v103);
    goto LABEL_93;
  }
  sub_3E7814((__n128 *)v201, &v142);
  __p[0].__r_.__value_.__s.__data_[0] = 0;
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = *(_OWORD *)v201;
  *(_OWORD *)&__p[1].__r_.__value_.__l.__data_ = *(_OWORD *)v202;
  __p[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v203;
  v202[0] = 0;
  v202[1] = 0;
  v203 = 0;
  int v206 = (int)v204;
  sub_C9D2A4((uint64_t)v102, (uint64_t)__p);
  if (__p[0].__r_.__value_.__s.__data_[0])
  {
    std::string::size_type v14 = __p[0].__r_.__value_.__l.__size_;
    if (!__p[0].__r_.__value_.__l.__size_) {
      goto LABEL_49;
    }
    uint64_t v15 = __p[0].__r_.__value_.__r.__words[2];
    long long v16 = (void *)__p[0].__r_.__value_.__l.__size_;
    if (__p[0].__r_.__value_.__r.__words[2] != __p[0].__r_.__value_.__l.__size_)
    {
      do
      {
        v15 -= 376;
        sub_402C7C(v15);
      }
      while (v15 != v14);
      long long v16 = (void *)__p[0].__r_.__value_.__l.__size_;
    }
    __p[0].__r_.__value_.__r.__words[2] = v14;
  }
  else
  {
    std::string::pointer v17 = __p[1].__r_.__value_.__l.__data_;
    if (!__p[1].__r_.__value_.__r.__words[0]) {
      goto LABEL_49;
    }
    std::string::size_type v18 = __p[1].__r_.__value_.__l.__size_;
    long long v16 = __p[1].__r_.__value_.__l.__data_;
    if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v18 - 1) < 0) {
          operator delete(*(void **)(v18 - 24));
        }
        v18 -= 32;
      }
      while ((std::string::pointer)v18 != v17);
      long long v16 = __p[1].__r_.__value_.__l.__data_;
    }
    __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v17;
  }
  operator delete(v16);
LABEL_49:
  int v22 = (void **)v202[0];
  if (v202[0])
  {
    unint64_t v23 = (void **)v202[1];
    if (v202[1] == v202[0])
    {
      v202[1] = v202[0];
      operator delete(v202[0]);
      if (SHIBYTE(v150[2]) < 0) {
        goto LABEL_52;
      }
    }
    else
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 4;
      }
      while (v23 != v22);
      v202[1] = v22;
      operator delete(v202[0]);
      if (SHIBYTE(v150[2]) < 0)
      {
LABEL_52:
        operator delete(v150[0]);
        if (!v102[0]) {
          goto LABEL_53;
        }
        goto LABEL_95;
      }
    }
LABEL_94:
    if (!v102[0])
    {
LABEL_53:
      uint64_t v24 = *(void *)&v103[16];
      if (*(void *)&v103[16])
      {
        uint64_t v25 = *(void *)&v103[24];
        unint64_t v26 = *(void **)&v103[16];
        if (*(void *)&v103[24] != *(void *)&v103[16])
        {
          do
          {
            if (*(char *)(v25 - 1) < 0) {
              operator delete(*(void **)(v25 - 24));
            }
            v25 -= 32;
          }
          while (v25 != v24);
          unint64_t v26 = *(void **)&v103[16];
        }
        *(void *)&v103[24] = v24;
LABEL_100:
        operator delete(v26);
        goto LABEL_101;
      }
      goto LABEL_101;
    }
LABEL_95:
    uint64_t v40 = *(void *)v103;
    if (*(void *)v103)
    {
      uint64_t v41 = *(void *)&v103[8];
      unint64_t v26 = *(void **)v103;
      if (*(void *)&v103[8] != *(void *)v103)
      {
        do
        {
          v41 -= 376;
          sub_402C7C(v41);
        }
        while (v41 != v40);
        unint64_t v26 = *(void **)v103;
      }
      *(void *)&v103[8] = v40;
      goto LABEL_100;
    }
LABEL_101:
    *((unsigned char *)&v99.__r_.__value_.__s + 23) = 0;
    v99.__r_.__value_.__s.__data_[0] = 0;
    ++v145;
    v154[0] = 1;
    bzero(&v155, 0x360uLL);
    sub_47E0E4(&v155);
    int v158 = -1;
    v162[128] = 0;
    v162[264] = 0;
    long long v173 = 0u;
    long long v174 = 0u;
    long long v175 = 0u;
    *(void *)((char *)v172 + 5) = 0;
    v172[0] = 0;
    long long v159 = 0u;
    long long v160 = 0u;
    long long v161 = 0u;
    long long v163 = 0u;
    long long v164 = 0u;
    long long v165 = 0u;
    long long v166 = 0u;
    long long v167 = 0u;
    long long v168 = 0u;
    long long v169 = 0u;
    long long v170 = 0u;
    int v171 = 0;
    uint64_t v176 = 0x3FF0000000000000;
    uint64_t v178 = 0;
    uint64_t v177 = 0;
    uint64_t v179 = 0;
    char v180 = 5;
    long long v183 = 0u;
    long long v182 = 0u;
    long long v181 = 0u;
    int v184 = 0x7FFFFFFF;
    uint64_t v189 = 0;
    uint64_t v190 = 0;
    long long v187 = 0u;
    memset(v188, 0, sizeof(v188));
    long long v185 = 0u;
    long long v186 = 0u;
    uint64_t v191 = -1;
    int v192 = 0x7FFFFFFF;
    uint64_t v193 = 0;
    uint64_t v194 = -1;
    int v195 = -1;
    char v196 = 0;
    char v197 = 0;
    uint64_t v198 = 0;
    __int16 v199 = 0;
    if ((void (***)(std::error_category *__hidden))v142.n128_u64[1] != &off_2439090 || v142.n128_u32[0])
    {
      sub_3E7814((__n128 *)v201, &v142);
      __p[0].__r_.__value_.__s.__data_[0] = 0;
      *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = *(_OWORD *)v201;
      *(_OWORD *)&__p[1].__r_.__value_.__l.__data_ = *(_OWORD *)v202;
      __p[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v203;
      v202[0] = 0;
      v202[1] = 0;
      v203 = 0;
      int v206 = (int)v204;
      sub_CA0E94((uint64_t)v154, (unsigned __int8 *)__p);
      if (__p[0].__r_.__value_.__s.__data_[0])
      {
        sub_CA60E4((uint64_t)&__p[0].__r_.__value_.__l.__size_);
      }
      else
      {
        std::string::pointer v42 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__r.__words[0])
        {
          std::string::size_type v43 = __p[1].__r_.__value_.__l.__size_;
          std::string::pointer v44 = __p[1].__r_.__value_.__l.__data_;
          if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
          {
            do
            {
              if (*(char *)(v43 - 1) < 0) {
                operator delete(*(void **)(v43 - 24));
              }
              v43 -= 32;
            }
            while ((std::string::pointer)v43 != v42);
            std::string::pointer v44 = __p[1].__r_.__value_.__l.__data_;
          }
          __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v42;
          operator delete(v44);
        }
      }
      unint64_t v52 = (void **)v202[0];
      if (v202[0])
      {
        char v53 = (void **)v202[1];
        double v54 = v202[0];
        if (v202[1] != v202[0])
        {
          do
          {
            if (*((char *)v53 - 1) < 0) {
              operator delete(*(v53 - 3));
            }
            v53 -= 4;
          }
          while (v53 != v52);
          double v54 = v202[0];
        }
        v202[1] = v52;
        goto LABEL_158;
      }
    }
    else
    {
      sub_CF5040(v201, (void ***)v3, (uint64_t)v200, v98, 0);
      sub_C9E7F4((unsigned __int8 *)v201, (uint64_t)__p);
      sub_CA0E94((uint64_t)v154, (unsigned __int8 *)__p);
      if (__p[0].__r_.__value_.__s.__data_[0])
      {
        sub_CA60E4((uint64_t)&__p[0].__r_.__value_.__l.__size_);
      }
      else
      {
        std::string::pointer v45 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__r.__words[0])
        {
          char v46 = v7;
          std::string::size_type v47 = __p[1].__r_.__value_.__l.__size_;
          std::string::pointer v48 = __p[1].__r_.__value_.__l.__data_;
          if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
          {
            do
            {
              if (*(char *)(v47 - 1) < 0) {
                operator delete(*(void **)(v47 - 24));
              }
              v47 -= 32;
            }
            while ((std::string::pointer)v47 != v45);
            std::string::pointer v48 = __p[1].__r_.__value_.__l.__data_;
          }
          __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v45;
          operator delete(v48);
          char v7 = v46;
        }
      }
      if (v154[0])
      {
        int v55 = v143;
        sub_CF4E10((uint64_t)&v198, (uint64_t)__p);
        sub_717B8(v55, (uint64_t)&v99, (uint64_t)__p, v144);
        std::string::pointer v56 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__r.__words[0])
        {
          std::string::size_type v57 = __p[1].__r_.__value_.__l.__size_;
          std::string::pointer v58 = __p[1].__r_.__value_.__l.__data_;
          if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
          {
            do
            {
              if (*(char *)(v57 - 25) < 0) {
                operator delete(*(void **)(v57 - 48));
              }
              v57 -= 48;
            }
            while ((std::string::pointer)v57 != v56);
            std::string::pointer v58 = __p[1].__r_.__value_.__l.__data_;
          }
          __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v56;
          operator delete(v58);
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        sub_CA0FF4((uint64_t)v200, (uint64_t)v162);
        sub_EB6CAC((int64x2_t *)v137, (uint64_t)&v155, 1);
      }
      else if ((v7 & 1) == 0)
      {
        sub_488EF8((uint64_t)v200);
      }
      sub_CF5B18(v201);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      {
        double v54 = (void *)v99.__r_.__value_.__r.__words[0];
LABEL_158:
        operator delete(v54);
      }
    }
    if (v154[0])
    {
      sub_CA60E4((uint64_t)&v155);
    }
    else
    {
      long long v59 = (void **)v156;
      if (v156)
      {
        unint64_t v60 = v157;
        char v61 = v156;
        if (v157 != v156)
        {
          do
          {
            if (*((char *)v60 - 1) < 0) {
              operator delete(*(v60 - 3));
            }
            v60 -= 4;
          }
          while (v60 != v59);
          char v61 = v156;
        }
        long long v157 = v59;
        operator delete(v61);
      }
    }
    HIBYTE(v150[2]) = 0;
    LOBYTE(v150[0]) = 0;
    ++v145;
    v151[0] = 1;
    unsigned long long v152 = 0u;
    *(_OWORD *)long long v153 = 0u;
    if ((void (***)(std::error_category *__hidden))v142.n128_u64[1] == &off_2439090 && !v142.n128_u32[0])
    {
      sub_CF5DE4((uint64_t)v201, (uint64_t)v3, (uint64_t)v98, (uint64_t)v140);
      sub_C5CE5C((uint64_t)v201, (uint64_t)__p);
      sub_CF5C5C((uint64_t)v151, (uint64_t)__p);
      if (__p[0].__r_.__value_.__s.__data_[0])
      {
        std::string::size_type v62 = __p[0].__r_.__value_.__l.__size_;
        if (__p[0].__r_.__value_.__l.__size_)
        {
          uint64_t v63 = __p[0].__r_.__value_.__r.__words[2];
          long long v64 = (void *)__p[0].__r_.__value_.__l.__size_;
          if (__p[0].__r_.__value_.__r.__words[2] != __p[0].__r_.__value_.__l.__size_)
          {
            do
            {
              v63 -= 376;
              sub_402C7C(v63);
            }
            while (v63 != v62);
            long long v64 = (void *)__p[0].__r_.__value_.__l.__size_;
          }
          __p[0].__r_.__value_.__r.__words[2] = v62;
LABEL_215:
          operator delete(v64);
        }
      }
      else
      {
        std::string::pointer v70 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__r.__words[0])
        {
          std::string::size_type v71 = __p[1].__r_.__value_.__l.__size_;
          long long v64 = __p[1].__r_.__value_.__l.__data_;
          if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
          {
            do
            {
              if (*(char *)(v71 - 1) < 0) {
                operator delete(*(void **)(v71 - 24));
              }
              v71 -= 32;
            }
            while ((std::string::pointer)v71 != v70);
            long long v64 = __p[1].__r_.__value_.__l.__data_;
          }
          __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v70;
          goto LABEL_215;
        }
      }
      int v78 = v143;
      if (v151[0])
      {
        memset(__p, 0, sizeof(__p));
        std::string::assign(__p, "CyclingCoverageCheckModule");
        v99.__r_.__value_.__s.__data_[0] = 1;
        std::string::size_type v79 = __p[1].__r_.__value_.__l.__size_;
        if (__p[1].__r_.__value_.__l.__size_ >= __p[1].__r_.__value_.__r.__words[2])
        {
          std::string::size_type v80 = sub_C947F8((uint64_t *)&__p[1], "Runtime", (char *)&v99, (uint64_t *)&v153[1]);
        }
        else
        {
          sub_C949C8((int)&__p[1].__r_.__value_.__r.__words[2], __p[1].__r_.__value_.__l.__size_, "Runtime", (char *)&v99, (uint64_t *)&v153[1]);
          std::string::size_type v80 = v79 + 48;
        }
        __p[1].__r_.__value_.__l.__size_ = v80;
        sub_717B8(v78, (uint64_t)v150, (uint64_t)__p, v144);
        std::string::pointer v92 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__r.__words[0])
        {
          std::string::size_type v93 = __p[1].__r_.__value_.__l.__size_;
          std::string::pointer v94 = __p[1].__r_.__value_.__l.__data_;
          if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
          {
            do
            {
              if (*(char *)(v93 - 25) < 0) {
                operator delete(*(void **)(v93 - 48));
              }
              v93 -= 48;
            }
            while ((std::string::pointer)v93 != v92);
            std::string::pointer v94 = __p[1].__r_.__value_.__l.__data_;
          }
          __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v92;
          operator delete(v94);
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        long long v95 = v140[0];
        if (v140[0])
        {
          long long v96 = v140[1];
          long long v97 = v140[0];
          if (v140[1] != v140[0])
          {
            do
              long long v96 = (void *)sub_402C7C((uint64_t)v96 - 376);
            while (v96 != v95);
            long long v97 = v140[0];
          }
          v140[1] = v95;
          operator delete(v97);
        }
        *(_OWORD *)long long v140 = v152;
        long long v141 = v153[0];
        *((void *)&v152 + 1) = 0;
        v153[0] = 0;
        *(void *)&unsigned long long v152 = 0;
        sub_CF619C(v201);
        if (SHIBYTE(v150[2]) < 0) {
          goto LABEL_236;
        }
LABEL_207:
        if (!v151[0])
        {
LABEL_237:
          long long v90 = (void **)v153[0];
          if (!v153[0]) {
            goto LABEL_253;
          }
          long long v91 = (void **)v153[1];
          long long v77 = v153[0];
          if (v153[1] != v153[0])
          {
            do
            {
              if (*((char *)v91 - 1) < 0) {
                operator delete(*(v91 - 3));
              }
              v91 -= 4;
            }
            while (v91 != v90);
            long long v77 = v153[0];
          }
          v153[1] = v90;
LABEL_252:
          operator delete(v77);
LABEL_253:
          HIBYTE(v149) = 0;
          LOBYTE(v148[0]) = 0;
          ++v145;
          char v100 = 1;
          sub_CF6378((uint64_t)&v101);
        }
LABEL_208:
        long long v75 = (const std::error_category *)v152;
        if (!(void)v152) {
          goto LABEL_253;
        }
        long long v76 = (const std::error_category *)*((void *)&v152 + 1);
        long long v77 = (void *)v152;
        if (*((void *)&v152 + 1) != (void)v152)
        {
          do
          {
            v76 -= 47;
            sub_402C7C((uint64_t)v76);
          }
          while (v76 != v75);
          long long v77 = (void *)v152;
        }
        *((void *)&v152 + 1) = v75;
        goto LABEL_252;
      }
      sub_71424(v143, (const std::error_condition *)&v152, v144);
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 18;
      strcpy((char *)__p, "InternalError[All]");
      sub_710A8(v143, (uint64_t)__p, v144);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        sub_70954(v143, (uint64_t)&v99, v81);
        if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v82 = &v99;
        }
        else {
          long long v82 = (std::string *)v99.__r_.__value_.__r.__words[0];
        }
        if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v83 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v83 = v99.__r_.__value_.__l.__size_;
        }
        long long v84 = sub_188FC78(__p, (uint64_t)v82, v83);
        sub_188FC78(v84, (uint64_t)" failed in step ", 16);
        long long v85 = (void *)std::ostream::operator<<();
        long long v86 = sub_188FC78(v85, (uint64_t)" (", 2);
        long long v87 = (char *)operator new(0x20uLL);
        strcpy(v87, "CyclingCoverageCheckModule");
        long long v88 = sub_188FC78(v86, (uint64_t)v87, 26);
        long long v89 = sub_188FC78(v88, (uint64_t)") with error: ", 14);
        sub_CF2D60(v89, (uint64_t)&v152);
        operator delete(v87);
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v99, 3u);
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
        if (v208 < 0) {
          operator delete(v207);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10((uint64_t)&v142, (uint64_t)&v152);
      sub_CF619C(v201);
      if ((SHIBYTE(v150[2]) & 0x80000000) == 0) {
        goto LABEL_207;
      }
LABEL_236:
      operator delete(v150[0]);
      if (!v151[0]) {
        goto LABEL_237;
      }
      goto LABEL_208;
    }
    sub_3E7814((__n128 *)v201, &v142);
    __p[0].__r_.__value_.__s.__data_[0] = 0;
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = *(_OWORD *)v201;
    *(_OWORD *)&__p[1].__r_.__value_.__l.__data_ = *(_OWORD *)v202;
    __p[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v203;
    v202[0] = 0;
    v202[1] = 0;
    v203 = 0;
    int v206 = (int)v204;
    sub_CF5C5C((uint64_t)v151, (uint64_t)__p);
    if (__p[0].__r_.__value_.__s.__data_[0])
    {
      std::string::size_type v65 = __p[0].__r_.__value_.__l.__size_;
      if (!__p[0].__r_.__value_.__l.__size_) {
        goto LABEL_198;
      }
      uint64_t v66 = __p[0].__r_.__value_.__r.__words[2];
      long long v67 = (void *)__p[0].__r_.__value_.__l.__size_;
      if (__p[0].__r_.__value_.__r.__words[2] != __p[0].__r_.__value_.__l.__size_)
      {
        do
        {
          v66 -= 376;
          sub_402C7C(v66);
        }
        while (v66 != v65);
        long long v67 = (void *)__p[0].__r_.__value_.__l.__size_;
      }
      __p[0].__r_.__value_.__r.__words[2] = v65;
    }
    else
    {
      std::string::pointer v68 = __p[1].__r_.__value_.__l.__data_;
      if (!__p[1].__r_.__value_.__r.__words[0]) {
        goto LABEL_198;
      }
      std::string::size_type v69 = __p[1].__r_.__value_.__l.__size_;
      long long v67 = __p[1].__r_.__value_.__l.__data_;
      if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v69 - 1) < 0) {
            operator delete(*(void **)(v69 - 24));
          }
          v69 -= 32;
        }
        while ((std::string::pointer)v69 != v68);
        long long v67 = __p[1].__r_.__value_.__l.__data_;
      }
      __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v68;
    }
    operator delete(v67);
LABEL_198:
    long long v72 = (void **)v202[0];
    if (v202[0])
    {
      long long v73 = (void **)v202[1];
      long long v74 = v202[0];
      if (v202[1] != v202[0])
      {
        do
        {
          if (*((char *)v73 - 1) < 0) {
            operator delete(*(v73 - 3));
          }
          v73 -= 4;
        }
        while (v73 != v72);
        long long v74 = v202[0];
      }
      v202[1] = v72;
      operator delete(v74);
    }
    if ((SHIBYTE(v150[2]) & 0x80000000) == 0) {
      goto LABEL_207;
    }
    goto LABEL_236;
  }
LABEL_93:
  if (SHIBYTE(v150[2]) < 0) {
    goto LABEL_52;
  }
  goto LABEL_94;
}

void sub_CF0C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&STACK[0x1DF0]);
  sub_CFE678((uint64_t)&STACK[0x23B0]);
  sub_CBC8A8((uint64_t)&a56);
  if (SLOBYTE(STACK[0x1117]) < 0) {
    operator delete((void *)STACK[0x1100]);
  }
  sub_162D64C(a11);
  sub_162D64C(&STACK[0x998]);
  sub_C8423C(&STACK[0xDF8]);
  sub_574530((void **)&STACK[0xF10]);
  sub_3C77C4((uint64_t)&STACK[0xF30]);
  sub_CF1A48((void ****)&STACK[0xFB0]);
  sub_C66564((void ***)&STACK[0xFD0]);
  sub_CF1A48((void ****)&STACK[0xFF0]);
  sub_C628C4((void ****)&STACK[0x1010]);
  sub_C7E6AC((void **)&STACK[0x1030]);
  sub_C628C4((void ****)&STACK[0x1048]);
  sub_401F88((void **)&STACK[0x1060]);
  sub_4BCC2C((uint64_t)&STACK[0x1B28]);
  sub_C7E3C8((uint64_t)&STACK[0x1080]);
  _Unwind_Resume(a1);
}

uint64_t sub_CF19B0(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    __int16 v3 = (void **)(a1 + 8);
    uint64_t v2 = *(void ***)(a1 + 8);
    if (v2)
    {
      sub_C686F8(a1 + 8, v2);
      uint64_t v4 = *v3;
LABEL_12:
      operator delete(v4);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v4 = *(void **)(a1 + 24);
      if (v6 != v5)
      {
        do
        {
          if (*(char *)(v6 - 1) < 0) {
            operator delete(*(void **)(v6 - 24));
          }
          v6 -= 32;
        }
        while (v6 != v5);
        uint64_t v4 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v5;
      goto LABEL_12;
    }
  }
  return a1;
}

void ****sub_CF1A48(void ****a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    __int16 v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 3;
      do
      {
        if (*v5)
        {
          sub_C8A9E8((uint64_t)v5, *v5);
          operator delete(*v5);
        }
        BOOL v6 = v5 == v2;
        v5 -= 3;
      }
      while (!v6);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_CF1ACC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6)
{
  char v11 = (long long *)sub_377D04(a4);
  char v63 = 1;
  sub_29E004((char *)__dst, v11);
  int v12 = sub_DB197C(a5, (uint64_t)__dst);
  long long v13 = (long long *)sub_377D04(a4);
  char v56 = 1;
  sub_29E004((char *)v50, v13);
  int v14 = sub_DB1E58(a5, (uint64_t)v50);
  unint64_t v35 = sub_DBB1D4(a5);
  int v36 = v15;
  sub_DA519C((uint64_t)v49, a4);
  uint64_t v47 = a5;
  int v48 = 0;
  uint64_t v46 = 0;
  uint64_t v45 = 0;
  sub_DA541C((uint64_t)v49, (uint64_t)&v47, &v45, (uint64_t *)&v33);
  char v16 = sub_DBE8AC(a5);
  sub_DB6A08(a5, (uint64_t)v44);
  int v17 = sub_487794((uint64_t)v44);
  std::string::size_type v18 = (long long *)sub_377D04(a4);
  char v43 = 1;
  sub_29E004((char *)v37, v18);
  sub_DC000C(a5, (uint64_t)v37, (uint64_t)v24);
  sub_CF1FC8(a1, a4, a3, a2, v12, v14, (uint64_t *)&v35, (uint64_t *)&v33, v16, v17, (uint64_t)v24);
  if (v32 < 0) {
    operator delete(__p);
  }
  if (v29)
  {
    std::string::pointer v30 = v29;
    operator delete(v29);
  }
  if (v27)
  {
    std::string::pointer v28 = v27;
    operator delete(v27);
  }
  if (v25)
  {
    unint64_t v26 = v25;
    operator delete(v25);
  }
  if (!v43) {
    goto LABEL_13;
  }
  if ((v42 & 0x80000000) == 0)
  {
    if ((v40 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_16;
  }
  operator delete(v41);
  if (v40 < 0)
  {
LABEL_16:
    operator delete(v39);
    if (v38 < 0) {
      goto LABEL_17;
    }
LABEL_13:
    sub_4BCC2C((uint64_t)v44);
    __int16 v19 = v33;
    if (!v33) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
LABEL_12:
  if ((v38 & 0x80000000) == 0) {
    goto LABEL_13;
  }
LABEL_17:
  operator delete(v37[0]);
  sub_4BCC2C((uint64_t)v44);
  __int16 v19 = v33;
  if (!v33) {
    goto LABEL_22;
  }
LABEL_18:
  uint64_t v20 = (uint64_t)v34;
  std::string::size_type v21 = v19;
  if (v34 != v19)
  {
    do
      uint64_t v20 = sub_402C7C(v20 - 376);
    while ((void *)v20 != v19);
    std::string::size_type v21 = v33;
  }
  char v34 = v19;
  operator delete(v21);
LABEL_22:
  if ((_BYTE)v46) {
    LOBYTE(v46) = 0;
  }
  if (!v56) {
    goto LABEL_28;
  }
  if ((v55 & 0x80000000) == 0)
  {
    if ((v53 & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_31;
  }
  operator delete(v54);
  if (v53 < 0)
  {
LABEL_31:
    operator delete(v52);
    if (v51 < 0) {
      goto LABEL_32;
    }
LABEL_28:
    if (!v63) {
      goto LABEL_36;
    }
LABEL_33:
    if (v62 < 0)
    {
      operator delete(v61);
      if ((v60 & 0x80000000) == 0)
      {
LABEL_35:
        if ((v58 & 0x80000000) == 0) {
          goto LABEL_36;
        }
LABEL_39:
        operator delete(__dst[0]);
        goto LABEL_36;
      }
    }
    else if ((v60 & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    operator delete(v59);
    if ((v58 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_39;
  }
LABEL_27:
  if ((v51 & 0x80000000) == 0) {
    goto LABEL_28;
  }
LABEL_32:
  operator delete(v50[0]);
  if (v63) {
    goto LABEL_33;
  }
LABEL_36:
  *(_OWORD *)(a1 + 288) = *a6;
  return a1;
}

void sub_CF1E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_CF1EE4((uint64_t)&a12);
  sub_CF1F54((uint64_t)&a39);
  sub_4BCC2C((uint64_t)&a49);
  sub_401F88(&a34);
  if (LOBYTE(STACK[0x410])) {
    LOBYTE(STACK[0x410]) = 0;
  }
  sub_CF1F54(v49 - 256);
  sub_CF1F54(v49 - 176);
  _Unwind_Resume(a1);
}

void sub_CF1E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  if (!LOBYTE(STACK[0x410])) {
    JUMPOUT(0xCF1E50);
  }
  JUMPOUT(0xCF1E4CLL);
}

void sub_CF1E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  if (!LOBYTE(STACK[0x410])) {
    JUMPOUT(0xCF1E50);
  }
  JUMPOUT(0xCF1E4CLL);
}

void sub_CF1E98()
{
  if (!LOBYTE(STACK[0x410])) {
    JUMPOUT(0xCF1E50);
  }
  JUMPOUT(0xCF1E4CLL);
}

void sub_CF1EA8()
{
}

void sub_CF1EB0()
{
}

void sub_CF1EB8()
{
}

void sub_CF1EC4()
{
}

void sub_CF1ECC()
{
}

void sub_CF1ED4(void *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  JUMPOUT(0xCF1E60);
}

uint64_t sub_CF1EE4(uint64_t a1)
{
  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    uint64_t v2 = *(void **)(a1 + 104);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 128));
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
LABEL_4:
  __int16 v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(void *)(a1 + 80) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    *(void *)(a1 + 16) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_CF1F54(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0)
    {
      operator delete(*(void **)(a1 + 48));
      if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      {
LABEL_4:
        if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        {
LABEL_5:
          *(unsigned char *)(a1 + 72) = 0;
          return a1;
        }
LABEL_9:
        operator delete(*(void **)a1);
        goto LABEL_5;
      }
    }
    else if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  return a1;
}

uint64_t sub_CF1FC8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6, uint64_t *a7, uint64_t *a8, char a9, int a10, uint64_t a11)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = a5;
  *(_DWORD *)(a1 + 16) = a6;
  uint64_t v13 = *a7;
  *(_DWORD *)(a1 + 28) = *((_DWORD *)a7 + 2);
  *(void *)(a1 + 20) = v13;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_CF216C(a1 + 32, *a8, a8[1], 0x51B3BEA3677D46CFLL * ((a8[1] - *a8) >> 3));
  *(unsigned char *)(a1 + 56) = a9;
  *(_DWORD *)(a1 + 60) = a10;
  char v14 = *(unsigned char *)(a11 + 4);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)a11;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 68) = v14;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  char v16 = *(unsigned char **)(a11 + 8);
  int v15 = *(unsigned char **)(a11 + 16);
  int64_t v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0) {
      sub_2E00();
    }
    std::string::size_type v18 = (char *)operator new(v15 - v16);
    *(void *)(a1 + 72) = v18;
    *(void *)(a1 + 80) = v18;
    __int16 v19 = &v18[4 * (v17 >> 2)];
    *(void *)(a1 + 88) = v19;
    memcpy(v18, v16, v17);
    *(void *)(a1 + 80) = v19;
  }
  long long v20 = *(_OWORD *)(a11 + 48);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a11 + 32);
  *(_OWORD *)(a1 + 112) = v20;
  sub_4BC93C(a1 + 128, (int *)(a11 + 64));
  uint64_t v21 = *(void *)(a11 + 160);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a11 + 168);
  *(void *)(a1 + 224) = v21;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)a3;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  sub_3E7BF4((unsigned char *)(a1 + 256), *(void *)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 5);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a3 + 40);
  return a1;
}

void sub_CF2128(_Unwind_Exception *a1)
{
  sub_CF1EE4(v2);
  sub_401F88(v1);
  _Unwind_Resume(a1);
}

void sub_CF2144(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 80) = v5;
    operator delete(v5);
  }
  sub_401F88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CF216C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0xAE4C415C9882BALL) {
      sub_2E00();
    }
    float result = (uint64_t)operator new(376 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 376 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        float result = sub_48381C(v8 + v9, a2 + v9);
        v9 += 376;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_CF2230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_CF2244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 376)
    sub_402C7C(v10 - 376 + v11);
  *(void *)(v9 + 8) = v10;
  sub_CF2274(&a9);
  _Unwind_Resume(a1);
}

void ***sub_CF2274(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    __int16 v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      uint64_t v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_402C7C(v4 - 376);
        while ((void *)v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_CF22FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 256);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 264);
    uint64_t v4 = *(void **)(a1 + 256);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 256);
    }
    *(void *)(a1 + 264) = v2;
    operator delete(v4);
  }
  if ((*(char *)(a1 + 215) & 0x80000000) == 0)
  {
    uint64_t v5 = *(void **)(a1 + 168);
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)(a1 + 192));
  uint64_t v5 = *(void **)(a1 + 168);
  if (v5)
  {
LABEL_11:
    *(void *)(a1 + 176) = v5;
    operator delete(v5);
  }
LABEL_12:
  BOOL v6 = *(void **)(a1 + 136);
  if (v6)
  {
    *(void *)(a1 + 144) = v6;
    operator delete(v6);
  }
  char v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(void *)(a1 + 80) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(void **)(a1 + 32);
    if (v9 != v8)
    {
      do
        uint64_t v9 = sub_402C7C(v9 - 376);
      while (v9 != v8);
      uint64_t v10 = *(void **)(a1 + 32);
    }
    *(void *)(a1 + 40) = v8;
    operator delete(v10);
  }
  return a1;
}

void *sub_CF23F4(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556) {
      sub_2E00();
    }
    uint64_t v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[6 * v7];
    a1[1] = sub_CF24D0(v3, v4, v5, v8);
  }
  return a1;
}

void sub_CF24A0(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1)
  {
    sub_C64384(v1, *(void ***)v1);
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_CF24D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  if (a2 != a3)
  {
    int64_t v6 = (long long *)(a2 + 24);
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      uint64_t v8 = (uint64_t)v6 - 24;
      sub_443D6C(v4, *((void *)v6 - 3), *((void *)v6 - 2), 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*((void *)v6 - 2) - *((void *)v6 - 3)) >> 3));
      uint64_t v9 = v4 + 3;
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v9, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        v4[5] = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v9 = v7;
      }
      uint64_t v4 = v11 + 6;
      v11 += 6;
      v6 += 3;
    }
    while (v8 + 48 != a3);
  }
  return v4;
}

void sub_CF25B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*v9)
  {
    sub_20AFBB0((uint64_t)v9, *v9);
    sub_CF25E8((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_CF25E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_CF25E8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_CF2634(*(void *)a1, **(void **)(a1 + 16), **(void ****)(a1 + 16), **(void **)(a1 + 8), **(void ****)(a1 + 8));
  }
  return a1;
}

void sub_CF2634(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5)
{
  if (a3 != a5)
  {
    int64_t v6 = a3;
    do
    {
      if (*((char *)v6 - 1) < 0)
      {
        operator delete(*(v6 - 3));
        uint64_t v8 = v6 - 6;
        uint64_t v9 = (void **)*(v6 - 6);
        if (v9)
        {
LABEL_10:
          uint64_t v10 = (void **)*(v6 - 5);
          long long v7 = v9;
          if (v10 != v9)
          {
            do
            {
              uint64_t v11 = *(v10 - 28);
              if (v11)
              {
                *(v10 - 27) = v11;
                operator delete(v11);
              }
              int v12 = *(v10 - 31);
              if (v12)
              {
                *(v10 - 30) = v12;
                operator delete(v12);
              }
              uint64_t v13 = *(v10 - 39);
              if (v13)
              {
                *(v10 - 38) = v13;
                operator delete(v13);
              }
              char v14 = *(v10 - 42);
              if (v14)
              {
                *(v10 - 41) = v14;
                operator delete(v14);
              }
              int v15 = (char *)*(v10 - 45);
              if (v15)
              {
                char v16 = (char *)*(v10 - 44);
                int64_t v17 = *(v10 - 45);
                if (v16 != v15)
                {
                  do
                  {
                    std::string::size_type v18 = (void *)*((void *)v16 - 3);
                    if (v18)
                    {
                      *((void *)v16 - 2) = v18;
                      operator delete(v18);
                    }
                    v16 -= 56;
                  }
                  while (v16 != v15);
                  int64_t v17 = *(v10 - 45);
                }
                *(v10 - 44) = v15;
                operator delete(v17);
              }
              __int16 v19 = *(v10 - 56);
              if (v19)
              {
                *(v10 - 55) = v19;
                operator delete(v19);
              }
              long long v20 = v10 - 59;
              if (*((char *)v10 - 449) < 0) {
                operator delete(*v20);
              }
              v10 -= 59;
            }
            while (v20 != v9);
            long long v7 = *v8;
          }
          *(v6 - 5) = v9;
          operator delete(v7);
        }
      }
      else
      {
        uint64_t v8 = v6 - 6;
        uint64_t v9 = (void **)*(v6 - 6);
        if (v9) {
          goto LABEL_10;
        }
      }
      int64_t v6 = v8;
    }
    while (v8 != a5);
  }
}

void sub_CF27C0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a4 = 1;
  *(unsigned char *)(a4 + 8) = 0;
  int64_t v6 = (std::error_condition *)(a4 + 8);
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) != &off_2439090 || *(_DWORD *)a1 != 0)
  {
    sub_3E7814(v35, (__n128 *)a1);
    unint64_t v8 = v35[2].n128_u64[0];
    unsigned __int32 v9 = v35[2].n128_u32[2];
    *(unsigned char *)(a4 + 8) = v35[0].n128_u8[0];
    *(void *)(a4 + 9) = *(unint64_t *)((char *)v35[0].n128_u64 + 1);
    *(void *)(a4 + 16) = v35[0].n128_u64[1];
    *(__n128 *)(a4 + 24) = v35[1];
    *(void *)(a4 + 40) = v8;
    *(_DWORD *)(a4 + 48) = v9;
    *(unsigned char *)a4 = 0;
    return;
  }
  uint64_t v11 = sub_CBAA38((uint64_t)v39, *(void *)a2, **(unsigned char **)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
  sub_CB9D7C(v11, (uint64_t)v35);
  unsigned __int8 v12 = v35[0].n128_u8[0];
  if (*(unsigned char *)a4)
  {
    if (v35[0].n128_u8[0])
    {
LABEL_8:
      *(unsigned char *)(a4 + 8) = v35[0].n128_u8[8];
      *(unsigned char *)a4 = v12;
LABEL_44:
      int v29 = *(unsigned __int8 *)(a1 + 48);
      memset(v35, 0, sizeof(v35));
      sub_717B8(v29, a3, (uint64_t)v35, *(void *)(a1 + 56));
      unint64_t v30 = v35[1].n128_u64[1];
      if (v35[1].n128_u64[1])
      {
        unint64_t v31 = v35[2].n128_u64[0];
        char v32 = (void *)v35[1].n128_u64[1];
        if (v35[2].n128_u64[0] != v35[1].n128_u64[1])
        {
          do
          {
            if (*(char *)(v31 - 25) < 0) {
              operator delete(*(void **)(v31 - 48));
            }
            v31 -= 48;
          }
          while (v31 != v30);
          char v32 = (void *)v35[1].n128_u64[1];
        }
        v35[2].n128_u64[0] = v30;
        operator delete(v32);
      }
      if (v35[1].n128_i8[7] < 0) {
        operator delete((void *)v35[0].n128_u64[0]);
      }
      return;
    }
    goto LABEL_16;
  }
  if (!v35[0].n128_u8[0])
  {
LABEL_16:
    std::error_condition *v6 = *(std::error_condition *)((char *)v35 + 8);
    *(__n128 *)(a4 + 24) = *(__n128 *)((char *)&v35[1] + 8);
    *(void *)(a4 + 40) = v35[2].n128_u64[1];
    v35[1].n128_u64[1] = 0;
    v35[2] = 0uLL;
    *(_DWORD *)(a4 + 48) = v36;
    *(unsigned char *)a4 = 0;
    goto LABEL_17;
  }
  uint64_t v13 = *(void *)(a4 + 24);
  if (!v13) {
    goto LABEL_8;
  }
  uint64_t v14 = *(void *)(a4 + 32);
  int v15 = *(void **)(a4 + 24);
  if (v14 != v13)
  {
    do
    {
      if (*(char *)(v14 - 1) < 0) {
        operator delete(*(void **)(v14 - 24));
      }
      v14 -= 32;
    }
    while (v14 != v13);
    int v15 = *(void **)(a4 + 24);
  }
  *(void *)(a4 + 32) = v13;
  operator delete(v15);
  int v28 = v35[0].n128_u8[0];
  *(unsigned char *)(a4 + 8) = v35[0].n128_u8[8];
  *(unsigned char *)a4 = v28;
  if (v28) {
    goto LABEL_44;
  }
LABEL_17:
  unint64_t v16 = v35[1].n128_u64[1];
  if (v35[1].n128_u64[1])
  {
    unint64_t v17 = v35[2].n128_u64[0];
    if (v35[2].n128_u64[0] == v35[1].n128_u64[1])
    {
      v35[2].n128_u64[0] = v35[1].n128_u64[1];
      operator delete((void *)v35[1].n128_u64[1]);
      if (*(unsigned char *)a4) {
        goto LABEL_44;
      }
    }
    else
    {
      do
      {
        if (*(char *)(v17 - 1) < 0) {
          operator delete(*(void **)(v17 - 24));
        }
        v17 -= 32;
      }
      while (v17 != v16);
      v35[2].n128_u64[0] = v16;
      operator delete((void *)v35[1].n128_u64[1]);
      if (*(unsigned char *)a4) {
        goto LABEL_44;
      }
    }
  }
  sub_71424(*(unsigned __int8 *)(a1 + 48), v6, *(void *)(a1 + 56));
  int v18 = *(unsigned __int8 *)(a1 + 48);
  v35[1].n128_u8[7] = 18;
  strcpy((char *)v35, "InternalError[All]");
  sub_710A8(v18, (uint64_t)v35, *(void *)(a1 + 56));
  if (v35[1].n128_i8[7] < 0) {
    operator delete((void *)v35[0].n128_u64[0]);
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v35);
    sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v33, v19);
    if ((v34 & 0x80u) == 0) {
      long long v20 = v33;
    }
    else {
      long long v20 = (void **)v33[0];
    }
    if ((v34 & 0x80u) == 0) {
      uint64_t v21 = v34;
    }
    else {
      uint64_t v21 = (uint64_t)v33[1];
    }
    int v22 = sub_188FC78(v35, (uint64_t)v20, v21);
    sub_188FC78(v22, (uint64_t)" failed in step ", 16);
    unint64_t v23 = (void *)std::ostream::operator<<();
    uint64_t v24 = sub_188FC78(v23, (uint64_t)" (", 2);
    uint64_t v25 = (char *)operator new(0x19uLL);
    strcpy(v25, "RequestValidationModule");
    unint64_t v26 = sub_188FC78(v24, (uint64_t)v25, 23);
    int v27 = sub_188FC78(v26, (uint64_t)") with error: ", 14);
    sub_CF2D60(v27, (uint64_t)v6);
    operator delete(v25);
    if ((char)v34 < 0) {
      operator delete(v33[0]);
    }
    std::stringbuf::str();
    sub_7246C((uint64_t *)v33, 3u);
    if ((char)v34 < 0) {
      operator delete(v33[0]);
    }
    if (v38 < 0) {
      operator delete(v37);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  sub_3E7A10(a1, (uint64_t)v6);
}

void sub_CF2CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_C5C9E0(v21);
  _Unwind_Resume(a1);
}

void sub_CF2D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_A3A4((uint64_t)va);
  sub_C5C9E0(v5);
  _Unwind_Resume(a1);
}

void sub_CF2D4C(_Unwind_Exception *a1)
{
  sub_C5C9E0(v1);
  _Unwind_Resume(a1);
}

void *sub_CF2D60(void *a1, uint64_t a2)
{
  uint64_t v4 = (const char *)(*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8));
  size_t v5 = strlen(v4);
  int64_t v6 = sub_188FC78(a1, (uint64_t)v4, v5);
  long long v7 = sub_188FC78(v6, (uint64_t)": ", 2);
  (*(void (**)(void **__return_ptr))(**(void **)(a2 + 8) + 48))(__p);
  if ((v12 & 0x80u) == 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    uint64_t v9 = v12;
  }
  else {
    uint64_t v9 = (uint64_t)__p[1];
  }
  sub_188FC78(v7, (uint64_t)v8, v9);
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_CF2E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_CF2E84(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "InputPointTransformerModule");
  size_t v5 = (unint64_t *)(a2 + 40);
  unint64_t v4 = *(void *)(a2 + 40);
  LOBYTE(v14) = 1;
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 >= v4)
  {
    unint64_t v7 = sub_C947F8((uint64_t *)(a2 + 24), "Runtime", (char *)&v14, (uint64_t *)a1);
  }
  else
  {
    sub_C949C8(a2 + 40, *(void *)(a2 + 32), "Runtime", (char *)&v14, (uint64_t *)a1);
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
  LOBYTE(v14) = 4;
  if (v7 >= *(void *)(a2 + 40))
  {
    unint64_t v8 = sub_CF3430((uint64_t *)(a2 + 24), "Origins", (char *)&v14, (uint64_t *)(a1 + 8));
  }
  else
  {
    sub_CF3600(a2 + 40, v7, "Origins", (char *)&v14, (uint64_t *)(a1 + 8));
    unint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v8;
  }
  *(void *)(a2 + 32) = v8;
  LOBYTE(v14) = 4;
  if (v8 >= *(void *)(a2 + 40))
  {
    unint64_t v9 = sub_CF376C((uint64_t *)(a2 + 24), "Reroute_Origins", (char *)&v14, (uint64_t *)(a1 + 16));
  }
  else
  {
    sub_CF393C(a2 + 40, v8, "Reroute_Origins", (char *)&v14, (uint64_t *)(a1 + 16));
    unint64_t v9 = v8 + 48;
    *(void *)(a2 + 32) = v9;
  }
  *(void *)(a2 + 32) = v9;
  LOBYTE(v14) = 4;
  if (v9 >= *(void *)(a2 + 40))
  {
    unint64_t v10 = sub_CF3AA8((uint64_t *)(a2 + 24), "Waypoints", (char *)&v14, (uint64_t *)(a1 + 24));
  }
  else
  {
    sub_CF3C78(a2 + 40, v9, "Waypoints", (char *)&v14, (uint64_t *)(a1 + 24));
    unint64_t v10 = v9 + 48;
    *(void *)(a2 + 32) = v10;
  }
  *(void *)(a2 + 32) = v10;
  LOBYTE(v14) = 4;
  if (v10 >= *(void *)(a2 + 40))
  {
    unint64_t v11 = sub_CF3DE4((uint64_t *)(a2 + 24), "Destinations", (char *)&v14, (uint64_t *)(a1 + 32));
  }
  else
  {
    sub_CF3FB4(a2 + 40, v10, "Destinations", (char *)&v14, (uint64_t *)(a1 + 32));
    unint64_t v11 = v10 + 48;
    *(void *)(a2 + 32) = v11;
  }
  *(void *)(a2 + 32) = v11;
  LOBYTE(v14) = 4;
  if (v11 >= *(void *)(a2 + 40))
  {
    unint64_t v12 = sub_CF376C((uint64_t *)(a2 + 24), "TransitEntities", (char *)&v14, (uint64_t *)(a1 + 40));
    *(void *)(a2 + 32) = v12;
    if (!*(unsigned char *)(a1 + 49))
    {
LABEL_18:
      if (!*(unsigned char *)(a1 + 48)) {
        goto LABEL_19;
      }
LABEL_27:
      char v15 = 4;
      unsigned int v14 = 1;
      if (v12 >= *v5)
      {
        unint64_t v12 = sub_CF445C((uint64_t *)(a2 + 24), "NoPlaceResponse", &v15, &v14);
        *(void *)(a2 + 32) = v12;
        if (*(unsigned char *)(a1 + 50)) {
          goto LABEL_31;
        }
      }
      else
      {
        sub_CF462C(a2 + 40, v12, "NoPlaceResponse", &v15, &v14);
        v12 += 48;
        *(void *)(a2 + 32) = v12;
        *(void *)(a2 + 32) = v12;
        if (*(unsigned char *)(a1 + 50)) {
          goto LABEL_31;
        }
      }
LABEL_20:
      if (!*(unsigned char *)(a1 + 51)) {
        return;
      }
      goto LABEL_35;
    }
  }
  else
  {
    sub_CF393C(a2 + 40, v11, "TransitEntities", (char *)&v14, (uint64_t *)(a1 + 40));
    unint64_t v12 = v11 + 48;
    *(void *)(a2 + 32) = v12;
    *(void *)(a2 + 32) = v12;
    if (!*(unsigned char *)(a1 + 49)) {
      goto LABEL_18;
    }
  }
  char v15 = 4;
  unsigned int v14 = 1;
  if (v12 >= *v5)
  {
    unint64_t v12 = sub_CF4120((uint64_t *)(a2 + 24), "NoPlaceSearchResponse", &v15, &v14);
    *(void *)(a2 + 32) = v12;
    if (*(unsigned char *)(a1 + 48)) {
      goto LABEL_27;
    }
  }
  else
  {
    sub_CF42F0(a2 + 40, v12, "NoPlaceSearchResponse", &v15, &v14);
    v12 += 48;
    *(void *)(a2 + 32) = v12;
    *(void *)(a2 + 32) = v12;
    if (*(unsigned char *)(a1 + 48)) {
      goto LABEL_27;
    }
  }
LABEL_19:
  if (!*(unsigned char *)(a1 + 50)) {
    goto LABEL_20;
  }
LABEL_31:
  char v15 = 4;
  unsigned int v14 = 1;
  if (v12 >= *v5)
  {
    unint64_t v12 = sub_CF4798((uint64_t *)(a2 + 24), "HasLocalWaypoints", &v15, &v14);
    *(void *)(a2 + 32) = v12;
    if (!*(unsigned char *)(a1 + 51)) {
      return;
    }
  }
  else
  {
    sub_CF4968(a2 + 40, v12, "HasLocalWaypoints", &v15, &v14);
    v12 += 48;
    *(void *)(a2 + 32) = v12;
    *(void *)(a2 + 32) = v12;
    if (!*(unsigned char *)(a1 + 51)) {
      return;
    }
  }
LABEL_35:
  char v15 = 4;
  unsigned int v14 = 1;
  if (v12 >= *v5)
  {
    uint64_t v13 = sub_CF4AD4((uint64_t *)(a2 + 24), "CrossesLocalArea", &v15, &v14);
  }
  else
  {
    sub_CF4CA4(a2 + 40, v12, "CrossesLocalArea", &v15, &v14);
    uint64_t v13 = v12 + 48;
    *(void *)(a2 + 32) = v12 + 48;
  }
  *(void *)(a2 + 32) = v13;
}

void sub_CF3318(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CF332C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CF341C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CF3430(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_CF3600(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  unsigned int v14 = (char *)*a1;
  char v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    int v18 = (char *)*a1;
    char v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      char v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_CF35EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CF3600(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_CF3758(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CF376C(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_CF393C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_CF3928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CF393C(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_CF3A94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CF3AA8(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_CF3C78(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_CF3C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CF3C78(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_CF3DD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CF3DE4(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_CF3FB4(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_CF3FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CF3FB4(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_CF410C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CF4120(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_CF42F0(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_CF42DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CF42F0(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_CF4448(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CF445C(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_CF462C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_CF4618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CF462C(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_CF4784(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CF4798(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_CF4968(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_CF4954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CF4968(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_CF4AC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CF4AD4(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_CF4CA4(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_CF4C90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CF4CA4(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_CF4DFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_CF4E10(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "DrivingPathDecoderModule");
  unint64_t v5 = (unint64_t *)(a2 + 40);
  unint64_t v4 = *(void *)(a2 + 40);
  char v12 = 1;
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 >= v4)
  {
    unint64_t v7 = sub_C947F8((uint64_t *)(a2 + 24), "Runtime", &v12, (uint64_t *)a1);
    *(void *)(a2 + 32) = v7;
    if (!*(unsigned char *)(a1 + 8))
    {
LABEL_3:
      if (!*(unsigned char *)(a1 + 9)) {
        return;
      }
      goto LABEL_10;
    }
  }
  else
  {
    sub_C949C8(a2 + 40, *(void *)(a2 + 32), "Runtime", &v12, (uint64_t *)a1);
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 32) = v7;
    if (!*(unsigned char *)(a1 + 8)) {
      goto LABEL_3;
    }
  }
  char v11 = 1;
  if (v7 >= *v5)
  {
    unint64_t v7 = sub_CF54A0((uint64_t *)(a2 + 24), "Runtime.Sky", &v11, (uint64_t *)a1);
    *(void *)(a2 + 32) = v7;
    if (!*(unsigned char *)(a1 + 9)) {
      return;
    }
  }
  else
  {
    sub_CF5670(a2 + 40, v7, "Runtime.Sky", &v11, (uint64_t *)a1);
    v7 += 48;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 32) = v7;
    if (!*(unsigned char *)(a1 + 9)) {
      return;
    }
  }
LABEL_10:
  char v10 = 4;
  unsigned int v9 = 1;
  if (v7 >= *v5)
  {
    uint64_t v8 = sub_CF57DC((uint64_t *)(a2 + 24), "Path.SingleSegment", &v10, &v9);
  }
  else
  {
    sub_CF59AC(a2 + 40, v7, "Path.SingleSegment", &v10, &v9);
    uint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v7 + 48;
  }
  *(void *)(a2 + 32) = v8;
}

void sub_CF4FD0(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CF4FE4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CF502C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void *sub_CF5040(void *a1, void ***a2, uint64_t a3, void *a4, int a5)
{
  *(unsigned char *)a1 = sub_DB7034((uint64_t)a2);
  *((_DWORD *)a1 + 1) = sub_65BD8();
  sub_DBE954(a2, a1 + 1);
  *((_DWORD *)a1 + 8) = sub_DC5C40((uint64_t)a2);
  a1[5] = sub_DB75B4((uint64_t)a2);
  sub_DBEA74((char *)a2, (uint64_t)(a1 + 6));
  sub_DC5CB4((uint64_t)a2, a4, (uint64_t)(a1 + 9));
  sub_DBBED8((uint64_t)a2, (uint64_t)(a1 + 13));
  a1[26] = 0x7FFFFFFFFFFFFFFFLL;
  sub_DBE244((uint64_t)a2, a1 + 27);
  sub_DBE4CC((uint64_t)a2, (char **)a1 + 30);
  a1[33] = a3;
  a1[34] = a4;
  char v10 = sub_DE7FB0(*(unsigned __int8 *)a1);
  if (a5) {
    char v11 = v10;
  }
  else {
    char v11 = 0;
  }
  *((unsigned char *)a1 + 280) = v11;
  uint64_t v12 = a1[34];
  HIBYTE(v28[2]) = 17;
  strcpy((char *)v28, "PathDecoderModule");
  long long __p = 0;
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v13 = sub_374CDC(v12, (uint64_t)v28, (uint64_t *)&__p);
  uint64_t v14 = (void **)__p;
  if (__p)
  {
    uint64_t v15 = v26;
    long long v16 = __p;
    if (v26 != __p)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      long long v16 = __p;
    }
    unint64_t v26 = v14;
    operator delete(v16);
  }
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  v28[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v28[1] = xmmword_20B9800;
  strcpy(v28[0], "enable_clipping_at_user_offset");
  uint64_t v17 = sub_5C4AC(v13, (uint64_t)v28);
  unint64_t v18 = *(unsigned __int8 ***)v17;
  __n128 v19 = *(unsigned __int8 ***)(v17 + 8);
  long long __p = a1;
  if (v18 == v19)
  {
    BOOL v21 = 0;
    if ((SHIBYTE(v28[2]) & 0x80000000) == 0) {
      goto LABEL_20;
    }
LABEL_23:
    operator delete(v28[0]);
    if (v21) {
      goto LABEL_21;
    }
LABEL_24:
    uint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_25;
  }
  do
  {
    BOOL v20 = sub_CF535C((unsigned __int8 **)&__p, v18);
    BOOL v21 = v20;
    v18 += 2;
    int v22 = v18 == v19 || v20;
  }
  while (v22 != 1);
  if (SHIBYTE(v28[2]) < 0) {
    goto LABEL_23;
  }
LABEL_20:
  if (!v21) {
    goto LABEL_24;
  }
LABEL_21:
  uint64_t v23 = sub_DC6EB0((uint64_t)a2);
LABEL_25:
  a1[26] = v23;
  return a1;
}

void sub_CF528C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v25 = *v23;
  if (*v23)
  {
    v19[31] = v25;
    operator delete(v25);
  }
  sub_47E060(v22);
  unint64_t v26 = (void *)v19[22];
  if (v26)
  {
    v19[23] = v26;
    operator delete(v26);
  }
  uint64_t v27 = *v21;
  if (*v21)
  {
    v19[10] = v27;
    operator delete(v27);
  }
  sub_1A668(v20);
  sub_1A668(v18);
  _Unwind_Resume(a1);
}

BOOL sub_CF535C(unsigned __int8 **a1, unsigned __int8 **a2)
{
  if (*((_DWORD *)a2 + 2))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  uint64_t v2 = *a2;
  sub_DE6CD8(**a1, (uint64_t)__p);
  uint64_t v3 = v2[23];
  if ((v3 & 0x80u) == 0) {
    unint64_t v4 = (void *)v2[23];
  }
  else {
    unint64_t v4 = (void *)*((void *)v2 + 1);
  }
  unint64_t v5 = v19;
  int v6 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  if (v4 == (void *)v5)
  {
    if ((v19 & 0x80u) == 0) {
      unint64_t v7 = __p;
    }
    else {
      unint64_t v7 = (void **)__p[0];
    }
    if ((v3 & 0x80) != 0)
    {
      BOOL v15 = memcmp(*(const void **)v2, v7, *((void *)v2 + 1)) == 0;
    }
    else
    {
      if (!v2[23])
      {
        BOOL v15 = 1;
        if (((char)v19 & 0x80000000) == 0) {
          return v15;
        }
        goto LABEL_26;
      }
      uint64_t v8 = v3 - 1;
      do
      {
        int v10 = *v2++;
        int v9 = v10;
        int v12 = *(unsigned __int8 *)v7;
        unint64_t v7 = (void **)((char *)v7 + 1);
        int v11 = v12;
        BOOL v14 = v8-- != 0;
        BOOL v15 = v9 == v11;
      }
      while (v9 == v11 && v14);
    }
    if ((v6 & 0x80000000) == 0) {
      return v15;
    }
  }
  else
  {
    BOOL v15 = 0;
    if (((char)v19 & 0x80000000) == 0) {
      return v15;
    }
  }
LABEL_26:
  operator delete(__p[0]);
  return v15;
}

uint64_t sub_CF54A0(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    int v11 = (char *)operator new(48 * v10);
  }
  else
  {
    int v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  BOOL v21 = &v11[48 * v10];
  sub_CF5670(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  BOOL v14 = (char *)*a1;
  BOOL v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    BOOL v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      BOOL v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_CF565C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CF5670(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_CF57C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CF57DC(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    int v11 = (char *)operator new(48 * v10);
  }
  else
  {
    int v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  BOOL v21 = &v11[48 * v10];
  sub_CF59AC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_CF5998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CF59AC(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_CF5B04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_CF5B18(void *a1)
{
  uint64_t v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[27];
  if (v3)
  {
    uint64_t v4 = a1[28];
    unint64_t v5 = (void *)a1[27];
    if (v4 != v3)
    {
      do
      {
        unint64_t v6 = *(void **)(v4 - 72);
        if (v6)
        {
          *(void *)(v4 - 64) = v6;
          operator delete(v6);
        }
        unint64_t v7 = *(void **)(v4 - 96);
        if (v7)
        {
          *(void *)(v4 - 88) = v7;
          operator delete(v7);
        }
        v4 -= 136;
      }
      while (v4 != v3);
      unint64_t v5 = (void *)a1[27];
    }
    a1[28] = v3;
    operator delete(v5);
  }
  uint64_t v8 = (void *)a1[22];
  if (v8)
  {
    a1[23] = v8;
    operator delete(v8);
  }
  size_t v9 = (void *)a1[9];
  if (v9)
  {
    a1[10] = v9;
    operator delete(v9);
  }
  uint64_t v10 = a1[6];
  if (v10)
  {
    uint64_t v11 = a1[7];
    char v12 = (void *)a1[6];
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0) {
          operator delete(*(void **)(v11 - 24));
        }
        v11 -= 24;
      }
      while (v11 != v10);
      char v12 = (void *)a1[6];
    }
    a1[7] = v10;
    operator delete(v12);
  }
  uint64_t v13 = a1[1];
  if (v13)
  {
    uint64_t v14 = a1[2];
    uint64_t v15 = (void *)a1[1];
    if (v14 != v13)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0) {
          operator delete(*(void **)(v14 - 24));
        }
        v14 -= 24;
      }
      while (v14 != v13);
      uint64_t v15 = (void *)a1[1];
    }
    a1[2] = v13;
    operator delete(v15);
  }
  return a1;
}

uint64_t sub_CF5C5C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      uint64_t v4 = (void *)(a2 + 8);
      unint64_t v5 = (void **)(a1 + 8);
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6)
      {
LABEL_27:
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        uint64_t v17 = *(void *)(a2 + 32);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        void *v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
        *(void *)(a1 + 32) = v17;
        goto LABEL_28;
      }
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v8 = *(void **)(a1 + 8);
      if (v7 != v6)
      {
        do
          uint64_t v7 = sub_402C7C(v7 - 376);
        while (v7 != v6);
        uint64_t v8 = *v5;
      }
      *(void *)(a1 + 16) = v6;
      size_t v9 = v8;
      goto LABEL_25;
    }
    char v12 = (void **)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v14 = (_OWORD *)(a2 + 8);
    if (v13)
    {
      uint64_t v15 = *(void *)(a1 + 16);
      long long v16 = *(void **)(a1 + 8);
      if (v15 != v13)
      {
        do
          uint64_t v15 = sub_402C7C(v15 - 376);
        while (v15 != v13);
        long long v16 = *v12;
      }
      *(void *)(a1 + 16) = v13;
      operator delete(v16);
    }
    *(_OWORD *)char v12 = *v14;
  }
  else
  {
    unint64_t v5 = (void **)(a1 + 8);
    uint64_t v4 = (void *)(a2 + 8);
    if (*(unsigned char *)a2)
    {
      uint64_t v10 = *(void *)(a1 + 24);
      if (!v10)
      {
LABEL_26:
        void *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
        goto LABEL_27;
      }
      uint64_t v11 = *(void *)(a1 + 32);
      size_t v9 = *(void **)(a1 + 24);
      if (v11 != v10)
      {
        do
        {
          if (*(char *)(v11 - 1) < 0) {
            operator delete(*(void **)(v11 - 24));
          }
          v11 -= 32;
        }
        while (v11 != v10);
        size_t v9 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v10;
LABEL_25:
      operator delete(v9);
      goto LABEL_26;
    }
    *(_OWORD *)unint64_t v5 = *(_OWORD *)v4;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
LABEL_28:
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

uint64_t sub_CF5DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a4;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 17) = sub_DB71DC(a2);
  *(_OWORD *)(a1 + 24) = 0u;
  unint64_t v5 = (void **)(a1 + 24);
  uint64_t v6 = (void **)(a1 + 48);
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v7 = (void **)(a1 + 72);
  uint64_t v8 = (void **)(a1 + 96);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v9 = *(void *)a1;
  v33[23] = 20;
  strcpy(v33, "CyclingCoverageCheck");
  long long __p = 0;
  unint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v10 = sub_374CDC(v9, (uint64_t)v33, (uint64_t *)&__p);
  sub_54214((uint64_t)v34, (uint64_t)v10);
  uint64_t v11 = (void **)__p;
  if (__p)
  {
    char v12 = v31;
    uint64_t v13 = __p;
    if (v31 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      uint64_t v13 = __p;
    }
    unint64_t v31 = v11;
    operator delete(v13);
  }
  if ((v33[23] & 0x80000000) != 0) {
    operator delete(*(void **)v33);
  }
  *(unsigned char *)(a1 + 18) = sub_29D62C(v34, (uint64_t)&xmmword_25E61C0);
  sub_5C308(v34, (uint64_t)&qword_25E6220, (uint64_t)v33);
  uint64_t v14 = (void **)*v5;
  if (*v5)
  {
    uint64_t v15 = *(void ***)(a1 + 32);
    long long v16 = *v5;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      long long v16 = *v5;
    }
    *(void *)(a1 + 32) = v14;
    operator delete(v16);
    void *v5 = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v33;
  *(void *)(a1 + 40) = *(void *)&v33[16];
  sub_5C308(v34, (uint64_t)&qword_25E6238, (uint64_t)v33);
  uint64_t v17 = (void **)*v7;
  if (*v7)
  {
    unint64_t v18 = *(void ***)(a1 + 80);
    unsigned __int8 v19 = *v7;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      unsigned __int8 v19 = *v7;
    }
    *(void *)(a1 + 80) = v17;
    operator delete(v19);
    *uint64_t v7 = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)v33;
  *(void *)(a1 + 88) = *(void *)&v33[16];
  sub_5C308(v34, (uint64_t)&xmmword_25E61F0, (uint64_t)v33);
  uint64_t v20 = (void **)*v6;
  if (*v6)
  {
    BOOL v21 = *(void ***)(a1 + 56);
    int v22 = *v6;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v20);
      int v22 = *v6;
    }
    *(void *)(a1 + 56) = v20;
    operator delete(v22);
    void *v6 = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v33;
  *(void *)(a1 + 64) = *(void *)&v33[16];
  sub_5C308(v34, (uint64_t)byte_25E6208, (uint64_t)v33);
  uint64_t v23 = (void **)*v8;
  if (*v8)
  {
    uint64_t v24 = *(void ***)(a1 + 104);
    uint64_t v25 = *v8;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v24 - 1) < 0) {
          operator delete(*(v24 - 3));
        }
        v24 -= 3;
      }
      while (v24 != v23);
      uint64_t v25 = *v8;
    }
    *(void *)(a1 + 104) = v23;
    operator delete(v25);
    *uint64_t v8 = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)v33;
  *(void *)(a1 + 112) = *(void *)&v33[16];
  unint64_t v26 = v35;
  if (v35)
  {
    do
    {
      int v29 = (void **)*v26;
      sub_55198((uint64_t)(v26 + 5));
      if (*((char *)v26 + 39) < 0) {
        operator delete(v26[2]);
      }
      operator delete(v26);
      unint64_t v26 = v29;
    }
    while (v29);
  }
  uint64_t v27 = v34[0];
  v34[0] = 0;
  if (v27) {
    operator delete(v27);
  }
  return a1;
}

void sub_CF6138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_5450C((uint64_t)va);
  sub_1A668(v8);
  sub_1A668(v11);
  sub_1A668(v10);
  sub_1A668(v9);
  _Unwind_Resume(a1);
}

void sub_CF617C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0xCF6154);
}

void *sub_CF619C(void *a1)
{
  uint64_t v2 = a1[12];
  if (v2)
  {
    uint64_t v3 = a1[13];
    uint64_t v4 = (void *)a1[12];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[12];
    }
    a1[13] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[9];
  if (v5)
  {
    uint64_t v6 = a1[10];
    uint64_t v7 = (void *)a1[9];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)a1[9];
    }
    a1[10] = v5;
    operator delete(v7);
  }
  uint64_t v8 = a1[6];
  if (v8)
  {
    uint64_t v9 = a1[7];
    uint64_t v10 = (void *)a1[6];
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0) {
          operator delete(*(void **)(v9 - 24));
        }
        v9 -= 24;
      }
      while (v9 != v8);
      uint64_t v10 = (void *)a1[6];
    }
    a1[7] = v8;
    operator delete(v10);
  }
  uint64_t v11 = a1[3];
  if (v11)
  {
    uint64_t v12 = a1[4];
    uint64_t v13 = (void *)a1[3];
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0) {
          operator delete(*(void **)(v12 - 24));
        }
        v12 -= 24;
      }
      while (v12 != v11);
      uint64_t v13 = (void *)a1[3];
    }
    a1[4] = v11;
    operator delete(v13);
  }
  return a1;
}

uint64_t *sub_CF62E8(uint64_t *a1)
{
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    uint64_t v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void **)(v3 - 40);
        if (v5)
        {
          *(void *)(v3 - 32) = v5;
          operator delete(v5);
        }
        v3 -= 112;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  if (a1[1])
  {
    sub_CD86D4(a1 + 1);
    operator delete((void *)a1[1]);
  }
  return a1;
}

void sub_CF6378(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  char v2 = 14;
  strcpy((char *)__p, "SnappingModule");
  sub_401FE8(a1 + 56, (long long *)__p);
}

void sub_CF6404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_20AFC04(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_CF6428(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  unsigned int v9 = sub_DB7034(a2);
  *(unsigned char *)(a1 + 32) = sub_DE7FB0(v9);
  int v10 = sub_DBB340(a2);
  if (v10) {
    LOBYTE(v10) = sub_37B490(a4);
  }
  *(unsigned char *)(a1 + 33) = v10;
  *(unsigned char *)(a1 + 34) = sub_DB6EEC(a2);
  *(unsigned char *)(a1 + 35) = sub_DB71DC(a2);
  *(unsigned char *)(a1 + 36) = sub_DB7530(a2);
  sub_DC44EC(a2, a1 + 40);
  unsigned __int8 v15 = (sub_DB6BEC(a2) >> 56) & 1;
  BOOL v14 = sub_DB72AC(a2);
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  sub_CF65B8((char **)&v12, 0x51B3BEA3677D46CFLL * ((a3[1] - *a3) >> 3));
  sub_CF68B4(*a3, a3[1], (uint64_t *)&v12, *((uint64_t *)&v12 + 1), (char *)&v14, &v15);
  if (*v8)
  {
    sub_CD86D4(v8);
    operator delete((void *)*v8);
    *uint64_t v8 = 0;
    v8[1] = 0;
    __n128 v8[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = v12;
  *(void *)(a1 + 24) = v13;
  return a1;
}

void sub_CF6570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_CD7F04(&a9);
  sub_C6CBE0(v10);
  sub_CD7F04(v9);
  _Unwind_Resume(a1);
}

void sub_CF65A4(_Unwind_Exception *a1)
{
  sub_CD7F04(v1);
  _Unwind_Resume(a1);
}

void sub_CF65B8(char **a1, unint64_t a2)
{
  char v2 = *a1;
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x186186186186187) {
    sub_2E00();
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = 168 * a2;
  uint64_t v6 = (char *)operator new(168 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_23;
  }
  uint64_t v9 = 0;
  do
  {
    int v10 = &v4[v9];
    uint64_t v11 = &v8[v9];
    *((_DWORD *)v11 - 42) = *(_DWORD *)&v4[v9 - 168];
    *((_OWORD *)v11 - 10) = *(_OWORD *)&v4[v9 - 160];
    long long v12 = *(_OWORD *)&v4[v9 - 144];
    long long v13 = *(_OWORD *)&v4[v9 - 128];
    long long v14 = *(_OWORD *)&v4[v9 - 112];
    *(_DWORD *)(v11 - 97) = *(_DWORD *)&v4[v9 - 97];
    *((_OWORD *)v11 - 8) = v13;
    *((_OWORD *)v11 - 7) = v14;
    *((_OWORD *)v11 - 9) = v12;
    *(_OWORD *)(v11 - 88) = *(_OWORD *)&v4[v9 - 88];
    *((void *)v11 - 9) = *(void *)&v4[v9 - 72];
    *((void *)v10 - 11) = 0;
    *((void *)v10 - 10) = 0;
    *((void *)v10 - 9) = 0;
    int v15 = *(_DWORD *)&v4[v9 - 64];
    *(v11 - 60) = v4[v9 - 60];
    *((_DWORD *)v11 - 16) = v15;
    *((_DWORD *)v11 - 14) = *(_DWORD *)&v4[v9 - 56];
    *((_OWORD *)v11 - 3) = *(_OWORD *)&v4[v9 - 48];
    *((void *)v11 - 4) = *(void *)&v4[v9 - 32];
    *((void *)v10 - 6) = 0;
    *((void *)v10 - 5) = 0;
    *((void *)v10 - 4) = 0;
    *(_OWORD *)(v11 - 24) = *(_OWORD *)&v4[v9 - 24];
    *((void *)v11 - 1) = *(void *)&v4[v9 - 8];
    *((void *)v10 - 3) = 0;
    *((void *)v10 - 2) = 0;
    *((void *)v10 - 1) = 0;
    v9 -= 168;
  }
  while (&v4[v9] != v2);
  long long v16 = *a1;
  char v2 = a1[1];
  *a1 = &v8[v9];
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v16)
  {
    do
    {
      uint64_t v17 = (void *)*((void *)v2 - 3);
      if (v17)
      {
        *((void *)v2 - 2) = v17;
        operator delete(v17);
      }
      uint64_t v18 = *((void *)v2 - 6);
      if (v18)
      {
        uint64_t v19 = *((void *)v2 - 5);
        uint64_t v20 = (void *)*((void *)v2 - 6);
        if (v19 != v18)
        {
          do
          {
            BOOL v21 = *(void **)(v19 - 32);
            if (v21)
            {
              *(void *)(v19 - 24) = v21;
              operator delete(v21);
            }
            v19 -= 104;
          }
          while (v19 != v18);
          uint64_t v20 = (void *)*((void *)v2 - 6);
        }
        *((void *)v2 - 5) = v18;
        operator delete(v20);
      }
      int v22 = (void *)*((void *)v2 - 11);
      if (v22)
      {
        *((void *)v2 - 10) = v22;
        operator delete(v22);
      }
      v2 -= 168;
    }
    while (v2 != v16);
    char v2 = v16;
  }
  if (v2)
  {
LABEL_23:
    operator delete(v2);
  }
}

void **sub_CF67C0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_CF67F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v1; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 168;
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void *)(i - 48);
    if (v5)
    {
      uint64_t v6 = *(void *)(i - 40);
      uint64_t v7 = *(void **)(i - 48);
      if (v6 != v5)
      {
        do
        {
          uint64_t v8 = *(void **)(v6 - 32);
          if (v8)
          {
            *(void *)(v6 - 24) = v8;
            operator delete(v8);
          }
          v6 -= 104;
        }
        while (v6 != v5);
        uint64_t v7 = *(void **)(i - 48);
      }
      *(void *)(i - 40) = v5;
      operator delete(v7);
    }
    uint64_t v9 = *(void **)(i - 88);
    if (v9)
    {
      *(void *)(i - 80) = v9;
      operator delete(v9);
    }
  }
}

uint64_t *sub_CF68B4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char *a5, unsigned __int8 *a6)
{
  if (a1 != a2)
  {
    uint64_t v11 = a1;
    do
    {
      sub_CD8044((uint64_t)v18, v11, *a5, *a6);
      long long v12 = sub_CF69DC(a3, a4, (uint64_t)v18);
      if (__p)
      {
        uint64_t v24 = __p;
        operator delete(__p);
      }
      long long v13 = (char *)v21;
      if (v21)
      {
        long long v14 = v22;
        int v15 = v21;
        if (v22 != v21)
        {
          do
          {
            long long v16 = (void *)*((void *)v14 - 4);
            if (v16)
            {
              *((void *)v14 - 3) = v16;
              operator delete(v16);
            }
            v14 -= 104;
          }
          while (v14 != v13);
          int v15 = v21;
        }
        int v22 = v13;
        operator delete(v15);
      }
      if (v19)
      {
        uint64_t v20 = v19;
        operator delete(v19);
      }
      a4 = (uint64_t)(v12 + 42);
      v11 += 376;
    }
    while (v11 != a2);
  }
  return a3;
}

void sub_CF69C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_CD7DD0((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_CF69DC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (a2 - *a1) / 168;
  uint64_t v8 = (_DWORD *)(*a1 + 168 * v7);
  unint64_t v9 = a1[2];
  if (v6 >= v9)
  {
    unint64_t v18 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v6 - v5) >> 3) + 1;
    if (v18 > 0x186186186186186) {
      sub_2E00();
    }
    unint64_t v19 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v9 - v5) >> 3);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0xC30C30C30C30C3) {
      unint64_t v20 = 0x186186186186186;
    }
    else {
      unint64_t v20 = v18;
    }
    char v42 = a1 + 2;
    if (v20)
    {
      if (v20 > 0x186186186186186) {
        sub_188D718();
      }
      BOOL v21 = (char *)operator new(168 * v20);
    }
    else
    {
      BOOL v21 = 0;
    }
    long long __p = v21;
    unint64_t v39 = &v21[168 * v7];
    char v40 = v39;
    uint64_t v41 = &v21[168 * v20];
    sub_CF6DD8((uint64_t)&__p, a3);
    uint64_t v8 = (_DWORD *)sub_CF711C(a1, &__p, (uint64_t)v8);
    uint64_t v27 = v39;
    while (1)
    {
      int v28 = v40;
      if (v40 == v27) {
        break;
      }
      v40 -= 168;
      int v29 = (void *)*((void *)v28 - 3);
      if (v29)
      {
        *((void *)v28 - 2) = v29;
        operator delete(v29);
      }
      uint64_t v30 = *((void *)v28 - 6);
      if (v30)
      {
        uint64_t v31 = *((void *)v28 - 5);
        uint64_t v32 = (void *)*((void *)v28 - 6);
        if (v31 != v30)
        {
          do
          {
            std::string::size_type v33 = *(void **)(v31 - 32);
            if (v33)
            {
              *(void *)(v31 - 24) = v33;
              operator delete(v33);
            }
            v31 -= 104;
          }
          while (v31 != v30);
          uint64_t v32 = (void *)*((void *)v28 - 6);
        }
        *((void *)v28 - 5) = v30;
        operator delete(v32);
      }
      unsigned __int8 v34 = (void *)*((void *)v28 - 11);
      if (v34)
      {
        *((void *)v28 - 10) = v34;
        operator delete(v34);
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    if (v8 != (_DWORD *)v6)
    {
      int v10 = v8 + 42;
      uint64_t v11 = v6 - 168;
      if (v6 < 0xA8)
      {
        a1[1] = v6;
        if ((_DWORD *)v6 == v10)
        {
LABEL_38:
          sub_CD8788((uint64_t)v8, a3);
          return v8;
        }
      }
      else
      {
        unint64_t v12 = v6 - 168;
        uint64_t v13 = a1[1];
        do
        {
          *(_DWORD *)uint64_t v13 = *(_DWORD *)v12;
          *(_OWORD *)(v13 + 8) = *(_OWORD *)(v12 + 8);
          long long v14 = *(_OWORD *)(v12 + 24);
          long long v15 = *(_OWORD *)(v12 + 40);
          long long v16 = *(_OWORD *)(v12 + 56);
          *(_DWORD *)(v13 + 71) = *(_DWORD *)(v12 + 71);
          *(_OWORD *)(v13 + 56) = v16;
          *(_OWORD *)(v13 + 40) = v15;
          *(_OWORD *)(v13 + 24) = v14;
          *(void *)(v13 + 88) = 0;
          *(void *)(v13 + 96) = 0;
          *(void *)(v13 + 80) = 0;
          *(_OWORD *)(v13 + 80) = *(_OWORD *)(v12 + 80);
          *(void *)(v13 + 96) = *(void *)(v12 + 96);
          *(void *)(v12 + 80) = 0;
          *(void *)(v12 + 88) = 0;
          *(void *)(v12 + 96) = 0;
          int v17 = *(_DWORD *)(v12 + 104);
          *(unsigned char *)(v13 + 108) = *(unsigned char *)(v12 + 108);
          *(_DWORD *)(v13 + 104) = v17;
          *(_DWORD *)(v13 + 112) = *(_DWORD *)(v12 + 112);
          *(void *)(v13 + 128) = 0;
          *(void *)(v13 + 136) = 0;
          *(void *)(v13 + 120) = 0;
          *(_OWORD *)(v13 + 120) = *(_OWORD *)(v12 + 120);
          *(void *)(v13 + 136) = *(void *)(v12 + 136);
          *(void *)(v12 + 120) = 0;
          *(void *)(v12 + 128) = 0;
          *(void *)(v12 + 136) = 0;
          *(void *)(v13 + 144) = 0;
          *(void *)(v13 + 152) = 0;
          *(void *)(v13 + 160) = 0;
          *(_OWORD *)(v13 + 144) = *(_OWORD *)(v12 + 144);
          *(void *)(v13 + 160) = *(void *)(v12 + 160);
          *(void *)(v12 + 144) = 0;
          *(void *)(v12 + 152) = 0;
          *(void *)(v12 + 160) = 0;
          v13 += 168;
          v12 += 168;
        }
        while (v12 < v6);
        a1[1] = v13;
        if ((_DWORD *)v6 == v10) {
          goto LABEL_38;
        }
      }
      uint64_t v35 = 8 * ((uint64_t)(v6 - (void)v10) >> 3);
      uint64_t v36 = 168 * v7 + v5 - 168;
      do
      {
        sub_CD8788(v11, v36 + v35);
        v11 -= 168;
        v35 -= 168;
      }
      while (v35);
      goto LABEL_38;
    }
    *uint64_t v8 = *(_DWORD *)a3;
    uint64_t v22 = v5 + 168 * v7;
    *(_OWORD *)(v22 + 8) = *(_OWORD *)(a3 + 8);
    long long v23 = *(_OWORD *)(a3 + 24);
    long long v24 = *(_OWORD *)(a3 + 40);
    long long v25 = *(_OWORD *)(a3 + 56);
    *(_DWORD *)(v22 + 71) = *(_DWORD *)(a3 + 71);
    *(_OWORD *)(v22 + 56) = v25;
    *(_OWORD *)(v22 + 40) = v24;
    *(_OWORD *)(v22 + 24) = v23;
    *(void *)(v22 + 88) = 0;
    *(void *)(v22 + 96) = 0;
    *(void *)(v22 + 80) = 0;
    *(_OWORD *)(v22 + 80) = *(_OWORD *)(a3 + 80);
    *(void *)(v22 + 96) = *(void *)(a3 + 96);
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    int v26 = *(_DWORD *)(a3 + 104);
    *(unsigned char *)(v22 + 108) = *(unsigned char *)(a3 + 108);
    *(_DWORD *)(v22 + 104) = v26;
    *(_DWORD *)(v22 + 112) = *(_DWORD *)(a3 + 112);
    *(void *)(v22 + 128) = 0;
    *(void *)(v22 + 136) = 0;
    *(void *)(v22 + 120) = 0;
    *(_OWORD *)(v22 + 120) = *(_OWORD *)(a3 + 120);
    *(void *)(v22 + 136) = *(void *)(a3 + 136);
    *(void *)(a3 + 120) = 0;
    *(void *)(a3 + 128) = 0;
    *(void *)(a3 + 136) = 0;
    *(void *)(v22 + 144) = 0;
    *(void *)(v22 + 152) = 0;
    *(void *)(v22 + 160) = 0;
    *(_OWORD *)(v22 + 144) = *(_OWORD *)(a3 + 144);
    *(void *)(v22 + 160) = *(void *)(a3 + 160);
    *(void *)(a3 + 144) = 0;
    *(void *)(a3 + 152) = 0;
    *(void *)(a3 + 160) = 0;
    a1[1] = (uint64_t)(v8 + 42);
  }
  return v8;
}

void sub_CF6DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_CF67C0((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_CF6DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)(a1 + 16);
  if (v4 == *(_DWORD **)(a1 + 24))
  {
    unint64_t v6 = *(unsigned char **)a1;
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= *(void *)a1)
    {
      unint64_t v12 = 0x9E79E79E79E79E7ALL * (((char *)v4 - v6) >> 3);
      if (v4 == (_DWORD *)v6) {
        unint64_t v12 = 1;
      }
      if (v12 >= 0x186186186186187) {
        sub_188D718();
      }
      unint64_t v13 = v12 >> 2;
      uint64_t v14 = 168 * v12;
      long long v15 = (char *)operator new(168 * v12);
      long long v16 = &v15[168 * v13];
      int v17 = &v15[v14];
      if (v4 == (_DWORD *)v5)
      {
        *(void *)a1 = v15;
        *(void *)(a1 + 8) = v16;
        *(void *)(a1 + 16) = v16;
        *(void *)(a1 + 24) = v17;
      }
      else
      {
        unint64_t v18 = (char *)v4 + (void)v16 - v5;
        uint64_t v19 = 168 * v13;
        do
        {
          unint64_t v20 = &v15[v19];
          *(_DWORD *)unint64_t v20 = *(_DWORD *)v5;
          *(_OWORD *)(v20 + 8) = *(_OWORD *)(v5 + 8);
          long long v21 = *(_OWORD *)(v5 + 24);
          long long v22 = *(_OWORD *)(v5 + 40);
          long long v23 = *(_OWORD *)(v5 + 56);
          *(_DWORD *)(v20 + 71) = *(_DWORD *)(v5 + 71);
          *(_OWORD *)(v20 + 56) = v23;
          *(_OWORD *)(v20 + 40) = v22;
          *(_OWORD *)(v20 + 24) = v21;
          *((_OWORD *)v20 + 5) = *(_OWORD *)(v5 + 80);
          *((void *)v20 + 12) = *(void *)(v5 + 96);
          *(void *)(v5 + 80) = 0;
          *(void *)(v5 + 88) = 0;
          *(void *)(v5 + 96) = 0;
          int v24 = *(_DWORD *)(v5 + 104);
          v20[108] = *(unsigned char *)(v5 + 108);
          *((_DWORD *)v20 + 26) = v24;
          *((_DWORD *)v20 + 28) = *(_DWORD *)(v5 + 112);
          *(_OWORD *)(v20 + 120) = *(_OWORD *)(v5 + 120);
          *((void *)v20 + 17) = *(void *)(v5 + 136);
          *(void *)(v5 + 120) = 0;
          *(void *)(v5 + 128) = 0;
          *(void *)(v5 + 136) = 0;
          *((_OWORD *)v20 + 9) = *(_OWORD *)(v5 + 144);
          *((void *)v20 + 20) = *(void *)(v5 + 160);
          *(void *)(v5 + 144) = 0;
          *(void *)(v5 + 152) = 0;
          *(void *)(v5 + 160) = 0;
          v19 += 168;
          v5 += 168;
        }
        while (v20 + 168 != v18);
        unint64_t v6 = *(unsigned char **)a1;
        uint64_t v25 = *(void *)(a1 + 8);
        uint64_t v26 = *(void *)(a1 + 16);
        *(void *)a1 = v15;
        *(void *)(a1 + 8) = v16;
        *(void *)(a1 + 16) = v18;
        *(void *)(a1 + 24) = v17;
        while (v26 != v25)
        {
          uint64_t v27 = *(void **)(v26 - 24);
          if (v27)
          {
            *(void *)(v26 - 16) = v27;
            operator delete(v27);
          }
          uint64_t v28 = *(void *)(v26 - 48);
          if (v28)
          {
            uint64_t v29 = *(void *)(v26 - 40);
            uint64_t v30 = *(void **)(v26 - 48);
            if (v29 != v28)
            {
              do
              {
                uint64_t v31 = *(void **)(v29 - 32);
                if (v31)
                {
                  *(void *)(v29 - 24) = v31;
                  operator delete(v31);
                }
                v29 -= 104;
              }
              while (v29 != v28);
              uint64_t v30 = *(void **)(v26 - 48);
            }
            *(void *)(v26 - 40) = v28;
            operator delete(v30);
          }
          uint64_t v32 = *(void **)(v26 - 88);
          if (v32)
          {
            *(void *)(v26 - 80) = v32;
            operator delete(v32);
          }
          v26 -= 168;
        }
      }
      if (v6) {
        operator delete(v6);
      }
      uint64_t v4 = *(_DWORD **)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if ((_DWORD *)v5 == v4)
      {
        unint64_t v11 = v5 - 168 * v9;
      }
      else
      {
        do
        {
          sub_CD8788(v5 + 168 * v10, v5);
          v5 += 168;
        }
        while ((_DWORD *)v5 != v4);
        uint64_t v4 = *(_DWORD **)(a1 + 8);
        unint64_t v11 = v5 + 168 * v10;
      }
      *(void *)(a1 + 8) = &v4[42 * v10];
      *(void *)(a1 + 16) = v11;
      uint64_t v4 = (_DWORD *)v11;
    }
  }
  _DWORD *v4 = *(_DWORD *)a2;
  *(_OWORD *)(v4 + 2) = *(_OWORD *)(a2 + 8);
  long long v33 = *(_OWORD *)(a2 + 24);
  long long v34 = *(_OWORD *)(a2 + 40);
  long long v35 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)((char *)v4 + 71) = *(_DWORD *)(a2 + 71);
  *(_OWORD *)(v4 + 14) = v35;
  *(_OWORD *)(v4 + 10) = v34;
  *(_OWORD *)(v4 + 6) = v33;
  *((void *)v4 + 11) = 0;
  *((void *)v4 + 12) = 0;
  *((void *)v4 + 10) = 0;
  *((_OWORD *)v4 + 5) = *(_OWORD *)(a2 + 80);
  *((void *)v4 + 12) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  int v36 = *(_DWORD *)(a2 + 104);
  *((unsigned char *)v4 + 108) = *(unsigned char *)(a2 + 108);
  v4[26] = v36;
  v4[28] = *(_DWORD *)(a2 + 112);
  *((void *)v4 + 16) = 0;
  *((void *)v4 + 17) = 0;
  *((void *)v4 + 15) = 0;
  *(_OWORD *)(v4 + 30) = *(_OWORD *)(a2 + 120);
  *((void *)v4 + 17) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *((void *)v4 + 18) = 0;
  *((void *)v4 + 19) = 0;
  *((void *)v4 + 20) = 0;
  __n128 result = *(__n128 *)(a2 + 144);
  *((__n128 *)v4 + 9) = result;
  *((void *)v4 + 20) = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a1 + 16) += 168;
  return result;
}

uint64_t sub_CF711C(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = result + v7;
      uint64_t v9 = a3 + v7;
      *(_DWORD *)(v8 - 168) = *(_DWORD *)(a3 + v7 - 168);
      *(_OWORD *)(v8 - 160) = *(_OWORD *)(a3 + v7 - 160);
      long long v10 = *(_OWORD *)(a3 + v7 - 144);
      long long v11 = *(_OWORD *)(a3 + v7 - 128);
      long long v12 = *(_OWORD *)(a3 + v7 - 112);
      *(_DWORD *)(v8 - 97) = *(_DWORD *)(a3 + v7 - 97);
      *(_OWORD *)(v8 - 128) = v11;
      *(_OWORD *)(v8 - 112) = v12;
      *(void *)(v8 - 80) = 0;
      *(void *)(v8 - 72) = 0;
      *(void *)(v8 - 88) = 0;
      *(_OWORD *)(v8 - 144) = v10;
      *(_OWORD *)(v8 - 88) = *(_OWORD *)(a3 + v7 - 88);
      *(void *)(v8 - 72) = *(void *)(a3 + v7 - 72);
      *(void *)(v9 - 88) = 0;
      *(void *)(v9 - 80) = 0;
      *(void *)(v9 - 72) = 0;
      int v13 = *(_DWORD *)(a3 + v7 - 64);
      *(unsigned char *)(v8 - 60) = *(unsigned char *)(a3 + v7 - 60);
      *(_DWORD *)(v8 - 64) = v13;
      int v14 = *(_DWORD *)(a3 + v7 - 56);
      *(void *)(v8 - 40) = 0;
      *(void *)(v8 - 32) = 0;
      *(void *)(v8 - 48) = 0;
      *(_OWORD *)(v8 - 48) = *(_OWORD *)(a3 + v7 - 48);
      *(_DWORD *)(v8 - 56) = v14;
      *(void *)(v8 - 32) = *(void *)(a3 + v7 - 32);
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 8) = 0;
      *(_OWORD *)(v8 - 24) = *(_OWORD *)(a3 + v7 - 24);
      *(void *)(v8 - 8) = *(void *)(a3 + v7 - 8);
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      v7 -= 168;
    }
    while (a3 + v7 != v5);
    uint64_t v6 = result + v7;
  }
  a2[1] = v6;
  uint64_t v15 = a1[1];
  uint64_t v16 = a2[2];
  if (v15 != a3)
  {
    do
    {
      *(_DWORD *)uint64_t v16 = *(_DWORD *)a3;
      *(_OWORD *)(v16 + 8) = *(_OWORD *)(a3 + 8);
      long long v17 = *(_OWORD *)(a3 + 24);
      long long v18 = *(_OWORD *)(a3 + 40);
      long long v19 = *(_OWORD *)(a3 + 56);
      *(_DWORD *)(v16 + 71) = *(_DWORD *)(a3 + 71);
      *(_OWORD *)(v16 + 56) = v19;
      *(_OWORD *)(v16 + 40) = v18;
      *(_OWORD *)(v16 + 24) = v17;
      *(void *)(v16 + 88) = 0;
      *(void *)(v16 + 96) = 0;
      *(void *)(v16 + 80) = 0;
      *(_OWORD *)(v16 + 80) = *(_OWORD *)(a3 + 80);
      *(void *)(v16 + 96) = *(void *)(a3 + 96);
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 88) = 0;
      *(void *)(a3 + 96) = 0;
      int v20 = *(_DWORD *)(a3 + 104);
      *(unsigned char *)(v16 + 108) = *(unsigned char *)(a3 + 108);
      *(_DWORD *)(v16 + 104) = v20;
      *(_DWORD *)(v16 + 112) = *(_DWORD *)(a3 + 112);
      *(void *)(v16 + 128) = 0;
      *(void *)(v16 + 136) = 0;
      *(void *)(v16 + 120) = 0;
      *(_OWORD *)(v16 + 120) = *(_OWORD *)(a3 + 120);
      *(void *)(v16 + 136) = *(void *)(a3 + 136);
      *(void *)(a3 + 120) = 0;
      *(void *)(a3 + 128) = 0;
      *(void *)(a3 + 136) = 0;
      *(void *)(v16 + 144) = 0;
      *(void *)(v16 + 152) = 0;
      *(void *)(v16 + 160) = 0;
      *(_OWORD *)(v16 + 144) = *(_OWORD *)(a3 + 144);
      *(void *)(v16 + 160) = *(void *)(a3 + 160);
      *(void *)(a3 + 144) = 0;
      *(void *)(a3 + 152) = 0;
      *(void *)(a3 + 160) = 0;
      v16 += 168;
      a3 += 168;
    }
    while (a3 != v15);
    uint64_t v6 = a2[1];
  }
  a2[2] = v16;
  uint64_t v21 = *a1;
  *a1 = v6;
  a2[1] = v21;
  uint64_t v22 = a1[1];
  a1[1] = a2[2];
  a2[2] = v22;
  uint64_t v23 = a1[2];
  a1[2] = a2[3];
  a2[3] = v23;
  *a2 = a2[1];
  return result;
}

uint64_t sub_CF7300(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      uint64_t v4 = (void *)(a2 + 8);
      uint64_t v5 = (void **)(a1 + 8);
      uint64_t v6 = *(void ****)(a1 + 8);
      if (v6)
      {
        uint64_t v7 = *(void ****)(a1 + 16);
        uint64_t v8 = *(void **)(a1 + 8);
        if (v7 != v6)
        {
          uint64_t v9 = v7 - 3;
          do
          {
            if (*v9)
            {
              sub_C64384((uint64_t)v9, *v9);
              operator delete(*v9);
            }
            BOOL v10 = v9 == v6;
            v9 -= 3;
          }
          while (!v10);
          uint64_t v8 = *v5;
        }
        *(void *)(a1 + 16) = v6;
        operator delete(v8);
        void *v5 = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
      }
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      uint64_t v20 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      void *v4 = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a1 + 32) = v20;
      goto LABEL_33;
    }
    long long v11 = (void **)(a1 + 8);
    uint64_t v16 = *(void ****)(a1 + 8);
    if (v16)
    {
      long long v17 = *(void ****)(a1 + 16);
      long long v18 = *(void **)(a1 + 8);
      if (v17 != v16)
      {
        long long v19 = v17 - 3;
        do
        {
          if (*v19)
          {
            sub_C64384((uint64_t)v19, *v19);
            operator delete(*v19);
          }
          BOOL v10 = v19 == v16;
          v19 -= 3;
        }
        while (!v10);
        long long v18 = *v11;
      }
      *(void *)(a1 + 16) = v16;
      operator delete(v18);
    }
    long long v21 = *(_OWORD *)(a2 + 8);
LABEL_32:
    *(_OWORD *)long long v11 = v21;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    goto LABEL_33;
  }
  long long v11 = (void **)(a1 + 8);
  long long v12 = (long long *)(a2 + 8);
  if (!*(unsigned char *)a2)
  {
    long long v21 = *v12;
    goto LABEL_32;
  }
  uint64_t v13 = *(void *)(a1 + 24);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void **)(a1 + 24);
    if (v14 != v13)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0) {
          operator delete(*(void **)(v14 - 24));
        }
        v14 -= 32;
      }
      while (v14 != v13);
      uint64_t v15 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v13;
    operator delete(v15);
  }
  char *v11 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v22 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)long long v12 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 32) = v22;
LABEL_33:
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

uint64_t sub_CF74EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 64);
    uint64_t v4 = *(void **)(a1 + 56);
    if (v3 != v2)
    {
      uint64_t v5 = *(void *)(a1 + 64);
      do
      {
        uint64_t v7 = *(void **)(v5 - 40);
        v5 -= 40;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 32) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *(void **)(a1 + 56);
    }
    *(void *)(a1 + 64) = v2;
    operator delete(v4);
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    BOOL v10 = *(void **)(a1 + 32);
    if (v9 != v8)
    {
      uint64_t v11 = *(void *)(a1 + 40);
      do
      {
        uint64_t v13 = *(void **)(v11 - 32);
        v11 -= 32;
        long long v12 = v13;
        if (v13)
        {
          *(void *)(v9 - 24) = v12;
          operator delete(v12);
        }
        uint64_t v9 = v11;
      }
      while (v11 != v8);
      BOOL v10 = *(void **)(a1 + 32);
    }
    *(void *)(a1 + 40) = v8;
    operator delete(v10);
  }
  uint64_t v14 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v14;
    operator delete(v14);
  }
  return a1;
}

uint64_t sub_CF75C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v9 = a1 + 32;
  uint64_t v10 = a1 + 56;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v11 = sub_37B3A8(a4);
  uint64_t v12 = *(void *)v11;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(v11 + 8);
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 92) = sub_DB6BEC(a2);
  *(_WORD *)(a1 + 100) = v13;
  *(unsigned char *)(a1 + 102) = v14;
  *(void *)(a1 + 104) = a4;
  *(void *)(a1 + 112) = sub_DBD840(a2);
  *(void *)(a1 + 120) = 0x7FFFFFFFFFFFFFFELL;
  *(_DWORD *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 132) = a5;
  sub_F5EBCC();
  uint64_t v15 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v15;
    operator delete(v15);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = v54;
  uint64_t v16 = v55;
  uint64_t v17 = v56;
  uint64_t v55 = 0;
  long long v54 = 0uLL;
  *(void *)(a1 + 16) = v16;
  *(void *)(a1 + 24) = v17;
  uint64_t v18 = *(void *)(a1 + 32);
  if (v18)
  {
    uint64_t v19 = *(void *)(a1 + 40);
    uint64_t v20 = *(void **)(a1 + 32);
    if (v19 != v18)
    {
      uint64_t v21 = *(void *)(a1 + 40);
      do
      {
        uint64_t v23 = *(void **)(v21 - 32);
        v21 -= 32;
        uint64_t v22 = v23;
        if (v23)
        {
          *(void *)(v19 - 24) = v22;
          operator delete(v22);
        }
        uint64_t v19 = v21;
      }
      while (v21 != v18);
      uint64_t v20 = *(void **)v9;
    }
    *(void *)(a1 + 40) = v18;
    operator delete(v20);
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
  }
  *(_OWORD *)(a1 + 32) = v59;
  *(void *)(a1 + 48) = v60;
  uint64_t v60 = 0;
  long long v59 = 0uLL;
  uint64_t v24 = *(void *)(a1 + 56);
  if (v24)
  {
    uint64_t v25 = *(void *)(a1 + 64);
    uint64_t v26 = *(void **)(a1 + 56);
    if (v25 != v24)
    {
      uint64_t v27 = *(void *)(a1 + 64);
      do
      {
        uint64_t v29 = *(void **)(v27 - 40);
        v27 -= 40;
        uint64_t v28 = v29;
        if (v29)
        {
          *(void *)(v25 - 32) = v28;
          operator delete(v28);
        }
        uint64_t v25 = v27;
      }
      while (v27 != v24);
      uint64_t v26 = *(void **)v10;
    }
    *(void *)(a1 + 64) = v24;
    operator delete(v26);
    *(void *)uint64_t v10 = 0;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
  }
  *(_OWORD *)(a1 + 56) = v61;
  *(void *)(a1 + 72) = v62;
  uint64_t v62 = 0;
  long long v61 = 0uLL;
  if (*(void *)a1 == *(void *)(a1 + 8) && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v52);
    sub_188FC78(v52, (uint64_t)"No CyclingQueryTerminalFactory could be created for origin", 58);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (SHIBYTE(v51) < 0) {
      operator delete(__p);
    }
    if (v53 < 0) {
      operator delete(v52[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v30 = *(void *)(a1 + 104);
  HIBYTE(v52[2]) = 18;
  strcpy((char *)v52, "CyclingPathFinding");
  long long __p = 0;
  char v50 = 0;
  uint64_t v51 = 0;
  uint64_t v31 = sub_374CDC(v30, (uint64_t)v52, (uint64_t *)&__p);
  uint64_t v32 = (void **)__p;
  if (__p)
  {
    long long v33 = v50;
    long long v34 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v33 - 1) < 0) {
          operator delete(*(v33 - 3));
        }
        v33 -= 3;
      }
      while (v33 != v32);
      long long v34 = __p;
    }
    char v50 = v32;
    operator delete(v34);
  }
  if (SHIBYTE(v52[2]) < 0) {
    operator delete(v52[0]);
  }
  HIBYTE(v52[2]) = 12;
  strcpy((char *)v52, "max_distance");
  uint64_t v35 = sub_561B0(v31, (uint64_t)v52);
  *(void *)(a1 + 120) = sub_A2D5F4(v35);
  if (SHIBYTE(v52[2]) < 0) {
    operator delete(v52[0]);
  }
  *(_DWORD *)(a1 + 128) = sub_CF7B34(a1, v31);
  uint64_t v36 = v61;
  if ((void)v61)
  {
    uint64_t v37 = *((void *)&v61 + 1);
    char v38 = (void *)v61;
    if (*((void *)&v61 + 1) != (void)v61)
    {
      uint64_t v39 = *((void *)&v61 + 1);
      do
      {
        uint64_t v41 = *(void **)(v39 - 40);
        v39 -= 40;
        char v40 = v41;
        if (v41)
        {
          *(void *)(v37 - 32) = v40;
          operator delete(v40);
        }
        uint64_t v37 = v39;
      }
      while (v39 != v36);
      char v38 = (void *)v61;
    }
    *((void *)&v61 + 1) = v36;
    operator delete(v38);
  }
  uint64_t v42 = v59;
  if ((void)v59)
  {
    uint64_t v43 = *((void *)&v59 + 1);
    std::string::pointer v44 = (void *)v59;
    if (*((void *)&v59 + 1) != (void)v59)
    {
      uint64_t v45 = *((void *)&v59 + 1);
      do
      {
        uint64_t v47 = *(void **)(v45 - 32);
        v45 -= 32;
        uint64_t v46 = v47;
        if (v47)
        {
          *(void *)(v43 - 24) = v46;
          operator delete(v46);
        }
        uint64_t v43 = v45;
      }
      while (v45 != v42);
      std::string::pointer v44 = (void *)v59;
    }
    *((void *)&v59 + 1) = v42;
    operator delete(v44);
  }
  if (v57)
  {
    char v58 = v57;
    operator delete(v57);
  }
  if ((void)v54)
  {
    *((void *)&v54 + 1) = v54;
    operator delete((void *)v54);
  }
  return a1;
}

void sub_CF7A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_CF7EAC((uint64_t)&a53);
  sub_591CA4(v55);
  sub_C64510(v54);
  std::string::size_type v57 = *(void **)v53;
  if (*(void *)v53)
  {
    *(void *)(v53 + 8) = v57;
    operator delete(v57);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_CF7B34(uint64_t a1, void *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 132);
  if (v2 == 1) {
    return 0;
  }
  if (v2 == 2)
  {
    if (*(void *)(a1 + 32) == *(void *)(a1 + 40) || *(void *)(a1 + 64) - *(void *)(a1 + 56) != 40) {
      return 1;
    }
    return 3;
  }
  uint64_t v6 = *(void *)(a1 + 104);
  HIBYTE(v26) = 7;
  strcpy((char *)&v25, "ETAPlan");
  uint64_t v23 = 0;
  long long v24 = 0uLL;
  uint64_t v7 = sub_374CDC(v6, (uint64_t)&v25, (uint64_t *)&v23);
  long long __p = operator new(0x28uLL);
  long long v22 = xmmword_20B8FD0;
  strcpy((char *)__p, "max_num_destinations_for_p2p_queries");
  unsigned int v8 = sub_31AC04(v7, (uint64_t)&__p);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p);
  }
  uint64_t v9 = (void **)v23;
  if (v23)
  {
    uint64_t v10 = (void **)v24;
    uint64_t v11 = v23;
    if ((void *)v24 != v23)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      uint64_t v11 = v23;
    }
    *(void *)&long long v24 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(v25);
    if (*(void *)(a1 + 32) == *(void *)(a1 + 40)) {
      goto LABEL_23;
    }
  }
  else if (*(void *)(a1 + 32) == *(void *)(a1 + 40))
  {
    goto LABEL_23;
  }
  if (*(void *)(a1 + 64) - *(void *)(a1 + 56) == 40) {
    return 3;
  }
LABEL_23:
  uint64_t v25 = operator new(0x20uLL);
  long long v26 = xmmword_20B8870;
  strcpy((char *)v25, "enable_via_node_algorithm");
  if (!sub_29D62C(a2, (uint64_t)&v25)
    || (uint64_t v12 = *(void *)(a1 + 56), v13 = *(void *)(a1 + 64), 0xCCCCCCCCCCCCCCCDLL * ((v13 - v12) >> 3) > v8))
  {
    BOOL v4 = 0;
    if ((SHIBYTE(v26) & 0x80000000) == 0) {
      return v4;
    }
LABEL_26:
    operator delete(v25);
    return v4;
  }
  if (v12 != v13)
  {
    for (uint64_t i = v12 + 40; i != v13; i += 40)
    {
      uint64_t v16 = *(void *)(v12 + 32);
      if (v16 != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v17 = *(void *)(i + 32);
        if (v16 < v17 || v17 == 0x7FFFFFFFFFFFFFFFLL) {
          uint64_t v12 = i;
        }
      }
    }
  }
  if (v12 == v13 || (uint64_t v19 = *(void *)(v12 + 32), v19 == 0x7FFFFFFFFFFFFFFFLL)) {
    uint64_t v19 = 0x7FFFFFFFFFFFFFFELL;
  }
  uint64_t v23 = operator new(0x19uLL);
  long long v24 = xmmword_20B9250;
  strcpy((char *)v23, "via_node_max_distance_m");
  uint64_t v20 = sub_5CDE0(a2, &v23);
  if (SHIBYTE(v24) < 0) {
    operator delete(v23);
  }
  BOOL v4 = v19 <= v20;
  if (SHIBYTE(v26) < 0) {
    goto LABEL_26;
  }
  return v4;
}

void sub_CF7E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if (a27 < 0)
    {
LABEL_5:
      operator delete(a22);
      _Unwind_Resume(a1);
    }
  }
  else if (a27 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_CF7EAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 168);
    BOOL v4 = *(void **)(a1 + 160);
    if (v3 != v2)
    {
      uint64_t v5 = *(void *)(a1 + 168);
      do
      {
        uint64_t v7 = *(void **)(v5 - 40);
        v5 -= 40;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 32) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      BOOL v4 = *(void **)(a1 + 160);
    }
    *(void *)(a1 + 168) = v2;
    operator delete(v4);
  }
  uint64_t v8 = *(void *)(a1 + 136);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 144);
    uint64_t v10 = *(void **)(a1 + 136);
    if (v9 != v8)
    {
      uint64_t v11 = *(void *)(a1 + 144);
      do
      {
        uint64_t v13 = *(void **)(v11 - 32);
        v11 -= 32;
        uint64_t v12 = v13;
        if (v13)
        {
          *(void *)(v9 - 24) = v12;
          operator delete(v12);
        }
        uint64_t v9 = v11;
      }
      while (v11 != v8);
      uint64_t v10 = *(void **)(a1 + 136);
    }
    *(void *)(a1 + 144) = v8;
    operator delete(v10);
  }
  char v14 = *(void **)(a1 + 104);
  if (v14)
  {
    *(void *)(a1 + 112) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v15;
    operator delete(v15);
  }
  return a1;
}

uint64_t sub_CF7F90(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void ****)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void ****)(a1 + 16);
      BOOL v4 = *(void **)(a1 + 8);
      if (v3 != v2)
      {
        uint64_t v5 = v3 - 3;
        do
        {
          if (*v5)
          {
            sub_C64384((uint64_t)v5, *v5);
            operator delete(*v5);
          }
          BOOL v6 = v5 == v2;
          v5 -= 3;
        }
        while (!v6);
        BOOL v4 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 16) = v2;
LABEL_18:
      operator delete(v4);
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 24);
    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      BOOL v4 = *(void **)(a1 + 24);
      if (v8 != v7)
      {
        do
        {
          if (*(char *)(v8 - 1) < 0) {
            operator delete(*(void **)(v8 - 24));
          }
          v8 -= 32;
        }
        while (v8 != v7);
        BOOL v4 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v7;
      goto LABEL_18;
    }
  }
  return a1;
}

uint64_t sub_CF8064(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2) {
      sub_CF81AC((void *)(a1 + 8), a2 + 8);
    }
    else {
      sub_CF8294(a1, a1 + 8, (void *)(a1 + 8), a2 + 8);
    }
  }
  else
  {
    BOOL v4 = (void *)(a1 + 8);
    uint64_t v5 = (void *)(a2 + 8);
    if (*(unsigned char *)a2)
    {
      uint64_t v6 = *(void *)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = *(void **)(a1 + 24);
        if (v7 != v6)
        {
          do
          {
            if (*(char *)(v7 - 1) < 0) {
              operator delete(*(void **)(v7 - 24));
            }
            v7 -= 32;
          }
          while (v7 != v6);
          uint64_t v8 = *(void **)(a1 + 24);
        }
        *(void *)(a1 + 32) = v6;
        operator delete(v8);
      }
      void *v4 = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      void *v5 = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      uint64_t v9 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      *(void *)(a1 + 56) = v9;
    }
    else
    {
      *(_OWORD *)BOOL v4 = *(_OWORD *)v5;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 24) = 0;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    }
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

void *sub_CF81AC(void *a1, uint64_t a2)
{
  BOOL v4 = (void ***)*a1;
  if (*a1)
  {
    uint64_t v5 = (void ***)a1[1];
    uint64_t v6 = (void ***)*a1;
    if (v5 != v4)
    {
      uint64_t v7 = v5 - 3;
      do
      {
        if (*v7)
        {
          sub_C8A9E8((uint64_t)v7, *v7);
          operator delete(*v7);
        }
        BOOL v8 = v7 == v4;
        v7 -= 3;
      }
      while (!v8);
      uint64_t v6 = (void ***)*a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v10 = (void **)(a1 + 3);
  uint64_t v9 = (void **)a1[3];
  if (v9)
  {
    sub_C8ADA8((uint64_t)(a1 + 3), v9);
    operator delete(*v10);
    *uint64_t v10 = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  a1[6] = v11;
  return a1;
}

__n128 sub_CF8294(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  BOOL v8 = (void **)(a3 + 3);
  uint64_t v7 = (void **)a3[3];
  if (v7)
  {
    sub_C8ADA8((uint64_t)(a3 + 3), v7);
    operator delete(*v8);
  }
  uint64_t v9 = (void ***)*a3;
  if (*a3)
  {
    uint64_t v10 = (void ***)a3[1];
    uint64_t v11 = (void ***)*a3;
    if (v10 != v9)
    {
      uint64_t v12 = v10 - 3;
      do
      {
        if (*v12)
        {
          sub_C8A9E8((uint64_t)v12, *v12);
          operator delete(*v12);
        }
        BOOL v13 = v12 == v9;
        v12 -= 3;
      }
      while (!v13);
      uint64_t v11 = (void ***)*a3;
    }
    a3[1] = v9;
    operator delete(v11);
  }
  *(_OWORD *)a2 = *(_OWORD *)a4;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  __n128 result = *(__n128 *)(a4 + 16);
  *(__n128 *)(a2 + 16) = result;
  *(void *)(a2 + 32) = *(void *)(a4 + 32);
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a4 + 40);
  return result;
}

uint64_t sub_CF8370(uint64_t *a1, char *a2, char *a3, uint64_t *a4, int *a5)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v7;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    BOOL v13 = (char *)operator new(48 * v12);
  }
  else
  {
    BOOL v13 = 0;
  }
  uint64_t v22 = (uint64_t)&v13[48 * v6];
  uint64_t v23 = &v13[48 * v12];
  sub_CF8548(a1 + 16, v22, a2, a3, a4, a5);
  uint64_t v14 = v22;
  uint64_t v15 = v22 + 48;
  uint64_t v16 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  if (v17 == (char *)*a1)
  {
    *a1 = v22;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
  }
  else
  {
    do
    {
      long long v18 = *((_OWORD *)v17 - 3);
      *(void *)(v14 - 32) = *((void *)v17 - 4);
      *(_OWORD *)(v14 - 48) = v18;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 6) = 0;
      long long v19 = *(_OWORD *)(v17 - 24);
      *(_DWORD *)(v14 - 8) = *((_DWORD *)v17 - 2);
      *(_OWORD *)(v14 - 24) = v19;
      v14 -= 48;
      v17 -= 48;
    }
    while (v17 != v16);
    uint64_t v20 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
    if (v17 != v20)
    {
      do
      {
        if (*(v17 - 25) < 0) {
          operator delete(*((void **)v17 - 6));
        }
        v17 -= 48;
      }
      while (v17 != v20);
      uint64_t v17 = v20;
    }
  }
  if (v17) {
    operator delete(v17);
  }
  return v22 + 48;
}

void sub_CF8534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CF8548(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5, int *a6)
{
  size_t v11 = strlen(__s);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v17 = v11 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v12;
    unint64_t v21 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v12);
    *((unsigned char *)p_dst + v12) = 0;
    char v14 = *a4;
    uint64_t v15 = *a5;
    int v16 = *a6;
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v21) = v11;
  p_dst = &__dst;
  if (v11) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v14 = *a4;
  uint64_t v15 = *a5;
  int v16 = *a6;
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v21;
    *(unsigned char *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v15;
    *(_DWORD *)(a2 + 40) = v16;
    return;
  }
LABEL_10:
  long long v19 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v15;
  *(_DWORD *)(a2 + 40) = v16;

  operator delete(v19);
}

void sub_CF86A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_CF86B8(void **a1)
{
  uint64_t v3 = (void **)*a1;
  uint64_t v2 = (void **)a1[1];
  unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v2 - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x222222222222222) {
    sub_2E00();
  }
  if (0xDDDDDDDDDDDDDDDELL * (((unsigned char *)a1[2] - (unsigned char *)v3) >> 3) > v5) {
    unint64_t v5 = 0xDDDDDDDDDDDDDDDELL * (((unsigned char *)a1[2] - (unsigned char *)v3) >> 3);
  }
  if (0xEEEEEEEEEEEEEEEFLL * (((unsigned char *)a1[2] - (unsigned char *)v3) >> 3) >= 0x111111111111111) {
    unint64_t v6 = 0x222222222222222;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0x222222222222222) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(120 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  BOOL v8 = &v7[120 * v4];
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  uint64_t v9 = &v7[120 * v6];
  *(_OWORD *)BOOL v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[48] = 1;
  v8[53] = 1;
  *(_DWORD *)(v8 + 54) = 0;
  *(_DWORD *)(v8 + 57) = 0;
  *((void *)v8 + 8) = 0;
  *((void *)v8 + 9) = 0;
  *((void *)v8 + 10) = 0;
  *((_DWORD *)v8 + 22) = -1;
  *((void *)v8 + 13) = 0;
  *((void *)v8 + 14) = 0;
  uint64_t v10 = v8 + 120;
  *((void *)v8 + 12) = 0;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_26;
  }
  do
  {
    size_t v11 = v8;
    *((void *)v8 - 14) = 0;
    *((void *)v8 - 13) = 0;
    long long v12 = *(_OWORD *)(v2 - 15);
    v2 -= 15;
    *(_OWORD *)(v8 - 120) = v12;
    v8 -= 120;
    *((void *)v11 - 13) = v2[2];
    v2[1] = 0;
    v2[2] = 0;
    char *v2 = 0;
    long long v13 = *(_OWORD *)(v2 + 7);
    long long v14 = *(_OWORD *)(v2 + 9);
    uint64_t v15 = *(uint64_t *)((char *)v2 + 85);
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(v2 + 5);
    *(void *)(v8 + 85) = v15;
    *(_OWORD *)(v8 + 72) = v14;
    *(_OWORD *)(v8 + 56) = v13;
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(v2 + 3);
    long long v16 = *((_OWORD *)v2 + 6);
    *((void *)v8 + 14) = v2[14];
    *((_OWORD *)v8 + 6) = v16;
    v2[13] = 0;
    v2[14] = 0;
    v2[12] = 0;
  }
  while (v2 != v3);
  uint64_t v17 = (void **)*a1;
  uint64_t v2 = (void **)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v2 != v17)
  {
    while (1)
    {
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*(v2 - 3));
        uint64_t v18 = v2 - 15;
        long long v19 = *(v2 - 15);
        if (v19)
        {
LABEL_21:
          uint64_t v20 = (uint64_t)*(v2 - 14);
          unint64_t v21 = v19;
          if ((void *)v20 != v19)
          {
            do
              uint64_t v20 = sub_3AFFFC(v20 - 1056);
            while ((void *)v20 != v19);
            unint64_t v21 = *v18;
          }
          *(v2 - 14) = v19;
          operator delete(v21);
        }
      }
      else
      {
        uint64_t v18 = v2 - 15;
        long long v19 = *(v2 - 15);
        if (v19) {
          goto LABEL_21;
        }
      }
      uint64_t v2 = v18;
      if (v18 == v17)
      {
        uint64_t v2 = v17;
        break;
      }
    }
  }
  if (v2) {
LABEL_26:
  }
    operator delete(v2);
  return v10;
}

uint64_t sub_CF88D0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      unint64_t v4 = (void *)(a2 + 8);
      unint64_t v6 = (void **)(a1 + 8);
      unint64_t v5 = *(void ***)(a1 + 8);
      if (v5)
      {
        sub_C686F8(a1 + 8, v5);
        operator delete(*v6);
        void *v6 = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
      }
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      void *v4 = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
LABEL_21:
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      goto LABEL_22;
    }
    long long v13 = (void **)(a1 + 8);
    long long v12 = *(void ***)(a1 + 8);
    if (v12)
    {
      sub_C686F8(a1 + 8, v12);
      operator delete(*v13);
    }
    *(_OWORD *)long long v13 = *(_OWORD *)(a2 + 8);
  }
  else
  {
    unint64_t v7 = (void *)(a1 + 8);
    BOOL v8 = (void *)(a2 + 8);
    if (*(unsigned char *)a2)
    {
      uint64_t v9 = *(void *)(a1 + 24);
      if (v9)
      {
        uint64_t v10 = *(void *)(a1 + 32);
        size_t v11 = *(void **)(a1 + 24);
        if (v10 != v9)
        {
          do
          {
            if (*(char *)(v10 - 1) < 0) {
              operator delete(*(void **)(v10 - 24));
            }
            v10 -= 32;
          }
          while (v10 != v9);
          size_t v11 = *(void **)(a1 + 24);
        }
        *(void *)(a1 + 32) = v9;
        operator delete(v11);
      }
      *unint64_t v7 = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *BOOL v8 = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      goto LABEL_21;
    }
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
LABEL_22:
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

uint64_t sub_CF8A40@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "CyclingRouteSelectionModule");
  unint64_t v4 = *(void *)(a2 + 40);
  char v9 = 1;
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C55C14((uint64_t *)(a2 + 24), "Runtime", &v9, a1);
  }
  else
  {
    sub_C55DE4(a2 + 40, *(void *)(a2 + 32), "Runtime", &v9, a1);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  char v8 = 4;
  if (v6 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_CF9664((uint64_t *)(a2 + 24), "Routes", &v8, a1 + 1);
  }
  else
  {
    sub_CF9834(a2 + 40, v6, "Routes", &v8, a1 + 1);
    uint64_t result = v6 + 48;
    *(void *)(a2 + 32) = v6 + 48;
  }
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_CF8B58(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CF8B6C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CF8B9C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CF8BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 4) = 0;
  unint64_t v5 = (unsigned int *)(a1 + 4);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  unint64_t v6 = (double *)(a1 + 40);
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  HIBYTE(v28[2]) = 21;
  strcpy((char *)v28, "CyclingRouteSelection");
  long long __p = 0;
  long long v26 = 0;
  uint64_t v27 = 0;
  unint64_t v7 = sub_374CDC(a3, (uint64_t)v28, (uint64_t *)&__p);
  sub_54214((uint64_t)v29, (uint64_t)v7);
  char v8 = (void **)__p;
  if (__p)
  {
    char v9 = v26;
    uint64_t v10 = __p;
    if (v26 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    long long v26 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  HIBYTE(v28[2]) = 17;
  strcpy((char *)v28, "return_all_routes");
  *(unsigned char *)a1 = sub_29D62C(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  HIBYTE(v28[2]) = 14;
  strcpy((char *)v28, "max_num_routes");
  unsigned int v11 = sub_31AC04(v29, (uint64_t)v28);
  unsigned int v12 = sub_DC68CC(a2);
  if (v12 >= v11) {
    unsigned int v13 = v11;
  }
  else {
    unsigned int v13 = v12;
  }
  unsigned int *v5 = v13;
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  HIBYTE(v28[2]) = 20;
  strcpy((char *)v28, "max_relative_sharing");
  *(double *)(a1 + 8) = sub_5C7E8(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  HIBYTE(v28[2]) = 20;
  strcpy((char *)v28, "min_line_distance_cm");
  *(_DWORD *)(a1 + 16) = sub_31AC04(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  strcpy((char *)v28, "score_threshold_factor");
  HIBYTE(v28[2]) = 22;
  *(double *)(a1 + 24) = sub_5C7E8(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  v28[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v28[1] = xmmword_20B93C0;
  strcpy(v28[0], "minimum_score_difference_with_main_route");
  *(_DWORD *)(a1 + 32) = sub_31AC04(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  v28[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v28[1] = xmmword_20B8E90;
  strcpy(v28[0], "score_threshold_additive_linear");
  double *v6 = sub_5C7E8(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  v28[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v28[1] = xmmword_20B9800;
  strcpy(v28[0], "score_threshold_additive_fuzzy");
  *(double *)(a1 + 48) = sub_5C7E8(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  v28[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v28[1] = xmmword_20B93A0;
  strcpy(v28[0], "first_route_as_main_route_max_score");
  *(double *)(a1 + 56) = sub_5C7E8(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  v28[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v28[1] = xmmword_20B9A40;
  strcpy(v28[0], "enable_fuzzy_scoring_for_non_avoid_options");
  BOOL v14 = sub_29D62C(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  v28[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v28[1] = xmmword_20E12D0;
  strcpy(v28[0], "enable_fuzzy_scoring_for_avoid_options");
  BOOL v15 = sub_29D62C(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  v28[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v28[1] = xmmword_20B93E0;
  strcpy(v28[0], "enable_linear_scoring_for_non_avoid_options");
  BOOL v16 = sub_29D62C(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  v28[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v28[1] = xmmword_20B9960;
  strcpy(v28[0], "enable_linear_scoring_for_avoid_options");
  BOOL v17 = sub_29D62C(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  unint64_t v18 = sub_DB6BEC(a2);
  if ((v18 & 0xFF00FF) != 0)
  {
    if (v17) {
      char v19 = 2;
    }
    else {
      char v19 = 0;
    }
    if (v15) {
      char v19 = 1;
    }
  }
  else
  {
    if (v16) {
      char v19 = 2;
    }
    else {
      char v19 = 0;
    }
    if (v14) {
      char v19 = 1;
    }
    if (v17) {
      char v20 = 2;
    }
    else {
      char v20 = 0;
    }
    if (v15) {
      char v20 = 1;
    }
    if ((v18 & 0xFF00) != 0) {
      char v19 = v20;
    }
  }
  *(unsigned char *)(a1 + 64) = v19;
  v28[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v28[1] = xmmword_20B8FD0;
  strcpy(v28[0], "max_length_in_unsupported_regions_cm");
  *(_DWORD *)(a1 + 68) = sub_31AC04(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  unint64_t v21 = v30;
  if (v30)
  {
    do
    {
      long long v24 = (void **)*v21;
      sub_55198((uint64_t)(v21 + 5));
      if (*((char *)v21 + 39) < 0) {
        operator delete(v21[2]);
      }
      operator delete(v21);
      unint64_t v21 = v24;
    }
    while (v24);
  }
  uint64_t v22 = v29[0];
  v29[0] = 0;
  if (v22) {
    operator delete(v22);
  }
  return a1;
}

void sub_CF91D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_5450C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_CF9284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xCF927CLL);
}

uint64_t sub_CF92A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  unint64_t v5 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  unint64_t v6 = (void **)(a1 + 56);
  unint64_t v7 = (void **)(a1 + 32);
  char v8 = (void **)(a1 + 80);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  v32[23] = 20;
  strcpy(v32, "CyclingCoverageCheck");
  long long __p = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  char v9 = sub_374CDC(a3, (uint64_t)v32, (uint64_t *)&__p);
  sub_54214((uint64_t)v33, (uint64_t)v9);
  uint64_t v10 = (void **)__p;
  if (__p)
  {
    unsigned int v11 = v30;
    unsigned int v12 = __p;
    if (v30 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      unsigned int v12 = __p;
    }
    uint64_t v30 = v10;
    operator delete(v12);
  }
  if ((v32[23] & 0x80000000) != 0) {
    operator delete(*(void **)v32);
  }
  *(unsigned char *)a1 = sub_29D62C(v33, (uint64_t)&xmmword_25E61C0);
  sub_5C308(v33, (uint64_t)&qword_25E6220, (uint64_t)v32);
  unsigned int v13 = (void **)*v5;
  if (*v5)
  {
    BOOL v14 = *(void ***)(a1 + 16);
    BOOL v15 = *v5;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      BOOL v15 = *v5;
    }
    *(void *)(a1 + 16) = v13;
    operator delete(v15);
    unsigned int *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v32;
  *(void *)(a1 + 24) = *(void *)&v32[16];
  sub_5C308(v33, (uint64_t)&qword_25E6238, (uint64_t)v32);
  BOOL v16 = (void **)*v6;
  if (*v6)
  {
    BOOL v17 = *(void ***)(a1 + 64);
    unint64_t v18 = *v6;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 3;
      }
      while (v17 != v16);
      unint64_t v18 = *v6;
    }
    *(void *)(a1 + 64) = v16;
    operator delete(v18);
    double *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v32;
  *(void *)(a1 + 72) = *(void *)&v32[16];
  sub_5C308(v33, (uint64_t)&xmmword_25E61F0, (uint64_t)v32);
  char v19 = (void **)*v7;
  if (*v7)
  {
    char v20 = *(void ***)(a1 + 40);
    unint64_t v21 = *v7;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v20 - 1) < 0) {
          operator delete(*(v20 - 3));
        }
        v20 -= 3;
      }
      while (v20 != v19);
      unint64_t v21 = *v7;
    }
    *(void *)(a1 + 40) = v19;
    operator delete(v21);
    *unint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v32;
  *(void *)(a1 + 48) = *(void *)&v32[16];
  sub_5C308(v33, (uint64_t)byte_25E6208, (uint64_t)v32);
  uint64_t v22 = (void **)*v8;
  if (*v8)
  {
    uint64_t v23 = *(void ***)(a1 + 88);
    long long v24 = *v8;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v22);
      long long v24 = *v8;
    }
    *(void *)(a1 + 88) = v22;
    operator delete(v24);
    *char v8 = 0;
    v8[1] = 0;
    __n128 v8[2] = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)v32;
  *(void *)(a1 + 96) = *(void *)&v32[16];
  *(unsigned char *)(a1 + 1) = sub_DB71DC(a2);
  uint64_t v25 = v34;
  if (v34)
  {
    do
    {
      uint64_t v28 = (void **)*v25;
      sub_55198((uint64_t)(v25 + 5));
      if (*((char *)v25 + 39) < 0) {
        operator delete(v25[2]);
      }
      operator delete(v25);
      uint64_t v25 = v28;
    }
    while (v28);
  }
  long long v26 = v33[0];
  v33[0] = 0;
  if (v26) {
    operator delete(v26);
  }
  return a1;
}

void sub_CF9600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_5450C((uint64_t)va);
  sub_1A668(v11);
  sub_1A668(v10);
  sub_1A668(v9);
  sub_1A668(v8);
  _Unwind_Resume(a1);
}

void sub_CF9644(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0xCF961CLL);
}

uint64_t sub_CF9664(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unsigned int v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unsigned int v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_CF9834(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  BOOL v14 = (char *)*a1;
  BOOL v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    BOOL v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      BOOL v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_CF9820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CF9834(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_CF9994(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_CF99A8(void *a1)
{
  uint64_t v2 = a1[10];
  if (v2)
  {
    uint64_t v3 = a1[11];
    unint64_t v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      unint64_t v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[7];
  if (v5)
  {
    uint64_t v6 = a1[8];
    unint64_t v7 = (void *)a1[7];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      unint64_t v7 = (void *)a1[7];
    }
    a1[8] = v5;
    operator delete(v7);
  }
  uint64_t v8 = a1[4];
  if (v8)
  {
    uint64_t v9 = a1[5];
    size_t v10 = (void *)a1[4];
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0) {
          operator delete(*(void **)(v9 - 24));
        }
        v9 -= 24;
      }
      while (v9 != v8);
      size_t v10 = (void *)a1[4];
    }
    a1[5] = v8;
    operator delete(v10);
  }
  uint64_t v11 = a1[1];
  if (v11)
  {
    uint64_t v12 = a1[2];
    uint64_t v13 = (void *)a1[1];
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0) {
          operator delete(*(void **)(v12 - 24));
        }
        v12 -= 24;
      }
      while (v12 != v11);
      uint64_t v13 = (void *)a1[1];
    }
    a1[2] = v11;
    operator delete(v13);
  }
  return a1;
}

uint64_t sub_CF9AF4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      sub_CF9C8C(a1 + 8, a2 + 8);
      goto LABEL_17;
    }
    sub_C9A598(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
LABEL_13:
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    goto LABEL_17;
  }
  if (!*(unsigned char *)a2)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(a1 + 24);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0) {
          operator delete(*(void **)(v5 - 24));
        }
        v5 -= 32;
      }
      while (v5 != v4);
      uint64_t v6 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v4;
    operator delete(v6);
  }
  sub_CF9E58(a1 + 8, a2 + 8);
LABEL_17:
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

uint64_t sub_CF9BFC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1648)) {
    *(unsigned char *)(a1 + 1648) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 1616);
  if (v2)
  {
    *(void *)(a1 + 1624) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 1592);
  if (v3)
  {
    *(void *)(a1 + 1600) = v3;
    operator delete(v3);
  }
  sub_4BCED0(a1 + 24);
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void **)a1;
    if ((void *)v5 != v4)
    {
      do
        uint64_t v5 = sub_402C7C(v5 - 376);
      while ((void *)v5 != v4);
      uint64_t v6 = *(void **)a1;
    }
    *(void *)(a1 + 8) = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_CF9C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = v4;
    if ((void *)v5 != v4)
    {
      do
        uint64_t v5 = sub_574D4C(v5 - 7560);
      while ((void *)v5 != v4);
      uint64_t v6 = *(void **)a1;
    }
    *(void *)(a1 + 8) = v4;
    operator delete(v6);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_C853F0((void *)(a1 + 24), a2 + 24);
  uint64_t v7 = *(void *)(a1 + 1112);
  if (v7)
  {
    uint64_t v8 = (void **)(a1 + 1112);
    uint64_t v9 = *(void *)(a1 + 1120);
    size_t v10 = *(void **)(a1 + 1112);
    if (v9 != v7)
    {
      do
        uint64_t v9 = sub_3A6B94(v9 - 1120);
      while (v9 != v7);
      size_t v10 = *v8;
    }
    *(void *)(a1 + 1120) = v7;
    operator delete(v10);
    *uint64_t v8 = 0;
    *(void *)(a1 + 1120) = 0;
    *(void *)(a1 + 1128) = 0;
  }
  *(void *)(a1 + 1112) = *(void *)(a2 + 1112);
  *(void *)(a1 + 1120) = *(void *)(a2 + 1120);
  *(void *)(a1 + 1128) = *(void *)(a2 + 1128);
  *(void *)(a2 + 1128) = 0;
  *(_OWORD *)(a2 + 1112) = 0u;
  long long v11 = *(_OWORD *)(a2 + 1216);
  long long v12 = *(_OWORD *)(a2 + 1232);
  long long v13 = *(_OWORD *)(a2 + 1248);
  *(_OWORD *)(a1 + 1200) = *(_OWORD *)(a2 + 1200);
  *(_OWORD *)(a1 + 1248) = v13;
  *(_OWORD *)(a1 + 1232) = v12;
  *(_OWORD *)(a1 + 1216) = v11;
  long long v14 = *(_OWORD *)(a2 + 1280);
  long long v15 = *(_OWORD *)(a2 + 1296);
  long long v16 = *(_OWORD *)(a2 + 1312);
  *(_OWORD *)(a1 + 1264) = *(_OWORD *)(a2 + 1264);
  *(_OWORD *)(a1 + 1312) = v16;
  *(_OWORD *)(a1 + 1296) = v15;
  *(_OWORD *)(a1 + 1280) = v14;
  long long v17 = *(_OWORD *)(a2 + 1344);
  long long v18 = *(_OWORD *)(a2 + 1360);
  long long v19 = *(_OWORD *)(a2 + 1372);
  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 1328);
  *(_OWORD *)(a1 + 1372) = v19;
  *(_OWORD *)(a1 + 1360) = v18;
  *(_OWORD *)(a1 + 1344) = v17;
  long long v20 = *(_OWORD *)(a2 + 1136);
  long long v21 = *(_OWORD *)(a2 + 1152);
  long long v22 = *(_OWORD *)(a2 + 1168);
  *(_OWORD *)(a1 + 1184) = *(_OWORD *)(a2 + 1184);
  *(_OWORD *)(a1 + 1168) = v22;
  *(_OWORD *)(a1 + 1152) = v21;
  *(_OWORD *)(a1 + 1136) = v20;
  uint64_t v23 = (void **)(a1 + 1392);
  if (*(char *)(a1 + 1415) < 0) {
    operator delete(*v23);
  }
  long long v24 = *(_OWORD *)(a2 + 1392);
  *(void *)(a1 + 1408) = *(void *)(a2 + 1408);
  *(_OWORD *)uint64_t v23 = v24;
  *(unsigned char *)(a2 + 1415) = 0;
  *(unsigned char *)(a2 + 1392) = 0;
  sub_62BDC(a1 + 1416, (uint64_t *)(a2 + 1416));
  *(unsigned char *)(a1 + 1456) = *(unsigned char *)(a2 + 1456);
  return a1;
}

uint64_t sub_CF9E58(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v4 = a1 + 24;
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = a2 + 24;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  sub_4F4498(a1 + 72, a2 + 72);
  sub_4F4498(v4 + 544, v5 + 544);
  *(void *)(v4 + 1056) = 0;
  *(_OWORD *)(v4 + 1040) = 0u;
  *(void *)(v4 + 1040) = *(void *)(v5 + 1040);
  *(void *)(v4 + 1048) = *(void *)(v5 + 1048);
  *(void *)(v4 + 1056) = *(void *)(v5 + 1056);
  *(void *)(v5 + 1056) = 0;
  *(_OWORD *)(v5 + 1040) = 0u;
  *(void *)(v4 + 1080) = 0;
  *(_OWORD *)(v4 + 1064) = 0u;
  *(_OWORD *)(v4 + 1064) = *(_OWORD *)(v5 + 1064);
  *(void *)(v4 + 1080) = *(void *)(v5 + 1080);
  *(void *)(v5 + 1080) = 0;
  *(_OWORD *)(v5 + 1064) = 0u;
  *(void *)(v4 + 1104) = 0;
  *(_OWORD *)(v4 + 1088) = 0u;
  *(void *)(v4 + 1088) = *(void *)(v5 + 1088);
  *(void *)(v4 + 1096) = *(void *)(v5 + 1096);
  *(void *)(v4 + 1104) = *(void *)(v5 + 1104);
  *(void *)(v5 + 1104) = 0;
  *(_OWORD *)(v5 + 1088) = 0u;
  long long v6 = *(_OWORD *)(v5 + 1192);
  long long v7 = *(_OWORD *)(v5 + 1208);
  long long v8 = *(_OWORD *)(v5 + 1224);
  *(_OWORD *)(v4 + 1176) = *(_OWORD *)(v5 + 1176);
  *(_OWORD *)(v4 + 1224) = v8;
  *(_OWORD *)(v4 + 1208) = v7;
  *(_OWORD *)(v4 + 1192) = v6;
  long long v9 = *(_OWORD *)(v5 + 1256);
  long long v10 = *(_OWORD *)(v5 + 1272);
  long long v11 = *(_OWORD *)(v5 + 1288);
  *(_OWORD *)(v4 + 1240) = *(_OWORD *)(v5 + 1240);
  *(_OWORD *)(v4 + 1288) = v11;
  *(_OWORD *)(v4 + 1272) = v10;
  *(_OWORD *)(v4 + 1256) = v9;
  long long v12 = *(_OWORD *)(v5 + 1320);
  long long v13 = *(_OWORD *)(v5 + 1336);
  long long v14 = *(_OWORD *)(v5 + 1352);
  *(_OWORD *)(v4 + 1304) = *(_OWORD *)(v5 + 1304);
  *(_OWORD *)(v4 + 1352) = v14;
  *(_OWORD *)(v4 + 1336) = v13;
  *(_OWORD *)(v4 + 1320) = v12;
  long long v15 = *(_OWORD *)(v5 + 1112);
  long long v16 = *(_OWORD *)(v5 + 1128);
  long long v17 = *(_OWORD *)(v5 + 1144);
  *(_OWORD *)(v4 + 1160) = *(_OWORD *)(v5 + 1160);
  *(_OWORD *)(v4 + 1144) = v17;
  *(_OWORD *)(v4 + 1128) = v16;
  *(_OWORD *)(v4 + 1112) = v15;
  long long v18 = *(_OWORD *)(v5 + 1368);
  *(void *)(v4 + 1384) = *(void *)(v5 + 1384);
  *(_OWORD *)(v4 + 1368) = v18;
  *(void *)(v5 + 1384) = 0;
  *(_OWORD *)(v5 + 1368) = 0u;
  uint64_t v19 = *(void *)(v5 + 1392);
  *(void *)(v5 + 1392) = 0;
  *(void *)(v4 + 1392) = v19;
  *(void *)(v4 + 1400) = *(void *)(v5 + 1400);
  *(void *)(v5 + 1400) = 0;
  uint64_t v20 = *(void *)(v5 + 1408);
  *(void *)(v4 + 1408) = v20;
  uint64_t v21 = *(void *)(v5 + 1416);
  *(void *)(v4 + 1416) = v21;
  *(_DWORD *)(v4 + 1424) = *(_DWORD *)(v5 + 1424);
  if (v21)
  {
    unint64_t v22 = *(void *)(v20 + 8);
    unint64_t v23 = *(void *)(a1 + 1424);
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v22 >= v23) {
        v22 %= v23;
      }
    }
    else
    {
      v22 &= v23 - 1;
    }
    *(void *)(v19 + 8 * v22) = v4 + 1408;
    *(void *)(v5 + 1408) = 0;
    *(void *)(v5 + 1416) = 0;
  }
  *(unsigned char *)(a1 + 1456) = *(unsigned char *)(a2 + 1456);
  return a1;
}

void sub_CFA124(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void **)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = **(unsigned __int8 **)(a1 + 40);
  long long v11 = 0;
  long long v12 = 0;
  uint64_t v13 = 0;
  long long __p = 0;
  long long v9 = 0;
  uint64_t v10 = 0;
  sub_CFA1D8(a2, v2, v3, v4, v5, v6, v7, (uint64_t *)&v11, (uint64_t)&__p);
  if (__p)
  {
    long long v9 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    long long v12 = v11;
    operator delete(v11);
  }
}

void sub_CFA19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
  {
    operator delete(__p);
    long long v16 = a14;
    if (!a14) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    long long v16 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_CFA1D8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5, uint64_t a6, int a7, uint64_t *a8, uint64_t a9)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_CF216C(a1, *a3, a3[1], 0x51B3BEA3677D46CFLL * ((a3[1] - *a3) >> 3));
  sub_DB54FC(a2, a6, a1 + 24);
  *(unsigned char *)(a1 + 1560) = 0;
  *(void *)(a1 + 1568) = a4;
  *(void *)(a1 + 1576) = *a5;
  *(void *)(a1 + 1584) = a6;
  *(void *)(a1 + 1600) = 0;
  *(void *)(a1 + 1608) = 0;
  *(void *)(a1 + 1592) = 0;
  uint64_t v16 = *a8;
  uint64_t v17 = a8[1];
  int64_t v18 = v17 - *a8;
  if (v18)
  {
    if (v18 < 0) {
      sub_2E00();
    }
    uint64_t v19 = (char *)operator new(v18);
    uint64_t v20 = 0;
    *(void *)(a1 + 1592) = v19;
    *(void *)(a1 + 1600) = v19;
    *(void *)(a1 + 1608) = &v19[32 * (v18 >> 5)];
    do
    {
      uint64_t v21 = v16 + v20;
      unint64_t v22 = &v19[v20];
      unsigned int v23 = *(_DWORD *)(v16 + v20 + 16);
      *(_DWORD *)&v19[v20 + 16] = v23;
      if (v23 <= 1) {
        *(_OWORD *)unint64_t v22 = *(_OWORD *)v21;
      }
      v22[24] = *(unsigned char *)(v21 + 24);
      v20 += 32;
    }
    while (v16 + v20 != v17);
    *(void *)(a1 + 1600) = &v19[v20];
  }
  *(void *)(a1 + 1632) = 0;
  *(_OWORD *)(a1 + 1616) = 0u;
  uint64_t v25 = *(const void **)a9;
  uint64_t v24 = *(void *)(a9 + 8);
  int64_t v26 = v24 - *(void *)a9;
  if (v24 != *(void *)a9)
  {
    if (0x86BCA1AF286BCA1BLL * (v26 >> 3) >= 0x1AF286BCA1AF287) {
      sub_2E00();
    }
    uint64_t v27 = (char *)operator new(v26);
    *(void *)(a1 + 1616) = v27;
    *(void *)(a1 + 1624) = v27;
    uint64_t v28 = &v27[8 * (v26 >> 3)];
    *(void *)(a1 + 1632) = v28;
    memcpy(v27, v25, v26);
    *(void *)(a1 + 1624) = v28;
  }
  *(unsigned char *)(a1 + 1648) = 0;
  if (a7)
  {
    uint64_t v29 = *(void *)(a1 + 1128);
    uint64_t v30 = (char *)(v29 + 4);
    uint64_t v31 = (unsigned char *)(v29 + 8);
    uint64_t v32 = *(unsigned char **)(a1 + 1136);
    int64_t v33 = v32 - v31;
    if (v32 != v31) {
      memmove(v30, v31, v32 - v31);
    }
    *(void *)(a1 + 1136) = &v30[v33];
    sub_CFA46C((void *)(a1 + 1176), *(void *)(a1 + 1176), 1u, (uint64_t)v35);
    sub_CFA46C((void *)(a1 + 1152), *(void *)(a1 + 1152), 1u, (uint64_t)v35);
  }
  return a1;
}

void sub_CFA400(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 1648)) {
    *(unsigned char *)(v1 + 1648) = 0;
  }
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 1624) = v6;
    operator delete(v6);
  }
  int v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 1600) = v7;
    operator delete(v7);
  }
  sub_4BCED0(v2);
  sub_401F88((void **)v1);
  _Unwind_Resume(a1);
}

void *sub_CFA46C@<X0>(void *result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = result;
  uint64_t v5 = *result;
  uint64_t v6 = a3 + 8 * (a2 - *result);
  if (v6 < 0)
  {
    uint64_t v8 = v6 - 63;
    if (v6 - 63 < 0) {
      uint64_t v8 = a3 + 8 * (a2 - *result);
    }
    uint64_t v7 = v8 >> 6;
  }
  else
  {
    uint64_t v7 = (unint64_t)v6 >> 6;
  }
  long long v9 = (unint64_t *)(v5 + 8 * v7);
  *(void *)a4 = v9;
  int v10 = v6 & 0x3F;
  *(_DWORD *)(a4 + 8) = v10;
  long long v11 = (uint64_t *)(a2 + ((((unint64_t)a3 + 1) >> 3) & 0x3FFFFFF8));
  uint64_t v12 = ((_BYTE)a3 + 1) & 0x3F;
  uint64_t v13 = v5 + 8 * (result[1] >> 6);
  uint64_t v14 = result[1] & 0x3FLL;
  if (v10 == v12)
  {
    uint64_t v15 = v14 - v12 + 8 * (v13 - (void)v11);
    if (v15 >= 1)
    {
      if ((((_BYTE)a3 + 1) & 0x3F) != 0)
      {
        if (v15 >= (unint64_t)(64 - v12)) {
          uint64_t v16 = 64 - v12;
        }
        else {
          uint64_t v16 = v14 - v12 + 8 * (v13 - (void)v11);
        }
        v15 -= v16;
        uint64_t v17 = *v11++;
        *long long v9 = *v9 & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v12 - v16)) & (-1 << v12)) | v17 & (0xFFFFFFFFFFFFFFFFLL >> (64 - v12 - v16)) & (-1 << v12);
        long long v9 = (unint64_t *)((char *)v9 + (((v16 + v12) >> 3) & 0x18));
      }
      if (v15 >= 0) {
        uint64_t v18 = v15;
      }
      else {
        uint64_t v18 = v15 + 63;
      }
      uint64_t v19 = v18 >> 6;
      uint64_t v20 = v18 >> 6;
      if ((unint64_t)(v15 + 63) >= 0x7F) {
        uint64_t result = memmove(v9, v11, 8 * (v18 >> 6));
      }
      if (v15 - (v19 << 6) >= 1) {
        v9[v20] = v9[v20] & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v19 << 6) - v15)) | v11[v20] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v19 << 6) - v15));
      }
    }
  }
  else
  {
    unint64_t v22 = v9;
    int v23 = v10;
    uint64_t result = sub_43D38((unint64_t *)v11, v12, v13, v14, (uint64_t)&v22, (uint64_t)&v21);
  }
  --v4[1];
  return result;
}

uint64_t sub_CFA608(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      sub_CFB46C(a1 + 8, a2 + 8);
      long long v5 = *(_OWORD *)(a2 + 304);
      long long v4 = *(_OWORD *)(a2 + 320);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 304) = v5;
      *(_OWORD *)(a1 + 320) = v4;
      long long v7 = *(_OWORD *)(a2 + 352);
      long long v6 = *(_OWORD *)(a2 + 368);
      long long v8 = *(_OWORD *)(a2 + 336);
      *(void *)(a1 + 383) = *(void *)(a2 + 383);
      *(_OWORD *)(a1 + 352) = v7;
      *(_OWORD *)(a1 + 368) = v6;
      *(_OWORD *)(a1 + 336) = v8;
    }
    else
    {
      sub_CFB3B0(a1, a1 + 8, (void *)(a1 + 8), a2 + 8);
    }
  }
  else if (*(unsigned char *)a2)
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      long long v11 = *(void **)(a1 + 24);
      if (v10 != v9)
      {
        do
        {
          if (*(char *)(v10 - 1) < 0) {
            operator delete(*(void **)(v10 - 24));
          }
          v10 -= 32;
        }
        while (v10 != v9);
        long long v11 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v9;
      operator delete(v11);
    }
    sub_C842C4(a1 + 8, a2 + 8);
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 256) = 0;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    *(void *)(a2 + 240) = 0;
    *(void *)(a2 + 248) = 0;
    *(void *)(a2 + 256) = 0;
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 280) = 0;
    uint64_t v12 = *(void *)(a2 + 272);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a1 + 272) = v12;
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(void *)(a2 + 272) = 0;
    *(void *)(a2 + 280) = 0;
    *(void *)(a2 + 264) = 0;
    long long v14 = *(_OWORD *)(a2 + 352);
    long long v13 = *(_OWORD *)(a2 + 368);
    long long v15 = *(_OWORD *)(a2 + 336);
    *(void *)(a1 + 384) = *(void *)(a2 + 384);
    *(_OWORD *)(a1 + 352) = v14;
    *(_OWORD *)(a1 + 368) = v13;
    *(_OWORD *)(a1 + 336) = v15;
    long long v16 = *(_OWORD *)(a2 + 320);
    long long v17 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v16;
    *(_OWORD *)(a1 + 288) = v17;
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

void sub_CFA7B0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "AnalyticsModule");
  long long v5 = (unint64_t *)(a2 + 40);
  unint64_t v4 = *(void *)(a2 + 40);
  LOBYTE(__p[0]) = 1;
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 >= v4)
  {
    unint64_t v7 = sub_C55C14((uint64_t *)(a2 + 24), "Runtime", (char *)__p, (double *)a1);
    *(void *)(a2 + 32) = v7;
    long long v8 = (uint64_t *)(a1 + 8);
    if (!*(void *)(a1 + 8))
    {
LABEL_3:
      LOBYTE(__p[0]) = 1;
      uint64_t v9 = (double *)(a1 + 16);
      if (v7 < *v5) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else
  {
    sub_C55DE4(a2 + 40, *(void *)(a2 + 32), "Runtime", (char *)__p, (double *)a1);
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 32) = v7;
    long long v8 = (uint64_t *)(a1 + 8);
    if (!*(void *)(a1 + 8)) {
      goto LABEL_3;
    }
  }
  LOBYTE(__p[0]) = 2;
  if (v7 >= *v5)
  {
    unint64_t v7 = sub_C96B8C((uint64_t *)(a2 + 24), "AnalyticsData.Size", (char *)__p, v8);
  }
  else
  {
    sub_C96D5C(a2 + 40, v7, "AnalyticsData.Size", (char *)__p, v8);
    v7 += 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
  LOBYTE(__p[0]) = 1;
  uint64_t v9 = (double *)(a1 + 16);
  if (v7 < *v5)
  {
LABEL_4:
    sub_C9C8E4(a2 + 40, v7, "ClosureAnalytics.Runtime", (char *)__p, v9);
    unint64_t v10 = v7 + 48;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 32) = v10;
    long long v11 = (uint64_t *)(a1 + 24);
    if (!*(void *)(a1 + 24)) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  unint64_t v10 = sub_C9C714((uint64_t *)(a2 + 24), "ClosureAnalytics.Runtime", (char *)__p, v9);
  *(void *)(a2 + 32) = v10;
  long long v11 = (uint64_t *)(a1 + 24);
  if (!*(void *)(a1 + 24))
  {
LABEL_5:
    LOBYTE(__p[0]) = 1;
    uint64_t v12 = (double *)(a1 + 32);
    if (v10 < *v5) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_23:
  LOBYTE(__p[0]) = 2;
  if (v10 >= *v5)
  {
    unint64_t v10 = sub_C96EC8((uint64_t *)(a2 + 24), "ClosureAnalytics.Size", (char *)__p, v11);
  }
  else
  {
    sub_C97098(a2 + 40, v10, "ClosureAnalytics.Size", (char *)__p, v11);
    v10 += 48;
    *(void *)(a2 + 32) = v10;
  }
  *(void *)(a2 + 32) = v10;
  LOBYTE(__p[0]) = 1;
  uint64_t v12 = (double *)(a1 + 32);
  if (v10 < *v5)
  {
LABEL_6:
    sub_CFB8EC(a2 + 40, v10, "TrajectoryAnalytics.Runtime", (char *)__p, v12);
    unint64_t v13 = v10 + 48;
    *(void *)(a2 + 32) = v13;
    *(void *)(a2 + 32) = v13;
    long long v14 = (uint64_t *)(a1 + 40);
    if (!*(void *)(a1 + 40)) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  unint64_t v13 = sub_CFB71C((uint64_t *)(a2 + 24), "TrajectoryAnalytics.Runtime", (char *)__p, v12);
  *(void *)(a2 + 32) = v13;
  long long v14 = (uint64_t *)(a1 + 40);
  if (!*(void *)(a1 + 40))
  {
LABEL_7:
    LOBYTE(__p[0]) = 1;
    long long v15 = (double *)(a1 + 48);
    if (v13 < *v5) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }
LABEL_28:
  LOBYTE(__p[0]) = 2;
  if (v13 >= *v5)
  {
    unint64_t v13 = sub_C951AC((uint64_t *)(a2 + 24), "TrajectoryAnalytics.Size", (char *)__p, v14);
  }
  else
  {
    sub_C9537C(a2 + 40, v13, "TrajectoryAnalytics.Size", (char *)__p, v14);
    v13 += 48;
    *(void *)(a2 + 32) = v13;
  }
  *(void *)(a2 + 32) = v13;
  LOBYTE(__p[0]) = 1;
  long long v15 = (double *)(a1 + 48);
  if (v13 < *v5)
  {
LABEL_8:
    sub_C56E38(a2 + 40, v13, "RouteAnalytics.Runtime", (char *)__p, v15);
    unint64_t v16 = v13 + 48;
    *(void *)(a2 + 32) = v16;
    *(void *)(a2 + 32) = v16;
    long long v17 = (uint64_t *)(a1 + 56);
    if (!*(void *)(a1 + 56)) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_32:
  unint64_t v16 = sub_C56C68((uint64_t *)(a2 + 24), "RouteAnalytics.Runtime", (char *)__p, v15);
  *(void *)(a2 + 32) = v16;
  long long v17 = (uint64_t *)(a1 + 56);
  if (!*(void *)(a1 + 56))
  {
LABEL_9:
    uint64_t v18 = (unsigned int *)(a1 + 68);
    if (!*(_DWORD *)(a1 + 68)) {
      goto LABEL_10;
    }
LABEL_37:
    v37.__r_.__value_.__s.__data_[0] = 4;
    LODWORD(__p[0]) = 0;
    if (v16 >= *v5)
    {
      unint64_t v16 = sub_CFBA60((uint64_t *)(a2 + 24), "ClosureAnalytics.NumActiveSoftClosures", (char *)&v37, v18, (int *)__p);
      *(void *)(a2 + 32) = v16;
      uint64_t v19 = (unsigned int *)(a1 + 72);
      if (*(_DWORD *)(a1 + 72)) {
        goto LABEL_41;
      }
    }
    else
    {
      sub_CFBC38(a2 + 40, v16, "ClosureAnalytics.NumActiveSoftClosures", (char *)&v37, v18, (int *)__p);
      v16 += 48;
      *(void *)(a2 + 32) = v16;
      *(void *)(a2 + 32) = v16;
      uint64_t v19 = (unsigned int *)(a1 + 72);
      if (*(_DWORD *)(a1 + 72)) {
        goto LABEL_41;
      }
    }
LABEL_11:
    uint64_t v20 = (unsigned int *)(a1 + 76);
    if (!*(_DWORD *)(a1 + 76)) {
      goto LABEL_12;
    }
LABEL_45:
    v37.__r_.__value_.__s.__data_[0] = 4;
    LODWORD(__p[0]) = 0;
    if (v16 >= *v5)
    {
      unint64_t v16 = sub_CFC0F0((uint64_t *)(a2 + 24), "ClosureAnalytics.NumHardClosures", (char *)&v37, v20, (int *)__p);
      *(void *)(a2 + 32) = v16;
      if (*(unsigned char *)(a1 + 84)) {
        goto LABEL_49;
      }
    }
    else
    {
      sub_CFC2C8(a2 + 40, v16, "ClosureAnalytics.NumHardClosures", (char *)&v37, v20, (int *)__p);
      v16 += 48;
      *(void *)(a2 + 32) = v16;
      *(void *)(a2 + 32) = v16;
      if (*(unsigned char *)(a1 + 84)) {
        goto LABEL_49;
      }
    }
LABEL_13:
    uint64_t v21 = (unsigned int *)(a1 + 80);
    if (!*(_DWORD *)(a1 + 80)) {
      goto LABEL_14;
    }
LABEL_53:
    v37.__r_.__value_.__s.__data_[0] = 4;
    LODWORD(__p[0]) = 0;
    if (v16 >= *v5)
    {
      unint64_t v16 = sub_CFC780((uint64_t *)(a2 + 24), "ClosureAnalytics.NumGeometryPatches", (char *)&v37, v21, (int *)__p);
      *(void *)(a2 + 32) = v16;
      unint64_t v22 = (unsigned __int8 *)(a1 + 64);
      if (*(unsigned char *)(a1 + 64)) {
        goto LABEL_57;
      }
    }
    else
    {
      sub_CFC958(a2 + 40, v16, "ClosureAnalytics.NumGeometryPatches", (char *)&v37, v21, (int *)__p);
      v16 += 48;
      *(void *)(a2 + 32) = v16;
      *(void *)(a2 + 32) = v16;
      unint64_t v22 = (unsigned __int8 *)(a1 + 64);
      if (*(unsigned char *)(a1 + 64)) {
        goto LABEL_57;
      }
    }
LABEL_15:
    if (*(unsigned char *)(a1 + 101)) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
LABEL_33:
  LOBYTE(__p[0]) = 2;
  if (v16 >= *v5)
  {
    unint64_t v16 = sub_C94B34((uint64_t *)(a2 + 24), "RouteAnalytics.Size", (char *)__p, v17);
    *(void *)(a2 + 32) = v16;
    uint64_t v18 = (unsigned int *)(a1 + 68);
    if (*(_DWORD *)(a1 + 68)) {
      goto LABEL_37;
    }
  }
  else
  {
    sub_C94D04(a2 + 40, v16, "RouteAnalytics.Size", (char *)__p, v17);
    v16 += 48;
    *(void *)(a2 + 32) = v16;
    *(void *)(a2 + 32) = v16;
    uint64_t v18 = (unsigned int *)(a1 + 68);
    if (*(_DWORD *)(a1 + 68)) {
      goto LABEL_37;
    }
  }
LABEL_10:
  uint64_t v19 = (unsigned int *)(a1 + 72);
  if (!*(_DWORD *)(a1 + 72)) {
    goto LABEL_11;
  }
LABEL_41:
  v37.__r_.__value_.__s.__data_[0] = 4;
  LODWORD(__p[0]) = 0;
  if (v16 >= *v5)
  {
    unint64_t v16 = sub_CFBDA8((uint64_t *)(a2 + 24), "ClosureAnalytics.NumInactiveSoftClosures", (char *)&v37, v19, (int *)__p);
    *(void *)(a2 + 32) = v16;
    uint64_t v20 = (unsigned int *)(a1 + 76);
    if (*(_DWORD *)(a1 + 76)) {
      goto LABEL_45;
    }
  }
  else
  {
    sub_CFBF80(a2 + 40, v16, "ClosureAnalytics.NumInactiveSoftClosures", (char *)&v37, v19, (int *)__p);
    v16 += 48;
    *(void *)(a2 + 32) = v16;
    *(void *)(a2 + 32) = v16;
    uint64_t v20 = (unsigned int *)(a1 + 76);
    if (*(_DWORD *)(a1 + 76)) {
      goto LABEL_45;
    }
  }
LABEL_12:
  if (!*(unsigned char *)(a1 + 84)) {
    goto LABEL_13;
  }
LABEL_49:
  LOBYTE(v35) = 4;
  LODWORD(__p[0]) = 1;
  LODWORD(v37.__r_.__value_.__l.__data_) = 0;
  if (v16 >= *v5)
  {
    unint64_t v16 = sub_CFC438((uint64_t *)(a2 + 24), "ClosureAnalytics.RoutesContainClosureColor", (char *)&v35, (int *)__p, (int *)&v37);
    *(void *)(a2 + 32) = v16;
    uint64_t v21 = (unsigned int *)(a1 + 80);
    if (*(_DWORD *)(a1 + 80)) {
      goto LABEL_53;
    }
  }
  else
  {
    sub_CFC610(a2 + 40, v16, "ClosureAnalytics.RoutesContainClosureColor", (char *)&v35, (int *)__p, (int *)&v37);
    v16 += 48;
    *(void *)(a2 + 32) = v16;
    *(void *)(a2 + 32) = v16;
    uint64_t v21 = (unsigned int *)(a1 + 80);
    if (*(_DWORD *)(a1 + 80)) {
      goto LABEL_53;
    }
  }
LABEL_14:
  unint64_t v22 = (unsigned __int8 *)(a1 + 64);
  if (!*(unsigned char *)(a1 + 64)) {
    goto LABEL_15;
  }
LABEL_57:
  v37.__r_.__value_.__s.__data_[0] = 4;
  LODWORD(__p[0]) = 0;
  if (v16 >= *v5)
  {
    uint64_t v23 = sub_CFCAC8((uint64_t *)(a2 + 24), "IsReroute", (char *)&v37, v22, (int *)__p);
  }
  else
  {
    sub_CFCCA0(a2 + 40, v16, "IsReroute", (char *)&v37, v22, (int *)__p);
    uint64_t v23 = v16 + 48;
    *(void *)(a2 + 32) = v16 + 48;
  }
  *(void *)(a2 + 32) = v23;
  if (*(unsigned char *)(a1 + 101)) {
    goto LABEL_62;
  }
LABEL_61:
  if (*(unsigned char *)(a1 + 100)) {
    goto LABEL_62;
  }
  double v26 = *(double *)(a1 + 88);
  if (v26 == 0.0 || fabs(v26) < 2.22044605e-16) {
    goto LABEL_62;
  }
  std::to_string(&v37, *(_DWORD *)(a1 + 96));
  uint64_t v27 = std::string::insert(&v37, 0, "EV.PredictionError.RelativeErrorRate.KM_");
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  std::string::size_type v39 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  char v36 = 6;
  double v29 = *(double *)(a1 + 88) * 100.0;
  double v35 = v29;
  unint64_t v30 = *(void *)(a2 + 32);
  if (v30 >= *(void *)(a2 + 40))
  {
    int64_t v33 = sub_CFCE10((char **)(a2 + 24), (uint64_t)__p, &v36, &v35);
    char v34 = HIBYTE(v39);
    *(void *)(a2 + 32) = v33;
    if ((v34 & 0x80) == 0) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  char v31 = HIBYTE(v39);
  if (SHIBYTE(v39) < 0)
  {
    sub_4200(*(unsigned char **)(a2 + 32), __p[0], (unint64_t)__p[1]);
  }
  else
  {
    long long v32 = *(_OWORD *)__p;
    *(void *)(v30 + 16) = v39;
    *(_OWORD *)unint64_t v30 = v32;
  }
  *(unsigned char *)(v30 + 24) = 6;
  *(void *)(v30 + 32) = (uint64_t)v29;
  *(_DWORD *)(v30 + 40) = 1;
  *(void *)(a2 + 32) = v30 + 48;
  *(void *)(a2 + 32) = v30 + 48;
  if (v31 < 0) {
LABEL_77:
  }
    operator delete(__p[0]);
LABEL_78:
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
LABEL_62:
  if (*(unsigned char *)(a1 + 102))
  {
    LOBYTE(v35) = 4;
    LODWORD(__p[0]) = 1;
    LODWORD(v37.__r_.__value_.__l.__data_) = 0;
    unint64_t v24 = *(void *)(a2 + 32);
    if (v24 >= *(void *)(a2 + 40))
    {
      uint64_t v25 = sub_CFD030((uint64_t *)(a2 + 24), "IsMetricsRelevant", (char *)&v35, (int *)__p, (int *)&v37);
    }
    else
    {
      sub_CFD208(a2 + 40, *(void *)(a2 + 32), "IsMetricsRelevant", (char *)&v35, (int *)__p, (int *)&v37);
      uint64_t v25 = v24 + 48;
      *(void *)(a2 + 32) = v24 + 48;
    }
    *(void *)(a2 + 32) = v25;
  }
}

void sub_CFB08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)(v23 + 32) = v24;
  operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    sub_A3A4(v23);
    _Unwind_Resume(a1);
  }
  sub_A3A4(v23);
  _Unwind_Resume(a1);
}

void sub_CFB0F4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB108(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB11C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB134(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB148(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB160(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB174(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB18C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB1A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB1B8(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB1CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB1E4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB1F8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB210(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB224(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB23C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB250(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB268(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB27C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB294(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB2A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB2C0(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB2D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB2EC(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB300(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB314(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB328(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB33C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB354(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB36C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB384(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFB39C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

__n128 sub_CFB3B0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = a3[32];
  if (v7)
  {
    sub_C5C1FC((uint64_t)(a3 + 32), v7);
    operator delete((void *)a3[32]);
  }
  uint64_t v8 = a3[29];
  if (v8)
  {
    uint64_t v9 = a3[30];
    unint64_t v10 = (void *)a3[29];
    if (v9 != v8)
    {
      do
        uint64_t v9 = sub_11C6DFC(v9 - 64);
      while (v9 != v8);
      unint64_t v10 = (void *)a3[29];
    }
    a3[30] = v8;
    operator delete(v10);
  }
  sub_11B1868(a3);
  *(_OWORD *)a2 = *(_OWORD *)a4;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  __n128 result = *(__n128 *)(a4 + 16);
  *(__n128 *)(a2 + 16) = result;
  *(void *)(a2 + 32) = *(void *)(a4 + 32);
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a4 + 40);
  return result;
}

uint64_t sub_CFB46C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 2) != 0)
    {
      long long v5 = 0;
    }
    else
    {
      long long v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      if (v4) {
        long long v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        uint64_t v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_11B341C(a1, a2);
    }
    else {
      sub_11B33A4(a1, a2);
    }
  }
  uint64_t v8 = (void **)(a1 + 232);
  uint64_t v9 = *(void *)(a1 + 232);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 240);
    long long v11 = *(void **)(a1 + 232);
    if (v10 != v9)
    {
      do
        uint64_t v10 = sub_11C6DFC(v10 - 64);
      while (v10 != v9);
      long long v11 = *v8;
    }
    *(void *)(a1 + 240) = v9;
    operator delete(v11);
    *uint64_t v8 = 0;
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
  }
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  uint64_t v12 = *(void *)(a1 + 256);
  if (v12)
  {
    sub_C5C1FC(a1 + 256, v12);
    operator delete(*(void **)(a1 + 256));
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
  }
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  return a1;
}

uint64_t sub_CFB5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_4445E8(a1 + 72, *a7, a7[1], 0xCCCCCCCCCCCCCCCDLL * ((a7[1] - *a7) >> 5));
  *(_WORD *)(a1 + 96) = 0;
  sub_485C30(a8, a1 + 104);
  *(void *)(a1 + 136) = a8;
  *(void *)(a1 + 144) = sub_4877D8(a8);
  *(void *)(a1 + 152) = v10;
  sub_DBBED8(*(void *)(a1 + 16), a1 + 160);
  *(void *)(a1 + 264) = -1;
  *(_DWORD *)(a1 + 272) = 0x7FFFFFFF;
  *(void *)(a1 + 280) = -1;
  *(void *)(a1 + 288) = -1;
  *(void *)(a1 + 296) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = -1935635296;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 327) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(unsigned char *)(a1 + 364) = 100;
  *(void *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 376) = 0;
  *(unsigned char *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 576) = xmmword_20B8E30;
  *(void *)(a1 + 592) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 616) = 0;
  *(_DWORD *)(a1 + 624) = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 608) = 0;
  *(unsigned char *)(a1 + 632) = 0;
  *(_DWORD *)(a1 + 636) = 0;
  return a1;
}

void sub_CFB6EC(_Unwind_Exception *a1)
{
  sub_C7E6AC(v1);
  _Unwind_Resume(a1);
}

void sub_CFB700(_Unwind_Exception *a1)
{
  sub_485FC0(v2);
  sub_C7E6AC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CFB71C(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    long long v11 = (char *)operator new(48 * v10);
  }
  else
  {
    long long v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_CFB8EC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  long long v14 = (char *)*a1;
  long long v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    long long v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      long long v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_CFB8D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CFB8EC(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_CFBA4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CFBA60(uint64_t *a1, char *a2, char *a3, unsigned int *a4, int *a5)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v7;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v22 = (uint64_t)&v13[48 * v6];
  uint64_t v23 = &v13[48 * v12];
  sub_CFBC38(a1 + 16, v22, a2, a3, a4, a5);
  uint64_t v14 = v22;
  uint64_t v15 = v22 + 48;
  long long v16 = (char *)*a1;
  long long v17 = (char *)a1[1];
  if (v17 == (char *)*a1)
  {
    *a1 = v22;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
  }
  else
  {
    do
    {
      long long v18 = *((_OWORD *)v17 - 3);
      *(void *)(v14 - 32) = *((void *)v17 - 4);
      *(_OWORD *)(v14 - 48) = v18;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 6) = 0;
      long long v19 = *(_OWORD *)(v17 - 24);
      *(_DWORD *)(v14 - 8) = *((_DWORD *)v17 - 2);
      *(_OWORD *)(v14 - 24) = v19;
      v14 -= 48;
      v17 -= 48;
    }
    while (v17 != v16);
    uint64_t v20 = (char *)*a1;
    long long v17 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
    if (v17 != v20)
    {
      do
      {
        if (*(v17 - 25) < 0) {
          operator delete(*((void **)v17 - 6));
        }
        v17 -= 48;
      }
      while (v17 != v20);
      long long v17 = v20;
    }
  }
  if (v17) {
    operator delete(v17);
  }
  return v22 + 48;
}

void sub_CFBC24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CFBC38(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5, int *a6)
{
  size_t v11 = strlen(__s);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v17 = v11 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v12;
    unint64_t v21 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v12);
    *((unsigned char *)p_dst + v12) = 0;
    char v14 = *a4;
    uint64_t v15 = *a5;
    int v16 = *a6;
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v21) = v11;
  p_dst = &__dst;
  if (v11) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v14 = *a4;
  uint64_t v15 = *a5;
  int v16 = *a6;
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v21;
    *(unsigned char *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v15;
    *(_DWORD *)(a2 + 40) = v16;
    return;
  }
LABEL_10:
  long long v19 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v15;
  *(_DWORD *)(a2 + 40) = v16;

  operator delete(v19);
}

void sub_CFBD94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CFBDA8(uint64_t *a1, char *a2, char *a3, unsigned int *a4, int *a5)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v7;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v22 = (uint64_t)&v13[48 * v6];
  uint64_t v23 = &v13[48 * v12];
  sub_CFBF80(a1 + 16, v22, a2, a3, a4, a5);
  uint64_t v14 = v22;
  uint64_t v15 = v22 + 48;
  int v16 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  if (v17 == (char *)*a1)
  {
    *a1 = v22;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
  }
  else
  {
    do
    {
      long long v18 = *((_OWORD *)v17 - 3);
      *(void *)(v14 - 32) = *((void *)v17 - 4);
      *(_OWORD *)(v14 - 48) = v18;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 6) = 0;
      long long v19 = *(_OWORD *)(v17 - 24);
      *(_DWORD *)(v14 - 8) = *((_DWORD *)v17 - 2);
      *(_OWORD *)(v14 - 24) = v19;
      v14 -= 48;
      v17 -= 48;
    }
    while (v17 != v16);
    uint64_t v20 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
    if (v17 != v20)
    {
      do
      {
        if (*(v17 - 25) < 0) {
          operator delete(*((void **)v17 - 6));
        }
        v17 -= 48;
      }
      while (v17 != v20);
      uint64_t v17 = v20;
    }
  }
  if (v17) {
    operator delete(v17);
  }
  return v22 + 48;
}

void sub_CFBF6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CFBF80(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5, int *a6)
{
  size_t v11 = strlen(__s);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v17 = v11 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v12;
    unint64_t v21 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v12);
    *((unsigned char *)p_dst + v12) = 0;
    char v14 = *a4;
    uint64_t v15 = *a5;
    int v16 = *a6;
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v21) = v11;
  p_dst = &__dst;
  if (v11) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v14 = *a4;
  uint64_t v15 = *a5;
  int v16 = *a6;
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v21;
    *(unsigned char *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v15;
    *(_DWORD *)(a2 + 40) = v16;
    return;
  }
LABEL_10:
  long long v19 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v15;
  *(_DWORD *)(a2 + 40) = v16;

  operator delete(v19);
}

void sub_CFC0DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CFC0F0(uint64_t *a1, char *a2, char *a3, unsigned int *a4, int *a5)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v7;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v22 = (uint64_t)&v13[48 * v6];
  uint64_t v23 = &v13[48 * v12];
  sub_CFC2C8(a1 + 16, v22, a2, a3, a4, a5);
  uint64_t v14 = v22;
  uint64_t v15 = v22 + 48;
  int v16 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  if (v17 == (char *)*a1)
  {
    *a1 = v22;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
  }
  else
  {
    do
    {
      long long v18 = *((_OWORD *)v17 - 3);
      *(void *)(v14 - 32) = *((void *)v17 - 4);
      *(_OWORD *)(v14 - 48) = v18;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 6) = 0;
      long long v19 = *(_OWORD *)(v17 - 24);
      *(_DWORD *)(v14 - 8) = *((_DWORD *)v17 - 2);
      *(_OWORD *)(v14 - 24) = v19;
      v14 -= 48;
      v17 -= 48;
    }
    while (v17 != v16);
    uint64_t v20 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
    if (v17 != v20)
    {
      do
      {
        if (*(v17 - 25) < 0) {
          operator delete(*((void **)v17 - 6));
        }
        v17 -= 48;
      }
      while (v17 != v20);
      uint64_t v17 = v20;
    }
  }
  if (v17) {
    operator delete(v17);
  }
  return v22 + 48;
}

void sub_CFC2B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CFC2C8(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5, int *a6)
{
  size_t v11 = strlen(__s);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v17 = v11 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v12;
    unint64_t v21 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v12);
    *((unsigned char *)p_dst + v12) = 0;
    char v14 = *a4;
    uint64_t v15 = *a5;
    int v16 = *a6;
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v21) = v11;
  p_dst = &__dst;
  if (v11) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v14 = *a4;
  uint64_t v15 = *a5;
  int v16 = *a6;
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v21;
    *(unsigned char *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v15;
    *(_DWORD *)(a2 + 40) = v16;
    return;
  }
LABEL_10:
  long long v19 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v15;
  *(_DWORD *)(a2 + 40) = v16;

  operator delete(v19);
}

void sub_CFC424(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CFC438(uint64_t *a1, char *a2, char *a3, int *a4, int *a5)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v7;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v22 = (uint64_t)&v13[48 * v6];
  uint64_t v23 = &v13[48 * v12];
  sub_CFC610(a1 + 16, v22, a2, a3, a4, a5);
  uint64_t v14 = v22;
  uint64_t v15 = v22 + 48;
  int v16 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  if (v17 == (char *)*a1)
  {
    *a1 = v22;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
  }
  else
  {
    do
    {
      long long v18 = *((_OWORD *)v17 - 3);
      *(void *)(v14 - 32) = *((void *)v17 - 4);
      *(_OWORD *)(v14 - 48) = v18;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 6) = 0;
      long long v19 = *(_OWORD *)(v17 - 24);
      *(_DWORD *)(v14 - 8) = *((_DWORD *)v17 - 2);
      *(_OWORD *)(v14 - 24) = v19;
      v14 -= 48;
      v17 -= 48;
    }
    while (v17 != v16);
    uint64_t v20 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
    if (v17 != v20)
    {
      do
      {
        if (*(v17 - 25) < 0) {
          operator delete(*((void **)v17 - 6));
        }
        v17 -= 48;
      }
      while (v17 != v20);
      uint64_t v17 = v20;
    }
  }
  if (v17) {
    operator delete(v17);
  }
  return v22 + 48;
}

void sub_CFC5FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CFC610(int a1, uint64_t a2, char *__s, char *a4, int *a5, int *a6)
{
  size_t v11 = strlen(__s);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v17 = v11 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v12;
    unint64_t v21 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v12);
    *((unsigned char *)p_dst + v12) = 0;
    char v14 = *a4;
    uint64_t v15 = *a5;
    int v16 = *a6;
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v21) = v11;
  p_dst = &__dst;
  if (v11) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v14 = *a4;
  uint64_t v15 = *a5;
  int v16 = *a6;
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v21;
    *(unsigned char *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v15;
    *(_DWORD *)(a2 + 40) = v16;
    return;
  }
LABEL_10:
  long long v19 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v15;
  *(_DWORD *)(a2 + 40) = v16;

  operator delete(v19);
}

void sub_CFC76C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CFC780(uint64_t *a1, char *a2, char *a3, unsigned int *a4, int *a5)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v7;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v22 = (uint64_t)&v13[48 * v6];
  uint64_t v23 = &v13[48 * v12];
  sub_CFC958(a1 + 16, v22, a2, a3, a4, a5);
  uint64_t v14 = v22;
  uint64_t v15 = v22 + 48;
  int v16 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  if (v17 == (char *)*a1)
  {
    *a1 = v22;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
  }
  else
  {
    do
    {
      long long v18 = *((_OWORD *)v17 - 3);
      *(void *)(v14 - 32) = *((void *)v17 - 4);
      *(_OWORD *)(v14 - 48) = v18;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 6) = 0;
      long long v19 = *(_OWORD *)(v17 - 24);
      *(_DWORD *)(v14 - 8) = *((_DWORD *)v17 - 2);
      *(_OWORD *)(v14 - 24) = v19;
      v14 -= 48;
      v17 -= 48;
    }
    while (v17 != v16);
    uint64_t v20 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
    if (v17 != v20)
    {
      do
      {
        if (*(v17 - 25) < 0) {
          operator delete(*((void **)v17 - 6));
        }
        v17 -= 48;
      }
      while (v17 != v20);
      uint64_t v17 = v20;
    }
  }
  if (v17) {
    operator delete(v17);
  }
  return v22 + 48;
}

void sub_CFC944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CFC958(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5, int *a6)
{
  size_t v11 = strlen(__s);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v17 = v11 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v12;
    unint64_t v21 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v12);
    *((unsigned char *)p_dst + v12) = 0;
    char v14 = *a4;
    uint64_t v15 = *a5;
    int v16 = *a6;
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v21) = v11;
  p_dst = &__dst;
  if (v11) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v14 = *a4;
  uint64_t v15 = *a5;
  int v16 = *a6;
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v21;
    *(unsigned char *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v15;
    *(_DWORD *)(a2 + 40) = v16;
    return;
  }
LABEL_10:
  long long v19 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v15;
  *(_DWORD *)(a2 + 40) = v16;

  operator delete(v19);
}

void sub_CFCAB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CFCAC8(uint64_t *a1, char *a2, char *a3, unsigned __int8 *a4, int *a5)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v7;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v22 = (uint64_t)&v13[48 * v6];
  uint64_t v23 = &v13[48 * v12];
  sub_CFCCA0(a1 + 16, v22, a2, a3, a4, a5);
  uint64_t v14 = v22;
  uint64_t v15 = v22 + 48;
  int v16 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  if (v17 == (char *)*a1)
  {
    *a1 = v22;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
  }
  else
  {
    do
    {
      long long v18 = *((_OWORD *)v17 - 3);
      *(void *)(v14 - 32) = *((void *)v17 - 4);
      *(_OWORD *)(v14 - 48) = v18;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 6) = 0;
      long long v19 = *(_OWORD *)(v17 - 24);
      *(_DWORD *)(v14 - 8) = *((_DWORD *)v17 - 2);
      *(_OWORD *)(v14 - 24) = v19;
      v14 -= 48;
      v17 -= 48;
    }
    while (v17 != v16);
    uint64_t v20 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
    if (v17 != v20)
    {
      do
      {
        if (*(v17 - 25) < 0) {
          operator delete(*((void **)v17 - 6));
        }
        v17 -= 48;
      }
      while (v17 != v20);
      uint64_t v17 = v20;
    }
  }
  if (v17) {
    operator delete(v17);
  }
  return v22 + 48;
}

void sub_CFCC8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CFCCA0(int a1, uint64_t a2, char *__s, char *a4, unsigned __int8 *a5, int *a6)
{
  size_t v11 = strlen(__s);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v17 = v11 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v12;
    unint64_t v21 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v12);
    *((unsigned char *)p_dst + v12) = 0;
    char v14 = *a4;
    uint64_t v15 = *a5;
    int v16 = *a6;
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v21) = v11;
  p_dst = &__dst;
  if (v11) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v14 = *a4;
  uint64_t v15 = *a5;
  int v16 = *a6;
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v21;
    *(unsigned char *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v15;
    *(_DWORD *)(a2 + 40) = v16;
    return;
  }
LABEL_10:
  long long v19 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v15;
  *(_DWORD *)(a2 + 40) = v16;

  operator delete(v19);
}

void sub_CFCDFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_CFCE10(char **a1, uint64_t a2, char *a3, double *a4)
{
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v5) >> 4) > v8) {
    unint64_t v8 = 0x5555555555555556 * ((a1[2] - v5) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v8;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  char v14 = &v13[48 * v7];
  uint64_t v24 = &v13[48 * v12];
  char v15 = *a3;
  double v16 = *a4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v14, *(void **)a2, *(void *)(a2 + 8));
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    char v14 = &v13[48 * v7];
  }
  else
  {
    *(_OWORD *)char v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
  }
  uint64_t v17 = &v13[48 * v7];
  v17[24] = v15;
  *((void *)v17 + 4) = (uint64_t)v16;
  *((_DWORD *)v17 + 10) = 1;
  uint64_t v18 = v17 + 48;
  if (v6 == v5)
  {
    unint64_t v21 = v5;
  }
  else
  {
    do
    {
      long long v19 = *((_OWORD *)v6 - 3);
      *((void *)v14 - 4) = *((void *)v6 - 4);
      *((_OWORD *)v14 - 3) = v19;
      *((void *)v6 - 5) = 0;
      *((void *)v6 - 4) = 0;
      *((void *)v6 - 6) = 0;
      long long v20 = *(_OWORD *)(v6 - 24);
      *((_DWORD *)v14 - 2) = *((_DWORD *)v6 - 2);
      *(_OWORD *)(v14 - 24) = v20;
      v14 -= 48;
      v6 -= 48;
    }
    while (v6 != v5);
    unint64_t v21 = *a1;
    unint64_t v5 = a1[1];
  }
  *a1 = v14;
  a1[1] = v18;
  a1[2] = v24;
  if (v5 != v21)
  {
    uint64_t v22 = (void **)(v5 - 48);
    do
    {
      if (*((char *)v22 + 23) < 0) {
        operator delete(*v22);
      }
      v22 -= 6;
    }
    while (v22 + 6 != (void **)v21);
    unint64_t v5 = v21;
  }
  if (v5) {
    operator delete(v5);
  }
  return v18;
}

void sub_CFD01C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_CFD030(uint64_t *a1, char *a2, char *a3, int *a4, int *a5)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v7;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v22 = (uint64_t)&v13[48 * v6];
  uint64_t v23 = &v13[48 * v12];
  sub_CFD208(a1 + 16, v22, a2, a3, a4, a5);
  uint64_t v14 = v22;
  uint64_t v15 = v22 + 48;
  double v16 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  if (v17 == (char *)*a1)
  {
    *a1 = v22;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
  }
  else
  {
    do
    {
      long long v18 = *((_OWORD *)v17 - 3);
      *(void *)(v14 - 32) = *((void *)v17 - 4);
      *(_OWORD *)(v14 - 48) = v18;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 6) = 0;
      long long v19 = *(_OWORD *)(v17 - 24);
      *(_DWORD *)(v14 - 8) = *((_DWORD *)v17 - 2);
      *(_OWORD *)(v14 - 24) = v19;
      v14 -= 48;
      v17 -= 48;
    }
    while (v17 != v16);
    long long v20 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
    if (v17 != v20)
    {
      do
      {
        if (*(v17 - 25) < 0) {
          operator delete(*((void **)v17 - 6));
        }
        v17 -= 48;
      }
      while (v17 != v20);
      uint64_t v17 = v20;
    }
  }
  if (v17) {
    operator delete(v17);
  }
  return v22 + 48;
}

void sub_CFD1F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CFD208(int a1, uint64_t a2, char *__s, char *a4, int *a5, int *a6)
{
  size_t v11 = strlen(__s);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v17 = v11 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v12;
    unint64_t v21 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v12);
    *((unsigned char *)p_dst + v12) = 0;
    char v14 = *a4;
    uint64_t v15 = *a5;
    int v16 = *a6;
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v21) = v11;
  p_dst = &__dst;
  if (v11) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v14 = *a4;
  uint64_t v15 = *a5;
  int v16 = *a6;
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v21;
    *(unsigned char *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v15;
    *(_DWORD *)(a2 + 40) = v16;
    return;
  }
LABEL_10:
  long long v19 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v15;
  *(_DWORD *)(a2 + 40) = v16;

  operator delete(v19);
}

void sub_CFD364(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_CFD378(void *a1)
{
  sub_402C7C((uint64_t)(a1 + 33));
  uint64_t v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (char **)a1[14];
  if (v3)
  {
    uint64_t v4 = (char **)a1[15];
    unint64_t v5 = (void *)a1[14];
    if (v4 != v3)
    {
      do
      {
        v4 -= 9;
        sub_3A688C((uint64_t)(a1 + 16), v4);
      }
      while (v4 != v3);
      unint64_t v5 = (void *)a1[14];
    }
    a1[15] = v3;
    operator delete(v5);
  }
  uint64_t v6 = a1[9];
  if (v6)
  {
    uint64_t v7 = a1[10];
    unint64_t v8 = (void *)a1[9];
    if (v7 != v6)
    {
      do
      {
        size_t v9 = *(void **)(v7 - 32);
        if (v9)
        {
          *(void *)(v7 - 24) = v9;
          operator delete(v9);
        }
        size_t v10 = *(void **)(v7 - 56);
        if (v10)
        {
          *(void *)(v7 - 48) = v10;
          operator delete(v10);
        }
        size_t v11 = *(void **)(v7 - 88);
        if (v11)
        {
          *(void *)(v7 - 80) = v11;
          operator delete(v11);
        }
        v7 -= 160;
      }
      while (v7 != v6);
      unint64_t v8 = (void *)a1[9];
    }
    a1[10] = v6;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_CFD464(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      sub_CFD8A0(a1 + 8, a2 + 8);
      goto LABEL_17;
    }
    sub_162D64C(a1 + 568);
    sub_162D64C(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
LABEL_13:
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    goto LABEL_17;
  }
  if (!*(unsigned char *)a2)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(a1 + 24);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0) {
          operator delete(*(void **)(v5 - 24));
        }
        v5 -= 32;
      }
      while (v5 != v4);
      uint64_t v6 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v4;
    operator delete(v6);
  }
  sub_C6B2B4(a1 + 8, a2 + 8);
  sub_C6B2B4(a1 + 568, a2 + 568);
  long long v7 = *(_OWORD *)(a2 + 1128);
  long long v8 = *(_OWORD *)(a2 + 1144);
  *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
  *(_OWORD *)(a1 + 1144) = v8;
  *(_OWORD *)(a1 + 1128) = v7;
LABEL_17:
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

void sub_CFD5A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "ResponseBuilderModule");
  unint64_t v4 = *(void *)(a2 + 40);
  char v16 = 1;
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C947F8((uint64_t *)(a2 + 24), "Runtime", &v16, (uint64_t *)a1);
  }
  else
  {
    sub_C949C8(a2 + 40, *(void *)(a2 + 32), "Runtime", &v16, (uint64_t *)a1);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  char v15 = 1;
  if (v6 >= *(void *)(a2 + 40))
  {
    unint64_t v7 = sub_354F9C((uint64_t *)(a2 + 24), "SimpleRoutesResponse.Runtime", &v15, (uint64_t *)(a1 + 8));
  }
  else
  {
    sub_35516C(a2 + 40, v6, "SimpleRoutesResponse.Runtime", &v15, (uint64_t *)(a1 + 8));
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
  char v14 = 1;
  if (v7 >= *(void *)(a2 + 40))
  {
    unint64_t v8 = sub_C96514((uint64_t *)(a2 + 24), "WaypointRoutesResponse.Runtime", &v14, (uint64_t *)(a1 + 16));
  }
  else
  {
    sub_C966E4(a2 + 40, v7, "WaypointRoutesResponse.Runtime", &v14, (uint64_t *)(a1 + 16));
    unint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v8;
  }
  *(void *)(a2 + 32) = v8;
  char v13 = 2;
  if (v8 >= *(void *)(a2 + 40))
  {
    unint64_t v9 = sub_C94E70((uint64_t *)(a2 + 24), "SessionState.Size", &v13, (uint64_t *)(a1 + 24));
    *(void *)(a2 + 32) = v9;
    if (!*(unsigned char *)(a1 + 32)) {
      return;
    }
  }
  else
  {
    sub_C95040(a2 + 40, v8, "SessionState.Size", &v13, (uint64_t *)(a1 + 24));
    unint64_t v9 = v8 + 48;
    *(void *)(a2 + 32) = v9;
    *(void *)(a2 + 32) = v9;
    if (!*(unsigned char *)(a1 + 32)) {
      return;
    }
  }
  char v12 = 4;
  int v11 = 1;
  if (v9 >= *(void *)(a2 + 40))
  {
    uint64_t v10 = sub_CFE33C((uint64_t *)(a2 + 24), "Response.ContainsIncidentsOffRoute", &v12, &v11);
  }
  else
  {
    sub_CFE50C(a2 + 40, v9, "Response.ContainsIncidentsOffRoute", &v12, &v11);
    uint64_t v10 = v9 + 48;
    *(void *)(a2 + 32) = v9 + 48;
  }
  *(void *)(a2 + 32) = v10;
}

void sub_CFD800(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFD814(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_CFD88C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CFD8A0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 2) != 0)
    {
      unint64_t v5 = 0;
    }
    else
    {
      unint64_t v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      if (v4) {
        unint64_t v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      unint64_t v7 = 0;
    }
    else
    {
      unint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        unint64_t v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_16323C4(a1, a2);
    }
    else {
      sub_1632068(a1, a2);
    }
    uint64_t v8 = *(void *)(a1 + 568);
    if ((v8 & 2) != 0)
    {
      unint64_t v9 = 0;
    }
    else
    {
      unint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      if (v8) {
        unint64_t v9 = (void *)*v9;
      }
    }
    uint64_t v10 = a1 + 560;
    uint64_t v11 = a2 + 560;
    uint64_t v12 = *(void *)(a2 + 568);
    if ((v12 & 2) != 0)
    {
      char v13 = 0;
    }
    else
    {
      char v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
      if (v12) {
        char v13 = (void *)*v13;
      }
    }
    if (v9 == v13) {
      sub_16323C4(v10, v11);
    }
    else {
      sub_1632068(v10, v11);
    }
  }
  long long v14 = *(_OWORD *)(a2 + 1120);
  long long v15 = *(_OWORD *)(a2 + 1136);
  *(unsigned char *)(a1 + 1152) = *(unsigned char *)(a2 + 1152);
  *(_OWORD *)(a1 + 1136) = v15;
  *(_OWORD *)(a1 + 1120) = v14;
  return a1;
}

uint64_t sub_CFD9A0(uint64_t a1, uint64_t a2, void *a3, uint64_t **a4, uint64_t a5, _OWORD *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v54 = *a7;
  uint64_t v55 = 0;
  long long v15 = (long long *)sub_377D04(a5);
  char v67 = 1;
  sub_29E004((char *)__dst, v15);
  sub_DC000C(a2, (uint64_t)__dst, (uint64_t)&v45);
  char v34 = a6;
  uint64_t v16 = sub_37B3A8(a5);
  uint64_t v17 = *(void *)v16;
  LODWORD(a6) = *(_DWORD *)(v16 + 8);
  sub_4F29BC((uint64_t)v58);
  uint64_t v60 = 0;
  long long v59 = 0u;
  char v18 = sub_DB7034(a2);
  char v19 = sub_CFDD50(a2, a4, a3, a5);
  sub_DBBB30(a2, (uint64_t)&v44);
  uint64_t v41 = 0;
  uint64_t v42 = sub_DBC410(a2);
  int v43 = v20;
  std::string::size_type v39 = 0;
  char v40 = 0;
  uint64_t v38 = *a8;
  LOBYTE(a8) = sub_DB7530(a2);
  *(_OWORD *)long long __p = 0u;
  long long v36 = 0u;
  int v37 = 1065353216;
  uint64_t v21 = sub_DC6EB0(a2);
  uint64_t v22 = a1;
  sub_CFDEBC(a1, (uint64_t)a3, a4, a5, v34, (uint64_t)&v55, &v54, &v45, v17, (int)a6, (uint64_t)v58, v18, v19, &v44, &v42, (uint64_t)&v39, &v38, (char)a8, (uint64_t *)__p,
    v21);
  uint64_t v23 = (void **)v36;
  if ((void)v36)
  {
    do
    {
      long long v28 = (void **)*v23;
      sub_55198((uint64_t)(v23 + 5));
      if (*((char *)v23 + 39) < 0) {
        operator delete(v23[2]);
      }
      operator delete(v23);
      uint64_t v23 = v28;
    }
    while (v28);
  }
  uint64_t v24 = __p[0];
  __p[0] = 0;
  if (v24) {
    operator delete(v24);
  }
  uint64_t v25 = (void **)v39;
  if (v39)
  {
    double v26 = v40;
    uint64_t v27 = v39;
    if (v40 != v39)
    {
      do
      {
        if (*((char *)v26 - 1) < 0) {
          operator delete(*(v26 - 3));
        }
        v26 -= 3;
      }
      while (v26 != v25);
      uint64_t v27 = v39;
    }
    char v40 = v25;
    operator delete(v27);
  }
  uint64_t v29 = v59;
  if ((void)v59)
  {
    uint64_t v30 = *((void *)&v59 + 1);
    char v31 = (void *)v59;
    if (*((void *)&v59 + 1) != (void)v59)
    {
      do
        uint64_t v30 = sub_3A6B94(v30 - 1120);
      while (v30 != v29);
      char v31 = (void *)v59;
    }
    *((void *)&v59 + 1) = v29;
    operator delete(v31);
  }
  sub_4F2BD0(v58);
  if (v53 < 0) {
    operator delete(v52);
  }
  if (v50)
  {
    uint64_t v51 = v50;
    operator delete(v50);
  }
  if (v48)
  {
    uint64_t v49 = v48;
    operator delete(v48);
  }
  if (v46)
  {
    uint64_t v47 = v46;
    operator delete(v46);
  }
  if (v67)
  {
    if (v66 < 0)
    {
      operator delete(v65);
      if ((v64 & 0x80000000) == 0)
      {
LABEL_31:
        if ((v62 & 0x80000000) == 0) {
          goto LABEL_32;
        }
LABEL_37:
        operator delete(__dst[0]);
        long long v32 = v55;
        if (!v55) {
          return v22;
        }
        goto LABEL_33;
      }
    }
    else if ((v64 & 0x80000000) == 0)
    {
      goto LABEL_31;
    }
    operator delete(v63);
    if (v62 < 0) {
      goto LABEL_37;
    }
  }
LABEL_32:
  long long v32 = v55;
  if (v55)
  {
LABEL_33:
    uint64_t v56 = v32;
    operator delete(v32);
  }
  return v22;
}

void sub_CFDCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,char a60)
{
  sub_1A668(&a28);
  sub_C940D0((uint64_t)&a60);
  sub_CF1EE4((uint64_t)&a34);
  sub_CF1F54(v60 - 176);
  if (__p)
  {
    a58 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_CFDD50(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  unsigned int v7 = sub_DB7034(a1);
  if (!sub_DE7FB0(v7)) {
    return 0;
  }
  if (*a2 == a2[1] || *a3 == a3[1]) {
    return 0;
  }
  char v18 = 15;
  uint64_t v16 = 0;
  strcpy((char *)v17, "RerouteCategory");
  long long __p = 0;
  long long v15 = 0;
  uint64_t v8 = sub_374CDC(a4, (uint64_t)v17, (uint64_t *)&__p);
  sub_484AC4(&v19, v8);
  uint64_t v9 = sub_35E640();
  uint64_t v10 = (void **)__p;
  if (__p)
  {
    uint64_t v11 = v15;
    uint64_t v12 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      uint64_t v12 = __p;
    }
    long long v15 = v10;
    operator delete(v12);
  }
  if ((v18 & 0x80000000) == 0) {
    return v9;
  }
  operator delete(v17[0]);
  return v9;
}

void sub_CFDE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_CFDEBC(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, _OWORD *a5, uint64_t a6, void *a7, int *a8, uint64_t a9, int a10, uint64_t a11, char a12, char a13, void *a14, uint64_t *a15, uint64_t a16, void *a17, char a18, uint64_t *a19, uint64_t a20)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a6;
  *(void *)(a1 + 24) = *(void *)(a6 + 16);
  *(void *)(a6 + 16) = 0;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v26 = a1 + 32;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a11;
  *(void *)(a1 + 48) = *(void *)(a11 + 16);
  *(void *)(a11 + 16) = 0;
  *(_OWORD *)a11 = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a11 + 24);
  *(void *)(a1 + 72) = *(void *)(a11 + 40);
  *(void *)(a11 + 40) = 0;
  *(_OWORD *)(a11 + 24) = 0u;
  sub_4F4498(a1 + 80, a11 + 48);
  sub_4F4498(v26 + 544, a11 + 544);
  *(void *)(v26 + 1056) = 0;
  *(_OWORD *)(v26 + 1040) = 0u;
  *(_OWORD *)(v26 + 1040) = *(_OWORD *)(a11 + 1040);
  *(void *)(v26 + 1056) = *(void *)(a11 + 1056);
  *(void *)(a11 + 1056) = 0;
  *(_OWORD *)(a11 + 1040) = 0u;
  *(void *)(v26 + 1080) = 0;
  *(_OWORD *)(v26 + 1064) = 0u;
  *(void *)(v26 + 1064) = *(void *)(a11 + 1064);
  *(void *)(v26 + 1072) = *(void *)(a11 + 1072);
  *(void *)(v26 + 1080) = *(void *)(a11 + 1080);
  *(void *)(a11 + 1080) = 0;
  *(_OWORD *)(a11 + 1064) = 0u;
  *(void *)(v26 + 1104) = 0;
  *(_OWORD *)(v26 + 1088) = 0u;
  *(_OWORD *)(v26 + 1088) = *(_OWORD *)(a11 + 1088);
  *(void *)(v26 + 1104) = *(void *)(a11 + 1104);
  *(void *)(a11 + 1104) = 0;
  *(_OWORD *)(a11 + 1088) = 0u;
  int v27 = *a8;
  *(unsigned char *)(v26 + 1116) = *((unsigned char *)a8 + 4);
  *(_DWORD *)(v26 + 1112) = v27;
  *(void *)(v26 + 1120) = 0;
  *(void *)(v26 + 1136) = 0;
  *(void *)(v26 + 1128) = 0;
  *(_OWORD *)(v26 + 1120) = *(_OWORD *)(a8 + 2);
  *(void *)(v26 + 1136) = *((void *)a8 + 3);
  *((void *)a8 + 1) = 0;
  *((void *)a8 + 2) = 0;
  *((void *)a8 + 3) = 0;
  long long v28 = *((_OWORD *)a8 + 3);
  *(_OWORD *)(v26 + 1144) = *((_OWORD *)a8 + 2);
  *(_OWORD *)(v26 + 1160) = v28;
  *(_DWORD *)(v26 + 1176) = a8[16];
  *(void *)(v26 + 1184) = 0;
  *(void *)(v26 + 1200) = 0;
  *(void *)(v26 + 1192) = 0;
  *(_OWORD *)(v26 + 1184) = *(_OWORD *)(a8 + 18);
  *(void *)(v26 + 1200) = *((void *)a8 + 11);
  *((void *)a8 + 10) = 0;
  *((void *)a8 + 11) = 0;
  *((void *)a8 + 9) = 0;
  *(_DWORD *)(v26 + 1208) = a8[24];
  *(void *)(v26 + 1216) = 0;
  *(void *)(v26 + 1232) = 0;
  *(void *)(v26 + 1224) = 0;
  *(_OWORD *)(v26 + 1216) = *(_OWORD *)(a8 + 26);
  *(void *)(v26 + 1232) = *((void *)a8 + 15);
  *((void *)a8 + 13) = 0;
  *((void *)a8 + 14) = 0;
  *((void *)a8 + 15) = 0;
  long long v29 = *((_OWORD *)a8 + 8);
  *(void *)(v26 + 1256) = *((void *)a8 + 18);
  *(_OWORD *)(v26 + 1240) = v29;
  *((void *)a8 + 17) = 0;
  *((void *)a8 + 18) = 0;
  *((void *)a8 + 16) = 0;
  *(unsigned char *)(v26 + 1264) = *((unsigned char *)a8 + 152);
  uint64_t v30 = *((void *)a8 + 20);
  *(unsigned char *)(v26 + 1280) = *((unsigned char *)a8 + 168);
  *(void *)(v26 + 1272) = v30;
  *(void *)(v26 + 1288) = a4;
  char v31 = *a3;
  long long v32 = a3[1];
  if (*a3 != v32)
  {
    while (*((_DWORD *)v31 + 26))
    {
      v31 += 47;
      if (v31 == v32) {
        goto LABEL_6;
      }
    }
  }
  if (v31 == v32)
  {
LABEL_6:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7190))
    {
      sub_737C74((uint64_t)&qword_24F7018);
      __cxa_guard_release(&qword_24F7190);
    }
    char v31 = &qword_24F7018;
  }
  sub_48381C(v26 + 1296, (uint64_t)v31);
  int64_t v33 = *a3;
  char v34 = a3[1];
  if (*a3 != v34)
  {
    while (*((_DWORD *)v33 + 26) != 1)
    {
      v33 += 47;
      if (v33 == v34) {
        goto LABEL_13;
      }
    }
  }
  if (v33 == v34)
  {
LABEL_13:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7190))
    {
      sub_737C74((uint64_t)&qword_24F7018);
      __cxa_guard_release(&qword_24F7190);
    }
    int64_t v33 = &qword_24F7018;
  }
  sub_48381C(a1 + 1704, (uint64_t)v33);
  *(void *)(a1 + 2080) = *a7;
  *(void *)(a1 + 2088) = a3;
  *(void *)(a1 + 2096) = a9;
  *(_DWORD *)(a1 + 2104) = a10;
  *(unsigned char *)(a1 + 2108) = a12;
  *(unsigned char *)(a1 + 2109) = a13;
  *(void *)(a1 + 2112) = *a14;
  uint64_t v35 = *a15;
  *(_DWORD *)(a1 + 2128) = *((_DWORD *)a15 + 2);
  *(void *)(a1 + 2120) = v35;
  *(void *)(a1 + 2136) = 0;
  *(void *)(a1 + 2152) = 0;
  *(void *)(a1 + 2144) = 0;
  *(_OWORD *)(a1 + 2136) = *(_OWORD *)a16;
  *(void *)(a1 + 2152) = *(void *)(a16 + 16);
  *(void *)a16 = 0;
  *(void *)(a16 + 8) = 0;
  *(void *)(a16 + 16) = 0;
  *(void *)(a1 + 2160) = *a17;
  *(_OWORD *)(a1 + 2168) = *a5;
  *(unsigned char *)(a1 + 2184) = a18;
  uint64_t v36 = *a19;
  *a19 = 0;
  *(void *)(a1 + 2192) = v36;
  *(void *)(a1 + 2200) = a19[1];
  a19[1] = 0;
  uint64_t v37 = a19[2];
  *(void *)(a1 + 2208) = v37;
  uint64_t v38 = a19[3];
  *(void *)(a1 + 2216) = v38;
  *(_DWORD *)(a1 + 2224) = *((_DWORD *)a19 + 8);
  if (v38)
  {
    unint64_t v39 = *(void *)(v37 + 8);
    unint64_t v40 = *(void *)(a1 + 2200);
    if ((v40 & (v40 - 1)) != 0)
    {
      if (v39 >= v40) {
        v39 %= v40;
      }
    }
    else
    {
      v39 &= v40 - 1;
    }
    *(void *)(v36 + 8 * v39) = a1 + 2208;
    a19[2] = 0;
    a19[3] = 0;
  }
  *(void *)(a1 + 2232) = a20;
  return a1;
}

void sub_CFE2D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_24F7190);
  sub_402C7C(v4);
  sub_CF1EE4(v3);
  sub_C940D0(v2);
  unsigned int v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_CFE33C(uint64_t *a1, char *a2, char *a3, int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_CFE50C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  long long v14 = (char *)*a1;
  long long v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    char v18 = (char *)*a1;
    long long v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      long long v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_CFE4F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_CFE50C(int a1, uint64_t a2, char *__s, char *a4, int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_CFE664(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CFE678(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 2208);
  if (v2)
  {
    do
    {
      unsigned int v7 = (void **)*v2;
      sub_55198((uint64_t)(v2 + 5));
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  uint64_t v3 = *(void **)(a1 + 2192);
  *(void *)(a1 + 2192) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void *)(a1 + 2136);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 2144);
    unint64_t v6 = *(void **)(a1 + 2136);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0) {
          operator delete(*(void **)(v5 - 24));
        }
        v5 -= 24;
      }
      while (v5 != v4);
      unint64_t v6 = *(void **)(a1 + 2136);
    }
    *(void *)(a1 + 2144) = v4;
    operator delete(v6);
  }
  sub_402C7C(a1 + 1704);
  sub_402C7C(a1 + 1328);
  if ((*(char *)(a1 + 1295) & 0x80000000) == 0)
  {
    uint64_t v8 = *(void **)(a1 + 1248);
    if (!v8) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  operator delete(*(void **)(a1 + 1272));
  uint64_t v8 = *(void **)(a1 + 1248);
  if (v8)
  {
LABEL_17:
    *(void *)(a1 + 1256) = v8;
    operator delete(v8);
  }
LABEL_18:
  size_t v9 = *(void **)(a1 + 1216);
  if (v9)
  {
    *(void *)(a1 + 1224) = v9;
    operator delete(v9);
  }
  size_t v10 = *(void **)(a1 + 1152);
  if (v10)
  {
    *(void *)(a1 + 1160) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void *)(a1 + 1120);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 1128);
    uint64_t v13 = *(void **)(a1 + 1120);
    if (v12 != v11)
    {
      do
        uint64_t v12 = sub_3A6B94(v12 - 1120);
      while (v12 != v11);
      uint64_t v13 = *(void **)(a1 + 1120);
    }
    *(void *)(a1 + 1128) = v11;
    operator delete(v13);
  }
  sub_4F2BD0((void **)(a1 + 32));
  uint64_t v14 = *(void **)(a1 + 8);
  if (v14)
  {
    *(void *)(a1 + 16) = v14;
    operator delete(v14);
  }
  return a1;
}

char *sub_CFE7E4()
{
  byte_25E6117 = 1;
  word_25E6100 = 65;
  byte_25E612F = 1;
  word_25E6118 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E6250 = 0u;
  *(_OWORD *)&qword_25E6260 = 0u;
  dword_25E6270 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E6250, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E6250, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E6250, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E6250, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E6147 = 8;
  strcpy((char *)&qword_25E6130, "any_mode");
  byte_25E615F = 7;
  strcpy((char *)&dword_25E6148, "cycling");
  byte_25E6177 = 7;
  strcpy((char *)&dword_25E6160, "driving");
  byte_25E618F = 7;
  strcpy((char *)&dword_25E6178, "walking");
  qword_25E6198 = 0;
  qword_25E61A0 = 0;
  qword_25E6190 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E6190 = (uint64_t)v0;
  qword_25E6198 = (uint64_t)(v0 + 9);
  qword_25E61A0 = (uint64_t)(v0 + 9);
  qword_25E61A8 = 0;
  qword_25E61B0 = 0;
  qword_25E61B8 = 0;
  uint64_t v1 = operator new(9uLL);
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E61B8 = (uint64_t)(v1 + 9);
  qword_25E61A8 = (uint64_t)v1;
  qword_25E61B0 = (uint64_t)(v1 + 9);
  byte_25E61D7 = 21;
  strcpy((char *)&xmmword_25E61C0, "enable_coverage_check");
  byte_25E61EF = 14;
  strcpy((char *)&qword_25E61D8, "default_region");
  byte_25E6207 = 17;
  strcpy((char *)&xmmword_25E61F0, "supported_regions");
  byte_25E621F = 17;
  strcpy(byte_25E6208, "preflight_regions");
  qword_25E6220 = (uint64_t)operator new(0x19uLL);
  unk_25E6228 = xmmword_20B9250;
  strcpy((char *)qword_25E6220, "supported_country_codes");
  __n128 result = (char *)operator new(0x19uLL);
  qword_25E6238 = (uint64_t)result;
  unk_25E6240 = xmmword_20B9250;
  strcpy(result, "preflight_country_codes");
  return result;
}

void sub_CFEBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (qword_25E6260) {
    sub_20AFCEC((void **)qword_25E6260);
  }
  unint64_t v39 = (void *)xmmword_25E6250;
  *(void *)&xmmword_25E6250 = 0;
  if (v39)
  {
    operator delete(v39);
    if ((a38 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a31 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a38 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a26);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a17 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a12);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a19);
  if ((a17 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_CFEC48(void ***a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)sub_37D0C0((uint64_t)a2);
  memset(__p, 0, 24);
  v233 = (void *)1851878480;
  char v234 = 4;
  unint64_t v237 = 0;
  v235 = 0;
  *(void *)v236 = 0;
  sub_D03E24((char *)&v235, 0, 0, 0);
  __p[23] = 12;
  strcpy(__p, "Plan.Started");
  sub_710A8(7, (uint64_t)__p, v6);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_725D0((uint64_t)v232);
  if (sub_DBD390((uint64_t)a1))
  {
    if (!sub_374EFC(a2))
    {
      *(void *)long long __p = operator new(0x30uLL);
      *(_OWORD *)&__p[8] = xmmword_20B93B0;
      strcpy(*(char **)__p, "Plan.InternalError.RequestWithTrafficAttached");
      sub_710A8(7, (uint64_t)__p, v6);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)__p);
        sub_188FC78(__p, (uint64_t)"Got request with traffic attached but this server does not allow them.", 70);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v249, 1u);
        if (v250 < 0) {
          operator delete(v249[0]);
        }
        if (SHIBYTE(v269) < 0) {
          operator delete(v267);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      *(void *)v201 = 1;
      *(void *)&v201[8] = &off_2439090;
      sub_D0219C((uint64_t)v249, (const std::error_condition *)v201);
      sub_C5EEF0((uint64_t)__p, (uint64_t)v249);
      sub_13F1D90(v276, 0, 0);
      uint64_t v9 = *(void *)(a3 + 24);
      if (!v9) {
        sub_29F82C();
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 48))(v9, __p);
      sub_13F22FC(v276);
      sub_13F22FC(__p);
      sub_13F22FC(v249);
      char v10 = v235;
      if (v235) {
        goto LABEL_499;
      }
      goto LABEL_506;
    }
    LOBYTE(v249[0]) = 4;
    *(_DWORD *)long long __p = 1;
    uint64_t v7 = *(void *)v236;
    if (*(void *)v236 >= v237)
    {
      uint64_t v8 = sub_D067F0((uint64_t *)&v235, "RequestWithTrafficAttached", (char *)v249, (int *)__p);
    }
    else
    {
      sub_D069C0((int)&v237, *(uint64_t *)v236, "RequestWithTrafficAttached", (char *)v249, (int *)__p);
      uint64_t v8 = v7 + 48;
    }
    *(void *)v236 = v8;
  }
  sub_DC2CD8((uint64_t)a1, (uint64_t)v249);
  long long v183 = a2;
  uint64_t v181 = v6;
  uint64_t v182 = a3;
  unsigned int v11 = sub_35E640();
  sub_494284(3, v11, (uint64_t)v249);
  *(void *)v201 = -1;
  *(_DWORD *)&v201[8] = 0x7FFFFFFF;
  *(void *)&v201[16] = -1;
  *(void *)&v201[24] = -1;
  v202[0] = 0x7FFFFFFFFFFFFFFFuLL;
  LODWORD(v202[1]) = -1935635296;
  *((void *)&v202[1] + 1) = 0;
  *(_DWORD *)((char *)&v202[1] + 15) = 0;
  memset((char *)&v202[2] + 8, 0, 24);
  LODWORD(v203[0]) = 0;
  BYTE4(v203[0]) = 100;
  memset((char *)v203 + 8, 0, 48);
  *(void *)((char *)&v203[3] + 7) = 0;
  memset(v204, 0, 24);
  *((void *)&v204[1] + 1) = -1;
  LODWORD(v204[2]) = 0x7FFFFFFF;
  *((void *)&v204[2] + 1) = -1;
  *(void *)&v204[3] = -1;
  *((void *)&v204[3] + 1) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&v204[4] = 0;
  DWORD2(v204[4]) = -1935635296;
  *(void *)&v204[5] = 0;
  *(_DWORD *)((char *)&v204[5] + 7) = 0;
  DWORD2(v206) = 0;
  long long v205 = 0uLL;
  *(void *)&long long v206 = 0;
  BYTE12(v206) = 100;
  long long v207 = 0u;
  memset(v208, 0, 39);
  uint64_t v12 = a2;
  uint64_t v13 = *(void *)sub_37D0C0((uint64_t)a2);
  *(void *)long long __p = a1;
  *(_DWORD *)&__p[8] = 2;
  *(void *)&__p[16] = v12;
  __p[24] = sub_DC5CDC(__p);
  LOBYTE(v265[1]) = 0;
  sub_C9CA80((uint64_t)__p, (uint64_t)&v238);
  if (!(_BYTE)v238)
  {
    sub_71424(7, &v239, v13);
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)__p);
      sub_188FC78(__p, (uint64_t)"[cycling eta sar] input resolving failed", 40);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v257, 3u);
      if (SHIBYTE(v258.__cat_) < 0) {
        operator delete(v257);
      }
      if (SHIBYTE(v269) < 0) {
        operator delete(v267);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(std::error_condition *)long long __p = v239;
    v265[0] = 0;
    *(void *)&__p[16] = 0;
    *(void *)&__p[24] = 0;
    sub_3E7BF4(&__p[16], (uint64_t)v240, (uint64_t)v241, ((char *)v241 - (unsigned char *)v240) >> 5);
    char v209 = 0;
    std::error_condition v210 = *(std::error_condition *)__p;
    long long v211 = *(_OWORD *)&__p[16];
    *(void **)&long long v212 = v265[0];
    DWORD2(v212) = v242;
    if (!(_BYTE)v238) {
      goto LABEL_285;
    }
    goto LABEL_126;
  }
  sub_CF2E84((uint64_t)&v241, (uint64_t)__p);
  sub_71740(7, (uint64_t)__p, v13);
  int v14 = *(void ***)&__p[24];
  uint64_t v180 = v13;
  if (*(void *)&__p[24])
  {
    uint64_t v15 = (void **)v265[0];
    long long v16 = *(void **)&__p[24];
    if (v265[0] != *(void **)&__p[24])
    {
      do
      {
        if (*((char *)v15 - 25) < 0) {
          operator delete(*(v15 - 6));
        }
        v15 -= 6;
      }
      while (v15 != v14);
      long long v16 = *(void **)&__p[24];
    }
    v265[0] = v14;
    operator delete(v16);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_D04064((uint64_t)__p, (uint64_t)a1, (uint64_t *)&v239.__val_, (uint64_t)v183);
  sub_C6A41C((uint64_t)__p, (uint64_t)v251);
  long long v17 = (char *)v265[1];
  if (v265[1])
  {
    unint64_t v18 = v266;
    double v19 = v265[1];
    if (v266 != v265[1])
    {
      do
      {
        uint64_t v20 = (void *)*((void *)v18 - 5);
        if (v20)
        {
          *((void *)v18 - 4) = v20;
          operator delete(v20);
        }
        v18 -= 112;
      }
      while (v18 != v17);
      double v19 = v265[1];
    }
    v266 = v17;
    operator delete(v19);
  }
  uint64_t v21 = *(void *)&__p[8];
  if (*(void *)&__p[8])
  {
    uint64_t v22 = *(void *)&__p[16];
    uint64_t v23 = *(void **)&__p[8];
    if (*(void *)&__p[16] != *(void *)&__p[8])
    {
      do
      {
        uint64_t v24 = *(void **)(v22 - 24);
        if (v24)
        {
          *(void *)(v22 - 16) = v24;
          operator delete(v24);
        }
        uint64_t v25 = *(void *)(v22 - 48);
        if (v25)
        {
          uint64_t v26 = *(void *)(v22 - 40);
          int v27 = *(void **)(v22 - 48);
          if (v26 != v25)
          {
            do
            {
              long long v28 = *(void **)(v26 - 32);
              if (v28)
              {
                *(void *)(v26 - 24) = v28;
                operator delete(v28);
              }
              v26 -= 104;
            }
            while (v26 != v25);
            int v27 = *(void **)(v22 - 48);
          }
          *(void *)(v22 - 40) = v25;
          operator delete(v27);
        }
        long long v29 = *(void **)(v22 - 88);
        if (v29)
        {
          *(void *)(v22 - 80) = v29;
          operator delete(v29);
        }
        v22 -= 168;
      }
      while (v22 != v21);
      uint64_t v23 = *(void **)&__p[8];
    }
    *(void *)&__p[16] = v21;
    operator delete(v23);
  }
  if (v251[0])
  {
    *(_OWORD *)BOOL v265 = 0u;
    memset(__p, 0, sizeof(__p));
    std::string::assign((std::string *)__p, "SnappingModule");
    LOBYTE(v257) = 1;
    uint64_t v30 = (char *)v265[0];
    if (v265[0] >= v265[1])
    {
      char v31 = (void *)sub_C947F8((uint64_t *)&__p[24], "Runtime", (char *)&v257, v256);
    }
    else
    {
      sub_C949C8((int)&v265[1], (uint64_t)v265[0], "Runtime", (char *)&v257, v256);
      char v31 = v30 + 48;
    }
    v265[0] = v31;
    sub_71740(7, (uint64_t)__p, v180);
    uint64_t v35 = *(void ***)&__p[24];
    if (*(void *)&__p[24])
    {
      uint64_t v36 = (void **)v265[0];
      uint64_t v37 = *(void **)&__p[24];
      if (v265[0] != *(void **)&__p[24])
      {
        do
        {
          if (*((char *)v36 - 25) < 0) {
            operator delete(*(v36 - 6));
          }
          v36 -= 6;
        }
        while (v36 != v35);
        uint64_t v37 = *(void **)&__p[24];
      }
      v265[0] = v35;
      operator delete(v37);
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v38 = *(void *)&v252.__val_;
    for (uint64_t i = v252.__cat_; (const std::error_category *)v38 != i; v38 += 160)
    {
      uint64_t v47 = (int *)(v38 + 152);
      int v46 = *(_DWORD *)(v38 + 152);
      if (v46 == 1)
      {
        uint64_t v54 = *((void *)&v204[0] + 1);
        if (*((void *)&v204[0] + 1) < *(void *)&v204[1])
        {
          **((_OWORD **)&v204[0] + 1) = *(_OWORD *)v38;
          long long v40 = *(_OWORD *)(v38 + 16);
          long long v41 = *(_OWORD *)(v38 + 32);
          long long v42 = *(_OWORD *)(v38 + 48);
          *(_DWORD *)(v54 + 63) = *(_DWORD *)(v38 + 63);
          *(_OWORD *)(v54 + 32) = v41;
          *(_OWORD *)(v54 + 48) = v42;
          *(_OWORD *)(v54 + 16) = v40;
          *(void *)(v54 + 80) = 0;
          *(void *)(v54 + 88) = 0;
          *(void *)(v54 + 72) = 0;
          *(_OWORD *)(v54 + 72) = *(_OWORD *)(v38 + 72);
          *(void *)(v54 + 88) = *(void *)(v38 + 88);
          *(void *)(v38 + 72) = 0;
          *(void *)(v38 + 80) = 0;
          *(void *)(v38 + 88) = 0;
          int v43 = *(_DWORD *)(v38 + 96);
          *(unsigned char *)(v54 + 100) = *(unsigned char *)(v38 + 100);
          *(_DWORD *)(v54 + 96) = v43;
          *(void *)(v54 + 112) = 0;
          *(void *)(v54 + 120) = 0;
          *(void *)(v54 + 104) = 0;
          *(_OWORD *)(v54 + 104) = *(_OWORD *)(v38 + 104);
          *(void *)(v54 + 120) = *(void *)(v38 + 120);
          *(void *)(v38 + 104) = 0;
          *(void *)(v38 + 112) = 0;
          *(void *)(v38 + 120) = 0;
          *(void *)(v54 + 128) = 0;
          *(void *)(v54 + 136) = 0;
          *(void *)(v54 + 144) = 0;
          *(_OWORD *)(v54 + 128) = *(_OWORD *)(v38 + 128);
          *(void *)(v54 + 144) = *(void *)(v38 + 144);
          *(void *)(v38 + 128) = 0;
          *(void *)(v38 + 136) = 0;
          *(void *)(v38 + 144) = 0;
          int v44 = *v47;
          *(_DWORD *)(v54 + 155) = *(_DWORD *)(v38 + 155);
          *(_DWORD *)(v54 + 152) = v44;
          int v45 = (char *)(v54 + 160);
        }
        else
        {
          int v45 = sub_D0431C((void **)v204, v38);
        }
        *((void *)&v204[0] + 1) = v45;
      }
      else if (!v46)
      {
        uint64_t v48 = *(void *)v38;
        *(_DWORD *)&v201[8] = *(_DWORD *)(v38 + 8);
        *(void *)v201 = v48;
        long long v49 = *(_OWORD *)(v38 + 16);
        long long v50 = *(_OWORD *)(v38 + 32);
        long long v51 = *(_OWORD *)(v38 + 48);
        *(_DWORD *)((char *)&v202[1] + 15) = *(_DWORD *)(v38 + 63);
        v202[0] = v50;
        v202[1] = v51;
        *(_OWORD *)&v201[16] = v49;
        if (*((void *)&v202[2] + 1))
        {
          operator delete(*((void **)&v202[2] + 1));
          memset((char *)&v202[2] + 8, 0, 24);
        }
        *(_OWORD *)((char *)&v202[2] + 8) = *(_OWORD *)(v38 + 72);
        *((void *)&v202[3] + 1) = *(void *)(v38 + 88);
        *(void *)(v38 + 80) = 0;
        *(void *)(v38 + 88) = 0;
        *(void *)(v38 + 72) = 0;
        int v52 = *(_DWORD *)(v38 + 96);
        BYTE4(v203[0]) = *(unsigned char *)(v38 + 100);
        LODWORD(v203[0]) = v52;
        if (*((void *)&v203[0] + 1))
        {
          operator delete(*((void **)&v203[0] + 1));
          memset((char *)v203 + 8, 0, 24);
        }
        *(_OWORD *)((char *)v203 + 8) = *(_OWORD *)(v38 + 104);
        *((void *)&v203[1] + 1) = *(void *)(v38 + 120);
        *(void *)(v38 + 104) = 0;
        *(void *)(v38 + 112) = 0;
        *(void *)(v38 + 120) = 0;
        if (*(void *)&v203[2])
        {
          operator delete(*(void **)&v203[2]);
          memset(&v203[2], 0, 24);
        }
        v203[2] = *(_OWORD *)(v38 + 128);
        *(void *)&v203[3] = *(void *)(v38 + 144);
        *(void *)(v38 + 128) = 0;
        *(void *)(v38 + 136) = 0;
        *(void *)(v38 + 144) = 0;
        int v53 = *v47;
        *(_DWORD *)((char *)&v203[3] + 11) = *(_DWORD *)(v38 + 155);
        DWORD2(v203[3]) = v53;
      }
    }
    if (*(unsigned char *)(sub_486CB4((uint64_t)v249) + 96) != 2)
    {
      if (*(unsigned char *)(sub_486CB4((uint64_t)v249) + 96))
      {
        HIBYTE(v246) = 0;
        LOBYTE(v245[0]) = 0;
        sub_D04598((uint64_t)&v257, a1, (uint64_t)v249, (uint64_t)v183);
        sub_C9E7F4((unsigned __int8 *)&v257, (uint64_t)__p);
        sub_CF5B18(&v257);
        if (__p[0] && 0xCCCCCCCCCCCCCCCDLL * ((v270 - v269) >> 5) > 1)
        {
          sub_CF4E10((uint64_t)v277, (uint64_t)&v257);
          sub_71740(7, (uint64_t)&v257, v180);
          std::string::size_type v83 = (void **)v259;
          if (v259)
          {
            long long v84 = v260;
            long long v85 = v259;
            if (v260 != v259)
            {
              do
              {
                if (*((char *)v84 - 25) < 0) {
                  operator delete(*(v84 - 6));
                }
                v84 -= 6;
              }
              while (v84 != v83);
              long long v85 = v259;
            }
            int v260 = v83;
            operator delete(v85);
          }
          if (SHIBYTE(v258.__cat_) < 0) {
            operator delete(v257);
          }
          sub_44479C((uint64_t)&__t, v270 - 160);
        }
        else
        {
          sub_71424(7, (const std::error_condition *)&__p[8], v180);
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)&v257);
            char v58 = sub_188FC78(&v257, (uint64_t)"[cycling eta sar] path decoding failed", 38);
            if (v246 >= 0) {
              long long v59 = (void *)HIBYTE(v246);
            }
            else {
              long long v59 = v245[1];
            }
            if (v59)
            {
              std::operator+<char>();
              uint64_t v60 = std::string::append(&v243, ")");
              long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
              *(void *)&v244[16] = *((void *)&v60->__r_.__value_.__l + 2);
              *(_OWORD *)v244 = v61;
              v60->__r_.__value_.__l.__size_ = 0;
              v60->__r_.__value_.__r.__words[2] = 0;
              v60->__r_.__value_.__r.__words[0] = 0;
              unsigned int v62 = v244[23];
            }
            else
            {
              unsigned int v62 = 0;
              v244[23] = 0;
              v244[0] = 0;
            }
            if ((v62 & 0x80u) == 0) {
              std::string::pointer v94 = v244;
            }
            else {
              std::string::pointer v94 = *(unsigned char **)v244;
            }
            if ((v62 & 0x80u) == 0) {
              uint64_t v95 = v62;
            }
            else {
              uint64_t v95 = *(void *)&v244[8];
            }
            sub_188FC78(v58, (uint64_t)v94, v95);
            if ((v244[23] & 0x80000000) != 0) {
              operator delete(*(void **)v244);
            }
            if (v59 && SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v243.__r_.__value_.__l.__data_);
            }
            std::stringbuf::str();
            sub_7246C((uint64_t *)v244, 3u);
            if ((v244[23] & 0x80000000) != 0) {
              operator delete(*(void **)v244);
            }
            if (v262 < 0) {
              operator delete(v261);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          memset(&v187[8], 0, 32);
          char v193 = 0;
          __t.__d_.__rep_ = -1;
          uint64_t v185 = 0x7FFFFFFFLL;
          *(void *)&long long v186 = -1;
          *((void *)&v186 + 1) = -1;
          *(void *)long long v187 = 0x7FFFFFFFFFFFFFFFLL;
          *(_DWORD *)&v187[16] = -1935635296;
          *(_DWORD *)&v187[31] = 0;
          v188[1] = 0;
          uint64_t v189 = 0;
          uint64_t v190 = 0x6400000000;
          v188[0] = 0;
          memset(v192, 0, sizeof(v192));
          *(_OWORD *)uint64_t v191 = 0u;
        }
        if (!__p[0])
        {
          long long v88 = *(void ***)&__p[24];
          if (!*(void *)&__p[24]) {
            goto LABEL_271;
          }
          long long v96 = (void **)v265[0];
          long long v90 = *(void **)&__p[24];
          if (v265[0] == *(void **)&__p[24]) {
            goto LABEL_270;
          }
          do
          {
            if (*((char *)v96 - 1) < 0) {
              operator delete(*(v96 - 3));
            }
            v96 -= 4;
          }
          while (v96 != v88);
          goto LABEL_269;
        }
      }
      else
      {
        sub_7B8BC(0, __p);
        char v66 = std::string::append((std::string *)__p, "Fallback");
        long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
        int64_t v246 = v66->__r_.__value_.__r.__words[2];
        *(_OWORD *)v245 = v67;
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::string::pointer v68 = (void *)HIBYTE(v246);
        if (v246 < 0) {
          std::string::pointer v68 = v245[1];
        }
        if (v68)
        {
          std::operator+<char>();
          sub_710A8(7, (uint64_t)__p, v180);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        sub_D04598((uint64_t)&v257, a1, (uint64_t)v249, (uint64_t)v183);
        sub_CA12F0((unsigned __int8 *)&v257, (uint64_t)__p);
        sub_CF5B18(&v257);
        if (__p[0] && 0xCCCCCCCCCCCCCCCDLL * ((v270 - v269) >> 5) > 1)
        {
          sub_CF4E10((uint64_t)v277, (uint64_t)&v257);
          sub_71740(7, (uint64_t)&v257, v180);
          long long v91 = (void **)v259;
          if (v259)
          {
            std::string::pointer v92 = v260;
            std::string::size_type v93 = v259;
            if (v260 != v259)
            {
              do
              {
                if (*((char *)v92 - 25) < 0) {
                  operator delete(*(v92 - 6));
                }
                v92 -= 6;
              }
              while (v92 != v91);
              std::string::size_type v93 = v259;
            }
            int v260 = v91;
            operator delete(v93);
          }
          if (SHIBYTE(v258.__cat_) < 0) {
            operator delete(v257);
          }
          sub_44479C((uint64_t)&__t, v270 - 160);
        }
        else
        {
          sub_71424(7, (const std::error_condition *)&__p[8], v180);
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)&v257);
            std::string::size_type v69 = sub_188FC78(&v257, (uint64_t)"[cycling eta sar] path decoding failed", 38);
            if (v246 >= 0) {
              std::string::pointer v70 = (void *)HIBYTE(v246);
            }
            else {
              std::string::pointer v70 = v245[1];
            }
            if (v70)
            {
              std::operator+<char>();
              std::string::size_type v71 = std::string::append(&v243, ")");
              long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
              *(void *)&v244[16] = *((void *)&v71->__r_.__value_.__l + 2);
              *(_OWORD *)v244 = v72;
              v71->__r_.__value_.__l.__size_ = 0;
              v71->__r_.__value_.__r.__words[2] = 0;
              v71->__r_.__value_.__r.__words[0] = 0;
              unsigned int v73 = v244[23];
            }
            else
            {
              unsigned int v73 = 0;
              v244[23] = 0;
              v244[0] = 0;
            }
            if ((v73 & 0x80u) == 0) {
              long long v97 = v244;
            }
            else {
              long long v97 = *(unsigned char **)v244;
            }
            if ((v73 & 0x80u) == 0) {
              uint64_t v98 = v73;
            }
            else {
              uint64_t v98 = *(void *)&v244[8];
            }
            sub_188FC78(v69, (uint64_t)v97, v98);
            if ((v244[23] & 0x80000000) != 0) {
              operator delete(*(void **)v244);
            }
            if (v70 && SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v243.__r_.__value_.__l.__data_);
            }
            std::stringbuf::str();
            sub_7246C((uint64_t *)v244, 3u);
            if ((v244[23] & 0x80000000) != 0) {
              operator delete(*(void **)v244);
            }
            if (v262 < 0) {
              operator delete(v261);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          memset(&v187[8], 0, 32);
          char v193 = 0;
          __t.__d_.__rep_ = -1;
          uint64_t v185 = 0x7FFFFFFFLL;
          *(void *)&long long v186 = -1;
          *((void *)&v186 + 1) = -1;
          *(void *)long long v187 = 0x7FFFFFFFFFFFFFFFLL;
          *(_DWORD *)&v187[16] = -1935635296;
          *(_DWORD *)&v187[31] = 0;
          v188[1] = 0;
          uint64_t v189 = 0;
          uint64_t v190 = 0x6400000000;
          v188[0] = 0;
          memset(v192, 0, sizeof(v192));
          *(_OWORD *)uint64_t v191 = 0u;
        }
        if (!__p[0])
        {
          long long v88 = *(void ***)&__p[24];
          if (!*(void *)&__p[24]) {
            goto LABEL_271;
          }
          std::string v99 = (void **)v265[0];
          long long v90 = *(void **)&__p[24];
          if (v265[0] == *(void **)&__p[24]) {
            goto LABEL_270;
          }
          do
          {
            if (*((char *)v99 - 1) < 0) {
              operator delete(*(v99 - 3));
            }
            v99 -= 4;
          }
          while (v99 != v88);
          goto LABEL_269;
        }
      }
      sub_CA60E4((uint64_t)&__p[8]);
      goto LABEL_271;
    }
    sub_7B8BC(2, __p);
    uint64_t v55 = std::string::append((std::string *)__p, "Fallback");
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    int64_t v246 = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)v245 = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      long long v74 = (void *)HIBYTE(v246);
      if (v246 < 0) {
        long long v74 = v245[1];
      }
      if (!v74) {
        goto LABEL_151;
      }
    }
    else
    {
      uint64_t v57 = (void *)HIBYTE(v246);
      if (v246 < 0) {
        uint64_t v57 = v245[1];
      }
      if (!v57) {
        goto LABEL_151;
      }
    }
    std::operator+<char>();
    sub_710A8(7, (uint64_t)__p, v180);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
LABEL_151:
    sub_D04598((uint64_t)&v257, a1, (uint64_t)v249, (uint64_t)v183);
    sub_CA3808((unsigned __int8 *)&v257, (uint64_t)__p);
    sub_CF5B18(&v257);
    if (__p[0] && 0xCCCCCCCCCCCCCCCDLL * ((v270 - v269) >> 5) > 1)
    {
      sub_CF4E10((uint64_t)v277, (uint64_t)&v257);
      sub_71740(7, (uint64_t)&v257, v180);
      std::string::size_type v80 = (void **)v259;
      if (v259)
      {
        __n128 v81 = v260;
        long long v82 = v259;
        if (v260 != v259)
        {
          do
          {
            if (*((char *)v81 - 25) < 0) {
              operator delete(*(v81 - 6));
            }
            v81 -= 6;
          }
          while (v81 != v80);
          long long v82 = v259;
        }
        int v260 = v80;
        operator delete(v82);
      }
      if (SHIBYTE(v258.__cat_) < 0) {
        operator delete(v257);
      }
      sub_44479C((uint64_t)&__t, v270 - 160);
    }
    else
    {
      sub_71424(7, (const std::error_condition *)&__p[8], v180);
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&v257);
        long long v75 = sub_188FC78(&v257, (uint64_t)"[cycling eta sar] path decoding failed", 38);
        if (v246 >= 0) {
          long long v76 = (void *)HIBYTE(v246);
        }
        else {
          long long v76 = v245[1];
        }
        if (v76)
        {
          std::operator+<char>();
          long long v77 = std::string::append(&v243, ")");
          long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          *(void *)&v244[16] = *((void *)&v77->__r_.__value_.__l + 2);
          *(_OWORD *)v244 = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          unsigned int v79 = v244[23];
        }
        else
        {
          unsigned int v79 = 0;
          v244[23] = 0;
          v244[0] = 0;
        }
        if ((v79 & 0x80u) == 0) {
          long long v86 = v244;
        }
        else {
          long long v86 = *(unsigned char **)v244;
        }
        if ((v79 & 0x80u) == 0) {
          uint64_t v87 = v79;
        }
        else {
          uint64_t v87 = *(void *)&v244[8];
        }
        sub_188FC78(v75, (uint64_t)v86, v87);
        if ((v244[23] & 0x80000000) != 0) {
          operator delete(*(void **)v244);
        }
        if (v76 && SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v243.__r_.__value_.__l.__data_);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)v244, 3u);
        if ((v244[23] & 0x80000000) != 0) {
          operator delete(*(void **)v244);
        }
        if (v262 < 0) {
          operator delete(v261);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      memset(&v187[8], 0, 32);
      char v193 = 0;
      __t.__d_.__rep_ = -1;
      uint64_t v185 = 0x7FFFFFFFLL;
      *(void *)&long long v186 = -1;
      *((void *)&v186 + 1) = -1;
      *(void *)long long v187 = 0x7FFFFFFFFFFFFFFFLL;
      *(_DWORD *)&v187[16] = -1935635296;
      *(_DWORD *)&v187[31] = 0;
      v188[1] = 0;
      uint64_t v189 = 0;
      uint64_t v190 = 0x6400000000;
      v188[0] = 0;
      memset(v192, 0, sizeof(v192));
      *(_OWORD *)uint64_t v191 = 0u;
    }
    if (__p[0])
    {
      sub_CA701C((uint64_t)&__p[8]);
      goto LABEL_271;
    }
    long long v88 = *(void ***)&__p[24];
    if (!*(void *)&__p[24])
    {
LABEL_271:
      if (SHIBYTE(v246) < 0) {
        operator delete(v245[0]);
      }
      *((std::chrono::system_clock::time_point *)&v204[1] + 1) = __t;
      LODWORD(v204[2]) = v185;
      *(_OWORD *)((char *)&v204[2] + 8) = v186;
      *(_OWORD *)((char *)&v204[3] + 8) = *(_OWORD *)v187;
      *(_OWORD *)((char *)&v204[4] + 8) = *(_OWORD *)&v187[16];
      *(_DWORD *)((char *)&v204[5] + 7) = *(_DWORD *)&v187[31];
      if ((void)v205)
      {
        *((void *)&v205 + 1) = v205;
        operator delete((void *)v205);
      }
      long long v205 = *(_OWORD *)v188;
      *(void *)&long long v206 = v189;
      v188[1] = 0;
      uint64_t v189 = 0;
      v188[0] = 0;
      DWORD2(v206) = v190;
      BYTE12(v206) = BYTE4(v190);
      if ((void)v207)
      {
        *((void *)&v207 + 1) = v207;
        operator delete((void *)v207);
      }
      long long v207 = *(_OWORD *)v191;
      *(void *)char v208 = *(void *)v192;
      v191[1] = 0;
      *(void *)int v192 = 0;
      v191[0] = 0;
      char v100 = *(void **)&v208[8];
      if (*(void *)&v208[8])
      {
        *(void *)&v208[16] = *(void *)&v208[8];
        operator delete(*(void **)&v208[8]);
        char v100 = v191[0];
      }
      *(_OWORD *)&v208[8] = *(_OWORD *)&v192[8];
      *(void *)&v208[24] = *(void *)&v192[24];
      memset(&v192[8], 0, 24);
      *(_DWORD *)&v208[35] = *(_DWORD *)&v192[35];
      *(_DWORD *)&v208[32] = *(_DWORD *)&v192[32];
      if (v100)
      {
        v191[1] = v100;
        operator delete(v100);
      }
      if (v188[0])
      {
        v188[1] = v188[0];
        operator delete(v188[0]);
      }
      char v209 = 1;
      long long v211 = *(_OWORD *)&v201[16];
      long long v212 = v202[0];
      *(_OWORD *)v213 = v202[1];
      *(_DWORD *)((char *)&v213[1] + 7) = *(_DWORD *)((char *)&v202[1] + 15);
      std::error_condition v210 = *(std::error_condition *)v201;
      *(_OWORD *)&v213[3] = *(_OWORD *)((char *)&v202[2] + 8);
      v213[5] = *((void *)&v202[3] + 1);
      memset((char *)&v202[2] + 8, 0, 24);
      char v215 = BYTE4(v203[0]);
      int v214 = v203[0];
      long long v216 = *(_OWORD *)((char *)v203 + 8);
      memset((char *)v203 + 8, 0, 48);
      long long v218 = v203[2];
      uint64_t v217 = *((void *)&v203[1] + 1);
      uint64_t v219 = *(void *)&v203[3];
      *(_DWORD *)((char *)v220 + 3) = *(_DWORD *)((char *)&v203[3] + 11);
      v220[0] = DWORD2(v203[3]);
      long long v221 = v204[0];
      uint64_t v222 = *(void *)&v204[1];
      memset(v204, 0, 24);
      *(_DWORD *)((char *)&v224[1] + 7) = *(_DWORD *)((char *)&v204[5] + 7);
      *(_OWORD *)v224 = *(_OWORD *)((char *)&v204[4] + 8);
      v223[2] = *(_OWORD *)((char *)&v204[3] + 8);
      v223[0] = *(_OWORD *)((char *)&v204[1] + 8);
      v223[1] = *(_OWORD *)((char *)&v204[2] + 8);
      *(_OWORD *)&v224[3] = v205;
      v224[5] = v206;
      long long v205 = 0uLL;
      *(void *)&long long v206 = 0;
      char v226 = BYTE12(v206);
      int v225 = DWORD2(v206);
      long long v227 = v207;
      uint64_t v228 = *(void *)v208;
      long long v207 = 0uLL;
      memset(v208, 0, 32);
      long long v229 = *(_OWORD *)&v208[8];
      uint64_t v230 = *(void *)&v208[24];
      *(_DWORD *)((char *)v231 + 3) = *(_DWORD *)&v208[35];
      v231[0] = *(_DWORD *)&v208[32];
      if (v251[0]) {
        goto LABEL_284;
      }
      goto LABEL_75;
    }
    long long v89 = (void **)v265[0];
    long long v90 = *(void **)&__p[24];
    if (v265[0] == *(void **)&__p[24])
    {
LABEL_270:
      v265[0] = v88;
      operator delete(v90);
      goto LABEL_271;
    }
    do
    {
      if (*((char *)v89 - 1) < 0) {
        operator delete(*(v89 - 3));
      }
      v89 -= 4;
    }
    while (v89 != v88);
LABEL_269:
    long long v90 = *(void **)&__p[24];
    goto LABEL_270;
  }
  sub_71424(7, &v252, v180);
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)__p);
    sub_188FC78(__p, (uint64_t)"[cycling eta sar] snapping failed", 33);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v257, 3u);
    if (SHIBYTE(v258.__cat_) < 0) {
      operator delete(v257);
    }
    if (SHIBYTE(v269) < 0) {
      operator delete(v267);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(std::error_condition *)long long __p = v252;
  v265[0] = 0;
  *(void *)&__p[16] = 0;
  *(void *)&__p[24] = 0;
  sub_3E7BF4(&__p[16], (uint64_t)v253, (uint64_t)v254, ((char *)v254 - (unsigned char *)v253) >> 5);
  char v209 = 0;
  std::error_condition v210 = *(std::error_condition *)__p;
  long long v211 = *(_OWORD *)&__p[16];
  *(void **)&long long v212 = v265[0];
  DWORD2(v212) = v255;
  if (!v251[0])
  {
LABEL_75:
    long long v32 = (void **)v253;
    if (v253)
    {
      int64_t v33 = v254;
      char v34 = v253;
      if (v254 != v253)
      {
        do
        {
          if (*((char *)v33 - 1) < 0) {
            operator delete(*(v33 - 3));
          }
          v33 -= 4;
        }
        while (v33 != v32);
        char v34 = v253;
      }
      uint64_t v254 = v32;
      operator delete(v34);
    }
    if (!(_BYTE)v238) {
      goto LABEL_285;
    }
LABEL_126:
    char v63 = *(const std::error_category **)&v239.__val_;
    if (!*(void *)&v239.__val_) {
      goto LABEL_294;
    }
    cat = v239.__cat_;
    std::string::size_type v65 = *(void **)&v239.__val_;
    if (v239.__cat_ != *(const std::error_category **)&v239.__val_)
    {
      do
      {
        cat -= 47;
        sub_402C7C((uint64_t)cat);
      }
      while (cat != v63);
      std::string::size_type v65 = *(void **)&v239.__val_;
    }
    v239.__cat_ = v63;
    goto LABEL_293;
  }
LABEL_284:
  sub_C7EAC4((char **)&v252);
  if ((_BYTE)v238) {
    goto LABEL_126;
  }
LABEL_285:
  uint64_t v101 = (void **)v240;
  if (!v240) {
    goto LABEL_294;
  }
  long long v102 = v241;
  std::string::size_type v65 = v240;
  if (v241 != v240)
  {
    do
    {
      if (*((char *)v102 - 1) < 0) {
        operator delete(*(v102 - 3));
      }
      v102 -= 4;
    }
    while (v102 != v101);
    std::string::size_type v65 = v240;
  }
  v241 = v101;
LABEL_293:
  operator delete(v65);
LABEL_294:
  sub_D03F70(v201);
  if (!v209)
  {
    sub_D0219C((uint64_t)v201, &v210);
    sub_C5EEF0((uint64_t)__p, (uint64_t)v201);
    sub_13F1D90(v276, 0, 0);
    uint64_t v110 = *(void *)(v182 + 24);
    if (!v110) {
      sub_29F82C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v110 + 48))(v110, __p);
    sub_13F22FC(v276);
    sub_13F22FC(__p);
    sub_13F22FC(v201);
    goto LABEL_488;
  }
  *(void *)&v258.__val_ = 0;
  v257 = 0;
  __p[23] = 2;
  strcpy(__p, "OD");
  *(void *)v201 = operator new(0x19uLL);
  *(_OWORD *)&v201[8] = xmmword_20B9250;
  strcpy(*(char **)v201, "origin <-> destinations");
  sub_D025B0((uint64_t)v251, (uint64_t)&v210, (uint64_t *)&v221, (uint64_t *)&v257, (uint64_t)a1, v183, (uint64_t)__p, (uint64_t)v201);
  if ((v201[23] & 0x80000000) == 0)
  {
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_297;
    }
LABEL_317:
    operator delete(*(void **)__p);
    if (v251[0]) {
      goto LABEL_298;
    }
LABEL_318:
    sub_D0219C((uint64_t)v201, &v252);
    sub_C5EEF0((uint64_t)__p, (uint64_t)v201);
    sub_13F1D90(v276, 0, 0);
    uint64_t v111 = *(void *)(v182 + 24);
    if (!v111) {
      sub_29F82C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v111 + 48))(v111, __p);
    sub_13F22FC(v276);
    sub_13F22FC(__p);
    sub_13F22FC(v201);
    goto LABEL_473;
  }
  operator delete(*(void **)v201);
  if ((__p[23] & 0x80000000) != 0) {
    goto LABEL_317;
  }
LABEL_297:
  if (!v251[0]) {
    goto LABEL_318;
  }
LABEL_298:
  *(void *)&v239.__val_ = 0;
  v238 = 0;
  v239.__cat_ = 0;
  sub_D06660((uint64_t)&v238, *(uint64_t *)&v252.__val_, (uint64_t)v252.__cat_, 0x51B3BEA3677D46CFLL * (((uint64_t)v252.__cat_ - *(void *)&v252.__val_) >> 3));
  memset(v201, 0, 24);
  *(void *)&v201[24] = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)&v202[0] = 0x8000000080000000;
  memset(&v202[1], 0, 48);
  memset(v203, 0, sizeof(v203));
  memset(v204, 0, sizeof(v204));
  long long v205 = 0u;
  *(void *)&long long v103 = 0x8000000080000000;
  *((void *)&v103 + 1) = 0x8000000080000000;
  long long v206 = 0u;
  long long v207 = v103;
  *(_OWORD *)char v208 = v103;
  DWORD2(v202[0]) = 0x7FFFFFFF;
  *(_DWORD *)&v208[16] = 5;
  memset(&v208[24], 0, 48);
  if (!sub_DAA288((uint64_t)v223) && (void)v227 == *((void *)&v227 + 1) && (void)v229 == *((void *)&v229 + 1)) {
    goto LABEL_350;
  }
  sub_44479C((uint64_t)__p, (uint64_t)v223);
  sub_D06B2C(&__t, (uint64_t)__p, 1uLL);
  uint64_t v248 = 0;
  unint64_t v247 = 0;
  HIBYTE(v246) = 2;
  strcpy((char *)v245, "OR");
  *(void *)v244 = operator new(0x20uLL);
  *(_OWORD *)&v244[8] = xmmword_20B5EB0;
  strcpy(*(char **)v244, "origin <-> reference_point");
  sub_D025B0((uint64_t)&v257, (uint64_t)&v210, &__t.__d_.__rep_, (uint64_t *)&v247, (uint64_t)a1, v183, (uint64_t)v245, (uint64_t)v244);
  if ((v244[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v244);
    if ((SHIBYTE(v246) & 0x80000000) == 0)
    {
LABEL_303:
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (char *)__t.__d_.__rep_;
      if (__t.__d_.__rep_) {
        goto LABEL_304;
      }
LABEL_324:
      long long v106 = v273;
      if (!v273) {
        goto LABEL_326;
      }
      goto LABEL_325;
    }
  }
  else if ((SHIBYTE(v246) & 0x80000000) == 0)
  {
    goto LABEL_303;
  }
  operator delete(v245[0]);
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep = (char *)__t.__d_.__rep_;
  if (!__t.__d_.__rep_) {
    goto LABEL_324;
  }
LABEL_304:
  char v105 = (char *)v185;
  if ((char *)v185 == rep)
  {
    uint64_t v185 = (uint64_t)rep;
    operator delete(rep);
    long long v106 = v273;
    if (!v273) {
      goto LABEL_326;
    }
LABEL_325:
    long long v274 = v106;
    operator delete(v106);
    goto LABEL_326;
  }
  do
  {
    long long v107 = (void *)*((void *)v105 - 4);
    if (v107)
    {
      *((void *)v105 - 3) = v107;
      operator delete(v107);
    }
    long long v108 = (void *)*((void *)v105 - 7);
    if (v108)
    {
      *((void *)v105 - 6) = v108;
      operator delete(v108);
    }
    long long v109 = (void *)*((void *)v105 - 11);
    if (v109)
    {
      *((void *)v105 - 10) = v109;
      operator delete(v109);
    }
    v105 -= 160;
  }
  while (v105 != rep);
  uint64_t v185 = (uint64_t)rep;
  operator delete((void *)__t.__d_.__rep_);
  long long v106 = v273;
  if (v273) {
    goto LABEL_325;
  }
LABEL_326:
  if (v271)
  {
    uint64_t v272 = v271;
    operator delete(v271);
  }
  if (v267)
  {
    unint64_t v268 = v267;
    operator delete(v267);
  }
  if (!(_BYTE)v257) {
    goto LABEL_341;
  }
  uint64_t v112 = *(void *)&v258.__val_;
  if (v201 != *(unsigned char **)&v258.__val_) {
    sub_59D3D4((uint64_t *)v201, **(std::string ***)&v258.__val_, *(std::string **)(*(void *)&v258.__val_ + 8), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(*(void *)&v258.__val_ + 8) - **(void **)&v258.__val_) >> 3));
  }
  *(void *)&v201[24] = *(void *)(v112 + 24);
  sub_3C7658((uint64_t)v202, (uint64_t *)(v112 + 32));
  *(_DWORD *)&v208[16] = *(_DWORD *)(v112 + 320);
  if (v201 != (unsigned char *)v112)
  {
    sub_59DF7C((uint64_t *)&v208[24], *(void *)(v112 + 328), *(void *)(v112 + 336), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v112 + 336) - *(void *)(v112 + 328)) >> 5));
    sub_572E74((uint64_t *)&v208[48], *(void *)(v112 + 352), *(void *)(v112 + 360), 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(v112 + 360) - *(void *)(v112 + 352)) >> 5));
  }
  if ((_BYTE)v257)
  {
    long long v113 = *(const std::error_category **)&v258.__val_;
    if (!*(void *)&v258.__val_) {
      goto LABEL_350;
    }
    long long v114 = (uint64_t *)v258.__cat_;
    long long v115 = *(void **)&v258.__val_;
    if (v258.__cat_ != *(const std::error_category **)&v258.__val_)
    {
      do
      {
        v114 -= 47;
        sub_5ADCA8(v114);
      }
      while (v114 != (uint64_t *)v113);
      long long v115 = *(void **)&v258.__val_;
    }
    v258.__cat_ = v113;
  }
  else
  {
LABEL_341:
    uint64_t v116 = (void **)v259;
    if (!v259) {
      goto LABEL_350;
    }
    uint64_t v117 = v260;
    long long v115 = v259;
    if (v260 != v259)
    {
      do
      {
        if (*((char *)v117 - 1) < 0) {
          operator delete(*(v117 - 3));
        }
        v117 -= 4;
      }
      while (v117 != v116);
      long long v115 = v259;
    }
    int v260 = v116;
  }
  operator delete(v115);
LABEL_350:
  long long v118 = 0;
  long long v119 = 0;
  v245[1] = 0;
  v245[0] = 0;
  int64_t v246 = 0;
  if (*(void *)&v201[24] == 0x7FFFFFFFFFFFFFFFLL || DWORD1(v202[0]) == 0x7FFFFFFF) {
    goto LABEL_385;
  }
  sub_44479C((uint64_t)__p, (uint64_t)v223);
  int v275 = 0;
  if (SDWORD1(v202[0]) < 0) {
    char v121 = -5;
  }
  else {
    char v121 = 5;
  }
  unsigned int v122 = SDWORD1(v202[0]) / 10
       + LODWORD(v202[0])
       + (((103 * (char)(v121 + SDWORD1(v202[0]) % 10)) >> 15) & 1)
       + ((103 * (char)(v121 + SDWORD1(v202[0]) % 10)) >> 10);
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  unsigned int v123 = std::chrono::system_clock::to_time_t(&__t);
  BYTE4(v248) = 1;
  unint64_t v247 = __PAIR64__(v123, v122);
  LODWORD(v248) = 1;
  BYTE7(v186) = 2;
  strcpy((char *)&__t, "DR");
  *(void *)v244 = operator new(0x28uLL);
  *(_OWORD *)&v244[8] = xmmword_20B9390;
  strcpy(*(char **)v244, "destinations <-> reference_point");
  sub_D025B0((uint64_t)&v257, (uint64_t)__p, (uint64_t *)&v221, (uint64_t *)&v247, (uint64_t)a1, v183, (uint64_t)&__t, (uint64_t)v244);
  if ((v244[23] & 0x80000000) == 0)
  {
    if ((SBYTE7(v186) & 0x80000000) == 0) {
      goto LABEL_359;
    }
LABEL_362:
    operator delete((void *)__t.__d_.__rep_);
    if (!(_BYTE)v257) {
      goto LABEL_369;
    }
    goto LABEL_363;
  }
  operator delete(*(void **)v244);
  if (SBYTE7(v186) < 0) {
    goto LABEL_362;
  }
LABEL_359:
  if (!(_BYTE)v257)
  {
LABEL_369:
    long long v127 = (void **)v259;
    if (v259)
    {
      uint64_t v128 = v260;
      uint64_t v126 = v259;
      if (v260 != v259)
      {
        do
        {
          if (*((char *)v128 - 1) < 0) {
            operator delete(*(v128 - 3));
          }
          v128 -= 4;
        }
        while (v128 != v127);
        uint64_t v126 = v259;
      }
      int v260 = v127;
LABEL_377:
      operator delete(v126);
      goto LABEL_378;
    }
    goto LABEL_378;
  }
LABEL_363:
  sub_D06C20((uint64_t *)v245, *(uint64_t *)&v258.__val_, (uint64_t)v258.__cat_, 0x51B3BEA3677D46CFLL * (((uint64_t)v258.__cat_ - *(void *)&v258.__val_) >> 3));
  if (!(_BYTE)v257) {
    goto LABEL_369;
  }
  long long v124 = *(const std::error_category **)&v258.__val_;
  if (*(void *)&v258.__val_)
  {
    uint64_t v125 = (uint64_t *)v258.__cat_;
    uint64_t v126 = *(void **)&v258.__val_;
    if (v258.__cat_ != *(const std::error_category **)&v258.__val_)
    {
      do
      {
        v125 -= 47;
        sub_5ADCA8(v125);
      }
      while (v125 != (uint64_t *)v124);
      uint64_t v126 = *(void **)&v258.__val_;
    }
    v258.__cat_ = v124;
    goto LABEL_377;
  }
LABEL_378:
  if (v273)
  {
    long long v274 = v273;
    operator delete(v273);
  }
  if (v271)
  {
    uint64_t v272 = v271;
    operator delete(v271);
  }
  if (v267)
  {
    unint64_t v268 = v267;
    operator delete(v267);
  }
  long long v119 = (uint64_t *)v245[1];
  long long v118 = v245[0];
LABEL_385:
  unint64_t v129 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v221 + 1) - v221) >> 5);
  unint64_t v130 = 0x51B3BEA3677D46CFLL * (((char *)v119 - v118) >> 3);
  if (v129 <= v130)
  {
    if (v129 < v130)
    {
      for (uint64_t j = (uint64_t *)&v118[0xCCCCCCCCCCCCCD18 * ((uint64_t)(*((void *)&v221 + 1) - v221) >> 5)];
            v119 != j;
      v245[1] = j;
    }
  }
  else
  {
    sub_D06FD0((uint64_t **)v245, v129 - v130);
  }
  uint64_t v200 = 0;
  uint64_t v198 = 0;
  __int16 v199 = 0;
  sub_D06660((uint64_t)&v198, (uint64_t)v238, *(uint64_t *)&v239.__val_, 0x51B3BEA3677D46CFLL * ((uint64_t)(*(void *)&v239.__val_ - (void)v238) >> 3));
  char v196 = 0;
  int v195 = 0;
  uint64_t v197 = 0;
  sub_D06660((uint64_t)&v195, (uint64_t)v245[0], (uint64_t)v245[1], 0x51B3BEA3677D46CFLL * (((char *)v245[1] - (char *)v245[0]) >> 3));
  sub_D06544((uint64_t)v194, (uint64_t)v201);
  sub_D03B8C((uint64_t)__p, (uint64_t)a1, (uint64_t)&v198, (uint64_t)&v195, (uint64_t)v194);
  sub_C5EDD4((uint64_t)__p, (uint64_t)&v257);
  sub_5ADCA8((uint64_t *)&v266);
  uint64_t v132 = *(uint64_t **)&__p[24];
  if (*(void *)&__p[24])
  {
    long long v133 = (uint64_t *)v265[0];
    uint64_t v134 = *(void **)&__p[24];
    if (v265[0] != *(void **)&__p[24])
    {
      do
        long long v133 = sub_5ADCA8(v133 - 47);
      while (v133 != v132);
      uint64_t v134 = *(void **)&__p[24];
    }
    v265[0] = v132;
    operator delete(v134);
  }
  long long v135 = *(uint64_t **)__p;
  if (*(void *)__p)
  {
    uint64_t v136 = *(uint64_t **)&__p[8];
    long long v137 = *(void **)__p;
    if (*(void *)&__p[8] != *(void *)__p)
    {
      do
        uint64_t v136 = sub_5ADCA8(v136 - 47);
      while (v136 != v135);
      long long v137 = *(void **)__p;
    }
    *(void *)&__p[8] = v135;
    operator delete(v137);
  }
  sub_5ADCA8(v194);
  long long v138 = (uint64_t *)v195;
  if (v195)
  {
    long long v139 = v196;
    long long v140 = v195;
    if (v196 != v195)
    {
      do
        long long v139 = sub_5ADCA8(v139 - 47);
      while (v139 != v138);
      long long v140 = v195;
    }
    char v196 = v138;
    operator delete(v140);
  }
  long long v141 = (uint64_t *)v198;
  if (v198)
  {
    __n128 v142 = v199;
    unsigned __int8 v143 = v198;
    if (v199 != v198)
    {
      do
        __n128 v142 = sub_5ADCA8(v142 - 47);
      while (v142 != v141);
      unsigned __int8 v143 = v198;
    }
    __int16 v199 = v141;
    operator delete(v143);
  }
  if ((_BYTE)v257)
  {
    *(_OWORD *)BOOL v265 = 0u;
    memset(__p, 0, sizeof(__p));
    std::string::assign((std::string *)__p, "CyclingETAForSearchResponseBuilderModule");
    LOBYTE(__t.__d_.__rep_) = 1;
    uint64_t v144 = (char *)v265[0];
    if (v265[0] >= v265[1])
    {
      int v145 = (void *)sub_C947F8((uint64_t *)&__p[24], "Runtime", (char *)&__t, v263);
    }
    else
    {
      sub_C949C8((int)&v265[1], (uint64_t)v265[0], "Runtime", (char *)&__t, v263);
      int v145 = v144 + 48;
    }
    v265[0] = v145;
    sub_71740(7, (uint64_t)__p, v181);
    long long v150 = *(void ***)&__p[24];
    if (*(void *)&__p[24])
    {
      long long v151 = (void **)v265[0];
      unsigned long long v152 = *(void **)&__p[24];
      if (v265[0] != *(void **)&__p[24])
      {
        do
        {
          if (*((char *)v151 - 25) < 0) {
            operator delete(*(v151 - 6));
          }
          v151 -= 6;
        }
        while (v151 != v150);
        unsigned long long v152 = *(void **)&__p[24];
      }
      v265[0] = v150;
      operator delete(v152);
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    LOBYTE(__t.__d_.__rep_) = 1;
    *(void *)long long __p = sub_72688((uint64_t)v232);
    uint64_t v153 = *(void *)v236;
    if (*(void *)v236 >= v237)
    {
      uint64_t v154 = sub_D0729C((uint64_t *)&v235, "Runtime", (char *)&__t, (double *)__p);
    }
    else
    {
      sub_D0746C((int)&v237, *(uint64_t *)v236, "Runtime", (char *)&__t, (double *)__p);
      uint64_t v154 = v153 + 48;
    }
    *(void *)v236 = v154;
    long long v155 = sub_69510();
    if (sub_68E5C((uint64_t)v155))
    {
      LOBYTE(__t.__d_.__rep_) = 3;
      *(double *)long long __p = (double)(unint64_t)sub_68DF8((uint64_t)v155) / 1000000.0;
      uint64_t v156 = *(void *)v236;
      if (*(void *)v236 >= v237)
      {
        uint64_t v157 = sub_D075E0((uint64_t *)&v235, "Arena.Used", (char *)&__t, (double *)__p);
      }
      else
      {
        sub_D077B0((int)&v237, *(uint64_t *)v236, "Arena.Used", (char *)&__t, (double *)__p);
        uint64_t v157 = v156 + 48;
      }
      *(void *)v236 = v157;
      LOBYTE(__t.__d_.__rep_) = 3;
      *(double *)long long __p = (double)(unint64_t)sub_68E5C((uint64_t)v155) / 1000000.0;
      uint64_t v158 = *(void *)v236;
      if (*(void *)v236 >= v237)
      {
        uint64_t v159 = sub_D07924((uint64_t *)&v235, "Arena.Allocated", (char *)&__t, (double *)__p);
      }
      else
      {
        sub_D07AF4((int)&v237, *(uint64_t *)v236, "Arena.Allocated", (char *)&__t, (double *)__p);
        uint64_t v159 = v158 + 48;
      }
      *(void *)v236 = v159;
    }
    sub_71740(7, (uint64_t)&v233, v181);
    sub_377D10(v183, (uint64_t)__p);
    sub_71740(1, (uint64_t)__p, v181);
    long long v160 = *(void ***)&__p[24];
    if (*(void *)&__p[24])
    {
      long long v161 = (void **)v265[0];
      v162 = *(void **)&__p[24];
      if (v265[0] != *(void **)&__p[24])
      {
        do
        {
          if (*((char *)v161 - 25) < 0) {
            operator delete(*(v161 - 6));
          }
          v161 -= 6;
        }
        while (v161 != v160);
        v162 = *(void **)&__p[24];
      }
      v265[0] = v160;
      operator delete(v162);
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_C5EEF0((uint64_t)__p, (uint64_t)&v258);
    sub_13F1D90(v276, 0, 0);
    uint64_t v163 = *(void *)(v182 + 24);
    if (!v163) {
      sub_29F82C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v163 + 48))(v163, __p);
    sub_13F22FC(v276);
    sub_13F22FC(__p);
    if ((_BYTE)v257)
    {
LABEL_462:
      sub_13F22FC(&v258);
      goto LABEL_463;
    }
  }
  else
  {
    sub_71424(7, &v258, v181);
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)__p);
      sub_188FC78(__p, (uint64_t)"[cycling eta sar] response building failed", 42);
      std::stringbuf::str();
      sub_7246C(&__t.__d_.__rep_, 3u);
      if (SBYTE7(v186) < 0) {
        operator delete((void *)__t.__d_.__rep_);
      }
      if (SHIBYTE(v269) < 0) {
        operator delete(v267);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    sub_D0219C((uint64_t)&__t, &v258);
    sub_C5EEF0((uint64_t)__p, (uint64_t)&__t);
    sub_13F1D90(v276, 0, 0);
    uint64_t v146 = *(void *)(v182 + 24);
    if (!v146) {
      sub_29F82C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v146 + 48))(v146, __p);
    sub_13F22FC(v276);
    sub_13F22FC(__p);
    sub_13F22FC(&__t);
    if ((_BYTE)v257) {
      goto LABEL_462;
    }
  }
  uint64_t v147 = (void **)v259;
  if (v259)
  {
    long long v148 = v260;
    uint64_t v149 = v259;
    if (v260 != v259)
    {
      do
      {
        if (*((char *)v148 - 1) < 0) {
          operator delete(*(v148 - 3));
        }
        v148 -= 4;
      }
      while (v148 != v147);
      uint64_t v149 = v259;
    }
    int v260 = v147;
    operator delete(v149);
    long long v164 = (uint64_t *)v245[0];
    if (!v245[0]) {
      goto LABEL_468;
    }
    goto LABEL_464;
  }
LABEL_463:
  long long v164 = (uint64_t *)v245[0];
  if (v245[0])
  {
LABEL_464:
    long long v165 = (uint64_t *)v245[1];
    long long v166 = v164;
    if (v245[1] != v164)
    {
      do
        long long v165 = sub_5ADCA8(v165 - 47);
      while (v165 != v164);
      long long v166 = (uint64_t *)v245[0];
    }
    v245[1] = v164;
    operator delete(v166);
  }
LABEL_468:
  sub_5ADCA8((uint64_t *)v201);
  long long v167 = (uint64_t *)v238;
  if (v238)
  {
    long long v168 = *(uint64_t **)&v239.__val_;
    long long v169 = v238;
    if (*(void **)&v239.__val_ != v238)
    {
      do
        long long v168 = sub_5ADCA8(v168 - 47);
      while (v168 != v167);
      long long v169 = v238;
    }
    *(void *)&v239.__val_ = v167;
    operator delete(v169);
  }
LABEL_473:
  if (v251[0])
  {
    long long v170 = *(const std::error_category **)&v252.__val_;
    if (!*(void *)&v252.__val_) {
      goto LABEL_488;
    }
    int v171 = (uint64_t *)v252.__cat_;
    v172 = *(void **)&v252.__val_;
    if (v252.__cat_ != *(const std::error_category **)&v252.__val_)
    {
      do
      {
        v171 -= 47;
        sub_5ADCA8(v171);
      }
      while (v171 != (uint64_t *)v170);
      v172 = *(void **)&v252.__val_;
    }
    v252.__cat_ = v170;
  }
  else
  {
    long long v173 = (void **)v253;
    if (!v253) {
      goto LABEL_488;
    }
    long long v174 = v254;
    v172 = v253;
    if (v254 != v253)
    {
      do
      {
        if (*((char *)v174 - 1) < 0) {
          operator delete(*(v174 - 3));
        }
        v174 -= 4;
      }
      while (v174 != v173);
      v172 = v253;
    }
    uint64_t v254 = v173;
  }
  operator delete(v172);
LABEL_488:
  if (v209)
  {
    sub_D03F70(&v210);
  }
  else
  {
    uint64_t v175 = v211;
    if ((void)v211)
    {
      uint64_t v176 = *((void *)&v211 + 1);
      uint64_t v177 = (void *)v211;
      if (*((void *)&v211 + 1) != (void)v211)
      {
        do
        {
          if (*(char *)(v176 - 1) < 0) {
            operator delete(*(void **)(v176 - 24));
          }
          v176 -= 32;
        }
        while (v176 != v175);
        uint64_t v177 = (void *)v211;
      }
      *((void *)&v211 + 1) = v175;
      operator delete(v177);
    }
  }
  sub_4BCC2C((uint64_t)v249);
  char v10 = v235;
  if (v235)
  {
LABEL_499:
    uint64_t v178 = *(void *)v236;
    uint64_t v179 = v10;
    if (*(void **)v236 != v10)
    {
      do
      {
        if (*(char *)(v178 - 25) < 0) {
          operator delete(*(void **)(v178 - 48));
        }
        v178 -= 48;
      }
      while ((void *)v178 != v10);
      uint64_t v179 = v235;
    }
    *(void *)v236 = v10;
    operator delete(v179);
  }
LABEL_506:
  if (v234 < 0) {
    operator delete(v233);
  }
}

void sub_D01A48(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x62F]) < 0) {
    operator delete((void *)STACK[0x618]);
  }
  sub_111ECAC((uint64_t)&STACK[0x9C0]);
  sub_CA0F5C((uint64_t)&STACK[0xAE0]);
  if (SLOBYTE(STACK[0x667]) < 0) {
    operator delete((void *)STACK[0x650]);
  }
  sub_C7E544((uint64_t)&STACK[0x940]);
  sub_C9D440((uint64_t)&STACK[0x5B8]);
  sub_D03F70(&STACK[0x298]);
  sub_4BCC2C((uint64_t)&STACK[0x678]);
  sub_A3A4((uint64_t)&STACK[0x588]);
  _Unwind_Resume(a1);
}

void sub_D02124(_Unwind_Exception *a1)
{
}

void sub_D0215C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x59F]) < 0) {
    operator delete((void *)STACK[0x588]);
  }
  sub_A43C((void **)&STACK[0xAE0]);
  _Unwind_Resume(a1);
}

void sub_D02180()
{
}

void sub_D02188(_Unwind_Exception *a1)
{
}

uint64_t sub_D0219C(uint64_t a1, const std::error_condition *a2)
{
  sub_13F1D90(a1, 0, 0);
  if ((void (***)(std::error_category *__hidden))a2->__cat_ == &off_2439090)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v16);
      int v5 = sub_188FC78(&v16, (uint64_t)"[cycling eta sar] subError: ", 28);
      std::error_condition::message(&__p, a2);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      sub_188FC78(v5, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v19 < 0) {
        operator delete(v18);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    int val = sub_E12498(a2->__val_);
  }
  else
  {
    int val = a2->__val_;
  }
  *(_DWORD *)(a1 + 40) |= 0x20u;
  *(_DWORD *)(a1 + 160) = val;
  uint64_t result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)&v16);
    uint64_t v9 = sub_188FC78(&v16, (uint64_t)"[cycling eta sar] ETARequest: ", 30);
    char v10 = sub_69510();
    uint64_t v11 = sub_68EE4((uint64_t)v10);
    int v12 = *(char *)(v11 + 23);
    if (v12 >= 0) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = *(void *)v11;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      uint64_t v14 = *(void *)(v11 + 8);
    }
    sub_188FC78(v9, v13, v14);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_D024E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_13F22FC(v15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_13F22FC(v15);
  _Unwind_Resume(a1);
}

void sub_D025B0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *(void *)sub_37D0C0((uint64_t)a6);
  uint64_t v16 = *(uint64_t (****)())(a5 + 400);
  if (!v16) {
    uint64_t v16 = &off_2537168;
  }
  char v17 = sub_F5A680(*((_DWORD *)v16 + 6));
  uint64_t v144 = 0;
  unsigned __int8 v143 = 0;
  unint64_t v145 = 0;
  sub_4445E8((uint64_t)&v143, *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 5));
  unint64_t v18 = v144;
  if ((unint64_t)v144 >= v145)
  {
    char v19 = (char *)sub_C7C4B0((uint64_t *)&v143, a2);
  }
  else
  {
    sub_44479C((uint64_t)v144, a2);
    char v19 = v18 + 160;
  }
  uint64_t v144 = v19;
  sub_D0470C((uint64_t)v136, a5, (uint64_t)&v143, (uint64_t)a6, v17);
  if (*((unsigned char *)a4 + 12))
  {
    uint64_t v141 = *a4;
    int v142 = *((_DWORD *)a4 + 2);
  }
  sub_C5F28C(v136, (uint64_t)v198);
  if (!v198[0])
  {
    sub_71424(7, &v199, v15);
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v156);
      uint64_t v22 = sub_188FC78(v156, (uint64_t)"[cycling eta sar] path finding failed for ", 42);
      int v23 = *(char *)(a8 + 23);
      if (v23 >= 0) {
        uint64_t v24 = a8;
      }
      else {
        uint64_t v24 = *(void *)a8;
      }
      if (v23 >= 0) {
        uint64_t v25 = *(unsigned __int8 *)(a8 + 23);
      }
      else {
        uint64_t v25 = *(void *)(a8 + 8);
      }
      sub_188FC78(v22, v24, v25);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (SBYTE7(v119) < 0) {
        operator delete(__p[0]);
      }
      if (v161 < 0) {
        operator delete(v160);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(std::error_condition *)uint64_t v156 = v199;
    *(void *)&long long v157 = 0;
    *(void *)&v156[16] = 0;
    *(void *)&v156[24] = 0;
    sub_3E7BF4(&v156[16], (uint64_t)v200, v201[0], (v201[0] - (uint64_t)v200) >> 5);
    int v26 = v202;
    *(unsigned char *)a1 = 0;
    long long v27 = *(_OWORD *)&v156[16];
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v156;
    *(_OWORD *)(a1 + 24) = v27;
    *(void *)(a1 + 40) = v157;
    *(_DWORD *)(a1 + 48) = v26;
    if (v198[0]) {
      goto LABEL_189;
    }
    goto LABEL_24;
  }
  long long v157 = 0u;
  memset(v156, 0, sizeof(v156));
  std::string::assign((std::string *)v156, "CyclingPathFindingModule");
  LOBYTE(__p[0]) = 1;
  uint64_t v20 = v157;
  if ((unint64_t)v157 >= *((void *)&v157 + 1))
  {
    uint64_t v21 = sub_C947F8((uint64_t *)&v156[24], "Runtime", (char *)__p, v201);
  }
  else
  {
    sub_C949C8((int)&v157 + 8, v157, "Runtime", (char *)__p, v201);
    uint64_t v21 = v20 + 48;
  }
  *(void *)&long long v157 = v21;
  sub_717B8(7, a7, (uint64_t)v156, v15);
  uint64_t v31 = *(void *)&v156[24];
  if (*(void *)&v156[24])
  {
    uint64_t v32 = v157;
    int64_t v33 = *(void **)&v156[24];
    if ((void)v157 != *(void *)&v156[24])
    {
      do
      {
        if (*(char *)(v32 - 25) < 0) {
          operator delete(*(void **)(v32 - 48));
        }
        v32 -= 48;
      }
      while (v32 != v31);
      int64_t v33 = *(void **)&v156[24];
    }
    *(void *)&long long v157 = v31;
    operator delete(v33);
  }
  if ((v156[23] & 0x80000000) != 0) {
    operator delete(*(void **)v156);
  }
  *(void *)uint64_t v156 = &v199;
  uint64_t v34 = sub_37B3A8((uint64_t)a6);
  uint64_t v35 = *(void *)v34;
  *(_DWORD *)&v156[16] = *(_DWORD *)(v34 + 8);
  *(void *)&v156[8] = v35;
  v156[20] = 0;
  LOBYTE(v157) = 0;
  *((void *)&v157 + 1) = a6;
  sub_C87D80((uint64_t)v156, (uint64_t)v130);
  if (!v130[0])
  {
    sub_71424(7, &v131, v15);
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v156);
      unint64_t v39 = sub_188FC78(v156, (uint64_t)"[cycling eta sar] eta computation failed for ", 45);
      int v40 = *(char *)(a8 + 23);
      if (v40 >= 0) {
        uint64_t v41 = a8;
      }
      else {
        uint64_t v41 = *(void *)a8;
      }
      if (v40 >= 0) {
        uint64_t v42 = *(unsigned __int8 *)(a8 + 23);
      }
      else {
        uint64_t v42 = *(void *)(a8 + 8);
      }
      sub_188FC78(v39, v41, v42);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (SBYTE7(v119) < 0) {
        operator delete(__p[0]);
      }
      if (v161 < 0) {
        operator delete(v160);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(std::error_condition *)uint64_t v156 = v131;
    *(void *)&long long v157 = 0;
    *(void *)&v156[16] = 0;
    *(void *)&v156[24] = 0;
    sub_3E7BF4(&v156[16], v132, v133, (v133 - v132) >> 5);
    int v43 = v134;
    *(unsigned char *)a1 = 0;
    long long v44 = *(_OWORD *)&v156[16];
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v156;
    *(_OWORD *)(a1 + 24) = v44;
    *(void *)(a1 + 40) = v157;
    *(_DWORD *)(a1 + 48) = v43;
    sub_C8ACB8((uint64_t)v130);
    if (v198[0]) {
      goto LABEL_189;
    }
    goto LABEL_24;
  }
  *(_OWORD *)&v156[16] = 0u;
  long long v157 = 0u;
  qmemcpy(v156, "CyclingETAModule", 16);
  v156[23] = 16;
  v124[0] = 1;
  LODWORD(__p[0]) = 0;
  *(void *)&long long v157 = sub_CF8370((uint64_t *)&v156[24], "Runtime", v124, &v135, (int *)__p);
  sub_71740(7, (uint64_t)v156, v15);
  uint64_t v36 = *(void *)&v156[24];
  if (*(void *)&v156[24])
  {
    uint64_t v37 = v157;
    uint64_t v38 = *(void **)&v156[24];
    if ((void)v157 != *(void *)&v156[24])
    {
      do
      {
        if (*(char *)(v37 - 25) < 0) {
          operator delete(*(void **)(v37 - 48));
        }
        v37 -= 48;
      }
      while (v37 != v36);
      uint64_t v38 = *(void **)&v156[24];
    }
    *(void *)&long long v157 = v36;
    operator delete(v38);
  }
  if ((v156[23] & 0x80000000) != 0) {
    operator delete(*(void **)v156);
  }
  *(void *)uint64_t v156 = &v199;
  *(_OWORD *)&v156[8] = (unint64_t)&v131;
  *(_DWORD *)&v156[24] = 0;
  v156[28] = 0;
  long long v157 = 0uLL;
  uint64_t v158 = a6;
  uint64_t v159 = 0;
  sub_CBF2C4((char ***)v156, (uint64_t)v124);
  if (!v124[0])
  {
    sub_71424(7, &v125, v15);
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v156);
      long long v49 = sub_188FC78(v156, (uint64_t)"[cycling eta sar] route building failed for ", 44);
      int v50 = *(char *)(a8 + 23);
      if (v50 >= 0) {
        uint64_t v51 = a8;
      }
      else {
        uint64_t v51 = *(void *)a8;
      }
      if (v50 >= 0) {
        uint64_t v52 = *(unsigned __int8 *)(a8 + 23);
      }
      else {
        uint64_t v52 = *(void *)(a8 + 8);
      }
      sub_188FC78(v49, v51, v52);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (SBYTE7(v119) < 0) {
        operator delete(__p[0]);
      }
      if (v161 < 0) {
        operator delete(v160);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(std::error_condition *)uint64_t v156 = v125;
    *(void *)&long long v157 = 0;
    *(void *)&v156[16] = 0;
    *(void *)&v156[24] = 0;
    sub_3E7BF4(&v156[16], v126, v127, (v127 - v126) >> 5);
    int v53 = v128;
    *(unsigned char *)a1 = 0;
    long long v54 = *(_OWORD *)&v156[16];
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v156;
    *(_OWORD *)(a1 + 24) = v54;
    *(void *)(a1 + 40) = v157;
    *(_DWORD *)(a1 + 48) = v53;
    sub_CC1854((uint64_t)v124);
    sub_C8ACB8((uint64_t)v130);
    if (v198[0]) {
      goto LABEL_189;
    }
LABEL_24:
    uint64_t v28 = (uint64_t)v200;
    if (!v200) {
      goto LABEL_198;
    }
    uint64_t v29 = v201[0];
    uint64_t v30 = v200;
    if ((void *)v201[0] != v200)
    {
      do
      {
        if (*(char *)(v29 - 1) < 0) {
          operator delete(*(void **)(v29 - 24));
        }
        v29 -= 32;
      }
      while (v29 != v28);
      uint64_t v30 = v200;
    }
    v201[0] = v28;
    goto LABEL_197;
  }
  long long v157 = 0u;
  memset(v156, 0, sizeof(v156));
  int v45 = (char *)operator new(0x20uLL);
  strcpy(v45, "CyclingRouteBuilderModule");
  *(void *)uint64_t v156 = v45;
  *(_OWORD *)&v156[8] = xmmword_20B8870;
  LOBYTE(__p[0]) = 1;
  *(void *)&long long v157 = sub_C947F8((uint64_t *)&v156[24], "Runtime", (char *)__p, &v129);
  sub_71740(7, (uint64_t)v156, v15);
  uint64_t v46 = *(void *)&v156[24];
  if (*(void *)&v156[24])
  {
    uint64_t v47 = v157;
    uint64_t v48 = *(void **)&v156[24];
    if ((void)v157 != *(void *)&v156[24])
    {
      do
      {
        if (*(char *)(v47 - 25) < 0) {
          operator delete(*(void **)(v47 - 48));
        }
        v47 -= 48;
      }
      while (v47 != v46);
      uint64_t v48 = *(void **)&v156[24];
    }
    *(void *)&long long v157 = v46;
    operator delete(v48);
  }
  if ((v156[23] & 0x80000000) != 0) {
    operator delete(*(void **)v156);
  }
  char v162 = 0;
  char v163 = 0;
  long long v174 = 0u;
  long long v175 = 0u;
  long long v176 = 0u;
  *(void *)((char *)v173 + 5) = 0;
  long long v164 = 0u;
  long long v165 = 0u;
  long long v166 = 0u;
  long long v167 = 0u;
  long long v168 = 0u;
  long long v169 = 0u;
  long long v170 = 0u;
  long long v171 = 0u;
  int v172 = 0;
  v173[0] = 0;
  uint64_t v177 = 0x3FF0000000000000;
  uint64_t v180 = 0;
  uint64_t v178 = 0;
  uint64_t v179 = 0;
  char v181 = 5;
  long long v182 = 0u;
  long long v183 = 0u;
  long long v184 = 0u;
  int v185 = 0x7FFFFFFF;
  uint64_t v190 = 0;
  uint64_t v191 = 0;
  long long v186 = 0u;
  long long v187 = 0u;
  long long v188 = 0u;
  memset(v189, 0, sizeof(v189));
  uint64_t v192 = -1;
  int v193 = 0x7FFFFFFF;
  uint64_t v194 = 0;
  uint64_t v195 = -1;
  int v196 = -1;
  char v197 = 0;
  __p[0] = &v125;
  __p[1] = a6;
  *(void *)&long long v119 = v156;
  sub_D04C80((uint64_t)&v119 + 8, a5, (uint64_t)a6);
  sub_D05378((uint64_t)v123, a5, (uint64_t)__p[1]);
  sub_C65390((uint64_t)__p, (uint64_t)v151);
  sub_CF99A8(v123);
  if (v151[0])
  {
    sub_CF8A40((double *)&v154, (uint64_t)__p);
    sub_71740(7, (uint64_t)__p, v15);
    uint64_t v55 = *((void *)&v119 + 1);
    if (*((void *)&v119 + 1))
    {
      uint64_t v56 = v120;
      uint64_t v57 = (void *)*((void *)&v119 + 1);
      if ((void)v120 != *((void *)&v119 + 1))
      {
        do
        {
          if (*(char *)(v56 - 25) < 0) {
            operator delete(*(void **)(v56 - 48));
          }
          v56 -= 48;
        }
        while (v56 != v55);
        uint64_t v57 = (void *)*((void *)&v119 + 1);
      }
      *(void *)&long long v120 = v55;
      operator delete(v57);
    }
    if (SBYTE7(v119) < 0) {
      operator delete(__p[0]);
    }
    sub_D05734((uint64_t)__p, (uint64_t **)&v152, a5, (uint64_t)a6);
    sub_C86710((uint64_t)__p, (uint64_t)&v146);
    sub_D06440((uint64_t)__p);
    if ((_BYTE)v146)
    {
      long long v119 = 0u;
      long long v120 = 0u;
      *(_OWORD *)std::string __p = 0u;
      std::string::assign((std::string *)__p, "ETAForSearchResponseBuilderModule");
      LOBYTE(v116[0]) = 1;
      uint64_t v64 = v120;
      if ((unint64_t)v120 >= *((void *)&v120 + 1))
      {
        uint64_t v65 = sub_C947F8((uint64_t *)&v119 + 1, "Runtime", (char *)v116, v149);
      }
      else
      {
        sub_C949C8((int)&v120 + 8, v120, "Runtime", (char *)v116, v149);
        uint64_t v65 = v64 + 48;
      }
      *(void *)&long long v120 = v65;
      sub_717B8(7, a7, (uint64_t)__p, v15);
      uint64_t v72 = *((void *)&v119 + 1);
      if (*((void *)&v119 + 1))
      {
        uint64_t v73 = v120;
        long long v74 = (void *)*((void *)&v119 + 1);
        if ((void)v120 != *((void *)&v119 + 1))
        {
          do
          {
            if (*(char *)(v73 - 25) < 0) {
              operator delete(*(void **)(v73 - 48));
            }
            v73 -= 48;
          }
          while (v73 != v72);
          long long v74 = (void *)*((void *)&v119 + 1);
        }
        *(void *)&long long v120 = v72;
        operator delete(v74);
      }
      if (SBYTE7(v119) < 0) {
        operator delete(__p[0]);
      }
      *(unsigned char *)a1 = 1;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 8) = 0;
      sub_D06660(a1 + 8, *(uint64_t *)&v147.__val_, (uint64_t)v147.__cat_, 0x51B3BEA3677D46CFLL * (((uint64_t)v147.__cat_ - *(void *)&v147.__val_) >> 3));
    }
    else
    {
      sub_71424(7, &v147, v15);
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        char v66 = sub_188FC78(__p, (uint64_t)"[cycling eta sar] eta guidance failed for ", 42);
        int v67 = *(char *)(a8 + 23);
        if (v67 >= 0) {
          uint64_t v68 = a8;
        }
        else {
          uint64_t v68 = *(void *)a8;
        }
        if (v67 >= 0) {
          uint64_t v69 = *(unsigned __int8 *)(a8 + 23);
        }
        else {
          uint64_t v69 = *(void *)(a8 + 8);
        }
        sub_188FC78(v66, v68, v69);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v116, 3u);
        if (v117 < 0) {
          operator delete(v116[0]);
        }
        sub_111ECAC((uint64_t)__p);
      }
      *(std::error_condition *)std::string __p = v147;
      *(void *)&long long v120 = 0;
      long long v119 = 0uLL;
      sub_3E7BF4(&v119, (uint64_t)v148, v149[0], (v149[0] - (uint64_t)v148) >> 5);
      int v70 = v150;
      *(unsigned char *)a1 = 0;
      long long v71 = v119;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
      *(_OWORD *)(a1 + 24) = v71;
      *(void *)(a1 + 40) = v120;
      *(_DWORD *)(a1 + 48) = v70;
    }
    if ((_BYTE)v146)
    {
      long long v75 = *(const std::error_category **)&v147.__val_;
      if (!*(void *)&v147.__val_) {
        goto LABEL_158;
      }
      cat = (uint64_t *)v147.__cat_;
      long long v77 = *(void **)&v147.__val_;
      if (v147.__cat_ != *(const std::error_category **)&v147.__val_)
      {
        do
        {
          cat -= 47;
          sub_5ADCA8(cat);
        }
        while (cat != (uint64_t *)v75);
        long long v77 = *(void **)&v147.__val_;
      }
      v147.__cat_ = v75;
    }
    else
    {
      long long v78 = v148;
      if (!v148) {
        goto LABEL_158;
      }
      uint64_t v79 = v149[0];
      long long v77 = v148;
      if ((void *)v149[0] != v148)
      {
        do
        {
          if (*(char *)(v79 - 1) < 0) {
            operator delete(*(void **)(v79 - 24));
          }
          v79 -= 32;
        }
        while ((void *)v79 != v78);
        long long v77 = v148;
      }
      v149[0] = (uint64_t)v78;
    }
    operator delete(v77);
  }
  else
  {
    sub_71424(7, &v152, v15);
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)__p);
      char v58 = sub_188FC78(__p, (uint64_t)"[cycling eta sar] route selection failed for ", 45);
      int v59 = *(char *)(a8 + 23);
      if (v59 >= 0) {
        uint64_t v60 = a8;
      }
      else {
        uint64_t v60 = *(void *)a8;
      }
      if (v59 >= 0) {
        uint64_t v61 = *(unsigned __int8 *)(a8 + 23);
      }
      else {
        uint64_t v61 = *(void *)(a8 + 8);
      }
      sub_188FC78(v58, v60, v61);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v146, 3u);
      if (SHIBYTE(v147.__cat_) < 0) {
        operator delete(v146);
      }
      if (v122 < 0) {
        operator delete(v121);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(std::error_condition *)std::string __p = v152;
    *(void *)&long long v120 = 0;
    long long v119 = 0uLL;
    sub_3E7BF4(&v119, (uint64_t)v153, (uint64_t)v154, ((char *)v154 - (unsigned char *)v153) >> 5);
    int v62 = v155;
    *(unsigned char *)a1 = 0;
    long long v63 = v119;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
    *(_OWORD *)(a1 + 24) = v63;
    *(void *)(a1 + 40) = v120;
    *(_DWORD *)(a1 + 48) = v62;
  }
LABEL_158:
  if (v151[0])
  {
    std::string::size_type v80 = *(const std::error_category **)&v152.__val_;
    if (!*(void *)&v152.__val_) {
      goto LABEL_188;
    }
    __n128 v81 = v152.__cat_;
    long long v82 = *(void **)&v152.__val_;
    if (v152.__cat_ == *(const std::error_category **)&v152.__val_) {
      goto LABEL_184;
    }
    std::string::size_type v83 = v152.__cat_;
    while (1)
    {
      long long v86 = v83[-3].__vftable;
      v83 -= 3;
      long long v85 = v86;
      if (!v86) {
        goto LABEL_164;
      }
      uint64_t v87 = v81[-2].__vftable;
      long long v84 = v85;
      if (v87 != v85) {
        break;
      }
LABEL_163:
      v81[-2].__vftable = v85;
      operator delete(v84);
LABEL_164:
      __n128 v81 = v83;
      if (v83 == v80)
      {
        long long v82 = *(void **)&v152.__val_;
LABEL_184:
        v152.__cat_ = v80;
        goto LABEL_187;
      }
    }
    while (1)
    {
      if (SHIBYTE(v87[-1].message) < 0)
      {
        operator delete(v87[-1].equivalent);
        p_message = (void **)&v87[-3].message;
        message = v87[-3].message;
        if (message)
        {
LABEL_174:
          uint64_t v90 = (uint64_t)v87[-2].~error_category;
          long long v91 = message;
          if ((std::string (__cdecl *)(const std::error_category *__hidden, int))v90 != message)
          {
            do
              uint64_t v90 = sub_3AFFFC(v90 - 1056);
            while ((std::string (__cdecl *)(const std::error_category *__hidden, int))v90 != message);
            long long v91 = *p_message;
          }
          v87[-2].~error_category = (void (__cdecl *)(std::error_category *__hidden))message;
          operator delete(v91);
        }
      }
      else
      {
        p_message = (void **)&v87[-3].message;
        message = v87[-3].message;
        if (message) {
          goto LABEL_174;
        }
      }
      uint64_t v87 = (std::error_category_vtbl *)p_message;
      if (p_message == (void **)v85)
      {
        long long v84 = v83->__vftable;
        goto LABEL_163;
      }
    }
  }
  std::string::pointer v92 = (void **)v153;
  if (!v153) {
    goto LABEL_188;
  }
  std::string::size_type v93 = v154;
  long long v82 = v153;
  if (v154 != v153)
  {
    do
    {
      if (*((char *)v93 - 1) < 0) {
        operator delete(*(v93 - 3));
      }
      v93 -= 4;
    }
    while (v93 != v92);
    long long v82 = v153;
  }
  uint64_t v154 = v92;
LABEL_187:
  operator delete(v82);
LABEL_188:
  sub_4BCC2C((uint64_t)v156);
  sub_CC1854((uint64_t)v124);
  sub_C8ACB8((uint64_t)v130);
  if (!v198[0]) {
    goto LABEL_24;
  }
LABEL_189:
  std::string::pointer v94 = *(const std::error_category **)&v199.__val_;
  if (!*(void *)&v199.__val_) {
    goto LABEL_198;
  }
  uint64_t v30 = *(void **)&v199.__val_;
  if (v199.__cat_ != *(const std::error_category **)&v199.__val_)
  {
    uint64_t v95 = v199.__cat_ - 3;
    do
    {
      if (v95->__vftable)
      {
        sub_C64384((uint64_t)v95, (void **)&v95->~error_category);
        operator delete(v95->__vftable);
      }
      BOOL v96 = v95 == v94;
      v95 -= 3;
    }
    while (!v96);
    uint64_t v30 = *(void **)&v199.__val_;
  }
  v199.__cat_ = v94;
LABEL_197:
  operator delete(v30);
LABEL_198:
  long long v97 = (char *)v139;
  if (v139)
  {
    uint64_t v98 = v140;
    std::string v99 = v139;
    if (v140 != v139)
    {
      char v100 = v140;
      do
      {
        long long v102 = (void *)*((void *)v100 - 5);
        v100 -= 40;
        uint64_t v101 = v102;
        if (v102)
        {
          *((void *)v98 - 4) = v101;
          operator delete(v101);
        }
        uint64_t v98 = v100;
      }
      while (v100 != v97);
      std::string v99 = v139;
    }
    long long v140 = v97;
    operator delete(v99);
  }
  long long v103 = (char *)v137;
  if (v137)
  {
    __int16 v104 = v138;
    char v105 = v137;
    if (v138 != v137)
    {
      long long v106 = v138;
      do
      {
        long long v108 = (void *)*((void *)v106 - 4);
        v106 -= 32;
        long long v107 = v108;
        if (v108)
        {
          *((void *)v104 - 3) = v107;
          operator delete(v107);
        }
        __int16 v104 = v106;
      }
      while (v106 != v103);
      char v105 = v137;
    }
    long long v138 = v103;
    operator delete(v105);
  }
  if (v136[0])
  {
    v136[1] = v136[0];
    operator delete(v136[0]);
  }
  long long v109 = (char *)v143;
  if (v143)
  {
    uint64_t v110 = v144;
    uint64_t v111 = v143;
    if (v144 != v143)
    {
      do
      {
        uint64_t v112 = (void *)*((void *)v110 - 4);
        if (v112)
        {
          *((void *)v110 - 3) = v112;
          operator delete(v112);
        }
        long long v113 = (void *)*((void *)v110 - 7);
        if (v113)
        {
          *((void *)v110 - 6) = v113;
          operator delete(v113);
        }
        long long v114 = (void *)*((void *)v110 - 11);
        if (v114)
        {
          *((void *)v110 - 10) = v114;
          operator delete(v114);
        }
        v110 -= 160;
      }
      while (v110 != v109);
      uint64_t v111 = v143;
    }
    uint64_t v144 = v109;
    operator delete(v111);
  }
}

void sub_D03848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_D03AD8((uint64_t)&STACK[0x250]);
  sub_CF19B0((uint64_t)&STACK[0x288]);
  sub_4BCC2C((uint64_t)&STACK[0x2C0]);
  sub_CC1854((uint64_t)&a50);
  sub_C8ACB8((uint64_t)&a58);
  sub_CF7F90(v66 - 160);
  sub_CF74EC((uint64_t)&a66);
  sub_C7E6AC((void **)&STACK[0x238]);
  _Unwind_Resume(a1);
}

void sub_D03AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

void sub_D03AC0(_Unwind_Exception *a1)
{
}

uint64_t sub_D03AD8(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(uint64_t **)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(uint64_t **)(a1 + 16);
      char v4 = *(void **)(a1 + 8);
      if (v3 != v2)
      {
        do
        {
          v3 -= 47;
          sub_5ADCA8(v3);
        }
        while (v3 != v2);
        char v4 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 16) = v2;
LABEL_15:
      operator delete(v4);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      char v4 = *(void **)(a1 + 24);
      if (v6 != v5)
      {
        do
        {
          if (*(char *)(v6 - 1) < 0) {
            operator delete(*(void **)(v6 - 24));
          }
          v6 -= 32;
        }
        while (v6 != v5);
        char v4 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v5;
      goto LABEL_15;
    }
  }
  return a1;
}

uint64_t sub_D03B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(void *)(a1 + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a4;
  *(void *)(a1 + 40) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_5AE1FC(a1 + 48, a5);
  *(void *)(a1 + 424) = sub_DC0848(a2);
  *(unsigned char *)(a1 + 432) = v7;
  return a1;
}

void sub_D03C20(_Unwind_Exception *a1)
{
  char v4 = v2;
  sub_5ADCA8(v4);
  if (*v3) {
    sub_20AFDAC();
  }
  sub_20AFD30(v1);
  _Unwind_Resume(a1);
}

void *sub_D03C58(void *a1)
{
  sub_5ADCA8(a1 + 6);
  uint64_t v2 = (uint64_t *)a1[3];
  if (v2)
  {
    uint64_t v3 = (uint64_t *)a1[4];
    char v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_5ADCA8(v3 - 47);
      while (v3 != v2);
      char v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  uint64_t v5 = (uint64_t *)*a1;
  if (*a1)
  {
    uint64_t v6 = (uint64_t *)a1[1];
    char v7 = (uint64_t *)*a1;
    if (v6 != v5)
    {
      do
        uint64_t v6 = sub_5ADCA8(v6 - 47);
      while (v6 != v5);
      char v7 = (uint64_t *)*a1;
    }
    a1[1] = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_D03CF4(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    sub_13F22FC(a1 + 8);
    return a1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 24);
  if (v4 != v3)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 32;
    }
    while (v4 != v3);
    uint64_t v5 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v3;
  operator delete(v5);
  return a1;
}

uint64_t sub_D03D8C(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    sub_D03F70((void *)(a1 + 8));
    return a1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 24);
  if (v4 != v3)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 32;
    }
    while (v4 != v3);
    uint64_t v5 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v3;
  operator delete(v5);
  return a1;
}

char *sub_D03E24(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0x555555555555556) {
      sub_2E00();
    }
    uint64_t result = (char *)operator new(48 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[48 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = &v8[v9];
        uint64_t v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          uint64_t result = (char *)sub_4200(result, *(void **)v11, *(void *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v11;
          *((void *)result + 2) = *(void *)(v11 + 16);
        }
        char v10 = &v8[v9];
        *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 + v9 + 24);
        *((_DWORD *)v10 + 10) = *(_DWORD *)(a2 + v9 + 40);
        v9 += 48;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_D03F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_D03F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 48)
  {
    if (*(char *)(v10 + v11 - 25) < 0) {
      operator delete(*(void **)(v10 + v11 - 48));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_AAE8(&a9);
  _Unwind_Resume(a1);
}

void *sub_D03F70(void *a1)
{
  uint64_t v2 = (void *)a1[39];
  if (v2)
  {
    a1[40] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[36];
  if (v3)
  {
    a1[37] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[32];
  if (v4)
  {
    a1[33] = v4;
    operator delete(v4);
  }
  uint64_t v5 = a1[20];
  if (v5)
  {
    uint64_t v6 = a1[21];
    char v7 = (void *)a1[20];
    if (v6 != v5)
    {
      do
      {
        uint64_t v8 = *(void **)(v6 - 32);
        if (v8)
        {
          *(void *)(v6 - 24) = v8;
          operator delete(v8);
        }
        uint64_t v9 = *(void **)(v6 - 56);
        if (v9)
        {
          *(void *)(v6 - 48) = v9;
          operator delete(v9);
        }
        uint64_t v10 = *(void **)(v6 - 88);
        if (v10)
        {
          *(void *)(v6 - 80) = v10;
          operator delete(v10);
        }
        v6 -= 160;
      }
      while (v6 != v5);
      char v7 = (void *)a1[20];
    }
    a1[21] = v5;
    operator delete(v7);
  }
  uint64_t v11 = (void *)a1[16];
  if (v11)
  {
    a1[17] = v11;
    operator delete(v11);
  }
  int v12 = (void *)a1[13];
  if (v12)
  {
    a1[14] = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)a1[9];
  if (v13)
  {
    a1[10] = v13;
    operator delete(v13);
  }
  return a1;
}

uint64_t sub_D04064(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(void *)a1 = a4;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  unsigned int v9 = sub_35E640();
  *(unsigned char *)(a1 + 32) = sub_DE7FB0(v9);
  int v10 = sub_35E640();
  if (v10) {
    LOBYTE(v10) = sub_37B490(a4);
  }
  *(unsigned char *)(a1 + 33) = v10;
  *(unsigned char *)(a1 + 34) = sub_DBF2D4(a2);
  *(unsigned char *)(a1 + 35) = sub_DBCA50(a2);
  *(unsigned char *)(a1 + 36) = sub_35E640();
  sub_DC3F00(a2, a1 + 40);
  unsigned __int8 v15 = (sub_DBBBCC(a2) >> 56) & 1;
  char v14 = sub_35E640();
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  sub_CF65B8((char **)&v12, 0x51B3BEA3677D46CFLL * ((a3[1] - *a3) >> 3));
  sub_D041F4(*a3, a3[1], (uint64_t *)&v12, *((uint64_t *)&v12 + 1), &v14, &v15);
  if (*v8)
  {
    sub_CD86D4(v8);
    operator delete((void *)*v8);
    *uint64_t v8 = 0;
    v8[1] = 0;
    __n128 v8[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = v12;
  *(void *)(a1 + 24) = v13;
  return a1;
}

void sub_D041AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_CD7F04(&a9);
  sub_C6CBE0(v10);
  sub_CD7F04(v9);
  _Unwind_Resume(a1);
}

void sub_D041E0(_Unwind_Exception *a1)
{
  sub_CD7F04(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_D041F4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char *a5, unsigned __int8 *a6)
{
  if (a1 != a2)
  {
    uint64_t v11 = a1;
    do
    {
      sub_CD8044((uint64_t)v18, v11, *a5, *a6);
      long long v12 = sub_CF69DC(a3, a4, (uint64_t)v18);
      if (__p)
      {
        uint64_t v24 = __p;
        operator delete(__p);
      }
      uint64_t v13 = (char *)v21;
      if (v21)
      {
        char v14 = v22;
        unsigned __int8 v15 = v21;
        if (v22 != v21)
        {
          do
          {
            uint64_t v16 = (void *)*((void *)v14 - 4);
            if (v16)
            {
              *((void *)v14 - 3) = v16;
              operator delete(v16);
            }
            v14 -= 104;
          }
          while (v14 != v13);
          unsigned __int8 v15 = v21;
        }
        uint64_t v22 = v13;
        operator delete(v15);
      }
      if (v19)
      {
        uint64_t v20 = v19;
        operator delete(v19);
      }
      a4 = (uint64_t)(v12 + 42);
      v11 += 376;
    }
    while (v11 != a2);
  }
  return a3;
}

void sub_D04308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_CD7DD0((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_D0431C(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x199999999999999) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v6 = 0x199999999999999;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x199999999999999) {
      sub_188D718();
    }
    char v7 = (char *)operator new(160 * v6);
  }
  else
  {
    char v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 48);
  unsigned int v9 = &v7[160 * v3];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v9 + 3) = v8;
  int v10 = &v7[160 * v6];
  *(_DWORD *)(v9 + 63) = *(_DWORD *)(a2 + 63);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unsigned int v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v11;
  *(_OWORD *)(v9 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v9 + 11) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  int v12 = *(_DWORD *)(a2 + 96);
  v9[100] = *(unsigned char *)(a2 + 100);
  *((_DWORD *)v9 + 24) = v12;
  *(_OWORD *)(v9 + 104) = *(_OWORD *)(a2 + 104);
  *((void *)v9 + 15) = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *((void *)v9 + 17) = 0;
  *((void *)v9 + 18) = 0;
  *((_OWORD *)v9 + 8) = *(_OWORD *)(a2 + 128);
  *((void *)v9 + 18) = *(void *)(a2 + 144);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  int v13 = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(v9 + 155) = *(_DWORD *)(a2 + 155);
  *((_DWORD *)v9 + 38) = v13;
  char v14 = v9 + 160;
  unsigned __int8 v15 = (char *)*a1;
  uint64_t v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v9;
    a1[1] = v14;
    a1[2] = v10;
    if (!v16) {
      return v14;
    }
    goto LABEL_25;
  }
  uint64_t v17 = 0;
  do
  {
    unint64_t v18 = &v16[v17];
    char v19 = &v9[v17];
    *((_OWORD *)v19 - 10) = *(_OWORD *)&v16[v17 - 160];
    long long v20 = *(_OWORD *)&v16[v17 - 144];
    long long v21 = *(_OWORD *)&v16[v17 - 128];
    long long v22 = *(_OWORD *)&v16[v17 - 112];
    *(_DWORD *)(v19 - 97) = *(_DWORD *)&v16[v17 - 97];
    *((_OWORD *)v19 - 8) = v21;
    *((_OWORD *)v19 - 7) = v22;
    *((void *)v19 - 10) = 0;
    *((void *)v19 - 9) = 0;
    *((_OWORD *)v19 - 9) = v20;
    *(_OWORD *)(v19 - 88) = *(_OWORD *)&v16[v17 - 88];
    *((void *)v19 - 9) = *(void *)&v16[v17 - 72];
    *((void *)v18 - 11) = 0;
    *((void *)v18 - 10) = 0;
    *((void *)v18 - 9) = 0;
    int v23 = *(_DWORD *)&v16[v17 - 64];
    *(v19 - 60) = v16[v17 - 60];
    *((void *)v19 - 6) = 0;
    *((void *)v19 - 5) = 0;
    *((_DWORD *)v19 - 16) = v23;
    *(_OWORD *)(v19 - 56) = *(_OWORD *)&v16[v17 - 56];
    *((void *)v19 - 5) = *(void *)&v16[v17 - 40];
    *((void *)v18 - 7) = 0;
    *((void *)v18 - 6) = 0;
    *((void *)v18 - 5) = 0;
    *((void *)v19 - 3) = 0;
    *((void *)v19 - 2) = 0;
    *((_OWORD *)v19 - 2) = *(_OWORD *)&v16[v17 - 32];
    *((void *)v19 - 2) = *(void *)&v16[v17 - 16];
    *((void *)v18 - 4) = 0;
    *((void *)v18 - 3) = 0;
    *((void *)v18 - 2) = 0;
    int v24 = *(_DWORD *)&v16[v17 - 8];
    *(_DWORD *)(v19 - 5) = *(_DWORD *)&v16[v17 - 5];
    *((_DWORD *)v19 - 2) = v24;
    v17 -= 160;
  }
  while (&v16[v17] != v15);
  uint64_t v25 = (char *)*a1;
  uint64_t v16 = (char *)a1[1];
  *a1 = &v9[v17];
  a1[1] = v14;
  a1[2] = v10;
  if (v16 != v25)
  {
    do
    {
      int v26 = (void *)*((void *)v16 - 4);
      if (v26)
      {
        *((void *)v16 - 3) = v26;
        operator delete(v26);
      }
      long long v27 = (void *)*((void *)v16 - 7);
      if (v27)
      {
        *((void *)v16 - 6) = v27;
        operator delete(v27);
      }
      uint64_t v28 = (void *)*((void *)v16 - 11);
      if (v28)
      {
        *((void *)v16 - 10) = v28;
        operator delete(v28);
      }
      v16 -= 160;
    }
    while (v16 != v25);
    uint64_t v16 = v25;
  }
  if (v16) {
LABEL_25:
  }
    operator delete(v16);
  return v14;
}

uint64_t sub_D04598(uint64_t a1, void ***a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)a1 = sub_35E640();
  *(_DWORD *)(a1 + 4) = sub_649094();
  sub_DBEA58(a2, (void *)(a1 + 8));
  *(_DWORD *)(a1 + 32) = -1;
  *(void *)(a1 + 40) = -1;
  sub_DBEBB0((char *)a2, a1 + 48);
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 100) = xmmword_20F04F0;
  *(void *)(a1 + 120) = -1;
  *(void *)(a1 + 128) = -1;
  *(void *)(a1 + 136) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = -1935635296;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 167) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 204) = 100;
  *(void *)(a1 + 208) = 0x7FFFFFFFFFFFFFFFLL;
  sub_3F4FA4((void *)(a1 + 216));
  sub_DBE680((uint64_t)a2, (char **)(a1 + 240));
  *(void *)(a1 + 264) = a3;
  *(void *)(a1 + 272) = a4;
  *(unsigned char *)(a1 + 280) = 0;
  return a1;
}

void sub_D046AC(_Unwind_Exception *a1)
{
  sub_47E060(v4);
  long long v8 = *v6;
  if (*v6)
  {
    *(void *)(v2 + 184) = v8;
    operator delete(v8);
  }
  unsigned int v9 = *v5;
  if (*v5)
  {
    *(void *)(v2 + 80) = v9;
    operator delete(v9);
  }
  sub_1A668(v3);
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_D046F8(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D0470C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v9 = a1 + 32;
  uint64_t v10 = a1 + 56;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v11 = sub_37B3A8(a4);
  uint64_t v12 = *(void *)v11;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(v11 + 8);
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 92) = sub_DBBBCC(a2);
  *(_WORD *)(a1 + 100) = v13;
  *(unsigned char *)(a1 + 102) = v14;
  *(void *)(a1 + 104) = a4;
  *(void *)(a1 + 112) = sub_DBDB38(a2);
  *(void *)(a1 + 120) = 0x7FFFFFFFFFFFFFFELL;
  *(_DWORD *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 132) = a5;
  sub_F5EBCC();
  unsigned __int8 v15 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v15;
    operator delete(v15);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = v54;
  uint64_t v16 = v55;
  uint64_t v17 = v56;
  uint64_t v55 = 0;
  long long v54 = 0uLL;
  *(void *)(a1 + 16) = v16;
  *(void *)(a1 + 24) = v17;
  uint64_t v18 = *(void *)(a1 + 32);
  if (v18)
  {
    uint64_t v19 = *(void *)(a1 + 40);
    long long v20 = *(void **)(a1 + 32);
    if (v19 != v18)
    {
      uint64_t v21 = *(void *)(a1 + 40);
      do
      {
        int v23 = *(void **)(v21 - 32);
        v21 -= 32;
        long long v22 = v23;
        if (v23)
        {
          *(void *)(v19 - 24) = v22;
          operator delete(v22);
        }
        uint64_t v19 = v21;
      }
      while (v21 != v18);
      long long v20 = *(void **)v9;
    }
    *(void *)(a1 + 40) = v18;
    operator delete(v20);
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
  }
  *(_OWORD *)(a1 + 32) = v59;
  *(void *)(a1 + 48) = v60;
  uint64_t v60 = 0;
  long long v59 = 0uLL;
  uint64_t v24 = *(void *)(a1 + 56);
  if (v24)
  {
    uint64_t v25 = *(void *)(a1 + 64);
    int v26 = *(void **)(a1 + 56);
    if (v25 != v24)
    {
      uint64_t v27 = *(void *)(a1 + 64);
      do
      {
        uint64_t v29 = *(void **)(v27 - 40);
        v27 -= 40;
        uint64_t v28 = v29;
        if (v29)
        {
          *(void *)(v25 - 32) = v28;
          operator delete(v28);
        }
        uint64_t v25 = v27;
      }
      while (v27 != v24);
      int v26 = *(void **)v10;
    }
    *(void *)(a1 + 64) = v24;
    operator delete(v26);
    *(void *)uint64_t v10 = 0;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
  }
  *(_OWORD *)(a1 + 56) = v61;
  *(void *)(a1 + 72) = v62;
  uint64_t v62 = 0;
  long long v61 = 0uLL;
  if (*(void *)a1 == *(void *)(a1 + 8) && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v52);
    sub_188FC78(v52, (uint64_t)"No CyclingQueryTerminalFactory could be created for origin", 58);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (SHIBYTE(v51) < 0) {
      operator delete(__p);
    }
    if (v53 < 0) {
      operator delete(v52[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v30 = *(void *)(a1 + 104);
  HIBYTE(v52[2]) = 18;
  strcpy((char *)v52, "CyclingPathFinding");
  std::string __p = 0;
  int v50 = 0;
  uint64_t v51 = 0;
  uint64_t v31 = sub_374CDC(v30, (uint64_t)v52, (uint64_t *)&__p);
  uint64_t v32 = (void **)__p;
  if (__p)
  {
    int64_t v33 = v50;
    uint64_t v34 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v33 - 1) < 0) {
          operator delete(*(v33 - 3));
        }
        v33 -= 3;
      }
      while (v33 != v32);
      uint64_t v34 = __p;
    }
    int v50 = v32;
    operator delete(v34);
  }
  if (SHIBYTE(v52[2]) < 0) {
    operator delete(v52[0]);
  }
  HIBYTE(v52[2]) = 12;
  strcpy((char *)v52, "max_distance");
  uint64_t v35 = sub_561B0(v31, (uint64_t)v52);
  *(void *)(a1 + 120) = sub_A2D5F4(v35);
  if (SHIBYTE(v52[2]) < 0) {
    operator delete(v52[0]);
  }
  *(_DWORD *)(a1 + 128) = sub_CF7B34(a1, v31);
  uint64_t v36 = v61;
  if ((void)v61)
  {
    uint64_t v37 = *((void *)&v61 + 1);
    uint64_t v38 = (void *)v61;
    if (*((void *)&v61 + 1) != (void)v61)
    {
      uint64_t v39 = *((void *)&v61 + 1);
      do
      {
        uint64_t v41 = *(void **)(v39 - 40);
        v39 -= 40;
        int v40 = v41;
        if (v41)
        {
          *(void *)(v37 - 32) = v40;
          operator delete(v40);
        }
        uint64_t v37 = v39;
      }
      while (v39 != v36);
      uint64_t v38 = (void *)v61;
    }
    *((void *)&v61 + 1) = v36;
    operator delete(v38);
  }
  uint64_t v42 = v59;
  if ((void)v59)
  {
    uint64_t v43 = *((void *)&v59 + 1);
    long long v44 = (void *)v59;
    if (*((void *)&v59 + 1) != (void)v59)
    {
      uint64_t v45 = *((void *)&v59 + 1);
      do
      {
        uint64_t v47 = *(void **)(v45 - 32);
        v45 -= 32;
        uint64_t v46 = v47;
        if (v47)
        {
          *(void *)(v43 - 24) = v46;
          operator delete(v46);
        }
        uint64_t v43 = v45;
      }
      while (v45 != v42);
      long long v44 = (void *)v59;
    }
    *((void *)&v59 + 1) = v42;
    operator delete(v44);
  }
  if (v57)
  {
    char v58 = v57;
    operator delete(v57);
  }
  if ((void)v54)
  {
    *((void *)&v54 + 1) = v54;
    operator delete((void *)v54);
  }
  return a1;
}

void sub_D04BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_CF7EAC((uint64_t)&a53);
  sub_591CA4(v55);
  sub_C64510(v54);
  uint64_t v57 = *(void **)v53;
  if (*(void *)v53)
  {
    *(void *)(v53 + 8) = v57;
    operator delete(v57);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D04C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 4) = 0;
  uint64_t v5 = (unsigned int *)(a1 + 4);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  unint64_t v6 = (double *)(a1 + 40);
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  HIBYTE(v28[2]) = 21;
  strcpy((char *)v28, "CyclingRouteSelection");
  std::string __p = 0;
  int v26 = 0;
  uint64_t v27 = 0;
  char v7 = sub_374CDC(a3, (uint64_t)v28, (uint64_t *)&__p);
  sub_54214((uint64_t)v29, (uint64_t)v7);
  long long v8 = (void **)__p;
  if (__p)
  {
    uint64_t v9 = v26;
    uint64_t v10 = __p;
    if (v26 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p;
    }
    int v26 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  HIBYTE(v28[2]) = 17;
  strcpy((char *)v28, "return_all_routes");
  *(unsigned char *)a1 = sub_29D62C(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  HIBYTE(v28[2]) = 14;
  strcpy((char *)v28, "max_num_routes");
  unsigned int v11 = sub_31AC04(v29, (uint64_t)v28);
  unsigned int v12 = sub_65BD8();
  if (v12 >= v11) {
    unsigned int v13 = v11;
  }
  else {
    unsigned int v13 = v12;
  }
  unsigned int *v5 = v13;
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  HIBYTE(v28[2]) = 20;
  strcpy((char *)v28, "max_relative_sharing");
  *(double *)(a1 + 8) = sub_5C7E8(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  HIBYTE(v28[2]) = 20;
  strcpy((char *)v28, "min_line_distance_cm");
  *(_DWORD *)(a1 + 16) = sub_31AC04(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  strcpy((char *)v28, "score_threshold_factor");
  HIBYTE(v28[2]) = 22;
  *(double *)(a1 + 24) = sub_5C7E8(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  v28[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v28[1] = xmmword_20B93C0;
  strcpy(v28[0], "minimum_score_difference_with_main_route");
  *(_DWORD *)(a1 + 32) = sub_31AC04(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  v28[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v28[1] = xmmword_20B8E90;
  strcpy(v28[0], "score_threshold_additive_linear");
  double *v6 = sub_5C7E8(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  v28[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v28[1] = xmmword_20B9800;
  strcpy(v28[0], "score_threshold_additive_fuzzy");
  *(double *)(a1 + 48) = sub_5C7E8(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  v28[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v28[1] = xmmword_20B93A0;
  strcpy(v28[0], "first_route_as_main_route_max_score");
  *(double *)(a1 + 56) = sub_5C7E8(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  v28[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v28[1] = xmmword_20B9A40;
  strcpy(v28[0], "enable_fuzzy_scoring_for_non_avoid_options");
  BOOL v14 = sub_29D62C(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  v28[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v28[1] = xmmword_20E12D0;
  strcpy(v28[0], "enable_fuzzy_scoring_for_avoid_options");
  BOOL v15 = sub_29D62C(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  v28[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v28[1] = xmmword_20B93E0;
  strcpy(v28[0], "enable_linear_scoring_for_non_avoid_options");
  BOOL v16 = sub_29D62C(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  v28[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v28[1] = xmmword_20B9960;
  strcpy(v28[0], "enable_linear_scoring_for_avoid_options");
  BOOL v17 = sub_29D62C(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  unint64_t v18 = sub_DBBBCC(a2);
  if ((v18 & 0xFF00FF) != 0)
  {
    if (v17) {
      char v19 = 2;
    }
    else {
      char v19 = 0;
    }
    if (v15) {
      char v19 = 1;
    }
  }
  else
  {
    if (v16) {
      char v19 = 2;
    }
    else {
      char v19 = 0;
    }
    if (v14) {
      char v19 = 1;
    }
    if (v17) {
      char v20 = 2;
    }
    else {
      char v20 = 0;
    }
    if (v15) {
      char v20 = 1;
    }
    if ((v18 & 0xFF00) != 0) {
      char v19 = v20;
    }
  }
  *(unsigned char *)(a1 + 64) = v19;
  v28[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v28[1] = xmmword_20B8FD0;
  strcpy(v28[0], "max_length_in_unsupported_regions_cm");
  *(_DWORD *)(a1 + 68) = sub_31AC04(v29, (uint64_t)v28);
  if (SHIBYTE(v28[2]) < 0) {
    operator delete(v28[0]);
  }
  uint64_t v21 = v30;
  if (v30)
  {
    do
    {
      uint64_t v24 = *(char **)v21;
      sub_57AC8((uint64_t *)v21 + 5);
      if (v21[39] < 0) {
        operator delete(*((void **)v21 + 2));
      }
      operator delete(v21);
      uint64_t v21 = v24;
    }
    while (v24);
  }
  long long v22 = v29[0];
  v29[0] = 0;
  if (v22) {
    operator delete(v22);
  }
  return a1;
}

void sub_D052A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_5450C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_D05354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xD0534CLL);
}

uint64_t sub_D05378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v5 = (void **)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  unint64_t v6 = (void **)(a1 + 56);
  char v7 = (void **)(a1 + 32);
  long long v8 = (void **)(a1 + 80);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  v32[23] = 20;
  strcpy(v32, "CyclingCoverageCheck");
  std::string __p = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v9 = sub_374CDC(a3, (uint64_t)v32, (uint64_t *)&__p);
  sub_54214((uint64_t)v33, (uint64_t)v9);
  uint64_t v10 = (void **)__p;
  if (__p)
  {
    unsigned int v11 = v30;
    unsigned int v12 = __p;
    if (v30 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      unsigned int v12 = __p;
    }
    uint64_t v30 = v10;
    operator delete(v12);
  }
  if ((v32[23] & 0x80000000) != 0) {
    operator delete(*(void **)v32);
  }
  *(unsigned char *)a1 = sub_29D62C(v33, (uint64_t)&xmmword_25E6308);
  sub_5C308(v33, (uint64_t)&qword_25E6368, (uint64_t)v32);
  unsigned int v13 = (void **)*v5;
  if (*v5)
  {
    BOOL v14 = *(void ***)(a1 + 16);
    BOOL v15 = *v5;
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 3;
      }
      while (v14 != v13);
      BOOL v15 = *v5;
    }
    *(void *)(a1 + 16) = v13;
    operator delete(v15);
    unsigned int *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v32;
  *(void *)(a1 + 24) = *(void *)&v32[16];
  sub_5C308(v33, (uint64_t)&qword_25E6380, (uint64_t)v32);
  BOOL v16 = (void **)*v6;
  if (*v6)
  {
    BOOL v17 = *(void ***)(a1 + 64);
    unint64_t v18 = *v6;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 3;
      }
      while (v17 != v16);
      unint64_t v18 = *v6;
    }
    *(void *)(a1 + 64) = v16;
    operator delete(v18);
    double *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v32;
  *(void *)(a1 + 72) = *(void *)&v32[16];
  sub_5C308(v33, (uint64_t)&xmmword_25E6338, (uint64_t)v32);
  char v19 = (void **)*v7;
  if (*v7)
  {
    char v20 = *(void ***)(a1 + 40);
    uint64_t v21 = *v7;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v20 - 1) < 0) {
          operator delete(*(v20 - 3));
        }
        v20 -= 3;
      }
      while (v20 != v19);
      uint64_t v21 = *v7;
    }
    *(void *)(a1 + 40) = v19;
    operator delete(v21);
    *char v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v32;
  *(void *)(a1 + 48) = *(void *)&v32[16];
  sub_5C308(v33, (uint64_t)byte_25E6350, (uint64_t)v32);
  long long v22 = (void **)*v8;
  if (*v8)
  {
    int v23 = *(void ***)(a1 + 88);
    uint64_t v24 = *v8;
    if (v23 != v22)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v22);
      uint64_t v24 = *v8;
    }
    *(void *)(a1 + 88) = v22;
    operator delete(v24);
    *long long v8 = 0;
    v8[1] = 0;
    __n128 v8[2] = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)v32;
  *(void *)(a1 + 96) = *(void *)&v32[16];
  *(unsigned char *)(a1 + 1) = sub_DBCA50(a2);
  uint64_t v25 = v34;
  if (v34)
  {
    do
    {
      uint64_t v28 = *(char **)v25;
      sub_57AC8((uint64_t *)v25 + 5);
      if (v25[39] < 0) {
        operator delete(*((void **)v25 + 2));
      }
      operator delete(v25);
      uint64_t v25 = v28;
    }
    while (v28);
  }
  int v26 = v33[0];
  v33[0] = 0;
  if (v26) {
    operator delete(v26);
  }
  return a1;
}

void sub_D056D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_5450C((uint64_t)va);
  sub_1A668(v11);
  sub_1A668(v10);
  sub_1A668(v9);
  sub_1A668(v8);
  _Unwind_Resume(a1);
}

void sub_D05714(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0xD056ECLL);
}

uint64_t sub_D05734(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  long long v8 = (long long *)sub_377D04(a4);
  char v16 = 1;
  sub_29E004((char *)__dst, v8);
  sub_DBFB34(a3, (uint64_t)__dst, a1 + 24);
  if (v16)
  {
    if (v15 < 0)
    {
      operator delete(__p);
      if ((v13 & 0x80000000) == 0)
      {
LABEL_4:
        if ((v11 & 0x80000000) == 0) {
          goto LABEL_5;
        }
LABEL_8:
        operator delete(__dst[0]);
        goto LABEL_5;
      }
    }
    else if ((v13 & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(v12);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
LABEL_5:
  *(void *)(a1 + 136) = a4;
  sub_D058A8(a1, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  sub_D05A54(*a2, a2[1], (char **)a1, *(char **)(a1 + 8));
  return a1;
}

void sub_D05860(_Unwind_Exception *a1)
{
  sub_4BC1B8(v2);
  sub_5AB1B0(v1);
  _Unwind_Resume(a1);
}

void sub_D058A8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x222222222222223) {
    sub_2E00();
  }
  unint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = 120 * a2;
  unint64_t v6 = (char *)operator new(120 * a2);
  char v7 = &v6[v5];
  long long v8 = &v6[(char *)v4 - (char *)v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_19;
  }
  uint64_t v9 = &v6[(char *)v4 - (char *)v2];
  do
  {
    long long v10 = *(_OWORD *)(v4 - 15);
    v4 -= 15;
    *(_OWORD *)(v9 - 120) = v10;
    v9 -= 120;
    *((void *)v9 + 2) = v4[2];
    v4[1] = 0;
    v4[2] = 0;
    void *v4 = 0;
    long long v11 = *(_OWORD *)(v4 + 7);
    long long v12 = *(_OWORD *)(v4 + 9);
    uint64_t v13 = *(uint64_t *)((char *)v4 + 85);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v4 + 5);
    *(void *)(v9 + 85) = v13;
    *(_OWORD *)(v9 + 72) = v12;
    *(_OWORD *)(v9 + 56) = v11;
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v4 + 3);
    long long v14 = *((_OWORD *)v4 + 6);
    *((void *)v9 + 14) = v4[14];
    *((_OWORD *)v9 + 6) = v14;
    v4[13] = 0;
    v4[14] = 0;
    v4[12] = 0;
  }
  while (v4 != v2);
  char v15 = *(void ***)a1;
  uint64_t v2 = *(void ***)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v15)
  {
    while (1)
    {
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*(v2 - 3));
        char v16 = v2 - 15;
        BOOL v17 = *(v2 - 15);
        if (v17)
        {
LABEL_14:
          uint64_t v18 = (uint64_t)*(v2 - 14);
          char v19 = v17;
          if ((void *)v18 != v17)
          {
            do
              uint64_t v18 = sub_3AFFFC(v18 - 1056);
            while ((void *)v18 != v17);
            char v19 = *v16;
          }
          *(v2 - 14) = v17;
          operator delete(v19);
        }
      }
      else
      {
        char v16 = v2 - 15;
        BOOL v17 = *(v2 - 15);
        if (v17) {
          goto LABEL_14;
        }
      }
      uint64_t v2 = v16;
      if (v16 == v15)
      {
        uint64_t v2 = v15;
        break;
      }
    }
  }
  if (!v2) {
    return;
  }
LABEL_19:

  operator delete(v2);
}

char **sub_D05A54(uint64_t *a1, uint64_t *a2, char **a3, char *a4)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; i += 3)
    {
      uint64_t v7 = *i;
      if (*i == i[1])
      {
        *(_OWORD *)&v19[64] = 0u;
        *(_OWORD *)std::string __p = 0u;
        memset(v19, 0, 72);
        v19[32] = 1;
        v19[37] = 1;
        *(_DWORD *)&v19[38] = 0;
        *(_DWORD *)&v19[41] = 0;
        long long v11 = &v20;
        *(_DWORD *)&v19[72] = -1;
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v7;
        *(void *)char v19 = *(void *)(v7 + 16);
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0;
        *(void *)uint64_t v7 = 0;
        *(_OWORD *)&v19[8] = *(_OWORD *)(v7 + 24);
        uint64_t v8 = *(void *)(v7 + 85);
        long long v9 = *(_OWORD *)(v7 + 72);
        long long v10 = *(_OWORD *)(v7 + 56);
        *(_OWORD *)&v19[24] = *(_OWORD *)(v7 + 40);
        *(_OWORD *)&v19[40] = v10;
        *(_OWORD *)&v19[56] = v9;
        *(void *)&v19[69] = v8;
        long long v11 = (long long *)(v7 + 96);
        long long v12 = *(_OWORD *)(v7 + 96);
        uint64_t v21 = *(void *)(v7 + 112);
        long long v20 = v12;
      }
      *(void *)long long v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = 0;
      uint64_t v13 = sub_D05BFC(a3, a4, (uint64_t)__p);
      if (SHIBYTE(v21) < 0)
      {
        operator delete((void *)v20);
        long long v14 = __p[0];
        if (__p[0])
        {
LABEL_12:
          char v15 = __p[1];
          char v16 = v14;
          if (__p[1] != v14)
          {
            do
              char v15 = (void *)sub_3AFFFC((uint64_t)v15 - 1056);
            while (v15 != v14);
            char v16 = __p[0];
          }
          __p[1] = v14;
          operator delete(v16);
        }
      }
      else
      {
        long long v14 = __p[0];
        if (__p[0]) {
          goto LABEL_12;
        }
      }
      a4 = v13 + 120;
    }
  }
  return a3;
}

void sub_D05BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_D05BFC(char **a1, char *a2, uint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((a2 - *a1) >> 3);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v25 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6 - (void)v7) >> 3) + 1;
    if (v25 > 0x222222222222222) {
      sub_2E00();
    }
    unint64_t v26 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v9 - (void)v7) >> 3);
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x111111111111111) {
      unint64_t v27 = 0x222222222222222;
    }
    else {
      unint64_t v27 = v25;
    }
    uint64_t v60 = a1 + 2;
    if (v27)
    {
      if (v27 > 0x222222222222222) {
        sub_188D718();
      }
      uint64_t v28 = (char *)operator new(120 * v27);
    }
    else
    {
      uint64_t v28 = 0;
    }
    uint64_t v56 = v28;
    uint64_t v57 = &v28[120 * v8];
    char v58 = v57;
    long long v59 = &v28[120 * v27];
    sub_D060A4((uint64_t)&v56, a3);
    uint64_t v34 = v57;
    uint64_t v35 = *a1;
    uint64_t v36 = v57;
    if (*a1 != v4)
    {
      uint64_t v36 = v57;
      uint64_t v37 = v4;
      do
      {
        *((void *)v36 - 15) = 0;
        *((void *)v36 - 14) = 0;
        v36 -= 120;
        *((void *)v36 + 2) = 0;
        long long v38 = *(_OWORD *)(v37 - 15);
        v37 -= 15;
        *(_OWORD *)uint64_t v36 = v38;
        *((void *)v36 + 2) = v37[2];
        v37[1] = 0;
        v37[2] = 0;
        *uint64_t v37 = 0;
        long long v39 = *(_OWORD *)(v37 + 7);
        long long v40 = *(_OWORD *)(v37 + 9);
        uint64_t v41 = *(void *)((char *)v37 + 85);
        *(_OWORD *)(v36 + 40) = *(_OWORD *)(v37 + 5);
        *(void *)(v36 + 85) = v41;
        *(_OWORD *)(v36 + 72) = v40;
        *(_OWORD *)(v36 + 56) = v39;
        *(_OWORD *)(v36 + 24) = *(_OWORD *)(v37 + 3);
        long long v42 = *((_OWORD *)v37 + 6);
        *((void *)v36 + 14) = v37[14];
        *((_OWORD *)v36 + 6) = v42;
        v37[13] = 0;
        v37[14] = 0;
        v37[12] = 0;
      }
      while (v37 != (void *)v35);
    }
    uint64_t v57 = v36;
    uint64_t v43 = a1[1];
    long long v44 = v58;
    if (v43 != v4)
    {
      do
      {
        *(void *)long long v44 = 0;
        *((void *)v44 + 1) = 0;
        *((void *)v44 + 2) = 0;
        *(_OWORD *)long long v44 = *(_OWORD *)v4;
        *((void *)v44 + 2) = *((void *)v4 + 2);
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        *(void *)unint64_t v4 = 0;
        long long v45 = *(_OWORD *)(v4 + 56);
        long long v46 = *(_OWORD *)(v4 + 72);
        uint64_t v47 = *(void *)(v4 + 85);
        *(_OWORD *)(v44 + 40) = *(_OWORD *)(v4 + 40);
        *(void *)(v44 + 85) = v47;
        *(_OWORD *)(v44 + 72) = v46;
        *(_OWORD *)(v44 + 56) = v45;
        *(_OWORD *)(v44 + 24) = *(_OWORD *)(v4 + 24);
        long long v48 = *((_OWORD *)v4 + 6);
        *((void *)v44 + 14) = *((void *)v4 + 14);
        *((_OWORD *)v44 + 6) = v48;
        *((void *)v4 + 13) = 0;
        *((void *)v4 + 14) = 0;
        *((void *)v4 + 12) = 0;
        v44 += 120;
        v4 += 120;
      }
      while (v4 != v43);
      uint64_t v36 = v57;
      unint64_t v4 = a1[1];
    }
    long long v49 = *a1;
    *a1 = v36;
    a1[1] = v44;
    int v50 = a1[2];
    a1[2] = v59;
    char v58 = v4;
    long long v59 = v50;
    uint64_t v56 = v49;
    uint64_t v57 = v49;
    if (v4 == v49)
    {
      if (!v4) {
        return v34;
      }
      goto LABEL_33;
    }
    while (1)
    {
      uint64_t v52 = (void **)(v4 - 120);
      char v58 = v4 - 120;
      if (*(v4 - 1) < 0)
      {
        operator delete(*((void **)v4 - 3));
        uint64_t v53 = *v52;
        if (*v52)
        {
LABEL_42:
          uint64_t v54 = *((void *)v4 - 14);
          uint64_t v55 = v53;
          if ((void *)v54 != v53)
          {
            do
              uint64_t v54 = sub_3AFFFC(v54 - 1056);
            while ((void *)v54 != v53);
            uint64_t v55 = *v52;
          }
          *((void *)v4 - 14) = v53;
          operator delete(v55);
        }
      }
      else
      {
        uint64_t v53 = *v52;
        if (*v52) {
          goto LABEL_42;
        }
      }
      unint64_t v4 = v58;
      if (v58 == v49)
      {
        unint64_t v4 = v56;
        if (!v56) {
          return v34;
        }
LABEL_33:
        operator delete(v4);
        return v34;
      }
    }
  }
  if (a2 == (char *)v6)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((void *)a2 + 2) = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    uint64_t v29 = &v7[120 * v8];
    long long v30 = *(_OWORD *)(a3 + 56);
    long long v31 = *(_OWORD *)(a3 + 72);
    uint64_t v32 = *(void *)(a3 + 85);
    *(_OWORD *)(v29 + 40) = *(_OWORD *)(a3 + 40);
    *(void *)(v29 + 85) = v32;
    *(_OWORD *)(v29 + 72) = v31;
    *(_OWORD *)(v29 + 56) = v30;
    *(_OWORD *)(v29 + 24) = *(_OWORD *)(a3 + 24);
    long long v33 = *(_OWORD *)(a3 + 96);
    *((void *)v29 + 14) = *(void *)(a3 + 112);
    *((_OWORD *)v29 + 6) = v33;
    *(void *)(a3 + 104) = 0;
    *(void *)(a3 + 112) = 0;
    *(void *)(a3 + 96) = 0;
    a1[1] = a2 + 120;
  }
  else
  {
    long long v10 = a1[1];
    if (v6 >= 0x78)
    {
      unint64_t v11 = v6 - 120;
      long long v10 = a1[1];
      do
      {
        *(void *)long long v10 = 0;
        *((void *)v10 + 1) = 0;
        *((void *)v10 + 2) = 0;
        *(_OWORD *)long long v10 = *(_OWORD *)v11;
        *((void *)v10 + 2) = *(void *)(v11 + 16);
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)unint64_t v11 = 0;
        long long v12 = *(_OWORD *)(v11 + 56);
        long long v13 = *(_OWORD *)(v11 + 72);
        uint64_t v14 = *(void *)(v11 + 85);
        *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
        *(void *)(v10 + 85) = v14;
        *(_OWORD *)(v10 + 72) = v13;
        *(_OWORD *)(v10 + 56) = v12;
        *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
        long long v15 = *(_OWORD *)(v11 + 96);
        *((void *)v10 + 14) = *(void *)(v11 + 112);
        *((_OWORD *)v10 + 6) = v15;
        *(void *)(v11 + 104) = 0;
        *(void *)(v11 + 112) = 0;
        *(void *)(v11 + 96) = 0;
        v10 += 120;
        v11 += 120;
      }
      while (v11 < v6);
    }
    a1[1] = v10;
    sub_D06324(a2, (void *)(v6 - 120), v6);
    uint64_t v16 = *(void *)v4;
    if (*(void *)v4)
    {
      uint64_t v17 = *((void *)v4 + 1);
      uint64_t v18 = *(void **)v4;
      if (v17 != v16)
      {
        do
          uint64_t v17 = sub_3AFFFC(v17 - 1056);
        while (v17 != v16);
        uint64_t v18 = *(void **)v4;
      }
      *((void *)v4 + 1) = v16;
      operator delete(v18);
      *(void *)unint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
    }
    *(_OWORD *)unint64_t v4 = *(_OWORD *)a3;
    *((void *)v4 + 2) = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    char v19 = &v7[120 * v8];
    long long v20 = *(_OWORD *)(a3 + 56);
    long long v21 = *(_OWORD *)(a3 + 72);
    uint64_t v22 = *(void *)(a3 + 85);
    *(_OWORD *)(v19 + 40) = *(_OWORD *)(a3 + 40);
    *(void *)(v19 + 85) = v22;
    *(_OWORD *)(v19 + 72) = v21;
    *(_OWORD *)(v19 + 56) = v20;
    *(_OWORD *)(v19 + 24) = *(_OWORD *)(a3 + 24);
    int v23 = (void **)(v19 + 96);
    if (v4[119] < 0) {
      operator delete(*v23);
    }
    long long v24 = *(_OWORD *)(a3 + 96);
    v23[2] = *(void **)(a3 + 112);
    *(_OWORD *)int v23 = v24;
    *(unsigned char *)(a3 + 119) = 0;
    *(unsigned char *)(a3 + 96) = 0;
  }
  return v4;
}

void sub_D06090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5AC2CC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_D060A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != *(void *)(a1 + 24)) {
    goto LABEL_28;
  }
  uint64_t v5 = *(void **)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 > *(void *)a1)
  {
    int64_t v7 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6 - *(void *)a1) >> 3);
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = -120 * (v8 >> 1);
    sub_C7B35C(*(void *)(a1 + 8), v4, v6 - 120 * (v8 >> 1));
    uint64_t v4 = v10;
    *(void *)(a1 + 8) += v9;
    *(void *)(a1 + 16) = v10;
    goto LABEL_28;
  }
  unint64_t v11 = 0xDDDDDDDDDDDDDDDELL * ((v4 - (uint64_t)v5) >> 3);
  if ((void *)v4 == v5) {
    unint64_t v11 = 1;
  }
  if (v11 >= 0x222222222222223) {
    sub_188D718();
  }
  unint64_t v12 = v11 >> 2;
  uint64_t v13 = 120 * v11;
  uint64_t v14 = (char *)operator new(120 * v11);
  long long v15 = &v14[120 * v12];
  uint64_t v16 = &v14[v13];
  if (v4 != v6)
  {
    uint64_t v17 = &v15[v4 - v6];
    uint64_t v18 = 120 * v12;
    do
    {
      char v19 = &v14[v18];
      *(_OWORD *)char v19 = *(_OWORD *)v6;
      *((void *)v19 + 2) = *(void *)(v6 + 16);
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      *(void *)unint64_t v6 = 0;
      long long v20 = *(_OWORD *)(v6 + 56);
      long long v21 = *(_OWORD *)(v6 + 72);
      uint64_t v22 = *(void *)(v6 + 85);
      *(_OWORD *)(v19 + 40) = *(_OWORD *)(v6 + 40);
      *(void *)(v19 + 85) = v22;
      *(_OWORD *)(v19 + 72) = v21;
      *(_OWORD *)(v19 + 56) = v20;
      *(_OWORD *)(v19 + 24) = *(_OWORD *)(v6 + 24);
      long long v23 = *(_OWORD *)(v6 + 96);
      *((void *)v19 + 14) = *(void *)(v6 + 112);
      *((_OWORD *)v19 + 6) = v23;
      *(void *)(v6 + 104) = 0;
      *(void *)(v6 + 112) = 0;
      *(void *)(v6 + 96) = 0;
      v18 += 120;
      v6 += 120;
    }
    while (v19 + 120 != v17);
    uint64_t v5 = *(void **)a1;
    long long v24 = *(void ***)(a1 + 8);
    unint64_t v25 = *(void ***)(a1 + 16);
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v17;
    *(void *)(a1 + 24) = v16;
    if (v25 == v24) {
      goto LABEL_25;
    }
    while (1)
    {
      if (*((char *)v25 - 1) < 0)
      {
        operator delete(*(v25 - 3));
        unint64_t v26 = v25 - 15;
        unint64_t v27 = *(v25 - 15);
        if (v27)
        {
LABEL_21:
          uint64_t v28 = (uint64_t)*(v25 - 14);
          uint64_t v29 = v27;
          if ((void *)v28 != v27)
          {
            do
              uint64_t v28 = sub_3AFFFC(v28 - 1056);
            while ((void *)v28 != v27);
            uint64_t v29 = *v26;
          }
          *(v25 - 14) = v27;
          operator delete(v29);
        }
      }
      else
      {
        unint64_t v26 = v25 - 15;
        unint64_t v27 = *(v25 - 15);
        if (v27) {
          goto LABEL_21;
        }
      }
      unint64_t v25 = v26;
      if (v26 == v24) {
        goto LABEL_25;
      }
    }
  }
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v15;
  *(void *)(a1 + 16) = v15;
  *(void *)(a1 + 24) = v16;
LABEL_25:
  if (v5) {
    operator delete(v5);
  }
  uint64_t v4 = *(void *)(a1 + 16);
LABEL_28:
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(void *)(v4 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  long long v30 = *(_OWORD *)(a2 + 56);
  long long v31 = *(_OWORD *)(a2 + 72);
  uint64_t v32 = *(void *)(a2 + 85);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(v4 + 85) = v32;
  *(_OWORD *)(v4 + 72) = v31;
  *(_OWORD *)(v4 + 56) = v30;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a2 + 24);
  __n128 result = *(__n128 *)(a2 + 96);
  *(void *)(v4 + 112) = *(void *)(a2 + 112);
  *(__n128 *)(v4 + 96) = result;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 16) += 120;
  return result;
}

void *sub_D06324(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a2 != a1)
  {
    unint64_t v6 = a2;
    uint64_t v7 = a3;
    do
    {
      uint64_t v10 = *(void **)(v7 - 120);
      v7 -= 120;
      uint64_t v9 = v10;
      if (v10)
      {
        uint64_t v11 = *(void *)(v3 - 112);
        unint64_t v12 = v9;
        if ((void *)v11 != v9)
        {
          do
            uint64_t v11 = sub_3AFFFC(v11 - 1056);
          while ((void *)v11 != v9);
          unint64_t v12 = *(void **)v7;
        }
        *(void *)(v3 - 112) = v9;
        operator delete(v12);
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0;
      }
      uint64_t v13 = v6 - 15;
      *(_OWORD *)(v3 - 120) = *(_OWORD *)(v6 - 15);
      *(void *)(v3 - 104) = *(v6 - 13);
      v13[1] = 0;
      v13[2] = 0;
      *uint64_t v13 = 0;
      long long v15 = *((_OWORD *)v6 - 4);
      long long v14 = *((_OWORD *)v6 - 3);
      long long v16 = *((_OWORD *)v6 - 5);
      *(void *)(v3 - 35) = *(void *)((char *)v6 - 35);
      *(_OWORD *)(v3 - 64) = v15;
      *(_OWORD *)(v3 - 48) = v14;
      *(_OWORD *)(v3 - 80) = v16;
      *(_OWORD *)(v3 - 96) = *((_OWORD *)v6 - 6);
      uint64_t v17 = (void **)(v3 - 24);
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*v17);
      }
      long long v8 = *(_OWORD *)(v6 - 3);
      *(void *)(v3 - 8) = *(v6 - 1);
      *(_OWORD *)uint64_t v17 = v8;
      *((unsigned char *)v6 - 1) = 0;
      *((unsigned char *)v6 - 24) = 0;
      uint64_t v3 = v7;
      v6 -= 15;
    }
    while (v13 != a1);
  }
  return a2;
}

uint64_t sub_D06440(uint64_t a1)
{
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    uint64_t v2 = *(void **)(a1 + 64);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 88));
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
LABEL_4:
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void ***)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = *(void ***)(a1 + 8);
    unint64_t v6 = *(void ***)a1;
    if (v5 == v4)
    {
LABEL_21:
      *(void *)(a1 + 8) = v4;
      operator delete(v6);
      return a1;
    }
    while (1)
    {
      if (*((char *)v5 - 1) < 0)
      {
        operator delete(*(v5 - 3));
        uint64_t v7 = v5 - 15;
        long long v8 = *(v5 - 15);
        if (v8)
        {
LABEL_15:
          uint64_t v9 = (uint64_t)*(v5 - 14);
          uint64_t v10 = v8;
          if ((void *)v9 != v8)
          {
            do
              uint64_t v9 = sub_3AFFFC(v9 - 1056);
            while ((void *)v9 != v8);
            uint64_t v10 = *v7;
          }
          *(v5 - 14) = v8;
          operator delete(v10);
        }
      }
      else
      {
        uint64_t v7 = v5 - 15;
        long long v8 = *(v5 - 15);
        if (v8) {
          goto LABEL_15;
        }
      }
      uint64_t v5 = v7;
      if (v7 == v4)
      {
        unint64_t v6 = *(void ***)a1;
        goto LABEL_21;
      }
    }
  }
  return a1;
}

uint64_t sub_D06544(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_59486C((void *)a1, *(void *)a2, *(void *)(a2 + 8), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  sub_3B1F44(a1 + 32, (uint64_t *)(a2 + 32));
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = 0;
  sub_5950E8(a1 + 328, *(void *)(a2 + 328), *(void *)(a2 + 336), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 336) - *(void *)(a2 + 328)) >> 5));
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  sub_510340(a1 + 352, *(void *)(a2 + 352), *(void *)(a2 + 360), 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 5));
  return a1;
}

void sub_D06620(_Unwind_Exception *a1)
{
  sub_59213C(v3);
  sub_3B0290(v2);
  sub_59241C(v1);
  _Unwind_Resume(a1);
}

void sub_D0664C(_Unwind_Exception *a1)
{
  sub_59241C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D06660(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0xAE4C415C9882BALL) {
      sub_2E00();
    }
    __n128 result = (uint64_t)operator new(376 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 376 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = sub_D06544(v8 + v9, a2 + v9);
        v9 += 376;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_D06724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_D06738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 376)
    sub_5ADCA8((uint64_t *)(v10 - 376 + v11));
  *(void *)(v9 + 8) = v10;
  sub_D06768(&a9);
  _Unwind_Resume(a1);
}

void ***sub_D06768(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (uint64_t *)**result;
    if (v3)
    {
      uint64_t v4 = (uint64_t *)v2[1];
      uint64_t v5 = **v1;
      if (v4 != v3)
      {
        do
          uint64_t v4 = sub_5ADCA8(v4 - 47);
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_D067F0(uint64_t *a1, char *a2, char *a3, int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  long long v21 = &v11[48 * v10];
  sub_D069C0(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  long long v14 = (char *)*a1;
  long long v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    long long v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      long long v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D069AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D069C0(int a1, uint64_t a2, char *__s, char *a4, int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D06B18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_D06B2C(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x19999999999999ALL) {
      sub_2E00();
    }
    uint64_t v5 = 160 * a3;
    unint64_t v6 = (char *)operator new(160 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      sub_44479C((uint64_t)&v6[v7], a2 + v7);
      v7 += 160;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_D06BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_D06BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_20AFE14();
  }
  *(void *)(v9 + 8) = v10;
  sub_4446E4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_D06C20(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0x51B3BEA3677D46CFLL * ((v8 - *a1) >> 3) >= a4)
  {
    if (0x51B3BEA3677D46CFLL * ((a1[1] - v9) >> 3) >= a4)
    {
      sub_D06EA4((uint64_t)&v25, a2, a3, v9);
      uint64_t v23 = v22;
      uint64_t result = a1[1];
      if (result != v22)
      {
        do
          uint64_t result = (uint64_t)sub_5ADCA8((uint64_t *)(result - 376));
        while (result != v23);
      }
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 8 * ((a1[1] - v9) >> 3);
      uint64_t result = sub_D06EA4((uint64_t)&v24, a2, v19, v9);
      uint64_t v20 = a1[1];
      if (v19 != a3)
      {
        uint64_t v21 = 0;
        do
        {
          uint64_t result = sub_D06544(v20 + v21, v19 + v21);
          v21 += 376;
        }
        while (v19 + v21 != a3);
        v20 += v21;
      }
      a1[1] = v20;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = (uint64_t *)a1[1];
      uint64_t v11 = (void *)v9;
      if (v10 != (uint64_t *)v9)
      {
        do
          uint64_t v10 = sub_5ADCA8(v10 - 47);
        while (v10 != (uint64_t *)v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAE4C415C9882B9) {
      goto LABEL_28;
    }
    unint64_t v12 = 0x51B3BEA3677D46CFLL * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x572620AE4C415CLL ? 0xAE4C415C9882B9 : v13;
    if (v14 > 0xAE4C415C9882B9) {
LABEL_28:
    }
      sub_2E00();
    uint64_t v15 = 376 * v14;
    uint64_t result = (uint64_t)operator new(376 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (a2 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_D06544(v17 + v18, a2 + v18);
        v18 += 376;
      }
      while (a2 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

void sub_D06E7C(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 376)
    sub_5ADCA8((uint64_t *)(v2 - 376 + v3));
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_D06EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = a4 + v7;
    uint64_t v9 = a2 + v7;
    if (a2 != a4) {
      sub_59D3D4((uint64_t *)(a4 + v7), *(std::string **)v9, *(std::string **)(v9 + 8), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 3));
    }
    *(void *)(v8 + 24) = *(void *)(v9 + 24);
    sub_3C7658(v8 + 32, (uint64_t *)(v9 + 32));
    *(_DWORD *)(v8 + 320) = *(_DWORD *)(v9 + 320);
    if (v9 != v8)
    {
      sub_59DF7C((uint64_t *)(a4 + v7 + 328), *(void *)(a2 + v7 + 328), *(void *)(a2 + v7 + 336), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + v7 + 336) - *(void *)(a2 + v7 + 328)) >> 5));
      sub_572E74((uint64_t *)(a4 + v7 + 352), *(void *)(a2 + v7 + 352), *(void *)(a2 + v7 + 360), 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(a2 + v7 + 360) - *(void *)(a2 + v7 + 352)) >> 5));
    }
    v7 += 376;
  }
  while (a2 + v7 != v6);
  return v6;
}

void sub_D06FD0(uint64_t **a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (0x51B3BEA3677D46CFLL * (v5 - v4) >= a2)
  {
    if (a2)
    {
      uint64_t v11 = &v4[47 * a2];
      *(void *)&long long v12 = 0x8000000080000000;
      *((void *)&v12 + 1) = 0x8000000080000000;
      do
      {
        v4[40] = 0;
        *((_OWORD *)v4 + 2) = 0uLL;
        *((_OWORD *)v4 + 3) = 0uLL;
        *(_OWORD *)uint64_t v4 = 0uLL;
        *((_OWORD *)v4 + 1) = 0uLL;
        v4[3] = 0x7FFFFFFFFFFFFFFFLL;
        v4[4] = 0x8000000080000000;
        *((_DWORD *)v4 + 10) = 0x7FFFFFFF;
        *((_OWORD *)v4 + 3) = 0uLL;
        *((_OWORD *)v4 + 4) = 0uLL;
        *((_OWORD *)v4 + 4) = 0uLL;
        *((_OWORD *)v4 + 5) = 0uLL;
        *((_OWORD *)v4 + 5) = 0uLL;
        *((_OWORD *)v4 + 6) = 0uLL;
        *((_OWORD *)v4 + 6) = 0uLL;
        *((_OWORD *)v4 + 7) = 0uLL;
        *((_OWORD *)v4 + 7) = 0uLL;
        *((_OWORD *)v4 + 8) = 0uLL;
        *((_OWORD *)v4 + 8) = 0uLL;
        *((_OWORD *)v4 + 9) = 0uLL;
        *((_OWORD *)v4 + 9) = 0uLL;
        *((_OWORD *)v4 + 10) = 0uLL;
        *((_OWORD *)v4 + 10) = 0uLL;
        *((_OWORD *)v4 + 11) = 0uLL;
        *((_OWORD *)v4 + 11) = 0uLL;
        *((_OWORD *)v4 + 12) = 0uLL;
        *((_OWORD *)v4 + 12) = 0uLL;
        *((_OWORD *)v4 + 13) = 0uLL;
        *((_OWORD *)v4 + 13) = 0uLL;
        *((_OWORD *)v4 + 14) = 0uLL;
        *((_OWORD *)v4 + 14) = 0uLL;
        *((_OWORD *)v4 + 15) = 0uLL;
        *((_OWORD *)v4 + 15) = 0uLL;
        *((_OWORD *)v4 + 16) = 0uLL;
        *((_OWORD *)v4 + 16) = 0uLL;
        *((_OWORD *)v4 + 17) = 0uLL;
        *((_OWORD *)v4 + 17) = 0uLL;
        *((_OWORD *)v4 + 18) = 0uLL;
        *((_OWORD *)v4 + 18) = v12;
        *((_OWORD *)v4 + 19) = 0uLL;
        *((_OWORD *)v4 + 19) = v12;
        *((_DWORD *)v4 + 80) = 5;
        uint64_t v13 = v4 + 41;
        *(_OWORD *)(v4 + 43) = 0uLL;
        *(_OWORD *)(v4 + 45) = 0uLL;
        v4 += 47;
        *uint64_t v13 = 0uLL;
      }
      while (v4 != v11);
      uint64_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    uint64_t v6 = 0x51B3BEA3677D46CFLL * (v4 - *a1);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0xAE4C415C9882B9) {
      sub_2E00();
    }
    unint64_t v8 = 0x51B3BEA3677D46CFLL * (v5 - *a1);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x572620AE4C415CLL) {
      unint64_t v9 = 0xAE4C415C9882B9;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAE4C415C9882B9) {
        sub_188D718();
      }
      uint64_t v10 = (char *)operator new(376 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    unint64_t v14 = (uint64_t *)&v10[376 * v6];
    uint64_t v15 = (uint64_t *)&v10[376 * v9];
    long long v16 = &v14[47 * a2];
    *(void *)&long long v17 = 0x8000000080000000;
    *((void *)&v17 + 1) = 0x8000000080000000;
    uint64_t v18 = v14;
    do
    {
      v18[40] = 0;
      *((_OWORD *)v18 + 2) = 0uLL;
      *((_OWORD *)v18 + 3) = 0uLL;
      *(_OWORD *)uint64_t v18 = 0uLL;
      *((_OWORD *)v18 + 1) = 0uLL;
      v18[3] = 0x7FFFFFFFFFFFFFFFLL;
      v18[4] = 0x8000000080000000;
      *((_DWORD *)v18 + 10) = 0x7FFFFFFF;
      *((_OWORD *)v18 + 3) = 0uLL;
      *((_OWORD *)v18 + 4) = 0uLL;
      *((_OWORD *)v18 + 4) = 0uLL;
      *((_OWORD *)v18 + 5) = 0uLL;
      *((_OWORD *)v18 + 5) = 0uLL;
      *((_OWORD *)v18 + 6) = 0uLL;
      *((_OWORD *)v18 + 6) = 0uLL;
      *((_OWORD *)v18 + 7) = 0uLL;
      *((_OWORD *)v18 + 7) = 0uLL;
      *((_OWORD *)v18 + 8) = 0uLL;
      *((_OWORD *)v18 + 8) = 0uLL;
      *((_OWORD *)v18 + 9) = 0uLL;
      *((_OWORD *)v18 + 9) = 0uLL;
      *((_OWORD *)v18 + 10) = 0uLL;
      *((_OWORD *)v18 + 10) = 0uLL;
      *((_OWORD *)v18 + 11) = 0uLL;
      *((_OWORD *)v18 + 11) = 0uLL;
      *((_OWORD *)v18 + 12) = 0uLL;
      *((_OWORD *)v18 + 12) = 0uLL;
      *((_OWORD *)v18 + 13) = 0uLL;
      *((_OWORD *)v18 + 13) = 0uLL;
      *((_OWORD *)v18 + 14) = 0uLL;
      *((_OWORD *)v18 + 14) = 0uLL;
      *((_OWORD *)v18 + 15) = 0uLL;
      *((_OWORD *)v18 + 15) = 0uLL;
      *((_OWORD *)v18 + 16) = 0uLL;
      *((_OWORD *)v18 + 16) = 0uLL;
      *((_OWORD *)v18 + 17) = 0uLL;
      *((_OWORD *)v18 + 17) = 0uLL;
      *((_OWORD *)v18 + 18) = 0uLL;
      *((_OWORD *)v18 + 18) = v17;
      *((_OWORD *)v18 + 19) = 0uLL;
      *((_OWORD *)v18 + 19) = v17;
      *((_DWORD *)v18 + 80) = 5;
      uint64_t v19 = v18 + 41;
      *(_OWORD *)(v18 + 43) = 0uLL;
      *(_OWORD *)(v18 + 45) = 0uLL;
      v18 += 47;
      *uint64_t v19 = 0uLL;
    }
    while (v18 != v16);
    uint64_t v21 = *a1;
    uint64_t v20 = a1[1];
    if (v20 == *a1)
    {
      *a1 = v14;
      a1[1] = v16;
      a1[2] = v15;
      if (!v20) {
        return;
      }
      goto LABEL_25;
    }
    do
    {
      v20 -= 47;
      sub_5AE1FC((uint64_t)(v14 - 47), (uint64_t)v20);
    }
    while (v20 != v21);
    uint64_t v22 = *a1;
    uint64_t v20 = a1[1];
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v20 != v22)
    {
      do
      {
        v20 -= 47;
        sub_5ADCA8(v20);
      }
      while (v20 != v22);
      uint64_t v20 = v22;
    }
    if (v20)
    {
LABEL_25:
      operator delete(v20);
    }
  }
}

uint64_t sub_D0729C(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D0746C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  unint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D07458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D0746C(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D075CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D075E0(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D077B0(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D0779C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D077B0(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D07910(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D07924(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D07AF4(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D07AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D07AF4(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D07C54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_D07C68()
{
  byte_25E628F = 1;
  word_25E6278 = 65;
  byte_25E62A7 = 1;
  word_25E6290 = 65;
  char v2 = 7;
  strcpy((char *)v1, "UNKNOWN");
  int v3 = 0;
  char v5 = 14;
  strcpy((char *)v4, "ROUTES_THROUGH");
  int v6 = 1;
  char v8 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v9 = 3;
  char v11 = 11;
  strcpy((char *)v10, "ROUTES_FROM");
  int v12 = 2;
  xmmword_25E6398 = 0u;
  *(_OWORD *)&qword_25E63A8 = 0u;
  dword_25E63B8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E6398, (uint64_t)v1, (uint64_t)v1);
  sub_3A6EF0((uint64_t)&xmmword_25E6398, (uint64_t)v4, (uint64_t)v4);
  sub_3A6EF0((uint64_t)&xmmword_25E6398, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E6398, (uint64_t)v10, (uint64_t)v10);
  if (v11 < 0)
  {
    operator delete(v10[0]);
    if ((v8 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v4[0]);
      if ((v2 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v1[0]);
      goto LABEL_5;
    }
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v5 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v2 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E62BF = 8;
  strcpy((char *)&qword_25E62A8, "any_mode");
  byte_25E62D7 = 7;
  strcpy((char *)&dword_25E62C0, "cycling");
  byte_25E62EF = 7;
  strcpy((char *)&dword_25E62D8, "driving");
  byte_25E6307 = 7;
  strcpy((char *)&dword_25E62F0, "walking");
  byte_25E631F = 21;
  strcpy((char *)&xmmword_25E6308, "enable_coverage_check");
  byte_25E6337 = 14;
  strcpy((char *)&qword_25E6320, "default_region");
  byte_25E634F = 17;
  strcpy((char *)&xmmword_25E6338, "supported_regions");
  byte_25E6367 = 17;
  strcpy(byte_25E6350, "preflight_regions");
  qword_25E6368 = (uint64_t)operator new(0x19uLL);
  *(_OWORD *)algn_25E6370 = xmmword_20B9250;
  strcpy((char *)qword_25E6368, "supported_country_codes");
  uint64_t result = (char *)operator new(0x19uLL);
  qword_25E6380 = (uint64_t)result;
  unk_25E6388 = xmmword_20B9250;
  strcpy(result, "preflight_country_codes");
  return result;
}

void sub_D07FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (qword_25E63A8) {
    sub_20AFE70((void **)qword_25E63A8);
  }
  long long v39 = (void *)xmmword_25E6398;
  *(void *)&xmmword_25E6398 = 0;
  if (v39)
  {
    operator delete(v39);
    if ((a38 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a31 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a38 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a26);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a17 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a12);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a19);
  if ((a17 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_D08060()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  sub_725D0((uint64_t)&v21);
  uint64_t v4 = *(void *)sub_37D0C0(v2);
  sub_D53E44(3, v3, v2);
  *(void *)std::string __p = 0;
  *(void *)&__p[8] = &off_2439090;
  sub_3E7814(&v17, (__n128 *)__p);
  char v18 = 3;
  uint64_t v19 = v4;
  int v20 = 0;
  unsigned int v5 = sub_DB7034(v3);
  sub_DB6A08(v3, (uint64_t)v22);
  sub_494284(1, v5, (uint64_t)v22);
  int v6 = sub_486A5C((uint64_t)v22);
  if (v6 == 5 || !v6)
  {
    char v24 = 19;
    strcpy(__p, "TransportTypeChange");
    sub_710A8(3, (uint64_t)__p, v4);
    if (v24 < 0) {
      operator delete(*(void **)__p);
    }
  }
  v15[1] = 0;
  v15[0] = 0;
  uint64_t v16 = 0;
  *(void *)uint64_t v13 = 0;
  int v12 = 0;
  uint64_t v14 = 0;
  v10[1] = 0;
  v10[0] = 0;
  uint64_t v11 = 0;
  v8[1] = 0;
  v8[0] = 0;
  uint64_t v9 = 0;
  sub_737844((uint64_t)&v7);
}

void sub_D0E8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&STACK[0x2730]);
  sub_D1EAF8((uint64_t)&STACK[0x2CF0]);
  sub_CBC8A8((uint64_t)&a64);
  if (SLOBYTE(STACK[0x166F]) < 0) {
    operator delete((void *)STACK[0x1658]);
  }
  sub_162D64C(a20);
  sub_162D64C(&STACK[0xC40]);
  sub_5450C((uint64_t)&STACK[0x10A0]);
  sub_C8423C(&STACK[0x10C8]);
  sub_C940D0((uint64_t)&STACK[0x2010]);
  sub_574530((void **)&STACK[0x11E0]);
  uint64_t v65 = (void *)STACK[0x1200];
  if (STACK[0x1200])
  {
    STACK[0x1208] = (unint64_t)v65;
    operator delete(v65);
  }
  sub_C66564((void ***)&STACK[0x1220]);
  uint64_t v66 = (void *)STACK[0x1240];
  if (STACK[0x1240])
  {
    STACK[0x1248] = (unint64_t)v66;
    operator delete(v66);
  }
  sub_3C77C4((uint64_t)&STACK[0x1260]);
  sub_D0FAF0((void ***)&STACK[0x12E0]);
  sub_CF1A48((void ****)&STACK[0x1300]);
  sub_C628C4((void ****)&STACK[0x1318]);
  sub_D0FAF0((void ***)&STACK[0x1330]);
  sub_CF1A48((void ****)&STACK[0x1350]);
  int v67 = (void *)STACK[0x1370];
  if (STACK[0x1370])
  {
    STACK[0x1378] = (unint64_t)v67;
    operator delete(v67);
  }
  sub_C628C4((void ****)&STACK[0x1390]);
  sub_D0FB2C((uint64_t)&STACK[0x13A8]);
  sub_C7E6AC((void **)&STACK[0x1590]);
  sub_C7E6AC((void **)&STACK[0x15B0]);
  sub_1A668((void **)&STACK[0x15C8]);
  sub_401F88((void **)&STACK[0x15E0]);
  sub_4BCC2C((uint64_t)&STACK[0x2468]);
  sub_C7E3C8((uint64_t)&STACK[0x15F8]);
  _Unwind_Resume(a1);
}

uint64_t sub_D0F878(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(void *)a1 = v4;
  int v6 = (void *)(a1 + 16);
  unsigned int v5 = *(void **)(a1 + 16);
  if (v5)
  {
    *(void *)(a1 + 24) = v5;
    operator delete(v5);
    void *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(void *)(a1 + 32) = a2[4];
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = 0;
  uint64_t v7 = a2[5];
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(void *)(a1 + 40) = v7;
  sub_62BDC(a1 + 56, a2 + 7);
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  sub_62BDC(a1 + 104, a2 + 13);
  char v8 = (void **)(a1 + 168);
  uint64_t v9 = *(char **)(a1 + 168);
  *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
  *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
  if (v9)
  {
    size_t v10 = *(char **)(a1 + 176);
    uint64_t v11 = v9;
    if (v10 != v9)
    {
      do
      {
        int v12 = (void *)*((void *)v10 - 3);
        if (v12)
        {
          do
          {
            uint64_t v13 = (void *)*v12;
            operator delete(v12);
            int v12 = v13;
          }
          while (v13);
        }
        uint64_t v14 = (void *)*((void *)v10 - 5);
        *((void *)v10 - 5) = 0;
        if (v14) {
          operator delete(v14);
        }
        v10 -= 56;
      }
      while (v10 != v9);
      uint64_t v11 = *v8;
    }
    *(void *)(a1 + 176) = v9;
    operator delete(v11);
    *char v8 = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
  *(void *)(a1 + 184) = a2[23];
  a2[21] = 0;
  a2[22] = 0;
  a2[23] = 0;
  *(void *)(a1 + 192) = a2[24];
  sub_67501C(a1 + 200, a2 + 25);
  sub_67501C(a1 + 240, a2 + 30);
  uint64_t v15 = a2[35];
  a2[35] = 0;
  uint64_t v16 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = v15;
  if (v16) {
    sub_402DD0(a1 + 280, v16);
  }
  uint64_t v17 = a2[36];
  a2[36] = 0;
  uint64_t v18 = *(void *)(a1 + 288);
  *(void *)(a1 + 288) = v17;
  if (v18)
  {
    sub_9FDC0(v18);
    operator delete();
  }
  uint64_t v19 = a2[37];
  a2[37] = 0;
  int v20 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = v19;
  if (v20)
  {
    sub_99C04(v20);
    operator delete();
  }
  uint64_t v21 = a2[38];
  a2[38] = 0;
  uint64_t v22 = *(void **)(a1 + 304);
  *(void *)(a1 + 304) = v21;
  if (v22)
  {
    sub_8CE50(v22);
    operator delete();
  }
  long long v23 = *(_OWORD *)(a2 + 39);
  long long v24 = *(_OWORD *)(a2 + 43);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 344) = v24;
  *(_OWORD *)(a1 + 312) = v23;
  long long v25 = *(_OWORD *)(a2 + 45);
  long long v26 = *(_OWORD *)(a2 + 47);
  long long v27 = *(_OWORD *)(a2 + 49);
  *(unsigned char *)(a1 + 408) = *((unsigned char *)a2 + 408);
  *(_OWORD *)(a1 + 376) = v26;
  *(_OWORD *)(a1 + 392) = v27;
  *(_OWORD *)(a1 + 360) = v25;
  uint64_t v28 = (void **)(a1 + 416);
  if (*(char *)(a1 + 439) < 0) {
    operator delete(*v28);
  }
  long long v29 = *((_OWORD *)a2 + 26);
  *(void *)(a1 + 432) = a2[54];
  *(_OWORD *)uint64_t v28 = v29;
  *((unsigned char *)a2 + 439) = 0;
  *((unsigned char *)a2 + 416) = 0;
  sub_62BDC(a1 + 440, a2 + 55);
  __int16 v30 = *((_WORD *)a2 + 240);
  *(unsigned char *)(a1 + 482) = *((unsigned char *)a2 + 482);
  *(_WORD *)(a1 + 480) = v30;
  return a1;
}

void ***sub_D0FAF0(void ***a1)
{
  if (*a1)
  {
    sub_C8ADA8((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

void *sub_D0FB2C(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 456);
  if (v2)
  {
    do
    {
      uint64_t v9 = *(char **)v2;
      sub_57AC8((uint64_t *)v2 + 5);
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v9;
    }
    while (v9);
  }
  uint64_t v3 = *(void **)(a1 + 440);
  *(void *)(a1 + 440) = 0;
  if (v3) {
    operator delete(v3);
  }
  if (*(char *)(a1 + 439) < 0)
  {
    operator delete(*(void **)(a1 + 416));
    uint64_t v4 = *(void **)(a1 + 304);
    *(void *)(a1 + 304) = 0;
    if (v4)
    {
LABEL_6:
      sub_8CE50(v4);
      operator delete();
    }
  }
  else
  {
    uint64_t v4 = *(void **)(a1 + 304);
    *(void *)(a1 + 304) = 0;
    if (v4) {
      goto LABEL_6;
    }
  }
  unsigned int v5 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = 0;
  if (v5)
  {
    sub_99C04(v5);
    operator delete();
  }
  uint64_t v6 = *(void *)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  if (v6)
  {
    sub_9FDC0(v6);
    operator delete();
  }
  uint64_t v7 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = 0;
  if (v7) {
    sub_402DD0(a1 + 280, v7);
  }
  sub_4026F4((void *)(a1 + 160));

  return sub_402628((void *)a1);
}

void sub_D0FC58(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "DrivingPathFindingModule");
  v78.__r_.__value_.__s.__data_[0] = 1;
  unsigned int v5 = (unint64_t *)(a2 + 40);
  unint64_t v4 = *(void *)(a2 + 40);
  LODWORD(v73[0]) = 0;
  uint64_t v7 = (uint64_t *)(a2 + 32);
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 >= v4)
  {
    uint64_t v8 = sub_CF8370((uint64_t *)(a2 + 24), "Runtime", (char *)&v78, (uint64_t *)a1, (int *)v73);
  }
  else
  {
    sub_CF8548(a2 + 40, *(void *)(a2 + 32), "Runtime", (char *)&v78, (uint64_t *)a1, (int *)v73);
    uint64_t v8 = v6 + 48;
    *uint64_t v7 = v6 + 48;
  }
  *uint64_t v7 = v8;
  std::operator+<char>();
  uint64_t v9 = std::string::append(&v78, "]");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  std::string::size_type v74 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v73 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  char v77 = 1;
  uint64_t v11 = *v7;
  if (*v7 >= *v5)
  {
    *uint64_t v7 = (uint64_t)sub_D13728((char **)(a2 + 24), (uint64_t)v73, &v77, (uint64_t *)a1);
    if (SHIBYTE(v74) < 0) {
      goto LABEL_177;
    }
  }
  else
  {
    uint64_t v12 = *(void *)a1;
    if (SHIBYTE(v74) < 0)
    {
      sub_4200((unsigned char *)*v7, v73[0], (unint64_t)v73[1]);
    }
    else
    {
      long long v13 = *(_OWORD *)v73;
      *(void *)(v11 + 16) = v74;
      *(_OWORD *)uint64_t v11 = v13;
    }
    *(unsigned char *)(v11 + 24) = 1;
    *(void *)(v11 + 32) = v12;
    *(_DWORD *)(v11 + 40) = 1;
    *uint64_t v7 = v11 + 48;
    *uint64_t v7 = v11 + 48;
    if (SHIBYTE(v74) < 0)
    {
LABEL_177:
      operator delete(v73[0]);
      if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_178;
    }
  }
  if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_9;
  }
LABEL_178:
  operator delete(v78.__r_.__value_.__l.__data_);
LABEL_9:
  LOBYTE(v73[0]) = 4;
  uint64_t v14 = *v7;
  if (*v7 >= *v5)
  {
    unint64_t v15 = sub_D1393C((uint64_t *)(a2 + 24), "NumScannedNodes", (char *)v73, (unsigned int *)(a1 + 52));
  }
  else
  {
    sub_D13B0C(a2 + 40, *v7, "NumScannedNodes", (char *)v73, (unsigned int *)(a1 + 52));
    unint64_t v15 = v14 + 48;
    *uint64_t v7 = v15;
  }
  *uint64_t v7 = v15;
  LOBYTE(v73[0]) = 4;
  if (v15 >= *v5)
  {
    unint64_t v16 = sub_D13C78((uint64_t *)(a2 + 24), "Paths", (char *)v73, (unsigned int *)(a1 + 32));
  }
  else
  {
    sub_D13E48(a2 + 40, v15, "Paths", (char *)v73, (unsigned int *)(a1 + 32));
    unint64_t v16 = v15 + 48;
    *uint64_t v7 = v16;
  }
  *uint64_t v7 = v16;
  LOBYTE(v73[0]) = 4;
  if (v16 >= *v5)
  {
    unint64_t v17 = sub_D13FB4((uint64_t *)(a2 + 24), "Paths.Filtered", (char *)v73, (unsigned int *)(a1 + 36));
  }
  else
  {
    sub_D14184(a2 + 40, v16, "Paths.Filtered", (char *)v73, (unsigned int *)(a1 + 36));
    unint64_t v17 = v16 + 48;
    *uint64_t v7 = v17;
  }
  *uint64_t v7 = v17;
  LOBYTE(v73[0]) = 4;
  if (v17 >= *v5)
  {
    unint64_t v18 = sub_D142F0((uint64_t *)(a2 + 24), "Paths.OutOfCoverage", (char *)v73, (unsigned int *)(a1 + 40));
  }
  else
  {
    sub_D144C0(a2 + 40, v17, "Paths.OutOfCoverage", (char *)v73, (unsigned int *)(a1 + 40));
    unint64_t v18 = v17 + 48;
    *uint64_t v7 = v18;
  }
  *uint64_t v7 = v18;
  LOBYTE(v73[0]) = 4;
  if (v18 >= *v5)
  {
    unint64_t v19 = sub_D13FB4((uint64_t *)(a2 + 24), "Paths.NoResult", (char *)v73, (unsigned int *)(a1 + 44));
  }
  else
  {
    sub_D14184(a2 + 40, v18, "Paths.NoResult", (char *)v73, (unsigned int *)(a1 + 44));
    unint64_t v19 = v18 + 48;
    *uint64_t v7 = v19;
  }
  *uint64_t v7 = v19;
  LOBYTE(v73[0]) = 4;
  if (v19 >= *v5)
  {
    unint64_t v20 = sub_D1462C((uint64_t *)(a2 + 24), "Iterations", (char *)v73, (unsigned int *)(a1 + 48));
  }
  else
  {
    sub_D147FC(a2 + 40, v19, "Iterations", (char *)v73, (unsigned int *)(a1 + 48));
    unint64_t v20 = v19 + 48;
    *uint64_t v7 = v20;
  }
  *uint64_t v7 = v20;
  LOBYTE(v73[0]) = 4;
  if (v20 >= *v5)
  {
    unint64_t v21 = sub_C97204((uint64_t *)(a2 + 24), "MaxAlgorithmIterations", (char *)v73, (unsigned int *)(a1 + 56));
  }
  else
  {
    sub_C973D4(a2 + 40, v20, "MaxAlgorithmIterations", (char *)v73, (unsigned int *)(a1 + 56));
    unint64_t v21 = v20 + 48;
    *uint64_t v7 = v21;
  }
  *uint64_t v7 = v21;
  LOBYTE(v73[0]) = 4;
  if (v21 < *v5)
  {
    sub_C97D88(a2 + 40, v21, "BlockedSequences", (char *)v73, (unsigned int *)(a1 + 60));
    unint64_t v22 = v21 + 48;
    *uint64_t v7 = v22;
    *uint64_t v7 = v22;
    if (!*(unsigned char *)(a1 + 64)) {
      goto LABEL_32;
    }
LABEL_42:
    v78.__r_.__value_.__s.__data_[0] = 4;
    LODWORD(v73[0]) = 1;
    if (v22 >= *v5)
    {
      unint64_t v22 = sub_D14968((uint64_t *)(a2 + 24), "Paths.AvoidedQuickTurn", (char *)&v78, (unsigned int *)v73);
      *uint64_t v7 = v22;
      if (*(unsigned char *)(a1 + 65)) {
        goto LABEL_46;
      }
    }
    else
    {
      sub_D14B38(a2 + 40, v22, "Paths.AvoidedQuickTurn", (char *)&v78, (unsigned int *)v73);
      v22 += 48;
      *uint64_t v7 = v22;
      *uint64_t v7 = v22;
      if (*(unsigned char *)(a1 + 65)) {
        goto LABEL_46;
      }
    }
LABEL_33:
    if (!*(unsigned char *)(a1 + 66)) {
      goto LABEL_34;
    }
LABEL_50:
    v78.__r_.__value_.__s.__data_[0] = 4;
    LODWORD(v73[0]) = 1;
    if (v22 >= *v5)
    {
      unint64_t v22 = sub_D14FE0((uint64_t *)(a2 + 24), "StoppedDueToNoRoutes", (char *)&v78, (unsigned int *)v73);
      *uint64_t v7 = v22;
      if (*(unsigned char *)(a1 + 67)) {
        goto LABEL_54;
      }
    }
    else
    {
      sub_D151B0(a2 + 40, v22, "StoppedDueToNoRoutes", (char *)&v78, (unsigned int *)v73);
      v22 += 48;
      *uint64_t v7 = v22;
      *uint64_t v7 = v22;
      if (*(unsigned char *)(a1 + 67)) {
        goto LABEL_54;
      }
    }
LABEL_35:
    LOBYTE(v73[0]) = 4;
    long long v23 = (unsigned int *)(a1 + 68);
    if (v22 < *v5) {
      goto LABEL_36;
    }
    goto LABEL_58;
  }
  unint64_t v22 = sub_C97BB8((uint64_t *)(a2 + 24), "BlockedSequences", (char *)v73, (unsigned int *)(a1 + 60));
  *uint64_t v7 = v22;
  if (*(unsigned char *)(a1 + 64)) {
    goto LABEL_42;
  }
LABEL_32:
  if (!*(unsigned char *)(a1 + 65)) {
    goto LABEL_33;
  }
LABEL_46:
  v78.__r_.__value_.__s.__data_[0] = 4;
  LODWORD(v73[0]) = 1;
  if (v22 >= *v5)
  {
    unint64_t v22 = sub_D14CA4((uint64_t *)(a2 + 24), "SkippedOnDemandComputation", (char *)&v78, (unsigned int *)v73);
    *uint64_t v7 = v22;
    if (*(unsigned char *)(a1 + 66)) {
      goto LABEL_50;
    }
  }
  else
  {
    sub_D14E74(a2 + 40, v22, "SkippedOnDemandComputation", (char *)&v78, (unsigned int *)v73);
    v22 += 48;
    *uint64_t v7 = v22;
    *uint64_t v7 = v22;
    if (*(unsigned char *)(a1 + 66)) {
      goto LABEL_50;
    }
  }
LABEL_34:
  if (!*(unsigned char *)(a1 + 67)) {
    goto LABEL_35;
  }
LABEL_54:
  v78.__r_.__value_.__s.__data_[0] = 4;
  LODWORD(v73[0]) = 1;
  if (v22 >= *v5)
  {
    unint64_t v22 = sub_CF4120((uint64_t *)(a2 + 24), "StoppedDueToTimeLimit", (char *)&v78, (unsigned int *)v73);
  }
  else
  {
    sub_CF42F0(a2 + 40, v22, "StoppedDueToTimeLimit", (char *)&v78, (unsigned int *)v73);
    v22 += 48;
    *uint64_t v7 = v22;
  }
  *uint64_t v7 = v22;
  LOBYTE(v73[0]) = 4;
  long long v23 = (unsigned int *)(a1 + 68);
  if (v22 < *v5)
  {
LABEL_36:
    sub_D154EC(a2 + 40, v22, "NumActiveOnDemandQueries", (char *)v73, v23);
    unint64_t v24 = v22 + 48;
    *uint64_t v7 = v22 + 48;
    *uint64_t v7 = v22 + 48;
    long long v25 = (unsigned int *)(a1 + 84);
    if (!*(_DWORD *)(a1 + 84)) {
      goto LABEL_37;
    }
LABEL_59:
    LOBYTE(v73[0]) = 1;
    if (v24 >= *v5)
    {
      unint64_t v28 = sub_C961D8((uint64_t *)(a2 + 24), "PathGraphAugmentation.Runtime", (char *)v73, (uint64_t *)(a1 + 72));
      *uint64_t v7 = v28;
      LOBYTE(v73[0]) = 4;
      if (v28 >= *v5) {
        goto LABEL_61;
      }
    }
    else
    {
      sub_C963A8(a2 + 40, v24, "PathGraphAugmentation.Runtime", (char *)v73, (uint64_t *)(a1 + 72));
      unint64_t v28 = v24 + 48;
      *uint64_t v7 = v28;
      *uint64_t v7 = v28;
      LOBYTE(v73[0]) = 4;
      if (v28 >= *v5)
      {
LABEL_61:
        unint64_t v29 = sub_D15658((uint64_t *)(a2 + 24), "PathGraphAugmentation.NumPaths", (char *)v73, v25);
        goto LABEL_64;
      }
    }
    sub_D15828(a2 + 40, v28, "PathGraphAugmentation.NumPaths", (char *)v73, v25);
    unint64_t v29 = v28 + 48;
    *uint64_t v7 = v28 + 48;
LABEL_64:
    *uint64_t v7 = v29;
    LOBYTE(v73[0]) = 4;
    if (v29 >= *v5)
    {
      unint64_t v30 = sub_D15994((uint64_t *)(a2 + 24), "PathGraphAugmentation.NumUniqueSubPaths", (char *)v73, (unsigned int *)(a1 + 88));
    }
    else
    {
      sub_D15B64(a2 + 40, v29, "PathGraphAugmentation.NumUniqueSubPaths", (char *)v73, (unsigned int *)(a1 + 88));
      unint64_t v30 = v29 + 48;
      *uint64_t v7 = v30;
    }
    *uint64_t v7 = v30;
    v78.__r_.__value_.__s.__data_[0] = 4;
    uint64_t v31 = *(void *)(a1 + 96);
    uint64_t v32 = v31 / 100;
    __int16 v33 = v31 % 100;
    if (v31 < 0) {
      __int16 v34 = -50;
    }
    else {
      __int16 v34 = 50;
    }
    v73[0] = (void *)(v32
                    + (int)(((5243 * (__int16)(v34 + v33)) >> 19) + ((5243 * (__int16)(v34 + v33)) >> 31)));
    if (v30 >= *v5)
    {
      unint64_t v35 = sub_D15CD0((uint64_t *)(a2 + 24), "PathGraphAugmentation.AddedSubPathLength", (char *)&v78, v73);
    }
    else
    {
      sub_D15EA0(a2 + 40, v30, "PathGraphAugmentation.AddedSubPathLength", (char *)&v78, v73);
      unint64_t v35 = v30 + 48;
      *uint64_t v7 = v35;
    }
    *uint64_t v7 = v35;
    LOBYTE(v73[0]) = 4;
    if (v35 >= *v5)
    {
      unint64_t v36 = sub_D1600C((uint64_t *)(a2 + 24), "PathGraphAugmentation.NumPathsLocalOptimality", (char *)v73, (unsigned int *)(a1 + 108));
    }
    else
    {
      sub_D161DC(a2 + 40, v35, "PathGraphAugmentation.NumPathsLocalOptimality", (char *)v73, (unsigned int *)(a1 + 108));
      unint64_t v36 = v35 + 48;
      *uint64_t v7 = v36;
    }
    *uint64_t v7 = v36;
    LOBYTE(v73[0]) = 4;
    if (v36 >= *v5)
    {
      unint64_t v37 = sub_D16348((uint64_t *)(a2 + 24), "PathGraphAugmentation.NumUniqueSubPathsLocalOptimality", (char *)v73, (unsigned int *)(a1 + 104));
    }
    else
    {
      sub_D16518(a2 + 40, v36, "PathGraphAugmentation.NumUniqueSubPathsLocalOptimality", (char *)v73, (unsigned int *)(a1 + 104));
      unint64_t v37 = v36 + 48;
      *uint64_t v7 = v37;
    }
    *uint64_t v7 = v37;
    LOBYTE(v73[0]) = 4;
    if (v37 >= *v5)
    {
      unint64_t v38 = sub_D16684((uint64_t *)(a2 + 24), "PathGraphAugmentation.NumLocalOptimalityChecks", (char *)v73, (unsigned int *)(a1 + 112));
    }
    else
    {
      sub_D16854(a2 + 40, v37, "PathGraphAugmentation.NumLocalOptimalityChecks", (char *)v73, (unsigned int *)(a1 + 112));
      unint64_t v38 = v37 + 48;
      *uint64_t v7 = v38;
    }
    *uint64_t v7 = v38;
    v78.__r_.__value_.__s.__data_[0] = 4;
    uint64_t v39 = *(void *)(a1 + 120);
    uint64_t v40 = v39 / 100;
    __int16 v41 = v39 % 100;
    if (v39 < 0) {
      __int16 v42 = -50;
    }
    else {
      __int16 v42 = 50;
    }
    v73[0] = (void *)(v40
                    + (int)(((5243 * (__int16)(v42 + v41)) >> 19) + ((5243 * (__int16)(v42 + v41)) >> 31)));
    if (v38 >= *v5)
    {
      unint64_t v43 = sub_D169C0((uint64_t *)(a2 + 24), "PathGraphAugmentation.CheckedSubPathLength", (char *)&v78, v73);
    }
    else
    {
      sub_D16B90(a2 + 40, v38, "PathGraphAugmentation.CheckedSubPathLength", (char *)&v78, v73);
      unint64_t v43 = v38 + 48;
      *uint64_t v7 = v43;
    }
    *uint64_t v7 = v43;
    LOBYTE(v73[0]) = 1;
    if (v43 >= *v5)
    {
      unint64_t v24 = sub_D16CFC((uint64_t *)(a2 + 24), "PathGraphAugmentation.MetricsRelevantClosureCheck.Runtime", (char *)v73, (uint64_t *)(a1 + 128));
      *uint64_t v7 = v24;
      long long v26 = (unsigned int *)(a1 + 152);
      if (*(_DWORD *)(a1 + 152)) {
        goto LABEL_92;
      }
    }
    else
    {
      sub_D16ECC(a2 + 40, v43, "PathGraphAugmentation.MetricsRelevantClosureCheck.Runtime", (char *)v73, (uint64_t *)(a1 + 128));
      unint64_t v24 = v43 + 48;
      *uint64_t v7 = v43 + 48;
      *uint64_t v7 = v43 + 48;
      long long v26 = (unsigned int *)(a1 + 152);
      if (*(_DWORD *)(a1 + 152)) {
        goto LABEL_92;
      }
    }
LABEL_38:
    long long v27 = (unsigned int *)(a1 + 236);
    if (!*(_DWORD *)(a1 + 236)) {
      goto LABEL_39;
    }
LABEL_137:
    LOBYTE(v73[0]) = 1;
    if (v24 >= *v5)
    {
      unint64_t v61 = sub_C96EC8((uint64_t *)(a2 + 24), "PathConnector.Runtime", (char *)v73, (uint64_t *)(a1 + 208));
    }
    else
    {
      sub_C97098(a2 + 40, v24, "PathConnector.Runtime", (char *)v73, (uint64_t *)(a1 + 208));
      unint64_t v61 = v24 + 48;
      *uint64_t v7 = v61;
    }
    *uint64_t v7 = v61;
    LOBYTE(v73[0]) = 1;
    if (v61 >= *v5)
    {
      unint64_t v62 = sub_D18064((uint64_t *)(a2 + 24), "PathConnector.ComputeMinimumCapacities.Runtime", (char *)v73, (uint64_t *)(a1 + 216));
    }
    else
    {
      sub_D18234(a2 + 40, v61, "PathConnector.ComputeMinimumCapacities.Runtime", (char *)v73, (uint64_t *)(a1 + 216));
      unint64_t v62 = v61 + 48;
      *uint64_t v7 = v62;
    }
    *uint64_t v7 = v62;
    LOBYTE(v73[0]) = 1;
    if (v62 >= *v5)
    {
      unint64_t v63 = sub_D18064((uint64_t *)(a2 + 24), "PathConnector.ComputeNodesNearLiveArcs.Runtime", (char *)v73, (uint64_t *)(a1 + 224));
    }
    else
    {
      sub_D18234(a2 + 40, v62, "PathConnector.ComputeNodesNearLiveArcs.Runtime", (char *)v73, (uint64_t *)(a1 + 224));
      unint64_t v63 = v62 + 48;
      *uint64_t v7 = v63;
    }
    *uint64_t v7 = v63;
    LOBYTE(v73[0]) = 4;
    if (v63 >= *v5)
    {
      unint64_t v64 = sub_D183A0((uint64_t *)(a2 + 24), "PathConnector.NumRounds", (char *)v73, (unsigned int *)(a1 + 232));
    }
    else
    {
      sub_D18570(a2 + 40, v63, "PathConnector.NumRounds", (char *)v73, (unsigned int *)(a1 + 232));
      unint64_t v64 = v63 + 48;
      *uint64_t v7 = v64;
    }
    *uint64_t v7 = v64;
    LOBYTE(v73[0]) = 4;
    if (v64 >= *v5)
    {
      unint64_t v65 = sub_D186DC((uint64_t *)(a2 + 24), "PathConnector.NumScannedNodes", (char *)v73, (unsigned int *)(a1 + 252));
      *uint64_t v7 = v65;
      LOBYTE(v73[0]) = 4;
      if (v65 >= *v5) {
        goto LABEL_151;
      }
    }
    else
    {
      sub_D188AC(a2 + 40, v64, "PathConnector.NumScannedNodes", (char *)v73, (unsigned int *)(a1 + 252));
      unint64_t v65 = v64 + 48;
      *uint64_t v7 = v65;
      *uint64_t v7 = v65;
      LOBYTE(v73[0]) = 4;
      if (v65 >= *v5)
      {
LABEL_151:
        unint64_t v66 = sub_C99098((uint64_t *)(a2 + 24), "PathConnector.NumCheckedArcs", (char *)v73, v27);
        goto LABEL_154;
      }
    }
    sub_C99268(a2 + 40, v65, "PathConnector.NumCheckedArcs", (char *)v73, v27);
    unint64_t v66 = v65 + 48;
    *uint64_t v7 = v65 + 48;
LABEL_154:
    *uint64_t v7 = v66;
    LOBYTE(v73[0]) = 4;
    if (v66 >= *v5)
    {
      unint64_t v67 = sub_D18A18((uint64_t *)(a2 + 24), "PathConnector.NumCheckedArcsFromAddedNodes", (char *)v73, (unsigned int *)(a1 + 240));
    }
    else
    {
      sub_D18BE8(a2 + 40, v66, "PathConnector.NumCheckedArcsFromAddedNodes", (char *)v73, (unsigned int *)(a1 + 240));
      unint64_t v67 = v66 + 48;
      *uint64_t v7 = v67;
    }
    *uint64_t v7 = v67;
    LOBYTE(v73[0]) = 4;
    if (v67 >= *v5)
    {
      unint64_t v68 = sub_D18D54((uint64_t *)(a2 + 24), "PathConnector.NumAddedArcs", (char *)v73, (unsigned int *)(a1 + 244));
    }
    else
    {
      sub_D18F24(a2 + 40, v67, "PathConnector.NumAddedArcs", (char *)v73, (unsigned int *)(a1 + 244));
      unint64_t v68 = v67 + 48;
      *uint64_t v7 = v68;
    }
    *uint64_t v7 = v68;
    LOBYTE(v73[0]) = 4;
    if (v68 >= *v5)
    {
      uint64_t v69 = sub_D15658((uint64_t *)(a2 + 24), "PathConnector.NumRoundsAborted", (char *)v73, (unsigned int *)(a1 + 248));
    }
    else
    {
      sub_D15828(a2 + 40, v68, "PathConnector.NumRoundsAborted", (char *)v73, (unsigned int *)(a1 + 248));
      uint64_t v69 = v68 + 48;
      *uint64_t v7 = v68 + 48;
    }
    *uint64_t v7 = v69;
    if (!*(unsigned char *)(a1 + 364)) {
      return;
    }
    goto LABEL_164;
  }
LABEL_58:
  unint64_t v24 = sub_D1531C((uint64_t *)(a2 + 24), "NumActiveOnDemandQueries", (char *)v73, v23);
  *uint64_t v7 = v24;
  long long v25 = (unsigned int *)(a1 + 84);
  if (*(_DWORD *)(a1 + 84)) {
    goto LABEL_59;
  }
LABEL_37:
  long long v26 = (unsigned int *)(a1 + 152);
  if (!*(_DWORD *)(a1 + 152)) {
    goto LABEL_38;
  }
LABEL_92:
  LOBYTE(v73[0]) = 1;
  if (v24 >= *v5)
  {
    unint64_t v44 = sub_C95E9C((uint64_t *)(a2 + 24), "PathGraphExtractor.Runtime", (char *)v73, (uint64_t *)(a1 + 136));
  }
  else
  {
    sub_C9606C(a2 + 40, v24, "PathGraphExtractor.Runtime", (char *)v73, (uint64_t *)(a1 + 136));
    unint64_t v44 = v24 + 48;
    *uint64_t v7 = v44;
  }
  *uint64_t v7 = v44;
  LOBYTE(v73[0]) = 4;
  if (v44 >= *v5)
  {
    unint64_t v45 = sub_C99A4C((uint64_t *)(a2 + 24), "PathGraphExtractor.NumPathGraphNodes", (char *)v73, (unsigned int *)(a1 + 144));
  }
  else
  {
    sub_C99C1C(a2 + 40, v44, "PathGraphExtractor.NumPathGraphNodes", (char *)v73, (unsigned int *)(a1 + 144));
    unint64_t v45 = v44 + 48;
    *uint64_t v7 = v45;
  }
  *uint64_t v7 = v45;
  LOBYTE(v73[0]) = 4;
  if (v45 >= *v5)
  {
    unint64_t v46 = sub_D17038((uint64_t *)(a2 + 24), "PathGraphExtractor.NumShortcutGraphNodes", (char *)v73, (unsigned int *)(a1 + 148));
    *uint64_t v7 = v46;
    LOBYTE(v73[0]) = 4;
    if (v46 >= *v5) {
      goto LABEL_100;
    }
  }
  else
  {
    sub_D17208(a2 + 40, v45, "PathGraphExtractor.NumShortcutGraphNodes", (char *)v73, (unsigned int *)(a1 + 148));
    unint64_t v46 = v45 + 48;
    *uint64_t v7 = v46;
    *uint64_t v7 = v46;
    LOBYTE(v73[0]) = 4;
    if (v46 >= *v5)
    {
LABEL_100:
      unint64_t v47 = sub_D15994((uint64_t *)(a2 + 24), "PathGraphExtractor.NumShortcutGraphArcs", (char *)v73, v26);
      goto LABEL_103;
    }
  }
  sub_D15B64(a2 + 40, v46, "PathGraphExtractor.NumShortcutGraphArcs", (char *)v73, v26);
  unint64_t v47 = v46 + 48;
  *uint64_t v7 = v46 + 48;
LABEL_103:
  *uint64_t v7 = v47;
  LOBYTE(v73[0]) = 4;
  if (v47 >= *v5)
  {
    unint64_t v48 = sub_D17038((uint64_t *)(a2 + 24), "PathGraphExtractor.NumFilteredInputPaths", (char *)v73, (unsigned int *)(a1 + 156));
  }
  else
  {
    sub_D17208(a2 + 40, v47, "PathGraphExtractor.NumFilteredInputPaths", (char *)v73, (unsigned int *)(a1 + 156));
    unint64_t v48 = v47 + 48;
    *uint64_t v7 = v48;
  }
  *uint64_t v7 = v48;
  LOBYTE(v73[0]) = 4;
  if (v48 >= *v5)
  {
    unint64_t v49 = sub_D17374((uint64_t *)(a2 + 24), "PathGraphExtractor.NumAddedPaths", (char *)v73, (unsigned int *)(a1 + 160));
  }
  else
  {
    sub_D17544(a2 + 40, v48, "PathGraphExtractor.NumAddedPaths", (char *)v73, (unsigned int *)(a1 + 160));
    unint64_t v49 = v48 + 48;
    *uint64_t v7 = v49;
  }
  *uint64_t v7 = v49;
  LOBYTE(v73[0]) = 4;
  if (v49 >= *v5)
  {
    unint64_t v50 = sub_D15994((uint64_t *)(a2 + 24), "PathGraphExtractor.NumAddedPenaltyPaths", (char *)v73, (unsigned int *)(a1 + 164));
  }
  else
  {
    sub_D15B64(a2 + 40, v49, "PathGraphExtractor.NumAddedPenaltyPaths", (char *)v73, (unsigned int *)(a1 + 164));
    unint64_t v50 = v49 + 48;
    *uint64_t v7 = v50;
  }
  *uint64_t v7 = v50;
  LOBYTE(v73[0]) = 4;
  if (v50 >= *v5)
  {
    unint64_t v51 = sub_D176B0((uint64_t *)(a2 + 24), "PathGraphExtractor.NumAddedAvoidPaths", (char *)v73, (unsigned int *)(a1 + 180));
  }
  else
  {
    sub_D17880(a2 + 40, v50, "PathGraphExtractor.NumAddedAvoidPaths", (char *)v73, (unsigned int *)(a1 + 180));
    unint64_t v51 = v50 + 48;
    *uint64_t v7 = v51;
  }
  *uint64_t v7 = v51;
  LOBYTE(v73[0]) = 4;
  if (v51 >= *v5)
  {
    unint64_t v52 = sub_C98A20((uint64_t *)(a2 + 24), "PathGraphExtractor.NumPenaltySearchRounds", (char *)v73, (unsigned int *)(a1 + 168));
  }
  else
  {
    sub_C98BF0(a2 + 40, v51, "PathGraphExtractor.NumPenaltySearchRounds", (char *)v73, (unsigned int *)(a1 + 168));
    unint64_t v52 = v51 + 48;
    *uint64_t v7 = v52;
  }
  *uint64_t v7 = v52;
  LOBYTE(v73[0]) = 4;
  if (v52 >= *v5)
  {
    unint64_t v53 = sub_D179EC((uint64_t *)(a2 + 24), "PathGraphExtractor.NumAbortedPenaltySearchRounds", (char *)v73, (unsigned int *)(a1 + 172));
  }
  else
  {
    sub_D17BBC(a2 + 40, v52, "PathGraphExtractor.NumAbortedPenaltySearchRounds", (char *)v73, (unsigned int *)(a1 + 172));
    unint64_t v53 = v52 + 48;
    *uint64_t v7 = v53;
  }
  *uint64_t v7 = v53;
  LOBYTE(v73[0]) = 4;
  if (v53 >= *v5)
  {
    unint64_t v54 = sub_C993D4((uint64_t *)(a2 + 24), "PathGraphExtractor.NumScannedNodesPenaltySearch", (char *)v73, (unsigned int *)(a1 + 176));
  }
  else
  {
    sub_C995A4(a2 + 40, v53, "PathGraphExtractor.NumScannedNodesPenaltySearch", (char *)v73, (unsigned int *)(a1 + 176));
    unint64_t v54 = v53 + 48;
    *uint64_t v7 = v54;
  }
  *uint64_t v7 = v54;
  LOBYTE(v73[0]) = 4;
  if (v54 >= *v5)
  {
    unint64_t v55 = sub_D176B0((uint64_t *)(a2 + 24), "PathGraphExtractor.NumWitnessSearches", (char *)v73, (unsigned int *)(a1 + 184));
  }
  else
  {
    sub_D17880(a2 + 40, v54, "PathGraphExtractor.NumWitnessSearches", (char *)v73, (unsigned int *)(a1 + 184));
    unint64_t v55 = v54 + 48;
    *uint64_t v7 = v55;
  }
  *uint64_t v7 = v55;
  v78.__r_.__value_.__s.__data_[0] = 4;
  uint64_t v56 = *(void *)(a1 + 192);
  uint64_t v57 = v56 / 100;
  __int16 v58 = v56 % 100;
  if (v56 < 0) {
    __int16 v59 = -50;
  }
  else {
    __int16 v59 = 50;
  }
  v73[0] = (void *)(v57
                  + (int)(((5243 * (__int16)(v59 + v58)) >> 19) + ((5243 * (__int16)(v59 + v58)) >> 31)));
  if (v55 >= *v5)
  {
    unint64_t v60 = sub_D17D28((uint64_t *)(a2 + 24), "PathGraphExtractor.LengthLocalOptimalityChecks", (char *)&v78, v73);
  }
  else
  {
    sub_D17EF8(a2 + 40, v55, "PathGraphExtractor.LengthLocalOptimalityChecks", (char *)&v78, v73);
    unint64_t v60 = v55 + 48;
    *uint64_t v7 = v60;
  }
  *uint64_t v7 = v60;
  LOBYTE(v73[0]) = 4;
  if (v60 >= *v5)
  {
    unint64_t v24 = sub_C993D4((uint64_t *)(a2 + 24), "PathGraphExtractor.NumNonLocallyOptimalSubPaths", (char *)v73, (unsigned int *)(a1 + 200));
    *uint64_t v7 = v24;
    long long v27 = (unsigned int *)(a1 + 236);
    if (*(_DWORD *)(a1 + 236)) {
      goto LABEL_137;
    }
  }
  else
  {
    sub_C995A4(a2 + 40, v60, "PathGraphExtractor.NumNonLocallyOptimalSubPaths", (char *)v73, (unsigned int *)(a1 + 200));
    unint64_t v24 = v60 + 48;
    *uint64_t v7 = v60 + 48;
    *uint64_t v7 = v60 + 48;
    long long v27 = (unsigned int *)(a1 + 236);
    if (*(_DWORD *)(a1 + 236)) {
      goto LABEL_137;
    }
  }
LABEL_39:
  if (!*(unsigned char *)(a1 + 364)) {
    return;
  }
LABEL_164:
  sub_D12C38(a1 + 256, (uint64_t)v73);
  sub_C9856C((void **)(a2 + 24), *v7, (std::string *)__p, v76, 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (unsigned char *)__p) >> 4));
  int v70 = (std::string *)__p;
  if (__p)
  {
    long long v71 = v76;
    uint64_t v72 = __p;
    if (v76 != __p)
    {
      do
      {
        if (SHIBYTE(v71[-2].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71[-2].__r_.__value_.__l.__data_);
        }
        v71 -= 2;
      }
      while (v71 != v70);
      uint64_t v72 = __p;
    }
    long long v76 = v70;
    operator delete(v72);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete(v73[0]);
  }
}

void sub_D11130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  *long long v26 = v25;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      sub_A3A4(v24);
      _Unwind_Resume(a1);
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  sub_A3A4(v24);
  _Unwind_Resume(a1);
}

void sub_D118D4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D118E8(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D118FC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, char a9)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v74 = a1 + 32;
  *(_OWORD *)(a1 + 80) = 0u;
  uint64_t v73 = a1 + 80;
  unint64_t v15 = (void **)(a1 + 56);
  uint64_t v72 = a1 + 104;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  sub_DBDD08(a2, a1 + 128);
  *(void *)(a1 + 168) = a7;
  *(unsigned char *)(a1 + 176) = a6;
  *(void *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a8;
  *(unsigned char *)(a1 + 208) = a9;
  *(void *)(a1 + 216) = sub_DC6B80((uint64_t)a2);
  uint64_t v16 = sub_37B3A8(*(void *)(a1 + 200));
  uint64_t v17 = *(void *)v16;
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(v16 + 8);
  *(void *)(a1 + 132) = v17;
  sub_F5D99C();
  unint64_t v18 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v18;
    operator delete(v18);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = v85;
  uint64_t v19 = v86;
  uint64_t v20 = v87;
  uint64_t v86 = 0;
  long long v85 = 0uLL;
  *(void *)(a1 + 16) = v19;
  *(void *)(a1 + 24) = v20;
  uint64_t v21 = *(void *)(a1 + 32);
  if (v21)
  {
    uint64_t v22 = *(void *)(a1 + 40);
    long long v23 = *(void **)(a1 + 32);
    if (v22 != v21)
    {
      uint64_t v24 = *(void *)(a1 + 40);
      do
      {
        long long v26 = *(void **)(v24 - 32);
        v24 -= 32;
        uint64_t v25 = v26;
        if (v26)
        {
          *(void *)(v22 - 24) = v25;
          operator delete(v25);
        }
        uint64_t v22 = v24;
      }
      while (v24 != v21);
      long long v23 = *(void **)v74;
    }
    *(void *)(a1 + 40) = v21;
    operator delete(v23);
    *(void *)uint64_t v74 = 0;
    *(void *)(v74 + 8) = 0;
    *(void *)(v74 + 16) = 0;
  }
  *(_OWORD *)(a1 + 32) = v91;
  *(void *)(a1 + 48) = v92;
  uint64_t v92 = 0;
  long long v91 = 0uLL;
  uint64_t v27 = *(void *)(a1 + 80);
  if (v27)
  {
    uint64_t v28 = *(void *)(a1 + 88);
    unint64_t v29 = *(void **)(a1 + 80);
    if (v28 != v27)
    {
      uint64_t v30 = *(void *)(a1 + 88);
      do
      {
        uint64_t v32 = *(void **)(v30 - 40);
        v30 -= 40;
        uint64_t v31 = v32;
        if (v32)
        {
          *(void *)(v28 - 32) = v31;
          operator delete(v31);
        }
        uint64_t v28 = v30;
      }
      while (v30 != v27);
      unint64_t v29 = *(void **)v73;
    }
    *(void *)(a1 + 88) = v27;
    operator delete(v29);
    *(void *)uint64_t v73 = 0;
    *(void *)(v73 + 8) = 0;
    *(void *)(v73 + 16) = 0;
  }
  *(_OWORD *)(a1 + 80) = v93;
  *(void *)(a1 + 96) = v94;
  uint64_t v94 = 0;
  long long v93 = 0uLL;
  if (sub_DB6EEC((uint64_t)a2))
  {
    sub_F5D99C();
    sub_D11F24((uint64_t)v15, (const void **)v78);
    __int16 v33 = (char *)v81;
    __int16 v34 = v82;
    if (v81 != v82)
    {
      unint64_t v35 = *(char **)(a1 + 64);
      do
      {
        if ((unint64_t)v35 < *(void *)(a1 + 72))
        {
          *(void *)unint64_t v35 = 0;
          *((void *)v35 + 1) = 0;
          *((void *)v35 + 2) = 0;
          *(_OWORD *)unint64_t v35 = *(_OWORD *)v33;
          *((void *)v35 + 2) = *((void *)v33 + 2);
          *(void *)__int16 v33 = 0;
          *((void *)v33 + 1) = 0;
          *((void *)v33 + 2) = 0;
          *((void *)v35 + 3) = *((void *)v33 + 3);
          v35 += 32;
        }
        else
        {
          unint64_t v35 = sub_D128A0(v15, (uint64_t)v33);
        }
        *(void *)(a1 + 64) = v35;
        v33 += 32;
      }
      while (v33 != v34);
    }
    sub_D12044((uint64_t)v15, (const void **)__p);
    unint64_t v36 = (char *)__p;
    if (__p)
    {
      unint64_t v37 = v84;
      unint64_t v38 = __p;
      if (v84 != __p)
      {
        uint64_t v39 = v84;
        do
        {
          __int16 v41 = (void *)*((void *)v39 - 5);
          v39 -= 40;
          uint64_t v40 = v41;
          if (v41)
          {
            *((void *)v37 - 4) = v40;
            operator delete(v40);
          }
          unint64_t v37 = v39;
        }
        while (v39 != v36);
        unint64_t v38 = __p;
      }
      long long v84 = v36;
      operator delete(v38);
    }
    __int16 v42 = (char *)v81;
    if (v81)
    {
      unint64_t v43 = v82;
      unint64_t v44 = v81;
      if (v82 != v81)
      {
        unint64_t v45 = v82;
        do
        {
          unint64_t v47 = (void *)*((void *)v45 - 4);
          v45 -= 32;
          unint64_t v46 = v47;
          if (v47)
          {
            *((void *)v43 - 3) = v46;
            operator delete(v46);
          }
          unint64_t v43 = v45;
        }
        while (v45 != v42);
        unint64_t v44 = v81;
      }
      long long v82 = v42;
      operator delete(v44);
    }
    if (v79)
    {
      std::string::size_type v80 = v79;
      operator delete(v79);
    }
    if (*(void *)&v78[0])
    {
      *((void *)&v78[0] + 1) = *(void *)&v78[0];
      operator delete(*(void **)&v78[0]);
    }
  }
  if (*(void *)(a1 + 32) != *(void *)(a1 + 40))
  {
    sub_F5FE04((unsigned int **)a3, (uint64_t)v78);
    unint64_t v48 = *(void **)v72;
    if (*(void *)v72)
    {
      *(void *)(a1 + 112) = v48;
      operator delete(v48);
      *(void *)uint64_t v72 = 0;
      *(void *)(v72 + 8) = 0;
      *(void *)(v72 + 16) = 0;
    }
    *(_OWORD *)(a1 + 104) = v78[0];
    *(void *)(a1 + 120) = *(void *)&v78[1];
  }
  uint64_t v49 = *(void *)(a1 + 200);
  BYTE7(v78[1]) = 18;
  strcpy((char *)v78, "QuickTurnAvoidance");
  long long v75 = 0;
  long long v76 = 0;
  uint64_t v77 = 0;
  unint64_t v50 = sub_374CDC(v49, (uint64_t)v78, (uint64_t *)&v75);
  unint64_t v51 = (void **)v75;
  if (v75)
  {
    unint64_t v52 = v76;
    unint64_t v53 = v75;
    if (v76 != v75)
    {
      do
      {
        if (*((char *)v52 - 1) < 0) {
          operator delete(*(v52 - 3));
        }
        v52 -= 3;
      }
      while (v52 != v51);
      unint64_t v53 = v75;
    }
    long long v76 = v51;
    operator delete(v53);
  }
  if (SBYTE7(v78[1]) < 0) {
    operator delete(*(void **)&v78[0]);
  }
  *(void *)(a1 + 184) = sub_D12164(v50, v88);
  if ((sub_DBCC1C((uint64_t)a2) & 1) != 0 || (uint64_t v54 = *(void *)(a3 + 8), *(void *)a3 == v54))
  {
    *(unsigned char *)(a1 + 192) = 0;
    __int16 v58 = (char *)v93;
    if (!(void)v93) {
      goto LABEL_74;
    }
  }
  else
  {
    uint64_t v55 = *(void *)a3 + 160;
    do
    {
      BOOL v56 = *(_DWORD *)(v55 - 8) != 1 || *(unsigned char *)(v55 - 4) == 0;
      char v57 = !v56;
      if (!v56) {
        break;
      }
      BOOL v56 = v55 == v54;
      v55 += 160;
    }
    while (!v56);
    *(unsigned char *)(a1 + 192) = v57;
    __int16 v58 = (char *)v93;
    if (!(void)v93)
    {
LABEL_74:
      __int16 v59 = (char *)v91;
      if (!(void)v91) {
        goto LABEL_75;
      }
      goto LABEL_88;
    }
  }
  unint64_t v62 = (char *)*((void *)&v93 + 1);
  unint64_t v63 = v58;
  if (*((char **)&v93 + 1) != v58)
  {
    unint64_t v64 = (char *)*((void *)&v93 + 1);
    do
    {
      unint64_t v66 = (void *)*((void *)v64 - 5);
      v64 -= 40;
      unint64_t v65 = v66;
      if (v66)
      {
        *((void *)v62 - 4) = v65;
        operator delete(v65);
      }
      unint64_t v62 = v64;
    }
    while (v64 != v58);
    unint64_t v63 = (char *)v93;
  }
  *((void *)&v93 + 1) = v58;
  operator delete(v63);
  __int16 v59 = (char *)v91;
  if (!(void)v91)
  {
LABEL_75:
    unint64_t v60 = v89;
    if (!v89) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }
LABEL_88:
  unint64_t v67 = (char *)*((void *)&v91 + 1);
  unint64_t v68 = v59;
  if (*((char **)&v91 + 1) != v59)
  {
    uint64_t v69 = (char *)*((void *)&v91 + 1);
    do
    {
      long long v71 = (void *)*((void *)v69 - 4);
      v69 -= 32;
      int v70 = v71;
      if (v71)
      {
        *((void *)v67 - 3) = v70;
        operator delete(v70);
      }
      unint64_t v67 = v69;
    }
    while (v69 != v59);
    unint64_t v68 = (char *)v91;
  }
  *((void *)&v91 + 1) = v59;
  operator delete(v68);
  unint64_t v60 = v89;
  if (v89)
  {
LABEL_76:
    uint64_t v90 = v60;
    operator delete(v60);
  }
LABEL_77:
  if ((void)v85)
  {
    *((void *)&v85 + 1) = v85;
    operator delete((void *)v85);
  }
  return a1;
}

void sub_D11E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  sub_CF7EAC((uint64_t)&a44);
  unint64_t v47 = *a11;
  if (*a11)
  {
    *(void *)(v44 + 112) = v47;
    operator delete(v47);
  }
  sub_591CA4(a12);
  sub_C64510(v45);
  sub_C64510(a13);
  unint64_t v48 = *(void **)v44;
  if (*(void *)v44)
  {
    *(void *)(v44 + 8) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

void *sub_D11F24(uint64_t a1, const void **a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  if ((unint64_t)v4 >= *(void *)(a1 + 16))
  {
    long long v10 = sub_D1265C((void **)a1, (uint64_t)a2);
  }
  else
  {
    void *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    unint64_t v6 = *a2;
    unsigned int v5 = a2[1];
    int64_t v7 = v5 - (unsigned char *)*a2;
    if (v5 != *a2)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v7 >> 4) >= 0x333333333333334) {
        sub_2E00();
      }
      uint64_t v8 = (char *)operator new(v7);
      void *v4 = v8;
      v4[1] = v8;
      v4[2] = &v8[16 * (v7 >> 4)];
      size_t v9 = 80 * ((v7 - 80) / 0x50uLL) + 80;
      memcpy(v8, v6, v9);
      v4[1] = &v8[v9];
    }
    v4[3] = a2[3];
    long long v10 = v4 + 4;
    *(void *)(a1 + 8) = v4 + 4;
  }
  *(void *)(a1 + 8) = v10;
  return v10 - 4;
}

void sub_D12024(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void *sub_D12044(uint64_t a1, const void **a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  if ((unint64_t)v4 >= *(void *)(a1 + 16))
  {
    long long v10 = sub_D129F4((void **)a1, (uint64_t)a2);
  }
  else
  {
    void *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    unint64_t v6 = *a2;
    unsigned int v5 = a2[1];
    int64_t v7 = v5 - (unsigned char *)*a2;
    if (v5 != *a2)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v7 >> 4) >= 0x333333333333334) {
        sub_2E00();
      }
      uint64_t v8 = (char *)operator new(v7);
      void *v4 = v8;
      v4[1] = v8;
      v4[2] = &v8[16 * (v7 >> 4)];
      size_t v9 = 80 * ((v7 - 80) / 0x50uLL) + 80;
      memcpy(v8, v6, v9);
      v4[1] = &v8[v9];
    }
    v4[3] = a2[3];
    long long v10 = v4 + 4;
    *(void *)(a1 + 8) = v4 + 4;
  }
  *(void *)(a1 + 8) = v10;
  return v10 - 4;
}

void sub_D12144(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_D12164(void *a1, double a2)
{
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "min_mps_for_quick_turn_avoidance");
  double v4 = (double)sub_31AC04(a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (v4 > a2) {
      return 0;
    }
  }
  else if (v4 > a2)
  {
    return 0;
  }
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "instruction_time_s");
  unsigned int v6 = sub_31AC04(a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "braking_deceleration");
  double v7 = sub_5C7E8(a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "instruction_deceleration");
  double v8 = sub_5C7E8(a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "length_shift");
  double v9 = sub_5C7E8(a1, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  double v10 = fmax(a2 - v8 * (double)v6, 0.0);
  double v11 = (v10 + a2) * 0.5 * (double)v6 * 100.0;
  if (v11 >= 0.0)
  {
    double v12 = (v10 + a2) * 0.5 * (double)v6 * 100.0;
    if (v11 >= 4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v13 = (uint64_t)(v11 + v11) + 1;
  }
  else
  {
    double v12 = (v10 + a2) * 0.5 * (double)v6 * 100.0;
    if (v11 <= -4.50359963e15) {
      goto LABEL_21;
    }
    uint64_t v13 = (uint64_t)(v11 + v11);
    if (v13 >= 1) {
      --v13;
    }
  }
  double v12 = (double)(v13 >> 1);
LABEL_21:
  if (v12 >= 9.22337204e18)
  {
    uint64_t v15 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_32;
  }
  if (v11 >= 0.0)
  {
    if (v11 < 4.50359963e15)
    {
      uint64_t v14 = (uint64_t)(v11 + v11) + 1;
LABEL_30:
      double v11 = (double)(v14 >> 1);
    }
  }
  else if (v11 > -4.50359963e15)
  {
    uint64_t v14 = (uint64_t)(v11 + v11);
    if (v14 >= 1) {
      --v14;
    }
    goto LABEL_30;
  }
  uint64_t v15 = (uint64_t)v11;
LABEL_32:
  double v16 = v10 * v10 / (v7 + v7) * 100.0;
  if (v16 >= 0.0)
  {
    double v17 = v16;
    if (v16 >= 4.50359963e15) {
      goto LABEL_40;
    }
    uint64_t v18 = (uint64_t)(v16 + v16) + 1;
  }
  else
  {
    double v17 = v16;
    if (v16 <= -4.50359963e15) {
      goto LABEL_40;
    }
    uint64_t v18 = (uint64_t)(v16 + v16);
    if (v18 >= 1) {
      --v18;
    }
  }
  double v17 = (double)(v18 >> 1);
LABEL_40:
  if (v17 < 9.22337204e18)
  {
    if (v16 >= 0.0)
    {
      if (v16 >= 4.50359963e15) {
        goto LABEL_55;
      }
      uint64_t v19 = (uint64_t)(v16 + v16) + 1;
    }
    else
    {
      if (v16 <= -4.50359963e15) {
        goto LABEL_55;
      }
      uint64_t v19 = (uint64_t)(v16 + v16);
      if (v19 >= 1) {
        --v19;
      }
    }
    double v16 = (double)(v19 >> 1);
LABEL_55:
    uint64_t v20 = (uint64_t)v16 + v15;
    double v21 = v9 * 100.0;
    if (v9 < 0.0) {
      goto LABEL_56;
    }
LABEL_47:
    if (v21 >= 0.0)
    {
      double v22 = v21;
      if (v21 >= 4.50359963e15) {
        goto LABEL_62;
      }
      uint64_t v23 = (uint64_t)(v21 + v21) + 1;
    }
    else
    {
      double v22 = v21;
      if (v21 <= -4.50359963e15) {
        goto LABEL_62;
      }
      uint64_t v23 = (uint64_t)(v21 + v21);
      if (v23 >= 1) {
        --v23;
      }
    }
    double v22 = (double)(v23 >> 1);
LABEL_62:
    if (v22 >= 9.22337204e18)
    {
      uint64_t v26 = 0x7FFFFFFFFFFFFFFELL;
      return v26 + v20;
    }
    if (v21 >= 0.0)
    {
      if (v21 < 4.50359963e15)
      {
        uint64_t v25 = (uint64_t)(v21 + v21) + 1;
LABEL_71:
        double v21 = (double)(v25 >> 1);
      }
    }
    else if (v21 > -4.50359963e15)
    {
      uint64_t v25 = (uint64_t)(v21 + v21);
      if (v25 >= 1) {
        --v25;
      }
      goto LABEL_71;
    }
    uint64_t v26 = (uint64_t)v21;
    return v26 + v20;
  }
  uint64_t v20 = v15 + 0x7FFFFFFFFFFFFFFELL;
  double v21 = v9 * 100.0;
  if (v9 >= 0.0) {
    goto LABEL_47;
  }
LABEL_56:
  uint64_t v24 = (uint64_t)fabs(v21);
  if (v20 < v24) {
    uint64_t v24 = v20;
  }
  return v20 - v24;
}

void sub_D12630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_D1265C(void **a1, uint64_t a2)
{
  double v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  uint64_t v5 = (v3 - (unsigned char *)*a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = (unsigned char *)a1[2] - v4;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    double v10 = (char *)operator new(32 * v9);
  }
  else
  {
    double v10 = 0;
  }
  double v11 = &v10[32 * v5];
  double v12 = &v10[32 * v9];
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)double v11 = 0;
  uint64_t v14 = *(const void **)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  int64_t v15 = v13 - *(void *)a2;
  if (v13 != *(void *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v15 >> 4) >= 0x333333333333334) {
      sub_2E00();
    }
    double v16 = (char *)operator new(v15);
    *(void *)double v11 = v16;
    *((void *)v11 + 1) = v16;
    *((void *)v11 + 2) = &v16[16 * (v15 >> 4)];
    size_t v17 = 80 * ((v15 - 80) / 0x50uLL) + 80;
    memcpy(v16, v14, v17);
    *((void *)v11 + 1) = &v16[v17];
  }
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  uint64_t v18 = v11 + 32;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v18;
    a1[2] = v12;
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v20 = &v11[v19];
      double v21 = &v3[v19];
      *((void *)v20 - 3) = 0;
      *((void *)v20 - 2) = 0;
      *((_OWORD *)v20 - 2) = *(_OWORD *)&v3[v19 - 32];
      *((void *)v20 - 2) = *(void *)&v3[v19 - 16];
      *((void *)v21 - 4) = 0;
      *((void *)v21 - 3) = 0;
      *((void *)v21 - 2) = 0;
      *((void *)v20 - 1) = *(void *)&v3[v19 - 8];
      v19 -= 32;
    }
    while (&v3[v19] != v4);
    double v22 = (char *)*a1;
    uint64_t v3 = (char *)a1[1];
    uint64_t v18 = v11 + 32;
    *a1 = &v11[v19];
    a1[1] = v11 + 32;
    a1[2] = v12;
    if (v3 != v22)
    {
      uint64_t v23 = v3;
      do
      {
        uint64_t v25 = (void *)*((void *)v23 - 4);
        v23 -= 32;
        uint64_t v24 = v25;
        if (v25)
        {
          *((void *)v3 - 3) = v24;
          operator delete(v24);
        }
        uint64_t v3 = v23;
      }
      while (v23 != v22);
      uint64_t v3 = v22;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v18;
}

void sub_D1287C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  double v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_BF93E8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_D128A0(void **a1, uint64_t a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 4 > v4) {
    unint64_t v4 = v5 >> 4;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 59) {
    sub_188D718();
  }
  uint64_t v9 = 32 * v7;
  double v10 = (char *)operator new(32 * v7);
  double v11 = &v10[32 * v3];
  double v12 = &v10[v9];
  *(_OWORD *)double v11 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v14 = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *((void *)v11 + 2) = v13;
  *((void *)v11 + 3) = v14;
  int64_t v15 = v11 + 32;
  size_t v17 = (char *)*a1;
  double v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v11;
    a1[1] = v15;
    a1[2] = v12;
    if (!v16) {
      return v15;
    }
    goto LABEL_17;
  }
  uint64_t v18 = 0;
  do
  {
    uint64_t v19 = &v11[v18];
    uint64_t v20 = &v16[v18];
    *((_OWORD *)v19 - 2) = *(_OWORD *)&v16[v18 - 32];
    uint64_t v21 = *(void *)&v16[v18 - 8];
    *((void *)v19 - 2) = *(void *)&v16[v18 - 16];
    *((void *)v20 - 4) = 0;
    *((void *)v20 - 3) = 0;
    *((void *)v20 - 2) = 0;
    *((void *)v19 - 1) = v21;
    v18 -= 32;
  }
  while (&v16[v18] != v17);
  double v22 = (char *)*a1;
  double v16 = (char *)a1[1];
  *a1 = &v11[v18];
  a1[1] = v15;
  a1[2] = v12;
  if (v16 != v22)
  {
    uint64_t v23 = v16;
    do
    {
      uint64_t v25 = (void *)*((void *)v23 - 4);
      v23 -= 32;
      uint64_t v24 = v25;
      if (v25)
      {
        *((void *)v16 - 3) = v24;
        operator delete(v24);
      }
      double v16 = v23;
    }
    while (v23 != v22);
    double v16 = v22;
  }
  if (v16) {
LABEL_17:
  }
    operator delete(v16);
  return v15;
}

void *sub_D129F4(void **a1, uint64_t a2)
{
  unint64_t v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  uint64_t v5 = (v3 - (unsigned char *)*a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = (unsigned char *)a1[2] - v4;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    double v10 = (char *)operator new(32 * v9);
  }
  else
  {
    double v10 = 0;
  }
  double v11 = &v10[32 * v5];
  double v12 = &v10[32 * v9];
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)double v11 = 0;
  uint64_t v14 = *(const void **)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  int64_t v15 = v13 - *(void *)a2;
  if (v13 != *(void *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v15 >> 4) >= 0x333333333333334) {
      sub_2E00();
    }
    double v16 = (char *)operator new(v15);
    *(void *)double v11 = v16;
    *((void *)v11 + 1) = v16;
    *((void *)v11 + 2) = &v16[16 * (v15 >> 4)];
    size_t v17 = 80 * ((v15 - 80) / 0x50uLL) + 80;
    memcpy(v16, v14, v17);
    *((void *)v11 + 1) = &v16[v17];
  }
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  uint64_t v18 = v11 + 32;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v18;
    a1[2] = v12;
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v20 = &v11[v19];
      uint64_t v21 = &v3[v19];
      *((void *)v20 - 3) = 0;
      *((void *)v20 - 2) = 0;
      *((_OWORD *)v20 - 2) = *(_OWORD *)&v3[v19 - 32];
      *((void *)v20 - 2) = *(void *)&v3[v19 - 16];
      *((void *)v21 - 4) = 0;
      *((void *)v21 - 3) = 0;
      *((void *)v21 - 2) = 0;
      *((void *)v20 - 1) = *(void *)&v3[v19 - 8];
      v19 -= 32;
    }
    while (&v3[v19] != v4);
    double v22 = (char *)*a1;
    uint64_t v3 = (char *)a1[1];
    uint64_t v18 = v11 + 32;
    *a1 = &v11[v19];
    a1[1] = v11 + 32;
    a1[2] = v12;
    if (v3 != v22)
    {
      uint64_t v23 = v3;
      do
      {
        uint64_t v25 = (void *)*((void *)v23 - 4);
        v23 -= 32;
        uint64_t v24 = v25;
        if (v25)
        {
          *((void *)v3 - 3) = v24;
          operator delete(v24);
        }
        uint64_t v3 = v23;
      }
      while (v23 != v22);
      uint64_t v3 = v22;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v18;
}

void sub_D12C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_BF93E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D12C38(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "EVPathFinding");
  uint64_t v5 = (unint64_t *)(a2 + 40);
  unint64_t v4 = *(void *)(a2 + 40);
  __p.__r_.__value_.__s.__data_[0] = 1;
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 >= v4)
  {
    unint64_t v7 = sub_C947F8((uint64_t *)(a2 + 24), "Runtime", (char *)&__p, (uint64_t *)(a1 + 8));
  }
  else
  {
    sub_C949C8(a2 + 40, *(void *)(a2 + 32), "Runtime", (char *)&__p, (uint64_t *)(a1 + 8));
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
  __p.__r_.__value_.__s.__data_[0] = 1;
  if (v7 >= *(void *)(a2 + 40))
  {
    unint64_t v8 = sub_C961D8((uint64_t *)(a2 + 24), "ChargingStationSearch.Runtime", (char *)&__p, (uint64_t *)(a1 + 16));
    *(void *)(a2 + 32) = v8;
    unint64_t v9 = (unsigned int *)(a1 + 24);
    if (*(_DWORD *)(a1 + 24)) {
      goto LABEL_6;
    }
  }
  else
  {
    sub_C963A8(a2 + 40, v7, "ChargingStationSearch.Runtime", (char *)&__p, (uint64_t *)(a1 + 16));
    unint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v8;
    *(void *)(a2 + 32) = v8;
    unint64_t v9 = (unsigned int *)(a1 + 24);
    if (*(_DWORD *)(a1 + 24))
    {
LABEL_6:
      __p.__r_.__value_.__s.__data_[0] = 4;
      if (v8 < *v5)
      {
        sub_D19260(a2 + 40, v8, "FoundChargingStations", (char *)&__p, v9);
        goto LABEL_11;
      }
      uint64_t v12 = sub_D19090((uint64_t *)(a2 + 24), "FoundChargingStations", (char *)&__p, v9);
LABEL_17:
      unint64_t v10 = v12;
      *(void *)(a2 + 32) = v12;
      double v11 = (unsigned int *)(a1 + 40);
      if (*(_DWORD *)(a1 + 40)) {
        goto LABEL_12;
      }
      goto LABEL_18;
    }
  }
  v42[0] = 4;
  LODWORD(__p.__r_.__value_.__l.__data_) = 1;
  if (v8 >= *v5)
  {
    uint64_t v12 = sub_D193CC((uint64_t *)(a2 + 24), "NoFoundChargingStations", v42, (int *)&__p);
    goto LABEL_17;
  }
  sub_D1959C(a2 + 40, v8, "NoFoundChargingStations", v42, (int *)&__p);
LABEL_11:
  unint64_t v10 = v8 + 48;
  *(void *)(a2 + 32) = v10;
  *(void *)(a2 + 32) = v10;
  double v11 = (unsigned int *)(a1 + 40);
  if (*(_DWORD *)(a1 + 40))
  {
LABEL_12:
    __p.__r_.__value_.__s.__data_[0] = 4;
    if (v10 < *v5)
    {
      sub_D198D8(a2 + 40, v10, "PathGraphChargingStations", (char *)&__p, v11);
LABEL_20:
      unint64_t v14 = v10 + 48;
      *(void *)(a2 + 32) = v14;
      goto LABEL_23;
    }
    uint64_t v13 = sub_D19708((uint64_t *)(a2 + 24), "PathGraphChargingStations", (char *)&__p, v11);
    goto LABEL_22;
  }
LABEL_18:
  v42[0] = 4;
  LODWORD(__p.__r_.__value_.__l.__data_) = 1;
  if (v10 < *v5)
  {
    sub_D19C14(a2 + 40, v10, "NoPathGraphChargingStations", v42, (int *)&__p);
    goto LABEL_20;
  }
  uint64_t v13 = sub_D19A44((uint64_t *)(a2 + 24), "NoPathGraphChargingStations", v42, (int *)&__p);
LABEL_22:
  unint64_t v14 = v13;
LABEL_23:
  *(void *)(a2 + 32) = v14;
  __p.__r_.__value_.__s.__data_[0] = 1;
  if (v14 >= *v5)
  {
    unint64_t v15 = sub_C961D8((uint64_t *)(a2 + 24), "PathGraphAugmentation.Runtime", (char *)&__p, (uint64_t *)(a1 + 32));
  }
  else
  {
    sub_C963A8(a2 + 40, v14, "PathGraphAugmentation.Runtime", (char *)&__p, (uint64_t *)(a1 + 32));
    unint64_t v15 = v14 + 48;
    *(void *)(a2 + 32) = v15;
  }
  *(void *)(a2 + 32) = v15;
  __p.__r_.__value_.__s.__data_[0] = 1;
  if (v15 >= *(void *)(a2 + 40))
  {
    unint64_t v16 = sub_C95E9C((uint64_t *)(a2 + 24), "BuildShortcutGraph.Runtime", (char *)&__p, (uint64_t *)(a1 + 48));
  }
  else
  {
    sub_C9606C(a2 + 40, v15, "BuildShortcutGraph.Runtime", (char *)&__p, (uint64_t *)(a1 + 48));
    unint64_t v16 = v15 + 48;
    *(void *)(a2 + 32) = v16;
  }
  *(void *)(a2 + 32) = v16;
  __p.__r_.__value_.__s.__data_[0] = 1;
  if (v16 >= *(void *)(a2 + 40))
  {
    unint64_t v17 = sub_354F9C((uint64_t *)(a2 + 24), "SearchInitialization.Runtime", (char *)&__p, (uint64_t *)(a1 + 56));
  }
  else
  {
    sub_35516C(a2 + 40, v16, "SearchInitialization.Runtime", (char *)&__p, (uint64_t *)(a1 + 56));
    unint64_t v17 = v16 + 48;
    *(void *)(a2 + 32) = v17;
  }
  *(void *)(a2 + 32) = v17;
  __p.__r_.__value_.__s.__data_[0] = 1;
  if (v17 >= *(void *)(a2 + 40))
  {
    unint64_t v18 = sub_3545E8((uint64_t *)(a2 + 24), "ChargingFunctionPropagation.Runtime", (char *)&__p, (uint64_t *)(a1 + 64));
    *(void *)(a2 + 32) = v18;
    uint64_t v19 = (unsigned int *)(a1 + 104);
    if (*(_DWORD *)(a1 + 104)) {
      goto LABEL_34;
    }
  }
  else
  {
    sub_3547B8(a2 + 40, v17, "ChargingFunctionPropagation.Runtime", (char *)&__p, (uint64_t *)(a1 + 64));
    unint64_t v18 = v17 + 48;
    *(void *)(a2 + 32) = v18;
    *(void *)(a2 + 32) = v18;
    uint64_t v19 = (unsigned int *)(a1 + 104);
    if (*(_DWORD *)(a1 + 104))
    {
LABEL_34:
      __p.__r_.__value_.__s.__data_[0] = 4;
      if (v18 < *v5)
      {
        sub_D14184(a2 + 40, v18, "PathCandidates", (char *)&__p, v19);
LABEL_45:
        v18 += 48;
        *(void *)(a2 + 32) = v18;
        goto LABEL_48;
      }
      uint64_t v22 = sub_D13FB4((uint64_t *)(a2 + 24), "PathCandidates", (char *)&__p, v19);
      goto LABEL_47;
    }
  }
  v42[0] = 4;
  LODWORD(__p.__r_.__value_.__l.__data_) = 1;
  if (v18 < *v5)
  {
    sub_D19F50(a2 + 40, v18, "NoPath", v42, (int *)&__p);
    v18 += 48;
    *(void *)(a2 + 32) = v18;
    *(void *)(a2 + 32) = v18;
    if (*(_DWORD *)a1 < 0x33u) {
      goto LABEL_39;
    }
LABEL_43:
    v42[0] = 4;
    LODWORD(__p.__r_.__value_.__l.__data_) = 1;
    if (v18 < *v5)
    {
      sub_D1A28C(a2 + 40, v18, "NoPath.HighInitialSoC", v42, (int *)&__p);
      goto LABEL_45;
    }
    uint64_t v22 = sub_D1A0BC((uint64_t *)(a2 + 24), "NoPath.HighInitialSoC", v42, (int *)&__p);
LABEL_47:
    unint64_t v18 = v22;
LABEL_48:
    *(void *)(a2 + 32) = v18;
    __p.__r_.__value_.__s.__data_[0] = 4;
    uint64_t v20 = (unsigned int *)(a1 + 80);
    if (v18 >= *v5) {
      goto LABEL_49;
    }
LABEL_40:
    sub_D1A5C8(a2 + 40, v18, "PathGraph.AddedNodes", (char *)&__p, v20);
    unint64_t v21 = v18 + 48;
    *(void *)(a2 + 32) = v21;
    goto LABEL_50;
  }
  unint64_t v18 = sub_D19D80((uint64_t *)(a2 + 24), "NoPath", v42, (int *)&__p);
  *(void *)(a2 + 32) = v18;
  if (*(_DWORD *)a1 >= 0x33u) {
    goto LABEL_43;
  }
LABEL_39:
  __p.__r_.__value_.__s.__data_[0] = 4;
  uint64_t v20 = (unsigned int *)(a1 + 80);
  if (v18 < *v5) {
    goto LABEL_40;
  }
LABEL_49:
  unint64_t v21 = sub_D1A3F8((uint64_t *)(a2 + 24), "PathGraph.AddedNodes", (char *)&__p, v20);
LABEL_50:
  *(void *)(a2 + 32) = v21;
  __p.__r_.__value_.__s.__data_[0] = 4;
  if (v21 >= *(void *)(a2 + 40))
  {
    unint64_t v23 = sub_D1A3F8((uint64_t *)(a2 + 24), "PathGraph.AddedEdges", (char *)&__p, (unsigned int *)(a1 + 84));
  }
  else
  {
    sub_D1A5C8(a2 + 40, v21, "PathGraph.AddedEdges", (char *)&__p, (unsigned int *)(a1 + 84));
    unint64_t v23 = v21 + 48;
    *(void *)(a2 + 32) = v23;
  }
  *(void *)(a2 + 32) = v23;
  __p.__r_.__value_.__s.__data_[0] = 4;
  if (v23 >= *(void *)(a2 + 40))
  {
    unint64_t v24 = sub_C94B34((uint64_t *)(a2 + 24), "ShortcutGraph.Nodes", (char *)&__p, (uint64_t *)(a1 + 88));
  }
  else
  {
    sub_C94D04(a2 + 40, v23, "ShortcutGraph.Nodes", (char *)&__p, (uint64_t *)(a1 + 88));
    unint64_t v24 = v23 + 48;
    *(void *)(a2 + 32) = v24;
  }
  *(void *)(a2 + 32) = v24;
  __p.__r_.__value_.__s.__data_[0] = 4;
  if (v24 >= *(void *)(a2 + 40))
  {
    unint64_t v25 = sub_C94B34((uint64_t *)(a2 + 24), "ShortcutGraph.Edges", (char *)&__p, (uint64_t *)(a1 + 96));
  }
  else
  {
    sub_C94D04(a2 + 40, v24, "ShortcutGraph.Edges", (char *)&__p, (uint64_t *)(a1 + 96));
    unint64_t v25 = v24 + 48;
    *(void *)(a2 + 32) = v25;
  }
  *(void *)(a2 + 32) = v25;
  __p.__r_.__value_.__s.__data_[0] = 4;
  if (v25 >= *(void *)(a2 + 40))
  {
    uint64_t v26 = sub_D1A734((uint64_t *)(a2 + 24), "ChargingFunctionPropagation.TargetLabels", (char *)&__p, (uint64_t *)(a1 + 72));
    *(void *)(a2 + 32) = v26;
    uint64_t v27 = *(void *)(a2 + 24);
    if (v27 == v26) {
      return;
    }
    while (1)
    {
LABEL_65:
      int v28 = *(char *)(a2 + 23);
      if (v28 >= 0) {
        size_t v29 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v29 = *(void *)(a2 + 8);
      }
      unint64_t v30 = v29 + 1;
      if (v29 + 1 >= 0x7FFFFFFFFFFFFFF8) {
        sub_188D690();
      }
      if (v30 >= 0x17) {
        break;
      }
      memset(&__p, 0, sizeof(__p));
      p_p = &__p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v29 + 1;
      if (v29) {
        goto LABEL_75;
      }
LABEL_79:
      *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v29) = 46;
      int v35 = *(char *)(v27 + 23);
      if (v35 >= 0) {
        unint64_t v36 = (const std::string::value_type *)v27;
      }
      else {
        unint64_t v36 = *(const std::string::value_type **)v27;
      }
      if (v35 >= 0) {
        std::string::size_type v37 = *(unsigned __int8 *)(v27 + 23);
      }
      else {
        std::string::size_type v37 = *(void *)(v27 + 8);
      }
      unint64_t v38 = std::string::append(&__p, v36, v37);
      std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
      *(void *)__int16 v42 = v38->__r_.__value_.__l.__size_;
      *(void *)&v42[7] = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
      char v40 = HIBYTE(v38->__r_.__value_.__r.__words[2]);
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(v27 + 23) < 0) {
        operator delete(*(void **)v27);
      }
      *(void *)uint64_t v27 = v39;
      *(void *)(v27 + 8) = *(void *)v42;
      *(void *)(v27 + 15) = *(void *)&v42[7];
      *(unsigned char *)(v27 + 23) = v40;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v27 += 48;
      if (v27 == v26) {
        return;
      }
    }
    uint64_t v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v32 = v30 | 7;
    }
    uint64_t v33 = v32 + 1;
    p_p = (std::string *)operator new(v32 + 1);
    __p.__r_.__value_.__l.__size_ = v29 + 1;
    __p.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
LABEL_75:
    if (v28 >= 0) {
      __int16 v34 = (const void *)a2;
    }
    else {
      __int16 v34 = *(const void **)a2;
    }
    memmove(p_p, v34, v29);
    goto LABEL_79;
  }
  sub_D1A904(a2 + 40, v25, "ChargingFunctionPropagation.TargetLabels", (char *)&__p, (uint64_t *)(a1 + 72));
  uint64_t v26 = v25 + 48;
  *(void *)(a2 + 32) = v25 + 48;
  *(void *)(a2 + 32) = v25 + 48;
  uint64_t v27 = *(void *)(a2 + 24);
  if (v27 != v25 + 48) {
    goto LABEL_65;
  }
}

void sub_D13504(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D13518(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D136C8(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D136DC(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D136F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_A3A4(v14);
    _Unwind_Resume(a1);
  }
  sub_A3A4(v14);
  _Unwind_Resume(a1);
}

char *sub_D13728(char **a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v5) >> 4) > v8) {
    unint64_t v8 = 0x5555555555555556 * ((a1[2] - v5) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v8;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = &v13[48 * v7];
  unint64_t v24 = &v13[48 * v12];
  char v15 = *a3;
  uint64_t v16 = *a4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v14, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    uint64_t v14 = &v13[48 * v7];
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
  }
  unint64_t v17 = &v13[48 * v7];
  v17[24] = v15;
  *((void *)v17 + 4) = v16;
  *((_DWORD *)v17 + 10) = 1;
  unint64_t v18 = v17 + 48;
  if (v6 == v5)
  {
    unint64_t v21 = v5;
  }
  else
  {
    do
    {
      long long v19 = *((_OWORD *)v6 - 3);
      *((void *)v14 - 4) = *((void *)v6 - 4);
      *((_OWORD *)v14 - 3) = v19;
      *((void *)v6 - 5) = 0;
      *((void *)v6 - 4) = 0;
      *((void *)v6 - 6) = 0;
      long long v20 = *(_OWORD *)(v6 - 24);
      *((_DWORD *)v14 - 2) = *((_DWORD *)v6 - 2);
      *(_OWORD *)(v14 - 24) = v20;
      v14 -= 48;
      v6 -= 48;
    }
    while (v6 != v5);
    unint64_t v21 = *a1;
    uint64_t v5 = a1[1];
  }
  *a1 = v14;
  a1[1] = v18;
  a1[2] = v24;
  if (v5 != v21)
  {
    uint64_t v22 = (void **)(v5 - 48);
    do
    {
      if (*((char *)v22 + 23) < 0) {
        operator delete(*v22);
      }
      v22 -= 6;
    }
    while (v22 + 6 != (void **)v21);
    uint64_t v5 = v21;
  }
  if (v5) {
    operator delete(v5);
  }
  return v18;
}

void sub_D13928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D1393C(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D13B0C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  char v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    char v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      char v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D13AF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D13B0C(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D13C64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D13C78(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D13E48(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D13E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D13E48(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D13FA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D13FB4(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D14184(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D14170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D14184(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D142DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D142F0(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D144C0(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D144AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D144C0(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D14618(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1462C(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D147FC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D147E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D147FC(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D14954(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D14968(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D14B38(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D14B24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D14B38(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D14C90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D14CA4(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D14E74(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D14E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D14E74(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D14FCC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D14FE0(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D151B0(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D1519C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D151B0(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D15308(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1531C(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D154EC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D154D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D154EC(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D15644(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D15658(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D15828(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D15814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D15828(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D15980(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D15994(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D15B64(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D15B50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D15B64(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D15CBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D15CD0(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D15EA0(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D15E8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D15EA0(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  uint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_D15FF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1600C(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D161DC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D161C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D161DC(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D16334(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D16348(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D16518(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D16504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D16518(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D16670(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D16684(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D16854(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D16840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D16854(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D169AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D169C0(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D16B90(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D16B7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D16B90(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  uint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_D16CE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D16CFC(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D16ECC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D16EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D16ECC(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D17024(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D17038(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D17208(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D171F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D17208(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D17360(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D17374(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D17544(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D17530(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D17544(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D1769C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D176B0(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D17880(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D1786C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D17880(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D179D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D179EC(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D17BBC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D17BA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D17BBC(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D17D14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D17D28(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D17EF8(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D17EE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D17EF8(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  uint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_D18050(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D18064(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D18234(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D18220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D18234(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D1838C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D183A0(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D18570(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D1855C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D18570(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D186C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D186DC(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D188AC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D18898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D188AC(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D18A04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D18A18(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D18BE8(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D18BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D18BE8(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D18D40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D18D54(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D18F24(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D18F10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D18F24(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D1907C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D19090(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D19260(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D1924C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D19260(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D193B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D193CC(uint64_t *a1, char *a2, char *a3, int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D1959C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D19588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D1959C(int a1, uint64_t a2, char *__s, char *a4, int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D196F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D19708(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D198D8(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D198C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D198D8(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D19A30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D19A44(uint64_t *a1, char *a2, char *a3, int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D19C14(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D19C00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D19C14(int a1, uint64_t a2, char *__s, char *a4, int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D19D6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D19D80(uint64_t *a1, char *a2, char *a3, int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D19F50(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D19F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D19F50(int a1, uint64_t a2, char *__s, char *a4, int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D1A0A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1A0BC(uint64_t *a1, char *a2, char *a3, int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D1A28C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D1A278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D1A28C(int a1, uint64_t a2, char *__s, char *a4, int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D1A3E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1A3F8(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D1A5C8(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D1A5B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D1A5C8(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D1A720(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1A734(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    double v11 = (char *)operator new(48 * v10);
  }
  else
  {
    double v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D1A904(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D1A8F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D1A904(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D1AA5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1AA70(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 88);
    unint64_t v5 = *(void **)(a1 + 80);
    if (v4 != v3)
    {
      uint64_t v6 = *(void *)(a1 + 88);
      do
      {
        unint64_t v8 = *(void **)(v6 - 40);
        v6 -= 40;
        unint64_t v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 32) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      unint64_t v5 = *(void **)(a1 + 80);
    }
    *(void *)(a1 + 88) = v3;
    operator delete(v5);
  }
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 64);
    double v11 = *(void **)(a1 + 56);
    if (v10 != v9)
    {
      uint64_t v12 = *(void *)(a1 + 64);
      do
      {
        uint64_t v14 = *(void **)(v12 - 32);
        v12 -= 32;
        uint64_t v13 = v14;
        if (v14)
        {
          *(void *)(v10 - 24) = v13;
          operator delete(v13);
        }
        uint64_t v10 = v12;
      }
      while (v12 != v9);
      double v11 = *(void **)(a1 + 56);
    }
    *(void *)(a1 + 64) = v9;
    operator delete(v11);
  }
  uint64_t v15 = *(void *)(a1 + 32);
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 40);
    long long v17 = *(void **)(a1 + 32);
    if (v16 != v15)
    {
      uint64_t v18 = *(void *)(a1 + 40);
      do
      {
        uint64_t v20 = *(void **)(v18 - 32);
        v18 -= 32;
        long long v19 = v20;
        if (v20)
        {
          *(void *)(v16 - 24) = v19;
          operator delete(v19);
        }
        uint64_t v16 = v18;
      }
      while (v18 != v15);
      long long v17 = *(void **)(a1 + 32);
    }
    *(void *)(a1 + 40) = v15;
    operator delete(v17);
  }
  unint64_t v21 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v21;
    operator delete(v21);
  }
  return a1;
}

uint64_t sub_D1ABA0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      uint64_t v4 = (void *)(a2 + 8);
      unint64_t v5 = (void **)(a1 + 8);
      uint64_t v6 = *(void ****)(a1 + 8);
      if (v6)
      {
        unint64_t v7 = *(void ****)(a1 + 16);
        unint64_t v8 = *(void **)(a1 + 8);
        if (v7 != v6)
        {
          uint64_t v9 = v7 - 3;
          do
          {
            if (*v9)
            {
              sub_C8A9E8((uint64_t)v9, *v9);
              operator delete(*v9);
            }
            BOOL v10 = v9 == v6;
            v9 -= 3;
          }
          while (!v10);
          unint64_t v8 = *v5;
        }
        *(void *)(a1 + 16) = v6;
        operator delete(v8);
        void *v5 = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
      }
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      void *v4 = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      long long v17 = (void **)(a1 + 32);
      uint64_t v16 = *(void ***)(a1 + 32);
      if (v16)
      {
        sub_C8ADA8(a1 + 32, v16);
        operator delete(*v17);
        *long long v17 = 0;
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
      }
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      long long v18 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
LABEL_26:
      *(_OWORD *)(a1 + 56) = v18;
      goto LABEL_27;
    }
    sub_CF8294(a1, a1 + 8, (void *)(a1 + 8), a2 + 8);
  }
  else
  {
    double v11 = (void *)(a1 + 8);
    uint64_t v12 = (void *)(a2 + 8);
    if (*(unsigned char *)a2)
    {
      uint64_t v13 = *(void *)(a1 + 24);
      if (v13)
      {
        uint64_t v14 = *(void *)(a1 + 32);
        uint64_t v15 = *(void **)(a1 + 24);
        if (v14 != v13)
        {
          do
          {
            if (*(char *)(v14 - 1) < 0) {
              operator delete(*(void **)(v14 - 24));
            }
            v14 -= 32;
          }
          while (v14 != v13);
          uint64_t v15 = *(void **)(a1 + 24);
        }
        *(void *)(a1 + 32) = v13;
        operator delete(v15);
      }
      void *v11 = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *uint64_t v12 = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      long long v18 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      goto LABEL_26;
    }
    *(_OWORD *)double v11 = *(_OWORD *)v12;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  }
LABEL_27:
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

uint64_t sub_D1ADB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  strcpy((char *)a2, "DrivingETAModule");
  *(unsigned char *)(a2 + 23) = 16;
  uint64_t v4 = (uint64_t *)(a2 + 24);
  char v14 = 1;
  int v13 = 0;
  unint64_t v5 = sub_CF8370((uint64_t *)(a2 + 24), "Runtime", &v14, (uint64_t *)a1, &v13);
  unint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = v5;
  char v12 = 4;
  if (v5 >= v6)
  {
    unint64_t v7 = sub_D1AFDC(v4, "SegmentsWithoutHSP", &v12, (uint64_t *)(a1 + 8));
  }
  else
  {
    sub_D1B1AC(a2 + 40, v5, "SegmentsWithoutHSP", &v12, (uint64_t *)(a1 + 8));
    unint64_t v7 = v5 + 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
  char v11 = 4;
  if (v7 >= *(void *)(a2 + 40))
  {
    unint64_t v8 = sub_D1B318(v4, "PathsWithoutLiveSpeedsCoverage", &v11, (uint64_t *)(a1 + 16));
  }
  else
  {
    sub_D1B4E8(a2 + 40, v7, "PathsWithoutLiveSpeedsCoverage", &v11, (uint64_t *)(a1 + 16));
    unint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v8;
  }
  *(void *)(a2 + 32) = v8;
  char v10 = 5;
  if (v8 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_D1B654(v4, "LiveSpeedsCoverage", &v10, (unsigned int *)(a1 + 24));
  }
  else
  {
    sub_D1B824(a2 + 40, v8, "LiveSpeedsCoverage", &v10, (unsigned int *)(a1 + 24));
    uint64_t result = v8 + 48;
    *(void *)(a2 + 32) = v8 + 48;
  }
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_D1AF6C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D1AF80(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D1AFC8(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1AFDC(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    char v11 = (char *)operator new(48 * v10);
  }
  else
  {
    char v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D1B1AC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  char v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    long long v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D1B198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D1B1AC(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D1B304(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1B318(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    char v11 = (char *)operator new(48 * v10);
  }
  else
  {
    char v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D1B4E8(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D1B4D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D1B4E8(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D1B640(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1B654(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    char v11 = (char *)operator new(48 * v10);
  }
  else
  {
    char v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D1B824(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D1B810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D1B824(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D1B97C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_D1B990(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "DrivingRouteSelectionModule");
  unsigned __int8 v15 = 1;
  unint64_t v5 = (unint64_t *)(a2 + 40);
  unint64_t v4 = *(void *)(a2 + 40);
  int v14 = 0;
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 >= v4)
  {
    unint64_t v7 = sub_CF8370((uint64_t *)(a2 + 24), "Runtime", (char *)&v15, (uint64_t *)a1, &v14);
  }
  else
  {
    sub_CF8548(a2 + 40, *(void *)(a2 + 32), "Runtime", (char *)&v15, (uint64_t *)a1, &v14);
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
  LOBYTE(v14) = 4;
  if (v7 >= *(void *)(a2 + 40))
  {
    unint64_t v8 = sub_C97BB8((uint64_t *)(a2 + 24), "LiveTrafficRoute", (char *)&v14, (unsigned int *)(a1 + 8));
  }
  else
  {
    sub_C97D88(a2 + 40, v7, "LiveTrafficRoute", (char *)&v14, (unsigned int *)(a1 + 8));
    unint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v8;
  }
  *(void *)(a2 + 32) = v8;
  LOBYTE(v14) = 4;
  if (v8 >= *(void *)(a2 + 40))
  {
    unint64_t v9 = sub_D1C8E8((uint64_t *)(a2 + 24), "Routes", (char *)&v14, (unsigned int *)(a1 + 12));
    *(void *)(a2 + 32) = v9;
    size_t v10 = (unsigned int *)(a1 + 16);
    if (!*(_DWORD *)(a1 + 16))
    {
LABEL_9:
      char v11 = (unsigned int *)(a1 + 20);
      if (!*(_DWORD *)(a1 + 20)) {
        goto LABEL_10;
      }
LABEL_20:
      unsigned __int8 v15 = 4;
      int v14 = 0;
      if (v9 >= *v5)
      {
        unint64_t v9 = sub_D1CF6C((uint64_t *)(a2 + 24), "ClosuresOnUserRoute", (char *)&v15, v11, &v14);
        *(void *)(a2 + 32) = v9;
        if (*(unsigned char *)(a1 + 24)) {
          goto LABEL_24;
        }
      }
      else
      {
        sub_D1D144(a2 + 40, v9, "ClosuresOnUserRoute", (char *)&v15, v11, &v14);
        v9 += 48;
        *(void *)(a2 + 32) = v9;
        *(void *)(a2 + 32) = v9;
        if (*(unsigned char *)(a1 + 24)) {
          goto LABEL_24;
        }
      }
LABEL_11:
      char v12 = (unsigned int *)(a1 + 28);
      if (!*(_DWORD *)(a1 + 28)) {
        goto LABEL_12;
      }
LABEL_28:
      LOBYTE(v14) = 4;
      if (v9 >= *v5)
      {
        unint64_t v9 = sub_D19090((uint64_t *)(a2 + 24), "NumSoftClosureDetours", (char *)&v14, v12);
        *(void *)(a2 + 32) = v9;
        if (*(unsigned char *)(a1 + 32)) {
          goto LABEL_32;
        }
      }
      else
      {
        sub_D19260(a2 + 40, v9, "NumSoftClosureDetours", (char *)&v14, v12);
        v9 += 48;
        *(void *)(a2 + 32) = v9;
        *(void *)(a2 + 32) = v9;
        if (*(unsigned char *)(a1 + 32)) {
          goto LABEL_32;
        }
      }
LABEL_13:
      if (!*(unsigned char *)(a1 + 33)) {
        return;
      }
      goto LABEL_36;
    }
  }
  else
  {
    sub_D1CAB8(a2 + 40, v8, "Routes", (char *)&v14, (unsigned int *)(a1 + 12));
    unint64_t v9 = v8 + 48;
    *(void *)(a2 + 32) = v9;
    *(void *)(a2 + 32) = v9;
    size_t v10 = (unsigned int *)(a1 + 16);
    if (!*(_DWORD *)(a1 + 16)) {
      goto LABEL_9;
    }
  }
  unsigned __int8 v15 = 4;
  int v14 = 0;
  if (v9 >= *v5)
  {
    unint64_t v9 = sub_D1CC24((uint64_t *)(a2 + 24), "ClosureReroutes", (char *)&v15, v10, &v14);
    *(void *)(a2 + 32) = v9;
    char v11 = (unsigned int *)(a1 + 20);
    if (*(_DWORD *)(a1 + 20)) {
      goto LABEL_20;
    }
  }
  else
  {
    sub_D1CDFC(a2 + 40, v9, "ClosureReroutes", (char *)&v15, v10, &v14);
    v9 += 48;
    *(void *)(a2 + 32) = v9;
    *(void *)(a2 + 32) = v9;
    char v11 = (unsigned int *)(a1 + 20);
    if (*(_DWORD *)(a1 + 20)) {
      goto LABEL_20;
    }
  }
LABEL_10:
  if (!*(unsigned char *)(a1 + 24)) {
    goto LABEL_11;
  }
LABEL_24:
  LOBYTE(v14) = 4;
  unsigned __int8 v15 = 1;
  if (v9 >= *v5)
  {
    unint64_t v9 = sub_D1D2B4((uint64_t *)(a2 + 24), "AllCandidatesSoftClosed", (char *)&v14, &v15);
    *(void *)(a2 + 32) = v9;
    char v12 = (unsigned int *)(a1 + 28);
    if (*(_DWORD *)(a1 + 28)) {
      goto LABEL_28;
    }
  }
  else
  {
    sub_D1D484(a2 + 40, v9, "AllCandidatesSoftClosed", (char *)&v14, &v15);
    v9 += 48;
    *(void *)(a2 + 32) = v9;
    *(void *)(a2 + 32) = v9;
    char v12 = (unsigned int *)(a1 + 28);
    if (*(_DWORD *)(a1 + 28)) {
      goto LABEL_28;
    }
  }
LABEL_12:
  if (!*(unsigned char *)(a1 + 32)) {
    goto LABEL_13;
  }
LABEL_32:
  LOBYTE(v14) = 4;
  unsigned __int8 v15 = 1;
  if (v9 >= *v5)
  {
    unint64_t v9 = sub_D1D5F0((uint64_t *)(a2 + 24), "NoDivergenceAtSoftClosure", (char *)&v14, &v15);
    *(void *)(a2 + 32) = v9;
    if (!*(unsigned char *)(a1 + 33)) {
      return;
    }
  }
  else
  {
    sub_D1D7C0(a2 + 40, v9, "NoDivergenceAtSoftClosure", (char *)&v14, &v15);
    v9 += 48;
    *(void *)(a2 + 32) = v9;
    *(void *)(a2 + 32) = v9;
    if (!*(unsigned char *)(a1 + 33)) {
      return;
    }
  }
LABEL_36:
  LOBYTE(v14) = 4;
  unsigned __int8 v15 = 1;
  if (v9 >= *v5)
  {
    uint64_t v13 = sub_D1D92C((uint64_t *)(a2 + 24), "WaitForClosureConfidenceGain", (char *)&v14, &v15);
  }
  else
  {
    sub_D1DAFC(a2 + 40, v9, "WaitForClosureConfidenceGain", (char *)&v14, &v15);
    uint64_t v13 = v9 + 48;
    *(void *)(a2 + 32) = v9 + 48;
  }
  *(void *)(a2 + 32) = v13;
}

void sub_D1BE38(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D1BE4C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D1BF24(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1BF38(uint64_t a1)
{
  sub_D1C804((void *)(a1 + 176));
  if (*(char *)(a1 + 127) < 0)
  {
    operator delete(*(void **)(a1 + 104));
    uint64_t v2 = *(void **)(a1 + 8);
    if (!v2) {
      return a1;
    }
  }
  else
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (!v2) {
      return a1;
    }
  }
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = v2;
  if ((void *)v4 != v2)
  {
    do
      uint64_t v4 = sub_3AFFFC(v4 - 1056);
    while ((void *)v4 != v2);
    unint64_t v5 = *(void **)(a1 + 8);
  }
  *(void *)(a1 + 16) = v2;
  operator delete(v5);
  return a1;
}

uint64_t sub_D1BFC4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(unsigned char *)a1 = sub_DB6E94(a2);
  int v18 = sub_DC68CC(a2);
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 4) = v18;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_3B168C(a1 + 8, *(void *)a7, *(void *)(a7 + 8), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 5));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a7 + 24);
  long long v19 = *(_OWORD *)(a7 + 40);
  long long v20 = *(_OWORD *)(a7 + 56);
  long long v21 = *(_OWORD *)(a7 + 72);
  *(void *)(a1 + 93) = *(void *)(a7 + 85);
  *(_OWORD *)(a1 + 80) = v21;
  *(_OWORD *)(a1 + 64) = v20;
  *(_OWORD *)(a1 + 48) = v19;
  uint64_t v22 = (unsigned char *)(a1 + 104);
  if (*(char *)(a7 + 119) < 0)
  {
    sub_4200(v22, *(void **)(a7 + 96), *(void *)(a7 + 104));
  }
  else
  {
    long long v23 = *(_OWORD *)(a7 + 96);
    *(void *)(a1 + 120) = *(void *)(a7 + 112);
    *(_OWORD *)uint64_t v22 = v23;
  }
  *(void *)(a1 + 128) = a9;
  *(void *)(a1 + 136) = a10;
  *(void *)(a1 + 144) = a4;
  *(void *)(a1 + 152) = a5;
  *(void *)(a1 + 160) = a6;
  *(_DWORD *)(a1 + 168) = sub_F3D73C(a2, a8, 1);
  sub_D1C1E0(a2, a8, a1 + 8, a3, *(void *)(a1 + 136), a9, a1 + 176);
  *(void *)(a1 + 416) = sub_DB6BEC(a2);
  *(_WORD *)(a1 + 424) = v24;
  *(unsigned char *)(a1 + 426) = v25;
  *(unsigned char *)(a1 + 427) = sub_DB71DC(a2);
  *(unsigned char *)(a1 + 428) = sub_401FE4(*(void *)(a1 + 184));
  uint64_t v26 = nullsub_1(a10);
  BOOL v27 = sub_45FB38((void *)(a1 + 8));
  if (*(unsigned char *)(v26 + 128)) {
    char v28 = v27;
  }
  else {
    char v28 = 1;
  }
  if ((v28 & 1) == 0 && (sub_491B10(v26) | 4) == 6) {
    sub_45FE2C(a1 + 8, 2);
  }
  return a1;
}

void sub_D1C188(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20AFEB4();
  }
  _Unwind_Resume(exception_object);
}

void sub_D1C1A8(_Unwind_Exception *a1)
{
  sub_D1C804(v2);
  sub_3C77C4(v1);
  _Unwind_Resume(a1);
}

void sub_D1C1E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  BOOL v14 = sub_DB6EEC(a1);
  unsigned int v15 = sub_DB7034(a1);
  uint64_t v41 = a7;
  char v40 = v14;
  if (*(unsigned char *)(nullsub_1(a5) + 128))
  {
    uint64_t v16 = nullsub_1(a5);
    if (!*(unsigned char *)(v16 + 128))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    char v17 = sub_491B20(v16);
  }
  else
  {
    char v17 = 0;
  }
  unint64_t v57 = sub_DB6BEC(a1);
  __int16 v58 = v18;
  char v59 = v19;
  int v20 = sub_DBB1D4(a1) >> 32;
  int v22 = v21;
  sub_DBBED8(a1, (uint64_t)v54);
  v52[0] = 0;
  v52[1] = 0;
  uint64_t v53 = 0;
  if (!v22)
  {
    uint64_t v23 = *a4;
    uint64_t v24 = a4[1];
    if (*a4 != v24)
    {
      while (!*(_DWORD *)(v23 + 104))
      {
        v23 += 376;
        if (v23 == v24) {
          goto LABEL_12;
        }
      }
    }
    if (v23 == v24)
    {
LABEL_12:
      v42[0] = 0;
      v42[1] = 0;
      unint64_t v43 = 0;
    }
    else
    {
      *(_OWORD *)__int16 v42 = *(_OWORD *)(v23 + 216);
      unint64_t v43 = *(char ***)(v23 + 232);
    }
    HIBYTE(v51) = 15;
    strcpy((char *)v50, "RerouteCategory");
    memset(__p, 0, 24);
    char v25 = sub_374CDC(a6, (uint64_t)v50, (uint64_t *)__p);
    sub_484AC4((double *)&v45, v25);
    int v26 = sub_484B5C((uint64_t)v54, (double *)&v45);
    BOOL v27 = (void **)__p[0];
    if (__p[0])
    {
      char v28 = (void **)__p[1];
      size_t v29 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v28 - 1) < 0) {
            operator delete(*(v28 - 3));
          }
          v28 -= 3;
        }
        while (v28 != v27);
        size_t v29 = __p[0];
      }
      __p[1] = v27;
      operator delete(v29);
    }
    if (SHIBYTE(v51) < 0) {
      operator delete(v50[0]);
    }
    strcpy((char *)__p, "FilteredRerouteHistory");
    HIBYTE(__p[2]) = 22;
    unint64_t v45 = 0;
    unint64_t v46 = 0;
    uint64_t v47 = 0;
    unint64_t v30 = sub_374CDC(a6, (uint64_t)__p, (uint64_t *)&v45);
    sub_4844F0(v48, v30);
    sub_4844F4(a5, (unsigned __int8 *)v42, (uint64_t *)v54, v20, v15, v26, (uint64_t)v48, (uint64_t)v50);
    uint64_t v31 = (void **)v45;
    *(_OWORD *)unint64_t v52 = *(_OWORD *)v50;
    uint64_t v53 = v51;
    v50[1] = 0;
    uint64_t v51 = 0;
    v50[0] = 0;
    if (v45)
    {
      uint64_t v32 = v46;
      uint64_t v33 = v45;
      if (v46 != v45)
      {
        do
        {
          if (*((char *)v32 - 1) < 0) {
            operator delete(*(v32 - 3));
          }
          v32 -= 3;
        }
        while (v32 != v31);
        uint64_t v33 = v45;
      }
      unint64_t v46 = v31;
      operator delete(v33);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_485C30(a5, (uint64_t)v42);
  __int16 v34 = (uint64_t *)sub_487A58(a5);
  int v35 = (long long *)sub_487740(a5);
  sub_D1C608(v41, a3, a2, v40, v15, v17, (uint64_t *)&v57, (uint64_t)v52, v54, (uint64_t)v42, v34, v35);
  unint64_t v36 = (char **)v42[1];
  if (v42[1])
  {
    std::string::size_type v37 = v43;
    unint64_t v38 = v42[1];
    if (v43 != v42[1])
    {
      do
      {
        v37 -= 9;
        sub_3A688C((uint64_t)&v44, v37);
      }
      while (v37 != v36);
      unint64_t v38 = v42[1];
    }
    unint64_t v43 = v36;
    operator delete(v38);
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (v55)
  {
    BOOL v56 = v55;
    operator delete(v55);
  }
}

void sub_D1C594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51)
{
  if (__p) {
    operator delete(__p);
  }
  if (a50) {
    operator delete(a50);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D1C608(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6, uint64_t *a7, uint64_t a8, long long *a9, uint64_t a10, uint64_t *a11, long long *a12)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(unsigned char *)(a1 + 16) = a4;
  *(unsigned char *)(a1 + 17) = a5;
  *(unsigned char *)(a1 + 18) = a6;
  uint64_t v13 = *a7;
  int v14 = *(_DWORD *)((char *)a7 + 7);
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 26) = v14;
  *(void *)(a1 + 19) = v13;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v16 = *(const void **)a8;
  uint64_t v15 = *(void *)(a8 + 8);
  int64_t v17 = v15 - *(void *)a8;
  if (v15 != *(void *)a8)
  {
    if (v17 < 0) {
      sub_2E00();
    }
    __int16 v18 = (char *)operator new(v15 - *(void *)a8);
    *(void *)(a1 + 32) = v18;
    *(void *)(a1 + 40) = v18;
    char v19 = &v18[16 * (v17 >> 4)];
    *(void *)(a1 + 48) = v19;
    memcpy(v18, v16, v17);
    *(void *)(a1 + 40) = v19;
  }
  long long v20 = a9[2];
  long long v21 = a9[3];
  int v22 = *(_DWORD *)((char *)a9 + 63);
  long long v24 = *a9;
  long long v23 = a9[1];
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 56) = v24;
  *(_DWORD *)(a1 + 119) = v22;
  *(_OWORD *)(a1 + 104) = v21;
  *(_OWORD *)(a1 + 88) = v20;
  *(_OWORD *)(a1 + 72) = v23;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  int v26 = (unsigned char *)*((void *)a9 + 9);
  char v25 = (unsigned char *)*((void *)a9 + 10);
  int64_t v27 = v25 - v26;
  if (v25 != v26)
  {
    if (v27 < 0) {
      sub_2E00();
    }
    char v28 = (char *)operator new(v25 - v26);
    *(void *)(a1 + 128) = v28;
    *(void *)(a1 + 136) = v28;
    size_t v29 = &v28[4 * (v27 >> 2)];
    *(void *)(a1 + 144) = v29;
    memcpy(v28, v26, v27);
    *(void *)(a1 + 136) = v29;
  }
  int v30 = *((_DWORD *)a9 + 24);
  *(unsigned char *)(a1 + 156) = *((unsigned char *)a9 + 100);
  *(_DWORD *)(a1 + 152) = v30;
  *(_DWORD *)(a1 + 160) = *(_DWORD *)a10;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  sub_CBE4DC(a1 + 168, *(void *)(a10 + 8), *(void *)(a10 + 16), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a10 + 16) - *(void *)(a10 + 8)) >> 3));
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  sub_489B48((char **)(a1 + 192), *a11, a11[1], 0xCCCCCCCCCCCCCCCDLL * ((a11[1] - *a11) >> 4));
  long long v31 = *a12;
  *(void *)(a1 + 232) = *((void *)a12 + 2);
  *(_OWORD *)(a1 + 216) = v31;
  return a1;
}

void sub_D1C7B8(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  sub_485FC0(v5);
  unint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 136) = v7;
    operator delete(v7);
  }
  unint64_t v8 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void *sub_D1C804(void *a1)
{
  uint64_t v2 = a1[24];
  if (v2)
  {
    uint64_t v3 = a1[25];
    uint64_t v4 = (void *)a1[24];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void **)(v3 - 48);
        if (v5)
        {
          *(void *)(v3 - 40) = v5;
          operator delete(v5);
        }
        if (*(char *)(v3 - 57) < 0) {
          operator delete(*(void **)(v3 - 80));
        }
        v3 -= 80;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[24];
    }
    a1[25] = v2;
    operator delete(v4);
  }
  unint64_t v6 = (char **)a1[21];
  if (v6)
  {
    unint64_t v7 = (char **)a1[22];
    unint64_t v8 = (void *)a1[21];
    if (v7 != v6)
    {
      do
      {
        v7 -= 9;
        sub_3A688C((uint64_t)(a1 + 23), v7);
      }
      while (v7 != v6);
      unint64_t v8 = (void *)a1[21];
    }
    a1[22] = v6;
    operator delete(v8);
  }
  unint64_t v9 = (void *)a1[16];
  if (v9)
  {
    a1[17] = v9;
    operator delete(v9);
  }
  size_t v10 = (void *)a1[4];
  if (v10)
  {
    a1[5] = v10;
    operator delete(v10);
  }
  return a1;
}

uint64_t sub_D1C8E8(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    char v11 = (char *)operator new(48 * v10);
  }
  else
  {
    char v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  long long v21 = &v11[48 * v10];
  sub_D1CAB8(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  int v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    __int16 v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D1CAA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D1CAB8(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D1CC10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1CC24(uint64_t *a1, char *a2, char *a3, unsigned int *a4, int *a5)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v7;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v22 = (uint64_t)&v13[48 * v6];
  long long v23 = &v13[48 * v12];
  sub_D1CDFC(a1 + 16, v22, a2, a3, a4, a5);
  uint64_t v14 = v22;
  uint64_t v15 = v22 + 48;
  long long v16 = (char *)*a1;
  long long v17 = (char *)a1[1];
  if (v17 == (char *)*a1)
  {
    *a1 = v22;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
  }
  else
  {
    do
    {
      long long v18 = *((_OWORD *)v17 - 3);
      *(void *)(v14 - 32) = *((void *)v17 - 4);
      *(_OWORD *)(v14 - 48) = v18;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 6) = 0;
      long long v19 = *(_OWORD *)(v17 - 24);
      *(_DWORD *)(v14 - 8) = *((_DWORD *)v17 - 2);
      *(_OWORD *)(v14 - 24) = v19;
      v14 -= 48;
      v17 -= 48;
    }
    while (v17 != v16);
    uint64_t v20 = (char *)*a1;
    long long v17 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
    if (v17 != v20)
    {
      do
      {
        if (*(v17 - 25) < 0) {
          operator delete(*((void **)v17 - 6));
        }
        v17 -= 48;
      }
      while (v17 != v20);
      long long v17 = v20;
    }
  }
  if (v17) {
    operator delete(v17);
  }
  return v22 + 48;
}

void sub_D1CDE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D1CDFC(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5, int *a6)
{
  size_t v11 = strlen(__s);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v17 = v11 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v12;
    unint64_t v21 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v12);
    *((unsigned char *)p_dst + v12) = 0;
    char v14 = *a4;
    uint64_t v15 = *a5;
    int v16 = *a6;
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v21) = v11;
  p_dst = &__dst;
  if (v11) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v14 = *a4;
  uint64_t v15 = *a5;
  int v16 = *a6;
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v21;
    *(unsigned char *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v15;
    *(_DWORD *)(a2 + 40) = v16;
    return;
  }
LABEL_10:
  long long v19 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v15;
  *(_DWORD *)(a2 + 40) = v16;

  operator delete(v19);
}

void sub_D1CF58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1CF6C(uint64_t *a1, char *a2, char *a3, unsigned int *a4, int *a5)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v7;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v22 = (uint64_t)&v13[48 * v6];
  long long v23 = &v13[48 * v12];
  sub_D1D144(a1 + 16, v22, a2, a3, a4, a5);
  uint64_t v14 = v22;
  uint64_t v15 = v22 + 48;
  int v16 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  if (v17 == (char *)*a1)
  {
    *a1 = v22;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
  }
  else
  {
    do
    {
      long long v18 = *((_OWORD *)v17 - 3);
      *(void *)(v14 - 32) = *((void *)v17 - 4);
      *(_OWORD *)(v14 - 48) = v18;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 6) = 0;
      long long v19 = *(_OWORD *)(v17 - 24);
      *(_DWORD *)(v14 - 8) = *((_DWORD *)v17 - 2);
      *(_OWORD *)(v14 - 24) = v19;
      v14 -= 48;
      v17 -= 48;
    }
    while (v17 != v16);
    uint64_t v20 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
    if (v17 != v20)
    {
      do
      {
        if (*(v17 - 25) < 0) {
          operator delete(*((void **)v17 - 6));
        }
        v17 -= 48;
      }
      while (v17 != v20);
      uint64_t v17 = v20;
    }
  }
  if (v17) {
    operator delete(v17);
  }
  return v22 + 48;
}

void sub_D1D130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D1D144(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5, int *a6)
{
  size_t v11 = strlen(__s);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v17 = v11 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (long long *)operator new(v17 + 1);
    *((void *)&__dst + 1) = v12;
    unint64_t v21 = v18 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v12);
    *((unsigned char *)p_dst + v12) = 0;
    char v14 = *a4;
    uint64_t v15 = *a5;
    int v16 = *a6;
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v21) = v11;
  p_dst = &__dst;
  if (v11) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v14 = *a4;
  uint64_t v15 = *a5;
  int v16 = *a6;
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v21;
    *(unsigned char *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v15;
    *(_DWORD *)(a2 + 40) = v16;
    return;
  }
LABEL_10:
  long long v19 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v15;
  *(_DWORD *)(a2 + 40) = v16;

  operator delete(v19);
}

void sub_D1D2A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1D2B4(uint64_t *a1, char *a2, char *a3, unsigned __int8 *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    size_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    size_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D1D484(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  char v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D1D470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D1D484(int a1, uint64_t a2, char *__s, char *a4, unsigned __int8 *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D1D5DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1D5F0(uint64_t *a1, char *a2, char *a3, unsigned __int8 *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    size_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    size_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D1D7C0(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D1D7AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D1D7C0(int a1, uint64_t a2, char *__s, char *a4, unsigned __int8 *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D1D918(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1D92C(uint64_t *a1, char *a2, char *a3, unsigned __int8 *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    size_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    size_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D1DAFC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D1DAE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D1DAFC(int a1, uint64_t a2, char *__s, char *a4, unsigned __int8 *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D1DC54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1DC68(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_CF216C(a1, *a3, a3[1], 0x51B3BEA3677D46CFLL * ((a3[1] - *a3) >> 3));
  sub_DB54FC(a2, a6, a1 + 24);
  *(unsigned char *)(a1 + 1560) = 0;
  *(void *)(a1 + 1568) = a4;
  *(void *)(a1 + 1576) = a5;
  *(void *)(a1 + 1584) = a6;
  *(void *)(a1 + 1592) = 0;
  *(void *)(a1 + 1608) = 0;
  *(void *)(a1 + 1600) = 0;
  uint64_t v17 = *a9;
  uint64_t v18 = a9[1];
  uint64_t v19 = v18 - *a9;
  if (v18 != *a9)
  {
    if (v19 < 0) {
      sub_2E00();
    }
    uint64_t v20 = (char *)operator new(v18 - *a9);
    uint64_t v21 = 0;
    *(void *)(a1 + 1592) = v20;
    *(void *)(a1 + 1600) = v20;
    *(void *)(a1 + 1608) = &v20[32 * (v19 >> 5)];
    do
    {
      uint64_t v22 = v17 + v21;
      long long v23 = &v20[v21];
      unsigned int v24 = *(_DWORD *)(v17 + v21 + 16);
      *(_DWORD *)&v20[v21 + 16] = v24;
      if (v24 <= 1) {
        *(_OWORD *)long long v23 = *(_OWORD *)v22;
      }
      v23[24] = *(unsigned char *)(v22 + 24);
      v21 += 32;
    }
    while (v17 + v21 != v18);
    *(void *)(a1 + 1600) = &v20[v21];
  }
  *(void *)(a1 + 1632) = 0;
  *(_OWORD *)(a1 + 1616) = 0u;
  int v26 = *(const void **)a10;
  uint64_t v25 = *(void *)(a10 + 8);
  int64_t v27 = v25 - *(void *)a10;
  if (v25 != *(void *)a10)
  {
    if (0x86BCA1AF286BCA1BLL * (v27 >> 3) >= 0x1AF286BCA1AF287) {
      sub_2E00();
    }
    char v28 = (char *)operator new(v27);
    *(void *)(a1 + 1616) = v28;
    *(void *)(a1 + 1624) = v28;
    size_t v29 = &v28[8 * (v27 >> 3)];
    *(void *)(a1 + 1632) = v29;
    memcpy(v28, v26, v27);
    *(void *)(a1 + 1624) = v29;
  }
  *(unsigned char *)(a1 + 1648) = 1;
  *(void *)(a1 + 1640) = a8;
  if (a7)
  {
    uint64_t v30 = *(void *)(a1 + 1128);
    long long v31 = (char *)(v30 + 4);
    uint64_t v32 = (unsigned char *)(v30 + 8);
    uint64_t v33 = *(unsigned char **)(a1 + 1136);
    int64_t v34 = v33 - v32;
    if (v33 != v32) {
      memmove(v31, v32, v33 - v32);
    }
    *(void *)(a1 + 1136) = &v31[v34];
    sub_CFA46C((void *)(a1 + 1176), *(void *)(a1 + 1176), 1u, (uint64_t)v36);
    sub_CFA46C((void *)(a1 + 1152), *(void *)(a1 + 1152), 1u, (uint64_t)v36);
  }
  return a1;
}

void sub_D1DEA0(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 1648)) {
    *(unsigned char *)(v1 + 1648) = 0;
  }
  unint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 1624) = v6;
    operator delete(v6);
  }
  unint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 1600) = v7;
    operator delete(v7);
  }
  sub_4BCED0(v2);
  sub_401F88((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1DF0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, char a12, uint64_t a13, uint64_t **a14)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  *(void *)(a1 + 40) = a7;
  *(void *)(a1 + 48) = a8;
  *(void *)(a1 + 56) = a9;
  *(void *)(a1 + 64) = a10;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_4445E8(a1 + 72, *a11, a11[1], 0xCCCCCCCCCCCCCCCDLL * ((a11[1] - *a11) >> 5));
  *(unsigned char *)(a1 + 96) = a12;
  *(unsigned char *)(a1 + 97) = sub_401FE4(a4);
  sub_485C30(a13, a1 + 104);
  *(void *)(a1 + 136) = a13;
  *(void *)(a1 + 144) = sub_4877D8(a13);
  *(void *)(a1 + 152) = v16;
  sub_DBBED8(*(void *)(a1 + 16), a1 + 160);
  uint64_t v17 = *a14;
  uint64_t v18 = a14[1];
  if (*a14 != v18)
  {
    while (*((_DWORD *)v17 + 26) != 1)
    {
      v17 += 47;
      if (v17 == v18) {
        goto LABEL_6;
      }
    }
  }
  if (v17 == v18)
  {
LABEL_6:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7190))
    {
      sub_737C74((uint64_t)&qword_24F7018);
      __cxa_guard_release(&qword_24F7190);
    }
    uint64_t v17 = &qword_24F7018;
  }
  sub_48381C(a1 + 264, (uint64_t)v17);
  return a1;
}

void sub_D1E048(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_24F7190);
  unint64_t v5 = *(void **)(v2 + 232);
  if (v5)
  {
    *(void *)(v2 + 240) = v5;
    operator delete(v5);
  }
  sub_485FC0(v3);
  sub_C7E6AC(v1);
  _Unwind_Resume(a1);
}

void sub_D1E090(_Unwind_Exception *a1)
{
  sub_C7E6AC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1E0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, _OWORD *a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t a12)
{
  unint64_t v64 = 0;
  unint64_t v65 = 0;
  unint64_t v63 = 0;
  uint64_t v19 = *(const void **)a7;
  uint64_t v18 = *(void *)(a7 + 8);
  int64_t v20 = v18 - *(void *)a7;
  if (v18 != *(void *)a7)
  {
    if (v20 < 0) {
      sub_2E00();
    }
    uint64_t v21 = (char *)operator new(v18 - *(void *)a7);
    uint64_t v22 = &v21[8 * (v20 >> 3)];
    unint64_t v63 = v21;
    unint64_t v65 = v22;
    memcpy(v21, v19, v20);
    unint64_t v64 = v22;
  }
  uint64_t v62 = *a8;
  long long v23 = (long long *)sub_377D04(a5);
  char v74 = 1;
  sub_29E004((char *)__dst, v23);
  sub_DC000C(a2, (uint64_t)__dst, (uint64_t)&v53);
  uint64_t v24 = sub_37B3A8(a5);
  uint64_t v25 = *(void *)v24;
  int v26 = *(_DWORD *)(v24 + 8);
  sub_598C04((uint64_t)v66, a9);
  memset(v67, 0, sizeof(v67));
  sub_510340((uint64_t)v67, a9[136], a9[137], 0xAF8AF8AF8AF8AF8BLL * ((a9[137] - a9[136]) >> 5));
  char v27 = sub_DB7034(a2);
  char v28 = sub_D1E50C(a2, a4, a3, a5);
  sub_DBBB30(a2, (uint64_t)&v52);
  uint64_t v49 = 0;
  uint64_t v50 = sub_DBC410(a2);
  int v51 = v29;
  uint64_t v47 = 0;
  unint64_t v48 = 0;
  sub_8A6F8((char *)&v47, *a10, a10[1], 0xAAAAAAAAAAAAAAABLL * ((a10[1] - *a10) >> 3));
  uint64_t v46 = *a11;
  char v30 = sub_DB7530(a2);
  sub_54214((uint64_t)__p, a12);
  uint64_t v31 = sub_DC6EB0(a2);
  sub_D1E678(a1, a3, (uint64_t **)a4, a5, a6, (uint64_t)&v63, &v62, &v53, v25, v26, (uint64_t)v66, v27, v28, &v52, &v50, (uint64_t)&v47, &v46, v30, (uint64_t *)__p,
    v31);
  uint64_t v32 = v45;
  if (v45)
  {
    do
    {
      std::string::size_type v37 = *(char **)v32;
      sub_57AC8((uint64_t *)v32 + 5);
      if (v32[39] < 0) {
        operator delete(*((void **)v32 + 2));
      }
      operator delete(v32);
      uint64_t v32 = v37;
    }
    while (v37);
  }
  uint64_t v33 = __p[0];
  __p[0] = 0;
  if (v33) {
    operator delete(v33);
  }
  int64_t v34 = (void **)v47;
  if (v47)
  {
    int v35 = v48;
    unint64_t v36 = v47;
    if (v48 != v47)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      unint64_t v36 = v47;
    }
    unint64_t v48 = v34;
    operator delete(v36);
  }
  unint64_t v38 = v67[0];
  if (v67[0])
  {
    std::string::size_type v39 = v67[1];
    char v40 = v67[0];
    if (v67[1] != v67[0])
    {
      do
        std::string::size_type v39 = (void *)sub_3A6B94((uint64_t)v39 - 1120);
      while (v39 != v38);
      char v40 = v67[0];
    }
    v67[1] = v38;
    operator delete(v40);
  }
  sub_4F2BD0(v66);
  if (v61 < 0) {
    operator delete(v60);
  }
  if (v58)
  {
    char v59 = v58;
    operator delete(v58);
  }
  if (v56)
  {
    unint64_t v57 = v56;
    operator delete(v56);
  }
  if (v54)
  {
    uint64_t v55 = v54;
    operator delete(v54);
  }
  if (v74)
  {
    if (v73 < 0)
    {
      operator delete(v72);
      if ((v71 & 0x80000000) == 0)
      {
LABEL_34:
        if ((v69 & 0x80000000) == 0) {
          goto LABEL_35;
        }
LABEL_40:
        operator delete(__dst[0]);
        uint64_t v41 = (char *)v63;
        if (!v63) {
          return a1;
        }
        goto LABEL_36;
      }
    }
    else if ((v71 & 0x80000000) == 0)
    {
      goto LABEL_34;
    }
    operator delete(v70);
    if (v69 < 0) {
      goto LABEL_40;
    }
  }
LABEL_35:
  uint64_t v41 = (char *)v63;
  if (v63)
  {
LABEL_36:
    unint64_t v64 = v41;
    operator delete(v41);
  }
  return a1;
}

void sub_D1E478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,void *a60)
{
  sub_4F2BD0(&a60);
  sub_CF1EE4((uint64_t)&a34);
  sub_CF1F54(v60 - 176);
  if (__p)
  {
    a58 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D1E50C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = sub_DB7034(a1);
  if (!sub_DE7FB0(v7)) {
    return 0;
  }
  uint64_t v8 = *a2;
  if (*a2 == a2[1]) {
    return 0;
  }
  size_t v9 = *(void **)a3;
  if (*(void *)a3 == *(void *)(a3 + 8)) {
    return 0;
  }
  char v20 = 15;
  uint64_t v18 = 0;
  strcpy((char *)v19, "RerouteCategory");
  std::string __p = 0;
  uint64_t v17 = 0;
  size_t v10 = sub_374CDC(a4, (uint64_t)v19, (uint64_t *)&__p);
  sub_484AC4(&v21, v10);
  uint64_t v11 = sub_4849B8(v8, v9, &v21);
  char v12 = (void **)__p;
  if (__p)
  {
    uint64_t v13 = v17;
    uint64_t v14 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v13 - 1) < 0) {
          operator delete(*(v13 - 3));
        }
        v13 -= 3;
      }
      while (v13 != v12);
      uint64_t v14 = __p;
    }
    uint64_t v17 = v12;
    operator delete(v14);
  }
  if ((v20 & 0x80000000) == 0) {
    return v11;
  }
  operator delete(v19[0]);
  return v11;
}

void sub_D1E654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D1E678(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, _OWORD *a5, uint64_t a6, void *a7, int *a8, uint64_t a9, int a10, uint64_t a11, char a12, char a13, void *a14, uint64_t *a15, uint64_t a16, void *a17, char a18, uint64_t *a19, uint64_t a20)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a6;
  *(void *)(a1 + 24) = *(void *)(a6 + 16);
  *(void *)(a6 + 16) = 0;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v26 = a1 + 32;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a11;
  *(void *)(a1 + 48) = *(void *)(a11 + 16);
  *(void *)(a11 + 16) = 0;
  *(_OWORD *)a11 = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a11 + 24);
  *(void *)(a1 + 72) = *(void *)(a11 + 40);
  *(void *)(a11 + 40) = 0;
  *(_OWORD *)(a11 + 24) = 0u;
  sub_4F4498(a1 + 80, a11 + 48);
  sub_4F4498(v26 + 544, a11 + 544);
  *(void *)(v26 + 1056) = 0;
  *(_OWORD *)(v26 + 1040) = 0u;
  *(_OWORD *)(v26 + 1040) = *(_OWORD *)(a11 + 1040);
  *(void *)(v26 + 1056) = *(void *)(a11 + 1056);
  *(void *)(a11 + 1056) = 0;
  *(_OWORD *)(a11 + 1040) = 0u;
  *(void *)(v26 + 1080) = 0;
  *(_OWORD *)(v26 + 1064) = 0u;
  *(void *)(v26 + 1064) = *(void *)(a11 + 1064);
  *(void *)(v26 + 1072) = *(void *)(a11 + 1072);
  *(void *)(v26 + 1080) = *(void *)(a11 + 1080);
  *(void *)(a11 + 1080) = 0;
  *(_OWORD *)(a11 + 1064) = 0u;
  *(void *)(v26 + 1104) = 0;
  *(_OWORD *)(v26 + 1088) = 0u;
  *(_OWORD *)(v26 + 1088) = *(_OWORD *)(a11 + 1088);
  *(void *)(v26 + 1104) = *(void *)(a11 + 1104);
  *(void *)(a11 + 1104) = 0;
  *(_OWORD *)(a11 + 1088) = 0u;
  int v27 = *a8;
  *(unsigned char *)(v26 + 1116) = *((unsigned char *)a8 + 4);
  *(_DWORD *)(v26 + 1112) = v27;
  *(void *)(v26 + 1120) = 0;
  *(void *)(v26 + 1136) = 0;
  *(void *)(v26 + 1128) = 0;
  *(_OWORD *)(v26 + 1120) = *(_OWORD *)(a8 + 2);
  *(void *)(v26 + 1136) = *((void *)a8 + 3);
  *((void *)a8 + 1) = 0;
  *((void *)a8 + 2) = 0;
  *((void *)a8 + 3) = 0;
  long long v28 = *((_OWORD *)a8 + 3);
  *(_OWORD *)(v26 + 1144) = *((_OWORD *)a8 + 2);
  *(_OWORD *)(v26 + 1160) = v28;
  *(_DWORD *)(v26 + 1176) = a8[16];
  *(void *)(v26 + 1184) = 0;
  *(void *)(v26 + 1200) = 0;
  *(void *)(v26 + 1192) = 0;
  *(_OWORD *)(v26 + 1184) = *(_OWORD *)(a8 + 18);
  *(void *)(v26 + 1200) = *((void *)a8 + 11);
  *((void *)a8 + 10) = 0;
  *((void *)a8 + 11) = 0;
  *((void *)a8 + 9) = 0;
  *(_DWORD *)(v26 + 1208) = a8[24];
  *(void *)(v26 + 1216) = 0;
  *(void *)(v26 + 1232) = 0;
  *(void *)(v26 + 1224) = 0;
  *(_OWORD *)(v26 + 1216) = *(_OWORD *)(a8 + 26);
  *(void *)(v26 + 1232) = *((void *)a8 + 15);
  *((void *)a8 + 13) = 0;
  *((void *)a8 + 14) = 0;
  *((void *)a8 + 15) = 0;
  long long v29 = *((_OWORD *)a8 + 8);
  *(void *)(v26 + 1256) = *((void *)a8 + 18);
  *(_OWORD *)(v26 + 1240) = v29;
  *((void *)a8 + 17) = 0;
  *((void *)a8 + 18) = 0;
  *((void *)a8 + 16) = 0;
  *(unsigned char *)(v26 + 1264) = *((unsigned char *)a8 + 152);
  uint64_t v30 = *((void *)a8 + 20);
  *(unsigned char *)(v26 + 1280) = *((unsigned char *)a8 + 168);
  *(void *)(v26 + 1272) = v30;
  *(void *)(v26 + 1288) = a4;
  uint64_t v31 = *a3;
  uint64_t v32 = a3[1];
  if (*a3 != v32)
  {
    while (*((_DWORD *)v31 + 26))
    {
      v31 += 47;
      if (v31 == v32) {
        goto LABEL_6;
      }
    }
  }
  if (v31 == v32)
  {
LABEL_6:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7190))
    {
      sub_737C74((uint64_t)&qword_24F7018);
      __cxa_guard_release(&qword_24F7190);
    }
    uint64_t v31 = &qword_24F7018;
  }
  sub_48381C(v26 + 1296, (uint64_t)v31);
  uint64_t v33 = *a3;
  int64_t v34 = a3[1];
  if (*a3 != v34)
  {
    while (*((_DWORD *)v33 + 26) != 1)
    {
      v33 += 47;
      if (v33 == v34) {
        goto LABEL_13;
      }
    }
  }
  if (v33 == v34)
  {
LABEL_13:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7190, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7190))
    {
      sub_737C74((uint64_t)&qword_24F7018);
      __cxa_guard_release(&qword_24F7190);
    }
    uint64_t v33 = &qword_24F7018;
  }
  sub_48381C(a1 + 1704, (uint64_t)v33);
  *(void *)(a1 + 2080) = *a7;
  *(void *)(a1 + 2088) = a3;
  *(void *)(a1 + 2096) = a9;
  *(_DWORD *)(a1 + 2104) = a10;
  *(unsigned char *)(a1 + 2108) = a12;
  *(unsigned char *)(a1 + 2109) = a13;
  *(void *)(a1 + 2112) = *a14;
  uint64_t v35 = *a15;
  *(_DWORD *)(a1 + 2128) = *((_DWORD *)a15 + 2);
  *(void *)(a1 + 2120) = v35;
  *(void *)(a1 + 2136) = 0;
  *(void *)(a1 + 2152) = 0;
  *(void *)(a1 + 2144) = 0;
  *(_OWORD *)(a1 + 2136) = *(_OWORD *)a16;
  *(void *)(a1 + 2152) = *(void *)(a16 + 16);
  *(void *)a16 = 0;
  *(void *)(a16 + 8) = 0;
  *(void *)(a16 + 16) = 0;
  *(void *)(a1 + 2160) = *a17;
  *(_OWORD *)(a1 + 2168) = *a5;
  *(unsigned char *)(a1 + 2184) = a18;
  uint64_t v36 = *a19;
  *a19 = 0;
  *(void *)(a1 + 2192) = v36;
  *(void *)(a1 + 2200) = a19[1];
  a19[1] = 0;
  uint64_t v37 = a19[2];
  *(void *)(a1 + 2208) = v37;
  uint64_t v38 = a19[3];
  *(void *)(a1 + 2216) = v38;
  *(_DWORD *)(a1 + 2224) = *((_DWORD *)a19 + 8);
  if (v38)
  {
    unint64_t v39 = *(void *)(v37 + 8);
    unint64_t v40 = *(void *)(a1 + 2200);
    if ((v40 & (v40 - 1)) != 0)
    {
      if (v39 >= v40) {
        v39 %= v40;
      }
    }
    else
    {
      v39 &= v40 - 1;
    }
    *(void *)(v36 + 8 * v39) = a1 + 2208;
    a19[2] = 0;
    a19[3] = 0;
  }
  *(void *)(a1 + 2232) = a20;
  return a1;
}

void sub_D1EA94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_24F7190);
  sub_402C7C(v4);
  sub_CF1EE4(v3);
  sub_C940D0(v2);
  unsigned int v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D1EAF8(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 2208);
  if (v2)
  {
    do
    {
      unsigned int v7 = *(char **)v2;
      sub_57AC8((uint64_t *)v2 + 5);
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  uint64_t v3 = *(void **)(a1 + 2192);
  *(void *)(a1 + 2192) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void *)(a1 + 2136);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 2144);
    unint64_t v6 = *(void **)(a1 + 2136);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0) {
          operator delete(*(void **)(v5 - 24));
        }
        v5 -= 24;
      }
      while (v5 != v4);
      unint64_t v6 = *(void **)(a1 + 2136);
    }
    *(void *)(a1 + 2144) = v4;
    operator delete(v6);
  }
  sub_402C7C(a1 + 1704);
  sub_402C7C(a1 + 1328);
  if ((*(char *)(a1 + 1295) & 0x80000000) == 0)
  {
    uint64_t v8 = *(void **)(a1 + 1248);
    if (!v8) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  operator delete(*(void **)(a1 + 1272));
  uint64_t v8 = *(void **)(a1 + 1248);
  if (v8)
  {
LABEL_17:
    *(void *)(a1 + 1256) = v8;
    operator delete(v8);
  }
LABEL_18:
  size_t v9 = *(void **)(a1 + 1216);
  if (v9)
  {
    *(void *)(a1 + 1224) = v9;
    operator delete(v9);
  }
  size_t v10 = *(void **)(a1 + 1152);
  if (v10)
  {
    *(void *)(a1 + 1160) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void *)(a1 + 1120);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 1128);
    uint64_t v13 = *(void **)(a1 + 1120);
    if (v12 != v11)
    {
      do
        uint64_t v12 = sub_3A6B94(v12 - 1120);
      while (v12 != v11);
      uint64_t v13 = *(void **)(a1 + 1120);
    }
    *(void *)(a1 + 1128) = v11;
    operator delete(v13);
  }
  sub_4F2BD0((void **)(a1 + 32));
  uint64_t v14 = *(void **)(a1 + 8);
  if (v14)
  {
    *(void *)(a1 + 16) = v14;
    operator delete(v14);
  }
  return a1;
}

double sub_D1EC64()
{
  byte_25E63D7 = 1;
  word_25E63C0 = 65;
  byte_25E63EF = 1;
  word_25E63D8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E6480 = 0u;
  *(_OWORD *)&qword_25E6490 = 0u;
  dword_25E64A0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E6480, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E6480, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E6480, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E6480, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E6407 = 8;
  strcpy((char *)&qword_25E63F0, "any_mode");
  byte_25E641F = 7;
  strcpy((char *)&dword_25E6408, "cycling");
  byte_25E6437 = 7;
  strcpy((char *)&dword_25E6420, "driving");
  byte_25E644F = 7;
  strcpy((char *)&dword_25E6438, "walking");
  qword_25E6458 = 0;
  qword_25E6460 = 0;
  qword_25E6450 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E6450 = (uint64_t)v0;
  qword_25E6458 = (uint64_t)(v0 + 9);
  qword_25E6460 = (uint64_t)(v0 + 9);
  qword_25E6468 = 0;
  qword_25E6470 = 0;
  unk_25E6478 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E6470 = (uint64_t)(v1 + 9);
  unk_25E6478 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E6468 = (uint64_t)v1;
  return result;
}

void sub_D1EF2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E6490) {
    sub_20AFF1C((void **)qword_25E6490);
  }
  uint64_t v37 = (void *)xmmword_25E6480;
  *(void *)&xmmword_25E6480 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_D1EFCC()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)sub_37D0C0(v1);
  sub_D53FD4(4, v3, v2);
  sub_725D0((uint64_t)v37);
  uint64_t v34 = v4;
  uint64_t v35 = v2;
  uint64_t v36 = v3;
  sub_DB8768(v3, (uint64_t)v40);
  unsigned int v5 = sub_35E640();
  sub_494284(2, v5, (uint64_t)v40);
  int v6 = sub_486A5C((uint64_t)v40);
  if (v6)
  {
    if (v6 != 5)
    {
      char v39 = 19;
      strcpy(__p, "TransportTypeChange");
      sub_710A8(4, (uint64_t)__p, v4);
      if (v39 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
  if (*(unsigned char *)(nullsub_1(v40) + 128)) {
    sub_3588EC(v3);
  }
  if (sub_DBB760(v3)) {
    sub_37B490(v2);
  }
  sub_DB8C44(v3);
  sub_DBC134(v3, (uint64_t)v33);
  memset(&v32[6], 0, 24);
  sub_47E0E4(v32);
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  char v20 = 1;
  int v21 = 0;
  char v22 = 1;
  v23[0] = 0;
  *(_DWORD *)((char *)v23 + 3) = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  int v27 = -1;
  char v28 = 0;
  uint64_t v31 = 0;
  long long v29 = 0;
  uint64_t v30 = 0;
  uint64_t v15 = 0;
  int v14 = 0;
  uint64_t v16 = 0;
  uint64_t v12 = 0;
  int v11 = 0;
  uint64_t v13 = 0;
  *(void *)size_t v9 = 0;
  int v8 = 0;
  uint64_t v10 = 0;
  sub_737844((uint64_t)v7);
}

void sub_D213E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  sub_111ECAC((uint64_t)&STACK[0x2DF0]);
  sub_C68C60((uint64_t)&STACK[0xDC0]);
  sub_5AB1B0((void ***)&STACK[0xE20]);
  sub_CC1854((uint64_t)&a70);
  sub_CA0F5C((uint64_t)&STACK[0x4DC0]);
  sub_C9D440((uint64_t)&STACK[0xC88]);
  sub_13E6DAC(&STACK[0x4E0]);
  sub_13E6DAC(&STACK[0x5E0]);
  sub_C5C9E0((uint64_t)&STACK[0x868]);
  sub_5450C((uint64_t)&STACK[0x8A0]);
  sub_D0FB2C((uint64_t)&STACK[0x8E0]);
  sub_1A668((void **)&STACK[0xAC8]);
  char v71 = (void *)STACK[0xAE0];
  if (STACK[0xAE0])
  {
    STACK[0xAE8] = (unint64_t)v71;
    operator delete(v71);
  }
  sub_401F88((void **)&STACK[0xAF8]);
  sub_3C77C4((uint64_t)&STACK[0xB10]);
  sub_405E28((uint64_t)&STACK[0xB90]);
  sub_36094((void **)&STACK[0xBC0]);
  uint64_t v72 = (void *)STACK[0xC20];
  if (STACK[0xC20])
  {
    STACK[0xC28] = (unint64_t)v72;
    operator delete(v72);
  }
  sub_4BCC2C((uint64_t)&STACK[0x5130]);
  _Unwind_Resume(a1);
}

uint64_t sub_D21938(uint64_t a1, uint64_t *a2, unsigned int *a3, const std::error_condition *a4)
{
  sub_71424(4, a4, *a2);
  char v12 = 18;
  strcpy(__p, "InternalError[All]");
  sub_710A8(4, (uint64_t)__p, *a2);
  if (v12 < 0)
  {
    operator delete(*(void **)__p);
    if (!sub_723EC(3u)) {
      goto LABEL_18;
    }
  }
  else if (!sub_723EC(3u))
  {
    goto LABEL_18;
  }
  sub_6BAC((uint64_t)__p);
  sub_D23538(*a3, (char *)v15);
  if ((v16 & 0x80u) == 0) {
    int v8 = v15;
  }
  else {
    int v8 = (void **)v15[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v9 = v16;
  }
  else {
    uint64_t v9 = (uint64_t)v15[1];
  }
  sub_188FC78(__p, (uint64_t)v8, v9);
  if ((char)v16 < 0) {
    operator delete(v15[0]);
  }
  std::stringbuf::str();
  sub_7246C((uint64_t *)v15, 3u);
  if ((char)v16 < 0) {
    operator delete(v15[0]);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
LABEL_18:
  sub_D243F4((uint64_t)__p, 0, (uint64_t)a4, a2[1], a2[2]);
  sub_CBB7B4((uint64_t)__p, a1);
  return sub_CF22FC((uint64_t)__p);
}

void sub_D21B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 65) < 0)
  {
    operator delete(*(void **)(v9 - 88));
    sub_111ECAC((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_D21BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_D21BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D21BF4(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  v28.n128_u64[0] = *a2;
  v28.n128_u32[2] = 1;
  *(void *)&long long v29 = v4;
  BYTE8(v29) = sub_DC5CDC(&v28);
  LOBYTE(v31) = 1;
  unint64_t v30 = v5;
  sub_C9CA80((uint64_t)&v28, (uint64_t)v21);
  if (v21[0])
  {
    sub_CF2E84((uint64_t)&v24, (uint64_t)&v28);
    sub_71740(4, (uint64_t)&v28, a2[4]);
    unint64_t v6 = *((void *)&v29 + 1);
    if (*((void *)&v29 + 1))
    {
      unint64_t v7 = v30;
      int v8 = (void *)*((void *)&v29 + 1);
      if (v30 != *((void *)&v29 + 1))
      {
        do
        {
          if (*(char *)(v7 - 25) < 0) {
            operator delete(*(void **)(v7 - 48));
          }
          v7 -= 48;
        }
        while (v7 != v6);
        int v8 = (void *)*((void *)&v29 + 1);
      }
      unint64_t v30 = v6;
      operator delete(v8);
    }
    if (SBYTE7(v29) < 0)
    {
      operator delete((void *)v28.n128_u64[0]);
      int v11 = (std::error_condition *)a2[5];
      if (v11 == &v22) {
        goto LABEL_17;
      }
    }
    else
    {
      int v11 = (std::error_condition *)a2[5];
      if (v11 == &v22)
      {
LABEL_17:
        int v12 = v21[0];
        *(unsigned char *)a1 = v21[0];
        uint64_t v13 = (std::error_condition *)(a1 + 8);
        if (v12)
        {
          *(void *)&v13->__val_ = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)(a1 + 24) = 0;
          sub_CF216C((uint64_t)v13, *(uint64_t *)&v22.__val_, (uint64_t)v22.__cat_, 0x51B3BEA3677D46CFLL * (((uint64_t)v22.__cat_ - *(void *)&v22.__val_) >> 3));
          long long v14 = v25;
          *(_OWORD *)(a1 + 32) = v24;
          *(_OWORD *)(a1 + 48) = v14;
          *(_OWORD *)(a1 + 64) = v26[0];
          *(_OWORD *)(a1 + 73) = *(_OWORD *)((char *)v26 + 9);
          if (v21[0]) {
            goto LABEL_19;
          }
        }
        else
        {
          *uint64_t v13 = v22;
          *(void *)(a1 + 24) = 0;
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 40) = 0;
          sub_3E7BF4((unsigned char *)(a1 + 24), (uint64_t)v23, v24, (uint64_t)(v24 - (void)v23) >> 5);
          *(_DWORD *)(a1 + 48) = v25;
          if (v21[0]) {
            goto LABEL_19;
          }
        }
        goto LABEL_25;
      }
    }
    sub_C5E9FC((uint64_t *)&v11->__val_, *(uint64_t *)&v22.__val_, (uint64_t)v22.__cat_, 0x51B3BEA3677D46CFLL * (((uint64_t)v22.__cat_ - *(void *)&v22.__val_) >> 3));
    goto LABEL_17;
  }
  uint64_t v9 = (uint64_t *)a2[3];
  v28.n128_u32[0] = 4;
  sub_D21938((uint64_t)v20, v9, (unsigned int *)&v28, &v22);
  sub_13E6DAC(v20);
  v27.n128_u64[0] = 1;
  v27.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(&v28, &v27);
  *(unsigned char *)a1 = 0;
  long long v10 = v29;
  *(__n128 *)(a1 + 8) = v28;
  *(_OWORD *)(a1 + 24) = v10;
  *(void *)(a1 + 40) = v30;
  *(_DWORD *)(a1 + 48) = v31;
  if (v21[0])
  {
LABEL_19:
    uint64_t v15 = *(const std::error_category **)&v22.__val_;
    if (!*(void *)&v22.__val_) {
      return;
    }
    cat = v22.__cat_;
    long long v17 = *(void **)&v22.__val_;
    if (v22.__cat_ != *(const std::error_category **)&v22.__val_)
    {
      do
      {
        cat -= 47;
        sub_402C7C((uint64_t)cat);
      }
      while (cat != v15);
      long long v17 = *(void **)&v22.__val_;
    }
    v22.__cat_ = v15;
    goto LABEL_33;
  }
LABEL_25:
  uint64_t v18 = (uint64_t)v23;
  if (!v23) {
    return;
  }
  uint64_t v19 = v24;
  long long v17 = v23;
  if ((void *)v24 != v23)
  {
    do
    {
      if (*(char *)(v19 - 1) < 0) {
        operator delete(*(void **)(v19 - 24));
      }
      v19 -= 32;
    }
    while (v19 != v18);
    long long v17 = v23;
  }
  *(void *)&long long v24 = v18;
LABEL_33:
  operator delete(v17);
}

void sub_D21EE8(_Unwind_Exception *a1)
{
  sub_C9D440(v1 - 232);
  _Unwind_Resume(a1);
}

void sub_D21EFC(_Unwind_Exception *a1)
{
  sub_C9D440(v1 - 232);
  _Unwind_Resume(a1);
}

void sub_D21F10(_Unwind_Exception *a1)
{
  sub_A3A4(v1 - 120);
  sub_C9D440(v1 - 232);
  _Unwind_Resume(a1);
}

void sub_D21F2C(_Unwind_Exception *a1)
{
  sub_C9D440(v1 - 232);
  _Unwind_Resume(a1);
}

void sub_D21F40(_Unwind_Exception *a1)
{
  sub_C9D440(v1 - 232);
  _Unwind_Resume(a1);
}

unsigned char *sub_D21F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)a3)
  {
    sub_D24814((uint64_t)v19, *(void ****)a2, *(void *)(a2 + 8), *(void *)(a2 + 16));
    sub_CA12F0((unsigned __int8 *)v19, a1);
    sub_CF5B18(v19);
    if (*(unsigned char *)a1)
    {
      sub_CF4E10(a1 + 856, (uint64_t)v19);
      sub_71740(4, (uint64_t)v19, *(void *)(a2 + 32));
      unint64_t v5 = (void **)__p[1];
      if (__p[1])
      {
        unint64_t v6 = v21;
        unint64_t v7 = __p[1];
        if (v21 != __p[1])
        {
          do
          {
            if (*((char *)v6 - 25) < 0) {
              operator delete(*(v6 - 6));
            }
            v6 -= 6;
          }
          while (v6 != v5);
          unint64_t v7 = __p[1];
        }
        int v21 = v5;
        operator delete(v7);
      }
      if (SHIBYTE(__p[0]) < 0) {
        operator delete(v19[0]);
      }
      sub_CA0FF4(*(void *)(a2 + 8), a1 + 112);
      uint64_t v13 = *(void *)(a2 + 40);
      long long v14 = *(void **)v13;
      if (*(void *)v13)
      {
        uint64_t v15 = *(void *)(v13 + 8);
        unsigned __int8 v16 = *(void **)v13;
        if ((void *)v15 != v14)
        {
          do
            uint64_t v15 = sub_405F44(v15 - 472);
          while ((void *)v15 != v14);
          unsigned __int8 v16 = *(void **)v13;
        }
        *(void *)(v13 + 8) = v14;
        operator delete(v16);
        *(void *)uint64_t v13 = 0;
        *(void *)(v13 + 8) = 0;
        *(void *)(v13 + 16) = 0;
      }
      *(_OWORD *)uint64_t v13 = *(_OWORD *)(a1 + 8);
      *(void *)(v13 + 16) = *(void *)(a1 + 24);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      long long v17 = (void **)(v13 + 24);
      if (*(char *)(v13 + 47) < 0) {
        operator delete(*v17);
      }
      long long v18 = *(_OWORD *)(a1 + 32);
      *(void *)(v13 + 40) = *(void *)(a1 + 48);
      *(_OWORD *)long long v17 = v18;
      *(unsigned char *)(a1 + 55) = 0;
      *(unsigned char *)(a1 + 32) = 0;
      sub_401324((uint64_t)v19);
    }
    int v12 = *(uint64_t **)(a2 + 24);
    LODWORD(v19[0]) = 3;
    sub_D21938((uint64_t)v22, v12, (unsigned int *)v19, (const std::error_condition *)(a1 + 8));
    return (unsigned char *)sub_13E6DAC(v22);
  }
  else
  {
    *(_OWORD *)uint64_t v19 = *(_OWORD *)(a3 + 8);
    __p[1] = 0;
    int v21 = 0;
    __p[0] = 0;
    double result = sub_3E7BF4(__p, *(void *)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 5);
    int v10 = *(_DWORD *)(a3 + 48);
    *(unsigned char *)a1 = 0;
    long long v11 = *(_OWORD *)__p;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v19;
    *(_OWORD *)(a1 + 24) = v11;
    *(void *)(a1 + 40) = v21;
    *(_DWORD *)(a1 + 48) = v10;
  }
  return result;
}

void sub_D221A4(_Unwind_Exception *a1)
{
  sub_CA0F5C(v1);
  _Unwind_Resume(a1);
}

void sub_D221B8(_Unwind_Exception *a1)
{
  sub_CA0F5C(v1);
  _Unwind_Resume(a1);
}

void sub_D221CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_A3A4((uint64_t)&a9);
  sub_CA0F5C(v9);
  _Unwind_Resume(a1);
}

void sub_D221E8(_Unwind_Exception *a1)
{
  sub_CA0F5C(v1);
  _Unwind_Resume(a1);
}

void sub_D221FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_D22210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)a3)
  {
    if (*(void *)a2 != a3 + 64) {
      sub_D24958(*(void *)a2, *(char ***)(a3 + 64), *(void *)(a3 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 72) - *(void *)(a3 + 64)) >> 3));
    }
    if (sub_486A4C(*(void *)(a2 + 8)))
    {
      unint64_t v6 = *(uint64_t **)(a2 + 16);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      if (v7 != *v6)
      {
        do
          uint64_t v7 = sub_402C7C(v7 - 376);
        while (v7 != v8);
      }
      uint64_t v10 = *(void *)(a3 + 88);
      uint64_t v9 = *(void *)(a3 + 96);
      unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v10) >> 5);
      if (v11 <= 1) {
        unint64_t v11 = 1;
      }
      BOOL v12 = v9 == v10;
      v6[1] = v8;
      BOOL v13 = v9 != v10;
      if (v12) {
        unint64_t v14 = v11 + 1;
      }
      else {
        unint64_t v14 = v11;
      }
      unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL | v13;
      if (v15 != 1)
      {
        unint64_t v28 = 1;
        uint64_t v29 = 160;
        do
        {
          int v31 = (void *)nullsub_1(*(void *)(a2 + 24));
          if (*(_DWORD *)sub_EADD58(*v31 + 472 * (v28 >> 1)) != -1)
          {
            uint64_t v32 = (long long *)(*(void *)(a3 + 88) + v29);
            uint64_t v33 = *(uint64_t **)(a2 + 16);
            uint64_t v34 = (int *)v32 + 38;
            unint64_t v35 = v33[1];
            if (v35 >= v33[2])
            {
              unint64_t v30 = sub_D24D24(v33, v32, v34);
            }
            else
            {
              sub_D24BD0((uint64_t)v33, v32, v34);
              unint64_t v30 = (char *)(v35 + 376);
            }
            v33[1] = (uint64_t)v30;
          }
          v28 += 2;
          v29 += 320;
        }
        while (v15 != v28);
      }
    }
    uint64_t v50 = 0;
    int v51 = 0;
    uint64_t v52 = 0;
    int v51 = sub_C78EA8(&v50);
    sub_EB6F70((int64x2_t *)(v51 - 3), *(std::string **)(a2 + 24), 1);
    uint64_t v16 = *(void *)(a2 + 32);
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = *(void *)(a2 + 48);
    *(void *)&long long v53 = &v50;
    uint64_t v19 = sub_37B3A8(v18);
    uint64_t v20 = *(void *)v19;
    LODWORD(v54) = *(_DWORD *)(v19 + 8);
    *((void *)&v53 + 1) = v20;
    BYTE4(v54) = sub_DB8BEC(v16);
    LOBYTE(v55) = 1;
    *((void *)&v54 + 1) = v17;
    *(void *)&long long v56 = v18;
    sub_C89C58((void **)&v53, (uint64_t)v46);
    if (v46[0])
    {
      char v44 = 9;
      strcpy((char *)__p, "UserRoute");
      sub_D1ADB0((uint64_t)&v49, (uint64_t)&v53);
      sub_717B8(4, (uint64_t)__p, (uint64_t)&v53, *(void *)(a2 + 64));
      uint64_t v21 = *((void *)&v54 + 1);
      if (*((void *)&v54 + 1))
      {
        uint64_t v22 = v55;
        long long v23 = (void *)*((void *)&v54 + 1);
        if (v55 != *((void *)&v54 + 1))
        {
          do
          {
            if (*(char *)(v22 - 25) < 0) {
              operator delete(*(void **)(v22 - 48));
            }
            v22 -= 48;
          }
          while (v22 != v21);
          long long v23 = (void *)*((void *)&v54 + 1);
        }
        uint64_t v55 = v21;
        operator delete(v23);
      }
      if (SBYTE7(v54) < 0)
      {
        operator delete((void *)v53);
        if ((v44 & 0x80000000) == 0) {
          goto LABEL_33;
        }
      }
      else if ((v44 & 0x80000000) == 0)
      {
        goto LABEL_33;
      }
      operator delete(__p[0]);
LABEL_33:
      int v36 = sub_F3D824(*(void *)(a2 + 32), *(void *)(a2 + 40), 3);
      long long v42 = *(_OWORD *)(a2 + 40);
      char v37 = sub_35E640();
      uint64_t v38 = sub_DBECEC();
      *(void *)&long long v53 = &v50;
      *((void *)&v53 + 1) = &v46[8];
      *(void *)&long long v54 = &v47;
      DWORD2(v54) = v36 | 0x10;
      BYTE12(v54) = v37;
      uint64_t v55 = v38;
      long long v56 = v42;
      uint64_t v57 = 0;
      sub_CC01C4((uint64_t)&v53, a1);
    }
    long long v25 = *(uint64_t **)(a2 + 56);
    LODWORD(v53) = 10;
    sub_D21938((uint64_t)v45, v25, (unsigned int *)&v53, (const std::error_condition *)&v46[8]);
    sub_13E6DAC(v45);
    long long v53 = *(_OWORD *)&v46[8];
    uint64_t v55 = 0;
    long long v54 = 0uLL;
    sub_3E7BF4(&v54, *(uint64_t *)&v46[24], v47, (v47 - *(void *)&v46[24]) >> 5);
    int v26 = v48;
    *(unsigned char *)a1 = 0;
    long long v27 = v54;
    *(_OWORD *)(a1 + 8) = v53;
    *(_OWORD *)(a1 + 24) = v27;
    *(void *)(a1 + 40) = v55;
    *(_DWORD *)(a1 + 48) = v26;
    sub_C8ACB8((uint64_t)v46);
    char v39 = v50;
    if (v50)
    {
      unint64_t v40 = v50;
      if (v51 != v50)
      {
        uint64_t v41 = v51 - 3;
        do
        {
          if (*v41)
          {
            sub_C64384((uint64_t)v41, *v41);
            operator delete(*v41);
          }
          BOOL v12 = v41 == v39;
          v41 -= 3;
        }
        while (!v12);
        unint64_t v40 = v50;
      }
      int v51 = v39;
      operator delete(v40);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v46 = *(_OWORD *)(a3 + 8);
    uint64_t v47 = 0;
    *(void *)&v46[16] = 0;
    *(void *)&v46[24] = 0;
    sub_3E7BF4(&v46[16], *(void *)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 5);
    int v24 = *(_DWORD *)(a3 + 48);
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v46;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)&v46[16];
    *(void *)(a1 + 40) = v47;
    *(_DWORD *)(a1 + 48) = v24;
  }
}

void sub_D22874(_Unwind_Exception *a1)
{
  sub_CC1854(v1);
  sub_C8ACB8((uint64_t)&STACK[0x240]);
  sub_C628C4((void ****)(v2 - 192));
  _Unwind_Resume(a1);
}

double sub_D2297C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)a3)
  {
    sub_40A1A0(*(uint64_t **)a2);
    sub_D26120(v8, *(void *)(a2 + 8), *(uint64_t **)(a2 + 16), a3 + 8, *(void *)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 56));
    sub_C847EC();
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)(a3 + 8);
  uint64_t v10 = 0;
  long long v9 = 0uLL;
  sub_3E7BF4(&v9, *(void *)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 5);
  int v6 = *(_DWORD *)(a3 + 48);
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v8;
  double result = *(double *)&v9;
  *(_OWORD *)(a1 + 24) = v9;
  *(void *)(a1 + 40) = v10;
  *(_DWORD *)(a1 + 48) = v6;
  return result;
}

void sub_D22B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  sub_D22F78(v49);
  sub_D265DC(&a49);
  _Unwind_Resume(a1);
}

void sub_D22BD4(uint64_t a1, uint64_t *a2, uint64_t a3, char *a4, uint64_t a5, unsigned char *a6)
{
  if (!*(unsigned char *)a5)
  {
    long long v36 = *(_OWORD *)(a5 + 8);
    uint64_t v38 = 0;
    long long v37 = 0uLL;
    sub_3E7BF4(&v37, *(void *)(a5 + 24), *(void *)(a5 + 32), (uint64_t)(*(void *)(a5 + 32) - *(void *)(a5 + 24)) >> 5);
    int v22 = *(_DWORD *)(a5 + 48);
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v36;
    *(_OWORD *)(a1 + 24) = v37;
    *(void *)(a1 + 40) = v38;
    *(_DWORD *)(a1 + 48) = v22;
    return;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25E64A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25E64A8))
  {
    qword_25E6570 = 0;
    unk_25E6578 = 0;
    qword_25E6580 = 0;
    __cxa_guard_release(&qword_25E64A8);
  }
  if (*a6)
  {
    BOOL v12 = (uint64_t *)sub_5231C((uint64_t)(a6 + 8));
    uint64_t v14 = *a2;
    uint64_t v13 = a2[1];
    uint64_t v15 = a2[2];
    char v16 = *a4;
    if (*a4)
    {
LABEL_5:
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      unint64_t v35 = 0;
      uint64_t v18 = (unsigned char *)*((void *)a4 + 4);
      uint64_t v17 = (unsigned char *)*((void *)a4 + 5);
      int64_t v19 = v17 - v18;
      if (v17 != v18)
      {
        uint64_t v30 = v13;
        int v31 = v12;
        if (0x86BCA1AF286BCA1BLL * (v19 >> 3) >= 0x1AF286BCA1AF287) {
          sub_2E00();
        }
        uint64_t v20 = (char *)operator new(v19);
        uint64_t v21 = &v20[8 * (v19 >> 3)];
        uint64_t v33 = v20;
        unint64_t v35 = v21;
        memcpy(v20, v18, v19);
        uint64_t v34 = v21;
        uint64_t v13 = v30;
        BOOL v12 = v31;
      }
      char v16 = a4[56] != 0;
      goto LABEL_12;
    }
  }
  else
  {
    BOOL v12 = &qword_25E6570;
    uint64_t v14 = *a2;
    uint64_t v13 = a2[1];
    uint64_t v15 = a2[2];
    char v16 = *a4;
    if (*a4) {
      goto LABEL_5;
    }
  }
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  unint64_t v35 = 0;
LABEL_12:
  uint64_t v23 = a2[3];
  uint64_t v24 = a2[4];
  uint64_t v25 = a2[5];
  *(void *)&long long v36 = v14;
  *((void *)&v36 + 1) = a3;
  *(void *)&long long v37 = a5 + 8;
  *((void *)&v37 + 1) = v12;
  uint64_t v38 = v15;
  char v39 = &v33;
  uint64_t v40 = v23;
  uint64_t v41 = v25;
  uint64_t v42 = v13;
  char v43 = v16;
  uint64_t v44 = v24;
  sub_DC0BA4(a3, v14, (uint64_t)v45);
  sub_DBC134(*((uint64_t *)&v36 + 1), (uint64_t)&v46);
  sub_C818B8();
  if (__p)
  {
    int v48 = __p;
    operator delete(__p);
  }
  sub_7379DC((uint64_t)v45);
  if (v33)
  {
    uint64_t v34 = v33;
    operator delete(v33);
  }
  if (*(unsigned char *)a1)
  {
    sub_D2AB94(a1 + 288, (uint64_t)&v36);
    sub_71740(4, (uint64_t)&v36, a2[7]);
    uint64_t v26 = *((void *)&v37 + 1);
    if (*((void *)&v37 + 1))
    {
      uint64_t v27 = v38;
      unint64_t v28 = (void *)*((void *)&v37 + 1);
      if (v38 != *((void *)&v37 + 1))
      {
        do
        {
          if (*(char *)(v27 - 25) < 0) {
            operator delete(*(void **)(v27 - 48));
          }
          v27 -= 48;
        }
        while (v27 != v26);
        unint64_t v28 = (void *)*((void *)&v37 + 1);
      }
      uint64_t v38 = v26;
      operator delete(v28);
    }
    if (SBYTE7(v37) < 0) {
      operator delete((void *)v36);
    }
  }
  else
  {
    uint64_t v29 = (uint64_t *)a2[6];
    LODWORD(v36) = 17;
    sub_D21938((uint64_t)v32, v29, (unsigned int *)&v36, (const std::error_condition *)(a1 + 8));
    sub_13E6DAC(v32);
  }
}

void sub_D22EE8(_Unwind_Exception *a1)
{
  sub_C5C10C(v1);
  _Unwind_Resume(a1);
}

void sub_D22F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_A3A4((uint64_t)&a47);
  sub_C5C10C(v47);
  _Unwind_Resume(a1);
}

void sub_D22F1C(_Unwind_Exception *a1)
{
  sub_C5C10C(v1);
  _Unwind_Resume(a1);
}

void sub_D22F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,char a47)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_D22F78(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 8120);
    if (v2)
    {
      *(void *)(a1 + 8128) = v2;
      operator delete(v2);
    }
    sub_5ABDEC(a1 + 8);
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    return a1;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(void **)(a1 + 24);
  if (v5 != v4)
  {
    do
    {
      if (*(char *)(v5 - 1) < 0) {
        operator delete(*(void **)(v5 - 24));
      }
      v5 -= 32;
    }
    while (v5 != v4);
    int v6 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v4;
  operator delete(v6);
  return a1;
}

void sub_D23024(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)a3)
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a3 + 8);
    *(void *)&__p[24] = 0;
    uint64_t v34 = 0;
    *(void *)&__p[16] = 0;
    sub_3E7BF4(&__p[16], *(void *)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 5);
    int v21 = *(_DWORD *)(a3 + 48);
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)&__p[16];
    *(void *)(a1 + 40) = v34;
    *(_DWORD *)(a1 + 48) = v21;
    return;
  }
  *(double *)&uint64_t v32 = sub_72688(a2[1]);
  uint64_t v8 = *a2;
  __p[23] = 17;
  strcpy(__p, "RequestLatency_ms");
  uint64_t v23 = (long long *)__p;
  long long v9 = sub_8FFD4(v8, (uint64_t)__p, (uint64_t)&unk_20F06E0, &v23);
  sub_39B96C(*((unsigned int *)v9 + 12), (void ***)v9 + 5, &v32);
  *((_DWORD *)v9 + 12) = 1;
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v10 = a2[2];
  unint64_t v11 = (long long *)sub_377D04(a2[3]);
  char v38 = 1;
  sub_29E004(__p, v11);
  sub_DC0460(v10, (uint64_t)__p, (uint64_t)&v23);
  if (v38)
  {
    if (v37 < 0)
    {
      operator delete(v36);
      if ((v35 & 0x80000000) == 0)
      {
LABEL_7:
        if ((__p[23] & 0x80000000) == 0) {
          goto LABEL_8;
        }
LABEL_18:
        operator delete(*(void **)__p);
        goto LABEL_8;
      }
    }
    else if ((v35 & 0x80000000) == 0)
    {
      goto LABEL_7;
    }
    operator delete(*(void **)&__p[24]);
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_8:
  uint64_t v12 = sub_37B3A8(a2[3]);
  uint64_t v13 = *(void *)v12;
  int v14 = *(_DWORD *)(v12 + 8);
  sub_DBBE30(a2[2], (uint64_t)&v32);
  uint64_t v16 = a2[3];
  uint64_t v15 = a2[4];
  uint64_t v17 = (uint64_t *)a2[5];
  int v22 = v32;
  sub_D2CA5C((uint64_t)__p, (int *)&v23, a3 + 8, v15, v16, v13, v14, v17, &v22, a4 + 8, *a2);
  sub_C85AD4((uint64_t)__p, a1);
  sub_D2CBF8((uint64_t)__p);
  if (*(unsigned char *)a1)
  {
    sub_D2C8EC((uint64_t *)(a1 + 520), (uint64_t)__p);
    sub_71740(4, (uint64_t)__p, a2[6]);
    uint64_t v18 = *(void *)&__p[24];
    if (*(void *)&__p[24])
    {
      uint64_t v19 = v34;
      uint64_t v20 = *(void **)&__p[24];
      if (v34 != *(void *)&__p[24])
      {
        do
        {
          if (*(char *)(v19 - 25) < 0) {
            operator delete(*(void **)(v19 - 48));
          }
          v19 -= 48;
        }
        while (v19 != v18);
        uint64_t v20 = *(void **)&__p[24];
      }
      uint64_t v34 = v18;
      operator delete(v20);
    }
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if ((v31 & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
  }
  if (v31 < 0) {
LABEL_23:
  }
    operator delete(v30);
LABEL_24:
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
}

void sub_D23320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_A3A4((uint64_t)&a39);
  sub_D233FC(v39);
  sub_CF1EE4((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_D23344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_D233FC(v6);
  sub_CF1EE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D23360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_D2337C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_CF1EE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D23390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_CF1EE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D233A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_CF1EE4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D233B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_D233CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D233FC(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    sub_13E6DAC(a1 + 264);
    sub_13E6DAC(a1 + 8);
    return a1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 24);
  if (v4 != v3)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 32;
    }
    while (v4 != v3);
    uint64_t v5 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v3;
  operator delete(v5);
  return a1;
}

uint64_t sub_D234A0(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    sub_C7C3B4((void **)(a1 + 8));
    return a1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 24);
  if (v4 != v3)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 32;
    }
    while (v4 != v3);
    uint64_t v5 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v3;
  operator delete(v5);
  return a1;
}

void sub_D23538(unsigned int a1@<W0>, char *a2@<X8>)
{
  sub_7B8BC(0, (char *)&v132);
  uint64_t v4 = std::string::insert(&v132, 0, "[");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v133.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v133, "]");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v135 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v133.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v132.__r_.__value_.__l.__data_);
  if (a1 > 0x12)
  {
LABEL_7:
    a2[23] = 0;
    *a2 = 0;
    goto LABEL_264;
  }
LABEL_3:
  switch(a1)
  {
    case 0u:
      a2[23] = 14;
      strcpy(a2, "Unknown error.");
      break;
    case 1u:
      int v45 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v9 = HIBYTE(v135);
      }
      else {
        size_t v9 = (size_t)__p[1];
      }
      unint64_t v46 = v9 + 24;
      if (v9 + 24 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v46 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        unint64_t v11 = a2;
        a2[23] = v46;
LABEL_201:
        if (v45 >= 0) {
          long long v108 = __p;
        }
        else {
          long long v108 = (void **)__p[0];
        }
        memmove(a2, v108, v9);
        goto LABEL_205;
      }
      uint64_t v106 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17) {
        uint64_t v106 = v46 | 7;
      }
      uint64_t v107 = v106 + 1;
      unint64_t v11 = (char *)operator new(v106 + 1);
      *((void *)a2 + 1) = v46;
      *((void *)a2 + 2) = v107 | 0x8000000000000000;
      *(void *)a2 = v11;
      a2 = v11;
      if (v9) {
        goto LABEL_201;
      }
LABEL_205:
      char v74 = " Input resolving failed.";
      goto LABEL_238;
    case 2u:
      int v31 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v32 = HIBYTE(v135);
      }
      else {
        size_t v32 = (size_t)__p[1];
      }
      unint64_t v33 = v32 + 27;
      if (v32 + 27 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v33 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v34 = a2;
        a2[23] = v33;
LABEL_168:
        if (v31 >= 0) {
          uint64_t v94 = __p;
        }
        else {
          uint64_t v94 = (void **)__p[0];
        }
        memmove(a2, v94, v32);
        goto LABEL_172;
      }
      uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v33 | 7) != 0x17) {
        uint64_t v92 = v33 | 7;
      }
      uint64_t v93 = v92 + 1;
      uint64_t v34 = (char *)operator new(v92 + 1);
      *((void *)a2 + 1) = v33;
      *((void *)a2 + 2) = v93 | 0x8000000000000000;
      *(void *)a2 = v34;
      a2 = v34;
      if (v32) {
        goto LABEL_168;
      }
LABEL_172:
      strcpy(&v34[v32], " Request validation failed.");
      break;
    case 3u:
      int v39 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v40 = HIBYTE(v135);
      }
      else {
        size_t v40 = (size_t)__p[1];
      }
      unint64_t v41 = v40 + 28;
      if (v40 + 28 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v41 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v42 = a2;
        a2[23] = v41;
LABEL_184:
        if (v39 >= 0) {
          char v100 = __p;
        }
        else {
          char v100 = (void **)__p[0];
        }
        memmove(a2, v100, v40);
        goto LABEL_188;
      }
      uint64_t v98 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v41 | 7) != 0x17) {
        uint64_t v98 = v41 | 7;
      }
      uint64_t v99 = v98 + 1;
      uint64_t v42 = (char *)operator new(v98 + 1);
      *((void *)a2 + 1) = v41;
      *((void *)a2 + 2) = v99 | 0x8000000000000000;
      *(void *)a2 = v42;
      a2 = v42;
      if (v40) {
        goto LABEL_184;
      }
LABEL_188:
      uint64_t v101 = " Path decoder module failed.";
      goto LABEL_197;
    case 4u:
      int v20 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v21 = HIBYTE(v135);
      }
      else {
        size_t v21 = (size_t)__p[1];
      }
      unint64_t v22 = v21 + 39;
      if (v21 + 39 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v22 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v23 = a2;
        a2[23] = v22;
LABEL_144:
        if (v20 >= 0) {
          long long v84 = __p;
        }
        else {
          long long v84 = (void **)__p[0];
        }
        memmove(a2, v84, v21);
        goto LABEL_148;
      }
      uint64_t v82 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17) {
        uint64_t v82 = v22 | 7;
      }
      uint64_t v83 = v82 + 1;
      uint64_t v23 = (char *)operator new(v82 + 1);
      *((void *)a2 + 1) = v22;
      *((void *)a2 + 2) = v83 | 0x8000000000000000;
      *(void *)a2 = v23;
      a2 = v23;
      if (v21) {
        goto LABEL_144;
      }
LABEL_148:
      strcpy(&v23[v21], " Input point transformer module failed.");
      break;
    case 5u:
      int v51 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v52 = HIBYTE(v135);
      }
      else {
        size_t v52 = (size_t)__p[1];
      }
      unint64_t v53 = v52 + 30;
      if (v52 + 30 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v53 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        long long v54 = a2;
        a2[23] = v53;
LABEL_217:
        if (v51 >= 0) {
          long long v114 = __p;
        }
        else {
          long long v114 = (void **)__p[0];
        }
        memmove(a2, v114, v52);
        goto LABEL_221;
      }
      uint64_t v112 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v53 | 7) != 0x17) {
        uint64_t v112 = v53 | 7;
      }
      uint64_t v113 = v112 + 1;
      long long v54 = (char *)operator new(v112 + 1);
      *((void *)a2 + 1) = v53;
      *((void *)a2 + 2) = v113 | 0x8000000000000000;
      *(void *)a2 = v54;
      a2 = v54;
      if (v52) {
        goto LABEL_217;
      }
LABEL_221:
      strcpy(&v54[v52], " Coverage check module failed.");
      break;
    case 6u:
      int v59 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v9 = HIBYTE(v135);
      }
      else {
        size_t v9 = (size_t)__p[1];
      }
      unint64_t v60 = v9 + 24;
      if (v9 + 24 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v60 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        unint64_t v11 = a2;
        a2[23] = v60;
LABEL_233:
        if (v59 >= 0) {
          long long v120 = __p;
        }
        else {
          long long v120 = (void **)__p[0];
        }
        memmove(a2, v120, v9);
        goto LABEL_237;
      }
      uint64_t v118 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v60 | 7) != 0x17) {
        uint64_t v118 = v60 | 7;
      }
      uint64_t v119 = v118 + 1;
      unint64_t v11 = (char *)operator new(v118 + 1);
      *((void *)a2 + 1) = v60;
      *((void *)a2 + 2) = v119 | 0x8000000000000000;
      *(void *)a2 = v11;
      a2 = v11;
      if (v9) {
        goto LABEL_233;
      }
LABEL_237:
      char v74 = " Snapping module failed.";
      goto LABEL_238;
    case 7u:
      int v43 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v40 = HIBYTE(v135);
      }
      else {
        size_t v40 = (size_t)__p[1];
      }
      unint64_t v44 = v40 + 28;
      if (v40 + 28 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v44 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v42 = a2;
        a2[23] = v44;
LABEL_192:
        if (v43 >= 0) {
          __int16 v104 = __p;
        }
        else {
          __int16 v104 = (void **)__p[0];
        }
        memmove(a2, v104, v40);
        goto LABEL_196;
      }
      uint64_t v102 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v44 | 7) != 0x17) {
        uint64_t v102 = v44 | 7;
      }
      uint64_t v103 = v102 + 1;
      uint64_t v42 = (char *)operator new(v102 + 1);
      *((void *)a2 + 1) = v44;
      *((void *)a2 + 2) = v103 | 0x8000000000000000;
      *(void *)a2 = v42;
      a2 = v42;
      if (v40) {
        goto LABEL_192;
      }
LABEL_196:
      uint64_t v101 = " Path finding module failed.";
LABEL_197:
      char v105 = &v42[v40];
      *(_OWORD *)char v105 = *(_OWORD *)v101;
      *(_OWORD *)(v105 + 12) = *(_OWORD *)(v101 + 12);
      v105[28] = 0;
      break;
    case 8u:
      int v69 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v13 = HIBYTE(v135);
      }
      else {
        size_t v13 = (size_t)__p[1];
      }
      unint64_t v70 = v13 + 31;
      if (v13 + 31 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v70 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v15 = a2;
        a2[23] = v70;
LABEL_258:
        if (v69 >= 0) {
          unint64_t v130 = __p;
        }
        else {
          unint64_t v130 = (void **)__p[0];
        }
        memmove(a2, v130, v13);
        goto LABEL_262;
      }
      uint64_t v128 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v70 | 7) != 0x17) {
        uint64_t v128 = v70 | 7;
      }
      uint64_t v129 = v128 + 1;
      uint64_t v15 = (char *)operator new(v128 + 1);
      *((void *)a2 + 1) = v70;
      *((void *)a2 + 2) = v129 | 0x8000000000000000;
      *(void *)a2 = v15;
      a2 = v15;
      if (v13) {
        goto LABEL_258;
      }
LABEL_262:
      std::string v78 = " Journey planner module failed.";
      goto LABEL_263;
    case 9u:
      int v28 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v29 = HIBYTE(v135);
      }
      else {
        size_t v29 = (size_t)__p[1];
      }
      unint64_t v30 = v29 + 19;
      if (v29 + 19 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v30 >= 0x17)
      {
        uint64_t v88 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17) {
          uint64_t v88 = v30 | 7;
        }
        uint64_t v89 = v88 + 1;
        uint64_t v90 = (char *)operator new(v88 + 1);
        *((void *)a2 + 1) = v30;
        *((void *)a2 + 2) = v89 | 0x8000000000000000;
        *(void *)a2 = v90;
        a2 = v90;
      }
      else
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        a2[23] = v30;
        if (!v29) {
          goto LABEL_164;
        }
      }
      if (v28 >= 0) {
        long long v91 = __p;
      }
      else {
        long long v91 = (void **)__p[0];
      }
      memmove(a2, v91, v29);
LABEL_164:
      strcpy(&a2[v29], " ETA module failed.");
      break;
    case 0xAu:
      int v65 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v66 = HIBYTE(v135);
      }
      else {
        size_t v66 = (size_t)__p[1];
      }
      unint64_t v67 = v66 + 34;
      if (v66 + 34 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v67 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        unint64_t v68 = a2;
        a2[23] = v67;
LABEL_250:
        if (v65 >= 0) {
          uint64_t v127 = __p;
        }
        else {
          uint64_t v127 = (void **)__p[0];
        }
        memmove(a2, v127, v66);
        goto LABEL_254;
      }
      uint64_t v125 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v67 | 7) != 0x17) {
        uint64_t v125 = v67 | 7;
      }
      uint64_t v126 = v125 + 1;
      unint64_t v68 = (char *)operator new(v125 + 1);
      *((void *)a2 + 1) = v67;
      *((void *)a2 + 2) = v126 | 0x8000000000000000;
      *(void *)a2 = v68;
      a2 = v68;
      if (v66) {
        goto LABEL_250;
      }
LABEL_254:
      strcpy(&v68[v66], " ETA module failed for user route.");
      break;
    case 0xBu:
      int v16 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v17 = HIBYTE(v135);
      }
      else {
        size_t v17 = (size_t)__p[1];
      }
      unint64_t v18 = v17 + 41;
      if (v17 + 41 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v18 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v19 = a2;
        a2[23] = v18;
LABEL_136:
        if (v16 >= 0) {
          __n128 v81 = __p;
        }
        else {
          __n128 v81 = (void **)__p[0];
        }
        memmove(a2, v81, v17);
        goto LABEL_140;
      }
      uint64_t v79 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17) {
        uint64_t v79 = v18 | 7;
      }
      uint64_t v80 = v79 + 1;
      uint64_t v19 = (char *)operator new(v79 + 1);
      *((void *)a2 + 1) = v18;
      *((void *)a2 + 2) = v80 | 0x8000000000000000;
      *(void *)a2 = v19;
      a2 = v19;
      if (v17) {
        goto LABEL_136;
      }
LABEL_140:
      strcpy(&v19[v17], " Traversal time prediction module failed.");
      break;
    case 0xCu:
      int v24 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v25 = HIBYTE(v135);
      }
      else {
        size_t v25 = (size_t)__p[1];
      }
      unint64_t v26 = v25 + 29;
      if (v25 + 29 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v26 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v27 = a2;
        a2[23] = v26;
LABEL_152:
        if (v24 >= 0) {
          uint64_t v87 = __p;
        }
        else {
          uint64_t v87 = (void **)__p[0];
        }
        memmove(a2, v87, v25);
        goto LABEL_156;
      }
      uint64_t v85 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17) {
        uint64_t v85 = v26 | 7;
      }
      uint64_t v86 = v85 + 1;
      uint64_t v27 = (char *)operator new(v85 + 1);
      *((void *)a2 + 1) = v26;
      *((void *)a2 + 2) = v86 | 0x8000000000000000;
      *(void *)a2 = v27;
      a2 = v27;
      if (v25) {
        goto LABEL_152;
      }
LABEL_156:
      strcpy(&v27[v25], " Route builder module failed.");
      break;
    case 0xDu:
      int v55 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v56 = HIBYTE(v135);
      }
      else {
        size_t v56 = (size_t)__p[1];
      }
      unint64_t v57 = v56 + 44;
      if (v56 + 44 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v57 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        __int16 v58 = a2;
        a2[23] = v57;
LABEL_225:
        if (v55 >= 0) {
          char v117 = __p;
        }
        else {
          char v117 = (void **)__p[0];
        }
        memmove(a2, v117, v56);
        goto LABEL_229;
      }
      uint64_t v115 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v57 | 7) != 0x17) {
        uint64_t v115 = v57 | 7;
      }
      uint64_t v116 = v115 + 1;
      __int16 v58 = (char *)operator new(v115 + 1);
      *((void *)a2 + 1) = v57;
      *((void *)a2 + 2) = v116 | 0x8000000000000000;
      *(void *)a2 = v58;
      a2 = v58;
      if (v56) {
        goto LABEL_225;
      }
LABEL_229:
      strcpy(&v58[v56], " Route builder module failed for user route.");
      break;
    case 0xEu:
      int v12 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v13 = HIBYTE(v135);
      }
      else {
        size_t v13 = (size_t)__p[1];
      }
      unint64_t v14 = v13 + 31;
      if (v13 + 31 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v14 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v15 = a2;
        a2[23] = v14;
LABEL_128:
        if (v12 >= 0) {
          uint64_t v77 = __p;
        }
        else {
          uint64_t v77 = (void **)__p[0];
        }
        memmove(a2, v77, v13);
        goto LABEL_132;
      }
      uint64_t v75 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v75 = v14 | 7;
      }
      uint64_t v76 = v75 + 1;
      uint64_t v15 = (char *)operator new(v75 + 1);
      *((void *)a2 + 1) = v14;
      *((void *)a2 + 2) = v76 | 0x8000000000000000;
      *(void *)a2 = v15;
      a2 = v15;
      if (v13) {
        goto LABEL_128;
      }
LABEL_132:
      std::string v78 = " Route selection module failed.";
LABEL_263:
      std::error_condition v131 = &v15[v13];
      *(_OWORD *)std::error_condition v131 = *(_OWORD *)v78;
      *(_OWORD *)(v131 + 15) = *(_OWORD *)(v78 + 15);
      v131[31] = 0;
      break;
    case 0xFu:
      int v35 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v36 = HIBYTE(v135);
      }
      else {
        size_t v36 = (size_t)__p[1];
      }
      unint64_t v37 = v36 + 45;
      if (v36 + 45 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v37 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        char v38 = a2;
        a2[23] = v37;
LABEL_176:
        if (v35 >= 0) {
          long long v97 = __p;
        }
        else {
          long long v97 = (void **)__p[0];
        }
        memmove(a2, v97, v36);
        goto LABEL_180;
      }
      uint64_t v95 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v37 | 7) != 0x17) {
        uint64_t v95 = v37 | 7;
      }
      uint64_t v96 = v95 + 1;
      char v38 = (char *)operator new(v95 + 1);
      *((void *)a2 + 1) = v37;
      *((void *)a2 + 2) = v96 | 0x8000000000000000;
      *(void *)a2 = v38;
      a2 = v38;
      if (v36) {
        goto LABEL_176;
      }
LABEL_180:
      strcpy(&v38[v36], " Driving to walking transition module failed.");
      break;
    case 0x10u:
      int v8 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v9 = HIBYTE(v135);
      }
      else {
        size_t v9 = (size_t)__p[1];
      }
      unint64_t v10 = v9 + 24;
      if (v9 + 24 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v10 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        unint64_t v11 = a2;
        a2[23] = v10;
LABEL_120:
        if (v8 >= 0) {
          char v73 = __p;
        }
        else {
          char v73 = (void **)__p[0];
        }
        memmove(a2, v73, v9);
        goto LABEL_124;
      }
      uint64_t v71 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v71 = v10 | 7;
      }
      uint64_t v72 = v71 + 1;
      unint64_t v11 = (char *)operator new(v71 + 1);
      *((void *)a2 + 1) = v10;
      *((void *)a2 + 2) = v72 | 0x8000000000000000;
      *(void *)a2 = v11;
      a2 = v11;
      if (v9) {
        goto LABEL_120;
      }
LABEL_124:
      char v74 = " Guidance module failed.";
LABEL_238:
      char v121 = &v11[v9];
      *(_OWORD *)char v121 = *(_OWORD *)v74;
      *((void *)v121 + 2) = *((void *)v74 + 2);
      v121[24] = 0;
      break;
    case 0x11u:
      int v47 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v48 = HIBYTE(v135);
      }
      else {
        size_t v48 = (size_t)__p[1];
      }
      unint64_t v49 = v48 + 25;
      if (v48 + 25 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v49 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v50 = a2;
        a2[23] = v49;
LABEL_209:
        if (v47 >= 0) {
          uint64_t v111 = __p;
        }
        else {
          uint64_t v111 = (void **)__p[0];
        }
        memmove(a2, v111, v48);
        goto LABEL_213;
      }
      uint64_t v109 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17) {
        uint64_t v109 = v49 | 7;
      }
      uint64_t v110 = v109 + 1;
      uint64_t v50 = (char *)operator new(v109 + 1);
      *((void *)a2 + 1) = v49;
      *((void *)a2 + 2) = v110 | 0x8000000000000000;
      *(void *)a2 = v50;
      a2 = v50;
      if (v48) {
        goto LABEL_209;
      }
LABEL_213:
      strcpy(&v50[v48], " Analytics module failed.");
      break;
    case 0x12u:
      int v61 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v62 = HIBYTE(v135);
      }
      else {
        size_t v62 = (size_t)__p[1];
      }
      unint64_t v63 = v62 + 32;
      if (v62 + 32 > 0x7FFFFFFFFFFFFFF7) {
LABEL_266:
      }
        sub_188D690();
      if (v63 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        unint64_t v64 = a2;
        a2[23] = v63;
LABEL_242:
        if (v61 >= 0) {
          long long v124 = __p;
        }
        else {
          long long v124 = (void **)__p[0];
        }
        memmove(a2, v124, v62);
        goto LABEL_246;
      }
      uint64_t v122 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v63 | 7) != 0x17) {
        uint64_t v122 = v63 | 7;
      }
      uint64_t v123 = v122 + 1;
      unint64_t v64 = (char *)operator new(v122 + 1);
      *((void *)a2 + 1) = v63;
      *((void *)a2 + 2) = v123 | 0x8000000000000000;
      *(void *)a2 = v64;
      a2 = v64;
      if (v62) {
        goto LABEL_242;
      }
LABEL_246:
      strcpy(&v64[v62], " Response builder module failed.");
      break;
    default:
      goto LABEL_7;
  }
LABEL_264:
  if (SHIBYTE(v135) < 0) {
    operator delete(__p[0]);
  }
}

void sub_D24360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D243F4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = (long long *)sub_377D04(a4);
  char v61 = 1;
  sub_29E004((char *)__dst, v10);
  int v11 = sub_DB2268(a5, (uint64_t)__dst);
  int v12 = (long long *)sub_377D04(a4);
  char v54 = 1;
  sub_29E004((char *)v48, v12);
  int v13 = sub_DB2744(a5, (uint64_t)v48);
  unint64_t v33 = sub_DBB2FC(a5);
  int v34 = v14;
  sub_DA519C((uint64_t)v47, a4);
  uint64_t v45 = a5;
  int v46 = 1;
  uint64_t v44 = 0;
  uint64_t v43 = 0;
  sub_DA541C((uint64_t)v47, (uint64_t)&v45, &v43, (uint64_t *)&v31);
  char v15 = sub_DBE8E4(a5);
  sub_DB8768(a5, (uint64_t)v42);
  int v16 = sub_487794((uint64_t)v42);
  size_t v17 = (long long *)sub_377D04(a4);
  char v41 = 1;
  sub_29E004((char *)v35, v17);
  sub_DC03AC(a5, (uint64_t)v35, (uint64_t)v22);
  sub_CF1FC8(a1, a4, a3, a2, v11, v13, (uint64_t *)&v33, (uint64_t *)&v31, v15, v16, (uint64_t)v22);
  if (v30 < 0) {
    operator delete(__p);
  }
  if (v27)
  {
    int v28 = v27;
    operator delete(v27);
  }
  if (v25)
  {
    unint64_t v26 = v25;
    operator delete(v25);
  }
  if (v23)
  {
    int v24 = v23;
    operator delete(v23);
  }
  if (!v41) {
    goto LABEL_13;
  }
  if ((v40 & 0x80000000) == 0)
  {
    if ((v38 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_16;
  }
  operator delete(v39);
  if (v38 < 0)
  {
LABEL_16:
    operator delete(v37);
    if (v36 < 0) {
      goto LABEL_17;
    }
LABEL_13:
    sub_4BCC2C((uint64_t)v42);
    unint64_t v18 = v31;
    if (!v31) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }
LABEL_12:
  if ((v36 & 0x80000000) == 0) {
    goto LABEL_13;
  }
LABEL_17:
  operator delete(v35[0]);
  sub_4BCC2C((uint64_t)v42);
  unint64_t v18 = v31;
  if (!v31) {
    goto LABEL_22;
  }
LABEL_18:
  uint64_t v19 = (uint64_t)v32;
  int v20 = v18;
  if (v32 != v18)
  {
    do
      uint64_t v19 = sub_402C7C(v19 - 376);
    while ((void *)v19 != v18);
    int v20 = v31;
  }
  size_t v32 = v18;
  operator delete(v20);
LABEL_22:
  if ((_BYTE)v44) {
    LOBYTE(v44) = 0;
  }
  if (!v54) {
    goto LABEL_28;
  }
  if ((v53 & 0x80000000) == 0)
  {
    if ((v51 & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_31;
  }
  operator delete(v52);
  if (v51 < 0)
  {
LABEL_31:
    operator delete(v50);
    if (v49 < 0) {
      goto LABEL_32;
    }
LABEL_28:
    if (!v61) {
      return a1;
    }
LABEL_33:
    if (v60 < 0)
    {
      operator delete(v59);
      if ((v58 & 0x80000000) == 0)
      {
LABEL_35:
        if ((v56 & 0x80000000) == 0) {
          return a1;
        }
LABEL_39:
        operator delete(__dst[0]);
        return a1;
      }
    }
    else if ((v58 & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    operator delete(v57);
    if ((v56 & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_39;
  }
LABEL_27:
  if ((v49 & 0x80000000) == 0) {
    goto LABEL_28;
  }
LABEL_32:
  operator delete(v48[0]);
  if (v61) {
    goto LABEL_33;
  }
  return a1;
}

void sub_D24738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_CF1EE4((uint64_t)&a12);
  sub_CF1F54((uint64_t)&a39);
  sub_4BCC2C((uint64_t)&a49);
  sub_401F88(&a34);
  if (LOBYTE(STACK[0x410])) {
    LOBYTE(STACK[0x410]) = 0;
  }
  sub_CF1F54(v49 - 256);
  sub_CF1F54(v49 - 176);
  _Unwind_Resume(a1);
}

void sub_D24798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  if (!LOBYTE(STACK[0x410])) {
    JUMPOUT(0xD24780);
  }
  JUMPOUT(0xD2477CLL);
}

void sub_D247B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  if (!LOBYTE(STACK[0x410])) {
    JUMPOUT(0xD24780);
  }
  JUMPOUT(0xD2477CLL);
}

void sub_D247C8()
{
  if (!LOBYTE(STACK[0x410])) {
    JUMPOUT(0xD24780);
  }
  JUMPOUT(0xD2477CLL);
}

void sub_D247D8()
{
}

void sub_D247E0()
{
}

void sub_D247E8()
{
}

void sub_D247F4()
{
}

void sub_D247FC()
{
}

void sub_D24804(void *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  JUMPOUT(0xD24790);
}

uint64_t sub_D24814(uint64_t a1, void ***a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)a1 = sub_35E640();
  *(_DWORD *)(a1 + 4) = sub_64A728();
  sub_DC6C70(a2, (void *)(a1 + 8));
  *(_DWORD *)(a1 + 32) = -1;
  *(void *)(a1 + 40) = -1;
  sub_DC6C8C((uint64_t)a2, a1 + 48);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0x3B9ACA0000000000;
  sub_DBC134((uint64_t)a2, a1 + 104);
  *(void *)(a1 + 208) = 0x7FFFFFFFFFFFFFFFLL;
  sub_DC522C((uint64_t)a2, a1 + 216);
  sub_DC59E8((uint64_t)a2, (char **)(a1 + 240));
  *(void *)(a1 + 264) = a3;
  *(void *)(a1 + 272) = a4;
  *(unsigned char *)(a1 + 280) = 0;
  return a1;
}

void sub_D248F0(_Unwind_Exception *a1)
{
  sub_47E060(v4);
  long long v7 = (void *)v2[22];
  if (v7)
  {
    v2[23] = v7;
    operator delete(v7);
  }
  int v8 = *v5;
  if (*v5)
  {
    v2[10] = v8;
    operator delete(v8);
  }
  sub_1A668(v3);
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_D24944(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

void sub_D24958(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      int v11 = *(char ***)(a1 + 8);
      int v12 = *(char ***)a1;
      if (v11 != v10)
      {
        int v13 = *(char ***)(a1 + 8);
        do
        {
          char v15 = *(v13 - 3);
          v13 -= 3;
          int v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          int v11 = v13;
        }
        while (v13 != v10);
        int v12 = *(char ***)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_40;
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= __sz) {
      uint64_t v21 = __sz;
    }
    unint64_t v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL) {
LABEL_40:
    }
      sub_2E00();
    uint64_t v23 = 3 * v22;
    int v24 = operator new(24 * v22);
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v24;
    *(void *)(a1 + 16) = &v24[v23];
    size_t v25 = sub_4444E4(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(void *)(a1 + 8) = v25;
    return;
  }
  int v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    uint64_t v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      uint64_t v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10) {
          sub_147D0(v10, *v6, v6[1], (v6[1] - *v6) >> 2);
        }
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      unint64_t v10 = *(char ***)(a1 + 8);
    }
    size_t v25 = sub_4444E4(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    uint64_t v19 = *(char ***)a1;
    do
    {
      if (v6 != v10) {
        sub_147D0(v10, *v6, v6[1], (v6[1] - *v6) >> 2);
      }
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    int v16 = *(char ***)(a1 + 8);
    if (v16 == v19) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  uint64_t v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    unint64_t v26 = v16;
    do
    {
      int v28 = *(v26 - 3);
      v26 -= 3;
      uint64_t v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      int v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(void *)(a1 + 8) = v19;
}

void sub_D24BC0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_D24BC8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

double sub_D24BD0(uint64_t a1, long long *a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *a3;
  long long v7 = a2[1];
  long long v8 = a2[2];
  long long v9 = a2[3];
  *(_DWORD *)(v5 + 63) = *(_DWORD *)((char *)a2 + 63);
  *(_OWORD *)(v5 + 32) = v8;
  *(_OWORD *)(v5 + 48) = v9;
  *(_OWORD *)(v5 + 16) = v7;
  long long v10 = *a2;
  *(void *)(v5 + 72) = 0;
  *(_OWORD *)uint64_t v5 = v10;
  *(void *)(v5 + 80) = 0;
  *(void *)(v5 + 88) = 0;
  int v12 = (unsigned char *)*((void *)a2 + 9);
  int v11 = (unsigned char *)*((void *)a2 + 10);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    int v14 = (char *)operator new(v11 - v12);
    *(void *)(v5 + 72) = v14;
    *(void *)(v5 + 80) = v14;
    char v15 = &v14[4 * (v13 >> 2)];
    *(void *)(v5 + 88) = v15;
    memcpy(v14, v12, v13);
    *(void *)(v5 + 80) = v15;
  }
  int v16 = *((_DWORD *)a2 + 24);
  *(unsigned char *)(v5 + 100) = *((unsigned char *)a2 + 100);
  *(_DWORD *)(v5 + 96) = v16;
  *(_DWORD *)(v5 + 108) = 0;
  *(_DWORD *)(v5 + 112) = 0;
  *(_DWORD *)(v5 + 104) = v6;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(unsigned char *)(v5 + 216) = 0;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_OWORD *)(v5 + 288) = 0u;
  *(void *)(v5 + 304) = 0;
  *(_OWORD *)(v5 + 312) = xmmword_20B8E30;
  double result = NAN;
  *(void *)(v5 + 328) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(v5 + 344) = 0;
  *(void *)(v5 + 352) = 0;
  *(_DWORD *)(v5 + 360) = 0;
  *(void *)(v5 + 336) = 0;
  *(unsigned char *)(v5 + 368) = 0;
  *(_DWORD *)(v5 + 372) = 0;
  *(void *)(a1 + 8) = v5 + 376;
  return result;
}

void sub_D24D04(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v2;
  if (*v2)
  {
    *(void *)(v3 + 80) = v5;
    operator delete(v5);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

char *sub_D24D24(uint64_t *a1, long long *a2, int *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = 0x51B3BEA3677D46CFLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0xAE4C415C9882B9) {
    sub_2E00();
  }
  if (0xA3677D46CEFA8D9ELL * ((a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0xA3677D46CEFA8D9ELL * ((a1[2] - v4) >> 3);
  }
  if ((unint64_t)(0x51B3BEA3677D46CFLL * ((a1[2] - v4) >> 3)) >= 0x572620AE4C415CLL) {
    unint64_t v9 = 0xAE4C415C9882B9;
  }
  else {
    unint64_t v9 = v6;
  }
  uint64_t v27 = a1[1];
  if (v9)
  {
    if (v9 > 0xAE4C415C9882B9) {
      sub_188D718();
    }
    long long v10 = (char *)operator new(376 * v9);
  }
  else
  {
    long long v10 = 0;
  }
  int v11 = &v10[376 * v5];
  size_t v25 = &v10[376 * v9];
  int v26 = *a3;
  long long v12 = a2[3];
  *((_OWORD *)v11 + 2) = a2[2];
  *((_OWORD *)v11 + 3) = v12;
  *(_DWORD *)(v11 + 63) = *(_DWORD *)((char *)a2 + 63);
  long long v14 = *a2;
  long long v13 = a2[1];
  *((void *)v11 + 9) = 0;
  *(_OWORD *)int v11 = v14;
  *((_OWORD *)v11 + 1) = v13;
  *((void *)v11 + 10) = 0;
  *((void *)v11 + 11) = 0;
  int v16 = (unsigned char *)*((void *)a2 + 9);
  char v15 = (unsigned char *)*((void *)a2 + 10);
  int64_t v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0) {
      sub_2E00();
    }
    uint64_t v18 = (char *)operator new(v15 - v16);
    *((void *)v11 + 9) = v18;
    *((void *)v11 + 10) = v18;
    uint64_t v19 = &v18[4 * (v17 >> 2)];
    *((void *)v11 + 11) = v19;
    memcpy(v18, v16, v17);
    *((void *)v11 + 10) = v19;
  }
  *((_DWORD *)v11 + 24) = *((_DWORD *)a2 + 24);
  v11[100] = *((unsigned char *)a2 + 100);
  uint64_t v20 = (uint64_t)&v10[376 * v5];
  *(_DWORD *)(v20 + 108) = 0;
  *(_DWORD *)(v20 + 112) = 0;
  *(_DWORD *)(v20 + 104) = v26;
  *(_OWORD *)(v20 + 120) = 0u;
  *(_OWORD *)(v20 + 136) = 0u;
  *(_OWORD *)(v20 + 152) = 0u;
  *(_OWORD *)(v20 + 168) = 0u;
  *(_OWORD *)(v20 + 184) = 0u;
  *(_OWORD *)(v20 + 200) = 0u;
  *(unsigned char *)(v20 + 216) = 0;
  *(_OWORD *)(v20 + 224) = 0u;
  *(_OWORD *)(v20 + 240) = 0u;
  *(_OWORD *)(v20 + 256) = 0u;
  *(_OWORD *)(v20 + 272) = 0u;
  *(_OWORD *)(v20 + 288) = 0u;
  *(void *)(v20 + 304) = 0;
  *(_OWORD *)(v20 + 312) = xmmword_20B8E30;
  *(void *)(v20 + 328) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(v20 + 344) = 0;
  *(void *)(v20 + 352) = 0;
  *(_DWORD *)(v20 + 360) = 0;
  *(void *)(v20 + 336) = 0;
  *(unsigned char *)(v20 + 368) = 0;
  *(_DWORD *)(v20 + 372) = 0;
  sub_484124((uint64_t)(a1 + 2), v27, v27, v4, v4, v20, v20);
  unint64_t v22 = (void *)*a1;
  uint64_t v21 = a1[1];
  *a1 = v23;
  a1[1] = (uint64_t)(v11 + 376);
  for (a1[2] = (uint64_t)v25; (void *)v21 != v22; uint64_t v21 = sub_402C7C(v21 - 376))
    ;
  if (v22) {
    operator delete(v22);
  }
  return v11 + 376;
}

void sub_D24F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4840D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D24FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  long long v7 = *v5;
  if (*v5)
  {
    *(void *)(v4 + 80) = v7;
    operator delete(v7);
  }
  sub_4840D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D24FC4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "DrivingUpdateSelectionModule");
  uint64_t v5 = (unint64_t *)(a2 + 40);
  unint64_t v4 = *(void *)(a2 + 40);
  LOBYTE(v9) = 1;
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 >= v4)
  {
    unint64_t v7 = sub_C947F8((uint64_t *)(a2 + 24), "Runtime", (char *)&v9, (uint64_t *)a1);
    *(void *)(a2 + 32) = v7;
    if (*(_DWORD *)(a1 + 8)) {
      goto LABEL_9;
    }
  }
  else
  {
    sub_C949C8(a2 + 40, *(void *)(a2 + 32), "Runtime", (char *)&v9, (uint64_t *)a1);
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 32) = v7;
    if (*(_DWORD *)(a1 + 8)) {
      goto LABEL_9;
    }
  }
  char v10 = 4;
  int v9 = 1;
  if (v7 >= *v5)
  {
    unint64_t v7 = sub_D2576C((uint64_t *)(a2 + 24), "Savings.none", &v10, &v9);
    *(void *)(a2 + 32) = v7;
    if (!*(_DWORD *)(a1 + 8)) {
      goto LABEL_29;
    }
  }
  else
  {
    sub_D2593C(a2 + 40, v7, "Savings.none", &v10, &v9);
    v7 += 48;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 32) = v7;
    if (!*(_DWORD *)(a1 + 8)) {
      goto LABEL_29;
    }
  }
LABEL_9:
  char v10 = 4;
  int v9 = 1;
  if (v7 >= *v5)
  {
    unint64_t v7 = sub_D25AA8((uint64_t *)(a2 + 24), "Savings.>0s", &v10, &v9);
    *(void *)(a2 + 32) = v7;
    if (*(_DWORD *)(a1 + 8) < 0x3Du) {
      goto LABEL_29;
    }
  }
  else
  {
    sub_D25C78(a2 + 40, v7, "Savings.>0s", &v10, &v9);
    v7 += 48;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 32) = v7;
    if (*(_DWORD *)(a1 + 8) < 0x3Du) {
      goto LABEL_29;
    }
  }
  char v10 = 4;
  int v9 = 1;
  if (v7 >= *v5)
  {
    unint64_t v7 = sub_D2576C((uint64_t *)(a2 + 24), "Savings.>60s", &v10, &v9);
    *(void *)(a2 + 32) = v7;
    if (*(_DWORD *)(a1 + 8) < 0x5Bu) {
      goto LABEL_29;
    }
  }
  else
  {
    sub_D2593C(a2 + 40, v7, "Savings.>60s", &v10, &v9);
    v7 += 48;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 32) = v7;
    if (*(_DWORD *)(a1 + 8) < 0x5Bu) {
      goto LABEL_29;
    }
  }
  char v10 = 4;
  int v9 = 1;
  if (v7 >= *v5)
  {
    unint64_t v7 = sub_D2576C((uint64_t *)(a2 + 24), "Savings.>90s", &v10, &v9);
    *(void *)(a2 + 32) = v7;
    if (*(_DWORD *)(a1 + 8) < 0x79u) {
      goto LABEL_29;
    }
  }
  else
  {
    sub_D2593C(a2 + 40, v7, "Savings.>90s", &v10, &v9);
    v7 += 48;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 32) = v7;
    if (*(_DWORD *)(a1 + 8) < 0x79u) {
      goto LABEL_29;
    }
  }
  char v10 = 4;
  int v9 = 1;
  if (v7 >= *v5)
  {
    unint64_t v7 = sub_D25DE4((uint64_t *)(a2 + 24), "Savings.>120s", &v10, &v9);
    *(void *)(a2 + 32) = v7;
    if (*(_DWORD *)(a1 + 8) < 0xB5u) {
      goto LABEL_29;
    }
  }
  else
  {
    sub_D25FB4(a2 + 40, v7, "Savings.>120s", &v10, &v9);
    v7 += 48;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 32) = v7;
    if (*(_DWORD *)(a1 + 8) < 0xB5u) {
      goto LABEL_29;
    }
  }
  char v10 = 4;
  int v9 = 1;
  if (v7 >= *v5)
  {
    unint64_t v7 = sub_D25DE4((uint64_t *)(a2 + 24), "Savings.>180s", &v10, &v9);
  }
  else
  {
    sub_D25FB4(a2 + 40, v7, "Savings.>180s", &v10, &v9);
    v7 += 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
LABEL_29:
  if (*(unsigned char *)(a1 + 12))
  {
    char v10 = 4;
    int v9 = 1;
    if (v7 >= *v5)
    {
      uint64_t v8 = sub_D193CC((uint64_t *)(a2 + 24), "PreventedDeclinedDetour", &v10, &v9);
    }
    else
    {
      sub_D1959C(a2 + 40, v7, "PreventedDeclinedDetour", &v10, &v9);
      uint64_t v8 = v7 + 48;
      *(void *)(a2 + 32) = v7 + 48;
    }
    *(void *)(a2 + 32) = v8;
  }
}

void sub_D253DC(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D253F0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D254B0(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D254C4(uint64_t *a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xF83E0F83E0F83E1 * ((v8 - *a1) >> 5) >= __sz)
  {
    uint64_t result = a1[1];
    if (0xF83E0F83E0F83E1 * ((result - v9) >> 5) >= __sz)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_46EB78(v9, v6);
          v6 += 1056;
          v9 += 1056;
          v23 += 1056;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_3AFFFC(result - 1056);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 32 * ((result - v9) >> 5);
      if (result != v9)
      {
        uint64_t v20 = 32 * ((result - v9) >> 5);
        do
        {
          uint64_t result = sub_46EB78(v9, v6);
          v6 += 1056;
          v9 += 1056;
          v20 -= 1056;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_3B181C(v9 + v22, v19 + v22);
          v22 += 1056;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      int v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_3AFFFC(v10 - 1056);
        while (v10 != v9);
        int v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x3E0F83E0F83E0FLL) {
      goto LABEL_37;
    }
    unint64_t v12 = 0xF83E0F83E0F83E1 * (v8 >> 5);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= __sz) {
      uint64_t v13 = __sz;
    }
    unint64_t v14 = v12 >= 0x1F07C1F07C1F07 ? 0x3E0F83E0F83E0FLL : v13;
    if (v14 > 0x3E0F83E0F83E0FLL) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 1056 * v14;
    uint64_t result = (uint64_t)operator new(1056 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_3B181C(v17 + v18, v6 + v18);
        v18 += 1056;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_D2576C(uint64_t *a1, char *a2, char *a3, int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    int v11 = (char *)operator new(48 * v10);
  }
  else
  {
    int v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D2593C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  unint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D25928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D2593C(int a1, uint64_t a2, char *__s, char *a4, int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D25A94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D25AA8(uint64_t *a1, char *a2, char *a3, int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    int v11 = (char *)operator new(48 * v10);
  }
  else
  {
    int v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D25C78(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D25C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D25C78(int a1, uint64_t a2, char *__s, char *a4, int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D25DD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D25DE4(uint64_t *a1, char *a2, char *a3, int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    int v11 = (char *)operator new(48 * v10);
  }
  else
  {
    int v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D25FB4(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D25FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D25FB4(int a1, uint64_t a2, char *__s, char *a4, int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D2610C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_D26120(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_CF216C((uint64_t)a1, *a3, a3[1], 0x51B3BEA3677D46CFLL * ((a3[1] - *a3) >> 3));
  double v16 = sub_DC0BA4(a2, a8, (uint64_t)(a1 + 3));
  a1[215] = a4;
  a1[216] = a5;
  a1[217] = a6;
  a1[218] = a8;
  a1[219] = a7;
  sub_5B98BC(a1 + 3, a9, v16);
  return a1;
}

void sub_D261D4(_Unwind_Exception *a1)
{
  sub_7379DC(v2);
  if (*v1) {
    sub_20AFF60((uint64_t)v1);
  }
  _Unwind_Resume(a1);
}

void sub_D26200(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "DrivingUpdateGuidanceModule");
  unint64_t v4 = *(void *)(a2 + 40);
  char v20 = 1;
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C947F8((uint64_t *)(a2 + 24), "Runtime", &v20, a1);
  }
  else
  {
    sub_C949C8(a2 + 40, *(void *)(a2 + 32), "Runtime", &v20, a1);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  char v19 = 4;
  int v18 = 1;
  if (v6 >= *(void *)(a2 + 40))
  {
    unint64_t v7 = sub_D1A0BC((uint64_t *)(a2 + 24), "ETAUGuidanceProcessed", &v19, &v18);
  }
  else
  {
    sub_D1A28C(a2 + 40, v6, "ETAUGuidanceProcessed", &v19, &v18);
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
  char v17 = 1;
  if (v7 >= *(void *)(a2 + 40))
  {
    unint64_t v8 = sub_C96850((uint64_t *)(a2 + 24), "UpdateUserRouteBuilding", &v17, a1 + 1);
  }
  else
  {
    sub_C96A20(a2 + 40, v7, "UpdateUserRouteBuilding", &v17, a1 + 1);
    unint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v8;
  }
  *(void *)(a2 + 32) = v8;
  char v16 = 1;
  if (v8 >= *(void *)(a2 + 40))
  {
    unint64_t v9 = sub_C96B8C((uint64_t *)(a2 + 24), "DodgeballDetection", &v16, a1 + 2);
  }
  else
  {
    sub_C96D5C(a2 + 40, v8, "DodgeballDetection", &v16, a1 + 2);
    unint64_t v9 = v8 + 48;
    *(void *)(a2 + 32) = v9;
  }
  *(void *)(a2 + 32) = v9;
  char v15 = 1;
  if (v9 >= *(void *)(a2 + 40))
  {
    unint64_t v10 = sub_C94B34((uint64_t *)(a2 + 24), "DodgeballPopulation", &v15, a1 + 3);
  }
  else
  {
    sub_C94D04(a2 + 40, v9, "DodgeballPopulation", &v15, a1 + 3);
    unint64_t v10 = v9 + 48;
    *(void *)(a2 + 32) = v10;
  }
  *(void *)(a2 + 32) = v10;
  char v14 = 1;
  if (v10 >= *(void *)(a2 + 40))
  {
    unint64_t v11 = sub_D288CC((uint64_t *)(a2 + 24), "AlternateGuidanceBuilding", &v14, a1 + 4);
  }
  else
  {
    sub_D28A9C(a2 + 40, v10, "AlternateGuidanceBuilding", &v14, a1 + 4);
    unint64_t v11 = v10 + 48;
    *(void *)(a2 + 32) = v11;
  }
  *(void *)(a2 + 32) = v11;
  char v13 = 1;
  if (v11 >= *(void *)(a2 + 40))
  {
    uint64_t v12 = sub_D28C08((uint64_t *)(a2 + 24), "DisplayETAUpdate", &v13, a1 + 5);
  }
  else
  {
    sub_D28DD8(a2 + 40, v11, "DisplayETAUpdate", &v13, a1 + 5);
    uint64_t v12 = v11 + 48;
    *(void *)(a2 + 32) = v11 + 48;
  }
  *(void *)(a2 + 32) = v12;
  sub_D26640(a1 + 6, (uint64_t *)(a2 + 24));
}

void sub_D264F8(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2650C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D265B4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D265C8(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void **sub_D265DC(void **a1)
{
  sub_7379DC((uint64_t)(a1 + 3));
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_402C7C(v3 - 376);
      while ((void *)v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_D26640(uint64_t *a1, uint64_t *a2)
{
  sub_D28F44(a1, a2);
  unint64_t v4 = operator new(0x38uLL);
  std::string __p = v4;
  long long v184 = xmmword_20B8DF0;
  strcpy((char *)v4, "Notification.InvalidUserRouteBecauseOfBlockingIncident");
  uint64_t v5 = a1[20];
  uint64_t v186 = v5;
  if (!v5) {
    goto LABEL_6;
  }
  char v185 = 4;
  unint64_t v6 = a2[1];
  if (v6 >= a2[2])
  {
    unint64_t v7 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v4, 0x36uLL);
    *(unsigned char *)(v6 + 24) = 4;
    *(void *)(v6 + 32) = v5;
    *(_DWORD *)(v6 + 40) = 1;
    unint64_t v7 = (char *)(v6 + 48);
    a2[1] = v6 + 48;
  }
  a2[1] = (uint64_t)v7;
  if (SHIBYTE(v184) < 0) {
LABEL_6:
  }
    operator delete(__p);
  unint64_t v8 = operator new(0x38uLL);
  std::string __p = v8;
  long long v184 = xmmword_20B99E0;
  strcpy((char *)v8, "Notification.InvalidUserRouteBecauseOfTimeRestriction");
  uint64_t v9 = a1[21];
  uint64_t v186 = v9;
  if (!v9) {
    goto LABEL_12;
  }
  char v185 = 4;
  unint64_t v10 = a2[1];
  if (v10 >= a2[2])
  {
    unint64_t v11 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v8, 0x35uLL);
    *(unsigned char *)(v10 + 24) = 4;
    *(void *)(v10 + 32) = v9;
    *(_DWORD *)(v10 + 40) = 1;
    unint64_t v11 = (char *)(v10 + 48);
    a2[1] = v10 + 48;
  }
  a2[1] = (uint64_t)v11;
  if (SHIBYTE(v184) < 0) {
LABEL_12:
  }
    operator delete(__p);
  uint64_t v12 = operator new(0x40uLL);
  std::string __p = v12;
  long long v184 = xmmword_20B9A70;
  strcpy((char *)v12, "Notification.InvalidUserRouteBecauseOfManeuverRestriction");
  uint64_t v13 = a1[22];
  uint64_t v186 = v13;
  if (!v13) {
    goto LABEL_18;
  }
  char v185 = 4;
  unint64_t v14 = a2[1];
  if (v14 >= a2[2])
  {
    char v15 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v12, 0x39uLL);
    *(unsigned char *)(v14 + 24) = 4;
    *(void *)(v14 + 32) = v13;
    *(_DWORD *)(v14 + 40) = 1;
    char v15 = (char *)(v14 + 48);
    a2[1] = v14 + 48;
  }
  a2[1] = (uint64_t)v15;
  if (SHIBYTE(v184) < 0) {
LABEL_18:
  }
    operator delete(__p);
  char v16 = operator new(0x38uLL);
  std::string __p = v16;
  long long v184 = xmmword_20B9AD0;
  strcpy((char *)v16, "Notification.InvalidUserRouteDetourFromBlockingIncident");
  uint64_t v17 = a1[23];
  uint64_t v186 = v17;
  if (!v17) {
    goto LABEL_24;
  }
  char v185 = 4;
  unint64_t v18 = a2[1];
  if (v18 >= a2[2])
  {
    char v19 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v16, 0x37uLL);
    *(unsigned char *)(v18 + 24) = 4;
    *(void *)(v18 + 32) = v17;
    *(_DWORD *)(v18 + 40) = 1;
    char v19 = (char *)(v18 + 48);
    a2[1] = v18 + 48;
  }
  a2[1] = (uint64_t)v19;
  if (SHIBYTE(v184) < 0) {
LABEL_24:
  }
    operator delete(__p);
  char v20 = operator new(0x38uLL);
  std::string __p = v20;
  long long v184 = xmmword_20B8DF0;
  strcpy((char *)v20, "Notification.InvalidUserRouteDetourFromTimeRestriction");
  uint64_t v21 = a1[24];
  uint64_t v186 = v21;
  if (!v21) {
    goto LABEL_30;
  }
  char v185 = 4;
  unint64_t v22 = a2[1];
  if (v22 >= a2[2])
  {
    uint64_t v23 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v20, 0x36uLL);
    *(unsigned char *)(v22 + 24) = 4;
    *(void *)(v22 + 32) = v21;
    *(_DWORD *)(v22 + 40) = 1;
    uint64_t v23 = (char *)(v22 + 48);
    a2[1] = v22 + 48;
  }
  a2[1] = (uint64_t)v23;
  if (SHIBYTE(v184) < 0) {
LABEL_30:
  }
    operator delete(__p);
  int v24 = operator new(0x40uLL);
  std::string __p = v24;
  long long v184 = xmmword_20B9A30;
  strcpy((char *)v24, "Notification.InvalidUserRouteDetourFromManeuverRestriction");
  uint64_t v25 = a1[25];
  uint64_t v186 = v25;
  if (!v25) {
    goto LABEL_36;
  }
  char v185 = 4;
  unint64_t v26 = a2[1];
  if (v26 >= a2[2])
  {
    uint64_t v27 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v24, 0x3AuLL);
    *(unsigned char *)(v26 + 24) = 4;
    *(void *)(v26 + 32) = v25;
    *(_DWORD *)(v26 + 40) = 1;
    uint64_t v27 = (char *)(v26 + 48);
    a2[1] = v26 + 48;
  }
  a2[1] = (uint64_t)v27;
  if (SHIBYTE(v184) < 0) {
LABEL_36:
  }
    operator delete(__p);
  int v28 = operator new(0x30uLL);
  std::string __p = v28;
  long long v184 = xmmword_20B93E0;
  strcpy((char *)v28, "Notification.SaferRouteAvoidingAreaIncident");
  uint64_t v29 = a1[26];
  uint64_t v186 = v29;
  if (!v29) {
    goto LABEL_42;
  }
  char v185 = 4;
  unint64_t v30 = a2[1];
  if (v30 >= a2[2])
  {
    int v31 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v28, 0x2BuLL);
    *(unsigned char *)(v30 + 24) = 4;
    *(void *)(v30 + 32) = v29;
    *(_DWORD *)(v30 + 40) = 1;
    int v31 = (char *)(v30 + 48);
    a2[1] = v30 + 48;
  }
  a2[1] = (uint64_t)v31;
  if (SHIBYTE(v184) < 0) {
LABEL_42:
  }
    operator delete(__p);
  size_t v32 = operator new(0x20uLL);
  std::string __p = v32;
  long long v184 = xmmword_20B91C0;
  strcpy((char *)v32, "Notification.FasterRoute");
  uint64_t v33 = a1[27];
  uint64_t v186 = v33;
  if (!v33) {
    goto LABEL_48;
  }
  char v185 = 4;
  unint64_t v34 = a2[1];
  if (v34 >= a2[2])
  {
    int v35 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v32, 0x18uLL);
    *(unsigned char *)(v34 + 24) = 4;
    *(void *)(v34 + 32) = v33;
    *(_DWORD *)(v34 + 40) = 1;
    int v35 = (char *)(v34 + 48);
    a2[1] = v34 + 48;
  }
  a2[1] = (uint64_t)v35;
  if (SHIBYTE(v184) < 0) {
LABEL_48:
  }
    operator delete(__p);
  char v36 = operator new(0x28uLL);
  std::string __p = v36;
  long long v184 = xmmword_20B8FD0;
  strcpy((char *)v36, "Notification.EvModifiedChargingStops");
  uint64_t v37 = a1[29];
  uint64_t v186 = v37;
  if (!v37) {
    goto LABEL_54;
  }
  char v185 = 4;
  unint64_t v38 = a2[1];
  if (v38 >= a2[2])
  {
    int v39 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v36, 0x24uLL);
    *(unsigned char *)(v38 + 24) = 4;
    *(void *)(v38 + 32) = v37;
    *(_DWORD *)(v38 + 40) = 1;
    int v39 = (char *)(v38 + 48);
    a2[1] = v38 + 48;
  }
  a2[1] = (uint64_t)v39;
  if (SHIBYTE(v184) < 0) {
LABEL_54:
  }
    operator delete(__p);
  char v40 = operator new(0x28uLL);
  std::string __p = v40;
  long long v184 = xmmword_20B93A0;
  strcpy((char *)v40, "Notification.EvNonFeasibleUserRoute");
  uint64_t v41 = a1[28];
  uint64_t v186 = v41;
  if (!v41) {
    goto LABEL_60;
  }
  char v185 = 4;
  unint64_t v42 = a2[1];
  if (v42 >= a2[2])
  {
    uint64_t v43 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v40, 0x23uLL);
    *(unsigned char *)(v42 + 24) = 4;
    *(void *)(v42 + 32) = v41;
    *(_DWORD *)(v42 + 40) = 1;
    uint64_t v43 = (char *)(v42 + 48);
    a2[1] = v42 + 48;
  }
  a2[1] = (uint64_t)v43;
  if (SHIBYTE(v184) < 0) {
LABEL_60:
  }
    operator delete(__p);
  uint64_t v44 = operator new(0x28uLL);
  std::string __p = v44;
  long long v184 = xmmword_20B9260;
  strcpy((char *)v44, "Notification.EvTowingNotSupported");
  uint64_t v45 = a1[30];
  uint64_t v186 = v45;
  if (!v45) {
    goto LABEL_66;
  }
  char v185 = 4;
  unint64_t v46 = a2[1];
  if (v46 >= a2[2])
  {
    int v47 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v44, 0x21uLL);
    *(unsigned char *)(v46 + 24) = 4;
    *(void *)(v46 + 32) = v45;
    *(_DWORD *)(v46 + 40) = 1;
    int v47 = (char *)(v46 + 48);
    a2[1] = v46 + 48;
  }
  a2[1] = (uint64_t)v47;
  if (SHIBYTE(v184) < 0) {
LABEL_66:
  }
    operator delete(__p);
  size_t v48 = operator new(0x28uLL);
  std::string __p = v48;
  long long v184 = xmmword_20E12D0;
  strcpy((char *)v48, "Notification.EvOEMAPPConnectionFailure");
  uint64_t v49 = a1[31];
  uint64_t v186 = v49;
  if (!v49) {
    goto LABEL_72;
  }
  char v185 = 4;
  unint64_t v50 = a2[1];
  if (v50 >= a2[2])
  {
    char v51 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v48, 0x26uLL);
    *(unsigned char *)(v50 + 24) = 4;
    *(void *)(v50 + 32) = v49;
    *(_DWORD *)(v50 + 40) = 1;
    char v51 = (char *)(v50 + 48);
    a2[1] = v50 + 48;
  }
  a2[1] = (uint64_t)v51;
  if (SHIBYTE(v184) < 0) {
LABEL_72:
  }
    operator delete(__p);
  size_t v52 = operator new(0x30uLL);
  std::string __p = v52;
  long long v184 = xmmword_20E1380;
  strcpy((char *)v52, "Notification.EvOEMAPPConnectionReestablished");
  uint64_t v53 = a1[32];
  uint64_t v186 = v53;
  if (!v53) {
    goto LABEL_78;
  }
  char v185 = 4;
  unint64_t v54 = a2[1];
  if (v54 >= a2[2])
  {
    int v55 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v52, 0x2CuLL);
    *(unsigned char *)(v54 + 24) = 4;
    *(void *)(v54 + 32) = v53;
    *(_DWORD *)(v54 + 40) = 1;
    int v55 = (char *)(v54 + 48);
    a2[1] = v54 + 48;
  }
  a2[1] = (uint64_t)v55;
  if (SHIBYTE(v184) < 0) {
LABEL_78:
  }
    operator delete(__p);
  char v56 = operator new(0x38uLL);
  std::string __p = v56;
  long long v184 = xmmword_20B8DF0;
  strcpy((char *)v56, "Notification.EVNonFeasibleUserRouteDetourWithMoreStops");
  uint64_t v57 = a1[33];
  uint64_t v186 = v57;
  if (!v57) {
    goto LABEL_84;
  }
  char v185 = 4;
  unint64_t v58 = a2[1];
  if (v58 >= a2[2])
  {
    int v59 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v56, 0x36uLL);
    *(unsigned char *)(v58 + 24) = 4;
    *(void *)(v58 + 32) = v57;
    *(_DWORD *)(v58 + 40) = 1;
    int v59 = (char *)(v58 + 48);
    a2[1] = v58 + 48;
  }
  a2[1] = (uint64_t)v59;
  if (SHIBYTE(v184) < 0) {
LABEL_84:
  }
    operator delete(__p);
  char v60 = operator new(0x38uLL);
  std::string __p = v60;
  long long v184 = xmmword_20B9AD0;
  strcpy((char *)v60, "Notification.EVLastChanceToAddStopsForEVInfeasibleRoute");
  uint64_t v61 = a1[34];
  uint64_t v186 = v61;
  if (!v61) {
    goto LABEL_90;
  }
  char v185 = 4;
  unint64_t v62 = a2[1];
  if (v62 >= a2[2])
  {
    unint64_t v63 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v60, 0x37uLL);
    *(unsigned char *)(v62 + 24) = 4;
    *(void *)(v62 + 32) = v61;
    *(_DWORD *)(v62 + 40) = 1;
    unint64_t v63 = (char *)(v62 + 48);
    a2[1] = v62 + 48;
  }
  a2[1] = (uint64_t)v63;
  if (SHIBYTE(v184) < 0) {
LABEL_90:
  }
    operator delete(__p);
  unint64_t v64 = operator new(0x40uLL);
  std::string __p = v64;
  long long v184 = xmmword_20B92B0;
  strcpy((char *)v64, "Notification.EVDifferentRouteWithMoreStopsForEVInfeasibleRoute");
  uint64_t v65 = a1[35];
  uint64_t v186 = v65;
  if (!v65) {
    goto LABEL_96;
  }
  char v185 = 4;
  unint64_t v66 = a2[1];
  if (v66 >= a2[2])
  {
    unint64_t v67 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v64, 0x3EuLL);
    *(unsigned char *)(v66 + 24) = 4;
    *(void *)(v66 + 32) = v65;
    *(_DWORD *)(v66 + 40) = 1;
    unint64_t v67 = (char *)(v66 + 48);
    a2[1] = v66 + 48;
  }
  a2[1] = (uint64_t)v67;
  if (SHIBYTE(v184) < 0) {
LABEL_96:
  }
    operator delete(__p);
  unint64_t v68 = operator new(0x50uLL);
  std::string __p = v68;
  long long v184 = xmmword_20B99B0;
  strcpy((char *)v68, "Notification.EVLastChanceDifferentRouteWithMoreStopsForEVInfeasibleRoute");
  uint64_t v69 = a1[36];
  uint64_t v186 = v69;
  if (!v69) {
    goto LABEL_102;
  }
  char v185 = 4;
  unint64_t v70 = a2[1];
  if (v70 >= a2[2])
  {
    uint64_t v71 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v68, 0x48uLL);
    *(unsigned char *)(v70 + 24) = 4;
    *(void *)(v70 + 32) = v69;
    *(_DWORD *)(v70 + 40) = 1;
    uint64_t v71 = (char *)(v70 + 48);
    a2[1] = v70 + 48;
  }
  a2[1] = (uint64_t)v71;
  if (SHIBYTE(v184) < 0) {
LABEL_102:
  }
    operator delete(__p);
  uint64_t v72 = operator new(0x48uLL);
  std::string __p = v72;
  long long v184 = xmmword_20B92A0;
  strcpy((char *)v72, "Notification.EVDifferentRouteWithSameNumberOfStopsForEVInfeasibleRoute");
  uint64_t v73 = a1[37];
  uint64_t v186 = v73;
  if (!v73) {
    goto LABEL_108;
  }
  char v185 = 4;
  unint64_t v74 = a2[1];
  if (v74 >= a2[2])
  {
    uint64_t v75 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v72, 0x46uLL);
    *(unsigned char *)(v74 + 24) = 4;
    *(void *)(v74 + 32) = v73;
    *(_DWORD *)(v74 + 40) = 1;
    uint64_t v75 = (char *)(v74 + 48);
    a2[1] = v74 + 48;
  }
  a2[1] = (uint64_t)v75;
  if (SHIBYTE(v184) < 0) {
LABEL_108:
  }
    operator delete(__p);
  uint64_t v76 = operator new(0x58uLL);
  std::string __p = v76;
  long long v184 = xmmword_20EB460;
  strcpy((char *)v76, "Notification.EVLastChanceDifferentRouteWithSameNumberOfStopsForEVInfeasibleRoute");
  uint64_t v77 = a1[38];
  uint64_t v186 = v77;
  if (!v77) {
    goto LABEL_114;
  }
  char v185 = 4;
  unint64_t v78 = a2[1];
  if (v78 >= a2[2])
  {
    uint64_t v79 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v76, 0x50uLL);
    *(unsigned char *)(v78 + 24) = 4;
    *(void *)(v78 + 32) = v77;
    *(_DWORD *)(v78 + 40) = 1;
    uint64_t v79 = (char *)(v78 + 48);
    a2[1] = v78 + 48;
  }
  a2[1] = (uint64_t)v79;
  if (SHIBYTE(v184) < 0) {
LABEL_114:
  }
    operator delete(__p);
  uint64_t v80 = operator new(0x40uLL);
  std::string __p = v80;
  long long v184 = xmmword_20F0510;
  strcpy((char *)v80, "Notification.EVDetourWithHigherArrivalSOCForInfeasibleUserRoute");
  uint64_t v81 = a1[39];
  uint64_t v186 = v81;
  if (!v81) {
    goto LABEL_120;
  }
  char v185 = 4;
  unint64_t v82 = a2[1];
  if (v82 >= a2[2])
  {
    uint64_t v83 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v80, 0x3FuLL);
    *(unsigned char *)(v82 + 24) = 4;
    *(void *)(v82 + 32) = v81;
    *(_DWORD *)(v82 + 40) = 1;
    uint64_t v83 = (char *)(v82 + 48);
    a2[1] = v82 + 48;
  }
  a2[1] = (uint64_t)v83;
  if (SHIBYTE(v184) < 0) {
LABEL_120:
  }
    operator delete(__p);
  long long v84 = operator new(0x38uLL);
  std::string __p = v84;
  long long v184 = xmmword_20B9A20;
  strcpy((char *)v84, "Notification.EVNonFeasibleUserRouteDetourOnLastLeg");
  uint64_t v85 = a1[43];
  uint64_t v186 = v85;
  if (!v85) {
    goto LABEL_126;
  }
  char v185 = 4;
  unint64_t v86 = a2[1];
  if (v86 >= a2[2])
  {
    uint64_t v87 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v84, 0x32uLL);
    *(unsigned char *)(v86 + 24) = 4;
    *(void *)(v86 + 32) = v85;
    *(_DWORD *)(v86 + 40) = 1;
    uint64_t v87 = (char *)(v86 + 48);
    a2[1] = v86 + 48;
  }
  a2[1] = (uint64_t)v87;
  if (SHIBYTE(v184) < 0) {
LABEL_126:
  }
    operator delete(__p);
  uint64_t v88 = operator new(0x30uLL);
  std::string __p = v88;
  long long v184 = xmmword_20B93D0;
  strcpy((char *)v88, "Notification.EVDetourWithHigherArrivalSOC");
  uint64_t v89 = a1[40];
  uint64_t v186 = v89;
  if (!v89) {
    goto LABEL_132;
  }
  char v185 = 4;
  unint64_t v90 = a2[1];
  if (v90 >= a2[2])
  {
    long long v91 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v88, 0x29uLL);
    *(unsigned char *)(v90 + 24) = 4;
    *(void *)(v90 + 32) = v89;
    *(_DWORD *)(v90 + 40) = 1;
    long long v91 = (char *)(v90 + 48);
    a2[1] = v90 + 48;
  }
  a2[1] = (uint64_t)v91;
  if (SHIBYTE(v184) < 0) {
LABEL_132:
  }
    operator delete(__p);
  uint64_t v92 = operator new(0x28uLL);
  std::string __p = v92;
  long long v184 = xmmword_20E12D0;
  strcpy((char *)v92, "Notification.NewRouteMoreChargingStops");
  uint64_t v93 = a1[41];
  uint64_t v186 = v93;
  if (!v93) {
    goto LABEL_138;
  }
  char v185 = 4;
  unint64_t v94 = a2[1];
  if (v94 >= a2[2])
  {
    uint64_t v95 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v92, 0x26uLL);
    *(unsigned char *)(v94 + 24) = 4;
    *(void *)(v94 + 32) = v93;
    *(_DWORD *)(v94 + 40) = 1;
    uint64_t v95 = (char *)(v94 + 48);
    a2[1] = v94 + 48;
  }
  a2[1] = (uint64_t)v95;
  if (SHIBYTE(v184) < 0) {
LABEL_138:
  }
    operator delete(__p);
  uint64_t v96 = operator new(0x28uLL);
  std::string __p = v96;
  long long v184 = xmmword_20E12D0;
  strcpy((char *)v96, "Notification.NewRouteLessChargingStops");
  uint64_t v97 = a1[42];
  uint64_t v186 = v97;
  if (!v97) {
    goto LABEL_144;
  }
  char v185 = 4;
  unint64_t v98 = a2[1];
  if (v98 >= a2[2])
  {
    uint64_t v99 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v96, 0x26uLL);
    *(unsigned char *)(v98 + 24) = 4;
    *(void *)(v98 + 32) = v97;
    *(_DWORD *)(v98 + 40) = 1;
    uint64_t v99 = (char *)(v98 + 48);
    a2[1] = v98 + 48;
  }
  a2[1] = (uint64_t)v99;
  if (SHIBYTE(v184) < 0) {
LABEL_144:
  }
    operator delete(__p);
  char v100 = operator new(0x30uLL);
  std::string __p = v100;
  long long v184 = xmmword_20B93C0;
  strcpy((char *)v100, "Notification.EvOfflineToOnlineTransition");
  uint64_t v101 = a1[49];
  uint64_t v186 = v101;
  if (!v101) {
    goto LABEL_150;
  }
  char v185 = 4;
  unint64_t v102 = a2[1];
  if (v102 >= a2[2])
  {
    uint64_t v103 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v100, 0x28uLL);
    *(unsigned char *)(v102 + 24) = 4;
    *(void *)(v102 + 32) = v101;
    *(_DWORD *)(v102 + 40) = 1;
    uint64_t v103 = (char *)(v102 + 48);
    a2[1] = v102 + 48;
  }
  a2[1] = (uint64_t)v103;
  if (SHIBYTE(v184) < 0) {
LABEL_150:
  }
    operator delete(__p);
  __int16 v104 = operator new(0x20uLL);
  std::string __p = v104;
  long long v184 = xmmword_20B8870;
  strcpy((char *)v104, "Notification.EvOfflineSAR");
  uint64_t v105 = a1[48];
  uint64_t v186 = v105;
  if (!v105) {
    goto LABEL_156;
  }
  char v185 = 4;
  unint64_t v106 = a2[1];
  if (v106 >= a2[2])
  {
    uint64_t v107 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v104, 0x19uLL);
    *(unsigned char *)(v106 + 24) = 4;
    *(void *)(v106 + 32) = v105;
    *(_DWORD *)(v106 + 40) = 1;
    uint64_t v107 = (char *)(v106 + 48);
    a2[1] = v106 + 48;
  }
  a2[1] = (uint64_t)v107;
  if (SHIBYTE(v184) < 0) {
LABEL_156:
  }
    operator delete(__p);
  long long v108 = operator new(0x28uLL);
  std::string __p = v108;
  long long v184 = xmmword_20B8FD0;
  strcpy((char *)v108, "Notification.OfflineToOnlineNewRoute");
  uint64_t v109 = a1[50];
  uint64_t v186 = v109;
  if (!v109) {
    goto LABEL_162;
  }
  char v185 = 4;
  unint64_t v110 = a2[1];
  if (v110 >= a2[2])
  {
    uint64_t v111 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v108, 0x24uLL);
    *(unsigned char *)(v110 + 24) = 4;
    *(void *)(v110 + 32) = v109;
    *(_DWORD *)(v110 + 40) = 1;
    uint64_t v111 = (char *)(v110 + 48);
    a2[1] = v110 + 48;
  }
  a2[1] = (uint64_t)v111;
  if (SHIBYTE(v184) < 0) {
LABEL_162:
  }
    operator delete(__p);
  uint64_t v112 = operator new(0x20uLL);
  std::string __p = v112;
  long long v184 = xmmword_20B5EB0;
  strcpy((char *)v112, "Notification.LPROfflineSar");
  uint64_t v113 = a1[44];
  uint64_t v186 = v113;
  if (!v113) {
    goto LABEL_168;
  }
  char v185 = 4;
  unint64_t v114 = a2[1];
  if (v114 >= a2[2])
  {
    uint64_t v115 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v112, 0x1AuLL);
    *(unsigned char *)(v114 + 24) = 4;
    *(void *)(v114 + 32) = v113;
    *(_DWORD *)(v114 + 40) = 1;
    uint64_t v115 = (char *)(v114 + 48);
    a2[1] = v114 + 48;
  }
  a2[1] = (uint64_t)v115;
  if (SHIBYTE(v184) < 0) {
LABEL_168:
  }
    operator delete(__p);
  uint64_t v116 = operator new(0x20uLL);
  std::string __p = v116;
  long long v184 = xmmword_20B9800;
  strcpy((char *)v116, "Notification.LPROfflineReroute");
  uint64_t v117 = a1[45];
  uint64_t v186 = v117;
  if (!v117) {
    goto LABEL_174;
  }
  char v185 = 4;
  unint64_t v118 = a2[1];
  if (v118 >= a2[2])
  {
    uint64_t v119 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v116, 0x1EuLL);
    *(unsigned char *)(v118 + 24) = 4;
    *(void *)(v118 + 32) = v117;
    *(_DWORD *)(v118 + 40) = 1;
    uint64_t v119 = (char *)(v118 + 48);
    a2[1] = v118 + 48;
  }
  a2[1] = (uint64_t)v119;
  if (SHIBYTE(v184) < 0) {
LABEL_174:
  }
    operator delete(__p);
  long long v120 = operator new(0x20uLL);
  std::string __p = v120;
  long long v184 = xmmword_20B91B0;
  strcpy((char *)v120, "Notification.EBikeOfflineSar");
  uint64_t v121 = a1[46];
  uint64_t v186 = v121;
  if (!v121) {
    goto LABEL_180;
  }
  char v185 = 4;
  unint64_t v122 = a2[1];
  if (v122 >= a2[2])
  {
    uint64_t v123 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v120, 0x1CuLL);
    *(unsigned char *)(v122 + 24) = 4;
    *(void *)(v122 + 32) = v121;
    *(_DWORD *)(v122 + 40) = 1;
    uint64_t v123 = (char *)(v122 + 48);
    a2[1] = v122 + 48;
  }
  a2[1] = (uint64_t)v123;
  if (SHIBYTE(v184) < 0) {
LABEL_180:
  }
    operator delete(__p);
  long long v124 = operator new(0x28uLL);
  std::string __p = v124;
  long long v184 = xmmword_20B9390;
  strcpy((char *)v124, "Notification.EBikeOfflineReroute");
  uint64_t v125 = a1[47];
  uint64_t v186 = v125;
  if (!v125) {
    goto LABEL_186;
  }
  char v185 = 4;
  unint64_t v126 = a2[1];
  if (v126 >= a2[2])
  {
    uint64_t v127 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v124, 0x20uLL);
    *(unsigned char *)(v126 + 24) = 4;
    *(void *)(v126 + 32) = v125;
    *(_DWORD *)(v126 + 40) = 1;
    uint64_t v127 = (char *)(v126 + 48);
    a2[1] = v126 + 48;
  }
  a2[1] = (uint64_t)v127;
  if (SHIBYTE(v184) < 0) {
LABEL_186:
  }
    operator delete(__p);
  uint64_t v128 = operator new(0x30uLL);
  std::string __p = v128;
  long long v184 = xmmword_20B9A80;
  strcpy((char *)v128, "Notification.IncidentsCausingTrafficDelayAhead");
  uint64_t v129 = a1[19];
  uint64_t v186 = v129;
  if (!v129) {
    goto LABEL_192;
  }
  char v185 = 4;
  unint64_t v130 = a2[1];
  if (v130 >= a2[2])
  {
    std::error_condition v131 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v128, 0x2EuLL);
    *(unsigned char *)(v130 + 24) = 4;
    *(void *)(v130 + 32) = v129;
    *(_DWORD *)(v130 + 40) = 1;
    std::error_condition v131 = (char *)(v130 + 48);
    a2[1] = v130 + 48;
  }
  a2[1] = (uint64_t)v131;
  if (SHIBYTE(v184) < 0) {
LABEL_192:
  }
    operator delete(__p);
  std::string v132 = operator new(0x28uLL);
  std::string __p = v132;
  long long v184 = xmmword_20B8FD0;
  strcpy((char *)v132, "Notification.NonVotableIncidentAhead");
  uint64_t v133 = a1[9];
  uint64_t v186 = v133;
  if (!v133) {
    goto LABEL_198;
  }
  char v185 = 4;
  unint64_t v134 = a2[1];
  if (v134 >= a2[2])
  {
    int64_t v135 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v132, 0x24uLL);
    *(unsigned char *)(v134 + 24) = 4;
    *(void *)(v134 + 32) = v133;
    *(_DWORD *)(v134 + 40) = 1;
    int64_t v135 = (char *)(v134 + 48);
    a2[1] = v134 + 48;
  }
  a2[1] = (uint64_t)v135;
  if (SHIBYTE(v184) < 0) {
LABEL_198:
  }
    operator delete(__p);
  uint64_t v136 = operator new(0x28uLL);
  std::string __p = v136;
  long long v184 = xmmword_20B9260;
  strcpy((char *)v136, "Notification.VotableIncidentAhead");
  uint64_t v137 = a1[1];
  uint64_t v186 = v137;
  if (!v137) {
    goto LABEL_204;
  }
  char v185 = 4;
  unint64_t v138 = a2[1];
  if (v138 >= a2[2])
  {
    long long v139 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v136, 0x21uLL);
    *(unsigned char *)(v138 + 24) = 4;
    *(void *)(v138 + 32) = v137;
    *(_DWORD *)(v138 + 40) = 1;
    long long v139 = (char *)(v138 + 48);
    a2[1] = v138 + 48;
  }
  a2[1] = (uint64_t)v139;
  if (SHIBYTE(v184) < 0) {
LABEL_204:
  }
    operator delete(__p);
  long long v140 = operator new(0x20uLL);
  std::string __p = v140;
  long long v184 = xmmword_20B9800;
  strcpy((char *)v140, "Notification.AreaIncidentAhead");
  uint64_t v141 = a1[18];
  uint64_t v186 = v141;
  if (!v141) {
    goto LABEL_210;
  }
  char v185 = 4;
  unint64_t v142 = a2[1];
  if (v142 >= a2[2])
  {
    unsigned __int8 v143 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v140, 0x1EuLL);
    *(unsigned char *)(v142 + 24) = 4;
    *(void *)(v142 + 32) = v141;
    *(_DWORD *)(v142 + 40) = 1;
    unsigned __int8 v143 = (char *)(v142 + 48);
    a2[1] = v142 + 48;
  }
  a2[1] = (uint64_t)v143;
  if (SHIBYTE(v184) < 0) {
LABEL_210:
  }
    operator delete(__p);
  uint64_t v144 = operator new(0x28uLL);
  std::string __p = v144;
  long long v184 = xmmword_20B9390;
  strcpy((char *)v144, "Notification.CongestionZoneAhead");
  uint64_t v145 = a1[17];
  uint64_t v186 = v145;
  if (!v145) {
    goto LABEL_218;
  }
  char v185 = 4;
  unint64_t v146 = a2[1];
  if (v146 >= a2[2])
  {
    std::error_condition v147 = sub_D29918((char **)a2, (uint64_t)&__p, &v185, &v186);
  }
  else
  {
    sub_4200((unsigned char *)a2[1], v144, 0x20uLL);
    *(unsigned char *)(v146 + 24) = 4;
    *(void *)(v146 + 32) = v145;
    *(_DWORD *)(v146 + 40) = 1;
    std::error_condition v147 = (char *)(v146 + 48);
    a2[1] = v146 + 48;
  }
  a2[1] = (uint64_t)v147;
  if (SHIBYTE(v184) < 0)
  {
LABEL_218:
    operator delete(__p);
    long long v148 = a1 + 10;
    if (!a1[10]) {
      goto LABEL_221;
    }
  }
  else
  {
    long long v148 = a1 + 10;
    if (!a1[10])
    {
LABEL_221:
      int v150 = a1 + 11;
      if (!a1[11]) {
        goto LABEL_222;
      }
      goto LABEL_237;
    }
  }
  LOBYTE(__p) = 4;
  unint64_t v149 = a2[1];
  if (v149 < a2[2])
  {
    sub_D29CFC(a2 + 16, a2[1], "Notification.PassiveAccidentAhead", (char *)&__p, v148);
    a2[1] = v149 + 48;
    a2[1] = v149 + 48;
    goto LABEL_221;
  }
  a2[1] = sub_D29B2C(a2, "Notification.PassiveAccidentAhead", (char *)&__p, v148);
  int v150 = a1 + 11;
  if (!a1[11])
  {
LABEL_222:
    long long v151 = a1 + 12;
    if (!a1[12]) {
      goto LABEL_223;
    }
LABEL_241:
    LOBYTE(__p) = 4;
    unint64_t v166 = a2[1];
    if (v166 >= a2[2])
    {
      a2[1] = sub_D2A1A4(a2, "Notification.PassiveConstructionAhead", (char *)&__p, v151);
      std::error_condition v152 = a1 + 14;
      if (a1[14]) {
        goto LABEL_245;
      }
    }
    else
    {
      sub_D2A374(a2 + 16, a2[1], "Notification.PassiveConstructionAhead", (char *)&__p, v151);
      a2[1] = v166 + 48;
      a2[1] = v166 + 48;
      std::error_condition v152 = a1 + 14;
      if (a1[14]) {
        goto LABEL_245;
      }
    }
LABEL_224:
    uint64_t v153 = a1 + 13;
    if (!a1[13]) {
      goto LABEL_225;
    }
LABEL_249:
    LOBYTE(__p) = 4;
    unint64_t v168 = a2[1];
    if (v168 >= a2[2])
    {
      a2[1] = sub_D2A4E0(a2, "Notification.PassiveLaneClosureAhead", (char *)&__p, v153);
      uint64_t v154 = a1 + 15;
      if (a1[15]) {
        goto LABEL_253;
      }
    }
    else
    {
      sub_D2A6B0(a2 + 16, a2[1], "Notification.PassiveLaneClosureAhead", (char *)&__p, v153);
      a2[1] = v168 + 48;
      a2[1] = v168 + 48;
      uint64_t v154 = a1 + 15;
      if (a1[15]) {
        goto LABEL_253;
      }
    }
LABEL_226:
    int v155 = a1 + 16;
    if (!a1[16]) {
      goto LABEL_227;
    }
LABEL_257:
    LOBYTE(__p) = 4;
    unint64_t v170 = a2[1];
    if (v170 >= a2[2])
    {
      a2[1] = sub_C96514(a2, "Notification.PassiveEventAhead", (char *)&__p, v155);
      uint64_t v156 = a1 + 2;
      if (a1[2]) {
        goto LABEL_261;
      }
    }
    else
    {
      sub_C966E4(a2 + 16, a2[1], "Notification.PassiveEventAhead", (char *)&__p, v155);
      a2[1] = v170 + 48;
      a2[1] = v170 + 48;
      uint64_t v156 = a1 + 2;
      if (a1[2]) {
        goto LABEL_261;
      }
    }
LABEL_228:
    long long v157 = a1 + 3;
    if (!a1[3]) {
      goto LABEL_229;
    }
LABEL_265:
    LOBYTE(__p) = 4;
    unint64_t v172 = a2[1];
    if (v172 >= a2[2])
    {
      a2[1] = sub_D29E68(a2, "Notification.VotableHazardAhead", (char *)&__p, v157);
      uint64_t v158 = a1 + 4;
      if (a1[4]) {
        goto LABEL_269;
      }
    }
    else
    {
      sub_D2A038(a2 + 16, a2[1], "Notification.VotableHazardAhead", (char *)&__p, v157);
      a2[1] = v172 + 48;
      a2[1] = v172 + 48;
      uint64_t v158 = a1 + 4;
      if (a1[4]) {
        goto LABEL_269;
      }
    }
LABEL_230:
    uint64_t v159 = a1 + 6;
    if (!a1[6]) {
      goto LABEL_231;
    }
LABEL_273:
    LOBYTE(__p) = 4;
    unint64_t v174 = a2[1];
    if (v174 >= a2[2])
    {
      a2[1] = sub_354924(a2, "Notification.VotableSpeedTrapAhead", (char *)&__p, v159);
      long long v160 = a1 + 5;
      if (a1[5]) {
        goto LABEL_277;
      }
    }
    else
    {
      sub_354AF4(a2 + 16, a2[1], "Notification.VotableSpeedTrapAhead", (char *)&__p, v159);
      a2[1] = v174 + 48;
      a2[1] = v174 + 48;
      long long v160 = a1 + 5;
      if (a1[5]) {
        goto LABEL_277;
      }
    }
LABEL_232:
    char v161 = a1 + 7;
    if (!a1[7]) {
      goto LABEL_233;
    }
LABEL_281:
    LOBYTE(__p) = 4;
    unint64_t v176 = a2[1];
    if (v176 >= a2[2])
    {
      a2[1] = sub_C95B60(a2, "Notification.VotableTrafficAhead", (char *)&__p, v161);
      char v162 = a1 + 8;
      if (a1[8]) {
        goto LABEL_285;
      }
    }
    else
    {
      sub_C95D30(a2 + 16, a2[1], "Notification.VotableTrafficAhead", (char *)&__p, v161);
      a2[1] = v176 + 48;
      a2[1] = v176 + 48;
      char v162 = a1 + 8;
      if (a1[8]) {
        goto LABEL_285;
      }
    }
LABEL_234:
    char v163 = (uint64_t *)a1[51];
    long long v164 = (uint64_t *)a1[52];
    if (v163 == v164) {
      return;
    }
    goto LABEL_289;
  }
LABEL_237:
  LOBYTE(__p) = 4;
  unint64_t v165 = a2[1];
  if (v165 >= a2[2])
  {
    a2[1] = sub_D29E68(a2, "Notification.PassiveHazardAhead", (char *)&__p, v150);
    long long v151 = a1 + 12;
    if (a1[12]) {
      goto LABEL_241;
    }
  }
  else
  {
    sub_D2A038(a2 + 16, a2[1], "Notification.PassiveHazardAhead", (char *)&__p, v150);
    a2[1] = v165 + 48;
    a2[1] = v165 + 48;
    long long v151 = a1 + 12;
    if (a1[12]) {
      goto LABEL_241;
    }
  }
LABEL_223:
  std::error_condition v152 = a1 + 14;
  if (!a1[14]) {
    goto LABEL_224;
  }
LABEL_245:
  LOBYTE(__p) = 4;
  unint64_t v167 = a2[1];
  if (v167 >= a2[2])
  {
    a2[1] = sub_354924(a2, "Notification.PassiveSpeedTrapAhead", (char *)&__p, v152);
    uint64_t v153 = a1 + 13;
    if (a1[13]) {
      goto LABEL_249;
    }
  }
  else
  {
    sub_354AF4(a2 + 16, a2[1], "Notification.PassiveSpeedTrapAhead", (char *)&__p, v152);
    a2[1] = v167 + 48;
    a2[1] = v167 + 48;
    uint64_t v153 = a1 + 13;
    if (a1[13]) {
      goto LABEL_249;
    }
  }
LABEL_225:
  uint64_t v154 = a1 + 15;
  if (!a1[15]) {
    goto LABEL_226;
  }
LABEL_253:
  LOBYTE(__p) = 4;
  unint64_t v169 = a2[1];
  if (v169 >= a2[2])
  {
    a2[1] = sub_C95B60(a2, "Notification.PassiveTrafficAhead", (char *)&__p, v154);
    int v155 = a1 + 16;
    if (a1[16]) {
      goto LABEL_257;
    }
  }
  else
  {
    sub_C95D30(a2 + 16, a2[1], "Notification.PassiveTrafficAhead", (char *)&__p, v154);
    a2[1] = v169 + 48;
    a2[1] = v169 + 48;
    int v155 = a1 + 16;
    if (a1[16]) {
      goto LABEL_257;
    }
  }
LABEL_227:
  uint64_t v156 = a1 + 2;
  if (!a1[2]) {
    goto LABEL_228;
  }
LABEL_261:
  LOBYTE(__p) = 4;
  unint64_t v171 = a2[1];
  if (v171 >= a2[2])
  {
    a2[1] = sub_D29B2C(a2, "Notification.VotableAccidentAhead", (char *)&__p, v156);
    long long v157 = a1 + 3;
    if (a1[3]) {
      goto LABEL_265;
    }
  }
  else
  {
    sub_D29CFC(a2 + 16, a2[1], "Notification.VotableAccidentAhead", (char *)&__p, v156);
    a2[1] = v171 + 48;
    a2[1] = v171 + 48;
    long long v157 = a1 + 3;
    if (a1[3]) {
      goto LABEL_265;
    }
  }
LABEL_229:
  uint64_t v158 = a1 + 4;
  if (!a1[4]) {
    goto LABEL_230;
  }
LABEL_269:
  LOBYTE(__p) = 4;
  unint64_t v173 = a2[1];
  if (v173 >= a2[2])
  {
    a2[1] = sub_D2A1A4(a2, "Notification.VotableConstructionAhead", (char *)&__p, v158);
    uint64_t v159 = a1 + 6;
    if (a1[6]) {
      goto LABEL_273;
    }
  }
  else
  {
    sub_D2A374(a2 + 16, a2[1], "Notification.VotableConstructionAhead", (char *)&__p, v158);
    a2[1] = v173 + 48;
    a2[1] = v173 + 48;
    uint64_t v159 = a1 + 6;
    if (a1[6]) {
      goto LABEL_273;
    }
  }
LABEL_231:
  long long v160 = a1 + 5;
  if (!a1[5]) {
    goto LABEL_232;
  }
LABEL_277:
  LOBYTE(__p) = 4;
  unint64_t v175 = a2[1];
  if (v175 >= a2[2])
  {
    a2[1] = sub_D2A4E0(a2, "Notification.VotableLaneClosureAhead", (char *)&__p, v160);
    char v161 = a1 + 7;
    if (a1[7]) {
      goto LABEL_281;
    }
  }
  else
  {
    sub_D2A6B0(a2 + 16, a2[1], "Notification.VotableLaneClosureAhead", (char *)&__p, v160);
    a2[1] = v175 + 48;
    a2[1] = v175 + 48;
    char v161 = a1 + 7;
    if (a1[7]) {
      goto LABEL_281;
    }
  }
LABEL_233:
  char v162 = a1 + 8;
  if (!a1[8]) {
    goto LABEL_234;
  }
LABEL_285:
  LOBYTE(__p) = 4;
  unint64_t v177 = a2[1];
  if (v177 >= a2[2])
  {
    a2[1] = sub_C96514(a2, "Notification.VotableEventAhead", (char *)&__p, v162);
    char v163 = (uint64_t *)a1[51];
    long long v164 = (uint64_t *)a1[52];
    if (v163 == v164) {
      return;
    }
  }
  else
  {
    sub_C966E4(a2 + 16, a2[1], "Notification.VotableEventAhead", (char *)&__p, v162);
    a2[1] = v177 + 48;
    a2[1] = v177 + 48;
    char v163 = (uint64_t *)a1[51];
    long long v164 = (uint64_t *)a1[52];
    if (v163 == v164) {
      return;
    }
  }
LABEL_289:
  unint64_t v178 = a2[1];
  do
  {
    while (1)
    {
      uint64_t v179 = *v163;
      LOBYTE(v186) = 7;
      uint64_t v180 = v179 / 100;
      __int16 v181 = v179 % 100;
      __int16 v182 = v179 < 0 ? -50 : 50;
      std::string __p = (void *)(v180
                   + (int)(((5243 * (__int16)(v182 + v181)) >> 19)
                         + ((5243 * (__int16)(v182 + v181)) >> 31)));
      if (v178 < a2[2]) {
        break;
      }
      unint64_t v178 = sub_D2A81C(a2, "Notification.DistanceBetweenIncidents", (char *)&v186, &__p);
      a2[1] = v178;
      if (++v163 == v164) {
        return;
      }
    }
    sub_D2A9EC(a2 + 16, v178, "Notification.DistanceBetweenIncidents", (char *)&v186, &__p);
    v178 += 48;
    a2[1] = v178;
    a2[1] = v178;
    ++v163;
  }
  while (v163 != v164);
}

void sub_D28714(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_D2871C(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_D28724(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_D2872C(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_D28734(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_D2873C(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_D28744(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_D2874C(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_D28754(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_D2875C(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_D28764(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_D2876C(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_D28774(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_D2877C(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_D28784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D288C4(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

uint64_t sub_D288CC(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D28A9C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  unint64_t v14 = (char *)*a1;
  char v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    char v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      char v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D28A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D28A9C(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D28BF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D28C08(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D28DD8(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D28DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D28DD8(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D28F30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_D28F44(uint64_t *a1, uint64_t *a2)
{
  if (*a1)
  {
    LOBYTE(v15) = 4;
    *(_DWORD *)std::string __p = 1;
    unint64_t v4 = a2[1];
    if (v4 >= a2[2])
    {
      uint64_t v5 = sub_D293C8(a2, "Notification.ETAUsIssuingDodgeballsCount", (char *)&v15, (int *)__p);
    }
    else
    {
      sub_D29598(a2 + 16, a2[1], "Notification.ETAUsIssuingDodgeballsCount", (char *)&v15, (int *)__p);
      uint64_t v5 = v4 + 48;
      a2[1] = v4 + 48;
    }
    a2[1] = v5;
  }
  unint64_t v6 = (char *)operator new(0x28uLL);
  *(void *)std::string __p = v6;
  *(_OWORD *)&__p[8] = xmmword_20E12D0;
  strcpy(v6, "Notification.DodgeballTotalIssuedCount");
  uint64_t v7 = *a1;
  uint64_t v15 = v7;
  if (!v7) {
    goto LABEL_12;
  }
  char v14 = 4;
  unint64_t v8 = a2[1];
  if (v8 < a2[2])
  {
    sub_4200((unsigned char *)a2[1], v6, 0x26uLL);
    *(unsigned char *)(v8 + 24) = 4;
    *(void *)(v8 + 32) = v7;
    *(_DWORD *)(v8 + 40) = 1;
    a2[1] = v8 + 48;
    goto LABEL_12;
  }
  size_t v9 = sub_D29918((char **)a2, (uint64_t)__p, &v14, &v15);
  int v10 = __p[23];
  a2[1] = (uint64_t)v9;
  if (v10 < 0)
  {
LABEL_12:
    operator delete(*(void **)__p);
    if ((unint64_t)*a1 < 7) {
      goto LABEL_13;
    }
LABEL_11:
    *(void *)std::string __p = operator new(0x30uLL);
    *(_OWORD *)&__p[8] = xmmword_20B93E0;
    strcpy(*(char **)__p, "Notification.SevenOrMoreDodgeballsProcessed");
    goto LABEL_14;
  }
  if ((unint64_t)*a1 >= 7) {
    goto LABEL_11;
  }
LABEL_13:
  sub_D291F4("Notification.", (uint64_t)a1, "DodgeballsProcessed");
LABEL_14:
  char v14 = 4;
  LODWORD(v15) = 1;
  unint64_t v11 = a2[1];
  if (v11 >= a2[2])
  {
    a2[1] = (uint64_t)sub_D29704((char **)a2, (uint64_t)__p, &v14, (int *)&v15);
    if ((__p[23] & 0x80000000) != 0) {
LABEL_21:
    }
      operator delete(*(void **)__p);
  }
  else
  {
    if ((__p[23] & 0x80000000) != 0)
    {
      sub_4200((unsigned char *)a2[1], *(void **)__p, *(unint64_t *)&__p[8]);
    }
    else
    {
      long long v12 = *(_OWORD *)__p;
      *(void *)(v11 + 16) = *(void *)&__p[16];
      *(_OWORD *)unint64_t v11 = v12;
    }
    *(unsigned char *)(v11 + 24) = 4;
    *(void *)(v11 + 32) = 1;
    *(_DWORD *)(v11 + 40) = 1;
    a2[1] = v11 + 48;
    a2[1] = v11 + 48;
    if ((__p[23] & 0x80000000) != 0) {
      goto LABEL_21;
    }
  }
}

void sub_D291A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v17 = v16;
  *(void *)(v15 + 8) = v17;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D291F4(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_D293A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D293B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D293C8(uint64_t *a1, char *a2, char *a3, int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    char v11 = (char *)operator new(48 * v10);
  }
  else
  {
    char v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D29598(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  char v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D29584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D29598(int a1, uint64_t a2, char *__s, char *a4, int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D296F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_D29704(char **a1, uint64_t a2, char *a3, int *a4)
{
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v5) >> 4) > v8) {
    unint64_t v8 = 0x5555555555555556 * ((a1[2] - v5) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v8;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = &v13[48 * v7];
  int v24 = &v13[48 * v12];
  char v15 = *a3;
  uint64_t v16 = *a4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v14, *(void **)a2, *(void *)(a2 + 8));
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    uint64_t v14 = &v13[48 * v7];
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
  }
  long long v17 = &v13[48 * v7];
  v17[24] = v15;
  *((void *)v17 + 4) = v16;
  *((_DWORD *)v17 + 10) = 1;
  unint64_t v18 = v17 + 48;
  if (v6 == v5)
  {
    uint64_t v21 = v5;
  }
  else
  {
    do
    {
      long long v19 = *((_OWORD *)v6 - 3);
      *((void *)v14 - 4) = *((void *)v6 - 4);
      *((_OWORD *)v14 - 3) = v19;
      *((void *)v6 - 5) = 0;
      *((void *)v6 - 4) = 0;
      *((void *)v6 - 6) = 0;
      long long v20 = *(_OWORD *)(v6 - 24);
      *((_DWORD *)v14 - 2) = *((_DWORD *)v6 - 2);
      *(_OWORD *)(v14 - 24) = v20;
      v14 -= 48;
      v6 -= 48;
    }
    while (v6 != v5);
    uint64_t v21 = *a1;
    unint64_t v5 = a1[1];
  }
  *a1 = v14;
  a1[1] = v18;
  a1[2] = v24;
  if (v5 != v21)
  {
    unint64_t v22 = (void **)(v5 - 48);
    do
    {
      if (*((char *)v22 + 23) < 0) {
        operator delete(*v22);
      }
      v22 -= 6;
    }
    while (v22 + 6 != (void **)v21);
    unint64_t v5 = v21;
  }
  if (v5) {
    operator delete(v5);
  }
  return v18;
}

void sub_D29904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_D29918(char **a1, uint64_t a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v5) >> 4) > v8) {
    unint64_t v8 = 0x5555555555555556 * ((a1[2] - v5) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v8;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = &v13[48 * v7];
  int v24 = &v13[48 * v12];
  char v15 = *a3;
  uint64_t v16 = *a4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v14, *(void **)a2, *(void *)(a2 + 8));
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    uint64_t v14 = &v13[48 * v7];
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
  }
  long long v17 = &v13[48 * v7];
  v17[24] = v15;
  *((void *)v17 + 4) = v16;
  *((_DWORD *)v17 + 10) = 1;
  unint64_t v18 = v17 + 48;
  if (v6 == v5)
  {
    uint64_t v21 = v5;
  }
  else
  {
    do
    {
      long long v19 = *((_OWORD *)v6 - 3);
      *((void *)v14 - 4) = *((void *)v6 - 4);
      *((_OWORD *)v14 - 3) = v19;
      *((void *)v6 - 5) = 0;
      *((void *)v6 - 4) = 0;
      *((void *)v6 - 6) = 0;
      long long v20 = *(_OWORD *)(v6 - 24);
      *((_DWORD *)v14 - 2) = *((_DWORD *)v6 - 2);
      *(_OWORD *)(v14 - 24) = v20;
      v14 -= 48;
      v6 -= 48;
    }
    while (v6 != v5);
    uint64_t v21 = *a1;
    unint64_t v5 = a1[1];
  }
  *a1 = v14;
  a1[1] = v18;
  a1[2] = v24;
  if (v5 != v21)
  {
    unint64_t v22 = (void **)(v5 - 48);
    do
    {
      if (*((char *)v22 + 23) < 0) {
        operator delete(*v22);
      }
      v22 -= 6;
    }
    while (v22 + 6 != (void **)v21);
    unint64_t v5 = v21;
  }
  if (v5) {
    operator delete(v5);
  }
  return v18;
}

void sub_D29B18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D29B2C(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    char v11 = (char *)operator new(48 * v10);
  }
  else
  {
    char v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D29CFC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  char v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    char v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      char v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D29CE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D29CFC(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D29E54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D29E68(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    char v11 = (char *)operator new(48 * v10);
  }
  else
  {
    char v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D2A038(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D2A024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D2A038(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D2A190(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D2A1A4(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    char v11 = (char *)operator new(48 * v10);
  }
  else
  {
    char v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D2A374(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D2A360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D2A374(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D2A4CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D2A4E0(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    char v11 = (char *)operator new(48 * v10);
  }
  else
  {
    char v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D2A6B0(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D2A69C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D2A6B0(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D2A808(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D2A81C(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    char v11 = (char *)operator new(48 * v10);
  }
  else
  {
    char v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  uint64_t v21 = &v11[48 * v10];
  sub_D2A9EC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D2A9D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D2A9EC(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  uint64_t v15 = (void *)__dst;

  operator delete(v15);
}

void sub_D2AB44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D2AB58(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 1856);
  if (v2)
  {
    *(void *)(a1 + 1864) = v2;
    operator delete(v2);
  }
  sub_7379DC(a1 + 88);
  return a1;
}

void sub_D2AB94(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "DrivingUpdateAnalyticsModule");
  unint64_t v5 = (unint64_t *)(a2 + 40);
  unint64_t v4 = *(void *)(a2 + 40);
  LOBYTE(__p[0]) = 1;
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 < v4)
  {
    sub_C55DE4(a2 + 40, *(void *)(a2 + 32), "Runtime", (char *)__p, (double *)a1);
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 32) = v7;
    unint64_t v8 = (uint64_t *)(a1 + 8);
    if (!*(void *)(a1 + 8)) {
      goto LABEL_3;
    }
LABEL_6:
    LOBYTE(__p[0]) = 2;
    if (v7 >= *v5)
    {
      unint64_t v7 = sub_C96B8C((uint64_t *)(a2 + 24), "AnalyticsData.Size", (char *)__p, v8);
    }
    else
    {
      sub_C96D5C(a2 + 40, v7, "AnalyticsData.Size", (char *)__p, v8);
      v7 += 48;
      *(void *)(a2 + 32) = v7;
    }
    *(void *)(a2 + 32) = v7;
    LOBYTE(__p[0]) = 1;
    size_t v9 = (double *)(a1 + 16);
    if (v7 < *v5) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  unint64_t v7 = sub_C55C14((uint64_t *)(a2 + 24), "Runtime", (char *)__p, (double *)a1);
  *(void *)(a2 + 32) = v7;
  unint64_t v8 = (uint64_t *)(a1 + 8);
  if (*(void *)(a1 + 8)) {
    goto LABEL_6;
  }
LABEL_3:
  LOBYTE(__p[0]) = 1;
  size_t v9 = (double *)(a1 + 16);
  if (v7 < *v5)
  {
LABEL_4:
    sub_D2BB88(a2 + 40, v7, "FineGrainedETAAnalytics.Runtime", (char *)__p, v9);
    unint64_t v10 = v7 + 48;
    *(void *)(a2 + 32) = v10;
    goto LABEL_11;
  }
LABEL_10:
  unint64_t v10 = sub_D2B9B8((uint64_t *)(a2 + 24), "FineGrainedETAAnalytics.Runtime", (char *)__p, v9);
LABEL_11:
  *(void *)(a2 + 32) = v10;
  LOBYTE(__p[0]) = 1;
  if (v10 >= *(void *)(a2 + 40))
  {
    unint64_t v11 = sub_D2BCFC((uint64_t *)(a2 + 24), "FineGrainedETAAnalytics.StackedExperiments.Runtime", (char *)__p, (double *)(a1 + 40));
  }
  else
  {
    sub_D2BECC(a2 + 40, v10, "FineGrainedETAAnalytics.StackedExperiments.Runtime", (char *)__p, (double *)(a1 + 40));
    unint64_t v11 = v10 + 48;
    *(void *)(a2 + 32) = v11;
  }
  *(void *)(a2 + 32) = v11;
  LOBYTE(__p[0]) = 1;
  if (v11 >= *(void *)(a2 + 40))
  {
    unint64_t v12 = sub_D2C040((uint64_t *)(a2 + 24), "FineGrainedETAAnalytics.ScenarioInstanceDetection.Runtime", (char *)__p, (double *)(a1 + 48));
  }
  else
  {
    sub_D2C210(a2 + 40, v11, "FineGrainedETAAnalytics.ScenarioInstanceDetection.Runtime", (char *)__p, (double *)(a1 + 48));
    unint64_t v12 = v11 + 48;
    *(void *)(a2 + 32) = v12;
  }
  *(void *)(a2 + 32) = v12;
  LOBYTE(__p[0]) = 1;
  if (v12 >= *(void *)(a2 + 40))
  {
    unint64_t v13 = sub_D2C384((uint64_t *)(a2 + 24), "FineGrainedETAAnalytics.MessagePopulation.Runtime", (char *)__p, (double *)(a1 + 56));
    *(void *)(a2 + 32) = v13;
    uint64_t v14 = (uint64_t *)(a1 + 24);
    if (!*(void *)(a1 + 24))
    {
LABEL_19:
      uint64_t v15 = (unsigned int *)(a1 + 32);
      if (!*(_DWORD *)(a1 + 32)) {
        goto LABEL_20;
      }
LABEL_38:
      LOBYTE(__p[0]) = 4;
      if (v13 >= *v5)
      {
        unint64_t v13 = sub_D1600C((uint64_t *)(a2 + 24), "FineGrainedETAAnalytics.NumSkippedExperiments", (char *)__p, v15);
        *(void *)(a2 + 32) = v13;
        long long v16 = (unsigned int *)(a1 + 36);
        if (*(_DWORD *)(a1 + 36)) {
          goto LABEL_42;
        }
      }
      else
      {
        sub_D161DC(a2 + 40, v13, "FineGrainedETAAnalytics.NumSkippedExperiments", (char *)__p, v15);
        v13 += 48;
        *(void *)(a2 + 32) = v13;
        *(void *)(a2 + 32) = v13;
        long long v16 = (unsigned int *)(a1 + 36);
        if (*(_DWORD *)(a1 + 36)) {
          goto LABEL_42;
        }
      }
LABEL_21:
      LOBYTE(__p[0]) = 1;
      unint64_t v17 = (double *)(a1 + 64);
      if (v13 < *v5) {
        goto LABEL_22;
      }
      goto LABEL_46;
    }
  }
  else
  {
    sub_D2C554(a2 + 40, v12, "FineGrainedETAAnalytics.MessagePopulation.Runtime", (char *)__p, (double *)(a1 + 56));
    unint64_t v13 = v12 + 48;
    *(void *)(a2 + 32) = v13;
    *(void *)(a2 + 32) = v13;
    uint64_t v14 = (uint64_t *)(a1 + 24);
    if (!*(void *)(a1 + 24)) {
      goto LABEL_19;
    }
  }
  LOBYTE(__p[0]) = 2;
  if (v13 >= *v5)
  {
    unint64_t v13 = sub_354F9C((uint64_t *)(a2 + 24), "FineGrainedETAAnalytics.Size", (char *)__p, v14);
    *(void *)(a2 + 32) = v13;
    uint64_t v15 = (unsigned int *)(a1 + 32);
    if (*(_DWORD *)(a1 + 32)) {
      goto LABEL_38;
    }
  }
  else
  {
    sub_35516C(a2 + 40, v13, "FineGrainedETAAnalytics.Size", (char *)__p, v14);
    v13 += 48;
    *(void *)(a2 + 32) = v13;
    *(void *)(a2 + 32) = v13;
    uint64_t v15 = (unsigned int *)(a1 + 32);
    if (*(_DWORD *)(a1 + 32)) {
      goto LABEL_38;
    }
  }
LABEL_20:
  long long v16 = (unsigned int *)(a1 + 36);
  if (!*(_DWORD *)(a1 + 36)) {
    goto LABEL_21;
  }
LABEL_42:
  LOBYTE(__p[0]) = 4;
  if (v13 >= *v5)
  {
    unint64_t v13 = sub_C98D5C((uint64_t *)(a2 + 24), "FineGrainedETAAnalytics.NumActiveExperiments", (char *)__p, v16);
  }
  else
  {
    sub_C98F2C(a2 + 40, v13, "FineGrainedETAAnalytics.NumActiveExperiments", (char *)__p, v16);
    v13 += 48;
    *(void *)(a2 + 32) = v13;
  }
  *(void *)(a2 + 32) = v13;
  LOBYTE(__p[0]) = 1;
  unint64_t v17 = (double *)(a1 + 64);
  if (v13 < *v5)
  {
LABEL_22:
    sub_C9C8E4(a2 + 40, v13, "ClosureAnalytics.Runtime", (char *)__p, v17);
    unint64_t v18 = v13 + 48;
    *(void *)(a2 + 32) = v18;
    *(void *)(a2 + 32) = v18;
    long long v19 = (uint64_t *)(a1 + 72);
    if (!*(void *)(a1 + 72)) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  unint64_t v18 = sub_C9C714((uint64_t *)(a2 + 24), "ClosureAnalytics.Runtime", (char *)__p, v17);
  *(void *)(a2 + 32) = v18;
  long long v19 = (uint64_t *)(a1 + 72);
  if (!*(void *)(a1 + 72))
  {
LABEL_23:
    LOBYTE(__p[0]) = 1;
    uint64_t v20 = (double *)(a1 + 80);
    if (v18 < *v5) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_47:
  LOBYTE(__p[0]) = 2;
  if (v18 >= *v5)
  {
    unint64_t v18 = sub_C96EC8((uint64_t *)(a2 + 24), "ClosureAnalytics.Size", (char *)__p, v19);
  }
  else
  {
    sub_C97098(a2 + 40, v18, "ClosureAnalytics.Size", (char *)__p, v19);
    v18 += 48;
    *(void *)(a2 + 32) = v18;
  }
  *(void *)(a2 + 32) = v18;
  LOBYTE(__p[0]) = 1;
  uint64_t v20 = (double *)(a1 + 80);
  if (v18 < *v5)
  {
LABEL_24:
    sub_CFB8EC(a2 + 40, v18, "TrajectoryAnalytics.Runtime", (char *)__p, v20);
    unint64_t v21 = v18 + 48;
    *(void *)(a2 + 32) = v21;
    *(void *)(a2 + 32) = v21;
    unint64_t v22 = (uint64_t *)(a1 + 88);
    if (!*(void *)(a1 + 88)) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }
LABEL_51:
  unint64_t v21 = sub_CFB71C((uint64_t *)(a2 + 24), "TrajectoryAnalytics.Runtime", (char *)__p, v20);
  *(void *)(a2 + 32) = v21;
  unint64_t v22 = (uint64_t *)(a1 + 88);
  if (!*(void *)(a1 + 88))
  {
LABEL_25:
    LOBYTE(__p[0]) = 1;
    uint64_t v23 = (double *)(a1 + 96);
    if (v21 < *v5) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_52:
  LOBYTE(__p[0]) = 2;
  if (v21 >= *v5)
  {
    unint64_t v21 = sub_C951AC((uint64_t *)(a2 + 24), "TrajectoryAnalytics.Size", (char *)__p, v22);
  }
  else
  {
    sub_C9537C(a2 + 40, v21, "TrajectoryAnalytics.Size", (char *)__p, v22);
    v21 += 48;
    *(void *)(a2 + 32) = v21;
  }
  *(void *)(a2 + 32) = v21;
  LOBYTE(__p[0]) = 1;
  uint64_t v23 = (double *)(a1 + 96);
  if (v21 < *v5)
  {
LABEL_26:
    sub_C56E38(a2 + 40, v21, "RouteAnalytics.Runtime", (char *)__p, v23);
    unint64_t v24 = v21 + 48;
    *(void *)(a2 + 32) = v24;
    *(void *)(a2 + 32) = v24;
    uint64_t v25 = (uint64_t *)(a1 + 104);
    if (!*(void *)(a1 + 104)) {
      goto LABEL_27;
    }
LABEL_57:
    LOBYTE(__p[0]) = 2;
    if (v24 >= *v5)
    {
      unint64_t v24 = sub_C94B34((uint64_t *)(a2 + 24), "RouteAnalytics.Size", (char *)__p, v25);
      *(void *)(a2 + 32) = v24;
      unint64_t v26 = (unsigned int *)(a1 + 112);
      if (*(_DWORD *)(a1 + 112)) {
        goto LABEL_61;
      }
    }
    else
    {
      sub_C94D04(a2 + 40, v24, "RouteAnalytics.Size", (char *)__p, v25);
      v24 += 48;
      *(void *)(a2 + 32) = v24;
      *(void *)(a2 + 32) = v24;
      unint64_t v26 = (unsigned int *)(a1 + 112);
      if (*(_DWORD *)(a1 + 112)) {
        goto LABEL_61;
      }
    }
LABEL_28:
    uint64_t v27 = (unsigned int *)(a1 + 116);
    if (!*(_DWORD *)(a1 + 116)) {
      goto LABEL_29;
    }
LABEL_65:
    v43.__r_.__value_.__s.__data_[0] = 4;
    LODWORD(__p[0]) = 0;
    if (v24 >= *v5)
    {
      unint64_t v24 = sub_CFBDA8((uint64_t *)(a2 + 24), "ClosureAnalytics.NumInactiveSoftClosures", (char *)&v43, v27, (int *)__p);
      *(void *)(a2 + 32) = v24;
      int v28 = (unsigned int *)(a1 + 120);
      if (*(_DWORD *)(a1 + 120)) {
        goto LABEL_69;
      }
    }
    else
    {
      sub_CFBF80(a2 + 40, v24, "ClosureAnalytics.NumInactiveSoftClosures", (char *)&v43, v27, (int *)__p);
      v24 += 48;
      *(void *)(a2 + 32) = v24;
      *(void *)(a2 + 32) = v24;
      int v28 = (unsigned int *)(a1 + 120);
      if (*(_DWORD *)(a1 + 120)) {
        goto LABEL_69;
      }
    }
LABEL_30:
    uint64_t v29 = (unsigned int *)(a1 + 124);
    if (!*(_DWORD *)(a1 + 124)) {
      goto LABEL_31;
    }
LABEL_73:
    v43.__r_.__value_.__s.__data_[0] = 4;
    LODWORD(__p[0]) = 0;
    if (v24 >= *v5)
    {
      uint64_t v30 = sub_CFC780((uint64_t *)(a2 + 24), "ClosureAnalytics.NumGeometryPatches", (char *)&v43, v29, (int *)__p);
    }
    else
    {
      sub_CFC958(a2 + 40, v24, "ClosureAnalytics.NumGeometryPatches", (char *)&v43, v29, (int *)__p);
      uint64_t v30 = v24 + 48;
      *(void *)(a2 + 32) = v24 + 48;
    }
    *(void *)(a2 + 32) = v30;
    if (*(unsigned char *)(a1 + 141)) {
      return;
    }
    goto LABEL_77;
  }
LABEL_56:
  unint64_t v24 = sub_C56C68((uint64_t *)(a2 + 24), "RouteAnalytics.Runtime", (char *)__p, v23);
  *(void *)(a2 + 32) = v24;
  uint64_t v25 = (uint64_t *)(a1 + 104);
  if (*(void *)(a1 + 104)) {
    goto LABEL_57;
  }
LABEL_27:
  unint64_t v26 = (unsigned int *)(a1 + 112);
  if (!*(_DWORD *)(a1 + 112)) {
    goto LABEL_28;
  }
LABEL_61:
  v43.__r_.__value_.__s.__data_[0] = 4;
  LODWORD(__p[0]) = 0;
  if (v24 >= *v5)
  {
    unint64_t v24 = sub_CFBA60((uint64_t *)(a2 + 24), "ClosureAnalytics.NumActiveSoftClosures", (char *)&v43, v26, (int *)__p);
    *(void *)(a2 + 32) = v24;
    uint64_t v27 = (unsigned int *)(a1 + 116);
    if (*(_DWORD *)(a1 + 116)) {
      goto LABEL_65;
    }
  }
  else
  {
    sub_CFBC38(a2 + 40, v24, "ClosureAnalytics.NumActiveSoftClosures", (char *)&v43, v26, (int *)__p);
    v24 += 48;
    *(void *)(a2 + 32) = v24;
    *(void *)(a2 + 32) = v24;
    uint64_t v27 = (unsigned int *)(a1 + 116);
    if (*(_DWORD *)(a1 + 116)) {
      goto LABEL_65;
    }
  }
LABEL_29:
  int v28 = (unsigned int *)(a1 + 120);
  if (!*(_DWORD *)(a1 + 120)) {
    goto LABEL_30;
  }
LABEL_69:
  v43.__r_.__value_.__s.__data_[0] = 4;
  LODWORD(__p[0]) = 0;
  if (v24 >= *v5)
  {
    unint64_t v24 = sub_CFC0F0((uint64_t *)(a2 + 24), "ClosureAnalytics.NumHardClosures", (char *)&v43, v28, (int *)__p);
    *(void *)(a2 + 32) = v24;
    uint64_t v29 = (unsigned int *)(a1 + 124);
    if (*(_DWORD *)(a1 + 124)) {
      goto LABEL_73;
    }
  }
  else
  {
    sub_CFC2C8(a2 + 40, v24, "ClosureAnalytics.NumHardClosures", (char *)&v43, v28, (int *)__p);
    v24 += 48;
    *(void *)(a2 + 32) = v24;
    *(void *)(a2 + 32) = v24;
    uint64_t v29 = (unsigned int *)(a1 + 124);
    if (*(_DWORD *)(a1 + 124)) {
      goto LABEL_73;
    }
  }
LABEL_31:
  if (*(unsigned char *)(a1 + 141)) {
    return;
  }
LABEL_77:
  if (!*(unsigned char *)(a1 + 140))
  {
    double v31 = *(double *)(a1 + 128);
    if (v31 != 0.0 && fabs(v31) >= 2.22044605e-16)
    {
      std::to_string(&v43, *(_DWORD *)(a1 + 136));
      size_t v32 = std::string::insert(&v43, 0, "EV.PredictionError.RelativeErrorRate.KM_");
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      std::string::size_type v45 = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      char v42 = 6;
      double v34 = *(double *)(a1 + 128) * 100.0;
      double v41 = v34;
      int v40 = 1;
      unint64_t v35 = *(void *)(a2 + 32);
      if (v35 >= *(void *)(a2 + 40))
      {
        unint64_t v38 = sub_D2C6C8((char **)(a2 + 24), (uint64_t)__p, &v42, &v41, &v40);
        char v39 = HIBYTE(v45);
        *(void *)(a2 + 32) = v38;
        if ((v39 & 0x80) == 0) {
          goto LABEL_89;
        }
      }
      else
      {
        char v36 = HIBYTE(v45);
        if (SHIBYTE(v45) < 0)
        {
          sub_4200(*(unsigned char **)(a2 + 32), __p[0], (unint64_t)__p[1]);
        }
        else
        {
          long long v37 = *(_OWORD *)__p;
          *(void *)(v35 + 16) = v45;
          *(_OWORD *)unint64_t v35 = v37;
        }
        *(unsigned char *)(v35 + 24) = 6;
        *(void *)(v35 + 32) = (uint64_t)v34;
        *(_DWORD *)(v35 + 40) = 1;
        *(void *)(a2 + 32) = v35 + 48;
        *(void *)(a2 + 32) = v35 + 48;
        if ((v36 & 0x80) == 0) {
          goto LABEL_89;
        }
      }
      operator delete(__p[0]);
LABEL_89:
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_D2B5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)(v23 + 32) = v24;
  operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    sub_A3A4(v23);
    _Unwind_Resume(a1);
  }
  sub_A3A4(v23);
  _Unwind_Resume(a1);
}

void sub_D2B64C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B660(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B674(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B68C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B6A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B6B8(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B6CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B6E4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B6F8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B710(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B724(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B73C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B750(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B768(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B77C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B794(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B7A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B7C0(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B7D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B7EC(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B800(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B818(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B82C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B844(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B858(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B86C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B880(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B894(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B8AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B8C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B8DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B8F4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B908(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B920(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B934(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B94C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B960(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B974(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B98C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2B9A4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D2B9B8(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D2BB88(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D2BB74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D2BB88(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D2BCE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D2BCFC(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D2BECC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D2BEB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D2BECC(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D2C02C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D2C040(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D2C210(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D2C1FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D2C210(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D2C370(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D2C384(uint64_t *a1, char *a2, char *a3, double *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D2C554(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D2C540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D2C554(int a1, uint64_t a2, char *__s, char *a4, double *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = (uint64_t)*a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = (uint64_t)*a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D2C6B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_D2C6C8(char **a1, uint64_t a2, char *a3, double *a4, int *a5)
{
  unint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v6) >> 4) > v9) {
    unint64_t v9 = 0x5555555555555556 * ((a1[2] - v6) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v6) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v14 = 0x555555555555555;
  }
  else {
    unint64_t v14 = v9;
  }
  if (v14)
  {
    if (v14 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v15 = (char *)operator new(48 * v14);
  }
  else
  {
    uint64_t v15 = 0;
  }
  long long v16 = &v15[48 * v8];
  uint64_t v27 = &v15[48 * v14];
  char v17 = *a3;
  double v18 = *a4;
  int v19 = *a5;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v16, *(void **)a2, *(void *)(a2 + 8));
    unint64_t v6 = *a1;
    unint64_t v7 = a1[1];
    long long v16 = &v15[48 * v8];
  }
  else
  {
    *(_OWORD *)long long v16 = *(_OWORD *)a2;
    *((void *)v16 + 2) = *(void *)(a2 + 16);
  }
  uint64_t v20 = &v15[48 * v8];
  v20[24] = v17;
  *((void *)v20 + 4) = (uint64_t)v18;
  *((_DWORD *)v20 + 10) = v19;
  unint64_t v21 = v20 + 48;
  if (v7 == v6)
  {
    uint64_t v24 = v6;
  }
  else
  {
    do
    {
      long long v22 = *((_OWORD *)v7 - 3);
      *((void *)v16 - 4) = *((void *)v7 - 4);
      *((_OWORD *)v16 - 3) = v22;
      *((void *)v7 - 5) = 0;
      *((void *)v7 - 4) = 0;
      *((void *)v7 - 6) = 0;
      long long v23 = *(_OWORD *)(v7 - 24);
      *((_DWORD *)v16 - 2) = *((_DWORD *)v7 - 2);
      *(_OWORD *)(v16 - 24) = v23;
      v16 -= 48;
      v7 -= 48;
    }
    while (v7 != v6);
    uint64_t v24 = *a1;
    unint64_t v6 = a1[1];
  }
  *a1 = v16;
  a1[1] = v21;
  a1[2] = v27;
  if (v6 != v24)
  {
    uint64_t v25 = (void **)(v6 - 48);
    do
    {
      if (*((char *)v25 + 23) < 0) {
        operator delete(*v25);
      }
      v25 -= 6;
    }
    while (v25 + 6 != (void **)v24);
    unint64_t v6 = v24;
  }
  if (v6) {
    operator delete(v6);
  }
  return v21;
}

void sub_D2C8D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D2C8EC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "DrivingUpdateResponseBuilderModule");
  unint64_t v4 = *(void *)(a2 + 40);
  char v9 = 1;
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C947F8((uint64_t *)(a2 + 24), "Runtime", &v9, a1);
  }
  else
  {
    sub_C949C8(a2 + 40, *(void *)(a2 + 32), "Runtime", &v9, a1);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  char v8 = 2;
  if (v6 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_C94E70((uint64_t *)(a2 + 24), "SessionState.Size", &v8, a1 + 1);
  }
  else
  {
    sub_C95040(a2 + 40, v6, "SessionState.Size", &v8, a1 + 1);
    uint64_t result = v6 + 48;
    *(void *)(a2 + 32) = v6 + 48;
  }
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_D2CA04(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2CA18(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2CA48(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D2CA5C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t *a8, void *a9, uint64_t a10, uint64_t a11)
{
  int v17 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v17;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  int v19 = (unsigned char *)*((void *)a2 + 1);
  double v18 = (unsigned char *)*((void *)a2 + 2);
  int64_t v20 = v18 - v19;
  if (v18 != v19)
  {
    if (v20 < 0) {
      sub_2E00();
    }
    unint64_t v21 = (char *)operator new(v18 - v19);
    *(void *)(a1 + 8) = v21;
    *(void *)(a1 + 16) = v21;
    long long v22 = &v21[4 * (v20 >> 2)];
    *(void *)(a1 + 24) = v22;
    memcpy(v21, v19, v20);
    *(void *)(a1 + 16) = v22;
  }
  long long v23 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v23;
  sub_4BC93C(a1 + 64, a2 + 16);
  uint64_t v24 = *((void *)a2 + 20);
  *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
  *(void *)(a1 + 160) = v24;
  LODWORD(v24) = a2[44];
  char v25 = *((unsigned char *)a2 + 180);
  *(void *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 180) = v25;
  *(_DWORD *)(a1 + 176) = v24;
  *(void *)(a1 + 184) = a3;
  *(void *)(a1 + 192) = a4;
  *(void *)(a1 + 200) = a5;
  *(void *)(a1 + 208) = a6;
  *(_DWORD *)(a1 + 216) = a7;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  sub_8A6F8((char *)(a1 + 224), *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  *(void *)(a1 + 248) = *a9;
  *(void *)(a1 + 256) = a10;
  sub_54214(a1 + 264, a11);
  return a1;
}

void sub_D2CBA8(_Unwind_Exception *a1)
{
  sub_1A668(v2);
  sub_CF1EE4(v1);
  _Unwind_Resume(a1);
}

void sub_D2CBC4(_Unwind_Exception *a1)
{
  sub_CF1EE4(v1);
  _Unwind_Resume(a1);
}

void sub_D2CBD8(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D2CBF8(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 280);
  if (v2)
  {
    do
    {
      unint64_t v7 = *(char **)v2;
      sub_57AC8((uint64_t *)v2 + 5);
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  uint64_t v3 = *(void **)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void *)(a1 + 224);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 232);
    unint64_t v6 = *(void **)(a1 + 224);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0) {
          operator delete(*(void **)(v5 - 24));
        }
        v5 -= 24;
      }
      while (v5 != v4);
      unint64_t v6 = *(void **)(a1 + 224);
    }
    *(void *)(a1 + 232) = v4;
    operator delete(v6);
  }
  if ((*(char *)(a1 + 151) & 0x80000000) == 0)
  {
    char v8 = *(void **)(a1 + 104);
    if (!v8) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  operator delete(*(void **)(a1 + 128));
  char v8 = *(void **)(a1 + 104);
  if (v8)
  {
LABEL_17:
    *(void *)(a1 + 112) = v8;
    operator delete(v8);
  }
LABEL_18:
  char v9 = *(void **)(a1 + 72);
  if (v9)
  {
    *(void *)(a1 + 80) = v9;
    operator delete(v9);
  }
  size_t v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_D2CD00(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "DrivingRouteSnappingModule");
  uint64_t v5 = (unint64_t *)(a2 + 40);
  unint64_t v4 = *(void *)(a2 + 40);
  char v13 = 1;
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 >= v4)
  {
    unint64_t v7 = sub_C947F8((uint64_t *)(a2 + 24), "Runtime", &v13, (uint64_t *)a1);
    *(void *)(a2 + 32) = v7;
    if (!*(unsigned char *)(a1 + 8))
    {
LABEL_3:
      if (!*(unsigned char *)(a1 + 9)) {
        return;
      }
      goto LABEL_10;
    }
  }
  else
  {
    sub_C949C8(a2 + 40, *(void *)(a2 + 32), "Runtime", &v13, (uint64_t *)a1);
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 32) = v7;
    if (!*(unsigned char *)(a1 + 8)) {
      goto LABEL_3;
    }
  }
  char v12 = 4;
  unsigned int v11 = 1;
  if (v7 >= *v5)
  {
    unint64_t v7 = sub_CF4798((uint64_t *)(a2 + 24), "HasLocalWaypoints", &v12, &v11);
    *(void *)(a2 + 32) = v7;
    if (!*(unsigned char *)(a1 + 9)) {
      return;
    }
  }
  else
  {
    sub_CF4968(a2 + 40, v7, "HasLocalWaypoints", &v12, &v11);
    v7 += 48;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 32) = v7;
    if (!*(unsigned char *)(a1 + 9)) {
      return;
    }
  }
LABEL_10:
  char v10 = 4;
  unsigned int v9 = 1;
  if (v7 >= *v5)
  {
    uint64_t v8 = sub_CF4AD4((uint64_t *)(a2 + 24), "CrossesLocalArea", &v10, &v9);
  }
  else
  {
    sub_CF4CA4(a2 + 40, v7, "CrossesLocalArea", &v10, &v9);
    uint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v7 + 48;
  }
  *(void *)(a2 + 32) = v8;
}

void sub_D2CEC8(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2CEDC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D2CF24(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D2CF38(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, char a9)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v74 = a1 + 32;
  *(_OWORD *)(a1 + 80) = 0u;
  uint64_t v73 = a1 + 80;
  uint64_t v15 = (void **)(a1 + 56);
  uint64_t v72 = a1 + 104;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  sub_DBDE7C(a2, a1 + 128);
  *(void *)(a1 + 168) = a7;
  *(unsigned char *)(a1 + 176) = a6;
  *(void *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a8;
  *(unsigned char *)(a1 + 208) = a9;
  *(void *)(a1 + 216) = sub_DBE834((uint64_t)a2);
  uint64_t v16 = sub_37B3A8(*(void *)(a1 + 200));
  uint64_t v17 = *(void *)v16;
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(v16 + 8);
  *(void *)(a1 + 132) = v17;
  sub_F5D99C();
  double v18 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v18;
    operator delete(v18);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = v85;
  uint64_t v19 = v86;
  uint64_t v20 = v87;
  uint64_t v86 = 0;
  long long v85 = 0uLL;
  *(void *)(a1 + 16) = v19;
  *(void *)(a1 + 24) = v20;
  uint64_t v21 = *(void *)(a1 + 32);
  if (v21)
  {
    uint64_t v22 = *(void *)(a1 + 40);
    long long v23 = *(void **)(a1 + 32);
    if (v22 != v21)
    {
      uint64_t v24 = *(void *)(a1 + 40);
      do
      {
        unint64_t v26 = *(void **)(v24 - 32);
        v24 -= 32;
        char v25 = v26;
        if (v26)
        {
          *(void *)(v22 - 24) = v25;
          operator delete(v25);
        }
        uint64_t v22 = v24;
      }
      while (v24 != v21);
      long long v23 = *(void **)v74;
    }
    *(void *)(a1 + 40) = v21;
    operator delete(v23);
    *(void *)uint64_t v74 = 0;
    *(void *)(v74 + 8) = 0;
    *(void *)(v74 + 16) = 0;
  }
  *(_OWORD *)(a1 + 32) = v91;
  *(void *)(a1 + 48) = v92;
  uint64_t v92 = 0;
  long long v91 = 0uLL;
  uint64_t v27 = *(void *)(a1 + 80);
  if (v27)
  {
    uint64_t v28 = *(void *)(a1 + 88);
    uint64_t v29 = *(void **)(a1 + 80);
    if (v28 != v27)
    {
      uint64_t v30 = *(void *)(a1 + 88);
      do
      {
        size_t v32 = *(void **)(v30 - 40);
        v30 -= 40;
        double v31 = v32;
        if (v32)
        {
          *(void *)(v28 - 32) = v31;
          operator delete(v31);
        }
        uint64_t v28 = v30;
      }
      while (v30 != v27);
      uint64_t v29 = *(void **)v73;
    }
    *(void *)(a1 + 88) = v27;
    operator delete(v29);
    *(void *)uint64_t v73 = 0;
    *(void *)(v73 + 8) = 0;
    *(void *)(v73 + 16) = 0;
  }
  *(_OWORD *)(a1 + 80) = v93;
  *(void *)(a1 + 96) = v94;
  uint64_t v94 = 0;
  long long v93 = 0uLL;
  if (sub_DB8C44((uint64_t)a2))
  {
    sub_F5D99C();
    sub_D11F24((uint64_t)v15, (const void **)v78);
    long long v33 = (char *)v81;
    double v34 = v82;
    if (v81 != v82)
    {
      unint64_t v35 = *(char **)(a1 + 64);
      do
      {
        if ((unint64_t)v35 < *(void *)(a1 + 72))
        {
          *(void *)unint64_t v35 = 0;
          *((void *)v35 + 1) = 0;
          *((void *)v35 + 2) = 0;
          *(_OWORD *)unint64_t v35 = *(_OWORD *)v33;
          *((void *)v35 + 2) = *((void *)v33 + 2);
          *(void *)long long v33 = 0;
          *((void *)v33 + 1) = 0;
          *((void *)v33 + 2) = 0;
          *((void *)v35 + 3) = *((void *)v33 + 3);
          v35 += 32;
        }
        else
        {
          unint64_t v35 = sub_D128A0(v15, (uint64_t)v33);
        }
        *(void *)(a1 + 64) = v35;
        v33 += 32;
      }
      while (v33 != v34);
    }
    sub_D12044((uint64_t)v15, (const void **)__p);
    char v36 = (char *)__p;
    if (__p)
    {
      long long v37 = v84;
      unint64_t v38 = __p;
      if (v84 != __p)
      {
        char v39 = v84;
        do
        {
          double v41 = (void *)*((void *)v39 - 5);
          v39 -= 40;
          int v40 = v41;
          if (v41)
          {
            *((void *)v37 - 4) = v40;
            operator delete(v40);
          }
          long long v37 = v39;
        }
        while (v39 != v36);
        unint64_t v38 = __p;
      }
      long long v84 = v36;
      operator delete(v38);
    }
    char v42 = (char *)v81;
    if (v81)
    {
      std::string v43 = v82;
      uint64_t v44 = v81;
      if (v82 != v81)
      {
        std::string::size_type v45 = v82;
        do
        {
          int v47 = (void *)*((void *)v45 - 4);
          v45 -= 32;
          unint64_t v46 = v47;
          if (v47)
          {
            *((void *)v43 - 3) = v46;
            operator delete(v46);
          }
          std::string v43 = v45;
        }
        while (v45 != v42);
        uint64_t v44 = v81;
      }
      unint64_t v82 = v42;
      operator delete(v44);
    }
    if (v79)
    {
      uint64_t v80 = v79;
      operator delete(v79);
    }
    if (*(void *)&v78[0])
    {
      *((void *)&v78[0] + 1) = *(void *)&v78[0];
      operator delete(*(void **)&v78[0]);
    }
  }
  if (*(void *)(a1 + 32) != *(void *)(a1 + 40))
  {
    sub_F5FE04((unsigned int **)a3, (uint64_t)v78);
    size_t v48 = *(void **)v72;
    if (*(void *)v72)
    {
      *(void *)(a1 + 112) = v48;
      operator delete(v48);
      *(void *)uint64_t v72 = 0;
      *(void *)(v72 + 8) = 0;
      *(void *)(v72 + 16) = 0;
    }
    *(_OWORD *)(a1 + 104) = v78[0];
    *(void *)(a1 + 120) = *(void *)&v78[1];
  }
  uint64_t v49 = *(void *)(a1 + 200);
  BYTE7(v78[1]) = 18;
  strcpy((char *)v78, "QuickTurnAvoidance");
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  unint64_t v50 = sub_374CDC(v49, (uint64_t)v78, (uint64_t *)&v75);
  char v51 = (void **)v75;
  if (v75)
  {
    size_t v52 = v76;
    uint64_t v53 = v75;
    if (v76 != v75)
    {
      do
      {
        if (*((char *)v52 - 1) < 0) {
          operator delete(*(v52 - 3));
        }
        v52 -= 3;
      }
      while (v52 != v51);
      uint64_t v53 = v75;
    }
    uint64_t v76 = v51;
    operator delete(v53);
  }
  if (SBYTE7(v78[1]) < 0) {
    operator delete(*(void **)&v78[0]);
  }
  *(void *)(a1 + 184) = sub_D12164(v50, v88);
  if ((sub_DBCC38((uint64_t)a2) & 1) != 0 || (uint64_t v54 = *(void *)(a3 + 8), *(void *)a3 == v54))
  {
    *(unsigned char *)(a1 + 192) = 0;
    unint64_t v58 = (char *)v93;
    if (!(void)v93) {
      goto LABEL_74;
    }
  }
  else
  {
    uint64_t v55 = *(void *)a3 + 160;
    do
    {
      BOOL v56 = *(_DWORD *)(v55 - 8) != 1 || *(unsigned char *)(v55 - 4) == 0;
      char v57 = !v56;
      if (!v56) {
        break;
      }
      BOOL v56 = v55 == v54;
      v55 += 160;
    }
    while (!v56);
    *(unsigned char *)(a1 + 192) = v57;
    unint64_t v58 = (char *)v93;
    if (!(void)v93)
    {
LABEL_74:
      int v59 = (char *)v91;
      if (!(void)v91) {
        goto LABEL_75;
      }
      goto LABEL_88;
    }
  }
  unint64_t v62 = (char *)*((void *)&v93 + 1);
  unint64_t v63 = v58;
  if (*((char **)&v93 + 1) != v58)
  {
    unint64_t v64 = (char *)*((void *)&v93 + 1);
    do
    {
      unint64_t v66 = (void *)*((void *)v64 - 5);
      v64 -= 40;
      uint64_t v65 = v66;
      if (v66)
      {
        *((void *)v62 - 4) = v65;
        operator delete(v65);
      }
      unint64_t v62 = v64;
    }
    while (v64 != v58);
    unint64_t v63 = (char *)v93;
  }
  *((void *)&v93 + 1) = v58;
  operator delete(v63);
  int v59 = (char *)v91;
  if (!(void)v91)
  {
LABEL_75:
    char v60 = v89;
    if (!v89) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }
LABEL_88:
  unint64_t v67 = (char *)*((void *)&v91 + 1);
  unint64_t v68 = v59;
  if (*((char **)&v91 + 1) != v59)
  {
    uint64_t v69 = (char *)*((void *)&v91 + 1);
    do
    {
      uint64_t v71 = (void *)*((void *)v69 - 4);
      v69 -= 32;
      unint64_t v70 = v71;
      if (v71)
      {
        *((void *)v67 - 3) = v70;
        operator delete(v70);
      }
      unint64_t v67 = v69;
    }
    while (v69 != v59);
    unint64_t v68 = (char *)v91;
  }
  *((void *)&v91 + 1) = v59;
  operator delete(v68);
  char v60 = v89;
  if (v89)
  {
LABEL_76:
    unint64_t v90 = v60;
    operator delete(v60);
  }
LABEL_77:
  if ((void)v85)
  {
    *((void *)&v85 + 1) = v85;
    operator delete((void *)v85);
  }
  return a1;
}

void sub_D2D4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  sub_CF7EAC((uint64_t)&a44);
  int v47 = *a11;
  if (*a11)
  {
    *(void *)(v44 + 112) = v47;
    operator delete(v47);
  }
  sub_591CA4(a12);
  sub_C64510(v45);
  sub_C64510(a13);
  size_t v48 = *(void **)v44;
  if (*(void *)v44)
  {
    *(void *)(v44 + 8) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D2D560(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(void *)a1)
  {
    sub_C686F8(a1, *(void ***)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL sub_D2D5AC(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v8.n128_u64[0] = *a2;
  v8.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(&v9, &v8);
  BOOL v3 = sub_3E7AC0(v2, (uint64_t)&v9);
  unint64_t v4 = (void **)__p;
  if (__p)
  {
    uint64_t v5 = v11;
    unint64_t v6 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 4;
      }
      while (v5 != v4);
      unint64_t v6 = __p;
    }
    unsigned int v11 = v4;
    operator delete(v6);
  }
  return v3;
}

void sub_D2D654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    sub_20AFFB0();
  }
  _Unwind_Resume(exception_object);
}

void sub_D2D678(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void ***)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) < a2)
  {
    unint64_t v6 = *(void ***)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      unsigned int v11 = (char *)operator new(24 * v10);
    }
    else
    {
      unsigned int v11 = 0;
    }
    char v13 = &v11[24 * v7];
    unint64_t v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v5) {
        return;
      }
      goto LABEL_36;
    }
    do
    {
      uint64_t v17 = v13;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      long long v18 = *(_OWORD *)(v5 - 3);
      v5 -= 3;
      *(_OWORD *)(v13 - 24) = v18;
      v13 -= 24;
      *((void *)v17 - 1) = v5[2];
      unint64_t *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    while (v5 != v6);
    uint64_t v19 = *(void ***)a1;
    uint64_t v5 = *(void ***)(a1 + 8);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5 == v19)
    {
LABEL_35:
      if (!v5) {
        return;
      }
LABEL_36:
      operator delete(v5);
      return;
    }
    uint64_t v20 = v5;
    while (1)
    {
      long long v23 = (void **)*(v20 - 3);
      v20 -= 3;
      uint64_t v22 = v23;
      if (!v23) {
        goto LABEL_21;
      }
      uint64_t v24 = (void **)*(v5 - 2);
      uint64_t v21 = v22;
      if (v24 != v22) {
        break;
      }
LABEL_20:
      *(v5 - 2) = v22;
      operator delete(v21);
LABEL_21:
      uint64_t v5 = v20;
      if (v20 == v19)
      {
        uint64_t v5 = v19;
        goto LABEL_35;
      }
    }
    while (1)
    {
      if (*((char *)v24 - 1) < 0)
      {
        operator delete(*(v24 - 3));
        char v25 = v24 - 15;
        unint64_t v26 = *(v24 - 15);
        if (v26)
        {
LABEL_31:
          uint64_t v27 = (uint64_t)*(v24 - 14);
          uint64_t v28 = v26;
          if ((void *)v27 != v26)
          {
            do
              uint64_t v27 = sub_3AFFFC(v27 - 1056);
            while ((void *)v27 != v26);
            uint64_t v28 = *v25;
          }
          *(v24 - 14) = v26;
          operator delete(v28);
        }
      }
      else
      {
        char v25 = v24 - 15;
        unint64_t v26 = *(v24 - 15);
        if (v26) {
          goto LABEL_31;
        }
      }
      uint64_t v24 = v25;
      if (v25 == v22)
      {
        uint64_t v21 = *v20;
        goto LABEL_20;
      }
    }
  }
  if (a2)
  {
    size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(*(void **)(a1 + 8), v12);
    uint64_t v5 = (void **)((char *)v5 + v12);
  }
  *(void *)(a1 + 8) = v5;
}

uint64_t sub_D2D900(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_D2DA10((void *)a1, *(long long ***)a2, *(long long ***)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = *(unsigned char **)(a2 + 24);
  uint64_t v4 = *(unsigned char **)(a2 + 32);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0x86BCA1AF286BCA1BLL * (v6 >> 3) >= 0x1AF286BCA1AF287) {
      sub_2E00();
    }
    unint64_t v7 = (char *)operator new(v6);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v7;
    unint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 40) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 32) = v8;
  }
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 64) = v10;
  return a1;
}

void sub_D2D9EC(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_20B0014((void ***)v1);
  _Unwind_Resume(a1);
}

void *sub_D2DA10(void *result, long long **a2, long long **a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t result = operator new(24 * a4);
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[3 * a4];
    for (uint64_t i = result; a2 != a3; i += 3)
    {
      sub_D2DB88(result, a2);
      a2 += 3;
      uint64_t result = i + 3;
    }
    v5[1] = result;
  }
  return result;
}

void sub_D2DAF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_D2DB30((void ***)va);
  _Unwind_Resume(a1);
}

void sub_D2DB0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void **);
  uint64_t v7 = va_arg(va1, void);
  sub_D2DDA0((uint64_t)va1);
  *(void *)(v2 + 8) = v3;
  sub_D2DB30((void ***)va);
  _Unwind_Resume(a1);
}

void ***sub_D2DB30(void ***a1)
{
  if (*((unsigned char *)a1 + 8)) {
    return a1;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = (void **)**a1;
  if (!v4) {
    return a1;
  }
  sub_C686F8((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

void *sub_D2DB88(void *a1, long long **a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xEEEEEEEEEEEEEEEFLL * (v6 >> 3);
    if (v7 >= 0x222222222222223) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[120 * v7];
    a1[1] = sub_D2DC60(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_D2DC34(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20ACC40((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D2DC60(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v14 = a4;
  if (a2 != a3)
  {
    int64_t v6 = a2 + 6;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      unint64_t v8 = v6 - 6;
      sub_3B168C(v4, *((void *)v6 - 12), *((void *)v6 - 11), 0xF83E0F83E0F83E1 * ((uint64_t)(*((void *)v6 - 11) - *((void *)v6 - 12)) >> 5));
      *(_OWORD *)(v4 + 24) = *(long long *)((char *)v6 - 72);
      long long v9 = *(long long *)((char *)v6 - 56);
      long long v10 = *(long long *)((char *)v6 - 40);
      long long v11 = *(long long *)((char *)v6 - 24);
      *(void *)(v4 + 85) = *(void *)((char *)v6 - 11);
      *(_OWORD *)(v4 + 72) = v11;
      *(_OWORD *)(v4 + 56) = v10;
      *(_OWORD *)(v4 + 40) = v9;
      size_t v12 = (unsigned char *)(v4 + 96);
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v12, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        *(void *)(v4 + 112) = *((void *)v6 + 2);
        *(_OWORD *)size_t v12 = v7;
      }
      uint64_t v4 = v14 + 120;
      v14 += 120;
      int64_t v6 = (long long *)((char *)v6 + 120);
    }
    while ((long long *)((char *)v8 + 120) != a3);
  }
  return v4;
}

void sub_D2DD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*v9)
  {
    sub_20AEE38((uint64_t)v9);
    sub_97B074((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_97B074((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_D2DDA0(uint64_t a1)
{
  uint64_t v2 = *(void ****)(a1 + 8);
  uint64_t v1 = *(void ****)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *v1;
    while (1)
    {
      unint64_t v8 = (void **)*(v5 - 3);
      v5 -= 3;
      long long v7 = v8;
      if (!v8) {
        goto LABEL_5;
      }
      long long v9 = (void **)*(v3 - 2);
      int64_t v6 = v7;
      if (v9 != v7) {
        break;
      }
LABEL_4:
      *(v3 - 2) = v7;
      operator delete(v6);
LABEL_5:
      uint64_t v3 = v5;
      if (v5 == v4) {
        return;
      }
    }
    while (1)
    {
      if (*((char *)v9 - 1) < 0)
      {
        operator delete(*(v9 - 3));
        long long v10 = v9 - 15;
        long long v11 = *(v9 - 15);
        if (v11)
        {
LABEL_15:
          uint64_t v12 = (uint64_t)*(v9 - 14);
          char v13 = v11;
          if ((void *)v12 != v11)
          {
            do
              uint64_t v12 = sub_3AFFFC(v12 - 1056);
            while ((void *)v12 != v11);
            char v13 = *v10;
          }
          *(v9 - 14) = v11;
          operator delete(v13);
        }
      }
      else
      {
        long long v10 = v9 - 15;
        long long v11 = *(v9 - 15);
        if (v11) {
          goto LABEL_15;
        }
      }
      long long v9 = v10;
      if (v10 == v7)
      {
        int64_t v6 = *v5;
        goto LABEL_4;
      }
    }
  }
}

char *sub_D2DE90(char **a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (__sz <= (v8 - (uint64_t)result) >> 5)
  {
    uint64_t v21 = a1[1];
    uint64_t v20 = a1 + 1;
    uint64_t v19 = v21;
    unint64_t v22 = (v21 - result) >> 5;
    if (v22 >= __sz)
    {
      if (a2 == a3)
      {
        *uint64_t v20 = result;
      }
      else
      {
        uint64_t v30 = 0;
        do
        {
          double v31 = &result[v30];
          size_t v32 = &a2[v30];
          if (a2 != result)
          {
            unsigned int v33 = *((_DWORD *)v31 + 4);
            unsigned int v34 = *((_DWORD *)v32 + 4);
            if (v33 == v34)
            {
              if (v33 <= 1) {
                *(_OWORD *)double v31 = *(_OWORD *)v32;
              }
            }
            else
            {
              if (v34 <= 1)
              {
                *(_OWORD *)double v31 = *(_OWORD *)v32;
                unsigned int v34 = *((_DWORD *)v32 + 4);
              }
              *((_DWORD *)v31 + 4) = v34;
            }
          }
          v31[24] = v32[24];
          v30 += 32;
        }
        while (&a2[v30] != a3);
        *uint64_t v20 = &result[v30];
      }
    }
    else
    {
      long long v23 = &a2[32 * v22];
      if (v19 != result)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 32 * v22;
        do
        {
          unint64_t v26 = &result[v24];
          uint64_t v27 = &a2[v24];
          if (a2 != result)
          {
            unsigned int v28 = *((_DWORD *)v26 + 4);
            unsigned int v29 = *((_DWORD *)v27 + 4);
            if (v28 == v29)
            {
              if (v28 <= 1) {
                *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
              }
            }
            else
            {
              if (v29 <= 1)
              {
                *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
                unsigned int v29 = *((_DWORD *)v27 + 4);
              }
              *((_DWORD *)v26 + 4) = v29;
            }
          }
          v26[24] = v27[24];
          v24 += 32;
        }
        while (v25 != v24);
        uint64_t result = *v20;
      }
      unint64_t v35 = result;
      if (v23 != a3)
      {
        uint64_t v36 = 0;
        do
        {
          long long v37 = &v23[v36];
          unint64_t v38 = &result[v36];
          *(_DWORD *)&result[v36 + 16] = *(_DWORD *)&v23[v36 + 16];
          if (*(_DWORD *)&v23[v36 + 16] <= 1u) {
            *(_OWORD *)unint64_t v38 = *(_OWORD *)v37;
          }
          v38[24] = v37[24];
          v36 += 32;
        }
        while (&v23[v36] != a3);
        unint64_t v35 = &result[v36];
      }
      *uint64_t v20 = v35;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz >> 59) {
      goto LABEL_48;
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 59) {
LABEL_48:
    }
      sub_2E00();
    uint64_t v13 = 32 * v12;
    uint64_t result = (char *)operator new(32 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    uint64_t v14 = result;
    if (a2 != a3)
    {
      uint64_t v15 = 0;
      do
      {
        uint64_t v16 = &a2[v15];
        uint64_t v17 = &result[v15];
        unsigned int v18 = *(_DWORD *)&a2[v15 + 16];
        *(_DWORD *)&result[v15 + 16] = v18;
        if (v18 <= 1) {
          *(_OWORD *)uint64_t v17 = *(_OWORD *)v16;
        }
        v17[24] = v16[24];
        v15 += 32;
      }
      while (&a2[v15] != a3);
      uint64_t v14 = &result[v15];
    }
    a1[1] = v14;
  }
  return result;
}

void *sub_D2E164(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t result = operator new(24 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[3 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t result = sub_D2E30C(&v8[v9 / 8], (uint64_t *)(a2 + v9));
        v9 += 24;
      }
      while (a2 + v9 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_D2E228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_D2E264((void ***)va);
  _Unwind_Resume(a1);
}

void sub_D2E23C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v4) {
    sub_20B0060((uint64_t)v3 + v4, v3);
  }
  *(void *)(v2 + 8) = v3;
  sub_D2E264((void ***)va);
  _Unwind_Resume(a1);
}

void ***sub_D2E264(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void ***)**result;
    if (v3)
    {
      uint64_t v4 = (void ***)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        int64_t v6 = v4 - 3;
        do
        {
          if (*v6)
          {
            sub_C64384((uint64_t)v6, *v6);
            operator delete(*v6);
          }
          BOOL v7 = v6 == v3;
          v6 -= 3;
        }
        while (!v7);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *sub_D2E30C(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556) {
      sub_2E00();
    }
    uint64_t v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[6 * v7];
    a1[1] = sub_D2E3E8(v3, v4, v5, v8);
  }
  return a1;
}

void sub_D2E3B8(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1)
  {
    sub_C64384(v1, *(void ***)v1);
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_D2E3E8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  BOOL v11 = a4;
  if (a2 != a3)
  {
    int64_t v6 = (long long *)(a2 + 24);
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      uint64_t v8 = (uint64_t)v6 - 24;
      sub_444C18(v4, *((void *)v6 - 3), *((void *)v6 - 2), 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*((void *)v6 - 2) - *((void *)v6 - 3)) >> 3));
      unint64_t v9 = v4 + 3;
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v9, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        v4[5] = *((void *)v6 + 2);
        *(_OWORD *)unint64_t v9 = v7;
      }
      uint64_t v4 = v11 + 6;
      v11 += 6;
      v6 += 3;
    }
    while (v8 + 48 != a3);
  }
  return v4;
}

void sub_D2E4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*v9)
  {
    sub_20B00AC((uint64_t)v9);
    sub_D2E500((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_D2E500((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_D2E500(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_CF2634(*(void *)a1, **(void **)(a1 + 16), **(void ****)(a1 + 16), **(void **)(a1 + 8), **(void ****)(a1 + 8));
  }
  return a1;
}

uint64_t sub_D2E54C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(unsigned char *)a1 = sub_DB8BEC(a2);
  int v17 = sub_DC6980(a2, a8);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 4) = v17;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(unsigned char *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 57) = 0;
  *(unsigned char *)(a1 + 61) = 1;
  *(_DWORD *)(a1 + 62) = 0;
  *(_DWORD *)(a1 + 65) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = -1;
  *(unsigned char *)(a1 + 100) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = a8;
  *(void *)(a1 + 136) = a9;
  *(void *)(a1 + 144) = a4;
  *(void *)(a1 + 152) = a5;
  *(void *)(a1 + 160) = a6;
  *(_DWORD *)(a1 + 168) = sub_F3D824(a2, a7, 1);
  sub_D2E6B0(a2, a7, a1 + 8, a3, *(void *)(a1 + 136), a8, a1 + 176);
  *(void *)(a1 + 416) = sub_DB893C(a2);
  *(_WORD *)(a1 + 424) = v18;
  *(unsigned char *)(a1 + 426) = v19;
  *(unsigned char *)(a1 + 427) = sub_DB8D04(a2);
  *(unsigned char *)(a1 + 428) = sub_401FE4(a7);
  return a1;
}

void sub_D2E680(_Unwind_Exception *a1)
{
  sub_3C77C4(v1);
  _Unwind_Resume(a1);
}

void sub_D2E694(_Unwind_Exception *a1)
{
  sub_D1C804(v2);
  sub_3C77C4(v1);
  _Unwind_Resume(a1);
}

void sub_D2E6B0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  BOOL v14 = sub_DB8C44(a1);
  unsigned int v15 = sub_35E640();
  uint64_t v41 = a7;
  char v40 = v14;
  if (*(unsigned char *)(nullsub_1(a5) + 128))
  {
    uint64_t v16 = nullsub_1(a5);
    if (!*(unsigned char *)(v16 + 128))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    char v17 = sub_491B20(v16);
  }
  else
  {
    char v17 = 0;
  }
  unint64_t v57 = sub_DB893C(a1);
  __int16 v58 = v18;
  char v59 = v19;
  int v20 = sub_DBB2FC(a1) >> 32;
  int v22 = v21;
  sub_DBC134(a1, (uint64_t)v54);
  v52[0] = 0;
  v52[1] = 0;
  uint64_t v53 = 0;
  if (!v22)
  {
    uint64_t v23 = *a4;
    uint64_t v24 = a4[1];
    if (*a4 != v24)
    {
      while (!*(_DWORD *)(v23 + 104))
      {
        v23 += 376;
        if (v23 == v24) {
          goto LABEL_12;
        }
      }
    }
    if (v23 == v24)
    {
LABEL_12:
      v42[0] = 0;
      v42[1] = 0;
      std::string v43 = 0;
    }
    else
    {
      *(_OWORD *)char v42 = *(_OWORD *)(v23 + 216);
      std::string v43 = *(char ***)(v23 + 232);
    }
    HIBYTE(v51) = 15;
    strcpy((char *)v50, "RerouteCategory");
    memset(__p, 0, 24);
    uint64_t v25 = sub_374CDC(a6, (uint64_t)v50, (uint64_t *)__p);
    sub_484AC4((double *)&v45, v25);
    int v26 = sub_484B5C((uint64_t)v54, (double *)&v45);
    uint64_t v27 = (void **)__p[0];
    if (__p[0])
    {
      unsigned int v28 = (void **)__p[1];
      unsigned int v29 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v28 - 1) < 0) {
            operator delete(*(v28 - 3));
          }
          v28 -= 3;
        }
        while (v28 != v27);
        unsigned int v29 = __p[0];
      }
      __p[1] = v27;
      operator delete(v29);
    }
    if (SHIBYTE(v51) < 0) {
      operator delete(v50[0]);
    }
    strcpy((char *)__p, "FilteredRerouteHistory");
    HIBYTE(__p[2]) = 22;
    std::string::size_type v45 = 0;
    unint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v30 = sub_374CDC(a6, (uint64_t)__p, (uint64_t *)&v45);
    sub_4844F0(v48, v30);
    sub_4844F4(a5, (unsigned __int8 *)v42, (uint64_t *)v54, v20, v15, v26, (uint64_t)v48, (uint64_t)v50);
    double v31 = (void **)v45;
    *(_OWORD *)size_t v52 = *(_OWORD *)v50;
    uint64_t v53 = v51;
    v50[1] = 0;
    uint64_t v51 = 0;
    v50[0] = 0;
    if (v45)
    {
      size_t v32 = v46;
      unsigned int v33 = v45;
      if (v46 != v45)
      {
        do
        {
          if (*((char *)v32 - 1) < 0) {
            operator delete(*(v32 - 3));
          }
          v32 -= 3;
        }
        while (v32 != v31);
        unsigned int v33 = v45;
      }
      unint64_t v46 = v31;
      operator delete(v33);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_485C30(a5, (uint64_t)v42);
  unsigned int v34 = (uint64_t *)sub_487A58(a5);
  unint64_t v35 = (long long *)sub_487740(a5);
  sub_D1C608(v41, a3, a2, v40, v15, v17, (uint64_t *)&v57, (uint64_t)v52, v54, (uint64_t)v42, v34, v35);
  uint64_t v36 = (char **)v42[1];
  if (v42[1])
  {
    long long v37 = v43;
    unint64_t v38 = v42[1];
    if (v43 != v42[1])
    {
      do
      {
        v37 -= 9;
        sub_3A688C((uint64_t)&v44, v37);
      }
      while (v37 != v36);
      unint64_t v38 = v42[1];
    }
    std::string v43 = v36;
    operator delete(v38);
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (v55)
  {
    BOOL v56 = v55;
    operator delete(v55);
  }
}

void sub_D2EA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51)
{
  if (__p) {
    operator delete(__p);
  }
  if (a50) {
    operator delete(a50);
  }
  _Unwind_Resume(exception_object);
}

double sub_D2EAD8()
{
  byte_25E64C7 = 1;
  word_25E64B0 = 65;
  byte_25E64DF = 1;
  word_25E64C8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E6588 = 0u;
  xmmword_25E6598 = 0u;
  dword_25E65A8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E6588, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E6588, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E6588, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E6588, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E64F7 = 8;
  strcpy((char *)&qword_25E64E0, "any_mode");
  byte_25E650F = 7;
  strcpy((char *)&dword_25E64F8, "cycling");
  byte_25E6527 = 7;
  strcpy((char *)&dword_25E6510, "driving");
  byte_25E653F = 7;
  strcpy((char *)&dword_25E6528, "walking");
  qword_25E6548 = 0;
  qword_25E6550 = 0;
  qword_25E6540 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E6540 = (uint64_t)v0;
  qword_25E6548 = (uint64_t)(v0 + 9);
  qword_25E6550 = (uint64_t)(v0 + 9);
  qword_25E6558 = 0;
  qword_25E6560 = 0;
  unk_25E6568 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E6560 = (uint64_t)(v1 + 9);
  unk_25E6568 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E6558 = (uint64_t)v1;
  return result;
}

void sub_D2EDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if ((void)xmmword_25E6598) {
    sub_20B00F0((void **)xmmword_25E6598);
  }
  long long v37 = (void *)xmmword_25E6588;
  *(void *)&xmmword_25E6588 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_D2EE44()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  char v4 = (void *)v3;
  int v5 = (void *)v0;
  uint64_t v6 = *(void *)sub_37D0C0(v3);
  char v7 = sub_69510();
  memset(__p, 0, sizeof(__p));
  char v48 = 4;
  uint64_t v47 = (void *)1851878480;
  uint64_t v49 = 0;
  unint64_t v51 = 0;
  *(void *)unint64_t v50 = 0;
  sub_D03E24((char *)&v49, 0, 0, 0);
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "Plan.Started");
  sub_710A8(6, (uint64_t)__p, v6);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_725D0((uint64_t)v46);
  if (!sub_DBD380((uint64_t)v5) || sub_374EFC(v4))
  {
    if (sub_DBD380((uint64_t)v5))
    {
      if (sub_DBD380((uint64_t)v5))
      {
        LOBYTE(v58[0]) = 4;
        LODWORD(__p[0]) = 1;
        uint64_t v8 = *(void *)v50;
        if (*(void *)v50 >= v51)
        {
          uint64_t v11 = sub_D067F0((uint64_t *)&v49, "RequestWithTrafficAttached", (char *)v58, (int *)__p);
          goto LABEL_30;
        }
        sub_D069C0((int)&v51, *(uint64_t *)v50, "RequestWithTrafficAttached", (char *)v58, (int *)__p);
LABEL_12:
        uint64_t v11 = v8 + 48;
LABEL_30:
        *(void *)unint64_t v50 = v11;
      }
    }
    else
    {
      int v9 = sub_374CEC(v4);
      if (v9 != 0x7FFFFFFF)
      {
        __p[0] = (void *)std::chrono::system_clock::now().__d_.__rep_;
        int v10 = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)__p);
        LOBYTE(v58[0]) = 0;
        LODWORD(__p[0]) = v10 - v9;
        uint64_t v8 = *(void *)v50;
        if (*(void *)v50 >= v51)
        {
          uint64_t v11 = sub_D32D4C((uint64_t *)&v49, "TrafficLatency", (char *)v58, (int *)__p);
          goto LABEL_30;
        }
        sub_D32F1C((int)&v51, *(uint64_t *)v50, "TrafficLatency", (char *)v58, (int *)__p);
        goto LABEL_12;
      }
    }
    if (sub_DBB340((uint64_t)v5) && sub_37B490((uint64_t)v4))
    {
      __p[0] = operator new(0x20uLL);
      *(_OWORD *)&__p[1] = xmmword_20B9800;
      strcpy((char *)__p[0], "InternalError.InvalidEVRequest");
      sub_710A8(6, (uint64_t)__p, v6);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        sub_188FC78(__p, (uint64_t)"Got a DooM EV request. Routing currently does not support EV for DooM.", 70);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v58, 3u);
        if (SBYTE7(v59) < 0) {
          operator delete(v58[0]);
        }
        if (SHIBYTE(v56) < 0) {
          operator delete(v55[1]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      double v17 = sub_72638((uint64_t)v46);
      *(void *)&v61[0] = v5;
      *((double *)v61 + 1) = v17;
      v34.n128_u64[0] = 2;
      v34.n128_u64[1] = (unint64_t)&off_2439090;
      sub_3E7814((__n128 *)v32, &v34);
      sub_CF1ACC((uint64_t)&v60, 0, (uint64_t)v32, (uint64_t)v4, (uint64_t)v5, v61);
      sub_CBB384(&v60, (uint64_t)v58);
      sub_C6B2B4((uint64_t)__p, (uint64_t)v58);
      sub_162C594(v57, 0, 0);
      uint64_t v18 = *(void *)(v2 + 24);
      if (!v18) {
        sub_29F82C();
      }
      (*(void (**)(uint64_t, void **))(*(void *)v18 + 48))(v18, __p);
      sub_162D64C(v57);
      sub_162D64C(__p);
      sub_162D64C(v58);
      sub_CF22FC((uint64_t)&v60);
      int v14 = (void **)v33[0];
      if (v33[0])
      {
        char v19 = (void **)v33[1];
        uint64_t v16 = v33[0];
        if (v33[1] == v33[0]) {
          goto LABEL_59;
        }
        do
        {
          if (*((char *)v19 - 1) < 0) {
            operator delete(*(v19 - 3));
          }
          v19 -= 4;
        }
        while (v19 != v14);
        goto LABEL_58;
      }
      goto LABEL_83;
    }
    v45[5] = (uint64_t)v7;
    v45[6] = (uint64_t)&v47;
    v45[7] = (uint64_t)v46;
    v45[8] = v6;
    v45[9] = (uint64_t)v4;
    v45[10] = v2;
    v45[0] = v6;
    v45[1] = (uint64_t)v5;
    v45[2] = (uint64_t)v46;
    v45[3] = v2;
    v45[4] = (uint64_t)v4;
    sub_DB6A08((uint64_t)v5, (uint64_t)v61);
    unsigned int v20 = sub_DB7034((uint64_t)v5);
    sub_494284(1, v20, (uint64_t)v61);
    char v44 = 8;
    strcpy((char *)v43, "Historic");
    char v42 = 4;
    strcpy((char *)v41, "Live");
    __p[0] = v5;
    LODWORD(__p[1]) = 0;
    std::string __p[2] = v4;
    LOBYTE(v53) = sub_DC5CDC(__p);
    LOBYTE(v54[1]) = 0;
    sub_C9CA80((uint64_t)__p, (uint64_t)v36);
    if (v36[0] && (unint64_t)(0x51B3BEA3677D46CFLL * ((uint64_t)(v38 - v37) >> 3)) > 1)
    {
      sub_CF2E84((uint64_t)&v40, (uint64_t)__p);
      sub_71740(6, (uint64_t)__p, v6);
      int v21 = v53;
      if (v53)
      {
        int v22 = (void **)v54[0];
        uint64_t v23 = v53;
        if (v54[0] != v53)
        {
          do
          {
            if (*((char *)v22 - 25) < 0) {
              operator delete(*(v22 - 6));
            }
            v22 -= 6;
          }
          while (v22 != v21);
          uint64_t v23 = v53;
        }
        v54[0] = v21;
        operator delete(v23);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      sub_CF6428((uint64_t)__p, (uint64_t)v5, (uint64_t *)&v37, (uint64_t)v4);
      sub_C7C7B4((uint64_t)__p, (uint64_t)&v35);
    }
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_20B9240;
    strcpy((char *)__p[0], "[driving-doom] input resolving failed");
    sub_D316B8(v45, (uint64_t)__p, v37, v38);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (v36[0])
    {
      unint64_t v24 = v37;
      if (!v37) {
        goto LABEL_80;
      }
      uint64_t v25 = v38;
      int v26 = (void *)v37;
      if (v38 != v37)
      {
        do
        {
          v25 -= 376;
          sub_402C7C(v25);
        }
        while (v25 != v24);
        int v26 = (void *)v37;
      }
      unint64_t v38 = v24;
    }
    else
    {
      uint64_t v27 = (void **)v39;
      if (!v39) {
        goto LABEL_80;
      }
      unsigned int v28 = v40;
      int v26 = v39;
      if (v40 != v39)
      {
        do
        {
          if (*((char *)v28 - 1) < 0) {
            operator delete(*(v28 - 3));
          }
          v28 -= 4;
        }
        while (v28 != v27);
        int v26 = v39;
      }
      char v40 = v27;
    }
    operator delete(v26);
LABEL_80:
    if (v42 < 0)
    {
      operator delete(v41[0]);
      if ((v44 & 0x80000000) == 0) {
        goto LABEL_82;
      }
    }
    else if ((v44 & 0x80000000) == 0)
    {
LABEL_82:
      sub_4BCC2C((uint64_t)v61);
      goto LABEL_83;
    }
    operator delete(v43[0]);
    goto LABEL_82;
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "Plan.InternalError.RequestWithTrafficAttached");
  sub_710A8(6, (uint64_t)__p, v6);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)__p);
    sub_188FC78(__p, (uint64_t)"Got request with traffic attached but this server does not allow them.", 70);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v58, 1u);
    if (SBYTE7(v59) < 0) {
      operator delete(v58[0]);
    }
    if (SHIBYTE(v56) < 0) {
      operator delete(v55[1]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  double v12 = sub_72638((uint64_t)v46);
  *(void *)&v61[0] = v5;
  *((double *)v61 + 1) = v12;
  v34.n128_u64[0] = 1;
  v34.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814((__n128 *)v32, &v34);
  sub_CF1ACC((uint64_t)&v60, 0, (uint64_t)v32, (uint64_t)v4, (uint64_t)v5, v61);
  sub_CBB384(&v60, (uint64_t)v58);
  sub_C6B2B4((uint64_t)__p, (uint64_t)v58);
  sub_162C594(v57, 0, 0);
  uint64_t v13 = *(void *)(v2 + 24);
  if (!v13) {
    sub_29F82C();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v13 + 48))(v13, __p);
  sub_162D64C(v57);
  sub_162D64C(__p);
  sub_162D64C(v58);
  sub_CF22FC((uint64_t)&v60);
  int v14 = (void **)v33[0];
  if (v33[0])
  {
    unsigned int v15 = (void **)v33[1];
    uint64_t v16 = v33[0];
    if (v33[1] == v33[0]) {
      goto LABEL_59;
    }
    do
    {
      if (*((char *)v15 - 1) < 0) {
        operator delete(*(v15 - 3));
      }
      v15 -= 4;
    }
    while (v15 != v14);
LABEL_58:
    uint64_t v16 = v33[0];
LABEL_59:
    v33[1] = v14;
    operator delete(v16);
  }
LABEL_83:
  unsigned int v29 = v49;
  if (v49)
  {
    uint64_t v30 = *(void *)v50;
    double v31 = v49;
    if (*(void **)v50 != v49)
    {
      do
      {
        if (*(char *)(v30 - 25) < 0) {
          operator delete(*(void **)(v30 - 48));
        }
        v30 -= 48;
      }
      while ((void *)v30 != v29);
      double v31 = v49;
    }
    *(void *)unint64_t v50 = v29;
    operator delete(v31);
  }
  if (v48 < 0) {
    operator delete(v47);
  }
}

void sub_D30D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  if (*(char *)(v9 + 23) < 0) {
    operator delete((void *)STACK[0x1230]);
  }
  sub_CBC8A8((uint64_t)va);
  sub_D1EAF8((uint64_t)&STACK[0x1B10]);
  sub_C8423C(&STACK[0x520]);
  sub_D32468((uint64_t)&STACK[0x23D0]);
  sub_C927E0((uint64_t)&STACK[0x2408]);
  sub_C66564((void ***)&STACK[0x638]);
  sub_C7B2B4((uint64_t)&STACK[0x650]);
  sub_C8ACB8((uint64_t)&STACK[0x6B8]);
  sub_C72310((uint64_t)&STACK[0x710]);
  sub_C68C60((uint64_t)&STACK[0x29F8]);
  sub_C7B2B4((uint64_t)&STACK[0x910]);
  sub_D1BF38((uint64_t)&STACK[0x978]);
  sub_C8ACB8((uint64_t)&STACK[0xB28]);
  sub_C72310((uint64_t)&STACK[0xB80]);
  sub_D1AA70((uint64_t)&STACK[0xD80]);
  sub_D0FB2C((uint64_t)&STACK[0xE60]);
  sub_C5C9E0((uint64_t)&STACK[0x1048]);
  sub_C7E544((uint64_t)&STACK[0x1080]);
  sub_C9D440((uint64_t)&STACK[0x1100]);
  if (*(char *)(v10 + 3159) < 0) {
    operator delete((void *)STACK[0x1160]);
  }
  if (*(char *)(v10 + 3183) < 0) {
    operator delete((void *)STACK[0x1178]);
  }
  sub_4BCC2C((uint64_t)&STACK[0x2A60]);
  sub_A3A4((uint64_t)&STACK[0x1200]);
  _Unwind_Resume(a1);
}

uint64_t sub_D3161C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    sub_29F82C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_D3166C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_C6B2B4(a1, a2);
  sub_162C594(v3 + 560, 0, 0);
  return a1;
}

void sub_D316A4(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_D316B8(uint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  v26.n128_u64[0] = a3;
  v26.n128_u64[1] = a4;
  sub_71424(6, (const std::error_condition *)&v26, *a1);
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v22);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    sub_188FC78(v22, v7, v8);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (v23 < 0) {
      operator delete((void *)v22[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v9 = a1[1];
  double v10 = sub_72638(a1[2]);
  *(void *)&long long v25 = v9;
  *((double *)&v25 + 1) = v10;
  uint64_t v11 = a1[3];
  sub_3E7814(&v16, &v26);
  sub_CF1ACC((uint64_t)v19, 0, (uint64_t)&v16, a1[4], a1[1], &v25);
  sub_CBB384(v19, (uint64_t)__p);
  sub_C6B2B4((uint64_t)v22, (uint64_t)__p);
  sub_162C594(v24, 0, 0);
  uint64_t v12 = *(void *)(v11 + 24);
  if (!v12) {
    sub_29F82C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v12 + 48))(v12, v22);
  sub_162D64C(v24);
  sub_162D64C(v22);
  sub_162D64C(__p);
  sub_CF22FC((uint64_t)v19);
  uint64_t v13 = (void **)v17;
  if (v17)
  {
    int v14 = v18;
    unsigned int v15 = v17;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 4;
      }
      while (v14 != v13);
      unsigned int v15 = v17;
    }
    uint64_t v18 = v13;
    operator delete(v15);
  }
}

void sub_D31954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&STACK[0x390]);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&STACK[0x390]);
  _Unwind_Resume(a1);
}

void sub_D319A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

void sub_D31A0C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "DrivingDooMCountryFilterModule");
  unint64_t v4 = *(void *)(a2 + 40);
  char v10 = 1;
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C947F8((uint64_t *)(a2 + 24), "Runtime", &v10, (uint64_t *)a1);
    *(void *)(a2 + 32) = v6;
    if (!*(unsigned char *)(a1 + 8)) {
      return;
    }
  }
  else
  {
    sub_C949C8(a2 + 40, *(void *)(a2 + 32), "Runtime", &v10, (uint64_t *)a1);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
    *(void *)(a2 + 32) = v6;
    if (!*(unsigned char *)(a1 + 8)) {
      return;
    }
  }
  char v9 = 4;
  int v8 = 1;
  if (v6 >= *(void *)(a2 + 40))
  {
    uint64_t v7 = sub_D3251C((uint64_t *)(a2 + 24), "Filtered", &v9, &v8);
  }
  else
  {
    sub_D326EC(a2 + 40, v6, "Filtered", &v9, &v8);
    uint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v6 + 48;
  }
  *(void *)(a2 + 32) = v7;
}

void sub_D31B54(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D31B68(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D31B98(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D31BAC(uint64_t a1, uint64_t a2)
{
  sub_162C594(v28, 0, 0);
  v29 |= 0x100000u;
  int v30 = 0;
  sub_E2B274((uint64_t)v28);
  v31[128] = 0;
  v31[264] = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  *(void *)((char *)v41 + 5) = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  int v40 = 0;
  v41[0] = 0;
  uint64_t v45 = 0x3FF0000000000000;
  uint64_t v48 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  char v49 = 5;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  int v53 = 0x7FFFFFFF;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  memset(v57, 0, sizeof(v57));
  uint64_t v60 = -1;
  int v61 = 0x7FFFFFFF;
  uint64_t v62 = 0;
  uint64_t v63 = -1;
  int v64 = -1;
  char v65 = 0;
  uint64_t v4 = sub_68E9C(*(void *)a1);
  sub_487728((uint64_t)v31, v4);
  sub_486A64((uint64_t)v31, 0);
  sub_487784((uint64_t)v31);
  sub_E2B424((uint64_t)v31, (uint64_t)v28);
  LOBYTE(v26) = 1;
  unint64_t v5 = *(uint64_t **)(a1 + 8);
  v21[0] = COERCE_VOID_(sub_72688(*(void *)(a1 + 16)));
  unint64_t v6 = v5[4];
  if (v6 >= v5[5])
  {
    uint64_t v7 = sub_D0729C(v5 + 3, "Runtime", (char *)&v26, (double *)v21);
  }
  else
  {
    sub_D0746C(v5 + 40, v5[4], "Runtime", (char *)&v26, (double *)v21);
    uint64_t v7 = v6 + 48;
    v5[4] = v6 + 48;
  }
  v5[4] = v7;
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (v8)
  {
    std::operator+<char>();
    char v27 = 1;
    uint64_t v9 = *(void *)(a1 + 8);
    double v10 = sub_72688(*(void *)(a1 + 16));
    double v26 = v10;
    unint64_t v11 = *(void *)(v9 + 32);
    if (v11 >= *(void *)(v9 + 40))
    {
      *(void *)(v9 + 32) = sub_D32858((char **)(v9 + 24), (uint64_t)v21, &v27, &v26);
      if ((SHIBYTE(v22) & 0x80000000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_25;
    }
    double v12 = v10;
    char v13 = v27;
    if (SHIBYTE(v22) < 0)
    {
      sub_4200(*(unsigned char **)(v9 + 32), v21[0], (unint64_t)v21[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v21;
      *(void *)(v11 + 16) = v22;
      *(_OWORD *)unint64_t v11 = v14;
    }
    *(unsigned char *)(v11 + 24) = v13;
    *(void *)(v11 + 32) = (uint64_t)v12;
    *(_DWORD *)(v11 + 40) = 1;
    *(void *)(v9 + 32) = v11 + 48;
    *(void *)(v9 + 32) = v11 + 48;
    if (SHIBYTE(v22) < 0) {
LABEL_25:
    }
      operator delete(v21[0]);
  }
LABEL_11:
  sub_71740(6, *(void *)(a1 + 8), *(void *)(a1 + 24));
  sub_377D10(*(uint64_t **)(a1 + 32), (uint64_t)v21);
  sub_71740(1, (uint64_t)v21, *(void *)(a1 + 24));
  unsigned int v15 = (void **)__p;
  if (__p)
  {
    __n128 v16 = v24;
    double v17 = __p;
    if (v24 != __p)
    {
      do
      {
        if (*((char *)v16 - 25) < 0) {
          operator delete(*(v16 - 6));
        }
        v16 -= 6;
      }
      while (v16 != v15);
      double v17 = __p;
    }
    unint64_t v24 = v15;
    operator delete(v17);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  uint64_t v18 = *(void *)(a1 + 40);
  sub_C6B2B4((uint64_t)v21, (uint64_t)v28);
  sub_162C594(v25, 0, 0);
  uint64_t v19 = *(void *)(v18 + 24);
  if (!v19) {
    sub_29F82C();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v19 + 48))(v19, v21);
  sub_162D64C(v25);
  sub_162D64C(v21);
  sub_4BCC2C((uint64_t)v31);
  return sub_162D64C(v28);
}

void sub_D31F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v15 + 32) = v14;
  if (a14 < 0)
  {
    operator delete(__p);
    sub_4BCC2C((uint64_t)&STACK[0x6A0]);
    sub_162D64C(&STACK[0x470]);
    _Unwind_Resume(a1);
  }
  sub_4BCC2C((uint64_t)&STACK[0x6A0]);
  sub_162D64C(&STACK[0x470]);
  _Unwind_Resume(a1);
}

uint64_t sub_D32070@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "DrivingDooMSelectionModule");
  char v6 = 1;
  unint64_t v4 = *(void *)(a2 + 32);
  if (v4 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_C947F8((uint64_t *)(a2 + 24), "Runtime", &v6, a1);
    *(void *)(a2 + 32) = result;
  }
  else
  {
    sub_C949C8(a2 + 40, *(void *)(a2 + 32), "Runtime", &v6, a1);
    uint64_t result = v4 + 48;
    *(void *)(a2 + 32) = v4 + 48;
    *(void *)(a2 + 32) = v4 + 48;
  }
  return result;
}

void sub_D32130(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D32144(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D3215C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D32170@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "DooMGuidanceModule");
  char v6 = 1;
  unint64_t v4 = *(void *)(a2 + 32);
  if (v4 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_C947F8((uint64_t *)(a2 + 24), "Runtime", &v6, a1);
    *(void *)(a2 + 32) = result;
  }
  else
  {
    sub_C949C8(a2 + 40, *(void *)(a2 + 32), "Runtime", &v6, a1);
    uint64_t result = v4 + 48;
    *(void *)(a2 + 32) = v4 + 48;
    *(void *)(a2 + 32) = v4 + 48;
  }
  return result;
}

void sub_D32230(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D32244(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D3225C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D32270(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 2240);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 2248);
    unint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_58FE78(v3 - 3200);
      while ((void *)v3 != v2);
      unint64_t v4 = *(void **)(a1 + 2240);
    }
    *(void *)(a1 + 2248) = v2;
    operator delete(v4);
  }

  return sub_D1EAF8(a1);
}

unint64_t sub_D322DC(uint64_t *a1, char *__s, char *a3, double *a4)
{
  unint64_t v6 = a1[2];
  unint64_t v5 = a1 + 2;
  unint64_t v7 = *(v5 - 1);
  if (v7 >= v6)
  {
    uint64_t v9 = sub_D0729C(a1, __s, a3, a4);
    a1[1] = v9;
    return v9 - 48;
  }
  else
  {
    sub_D0746C((int)v5, *(v5 - 1), __s, a3, a4);
    a1[1] = v7 + 48;
    a1[1] = v7 + 48;
    return v7;
  }
}

void sub_D32358(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

unint64_t sub_D32360(uint64_t *a1, char *__s, char *a3, double *a4)
{
  unint64_t v6 = a1[2];
  unint64_t v5 = a1 + 2;
  unint64_t v7 = *(v5 - 1);
  if (v7 >= v6)
  {
    uint64_t v9 = sub_D075E0(a1, __s, a3, a4);
    a1[1] = v9;
    return v9 - 48;
  }
  else
  {
    sub_D077B0((int)v5, *(v5 - 1), __s, a3, a4);
    a1[1] = v7 + 48;
    a1[1] = v7 + 48;
    return v7;
  }
}

void sub_D323DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

unint64_t sub_D323E4(uint64_t *a1, char *__s, char *a3, double *a4)
{
  unint64_t v6 = a1[2];
  unint64_t v5 = a1 + 2;
  unint64_t v7 = *(v5 - 1);
  if (v7 >= v6)
  {
    uint64_t v9 = sub_D07924(a1, __s, a3, a4);
    a1[1] = v9;
    return v9 - 48;
  }
  else
  {
    sub_D07AF4((int)v5, *(v5 - 1), __s, a3, a4);
    a1[1] = v7 + 48;
    a1[1] = v7 + 48;
    return v7;
  }
}

void sub_D32460(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_D32468(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      unint64_t v4 = *(void **)(a1 + 8);
      if (v3 != v2)
      {
        do
        {
          v3 -= 3200;
          sub_58FE78(v3);
        }
        while (v3 != v2);
        unint64_t v4 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 16) = v2;
LABEL_15:
      operator delete(v4);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      unint64_t v4 = *(void **)(a1 + 24);
      if (v6 != v5)
      {
        do
        {
          if (*(char *)(v6 - 1) < 0) {
            operator delete(*(void **)(v6 - 24));
          }
          v6 -= 32;
        }
        while (v6 != v5);
        unint64_t v4 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v5;
      goto LABEL_15;
    }
  }
  return a1;
}

uint64_t sub_D3251C(uint64_t *a1, char *a2, char *a3, int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_D326EC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D326D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D326EC(int a1, uint64_t a2, char *__s, char *a4, int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D32844(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_D32858(char **a1, uint64_t a2, char *a3, double *a4)
{
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v5) >> 4) > v8) {
    unint64_t v8 = 0x5555555555555556 * ((a1[2] - v5) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v8;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = &v13[48 * v7];
  unint64_t v24 = &v13[48 * v12];
  char v15 = *a3;
  double v16 = *a4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v14, *(void **)a2, *(void *)(a2 + 8));
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    uint64_t v14 = &v13[48 * v7];
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
  }
  long long v17 = &v13[48 * v7];
  v17[24] = v15;
  *((void *)v17 + 4) = (uint64_t)v16;
  *((_DWORD *)v17 + 10) = 1;
  unint64_t v18 = v17 + 48;
  if (v6 == v5)
  {
    char v21 = v5;
  }
  else
  {
    do
    {
      long long v19 = *((_OWORD *)v6 - 3);
      *((void *)v14 - 4) = *((void *)v6 - 4);
      *((_OWORD *)v14 - 3) = v19;
      *((void *)v6 - 5) = 0;
      *((void *)v6 - 4) = 0;
      *((void *)v6 - 6) = 0;
      long long v20 = *(_OWORD *)(v6 - 24);
      *((_DWORD *)v14 - 2) = *((_DWORD *)v6 - 2);
      *(_OWORD *)(v14 - 24) = v20;
      v14 -= 48;
      v6 -= 48;
    }
    while (v6 != v5);
    char v21 = *a1;
    unint64_t v5 = a1[1];
  }
  *a1 = v14;
  a1[1] = v18;
  a1[2] = v24;
  if (v5 != v21)
  {
    uint64_t v22 = (void **)(v5 - 48);
    do
    {
      if (*((char *)v22 + 23) < 0) {
        operator delete(*v22);
      }
      v22 -= 6;
    }
    while (v22 + 6 != (void **)v21);
    unint64_t v5 = v21;
  }
  if (v5) {
    operator delete(v5);
  }
  return v18;
}

void sub_D32A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D32A78(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  unint64_t v6 = (unsigned char *)a2[1];
  unint64_t v5 = (unsigned char *)a2[2];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    size_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 16) = v9;
  }
  sub_598C04(a1 + 32, a2 + 4);
  *(void *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  sub_510340(a1 + 1120, a2[140], a2[141], 0xAF8AF8AF8AF8AF8BLL * ((a2[141] - a2[140]) >> 5));
  int v10 = *((_DWORD *)a2 + 286);
  *(unsigned char *)(a1 + 1148) = *((unsigned char *)a2 + 1148);
  *(_DWORD *)(a1 + 1144) = v10;
  *(void *)(a1 + 1152) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1160) = 0;
  unint64_t v11 = (unsigned char *)a2[144];
  unint64_t v12 = (unsigned char *)a2[145];
  int64_t v13 = v12 - v11;
  if (v12 != v11)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    uint64_t v14 = (char *)operator new(v12 - v11);
    *(void *)(a1 + 1152) = v14;
    *(void *)(a1 + 1160) = v14;
    char v15 = &v14[4 * (v13 >> 2)];
    *(void *)(a1 + 1168) = v15;
    memcpy(v14, v11, v13);
    *(void *)(a1 + 1160) = v15;
  }
  long long v16 = *(_OWORD *)(a2 + 149);
  *(_OWORD *)(a1 + 1176) = *(_OWORD *)(a2 + 147);
  *(_OWORD *)(a1 + 1192) = v16;
  sub_4BC93C(a1 + 1208, (int *)a2 + 302);
  uint64_t v17 = a2[163];
  *(unsigned char *)(a1 + 1312) = *((unsigned char *)a2 + 1312);
  *(void *)(a1 + 1304) = v17;
  *(void *)(a1 + 1320) = a2[165];
  sub_48381C(a1 + 1328, (uint64_t)(a2 + 166));
  sub_48381C(a1 + 1704, (uint64_t)(a2 + 213));
  *(void *)(a1 + 2080) = a2[260];
  long long v18 = *(_OWORD *)(a2 + 261);
  *(void *)(a1 + 2102) = *(uint64_t *)((char *)a2 + 2102);
  *(_OWORD *)(a1 + 2088) = v18;
  *(void *)(a1 + 2112) = a2[264];
  uint64_t v19 = a2[265];
  *(_DWORD *)(a1 + 2128) = *((_DWORD *)a2 + 532);
  *(void *)(a1 + 2120) = v19;
  *(void *)(a1 + 2136) = 0;
  *(void *)(a1 + 2152) = 0;
  *(void *)(a1 + 2144) = 0;
  sub_8A6F8((char *)(a1 + 2136), a2[267], a2[268], 0xAAAAAAAAAAAAAAABLL * ((a2[268] - a2[267]) >> 3));
  *(void *)(a1 + 2160) = a2[270];
  long long v20 = *(_OWORD *)(a2 + 271);
  *(unsigned char *)(a1 + 2184) = *((unsigned char *)a2 + 2184);
  *(_OWORD *)(a1 + 2168) = v20;
  sub_54214(a1 + 2192, (uint64_t)(a2 + 274));
  *(void *)(a1 + 2232) = a2[279];
  return a1;
}

void sub_D32CB8(_Unwind_Exception *a1)
{
  sub_1A668(v7);
  sub_402C7C(v6);
  sub_402C7C(v5);
  sub_CF1EE4(v4);
  sub_C940D0(v3);
  size_t v9 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D32D4C(uint64_t *a1, char *a2, char *a3, int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  char v21 = &v11[48 * v10];
  sub_D32F1C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  char v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    long long v18 = (char *)*a1;
    char v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      char v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D32F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D32F1C(int a1, uint64_t a2, char *__s, char *a4, int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D33074(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_D33088(void *a1, unint64_t a2)
{
  std::string __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v3 = 3 * a2;
    uint64_t v4 = operator new(24 * a2);
    *a1 = v4;
    a1[1] = v4;
    unint64_t v5 = &v4[v3];
    a1[2] = &v4[v3];
    do
    {
      sub_D2DB88(v4, (long long **)&__p);
      v4 += 3;
      v3 -= 3;
    }
    while (v3 * 8);
    a1[1] = v5;
    unint64_t v6 = (void **)__p;
    if (__p)
    {
      int64_t v7 = v15;
      unint64_t v8 = __p;
      if (v15 == __p)
      {
LABEL_18:
        uint64_t v15 = v6;
        operator delete(v8);
        return a1;
      }
      while (1)
      {
        if (*((char *)v7 - 1) < 0)
        {
          operator delete(*(v7 - 3));
          size_t v9 = v7 - 15;
          size_t v10 = *(v7 - 15);
          if (v10)
          {
LABEL_14:
            uint64_t v11 = (uint64_t)*(v7 - 14);
            char v12 = v10;
            if ((void *)v11 != v10)
            {
              do
                uint64_t v11 = sub_3AFFFC(v11 - 1056);
              while ((void *)v11 != v10);
              char v12 = *v9;
            }
            *(v7 - 14) = v10;
            operator delete(v12);
          }
        }
        else
        {
          size_t v9 = v7 - 15;
          size_t v10 = *(v7 - 15);
          if (v10) {
            goto LABEL_14;
          }
        }
        int64_t v7 = v9;
        if (v9 == v6)
        {
          unint64_t v8 = __p;
          goto LABEL_18;
        }
      }
    }
  }
  return a1;
}

void sub_D331CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_D331E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_5AB1B0(&a9);
  _Unwind_Resume(a1);
}

char *sub_D331F8(char **a1, char *a2, uint64_t a3, long long *a4, uint64_t a5)
{
  unint64_t v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = a3;
  uint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v11[-v12] >> 3)) >= a5)
  {
    uint64_t v18 = v12 - (void)a2;
    if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
    {
      uint64_t v19 = (long long *)(a3 + 120 * a5);
      uint64_t v21 = *(void *)(v9 - 8);
      uint64_t v22 = (void *)(v12 - 120 * a5);
      uint64_t v23 = v21;
      if ((unint64_t)v22 >= v12) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
    uint64_t v19 = (long long *)(a3 + 8 * ((uint64_t)(v12 - (void)a2) >> 3));
    uint64_t v20 = sub_D337AC(v9, v19, a4, *(void *)(v9 - 8));
    uint64_t v21 = v20;
    a1[1] = (char *)v20;
    if (v18 >= 1)
    {
      uint64_t v22 = (void *)(v20 - 120 * a5);
      uint64_t v23 = v20;
      if ((unint64_t)v22 >= v12) {
        goto LABEL_19;
      }
LABEL_17:
      unint64_t v24 = v22;
      uint64_t v23 = v21;
      do
      {
        *(void *)uint64_t v23 = 0;
        *(void *)(v23 + 8) = 0;
        *(void *)(v23 + 16) = 0;
        *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
        *(void *)(v23 + 16) = v24[2];
        v24[1] = 0;
        v24[2] = 0;
        *unint64_t v24 = 0;
        long long v25 = *(_OWORD *)(v24 + 7);
        long long v26 = *(_OWORD *)(v24 + 9);
        uint64_t v27 = *(void *)((char *)v24 + 85);
        *(_OWORD *)(v23 + 40) = *(_OWORD *)(v24 + 5);
        *(void *)(v23 + 85) = v27;
        *(_OWORD *)(v23 + 72) = v26;
        *(_OWORD *)(v23 + 56) = v25;
        *(_OWORD *)(v23 + 24) = *(_OWORD *)(v24 + 3);
        long long v28 = *((_OWORD *)v24 + 6);
        *(void *)(v23 + 112) = v24[14];
        *(_OWORD *)(v23 + 96) = v28;
        v24[13] = 0;
        v24[14] = 0;
        v24[12] = 0;
        v23 += 120;
        v24 += 15;
      }
      while ((unint64_t)v24 < v12);
LABEL_19:
      a1[1] = (char *)v23;
      sub_D06324(v5, v22, v21);
      if (v19 != (long long *)v7)
      {
        int v29 = v5;
        do
        {
          if ((char *)v7 != v29) {
            sub_D254C4((uint64_t *)v29, *(void *)v7, *(void *)(v7 + 8), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 5));
          }
          *(_OWORD *)(v29 + 24) = *(_OWORD *)(v7 + 24);
          long long v30 = *(_OWORD *)(v7 + 40);
          long long v31 = *(_OWORD *)(v7 + 56);
          long long v32 = *(_OWORD *)(v7 + 72);
          *(void *)(v29 + 85) = *(void *)(v7 + 85);
          *(_OWORD *)(v29 + 72) = v32;
          *(_OWORD *)(v29 + 56) = v31;
          *(_OWORD *)(v29 + 40) = v30;
          std::string::operator=((std::string *)v29 + 4, (const std::string *)(v7 + 96));
          v7 += 120;
          v29 += 120;
        }
        while ((long long *)v7 != v19);
      }
    }
    return v5;
  }
  uint64_t v13 = *a1;
  unint64_t v14 = a5 - 0x1111111111111111 * ((uint64_t)(v12 - (void)*a1) >> 3);
  if (v14 > 0x222222222222222) {
    sub_2E00();
  }
  unint64_t v15 = 0xEEEEEEEEEEEEEEEFLL * ((v10 - v13) >> 3);
  if (2 * v15 > v14) {
    unint64_t v14 = 2 * v15;
  }
  if (v15 >= 0x111111111111111) {
    unint64_t v16 = 0x222222222222222;
  }
  else {
    unint64_t v16 = v14;
  }
  uint64_t v59 = v9;
  if (v16)
  {
    if (v16 > 0x222222222222222) {
      sub_188D718();
    }
    long long v17 = (char *)operator new(120 * v16);
  }
  else
  {
    long long v17 = 0;
  }
  long long v55 = v17;
  long long v56 = &v17[8 * ((v5 - v13) >> 3)];
  unint64_t v57 = v56;
  uint64_t v58 = &v17[120 * v16];
  sub_D33688(&v55, v7, a5);
  long long v33 = v56;
  long long v34 = *a1;
  long long v35 = v56;
  if (*a1 != v5)
  {
    long long v35 = v56;
    long long v36 = v5;
    do
    {
      *((void *)v35 - 15) = 0;
      *((void *)v35 - 14) = 0;
      v35 -= 120;
      *((void *)v35 + 2) = 0;
      long long v37 = *(_OWORD *)(v36 - 120);
      v36 -= 120;
      *(_OWORD *)long long v35 = v37;
      *((void *)v35 + 2) = *((void *)v36 + 2);
      *((void *)v36 + 1) = 0;
      *((void *)v36 + 2) = 0;
      *(void *)long long v36 = 0;
      long long v38 = *(_OWORD *)(v36 + 56);
      long long v39 = *(_OWORD *)(v36 + 72);
      uint64_t v40 = *(void *)(v36 + 85);
      *(_OWORD *)(v35 + 40) = *(_OWORD *)(v36 + 40);
      *(void *)(v35 + 85) = v40;
      *(_OWORD *)(v35 + 72) = v39;
      *(_OWORD *)(v35 + 56) = v38;
      *(_OWORD *)(v35 + 24) = *(_OWORD *)(v36 + 24);
      long long v41 = *((_OWORD *)v36 + 6);
      *((void *)v35 + 14) = *((void *)v36 + 14);
      *((_OWORD *)v35 + 6) = v41;
      *((void *)v36 + 13) = 0;
      *((void *)v36 + 14) = 0;
      *((void *)v36 + 12) = 0;
    }
    while (v36 != v34);
  }
  long long v56 = v35;
  long long v42 = a1[1];
  long long v43 = v57;
  if (v42 != v5)
  {
    do
    {
      *(void *)long long v43 = 0;
      *((void *)v43 + 1) = 0;
      *((void *)v43 + 2) = 0;
      *(_OWORD *)long long v43 = *(_OWORD *)v5;
      *((void *)v43 + 2) = *((void *)v5 + 2);
      *((void *)v5 + 1) = 0;
      *((void *)v5 + 2) = 0;
      *(void *)unint64_t v5 = 0;
      long long v44 = *(_OWORD *)(v5 + 56);
      long long v45 = *(_OWORD *)(v5 + 72);
      uint64_t v46 = *(void *)(v5 + 85);
      *(_OWORD *)(v43 + 40) = *(_OWORD *)(v5 + 40);
      *(void *)(v43 + 85) = v46;
      *(_OWORD *)(v43 + 72) = v45;
      *(_OWORD *)(v43 + 56) = v44;
      *(_OWORD *)(v43 + 24) = *(_OWORD *)(v5 + 24);
      long long v47 = *((_OWORD *)v5 + 6);
      *((void *)v43 + 14) = *((void *)v5 + 14);
      *((_OWORD *)v43 + 6) = v47;
      *((void *)v5 + 13) = 0;
      *((void *)v5 + 14) = 0;
      *((void *)v5 + 12) = 0;
      v43 += 120;
      v5 += 120;
    }
    while (v5 != v42);
    long long v35 = v56;
    unint64_t v5 = a1[1];
  }
  uint64_t v48 = *a1;
  *a1 = v35;
  a1[1] = v43;
  char v49 = a1[2];
  a1[2] = v58;
  unint64_t v57 = v5;
  uint64_t v58 = v49;
  long long v55 = v48;
  long long v56 = v48;
  if (v5 == v48)
  {
    if (v5) {
      goto LABEL_34;
    }
    return v33;
  }
  do
  {
    long long v51 = (void **)(v5 - 120);
    unint64_t v57 = v5 - 120;
    if (*(v5 - 1) < 0)
    {
      operator delete(*((void **)v5 - 3));
      long long v52 = *v51;
      if (!*v51) {
        goto LABEL_37;
      }
    }
    else
    {
      long long v52 = *v51;
      if (!*v51) {
        goto LABEL_37;
      }
    }
    uint64_t v53 = *((void *)v5 - 14);
    long long v54 = v52;
    if ((void *)v53 != v52)
    {
      do
        uint64_t v53 = sub_3AFFFC(v53 - 1056);
      while ((void *)v53 != v52);
      long long v54 = *v51;
    }
    *((void *)v5 - 14) = v52;
    operator delete(v54);
LABEL_37:
    unint64_t v5 = v57;
  }
  while (v57 != v48);
  unint64_t v5 = v55;
  if (!v55) {
    return v33;
  }
LABEL_34:
  operator delete(v5);
  return v33;
}

void sub_D3366C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_D33674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5AC2CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_D33688(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (a3)
  {
    uint64_t v5 = v4 + 120 * a3;
    unint64_t v6 = (long long *)(a2 + 96);
    uint64_t v7 = 120 * a3;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      sub_3B168C(v4, *((void *)v6 - 12), *((void *)v6 - 11), 0xF83E0F83E0F83E1 * ((uint64_t)(*((void *)v6 - 11) - *((void *)v6 - 12)) >> 5));
      *(_OWORD *)(v4 + 24) = *(long long *)((char *)v6 - 72);
      long long v9 = *(long long *)((char *)v6 - 56);
      long long v10 = *(long long *)((char *)v6 - 40);
      long long v11 = *(long long *)((char *)v6 - 24);
      *(void *)(v4 + 85) = *(void *)((char *)v6 - 11);
      *(_OWORD *)(v4 + 72) = v11;
      *(_OWORD *)(v4 + 56) = v10;
      *(_OWORD *)(v4 + 40) = v9;
      uint64_t result = (void *)(v4 + 96);
      if (*((char *)v6 + 23) < 0)
      {
        uint64_t result = sub_4200(result, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *v6;
        *(void *)(v4 + 112) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t result = v8;
      }
      v4 += 120;
      unint64_t v6 = (long long *)((char *)v6 + 120);
      v7 -= 120;
    }
    while (v7);
    uint64_t v4 = v5;
  }
  v3[2] = v4;
  return result;
}

void sub_D3377C(_Unwind_Exception *exception_object)
{
  if (*v2)
  {
    sub_20A9E18((uint64_t)v2);
    *(void *)(v1 + 16) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_D337AC(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v14 = a4;
  if (a2 != a3)
  {
    unint64_t v6 = a2 + 6;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      long long v8 = v6 - 6;
      sub_3B168C(v4, *((void *)v6 - 12), *((void *)v6 - 11), 0xF83E0F83E0F83E1 * ((uint64_t)(*((void *)v6 - 11) - *((void *)v6 - 12)) >> 5));
      *(_OWORD *)(v4 + 24) = *(long long *)((char *)v6 - 72);
      long long v9 = *(long long *)((char *)v6 - 56);
      long long v10 = *(long long *)((char *)v6 - 40);
      long long v11 = *(long long *)((char *)v6 - 24);
      *(void *)(v4 + 85) = *(void *)((char *)v6 - 11);
      *(_OWORD *)(v4 + 72) = v11;
      *(_OWORD *)(v4 + 56) = v10;
      *(_OWORD *)(v4 + 40) = v9;
      unint64_t v12 = (unsigned char *)(v4 + 96);
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v12, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        *(void *)(v4 + 112) = *((void *)v6 + 2);
        *(_OWORD *)unint64_t v12 = v7;
      }
      uint64_t v4 = v14 + 120;
      v14 += 120;
      unint64_t v6 = (long long *)((char *)v6 + 120);
    }
    while ((long long *)((char *)v8 + 120) != a3);
  }
  return v4;
}

void sub_D338B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*v9)
  {
    sub_20AEE38((uint64_t)v9);
    sub_97B074((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_97B074((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_D338EC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5, uint64_t a6, int a7, uint64_t *a8, uint64_t a9)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_CF216C(a1, *a3, a3[1], 0x51B3BEA3677D46CFLL * ((a3[1] - *a3) >> 3));
  sub_DB54FC(a2, a6, a1 + 24);
  *(unsigned char *)(a1 + 1560) = 0;
  *(void *)(a1 + 1568) = a4;
  *(void *)(a1 + 1576) = *a5;
  *(void *)(a1 + 1584) = a6;
  *(void *)(a1 + 1600) = 0;
  *(void *)(a1 + 1608) = 0;
  *(void *)(a1 + 1592) = 0;
  uint64_t v16 = *a8;
  uint64_t v17 = a8[1];
  int64_t v18 = v17 - *a8;
  if (v18)
  {
    if (v18 < 0) {
      sub_2E00();
    }
    uint64_t v19 = (char *)operator new(v18);
    uint64_t v20 = 0;
    *(void *)(a1 + 1592) = v19;
    *(void *)(a1 + 1600) = v19;
    *(void *)(a1 + 1608) = &v19[32 * (v18 >> 5)];
    do
    {
      uint64_t v21 = v16 + v20;
      uint64_t v22 = &v19[v20];
      unsigned int v23 = *(_DWORD *)(v16 + v20 + 16);
      *(_DWORD *)&v19[v20 + 16] = v23;
      if (v23 <= 1) {
        *(_OWORD *)uint64_t v22 = *(_OWORD *)v21;
      }
      v22[24] = *(unsigned char *)(v21 + 24);
      v20 += 32;
    }
    while (v16 + v20 != v17);
    *(void *)(a1 + 1600) = &v19[v20];
  }
  *(void *)(a1 + 1632) = 0;
  *(_OWORD *)(a1 + 1616) = 0u;
  long long v25 = *(const void **)a9;
  uint64_t v24 = *(void *)(a9 + 8);
  int64_t v26 = v24 - *(void *)a9;
  if (v24 != *(void *)a9)
  {
    if (0x86BCA1AF286BCA1BLL * (v26 >> 3) >= 0x1AF286BCA1AF287) {
      sub_2E00();
    }
    uint64_t v27 = (char *)operator new(v26);
    *(void *)(a1 + 1616) = v27;
    *(void *)(a1 + 1624) = v27;
    long long v28 = &v27[8 * (v26 >> 3)];
    *(void *)(a1 + 1632) = v28;
    memcpy(v27, v25, v26);
    *(void *)(a1 + 1624) = v28;
  }
  *(unsigned char *)(a1 + 1648) = 0;
  if (a7)
  {
    uint64_t v29 = *(void *)(a1 + 1128);
    long long v30 = (char *)(v29 + 4);
    long long v31 = (unsigned char *)(v29 + 8);
    long long v32 = *(unsigned char **)(a1 + 1136);
    int64_t v33 = v32 - v31;
    if (v32 != v31) {
      memmove(v30, v31, v32 - v31);
    }
    *(void *)(a1 + 1136) = &v30[v33];
    sub_CFA46C((void *)(a1 + 1176), *(void *)(a1 + 1176), 1u, (uint64_t)v35);
    sub_CFA46C((void *)(a1 + 1152), *(void *)(a1 + 1152), 1u, (uint64_t)v35);
  }
  return a1;
}

void sub_D33B14(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 1648)) {
    *(unsigned char *)(v1 + 1648) = 0;
  }
  unint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 1624) = v6;
    operator delete(v6);
  }
  long long v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 1600) = v7;
    operator delete(v7);
  }
  sub_4BCED0(v2);
  sub_401F88((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D33B80(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x147AE147AE147BLL) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(3200 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 3200 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_D33D10(v8 + v9, a2 + v9);
        v9 += 3200;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_D33C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_D33C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 3200)
    sub_58FE78(v10 - 3200 + v11);
  *(void *)(v9 + 8) = v10;
  sub_D33C88(&a9);
  _Unwind_Resume(a1);
}

void ***sub_D33C88(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      uint64_t v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_58FE78(v4 - 3200);
        while ((void *)v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_D33D10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_4F58AC(a1, a2);
  sub_4F58AC(v4 + 160, a2 + 160);
  sub_599348(a1 + 320, a2 + 320);
  sub_599348(a1 + 1760, a2 + 1760);
  return a1;
}

void sub_D33D70(_Unwind_Exception *a1)
{
  sub_4D4B58(v1 + 1600);
  sub_4D4B58(v1 + 1440);
  sub_4D4B58(v1 + 1280);
  sub_4D4B58(v1 + 1120);
  sub_4D4B58(v1 + 960);
  sub_4D4B58(v1 + 800);
  sub_4D4B58(v1 + 640);
  sub_4D4B58(v1 + 480);
  sub_4D4B58(v3);
  sub_4D4B58(v2);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_D33DDC(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

double sub_D33DF0()
{
  byte_25E65C7 = 1;
  word_25E65B0 = 65;
  byte_25E65DF = 1;
  word_25E65C8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E6670 = 0u;
  *(_OWORD *)&qword_25E6680 = 0u;
  dword_25E6690 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E6670, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E6670, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E6670, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E6670, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E65F7 = 8;
  strcpy((char *)&qword_25E65E0, "any_mode");
  byte_25E660F = 7;
  strcpy((char *)&dword_25E65F8, "cycling");
  byte_25E6627 = 7;
  strcpy((char *)&dword_25E6610, "driving");
  byte_25E663F = 7;
  strcpy((char *)&dword_25E6628, "walking");
  qword_25E6648 = 0;
  qword_25E6650 = 0;
  qword_25E6640 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E6640 = (uint64_t)v0;
  qword_25E6648 = (uint64_t)(v0 + 9);
  qword_25E6650 = (uint64_t)(v0 + 9);
  qword_25E6658 = 0;
  qword_25E6660 = 0;
  unk_25E6668 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E6660 = (uint64_t)(v1 + 9);
  unk_25E6668 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E6658 = (uint64_t)v1;
  return result;
}

void sub_D340B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E6680) {
    sub_20B0134((void **)qword_25E6680);
  }
  long long v37 = (void *)xmmword_25E6670;
  *(void *)&xmmword_25E6670 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_D34158()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  sub_725D0((uint64_t)v30);
  uint64_t v4 = *(void *)sub_37D0C0(v2);
  sub_D53FD4(5, v3, v2);
  __p.n128_u64[0] = 0;
  __p.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(&v26, &__p);
  char v27 = 5;
  uint64_t v28 = v4;
  int v29 = 0;
  sub_DB8768(v3, (uint64_t)v32);
  unsigned int v5 = sub_35E640();
  sub_494284(2, v5, (uint64_t)v32);
  uint64_t v24 = 0;
  unsigned int v23 = 0;
  uint64_t v25 = 0;
  uint64_t v21 = 0;
  uint64_t v20 = 0;
  uint64_t v22 = 0;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  uint64_t v19 = 0;
  uint64_t v15 = 0;
  int v14 = 0;
  uint64_t v16 = 0;
  sub_11B16A4((uint64_t)v10, 0, 0);
  long long v13 = 0u;
  long long v12 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v7 = 0u;
  int v9 = 1065353216;
  sub_737844((uint64_t)v6);
}

void sub_D36E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (SLOBYTE(STACK[0xBD7]) < 0) {
    operator delete((void *)STACK[0xBC0]);
  }
  sub_111ECAC((uint64_t)&STACK[0x3130]);
  sub_D2CBF8((uint64_t)&STACK[0xBE0]);
  sub_D233FC((uint64_t)va);
  if (SLOBYTE(STACK[0xBBF]) < 0) {
    operator delete((void *)STACK[0xBA8]);
  }
  sub_5ABDEC((uint64_t)&STACK[0xD10]);
  sub_CF1EE4((uint64_t)&STACK[0x250]);
  sub_13E6DAC(a8);
  sub_13E6DAC(&STACK[0x5B8]);
  sub_D0FB2C((uint64_t)&STACK[0x7B8]);
  sub_5450C((uint64_t)&STACK[0x9A0]);
  sub_C8423C(&STACK[0x9C8]);
  sub_1A668((void **)&STACK[0xAE0]);
  sub_5AB1B0((void ***)&STACK[0xAF8]);
  sub_CF1A48((void ****)&STACK[0xB10]);
  sub_C628C4((void ****)&STACK[0xB30]);
  sub_4BCC2C((uint64_t)&STACK[0x2E68]);
  sub_C7E3C8((uint64_t)&STACK[0xB48]);
  _Unwind_Resume(a1);
}

void sub_D3751C()
{
}

void *sub_D37530(void *a1, unint64_t a2)
{
  uint64_t v7 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v3 = 3 * a2;
    uint64_t v4 = operator new(24 * a2);
    *a1 = v4;
    a1[1] = v4;
    unsigned int v5 = &v4[v3];
    a1[2] = &v4[v3];
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_D37668(v4, 0, 0, 0);
      v4 += 3;
      v3 -= 3;
    }
    while (v3 * 8);
    a1[1] = v5;
  }
  return a1;
}

void sub_D3763C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_C8A97C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_D37650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 8) = v3;
  sub_C8A97C((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_D37668(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v5 = result;
    if (a4 >= 0x555555555555556) {
      sub_2E00();
    }
    double result = operator new(48 * a4);
    long long v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[6 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        double result = sub_D37814((uint64_t)(v5 + 2), &v8[v9 / 8], a2 + v9);
        v9 += 48;
      }
      while (a2 + v9 != a3);
      long long v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_D37730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_D37744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v12; v12 -= 48)
    sub_C8ABB4(v11, (void **)(v10 - 48 + v12));
  *(void *)(v9 + 8) = v10;
  sub_D37778(&a9);
  _Unwind_Resume(a1);
}

void ***sub_D37778(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      unsigned int v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v4 -= 6;
          sub_C8ABB4((uint64_t)(v2 + 2), v4);
        }
        while (v4 != v3);
        unsigned int v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *sub_D37814(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_47E22C((uint64_t)a2, *(void *)a3, *(void *)(a3 + 8), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  return sub_47E3D0(a2 + 3, (uint64_t **)(a3 + 24));
}

void sub_D37878(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20B0178();
  }
  _Unwind_Resume(exception_object);
}

char *sub_D37894(void ***a1)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v4 = 0x555555555555555;
  }
  else {
    unint64_t v4 = v3;
  }
  uint64_t v16 = (uint64_t)(a1 + 2);
  if (v4)
  {
    if (v4 > 0x555555555555555) {
      sub_188D718();
    }
    unsigned int v5 = (char *)operator new(48 * v4);
  }
  else
  {
    unsigned int v5 = 0;
  }
  int v14 = &v5[48 * v2];
  uint64_t v15 = (void **)&v5[48 * v4];
  sub_47E0E4(v14);
  unint64_t v6 = (void **)(v14 + 48);
  uint64_t v7 = *a1;
  long long v8 = a1[1];
  if (v8 == *a1)
  {
    *a1 = (void **)v14;
    a1[1] = v6;
    a1[2] = v15;
  }
  else
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = &v14[v9 * 8];
      uint64_t v11 = &v8[v9];
      *((void *)v10 - 6) = 0;
      *((void *)v10 - 5) = 0;
      *((void *)v10 - 4) = 0;
      *((_OWORD *)v10 - 3) = *(_OWORD *)&v8[v9 - 6];
      *((void *)v10 - 4) = v8[v9 - 4];
      *(v11 - 6) = 0;
      *(v11 - 5) = 0;
      *(v11 - 4) = 0;
      *((void *)v10 - 3) = 0;
      *((void *)v10 - 2) = 0;
      *((void *)v10 - 1) = 0;
      *(_OWORD *)(v10 - 24) = *(_OWORD *)&v8[v9 - 3];
      *((void *)v10 - 1) = v8[v9 - 1];
      *(v11 - 3) = 0;
      *(v11 - 2) = 0;
      *(v11 - 1) = 0;
      v9 -= 6;
    }
    while (&v8[v9] != v7);
    uint64_t v12 = *a1;
    long long v8 = a1[1];
    *a1 = (void **)&v14[v9 * 8];
    a1[1] = v6;
    a1[2] = v15;
    if (v8 != v12)
    {
      do
      {
        v8 -= 6;
        sub_C8ABB4(v16, v8);
      }
      while (v8 != v12);
      long long v8 = v12;
    }
  }
  if (v8) {
    operator delete(v8);
  }
  return v14 + 48;
}

void sub_D37A44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_C8B26C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D37A58(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      sub_CFB46C(a1 + 8, a2 + 8);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
      long long v4 = *(_OWORD *)(a2 + 352);
      long long v6 = *(_OWORD *)(a2 + 304);
      long long v5 = *(_OWORD *)(a2 + 320);
      *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 352) = v4;
      *(_OWORD *)(a1 + 304) = v6;
      *(_OWORD *)(a1 + 320) = v5;
      long long v8 = *(_OWORD *)(a2 + 384);
      long long v7 = *(_OWORD *)(a2 + 400);
      long long v9 = *(_OWORD *)(a2 + 368);
      *(_OWORD *)(a1 + 414) = *(_OWORD *)(a2 + 414);
      *(_OWORD *)(a1 + 384) = v8;
      *(_OWORD *)(a1 + 400) = v7;
      *(_OWORD *)(a1 + 368) = v9;
    }
    else
    {
      sub_CFB3B0(a1, a1 + 8, (void *)(a1 + 8), a2 + 8);
    }
  }
  else if (*(unsigned char *)a2)
  {
    uint64_t v10 = *(void *)(a1 + 24);
    if (v10)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void **)(a1 + 24);
      if (v11 != v10)
      {
        do
        {
          if (*(char *)(v11 - 1) < 0) {
            operator delete(*(void **)(v11 - 24));
          }
          v11 -= 32;
        }
        while (v11 != v10);
        uint64_t v12 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v10;
      operator delete(v12);
    }
    sub_C842C4(a1 + 8, a2 + 8);
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 256) = 0;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    *(void *)(a2 + 240) = 0;
    *(void *)(a2 + 248) = 0;
    *(void *)(a2 + 256) = 0;
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
    *(void *)(a1 + 280) = 0;
    uint64_t v13 = *(void *)(a2 + 272);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a1 + 272) = v13;
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(void *)(a2 + 272) = 0;
    *(void *)(a2 + 280) = 0;
    *(void *)(a2 + 264) = 0;
    long long v14 = *(_OWORD *)(a2 + 352);
    long long v16 = *(_OWORD *)(a2 + 304);
    long long v15 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 352) = v14;
    *(_OWORD *)(a1 + 304) = v16;
    *(_OWORD *)(a1 + 320) = v15;
    long long v17 = *(_OWORD *)(a2 + 416);
    long long v19 = *(_OWORD *)(a2 + 368);
    long long v18 = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v17;
    *(_OWORD *)(a1 + 368) = v19;
    *(_OWORD *)(a1 + 384) = v18;
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

uint64_t sub_D37C08(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      sub_D37D38(a1 + 8, a2 + 8);
      goto LABEL_17;
    }
    sub_13E6DAC(a1 + 264);
    sub_13E6DAC(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
LABEL_13:
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    goto LABEL_17;
  }
  if (!*(unsigned char *)a2)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    long long v6 = *(void **)(a1 + 24);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0) {
          operator delete(*(void **)(v5 - 24));
        }
        v5 -= 32;
      }
      while (v5 != v4);
      long long v6 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v4;
    operator delete(v6);
  }
  sub_C86114(a1 + 8, a2 + 8);
  sub_C86114(a1 + 264, a2 + 264);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
LABEL_17:
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

uint64_t sub_D37D38(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 2) != 0)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      if (v4) {
        uint64_t v5 = (void *)*v5;
      }
    }
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 2) != 0)
    {
      long long v7 = 0;
    }
    else
    {
      long long v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        long long v7 = (void *)*v7;
      }
    }
    if (v5 == v7) {
      sub_13E8C18(a1, a2);
    }
    else {
      sub_13E8B1C(a1, a2);
    }
    uint64_t v8 = *(void *)(a1 + 264);
    if ((v8 & 2) != 0)
    {
      long long v9 = 0;
    }
    else
    {
      long long v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      if (v8) {
        long long v9 = (void *)*v9;
      }
    }
    uint64_t v10 = a1 + 256;
    uint64_t v11 = a2 + 256;
    uint64_t v12 = *(void *)(a2 + 264);
    if ((v12 & 2) != 0)
    {
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
      if (v12) {
        uint64_t v13 = (void *)*v13;
      }
    }
    if (v9 == v13) {
      sub_13E8C18(v10, v11);
    }
    else {
      sub_13E8B1C(v10, v11);
    }
  }
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  return a1;
}

double sub_D37E28()
{
  byte_25E66AF = 1;
  word_25E6698 = 65;
  byte_25E66C7 = 1;
  word_25E66B0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E6758 = 0u;
  *(_OWORD *)&qword_25E6768 = 0u;
  dword_25E6778 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E6758, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E6758, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E6758, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E6758, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E66DF = 8;
  strcpy((char *)&qword_25E66C8, "any_mode");
  byte_25E66F7 = 7;
  strcpy((char *)&dword_25E66E0, "cycling");
  byte_25E670F = 7;
  strcpy((char *)&dword_25E66F8, "driving");
  byte_25E6727 = 7;
  strcpy((char *)&dword_25E6710, "walking");
  qword_25E6730 = 0;
  qword_25E6738 = 0;
  qword_25E6728 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E6728 = (uint64_t)v0;
  qword_25E6730 = (uint64_t)(v0 + 9);
  qword_25E6738 = (uint64_t)(v0 + 9);
  qword_25E6740 = 0;
  qword_25E6748 = 0;
  unk_25E6750 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E6748 = (uint64_t)(v1 + 9);
  unk_25E6750 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E6740 = (uint64_t)v1;
  return result;
}

void sub_D380F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E6768) {
    sub_20B01E8((void **)qword_25E6768);
  }
  long long v37 = (void *)xmmword_25E6758;
  *(void *)&xmmword_25E6758 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_D38190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = *(void *)sub_37D0C0(a2);
  sub_D54164(7, a1, a2);
  sub_725D0((uint64_t)v89);
  uint64_t v87 = 0;
  uint64_t v86 = 0;
  uint64_t v88 = 0;
  memset(v63, 0, 24);
  v63[3] = 0x7FFFFFFFFFFFFFFFLL;
  v63[4] = 0x8000000080000000;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  *(void *)&long long v6 = 0x8000000080000000;
  *((void *)&v6 + 1) = 0x8000000080000000;
  long long v79 = 0u;
  long long v80 = v6;
  long long v81 = v6;
  int v64 = 0x7FFFFFFF;
  int v82 = 5;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  int v61 = 0;
  uint64_t v60 = 0;
  uint64_t v62 = 0;
  sub_DC2CD8(a1, (uint64_t)v90);
  unsigned int v7 = sub_35E640();
  sub_494284(3, v7, (uint64_t)v90);
  uint64_t v45 = -1;
  int v46 = 0x7FFFFFFF;
  uint64_t v47 = -1;
  uint64_t v48 = -1;
  uint64_t v49 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v50 = 0;
  int v51 = -1935635296;
  v52[0] = 0;
  *(_DWORD *)((char *)v52 + 7) = 0;
  uint64_t v53 = 0;
  uint64_t v55 = 0;
  long long v54 = 0;
  int v56 = 0;
  char v57 = 100;
  long long v58 = 0u;
  memset(v59, 0, 39);
  sub_47E0E4(v42);
  sub_CBA9F0((uint64_t)&v91, a1, 7, a2);
  sub_CB9D7C((uint64_t)&v91, (uint64_t)v38);
  if (v38[0])
  {
    v91.__r_.__value_.__r.__words[0] = a1;
    LODWORD(v91.__r_.__value_.__r.__words[1]) = 2;
    v91.__r_.__value_.__r.__words[2] = a2;
    LOBYTE(v92) = sub_DC5CDC(&v91);
    LOBYTE(v93[1]) = 0;
    sub_C9CA80((uint64_t)&v91, (uint64_t)v34);
    if (v34[0])
    {
      sub_CF2E84((uint64_t)&v37, (uint64_t)&v91);
      sub_71740(7, (uint64_t)&v91, v30);
      int v8 = v92;
      if (v92)
      {
        long long v9 = (void **)v93[0];
        char v10 = v92;
        if (v93[0] != v92)
        {
          do
          {
            if (*((char *)v9 - 25) < 0) {
              operator delete(*(v9 - 6));
            }
            v9 -= 6;
          }
          while (v9 != v8);
          char v10 = v92;
        }
        v93[0] = v8;
        operator delete(v10);
      }
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
      sub_D04064((uint64_t)&v91, a1, (uint64_t *)&v35.__val_, a2);
      sub_C7C7B4((uint64_t)&v91, (uint64_t)v33);
    }
    sub_71424(7, &v35, v30);
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v91);
      sub_188FC78(&v91, (uint64_t)"[eta sar] input resolving failed", 32);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (v32 < 0) {
        operator delete(__p[0]);
      }
      *(std::string::size_type *)((char *)v91.__r_.__value_.__r.__words
      if (v95 < 0) {
        operator delete(v94);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    sub_D3BEF8((uint64_t)__p, &v35);
    sub_C5EEF0((uint64_t)&v91, (uint64_t)__p);
    sub_13F1D90(v96, 0, 0);
    uint64_t v12 = *(void *)(a3 + 24);
    if (!v12) {
      sub_29F82C();
    }
    (*(void (**)(uint64_t, std::string *))(*(void *)v12 + 48))(v12, &v91);
    sub_13F22FC(v96);
    sub_13F22FC(&v91);
    sub_13F22FC(__p);
    if (v34[0])
    {
      char v13 = *(const std::error_category **)&v35.__val_;
      if (*(void *)&v35.__val_)
      {
        cat = v35.__cat_;
        long long v15 = *(void **)&v35.__val_;
        if (v35.__cat_ != *(const std::error_category **)&v35.__val_)
        {
          do
          {
            cat -= 47;
            sub_402C7C((uint64_t)cat);
          }
          while (cat != v13);
          long long v15 = *(void **)&v35.__val_;
        }
        v35.__cat_ = v13;
        goto LABEL_38;
      }
    }
    else
    {
      long long v16 = (void **)v36;
      if (v36)
      {
        long long v17 = v37;
        long long v15 = v36;
        if (v37 != v36)
        {
          do
          {
            if (*((char *)v17 - 1) < 0) {
              operator delete(*(v17 - 3));
            }
            v17 -= 4;
          }
          while (v17 != v16);
          long long v15 = v36;
        }
        long long v37 = v16;
LABEL_38:
        operator delete(v15);
      }
    }
  }
  else
  {
    sub_D3BEF8((uint64_t)__p, &v39);
    sub_C5EEF0((uint64_t)&v91, (uint64_t)__p);
    sub_13F1D90(v96, 0, 0);
    uint64_t v11 = *(void *)(a3 + 24);
    if (!v11) {
      sub_29F82C();
    }
    (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 48))(v11, &v91);
    sub_13F22FC(v96);
    sub_13F22FC(&v91);
    sub_13F22FC(__p);
  }
  if (!v38[0])
  {
    long long v18 = (void **)v40;
    if (v40)
    {
      long long v19 = v41;
      uint64_t v20 = v40;
      if (v41 != v40)
      {
        do
        {
          if (*((char *)v19 - 1) < 0) {
            operator delete(*(v19 - 3));
          }
          v19 -= 4;
        }
        while (v19 != v18);
        uint64_t v20 = v40;
      }
      long long v41 = v18;
      operator delete(v20);
    }
  }
  if (v44 < 0) {
    operator delete(v43);
  }
  uint64_t v21 = v42[0];
  if (v42[0])
  {
    uint64_t v22 = v42[1];
    unsigned int v23 = v42[0];
    if (v42[1] != v42[0])
    {
      do
        uint64_t v22 = (void *)sub_405F44((uint64_t)v22 - 472);
      while (v22 != v21);
      unsigned int v23 = v42[0];
    }
    v42[1] = v21;
    operator delete(v23);
  }
  if (v59[1])
  {
    v59[2] = v59[1];
    operator delete(v59[1]);
  }
  if ((void)v58)
  {
    *((void *)&v58 + 1) = v58;
    operator delete((void *)v58);
  }
  if (v53)
  {
    long long v54 = v53;
    operator delete(v53);
  }
  sub_4BCC2C((uint64_t)v90);
  uint64_t v24 = (uint64_t *)v60;
  if (v60)
  {
    uint64_t v25 = v61;
    __n128 v26 = v60;
    if (v61 != v60)
    {
      do
        uint64_t v25 = sub_5ADCA8(v25 - 47);
      while (v25 != v24);
      __n128 v26 = v60;
    }
    int v61 = v24;
    operator delete(v26);
  }
  sub_5ADCA8(v63);
  char v27 = (uint64_t *)v86;
  if (v86)
  {
    uint64_t v28 = v87;
    int v29 = v86;
    if (v87 != v86)
    {
      do
        uint64_t v28 = sub_5ADCA8(v28 - 47);
      while (v28 != v27);
      int v29 = v86;
    }
    uint64_t v87 = v27;
    operator delete(v29);
  }
}

void sub_D3B1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (SLOBYTE(STACK[0xE07]) < 0) {
    operator delete((void *)STACK[0xDF0]);
  }
  sub_111ECAC((uint64_t)&STACK[0xA70]);
  sub_13F22FC(&STACK[0x6E0]);
  sub_D0FB2C((uint64_t)va);
  sub_C7E544((uint64_t)&STACK[0x218]);
  sub_C9D440((uint64_t)&STACK[0x298]);
  sub_C5C9E0((uint64_t)&STACK[0x2F8]);
  sub_405E28((uint64_t)&STACK[0x330]);
  sub_C08338(&STACK[0x360]);
  sub_4BCC2C((uint64_t)&STACK[0x788]);
  sub_5ADA30((void **)&STACK[0x400]);
  sub_5ADCA8((uint64_t *)&STACK[0x418]);
  sub_5ADA30((void **)&STACK[0x590]);
  _Unwind_Resume(a1);
}

void sub_D3BE9C()
{
}

void sub_D3BEA4()
{
}

void sub_D3BEAC()
{
  sub_13F22FC(v0);
  JUMPOUT(0xD3BEB8);
}

void sub_D3BECC()
{
}

void sub_D3BED4()
{
}

void sub_D3BEDC()
{
}

void sub_D3BEE4()
{
}

void sub_D3BEF0()
{
}

uint64_t sub_D3BEF8(uint64_t a1, const std::error_condition *a2)
{
  sub_13F1D90(a1, 0, 0);
  if ((void (***)(std::error_category *__hidden))a2->__cat_ == &off_2439090)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v16);
      int v5 = sub_188FC78(&v16, (uint64_t)"SubError: ", 10);
      std::error_condition::message(&__p, a2);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      sub_188FC78(v5, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v19 < 0) {
        operator delete(v18);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    int val = sub_E12498(a2->__val_);
  }
  else
  {
    int val = a2->__val_;
  }
  *(_DWORD *)(a1 + 40) |= 0x20u;
  *(_DWORD *)(a1 + 160) = val;
  uint64_t result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)&v16);
    long long v9 = sub_188FC78(&v16, (uint64_t)"ETARequest: ", 12);
    char v10 = sub_69510();
    uint64_t v11 = sub_68EE4((uint64_t)v10);
    int v12 = *(char *)(v11 + 23);
    if (v12 >= 0) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = *(void *)v11;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      uint64_t v14 = *(void *)(v11 + 8);
    }
    sub_188FC78(v9, v13, v14);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_D3C244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_13F22FC(v15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_13F22FC(v15);
  _Unwind_Resume(a1);
}

void sub_D3C30C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6, uint64_t a7, uint64_t a8)
{
  sub_37D0C0(a8);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  sub_F3D90C((uint64_t)a6, a7, 0);
  uint64_t v16 = (uint64_t (***)())a6[50];
  if (!v16) {
    uint64_t v16 = &off_2537168;
  }
  char v17 = sub_F5A680(*((_DWORD *)v16 + 6));
  sub_D3D160((uint64_t)v18, a6, a2, a3, a4, 1, a7, a8, v17);
  if (*((unsigned char *)a5 + 12))
  {
    uint64_t v19 = *a5;
    int v20 = *((_DWORD *)a5 + 2);
  }
  sub_C6F544();
}

void sub_D3CF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void ***a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a40);
  sub_D03AD8(v72 - 208);
  sub_CC1854((uint64_t)&a18);
  sub_C8ACB8((uint64_t)&a26);
  sub_C628C4(&a37);
  sub_C72310((uint64_t)&a72);
  sub_D1AA70((uint64_t)&STACK[0x3F0]);
  sub_5ADA30(a11);
  _Unwind_Resume(a1);
}

void sub_D3D158()
{
}

uint64_t sub_D3D160(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, char a9)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v74 = a1 + 32;
  *(_OWORD *)(a1 + 80) = 0u;
  uint64_t v73 = a1 + 80;
  uint64_t v15 = (void **)(a1 + 56);
  uint64_t v72 = a1 + 104;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  sub_DBDFE8(a2, a1 + 128);
  *(void *)(a1 + 168) = a7;
  *(unsigned char *)(a1 + 176) = a6;
  *(void *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a8;
  *(unsigned char *)(a1 + 208) = a9;
  *(void *)(a1 + 216) = sub_DBE834((uint64_t)a2);
  uint64_t v16 = sub_37B3A8(*(void *)(a1 + 200));
  uint64_t v17 = *(void *)v16;
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(v16 + 8);
  *(void *)(a1 + 132) = v17;
  sub_F5D99C();
  long long v18 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v18;
    operator delete(v18);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = v85;
  uint64_t v19 = v86;
  uint64_t v20 = v87;
  uint64_t v86 = 0;
  long long v85 = 0uLL;
  *(void *)(a1 + 16) = v19;
  *(void *)(a1 + 24) = v20;
  uint64_t v21 = *(void *)(a1 + 32);
  if (v21)
  {
    uint64_t v22 = *(void *)(a1 + 40);
    unsigned int v23 = *(void **)(a1 + 32);
    if (v22 != v21)
    {
      uint64_t v24 = *(void *)(a1 + 40);
      do
      {
        __n128 v26 = *(void **)(v24 - 32);
        v24 -= 32;
        uint64_t v25 = v26;
        if (v26)
        {
          *(void *)(v22 - 24) = v25;
          operator delete(v25);
        }
        uint64_t v22 = v24;
      }
      while (v24 != v21);
      unsigned int v23 = *(void **)v74;
    }
    *(void *)(a1 + 40) = v21;
    operator delete(v23);
    *(void *)uint64_t v74 = 0;
    *(void *)(v74 + 8) = 0;
    *(void *)(v74 + 16) = 0;
  }
  *(_OWORD *)(a1 + 32) = v91;
  *(void *)(a1 + 48) = v92;
  uint64_t v92 = 0;
  long long v91 = 0uLL;
  uint64_t v27 = *(void *)(a1 + 80);
  if (v27)
  {
    uint64_t v28 = *(void *)(a1 + 88);
    int v29 = *(void **)(a1 + 80);
    if (v28 != v27)
    {
      uint64_t v30 = *(void *)(a1 + 88);
      do
      {
        char v32 = *(void **)(v30 - 40);
        v30 -= 40;
        long long v31 = v32;
        if (v32)
        {
          *(void *)(v28 - 32) = v31;
          operator delete(v31);
        }
        uint64_t v28 = v30;
      }
      while (v30 != v27);
      int v29 = *(void **)v73;
    }
    *(void *)(a1 + 88) = v27;
    operator delete(v29);
    *(void *)uint64_t v73 = 0;
    *(void *)(v73 + 8) = 0;
    *(void *)(v73 + 16) = 0;
  }
  *(_OWORD *)(a1 + 80) = v93;
  *(void *)(a1 + 96) = v94;
  uint64_t v94 = 0;
  long long v93 = 0uLL;
  if (sub_DBF2D4((uint64_t)a2))
  {
    sub_F5D99C();
    sub_D11F24((uint64_t)v15, (const void **)v78);
    int64_t v33 = (char *)v81;
    long long v34 = v82;
    if (v81 != v82)
    {
      std::error_condition v35 = *(char **)(a1 + 64);
      do
      {
        if ((unint64_t)v35 < *(void *)(a1 + 72))
        {
          *(void *)std::error_condition v35 = 0;
          *((void *)v35 + 1) = 0;
          *((void *)v35 + 2) = 0;
          *(_OWORD *)std::error_condition v35 = *(_OWORD *)v33;
          *((void *)v35 + 2) = *((void *)v33 + 2);
          *(void *)int64_t v33 = 0;
          *((void *)v33 + 1) = 0;
          *((void *)v33 + 2) = 0;
          *((void *)v35 + 3) = *((void *)v33 + 3);
          v35 += 32;
        }
        else
        {
          std::error_condition v35 = sub_D128A0(v15, (uint64_t)v33);
        }
        *(void *)(a1 + 64) = v35;
        v33 += 32;
      }
      while (v33 != v34);
    }
    sub_D12044((uint64_t)v15, (const void **)__p);
    long long v36 = (char *)__p;
    if (__p)
    {
      long long v37 = v84;
      long long v38 = __p;
      if (v84 != __p)
      {
        std::error_condition v39 = v84;
        do
        {
          long long v41 = (void *)*((void *)v39 - 5);
          v39 -= 40;
          uint64_t v40 = v41;
          if (v41)
          {
            *((void *)v37 - 4) = v40;
            operator delete(v40);
          }
          long long v37 = v39;
        }
        while (v39 != v36);
        long long v38 = __p;
      }
      long long v84 = v36;
      operator delete(v38);
    }
    long long v42 = (char *)v81;
    if (v81)
    {
      long long v43 = v82;
      char v44 = v81;
      if (v82 != v81)
      {
        uint64_t v45 = v82;
        do
        {
          uint64_t v47 = (void *)*((void *)v45 - 4);
          v45 -= 32;
          int v46 = v47;
          if (v47)
          {
            *((void *)v43 - 3) = v46;
            operator delete(v46);
          }
          long long v43 = v45;
        }
        while (v45 != v42);
        char v44 = v81;
      }
      int v82 = v42;
      operator delete(v44);
    }
    if (v79)
    {
      long long v80 = v79;
      operator delete(v79);
    }
    if (*(void *)&v78[0])
    {
      *((void *)&v78[0] + 1) = *(void *)&v78[0];
      operator delete(*(void **)&v78[0]);
    }
  }
  if (*(void *)(a1 + 32) != *(void *)(a1 + 40))
  {
    sub_F5FE04((unsigned int **)a3, (uint64_t)v78);
    uint64_t v48 = *(void **)v72;
    if (*(void *)v72)
    {
      *(void *)(a1 + 112) = v48;
      operator delete(v48);
      *(void *)uint64_t v72 = 0;
      *(void *)(v72 + 8) = 0;
      *(void *)(v72 + 16) = 0;
    }
    *(_OWORD *)(a1 + 104) = v78[0];
    *(void *)(a1 + 120) = *(void *)&v78[1];
  }
  uint64_t v49 = *(void *)(a1 + 200);
  BYTE7(v78[1]) = 18;
  strcpy((char *)v78, "QuickTurnAvoidance");
  long long v75 = 0;
  long long v76 = 0;
  uint64_t v77 = 0;
  uint64_t v50 = sub_374CDC(v49, (uint64_t)v78, (uint64_t *)&v75);
  int v51 = (void **)v75;
  if (v75)
  {
    long long v52 = v76;
    uint64_t v53 = v75;
    if (v76 != v75)
    {
      do
      {
        if (*((char *)v52 - 1) < 0) {
          operator delete(*(v52 - 3));
        }
        v52 -= 3;
      }
      while (v52 != v51);
      uint64_t v53 = v75;
    }
    long long v76 = v51;
    operator delete(v53);
  }
  if (SBYTE7(v78[1]) < 0) {
    operator delete(*(void **)&v78[0]);
  }
  *(void *)(a1 + 184) = sub_D12164(v50, v88);
  if ((sub_DBCC54((uint64_t)a2) & 1) != 0 || (uint64_t v54 = *(void *)(a3 + 8), *(void *)a3 == v54))
  {
    *(unsigned char *)(a1 + 192) = 0;
    long long v58 = (char *)v93;
    if (!(void)v93) {
      goto LABEL_74;
    }
  }
  else
  {
    uint64_t v55 = *(void *)a3 + 160;
    do
    {
      BOOL v56 = *(_DWORD *)(v55 - 8) != 1 || *(unsigned char *)(v55 - 4) == 0;
      char v57 = !v56;
      if (!v56) {
        break;
      }
      BOOL v56 = v55 == v54;
      v55 += 160;
    }
    while (!v56);
    *(unsigned char *)(a1 + 192) = v57;
    long long v58 = (char *)v93;
    if (!(void)v93)
    {
LABEL_74:
      uint64_t v59 = (char *)v91;
      if (!(void)v91) {
        goto LABEL_75;
      }
      goto LABEL_88;
    }
  }
  uint64_t v62 = (char *)*((void *)&v93 + 1);
  uint64_t v63 = v58;
  if (*((char **)&v93 + 1) != v58)
  {
    int v64 = (char *)*((void *)&v93 + 1);
    do
    {
      long long v66 = (void *)*((void *)v64 - 5);
      v64 -= 40;
      long long v65 = v66;
      if (v66)
      {
        *((void *)v62 - 4) = v65;
        operator delete(v65);
      }
      uint64_t v62 = v64;
    }
    while (v64 != v58);
    uint64_t v63 = (char *)v93;
  }
  *((void *)&v93 + 1) = v58;
  operator delete(v63);
  uint64_t v59 = (char *)v91;
  if (!(void)v91)
  {
LABEL_75:
    uint64_t v60 = v89;
    if (!v89) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }
LABEL_88:
  long long v67 = (char *)*((void *)&v91 + 1);
  long long v68 = v59;
  if (*((char **)&v91 + 1) != v59)
  {
    long long v69 = (char *)*((void *)&v91 + 1);
    do
    {
      long long v71 = (void *)*((void *)v69 - 4);
      v69 -= 32;
      long long v70 = v71;
      if (v71)
      {
        *((void *)v67 - 3) = v70;
        operator delete(v70);
      }
      long long v67 = v69;
    }
    while (v69 != v59);
    long long v68 = (char *)v91;
  }
  *((void *)&v91 + 1) = v59;
  operator delete(v68);
  uint64_t v60 = v89;
  if (v89)
  {
LABEL_76:
    unint64_t v90 = v60;
    operator delete(v60);
  }
LABEL_77:
  if ((void)v85)
  {
    *((void *)&v85 + 1) = v85;
    operator delete((void *)v85);
  }
  return a1;
}

void sub_D3D6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  sub_CF7EAC((uint64_t)&a44);
  uint64_t v47 = *a11;
  if (*a11)
  {
    *(void *)(v44 + 112) = v47;
    operator delete(v47);
  }
  sub_591CA4(a12);
  sub_C64510(v45);
  sub_C64510(a13);
  uint64_t v48 = *(void **)v44;
  if (*(void *)v44)
  {
    *(void *)(v44 + 8) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D3D788(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int v8 = (long long *)sub_377D04(a4);
  char v16 = 1;
  sub_29E004((char *)__dst, v8);
  sub_DBFB34(a3, (uint64_t)__dst, a1 + 24);
  if (v16)
  {
    if (v15 < 0)
    {
      operator delete(__p);
      if ((v13 & 0x80000000) == 0)
      {
LABEL_4:
        if ((v11 & 0x80000000) == 0) {
          goto LABEL_5;
        }
LABEL_8:
        operator delete(__dst[0]);
        goto LABEL_5;
      }
    }
    else if ((v13 & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(v12);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
LABEL_5:
  *(void *)(a1 + 136) = a4;
  sub_D058A8(a1, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  sub_D3D8FC(*a2, a2[1], (char **)a1, *(char **)(a1 + 8));
  return a1;
}

void sub_D3D8B4(_Unwind_Exception *a1)
{
  sub_4BC1B8(v2);
  sub_5AB1B0(v1);
  _Unwind_Resume(a1);
}

char **sub_D3D8FC(uint64_t *a1, uint64_t *a2, char **a3, char *a4)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; i += 3)
    {
      uint64_t v7 = *i;
      if (*i == i[1])
      {
        *(_OWORD *)&v19[64] = 0u;
        *(_OWORD *)std::string __p = 0u;
        memset(v19, 0, 72);
        v19[32] = 1;
        v19[37] = 1;
        *(_DWORD *)&v19[38] = 0;
        *(_DWORD *)&v19[41] = 0;
        char v11 = &v20;
        *(_DWORD *)&v19[72] = -1;
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v7;
        *(void *)uint64_t v19 = *(void *)(v7 + 16);
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0;
        *(void *)uint64_t v7 = 0;
        *(_OWORD *)&v19[8] = *(_OWORD *)(v7 + 24);
        uint64_t v8 = *(void *)(v7 + 85);
        long long v9 = *(_OWORD *)(v7 + 72);
        long long v10 = *(_OWORD *)(v7 + 56);
        *(_OWORD *)&v19[24] = *(_OWORD *)(v7 + 40);
        *(_OWORD *)&v19[40] = v10;
        *(_OWORD *)&v19[56] = v9;
        *(void *)&v19[69] = v8;
        char v11 = (long long *)(v7 + 96);
        long long v12 = *(_OWORD *)(v7 + 96);
        uint64_t v21 = *(void *)(v7 + 112);
        long long v20 = v12;
      }
      *(void *)char v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = 0;
      char v13 = sub_D3DAA4(a3, a4, (uint64_t)__p);
      if (SHIBYTE(v21) < 0)
      {
        operator delete((void *)v20);
        uint64_t v14 = __p[0];
        if (__p[0])
        {
LABEL_12:
          char v15 = __p[1];
          char v16 = v14;
          if (__p[1] != v14)
          {
            do
              char v15 = (void *)sub_3AFFFC((uint64_t)v15 - 1056);
            while (v15 != v14);
            char v16 = __p[0];
          }
          __p[1] = v14;
          operator delete(v16);
        }
      }
      else
      {
        uint64_t v14 = __p[0];
        if (__p[0]) {
          goto LABEL_12;
        }
      }
      a4 = v13 + 120;
    }
  }
  return a3;
}

void sub_D3DA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_D3DAA4(char **a1, char *a2, uint64_t a3)
{
  char v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((a2 - *a1) >> 3);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v25 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6 - (void)v7) >> 3) + 1;
    if (v25 > 0x222222222222222) {
      sub_2E00();
    }
    unint64_t v26 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v9 - (void)v7) >> 3);
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x111111111111111) {
      unint64_t v27 = 0x222222222222222;
    }
    else {
      unint64_t v27 = v25;
    }
    uint64_t v60 = a1 + 2;
    if (v27)
    {
      if (v27 > 0x222222222222222) {
        sub_188D718();
      }
      uint64_t v28 = (char *)operator new(120 * v27);
    }
    else
    {
      uint64_t v28 = 0;
    }
    BOOL v56 = v28;
    char v57 = &v28[120 * v8];
    long long v58 = v57;
    uint64_t v59 = &v28[120 * v27];
    sub_D060A4((uint64_t)&v56, a3);
    long long v34 = v57;
    std::error_condition v35 = *a1;
    long long v36 = v57;
    if (*a1 != v4)
    {
      long long v36 = v57;
      long long v37 = v4;
      do
      {
        *((void *)v36 - 15) = 0;
        *((void *)v36 - 14) = 0;
        v36 -= 120;
        *((void *)v36 + 2) = 0;
        long long v38 = *(_OWORD *)(v37 - 15);
        v37 -= 15;
        *(_OWORD *)long long v36 = v38;
        *((void *)v36 + 2) = v37[2];
        v37[1] = 0;
        v37[2] = 0;
        *long long v37 = 0;
        long long v39 = *(_OWORD *)(v37 + 7);
        long long v40 = *(_OWORD *)(v37 + 9);
        uint64_t v41 = *(void *)((char *)v37 + 85);
        *(_OWORD *)(v36 + 40) = *(_OWORD *)(v37 + 5);
        *(void *)(v36 + 85) = v41;
        *(_OWORD *)(v36 + 72) = v40;
        *(_OWORD *)(v36 + 56) = v39;
        *(_OWORD *)(v36 + 24) = *(_OWORD *)(v37 + 3);
        long long v42 = *((_OWORD *)v37 + 6);
        *((void *)v36 + 14) = v37[14];
        *((_OWORD *)v36 + 6) = v42;
        v37[13] = 0;
        v37[14] = 0;
        v37[12] = 0;
      }
      while (v37 != (void *)v35);
    }
    char v57 = v36;
    long long v43 = a1[1];
    uint64_t v44 = v58;
    if (v43 != v4)
    {
      do
      {
        *(void *)uint64_t v44 = 0;
        *((void *)v44 + 1) = 0;
        *((void *)v44 + 2) = 0;
        *(_OWORD *)uint64_t v44 = *(_OWORD *)v4;
        *((void *)v44 + 2) = *((void *)v4 + 2);
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        *(void *)char v4 = 0;
        long long v45 = *(_OWORD *)(v4 + 56);
        long long v46 = *(_OWORD *)(v4 + 72);
        uint64_t v47 = *(void *)(v4 + 85);
        *(_OWORD *)(v44 + 40) = *(_OWORD *)(v4 + 40);
        *(void *)(v44 + 85) = v47;
        *(_OWORD *)(v44 + 72) = v46;
        *(_OWORD *)(v44 + 56) = v45;
        *(_OWORD *)(v44 + 24) = *(_OWORD *)(v4 + 24);
        long long v48 = *((_OWORD *)v4 + 6);
        *((void *)v44 + 14) = *((void *)v4 + 14);
        *((_OWORD *)v44 + 6) = v48;
        *((void *)v4 + 13) = 0;
        *((void *)v4 + 14) = 0;
        *((void *)v4 + 12) = 0;
        v44 += 120;
        v4 += 120;
      }
      while (v4 != v43);
      long long v36 = v57;
      char v4 = a1[1];
    }
    uint64_t v49 = *a1;
    *a1 = v36;
    a1[1] = v44;
    uint64_t v50 = a1[2];
    a1[2] = v59;
    long long v58 = v4;
    uint64_t v59 = v50;
    BOOL v56 = v49;
    char v57 = v49;
    if (v4 == v49)
    {
      if (!v4) {
        return v34;
      }
      goto LABEL_33;
    }
    while (1)
    {
      long long v52 = (void **)(v4 - 120);
      long long v58 = v4 - 120;
      if (*(v4 - 1) < 0)
      {
        operator delete(*((void **)v4 - 3));
        uint64_t v53 = *v52;
        if (*v52)
        {
LABEL_42:
          uint64_t v54 = *((void *)v4 - 14);
          uint64_t v55 = v53;
          if ((void *)v54 != v53)
          {
            do
              uint64_t v54 = sub_3AFFFC(v54 - 1056);
            while ((void *)v54 != v53);
            uint64_t v55 = *v52;
          }
          *((void *)v4 - 14) = v53;
          operator delete(v55);
        }
      }
      else
      {
        uint64_t v53 = *v52;
        if (*v52) {
          goto LABEL_42;
        }
      }
      char v4 = v58;
      if (v58 == v49)
      {
        char v4 = v56;
        if (!v56) {
          return v34;
        }
LABEL_33:
        operator delete(v4);
        return v34;
      }
    }
  }
  if (a2 == (char *)v6)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((void *)a2 + 2) = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    int v29 = &v7[120 * v8];
    long long v30 = *(_OWORD *)(a3 + 56);
    long long v31 = *(_OWORD *)(a3 + 72);
    uint64_t v32 = *(void *)(a3 + 85);
    *(_OWORD *)(v29 + 40) = *(_OWORD *)(a3 + 40);
    *(void *)(v29 + 85) = v32;
    *(_OWORD *)(v29 + 72) = v31;
    *(_OWORD *)(v29 + 56) = v30;
    *(_OWORD *)(v29 + 24) = *(_OWORD *)(a3 + 24);
    long long v33 = *(_OWORD *)(a3 + 96);
    *((void *)v29 + 14) = *(void *)(a3 + 112);
    *((_OWORD *)v29 + 6) = v33;
    *(void *)(a3 + 104) = 0;
    *(void *)(a3 + 112) = 0;
    *(void *)(a3 + 96) = 0;
    a1[1] = a2 + 120;
  }
  else
  {
    long long v10 = a1[1];
    if (v6 >= 0x78)
    {
      unint64_t v11 = v6 - 120;
      long long v10 = a1[1];
      do
      {
        *(void *)long long v10 = 0;
        *((void *)v10 + 1) = 0;
        *((void *)v10 + 2) = 0;
        *(_OWORD *)long long v10 = *(_OWORD *)v11;
        *((void *)v10 + 2) = *(void *)(v11 + 16);
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)unint64_t v11 = 0;
        long long v12 = *(_OWORD *)(v11 + 56);
        long long v13 = *(_OWORD *)(v11 + 72);
        uint64_t v14 = *(void *)(v11 + 85);
        *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
        *(void *)(v10 + 85) = v14;
        *(_OWORD *)(v10 + 72) = v13;
        *(_OWORD *)(v10 + 56) = v12;
        *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
        long long v15 = *(_OWORD *)(v11 + 96);
        *((void *)v10 + 14) = *(void *)(v11 + 112);
        *((_OWORD *)v10 + 6) = v15;
        *(void *)(v11 + 104) = 0;
        *(void *)(v11 + 112) = 0;
        *(void *)(v11 + 96) = 0;
        v10 += 120;
        v11 += 120;
      }
      while (v11 < v6);
    }
    a1[1] = v10;
    sub_D06324(a2, (void *)(v6 - 120), v6);
    uint64_t v16 = *(void *)v4;
    if (*(void *)v4)
    {
      uint64_t v17 = *((void *)v4 + 1);
      long long v18 = *(void **)v4;
      if (v17 != v16)
      {
        do
          uint64_t v17 = sub_3AFFFC(v17 - 1056);
        while (v17 != v16);
        long long v18 = *(void **)v4;
      }
      *((void *)v4 + 1) = v16;
      operator delete(v18);
      *(void *)char v4 = 0;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
    }
    *(_OWORD *)char v4 = *(_OWORD *)a3;
    *((void *)v4 + 2) = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    uint64_t v19 = &v7[120 * v8];
    long long v20 = *(_OWORD *)(a3 + 56);
    long long v21 = *(_OWORD *)(a3 + 72);
    uint64_t v22 = *(void *)(a3 + 85);
    *(_OWORD *)(v19 + 40) = *(_OWORD *)(a3 + 40);
    *(void *)(v19 + 85) = v22;
    *(_OWORD *)(v19 + 72) = v21;
    *(_OWORD *)(v19 + 56) = v20;
    *(_OWORD *)(v19 + 24) = *(_OWORD *)(a3 + 24);
    unsigned int v23 = (void **)(v19 + 96);
    if (v4[119] < 0) {
      operator delete(*v23);
    }
    long long v24 = *(_OWORD *)(a3 + 96);
    _DWORD v23[2] = *(void **)(a3 + 112);
    *(_OWORD *)unsigned int v23 = v24;
    *(unsigned char *)(a3 + 119) = 0;
    *(unsigned char *)(a3 + 96) = 0;
  }
  return v4;
}

void sub_D3DF38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5AC2CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D3DF4C(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1)
  {
    sub_52FA20(a1, *(void *)a1);
    operator delete(*(void **)a1);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  sub_8E5E5C(a1 + 32, (uint64_t *)(a2 + 32));
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  uint64_t v4 = *(void *)(a1 + 328);
  if (v4)
  {
    int v5 = (void **)(a1 + 328);
    uint64_t v6 = *(void *)(a1 + 336);
    uint64_t v7 = *(void **)(a1 + 328);
    if (v6 != v4)
    {
      do
        uint64_t v6 = sub_4D4B58(v6 - 160);
      while (v6 != v4);
      uint64_t v7 = *v5;
    }
    *(void *)(a1 + 336) = v4;
    operator delete(v7);
    void *v5 = 0;
    *(void *)(a1 + 336) = 0;
    *(void *)(a1 + 344) = 0;
  }
  uint64_t v8 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v8;
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a2 + 328) = 0;
  *(void *)(a2 + 336) = 0;
  *(void *)(a2 + 344) = 0;
  uint64_t v9 = *(void *)(a1 + 352);
  if (v9)
  {
    long long v10 = (void **)(a1 + 352);
    uint64_t v11 = *(void *)(a1 + 360);
    long long v12 = *(void **)(a1 + 352);
    if (v11 != v9)
    {
      do
        uint64_t v11 = sub_3A6B94(v11 - 1120);
      while (v11 != v9);
      long long v12 = *v10;
    }
    *(void *)(a1 + 360) = v9;
    operator delete(v12);
    *long long v10 = 0;
    *(void *)(a1 + 360) = 0;
    *(void *)(a1 + 368) = 0;
  }
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a2 + 352) = 0;
  *(void *)(a2 + 360) = 0;
  *(void *)(a2 + 368) = 0;
  return a1;
}

uint64_t sub_D3E094@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "SARReferencePointComputationModuleInput");
  unint64_t v4 = *(void *)(a2 + 40);
  LOBYTE(v17) = 1;
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C947F8((uint64_t *)(a2 + 24), "Runtime", (char *)&v17, a1);
  }
  else
  {
    sub_C949C8(a2 + 40, *(void *)(a2 + 32), "Runtime", (char *)&v17, a1);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  char v18 = 7;
  uint64_t v7 = a1[1];
  uint64_t v8 = v7 / 100;
  __int16 v9 = v7 % 100;
  if (v7 < 0) {
    __int16 v10 = -50;
  }
  else {
    __int16 v10 = 50;
  }
  uint64_t v17 = v8 + (int)(((5243 * (__int16)(v10 + v9)) >> 19) + ((5243 * (__int16)(v10 + v9)) >> 31));
  if (v6 >= *(void *)(a2 + 40))
  {
    unint64_t v11 = sub_D3E330((uint64_t *)(a2 + 24), "UserRouteLength", &v18, &v17);
  }
  else
  {
    sub_D3E500(a2 + 40, v6, "UserRouteLength", &v18, &v17);
    unint64_t v11 = v6 + 48;
    *(void *)(a2 + 32) = v11;
  }
  *(void *)(a2 + 32) = v11;
  char v18 = 7;
  uint64_t v12 = a1[2];
  uint64_t v13 = v12 / 100;
  __int16 v14 = v12 % 100;
  if (v12 < 0) {
    __int16 v15 = -50;
  }
  else {
    __int16 v15 = 50;
  }
  uint64_t v17 = v13 + (int)(((5243 * (__int16)(v15 + v14)) >> 19) + ((5243 * (__int16)(v15 + v14)) >> 31));
  if (v11 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_D3E66C((uint64_t *)(a2 + 24), "ComputedReferencePointDistance", &v18, &v17);
  }
  else
  {
    sub_D3E83C(a2 + 40, v11, "ComputedReferencePointDistance", &v18, &v17);
    uint64_t result = v11 + 48;
    *(void *)(a2 + 32) = v11 + 48;
  }
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_D3E2C0(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D3E2D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D3E31C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D3E330(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  long long v21 = &v11[48 * v10];
  sub_D3E500(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  __int16 v14 = (char *)*a1;
  __int16 v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    char v18 = (char *)*a1;
    __int16 v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      __int16 v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D3E4EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D3E500(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  __int16 v15 = (void *)__dst;

  operator delete(v15);
}

void sub_D3E658(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D3E66C(uint64_t *a1, char *a2, char *a3, void *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    unint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  long long v21 = &v11[48 * v10];
  sub_D3E83C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  __int16 v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    char v18 = (char *)*a1;
    __int16 v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      __int16 v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D3E828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D3E83C(int a1, uint64_t a2, char *__s, char *a4, void *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (long long *)operator new(v13 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v17 = v14 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v17;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = *a5;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = *a5;
  *(_DWORD *)(a2 + 40) = 1;
  __int16 v15 = (void *)__dst;

  operator delete(v15);
}

void sub_D3E994(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D3E9A8(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x199999999999999) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v6 = 0x199999999999999;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x199999999999999) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(160 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v24 = (uint64_t)&v7[160 * v3];
  unint64_t v25 = &v7[160 * v6];
  sub_44479C(v24, a2);
  uint64_t v8 = v24 + 160;
  size_t v9 = (char *)*a1;
  size_t v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v24;
    a1[1] = v8;
    a1[2] = (uint64_t)v25;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v24 + v11;
      uint64_t v13 = &v10[v11];
      *(_OWORD *)(v12 - 160) = *(_OWORD *)&v10[v11 - 160];
      long long v14 = *(_OWORD *)&v10[v11 - 144];
      long long v15 = *(_OWORD *)&v10[v11 - 128];
      long long v16 = *(_OWORD *)&v10[v11 - 112];
      *(_DWORD *)(v12 - 97) = *(_DWORD *)&v10[v11 - 97];
      *(_OWORD *)(v12 - 128) = v15;
      *(_OWORD *)(v12 - 112) = v16;
      *(_OWORD *)(v12 - 144) = v14;
      *(void *)(v12 - 80) = 0;
      *(void *)(v12 - 72) = 0;
      *(void *)(v12 - 88) = 0;
      *(_OWORD *)(v12 - 88) = *(_OWORD *)&v10[v11 - 88];
      *(void *)(v12 - 72) = *(void *)&v10[v11 - 72];
      *((void *)v13 - 11) = 0;
      *((void *)v13 - 10) = 0;
      *((void *)v13 - 9) = 0;
      int v17 = *(_DWORD *)&v10[v11 - 64];
      *(unsigned char *)(v12 - 60) = v10[v11 - 60];
      *(void *)(v12 - 48) = 0;
      *(void *)(v12 - 40) = 0;
      *(void *)(v12 - 56) = 0;
      *(_DWORD *)(v12 - 64) = v17;
      *(_OWORD *)(v12 - 56) = *(_OWORD *)&v10[v11 - 56];
      *(void *)(v12 - 40) = *(void *)&v10[v11 - 40];
      *((void *)v13 - 7) = 0;
      *((void *)v13 - 6) = 0;
      *((void *)v13 - 5) = 0;
      *(void *)(v12 - 32) = 0;
      *(void *)(v12 - 24) = 0;
      *(void *)(v12 - 16) = 0;
      *(_OWORD *)(v12 - 32) = *(_OWORD *)&v10[v11 - 32];
      *(void *)(v12 - 16) = *(void *)&v10[v11 - 16];
      *((void *)v13 - 4) = 0;
      *((void *)v13 - 3) = 0;
      *((void *)v13 - 2) = 0;
      int v18 = *(_DWORD *)&v10[v11 - 8];
      *(_DWORD *)(v12 - 5) = *(_DWORD *)&v10[v11 - 5];
      *(_DWORD *)(v12 - 8) = v18;
      v11 -= 160;
    }
    while (&v10[v11] != v9);
    uint64_t v19 = (char *)*a1;
    size_t v10 = (char *)a1[1];
    *a1 = v24 + v11;
    a1[1] = v8;
    a1[2] = (uint64_t)v25;
    if (v10 != v19)
    {
      do
      {
        uint64_t v20 = (void *)*((void *)v10 - 4);
        if (v20)
        {
          *((void *)v10 - 3) = v20;
          operator delete(v20);
        }
        long long v21 = (void *)*((void *)v10 - 7);
        if (v21)
        {
          *((void *)v10 - 6) = v21;
          operator delete(v21);
        }
        uint64_t v22 = (void *)*((void *)v10 - 11);
        if (v22)
        {
          *((void *)v10 - 10) = v22;
          operator delete(v22);
        }
        v10 -= 160;
      }
      while (v10 != v19);
      size_t v10 = v19;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v24 + 160;
}

void sub_D3EBE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_C7C704((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D3EBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(void *)(a1 + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a4;
  *(void *)(a1 + 40) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_5AE1FC(a1 + 48, a5);
  *(void *)(a1 + 424) = sub_DC0848(a2);
  *(unsigned char *)(a1 + 432) = v7;
  return a1;
}

void sub_D3EC90(_Unwind_Exception *a1)
{
  unint64_t v4 = v2;
  sub_5ADCA8(v4);
  if (*v3) {
    sub_20AFDAC();
  }
  sub_20AFD30(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D3ECC8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v5 = (void *)result;
    if (a4 >= 0xAE4C415C9882BALL) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(376 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 376 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_D3EDD0(v8 + v9, a2 + v9);
        v9 += 376;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_D3ED8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_D3EDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 376)
    sub_5ADCA8((uint64_t *)(v10 - 376 + v11));
  *(void *)(v9 + 8) = v10;
  sub_D06768(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_D3EDD0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_59486C((void *)a1, *(void *)a2, *(void *)(a2 + 8), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  sub_3B1F44(a1 + 32, (uint64_t *)(a2 + 32));
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = 0;
  sub_5950E8(a1 + 328, *(void *)(a2 + 328), *(void *)(a2 + 336), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 336) - *(void *)(a2 + 328)) >> 5));
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  sub_510340(a1 + 352, *(void *)(a2 + 352), *(void *)(a2 + 360), 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 5));
  return a1;
}

void sub_D3EEAC(_Unwind_Exception *a1)
{
  sub_59213C(v3);
  sub_3B0290(v2);
  sub_59241C(v1);
  _Unwind_Resume(a1);
}

void sub_D3EED8(_Unwind_Exception *a1)
{
  sub_59241C(v1);
  _Unwind_Resume(a1);
}

void sub_D3EEEC()
{
  byte_25E6797 = 1;
  word_25E6780 = 65;
  byte_25E67AF = 1;
  word_25E6798 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25E6810 = 0u;
  *(_OWORD *)&qword_25E6820 = 0u;
  dword_25E6830 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E6810, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25E6810, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E6810, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E6810, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E67C7 = 8;
  strcpy((char *)&qword_25E67B0, "any_mode");
  byte_25E67DF = 7;
  strcpy((char *)&dword_25E67C8, "cycling");
  byte_25E67F7 = 7;
  strcpy((char *)&dword_25E67E0, "driving");
  byte_25E680F = 7;
  strcpy((char *)&dword_25E67F8, "walking");
}

void sub_D3F148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E6820) {
    sub_20B0280((void **)qword_25E6820);
  }
  long long v37 = (void *)xmmword_25E6810;
  *(void *)&xmmword_25E6810 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_D3F1E8(uint64_t a1, uint64_t a2)
{
  sub_37D0C0(a2);
  sub_D54164(8, a1, a2);
  sub_725D0((uint64_t)v39);
  uint64_t v37 = 0;
  long long v36 = 0;
  uint64_t v38 = 0;
  uint64_t v10 = 0;
  uint64_t v9 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v13 = 0x8000000080000000;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  *(void *)&long long v4 = 0x8000000080000000;
  *((void *)&v4 + 1) = 0x8000000080000000;
  long long v29 = 0u;
  long long v30 = v4;
  long long v31 = v4;
  int v14 = 0x7FFFFFFF;
  int v32 = 5;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v7 = 0;
  unint64_t v6 = 0;
  uint64_t v8 = 0;
  sub_737844((uint64_t)v5);
}

void sub_D42138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x7A7]) < 0) {
    operator delete((void *)STACK[0x790]);
  }
  sub_111ECAC((uint64_t)&STACK[0xA90]);
  sub_D03AD8((uint64_t)&STACK[0xC80]);
  sub_CC1854((uint64_t)&STACK[0x6B0]);
  sub_C8ACB8((uint64_t)&STACK[0xCE8]);
  sub_C72310((uint64_t)&STACK[0x7C0]);
  sub_C08338(&STACK[0xE28]);
  if (SLOBYTE(STACK[0x7BF]) < 0) {
    operator delete((void *)STACK[0x7A8]);
  }
  sub_C08338(&a24);
  sub_C7FD08((uint64_t)&a44);
  sub_C7E544((uint64_t)&a67);
  sub_C9D440((uint64_t)&STACK[0x250]);
  sub_C5C9E0((uint64_t)&STACK[0x2B0]);
  sub_D0FB2C((uint64_t)&STACK[0x2F8]);
  sub_5ADA30((void **)&STACK[0x4E0]);
  sub_5ADCA8((uint64_t *)&STACK[0x500]);
  sub_5ADA30((void **)&STACK[0x678]);
  _Unwind_Resume(a1);
}

void sub_D428D4()
{
}

void sub_D428DC()
{
}

void sub_D428E4()
{
}

void sub_D428F4()
{
}

void sub_D428FC()
{
}

void sub_D4290C()
{
}

void sub_D42914()
{
  sub_13F22FC(v0);
  JUMPOUT(0xD42920);
}

void sub_D42934()
{
}

void sub_D4293C()
{
}

void sub_D42944()
{
}

void sub_D4294C()
{
  sub_13F22FC(v0);
  JUMPOUT(0xD42958);
}

void sub_D4296C()
{
}

void sub_D42974()
{
}

void sub_D4297C()
{
}

void sub_D42984()
{
}

void sub_D4298C()
{
}

uint64_t sub_D42998(uint64_t a1, const std::error_condition *a2)
{
  sub_13F1D90(a1, 0, 0);
  if ((void (***)(std::error_category *__hidden))a2->__cat_ == &off_2439090)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v16);
      int v5 = sub_188FC78(&v16, (uint64_t)"SubError: ", 10);
      std::error_condition::message(&__p, a2);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      sub_188FC78(v5, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v19 < 0) {
        operator delete(v18);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    int val = sub_E12498(a2->__val_);
  }
  else
  {
    int val = a2->__val_;
  }
  *(_DWORD *)(a1 + 40) |= 0x20u;
  *(_DWORD *)(a1 + 160) = val;
  uint64_t result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)&v16);
    uint64_t v9 = sub_188FC78(&v16, (uint64_t)"ETARequest: ", 12);
    uint64_t v10 = sub_69510();
    uint64_t v11 = sub_68EE4((uint64_t)v10);
    int v12 = *(char *)(v11 + 23);
    if (v12 >= 0) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = *(void *)v11;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      uint64_t v14 = *(void *)(v11 + 8);
    }
    sub_188FC78(v9, v13, v14);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_D42CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_13F22FC(v15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_13F22FC(v15);
  _Unwind_Resume(a1);
}

void **sub_D42DAC(void **a1)
{
  int v2 = a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (char *)*a1;
  if (*a1)
  {
    long long v4 = (char *)a1[1];
    int v5 = *a1;
    if (v4 != v3)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 5);
        if (v6)
        {
          *((void *)v4 - 4) = v6;
          operator delete(v6);
        }
        v4 -= 112;
      }
      while (v4 != v3);
      int v5 = *a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

void sub_D42E30(uint64_t a1)
{
  char v17 = 2;
  strcpy(v16, "OD");
  int v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  sub_47E0E4(v12);
  sub_D3D160((uint64_t)v14, v2, v3 + 8, v3 + 32, (uint64_t)v12, 1, *(void *)(a1 + 16), *(void *)(a1 + 24), **(unsigned char **)(a1 + 32));
  if (v13 < 0) {
    operator delete(v12[3]);
  }
  long long v4 = v12[0];
  if (v12[0])
  {
    int v5 = v12[1];
    unint64_t v6 = v12[0];
    if (v12[1] != v12[0])
    {
      do
        int v5 = (void *)sub_405F44((uint64_t)v5 - 472);
      while (v5 != v4);
      unint64_t v6 = v12[0];
    }
    v12[1] = v4;
    operator delete(v6);
  }
  double v7 = *(double *)(**(void **)(a1 + 40) + 56) * 30.0 * 100.0;
  if (v7 >= 0.0)
  {
    double v8 = *(double *)(**(void **)(a1 + 40) + 56) * 30.0 * 100.0;
    if (v7 >= 4.50359963e15) {
      goto LABEL_16;
    }
    uint64_t v9 = (uint64_t)(v7 + v7) + 1;
  }
  else
  {
    double v8 = *(double *)(**(void **)(a1 + 40) + 56) * 30.0 * 100.0;
    if (v7 <= -4.50359963e15) {
      goto LABEL_16;
    }
    uint64_t v9 = (uint64_t)(v7 + v7);
    if (v9 >= 1) {
      --v9;
    }
  }
  double v8 = (double)(v9 >> 1);
LABEL_16:
  if (v8 >= 9.22337204e18)
  {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_27;
  }
  if (v7 >= 0.0)
  {
    if (v7 < 4.50359963e15)
    {
      uint64_t v10 = (uint64_t)(v7 + v7) + 1;
LABEL_25:
      double v7 = (double)(v10 >> 1);
    }
  }
  else if (v7 > -4.50359963e15)
  {
    uint64_t v10 = (uint64_t)(v7 + v7);
    if (v10 >= 1) {
      --v10;
    }
    goto LABEL_25;
  }
  uint64_t v11 = (uint64_t)v7;
LABEL_27:
  v15 += v11;
  sub_C6F544();
}

void sub_D43A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&STACK[0x3F0]);
  sub_D03AD8((uint64_t)&STACK[0x3B8]);
  sub_CC1854((uint64_t)&a17);
  sub_C8ACB8((uint64_t)&a25);
  sub_C72310((uint64_t)&a36);
  sub_D1AA70((uint64_t)&STACK[0x2C0]);
  if (SLOBYTE(STACK[0x3B7]) < 0) {
    operator delete((void *)STACK[0x3A0]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D43C54(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  sub_DC3F00(a2, a1);
  long long v7 = a3[2];
  long long v8 = a3[3];
  int v9 = *(_DWORD *)((char *)a3 + 63);
  long long v11 = *a3;
  long long v10 = a3[1];
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = v11;
  *(_DWORD *)(a1 + 87) = v9;
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v10;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  char v13 = (unsigned char *)*((void *)a3 + 9);
  int v12 = (unsigned char *)*((void *)a3 + 10);
  int64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      sub_2E00();
    }
    uint64_t v15 = (char *)operator new(v12 - v13);
    *(void *)(a1 + 96) = v15;
    *(void *)(a1 + 104) = v15;
    uint64_t v16 = &v15[4 * (v14 >> 2)];
    *(void *)(a1 + 112) = v16;
    memcpy(v15, v13, v14);
    *(void *)(a1 + 104) = v16;
  }
  int v17 = *((_DWORD *)a3 + 24);
  *(unsigned char *)(a1 + 124) = *((unsigned char *)a3 + 100);
  *(_DWORD *)(a1 + 120) = v17;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)sub_37B3A8(a4);
  *(void *)(a1 + 136) = a4;
  return a1;
}

void sub_D43D38(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 104) = v4;
    operator delete(v4);
  }
  sub_C6CBE0((void **)v1);
  _Unwind_Resume(a1);
}

void sub_D43D60()
{
  byte_25E684F = 1;
  word_25E6838 = 65;
  byte_25E6867 = 1;
  word_25E6850 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25E68C8 = 0u;
  *(_OWORD *)&qword_25E68D8 = 0u;
  dword_25E68E8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E68C8, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25E68C8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E68C8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E68C8, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E687F = 8;
  strcpy((char *)&qword_25E6868, "any_mode");
  byte_25E6897 = 7;
  strcpy((char *)&dword_25E6880, "cycling");
  byte_25E68AF = 7;
  strcpy((char *)&dword_25E6898, "driving");
  byte_25E68C7 = 7;
  strcpy((char *)&dword_25E68B0, "walking");
}

void sub_D43FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E68D8) {
    sub_20B02C4((void **)qword_25E68D8);
  }
  uint64_t v37 = (void *)xmmword_25E68C8;
  *(void *)&xmmword_25E68C8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_D4405C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)sub_37D0C0((uint64_t)a2);
  sub_D54164(9, a1, (uint64_t)a2);
  sub_725D0((uint64_t)v303);
  unint64_t v300 = 0;
  v301 = 0;
  uint64_t v302 = 0;
  int v297 = 0;
  v298 = 0;
  uint64_t v299 = 0;
  long long v295 = 0uLL;
  uint64_t v296 = 0;
  v292 = 0;
  unint64_t v293 = 0;
  uint64_t v294 = 0;
  if (sub_DBDC20(a1)) {
    int v278 = sub_37B608(a2) ^ 1;
  }
  else {
    int v278 = 0;
  }
  if (sub_DBDBD8(a1)) {
    int v277 = sub_37B8FC(a2) ^ 1;
  }
  else {
    int v277 = 0;
  }
  if (sub_DBD40C(a1)) {
    int v276 = sub_37BEE4(a2) ^ 1;
  }
  else {
    int v276 = 0;
  }
  if (sub_DBDC4C(a1)) {
    int v275 = sub_37BBF0(a2) ^ 1;
  }
  else {
    int v275 = 0;
  }
  if (sub_DBDC20(a1)) {
    int v6 = sub_37B608(a2);
  }
  else {
    int v6 = 0;
  }
  if (sub_DBDBD8(a1)) {
    int v7 = sub_37B8FC(a2);
  }
  else {
    int v7 = 0;
  }
  if (sub_DBD40C(a1)) {
    int v8 = sub_37BEE4(a2);
  }
  else {
    int v8 = 0;
  }
  if (sub_DBDC4C(a1))
  {
    int v9 = sub_37BBF0(a2);
    if ((v6 | v7 | v8)) {
      goto LABEL_27;
    }
  }
  else
  {
    int v9 = 0;
    if ((v6 | v7 | v8)) {
      goto LABEL_27;
    }
  }
  if (!v9) {
    goto LABEL_43;
  }
LABEL_27:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_20E1380;
  strcpy(__p[0].__r_.__value_.__l.__data_, "Plan.InternalError.UnsupportedTransportTypes");
  sub_710A8(9, (uint64_t)__p, v5);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)__p);
    sub_D49D5C(&v341, v6, v7, v8, v9);
    char v10 = std::string::insert(&v341, 0, "Requested transport types disabled: ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(void *)&long long v312 = *((void *)&v10->__r_.__value_.__l + 2);
    long long v311 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v312) & 0x80u) == 0) {
      int v12 = &v311;
    }
    else {
      int v12 = (long long *)v311;
    }
    if ((SBYTE7(v312) & 0x80u) == 0) {
      uint64_t v13 = BYTE7(v312);
    }
    else {
      uint64_t v13 = *((void *)&v311 + 1);
    }
    sub_188FC78(__p, (uint64_t)v12, v13);
    if (SBYTE7(v312) < 0)
    {
      operator delete((void *)v311);
      if ((SHIBYTE(v341.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
    }
    else if ((SHIBYTE(v341.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v311, 1u);
      if (SBYTE7(v312) < 0) {
        operator delete((void *)v311);
      }
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
      if (SHIBYTE(v353) < 0) {
        operator delete((void *)v352);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_43;
    }
    operator delete(v341.__r_.__value_.__l.__data_);
    goto LABEL_38;
  }
LABEL_43:
  if ((v278 | v277 | v276 | v275))
  {
    sub_CBA9F0((uint64_t)__p, a1, 9, (uint64_t)a2);
    sub_CB9D7C((uint64_t)__p, (uint64_t)v288);
    if (!v288[0])
    {
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_20B91B0;
      strcpy(__p[0].__r_.__value_.__l.__data_, "InternalError.InvalidRequest");
      sub_710A8(9, (uint64_t)__p, v5);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      sub_D49EC0((uint64_t)&v311, &v289);
      sub_C5EEF0((uint64_t)__p, (uint64_t)&v311);
      sub_13F1D90(v357, 0, 0);
      uint64_t v18 = *(void *)(a3 + 24);
      if (!v18) {
        sub_29F82C();
      }
      (*(void (**)(uint64_t, std::string *))(*(void *)v18 + 48))(v18, __p);
      sub_13F22FC(v357);
      sub_13F22FC(__p);
      sub_13F22FC(&v311);
      goto LABEL_764;
    }
    __p[0].__r_.__value_.__r.__words[0] = a1;
    LODWORD(__p[0].__r_.__value_.__r.__words[1]) = 2;
    __p[0].__r_.__value_.__r.__words[2] = (std::string::size_type)a2;
    __p[1].__r_.__value_.__s.__data_[0] = sub_DC5CDC(__p);
    __p[1].__r_.__value_.__s.__data_[16] = 0;
    sub_C9CA80((uint64_t)__p, (uint64_t)v284);
    if (!v284[0])
    {
      sub_71424(9, &v285, v5);
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        sub_D4A2D4(1u, (char *)&v311);
        if ((SBYTE7(v312) & 0x80u) == 0) {
          char v19 = &v311;
        }
        else {
          char v19 = (long long *)v311;
        }
        if ((SBYTE7(v312) & 0x80u) == 0) {
          uint64_t v20 = BYTE7(v312);
        }
        else {
          uint64_t v20 = *((void *)&v311 + 1);
        }
        sub_188FC78(__p, (uint64_t)v19, v20);
        if (SBYTE7(v312) < 0) {
          operator delete((void *)v311);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v311, 3u);
        if (SBYTE7(v312) < 0) {
          operator delete((void *)v311);
        }
        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
        if (SHIBYTE(v353) < 0) {
          operator delete((void *)v352);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      v341.__r_.__value_.__r.__words[0] = 1;
      v341.__r_.__value_.__l.__size_ = (std::string::size_type)&off_2439090;
      sub_D49EC0((uint64_t)&v311, (const std::error_condition *)&v341);
      sub_C5EEF0((uint64_t)__p, (uint64_t)&v311);
      sub_13F1D90(v357, 0, 0);
      uint64_t v21 = *(void *)(a3 + 24);
      if (!v21) {
        sub_29F82C();
      }
      (*(void (**)(uint64_t, std::string *))(*(void *)v21 + 48))(v21, __p);
      sub_13F22FC(v357);
      sub_13F22FC(__p);
      sub_13F22FC(&v311);
      if (!v284[0]) {
        goto LABEL_740;
      }
LABEL_725:
      v240 = *(const std::error_category **)&v285.__val_;
      if (*(void *)&v285.__val_)
      {
        cat = v285.__cat_;
        int v242 = *(void **)&v285.__val_;
        if (v285.__cat_ != *(const std::error_category **)&v285.__val_)
        {
          do
          {
            cat -= 47;
            sub_402C7C((uint64_t)cat);
          }
          while (cat != v240);
          int v242 = *(void **)&v285.__val_;
        }
        v285.__cat_ = v240;
LABEL_763:
        operator delete(v242);
        goto LABEL_764;
      }
      goto LABEL_764;
    }
    sub_CF2E84((uint64_t)v287, (uint64_t)__p);
    sub_71740(9, (uint64_t)__p, v5);
    std::string::pointer data = __p[1].__r_.__value_.__l.__data_;
    if (__p[1].__r_.__value_.__r.__words[0])
    {
      std::string::size_type size = __p[1].__r_.__value_.__l.__size_;
      std::string::pointer v16 = __p[1].__r_.__value_.__l.__data_;
      if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(size - 25) < 0) {
            operator delete(*(void **)(size - 48));
          }
          size -= 48;
        }
        while ((std::string::pointer)size != data);
        std::string::pointer v16 = __p[1].__r_.__value_.__l.__data_;
      }
      __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)data;
      operator delete(v16);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    sub_D04064((uint64_t)v279, a1, (uint64_t *)&v285.__val_, (uint64_t)a2);
    unint64_t v273 = v287[4];
    long long v22 = *(uint64_t (****)())(a1 + 400);
    if (!v22) {
      long long v22 = &off_2537168;
    }
    char v271 = sub_F5A680(*((_DWORD *)v22 + 6));
    if (!v278) {
      goto LABEL_342;
    }
    char v310 = 7;
    strcpy((char *)&v309, "Cycling");
    long long v23 = v301;
    unint64_t v24 = 0x51B3BEA3677D46CFLL * (((char *)v301 - (unsigned char *)v300) >> 3);
    if (v273 <= v24)
    {
      if (v273 < v24)
      {
        long long v25 = (uint64_t *)((char *)v300 + 376 * v273);
        if (v301 != v25)
        {
          do
            long long v23 = sub_5ADCA8(v23 - 47);
          while (v23 != v25);
        }
        v301 = v25;
      }
    }
    else
    {
      sub_D06FD0((uint64_t **)&v300, v273 - v24);
    }
    sub_D4B418((uint64_t)__p, a1, (uint64_t)a2, (uint64_t)&v285);
    sub_C5CE5C((uint64_t)__p, (uint64_t)&v334);
    sub_CF619C(__p);
    if (!v334.__r_.__value_.__s.__data_[0])
    {
      sub_71424(9, (const std::error_condition *)&v334.__r_.__value_.__r.__words[1], v5);
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        sub_D4A2D4(5u, (char *)&v311);
        if ((SBYTE7(v312) & 0x80u) == 0) {
          long long v28 = &v311;
        }
        else {
          long long v28 = (long long *)v311;
        }
        if ((SBYTE7(v312) & 0x80u) == 0) {
          uint64_t v29 = BYTE7(v312);
        }
        else {
          uint64_t v29 = *((void *)&v311 + 1);
        }
        sub_188FC78(__p, (uint64_t)v28, v29);
        if (SBYTE7(v312) < 0) {
          operator delete((void *)v311);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v311, 3u);
        if (SBYTE7(v312) < 0) {
          operator delete((void *)v311);
        }
        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
        if (SHIBYTE(v353) < 0) {
          operator delete((void *)v352);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
LABEL_326:
      if (v334.__r_.__value_.__s.__data_[0])
      {
        std::string::size_type v97 = v334.__r_.__value_.__l.__size_;
        if (!v334.__r_.__value_.__l.__size_) {
          goto LABEL_341;
        }
        uint64_t v98 = v334.__r_.__value_.__r.__words[2];
        uint64_t v99 = (void *)v334.__r_.__value_.__l.__size_;
        if (v334.__r_.__value_.__r.__words[2] != v334.__r_.__value_.__l.__size_)
        {
          do
          {
            v98 -= 376;
            sub_402C7C(v98);
          }
          while (v98 != v97);
          uint64_t v99 = (void *)v334.__r_.__value_.__l.__size_;
        }
        v334.__r_.__value_.__r.__words[2] = v97;
      }
      else
      {
        char v100 = (void **)v335;
        if (!v335) {
          goto LABEL_341;
        }
        uint64_t v101 = (void **)v336;
        uint64_t v99 = v335;
        if (v336 != v335)
        {
          do
          {
            if (*((char *)v101 - 1) < 0) {
              operator delete(*(v101 - 3));
            }
            v101 -= 4;
          }
          while (v101 != v100);
          uint64_t v99 = v335;
        }
        int v336 = v100;
      }
      operator delete(v99);
LABEL_341:
      if (v310 < 0)
      {
        operator delete(v309);
        uint64_t v272 = v5;
        if (v277)
        {
LABEL_343:
          HIBYTE(v325.__cat_) = 7;
          strcpy((char *)&v324, "Driving");
          unint64_t v102 = v298;
          unint64_t v103 = 0x51B3BEA3677D46CFLL * (((char *)v298 - (unsigned char *)v297) >> 3);
          if (v273 <= v103)
          {
            if (v273 < v103)
            {
              __int16 v104 = (uint64_t *)((char *)v297 + 376 * v273);
              if (v298 != v104)
              {
                do
                  unint64_t v102 = sub_5ADCA8(v102 - 47);
                while (v102 != v104);
              }
              v298 = v104;
            }
          }
          else
          {
            sub_D06FD0((uint64_t **)&v297, v273 - v103);
          }
          sub_C7C7B4((uint64_t)v279, (uint64_t)&v345);
        }
LABEL_351:
        if (!v276) {
          goto LABEL_577;
        }
        HIBYTE(v338) = 7;
        strcpy((char *)&v337, "Walking");
        uint64_t v105 = (uint64_t *)*((void *)&v295 + 1);
        unint64_t v106 = 0x51B3BEA3677D46CFLL * ((uint64_t)(*((void *)&v295 + 1) - v295) >> 3);
        if (v273 <= v106)
        {
          if (v273 < v106)
          {
            uint64_t v107 = v295 + 376 * v273;
            if (*((void *)&v295 + 1) != v107)
            {
              do
                uint64_t v105 = sub_5ADCA8(v105 - 47);
              while (v105 != (uint64_t *)v107);
            }
            *((void *)&v295 + 1) = v107;
          }
        }
        else
        {
          sub_D06FD0((uint64_t **)&v295, v273 - v106);
        }
        sub_CEAD10((uint64_t)v279, (uint64_t)&v341);
        if (!v341.__r_.__value_.__s.__data_[0])
        {
          sub_71424(9, (const std::error_condition *)&v341.__r_.__value_.__r.__words[1], v5);
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)__p);
            sub_D4BE60(6u, (char *)&v311);
            if ((SBYTE7(v312) & 0x80u) == 0) {
              unint64_t v110 = &v311;
            }
            else {
              unint64_t v110 = (long long *)v311;
            }
            if ((SBYTE7(v312) & 0x80u) == 0) {
              uint64_t v111 = BYTE7(v312);
            }
            else {
              uint64_t v111 = *((void *)&v311 + 1);
            }
            sub_188FC78(__p, (uint64_t)v110, v111);
            if (SBYTE7(v312) < 0) {
              operator delete((void *)v311);
            }
            std::stringbuf::str();
            sub_7246C((uint64_t *)&v311, 3u);
            if (SBYTE7(v312) < 0) {
              operator delete((void *)v311);
            }
            *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
            if (SHIBYTE(v353) < 0) {
              operator delete((void *)v352);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
LABEL_566:
          if (v341.__r_.__value_.__s.__data_[0])
          {
            sub_C7EAC4((char **)&v341.__r_.__value_.__l.__size_);
          }
          else
          {
            uint64_t v180 = (void **)v342;
            if (v342)
            {
              __int16 v181 = v343;
              __int16 v182 = v342;
              if (v343 != v342)
              {
                do
                {
                  if (*((char *)v181 - 1) < 0) {
                    operator delete(*(v181 - 3));
                  }
                  v181 -= 4;
                }
                while (v181 != v180);
                __int16 v182 = v342;
              }
              char v343 = v180;
              operator delete(v182);
            }
          }
          if (SHIBYTE(v338) < 0)
          {
            operator delete((void *)v337);
            if (!v275) {
              goto LABEL_634;
            }
LABEL_578:
            *((unsigned char *)&v345.__r_.__value_.__s + 23) = 7;
            strcpy((char *)&v345, "Transit");
            long long v183 = v293;
            unint64_t v184 = 0xAAAAAAAAAAAAAAABLL * ((v293 - (unsigned char *)v292) >> 4);
            if (v273 <= v184)
            {
              if (v273 < v184)
              {
                char v185 = (char *)v292 + 48 * v273;
                while (v183 != v185)
                {
                  uint64_t v186 = *((void *)v183 - 3);
                  if (v186)
                  {
                    uint64_t v187 = *((void *)v183 - 2);
                    long long v188 = (void *)*((void *)v183 - 3);
                    if (v187 != v186)
                    {
                      do
                        uint64_t v187 = sub_4D4B58(v187 - 160);
                      while (v187 != v186);
                      long long v188 = (void *)*((void *)v183 - 3);
                    }
                    *((void *)v183 - 2) = v186;
                    operator delete(v188);
                  }
                  v183 -= 48;
                }
                unint64_t v293 = v185;
              }
            }
            else
            {
              sub_D50318(&v292, v273 - v184);
            }
            *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 7;
            strcpy((char *)__p, "ETAPlan");
            long long v311 = 0uLL;
            *(void *)&long long v312 = 0;
            uint64_t v189 = sub_374CDC((uint64_t)a2, (uint64_t)__p, (uint64_t *)&v311);
            *((unsigned char *)&v341.__r_.__value_.__s + 23) = 20;
            strcpy((char *)&v341, "max_num_destinations");
            unsigned int v190 = sub_31AC04(v189, (uint64_t)&v341);
            if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v341.__r_.__value_.__l.__data_);
            }
            uint64_t v191 = v311;
            if ((void)v311)
            {
              uint64_t v192 = *((void *)&v311 + 1);
              int v193 = (void *)v311;
              if (*((void *)&v311 + 1) != (void)v311)
              {
                do
                {
                  if (*(char *)(v192 - 1) < 0) {
                    operator delete(*(void **)(v192 - 24));
                  }
                  v192 -= 24;
                }
                while (v192 != v191);
                int v193 = (void *)v311;
              }
              *((void *)&v311 + 1) = v191;
              operator delete(v193);
            }
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p[0].__r_.__value_.__l.__data_);
              if (v273 > v190) {
                goto LABEL_632;
              }
            }
            else if (v273 > v190)
            {
LABEL_632:
              if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v345.__r_.__value_.__l.__data_);
              }
LABEL_634:
              memset(&v330, 0, sizeof(v330));
              sub_D06660((uint64_t)&v330, (uint64_t)v300, (uint64_t)v301, 0x51B3BEA3677D46CFLL * (((char *)v301 - (unsigned char *)v300) >> 3));
              memset(&v345, 0, sizeof(v345));
              sub_D3ECC8((uint64_t)&v345, (uint64_t)v297, (uint64_t)v298, 0x51B3BEA3677D46CFLL * (((char *)v298 - (unsigned char *)v297) >> 3));
              memset(&v334, 0, sizeof(v334));
              sub_D50FD0((uint64_t)&v334, v295, *((uint64_t *)&v295 + 1), 0x51B3BEA3677D46CFLL * ((uint64_t)(*((void *)&v295 + 1) - v295) >> 3));
              long long v337 = 0uLL;
              uint64_t v338 = 0;
              sub_D511F4((uint64_t)&v337, (uint64_t)v292, (uint64_t)v293, 0xAAAAAAAAAAAAAAABLL * ((v293 - (unsigned char *)v292) >> 4));
              *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v330.__r_.__value_.__l.__data_;
              std::string::size_type v201 = v330.__r_.__value_.__r.__words[2];
              memset(&v330, 0, sizeof(v330));
              __p[1] = v345;
              __p[0].__r_.__value_.__r.__words[2] = v201;
              memset(&v345, 0, sizeof(v345));
              long long v350 = *(_OWORD *)&v334.__r_.__value_.__l.__data_;
              std::string::size_type v202 = v334.__r_.__value_.__r.__words[2];
              memset(&v334, 0, sizeof(v334));
              long long v352 = v337;
              std::string::size_type v351 = v202;
              uint64_t v353 = v338;
              long long v337 = 0uLL;
              uint64_t v338 = 0;
              uint64_t v354 = sub_DC0848(a1);
              char v355 = v203;
              sub_C8B774((uint64_t)__p, (uint64_t)&v311);
              sub_D513F4((uint64_t **)__p);
              uint64_t v204 = v337;
              if ((void)v337)
              {
                uint64_t v205 = *((void *)&v337 + 1);
                long long v206 = (void *)v337;
                if (*((void *)&v337 + 1) != (void)v337)
                {
                  do
                  {
                    uint64_t v207 = *(void *)(v205 - 24);
                    if (v207)
                    {
                      uint64_t v208 = *(void *)(v205 - 16);
                      char v209 = *(void **)(v205 - 24);
                      if (v208 != v207)
                      {
                        do
                          uint64_t v208 = sub_4D4B58(v208 - 160);
                        while (v208 != v207);
                        char v209 = *(void **)(v205 - 24);
                      }
                      *(void *)(v205 - 16) = v207;
                      operator delete(v209);
                    }
                    v205 -= 48;
                  }
                  while (v205 != v204);
                  long long v206 = (void *)v337;
                }
                *((void *)&v337 + 1) = v204;
                operator delete(v206);
              }
              std::string::size_type v210 = v334.__r_.__value_.__r.__words[0];
              if (v334.__r_.__value_.__r.__words[0])
              {
                std::string::size_type v211 = v334.__r_.__value_.__l.__size_;
                long long v212 = (void *)v334.__r_.__value_.__r.__words[0];
                if (v334.__r_.__value_.__l.__size_ != v334.__r_.__value_.__r.__words[0])
                {
                  do
                    std::string::size_type v211 = (std::string::size_type)sub_5ADCA8((uint64_t *)(v211 - 376));
                  while (v211 != v210);
                  long long v212 = (void *)v334.__r_.__value_.__r.__words[0];
                }
                v334.__r_.__value_.__l.__size_ = v210;
                operator delete(v212);
              }
              std::string::size_type v213 = v345.__r_.__value_.__r.__words[0];
              if (v345.__r_.__value_.__r.__words[0])
              {
                std::string::size_type v214 = v345.__r_.__value_.__l.__size_;
                char v215 = (void *)v345.__r_.__value_.__r.__words[0];
                if (v345.__r_.__value_.__l.__size_ != v345.__r_.__value_.__r.__words[0])
                {
                  do
                    std::string::size_type v214 = (std::string::size_type)sub_5ADCA8((uint64_t *)(v214 - 376));
                  while (v214 != v213);
                  char v215 = (void *)v345.__r_.__value_.__r.__words[0];
                }
                v345.__r_.__value_.__l.__size_ = v213;
                operator delete(v215);
              }
              std::string::size_type v216 = v330.__r_.__value_.__r.__words[0];
              if (v330.__r_.__value_.__r.__words[0])
              {
                std::string::size_type v217 = v330.__r_.__value_.__l.__size_;
                long long v218 = (void *)v330.__r_.__value_.__r.__words[0];
                if (v330.__r_.__value_.__l.__size_ != v330.__r_.__value_.__r.__words[0])
                {
                  do
                    std::string::size_type v217 = (std::string::size_type)sub_5ADCA8((uint64_t *)(v217 - 376));
                  while (v217 != v216);
                  long long v218 = (void *)v330.__r_.__value_.__r.__words[0];
                }
                v330.__r_.__value_.__l.__size_ = v216;
                operator delete(v218);
              }
              if ((_BYTE)v311)
              {
                memset(__p, 0, sizeof(__p));
                std::string::assign(__p, "ETAResponseBuilderModule");
                LOBYTE(v327) = 1;
                std::string::size_type v219 = __p[1].__r_.__value_.__l.__size_;
                if (__p[1].__r_.__value_.__l.__size_ >= __p[1].__r_.__value_.__r.__words[2])
                {
                  std::string::size_type v220 = sub_C947F8((uint64_t *)&__p[1], "Runtime", (char *)&v327, v319);
                }
                else
                {
                  sub_C949C8((int)&__p[1].__r_.__value_.__r.__words[2], __p[1].__r_.__value_.__l.__size_, "Runtime", (char *)&v327, v319);
                  std::string::size_type v220 = v219 + 48;
                }
                __p[1].__r_.__value_.__l.__size_ = v220;
                sub_71740(9, (uint64_t)__p, v5);
                std::string::pointer v223 = __p[1].__r_.__value_.__l.__data_;
                if (__p[1].__r_.__value_.__r.__words[0])
                {
                  std::string::size_type v224 = __p[1].__r_.__value_.__l.__size_;
                  std::string::pointer v225 = __p[1].__r_.__value_.__l.__data_;
                  if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
                  {
                    do
                    {
                      if (*(char *)(v224 - 25) < 0) {
                        operator delete(*(void **)(v224 - 48));
                      }
                      v224 -= 48;
                    }
                    while ((std::string::pointer)v224 != v223);
                    std::string::pointer v225 = __p[1].__r_.__value_.__l.__data_;
                  }
                  __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v223;
                  operator delete(v225);
                }
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                }
                sub_13F2168(&v341, (char *)&v311 + 8);
              }
              else
              {
                sub_71424(9, (const std::error_condition *)((char *)&v311 + 8), v5);
                if (sub_723EC(3u))
                {
                  sub_6BAC((uint64_t)__p);
                  sub_D4F55C((char *)&v327, 18);
                  if (SHIBYTE(v328.__cat_) >= 0) {
                    long long v221 = &v327;
                  }
                  else {
                    long long v221 = v327;
                  }
                  if (SHIBYTE(v328.__cat_) >= 0) {
                    uint64_t cat_high = HIBYTE(v328.__cat_);
                  }
                  else {
                    uint64_t cat_high = *(void *)&v328.__val_;
                  }
                  sub_188FC78(__p, (uint64_t)v221, cat_high);
                  if (SHIBYTE(v328.__cat_) < 0) {
                    operator delete(v327);
                  }
                  std::stringbuf::str();
                  sub_7246C((uint64_t *)&v327, 3u);
                  if (SHIBYTE(v328.__cat_) < 0) {
                    operator delete(v327);
                  }
                  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                  if (SHIBYTE(v353) < 0) {
                    operator delete((void *)v352);
                  }
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  std::ios::~ios();
                }
                sub_D49EC0((uint64_t)&v341, (const std::error_condition *)((char *)&v311 + 8));
              }
              if ((_BYTE)v311)
              {
                sub_13F22FC((char *)&v311 + 8);
              }
              else
              {
                uint64_t v226 = *((void *)&v312 + 1);
                if (*((void *)&v312 + 1))
                {
                  uint64_t v227 = v313;
                  uint64_t v228 = (void *)*((void *)&v312 + 1);
                  if ((void)v313 != *((void *)&v312 + 1))
                  {
                    do
                    {
                      if (*(char *)(v227 - 1) < 0) {
                        operator delete(*(void **)(v227 - 24));
                      }
                      v227 -= 32;
                    }
                    while (v227 != v226);
                    uint64_t v228 = (void *)*((void *)&v312 + 1);
                  }
                  *(void *)&long long v313 = v226;
                  operator delete(v228);
                }
              }
              double v229 = sub_72688((uint64_t)v303);
              sub_D49D5C(&v330, v278, v277, v276, v275);
              sub_D54C14(a1, (uint64_t)a2, (uint64_t)&v311, v229);
              sub_D5722C(v273, (uint64_t)a2, (uint64_t)&v311, v229);
              sub_D546F4(v229, (uint64_t)&v330, (uint64_t)&v311);
              sub_71740(9, (uint64_t)&v311, v5);
              sub_377D10(a2, (uint64_t)__p);
              sub_71740(1, (uint64_t)__p, v5);
              std::string::pointer v230 = __p[1].__r_.__value_.__l.__data_;
              if (__p[1].__r_.__value_.__r.__words[0])
              {
                std::string::size_type v231 = __p[1].__r_.__value_.__l.__size_;
                std::string::pointer v232 = __p[1].__r_.__value_.__l.__data_;
                if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
                {
                  do
                  {
                    if (*(char *)(v231 - 25) < 0) {
                      operator delete(*(void **)(v231 - 48));
                    }
                    v231 -= 48;
                  }
                  while ((std::string::pointer)v231 != v230);
                  std::string::pointer v232 = __p[1].__r_.__value_.__l.__data_;
                }
                __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v230;
                operator delete(v232);
              }
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p[0].__r_.__value_.__l.__data_);
              }
              sub_C5EEF0((uint64_t)__p, (uint64_t)&v341);
              sub_13F1D90(v357, 0, 0);
              uint64_t v233 = *(void *)(a3 + 24);
              if (!v233) {
                sub_29F82C();
              }
              (*(void (**)(uint64_t, std::string *))(*(void *)v233 + 48))(v233, __p);
              sub_13F22FC(v357);
              sub_13F22FC(__p);
              uint64_t v234 = *((void *)&v312 + 1);
              if (*((void *)&v312 + 1))
              {
                uint64_t v235 = v313;
                v236 = (void *)*((void *)&v312 + 1);
                if ((void)v313 != *((void *)&v312 + 1))
                {
                  do
                  {
                    if (*(char *)(v235 - 25) < 0) {
                      operator delete(*(void **)(v235 - 48));
                    }
                    v235 -= 48;
                  }
                  while (v235 != v234);
                  v236 = (void *)*((void *)&v312 + 1);
                }
                *(void *)&long long v313 = v234;
                operator delete(v236);
              }
              if (SBYTE7(v312) < 0)
              {
                operator delete((void *)v311);
                if ((SHIBYTE(v330.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_721:
                  sub_13F22FC(&v341);
                  unint64_t v237 = (char *)v282;
                  if (v282) {
                    goto LABEL_722;
                  }
                  goto LABEL_737;
                }
              }
              else if ((SHIBYTE(v330.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_721;
              }
              operator delete(v330.__r_.__value_.__l.__data_);
              sub_13F22FC(&v341);
              unint64_t v237 = (char *)v282;
              if (v282)
              {
LABEL_722:
                v238 = v283;
                if (v283 == v237)
                {
                  char v283 = v237;
                  operator delete(v237);
                  std::error_condition v239 = (char *)v280;
                  if (!v280) {
                    goto LABEL_724;
                  }
                  goto LABEL_738;
                }
                do
                {
                  std::string v243 = (void *)*((void *)v238 - 5);
                  if (v243)
                  {
                    *((void *)v238 - 4) = v243;
                    operator delete(v243);
                  }
                  v238 -= 112;
                }
                while (v238 != v237);
                char v283 = v237;
                operator delete(v282);
                std::error_condition v239 = (char *)v280;
                if (!v280)
                {
LABEL_724:
                  if (v284[0]) {
                    goto LABEL_725;
                  }
LABEL_740:
                  v245 = (void **)v286;
                  if (v286)
                  {
                    int64_t v246 = (void **)v287[0];
                    int v242 = v286;
                    if ((void *)v287[0] != v286)
                    {
                      do
                      {
                        if (*((char *)v246 - 1) < 0) {
                          operator delete(*(v246 - 3));
                        }
                        v246 -= 4;
                      }
                      while (v246 != v245);
                      int v242 = v286;
                    }
                    v287[0] = v245;
                    goto LABEL_763;
                  }
LABEL_764:
                  if (!v288[0])
                  {
                    v253 = (void **)v290;
                    if (v290)
                    {
                      uint64_t v254 = v291;
                      int v255 = v290;
                      if (v291 != v290)
                      {
                        do
                        {
                          if (*((char *)v254 - 1) < 0) {
                            operator delete(*(v254 - 3));
                          }
                          v254 -= 4;
                        }
                        while (v254 != v253);
                        int v255 = v290;
                      }
                      v291 = v253;
                      operator delete(v255);
                    }
                  }
                  goto LABEL_773;
                }
LABEL_738:
                v244 = v281;
                if (v281 == v239)
                {
                  v281 = v239;
                  operator delete(v239);
                  if (!v284[0]) {
                    goto LABEL_740;
                  }
                }
                else
                {
                  do
                  {
                    unint64_t v247 = (void *)*((void *)v244 - 3);
                    if (v247)
                    {
                      *((void *)v244 - 2) = v247;
                      operator delete(v247);
                    }
                    uint64_t v248 = *((void *)v244 - 6);
                    if (v248)
                    {
                      uint64_t v249 = *((void *)v244 - 5);
                      char v250 = (void *)*((void *)v244 - 6);
                      if (v249 != v248)
                      {
                        do
                        {
                          __n128 v251 = *(void **)(v249 - 32);
                          if (v251)
                          {
                            *(void *)(v249 - 24) = v251;
                            operator delete(v251);
                          }
                          v249 -= 104;
                        }
                        while (v249 != v248);
                        char v250 = (void *)*((void *)v244 - 6);
                      }
                      *((void *)v244 - 5) = v248;
                      operator delete(v250);
                    }
                    std::error_condition v252 = (void *)*((void *)v244 - 11);
                    if (v252)
                    {
                      *((void *)v244 - 10) = v252;
                      operator delete(v252);
                    }
                    v244 -= 168;
                  }
                  while (v244 != v239);
                  v281 = v239;
                  operator delete(v280);
                  if (!v284[0]) {
                    goto LABEL_740;
                  }
                }
                goto LABEL_725;
              }
LABEL_737:
              std::error_condition v239 = (char *)v280;
              if (!v280) {
                goto LABEL_724;
              }
              goto LABEL_738;
            }
            sub_CDA700((uint64_t)v279, (uint64_t)&v341);
            if (v341.__r_.__value_.__s.__data_[0])
            {
              uint64_t v194 = sub_37B3A8((uint64_t)a2);
              uint64_t v195 = *(void *)v194;
              DWORD2(v337) = *(_DWORD *)(v194 + 8);
              *(void *)&long long v337 = v195;
              sub_D50548((uint64_t)&v311, (uint64_t)a2, a1, (uint64_t *)&v341.__r_.__value_.__l.__size_, &v337);
              v330.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
              *(_OWORD *)&v330.__r_.__value_.__r.__words[1] = xmmword_20E12D0;
              strcpy(v330.__r_.__value_.__l.__data_, "routing/transit/JourneyPlannerETA.json");
              sub_CD5638();
            }
            sub_71424(9, (const std::error_condition *)&v341.__r_.__value_.__r.__words[1], v5);
            if (sub_723EC(3u))
            {
              sub_6BAC((uint64_t)__p);
              sub_D4F55C((char *)&v311, 6);
              if ((SBYTE7(v312) & 0x80u) == 0) {
                int v196 = &v311;
              }
              else {
                int v196 = (long long *)v311;
              }
              if ((SBYTE7(v312) & 0x80u) == 0) {
                uint64_t v197 = BYTE7(v312);
              }
              else {
                uint64_t v197 = *((void *)&v311 + 1);
              }
              sub_188FC78(__p, (uint64_t)v196, v197);
              if (SBYTE7(v312) < 0) {
                operator delete((void *)v311);
              }
              std::stringbuf::str();
              sub_7246C((uint64_t *)&v311, 3u);
              if (SBYTE7(v312) < 0) {
                operator delete((void *)v311);
              }
              *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
              if (SHIBYTE(v353) < 0) {
                operator delete((void *)v352);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
            if (v341.__r_.__value_.__s.__data_[0])
            {
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v341.__r_.__value_.__l.__size_;
              sub_BC2EEC((void ***)__p);
            }
            else
            {
              uint64_t v198 = (void **)v342;
              if (v342)
              {
                std::error_condition v199 = v343;
                uint64_t v200 = v342;
                if (v343 != v342)
                {
                  do
                  {
                    if (*((char *)v199 - 1) < 0) {
                      operator delete(*(v199 - 3));
                    }
                    v199 -= 4;
                  }
                  while (v199 != v198);
                  uint64_t v200 = v342;
                }
                char v343 = v198;
                operator delete(v200);
              }
            }
            goto LABEL_632;
          }
LABEL_577:
          if (!v275) {
            goto LABEL_634;
          }
          goto LABEL_578;
        }
        memset(__p, 0, sizeof(__p));
        std::string::assign(__p, "SnappingModule");
        LOBYTE(v311) = 1;
        std::string::size_type v108 = __p[1].__r_.__value_.__l.__size_;
        if (__p[1].__r_.__value_.__l.__size_ >= __p[1].__r_.__value_.__r.__words[2])
        {
          std::string::size_type v109 = sub_C947F8((uint64_t *)&__p[1], "Runtime", (char *)&v311, v344);
        }
        else
        {
          sub_C949C8((int)&__p[1].__r_.__value_.__r.__words[2], __p[1].__r_.__value_.__l.__size_, "Runtime", (char *)&v311, v344);
          std::string::size_type v109 = v108 + 48;
        }
        __p[1].__r_.__value_.__l.__size_ = v109;
        sub_717B8(9, (uint64_t)&v337, (uint64_t)__p, v5);
        std::string::pointer v112 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__r.__words[0])
        {
          std::string::size_type v113 = __p[1].__r_.__value_.__l.__size_;
          std::string::pointer v114 = __p[1].__r_.__value_.__l.__data_;
          if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
          {
            do
            {
              if (*(char *)(v113 - 25) < 0) {
                operator delete(*(void **)(v113 - 48));
              }
              v113 -= 48;
            }
            while ((std::string::pointer)v113 != v112);
            std::string::pointer v114 = __p[1].__r_.__value_.__l.__data_;
          }
          __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v112;
          operator delete(v114);
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        char v356 = 0;
        char v358 = 0;
        long long v369 = 0u;
        long long v370 = 0u;
        long long v371 = 0u;
        *(void *)((char *)v368 + 5) = 0;
        long long v359 = 0u;
        long long v360 = 0u;
        long long v361 = 0u;
        long long v362 = 0u;
        long long v363 = 0u;
        long long v364 = 0u;
        long long v365 = 0u;
        long long v366 = 0u;
        int v367 = 0;
        v368[0] = 0;
        uint64_t v372 = 0x3FF0000000000000;
        uint64_t v375 = 0;
        uint64_t v373 = 0;
        uint64_t v374 = 0;
        char v376 = 5;
        long long v377 = 0u;
        long long v378 = 0u;
        long long v379 = 0u;
        int v380 = 0x7FFFFFFF;
        uint64_t v385 = 0;
        uint64_t v386 = 0;
        long long v381 = 0u;
        long long v382 = 0u;
        long long v383 = 0u;
        memset(v384, 0, sizeof(v384));
        uint64_t v387 = -1;
        int v388 = 0x7FFFFFFF;
        uint64_t v389 = 0;
        uint64_t v390 = -1;
        int v391 = -1;
        char v392 = 0;
        uint64_t v324 = 0;
        uint64_t v309 = 0;
        sub_D4D210((uint64_t)&v311, a1, (uint64_t *)&v341.__r_.__value_.__l.__size_, a2, (uint64_t)__p, v271, &v324, &v309, 0);
        sub_CDE1D8();
        uint64_t v115 = (char *)v314;
        if (v314)
        {
          uint64_t v116 = v315;
          uint64_t v117 = v314;
          if (v315 != v314)
          {
            unint64_t v118 = (char *)v315;
            do
            {
              long long v120 = (void *)*((void *)v118 - 5);
              v118 -= 40;
              uint64_t v119 = v120;
              if (v120)
              {
                *(v116 - 4) = v119;
                operator delete(v119);
              }
              uint64_t v116 = v118;
            }
            while (v118 != v115);
            uint64_t v117 = v314;
          }
          v315 = v115;
          operator delete(v117);
        }
        uint64_t v121 = v313;
        if ((void)v313)
        {
          uint64_t v122 = *((void *)&v313 + 1);
          uint64_t v123 = (void *)v313;
          if (*((void *)&v313 + 1) != (void)v313)
          {
            uint64_t v124 = *((void *)&v313 + 1);
            do
            {
              unint64_t v126 = *(void **)(v124 - 32);
              v124 -= 32;
              uint64_t v125 = v126;
              if (v126)
              {
                *(void *)(v122 - 24) = v125;
                operator delete(v125);
              }
              uint64_t v122 = v124;
            }
            while (v124 != v121);
            uint64_t v123 = (void *)v313;
          }
          *((void *)&v313 + 1) = v121;
          operator delete(v123);
        }
        if ((void)v311)
        {
          *((void *)&v311 + 1) = v311;
          operator delete((void *)v311);
        }
        if (!v330.__r_.__value_.__s.__data_[0])
        {
          sub_71424(9, (const std::error_condition *)&v330.__r_.__value_.__r.__words[1], v5);
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)&v311);
            sub_D4BE60(7u, (char *)&v345);
            if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v130 = &v345;
            }
            else {
              unint64_t v130 = (std::string *)v345.__r_.__value_.__r.__words[0];
            }
            if ((v345.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v131 = HIBYTE(v345.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v131 = v345.__r_.__value_.__l.__size_;
            }
            sub_188FC78(&v311, (uint64_t)v130, v131);
            if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v345.__r_.__value_.__l.__data_);
            }
            std::stringbuf::str();
            sub_7246C((uint64_t *)&v345, 3u);
            if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v345.__r_.__value_.__l.__data_);
            }
            if (v317 < 0) {
              operator delete(v316);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
LABEL_535:
          if (v330.__r_.__value_.__s.__data_[0])
          {
            std::string::size_type v166 = v330.__r_.__value_.__l.__size_;
            if (v330.__r_.__value_.__l.__size_)
            {
              unint64_t v167 = (void **)v330.__r_.__value_.__r.__words[2];
              unint64_t v168 = (void *)v330.__r_.__value_.__l.__size_;
              if (v330.__r_.__value_.__r.__words[2] == v330.__r_.__value_.__l.__size_)
              {
LABEL_561:
                v330.__r_.__value_.__r.__words[2] = v166;
LABEL_564:
                operator delete(v168);
                goto LABEL_565;
              }
              unint64_t v169 = (void **)v330.__r_.__value_.__r.__words[2];
              while (1)
              {
                unint64_t v172 = (void **)*(v169 - 3);
                v169 -= 3;
                unint64_t v171 = v172;
                if (!v172) {
                  goto LABEL_541;
                }
                unint64_t v173 = (void **)*(v167 - 2);
                unint64_t v170 = v171;
                if (v173 != v171) {
                  break;
                }
LABEL_540:
                *(v167 - 2) = v171;
                operator delete(v170);
LABEL_541:
                unint64_t v167 = v169;
                if (v169 == (void **)v166)
                {
                  unint64_t v168 = (void *)v330.__r_.__value_.__l.__size_;
                  goto LABEL_561;
                }
              }
              while (1)
              {
                if (*((char *)v173 - 1) < 0)
                {
                  operator delete(*(v173 - 3));
                  unint64_t v174 = v173 - 15;
                  unint64_t v175 = *(v173 - 15);
                  if (v175)
                  {
LABEL_551:
                    uint64_t v176 = (uint64_t)*(v173 - 14);
                    unint64_t v177 = v175;
                    if ((void *)v176 != v175)
                    {
                      do
                        uint64_t v176 = sub_3AFFFC(v176 - 1056);
                      while ((void *)v176 != v175);
                      unint64_t v177 = *v174;
                    }
                    *(v173 - 14) = v175;
                    operator delete(v177);
                  }
                }
                else
                {
                  unint64_t v174 = v173 - 15;
                  unint64_t v175 = *(v173 - 15);
                  if (v175) {
                    goto LABEL_551;
                  }
                }
                unint64_t v173 = v174;
                if (v174 == v171)
                {
                  unint64_t v170 = *v169;
                  uint64_t v5 = v272;
                  goto LABEL_540;
                }
              }
            }
          }
          else
          {
            unint64_t v178 = (void **)v331;
            if (v331)
            {
              uint64_t v179 = v332;
              unint64_t v168 = v331;
              if (v332 != v331)
              {
                do
                {
                  if (*((char *)v179 - 1) < 0) {
                    operator delete(*(v179 - 3));
                  }
                  v179 -= 4;
                }
                while (v179 != v178);
                unint64_t v168 = v331;
              }
              v332 = v178;
              goto LABEL_564;
            }
          }
LABEL_565:
          sub_4BCC2C((uint64_t)__p);
          goto LABEL_566;
        }
        sub_D4CD1C((uint64_t)&v332, (uint64_t)&v311);
        sub_717B8(9, (uint64_t)&v337, (uint64_t)&v311, v5);
        uint64_t v127 = *((void *)&v312 + 1);
        if (*((void *)&v312 + 1))
        {
          uint64_t v128 = v313;
          uint64_t v129 = (void *)*((void *)&v312 + 1);
          if ((void)v313 != *((void *)&v312 + 1))
          {
            do
            {
              if (*(char *)(v128 - 25) < 0) {
                operator delete(*(void **)(v128 - 48));
              }
              v128 -= 48;
            }
            while (v128 != v127);
            uint64_t v129 = (void *)*((void *)&v312 + 1);
          }
          *(void *)&long long v313 = v127;
          operator delete(v129);
        }
        if (SBYTE7(v312) < 0) {
          operator delete((void *)v311);
        }
        *(void *)&long long v311 = &v330.__r_.__value_.__l.__size_;
        *((void *)&v311 + 1) = a2;
        *(void *)&long long v312 = __p;
        sub_D4DE14((uint64_t)&v312 + 8, a1, (uint64_t)a2);
        sub_CE6CF8((uint64_t)&v311, (uint64_t)&v345);
        if (v322)
        {
          uint64_t v323 = v322;
          operator delete(v322);
        }
        if (v320)
        {
          uint64_t v321 = v320;
          operator delete(v320);
        }
        if (v345.__r_.__value_.__s.__data_[0])
        {
          sub_D4D0A0((double *)&v347, (uint64_t)&v311);
          sub_71740(9, (uint64_t)&v311, v5);
          uint64_t v132 = *((void *)&v312 + 1);
          if (*((void *)&v312 + 1))
          {
            uint64_t v133 = v313;
            unint64_t v134 = (void *)*((void *)&v312 + 1);
            if ((void)v313 != *((void *)&v312 + 1))
            {
              do
              {
                if (*(char *)(v133 - 25) < 0) {
                  operator delete(*(void **)(v133 - 48));
                }
                v133 -= 48;
              }
              while (v133 != v132);
              unint64_t v134 = (void *)*((void *)&v312 + 1);
            }
            *(void *)&long long v313 = v132;
            operator delete(v134);
          }
          if (SBYTE7(v312) < 0) {
            operator delete((void *)v311);
          }
          sub_D4ED98((uint64_t)&v311, (uint64_t **)&v345.__r_.__value_.__l.__size_, a1, (uint64_t)a2);
          sub_C8C374((uint64_t)&v311, (uint64_t)&v334);
          sub_D06440((uint64_t)&v311);
          if (v334.__r_.__value_.__s.__data_[0])
          {
            long long v312 = 0u;
            long long v313 = 0u;
            long long v311 = 0u;
            std::string::assign((std::string *)&v311, "ETAForSearchResponseBuilderModule");
            LOBYTE(v327) = 1;
            uint64_t v137 = v313;
            if ((unint64_t)v313 >= *((void *)&v313 + 1))
            {
              uint64_t v138 = sub_C947F8((uint64_t *)&v312 + 1, "Runtime", (char *)&v327, (uint64_t *)&v336);
            }
            else
            {
              sub_C949C8((int)&v313 + 8, v313, "Runtime", (char *)&v327, (uint64_t *)&v336);
              uint64_t v138 = v137 + 48;
            }
            *(void *)&long long v313 = v138;
            sub_717B8(9, (uint64_t)&v337, (uint64_t)&v311, v5);
            uint64_t v141 = *((void *)&v312 + 1);
            if (*((void *)&v312 + 1))
            {
              uint64_t v142 = v313;
              unsigned __int8 v143 = (void *)*((void *)&v312 + 1);
              if ((void)v313 != *((void *)&v312 + 1))
              {
                do
                {
                  if (*(char *)(v142 - 25) < 0) {
                    operator delete(*(void **)(v142 - 48));
                  }
                  v142 -= 48;
                }
                while (v142 != v141);
                unsigned __int8 v143 = (void *)*((void *)&v312 + 1);
              }
              *(void *)&long long v313 = v141;
              operator delete(v143);
            }
            if (SBYTE7(v312) < 0) {
              operator delete((void *)v311);
            }
            uint64_t v144 = (uint64_t *)v295;
            if ((void)v295)
            {
              uint64_t v145 = (uint64_t *)*((void *)&v295 + 1);
              unint64_t v146 = (void *)v295;
              if (*((void *)&v295 + 1) != (void)v295)
              {
                do
                  uint64_t v145 = sub_5ADCA8(v145 - 47);
                while (v145 != v144);
                unint64_t v146 = (void *)v295;
              }
              *((void *)&v295 + 1) = v144;
              operator delete(v146);
            }
            long long v295 = *(_OWORD *)&v334.__r_.__value_.__r.__words[1];
            uint64_t v296 = v335;
            uint64_t v335 = 0;
            *(_OWORD *)&v334.__r_.__value_.__r.__words[1] = 0uLL;
          }
          else
          {
            sub_71424(9, (const std::error_condition *)&v334.__r_.__value_.__r.__words[1], v5);
            if (sub_723EC(3u))
            {
              sub_6BAC((uint64_t)&v311);
              sub_D4BE60(0x10u, (char *)&v327);
              if (SHIBYTE(v328.__cat_) >= 0) {
                long long v139 = &v327;
              }
              else {
                long long v139 = v327;
              }
              if (SHIBYTE(v328.__cat_) >= 0) {
                uint64_t v140 = HIBYTE(v328.__cat_);
              }
              else {
                uint64_t v140 = *(void *)&v328.__val_;
              }
              sub_188FC78(&v311, (uint64_t)v139, v140);
              if (SHIBYTE(v328.__cat_) < 0) {
                operator delete(v327);
              }
              std::stringbuf::str();
              sub_7246C((uint64_t *)&v327, 3u);
              if (SHIBYTE(v328.__cat_) < 0) {
                operator delete(v327);
              }
              sub_111ECAC((uint64_t)&v311);
            }
          }
          if (v334.__r_.__value_.__s.__data_[0])
          {
            std::string::size_type v147 = v334.__r_.__value_.__l.__size_;
            if (!v334.__r_.__value_.__l.__size_) {
              goto LABEL_505;
            }
            long long v148 = (uint64_t *)v334.__r_.__value_.__r.__words[2];
            unint64_t v149 = (void *)v334.__r_.__value_.__l.__size_;
            if (v334.__r_.__value_.__r.__words[2] != v334.__r_.__value_.__l.__size_)
            {
              do
              {
                v148 -= 47;
                sub_5ADCA8(v148);
              }
              while (v148 != (uint64_t *)v147);
              unint64_t v149 = (void *)v334.__r_.__value_.__l.__size_;
            }
            v334.__r_.__value_.__r.__words[2] = v147;
          }
          else
          {
            int v150 = (void **)v335;
            if (!v335) {
              goto LABEL_505;
            }
            long long v151 = (void **)v336;
            unint64_t v149 = v335;
            if (v336 != v335)
            {
              do
              {
                if (*((char *)v151 - 1) < 0) {
                  operator delete(*(v151 - 3));
                }
                v151 -= 4;
              }
              while (v151 != v150);
              unint64_t v149 = v335;
            }
            int v336 = v150;
          }
          operator delete(v149);
        }
        else
        {
          sub_71424(9, (const std::error_condition *)&v345.__r_.__value_.__r.__words[1], v5);
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)&v311);
            sub_D4BE60(0xEu, (char *)&v334);
            if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int64_t v135 = &v334;
            }
            else {
              int64_t v135 = (std::string *)v334.__r_.__value_.__r.__words[0];
            }
            if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v136 = HIBYTE(v334.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v136 = v334.__r_.__value_.__l.__size_;
            }
            sub_188FC78(&v311, (uint64_t)v135, v136);
            if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v334.__r_.__value_.__l.__data_);
            }
            std::stringbuf::str();
            sub_7246C((uint64_t *)&v334, 3u);
            if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v334.__r_.__value_.__l.__data_);
            }
            if (v317 < 0) {
              operator delete(v316);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
        }
LABEL_505:
        if (!v345.__r_.__value_.__s.__data_[0])
        {
          long long v164 = (void **)v346;
          if (!v346) {
            goto LABEL_535;
          }
          unint64_t v165 = v347;
          uint64_t v154 = v346;
          if (v347 != v346)
          {
            do
            {
              if (*((char *)v165 - 1) < 0) {
                operator delete(*(v165 - 3));
              }
              v165 -= 4;
            }
            while (v165 != v164);
            uint64_t v154 = v346;
          }
          v347 = v164;
          goto LABEL_534;
        }
        std::string::size_type v152 = v345.__r_.__value_.__l.__size_;
        if (!v345.__r_.__value_.__l.__size_) {
          goto LABEL_535;
        }
        uint64_t v153 = (void **)v345.__r_.__value_.__r.__words[2];
        uint64_t v154 = (void *)v345.__r_.__value_.__l.__size_;
        if (v345.__r_.__value_.__r.__words[2] == v345.__r_.__value_.__l.__size_)
        {
LABEL_531:
          v345.__r_.__value_.__r.__words[2] = v152;
LABEL_534:
          operator delete(v154);
          goto LABEL_535;
        }
        int v155 = (void **)v345.__r_.__value_.__r.__words[2];
        while (1)
        {
          uint64_t v158 = (void **)*(v155 - 3);
          v155 -= 3;
          long long v157 = v158;
          if (!v158) {
            goto LABEL_511;
          }
          uint64_t v159 = (void **)*(v153 - 2);
          uint64_t v156 = v157;
          if (v159 != v157) {
            break;
          }
LABEL_510:
          *(v153 - 2) = v157;
          operator delete(v156);
LABEL_511:
          uint64_t v153 = v155;
          if (v155 == (void **)v152)
          {
            uint64_t v154 = (void *)v345.__r_.__value_.__l.__size_;
            goto LABEL_531;
          }
        }
        while (1)
        {
          if (*((char *)v159 - 1) < 0)
          {
            operator delete(*(v159 - 3));
            long long v160 = v159 - 15;
            char v161 = *(v159 - 15);
            if (v161)
            {
LABEL_521:
              uint64_t v162 = (uint64_t)*(v159 - 14);
              char v163 = v161;
              if ((void *)v162 != v161)
              {
                do
                  uint64_t v162 = sub_3AFFFC(v162 - 1056);
                while ((void *)v162 != v161);
                char v163 = *v160;
              }
              *(v159 - 14) = v161;
              operator delete(v163);
            }
          }
          else
          {
            long long v160 = v159 - 15;
            char v161 = *(v159 - 15);
            if (v161) {
              goto LABEL_521;
            }
          }
          uint64_t v159 = v160;
          if (v160 == v157)
          {
            uint64_t v156 = *v155;
            uint64_t v5 = v272;
            goto LABEL_510;
          }
        }
      }
LABEL_342:
      uint64_t v272 = v5;
      if (v277) {
        goto LABEL_343;
      }
      goto LABEL_351;
    }
    memset(__p, 0, sizeof(__p));
    std::string::assign(__p, "CyclingCoverageCheckModule");
    LOBYTE(v311) = 1;
    std::string::size_type v26 = __p[1].__r_.__value_.__l.__size_;
    if (__p[1].__r_.__value_.__l.__size_ >= __p[1].__r_.__value_.__r.__words[2])
    {
      std::string::size_type v27 = sub_C947F8((uint64_t *)&__p[1], "Runtime", (char *)&v311, (uint64_t *)&v336);
    }
    else
    {
      sub_C949C8((int)&__p[1].__r_.__value_.__r.__words[2], __p[1].__r_.__value_.__l.__size_, "Runtime", (char *)&v311, (uint64_t *)&v336);
      std::string::size_type v27 = v26 + 48;
    }
    __p[1].__r_.__value_.__l.__size_ = v27;
    sub_71740(9, (uint64_t)__p, v5);
    std::string::pointer v30 = __p[1].__r_.__value_.__l.__data_;
    if (__p[1].__r_.__value_.__r.__words[0])
    {
      std::string::size_type v31 = __p[1].__r_.__value_.__l.__size_;
      std::string::pointer v32 = __p[1].__r_.__value_.__l.__data_;
      if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v31 - 25) < 0) {
            operator delete(*(void **)(v31 - 48));
          }
          v31 -= 48;
        }
        while ((std::string::pointer)v31 != v30);
        std::string::pointer v32 = __p[1].__r_.__value_.__l.__data_;
      }
      __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v30;
      operator delete(v32);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    sub_D04064((uint64_t)__p, a1, (uint64_t *)&v334.__r_.__value_.__l.__size_, (uint64_t)a2);
    sub_C6A41C((uint64_t)__p, (uint64_t)&v341);
    std::string::size_type v33 = __p[1].__r_.__value_.__r.__words[2];
    if (__p[1].__r_.__value_.__r.__words[2])
    {
      uint64_t v34 = v350;
      long long v35 = (void *)__p[1].__r_.__value_.__r.__words[2];
      if ((void)v350 != __p[1].__r_.__value_.__r.__words[2])
      {
        do
        {
          long long v36 = *(void **)(v34 - 40);
          if (v36)
          {
            *(void *)(v34 - 32) = v36;
            operator delete(v36);
          }
          v34 -= 112;
        }
        while (v34 != v33);
        long long v35 = (void *)__p[1].__r_.__value_.__r.__words[2];
      }
      *(void *)&long long v350 = v33;
      operator delete(v35);
    }
    std::string::size_type v37 = __p[0].__r_.__value_.__l.__size_;
    if (__p[0].__r_.__value_.__l.__size_)
    {
      std::string::size_type v38 = __p[0].__r_.__value_.__r.__words[2];
      long long v39 = (void *)__p[0].__r_.__value_.__l.__size_;
      if (__p[0].__r_.__value_.__r.__words[2] != __p[0].__r_.__value_.__l.__size_)
      {
        do
        {
          long long v40 = *(void **)(v38 - 24);
          if (v40)
          {
            *(void *)(v38 - 16) = v40;
            operator delete(v40);
          }
          uint64_t v41 = *(void *)(v38 - 48);
          if (v41)
          {
            uint64_t v42 = *(void *)(v38 - 40);
            long long v43 = *(void **)(v38 - 48);
            if (v42 != v41)
            {
              do
              {
                uint64_t v44 = *(void **)(v42 - 32);
                if (v44)
                {
                  *(void *)(v42 - 24) = v44;
                  operator delete(v44);
                }
                v42 -= 104;
              }
              while (v42 != v41);
              long long v43 = *(void **)(v38 - 48);
            }
            *(void *)(v38 - 40) = v41;
            operator delete(v43);
          }
          long long v45 = *(void **)(v38 - 88);
          if (v45)
          {
            *(void *)(v38 - 80) = v45;
            operator delete(v45);
          }
          v38 -= 168;
        }
        while (v38 != v37);
        long long v39 = (void *)__p[0].__r_.__value_.__l.__size_;
      }
      __p[0].__r_.__value_.__r.__words[2] = v37;
      operator delete(v39);
    }
    if (!v341.__r_.__value_.__s.__data_[0])
    {
      sub_71424(9, (const std::error_condition *)&v341.__r_.__value_.__r.__words[1], v5);
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        sub_D4A2D4(6u, (char *)&v311);
        if ((SBYTE7(v312) & 0x80u) == 0) {
          long long v48 = &v311;
        }
        else {
          long long v48 = (long long *)v311;
        }
        if ((SBYTE7(v312) & 0x80u) == 0) {
          uint64_t v49 = BYTE7(v312);
        }
        else {
          uint64_t v49 = *((void *)&v311 + 1);
        }
        sub_188FC78(__p, (uint64_t)v48, v49);
        if (SBYTE7(v312) < 0) {
          operator delete((void *)v311);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v311, 3u);
        if (SBYTE7(v312) < 0) {
          operator delete((void *)v311);
        }
        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
        if (SHIBYTE(v353) < 0) {
          operator delete((void *)v352);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      goto LABEL_316;
    }
    memset(__p, 0, sizeof(__p));
    std::string::assign(__p, "SnappingModule");
    LOBYTE(v311) = 1;
    std::string::size_type v46 = __p[1].__r_.__value_.__l.__size_;
    if (__p[1].__r_.__value_.__l.__size_ >= __p[1].__r_.__value_.__r.__words[2])
    {
      std::string::size_type v47 = sub_C947F8((uint64_t *)&__p[1], "Runtime", (char *)&v311, v344);
    }
    else
    {
      sub_C949C8((int)&__p[1].__r_.__value_.__r.__words[2], __p[1].__r_.__value_.__l.__size_, "Runtime", (char *)&v311, v344);
      std::string::size_type v47 = v46 + 48;
    }
    __p[1].__r_.__value_.__l.__size_ = v47;
    sub_717B8(9, (uint64_t)&v309, (uint64_t)__p, v5);
    std::string::pointer v50 = __p[1].__r_.__value_.__l.__data_;
    if (__p[1].__r_.__value_.__r.__words[0])
    {
      std::string::size_type v51 = __p[1].__r_.__value_.__l.__size_;
      std::string::pointer v52 = __p[1].__r_.__value_.__l.__data_;
      if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
      {
        do
        {
          if (*(char *)(v51 - 25) < 0) {
            operator delete(*(void **)(v51 - 48));
          }
          v51 -= 48;
        }
        while ((std::string::pointer)v51 != v50);
        std::string::pointer v52 = __p[1].__r_.__value_.__l.__data_;
      }
      __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v50;
      operator delete(v52);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    sub_D0470C((uint64_t)__p, a1, (uint64_t)&v341.__r_.__value_.__l.__size_, (uint64_t)a2, v271);
    sub_C5F28C(__p, (uint64_t)&v337);
    std::string::size_type v53 = *((void *)&v350 + 1);
    if (*((void *)&v350 + 1))
    {
      std::string::size_type v54 = v351;
      uint64_t v55 = (void *)*((void *)&v350 + 1);
      if (v351 != *((void *)&v350 + 1))
      {
        std::string::size_type v56 = v351;
        do
        {
          long long v58 = *(void **)(v56 - 40);
          v56 -= 40;
          char v57 = v58;
          if (v58)
          {
            *(void *)(v54 - 32) = v57;
            operator delete(v57);
          }
          std::string::size_type v54 = v56;
        }
        while (v56 != v53);
        uint64_t v55 = (void *)*((void *)&v350 + 1);
      }
      std::string::size_type v351 = v53;
      operator delete(v55);
    }
    std::string::size_type v59 = __p[1].__r_.__value_.__l.__size_;
    if (__p[1].__r_.__value_.__l.__size_)
    {
      std::string::size_type v60 = __p[1].__r_.__value_.__r.__words[2];
      int v61 = (void *)__p[1].__r_.__value_.__l.__size_;
      if (__p[1].__r_.__value_.__r.__words[2] != __p[1].__r_.__value_.__l.__size_)
      {
        std::string::size_type v62 = __p[1].__r_.__value_.__r.__words[2];
        do
        {
          int v64 = *(void **)(v62 - 32);
          v62 -= 32;
          uint64_t v63 = v64;
          if (v64)
          {
            *(void *)(v60 - 24) = v63;
            operator delete(v63);
          }
          std::string::size_type v60 = v62;
        }
        while (v62 != v59);
        int v61 = (void *)__p[1].__r_.__value_.__l.__size_;
      }
      __p[1].__r_.__value_.__r.__words[2] = v59;
      operator delete(v61);
    }
    if (__p[0].__r_.__value_.__r.__words[0])
    {
      __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if ((_BYTE)v337)
    {
      memset(__p, 0, sizeof(__p));
      std::string::assign(__p, "CyclingPathFindingModule");
      LOBYTE(v311) = 1;
      std::string::size_type v65 = __p[1].__r_.__value_.__l.__size_;
      if (__p[1].__r_.__value_.__l.__size_ >= __p[1].__r_.__value_.__r.__words[2])
      {
        std::string::size_type v66 = sub_C947F8((uint64_t *)&__p[1], "Runtime", (char *)&v311, v340);
      }
      else
      {
        sub_C949C8((int)&__p[1].__r_.__value_.__r.__words[2], __p[1].__r_.__value_.__l.__size_, "Runtime", (char *)&v311, v340);
        std::string::size_type v66 = v65 + 48;
      }
      __p[1].__r_.__value_.__l.__size_ = v66;
      sub_717B8(9, (uint64_t)&v309, (uint64_t)__p, v5);
      std::string::pointer v69 = __p[1].__r_.__value_.__l.__data_;
      if (__p[1].__r_.__value_.__r.__words[0])
      {
        std::string::size_type v70 = __p[1].__r_.__value_.__l.__size_;
        std::string::pointer v71 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v70 - 25) < 0) {
              operator delete(*(void **)(v70 - 48));
            }
            v70 -= 48;
          }
          while ((std::string::pointer)v70 != v69);
          std::string::pointer v71 = __p[1].__r_.__value_.__l.__data_;
        }
        __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v69;
        operator delete(v71);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      v306 = 0;
      v307 = 0;
      uint64_t v308 = 0;
      sub_D4B7D4(&v306, *((uint64_t *)&v337 + 1), v338, 0xAAAAAAAAAAAAAAABLL * ((v338 - *((void *)&v337 + 1)) >> 3));
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v306;
      uint64_t v72 = sub_37B3A8((uint64_t)a2);
      std::string::size_type v73 = *(void *)v72;
      LODWORD(__p[0].__r_.__value_.__r.__words[2]) = *(_DWORD *)(v72 + 8);
      __p[0].__r_.__value_.__l.__size_ = v73;
      __p[0].__r_.__value_.__s.__data_[20] = 0;
      __p[1].__r_.__value_.__s.__data_[8] = 0;
      __p[1].__r_.__value_.__r.__words[2] = (std::string::size_type)a2;
      sub_C87D80((uint64_t)__p, (uint64_t)&v330);
      if (v330.__r_.__value_.__s.__data_[0])
      {
        *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2] = 0u;
        *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1] = 0u;
        qmemcpy(__p, "CyclingETAModule", 16);
        *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 16;
        v345.__r_.__value_.__s.__data_[0] = 1;
        LODWORD(v311) = 0;
        __p[1].__r_.__value_.__l.__size_ = sub_CF8370((uint64_t *)&__p[1], "Runtime", (char *)&v345, v333, (int *)&v311);
        sub_71740(9, (uint64_t)__p, v5);
        std::string::pointer v74 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__r.__words[0])
        {
          std::string::size_type v75 = __p[1].__r_.__value_.__l.__size_;
          std::string::pointer v76 = __p[1].__r_.__value_.__l.__data_;
          if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
          {
            do
            {
              if (*(char *)(v75 - 25) < 0) {
                operator delete(*(void **)(v75 - 48));
              }
              v75 -= 48;
            }
            while ((std::string::pointer)v75 != v74);
            std::string::pointer v76 = __p[1].__r_.__value_.__l.__data_;
          }
          __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v74;
          operator delete(v76);
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v306;
        __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v330.__r_.__value_.__l.__size_;
        __p[0].__r_.__value_.__r.__words[2] = 0;
        LODWORD(__p[1].__r_.__value_.__l.__data_) = 0;
        __p[1].__r_.__value_.__s.__data_[4] = 0;
        *(_OWORD *)&__p[1].__r_.__value_.__r.__words[1] = 0uLL;
        long long v350 = (unint64_t)a2;
        sub_CBF2C4((char ***)__p, (uint64_t)&v345);
        if (v345.__r_.__value_.__s.__data_[0])
        {
          sub_D4B190(v348, (uint64_t)__p);
          sub_71740(9, (uint64_t)__p, v5);
          sub_A3A4((uint64_t)__p);
          char v356 = 0;
          char v358 = 0;
          long long v369 = 0u;
          long long v370 = 0u;
          long long v371 = 0u;
          *(void *)((char *)v368 + 5) = 0;
          long long v359 = 0u;
          long long v360 = 0u;
          long long v361 = 0u;
          long long v362 = 0u;
          long long v363 = 0u;
          long long v364 = 0u;
          long long v365 = 0u;
          long long v366 = 0u;
          int v367 = 0;
          v368[0] = 0;
          uint64_t v372 = 0x3FF0000000000000;
          uint64_t v375 = 0;
          uint64_t v373 = 0;
          uint64_t v374 = 0;
          char v376 = 5;
          long long v377 = 0u;
          long long v378 = 0u;
          long long v379 = 0u;
          int v380 = 0x7FFFFFFF;
          uint64_t v385 = 0;
          uint64_t v386 = 0;
          long long v381 = 0u;
          long long v382 = 0u;
          long long v383 = 0u;
          memset(v384, 0, sizeof(v384));
          uint64_t v387 = -1;
          int v388 = 0x7FFFFFFF;
          uint64_t v389 = 0;
          uint64_t v390 = -1;
          int v391 = -1;
          char v392 = 0;
          sub_D4B248(&v311, a1, (uint64_t)a2, (uint64_t)__p, (uint64_t)&v345.__r_.__value_.__l.__size_);
          sub_C65390((uint64_t)&v311, (uint64_t)&v327);
          sub_CF99A8(&v318);
          if ((_BYTE)v327)
          {
            sub_CF8A40(v329, (uint64_t)&v311);
            sub_71740(9, (uint64_t)&v311, v5);
            sub_A3A4((uint64_t)&v311);
            sub_D05734((uint64_t)&v311, (uint64_t **)&v328, a1, (uint64_t)a2);
            sub_C86710((uint64_t)&v311, (uint64_t)&v324);
            sub_D06440((uint64_t)&v311);
            if ((_BYTE)v324)
            {
              sub_D4B290(v326, (uint64_t)&v311);
              sub_717B8(9, (uint64_t)&v309, (uint64_t)&v311, v5);
              sub_A3A4((uint64_t)&v311);
              sub_D4B390(&v300, (uint64_t)&v325);
            }
            else
            {
              sub_71424(9, &v325, v5);
              if (sub_723EC(3u))
              {
                sub_6BAC((uint64_t)&v311);
                sub_D4A2D4(0x10u, (char *)v304);
                if ((v305 & 0x80u) == 0) {
                  long long v83 = v304;
                }
                else {
                  long long v83 = (void **)v304[0];
                }
                if ((v305 & 0x80u) == 0) {
                  uint64_t v84 = v305;
                }
                else {
                  uint64_t v84 = (uint64_t)v304[1];
                }
                sub_188FC78(&v311, (uint64_t)v83, v84);
                if ((char)v305 < 0) {
                  operator delete(v304[0]);
                }
                std::stringbuf::str();
                sub_7246C((uint64_t *)v304, 3u);
                if ((char)v305 < 0) {
                  operator delete(v304[0]);
                }
                sub_111ECAC((uint64_t)&v311);
              }
            }
            sub_D03AD8((uint64_t)&v324);
          }
          else
          {
            sub_71424(9, &v328, v5);
            if (sub_723EC(3u))
            {
              sub_6BAC((uint64_t)&v311);
              sub_D4A2D4(0xEu, (char *)&v324);
              if (SHIBYTE(v325.__cat_) >= 0) {
                long long v81 = &v324;
              }
              else {
                long long v81 = v324;
              }
              if (SHIBYTE(v325.__cat_) >= 0) {
                uint64_t v82 = HIBYTE(v325.__cat_);
              }
              else {
                uint64_t v82 = *(void *)&v325.__val_;
              }
              sub_188FC78(&v311, (uint64_t)v81, v82);
              if (SHIBYTE(v325.__cat_) < 0) {
                operator delete(v324);
              }
              std::stringbuf::str();
              sub_7246C((uint64_t *)&v324, 3u);
              if (SHIBYTE(v325.__cat_) < 0) {
                operator delete(v324);
              }
              sub_111ECAC((uint64_t)&v311);
            }
          }
          sub_CF19B0((uint64_t)&v327);
          sub_4BCC2C((uint64_t)__p);
        }
        else
        {
          sub_71424(9, (const std::error_condition *)&v345.__r_.__value_.__r.__words[1], v5);
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)__p);
            sub_D4A2D4(0xCu, (char *)&v311);
            if ((SBYTE7(v312) & 0x80u) == 0) {
              long long v79 = &v311;
            }
            else {
              long long v79 = (long long *)v311;
            }
            if ((SBYTE7(v312) & 0x80u) == 0) {
              uint64_t v80 = BYTE7(v312);
            }
            else {
              uint64_t v80 = *((void *)&v311 + 1);
            }
            sub_188FC78(__p, (uint64_t)v79, v80);
            if (SBYTE7(v312) < 0) {
              operator delete((void *)v311);
            }
            std::stringbuf::str();
            sub_7246C((uint64_t *)&v311, 3u);
            if (SBYTE7(v312) < 0) {
              operator delete((void *)v311);
            }
            sub_111ECAC((uint64_t)__p);
          }
        }
        sub_CC1854((uint64_t)&v345);
      }
      else
      {
        sub_71424(9, (const std::error_condition *)&v330.__r_.__value_.__r.__words[1], v5);
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)__p);
          sub_D4A2D4(9u, (char *)&v311);
          if ((SBYTE7(v312) & 0x80u) == 0) {
            uint64_t v77 = &v311;
          }
          else {
            uint64_t v77 = (long long *)v311;
          }
          if ((SBYTE7(v312) & 0x80u) == 0) {
            uint64_t v78 = BYTE7(v312);
          }
          else {
            uint64_t v78 = *((void *)&v311 + 1);
          }
          sub_188FC78(__p, (uint64_t)v77, v78);
          if (SBYTE7(v312) < 0) {
            operator delete((void *)v311);
          }
          std::stringbuf::str();
          sub_7246C((uint64_t *)&v311, 3u);
          if (SBYTE7(v312) < 0) {
            operator delete((void *)v311);
          }
          sub_111ECAC((uint64_t)__p);
        }
      }
      sub_C8ACB8((uint64_t)&v330);
      long long v85 = (void ***)v306;
      if (v306)
      {
        uint64_t v86 = v306;
        if (v307 != v306)
        {
          uint64_t v87 = v307 - 3;
          do
          {
            if (*v87)
            {
              sub_C64384((uint64_t)v87, *v87);
              operator delete(*v87);
            }
            BOOL v88 = v87 == v85;
            v87 -= 3;
          }
          while (!v88);
          uint64_t v86 = v306;
        }
        v307 = v85;
        operator delete(v86);
      }
    }
    else
    {
      sub_71424(9, (const std::error_condition *)((char *)&v337 + 8), v5);
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        sub_D4A2D4(7u, (char *)&v311);
        if ((SBYTE7(v312) & 0x80u) == 0) {
          long long v67 = &v311;
        }
        else {
          long long v67 = (long long *)v311;
        }
        if ((SBYTE7(v312) & 0x80u) == 0) {
          uint64_t v68 = BYTE7(v312);
        }
        else {
          uint64_t v68 = *((void *)&v311 + 1);
        }
        sub_188FC78(__p, (uint64_t)v67, v68);
        if (SBYTE7(v312) < 0) {
          operator delete((void *)v311);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v311, 3u);
        if (SBYTE7(v312) < 0) {
          operator delete((void *)v311);
        }
        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
        if (SHIBYTE(v353) < 0) {
          operator delete((void *)v352);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
    }
    if ((_BYTE)v337)
    {
      uint64_t v89 = *((void *)&v337 + 1);
      if (!*((void *)&v337 + 1)) {
        goto LABEL_316;
      }
      unint64_t v90 = (void *)*((void *)&v337 + 1);
      if (v338 != *((void *)&v337 + 1))
      {
        long long v91 = (void ***)(v338 - 24);
        do
        {
          if (*v91)
          {
            sub_C64384((uint64_t)v91, *v91);
            operator delete(*v91);
          }
          BOOL v88 = v91 == (void ***)v89;
          v91 -= 3;
        }
        while (!v88);
        unint64_t v90 = (void *)*((void *)&v337 + 1);
      }
      uint64_t v338 = v89;
    }
    else
    {
      uint64_t v92 = v339;
      if (!v339) {
        goto LABEL_316;
      }
      uint64_t v93 = v340[0];
      unint64_t v90 = v339;
      if ((void *)v340[0] != v339)
      {
        do
        {
          if (*(char *)(v93 - 1) < 0) {
            operator delete(*(void **)(v93 - 24));
          }
          v93 -= 32;
        }
        while ((void *)v93 != v92);
        unint64_t v90 = v339;
      }
      v340[0] = (uint64_t)v92;
    }
    operator delete(v90);
LABEL_316:
    if (v341.__r_.__value_.__s.__data_[0])
    {
      sub_C7EAC4((char **)&v341.__r_.__value_.__l.__size_);
    }
    else
    {
      uint64_t v94 = (void **)v342;
      if (v342)
      {
        char v95 = v343;
        uint64_t v96 = v342;
        if (v343 != v342)
        {
          do
          {
            if (*((char *)v95 - 1) < 0) {
              operator delete(*(v95 - 3));
            }
            v95 -= 4;
          }
          while (v95 != v94);
          uint64_t v96 = v342;
        }
        char v343 = v94;
        operator delete(v96);
      }
    }
    goto LABEL_326;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)__p);
    sub_188FC78(__p, (uint64_t)"Dropping ETA request that consists only of disabled transport types.", 68);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v311, 1u);
    if (SBYTE7(v312) < 0) {
      operator delete((void *)v311);
    }
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
    if (SHIBYTE(v353) < 0) {
      operator delete((void *)v352);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  v341.__r_.__value_.__r.__words[0] = 1;
  v341.__r_.__value_.__l.__size_ = (std::string::size_type)&off_2439090;
  sub_D49EC0((uint64_t)&v311, (const std::error_condition *)&v341);
  sub_C5EEF0((uint64_t)__p, (uint64_t)&v311);
  sub_13F1D90(v357, 0, 0);
  uint64_t v17 = *(void *)(a3 + 24);
  if (!v17) {
    sub_29F82C();
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v17 + 48))(v17, __p);
  sub_13F22FC(v357);
  sub_13F22FC(__p);
  sub_13F22FC(&v311);
LABEL_773:
  v256 = (char *)v292;
  if (v292)
  {
    v257 = v293;
    std::error_condition v258 = v292;
    if (v293 != v292)
    {
      do
      {
        uint64_t v259 = *((void *)v257 - 3);
        if (v259)
        {
          uint64_t v260 = *((void *)v257 - 2);
          uint64_t v261 = (void *)*((void *)v257 - 3);
          if (v260 != v259)
          {
            do
              uint64_t v260 = sub_4D4B58(v260 - 160);
            while (v260 != v259);
            uint64_t v261 = (void *)*((void *)v257 - 3);
          }
          *((void *)v257 - 2) = v259;
          operator delete(v261);
        }
        v257 -= 48;
      }
      while (v257 != v256);
      std::error_condition v258 = v292;
    }
    unint64_t v293 = v256;
    operator delete(v258);
  }
  char v262 = (uint64_t *)v295;
  if ((void)v295)
  {
    uint64_t v263 = (uint64_t *)*((void *)&v295 + 1);
    int v264 = (void *)v295;
    if (*((void *)&v295 + 1) != (void)v295)
    {
      do
        uint64_t v263 = sub_5ADCA8(v263 - 47);
      while (v263 != v262);
      int v264 = (void *)v295;
    }
    *((void *)&v295 + 1) = v262;
    operator delete(v264);
  }
  BOOL v265 = (uint64_t *)v297;
  if (v297)
  {
    v266 = v298;
    unint64_t v267 = v297;
    if (v298 != v297)
    {
      do
        v266 = sub_5ADCA8(v266 - 47);
      while (v266 != v265);
      unint64_t v267 = v297;
    }
    v298 = v265;
    operator delete(v267);
  }
  unint64_t v268 = (uint64_t *)v300;
  if (v300)
  {
    uint64_t v269 = v301;
    uint64_t v270 = v300;
    if (v301 != v300)
    {
      do
        uint64_t v269 = sub_5ADCA8(v269 - 47);
      while (v269 != v268);
      uint64_t v270 = v300;
    }
    v301 = v268;
    operator delete(v270);
  }
}

void sub_D48F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  if (a65 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a73);
  sub_D03AD8((uint64_t)&STACK[0x3E0]);
  sub_CF19B0((uint64_t)&STACK[0x418]);
  sub_4BCC2C((uint64_t)&STACK[0x940]);
  sub_CC1854((uint64_t)&STACK[0x8C0]);
  sub_C8ACB8((uint64_t)&STACK[0x450]);
  sub_C628C4((void ****)&a66);
  sub_CF7F90((uint64_t)&STACK[0x670]);
  sub_C7E544((uint64_t)&STACK[0x6D0]);
  sub_C9D440((uint64_t)&STACK[0x600]);
  if (a72 < 0) {
    operator delete(a69);
  }
  sub_CF62E8(&a16);
  sub_C9D440((uint64_t)&a24);
  sub_C5C9E0((uint64_t)&a36);
  sub_92C2E0(&a43);
  sub_5ADA30(&a47);
  sub_5ADA30(&a51);
  sub_5ADA30(&a54);
  _Unwind_Resume(a1);
}

void sub_D49CF8()
{
  sub_13F22FC(v0);
  JUMPOUT(0xD49D04);
}

void sub_D49D1C()
{
}

void sub_D49D24()
{
}

void sub_D49D2C()
{
}

void sub_D49D34()
{
}

void sub_D49D3C()
{
}

void sub_D49D44()
{
}

void sub_D49D4C()
{
}

void sub_D49D54()
{
}

std::string *sub_D49D5C(std::string *this, int a2, int a3, int a4, int a5)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    std::string::append(this, "[");
    std::string::append(this, "Cycling");
  }
  if (a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    if (size) {
      char v10 = "+";
    }
    else {
      char v10 = "[";
    }
    std::string::append(this, v10);
    std::string::append(this, "Drive");
  }
  if (a4)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type v11 = this->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v11 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    if (v11) {
      int v12 = "+";
    }
    else {
      int v12 = "[";
    }
    std::string::append(this, v12);
    std::string::append(this, "Walk");
  }
  if (a5)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type v13 = this->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v13 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    if (v13) {
      int64_t v14 = "+";
    }
    else {
      int64_t v14 = "[";
    }
    std::string::append(this, v14);
    std::string::append(this, "Transit");
  }
  return std::string::append(this, "]");
}

void sub_D49EA4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D49EC0(uint64_t a1, const std::error_condition *a2)
{
  sub_13F1D90(a1, 0, 0);
  if ((void (***)(std::error_category *__hidden))a2->__cat_ == &off_2439090)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v16);
      uint64_t v5 = sub_188FC78(&v16, (uint64_t)"SubError: ", 10);
      std::error_condition::message(&__p, a2);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      sub_188FC78(v5, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v19 < 0) {
        operator delete(v18);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    int val = sub_E12498(a2->__val_);
  }
  else
  {
    int val = a2->__val_;
  }
  *(_DWORD *)(a1 + 40) |= 0x20u;
  *(_DWORD *)(a1 + 160) = val;
  uint64_t result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)&v16);
    int v9 = sub_188FC78(&v16, (uint64_t)"ETARequest: ", 12);
    char v10 = sub_69510();
    uint64_t v11 = sub_68EE4((uint64_t)v10);
    int v12 = *(char *)(v11 + 23);
    if (v12 >= 0) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = *(void *)v11;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      uint64_t v14 = *(void *)(v11 + 8);
    }
    sub_188FC78(v9, v13, v14);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  return result;
}

void sub_D4A20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_13F22FC(v15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_13F22FC(v15);
  _Unwind_Resume(a1);
}

void sub_D4A2D4(unsigned int a1@<W0>, char *a2@<X8>)
{
  sub_7B8BC(3, (char *)&v132);
  char v4 = std::string::insert(&v132, 0, "[");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v133.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = std::string::append(&v133, "]");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v135 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v133.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v132.__r_.__value_.__l.__data_);
  if (a1 > 0x12)
  {
LABEL_7:
    a2[23] = 0;
    *a2 = 0;
    goto LABEL_264;
  }
LABEL_3:
  switch(a1)
  {
    case 0u:
      a2[23] = 14;
      strcpy(a2, "Unknown error.");
      break;
    case 1u:
      int v45 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v9 = HIBYTE(v135);
      }
      else {
        size_t v9 = (size_t)__p[1];
      }
      unint64_t v46 = v9 + 24;
      if (v9 + 24 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v46 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v11 = a2;
        a2[23] = v46;
LABEL_201:
        if (v45 >= 0) {
          std::string::size_type v108 = __p;
        }
        else {
          std::string::size_type v108 = (void **)__p[0];
        }
        memmove(a2, v108, v9);
        goto LABEL_205;
      }
      uint64_t v106 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17) {
        uint64_t v106 = v46 | 7;
      }
      uint64_t v107 = v106 + 1;
      uint64_t v11 = (char *)operator new(v106 + 1);
      *((void *)a2 + 1) = v46;
      *((void *)a2 + 2) = v107 | 0x8000000000000000;
      *(void *)a2 = v11;
      a2 = v11;
      if (v9) {
        goto LABEL_201;
      }
LABEL_205:
      std::string::pointer v74 = " Input resolving failed.";
      goto LABEL_238;
    case 2u:
      int v31 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v32 = HIBYTE(v135);
      }
      else {
        size_t v32 = (size_t)__p[1];
      }
      unint64_t v33 = v32 + 27;
      if (v32 + 27 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v33 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v34 = a2;
        a2[23] = v33;
LABEL_168:
        if (v31 >= 0) {
          uint64_t v94 = __p;
        }
        else {
          uint64_t v94 = (void **)__p[0];
        }
        memmove(a2, v94, v32);
        goto LABEL_172;
      }
      uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v33 | 7) != 0x17) {
        uint64_t v92 = v33 | 7;
      }
      uint64_t v93 = v92 + 1;
      uint64_t v34 = (char *)operator new(v92 + 1);
      *((void *)a2 + 1) = v33;
      *((void *)a2 + 2) = v93 | 0x8000000000000000;
      *(void *)a2 = v34;
      a2 = v34;
      if (v32) {
        goto LABEL_168;
      }
LABEL_172:
      strcpy(&v34[v32], " Request validation failed.");
      break;
    case 3u:
      int v39 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v40 = HIBYTE(v135);
      }
      else {
        size_t v40 = (size_t)__p[1];
      }
      unint64_t v41 = v40 + 28;
      if (v40 + 28 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v41 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v42 = a2;
        a2[23] = v41;
LABEL_184:
        if (v39 >= 0) {
          char v100 = __p;
        }
        else {
          char v100 = (void **)__p[0];
        }
        memmove(a2, v100, v40);
        goto LABEL_188;
      }
      uint64_t v98 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v41 | 7) != 0x17) {
        uint64_t v98 = v41 | 7;
      }
      uint64_t v99 = v98 + 1;
      uint64_t v42 = (char *)operator new(v98 + 1);
      *((void *)a2 + 1) = v41;
      *((void *)a2 + 2) = v99 | 0x8000000000000000;
      *(void *)a2 = v42;
      a2 = v42;
      if (v40) {
        goto LABEL_184;
      }
LABEL_188:
      uint64_t v101 = " Path decoder module failed.";
      goto LABEL_197;
    case 4u:
      int v20 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v21 = HIBYTE(v135);
      }
      else {
        size_t v21 = (size_t)__p[1];
      }
      unint64_t v22 = v21 + 39;
      if (v21 + 39 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v22 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        long long v23 = a2;
        a2[23] = v22;
LABEL_144:
        if (v20 >= 0) {
          uint64_t v84 = __p;
        }
        else {
          uint64_t v84 = (void **)__p[0];
        }
        memmove(a2, v84, v21);
        goto LABEL_148;
      }
      uint64_t v82 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17) {
        uint64_t v82 = v22 | 7;
      }
      uint64_t v83 = v82 + 1;
      long long v23 = (char *)operator new(v82 + 1);
      *((void *)a2 + 1) = v22;
      *((void *)a2 + 2) = v83 | 0x8000000000000000;
      *(void *)a2 = v23;
      a2 = v23;
      if (v21) {
        goto LABEL_144;
      }
LABEL_148:
      strcpy(&v23[v21], " Input point transformer module failed.");
      break;
    case 5u:
      int v51 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v52 = HIBYTE(v135);
      }
      else {
        size_t v52 = (size_t)__p[1];
      }
      unint64_t v53 = v52 + 30;
      if (v52 + 30 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v53 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        std::string::size_type v54 = a2;
        a2[23] = v53;
LABEL_217:
        if (v51 >= 0) {
          std::string::pointer v114 = __p;
        }
        else {
          std::string::pointer v114 = (void **)__p[0];
        }
        memmove(a2, v114, v52);
        goto LABEL_221;
      }
      uint64_t v112 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v53 | 7) != 0x17) {
        uint64_t v112 = v53 | 7;
      }
      uint64_t v113 = v112 + 1;
      std::string::size_type v54 = (char *)operator new(v112 + 1);
      *((void *)a2 + 1) = v53;
      *((void *)a2 + 2) = v113 | 0x8000000000000000;
      *(void *)a2 = v54;
      a2 = v54;
      if (v52) {
        goto LABEL_217;
      }
LABEL_221:
      strcpy(&v54[v52], " Coverage check module failed.");
      break;
    case 6u:
      int v59 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v9 = HIBYTE(v135);
      }
      else {
        size_t v9 = (size_t)__p[1];
      }
      unint64_t v60 = v9 + 24;
      if (v9 + 24 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v60 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v11 = a2;
        a2[23] = v60;
LABEL_233:
        if (v59 >= 0) {
          long long v120 = __p;
        }
        else {
          long long v120 = (void **)__p[0];
        }
        memmove(a2, v120, v9);
        goto LABEL_237;
      }
      uint64_t v118 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v60 | 7) != 0x17) {
        uint64_t v118 = v60 | 7;
      }
      uint64_t v119 = v118 + 1;
      uint64_t v11 = (char *)operator new(v118 + 1);
      *((void *)a2 + 1) = v60;
      *((void *)a2 + 2) = v119 | 0x8000000000000000;
      *(void *)a2 = v11;
      a2 = v11;
      if (v9) {
        goto LABEL_233;
      }
LABEL_237:
      std::string::pointer v74 = " Snapping module failed.";
      goto LABEL_238;
    case 7u:
      int v43 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v40 = HIBYTE(v135);
      }
      else {
        size_t v40 = (size_t)__p[1];
      }
      unint64_t v44 = v40 + 28;
      if (v40 + 28 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v44 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v42 = a2;
        a2[23] = v44;
LABEL_192:
        if (v43 >= 0) {
          __int16 v104 = __p;
        }
        else {
          __int16 v104 = (void **)__p[0];
        }
        memmove(a2, v104, v40);
        goto LABEL_196;
      }
      uint64_t v102 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v44 | 7) != 0x17) {
        uint64_t v102 = v44 | 7;
      }
      uint64_t v103 = v102 + 1;
      uint64_t v42 = (char *)operator new(v102 + 1);
      *((void *)a2 + 1) = v44;
      *((void *)a2 + 2) = v103 | 0x8000000000000000;
      *(void *)a2 = v42;
      a2 = v42;
      if (v40) {
        goto LABEL_192;
      }
LABEL_196:
      uint64_t v101 = " Path finding module failed.";
LABEL_197:
      uint64_t v105 = &v42[v40];
      *(_OWORD *)uint64_t v105 = *(_OWORD *)v101;
      *(_OWORD *)(v105 + 12) = *(_OWORD *)(v101 + 12);
      v105[28] = 0;
      break;
    case 8u:
      int v69 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v13 = HIBYTE(v135);
      }
      else {
        size_t v13 = (size_t)__p[1];
      }
      unint64_t v70 = v13 + 31;
      if (v13 + 31 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v70 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v15 = a2;
        a2[23] = v70;
LABEL_258:
        if (v69 >= 0) {
          unint64_t v130 = __p;
        }
        else {
          unint64_t v130 = (void **)__p[0];
        }
        memmove(a2, v130, v13);
        goto LABEL_262;
      }
      uint64_t v128 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v70 | 7) != 0x17) {
        uint64_t v128 = v70 | 7;
      }
      uint64_t v129 = v128 + 1;
      uint64_t v15 = (char *)operator new(v128 + 1);
      *((void *)a2 + 1) = v70;
      *((void *)a2 + 2) = v129 | 0x8000000000000000;
      *(void *)a2 = v15;
      a2 = v15;
      if (v13) {
        goto LABEL_258;
      }
LABEL_262:
      uint64_t v78 = " Journey planner module failed.";
      goto LABEL_263;
    case 9u:
      int v28 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v29 = HIBYTE(v135);
      }
      else {
        size_t v29 = (size_t)__p[1];
      }
      unint64_t v30 = v29 + 19;
      if (v29 + 19 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v30 >= 0x17)
      {
        uint64_t v88 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17) {
          uint64_t v88 = v30 | 7;
        }
        uint64_t v89 = v88 + 1;
        unint64_t v90 = (char *)operator new(v88 + 1);
        *((void *)a2 + 1) = v30;
        *((void *)a2 + 2) = v89 | 0x8000000000000000;
        *(void *)a2 = v90;
        a2 = v90;
      }
      else
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        a2[23] = v30;
        if (!v29) {
          goto LABEL_164;
        }
      }
      if (v28 >= 0) {
        long long v91 = __p;
      }
      else {
        long long v91 = (void **)__p[0];
      }
      memmove(a2, v91, v29);
LABEL_164:
      strcpy(&a2[v29], " ETA module failed.");
      break;
    case 0xAu:
      int v65 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v66 = HIBYTE(v135);
      }
      else {
        size_t v66 = (size_t)__p[1];
      }
      unint64_t v67 = v66 + 34;
      if (v66 + 34 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v67 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v68 = a2;
        a2[23] = v67;
LABEL_250:
        if (v65 >= 0) {
          uint64_t v127 = __p;
        }
        else {
          uint64_t v127 = (void **)__p[0];
        }
        memmove(a2, v127, v66);
        goto LABEL_254;
      }
      uint64_t v125 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v67 | 7) != 0x17) {
        uint64_t v125 = v67 | 7;
      }
      uint64_t v126 = v125 + 1;
      uint64_t v68 = (char *)operator new(v125 + 1);
      *((void *)a2 + 1) = v67;
      *((void *)a2 + 2) = v126 | 0x8000000000000000;
      *(void *)a2 = v68;
      a2 = v68;
      if (v66) {
        goto LABEL_250;
      }
LABEL_254:
      strcpy(&v68[v66], " ETA module failed for user route.");
      break;
    case 0xBu:
      int v16 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v17 = HIBYTE(v135);
      }
      else {
        size_t v17 = (size_t)__p[1];
      }
      unint64_t v18 = v17 + 41;
      if (v17 + 41 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v18 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        char v19 = a2;
        a2[23] = v18;
LABEL_136:
        if (v16 >= 0) {
          long long v81 = __p;
        }
        else {
          long long v81 = (void **)__p[0];
        }
        memmove(a2, v81, v17);
        goto LABEL_140;
      }
      uint64_t v79 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17) {
        uint64_t v79 = v18 | 7;
      }
      uint64_t v80 = v79 + 1;
      char v19 = (char *)operator new(v79 + 1);
      *((void *)a2 + 1) = v18;
      *((void *)a2 + 2) = v80 | 0x8000000000000000;
      *(void *)a2 = v19;
      a2 = v19;
      if (v17) {
        goto LABEL_136;
      }
LABEL_140:
      strcpy(&v19[v17], " Traversal time prediction module failed.");
      break;
    case 0xCu:
      int v24 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v25 = HIBYTE(v135);
      }
      else {
        size_t v25 = (size_t)__p[1];
      }
      unint64_t v26 = v25 + 29;
      if (v25 + 29 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v26 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        std::string::size_type v27 = a2;
        a2[23] = v26;
LABEL_152:
        if (v24 >= 0) {
          uint64_t v87 = __p;
        }
        else {
          uint64_t v87 = (void **)__p[0];
        }
        memmove(a2, v87, v25);
        goto LABEL_156;
      }
      uint64_t v85 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17) {
        uint64_t v85 = v26 | 7;
      }
      uint64_t v86 = v85 + 1;
      std::string::size_type v27 = (char *)operator new(v85 + 1);
      *((void *)a2 + 1) = v26;
      *((void *)a2 + 2) = v86 | 0x8000000000000000;
      *(void *)a2 = v27;
      a2 = v27;
      if (v25) {
        goto LABEL_152;
      }
LABEL_156:
      strcpy(&v27[v25], " Route builder module failed.");
      break;
    case 0xDu:
      int v55 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v56 = HIBYTE(v135);
      }
      else {
        size_t v56 = (size_t)__p[1];
      }
      unint64_t v57 = v56 + 44;
      if (v56 + 44 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v57 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        long long v58 = a2;
        a2[23] = v57;
LABEL_225:
        if (v55 >= 0) {
          uint64_t v117 = __p;
        }
        else {
          uint64_t v117 = (void **)__p[0];
        }
        memmove(a2, v117, v56);
        goto LABEL_229;
      }
      uint64_t v115 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v57 | 7) != 0x17) {
        uint64_t v115 = v57 | 7;
      }
      uint64_t v116 = v115 + 1;
      long long v58 = (char *)operator new(v115 + 1);
      *((void *)a2 + 1) = v57;
      *((void *)a2 + 2) = v116 | 0x8000000000000000;
      *(void *)a2 = v58;
      a2 = v58;
      if (v56) {
        goto LABEL_225;
      }
LABEL_229:
      strcpy(&v58[v56], " Route builder module failed for user route.");
      break;
    case 0xEu:
      int v12 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v13 = HIBYTE(v135);
      }
      else {
        size_t v13 = (size_t)__p[1];
      }
      unint64_t v14 = v13 + 31;
      if (v13 + 31 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v14 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v15 = a2;
        a2[23] = v14;
LABEL_128:
        if (v12 >= 0) {
          uint64_t v77 = __p;
        }
        else {
          uint64_t v77 = (void **)__p[0];
        }
        memmove(a2, v77, v13);
        goto LABEL_132;
      }
      uint64_t v75 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v75 = v14 | 7;
      }
      uint64_t v76 = v75 + 1;
      uint64_t v15 = (char *)operator new(v75 + 1);
      *((void *)a2 + 1) = v14;
      *((void *)a2 + 2) = v76 | 0x8000000000000000;
      *(void *)a2 = v15;
      a2 = v15;
      if (v13) {
        goto LABEL_128;
      }
LABEL_132:
      uint64_t v78 = " Route selection module failed.";
LABEL_263:
      std::string::size_type v131 = &v15[v13];
      *(_OWORD *)std::string::size_type v131 = *(_OWORD *)v78;
      *(_OWORD *)(v131 + 15) = *(_OWORD *)(v78 + 15);
      v131[31] = 0;
      break;
    case 0xFu:
      int v35 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v36 = HIBYTE(v135);
      }
      else {
        size_t v36 = (size_t)__p[1];
      }
      unint64_t v37 = v36 + 45;
      if (v36 + 45 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v37 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        std::string::size_type v38 = a2;
        a2[23] = v37;
LABEL_176:
        if (v35 >= 0) {
          std::string::size_type v97 = __p;
        }
        else {
          std::string::size_type v97 = (void **)__p[0];
        }
        memmove(a2, v97, v36);
        goto LABEL_180;
      }
      uint64_t v95 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v37 | 7) != 0x17) {
        uint64_t v95 = v37 | 7;
      }
      uint64_t v96 = v95 + 1;
      std::string::size_type v38 = (char *)operator new(v95 + 1);
      *((void *)a2 + 1) = v37;
      *((void *)a2 + 2) = v96 | 0x8000000000000000;
      *(void *)a2 = v38;
      a2 = v38;
      if (v36) {
        goto LABEL_176;
      }
LABEL_180:
      strcpy(&v38[v36], " Driving to walking transition module failed.");
      break;
    case 0x10u:
      int v8 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v9 = HIBYTE(v135);
      }
      else {
        size_t v9 = (size_t)__p[1];
      }
      unint64_t v10 = v9 + 24;
      if (v9 + 24 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v10 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v11 = a2;
        a2[23] = v10;
LABEL_120:
        if (v8 >= 0) {
          std::string::size_type v73 = __p;
        }
        else {
          std::string::size_type v73 = (void **)__p[0];
        }
        memmove(a2, v73, v9);
        goto LABEL_124;
      }
      uint64_t v71 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v71 = v10 | 7;
      }
      uint64_t v72 = v71 + 1;
      uint64_t v11 = (char *)operator new(v71 + 1);
      *((void *)a2 + 1) = v10;
      *((void *)a2 + 2) = v72 | 0x8000000000000000;
      *(void *)a2 = v11;
      a2 = v11;
      if (v9) {
        goto LABEL_120;
      }
LABEL_124:
      std::string::pointer v74 = " Guidance module failed.";
LABEL_238:
      uint64_t v121 = &v11[v9];
      *(_OWORD *)uint64_t v121 = *(_OWORD *)v74;
      *((void *)v121 + 2) = *((void *)v74 + 2);
      v121[24] = 0;
      break;
    case 0x11u:
      int v47 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v48 = HIBYTE(v135);
      }
      else {
        size_t v48 = (size_t)__p[1];
      }
      unint64_t v49 = v48 + 25;
      if (v48 + 25 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v49 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        std::string::pointer v50 = a2;
        a2[23] = v49;
LABEL_209:
        if (v47 >= 0) {
          uint64_t v111 = __p;
        }
        else {
          uint64_t v111 = (void **)__p[0];
        }
        memmove(a2, v111, v48);
        goto LABEL_213;
      }
      uint64_t v109 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17) {
        uint64_t v109 = v49 | 7;
      }
      uint64_t v110 = v109 + 1;
      std::string::pointer v50 = (char *)operator new(v109 + 1);
      *((void *)a2 + 1) = v49;
      *((void *)a2 + 2) = v110 | 0x8000000000000000;
      *(void *)a2 = v50;
      a2 = v50;
      if (v48) {
        goto LABEL_209;
      }
LABEL_213:
      strcpy(&v50[v48], " Analytics module failed.");
      break;
    case 0x12u:
      int v61 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v62 = HIBYTE(v135);
      }
      else {
        size_t v62 = (size_t)__p[1];
      }
      unint64_t v63 = v62 + 32;
      if (v62 + 32 > 0x7FFFFFFFFFFFFFF7) {
LABEL_266:
      }
        sub_188D690();
      if (v63 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        int v64 = a2;
        a2[23] = v63;
LABEL_242:
        if (v61 >= 0) {
          uint64_t v124 = __p;
        }
        else {
          uint64_t v124 = (void **)__p[0];
        }
        memmove(a2, v124, v62);
        goto LABEL_246;
      }
      uint64_t v122 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v63 | 7) != 0x17) {
        uint64_t v122 = v63 | 7;
      }
      uint64_t v123 = v122 + 1;
      int v64 = (char *)operator new(v122 + 1);
      *((void *)a2 + 1) = v63;
      *((void *)a2 + 2) = v123 | 0x8000000000000000;
      *(void *)a2 = v64;
      a2 = v64;
      if (v62) {
        goto LABEL_242;
      }
LABEL_246:
      strcpy(&v64[v62], " Response builder module failed.");
      break;
    default:
      goto LABEL_7;
  }
LABEL_264:
  if (SHIBYTE(v135) < 0) {
    operator delete(__p[0]);
  }
}

void sub_D4B0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D4B190@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  char v4 = (char *)operator new(0x20uLL);
  strcpy(v4, "CyclingRouteBuilderModule");
  *(void *)a2 = v4;
  *(_OWORD *)(a2 + 8) = xmmword_20B8870;
  char v6 = 1;
  uint64_t result = sub_C947F8((uint64_t *)(a2 + 24), "Runtime", &v6, a1);
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_D4B220(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D4B234(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void *sub_D4B248(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = a5;
  a1[1] = a3;
  a1[2] = a4;
  sub_D04C80((uint64_t)(a1 + 3), a2, a3);
  sub_D05378((uint64_t)(a1 + 12), a2, a1[1]);
  return a1;
}

uint64_t sub_D4B290@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "ETAForSearchResponseBuilderModule");
  char v6 = 1;
  unint64_t v4 = *(void *)(a2 + 32);
  if (v4 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_C947F8((uint64_t *)(a2 + 24), "Runtime", &v6, a1);
    *(void *)(a2 + 32) = result;
  }
  else
  {
    sub_C949C8(a2 + 40, *(void *)(a2 + 32), "Runtime", &v6, a1);
    uint64_t result = v4 + 48;
    *(void *)(a2 + 32) = v4 + 48;
    *(void *)(a2 + 32) = v4 + 48;
  }
  return result;
}

void sub_D4B350(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D4B364(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D4B37C(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void **sub_D4B390(void **a1, uint64_t a2)
{
  unint64_t v4 = (uint64_t *)*a1;
  if (*a1)
  {
    long long v5 = (uint64_t *)a1[1];
    char v6 = v4;
    if (v5 != v4)
    {
      do
        long long v5 = sub_5ADCA8(v5 - 47);
      while (v5 != v4);
      char v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void **)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  return a1;
}

uint64_t sub_D4B418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a4;
  *(unsigned char *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 17) = sub_DBCA50(a2);
  *(_OWORD *)(a1 + 24) = 0u;
  long long v5 = (void **)(a1 + 24);
  char v6 = (void **)(a1 + 48);
  *(_OWORD *)(a1 + 72) = 0u;
  long long v7 = (void **)(a1 + 72);
  int v8 = (void **)(a1 + 96);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v9 = *(void *)a1;
  v33[23] = 20;
  strcpy(v33, "CyclingCoverageCheck");
  std::string __p = 0;
  int v31 = 0;
  uint64_t v32 = 0;
  unint64_t v10 = sub_374CDC(v9, (uint64_t)v33, (uint64_t *)&__p);
  sub_54214((uint64_t)v34, (uint64_t)v10);
  uint64_t v11 = (void **)__p;
  if (__p)
  {
    int v12 = v31;
    size_t v13 = __p;
    if (v31 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      size_t v13 = __p;
    }
    int v31 = v11;
    operator delete(v13);
  }
  if ((v33[23] & 0x80000000) != 0) {
    operator delete(*(void **)v33);
  }
  *(unsigned char *)(a1 + 18) = sub_29D62C(v34, (uint64_t)&xmmword_25E6920);
  sub_5C308(v34, (uint64_t)&qword_25E6980, (uint64_t)v33);
  unint64_t v14 = (void **)*v5;
  if (*v5)
  {
    uint64_t v15 = *(void ***)(a1 + 32);
    int v16 = *v5;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      int v16 = *v5;
    }
    *(void *)(a1 + 32) = v14;
    operator delete(v16);
    uint64_t *v5 = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v33;
  *(void *)(a1 + 40) = *(void *)&v33[16];
  sub_5C308(v34, (uint64_t)&qword_25E6998, (uint64_t)v33);
  size_t v17 = (void **)*v7;
  if (*v7)
  {
    unint64_t v18 = *(void ***)(a1 + 80);
    char v19 = *v7;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
      while (v18 != v17);
      char v19 = *v7;
    }
    *(void *)(a1 + 80) = v17;
    operator delete(v19);
    *long long v7 = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)v33;
  *(void *)(a1 + 88) = *(void *)&v33[16];
  sub_5C308(v34, (uint64_t)&xmmword_25E6950, (uint64_t)v33);
  int v20 = (void **)*v6;
  if (*v6)
  {
    size_t v21 = *(void ***)(a1 + 56);
    unint64_t v22 = *v6;
    if (v21 != v20)
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 3;
      }
      while (v21 != v20);
      unint64_t v22 = *v6;
    }
    *(void *)(a1 + 56) = v20;
    operator delete(v22);
    void *v6 = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v33;
  *(void *)(a1 + 64) = *(void *)&v33[16];
  sub_5C308(v34, (uint64_t)byte_25E6968, (uint64_t)v33);
  long long v23 = (void **)*v8;
  if (*v8)
  {
    int v24 = *(void ***)(a1 + 104);
    size_t v25 = *v8;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v24 - 1) < 0) {
          operator delete(*(v24 - 3));
        }
        v24 -= 3;
      }
      while (v24 != v23);
      size_t v25 = *v8;
    }
    *(void *)(a1 + 104) = v23;
    operator delete(v25);
    *int v8 = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)v33;
  *(void *)(a1 + 112) = *(void *)&v33[16];
  unint64_t v26 = v35;
  if (v35)
  {
    do
    {
      size_t v29 = (void **)*v26;
      sub_55198((uint64_t)(v26 + 5));
      if (*((char *)v26 + 39) < 0) {
        operator delete(v26[2]);
      }
      operator delete(v26);
      unint64_t v26 = v29;
    }
    while (v29);
  }
  std::string::size_type v27 = v34[0];
  v34[0] = 0;
  if (v27) {
    operator delete(v27);
  }
  return a1;
}

void sub_D4B770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_5450C((uint64_t)va);
  sub_1A668(v8);
  sub_1A668(v11);
  sub_1A668(v10);
  sub_1A668(v9);
  _Unwind_Resume(a1);
}

void sub_D4B7B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0xD4B78CLL);
}

void *sub_D4B7D4(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t result = operator new(24 * a4);
    int v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[3 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t result = sub_CF23F4(&v8[v9 / 8], (uint64_t *)(a2 + v9));
        v9 += 24;
      }
      while (a2 + v9 != a3);
      int v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_D4B898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_D2E264((void ***)va);
  _Unwind_Resume(a1);
}

void sub_D4B8AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v4) {
    sub_20B0060((uint64_t)v3 + v4, v3);
  }
  *(void *)(v2 + 8) = v3;
  sub_D2E264((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D4B8D4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(unsigned char *)a1 = sub_DBE134(a2);
  int v17 = sub_65BD8();
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 4) = v17;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(unsigned char *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 57) = 0;
  *(unsigned char *)(a1 + 61) = 1;
  *(_DWORD *)(a1 + 62) = 0;
  *(_DWORD *)(a1 + 65) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = -1;
  *(unsigned char *)(a1 + 100) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = a8;
  *(void *)(a1 + 136) = a9;
  *(void *)(a1 + 144) = a4;
  *(void *)(a1 + 152) = a5;
  *(void *)(a1 + 160) = a6;
  *(_DWORD *)(a1 + 168) = sub_F3D90C(a2, a7, 1);
  sub_D4BA38(a2, a7, a1 + 8, a3, *(void *)(a1 + 136), a8, a1 + 176);
  *(void *)(a1 + 416) = sub_DBBBCC(a2);
  *(_WORD *)(a1 + 424) = v18;
  *(unsigned char *)(a1 + 426) = v19;
  *(unsigned char *)(a1 + 427) = sub_DBCA50(a2);
  *(unsigned char *)(a1 + 428) = sub_401FE4(a7);
  return a1;
}

void sub_D4BA08(_Unwind_Exception *a1)
{
  sub_3C77C4(v1);
  _Unwind_Resume(a1);
}

void sub_D4BA1C(_Unwind_Exception *a1)
{
  sub_D1C804(v2);
  sub_3C77C4(v1);
  _Unwind_Resume(a1);
}

void sub_D4BA38(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v14 = sub_DBF2D4(a1);
  unsigned int v15 = sub_35E640();
  uint64_t v41 = a7;
  char v40 = v14;
  if (*(unsigned char *)(nullsub_1(a5) + 128))
  {
    uint64_t v16 = nullsub_1(a5);
    if (!*(unsigned char *)(v16 + 128))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    char v17 = sub_491B20(v16);
  }
  else
  {
    char v17 = 0;
  }
  unint64_t v57 = sub_DBBBCC(a1);
  __int16 v58 = v18;
  char v59 = v19;
  int v20 = sub_DBE164(a1) >> 32;
  int v22 = v21;
  sub_DC3930((uint64_t)v54);
  v52[0] = 0;
  v52[1] = 0;
  uint64_t v53 = 0;
  if (!v22)
  {
    uint64_t v23 = *a4;
    uint64_t v24 = a4[1];
    if (*a4 != v24)
    {
      while (!*(_DWORD *)(v23 + 104))
      {
        v23 += 376;
        if (v23 == v24) {
          goto LABEL_12;
        }
      }
    }
    if (v23 == v24)
    {
LABEL_12:
      v42[0] = 0;
      v42[1] = 0;
      int v43 = 0;
    }
    else
    {
      *(_OWORD *)uint64_t v42 = *(_OWORD *)(v23 + 216);
      int v43 = *(char ***)(v23 + 232);
    }
    HIBYTE(v51) = 15;
    strcpy((char *)v50, "RerouteCategory");
    memset(__p, 0, 24);
    size_t v25 = sub_374CDC(a6, (uint64_t)v50, (uint64_t *)__p);
    sub_484AC4((double *)&v45, v25);
    int v26 = sub_484B5C((uint64_t)v54, (double *)&v45);
    std::string::size_type v27 = (void **)__p[0];
    if (__p[0])
    {
      int v28 = (void **)__p[1];
      size_t v29 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v28 - 1) < 0) {
            operator delete(*(v28 - 3));
          }
          v28 -= 3;
        }
        while (v28 != v27);
        size_t v29 = __p[0];
      }
      __p[1] = v27;
      operator delete(v29);
    }
    if (SHIBYTE(v51) < 0) {
      operator delete(v50[0]);
    }
    strcpy((char *)__p, "FilteredRerouteHistory");
    HIBYTE(__p[2]) = 22;
    int v45 = 0;
    unint64_t v46 = 0;
    uint64_t v47 = 0;
    unint64_t v30 = sub_374CDC(a6, (uint64_t)__p, (uint64_t *)&v45);
    sub_4844F0(v48, v30);
    sub_4844F4(a5, (unsigned __int8 *)v42, (uint64_t *)v54, v20, v15, v26, (uint64_t)v48, (uint64_t)v50);
    int v31 = (void **)v45;
    *(_OWORD *)size_t v52 = *(_OWORD *)v50;
    uint64_t v53 = v51;
    v50[1] = 0;
    uint64_t v51 = 0;
    v50[0] = 0;
    if (v45)
    {
      uint64_t v32 = v46;
      unint64_t v33 = v45;
      if (v46 != v45)
      {
        do
        {
          if (*((char *)v32 - 1) < 0) {
            operator delete(*(v32 - 3));
          }
          v32 -= 3;
        }
        while (v32 != v31);
        unint64_t v33 = v45;
      }
      unint64_t v46 = v31;
      operator delete(v33);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_485C30(a5, (uint64_t)v42);
  uint64_t v34 = (uint64_t *)sub_487A58(a5);
  int v35 = (long long *)sub_487740(a5);
  sub_D1C608(v41, a3, a2, v40, v15, v17, (uint64_t *)&v57, (uint64_t)v52, v54, (uint64_t)v42, v34, v35);
  size_t v36 = (char **)v42[1];
  if (v42[1])
  {
    unint64_t v37 = v43;
    std::string::size_type v38 = v42[1];
    if (v43 != v42[1])
    {
      do
      {
        v37 -= 9;
        sub_3A688C((uint64_t)&v44, v37);
      }
      while (v37 != v36);
      std::string::size_type v38 = v42[1];
    }
    int v43 = v36;
    operator delete(v38);
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (v55)
  {
    size_t v56 = v55;
    operator delete(v55);
  }
}

void sub_D4BDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51)
{
  if (__p) {
    operator delete(__p);
  }
  if (a50) {
    operator delete(a50);
  }
  _Unwind_Resume(exception_object);
}

void sub_D4BE60(unsigned int a1@<W0>, char *a2@<X8>)
{
  sub_7B8BC(2, (char *)&v132);
  uint64_t v4 = std::string::insert(&v132, 0, "[");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v133.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  char v6 = std::string::append(&v133, "]");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v135 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v133.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v132.__r_.__value_.__l.__data_);
  if (a1 > 0x12)
  {
LABEL_7:
    a2[23] = 0;
    *a2 = 0;
    goto LABEL_264;
  }
LABEL_3:
  switch(a1)
  {
    case 0u:
      a2[23] = 14;
      strcpy(a2, "Unknown error.");
      break;
    case 1u:
      int v45 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v9 = HIBYTE(v135);
      }
      else {
        size_t v9 = (size_t)__p[1];
      }
      unint64_t v46 = v9 + 24;
      if (v9 + 24 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v46 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v11 = a2;
        a2[23] = v46;
LABEL_201:
        if (v45 >= 0) {
          std::string::size_type v108 = __p;
        }
        else {
          std::string::size_type v108 = (void **)__p[0];
        }
        memmove(a2, v108, v9);
        goto LABEL_205;
      }
      uint64_t v106 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17) {
        uint64_t v106 = v46 | 7;
      }
      uint64_t v107 = v106 + 1;
      uint64_t v11 = (char *)operator new(v106 + 1);
      *((void *)a2 + 1) = v46;
      *((void *)a2 + 2) = v107 | 0x8000000000000000;
      *(void *)a2 = v11;
      a2 = v11;
      if (v9) {
        goto LABEL_201;
      }
LABEL_205:
      std::string::pointer v74 = " Input resolving failed.";
      goto LABEL_238;
    case 2u:
      int v31 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v32 = HIBYTE(v135);
      }
      else {
        size_t v32 = (size_t)__p[1];
      }
      unint64_t v33 = v32 + 27;
      if (v32 + 27 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v33 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v34 = a2;
        a2[23] = v33;
LABEL_168:
        if (v31 >= 0) {
          uint64_t v94 = __p;
        }
        else {
          uint64_t v94 = (void **)__p[0];
        }
        memmove(a2, v94, v32);
        goto LABEL_172;
      }
      uint64_t v92 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v33 | 7) != 0x17) {
        uint64_t v92 = v33 | 7;
      }
      uint64_t v93 = v92 + 1;
      uint64_t v34 = (char *)operator new(v92 + 1);
      *((void *)a2 + 1) = v33;
      *((void *)a2 + 2) = v93 | 0x8000000000000000;
      *(void *)a2 = v34;
      a2 = v34;
      if (v32) {
        goto LABEL_168;
      }
LABEL_172:
      strcpy(&v34[v32], " Request validation failed.");
      break;
    case 3u:
      int v39 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v40 = HIBYTE(v135);
      }
      else {
        size_t v40 = (size_t)__p[1];
      }
      unint64_t v41 = v40 + 28;
      if (v40 + 28 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v41 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v42 = a2;
        a2[23] = v41;
LABEL_184:
        if (v39 >= 0) {
          char v100 = __p;
        }
        else {
          char v100 = (void **)__p[0];
        }
        memmove(a2, v100, v40);
        goto LABEL_188;
      }
      uint64_t v98 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v41 | 7) != 0x17) {
        uint64_t v98 = v41 | 7;
      }
      uint64_t v99 = v98 + 1;
      uint64_t v42 = (char *)operator new(v98 + 1);
      *((void *)a2 + 1) = v41;
      *((void *)a2 + 2) = v99 | 0x8000000000000000;
      *(void *)a2 = v42;
      a2 = v42;
      if (v40) {
        goto LABEL_184;
      }
LABEL_188:
      uint64_t v101 = " Path decoder module failed.";
      goto LABEL_197;
    case 4u:
      int v20 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v21 = HIBYTE(v135);
      }
      else {
        size_t v21 = (size_t)__p[1];
      }
      unint64_t v22 = v21 + 39;
      if (v21 + 39 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v22 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v23 = a2;
        a2[23] = v22;
LABEL_144:
        if (v20 >= 0) {
          uint64_t v84 = __p;
        }
        else {
          uint64_t v84 = (void **)__p[0];
        }
        memmove(a2, v84, v21);
        goto LABEL_148;
      }
      uint64_t v82 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17) {
        uint64_t v82 = v22 | 7;
      }
      uint64_t v83 = v82 + 1;
      uint64_t v23 = (char *)operator new(v82 + 1);
      *((void *)a2 + 1) = v22;
      *((void *)a2 + 2) = v83 | 0x8000000000000000;
      *(void *)a2 = v23;
      a2 = v23;
      if (v21) {
        goto LABEL_144;
      }
LABEL_148:
      strcpy(&v23[v21], " Input point transformer module failed.");
      break;
    case 5u:
      int v51 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v52 = HIBYTE(v135);
      }
      else {
        size_t v52 = (size_t)__p[1];
      }
      unint64_t v53 = v52 + 30;
      if (v52 + 30 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v53 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        std::string::size_type v54 = a2;
        a2[23] = v53;
LABEL_217:
        if (v51 >= 0) {
          std::string::pointer v114 = __p;
        }
        else {
          std::string::pointer v114 = (void **)__p[0];
        }
        memmove(a2, v114, v52);
        goto LABEL_221;
      }
      uint64_t v112 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v53 | 7) != 0x17) {
        uint64_t v112 = v53 | 7;
      }
      uint64_t v113 = v112 + 1;
      std::string::size_type v54 = (char *)operator new(v112 + 1);
      *((void *)a2 + 1) = v53;
      *((void *)a2 + 2) = v113 | 0x8000000000000000;
      *(void *)a2 = v54;
      a2 = v54;
      if (v52) {
        goto LABEL_217;
      }
LABEL_221:
      strcpy(&v54[v52], " Coverage check module failed.");
      break;
    case 6u:
      int v59 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v9 = HIBYTE(v135);
      }
      else {
        size_t v9 = (size_t)__p[1];
      }
      unint64_t v60 = v9 + 24;
      if (v9 + 24 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v60 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v11 = a2;
        a2[23] = v60;
LABEL_233:
        if (v59 >= 0) {
          long long v120 = __p;
        }
        else {
          long long v120 = (void **)__p[0];
        }
        memmove(a2, v120, v9);
        goto LABEL_237;
      }
      uint64_t v118 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v60 | 7) != 0x17) {
        uint64_t v118 = v60 | 7;
      }
      uint64_t v119 = v118 + 1;
      uint64_t v11 = (char *)operator new(v118 + 1);
      *((void *)a2 + 1) = v60;
      *((void *)a2 + 2) = v119 | 0x8000000000000000;
      *(void *)a2 = v11;
      a2 = v11;
      if (v9) {
        goto LABEL_233;
      }
LABEL_237:
      std::string::pointer v74 = " Snapping module failed.";
      goto LABEL_238;
    case 7u:
      int v43 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v40 = HIBYTE(v135);
      }
      else {
        size_t v40 = (size_t)__p[1];
      }
      unint64_t v44 = v40 + 28;
      if (v40 + 28 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v44 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v42 = a2;
        a2[23] = v44;
LABEL_192:
        if (v43 >= 0) {
          __int16 v104 = __p;
        }
        else {
          __int16 v104 = (void **)__p[0];
        }
        memmove(a2, v104, v40);
        goto LABEL_196;
      }
      uint64_t v102 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v44 | 7) != 0x17) {
        uint64_t v102 = v44 | 7;
      }
      uint64_t v103 = v102 + 1;
      uint64_t v42 = (char *)operator new(v102 + 1);
      *((void *)a2 + 1) = v44;
      *((void *)a2 + 2) = v103 | 0x8000000000000000;
      *(void *)a2 = v42;
      a2 = v42;
      if (v40) {
        goto LABEL_192;
      }
LABEL_196:
      uint64_t v101 = " Path finding module failed.";
LABEL_197:
      uint64_t v105 = &v42[v40];
      *(_OWORD *)uint64_t v105 = *(_OWORD *)v101;
      *(_OWORD *)(v105 + 12) = *(_OWORD *)(v101 + 12);
      v105[28] = 0;
      break;
    case 8u:
      int v69 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v13 = HIBYTE(v135);
      }
      else {
        size_t v13 = (size_t)__p[1];
      }
      unint64_t v70 = v13 + 31;
      if (v13 + 31 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v70 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        unsigned int v15 = a2;
        a2[23] = v70;
LABEL_258:
        if (v69 >= 0) {
          unint64_t v130 = __p;
        }
        else {
          unint64_t v130 = (void **)__p[0];
        }
        memmove(a2, v130, v13);
        goto LABEL_262;
      }
      uint64_t v128 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v70 | 7) != 0x17) {
        uint64_t v128 = v70 | 7;
      }
      uint64_t v129 = v128 + 1;
      unsigned int v15 = (char *)operator new(v128 + 1);
      *((void *)a2 + 1) = v70;
      *((void *)a2 + 2) = v129 | 0x8000000000000000;
      *(void *)a2 = v15;
      a2 = v15;
      if (v13) {
        goto LABEL_258;
      }
LABEL_262:
      uint64_t v78 = " Journey planner module failed.";
      goto LABEL_263;
    case 9u:
      int v28 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v29 = HIBYTE(v135);
      }
      else {
        size_t v29 = (size_t)__p[1];
      }
      unint64_t v30 = v29 + 19;
      if (v29 + 19 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v30 >= 0x17)
      {
        uint64_t v88 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17) {
          uint64_t v88 = v30 | 7;
        }
        uint64_t v89 = v88 + 1;
        unint64_t v90 = (char *)operator new(v88 + 1);
        *((void *)a2 + 1) = v30;
        *((void *)a2 + 2) = v89 | 0x8000000000000000;
        *(void *)a2 = v90;
        a2 = v90;
      }
      else
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        a2[23] = v30;
        if (!v29) {
          goto LABEL_164;
        }
      }
      if (v28 >= 0) {
        long long v91 = __p;
      }
      else {
        long long v91 = (void **)__p[0];
      }
      memmove(a2, v91, v29);
LABEL_164:
      strcpy(&a2[v29], " ETA module failed.");
      break;
    case 0xAu:
      int v65 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v66 = HIBYTE(v135);
      }
      else {
        size_t v66 = (size_t)__p[1];
      }
      unint64_t v67 = v66 + 34;
      if (v66 + 34 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v67 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v68 = a2;
        a2[23] = v67;
LABEL_250:
        if (v65 >= 0) {
          uint64_t v127 = __p;
        }
        else {
          uint64_t v127 = (void **)__p[0];
        }
        memmove(a2, v127, v66);
        goto LABEL_254;
      }
      uint64_t v125 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v67 | 7) != 0x17) {
        uint64_t v125 = v67 | 7;
      }
      uint64_t v126 = v125 + 1;
      uint64_t v68 = (char *)operator new(v125 + 1);
      *((void *)a2 + 1) = v67;
      *((void *)a2 + 2) = v126 | 0x8000000000000000;
      *(void *)a2 = v68;
      a2 = v68;
      if (v66) {
        goto LABEL_250;
      }
LABEL_254:
      strcpy(&v68[v66], " ETA module failed for user route.");
      break;
    case 0xBu:
      int v16 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v17 = HIBYTE(v135);
      }
      else {
        size_t v17 = (size_t)__p[1];
      }
      unint64_t v18 = v17 + 41;
      if (v17 + 41 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v18 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        char v19 = a2;
        a2[23] = v18;
LABEL_136:
        if (v16 >= 0) {
          long long v81 = __p;
        }
        else {
          long long v81 = (void **)__p[0];
        }
        memmove(a2, v81, v17);
        goto LABEL_140;
      }
      uint64_t v79 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17) {
        uint64_t v79 = v18 | 7;
      }
      uint64_t v80 = v79 + 1;
      char v19 = (char *)operator new(v79 + 1);
      *((void *)a2 + 1) = v18;
      *((void *)a2 + 2) = v80 | 0x8000000000000000;
      *(void *)a2 = v19;
      a2 = v19;
      if (v17) {
        goto LABEL_136;
      }
LABEL_140:
      strcpy(&v19[v17], " Traversal time prediction module failed.");
      break;
    case 0xCu:
      int v24 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v25 = HIBYTE(v135);
      }
      else {
        size_t v25 = (size_t)__p[1];
      }
      unint64_t v26 = v25 + 29;
      if (v25 + 29 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v26 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        std::string::size_type v27 = a2;
        a2[23] = v26;
LABEL_152:
        if (v24 >= 0) {
          uint64_t v87 = __p;
        }
        else {
          uint64_t v87 = (void **)__p[0];
        }
        memmove(a2, v87, v25);
        goto LABEL_156;
      }
      uint64_t v85 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17) {
        uint64_t v85 = v26 | 7;
      }
      uint64_t v86 = v85 + 1;
      std::string::size_type v27 = (char *)operator new(v85 + 1);
      *((void *)a2 + 1) = v26;
      *((void *)a2 + 2) = v86 | 0x8000000000000000;
      *(void *)a2 = v27;
      a2 = v27;
      if (v25) {
        goto LABEL_152;
      }
LABEL_156:
      strcpy(&v27[v25], " Route builder module failed.");
      break;
    case 0xDu:
      int v55 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v56 = HIBYTE(v135);
      }
      else {
        size_t v56 = (size_t)__p[1];
      }
      unint64_t v57 = v56 + 44;
      if (v56 + 44 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v57 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        __int16 v58 = a2;
        a2[23] = v57;
LABEL_225:
        if (v55 >= 0) {
          uint64_t v117 = __p;
        }
        else {
          uint64_t v117 = (void **)__p[0];
        }
        memmove(a2, v117, v56);
        goto LABEL_229;
      }
      uint64_t v115 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v57 | 7) != 0x17) {
        uint64_t v115 = v57 | 7;
      }
      uint64_t v116 = v115 + 1;
      __int16 v58 = (char *)operator new(v115 + 1);
      *((void *)a2 + 1) = v57;
      *((void *)a2 + 2) = v116 | 0x8000000000000000;
      *(void *)a2 = v58;
      a2 = v58;
      if (v56) {
        goto LABEL_225;
      }
LABEL_229:
      strcpy(&v58[v56], " Route builder module failed for user route.");
      break;
    case 0xEu:
      int v12 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v13 = HIBYTE(v135);
      }
      else {
        size_t v13 = (size_t)__p[1];
      }
      unint64_t v14 = v13 + 31;
      if (v13 + 31 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v14 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        unsigned int v15 = a2;
        a2[23] = v14;
LABEL_128:
        if (v12 >= 0) {
          uint64_t v77 = __p;
        }
        else {
          uint64_t v77 = (void **)__p[0];
        }
        memmove(a2, v77, v13);
        goto LABEL_132;
      }
      uint64_t v75 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v75 = v14 | 7;
      }
      uint64_t v76 = v75 + 1;
      unsigned int v15 = (char *)operator new(v75 + 1);
      *((void *)a2 + 1) = v14;
      *((void *)a2 + 2) = v76 | 0x8000000000000000;
      *(void *)a2 = v15;
      a2 = v15;
      if (v13) {
        goto LABEL_128;
      }
LABEL_132:
      uint64_t v78 = " Route selection module failed.";
LABEL_263:
      std::string::size_type v131 = &v15[v13];
      *(_OWORD *)std::string::size_type v131 = *(_OWORD *)v78;
      *(_OWORD *)(v131 + 15) = *(_OWORD *)(v78 + 15);
      v131[31] = 0;
      break;
    case 0xFu:
      int v35 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v36 = HIBYTE(v135);
      }
      else {
        size_t v36 = (size_t)__p[1];
      }
      unint64_t v37 = v36 + 45;
      if (v36 + 45 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v37 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        std::string::size_type v38 = a2;
        a2[23] = v37;
LABEL_176:
        if (v35 >= 0) {
          std::string::size_type v97 = __p;
        }
        else {
          std::string::size_type v97 = (void **)__p[0];
        }
        memmove(a2, v97, v36);
        goto LABEL_180;
      }
      uint64_t v95 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v37 | 7) != 0x17) {
        uint64_t v95 = v37 | 7;
      }
      uint64_t v96 = v95 + 1;
      std::string::size_type v38 = (char *)operator new(v95 + 1);
      *((void *)a2 + 1) = v37;
      *((void *)a2 + 2) = v96 | 0x8000000000000000;
      *(void *)a2 = v38;
      a2 = v38;
      if (v36) {
        goto LABEL_176;
      }
LABEL_180:
      strcpy(&v38[v36], " Driving to walking transition module failed.");
      break;
    case 0x10u:
      int v8 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v9 = HIBYTE(v135);
      }
      else {
        size_t v9 = (size_t)__p[1];
      }
      unint64_t v10 = v9 + 24;
      if (v9 + 24 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v10 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        uint64_t v11 = a2;
        a2[23] = v10;
LABEL_120:
        if (v8 >= 0) {
          std::string::size_type v73 = __p;
        }
        else {
          std::string::size_type v73 = (void **)__p[0];
        }
        memmove(a2, v73, v9);
        goto LABEL_124;
      }
      uint64_t v71 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v71 = v10 | 7;
      }
      uint64_t v72 = v71 + 1;
      uint64_t v11 = (char *)operator new(v71 + 1);
      *((void *)a2 + 1) = v10;
      *((void *)a2 + 2) = v72 | 0x8000000000000000;
      *(void *)a2 = v11;
      a2 = v11;
      if (v9) {
        goto LABEL_120;
      }
LABEL_124:
      std::string::pointer v74 = " Guidance module failed.";
LABEL_238:
      uint64_t v121 = &v11[v9];
      *(_OWORD *)uint64_t v121 = *(_OWORD *)v74;
      *((void *)v121 + 2) = *((void *)v74 + 2);
      v121[24] = 0;
      break;
    case 0x11u:
      int v47 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v48 = HIBYTE(v135);
      }
      else {
        size_t v48 = (size_t)__p[1];
      }
      unint64_t v49 = v48 + 25;
      if (v48 + 25 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_266;
      }
      if (v49 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        std::string::pointer v50 = a2;
        a2[23] = v49;
LABEL_209:
        if (v47 >= 0) {
          uint64_t v111 = __p;
        }
        else {
          uint64_t v111 = (void **)__p[0];
        }
        memmove(a2, v111, v48);
        goto LABEL_213;
      }
      uint64_t v109 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17) {
        uint64_t v109 = v49 | 7;
      }
      uint64_t v110 = v109 + 1;
      std::string::pointer v50 = (char *)operator new(v109 + 1);
      *((void *)a2 + 1) = v49;
      *((void *)a2 + 2) = v110 | 0x8000000000000000;
      *(void *)a2 = v50;
      a2 = v50;
      if (v48) {
        goto LABEL_209;
      }
LABEL_213:
      strcpy(&v50[v48], " Analytics module failed.");
      break;
    case 0x12u:
      int v61 = SHIBYTE(v135);
      if (v135 >= 0) {
        size_t v62 = HIBYTE(v135);
      }
      else {
        size_t v62 = (size_t)__p[1];
      }
      unint64_t v63 = v62 + 32;
      if (v62 + 32 > 0x7FFFFFFFFFFFFFF7) {
LABEL_266:
      }
        sub_188D690();
      if (v63 <= 0x16)
      {
        *((void *)a2 + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        int v64 = a2;
        a2[23] = v63;
LABEL_242:
        if (v61 >= 0) {
          uint64_t v124 = __p;
        }
        else {
          uint64_t v124 = (void **)__p[0];
        }
        memmove(a2, v124, v62);
        goto LABEL_246;
      }
      uint64_t v122 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v63 | 7) != 0x17) {
        uint64_t v122 = v63 | 7;
      }
      uint64_t v123 = v122 + 1;
      int v64 = (char *)operator new(v122 + 1);
      *((void *)a2 + 1) = v63;
      *((void *)a2 + 2) = v123 | 0x8000000000000000;
      *(void *)a2 = v64;
      a2 = v64;
      if (v62) {
        goto LABEL_242;
      }
LABEL_246:
      strcpy(&v64[v62], " Response builder module failed.");
      break;
    default:
      goto LABEL_7;
  }
LABEL_264:
  if (SHIBYTE(v135) < 0) {
    operator delete(__p[0]);
  }
}

void sub_D4CC88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D4CD1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "WalkingRouteFindingModule");
  unint64_t v4 = *(void *)(a2 + 40);
  char v17 = 1;
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C947F8((uint64_t *)(a2 + 24), "Runtime", &v17, (uint64_t *)a1);
  }
  else
  {
    sub_C949C8(a2 + 40, *(void *)(a2 + 32), "Runtime", &v17, (uint64_t *)a1);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  char v16 = 4;
  if (v6 >= *(void *)(a2 + 40))
  {
    unint64_t v7 = sub_D142F0((uint64_t *)(a2 + 24), "Paths.OutOfCoverage", &v16, (unsigned int *)(a1 + 8));
  }
  else
  {
    sub_D144C0(a2 + 40, v6, "Paths.OutOfCoverage", &v16, (unsigned int *)(a1 + 8));
    unint64_t v7 = v6 + 48;
    *(void *)(a2 + 32) = v7;
  }
  *(void *)(a2 + 32) = v7;
  char v15 = 4;
  if (v7 >= *(void *)(a2 + 40))
  {
    unint64_t v8 = sub_D13FB4((uint64_t *)(a2 + 24), "Paths.NoResult", &v15, (unsigned int *)(a1 + 12));
  }
  else
  {
    sub_D14184(a2 + 40, v7, "Paths.NoResult", &v15, (unsigned int *)(a1 + 12));
    unint64_t v8 = v7 + 48;
    *(void *)(a2 + 32) = v8;
  }
  *(void *)(a2 + 32) = v8;
  char v14 = 4;
  if (v8 >= *(void *)(a2 + 40))
  {
    unint64_t v9 = sub_C9787C((uint64_t *)(a2 + 24), "Paths.TooLong", &v14, (unsigned int *)(a1 + 16));
  }
  else
  {
    sub_C97A4C(a2 + 40, v8, "Paths.TooLong", &v14, (unsigned int *)(a1 + 16));
    unint64_t v9 = v8 + 48;
    *(void *)(a2 + 32) = v9;
  }
  *(void *)(a2 + 32) = v9;
  char v13 = 4;
  if (v9 >= *(void *)(a2 + 40))
  {
    unint64_t v10 = sub_D4DAD8((uint64_t *)(a2 + 24), "ScannedNodes", &v13, (unsigned int *)(a1 + 20));
  }
  else
  {
    sub_D4DCA8(a2 + 40, v9, "ScannedNodes", &v13, (unsigned int *)(a1 + 20));
    unint64_t v10 = v9 + 48;
    *(void *)(a2 + 32) = v10;
  }
  *(void *)(a2 + 32) = v10;
  char v12 = 5;
  if (v10 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_C97204((uint64_t *)(a2 + 24), "UnwindingCache.Hitrate", &v12, (unsigned int *)(a1 + 24));
  }
  else
  {
    sub_C973D4(a2 + 40, v10, "UnwindingCache.Hitrate", &v12, (unsigned int *)(a1 + 24));
    uint64_t result = v10 + 48;
    *(void *)(a2 + 32) = v10 + 48;
  }
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_D4CFA4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D4CFB8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D4D048(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void *sub_D4D05C(void *a1)
{
  uint64_t v2 = (void *)a1[33];
  if (v2)
  {
    a1[34] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[30];
  if (v3)
  {
    a1[31] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_D4D0A0@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "WalkingRouteSelectionModule");
  unint64_t v4 = *(void *)(a2 + 40);
  char v9 = 1;
  unint64_t v5 = *(void *)(a2 + 32);
  if (v5 >= v4)
  {
    unint64_t v6 = sub_C55C14((uint64_t *)(a2 + 24), "Runtime", &v9, a1);
  }
  else
  {
    sub_C55DE4(a2 + 40, *(void *)(a2 + 32), "Runtime", &v9, a1);
    unint64_t v6 = v5 + 48;
    *(void *)(a2 + 32) = v6;
  }
  *(void *)(a2 + 32) = v6;
  char v8 = 4;
  if (v6 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_CF9664((uint64_t *)(a2 + 24), "Routes", &v8, a1 + 1);
  }
  else
  {
    sub_CF9834(a2 + 40, v6, "Routes", &v8, a1 + 1);
    uint64_t result = v6 + 48;
    *(void *)(a2 + 32) = v6 + 48;
  }
  *(void *)(a2 + 32) = result;
  return result;
}

void sub_D4D1B8(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D4D1CC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D4D1FC(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D4D210(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, char a6, void *a7, void *a8, int a9)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v17 = a1 + 32;
  uint64_t v18 = a1 + 56;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v19 = sub_37B3A8((uint64_t)a4);
  uint64_t v20 = *(void *)v19;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(v19 + 8);
  *(void *)(a1 + 80) = v20;
  *(void *)(a1 + 92) = sub_DBBBCC(a2);
  *(_WORD *)(a1 + 100) = v21;
  *(unsigned char *)(a1 + 102) = v22;
  *(void *)(a1 + 104) = a4;
  *(void *)(a1 + 112) = a5;
  *(void *)(a1 + 120) = sub_DBDB38(a2);
  *(unsigned char *)(a1 + 128) = sub_35E640();
  *(void *)(a1 + 136) = 0x7FFFFFFFFFFFFFFELL;
  *(void *)(a1 + 144) = sub_DC5D94(a2);
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = *a7;
  *(unsigned char *)(a1 + 168) = sub_35E640();
  *(void *)(a1 + 176) = *a8;
  *(unsigned char *)(a1 + 184) = a6;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "WalkingRouteFinding");
  v64[0] = 0;
  v64[1] = 0;
  uint64_t v65 = 0;
  uint64_t v23 = sub_374CDC((uint64_t)a4, (uint64_t)__p, v64);
  uint64_t v24 = v64[0];
  if (v64[0])
  {
    uint64_t v25 = v64[1];
    unint64_t v26 = (void *)v64[0];
    if (v64[1] != v64[0])
    {
      do
      {
        if (*(char *)(v25 - 1) < 0) {
          operator delete(*(void **)(v25 - 24));
        }
        v25 -= 24;
      }
      while (v25 != v24);
      unint64_t v26 = (void *)v64[0];
    }
    v64[1] = v24;
    operator delete(v26);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 192) = v23;
  *(void *)(a1 + 200) = sub_F6CDCC(a4, (unsigned __int8 *)(a1 + 92), *(unsigned __int8 *)(a1 + 128), v23);
  *(_DWORD *)(a1 + 208) = a9;
  sub_F5F1CC(a3, a4, (uint64_t)__p);
  std::string::size_type v27 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v27;
    operator delete(v27);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)__p;
  int v28 = __p[2];
  size_t v29 = __p[3];
  memset(__p, 0, 24);
  *(void *)(a1 + 16) = v28;
  *(void *)(a1 + 24) = v29;
  uint64_t v30 = *(void *)(a1 + 32);
  if (v30)
  {
    uint64_t v31 = *(void *)(a1 + 40);
    size_t v32 = *(void **)(a1 + 32);
    if (v31 != v30)
    {
      uint64_t v33 = *(void *)(a1 + 40);
      do
      {
        int v35 = *(void **)(v33 - 32);
        v33 -= 32;
        uint64_t v34 = v35;
        if (v35)
        {
          *(void *)(v31 - 24) = v34;
          operator delete(v34);
        }
        uint64_t v31 = v33;
      }
      while (v33 != v30);
      size_t v32 = *(void **)v17;
    }
    *(void *)(a1 + 40) = v30;
    operator delete(v32);
    *(void *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v60;
  *(void *)(a1 + 48) = v61;
  v60[1] = 0;
  uint64_t v61 = 0;
  v60[0] = 0;
  uint64_t v36 = *(void *)(a1 + 56);
  if (v36)
  {
    uint64_t v37 = *(void *)(a1 + 64);
    std::string::size_type v38 = *(void **)(a1 + 56);
    if (v37 != v36)
    {
      uint64_t v39 = *(void *)(a1 + 64);
      do
      {
        unint64_t v41 = *(void **)(v39 - 40);
        v39 -= 40;
        size_t v40 = v41;
        if (v41)
        {
          *(void *)(v37 - 32) = v40;
          operator delete(v40);
        }
        uint64_t v37 = v39;
      }
      while (v39 != v36);
      std::string::size_type v38 = *(void **)v18;
    }
    *(void *)(a1 + 64) = v36;
    operator delete(v38);
    *(void *)uint64_t v18 = 0;
    *(void *)(v18 + 8) = 0;
    *(void *)(v18 + 16) = 0;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v62;
  *(void *)(a1 + 72) = v63;
  v62[1] = 0;
  uint64_t v63 = 0;
  v62[0] = 0;
  *(_DWORD *)(a1 + 152) = sub_D4D6DC(a1);
  uint64_t v42 = *(void **)(a1 + 192);
  HIBYTE(v65) = 12;
  strcpy((char *)v64, "max_distance");
  uint64_t v43 = sub_561B0(v42, (uint64_t)v64);
  *(void *)(a1 + 136) = sub_A2D5F4(v43);
  if (SHIBYTE(v65) < 0) {
    operator delete((void *)v64[0]);
  }
  unint64_t v44 = (char *)v62[0];
  if (v62[0])
  {
    int v45 = v62[1];
    unint64_t v46 = v62[0];
    if (v62[1] != v62[0])
    {
      int v47 = (char *)v62[1];
      do
      {
        unint64_t v49 = (void *)*((void *)v47 - 5);
        v47 -= 40;
        size_t v48 = v49;
        if (v49)
        {
          *(v45 - 4) = v48;
          operator delete(v48);
        }
        int v45 = v47;
      }
      while (v47 != v44);
      unint64_t v46 = v62[0];
    }
    v62[1] = v44;
    operator delete(v46);
  }
  std::string::pointer v50 = (char *)v60[0];
  if (v60[0])
  {
    int v51 = v60[1];
    size_t v52 = v60[0];
    if (v60[1] != v60[0])
    {
      unint64_t v53 = (char *)v60[1];
      do
      {
        int v55 = (void *)*((void *)v53 - 4);
        v53 -= 32;
        std::string::size_type v54 = v55;
        if (v55)
        {
          *(v51 - 3) = v54;
          operator delete(v54);
        }
        int v51 = v53;
      }
      while (v53 != v50);
      size_t v52 = v60[0];
    }
    v60[1] = v50;
    operator delete(v52);
  }
  if (v58)
  {
    int v59 = v58;
    operator delete(v58);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

void sub_D4D614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_CF7EAC((uint64_t)&__p);
  sub_591CA4(v16);
  sub_C64510(v15);
  uint64_t v18 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v18;
    operator delete(v18);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D4D6DC(uint64_t a1)
{
  if (*(void *)(a1 + 160))
  {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 168);
    if (v2 == 2) {
      return v2;
    }
    if (v2 == 8) {
      return 4;
    }
  }
  int v4 = *(unsigned __int8 *)(a1 + 184);
  if (v4 == 1) {
    return 0;
  }
  if (v4 == 2)
  {
    if (*(void *)(a1 + 32) == *(void *)(a1 + 40) || *(void *)(a1 + 64) - *(void *)(a1 + 56) != 40) {
      return 1;
    }
    return 3;
  }
  uint64_t v5 = *(void *)(a1 + 104);
  HIBYTE(v26) = 7;
  strcpy((char *)&v25, "ETAPlan");
  uint64_t v23 = 0;
  long long v24 = 0uLL;
  unint64_t v6 = sub_374CDC(v5, (uint64_t)&v25, (uint64_t *)&v23);
  std::string __p = operator new(0x28uLL);
  long long v22 = xmmword_20B8FD0;
  strcpy((char *)__p, "max_num_destinations_for_p2p_queries");
  unsigned int v7 = sub_31AC04(v6, (uint64_t)&__p);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p);
  }
  char v8 = (void **)v23;
  if (v23)
  {
    char v9 = (void **)v24;
    unint64_t v10 = v23;
    if ((void *)v24 != v23)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      unint64_t v10 = v23;
    }
    *(void *)&long long v24 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v26) < 0)
  {
    operator delete(v25);
    if (*(void *)(a1 + 32) == *(void *)(a1 + 40)) {
      goto LABEL_27;
    }
  }
  else if (*(void *)(a1 + 32) == *(void *)(a1 + 40))
  {
    goto LABEL_27;
  }
  if (*(void *)(a1 + 64) - *(void *)(a1 + 56) == 40) {
    return 3;
  }
LABEL_27:
  uint64_t v11 = *(void **)(a1 + 192);
  uint64_t v25 = operator new(0x20uLL);
  long long v26 = xmmword_20B8870;
  strcpy((char *)v25, "enable_via_node_algorithm");
  if (sub_29D62C(v11, (uint64_t)&v25)
    && (uint64_t v12 = *(void *)(a1 + 56), v13 = *(void *)(a1 + 64), 0xCCCCCCCCCCCCCCCDLL * ((v13 - v12) >> 3) <= v7))
  {
    if (v12 != v13)
    {
      for (uint64_t i = v12 + 40; i != v13; i += 40)
      {
        uint64_t v15 = *(void *)(v12 + 32);
        if (v15 != 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v16 = *(void *)(i + 32);
          if (v15 < v16 || v16 == 0x7FFFFFFFFFFFFFFFLL) {
            uint64_t v12 = i;
          }
        }
      }
    }
    if (v12 == v13 || (uint64_t v18 = *(void *)(v12 + 32), v18 == 0x7FFFFFFFFFFFFFFFLL)) {
      uint64_t v18 = 0x7FFFFFFFFFFFFFFELL;
    }
    uint64_t v19 = *(void *)(a1 + 192);
    uint64_t v23 = operator new(0x19uLL);
    long long v24 = xmmword_20B9250;
    strcpy((char *)v23, "via_node_max_distance_m");
    uint64_t v20 = sub_5CDE0(v19, &v23);
    if (SHIBYTE(v24) < 0) {
      operator delete(v23);
    }
    uint64_t v2 = v18 <= v20;
    if ((SHIBYTE(v26) & 0x80000000) == 0) {
      return v2;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((SHIBYTE(v26) & 0x80000000) == 0) {
      return v2;
    }
  }
  operator delete(v25);
  return v2;
}

void sub_D4DA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if (a27 < 0)
    {
LABEL_5:
      operator delete(a22);
      _Unwind_Resume(a1);
    }
  }
  else if (a27 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D4DAD8(uint64_t *a1, char *a2, char *a3, unsigned int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  __int16 v21 = &v11[48 * v10];
  sub_D4DCA8(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    uint64_t v18 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      uint64_t v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D4DC94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D4DCA8(int a1, uint64_t a2, char *__s, char *a4, unsigned int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D4DE00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D4DE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  HIBYTE(v14[2]) = 21;
  strcpy((char *)v14, "WalkingRouteSelection");
  std::string __p = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  unint64_t v6 = sub_374CDC(a3, (uint64_t)v14, (uint64_t *)&__p);
  sub_D4DF34(a1, a2, a3, v6);
  unsigned int v7 = (void **)__p;
  if (__p)
  {
    char v8 = v12;
    size_t v9 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      size_t v9 = __p;
    }
    char v12 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v14[2]) < 0) {
    operator delete(v14[0]);
  }
  return a1;
}

void sub_D4DF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D4DF34(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  __p[23] = 17;
  strcpy(__p, "return_all_routes");
  BOOL v8 = sub_29D62C(a4, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)a1 = v8;
  __p[23] = 13;
  strcpy(__p, "filter_config");
  uint64_t v9 = sub_561B0(a4, (uint64_t)__p);
  int v10 = sub_D4E564(v9);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)(a1 + 4) = v10;
  __p[23] = 14;
  strcpy(__p, "max_num_routes");
  unsigned int v11 = sub_31AC04(a4, (uint64_t)__p);
  unsigned int v12 = sub_65BD8();
  if (v12 < v11) {
    unsigned int v11 = v12;
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)(a1 + 8) = v11;
  __p[23] = 20;
  strcpy(__p, "max_relative_sharing");
  double v13 = sub_5C7E8(a4, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(double *)(a1 + 16) = v13;
  __p[23] = 20;
  strcpy(__p, "min_line_distance_cm");
  int v14 = sub_31AC04(a4, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)(a1 + 24) = v14;
  strcpy(__p, "score_threshold_factor");
  __p[23] = 22;
  double v15 = sub_5C7E8(a4, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(double *)(a1 + 32) = v15;
  *(void *)std::string __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B91C0;
  strcpy(*(char **)__p, "score_threshold_additive");
  int v16 = sub_31AC04(a4, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(_DWORD *)(a1 + 40) = v16;
  *(_DWORD *)(a1 + 44) = 0;
  *(_WORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  unint64_t v17 = sub_DBBBCC(a2);
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 200) = v17;
  *(_WORD *)(a1 + 208) = v18;
  *(unsigned char *)(a1 + 210) = v19;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  __p[23] = 16;
  strcpy(__p, "route_difference");
  uint64_t v20 = (void *)sub_560F4(a4, (uint64_t)__p);
  sub_D4E82C((double *)(a1 + 264), v20);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)std::string __p = operator new(0x19uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9250;
  strcpy(*(char **)__p, "score_threshold_factors");
  sub_D4EAD4(a4, (uint64_t)__p, (void *)(a1 + 216));
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)std::string __p = operator new(0x19uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9250;
  strcpy(*(char **)__p, "score_threshold_offsets");
  sub_D4EAD4(a4, (uint64_t)__p, (void *)(a1 + 240));
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  __p[23] = 14;
  strcpy(__p, "RouteElevation");
  uint64_t v39 = 0;
  size_t v40 = 0;
  uint64_t v41 = 0;
  __int16 v21 = sub_374CDC(a3, (uint64_t)__p, (uint64_t *)&v39);
  sub_3CB5E0(v21, (uint64_t)v42);
  long long v22 = (void **)v39;
  if (v39)
  {
    uint64_t v23 = v40;
    long long v24 = v39;
    if (v40 != v39)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v22);
      long long v24 = v39;
    }
    size_t v40 = v22;
    operator delete(v24);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  __p[23] = 10;
  strcpy(__p, "min_run_cm");
  *(_DWORD *)(a1 + 44) = sub_31AC04(v42, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_468024((uint64_t)__p, v42);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)__p;
  sub_468394((uint64_t)__p, v42);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)__p;
  sub_46858C((uint64_t)__p, v42);
  long long v25 = v36;
  *(_OWORD *)(a1 + 144) = v35;
  *(_OWORD *)(a1 + 160) = v25;
  *(_OWORD *)(a1 + 176) = v37;
  *(void *)(a1 + 192) = v38;
  long long v26 = *(_OWORD *)&__p[16];
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 96) = v26;
  long long v27 = v34;
  *(_OWORD *)(a1 + 112) = v33;
  *(_OWORD *)(a1 + 128) = v27;
  int v28 = v43;
  if (v43)
  {
    do
    {
      uint64_t v31 = (void **)*v28;
      sub_55198((uint64_t)(v28 + 5));
      if (*((char *)v28 + 39) < 0) {
        operator delete(v28[2]);
      }
      operator delete(v28);
      int v28 = v31;
    }
    while (v31);
  }
  size_t v29 = (void *)v42[0];
  v42[0] = 0;
  if (v29) {
    operator delete(v29);
  }
  return a1;
}

void sub_D4E474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_5450C(v33 - 120);
  long long v35 = *v32;
  if (*v32)
  {
    *(void *)(v30 + 248) = v35;
    operator delete(v35);
    long long v36 = *v31;
    if (!*v31) {
      goto LABEL_6;
    }
  }
  else
  {
    long long v36 = *v31;
    if (!*v31) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  *(void *)(v30 + 224) = v36;
  operator delete(v36);
  goto LABEL_6;
}

uint64_t sub_D4E564(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 == 16)
    {
      if (**(void **)a1 == 0x6E65726566666964 && *(void *)(*(void *)a1 + 8) == 0x64657361625F6563) {
        return 1;
      }
      uint64_t v7 = *(void *)(a1 + 8);
    }
    else if (v7 == 27)
    {
      BOOL v8 = **(void **)a1 == 0x6C6F687365726874 && *(void *)(*(void *)a1 + 8) == 0x68735F646E615F64;
      BOOL v9 = v8 && *(void *)(*(void *)a1 + 16) == 0x61625F676E697261;
      if (v9 && *(void *)(*(void *)a1 + 19) == 0x64657361625F676ELL) {
        return 0;
      }
    }
    if (v7 != 4) {
      goto LABEL_45;
    }
    uint64_t v2 = *(_DWORD **)a1;
  }
  else
  {
    int v1 = *(unsigned __int8 *)(a1 + 23);
    uint64_t v2 = (_DWORD *)a1;
    if (v1 != 4)
    {
      if (v1 != 16)
      {
        if (v1 != 27) {
          goto LABEL_45;
        }
        BOOL v3 = *(void *)a1 == 0x6C6F687365726874 && *(void *)(a1 + 8) == 0x68735F646E615F64;
        BOOL v4 = v3 && *(void *)(a1 + 16) == 0x61625F676E697261;
        if (!v4 || *(void *)(a1 + 19) != 0x64657361625F676ELL) {
          goto LABEL_45;
        }
        return 0;
      }
      if (*(void *)a1 != 0x6E65726566666964 || *(void *)(a1 + 8) != 0x64657361625F6563)
      {
LABEL_45:
        exception = __cxa_allocate_exception(0x40uLL);
        std::operator+<char>();
        int v14 = std::string::append(&v17, "\" provided");
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        std::string::size_type v19 = v14->__r_.__value_.__r.__words[2];
        long long v18 = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        int v16 = (void *)sub_2F404((uint64_t)exception, &v18);
      }
      return 1;
    }
  }
  if (*v2 != 1701736302) {
    goto LABEL_45;
  }
  return 2;
}

void sub_D4E7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double *sub_D4E82C(double *a1, void *a2)
{
  *a1 = 2.0;
  a1[1] = 0.0;
  BOOL v4 = a1 + 1;
  a1[2] = 0.0;
  a1[3] = 0.0;
  HIBYTE(__p[2]) = 4;
  strcpy((char *)__p, "norm");
  int v5 = *((_DWORD *)sub_5D58C(a2, (uint64_t)__p) + 2);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (v5) {
      goto LABEL_3;
    }
LABEL_6:
    HIBYTE(__p[2]) = 4;
    strcpy((char *)__p, "norm");
    uint64_t v6 = sub_561B0(a2, (uint64_t)__p);
    uint64_t v7 = (unsigned __int16 *)v6;
    if (SHIBYTE(__p[2]) < 0)
    {
      operator delete(__p[0]);
      int v8 = *((char *)v7 + 23);
      if ((v8 & 0x80000000) == 0)
      {
LABEL_8:
        if (v8 == 3)
        {
          unsigned int v9 = bswap32(*v7) >> 16;
          BOOL v10 = v9 >= 0x6D69;
          if (v9 == 28009)
          {
LABEL_10:
            int v11 = *((unsigned __int8 *)v7 + 2) - 110;
            goto LABEL_17;
          }
LABEL_14:
          if (v10) {
            int v11 = 1;
          }
          else {
            int v11 = -1;
          }
LABEL_17:
          double v13 = INFINITY;
          if (!v11) {
            double v13 = -INFINITY;
          }
          goto LABEL_21;
        }
        goto LABEL_20;
      }
    }
    else
    {
      int v8 = *(char *)(v6 + 23);
      if ((v8 & 0x80000000) == 0) {
        goto LABEL_8;
      }
    }
    if (*((void *)v7 + 1) == 3)
    {
      uint64_t v7 = *(unsigned __int16 **)v7;
      unsigned int v12 = bswap32(*v7) >> 16;
      BOOL v10 = v12 >= 0x6D69;
      if (v12 == 28009) {
        goto LABEL_10;
      }
      goto LABEL_14;
    }
LABEL_20:
    double v13 = INFINITY;
LABEL_21:
    *a1 = v13;
    goto LABEL_22;
  }
  operator delete(__p[0]);
  if (!v5) {
    goto LABEL_6;
  }
LABEL_3:
  HIBYTE(__p[2]) = 4;
  strcpy((char *)__p, "norm");
  *a1 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
LABEL_22:
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "traversal_time_weight");
  double *v4 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "hiking_difficulty_weight");
  a1[2] = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "unique_road_segments_weight");
  a1[3] = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_D4EAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_D4EAD4(void *a1, uint64_t a2, void *a3)
{
  uint64_t result = sub_58070(a1, a2);
  if (result)
  {
    a3[1] = *a3;
    uint64_t result = (uint64_t *)sub_5C4AC(a1, a2);
    uint64_t v7 = *result;
    uint64_t v8 = result[1];
    if (*result != v8)
    {
      do
      {
        if (*(_DWORD *)(v7 + 8) != 2)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        unsigned int v9 = *(void **)v7;
        char v15 = 9;
        strcpy((char *)__p, "threshold");
        double v10 = sub_5C7E8(v9, (uint64_t)__p);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        double v13 = v10;
        char v15 = 5;
        strcpy((char *)__p, "value");
        double v11 = sub_5C7E8(v9, (uint64_t)__p);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        __p[0] = *(void **)&v11;
        uint64_t result = sub_D4EC6C((uint64_t)a3, &v13, __p);
        v7 += 16;
      }
      while (v7 != v8);
    }
  }
  return result;
}

void sub_D4EC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_D4EC6C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v7 = *(void **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 < v6)
  {
    *uint64_t v7 = *a2;
    v7[1] = *a3;
    uint64_t v8 = v7 + 2;
    goto LABEL_13;
  }
  unsigned int v9 = *(void **)a1;
  uint64_t v10 = ((uint64_t)v7 - *(void *)a1) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
  if (!v13) {
    unint64_t v14 = v11;
  }
  if (v14 >> 60) {
    sub_188D718();
  }
  uint64_t v15 = 16 * v14;
  int v16 = (char *)operator new(16 * v14);
  uint64_t v17 = *a3;
  long long v18 = &v16[16 * v10];
  std::string::size_type v19 = &v16[v15];
  *(void *)long long v18 = *a2;
  *((void *)v18 + 1) = v17;
  uint64_t v8 = v18 + 16;
  if (v7 == v9)
  {
    *(void *)a1 = v18;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v19;
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    uint64_t v20 = v18 - 16;
    *((_OWORD *)v18 - 1) = *((_OWORD *)v7 - 1);
    v7 -= 2;
    v18 -= 16;
  }
  while (v7 != v9);
  *(void *)a1 = v20;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v19;
  if (v9) {
LABEL_12:
  }
    operator delete(v9);
LABEL_13:
  *(void *)(a1 + 8) = v8;
  return v8 - 2;
}

uint64_t sub_D4ED98(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v8 = (long long *)sub_377D04(a4);
  char v16 = 1;
  sub_29E004((char *)__dst, v8);
  sub_DBFB34(a3, (uint64_t)__dst, a1 + 24);
  if (v16)
  {
    if (v15 < 0)
    {
      operator delete(__p);
      if ((v13 & 0x80000000) == 0)
      {
LABEL_4:
        if ((v11 & 0x80000000) == 0) {
          goto LABEL_5;
        }
LABEL_8:
        operator delete(__dst[0]);
        goto LABEL_5;
      }
    }
    else if ((v13 & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(v12);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_8;
  }
LABEL_5:
  *(void *)(a1 + 136) = a4;
  sub_D058A8(a1, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  sub_D4EF0C(*a2, a2[1], (char **)a1, *(char **)(a1 + 8));
  return a1;
}

void sub_D4EEC4(_Unwind_Exception *a1)
{
  sub_4BC1B8(v2);
  sub_5AB1B0(v1);
  _Unwind_Resume(a1);
}

char **sub_D4EF0C(uint64_t *a1, uint64_t *a2, char **a3, char *a4)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; i += 3)
    {
      uint64_t v7 = *i;
      if (*i == i[1])
      {
        *(_OWORD *)&v19[64] = 0u;
        *(_OWORD *)std::string __p = 0u;
        memset(v19, 0, 72);
        v19[32] = 1;
        v19[37] = 1;
        *(_DWORD *)&v19[38] = 0;
        *(_DWORD *)&v19[41] = 0;
        char v11 = &v20;
        *(_DWORD *)&v19[72] = -1;
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v7;
        *(void *)std::string::size_type v19 = *(void *)(v7 + 16);
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0;
        *(void *)uint64_t v7 = 0;
        *(_OWORD *)&v19[8] = *(_OWORD *)(v7 + 24);
        uint64_t v8 = *(void *)(v7 + 85);
        long long v9 = *(_OWORD *)(v7 + 72);
        long long v10 = *(_OWORD *)(v7 + 56);
        *(_OWORD *)&v19[24] = *(_OWORD *)(v7 + 40);
        *(_OWORD *)&v19[40] = v10;
        *(_OWORD *)&v19[56] = v9;
        *(void *)&v19[69] = v8;
        char v11 = (long long *)(v7 + 96);
        long long v12 = *(_OWORD *)(v7 + 96);
        uint64_t v21 = *(void *)(v7 + 112);
        long long v20 = v12;
      }
      *(void *)char v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = 0;
      char v13 = sub_D4F0B4(a3, a4, (uint64_t)__p);
      if (SHIBYTE(v21) < 0)
      {
        operator delete((void *)v20);
        unint64_t v14 = __p[0];
        if (__p[0])
        {
LABEL_12:
          char v15 = __p[1];
          char v16 = v14;
          if (__p[1] != v14)
          {
            do
              char v15 = (void *)sub_3AFFFC((uint64_t)v15 - 1056);
            while (v15 != v14);
            char v16 = __p[0];
          }
          __p[1] = v14;
          operator delete(v16);
        }
      }
      else
      {
        unint64_t v14 = __p[0];
        if (__p[0]) {
          goto LABEL_12;
        }
      }
      a4 = v13 + 120;
    }
  }
  return a3;
}

void sub_D4F0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_D4F0B4(char **a1, char *a2, uint64_t a3)
{
  BOOL v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((a2 - *a1) >> 3);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v25 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6 - (void)v7) >> 3) + 1;
    if (v25 > 0x222222222222222) {
      sub_2E00();
    }
    unint64_t v26 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v9 - (void)v7) >> 3);
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x111111111111111) {
      unint64_t v27 = 0x222222222222222;
    }
    else {
      unint64_t v27 = v25;
    }
    unint64_t v60 = a1 + 2;
    if (v27)
    {
      if (v27 > 0x222222222222222) {
        sub_188D718();
      }
      int v28 = (char *)operator new(120 * v27);
    }
    else
    {
      int v28 = 0;
    }
    size_t v56 = v28;
    unint64_t v57 = &v28[120 * v8];
    __int16 v58 = v57;
    int v59 = &v28[120 * v27];
    sub_D060A4((uint64_t)&v56, a3);
    long long v34 = v57;
    long long v35 = *a1;
    long long v36 = v57;
    if (*a1 != v4)
    {
      long long v36 = v57;
      long long v37 = v4;
      do
      {
        *((void *)v36 - 15) = 0;
        *((void *)v36 - 14) = 0;
        v36 -= 120;
        *((void *)v36 + 2) = 0;
        long long v38 = *(_OWORD *)(v37 - 15);
        v37 -= 15;
        *(_OWORD *)long long v36 = v38;
        *((void *)v36 + 2) = v37[2];
        v37[1] = 0;
        v37[2] = 0;
        *long long v37 = 0;
        long long v39 = *(_OWORD *)(v37 + 7);
        long long v40 = *(_OWORD *)(v37 + 9);
        uint64_t v41 = *(void *)((char *)v37 + 85);
        *(_OWORD *)(v36 + 40) = *(_OWORD *)(v37 + 5);
        *(void *)(v36 + 85) = v41;
        *(_OWORD *)(v36 + 72) = v40;
        *(_OWORD *)(v36 + 56) = v39;
        *(_OWORD *)(v36 + 24) = *(_OWORD *)(v37 + 3);
        long long v42 = *((_OWORD *)v37 + 6);
        *((void *)v36 + 14) = v37[14];
        *((_OWORD *)v36 + 6) = v42;
        v37[13] = 0;
        v37[14] = 0;
        v37[12] = 0;
      }
      while (v37 != (void *)v35);
    }
    unint64_t v57 = v36;
    uint64_t v43 = a1[1];
    unint64_t v44 = v58;
    if (v43 != v4)
    {
      do
      {
        *(void *)unint64_t v44 = 0;
        *((void *)v44 + 1) = 0;
        *((void *)v44 + 2) = 0;
        *(_OWORD *)unint64_t v44 = *(_OWORD *)v4;
        *((void *)v44 + 2) = *((void *)v4 + 2);
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        *(void *)BOOL v4 = 0;
        long long v45 = *(_OWORD *)(v4 + 56);
        long long v46 = *(_OWORD *)(v4 + 72);
        uint64_t v47 = *(void *)(v4 + 85);
        *(_OWORD *)(v44 + 40) = *(_OWORD *)(v4 + 40);
        *(void *)(v44 + 85) = v47;
        *(_OWORD *)(v44 + 72) = v46;
        *(_OWORD *)(v44 + 56) = v45;
        *(_OWORD *)(v44 + 24) = *(_OWORD *)(v4 + 24);
        long long v48 = *((_OWORD *)v4 + 6);
        *((void *)v44 + 14) = *((void *)v4 + 14);
        *((_OWORD *)v44 + 6) = v48;
        *((void *)v4 + 13) = 0;
        *((void *)v4 + 14) = 0;
        *((void *)v4 + 12) = 0;
        v44 += 120;
        v4 += 120;
      }
      while (v4 != v43);
      long long v36 = v57;
      BOOL v4 = a1[1];
    }
    unint64_t v49 = *a1;
    *a1 = v36;
    a1[1] = v44;
    std::string::pointer v50 = a1[2];
    a1[2] = v59;
    __int16 v58 = v4;
    int v59 = v50;
    size_t v56 = v49;
    unint64_t v57 = v49;
    if (v4 == v49)
    {
      if (!v4) {
        return v34;
      }
      goto LABEL_33;
    }
    while (1)
    {
      size_t v52 = (void **)(v4 - 120);
      __int16 v58 = v4 - 120;
      if (*(v4 - 1) < 0)
      {
        operator delete(*((void **)v4 - 3));
        unint64_t v53 = *v52;
        if (*v52)
        {
LABEL_42:
          uint64_t v54 = *((void *)v4 - 14);
          int v55 = v53;
          if ((void *)v54 != v53)
          {
            do
              uint64_t v54 = sub_3AFFFC(v54 - 1056);
            while ((void *)v54 != v53);
            int v55 = *v52;
          }
          *((void *)v4 - 14) = v53;
          operator delete(v55);
        }
      }
      else
      {
        unint64_t v53 = *v52;
        if (*v52) {
          goto LABEL_42;
        }
      }
      BOOL v4 = v58;
      if (v58 == v49)
      {
        BOOL v4 = v56;
        if (!v56) {
          return v34;
        }
LABEL_33:
        operator delete(v4);
        return v34;
      }
    }
  }
  if (a2 == (char *)v6)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((void *)a2 + 2) = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    size_t v29 = &v7[120 * v8];
    long long v30 = *(_OWORD *)(a3 + 56);
    long long v31 = *(_OWORD *)(a3 + 72);
    uint64_t v32 = *(void *)(a3 + 85);
    *(_OWORD *)(v29 + 40) = *(_OWORD *)(a3 + 40);
    *(void *)(v29 + 85) = v32;
    *(_OWORD *)(v29 + 72) = v31;
    *(_OWORD *)(v29 + 56) = v30;
    *(_OWORD *)(v29 + 24) = *(_OWORD *)(a3 + 24);
    long long v33 = *(_OWORD *)(a3 + 96);
    *((void *)v29 + 14) = *(void *)(a3 + 112);
    *((_OWORD *)v29 + 6) = v33;
    *(void *)(a3 + 104) = 0;
    *(void *)(a3 + 112) = 0;
    *(void *)(a3 + 96) = 0;
    a1[1] = a2 + 120;
  }
  else
  {
    long long v10 = a1[1];
    if (v6 >= 0x78)
    {
      unint64_t v11 = v6 - 120;
      long long v10 = a1[1];
      do
      {
        *(void *)long long v10 = 0;
        *((void *)v10 + 1) = 0;
        *((void *)v10 + 2) = 0;
        *(_OWORD *)long long v10 = *(_OWORD *)v11;
        *((void *)v10 + 2) = *(void *)(v11 + 16);
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)unint64_t v11 = 0;
        long long v12 = *(_OWORD *)(v11 + 56);
        long long v13 = *(_OWORD *)(v11 + 72);
        uint64_t v14 = *(void *)(v11 + 85);
        *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
        *(void *)(v10 + 85) = v14;
        *(_OWORD *)(v10 + 72) = v13;
        *(_OWORD *)(v10 + 56) = v12;
        *(_OWORD *)(v10 + 24) = *(_OWORD *)(v11 + 24);
        long long v15 = *(_OWORD *)(v11 + 96);
        *((void *)v10 + 14) = *(void *)(v11 + 112);
        *((_OWORD *)v10 + 6) = v15;
        *(void *)(v11 + 104) = 0;
        *(void *)(v11 + 112) = 0;
        *(void *)(v11 + 96) = 0;
        v10 += 120;
        v11 += 120;
      }
      while (v11 < v6);
    }
    a1[1] = v10;
    sub_D06324(a2, (void *)(v6 - 120), v6);
    uint64_t v16 = *(void *)v4;
    if (*(void *)v4)
    {
      uint64_t v17 = *((void *)v4 + 1);
      long long v18 = *(void **)v4;
      if (v17 != v16)
      {
        do
          uint64_t v17 = sub_3AFFFC(v17 - 1056);
        while (v17 != v16);
        long long v18 = *(void **)v4;
      }
      *((void *)v4 + 1) = v16;
      operator delete(v18);
      *(void *)BOOL v4 = 0;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
    }
    *(_OWORD *)BOOL v4 = *(_OWORD *)a3;
    *((void *)v4 + 2) = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    std::string::size_type v19 = &v7[120 * v8];
    long long v20 = *(_OWORD *)(a3 + 56);
    long long v21 = *(_OWORD *)(a3 + 72);
    uint64_t v22 = *(void *)(a3 + 85);
    *(_OWORD *)(v19 + 40) = *(_OWORD *)(a3 + 40);
    *(void *)(v19 + 85) = v22;
    *(_OWORD *)(v19 + 72) = v21;
    *(_OWORD *)(v19 + 56) = v20;
    *(_OWORD *)(v19 + 24) = *(_OWORD *)(a3 + 24);
    uint64_t v23 = (void **)(v19 + 96);
    if (v4[119] < 0) {
      operator delete(*v23);
    }
    long long v24 = *(_OWORD *)(a3 + 96);
    _DWORD v23[2] = *(void **)(a3 + 112);
    *(_OWORD *)uint64_t v23 = v24;
    *(unsigned char *)(a3 + 119) = 0;
    *(unsigned char *)(a3 + 96) = 0;
  }
  return v4;
}

void sub_D4F548(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_5AC2CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D4F55C(char *a1, int a2)
{
  sub_7B8BC(1, (char *)&v98);
  BOOL v4 = std::string::insert(&v98, 0, "[");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  unint64_t v6 = std::string::append(&v99, "]");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v101 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v99.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_3:
    int v8 = a2 - 6;
LABEL_4:
    switch(v8)
    {
      case 0:
        int v9 = SHIBYTE(v101);
        if (v101 >= 0) {
          size_t v10 = HIBYTE(v101);
        }
        else {
          size_t v10 = (size_t)__p[1];
        }
        unint64_t v11 = v10 + 24;
        if (v10 + 24 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_206;
        }
        if (v11 <= 0x16)
        {
          *((void *)a1 + 1) = 0;
          *((void *)a1 + 2) = 0;
          *(void *)a1 = 0;
          long long v12 = a1;
          a1[23] = v11;
LABEL_153:
          if (v9 >= 0) {
            uint64_t v79 = __p;
          }
          else {
            uint64_t v79 = (void **)__p[0];
          }
          memmove(a1, v79, v10);
          goto LABEL_157;
        }
        uint64_t v77 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v77 = v11 | 7;
        }
        uint64_t v78 = v77 + 1;
        long long v12 = (char *)operator new(v77 + 1);
        *((void *)a1 + 1) = v11;
        *((void *)a1 + 2) = v78 | 0x8000000000000000;
        *(void *)a1 = v12;
        a1 = v12;
        if (v10) {
          goto LABEL_153;
        }
LABEL_157:
        uint64_t v80 = " Snapping module failed.";
        goto LABEL_193;
      case 1:
        int v40 = SHIBYTE(v101);
        if (v101 >= 0) {
          size_t v41 = HIBYTE(v101);
        }
        else {
          size_t v41 = (size_t)__p[1];
        }
        unint64_t v42 = v41 + 28;
        if (v41 + 28 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_206;
        }
        if (v42 <= 0x16)
        {
          *((void *)a1 + 1) = 0;
          *((void *)a1 + 2) = 0;
          *(void *)a1 = 0;
          uint64_t v43 = a1;
          a1[23] = v42;
LABEL_161:
          if (v40 >= 0) {
            uint64_t v83 = __p;
          }
          else {
            uint64_t v83 = (void **)__p[0];
          }
          memmove(a1, v83, v41);
          goto LABEL_165;
        }
        uint64_t v81 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17) {
          uint64_t v81 = v42 | 7;
        }
        uint64_t v82 = v81 + 1;
        uint64_t v43 = (char *)operator new(v81 + 1);
        *((void *)a1 + 1) = v42;
        *((void *)a1 + 2) = v82 | 0x8000000000000000;
        *(void *)a1 = v43;
        a1 = v43;
        if (v41) {
          goto LABEL_161;
        }
LABEL_165:
        strcpy(&v43[v41], " Path finding module failed.");
        if ((v40 & 0x80) != 0) {
          goto LABEL_205;
        }
        return;
      case 2:
        int v29 = SHIBYTE(v101);
        if (v101 >= 0) {
          size_t v30 = HIBYTE(v101);
        }
        else {
          size_t v30 = (size_t)__p[1];
        }
        unint64_t v31 = v30 + 31;
        if (v30 + 31 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_206;
        }
        if (v31 <= 0x16)
        {
          *((void *)a1 + 1) = 0;
          *((void *)a1 + 2) = 0;
          *(void *)a1 = 0;
          uint64_t v32 = a1;
          a1[23] = v31;
LABEL_127:
          if (v29 >= 0) {
            uint64_t v68 = __p;
          }
          else {
            uint64_t v68 = (void **)__p[0];
          }
          memmove(a1, v68, v30);
          goto LABEL_131;
        }
        uint64_t v66 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v31 | 7) != 0x17) {
          uint64_t v66 = v31 | 7;
        }
        uint64_t v67 = v66 + 1;
        uint64_t v32 = (char *)operator new(v66 + 1);
        *((void *)a1 + 1) = v31;
        *((void *)a1 + 2) = v67 | 0x8000000000000000;
        *(void *)a1 = v32;
        a1 = v32;
        if (v30) {
          goto LABEL_127;
        }
LABEL_131:
        int v69 = " Journey planner module failed.";
        goto LABEL_203;
      case 3:
        int v33 = SHIBYTE(v101);
        if (v101 >= 0) {
          size_t v34 = HIBYTE(v101);
        }
        else {
          size_t v34 = (size_t)__p[1];
        }
        unint64_t v35 = v34 + 19;
        if (v34 + 19 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_206;
        }
        if (v35 >= 0x17)
        {
          uint64_t v70 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v35 | 7) != 0x17) {
            uint64_t v70 = v35 | 7;
          }
          uint64_t v71 = v70 + 1;
          uint64_t v72 = (char *)operator new(v70 + 1);
          *((void *)a1 + 1) = v35;
          *((void *)a1 + 2) = v71 | 0x8000000000000000;
          *(void *)a1 = v72;
          a1 = v72;
        }
        else
        {
          *((void *)a1 + 1) = 0;
          *((void *)a1 + 2) = 0;
          *(void *)a1 = 0;
          a1[23] = v35;
          if (!v34) {
            goto LABEL_139;
          }
        }
        if (v33 >= 0) {
          std::string::size_type v73 = __p;
        }
        else {
          std::string::size_type v73 = (void **)__p[0];
        }
        memmove(a1, v73, v34);
LABEL_139:
        strcpy(&a1[v34], " ETA module failed.");
        if ((v33 & 0x80) != 0) {
          goto LABEL_205;
        }
        return;
      case 4:
        int v17 = SHIBYTE(v101);
        if (v101 >= 0) {
          size_t v18 = HIBYTE(v101);
        }
        else {
          size_t v18 = (size_t)__p[1];
        }
        unint64_t v19 = v18 + 34;
        if (v18 + 34 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_206;
        }
        if (v19 <= 0x16)
        {
          *((void *)a1 + 1) = 0;
          *((void *)a1 + 2) = 0;
          *(void *)a1 = 0;
          long long v20 = a1;
          a1[23] = v19;
LABEL_100:
          if (v17 >= 0) {
            int v59 = __p;
          }
          else {
            int v59 = (void **)__p[0];
          }
          memmove(a1, v59, v18);
          goto LABEL_104;
        }
        uint64_t v57 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17) {
          uint64_t v57 = v19 | 7;
        }
        uint64_t v58 = v57 + 1;
        long long v20 = (char *)operator new(v57 + 1);
        *((void *)a1 + 1) = v19;
        *((void *)a1 + 2) = v58 | 0x8000000000000000;
        *(void *)a1 = v20;
        a1 = v20;
        if (v18) {
          goto LABEL_100;
        }
LABEL_104:
        strcpy(&v20[v18], " ETA module failed for user route.");
        if ((v17 & 0x80) != 0) {
          goto LABEL_205;
        }
        return;
      case 5:
        int v44 = SHIBYTE(v101);
        if (v101 >= 0) {
          size_t v45 = HIBYTE(v101);
        }
        else {
          size_t v45 = (size_t)__p[1];
        }
        unint64_t v46 = v45 + 41;
        if (v45 + 41 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_206;
        }
        if (v46 <= 0x16)
        {
          *((void *)a1 + 1) = 0;
          *((void *)a1 + 2) = 0;
          *(void *)a1 = 0;
          uint64_t v47 = a1;
          a1[23] = v46;
LABEL_170:
          if (v44 >= 0) {
            uint64_t v86 = __p;
          }
          else {
            uint64_t v86 = (void **)__p[0];
          }
          memmove(a1, v86, v45);
          goto LABEL_174;
        }
        uint64_t v84 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v46 | 7) != 0x17) {
          uint64_t v84 = v46 | 7;
        }
        uint64_t v85 = v84 + 1;
        uint64_t v47 = (char *)operator new(v84 + 1);
        *((void *)a1 + 1) = v46;
        *((void *)a1 + 2) = v85 | 0x8000000000000000;
        *(void *)a1 = v47;
        a1 = v47;
        if (v45) {
          goto LABEL_170;
        }
LABEL_174:
        strcpy(&v47[v45], " Traversal time prediction module failed.");
        if ((v44 & 0x80) != 0) {
          goto LABEL_205;
        }
        return;
      case 6:
        int v48 = SHIBYTE(v101);
        if (v101 >= 0) {
          size_t v49 = HIBYTE(v101);
        }
        else {
          size_t v49 = (size_t)__p[1];
        }
        unint64_t v50 = v49 + 29;
        if (v49 + 29 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_206;
        }
        if (v50 <= 0x16)
        {
          *((void *)a1 + 1) = 0;
          *((void *)a1 + 2) = 0;
          *(void *)a1 = 0;
          int v51 = a1;
          a1[23] = v50;
LABEL_179:
          if (v48 >= 0) {
            uint64_t v89 = __p;
          }
          else {
            uint64_t v89 = (void **)__p[0];
          }
          memmove(a1, v89, v49);
          goto LABEL_183;
        }
        uint64_t v87 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v50 | 7) != 0x17) {
          uint64_t v87 = v50 | 7;
        }
        uint64_t v88 = v87 + 1;
        int v51 = (char *)operator new(v87 + 1);
        *((void *)a1 + 1) = v50;
        *((void *)a1 + 2) = v88 | 0x8000000000000000;
        *(void *)a1 = v51;
        a1 = v51;
        if (v49) {
          goto LABEL_179;
        }
LABEL_183:
        strcpy(&v51[v49], " Route builder module failed.");
        if ((v48 & 0x80) != 0) {
          goto LABEL_205;
        }
        return;
      case 7:
        int v36 = SHIBYTE(v101);
        if (v101 >= 0) {
          size_t v37 = HIBYTE(v101);
        }
        else {
          size_t v37 = (size_t)__p[1];
        }
        unint64_t v38 = v37 + 44;
        if (v37 + 44 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_206;
        }
        if (v38 <= 0x16)
        {
          *((void *)a1 + 1) = 0;
          *((void *)a1 + 2) = 0;
          *(void *)a1 = 0;
          long long v39 = a1;
          a1[23] = v38;
LABEL_144:
          if (v36 >= 0) {
            uint64_t v76 = __p;
          }
          else {
            uint64_t v76 = (void **)__p[0];
          }
          memmove(a1, v76, v37);
          goto LABEL_148;
        }
        uint64_t v74 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v38 | 7) != 0x17) {
          uint64_t v74 = v38 | 7;
        }
        uint64_t v75 = v74 + 1;
        long long v39 = (char *)operator new(v74 + 1);
        *((void *)a1 + 1) = v38;
        *((void *)a1 + 2) = v75 | 0x8000000000000000;
        *(void *)a1 = v39;
        a1 = v39;
        if (v37) {
          goto LABEL_144;
        }
LABEL_148:
        strcpy(&v39[v37], " Route builder module failed for user route.");
        if ((v36 & 0x80) != 0) {
          goto LABEL_205;
        }
        return;
      case 8:
        int v29 = SHIBYTE(v101);
        if (v101 >= 0) {
          size_t v30 = HIBYTE(v101);
        }
        else {
          size_t v30 = (size_t)__p[1];
        }
        unint64_t v53 = v30 + 31;
        if (v30 + 31 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_206;
        }
        if (v53 <= 0x16)
        {
          *((void *)a1 + 1) = 0;
          *((void *)a1 + 2) = 0;
          *(void *)a1 = 0;
          uint64_t v32 = a1;
          a1[23] = v53;
LABEL_198:
          if (v29 >= 0) {
            uint64_t v96 = __p;
          }
          else {
            uint64_t v96 = (void **)__p[0];
          }
          memmove(a1, v96, v30);
          goto LABEL_202;
        }
        uint64_t v94 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v53 | 7) != 0x17) {
          uint64_t v94 = v53 | 7;
        }
        uint64_t v95 = v94 + 1;
        uint64_t v32 = (char *)operator new(v94 + 1);
        *((void *)a1 + 1) = v53;
        *((void *)a1 + 2) = v95 | 0x8000000000000000;
        *(void *)a1 = v32;
        a1 = v32;
        if (v30) {
          goto LABEL_198;
        }
LABEL_202:
        int v69 = " Route selection module failed.";
LABEL_203:
        std::string::size_type v97 = &v32[v30];
        *(_OWORD *)std::string::size_type v97 = *(_OWORD *)v69;
        *(_OWORD *)(v97 + 15) = *(_OWORD *)(v69 + 15);
        v97[31] = 0;
        if ((v29 & 0x80) == 0) {
          return;
        }
        goto LABEL_205;
      case 9:
        int v25 = SHIBYTE(v101);
        if (v101 >= 0) {
          size_t v26 = HIBYTE(v101);
        }
        else {
          size_t v26 = (size_t)__p[1];
        }
        unint64_t v27 = v26 + 45;
        if (v26 + 45 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_206;
        }
        if (v27 <= 0x16)
        {
          *((void *)a1 + 1) = 0;
          *((void *)a1 + 2) = 0;
          *(void *)a1 = 0;
          int v28 = a1;
          a1[23] = v27;
LABEL_118:
          if (v25 >= 0) {
            uint64_t v65 = __p;
          }
          else {
            uint64_t v65 = (void **)__p[0];
          }
          memmove(a1, v65, v26);
          goto LABEL_122;
        }
        uint64_t v63 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v27 | 7) != 0x17) {
          uint64_t v63 = v27 | 7;
        }
        uint64_t v64 = v63 + 1;
        int v28 = (char *)operator new(v63 + 1);
        *((void *)a1 + 1) = v27;
        *((void *)a1 + 2) = v64 | 0x8000000000000000;
        *(void *)a1 = v28;
        a1 = v28;
        if (v26) {
          goto LABEL_118;
        }
LABEL_122:
        strcpy(&v28[v26], " Driving to walking transition module failed.");
        if ((v25 & 0x80) != 0) {
          goto LABEL_205;
        }
        return;
      case 10:
        int v9 = SHIBYTE(v101);
        if (v101 >= 0) {
          size_t v10 = HIBYTE(v101);
        }
        else {
          size_t v10 = (size_t)__p[1];
        }
        unint64_t v52 = v10 + 24;
        if (v10 + 24 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_206;
        }
        if (v52 <= 0x16)
        {
          *((void *)a1 + 1) = 0;
          *((void *)a1 + 2) = 0;
          *(void *)a1 = 0;
          long long v12 = a1;
          a1[23] = v52;
LABEL_188:
          if (v9 >= 0) {
            uint64_t v92 = __p;
          }
          else {
            uint64_t v92 = (void **)__p[0];
          }
          memmove(a1, v92, v10);
          goto LABEL_192;
        }
        uint64_t v90 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v52 | 7) != 0x17) {
          uint64_t v90 = v52 | 7;
        }
        uint64_t v91 = v90 + 1;
        long long v12 = (char *)operator new(v90 + 1);
        *((void *)a1 + 1) = v52;
        *((void *)a1 + 2) = v91 | 0x8000000000000000;
        *(void *)a1 = v12;
        a1 = v12;
        if (v10) {
          goto LABEL_188;
        }
LABEL_192:
        uint64_t v80 = " Guidance module failed.";
LABEL_193:
        uint64_t v93 = &v12[v10];
        *(_OWORD *)uint64_t v93 = *(_OWORD *)v80;
        *((void *)v93 + 2) = *((void *)v80 + 2);
        v93[24] = 0;
        if ((v9 & 0x80) != 0) {
          goto LABEL_205;
        }
        return;
      case 11:
        int v13 = SHIBYTE(v101);
        if (v101 >= 0) {
          size_t v14 = HIBYTE(v101);
        }
        else {
          size_t v14 = (size_t)__p[1];
        }
        unint64_t v15 = v14 + 25;
        if (v14 + 25 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_206;
        }
        if (v15 <= 0x16)
        {
          *((void *)a1 + 1) = 0;
          *((void *)a1 + 2) = 0;
          *(void *)a1 = 0;
          uint64_t v16 = a1;
          a1[23] = v15;
LABEL_91:
          if (v13 >= 0) {
            size_t v56 = __p;
          }
          else {
            size_t v56 = (void **)__p[0];
          }
          memmove(a1, v56, v14);
          goto LABEL_95;
        }
        uint64_t v54 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17) {
          uint64_t v54 = v15 | 7;
        }
        uint64_t v55 = v54 + 1;
        uint64_t v16 = (char *)operator new(v54 + 1);
        *((void *)a1 + 1) = v15;
        *((void *)a1 + 2) = v55 | 0x8000000000000000;
        *(void *)a1 = v16;
        a1 = v16;
        if (v14) {
          goto LABEL_91;
        }
LABEL_95:
        strcpy(&v16[v14], " Analytics module failed.");
        if ((v13 & 0x80) != 0) {
          goto LABEL_205;
        }
        return;
      case 12:
        int v21 = SHIBYTE(v101);
        if (v101 >= 0) {
          size_t v22 = HIBYTE(v101);
        }
        else {
          size_t v22 = (size_t)__p[1];
        }
        unint64_t v23 = v22 + 32;
        if (v22 + 32 > 0x7FFFFFFFFFFFFFF7) {
LABEL_206:
        }
          sub_188D690();
        if (v23 <= 0x16)
        {
          *((void *)a1 + 1) = 0;
          *((void *)a1 + 2) = 0;
          *(void *)a1 = 0;
          long long v24 = a1;
          a1[23] = v23;
LABEL_109:
          if (v21 >= 0) {
            size_t v62 = __p;
          }
          else {
            size_t v62 = (void **)__p[0];
          }
          memmove(a1, v62, v22);
          goto LABEL_113;
        }
        uint64_t v60 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17) {
          uint64_t v60 = v23 | 7;
        }
        uint64_t v61 = v60 + 1;
        long long v24 = (char *)operator new(v60 + 1);
        *((void *)a1 + 1) = v23;
        *((void *)a1 + 2) = v61 | 0x8000000000000000;
        *(void *)a1 = v24;
        a1 = v24;
        if (v22) {
          goto LABEL_109;
        }
LABEL_113:
        strcpy(&v24[v22], " Response builder module failed.");
        if ((v21 & 0x80) != 0) {
          goto LABEL_205;
        }
        return;
      default:
        goto LABEL_13;
    }
  }
  operator delete(v98.__r_.__value_.__l.__data_);
  int v8 = a2 - 6;
  if ((a2 - 6) <= 0xC) {
    goto LABEL_4;
  }
LABEL_13:
  a1[23] = 0;
  *a1 = 0;
  if (v101 < 0) {
LABEL_205:
  }
    operator delete(__p[0]);
}

void sub_D50010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D5008C(uint64_t a1)
{
  if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
    uint64_t v2 = *(void **)(a1 + 96);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 136));
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
LABEL_4:
  BOOL v4 = (void **)(a1 + 56);
  sub_BC2EEC(&v4);
  BOOL v4 = (void **)(a1 + 32);
  sub_BC2EEC(&v4);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_D50128(uint64_t a1)
{
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    uint64_t v2 = *(void **)(a1 + 64);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 88));
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
LABEL_4:
  BOOL v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }
  BOOL v4 = *(void **)a1;
  if (*(void *)a1)
  {
    long long v5 = *(void **)(a1 + 8);
    unint64_t v6 = *(void **)a1;
    if (v5 != v4)
    {
      do
      {
        v5 -= 22;
        sub_9F58F0(a1 + 16, v5);
      }
      while (v5 != v4);
      unint64_t v6 = *(void **)a1;
    }
    *(void *)(a1 + 8) = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_D501D0(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    sub_CD5CBC(a1, a1 + 8);
    return a1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  long long v5 = *(void **)(a1 + 24);
  if (v4 != v3)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 32;
    }
    while (v4 != v3);
    long long v5 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v3;
  operator delete(v5);
  return a1;
}

uint64_t sub_D5026C(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    unint64_t v6 = (void **)(a1 + 8);
    sub_BC2EEC(&v6);
    return a1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  long long v5 = *(void **)(a1 + 24);
  if (v4 != v3)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 32;
    }
    while (v4 != v3);
    long long v5 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v3;
  operator delete(v5);
  return a1;
}

void sub_D50318(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  long long v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)v4) >> 4) >= a2)
  {
    if (a2)
    {
      unint64_t v11 = &v4[12 * a2];
      do
      {
        *(void *)uint64_t v4 = 0x8000000080000000;
        v4[2] = 0x7FFFFFFF;
        *((void *)v4 + 2) = 0x7FFFFFFFFFFFFFFFLL;
        *((void *)v4 + 3) = 0;
        *((void *)v4 + 4) = 0;
        *((void *)v4 + 5) = 0;
        v4 += 12;
      }
      while (v4 != v11);
      uint64_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (unsigned char *)*a1) >> 4);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v9 = 0x555555555555555;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x555555555555555) {
        sub_188D718();
      }
      size_t v10 = (char *)operator new(48 * v9);
    }
    else
    {
      size_t v10 = 0;
    }
    long long v12 = &v10[48 * v6];
    int v13 = &v10[48 * v9];
    size_t v14 = &v12[48 * a2];
    unint64_t v15 = v12;
    do
    {
      *(void *)unint64_t v15 = 0x8000000080000000;
      *((_DWORD *)v15 + 2) = 0x7FFFFFFF;
      *((void *)v15 + 2) = 0x7FFFFFFFFFFFFFFFLL;
      *((void *)v15 + 3) = 0;
      *((void *)v15 + 4) = 0;
      *((void *)v15 + 5) = 0;
      v15 += 48;
    }
    while (v15 != v14);
    uint64_t v16 = (char *)*a1;
    int v17 = (char *)a1[1];
    if (v17 == *a1)
    {
      *a1 = v12;
      a1[1] = v14;
      a1[2] = v13;
      if (!v17) {
        return;
      }
      goto LABEL_31;
    }
    do
    {
      uint64_t v18 = *((void *)v17 - 4);
      *((_OWORD *)v12 - 3) = *((_OWORD *)v17 - 3);
      *((void *)v12 - 4) = v18;
      *((void *)v12 - 3) = 0;
      *((void *)v12 - 2) = 0;
      *((void *)v12 - 1) = 0;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)(v17 - 24);
      *((void *)v12 - 1) = *((void *)v17 - 1);
      v12 -= 48;
      *((void *)v17 - 3) = 0;
      *((void *)v17 - 2) = 0;
      *((void *)v17 - 1) = 0;
      v17 -= 48;
    }
    while (v17 != v16);
    unint64_t v19 = (char *)*a1;
    int v17 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (v17 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v17 - 3);
        if (v20)
        {
          uint64_t v21 = *((void *)v17 - 2);
          size_t v22 = (void *)*((void *)v17 - 3);
          if (v21 != v20)
          {
            do
              uint64_t v21 = sub_4D4B58(v21 - 160);
            while (v21 != v20);
            size_t v22 = (void *)*((void *)v17 - 3);
          }
          *((void *)v17 - 2) = v20;
          operator delete(v22);
        }
        v17 -= 48;
      }
      while (v17 != v19);
      int v17 = v19;
    }
    if (v17)
    {
LABEL_31:
      operator delete(v17);
    }
  }
}

uint64_t sub_D50548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _DWORD *a5)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  char v10 = sub_D50848(a5 + 2);
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 24) = v10;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v11 = *a4;
  uint64_t v12 = a4[1];
  if (*a4 == v12)
  {
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  else
  {
    int v13 = 0;
    do
    {
      if (!*(_DWORD *)(v11 + 152))
      {
        if ((unint64_t)v13 >= *(void *)(a1 + 48))
        {
          int v13 = (void *)sub_BC3210((int64x2_t *)(a1 + 32), v11);
        }
        else
        {
          sub_8EB7C4(v13, v11);
          v13 += 23;
          *(void *)(a1 + 40) = v13;
        }
        *(void *)(a1 + 40) = v13;
      }
      v11 += 184;
    }
    while (v11 != v12);
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    if (v14 != v15)
    {
      uint64_t v16 = 0;
      do
      {
        if (*(_DWORD *)(v14 + 152) == 1)
        {
          if ((unint64_t)v16 >= *(void *)(a1 + 72))
          {
            uint64_t v16 = (void *)sub_BC3210((int64x2_t *)(a1 + 56), v14);
          }
          else
          {
            sub_8EB7C4(v16, v14);
            v16 += 23;
            *(void *)(a1 + 64) = v16;
          }
          *(void *)(a1 + 64) = v16;
        }
        v14 += 184;
      }
      while (v14 != v15);
    }
  }
  *(_DWORD *)(a1 + 80) = *a5;
  *(_DWORD *)(a1 + 84) = a5[1];
  *(void *)(a1 + 88) = 1;
  if (*(void *)(a3 + 320)) {
    int v17 = *(uint64_t (****)())(a3 + 320);
  }
  else {
    int v17 = &off_2536528;
  }
  sub_DC4B44((uint64_t)v17, (char **)(a1 + 96));
  *(unsigned char *)(a1 + 120) = sub_DBCAAC(a3);
  uint64_t v18 = *(uint64_t (****)())(a3 + 344);
  if (!v18) {
    uint64_t v18 = &off_2539290;
  }
  *(unsigned char *)(a1 + 121) = *((unsigned char *)v18 + 218);
  char v19 = sub_DBCB0C(a3);
  uint64_t v20 = *(uint64_t (****)())(a3 + 320);
  if (!v20) {
    uint64_t v20 = &off_2536528;
  }
  uint64_t v21 = (uint64_t (***)())v20[8];
  if (v21) {
    size_t v22 = v21;
  }
  else {
    size_t v22 = &off_2536508;
  }
  char v23 = sub_DB724C((uint64_t)v22);
  long long v24 = *(uint64_t (****)())(a3 + 320);
  if (!v24) {
    long long v24 = &off_2536528;
  }
  int v25 = (uint64_t (***)())v24[8];
  if (v25) {
    size_t v26 = v25;
  }
  else {
    size_t v26 = &off_2536508;
  }
  BOOL v27 = sub_DB7260((uint64_t)v26);
  uint64_t v28 = sub_377D04(a2);
  *(unsigned char *)(a1 + 128) = v19;
  *(unsigned char *)(a1 + 129) = v23;
  *(unsigned char *)(a1 + 130) = v27;
  if (*(char *)(v28 + 47) < 0)
  {
    sub_4200((unsigned char *)(a1 + 136), *(void **)(v28 + 24), *(void *)(v28 + 32));
  }
  else
  {
    long long v29 = *(_OWORD *)(v28 + 24);
    *(void *)(a1 + 152) = *(void *)(v28 + 40);
    *(_OWORD *)(a1 + 136) = v29;
  }
  *(_DWORD *)(a1 + 160) = sub_DC0958(a3);
  *(unsigned char *)(a1 + 164) = sub_DC09B0(a3);
  return a1;
}

void sub_D507B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_BC2EEC((void ***)va);
  sub_BC2EEC((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D50848(_DWORD *a1)
{
  if (!*a1) {
    return 0;
  }
  if (*a1 != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v4, "Unknown request type supplied to transit journey planner module input");
    uint64_t v3 = (void *)sub_2F404((uint64_t)exception, &v4);
  }
  return 1;
}

void sub_D508DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_D5090C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v8 = (long long *)sub_377D04(a4);
  LOBYTE(v22[0]) = 1;
  sub_29E004((char *)v17, v8);
  sub_DBFB34(a3, (uint64_t)v17, (uint64_t)(a1 + 3));
  if (LOBYTE(v22[0]))
  {
    if (SHIBYTE(v21) < 0)
    {
      operator delete(*((void **)&v20 + 1));
      if ((SBYTE7(v20) & 0x80000000) == 0)
      {
LABEL_4:
        if ((SHIBYTE(v18) & 0x80000000) == 0) {
          goto LABEL_5;
        }
LABEL_29:
        operator delete(v17[0]);
        goto LABEL_5;
      }
    }
    else if ((SBYTE7(v20) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(v19[0]);
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }
LABEL_5:
  a1[17] = a4;
  unint64_t v9 = 0x8E38E38E38E38E39 * ((uint64_t)(a2[1] - *a2) >> 3);
  *(_OWORD *)int v17 = xmmword_20E81C0;
  BYTE1(v17[1]) = 0;
  uint64_t v18 = 0x7FFFFFFFLL;
  *(_OWORD *)char v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  *(_OWORD *)size_t v22 = 0u;
  *(_OWORD *)char v23 = 0u;
  long long v24 = 0u;
  int v25 = -1;
  char v26 = 0;
  int v27 = 0;
  char v28 = 0;
  size_t v30 = 0;
  uint64_t v31 = 0;
  std::string __p = 0;
  char v32 = 0;
  uint64_t v33 = 0x3FF0000000000000;
  char v10 = (void *)a1[1];
  unint64_t v11 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v10 - *a1) >> 4);
  if (v9 <= v11)
  {
    if (v9 < v11)
    {
      uint64_t v12 = *a1 + 176 * v9;
      while (v10 != (void *)v12)
      {
        v10 -= 22;
        sub_9F58F0((uint64_t)(a1 + 2), v10);
      }
      a1[1] = v12;
    }
  }
  else
  {
    sub_D50BE0(a1, v9 - v11, (long long *)v17);
  }
  if (__p)
  {
    size_t v30 = __p;
    operator delete(__p);
  }
  if (v23[1])
  {
    *(void **)&long long v24 = v23[1];
    operator delete(v23[1]);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
  if (*((void *)&v20 + 1))
  {
    *(void *)&long long v21 = *((void *)&v20 + 1);
    operator delete(*((void **)&v20 + 1));
  }
  if (v19[0])
  {
    sub_9F59BC((uint64_t)v19, (void **)v19[0]);
    operator delete(v19[0]);
  }
  uint64_t v14 = (void *)*a2;
  for (uint64_t i = (void *)a2[1]; v14 != i; v14 += 9)
  {
    uint64_t v15 = (long long *)v14[3];
    if (v15 != (long long *)v14[4]) {
      sub_CD30D0(*a1 + 176 * v14[1], v15);
    }
  }
  return a1;
}

void sub_D50B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_A0A42C((uint64_t)&a9);
  sub_4BC1B8(v10);
  sub_C8BDA0(v9);
  _Unwind_Resume(a1);
}

void sub_D50BE0(uint64_t *a1, unint64_t a2, long long *a3)
{
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[1];
  if (0x2E8BA2E8BA2E8BA3 * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 176 * a2;
      uint64_t v14 = 176 * a2;
      do
      {
        sub_9F761C(v7, a3);
        v7 += 176;
        v14 -= 176;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((v7 - *a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1745D1745D1745DLL) {
      sub_2E00();
    }
    unint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((v6 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xBA2E8BA2E8BA2ELL) {
      unint64_t v11 = 0x1745D1745D1745DLL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v28 = (uint64_t)(a1 + 2);
    if (v11)
    {
      if (v11 > 0x1745D1745D1745DLL) {
        sub_188D718();
      }
      uint64_t v12 = (char *)operator new(176 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v15 = (uint64_t)&v12[176 * v8];
    uint64_t v26 = v15;
    int v27 = &v12[176 * v11];
    uint64_t v16 = 176 * a2;
    unint64_t v17 = v15 + 176 * a2;
    do
    {
      sub_9F761C(v15, a3);
      v15 += 176;
      v16 -= 176;
    }
    while (v16);
    uint64_t v18 = (void *)*a1;
    char v19 = (void *)a1[1];
    if (v19 == (void *)*a1)
    {
      *a1 = v26;
      a1[1] = v17;
      a1[2] = (uint64_t)v27;
    }
    else
    {
      uint64_t v20 = 0;
      do
      {
        uint64_t v21 = v26 + v20 * 8;
        size_t v22 = &v19[v20];
        long long v23 = *(_OWORD *)&v19[v20 - 22];
        *(void *)(v21 - 162) = *(void *)((char *)&v19[v20 - 20] - 2);
        *(_OWORD *)(v21 - 176) = v23;
        *(void *)(v21 - 144) = 0;
        *(void *)(v21 - 136) = 0;
        *(void *)(v21 - 152) = 0;
        *(_OWORD *)(v21 - 152) = *(_OWORD *)&v19[v20 - 19];
        *(void *)(v21 - 136) = v19[v20 - 17];
        *(v22 - 19) = 0;
        *(v22 - 18) = 0;
        *(v22 - 17) = 0;
        *(void *)(v21 - 128) = 0;
        *(void *)(v21 - 120) = 0;
        *(void *)(v21 - 112) = 0;
        *(_OWORD *)(v21 - 128) = *(_OWORD *)&v19[v20 - 16];
        *(void *)(v21 - 112) = v19[v20 - 14];
        *(v22 - 16) = 0;
        *(v22 - 15) = 0;
        *(v22 - 14) = 0;
        *(void *)(v21 - 104) = 0;
        *(void *)(v21 - 96) = 0;
        *(void *)(v21 - 88) = 0;
        *(_OWORD *)(v21 - 104) = *(_OWORD *)&v19[v20 - 13];
        *(void *)(v21 - 88) = v19[v20 - 11];
        *(v22 - 13) = 0;
        *(v22 - 12) = 0;
        *(v22 - 11) = 0;
        *(void *)(v21 - 80) = 0;
        *(void *)(v21 - 72) = 0;
        *(void *)(v21 - 64) = 0;
        *(_OWORD *)(v21 - 80) = *(_OWORD *)&v19[v20 - 10];
        *(void *)(v21 - 64) = v19[v20 - 8];
        *(v22 - 10) = 0;
        *(v22 - 9) = 0;
        *(v22 - 8) = 0;
        uint64_t v24 = v19[v20 - 7];
        *(void *)(v21 - 51) = *(void *)((char *)&v19[v20 - 6] - 3);
        *(void *)(v21 - 32) = 0;
        *(void *)(v21 - 24) = 0;
        *(void *)(v21 - 40) = 0;
        *(void *)(v21 - 56) = v24;
        *(_OWORD *)(v21 - 40) = *(_OWORD *)&v19[v20 - 5];
        *(void *)(v21 - 24) = v19[v20 - 3];
        *(v22 - 5) = 0;
        *(v22 - 4) = 0;
        *(v22 - 3) = 0;
        *(_OWORD *)(v21 - 16) = *(_OWORD *)&v19[v20 - 2];
        v20 -= 22;
      }
      while (&v19[v20] != v18);
      int v25 = (void *)*a1;
      char v19 = (void *)a1[1];
      *a1 = v26 + v20 * 8;
      a1[1] = v17;
      a1[2] = (uint64_t)v27;
      if (v19 != v25)
      {
        do
        {
          v19 -= 22;
          sub_9F58F0(v28, v19);
        }
        while (v19 != v25);
        char v19 = v25;
      }
    }
    if (v19) {
      operator delete(v19);
    }
  }
}

void sub_D50EC4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_D50ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A14D44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D50EE4(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      long long v4 = *(void **)(a1 + 8);
      if (v3 != v2)
      {
        do
        {
          uint64_t v5 = *(void *)(v3 - 24);
          if (v5)
          {
            uint64_t v6 = *(void *)(v3 - 16);
            uint64_t v7 = *(void **)(v3 - 24);
            if (v6 != v5)
            {
              do
                uint64_t v6 = sub_4D4B58(v6 - 160);
              while (v6 != v5);
              uint64_t v7 = *(void **)(v3 - 24);
            }
            *(void *)(v3 - 16) = v5;
            operator delete(v7);
          }
          v3 -= 48;
        }
        while (v3 != v2);
        long long v4 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 16) = v2;
LABEL_21:
      operator delete(v4);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 24);
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      long long v4 = *(void **)(a1 + 24);
      if (v9 != v8)
      {
        do
        {
          if (*(char *)(v9 - 1) < 0) {
            operator delete(*(void **)(v9 - 24));
          }
          v9 -= 32;
        }
        while (v9 != v8);
        long long v4 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v8;
      goto LABEL_21;
    }
  }
  return a1;
}

uint64_t sub_D50FD0(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0xAE4C415C9882BALL) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(376 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 376 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = sub_D510D8(v8 + v9, a2 + v9);
        v9 += 376;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_D51094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_D510A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 376)
    sub_5ADCA8((uint64_t *)(v10 - 376 + v11));
  *(void *)(v9 + 8) = v10;
  sub_D06768(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_D510D8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_59486C((void *)a1, *(void *)a2, *(void *)(a2 + 8), 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  sub_3B1F44(a1 + 32, (uint64_t *)(a2 + 32));
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = 0;
  sub_5950E8(a1 + 328, *(void *)(a2 + 328), *(void *)(a2 + 336), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 336) - *(void *)(a2 + 328)) >> 5));
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  sub_510340(a1 + 352, *(void *)(a2 + 352), *(void *)(a2 + 360), 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 5));
  return a1;
}

void sub_D511B4(_Unwind_Exception *a1)
{
  sub_59213C(v3);
  sub_3B0290(v2);
  sub_59241C(v1);
  _Unwind_Resume(a1);
}

void sub_D511E0(_Unwind_Exception *a1)
{
  sub_59241C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D511F4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x555555555555556) {
      sub_2E00();
    }
    uint64_t result = (uint64_t)operator new(48 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 48 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = v8 + v9;
        uint64_t v11 = a2 + v9;
        *(_OWORD *)uint64_t v10 = *(_OWORD *)(a2 + v9);
        uint64_t v12 = *(void *)(a2 + v9 + 24);
        *(void *)(v10 + 16) = *(void *)(a2 + v9 + 16);
        *(void *)(v10 + 32) = 0;
        *(void *)(v10 + 40) = 0;
        *(void *)(v10 + 24) = 0;
        uint64_t result = sub_5950E8(v8 + v9 + 24, v12, *(void *)(a2 + v9 + 32), 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a2 + v9 + 32) - v12) >> 5));
        v9 += 48;
      }
      while (v11 + 48 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_D512EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_D51300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_20B0308();
  }
  *(void *)(v9 + 8) = v10;
  sub_D51328(&a9);
  _Unwind_Resume(a1);
}

void ***sub_D51328(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      long long v4 = (char *)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = *((void *)v4 - 3);
          if (v6)
          {
            uint64_t v7 = *((void *)v4 - 2);
            uint64_t v8 = (void *)*((void *)v4 - 3);
            if (v7 != v6)
            {
              do
                uint64_t v7 = sub_4D4B58(v7 - 160);
              while (v7 != v6);
              uint64_t v8 = (void *)*((void *)v4 - 3);
            }
            *((void *)v4 - 2) = v6;
            operator delete(v8);
          }
          v4 -= 48;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t **sub_D513F4(uint64_t **a1)
{
  uint64_t v2 = a1[9];
  if (v2)
  {
    uint64_t v3 = a1[10];
    long long v4 = a1[9];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(v3 - 3);
        if (v5)
        {
          uint64_t v6 = *(v3 - 2);
          uint64_t v7 = (void *)*(v3 - 3);
          if (v6 != v5)
          {
            do
              uint64_t v6 = sub_4D4B58(v6 - 160);
            while (v6 != v5);
            uint64_t v7 = (void *)*(v3 - 3);
          }
          *(v3 - 2) = v5;
          operator delete(v7);
        }
        v3 -= 6;
      }
      while (v3 != v2);
      long long v4 = a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }
  uint64_t v8 = a1[6];
  if (v8)
  {
    uint64_t v9 = a1[7];
    uint64_t v10 = a1[6];
    if (v9 != v8)
    {
      do
        uint64_t v9 = sub_5ADCA8(v9 - 47);
      while (v9 != v8);
      uint64_t v10 = a1[6];
    }
    a1[7] = v8;
    operator delete(v10);
  }
  uint64_t v11 = a1[3];
  if (v11)
  {
    uint64_t v12 = a1[4];
    uint64_t v13 = a1[3];
    if (v12 != v11)
    {
      do
        uint64_t v12 = sub_5ADCA8(v12 - 47);
      while (v12 != v11);
      uint64_t v13 = a1[3];
    }
    a1[4] = v11;
    operator delete(v13);
  }
  uint64_t v14 = *a1;
  if (*a1)
  {
    uint64_t v15 = a1[1];
    uint64_t v16 = *a1;
    if (v15 != v14)
    {
      do
        uint64_t v15 = sub_5ADCA8(v15 - 47);
      while (v15 != v14);
      uint64_t v16 = *a1;
    }
    a1[1] = v14;
    operator delete(v16);
  }
  return a1;
}

void sub_D51538()
{
  byte_25E6907 = 1;
  word_25E68F0 = 65;
  byte_25E691F = 1;
  word_25E6908 = 65;
  byte_25E6937 = 21;
  strcpy((char *)&xmmword_25E6920, "enable_coverage_check");
  byte_25E694F = 14;
  strcpy((char *)&qword_25E6938, "default_region");
  byte_25E6967 = 17;
  strcpy((char *)&xmmword_25E6950, "supported_regions");
  byte_25E697F = 17;
  strcpy(byte_25E6968, "preflight_regions");
  qword_25E6980 = (uint64_t)operator new(0x19uLL);
  unk_25E6988 = xmmword_20B9250;
  strcpy((char *)qword_25E6980, "supported_country_codes");
  qword_25E6998 = (uint64_t)operator new(0x19uLL);
  xmmword_25E69A0 = xmmword_20B9250;
  strcpy((char *)qword_25E6998, "preflight_country_codes");
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25E6A10 = 0u;
  *(_OWORD *)&qword_25E6A20 = 0u;
  dword_25E6A30 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E6A10, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25E6A10, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E6A10, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E6A10, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E69C7 = 8;
  strcpy((char *)&qword_25E69B0, "any_mode");
  byte_25E69DF = 7;
  strcpy((char *)&dword_25E69C8, "cycling");
  byte_25E69F7 = 7;
  strcpy((char *)&dword_25E69E0, "driving");
  byte_25E6A0F = 7;
  strcpy((char *)&dword_25E69F8, "walking");
}

void sub_D51888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (qword_25E6A20) {
    sub_20B0374((void **)qword_25E6A20);
  }
  long long v39 = (void *)xmmword_25E6A10;
  *(void *)&xmmword_25E6A10 = 0;
  if (v39)
  {
    operator delete(v39);
    if ((a38 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a31 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a38 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a26);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a17 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a12);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a19);
  if ((a17 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_D51928()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = v0;
  uint64_t v8 = *(void *)sub_37D0C0(v5);
  int v9 = sub_1882CC4(v7 + 16, dword_254FB60);
  if (v9) {
    int v9 = *(_DWORD *)(sub_1883F34(v7 + 16, dword_254FB60, qword_254FB68) + 120);
  }
  char v10 = sub_1791E0C(v9);
  if (*((char *)v10 + 23) < 0)
  {
    sub_4200(&__dst, (void *)*v10, v10[1]);
  }
  else
  {
    long long v11 = *(_OWORD *)v10;
    uint64_t v34 = v10[2];
    long long __dst = v11;
  }
  v32[0] = v2;
  v32[1] = v4;
  char v72 = 0;
  char v74 = 0;
  char v76 = 0;
  char v78 = 0;
  char v80 = 0;
  memset(v59, 0, 24);
  uint64_t v27 = 1851878480;
  char v28 = 4;
  long long v29 = 0;
  uint64_t v31 = 0;
  size_t v30 = 0;
  sub_D03E24((char *)&v29, 0, 0, 0);
  BYTE7(v59[1]) = 12;
  strcpy((char *)v59, "Plan.Started");
  sub_710A8(19, (uint64_t)v59, v8);
  if (SBYTE7(v59[1]) < 0) {
    operator delete(*(void **)&v59[0]);
  }
  uint64_t v12 = sub_1791E0C(*(_DWORD *)(v7 + 212));
  if (*((char *)v12 + 23) < 0)
  {
    sub_4200(v59, (void *)*v12, v12[1]);
  }
  else
  {
    long long v13 = *(_OWORD *)v12;
    *(void *)&v59[1] = v12[2];
    v59[0] = v13;
  }
  std::operator+<char>();
  sub_710A8(19, (uint64_t)v35, v8);
  if ((v35[23] & 0x80000000) != 0) {
    operator delete(*(void **)v35);
  }
  std::operator+<char>();
  sub_710A8(19, (uint64_t)v35, v8);
  if ((v35[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v35);
    if ((SBYTE7(v59[1]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  else if ((SBYTE7(v59[1]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(*(void **)&v59[0]);
LABEL_15:
  sub_725D0((uint64_t)v26);
  if (sub_DAC700(v7))
  {
    *(_OWORD *)unint64_t v35 = (unint64_t)v7;
    *(void *)&v35[24] = 0;
    *(void *)&unsigned char v35[16] = 0;
    char v45 = 0;
    unint64_t v46 = 0;
    uint64_t v48 = 0;
    uint64_t v47 = 0;
    sub_CAA7F0((uint64_t)v35, v6, 19, (uint64_t)v59);
    uint64_t v14 = v46;
    if (v46)
    {
      uint64_t v15 = v47;
      uint64_t v16 = v46;
      if ((void *)v47 != v46)
      {
        do
          uint64_t v15 = sub_402C7C(v15 - 376);
        while ((void *)v15 != v14);
        uint64_t v16 = v46;
      }
      uint64_t v47 = (uint64_t)v14;
      operator delete(v16);
    }
    if (v45)
    {
      if (v43)
      {
        int v44 = v43;
        operator delete(v43);
      }
      if (v41)
      {
        unint64_t v42 = v41;
        operator delete(v41);
      }
      if (v39)
      {
        int v40 = v39;
        operator delete(v39);
      }
      if (v37)
      {
        unint64_t v38 = v37;
        operator delete(v37);
      }
      char v45 = 0;
    }
    v25[0] = (void **)&v35[8];
    sub_BC2EEC(v25);
    if (LOBYTE(v59[0]))
    {
      if (!v72) {
        char v72 = 1;
      }
      double v71 = v60;
      long long v36 = 0u;
      memset(v35, 0, sizeof(v35));
      std::string::assign((std::string *)v35, "PlaceRequestParserModule");
      LOBYTE(v25[0]) = 1;
      uint64_t v17 = v36;
      if ((unint64_t)v36 >= *((void *)&v36 + 1))
      {
        uint64_t v18 = sub_C55C14((uint64_t *)&v35[24], "Runtime", (char *)v25, &v60);
      }
      else
      {
        sub_C55DE4((int)&v36 + 8, v36, "Runtime", (char *)v25, &v60);
        uint64_t v18 = v17 + 48;
      }
      *(void *)&long long v36 = v18;
      sub_71740(19, (uint64_t)v35, v8);
      uint64_t v19 = *(void *)&v35[24];
      if (*(void *)&v35[24])
      {
        uint64_t v20 = v36;
        uint64_t v21 = *(void **)&v35[24];
        if ((void)v36 != *(void *)&v35[24])
        {
          do
          {
            if (*(char *)(v20 - 25) < 0) {
              operator delete(*(void **)(v20 - 48));
            }
            v20 -= 48;
          }
          while (v20 != v19);
          uint64_t v21 = *(void **)&v35[24];
        }
        *(void *)&long long v36 = v19;
        operator delete(v21);
      }
      if ((v35[23] & 0x80000000) != 0) {
        operator delete(*(void **)v35);
      }
      sub_CDA1C4();
    }
    *(void *)unint64_t v35 = operator new(0x28uLL);
    *(_OWORD *)&v35[8] = xmmword_20B9280;
    strcpy(*(char **)v35, "place request parser module failed");
    char v50 = v72;
    if (v72) {
      double v49 = v71;
    }
    char v52 = v74;
    if (v74) {
      memcpy(v51, v73, sizeof(v51));
    }
    char v54 = v76;
    if (v76) {
      long long v53 = v75;
    }
    char v56 = v78;
    if (v78) {
      uint64_t v55 = v77;
    }
    char v58 = v80;
    if (v80) {
      uint64_t v57 = v79;
    }
    sub_D52F6C(v32, (uint64_t)v35, (unsigned int *)v59 + 2, (uint64_t)&v49);
    if (v58) {
      char v58 = 0;
    }
    if (v56) {
      char v56 = 0;
    }
    if (v54) {
      char v54 = 0;
    }
    if (v52) {
      char v52 = 0;
    }
    if (v50) {
      char v50 = 0;
    }
    if ((v35[23] & 0x80000000) != 0) {
      operator delete(*(void **)v35);
    }
    sub_CB1C20((uint64_t)v59);
  }
  else
  {
    *(void *)&v59[0] = operator new(0x20uLL);
    *(_OWORD *)((char *)v59 + 8) = xmmword_20B8E90;
    strcpy(*(char **)&v59[0], "place request is not consistent");
    *(void *)unint64_t v35 = 1;
    *(void *)&v35[8] = &off_2439090;
    char v62 = v72;
    if (v72) {
      double v61 = v71;
    }
    char v64 = v74;
    if (v74) {
      memcpy(v63, v73, sizeof(v63));
    }
    char v66 = v76;
    if (v76) {
      long long v65 = v75;
    }
    char v68 = v78;
    if (v78) {
      uint64_t v67 = v77;
    }
    char v70 = v80;
    if (v80) {
      uint64_t v69 = v79;
    }
    sub_D52F6C(v32, (uint64_t)v59, (unsigned int *)v35, (uint64_t)&v61);
    if (v70) {
      char v70 = 0;
    }
    if (v68) {
      char v68 = 0;
    }
    if (v66) {
      char v66 = 0;
    }
    if (v64) {
      char v64 = 0;
    }
    if (v62) {
      char v62 = 0;
    }
    if (SBYTE7(v59[1]) < 0) {
      operator delete(*(void **)&v59[0]);
    }
  }
  size_t v22 = v29;
  if (v29)
  {
    long long v23 = v30;
    uint64_t v24 = v29;
    if (v30 != v29)
    {
      do
      {
        if (*((char *)v23 - 25) < 0) {
          operator delete(*(v23 - 6));
        }
        v23 -= 6;
      }
      while (v23 != v22);
      uint64_t v24 = v29;
    }
    size_t v30 = v22;
    operator delete(v24);
  }
  if ((v28 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v34) & 0x80000000) == 0) {
      return;
    }
LABEL_107:
    operator delete((void *)__dst);
    return;
  }
  operator delete((void *)v27);
  if (SHIBYTE(v34) < 0) {
    goto LABEL_107;
  }
}

void sub_D52BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  if (LOBYTE(STACK[0x648])) {
    LOBYTE(STACK[0x648]) = 0;
  }
  if (LOBYTE(STACK[0x638])) {
    LOBYTE(STACK[0x638]) = 0;
  }
  if (LOBYTE(STACK[0x628])) {
    LOBYTE(STACK[0x628]) = 0;
  }
  if (LOBYTE(STACK[0x610])) {
    LOBYTE(STACK[0x610]) = 0;
  }
  if (LOBYTE(STACK[0x3E8])) {
    LOBYTE(STACK[0x3E8]) = 0;
  }
  if (SLOBYTE(STACK[0x8D7]) < 0) {
    operator delete(*v46);
  }
  sub_D53540((uint64_t)&a17);
  sub_D535D8((uint64_t)&STACK[0xF00]);
  sub_D53690((uint64_t)&STACK[0x11A8]);
  sub_D53748((uint64_t)&a46);
  sub_CB1C20((uint64_t)&STACK[0x16C0]);
  sub_A3A4((uint64_t)&STACK[0x380]);
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    operator delete(*(void **)(v47 + 896));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_D52F6C(void *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v18);
    uint64_t v8 = sub_188FC78(v18, (uint64_t)"[place lookup] ", 15);
    int v9 = *(char *)(a2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(void *)a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    sub_188FC78(v8, v10, v11);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  sub_182E158(v18, 0, 0);
  int v12 = sub_E12498(*a3);
  v19 |= 0x20u;
  int v22 = v12;
  uint64_t v13 = *(void *)(*a1 + 24);
  if (v13) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 48))(v13, a4);
  }
  uint64_t v14 = *(void *)(a1[1] + 24);
  if (!v14) {
    sub_29F82C();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v14 + 48))(v14, v18);
  return sub_182E7B8(v18);
}

void sub_D531A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_D531F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_182E7B8(va);
  _Unwind_Resume(a1);
}

void **sub_D53204(void **a1)
{
  sub_4BCED0((uint64_t)(a1 + 4));
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_CA8AA8(v3 - 1632);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_D53268@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::assign((std::string *)a2, "PlaceResponseBuilderModule");
  char v7 = 1;
  double v6 = round(*a1);
  unint64_t v4 = *(void *)(a2 + 32);
  if (v4 >= *(void *)(a2 + 40))
  {
    uint64_t result = sub_D0729C((uint64_t *)(a2 + 24), "Runtime", &v7, &v6);
    *(void *)(a2 + 32) = result;
  }
  else
  {
    sub_D0746C(a2 + 40, *(void *)(a2 + 32), "Runtime", &v7, &v6);
    uint64_t result = v4 + 48;
    *(void *)(a2 + 32) = v4 + 48;
    *(void *)(a2 + 32) = v4 + 48;
  }
  return result;
}

void sub_D53334(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D53348(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D53360(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_D53374(uint64_t *a1, char *__s, char *a3, double *a4)
{
  unint64_t v6 = a1[2];
  uint64_t v5 = a1 + 2;
  unint64_t v7 = *(v5 - 1);
  if (v7 >= v6)
  {
    uint64_t v9 = sub_C55C14(a1, __s, a3, a4);
    a1[1] = v9;
    return v9 - 48;
  }
  else
  {
    sub_C55DE4((int)v5, *(v5 - 1), __s, a3, a4);
    a1[1] = v7 + 48;
    a1[1] = v7 + 48;
    return v7;
  }
}

void sub_D533F0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_D533F8(uint64_t a1, uint64_t a2, char *a3, double *a4)
{
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 >= *(void *)(a1 + 16))
  {
    uint64_t v9 = sub_D538BC((char **)a1, a2, a3, a4);
  }
  else
  {
    char v6 = *a3;
    double v7 = *a4;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(*(unsigned char **)(a1 + 8), *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v8 = *(_OWORD *)a2;
      *(void *)(v5 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v5 = v8;
    }
    *(unsigned char *)(v5 + 24) = v6;
    *(void *)(v5 + 32) = (uint64_t)v7;
    *(_DWORD *)(v5 + 40) = 1;
    uint64_t v9 = (char *)(v5 + 48);
    *(void *)(a1 + 8) = v5 + 48;
  }
  *(void *)(a1 + 8) = v9;
  return v9 - 48;
}

void sub_D53498(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_D534A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    sub_29F82C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_D534F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    sub_29F82C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_D53540(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    sub_182E7B8(a1 + 8);
    return a1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = *(void **)(a1 + 24);
  if (v4 != v3)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 32;
    }
    while (v4 != v3);
    unint64_t v5 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v3;
  operator delete(v5);
  return a1;
}

uint64_t sub_D535D8(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      uint64_t v4 = *(void **)(a1 + 8);
      if (v3 != v2)
      {
        do
        {
          uint64_t v5 = v3 - 2448;
          sub_8E42D4(v3 - 2440);
          uint64_t v3 = v5;
        }
        while (v5 != v2);
        uint64_t v4 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 16) = v2;
LABEL_15:
      operator delete(v4);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v4 = *(void **)(a1 + 24);
      if (v7 != v6)
      {
        do
        {
          if (*(char *)(v7 - 1) < 0) {
            operator delete(*(void **)(v7 - 24));
          }
          v7 -= 32;
        }
        while (v7 != v6);
        uint64_t v4 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v6;
      goto LABEL_15;
    }
  }
  return a1;
}

uint64_t sub_D53690(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      uint64_t v4 = *(void **)(a1 + 8);
      if (v3 != v2)
      {
        do
        {
          uint64_t v5 = v3 - 1064;
          sub_3AFFFC(v3 - 1056);
          uint64_t v3 = v5;
        }
        while (v5 != v2);
        uint64_t v4 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 16) = v2;
LABEL_15:
      operator delete(v4);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v4 = *(void **)(a1 + 24);
      if (v7 != v6)
      {
        do
        {
          if (*(char *)(v7 - 1) < 0) {
            operator delete(*(void **)(v7 - 24));
          }
          v7 -= 32;
        }
        while (v7 != v6);
        uint64_t v4 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v6;
      goto LABEL_15;
    }
  }
  return a1;
}

uint64_t sub_D53748(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void **)(a1 + 16);
      uint64_t v4 = *(void **)(a1 + 8);
      if (v3 != v2)
      {
        do
        {
          v3 -= 19;
          sub_A05730(v3);
        }
        while (v3 != v2);
        uint64_t v4 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 16) = v2;
LABEL_15:
      operator delete(v4);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v4 = *(void **)(a1 + 24);
      if (v6 != v5)
      {
        do
        {
          if (*(char *)(v6 - 1) < 0) {
            operator delete(*(void **)(v6 - 24));
          }
          v6 -= 32;
        }
        while (v6 != v5);
        uint64_t v4 = *(void **)(a1 + 24);
      }
      *(void *)(a1 + 32) = v5;
      goto LABEL_15;
    }
  }
  return a1;
}

uint64_t sub_D537FC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 224);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 232);
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_402C7C(v3 - 376);
      while ((void *)v3 != v2);
      uint64_t v4 = *(void **)(a1 + 224);
    }
    *(void *)(a1 + 232) = v2;
    operator delete(v4);
  }
  if (*(unsigned char *)(a1 + 216))
  {
    uint64_t v5 = *(void **)(a1 + 192);
    if (v5)
    {
      *(void *)(a1 + 200) = v5;
      operator delete(v5);
    }
    uint64_t v6 = *(void **)(a1 + 160);
    if (v6)
    {
      *(void *)(a1 + 168) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void **)(a1 + 136);
    if (v7)
    {
      *(void *)(a1 + 144) = v7;
      operator delete(v7);
    }
    long long v8 = *(void **)(a1 + 104);
    if (v8)
    {
      *(void *)(a1 + 112) = v8;
      operator delete(v8);
    }
    *(unsigned char *)(a1 + 216) = 0;
  }
  uint64_t v10 = (void **)(a1 + 8);
  sub_BC2EEC(&v10);
  return a1;
}

char *sub_D538BC(char **a1, uint64_t a2, char *a3, double *a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v5) >> 4) > v8) {
    unint64_t v8 = 0x5555555555555556 * ((a1[2] - v5) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v8;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = &v13[48 * v7];
  uint64_t v24 = &v13[48 * v12];
  char v15 = *a3;
  double v16 = *a4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v14, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    uint64_t v14 = &v13[48 * v7];
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
  }
  char v17 = &v13[48 * v7];
  v17[24] = v15;
  *((void *)v17 + 4) = (uint64_t)v16;
  *((_DWORD *)v17 + 10) = 1;
  uint64_t v18 = v17 + 48;
  if (v6 == v5)
  {
    char v21 = v5;
  }
  else
  {
    do
    {
      long long v19 = *((_OWORD *)v6 - 3);
      *((void *)v14 - 4) = *((void *)v6 - 4);
      *((_OWORD *)v14 - 3) = v19;
      *((void *)v6 - 5) = 0;
      *((void *)v6 - 4) = 0;
      *((void *)v6 - 6) = 0;
      long long v20 = *(_OWORD *)(v6 - 24);
      *((_DWORD *)v14 - 2) = *((_DWORD *)v6 - 2);
      *(_OWORD *)(v14 - 24) = v20;
      v14 -= 48;
      v6 -= 48;
    }
    while (v6 != v5);
    char v21 = *a1;
    uint64_t v5 = a1[1];
  }
  *a1 = v14;
  a1[1] = v18;
  a1[2] = v24;
  if (v5 != v21)
  {
    int v22 = (void **)(v5 - 48);
    do
    {
      if (*((char *)v22 + 23) < 0) {
        operator delete(*v22);
      }
      v22 -= 6;
    }
    while (v22 + 6 != (void **)v21);
    uint64_t v5 = v21;
  }
  if (v5) {
    operator delete(v5);
  }
  return v18;
}

void sub_D53AC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_D53ADC()
{
  byte_25E6A4F = 1;
  word_25E6A38 = 65;
  byte_25E6A67 = 1;
  word_25E6A50 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25E6AF8 = 0u;
  *(_OWORD *)&qword_25E6B08 = 0u;
  dword_25E6B18 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25E6AF8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25E6AF8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25E6AF8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25E6AF8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25E6A7F = 8;
  strcpy((char *)&qword_25E6A68, "any_mode");
  byte_25E6A97 = 7;
  strcpy((char *)&dword_25E6A80, "cycling");
  byte_25E6AAF = 7;
  strcpy((char *)&dword_25E6A98, "driving");
  byte_25E6AC7 = 7;
  strcpy((char *)&dword_25E6AB0, "walking");
  qword_25E6AD0 = 0;
  qword_25E6AD8 = 0;
  qword_25E6AC8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25E6AC8 = (uint64_t)v0;
  qword_25E6AD0 = (uint64_t)(v0 + 9);
  qword_25E6AD8 = (uint64_t)(v0 + 9);
  qword_25E6AE0 = 0;
  qword_25E6AE8 = 0;
  unk_25E6AF0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25E6AE8 = (uint64_t)(v1 + 9);
  unk_25E6AF0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25E6AE0 = (uint64_t)v1;
  return result;
}

void sub_D53DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25E6B08) {
    sub_20B03B8((void **)qword_25E6B08);
  }
  size_t v37 = (void *)xmmword_25E6AF8;
  *(void *)&xmmword_25E6AF8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_D53E44(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)sub_37D0C0(a3);
  char v8 = 12;
  strcpy(__p, "Plan.Started");
  sub_710A8(a1, (uint64_t)__p, v6);
  if (v8 < 0)
  {
    operator delete(*(void **)__p);
    if (!sub_DBB340(a2)) {
      goto LABEL_7;
    }
  }
  else if (!sub_DBB340(a2))
  {
    goto LABEL_7;
  }
  if (!sub_37B490(a3)
    || (char v8 = 16, strcpy(__p, "Plan.Started[EV]"), sub_710A8(a1, (uint64_t)__p, v6), (v8 & 0x80000000) == 0))
  {
LABEL_7:
    if (!sub_DB6EEC(a2)) {
      return;
    }
    goto LABEL_8;
  }
  operator delete(*(void **)__p);
  if (!sub_DB6EEC(a2)) {
    return;
  }
LABEL_8:
  char v8 = 17;
  strcpy(__p, "Plan.Started[MPR]");
  sub_710A8(a1, (uint64_t)__p, v6);
  if (v8 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_D53FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D53FD4(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)sub_37D0C0(a3);
  char v8 = 12;
  strcpy(__p, "Plan.Started");
  sub_710A8(a1, (uint64_t)__p, v6);
  if (v8 < 0)
  {
    operator delete(*(void **)__p);
    if (!sub_DBB760(a2)) {
      goto LABEL_7;
    }
  }
  else if (!sub_DBB760(a2))
  {
    goto LABEL_7;
  }
  if (!sub_37B490(a3)
    || (char v8 = 16, strcpy(__p, "Plan.Started[EV]"), sub_710A8(a1, (uint64_t)__p, v6), (v8 & 0x80000000) == 0))
  {
LABEL_7:
    if (!sub_DB8C44(a2)) {
      return;
    }
    goto LABEL_8;
  }
  operator delete(*(void **)__p);
  if (!sub_DB8C44(a2)) {
    return;
  }
LABEL_8:
  char v8 = 17;
  strcpy(__p, "Plan.Started[MPR]");
  sub_710A8(a1, (uint64_t)__p, v6);
  if (v8 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_D54140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D54164(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)sub_37D0C0(a3);
  char v8 = 12;
  strcpy(__p, "Plan.Started");
  sub_710A8(a1, (uint64_t)__p, v6);
  if (v8 < 0)
  {
    operator delete(*(void **)__p);
    if (!sub_35E640()) {
      goto LABEL_7;
    }
  }
  else if (!sub_35E640())
  {
    goto LABEL_7;
  }
  if (!sub_37B490(a3)
    || (char v8 = 16, strcpy(__p, "Plan.Started[EV]"), sub_710A8(a1, (uint64_t)__p, v6), (v8 & 0x80000000) == 0))
  {
LABEL_7:
    if (!sub_DBF2D4(a2)) {
      return;
    }
    goto LABEL_8;
  }
  operator delete(*(void **)__p);
  if (!sub_DBF2D4(a2)) {
    return;
  }
LABEL_8:
  char v8 = 17;
  strcpy(__p, "Plan.Started[MPR]");
  sub_710A8(a1, (uint64_t)__p, v6);
  if (v8 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_D542D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D542F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v20 = a4;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v19 = 0;
  *(void *)a3 = 1851878480;
  *(unsigned char *)(a3 + 23) = 4;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  sub_D03E24((char *)(a3 + 24), 0, 0, 0);
  unint64_t v7 = *(void *)(a3 + 40);
  unint64_t v8 = *(void *)(a3 + 32);
  char v17 = 1;
  LODWORD(__p[0]) = 0;
  if (v8 >= v7)
  {
    uint64_t v9 = sub_D58918((uint64_t *)(a3 + 24), "Runtime", &v17, &v20, (int *)__p);
  }
  else
  {
    sub_D58AF0(a3 + 40, v8, "Runtime", &v17, &v20, (int *)__p);
    uint64_t v9 = v8 + 48;
    *(void *)(a3 + 32) = v8 + 48;
  }
  *(void *)(a3 + 32) = v9;
  if (sub_DBB340(a1))
  {
    if (sub_37B490(a2))
    {
      HIBYTE(v19) = 4;
      strcpy((char *)__p, "[EV]");
      sub_D546F4(v20, (uint64_t)__p, a3);
      if (SHIBYTE(v19) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (sub_DB6EEC(a1))
  {
    HIBYTE(v19) = 5;
    strcpy((char *)__p, "[MPR]");
    sub_D546F4(v20, (uint64_t)__p, a3);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_DBD380(a1))
  {
    char v17 = 4;
    LODWORD(__p[0]) = 1;
    unint64_t v10 = *(void *)(a3 + 32);
    if (v10 >= *(void *)(a3 + 40))
    {
      uint64_t v11 = sub_D067F0((uint64_t *)(a3 + 24), "RequestWithTrafficAttached", &v17, (int *)__p);
    }
    else
    {
      sub_D069C0(a3 + 40, *(void *)(a3 + 32), "RequestWithTrafficAttached", &v17, (int *)__p);
      uint64_t v11 = v10 + 48;
      *(void *)(a3 + 32) = v10 + 48;
    }
    *(void *)(a3 + 32) = v11;
  }
  unint64_t v12 = sub_69510();
  uint64_t result = sub_68E5C((uint64_t)v12);
  if (result)
  {
    char v17 = 3;
    *(double *)std::string __p = (double)(unint64_t)sub_68DF8((uint64_t)v12) / 1000000.0;
    unint64_t v14 = *(void *)(a3 + 32);
    if (v14 >= *(void *)(a3 + 40))
    {
      uint64_t v15 = sub_D075E0((uint64_t *)(a3 + 24), "Arena.Used", &v17, (double *)__p);
    }
    else
    {
      sub_D077B0(a3 + 40, *(void *)(a3 + 32), "Arena.Used", &v17, (double *)__p);
      uint64_t v15 = v14 + 48;
      *(void *)(a3 + 32) = v14 + 48;
    }
    *(void *)(a3 + 32) = v15;
    char v17 = 3;
    *(double *)std::string __p = (double)(unint64_t)sub_68E5C((uint64_t)v12) / 1000000.0;
    unint64_t v16 = *(void *)(a3 + 32);
    if (v16 >= *(void *)(a3 + 40))
    {
      uint64_t result = sub_D07924((uint64_t *)(a3 + 24), "Arena.Allocated", &v17, (double *)__p);
    }
    else
    {
      sub_D07AF4(a3 + 40, *(void *)(a3 + 32), "Arena.Allocated", &v17, (double *)__p);
      uint64_t result = v16 + 48;
      *(void *)(a3 + 32) = v16 + 48;
    }
    *(void *)(a3 + 32) = result;
  }
  return result;
}

void sub_D545E4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D545F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  *(void *)(v16 + 32) = v17;
  sub_A3A4(v16);
  _Unwind_Resume(a1);
}

void sub_D54618(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D54654(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D54668(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D54680(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D54694(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D546A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(char *)(v3 + 23) < 0) {
    operator delete(*(void **)v3);
  }
  sub_A43C((void **)va);
  _Unwind_Resume(a1);
}

void sub_D546CC(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D546F4(double a1, uint64_t a2, uint64_t a3)
{
  double v10 = a1;
  std::operator+<char>();
  char v7 = 1;
  unint64_t v5 = *(void *)(a3 + 32);
  if (v5 >= *(void *)(a3 + 40))
  {
    *(void *)(a3 + 32) = sub_D538BC((char **)(a3 + 24), (uint64_t)__p, &v7, &v10);
    if (SHIBYTE(v9) < 0) {
LABEL_8:
    }
      operator delete(__p[0]);
  }
  else
  {
    if (SHIBYTE(v9) < 0)
    {
      sub_4200(*(unsigned char **)(a3 + 32), __p[0], (unint64_t)__p[1]);
    }
    else
    {
      long long v6 = *(_OWORD *)__p;
      *(void *)(v5 + 16) = v9;
      *(_OWORD *)unint64_t v5 = v6;
    }
    *(unsigned char *)(v5 + 24) = 1;
    *(void *)(v5 + 32) = (uint64_t)a1;
    *(_DWORD *)(v5 + 40) = 1;
    *(void *)(a3 + 32) = v5 + 48;
    *(void *)(a3 + 32) = v5 + 48;
    if (SHIBYTE(v9) < 0) {
      goto LABEL_8;
    }
  }
}

void sub_D547EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  *(void *)(v16 + 32) = v17;
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D54814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v20 = a4;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v19 = 0;
  *(void *)a3 = 1851878480;
  *(unsigned char *)(a3 + 23) = 4;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  sub_D03E24((char *)(a3 + 24), 0, 0, 0);
  unint64_t v7 = *(void *)(a3 + 40);
  unint64_t v8 = *(void *)(a3 + 32);
  char v17 = 1;
  LODWORD(__p[0]) = 0;
  if (v8 >= v7)
  {
    uint64_t v9 = sub_D58918((uint64_t *)(a3 + 24), "Runtime", &v17, &v20, (int *)__p);
  }
  else
  {
    sub_D58AF0(a3 + 40, v8, "Runtime", &v17, &v20, (int *)__p);
    uint64_t v9 = v8 + 48;
    *(void *)(a3 + 32) = v8 + 48;
  }
  *(void *)(a3 + 32) = v9;
  if (sub_DBB760(a1))
  {
    if (sub_37B490(a2))
    {
      HIBYTE(v19) = 4;
      strcpy((char *)__p, "[EV]");
      sub_D546F4(v20, (uint64_t)__p, a3);
      if (SHIBYTE(v19) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (sub_DB8C44(a1))
  {
    HIBYTE(v19) = 5;
    strcpy((char *)__p, "[MPR]");
    sub_D546F4(v20, (uint64_t)__p, a3);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_DBD390(a1))
  {
    char v17 = 4;
    LODWORD(__p[0]) = 1;
    unint64_t v10 = *(void *)(a3 + 32);
    if (v10 >= *(void *)(a3 + 40))
    {
      uint64_t v11 = sub_D067F0((uint64_t *)(a3 + 24), "RequestWithTrafficAttached", &v17, (int *)__p);
    }
    else
    {
      sub_D069C0(a3 + 40, *(void *)(a3 + 32), "RequestWithTrafficAttached", &v17, (int *)__p);
      uint64_t v11 = v10 + 48;
      *(void *)(a3 + 32) = v10 + 48;
    }
    *(void *)(a3 + 32) = v11;
  }
  unint64_t v12 = sub_69510();
  uint64_t result = sub_68E5C((uint64_t)v12);
  if (result)
  {
    char v17 = 3;
    *(double *)std::string __p = (double)(unint64_t)sub_68DF8((uint64_t)v12) / 1000000.0;
    unint64_t v14 = *(void *)(a3 + 32);
    if (v14 >= *(void *)(a3 + 40))
    {
      uint64_t v15 = sub_D075E0((uint64_t *)(a3 + 24), "Arena.Used", &v17, (double *)__p);
    }
    else
    {
      sub_D077B0(a3 + 40, *(void *)(a3 + 32), "Arena.Used", &v17, (double *)__p);
      uint64_t v15 = v14 + 48;
      *(void *)(a3 + 32) = v14 + 48;
    }
    *(void *)(a3 + 32) = v15;
    char v17 = 3;
    *(double *)std::string __p = (double)(unint64_t)sub_68E5C((uint64_t)v12) / 1000000.0;
    unint64_t v16 = *(void *)(a3 + 32);
    if (v16 >= *(void *)(a3 + 40))
    {
      uint64_t result = sub_D07924((uint64_t *)(a3 + 24), "Arena.Allocated", &v17, (double *)__p);
    }
    else
    {
      sub_D07AF4(a3 + 40, *(void *)(a3 + 32), "Arena.Allocated", &v17, (double *)__p);
      uint64_t result = v16 + 48;
      *(void *)(a3 + 32) = v16 + 48;
    }
    *(void *)(a3 + 32) = result;
  }
  return result;
}

void sub_D54B04(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D54B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  *(void *)(v16 + 32) = v17;
  sub_A3A4(v16);
  _Unwind_Resume(a1);
}

void sub_D54B38(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D54B74(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D54B88(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D54BA0(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D54BB4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D54BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(char *)(v3 + 23) < 0) {
    operator delete(*(void **)v3);
  }
  sub_A43C((void **)va);
  _Unwind_Resume(a1);
}

void sub_D54BEC(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D54C14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v20 = a4;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v19 = 0;
  *(void *)a3 = 1851878480;
  *(unsigned char *)(a3 + 23) = 4;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  sub_D03E24((char *)(a3 + 24), 0, 0, 0);
  unint64_t v7 = *(void *)(a3 + 40);
  unint64_t v8 = *(void *)(a3 + 32);
  char v17 = 1;
  LODWORD(__p[0]) = 0;
  if (v8 >= v7)
  {
    uint64_t v9 = sub_D58918((uint64_t *)(a3 + 24), "Runtime", &v17, &v20, (int *)__p);
  }
  else
  {
    sub_D58AF0(a3 + 40, v8, "Runtime", &v17, &v20, (int *)__p);
    uint64_t v9 = v8 + 48;
    *(void *)(a3 + 32) = v8 + 48;
  }
  *(void *)(a3 + 32) = v9;
  if (sub_35E640())
  {
    if (sub_37B490(a2))
    {
      HIBYTE(v19) = 4;
      strcpy((char *)__p, "[EV]");
      sub_D546F4(v20, (uint64_t)__p, a3);
      if (SHIBYTE(v19) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (sub_DBF2D4(a1))
  {
    HIBYTE(v19) = 5;
    strcpy((char *)__p, "[MPR]");
    sub_D546F4(v20, (uint64_t)__p, a3);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_DBD390(a1))
  {
    char v17 = 4;
    LODWORD(__p[0]) = 1;
    unint64_t v10 = *(void *)(a3 + 32);
    if (v10 >= *(void *)(a3 + 40))
    {
      uint64_t v11 = sub_D067F0((uint64_t *)(a3 + 24), "RequestWithTrafficAttached", &v17, (int *)__p);
    }
    else
    {
      sub_D069C0(a3 + 40, *(void *)(a3 + 32), "RequestWithTrafficAttached", &v17, (int *)__p);
      uint64_t v11 = v10 + 48;
      *(void *)(a3 + 32) = v10 + 48;
    }
    *(void *)(a3 + 32) = v11;
  }
  unint64_t v12 = sub_69510();
  uint64_t result = sub_68E5C((uint64_t)v12);
  if (result)
  {
    char v17 = 3;
    *(double *)std::string __p = (double)(unint64_t)sub_68DF8((uint64_t)v12) / 1000000.0;
    unint64_t v14 = *(void *)(a3 + 32);
    if (v14 >= *(void *)(a3 + 40))
    {
      uint64_t v15 = sub_D075E0((uint64_t *)(a3 + 24), "Arena.Used", &v17, (double *)__p);
    }
    else
    {
      sub_D077B0(a3 + 40, *(void *)(a3 + 32), "Arena.Used", &v17, (double *)__p);
      uint64_t v15 = v14 + 48;
      *(void *)(a3 + 32) = v14 + 48;
    }
    *(void *)(a3 + 32) = v15;
    char v17 = 3;
    *(double *)std::string __p = (double)(unint64_t)sub_68E5C((uint64_t)v12) / 1000000.0;
    unint64_t v16 = *(void *)(a3 + 32);
    if (v16 >= *(void *)(a3 + 40))
    {
      uint64_t result = sub_D07924((uint64_t *)(a3 + 24), "Arena.Allocated", &v17, (double *)__p);
    }
    else
    {
      sub_D07AF4(a3 + 40, *(void *)(a3 + 32), "Arena.Allocated", &v17, (double *)__p);
      uint64_t result = v16 + 48;
      *(void *)(a3 + 32) = v16 + 48;
    }
    *(void *)(a3 + 32) = result;
  }
  return result;
}

void sub_D54F04(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D54F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  *(void *)(v16 + 32) = v17;
  sub_A3A4(v16);
  _Unwind_Resume(a1);
}

void sub_D54F38(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D54F74(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D54F88(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D54FA0(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D54FB4(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

void sub_D54FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(char *)(v3 + 23) < 0) {
    operator delete(*(void **)v3);
  }
  sub_A43C((void **)va);
  _Unwind_Resume(a1);
}

void sub_D54FEC(_Unwind_Exception *a1)
{
  sub_A3A4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D55014(uint64_t result, void *a2, int a3, uint64_t *a4)
{
  if (a3)
  {
    uint64_t v5 = 0x51B3BEA3677D46CFLL * ((uint64_t)(a2[1] - *a2) >> 3);
    uint64_t v8 = v5 + sub_DAA288(result);
    char v7 = 4;
    unint64_t v6 = a4[4];
    if (v6 >= a4[5])
    {
      uint64_t result = sub_D57B3C(a4 + 3, "MPR.NumWaypoints", &v7, &v8);
    }
    else
    {
      sub_D57D0C(a4 + 40, a4[4], "MPR.NumWaypoints", &v7, &v8);
      uint64_t result = v6 + 48;
      a4[4] = v6 + 48;
    }
    a4[4] = result;
  }
  return result;
}

void sub_D550C8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_D550D0(unsigned int a1, uint64_t *a2, double a3)
{
  double v8 = a3;
  switch(a1)
  {
    case 2u:
      *(void *)std::string __p = operator new(0x20uLL);
      *(_OWORD *)&__p[8] = xmmword_20B5EB0;
      strcpy(*(char **)__p, "[RoutingOntoOriginalRoute]");
      sub_D546F4(a3, (uint64_t)__p, (uint64_t)a2);
      goto LABEL_13;
    case 3u:
      __p[23] = 11;
      strcpy(__p, "[Retrieval]");
      sub_D546F4(a3, (uint64_t)__p, (uint64_t)a2);
      goto LABEL_13;
    case 4u:
      strcpy(__p, "[LoadAnchorPointRoute]");
      __p[23] = 22;
      sub_D546F4(a3, (uint64_t)__p, (uint64_t)a2);
      goto LABEL_13;
    case 7u:
      __p[23] = 17;
      strcpy(__p, "[ChangeWaypoints]");
      sub_D546F4(a3, (uint64_t)__p, (uint64_t)a2);
      goto LABEL_13;
    case 0xCu:
      *(void *)std::string __p = operator new(0x20uLL);
      *(_OWORD *)&__p[8] = xmmword_20B91A0;
      strcpy(*(char **)__p, "[OfflineToOnlineTransition]");
      sub_D546F4(a3, (uint64_t)__p, (uint64_t)a2);
      goto LABEL_13;
    default:
      if (a1 > 1)
      {
        if (a1 - 5 <= 1)
        {
          __p[23] = 9;
          strcpy(__p, "[Biasing]");
          sub_D546F4(a3, (uint64_t)__p, (uint64_t)a2);
LABEL_13:
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
      }
      else
      {
        char v6 = 1;
        *(_DWORD *)std::string __p = 0;
        unint64_t v5 = a2[4];
        if (v5 >= a2[5])
        {
          a2[4] = sub_D57E78(a2 + 3, "Runtime[Rerouting]", &v6, &v8, (int *)__p);
        }
        else
        {
          sub_D58050(a2 + 40, a2[4], "Runtime[Rerouting]", &v6, &v8, (int *)__p);
          a2[4] = v5 + 48;
          a2[4] = v5 + 48;
        }
      }
      return;
  }
}

void sub_D5534C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D553B0(int a1, uint64_t a2, uint64_t a3, double a4)
{
  if (a1 == 9)
  {
    char v11 = 13;
    strcpy((char *)__dst, "[TimeToLeave]");
    sub_D546F4(a4, (uint64_t)__dst, a3);
    if (v11 < 0) {
      operator delete(__dst[0]);
    }
    sub_DC6EDC(a2);
  }
  else
  {
    if (a1 == 10 && (char v11 = 13, strcpy((char *)__dst, "[LaunchAndGo]"), sub_D546F4(a4, (uint64_t)__dst, a3), v11 < 0))
    {
      operator delete(__dst[0]);
      if (!sub_DC6EDC(a2)) {
        return;
      }
    }
    else if (!sub_DC6EDC(a2))
    {
      return;
    }
    int v7 = *(_DWORD *)(sub_37B3A8(a2) + 8);
    if (v7 == 1) {
      double v8 = "[ArriveBy]";
    }
    else {
      double v8 = "[LeaveAt]";
    }
    if (v7 == 1) {
      size_t v9 = 10;
    }
    else {
      size_t v9 = 9;
    }
    char v11 = v9;
    memcpy(__dst, v8, v9);
    *((unsigned char *)__dst + v9) = 0;
    sub_D546F4(a4, (uint64_t)__dst, a3);
    if (v11 < 0) {
      operator delete(__dst[0]);
    }
  }
}

void sub_D55540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D55564(int a1, int a2, int a3, uint64_t a4)
{
  *((unsigned char *)&v29.__r_.__value_.__s + 23) = 0;
  v29.__r_.__value_.__s.__data_[0] = 0;
  if (a2) {
    std::string::append(&v29, "EV.");
  }
  if (a3) {
    std::string::append(&v29, "MPR.");
  }
  if ((a1 & 0xFE) == 4)
  {
    int v7 = SHIBYTE(v29.__r_.__value_.__r.__words[2]);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v29.__r_.__value_.__l.__size_;
    }
    unint64_t v9 = size + 13;
    if (size + 13 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v9 >= 0x17)
    {
      uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v15 = v9 | 7;
      }
      uint64_t v16 = v15 + 1;
      p_dst = (long long *)operator new(v15 + 1);
      *((void *)&__dst + 1) = size + 13;
      unint64_t v28 = v16 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      unint64_t v28 = 0;
      long long __dst = 0uLL;
      p_dst = &__dst;
      HIBYTE(v28) = size + 13;
      if (!size) {
        goto LABEL_28;
      }
    }
    if (v7 >= 0) {
      uint64_t v17 = &v29;
    }
    else {
      uint64_t v17 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    memmove(p_dst, v17, size);
LABEL_28:
    strcpy((char *)p_dst + size, "TripCompleted");
    char v26 = 4;
    int v24 = 0;
    int v25 = 1;
    unint64_t v18 = *(void *)(a4 + 32);
    if (v18 < *(void *)(a4 + 40))
    {
      if (SHIBYTE(v28) < 0)
      {
LABEL_30:
        sub_4200(*(unsigned char **)(a4 + 32), (void *)__dst, *((unint64_t *)&__dst + 1));
LABEL_42:
        *(unsigned char *)(v18 + 24) = 4;
        *(void *)(v18 + 32) = 1;
        *(_DWORD *)(v18 + 40) = 0;
        long long v23 = (char *)(v18 + 48);
        *(void *)(a4 + 32) = v18 + 48;
        goto LABEL_44;
      }
LABEL_41:
      long long v22 = __dst;
      *(void *)(v18 + 16) = v28;
      *(_OWORD *)unint64_t v18 = v22;
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  if (a1 != 3) {
    goto LABEL_45;
  }
  int v11 = SHIBYTE(v29.__r_.__value_.__r.__words[2]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v12 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v12 = v29.__r_.__value_.__l.__size_;
  }
  unint64_t v13 = v12 + 11;
  if (v12 + 11 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v13 >= 0x17)
  {
    uint64_t v19 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v19 = v13 | 7;
    }
    uint64_t v20 = v19 + 1;
    unint64_t v14 = (long long *)operator new(v19 + 1);
    *((void *)&__dst + 1) = v12 + 11;
    unint64_t v28 = v20 | 0x8000000000000000;
    *(void *)&long long __dst = v14;
  }
  else
  {
    unint64_t v28 = 0;
    long long __dst = 0uLL;
    unint64_t v14 = &__dst;
    HIBYTE(v28) = v12 + 11;
    if (!v12) {
      goto LABEL_39;
    }
  }
  if (v11 >= 0) {
    char v21 = &v29;
  }
  else {
    char v21 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  memmove(v14, v21, v12);
LABEL_39:
  strcpy((char *)v14 + v12, "TripAborted");
  char v26 = 4;
  int v24 = 0;
  int v25 = 1;
  unint64_t v18 = *(void *)(a4 + 32);
  if (v18 < *(void *)(a4 + 40))
  {
    if (SHIBYTE(v28) < 0) {
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_43:
  long long v23 = sub_D581B0((char **)(a4 + 24), (uint64_t)&__dst, &v26, &v25, &v24);
LABEL_44:
  *(void *)(a4 + 32) = v23;
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
LABEL_45:
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_48:
    operator delete(v29.__r_.__value_.__l.__data_);
    return;
  }
  operator delete((void *)__dst);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_48;
  }
}

void sub_D5587C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v24 = v23;
  *(void *)(v22 + 32) = v24;
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_D558D0(uint64_t *a1, int a2, int a3, int a4, uint64_t a5)
{
  char v163 = sub_69510();
  uint64_t v10 = sub_45FD6C(a1);
  *((unsigned char *)&v165.__r_.__value_.__s + 23) = 0;
  v165.__r_.__value_.__s.__data_[0] = 0;
  if (a3) {
    std::string::append(&v165, "EV.");
  }
  if (a4) {
    std::string::append(&v165, "MPR.");
  }
  if (a2 == 3) {
    goto LABEL_323;
  }
  int v11 = sub_47EE94((uint64_t)a1, 0, 0);
  int v12 = sub_47EE94((uint64_t)a1, 2, 0);
  int v161 = a3;
  long long v164 = a1;
  int v13 = sub_47EE94((uint64_t)a1, 1, 0);
  int v14 = SHIBYTE(v165.__r_.__value_.__r.__words[2]);
  if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v165.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v165.__r_.__value_.__l.__size_;
  }
  unint64_t v16 = size + 16;
  if (size + 16 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  int v17 = v13;
  if (v16 >= 0x17)
  {
    uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v19 = v16 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_dst = (long long *)operator new(v19 + 1);
    *((void *)&__dst + 1) = size + 16;
    unint64_t v169 = v20 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    unint64_t v169 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(v169) = size + 16;
    if (!size) {
      goto LABEL_20;
    }
  }
  if (v14 >= 0) {
    char v21 = &v165;
  }
  else {
    char v21 = (std::string *)v165.__r_.__value_.__r.__words[0];
  }
  memmove(p_dst, v21, size);
LABEL_20:
  uint64_t v22 = (char **)(a5 + 24);
  strcpy((char *)p_dst + size, "MainRoute.Length");
  LOBYTE(v173[0]) = 7;
  if (v10 < 0) {
    __int16 v23 = -50;
  }
  else {
    __int16 v23 = 50;
  }
  uint64_t v24 = (void *)(v10 / 100
               + (int)(((5243 * (__int16)(v23 + v10 % 100)) >> 19)
                     + ((5243 * (__int16)(v23 + v10 % 100)) >> 31)));
  __p[0] = v24;
  unint64_t v25 = *(void *)(a5 + 32);
  if (v25 >= *(void *)(a5 + 40))
  {
    uint64_t v26 = (uint64_t)v164;
    *(void *)(a5 + 32) = sub_D583C8((char **)(a5 + 24), (uint64_t)&__dst, (char *)v173, __p);
    if ((SHIBYTE(v169) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_129;
  }
  uint64_t v26 = (uint64_t)v164;
  if (SHIBYTE(v169) < 0)
  {
    sub_4200(*(unsigned char **)(a5 + 32), (void *)__dst, *((unint64_t *)&__dst + 1));
    uint64_t v24 = __p[0];
  }
  else
  {
    long long v27 = __dst;
    *(void *)(v25 + 16) = v169;
    *(_OWORD *)unint64_t v25 = v27;
  }
  *(unsigned char *)(v25 + 24) = 7;
  *(void *)(v25 + 32) = v24;
  *(_DWORD *)(v25 + 40) = 1;
  *(void *)(a5 + 32) = v25 + 48;
  *(void *)(a5 + 32) = v25 + 48;
  if (SHIBYTE(v169) < 0) {
LABEL_129:
  }
    operator delete((void *)__dst);
LABEL_27:
  int v28 = SHIBYTE(v165.__r_.__value_.__r.__words[2]);
  if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v29 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v29 = v165.__r_.__value_.__l.__size_;
  }
  unint64_t v30 = v29 + 13;
  if (v29 + 13 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v30 >= 0x17)
  {
    uint64_t v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v32 = v30 | 7;
    }
    uint64_t v33 = v32 + 1;
    uint64_t v31 = (long long *)operator new(v32 + 1);
    *((void *)&__dst + 1) = v29 + 13;
    unint64_t v169 = v33 | 0x8000000000000000;
    *(void *)&long long __dst = v31;
    uint64_t v26 = (uint64_t)v164;
  }
  else
  {
    unint64_t v169 = 0;
    long long __dst = 0uLL;
    uint64_t v31 = &__dst;
    HIBYTE(v169) = v29 + 13;
    if (!v29) {
      goto LABEL_41;
    }
  }
  if (v28 >= 0) {
    uint64_t v34 = &v165;
  }
  else {
    uint64_t v34 = (std::string *)v165.__r_.__value_.__r.__words[0];
  }
  memmove(v31, v34, v29);
LABEL_41:
  strcpy((char *)v31 + v29, "MainRoute.ETA");
  LOBYTE(v173[0]) = 0;
  if (v11 < 0) {
    char v35 = -5;
  }
  else {
    char v35 = 5;
  }
  signed int v36 = v11 / 10 + (((103 * (char)(v35 + v11 % 10)) >> 15) & 1) + ((103 * (char)(v35 + v11 % 10)) >> 10);
  LODWORD(__p[0]) = v36;
  unint64_t v37 = *(void *)(a5 + 32);
  if (v37 >= *(void *)(a5 + 40))
  {
    *(void *)(a5 + 32) = sub_D57928((char **)(a5 + 24), (uint64_t)&__dst, (char *)v173, (int *)__p);
    if ((SHIBYTE(v169) & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_132;
  }
  if (SHIBYTE(v169) < 0)
  {
    sub_4200(*(unsigned char **)(a5 + 32), (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    long long v38 = __dst;
    *(void *)(v37 + 16) = v169;
    *(_OWORD *)unint64_t v37 = v38;
  }
  *(unsigned char *)(v37 + 24) = 0;
  *(void *)(v37 + 32) = v36;
  *(_DWORD *)(v37 + 40) = 1;
  *(void *)(a5 + 32) = v37 + 48;
  *(void *)(a5 + 32) = v37 + 48;
  if (SHIBYTE(v169) < 0) {
LABEL_132:
  }
    operator delete((void *)__dst);
LABEL_48:
  int v39 = SHIBYTE(v165.__r_.__value_.__r.__words[2]);
  if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v40 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v40 = v165.__r_.__value_.__l.__size_;
  }
  size_t v41 = v40 + 23;
  if (v40 + 23 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v40 >= 0xFFFFFFFFFFFFFFE9)
  {
    unint64_t v169 = 0;
    long long __dst = 0uLL;
    unint64_t v42 = &__dst;
    HIBYTE(v169) = v40 + 23;
LABEL_57:
    if (v39 >= 0) {
      char v45 = &v165;
    }
    else {
      char v45 = (std::string *)v165.__r_.__value_.__r.__words[0];
    }
    memmove(v42, v45, v40);
    goto LABEL_61;
  }
  uint64_t v43 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v41 | 7) != 0x17) {
    uint64_t v43 = v41 | 7;
  }
  uint64_t v44 = v43 + 1;
  unint64_t v42 = (long long *)operator new(v43 + 1);
  *((void *)&__dst + 1) = v40 + 23;
  unint64_t v169 = v44 | 0x8000000000000000;
  *(void *)&long long __dst = v42;
  uint64_t v26 = (uint64_t)v164;
  if (v40) {
    goto LABEL_57;
  }
LABEL_61:
  strcpy((char *)v42 + v40, "MainRoute.HistoricalETA");
  LOBYTE(v173[0]) = 0;
  if (v12 < 0) {
    char v46 = -5;
  }
  else {
    char v46 = 5;
  }
  signed int v47 = v12 / 10 + (((103 * (char)(v46 + v12 % 10)) >> 15) & 1) + ((103 * (char)(v46 + v12 % 10)) >> 10);
  LODWORD(__p[0]) = v47;
  unint64_t v48 = *(void *)(a5 + 32);
  if (v48 >= *(void *)(a5 + 40))
  {
    *(void *)(a5 + 32) = sub_D57928((char **)(a5 + 24), (uint64_t)&__dst, (char *)v173, (int *)__p);
    if ((SHIBYTE(v169) & 0x80000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_135;
  }
  if (SHIBYTE(v169) < 0)
  {
    sub_4200(*(unsigned char **)(a5 + 32), (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    long long v49 = __dst;
    *(void *)(v48 + 16) = v169;
    *(_OWORD *)unint64_t v48 = v49;
  }
  *(unsigned char *)(v48 + 24) = 0;
  *(void *)(v48 + 32) = v47;
  *(_DWORD *)(v48 + 40) = 1;
  *(void *)(a5 + 32) = v48 + 48;
  *(void *)(a5 + 32) = v48 + 48;
  if (SHIBYTE(v169) < 0) {
LABEL_135:
  }
    operator delete((void *)__dst);
LABEL_68:
  int v50 = SHIBYTE(v165.__r_.__value_.__r.__words[2]);
  if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v51 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v51 = v165.__r_.__value_.__l.__size_;
  }
  unint64_t v52 = v51 + 21;
  if (v51 + 21 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v52 >= 0x17)
  {
    uint64_t v54 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17) {
      uint64_t v54 = v52 | 7;
    }
    uint64_t v55 = v54 + 1;
    long long v53 = (long long *)operator new(v54 + 1);
    *((void *)&__dst + 1) = v51 + 21;
    unint64_t v169 = v55 | 0x8000000000000000;
    *(void *)&long long __dst = v53;
    uint64_t v26 = (uint64_t)v164;
  }
  else
  {
    unint64_t v169 = 0;
    long long __dst = 0uLL;
    long long v53 = &__dst;
    HIBYTE(v169) = v51 + 21;
    if (!v51) {
      goto LABEL_82;
    }
  }
  if (v50 >= 0) {
    char v56 = &v165;
  }
  else {
    char v56 = (std::string *)v165.__r_.__value_.__r.__words[0];
  }
  memmove(v53, v56, v51);
LABEL_82:
  strcpy((char *)v53 + v51, "MainRoute.FreeflowETA");
  LOBYTE(v173[0]) = 0;
  if (v17 < 0) {
    char v57 = -5;
  }
  else {
    char v57 = 5;
  }
  signed int v58 = v17 / 10 + (((103 * (char)(v57 + v17 % 10)) >> 15) & 1) + ((103 * (char)(v57 + v17 % 10)) >> 10);
  LODWORD(__p[0]) = v58;
  unint64_t v59 = *(void *)(a5 + 32);
  if (v59 >= *(void *)(a5 + 40))
  {
    *(void *)(a5 + 32) = sub_D57928((char **)(a5 + 24), (uint64_t)&__dst, (char *)v173, (int *)__p);
    if ((SHIBYTE(v169) & 0x80000000) == 0) {
      goto LABEL_89;
    }
    goto LABEL_138;
  }
  if (SHIBYTE(v169) < 0)
  {
    sub_4200(*(unsigned char **)(a5 + 32), (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    long long v60 = __dst;
    *(void *)(v59 + 16) = v169;
    *(_OWORD *)unint64_t v59 = v60;
  }
  *(unsigned char *)(v59 + 24) = 0;
  *(void *)(v59 + 32) = v58;
  *(_DWORD *)(v59 + 40) = 1;
  *(void *)(a5 + 32) = v59 + 48;
  *(void *)(a5 + 32) = v59 + 48;
  if (SHIBYTE(v169) < 0) {
LABEL_138:
  }
    operator delete((void *)__dst);
LABEL_89:
  int v61 = SHIBYTE(v165.__r_.__value_.__r.__words[2]);
  if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v62 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v62 = v165.__r_.__value_.__l.__size_;
  }
  unint64_t v63 = v62 + 24;
  if (v62 + 24 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v63 <= 0x16)
  {
    unint64_t v169 = 0;
    long long __dst = 0uLL;
    char v64 = &__dst;
    HIBYTE(v169) = v62 + 24;
LABEL_98:
    if (v61 >= 0) {
      uint64_t v67 = &v165;
    }
    else {
      uint64_t v67 = (std::string *)v165.__r_.__value_.__r.__words[0];
    }
    memmove(v64, v67, v62);
    goto LABEL_102;
  }
  uint64_t v65 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v63 | 7) != 0x17) {
    uint64_t v65 = v63 | 7;
  }
  uint64_t v66 = v65 + 1;
  char v64 = (long long *)operator new(v65 + 1);
  *((void *)&__dst + 1) = v62 + 24;
  unint64_t v169 = v66 | 0x8000000000000000;
  *(void *)&long long __dst = v64;
  if (v62) {
    goto LABEL_98;
  }
LABEL_102:
  BOOL v68 = __OFSUB__(v11, v12);
  int v69 = v11 - v12;
  strcpy((char *)v64 + v62, "MainRoute.ETA-Historical");
  LOBYTE(v173[0]) = 0;
  if (v69 < 0 != v68) {
    char v70 = -5;
  }
  else {
    char v70 = 5;
  }
  signed int v71 = v69 / 10 + (((103 * (char)(v70 + v69 % 10)) >> 15) & 1) + ((103 * (char)(v70 + v69 % 10)) >> 10);
  LODWORD(__p[0]) = v71;
  unint64_t v72 = *(void *)(a5 + 32);
  if (v72 >= *(void *)(a5 + 40))
  {
    *(void *)(a5 + 32) = sub_D57928((char **)(a5 + 24), (uint64_t)&__dst, (char *)v173, (int *)__p);
    if (SHIBYTE(v169) < 0) {
      goto LABEL_141;
    }
LABEL_109:
    if (v69 < 1) {
      goto LABEL_142;
    }
LABEL_110:
    int v74 = SHIBYTE(v165.__r_.__value_.__r.__words[2]);
    if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v75 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v75 = v165.__r_.__value_.__l.__size_;
    }
    unint64_t v76 = v75 + 29;
    if (v75 + 29 > 0x7FFFFFFFFFFFFFF7) {
      sub_188D690();
    }
    if (v76 > 0x16)
    {
      uint64_t v78 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v76 | 7) != 0x17) {
        uint64_t v78 = v76 | 7;
      }
      uint64_t v79 = v78 + 1;
      uint64_t v77 = (char *)operator new(v78 + 1);
      *((void *)&__dst + 1) = v75 + 29;
      unint64_t v169 = v79 | 0x8000000000000000;
      *(void *)&long long __dst = v77;
      if (!v75)
      {
LABEL_123:
        strcpy(&v77[v75], "MainRoute.ETA-Historical.Over");
        LOBYTE(v173[0]) = 0;
        LODWORD(__p[0]) = v71;
        unint64_t v81 = *(void *)(a5 + 32);
        if (v81 < *(void *)(a5 + 40))
        {
          if (SHIBYTE(v169) < 0)
          {
            sub_4200(*(unsigned char **)(a5 + 32), (void *)__dst, *((unint64_t *)&__dst + 1));
          }
          else
          {
            long long v82 = __dst;
            *(void *)(v81 + 16) = v169;
            *(_OWORD *)unint64_t v81 = v82;
          }
          uint64_t v88 = v71;
          goto LABEL_151;
        }
LABEL_126:
        uint64_t v83 = sub_D57928((char **)(a5 + 24), (uint64_t)&__dst, (char *)v173, (int *)__p);
        goto LABEL_152;
      }
    }
    else
    {
      unint64_t v169 = 0;
      long long __dst = 0uLL;
      uint64_t v77 = (char *)&__dst;
      HIBYTE(v169) = v75 + 29;
    }
    if (v74 >= 0) {
      char v80 = &v165;
    }
    else {
      char v80 = (std::string *)v165.__r_.__value_.__r.__words[0];
    }
    memmove(v77, v80, v75);
    goto LABEL_123;
  }
  if (SHIBYTE(v169) < 0)
  {
    sub_4200(*(unsigned char **)(a5 + 32), (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    long long v73 = __dst;
    *(void *)(v72 + 16) = v169;
    *(_OWORD *)unint64_t v72 = v73;
  }
  *(unsigned char *)(v72 + 24) = 0;
  *(void *)(v72 + 32) = v71;
  *(_DWORD *)(v72 + 40) = 1;
  *(void *)(a5 + 32) = v72 + 48;
  *(void *)(a5 + 32) = v72 + 48;
  if ((SHIBYTE(v169) & 0x80000000) == 0) {
    goto LABEL_109;
  }
LABEL_141:
  operator delete((void *)__dst);
  if (v69 >= 1) {
    goto LABEL_110;
  }
LABEL_142:
  if ((v69 & 0x80000000) == 0) {
    goto LABEL_153;
  }
  int v84 = SHIBYTE(v165.__r_.__value_.__r.__words[2]);
  if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v85 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v85 = v165.__r_.__value_.__l.__size_;
  }
  unint64_t v86 = v85 + 30;
  if (v85 + 30 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v86 <= 0x16)
  {
    unint64_t v169 = 0;
    long long __dst = 0uLL;
    uint64_t v87 = &__dst;
    HIBYTE(v169) = v85 + 30;
LABEL_214:
    if (v84 >= 0) {
      uint64_t v118 = &v165;
    }
    else {
      uint64_t v118 = (std::string *)v165.__r_.__value_.__r.__words[0];
    }
    memmove(v87, v118, v85);
    goto LABEL_218;
  }
  uint64_t v116 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v86 | 7) != 0x17) {
    uint64_t v116 = v86 | 7;
  }
  uint64_t v117 = v116 + 1;
  uint64_t v87 = (long long *)operator new(v116 + 1);
  *((void *)&__dst + 1) = v85 + 30;
  unint64_t v169 = v117 | 0x8000000000000000;
  *(void *)&long long __dst = v87;
  if (v85) {
    goto LABEL_214;
  }
LABEL_218:
  strcpy((char *)v87 + v85, "MainRoute.ETA-Historical.Under");
  LOBYTE(v173[0]) = 0;
  LODWORD(__p[0]) = -v71;
  unint64_t v81 = *(void *)(a5 + 32);
  if (v81 >= *(void *)(a5 + 40)) {
    goto LABEL_126;
  }
  if (SHIBYTE(v169) < 0)
  {
    sub_4200(*(unsigned char **)(a5 + 32), (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    long long v119 = __dst;
    *(void *)(v81 + 16) = v169;
    *(_OWORD *)unint64_t v81 = v119;
  }
  uint64_t v88 = -v71;
LABEL_151:
  *(unsigned char *)(v81 + 24) = 0;
  *(void *)(v81 + 32) = v88;
  *(_DWORD *)(v81 + 40) = 1;
  uint64_t v83 = (char *)(v81 + 48);
  *(void *)(a5 + 32) = v81 + 48;
LABEL_152:
  *(void *)(a5 + 32) = v83;
  if ((SHIBYTE(v169) & 0x80000000) == 0)
  {
LABEL_153:
    if (!v161) {
      goto LABEL_323;
    }
    goto LABEL_156;
  }
  operator delete((void *)__dst);
  if (!v161) {
    goto LABEL_323;
  }
LABEL_156:
  uint64_t v162 = sub_69510();
  uint64_t v89 = sub_40EFE8(v26);
  uint64_t v90 = sub_52058(v26);
  if (v89 == v90)
  {
    v173[0] = 0;
LABEL_183:
    int v102 = SHIBYTE(v165.__r_.__value_.__r.__words[2]);
    if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v103 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v103 = v165.__r_.__value_.__l.__size_;
    }
    unint64_t v104 = v103 + 25;
    if (v103 + 25 > 0x7FFFFFFFFFFFFFF7) {
LABEL_333:
    }
      sub_188D690();
    if (v104 > 0x16)
    {
      uint64_t v106 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v104 | 7) != 0x17) {
        uint64_t v106 = v104 | 7;
      }
      uint64_t v107 = v106 + 1;
      uint64_t v105 = (char *)operator new(v106 + 1);
      *((void *)&__dst + 1) = v103 + 25;
      unint64_t v169 = v107 | 0x8000000000000000;
      *(void *)&long long __dst = v105;
      if (!v103)
      {
LABEL_196:
        strcpy(&v105[v103], "MainRoute.NoChargingStops");
        LOBYTE(v172) = 4;
        LODWORD(__p[0]) = 1;
        unint64_t v109 = *(void *)(a5 + 32);
        if (v109 >= *(void *)(a5 + 40))
        {
          uint64_t v111 = sub_D57928(v22, (uint64_t)&__dst, (char *)&v172, (int *)__p);
        }
        else
        {
          if (SHIBYTE(v169) < 0)
          {
            sub_4200(*(unsigned char **)(a5 + 32), (void *)__dst, *((unint64_t *)&__dst + 1));
          }
          else
          {
            long long v110 = __dst;
            *(void *)(v109 + 16) = v169;
            *(_OWORD *)unint64_t v109 = v110;
          }
          *(unsigned char *)(v109 + 24) = 4;
          *(void *)(v109 + 32) = 1;
          *(_DWORD *)(v109 + 40) = 1;
LABEL_227:
          uint64_t v111 = (char *)(v109 + 48);
          *(void *)(a5 + 32) = v109 + 48;
        }
        goto LABEL_228;
      }
    }
    else
    {
      unint64_t v169 = 0;
      long long __dst = 0uLL;
      uint64_t v105 = (char *)&__dst;
      HIBYTE(v169) = v103 + 25;
    }
    if (v102 >= 0) {
      std::string::size_type v108 = &v165;
    }
    else {
      std::string::size_type v108 = (std::string *)v165.__r_.__value_.__r.__words[0];
    }
    memmove(v105, v108, v103);
    goto LABEL_196;
  }
  uint64_t v91 = 0;
  do
  {
    uint64_t v92 = (_DWORD *)sub_374DF4(v89);
    uint64_t v93 = v92;
    if (*v92 != 0x7FFFFFFF && v92[9] != 0x7FFFFFFF && sub_40A45C(v92 + 2))
    {
      int v95 = v93[28];
      if (v95 != -1)
      {
        if (v95 == 1)
        {
          unint64_t v96 = *((void *)v93 + 13);
          if (v96) {
            BOOL v97 = v96 >= 0xFFFFFFFF00000000;
          }
          else {
            BOOL v97 = 1;
          }
          if (!v97) {
            goto LABEL_158;
          }
        }
        else
        {
          if (v95)
          {
LABEL_326:
            exception = __cxa_allocate_exception(8uLL);
            void *exception = &off_23FDF58;
          }
          uint64_t v26 = (uint64_t)v164;
          if (*((void *)v93 + 13) != -1) {
LABEL_158:
          }
            ++v91;
        }
      }
    }
    v89 += 1056;
  }
  while (v89 != v90);
  v173[0] = v91;
  uint64_t v22 = (char **)(a5 + 24);
  if (v91 < 1) {
    goto LABEL_183;
  }
  int v98 = SHIBYTE(v165.__r_.__value_.__r.__words[2]);
  if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v99 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v99 = v165.__r_.__value_.__l.__size_;
  }
  unint64_t v100 = v99 + 26;
  if (v99 + 26 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_333;
  }
  if (v100 <= 0x16)
  {
    unint64_t v169 = 0;
    long long __dst = 0uLL;
    int64_t v101 = &__dst;
    HIBYTE(v169) = v99 + 26;
    goto LABEL_203;
  }
  uint64_t v112 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v100 | 7) != 0x17) {
    uint64_t v112 = v100 | 7;
  }
  uint64_t v113 = v112 + 1;
  int64_t v101 = (long long *)operator new(v112 + 1);
  *((void *)&__dst + 1) = v99 + 26;
  unint64_t v169 = v113 | 0x8000000000000000;
  *(void *)&long long __dst = v101;
  if (v99)
  {
LABEL_203:
    if (v98 >= 0) {
      std::string::pointer v114 = &v165;
    }
    else {
      std::string::pointer v114 = (std::string *)v165.__r_.__value_.__r.__words[0];
    }
    memmove(v101, v114, v99);
  }
  strcpy((char *)v101 + v99, "MainRoute.NumChargingStops");
  LOBYTE(__p[0]) = 4;
  unint64_t v109 = *(void *)(a5 + 32);
  if (v109 < *(void *)(a5 + 40))
  {
    if (SHIBYTE(v169) < 0)
    {
      sub_4200(*(unsigned char **)(a5 + 32), (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      long long v115 = __dst;
      *(void *)(v109 + 16) = v169;
      *(_OWORD *)unint64_t v109 = v115;
    }
    *(unsigned char *)(v109 + 24) = 4;
    *(void *)(v109 + 32) = v91;
    *(_DWORD *)(v109 + 40) = 1;
    goto LABEL_227;
  }
  uint64_t v111 = sub_D57714((char **)(a5 + 24), (uint64_t)&__dst, (char *)__p, v173);
LABEL_228:
  *(void *)(a5 + 32) = v111;
  if (SHIBYTE(v169) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v172 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v120 = sub_40EFE8(v26);
  uint64_t v121 = sub_52058(v26);
  uint64_t v122 = v121;
  if (v120 == v121 || v120 + 1056 == v121) {
    goto LABEL_281;
  }
  uint64_t v123 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    if (*(_DWORD *)(v120 + 128) == -1 && *(_DWORD *)(v120 + 1184) == -1)
    {
      uint64_t v127 = (_DWORD *)sub_374DF4(v120);
      uint64_t v128 = v127;
      if (*v127 != 0x7FFFFFFF && v127[9] != 0x7FFFFFFF && sub_40A45C(v127 + 2))
      {
        int v130 = v128[28];
        if (v130 != -1)
        {
          if (v130 == 1)
          {
            if (*((void *)v128 + 13) > 0xFFFFFFFEFFFFFFFFLL || !*((void *)v128 + 13)) {
              goto LABEL_237;
            }
          }
          else
          {
            if (v130) {
              goto LABEL_326;
            }
            if (*((void *)v128 + 13) == -1) {
              goto LABEL_237;
            }
          }
          std::string::size_type v131 = (_DWORD *)sub_374DF4(v120 + 1056);
          std::string v132 = v131;
          if (*v131 == 0x7FFFFFFF) {
            goto LABEL_237;
          }
          if (v131[9] == 0x7FFFFFFF) {
            goto LABEL_237;
          }
          if (!sub_40A45C(v131 + 2)) {
            goto LABEL_237;
          }
          int v133 = v132[28];
          if (v133 == -1) {
            goto LABEL_237;
          }
          if (v133 == 1)
          {
            if (*((void *)v132 + 13) > 0xFFFFFFFEFFFFFFFFLL || !*((void *)v132 + 13)) {
              goto LABEL_237;
            }
          }
          else
          {
            if (v133) {
              goto LABEL_326;
            }
            if (*((void *)v132 + 13) == -1) {
              goto LABEL_237;
            }
          }
          uint64_t v124 = (uint64_t *)(v120 + 504);
          if (v123 != 0x7FFFFFFFFFFFFFFFLL)
          {
            if (*v124 == 0x7FFFFFFFFFFFFFFFLL)
            {
              uint64_t v124 = &v172;
            }
            else if (v123 < *v124)
            {
              uint64_t v124 = &v172;
            }
          }
          uint64_t v123 = *v124;
          uint64_t v172 = *v124;
        }
      }
    }
LABEL_237:
    uint64_t v125 = v120 + 2112;
    v120 += 1056;
    if (v125 != v122) {
      continue;
    }
    break;
  }
  uint64_t v26 = (uint64_t)v164;
  if (v123 <= 1999999 && sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&__dst);
    sub_188FC78(&__dst, (uint64_t)"EV response contains at least 2 charging stops within 20 km (min distance: ", 75);
    unint64_t v134 = (void *)std::ostream::operator<<();
    int64_t v135 = sub_188FC78(v134, (uint64_t)" km):\n", 6);
    uint64_t v136 = sub_68EE4((uint64_t)v162);
    int v137 = *(char *)(v136 + 23);
    if (v137 >= 0) {
      uint64_t v138 = v136;
    }
    else {
      uint64_t v138 = *(void *)v136;
    }
    if (v137 >= 0) {
      uint64_t v139 = *(unsigned __int8 *)(v136 + 23);
    }
    else {
      uint64_t v139 = *(void *)(v136 + 8);
    }
    sub_188FC78(v135, v138, v139);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (v167 < 0) {
      operator delete(__p[0]);
    }
    if (v171 < 0) {
      operator delete(v170);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
LABEL_281:
  if (!sub_45FB48(v26)) {
    goto LABEL_310;
  }
  uint64_t v140 = sub_40EFE8(v26);
  uint64_t v141 = sub_52058(v26);
  uint64_t v142 = v140 + 1056;
  if (v140 + 1056 == v141) {
    goto LABEL_310;
  }
  while (2)
  {
    unsigned __int8 v143 = (_DWORD *)sub_374DF4(v142);
    uint64_t v144 = v143;
    if (*v143 == 0x7FFFFFFF || v143[9] == 0x7FFFFFFF) {
      goto LABEL_284;
    }
    if (!sub_40A45C(v143 + 2)) {
      goto LABEL_284;
    }
    int v146 = v144[28];
    if (v146 == -1) {
      goto LABEL_284;
    }
    if (v146 == 1)
    {
      if (*((void *)v144 + 13) <= 0xFFFFFFFEFFFFFFFFLL && *((void *)v144 + 13)) {
        goto LABEL_297;
      }
      goto LABEL_284;
    }
    if (v146) {
      goto LABEL_326;
    }
    uint64_t v26 = (uint64_t)v164;
    if (*((void *)v144 + 13) == -1) {
      goto LABEL_284;
    }
LABEL_297:
    uint64_t v147 = sub_374DF4(v142);
    if (sub_3FB38C(v147 + 8) != 100)
    {
LABEL_284:
      v142 += 1056;
      if (v142 == v141) {
        goto LABEL_310;
      }
      continue;
    }
    break;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&__dst);
    long long v148 = sub_188FC78(&__dst, (uint64_t)"EV response contains at least one charging stop recommendation for charging to 100% SoC:\n", 89);
    uint64_t v149 = sub_68EE4((uint64_t)v162);
    int v150 = *(char *)(v149 + 23);
    if (v150 >= 0) {
      uint64_t v151 = v149;
    }
    else {
      uint64_t v151 = *(void *)v149;
    }
    if (v150 >= 0) {
      uint64_t v152 = *(unsigned __int8 *)(v149 + 23);
    }
    else {
      uint64_t v152 = *(void *)(v149 + 8);
    }
    sub_188FC78(v148, v151, v152);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (v167 < 0) {
      operator delete(__p[0]);
    }
    if (v171 < 0) {
      operator delete(v170);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
LABEL_310:
  if (sub_45FB48(v26))
  {
    uint64_t v153 = nullsub_1(v26);
    *(void *)&long long __dst = sub_475024(*(void *)(v153 + 8) - 608);
    DWORD2(__dst) = v154;
    if (sub_40A45C((int *)&__dst) && sub_4056D4(v26) < 0.03 && sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&__dst);
      int v155 = sub_188FC78(&__dst, (uint64_t)"EV response contains a main route with very low remaining SoC (less than 3%):\n", 78);
      uint64_t v156 = sub_68EE4((uint64_t)v163);
      int v157 = *(char *)(v156 + 23);
      if (v157 >= 0) {
        uint64_t v158 = v156;
      }
      else {
        uint64_t v158 = *(void *)v156;
      }
      if (v157 >= 0) {
        uint64_t v159 = *(unsigned __int8 *)(v156 + 23);
      }
      else {
        uint64_t v159 = *(void *)(v156 + 8);
      }
      sub_188FC78(v155, v158, v159);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (v167 < 0) {
        operator delete(__p[0]);
      }
      sub_111ECAC((uint64_t)&__dst);
    }
  }
LABEL_323:
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v165.__r_.__value_.__l.__data_);
  }
}

void sub_D56E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a25);
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

void sub_D56F1C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  *((unsigned char *)&v21.__r_.__value_.__s + 23) = 0;
  v21.__r_.__value_.__s.__data_[0] = 0;
  if (a3) {
    std::string::append(&v21, "EV.");
  }
  if (a4) {
    std::string::append(&v21, "MPR.");
  }
  if (sub_487794(a2) != 2) {
    goto LABEL_24;
  }
  int v8 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v21.__r_.__value_.__l.__size_;
  }
  unint64_t v10 = size + 18;
  if (size + 18 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v10 >= 0x17)
  {
    uint64_t v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v12 = v10 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (long long *)operator new(v12 + 1);
    *((void *)&__dst + 1) = size + 18;
    unint64_t v20 = v13 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    unint64_t v20 = 0;
    long long __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(v20) = size + 18;
    if (!size) {
      goto LABEL_20;
    }
  }
  if (v8 >= 0) {
    int v14 = &v21;
  }
  else {
    int v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
  }
  memmove(p_dst, v14, size);
LABEL_20:
  strcpy((char *)p_dst + size, "NavSession.started");
  char v18 = 4;
  int v17 = 1;
  unint64_t v15 = *(void *)(a5 + 32);
  if (v15 >= *(void *)(a5 + 40))
  {
    *(void *)(a5 + 32) = sub_D57928((char **)(a5 + 24), (uint64_t)&__dst, &v18, &v17);
    if (SHIBYTE(v20) < 0) {
      goto LABEL_28;
    }
  }
  else
  {
    if (SHIBYTE(v20) < 0)
    {
      sub_4200(*(unsigned char **)(a5 + 32), (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      long long v16 = __dst;
      *(void *)(v15 + 16) = v20;
      *(_OWORD *)unint64_t v15 = v16;
    }
    *(unsigned char *)(v15 + 24) = 4;
    *(void *)(v15 + 32) = 1;
    *(_DWORD *)(v15 + 40) = 1;
    *(void *)(a5 + 32) = v15 + 48;
    *(void *)(a5 + 32) = v15 + 48;
    if (SHIBYTE(v20) < 0)
    {
LABEL_28:
      operator delete((void *)__dst);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_29;
      }
      return;
    }
  }
LABEL_24:
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
LABEL_29:
  }
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_D5711C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v24 = v23;
  *(void *)(v22 + 32) = v24;
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D57168(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t result = sub_DBD380(a1);
  if ((result & 1) == 0)
  {
    uint64_t result = sub_374CEC(a2);
    if (result != 0x7FFFFFFF)
    {
      int v6 = result;
      __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      char v9 = 0;
      int v8 = std::chrono::system_clock::to_time_t(&__t) - v6;
      unint64_t v7 = a3[4];
      if (v7 >= a3[5])
      {
        uint64_t result = sub_D32D4C(a3 + 3, "TrafficLatency", &v9, &v8);
      }
      else
      {
        sub_D32F1C(a3 + 40, a3[4], "TrafficLatency", &v9, &v8);
        uint64_t result = v7 + 48;
        a3[4] = v7 + 48;
      }
      a3[4] = result;
    }
  }
  return result;
}

void sub_D57224(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_D5722C(unint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  unint64_t v7 = "[2-5]";
  int v8 = "[51+]";
  if (a1 < 0x33) {
    int v8 = "[6-50]";
  }
  if (a1 >= 6) {
    unint64_t v7 = v8;
  }
  if (a1 == 1) {
    char v9 = "[1]";
  }
  else {
    char v9 = v7;
  }
  size_t v10 = strlen(v9);
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  int v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    uint64_t v12 = (void **)operator new(v13 + 1);
    __dst[1] = v11;
    unint64_t v18 = v14 | 0x8000000000000000;
    __dst[0] = v12;
  }
  else
  {
    HIBYTE(v18) = v10;
    uint64_t v12 = __dst;
    if (!v10) {
      goto LABEL_16;
    }
  }
  memcpy(v12, v9, (size_t)v11);
LABEL_16:
  *((unsigned char *)v11 + (void)v12) = 0;
  sub_D546F4(a4, (uint64_t)__dst, a3);
  if (*(_DWORD *)(sub_37B3A8(a2) + 8) != 1
    || (std::operator+<char>(), sub_D546F4(a4, (uint64_t)&__p, a3), (v16 & 0x80000000) == 0))
  {
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_19;
  }
  operator delete(__p);
  if (SHIBYTE(v18) < 0) {
LABEL_19:
  }
    operator delete(__dst[0]);
}

void sub_D5739C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_D573EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (*(unsigned char *)(a1 + 482))
  {
    LOBYTE(v24) = 4;
    LODWORD(v27[0]) = 1;
    unint64_t v8 = a4[4];
    if (v8 >= a4[5])
    {
      uint64_t v9 = sub_D585DC(a4 + 3, "EV.TransitionToNonEVRoute", (char *)&v24, (int *)v27);
    }
    else
    {
      sub_D587AC(a4 + 40, a4[4], "EV.TransitionToNonEVRoute", (char *)&v24, (int *)v27);
      uint64_t v9 = v8 + 48;
      a4[4] = v8 + 48;
    }
    a4[4] = v9;
  }
  if (sub_401FE4(a1) && sub_487794(a2) >= 5)
  {
    unsigned int v10 = sub_46CABC(a1);
    if (v10 <= 0x7FFFFFFE)
    {
      signed int v11 = v10;
      LOBYTE(v24) = 0;
      unint64_t v12 = a4[5];
      unsigned int v13 = v10 / 0xA;
      if (v10 % 0xA > 4) {
        ++v13;
      }
      LODWORD(v27[0]) = v13;
      unint64_t v14 = a4[4];
      if (v14 >= v12)
      {
        uint64_t v15 = sub_D293C8(a4 + 3, "EV.TimeSinceLastVehicleInformationUpdate", (char *)&v24, (int *)v27);
      }
      else
      {
        sub_D29598(a4 + 40, a4[4], "EV.TimeSinceLastVehicleInformationUpdate", (char *)&v24, (int *)v27);
        uint64_t v15 = v14 + 48;
        a4[4] = v14 + 48;
      }
      a4[4] = v15;
      char v28 = 9;
      uint64_t v26 = 0;
      strcpy((char *)v27, "EVRouting");
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      char v16 = sub_374CDC(a3, (uint64_t)v27, (uint64_t *)&v24);
      std::string __p = operator new(0x20uLL);
      long long v23 = xmmword_20B91A0;
      strcpy((char *)__p, "ev_info_staleness_limit_min");
      signed int v17 = sub_5D2EC(v16, &__p);
      if (SHIBYTE(v23) < 0) {
        operator delete(__p);
      }
      unint64_t v18 = (void **)v24;
      if (v24)
      {
        uint64_t v19 = v25;
        unint64_t v20 = v24;
        if (v25 != v24)
        {
          do
          {
            if (*((char *)v19 - 1) < 0) {
              operator delete(*(v19 - 3));
            }
            v19 -= 3;
          }
          while (v19 != v18);
          unint64_t v20 = v24;
        }
        unint64_t v25 = v18;
        operator delete(v20);
      }
      if (v28 < 0)
      {
        operator delete(v27[0]);
        if (v11 <= v17) {
          return;
        }
      }
      else if (v11 <= v17)
      {
        return;
      }
      LOBYTE(v24) = 4;
      LODWORD(v27[0]) = 1;
      unint64_t v21 = a4[4];
      if (v21 >= a4[5])
      {
        a4[4] = sub_D067F0(a4 + 3, "EV.StaleVehicleInformation", (char *)&v24, (int *)v27);
      }
      else
      {
        sub_D069C0(a4 + 40, a4[4], "EV.StaleVehicleInformation", (char *)&v24, (int *)v27);
        a4[4] = v21 + 48;
        a4[4] = v21 + 48;
      }
    }
  }
}

void sub_D576BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_D576C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_D576CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1A668(&a16);
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

void sub_D5770C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

char *sub_D57714(char **a1, uint64_t a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = *a1;
  int v6 = a1[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v5) >> 4) > v8) {
    unint64_t v8 = 0x5555555555555556 * ((a1[2] - v5) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v8;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    unsigned int v13 = (char *)operator new(48 * v12);
  }
  else
  {
    unsigned int v13 = 0;
  }
  unint64_t v14 = &v13[48 * v7];
  uint64_t v24 = &v13[48 * v12];
  char v15 = *a3;
  uint64_t v16 = *a4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v14, *(void **)a2, *(void *)(a2 + 8));
    unint64_t v5 = *a1;
    int v6 = a1[1];
    unint64_t v14 = &v13[48 * v7];
  }
  else
  {
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
  }
  signed int v17 = &v13[48 * v7];
  v17[24] = v15;
  *((void *)v17 + 4) = v16;
  *((_DWORD *)v17 + 10) = 1;
  unint64_t v18 = v17 + 48;
  if (v6 == v5)
  {
    unint64_t v21 = v5;
  }
  else
  {
    do
    {
      long long v19 = *((_OWORD *)v6 - 3);
      *((void *)v14 - 4) = *((void *)v6 - 4);
      *((_OWORD *)v14 - 3) = v19;
      *((void *)v6 - 5) = 0;
      *((void *)v6 - 4) = 0;
      *((void *)v6 - 6) = 0;
      long long v20 = *(_OWORD *)(v6 - 24);
      *((_DWORD *)v14 - 2) = *((_DWORD *)v6 - 2);
      *(_OWORD *)(v14 - 24) = v20;
      v14 -= 48;
      v6 -= 48;
    }
    while (v6 != v5);
    unint64_t v21 = *a1;
    unint64_t v5 = a1[1];
  }
  *a1 = v14;
  a1[1] = v18;
  a1[2] = v24;
  if (v5 != v21)
  {
    uint64_t v22 = (void **)(v5 - 48);
    do
    {
      if (*((char *)v22 + 23) < 0) {
        operator delete(*v22);
      }
      v22 -= 6;
    }
    while (v22 + 6 != (void **)v21);
    unint64_t v5 = v21;
  }
  if (v5) {
    operator delete(v5);
  }
  return v18;
}

void sub_D57914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_D57928(char **a1, uint64_t a2, char *a3, int *a4)
{
  unint64_t v5 = *a1;
  int v6 = a1[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v5) >> 4) > v8) {
    unint64_t v8 = 0x5555555555555556 * ((a1[2] - v5) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v8;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    unsigned int v13 = (char *)operator new(48 * v12);
  }
  else
  {
    unsigned int v13 = 0;
  }
  unint64_t v14 = &v13[48 * v7];
  uint64_t v24 = &v13[48 * v12];
  char v15 = *a3;
  uint64_t v16 = *a4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v14, *(void **)a2, *(void *)(a2 + 8));
    unint64_t v5 = *a1;
    int v6 = a1[1];
    unint64_t v14 = &v13[48 * v7];
  }
  else
  {
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
  }
  signed int v17 = &v13[48 * v7];
  v17[24] = v15;
  *((void *)v17 + 4) = v16;
  *((_DWORD *)v17 + 10) = 1;
  unint64_t v18 = v17 + 48;
  if (v6 == v5)
  {
    unint64_t v21 = v5;
  }
  else
  {
    do
    {
      long long v19 = *((_OWORD *)v6 - 3);
      *((void *)v14 - 4) = *((void *)v6 - 4);
      *((_OWORD *)v14 - 3) = v19;
      *((void *)v6 - 5) = 0;
      *((void *)v6 - 4) = 0;
      *((void *)v6 - 6) = 0;
      long long v20 = *(_OWORD *)(v6 - 24);
      *((_DWORD *)v14 - 2) = *((_DWORD *)v6 - 2);
      *(_OWORD *)(v14 - 24) = v20;
      v14 -= 48;
      v6 -= 48;
    }
    while (v6 != v5);
    unint64_t v21 = *a1;
    unint64_t v5 = a1[1];
  }
  *a1 = v14;
  a1[1] = v18;
  a1[2] = v24;
  if (v5 != v21)
  {
    uint64_t v22 = (void **)(v5 - 48);
    do
    {
      if (*((char *)v22 + 23) < 0) {
        operator delete(*v22);
      }
      v22 -= 6;
    }
    while (v22 + 6 != (void **)v21);
    unint64_t v5 = v21;
  }
  if (v5) {
    operator delete(v5);
  }
  return v18;
}

void sub_D57B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D57B3C(uint64_t *a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    signed int v11 = (char *)operator new(48 * v10);
  }
  else
  {
    signed int v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D57D0C(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  unint64_t v14 = (char *)*a1;
  char v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    unint64_t v18 = (char *)*a1;
    char v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      char v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D57CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D57D0C(int a1, uint64_t a2, char *__s, char *a4, uint64_t *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D57E64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D57E78(uint64_t *a1, char *a2, char *a3, double *a4, int *a5)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v7;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v22 = (uint64_t)&v13[48 * v6];
  long long v23 = &v13[48 * v12];
  sub_D58050(a1 + 16, v22, a2, a3, a4, a5);
  uint64_t v14 = v22;
  uint64_t v15 = v22 + 48;
  long long v16 = (char *)*a1;
  long long v17 = (char *)a1[1];
  if (v17 == (char *)*a1)
  {
    *a1 = v22;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
  }
  else
  {
    do
    {
      long long v18 = *((_OWORD *)v17 - 3);
      *(void *)(v14 - 32) = *((void *)v17 - 4);
      *(_OWORD *)(v14 - 48) = v18;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 6) = 0;
      long long v19 = *(_OWORD *)(v17 - 24);
      *(_DWORD *)(v14 - 8) = *((_DWORD *)v17 - 2);
      *(_OWORD *)(v14 - 24) = v19;
      v14 -= 48;
      v17 -= 48;
    }
    while (v17 != v16);
    uint64_t v20 = (char *)*a1;
    long long v17 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
    if (v17 != v20)
    {
      do
      {
        if (*(v17 - 25) < 0) {
          operator delete(*((void **)v17 - 6));
        }
        v17 -= 48;
      }
      while (v17 != v20);
      long long v17 = v20;
    }
  }
  if (v17) {
    operator delete(v17);
  }
  return v22 + 48;
}

void sub_D5803C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D58050(int a1, uint64_t a2, char *__s, char *a4, double *a5, int *a6)
{
  size_t v11 = strlen(__s);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v12;
    unint64_t v21 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v21) = v11;
  p_dst = &__dst;
  if (v11) {
LABEL_8:
  }
    memcpy(p_dst, __s, v12);
  *((unsigned char *)p_dst + v12) = 0;
  char v16 = *a4;
  uint64_t v17 = (uint64_t)*a5;
  int v18 = *a6;
  if (SHIBYTE(v21) < 0)
  {
    long long v19 = (void *)__dst;
    sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
    *(unsigned char *)(a2 + 24) = v16;
    *(void *)(a2 + 32) = v17;
    *(_DWORD *)(a2 + 40) = v18;
    operator delete(v19);
  }
  else
  {
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v21;
    *(unsigned char *)(a2 + 24) = v16;
    *(void *)(a2 + 32) = v17;
    *(_DWORD *)(a2 + 40) = v18;
  }
}

void sub_D5819C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_D581B0(char **a1, uint64_t a2, char *a3, int *a4, int *a5)
{
  unint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v6) >> 4) > v9) {
    unint64_t v9 = 0x5555555555555556 * ((a1[2] - v6) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v6) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v14 = 0x555555555555555;
  }
  else {
    unint64_t v14 = v9;
  }
  if (v14)
  {
    if (v14 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v15 = (char *)operator new(48 * v14);
  }
  else
  {
    uint64_t v15 = 0;
  }
  char v16 = &v15[48 * v8];
  long long v27 = &v15[48 * v14];
  char v17 = *a3;
  uint64_t v18 = *a4;
  int v19 = *a5;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v16, *(void **)a2, *(void *)(a2 + 8));
    unint64_t v6 = *a1;
    unint64_t v7 = a1[1];
    char v16 = &v15[48 * v8];
  }
  else
  {
    *(_OWORD *)char v16 = *(_OWORD *)a2;
    *((void *)v16 + 2) = *(void *)(a2 + 16);
  }
  uint64_t v20 = &v15[48 * v8];
  v20[24] = v17;
  *((void *)v20 + 4) = v18;
  *((_DWORD *)v20 + 10) = v19;
  unint64_t v21 = v20 + 48;
  if (v7 == v6)
  {
    uint64_t v24 = v6;
  }
  else
  {
    do
    {
      long long v22 = *((_OWORD *)v7 - 3);
      *((void *)v16 - 4) = *((void *)v7 - 4);
      *((_OWORD *)v16 - 3) = v22;
      *((void *)v7 - 5) = 0;
      *((void *)v7 - 4) = 0;
      *((void *)v7 - 6) = 0;
      long long v23 = *(_OWORD *)(v7 - 24);
      *((_DWORD *)v16 - 2) = *((_DWORD *)v7 - 2);
      *(_OWORD *)(v16 - 24) = v23;
      v16 -= 48;
      v7 -= 48;
    }
    while (v7 != v6);
    uint64_t v24 = *a1;
    unint64_t v6 = a1[1];
  }
  *a1 = v16;
  a1[1] = v21;
  a1[2] = v27;
  if (v6 != v24)
  {
    unint64_t v25 = (void **)(v6 - 48);
    do
    {
      if (*((char *)v25 + 23) < 0) {
        operator delete(*v25);
      }
      v25 -= 6;
    }
    while (v25 + 6 != (void **)v24);
    unint64_t v6 = v24;
  }
  if (v6) {
    operator delete(v6);
  }
  return v21;
}

void sub_D583B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D583C8(char **a1, uint64_t a2, char *a3, void *a4)
{
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 4);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v5) >> 4) > v8) {
    unint64_t v8 = 0x5555555555555556 * ((a1[2] - v5) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v8;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  unint64_t v14 = &v13[48 * v7];
  char v15 = *a3;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v14, *(void **)a2, *(void *)(a2 + 8));
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    unint64_t v14 = &v13[48 * v7];
  }
  else
  {
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
  }
  char v16 = &v13[48 * v7];
  v16[24] = v15;
  *((void *)v16 + 4) = *a4;
  *((_DWORD *)v16 + 10) = 1;
  if (v6 == v5)
  {
    int v19 = v5;
  }
  else
  {
    do
    {
      long long v17 = *((_OWORD *)v6 - 3);
      *((void *)v14 - 4) = *((void *)v6 - 4);
      *((_OWORD *)v14 - 3) = v17;
      *((void *)v6 - 5) = 0;
      *((void *)v6 - 4) = 0;
      *((void *)v6 - 6) = 0;
      long long v18 = *(_OWORD *)(v6 - 24);
      *((_DWORD *)v14 - 2) = *((_DWORD *)v6 - 2);
      *(_OWORD *)(v14 - 24) = v18;
      v14 -= 48;
      v6 -= 48;
    }
    while (v6 != v5);
    int v19 = *a1;
    unint64_t v5 = a1[1];
  }
  *a1 = v14;
  a1[1] = &v13[48 * v7 + 48];
  a1[2] = &v13[48 * v12];
  if (v5 != v19)
  {
    uint64_t v20 = (void **)(v5 - 48);
    do
    {
      if (*((char *)v20 + 23) < 0) {
        operator delete(*v20);
      }
      v20 -= 6;
    }
    while (v20 + 6 != (void **)v19);
    unint64_t v5 = v19;
  }
  if (v5) {
    operator delete(v5);
  }
  return (uint64_t)&v13[48 * v7 + 48];
}

void sub_D585C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D585DC(uint64_t *a1, char *a2, char *a3, int *a4)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x555555555555555) {
      sub_188D718();
    }
    size_t v11 = (char *)operator new(48 * v10);
  }
  else
  {
    size_t v11 = 0;
  }
  uint64_t v20 = (uint64_t)&v11[48 * v5];
  unint64_t v21 = &v11[48 * v10];
  sub_D587AC(a1 + 16, v20, a2, a3, a4);
  uint64_t v12 = v20;
  uint64_t v13 = v20 + 48;
  unint64_t v14 = (char *)*a1;
  char v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v20;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 3);
      *(void *)(v12 - 32) = *((void *)v15 - 4);
      *(_OWORD *)(v12 - 48) = v16;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v17 = *(_OWORD *)(v15 - 24);
      *(_DWORD *)(v12 - 8) = *((_DWORD *)v15 - 2);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 48;
      v15 -= 48;
    }
    while (v15 != v14);
    long long v18 = (char *)*a1;
    char v15 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v13;
    a1[2] = (uint64_t)v21;
    if (v15 != v18)
    {
      do
      {
        if (*(v15 - 25) < 0) {
          operator delete(*((void **)v15 - 6));
        }
        v15 -= 48;
      }
      while (v15 != v18);
      char v15 = v18;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v20 + 48;
}

void sub_D58798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D587AC(int a1, uint64_t a2, char *__s, char *a4, int *a5)
{
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v14 = v9 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v10;
    unint64_t v18 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v10);
    *((unsigned char *)p_dst + v10) = 0;
    char v12 = *a4;
    uint64_t v13 = *a5;
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v9;
  p_dst = &__dst;
  if (v9) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  char v12 = *a4;
  uint64_t v13 = *a5;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = v12;
    *(void *)(a2 + 32) = v13;
    *(_DWORD *)(a2 + 40) = 1;
    return;
  }
LABEL_10:
  long long v16 = (void *)__dst;
  sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(_DWORD *)(a2 + 40) = 1;

  operator delete(v16);
}

void sub_D58904(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D58918(uint64_t *a1, char *a2, char *a3, double *a4, int *a5)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v12 = 0x555555555555555;
  }
  else {
    unint64_t v12 = v7;
  }
  if (v12)
  {
    if (v12 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v13 = (char *)operator new(48 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v22 = (uint64_t)&v13[48 * v6];
  long long v23 = &v13[48 * v12];
  sub_D58AF0(a1 + 16, v22, a2, a3, a4, a5);
  uint64_t v14 = v22;
  uint64_t v15 = v22 + 48;
  long long v16 = (char *)*a1;
  long long v17 = (char *)a1[1];
  if (v17 == (char *)*a1)
  {
    *a1 = v22;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
  }
  else
  {
    do
    {
      long long v18 = *((_OWORD *)v17 - 3);
      *(void *)(v14 - 32) = *((void *)v17 - 4);
      *(_OWORD *)(v14 - 48) = v18;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 6) = 0;
      long long v19 = *(_OWORD *)(v17 - 24);
      *(_DWORD *)(v14 - 8) = *((_DWORD *)v17 - 2);
      *(_OWORD *)(v14 - 24) = v19;
      v14 -= 48;
      v17 -= 48;
    }
    while (v17 != v16);
    uint64_t v20 = (char *)*a1;
    long long v17 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (uint64_t)v23;
    if (v17 != v20)
    {
      do
      {
        if (*(v17 - 25) < 0) {
          operator delete(*((void **)v17 - 6));
        }
        v17 -= 48;
      }
      while (v17 != v20);
      long long v17 = v20;
    }
  }
  if (v17) {
    operator delete(v17);
  }
  return v22 + 48;
}

void sub_D58ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_354580((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D58AF0(int a1, uint64_t a2, char *__s, char *a4, double *a5, int *a6)
{
  size_t v11 = strlen(__s);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v12;
    unint64_t v21 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v21) = v11;
  p_dst = &__dst;
  if (v11) {
LABEL_8:
  }
    memcpy(p_dst, __s, v12);
  *((unsigned char *)p_dst + v12) = 0;
  char v16 = *a4;
  uint64_t v17 = (uint64_t)*a5;
  int v18 = *a6;
  if (SHIBYTE(v21) < 0)
  {
    long long v19 = (void *)__dst;
    sub_4200((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
    *(unsigned char *)(a2 + 24) = v16;
    *(void *)(a2 + 32) = v17;
    *(_DWORD *)(a2 + 40) = v18;
    operator delete(v19);
  }
  else
  {
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v21;
    *(unsigned char *)(a2 + 24) = v16;
    *(void *)(a2 + 32) = v17;
    *(_DWORD *)(a2 + 40) = v18;
  }
}

void sub_D58C3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_D58C50()
{
  unk_25E6B37 = 16641;
  word_25E6B20 = 65;
  byte_25E6B4F = 1;
  byte_25E6B39 = 0;
}

void sub_D58C78()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  char v4 = v3;
  unint64_t v5 = (void *)v0;
  sub_725D0((uint64_t)v56);
  uint64_t v6 = *(void *)sub_37D0C0((uint64_t)v4);
  __p.n128_u64[0] = 0;
  __p.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(&v50, &__p);
  char v53 = 22;
  uint64_t v54 = v6;
  int v55 = 0;
  char v38 = 12;
  strcpy((char *)&__p, "Plan.Started");
  sub_710A8(22, (uint64_t)&__p, v6);
  if (v38 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  sub_DB6A08((uint64_t)v5, (uint64_t)v61);
  unsigned int v7 = sub_DB7034((uint64_t)v5);
  sub_494284(1, v7, (uint64_t)v61);
  sub_47E0E4(v48);
  sub_162C594(v47, 0, 0);
  uint64_t v32 = v5;
  uint64_t v33 = (void **)v61;
  uint64_t v34 = v4;
  v31[0] = v48;
  char v38 = 0;
  __p.n128_u8[0] = 0;
  sub_D5A1F8((uint64_t)&v50, (uint64_t)&v32, (uint64_t)&__p, (std::string **)v31, (uint64_t)v57);
  if (v38 < 0)
  {
    operator delete((void *)__p.n128_u64[0]);
    if (v57[0]) {
      goto LABEL_5;
    }
  }
  else if (v57[0])
  {
LABEL_5:
    sub_CA60E4((uint64_t)&v58);
    goto LABEL_15;
  }
  unint64_t v8 = (void **)v59;
  if (v59)
  {
    size_t v9 = v60;
    size_t v10 = v59;
    if (v60 != v59)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 4;
      }
      while (v9 != v8);
      size_t v10 = v59;
    }
    long long v60 = v8;
    operator delete(v10);
  }
LABEL_15:
  uint64_t v32 = v5;
  uint64_t v33 = v48;
  uint64_t v34 = v4;
  v31[0] = v47;
  char v38 = 0;
  __p.n128_u8[0] = 0;
  sub_D5B23C((uint64_t)&v50, (uint64_t)&v32, (uint64_t)&__p, (uint64_t *)v31, (uint64_t)v43);
  if (v38 < 0)
  {
    operator delete((void *)__p.n128_u64[0]);
    if (v43[0]) {
      goto LABEL_17;
    }
  }
  else if (v43[0])
  {
LABEL_17:
    sub_162D64C(&v44);
    goto LABEL_27;
  }
  size_t v11 = (void **)v45;
  if (v45)
  {
    size_t v12 = v46;
    uint64_t v13 = v45;
    if (v46 != v45)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 4;
      }
      while (v12 != v11);
      uint64_t v13 = v45;
    }
    char v46 = v11;
    operator delete(v13);
  }
LABEL_27:
  if ((void (***)(std::error_category *__hidden))v50.n128_u64[1] == &off_2439090 && v50.n128_u32[0] == 0)
  {
    double v17 = sub_72688((uint64_t)v56);
    sub_D542F4((uint64_t)v5, (uint64_t)v4, (uint64_t)&v32, v17);
    sub_71740(22, (uint64_t)&v32, v6);
    sub_377D10(v4, (uint64_t)&__p);
    sub_71740(1, (uint64_t)&__p, v6);
    int v18 = (void **)v39;
    if (v39)
    {
      long long v19 = v40;
      uint64_t v20 = v39;
      if (v40 != v39)
      {
        do
        {
          if (*((char *)v19 - 25) < 0) {
            operator delete(*(v19 - 6));
          }
          v19 -= 6;
        }
        while (v19 != v18);
        uint64_t v20 = v39;
      }
      size_t v40 = v18;
      operator delete(v20);
    }
    if (v38 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    sub_C6B2B4((uint64_t)&__p, (uint64_t)v47);
    sub_162C594(v41, 0, 0);
    uint64_t v21 = *(void *)(v2 + 24);
    if (!v21) {
      sub_29F82C();
    }
    (*(void (**)(uint64_t, __n128 *))(*(void *)v21 + 48))(v21, &__p);
    sub_162D64C(v41);
    sub_162D64C(&__p);
    uint64_t v22 = (void **)v35;
    if (v35)
    {
      long long v23 = v36;
      uint64_t v24 = v35;
      if (v36 != v35)
      {
        do
        {
          if (*((char *)v23 - 25) < 0) {
            operator delete(*(v23 - 6));
          }
          v23 -= 6;
        }
        while (v23 != v22);
        uint64_t v24 = v35;
      }
      signed int v36 = v22;
      operator delete(v24);
    }
    if (SHIBYTE(v34) < 0)
    {
      operator delete(v32);
      sub_162D64C(v47);
      if (v49 < 0) {
        goto LABEL_59;
      }
    }
    else
    {
      sub_162D64C(v47);
      if (v49 < 0) {
        goto LABEL_59;
      }
    }
LABEL_55:
    unint64_t v25 = v48[0];
    if (v48[0]) {
      goto LABEL_60;
    }
LABEL_56:
    sub_4BCC2C((uint64_t)v61);
    uint64_t v26 = (void **)v51;
    if (!v51) {
      return;
    }
    goto LABEL_64;
  }
  double v15 = sub_72638((uint64_t)v56);
  *(void *)&long long v42 = v5;
  *((double *)&v42 + 1) = v15;
  sub_CF1ACC((uint64_t)v31, 3, (uint64_t)&v50, (uint64_t)v4, (uint64_t)v5, &v42);
  sub_CBB384(v31, (uint64_t)&v32);
  sub_C6B2B4((uint64_t)&__p, (uint64_t)&v32);
  sub_162C594(v41, 0, 0);
  uint64_t v16 = *(void *)(v2 + 24);
  if (!v16) {
    sub_29F82C();
  }
  (*(void (**)(uint64_t, __n128 *))(*(void *)v16 + 48))(v16, &__p);
  sub_162D64C(v41);
  sub_162D64C(&__p);
  sub_162D64C(&v32);
  sub_CF22FC((uint64_t)v31);
  sub_162D64C(v47);
  if ((v49 & 0x80000000) == 0) {
    goto LABEL_55;
  }
LABEL_59:
  operator delete(v48[3]);
  unint64_t v25 = v48[0];
  if (!v48[0]) {
    goto LABEL_56;
  }
LABEL_60:
  long long v27 = v48[1];
  char v28 = v25;
  if (v48[1] != v25)
  {
    do
      long long v27 = (void *)sub_405F44((uint64_t)v27 - 472);
    while (v27 != v25);
    char v28 = v48[0];
  }
  v48[1] = v25;
  operator delete(v28);
  sub_4BCC2C((uint64_t)v61);
  uint64_t v26 = (void **)v51;
  if (v51)
  {
LABEL_64:
    size_t v29 = v52;
    unint64_t v30 = v26;
    if (v52 != v26)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 4;
      }
      while (v29 != v26);
      unint64_t v30 = v51;
    }
    unint64_t v52 = v26;
    operator delete(v30);
  }
}

void sub_D59248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
}

void sub_D5931C()
{
}

void sub_D59324()
{
}

void sub_D5932C(_Unwind_Exception *a1)
{
}

void sub_D59340(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x37F]) < 0)
  {
    operator delete((void *)STACK[0x368]);
    sub_C7E3C8((uint64_t)&STACK[0xC78]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xD5930CLL);
}

void sub_D59364()
{
}

uint64_t sub_D59370(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    sub_162D64C(a1 + 8);
    return a1;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = *(void **)(a1 + 24);
  if (v4 != v3)
  {
    do
    {
      if (*(char *)(v4 - 1) < 0) {
        operator delete(*(void **)(v4 - 24));
      }
      v4 -= 32;
    }
    while (v4 != v3);
    unint64_t v5 = *(void **)(a1 + 24);
  }
  *(void *)(a1 + 32) = v3;
  operator delete(v5);
  return a1;
}

void sub_D59408()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  unint64_t v5 = (void *)v0;
  sub_725D0((uint64_t)v56);
  uint64_t v6 = *(void *)sub_37D0C0((uint64_t)v4);
  __p.n128_u64[0] = 0;
  __p.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(&v50, &__p);
  char v53 = 23;
  uint64_t v54 = v6;
  int v55 = 0;
  char v38 = 12;
  strcpy((char *)&__p, "Plan.Started");
  sub_710A8(23, (uint64_t)&__p, v6);
  if (v38 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  sub_DB6A08((uint64_t)v5, (uint64_t)v61);
  unsigned int v7 = sub_DB7034((uint64_t)v5);
  sub_494284(1, v7, (uint64_t)v61);
  sub_47E0E4(v48);
  sub_162C594(v47, 0, 0);
  uint64_t v32 = v5;
  uint64_t v33 = (void **)v61;
  uint64_t v34 = v4;
  v31[0] = v48;
  char v38 = 0;
  __p.n128_u8[0] = 0;
  sub_D5BAD4((uint64_t)&v50, (uint64_t)&v32, (uint64_t)&__p, (std::string **)v31, (uint64_t)v57);
  if (v38 < 0)
  {
    operator delete((void *)__p.n128_u64[0]);
    if (v57[0]) {
      goto LABEL_5;
    }
  }
  else if (v57[0])
  {
LABEL_5:
    sub_CA60E4((uint64_t)&v58);
    goto LABEL_15;
  }
  unint64_t v8 = (void **)v59;
  if (v59)
  {
    size_t v9 = v60;
    size_t v10 = v59;
    if (v60 != v59)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 4;
      }
      while (v9 != v8);
      size_t v10 = v59;
    }
    long long v60 = v8;
    operator delete(v10);
  }
LABEL_15:
  uint64_t v32 = v5;
  uint64_t v33 = v48;
  uint64_t v34 = v4;
  v31[0] = v47;
  char v38 = 0;
  __p.n128_u8[0] = 0;
  sub_D5CAF0((uint64_t)&v50, (uint64_t)&v32, (uint64_t)&__p, (uint64_t *)v31, (uint64_t)v43);
  if (v38 < 0)
  {
    operator delete((void *)__p.n128_u64[0]);
    if (v43[0]) {
      goto LABEL_17;
    }
  }
  else if (v43[0])
  {
LABEL_17:
    sub_162D64C(&v44);
    goto LABEL_27;
  }
  size_t v11 = (void **)v45;
  if (v45)
  {
    size_t v12 = v46;
    uint64_t v13 = v45;
    if (v46 != v45)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 4;
      }
      while (v12 != v11);
      uint64_t v13 = v45;
    }
    char v46 = v11;
    operator delete(v13);
  }
LABEL_27:
  if ((void (***)(std::error_category *__hidden))v50.n128_u64[1] == &off_2439090 && v50.n128_u32[0] == 0)
  {
    double v17 = sub_72688((uint64_t)v56);
    sub_D542F4((uint64_t)v5, (uint64_t)v4, (uint64_t)&v32, v17);
    sub_71740(23, (uint64_t)&v32, v6);
    sub_377D10(v4, (uint64_t)&__p);
    sub_71740(1, (uint64_t)&__p, v6);
    int v18 = (void **)v39;
    if (v39)
    {
      long long v19 = v40;
      uint64_t v20 = v39;
      if (v40 != v39)
      {
        do
        {
          if (*((char *)v19 - 25) < 0) {
            operator delete(*(v19 - 6));
          }
          v19 -= 6;
        }
        while (v19 != v18);
        uint64_t v20 = v39;
      }
      size_t v40 = v18;
      operator delete(v20);
    }
    if (v38 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    sub_C6B2B4((uint64_t)&__p, (uint64_t)v47);
    sub_162C594(v41, 0, 0);
    uint64_t v21 = *(void *)(v2 + 24);
    if (!v21) {
      sub_29F82C();
    }
    (*(void (**)(uint64_t, __n128 *))(*(void *)v21 + 48))(v21, &__p);
    sub_162D64C(v41);
    sub_162D64C(&__p);
    uint64_t v22 = (void **)v35;
    if (v35)
    {
      long long v23 = v36;
      uint64_t v24 = v35;
      if (v36 != v35)
      {
        do
        {
          if (*((char *)v23 - 25) < 0) {
            operator delete(*(v23 - 6));
          }
          v23 -= 6;
        }
        while (v23 != v22);
        uint64_t v24 = v35;
      }
      signed int v36 = v22;
      operator delete(v24);
    }
    if (SHIBYTE(v34) < 0)
    {
      operator delete(v32);
      sub_162D64C(v47);
      if (v49 < 0) {
        goto LABEL_59;
      }
    }
    else
    {
      sub_162D64C(v47);
      if (v49 < 0) {
        goto LABEL_59;
      }
    }
LABEL_55:
    unint64_t v25 = v48[0];
    if (v48[0]) {
      goto LABEL_60;
    }
LABEL_56:
    sub_4BCC2C((uint64_t)v61);
    uint64_t v26 = (void **)v51;
    if (!v51) {
      return;
    }
    goto LABEL_64;
  }
  double v15 = sub_72638((uint64_t)v56);
  *(void *)&long long v42 = v5;
  *((double *)&v42 + 1) = v15;
  sub_CF1ACC((uint64_t)v31, 0, (uint64_t)&v50, (uint64_t)v4, (uint64_t)v5, &v42);
  sub_CBB384(v31, (uint64_t)&v32);
  sub_C6B2B4((uint64_t)&__p, (uint64_t)&v32);
  sub_162C594(v41, 0, 0);
  uint64_t v16 = *(void *)(v2 + 24);
  if (!v16) {
    sub_29F82C();
  }
  (*(void (**)(uint64_t, __n128 *))(*(void *)v16 + 48))(v16, &__p);
  sub_162D64C(v41);
  sub_162D64C(&__p);
  sub_162D64C(&v32);
  sub_CF22FC((uint64_t)v31);
  sub_162D64C(v47);
  if ((v49 & 0x80000000) == 0) {
    goto LABEL_55;
  }
LABEL_59:
  operator delete(v48[3]);
  unint64_t v25 = v48[0];
  if (!v48[0]) {
    goto LABEL_56;
  }
LABEL_60:
  long long v27 = v48[1];
  char v28 = v25;
  if (v48[1] != v25)
  {
    do
      long long v27 = (void *)sub_405F44((uint64_t)v27 - 472);
    while (v27 != v25);
    char v28 = v48[0];
  }
  v48[1] = v25;
  operator delete(v28);
  sub_4BCC2C((uint64_t)v61);
  uint64_t v26 = (void **)v51;
  if (v51)
  {
LABEL_64:
    size_t v29 = v52;
    unint64_t v30 = v26;
    if (v52 != v26)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 4;
      }
      while (v29 != v26);
      unint64_t v30 = v51;
    }
    unint64_t v52 = v26;
    operator delete(v30);
  }
}

void sub_D599D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
}

void sub_D59AAC()
{
}

void sub_D59AB4()
{
}

void sub_D59ABC(_Unwind_Exception *a1)
{
}

void sub_D59AD0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x37F]) < 0)
  {
    operator delete((void *)STACK[0x368]);
    sub_C7E3C8((uint64_t)&STACK[0xC78]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xD59A9CLL);
}

void sub_D59AF4()
{
}

void sub_D59B00()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  unint64_t v5 = (void *)v0;
  sub_725D0((uint64_t)v56);
  uint64_t v6 = *(void *)sub_37D0C0((uint64_t)v4);
  __p.n128_u64[0] = 0;
  __p.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(&v50, &__p);
  char v53 = 24;
  uint64_t v54 = v6;
  int v55 = 0;
  char v38 = 12;
  strcpy((char *)&__p, "Plan.Started");
  sub_710A8(24, (uint64_t)&__p, v6);
  if (v38 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  sub_DB6A08((uint64_t)v5, (uint64_t)v61);
  unsigned int v7 = sub_DB7034((uint64_t)v5);
  sub_494284(1, v7, (uint64_t)v61);
  sub_47E0E4(v48);
  sub_162C594(v47, 0, 0);
  uint64_t v32 = v5;
  uint64_t v33 = (void **)v61;
  uint64_t v34 = v4;
  v31[0] = v48;
  char v38 = 0;
  __p.n128_u8[0] = 0;
  sub_D5D224((uint64_t)&v50, (uint64_t)&v32, (uint64_t)&__p, (std::string **)v31, (uint64_t)v57);
  if (v38 < 0)
  {
    operator delete((void *)__p.n128_u64[0]);
    if (v57[0]) {
      goto LABEL_5;
    }
  }
  else if (v57[0])
  {
LABEL_5:
    sub_CA701C((uint64_t)&v58);
    goto LABEL_15;
  }
  unint64_t v8 = (void **)v59;
  if (v59)
  {
    size_t v9 = v60;
    size_t v10 = v59;
    if (v60 != v59)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 4;
      }
      while (v9 != v8);
      size_t v10 = v59;
    }
    long long v60 = v8;
    operator delete(v10);
  }
LABEL_15:
  uint64_t v32 = v5;
  uint64_t v33 = v48;
  uint64_t v34 = v4;
  v31[0] = v47;
  char v38 = 0;
  __p.n128_u8[0] = 0;
  sub_D5E260((uint64_t)&v50, (uint64_t)&v32, (uint64_t)&__p, (uint64_t *)v31, (uint64_t)v43);
  if (v38 < 0)
  {
    operator delete((void *)__p.n128_u64[0]);
    if (v43[0]) {
      goto LABEL_17;
    }
  }
  else if (v43[0])
  {
LABEL_17:
    sub_162D64C(&v44);
    goto LABEL_27;
  }
  size_t v11 = (void **)v45;
  if (v45)
  {
    size_t v12 = v46;
    uint64_t v13 = v45;
    if (v46 != v45)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 4;
      }
      while (v12 != v11);
      uint64_t v13 = v45;
    }
    char v46 = v11;
    operator delete(v13);
  }
LABEL_27:
  if ((void (***)(std::error_category *__hidden))v50.n128_u64[1] == &off_2439090 && v50.n128_u32[0] == 0)
  {
    double v17 = sub_72688((uint64_t)v56);
    sub_D542F4((uint64_t)v5, (uint64_t)v4, (uint64_t)&v32, v17);
    sub_71740(24, (uint64_t)&v32, v6);
    sub_377D10(v4, (uint64_t)&__p);
    sub_71740(1, (uint64_t)&__p, v6);
    int v18 = (void **)v39;
    if (v39)
    {
      long long v19 = v40;
      uint64_t v20 = v39;
      if (v40 != v39)
      {
        do
        {
          if (*((char *)v19 - 25) < 0) {
            operator delete(*(v19 - 6));
          }
          v19 -= 6;
        }
        while (v19 != v18);
        uint64_t v20 = v39;
      }
      size_t v40 = v18;
      operator delete(v20);
    }
    if (v38 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    sub_C6B2B4((uint64_t)&__p, (uint64_t)v47);
    sub_162C594(v41, 0, 0);
    uint64_t v21 = *(void *)(v2 + 24);
    if (!v21) {
      sub_29F82C();
    }
    (*(void (**)(uint64_t, __n128 *))(*(void *)v21 + 48))(v21, &__p);
    sub_162D64C(v41);
    sub_162D64C(&__p);
    uint64_t v22 = (void **)v35;
    if (v35)
    {
      long long v23 = v36;
      uint64_t v24 = v35;
      if (v36 != v35)
      {
        do
        {
          if (*((char *)v23 - 25) < 0) {
            operator delete(*(v23 - 6));
          }
          v23 -= 6;
        }
        while (v23 != v22);
        uint64_t v24 = v35;
      }
      signed int v36 = v22;
      operator delete(v24);
    }
    if (SHIBYTE(v34) < 0)
    {
      operator delete(v32);
      sub_162D64C(v47);
      if (v49 < 0) {
        goto LABEL_59;
      }
    }
    else
    {
      sub_162D64C(v47);
      if (v49 < 0) {
        goto LABEL_59;
      }
    }
LABEL_55:
    unint64_t v25 = v48[0];
    if (v48[0]) {
      goto LABEL_60;
    }
LABEL_56:
    sub_4BCC2C((uint64_t)v61);
    uint64_t v26 = (void **)v51;
    if (!v51) {
      return;
    }
    goto LABEL_64;
  }
  double v15 = sub_72638((uint64_t)v56);
  *(void *)&long long v42 = v5;
  *((double *)&v42 + 1) = v15;
  sub_CF1ACC((uint64_t)v31, 2, (uint64_t)&v50, (uint64_t)v4, (uint64_t)v5, &v42);
  sub_CBB384(v31, (uint64_t)&v32);
  sub_C6B2B4((uint64_t)&__p, (uint64_t)&v32);
  sub_162C594(v41, 0, 0);
  uint64_t v16 = *(void *)(v2 + 24);
  if (!v16) {
    sub_29F82C();
  }
  (*(void (**)(uint64_t, __n128 *))(*(void *)v16 + 48))(v16, &__p);
  sub_162D64C(v41);
  sub_162D64C(&__p);
  sub_162D64C(&v32);
  sub_CF22FC((uint64_t)v31);
  sub_162D64C(v47);
  if ((v49 & 0x80000000) == 0) {
    goto LABEL_55;
  }
LABEL_59:
  operator delete(v48[3]);
  unint64_t v25 = v48[0];
  if (!v48[0]) {
    goto LABEL_56;
  }
LABEL_60:
  long long v27 = v48[1];
  char v28 = v25;
  if (v48[1] != v25)
  {
    do
      long long v27 = (void *)sub_4451C0((uint64_t)v27 - 480);
    while (v27 != v25);
    char v28 = v48[0];
  }
  v48[1] = v25;
  operator delete(v28);
  sub_4BCC2C((uint64_t)v61);
  uint64_t v26 = (void **)v51;
  if (v51)
  {
LABEL_64:
    size_t v29 = v52;
    unint64_t v30 = v26;
    if (v52 != v26)
    {
      do
      {
        if (*((char *)v29 - 1) < 0) {
          operator delete(*(v29 - 3));
        }
        v29 -= 4;
      }
      while (v29 != v26);
      unint64_t v30 = v51;
    }
    unint64_t v52 = v26;
    operator delete(v30);
  }
}

void sub_D5A0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
}

void sub_D5A1A4()
{
}

void sub_D5A1AC()
{
}

void sub_D5A1B4(_Unwind_Exception *a1)
{
}

void sub_D5A1C8(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x37F]) < 0)
  {
    operator delete((void *)STACK[0x368]);
    sub_C7E3C8((uint64_t)&STACK[0xC78]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0xD5A194);
}

void sub_D5A1EC()
{
}

void sub_D5A1F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string **a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  size_t v10 = (std::string *)(a5 + 8);
  bzero((void *)(a5 + 8), 0x360uLL);
  sub_47E0E4((_OWORD *)(a5 + 8));
  *(_DWORD *)(a5 + 56) = -1;
  *(unsigned char *)(a5 + 240) = 0;
  *(unsigned char *)(a5 + 376) = 0;
  *(_OWORD *)(a5 + 536) = 0u;
  *(_OWORD *)(a5 + 552) = 0u;
  *(_OWORD *)(a5 + 568) = 0u;
  *(void *)(a5 + 520) = 0;
  *(void *)(a5 + 525) = 0;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 384) = 0u;
  *(_OWORD *)(a5 + 400) = 0u;
  *(_OWORD *)(a5 + 416) = 0u;
  *(_OWORD *)(a5 + 432) = 0u;
  *(_OWORD *)(a5 + 448) = 0u;
  *(_OWORD *)(a5 + 464) = 0u;
  *(_OWORD *)(a5 + 480) = 0u;
  *(_OWORD *)(a5 + 496) = 0u;
  *(_DWORD *)(a5 + 512) = 0;
  *(void *)(a5 + 584) = 0x3FF0000000000000;
  *(void *)(a5 + 600) = 0;
  *(void *)(a5 + 592) = 0;
  *(void *)(a5 + 608) = 0;
  *(unsigned char *)(a5 + 616) = 5;
  *(_OWORD *)(a5 + 640) = 0u;
  *(_OWORD *)(a5 + 656) = 0u;
  *(_OWORD *)(a5 + 624) = 0u;
  *(_DWORD *)(a5 + 672) = 0x7FFFFFFF;
  *(void *)(a5 + 760) = 0;
  *(void *)(a5 + 768) = 0;
  *(_OWORD *)(a5 + 737) = 0u;
  *(_OWORD *)(a5 + 712) = 0u;
  *(_OWORD *)(a5 + 728) = 0u;
  *(_OWORD *)(a5 + 680) = 0u;
  *(_OWORD *)(a5 + 696) = 0u;
  *(void *)(a5 + 776) = -1;
  *(_DWORD *)(a5 + 784) = 0x7FFFFFFF;
  *(void *)(a5 + 788) = 0;
  *(void *)(a5 + 800) = -1;
  *(_DWORD *)(a5 + 808) = -1;
  *(unsigned char *)(a5 + 816) = 0;
  *(unsigned char *)(a5 + 848) = 0;
  *(void *)(a5 + 856) = 0;
  *(_WORD *)(a5 + 864) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && !*(_DWORD *)a1)
  {
    sub_CF5040(&v42, *(void ****)a2, *(void *)(a2 + 8), *(void **)(a2 + 16), 0);
    sub_C9E7F4((unsigned __int8 *)&v42, (uint64_t)v47);
    sub_CA0E94(a5, (unsigned __int8 *)v47);
    if (LOBYTE(v47[0]))
    {
      sub_CA60E4((uint64_t)&v47[1]);
    }
    else
    {
      uint64_t v14 = __p;
      if ((void)__p)
      {
        uint64_t v15 = *((void *)&__p + 1);
        uint64_t v16 = (void *)__p;
        if (*((void *)&__p + 1) != (void)__p)
        {
          do
          {
            if (*(char *)(v15 - 1) < 0) {
              operator delete(*(void **)(v15 - 24));
            }
            v15 -= 32;
          }
          while (v15 != v14);
          uint64_t v16 = (void *)__p;
        }
        *((void *)&__p + 1) = v14;
        operator delete(v16);
      }
    }
    int v20 = *(unsigned __int8 *)(a1 + 48);
    if (!*(unsigned char *)a5)
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), (const std::error_condition *)(a5 + 8), *(void *)(a1 + 56));
      int v24 = *(unsigned __int8 *)(a1 + 48);
      HIBYTE(v47[2]) = 18;
      strcpy((char *)v47, "InternalError[All]");
      sub_710A8(v24, (uint64_t)v47, *(void *)(a1 + 56));
      if (SHIBYTE(v47[2]) < 0) {
        operator delete(v47[0]);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v47);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v40, v25);
        if ((v41 & 0x80u) == 0) {
          uint64_t v26 = v40;
        }
        else {
          uint64_t v26 = (void **)v40[0];
        }
        if ((v41 & 0x80u) == 0) {
          uint64_t v27 = v41;
        }
        else {
          uint64_t v27 = (uint64_t)v40[1];
        }
        char v28 = sub_188FC78(v47, (uint64_t)v26, v27);
        sub_188FC78(v28, (uint64_t)" failed in step ", 16);
        size_t v29 = (void *)std::ostream::operator<<();
        unint64_t v30 = sub_188FC78(v29, (uint64_t)" (", 2);
        sub_7B8BC(3, (char *)&v46);
        uint64_t v31 = std::string::append(&v46, "PathDecoderModule");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        int64_t v39 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)char v38 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        if (v39 >= 0) {
          uint64_t v33 = v38;
        }
        else {
          uint64_t v33 = (void **)v38[0];
        }
        if (v39 >= 0) {
          uint64_t v34 = HIBYTE(v39);
        }
        else {
          uint64_t v34 = (uint64_t)v38[1];
        }
        char v35 = sub_188FC78(v30, (uint64_t)v33, v34);
        signed int v36 = sub_188FC78(v35, (uint64_t)") with error: ", 14);
        sub_CF2D60(v36, a5 + 8);
        if (SHIBYTE(v39) < 0) {
          operator delete(v38[0]);
        }
        if ((char)v41 < 0) {
          operator delete(v40[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v46, 3u);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        if (v52 < 0) {
          operator delete(v51);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, a5 + 8);
      goto LABEL_73;
    }
    sub_CF4E10(a5 + 856, (uint64_t)v47);
    sub_717B8(v20, a3, (uint64_t)v47, *(void *)(a1 + 56));
    uint64_t v21 = __p;
    if ((void)__p)
    {
      uint64_t v22 = *((void *)&__p + 1);
      long long v23 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
        {
          if (*(char *)(v22 - 25) < 0) {
            operator delete(*(void **)(v22 - 48));
          }
          v22 -= 48;
        }
        while (v22 != v21);
        long long v23 = (void *)__p;
      }
      *((void *)&__p + 1) = v21;
      operator delete(v23);
    }
    if (SHIBYTE(v47[2]) < 0)
    {
      operator delete(v47[0]);
      unint64_t v37 = *a4;
      if (*a4 == v10)
      {
LABEL_72:
        std::string::operator=(v37 + 1, (const std::string *)(a5 + 32));
LABEL_73:
        sub_CF5B18(&v42);
        return;
      }
    }
    else
    {
      unint64_t v37 = *a4;
      if (*a4 == v10) {
        goto LABEL_72;
      }
    }
    sub_D5A97C((uint64_t *)v37, *(void *)(a5 + 8), *(void *)(a5 + 16), 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(void *)(a5 + 16) - *(void *)(a5 + 8)) >> 3));
    goto LABEL_72;
  }
  sub_3E7814(&v42, (__n128 *)a1);
  LOBYTE(v47[0]) = 0;
  *(__n128 *)&v47[1] = v42;
  long long __p = *(_OWORD *)v43;
  uint64_t v49 = v44;
  v43[0] = 0;
  v43[1] = 0;
  uint64_t v44 = 0;
  int v50 = v45;
  sub_CA0E94(a5, (unsigned __int8 *)v47);
  if (LOBYTE(v47[0]))
  {
    sub_CA60E4((uint64_t)&v47[1]);
  }
  else
  {
    uint64_t v11 = __p;
    if ((void)__p)
    {
      uint64_t v12 = *((void *)&__p + 1);
      uint64_t v13 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
        {
          if (*(char *)(v12 - 1) < 0) {
            operator delete(*(void **)(v12 - 24));
          }
          v12 -= 32;
        }
        while (v12 != v11);
        uint64_t v13 = (void *)__p;
      }
      *((void *)&__p + 1) = v11;
      operator delete(v13);
    }
  }
  double v17 = (void **)v43[0];
  if (v43[0])
  {
    int v18 = (void **)v43[1];
    long long v19 = v43[0];
    if (v43[1] != v43[0])
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 4;
      }
      while (v18 != v17);
      long long v19 = v43[0];
    }
    v43[1] = v17;
    operator delete(v19);
  }
}

void sub_D5A850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a58);
  sub_CF5B18(&a16);
  sub_CA0F5C(v58);
  _Unwind_Resume(a1);
}

void sub_D5A930(_Unwind_Exception *a1)
{
  sub_CA0F5C(v1);
  _Unwind_Resume(a1);
}

void sub_D5A948(_Unwind_Exception *a1)
{
  sub_CA0F5C(v1);
  _Unwind_Resume(a1);
}

void sub_D5A960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_CF5B18((uint64_t *)va);
  sub_CA0F5C(v8);
  _Unwind_Resume(a1);
}

uint64_t sub_D5A97C(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xCBEEA4E1A08AD8F3 * ((v8 - *a1) >> 3) >= a4)
  {
    uint64_t result = a1[1];
    if (0xCBEEA4E1A08AD8F3 * ((result - v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_D5AC24(v9, v6);
          v6 += 472;
          v9 += 472;
          v23 += 472;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_405F44(result - 472);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 8 * ((result - v9) >> 3);
      if (result != v9)
      {
        uint64_t v20 = 8 * ((result - v9) >> 3);
        do
        {
          uint64_t result = sub_D5AC24(v9, v6);
          v6 += 472;
          v9 += 472;
          v20 -= 472;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = (uint64_t)sub_443EFC((char *)(v9 + v22), (long long *)(v19 + v22));
          v22 += 472;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_405F44(v10 - 472);
        while (v10 != v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x8AD8F2FBA93868) {
      goto LABEL_37;
    }
    unint64_t v12 = 0xCBEEA4E1A08AD8F3 * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x456C797DD49C34 ? 0x8AD8F2FBA93868 : v13;
    if (v14 > 0x8AD8F2FBA93868) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 472 * v14;
    uint64_t result = (uint64_t)operator new(472 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = (uint64_t)sub_443EFC((char *)(v17 + v18), (long long *)(v6 + v18));
        v18 += 472;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_D5AC24(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  if (a1 == a2)
  {
    long long v11 = *(_OWORD *)(a2 + 48);
    long long v12 = *(_OWORD *)(a2 + 64);
    long long v13 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 94) = *(_OWORD *)(a2 + 94);
    *(_OWORD *)(a1 + 64) = v12;
    *(_OWORD *)(a1 + 80) = v13;
    *(_OWORD *)(a1 + 48) = v11;
    long long v14 = *(_OWORD *)(a2 + 184);
    long long v15 = *(_OWORD *)(a2 + 200);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = v15;
    *(_OWORD *)(a1 + 184) = v14;
  }
  else
  {
    sub_D5AE10((void *)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
    long long v4 = *(_OWORD *)(a2 + 48);
    long long v5 = *(_OWORD *)(a2 + 64);
    long long v6 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 94) = *(_OWORD *)(a2 + 94);
    *(_OWORD *)(a1 + 64) = v5;
    *(_OWORD *)(a1 + 80) = v6;
    *(_OWORD *)(a1 + 48) = v4;
    sub_D5AFAC((uint64_t *)(a1 + 112), *(void *)(a2 + 112), *(void *)(a2 + 120), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3));
    sub_47232C((void *)(a1 + 136), *(char **)(a2 + 136), *(char **)(a2 + 144), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3));
    sub_326C0((void *)(a1 + 160), *(char **)(a2 + 160), *(char **)(a2 + 168), (uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 3);
    long long v7 = *(_OWORD *)(a2 + 184);
    long long v8 = *(_OWORD *)(a2 + 200);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = v8;
    *(_OWORD *)(a1 + 184) = v7;
    sub_472BC8((void *)(a1 + 224), *(char **)(a2 + 224), *(char **)(a2 + 232), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 2));
    sub_472BC8((void *)(a1 + 248), *(char **)(a2 + 248), *(char **)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 2));
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    unsigned int v9 = *(_DWORD *)(a1 + 296);
    int v10 = *(_DWORD *)(a2 + 296);
    if (v9 == v10)
    {
      if (v9 <= 1) {
        *(void *)(a1 + 288) = *(void *)(a2 + 288);
      }
    }
    else
    {
      if (v10 == 1)
      {
        *(void *)(a1 + 288) = *(void *)(a2 + 288);
        int v10 = *(_DWORD *)(a2 + 296);
      }
      else if (!v10)
      {
        *(void *)(a1 + 288) = *(void *)(a2 + 288);
      }
      *(_DWORD *)(a1 + 296) = v10;
    }
  }
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  long long v16 = *(_OWORD *)(a2 + 400);
  long long v18 = *(_OWORD *)(a2 + 352);
  long long v17 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v16;
  *(_OWORD *)(a1 + 352) = v18;
  *(_OWORD *)(a1 + 368) = v17;
  long long v20 = *(_OWORD *)(a2 + 432);
  long long v19 = *(_OWORD *)(a2 + 448);
  long long v21 = *(_OWORD *)(a2 + 416);
  *(void *)(a1 + 463) = *(void *)(a2 + 463);
  *(_OWORD *)(a1 + 432) = v20;
  *(_OWORD *)(a1 + 448) = v19;
  *(_OWORD *)(a1 + 416) = v21;
  long long v22 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v22;
  return a1;
}

void *sub_D5AE10(void *result, char *__src, char *a3, unint64_t a4)
{
  long long v6 = __src;
  long long v7 = result;
  uint64_t v8 = result[2];
  unsigned int v9 = (char *)*result;
  if (0x2E8BA2E8BA2E8BA3 * ((v8 - *result) >> 3) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x2E8BA2E8BA2E8BALL) {
      goto LABEL_23;
    }
    unint64_t v10 = 0x2E8BA2E8BA2E8BA3 * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0x1745D1745D1745DLL ? 0x2E8BA2E8BA2E8BALL : v11;
    if (v12 > 0x2E8BA2E8BA2E8BALL) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 11 * v12;
    uint64_t result = operator new(88 * v12);
    unsigned int v9 = (char *)result;
    *long long v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    long long v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  long long v15 = (void **)(result + 1);
  long long v16 = (unsigned char *)result[1];
  if (0x2E8BA2E8BA2E8BA3 * ((v16 - v9) >> 3) >= a4)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    long long v18 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  long long v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    unsigned int v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    long long v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *long long v15 = &v9[v14];
  return result;
}

void sub_D5AFAC(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *a1) >> 3) < a4)
  {
    if (v10)
    {
      uint64_t v11 = a1[1];
      unint64_t v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          uint64_t v13 = *(void **)(v11 - 24);
          if (v13)
          {
            *(void *)(v11 - 16) = v13;
            operator delete(v13);
          }
          v11 -= 56;
        }
        while (v11 != v10);
        unint64_t v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x492492492492492) {
      goto LABEL_39;
    }
    unint64_t v20 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= a4) {
      uint64_t v21 = a4;
    }
    unint64_t v22 = v20 >= 0x249249249249249 ? 0x492492492492492 : v21;
    if (v22 > 0x492492492492492) {
LABEL_39:
    }
      sub_2E00();
    uint64_t v23 = 56 * v22;
    int v24 = operator new(56 * v22);
    *a1 = (uint64_t)v24;
    a1[1] = (uint64_t)v24;
    a1[2] = (uint64_t)v24 + v23;
    __n128 v25 = sub_4442A4(v9, v6, a3, (uint64_t)v24);
LABEL_31:
    a1[1] = (uint64_t)v25;
    return;
  }
  uint64_t v14 = a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v14 - v10) >> 3) < a4)
  {
    uint64_t v15 = a2 + 8 * ((v14 - v10) >> 3);
    if (v14 != v10)
    {
      uint64_t v16 = 8 * ((v14 - v10) >> 3);
      do
      {
        long long v17 = *(_OWORD *)(v6 + 16);
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v6;
        *(_OWORD *)(v10 + 16) = v17;
        if (v6 != v10) {
          sub_457964((void *)(v10 + 32), *(char **)(v6 + 32), *(char **)(v6 + 40), (uint64_t)(*(void *)(v6 + 40) - *(void *)(v6 + 32)) >> 4);
        }
        v6 += 56;
        v10 += 56;
        v16 -= 56;
      }
      while (v16);
      uint64_t v10 = a1[1];
    }
    __n128 v25 = sub_4442A4(v9, v15, a3, v10);
    goto LABEL_31;
  }
  if (a2 == a3)
  {
    uint64_t v18 = *a1;
  }
  else
  {
    uint64_t v18 = *a1;
    do
    {
      long long v19 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v6;
      *(_OWORD *)(v10 + 16) = v19;
      if (v6 != v10) {
        sub_457964((void *)(v10 + 32), *(char **)(v6 + 32), *(char **)(v6 + 40), (uint64_t)(*(void *)(v6 + 40) - *(void *)(v6 + 32)) >> 4);
      }
      v6 += 56;
      v10 += 56;
      v18 += 56;
    }
    while (v6 != a3);
    uint64_t v14 = a1[1];
  }
  while (v14 != v18)
  {
    uint64_t v26 = *(void **)(v14 - 24);
    if (v26)
    {
      *(void *)(v14 - 16) = v26;
      operator delete(v26);
    }
    v14 -= 56;
  }
  a1[1] = v18;
}

void sub_D5B22C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_D5B234(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_D5B23C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  bzero((void *)(a5 + 8), 0x238uLL);
  sub_162C594(a5 + 8, 0, 0);
  *(void *)(a5 + 568) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && *(_DWORD *)a1 == 0)
  {
    uint64_t v11 = *(void ****)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    uint64_t v13 = *(void *)(a2 + 16);
    uint64_t v49 = v12;
    sub_DBE954(v11, __p);
    long long v14 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    if (__p[0].__r_.__value_.__r.__words[0])
    {
      uint64_t v15 = (void *)__p[0].__r_.__value_.__r.__words[0];
      if (__p[0].__r_.__value_.__r.__words[0] != __p[0].__r_.__value_.__l.__size_)
      {
        std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
        do
        {
          if (*(char *)(size - 1) < 0) {
            operator delete(*(void **)(size - 24));
          }
          size -= 24;
        }
        while (size != (void)v14);
        uint64_t v15 = (void *)__p[0].__r_.__value_.__r.__words[0];
      }
      __p[0].__r_.__value_.__l.__size_ = v14;
      operator delete(v15);
    }
    BOOL v50 = (void)v14 != *((void *)&v14 + 1);
    uint64_t v51 = v13;
    sub_CB56D0((uint64_t)&v49, (uint64_t)__p);
    sub_D5B970(a5, (uint64_t)__p);
    if (__p[0].__r_.__value_.__s.__data_[0])
    {
      sub_162D64C(&__p[0].__r_.__value_.__r.__words[1]);
    }
    else
    {
      std::string::pointer data = __p[1].__r_.__value_.__l.__data_;
      if (__p[1].__r_.__value_.__r.__words[0])
      {
        std::string::size_type v21 = __p[1].__r_.__value_.__l.__size_;
        std::string::pointer v22 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v21 - 1) < 0) {
              operator delete(*(void **)(v21 - 24));
            }
            v21 -= 32;
          }
          while ((std::string::pointer)v21 != data);
          std::string::pointer v22 = __p[1].__r_.__value_.__l.__data_;
        }
        __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)data;
        operator delete(v22);
      }
    }
    int v26 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)a5)
    {
      memset(__p, 0, sizeof(__p));
      std::string::assign(__p, "RawPathResponseBuilderModule");
      LOBYTE(v52[0]) = 1;
      std::string::size_type v27 = __p[1].__r_.__value_.__l.__size_;
      if (__p[1].__r_.__value_.__l.__size_ >= __p[1].__r_.__value_.__r.__words[2])
      {
        std::string::size_type v28 = sub_C947F8((uint64_t *)&__p[1], "Runtime", (char *)v52, (uint64_t *)(a5 + 568));
      }
      else
      {
        sub_C949C8((int)&__p[1].__r_.__value_.__r.__words[2], __p[1].__r_.__value_.__l.__size_, "Runtime", (char *)v52, (uint64_t *)(a5 + 568));
        std::string::size_type v28 = v27 + 48;
      }
      __p[1].__r_.__value_.__l.__size_ = v28;
      sub_717B8(v26, a3, (uint64_t)__p, *(void *)(a1 + 56));
      std::string::pointer v42 = __p[1].__r_.__value_.__l.__data_;
      if (__p[1].__r_.__value_.__r.__words[0])
      {
        std::string::size_type v43 = __p[1].__r_.__value_.__l.__size_;
        std::string::pointer v44 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v43 - 25) < 0) {
              operator delete(*(void **)(v43 - 48));
            }
            v43 -= 48;
          }
          while ((std::string::pointer)v43 != v42);
          std::string::pointer v44 = __p[1].__r_.__value_.__l.__data_;
        }
        __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v42;
        operator delete(v44);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      sub_1632068(*a4, a5 + 8);
    }
    else
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), (const std::error_condition *)(a5 + 8), *(void *)(a1 + 56));
      int v29 = *(unsigned __int8 *)(a1 + 48);
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 18;
      strcpy((char *)__p, "InternalError[All]");
      sub_710A8(v29, (uint64_t)__p, *(void *)(a1 + 56));
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v47, v30);
        if ((v48 & 0x80u) == 0) {
          uint64_t v31 = v47;
        }
        else {
          uint64_t v31 = (void **)v47[0];
        }
        if ((v48 & 0x80u) == 0) {
          uint64_t v32 = v48;
        }
        else {
          uint64_t v32 = (uint64_t)v47[1];
        }
        uint64_t v33 = sub_188FC78(__p, (uint64_t)v31, v32);
        sub_188FC78(v33, (uint64_t)" failed in step ", 16);
        uint64_t v34 = (void *)std::ostream::operator<<();
        char v35 = sub_188FC78(v34, (uint64_t)" (", 2);
        sub_7B8BC(3, (char *)v52);
        signed int v36 = std::string::append((std::string *)v52, "RawPathResponseBuilderModule");
        long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        int64_t v46 = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v45 = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v52[2]) < 0) {
          operator delete((void *)v52[0]);
        }
        if (v46 >= 0) {
          char v38 = v45;
        }
        else {
          char v38 = (void **)v45[0];
        }
        if (v46 >= 0) {
          uint64_t v39 = HIBYTE(v46);
        }
        else {
          uint64_t v39 = (uint64_t)v45[1];
        }
        size_t v40 = sub_188FC78(v35, (uint64_t)v38, v39);
        unsigned __int8 v41 = sub_188FC78(v40, (uint64_t)") with error: ", 14);
        sub_CF2D60(v41, a5 + 8);
        if (SHIBYTE(v46) < 0) {
          operator delete(v45[0]);
        }
        if ((char)v48 < 0) {
          operator delete(v47[0]);
        }
        std::stringbuf::str();
        sub_7246C(v52, 3u);
        if (SHIBYTE(v52[2]) < 0) {
          operator delete((void *)v52[0]);
        }
        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
        if (v57 < 0) {
          operator delete(v56);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, a5 + 8);
    }
  }
  else
  {
    sub_3E7814((__n128 *)v52, (__n128 *)a1);
    __p[0].__r_.__value_.__s.__data_[0] = 0;
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = *(_OWORD *)v52;
    __p[1] = *(std::string *)&v52[2];
    memset(&v52[2], 0, 24);
    int v55 = v53;
    sub_D5B970(a5, (uint64_t)__p);
    if (__p[0].__r_.__value_.__s.__data_[0])
    {
      sub_162D64C(&__p[0].__r_.__value_.__r.__words[1]);
    }
    else
    {
      std::string::pointer v17 = __p[1].__r_.__value_.__l.__data_;
      if (__p[1].__r_.__value_.__r.__words[0])
      {
        std::string::size_type v18 = __p[1].__r_.__value_.__l.__size_;
        std::string::pointer v19 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v18 - 1) < 0) {
              operator delete(*(void **)(v18 - 24));
            }
            v18 -= 32;
          }
          while ((std::string::pointer)v18 != v17);
          std::string::pointer v19 = __p[1].__r_.__value_.__l.__data_;
        }
        __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v17;
        operator delete(v19);
      }
    }
    uint64_t v23 = v52[2];
    if (v52[2])
    {
      uint64_t v24 = v52[3];
      __n128 v25 = (void *)v52[2];
      if (v52[3] != v52[2])
      {
        do
        {
          if (*(char *)(v24 - 1) < 0) {
            operator delete(*(void **)(v24 - 24));
          }
          v24 -= 32;
        }
        while (v24 != v23);
        __n128 v25 = (void *)v52[2];
      }
      v52[3] = v23;
      operator delete(v25);
    }
  }
}

void sub_D5B83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a34);
  sub_D59370(v41);
  _Unwind_Resume(a1);
}

void sub_D5B95C(_Unwind_Exception *a1)
{
  sub_D59370(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D5B970(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)a2)
    {
      if (a1 != a2)
      {
        uint64_t v4 = *(void *)(a1 + 16);
        if ((v4 & 2) != 0)
        {
          long long v5 = 0;
        }
        else
        {
          long long v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
          if (v4) {
            long long v5 = (void *)*v5;
          }
        }
        uint64_t v9 = a2 + 8;
        uint64_t v10 = a1 + 8;
        uint64_t v11 = *(void *)(a2 + 16);
        if ((v11 & 2) != 0)
        {
          uint64_t v12 = 0;
        }
        else
        {
          uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
          if (v11) {
            uint64_t v12 = (void *)*v12;
          }
        }
        if (v5 == v12) {
          sub_16323C4(v10, v9);
        }
        else {
          sub_1632068(v10, v9);
        }
      }
LABEL_28:
      *(void *)(a1 + 568) = *(void *)(a2 + 568);
      goto LABEL_29;
    }
    sub_162D64C(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  else
  {
    if (*(unsigned char *)a2)
    {
      uint64_t v6 = *(void *)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = *(void **)(a1 + 24);
        if (v7 != v6)
        {
          do
          {
            if (*(char *)(v7 - 1) < 0) {
              operator delete(*(void **)(v7 - 24));
            }
            v7 -= 32;
          }
          while (v7 != v6);
          uint64_t v8 = *(void **)(a1 + 24);
        }
        *(void *)(a1 + 32) = v6;
        operator delete(v8);
      }
      sub_C6B2B4(a1 + 8, a2 + 8);
      goto LABEL_28;
    }
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
LABEL_29:
  *(unsigned char *)a1 = *(unsigned char *)a2;
  return a1;
}

void sub_D5BAD4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string **a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  uint64_t v10 = (std::string *)(a5 + 8);
  bzero((void *)(a5 + 8), 0x360uLL);
  sub_47E0E4((_OWORD *)(a5 + 8));
  *(_DWORD *)(a5 + 56) = -1;
  *(unsigned char *)(a5 + 240) = 0;
  *(unsigned char *)(a5 + 376) = 0;
  *(_OWORD *)(a5 + 536) = 0u;
  *(_OWORD *)(a5 + 552) = 0u;
  *(_OWORD *)(a5 + 568) = 0u;
  *(void *)(a5 + 520) = 0;
  *(void *)(a5 + 525) = 0;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 384) = 0u;
  *(_OWORD *)(a5 + 400) = 0u;
  *(_OWORD *)(a5 + 416) = 0u;
  *(_OWORD *)(a5 + 432) = 0u;
  *(_OWORD *)(a5 + 448) = 0u;
  *(_OWORD *)(a5 + 464) = 0u;
  *(_OWORD *)(a5 + 480) = 0u;
  *(_OWORD *)(a5 + 496) = 0u;
  *(_DWORD *)(a5 + 512) = 0;
  *(void *)(a5 + 584) = 0x3FF0000000000000;
  *(void *)(a5 + 600) = 0;
  *(void *)(a5 + 592) = 0;
  *(void *)(a5 + 608) = 0;
  *(unsigned char *)(a5 + 616) = 5;
  *(_OWORD *)(a5 + 640) = 0u;
  *(_OWORD *)(a5 + 656) = 0u;
  *(_OWORD *)(a5 + 624) = 0u;
  *(_DWORD *)(a5 + 672) = 0x7FFFFFFF;
  *(void *)(a5 + 760) = 0;
  *(void *)(a5 + 768) = 0;
  *(_OWORD *)(a5 + 737) = 0u;
  *(_OWORD *)(a5 + 712) = 0u;
  *(_OWORD *)(a5 + 728) = 0u;
  *(_OWORD *)(a5 + 680) = 0u;
  *(_OWORD *)(a5 + 696) = 0u;
  *(void *)(a5 + 776) = -1;
  *(_DWORD *)(a5 + 784) = 0x7FFFFFFF;
  *(void *)(a5 + 788) = 0;
  *(void *)(a5 + 800) = -1;
  *(_DWORD *)(a5 + 808) = -1;
  *(unsigned char *)(a5 + 816) = 0;
  *(unsigned char *)(a5 + 848) = 0;
  *(void *)(a5 + 856) = 0;
  *(_WORD *)(a5 + 864) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && !*(_DWORD *)a1)
  {
    sub_CF5040(&v42, *(void ****)a2, *(void *)(a2 + 8), *(void **)(a2 + 16), 0);
    sub_CA12F0((unsigned __int8 *)&v42, (uint64_t)v47);
    sub_CA35BC(a5, (unsigned __int8 *)v47);
    if (LOBYTE(v47[0]))
    {
      sub_CA60E4((uint64_t)&v47[1]);
    }
    else
    {
      uint64_t v14 = __p;
      if ((void)__p)
      {
        uint64_t v15 = *((void *)&__p + 1);
        uint64_t v16 = (void *)__p;
        if (*((void *)&__p + 1) != (void)__p)
        {
          do
          {
            if (*(char *)(v15 - 1) < 0) {
              operator delete(*(void **)(v15 - 24));
            }
            v15 -= 32;
          }
          while (v15 != v14);
          uint64_t v16 = (void *)__p;
        }
        *((void *)&__p + 1) = v14;
        operator delete(v16);
      }
    }
    int v20 = *(unsigned __int8 *)(a1 + 48);
    if (!*(unsigned char *)a5)
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), (const std::error_condition *)(a5 + 8), *(void *)(a1 + 56));
      int v24 = *(unsigned __int8 *)(a1 + 48);
      HIBYTE(v47[2]) = 18;
      strcpy((char *)v47, "InternalError[All]");
      sub_710A8(v24, (uint64_t)v47, *(void *)(a1 + 56));
      if (SHIBYTE(v47[2]) < 0) {
        operator delete(v47[0]);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v47);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v40, v25);
        if ((v41 & 0x80u) == 0) {
          int v26 = v40;
        }
        else {
          int v26 = (void **)v40[0];
        }
        if ((v41 & 0x80u) == 0) {
          uint64_t v27 = v41;
        }
        else {
          uint64_t v27 = (uint64_t)v40[1];
        }
        std::string::size_type v28 = sub_188FC78(v47, (uint64_t)v26, v27);
        sub_188FC78(v28, (uint64_t)" failed in step ", 16);
        int v29 = (void *)std::ostream::operator<<();
        __n128 v30 = sub_188FC78(v29, (uint64_t)" (", 2);
        sub_7B8BC(0, (char *)&v46);
        uint64_t v31 = std::string::append(&v46, "PathDecoderModule");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        int64_t v39 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)char v38 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        if (v39 >= 0) {
          uint64_t v33 = v38;
        }
        else {
          uint64_t v33 = (void **)v38[0];
        }
        if (v39 >= 0) {
          uint64_t v34 = HIBYTE(v39);
        }
        else {
          uint64_t v34 = (uint64_t)v38[1];
        }
        char v35 = sub_188FC78(v30, (uint64_t)v33, v34);
        signed int v36 = sub_188FC78(v35, (uint64_t)") with error: ", 14);
        sub_CF2D60(v36, a5 + 8);
        if (SHIBYTE(v39) < 0) {
          operator delete(v38[0]);
        }
        if ((char)v41 < 0) {
          operator delete(v40[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v46, 3u);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        if (v52 < 0) {
          operator delete(v51);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, a5 + 8);
      goto LABEL_73;
    }
    sub_CF4E10(a5 + 856, (uint64_t)v47);
    sub_717B8(v20, a3, (uint64_t)v47, *(void *)(a1 + 56));
    uint64_t v21 = __p;
    if ((void)__p)
    {
      uint64_t v22 = *((void *)&__p + 1);
      uint64_t v23 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
        {
          if (*(char *)(v22 - 25) < 0) {
            operator delete(*(void **)(v22 - 48));
          }
          v22 -= 48;
        }
        while (v22 != v21);
        uint64_t v23 = (void *)__p;
      }
      *((void *)&__p + 1) = v21;
      operator delete(v23);
    }
    if (SHIBYTE(v47[2]) < 0)
    {
      operator delete(v47[0]);
      long long v37 = *a4;
      if (*a4 == v10)
      {
LABEL_72:
        std::string::operator=(v37 + 1, (const std::string *)(a5 + 32));
LABEL_73:
        sub_CF5B18(&v42);
        return;
      }
    }
    else
    {
      long long v37 = *a4;
      if (*a4 == v10) {
        goto LABEL_72;
      }
    }
    sub_D5C258((uint64_t *)v37, *(void *)(a5 + 8), *(void *)(a5 + 16), 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(void *)(a5 + 16) - *(void *)(a5 + 8)) >> 3));
    goto LABEL_72;
  }
  sub_3E7814(&v42, (__n128 *)a1);
  LOBYTE(v47[0]) = 0;
  *(__n128 *)&v47[1] = v42;
  long long __p = *(_OWORD *)v43;
  uint64_t v49 = v44;
  v43[0] = 0;
  v43[1] = 0;
  uint64_t v44 = 0;
  int v50 = v45;
  sub_CA35BC(a5, (unsigned __int8 *)v47);
  if (LOBYTE(v47[0]))
  {
    sub_CA60E4((uint64_t)&v47[1]);
  }
  else
  {
    uint64_t v11 = __p;
    if ((void)__p)
    {
      uint64_t v12 = *((void *)&__p + 1);
      uint64_t v13 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
        {
          if (*(char *)(v12 - 1) < 0) {
            operator delete(*(void **)(v12 - 24));
          }
          v12 -= 32;
        }
        while (v12 != v11);
        uint64_t v13 = (void *)__p;
      }
      *((void *)&__p + 1) = v11;
      operator delete(v13);
    }
  }
  std::string::pointer v17 = (void **)v43[0];
  if (v43[0])
  {
    std::string::size_type v18 = (void **)v43[1];
    std::string::pointer v19 = v43[0];
    if (v43[1] != v43[0])
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 4;
      }
      while (v18 != v17);
      std::string::pointer v19 = v43[0];
    }
    v43[1] = v17;
    operator delete(v19);
  }
}

void sub_D5C12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a58);
  sub_CF5B18(&a16);
  sub_CA0F5C(v58);
  _Unwind_Resume(a1);
}

void sub_D5C20C(_Unwind_Exception *a1)
{
  sub_CA0F5C(v1);
  _Unwind_Resume(a1);
}

void sub_D5C224(_Unwind_Exception *a1)
{
  sub_CA0F5C(v1);
  _Unwind_Resume(a1);
}

void sub_D5C23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_CF5B18((uint64_t *)va);
  sub_CA0F5C(v8);
  _Unwind_Resume(a1);
}

uint64_t sub_D5C258(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xCBEEA4E1A08AD8F3 * ((v8 - *a1) >> 3) >= a4)
  {
    uint64_t result = a1[1];
    if (0xCBEEA4E1A08AD8F3 * ((result - v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_D5C500(v9, v6);
          v6 += 472;
          v9 += 472;
          v23 += 472;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_405F44(result - 472);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 8 * ((result - v9) >> 3);
      if (result != v9)
      {
        uint64_t v20 = 8 * ((result - v9) >> 3);
        do
        {
          uint64_t result = sub_D5C500(v9, v6);
          v6 += 472;
          v9 += 472;
          v20 -= 472;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = (uint64_t)sub_444D20((char *)(v9 + v22), (long long *)(v19 + v22));
          v22 += 472;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_405F44(v10 - 472);
        while (v10 != v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x8AD8F2FBA93868) {
      goto LABEL_37;
    }
    unint64_t v12 = 0xCBEEA4E1A08AD8F3 * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x456C797DD49C34 ? 0x8AD8F2FBA93868 : v13;
    if (v14 > 0x8AD8F2FBA93868) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 472 * v14;
    uint64_t result = (uint64_t)operator new(472 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = (uint64_t)sub_444D20((char *)(v17 + v18), (long long *)(v6 + v18));
        v18 += 472;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_D5C500(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  if (a1 == a2)
  {
    long long v11 = *(_OWORD *)(a2 + 48);
    long long v12 = *(_OWORD *)(a2 + 64);
    long long v13 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 94) = *(_OWORD *)(a2 + 94);
    *(_OWORD *)(a1 + 64) = v12;
    *(_OWORD *)(a1 + 80) = v13;
    *(_OWORD *)(a1 + 48) = v11;
    long long v14 = *(_OWORD *)(a2 + 184);
    long long v15 = *(_OWORD *)(a2 + 200);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = v15;
    *(_OWORD *)(a1 + 184) = v14;
  }
  else
  {
    sub_D5C6DC((void *)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 5));
    long long v4 = *(_OWORD *)(a2 + 48);
    long long v5 = *(_OWORD *)(a2 + 64);
    long long v6 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 94) = *(_OWORD *)(a2 + 94);
    *(_OWORD *)(a1 + 64) = v5;
    *(_OWORD *)(a1 + 80) = v6;
    *(_OWORD *)(a1 + 48) = v4;
    sub_D5C860((uint64_t *)(a1 + 112), *(void *)(a2 + 112), *(void *)(a2 + 120), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3));
    sub_47232C((void *)(a1 + 136), *(char **)(a2 + 136), *(char **)(a2 + 144), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3));
    sub_326C0((void *)(a1 + 160), *(char **)(a2 + 160), *(char **)(a2 + 168), (uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 3);
    long long v7 = *(_OWORD *)(a2 + 184);
    long long v8 = *(_OWORD *)(a2 + 200);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = v8;
    *(_OWORD *)(a1 + 184) = v7;
    sub_472BC8((void *)(a1 + 224), *(char **)(a2 + 224), *(char **)(a2 + 232), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 2));
    sub_472BC8((void *)(a1 + 248), *(char **)(a2 + 248), *(char **)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 2));
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    unsigned int v9 = *(_DWORD *)(a1 + 296);
    int v10 = *(_DWORD *)(a2 + 296);
    if (v9 == v10)
    {
      if (v9 <= 1) {
        *(void *)(a1 + 288) = *(void *)(a2 + 288);
      }
    }
    else
    {
      if (v10 == 1)
      {
        *(void *)(a1 + 288) = *(void *)(a2 + 288);
        int v10 = *(_DWORD *)(a2 + 296);
      }
      else if (!v10)
      {
        *(void *)(a1 + 288) = *(void *)(a2 + 288);
      }
      *(_DWORD *)(a1 + 296) = v10;
    }
  }
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  long long v16 = *(_OWORD *)(a2 + 400);
  long long v18 = *(_OWORD *)(a2 + 352);
  long long v17 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v16;
  *(_OWORD *)(a1 + 352) = v18;
  *(_OWORD *)(a1 + 368) = v17;
  long long v20 = *(_OWORD *)(a2 + 432);
  long long v19 = *(_OWORD *)(a2 + 448);
  long long v21 = *(_OWORD *)(a2 + 416);
  *(void *)(a1 + 463) = *(void *)(a2 + 463);
  *(_OWORD *)(a1 + 432) = v20;
  *(_OWORD *)(a1 + 448) = v19;
  *(_OWORD *)(a1 + 416) = v21;
  long long v22 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v22;
  return a1;
}

void *sub_D5C6DC(void *result, char *__src, char *a3, size_t __sz)
{
  long long v6 = __src;
  long long v7 = result;
  uint64_t v8 = result[2];
  unsigned int v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 5) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x2AAAAAAAAAAAAAALL) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 5);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x155555555555555 ? 0x2AAAAAAAAAAAAAALL : v11;
    if (v12 > 0x2AAAAAAAAAAAAAALL) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 12 * v12;
    uint64_t result = operator new(96 * v12);
    unsigned int v9 = (char *)result;
    *long long v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14 - 4);
    }
    long long v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  long long v15 = (void **)(result + 1);
  long long v16 = (unsigned char *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 5) >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    size_t v18 = v14 - 4;
    long long v19 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  long long v17 = &__src[32 * ((v16 - v9) >> 5)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9 - 4);
    unsigned int v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v17;
  if (v14)
  {
    size_t v18 = v14 - 4;
    long long v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *long long v15 = &v9[v14];
  return result;
}

void sub_D5C860(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *a1) >> 3) < a4)
  {
    if (v10)
    {
      uint64_t v11 = a1[1];
      unint64_t v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          uint64_t v13 = *(void **)(v11 - 24);
          if (v13)
          {
            *(void *)(v11 - 16) = v13;
            operator delete(v13);
          }
          v11 -= 56;
        }
        while (v11 != v10);
        unint64_t v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x492492492492492) {
      goto LABEL_39;
    }
    unint64_t v20 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= a4) {
      uint64_t v21 = a4;
    }
    unint64_t v22 = v20 >= 0x249249249249249 ? 0x492492492492492 : v21;
    if (v22 > 0x492492492492492) {
LABEL_39:
    }
      sub_2E00();
    uint64_t v23 = 56 * v22;
    int v24 = operator new(56 * v22);
    *a1 = (uint64_t)v24;
    a1[1] = (uint64_t)v24;
    a1[2] = (uint64_t)v24 + v23;
    __n128 v25 = sub_4450BC(v9, v6, a3, (uint64_t)v24);
LABEL_31:
    a1[1] = (uint64_t)v25;
    return;
  }
  uint64_t v14 = a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v14 - v10) >> 3) < a4)
  {
    uint64_t v15 = a2 + 8 * ((v14 - v10) >> 3);
    if (v14 != v10)
    {
      uint64_t v16 = 8 * ((v14 - v10) >> 3);
      do
      {
        long long v17 = *(_OWORD *)(v6 + 16);
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v6;
        *(_OWORD *)(v10 + 16) = v17;
        if (v6 != v10) {
          sub_457964((void *)(v10 + 32), *(char **)(v6 + 32), *(char **)(v6 + 40), (uint64_t)(*(void *)(v6 + 40) - *(void *)(v6 + 32)) >> 4);
        }
        v6 += 56;
        v10 += 56;
        v16 -= 56;
      }
      while (v16);
      uint64_t v10 = a1[1];
    }
    __n128 v25 = sub_4450BC(v9, v15, a3, v10);
    goto LABEL_31;
  }
  if (a2 == a3)
  {
    uint64_t v18 = *a1;
  }
  else
  {
    uint64_t v18 = *a1;
    do
    {
      long long v19 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v6;
      *(_OWORD *)(v10 + 16) = v19;
      if (v6 != v10) {
        sub_457964((void *)(v10 + 32), *(char **)(v6 + 32), *(char **)(v6 + 40), (uint64_t)(*(void *)(v6 + 40) - *(void *)(v6 + 32)) >> 4);
      }
      v6 += 56;
      v10 += 56;
      v18 += 56;
    }
    while (v6 != a3);
    uint64_t v14 = a1[1];
  }
  while (v14 != v18)
  {
    int v26 = *(void **)(v14 - 24);
    if (v26)
    {
      *(void *)(v14 - 16) = v26;
      operator delete(v26);
    }
    v14 -= 56;
  }
  a1[1] = v18;
}

void sub_D5CAE0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_D5CAE8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_D5CAF0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  bzero((void *)(a5 + 8), 0x238uLL);
  sub_162C594(a5 + 8, 0, 0);
  *(void *)(a5 + 568) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && *(_DWORD *)a1 == 0)
  {
    uint64_t v11 = *(void ****)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    uint64_t v13 = *(void *)(a2 + 16);
    uint64_t v49 = v12;
    sub_DBE954(v11, __p);
    long long v14 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    if (__p[0].__r_.__value_.__r.__words[0])
    {
      uint64_t v15 = (void *)__p[0].__r_.__value_.__r.__words[0];
      if (__p[0].__r_.__value_.__r.__words[0] != __p[0].__r_.__value_.__l.__size_)
      {
        std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
        do
        {
          if (*(char *)(size - 1) < 0) {
            operator delete(*(void **)(size - 24));
          }
          size -= 24;
        }
        while (size != (void)v14);
        uint64_t v15 = (void *)__p[0].__r_.__value_.__r.__words[0];
      }
      __p[0].__r_.__value_.__l.__size_ = v14;
      operator delete(v15);
    }
    BOOL v50 = (void)v14 != *((void *)&v14 + 1);
    uint64_t v51 = v13;
    sub_CB6D58((uint64_t)&v49, (uint64_t)__p);
    sub_D5B970(a5, (uint64_t)__p);
    if (__p[0].__r_.__value_.__s.__data_[0])
    {
      sub_162D64C(&__p[0].__r_.__value_.__r.__words[1]);
    }
    else
    {
      std::string::pointer data = __p[1].__r_.__value_.__l.__data_;
      if (__p[1].__r_.__value_.__r.__words[0])
      {
        std::string::size_type v21 = __p[1].__r_.__value_.__l.__size_;
        std::string::pointer v22 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v21 - 1) < 0) {
              operator delete(*(void **)(v21 - 24));
            }
            v21 -= 32;
          }
          while ((std::string::pointer)v21 != data);
          std::string::pointer v22 = __p[1].__r_.__value_.__l.__data_;
        }
        __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)data;
        operator delete(v22);
      }
    }
    int v26 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)a5)
    {
      memset(__p, 0, sizeof(__p));
      std::string::assign(__p, "RawPathResponseBuilderModule");
      LOBYTE(v52[0]) = 1;
      std::string::size_type v27 = __p[1].__r_.__value_.__l.__size_;
      if (__p[1].__r_.__value_.__l.__size_ >= __p[1].__r_.__value_.__r.__words[2])
      {
        std::string::size_type v28 = sub_C947F8((uint64_t *)&__p[1], "Runtime", (char *)v52, (uint64_t *)(a5 + 568));
      }
      else
      {
        sub_C949C8((int)&__p[1].__r_.__value_.__r.__words[2], __p[1].__r_.__value_.__l.__size_, "Runtime", (char *)v52, (uint64_t *)(a5 + 568));
        std::string::size_type v28 = v27 + 48;
      }
      __p[1].__r_.__value_.__l.__size_ = v28;
      sub_717B8(v26, a3, (uint64_t)__p, *(void *)(a1 + 56));
      std::string::pointer v42 = __p[1].__r_.__value_.__l.__data_;
      if (__p[1].__r_.__value_.__r.__words[0])
      {
        std::string::size_type v43 = __p[1].__r_.__value_.__l.__size_;
        std::string::pointer v44 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v43 - 25) < 0) {
              operator delete(*(void **)(v43 - 48));
            }
            v43 -= 48;
          }
          while ((std::string::pointer)v43 != v42);
          std::string::pointer v44 = __p[1].__r_.__value_.__l.__data_;
        }
        __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v42;
        operator delete(v44);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      sub_1632068(*a4, a5 + 8);
    }
    else
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), (const std::error_condition *)(a5 + 8), *(void *)(a1 + 56));
      int v29 = *(unsigned __int8 *)(a1 + 48);
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 18;
      strcpy((char *)__p, "InternalError[All]");
      sub_710A8(v29, (uint64_t)__p, *(void *)(a1 + 56));
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v47, v30);
        if ((v48 & 0x80u) == 0) {
          uint64_t v31 = v47;
        }
        else {
          uint64_t v31 = (void **)v47[0];
        }
        if ((v48 & 0x80u) == 0) {
          uint64_t v32 = v48;
        }
        else {
          uint64_t v32 = (uint64_t)v47[1];
        }
        uint64_t v33 = sub_188FC78(__p, (uint64_t)v31, v32);
        sub_188FC78(v33, (uint64_t)" failed in step ", 16);
        uint64_t v34 = (void *)std::ostream::operator<<();
        char v35 = sub_188FC78(v34, (uint64_t)" (", 2);
        sub_7B8BC(0, (char *)v52);
        signed int v36 = std::string::append((std::string *)v52, "RawPathResponseBuilderModule");
        long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        int64_t v46 = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v45 = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v52[2]) < 0) {
          operator delete((void *)v52[0]);
        }
        if (v46 >= 0) {
          char v38 = v45;
        }
        else {
          char v38 = (void **)v45[0];
        }
        if (v46 >= 0) {
          uint64_t v39 = HIBYTE(v46);
        }
        else {
          uint64_t v39 = (uint64_t)v45[1];
        }
        size_t v40 = sub_188FC78(v35, (uint64_t)v38, v39);
        unsigned __int8 v41 = sub_188FC78(v40, (uint64_t)") with error: ", 14);
        sub_CF2D60(v41, a5 + 8);
        if (SHIBYTE(v46) < 0) {
          operator delete(v45[0]);
        }
        if ((char)v48 < 0) {
          operator delete(v47[0]);
        }
        std::stringbuf::str();
        sub_7246C(v52, 3u);
        if (SHIBYTE(v52[2]) < 0) {
          operator delete((void *)v52[0]);
        }
        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
        if (v57 < 0) {
          operator delete(v56);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, a5 + 8);
    }
  }
  else
  {
    sub_3E7814((__n128 *)v52, (__n128 *)a1);
    __p[0].__r_.__value_.__s.__data_[0] = 0;
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = *(_OWORD *)v52;
    __p[1] = *(std::string *)&v52[2];
    memset(&v52[2], 0, 24);
    int v55 = v53;
    sub_D5B970(a5, (uint64_t)__p);
    if (__p[0].__r_.__value_.__s.__data_[0])
    {
      sub_162D64C(&__p[0].__r_.__value_.__r.__words[1]);
    }
    else
    {
      std::string::pointer v17 = __p[1].__r_.__value_.__l.__data_;
      if (__p[1].__r_.__value_.__r.__words[0])
      {
        std::string::size_type v18 = __p[1].__r_.__value_.__l.__size_;
        std::string::pointer v19 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v18 - 1) < 0) {
              operator delete(*(void **)(v18 - 24));
            }
            v18 -= 32;
          }
          while ((std::string::pointer)v18 != v17);
          std::string::pointer v19 = __p[1].__r_.__value_.__l.__data_;
        }
        __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v17;
        operator delete(v19);
      }
    }
    uint64_t v23 = v52[2];
    if (v52[2])
    {
      uint64_t v24 = v52[3];
      __n128 v25 = (void *)v52[2];
      if (v52[3] != v52[2])
      {
        do
        {
          if (*(char *)(v24 - 1) < 0) {
            operator delete(*(void **)(v24 - 24));
          }
          v24 -= 32;
        }
        while (v24 != v23);
        __n128 v25 = (void *)v52[2];
      }
      v52[3] = v23;
      operator delete(v25);
    }
  }
}

void sub_D5D0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a34);
  sub_D59370(v41);
  _Unwind_Resume(a1);
}

void sub_D5D210(_Unwind_Exception *a1)
{
  sub_D59370(v1);
  _Unwind_Resume(a1);
}

void sub_D5D224(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string **a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  uint64_t v10 = (std::string *)(a5 + 8);
  bzero((void *)(a5 + 8), 0x360uLL);
  sub_47E0E4((_OWORD *)(a5 + 8));
  *(_DWORD *)(a5 + 56) = -1;
  *(unsigned char *)(a5 + 240) = 0;
  *(unsigned char *)(a5 + 376) = 0;
  *(_OWORD *)(a5 + 536) = 0u;
  *(_OWORD *)(a5 + 552) = 0u;
  *(_OWORD *)(a5 + 568) = 0u;
  *(void *)(a5 + 520) = 0;
  *(void *)(a5 + 525) = 0;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 384) = 0u;
  *(_OWORD *)(a5 + 400) = 0u;
  *(_OWORD *)(a5 + 416) = 0u;
  *(_OWORD *)(a5 + 432) = 0u;
  *(_OWORD *)(a5 + 448) = 0u;
  *(_OWORD *)(a5 + 464) = 0u;
  *(_OWORD *)(a5 + 480) = 0u;
  *(_OWORD *)(a5 + 496) = 0u;
  *(_DWORD *)(a5 + 512) = 0;
  *(void *)(a5 + 584) = 0x3FF0000000000000;
  *(void *)(a5 + 600) = 0;
  *(void *)(a5 + 592) = 0;
  *(void *)(a5 + 608) = 0;
  *(unsigned char *)(a5 + 616) = 5;
  *(_OWORD *)(a5 + 640) = 0u;
  *(_OWORD *)(a5 + 656) = 0u;
  *(_OWORD *)(a5 + 624) = 0u;
  *(_DWORD *)(a5 + 672) = 0x7FFFFFFF;
  *(void *)(a5 + 760) = 0;
  *(void *)(a5 + 768) = 0;
  *(_OWORD *)(a5 + 737) = 0u;
  *(_OWORD *)(a5 + 712) = 0u;
  *(_OWORD *)(a5 + 728) = 0u;
  *(_OWORD *)(a5 + 680) = 0u;
  *(_OWORD *)(a5 + 696) = 0u;
  *(void *)(a5 + 776) = -1;
  *(_DWORD *)(a5 + 784) = 0x7FFFFFFF;
  *(void *)(a5 + 788) = 0;
  *(void *)(a5 + 800) = -1;
  *(_DWORD *)(a5 + 808) = -1;
  *(unsigned char *)(a5 + 816) = 0;
  *(unsigned char *)(a5 + 848) = 0;
  *(void *)(a5 + 856) = 0;
  *(_WORD *)(a5 + 864) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && !*(_DWORD *)a1)
  {
    sub_CF5040(&v42, *(void ****)a2, *(void *)(a2 + 8), *(void **)(a2 + 16), 0);
    sub_CA3808((unsigned __int8 *)&v42, (uint64_t)v47);
    sub_CA5C50(a5, (unsigned __int8 *)v47);
    if (LOBYTE(v47[0]))
    {
      sub_CA701C((uint64_t)&v47[1]);
    }
    else
    {
      uint64_t v14 = __p;
      if ((void)__p)
      {
        uint64_t v15 = *((void *)&__p + 1);
        uint64_t v16 = (void *)__p;
        if (*((void *)&__p + 1) != (void)__p)
        {
          do
          {
            if (*(char *)(v15 - 1) < 0) {
              operator delete(*(void **)(v15 - 24));
            }
            v15 -= 32;
          }
          while (v15 != v14);
          uint64_t v16 = (void *)__p;
        }
        *((void *)&__p + 1) = v14;
        operator delete(v16);
      }
    }
    int v20 = *(unsigned __int8 *)(a1 + 48);
    if (!*(unsigned char *)a5)
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), (const std::error_condition *)(a5 + 8), *(void *)(a1 + 56));
      int v24 = *(unsigned __int8 *)(a1 + 48);
      HIBYTE(v47[2]) = 18;
      strcpy((char *)v47, "InternalError[All]");
      sub_710A8(v24, (uint64_t)v47, *(void *)(a1 + 56));
      if (SHIBYTE(v47[2]) < 0) {
        operator delete(v47[0]);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v47);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v40, v25);
        if ((v41 & 0x80u) == 0) {
          int v26 = v40;
        }
        else {
          int v26 = (void **)v40[0];
        }
        if ((v41 & 0x80u) == 0) {
          uint64_t v27 = v41;
        }
        else {
          uint64_t v27 = (uint64_t)v40[1];
        }
        std::string::size_type v28 = sub_188FC78(v47, (uint64_t)v26, v27);
        sub_188FC78(v28, (uint64_t)" failed in step ", 16);
        int v29 = (void *)std::ostream::operator<<();
        __n128 v30 = sub_188FC78(v29, (uint64_t)" (", 2);
        sub_7B8BC(2, (char *)&v46);
        uint64_t v31 = std::string::append(&v46, "PathDecoderModule");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        int64_t v39 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)char v38 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        if (v39 >= 0) {
          uint64_t v33 = v38;
        }
        else {
          uint64_t v33 = (void **)v38[0];
        }
        if (v39 >= 0) {
          uint64_t v34 = HIBYTE(v39);
        }
        else {
          uint64_t v34 = (uint64_t)v38[1];
        }
        char v35 = sub_188FC78(v30, (uint64_t)v33, v34);
        signed int v36 = sub_188FC78(v35, (uint64_t)") with error: ", 14);
        sub_CF2D60(v36, a5 + 8);
        if (SHIBYTE(v39) < 0) {
          operator delete(v38[0]);
        }
        if ((char)v41 < 0) {
          operator delete(v40[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v46, 3u);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        if (v52 < 0) {
          operator delete(v51);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, a5 + 8);
      goto LABEL_73;
    }
    sub_CF4E10(a5 + 856, (uint64_t)v47);
    sub_717B8(v20, a3, (uint64_t)v47, *(void *)(a1 + 56));
    uint64_t v21 = __p;
    if ((void)__p)
    {
      uint64_t v22 = *((void *)&__p + 1);
      uint64_t v23 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
        {
          if (*(char *)(v22 - 25) < 0) {
            operator delete(*(void **)(v22 - 48));
          }
          v22 -= 48;
        }
        while (v22 != v21);
        uint64_t v23 = (void *)__p;
      }
      *((void *)&__p + 1) = v21;
      operator delete(v23);
    }
    if (SHIBYTE(v47[2]) < 0)
    {
      operator delete(v47[0]);
      long long v37 = *a4;
      if (*a4 == v10)
      {
LABEL_72:
        std::string::operator=(v37 + 1, (const std::string *)(a5 + 32));
LABEL_73:
        sub_CF5B18(&v42);
        return;
      }
    }
    else
    {
      long long v37 = *a4;
      if (*a4 == v10) {
        goto LABEL_72;
      }
    }
    sub_D5D9A0((uint64_t *)v37, *(void *)(a5 + 8), *(void *)(a5 + 16), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a5 + 16) - *(void *)(a5 + 8)) >> 5));
    goto LABEL_72;
  }
  sub_3E7814(&v42, (__n128 *)a1);
  LOBYTE(v47[0]) = 0;
  *(__n128 *)&v47[1] = v42;
  long long __p = *(_OWORD *)v43;
  uint64_t v49 = v44;
  v43[0] = 0;
  v43[1] = 0;
  uint64_t v44 = 0;
  int v50 = v45;
  sub_CA5C50(a5, (unsigned __int8 *)v47);
  if (LOBYTE(v47[0]))
  {
    sub_CA701C((uint64_t)&v47[1]);
  }
  else
  {
    uint64_t v11 = __p;
    if ((void)__p)
    {
      uint64_t v12 = *((void *)&__p + 1);
      uint64_t v13 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
        {
          if (*(char *)(v12 - 1) < 0) {
            operator delete(*(void **)(v12 - 24));
          }
          v12 -= 32;
        }
        while (v12 != v11);
        uint64_t v13 = (void *)__p;
      }
      *((void *)&__p + 1) = v11;
      operator delete(v13);
    }
  }
  std::string::pointer v17 = (void **)v43[0];
  if (v43[0])
  {
    std::string::size_type v18 = (void **)v43[1];
    std::string::pointer v19 = v43[0];
    if (v43[1] != v43[0])
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 4;
      }
      while (v18 != v17);
      std::string::pointer v19 = v43[0];
    }
    v43[1] = v17;
    operator delete(v19);
  }
}

void sub_D5D874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a58);
  sub_CF5B18(&a16);
  sub_CA5D18(v58);
  _Unwind_Resume(a1);
}

void sub_D5D954(_Unwind_Exception *a1)
{
  sub_CA5D18(v1);
  _Unwind_Resume(a1);
}

void sub_D5D96C(_Unwind_Exception *a1)
{
  sub_CA5D18(v1);
  _Unwind_Resume(a1);
}

void sub_D5D984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_CF5B18((uint64_t *)va);
  sub_CA5D18(v8);
  _Unwind_Resume(a1);
}

uint64_t sub_D5D9A0(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((v8 - *a1) >> 5) >= a4)
  {
    uint64_t result = a1[1];
    if (0xEEEEEEEEEEEEEEEFLL * ((result - v9) >> 5) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_D5DC28(v9, v6);
          v6 += 480;
          v9 += 480;
          v23 += 480;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_4451C0(result - 480);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 32 * ((result - v9) >> 5);
      if (result != v9)
      {
        uint64_t v20 = 32 * ((result - v9) >> 5);
        do
        {
          uint64_t result = sub_D5DC28(v9, v6);
          v6 += 480;
          v9 += 480;
          v20 -= 480;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = (uint64_t)sub_4456B4((char *)(v9 + v22), (long long *)(v19 + v22));
          v22 += 480;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_4451C0(v10 - 480);
        while (v10 != v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x88888888888888) {
      goto LABEL_37;
    }
    unint64_t v12 = 0xEEEEEEEEEEEEEEEFLL * (v8 >> 5);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x44444444444444 ? 0x88888888888888 : v13;
    if (v14 > 0x88888888888888) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 480 * v14;
    uint64_t result = (uint64_t)operator new(480 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = (uint64_t)sub_4456B4((char *)(v17 + v18), (long long *)(v6 + v18));
        v18 += 480;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}

uint64_t sub_D5DC28(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  if (a1 == a2)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    long long v11 = *(_OWORD *)(a2 + 64);
    long long v12 = *(_OWORD *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 110) = *(void *)(a2 + 110);
    *(_OWORD *)(a1 + 80) = v12;
    *(_OWORD *)(a1 + 96) = v13;
    *(_OWORD *)(a1 + 64) = v11;
    long long v14 = *(_OWORD *)(a2 + 192);
    long long v15 = *(_OWORD *)(a2 + 208);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(_OWORD *)(a1 + 192) = v14;
    *(_OWORD *)(a1 + 208) = v15;
  }
  else
  {
    sub_D5DE2C((void *)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    long long v4 = *(_OWORD *)(a2 + 64);
    long long v5 = *(_OWORD *)(a2 + 80);
    long long v6 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 110) = *(void *)(a2 + 110);
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 96) = v6;
    *(_OWORD *)(a1 + 64) = v4;
    sub_D5DFD0((uint64_t *)(a1 + 120), *(void *)(a2 + 120), *(void *)(a2 + 128), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 3));
    sub_47232C((void *)(a1 + 144), *(char **)(a2 + 144), *(char **)(a2 + 152), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 3));
    sub_326C0((void *)(a1 + 168), *(char **)(a2 + 168), *(char **)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 3);
    long long v7 = *(_OWORD *)(a2 + 192);
    long long v8 = *(_OWORD *)(a2 + 208);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(_OWORD *)(a1 + 192) = v7;
    *(_OWORD *)(a1 + 208) = v8;
    sub_472BC8((void *)(a1 + 232), *(char **)(a2 + 232), *(char **)(a2 + 240), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 240) - *(void *)(a2 + 232)) >> 2));
    sub_472BC8((void *)(a1 + 256), *(char **)(a2 + 256), *(char **)(a2 + 264), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 264) - *(void *)(a2 + 256)) >> 2));
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    unsigned int v9 = *(_DWORD *)(a1 + 304);
    int v10 = *(_DWORD *)(a2 + 304);
    if (v9 == v10)
    {
      if (v9 <= 1) {
        *(void *)(a1 + 296) = *(void *)(a2 + 296);
      }
    }
    else
    {
      if (v10 == 1)
      {
        *(void *)(a1 + 296) = *(void *)(a2 + 296);
        int v10 = *(_DWORD *)(a2 + 304);
      }
      else if (!v10)
      {
        *(void *)(a1 + 296) = *(void *)(a2 + 296);
      }
      *(_DWORD *)(a1 + 304) = v10;
    }
  }
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  long long v16 = *(_OWORD *)(a2 + 408);
  long long v18 = *(_OWORD *)(a2 + 360);
  long long v17 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 408) = v16;
  *(_OWORD *)(a1 + 360) = v18;
  *(_OWORD *)(a1 + 376) = v17;
  long long v20 = *(_OWORD *)(a2 + 440);
  long long v19 = *(_OWORD *)(a2 + 456);
  long long v21 = *(_OWORD *)(a2 + 424);
  *(void *)(a1 + 471) = *(void *)(a2 + 471);
  *(_OWORD *)(a1 + 440) = v20;
  *(_OWORD *)(a1 + 456) = v19;
  *(_OWORD *)(a1 + 424) = v21;
  long long v22 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = v22;
  return a1;
}

void *sub_D5DE2C(void *result, char *__src, char *a3, unint64_t a4)
{
  long long v6 = __src;
  long long v7 = result;
  uint64_t v8 = result[2];
  unsigned int v9 = (char *)*result;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - *result) >> 3) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x276276276276276) {
      goto LABEL_23;
    }
    unint64_t v10 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0x13B13B13B13B13BLL ? 0x276276276276276 : v11;
    if (v12 > 0x276276276276276) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 13 * v12;
    uint64_t result = operator new(104 * v12);
    unsigned int v9 = (char *)result;
    *long long v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14 - 4);
    }
    long long v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  long long v15 = (void **)(result + 1);
  long long v16 = (unsigned char *)result[1];
  if (0x4EC4EC4EC4EC4EC5 * ((v16 - v9) >> 3) >= a4)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    size_t v18 = v14 - 4;
    long long v19 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  long long v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9 - 4);
    unsigned int v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v17;
  if (v14)
  {
    size_t v18 = v14 - 4;
    long long v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *long long v15 = &v9[v14];
  return result;
}

void sub_D5DFD0(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *a1) >> 3) < a4)
  {
    if (v10)
    {
      uint64_t v11 = a1[1];
      unint64_t v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          uint64_t v13 = *(void **)(v11 - 24);
          if (v13)
          {
            *(void *)(v11 - 16) = v13;
            operator delete(v13);
          }
          v11 -= 56;
        }
        while (v11 != v10);
        unint64_t v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x492492492492492) {
      goto LABEL_39;
    }
    unint64_t v20 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= a4) {
      uint64_t v21 = a4;
    }
    unint64_t v22 = v20 >= 0x249249249249249 ? 0x492492492492492 : v21;
    if (v22 > 0x492492492492492) {
LABEL_39:
    }
      sub_2E00();
    uint64_t v23 = 56 * v22;
    int v24 = operator new(56 * v22);
    *a1 = (uint64_t)v24;
    a1[1] = (uint64_t)v24;
    a1[2] = (uint64_t)v24 + v23;
    __n128 v25 = sub_445A64(v9, v6, a3, (uint64_t)v24);
LABEL_31:
    a1[1] = (uint64_t)v25;
    return;
  }
  uint64_t v14 = a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v14 - v10) >> 3) < a4)
  {
    uint64_t v15 = a2 + 8 * ((v14 - v10) >> 3);
    if (v14 != v10)
    {
      uint64_t v16 = 8 * ((v14 - v10) >> 3);
      do
      {
        long long v17 = *(_OWORD *)(v6 + 16);
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v6;
        *(_OWORD *)(v10 + 16) = v17;
        if (v6 != v10) {
          sub_457964((void *)(v10 + 32), *(char **)(v6 + 32), *(char **)(v6 + 40), (uint64_t)(*(void *)(v6 + 40) - *(void *)(v6 + 32)) >> 4);
        }
        v6 += 56;
        v10 += 56;
        v16 -= 56;
      }
      while (v16);
      uint64_t v10 = a1[1];
    }
    __n128 v25 = sub_445A64(v9, v15, a3, v10);
    goto LABEL_31;
  }
  if (a2 == a3)
  {
    uint64_t v18 = *a1;
  }
  else
  {
    uint64_t v18 = *a1;
    do
    {
      long long v19 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)v6;
      *(_OWORD *)(v10 + 16) = v19;
      if (v6 != v10) {
        sub_457964((void *)(v10 + 32), *(char **)(v6 + 32), *(char **)(v6 + 40), (uint64_t)(*(void *)(v6 + 40) - *(void *)(v6 + 32)) >> 4);
      }
      v6 += 56;
      v10 += 56;
      v18 += 56;
    }
    while (v6 != a3);
    uint64_t v14 = a1[1];
  }
  while (v14 != v18)
  {
    int v26 = *(void **)(v14 - 24);
    if (v26)
    {
      *(void *)(v14 - 16) = v26;
      operator delete(v26);
    }
    v14 -= 56;
  }
  a1[1] = v18;
}

void sub_D5E250(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_D5E258(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_D5E260(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  bzero((void *)(a5 + 8), 0x238uLL);
  sub_162C594(a5 + 8, 0, 0);
  *(void *)(a5 + 568) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && *(_DWORD *)a1 == 0)
  {
    uint64_t v11 = *(void ****)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    uint64_t v13 = *(void *)(a2 + 16);
    uint64_t v49 = v12;
    sub_DBE954(v11, __p);
    long long v14 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    if (__p[0].__r_.__value_.__r.__words[0])
    {
      uint64_t v15 = (void *)__p[0].__r_.__value_.__r.__words[0];
      if (__p[0].__r_.__value_.__r.__words[0] != __p[0].__r_.__value_.__l.__size_)
      {
        std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
        do
        {
          if (*(char *)(size - 1) < 0) {
            operator delete(*(void **)(size - 24));
          }
          size -= 24;
        }
        while (size != (void)v14);
        uint64_t v15 = (void *)__p[0].__r_.__value_.__r.__words[0];
      }
      __p[0].__r_.__value_.__l.__size_ = v14;
      operator delete(v15);
    }
    BOOL v50 = (void)v14 != *((void *)&v14 + 1);
    uint64_t v51 = v13;
    sub_CB83E0((uint64_t)&v49, (uint64_t)__p);
    sub_D5B970(a5, (uint64_t)__p);
    if (__p[0].__r_.__value_.__s.__data_[0])
    {
      sub_162D64C(&__p[0].__r_.__value_.__r.__words[1]);
    }
    else
    {
      std::string::pointer data = __p[1].__r_.__value_.__l.__data_;
      if (__p[1].__r_.__value_.__r.__words[0])
      {
        std::string::size_type v21 = __p[1].__r_.__value_.__l.__size_;
        std::string::pointer v22 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v21 - 1) < 0) {
              operator delete(*(void **)(v21 - 24));
            }
            v21 -= 32;
          }
          while ((std::string::pointer)v21 != data);
          std::string::pointer v22 = __p[1].__r_.__value_.__l.__data_;
        }
        __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)data;
        operator delete(v22);
      }
    }
    int v26 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)a5)
    {
      memset(__p, 0, sizeof(__p));
      std::string::assign(__p, "RawPathResponseBuilderModule");
      LOBYTE(v52[0]) = 1;
      std::string::size_type v27 = __p[1].__r_.__value_.__l.__size_;
      if (__p[1].__r_.__value_.__l.__size_ >= __p[1].__r_.__value_.__r.__words[2])
      {
        std::string::size_type v28 = sub_C947F8((uint64_t *)&__p[1], "Runtime", (char *)v52, (uint64_t *)(a5 + 568));
      }
      else
      {
        sub_C949C8((int)&__p[1].__r_.__value_.__r.__words[2], __p[1].__r_.__value_.__l.__size_, "Runtime", (char *)v52, (uint64_t *)(a5 + 568));
        std::string::size_type v28 = v27 + 48;
      }
      __p[1].__r_.__value_.__l.__size_ = v28;
      sub_717B8(v26, a3, (uint64_t)__p, *(void *)(a1 + 56));
      std::string::pointer v42 = __p[1].__r_.__value_.__l.__data_;
      if (__p[1].__r_.__value_.__r.__words[0])
      {
        std::string::size_type v43 = __p[1].__r_.__value_.__l.__size_;
        std::string::pointer v44 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v43 - 25) < 0) {
              operator delete(*(void **)(v43 - 48));
            }
            v43 -= 48;
          }
          while ((std::string::pointer)v43 != v42);
          std::string::pointer v44 = __p[1].__r_.__value_.__l.__data_;
        }
        __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v42;
        operator delete(v44);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      sub_1632068(*a4, a5 + 8);
    }
    else
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), (const std::error_condition *)(a5 + 8), *(void *)(a1 + 56));
      int v29 = *(unsigned __int8 *)(a1 + 48);
      *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 18;
      strcpy((char *)__p, "InternalError[All]");
      sub_710A8(v29, (uint64_t)__p, *(void *)(a1 + 56));
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)__p);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v47, v30);
        if ((v48 & 0x80u) == 0) {
          uint64_t v31 = v47;
        }
        else {
          uint64_t v31 = (void **)v47[0];
        }
        if ((v48 & 0x80u) == 0) {
          uint64_t v32 = v48;
        }
        else {
          uint64_t v32 = (uint64_t)v47[1];
        }
        uint64_t v33 = sub_188FC78(__p, (uint64_t)v31, v32);
        sub_188FC78(v33, (uint64_t)" failed in step ", 16);
        uint64_t v34 = (void *)std::ostream::operator<<();
        char v35 = sub_188FC78(v34, (uint64_t)" (", 2);
        sub_7B8BC(2, (char *)v52);
        signed int v36 = std::string::append((std::string *)v52, "RawPathResponseBuilderModule");
        long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        int64_t v46 = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v45 = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v52[2]) < 0) {
          operator delete((void *)v52[0]);
        }
        if (v46 >= 0) {
          char v38 = v45;
        }
        else {
          char v38 = (void **)v45[0];
        }
        if (v46 >= 0) {
          uint64_t v39 = HIBYTE(v46);
        }
        else {
          uint64_t v39 = (uint64_t)v45[1];
        }
        size_t v40 = sub_188FC78(v35, (uint64_t)v38, v39);
        unsigned __int8 v41 = sub_188FC78(v40, (uint64_t)") with error: ", 14);
        sub_CF2D60(v41, a5 + 8);
        if (SHIBYTE(v46) < 0) {
          operator delete(v45[0]);
        }
        if ((char)v48 < 0) {
          operator delete(v47[0]);
        }
        std::stringbuf::str();
        sub_7246C(v52, 3u);
        if (SHIBYTE(v52[2]) < 0) {
          operator delete((void *)v52[0]);
        }
        *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
        if (v57 < 0) {
          operator delete(v56);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, a5 + 8);
    }
  }
  else
  {
    sub_3E7814((__n128 *)v52, (__n128 *)a1);
    __p[0].__r_.__value_.__s.__data_[0] = 0;
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = *(_OWORD *)v52;
    __p[1] = *(std::string *)&v52[2];
    memset(&v52[2], 0, 24);
    int v55 = v53;
    sub_D5B970(a5, (uint64_t)__p);
    if (__p[0].__r_.__value_.__s.__data_[0])
    {
      sub_162D64C(&__p[0].__r_.__value_.__r.__words[1]);
    }
    else
    {
      std::string::pointer v17 = __p[1].__r_.__value_.__l.__data_;
      if (__p[1].__r_.__value_.__r.__words[0])
      {
        std::string::size_type v18 = __p[1].__r_.__value_.__l.__size_;
        std::string::pointer v19 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__l.__size_ != __p[1].__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v18 - 1) < 0) {
              operator delete(*(void **)(v18 - 24));
            }
            v18 -= 32;
          }
          while ((std::string::pointer)v18 != v17);
          std::string::pointer v19 = __p[1].__r_.__value_.__l.__data_;
        }
        __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)v17;
        operator delete(v19);
      }
    }
    uint64_t v23 = v52[2];
    if (v52[2])
    {
      uint64_t v24 = v52[3];
      __n128 v25 = (void *)v52[2];
      if (v52[3] != v52[2])
      {
        do
        {
          if (*(char *)(v24 - 1) < 0) {
            operator delete(*(void **)(v24 - 24));
          }
          v24 -= 32;
        }
        while (v24 != v23);
        __n128 v25 = (void *)v52[2];
      }
      v52[3] = v23;
      operator delete(v25);
    }
  }
}

void sub_D5E860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a34);
  sub_D59370(v41);
  _Unwind_Resume(a1);
}

void sub_D5E980(_Unwind_Exception *a1)
{
  sub_D59370(v1);
  _Unwind_Resume(a1);
}

void sub_D5E994()
{
  unk_25E6B67 = 16641;
  word_25E6B50 = 65;
  byte_25E6B7F = 1;
  byte_25E6B69 = 0;
}

void sub_D5E9BC()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  sub_725D0((uint64_t)&v59);
  char v58 = 25;
  unsigned int v4 = sub_DB7034(v3);
  char v57 = v4;
  uint64_t v5 = *(void *)sub_37D0C0(v2);
  sub_D53E44(25, v3, v2);
  v6.n128_u64[0] = 0;
  v6.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(&v53, &v6);
  char v54 = 25;
  uint64_t v55 = v5;
  int v56 = 0;
  sub_DB6A08(v3, (uint64_t)v61);
  sub_494284(1, v4, (uint64_t)v61);
  char v52 = 0;
  uint64_t v50 = 0;
  uint64_t v49 = 0;
  uint64_t v51 = 0;
  uint64_t v47 = 0;
  int64_t v46 = 0;
  uint64_t v48 = 0;
  char v60 = 0;
  uint64_t v44 = 0;
  std::string::size_type v43 = 0;
  uint64_t v45 = 0;
  uint64_t v41 = 0;
  size_t v40 = 0;
  uint64_t v42 = 0;
  long long v27 = 0u;
  long long v26 = 0u;
  *(_OWORD *)__n128 v25 = 0u;
  char v28 = 1;
  int v29 = 0;
  char v30 = 1;
  v31[0] = 0;
  *(_DWORD *)((char *)v31 + 3) = 0;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  int v35 = -1;
  char v36 = 0;
  uint64_t v39 = 0;
  long long v37 = 0;
  uint64_t v38 = 0;
  uint64_t v24 = v25;
  uint64_t v22 = 0;
  std::string::size_type v21 = 0;
  uint64_t v23 = 0;
  uint64_t v19 = 0;
  std::string::size_type v18 = 0;
  uint64_t v20 = 0;
  uint64_t v16 = 0;
  uint64_t v15 = 0;
  uint64_t v17 = 0;
  sub_11B16A4((uint64_t)v11, 0, 0);
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  int v10 = 1065353216;
  sub_737844((uint64_t)v7);
}

void sub_D600CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (*(char *)(v14 + 23) < 0) {
    operator delete((void *)STACK[0x1470]);
  }
  sub_162D64C(a14);
  sub_162D64C(&STACK[0x918]);
  sub_D0FB2C((uint64_t)&STACK[0xD78]);
  sub_5450C((uint64_t)&STACK[0xF60]);
  sub_C8423C(&STACK[0xF88]);
  sub_1A668((void **)&STACK[0x10A0]);
  sub_574530((void **)&STACK[0x10B8]);
  sub_C66564((void ***)&STACK[0x10D0]);
  sub_3C77C4((uint64_t)&STACK[0x10F0]);
  sub_D0FAF0((void ***)&STACK[0x1168]);
  sub_CF1A48((void ****)&STACK[0x1180]);
  if (LOBYTE(STACK[0x2228]))
  {
    uint64_t v16 = (void *)STACK[0x2210];
    if (STACK[0x2210])
    {
      STACK[0x2218] = (unint64_t)v16;
      operator delete(v16);
    }
  }
  sub_C628C4((void ****)&STACK[0x1198]);
  sub_401F88((void **)&STACK[0x11B0]);
  sub_4BCC2C((uint64_t)&STACK[0x2230]);
  sub_C7E3C8((uint64_t)&STACK[0x11D0]);
  _Unwind_Resume(a1);
}

void sub_D604A0()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  sub_725D0((uint64_t)&v59);
  char v58 = 26;
  unsigned int v4 = sub_DB7034(v3);
  char v57 = v4;
  uint64_t v5 = *(void *)sub_37D0C0(v2);
  sub_D53E44(26, v3, v2);
  v6.n128_u64[0] = 0;
  v6.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(&v53, &v6);
  char v54 = 26;
  uint64_t v55 = v5;
  int v56 = 0;
  sub_DB6A08(v3, (uint64_t)v61);
  sub_494284(1, v4, (uint64_t)v61);
  char v52 = 0;
  uint64_t v50 = 0;
  uint64_t v49 = 0;
  uint64_t v51 = 0;
  uint64_t v47 = 0;
  int64_t v46 = 0;
  uint64_t v48 = 0;
  char v60 = 0;
  uint64_t v44 = 0;
  std::string::size_type v43 = 0;
  uint64_t v45 = 0;
  uint64_t v41 = 0;
  size_t v40 = 0;
  uint64_t v42 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  char v28 = 1;
  int v29 = 0;
  char v30 = 1;
  v31[0] = 0;
  *(_DWORD *)((char *)v31 + 3) = 0;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  int v35 = -1;
  char v36 = 0;
  uint64_t v39 = 0;
  long long v37 = 0;
  uint64_t v38 = 0;
  uint64_t v24 = &v25;
  uint64_t v22 = 0;
  std::string::size_type v21 = 0;
  uint64_t v23 = 0;
  uint64_t v19 = 0;
  std::string::size_type v18 = 0;
  uint64_t v20 = 0;
  uint64_t v16 = 0;
  uint64_t v15 = 0;
  uint64_t v17 = 0;
  sub_11B16A4((uint64_t)v11, 0, 0);
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v8 = 0u;
  int v10 = 1065353216;
  sub_737844((uint64_t)v7);
}

void sub_D61BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (*(char *)(v13 + 23) < 0) {
    operator delete((void *)STACK[0x1480]);
  }
  sub_162D64C(a13);
  sub_162D64C(&STACK[0x928]);
  sub_D0FB2C((uint64_t)&STACK[0xD88]);
  sub_5450C((uint64_t)&STACK[0xF70]);
  sub_C8423C(&STACK[0xF98]);
  sub_1A668((void **)&STACK[0x10B0]);
  sub_574530((void **)&STACK[0x10C8]);
  sub_C66564((void ***)&STACK[0x10E0]);
  sub_3C77C4((uint64_t)&STACK[0x1100]);
  sub_D0FAF0((void ***)&STACK[0x1178]);
  sub_CF1A48((void ****)&STACK[0x1190]);
  if (LOBYTE(STACK[0x2238]))
  {
    uint64_t v15 = (void *)STACK[0x2220];
    if (STACK[0x2220])
    {
      STACK[0x2228] = (unint64_t)v15;
      operator delete(v15);
    }
  }
  sub_C628C4((void ****)&STACK[0x11A8]);
  sub_401F88((void **)&STACK[0x11C0]);
  sub_4BCC2C((uint64_t)&STACK[0x2240]);
  sub_C7E3C8((uint64_t)&STACK[0x11E0]);
  _Unwind_Resume(a1);
}

void sub_D61FB4()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  sub_725D0((uint64_t)&v59);
  char v58 = 27;
  unsigned int v4 = sub_DB7034(v3);
  char v57 = v4;
  uint64_t v5 = *(void *)sub_37D0C0(v2);
  sub_D53E44(27, v3, v2);
  v6.n128_u64[0] = 0;
  v6.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814(&v53, &v6);
  char v54 = 27;
  uint64_t v55 = v5;
  int v56 = 0;
  sub_DB6A08(v3, (uint64_t)v61);
  sub_494284(1, v4, (uint64_t)v61);
  char v52 = 0;
  uint64_t v50 = 0;
  uint64_t v49 = 0;
  uint64_t v51 = 0;
  uint64_t v47 = 0;
  int64_t v46 = 0;
  uint64_t v48 = 0;
  char v60 = 0;
  uint64_t v44 = 0;
  std::string::size_type v43 = 0;
  uint64_t v45 = 0;
  uint64_t v41 = 0;
  size_t v40 = 0;
  uint64_t v42 = 0;
  long long v27 = 0u;
  long long v26 = 0u;
  *(_OWORD *)long long v25 = 0u;
  char v28 = 1;
  int v29 = 0;
  char v30 = 1;
  v31[0] = 0;
  *(_DWORD *)((char *)v31 + 3) = 0;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  int v35 = -1;
  char v36 = 0;
  uint64_t v39 = 0;
  long long v37 = 0;
  uint64_t v38 = 0;
  uint64_t v24 = v25;
  uint64_t v22 = 0;
  std::string::size_type v21 = 0;
  uint64_t v23 = 0;
  uint64_t v19 = 0;
  std::string::size_type v18 = 0;
  uint64_t v20 = 0;
  uint64_t v16 = 0;
  uint64_t v15 = 0;
  uint64_t v17 = 0;
  sub_11B16A4((uint64_t)v11, 0, 0);
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  *(_OWORD *)long long v8 = 0u;
  int v10 = 1065353216;
  sub_737844((uint64_t)v7);
}

void sub_D636C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (*(char *)(v14 + 23) < 0) {
    operator delete((void *)STACK[0x1470]);
  }
  sub_162D64C(a14);
  sub_162D64C(&STACK[0x918]);
  sub_D0FB2C((uint64_t)&STACK[0xD78]);
  sub_5450C((uint64_t)&STACK[0xF60]);
  sub_C8423C(&STACK[0xF88]);
  sub_1A668((void **)&STACK[0x10A0]);
  sub_574530((void **)&STACK[0x10B8]);
  sub_C66564((void ***)&STACK[0x10D0]);
  sub_3C77C4((uint64_t)&STACK[0x10F0]);
  sub_D0FAF0((void ***)&STACK[0x1168]);
  sub_CF1A48((void ****)&STACK[0x1180]);
  if (LOBYTE(STACK[0x2228]))
  {
    uint64_t v16 = (void *)STACK[0x2210];
    if (STACK[0x2210])
    {
      STACK[0x2218] = (unint64_t)v16;
      operator delete(v16);
    }
  }
  sub_CE21E0((void ****)&STACK[0x1198]);
  sub_401F88((void **)&STACK[0x11B0]);
  sub_4BCC2C((uint64_t)&STACK[0x2230]);
  sub_C7E3C8((uint64_t)&STACK[0x11D0]);
  _Unwind_Resume(a1);
}

void sub_D63A98(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char **a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  *(unsigned char *)(a5 + 8) = 0;
  long long v7 = (std::error_condition *)(a5 + 8);
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) != &off_2439090 || *(_DWORD *)a1 != 0)
  {
    sub_3E7814(v37, (__n128 *)a1);
    unint64_t v9 = v37[2].n128_u64[0];
    unsigned __int32 v10 = v37[2].n128_u32[2];
    *(unsigned char *)(a5 + 8) = v37[0].n128_u8[0];
    *(void *)(a5 + 9) = *(unint64_t *)((char *)v37[0].n128_u64 + 1);
    *(void *)(a5 + 16) = v37[0].n128_u64[1];
    *(__n128 *)(a5 + 24) = v37[1];
    *(void *)(a5 + 40) = v9;
    *(_DWORD *)(a5 + 48) = v10;
    *(unsigned char *)a5 = 0;
    return;
  }
  uint64_t v13 = sub_CBAA38((uint64_t)v41, *(void *)a2, **(unsigned char **)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
  sub_CB9D7C(v13, (uint64_t)v37);
  unsigned __int8 v14 = v37[0].n128_u8[0];
  if (*(unsigned char *)a5)
  {
    if (v37[0].n128_u8[0])
    {
LABEL_8:
      *(unsigned char *)(a5 + 8) = v37[0].n128_u8[8];
      *(unsigned char *)a5 = v14;
LABEL_44:
      int v31 = *(unsigned __int8 *)(a1 + 48);
      memset(v37, 0, sizeof(v37));
      sub_717B8(v31, a3, (uint64_t)v37, *(void *)(a1 + 56));
      unint64_t v32 = v37[1].n128_u64[1];
      if (v37[1].n128_u64[1])
      {
        unint64_t v33 = v37[2].n128_u64[0];
        uint64_t v34 = (void *)v37[1].n128_u64[1];
        if (v37[2].n128_u64[0] != v37[1].n128_u64[1])
        {
          do
          {
            if (*(char *)(v33 - 25) < 0) {
              operator delete(*(void **)(v33 - 48));
            }
            v33 -= 48;
          }
          while (v33 != v32);
          uint64_t v34 = (void *)v37[1].n128_u64[1];
        }
        v37[2].n128_u64[0] = v32;
        operator delete(v34);
      }
      if (v37[1].n128_i8[7] < 0) {
        operator delete((void *)v37[0].n128_u64[0]);
      }
      **a4 = 1;
      return;
    }
    goto LABEL_16;
  }
  if (!v37[0].n128_u8[0])
  {
LABEL_16:
    *long long v7 = *(std::error_condition *)((char *)v37 + 8);
    *(__n128 *)(a5 + 24) = *(__n128 *)((char *)&v37[1] + 8);
    *(void *)(a5 + 40) = v37[2].n128_u64[1];
    v37[1].n128_u64[1] = 0;
    v37[2] = 0uLL;
    *(_DWORD *)(a5 + 48) = v38;
    *(unsigned char *)a5 = 0;
    goto LABEL_17;
  }
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
    goto LABEL_8;
  }
  uint64_t v16 = *(void *)(a5 + 32);
  uint64_t v17 = *(void **)(a5 + 24);
  if (v16 != v15)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0) {
        operator delete(*(void **)(v16 - 24));
      }
      v16 -= 32;
    }
    while (v16 != v15);
    uint64_t v17 = *(void **)(a5 + 24);
  }
  *(void *)(a5 + 32) = v15;
  operator delete(v17);
  int v30 = v37[0].n128_u8[0];
  *(unsigned char *)(a5 + 8) = v37[0].n128_u8[8];
  *(unsigned char *)a5 = v30;
  if (v30) {
    goto LABEL_44;
  }
LABEL_17:
  unint64_t v18 = v37[1].n128_u64[1];
  if (v37[1].n128_u64[1])
  {
    unint64_t v19 = v37[2].n128_u64[0];
    if (v37[2].n128_u64[0] == v37[1].n128_u64[1])
    {
      v37[2].n128_u64[0] = v37[1].n128_u64[1];
      operator delete((void *)v37[1].n128_u64[1]);
      if (*(unsigned char *)a5) {
        goto LABEL_44;
      }
    }
    else
    {
      do
      {
        if (*(char *)(v19 - 1) < 0) {
          operator delete(*(void **)(v19 - 24));
        }
        v19 -= 32;
      }
      while (v19 != v18);
      v37[2].n128_u64[0] = v18;
      operator delete((void *)v37[1].n128_u64[1]);
      if (*(unsigned char *)a5) {
        goto LABEL_44;
      }
    }
  }
  sub_71424(*(unsigned __int8 *)(a1 + 48), v7, *(void *)(a1 + 56));
  int v20 = *(unsigned __int8 *)(a1 + 48);
  v37[1].n128_u8[7] = 18;
  strcpy((char *)v37, "InternalError[All]");
  sub_710A8(v20, (uint64_t)v37, *(void *)(a1 + 56));
  if (v37[1].n128_i8[7] < 0) {
    operator delete((void *)v37[0].n128_u64[0]);
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v37);
    sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v35, v21);
    if ((v36 & 0x80u) == 0) {
      uint64_t v22 = v35;
    }
    else {
      uint64_t v22 = (void **)v35[0];
    }
    if ((v36 & 0x80u) == 0) {
      uint64_t v23 = v36;
    }
    else {
      uint64_t v23 = (uint64_t)v35[1];
    }
    uint64_t v24 = sub_188FC78(v37, (uint64_t)v22, v23);
    sub_188FC78(v24, (uint64_t)" failed in step ", 16);
    long long v25 = (void *)std::ostream::operator<<();
    long long v26 = sub_188FC78(v25, (uint64_t)" (", 2);
    long long v27 = (char *)operator new(0x19uLL);
    strcpy(v27, "RequestValidationModule");
    char v28 = sub_188FC78(v26, (uint64_t)v27, 23);
    int v29 = sub_188FC78(v28, (uint64_t)") with error: ", 14);
    sub_CF2D60(v29, (uint64_t)v7);
    operator delete(v27);
    if ((char)v36 < 0) {
      operator delete(v35[0]);
    }
    std::stringbuf::str();
    sub_7246C((uint64_t *)v35, 3u);
    if ((char)v36 < 0) {
      operator delete(v35[0]);
    }
    if (v40 < 0) {
      operator delete(v39);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  sub_3E7A10(a1, (uint64_t)v7);
}

void sub_D63F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_C5C9E0(v21);
  _Unwind_Resume(a1);
}

void sub_D6400C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_A3A4((uint64_t)va);
  sub_C5C9E0(v5);
  _Unwind_Resume(a1);
}

void sub_D64034(_Unwind_Exception *a1)
{
  sub_C5C9E0(v1);
  _Unwind_Resume(a1);
}

void sub_D64048(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int32 v10 = (void *)(a5 + 788);
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  bzero((void *)(a5 + 8), 0x360uLL);
  sub_47E0E4((_OWORD *)(a5 + 8));
  *(_DWORD *)(a5 + 56) = -1;
  *(unsigned char *)(a5 + 240) = 0;
  *(unsigned char *)(a5 + 376) = 0;
  *(_OWORD *)(a5 + 536) = 0u;
  *(_OWORD *)(a5 + 552) = 0u;
  *(_OWORD *)(a5 + 568) = 0u;
  *(void *)(a5 + 520) = 0;
  *(void *)(a5 + 525) = 0;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 384) = 0u;
  *(_OWORD *)(a5 + 400) = 0u;
  *(_OWORD *)(a5 + 416) = 0u;
  *(_OWORD *)(a5 + 432) = 0u;
  *(_OWORD *)(a5 + 448) = 0u;
  *(_OWORD *)(a5 + 464) = 0u;
  *(_OWORD *)(a5 + 480) = 0u;
  *(_OWORD *)(a5 + 496) = 0u;
  *(_DWORD *)(a5 + 512) = 0;
  *(void *)(a5 + 584) = 0x3FF0000000000000;
  *(void *)(a5 + 600) = 0;
  *(void *)(a5 + 592) = 0;
  *(void *)(a5 + 608) = 0;
  *(unsigned char *)(a5 + 616) = 5;
  *(_OWORD *)(a5 + 640) = 0u;
  *(_OWORD *)(a5 + 656) = 0u;
  *(_OWORD *)(a5 + 624) = 0u;
  *(_DWORD *)(a5 + 672) = 0x7FFFFFFF;
  *(void *)(a5 + 760) = 0;
  *(void *)(a5 + 768) = 0;
  *(_OWORD *)(a5 + 737) = 0u;
  *(_OWORD *)(a5 + 712) = 0u;
  *(_OWORD *)(a5 + 728) = 0u;
  *(_OWORD *)(a5 + 680) = 0u;
  *(_OWORD *)(a5 + 696) = 0u;
  *(void *)(a5 + 776) = -1;
  *(_DWORD *)(a5 + 784) = 0x7FFFFFFF;
  *unsigned __int32 v10 = 0;
  *(void *)(a5 + 800) = -1;
  *(_DWORD *)(a5 + 808) = -1;
  *(unsigned char *)(a5 + 816) = 0;
  *(unsigned char *)(a5 + 848) = 0;
  *(void *)(a5 + 856) = 0;
  *(_WORD *)(a5 + 864) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && !*(_DWORD *)a1)
  {
    sub_CF5040(&v48, *(void ****)a2, *(void *)(a2 + 8), *(void **)(a2 + 16), 0);
    sub_C9E7F4((unsigned __int8 *)&v48, (uint64_t)v53);
    sub_CA0E94(a5, (unsigned __int8 *)v53);
    if (LOBYTE(v53[0]))
    {
      sub_CA60E4((uint64_t)&v53[1]);
    }
    else
    {
      uint64_t v14 = __p;
      if ((void)__p)
      {
        uint64_t v15 = *((void *)&__p + 1);
        uint64_t v16 = (void *)__p;
        if (*((void *)&__p + 1) != (void)__p)
        {
          do
          {
            if (*(char *)(v15 - 1) < 0) {
              operator delete(*(void **)(v15 - 24));
            }
            v15 -= 32;
          }
          while (v15 != v14);
          uint64_t v16 = (void *)__p;
        }
        *((void *)&__p + 1) = v14;
        operator delete(v16);
      }
    }
    int v20 = *(unsigned __int8 *)(a1 + 48);
    if (!*(unsigned char *)a5)
    {
      sub_71424(*(unsigned __int8 *)(a1 + 48), (const std::error_condition *)(a5 + 8), *(void *)(a1 + 56));
      int v24 = *(unsigned __int8 *)(a1 + 48);
      HIBYTE(v53[2]) = 18;
      strcpy((char *)v53, "InternalError[All]");
      sub_710A8(v24, (uint64_t)v53, *(void *)(a1 + 56));
      if (SHIBYTE(v53[2]) < 0) {
        operator delete(v53[0]);
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v53);
        sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v46, v25);
        if ((v47 & 0x80u) == 0) {
          long long v26 = v46;
        }
        else {
          long long v26 = (void **)v46[0];
        }
        if ((v47 & 0x80u) == 0) {
          uint64_t v27 = v47;
        }
        else {
          uint64_t v27 = (uint64_t)v46[1];
        }
        char v28 = sub_188FC78(v53, (uint64_t)v26, v27);
        sub_188FC78(v28, (uint64_t)" failed in step ", 16);
        int v29 = (void *)std::ostream::operator<<();
        int v30 = sub_188FC78(v29, (uint64_t)" (", 2);
        sub_7B8BC(3, (char *)&v52);
        int v31 = std::string::append(&v52, "PathDecoderModule");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        int64_t v45 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v44 = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        if (v45 >= 0) {
          unint64_t v33 = v44;
        }
        else {
          unint64_t v33 = (void **)v44[0];
        }
        if (v45 >= 0) {
          uint64_t v34 = HIBYTE(v45);
        }
        else {
          uint64_t v34 = (uint64_t)v44[1];
        }
        int v35 = sub_188FC78(v30, (uint64_t)v33, v34);
        unsigned __int8 v36 = sub_188FC78(v35, (uint64_t)") with error: ", 14);
        sub_CF2D60(v36, a5 + 8);
        if (SHIBYTE(v45) < 0) {
          operator delete(v44[0]);
        }
        if ((char)v47 < 0) {
          operator delete(v46[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v52, 3u);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        if (v58 < 0) {
          operator delete(v57);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_3E7A10(a1, a5 + 8);
      goto LABEL_75;
    }
    sub_CF4E10(a5 + 856, (uint64_t)v53);
    sub_717B8(v20, a3, (uint64_t)v53, *(void *)(a1 + 56));
    uint64_t v21 = __p;
    if ((void)__p)
    {
      uint64_t v22 = *((void *)&__p + 1);
      uint64_t v23 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
        {
          if (*(char *)(v22 - 25) < 0) {
            operator delete(*(void **)(v22 - 48));
          }
          v22 -= 48;
        }
        while (v22 != v21);
        uint64_t v23 = (void *)__p;
      }
      *((void *)&__p + 1) = v21;
      operator delete(v23);
    }
    if (SHIBYTE(v53[2]) < 0)
    {
      operator delete(v53[0]);
      uint64_t v37 = *a4;
      int v38 = *(void **)(*a4 + 8);
      if ((unint64_t)v38 < *(void *)(*a4 + 16)) {
        goto LABEL_69;
      }
    }
    else
    {
      uint64_t v37 = *a4;
      int v38 = *(void **)(*a4 + 8);
      if ((unint64_t)v38 < *(void *)(*a4 + 16))
      {
LABEL_69:
        *int v38 = 0;
        v38[1] = 0;
        uint64_t v39 = (void ***)(v38 + 3);
        v38[2] = 0;
        goto LABEL_72;
      }
    }
    uint64_t v39 = sub_C78EA8((void ****)v37);
LABEL_72:
    *(void *)(v37 + 8) = v39;
    sub_EB6CAC((int64x2_t *)(v39 - 3), a5 + 8, 0);
    uint64_t v40 = a4[1];
    if (*(unsigned char *)(a5 + 848))
    {
      uint64_t v41 = (_OWORD *)((char *)v10 + 36);
      if (*(unsigned char *)(v40 + 24))
      {
        std::string::size_type v43 = *(void **)v40;
        if (*(void *)v40)
        {
          *(void *)(v40 + 8) = v43;
          operator delete(v43);
          *(void *)uint64_t v40 = 0;
          *(void *)(v40 + 8) = 0;
          *(void *)(v40 + 16) = 0;
        }
        *(_OWORD *)uint64_t v40 = *v41;
        *(void *)(v40 + 16) = *(void *)(a5 + 840);
        *(void *)uint64_t v41 = 0;
        *(void *)((char *)v10 + 44) = 0;
        *(void *)((char *)v10 + 52) = 0;
      }
      else
      {
        *(void *)uint64_t v40 = 0;
        *(void *)(v40 + 8) = 0;
        *(void *)(v40 + 16) = 0;
        *(_OWORD *)uint64_t v40 = *v41;
        *(void *)(v40 + 16) = *(void *)(a5 + 840);
        *(void *)uint64_t v41 = 0;
        *(void *)((char *)v10 + 44) = 0;
        *(void *)((char *)v10 + 52) = 0;
        *(unsigned char *)(v40 + 24) = 1;
      }
    }
    else if (*(unsigned char *)(v40 + 24))
    {
      uint64_t v42 = *(void **)v40;
      if (*(void *)v40)
      {
        *(void *)(v40 + 8) = v42;
        operator delete(v42);
      }
      *(unsigned char *)(v40 + 24) = 0;
    }
LABEL_75:
    sub_CF5B18(&v48);
    return;
  }
  sub_3E7814(&v48, (__n128 *)a1);
  LOBYTE(v53[0]) = 0;
  *(__n128 *)&v53[1] = v48;
  long long __p = *(_OWORD *)v49;
  uint64_t v55 = v50;
  v49[0] = 0;
  v49[1] = 0;
  uint64_t v50 = 0;
  int v56 = v51;
  sub_CA0E94(a5, (unsigned __int8 *)v53);
  if (LOBYTE(v53[0]))
  {
    sub_CA60E4((uint64_t)&v53[1]);
  }
  else
  {
    uint64_t v11 = __p;
    if ((void)__p)
    {
      uint64_t v12 = *((void *)&__p + 1);
      uint64_t v13 = (void *)__p;
      if (*((void *)&__p + 1) != (void)__p)
      {
        do
        {
          if (*(char *)(v12 - 1) < 0) {
            operator delete(*(void **)(v12 - 24));
          }
          v12 -= 32;
        }
        while (v12 != v11);
        uint64_t v13 = (void *)__p;
      }
      *((void *)&__p + 1) = v11;
      operator delete(v13);
    }
  }
  uint64_t v17 = (void **)v49[0];
  if (v49[0])
  {
    unint64_t v18 = (void **)v49[1];
    unint64_t v19 = v49[0];
    if (v49[1] != v49[0])
    {
      do
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 4;
      }
      while (v18 != v17);
      unint64_t v19 = v49[0];
    }
    v49[1] = v17;
    operator delete(v19);
  }
}

void sub_D64734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a58);
  sub_CF5B18(&a16);
  sub_CA0F5C(v58);
  _Unwind_Resume(a1);
}

void sub_D64818(_Unwind_Exception *a1)
{
  sub_CA0F5C(v1);
  _Unwind_Resume(a1);
}

void sub_D64830(_Unwind_Exception *a1)
{
  sub_CA0F5C(v1);
  _Unwind_Resume(a1);
}

void sub_D64844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_CF5B18((uint64_t *)va);
  sub_CA0F5C(v8);
  _Unwind_Resume(a1);
}

void sub_D64860(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 64);
  *(unsigned char *)a5 = 1;
  *(_OWORD *)(a5 + 8) = 0u;
  uint64_t v8 = (uint64_t *)(a5 + 8);
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_OWORD *)(a5 + 66) = 0u;
  *(_WORD *)(a5 + 82) = 1;
  *(unsigned char *)(a5 + 88) = 0;
  if (*(void (****)(std::error_category *__hidden))(a1 + 8) == &off_2439090 && !*(_DWORD *)a1)
  {
    unint64_t v11 = a2[1];
    unint64_t v12 = a2[2];
    int v13 = *(unsigned __int8 *)(v12 + 8);
    if (*(unsigned char *)(v12 + 8)) {
      uint64_t v5 = *(void *)v12;
    }
    v49.n128_u64[0] = *a2;
    v49.n128_u32[2] = 0;
    *(void *)&long long v50 = v11;
    BYTE8(v50) = sub_DC5CDC(&v49);
    LOBYTE(v52) = v13;
    if (v13) {
      uint64_t v51 = v5;
    }
    sub_C9CA80((uint64_t)&v49, (uint64_t)v43);
    sub_C9D2A4(a5, (uint64_t)v43);
    if (LOBYTE(v43[0]))
    {
      uint64_t v14 = (char *)v43[1];
      if (v43[1])
      {
        uint64_t v15 = (char *)v43[2];
        uint64_t v16 = v43[1];
        if (v43[2] != v43[1])
        {
          do
          {
            v15 -= 376;
            sub_402C7C((uint64_t)v15);
          }
          while (v15 != v14);
          uint64_t v16 = v43[1];
        }
        v43[2] = v14;
LABEL_44:
        operator delete(v16);
      }
    }
    else
    {
      uint64_t v22 = (void **)__p[0];
      if (__p[0])
      {
        uint64_t v23 = (void **)__p[1];
        uint64_t v16 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v23 - 1) < 0) {
              operator delete(*(v23 - 3));
            }
            v23 -= 4;
          }
          while (v23 != v22);
          uint64_t v16 = __p[0];
        }
        __p[1] = v22;
        goto LABEL_44;
      }
    }
    int v27 = *(unsigned __int8 *)(a1 + 48);
    if (*(unsigned char *)a5)
    {
      sub_CF2E84(a5 + 32, (uint64_t)v43);
      sub_717B8(v27, a3, (uint64_t)v43, *(void *)(a1 + 56));
      char v28 = (void **)__p[0];
      if (__p[0])
      {
        int v29 = (void **)__p[1];
        int v30 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v29 - 25) < 0) {
              operator delete(*(v29 - 6));
            }
            v29 -= 6;
          }
          while (v29 != v28);
          int v30 = __p[0];
        }
        __p[1] = v28;
        operator delete(v30);
      }
      if (SHIBYTE(v43[2]) < 0) {
        operator delete(v43[0]);
      }
      sub_D64EB8(a4, v8);
    }
    sub_71424(*(unsigned __int8 *)(a1 + 48), (const std::error_condition *)v8, *(void *)(a1 + 56));
    int v31 = *(unsigned __int8 *)(a1 + 48);
    HIBYTE(v43[2]) = 18;
    strcpy((char *)v43, "InternalError[All]");
    sub_710A8(v31, (uint64_t)v43, *(void *)(a1 + 56));
    if (SHIBYTE(v43[2]) < 0) {
      operator delete(v43[0]);
    }
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v43);
      sub_70954(*(unsigned __int8 *)(a1 + 48), (uint64_t)v41, v32);
      if ((v42 & 0x80u) == 0) {
        unint64_t v33 = v41;
      }
      else {
        unint64_t v33 = (void **)v41[0];
      }
      if ((v42 & 0x80u) == 0) {
        uint64_t v34 = v42;
      }
      else {
        uint64_t v34 = (uint64_t)v41[1];
      }
      int v35 = sub_188FC78(v43, (uint64_t)v33, v34);
      sub_188FC78(v35, (uint64_t)" failed in step ", 16);
      unsigned __int8 v36 = (void *)std::ostream::operator<<();
      uint64_t v37 = sub_188FC78(v36, (uint64_t)" (", 2);
      int v38 = (char *)operator new(0x28uLL);
      strcpy(v38, "InputPointTransformerModuleOutput");
      uint64_t v39 = sub_188FC78(v37, (uint64_t)v38, 33);
      uint64_t v40 = sub_188FC78(v39, (uint64_t)") with error: ", 14);
      sub_CF2D60(v40, (uint64_t)v8);
      operator delete(v38);
      if ((char)v42 < 0) {
        operator delete(v41[0]);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)v41, 3u);
      if ((char)v42 < 0) {
        operator delete(v41[0]);
      }
      if (v48 < 0) {
        operator delete(v47);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    sub_3E7A10(a1, (uint64_t)v8);
    return;
  }
  sub_3E7814(&v49, (__n128 *)a1);
  LOBYTE(v43[0]) = 0;
  *(__n128 *)&v43[1] = v49;
  *(_OWORD *)long long __p = v50;
  uint64_t v45 = v51;
  long long v50 = 0uLL;
  uint64_t v51 = 0;
  int v46 = v52;
  sub_C9D2A4(a5, (uint64_t)v43);
  if (LOBYTE(v43[0]))
  {
    uint64_t v17 = (char *)v43[1];
    if (!v43[1]) {
      goto LABEL_34;
    }
    unint64_t v18 = (char *)v43[2];
    unint64_t v19 = v43[1];
    if (v43[2] != v43[1])
    {
      do
      {
        v18 -= 376;
        sub_402C7C((uint64_t)v18);
      }
      while (v18 != v17);
      unint64_t v19 = v43[1];
    }
    v43[2] = v17;
  }
  else
  {
    int v20 = (void **)__p[0];
    if (!__p[0]) {
      goto LABEL_34;
    }
    uint64_t v21 = (void **)__p[1];
    unint64_t v19 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v21 - 1) < 0) {
          operator delete(*(v21 - 3));
        }
        v21 -= 4;
      }
      while (v21 != v20);
      unint64_t v19 = __p[0];
    }
    __p[1] = v20;
  }
  operator delete(v19);
LABEL_34:
  uint64_t v24 = v50;
  if ((void)v50)
  {
    uint64_t v25 = *((void *)&v50 + 1);
    long long v26 = (void *)v50;
    if (*((void *)&v50 + 1) != (void)v50)
    {
      do
      {
        if (*(char *)(v25 - 1) < 0) {
          operator delete(*(void **)(v25 - 24));
        }
        v25 -= 32;
      }
      while (v25 != v24);
      long long v26 = (void *)v50;
    }
    *((void *)&v50 + 1) = v24;
    operator delete(v26);
  }
}

void sub_D64DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_C9D440(v21);
  _Unwind_Resume(a1);
}

void sub_D64EA4(_Unwind_Exception *a1)
{
  sub_C9D440(v1);
  _Unwind_Resume(a1);
}

void sub_D64EB8(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (v2 != a2) {
    sub_C5E9FC(v2, *a2, a2[1], 0x51B3BEA3677D46CFLL * ((a2[1] - *a2) >> 3));
  }
  sub_47E0E4(&v3);
  sub_4006C4((uint64_t)v4);
}

void sub_D64FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_405E28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D64FB4(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0x51B3BEA3677D46CFLL * ((v8 - *a1) >> 3) >= a4)
  {
    uint64_t result = a1[1];
    if (0x51B3BEA3677D46CFLL * ((result - v9) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        uint64_t v23 = v9;
      }
      else
      {
        uint64_t v23 = v9;
        do
        {
          sub_5A303C(v9, v6);
          v6 += 376;
          v9 += 376;
          v23 += 376;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while (result != v23)
        uint64_t result = sub_402C7C(result - 376);
      a1[1] = v23;
    }
    else
    {
      uint64_t v19 = a2 + 8 * ((result - v9) >> 3);
      if (result != v9)
      {
        uint64_t v20 = 8 * ((result - v9) >> 3);
        do
        {
          uint64_t result = sub_5A303C(v9, v6);
          v6 += 376;
          v9 += 376;
          v20 -= 376;
        }
        while (v20);
        uint64_t v9 = a1[1];
      }
      uint64_t v21 = v9;
      if (v19 != a3)
      {
        uint64_t v22 = 0;
        do
        {
          uint64_t result = sub_48381C(v9 + v22, v19 + v22);
          v22 += 376;
        }
        while (v19 + v22 != a3);
        uint64_t v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      unint64_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = sub_402C7C(v10 - 376);
        while (v10 != v9);
        unint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAE4C415C9882B9) {
      goto LABEL_37;
    }
    unint64_t v12 = 0x51B3BEA3677D46CFLL * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x572620AE4C415CLL ? 0xAE4C415C9882B9 : v13;
    if (v14 > 0xAE4C415C9882B9) {
LABEL_37:
    }
      sub_2E00();
    uint64_t v15 = 376 * v14;
    uint64_t result = (uint64_t)operator new(376 * v14);
    uint64_t v17 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v15;
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        uint64_t result = sub_48381C(v17 + v18, v6 + v18);
        v18 += 376;
      }
      while (v6 + v18 != a3);
      v17 += v18;
    }
    a1[1] = v17;
  }
  return result;
}